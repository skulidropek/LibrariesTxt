public class Microsoft.AspNetCore.Builder.IISOptions : object {
    [CompilerGeneratedAttribute]
private bool <AutomaticAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForwardWindowsAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForwardClientCertificate>k__BackingField;
    public bool AutomaticAuthentication { get; public set; }
    public string AuthenticationDisplayName { get; public set; }
    internal bool ForwardWindowsAuthentication { get; internal set; }
    public bool ForwardClientCertificate { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutomaticAuthentication();
    [CompilerGeneratedAttribute]
public void set_AutomaticAuthentication(bool value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationDisplayName();
    [CompilerGeneratedAttribute]
public void set_AuthenticationDisplayName(string value);
    [CompilerGeneratedAttribute]
internal bool get_ForwardWindowsAuthentication();
    [CompilerGeneratedAttribute]
internal void set_ForwardWindowsAuthentication(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForwardClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ForwardClientCertificate(bool value);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.WebHostBuilderIISExtensions : object {
    private static string ServerPort;
    private static string ServerPath;
    private static string PairingToken;
    private static string IISAuth;
    private static string IISWebSockets;
    private static WebHostBuilderIISExtensions();
    [ExtensionAttribute]
public static IWebHostBuilder UseIISIntegration(IWebHostBuilder hostBuilder);
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.Constants : object {
    internal static string HttpScheme;
    internal static string HttpsScheme;
    internal static string Chunked;
    internal static string Close;
    internal static string Zero;
    internal static string SchemeDelimiter;
    internal static string DefaultServerAddress;
    internal static Version V1_0;
    internal static Version V1_1;
    private static Constants();
}
internal class Microsoft.AspNetCore.HttpSys.Internal.CookedUrl : object {
    private HTTP_COOKED_URL _nativeCookedUrl;
    internal CookedUrl(HTTP_COOKED_URL nativeCookedUrl);
    internal string GetFullUrl();
    internal string GetHost();
    internal string GetAbsPath();
    internal string GetQueryString();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.HttpSys.Internal.HeaderCollection : object {
    private Nullable`1<long> _contentLength;
    private StringValues _contentLengthText;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, StringValues> <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    private IDictionary`2<string, StringValues> Store { get; private set; }
    public bool IsReadOnly { get; internal set; }
    public StringValues Item { get; public set; }
    private StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Item { get; private set; }
    public int Count { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<StringValues> Values { get; }
    public Nullable`1<long> ContentLength { get; public set; }
    public HeaderCollection(IDictionary`2<string, StringValues> store);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, StringValues> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(IDictionary`2<string, StringValues> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
internal void set_IsReadOnly(bool value);
    public sealed virtual StringValues get_Item(string key);
    public sealed virtual void set_Item(string key, StringValues value);
    private sealed virtual override StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.set_Item(string key, StringValues value);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<StringValues> get_Values();
    public sealed virtual Nullable`1<long> get_ContentLength();
    public sealed virtual void set_ContentLength(Nullable`1<long> value);
    public sealed virtual void Add(KeyValuePair`2<string, StringValues> item);
    public sealed virtual void Add(string key, StringValues value);
    public void Append(string key, string value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, StringValues> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, StringValues>> GetEnumerator();
    public IEnumerable`1<string> GetValues(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, StringValues> item);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, StringValues& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void ThrowIfReadOnly();
    public static void ValidateHeaderCharacters(StringValues headerValues);
    public static void ValidateHeaderCharacters(string headerCharacters);
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.HeaderEncoding : object {
    private static Encoding Encoding;
    private static HeaderEncoding();
    internal static string GetString(Byte* pBytes, int byteCount);
    internal static Byte[] GetBytes(string myString);
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.HeaderParser : object {
    internal static IEnumerable`1<string> Empty;
    private static HeaderParser();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.HttpSys.Internal.HeaderParser/<SplitValues>d__1")]
internal static IEnumerable`1<string> SplitValues(StringValues values);
}
internal class Microsoft.AspNetCore.HttpSys.Internal.HeapAllocHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private static IntPtr ProcessHeap;
    private static HeapAllocHandle();
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.HttpApiTypes : object {
    internal static int MaxTimeout;
    internal static String[] HttpVerbs;
    private static HttpApiTypes();
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.HttpKnownHeaderNames : object {
    internal static string CacheControl;
    internal static string Connection;
    internal static string Date;
    internal static string KeepAlive;
    internal static string Pragma;
    internal static string ProxyConnection;
    internal static string Trailer;
    internal static string TransferEncoding;
    internal static string Upgrade;
    internal static string Via;
    internal static string Warning;
    internal static string ContentLength;
    internal static string ContentType;
    internal static string ContentDisposition;
    internal static string ContentEncoding;
    internal static string ContentLanguage;
    internal static string ContentLocation;
    internal static string ContentRange;
    internal static string Expires;
    internal static string LastModified;
    internal static string Age;
    internal static string Location;
    internal static string ProxyAuthenticate;
    internal static string RetryAfter;
    internal static string Server;
    internal static string SetCookie;
    internal static string SetCookie2;
    internal static string Vary;
    internal static string WWWAuthenticate;
    internal static string Accept;
    internal static string AcceptCharset;
    internal static string AcceptEncoding;
    internal static string AcceptLanguage;
    internal static string Authorization;
    internal static string Cookie;
    internal static string Cookie2;
    internal static string Expect;
    internal static string From;
    internal static string Host;
    internal static string IfMatch;
    internal static string IfModifiedSince;
    internal static string IfNoneMatch;
    internal static string IfRange;
    internal static string IfUnmodifiedSince;
    internal static string MaxForwards;
    internal static string ProxyAuthorization;
    internal static string Referer;
    internal static string Range;
    internal static string UserAgent;
    internal static string ContentMD5;
    internal static string ETag;
    internal static string TE;
    internal static string Allow;
    internal static string AcceptRanges;
    internal static string P3P;
    internal static string XPoweredBy;
    internal static string XAspNetVersion;
    internal static string SecWebSocketKey;
    internal static string SecWebSocketExtensions;
    internal static string SecWebSocketAccept;
    internal static string Origin;
    internal static string SecWebSocketProtocol;
    internal static string SecWebSocketVersion;
}
internal enum Microsoft.AspNetCore.HttpSys.Internal.HttpSysRequestHeader : Enum {
    public int value__;
    public static HttpSysRequestHeader CacheControl;
    public static HttpSysRequestHeader Connection;
    public static HttpSysRequestHeader Date;
    public static HttpSysRequestHeader KeepAlive;
    public static HttpSysRequestHeader Pragma;
    public static HttpSysRequestHeader Trailer;
    public static HttpSysRequestHeader TransferEncoding;
    public static HttpSysRequestHeader Upgrade;
    public static HttpSysRequestHeader Via;
    public static HttpSysRequestHeader Warning;
    public static HttpSysRequestHeader Allow;
    public static HttpSysRequestHeader ContentLength;
    public static HttpSysRequestHeader ContentType;
    public static HttpSysRequestHeader ContentEncoding;
    public static HttpSysRequestHeader ContentLanguage;
    public static HttpSysRequestHeader ContentLocation;
    public static HttpSysRequestHeader ContentMd5;
    public static HttpSysRequestHeader ContentRange;
    public static HttpSysRequestHeader Expires;
    public static HttpSysRequestHeader LastModified;
    public static HttpSysRequestHeader Accept;
    public static HttpSysRequestHeader AcceptCharset;
    public static HttpSysRequestHeader AcceptEncoding;
    public static HttpSysRequestHeader AcceptLanguage;
    public static HttpSysRequestHeader Authorization;
    public static HttpSysRequestHeader Cookie;
    public static HttpSysRequestHeader Expect;
    public static HttpSysRequestHeader From;
    public static HttpSysRequestHeader Host;
    public static HttpSysRequestHeader IfMatch;
    public static HttpSysRequestHeader IfModifiedSince;
    public static HttpSysRequestHeader IfNoneMatch;
    public static HttpSysRequestHeader IfRange;
    public static HttpSysRequestHeader IfUnmodifiedSince;
    public static HttpSysRequestHeader MaxForwards;
    public static HttpSysRequestHeader ProxyAuthorization;
    public static HttpSysRequestHeader Referer;
    public static HttpSysRequestHeader Range;
    public static HttpSysRequestHeader Te;
    public static HttpSysRequestHeader Translate;
    public static HttpSysRequestHeader UserAgent;
}
internal enum Microsoft.AspNetCore.HttpSys.Internal.HttpSysResponseHeader : Enum {
    public int value__;
    public static HttpSysResponseHeader CacheControl;
    public static HttpSysResponseHeader Connection;
    public static HttpSysResponseHeader Date;
    public static HttpSysResponseHeader KeepAlive;
    public static HttpSysResponseHeader Pragma;
    public static HttpSysResponseHeader Trailer;
    public static HttpSysResponseHeader TransferEncoding;
    public static HttpSysResponseHeader Upgrade;
    public static HttpSysResponseHeader Via;
    public static HttpSysResponseHeader Warning;
    public static HttpSysResponseHeader Allow;
    public static HttpSysResponseHeader ContentLength;
    public static HttpSysResponseHeader ContentType;
    public static HttpSysResponseHeader ContentEncoding;
    public static HttpSysResponseHeader ContentLanguage;
    public static HttpSysResponseHeader ContentLocation;
    public static HttpSysResponseHeader ContentMd5;
    public static HttpSysResponseHeader ContentRange;
    public static HttpSysResponseHeader Expires;
    public static HttpSysResponseHeader LastModified;
    public static HttpSysResponseHeader AcceptRanges;
    public static HttpSysResponseHeader Age;
    public static HttpSysResponseHeader ETag;
    public static HttpSysResponseHeader Location;
    public static HttpSysResponseHeader ProxyAuthenticate;
    public static HttpSysResponseHeader RetryAfter;
    public static HttpSysResponseHeader Server;
    public static HttpSysResponseHeader SetCookie;
    public static HttpSysResponseHeader Vary;
    public static HttpSysResponseHeader WwwAuthenticate;
}
internal class Microsoft.AspNetCore.HttpSys.Internal.NativeRequestContext : object {
    private static int AlignmentPadding;
    private IntPtr _originalBufferAddress;
    private HTTP_REQUEST* _nativeRequest;
    private Byte[] _backingBuffer;
    private int _bufferAlignment;
    private SafeNativeOverlapped _nativeOverlapped;
    private bool _permanentlyPinned;
    internal SafeNativeOverlapped NativeOverlapped { get; }
    internal HTTP_REQUEST* NativeRequest { get; }
    internal HTTP_REQUEST_V2* NativeRequestV2 { get; }
    internal ulong RequestId { get; internal set; }
    internal ulong ConnectionId { get; }
    internal HTTP_VERB VerbId { get; }
    internal ulong UrlContext { get; }
    internal ushort UnknownHeaderCount { get; }
    internal SslStatus SslStatus { get; }
    internal UInt32 Size { get; }
    internal NativeRequestContext(SafeNativeOverlapped nativeOverlapped, int bufferAlignment, HTTP_REQUEST* nativeRequest, Byte[] backingBuffer, ulong requestId);
    internal NativeRequestContext(HTTP_REQUEST* request);
    internal SafeNativeOverlapped get_NativeOverlapped();
    internal HTTP_REQUEST* get_NativeRequest();
    internal HTTP_REQUEST_V2* get_NativeRequestV2();
    internal ulong get_RequestId();
    internal void set_RequestId(ulong value);
    internal ulong get_ConnectionId();
    internal HTTP_VERB get_VerbId();
    internal ulong get_UrlContext();
    internal ushort get_UnknownHeaderCount();
    internal SslStatus get_SslStatus();
    internal UInt32 get_Size();
    internal void ReleasePins();
    public virtual void Dispose();
    internal string GetVerb();
    internal string GetRawUrl();
    internal Byte[] GetRawUrlInBytes();
    internal CookedUrl GetCookedUrl();
    internal Version GetVersion();
    internal bool CheckAuthenticated();
    internal WindowsPrincipal GetUser();
    private static string GetAuthTypeFromRequest(HTTP_REQUEST_AUTH_TYPE input);
    internal string GetKnownHeader(HttpSysRequestHeader header);
    private string GetKnowHeaderHelper(HttpSysRequestHeader header, long fixup, HTTP_REQUEST* request);
    internal void GetUnknownHeaders(IDictionary`2<string, StringValues> unknownHeaders);
    private void GetUnknownHeadersHelper(IDictionary`2<string, StringValues> unknownHeaders, long fixup, HTTP_REQUEST* request);
    internal SocketAddress GetRemoteEndPoint();
    internal SocketAddress GetLocalEndPoint();
    private SocketAddress GetEndPoint(bool localEndpoint);
    private SocketAddress GetEndPointHelper(bool localEndpoint, HTTP_REQUEST* request, Byte* pMemoryBlob);
    private static SocketAddress CopyOutAddress(IntPtr address);
    internal UInt32 GetChunks(Int32& dataChunkIndex, UInt32& dataChunkOffset, Byte[] buffer, int offset, int size);
    private UInt32 GetChunksHelper(Int32& dataChunkIndex, UInt32& dataChunkOffset, Byte[] buffer, int offset, int size, long fixup, HTTP_REQUEST* request);
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.NclUtilities : object {
    internal static bool HasShutdownStarted { get; }
    internal static bool get_HasShutdownStarted();
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.RawUrlHelper : object {
    private static Byte[] _forwardSlashPath;
    private static RawUrlHelper();
    public static ArraySegment`1<byte> GetPath(Byte[] raw);
    private static int FindHttpOrHttps(Byte[] raw);
    private static int Find(Byte[] raw, int begin, char target);
}
[DefaultMemberAttribute("Item")]
[GeneratedCodeAttribute("TextTemplatingFileGenerator", "")]
internal class Microsoft.AspNetCore.HttpSys.Internal.RequestHeaders : object {
    private UInt32 _flag0;
    private UInt32 _flag1;
    private StringValues _Accept;
    private StringValues _AcceptCharset;
    private StringValues _AcceptEncoding;
    private StringValues _AcceptLanguage;
    private StringValues _Allow;
    private StringValues _Authorization;
    private StringValues _CacheControl;
    private StringValues _Connection;
    private StringValues _ContentEncoding;
    private StringValues _ContentLanguage;
    private StringValues _ContentLength;
    private StringValues _ContentLocation;
    private StringValues _ContentMd5;
    private StringValues _ContentRange;
    private StringValues _ContentType;
    private StringValues _Cookie;
    private StringValues _Date;
    private StringValues _Expect;
    private StringValues _Expires;
    private StringValues _From;
    private StringValues _Host;
    private StringValues _IfMatch;
    private StringValues _IfModifiedSince;
    private StringValues _IfNoneMatch;
    private StringValues _IfRange;
    private StringValues _IfUnmodifiedSince;
    private StringValues _KeepAlive;
    private StringValues _LastModified;
    private StringValues _MaxForwards;
    private StringValues _Pragma;
    private StringValues _ProxyAuthorization;
    private StringValues _Range;
    private StringValues _Referer;
    private StringValues _Te;
    private StringValues _Trailer;
    private StringValues _TransferEncoding;
    private StringValues _Translate;
    private StringValues _Upgrade;
    private StringValues _UserAgent;
    private StringValues _Via;
    private StringValues _Warning;
    private IDictionary`2<string, StringValues> _extra;
    private NativeRequestContext _requestMemoryBlob;
    private Nullable`1<long> _contentLength;
    private StringValues _contentLengthText;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    internal StringValues Accept { get; internal set; }
    internal StringValues AcceptCharset { get; internal set; }
    internal StringValues AcceptEncoding { get; internal set; }
    internal StringValues AcceptLanguage { get; internal set; }
    internal StringValues Allow { get; internal set; }
    internal StringValues Authorization { get; internal set; }
    internal StringValues CacheControl { get; internal set; }
    internal StringValues Connection { get; internal set; }
    internal StringValues ContentEncoding { get; internal set; }
    internal StringValues ContentLanguage { get; internal set; }
    internal StringValues ContentLength { get; internal set; }
    internal StringValues ContentLocation { get; internal set; }
    internal StringValues ContentMd5 { get; internal set; }
    internal StringValues ContentRange { get; internal set; }
    internal StringValues ContentType { get; internal set; }
    internal StringValues Cookie { get; internal set; }
    internal StringValues Date { get; internal set; }
    internal StringValues Expect { get; internal set; }
    internal StringValues Expires { get; internal set; }
    internal StringValues From { get; internal set; }
    internal StringValues Host { get; internal set; }
    internal StringValues IfMatch { get; internal set; }
    internal StringValues IfModifiedSince { get; internal set; }
    internal StringValues IfNoneMatch { get; internal set; }
    internal StringValues IfRange { get; internal set; }
    internal StringValues IfUnmodifiedSince { get; internal set; }
    internal StringValues KeepAlive { get; internal set; }
    internal StringValues LastModified { get; internal set; }
    internal StringValues MaxForwards { get; internal set; }
    internal StringValues Pragma { get; internal set; }
    internal StringValues ProxyAuthorization { get; internal set; }
    internal StringValues Range { get; internal set; }
    internal StringValues Referer { get; internal set; }
    internal StringValues Te { get; internal set; }
    internal StringValues Trailer { get; internal set; }
    internal StringValues TransferEncoding { get; internal set; }
    internal StringValues Translate { get; internal set; }
    internal StringValues Upgrade { get; internal set; }
    internal StringValues UserAgent { get; internal set; }
    internal StringValues Via { get; internal set; }
    internal StringValues Warning { get; internal set; }
    public bool IsReadOnly { get; internal set; }
    private IDictionary`2<string, StringValues> Extra { get; }
    private StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Item { get; private set; }
    public ICollection`1<string> Keys { get; }
    private ICollection`1<StringValues> System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Values { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.IsReadOnly { get; }
    private Nullable`1<long> Microsoft.AspNetCore.Http.IHeaderDictionary.ContentLength { get; private set; }
    public StringValues Item { get; public set; }
    private StringValues Microsoft.AspNetCore.Http.IHeaderDictionary.Item { get; private set; }
    internal RequestHeaders(NativeRequestContext requestMemoryBlob);
    internal StringValues get_Accept();
    internal void set_Accept(StringValues value);
    internal StringValues get_AcceptCharset();
    internal void set_AcceptCharset(StringValues value);
    internal StringValues get_AcceptEncoding();
    internal void set_AcceptEncoding(StringValues value);
    internal StringValues get_AcceptLanguage();
    internal void set_AcceptLanguage(StringValues value);
    internal StringValues get_Allow();
    internal void set_Allow(StringValues value);
    internal StringValues get_Authorization();
    internal void set_Authorization(StringValues value);
    internal StringValues get_CacheControl();
    internal void set_CacheControl(StringValues value);
    internal StringValues get_Connection();
    internal void set_Connection(StringValues value);
    internal StringValues get_ContentEncoding();
    internal void set_ContentEncoding(StringValues value);
    internal StringValues get_ContentLanguage();
    internal void set_ContentLanguage(StringValues value);
    internal StringValues get_ContentLength();
    internal void set_ContentLength(StringValues value);
    internal StringValues get_ContentLocation();
    internal void set_ContentLocation(StringValues value);
    internal StringValues get_ContentMd5();
    internal void set_ContentMd5(StringValues value);
    internal StringValues get_ContentRange();
    internal void set_ContentRange(StringValues value);
    internal StringValues get_ContentType();
    internal void set_ContentType(StringValues value);
    internal StringValues get_Cookie();
    internal void set_Cookie(StringValues value);
    internal StringValues get_Date();
    internal void set_Date(StringValues value);
    internal StringValues get_Expect();
    internal void set_Expect(StringValues value);
    internal StringValues get_Expires();
    internal void set_Expires(StringValues value);
    internal StringValues get_From();
    internal void set_From(StringValues value);
    internal StringValues get_Host();
    internal void set_Host(StringValues value);
    internal StringValues get_IfMatch();
    internal void set_IfMatch(StringValues value);
    internal StringValues get_IfModifiedSince();
    internal void set_IfModifiedSince(StringValues value);
    internal StringValues get_IfNoneMatch();
    internal void set_IfNoneMatch(StringValues value);
    internal StringValues get_IfRange();
    internal void set_IfRange(StringValues value);
    internal StringValues get_IfUnmodifiedSince();
    internal void set_IfUnmodifiedSince(StringValues value);
    internal StringValues get_KeepAlive();
    internal void set_KeepAlive(StringValues value);
    internal StringValues get_LastModified();
    internal void set_LastModified(StringValues value);
    internal StringValues get_MaxForwards();
    internal void set_MaxForwards(StringValues value);
    internal StringValues get_Pragma();
    internal void set_Pragma(StringValues value);
    internal StringValues get_ProxyAuthorization();
    internal void set_ProxyAuthorization(StringValues value);
    internal StringValues get_Range();
    internal void set_Range(StringValues value);
    internal StringValues get_Referer();
    internal void set_Referer(StringValues value);
    internal StringValues get_Te();
    internal void set_Te(StringValues value);
    internal StringValues get_Trailer();
    internal void set_Trailer(StringValues value);
    internal StringValues get_TransferEncoding();
    internal void set_TransferEncoding(StringValues value);
    internal StringValues get_Translate();
    internal void set_Translate(StringValues value);
    internal StringValues get_Upgrade();
    internal void set_Upgrade(StringValues value);
    internal StringValues get_UserAgent();
    internal void set_UserAgent(StringValues value);
    internal StringValues get_Via();
    internal void set_Via(StringValues value);
    internal StringValues get_Warning();
    internal void set_Warning(StringValues value);
    private bool PropertiesContainsKey(string key);
    private bool PropertiesTryGetValue(string key, StringValues& value);
    private bool PropertiesTrySetValue(string key, StringValues value);
    private bool PropertiesTryRemove(string key);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.HttpSys.Internal.RequestHeaders/<PropertiesKeys>d__170")]
private IEnumerable`1<string> PropertiesKeys();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.HttpSys.Internal.RequestHeaders/<PropertiesValues>d__171")]
private IEnumerable`1<StringValues> PropertiesValues();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.HttpSys.Internal.RequestHeaders/<PropertiesEnumerable>d__172")]
private IEnumerable`1<KeyValuePair`2<string, StringValues>> PropertiesEnumerable();
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
internal void set_IsReadOnly(bool value);
    private IDictionary`2<string, StringValues> get_Extra();
    private sealed virtual override StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.set_Item(string key, StringValues value);
    private string GetKnownHeader(HttpSysRequestHeader header);
    private void GetUnknownHeaders(IDictionary`2<string, StringValues> extra);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Add(string key, StringValues value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    private sealed virtual override ICollection`1<StringValues> System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, StringValues& value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Add(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Contains(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.get_IsReadOnly();
    private sealed virtual override Nullable`1<long> Microsoft.AspNetCore.Http.IHeaderDictionary.get_ContentLength();
    private sealed virtual override void Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentLength(Nullable`1<long> value);
    public StringValues get_Item(string key);
    public void set_Item(string key, StringValues value);
    private sealed virtual override StringValues Microsoft.AspNetCore.Http.IHeaderDictionary.get_Item(string key);
    private sealed virtual override void Microsoft.AspNetCore.Http.IHeaderDictionary.set_Item(string key, StringValues value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Remove(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, StringValues>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void ThrowIfReadOnly();
    public IEnumerable`1<string> GetValues(string key);
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.RequestUriBuilder : object {
    private static Encoding UTF8;
    private static RequestUriBuilder();
    public static string DecodeAndUnescapePath(Byte[] rawUrlBytes);
    private static ArraySegment`1<byte> Unescape(ArraySegment`1<byte> rawPath);
    private static bool DecodeCore(Int32& reader, Int32& writer, int end, Byte[] buffer);
    private static void Copy(int begin, int end, Int32& writer, Byte[] buffer);
    private static Nullable`1<int> UnescapePercentEncoding(Int32& scan, int end, Byte[] buffer);
    private static Nullable`1<int> ReadHex(Int32& scan, int end, Byte[] buffer);
    private static bool SkipUnescape(int value1, int value2);
}
internal class Microsoft.AspNetCore.HttpSys.Internal.SafeLocalFreeChannelBinding : ChannelBinding {
    private static int LMEM_FIXED;
    private int size;
    public int Size { get; }
    public bool IsInvalid { get; }
    public virtual int get_Size();
    public static SafeLocalFreeChannelBinding LocalAlloc(int cb);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.AspNetCore.HttpSys.Internal.SafeLocalMemHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeLocalMemHandle(IntPtr existingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.AspNetCore.HttpSys.Internal.SafeNativeOverlapped : SafeHandle {
    internal static SafeNativeOverlapped Zero;
    private ThreadPoolBoundHandle _boundHandle;
    public bool IsInvalid { get; }
    internal SafeNativeOverlapped(ThreadPoolBoundHandle boundHandle, NativeOverlapped* handle);
    private static SafeNativeOverlapped();
    public virtual bool get_IsInvalid();
    public void ReinitializeNativeOverlapped();
    protected virtual bool ReleaseHandle();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.AspNetCore.HttpSys.Internal.SocketAddress : object {
    private static int NumberOfIPv6Labels;
    private static string IPv6NumberFormat;
    private static string IPv6StringSeparator;
    private static string IPv4StringFormat;
    internal static int IPv6AddressSize;
    internal static int IPv4AddressSize;
    private static int WriteableOffset;
    private int _size;
    private Byte[] _buffer;
    private int _hash;
    internal Byte[] Buffer { get; }
    internal AddressFamily Family { get; }
    internal int Size { get; }
    private byte Item { get; }
    public SocketAddress(AddressFamily family, int size);
    internal Byte[] get_Buffer();
    internal AddressFamily get_Family();
    internal int get_Size();
    private byte get_Item(int offset);
    internal int GetPort();
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    internal IPAddress GetIPAddress();
    private IPAddress GetIpv6Address();
    private IPAddress GetIPv4Address();
    public virtual string ToString();
    internal string GetIPAddressString();
    private string GetIPv4AddressString();
    private string GetIpv6AddressString();
    private static string GetIPv6AddressString(UInt16* numbers);
    private static KeyValuePair`2<int, int> FindCompressionRange(UInt16* numbers);
    private static bool ShouldHaveIpv4Embedded(UInt16* numbers);
}
internal enum Microsoft.AspNetCore.HttpSys.Internal.SslStatus : Enum {
    public byte value__;
    public static SslStatus Insecure;
    public static SslStatus NoClientCert;
    public static SslStatus ClientCert;
}
internal static class Microsoft.AspNetCore.HttpSys.Internal.UnsafeNclNativeMethods : object {
    private static string sspicli_LIB;
    private static string api_ms_win_core_processthreads_LIB;
    private static string api_ms_win_core_io_LIB;
    private static string api_ms_win_core_handle_LIB;
    private static string api_ms_win_core_libraryloader_LIB;
    private static string api_ms_win_core_heap_LIB;
    private static string api_ms_win_core_heap_obsolete_LIB;
    private static string api_ms_win_core_kernel32_legacy_LIB;
    private static string TOKENBINDING;
    internal static UInt32 CancelIoEx(SafeHandle handle, SafeNativeOverlapped overlapped);
    internal static bool SetFileCompletionNotificationModes(SafeHandle handle, FileCompletionNotificationModes modes);
    public static int TokenBindingVerifyMessage(Byte* tokenBindingMessage, UInt32 tokenBindingMessageSize, Char* keyType, Byte* tlsUnique, UInt32 tlsUniqueSize, HeapAllocHandle& resultList);
    internal static IntPtr GetProcessHeap();
    internal static bool HeapFree(IntPtr hHeap, UInt32 dwFlags, IntPtr lpMem);
}
internal class Microsoft.AspNetCore.Server.IISIntegration.AuthenticationHandler : object {
    private static string MSAspNetCoreWinAuthToken;
    private static Func`2<object, Task> ClearUserDelegate;
    private WindowsPrincipal _user;
    private HttpContext _context;
    [CompilerGeneratedAttribute]
private AuthenticationScheme <Scheme>k__BackingField;
    internal AuthenticationScheme Scheme { get; private set; }
    private static AuthenticationHandler();
    [CompilerGeneratedAttribute]
internal AuthenticationScheme get_Scheme();
    [CompilerGeneratedAttribute]
private void set_Scheme(AuthenticationScheme value);
    public sealed virtual Task`1<AuthenticateResult> AuthenticateAsync();
    private WindowsPrincipal GetUser();
    private static Task ClearUser(object arg);
    public sealed virtual Task ChallengeAsync(AuthenticationProperties properties);
    public sealed virtual Task ForbidAsync(AuthenticationProperties properties);
    public sealed virtual Task InitializeAsync(AuthenticationScheme scheme, HttpContext context);
}
internal class Microsoft.AspNetCore.Server.IISIntegration.ForwardedTlsConnectionFeature : object {
    private StringValues _header;
    private X509Certificate2 _certificate;
    private ILogger _logger;
    public X509Certificate2 ClientCertificate { get; public set; }
    public ForwardedTlsConnectionFeature(ILogger logger, StringValues header);
    public sealed virtual X509Certificate2 get_ClientCertificate();
    public sealed virtual void set_ClientCertificate(X509Certificate2 value);
    public sealed virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
public class Microsoft.AspNetCore.Server.IISIntegration.IISDefaults : object {
    public static string AuthenticationScheme;
    public static string Negotiate;
    public static string Ntlm;
    private static IISDefaults();
}
public class Microsoft.AspNetCore.Server.IISIntegration.IISHostingStartup : object {
    public sealed virtual void Configure(IWebHostBuilder builder);
}
public class Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware : object {
    private static string MSAspNetCoreClientCert;
    private static string MSAspNetCoreToken;
    private static string MSAspNetCoreEvent;
    private static string ANCMShutdownEventHeaderValue;
    private static PathString ANCMRequestPath;
    private RequestDelegate _next;
    private IISOptions _options;
    private ILogger _logger;
    private string _pairingToken;
    private IApplicationLifetime _applicationLifetime;
    private bool _isWebsocketsSupported;
    public IISMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1<IISOptions> options, string pairingToken, IAuthenticationSchemeProvider authentication, IApplicationLifetime applicationLifetime);
    public IISMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions`1<IISOptions> options, string pairingToken, bool isWebsocketsSupported, IAuthenticationSchemeProvider authentication, IApplicationLifetime applicationLifetime);
    private static IISMiddleware();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware/<Invoke>d__13")]
public Task Invoke(HttpContext httpContext);
    [CompilerGeneratedAttribute]
private void <Invoke>b__13_0();
}
internal class Microsoft.AspNetCore.Server.IISIntegration.IISSetupFilter : object {
    private string _pairingToken;
    private PathString _pathBase;
    private bool _isWebsocketsSupported;
    internal IISSetupFilter(string pairingToken, PathString pathBase, bool isWebsocketsSupported);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
internal static class Microsoft.AspNetCore.Server.IISIntegration.NativeMethods : object {
    private static string KERNEL32;
    public static bool CloseHandle(IntPtr handle);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Extensions.Internal.SecurityHelper : object {
    public static ClaimsPrincipal MergeUserPrincipal(ClaimsPrincipal existingPrincipal, ClaimsPrincipal additionalPrincipal);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Buffers.BufferReader : ValueType {
    private ReadOnlySpan`1<byte> _currentSpan;
    private int _index;
    private ReadOnlySequence`1<byte> _sequence;
    private SequencePosition _currentSequencePosition;
    private SequencePosition _nextSequencePosition;
    private int _consumedBytes;
    private bool _end;
    public bool End { get; }
    public int CurrentSegmentIndex { get; }
    public SequencePosition Position { get; }
    public ReadOnlySpan`1<byte> CurrentSegment { get; }
    public ReadOnlySpan`1<byte> UnreadSegment { get; }
    public int ConsumedBytes { get; }
    public BufferReader(ReadOnlySequence`1<byte> buffer);
    public bool get_End();
    public int get_CurrentSegmentIndex();
    public SequencePosition get_Position();
    public ReadOnlySpan`1<byte> get_CurrentSegment();
    public ReadOnlySpan`1<byte> get_UnreadSegment();
    public int get_ConsumedBytes();
    public int Peek();
    public int Read();
    private void MoveNext();
    public void Advance(int byteCount);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Buffers.BufferWriter`1 : ValueType {
    private T _output;
    private Span`1<byte> _span;
    private int _buffered;
    public Span`1<byte> Span { get; }
    public BufferWriter`1(T output);
    public Span`1<byte> get_Span();
    public void Commit();
    public void Advance(int count);
    public void Write(ReadOnlySpan`1<byte> source);
    public void Ensure(int count);
    private void EnsureMore(int count);
    private void WriteMultiBuffer(ReadOnlySpan`1<byte> source);
}
internal enum System.Buffers.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument size;
    public static ExceptionArgument offset;
    public static ExceptionArgument length;
    public static ExceptionArgument MemoryPoolBlock;
}
internal class System.Buffers.MemoryPoolBlock : object {
    private int _offset;
    private int _length;
    [CompilerGeneratedAttribute]
private SlabMemoryPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPoolSlab <Slab>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Memory>k__BackingField;
    public SlabMemoryPool Pool { get; }
    public MemoryPoolSlab Slab { get; }
    public Memory`1<byte> Memory { get; }
    internal MemoryPoolBlock(SlabMemoryPool pool, MemoryPoolSlab slab, int offset, int length);
    [CompilerGeneratedAttribute]
public SlabMemoryPool get_Pool();
    [CompilerGeneratedAttribute]
public MemoryPoolSlab get_Slab();
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void Lease();
}
internal class System.Buffers.MemoryPoolSlab : object {
    private GCHandle _gcHandle;
    private IntPtr _nativePointer;
    private Byte[] _data;
    private bool _isActive;
    private bool _disposedValue;
    public bool IsActive { get; }
    public IntPtr NativePointer { get; }
    public Byte[] Array { get; }
    public int Length { get; }
    public MemoryPoolSlab(Byte[] data);
    public bool get_IsActive();
    public IntPtr get_NativePointer();
    public Byte[] get_Array();
    public int get_Length();
    public static MemoryPoolSlab Create(int length);
    protected void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
internal class System.Buffers.SlabMemoryPool : MemoryPool`1<byte> {
    private static int _blockSize;
    private static int _blockCount;
    [CompilerGeneratedAttribute]
private int <MaxBufferSize>k__BackingField;
    private static int _slabLength;
    private ConcurrentQueue`1<MemoryPoolBlock> _blocks;
    private ConcurrentStack`1<MemoryPoolSlab> _slabs;
    private bool _disposedValue;
    private static int AnySize;
    public int MaxBufferSize { get; }
    private static SlabMemoryPool();
    [CompilerGeneratedAttribute]
public virtual int get_MaxBufferSize();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    private MemoryPoolBlock Lease();
    private MemoryPoolBlock AllocateSlab();
    internal void Return(MemoryPoolBlock block);
    protected virtual void Dispose(bool disposing);
}
internal class System.Buffers.ThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(int sourceLength, int offset);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(int sourceLength, int offset);
    public static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    public static void ThrowInvalidOperationException_ReferenceCountZero();
    public static void ThrowInvalidOperationException_ReturningPinnedBlock();
    public static void ThrowArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    public static void ThrowObjectDisposedException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    private static ObjectDisposedException GetObjectDisposedException(ExceptionArgument argument);
    private static string GetArgumentName(ExceptionArgument argument);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
