internal class Microsoft.AspNetCore.Certificates.Generation.CertificateManager : object {
    public static string AspNetHttpsOid;
    public static string AspNetHttpsOidFriendlyName;
    public static string AspNetIdentityOid;
    public static string AspNetIdentityOidFriendlyName;
    private static string ServerAuthenticationEnhancedKeyUsageOid;
    private static string ServerAuthenticationEnhancedKeyUsageOidFriendlyName;
    private static string LocalhostHttpsDnsName;
    private static string LocalhostHttpsDistinguishedName;
    private static string IdentityDistinguishedName;
    public static int RSAMinimumKeySizeInBits;
    private static TimeSpan MaxRegexTimeout;
    private static string CertificateSubjectRegex;
    private static string MacOSSystemKeyChain;
    private static string MacOSUserKeyChain;
    private static string MacOSFindCertificateCommandLine;
    private static string MacOSFindCertificateCommandLineArgumentsFormat;
    private static string MacOSFindCertificateOutputRegex;
    private static string MacOSRemoveCertificateTrustCommandLine;
    private static string MacOSRemoveCertificateTrustCommandLineArgumentsFormat;
    private static string MacOSDeleteCertificateCommandLine;
    private static string MacOSDeleteCertificateCommandLineArgumentsFormat;
    private static string MacOSTrustCertificateCommandLine;
    private static string MacOSTrustCertificateCommandLineArguments;
    private static int UserCancelledErrorCode;
    private static CertificateManager();
    public IList`1<X509Certificate2> ListCertificates(CertificatePurpose purpose, StoreName storeName, StoreLocation location, bool isValid, bool requireExportable);
    private void DisposeCertificates(IEnumerable`1<X509Certificate2> disposables);
    public X509Certificate2 CreateAspNetCoreHttpsDevelopmentCertificate(DateTimeOffset notBefore, DateTimeOffset notAfter, string subjectOverride);
    public X509Certificate2 CreateApplicationTokenSigningDevelopmentCertificate(DateTimeOffset notBefore, DateTimeOffset notAfter, string subjectOverride);
    public X509Certificate2 CreateSelfSignedCertificate(X500DistinguishedName subject, IEnumerable`1<X509Extension> extensions, DateTimeOffset notBefore, DateTimeOffset notAfter);
    public X509Certificate2 SaveCertificateInStore(X509Certificate2 certificate, StoreName name, StoreLocation location);
    public void ExportCertificate(X509Certificate2 certificate, string path, bool includePrivateKey, string password);
    public void TrustCertificate(X509Certificate2 certificate);
    private void TrustCertificateOnMac(X509Certificate2 publicCertificate);
    private static void TrustCertificateOnWindows(X509Certificate2 certificate, X509Certificate2 publicCertificate);
    public bool IsTrusted(X509Certificate2 certificate);
    public void CleanupHttpsCertificates(string subject);
    public void CleanupCertificates(CertificatePurpose purpose, string subject);
    public void RemoveAllCertificates(CertificatePurpose purpose, StoreName storeName, StoreLocation storeLocation, string subject);
    private void RemoveCertificate(X509Certificate2 certificate, RemoveLocations locations);
    private static void RemoveCertificateFromUserStore(X509Certificate2 certificate);
    private void RemoveCertificateFromTrustedRoots(X509Certificate2 certificate);
    private static void RemoveCertificateTrustRule(X509Certificate2 certificate);
    private static void RemoveCertificateFromKeyChain(string keyChain, X509Certificate2 certificate);
    public EnsureCertificateResult EnsureAspNetCoreHttpsDevelopmentCertificate(DateTimeOffset notBefore, DateTimeOffset notAfter, string path, bool trust, bool includePrivateKey, string password, string subject);
    public EnsureCertificateResult EnsureAspNetCoreApplicationTokensDevelopmentCertificate(DateTimeOffset notBefore, DateTimeOffset notAfter, string path, bool trust, bool includePrivateKey, string password, string subject);
    public EnsureCertificateResult EnsureValidCertificateExists(DateTimeOffset notBefore, DateTimeOffset notAfter, CertificatePurpose purpose, string path, bool trust, bool includePrivateKey, string password, string subjectOverride);
    [CompilerGeneratedAttribute]
internal static bool <ListCertificates>g__HasOid|24_0(X509Certificate2 certificate, string oid);
    [CompilerGeneratedAttribute]
internal static bool <ListCertificates>g__IsExportable|24_1(X509Certificate2 c);
    [CompilerGeneratedAttribute]
internal static RSA <CreateSelfSignedCertificate>g__CreateKeyMaterial|28_0(int minimumKeySize);
}
internal enum Microsoft.AspNetCore.Certificates.Generation.CertificatePurpose : Enum {
    public int value__;
    public static CertificatePurpose All;
    public static CertificatePurpose HTTPS;
    public static CertificatePurpose Signing;
}
internal enum Microsoft.AspNetCore.Certificates.Generation.EnsureCertificateResult : Enum {
    public int value__;
    public static EnsureCertificateResult Succeeded;
    public static EnsureCertificateResult ValidCertificatePresent;
    public static EnsureCertificateResult ErrorCreatingTheCertificate;
    public static EnsureCertificateResult ErrorSavingTheCertificateIntoTheCurrentUserPersonalStore;
    public static EnsureCertificateResult ErrorExportingTheCertificate;
    public static EnsureCertificateResult FailedToTrustTheCertificate;
    public static EnsureCertificateResult UserCancelledTrustStep;
}
internal class Microsoft.AspNetCore.Connections.Abstractions.UrlDecoder : object {
    private static Boolean[] IsAllowed;
    private static UrlDecoder();
    public static int Decode(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    public static int DecodeInPlace(Span`1<byte> buffer);
    private static bool DecodeCore(Int32& sourceIndex, Int32& destinationIndex, Span`1<byte> buffer);
    private static void Copy(int begin, int end, Int32& writer, Span`1<byte> buffer);
    private static int UnescapePercentEncoding(Int32& scan, Span`1<byte> buffer);
    private static int ReadHex(Int32& scan, Span`1<byte> buffer);
    private static bool SkipUnescape(int value1, int value2);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.KestrelServerOptionsSystemdExtensions : object {
    private static ulong SdListenFdsStart;
    private static string ListenPidEnvVar;
    [ExtensionAttribute]
public static KestrelServerOptions UseSystemd(KestrelServerOptions options);
    [ExtensionAttribute]
public static KestrelServerOptions UseSystemd(KestrelServerOptions options, Action`1<ListenOptions> configure);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.ListenOptionsConnectionLoggingExtensions : object {
    [ExtensionAttribute]
public static ListenOptions UseConnectionLogging(ListenOptions listenOptions);
    [ExtensionAttribute]
public static ListenOptions UseConnectionLogging(ListenOptions listenOptions, string loggerName);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.ListenOptionsHttpsExtensions : object {
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, string fileName);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, string fileName, string password);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, string fileName, string password, Action`1<HttpsConnectionAdapterOptions> configureOptions);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, StoreName storeName, string subject);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, StoreName storeName, string subject, bool allowInvalid);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, StoreName storeName, string subject, bool allowInvalid, StoreLocation location);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, StoreName storeName, string subject, bool allowInvalid, StoreLocation location, Action`1<HttpsConnectionAdapterOptions> configureOptions);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, X509Certificate2 serverCertificate);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, X509Certificate2 serverCertificate, Action`1<HttpsConnectionAdapterOptions> configureOptions);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, Action`1<HttpsConnectionAdapterOptions> configureOptions);
    [ExtensionAttribute]
internal static bool TryUseHttps(ListenOptions listenOptions);
    [ExtensionAttribute]
public static ListenOptions UseHttps(ListenOptions listenOptions, HttpsConnectionAdapterOptions httpsOptions);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.AdaptedPipeline : object {
    private static int MinAllocBufferSize;
    private IDuplexPipe _transport;
    private IDuplexPipe _application;
    [CompilerGeneratedAttribute]
private Pipe <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Pipe <Output>k__BackingField;
    public Pipe Input { get; }
    public Pipe Output { get; }
    private PipeReader System.IO.Pipelines.IDuplexPipe.Input { get; }
    private PipeWriter System.IO.Pipelines.IDuplexPipe.Output { get; }
    public AdaptedPipeline(IDuplexPipe transport, IDuplexPipe application, Pipe inputPipe, Pipe outputPipe);
    private static AdaptedPipeline();
    [CompilerGeneratedAttribute]
public Pipe get_Input();
    [CompilerGeneratedAttribute]
public Pipe get_Output();
    private sealed virtual override PipeReader System.IO.Pipelines.IDuplexPipe.get_Input();
    private sealed virtual override PipeWriter System.IO.Pipelines.IDuplexPipe.get_Output();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.AdaptedPipeline/<RunAsync>d__14")]
public Task RunAsync(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.AdaptedPipeline/<WriteOutputAsync>d__15")]
private Task WriteOutputAsync(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.AdaptedPipeline/<ReadInputAsync>d__16")]
private Task ReadInputAsync(Stream stream);
    public void Dispose();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.ConnectionAdapterContext : object {
    [CompilerGeneratedAttribute]
private ConnectionContext <ConnectionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ConnectionStream>k__BackingField;
    internal ConnectionContext ConnectionContext { get; }
    public IFeatureCollection Features { get; }
    public Stream ConnectionStream { get; }
    internal ConnectionAdapterContext(ConnectionContext connectionContext, Stream connectionStream);
    [CompilerGeneratedAttribute]
internal ConnectionContext get_ConnectionContext();
    public IFeatureCollection get_Features();
    [CompilerGeneratedAttribute]
public Stream get_ConnectionStream();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.IAdaptedConnection {
    public Stream ConnectionStream { get; }
    public abstract virtual Stream get_ConnectionStream();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.IConnectionAdapter {
    public bool IsHttps { get; }
    public abstract virtual bool get_IsHttps();
    public abstract virtual Task`1<IAdaptedConnection> OnConnectionAsync(ConnectionAdapterContext context);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingConnectionAdapter : object {
    private ILogger _logger;
    public bool IsHttps { get; }
    public LoggingConnectionAdapter(ILogger logger);
    public sealed virtual bool get_IsHttps();
    public sealed virtual Task`1<IAdaptedConnection> OnConnectionAsync(ConnectionAdapterContext context);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingStream : Stream {
    private Stream _inner;
    private ILogger _logger;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public LoggingStream(Stream inner, ILogger logger);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> destination);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingStream/<ReadAsync>d__18")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingStream/<ReadAsync>d__19")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> destination, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> source);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    private void Log(string method, ReadOnlySpan`1<byte> buffer);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    private Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    private Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, object state);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.RawStream : Stream {
    private PipeReader _input;
    private PipeWriter _output;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public RawStream(PipeReader input, PipeWriter output);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> destination, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.RawStream/<WriteAsync>d__20")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.RawStream/<WriteAsync>d__21")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.RawStream/<ReadAsyncInternal>d__24")]
private ValueTask`1<int> ReadAsyncInternal(Memory`1<byte> destination);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    private Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    private Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, object state);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.AnyIPListenOptions : ListenOptions {
    internal AnyIPListenOptions(int port);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.AnyIPListenOptions/<BindAsync>d__1")]
internal virtual Task BindAsync(AddressBindContext context);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(AddressBindContext context);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException : IOException {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private StringValues <AllowedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestRejectionReason <Reason>k__BackingField;
    internal int StatusCode { get; }
    internal StringValues AllowedHeader { get; }
    internal RequestRejectionReason Reason { get; }
    private BadHttpRequestException(string message, int statusCode, RequestRejectionReason reason);
    private BadHttpRequestException(string message, int statusCode, RequestRejectionReason reason, Nullable`1<HttpMethod> requiredMethod);
    [CompilerGeneratedAttribute]
internal int get_StatusCode();
    [CompilerGeneratedAttribute]
internal StringValues get_AllowedHeader();
    [CompilerGeneratedAttribute]
internal RequestRejectionReason get_Reason();
    [StackTraceHiddenAttribute]
internal static void Throw(RequestRejectionReason reason);
    [StackTraceHiddenAttribute]
public static void Throw(RequestRejectionReason reason, HttpMethod method);
    internal static BadHttpRequestException GetException(RequestRejectionReason reason);
    [StackTraceHiddenAttribute]
internal static void Throw(RequestRejectionReason reason, string detail);
    [StackTraceHiddenAttribute]
internal static void Throw(RequestRejectionReason reason, StringValues& detail);
    internal static BadHttpRequestException GetException(RequestRejectionReason reason, string detail);
}
internal static class Microsoft.AspNetCore.Server.Kestrel.Core.CoreStrings : object {
    private static ResourceManager _resourceManager;
    internal static string BadRequest { get; }
    internal static string BadRequest_BadChunkSizeData { get; }
    internal static string BadRequest_BadChunkSuffix { get; }
    internal static string BadRequest_ChunkedRequestIncomplete { get; }
    internal static string BadRequest_FinalTransferCodingNotChunked { get; }
    internal static string BadRequest_HeadersExceedMaxTotalSize { get; }
    internal static string BadRequest_InvalidCharactersInHeaderName { get; }
    internal static string BadRequest_InvalidContentLength_Detail { get; }
    internal static string BadRequest_InvalidHostHeader { get; }
    internal static string BadRequest_InvalidHostHeader_Detail { get; }
    internal static string BadRequest_InvalidRequestHeadersNoCRLF { get; }
    internal static string BadRequest_InvalidRequestHeader_Detail { get; }
    internal static string BadRequest_InvalidRequestLine { get; }
    internal static string BadRequest_InvalidRequestLine_Detail { get; }
    internal static string BadRequest_InvalidRequestTarget_Detail { get; }
    internal static string BadRequest_LengthRequired { get; }
    internal static string BadRequest_LengthRequiredHttp10 { get; }
    internal static string BadRequest_MalformedRequestInvalidHeaders { get; }
    internal static string BadRequest_MethodNotAllowed { get; }
    internal static string BadRequest_MissingHostHeader { get; }
    internal static string BadRequest_MultipleContentLengths { get; }
    internal static string BadRequest_MultipleHostHeaders { get; }
    internal static string BadRequest_RequestLineTooLong { get; }
    internal static string BadRequest_RequestHeadersTimeout { get; }
    internal static string BadRequest_TooManyHeaders { get; }
    internal static string BadRequest_UnexpectedEndOfRequestContent { get; }
    internal static string BadRequest_UnrecognizedHTTPVersion { get; }
    internal static string BadRequest_UpgradeRequestCannotHavePayload { get; }
    internal static string FallbackToIPv4Any { get; }
    internal static string ResponseStreamWasUpgraded { get; }
    internal static string BigEndianNotSupported { get; }
    internal static string MaxRequestBufferSmallerThanRequestHeaderBuffer { get; }
    internal static string MaxRequestBufferSmallerThanRequestLineBuffer { get; }
    internal static string ServerAlreadyStarted { get; }
    internal static string UnknownTransportMode { get; }
    internal static string InvalidAsciiOrControlChar { get; }
    internal static string InvalidContentLength_InvalidNumber { get; }
    internal static string NonNegativeNumberOrNullRequired { get; }
    internal static string NonNegativeNumberRequired { get; }
    internal static string PositiveNumberRequired { get; }
    internal static string PositiveNumberOrNullRequired { get; }
    internal static string UnixSocketPathMustBeAbsolute { get; }
    internal static string AddressBindingFailed { get; }
    internal static string BindingToDefaultAddress { get; }
    internal static string ConfigureHttpsFromMethodCall { get; }
    internal static string ConfigurePathBaseFromMethodCall { get; }
    internal static string DynamicPortOnLocalhostNotSupported { get; }
    internal static string EndpointAlreadyInUse { get; }
    internal static string InvalidUrl { get; }
    internal static string NetworkInterfaceBindingFailed { get; }
    internal static string OverridingWithKestrelOptions { get; }
    internal static string OverridingWithPreferHostingUrls { get; }
    internal static string UnsupportedAddressScheme { get; }
    internal static string HeadersAreReadOnly { get; }
    internal static string KeyAlreadyExists { get; }
    internal static string HeaderNotAllowedOnResponse { get; }
    internal static string ParameterReadOnlyAfterResponseStarted { get; }
    internal static string RequestProcessingAborted { get; }
    internal static string TooFewBytesWritten { get; }
    internal static string TooManyBytesWritten { get; }
    internal static string UnhandledApplicationException { get; }
    internal static string WritingToResponseBodyNotSupported { get; }
    internal static string ConnectionShutdownError { get; }
    internal static string RequestProcessingEndError { get; }
    internal static string CannotUpgradeNonUpgradableRequest { get; }
    internal static string UpgradedConnectionLimitReached { get; }
    internal static string UpgradeCannotBeCalledMultipleTimes { get; }
    internal static string BadRequest_RequestBodyTooLarge { get; }
    internal static string MaxRequestBodySizeCannotBeModifiedAfterRead { get; }
    internal static string MaxRequestBodySizeCannotBeModifiedForUpgradedRequests { get; }
    internal static string PositiveTimeSpanRequired { get; }
    internal static string NonNegativeTimeSpanRequired { get; }
    internal static string MinimumGracePeriodRequired { get; }
    internal static string SynchronousReadsDisallowed { get; }
    internal static string SynchronousWritesDisallowed { get; }
    internal static string PositiveNumberOrNullMinDataRateRequired { get; }
    internal static string ConcurrentTimeoutsNotSupported { get; }
    internal static string PositiveFiniteTimeSpanRequired { get; }
    internal static string EndPointRequiresAtLeastOneProtocol { get; }
    internal static string EndPointRequiresTlsForHttp1AndHttp2 { get; }
    internal static string EndPointHttp2NotNegotiated { get; }
    internal static string HPackErrorDynamicTableSizeUpdateTooLarge { get; }
    internal static string HPackErrorIndexOutOfRange { get; }
    internal static string HPackHuffmanErrorIncomplete { get; }
    internal static string HPackHuffmanErrorEOS { get; }
    internal static string HPackHuffmanErrorDestinationTooSmall { get; }
    internal static string HPackHuffmanError { get; }
    internal static string HPackStringLengthTooLarge { get; }
    internal static string HPackErrorIncompleteHeaderBlock { get; }
    internal static string Http2ErrorStreamIdEven { get; }
    internal static string Http2ErrorPushPromiseReceived { get; }
    internal static string Http2ErrorHeadersInterleaved { get; }
    internal static string Http2ErrorStreamIdZero { get; }
    internal static string Http2ErrorStreamIdNotZero { get; }
    internal static string Http2ErrorPaddingTooLong { get; }
    internal static string Http2ErrorStreamClosed { get; }
    internal static string Http2ErrorStreamHalfClosedRemote { get; }
    internal static string Http2ErrorStreamSelfDependency { get; }
    internal static string Http2ErrorUnexpectedFrameLength { get; }
    internal static string Http2ErrorSettingsLengthNotMultipleOfSix { get; }
    internal static string Http2ErrorSettingsAckLengthNotZero { get; }
    internal static string Http2ErrorSettingsParameterOutOfRange { get; }
    internal static string Http2ErrorWindowUpdateIncrementZero { get; }
    internal static string Http2ErrorContinuationWithNoHeaders { get; }
    internal static string Http2ErrorStreamIdle { get; }
    internal static string Http2ErrorTrailersContainPseudoHeaderField { get; }
    internal static string Http2ErrorHeaderNameUppercase { get; }
    internal static string Http2ErrorTrailerNameUppercase { get; }
    internal static string Http2ErrorHeadersWithTrailersNoEndStream { get; }
    internal static string Http2ErrorMissingMandatoryPseudoHeaderFields { get; }
    internal static string Http2ErrorPseudoHeaderFieldAfterRegularHeaders { get; }
    internal static string Http2ErrorUnknownPseudoHeaderField { get; }
    internal static string Http2ErrorResponsePseudoHeaderField { get; }
    internal static string Http2ErrorDuplicatePseudoHeaderField { get; }
    internal static string Http2ErrorConnectionSpecificHeaderField { get; }
    internal static string UnableToConfigureHttpsBindings { get; }
    internal static string AuthenticationFailed { get; }
    internal static string AuthenticationTimedOut { get; }
    internal static string InvalidServerCertificateEku { get; }
    internal static string PositiveTimeSpanRequired1 { get; }
    internal static string ServerCertificateRequired { get; }
    internal static string BindingToDefaultAddresses { get; }
    internal static string CertNotFoundInStore { get; }
    internal static string EndpointMissingUrl { get; }
    internal static string NoCertSpecifiedNoDevelopmentCertificateFound { get; }
    internal static string MultipleCertificateSources { get; }
    internal static string Http2NotSupported { get; }
    internal static string WritingToResponseBodyAfterResponseCompleted { get; }
    internal static string BadRequest_RequestBodyTimeout { get; }
    private static CoreStrings();
    internal static string get_BadRequest();
    internal static string FormatBadRequest();
    internal static string get_BadRequest_BadChunkSizeData();
    internal static string FormatBadRequest_BadChunkSizeData();
    internal static string get_BadRequest_BadChunkSuffix();
    internal static string FormatBadRequest_BadChunkSuffix();
    internal static string get_BadRequest_ChunkedRequestIncomplete();
    internal static string FormatBadRequest_ChunkedRequestIncomplete();
    internal static string get_BadRequest_FinalTransferCodingNotChunked();
    internal static string FormatBadRequest_FinalTransferCodingNotChunked(object detail);
    internal static string get_BadRequest_HeadersExceedMaxTotalSize();
    internal static string FormatBadRequest_HeadersExceedMaxTotalSize();
    internal static string get_BadRequest_InvalidCharactersInHeaderName();
    internal static string FormatBadRequest_InvalidCharactersInHeaderName();
    internal static string get_BadRequest_InvalidContentLength_Detail();
    internal static string FormatBadRequest_InvalidContentLength_Detail(object detail);
    internal static string get_BadRequest_InvalidHostHeader();
    internal static string FormatBadRequest_InvalidHostHeader();
    internal static string get_BadRequest_InvalidHostHeader_Detail();
    internal static string FormatBadRequest_InvalidHostHeader_Detail(object detail);
    internal static string get_BadRequest_InvalidRequestHeadersNoCRLF();
    internal static string FormatBadRequest_InvalidRequestHeadersNoCRLF();
    internal static string get_BadRequest_InvalidRequestHeader_Detail();
    internal static string FormatBadRequest_InvalidRequestHeader_Detail(object detail);
    internal static string get_BadRequest_InvalidRequestLine();
    internal static string FormatBadRequest_InvalidRequestLine();
    internal static string get_BadRequest_InvalidRequestLine_Detail();
    internal static string FormatBadRequest_InvalidRequestLine_Detail(object detail);
    internal static string get_BadRequest_InvalidRequestTarget_Detail();
    internal static string FormatBadRequest_InvalidRequestTarget_Detail(object detail);
    internal static string get_BadRequest_LengthRequired();
    internal static string FormatBadRequest_LengthRequired(object detail);
    internal static string get_BadRequest_LengthRequiredHttp10();
    internal static string FormatBadRequest_LengthRequiredHttp10(object detail);
    internal static string get_BadRequest_MalformedRequestInvalidHeaders();
    internal static string FormatBadRequest_MalformedRequestInvalidHeaders();
    internal static string get_BadRequest_MethodNotAllowed();
    internal static string FormatBadRequest_MethodNotAllowed();
    internal static string get_BadRequest_MissingHostHeader();
    internal static string FormatBadRequest_MissingHostHeader();
    internal static string get_BadRequest_MultipleContentLengths();
    internal static string FormatBadRequest_MultipleContentLengths();
    internal static string get_BadRequest_MultipleHostHeaders();
    internal static string FormatBadRequest_MultipleHostHeaders();
    internal static string get_BadRequest_RequestLineTooLong();
    internal static string FormatBadRequest_RequestLineTooLong();
    internal static string get_BadRequest_RequestHeadersTimeout();
    internal static string FormatBadRequest_RequestHeadersTimeout();
    internal static string get_BadRequest_TooManyHeaders();
    internal static string FormatBadRequest_TooManyHeaders();
    internal static string get_BadRequest_UnexpectedEndOfRequestContent();
    internal static string FormatBadRequest_UnexpectedEndOfRequestContent();
    internal static string get_BadRequest_UnrecognizedHTTPVersion();
    internal static string FormatBadRequest_UnrecognizedHTTPVersion(object detail);
    internal static string get_BadRequest_UpgradeRequestCannotHavePayload();
    internal static string FormatBadRequest_UpgradeRequestCannotHavePayload();
    internal static string get_FallbackToIPv4Any();
    internal static string FormatFallbackToIPv4Any(object port);
    internal static string get_ResponseStreamWasUpgraded();
    internal static string FormatResponseStreamWasUpgraded();
    internal static string get_BigEndianNotSupported();
    internal static string FormatBigEndianNotSupported();
    internal static string get_MaxRequestBufferSmallerThanRequestHeaderBuffer();
    internal static string FormatMaxRequestBufferSmallerThanRequestHeaderBuffer(object requestBufferSize, object requestHeaderSize);
    internal static string get_MaxRequestBufferSmallerThanRequestLineBuffer();
    internal static string FormatMaxRequestBufferSmallerThanRequestLineBuffer(object requestBufferSize, object requestLineSize);
    internal static string get_ServerAlreadyStarted();
    internal static string FormatServerAlreadyStarted();
    internal static string get_UnknownTransportMode();
    internal static string FormatUnknownTransportMode(object mode);
    internal static string get_InvalidAsciiOrControlChar();
    internal static string FormatInvalidAsciiOrControlChar(object character);
    internal static string get_InvalidContentLength_InvalidNumber();
    internal static string FormatInvalidContentLength_InvalidNumber(object value);
    internal static string get_NonNegativeNumberOrNullRequired();
    internal static string FormatNonNegativeNumberOrNullRequired();
    internal static string get_NonNegativeNumberRequired();
    internal static string FormatNonNegativeNumberRequired();
    internal static string get_PositiveNumberRequired();
    internal static string FormatPositiveNumberRequired();
    internal static string get_PositiveNumberOrNullRequired();
    internal static string FormatPositiveNumberOrNullRequired();
    internal static string get_UnixSocketPathMustBeAbsolute();
    internal static string FormatUnixSocketPathMustBeAbsolute();
    internal static string get_AddressBindingFailed();
    internal static string FormatAddressBindingFailed(object address);
    internal static string get_BindingToDefaultAddress();
    internal static string FormatBindingToDefaultAddress(object address);
    internal static string get_ConfigureHttpsFromMethodCall();
    internal static string FormatConfigureHttpsFromMethodCall(object methodName);
    internal static string get_ConfigurePathBaseFromMethodCall();
    internal static string FormatConfigurePathBaseFromMethodCall(object methodName);
    internal static string get_DynamicPortOnLocalhostNotSupported();
    internal static string FormatDynamicPortOnLocalhostNotSupported();
    internal static string get_EndpointAlreadyInUse();
    internal static string FormatEndpointAlreadyInUse(object endpoint);
    internal static string get_InvalidUrl();
    internal static string FormatInvalidUrl(object url);
    internal static string get_NetworkInterfaceBindingFailed();
    internal static string FormatNetworkInterfaceBindingFailed(object address, object interfaceName, object error);
    internal static string get_OverridingWithKestrelOptions();
    internal static string FormatOverridingWithKestrelOptions(object addresses, object methodName);
    internal static string get_OverridingWithPreferHostingUrls();
    internal static string FormatOverridingWithPreferHostingUrls(object settingName, object addresses);
    internal static string get_UnsupportedAddressScheme();
    internal static string FormatUnsupportedAddressScheme(object address);
    internal static string get_HeadersAreReadOnly();
    internal static string FormatHeadersAreReadOnly();
    internal static string get_KeyAlreadyExists();
    internal static string FormatKeyAlreadyExists();
    internal static string get_HeaderNotAllowedOnResponse();
    internal static string FormatHeaderNotAllowedOnResponse(object name, object statusCode);
    internal static string get_ParameterReadOnlyAfterResponseStarted();
    internal static string FormatParameterReadOnlyAfterResponseStarted(object name);
    internal static string get_RequestProcessingAborted();
    internal static string FormatRequestProcessingAborted();
    internal static string get_TooFewBytesWritten();
    internal static string FormatTooFewBytesWritten(object written, object expected);
    internal static string get_TooManyBytesWritten();
    internal static string FormatTooManyBytesWritten(object written, object expected);
    internal static string get_UnhandledApplicationException();
    internal static string FormatUnhandledApplicationException();
    internal static string get_WritingToResponseBodyNotSupported();
    internal static string FormatWritingToResponseBodyNotSupported(object statusCode);
    internal static string get_ConnectionShutdownError();
    internal static string FormatConnectionShutdownError();
    internal static string get_RequestProcessingEndError();
    internal static string FormatRequestProcessingEndError();
    internal static string get_CannotUpgradeNonUpgradableRequest();
    internal static string FormatCannotUpgradeNonUpgradableRequest();
    internal static string get_UpgradedConnectionLimitReached();
    internal static string FormatUpgradedConnectionLimitReached();
    internal static string get_UpgradeCannotBeCalledMultipleTimes();
    internal static string FormatUpgradeCannotBeCalledMultipleTimes();
    internal static string get_BadRequest_RequestBodyTooLarge();
    internal static string FormatBadRequest_RequestBodyTooLarge();
    internal static string get_MaxRequestBodySizeCannotBeModifiedAfterRead();
    internal static string FormatMaxRequestBodySizeCannotBeModifiedAfterRead();
    internal static string get_MaxRequestBodySizeCannotBeModifiedForUpgradedRequests();
    internal static string FormatMaxRequestBodySizeCannotBeModifiedForUpgradedRequests();
    internal static string get_PositiveTimeSpanRequired();
    internal static string FormatPositiveTimeSpanRequired();
    internal static string get_NonNegativeTimeSpanRequired();
    internal static string FormatNonNegativeTimeSpanRequired();
    internal static string get_MinimumGracePeriodRequired();
    internal static string FormatMinimumGracePeriodRequired(object heartbeatInterval);
    internal static string get_SynchronousReadsDisallowed();
    internal static string FormatSynchronousReadsDisallowed();
    internal static string get_SynchronousWritesDisallowed();
    internal static string FormatSynchronousWritesDisallowed();
    internal static string get_PositiveNumberOrNullMinDataRateRequired();
    internal static string FormatPositiveNumberOrNullMinDataRateRequired();
    internal static string get_ConcurrentTimeoutsNotSupported();
    internal static string FormatConcurrentTimeoutsNotSupported();
    internal static string get_PositiveFiniteTimeSpanRequired();
    internal static string FormatPositiveFiniteTimeSpanRequired();
    internal static string get_EndPointRequiresAtLeastOneProtocol();
    internal static string FormatEndPointRequiresAtLeastOneProtocol();
    internal static string get_EndPointRequiresTlsForHttp1AndHttp2();
    internal static string FormatEndPointRequiresTlsForHttp1AndHttp2();
    internal static string get_EndPointHttp2NotNegotiated();
    internal static string FormatEndPointHttp2NotNegotiated();
    internal static string get_HPackErrorDynamicTableSizeUpdateTooLarge();
    internal static string FormatHPackErrorDynamicTableSizeUpdateTooLarge(object size, object maxSize);
    internal static string get_HPackErrorIndexOutOfRange();
    internal static string FormatHPackErrorIndexOutOfRange(object index);
    internal static string get_HPackHuffmanErrorIncomplete();
    internal static string FormatHPackHuffmanErrorIncomplete();
    internal static string get_HPackHuffmanErrorEOS();
    internal static string FormatHPackHuffmanErrorEOS();
    internal static string get_HPackHuffmanErrorDestinationTooSmall();
    internal static string FormatHPackHuffmanErrorDestinationTooSmall();
    internal static string get_HPackHuffmanError();
    internal static string FormatHPackHuffmanError();
    internal static string get_HPackStringLengthTooLarge();
    internal static string FormatHPackStringLengthTooLarge(object length, object maxStringLength);
    internal static string get_HPackErrorIncompleteHeaderBlock();
    internal static string FormatHPackErrorIncompleteHeaderBlock();
    internal static string get_Http2ErrorStreamIdEven();
    internal static string FormatHttp2ErrorStreamIdEven(object frameType, object streamId);
    internal static string get_Http2ErrorPushPromiseReceived();
    internal static string FormatHttp2ErrorPushPromiseReceived();
    internal static string get_Http2ErrorHeadersInterleaved();
    internal static string FormatHttp2ErrorHeadersInterleaved(object frameType, object streamId, object headersStreamId);
    internal static string get_Http2ErrorStreamIdZero();
    internal static string FormatHttp2ErrorStreamIdZero(object frameType);
    internal static string get_Http2ErrorStreamIdNotZero();
    internal static string FormatHttp2ErrorStreamIdNotZero(object frameType);
    internal static string get_Http2ErrorPaddingTooLong();
    internal static string FormatHttp2ErrorPaddingTooLong(object frameType);
    internal static string get_Http2ErrorStreamClosed();
    internal static string FormatHttp2ErrorStreamClosed(object frameType, object streamId);
    internal static string get_Http2ErrorStreamHalfClosedRemote();
    internal static string FormatHttp2ErrorStreamHalfClosedRemote(object frameType, object streamId);
    internal static string get_Http2ErrorStreamSelfDependency();
    internal static string FormatHttp2ErrorStreamSelfDependency(object frameType, object streamId);
    internal static string get_Http2ErrorUnexpectedFrameLength();
    internal static string FormatHttp2ErrorUnexpectedFrameLength(object frameType, object expectedLength);
    internal static string get_Http2ErrorSettingsLengthNotMultipleOfSix();
    internal static string FormatHttp2ErrorSettingsLengthNotMultipleOfSix();
    internal static string get_Http2ErrorSettingsAckLengthNotZero();
    internal static string FormatHttp2ErrorSettingsAckLengthNotZero();
    internal static string get_Http2ErrorSettingsParameterOutOfRange();
    internal static string FormatHttp2ErrorSettingsParameterOutOfRange(object parameter);
    internal static string get_Http2ErrorWindowUpdateIncrementZero();
    internal static string FormatHttp2ErrorWindowUpdateIncrementZero();
    internal static string get_Http2ErrorContinuationWithNoHeaders();
    internal static string FormatHttp2ErrorContinuationWithNoHeaders();
    internal static string get_Http2ErrorStreamIdle();
    internal static string FormatHttp2ErrorStreamIdle(object frameType, object streamId);
    internal static string get_Http2ErrorTrailersContainPseudoHeaderField();
    internal static string FormatHttp2ErrorTrailersContainPseudoHeaderField();
    internal static string get_Http2ErrorHeaderNameUppercase();
    internal static string FormatHttp2ErrorHeaderNameUppercase();
    internal static string get_Http2ErrorTrailerNameUppercase();
    internal static string FormatHttp2ErrorTrailerNameUppercase();
    internal static string get_Http2ErrorHeadersWithTrailersNoEndStream();
    internal static string FormatHttp2ErrorHeadersWithTrailersNoEndStream();
    internal static string get_Http2ErrorMissingMandatoryPseudoHeaderFields();
    internal static string FormatHttp2ErrorMissingMandatoryPseudoHeaderFields();
    internal static string get_Http2ErrorPseudoHeaderFieldAfterRegularHeaders();
    internal static string FormatHttp2ErrorPseudoHeaderFieldAfterRegularHeaders();
    internal static string get_Http2ErrorUnknownPseudoHeaderField();
    internal static string FormatHttp2ErrorUnknownPseudoHeaderField();
    internal static string get_Http2ErrorResponsePseudoHeaderField();
    internal static string FormatHttp2ErrorResponsePseudoHeaderField();
    internal static string get_Http2ErrorDuplicatePseudoHeaderField();
    internal static string FormatHttp2ErrorDuplicatePseudoHeaderField();
    internal static string get_Http2ErrorConnectionSpecificHeaderField();
    internal static string FormatHttp2ErrorConnectionSpecificHeaderField();
    internal static string get_UnableToConfigureHttpsBindings();
    internal static string FormatUnableToConfigureHttpsBindings();
    internal static string get_AuthenticationFailed();
    internal static string FormatAuthenticationFailed();
    internal static string get_AuthenticationTimedOut();
    internal static string FormatAuthenticationTimedOut();
    internal static string get_InvalidServerCertificateEku();
    internal static string FormatInvalidServerCertificateEku(object thumbprint);
    internal static string get_PositiveTimeSpanRequired1();
    internal static string FormatPositiveTimeSpanRequired1();
    internal static string get_ServerCertificateRequired();
    internal static string FormatServerCertificateRequired();
    internal static string get_BindingToDefaultAddresses();
    internal static string FormatBindingToDefaultAddresses(object address0, object address1);
    internal static string get_CertNotFoundInStore();
    internal static string FormatCertNotFoundInStore(object subject, object storeLocation, object storeName, object allowInvalid);
    internal static string get_EndpointMissingUrl();
    internal static string FormatEndpointMissingUrl(object endpointName);
    internal static string get_NoCertSpecifiedNoDevelopmentCertificateFound();
    internal static string FormatNoCertSpecifiedNoDevelopmentCertificateFound();
    internal static string get_MultipleCertificateSources();
    internal static string FormatMultipleCertificateSources(object endpointName);
    internal static string get_Http2NotSupported();
    internal static string FormatHttp2NotSupported();
    internal static string get_WritingToResponseBodyAfterResponseCompleted();
    internal static string FormatWritingToResponseBodyAfterResponseCompleted();
    internal static string get_BadRequest_RequestBodyTimeout();
    internal static string FormatBadRequest_RequestBodyTimeout();
    private static string GetString(string name, String[] formatterNames);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Features.IConnectionTimeoutFeature {
    public abstract virtual void SetTimeout(TimeSpan timeSpan);
    public abstract virtual void ResetTimeout(TimeSpan timeSpan);
    public abstract virtual void CancelTimeout();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Features.IDecrementConcurrentConnectionCountFeature {
    public abstract virtual void ReleaseConnection();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttp2StreamIdFeature {
    public int StreamId { get; }
    public abstract virtual int get_StreamId();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttpMinRequestBodyDataRateFeature {
    public MinDataRate MinDataRate { get; public set; }
    public abstract virtual MinDataRate get_MinDataRate();
    public abstract virtual void set_MinDataRate(MinDataRate value);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttpMinResponseDataRateFeature {
    public MinDataRate MinDataRate { get; public set; }
    public abstract virtual MinDataRate get_MinDataRate();
    public abstract virtual void set_MinDataRate(MinDataRate value);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Features.ITlsApplicationProtocolFeature {
    public ReadOnlyMemory`1<byte> ApplicationProtocol { get; }
    public abstract virtual ReadOnlyMemory`1<byte> get_ApplicationProtocol();
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Server.Kestrel.Core.HttpProtocols : Enum {
    public int value__;
    public static HttpProtocols None;
    public static HttpProtocols Http1;
    public static HttpProtocols Http2;
    public static HttpProtocols Http1AndHttp2;
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBindContext : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ListenOptions> <ListenOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private KestrelServerOptions <ServerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ListenOptions, Task> <CreateBinding>k__BackingField;
    public ICollection`1<string> Addresses { get; public set; }
    public List`1<ListenOptions> ListenOptions { get; public set; }
    public KestrelServerOptions ServerOptions { get; public set; }
    public ILogger Logger { get; public set; }
    public Func`2<ListenOptions, Task> CreateBinding { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Addresses();
    [CompilerGeneratedAttribute]
public void set_Addresses(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<ListenOptions> get_ListenOptions();
    [CompilerGeneratedAttribute]
public void set_ListenOptions(List`1<ListenOptions> value);
    [CompilerGeneratedAttribute]
public KestrelServerOptions get_ServerOptions();
    [CompilerGeneratedAttribute]
public void set_ServerOptions(KestrelServerOptions value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public Func`2<ListenOptions, Task> get_CreateBinding();
    [CompilerGeneratedAttribute]
public void set_CreateBinding(Func`2<ListenOptions, Task> value);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder/<BindAsync>d__0")]
public static Task BindAsync(IServerAddressesFeature addresses, KestrelServerOptions serverOptions, ILogger logger, Func`2<ListenOptions, Task> createBinding);
    private static IStrategy CreateStrategy(ListenOptions[] listenOptions, String[] addresses, bool preferAddresses);
    protected internal static bool TryCreateIPEndPoint(ServerAddress address, IPEndPoint& endpoint);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder/<BindEndpointAsync>d__3")]
internal static Task BindEndpointAsync(ListenOptions endpoint, AddressBindContext context);
    internal static ListenOptions ParseAddress(string address, Boolean& https);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.CertificateConfig : object {
    [CompilerGeneratedAttribute]
private IConfigurationSection <ConfigSection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowInvalid>k__BackingField;
    public IConfigurationSection ConfigSection { get; }
    public bool IsFileCert { get; }
    public string Path { get; public set; }
    public string Password { get; public set; }
    public bool IsStoreCert { get; }
    public string Subject { get; public set; }
    public string Store { get; public set; }
    public string Location { get; public set; }
    public Nullable`1<bool> AllowInvalid { get; public set; }
    public CertificateConfig(IConfigurationSection configSection);
    [CompilerGeneratedAttribute]
public IConfigurationSection get_ConfigSection();
    public bool get_IsFileCert();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    public bool get_IsStoreCert();
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Store();
    [CompilerGeneratedAttribute]
public void set_Store(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowInvalid();
    [CompilerGeneratedAttribute]
public void set_AllowInvalid(Nullable`1<bool> value);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ConfigurationReader : object {
    private IConfiguration _configuration;
    private IDictionary`2<string, CertificateConfig> _certificates;
    private IList`1<EndpointConfig> _endpoints;
    public IDictionary`2<string, CertificateConfig> Certificates { get; }
    public IEnumerable`1<EndpointConfig> Endpoints { get; }
    public ConfigurationReader(IConfiguration configuration);
    public IDictionary`2<string, CertificateConfig> get_Certificates();
    public IEnumerable`1<EndpointConfig> get_Endpoints();
    private void ReadCertificates();
    private void ReadEndpoints();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ConnectionDispatcher : object {
    private ServiceContext _serviceContext;
    private ConnectionDelegate _connectionDelegate;
    private IKestrelTrace Log { get; }
    public ConnectionDispatcher(ServiceContext serviceContext, ConnectionDelegate connectionDelegate);
    private IKestrelTrace get_Log();
    public sealed virtual void OnConnection(TransportConnection connection);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ConnectionDispatcher/<Execute>d__6")]
private Task Execute(ConnectionContext connectionContext);
    private IDisposable BeginConnectionScope(ConnectionContext connectionContext);
    internal static PipeOptions GetInputPipeOptions(ServiceContext serviceContext, MemoryPool`1<byte> memoryPool, PipeScheduler writerScheduler);
    internal static PipeOptions GetOutputPipeOptions(ServiceContext serviceContext, MemoryPool`1<byte> memoryPool, PipeScheduler readerScheduler);
    private static long GetOutputResponseBufferSize(ServiceContext serviceContext);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ConnectionLimitMiddleware : object {
    private ConnectionDelegate _next;
    private ResourceCounter _concurrentConnectionCounter;
    private IKestrelTrace _trace;
    public ConnectionLimitMiddleware(ConnectionDelegate next, long connectionLimit, IKestrelTrace trace);
    internal ConnectionLimitMiddleware(ConnectionDelegate next, ResourceCounter concurrentConnectionCounter, IKestrelTrace trace);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ConnectionLimitMiddleware/<OnConnectionAsync>d__5")]
public Task OnConnectionAsync(ConnectionContext connection);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ConnectionLogScope : object {
    private string _connectionId;
    private string _cachedToString;
    public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public ConnectionLogScope(string connectionId);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ConnectionLogScope/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.EndpointConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationSection <ConfigSection>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateConfig <Certificate>k__BackingField;
    public string Name { get; public set; }
    public string Url { get; public set; }
    public IConfigurationSection ConfigSection { get; public set; }
    public CertificateConfig Certificate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public IConfigurationSection get_ConfigSection();
    [CompilerGeneratedAttribute]
public void set_ConfigSection(IConfigurationSection value);
    [CompilerGeneratedAttribute]
public CertificateConfig get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(CertificateConfig value);
}
internal static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.ChunkWriter : object {
    private static ArraySegment`1<byte> _endChunkBytes;
    private static Byte[] _hex;
    private static ChunkWriter();
    private static ArraySegment`1<byte> CreateAsciiByteArraySegment(string text);
    public static ArraySegment`1<byte> BeginChunkBytes(int dataCount);
    internal static int WriteBeginChunkBytes(CountingBufferWriter`1& start, int dataCount);
    internal static void WriteEndChunkBytes(CountingBufferWriter`1& start);
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.ConnectionOptions : Enum {
    public int value__;
    public static ConnectionOptions None;
    public static ConnectionOptions Close;
    public static ConnectionOptions KeepAlive;
    public static ConnectionOptions Upgrade;
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.DateHeaderValueManager : object {
    private static Byte[] _datePreambleBytes;
    private DateHeaderValues _dateValues;
    internal DateHeaderValueManager(ISystemClock systemClock);
    private static DateHeaderValueManager();
    public DateHeaderValues GetDateHeaderValues();
    public sealed virtual void OnHeartbeat(DateTimeOffset now);
    private void SetDateValues(DateTimeOffset value);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection : HttpProtocol {
    private static byte ByteAsterisk;
    private static byte ByteForwardSlash;
    private static string Asterisk;
    private Http1ConnectionContext _context;
    private IHttpParser`1<Http1ParsingHandler> _parser;
    protected long _keepAliveTicks;
    private long _requestHeadersTimeoutTicks;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _requestTimedOut;
    private UInt32 _requestCount;
    private HttpRequestTarget _requestTargetForm;
    private Uri _absoluteRequestTarget;
    private int _remainingRequestHeadersBytesAllowed;
    public PipeReader Input { get; }
    public ITimeoutControl TimeoutControl { get; }
    public bool RequestTimedOut { get; }
    public bool IsUpgradableRequest { get; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.IsUpgradableRequest { get; }
    public Http1Connection(Http1ConnectionContext context);
    public PipeReader get_Input();
    public ITimeoutControl get_TimeoutControl();
    public bool get_RequestTimedOut();
    public virtual bool get_IsUpgradableRequest();
    public sealed virtual void StopProcessingNextRequest();
    public void SendTimeoutResponse();
    public void ParseRequest(ReadOnlySequence`1<byte> buffer, SequencePosition& consumed, SequencePosition& examined);
    public bool TakeStartLine(ReadOnlySequence`1<byte> buffer, SequencePosition& consumed, SequencePosition& examined);
    public bool TakeMessageHeaders(ReadOnlySequence`1<byte> buffer, SequencePosition& consumed, SequencePosition& examined);
    public void OnStartLine(HttpMethod method, HttpVersion version, Span`1<byte> target, Span`1<byte> path, Span`1<byte> query, Span`1<byte> customMethod, bool pathEncoded);
    private void OnOriginFormTarget(HttpMethod method, HttpVersion version, Span`1<byte> target, Span`1<byte> path, Span`1<byte> query, Span`1<byte> customMethod, bool pathEncoded);
    private void OnAuthorityFormTarget(HttpMethod method, Span`1<byte> target);
    private void OnAsteriskFormTarget(HttpMethod method);
    private void OnAbsoluteFormTarget(Span`1<byte> target, Span`1<byte> query);
    private static string GetUtf8String(Span`1<byte> path);
    internal void EnsureHostHeaderExists();
    private void ValidateNonOrginHostHeader(string hostText);
    protected virtual void OnReset();
    protected virtual void OnRequestProcessingEnding();
    protected virtual string CreateRequestId();
    protected virtual MessageBody CreateMessageBody();
    protected virtual void BeginRequestProcessing();
    protected virtual bool BeginRead(ValueTask`1& awaitable);
    protected virtual bool TryParseRequest(ReadResult result, Boolean& endConnection);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.get_IsUpgradableRequest();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1Connection/<Microsoft-AspNetCore-Http-Features-IHttpUpgradeFeature-UpgradeAsync>d__43")]
private sealed virtual override Task`1<Stream> Microsoft.AspNetCore.Http.Features.IHttpUpgradeFeature.UpgradeAsync();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1ConnectionContext : object {
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceContext <ServiceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <ConnectionFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <RemoteEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ITimeoutControl <TimeoutControl>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Application>k__BackingField;
    public string ConnectionId { get; public set; }
    public ServiceContext ServiceContext { get; public set; }
    public IFeatureCollection ConnectionFeatures { get; public set; }
    public MemoryPool`1<byte> MemoryPool { get; public set; }
    public IPEndPoint RemoteEndPoint { get; public set; }
    public IPEndPoint LocalEndPoint { get; public set; }
    public ITimeoutControl TimeoutControl { get; public set; }
    public IDuplexPipe Transport { get; public set; }
    public IDuplexPipe Application { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceContext get_ServiceContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceContext(ServiceContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureCollection get_ConnectionFeatures();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionFeatures(IFeatureCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual MemoryPool`1<byte> get_MemoryPool();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MemoryPool(MemoryPool`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LocalEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public ITimeoutControl get_TimeoutControl();
    [CompilerGeneratedAttribute]
public void set_TimeoutControl(ITimeoutControl value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Transport();
    [CompilerGeneratedAttribute]
public void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
}
public abstract class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody : MessageBody {
    private Http1Connection _context;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _canceled;
    private Task _pumpTask;
    protected Http1MessageBody(Http1Connection context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody/<PumpAsync>d__4")]
private Task PumpAsync();
    public virtual Task StopAsync();
    protected virtual Task OnConsumeAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody/<OnConsumeAsyncAwaited>d__7")]
private Task OnConsumeAsyncAwaited();
    protected void Copy(ReadOnlySequence`1<byte> readableBuffer, PipeWriter writableBuffer);
    protected virtual void OnReadStarted();
    protected virtual bool Read(ReadOnlySequence`1<byte> readableBuffer, PipeWriter writableBuffer, SequencePosition& consumed, SequencePosition& examined);
    private void TryStartTimingReads();
    private void TryPauseTimingReads();
    private void TryResumeTimingReads();
    private void TryStopTimingReads();
    public static MessageBody For(HttpVersion httpVersion, HttpRequestHeaders headers, Http1Connection context);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1OutputProducer : object {
    private static ReadOnlyMemory`1<byte> _continueBytes;
    private static Byte[] _bytesHttpVersion11;
    private static Byte[] _bytesEndHeaders;
    private static ReadOnlyMemory`1<byte> _endChunkedResponseBytes;
    private string _connectionId;
    private ITimeoutControl _timeoutControl;
    private IKestrelTrace _log;
    private IConnectionLifetimeFeature _lifetimeFeature;
    private IBytesWrittenFeature _transportBytesWrittenFeature;
    private object _contextLock;
    private bool _completed;
    private bool _aborted;
    private long _unflushedBytes;
    private long _totalBytesCommitted;
    private PipeWriter _pipeWriter;
    private PipeReader _outputPipeReader;
    private TaskCompletionSource`1<object> _flushTcs;
    private object _flushLock;
    private Action _flushCompleted;
    private ValueTask`1<FlushResult> _flushTask;
    public Http1OutputProducer(PipeReader outputPipeReader, PipeWriter pipeWriter, string connectionId, IKestrelTrace log, ITimeoutControl timeoutControl, IConnectionLifetimeFeature lifetimeFeature, IBytesWrittenFeature transportBytesWrittenFeature);
    private static Http1OutputProducer();
    public sealed virtual Task WriteDataAsync(ReadOnlySpan`1<byte> buffer, CancellationToken cancellationToken);
    public sealed virtual Task WriteStreamSuffixAsync(CancellationToken cancellationToken);
    public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
    public void Write(Func`3<PipeWriter, T, long> callback, T state);
    public sealed virtual Task WriteAsync(Func`3<PipeWriter, T, long> callback, T state);
    public sealed virtual void WriteResponseHeaders(int statusCode, string reasonPhrase, HttpResponseHeaders responseHeaders);
    public sealed virtual void Dispose();
    public sealed virtual void Abort(Exception error);
    public sealed virtual Task Write100ContinueAsync(CancellationToken cancellationToken);
    private Task WriteAsync(ReadOnlySpan`1<byte> buffer, CancellationToken cancellationToken);
    private Task FlushAsync(PipeWriter writableBuffer, long bytesWritten, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1OutputProducer/<FlushAsyncAwaited>d__32")]
private Task FlushAsyncAwaited(ValueTask`1<FlushResult> awaitable, long count, CancellationToken cancellationToken);
    private void OnFlushCompleted();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1ParsingHandler : ValueType {
    public Http1Connection Connection;
    public Http1ParsingHandler(Http1Connection connection);
    public sealed virtual void OnHeader(Span`1<byte> name, Span`1<byte> value);
    public sealed virtual void OnStartLine(HttpMethod method, HttpVersion version, Span`1<byte> target, Span`1<byte> path, Span`1<byte> query, Span`1<byte> customMethod, bool pathEncoded);
}
public abstract class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders : object {
    protected Nullable`1<long> _contentLength;
    protected bool _isReadOnly;
    protected Dictionary`2<string, StringValues> MaybeUnknown;
    protected Dictionary`2<string, StringValues> Unknown { get; }
    public Nullable`1<long> ContentLength { get; public set; }
    private StringValues Microsoft.AspNetCore.Http.IHeaderDictionary.Item { get; private set; }
    private StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Item { get; private set; }
    private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.IsReadOnly { get; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Keys { get; }
    private ICollection`1<StringValues> System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Values { get; }
    protected Dictionary`2<string, StringValues> get_Unknown();
    public sealed virtual Nullable`1<long> get_ContentLength();
    public sealed virtual void set_ContentLength(Nullable`1<long> value);
    private sealed virtual override StringValues Microsoft.AspNetCore.Http.IHeaderDictionary.get_Item(string key);
    private sealed virtual override void Microsoft.AspNetCore.Http.IHeaderDictionary.set_Item(string key, StringValues value);
    private sealed virtual override StringValues System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Item(string key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.set_Item(string key, StringValues value);
    protected void ThrowHeadersReadOnlyException();
    protected void ThrowArgumentException();
    protected void ThrowKeyNotFoundException();
    protected void ThrowDuplicateKeyException();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.get_IsReadOnly();
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Keys();
    private sealed virtual override ICollection`1<StringValues> System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.get_Values();
    public void SetReadOnly();
    public void Reset();
    protected static StringValues AppendValue(StringValues& existing, string append);
    protected static int BitCount(long value);
    protected virtual int GetCountFast();
    protected virtual bool TryGetValueFast(string key, StringValues& value);
    protected virtual void SetValueFast(string key, StringValues& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual bool AddValueFast(string key, StringValues& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual bool RemoveFast(string key);
    protected virtual void ClearFast();
    protected virtual bool CopyToFast(KeyValuePair`2[] array, int arrayIndex);
    protected virtual IEnumerator`1<KeyValuePair`2<string, StringValues>> GetEnumeratorFast();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Add(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Add(string key, StringValues value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Contains(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.ContainsKey(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, StringValues>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Primitives.StringValues>>.Remove(KeyValuePair`2<string, StringValues> item);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.Remove(string key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,Microsoft.Extensions.Primitives.StringValues>.TryGetValue(string key, StringValues& value);
    public static void ValidateHeaderCharacters(StringValues& headerValues);
    public static void ValidateHeaderCharacters(string headerCharacters);
    public static ConnectionOptions ParseConnection(StringValues& connection);
    public static TransferCoding GetFinalTransferCoding(StringValues& transferEncoding);
    private static void ThrowInvalidContentLengthException(long value);
    private static void ThrowInvalidHeaderCharacter(char ch);
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpMethod : Enum {
    public byte value__;
    public static HttpMethod Get;
    public static HttpMethod Put;
    public static HttpMethod Delete;
    public static HttpMethod Post;
    public static HttpMethod Head;
    public static HttpMethod Trace;
    public static HttpMethod Patch;
    public static HttpMethod Connect;
    public static HttpMethod Options;
    public static HttpMethod Custom;
    public static HttpMethod None;
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpParser`1 : object {
    private bool _showErrorDetails;
    private static byte ByteCR;
    private static byte ByteLF;
    private static byte ByteColon;
    private static byte ByteSpace;
    private static byte ByteTab;
    private static byte ByteQuestionMark;
    private static byte BytePercentage;
    public HttpParser`1(bool showErrorDetails);
    public bool ParseRequestLine(TRequestHandler handler, ReadOnlySequence`1& buffer, SequencePosition& consumed, SequencePosition& examined);
    private void ParseRequestLine(TRequestHandler handler, Byte* data, int length);
    public bool ParseHeaders(TRequestHandler handler, ReadOnlySequence`1& buffer, SequencePosition& consumed, SequencePosition& examined, Int32& consumedBytes);
    private int FindEndOfName(Byte* headerLine, int length);
    private void TakeSingleHeader(Byte* headerLine, int length, TRequestHandler handler);
    private static bool TryGetNewLine(ReadOnlySequence`1& buffer, SequencePosition& found);
    private Span`1<byte> GetUnknownMethod(Byte* data, int length, Int32& methodLength);
    private static bool IsValidTokenChar(char c);
    [StackTraceHiddenAttribute]
private void RejectRequestLine(Byte* requestLine, int length);
    [StackTraceHiddenAttribute]
private void RejectRequestHeader(Byte* headerLine, int length);
    [StackTraceHiddenAttribute]
private void RejectUnknownVersion(Byte* version, int length);
    private BadHttpRequestException GetInvalidRequestException(RequestRejectionReason reason, Byte* detail, int length);
    private sealed virtual override bool Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpParser<TRequestHandler>.ParseRequestLine(TRequestHandler handler, ReadOnlySequence`1& modreq(System.Runtime.InteropServices.InAttribute) buffer, SequencePosition& consumed, SequencePosition& examined);
    private sealed virtual override bool Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpParser<TRequestHandler>.ParseHeaders(TRequestHandler handler, ReadOnlySequence`1& modreq(System.Runtime.InteropServices.InAttribute) buffer, SequencePosition& consumed, SequencePosition& examined, Int32& consumedBytes);
}
public abstract class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol : object {
    private static Byte[] _bytesConnectionClose;
    private static Byte[] _bytesConnectionKeepAlive;
    private static Byte[] _bytesTransferEncodingChunked;
    private static Byte[] _bytesServer;
    private static Func`3<PipeWriter, ReadOnlyMemory`1<byte>, long> _writeChunk;
    private object _onStartingSync;
    private object _onCompletedSync;
    protected Streams _streams;
    protected Stack`1<KeyValuePair`2<Func`2<object, Task>, object>> _onStarting;
    protected Stack`1<KeyValuePair`2<Func`2<object, Task>, object>> _onCompleted;
    protected Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _requestAborted;
    protected CancellationTokenSource _abortedCts;
    private Nullable`1<CancellationToken> _manuallySetRequestAbortToken;
    protected RequestProcessingStatus _requestProcessingStatus;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _keepAlive;
    protected bool _upgradeAvailable;
    private bool _canHaveBody;
    private bool _autoChunk;
    protected Exception _applicationException;
    private BadHttpRequestException _requestRejectedException;
    protected HttpVersion _httpVersion;
    private string _requestId;
    protected int _requestHeadersParsed;
    protected long _responseBytesWritten;
    private IHttpProtocolContext _context;
    protected string _methodText;
    private string _scheme;
    [CompilerGeneratedAttribute]
private IHttpResponseControl <HttpResponseControl>k__BackingField;
    [CompilerGeneratedAttribute]
private Pipe <RequestBodyPipe>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpOutputProducer <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private KestrelServerOptions <ServerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionIdFeature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStartedConsumingRequestBody>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaxRequestBodySize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSynchronousIO>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpgraded>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <RemoteIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemotePort>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <LocalIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <RequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <RequestBody>k__BackingField;
    private int _statusCode;
    private string _reasonPhrase;
    [CompilerGeneratedAttribute]
private IHeaderDictionary <ResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ResponseBody>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestHeaders <HttpRequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseHeaders <HttpResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private MinDataRate <MinRequestBodyDataRate>k__BackingField;
    [CompilerGeneratedAttribute]
private MinDataRate <MinResponseDataRate>k__BackingField;
    private int _featureRevision;
    private List`1<KeyValuePair`2<Type, object>> MaybeExtra;
    private static Type IHttpRequestFeatureType;
    private static Type IHttpResponseFeatureType;
    private static Type IHttpRequestIdentifierFeatureType;
    private static Type IServiceProvidersFeatureType;
    private static Type IHttpRequestLifetimeFeatureType;
    private static Type IHttpConnectionFeatureType;
    private static Type IHttpAuthenticationFeatureType;
    private static Type IQueryFeatureType;
    private static Type IFormFeatureType;
    private static Type IHttpUpgradeFeatureType;
    private static Type IHttp2StreamIdFeatureType;
    private static Type IResponseCookiesFeatureType;
    private static Type IItemsFeatureType;
    private static Type ITlsConnectionFeatureType;
    private static Type IHttpWebSocketFeatureType;
    private static Type ISessionFeatureType;
    private static Type IHttpMaxRequestBodySizeFeatureType;
    private static Type IHttpMinRequestBodyDataRateFeatureType;
    private static Type IHttpMinResponseDataRateFeatureType;
    private static Type IHttpBodyControlFeatureType;
    private static Type IHttpSendFileFeatureType;
    private object _currentIHttpRequestFeature;
    private object _currentIHttpResponseFeature;
    private object _currentIHttpRequestIdentifierFeature;
    private object _currentIServiceProvidersFeature;
    private object _currentIHttpRequestLifetimeFeature;
    private object _currentIHttpConnectionFeature;
    private object _currentIHttpAuthenticationFeature;
    private object _currentIQueryFeature;
    private object _currentIFormFeature;
    private object _currentIHttpUpgradeFeature;
    private object _currentIHttp2StreamIdFeature;
    private object _currentIResponseCookiesFeature;
    private object _currentIItemsFeature;
    private object _currentITlsConnectionFeature;
    private object _currentIHttpWebSocketFeature;
    private object _currentISessionFeature;
    private object _currentIHttpMaxRequestBodySizeFeature;
    private object _currentIHttpMinRequestBodyDataRateFeature;
    private object _currentIHttpMinResponseDataRateFeature;
    private object _currentIHttpBodyControlFeature;
    private object _currentIHttpSendFileFeature;
    public IHttpResponseControl HttpResponseControl { get; public set; }
    public Pipe RequestBodyPipe { get; }
    public ServiceContext ServiceContext { get; }
    private IPEndPoint LocalEndPoint { get; }
    private IPEndPoint RemoteEndPoint { get; }
    public IFeatureCollection ConnectionFeatures { get; }
    public IHttpOutputProducer Output { get; protected set; }
    protected IKestrelTrace Log { get; }
    private DateHeaderValueManager DateHeaderValueManager { get; }
    protected KestrelServerOptions ServerOptions { get; }
    protected string ConnectionId { get; }
    public string ConnectionIdFeature { get; public set; }
    public bool HasStartedConsumingRequestBody { get; public set; }
    public Nullable`1<long> MaxRequestBodySize { get; public set; }
    public bool AllowSynchronousIO { get; public set; }
    public string TraceIdentifier { get; public set; }
    public bool IsUpgradableRequest { get; }
    public bool IsUpgraded { get; public set; }
    public IPAddress RemoteIpAddress { get; public set; }
    public int RemotePort { get; public set; }
    public IPAddress LocalIpAddress { get; public set; }
    public int LocalPort { get; public set; }
    public string Scheme { get; public set; }
    public HttpMethod Method { get; public set; }
    public string PathBase { get; public set; }
    public string Path { get; public set; }
    public string QueryString { get; public set; }
    public string RawTarget { get; public set; }
    public string HttpVersion { get; public set; }
    public IHeaderDictionary RequestHeaders { get; public set; }
    public Stream RequestBody { get; public set; }
    public int StatusCode { get; public set; }
    public string ReasonPhrase { get; public set; }
    public IHeaderDictionary ResponseHeaders { get; public set; }
    public Stream ResponseBody { get; public set; }
    public CancellationToken RequestAborted { get; public set; }
    private CancellationTokenSource RequestAbortedSource { get; }
    public bool HasResponseStarted { get; }
    protected HttpRequestHeaders HttpRequestHeaders { get; }
    protected HttpResponseHeaders HttpResponseHeaders { get; }
    public MinDataRate MinRequestBodyDataRate { get; public set; }
    public MinDataRate MinResponseDataRate { get; public set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Protocol { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Scheme { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Method { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.PathBase { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Path { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.QueryString { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.RawTarget { get; private set; }
    private IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Headers { get; private set; }
    private Stream Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.Body { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.StatusCode { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.ReasonPhrase { get; private set; }
    private IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Headers { get; private set; }
    private Stream Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.Body { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.RequestAborted { get; private set; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.HasStarted { get; }
    private bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly { get; }
    private int Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision { get; }
    private IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemoteIpAddress { get; private set; }
    private IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalIpAddress { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemotePort { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalPort { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.ConnectionId { get; private set; }
    private string Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.TraceIdentifier { get; private set; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.AllowSynchronousIO { get; private set; }
    private bool Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.IsReadOnly { get; }
    private Nullable`1<long> Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.MaxRequestBodySize { get; private set; }
    private MinDataRate Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttpMinRequestBodyDataRateFeature.MinDataRate { get; private set; }
    private MinDataRate Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttpMinResponseDataRateFeature.MinDataRate { get; private set; }
    private object Microsoft.AspNetCore.Http.Features.IFeatureCollection.Item { get; private set; }
    public HttpProtocol(IHttpProtocolContext context);
    private static HttpProtocol();
    [CompilerGeneratedAttribute]
public IHttpResponseControl get_HttpResponseControl();
    [CompilerGeneratedAttribute]
public void set_HttpResponseControl(IHttpResponseControl value);
    [CompilerGeneratedAttribute]
public Pipe get_RequestBodyPipe();
    public ServiceContext get_ServiceContext();
    private IPEndPoint get_LocalEndPoint();
    private IPEndPoint get_RemoteEndPoint();
    public IFeatureCollection get_ConnectionFeatures();
    [CompilerGeneratedAttribute]
public IHttpOutputProducer get_Output();
    [CompilerGeneratedAttribute]
protected void set_Output(IHttpOutputProducer value);
    protected IKestrelTrace get_Log();
    private DateHeaderValueManager get_DateHeaderValueManager();
    [CompilerGeneratedAttribute]
protected KestrelServerOptions get_ServerOptions();
    protected string get_ConnectionId();
    [CompilerGeneratedAttribute]
public string get_ConnectionIdFeature();
    [CompilerGeneratedAttribute]
public void set_ConnectionIdFeature(string value);
    [CompilerGeneratedAttribute]
public bool get_HasStartedConsumingRequestBody();
    [CompilerGeneratedAttribute]
public void set_HasStartedConsumingRequestBody(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaxRequestBodySize();
    [CompilerGeneratedAttribute]
public void set_MaxRequestBodySize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
public void set_AllowSynchronousIO(bool value);
    public void set_TraceIdentifier(string value);
    public string get_TraceIdentifier();
    public abstract virtual bool get_IsUpgradableRequest();
    [CompilerGeneratedAttribute]
public bool get_IsUpgraded();
    [CompilerGeneratedAttribute]
public void set_IsUpgraded(bool value);
    [CompilerGeneratedAttribute]
public IPAddress get_RemoteIpAddress();
    [CompilerGeneratedAttribute]
public void set_RemoteIpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public int get_RemotePort();
    [CompilerGeneratedAttribute]
public void set_RemotePort(int value);
    [CompilerGeneratedAttribute]
public IPAddress get_LocalIpAddress();
    [CompilerGeneratedAttribute]
public void set_LocalIpAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public int get_LocalPort();
    [CompilerGeneratedAttribute]
public void set_LocalPort(int value);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
public void set_Scheme(string value);
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public string get_PathBase();
    [CompilerGeneratedAttribute]
public void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_QueryString();
    [CompilerGeneratedAttribute]
public void set_QueryString(string value);
    [CompilerGeneratedAttribute]
public string get_RawTarget();
    [CompilerGeneratedAttribute]
public void set_RawTarget(string value);
    public string get_HttpVersion();
    public void set_HttpVersion(string value);
    private void HttpVersionSetSlow(string value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_RequestHeaders();
    [CompilerGeneratedAttribute]
public void set_RequestHeaders(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public Stream get_RequestBody();
    [CompilerGeneratedAttribute]
public void set_RequestBody(Stream value);
    public int get_StatusCode();
    public void set_StatusCode(int value);
    public string get_ReasonPhrase();
    public void set_ReasonPhrase(string value);
    [CompilerGeneratedAttribute]
public IHeaderDictionary get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(IHeaderDictionary value);
    [CompilerGeneratedAttribute]
public Stream get_ResponseBody();
    [CompilerGeneratedAttribute]
public void set_ResponseBody(Stream value);
    public CancellationToken get_RequestAborted();
    public void set_RequestAborted(CancellationToken value);
    private CancellationTokenSource get_RequestAbortedSource();
    public bool get_HasResponseStarted();
    [CompilerGeneratedAttribute]
protected HttpRequestHeaders get_HttpRequestHeaders();
    [CompilerGeneratedAttribute]
protected HttpResponseHeaders get_HttpResponseHeaders();
    [CompilerGeneratedAttribute]
public MinDataRate get_MinRequestBodyDataRate();
    [CompilerGeneratedAttribute]
public void set_MinRequestBodyDataRate(MinDataRate value);
    [CompilerGeneratedAttribute]
public MinDataRate get_MinResponseDataRate();
    [CompilerGeneratedAttribute]
public void set_MinResponseDataRate(MinDataRate value);
    public void InitializeStreams(MessageBody messageBody);
    public void StopStreams();
    internal void ResetState();
    public void Reset();
    protected abstract virtual void OnReset();
    protected virtual void OnRequestProcessingEnding();
    protected virtual void OnRequestProcessingEnded();
    protected virtual void BeginRequestProcessing();
    protected virtual bool BeginRead(ValueTask`1& awaitable);
    protected abstract virtual string CreateRequestId();
    protected abstract virtual MessageBody CreateMessageBody();
    protected abstract virtual bool TryParseRequest(ReadResult result, Boolean& endConnection);
    private void CancelRequestAbortedToken();
    public sealed virtual void Abort(Exception error);
    public void OnHeader(Span`1<byte> name, Span`1<byte> value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<ProcessRequestsAsync>d__185`1")]
public sealed virtual Task ProcessRequestsAsync(IHttpApplication`1<TContext> application);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<ProcessRequests>d__186`1")]
private Task ProcessRequests(IHttpApplication`1<TContext> application);
    public void OnStarting(Func`2<object, Task> callback, object state);
    public void OnCompleted(Func`2<object, Task> callback, object state);
    protected Task FireOnStarting();
    private Task FireOnStartingMayAwait(Stack`1<KeyValuePair`2<Func`2<object, Task>, object>> onStarting);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<FireOnStartingAwaited>d__191")]
private Task FireOnStartingAwaited(Task currentTask, Stack`1<KeyValuePair`2<Func`2<object, Task>, object>> onStarting);
    protected Task FireOnCompleted();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<FireOnCompletedAwaited>d__193")]
private Task FireOnCompletedAwaited(Stack`1<KeyValuePair`2<Func`2<object, Task>, object>> onCompleted);
    public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<FlushAsyncAwaited>d__195")]
private Task FlushAsyncAwaited(Task initializeTask, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(ReadOnlyMemory`1<byte> data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<WriteAsyncAwaited>d__197")]
public Task WriteAsyncAwaited(Task initializeTask, ReadOnlyMemory`1<byte> data, CancellationToken cancellationToken);
    private void VerifyAndUpdateWrite(int count);
    [StackTraceHiddenAttribute]
private void ThrowTooManyBytesWritten(int count);
    private InvalidOperationException GetTooManyBytesWrittenException(int count);
    private void CheckLastWrite();
    protected void VerifyResponseContentLength();
    private Task WriteChunkedAsync(ReadOnlyMemory`1<byte> data, CancellationToken cancellationToken);
    private static long WriteChunk(PipeWriter writableBuffer, ReadOnlyMemory`1<byte> buffer);
    private static ArraySegment`1<byte> CreateAsciiByteArraySegment(string text);
    public sealed virtual void ProduceContinue();
    public Task InitializeResponseAsync(int firstWriteByteCount);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<InitializeResponseAwaited>d__208")]
public Task InitializeResponseAwaited(Task startingTask, int firstWriteByteCount);
    private void ProduceStart(bool appCompleted);
    protected Task TryProduceInvalidRequestResponse();
    protected Task ProduceEnd();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<ProduceEndAwaited>d__212")]
private Task ProduceEndAwaited();
    private Task WriteSuffix();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<WriteSuffixAwaited>d__214")]
private Task WriteSuffixAwaited();
    private void CreateResponseHeader(bool appCompleted);
    public bool StatusCanHaveBody(int statusCode);
    private void ThrowResponseAlreadyStartedException(string value);
    private void RejectNonBodyTransferEncodingResponse(bool appCompleted);
    private void SetErrorResponseException(BadHttpRequestException ex);
    private void SetErrorResponseHeaders(int statusCode);
    public void HandleNonBodyResponseWrite();
    [StackTraceHiddenAttribute]
private void ThrowWritingToResponseBodyNotSupported();
    [StackTraceHiddenAttribute]
private void ThrowResponseAbortedException();
    [StackTraceHiddenAttribute]
public void ThrowRequestTargetRejected(Span`1<byte> target);
    private BadHttpRequestException GetInvalidRequestTargetException(Span`1<byte> target);
    public void SetBadRequestState(RequestRejectionReason reason);
    public void SetBadRequestState(BadHttpRequestException ex);
    protected void ReportApplicationError(Exception ex);
    private Pipe CreateRequestBodyPipe();
    public void ResetFeatureCollection();
    private object ExtraFeatureGet(Type key);
    private void ExtraFeatureSet(Type key, object value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Protocol();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Protocol(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Scheme();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Scheme(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Method();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Method(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_PathBase();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_PathBase(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Path();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Path(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_QueryString();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_QueryString(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_RawTarget();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_RawTarget(string value);
    private sealed virtual override IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Headers();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Headers(IHeaderDictionary value);
    private sealed virtual override Stream Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.get_Body();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestFeature.set_Body(Stream value);
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_StatusCode();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_StatusCode(int value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_ReasonPhrase();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_ReasonPhrase(string value);
    private sealed virtual override IHeaderDictionary Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_Headers();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_Headers(IHeaderDictionary value);
    private sealed virtual override Stream Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_Body();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_Body(Stream value);
    private sealed virtual override CancellationToken Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.get_RequestAborted();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.set_RequestAborted(CancellationToken value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.get_HasStarted();
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision();
    private sealed virtual override IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemoteIpAddress();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemoteIpAddress(IPAddress value);
    private sealed virtual override IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalIpAddress();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalIpAddress(IPAddress value);
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemotePort();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemotePort(int value);
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalPort();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalPort(int value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_ConnectionId();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_ConnectionId(string value);
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.get_TraceIdentifier();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestIdentifierFeature.set_TraceIdentifier(string value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.get_AllowSynchronousIO();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpBodyControlFeature.set_AllowSynchronousIO(bool value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.get_IsReadOnly();
    private sealed virtual override Nullable`1<long> Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.get_MaxRequestBodySize();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpMaxRequestBodySizeFeature.set_MaxRequestBodySize(Nullable`1<long> value);
    private sealed virtual override MinDataRate Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttpMinRequestBodyDataRateFeature.get_MinDataRate();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttpMinRequestBodyDataRateFeature.set_MinDataRate(MinDataRate value);
    private sealed virtual override MinDataRate Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttpMinResponseDataRateFeature.get_MinDataRate();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttpMinResponseDataRateFeature.set_MinDataRate(MinDataRate value);
    protected void ResetIHttpUpgradeFeature();
    protected void ResetIHttp2StreamIdFeature();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnStarting(Func`2<object, Task> callback, object state);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.OnCompleted(Func`2<object, Task> callback, object state);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Type, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpRequestLifetimeFeature.Abort();
    private void FastReset();
    private sealed virtual override object Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(Type key);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(Type key, object value);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set(TFeature feature);
    private sealed virtual override TFeature Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol/<FastEnumerable>d__370")]
private IEnumerable`1<KeyValuePair`2<Type, object>> FastEnumerable();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestHeaders : HttpHeaders {
    private long _bits;
    private HeaderReferences _headers;
    public bool HasConnection { get; }
    public bool HasTransferEncoding { get; }
    public int HostCount { get; }
    public StringValues HeaderCacheControl { get; public set; }
    public StringValues HeaderConnection { get; public set; }
    public StringValues HeaderDate { get; public set; }
    public StringValues HeaderKeepAlive { get; public set; }
    public StringValues HeaderPragma { get; public set; }
    public StringValues HeaderTrailer { get; public set; }
    public StringValues HeaderTransferEncoding { get; public set; }
    public StringValues HeaderUpgrade { get; public set; }
    public StringValues HeaderVia { get; public set; }
    public StringValues HeaderWarning { get; public set; }
    public StringValues HeaderAllow { get; public set; }
    public StringValues HeaderContentType { get; public set; }
    public StringValues HeaderContentEncoding { get; public set; }
    public StringValues HeaderContentLanguage { get; public set; }
    public StringValues HeaderContentLocation { get; public set; }
    public StringValues HeaderContentMD5 { get; public set; }
    public StringValues HeaderContentRange { get; public set; }
    public StringValues HeaderExpires { get; public set; }
    public StringValues HeaderLastModified { get; public set; }
    public StringValues HeaderAccept { get; public set; }
    public StringValues HeaderAcceptCharset { get; public set; }
    public StringValues HeaderAcceptEncoding { get; public set; }
    public StringValues HeaderAcceptLanguage { get; public set; }
    public StringValues HeaderAuthorization { get; public set; }
    public StringValues HeaderCookie { get; public set; }
    public StringValues HeaderExpect { get; public set; }
    public StringValues HeaderFrom { get; public set; }
    public StringValues HeaderHost { get; public set; }
    public StringValues HeaderIfMatch { get; public set; }
    public StringValues HeaderIfModifiedSince { get; public set; }
    public StringValues HeaderIfNoneMatch { get; public set; }
    public StringValues HeaderIfRange { get; public set; }
    public StringValues HeaderIfUnmodifiedSince { get; public set; }
    public StringValues HeaderMaxForwards { get; public set; }
    public StringValues HeaderProxyAuthorization { get; public set; }
    public StringValues HeaderReferer { get; public set; }
    public StringValues HeaderRange { get; public set; }
    public StringValues HeaderTE { get; public set; }
    public StringValues HeaderTranslate { get; public set; }
    public StringValues HeaderUserAgent { get; public set; }
    public StringValues HeaderOrigin { get; public set; }
    public StringValues HeaderAccessControlRequestMethod { get; public set; }
    public StringValues HeaderAccessControlRequestHeaders { get; public set; }
    public StringValues HeaderContentLength { get; public set; }
    public bool get_HasConnection();
    public bool get_HasTransferEncoding();
    public int get_HostCount();
    public StringValues get_HeaderCacheControl();
    public void set_HeaderCacheControl(StringValues value);
    public StringValues get_HeaderConnection();
    public void set_HeaderConnection(StringValues value);
    public StringValues get_HeaderDate();
    public void set_HeaderDate(StringValues value);
    public StringValues get_HeaderKeepAlive();
    public void set_HeaderKeepAlive(StringValues value);
    public StringValues get_HeaderPragma();
    public void set_HeaderPragma(StringValues value);
    public StringValues get_HeaderTrailer();
    public void set_HeaderTrailer(StringValues value);
    public StringValues get_HeaderTransferEncoding();
    public void set_HeaderTransferEncoding(StringValues value);
    public StringValues get_HeaderUpgrade();
    public void set_HeaderUpgrade(StringValues value);
    public StringValues get_HeaderVia();
    public void set_HeaderVia(StringValues value);
    public StringValues get_HeaderWarning();
    public void set_HeaderWarning(StringValues value);
    public StringValues get_HeaderAllow();
    public void set_HeaderAllow(StringValues value);
    public StringValues get_HeaderContentType();
    public void set_HeaderContentType(StringValues value);
    public StringValues get_HeaderContentEncoding();
    public void set_HeaderContentEncoding(StringValues value);
    public StringValues get_HeaderContentLanguage();
    public void set_HeaderContentLanguage(StringValues value);
    public StringValues get_HeaderContentLocation();
    public void set_HeaderContentLocation(StringValues value);
    public StringValues get_HeaderContentMD5();
    public void set_HeaderContentMD5(StringValues value);
    public StringValues get_HeaderContentRange();
    public void set_HeaderContentRange(StringValues value);
    public StringValues get_HeaderExpires();
    public void set_HeaderExpires(StringValues value);
    public StringValues get_HeaderLastModified();
    public void set_HeaderLastModified(StringValues value);
    public StringValues get_HeaderAccept();
    public void set_HeaderAccept(StringValues value);
    public StringValues get_HeaderAcceptCharset();
    public void set_HeaderAcceptCharset(StringValues value);
    public StringValues get_HeaderAcceptEncoding();
    public void set_HeaderAcceptEncoding(StringValues value);
    public StringValues get_HeaderAcceptLanguage();
    public void set_HeaderAcceptLanguage(StringValues value);
    public StringValues get_HeaderAuthorization();
    public void set_HeaderAuthorization(StringValues value);
    public StringValues get_HeaderCookie();
    public void set_HeaderCookie(StringValues value);
    public StringValues get_HeaderExpect();
    public void set_HeaderExpect(StringValues value);
    public StringValues get_HeaderFrom();
    public void set_HeaderFrom(StringValues value);
    public StringValues get_HeaderHost();
    public void set_HeaderHost(StringValues value);
    public StringValues get_HeaderIfMatch();
    public void set_HeaderIfMatch(StringValues value);
    public StringValues get_HeaderIfModifiedSince();
    public void set_HeaderIfModifiedSince(StringValues value);
    public StringValues get_HeaderIfNoneMatch();
    public void set_HeaderIfNoneMatch(StringValues value);
    public StringValues get_HeaderIfRange();
    public void set_HeaderIfRange(StringValues value);
    public StringValues get_HeaderIfUnmodifiedSince();
    public void set_HeaderIfUnmodifiedSince(StringValues value);
    public StringValues get_HeaderMaxForwards();
    public void set_HeaderMaxForwards(StringValues value);
    public StringValues get_HeaderProxyAuthorization();
    public void set_HeaderProxyAuthorization(StringValues value);
    public StringValues get_HeaderReferer();
    public void set_HeaderReferer(StringValues value);
    public StringValues get_HeaderRange();
    public void set_HeaderRange(StringValues value);
    public StringValues get_HeaderTE();
    public void set_HeaderTE(StringValues value);
    public StringValues get_HeaderTranslate();
    public void set_HeaderTranslate(StringValues value);
    public StringValues get_HeaderUserAgent();
    public void set_HeaderUserAgent(StringValues value);
    public StringValues get_HeaderOrigin();
    public void set_HeaderOrigin(StringValues value);
    public StringValues get_HeaderAccessControlRequestMethod();
    public void set_HeaderAccessControlRequestMethod(StringValues value);
    public StringValues get_HeaderAccessControlRequestHeaders();
    public void set_HeaderAccessControlRequestHeaders(StringValues value);
    public StringValues get_HeaderContentLength();
    public void set_HeaderContentLength(StringValues value);
    protected virtual int GetCountFast();
    protected virtual bool TryGetValueFast(string key, StringValues& value);
    protected virtual void SetValueFast(string key, StringValues& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual bool AddValueFast(string key, StringValues& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual bool RemoveFast(string key);
    protected virtual void ClearFast();
    protected virtual bool CopyToFast(KeyValuePair`2[] array, int arrayIndex);
    public void Append(Byte* pKeyBytes, int keyLength, string value);
    private void AppendNonPrimaryHeaders(Byte* pKeyBytes, int keyLength, string value);
    private static long ParseContentLength(string value);
    private void SetValueUnknown(string key, StringValues& value);
    public void Append(Span`1<byte> name, string value);
    private void AppendUnknownHeaders(Byte* pKeyBytes, int keyLength, string value);
    public Enumerator GetEnumerator();
    protected virtual IEnumerator`1<KeyValuePair`2<string, StringValues>> GetEnumeratorFast();
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream : ReadOnlyStream {
    private IHttpBodyControlFeature _bodyControl;
    private MessageBody _body;
    private HttpStreamState _state;
    private Exception _error;
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public HttpRequestStream(IHttpBodyControlFeature bodyControl);
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    private Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, object state);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream/<ReadAsyncInternal>d__22")]
private ValueTask`1<int> ReadAsyncInternal(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream/<CopyToAsyncInternal>d__24")]
private Task CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken);
    public void StartAcceptingReads(MessageBody body);
    public void StopAcceptingReads();
    public void Abort(Exception error);
    private void ValidateState(CancellationToken cancellationToken);
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestTarget : Enum {
    public int value__;
    public static HttpRequestTarget Unknown;
    public static HttpRequestTarget OriginForm;
    public static HttpRequestTarget AbsoluteForm;
    public static HttpRequestTarget AuthorityForm;
    public static HttpRequestTarget AsteriskForm;
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders : HttpHeaders {
    private static Byte[] _headerBytes;
    private long _bits;
    private HeaderReferences _headers;
    private static Byte[] _CrLf;
    private static Byte[] _colonSpace;
    public bool HasConnection { get; }
    public bool HasDate { get; }
    public bool HasTransferEncoding { get; }
    public bool HasServer { get; }
    public StringValues HeaderCacheControl { get; public set; }
    public StringValues HeaderConnection { get; public set; }
    public StringValues HeaderDate { get; public set; }
    public StringValues HeaderKeepAlive { get; public set; }
    public StringValues HeaderPragma { get; public set; }
    public StringValues HeaderTrailer { get; public set; }
    public StringValues HeaderTransferEncoding { get; public set; }
    public StringValues HeaderUpgrade { get; public set; }
    public StringValues HeaderVia { get; public set; }
    public StringValues HeaderWarning { get; public set; }
    public StringValues HeaderAllow { get; public set; }
    public StringValues HeaderContentType { get; public set; }
    public StringValues HeaderContentEncoding { get; public set; }
    public StringValues HeaderContentLanguage { get; public set; }
    public StringValues HeaderContentLocation { get; public set; }
    public StringValues HeaderContentMD5 { get; public set; }
    public StringValues HeaderContentRange { get; public set; }
    public StringValues HeaderExpires { get; public set; }
    public StringValues HeaderLastModified { get; public set; }
    public StringValues HeaderAcceptRanges { get; public set; }
    public StringValues HeaderAge { get; public set; }
    public StringValues HeaderETag { get; public set; }
    public StringValues HeaderLocation { get; public set; }
    public StringValues HeaderProxyAuthenticate { get; public set; }
    public StringValues HeaderRetryAfter { get; public set; }
    public StringValues HeaderServer { get; public set; }
    public StringValues HeaderSetCookie { get; public set; }
    public StringValues HeaderVary { get; public set; }
    public StringValues HeaderWWWAuthenticate { get; public set; }
    public StringValues HeaderAccessControlAllowCredentials { get; public set; }
    public StringValues HeaderAccessControlAllowHeaders { get; public set; }
    public StringValues HeaderAccessControlAllowMethods { get; public set; }
    public StringValues HeaderAccessControlAllowOrigin { get; public set; }
    public StringValues HeaderAccessControlExposeHeaders { get; public set; }
    public StringValues HeaderAccessControlMaxAge { get; public set; }
    public StringValues HeaderContentLength { get; public set; }
    private static HttpResponseHeaders();
    public bool get_HasConnection();
    public bool get_HasDate();
    public bool get_HasTransferEncoding();
    public bool get_HasServer();
    public StringValues get_HeaderCacheControl();
    public void set_HeaderCacheControl(StringValues value);
    public StringValues get_HeaderConnection();
    public void set_HeaderConnection(StringValues value);
    public StringValues get_HeaderDate();
    public void set_HeaderDate(StringValues value);
    public StringValues get_HeaderKeepAlive();
    public void set_HeaderKeepAlive(StringValues value);
    public StringValues get_HeaderPragma();
    public void set_HeaderPragma(StringValues value);
    public StringValues get_HeaderTrailer();
    public void set_HeaderTrailer(StringValues value);
    public StringValues get_HeaderTransferEncoding();
    public void set_HeaderTransferEncoding(StringValues value);
    public StringValues get_HeaderUpgrade();
    public void set_HeaderUpgrade(StringValues value);
    public StringValues get_HeaderVia();
    public void set_HeaderVia(StringValues value);
    public StringValues get_HeaderWarning();
    public void set_HeaderWarning(StringValues value);
    public StringValues get_HeaderAllow();
    public void set_HeaderAllow(StringValues value);
    public StringValues get_HeaderContentType();
    public void set_HeaderContentType(StringValues value);
    public StringValues get_HeaderContentEncoding();
    public void set_HeaderContentEncoding(StringValues value);
    public StringValues get_HeaderContentLanguage();
    public void set_HeaderContentLanguage(StringValues value);
    public StringValues get_HeaderContentLocation();
    public void set_HeaderContentLocation(StringValues value);
    public StringValues get_HeaderContentMD5();
    public void set_HeaderContentMD5(StringValues value);
    public StringValues get_HeaderContentRange();
    public void set_HeaderContentRange(StringValues value);
    public StringValues get_HeaderExpires();
    public void set_HeaderExpires(StringValues value);
    public StringValues get_HeaderLastModified();
    public void set_HeaderLastModified(StringValues value);
    public StringValues get_HeaderAcceptRanges();
    public void set_HeaderAcceptRanges(StringValues value);
    public StringValues get_HeaderAge();
    public void set_HeaderAge(StringValues value);
    public StringValues get_HeaderETag();
    public void set_HeaderETag(StringValues value);
    public StringValues get_HeaderLocation();
    public void set_HeaderLocation(StringValues value);
    public StringValues get_HeaderProxyAuthenticate();
    public void set_HeaderProxyAuthenticate(StringValues value);
    public StringValues get_HeaderRetryAfter();
    public void set_HeaderRetryAfter(StringValues value);
    public StringValues get_HeaderServer();
    public void set_HeaderServer(StringValues value);
    public StringValues get_HeaderSetCookie();
    public void set_HeaderSetCookie(StringValues value);
    public StringValues get_HeaderVary();
    public void set_HeaderVary(StringValues value);
    public StringValues get_HeaderWWWAuthenticate();
    public void set_HeaderWWWAuthenticate(StringValues value);
    public StringValues get_HeaderAccessControlAllowCredentials();
    public void set_HeaderAccessControlAllowCredentials(StringValues value);
    public StringValues get_HeaderAccessControlAllowHeaders();
    public void set_HeaderAccessControlAllowHeaders(StringValues value);
    public StringValues get_HeaderAccessControlAllowMethods();
    public void set_HeaderAccessControlAllowMethods(StringValues value);
    public StringValues get_HeaderAccessControlAllowOrigin();
    public void set_HeaderAccessControlAllowOrigin(StringValues value);
    public StringValues get_HeaderAccessControlExposeHeaders();
    public void set_HeaderAccessControlExposeHeaders(StringValues value);
    public StringValues get_HeaderAccessControlMaxAge();
    public void set_HeaderAccessControlMaxAge(StringValues value);
    public StringValues get_HeaderContentLength();
    public void set_HeaderContentLength(StringValues value);
    public void SetRawConnection(StringValues& value, Byte[] raw);
    public void SetRawDate(StringValues& value, Byte[] raw);
    public void SetRawTransferEncoding(StringValues& value, Byte[] raw);
    public void SetRawServer(StringValues& value, Byte[] raw);
    protected virtual int GetCountFast();
    protected virtual bool TryGetValueFast(string key, StringValues& value);
    protected virtual void SetValueFast(string key, StringValues& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual bool AddValueFast(string key, StringValues& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual bool RemoveFast(string key);
    protected virtual void ClearFast();
    protected virtual bool CopyToFast(KeyValuePair`2[] array, int arrayIndex);
    internal void CopyToFast(CountingBufferWriter`1& output);
    public Enumerator GetEnumerator();
    protected virtual IEnumerator`1<KeyValuePair`2<string, StringValues>> GetEnumeratorFast();
    internal void CopyTo(CountingBufferWriter`1& buffer);
    private static long ParseContentLength(string value);
    private void SetValueUnknown(string key, StringValues& value);
    private static void ThrowInvalidContentLengthException(string value);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseStream : WriteOnlyStream {
    private IHttpBodyControlFeature _bodyControl;
    private IHttpResponseControl _httpResponseControl;
    private HttpStreamState _state;
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public HttpResponseStream(IHttpBodyControlFeature bodyControl, IHttpResponseControl httpResponseControl);
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    private Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, object state);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    public void StartAcceptingWrites();
    public void StopAcceptingWrites();
    public void Abort();
    private void ValidateState(CancellationToken cancellationToken);
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpScheme : Enum {
    public int value__;
    public static HttpScheme Unknown;
    public static HttpScheme Http;
    public static HttpScheme Https;
}
internal enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpStreamState : Enum {
    public int value__;
    public static HttpStreamState Open;
    public static HttpStreamState Closed;
    public static HttpStreamState Aborted;
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpUpgradeStream : Stream {
    private Stream _requestStream;
    private Stream _responseStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public HttpUpgradeStream(Stream requestStream, Stream responseStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Close();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpVersion : Enum {
    public int value__;
    public static HttpVersion Unknown;
    public static HttpVersion Http10;
    public static HttpVersion Http11;
    public static HttpVersion Http2;
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpHeadersHandler {
    public abstract virtual void OnHeader(Span`1<byte> name, Span`1<byte> value);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpOutputProducer {
    public abstract virtual void Abort(Exception error);
    public abstract virtual Task WriteAsync(Func`3<PipeWriter, T, long> callback, T state);
    public abstract virtual Task FlushAsync(CancellationToken cancellationToken);
    public abstract virtual Task Write100ContinueAsync(CancellationToken cancellationToken);
    public abstract virtual void WriteResponseHeaders(int statusCode, string ReasonPhrase, HttpResponseHeaders responseHeaders);
    public abstract virtual Task WriteDataAsync(ReadOnlySpan`1<byte> data, CancellationToken cancellationToken);
    public abstract virtual Task WriteStreamSuffixAsync(CancellationToken cancellationToken);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpParser`1 {
    public abstract virtual bool ParseRequestLine(TRequestHandler handler, ReadOnlySequence`1& modreq(System.Runtime.InteropServices.InAttribute) buffer, SequencePosition& consumed, SequencePosition& examined);
    public abstract virtual bool ParseHeaders(TRequestHandler handler, ReadOnlySequence`1& modreq(System.Runtime.InteropServices.InAttribute) buffer, SequencePosition& consumed, SequencePosition& examined, Int32& consumedBytes);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpProtocolContext {
    public string ConnectionId { get; public set; }
    public ServiceContext ServiceContext { get; public set; }
    public IFeatureCollection ConnectionFeatures { get; public set; }
    public MemoryPool`1<byte> MemoryPool { get; public set; }
    public IPEndPoint RemoteEndPoint { get; public set; }
    public IPEndPoint LocalEndPoint { get; public set; }
    public abstract virtual string get_ConnectionId();
    public abstract virtual void set_ConnectionId(string value);
    public abstract virtual ServiceContext get_ServiceContext();
    public abstract virtual void set_ServiceContext(ServiceContext value);
    public abstract virtual IFeatureCollection get_ConnectionFeatures();
    public abstract virtual void set_ConnectionFeatures(IFeatureCollection value);
    public abstract virtual MemoryPool`1<byte> get_MemoryPool();
    public abstract virtual void set_MemoryPool(MemoryPool`1<byte> value);
    public abstract virtual IPEndPoint get_RemoteEndPoint();
    public abstract virtual void set_RemoteEndPoint(IPEndPoint value);
    public abstract virtual IPEndPoint get_LocalEndPoint();
    public abstract virtual void set_LocalEndPoint(IPEndPoint value);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpRequestLineHandler {
    public abstract virtual void OnStartLine(HttpMethod method, HttpVersion version, Span`1<byte> target, Span`1<byte> path, Span`1<byte> query, Span`1<byte> customMethod, bool pathEncoded);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.IHttpResponseControl {
    public abstract virtual void ProduceContinue();
    public abstract virtual Task WriteAsync(ReadOnlyMemory`1<byte> data, CancellationToken cancellationToken);
    public abstract virtual Task FlushAsync(CancellationToken cancellationToken);
}
public abstract class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody : object {
    private static MessageBody _zeroContentLengthClose;
    private static MessageBody _zeroContentLengthKeepAlive;
    private HttpProtocol _context;
    private bool _send100Continue;
    [CompilerGeneratedAttribute]
private bool <RequestKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestUpgrade>k__BackingField;
    public static MessageBody ZeroContentLengthClose { get; }
    public static MessageBody ZeroContentLengthKeepAlive { get; }
    public bool RequestKeepAlive { get; protected set; }
    public bool RequestUpgrade { get; protected set; }
    public bool IsEmpty { get; }
    protected IKestrelTrace Log { get; }
    protected MessageBody(HttpProtocol context);
    private static MessageBody();
    public static MessageBody get_ZeroContentLengthClose();
    public static MessageBody get_ZeroContentLengthKeepAlive();
    [CompilerGeneratedAttribute]
public bool get_RequestKeepAlive();
    [CompilerGeneratedAttribute]
protected void set_RequestKeepAlive(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequestUpgrade();
    [CompilerGeneratedAttribute]
protected void set_RequestUpgrade(bool value);
    public virtual bool get_IsEmpty();
    protected IKestrelTrace get_Log();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody/<ReadAsync>d__21")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody/<CopyToAsync>d__22")]
public virtual Task CopyToAsync(Stream destination, CancellationToken cancellationToken);
    public virtual Task ConsumeAsync();
    protected abstract virtual Task OnConsumeAsync();
    public abstract virtual Task StopAsync();
    protected void TryProduceContinue();
    private void TryInit();
    protected virtual void OnReadStarting();
    protected virtual void OnReadStarted();
}
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.PathNormalizer : object {
    private static byte ByteSlash;
    private static byte ByteDot;
    public static int RemoveDotSegments(Span`1<byte> input);
    public static int RemoveDotSegments(Byte* start, Byte* end);
    public static bool ContainsDotSegments(Byte* start, Byte* end);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.PipelineExtensions : object {
    private static int _maxULongByteLength;
    [ThreadStaticAttribute]
private static Byte[] _numericBytesScratch;
    private static Byte[] NumericBytesScratch { get; }
    [ExtensionAttribute]
public static ReadOnlySpan`1<byte> ToSpan(ReadOnlySequence`1<byte> buffer);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(Memory`1<byte> buffer);
    [ExtensionAttribute]
public static ArraySegment`1<byte> GetArray(ReadOnlyMemory`1<byte> memory);
    [ExtensionAttribute]
internal static void WriteAsciiNoValidation(CountingBufferWriter`1& buffer, string data);
    [ExtensionAttribute]
internal static void WriteNumeric(CountingBufferWriter`1& buffer, ulong number);
    [ExtensionAttribute]
private static void WriteNumericMultiWrite(CountingBufferWriter`1& buffer, ulong number);
    [ExtensionAttribute]
private static void WriteAsciiMultiWrite(CountingBufferWriter`1& buffer, string data);
    private static void EncodeAsciiCharsToBytes(Char* input, Byte* output, int length);
    private static Byte[] get_NumericBytesScratch();
    private static Byte[] CreateNumericBytesScratch();
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.ProduceEndType : Enum {
    public int value__;
    public static ProduceEndType SocketShutdown;
    public static ProduceEndType SocketDisconnect;
    public static ProduceEndType ConnectionKeepAlive;
}
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.ReasonPhrases : object {
    private static Byte[] _bytesStatus100;
    private static Byte[] _bytesStatus101;
    private static Byte[] _bytesStatus102;
    private static Byte[] _bytesStatus200;
    private static Byte[] _bytesStatus201;
    private static Byte[] _bytesStatus202;
    private static Byte[] _bytesStatus203;
    private static Byte[] _bytesStatus204;
    private static Byte[] _bytesStatus205;
    private static Byte[] _bytesStatus206;
    private static Byte[] _bytesStatus207;
    private static Byte[] _bytesStatus208;
    private static Byte[] _bytesStatus226;
    private static Byte[] _bytesStatus300;
    private static Byte[] _bytesStatus301;
    private static Byte[] _bytesStatus302;
    private static Byte[] _bytesStatus303;
    private static Byte[] _bytesStatus304;
    private static Byte[] _bytesStatus305;
    private static Byte[] _bytesStatus306;
    private static Byte[] _bytesStatus307;
    private static Byte[] _bytesStatus308;
    private static Byte[] _bytesStatus400;
    private static Byte[] _bytesStatus401;
    private static Byte[] _bytesStatus402;
    private static Byte[] _bytesStatus403;
    private static Byte[] _bytesStatus404;
    private static Byte[] _bytesStatus405;
    private static Byte[] _bytesStatus406;
    private static Byte[] _bytesStatus407;
    private static Byte[] _bytesStatus408;
    private static Byte[] _bytesStatus409;
    private static Byte[] _bytesStatus410;
    private static Byte[] _bytesStatus411;
    private static Byte[] _bytesStatus412;
    private static Byte[] _bytesStatus413;
    private static Byte[] _bytesStatus414;
    private static Byte[] _bytesStatus415;
    private static Byte[] _bytesStatus416;
    private static Byte[] _bytesStatus417;
    private static Byte[] _bytesStatus418;
    private static Byte[] _bytesStatus419;
    private static Byte[] _bytesStatus421;
    private static Byte[] _bytesStatus422;
    private static Byte[] _bytesStatus423;
    private static Byte[] _bytesStatus424;
    private static Byte[] _bytesStatus426;
    private static Byte[] _bytesStatus428;
    private static Byte[] _bytesStatus429;
    private static Byte[] _bytesStatus431;
    private static Byte[] _bytesStatus451;
    private static Byte[] _bytesStatus500;
    private static Byte[] _bytesStatus501;
    private static Byte[] _bytesStatus502;
    private static Byte[] _bytesStatus503;
    private static Byte[] _bytesStatus504;
    private static Byte[] _bytesStatus505;
    private static Byte[] _bytesStatus506;
    private static Byte[] _bytesStatus507;
    private static Byte[] _bytesStatus508;
    private static Byte[] _bytesStatus510;
    private static Byte[] _bytesStatus511;
    private static ReasonPhrases();
    private static Byte[] CreateStatusBytes(int statusCode);
    public static Byte[] ToStatusBytes(int statusCode, string reasonPhrase);
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.RequestProcessingStatus : Enum {
    public int value__;
    public static RequestProcessingStatus RequestPending;
    public static RequestProcessingStatus ParsingRequestLine;
    public static RequestProcessingStatus ParsingHeaders;
    public static RequestProcessingStatus AppStarted;
    public static RequestProcessingStatus ResponseStarted;
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.RequestRejectionReason : Enum {
    public int value__;
    public static RequestRejectionReason UnrecognizedHTTPVersion;
    public static RequestRejectionReason InvalidRequestLine;
    public static RequestRejectionReason InvalidRequestHeader;
    public static RequestRejectionReason InvalidRequestHeadersNoCRLF;
    public static RequestRejectionReason MalformedRequestInvalidHeaders;
    public static RequestRejectionReason InvalidContentLength;
    public static RequestRejectionReason MultipleContentLengths;
    public static RequestRejectionReason UnexpectedEndOfRequestContent;
    public static RequestRejectionReason BadChunkSuffix;
    public static RequestRejectionReason BadChunkSizeData;
    public static RequestRejectionReason ChunkedRequestIncomplete;
    public static RequestRejectionReason InvalidRequestTarget;
    public static RequestRejectionReason InvalidCharactersInHeaderName;
    public static RequestRejectionReason RequestLineTooLong;
    public static RequestRejectionReason HeadersExceedMaxTotalSize;
    public static RequestRejectionReason TooManyHeaders;
    public static RequestRejectionReason RequestBodyTooLarge;
    public static RequestRejectionReason RequestHeadersTimeout;
    public static RequestRejectionReason RequestBodyTimeout;
    public static RequestRejectionReason FinalTransferCodingNotChunked;
    public static RequestRejectionReason LengthRequired;
    public static RequestRejectionReason LengthRequiredHttp10;
    public static RequestRejectionReason OptionsMethodRequired;
    public static RequestRejectionReason ConnectMethodRequired;
    public static RequestRejectionReason MissingHostHeader;
    public static RequestRejectionReason MultipleHostHeaders;
    public static RequestRejectionReason InvalidHostHeader;
    public static RequestRejectionReason UpgradeRequestCannotHavePayload;
    public static RequestRejectionReason RequestBodyExceedsContentLength;
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.TransferCoding : Enum {
    public int value__;
    public static TransferCoding None;
    public static TransferCoding Chunked;
    public static TransferCoding Other;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.DynamicTable : object {
    private HeaderField[] _buffer;
    private int _maxSize;
    private int _size;
    private int _count;
    private int _insertIndex;
    private int _removeIndex;
    public int Count { get; }
    public int Size { get; }
    public int MaxSize { get; }
    public HeaderField Item { get; }
    public DynamicTable(int maxSize);
    public int get_Count();
    public int get_Size();
    public int get_MaxSize();
    public HeaderField get_Item(int index);
    public void Insert(Span`1<byte> name, Span`1<byte> value);
    public void Resize(int maxSize);
    private void EnsureAvailable(int available);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.HeaderField : ValueType {
    public static int RfcOverhead;
    [CompilerGeneratedAttribute]
private Byte[] <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Byte[] Name { get; }
    public Byte[] Value { get; }
    public int Length { get; }
    public HeaderField(Span`1<byte> name, Span`1<byte> value);
    [CompilerGeneratedAttribute]
public Byte[] get_Name();
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
    public int get_Length();
    public static int GetLength(int nameLength, int valueLenth);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.HPackDecoder : object {
    public static int MaxStringOctets;
    private static byte IndexedHeaderFieldMask;
    private static byte IndexedHeaderFieldRepresentation;
    private static byte LiteralHeaderFieldWithIncrementalIndexingMask;
    private static byte LiteralHeaderFieldWithIncrementalIndexingRepresentation;
    private static byte LiteralHeaderFieldWithoutIndexingMask;
    private static byte LiteralHeaderFieldWithoutIndexingRepresentation;
    private static byte LiteralHeaderFieldNeverIndexedMask;
    private static byte LiteralHeaderFieldNeverIndexedRepresentation;
    private static byte DynamicTableSizeUpdateMask;
    private static byte DynamicTableSizeUpdateRepresentation;
    private static byte HuffmanMask;
    private static int IndexedHeaderFieldPrefix;
    private static int LiteralHeaderFieldWithIncrementalIndexingPrefix;
    private static int LiteralHeaderFieldWithoutIndexingPrefix;
    private static int LiteralHeaderFieldNeverIndexedPrefix;
    private static int DynamicTableSizeUpdatePrefix;
    private static int StringLengthPrefix;
    private int _maxDynamicTableSize;
    private DynamicTable _dynamicTable;
    private IntegerDecoder _integerDecoder;
    private Byte[] _stringOctets;
    private Byte[] _headerNameOctets;
    private Byte[] _headerValueOctets;
    private State _state;
    private Byte[] _headerName;
    private int _stringIndex;
    private int _stringLength;
    private int _headerNameLength;
    private int _headerValueLength;
    private bool _index;
    private bool _huffman;
    public HPackDecoder(int maxDynamicTableSize);
    internal HPackDecoder(int maxDynamicTableSize, DynamicTable dynamicTable);
    public void Decode(Span`1<byte> data, bool endHeaders, IHttpHeadersHandler handler);
    public void OnByte(byte b, IHttpHeadersHandler handler);
    private void ProcessHeaderValue(IHttpHeadersHandler handler);
    private void OnIndexedHeaderField(int index, IHttpHeadersHandler handler);
    private void OnIndexedHeaderName(int index);
    private void OnStringLength(int length, State nextState);
    private void OnString(State nextState);
    private HeaderField GetHeader(int index);
    [CompilerGeneratedAttribute]
private int <OnString>g__Decode|41_0(Byte[] dst);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.HPackDecodingException : Exception {
    public HPackDecodingException(string message);
    public HPackDecodingException(string message, Exception innerException);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.HPackEncoder : object {
    private IEnumerator`1<KeyValuePair`2<string, string>> _enumerator;
    public bool BeginEncode(IEnumerable`1<KeyValuePair`2<string, string>> headers, Span`1<byte> buffer, Int32& length);
    public bool BeginEncode(int statusCode, IEnumerable`1<KeyValuePair`2<string, string>> headers, Span`1<byte> buffer, Int32& length);
    public bool Encode(Span`1<byte> buffer, Int32& length);
    private int EncodeStatusCode(int statusCode, Span`1<byte> buffer);
    private bool EncodeHeader(string name, string value, Span`1<byte> buffer, Int32& length);
    private bool EncodeString(string s, Span`1<byte> buffer, Int32& length, bool lowercase);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.Huffman : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`2[] _encodingTable;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`2[] _decodingTable;
    private static Huffman();
    public static ValueTuple`2<UInt32, int> Encode(int data);
    public static int Decode(Byte[] src, int offset, int count, Byte[] dst);
    public static int Decode(UInt32 data, int validBits, Int32& decodedBits);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.HuffmanDecodingException : Exception {
    public HuffmanDecodingException(string message);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.IntegerDecoder : object {
    private int _i;
    private int _m;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Value { get; private set; }
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(int value);
    public bool BeginDecode(byte b, int prefixLength);
    public bool Decode(byte b);
}
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.IntegerEncoder : object {
    public static bool Encode(int i, int n, Span`1<byte> buffer, Int32& length);
    private static byte MaskHigh(int n);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.StaticTable : object {
    private static StaticTable _instance;
    private Dictionary`2<int, int> _statusIndex;
    private HeaderField[] _staticTable;
    public static StaticTable Instance { get; }
    public int Count { get; }
    public HeaderField Item { get; }
    public IReadOnlyDictionary`2<int, int> StatusIndex { get; }
    private static StaticTable();
    public static StaticTable get_Instance();
    public int get_Count();
    public HeaderField get_Item(int index);
    public IReadOnlyDictionary`2<int, int> get_StatusIndex();
    private static HeaderField CreateHeaderField(string name, string value);
}
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.HPack.StatusCodes : object {
    private static Byte[] _bytesStatus100;
    private static Byte[] _bytesStatus101;
    private static Byte[] _bytesStatus102;
    private static Byte[] _bytesStatus200;
    private static Byte[] _bytesStatus201;
    private static Byte[] _bytesStatus202;
    private static Byte[] _bytesStatus203;
    private static Byte[] _bytesStatus204;
    private static Byte[] _bytesStatus205;
    private static Byte[] _bytesStatus206;
    private static Byte[] _bytesStatus207;
    private static Byte[] _bytesStatus208;
    private static Byte[] _bytesStatus226;
    private static Byte[] _bytesStatus300;
    private static Byte[] _bytesStatus301;
    private static Byte[] _bytesStatus302;
    private static Byte[] _bytesStatus303;
    private static Byte[] _bytesStatus304;
    private static Byte[] _bytesStatus305;
    private static Byte[] _bytesStatus306;
    private static Byte[] _bytesStatus307;
    private static Byte[] _bytesStatus308;
    private static Byte[] _bytesStatus400;
    private static Byte[] _bytesStatus401;
    private static Byte[] _bytesStatus402;
    private static Byte[] _bytesStatus403;
    private static Byte[] _bytesStatus404;
    private static Byte[] _bytesStatus405;
    private static Byte[] _bytesStatus406;
    private static Byte[] _bytesStatus407;
    private static Byte[] _bytesStatus408;
    private static Byte[] _bytesStatus409;
    private static Byte[] _bytesStatus410;
    private static Byte[] _bytesStatus411;
    private static Byte[] _bytesStatus412;
    private static Byte[] _bytesStatus413;
    private static Byte[] _bytesStatus414;
    private static Byte[] _bytesStatus415;
    private static Byte[] _bytesStatus416;
    private static Byte[] _bytesStatus417;
    private static Byte[] _bytesStatus418;
    private static Byte[] _bytesStatus419;
    private static Byte[] _bytesStatus421;
    private static Byte[] _bytesStatus422;
    private static Byte[] _bytesStatus423;
    private static Byte[] _bytesStatus424;
    private static Byte[] _bytesStatus426;
    private static Byte[] _bytesStatus428;
    private static Byte[] _bytesStatus429;
    private static Byte[] _bytesStatus431;
    private static Byte[] _bytesStatus451;
    private static Byte[] _bytesStatus500;
    private static Byte[] _bytesStatus501;
    private static Byte[] _bytesStatus502;
    private static Byte[] _bytesStatus503;
    private static Byte[] _bytesStatus504;
    private static Byte[] _bytesStatus505;
    private static Byte[] _bytesStatus506;
    private static Byte[] _bytesStatus507;
    private static Byte[] _bytesStatus508;
    private static Byte[] _bytesStatus510;
    private static Byte[] _bytesStatus511;
    private static StatusCodes();
    private static Byte[] CreateStatusBytes(int statusCode);
    public static Byte[] ToStatusBytes(int statusCode);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection : object {
    [CompilerGeneratedAttribute]
private static Byte[] <ClientPreface>k__BackingField;
    private static PseudoHeaderFields _mandatoryRequestPseudoHeaderFields;
    private static Byte[] _authorityBytes;
    private static Byte[] _methodBytes;
    private static Byte[] _pathBytes;
    private static Byte[] _schemeBytes;
    private static Byte[] _statusBytes;
    private static Byte[] _connectionBytes;
    private static Byte[] _teBytes;
    private static Byte[] _trailersBytes;
    private static Byte[] _connectBytes;
    private Http2ConnectionContext _context;
    private Http2FrameWriter _frameWriter;
    private HPackDecoder _hpackDecoder;
    private Http2PeerSettings _serverSettings;
    private Http2PeerSettings _clientSettings;
    private Http2Frame _incomingFrame;
    private Http2Stream _currentHeadersStream;
    private RequestHeaderParsingState _requestHeaderParsingState;
    private PseudoHeaderFields _parsedPseudoHeaderFields;
    private bool _isMethodConnect;
    private int _highestOpenedStreamId;
    private bool _stopping;
    private ConcurrentDictionary`2<int, Http2Stream> _streams;
    public static Byte[] ClientPreface { get; }
    public string ConnectionId { get; }
    public PipeReader Input { get; }
    public IKestrelTrace Log { get; }
    public IFeatureCollection ConnectionFeatures { get; }
    public Http2Connection(Http2ConnectionContext context);
    private static Http2Connection();
    [CompilerGeneratedAttribute]
public static Byte[] get_ClientPreface();
    public string get_ConnectionId();
    public PipeReader get_Input();
    public IKestrelTrace get_Log();
    public IFeatureCollection get_ConnectionFeatures();
    public sealed virtual void Abort(Exception ex);
    public sealed virtual void StopProcessingNextRequest();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection/<ProcessRequestsAsync>d__39`1")]
public sealed virtual Task ProcessRequestsAsync(IHttpApplication`1<TContext> application);
    private bool ParsePreface(ReadOnlySequence`1<byte> readableBuffer, SequencePosition& consumed, SequencePosition& examined);
    private Task ProcessFrameAsync(IHttpApplication`1<TContext> application);
    private Task ProcessDataFrameAsync();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection/<ProcessHeadersFrameAsync>d__43`1")]
private Task ProcessHeadersFrameAsync(IHttpApplication`1<TContext> application);
    private Task ProcessPriorityFrameAsync();
    private Task ProcessRstStreamFrameAsync();
    private Task ProcessSettingsFrameAsync();
    private Task ProcessPingFrameAsync();
    private Task ProcessGoAwayFrameAsync();
    private Task ProcessWindowUpdateFrameAsync();
    private Task ProcessContinuationFrameAsync(IHttpApplication`1<TContext> application);
    private Task ProcessUnknownFrameAsync();
    private Task DecodeHeadersAsync(IHttpApplication`1<TContext> application, bool endHeaders, Span`1<byte> payload);
    private Task DecodeTrailersAsync(bool endHeaders, Span`1<byte> payload);
    private void StartStream(IHttpApplication`1<TContext> application);
    private void ResetRequestHeaderParsingState();
    private void ThrowIfIncomingFrameSentToIdleStream();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.IHttp2StreamLifetimeHandler.OnStreamCompleted(int streamId);
    public sealed virtual void OnHeader(Span`1<byte> name, Span`1<byte> value);
    private void ValidateHeader(Span`1<byte> name, Span`1<byte> value);
    private bool IsPseudoHeaderField(Span`1<byte> name, PseudoHeaderFields& headerField);
    private static bool IsConnectionSpecificHeaderField(Span`1<byte> name, Span`1<byte> value);
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.SetTimeout(long ticks, TimeoutAction timeoutAction);
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.ResetTimeout(long ticks, TimeoutAction timeoutAction);
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.CancelTimeout();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.StartTimingReads();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.PauseTimingReads();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.ResumeTimingReads();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.StopTimingReads();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.BytesRead(long count);
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.StartTimingWrite(long size);
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl.StopTimingWrite();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2ConnectionContext : object {
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceContext <ServiceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <ConnectionFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <RemoteEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Application>k__BackingField;
    public string ConnectionId { get; public set; }
    public ServiceContext ServiceContext { get; public set; }
    public IFeatureCollection ConnectionFeatures { get; public set; }
    public MemoryPool`1<byte> MemoryPool { get; public set; }
    public IPEndPoint LocalEndPoint { get; public set; }
    public IPEndPoint RemoteEndPoint { get; public set; }
    public IDuplexPipe Transport { get; public set; }
    public IDuplexPipe Application { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public ServiceContext get_ServiceContext();
    [CompilerGeneratedAttribute]
public void set_ServiceContext(ServiceContext value);
    [CompilerGeneratedAttribute]
public IFeatureCollection get_ConnectionFeatures();
    [CompilerGeneratedAttribute]
public void set_ConnectionFeatures(IFeatureCollection value);
    [CompilerGeneratedAttribute]
public MemoryPool`1<byte> get_MemoryPool();
    [CompilerGeneratedAttribute]
public void set_MemoryPool(MemoryPool`1<byte> value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public void set_LocalEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public void set_RemoteEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Transport();
    [CompilerGeneratedAttribute]
public void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2ConnectionErrorException : Exception {
    [CompilerGeneratedAttribute]
private Http2ErrorCode <ErrorCode>k__BackingField;
    public Http2ErrorCode ErrorCode { get; }
    public Http2ConnectionErrorException(string message, Http2ErrorCode errorCode);
    [CompilerGeneratedAttribute]
public Http2ErrorCode get_ErrorCode();
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2ContinuationFrameFlags : Enum {
    public byte value__;
    public static Http2ContinuationFrameFlags NONE;
    public static Http2ContinuationFrameFlags END_HEADERS;
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2DataFrameFlags : Enum {
    public byte value__;
    public static Http2DataFrameFlags NONE;
    public static Http2DataFrameFlags END_STREAM;
    public static Http2DataFrameFlags PADDED;
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2ErrorCode : Enum {
    public UInt32 value__;
    public static Http2ErrorCode NO_ERROR;
    public static Http2ErrorCode PROTOCOL_ERROR;
    public static Http2ErrorCode INTERNAL_ERROR;
    public static Http2ErrorCode FLOW_CONTROL_ERROR;
    public static Http2ErrorCode SETTINGS_TIMEOUT;
    public static Http2ErrorCode STREAM_CLOSED;
    public static Http2ErrorCode FRAME_SIZE_ERROR;
    public static Http2ErrorCode REFUSED_STREAM;
    public static Http2ErrorCode CANCEL;
    public static Http2ErrorCode COMPRESSION_ERROR;
    public static Http2ErrorCode CONNECT_ERROR;
    public static Http2ErrorCode ENHANCE_YOUR_CALM;
    public static Http2ErrorCode INADEQUATE_SECURITY;
    public static Http2ErrorCode HTTP_1_1_REQUIRED;
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Frame : object {
    public static int MinAllowedMaxFrameSize;
    public static int MaxAllowedMaxFrameSize;
    public static int HeaderLength;
    private static int LengthOffset;
    private static int TypeOffset;
    private static int FlagsOffset;
    private static int StreamIdOffset;
    private static int PayloadOffset;
    private Byte[] _data;
    public Http2ContinuationFrameFlags ContinuationFlags { get; public set; }
    public Span`1<byte> Raw { get; }
    public int Length { get; public set; }
    public Http2FrameType Type { get; public set; }
    public byte Flags { get; public set; }
    public int StreamId { get; public set; }
    public Span`1<byte> Payload { get; }
    public Http2DataFrameFlags DataFlags { get; public set; }
    public bool DataHasPadding { get; }
    public byte DataPadLength { get; public set; }
    public ArraySegment`1<byte> DataPayload { get; }
    public int GoAwayLastStreamId { get; public set; }
    public Http2ErrorCode GoAwayErrorCode { get; public set; }
    public Http2HeadersFrameFlags HeadersFlags { get; public set; }
    public bool HeadersHasPadding { get; }
    public byte HeadersPadLength { get; public set; }
    public bool HeadersHasPriority { get; }
    public byte HeadersPriority { get; public set; }
    private int HeadersPriorityOffset { get; }
    public int HeadersStreamDependency { get; public set; }
    private int HeadersStreamDependencyOffset { get; }
    public Span`1<byte> HeadersPayload { get; }
    private int HeadersPayloadOffset { get; }
    private int HeadersPayloadLength { get; }
    public Http2PingFrameFlags PingFlags { get; public set; }
    public int PriorityStreamDependency { get; public set; }
    public bool PriorityIsExclusive { get; public set; }
    public byte PriorityWeight { get; public set; }
    public Http2ErrorCode RstStreamErrorCode { get; public set; }
    public Http2SettingsFrameFlags SettingsFlags { get; public set; }
    public int WindowUpdateSizeIncrement { get; public set; }
    public Http2ContinuationFrameFlags get_ContinuationFlags();
    public void set_ContinuationFlags(Http2ContinuationFrameFlags value);
    public void PrepareContinuation(Http2ContinuationFrameFlags flags, int streamId);
    public Span`1<byte> get_Raw();
    public int get_Length();
    public void set_Length(int value);
    public Http2FrameType get_Type();
    public void set_Type(Http2FrameType value);
    public byte get_Flags();
    public void set_Flags(byte value);
    public int get_StreamId();
    public void set_StreamId(int value);
    public Span`1<byte> get_Payload();
    public Http2DataFrameFlags get_DataFlags();
    public void set_DataFlags(Http2DataFrameFlags value);
    public bool get_DataHasPadding();
    public byte get_DataPadLength();
    public void set_DataPadLength(byte value);
    public ArraySegment`1<byte> get_DataPayload();
    public void PrepareData(int streamId, Nullable`1<byte> padLength);
    private void DataTraceFrame(ILogger logger);
    public int get_GoAwayLastStreamId();
    public void set_GoAwayLastStreamId(int value);
    public Http2ErrorCode get_GoAwayErrorCode();
    public void set_GoAwayErrorCode(Http2ErrorCode value);
    public void PrepareGoAway(int lastStreamId, Http2ErrorCode errorCode);
    public Http2HeadersFrameFlags get_HeadersFlags();
    public void set_HeadersFlags(Http2HeadersFrameFlags value);
    public bool get_HeadersHasPadding();
    public byte get_HeadersPadLength();
    public void set_HeadersPadLength(byte value);
    public bool get_HeadersHasPriority();
    public byte get_HeadersPriority();
    public void set_HeadersPriority(byte value);
    private int get_HeadersPriorityOffset();
    public int get_HeadersStreamDependency();
    public void set_HeadersStreamDependency(int value);
    private int get_HeadersStreamDependencyOffset();
    public Span`1<byte> get_HeadersPayload();
    private int get_HeadersPayloadOffset();
    private int get_HeadersPayloadLength();
    public void PrepareHeaders(Http2HeadersFrameFlags flags, int streamId);
    public Http2PingFrameFlags get_PingFlags();
    public void set_PingFlags(Http2PingFrameFlags value);
    public void PreparePing(Http2PingFrameFlags flags);
    public int get_PriorityStreamDependency();
    public void set_PriorityStreamDependency(int value);
    public bool get_PriorityIsExclusive();
    public void set_PriorityIsExclusive(bool value);
    public byte get_PriorityWeight();
    public void set_PriorityWeight(byte value);
    public void PreparePriority(int streamId, int streamDependency, bool exclusive, byte weight);
    public Http2ErrorCode get_RstStreamErrorCode();
    public void set_RstStreamErrorCode(Http2ErrorCode value);
    public void PrepareRstStream(int streamId, Http2ErrorCode errorCode);
    public Http2SettingsFrameFlags get_SettingsFlags();
    public void set_SettingsFlags(Http2SettingsFrameFlags value);
    public void PrepareSettings(Http2SettingsFrameFlags flags, Http2PeerSettings settings);
    public int get_WindowUpdateSizeIncrement();
    public void set_WindowUpdateSizeIncrement(int value);
    public void PrepareWindowUpdate(int streamId, int sizeIncrement);
}
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2FrameReader : object {
    public static bool ReadFrame(ReadOnlySequence`1<byte> readableBuffer, Http2Frame frame, SequencePosition& consumed, SequencePosition& examined);
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2FrameType : Enum {
    public byte value__;
    public static Http2FrameType DATA;
    public static Http2FrameType HEADERS;
    public static Http2FrameType PRIORITY;
    public static Http2FrameType RST_STREAM;
    public static Http2FrameType SETTINGS;
    public static Http2FrameType PUSH_PROMISE;
    public static Http2FrameType PING;
    public static Http2FrameType GOAWAY;
    public static Http2FrameType WINDOW_UPDATE;
    public static Http2FrameType CONTINUATION;
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2FrameWriter : object {
    private static Byte[] _continueBytes;
    private Http2Frame _outgoingFrame;
    private object _writeLock;
    private HPackEncoder _hpackEncoder;
    private PipeWriter _outputWriter;
    private PipeReader _outputReader;
    private bool _completed;
    public Http2FrameWriter(PipeWriter outputPipeWriter, PipeReader outputPipeReader);
    private static Http2FrameWriter();
    public sealed virtual void Abort(Exception ex);
    public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
    public sealed virtual Task Write100ContinueAsync(int streamId);
    public sealed virtual void WriteResponseHeaders(int streamId, int statusCode, IHeaderDictionary headers);
    public sealed virtual Task WriteDataAsync(int streamId, ReadOnlySpan`1<byte> data, CancellationToken cancellationToken);
    public sealed virtual Task WriteDataAsync(int streamId, ReadOnlySpan`1<byte> data, bool endStream, CancellationToken cancellationToken);
    public sealed virtual Task WriteRstStreamAsync(int streamId, Http2ErrorCode errorCode);
    public Task WriteSettingsAsync(Http2PeerSettings settings);
    public sealed virtual Task WriteSettingsAckAsync();
    public sealed virtual Task WritePingAsync(Http2PingFrameFlags flags, ReadOnlySpan`1<byte> payload);
    public sealed virtual Task WriteGoAwayAsync(int lastStreamId, Http2ErrorCode errorCode);
    private void Append(ReadOnlySpan`1<byte> data);
    private Task WriteAsync(ReadOnlySpan`1<byte> data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2FrameWriter/<FlushAsync>d__21")]
private Task FlushAsync(PipeWriter outputWriter, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2FrameWriter/<EnumerateHeaders>d__22")]
private static IEnumerable`1<KeyValuePair`2<string, string>> EnumerateHeaders(IHeaderDictionary headers);
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2HeadersFrameFlags : Enum {
    public byte value__;
    public static Http2HeadersFrameFlags NONE;
    public static Http2HeadersFrameFlags END_STREAM;
    public static Http2HeadersFrameFlags END_HEADERS;
    public static Http2HeadersFrameFlags PADDED;
    public static Http2HeadersFrameFlags PRIORITY;
}
public abstract class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2MessageBody : MessageBody {
    private Http2Stream _context;
    protected Http2MessageBody(Http2Stream context);
    protected virtual void OnReadStarted();
    protected virtual Task OnConsumeAsync();
    public virtual Task StopAsync();
    public static MessageBody For(HttpRequestHeaders headers, Http2Stream context);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2OutputProducer : object {
    private int _streamId;
    private IHttp2FrameWriter _frameWriter;
    public Http2OutputProducer(int streamId, IHttp2FrameWriter frameWriter);
    public sealed virtual void Dispose();
    public sealed virtual void Abort(Exception error);
    public sealed virtual Task WriteAsync(Func`3<PipeWriter, T, long> callback, T state);
    public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
    public sealed virtual Task Write100ContinueAsync(CancellationToken cancellationToken);
    public sealed virtual Task WriteDataAsync(ReadOnlySpan`1<byte> data, CancellationToken cancellationToken);
    public sealed virtual Task WriteStreamSuffixAsync(CancellationToken cancellationToken);
    public sealed virtual void WriteResponseHeaders(int statusCode, string ReasonPhrase, HttpResponseHeaders responseHeaders);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2PeerSetting : ValueType {
    [CompilerGeneratedAttribute]
private Http2SettingsParameter <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Value>k__BackingField;
    public Http2SettingsParameter Parameter { get; }
    public UInt32 Value { get; }
    public Http2PeerSetting(Http2SettingsParameter parameter, UInt32 value);
    [CompilerGeneratedAttribute]
public Http2SettingsParameter get_Parameter();
    [CompilerGeneratedAttribute]
public UInt32 get_Value();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2PeerSettings : object {
    public static UInt32 DefaultHeaderTableSize;
    public static bool DefaultEnablePush;
    public static UInt32 DefaultMaxConcurrentStreams;
    public static UInt32 DefaultInitialWindowSize;
    public static UInt32 DefaultMaxFrameSize;
    public static UInt32 DefaultMaxHeaderListSize;
    [CompilerGeneratedAttribute]
private UInt32 <HeaderTableSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePush>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxConcurrentStreams>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <InitialWindowSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxFrameSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxHeaderListSize>k__BackingField;
    public UInt32 HeaderTableSize { get; public set; }
    public bool EnablePush { get; public set; }
    public UInt32 MaxConcurrentStreams { get; public set; }
    public UInt32 InitialWindowSize { get; public set; }
    public UInt32 MaxFrameSize { get; public set; }
    public UInt32 MaxHeaderListSize { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_HeaderTableSize();
    [CompilerGeneratedAttribute]
public void set_HeaderTableSize(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_EnablePush();
    [CompilerGeneratedAttribute]
public void set_EnablePush(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaxConcurrentStreams();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentStreams(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_InitialWindowSize();
    [CompilerGeneratedAttribute]
public void set_InitialWindowSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaxFrameSize();
    [CompilerGeneratedAttribute]
public void set_MaxFrameSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaxHeaderListSize();
    [CompilerGeneratedAttribute]
public void set_MaxHeaderListSize(UInt32 value);
    public void ParseFrame(Http2Frame frame);
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2PeerSettings/<GetEnumerator>d__31")]
public sealed virtual IEnumerator`1<Http2PeerSetting> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2PingFrameFlags : Enum {
    public byte value__;
    public static Http2PingFrameFlags NONE;
    public static Http2PingFrameFlags ACK;
}
[FlagsAttribute]
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2SettingsFrameFlags : Enum {
    public byte value__;
    public static Http2SettingsFrameFlags NONE;
    public static Http2SettingsFrameFlags ACK;
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2SettingsParameter : Enum {
    public ushort value__;
    public static Http2SettingsParameter SETTINGS_HEADER_TABLE_SIZE;
    public static Http2SettingsParameter SETTINGS_ENABLE_PUSH;
    public static Http2SettingsParameter SETTINGS_MAX_CONCURRENT_STREAMS;
    public static Http2SettingsParameter SETTINGS_INITIAL_WINDOW_SIZE;
    public static Http2SettingsParameter SETTINGS_MAX_FRAME_SIZE;
    public static Http2SettingsParameter SETTINGS_MAX_HEADER_LIST_SIZE;
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2SettingsParameterOutOfRangeException : Exception {
    [CompilerGeneratedAttribute]
private Http2SettingsParameter <Parameter>k__BackingField;
    public Http2SettingsParameter Parameter { get; }
    public Http2SettingsParameterOutOfRangeException(Http2SettingsParameter parameter, UInt32 lowerBound, UInt32 upperBound);
    [CompilerGeneratedAttribute]
public Http2SettingsParameter get_Parameter();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Stream : HttpProtocol {
    private Http2StreamContext _context;
    [CompilerGeneratedAttribute]
private bool <RequestBodyStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndStreamReceived>k__BackingField;
    public int StreamId { get; }
    public bool RequestBodyStarted { get; private set; }
    public bool EndStreamReceived { get; private set; }
    protected IHttp2StreamLifetimeHandler StreamLifetimeHandler { get; }
    public bool IsUpgradableRequest { get; }
    private int Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttp2StreamIdFeature.StreamId { get; }
    public Http2Stream(Http2StreamContext context);
    public int get_StreamId();
    [CompilerGeneratedAttribute]
public bool get_RequestBodyStarted();
    [CompilerGeneratedAttribute]
private void set_RequestBodyStarted(bool value);
    [CompilerGeneratedAttribute]
public bool get_EndStreamReceived();
    [CompilerGeneratedAttribute]
private void set_EndStreamReceived(bool value);
    protected IHttp2StreamLifetimeHandler get_StreamLifetimeHandler();
    public virtual bool get_IsUpgradableRequest();
    protected virtual void OnReset();
    protected virtual void OnRequestProcessingEnded();
    protected virtual string CreateRequestId();
    protected virtual MessageBody CreateMessageBody();
    protected virtual bool TryParseRequest(ReadResult result, Boolean& endConnection);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Stream/<OnDataAsync>d__21")]
public Task OnDataAsync(ArraySegment`1<byte> data, bool endStream);
    private sealed virtual override int Microsoft.AspNetCore.Server.Kestrel.Core.Features.IHttp2StreamIdFeature.get_StreamId();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2StreamContext : object {
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StreamId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceContext <ServiceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <ConnectionFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <RemoteEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttp2StreamLifetimeHandler <StreamLifetimeHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttp2FrameWriter <FrameWriter>k__BackingField;
    public string ConnectionId { get; public set; }
    public int StreamId { get; public set; }
    public ServiceContext ServiceContext { get; public set; }
    public IFeatureCollection ConnectionFeatures { get; public set; }
    public MemoryPool`1<byte> MemoryPool { get; public set; }
    public IPEndPoint RemoteEndPoint { get; public set; }
    public IPEndPoint LocalEndPoint { get; public set; }
    public IHttp2StreamLifetimeHandler StreamLifetimeHandler { get; public set; }
    public IHttp2FrameWriter FrameWriter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public int get_StreamId();
    [CompilerGeneratedAttribute]
public void set_StreamId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceContext get_ServiceContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceContext(ServiceContext value);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureCollection get_ConnectionFeatures();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionFeatures(IFeatureCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual MemoryPool`1<byte> get_MemoryPool();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MemoryPool(MemoryPool`1<byte> value);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LocalEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public IHttp2StreamLifetimeHandler get_StreamLifetimeHandler();
    [CompilerGeneratedAttribute]
public void set_StreamLifetimeHandler(IHttp2StreamLifetimeHandler value);
    [CompilerGeneratedAttribute]
public IHttp2FrameWriter get_FrameWriter();
    [CompilerGeneratedAttribute]
public void set_FrameWriter(IHttp2FrameWriter value);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2StreamErrorException : Exception {
    [CompilerGeneratedAttribute]
private int <StreamId>k__BackingField;
    [CompilerGeneratedAttribute]
private Http2ErrorCode <ErrorCode>k__BackingField;
    public int StreamId { get; }
    public Http2ErrorCode ErrorCode { get; }
    public Http2StreamErrorException(int streamId, string message, Http2ErrorCode errorCode);
    [CompilerGeneratedAttribute]
public int get_StreamId();
    [CompilerGeneratedAttribute]
public Http2ErrorCode get_ErrorCode();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.IHttp2FrameWriter {
    public abstract virtual void Abort(Exception error);
    public abstract virtual Task FlushAsync(CancellationToken cancellationToken);
    public abstract virtual Task Write100ContinueAsync(int streamId);
    public abstract virtual void WriteResponseHeaders(int streamId, int statusCode, IHeaderDictionary headers);
    public abstract virtual Task WriteDataAsync(int streamId, ReadOnlySpan`1<byte> data, CancellationToken cancellationToken);
    public abstract virtual Task WriteDataAsync(int streamId, ReadOnlySpan`1<byte> data, bool endStream, CancellationToken cancellationToken);
    public abstract virtual Task WriteRstStreamAsync(int streamId, Http2ErrorCode errorCode);
    public abstract virtual Task WriteSettingsAckAsync();
    public abstract virtual Task WritePingAsync(Http2PingFrameFlags flags, ReadOnlySpan`1<byte> payload);
    public abstract virtual Task WriteGoAwayAsync(int lastStreamId, Http2ErrorCode errorCode);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.IHttp2StreamLifetimeHandler {
    public abstract virtual void OnStreamCompleted(int streamId);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection : object {
    private static ReadOnlyMemory`1<byte> Http2Id;
    private HttpConnectionContext _context;
    private TaskCompletionSource`1<object> _socketClosedTcs;
    private IList`1<IAdaptedConnection> _adaptedConnections;
    private IDuplexPipe _adaptedTransport;
    private object _protocolSelectionLock;
    private ProtocolSelectionState _protocolSelectionState;
    private IRequestProcessor _requestProcessor;
    private Http1Connection _http1Connection;
    private long _lastTimestamp;
    private long _timeoutTimestamp;
    private TimeoutAction _timeoutAction;
    private object _readTimingLock;
    private bool _readTimingEnabled;
    private bool _readTimingPauseRequested;
    private long _readTimingElapsedTicks;
    private long _readTimingBytesRead;
    private object _writeTimingLock;
    private int _writeTimingWrites;
    private long _writeTimingTimeoutTimestamp;
    private Task _lifetimeTask;
    [CompilerGeneratedAttribute]
private IDebugger <Debugger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestTimedOut>k__BackingField;
    internal HttpProtocol Http1Connection { get; }
    internal IDebugger Debugger { get; internal set; }
    internal bool RequestTimedOut { get; private set; }
    public string ConnectionId { get; }
    public IPEndPoint LocalEndPoint { get; }
    public IPEndPoint RemoteEndPoint { get; }
    private MemoryPool`1<byte> MemoryPool { get; }
    internal PipeOptions AdaptedInputPipeOptions { get; }
    internal PipeOptions AdaptedOutputPipeOptions { get; }
    private IKestrelTrace Log { get; }
    public HttpConnection(HttpConnectionContext context);
    private static HttpConnection();
    internal HttpProtocol get_Http1Connection();
    [CompilerGeneratedAttribute]
internal IDebugger get_Debugger();
    [CompilerGeneratedAttribute]
internal void set_Debugger(IDebugger value);
    [CompilerGeneratedAttribute]
internal bool get_RequestTimedOut();
    [CompilerGeneratedAttribute]
private void set_RequestTimedOut(bool value);
    public string get_ConnectionId();
    public IPEndPoint get_LocalEndPoint();
    public IPEndPoint get_RemoteEndPoint();
    private MemoryPool`1<byte> get_MemoryPool();
    internal PipeOptions get_AdaptedInputPipeOptions();
    internal PipeOptions get_AdaptedOutputPipeOptions();
    private IKestrelTrace get_Log();
    public Task StartRequestProcessing(IHttpApplication`1<TContext> application);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection/<ProcessRequestsAsync>d__47`1")]
private Task ProcessRequestsAsync(IHttpApplication`1<TContext> httpApplication);
    internal void Initialize(IDuplexPipe transport, IDuplexPipe application);
    private Http1Connection CreateHttp1Connection(IDuplexPipe transport, IDuplexPipe application);
    private Http2Connection CreateHttp2Connection(IDuplexPipe transport, IDuplexPipe application);
    public void OnConnectionClosed(Exception ex);
    public Task StopProcessingNextRequestAsync();
    public void Abort(Exception ex);
    public Task AbortAsync(Exception ex);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection/<ApplyConnectionAdaptersAsync>d__55")]
private Task`1<Stream> ApplyConnectionAdaptersAsync();
    private void DisposeAdaptedConnections();
    private HttpProtocols SelectProtocol();
    public void Tick(DateTimeOffset now);
    private void CheckForTimeout(long timestamp);
    private void CheckForReadDataRateTimeout(long timestamp);
    private void CheckForWriteDataRateTimeout(long timestamp);
    public sealed virtual void SetTimeout(long ticks, TimeoutAction timeoutAction);
    public sealed virtual void ResetTimeout(long ticks, TimeoutAction timeoutAction);
    public sealed virtual void CancelTimeout();
    private void AssignTimeout(long ticks, TimeoutAction timeoutAction);
    public sealed virtual void StartTimingReads();
    public sealed virtual void StopTimingReads();
    public sealed virtual void PauseTimingReads();
    public sealed virtual void ResumeTimingReads();
    public sealed virtual void BytesRead(long count);
    public sealed virtual void StartTimingWrite(long size);
    public sealed virtual void StopTimingWrite();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Features.IConnectionTimeoutFeature.SetTimeout(TimeSpan timeSpan);
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Core.Features.IConnectionTimeoutFeature.ResetTimeout(TimeSpan timeSpan);
    private void CloseUninitializedConnection();
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnectionBuilderExtensions : object {
    [ExtensionAttribute]
public static IConnectionBuilder UseHttpServer(IConnectionBuilder builder, ServiceContext serviceContext, IHttpApplication`1<TContext> application, HttpProtocols protocols);
    [ExtensionAttribute]
public static IConnectionBuilder UseHttpServer(IConnectionBuilder builder, IList`1<IConnectionAdapter> adapters, ServiceContext serviceContext, IHttpApplication`1<TContext> application, HttpProtocols protocols);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnectionContext : object {
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HttpConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpProtocols <Protocols>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionContext <ConnectionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceContext <ServiceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IFeatureCollection <ConnectionFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IConnectionAdapter> <ConnectionAdapters>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <LocalEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <RemoteEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Application>k__BackingField;
    public string ConnectionId { get; public set; }
    public long HttpConnectionId { get; public set; }
    public HttpProtocols Protocols { get; public set; }
    public ConnectionContext ConnectionContext { get; public set; }
    public ServiceContext ServiceContext { get; public set; }
    public IFeatureCollection ConnectionFeatures { get; public set; }
    public IList`1<IConnectionAdapter> ConnectionAdapters { get; public set; }
    public MemoryPool`1<byte> MemoryPool { get; public set; }
    public IPEndPoint LocalEndPoint { get; public set; }
    public IPEndPoint RemoteEndPoint { get; public set; }
    public IDuplexPipe Transport { get; public set; }
    public IDuplexPipe Application { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public long get_HttpConnectionId();
    [CompilerGeneratedAttribute]
public void set_HttpConnectionId(long value);
    [CompilerGeneratedAttribute]
public HttpProtocols get_Protocols();
    [CompilerGeneratedAttribute]
public void set_Protocols(HttpProtocols value);
    [CompilerGeneratedAttribute]
public ConnectionContext get_ConnectionContext();
    [CompilerGeneratedAttribute]
public void set_ConnectionContext(ConnectionContext value);
    [CompilerGeneratedAttribute]
public ServiceContext get_ServiceContext();
    [CompilerGeneratedAttribute]
public void set_ServiceContext(ServiceContext value);
    [CompilerGeneratedAttribute]
public IFeatureCollection get_ConnectionFeatures();
    [CompilerGeneratedAttribute]
public void set_ConnectionFeatures(IFeatureCollection value);
    [CompilerGeneratedAttribute]
public IList`1<IConnectionAdapter> get_ConnectionAdapters();
    [CompilerGeneratedAttribute]
public void set_ConnectionAdapters(IList`1<IConnectionAdapter> value);
    [CompilerGeneratedAttribute]
public MemoryPool`1<byte> get_MemoryPool();
    [CompilerGeneratedAttribute]
public void set_MemoryPool(MemoryPool`1<byte> value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_LocalEndPoint();
    [CompilerGeneratedAttribute]
public void set_LocalEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public void set_RemoteEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Transport();
    [CompilerGeneratedAttribute]
public void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnectionMiddleware`1 : object {
    private static long _lastHttpConnectionId;
    private IList`1<IConnectionAdapter> _connectionAdapters;
    private ServiceContext _serviceContext;
    private IHttpApplication`1<TContext> _application;
    private HttpProtocols _protocols;
    public HttpConnectionMiddleware`1(IList`1<IConnectionAdapter> adapters, ServiceContext serviceContext, IHttpApplication`1<TContext> application, HttpProtocols protocols);
    private static HttpConnectionMiddleware`1();
    public Task OnConnectionAsync(ConnectionContext connectionContext);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.CancellationTokenExtensions : object {
    [ExtensionAttribute]
public static IDisposable SafeRegister(CancellationToken cancellationToken, Action`1<object> callback, object state);
    private static void InvokeCallback(object state);
    private static void Dispose(object state);
}
internal static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Constants : object {
    public static int MaxExceptionDetailSize;
    public static string DefaultServerAddress;
    public static string DefaultServerHttpsAddress;
    public static string UnixPipeHostPrefix;
    public static string PipeDescriptorPrefix;
    public static string SocketDescriptorPrefix;
    public static string ServerName;
    public static TimeSpan RequestBodyDrainTimeout;
    public static ArraySegment`1<byte> EmptyData;
    private static Constants();
}
internal static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.CorrelationIdGenerator : object {
    private static string _encode32Chars;
    private static long _lastId;
    private static CorrelationIdGenerator();
    public static string GetNextId();
    private static string GenerateId(long id);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.DebuggerWrapper : object {
    [CompilerGeneratedAttribute]
private static IDebugger <Singleton>k__BackingField;
    public static IDebugger Singleton { get; }
    public bool IsAttached { get; }
    private static DebuggerWrapper();
    [CompilerGeneratedAttribute]
public static IDebugger get_Singleton();
    public sealed virtual bool get_IsAttached();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Disposable : object {
    private Action _dispose;
    private bool _disposedValue;
    public Disposable(Action dispose);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.DisposableAction : object {
    public static DisposableAction Empty;
    private Action`1<object> _action;
    private object _state;
    public DisposableAction(Action action);
    public DisposableAction(Action`1<object> action, object state);
    private static DisposableAction();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Heartbeat : object {
    public static TimeSpan Interval;
    private IHeartbeatHandler[] _callbacks;
    private ISystemClock _systemClock;
    private IDebugger _debugger;
    private IKestrelTrace _trace;
    private TimeSpan _interval;
    private Timer _timer;
    private int _executingOnHeartbeat;
    public Heartbeat(IHeartbeatHandler[] callbacks, ISystemClock systemClock, IDebugger debugger, IKestrelTrace trace);
    internal Heartbeat(IHeartbeatHandler[] callbacks, ISystemClock systemClock, IDebugger debugger, IKestrelTrace trace, TimeSpan interval);
    private static Heartbeat();
    public void Start();
    private static void OnHeartbeat(object state);
    internal void OnHeartbeat();
    public sealed virtual void Dispose();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpConnectionManager : object {
    private ConcurrentDictionary`2<long, HttpConnectionReference> _connectionReferences;
    private IKestrelTrace _trace;
    [CompilerGeneratedAttribute]
private ResourceCounter <UpgradedConnectionCount>k__BackingField;
    public ResourceCounter UpgradedConnectionCount { get; }
    public HttpConnectionManager(IKestrelTrace trace, Nullable`1<long> upgradedConnectionLimit);
    public HttpConnectionManager(IKestrelTrace trace, ResourceCounter upgradedConnections);
    [CompilerGeneratedAttribute]
public ResourceCounter get_UpgradedConnectionCount();
    public void AddConnection(long id, HttpConnection connection);
    public void RemoveConnection(long id);
    public void Walk(Action`1<HttpConnection> callback);
    private static ResourceCounter GetCounter(Nullable`1<long> number);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpConnectionManagerShutdownExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpConnectionManagerShutdownExtensions/<CloseAllConnectionsAsync>d__0")]
[ExtensionAttribute]
public static Task`1<bool> CloseAllConnectionsAsync(HttpConnectionManager connectionManager, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpConnectionManagerShutdownExtensions/<AbortAllConnectionsAsync>d__1")]
[ExtensionAttribute]
public static Task`1<bool> AbortAllConnectionsAsync(HttpConnectionManager connectionManager);
    private static Task CancellationTokenAsTask(CancellationToken token);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpConnectionReference : object {
    private WeakReference`1<HttpConnection> _weakReference;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    public string ConnectionId { get; }
    public HttpConnectionReference(HttpConnection connection);
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
    public bool TryGetConnection(HttpConnection& connection);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpHeartbeatManager : object {
    private HttpConnectionManager _connectionManager;
    private Action`1<HttpConnection> _walkCallback;
    private DateTimeOffset _now;
    public HttpHeartbeatManager(HttpConnectionManager connectionManager);
    public sealed virtual void OnHeartbeat(DateTimeOffset now);
    private void WalkCallback(HttpConnection connection);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.HttpUtilities : object {
    private static Boolean[] HostCharValidity;
    public static string Http10Version;
    public static string Http11Version;
    public static string Http2Version;
    public static string HttpUriScheme;
    public static string HttpsUriScheme;
    private static ulong _httpSchemeLong;
    private static ulong _httpsSchemeLong;
    private static UInt32 _httpGetMethodInt;
    private static ulong _http10VersionLong;
    private static ulong _http11VersionLong;
    private static ulong _httpConnectMethodLong;
    private static ulong _httpDeleteMethodLong;
    private static ulong _httpHeadMethodLong;
    private static ulong _httpPatchMethodLong;
    private static ulong _httpPostMethodLong;
    private static ulong _httpPutMethodLong;
    private static ulong _httpOptionsMethodLong;
    private static ulong _httpTraceMethodLong;
    private static ulong _mask8Chars;
    private static ulong _mask7Chars;
    private static ulong _mask6Chars;
    private static ulong _mask5Chars;
    private static ulong _mask4Chars;
    private static Tuple`4[] _knownMethods;
    private static String[] _methodNames;
    private static HttpUtilities();
    private static void InitializeHostCharValidity();
    private static void SetKnownMethod(ulong mask, ulong knownMethodUlong, HttpMethod knownMethod, int length);
    private static void FillKnownMethodsGaps();
    private static ulong GetAsciiStringAsLong(string str);
    private static UInt32 GetAsciiStringAsInt(string str);
    private static ulong GetMaskAsLong(Byte[] bytes);
    [ExtensionAttribute]
public static string GetAsciiStringNonNullCharacters(Span`1<byte> span);
    [ExtensionAttribute]
public static string GetAsciiStringEscaped(Span`1<byte> span, int maxChars);
    [ExtensionAttribute]
public static bool GetKnownMethod(Span`1<byte> span, HttpMethod& method, Int32& length);
    internal static HttpMethod GetKnownMethod(Byte* data, int length, Int32& methodLength);
    public static HttpMethod GetKnownMethod(string value);
    [ExtensionAttribute]
public static bool GetKnownVersion(Span`1<byte> span, HttpVersion& knownVersion, Byte& length);
    internal static HttpVersion GetKnownVersion(Byte* location, int length);
    [ExtensionAttribute]
public static bool GetKnownHttpScheme(Span`1<byte> span, HttpScheme& knownScheme);
    private static bool GetKnownHttpScheme(Byte* location, int length, HttpScheme& knownScheme);
    public static string VersionToString(HttpVersion httpVersion);
    public static string MethodToString(HttpMethod method);
    public static string SchemeToString(HttpScheme scheme);
    public static void ValidateHostHeader(string hostText);
    private static void ValidateIPv6Host(string hostText);
    private static void ValidateHostPort(string hostText, int offset);
    private static bool IsNumeric(char ch);
    private static bool IsHex(char ch);
    private static int GetKnownMethodIndex(ulong value);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.IDebugger {
    public bool IsAttached { get; }
    public abstract virtual bool get_IsAttached();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.IHeartbeatHandler {
    public abstract virtual void OnHeartbeat(DateTimeOffset now);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.IKestrelTrace {
    public abstract virtual void ConnectionStart(string connectionId);
    public abstract virtual void ConnectionStop(string connectionId);
    public abstract virtual void ConnectionPause(string connectionId);
    public abstract virtual void ConnectionResume(string connectionId);
    public abstract virtual void ConnectionRejected(string connectionId);
    public abstract virtual void ConnectionKeepAlive(string connectionId);
    public abstract virtual void ConnectionDisconnect(string connectionId);
    public abstract virtual void RequestProcessingError(string connectionId, Exception ex);
    public abstract virtual void ConnectionHeadResponseBodyWrite(string connectionId, long count);
    public abstract virtual void NotAllConnectionsClosedGracefully();
    public abstract virtual void ConnectionBadRequest(string connectionId, BadHttpRequestException ex);
    public abstract virtual void ApplicationError(string connectionId, string traceIdentifier, Exception ex);
    public abstract virtual void NotAllConnectionsAborted();
    public abstract virtual void HeartbeatSlow(TimeSpan interval, DateTimeOffset now);
    public abstract virtual void ApplicationNeverCompleted(string connectionId);
    public abstract virtual void RequestBodyStart(string connectionId, string traceIdentifier);
    public abstract virtual void RequestBodyDone(string connectionId, string traceIdentifier);
    public abstract virtual void RequestBodyNotEntirelyRead(string connectionId, string traceIdentifier);
    public abstract virtual void RequestBodyDrainTimedOut(string connectionId, string traceIdentifier);
    public abstract virtual void RequestBodyMininumDataRateNotSatisfied(string connectionId, string traceIdentifier, double rate);
    public abstract virtual void ResponseMininumDataRateNotSatisfied(string connectionId, string traceIdentifier);
    public abstract virtual void Http2ConnectionError(string connectionId, Http2ConnectionErrorException ex);
    public abstract virtual void Http2StreamError(string connectionId, Http2StreamErrorException ex);
    public abstract virtual void HPackDecodingError(string connectionId, int streamId, HPackDecodingException ex);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ITimeoutControl {
    public abstract virtual void SetTimeout(long ticks, TimeoutAction timeoutAction);
    public abstract virtual void ResetTimeout(long ticks, TimeoutAction timeoutAction);
    public abstract virtual void CancelTimeout();
    public abstract virtual void StartTimingReads();
    public abstract virtual void PauseTimingReads();
    public abstract virtual void ResumeTimingReads();
    public abstract virtual void StopTimingReads();
    public abstract virtual void BytesRead(long count);
    public abstract virtual void StartTimingWrite(long size);
    public abstract virtual void StopTimingWrite();
}
[EventSourceAttribute]
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.KestrelEventSource : EventSource {
    public static KestrelEventSource Log;
    private static KestrelEventSource();
    [NonEventAttribute]
public void ConnectionStart(HttpConnection connection);
    [EventAttribute("1")]
private void ConnectionStart(string connectionId, string localEndPoint, string remoteEndPoint);
    [NonEventAttribute]
public void ConnectionStop(HttpConnection connection);
    [EventAttribute("2")]
private void ConnectionStop(string connectionId);
    [EventAttribute("5")]
public void ConnectionRejected(string connectionId);
    [NonEventAttribute]
public void RequestStart(HttpProtocol httpProtocol);
    [EventAttribute("3")]
private void RequestStart(string connectionId, string requestId);
    [NonEventAttribute]
public void RequestStop(HttpProtocol httpProtocol);
    [EventAttribute("4")]
private void RequestStop(string connectionId, string requestId);
}
public abstract class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ReadOnlyStream : Stream {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public int WriteTimeout { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
}
public abstract class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ResourceCounter : object {
    [CompilerGeneratedAttribute]
private static ResourceCounter <Unlimited>k__BackingField;
    public static ResourceCounter Unlimited { get; }
    private static ResourceCounter();
    public abstract virtual bool TryLockOne();
    public abstract virtual void ReleaseOne();
    [CompilerGeneratedAttribute]
public static ResourceCounter get_Unlimited();
    public static ResourceCounter Quota(long amount);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.Streams : object {
    private static ThrowingWriteOnlyStream _throwingResponseStream;
    private HttpResponseStream _response;
    private HttpRequestStream _request;
    private WrappingStream _upgradeableResponse;
    private HttpRequestStream _emptyRequest;
    private Stream _upgradeStream;
    public Streams(IHttpBodyControlFeature bodyControl, IHttpResponseControl httpResponseControl);
    private static Streams();
    public Stream Upgrade();
    public ValueTuple`2<Stream, Stream> Start(MessageBody body);
    public void Stop();
    public void Abort(Exception error);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.StringUtilities : object {
    private static string _encode16Chars;
    private static StringUtilities();
    public static bool TryGetAsciiString(Byte* input, Char* output, int count);
    public static string ConcatAsHexSuffix(string str, char separator, UInt32 number);
    private static bool CheckBytesInAsciiRange(Vector`1<sbyte> check);
    private static bool CheckBytesInAsciiRange(long check);
    private static bool CheckBytesInAsciiRange(int check);
    private static bool CheckBytesInAsciiRange(short check);
    private static bool CheckBytesInAsciiRange(sbyte check);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.SystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.ThrowingWriteOnlyStream : WriteOnlyStream {
    private Exception _exception;
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ThrowingWriteOnlyStream(Exception exception);
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
public enum Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.TimeoutAction : Enum {
    public int value__;
    public static TimeoutAction StopProcessingNextRequest;
    public static TimeoutAction SendTimeoutResponse;
    public static TimeoutAction AbortConnection;
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.UriUtilities : object {
    public static bool IsValidAuthorityCharacter(byte ch);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.WrappingStream : Stream {
    private Stream _inner;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public bool CanTimeout { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public WrappingStream(Stream inner);
    public void SetInnerStream(Stream inner);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual bool get_CanTimeout();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual object InitializeLifetimeService();
    public virtual void Close();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
}
public abstract class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.WriteOnlyStream : Stream {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public int ReadTimeout { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Core.Internal.IRequestProcessor {
    public abstract virtual Task ProcessRequestsAsync(IHttpApplication`1<TContext> application);
    public abstract virtual void StopProcessingNextRequest();
    public abstract virtual void Abort(Exception ex);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.KestrelServerOptionsSetup : object {
    private IServiceProvider _services;
    public KestrelServerOptionsSetup(IServiceProvider services);
    public sealed virtual void Configure(KestrelServerOptions options);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.KestrelTrace : object {
    private static Action`3<ILogger, string, Exception> _connectionStart;
    private static Action`3<ILogger, string, Exception> _connectionStop;
    private static Action`3<ILogger, string, Exception> _connectionPause;
    private static Action`3<ILogger, string, Exception> _connectionResume;
    private static Action`3<ILogger, string, Exception> _connectionKeepAlive;
    private static Action`3<ILogger, string, Exception> _connectionDisconnect;
    private static Action`4<ILogger, string, string, Exception> _applicationError;
    private static Action`2<ILogger, Exception> _notAllConnectionsClosedGracefully;
    private static Action`4<ILogger, string, string, Exception> _connectionBadRequest;
    private static Action`4<ILogger, string, long, Exception> _connectionHeadResponseBodyWrite;
    private static Action`3<ILogger, string, Exception> _requestProcessingError;
    private static Action`2<ILogger, Exception> _notAllConnectionsAborted;
    private static Action`4<ILogger, TimeSpan, DateTimeOffset, Exception> _heartbeatSlow;
    private static Action`3<ILogger, string, Exception> _applicationNeverCompleted;
    private static Action`3<ILogger, string, Exception> _connectionRejected;
    private static Action`4<ILogger, string, string, Exception> _requestBodyStart;
    private static Action`4<ILogger, string, string, Exception> _requestBodyDone;
    private static Action`5<ILogger, string, string, double, Exception> _requestBodyMinimumDataRateNotSatisfied;
    private static Action`4<ILogger, string, string, Exception> _requestBodyNotEntirelyRead;
    private static Action`4<ILogger, string, string, Exception> _requestBodyDrainTimedOut;
    private static Action`4<ILogger, string, string, Exception> _responseMinimumDataRateNotSatisfied;
    private static Action`3<ILogger, string, Exception> _http2ConnectionError;
    private static Action`3<ILogger, string, Exception> _http2StreamError;
    private static Action`4<ILogger, string, int, Exception> _hpackDecodingError;
    protected ILogger _logger;
    public KestrelTrace(ILogger logger);
    private static KestrelTrace();
    public virtual void ConnectionStart(string connectionId);
    public virtual void ConnectionStop(string connectionId);
    public virtual void ConnectionPause(string connectionId);
    public virtual void ConnectionResume(string connectionId);
    public virtual void ConnectionKeepAlive(string connectionId);
    public virtual void ConnectionRejected(string connectionId);
    public virtual void ConnectionDisconnect(string connectionId);
    public virtual void ApplicationError(string connectionId, string traceIdentifier, Exception ex);
    public virtual void ConnectionHeadResponseBodyWrite(string connectionId, long count);
    public virtual void NotAllConnectionsClosedGracefully();
    public virtual void ConnectionBadRequest(string connectionId, BadHttpRequestException ex);
    public virtual void RequestProcessingError(string connectionId, Exception ex);
    public virtual void NotAllConnectionsAborted();
    public virtual void HeartbeatSlow(TimeSpan interval, DateTimeOffset now);
    public virtual void ApplicationNeverCompleted(string connectionId);
    public virtual void RequestBodyStart(string connectionId, string traceIdentifier);
    public virtual void RequestBodyDone(string connectionId, string traceIdentifier);
    public virtual void RequestBodyMininumDataRateNotSatisfied(string connectionId, string traceIdentifier, double rate);
    public virtual void RequestBodyNotEntirelyRead(string connectionId, string traceIdentifier);
    public virtual void RequestBodyDrainTimedOut(string connectionId, string traceIdentifier);
    public virtual void ResponseMininumDataRateNotSatisfied(string connectionId, string traceIdentifier);
    public virtual void Http2ConnectionError(string connectionId, Http2ConnectionErrorException ex);
    public virtual void Http2StreamError(string connectionId, Http2StreamErrorException ex);
    public virtual void HPackDecodingError(string connectionId, int streamId, HPackDecodingException ex);
    public virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public virtual bool IsEnabled(LogLevel logLevel);
    public virtual IDisposable BeginScope(TState state);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ServerAddressesFeature : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferHostingUrls>k__BackingField;
    public ICollection`1<string> Addresses { get; }
    public bool PreferHostingUrls { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<string> get_Addresses();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PreferHostingUrls();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PreferHostingUrls(bool value);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.Internal.ServiceContext : object {
    [CompilerGeneratedAttribute]
private IKestrelTrace <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpParser`1<Http1ParsingHandler> <HttpParser>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemClock <SystemClock>k__BackingField;
    [CompilerGeneratedAttribute]
private DateHeaderValueManager <DateHeaderValueManager>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpConnectionManager <ConnectionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private KestrelServerOptions <ServerOptions>k__BackingField;
    public IKestrelTrace Log { get; public set; }
    public PipeScheduler Scheduler { get; public set; }
    public IHttpParser`1<Http1ParsingHandler> HttpParser { get; public set; }
    public ISystemClock SystemClock { get; public set; }
    public DateHeaderValueManager DateHeaderValueManager { get; public set; }
    public HttpConnectionManager ConnectionManager { get; public set; }
    public KestrelServerOptions ServerOptions { get; public set; }
    [CompilerGeneratedAttribute]
public IKestrelTrace get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(IKestrelTrace value);
    [CompilerGeneratedAttribute]
public PipeScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public void set_Scheduler(PipeScheduler value);
    [CompilerGeneratedAttribute]
public IHttpParser`1<Http1ParsingHandler> get_HttpParser();
    [CompilerGeneratedAttribute]
public void set_HttpParser(IHttpParser`1<Http1ParsingHandler> value);
    [CompilerGeneratedAttribute]
public ISystemClock get_SystemClock();
    [CompilerGeneratedAttribute]
public void set_SystemClock(ISystemClock value);
    [CompilerGeneratedAttribute]
public DateHeaderValueManager get_DateHeaderValueManager();
    [CompilerGeneratedAttribute]
public void set_DateHeaderValueManager(DateHeaderValueManager value);
    [CompilerGeneratedAttribute]
public HttpConnectionManager get_ConnectionManager();
    [CompilerGeneratedAttribute]
public void set_ConnectionManager(HttpConnectionManager value);
    [CompilerGeneratedAttribute]
public KestrelServerOptions get_ServerOptions();
    [CompilerGeneratedAttribute]
public void set_ServerOptions(KestrelServerOptions value);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer : object {
    private List`1<ITransport> _transports;
    private Heartbeat _heartbeat;
    private IServerAddressesFeature _serverAddresses;
    private ITransportFactory _transportFactory;
    private bool _hasStarted;
    private int _stopping;
    private TaskCompletionSource`1<object> _stoppedTcs;
    [CompilerGeneratedAttribute]
private IFeatureCollection <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceContext <ServiceContext>k__BackingField;
    public IFeatureCollection Features { get; }
    public KestrelServerOptions Options { get; }
    private ServiceContext ServiceContext { get; }
    private IKestrelTrace Trace { get; }
    private HttpConnectionManager ConnectionManager { get; }
    public KestrelServer(IOptions`1<KestrelServerOptions> options, ITransportFactory transportFactory, ILoggerFactory loggerFactory);
    internal KestrelServer(ITransportFactory transportFactory, ServiceContext serviceContext);
    private static ServiceContext CreateServiceContext(IOptions`1<KestrelServerOptions> options, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public sealed virtual IFeatureCollection get_Features();
    public KestrelServerOptions get_Options();
    [CompilerGeneratedAttribute]
private ServiceContext get_ServiceContext();
    private IKestrelTrace get_Trace();
    private HttpConnectionManager get_ConnectionManager();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer/<StartAsync>d__22`1")]
public sealed virtual Task StartAsync(IHttpApplication`1<TContext> application, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer/<StopAsync>d__23")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private void ValidateOptions();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerLimits : object {
    private Nullable`1<long> _maxResponseBufferSize;
    private Nullable`1<long> _maxRequestBufferSize;
    private int _maxRequestLineSize;
    private int _maxRequestHeadersTotalSize;
    private Nullable`1<long> _maxRequestBodySize;
    private int _maxRequestHeaderCount;
    private TimeSpan _keepAliveTimeout;
    private TimeSpan _requestHeadersTimeout;
    private Nullable`1<long> _maxConcurrentConnections;
    private Nullable`1<long> _maxConcurrentUpgradedConnections;
    [CompilerGeneratedAttribute]
private MinDataRate <MinRequestBodyDataRate>k__BackingField;
    [CompilerGeneratedAttribute]
private MinDataRate <MinResponseDataRate>k__BackingField;
    public Nullable`1<long> MaxResponseBufferSize { get; public set; }
    public Nullable`1<long> MaxRequestBufferSize { get; public set; }
    public int MaxRequestLineSize { get; public set; }
    public int MaxRequestHeadersTotalSize { get; public set; }
    public int MaxRequestHeaderCount { get; public set; }
    public Nullable`1<long> MaxRequestBodySize { get; public set; }
    public TimeSpan KeepAliveTimeout { get; public set; }
    public TimeSpan RequestHeadersTimeout { get; public set; }
    public Nullable`1<long> MaxConcurrentConnections { get; public set; }
    public Nullable`1<long> MaxConcurrentUpgradedConnections { get; public set; }
    public MinDataRate MinRequestBodyDataRate { get; public set; }
    public MinDataRate MinResponseDataRate { get; public set; }
    public Nullable`1<long> get_MaxResponseBufferSize();
    public void set_MaxResponseBufferSize(Nullable`1<long> value);
    public Nullable`1<long> get_MaxRequestBufferSize();
    public void set_MaxRequestBufferSize(Nullable`1<long> value);
    public int get_MaxRequestLineSize();
    public void set_MaxRequestLineSize(int value);
    public int get_MaxRequestHeadersTotalSize();
    public void set_MaxRequestHeadersTotalSize(int value);
    public int get_MaxRequestHeaderCount();
    public void set_MaxRequestHeaderCount(int value);
    public Nullable`1<long> get_MaxRequestBodySize();
    public void set_MaxRequestBodySize(Nullable`1<long> value);
    public TimeSpan get_KeepAliveTimeout();
    public void set_KeepAliveTimeout(TimeSpan value);
    public TimeSpan get_RequestHeadersTimeout();
    public void set_RequestHeadersTimeout(TimeSpan value);
    public Nullable`1<long> get_MaxConcurrentConnections();
    public void set_MaxConcurrentConnections(Nullable`1<long> value);
    public Nullable`1<long> get_MaxConcurrentUpgradedConnections();
    public void set_MaxConcurrentUpgradedConnections(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public MinDataRate get_MinRequestBodyDataRate();
    [CompilerGeneratedAttribute]
public void set_MinRequestBodyDataRate(MinDataRate value);
    [CompilerGeneratedAttribute]
public MinDataRate get_MinResponseDataRate();
    [CompilerGeneratedAttribute]
public void set_MinResponseDataRate(MinDataRate value);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerOptions : object {
    [CompilerGeneratedAttribute]
private List`1<ListenOptions> <ListenOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddServerHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private SchedulingMode <ApplicationSchedulingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSynchronousIO>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ApplicationServices>k__BackingField;
    [CompilerGeneratedAttribute]
private KestrelServerLimits <Limits>k__BackingField;
    [CompilerGeneratedAttribute]
private KestrelConfigurationLoader <ConfigurationLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ListenOptions> <EndpointDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HttpsConnectionAdapterOptions> <HttpsDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <DefaultCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDevCertLoaded>k__BackingField;
    internal List`1<ListenOptions> ListenOptions { get; }
    public bool AddServerHeader { get; public set; }
    public SchedulingMode ApplicationSchedulingMode { get; public set; }
    public bool AllowSynchronousIO { get; public set; }
    public IServiceProvider ApplicationServices { get; public set; }
    public KestrelServerLimits Limits { get; }
    public KestrelConfigurationLoader ConfigurationLoader { get; public set; }
    private Action`1<ListenOptions> EndpointDefaults { get; private set; }
    private Action`1<HttpsConnectionAdapterOptions> HttpsDefaults { get; private set; }
    internal X509Certificate2 DefaultCertificate { get; internal set; }
    internal bool IsDevCertLoaded { get; internal set; }
    [CompilerGeneratedAttribute]
internal List`1<ListenOptions> get_ListenOptions();
    [CompilerGeneratedAttribute]
public bool get_AddServerHeader();
    [CompilerGeneratedAttribute]
public void set_AddServerHeader(bool value);
    [CompilerGeneratedAttribute]
public SchedulingMode get_ApplicationSchedulingMode();
    [CompilerGeneratedAttribute]
public void set_ApplicationSchedulingMode(SchedulingMode value);
    [CompilerGeneratedAttribute]
public bool get_AllowSynchronousIO();
    [CompilerGeneratedAttribute]
public void set_AllowSynchronousIO(bool value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ApplicationServices();
    [CompilerGeneratedAttribute]
public void set_ApplicationServices(IServiceProvider value);
    [CompilerGeneratedAttribute]
public KestrelServerLimits get_Limits();
    [CompilerGeneratedAttribute]
public KestrelConfigurationLoader get_ConfigurationLoader();
    [CompilerGeneratedAttribute]
public void set_ConfigurationLoader(KestrelConfigurationLoader value);
    [CompilerGeneratedAttribute]
private Action`1<ListenOptions> get_EndpointDefaults();
    [CompilerGeneratedAttribute]
private void set_EndpointDefaults(Action`1<ListenOptions> value);
    [CompilerGeneratedAttribute]
private Action`1<HttpsConnectionAdapterOptions> get_HttpsDefaults();
    [CompilerGeneratedAttribute]
private void set_HttpsDefaults(Action`1<HttpsConnectionAdapterOptions> value);
    [CompilerGeneratedAttribute]
internal X509Certificate2 get_DefaultCertificate();
    [CompilerGeneratedAttribute]
internal void set_DefaultCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
internal bool get_IsDevCertLoaded();
    [CompilerGeneratedAttribute]
internal void set_IsDevCertLoaded(bool value);
    public void ConfigureEndpointDefaults(Action`1<ListenOptions> configureOptions);
    internal void ApplyEndpointDefaults(ListenOptions listenOptions);
    public void ConfigureHttpsDefaults(Action`1<HttpsConnectionAdapterOptions> configureOptions);
    internal void ApplyHttpsDefaults(HttpsConnectionAdapterOptions httpsOptions);
    internal void ApplyDefaultCert(HttpsConnectionAdapterOptions httpsOptions);
    private void EnsureDefaultCert();
    public KestrelConfigurationLoader Configure();
    public KestrelConfigurationLoader Configure(IConfiguration config);
    public void Listen(IPAddress address, int port);
    public void Listen(IPAddress address, int port, Action`1<ListenOptions> configure);
    public void Listen(IPEndPoint endPoint);
    public void Listen(IPEndPoint endPoint, Action`1<ListenOptions> configure);
    public void ListenLocalhost(int port);
    public void ListenLocalhost(int port, Action`1<ListenOptions> configure);
    public void ListenAnyIP(int port);
    public void ListenAnyIP(int port, Action`1<ListenOptions> configure);
    public void ListenUnixSocket(string socketPath);
    public void ListenUnixSocket(string socketPath, Action`1<ListenOptions> configure);
    public void ListenHandle(ulong handle);
    public void ListenHandle(ulong handle, Action`1<ListenOptions> configure);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions : object {
    private FileHandleType _handleType;
    internal List`1<Func`2<ConnectionDelegate, ConnectionDelegate>> _middleware;
    [CompilerGeneratedAttribute]
private ListenType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <IPEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SocketPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <FileHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private KestrelServerOptions <KestrelServerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpProtocols <Protocols>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IConnectionAdapter> <ConnectionAdapters>k__BackingField;
    public ListenType Type { get; }
    public FileHandleType HandleType { get; public set; }
    public IPEndPoint IPEndPoint { get; public set; }
    public string SocketPath { get; }
    public ulong FileHandle { get; }
    public KestrelServerOptions KestrelServerOptions { get; internal set; }
    public bool NoDelay { get; public set; }
    internal HttpProtocols Protocols { get; internal set; }
    public List`1<IConnectionAdapter> ConnectionAdapters { get; }
    public IServiceProvider ApplicationServices { get; }
    internal ListenOptions(IPEndPoint endPoint);
    internal ListenOptions(string socketPath);
    internal ListenOptions(ulong fileHandle);
    internal ListenOptions(ulong fileHandle, FileHandleType handleType);
    [CompilerGeneratedAttribute]
public sealed virtual ListenType get_Type();
    public sealed virtual FileHandleType get_HandleType();
    public sealed virtual void set_HandleType(FileHandleType value);
    [CompilerGeneratedAttribute]
public sealed virtual IPEndPoint get_IPEndPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IPEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SocketPath();
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_FileHandle();
    [CompilerGeneratedAttribute]
public KestrelServerOptions get_KestrelServerOptions();
    [CompilerGeneratedAttribute]
internal void set_KestrelServerOptions(KestrelServerOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_NoDelay();
    [CompilerGeneratedAttribute]
public void set_NoDelay(bool value);
    [CompilerGeneratedAttribute]
internal HttpProtocols get_Protocols();
    [CompilerGeneratedAttribute]
internal void set_Protocols(HttpProtocols value);
    [CompilerGeneratedAttribute]
public List`1<IConnectionAdapter> get_ConnectionAdapters();
    public sealed virtual IServiceProvider get_ApplicationServices();
    internal virtual string GetDisplayName();
    public virtual string ToString();
    public sealed virtual IConnectionBuilder Use(Func`2<ConnectionDelegate, ConnectionDelegate> middleware);
    public sealed virtual ConnectionDelegate Build();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions/<BindAsync>d__43")]
internal virtual Task BindAsync(AddressBindContext context);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Core.LocalhostListenOptions : ListenOptions {
    internal LocalhostListenOptions(int port);
    internal virtual string GetDisplayName();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Core.LocalhostListenOptions/<BindAsync>d__2")]
internal virtual Task BindAsync(AddressBindContext context);
    internal ListenOptions Clone(IPAddress address);
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.MinDataRate : object {
    [CompilerGeneratedAttribute]
private double <BytesPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <GracePeriod>k__BackingField;
    public double BytesPerSecond { get; }
    public TimeSpan GracePeriod { get; }
    public MinDataRate(double bytesPerSecond, TimeSpan gracePeriod);
    [CompilerGeneratedAttribute]
public double get_BytesPerSecond();
    [CompilerGeneratedAttribute]
public TimeSpan get_GracePeriod();
}
public class Microsoft.AspNetCore.Server.Kestrel.Core.ServerAddress : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    public string Host { get; private set; }
    public string PathBase { get; private set; }
    public int Port { get; internal set; }
    public string Scheme { get; private set; }
    public bool IsUnixPipe { get; }
    public string UnixPipePath { get; }
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_PathBase();
    [CompilerGeneratedAttribute]
private void set_PathBase(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
internal void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    [CompilerGeneratedAttribute]
private void set_Scheme(string value);
    public bool get_IsUnixPipe();
    public string get_UnixPipePath();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static ServerAddress FromUrl(string url);
}
public class Microsoft.AspNetCore.Server.Kestrel.EndpointConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsHttps>k__BackingField;
    [CompilerGeneratedAttribute]
private ListenOptions <ListenOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpsConnectionAdapterOptions <HttpsOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationSection <ConfigSection>k__BackingField;
    public bool IsHttps { get; }
    public ListenOptions ListenOptions { get; }
    public HttpsConnectionAdapterOptions HttpsOptions { get; }
    public IConfigurationSection ConfigSection { get; }
    internal EndpointConfiguration(bool isHttps, ListenOptions listenOptions, HttpsConnectionAdapterOptions httpsOptions, IConfigurationSection configSection);
    [CompilerGeneratedAttribute]
public bool get_IsHttps();
    [CompilerGeneratedAttribute]
public ListenOptions get_ListenOptions();
    [CompilerGeneratedAttribute]
public HttpsConnectionAdapterOptions get_HttpsOptions();
    [CompilerGeneratedAttribute]
public IConfigurationSection get_ConfigSection();
}
public enum Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode : Enum {
    public int value__;
    public static ClientCertificateMode NoCertificate;
    public static ClientCertificateMode AllowCertificate;
    public static ClientCertificateMode RequireCertificate;
}
public class Microsoft.AspNetCore.Server.Kestrel.Https.HttpsConnectionAdapterOptions : object {
    private TimeSpan _handshakeTimeout;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ServerCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<ConnectionContext, string, X509Certificate2> <ServerCertificateSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCertificateMode <ClientCertificateMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> <ClientCertificateValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <SslProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpProtocols <HttpProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckCertificateRevocation>k__BackingField;
    public X509Certificate2 ServerCertificate { get; public set; }
    public Func`3<ConnectionContext, string, X509Certificate2> ServerCertificateSelector { get; public set; }
    public ClientCertificateMode ClientCertificateMode { get; public set; }
    public Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> ClientCertificateValidation { get; public set; }
    public SslProtocols SslProtocols { get; public set; }
    internal HttpProtocols HttpProtocols { get; internal set; }
    public bool CheckCertificateRevocation { get; public set; }
    public TimeSpan HandshakeTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ServerCertificate();
    [CompilerGeneratedAttribute]
public void set_ServerCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public Func`3<ConnectionContext, string, X509Certificate2> get_ServerCertificateSelector();
    [CompilerGeneratedAttribute]
public void set_ServerCertificateSelector(Func`3<ConnectionContext, string, X509Certificate2> value);
    [CompilerGeneratedAttribute]
public ClientCertificateMode get_ClientCertificateMode();
    [CompilerGeneratedAttribute]
public void set_ClientCertificateMode(ClientCertificateMode value);
    [CompilerGeneratedAttribute]
public Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> get_ClientCertificateValidation();
    [CompilerGeneratedAttribute]
public void set_ClientCertificateValidation(Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> value);
    [CompilerGeneratedAttribute]
public SslProtocols get_SslProtocols();
    [CompilerGeneratedAttribute]
public void set_SslProtocols(SslProtocols value);
    [CompilerGeneratedAttribute]
internal HttpProtocols get_HttpProtocols();
    [CompilerGeneratedAttribute]
internal void set_HttpProtocols(HttpProtocols value);
    [CompilerGeneratedAttribute]
public bool get_CheckCertificateRevocation();
    [CompilerGeneratedAttribute]
public void set_CheckCertificateRevocation(bool value);
    public TimeSpan get_HandshakeTimeout();
    public void set_HandshakeTimeout(TimeSpan value);
}
public static class Microsoft.AspNetCore.Server.Kestrel.Https.Internal.CertificateLoader : object {
    private static string ServerAuthenticationOid;
    public static X509Certificate2 LoadFromStoreCert(string subject, string storeName, StoreLocation storeLocation, bool allowInvalid);
    internal static bool IsCertificateAllowedForServerAuth(X509Certificate2 certificate);
    private static void DisposeCertificates(X509Certificate2Collection certificates, X509Certificate2 except);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Https.Internal.ClosedStream : Stream {
    private static Task`1<int> ZeroResultTask;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private static ClosedStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
public class Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter : object {
    private static ClosedAdaptedConnection _closedAdaptedConnection;
    private HttpsConnectionAdapterOptions _options;
    private X509Certificate2 _serverCertificate;
    private Func`3<ConnectionContext, string, X509Certificate2> _serverCertificateSelector;
    private ILogger _logger;
    public bool IsHttps { get; }
    public HttpsConnectionAdapter(HttpsConnectionAdapterOptions options);
    public HttpsConnectionAdapter(HttpsConnectionAdapterOptions options, ILoggerFactory loggerFactory);
    private static HttpsConnectionAdapter();
    public sealed virtual bool get_IsHttps();
    public sealed virtual Task`1<IAdaptedConnection> OnConnectionAsync(ConnectionAdapterContext context);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter/<InnerOnConnectionAsync>d__10")]
private Task`1<IAdaptedConnection> InnerOnConnectionAsync(ConnectionAdapterContext context);
    private static void EnsureCertificateIsAllowedForServerAuth(X509Certificate2 certificate);
    private static X509Certificate2 ConvertToX509Certificate2(X509Certificate certificate);
}
internal class Microsoft.AspNetCore.Server.Kestrel.Https.Internal.TlsConnectionFeature : object {
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <ApplicationProtocol>k__BackingField;
    public X509Certificate2 ClientCertificate { get; public set; }
    public ReadOnlyMemory`1<byte> ApplicationProtocol { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public sealed virtual ReadOnlyMemory`1<byte> get_ApplicationProtocol();
    [CompilerGeneratedAttribute]
public void set_ApplicationProtocol(ReadOnlyMemory`1<byte> value);
    public sealed virtual Task`1<X509Certificate2> GetClientCertificateAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.Server.Kestrel.Internal.LoggerExtensions : object {
    private static Action`4<ILogger, string, string, Exception> _locatedDevelopmentCertificate;
    private static Action`2<ILogger, Exception> _unableToLocateDevelopmentCertificate;
    private static Action`3<ILogger, string, Exception> _failedToLocateDevelopmentCertificateFile;
    private static Action`3<ILogger, string, Exception> _failedToLoadDevelopmentCertificate;
    private static LoggerExtensions();
    [ExtensionAttribute]
public static void LocatedDevelopmentCertificate(ILogger logger, X509Certificate2 certificate);
    [ExtensionAttribute]
public static void UnableToLocateDevelopmentCertificate(ILogger logger);
    [ExtensionAttribute]
public static void FailedToLocateDevelopmentCertificateFile(ILogger logger, string certificatePath);
    [ExtensionAttribute]
public static void FailedToLoadDevelopmentCertificate(ILogger logger, string certificatePath);
}
public class Microsoft.AspNetCore.Server.Kestrel.KestrelConfigurationLoader : object {
    [CompilerGeneratedAttribute]
private KestrelServerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Action`1<EndpointConfiguration>> <EndpointConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Action> <EndpointsToAdd>k__BackingField;
    public KestrelServerOptions Options { get; }
    public IConfiguration Configuration { get; }
    private IDictionary`2<string, Action`1<EndpointConfiguration>> EndpointConfigurations { get; }
    private IList`1<Action> EndpointsToAdd { get; }
    internal KestrelConfigurationLoader(KestrelServerOptions options, IConfiguration configuration);
    [CompilerGeneratedAttribute]
public KestrelServerOptions get_Options();
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Action`1<EndpointConfiguration>> get_EndpointConfigurations();
    [CompilerGeneratedAttribute]
private IList`1<Action> get_EndpointsToAdd();
    public KestrelConfigurationLoader Endpoint(string name, Action`1<EndpointConfiguration> configureOptions);
    public KestrelConfigurationLoader Endpoint(IPAddress address, int port);
    public KestrelConfigurationLoader Endpoint(IPAddress address, int port, Action`1<ListenOptions> configure);
    public KestrelConfigurationLoader Endpoint(IPEndPoint endPoint);
    public KestrelConfigurationLoader Endpoint(IPEndPoint endPoint, Action`1<ListenOptions> configure);
    public KestrelConfigurationLoader LocalhostEndpoint(int port);
    public KestrelConfigurationLoader LocalhostEndpoint(int port, Action`1<ListenOptions> configure);
    public KestrelConfigurationLoader AnyIPEndpoint(int port);
    public KestrelConfigurationLoader AnyIPEndpoint(int port, Action`1<ListenOptions> configure);
    public KestrelConfigurationLoader UnixSocketEndpoint(string socketPath);
    public KestrelConfigurationLoader UnixSocketEndpoint(string socketPath, Action`1<ListenOptions> configure);
    public KestrelConfigurationLoader HandleEndpoint(ulong handle);
    public KestrelConfigurationLoader HandleEndpoint(ulong handle, Action`1<ListenOptions> configure);
    public void Load();
    private void LoadDefaultCert(ConfigurationReader configReader);
    private X509Certificate2 FindDeveloperCertificateFile(ConfigurationReader configReader, ILogger`1<KestrelServer> logger);
    private bool IsDevelopmentCertificate(X509Certificate2 certificate);
    private bool TryGetCertificatePath(String& path);
    private X509Certificate2 LoadCertificate(CertificateConfig certInfo, string endpointName);
    private static X509Certificate2 LoadFromStoreCert(CertificateConfig certInfo);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Buffers.BufferReader : ValueType {
    private ReadOnlySpan`1<byte> _currentSpan;
    private int _index;
    private ReadOnlySequence`1<byte> _sequence;
    private SequencePosition _currentSequencePosition;
    private SequencePosition _nextSequencePosition;
    private int _consumedBytes;
    private bool _end;
    public bool End { get; }
    public int CurrentSegmentIndex { get; }
    public SequencePosition Position { get; }
    public ReadOnlySpan`1<byte> CurrentSegment { get; }
    public ReadOnlySpan`1<byte> UnreadSegment { get; }
    public int ConsumedBytes { get; }
    public BufferReader(ReadOnlySequence`1<byte> buffer);
    public bool get_End();
    public int get_CurrentSegmentIndex();
    public SequencePosition get_Position();
    public ReadOnlySpan`1<byte> get_CurrentSegment();
    public ReadOnlySpan`1<byte> get_UnreadSegment();
    public int get_ConsumedBytes();
    public int Peek();
    public int Read();
    private void MoveNext();
    public void Advance(int byteCount);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Buffers.BufferWriter`1 : ValueType {
    private T _output;
    private Span`1<byte> _span;
    private int _buffered;
    public Span`1<byte> Span { get; }
    public BufferWriter`1(T output);
    public Span`1<byte> get_Span();
    public void Commit();
    public void Advance(int count);
    public void Write(ReadOnlySpan`1<byte> source);
    public void Ensure(int count);
    private void EnsureMore(int count);
    private void WriteMultiBuffer(ReadOnlySpan`1<byte> source);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Buffers.CountingBufferWriter`1 : ValueType {
    private T _output;
    private Span`1<byte> _span;
    private int _buffered;
    private long _bytesCommitted;
    public Span`1<byte> Span { get; }
    public long BytesCommitted { get; }
    public CountingBufferWriter`1(T output);
    public Span`1<byte> get_Span();
    public long get_BytesCommitted();
    public void Commit();
    public void Advance(int count);
    public void Write(ReadOnlySpan`1<byte> source);
    public void Ensure(int count);
    private void EnsureMore(int count);
    private void WriteMultiBuffer(ReadOnlySpan`1<byte> source);
}
internal enum System.Buffers.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument size;
    public static ExceptionArgument offset;
    public static ExceptionArgument length;
    public static ExceptionArgument MemoryPoolBlock;
}
internal class System.Buffers.MemoryPoolBlock : object {
    private int _offset;
    private int _length;
    [CompilerGeneratedAttribute]
private SlabMemoryPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPoolSlab <Slab>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Memory>k__BackingField;
    public SlabMemoryPool Pool { get; }
    public MemoryPoolSlab Slab { get; }
    public Memory`1<byte> Memory { get; }
    internal MemoryPoolBlock(SlabMemoryPool pool, MemoryPoolSlab slab, int offset, int length);
    [CompilerGeneratedAttribute]
public SlabMemoryPool get_Pool();
    [CompilerGeneratedAttribute]
public MemoryPoolSlab get_Slab();
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void Lease();
}
internal class System.Buffers.MemoryPoolSlab : object {
    private GCHandle _gcHandle;
    private IntPtr _nativePointer;
    private Byte[] _data;
    private bool _isActive;
    private bool _disposedValue;
    public bool IsActive { get; }
    public IntPtr NativePointer { get; }
    public Byte[] Array { get; }
    public int Length { get; }
    public MemoryPoolSlab(Byte[] data);
    public bool get_IsActive();
    public IntPtr get_NativePointer();
    public Byte[] get_Array();
    public int get_Length();
    public static MemoryPoolSlab Create(int length);
    protected void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
internal class System.Buffers.SlabMemoryPool : MemoryPool`1<byte> {
    private static int _blockSize;
    private static int _blockCount;
    [CompilerGeneratedAttribute]
private int <MaxBufferSize>k__BackingField;
    private static int _slabLength;
    private ConcurrentQueue`1<MemoryPoolBlock> _blocks;
    private ConcurrentStack`1<MemoryPoolSlab> _slabs;
    private bool _disposedValue;
    private static int AnySize;
    public int MaxBufferSize { get; }
    private static SlabMemoryPool();
    [CompilerGeneratedAttribute]
public virtual int get_MaxBufferSize();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    private MemoryPoolBlock Lease();
    private MemoryPoolBlock AllocateSlab();
    internal void Return(MemoryPoolBlock block);
    protected virtual void Dispose(bool disposing);
}
internal class System.Buffers.ThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(int sourceLength, int offset);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(int sourceLength, int offset);
    public static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    public static void ThrowInvalidOperationException_ReferenceCountZero();
    public static void ThrowInvalidOperationException_ReturningPinnedBlock();
    public static void ThrowArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    public static void ThrowObjectDisposedException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    private static ObjectDisposedException GetObjectDisposedException(ExceptionArgument argument);
    private static string GetArgumentName(ExceptionArgument argument);
}
[AttributeUsageAttribute("108")]
internal class System.Diagnostics.StackTraceHiddenAttribute : Attribute {
}
internal class System.IO.Pipelines.DuplexPipe : object {
    [CompilerGeneratedAttribute]
private PipeReader <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeWriter <Output>k__BackingField;
    public PipeReader Input { get; }
    public PipeWriter Output { get; }
    public DuplexPipe(PipeReader reader, PipeWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual PipeReader get_Input();
    [CompilerGeneratedAttribute]
public sealed virtual PipeWriter get_Output();
    public static DuplexPipePair CreateConnectionPair(PipeOptions inputOptions, PipeOptions outputOptions);
}
