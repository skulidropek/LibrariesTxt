public enum Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.FileHandleType : Enum {
    public int value__;
    public static FileHandleType Auto;
    public static FileHandleType Tcp;
    public static FileHandleType Pipe;
}
public interface Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IApplicationTransportFeature {
    public IDuplexPipe Application { get; public set; }
    public abstract virtual IDuplexPipe get_Application();
    public abstract virtual void set_Application(IDuplexPipe value);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IBytesWrittenFeature {
    public long TotalBytesWritten { get; }
    public abstract virtual long get_TotalBytesWritten();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IConnectionDispatcher {
    public abstract virtual void OnConnection(TransportConnection connection);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IEndPointInformation {
    public ListenType Type { get; }
    public IPEndPoint IPEndPoint { get; public set; }
    public string SocketPath { get; }
    public ulong FileHandle { get; }
    public FileHandleType HandleType { get; public set; }
    public bool NoDelay { get; }
    public abstract virtual ListenType get_Type();
    public abstract virtual IPEndPoint get_IPEndPoint();
    public abstract virtual void set_IPEndPoint(IPEndPoint value);
    public abstract virtual string get_SocketPath();
    public abstract virtual ulong get_FileHandle();
    public abstract virtual FileHandleType get_HandleType();
    public abstract virtual void set_HandleType(FileHandleType value);
    public abstract virtual bool get_NoDelay();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ITransport {
    public abstract virtual Task BindAsync();
    public abstract virtual Task UnbindAsync();
    public abstract virtual Task StopAsync();
}
public interface Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ITransportFactory {
    public abstract virtual ITransport Create(IEndPointInformation endPointInformation, IConnectionDispatcher dispatcher);
}
public interface Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ITransportSchedulerFeature {
    public PipeScheduler InputWriterScheduler { get; }
    public PipeScheduler OutputReaderScheduler { get; }
    public abstract virtual PipeScheduler get_InputWriterScheduler();
    public abstract virtual PipeScheduler get_OutputReaderScheduler();
}
public static class Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.KestrelMemoryPool : object {
    public static int MinimumSegmentSize;
    private static KestrelMemoryPool();
    public static MemoryPool`1<byte> Create();
}
public enum Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ListenType : Enum {
    public int value__;
    public static ListenType IPEndPoint;
    public static ListenType SocketPath;
    public static ListenType FileHandle;
}
public enum Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.SchedulingMode : Enum {
    public int value__;
    public static SchedulingMode Default;
    public static SchedulingMode ThreadPool;
    public static SchedulingMode Inline;
}
public class Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.TransportConnection : ConnectionContext {
    private IDictionary`2<object, object> _items;
    [CompilerGeneratedAttribute]
private IPAddress <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemotePort>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <LocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LocalPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPool`1<byte> <MemoryPool>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeScheduler <InputWriterScheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private PipeScheduler <OutputReaderScheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalBytesWritten>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Transport>k__BackingField;
    [CompilerGeneratedAttribute]
private IDuplexPipe <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <ConnectionClosed>k__BackingField;
    private static Type IHttpConnectionFeatureType;
    private static Type IConnectionIdFeatureType;
    private static Type IConnectionTransportFeatureType;
    private static Type IConnectionItemsFeatureType;
    private static Type IMemoryPoolFeatureType;
    private static Type IApplicationTransportFeatureType;
    private static Type ITransportSchedulerFeatureType;
    private static Type IConnectionLifetimeFeatureType;
    private static Type IBytesWrittenFeatureType;
    private object _currentIHttpConnectionFeature;
    private object _currentIConnectionIdFeature;
    private object _currentIConnectionTransportFeature;
    private object _currentIConnectionItemsFeature;
    private object _currentIMemoryPoolFeature;
    private object _currentIApplicationTransportFeature;
    private object _currentITransportSchedulerFeature;
    private object _currentIConnectionLifetimeFeature;
    private object _currentIBytesWrittenFeature;
    private int _featureRevision;
    private List`1<KeyValuePair`2<Type, object>> MaybeExtra;
    public IPAddress RemoteAddress { get; public set; }
    public int RemotePort { get; public set; }
    public IPAddress LocalAddress { get; public set; }
    public int LocalPort { get; public set; }
    public string ConnectionId { get; public set; }
    public IFeatureCollection Features { get; }
    public MemoryPool`1<byte> MemoryPool { get; }
    public PipeScheduler InputWriterScheduler { get; }
    public PipeScheduler OutputReaderScheduler { get; }
    public long TotalBytesWritten { get; }
    public IDuplexPipe Transport { get; public set; }
    public IDuplexPipe Application { get; public set; }
    public IDictionary`2<object, object> Items { get; public set; }
    public PipeWriter Input { get; }
    public PipeReader Output { get; }
    public CancellationToken ConnectionClosed { get; public set; }
    private bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.IsReadOnly { get; }
    private int Microsoft.AspNetCore.Http.Features.IFeatureCollection.Revision { get; }
    private string Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.ConnectionId { get; private set; }
    private IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemoteIpAddress { get; private set; }
    private IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalIpAddress { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.RemotePort { get; private set; }
    private int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.LocalPort { get; private set; }
    private MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.MemoryPool { get; }
    private IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.Transport { get; private set; }
    private IDuplexPipe Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IApplicationTransportFeature.Application { get; private set; }
    private IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.Items { get; private set; }
    private CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.ConnectionClosed { get; private set; }
    private long Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IBytesWrittenFeature.TotalBytesWritten { get; }
    private PipeScheduler Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ITransportSchedulerFeature.InputWriterScheduler { get; }
    private PipeScheduler Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ITransportSchedulerFeature.OutputReaderScheduler { get; }
    private object Microsoft.AspNetCore.Http.Features.IFeatureCollection.Item { get; private set; }
    private static TransportConnection();
    [CompilerGeneratedAttribute]
public IPAddress get_RemoteAddress();
    [CompilerGeneratedAttribute]
public void set_RemoteAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public int get_RemotePort();
    [CompilerGeneratedAttribute]
public void set_RemotePort(int value);
    [CompilerGeneratedAttribute]
public IPAddress get_LocalAddress();
    [CompilerGeneratedAttribute]
public void set_LocalAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public int get_LocalPort();
    [CompilerGeneratedAttribute]
public void set_LocalPort(int value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionId();
    [CompilerGeneratedAttribute]
public virtual void set_ConnectionId(string value);
    public virtual IFeatureCollection get_Features();
    [CompilerGeneratedAttribute]
public virtual MemoryPool`1<byte> get_MemoryPool();
    [CompilerGeneratedAttribute]
public virtual PipeScheduler get_InputWriterScheduler();
    [CompilerGeneratedAttribute]
public virtual PipeScheduler get_OutputReaderScheduler();
    [CompilerGeneratedAttribute]
public virtual long get_TotalBytesWritten();
    [CompilerGeneratedAttribute]
public virtual IDuplexPipe get_Transport();
    [CompilerGeneratedAttribute]
public virtual void set_Transport(IDuplexPipe value);
    [CompilerGeneratedAttribute]
public IDuplexPipe get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(IDuplexPipe value);
    public virtual IDictionary`2<object, object> get_Items();
    public virtual void set_Items(IDictionary`2<object, object> value);
    public PipeWriter get_Input();
    public PipeReader get_Output();
    [CompilerGeneratedAttribute]
public CancellationToken get_ConnectionClosed();
    [CompilerGeneratedAttribute]
public void set_ConnectionClosed(CancellationToken value);
    public virtual void Abort();
    private object ExtraFeatureGet(Type key);
    private void ExtraFeatureSet(Type key, object value);
    private sealed virtual override bool Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_IsReadOnly();
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Revision();
    private sealed virtual override string Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_ConnectionId();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_ConnectionId(string value);
    private sealed virtual override IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemoteIpAddress();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemoteIpAddress(IPAddress value);
    private sealed virtual override IPAddress Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalIpAddress();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalIpAddress(IPAddress value);
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_RemotePort();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_RemotePort(int value);
    private sealed virtual override int Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.get_LocalPort();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IHttpConnectionFeature.set_LocalPort(int value);
    private sealed virtual override MemoryPool`1<byte> Microsoft.AspNetCore.Connections.Features.IMemoryPoolFeature.get_MemoryPool();
    private sealed virtual override IDuplexPipe Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.get_Transport();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionTransportFeature.set_Transport(IDuplexPipe value);
    private sealed virtual override IDuplexPipe Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IApplicationTransportFeature.get_Application();
    private sealed virtual override void Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IApplicationTransportFeature.set_Application(IDuplexPipe value);
    private sealed virtual override IDictionary`2<object, object> Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.get_Items();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionItemsFeature.set_Items(IDictionary`2<object, object> value);
    private sealed virtual override CancellationToken Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.get_ConnectionClosed();
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.set_ConnectionClosed(CancellationToken value);
    private sealed virtual override void Microsoft.AspNetCore.Connections.Features.IConnectionLifetimeFeature.Abort();
    private sealed virtual override long Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.IBytesWrittenFeature.get_TotalBytesWritten();
    private sealed virtual override PipeScheduler Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ITransportSchedulerFeature.get_InputWriterScheduler();
    private sealed virtual override PipeScheduler Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ITransportSchedulerFeature.get_OutputReaderScheduler();
    private sealed virtual override object Microsoft.AspNetCore.Http.Features.IFeatureCollection.get_Item(Type key);
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.set_Item(Type key, object value);
    private sealed virtual override TFeature Microsoft.AspNetCore.Http.Features.IFeatureCollection.Get();
    private sealed virtual override void Microsoft.AspNetCore.Http.Features.IFeatureCollection.Set(TFeature instance);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<Type, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.TransportConnection/<FastEnumerable>d__125")]
private IEnumerable`1<KeyValuePair`2<Type, object>> FastEnumerable();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Buffers.BufferReader : ValueType {
    private ReadOnlySpan`1<byte> _currentSpan;
    private int _index;
    private ReadOnlySequence`1<byte> _sequence;
    private SequencePosition _currentSequencePosition;
    private SequencePosition _nextSequencePosition;
    private int _consumedBytes;
    private bool _end;
    public bool End { get; }
    public int CurrentSegmentIndex { get; }
    public SequencePosition Position { get; }
    public ReadOnlySpan`1<byte> CurrentSegment { get; }
    public ReadOnlySpan`1<byte> UnreadSegment { get; }
    public int ConsumedBytes { get; }
    public BufferReader(ReadOnlySequence`1<byte> buffer);
    public bool get_End();
    public int get_CurrentSegmentIndex();
    public SequencePosition get_Position();
    public ReadOnlySpan`1<byte> get_CurrentSegment();
    public ReadOnlySpan`1<byte> get_UnreadSegment();
    public int get_ConsumedBytes();
    public int Peek();
    public int Read();
    private void MoveNext();
    public void Advance(int byteCount);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Buffers.BufferWriter`1 : ValueType {
    private T _output;
    private Span`1<byte> _span;
    private int _buffered;
    public Span`1<byte> Span { get; }
    public BufferWriter`1(T output);
    public Span`1<byte> get_Span();
    public void Commit();
    public void Advance(int count);
    public void Write(ReadOnlySpan`1<byte> source);
    public void Ensure(int count);
    private void EnsureMore(int count);
    private void WriteMultiBuffer(ReadOnlySpan`1<byte> source);
}
internal enum System.Buffers.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument size;
    public static ExceptionArgument offset;
    public static ExceptionArgument length;
    public static ExceptionArgument MemoryPoolBlock;
}
internal class System.Buffers.MemoryPoolBlock : object {
    private int _offset;
    private int _length;
    [CompilerGeneratedAttribute]
private SlabMemoryPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private MemoryPoolSlab <Slab>k__BackingField;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Memory>k__BackingField;
    public SlabMemoryPool Pool { get; }
    public MemoryPoolSlab Slab { get; }
    public Memory`1<byte> Memory { get; }
    internal MemoryPoolBlock(SlabMemoryPool pool, MemoryPoolSlab slab, int offset, int length);
    [CompilerGeneratedAttribute]
public SlabMemoryPool get_Pool();
    [CompilerGeneratedAttribute]
public MemoryPoolSlab get_Slab();
    [CompilerGeneratedAttribute]
public sealed virtual Memory`1<byte> get_Memory();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void Lease();
}
internal class System.Buffers.MemoryPoolSlab : object {
    private GCHandle _gcHandle;
    private IntPtr _nativePointer;
    private Byte[] _data;
    private bool _isActive;
    private bool _disposedValue;
    public bool IsActive { get; }
    public IntPtr NativePointer { get; }
    public Byte[] Array { get; }
    public int Length { get; }
    public MemoryPoolSlab(Byte[] data);
    public bool get_IsActive();
    public IntPtr get_NativePointer();
    public Byte[] get_Array();
    public int get_Length();
    public static MemoryPoolSlab Create(int length);
    protected void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
internal class System.Buffers.SlabMemoryPool : MemoryPool`1<byte> {
    private static int _blockSize;
    private static int _blockCount;
    [CompilerGeneratedAttribute]
private int <MaxBufferSize>k__BackingField;
    private static int _slabLength;
    private ConcurrentQueue`1<MemoryPoolBlock> _blocks;
    private ConcurrentStack`1<MemoryPoolSlab> _slabs;
    private bool _disposedValue;
    private static int AnySize;
    public int MaxBufferSize { get; }
    private static SlabMemoryPool();
    [CompilerGeneratedAttribute]
public virtual int get_MaxBufferSize();
    public virtual IMemoryOwner`1<byte> Rent(int size);
    private MemoryPoolBlock Lease();
    private MemoryPoolBlock AllocateSlab();
    internal void Return(MemoryPoolBlock block);
    protected virtual void Dispose(bool disposing);
}
internal class System.Buffers.ThrowHelper : object {
    public static void ThrowArgumentOutOfRangeException(int sourceLength, int offset);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(int sourceLength, int offset);
    public static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    public static void ThrowInvalidOperationException_ReferenceCountZero();
    public static void ThrowInvalidOperationException_ReturningPinnedBlock();
    public static void ThrowArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    public static void ThrowObjectDisposedException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException(ExceptionArgument argument);
    private static ArgumentOutOfRangeException GetArgumentOutOfRangeException_BufferRequestTooLarge(int maxSize);
    private static ObjectDisposedException GetObjectDisposedException(ExceptionArgument argument);
    private static string GetArgumentName(ExceptionArgument argument);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
