[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.FileConfigurationExtensions : object {
    private static string FileProviderKey;
    private static string FileLoadExceptionHandlerKey;
    private static FileConfigurationExtensions();
    [ExtensionAttribute]
public static IConfigurationBuilder SetFileProvider(IConfigurationBuilder builder, IFileProvider fileProvider);
    [ExtensionAttribute]
public static IFileProvider GetFileProvider(IConfigurationBuilder builder);
    [ExtensionAttribute]
public static IConfigurationBuilder SetBasePath(IConfigurationBuilder builder, string basePath);
    [ExtensionAttribute]
public static IConfigurationBuilder SetFileLoadExceptionHandler(IConfigurationBuilder builder, Action`1<FileLoadExceptionContext> handler);
    [ExtensionAttribute]
public static Action`1<FileLoadExceptionContext> GetFileLoadExceptionHandler(IConfigurationBuilder builder);
}
public abstract class Microsoft.Extensions.Configuration.FileConfigurationProvider : ConfigurationProvider {
    [CompilerGeneratedAttribute]
private FileConfigurationSource <Source>k__BackingField;
    public FileConfigurationSource Source { get; }
    public FileConfigurationProvider(FileConfigurationSource source);
    [CompilerGeneratedAttribute]
public FileConfigurationSource get_Source();
    private void Load(bool reload);
    public virtual void Load();
    public abstract virtual void Load(Stream stream);
    [CompilerGeneratedAttribute]
private IChangeToken <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_1();
}
public abstract class Microsoft.Extensions.Configuration.FileConfigurationSource : object {
    [CompilerGeneratedAttribute]
private IFileProvider <FileProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReloadOnChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReloadDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<FileLoadExceptionContext> <OnLoadException>k__BackingField;
    public IFileProvider FileProvider { get; public set; }
    public string Path { get; public set; }
    public bool Optional { get; public set; }
    public bool ReloadOnChange { get; public set; }
    public int ReloadDelay { get; public set; }
    public Action`1<FileLoadExceptionContext> OnLoadException { get; public set; }
    [CompilerGeneratedAttribute]
public IFileProvider get_FileProvider();
    [CompilerGeneratedAttribute]
public void set_FileProvider(IFileProvider value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_Optional();
    [CompilerGeneratedAttribute]
public void set_Optional(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReloadOnChange();
    [CompilerGeneratedAttribute]
public void set_ReloadOnChange(bool value);
    [CompilerGeneratedAttribute]
public int get_ReloadDelay();
    [CompilerGeneratedAttribute]
public void set_ReloadDelay(int value);
    [CompilerGeneratedAttribute]
public Action`1<FileLoadExceptionContext> get_OnLoadException();
    [CompilerGeneratedAttribute]
public void set_OnLoadException(Action`1<FileLoadExceptionContext> value);
    public abstract virtual IConfigurationProvider Build(IConfigurationBuilder builder);
    public void EnsureDefaults(IConfigurationBuilder builder);
    public void ResolveFileProvider();
}
internal static class Microsoft.Extensions.Configuration.FileExtensions.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string Error_ExpectedPhysicalPath { get; }
    internal static string Error_FileNotFound { get; }
    private static Resources();
    internal static string get_Error_ExpectedPhysicalPath();
    internal static string FormatError_ExpectedPhysicalPath(object p0);
    internal static string get_Error_FileNotFound();
    internal static string FormatError_FileNotFound(object p0);
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.Extensions.Configuration.FileLoadExceptionContext : object {
    [CompilerGeneratedAttribute]
private FileConfigurationProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    public FileConfigurationProvider Provider { get; public set; }
    public Exception Exception { get; public set; }
    public bool Ignore { get; public set; }
    [CompilerGeneratedAttribute]
public FileConfigurationProvider get_Provider();
    [CompilerGeneratedAttribute]
public void set_Provider(FileConfigurationProvider value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
}
