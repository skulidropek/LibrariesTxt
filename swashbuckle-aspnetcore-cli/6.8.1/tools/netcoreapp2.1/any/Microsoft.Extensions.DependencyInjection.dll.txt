public class Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory : object {
    private ServiceProviderOptions _options;
    public DefaultServiceProviderFactory(ServiceProviderOptions options);
    public sealed virtual IServiceCollection CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(IServiceCollection containerBuilder);
}
internal static class Microsoft.Extensions.DependencyInjection.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string AmbiguousConstructorException { get; }
    internal static string CannotResolveService { get; }
    internal static string CircularDependencyException { get; }
    internal static string UnableToActivateTypeException { get; }
    internal static string OpenGenericServiceRequiresOpenGenericImplementation { get; }
    internal static string TypeCannotBeActivated { get; }
    internal static string NoConstructorMatch { get; }
    internal static string ScopedInSingletonException { get; }
    internal static string ScopedResolvedFromRootException { get; }
    internal static string DirectScopedResolvedFromRootException { get; }
    private static Resources();
    internal static string get_AmbiguousConstructorException();
    internal static string FormatAmbiguousConstructorException(object p0);
    internal static string get_CannotResolveService();
    internal static string FormatCannotResolveService(object p0, object p1);
    internal static string get_CircularDependencyException();
    internal static string FormatCircularDependencyException(object p0);
    internal static string get_UnableToActivateTypeException();
    internal static string FormatUnableToActivateTypeException(object p0);
    internal static string get_OpenGenericServiceRequiresOpenGenericImplementation();
    internal static string FormatOpenGenericServiceRequiresOpenGenericImplementation(object p0);
    internal static string get_TypeCannotBeActivated();
    internal static string FormatTypeCannotBeActivated(object p0, object p1);
    internal static string get_NoConstructorMatch();
    internal static string FormatNoConstructorMatch(object p0);
    internal static string get_ScopedInSingletonException();
    internal static string FormatScopedInSingletonException(object p0, object p1, object p2, object p3);
    internal static string get_ScopedResolvedFromRootException();
    internal static string FormatScopedResolvedFromRootException(object p0, object p1, object p2);
    internal static string get_DirectScopedResolvedFromRootException();
    internal static string FormatDirectScopedResolvedFromRootException(object p0, object p1);
    private static string GetString(string name, String[] formatterNames);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.DependencyInjection.ServiceCollection : object {
    private List`1<ServiceDescriptor> _descriptors;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ServiceDescriptor Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual bool Remove(ServiceDescriptor item);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>.Add(ServiceDescriptor item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions : object {
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services);
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services, bool validateScopes);
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services, ServiceProviderOptions options);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain : object {
    private Dictionary`2<Type, ChainItemInfo> _callSiteChain;
    public void CheckCircularDependency(Type serviceType);
    public void Remove(Type serviceType);
    public void Add(Type serviceType, Type implementationType);
    private string CreateCircularDependencyExceptionMessage(Type type);
    private void AppendResolutionPath(StringBuilder builder, Type currentlyResolving);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteExpressionBuilderContext : object {
    [CompilerGeneratedAttribute]
private ParameterExpression <ScopeParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresResolvedServices>k__BackingField;
    public ParameterExpression ScopeParameter { get; public set; }
    public bool RequiresResolvedServices { get; public set; }
    [CompilerGeneratedAttribute]
public ParameterExpression get_ScopeParameter();
    [CompilerGeneratedAttribute]
public void set_ScopeParameter(ParameterExpression value);
    [CompilerGeneratedAttribute]
public bool get_RequiresResolvedServices();
    [CompilerGeneratedAttribute]
public void set_RequiresResolvedServices(bool value);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory : object {
    private List`1<ServiceDescriptor> _descriptors;
    private Dictionary`2<Type, IServiceCallSite> _callSiteCache;
    private Dictionary`2<Type, ServiceDescriptorCacheItem> _descriptorLookup;
    public CallSiteFactory(IEnumerable`1<ServiceDescriptor> descriptors);
    private void Populate(IEnumerable`1<ServiceDescriptor> descriptors);
    internal IServiceCallSite CreateCallSite(Type serviceType, CallSiteChain callSiteChain);
    private IServiceCallSite TryCreateExact(Type serviceType, CallSiteChain callSiteChain);
    private IServiceCallSite TryCreateOpenGeneric(Type serviceType, CallSiteChain callSiteChain);
    private IServiceCallSite TryCreateEnumerable(Type serviceType, CallSiteChain callSiteChain);
    private IServiceCallSite TryCreateExact(ServiceDescriptor descriptor, Type serviceType, CallSiteChain callSiteChain);
    private IServiceCallSite TryCreateOpenGeneric(ServiceDescriptor descriptor, Type serviceType, CallSiteChain callSiteChain);
    private IServiceCallSite ApplyLifetime(IServiceCallSite serviceCallSite, object cacheKey, ServiceLifetime descriptorLifetime);
    private IServiceCallSite CreateConstructorCallSite(Type serviceType, Type implementationType, CallSiteChain callSiteChain);
    private IServiceCallSite[] CreateArgumentCallSites(Type serviceType, Type implementationType, CallSiteChain callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound);
    public void Add(Type type, IServiceCallSite serviceCallSite);
}
internal enum Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteKind : Enum {
    public int value__;
    public static CallSiteKind Factory;
    public static CallSiteKind Constructor;
    public static CallSiteKind Constant;
    public static CallSiteKind IEnumerable;
    public static CallSiteKind ServiceProvider;
    public static CallSiteKind Scope;
    public static CallSiteKind Transient;
    public static CallSiteKind CreateInstance;
    public static CallSiteKind ServiceScopeFactory;
    public static CallSiteKind Singleton;
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver : CallSiteVisitor`2<ServiceProviderEngineScope, object> {
    public object Resolve(IServiceCallSite callSite, ServiceProviderEngineScope scope);
    protected virtual object VisitTransient(TransientCallSite transientCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitConstant(ConstantCallSite constantCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ServiceProviderEngineScope scope);
    protected virtual object VisitFactory(FactoryCallSite factoryCallSite, ServiceProviderEngineScope scope);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator : CallSiteVisitor`2<CallSiteValidatorState, Type> {
    private ConcurrentDictionary`2<Type, Type> _scopedServices;
    public void ValidateCallSite(IServiceCallSite callSite);
    public void ValidateResolution(Type serviceType, IServiceScope scope, IServiceScope rootScope);
    protected virtual Type VisitTransient(TransientCallSite transientCallSite, CallSiteValidatorState state);
    protected virtual Type VisitConstructor(ConstructorCallSite constructorCallSite, CallSiteValidatorState state);
    protected virtual Type VisitIEnumerable(IEnumerableCallSite enumerableCallSite, CallSiteValidatorState state);
    protected virtual Type VisitSingleton(SingletonCallSite singletonCallSite, CallSiteValidatorState state);
    protected virtual Type VisitScoped(ScopedCallSite scopedCallSite, CallSiteValidatorState state);
    protected virtual Type VisitConstant(ConstantCallSite constantCallSite, CallSiteValidatorState state);
    protected virtual Type VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, CallSiteValidatorState state);
    protected virtual Type VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, CallSiteValidatorState state);
    protected virtual Type VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, CallSiteValidatorState state);
    protected virtual Type VisitFactory(FactoryCallSite factoryCallSite, CallSiteValidatorState state);
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2 : object {
    protected virtual TResult VisitCallSite(IServiceCallSite callSite, TArgument argument);
    protected abstract virtual TResult VisitTransient(TransientCallSite transientCallSite, TArgument argument);
    protected abstract virtual TResult VisitConstructor(ConstructorCallSite constructorCallSite, TArgument argument);
    protected abstract virtual TResult VisitSingleton(SingletonCallSite singletonCallSite, TArgument argument);
    protected abstract virtual TResult VisitScoped(ScopedCallSite scopedCallSite, TArgument argument);
    protected abstract virtual TResult VisitConstant(ConstantCallSite constantCallSite, TArgument argument);
    protected abstract virtual TResult VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, TArgument argument);
    protected abstract virtual TResult VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, TArgument argument);
    protected abstract virtual TResult VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, TArgument argument);
    protected abstract virtual TResult VisitIEnumerable(IEnumerableCallSite enumerableCallSite, TArgument argument);
    protected abstract virtual TResult VisitFactory(FactoryCallSite factoryCallSite, TArgument argument);
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.CompiledServiceProviderEngine : ServiceProviderEngine {
    [CompilerGeneratedAttribute]
private ExpressionResolverBuilder <ExpressionResolverBuilder>k__BackingField;
    public ExpressionResolverBuilder ExpressionResolverBuilder { get; }
    public CompiledServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors, IServiceProviderEngineCallback callback);
    [CompilerGeneratedAttribute]
public ExpressionResolverBuilder get_ExpressionResolverBuilder();
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(IServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstantCallSite : object {
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal object DefaultValue { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ConstantCallSite(Type serviceType, object defaultValue);
    [CompilerGeneratedAttribute]
internal object get_DefaultValue();
    public sealed virtual Type get_ServiceType();
    public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite : object {
    [CompilerGeneratedAttribute]
private ConstructorInfo <ConstructorInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCallSite[] <ParameterCallSites>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal ConstructorInfo ConstructorInfo { get; }
    internal IServiceCallSite[] ParameterCallSites { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ConstructorCallSite(Type serviceType, ConstructorInfo constructorInfo, IServiceCallSite[] parameterCallSites);
    [CompilerGeneratedAttribute]
internal ConstructorInfo get_ConstructorInfo();
    [CompilerGeneratedAttribute]
internal IServiceCallSite[] get_ParameterCallSites();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CreateInstanceCallSite : object {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public CreateInstanceCallSite(Type serviceType, Type implementationType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine : CompiledServiceProviderEngine {
    public DynamicServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors, IServiceProviderEngineCallback callback);
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(IServiceCallSite callSite);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Func`2<ServiceProviderEngineScope, object> <>n__0(IServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionResolverBuilder : CallSiteVisitor`2<CallSiteExpressionBuilderContext, Expression> {
    internal static MethodInfo InvokeFactoryMethodInfo;
    internal static MethodInfo CaptureDisposableMethodInfo;
    internal static MethodInfo TryGetValueMethodInfo;
    internal static MethodInfo AddMethodInfo;
    internal static MethodInfo MonitorEnterMethodInfo;
    internal static MethodInfo MonitorExitMethodInfo;
    internal static MethodInfo CallSiteRuntimeResolverResolve;
    internal static MethodInfo ArrayEmptyMethodInfo;
    private static ParameterExpression ScopeParameter;
    private static ParameterExpression ResolvedServices;
    private static BinaryExpression ResolvedServicesVariableAssignment;
    private static ParameterExpression CaptureDisposableParameter;
    private static LambdaExpression CaptureDisposable;
    private CallSiteRuntimeResolver _runtimeResolver;
    private IServiceScopeFactory _serviceScopeFactory;
    private ServiceProviderEngineScope _rootScope;
    public ExpressionResolverBuilder(CallSiteRuntimeResolver runtimeResolver, IServiceScopeFactory serviceScopeFactory, ServiceProviderEngineScope rootScope);
    private static ExpressionResolverBuilder();
    public Func`2<ServiceProviderEngineScope, object> Build(IServiceCallSite callSite);
    private bool TryResolveSingletonValue(SingletonCallSite singletonCallSite, Object& value);
    private Expression`1<Func`2<ServiceProviderEngineScope, object>> BuildExpression(IServiceCallSite callSite);
    protected virtual Expression VisitSingleton(SingletonCallSite singletonCallSite, CallSiteExpressionBuilderContext context);
    protected virtual Expression VisitConstant(ConstantCallSite constantCallSite, CallSiteExpressionBuilderContext context);
    protected virtual Expression VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, CallSiteExpressionBuilderContext context);
    protected virtual Expression VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, CallSiteExpressionBuilderContext context);
    protected virtual Expression VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, CallSiteExpressionBuilderContext context);
    protected virtual Expression VisitFactory(FactoryCallSite factoryCallSite, CallSiteExpressionBuilderContext context);
    protected virtual Expression VisitIEnumerable(IEnumerableCallSite callSite, CallSiteExpressionBuilderContext context);
    protected virtual Expression VisitTransient(TransientCallSite callSite, CallSiteExpressionBuilderContext context);
    private Expression TryCaptureDisposible(Type implType, ParameterExpression scope, Expression service);
    protected virtual Expression VisitConstructor(ConstructorCallSite callSite, CallSiteExpressionBuilderContext context);
    private static Expression Convert(Expression expression, Type type);
    protected virtual Expression VisitScoped(ScopedCallSite callSite, CallSiteExpressionBuilderContext context);
    private Expression BuildScopedExpression(ScopedCallSite callSite, CallSiteExpressionBuilderContext context, Expression service);
    private static MethodInfo GetMethodInfo(Expression`1<T> expr);
    public Expression GetCaptureDisposable(ParameterExpression scope);
    public Expression GetResolvedServices(CallSiteExpressionBuilderContext context);
    private static Expression Lock(Expression body, Expression syncVariable);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionsServiceProviderEngine : ServiceProviderEngine {
    private ExpressionResolverBuilder _expressionResolverBuilder;
    public ExpressionsServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors, IServiceProviderEngineCallback callback);
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(IServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryCallSite : object {
    [CompilerGeneratedAttribute]
private Func`2<IServiceProvider, object> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Func`2<IServiceProvider, object> Factory { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public FactoryCallSite(Type serviceType, Func`2<IServiceProvider, object> factory);
    [CompilerGeneratedAttribute]
public Func`2<IServiceProvider, object> get_Factory();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite : object {
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCallSite[] <ServiceCallSites>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal Type ItemType { get; }
    internal IServiceCallSite[] ServiceCallSites { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public IEnumerableCallSite(Type itemType, IServiceCallSite[] serviceCallSites);
    [CompilerGeneratedAttribute]
internal Type get_ItemType();
    [CompilerGeneratedAttribute]
internal IServiceCallSite[] get_ServiceCallSites();
    public sealed virtual Type get_ServiceType();
    public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual CallSiteKind get_Kind();
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitCallSiteAnalysisResult : ValueType {
    public int Size;
    public bool HasScope;
    public ILEmitCallSiteAnalysisResult(int size);
    public ILEmitCallSiteAnalysisResult(int size, bool hasScope);
    public ILEmitCallSiteAnalysisResult Add(ILEmitCallSiteAnalysisResult& other);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitCallSiteAnalyzer : CallSiteVisitor`2<object, ILEmitCallSiteAnalysisResult> {
    private static int ConstructorILSize;
    private static int ScopedILSize;
    private static int ConstantILSize;
    private static int ServiceProviderSize;
    private static int FactoryILSize;
    [CompilerGeneratedAttribute]
private static ILEmitCallSiteAnalyzer <Instance>k__BackingField;
    internal static ILEmitCallSiteAnalyzer Instance { get; }
    private static ILEmitCallSiteAnalyzer();
    [CompilerGeneratedAttribute]
internal static ILEmitCallSiteAnalyzer get_Instance();
    protected virtual ILEmitCallSiteAnalysisResult VisitTransient(TransientCallSite transientCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitConstructor(ConstructorCallSite constructorCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitSingleton(SingletonCallSite singletonCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitScoped(ScopedCallSite scopedCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitConstant(ConstantCallSite constantCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitIEnumerable(IEnumerableCallSite enumerableCallSite, object argument);
    protected virtual ILEmitCallSiteAnalysisResult VisitFactory(FactoryCallSite factoryCallSite, object argument);
    public ILEmitCallSiteAnalysisResult CollectGenerationInfo(IServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilder : CallSiteVisitor`2<ILEmitResolverBuilderContext, Expression> {
    private static MethodInfo ResolvedServicesGetter;
    private static FieldInfo RuntimeResolverField;
    private static FieldInfo RootField;
    private static FieldInfo FactoriesField;
    private static FieldInfo ConstantsField;
    private CallSiteRuntimeResolver _runtimeResolver;
    private IServiceScopeFactory _serviceScopeFactory;
    private ServiceProviderEngineScope _rootScope;
    public ILEmitResolverBuilder(CallSiteRuntimeResolver runtimeResolver, IServiceScopeFactory serviceScopeFactory, ServiceProviderEngineScope rootScope);
    private static ILEmitResolverBuilder();
    public Func`2<ServiceProviderEngineScope, object> Build(IServiceCallSite callSite);
    protected virtual Expression VisitTransient(TransientCallSite transientCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitConstructor(ConstructorCallSite constructorCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitSingleton(SingletonCallSite singletonCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitScoped(ScopedCallSite scopedCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitConstant(ConstantCallSite constantCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ILEmitResolverBuilderContext argument);
    protected virtual Expression VisitFactory(FactoryCallSite factoryCallSite, ILEmitResolverBuilderContext argument);
    private void AddConstant(ILEmitResolverBuilderContext argument, object value);
    private Func`2<ServiceProviderEngineScope, object> BuildType(IServiceCallSite callSite);
    private ILEmitResolverBuilderRuntimeContext GenerateMethodBody(IServiceCallSite callSite, ILGenerator generator, ILEmitCallSiteAnalysisResult info);
    private bool TryResolveSingletonValue(SingletonCallSite singletonCallSite, Object& value);
    private static bool BeginCaptureDisposable(Type implType, ILEmitResolverBuilderContext argument);
    private static void EndCaptureDisposable(ILEmitResolverBuilderContext argument);
    private void Ldloc(ILGenerator generator, int index);
    private void Stloc(ILGenerator generator, int index);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilderContext : object {
    [CompilerGeneratedAttribute]
private ILGenerator <Generator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <Constants>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<IServiceProvider, object>> <Factories>k__BackingField;
    public ILGenerator Generator { get; public set; }
    public List`1<object> Constants { get; public set; }
    public List`1<Func`2<IServiceProvider, object>> Factories { get; public set; }
    [CompilerGeneratedAttribute]
public ILGenerator get_Generator();
    [CompilerGeneratedAttribute]
public void set_Generator(ILGenerator value);
    [CompilerGeneratedAttribute]
public List`1<object> get_Constants();
    [CompilerGeneratedAttribute]
public void set_Constants(List`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<IServiceProvider, object>> get_Factories();
    [CompilerGeneratedAttribute]
public void set_Factories(List`1<Func`2<IServiceProvider, object>> value);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitServiceProviderEngine : ServiceProviderEngine {
    private ILEmitResolverBuilder _expressionResolverBuilder;
    public ILEmitServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors, IServiceProviderEngineCallback callback);
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(IServiceCallSite callSite);
}
internal interface Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceCallSite {
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public abstract virtual Type get_ServiceType();
    public abstract virtual Type get_ImplementationType();
    public abstract virtual CallSiteKind get_Kind();
}
internal interface Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngine {
    public IServiceScope RootScope { get; }
    public abstract virtual IServiceScope get_RootScope();
}
internal interface Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngineCallback {
    public abstract virtual void OnCreate(IServiceCallSite callSite);
    public abstract virtual void OnResolve(Type serviceType, IServiceScope scope);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine : ServiceProviderEngine {
    public RuntimeServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors, IServiceProviderEngineCallback callback);
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(IServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ScopedCallSite : object {
    [CompilerGeneratedAttribute]
private IServiceCallSite <ServiceCallSite>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal IServiceCallSite ServiceCallSite { get; }
    public object CacheKey { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ScopedCallSite(IServiceCallSite serviceCallSite, object cacheKey);
    [CompilerGeneratedAttribute]
internal IServiceCallSite get_ServiceCallSite();
    [CompilerGeneratedAttribute]
public object get_CacheKey();
    public sealed virtual Type get_ServiceType();
    public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderCallSite : object {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual CallSiteKind get_Kind();
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine : object {
    private IServiceProviderEngineCallback _callback;
    private Func`2<Type, Func`2<ServiceProviderEngineScope, object>> _createServiceAccessor;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Type, Func`2<ServiceProviderEngineScope, object>> <RealizedServices>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteFactory <CallSiteFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteRuntimeResolver <RuntimeResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProviderEngineScope <Root>k__BackingField;
    internal ConcurrentDictionary`2<Type, Func`2<ServiceProviderEngineScope, object>> RealizedServices { get; }
    internal CallSiteFactory CallSiteFactory { get; }
    protected CallSiteRuntimeResolver RuntimeResolver { get; }
    public ServiceProviderEngineScope Root { get; }
    public IServiceScope RootScope { get; }
    protected ServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors, IServiceProviderEngineCallback callback);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<Type, Func`2<ServiceProviderEngineScope, object>> get_RealizedServices();
    [CompilerGeneratedAttribute]
internal CallSiteFactory get_CallSiteFactory();
    [CompilerGeneratedAttribute]
protected CallSiteRuntimeResolver get_RuntimeResolver();
    [CompilerGeneratedAttribute]
public ServiceProviderEngineScope get_Root();
    public sealed virtual IServiceScope get_RootScope();
    public sealed virtual object GetService(Type serviceType);
    protected abstract virtual Func`2<ServiceProviderEngineScope, object> RealizeService(IServiceCallSite callSite);
    public sealed virtual void Dispose();
    internal object GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope);
    public sealed virtual IServiceScope CreateScope();
    private Func`2<ServiceProviderEngineScope, object> CreateServiceAccessor(Type serviceType);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope : object {
    internal Action`1<object> _captureDisposableCallback;
    private List`1<IDisposable> _disposables;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, object> <ResolvedServices>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProviderEngine <Engine>k__BackingField;
    internal Dictionary`2<object, object> ResolvedServices { get; }
    public ServiceProviderEngine Engine { get; }
    public IServiceProvider ServiceProvider { get; }
    public ServiceProviderEngineScope(ServiceProviderEngine engine);
    [CompilerGeneratedAttribute]
internal Dictionary`2<object, object> get_ResolvedServices();
    [CompilerGeneratedAttribute]
public ServiceProviderEngine get_Engine();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual void Dispose();
    internal object CaptureDisposable(object service);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceScopeFactoryCallSite : object {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.SingletonCallSite : ScopedCallSite {
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public CallSiteKind Kind { get; }
    public SingletonCallSite(IServiceCallSite serviceCallSite, object cacheKey);
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper : object {
    internal static void ThrowObjectDisposedException();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.TransientCallSite : object {
    [CompilerGeneratedAttribute]
private IServiceCallSite <ServiceCallSite>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal IServiceCallSite ServiceCallSite { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public TransientCallSite(IServiceCallSite serviceCallSite);
    [CompilerGeneratedAttribute]
internal IServiceCallSite get_ServiceCallSite();
    public sealed virtual Type get_ServiceType();
    public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual CallSiteKind get_Kind();
}
public class Microsoft.Extensions.DependencyInjection.ServiceProvider : object {
    private IServiceProviderEngine _engine;
    private CallSiteValidator _callSiteValidator;
    internal ServiceProvider(IEnumerable`1<ServiceDescriptor> serviceDescriptors, ServiceProviderOptions options);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
    private sealed virtual override void Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngineCallback.OnCreate(IServiceCallSite callSite);
    private sealed virtual override void Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngineCallback.OnResolve(Type serviceType, IServiceScope scope);
}
internal enum Microsoft.Extensions.DependencyInjection.ServiceProviderMode : Enum {
    public int value__;
    public static ServiceProviderMode Dynamic;
    public static ServiceProviderMode Runtime;
    public static ServiceProviderMode Expressions;
    public static ServiceProviderMode ILEmit;
}
public class Microsoft.Extensions.DependencyInjection.ServiceProviderOptions : object {
    internal static ServiceProviderOptions Default;
    [CompilerGeneratedAttribute]
private bool <ValidateScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProviderMode <Mode>k__BackingField;
    public bool ValidateScopes { get; public set; }
    internal ServiceProviderMode Mode { get; internal set; }
    private static ServiceProviderOptions();
    [CompilerGeneratedAttribute]
public bool get_ValidateScopes();
    [CompilerGeneratedAttribute]
public void set_ValidateScopes(bool value);
    [CompilerGeneratedAttribute]
internal ServiceProviderMode get_Mode();
    [CompilerGeneratedAttribute]
internal void set_Mode(ServiceProviderMode value);
}
internal class Microsoft.Extensions.Internal.ParameterDefaultValue : object {
    public static bool TryGetDefaultValue(ParameterInfo parameter, Object& defaultValue);
}
internal class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(object item, bool fullName);
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions options);
}
