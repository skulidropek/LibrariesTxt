internal class Microsoft.Extensions.FileProviders.EmptyDisposable : object {
    [CompilerGeneratedAttribute]
private static EmptyDisposable <Instance>k__BackingField;
    public static EmptyDisposable Instance { get; }
    private static EmptyDisposable();
    [CompilerGeneratedAttribute]
public static EmptyDisposable get_Instance();
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents : object {
    private IEnumerable`1<IFileInfo> _entries;
    private string _directory;
    private ExclusionFilters _filters;
    public bool Exists { get; }
    public PhysicalDirectoryContents(string directory);
    public PhysicalDirectoryContents(string directory, ExclusionFilters filters);
    public sealed virtual bool get_Exists();
    public sealed virtual IEnumerator`1<IFileInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void EnsureInitialized();
    [CompilerGeneratedAttribute]
private bool <EnsureInitialized>b__9_0(FileSystemInfo info);
}
internal class Microsoft.Extensions.FileProviders.Physical.Clock : object {
    public static Clock Instance;
    public DateTime UtcNow { get; }
    private static Clock();
    public sealed virtual DateTime get_UtcNow();
}
[FlagsAttribute]
public enum Microsoft.Extensions.FileProviders.Physical.ExclusionFilters : Enum {
    public int value__;
    public static ExclusionFilters Sensitive;
    public static ExclusionFilters DotPrefixed;
    public static ExclusionFilters Hidden;
    public static ExclusionFilters System;
    public static ExclusionFilters None;
}
internal static class Microsoft.Extensions.FileProviders.Physical.FileSystemInfoHelper : object {
    public static bool IsExcluded(FileSystemInfo fileSystemInfo, ExclusionFilters filters);
}
internal interface Microsoft.Extensions.FileProviders.Physical.IClock {
    public DateTime UtcNow { get; }
    public abstract virtual DateTime get_UtcNow();
}
internal static class Microsoft.Extensions.FileProviders.Physical.Internal.PathUtils : object {
    private static Char[] _invalidFileNameChars;
    private static Char[] _invalidFilterChars;
    private static Char[] _pathSeparators;
    private static PathUtils();
    internal static bool HasInvalidPathChars(string path);
    internal static bool HasInvalidFilterChars(string path);
    internal static string EnsureTrailingSlash(string path);
    internal static bool PathNavigatesAboveRoot(string path);
}
public class Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo : object {
    private DirectoryInfo _info;
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public PhysicalDirectoryInfo(DirectoryInfo info);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    public sealed virtual string get_PhysicalPath();
    public sealed virtual string get_Name();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
}
public class Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo : object {
    private FileInfo _info;
    public bool Exists { get; }
    public long Length { get; }
    public string PhysicalPath { get; }
    public string Name { get; }
    public DateTimeOffset LastModified { get; }
    public bool IsDirectory { get; }
    public PhysicalFileInfo(FileInfo info);
    public sealed virtual bool get_Exists();
    public sealed virtual long get_Length();
    public sealed virtual string get_PhysicalPath();
    public sealed virtual string get_Name();
    public sealed virtual DateTimeOffset get_LastModified();
    public sealed virtual bool get_IsDirectory();
    public sealed virtual Stream CreateReadStream();
}
public class Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher : object {
    private ConcurrentDictionary`2<string, ChangeTokenInfo> _filePathTokenLookup;
    private ConcurrentDictionary`2<string, ChangeTokenInfo> _wildcardTokenLookup;
    private FileSystemWatcher _fileWatcher;
    private object _fileWatcherLock;
    private string _root;
    private bool _pollForChanges;
    private ExclusionFilters _filters;
    public PhysicalFilesWatcher(string root, FileSystemWatcher fileSystemWatcher, bool pollForChanges);
    public PhysicalFilesWatcher(string root, FileSystemWatcher fileSystemWatcher, bool pollForChanges, ExclusionFilters filters);
    public IChangeToken CreateFileChangeToken(string filter);
    private IChangeToken GetOrAddChangeToken(string pattern);
    private IChangeToken GetOrAddFilePathChangeToken(string filePath);
    private IChangeToken GetOrAddWildcardChangeToken(string pattern);
    public sealed virtual void Dispose();
    private void OnRenamed(object sender, RenamedEventArgs e);
    private void OnChanged(object sender, FileSystemEventArgs e);
    private void OnError(object sender, ErrorEventArgs e);
    private void OnFileSystemEntryChange(string fullPath);
    private void ReportChangeForMatchedEntries(string path);
    private void TryDisableFileSystemWatcher();
    private void TryEnableFileSystemWatcher();
    private static string NormalizePath(string filter);
    private static bool IsDirectoryPath(string path);
    private static void CancelToken(ChangeTokenInfo matchInfo);
}
public class Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken : object {
    private FileInfo _fileInfo;
    private DateTime _previousWriteTimeUtc;
    private DateTime _lastCheckedTimeUtc;
    private bool _hasChanged;
    [CompilerGeneratedAttribute]
private static TimeSpan <PollingInterval>k__BackingField;
    internal static TimeSpan PollingInterval { get; internal set; }
    public bool ActiveChangeCallbacks { get; }
    public bool HasChanged { get; }
    public PollingFileChangeToken(FileInfo fileInfo);
    private static PollingFileChangeToken();
    [CompilerGeneratedAttribute]
internal static TimeSpan get_PollingInterval();
    [CompilerGeneratedAttribute]
internal static void set_PollingInterval(TimeSpan value);
    private DateTime GetLastWriteTimeUtc();
    public sealed virtual bool get_ActiveChangeCallbacks();
    public sealed virtual bool get_HasChanged();
    public sealed virtual IDisposable RegisterChangeCallback(Action`1<object> callback, object state);
}
public class Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken : object {
    internal static TimeSpan DefaultPollingInterval;
    private static Byte[] Separator;
    private object _enumerationLock;
    private DirectoryInfoBase _directoryInfo;
    private Matcher _matcher;
    private bool _changed;
    private Nullable`1<DateTime> _lastScanTimeUtc;
    private Byte[] _byteBuffer;
    private Byte[] _previousHash;
    [CompilerGeneratedAttribute]
private TimeSpan <PollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private IClock <Clock>k__BackingField;
    public bool ActiveChangeCallbacks { get; }
    internal TimeSpan PollingInterval { get; internal set; }
    private IClock Clock { get; }
    public bool HasChanged { get; }
    public PollingWildCardChangeToken(string root, string pattern);
    internal PollingWildCardChangeToken(DirectoryInfoBase directoryInfo, string pattern, IClock clock);
    private static PollingWildCardChangeToken();
    public sealed virtual bool get_ActiveChangeCallbacks();
    [CompilerGeneratedAttribute]
internal TimeSpan get_PollingInterval();
    [CompilerGeneratedAttribute]
internal void set_PollingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
private IClock get_Clock();
    public sealed virtual bool get_HasChanged();
    private bool CalculateChanges();
    protected virtual DateTime GetLastWriteUtc(string path);
    private static bool ArrayEquals(Byte[] previousHash, Byte[] currentHash);
    private void ComputeHash(IncrementalHash sha256, string path, DateTime lastChangedUtc);
    private sealed virtual override IDisposable Microsoft.Extensions.Primitives.IChangeToken.RegisterChangeCallback(Action`1<object> callback, object state);
}
public class Microsoft.Extensions.FileProviders.PhysicalFileProvider : object {
    private static string PollingEnvironmentKey;
    private static Char[] _pathSeparators;
    private PhysicalFilesWatcher _filesWatcher;
    private ExclusionFilters _filters;
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    public string Root { get; }
    public PhysicalFileProvider(string root);
    public PhysicalFileProvider(string root, ExclusionFilters filters);
    internal PhysicalFileProvider(string root, PhysicalFilesWatcher physicalFilesWatcher);
    private PhysicalFileProvider(string root, PhysicalFilesWatcher physicalFilesWatcher, ExclusionFilters filters);
    private static PhysicalFileProvider();
    private static PhysicalFilesWatcher CreateFileWatcher(string root, ExclusionFilters filters);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public string get_Root();
    private string GetFullPath(string path);
    private bool IsUnderneathRoot(string fullPath);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
}
