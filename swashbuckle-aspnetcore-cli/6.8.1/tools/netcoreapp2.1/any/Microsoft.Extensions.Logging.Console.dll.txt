public class Microsoft.Extensions.Logging.Console.ConfigurationConsoleLoggerSettings : object {
    private IConfiguration _configuration;
    [CompilerGeneratedAttribute]
private IChangeToken <ChangeToken>k__BackingField;
    public IChangeToken ChangeToken { get; private set; }
    public bool IncludeScopes { get; }
    public ConfigurationConsoleLoggerSettings(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public sealed virtual IChangeToken get_ChangeToken();
    [CompilerGeneratedAttribute]
private void set_ChangeToken(IChangeToken value);
    public sealed virtual bool get_IncludeScopes();
    public sealed virtual IConsoleLoggerSettings Reload();
    public sealed virtual bool TryGetSwitch(string name, LogLevel& level);
}
public class Microsoft.Extensions.Logging.Console.ConsoleLogger : object {
    private static string _loglevelPadding;
    private static string _messagePadding;
    private static string _newLineWithMessagePadding;
    private Nullable`1<ConsoleColor> DefaultConsoleColor;
    private ConsoleLoggerProcessor _queueProcessor;
    private Func`3<string, LogLevel, bool> _filter;
    [ThreadStaticAttribute]
private static StringBuilder _logBuilder;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ScopeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableColors>k__BackingField;
    public IConsole Console { get; public set; }
    public Func`3<string, LogLevel, bool> Filter { get; public set; }
    public string Name { get; }
    [ObsoleteAttribute("Changing this property has no effect. Use ConsoleLoggerOptions.IncludeScopes instead")]
public bool IncludeScopes { get; public set; }
    internal IExternalScopeProvider ScopeProvider { get; internal set; }
    public bool DisableColors { get; public set; }
    private static ConsoleLogger();
    public ConsoleLogger(string name, Func`3<string, LogLevel, bool> filter, bool includeScopes);
    public ConsoleLogger(string name, Func`3<string, LogLevel, bool> filter, IExternalScopeProvider scopeProvider);
    internal ConsoleLogger(string name, Func`3<string, LogLevel, bool> filter, IExternalScopeProvider scopeProvider, ConsoleLoggerProcessor loggerProcessor);
    public IConsole get_Console();
    public void set_Console(IConsole value);
    public Func`3<string, LogLevel, bool> get_Filter();
    public void set_Filter(Func`3<string, LogLevel, bool> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
internal IExternalScopeProvider get_ScopeProvider();
    [CompilerGeneratedAttribute]
internal void set_ScopeProvider(IExternalScopeProvider value);
    [CompilerGeneratedAttribute]
public bool get_DisableColors();
    [CompilerGeneratedAttribute]
public void set_DisableColors(bool value);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public virtual void WriteMessage(LogLevel logLevel, string logName, int eventId, string message, Exception exception);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
    private static string GetLogLevelString(LogLevel logLevel);
    private ConsoleColors GetLogLevelConsoleColors(LogLevel logLevel);
    private void GetScopeInformation(StringBuilder stringBuilder);
}
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions : object {
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableColors>k__BackingField;
    public bool IncludeScopes { get; public set; }
    public bool DisableColors { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableColors();
    [CompilerGeneratedAttribute]
public void set_DisableColors(bool value);
}
internal class Microsoft.Extensions.Logging.Console.ConsoleLoggerOptionsSetup : ConfigureFromConfigurationOptions`1<ConsoleLoggerOptions> {
    public ConsoleLoggerOptionsSetup(ILoggerProviderConfiguration`1<ConsoleLoggerProvider> providerConfiguration);
}
[ProviderAliasAttribute("Console")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider : object {
    private ConcurrentDictionary`2<string, ConsoleLogger> _loggers;
    private Func`3<string, LogLevel, bool> _filter;
    private IConsoleLoggerSettings _settings;
    private ConsoleLoggerProcessor _messageQueue;
    private static Func`3<string, LogLevel, bool> trueFilter;
    private static Func`3<string, LogLevel, bool> falseFilter;
    private IDisposable _optionsReloadToken;
    private bool _includeScopes;
    private bool _disableColors;
    private IExternalScopeProvider _scopeProvider;
    public ConsoleLoggerProvider(Func`3<string, LogLevel, bool> filter, bool includeScopes);
    public ConsoleLoggerProvider(Func`3<string, LogLevel, bool> filter, bool includeScopes, bool disableColors);
    public ConsoleLoggerProvider(IOptionsMonitor`1<ConsoleLoggerOptions> options);
    public ConsoleLoggerProvider(IConsoleLoggerSettings settings);
    private static ConsoleLoggerProvider();
    private void ReloadLoggerOptions(ConsoleLoggerOptions options);
    private void OnConfigurationReload(object state);
    public sealed virtual ILogger CreateLogger(string name);
    private ConsoleLogger CreateLoggerImplementation(string name);
    private Func`3<string, LogLevel, bool> GetFilter(string name, IConsoleLoggerSettings settings);
    [IteratorStateMachineAttribute("Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider/<GetKeyPrefixes>d__19")]
private IEnumerable`1<string> GetKeyPrefixes(string name);
    private IExternalScopeProvider GetScopeProvider();
    public sealed virtual void Dispose();
    public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerSettings : object {
    [CompilerGeneratedAttribute]
private IChangeToken <ChangeToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableColors>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, LogLevel> <Switches>k__BackingField;
    public IChangeToken ChangeToken { get; public set; }
    public bool IncludeScopes { get; public set; }
    public bool DisableColors { get; public set; }
    public IDictionary`2<string, LogLevel> Switches { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IChangeToken get_ChangeToken();
    [CompilerGeneratedAttribute]
public void set_ChangeToken(IChangeToken value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableColors();
    [CompilerGeneratedAttribute]
public void set_DisableColors(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, LogLevel> get_Switches();
    [CompilerGeneratedAttribute]
public void set_Switches(IDictionary`2<string, LogLevel> value);
    public sealed virtual IConsoleLoggerSettings Reload();
    public sealed virtual bool TryGetSwitch(string name, LogLevel& level);
}
[ObsoleteAttribute("Use LoggerExternalScopeProviderinstead")]
public class Microsoft.Extensions.Logging.Console.ConsoleLogScope : object {
    private string _name;
    private object _state;
    [CompilerGeneratedAttribute]
private ConsoleLogScope <Parent>k__BackingField;
    private static AsyncLocal`1<ConsoleLogScope> _value;
    public ConsoleLogScope Parent { get; private set; }
    public static ConsoleLogScope Current { get; public set; }
    internal ConsoleLogScope(string name, object state);
    private static ConsoleLogScope();
    [CompilerGeneratedAttribute]
public ConsoleLogScope get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(ConsoleLogScope value);
    public static void set_Current(ConsoleLogScope value);
    public static ConsoleLogScope get_Current();
    public static IDisposable Push(string name, object state);
    public virtual string ToString();
}
public interface Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings {
    public bool IncludeScopes { get; }
    public IChangeToken ChangeToken { get; }
    public abstract virtual bool get_IncludeScopes();
    public abstract virtual IChangeToken get_ChangeToken();
    public abstract virtual bool TryGetSwitch(string name, LogLevel& level);
    public abstract virtual IConsoleLoggerSettings Reload();
}
public class Microsoft.Extensions.Logging.Console.Internal.AnsiLogConsole : object {
    private StringBuilder _outputBuilder;
    private IAnsiSystemConsole _systemConsole;
    public AnsiLogConsole(IAnsiSystemConsole systemConsole);
    public sealed virtual void Write(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public sealed virtual void WriteLine(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public sealed virtual void Flush();
    private static string GetForegroundColorEscapeCode(ConsoleColor color);
    private static string GetBackgroundColorEscapeCode(ConsoleColor color);
}
public class Microsoft.Extensions.Logging.Console.Internal.ConsoleLoggerProcessor : object {
    private static int _maxQueuedMessages;
    private BlockingCollection`1<LogMessageEntry> _messageQueue;
    private Thread _outputThread;
    public IConsole Console;
    public virtual void EnqueueMessage(LogMessageEntry message);
    internal virtual void WriteMessage(LogMessageEntry message);
    private void ProcessLogQueue();
    public sealed virtual void Dispose();
}
public interface Microsoft.Extensions.Logging.Console.Internal.IAnsiSystemConsole {
    public abstract virtual void Write(string message);
    public abstract virtual void WriteLine(string message);
}
public interface Microsoft.Extensions.Logging.Console.Internal.IConsole {
    public abstract virtual void Write(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public abstract virtual void WriteLine(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public abstract virtual void Flush();
}
public class Microsoft.Extensions.Logging.Console.Internal.LogMessageEntry : ValueType {
    public string LevelString;
    public Nullable`1<ConsoleColor> LevelBackground;
    public Nullable`1<ConsoleColor> LevelForeground;
    public Nullable`1<ConsoleColor> MessageColor;
    public string Message;
}
public class Microsoft.Extensions.Logging.Console.Internal.WindowsLogConsole : object {
    private void SetColor(Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    private void ResetColor();
    public sealed virtual void Write(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public sealed virtual void WriteLine(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public sealed virtual void Flush();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.ConsoleLoggerExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder, Action`1<ConsoleLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggerFactory AddConsole(ILoggerFactory factory);
    [ExtensionAttribute]
public static ILoggerFactory AddConsole(ILoggerFactory factory, bool includeScopes);
    [ExtensionAttribute]
public static ILoggerFactory AddConsole(ILoggerFactory factory, LogLevel minLevel);
    [ExtensionAttribute]
public static ILoggerFactory AddConsole(ILoggerFactory factory, LogLevel minLevel, bool includeScopes);
    [ExtensionAttribute]
public static ILoggerFactory AddConsole(ILoggerFactory factory, Func`3<string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static ILoggerFactory AddConsole(ILoggerFactory factory, Func`3<string, LogLevel, bool> filter, bool includeScopes);
    [ExtensionAttribute]
public static ILoggerFactory AddConsole(ILoggerFactory factory, IConsoleLoggerSettings settings);
    [ExtensionAttribute]
public static ILoggerFactory AddConsole(ILoggerFactory factory, IConfiguration configuration);
}
