public class Swashbuckle.Application.ApiKeySchemeBuilder : SecuritySchemeBuilder {
    private string _description;
    private string _name;
    private string _in;
    public ApiKeySchemeBuilder Description(string description);
    public ApiKeySchemeBuilder Name(string name);
    public ApiKeySchemeBuilder In(string in);
    internal virtual SecurityScheme Build();
}
public class Swashbuckle.Application.BasicAuthSchemeBuilder : SecuritySchemeBuilder {
    private string _description;
    public BasicAuthSchemeBuilder Description(string description);
    internal virtual SecurityScheme Build();
}
public class Swashbuckle.Application.ContactBuilder : object {
    private string _name;
    private string _url;
    private string _email;
    public ContactBuilder Name(string name);
    public ContactBuilder Url(string url);
    public ContactBuilder Email(string email);
    internal Contact Build();
}
public enum Swashbuckle.Application.DocExpansion : Enum {
    public int value__;
    public static DocExpansion None;
    public static DocExpansion List;
    public static DocExpansion Full;
}
[ExtensionAttribute]
public static class Swashbuckle.Application.HttpConfigurationExtensions : object {
    private static string DefaultRouteTemplate;
    private static HttpConfigurationExtensions();
    [ExtensionAttribute]
public static SwaggerEnabledConfiguration EnableSwagger(HttpConfiguration httpConfig, Action`1<SwaggerDocsConfig> configure);
    [ExtensionAttribute]
public static SwaggerEnabledConfiguration EnableSwagger(HttpConfiguration httpConfig, string routeTemplate, Action`1<SwaggerDocsConfig> configure);
    [ExtensionAttribute]
internal static JsonSerializerSettings SerializerSettingsOrDefault(HttpConfiguration httpConfig);
}
public class Swashbuckle.Application.HttpRouteDirectionConstraint : object {
    private HttpRouteDirection _allowedDirection;
    public HttpRouteDirectionConstraint(HttpRouteDirection allowedDirection);
    public sealed virtual bool Match(HttpRequestMessage request, IHttpRoute route, string parameterName, IDictionary`2<string, object> values, HttpRouteDirection routeDirection);
}
public class Swashbuckle.Application.InfoBuilder : object {
    private string _version;
    private string _title;
    private string _description;
    private string _termsOfService;
    private ContactBuilder _contactBuilder;
    private LicenseBuilder _licenseBuilder;
    public InfoBuilder(string version, string title);
    public InfoBuilder Description(string description);
    public InfoBuilder TermsOfService(string termsOfService);
    public InfoBuilder Contact(Action`1<ContactBuilder> contact);
    public InfoBuilder License(Action`1<LicenseBuilder> license);
    internal Info Build();
}
public class Swashbuckle.Application.LicenseBuilder : object {
    private string _name;
    private string _url;
    public LicenseBuilder Name(string name);
    public LicenseBuilder Url(string url);
    internal License Build();
}
public class Swashbuckle.Application.OAuth2SchemeBuilder : SecuritySchemeBuilder {
    private string _description;
    private string _flow;
    private string _authorizationUrl;
    private string _tokenUrl;
    private IDictionary`2<string, string> _scopes;
    public OAuth2SchemeBuilder Description(string description);
    public OAuth2SchemeBuilder Flow(string flow);
    public OAuth2SchemeBuilder AuthorizationUrl(string authorizationUrl);
    public OAuth2SchemeBuilder TokenUrl(string tokenUrl);
    public OAuth2SchemeBuilder Scopes(Action`1<IDictionary`2<string, string>> configure);
    internal virtual SecurityScheme Build();
}
public class Swashbuckle.Application.RedirectHandler : HttpMessageHandler {
    private Func`2<HttpRequestMessage, string> _rootUrlResolver;
    private string _redirectPath;
    public RedirectHandler(Func`2<HttpRequestMessage, string> rootUrlResolver, string redirectPath);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public abstract class Swashbuckle.Application.SecuritySchemeBuilder : object {
    internal abstract virtual SecurityScheme Build();
}
public class Swashbuckle.Application.SwaggerDocsConfig : object {
    private VersionInfoBuilder _versionInfoBuilder;
    private Func`3<ApiDescription, string, bool> _versionSupportResolver;
    private IEnumerable`1<string> _schemes;
    private IDictionary`2<string, SecuritySchemeBuilder> _securitySchemeBuilders;
    private bool _prettyPrint;
    private bool _ignoreObsoleteActions;
    private Func`2<ApiDescription, string> _groupingKeySelector;
    private IComparer`1<string> _groupingKeyComparer;
    private IDictionary`2<Type, Func`1<Schema>> _customSchemaMappings;
    private IList`1<Func`1<ISchemaFilter>> _schemaFilters;
    private IList`1<Func`1<IModelFilter>> _modelFilters;
    private Func`2<Type, string> _schemaIdSelector;
    private bool _ignoreObsoleteProperties;
    private bool _describeAllEnumsAsStrings;
    private bool _describeStringEnumsInCamelCase;
    private bool _applyFiltersToAllSchemas;
    private IList`1<Func`1<IOperationFilter>> _operationFilters;
    private IList`1<Func`1<IDocumentFilter>> _documentFilters;
    private IList`1<Func`1<XPathDocument>> _xmlDocFactories;
    private Func`2<IEnumerable`1<ApiDescription>, ApiDescription> _conflictingActionsResolver;
    private Func`2<HttpRequestMessage, string> _rootUrlResolver;
    private Func`2<ISwaggerProvider, ISwaggerProvider> _customProviderFactory;
    [CompilerGeneratedAttribute]
private static Func`2<Type, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, SecuritySchemeBuilder>, string> CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, SecuritySchemeBuilder>, SecurityScheme> CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static Func`2<Func`1<IModelFilter>, IModelFilter> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<Func`1<IOperationFilter>, IOperationFilter> CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static Func`2<Func`1<ISchemaFilter>, ISchemaFilter> CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static Func`2<Func`1<IDocumentFilter>, IDocumentFilter> CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, Info>, string> CS$<>9__CachedAnonymousMethodDelegate16;
    public InfoBuilder SingleApiVersion(string version, string title);
    public void MultipleApiVersions(Func`3<ApiDescription, string, bool> versionSupportResolver, Action`1<VersionInfoBuilder> configure);
    public void Schemes(IEnumerable`1<string> schemes);
    public BasicAuthSchemeBuilder BasicAuth(string name);
    public ApiKeySchemeBuilder ApiKey(string name);
    public OAuth2SchemeBuilder OAuth2(string name);
    public void PrettyPrint();
    public void IgnoreObsoleteActions();
    public void GroupActionsBy(Func`2<ApiDescription, string> keySelector);
    public void OrderActionGroupsBy(IComparer`1<string> keyComparer);
    public void MapType(Func`1<Schema> factory);
    public void MapType(Type type, Func`1<Schema> factory);
    public void SchemaFilter();
    public void SchemaFilter(Func`1<ISchemaFilter> factory);
    internal void ModelFilter();
    internal void ModelFilter(Func`1<IModelFilter> factory);
    public void SchemaId(Func`2<Type, string> schemaIdStrategy);
    public void UseFullTypeNameInSchemaIds();
    public void DescribeAllEnumsAsStrings(bool camelCase);
    public void IgnoreObsoleteProperties();
    [ObsoleteAttribute("This will be removed in 6.0.0; it will always be true.")]
public void ApplyFiltersToAllSchemas();
    public void OperationFilter();
    public void OperationFilter(Func`1<IOperationFilter> factory);
    public void DocumentFilter();
    public void DocumentFilter(Func`1<IDocumentFilter> factory);
    public void IncludeXmlComments(Func`1<XPathDocument> xmlDocFactory);
    public void IncludeXmlComments(string filePath);
    public void ResolveConflictingActions(Func`2<IEnumerable`1<ApiDescription>, ApiDescription> conflictingActionsResolver);
    public void RootUrl(Func`2<HttpRequestMessage, string> rootUrlResolver);
    public void CustomProvider(Func`2<ISwaggerProvider, ISwaggerProvider> customProviderFactory);
    internal ISwaggerProvider GetSwaggerProvider(HttpRequestMessage swaggerRequest);
    internal string GetRootUrl(HttpRequestMessage swaggerRequest);
    internal IEnumerable`1<string> GetApiVersions();
    internal Formatting GetFormatting();
    public static string DefaultRootUrlResolver(HttpRequestMessage request);
    private static string GetHeaderValue(HttpRequestMessage request, string headerName);
    [CompilerGeneratedAttribute]
private static ISchemaFilter <SchemaFilter>b__0();
    [CompilerGeneratedAttribute]
private static IModelFilter <ModelFilter>b__1();
    [CompilerGeneratedAttribute]
private static string <UseFullTypeNameInSchemaIds>b__2(Type t);
    [CompilerGeneratedAttribute]
private static IOperationFilter <OperationFilter>b__4();
    [CompilerGeneratedAttribute]
private static IDocumentFilter <DocumentFilter>b__5();
    [CompilerGeneratedAttribute]
private static string <GetSwaggerProvider>b__9(KeyValuePair`2<string, SecuritySchemeBuilder> kvp);
    [CompilerGeneratedAttribute]
private static SecurityScheme <GetSwaggerProvider>b__a(KeyValuePair`2<string, SecuritySchemeBuilder> kvp);
    [CompilerGeneratedAttribute]
private static IModelFilter <GetSwaggerProvider>b__b(Func`1<IModelFilter> factory);
    [CompilerGeneratedAttribute]
private static IOperationFilter <GetSwaggerProvider>b__c(Func`1<IOperationFilter> factory);
    [CompilerGeneratedAttribute]
private static ISchemaFilter <GetSwaggerProvider>b__d(Func`1<ISchemaFilter> factory);
    [CompilerGeneratedAttribute]
private static IDocumentFilter <GetSwaggerProvider>b__e(Func`1<IDocumentFilter> factory);
    [CompilerGeneratedAttribute]
private static string <GetApiVersions>b__15(KeyValuePair`2<string, Info> entry);
}
public class Swashbuckle.Application.SwaggerDocsHandler : HttpMessageHandler {
    private SwaggerDocsConfig _config;
    public SwaggerDocsHandler(SwaggerDocsConfig config);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private HttpContent ContentFor(HttpRequestMessage request, SwaggerDocument swaggerDoc);
    private IEnumerable`1<MediaTypeFormatter> GetSupportedSwaggerFormatters();
    private Task`1<HttpResponseMessage> TaskFor(HttpResponseMessage response);
}
public class Swashbuckle.Application.SwaggerEnabledConfiguration : object {
    private static string DefaultRouteTemplate;
    private HttpConfiguration _httpConfig;
    private Func`2<HttpRequestMessage, string> _rootUrlResolver;
    private IEnumerable`1<string> _discoveryPaths;
    public SwaggerEnabledConfiguration(HttpConfiguration httpConfig, Func`2<HttpRequestMessage, string> rootUrlResolver, IEnumerable`1<string> discoveryPaths);
    private static SwaggerEnabledConfiguration();
    public void EnableSwaggerUi(Action`1<SwaggerUiConfig> configure);
    public void EnableSwaggerUi(string routeTemplate, Action`1<SwaggerUiConfig> configure);
}
public class Swashbuckle.Application.SwaggerUiConfig : object {
    private Dictionary`2<string, EmbeddedAssetDescriptor> _pathToAssetMap;
    private Dictionary`2<string, string> _templateParams;
    private Func`2<HttpRequestMessage, string> _rootUrlResolver;
    public SwaggerUiConfig(IEnumerable`1<string> discoveryPaths, Func`2<HttpRequestMessage, string> rootUrlResolver);
    public void InjectStylesheet(Assembly resourceAssembly, string resourceName, string media, bool isTemplate);
    public void BooleanValues(IEnumerable`1<string> values);
    public void DocumentTitle(string title);
    public void SetValidatorUrl(string url);
    public void DisableValidator();
    public void InjectJavaScript(Assembly resourceAssembly, string resourceName, bool isTemplate);
    public void DocExpansion(DocExpansion docExpansion);
    public void SupportedSubmitMethods(String[] methods);
    public void CustomAsset(string path, Assembly resourceAssembly, string resourceName, bool isTemplate);
    public void EnableDiscoveryUrlSelector();
    public void EnableOAuth2Support(string clientId, string realm, string appName);
    public void EnableOAuth2Support(string clientId, string clientSecret, string realm, string appName, string scopeSeperator, Dictionary`2<string, string> additionalQueryStringParams);
    public void EnableApiKeySupport(string name, string apiKeyIn);
    internal IAssetProvider GetSwaggerUiProvider();
    internal string GetRootUrl(HttpRequestMessage swaggerRequest);
    private void MapPathsForSwaggerUiAssets();
}
public class Swashbuckle.Application.SwaggerUiHandler : HttpMessageHandler {
    private SwaggerUiConfig _config;
    public SwaggerUiHandler(SwaggerUiConfig config);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private HttpContent ContentFor(Asset webAsset);
    private Task`1<HttpResponseMessage> TaskFor(HttpResponseMessage response);
}
public class Swashbuckle.Application.VendorExtensionsConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Swashbuckle.Application.VersionInfoBuilder : object {
    private Dictionary`2<string, InfoBuilder> _versionInfos;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, InfoBuilder>, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, InfoBuilder>, Info> CS$<>9__CachedAnonymousMethodDelegate3;
    public InfoBuilder Version(string version, string title);
    public IDictionary`2<string, Info> Build();
    [CompilerGeneratedAttribute]
private static string <Build>b__0(KeyValuePair`2<string, InfoBuilder> entry);
    [CompilerGeneratedAttribute]
private static Info <Build>b__1(KeyValuePair`2<string, InfoBuilder> entry);
}
public class Swashbuckle.Swagger.Annotations.ApplySwaggerOperationAttributes : object {
    public sealed virtual void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription);
}
public class Swashbuckle.Swagger.Annotations.ApplySwaggerOperationFilterAttributes : object {
    public sealed virtual void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription);
}
public class Swashbuckle.Swagger.Annotations.ApplySwaggerResponseAttributes : object {
    [CompilerGeneratedAttribute]
private static Func`2<SwaggerResponseAttribute, int> CS$<>9__CachedAnonymousMethodDelegate2;
    public sealed virtual void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription);
    private string InferDescriptionFrom(string statusCode);
    [CompilerGeneratedAttribute]
private static int <Apply>b__1(SwaggerResponseAttribute attr);
}
public class Swashbuckle.Swagger.Annotations.ApplySwaggerSchemaFilterAttributes : object {
    public sealed virtual void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type);
}
[AttributeUsageAttribute("64")]
public class Swashbuckle.Swagger.Annotations.SwaggerOperationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Schemes>k__BackingField;
    public string OperationId { get; public set; }
    public String[] Tags { get; public set; }
    public String[] Schemes { get; public set; }
    public SwaggerOperationAttribute(string operationId);
    [CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Schemes();
    [CompilerGeneratedAttribute]
public void set_Schemes(String[] value);
}
[AttributeUsageAttribute("68")]
public class Swashbuckle.Swagger.Annotations.SwaggerOperationFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <FilterType>k__BackingField;
    public Type FilterType { get; private set; }
    public SwaggerOperationFilterAttribute(Type filterType);
    [CompilerGeneratedAttribute]
public Type get_FilterType();
    [CompilerGeneratedAttribute]
private void set_FilterType(Type value);
}
[AttributeUsageAttribute("68")]
public class Swashbuckle.Swagger.Annotations.SwaggerResponseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public int StatusCode { get; private set; }
    public string Description { get; public set; }
    public Type Type { get; public set; }
    public SwaggerResponseAttribute(HttpStatusCode statusCode);
    public SwaggerResponseAttribute(HttpStatusCode statusCode, string description, Type type);
    public SwaggerResponseAttribute(int statusCode);
    public SwaggerResponseAttribute(int statusCode, string description, Type type);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
[AttributeUsageAttribute("68")]
public class Swashbuckle.Swagger.Annotations.SwaggerResponseRemoveDefaultsAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Swashbuckle.Swagger.Annotations.SwaggerSchemaFilterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <FilterType>k__BackingField;
    public Type FilterType { get; private set; }
    public SwaggerSchemaFilterAttribute(Type filterType);
    [CompilerGeneratedAttribute]
public Type get_FilterType();
    [CompilerGeneratedAttribute]
private void set_FilterType(Type value);
}
[ExtensionAttribute]
public static class Swashbuckle.Swagger.ApiDescriptionExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<MediaTypeFormatter, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<MediaTypeHeaderValue, string> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<MediaTypeFormatter, IEnumerable`1<string>> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<MediaTypeHeaderValue, string> CS$<>9__CachedAnonymousMethodDelegate7;
    [ExtensionAttribute]
public static string FriendlyId(ApiDescription apiDescription);
    [ExtensionAttribute]
public static IEnumerable`1<string> Consumes(ApiDescription apiDescription);
    [ExtensionAttribute]
public static IEnumerable`1<string> Produces(ApiDescription apiDescription);
    [ExtensionAttribute]
public static string RelativePathSansQueryString(ApiDescription apiDescription);
    [ExtensionAttribute]
public static Type ResponseType(ApiDescription apiDesc);
    [ExtensionAttribute]
public static bool IsObsolete(ApiDescription apiDescription);
    [ExtensionAttribute]
public static IEnumerable`1<TAttribute> GetControllerAndActionAttributes(ApiDescription apiDesc);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <Consumes>b__0(MediaTypeFormatter formatter);
    [CompilerGeneratedAttribute]
private static string <Consumes>b__1(MediaTypeHeaderValue mediaType);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<string> <Produces>b__4(MediaTypeFormatter formatter);
    [CompilerGeneratedAttribute]
private static string <Produces>b__5(MediaTypeHeaderValue mediaType);
}
public class Swashbuckle.Swagger.Contact : object {
    public string name;
    public string url;
    public string email;
}
public class Swashbuckle.Swagger.ExternalDocs : object {
    public string description;
    public string url;
}
public class Swashbuckle.Swagger.FromUriParams.HandleFromUriParams : object {
    [CompilerGeneratedAttribute]
private static Func`2<Parameter, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Parameter, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public sealed virtual void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription);
    private static void HandleFromUriArrayParams(Operation operation);
    private void HandleFromUriObjectParams(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription);
    private void ExtractAndAddQueryParams(Schema sourceSchema, string sourceQualifier, Nullable`1<bool> sourceRequired, SchemaRegistry schemaRegistry, IList`1<Parameter> operationParams);
    [CompilerGeneratedAttribute]
private static bool <HandleFromUriArrayParams>b__0(Parameter param);
    [CompilerGeneratedAttribute]
private static bool <HandleFromUriObjectParams>b__2(Parameter param);
}
public class Swashbuckle.Swagger.Header : PartialSchema {
    public string description;
}
public interface Swashbuckle.Swagger.IDocumentFilter {
    public abstract virtual void Apply(SwaggerDocument swaggerDoc, SchemaRegistry schemaRegistry, IApiExplorer apiExplorer);
}
public interface Swashbuckle.Swagger.IModelFilter {
    public abstract virtual void Apply(Schema model, ModelFilterContext context);
}
public class Swashbuckle.Swagger.Info : object {
    public string version;
    public string title;
    public string description;
    public string termsOfService;
    public Contact contact;
    public License license;
    public Dictionary`2<string, object> vendorExtensions;
}
public interface Swashbuckle.Swagger.IOperationFilter {
    public abstract virtual void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription);
}
public interface Swashbuckle.Swagger.ISchemaFilter {
    public abstract virtual void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type);
}
public interface Swashbuckle.Swagger.ISwaggerProvider {
    public abstract virtual SwaggerDocument GetSwagger(string rootUrl, string apiVersion);
}
[ExtensionAttribute]
public static class Swashbuckle.Swagger.JsonContractExtensions : object {
    private static IEnumerable`1<string> AmbiguousTypeNames;
    private static JsonContractExtensions();
    [ExtensionAttribute]
public static bool IsSelfReferencing(JsonDictionaryContract dictionaryContract);
    [ExtensionAttribute]
public static bool IsSelfReferencing(JsonArrayContract arrayContract);
    [ExtensionAttribute]
public static bool IsAmbiguous(JsonObjectContract objectContract);
}
[ExtensionAttribute]
public static class Swashbuckle.Swagger.JsonPropertyExtensions : object {
    [ExtensionAttribute]
public static bool IsRequired(JsonProperty jsonProperty);
    [ExtensionAttribute]
public static bool IsObsolete(JsonProperty jsonProperty);
    [ExtensionAttribute]
public static bool HasAttribute(JsonProperty jsonProperty);
    [ExtensionAttribute]
public static PropertyInfo PropertyInfo(JsonProperty jsonProperty);
}
public class Swashbuckle.Swagger.License : object {
    public string name;
    public string url;
}
public class Swashbuckle.Swagger.ModelFilterContext : object {
    [CompilerGeneratedAttribute]
private Type <SystemType>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonObjectContract <JsonObjectContract>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaRegistry <SchemaRegistry>k__BackingField;
    public Type SystemType { get; private set; }
    public JsonObjectContract JsonObjectContract { get; private set; }
    public SchemaRegistry SchemaRegistry { get; private set; }
    public ModelFilterContext(Type systemType, JsonObjectContract jsonObjectContract, SchemaRegistry schemaRegistry);
    [CompilerGeneratedAttribute]
public Type get_SystemType();
    [CompilerGeneratedAttribute]
private void set_SystemType(Type value);
    [CompilerGeneratedAttribute]
public JsonObjectContract get_JsonObjectContract();
    [CompilerGeneratedAttribute]
private void set_JsonObjectContract(JsonObjectContract value);
    [CompilerGeneratedAttribute]
public SchemaRegistry get_SchemaRegistry();
    [CompilerGeneratedAttribute]
private void set_SchemaRegistry(SchemaRegistry value);
}
public class Swashbuckle.Swagger.Operation : object {
    public IList`1<string> tags;
    public string summary;
    public string description;
    public ExternalDocs externalDocs;
    public string operationId;
    public IList`1<string> consumes;
    public IList`1<string> produces;
    public IList`1<Parameter> parameters;
    public IDictionary`2<string, Response> responses;
    public IList`1<string> schemes;
    public Nullable`1<bool> deprecated;
    public IList`1<IDictionary`2<string, IEnumerable`1<string>>> security;
    public Dictionary`2<string, object> vendorExtensions;
}
public class Swashbuckle.Swagger.Parameter : PartialSchema {
    [JsonPropertyAttribute("$ref")]
public string ref;
    public string name;
    public string in;
    public string description;
    public Nullable`1<bool> required;
    public Schema schema;
}
public class Swashbuckle.Swagger.PartialSchema : object {
    public string type;
    public string format;
    public PartialSchema items;
    public string collectionFormat;
    public object default;
    public Nullable`1<int> maximum;
    public Nullable`1<bool> exclusiveMaximum;
    public Nullable`1<int> minimum;
    public Nullable`1<bool> exclusiveMinimum;
    public Nullable`1<int> maxLength;
    public Nullable`1<int> minLength;
    public string pattern;
    public Nullable`1<int> maxItems;
    public Nullable`1<int> minItems;
    public Nullable`1<bool> uniqueItems;
    public IList`1<object> enum;
    public Nullable`1<int> multipleOf;
    public Dictionary`2<string, object> vendorExtensions;
}
public class Swashbuckle.Swagger.PathItem : object {
    [JsonPropertyAttribute("$ref")]
public string ref;
    public Operation get;
    public Operation put;
    public Operation post;
    public Operation delete;
    public Operation options;
    public Operation head;
    public Operation patch;
    public IList`1<Parameter> parameters;
    public Dictionary`2<string, object> vendorExtensions;
}
public class Swashbuckle.Swagger.Response : object {
    public string description;
    public Schema schema;
    public IDictionary`2<string, Header> headers;
    public object examples;
    public Dictionary`2<string, object> vendorExtensions;
}
public class Swashbuckle.Swagger.Schema : object {
    [JsonPropertyAttribute("$ref")]
public string ref;
    public string format;
    public string title;
    public string description;
    public object default;
    public Nullable`1<int> multipleOf;
    public Nullable`1<int> maximum;
    public Nullable`1<bool> exclusiveMaximum;
    public Nullable`1<int> minimum;
    public Nullable`1<bool> exclusiveMinimum;
    public Nullable`1<int> maxLength;
    public Nullable`1<int> minLength;
    public string pattern;
    public Nullable`1<int> maxItems;
    public Nullable`1<int> minItems;
    public Nullable`1<bool> uniqueItems;
    public Nullable`1<int> maxProperties;
    public Nullable`1<int> minProperties;
    public IList`1<string> required;
    public IList`1<object> enum;
    public string type;
    public Schema items;
    public IList`1<Schema> allOf;
    public IDictionary`2<string, Schema> properties;
    public Schema additionalProperties;
    public string discriminator;
    public Nullable`1<bool> readOnly;
    public Xml xml;
    public ExternalDocs externalDocs;
    public object example;
    public Dictionary`2<string, object> vendorExtensions;
}
[ExtensionAttribute]
public static class Swashbuckle.Swagger.SchemaExtensions : object {
    [ExtensionAttribute]
public static Schema WithValidationProperties(Schema schema, JsonProperty jsonProperty);
    [ExtensionAttribute]
public static void PopulateFrom(PartialSchema partialSchema, Schema schema);
}
public class Swashbuckle.Swagger.SchemaRegistry : object {
    private JsonSerializerSettings _jsonSerializerSettings;
    private IDictionary`2<Type, Func`1<Schema>> _customSchemaMappings;
    private IEnumerable`1<ISchemaFilter> _schemaFilters;
    private IEnumerable`1<IModelFilter> _modelFilters;
    private Func`2<Type, string> _schemaIdSelector;
    private bool _ignoreObsoleteProperties;
    private bool _describeAllEnumsAsStrings;
    private bool _describeStringEnumsInCamelCase;
    private bool _applyFiltersToAllSchemas;
    private IContractResolver _contractResolver;
    private IDictionary`2<Type, WorkItem> _workItems;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, Schema> <Definitions>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Type, WorkItem>, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<Type, WorkItem>, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static Func`2<JsonProperty, bool> CS$<>9__CachedAnonymousMethodDelegate22;
    [CompilerGeneratedAttribute]
private static Func`2<JsonProperty, string> CS$<>9__CachedAnonymousMethodDelegate23;
    [CompilerGeneratedAttribute]
private static Func`2<JsonProperty, bool> CS$<>9__CachedAnonymousMethodDelegate24;
    [CompilerGeneratedAttribute]
private static Func`2<JsonProperty, string> CS$<>9__CachedAnonymousMethodDelegate25;
    public IDictionary`2<string, Schema> Definitions { get; private set; }
    public SchemaRegistry(JsonSerializerSettings jsonSerializerSettings, IDictionary`2<Type, Func`1<Schema>> customSchemaMappings, IEnumerable`1<ISchemaFilter> schemaFilters, IEnumerable`1<IModelFilter> modelFilters, bool ignoreObsoleteProperties, Func`2<Type, string> schemaIdSelector, bool describeAllEnumsAsStrings, bool describeStringEnumsInCamelCase, bool applyFiltersToAllSchemas);
    public Schema GetOrRegister(Type type);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, Schema> get_Definitions();
    [CompilerGeneratedAttribute]
private void set_Definitions(IDictionary`2<string, Schema> value);
    private Schema CreateInlineSchema(Type type);
    private Schema CreateDefinitionSchema(Type type);
    private Schema CreatePrimitiveSchema(JsonPrimitiveContract primitiveContract);
    private Schema CreateEnumSchema(JsonPrimitiveContract primitiveContract, Type type);
    private Schema CreateDictionarySchema(JsonDictionaryContract dictionaryContract);
    private Schema CreateArraySchema(JsonArrayContract arrayContract);
    private Schema CreateObjectSchema(JsonObjectContract jsonContract);
    private Schema CreateRefSchema(Type type);
    private Schema FilterSchema(Schema schema, JsonContract jsonContract);
    [CompilerGeneratedAttribute]
private static bool <GetOrRegister>b__0(KeyValuePair`2<Type, WorkItem> entry);
    [CompilerGeneratedAttribute]
private static bool <GetOrRegister>b__1(KeyValuePair`2<Type, WorkItem> entry);
    [CompilerGeneratedAttribute]
private static string <CreateEnumSchema>b__10(string name);
    [CompilerGeneratedAttribute]
private static bool <CreateObjectSchema>b__1c(JsonProperty p);
    [CompilerGeneratedAttribute]
private bool <CreateObjectSchema>b__1d(JsonProperty p);
    [CompilerGeneratedAttribute]
private static string <CreateObjectSchema>b__1e(JsonProperty prop);
    [CompilerGeneratedAttribute]
private Schema <CreateObjectSchema>b__1f(JsonProperty prop);
    [CompilerGeneratedAttribute]
private static bool <CreateObjectSchema>b__20(JsonProperty prop);
    [CompilerGeneratedAttribute]
private static string <CreateObjectSchema>b__21(JsonProperty propInfo);
}
public class Swashbuckle.Swagger.SecurityScheme : object {
    public string type;
    public string description;
    public string name;
    public string in;
    public string flow;
    public string authorizationUrl;
    public string tokenUrl;
    public IDictionary`2<string, string> scopes;
    public Dictionary`2<string, object> vendorExtensions;
}
[ExtensionAttribute]
internal static class Swashbuckle.Swagger.StringExtensions : object {
    [ExtensionAttribute]
internal static string ToCamelCase(string value);
}
public class Swashbuckle.Swagger.SwaggerDocument : object {
    public string swagger;
    public Info info;
    public string host;
    public string basePath;
    public IList`1<string> schemes;
    public IList`1<string> consumes;
    public IList`1<string> produces;
    public IDictionary`2<string, PathItem> paths;
    public IDictionary`2<string, Schema> definitions;
    public IDictionary`2<string, Parameter> parameters;
    public IDictionary`2<string, Response> responses;
    public IDictionary`2<string, SecurityScheme> securityDefinitions;
    public IList`1<IDictionary`2<string, IEnumerable`1<string>>> security;
    public IList`1<Tag> tags;
    public ExternalDocs externalDocs;
    public Dictionary`2<string, object> vendorExtensions;
}
public class Swashbuckle.Swagger.SwaggerGenerator : object {
    private IApiExplorer _apiExplorer;
    private JsonSerializerSettings _jsonSerializerSettings;
    private IDictionary`2<string, Info> _apiVersions;
    private SwaggerGeneratorOptions _options;
    [CompilerGeneratedAttribute]
private static Func`2<ApiDescription, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<IGrouping`2<string, ApiDescription>, string> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<ApiDescription, string> CS$<>9__CachedAnonymousMethodDelegated;
    public SwaggerGenerator(IApiExplorer apiExplorer, JsonSerializerSettings jsonSerializerSettings, IDictionary`2<string, Info> apiVersions, SwaggerGeneratorOptions options);
    public sealed virtual SwaggerDocument GetSwagger(string rootUrl, string apiVersion);
    private IEnumerable`1<ApiDescription> GetApiDescriptionsFor(string apiVersion);
    private PathItem CreatePathItem(IEnumerable`1<ApiDescription> apiDescriptions, SchemaRegistry schemaRegistry);
    private Operation CreateOperation(ApiDescription apiDesc, SchemaRegistry schemaRegistry);
    private string GetParameterLocation(ApiDescription apiDesc, ApiParameterDescription paramDesc);
    private Parameter CreateParameter(string location, ApiParameterDescription paramDesc, SchemaRegistry schemaRegistry);
    [CompilerGeneratedAttribute]
private bool <GetSwagger>b__1(ApiDescription apiDesc);
    [CompilerGeneratedAttribute]
private static string <GetSwagger>b__2(ApiDescription apiDesc);
    [CompilerGeneratedAttribute]
private static string <GetSwagger>b__3(IGrouping`2<string, ApiDescription> group);
    [CompilerGeneratedAttribute]
private static string <CreatePathItem>b__c(ApiDescription apiDesc);
}
public class Swashbuckle.Swagger.SwaggerGeneratorOptions : object {
    [CompilerGeneratedAttribute]
private Func`3<ApiDescription, string, bool> <VersionSupportResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Schemes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SecurityScheme> <SecurityDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreObsoleteActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ApiDescription, string> <GroupingKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer`1<string> <GroupingKeyComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, Func`1<Schema>> <CustomSchemaMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISchemaFilter> <SchemaFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IModelFilter> <ModelFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreObsoleteProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, string> <SchemaIdSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DescribeAllEnumsAsStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DescribeStringEnumsInCamelCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyFiltersToAllSchemas>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IOperationFilter> <OperationFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDocumentFilter> <DocumentFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<ApiDescription>, ApiDescription> <ConflictingActionsResolver>k__BackingField;
    public Func`3<ApiDescription, string, bool> VersionSupportResolver { get; private set; }
    public IEnumerable`1<string> Schemes { get; private set; }
    public IDictionary`2<string, SecurityScheme> SecurityDefinitions { get; private set; }
    public bool IgnoreObsoleteActions { get; private set; }
    public Func`2<ApiDescription, string> GroupingKeySelector { get; private set; }
    public IComparer`1<string> GroupingKeyComparer { get; private set; }
    public IDictionary`2<Type, Func`1<Schema>> CustomSchemaMappings { get; private set; }
    public IEnumerable`1<ISchemaFilter> SchemaFilters { get; private set; }
    public IEnumerable`1<IModelFilter> ModelFilters { get; private set; }
    public bool IgnoreObsoleteProperties { get; private set; }
    public Func`2<Type, string> SchemaIdSelector { get; private set; }
    public bool DescribeAllEnumsAsStrings { get; private set; }
    public bool DescribeStringEnumsInCamelCase { get; private set; }
    public bool ApplyFiltersToAllSchemas { get; private set; }
    public IEnumerable`1<IOperationFilter> OperationFilters { get; private set; }
    public IEnumerable`1<IDocumentFilter> DocumentFilters { get; private set; }
    public Func`2<IEnumerable`1<ApiDescription>, ApiDescription> ConflictingActionsResolver { get; private set; }
    public SwaggerGeneratorOptions(Func`3<ApiDescription, string, bool> versionSupportResolver, IEnumerable`1<string> schemes, IDictionary`2<string, SecurityScheme> securityDefinitions, bool ignoreObsoleteActions, Func`2<ApiDescription, string> groupingKeySelector, IComparer`1<string> groupingKeyComparer, IDictionary`2<Type, Func`1<Schema>> customSchemaMappings, IEnumerable`1<ISchemaFilter> schemaFilters, IEnumerable`1<IModelFilter> modelFilters, bool ignoreObsoleteProperties, Func`2<Type, string> schemaIdSelector, bool describeAllEnumsAsStrings, bool describeStringEnumsInCamelCase, bool applyFiltersToAllSchemas, IEnumerable`1<IOperationFilter> operationFilters, IEnumerable`1<IDocumentFilter> documentFilters, Func`2<IEnumerable`1<ApiDescription>, ApiDescription> conflictingActionsResolver);
    [CompilerGeneratedAttribute]
public Func`3<ApiDescription, string, bool> get_VersionSupportResolver();
    [CompilerGeneratedAttribute]
private void set_VersionSupportResolver(Func`3<ApiDescription, string, bool> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Schemes();
    [CompilerGeneratedAttribute]
private void set_Schemes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, SecurityScheme> get_SecurityDefinitions();
    [CompilerGeneratedAttribute]
private void set_SecurityDefinitions(IDictionary`2<string, SecurityScheme> value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreObsoleteActions();
    [CompilerGeneratedAttribute]
private void set_IgnoreObsoleteActions(bool value);
    [CompilerGeneratedAttribute]
public Func`2<ApiDescription, string> get_GroupingKeySelector();
    [CompilerGeneratedAttribute]
private void set_GroupingKeySelector(Func`2<ApiDescription, string> value);
    [CompilerGeneratedAttribute]
public IComparer`1<string> get_GroupingKeyComparer();
    [CompilerGeneratedAttribute]
private void set_GroupingKeyComparer(IComparer`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<Type, Func`1<Schema>> get_CustomSchemaMappings();
    [CompilerGeneratedAttribute]
private void set_CustomSchemaMappings(IDictionary`2<Type, Func`1<Schema>> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ISchemaFilter> get_SchemaFilters();
    [CompilerGeneratedAttribute]
private void set_SchemaFilters(IEnumerable`1<ISchemaFilter> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IModelFilter> get_ModelFilters();
    [CompilerGeneratedAttribute]
private void set_ModelFilters(IEnumerable`1<IModelFilter> value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreObsoleteProperties();
    [CompilerGeneratedAttribute]
private void set_IgnoreObsoleteProperties(bool value);
    [CompilerGeneratedAttribute]
public Func`2<Type, string> get_SchemaIdSelector();
    [CompilerGeneratedAttribute]
private void set_SchemaIdSelector(Func`2<Type, string> value);
    [CompilerGeneratedAttribute]
public bool get_DescribeAllEnumsAsStrings();
    [CompilerGeneratedAttribute]
private void set_DescribeAllEnumsAsStrings(bool value);
    [CompilerGeneratedAttribute]
public bool get_DescribeStringEnumsInCamelCase();
    [CompilerGeneratedAttribute]
private void set_DescribeStringEnumsInCamelCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_ApplyFiltersToAllSchemas();
    [CompilerGeneratedAttribute]
private void set_ApplyFiltersToAllSchemas(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IOperationFilter> get_OperationFilters();
    [CompilerGeneratedAttribute]
private void set_OperationFilters(IEnumerable`1<IOperationFilter> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDocumentFilter> get_DocumentFilters();
    [CompilerGeneratedAttribute]
private void set_DocumentFilters(IEnumerable`1<IDocumentFilter> value);
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<ApiDescription>, ApiDescription> get_ConflictingActionsResolver();
    [CompilerGeneratedAttribute]
private void set_ConflictingActionsResolver(Func`2<IEnumerable`1<ApiDescription>, ApiDescription> value);
    private string DefaultGroupingKeySelector(ApiDescription apiDescription);
    private static string DefaultSchemaIdSelector(Type type);
    private ApiDescription DefaultConflictingActionsResolver(IEnumerable`1<ApiDescription> apiDescriptions);
}
public class Swashbuckle.Swagger.Tag : object {
    public string name;
    public string description;
    public ExternalDocs externalDocs;
    public Dictionary`2<string, object> vendorExtensions;
}
[ExtensionAttribute]
public static class Swashbuckle.Swagger.TypeExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<FieldInfo, string> CS$<>9__CachedAnonymousMethodDelegate5;
    [ExtensionAttribute]
public static string FriendlyId(Type type, bool fullyQualified);
    [ExtensionAttribute]
public static string FullNameSansTypeParameters(Type type);
    [ExtensionAttribute]
public static String[] GetEnumNamesForSerialization(Type enumType);
    [CompilerGeneratedAttribute]
private static string <GetEnumNamesForSerialization>b__4(FieldInfo fieldInfo);
}
public class Swashbuckle.Swagger.UnknownApiVersion : Exception {
    public UnknownApiVersion(string apiVersion);
}
public class Swashbuckle.Swagger.Xml : object {
    public string name;
    public string namespace;
    public string prefix;
    public Nullable`1<bool> attribute;
    public Nullable`1<bool> wrapped;
}
public class Swashbuckle.Swagger.XmlComments.ApplyXmlActionComments : object {
    private static string MemberXPath;
    private static string SummaryXPath;
    private static string RemarksXPath;
    private static string ParamXPath;
    private static string ResponseXPath;
    private XPathDocument _xmlDoc;
    public ApplyXmlActionComments(string filePath);
    public ApplyXmlActionComments(XPathDocument xmlDoc);
    public sealed virtual void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription);
    private static void ApplyParamComments(Operation operation, XPathNavigator methodNode, MethodInfo method);
    private static void ApplyResponseComments(Operation operation, XPathNavigator methodNode);
    private static bool HasBoundName(ParameterInfo paramInfo, string name);
}
public class Swashbuckle.Swagger.XmlComments.ApplyXmlTypeComments : object {
    private static string MemberXPath;
    private static string SummaryTag;
    private XPathDocument _xmlDoc;
    public ApplyXmlTypeComments(string filePath);
    public ApplyXmlTypeComments(XPathDocument xmlDoc);
    public sealed virtual void Apply(Schema model, ModelFilterContext context);
    private static void ApplyPropertyComments(XPathNavigator navigator, Schema propertySchema, PropertyInfo propertyInfo);
}
public class Swashbuckle.Swagger.XmlComments.XmlCommentsIdHelper : object {
    public static string GetCommentIdForMethod(MethodInfo methodInfo);
    public static string GetCommentIdForType(Type type);
    public static string GetCommentIdForProperty(PropertyInfo propertyInfo);
    private static void AppendFullTypeName(Type type, StringBuilder builder, bool expandGenericArgs);
    private static void AppendTypeName(Type type, StringBuilder builder, bool expandGenericArgs);
    public static void ExpandGenericArgsIfAny(Type type, StringBuilder builder);
    private static void AppendMethodName(MethodInfo methodInfo, StringBuilder builder);
    private static void AppendPropertyName(PropertyInfo propertyInfo, StringBuilder builder);
}
public static class Swashbuckle.Swagger.XmlComments.XmlTextHelper : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    public static string NormalizeIndentation(string xmlText);
    private static string GetCommonLeadingWhitespace(String[] lines);
    [CompilerGeneratedAttribute]
private static bool <NormalizeIndentation>b__0(string x);
    [CompilerGeneratedAttribute]
private static bool <GetCommonLeadingWhitespace>b__2(string x);
}
[ExtensionAttribute]
public static class Swashbuckle.Swagger.XmlComments.XPathNavigatorExtensions : object {
    private static Regex ParamPattern;
    private static Regex ConstPattern;
    private static XPathNavigatorExtensions();
    [ExtensionAttribute]
public static string ExtractContent(XPathNavigator node);
    private static string GetConstRefName(Match match);
    private static string GetParamRefName(Match match);
}
public class Swashbuckle.SwaggerUi.Asset : object {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MediaType>k__BackingField;
    public Stream Stream { get; private set; }
    public string MediaType { get; private set; }
    public Asset(Stream stream, string mediaType);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public string get_MediaType();
    [CompilerGeneratedAttribute]
private void set_MediaType(string value);
}
public class Swashbuckle.SwaggerUi.AssetNotFound : Exception {
    public AssetNotFound(string message);
}
public class Swashbuckle.SwaggerUi.EmbeddedAssetDescriptor : object {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTemplate>k__BackingField;
    public Assembly Assembly { get; private set; }
    public string Name { get; private set; }
    public bool IsTemplate { get; private set; }
    public EmbeddedAssetDescriptor(Assembly containingAssembly, string name, bool isTemplate);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(Assembly value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsTemplate();
    [CompilerGeneratedAttribute]
private void set_IsTemplate(bool value);
}
public class Swashbuckle.SwaggerUi.EmbeddedAssetProvider : object {
    private IDictionary`2<string, EmbeddedAssetDescriptor> _pathToAssetMap;
    private IDictionary`2<string, string> _templateParams;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, string> CS$<>9__CachedAnonymousMethodDelegate3;
    public EmbeddedAssetProvider(IDictionary`2<string, EmbeddedAssetDescriptor> pathToAssetMap, IDictionary`2<string, string> templateParams);
    public sealed virtual Asset GetAsset(string rootUrl, string path);
    private Stream GetEmbeddedResourceStreamFor(EmbeddedAssetDescriptor resourceDescriptor, string rootUrl);
    private static string InferMediaTypeFrom(string path);
    [CompilerGeneratedAttribute]
private static string <GetEmbeddedResourceStreamFor>b__0(KeyValuePair`2<string, string> entry);
    [CompilerGeneratedAttribute]
private static string <GetEmbeddedResourceStreamFor>b__1(KeyValuePair`2<string, string> entry);
}
public interface Swashbuckle.SwaggerUi.IAssetProvider {
    public abstract virtual Asset GetAsset(string rootUrl, string assetPath);
}
[ExtensionAttribute]
public static class Swashbuckle.SwaggerUi.StreamExtensions : object {
    [ExtensionAttribute]
public static Stream FindAndReplace(Stream stream, IDictionary`2<string, string> replacements);
}
