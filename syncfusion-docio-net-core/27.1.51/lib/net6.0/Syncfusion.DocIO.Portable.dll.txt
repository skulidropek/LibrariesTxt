[CLSCompliantAttribute("False")]
internal class DocInfo : object {
    private Fib m_fib;
    private WPTablesData m_tablesData;
    private WordFKPData m_fkpData;
    private WordImageWriter m_imageWriter;
    internal Fib Fib { get; }
    internal WPTablesData TablesData { get; }
    internal WordFKPData FkpData { get; }
    internal WordImageWriter ImageWriter { get; }
    internal DocInfo(StreamsManager streamsManager);
    internal Fib get_Fib();
    internal WPTablesData get_TablesData();
    internal WordFKPData get_FkpData();
    internal WordImageWriter get_ImageWriter();
    internal WordImageReader GetImageReader(StreamsManager streamsManager, int offset, WordDocument doc);
    internal void Close();
}
public enum Syncfusion.CompoundFile.DocIO.BuiltInProperty : Enum {
    public int value__;
    public static BuiltInProperty Title;
    public static BuiltInProperty Subject;
    public static BuiltInProperty Author;
    public static BuiltInProperty Keywords;
    public static BuiltInProperty Comments;
    public static BuiltInProperty Template;
    public static BuiltInProperty LastAuthor;
    public static BuiltInProperty RevisionNumber;
    public static BuiltInProperty EditTime;
    public static BuiltInProperty LastPrinted;
    public static BuiltInProperty CreationDate;
    public static BuiltInProperty LastSaveDate;
    public static BuiltInProperty PageCount;
    public static BuiltInProperty WordCount;
    public static BuiltInProperty CharCount;
    public static BuiltInProperty Thumbnail;
    public static BuiltInProperty ApplicationName;
    public static BuiltInProperty Security;
    public static BuiltInProperty Category;
    public static BuiltInProperty PresentationTarget;
    public static BuiltInProperty ByteCount;
    public static BuiltInProperty LineCount;
    public static BuiltInProperty ParagraphCount;
    public static BuiltInProperty SlideCount;
    public static BuiltInProperty NoteCount;
    public static BuiltInProperty HiddenCount;
    public static BuiltInProperty MultimediaClipCount;
    public static BuiltInProperty ScaleCrop;
    public static BuiltInProperty HeadingPair;
    public static BuiltInProperty DocParts;
    public static BuiltInProperty Manager;
    public static BuiltInProperty Company;
    public static BuiltInProperty LinksDirty;
    public static BuiltInProperty CharactersWithSpaces;
}
public class Syncfusion.CompoundFile.DocIO.ClipboardData : object {
    public int Format;
    public Byte[] Data;
    public sealed virtual object Clone();
    public int Serialize(Stream stream);
    public void Parse(Stream stream);
}
internal class Syncfusion.CompoundFile.DocIO.CloneUtils : object {
    public static Int32[] CloneIntArray(Int32[] array);
    public static UInt16[] CloneUshortArray(UInt16[] array);
    public static String[] CloneStringArray(String[] array);
    public static Object[] CloneArray(Object[] array);
    public static object CloneCloneable(ICloneable toClone);
    public static Byte[] CloneByteArray(Byte[] arr);
    public static Dictionary`2<TKey, TValue> CloneHash(Dictionary`2<TKey, TValue> hash);
    public static Dictionary`2<int, int> CloneHash(Dictionary`2<int, int> hash);
    public static Stream CloneStream(Stream stream);
}
internal abstract class Syncfusion.CompoundFile.DocIO.CompoundStream : Stream {
    private string m_strStreamName;
    public string Name { get; protected set; }
    public CompoundStream(string streamName);
    public virtual void CopyTo(CompoundStream stream);
    public string get_Name();
    protected void set_Name(string value);
}
public interface Syncfusion.CompoundFile.DocIO.ICloneable {
    public abstract virtual object Clone();
}
internal interface Syncfusion.CompoundFile.DocIO.ICompoundFile {
    public ICompoundStorage RootStorage { get; }
    public Directory Directory { get; }
    public abstract virtual ICompoundStorage get_RootStorage();
    public abstract virtual Directory get_Directory();
    public abstract virtual void Flush();
    public abstract virtual void Save(Stream stream);
}
internal interface Syncfusion.CompoundFile.DocIO.ICompoundStorage {
    public String[] Streams { get; }
    public String[] Storages { get; }
    public string Name { get; }
    public abstract virtual CompoundStream CreateStream(string streamName);
    public abstract virtual CompoundStream OpenStream(string streamName);
    public abstract virtual void DeleteStream(string streamName);
    public abstract virtual bool ContainsStream(string streamName);
    public abstract virtual ICompoundStorage CreateStorage(string storageName);
    public abstract virtual ICompoundStorage OpenStorage(string storageName);
    public abstract virtual void DeleteStorage(string storageName);
    public abstract virtual bool ContainsStorage(string storageName);
    public abstract virtual void Flush();
    public abstract virtual String[] get_Streams();
    public abstract virtual String[] get_Storages();
    public abstract virtual string get_Name();
    public abstract virtual void InsertCopy(ICompoundStorage storageToCopy);
    public abstract virtual void InsertCopy(CompoundStream streamToCopy);
}
public interface Syncfusion.CompoundFile.DocIO.IDocIOCloneable {
    public abstract virtual object Clone();
}
internal interface Syncfusion.CompoundFile.DocIO.IDocProperty {
    public bool IsBuiltIn { get; }
    public BuiltInProperty PropertyId { get; }
    public string Name { get; }
    public object Value { get; public set; }
    public bool Boolean { get; public set; }
    public int Integer { get; public set; }
    public int Int32 { get; public set; }
    public double Double { get; public set; }
    public string Text { get; public set; }
    public DateTime DateTime { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public string LinkSource { get; public set; }
    public bool LinkToContent { get; public set; }
    public abstract virtual bool get_IsBuiltIn();
    public abstract virtual BuiltInProperty get_PropertyId();
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual bool get_Boolean();
    public abstract virtual void set_Boolean(bool value);
    public abstract virtual int get_Integer();
    public abstract virtual void set_Integer(int value);
    public abstract virtual int get_Int32();
    public abstract virtual void set_Int32(int value);
    public abstract virtual double get_Double();
    public abstract virtual void set_Double(double value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual DateTime get_DateTime();
    public abstract virtual void set_DateTime(DateTime value);
    public abstract virtual TimeSpan get_TimeSpan();
    public abstract virtual void set_TimeSpan(TimeSpan value);
    public abstract virtual string get_LinkSource();
    public abstract virtual void set_LinkSource(string value);
    public abstract virtual bool get_LinkToContent();
    public abstract virtual void set_LinkToContent(bool value);
}
internal class Syncfusion.CompoundFile.DocIO.Net.CompoundFile : object {
    private static string RootEntryName;
    private Stream m_stream;
    private FileHeader m_header;
    private FAT m_fat;
    private DIF m_dif;
    private Directory m_directory;
    private CompoundStorage m_root;
    private Stream m_shortStream;
    private Stream m_miniFatStream;
    private FAT m_miniFat;
    private bool m_bDirectMode;
    internal FileHeader Header { get; }
    public Directory Directory { get; }
    public ICompoundStorage Root { get; }
    internal DIF DIF { get; }
    internal FAT Fat { get; }
    internal Stream BaseStream { get; }
    internal bool DirectMode { get; internal set; }
    public ICompoundStorage RootStorage { get; }
    public CompoundFile(Stream stream);
    internal FileHeader get_Header();
    public sealed virtual Directory get_Directory();
    public ICompoundStorage get_Root();
    internal DIF get_DIF();
    internal FAT get_Fat();
    internal Stream get_BaseStream();
    internal bool get_DirectMode();
    internal void set_DirectMode(bool value);
    public void Open(Stream stream);
    private void InitializeVariables();
    internal void ReadSector(Byte[] buffer, int offset, int sectorIndex, FileHeader header);
    internal Stream GetEntryStream(DirectoryEntry entry);
    internal void SetEntryStream(DirectoryEntry entry, Stream stream);
    private void SetEntryLongStream(DirectoryEntry entry, Stream stream);
    private void SetEntryShortStream(DirectoryEntry entry, Stream stream);
    private void WriteData(Stream destination, int startSector, Stream stream, FAT fat);
    private void AllocateSectors(DirectoryEntry entry, int iAllocatedSectors, int iRequiredSectors, FAT fat);
    private int AllocateSectors(int iSector, int iAllocatedSectors, int iRequiredSectors, FAT fat);
    [CLSCompliantAttribute("False")]
public static long GetSectorOffset(int sectorIndex, ushort sectorShift);
    [CLSCompliantAttribute("False")]
public static long GetSectorOffset(int sectorIndex, ushort sectorShift, int headerSize);
    public static bool CheckHeader(Stream stream);
    internal DirectoryEntry AllocateDirectoryEntry(string streamName, EntryType entryType);
    internal void RemoveItem(DirectoryEntry directoryEntry);
    internal int ReadData(DirectoryEntry entry, long position, Byte[] buffer, int length);
    internal void WriteData(DirectoryEntry entry, long position, Byte[] buffer, int offset, int length);
    private void GetOffsets(DirectoryEntry entry, long position, Int32& iCurrentOffset, Int32& iCurrentSector);
    public sealed virtual ICompoundStorage get_RootStorage();
    public sealed virtual void Flush();
    public sealed virtual void Save(Stream stream);
    private void WriteStreamTo(Stream destination);
    private void SaveMiniStream();
    private void SerializeDirectory();
    public sealed virtual void Dispose();
}
public class Syncfusion.CompoundFile.DocIO.Net.CompoundFileException : Exception {
    private static string DefaultExceptionMessage;
    public CompoundFileException(string message);
}
internal class Syncfusion.CompoundFile.DocIO.Net.CompoundStorage : object {
    private CompoundFile m_parentFile;
    private SortedList`2<string, ICompoundItem> m_nodes;
    private DirectoryEntry m_entry;
    private List`1<string> m_arrStorages;
    private List`1<string> m_arrStreams;
    private List`1<int> m_entryIndexes;
    public String[] Streams { get; }
    public String[] Storages { get; }
    public string Name { get; }
    public DirectoryEntry Entry { get; }
    public CompoundStorage(CompoundFile parent, string name, int entryIndex);
    public CompoundStorage(CompoundFile parentFile, DirectoryEntry entry);
    private void AddItem(int entryIndex);
    public sealed virtual CompoundStream CreateStream(string streamName);
    public sealed virtual CompoundStream OpenStream(string streamName);
    public sealed virtual void DeleteStream(string streamName);
    public sealed virtual bool ContainsStream(string streamName);
    public sealed virtual ICompoundStorage CreateStorage(string storageName);
    public sealed virtual ICompoundStorage OpenStorage(string storageName);
    private void Open();
    public sealed virtual void DeleteStorage(string storageName);
    public sealed virtual void Dispose();
    public sealed virtual bool ContainsStorage(string storageName);
    public sealed virtual void Flush();
    private void UpdateDirectory(RBTreeNode node);
    private int GetNodeId(RBTreeNode node);
    public sealed virtual String[] get_Streams();
    public sealed virtual String[] get_Storages();
    public sealed virtual string get_Name();
    public sealed virtual DirectoryEntry get_Entry();
    public sealed virtual void InsertCopy(ICompoundStorage storageToCopy);
    public sealed virtual void InsertCopy(CompoundStream streamToCopy);
}
internal class Syncfusion.CompoundFile.DocIO.Net.CompoundStorageWrapper : object {
    private CompoundStorage m_storage;
    public String[] Streams { get; }
    public String[] Storages { get; }
    public string Name { get; }
    public DirectoryEntry Entry { get; }
    public CompoundStorageWrapper(CompoundStorage wrapped);
    public sealed virtual void Dispose();
    public sealed virtual CompoundStream CreateStream(string streamName);
    public sealed virtual CompoundStream OpenStream(string streamName);
    public sealed virtual void DeleteStream(string streamName);
    public sealed virtual bool ContainsStream(string streamName);
    public sealed virtual ICompoundStorage CreateStorage(string storageName);
    public sealed virtual ICompoundStorage OpenStorage(string storageName);
    public sealed virtual void DeleteStorage(string storageName);
    public sealed virtual bool ContainsStorage(string storageName);
    public sealed virtual void Flush();
    public sealed virtual String[] get_Streams();
    public sealed virtual String[] get_Storages();
    public sealed virtual string get_Name();
    public DirectoryEntry get_Entry();
    public sealed virtual void InsertCopy(ICompoundStorage storageToCopy);
    internal void UpdateStorageGuid(ICompoundStorage storageToCopy);
    public sealed virtual void InsertCopy(CompoundStream streamToCopy);
}
internal class Syncfusion.CompoundFile.DocIO.Net.CompoundStreamDirect : CompoundStreamNet {
    private static int MinimumSize;
    private long m_lPosition;
    public long Length { get; }
    public long Position { get; public set; }
    public CompoundStreamDirect(CompoundFile file, DirectoryEntry entry);
    public virtual void Open();
    public virtual int Read(Byte[] buffer, int offset, int length);
    public virtual void Write(Byte[] buffer, int offset, int length);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
}
internal class Syncfusion.CompoundFile.DocIO.Net.CompoundStreamNet : CompoundStream {
    private CompoundFile m_parentFile;
    private DirectoryEntry m_entry;
    private Stream m_stream;
    public DirectoryEntry Entry { get; }
    protected Stream Stream { get; protected set; }
    public CompoundFile ParentFile { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public CompoundStreamNet(CompoundFile file, DirectoryEntry entry);
    public sealed virtual DirectoryEntry get_Entry();
    protected Stream get_Stream();
    protected void set_Stream(Stream value);
    public CompoundFile get_ParentFile();
    public virtual void Open();
    public virtual int Read(Byte[] buffer, int offset, int length);
    public virtual void Write(Byte[] buffer, int offset, int length);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public void Dispose();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    protected virtual void Dispose(bool disposing);
}
internal class Syncfusion.CompoundFile.DocIO.Net.CompoundStreamWrapper : CompoundStream {
    private CompoundStream m_stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CompoundStreamWrapper(CompoundStream wrapped);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
internal class Syncfusion.CompoundFile.DocIO.Net.DIF : object {
    public static int SectorsInHeader;
    private List`1<int> m_arrSectorID;
    private List`1<int> m_arrDifSectors;
    public List`1<int> SectorIds { get; }
    public DIF(Stream stream, FileHeader header);
    public List`1<int> get_SectorIds();
    internal void Write(Stream stream, FileHeader header);
    internal void AllocateSectors(int fatSectorsRequired, FAT fat);
    private void AllocateDifSectors(int additionalSectors, FAT fat);
    private void RemoveLastSectors(int sectorCount, FAT fat);
    private void AddDifSectors(int sectorCount, FAT fat);
}
internal class Syncfusion.CompoundFile.DocIO.Net.Directory : object {
    private List`1<DirectoryEntry> m_lstEntries;
    public List`1<DirectoryEntry> Entries { get; }
    public Directory(Byte[] data);
    public List`1<DirectoryEntry> get_Entries();
    public int FindEmpty();
    public void Add(DirectoryEntry entry);
    public void Write(Stream stream);
}
internal class Syncfusion.CompoundFile.DocIO.Net.DirectoryEntry : object {
    public static int SizeInFile;
    private static int StreamNameSize;
    private string m_strName;
    private EntryType m_entryType;
    private byte m_color;
    private int m_leftId;
    private int m_rightId;
    private int m_childId;
    private Guid m_storageGuid;
    private int m_iStorageFlags;
    private DateTime m_dateCreate;
    private DateTime m_dateModify;
    private int m_iStartSector;
    private UInt32 m_uiSize;
    private int m_iReserved;
    private int m_iEntryId;
    public int LastSector;
    public int LastOffset;
    public string Name { get; public set; }
    public EntryType Type { get; public set; }
    public byte Color { get; public set; }
    public int LeftId { get; public set; }
    public int RightId { get; public set; }
    public int ChildId { get; public set; }
    public Guid StorageGuid { get; public set; }
    public int StorageFlags { get; public set; }
    public DateTime DateCreate { get; public set; }
    public DateTime DateModify { get; public set; }
    public int StartSector { get; public set; }
    public UInt32 Size { get; public set; }
    public int Reserved { get; public set; }
    public int EntryId { get; internal set; }
    public DirectoryEntry(string name, EntryType type, int entryId);
    public DirectoryEntry(Byte[] data, int offset, int entryId);
    public string get_Name();
    public void set_Name(string value);
    public EntryType get_Type();
    public void set_Type(EntryType value);
    public byte get_Color();
    public void set_Color(byte value);
    public int get_LeftId();
    public void set_LeftId(int value);
    public int get_RightId();
    public void set_RightId(int value);
    public int get_ChildId();
    public void set_ChildId(int value);
    public Guid get_StorageGuid();
    public void set_StorageGuid(Guid value);
    public int get_StorageFlags();
    public void set_StorageFlags(int value);
    public DateTime get_DateCreate();
    public void set_DateCreate(DateTime value);
    public DateTime get_DateModify();
    public void set_DateModify(DateTime value);
    public int get_StartSector();
    public void set_StartSector(int value);
    public UInt32 get_Size();
    public void set_Size(UInt32 value);
    public int get_Reserved();
    public void set_Reserved(int value);
    public int get_EntryId();
    internal void set_EntryId(int value);
    public void Write(Stream stream);
}
internal class Syncfusion.CompoundFile.DocIO.Net.DocumentPropertyCollection : object {
    private static int ByteOrder;
    private static Guid FirstSectionGuid;
    private int m_iFirstSectionOffset;
    private List`1<PropertySection> m_lstSections;
    public List`1<PropertySection> Sections { get; }
    public DocumentPropertyCollection(Stream stream);
    private static DocumentPropertyCollection();
    public List`1<PropertySection> get_Sections();
    private void ParseSections(Stream stream);
    private void ReadHeader(Stream stream);
    private void WriteSections(Stream stream);
    private void WriteHeader(Stream stream);
    public void Serialize(Stream stream);
}
internal class Syncfusion.CompoundFile.DocIO.Net.FAT : object {
    private List`1<int> m_lstFatChains;
    private List`1<int> m_freeSectors;
    private ushort m_usSectorShift;
    private Stream m_stream;
    private int m_iHeaderSize;
    public int SectorSize { get; }
    public FAT(Stream parentStream, ushort sectorShift, int headerSize);
    public FAT(Stream parentStream, ushort sectorShift, Stream fatStreamToParse, int headerSize);
    public FAT(CompoundFile file, Stream stream, DIF dif, FileHeader header);
    public int get_SectorSize();
    public Byte[] GetStream(Stream stream, int firstSector, CompoundFile file);
    internal int NextSector(int sectorIndex);
    internal void CloseChain(int iSector);
    internal int EnlargeChain(int sector, int sectorCount);
    internal void FreeSector(int sector);
    private void FreeLastSector();
    private int AllocateNewSectors(Int32& sector, int count);
    private int AddSectors(int count);
    private int AllocateFreeSectors(Int32& sector, int count);
    public void Write(Stream stream, DIF dif, FileHeader header);
    private void AllocateFatSectors(int fatSectorsCount, DIF dif);
    private int FillNextSector(int fatItemToStart, Byte[] arrSector);
    internal int AllocateSector(int sectorType);
    internal int AddSector();
    internal void WriteSimple(MemoryStream stream, int sectorSize);
    internal long GetSectorOffset(int sectorIndex);
    internal int GetChainLength(int firstSector);
}
internal class Syncfusion.CompoundFile.DocIO.Net.FileHeader : object {
    public static int HeaderSize;
    private static int SignatureSize;
    private static Byte[] DefaultSignature;
    internal static int ShortSize;
    internal static int IntSize;
    private Byte[] m_arrSignature;
    private Guid m_classId;
    private ushort m_usMinorVersion;
    private ushort m_usDllVersion;
    private ushort m_usByteOrder;
    private ushort m_usSectorShift;
    private ushort m_usMiniSectorShift;
    private ushort m_usReserved;
    private UInt32 m_uiReserved1;
    private UInt32 m_uiReserved2;
    private int m_iFatSectorsNumber;
    private int m_iDirectorySectorStart;
    private int m_iSignature;
    private UInt32 m_uiMiniSectorCutoff;
    private int m_iMiniFastStart;
    private int m_iMiniFatNumber;
    private int m_iDifStart;
    private int m_iDifNumber;
    private Int32[] m_arrFatStart;
    public int SectorSize { get; }
    public ushort MinorVersion { get; }
    public ushort DllVersion { get; }
    public ushort ByteOrder { get; }
    public ushort SectorShift { get; }
    public ushort MiniSectorShift { get; }
    public ushort Reserved { get; }
    public UInt32 Reserved1 { get; }
    public UInt32 Reserved2 { get; }
    public int FatSectorsNumber { get; public set; }
    public int DirectorySectorStart { get; public set; }
    public int Signature { get; }
    public UInt32 MiniSectorCutoff { get; }
    public int MiniFastStart { get; public set; }
    public int MiniFatNumber { get; public set; }
    public int DifStart { get; public set; }
    public int DifNumber { get; public set; }
    public Int32[] FatStart { get; }
    public FileHeader(Stream stream);
    private static FileHeader();
    public void Serialize(Stream stream);
    public static bool CheckSignature(Stream stream);
    private void CheckSignature();
    private static bool CheckSignature(Byte[] arrSignature);
    private void WriteUInt16(Byte[] buffer, int offset, ushort value);
    private void WriteUInt32(Byte[] buffer, int offset, UInt32 value);
    private void WriteInt32(Byte[] buffer, int offset, int value);
    public int get_SectorSize();
    public ushort get_MinorVersion();
    public ushort get_DllVersion();
    public ushort get_ByteOrder();
    public ushort get_SectorShift();
    public ushort get_MiniSectorShift();
    public ushort get_Reserved();
    public UInt32 get_Reserved1();
    public UInt32 get_Reserved2();
    public int get_FatSectorsNumber();
    public void set_FatSectorsNumber(int value);
    public int get_DirectorySectorStart();
    public void set_DirectorySectorStart(int value);
    public int get_Signature();
    public UInt32 get_MiniSectorCutoff();
    public int get_MiniFastStart();
    public void set_MiniFastStart(int value);
    public int get_MiniFatNumber();
    public void set_MiniFatNumber(int value);
    public int get_DifStart();
    public void set_DifStart(int value);
    public int get_DifNumber();
    public void set_DifNumber(int value);
    public Int32[] get_FatStart();
    internal void Write(Stream stream);
    internal long GetSectorOffset(int sectorIndex);
    internal long GetSectorOffset(int sectorIndex, int headerSize);
}
[FlagsAttribute]
internal enum Syncfusion.CompoundFile.DocIO.Net.GlobalAllocFlags : Enum {
    public int value__;
    public static GlobalAllocFlags GMEM_FIXED;
    public static GlobalAllocFlags GMEM_MOVEABLE;
    public static GlobalAllocFlags GMEM_ZEROINIT;
    public static GlobalAllocFlags GMEM_NODISCARD;
}
internal interface Syncfusion.CompoundFile.DocIO.Net.ICompoundItem {
    public DirectoryEntry Entry { get; }
    public abstract virtual DirectoryEntry get_Entry();
    public abstract virtual void Flush();
}
internal interface Syncfusion.CompoundFile.DocIO.Net.IPropertyData {
    public object Value { get; }
    public VarEnum Type { get; }
    public string Name { get; }
    public int Id { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual VarEnum get_Type();
    public abstract virtual string get_Name();
    public abstract virtual int get_Id();
    public abstract virtual void set_Id(int value);
    public abstract virtual bool SetValue(object value, PropertyType type);
}
internal class Syncfusion.CompoundFile.DocIO.Net.ItemNamesComparer : object {
    public sealed virtual int Compare(object x, object y);
    public sealed virtual int Compare(string x, string y);
}
internal enum Syncfusion.CompoundFile.DocIO.Net.LOCKTYPE : Enum {
    public int value__;
    public static LOCKTYPE LOCK_WRITE;
    public static LOCKTYPE LOCK_EXCLUSIVE;
    public static LOCKTYPE LOCK_ONLYONCE;
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.CompoundFile.DocIO.Net.MapCollection : object {
    private RBTreeNode m_MyHead;
    private int m_size;
    private IComparer m_comparer;
    public RBTreeNode Empty { get; }
    public int Count { get; }
    public object Item { get; public set; }
    public MapCollection(IComparer comparer);
    public RBTreeNode get_Empty();
    public int get_Count();
    public object get_Item(object key);
    public void set_Item(object key, object value);
    protected void Initialize();
    public void Clear();
    public void Add(object key, object value);
    public bool Contains(object key);
    public void Remove(object key);
    private RBTreeNode begin();
    public static RBTreeNode Min(RBTreeNode node);
    public static RBTreeNode Max(RBTreeNode node);
    public static RBTreeNode Inc(RBTreeNode node);
    public static RBTreeNode Dec(RBTreeNode node);
    protected RBTreeNode LBound(object key);
    protected RBTreeNode UBound(object key);
    protected void LRotate(RBTreeNode _where);
    protected void RRotate(RBTreeNode _where);
    protected void Erase(RBTreeNode _root);
    protected void Insert(bool _addLeft, RBTreeNode _where, object key, object value);
    public sealed virtual IEnumerator GetEnumerator();
    internal void ForAll(NodeFunction function);
    private void ForAll(RBTreeNode startNode, NodeFunction function);
}
internal class Syncfusion.CompoundFile.DocIO.Net.MapEnumerator : object {
    private RBTreeNode m_current;
    private RBTreeNode m_parent;
    private object System.Collections.IEnumerator.Current { get; }
    public RBTreeNode Current { get; }
    public MapEnumerator(RBTreeNode parent);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public RBTreeNode get_Current();
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
}
internal enum Syncfusion.CompoundFile.DocIO.Net.NodeColor : Enum {
    public int value__;
    public static NodeColor Red;
    public static NodeColor Black;
}
[CLSCompliantAttribute("False")]
internal enum Syncfusion.CompoundFile.DocIO.Net.PID : Enum {
    public UInt32 value__;
    public static PID PID_DICTIONARY;
    public static PID PID_CODEPAGE;
    public static PID PID_FIRST_USABLE;
    public static PID PID_FIRST_NAME_DEFAULT;
    public static PID PID_LOCALE;
    public static PID PID_MODIFY_TIME;
    public static PID PID_SECURITY;
    public static PID PID_BEHAVIOR;
    public static PID PID_ILLEGAL;
    public static PID PID_MIN_READONLY;
    public static PID PID_MAX_READONLY;
}
internal class Syncfusion.CompoundFile.DocIO.Net.PropertyData : object {
    private static int LinkBit;
    private static int NamesDictionaryId;
    public static long DEF_FILETIME_TICKS_DIFFERENCE;
    private int m_iId;
    private string m_strName;
    public PropertyType PropertyType;
    public object Data;
    public bool IsLinkToSource { get; }
    public int ParentId { get; }
    public int Id { get; public set; }
    public object Value { get; public set; }
    public VarEnum Type { get; public set; }
    public string Name { get; public set; }
    public PropertyData(int id);
    public bool get_IsLinkToSource();
    public int get_ParentId();
    public sealed virtual int get_Id();
    public sealed virtual void set_Id(int value);
    public void Parse(Stream stream, int roundedSize);
    internal void Parse(Stream stream, int roundedSize, int codePage);
    internal bool IsValidProperty();
    private IList ParseVector(Stream stream, int roundedSize);
    internal IList ParseVector(Stream stream, int roundedSize, int codePage);
    private IList CreateArray(PropertyType itemType, int count);
    private object ParseSingleValue(PropertyType itemType, Stream stream, int roundedSize);
    internal object ParseSingleValue(PropertyType itemType, Stream stream, int roundedSize, int codePage);
    private object GetDateTime(Stream stream, Byte[] buffer);
    private object GetBlob(Stream stream, Byte[] buffer);
    private object GetClipboardData(Stream stream, Byte[] buffer);
    private object GetObject(Stream stream, int roundedSize);
    private object GetObject(Stream stream, int roundedSize, int codePage);
    private int WriteObject(Stream stream, object value);
    public int Serialize(Stream stream);
    private int SerializeDictionary(Stream stream, Dictionary`2<int, string> dictionary);
    private int SerializeVector(Stream stream, IList data);
    private int SerializeSingleValue(Stream stream, object value, PropertyType valueType);
    private int SerializeClipboardData(Stream stream, ClipboardData data);
    private int SerializeBlob(Stream stream, Byte[] value);
    public sealed virtual bool SetValue(object value, PropertyType type);
    public sealed virtual object get_Value();
    public void set_Value(object value);
    public sealed virtual VarEnum get_Type();
    public void set_Type(VarEnum value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public sealed virtual int CompareTo(object obj);
}
internal class Syncfusion.CompoundFile.DocIO.Net.PropertySection : object {
    private static int PropertyNamesId;
    private static short UnicodeCodePage;
    private int m_iOffset;
    private Guid m_id;
    private int m_iLength;
    private List`1<PropertyData> m_lstProperties;
    private int m_sCodePage;
    private DictionaryInfo m_dictionaryInfo;
    public int Offset { get; public set; }
    public Guid Id { get; public set; }
    public int Length { get; public set; }
    public int Count { get; }
    public List`1<PropertyData> Properties { get; }
    public PropertySection(Guid guid, int sectionOffset);
    public int get_Offset();
    public void set_Offset(int value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public int get_Length();
    public void set_Length(int value);
    public int get_Count();
    public List`1<PropertyData> get_Properties();
    public void Parse(Stream stream);
    private void ParseDictionary(Stream stream, Dictionary`2& dictNames);
    private Dictionary`2<int, string> ParsePropertyNames(Stream stream, DictionaryInfo dictionaryInfo);
    private void ParseSpecialProperties(PropertyData property, Stream stream, int reservedSize, Dictionary`2& dictNames);
    private Dictionary`2<int, string> ParsePropertyNames(Stream stream);
    public void Serialize(Stream stream);
    private Dictionary`2<int, string> PrepareNames();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.CompoundFile.DocIO.Net.PROPSPEC : ValueType {
    public IntPtr ulKind;
    public IntPtr propid;
}
[CLSCompliantAttribute("False")]
internal enum Syncfusion.CompoundFile.DocIO.Net.PRSPEC : Enum {
    public UInt32 value__;
    public static PRSPEC PRSPEC_INVALID;
    public static PRSPEC PRSPEC_LPWSTR;
    public static PRSPEC PRSPEC_PROPID;
}
internal class Syncfusion.CompoundFile.DocIO.Net.RBTreeNode : object {
    private RBTreeNode m_left;
    private RBTreeNode m_right;
    private RBTreeNode m_parent;
    private NodeColor m_color;
    private bool m_bIsNil;
    private object m_key;
    private object m_value;
    public RBTreeNode Left { get; public set; }
    public RBTreeNode Right { get; public set; }
    public RBTreeNode Parent { get; public set; }
    public NodeColor Color { get; public set; }
    public bool IsNil { get; public set; }
    public object Key { get; public set; }
    public object Value { get; public set; }
    public bool IsRed { get; }
    public bool IsBlack { get; }
    public RBTreeNode(RBTreeNode left, RBTreeNode parent, RBTreeNode right, object key, object value);
    public RBTreeNode(RBTreeNode left, RBTreeNode parent, RBTreeNode right, object key, object value, NodeColor color);
    public RBTreeNode get_Left();
    public void set_Left(RBTreeNode value);
    public RBTreeNode get_Right();
    public void set_Right(RBTreeNode value);
    public RBTreeNode get_Parent();
    public void set_Parent(RBTreeNode value);
    public NodeColor get_Color();
    public void set_Color(NodeColor value);
    public bool get_IsNil();
    public void set_IsNil(bool value);
    public object get_Key();
    public void set_Key(object value);
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsRed();
    public bool get_IsBlack();
}
internal class Syncfusion.CompoundFile.DocIO.Net.SectorTypes : object {
    public static int FreeSector;
    public static int EndOfChain;
    public static int FatSector;
    public static int DifSector;
}
internal class Syncfusion.CompoundFile.DocIO.Net.SortedDictionary`2 : TypedSortedListEx`2<TKey, TValue> {
}
internal class Syncfusion.CompoundFile.DocIO.Net.SortedList`2 : TypedSortedListEx`2<TKey, TValue> {
    public SortedList`2(IComparer`1<TKey> comparer);
    public SortedList`2(int count);
    public SortedList`2(IDictionary`2<TKey, TValue> dictionary);
}
[CLSCompliantAttribute("False")]
internal enum Syncfusion.CompoundFile.DocIO.Net.STG_ERRORS : Enum {
    public UInt32 value__;
    public static STG_ERRORS S_OK;
    public static STG_ERRORS S_FAIL;
    public static STG_ERRORS STG_E_ACCESSDENIED;
    public static STG_ERRORS STG_E_FILEALREADYEXISTS;
    public static STG_ERRORS STG_E_FILENOTFOUND;
    public static STG_ERRORS STG_E_INSUFFICIENTMEMORY;
    public static STG_ERRORS STG_E_INVALIDFLAG;
    public static STG_ERRORS STG_E_INVALIDFUNCTION;
    public static STG_ERRORS STG_E_INVALIDHANDLE;
    public static STG_ERRORS STG_E_INVALIDNAME;
    public static STG_ERRORS STG_E_INVALIDPOINTER;
    public static STG_ERRORS STG_E_LOCKVIOLATION;
    public static STG_ERRORS STG_E_NOTSIMPLEFORMAT;
    public static STG_ERRORS STG_E_OLDDLL;
    public static STG_ERRORS STG_E_OLDFORMAT;
    public static STG_ERRORS STG_E_PATHNOTFOUND;
    public static STG_ERRORS STG_E_SHAREVIOLATION;
    public static STG_ERRORS STG_E_TOOMANYOPENFILES;
}
internal enum Syncfusion.CompoundFile.DocIO.Net.STGC : Enum {
    public int value__;
    public static STGC STGC_DEFAULT;
    public static STGC STGC_OVERWRITE;
    public static STGC STGC_ONLYIFCURRENT;
    public static STGC STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE;
    public static STGC STGC_CONSOLIDATE;
}
internal enum Syncfusion.CompoundFile.DocIO.Net.STGFMT : Enum {
    public int value__;
    public static STGFMT STGFMT_STORAGE;
    public static STGFMT STGFMT_FILE;
    public static STGFMT STGFMT_ANY;
    public static STGFMT STGFMT_DOCFILE;
}
[FlagsAttribute]
internal enum Syncfusion.CompoundFile.DocIO.Net.STGM : Enum {
    public int value__;
    public static STGM STGM_READ;
    public static STGM STGM_WRITE;
    public static STGM STGM_READWRITE;
    public static STGM STGM_SHARE_DENY_NONE;
    public static STGM STGM_SHARE_DENY_READ;
    public static STGM STGM_SHARE_DENY_WRITE;
    public static STGM STGM_SHARE_EXCLUSIVE;
    public static STGM STGM_PRIORITY;
    public static STGM STGM_CREATE;
    public static STGM STGM_CONVERT;
    public static STGM STGM_FAILIFTHERE;
    public static STGM STGM_DIRECT;
    public static STGM STGM_TRANSACTED;
    public static STGM STGM_NOSCRATCH;
    public static STGM STGM_NOSNAPSHOT;
    public static STGM STGM_SIMPLE;
    public static STGM STGM_DIRECT_SWMR;
    public static STGM STGM_DELETEONRELEASE;
}
internal enum Syncfusion.CompoundFile.DocIO.Net.STGTY : Enum {
    public int value__;
    public static STGTY STGTY_STORAGE;
    public static STGTY STGTY_STREAM;
    public static STGTY STGTY_LOCKBYTES;
    public static STGTY STGTY_PROPERTY;
}
internal enum Syncfusion.CompoundFile.DocIO.Net.STREAM_SEEK : Enum {
    public int value__;
    public static STREAM_SEEK STREAM_SEEK_SET;
    public static STREAM_SEEK STREAM_SEEK_CUR;
    public static STREAM_SEEK STREAM_SEEK_END;
}
public static class Syncfusion.CompoundFile.DocIO.Net.StreamHelper : object {
    public static int IntSize;
    private static int ShortSize;
    private static int DoubleSize;
    public static short ReadInt16(Stream stream, Byte[] buffer);
    public static int ReadInt32(Stream stream, Byte[] buffer);
    public static double ReadDouble(Stream stream, Byte[] buffer);
    public static int WriteInt16(Stream stream, short value);
    public static int WriteInt32(Stream stream, int value);
    public static int WriteDouble(Stream stream, double value);
    public static string GetAsciiString(Stream stream, int roundedSize);
    internal static string GetAsciiString(Stream stream, int roundedSize, int codePage);
    private static string GetCodePageName(int codepage);
    private static Encoding GetEncoding(string codePage);
    public static string GetUnicodeString(Stream stream, int roundedSize);
    public static int WriteAsciiString(Stream stream, string value, bool align);
    public static int WriteUnicodeString(Stream stream, string value);
    public static int WriteString(Stream stream, string value, Encoding encoding, bool align);
    public static void AddPadding(Stream stream, Int32& iWrittenSize);
    private static string RemoveLastZero(string value);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.CompoundFile.DocIO.Net.TypedSortedListEx`2 : object {
    private static int DefaultCapacity;
    private TKey[] m_arrKeys;
    private Dictionary`2<TKey, TValue> m_dicValues;
    private int m_iSize;
    private int m_iVersion;
    private IComparer`1<TKey> m_comparer;
    private KeyList<TKey, TValue> m_listKeys;
    private ValueList<TKey, TValue> m_lstValues;
    public int Capacity { get; public set; }
    public int Count { get; }
    public IList`1<TKey> Keys { get; }
    public IList`1<TValue> Values { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public TValue Item { get; public set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public object Item { get; public set; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    public TypedSortedListEx`2(int initialCapacity);
    public TypedSortedListEx`2(IComparer`1<TKey> comparer);
    public TypedSortedListEx`2(IComparer`1<TKey> comparer, int capacity);
    public TypedSortedListEx`2(IDictionary`2<TKey, TValue> d);
    public TypedSortedListEx`2(IDictionary`2<TKey, TValue> d, IComparer`1<TKey> comparer);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual IList`1<TKey> get_Keys();
    public virtual IList`1<TValue> get_Values();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual TValue get_Item(TKey key);
    public virtual void set_Item(TKey key, TValue value);
    public static TypedSortedListEx`2<TKey, TValue> Synchronized(TypedSortedListEx`2<TKey, TValue> list);
    public virtual void Add(TKey key, TValue value);
    public virtual void Clear();
    public virtual object Clone();
    public TypedSortedListEx`2<TKey, TValue> CloneAll();
    public virtual bool Contains(TKey key);
    public virtual bool ContainsKey(TKey key);
    public virtual bool ContainsValue(TValue value);
    public virtual void CopyTo(Array array, int arrayIndex);
    public virtual TValue GetByIndex(int index);
    public virtual TKey GetKey(int index);
    public virtual IList`1<TKey> GetKeyList();
    public virtual IList`1<TValue> GetValueList();
    public virtual int IndexOfKey(TKey key);
    public virtual int IndexOfValue(TValue value);
    public virtual void RemoveAt(int index);
    public virtual bool Remove(TKey key);
    public virtual void SetByIndex(int index, TValue value);
    public virtual void TrimToSize();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private void Insert(int index, TKey key, TValue value);
    private void EnsureCapacity(int min);
    public sealed virtual void Add(object key, object value);
    public sealed virtual bool Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
}
[FlagsAttribute]
internal enum Syncfusion.CompoundFile.DocIO.Net.VARTYPE : Enum {
    public int value__;
    public static VARTYPE VT_EMPTY;
    public static VARTYPE VT_I4;
    public static VARTYPE VT_DATE;
    public static VARTYPE VT_BSTR;
    public static VARTYPE VT_BOOL;
    public static VARTYPE VT_VARIANT;
    public static VARTYPE VT_INT;
    public static VARTYPE VT_LPSTR;
    public static VARTYPE VT_LPWSTR;
    public static VARTYPE VT_FILETIME;
    public static VARTYPE VT_VECTOR;
}
public enum Syncfusion.CompoundFile.DocIO.PIDDSI : Enum {
    public int value__;
    public static PIDDSI Category;
    public static PIDDSI PresFormat;
    public static PIDDSI ByteCount;
    public static PIDDSI LineCount;
    public static PIDDSI ParCount;
    public static PIDDSI SlideCount;
    public static PIDDSI NoteCount;
    public static PIDDSI HiddenCount;
    public static PIDDSI MmclipCount;
    public static PIDDSI Scale;
    public static PIDDSI HeadingPair;
    public static PIDDSI DocParts;
    public static PIDDSI Manager;
    public static PIDDSI Company;
    public static PIDDSI LinksDirty;
}
public enum Syncfusion.CompoundFile.DocIO.PIDSI : Enum {
    public int value__;
    public static PIDSI Title;
    public static PIDSI Subject;
    public static PIDSI Author;
    public static PIDSI Keywords;
    public static PIDSI Comments;
    public static PIDSI Template;
    public static PIDSI LastAuthor;
    public static PIDSI Revnumber;
    public static PIDSI EditTime;
    public static PIDSI LastPrinted;
    public static PIDSI Create_dtm;
    public static PIDSI LastSave_dtm;
    public static PIDSI Pagecount;
    public static PIDSI Wordcount;
    public static PIDSI Charcount;
    public static PIDSI Thumbnail;
    public static PIDSI Appname;
    public static PIDSI Doc_security;
}
[FlagsAttribute]
public enum Syncfusion.CompoundFile.DocIO.PropertyType : Enum {
    public int value__;
    public static PropertyType Bool;
    public static PropertyType Int;
    public static PropertyType Int32;
    public static PropertyType Int16;
    public static PropertyType UInt32;
    public static PropertyType String;
    public static PropertyType AsciiString;
    public static PropertyType DateTime;
    public static PropertyType Blob;
    public static PropertyType Vector;
    public static PropertyType Object;
    public static PropertyType Double;
    public static PropertyType Empty;
    public static PropertyType Null;
    public static PropertyType ClipboardData;
    public static PropertyType AsciiStringArray;
    public static PropertyType StringArray;
    public static PropertyType ObjectArray;
}
public enum Syncfusion.CompoundFile.DocIO.STGM : Enum {
    public int value__;
    public static STGM STGM_READ;
    public static STGM STGM_WRITE;
    public static STGM STGM_READWRITE;
    public static STGM STGM_SHARE_DENY_NONE;
    public static STGM STGM_SHARE_DENY_READ;
    public static STGM STGM_SHARE_DENY_WRITE;
    public static STGM STGM_SHARE_EXCLUSIVE;
    public static STGM STGM_PRIORITY;
    public static STGM STGM_CREATE;
    public static STGM STGM_CONVERT;
    public static STGM STGM_FAILIFTHERE;
    public static STGM STGM_DIRECT;
    public static STGM STGM_TRANSACTED;
    public static STGM STGM_NOSCRATCH;
    public static STGM STGM_NOSNAPSHOT;
    public static STGM STGM_SIMPLE;
    public static STGM STGM_DIRECT_SWMR;
    public static STGM STGM_DELETEONRELEASE;
}
internal enum Syncfusion.CompoundFile.Net.VarEnum : Enum {
    public int value__;
    public static VarEnum VT_ARRAY;
    public static VarEnum VT_BLOB;
    public static VarEnum VT_BLOB_OBJECT;
    public static VarEnum VT_BOOL;
    public static VarEnum VT_BSTR;
    public static VarEnum VT_BYREF;
    public static VarEnum VT_CARRAY;
    public static VarEnum VT_CF;
    public static VarEnum VT_CLSID;
    public static VarEnum VT_CY;
    public static VarEnum VT_DATE;
    public static VarEnum VT_DECIMAL;
    public static VarEnum VT_DISPATCH;
    public static VarEnum VT_EMPTY;
    public static VarEnum VT_ERROR;
    public static VarEnum VT_FILETIME;
    public static VarEnum VT_HRESULT;
    public static VarEnum VT_I1;
    public static VarEnum VT_I2;
    public static VarEnum VT_I4;
    public static VarEnum VT_I8;
    public static VarEnum VT_INT;
    public static VarEnum VT_LPSTR;
    public static VarEnum VT_LPWSTR;
    public static VarEnum VT_NULL;
    public static VarEnum VT_PTR;
    public static VarEnum VT_R4;
    public static VarEnum VT_R8;
    public static VarEnum VT_RECORD;
    public static VarEnum VT_SAFEARRAY;
    public static VarEnum VT_STORAGE;
    public static VarEnum VT_STORED_OBJECT;
    public static VarEnum VT_STREAM;
    public static VarEnum VT_STREAMED_OBJECT;
    public static VarEnum VT_UI1;
    public static VarEnum VT_UI2;
    public static VarEnum VT_UI4;
    public static VarEnum VT_UI8;
    public static VarEnum VT_UINT;
    public static VarEnum VT_UNKNOWN;
    public static VarEnum VT_USERDEFINED;
    public static VarEnum VT_VARIANT;
    public static VarEnum VT_VECTOR;
    public static VarEnum VT_VOID;
}
public enum Syncfusion.DocIO.ArrowheadStyle : Enum {
    public int value__;
    public static ArrowheadStyle ArrowheadNone;
    public static ArrowheadStyle ArrowheadTriangle;
    public static ArrowheadStyle ArrowheadStealth;
    public static ArrowheadStyle ArrowheadDiamond;
    public static ArrowheadStyle ArrowheadOval;
    public static ArrowheadStyle ArrowheadOpen;
}
internal enum Syncfusion.DocIO.BaseLineAlignment : Enum {
    public int value__;
    public static BaseLineAlignment Top;
    public static BaseLineAlignment Center;
    public static BaseLineAlignment Baseline;
    public static BaseLineAlignment Bottom;
    public static BaseLineAlignment Auto;
}
public enum Syncfusion.DocIO.CaptionNumberingFormat : Enum {
    public int value__;
    public static CaptionNumberingFormat Number;
    public static CaptionNumberingFormat Roman;
    public static CaptionNumberingFormat Alphabetic;
    public static CaptionNumberingFormat LowerRoman;
    public static CaptionNumberingFormat Lowercase;
    public static CaptionNumberingFormat Uppercase;
    public static CaptionNumberingFormat LowerAlphabetic;
    public static CaptionNumberingFormat Ordinal;
    public static CaptionNumberingFormat CardinalText;
    public static CaptionNumberingFormat OrdinalText;
    public static CaptionNumberingFormat Hexa;
    public static CaptionNumberingFormat DollarText;
    public static CaptionNumberingFormat FirstCapital;
    public static CaptionNumberingFormat TitleCase;
}
public enum Syncfusion.DocIO.CaptionPosition : Enum {
    public int value__;
    public static CaptionPosition AboveImage;
    public static CaptionPosition AfterImage;
}
internal enum Syncfusion.DocIO.CharacterSpacingControl : Enum {
    public int value__;
    public static CharacterSpacingControl DoNotCompress;
    public static CharacterSpacingControl CompressPunctuation;
    public static CharacterSpacingControl CompressPunctuationAndJapaneseKana;
}
public class Syncfusion.DocIO.ControlChar : object {
    public static string CarriegeReturn;
    public static string CrLf;
    public static string DefaultTextInput;
    public static char DefaultTextInputChar;
    public static string LineBreak;
    public static char LineBreakChar;
    public static string LineFeed;
    public static char LineFeedChar;
    public static string NonBreakingSpace;
    public static char NonBreakingSpaceChar;
    public static string Tab;
    public static char TabChar;
    public static string Hyphen;
    public static char HyphenChar;
    public static string Space;
    public static char SpaceChar;
    public static char DoubleQuote;
    public static char LeftDoubleQuote;
    public static char RightDoubleQuote;
    public static char DoubleLowQuote;
    internal static string DoubleQuoteString;
    internal static string LeftDoubleQuoteString;
    internal static string RightDoubleQuoteString;
    internal static string DoubleLowQuoteString;
    public static string NonBreakingHyphen;
    public static char NonBreakingHyphenChar;
    internal static string Cell;
    internal static char CellChar;
    internal static string ColumnBreak;
    internal static char ColumnBreakChar;
    internal static char FieldEndChar;
    internal static char FieldSeparatorChar;
    internal static char FieldStartChar;
    internal static string PageBreak;
    internal static char PageBreakChar;
    internal static string ParagraphBreak;
    internal static char ParagraphBreakChar;
    internal static string SectionBreak;
    internal static char SectionBreakChar;
    private static ControlChar();
}
internal enum Syncfusion.DocIO.DLS.AbsoluteTabAlignment : Enum {
    public int value__;
    public static AbsoluteTabAlignment Left;
    public static AbsoluteTabAlignment Center;
    public static AbsoluteTabAlignment Right;
}
internal enum Syncfusion.DocIO.DLS.AbsoluteTabRelation : Enum {
    public int value__;
    public static AbsoluteTabRelation Margin;
    public static AbsoluteTabRelation Indent;
}
internal class Syncfusion.DocIO.DLS.AdapterListIDHolder : object {
    [ThreadStaticAttribute]
private static AdapterListIDHolder m_instance;
    private Dictionary`2<int, string> m_listStyleIDtoName;
    private Dictionary`2<int, string> m_lfoStyleIDtoName;
    internal static AdapterListIDHolder Instance { get; }
    internal Dictionary`2<int, string> ListStyleIDtoName { get; }
    internal Dictionary`2<int, string> LfoStyleIDtoName { get; }
    internal static AdapterListIDHolder get_Instance();
    internal Dictionary`2<int, string> get_ListStyleIDtoName();
    internal Dictionary`2<int, string> get_LfoStyleIDtoName();
    internal bool ContainsListName(string name);
    internal void Close();
}
public class Syncfusion.DocIO.DLS.AddDictionaryEventArgs : EventArgs {
    private string m_LanguageCode;
    private Stream m_DictionaryStream;
    public string LanguageCode { get; }
    public Stream DictionaryStream { get; public set; }
    internal AddDictionaryEventArgs(string orignalLanguagecode, string alternateLanguagecode);
    public string get_LanguageCode();
    public Stream get_DictionaryStream();
    public void set_DictionaryStream(Stream value);
}
public class Syncfusion.DocIO.DLS.AddDictionaryEventHandler : MulticastDelegate {
    public AddDictionaryEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AddDictionaryEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, AddDictionaryEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.DocIO.DLS.AlternateChunk : TextBodyItem {
    private string m_targetId;
    private string m_contentPath;
    private string m_contentType;
    private bool m_isParaItem;
    private ImportOptions m_importOption;
    private List`1<Entity> altChunkBookmarks;
    private List`1<Entity> bkmkCollection;
    private WSection firstChunkLastSection;
    private byte m_bFlags;
    internal string TargetId { get; internal set; }
    internal string ContentExtension { get; }
    internal ImportOptions ImportOption { get; internal set; }
    internal string ContentType { get; internal set; }
    internal string ContentPath { get; internal set; }
    internal Stream Stream { get; }
    internal List`1<Entity> AltChunkBookmarks { get; }
    internal bool IsParagraphItem { get; internal set; }
    internal bool IsOwnerDocHavingOneSection { get; internal set; }
    internal bool IsFirstChunk { get; internal set; }
    internal bool IsLastChunk { get; internal set; }
    internal WSection FirstChunkLastSection { get; internal set; }
    public EntityType EntityType { get; }
    public EntityCollection ChildEntities { get; }
    internal AlternateChunk(WordDocument doc);
    internal string get_TargetId();
    internal void set_TargetId(string value);
    internal string get_ContentExtension();
    internal ImportOptions get_ImportOption();
    internal void set_ImportOption(ImportOptions value);
    internal string get_ContentType();
    internal void set_ContentType(string value);
    internal string get_ContentPath();
    internal void set_ContentPath(string value);
    internal Stream get_Stream();
    internal List`1<Entity> get_AltChunkBookmarks();
    internal bool get_IsParagraphItem();
    internal void set_IsParagraphItem(bool value);
    internal bool get_IsOwnerDocHavingOneSection();
    internal void set_IsOwnerDocHavingOneSection(bool value);
    internal bool get_IsFirstChunk();
    internal void set_IsFirstChunk(bool value);
    internal bool get_IsLastChunk();
    internal void set_IsLastChunk(bool value);
    internal WSection get_FirstChunkLastSection();
    internal void set_FirstChunkLastSection(WSection value);
    internal AlternateChunk Clone();
    protected virtual object CloneImpl();
    internal virtual TextBodyItem GetNextTextBodyItemValue();
    internal bool GetFormatType(string extension);
    internal void Update();
    private void CheckPictureTextWrappingStyle(WTextBody textBody, Entity entity);
    private void MergeAltChunkFirstTable(Int32& altchunkIndex, WTextBody ownerTextBody, WTextBody altChunkTextBody);
    private void MergeAltChunkFirstParagraph(Int32& altchunkIndex, WTextBody ownerTextBody, WTextBody altChunkTextBody);
    private void UpdateBookmarks(WTextBody body, int oldChildCount);
    private void InsertBkmkStart(Entity item, BookmarkStart bookmark, Boolean& bkmkStartInserted);
    private void InsertBkmkEnd(Entity item, BookmarkEnd bookmark, Boolean& bkmkEndInserted);
    private void ClearExistingHeadersFooters(WSection section);
    private void UpdateHeaderFooter(WSection altChunkFirstSection, WTextBody ownerTextBody, WSection section);
    internal virtual bool CheckDeleteRev();
    internal virtual void SetChangedPFormat(bool check);
    internal virtual void SetChangedCFormat(bool check);
    internal virtual void SetDeleteRev(bool check);
    internal virtual void SetInsertRev(bool check);
    internal virtual bool HasTrackedChanges();
    public virtual int Replace(Regex pattern, string replace);
    public virtual int Replace(string given, string replace, bool caseSensitive, bool wholeWord);
    public virtual int Replace(Regex pattern, TextSelection textSelection);
    public virtual int Replace(Regex pattern, TextSelection textSelection, bool saveFormatting);
    public int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord);
    public int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord, bool saveFormatting);
    internal int ReplaceFirst(string given, string replace, bool caseSensitive, bool wholeWord);
    internal int ReplaceFirst(Regex pattern, string replace);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal virtual void RemoveCFormatChanges();
    internal virtual void RemovePFormatChanges();
    internal virtual void AcceptCChanges();
    internal virtual void AcceptPChanges();
    internal virtual bool CheckChangedCFormat();
    internal virtual bool CheckInsertRev();
    public virtual TextSelection Find(Regex pattern);
    public TextSelection Find(string given, bool caseSensitive, bool wholeWord);
    internal virtual void MakeChanges(bool acceptChanges);
    internal virtual TextSelectionList FindAll(Regex pattern, bool isDocumentComparison);
    internal virtual void Close();
    internal virtual bool CheckChangedPFormat();
    public virtual EntityType get_EntityType();
    public EntityCollection get_ChildEntities();
    internal virtual void AddDelMark();
    internal virtual void AddInsMark();
}
public enum Syncfusion.DocIO.DLS.AutoFitType : Enum {
    public int value__;
    public static AutoFitType FitToContent;
    public static AutoFitType FitToWindow;
    public static AutoFitType FixedColumnWidth;
}
internal enum Syncfusion.DocIO.DLS.AutoShapeConstant : Enum {
    public int value__;
    public static AutoShapeConstant Index_0;
    public static AutoShapeConstant Index_1;
    public static AutoShapeConstant Index_2;
    public static AutoShapeConstant Index_3;
    public static AutoShapeConstant Index_4;
    public static AutoShapeConstant Index_5;
    public static AutoShapeConstant Index_6;
    public static AutoShapeConstant Index_7;
    public static AutoShapeConstant Index_8;
    public static AutoShapeConstant Index_9;
    public static AutoShapeConstant Index_10;
    public static AutoShapeConstant Index_11;
    public static AutoShapeConstant Index_12;
    public static AutoShapeConstant Index_13;
    public static AutoShapeConstant Index_14;
    public static AutoShapeConstant Index_15;
    public static AutoShapeConstant Index_16;
    public static AutoShapeConstant Index_17;
    public static AutoShapeConstant Index_18;
    public static AutoShapeConstant Index_19;
    public static AutoShapeConstant Index_20;
    public static AutoShapeConstant Index_21;
    public static AutoShapeConstant Index_22;
    public static AutoShapeConstant Index_23;
    public static AutoShapeConstant Index_24;
    public static AutoShapeConstant Index_25;
    public static AutoShapeConstant Index_26;
    public static AutoShapeConstant Index_27;
    public static AutoShapeConstant Index_28;
    public static AutoShapeConstant Index_29;
    public static AutoShapeConstant Index_30;
    public static AutoShapeConstant Index_31;
    public static AutoShapeConstant Index_32;
    public static AutoShapeConstant Index_33;
    public static AutoShapeConstant Index_34;
    public static AutoShapeConstant Index_35;
    public static AutoShapeConstant Index_36;
    public static AutoShapeConstant Index_37;
    public static AutoShapeConstant Index_38;
    public static AutoShapeConstant Index_39;
    public static AutoShapeConstant Index_40;
    public static AutoShapeConstant Index_41;
    public static AutoShapeConstant Index_42;
    public static AutoShapeConstant Index_43;
    public static AutoShapeConstant Index_44;
    public static AutoShapeConstant Index_45;
    public static AutoShapeConstant Index_46;
    public static AutoShapeConstant Index_47;
    public static AutoShapeConstant Index_48;
    public static AutoShapeConstant Index_49;
    public static AutoShapeConstant Index_50;
    public static AutoShapeConstant Index_51;
    public static AutoShapeConstant Index_52;
    public static AutoShapeConstant Index_53;
    public static AutoShapeConstant Index_54;
    public static AutoShapeConstant Index_55;
    public static AutoShapeConstant Index_56;
    public static AutoShapeConstant Index_57;
    public static AutoShapeConstant Index_58;
    public static AutoShapeConstant Index_59;
    public static AutoShapeConstant Index_60;
    public static AutoShapeConstant Index_61;
    public static AutoShapeConstant Index_62;
    public static AutoShapeConstant Index_63;
    public static AutoShapeConstant Index_64;
    public static AutoShapeConstant Index_65;
    public static AutoShapeConstant Index_66;
    public static AutoShapeConstant Index_67;
    public static AutoShapeConstant Index_68;
    public static AutoShapeConstant Index_69;
    public static AutoShapeConstant Index_70;
    public static AutoShapeConstant Index_71;
    public static AutoShapeConstant Index_72;
    public static AutoShapeConstant Index_73;
    public static AutoShapeConstant Index_74;
    public static AutoShapeConstant Index_75;
    public static AutoShapeConstant Index_76;
    public static AutoShapeConstant Index_77;
    public static AutoShapeConstant Index_78;
    public static AutoShapeConstant Index_79;
    public static AutoShapeConstant Index_80;
    public static AutoShapeConstant Index_81;
    public static AutoShapeConstant Index_82;
    public static AutoShapeConstant Index_83;
    public static AutoShapeConstant Index_84;
    public static AutoShapeConstant Index_85;
    public static AutoShapeConstant Index_86;
    public static AutoShapeConstant Index_87;
    public static AutoShapeConstant Index_88;
    public static AutoShapeConstant Index_89;
    public static AutoShapeConstant Index_90;
    public static AutoShapeConstant Index_91;
    public static AutoShapeConstant Index_92;
    public static AutoShapeConstant Index_93;
    public static AutoShapeConstant Index_94;
    public static AutoShapeConstant Index_95;
    public static AutoShapeConstant Index_96;
    public static AutoShapeConstant Index_97;
    public static AutoShapeConstant Index_98;
    public static AutoShapeConstant Index_99;
    public static AutoShapeConstant Index_100;
    public static AutoShapeConstant Index_101;
    public static AutoShapeConstant Index_102;
    public static AutoShapeConstant Index_103;
    public static AutoShapeConstant Index_104;
    public static AutoShapeConstant Index_105;
    public static AutoShapeConstant Index_106;
    public static AutoShapeConstant Index_107;
    public static AutoShapeConstant Index_108;
    public static AutoShapeConstant Index_109;
    public static AutoShapeConstant Index_110;
    public static AutoShapeConstant Index_111;
    public static AutoShapeConstant Index_112;
    public static AutoShapeConstant Index_113;
    public static AutoShapeConstant Index_114;
    public static AutoShapeConstant Index_115;
    public static AutoShapeConstant Index_116;
    public static AutoShapeConstant Index_117;
    public static AutoShapeConstant Index_118;
    public static AutoShapeConstant Index_119;
    public static AutoShapeConstant Index_120;
    public static AutoShapeConstant Index_121;
    public static AutoShapeConstant Index_122;
    public static AutoShapeConstant Index_123;
    public static AutoShapeConstant Index_124;
    public static AutoShapeConstant Index_125;
    public static AutoShapeConstant Index_126;
    public static AutoShapeConstant Index_127;
    public static AutoShapeConstant Index_128;
    public static AutoShapeConstant Index_129;
    public static AutoShapeConstant Index_130;
    public static AutoShapeConstant Index_131;
    public static AutoShapeConstant Index_132;
    public static AutoShapeConstant Index_133;
    public static AutoShapeConstant Index_134;
    public static AutoShapeConstant Index_135;
    public static AutoShapeConstant Index_136;
    public static AutoShapeConstant Index_137;
    public static AutoShapeConstant Index_138;
    public static AutoShapeConstant Index_139;
    public static AutoShapeConstant Index_140;
    public static AutoShapeConstant Index_141;
    public static AutoShapeConstant Index_142;
    public static AutoShapeConstant Index_143;
    public static AutoShapeConstant Index_144;
    public static AutoShapeConstant Index_145;
    public static AutoShapeConstant Index_146;
    public static AutoShapeConstant Index_147;
    public static AutoShapeConstant Index_148;
    public static AutoShapeConstant Index_149;
    public static AutoShapeConstant Index_150;
    public static AutoShapeConstant Index_151;
    public static AutoShapeConstant Index_152;
    public static AutoShapeConstant Index_153;
    public static AutoShapeConstant Index_154;
    public static AutoShapeConstant Index_155;
    public static AutoShapeConstant Index_156;
    public static AutoShapeConstant Index_157;
    public static AutoShapeConstant Index_158;
    public static AutoShapeConstant Index_159;
    public static AutoShapeConstant Index_160;
    public static AutoShapeConstant Index_161;
    public static AutoShapeConstant Index_162;
    public static AutoShapeConstant Index_163;
    public static AutoShapeConstant Index_164;
    public static AutoShapeConstant Index_165;
    public static AutoShapeConstant Index_166;
    public static AutoShapeConstant Index_167;
    public static AutoShapeConstant Index_168;
    public static AutoShapeConstant Index_169;
    public static AutoShapeConstant Index_170;
    public static AutoShapeConstant Index_171;
    public static AutoShapeConstant Index_172;
    public static AutoShapeConstant Index_173;
    public static AutoShapeConstant Index_174;
    public static AutoShapeConstant Index_175;
    public static AutoShapeConstant Index_176;
    public static AutoShapeConstant Index_177;
    public static AutoShapeConstant Index_178;
    public static AutoShapeConstant Index_179;
    public static AutoShapeConstant Index_180;
    public static AutoShapeConstant Index_181;
    public static AutoShapeConstant Index_182;
    public static AutoShapeConstant Index_183;
    public static AutoShapeConstant Index_184;
    public static AutoShapeConstant Index_185;
    public static AutoShapeConstant Index_186;
    public static AutoShapeConstant Index_187;
}
internal class Syncfusion.DocIO.DLS.AutoShapeHelper : object {
    internal Dictionary`2<string, int> dictionary;
    internal Dictionary`2<string, string> shapeTypes;
    internal AutoShapeConstant GetAutoShapeConstant(string string_4);
    internal AutoShapeType GetAutoShapeType(AutoShapeConstant enum184_0);
    internal AutoShapeConstant GetAutoShapeConstant(AutoShapeType autoShapeType_0);
    internal string GetAutoShapeString(AutoShapeConstant enum184_0);
    internal AutoShapeType GetAutoShapeType(string shapeTypeID);
    internal string GetAutoShapeTypeIndex(AutoShapeType autoShapeType);
    internal string GetShapeTypeIDorAttributeToCheck(AutoShapeType autoShapeType);
    private void CreateAutoShapeDictionary();
    internal void Close();
}
public enum Syncfusion.DocIO.DLS.AutoShapeType : Enum {
    public int value__;
    public static AutoShapeType Unknown;
    public static AutoShapeType Rectangle;
    public static AutoShapeType RoundedRectangle;
    public static AutoShapeType SnipSingleCornerRectangle;
    public static AutoShapeType SnipSameSideCornerRectangle;
    public static AutoShapeType SnipDiagonalCornerRectangle;
    public static AutoShapeType SnipAndRoundSingleCornerRectangle;
    public static AutoShapeType RoundSingleCornerRectangle;
    public static AutoShapeType RoundSameSideCornerRectangle;
    public static AutoShapeType RoundDiagonalCornerRectangle;
    public static AutoShapeType Oval;
    public static AutoShapeType IsoscelesTriangle;
    public static AutoShapeType RightTriangle;
    public static AutoShapeType Parallelogram;
    public static AutoShapeType Trapezoid;
    public static AutoShapeType Diamond;
    public static AutoShapeType RegularPentagon;
    public static AutoShapeType Hexagon;
    public static AutoShapeType Heptagon;
    public static AutoShapeType Octagon;
    public static AutoShapeType Decagon;
    public static AutoShapeType Dodecagon;
    public static AutoShapeType Pie;
    public static AutoShapeType Chord;
    public static AutoShapeType Teardrop;
    public static AutoShapeType Frame;
    public static AutoShapeType HalfFrame;
    public static AutoShapeType L_Shape;
    public static AutoShapeType DiagonalStripe;
    public static AutoShapeType Cross;
    public static AutoShapeType Plaque;
    public static AutoShapeType Can;
    public static AutoShapeType Cube;
    public static AutoShapeType Bevel;
    public static AutoShapeType Donut;
    public static AutoShapeType NoSymbol;
    public static AutoShapeType BlockArc;
    public static AutoShapeType FoldedCorner;
    public static AutoShapeType SmileyFace;
    public static AutoShapeType Heart;
    public static AutoShapeType LightningBolt;
    public static AutoShapeType Sun;
    public static AutoShapeType Moon;
    public static AutoShapeType Cloud;
    public static AutoShapeType Arc;
    public static AutoShapeType DoubleBracket;
    public static AutoShapeType DoubleBrace;
    public static AutoShapeType LeftBracket;
    public static AutoShapeType RightBracket;
    public static AutoShapeType LeftBrace;
    public static AutoShapeType RightBrace;
    public static AutoShapeType RightArrow;
    public static AutoShapeType LeftArrow;
    public static AutoShapeType UpArrow;
    public static AutoShapeType DownArrow;
    public static AutoShapeType LeftRightArrow;
    public static AutoShapeType UpDownArrow;
    public static AutoShapeType QuadArrow;
    public static AutoShapeType LeftRightUpArrow;
    public static AutoShapeType BentArrow;
    public static AutoShapeType UTurnArrow;
    public static AutoShapeType LeftUpArrow;
    public static AutoShapeType BentUpArrow;
    public static AutoShapeType CurvedRightArrow;
    public static AutoShapeType CurvedLeftArrow;
    public static AutoShapeType CurvedUpArrow;
    public static AutoShapeType CurvedDownArrow;
    public static AutoShapeType StripedRightArrow;
    public static AutoShapeType NotchedRightArrow;
    public static AutoShapeType Pentagon;
    public static AutoShapeType Chevron;
    public static AutoShapeType RightArrowCallout;
    public static AutoShapeType DownArrowCallout;
    public static AutoShapeType LeftArrowCallout;
    public static AutoShapeType UpArrowCallout;
    public static AutoShapeType LeftRightArrowCallout;
    public static AutoShapeType UpDownArrowCallout;
    public static AutoShapeType QuadArrowCallout;
    public static AutoShapeType CircularArrow;
    public static AutoShapeType MathPlus;
    public static AutoShapeType MathMinus;
    public static AutoShapeType MathMultiply;
    public static AutoShapeType MathDivision;
    public static AutoShapeType MathEqual;
    public static AutoShapeType MathNotEqual;
    public static AutoShapeType FlowChartProcess;
    public static AutoShapeType FlowChartAlternateProcess;
    public static AutoShapeType FlowChartDecision;
    public static AutoShapeType FlowChartData;
    public static AutoShapeType FlowChartPredefinedProcess;
    public static AutoShapeType FlowChartInternalStorage;
    public static AutoShapeType FlowChartDocument;
    public static AutoShapeType FlowChartMultiDocument;
    public static AutoShapeType FlowChartTerminator;
    public static AutoShapeType FlowChartPreparation;
    public static AutoShapeType FlowChartManualInput;
    public static AutoShapeType FlowChartManualOperation;
    public static AutoShapeType FlowChartConnector;
    public static AutoShapeType FlowChartOffPageConnector;
    public static AutoShapeType FlowChartCard;
    public static AutoShapeType FlowChartPunchedTape;
    public static AutoShapeType FlowChartSummingJunction;
    public static AutoShapeType FlowChartOr;
    public static AutoShapeType FlowChartCollate;
    public static AutoShapeType FlowChartSort;
    public static AutoShapeType FlowChartExtract;
    public static AutoShapeType FlowChartMerge;
    public static AutoShapeType FlowChartStoredData;
    public static AutoShapeType FlowChartDelay;
    public static AutoShapeType FlowChartSequentialAccessStorage;
    public static AutoShapeType FlowChartMagneticDisk;
    public static AutoShapeType FlowChartDirectAccessStorage;
    public static AutoShapeType FlowChartDisplay;
    public static AutoShapeType Explosion1;
    public static AutoShapeType Explosion2;
    public static AutoShapeType Star4Point;
    public static AutoShapeType Star5Point;
    public static AutoShapeType Star6Point;
    public static AutoShapeType Star7Point;
    public static AutoShapeType Star8Point;
    public static AutoShapeType Star10Point;
    public static AutoShapeType Star12Point;
    public static AutoShapeType Star16Point;
    public static AutoShapeType Star24Point;
    public static AutoShapeType Star32Point;
    public static AutoShapeType UpRibbon;
    public static AutoShapeType DownRibbon;
    public static AutoShapeType CurvedUpRibbon;
    public static AutoShapeType CurvedDownRibbon;
    public static AutoShapeType VerticalScroll;
    public static AutoShapeType HorizontalScroll;
    public static AutoShapeType Wave;
    public static AutoShapeType DoubleWave;
    public static AutoShapeType RectangularCallout;
    public static AutoShapeType RoundedRectangularCallout;
    public static AutoShapeType OvalCallout;
    public static AutoShapeType CloudCallout;
    public static AutoShapeType LineCallout1;
    public static AutoShapeType LineCallout2;
    public static AutoShapeType LineCallout3;
    public static AutoShapeType LineCallout1AccentBar;
    public static AutoShapeType LineCallout2AccentBar;
    public static AutoShapeType LineCallout3AccentBar;
    public static AutoShapeType LineCallout1NoBorder;
    public static AutoShapeType LineCallout2NoBorder;
    public static AutoShapeType LineCallout3NoBorder;
    public static AutoShapeType LineCallout1BorderAndAccentBar;
    public static AutoShapeType LineCallout2BorderAndAccentBar;
    public static AutoShapeType LineCallout3BorderAndAccentBar;
    public static AutoShapeType Line;
    public static AutoShapeType ElbowConnector;
    public static AutoShapeType CurvedConnector;
    public static AutoShapeType StraightConnector;
    public static AutoShapeType BentConnector2;
    public static AutoShapeType BentConnector4;
    public static AutoShapeType BentConnector5;
    public static AutoShapeType CurvedConnector2;
    public static AutoShapeType CurvedConnector4;
    public static AutoShapeType CurvedConnector5;
}
public class Syncfusion.DocIO.DLS.Background : XDLSSerializableBase {
    private BackgroundType m_effectType;
    private Color m_color;
    private Color m_backColor;
    private ImageRecord m_imageRecord;
    private BackgroundGradient m_gradient;
    private BackgroundFillType m_fillType;
    private EscherClass m_escher;
    private Stream m_patternFill;
    private Byte[] m_patternImage;
    public BackgroundType Type { get; public set; }
    public Byte[] Picture { get; public set; }
    internal Image Image { get; }
    public Color Color { get; public set; }
    public BackgroundGradient Gradient { get; public set; }
    internal ImageRecord ImageRecord { get; internal set; }
    internal Byte[] ImageBytes { get; internal set; }
    internal BackgroundFillType FillType { get; internal set; }
    internal Color PictureBackColor { get; }
    internal Stream PatternFill { get; internal set; }
    internal Byte[] PatternImageBytes { get; internal set; }
    internal Background(WordDocument doc, BackgroundType type);
    internal Background(WordDocument doc);
    internal Background(WordDocument doc, MsofbtSpContainer container);
    public BackgroundType get_Type();
    public void set_Type(BackgroundType value);
    public Byte[] get_Picture();
    public void set_Picture(Byte[] value);
    internal Image get_Image();
    public Color get_Color();
    public void set_Color(Color value);
    public BackgroundGradient get_Gradient();
    public void set_Gradient(BackgroundGradient value);
    internal ImageRecord get_ImageRecord();
    internal void set_ImageRecord(ImageRecord value);
    internal Byte[] get_ImageBytes();
    internal void set_ImageBytes(Byte[] value);
    internal BackgroundFillType get_FillType();
    internal void set_FillType(BackgroundFillType value);
    internal Color get_PictureBackColor();
    internal Stream get_PatternFill();
    internal void set_PatternFill(Stream value);
    internal Byte[] get_PatternImageBytes();
    internal void set_PatternImageBytes(Byte[] value);
    internal Background Clone();
    internal void UpdateImageRecord(WordDocument doc);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void InitXDLSHolder();
    internal virtual void Close();
    internal void SetBackgroundColor(Color color);
    internal void SetPatternFillValue(Stream stream);
    private void GetBackgroundData(MsofbtSpContainer container, bool isDocBackground);
    private Image GetImageValue();
    private Image GetImage(Byte[] imageBytes);
    private void LoadImage(Byte[] imageBytes);
    internal bool Compare(Background background);
    internal StringBuilder GetAsString();
}
public class Syncfusion.DocIO.DLS.BackgroundGradient : XDLSSerializableBase {
    internal static UInt32 DEF_VERTICAL_ANGLE;
    internal static UInt32 DEF_DIAGONALUP_ANGLE;
    internal static UInt32 DEF_DIAGONALDOWN_ANGLE;
    internal static UInt32 DEF_SHADEUP_VARIANT;
    internal static UInt32 DEF_SHADEOUT_VARIANT;
    internal static UInt32 DEF_SHADEMIDDLE_VARIANT;
    private BackgroundFillType m_fillType;
    private Color m_fillColor;
    private Color m_fillBackColor;
    private GradientShadingStyle m_shadingStyle;
    private GradientShadingVariant m_shadingVariant;
    private EscherClass m_escher;
    public Color Color1 { get; public set; }
    public Color Color2 { get; public set; }
    public GradientShadingStyle ShadingStyle { get; public set; }
    public GradientShadingVariant ShadingVariant { get; public set; }
    internal BackgroundGradient(WordDocument doc, MsofbtSpContainer container);
    public Color get_Color1();
    public void set_Color1(Color value);
    public Color get_Color2();
    public void set_Color2(Color value);
    public GradientShadingStyle get_ShadingStyle();
    public void set_ShadingStyle(GradientShadingStyle value);
    public GradientShadingVariant get_ShadingVariant();
    public void set_ShadingVariant(GradientShadingVariant value);
    public BackgroundGradient Clone();
    internal void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    private void GetGradientData(MsofbtSpContainer container);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    internal virtual void Close();
    internal bool Compare(BackgroundGradient backgroundGradient);
    internal StringBuilder GetAsString();
}
public enum Syncfusion.DocIO.DLS.BackgroundType : Enum {
    public int value__;
    public static BackgroundType NoBackground;
    public static BackgroundType Gradient;
    public static BackgroundType Picture;
    public static BackgroundType Texture;
    public static BackgroundType Color;
}
public class Syncfusion.DocIO.DLS.BeforeClearFieldEventArgs : object {
    private WordDocument m_doc;
    private IWMergeField m_currentMergeField;
    private string m_groupName;
    private object m_fieldValue;
    private int m_rowIndex;
    private bool m_clearField;
    private bool m_fieldHasMappedInDataSource;
    internal WordDocument Doc { get; }
    public string FieldName { get; }
    public object FieldValue { get; public set; }
    public string GroupName { get; }
    public bool HasMappedFieldInDataSource { get; }
    public int RowIndex { get; }
    public bool ClearField { get; public set; }
    public IWMergeField CurrentMergeField { get; }
    public BeforeClearFieldEventArgs(WordDocument doc, string groupName, int rowIndex, IWMergeField field, bool fieldHasMappedInDataSource, object value);
    internal WordDocument get_Doc();
    public string get_FieldName();
    public object get_FieldValue();
    public void set_FieldValue(object value);
    public string get_GroupName();
    public bool get_HasMappedFieldInDataSource();
    public int get_RowIndex();
    public bool get_ClearField();
    public void set_ClearField(bool value);
    public IWMergeField get_CurrentMergeField();
}
public class Syncfusion.DocIO.DLS.BeforeClearFieldEventHandler : MulticastDelegate {
    public BeforeClearFieldEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BeforeClearFieldEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, BeforeClearFieldEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.DocIO.DLS.BeforeClearGroupFieldEventArgs : object {
    private WordDocument m_doc;
    private IWMergeField m_currentMergeField;
    private string m_groupName;
    private bool m_clearGroup;
    private bool m_fieldHasMappedInDataSource;
    private String[] m_fieldNames;
    private IEnumerable m_alternateValues;
    internal WordDocument Doc { get; }
    public string GroupName { get; }
    public bool HasMappedGroupInDataSource { get; }
    public bool ClearGroup { get; public set; }
    public String[] FieldNames { get; }
    public IEnumerable AlternateValues { get; public set; }
    public BeforeClearGroupFieldEventArgs(WordDocument doc, string groupName, IWMergeField field, bool fieldHasMappedInDataSource, String[] fieldNames);
    internal WordDocument get_Doc();
    public string get_GroupName();
    public bool get_HasMappedGroupInDataSource();
    public bool get_ClearGroup();
    public void set_ClearGroup(bool value);
    public String[] get_FieldNames();
    public IEnumerable get_AlternateValues();
    public void set_AlternateValues(IEnumerable value);
}
public class Syncfusion.DocIO.DLS.BeforeClearGroupFieldEventHandler : MulticastDelegate {
    public BeforeClearGroupFieldEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BeforeClearGroupFieldEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, BeforeClearGroupFieldEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Syncfusion.DocIO.DLS.BiDirectionalOverride : Enum {
    public int value__;
    public static BiDirectionalOverride None;
    public static BiDirectionalOverride LTR;
    public static BiDirectionalOverride RTL;
}
internal enum Syncfusion.DocIO.DLS.BlipCompressionType : Enum {
    public int value__;
    public static BlipCompressionType None;
    public static BlipCompressionType Email;
    public static BlipCompressionType Print;
    public static BlipCompressionType Screen;
    public static BlipCompressionType Hqprint;
}
internal class Syncfusion.DocIO.DLS.BlipFormat : object {
    private float m_threshold;
    private Color m_inverseColor;
    private float m_inverseOpacity;
    private float m_alphaReplaceAmount;
    private float m_bilevelThreshold;
    private float m_blurRadius;
    private Color m_colorFrom;
    private Color m_colorTo;
    private float m_colorFromOpacity;
    private float m_colorToOpacity;
    private float m_hue;
    private float m_luminance;
    private float m_saturation;
    private float m_brightness;
    private float m_contrast;
    private float m_tintAmount;
    private float m_tintHue;
    private Color m_duotoneColor;
    private Color m_duotonePresetColor;
    private float m_duotoneOpacity;
    private Dictionary`2<string, Stream> m_docxProps;
    private ImageEffect m_imageEffect;
    private List`1<string> m_extensionUri;
    private ImageRecord m_ImageRecord;
    private byte m_flagA;
    private byte m_bFlags;
    private float m_transparency;
    private Shape m_shape;
    private BlipTransparency m_blipTransparency;
    internal static byte ColorFromOpacityKey;
    internal static byte ColorToOpacityKey;
    internal static byte HasAlphaKey;
    internal float Threshold { get; internal set; }
    internal Color InverseColor { get; internal set; }
    internal float InverseOpacity { get; internal set; }
    internal float AlphaReplaceAmount { get; internal set; }
    internal float BilevelThreshold { get; internal set; }
    internal bool Grow { get; internal set; }
    internal float BlurRadius { get; internal set; }
    internal bool HasAlpha { get; internal set; }
    internal bool IsPresetColorAtFirst { get; internal set; }
    internal Color ColorFrom { get; internal set; }
    internal Color ColorTo { get; internal set; }
    internal float ColorFromOpacity { get; internal set; }
    internal float ColorToOpacity { get; internal set; }
    internal float Hue { get; internal set; }
    internal float Luminance { get; internal set; }
    internal float Saturation { get; internal set; }
    internal float Brightness { get; internal set; }
    internal float Contrast { get; internal set; }
    internal float TintAmount { get; internal set; }
    internal float TintHue { get; internal set; }
    internal Color DuotoneColor { get; internal set; }
    internal Color DuotonePresetColor { get; internal set; }
    internal float DuotoneOpacity { get; internal set; }
    internal List`1<string> ExtensionURI { get; internal set; }
    internal ImageEffect ImageEffect { get; internal set; }
    internal bool HasCompression { get; internal set; }
    internal bool HasImageProperties { get; internal set; }
    internal bool RotateWithObject { get; internal set; }
    internal ImageRecord ImageRecord { get; internal set; }
    internal Dictionary`2<string, Stream> DocxProps { get; }
    internal float Transparency { get; internal set; }
    internal BlipTransparency BlipTransparency { get; internal set; }
    internal bool GrayScale { get; internal set; }
    internal bool BiLevel { get; internal set; }
    internal BlipFormat(ShapeBase shape);
    internal BlipFormat(WPicture picture);
    internal float get_Threshold();
    internal void set_Threshold(float value);
    internal Color get_InverseColor();
    internal void set_InverseColor(Color value);
    internal float get_InverseOpacity();
    internal void set_InverseOpacity(float value);
    internal float get_AlphaReplaceAmount();
    internal void set_AlphaReplaceAmount(float value);
    internal float get_BilevelThreshold();
    internal void set_BilevelThreshold(float value);
    internal bool get_Grow();
    internal void set_Grow(bool value);
    internal float get_BlurRadius();
    internal void set_BlurRadius(float value);
    internal bool get_HasAlpha();
    internal void set_HasAlpha(bool value);
    internal bool get_IsPresetColorAtFirst();
    internal void set_IsPresetColorAtFirst(bool value);
    internal Color get_ColorFrom();
    internal void set_ColorFrom(Color value);
    internal Color get_ColorTo();
    internal void set_ColorTo(Color value);
    internal float get_ColorFromOpacity();
    internal void set_ColorFromOpacity(float value);
    internal float get_ColorToOpacity();
    internal void set_ColorToOpacity(float value);
    internal float get_Hue();
    internal void set_Hue(float value);
    internal float get_Luminance();
    internal void set_Luminance(float value);
    internal float get_Saturation();
    internal void set_Saturation(float value);
    internal float get_Brightness();
    internal void set_Brightness(float value);
    internal float get_Contrast();
    internal void set_Contrast(float value);
    internal float get_TintAmount();
    internal void set_TintAmount(float value);
    internal float get_TintHue();
    internal void set_TintHue(float value);
    internal Color get_DuotoneColor();
    internal void set_DuotoneColor(Color value);
    internal Color get_DuotonePresetColor();
    internal void set_DuotonePresetColor(Color value);
    internal float get_DuotoneOpacity();
    internal void set_DuotoneOpacity(float value);
    internal List`1<string> get_ExtensionURI();
    internal void set_ExtensionURI(List`1<string> value);
    internal ImageEffect get_ImageEffect();
    internal void set_ImageEffect(ImageEffect value);
    internal bool get_HasCompression();
    internal void set_HasCompression(bool value);
    internal bool get_HasImageProperties();
    internal void set_HasImageProperties(bool value);
    internal bool get_RotateWithObject();
    internal void set_RotateWithObject(bool value);
    internal ImageRecord get_ImageRecord();
    internal void set_ImageRecord(ImageRecord value);
    internal Dictionary`2<string, Stream> get_DocxProps();
    internal float get_Transparency();
    internal void set_Transparency(float value);
    internal BlipTransparency get_BlipTransparency();
    internal void set_BlipTransparency(BlipTransparency value);
    internal bool get_GrayScale();
    internal void set_GrayScale(bool value);
    internal bool get_BiLevel();
    internal void set_BiLevel(bool value);
    internal void Close();
    internal BlipFormat Clone();
    internal bool HasKey(int propertyKey);
    internal bool Compare(BlipFormat blipFormat);
    internal StringBuilder GetAsString();
}
internal enum Syncfusion.DocIO.DLS.BlipTransparency : Enum {
    public int value__;
    public static BlipTransparency None;
    public static BlipTransparency AlphaCeiling;
    public static BlipTransparency AlphaFloor;
    public static BlipTransparency GrayScale;
    public static BlipTransparency FillOverlay;
    public static BlipTransparency AlphaMod;
}
public class Syncfusion.DocIO.DLS.BlockContentControl : TextBodyItem {
    private ContentControlProperties m_controlProperties;
    private WCharacterFormat m_breakCharacterFormat;
    private WTextBody m_textBody;
    private WParagraph m_mappedParagraph;
    private string m_comparisonText;
    internal WParagraph MappedParagraph { get; internal set; }
    public WTextBody TextBody { get; }
    public ContentControlProperties ContentControlProperties { get; }
    public EntityCollection ChildEntities { get; }
    internal Entity LastChildEntity { get; }
    public WCharacterFormat BreakCharacterFormat { get; }
    public EntityType EntityType { get; }
    internal string ComparisonText { get; }
    private int Syncfusion.Layouting.IWidgetContainer.Count { get; }
    private IWidget Syncfusion.Layouting.IWidgetContainer.Item { get; }
    protected IEntityCollectionBase WidgetCollection { get; }
    private EntityCollection Syncfusion.Layouting.IWidgetContainer.WidgetInnerCollection { get; }
    public BlockContentControl(WordDocument doc);
    public BlockContentControl(WordDocument doc, ContentControlType controlType);
    internal WParagraph get_MappedParagraph();
    internal void set_MappedParagraph(WParagraph value);
    public sealed virtual WTextBody get_TextBody();
    public sealed virtual ContentControlProperties get_ContentControlProperties();
    public sealed virtual EntityCollection get_ChildEntities();
    internal Entity get_LastChildEntity();
    public sealed virtual WCharacterFormat get_BreakCharacterFormat();
    internal virtual void AddSelf();
    internal BlockContentControl Clone();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual TextBodyItem GetNextTextBodyItemValue();
    internal bool IsHiddenParagraphMarkIsInLastItemOfSDTContent();
    internal bool IsDeletionParagraphMarkIsInLastItemOfSDTContent();
    internal bool ContainsParagraph();
    internal WParagraph GetFirstParagraphOfSDTContent();
    internal WParagraph GetLastParagraphOfSDTContent();
    internal virtual bool CheckDeleteRev();
    internal virtual void SetChangedPFormat(bool check);
    internal virtual void SetChangedCFormat(bool check);
    internal virtual void SetDeleteRev(bool check);
    internal virtual void SetInsertRev(bool check);
    internal virtual bool HasTrackedChanges();
    public virtual int Replace(Regex pattern, string replace);
    internal int Replace(Regex pattern, TextBodyPart textPart, bool saveFormatting);
    public virtual int Replace(string given, string replace, bool caseSensitive, bool wholeWord);
    public virtual int Replace(Regex pattern, TextSelection textSelection);
    public virtual int Replace(Regex pattern, TextSelection textSelection, bool saveFormatting);
    public int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord);
    public int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord, bool saveFormatting);
    internal int ReplaceFirst(string given, string replace, bool caseSensitive, bool wholeWord);
    internal int ReplaceFirst(Regex pattern, string replace);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal virtual void RemoveCFormatChanges();
    internal virtual void RemovePFormatChanges();
    internal virtual void AcceptCChanges();
    internal virtual void AcceptPChanges();
    internal virtual bool CheckChangedCFormat();
    internal virtual bool CheckInsertRev();
    public virtual TextSelection Find(Regex pattern);
    public TextSelection Find(string given, bool caseSensitive, bool wholeWord);
    internal virtual void MakeChanges(bool acceptChanges);
    internal virtual TextSelectionList FindAll(Regex pattern, bool isDocumentComparison);
    private WCharacterFormat GetSrcCharacterFormat(TextSelection sel);
    internal int Replace(Regex pattern, IWordDocument replaceDoc, bool saveFormatting);
    internal virtual void Close();
    internal virtual bool CheckChangedPFormat();
    public virtual EntityType get_EntityType();
    internal string get_ComparisonText();
    internal StringBuilder GetAsString();
    internal virtual void Compare(WordDocument orgDoc);
    internal void Compare(WTextBody orgTextBody);
    private void CompareBlockContentControl(WordDocument orgDoc, WTextBody orgTextBody);
    internal virtual void AddDelMark();
    internal virtual void AddInsMark();
    private sealed virtual override int Syncfusion.Layouting.IWidgetContainer.get_Count();
    private sealed virtual override IWidget Syncfusion.Layouting.IWidgetContainer.get_Item(int index);
    protected IEntityCollectionBase get_WidgetCollection();
    private sealed virtual override EntityCollection Syncfusion.Layouting.IWidgetContainer.get_WidgetInnerCollection();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.BodyItemCollection : EntityCollection {
    private static Type[] DEF_ELEMENT_TYPES;
    internal TextBodyItem Item { get; }
    protected Type[] TypesOfElement { get; }
    public BodyItemCollection(WTextBody body);
    internal BodyItemCollection(WordDocument doc);
    private static BodyItemCollection();
    internal TextBodyItem get_Item(int index);
    protected virtual Type[] get_TypesOfElement();
}
public class Syncfusion.DocIO.DLS.Bookmark : object {
    private BookmarkStart m_bkmkStart;
    private BookmarkEnd m_bkmkEnd;
    public string Name { get; }
    public BookmarkStart BookmarkStart { get; }
    public BookmarkEnd BookmarkEnd { get; }
    public short FirstColumn { get; public set; }
    public short LastColumn { get; public set; }
    public Bookmark(BookmarkStart start);
    public Bookmark(BookmarkStart start, BookmarkEnd end);
    public string get_Name();
    public BookmarkStart get_BookmarkStart();
    public BookmarkEnd get_BookmarkEnd();
    public short get_FirstColumn();
    public void set_FirstColumn(short value);
    public short get_LastColumn();
    public void set_LastColumn(short value);
    internal void SetStart(BookmarkStart start);
    internal void SetEnd(BookmarkEnd end);
    private bool HasValidPosition(BookmarkEnd bookmarkEnd);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.BookmarkCollection : CollectionImpl {
    public Bookmark Item { get; }
    public Bookmark Item { get; }
    internal BookmarkCollection(WordDocument doc);
    public Bookmark get_Item(string name);
    public Bookmark get_Item(int index);
    public Bookmark FindByName(string name);
    public void RemoveAt(int index);
    public void Remove(Bookmark bookmark);
    public void Clear();
    internal void Add(Bookmark bookmark);
    internal void AttachBookmarkStart(BookmarkStart bookmarkStart);
    internal void AttachBookmarkEnd(BookmarkEnd bookmarkEnd);
}
public class Syncfusion.DocIO.DLS.BookmarkEnd : ParagraphItem {
    private string m_strName;
    private byte m_bFlags;
    private string m_displacedByCustomXml;
    public EntityType EntityType { get; }
    public string Name { get; }
    internal bool IsCellGroupBkmk { get; internal set; }
    internal bool IsDetached { get; internal set; }
    internal bool IsAfterParagraphMark { get; internal set; }
    internal bool IsAfterCellMark { get; internal set; }
    internal bool IsAfterRowMark { get; internal set; }
    internal bool IsAfterTableMark { get; internal set; }
    internal bool IsToAddInNextPara { get; internal set; }
    internal string DisplacedByCustomXml { get; internal set; }
    internal BookmarkEnd(WordDocument doc);
    public BookmarkEnd(IWordDocument document, string name);
    public virtual EntityType get_EntityType();
    public string get_Name();
    internal bool get_IsCellGroupBkmk();
    internal void set_IsCellGroupBkmk(bool value);
    internal bool get_IsDetached();
    internal void set_IsDetached(bool value);
    internal bool get_IsAfterParagraphMark();
    internal void set_IsAfterParagraphMark(bool value);
    internal bool get_IsAfterCellMark();
    internal void set_IsAfterCellMark(bool value);
    internal bool get_IsAfterRowMark();
    internal void set_IsAfterRowMark(bool value);
    internal bool get_IsAfterTableMark();
    internal void set_IsAfterTableMark(bool value);
    internal bool get_IsToAddInNextPara();
    internal void set_IsToAddInNextPara(bool value);
    internal string get_DisplacedByCustomXml();
    internal void set_DisplacedByCustomXml(string value);
    internal virtual void Close();
    internal void SetName(string name);
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void Detach();
    internal virtual void AttachToDocument();
    protected virtual object CloneImpl();
    internal bool HasRenderableItemBefore();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void CreateLayoutInfo();
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
}
public class Syncfusion.DocIO.DLS.BookmarksNavigator : object {
    private static string c_DocumentPropertyNotInitialized;
    private static string c_NotFoundSpecifiedBookmark;
    private static string c_NotEqualDocumentProperty;
    private static string c_CurrBookmarkNull;
    private static string c_NotSupportGettingContent;
    private static string c_NotSupportDeletingContent;
    private WordDocument m_document;
    private int m_currParagraphItemIndex;
    private IWParagraph m_currParagraph;
    private Bookmark m_currBookmark;
    private IParagraphItem m_currBookmarkItem;
    private byte m_flag;
    public IWordDocument Document { get; public set; }
    public Bookmark CurrentBookmark { get; }
    private bool IsStart { get; private set; }
    private bool IsAfter { get; private set; }
    internal bool RemoveEmptyParagraph { get; internal set; }
    public IParagraphItem CurrentBookmarkItem { get; }
    private int CurrentParagraphItemIndex { get; }
    public BookmarksNavigator(IWordDocument doc);
    public IWordDocument get_Document();
    public void set_Document(IWordDocument value);
    public Bookmark get_CurrentBookmark();
    private bool get_IsStart();
    private void set_IsStart(bool value);
    private bool get_IsAfter();
    private void set_IsAfter(bool value);
    internal bool get_RemoveEmptyParagraph();
    internal void set_RemoveEmptyParagraph(bool value);
    public IParagraphItem get_CurrentBookmarkItem();
    private int get_CurrentParagraphItemIndex();
    public void MoveToBookmark(string bookmarkName);
    public void MoveToBookmark(string bookmarkName, bool isStart, bool isAfter);
    public IWTextRange InsertText(string text);
    public IWTextRange InsertText(string text, bool saveFormatting);
    public void InsertTable(IWTable table);
    public IParagraphItem InsertParagraphItem(ParagraphItemType itemType);
    public void InsertParagraph(IWParagraph paragraph);
    public void InsertTextBodyPart(TextBodyPart bodyPart);
    public TextBodyPart GetBookmarkContent();
    public WordDocumentPart GetContent();
    public void DeleteBookmarkContent(bool saveFormatting);
    [ObsoleteAttribute("This method will be removed in future version. As a work around to remove bookmarked paragraph, utilize current bookmark property of bookmark navigator to access the current bookmarked paragraph and then remove its index from its owner (Text Body) collection.", "False")]
public void DeleteBookmarkContent(bool saveFormatting, bool removeEmptyParagraph);
    public void ReplaceBookmarkContent(TextBodyPart bodyPart);
    public void ReplaceContent(WordDocumentPart documentPart);
    internal void ReplaceContent(WordDocument document);
    public void ReplaceBookmarkContent(string text, bool saveFormatting);
    private void ReplaceBookmarkIndex(string bookmarkName, int bkmkIndex);
    private void ReplaceParagraphBookmarkContent(WSectionCollection sections);
    private void DeleteBookmarkContent(bool saveFormatting, bool removeEmptyParagrph, bool isReplaceBkmkContent);
    private void DeleteInBetweenSections(int startSectiontionIndex, int endSectiontionIndex);
    private void DeleteBkmkContentInDiffCell(WParagraph paragraphStart, WParagraph paragraphEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, WTableCell bkmkEndCell, bool isReplaceContent);
    private void DeleteMailMergeBkmkCntInDiffCell(WParagraph paragraphStart, WParagraph paragraphEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, WTableCell bkmkStartCell, WTableCell bkmkEndCell, WTable bkmkTable, int bkmkStartRowIndex);
    private void CreateBookmark(IWParagraph paragraphStart, IWParagraph paragraphEnd, int bkmkIndex, BookmarkStart bkmkStart, int columnFirst, int columnLast);
    private bool IsBookmarkEnclosedTable(WTable bkmkStartTable, WTable bkmkEndTable, BookmarkStart bookmarkStart, BookmarkEnd bookmarkEnd);
    private void DeleteNestedTableBookmarkTextBodyInSameCell(BookmarkStart bkmrkStart, WTableCell bkmkStartCell, WTable endTable, int bkmkEndRowIndex);
    private void DeleteTableBookmarkTextBody(WTable bkmkStartTable, WTable bkmkEndTable, int bkmkStartRowIndex, int bkmkEndRowIndex, bool isReplaceContent, WParagraph paragraphEnd, BookmarkEnd bkmkEnd);
    private bool CheckTwoTableProperties(WTable bkmkStartTable, WTable bkmkEndTable);
    private void DeleteBkmkContentInTableAfterParagraph(WParagraph paragraphStart, WParagraph paragraphEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, bool isReplaceContent);
    private void DeleteTableRows(int startRowIndex, int endRowIndex, WTable bkmkTable);
    private void UpdateBookmark(TextBodyItem textBodyItem, Stack`1<Entity> bookmarks);
    private Entity GetOwnerEntity(Entity entity);
    private void DeleteTableRows(int startRowIndex, int endRowIndex, WTable bkmkTable, WParagraph paragraphEnd, BookmarkEnd bkmkEnd);
    private void DeleteBookmarkEndRow(WParagraph paragraphEnd, BookmarkEnd bkmkEnd, int j, WTableRow endRow);
    private bool CheckBookmarkEnd(WParagraph bkmkStartPara, WParagraph bkmkEndPara, Bookmark bkmk, int endIndex);
    private void DeleteBkmkContentInParagraphAftertable(WParagraph paragraphStart, WParagraph paragraphEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, bool isReplaceContent);
    private WParagraph GetParagraphToInsertBookmark(WTextBody startTextBody, WTextBody endTextBody, WParagraph paragraph, int bkmkItemIndex, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, bool isInSingleSection, bool isParaAfterTable);
    private void DeleteTableBookmarkTextBody(WTable bkmkTable, int startRowIndex, int endRowIndex, int startCellIndex, int endCellIndex, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private void DeleteParagraphItemsInCell(WParagraph paragraph);
    private void DeleteBookmarkTextBody(bool saveFormatting, bool isReplaceBkmkContent);
    private void CheckFieldWithinBookmark(WParagraph paragraphEnd, Int32& bkmkStartNextItemIndex);
    private void MergeMultiSectionBodyItems(WTextBody startTextBody, WTextBody endTextBody);
    private void DeleteFirstSectionItemsFromDocument(int startParagraphIndex, Int32& endParagraphIndex, WTextBody startTextBody, int bkmkStartNextItemIndex, bool isInSingleSection);
    private bool IsDeleteBkmk(Bookmark bkmkStart, int startParagraphIndex);
    private bool IsBkMkInsideCurrBkMkRegion(Entity item, int startParaIndex, int endParaIndex);
    private WParagraph DeleteBkmkFromParagraph(WParagraph paragraph, int startBkmkIndex, int endBkmkIndex);
    private void DeleteLastSectionItemsFromDocument(int endParagraphIndex, WTextBody endTextBody, bool IsFirstBkmkEnd, bool isInSingleSection);
    private Entity GetSection(Entity entity);
    internal bool IsBkmkEndInFirstItem(WParagraph paragraph, ParagraphItem bkmkEnd, int bkmkEndPreviosItemIndex);
    private bool IsBkmkEndFirstItemInTable(int bkmkEndRowIndex, WTable bkmkEndTable, WParagraph paragraphEnd, BookmarkEnd bkmkEnd);
    private void SetCurrentBookmarkPosition(WParagraph paragraphStart, WParagraph paragraphEnd, WTextBody textBodyStart, WTextBody textBodyEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, int startParagraphNextIndex, bool isFirstItemBkmkEnd, bool isInSingleSection, bool isReplaceOperation, int bkmkIndex);
    private void SetCurrentBookmarkPosition(WTable bkmkStartTable, WTable bkmkEndTable, WTextBody startTableTextBody, WTextBody endTableTextBody, int bkmkIndex);
    private void DeletePreviousItemsInOwnerParagraphgrah(WParagraph paragraphEnd, BookmarkEnd bkmkEnd);
    private void MoveNestedBookmark(WParagraph sourceParagraph, WParagraph destinationParagrah);
    private void ReplaceCurrentBookmark(WParagraph paragraph, int bkmkStartIndex, int bkmkEndIndex, int bkmkIndex);
    private void ReplaceTableBookmarkContent(WordDocument document, WordDocumentPart documentPart, TextBodyPart textPart);
    private void CheckCurrentState();
    private IWTextRange InsertText(string text, bool saveFormatting, bool isReplaceContent);
    private void ApplyParagraphFormatting(IWTextRange textRange);
    private void InsertBodyItem(TextBodyItem item);
}
public class Syncfusion.DocIO.DLS.BookmarkStart : ParagraphItem {
    private string m_strName;
    private short m_colFirst;
    private short m_colLast;
    private string m_displacedByCustomXml;
    private byte m_bFlags;
    public EntityType EntityType { get; }
    public string Name { get; }
    internal bool IsCellGroupBkmk { get; internal set; }
    internal bool IsDetached { get; internal set; }
    internal short ColumnFirst { get; internal set; }
    internal short ColumnLast { get; internal set; }
    internal string DisplacedByCustomXml { get; internal set; }
    internal BookmarkStart(WordDocument doc);
    public BookmarkStart(IWordDocument doc, string name);
    public virtual EntityType get_EntityType();
    public string get_Name();
    internal bool get_IsCellGroupBkmk();
    internal void set_IsCellGroupBkmk(bool value);
    internal bool get_IsDetached();
    internal void set_IsDetached(bool value);
    internal short get_ColumnFirst();
    internal void set_ColumnFirst(short value);
    internal short get_ColumnLast();
    internal void set_ColumnLast(short value);
    internal string get_DisplacedByCustomXml();
    internal void set_DisplacedByCustomXml(string value);
    internal void SetName(string name);
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void Detach();
    internal virtual void AttachToDocument();
    protected virtual object CloneImpl();
    internal virtual void Close();
    internal void GetBkmkContentInDiffCell(WTable bkmkTable, int startTableRowIndex, int endTableRowIndex, int startCellIndex, int endCellIndex, WTextBody textBody);
    private int GetMaximumCellCount(WTable Table, int bkmkEndCellIndex);
    private WTableCell RemoveBkmkStartEndFromCell(WTableCell tableCell);
    internal void GetBookmarkStartAndEndCell(WTableCell bkmkStartCell, WTableCell bkmkEndCell, WTableCell tempBkmkEndCell, WTable bkmkStartTable, WTable bkmkEndTable, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, int startTableRowIndex, Int32& endTableRowIndex, Int32& bkmkStartCellIndex, Int32& bkmkEndCellIndex);
    private void GetCellRangeForMergedCells(WTableCell bkmkStartCell, WTableCell bkmkEndCell, WTable bkmkStartTable, WTable bkmkEndTable, int startTableRowIndex, int endTableRowIndex, Int32& bkmkStartCellIndex, Int32& bkmkEndCellIndex);
    internal bool IsBookmarkEndAtSameCell(WTableCell bkmkStartCell, WTable bkmkStartTable, WTable& bkmkEndTable, Int32& bkmkEndRowIndex);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
}
public class Syncfusion.DocIO.DLS.Border : FormatBase {
    public static int ColorKey;
    internal static int BorderTypeKey;
    internal static int LineWidthKey;
    protected static int SpaceKey;
    protected static int ShadowKey;
    protected static int HasNoneStyleKey;
    private BorderPositions m_borderPosition;
    private byte m_bFlags;
    internal bool IsRead { get; internal set; }
    internal bool IsHTMLRead { get; internal set; }
    internal BorderPositions BorderPosition { get; internal set; }
    public Color Color { get; public set; }
    public float LineWidth { get; public set; }
    public BorderStyle BorderType { get; public set; }
    public float Space { get; public set; }
    public bool Shadow { get; public set; }
    internal bool HasNoneStyle { get; internal set; }
    internal bool IsBorderDefined { get; }
    public Border(FormatBase parent, int baseKey);
    internal bool get_IsRead();
    internal void set_IsRead(bool value);
    internal bool get_IsHTMLRead();
    internal void set_IsHTMLRead(bool value);
    internal BorderPositions get_BorderPosition();
    internal void set_BorderPosition(BorderPositions value);
    public Color get_Color();
    public void set_Color(Color value);
    public float get_LineWidth();
    public void set_LineWidth(float value);
    public BorderStyle get_BorderType();
    public void set_BorderType(BorderStyle value);
    public float get_Space();
    public void set_Space(float value);
    public bool get_Shadow();
    public void set_Shadow(bool value);
    internal bool get_HasNoneStyle();
    internal void set_HasNoneStyle(bool value);
    internal bool get_IsBorderDefined();
    internal static bool IsSkipBorder(Border value1, Border value2, bool isFirstRead);
    private Border OwnerBorder();
    internal void CopyBorderFormatting(Border sourceBorder);
    private void UpdateTableCells();
    internal float GetLineWidthValue();
    internal float GetLineWeight();
    private int GetLineNumber();
    internal int GetStylePriority();
    private Single[] GetBorderLineWidthArray(BorderStyle borderType, float lineWidth);
    private void UpdateAroundCell(WTable table, Borders borders, int rowIndex, int cellIndex);
    private void UpdateAruondRow(WTable table, int rowIndex);
    private void SetBorderStyle(BorderStyle value);
    internal void SetDefaultProperties();
    internal bool Compare(Border border);
    internal StringBuilder GetAsString();
    public void InitFormatting(Color color, float lineWidth, BorderStyle borderType, bool shadow);
    protected virtual object GetDefValue(int key);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void InitXDLSHolder();
    protected virtual void OnChange(FormatBase format, int propertyKey);
    internal virtual void ApplyBase(FormatBase baseFormat);
    internal void UpdateSourceFormatting(Border border);
}
public class Syncfusion.DocIO.DLS.Borders : FormatBase {
    public static int LeftKey;
    public static int TopKey;
    public static int BottomKey;
    public static int RightKey;
    public static int VerticalKey;
    public static int HorizontalKey;
    public static int DiagonalDownKey;
    public static int DiagonalUpKey;
    private WTableCell m_currTableCell;
    private WTableRow m_currTableRow;
    public bool NoBorder { get; }
    internal bool IsCellHasNoBorder { get; }
    public Border Left { get; }
    public Border Top { get; }
    public Border Right { get; }
    public Border Bottom { get; }
    public Border Vertical { get; }
    public Border Horizontal { get; }
    internal Border DiagonalDown { get; }
    internal Border DiagonalUp { get; }
    unknown Color Color {public set; }
    unknown float LineWidth {public set; }
    unknown BorderStyle BorderType {public set; }
    unknown float Space {public set; }
    unknown bool Shadow {public set; }
    internal WTableCell CurrentCell { get; }
    internal WTableRow CurrentRow { get; }
    unknown bool IsHTMLRead {internal set; }
    unknown bool IsRead {internal set; }
    internal Borders(FormatBase parent, int baseKey);
    internal Borders(Borders borders);
    public bool get_NoBorder();
    internal bool get_IsCellHasNoBorder();
    public Border get_Left();
    public Border get_Top();
    public Border get_Right();
    public Border get_Bottom();
    public Border get_Vertical();
    public Border get_Horizontal();
    internal Border get_DiagonalDown();
    internal Border get_DiagonalUp();
    public void set_Color(Color value);
    public void set_LineWidth(float value);
    public void set_BorderType(BorderStyle value);
    public void set_Space(float value);
    public void set_Shadow(bool value);
    internal WTableCell get_CurrentCell();
    internal WTableRow get_CurrentRow();
    internal void set_IsHTMLRead(bool value);
    internal void set_IsRead(bool value);
    protected internal virtual void EnsureComposites();
    protected virtual object GetDefValue(int key);
    protected virtual FormatBase GetDefComposite(int key);
    protected virtual void InitXDLSHolder();
    public Borders Clone();
    protected virtual object CloneImpl();
    protected virtual void OnChange(FormatBase format, int propertyKey);
    internal virtual void ApplyBase(FormatBase baseFormat);
    internal void SetDefaultProperties();
    private void SetSpacing(float value);
    internal bool IsAdjacentBorderSame(Border currentParagraphBorder, Border nextParagraphBorder);
    private void InitBorders();
    internal virtual void Close();
    internal void UpdateSourceFormatting(Borders borders);
    internal bool Compare(Borders borders);
}
internal enum Syncfusion.DocIO.DLS.BorderSide : Enum {
    public int value__;
    public static BorderSide Top;
    public static BorderSide Bottom;
    public static BorderSide Left;
    public static BorderSide Right;
    public static BorderSide Between;
    public static BorderSide Bar;
}
public enum Syncfusion.DocIO.DLS.BorderStyle : Enum {
    public int value__;
    public static BorderStyle None;
    public static BorderStyle Single;
    public static BorderStyle Thick;
    public static BorderStyle Double;
    public static BorderStyle Hairline;
    public static BorderStyle Dot;
    public static BorderStyle DashLargeGap;
    public static BorderStyle DotDash;
    public static BorderStyle DotDotDash;
    public static BorderStyle Triple;
    public static BorderStyle ThinThickSmallGap;
    public static BorderStyle ThinThinSmallGap;
    public static BorderStyle ThinThickThinSmallGap;
    public static BorderStyle ThinThickMediumGap;
    public static BorderStyle ThickThinMediumGap;
    public static BorderStyle ThickThickThinMediumGap;
    public static BorderStyle ThinThickLargeGap;
    public static BorderStyle ThickThinLargeGap;
    public static BorderStyle ThinThickThinLargeGap;
    public static BorderStyle Wave;
    public static BorderStyle DoubleWave;
    public static BorderStyle DashSmallGap;
    public static BorderStyle DashDotStroker;
    public static BorderStyle Emboss3D;
    public static BorderStyle Engrave3D;
    public static BorderStyle Outset;
    public static BorderStyle Inset;
    public static BorderStyle TwistedLines1;
    public static BorderStyle Cleared;
}
public class Syncfusion.DocIO.DLS.Break : ParagraphItem {
    internal BreakType m_breakType;
    private WTextRange m_lineBreakText;
    internal HtmlToDocLayoutInfo m_htmlToDocLayoutInfo;
    internal HtmlToDocLayoutInfo HtmlToDocLayoutInfo { get; }
    public EntityType EntityType { get; }
    public BreakType BreakType { get; }
    internal WTextRange TextRange { get; internal set; }
    internal WCharacterFormat CharacterFormat { get; }
    internal int EndPos { get; }
    public Break(IWordDocument doc);
    public Break(IWordDocument doc, BreakType breakType);
    internal HtmlToDocLayoutInfo get_HtmlToDocLayoutInfo();
    public virtual EntityType get_EntityType();
    public BreakType get_BreakType();
    internal WTextRange get_TextRange();
    internal void set_TextRange(WTextRange value);
    internal WCharacterFormat get_CharacterFormat();
    internal virtual int get_EndPos();
    internal virtual void Close();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual void AttachToParagraph(WParagraph paragraph, int itemPos);
    internal virtual void Detach();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void InitXDLSHolder();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private bool IsPageBreakNeedToBeSkipped();
    internal bool IsCarriageReturn();
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
    internal bool Compare(Break break1);
}
internal enum Syncfusion.DocIO.DLS.BreakClearType : Enum {
    public int value__;
    public static BreakClearType None;
    public static BreakClearType Left;
    public static BreakClearType Right;
    public static BreakClearType All;
}
public enum Syncfusion.DocIO.DLS.BreakType : Enum {
    public int value__;
    public static BreakType PageBreak;
    public static BreakType ColumnBreak;
    public static BreakType LineBreak;
    public static BreakType TextWrappingBreak;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.BuiltinDocumentProperties : SummaryDocumentProperties {
    private Dictionary`2<int, DocumentProperty> m_documentHash;
    public string Category { get; public set; }
    public int BytesCount { get; internal set; }
    public int LinesCount { get; internal set; }
    public int ParagraphCount { get; internal set; }
    public int SlideCount { get; internal set; }
    public int NoteCount { get; internal set; }
    public int HiddenCount { get; internal set; }
    public string Company { get; public set; }
    public string Manager { get; public set; }
    internal Dictionary`2<int, DocumentProperty> DocumentHash { get; }
    internal DocumentProperty Item { get; }
    internal BuiltinDocumentProperties(int docCount, int summCount);
    internal BuiltinDocumentProperties(WordDocument doc);
    public string get_Category();
    public void set_Category(string value);
    public int get_BytesCount();
    internal void set_BytesCount(int value);
    public int get_LinesCount();
    internal void set_LinesCount(int value);
    public int get_ParagraphCount();
    internal void set_ParagraphCount(int value);
    public int get_SlideCount();
    internal void set_SlideCount(int value);
    public int get_NoteCount();
    internal void set_NoteCount(int value);
    public int get_HiddenCount();
    internal void set_HiddenCount(int value);
    public string get_Company();
    public void set_Company(string value);
    public string get_Manager();
    public void set_Manager(string value);
    internal Dictionary`2<int, DocumentProperty> get_DocumentHash();
    internal DocumentProperty get_Item(BuiltInProperty property);
    private bool HasKey(int key);
    public BuiltinDocumentProperties Clone();
    internal void SetPropertyValue(BuiltInProperty builtInProperty, object value);
    internal virtual void Close();
}
internal enum Syncfusion.DocIO.DLS.BuiltinListStyle : Enum {
    public int value__;
    public static BuiltinListStyle ListBullet;
    public static BuiltinListStyle ListNumber;
    public static BuiltinListStyle ListBullet2;
    public static BuiltinListStyle ListBullet3;
    public static BuiltinListStyle ListBullet4;
    public static BuiltinListStyle ListBullet5;
    public static BuiltinListStyle ListNumber2;
    public static BuiltinListStyle ListNumber3;
    public static BuiltinListStyle ListNumber4;
    public static BuiltinListStyle ListNumber5;
}
public enum Syncfusion.DocIO.DLS.BuiltinStyle : Enum {
    public int value__;
    public static BuiltinStyle Normal;
    public static BuiltinStyle Heading1;
    public static BuiltinStyle Heading2;
    public static BuiltinStyle Heading3;
    public static BuiltinStyle Heading4;
    public static BuiltinStyle Heading5;
    public static BuiltinStyle Heading6;
    public static BuiltinStyle Heading7;
    public static BuiltinStyle Heading8;
    public static BuiltinStyle Heading9;
    public static BuiltinStyle Index1;
    public static BuiltinStyle Index2;
    public static BuiltinStyle Index3;
    public static BuiltinStyle Index4;
    public static BuiltinStyle Index5;
    public static BuiltinStyle Index6;
    public static BuiltinStyle Index7;
    public static BuiltinStyle Index8;
    public static BuiltinStyle Index9;
    public static BuiltinStyle Toc1;
    public static BuiltinStyle Toc2;
    public static BuiltinStyle Toc3;
    public static BuiltinStyle Toc4;
    public static BuiltinStyle Toc5;
    public static BuiltinStyle Toc6;
    public static BuiltinStyle Toc7;
    public static BuiltinStyle Toc8;
    public static BuiltinStyle Toc9;
    public static BuiltinStyle NormalIndent;
    public static BuiltinStyle FootnoteText;
    public static BuiltinStyle CommentText;
    public static BuiltinStyle Header;
    public static BuiltinStyle Footer;
    public static BuiltinStyle IndexHeading;
    public static BuiltinStyle Caption;
    public static BuiltinStyle TableOfFigures;
    public static BuiltinStyle FootnoteReference;
    public static BuiltinStyle CommentReference;
    public static BuiltinStyle LineNumber;
    public static BuiltinStyle PageNumber;
    public static BuiltinStyle EndnoteReference;
    public static BuiltinStyle EndnoteText;
    public static BuiltinStyle TableOfAuthorities;
    public static BuiltinStyle MacroText;
    public static BuiltinStyle ToaHeading;
    public static BuiltinStyle List;
    public static BuiltinStyle ListBullet;
    public static BuiltinStyle ListNumber;
    public static BuiltinStyle List2;
    public static BuiltinStyle List3;
    public static BuiltinStyle List4;
    public static BuiltinStyle List5;
    public static BuiltinStyle ListBullet2;
    public static BuiltinStyle ListBullet3;
    public static BuiltinStyle ListBullet4;
    public static BuiltinStyle ListBullet5;
    public static BuiltinStyle ListNumber2;
    public static BuiltinStyle ListNumber3;
    public static BuiltinStyle ListNumber4;
    public static BuiltinStyle ListNumber5;
    public static BuiltinStyle Title;
    public static BuiltinStyle Closing;
    public static BuiltinStyle Signature;
    public static BuiltinStyle DefaultParagraphFont;
    public static BuiltinStyle BodyText;
    public static BuiltinStyle BodyTextInd;
    public static BuiltinStyle ListContinue;
    public static BuiltinStyle ListContinue2;
    public static BuiltinStyle ListContinue3;
    public static BuiltinStyle ListContinue4;
    public static BuiltinStyle ListContinue5;
    public static BuiltinStyle MessageHeader;
    public static BuiltinStyle Subtitle;
    public static BuiltinStyle Salutation;
    public static BuiltinStyle Date;
    public static BuiltinStyle BodyText1I;
    public static BuiltinStyle BodyText1I2;
    public static BuiltinStyle NoteHeading;
    public static BuiltinStyle BodyText2;
    public static BuiltinStyle BodyText3;
    public static BuiltinStyle BodyTextInd2;
    public static BuiltinStyle BodyTextInd3;
    public static BuiltinStyle BlockText;
    public static BuiltinStyle Hyperlink;
    public static BuiltinStyle FollowedHyperlink;
    public static BuiltinStyle Strong;
    public static BuiltinStyle Emphasis;
    public static BuiltinStyle DocumentMap;
    public static BuiltinStyle PlainText;
    public static BuiltinStyle EmailSignature;
    public static BuiltinStyle NormalWeb;
    public static BuiltinStyle HtmlAcronym;
    public static BuiltinStyle HtmlAddress;
    public static BuiltinStyle HtmlCite;
    public static BuiltinStyle HtmlCode;
    public static BuiltinStyle HtmlDefinition;
    public static BuiltinStyle HtmlKeyboard;
    public static BuiltinStyle HtmlPreformatted;
    public static BuiltinStyle HtmlSample;
    public static BuiltinStyle HtmlTypewriter;
    public static BuiltinStyle HtmlVariable;
    public static BuiltinStyle CommentSubject;
    public static BuiltinStyle NoList;
    public static BuiltinStyle BalloonText;
    public static BuiltinStyle User;
    public static BuiltinStyle NoStyle;
}
public enum Syncfusion.DocIO.DLS.BuiltinTableStyle : Enum {
    public int value__;
    public static BuiltinTableStyle TableNormal;
    public static BuiltinTableStyle TableGrid;
    public static BuiltinTableStyle LightShading;
    public static BuiltinTableStyle LightShadingAccent1;
    public static BuiltinTableStyle LightShadingAccent2;
    public static BuiltinTableStyle LightShadingAccent3;
    public static BuiltinTableStyle LightShadingAccent4;
    public static BuiltinTableStyle LightShadingAccent5;
    public static BuiltinTableStyle LightShadingAccent6;
    public static BuiltinTableStyle LightList;
    public static BuiltinTableStyle LightListAccent1;
    public static BuiltinTableStyle LightListAccent2;
    public static BuiltinTableStyle LightListAccent3;
    public static BuiltinTableStyle LightListAccent4;
    public static BuiltinTableStyle LightListAccent5;
    public static BuiltinTableStyle LightListAccent6;
    public static BuiltinTableStyle LightGrid;
    public static BuiltinTableStyle LightGridAccent1;
    public static BuiltinTableStyle LightGridAccent2;
    public static BuiltinTableStyle LightGridAccent3;
    public static BuiltinTableStyle LightGridAccent4;
    public static BuiltinTableStyle LightGridAccent5;
    public static BuiltinTableStyle LightGridAccent6;
    public static BuiltinTableStyle MediumShading1;
    public static BuiltinTableStyle MediumShading1Accent1;
    public static BuiltinTableStyle MediumShading1Accent2;
    public static BuiltinTableStyle MediumShading1Accent3;
    public static BuiltinTableStyle MediumShading1Accent4;
    public static BuiltinTableStyle MediumShading1Accent5;
    public static BuiltinTableStyle MediumShading1Accent6;
    public static BuiltinTableStyle MediumShading2;
    public static BuiltinTableStyle MediumShading2Accent1;
    public static BuiltinTableStyle MediumShading2Accent2;
    public static BuiltinTableStyle MediumShading2Accent3;
    public static BuiltinTableStyle MediumShading2Accent4;
    public static BuiltinTableStyle MediumShading2Accent5;
    public static BuiltinTableStyle MediumShading2Accent6;
    public static BuiltinTableStyle MediumList1;
    public static BuiltinTableStyle MediumList1Accent1;
    public static BuiltinTableStyle MediumList1Accent2;
    public static BuiltinTableStyle MediumList1Accent3;
    public static BuiltinTableStyle MediumList1Accent4;
    public static BuiltinTableStyle MediumList1Accent5;
    public static BuiltinTableStyle MediumList1Accent6;
    public static BuiltinTableStyle MediumList2;
    public static BuiltinTableStyle MediumList2Accent1;
    public static BuiltinTableStyle MediumList2Accent2;
    public static BuiltinTableStyle MediumList2Accent3;
    public static BuiltinTableStyle MediumList2Accent4;
    public static BuiltinTableStyle MediumList2Accent5;
    public static BuiltinTableStyle MediumList2Accent6;
    public static BuiltinTableStyle MediumGrid1;
    public static BuiltinTableStyle MediumGrid1Accent1;
    public static BuiltinTableStyle MediumGrid1Accent2;
    public static BuiltinTableStyle MediumGrid1Accent3;
    public static BuiltinTableStyle MediumGrid1Accent4;
    public static BuiltinTableStyle MediumGrid1Accent5;
    public static BuiltinTableStyle MediumGrid1Accent6;
    public static BuiltinTableStyle MediumGrid2;
    public static BuiltinTableStyle MediumGrid2Accent1;
    public static BuiltinTableStyle MediumGrid2Accent2;
    public static BuiltinTableStyle MediumGrid2Accent3;
    public static BuiltinTableStyle MediumGrid2Accent4;
    public static BuiltinTableStyle MediumGrid2Accent5;
    public static BuiltinTableStyle MediumGrid2Accent6;
    public static BuiltinTableStyle MediumGrid3;
    public static BuiltinTableStyle MediumGrid3Accent1;
    public static BuiltinTableStyle MediumGrid3Accent2;
    public static BuiltinTableStyle MediumGrid3Accent3;
    public static BuiltinTableStyle MediumGrid3Accent4;
    public static BuiltinTableStyle MediumGrid3Accent5;
    public static BuiltinTableStyle MediumGrid3Accent6;
    public static BuiltinTableStyle DarkList;
    public static BuiltinTableStyle DarkListAccent1;
    public static BuiltinTableStyle DarkListAccent2;
    public static BuiltinTableStyle DarkListAccent3;
    public static BuiltinTableStyle DarkListAccent4;
    public static BuiltinTableStyle DarkListAccent5;
    public static BuiltinTableStyle DarkListAccent6;
    public static BuiltinTableStyle ColorfulShading;
    public static BuiltinTableStyle ColorfulShadingAccent1;
    public static BuiltinTableStyle ColorfulShadingAccent2;
    public static BuiltinTableStyle ColorfulShadingAccent3;
    public static BuiltinTableStyle ColorfulShadingAccent4;
    public static BuiltinTableStyle ColorfulShadingAccent5;
    public static BuiltinTableStyle ColorfulShadingAccent6;
    public static BuiltinTableStyle ColorfulList;
    public static BuiltinTableStyle ColorfulListAccent1;
    public static BuiltinTableStyle ColorfulListAccent2;
    public static BuiltinTableStyle ColorfulListAccent3;
    public static BuiltinTableStyle ColorfulListAccent4;
    public static BuiltinTableStyle ColorfulListAccent5;
    public static BuiltinTableStyle ColorfulListAccent6;
    public static BuiltinTableStyle ColorfulGrid;
    public static BuiltinTableStyle ColorfulGridAccent1;
    public static BuiltinTableStyle ColorfulGridAccent2;
    public static BuiltinTableStyle ColorfulGridAccent3;
    public static BuiltinTableStyle ColorfulGridAccent4;
    public static BuiltinTableStyle ColorfulGridAccent5;
    public static BuiltinTableStyle ColorfulGridAccent6;
    public static BuiltinTableStyle Table3Deffects1;
    public static BuiltinTableStyle Table3Deffects2;
    public static BuiltinTableStyle Table3Deffects3;
    public static BuiltinTableStyle TableClassic1;
    public static BuiltinTableStyle TableClassic2;
    public static BuiltinTableStyle TableClassic3;
    public static BuiltinTableStyle TableClassic4;
    public static BuiltinTableStyle TableColorful1;
    public static BuiltinTableStyle TableColorful2;
    public static BuiltinTableStyle TableColorful3;
    public static BuiltinTableStyle TableColumns1;
    public static BuiltinTableStyle TableColumns2;
    public static BuiltinTableStyle TableColumns3;
    public static BuiltinTableStyle TableColumns4;
    public static BuiltinTableStyle TableColumns5;
    public static BuiltinTableStyle TableContemporary;
    public static BuiltinTableStyle TableElegant;
    public static BuiltinTableStyle TableGrid1;
    public static BuiltinTableStyle TableGrid2;
    public static BuiltinTableStyle TableGrid3;
    public static BuiltinTableStyle TableGrid4;
    public static BuiltinTableStyle TableGrid5;
    public static BuiltinTableStyle TableGrid6;
    public static BuiltinTableStyle TableGrid7;
    public static BuiltinTableStyle TableGrid8;
    public static BuiltinTableStyle TableList1;
    public static BuiltinTableStyle TableList2;
    public static BuiltinTableStyle TableList3;
    public static BuiltinTableStyle TableList4;
    public static BuiltinTableStyle TableList5;
    public static BuiltinTableStyle TableList6;
    public static BuiltinTableStyle TableList7;
    public static BuiltinTableStyle TableList8;
    public static BuiltinTableStyle TableProfessional;
    public static BuiltinTableStyle TableSimple1;
    public static BuiltinTableStyle TableSimple2;
    public static BuiltinTableStyle TableSimple3;
    public static BuiltinTableStyle TableSubtle1;
    public static BuiltinTableStyle TableSubtle2;
    public static BuiltinTableStyle TableTheme;
    public static BuiltinTableStyle TableWeb1;
    public static BuiltinTableStyle TableWeb2;
    public static BuiltinTableStyle TableWeb3;
}
public enum Syncfusion.DocIO.DLS.CalendarType : Enum {
    public int value__;
    public static CalendarType Gregorian;
    public static CalendarType GregorianArabic;
    public static CalendarType GregorianMiddleEastFrench;
    public static CalendarType GregorianEnglish;
    public static CalendarType GregorianTransliteratedEnglish;
    public static CalendarType GregorianTransliteratedFrench;
    public static CalendarType Hebrew;
    public static CalendarType Hijri;
    public static CalendarType Japan;
    public static CalendarType Korean;
    public static CalendarType Taiwan;
    public static CalendarType Thai;
    public static CalendarType Saka;
}
internal class Syncfusion.DocIO.DLS.CellContentControl : WTextBody {
    private ContentControlProperties m_contentControlProperties;
    private WCharacterFormat m_BreakCharacterFormat;
    private WTableCell m_ownerCell;
    private WTableCell m_mappedCell;
    internal WTableCell MappedCell { get; internal set; }
    internal WTableCell OwnerCell { get; internal set; }
    public ContentControlProperties ContentControlProperties { get; public set; }
    public WCharacterFormat BreakCharacterFormat { get; public set; }
    public CellContentControl(WordDocument document);
    internal WTableCell get_MappedCell();
    internal void set_MappedCell(WTableCell value);
    internal WTableCell get_OwnerCell();
    internal void set_OwnerCell(WTableCell value);
    public sealed virtual ContentControlProperties get_ContentControlProperties();
    public void set_ContentControlProperties(ContentControlProperties value);
    public sealed virtual WCharacterFormat get_BreakCharacterFormat();
    public void set_BreakCharacterFormat(WCharacterFormat value);
    internal void Close();
}
public class Syncfusion.DocIO.DLS.CellFormat : FormatBase {
    internal static int BordersKey;
    internal static int VrAlignmentKey;
    internal static int PaddingsKey;
    internal static int ShadingColorKey;
    internal static int ForeColorKey;
    internal static int VerticalMergeKey;
    internal static int TextureStyleKey;
    internal static int HorizontalMergeKey;
    internal static int TextWrapKey;
    internal static int FitTextKey;
    internal static int TextDirectionKey;
    internal static int CellWidthKey;
    internal static int PreferredWidthTypeKey;
    internal static int PreferredWidthKey;
    internal static int FormatChangeAuthorNameKey;
    internal static int FormatChangeDateTimeKey;
    internal static int CellGridSpanKey;
    private RowFormat m_ownerRowFormat;
    private byte m_bFlags;
    private byte m_bFlags1;
    private PreferredWidthInfo m_preferredWidth;
    private List`1<Stream> m_xmlProps;
    private bool CancelOnChange { get; private set; }
    internal bool Hidden { get; internal set; }
    internal bool IsChangedFormat { get; internal set; }
    internal PreferredWidthInfo PreferredWidth { get; }
    public Borders Borders { get; internal set; }
    public Paddings Paddings { get; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    public Color BackColor { get; public set; }
    public CellMerge VerticalMerge { get; public set; }
    public CellMerge HorizontalMerge { get; public set; }
    public bool TextWrap { get; public set; }
    public bool FitText { get; public set; }
    public TextDirection TextDirection { get; public set; }
    public bool SamePaddingsAsTable { get; public set; }
    internal RowFormat OwnerRowFormat { get; }
    internal int CurCellIndex { get; }
    internal float CellWidth { get; internal set; }
    internal short CellGridSpan { get; internal set; }
    internal Color ForeColor { get; internal set; }
    internal TextureStyle TextureStyle { get; internal set; }
    internal List`1<Stream> XmlProps { get; }
    internal bool HideMark { get; internal set; }
    internal string FormatChangeAuthorName { get; internal set; }
    internal DateTime FormatChangeDateTime { get; internal set; }
    private bool get_CancelOnChange();
    private void set_CancelOnChange(bool value);
    internal bool get_Hidden();
    internal void set_Hidden(bool value);
    internal bool get_IsChangedFormat();
    internal void set_IsChangedFormat(bool value);
    internal PreferredWidthInfo get_PreferredWidth();
    public Borders get_Borders();
    internal void set_Borders(Borders value);
    public Paddings get_Paddings();
    public VerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(VerticalAlignment value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public CellMerge get_VerticalMerge();
    public void set_VerticalMerge(CellMerge value);
    public CellMerge get_HorizontalMerge();
    public void set_HorizontalMerge(CellMerge value);
    public bool get_TextWrap();
    public void set_TextWrap(bool value);
    public bool get_FitText();
    public void set_FitText(bool value);
    public TextDirection get_TextDirection();
    public void set_TextDirection(TextDirection value);
    public bool get_SamePaddingsAsTable();
    public void set_SamePaddingsAsTable(bool value);
    internal RowFormat get_OwnerRowFormat();
    internal int get_CurCellIndex();
    internal float get_CellWidth();
    internal void set_CellWidth(float value);
    internal short get_CellGridSpan();
    internal void set_CellGridSpan(short value);
    internal Color get_ForeColor();
    internal void set_ForeColor(Color value);
    internal TextureStyle get_TextureStyle();
    internal void set_TextureStyle(TextureStyle value);
    internal List`1<Stream> get_XmlProps();
    internal bool get_HideMark();
    internal void set_HideMark(bool value);
    internal string get_FormatChangeAuthorName();
    internal void set_FormatChangeAuthorName(string value);
    internal DateTime get_FormatChangeDateTime();
    internal void set_FormatChangeDateTime(DateTime value);
    internal object GetPropertyValue(int propertyKey);
    internal void SetPropertyValue(int propertyKey, object value);
    private RowFormat GetOwnerRowFormatValue();
    private int GetOwnerCellIndex();
    private bool HasSamePaddingsAsTable();
    private void UpdateHorizontalMerge(CellMerge& horizMerge);
    internal void ClearPreferredWidthPropertyValue(int key);
    internal virtual void Close();
    internal virtual bool HasValue(int propertyKey);
    internal virtual void ApplyBase(FormatBase baseFormat);
    protected internal virtual void EnsureComposites();
    protected virtual object GetDefValue(int key);
    protected virtual FormatBase GetDefComposite(int key);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void InitXDLSHolder();
    protected internal void ImportContainer(FormatBase format);
    private void ImportXmlProps(CellFormat format);
    protected virtual void ImportMembers(FormatBase format);
    protected virtual void OnChange(FormatBase format, int propKey);
    internal void UpdateCellFormat(TableStyleCellProperties cellProperties);
    private void ApplyParentRowFormat(RowFormat rowFormat);
    private void ImportBorderSettings(Borders borders);
    internal bool Compare(CellFormat cellFormat);
}
public enum Syncfusion.DocIO.DLS.CellMerge : Enum {
    public int value__;
    public static CellMerge None;
    public static CellMerge Start;
    public static CellMerge Continue;
}
internal class Syncfusion.DocIO.DLS.CellProperties : object {
    public static string DesiredWidth;
    public static string RowSpan;
    public static string ColumnSpan;
    public static string Background;
    public static string TableCellMode;
}
internal class Syncfusion.DocIO.DLS.CFELayout : object {
    private ushort m_flag;
    private int m_id;
    private CombineBracketsType m_combineBrackets;
    internal bool Combine { get; internal set; }
    internal bool Vertical { get; internal set; }
    internal bool VerticalCompress { get; internal set; }
    internal int ID { get; internal set; }
    internal CombineBracketsType CombineBracketsType { get; internal set; }
    internal bool get_Combine();
    internal void set_Combine(bool value);
    internal bool get_Vertical();
    internal void set_Vertical(bool value);
    internal bool get_VerticalCompress();
    internal void set_VerticalCompress(bool value);
    internal int get_ID();
    internal void set_ID(int value);
    internal CombineBracketsType get_CombineBracketsType();
    internal void set_CombineBracketsType(CombineBracketsType value);
    internal bool HasCombineBracketsType();
    internal void UpdateCFELayout(ushort ufel, int iFELayoutId);
    internal Byte[] GetCFELayoutBytes();
}
public enum Syncfusion.DocIO.DLS.ChapterPageSeparatorType : Enum {
    public int value__;
    public static ChapterPageSeparatorType Hyphen;
    public static ChapterPageSeparatorType Period;
    public static ChapterPageSeparatorType Colon;
    public static ChapterPageSeparatorType EmDash;
    public static ChapterPageSeparatorType EnDash;
}
internal class Syncfusion.DocIO.DLS.CharacterPropertiesConverter : object {
    private static List`1<int> m_incorrectOptions;
    private static object m_threadLocker;
    private static List`1<string> m_authorNames;
    private static List`1<int> IncorrectOptions { get; }
    internal static List`1<string> AuthorNames { get; }
    private static CharacterPropertiesConverter();
    private static List`1<int> get_IncorrectOptions();
    internal static List`1<string> get_AuthorNames();
    public static void SprmsToFormat(IWordReaderBase reader, WCharacterFormat format);
    internal static void SprmsToFormat(SinglePropertyModifierArray CHPModifierArray, WCharacterFormat characterFormat, WordStyleSheet styleSheet, Dictionary`2<int, string> authorNames, bool isNewPropertyHash);
    private static bool IsValidByteArray(Byte[] sprmByteArray, int startIndex);
    internal static void FormatToSprms(WCharacterFormat characterFormat, SinglePropertyModifierArray sprms, WordStyleSheet styleSheet);
    internal static void FormatToSprms(int propKey, object value, SinglePropertyModifierArray sprms, WCharacterFormat charFormat, WordStyleSheet styleSheet);
    private static byte GetByteValue(object value);
    internal static void UpdateFontSprms(Dictionary`2<int, object> propertyHash, SinglePropertyModifierArray sprms, WCharacterFormat charFormat, WordStyleSheet styleSheet);
    internal static void UpdateFontSprms(int propKey, object value, SinglePropertyModifierArray sprms, WCharacterFormat charFormat, WordStyleSheet styleSheet);
    internal static ShadingDescriptor GetShading(SinglePropertyModifierRecord record);
    internal static void Close();
}
public enum Syncfusion.DocIO.DLS.CheckBoxSizeType : Enum {
    public int value__;
    public static CheckBoxSizeType Auto;
    public static CheckBoxSizeType Exactly;
}
public class Syncfusion.DocIO.DLS.CheckBoxState : object {
    private string m_Font;
    private string m_Value;
    private ContentControlProperties m_contentControlProperties;
    internal ContentControlProperties ContentControlProperties { get; internal set; }
    public string Font { get; public set; }
    public string Value { get; public set; }
    internal ContentControlProperties get_ContentControlProperties();
    internal void set_ContentControlProperties(ContentControlProperties value);
    public string get_Font();
    public void set_Font(string value);
    public string get_Value();
    public void set_Value(string value);
    internal StringBuilder GetAsString();
    internal bool Compare(CheckBoxState checkBoxState);
}
public class Syncfusion.DocIO.DLS.ChildGroupShape : ChildShape {
    private ChildShapeCollection m_childShapes;
    private float m_extentXValue;
    private float m_extentYValue;
    private float m_offsetXValue;
    private float m_offsetYValue;
    private long shapeId;
    private bool m_hasPictureItem;
    internal float OffsetXValue { get; internal set; }
    internal float OffsetYValue { get; internal set; }
    internal float ExtentXValue { get; internal set; }
    internal float ExtentYValue { get; internal set; }
    internal bool HasPictureItem { get; internal set; }
    internal ChildShapeCollection ChildShapes { get; internal set; }
    public EntityType EntityType { get; }
    internal ChildGroupShape(IWordDocument doc);
    internal long GenerateShapeID();
    internal float get_OffsetXValue();
    internal void set_OffsetXValue(float value);
    internal float get_OffsetYValue();
    internal void set_OffsetYValue(float value);
    internal float get_ExtentXValue();
    internal void set_ExtentXValue(float value);
    internal float get_ExtentYValue();
    internal void set_ExtentYValue(float value);
    internal bool get_HasPictureItem();
    internal void set_HasPictureItem(bool value);
    internal ChildShapeCollection get_ChildShapes();
    internal void set_ChildShapes(ChildShapeCollection value);
    public virtual EntityType get_EntityType();
    internal void Add(ParagraphItem childShape);
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal bool Compare(ChildGroupShape childGroupShape);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.ChildShape : ShapeCommon {
    private List`1<string> m_styleProps;
    internal List`1<Stream> m_pictureProps;
    private double m_arcSize;
    private string m_Adjustments;
    internal byte m_bFlags1;
    private float m_rotation;
    internal Nullable`1<bool> flipH;
    internal Nullable`1<bool> flipV;
    private float m_rotationToRender;
    private List`1<EffectFormat> m_effectList;
    private byte m_bFlags;
    private Dictionary`2<string, DictionaryEntry> m_relations;
    private Dictionary`2<string, ImageRecord> m_imageRelations;
    private Dictionary`2<int, object> m_propertiesHash;
    internal static byte LineFromXPositionKey;
    internal static byte LineFromYPositionKey;
    internal static byte LineToXPositionKey;
    internal static byte LineToYPositionKey;
    private float x_value;
    private float y_value;
    private float m_horzPos;
    private float m_verPos;
    private string m_type;
    private WTextBody m_textBody;
    private TextFrame m_textFrame;
    private LineFormat m_lineFormat;
    private FillFormat m_fillFormat;
    private WChart m_chart;
    private XmlParagraphItem m_xmlParagraphItem;
    private float m_leftPosition;
    private float m_topPosition;
    private AutoShapeType m_autoShapeType;
    internal Dictionary`2<string, string> m_shapeGuide;
    private List`1<ShapeStyleReference> m_shapeStyleItems;
    private Color m_fontRefColor;
    internal Dictionary`2<string, Stream> m_docx2007Props;
    private float m_lineFromXPosition;
    private float m_lineFromYPosition;
    private float m_lineToXPosition;
    private float m_lineToYPosition;
    internal ImageRecord m_imageRecord;
    private EntityType m_elementType;
    private bool m_visible;
    internal bool skipPositionUpdate;
    private RectangleF m_textLayoutingBounds;
    private List`1<Path2D> m_vmlPathPoints;
    internal bool m_isVMLPathUpdated;
    private Dictionary`2<string, string> m_guideList;
    private Dictionary`2<string, string> m_avList;
    private List`1<Path2D> m_path2DList;
    private string m_oPictureHRef;
    private Byte[] m_svgImageData;
    private string m_svgExternalLinkName;
    internal List`1<Path2D> Path2DList { get; internal set; }
    internal List`1<Path2D> VMLPathPoints { get; internal set; }
    internal bool IsEffectStyleInline { get; internal set; }
    internal Dictionary`2<string, string> ShapeGuide { get; }
    internal string OPictureHRef { get; internal set; }
    internal Byte[] SvgData { get; internal set; }
    internal string SvgExternalLink { get; internal set; }
    internal bool IsFillStyleInline { get; internal set; }
    internal bool FlipHorizantal { get; internal set; }
    internal bool FlipVertical { get; internal set; }
    internal bool IsScenePropertiesInline { get; internal set; }
    internal List`1<ShapeStyleReference> ShapeStyleReferences { get; internal set; }
    internal bool IsShapePropertiesInline { get; internal set; }
    internal bool IsLineStyleInline { get; internal set; }
    internal Color FontRefColor { get; internal set; }
    internal float X { get; internal set; }
    internal float Y { get; internal set; }
    internal float HorizontalPosition { get; internal set; }
    internal float VerticalPosition { get; internal set; }
    internal string Type { get; internal set; }
    internal EntityType ElementType { get; internal set; }
    internal bool HasTextBody { get; }
    internal float LeftMargin { get; internal set; }
    internal float TopMargin { get; internal set; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    internal float LineFromXPosition { get; internal set; }
    internal float LineFromYPosition { get; internal set; }
    internal float LineToXPosition { get; internal set; }
    internal float LineToYPosition { get; internal set; }
    internal WTextBody TextBody { get; internal set; }
    internal TextFrame TextFrame { get; internal set; }
    internal LineFormat LineFormat { get; internal set; }
    internal FillFormat FillFormat { get; internal set; }
    internal WChart Chart { get; internal set; }
    internal XmlParagraphItem XmlParagraphItem { get; internal set; }
    internal AutoShapeType AutoShapeType { get; internal set; }
    internal bool IsPicture { get; }
    public bool Visible { get; public set; }
    internal Byte[] ImageBytes { get; }
    internal ImageRecord ImageRecord { get; }
    internal WordDocument Document { get; }
    internal List`1<EffectFormat> EffectList { get; internal set; }
    internal bool IsHorizontalRule { get; internal set; }
    internal bool IsTextBoxShape { get; internal set; }
    internal string Adjustments { get; internal set; }
    internal float Rotation { get; internal set; }
    internal double ArcSize { get; internal set; }
    internal Dictionary`2<string, Stream> Docx2007Props { get; internal set; }
    internal bool UseStandardColorHR { get; internal set; }
    internal bool UseNoShadeHR { get; internal set; }
    internal Dictionary`2<string, DictionaryEntry> Relations { get; }
    internal List`1<string> DocxStyleProps { get; }
    internal List`1<Stream> DocxPictureVisualProps { get; internal set; }
    internal bool LayoutInCell { get; internal set; }
    internal bool Is2007Shape { get; internal set; }
    internal Dictionary`2<string, ImageRecord> ImageRelations { get; }
    public EntityType EntityType { get; }
    internal RectangleF TextLayoutingBounds { get; internal set; }
    internal float RotationToRender { get; internal set; }
    internal bool FlipHorizantalToRender { get; internal set; }
    internal bool FlipVerticalToRender { get; internal set; }
    protected object Item { get; protected set; }
    internal ChildShape(IWordDocument doc, AutoShapeType autoShapeType);
    internal ChildShape(IWordDocument doc);
    internal List`1<Path2D> get_Path2DList();
    internal void set_Path2DList(List`1<Path2D> value);
    internal List`1<Path2D> get_VMLPathPoints();
    internal void set_VMLPathPoints(List`1<Path2D> value);
    internal bool get_IsEffectStyleInline();
    internal void set_IsEffectStyleInline(bool value);
    internal Dictionary`2<string, string> get_ShapeGuide();
    internal string get_OPictureHRef();
    internal void set_OPictureHRef(string value);
    internal Byte[] get_SvgData();
    internal void set_SvgData(Byte[] value);
    internal string get_SvgExternalLink();
    internal void set_SvgExternalLink(string value);
    internal bool get_IsFillStyleInline();
    internal void set_IsFillStyleInline(bool value);
    internal bool get_FlipHorizantal();
    internal void set_FlipHorizantal(bool value);
    internal bool get_FlipVertical();
    internal void set_FlipVertical(bool value);
    internal bool get_IsScenePropertiesInline();
    internal void set_IsScenePropertiesInline(bool value);
    internal List`1<ShapeStyleReference> get_ShapeStyleReferences();
    internal void set_ShapeStyleReferences(List`1<ShapeStyleReference> value);
    internal bool get_IsShapePropertiesInline();
    internal void set_IsShapePropertiesInline(bool value);
    internal bool get_IsLineStyleInline();
    internal void set_IsLineStyleInline(bool value);
    internal Color get_FontRefColor();
    internal void set_FontRefColor(Color value);
    internal float get_X();
    internal void set_X(float value);
    internal float get_Y();
    internal void set_Y(float value);
    internal float get_HorizontalPosition();
    internal void set_HorizontalPosition(float value);
    internal float get_VerticalPosition();
    internal void set_VerticalPosition(float value);
    internal string get_Type();
    internal void set_Type(string value);
    internal EntityType get_ElementType();
    internal void set_ElementType(EntityType value);
    internal bool get_HasTextBody();
    internal float get_LeftMargin();
    internal void set_LeftMargin(float value);
    internal float get_TopMargin();
    internal void set_TopMargin(float value);
    internal Dictionary`2<int, object> get_PropertiesHash();
    internal float get_LineFromXPosition();
    internal void set_LineFromXPosition(float value);
    internal float get_LineFromYPosition();
    internal void set_LineFromYPosition(float value);
    internal float get_LineToXPosition();
    internal void set_LineToXPosition(float value);
    internal float get_LineToYPosition();
    internal void set_LineToYPosition(float value);
    internal WTextBody get_TextBody();
    internal void set_TextBody(WTextBody value);
    internal TextFrame get_TextFrame();
    internal void set_TextFrame(TextFrame value);
    internal LineFormat get_LineFormat();
    internal void set_LineFormat(LineFormat value);
    internal FillFormat get_FillFormat();
    internal void set_FillFormat(FillFormat value);
    internal WChart get_Chart();
    internal void set_Chart(WChart value);
    internal XmlParagraphItem get_XmlParagraphItem();
    internal void set_XmlParagraphItem(XmlParagraphItem value);
    internal AutoShapeType get_AutoShapeType();
    internal void set_AutoShapeType(AutoShapeType value);
    internal bool get_IsPicture();
    public bool get_Visible();
    public void set_Visible(bool value);
    internal Byte[] get_ImageBytes();
    internal ImageRecord get_ImageRecord();
    internal WordDocument get_Document();
    internal List`1<EffectFormat> get_EffectList();
    internal void set_EffectList(List`1<EffectFormat> value);
    internal bool get_IsHorizontalRule();
    internal void set_IsHorizontalRule(bool value);
    internal bool get_IsTextBoxShape();
    internal void set_IsTextBoxShape(bool value);
    internal string get_Adjustments();
    internal void set_Adjustments(string value);
    internal float get_Rotation();
    internal void set_Rotation(float value);
    internal double get_ArcSize();
    internal void set_ArcSize(double value);
    internal Dictionary`2<string, Stream> get_Docx2007Props();
    internal void set_Docx2007Props(Dictionary`2<string, Stream> value);
    internal bool get_UseStandardColorHR();
    internal void set_UseStandardColorHR(bool value);
    internal bool get_UseNoShadeHR();
    internal void set_UseNoShadeHR(bool value);
    internal Dictionary`2<string, DictionaryEntry> get_Relations();
    internal List`1<string> get_DocxStyleProps();
    internal List`1<Stream> get_DocxPictureVisualProps();
    internal void set_DocxPictureVisualProps(List`1<Stream> value);
    internal bool get_LayoutInCell();
    internal void set_LayoutInCell(bool value);
    internal bool get_Is2007Shape();
    internal void set_Is2007Shape(bool value);
    internal Dictionary`2<string, ImageRecord> get_ImageRelations();
    public virtual EntityType get_EntityType();
    internal RectangleF get_TextLayoutingBounds();
    internal void set_TextLayoutingBounds(RectangleF value);
    internal float get_RotationToRender();
    internal void set_RotationToRender(float value);
    internal bool get_FlipHorizantalToRender();
    internal void set_FlipHorizantalToRender(bool value);
    internal bool get_FlipVerticalToRender();
    internal void set_FlipVerticalToRender(bool value);
    internal void SetKeyValue(int propKey, object value);
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    internal bool HasKey(int Key);
    internal virtual void Detach();
    internal virtual void AttachToDocument();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal Dictionary`2<string, string> GetGuideList();
    internal Dictionary`2<string, string> GetAvList();
    internal void CloneShapeFormat(ChildShape childShape);
    internal void CloneShapeFormat(Shape shape);
    internal GroupShape GetOwnerGroupShape();
    internal void CloneChildShapeFormatToShape(Shape shape);
    internal bool IsNeedToGetFillStyleFromChildGroupShape(Entity entity);
    internal void ApplyOwnerGroupShapeFill(Entity entity);
    internal bool StartsWithExt(string text, string value);
    internal Color StyleColorTransform(List`1<DictionaryEntry> fillTransformation, Color themeColor, UInt32& opacity);
    private double GetPercentage(string value);
    private bool ColorTransform(string localName, string value, Color& themeColor);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal virtual void Close();
    internal bool Compare(ChildShape childShape);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.ChildShapeCollection : CollectionImpl {
    public ChildShape Item { get; }
    internal ChildShapeCollection(WordDocument doc);
    public ChildShape get_Item(int index);
    public void Add(ChildShape childShape);
    internal void UpdatePositionForGroupShapeAndChildShape(ChildShape childShape);
    public void RemoveAt(int index);
    public void Clear();
    public void Remove(ChildShape childShape);
}
public abstract class Syncfusion.DocIO.DLS.CollectionImpl : OwnerHolder {
    private List`1<object> m_innerList;
    public int Count { get; }
    internal IList InnerList { get; }
    protected CollectionImpl(WordDocument doc, OwnerHolder owner);
    internal CollectionImpl(WordDocument doc, OwnerHolder owner, int capacity);
    public sealed virtual int get_Count();
    internal IList get_InnerList();
    public sealed virtual IEnumerator GetEnumerator();
    internal virtual void Close();
}
public class Syncfusion.DocIO.DLS.Column : FormatBase {
    internal static int WidthKey;
    internal static int SpaceKey;
    public float Width { get; public set; }
    public float Space { get; public set; }
    public Column(IWordDocument doc);
    public float get_Width();
    public void set_Width(float value);
    public float get_Space();
    public void set_Space(float value);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    internal Column Clone();
    protected virtual object GetDefValue(int key);
    internal bool Compare(Column column);
    internal object GetPropertyValue(int propKey);
    internal void SetPropertyValue(int propKey, object value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.ColumnCollection : CollectionImpl {
    public Column Item { get; }
    internal WSection OwnerSection { get; }
    internal ColumnCollection(WSection section);
    public Column get_Item(int index);
    internal WSection get_OwnerSection();
    public int Add(Column column);
    public void Populate(int count, float spacing);
    internal int Add(Column column, bool isOpening);
    internal void CloneTo(ColumnCollection coll);
}
internal class Syncfusion.DocIO.DLS.ColumnSizeInfo : object {
    private float minimumWordWidth;
    private float maximumWordWidth;
    private float minimumWidth;
    private float maxParaWidth;
    private bool hasMinimumWidth;
    private bool hasMinimumWordWidth;
    private bool hasMaximumWordWidth;
    internal bool HasMinimumWidth { get; internal set; }
    internal bool HasMinimumMaximumWordWidth { get; internal set; }
    internal bool HasMaximumWordWidth { get; internal set; }
    internal float MinimumWordWidth { get; internal set; }
    internal float MaximumWordWidth { get; internal set; }
    internal float MinimumWidth { get; internal set; }
    internal float MaxParaWidth { get; internal set; }
    internal bool get_HasMinimumWidth();
    internal void set_HasMinimumWidth(bool value);
    internal bool get_HasMinimumMaximumWordWidth();
    internal void set_HasMinimumMaximumWordWidth(bool value);
    internal bool get_HasMaximumWordWidth();
    internal void set_HasMaximumWordWidth(bool value);
    internal float get_MinimumWordWidth();
    internal void set_MinimumWordWidth(float value);
    internal float get_MaximumWordWidth();
    internal void set_MaximumWordWidth(float value);
    internal float get_MinimumWidth();
    internal void set_MinimumWidth(float value);
    internal float get_MaxParaWidth();
    internal void set_MaxParaWidth(float value);
}
internal enum Syncfusion.DocIO.DLS.CombineBracketsType : Enum {
    public int value__;
    public static CombineBracketsType None;
    public static CombineBracketsType Round;
    public static CombineBracketsType Square;
    public static CombineBracketsType Angle;
    public static CombineBracketsType Curly;
}
public enum Syncfusion.DocIO.DLS.CommentDisplayMode : Enum {
    public int value__;
    public static CommentDisplayMode Hide;
    public static CommentDisplayMode ShowInBalloons;
}
public enum Syncfusion.DocIO.DLS.CommentMarkType : Enum {
    public int value__;
    public static CommentMarkType CommentStart;
    public static CommentMarkType CommentEnd;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.CommentsCollection : CollectionImpl {
    public WComment Item { get; }
    public CommentsCollection(WordDocument doc);
    public WComment get_Item(int index);
    public int Counts();
    public void RemoveAt(int index);
    public void Clear();
    internal void Add(WComment comment);
    public void Remove(WComment comment);
    internal void SetParentParaIDAndIsResolved();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.CommentsExCollection : CollectionImpl {
    internal WCommentExtended Item { get; }
    internal CommentsExCollection(WordDocument doc);
    internal WCommentExtended get_Item(int index);
    internal void Add(WCommentExtended commentEx);
}
internal class Syncfusion.DocIO.DLS.Comparison : object {
    private WordDocument Document;
    private Dictionary`2<int, string> m_imagesHash;
    private HashAlgorithm m_hashAlgorithm;
    private List`1<BlockContentControl> m_blockContentControls;
    private List`1<InlineContentControl> m_inlineContentControls;
    private List`1<Shape> m_shapes;
    private List`1<GroupShape> m_groupShapes;
    private List`1<WPicture> m_pictures;
    private List`1<WTextBox> m_textBoxes;
    private List`1<WChart> m_charts;
    private List`1<WField> m_fields;
    private int bodyItemIndex;
    private int paraItemIndex;
    private bool m_isComparedImages;
    private List`1<WTable> m_tables;
    private List`1<WMath> m_maths;
    private List`1<WOleObject> m_oles;
    private List`1<TableOfContent> m_tocs;
    internal bool IsComparingMatchedCells;
    private List`1<string> m_revisedDocListStyles;
    internal Dictionary`2<int, string> ImagesHash { get; }
    internal HashAlgorithm HashAlgorithm { get; }
    internal List`1<BlockContentControl> BlockContentControls { get; }
    internal List`1<InlineContentControl> InlineContentControls { get; }
    internal List`1<Shape> Shapes { get; }
    internal List`1<GroupShape> GroupShapes { get; }
    internal List`1<WPicture> Pictures { get; }
    internal List`1<WTextBox> TextBoxes { get; }
    internal List`1<WChart> Charts { get; }
    internal List`1<WField> Fields { get; }
    internal List`1<WMath> Maths { get; }
    internal List`1<WOleObject> OLEs { get; }
    internal List`1<TableOfContent> TOCs { get; }
    internal bool IsComparedImages { get; internal set; }
    internal List`1<WTable> Tables { get; }
    internal List`1<string> RevisedDocListStyles { get; }
    internal Comparison(WordDocument wordDocument);
    internal Dictionary`2<int, string> get_ImagesHash();
    internal HashAlgorithm get_HashAlgorithm();
    internal List`1<BlockContentControl> get_BlockContentControls();
    internal List`1<InlineContentControl> get_InlineContentControls();
    internal List`1<Shape> get_Shapes();
    internal List`1<GroupShape> get_GroupShapes();
    internal List`1<WPicture> get_Pictures();
    internal List`1<WTextBox> get_TextBoxes();
    internal List`1<WChart> get_Charts();
    internal List`1<WField> get_Fields();
    internal List`1<WMath> get_Maths();
    internal List`1<WOleObject> get_OLEs();
    internal List`1<TableOfContent> get_TOCs();
    internal bool get_IsComparedImages();
    internal void set_IsComparedImages(bool value);
    internal List`1<WTable> get_Tables();
    internal List`1<string> get_RevisedDocListStyles();
    internal string GetImageHash(WPicture image);
    internal string ConvertBytesAsHash(Byte[] bytes);
    internal void CompareImagesInDoc(WordDocument orginalDocument);
    internal static Byte[] ConvertStreamToBytes(Stream input1);
    internal static bool CompareStream(Stream input1, Stream input2);
    internal static bool CompareBytes(Byte[] input1, Byte[] input2);
    internal StringBuilder GetAsString(WordDocument document);
    internal void AddComparisonCollection(WordDocument document);
    internal void AddComparisonCollection(WTextBody textBody, int startBodyItemIndex, int startParaItemIndex);
    private void AddComparisonCollection(ParagraphItemCollection paraItems, int startIndex);
    private int TraverseTillFieldEnd(ParagraphItem paraItem);
    internal void RemoveFromDocCollection(Entity entity);
    internal void Insertion(WordDocument originalDocument, int currRevParaItemIndex, int revBodyItemIndex, int currRevSecIndex, int orgCurrMatchParaItemIndex, int orgCurrMatchBodyItemIndex, int orgCurrMatchSecIndex, WTextBody orgTextBody, WTextBody revTextBody);
    private bool IsBkmkEndInFirstItem(WParagraph paragraph, ParagraphItem bkmkEnd, int bkmkEndPreviosItemIndex, bool isItemsBefore);
    private bool HasRenderableItemsBefore(WParagraph para, int endIndex);
    private void AddBlockContentControInDocumentPart(WordDocumentPart documentPart, List`1<TextBodyItem> startInsertBodyItems, List`1<TextBodyItem> endInsertBodyItems);
    private void InsertSectAtOrgDocument(WordDocument originalDocument, WordDocument revisedDocument, int orgMatchedSecIndex, int orgMatchedBodyItemIndex, int orgStartRangeIndex);
    internal void ApplyInsRev(WTextBody textBody, int startIndex, int endIndex);
    internal void ApplyDelRevision(WordDocument orgDoc, WordDocument revDoc, int endSecIndex, int endBodyItemIndex, int endParaItemIndex, Boolean& isNeedToInsert, bool isDocumentEnd, WTextBody orgTextBody);
    private bool IsNotAllPreviousParaItemsDeleted(WParagraph paragraph, int paraItemIndex);
    private void ApplyDelForFirstSection(WordDocument orgDoc, WordDocument revDoc, WTextBody textBody, int orgBodyItemIndex, int endBodyItemIndex, Boolean& isNeedToInsert, int endParaItemIndex, int endSecIndex, WParagraph& orgLastPara);
    internal void ApplyDelRev(WTextBody textBody, int startIndex, int endIndex);
    internal void MoveCurrPosition(WordDocument orgDoc, TextBodyItem orgItem, TextBodyItem revItem, WTextBody orgTextBody);
    internal void InsertAndDeleteUnmatchedItems(WordDocument orgDoc, TextBodyItem orgTextBodyItem, TextBodyItem revTextBodyItem, WTextBody orgTextbody);
    internal bool CompareDocxProps(Dictionary`2<string, Stream> DocxProps1, Dictionary`2<string, Stream> DocxProps2);
    internal void Dispose();
}
internal class Syncfusion.DocIO.DLS.ComparisonConstants : object {
    internal static char TableAscii;
    internal static char RowAscii;
    internal static char CellAscii;
    internal static char BlockContentControlAscii;
    internal static char InlineContentControlAscii;
    internal static char PictureAscii;
    internal static char ShapeAscii;
    internal static char FormFieldAscii;
    internal static char ChartAscii;
    internal static char SymbolAscii;
    internal static char BreakAscii;
    internal static char MathAscii;
}
public class Syncfusion.DocIO.DLS.ComparisonOptions : object {
    private byte m_bFlags;
    public bool DetectFormatChanges { get; public set; }
    public bool get_DetectFormatChanges();
    public void set_DetectFormatChanges(bool value);
}
public enum Syncfusion.DocIO.DLS.CompatibilityMode : Enum {
    public int value__;
    public static CompatibilityMode Word2003;
    public static CompatibilityMode Word2007;
    public static CompatibilityMode Word2010;
    public static CompatibilityMode Word2013;
}
internal enum Syncfusion.DocIO.DLS.CompatibilityOption : Enum {
    public int value__;
    public static CompatibilityOption NoTabForInd;
    public static CompatibilityOption NoSpaceRaiseLower;
    public static CompatibilityOption MapPrintTextColor;
    public static CompatibilityOption WrapTrailSpaces;
    public static CompatibilityOption NoColumnBalance;
    public static CompatibilityOption ConvMailMergeEsc;
    public static CompatibilityOption SuppressSpBfAfterPgBrk;
    public static CompatibilityOption SuppressTopSpacing;
    public static CompatibilityOption OrigWordTableRules;
    public static CompatibilityOption TruncDxaExpand;
    public static CompatibilityOption ShowBreaksInFrames;
    public static CompatibilityOption SwapBordersFacingPgs;
    public static CompatibilityOption LeaveBackslashAlone;
    public static CompatibilityOption ExpShRtn;
    public static CompatibilityOption DntULTrlSpc;
    public static CompatibilityOption DntBlnSbDbWid;
    public static CompatibilityOption SuppressTopSpacingMac5;
    public static CompatibilityOption F2ptExtLeadingOnly;
    public static CompatibilityOption PrintBodyBeforeHdr;
    public static CompatibilityOption NoExtLeading;
    public static CompatibilityOption DontMakeSpaceForUL;
    public static CompatibilityOption MWSmallCaps;
    public static CompatibilityOption ExtraAfter;
    public static CompatibilityOption TruncFontHeight;
    public static CompatibilityOption SubOnSize;
    public static CompatibilityOption PrintMet;
    public static CompatibilityOption WW6BorderRules;
    public static CompatibilityOption ExactOnTop;
    public static CompatibilityOption WPSpace;
    public static CompatibilityOption WPJust;
    public static CompatibilityOption LineWrapLikeWord6;
    public static CompatibilityOption SpLayoutLikeWW8;
    public static CompatibilityOption FtnLayoutLikeWW8;
    public static CompatibilityOption DontUseHTMLParagraphAutoSpacing;
    public static CompatibilityOption DontAdjustLineHeightInTable;
    public static CompatibilityOption ForgetLastTabAlign;
    public static CompatibilityOption UseAutospaceForFullWidthAlpha;
    public static CompatibilityOption AlignTablesRowByRow;
    public static CompatibilityOption LayoutRawTableWidth;
    public static CompatibilityOption LayoutTableRowsApart;
    public static CompatibilityOption UseWord97LineBreakingRules;
    public static CompatibilityOption DontBreakWrappedTables;
    public static CompatibilityOption DontSnapToGridInCell;
    public static CompatibilityOption DontAllowFieldEndSelect;
    public static CompatibilityOption ApplyBreakingRules;
    public static CompatibilityOption DontWrapTextWithPunct;
    public static CompatibilityOption DontUseAsianBreakRules;
    public static CompatibilityOption UseWord2002TableStyleRules;
    public static CompatibilityOption GrowAutoFit;
    public static CompatibilityOption UseNormalStyleForList;
    public static CompatibilityOption DontUseIndentAsNumberingTabStop;
    public static CompatibilityOption FELineBreak11;
    public static CompatibilityOption AllowSpaceOfSameStyleInTable;
    public static CompatibilityOption WW11IndentRules;
    public static CompatibilityOption DontAutofitConstrainedTables;
    public static CompatibilityOption AutofitLikeWW11;
    public static CompatibilityOption UnderlineTabInNumList;
    public static CompatibilityOption HangulWidthLikeWW11;
    public static CompatibilityOption SplitPgBreakAndParaMark;
    public static CompatibilityOption DontVertAlignCellWithSp;
    public static CompatibilityOption DontBreakConstrainedForcedTables;
    public static CompatibilityOption DontVertAlignInTxbx;
    public static CompatibilityOption Word11KerningPairs;
    public static CompatibilityOption CachedColBalance;
    public static CompatibilityOption overrideTableStyleFontSizeAndJustification;
    public static CompatibilityOption enableOpenTypeFeatures;
    public static CompatibilityOption doNotFlipMirrorIndents;
    public static CompatibilityOption differentiateMultirowTableHeader;
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.CompatibilityOptions : object {
    private Dictionary`2<CompatibilityOption, bool> m_propertiesHash;
    private IWordDocument m_document;
    internal bool Item { get; internal set; }
    internal Dictionary`2<CompatibilityOption, bool> PropertiesHash { get; }
    internal CompatibilityOptions(IWordDocument document);
    internal bool get_Item(CompatibilityOption key);
    internal void set_Item(CompatibilityOption key, bool value);
    internal Dictionary`2<CompatibilityOption, bool> get_PropertiesHash();
    private void SetValue(CompatibilityOption key, bool value);
    private bool GetValue(CompatibilityOption key);
    internal void Close();
}
public class Syncfusion.DocIO.DLS.ConditionalFormattingStyle : Style {
    private WParagraphFormat m_paragraphFormat;
    private TableStyleCellProperties m_cellProperties;
    private TableStyleRowProperties m_rowProperties;
    private TableStyleTableProperties m_tableProperties;
    private ConditionalFormattingType m_conditionalFormattingType;
    public WParagraphFormat ParagraphFormat { get; }
    public TableStyleCellProperties CellProperties { get; }
    public TableStyleRowProperties RowProperties { get; }
    public TableStyleTableProperties TableProperties { get; }
    public ConditionalFormattingType ConditionalFormattingType { get; }
    public StyleType StyleType { get; }
    internal ConditionalFormattingStyle(ConditionalFormattingType conditionCode, IWordDocument doc);
    public WParagraphFormat get_ParagraphFormat();
    public TableStyleCellProperties get_CellProperties();
    public TableStyleRowProperties get_RowProperties();
    public TableStyleTableProperties get_TableProperties();
    public ConditionalFormattingType get_ConditionalFormattingType();
    public virtual StyleType get_StyleType();
    public virtual IStyle Clone();
    protected virtual object CloneImpl();
    internal virtual void Close();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.ConditionalFormattingStyleCollection : CollectionImpl {
    private IWordDocument m_doc;
    internal IWordDocument Document { get; }
    public ConditionalFormattingStyle Item { get; }
    internal ConditionalFormattingStyleCollection(WordDocument doc);
    internal IWordDocument get_Document();
    public ConditionalFormattingStyle get_Item(ConditionalFormattingType formattingType);
    public ConditionalFormattingStyle Add(ConditionalFormattingType conditionalFormattingType);
    public void Remove(ConditionalFormattingStyle conditionalFormattingStyle);
}
public enum Syncfusion.DocIO.DLS.ConditionalFormattingType : Enum {
    public int value__;
    public static ConditionalFormattingType FirstRow;
    public static ConditionalFormattingType LastRow;
    public static ConditionalFormattingType OddRowBanding;
    public static ConditionalFormattingType EvenRowBanding;
    public static ConditionalFormattingType FirstColumn;
    public static ConditionalFormattingType LastColumn;
    public static ConditionalFormattingType OddColumnBanding;
    public static ConditionalFormattingType EvenColumnBanding;
    public static ConditionalFormattingType FirstRowLastCell;
    public static ConditionalFormattingType FirstRowFirstCell;
    public static ConditionalFormattingType LastRowLastCell;
    public static ConditionalFormattingType LastRowFirstCell;
}
public enum Syncfusion.DocIO.DLS.ContentControlAppearance : Enum {
    public int value__;
    public static ContentControlAppearance BoundingBox;
    public static ContentControlAppearance Tags;
    public static ContentControlAppearance Hidden;
}
public enum Syncfusion.DocIO.DLS.ContentControlDateStorageFormat : Enum {
    public int value__;
    public static ContentControlDateStorageFormat DateStorageDate;
    public static ContentControlDateStorageFormat DateStorageDateTime;
    public static ContentControlDateStorageFormat DateStorageText;
}
public class Syncfusion.DocIO.DLS.ContentControlListItem : object {
    private string m_displayText;
    private string m_value;
    public string DisplayText { get; public set; }
    public string Value { get; public set; }
    public string get_DisplayText();
    public void set_DisplayText(string value);
    public string get_Value();
    public void set_Value(string value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.ContentControlListItems : object {
    private string m_lastValue;
    private List`1<ContentControlListItem> m_listItems;
    internal string LastValue { get; internal set; }
    public ContentControlListItem Item { get; }
    public int Count { get; }
    internal string get_LastValue();
    internal void set_LastValue(string value);
    public ContentControlListItem get_Item(int index);
    public void Add(ContentControlListItem item);
    public void Insert(int index, ContentControlListItem item);
    public void Remove(ContentControlListItem item);
    public void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    internal void Close();
    internal ContentControlListItems Clone();
}
public class Syncfusion.DocIO.DLS.ContentControlProperties : XDLSSerializableBase {
    internal static byte AppearanceKey;
    internal static byte ColorKey;
    internal static byte CheckedKey;
    internal static byte CalendarTypeKey;
    internal static byte DisplayFormatKey;
    internal static byte DisplayLocaleKey;
    internal static byte StorageFormatKey;
    internal static byte LockContentControlKey;
    internal static byte LockContentskey;
    internal static byte IsTemporarykey;
    internal static byte MultilineKey;
    internal static byte IsShowingPlaceHolderTextKey;
    internal static byte CheckedStateKey;
    internal static byte UnCheckedStateKey;
    private string m_title;
    private XmlMapping m_xmlMapping;
    private DocPartList m_DocPartList;
    private DocPartObj m_DocPartObj;
    private ContentControlListItems m_sdtListItem;
    private ContentControlType m_contentControlType;
    private string m_Label;
    private WCharacterFormat m_CharacterFormat;
    private UInt32 m_TabIndex;
    private string m_Tag;
    private byte m_bFlags;
    private ContentRepeatingType m_ContentRepeatingType;
    private string m_id;
    private CalendarType m_calendarType;
    private string m_dateFormat;
    private LocaleIDs m_LID;
    private string m_fullDate;
    private string m_placeHolderDocPartId;
    private ContentControlDateStorageFormat m_dateStorage;
    private ContentControlAppearance m_appearance;
    private ushort m_flag;
    private Color m_color;
    private CheckBoxState m_checkedState;
    private CheckBoxState m_unCheckedState;
    private byte m_bFlagA;
    private Entity m_owner;
    private Dictionary`2<string, Stream> m_xmlProps;
    public CheckBoxState CheckedState { get; public set; }
    public CheckBoxState UncheckedState { get; public set; }
    internal string ID { get; internal set; }
    public string DateDisplayFormat { get; public set; }
    public LocaleIDs DateDisplayLocale { get; public set; }
    internal string FullDate { get; internal set; }
    internal string PlaceHolderDocPartId { get; internal set; }
    public ContentControlDateStorageFormat DateStorageFormat { get; public set; }
    public CalendarType DateCalendarType { get; public set; }
    public bool IsChecked { get; public set; }
    public bool LockContentControl { get; public set; }
    public bool LockContents { get; public set; }
    public bool Multiline { get; public set; }
    public ContentControlAppearance Appearance { get; public set; }
    public Color Color { get; public set; }
    public string Title { get; public set; }
    internal bool Bibliograph { get; internal set; }
    internal bool Citation { get; internal set; }
    internal bool Unlocked { get; internal set; }
    public ContentControlListItems ContentControlListItems { get; }
    public XmlMapping XmlMapping { get; internal set; }
    internal Entity Owner { get; }
    internal DocPartList DocPartList { get; internal set; }
    internal DocPartObj DocPartObj { get; internal set; }
    public ContentControlType Type { get; internal set; }
    internal string Label { get; internal set; }
    internal WCharacterFormat CharacterFormat { get; }
    public bool HasPlaceHolderText { get; internal set; }
    internal UInt32 TabIndex { get; internal set; }
    public string Tag { get; public set; }
    public bool IsTemporary { get; public set; }
    internal ContentRepeatingType ContentRepeatingType { get; internal set; }
    internal Dictionary`2<string, Stream> XmlProps { get; }
    internal ContentControlProperties(WordDocument doc, Entity ownerEntity);
    internal ContentControlProperties(WordDocument doc);
    public CheckBoxState get_CheckedState();
    public void set_CheckedState(CheckBoxState value);
    public CheckBoxState get_UncheckedState();
    public void set_UncheckedState(CheckBoxState value);
    internal string get_ID();
    internal void set_ID(string value);
    public string get_DateDisplayFormat();
    public void set_DateDisplayFormat(string value);
    public LocaleIDs get_DateDisplayLocale();
    public void set_DateDisplayLocale(LocaleIDs value);
    internal string get_FullDate();
    internal void set_FullDate(string value);
    internal string get_PlaceHolderDocPartId();
    internal void set_PlaceHolderDocPartId(string value);
    public ContentControlDateStorageFormat get_DateStorageFormat();
    public void set_DateStorageFormat(ContentControlDateStorageFormat value);
    public CalendarType get_DateCalendarType();
    public void set_DateCalendarType(CalendarType value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public bool get_LockContentControl();
    public void set_LockContentControl(bool value);
    public bool get_LockContents();
    public void set_LockContents(bool value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public ContentControlAppearance get_Appearance();
    public void set_Appearance(ContentControlAppearance value);
    public Color get_Color();
    public void set_Color(Color value);
    public string get_Title();
    public void set_Title(string value);
    internal bool get_Bibliograph();
    internal void set_Bibliograph(bool value);
    internal bool get_Citation();
    internal void set_Citation(bool value);
    internal bool get_Unlocked();
    internal void set_Unlocked(bool value);
    public ContentControlListItems get_ContentControlListItems();
    public XmlMapping get_XmlMapping();
    internal void set_XmlMapping(XmlMapping value);
    internal Entity get_Owner();
    internal DocPartList get_DocPartList();
    internal void set_DocPartList(DocPartList value);
    internal DocPartObj get_DocPartObj();
    internal void set_DocPartObj(DocPartObj value);
    public ContentControlType get_Type();
    internal void set_Type(ContentControlType value);
    internal string get_Label();
    internal void set_Label(string value);
    internal WCharacterFormat get_CharacterFormat();
    public bool get_HasPlaceHolderText();
    internal void set_HasPlaceHolderText(bool value);
    internal UInt32 get_TabIndex();
    internal void set_TabIndex(UInt32 value);
    public string get_Tag();
    public void set_Tag(string value);
    public bool get_IsTemporary();
    public void set_IsTemporary(bool value);
    internal ContentRepeatingType get_ContentRepeatingType();
    internal void set_ContentRepeatingType(ContentRepeatingType value);
    internal Dictionary`2<string, Stream> get_XmlProps();
    internal void ChangeCheckboxState(bool isChecked);
    private void InsertParagraph(WTextBody textBody, string text, string fontName);
    internal bool HasKey(int propertyKey);
    internal ContentControlProperties Clone();
    protected object CloneImpl();
    internal void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal void SetOwnerContentControl(Entity owner);
    internal void Close();
    internal StringBuilder GetAsString();
    internal bool Compare(ContentControlProperties contentControlProperties);
}
public enum Syncfusion.DocIO.DLS.ContentControlType : Enum {
    public int value__;
    public static ContentControlType RichText;
    public static ContentControlType Text;
    public static ContentControlType Picture;
    public static ContentControlType ComboBox;
    public static ContentControlType DropDownList;
    public static ContentControlType BuildingBlockGallery;
    public static ContentControlType Date;
    public static ContentControlType Group;
    public static ContentControlType CheckBox;
    public static ContentControlType RepeatingSection;
}
internal enum Syncfusion.DocIO.DLS.ContentRepeatingType : Enum {
    public int value__;
    public static ContentRepeatingType None;
    public static ContentRepeatingType RepeatingSection;
    public static ContentRepeatingType RepeatingSectionItem;
}
internal class Syncfusion.DocIO.DLS.Convertors.ASCIIEncoding : Encoding {
    private Nullable`1<char> fallbackCharacter;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <FallbackByte>k__BackingField;
    private static Char[] byteToChar;
    private static Dictionary`2<char, byte> charToByte;
    public string WebName { get; }
    public Nullable`1<char> FallbackCharacter { get; public set; }
    public Nullable`1<byte> FallbackByte { get; private set; }
    public static int CharacterCount { get; }
    private static ASCIIEncoding();
    public virtual string get_WebName();
    public virtual int GetHashCode();
    public Nullable`1<char> get_FallbackCharacter();
    public void set_FallbackCharacter(Nullable`1<char> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_FallbackByte();
    [CompilerGeneratedAttribute]
private void set_FallbackByte(Nullable`1<byte> value);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    private int GetBytesWithFallBack(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    private int GetBytesWithoutFallback(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    private int GetCharsWithFallback(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    private int GetCharsWithoutFallback(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public static int get_CharacterCount();
}
internal class Syncfusion.DocIO.DLS.Convertors.DocxConstants : object {
    internal static string GlossaryDocumentPath;
    internal static string GlossarySettingsPath;
    internal static string GlossaryStylePath;
    internal static string GlossaryNumberingPath;
    internal static string GlossaryWebSettings;
    internal static string GlossaryFontTable;
    internal static string GlossaryCommentsPath;
    internal static string GlossaryEndnotesPath;
    internal static string GlossaryFootnotesPath;
    internal static string GlossaryHeaderPath;
    internal static string GlossaryFooterPath;
    internal static string DocumentPath;
    internal static string StylePath;
    internal static string NumberingPath;
    internal static string SettingsPath;
    internal static string HeaderPath;
    internal static string FooterPath;
    internal static string CommentsPath;
    internal static string ImagePath;
    internal static string FootnotesPath;
    internal static string EndnotesPath;
    internal static string AppPath;
    internal static string CorePath;
    internal static string CustomPath;
    internal static string FontTablePath;
    internal static string ContentTypesPath;
    internal static string ChartsPath;
    internal static string DefaultEmbeddingPath;
    internal static string EmbeddingPath;
    internal static string DrawingPath;
    internal static string ThemePath;
    internal static string FontsPath;
    internal static string DiagramPath;
    internal static string ControlPath;
    internal static string VbaProject;
    internal static string VbaProjectSignature;
    internal static string VbaProjectSignatureAgile;
    internal static string VbaData;
    internal static string VbaProjectPath;
    internal static string VbaProjectSignaturePath;
    internal static string VbaProjectSignatureAgilePath;
    internal static string VbaDataPath;
    internal static string CustomXMLPath;
    internal static string CommentsExtendedPath;
    internal static string GeneralRelationPath;
    internal static string WordRelationPath;
    internal static string FontRelationPath;
    internal static string CommentsRelationPath;
    internal static string FootnotesRelationPath;
    internal static string EndnotesRelationPath;
    internal static string NumberingRelationPath;
    internal static string HeaderRelationPath;
    internal static string FooterRelationPath;
    internal static string SettingsRelationpath;
    internal static string VbaProjectRelsPath;
    internal static string XmlContentType;
    internal static string FontContentType;
    internal static string DocumentContentType;
    internal static string TemplateContentType;
    internal static string CommentsContentType;
    internal static string CommentsExtendedContentType;
    internal static string SettingsContentType;
    internal static string EndnoteContentType;
    internal static string FontTableContentType;
    internal static string FooterContentType;
    internal static string FootnoteContentType;
    internal static string GlossaryDocumentContentType;
    internal static string HeaderContentType;
    internal static string NumberingContentType;
    internal static string StylesContentType;
    internal static string WebSettingsContentType;
    internal static string AppContentType;
    internal static string CoreContentType;
    internal static string CustomContentType;
    internal static string CustomXmlContentType;
    internal static string RelationContentType;
    internal static string DiagramColor;
    internal static string DiagramData;
    internal static string DiagramLayout;
    internal static string DiagramStyle;
    internal static string ChartsContentType;
    internal static string ChartsExContentType;
    internal static string ThemeContentType;
    internal static string ChartDrawingContentType;
    internal static string ActiveXContentType;
    internal static string ActiveXBinContentType;
    internal static string TableStyleContentType;
    internal static string XlsxContentType;
    internal static string ChartStyleContentType;
    internal static string ChartColorStyleContentType;
    internal static string VbaProjectContentType;
    internal static string VbaProjectSignatureContentType;
    internal static string VbaProjectSignatureAgileContentType;
    internal static string VbaDataContentType;
    internal static string MacroDocumentContentType;
    internal static string MacroTemplateContentType;
    internal static string OleObjectContentType;
    internal static string AltChunkRelType;
    internal static string CommentsRelType;
    internal static string CommentsExtendedRelType;
    internal static string SettingsRelType;
    internal static string SettingsRelType_Strict;
    internal static string EndnoteRelType;
    internal static string FontTableRelType;
    internal static string FooterRelType;
    internal static string FooterRelType_Strict;
    internal static string FootnoteRelType;
    internal static string FootnoteRelType_Strict;
    internal static string HeaderRelType;
    internal static string HeaderRelType_Strict;
    internal static string DocumentRelType;
    internal static string NumberingRelType;
    internal static string StylesRelType;
    internal static string StylesRelType_Strict;
    internal static string OleObjectRelType;
    internal static string OleObjectRelType_Strict;
    internal static string ChartRelType;
    internal static string Chart2014RelType;
    internal static string ThemeRelType;
    internal static string ThemeRelType_Strict;
    internal static string FontRelType;
    internal static string TableStyleRelType;
    internal static string CoreRelType;
    internal static string AppRelType;
    internal static string CustomRelType;
    internal static string ImageRelType;
    internal static string ImageRelType_Strict;
    internal static string HyperlinkRelType;
    internal static string ControlRelType;
    internal static string PackageRelType;
    internal static string VbaProjectRelType;
    internal static string VbaProjectSignatureRelType;
    internal static string VbaProjectSignatureAgileRelType;
    internal static string VbaDataRelType;
    internal static string CustomXmlRelType;
    internal static string CustomXmlType;
    internal static string CustomXmlPropsRelType;
    internal static string CustomUIRelType;
    internal static string CustomUI14RelType;
    internal static string UserCustomizationRelType;
    internal static string AttachedTemplateRelType;
    internal static string ChartColorStyleRelType;
    internal static string ChartStyleRelType;
    internal static string ChartUserShapesRelType;
    internal static string ChartContentType;
    internal static string GlossaryRelType;
    internal static string PKG_namespace;
    internal static string W_namespace;
    internal static string W_strictNamespace;
    internal static string WP_namespace;
    internal static string WP_strictNamespace;
    internal static string PIC_namespace;
    internal static string PIC_strictNamespace;
    internal static string A_namespace;
    internal static string A_strictNamespace;
    internal static string A14_namespace;
    internal static string SVG_namespace;
    internal static string R_namespace;
    internal static string R_strictNamespace;
    internal static string RP_namespace;
    internal static string V_namespace;
    internal static string O_namespace;
    internal static string Xml_namespace;
    internal static string W10_namespace;
    internal static string CP_namespace;
    internal static string DC_namespace;
    internal static string DCTERMS_namespace;
    internal static string XSI_namespace;
    internal static string docProps_namespace;
    internal static string VE_namespace;
    internal static string M_namespace;
    internal static string M_strictNamespace;
    internal static string WNE_namespace;
    internal static string DCMI_namespace;
    internal static string CustomProps_namespace;
    internal static string VT_namespace;
    internal static string VT_strictNamespace;
    internal static string CHART_namespace;
    internal static string CHART_strictNamespace;
    internal static string SL_namespace;
    internal static string CHART2014_namespace;
    internal static string W16cex_namespace;
    internal static string W16cid_namespace;
    internal static string W16_namespace;
    internal static string W16sdtdh_namespace;
    internal static string W16se_namespace;
    internal static string Aink_namespace;
    internal static string Am3d_namespace;
    internal static string AML_namespace;
    internal static string DT_namespace;
    internal static string WML_namespace;
    internal static string W14_namespace;
    internal static string WPC_namespace;
    internal static string WP14_namespace;
    internal static string WPG_namespace;
    internal static string WPI_namespace;
    internal static string WPS_namespace;
    internal static string W15_namespace;
    internal static string Diagram_namespace;
    internal static string Strict_conformance;
    internal static string E_namespace;
    internal static string P_namespace;
    internal static string Cert_namespace;
    internal static string SYMEX_namespace;
    internal static string c_relationshipsTag;
    internal static string c_relationshipTag;
    internal static string c_idTag;
    internal static string c_typeTag;
    internal static string c_targetTag;
    internal static string c_userShapesTag;
    internal static string c_externalData;
    internal static int TwentiethOfPoint;
    internal static int BorderMultiplier;
    internal static char TOC_SYMBOL;
    internal static char FOOTNOTE_SYMBOL;
    internal static char PAGENUMBER_SYMBOL;
    internal static string DEF_FIT_TEXT_TO_SHAPE;
    internal static string c_conditionalTableStyleTag;
    internal static string c_tableFormatTag;
    internal static string c_rowFormatTag;
    internal static string c_cellFormatTag;
    internal static string c_paragraphFormatTag;
    internal static string c_characterFormatTag;
    internal static string PackageType;
    internal static string RelsPartPath;
    internal static string DocumentRelsPartPath;
    internal static string WebSettingsPath;
    internal static string WordMLDocumentPath;
    internal static string WordMLStylePath;
    internal static string WordMLNumberingPath;
    internal static string WordMLSettingsPath;
    internal static string WordMLHeaderPath;
    internal static string WordMLFooterPath;
    internal static string WordMLCommentsPath;
    internal static string WordMLImagePath;
    internal static string WordMLFootnotesPath;
    internal static string WordMLEndnotesPath;
    internal static string WordMLAppPath;
    internal static string WordMLCorePath;
    internal static string WordMLCustomPath;
    internal static string WordMLFontTablePath;
    internal static string WordMLChartsPath;
    internal static string WordMLDefaultEmbeddingPath;
    internal static string WordMLEmbeddingPath;
    internal static string WordMLDrawingPath;
    internal static string WordMLThemePath;
    internal static string WordMLFontsPath;
    internal static string WordMLDiagramPath;
    internal static string WordMLControlPath;
    internal static string WordMLVbaProject;
    internal static string WordMLVbaData;
    internal static string WordMLVbaProjectPath;
    internal static string WordMLVbaDataPath;
    internal static string WordMLCustomXMLPath;
    internal static string WordMLWebSettingsPath;
    internal static string WordMLCustomItemProp1Path;
    internal static string WordMLCustomXMLRelPath;
    internal static string WordMLFootnoteRelPath;
    internal static string WordMLEndnoteRelPath;
    internal static string WordMLSettingsRelPath;
    internal static string WordMLNumberingRelPath;
    internal static string WordMLFontTableRelPath;
    internal static string WordMLCustomXmlPropsRelType;
    internal static string WordMLControlRelType;
    internal static string WordMLDiagramContentType;
}
internal class Syncfusion.DocIO.DLS.Convertors.DocxParser : DocumentParser {
    private static char NONBREAK_HYPHEN;
    private string m_nameSpace;
    private string m_strictNameSpace;
    private string m_strictANameSpace;
    private Regex m_isFloatValue;
    private Regex m_hasAlphabet;
    private ZipArchive m_docArchive;
    private XmlReader m_reader;
    private WordDocument m_doc;
    private string m_majorFontName;
    private string m_minorFontName;
    private string m_majorLatinFontName;
    private string m_majorEaFontName;
    private string m_majorCsFontName;
    private string m_minorLatinFontName;
    private string m_minorEaFontName;
    private string m_minorCsFontName;
    private float m_gutter;
    private string m_currentFile;
    private Dictionary`2<string, string> m_linkStyleNames;
    private Dictionary`2<string, string> m_baseStyleNames;
    private Dictionary`2<string, DictionaryEntry> m_docRelations;
    private Dictionary`2<string, DictionaryEntry> m_fontTableRelations;
    private Dictionary`2<string, DictionaryEntry> m_settingsRelations;
    private Dictionary`2<string, bool> m_isExternalHyperlink;
    private List`1<BookmarkInfo> m_bookmarkNames;
    private Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> m_hfRelations;
    private Dictionary`2<string, WPicture> m_pictureBullet;
    private Dictionary`2<string, string> m_abstractListStyles;
    private Dictionary`2<string, string> m_overrideListStyles;
    private WCharacterFormat m_currentRunFormat;
    private List`1<DictionaryEntry> m_footnote;
    private List`1<DictionaryEntry> m_endnote;
    private Stack`1<WField> m_fieldStack;
    private Stack`1<RevisionType> m_trackchangeStack;
    private Stack`1<Revision> m_trackchangeRevisionDetails;
    private RevisionType m_trackChangeType;
    private Revision moveRevision;
    private Revision contentRevision;
    private Revision emptyContentRevision;
    private string m_revAuthorName;
    private DateTime m_revDateTime;
    private string m_name;
    private BiDirectionalOverride m_biDirectionalOverride;
    private List`1<Entity> m_altChunkCollection;
    private List`1<Entity> m_postParaItemsCollection;
    private WCommentMark m_postCommMark;
    private Dictionary`2<string, WComment> m_comments;
    private List`1<WCommentExtended> m_commentsEx;
    private Stack`1<WComment> m_commStack;
    private short m_gridCount;
    private short m_formatChangeGridCount;
    private short m_gridSpan;
    private Dictionary`2<string, int> m_imageIds;
    private Dictionary`2<string, Byte[]> m_svgDataDict;
    private string m_appVersion;
    private string m_documentPath;
    private List`1<FontFamilyNameRecord> m_fontFamilyRecords;
    private byte m_flags;
    private OfficeParser m_officeParser;
    private string m_firstInvalidNumId;
    private byte m_bFlags;
    private byte m_bFlags4;
    private List`1<BlockContentControl> m_blockControls;
    private List`1<InlineContentControl> m_inlineControls;
    private List`1<WTableCell> m_cellControls;
    private Dictionary`2<string, DictionaryEntry> m_chartRelations;
    private AutoShapeHelper m_autoShapeHelper;
    private long shapeID;
    private Dictionary`2<string, DictionaryEntry> ChartRelations { get; }
    private bool IsInFootnote { get; private set; }
    private bool IsInEndnote { get; private set; }
    private bool IsInComments { get; private set; }
    private bool IsWord2003ML { get; private set; }
    private bool IsStrict { get; private set; }
    private Dictionary`2<string, int> ImageIds { get; }
    private Dictionary`2<string, Byte[]> SvgDataDict { get; }
    private List`1<BlockContentControl> BlockContentControls { get; }
    private List`1<InlineContentControl> InlineContentControls { get; }
    private List`1<WTableCell> CellContentControls { get; }
    private Dictionary`2<string, WComment> Comments { get; }
    private List`1<Entity> AltChunkCollection { get; }
    private List`1<Entity> PostParaItemsCollection { get; }
    private Stack`1<WComment> CommentsStack { get; }
    private WComment CurrentComment { get; }
    private Stack`1<WField> FieldStack { get; }
    private WField CurrentField { get; }
    private List`1<DictionaryEntry> Footnote { get; }
    private List`1<DictionaryEntry> Endnote { get; }
    private Dictionary`2<string, string> OverrideListStyleNames { get; }
    private Dictionary`2<string, string> AbstractListStyleNames { get; }
    private Dictionary`2<string, WPicture> PictureBullet { get; }
    private Dictionary`2<string, DictionaryEntry> DocumentRelations { get; }
    private Dictionary`2<string, DictionaryEntry> FontTableRelations { get; }
    private Dictionary`2<string, DictionaryEntry> SettingsRelations { get; }
    private Dictionary`2<string, bool> IsExternalHyperlink { get; }
    private List`1<BookmarkInfo> BookmarkNames { get; }
    private Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> HFRelations { get; }
    private Dictionary`2<string, string> BaseStyleNames { get; }
    private Dictionary`2<string, string> StyleNameId { get; }
    private Dictionary`2<string, string> LinkStyleNames { get; }
    private string AppVersion { get; private set; }
    private AutoShapeHelper AutoShapeHelper { get; }
    private bool IsSDTHasSectionBreak { get; private set; }
    private bool IsRowChangeFormat { get; private set; }
    private bool IsCellChangeFormat { get; private set; }
    private bool IsTableChangeFormat { get; private set; }
    private bool IsHyperLinkField { get; private set; }
    private bool IsFirstInvalidNumID { get; private set; }
    private bool IsNeedToApplyParaFormat { get; private set; }
    private bool PreserveSpace { get; private set; }
    private OfficeParser OfficeParser { get; }
    private Dictionary`2<string, DictionaryEntry> get_ChartRelations();
    private bool get_IsInFootnote();
    private void set_IsInFootnote(bool value);
    private bool get_IsInEndnote();
    private void set_IsInEndnote(bool value);
    private bool get_IsInComments();
    private void set_IsInComments(bool value);
    private bool get_IsWord2003ML();
    private void set_IsWord2003ML(bool value);
    private bool get_IsStrict();
    private void set_IsStrict(bool value);
    private Dictionary`2<string, int> get_ImageIds();
    private Dictionary`2<string, Byte[]> get_SvgDataDict();
    private List`1<BlockContentControl> get_BlockContentControls();
    private List`1<InlineContentControl> get_InlineContentControls();
    private List`1<WTableCell> get_CellContentControls();
    private Dictionary`2<string, WComment> get_Comments();
    private List`1<Entity> get_AltChunkCollection();
    private List`1<Entity> get_PostParaItemsCollection();
    private Stack`1<WComment> get_CommentsStack();
    private WComment get_CurrentComment();
    private Stack`1<WField> get_FieldStack();
    private WField get_CurrentField();
    private List`1<DictionaryEntry> get_Footnote();
    private List`1<DictionaryEntry> get_Endnote();
    private Dictionary`2<string, string> get_OverrideListStyleNames();
    private Dictionary`2<string, string> get_AbstractListStyleNames();
    private Dictionary`2<string, WPicture> get_PictureBullet();
    private Dictionary`2<string, DictionaryEntry> get_DocumentRelations();
    private Dictionary`2<string, DictionaryEntry> get_FontTableRelations();
    private Dictionary`2<string, DictionaryEntry> get_SettingsRelations();
    private Dictionary`2<string, bool> get_IsExternalHyperlink();
    private List`1<BookmarkInfo> get_BookmarkNames();
    private Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> get_HFRelations();
    private Dictionary`2<string, string> get_BaseStyleNames();
    private Dictionary`2<string, string> get_StyleNameId();
    private Dictionary`2<string, string> get_LinkStyleNames();
    private string get_AppVersion();
    private void set_AppVersion(string value);
    private AutoShapeHelper get_AutoShapeHelper();
    private bool get_IsSDTHasSectionBreak();
    private void set_IsSDTHasSectionBreak(bool value);
    private bool get_IsRowChangeFormat();
    private void set_IsRowChangeFormat(bool value);
    private bool get_IsCellChangeFormat();
    private void set_IsCellChangeFormat(bool value);
    private bool get_IsTableChangeFormat();
    private void set_IsTableChangeFormat(bool value);
    private bool get_IsHyperLinkField();
    private void set_IsHyperLinkField(bool value);
    private bool get_IsFirstInvalidNumID();
    private void set_IsFirstInvalidNumID(bool value);
    private bool get_IsNeedToApplyParaFormat();
    private void set_IsNeedToApplyParaFormat(bool value);
    private bool get_PreserveSpace();
    private void set_PreserveSpace(bool value);
    private OfficeParser get_OfficeParser();
    internal WordDocument ReadWord2003Xml(Stream stream, WordDocument document);
    private void ReadAndSkipWhiteSpaces(XmlReader reader);
    internal void OpenFlatOPC(Stream docStream);
    internal WordDocument Read(Stream docStream, WordDocument document);
    internal WordDocument ReadWordML(Stream docStream, WordDocument document);
    private Stream DecryptDocumentStream(Stream stream, WordDocument doc);
    private void Read(WordDocument document, bool isFlatOPC);
    private void UpdatePath(Package wordPackage);
    private string GetPathByContentType(string contentType, Package wordPackage);
    private string GetExtensionContentType(string extension);
    private FormatType GetFormatType(string type);
    private void UpdateFormatType(WordDocument document);
    private void ParseDocument(Package wordPackage);
    private void SortCustomXmlbyRid(PartContainer partContainer);
    private void BindCustomXmlData(PartContainer partContainer);
    private void ParseMetaDataProperties(PartContainer partContainer);
    private void ResetControls(PartContainer partContainer, Dictionary`2<string, List`1<InlineContentControl>> resultInlineControls, Dictionary`2<string, List`1<BlockContentControl>> resultBlockControls, Dictionary`2<string, List`1<WTableCell>> resultCellControls);
    internal bool IsXmlPartsContainsProps(PartContainer partContainer);
    internal void MapContentControl(PartContainer partContainer);
    private List`1<BlockContentControl> GetIdMisMatchedContentControl(Dictionary`2<string, List`1<BlockContentControl>> resultBlockControls, List`1<BlockContentControl> ContentControls);
    private List`1<WTableCell> GetIdMisMatchedContentControl(Dictionary`2<string, List`1<WTableCell>> resultCellControls);
    private List`1<InlineContentControl> GetIdMisMatchedContentControl(Dictionary`2<string, List`1<InlineContentControl>> resultInlineControls);
    private void ResetCellControlWithMappedItem(PartContainer partContainer, Dictionary`2<string, List`1<WTableCell>> resultCellControls);
    private void ResetCellControls(KeyValuePair`2<string, List`1<WTableCell>> control, XmlElement rootElement);
    private void ResetBlockControlWithMappedItem(PartContainer partContainer, Dictionary`2<string, List`1<BlockContentControl>> resultBlockControls);
    private void ResetBlockControls(KeyValuePair`2<string, List`1<BlockContentControl>> blockControl, XmlElement rootElement);
    private void SetCoreProperty(object control, List`1<string> xPathList);
    private void ResetInlineControlWithMappedItem(PartContainer partContainer, Dictionary`2<string, List`1<InlineContentControl>> resultInlineControls);
    private void ResetInlineControls(KeyValuePair`2<string, List`1<InlineContentControl>> inlineControl, XmlElement rootElement, bool isCustomXmlItem);
    private XmlElement GetXmlElement(string xmlPartsPath, PartContainer partContainer);
    private XElement GetLinqXmlElement(string xmlPartsPath, PartContainer partContainer);
    private List`1<string> GetParamListPath(string path, Boolean& isDocProperty);
    private List`1<string> GetListPath(string path, Boolean& isDocProperty);
    private List`1<string> GetListPath(string path);
    private string GetPathIndex(string path, Int32& startIndex, Int32& endIndex);
    private XNode GetCurrentNode(IEnumerable`1<XNode> childNodes, XNode currentNode, Int32& toIterate, int nodeIndex, string path, string parentInfo, string attributeName, string attributeValue);
    private bool CheckValidNode(string parentOfTempPath, XNode node);
    private bool CheckNodeHasValidAttributes(Dictionary`2<string, string> expectedAttributes, XNode currentNode);
    private string GetResultText(string path, List`1<string> xPathList, WTableCell contentControl);
    private string GetTextFromContentControl(string path, List`1<string> xPathList, BlockContentControl contentControl);
    private Dictionary`2<string, string> GetAttributesOfXPath(string secondPart);
    private string ConvertTextToDateFormat(ContentControlProperties control, string text);
    private bool IsProperDateTimeFormat(String& str);
    private void SetSpacesForEmptyContentControl(ParagraphItem paraitem);
    private bool HasEmptyTextInParagraph(WParagraph para);
    private bool HasEmptyBodyItems(BodyItemCollection itemCollection);
    private WTextRange GetDefaultSpaceFromWordML(WTextBody textBody);
    private void ConvertWordMLToText(InlineContentControl contentControl, string text);
    private void MapWordMLToBlockContentControl(BlockContentControl contentControl, WTextBody textBody);
    private void ConvertWordMLToText(BlockContentControl contentControl, string text);
    private void ConvertWordMLToText(WTableCell contentControl, string text);
    private bool IsWordML(string text, MemoryStream& stream);
    private void SetMappedCell(WTableCell tableCell, string text);
    private void SetMappedPicture(BlockContentControl contentControl, string text);
    private void SetMappedPicture(InlineContentControl contentControl, string text);
    private void SetMappedPicture(WTableCell contentControl, string text);
    private WPicture SetDefaultPic(WPicture picture);
    private WPicture AppendPictureToContentControl(WPicture picture, Entity contentControl);
    internal bool IsDefaultPicture(Byte[] sourceImageBytes);
    private void MappedBase64Image(WPicture picture, string text, Entity contentControl);
    private void SetMappedParagraph(BlockContentControl contentControl, string text);
    private bool HasGlossaryDocument();
    private bool IsMapPlaceHolderFromGlossary(Entity contentControl, string text);
    private bool SkipToMapDatabindingValue(Entity contentControl);
    private string GetPlaceHolderName(Entity contentControl);
    private void MapContentFromGlossaryDocument(Entity contentControl);
    private WParagraph ClearContentControlExceptLastPara(Entity contentControl);
    private void MapParagraphsFromDocPart(WTextBody body, Entity contentControl, WParagraph lastParagraph, bool isCreateNewParaForLast);
    private void ParseGLossaryDocPart(XmlReader reader, Entity contentControl, Boolean& isDocPartFound);
    private string GetTextForEmptyMappedContent(Entity contentControl);
    private void UpdateFormatting(WCharacterFormat source, WCharacterFormat dest);
    private void SetMappedItem(InlineContentControl contentControl, string text);
    private string ReplaceBreakChars(string text);
    private string ReplaceAsSoftBreaks(string text);
    private void ClearParsedImage(string imageName, string containerName);
    private void ParseThemes(Stream stream);
    private void ParseThemeElements(XmlReader reader);
    private void ParseFormatScheme(XmlReader reader);
    private void ParseEffectStyleScheme(XmlReader reader);
    private EffectFormat ParseEffectList(XmlReader reader);
    private float GetPropertyValue(string value, string attributeName);
    private ThreeDFormat ParseShapeProperties(XmlReader reader, ThreeDFormat threeDFormat);
    private void ParseEffectListItems(XmlReader reader, EffectFormat effectFormat);
    private void ParseFillStyleList(XmlReader reader, string localName);
    private List`1<DictionaryEntry> ParseThemeFillColor(XmlReader reader, string localName, List`1<DictionaryEntry> colorEntries, UInt32& opacity, Color& color);
    private List`1<DictionaryEntry> ParseThemeColorTransform(XmlReader reader, string parentElement);
    private List`1<DictionaryEntry> ParseThemeColorTransformValues(XmlReader reader, string parentElement);
    private void ParseFormatSchemeGradientFill(XmlReader reader, GradientFill gradientFill);
    private List`1<DictionaryEntry> ParseThemePatternFill(XmlReader reader, string parentElement, List`1<DictionaryEntry> colorEntries, Color& color, Color& foreColor, UInt32& opacity, UInt32& fgOpacity);
    private void ParseFormatSchemeGradientStop(XmlReader reader, GradientFill gradientFill);
    private void ParseLineStyleScheme(XmlReader reader);
    private void ParseLineStyle(XmlReader reader, LineFormat lineFormat, string localName);
    private void ParseFontScheme(XmlReader reader);
    private void ParseFontSchemeInternal(XmlReader reader, bool IsMajorFont, string parentElement);
    private void ParseSchemeColor(XmlReader reader);
    private string GetBaseFontName(Stream stream, bool isMajor);
    private void ParseDocumentProperties(Package wordPackage);
    private void ParseVbaProject(Stream stream);
    private void ParseVbaProjectSignature(Stream stream);
    private void ParseVbaProjectSignatureAgile(Stream stream);
    private void ParseVbaData(Stream stream);
    private void ParseMacroData(XmlReader reader);
    private void ParseDocEvents(XmlReader reader);
    private void ParseFontTable(Stream stream);
    private void ParseFontTable(XmlReader reader);
    private void UpdateFontTable();
    private void Parse2003FontDetails(XmlReader reader, string fontName);
    private void ParseFontDetails(XmlReader reader, string fontName);
    private Byte[] GetBytes(string signature);
    private void ParseDocument(Stream stream);
    private bool IsNeedToMergeTables(WTable table);
    private bool IsRowHeaderEnabled(WTable prevTable);
    private void ParseBody(XmlReader reader, IEntity entity, bool isRunElementTextBody, bool isFromDocument, bool isMappedPictureContentControl);
    private void ParseBlockContentControl(XmlReader reader, IEntity entity);
    private void PostProcessBlockContentControl(BlockContentControl sdTagBlock);
    private bool IsPostParaItemsContainRenderableItem();
    private void UpdateNestedParaItems(WParagraph paragraph);
    internal void SDTContentWithSectionBreakParagraph(BlockContentControl sdttagblock);
    private IWParagraph AddParagraph(IEntity entity);
    private void AddPostParaItems(IWParagraph paragraph);
    private void AddBookmark(AlternateChunk altchunk);
    private void ParseParagraphItems(XmlReader reader, ParagraphItemCollection paraItems, string endnode, IOfficeMathRunElement mathRunElement, bool isMappedPictureContentControl);
    private void ParseNestedParagraph(XmlReader reader, ParagraphItemCollection paraItems, bool isFirstNestedParaOccured);
    private void ParseTableInsideParagraph(XmlReader reader, ParagraphItemCollection paraItems);
    private void MoveParaItemsToNestedTable(ParagraphItemCollection paraItems, WParagraph cellPara, bool isNestedInInlineContentControl);
    private void ApplyDirectionalOverride(WCharacterFormat charFormat);
    private void ContentControlRevision(ParagraphItemCollection paraItems, RevisionType revisionType);
    private void ParseComment(XmlReader reader);
    private WComment Parse2003Comment(XmlReader reader);
    private void ParseComments();
    private void ParseCommentRangeStart(XmlReader reader, ParagraphItemCollection paraItems);
    private void ParseCommentRangeEnd(XmlReader reader, ParagraphItemCollection paraItems, IEntity ent);
    private void UpdateCommentsStack(string id);
    private void UpdateCommentItems(ParagraphItem item);
    private void ParseCommentsExtended(XmlReader reader);
    private void ParseCommentExtended(XmlReader reader);
    private void ParseTable(XmlReader reader, WTable table, bool isAlreadyCheck, string m_localName);
    private void ParseTableValue(XmlReader reader, WTable table);
    private void CheckGridSpan(WTable table);
    private bool IsNeedtoConsiderGridafter(WTable table);
    private void UpdateTableCellWidth(WTable table, Dictionary`2<string, short> cellGridSpan);
    private void ParseTableRow(XmlReader reader, WTableRow tableRow, Boolean& isTableCellWidthDefined, Dictionary`2<string, short> cellGridSpan);
    private void AddAltChunk(WTableCell tableCell);
    private void ParseStructureDocumentTagCell(XmlReader reader, CellContentControl sdtCell, WTableRow tableRow, Boolean& isTableCellWidthDefined, Dictionary`2<string, short> cellGridSpan);
    private void ParseSDTCellContent(XmlReader reader, CellContentControl sdtCell, WTableRow tableRow, Boolean& isTableCellWidthDefined, Dictionary`2<string, short> cellGridSpan);
    private void ParseStructureDocumentTagRow(XmlReader reader, RowContentControl sdtRow, WTable table, Boolean& isTableCellWidthDefined, Dictionary`2<string, short> cellGridSpan);
    private void UpdateXPathForRepeatSection(int itemsCount, WTable table, MemoryStream stream, int sdtRowIndex, string tempPath, string parentOfTempPath, Boolean& isSDTcontentFirst, Boolean& isTableCellWidthDefined, Dictionary`2<string, short> cellGridSpan, RowContentControl sdtRow);
    private string GetNewpath(string newPath, string tempPath, string parentOfTempPath, int sdtRowIndex);
    private void GetXMLNodesForRepeatSection(String& tempPath, String& parentOfTempPath, Int32& itemsCount, PartContainer partContainer, RowContentControl sdtRow, string key);
    private void ParseSDTRowContent(MemoryStream stream, RowContentControl sdtRow, WTable table, Boolean& isSDTcontentFirst, Boolean& isTableCellWidthDefined, Dictionary`2<string, short> cellGridSpan);
    private void ParseTableCell(XmlReader reader, WTableCell tableCell, Dictionary`2<string, short> cellGridSpan);
    private void ParseCellProperties(XmlReader reader, WTableCell tableCell, Dictionary`2<string, short> cellGridSpan, string localName);
    private bool IsRowsFirstCellWidthZero(WTableCell cell);
    private bool IsCellsWidthTypesNoneOrAuto(WTableRow row);
    private void ParseChangeCellFormat(XmlReader reader, WTableCell tableCell, Dictionary`2<string, short> cellGridSpan);
    private void ParseCellShading(XmlReader reader, WTableCell cell);
    private void ParseCellVerticalMerge(XmlReader reader, CellFormat cellFormat);
    private void ParseCellHorizontalMerge(XmlReader reader, CellFormat cellFormat);
    private VerticalAlignment ParseCellVerticalAlignment(XmlReader reader);
    private void Parse2003CellDirection(XmlReader reader, CellFormat cellFormat);
    private void ParseCellDirection(XmlReader reader, CellFormat cellFormat);
    private void ParseCellWidth(XmlReader reader, WTableCell cell);
    private void UpdateCellWidth(WTableCell cell);
    private void UpdateCellWidth(WTableCell cell, short gridSpan);
    private void UpdateFormatChangeCellWidth(WTableCell cell, short gridSpan);
    private void ParseTableRowProperties(XmlReader reader, WTableRow tableRow);
    private void ParseChangeRowFormat(XmlReader reader, WTableRow tableRow);
    private string GetStringVal(XmlReader reader, string attrName, string attrNS);
    private void ParseRowHeight(XmlReader reader, WTableRow tableRow);
    private void ApplyTableProperties(WTableRow tblRow, WTable table);
    private void UpdateTableBorders(XmlTableFormat xmlFormat);
    private void ParseTableProperties(XmlReader reader, IEntity entity, Boolean& isEmptyElement);
    private void ParseChangeTableProperties(XmlReader reader, IEntity entity);
    private int ParseIntegerValue(string value);
    private float ParseFloatValue(string value);
    private void ParseTableTitle(XmlReader reader, WTable table);
    private void ParseTableDescription(XmlReader reader, WTable table);
    private void ParseTableLook(XmlReader reader, WTable table);
    private bool GetBoolValue(string value);
    private bool GetBoolValue(XmlReader reader, string nameSpace);
    private string GetTableLookValue(XmlReader reader, string name);
    private void ParseTableMargins(XmlReader reader, Paddings paddings);
    private void ParseTableMargins(XmlReader reader, IEntity entity);
    private Paddings GetPaddings(IEntity entity);
    private RowAlignment ParseTableJustification(XmlReader reader);
    private void ParseTablePositioning(XmlReader reader, WTable table);
    private void ParseTableVerticalRelation(TablePositioning positioning, string position);
    private void ParseTableHorizontalRelation(TablePositioning positioning, string position);
    private void ParseTableHorizontalPosition(TablePositioning positioning, string position);
    private void ParseTableVerticalPosition(TablePositioning positioning, string position);
    private void ParseTableShading(XmlReader reader, RowFormat format);
    private void ParseTableLayout(XmlReader reader, RowFormat format);
    private void ParseTableStyle(XmlReader reader, WTable table);
    private RowFormat GetRowFormat(IEntity entity);
    private void ParseTableGrid(XmlReader reader, WTable table, bool isTableGridChange, string localName);
    private IWTable AddTable(IEntity entity);
    private bool ParseHyperlink(XmlReader reader, ParagraphItemCollection paraItems);
    private DictionaryEntry GetRelation(string id);
    private void ParseHyperlinkText(XmlReader reader, ParagraphItemCollection paraItems);
    private bool ParseFieldSimple(XmlReader reader, ParagraphItemCollection paraItems);
    private string GetBookmarkName(string bookmarkId);
    private bool RemoveBookmarkName(string bookmarkId);
    private void ParseBookmarkEnd(XmlReader reader, ParagraphItemCollection paraItems);
    private bool HasNoRenderableItemBefore(ParagraphItemCollection paraItems, string bookmarkName);
    private void ParseBookmarkEnd(XmlReader reader, IEntity ent);
    private bool IsUpdateBkmkEnd(BookmarkEnd bkmkEnd, string bkmkName, IEntity entity, string displacedByCustomXml, bool isAfterTable);
    private WParagraph GetEndParagraph(WTableCell cell);
    private WParagraph GetEndParagraph(WTableRow row);
    private void ParseBookmarkStart(XmlReader reader, ParagraphItemCollection paraItems);
    private void ParseMoveRangeEnd(XmlReader reader, IEntity ent);
    private void ParseEditableRangeEnd(XmlReader reader, ParagraphItemCollection paraItems);
    private void ParseEditableRangeEnd(XmlReader reader, IEntity ent);
    private WTable GetOwnerTable(IEntity entity);
    private WParagraph GetOwnerParagraph(IEntity entity, bool isAfterTable);
    internal WParagraph GetMathOwnerParagraph(IOfficeMathFunctionBase mathFunctionBase);
    private void ParseEditableRangeStart(XmlReader reader, ParagraphItemCollection paraItems);
    private void CreateRunFormat(ParagraphItemCollection paraItems);
    private void ParseRunValues(XmlReader reader, ParagraphItemCollection paraItems, IOfficeMathRunElement mathParaItem, bool isMappedPictureContentControl, bool isFromBody);
    private void ParseRun(XmlReader reader, ParagraphItemCollection paraItems, IOfficeMathRunElement mathParaItem, bool isAlreadyChecked, XmlNodeType nodeType, bool isMappedPictureContentControl);
    private void UpdateTextBoxFormat(ChildShapeCollection choiceCollection, ChildShapeCollection fallbackCollection);
    private bool IsChoiceItemNotAdded(ParagraphItem item);
    private bool GetShapeLineFillType(Shape shape);
    private void ImportDocxPropsAndXMLRelation(Shape shape, ParagraphItem item, Stream shapeStream);
    private void ImportDocxPropsAndXMLRelation(GroupShape shape, ParagraphItem item, Stream shapeStream);
    private ParagraphItem ParseAbsoluteTab(XmlReader reader);
    private void ParseFieldMark(XmlReader reader, ParagraphItemCollection paraItems, IOfficeMathRunElement mathRunElement);
    private bool HasFFData(Stream fieldNode);
    private bool HasOleObject(Stream fieldNode);
    private void ProcessFieldMarkSeperator(ParagraphItemCollection paraItems, IOfficeMathRunElement mathRunElement);
    private void ProcessFieldMarkEnd(ParagraphItemCollection paraItems, IOfficeMathRunElement mathRunElement);
    private void InitFieldMarkBegin(ParagraphItemCollection paraItems, IOfficeMathRunElement mathRunElement);
    private void UpdateFieldType(WField parentField, WFieldMark fieldMark);
    private void AppendPageFieldForPgNum(ParagraphItemCollection paraItems);
    private void ParseFieldData(XmlReader reader, ParagraphItemCollection paraItems);
    private void ParseFormField(XmlReader reader, WFormField formField);
    private void ParseDropDown(XmlReader reader, WDropDownFormField dropDownFormField);
    private void ParseTextInput(XmlReader reader, WTextFormField textFormField);
    private TextFormat GetTextFormat(string format);
    private TextFormFieldType GetTextFieldType(string type);
    private void ParseCheckBox(XmlReader reader, WCheckBox checkBox);
    private WFormField GetFormField(Stream ffDataStream);
    private WFootnote Parse2003FootnotePart(XmlReader reader, bool isFootnote);
    private void ParseFootnotePart(bool isFootnote);
    private WFootnote ParseFootnote(XmlReader reader);
    private WFootnote GetFootnote(bool isFootnote, string id);
    private void ParseFootnoteSymbol(XmlReader reader, WFootnote footnote);
    private void MoveToNextLine(XmlReader reader);
    private WTextRange ParseFootnoteMarker();
    private ParagraphItem ParseObject(XmlReader reader);
    private bool isResultFromLinkField();
    private ParagraphItem ParseOleObject(Stream objectStream);
    private void ParseOlePictureWrapStyle(XmlReader reader, WPicture picture);
    private void ParseOleData(XmlReader reader, WOleObject oleObject);
    private Part GetOlePart(string oleId);
    private string GetOleLinkPath(string id);
    private bool IsNativeDataInside(OleObjectType type);
    private bool HasNode(Stream objectStream, string elementName);
    private ParagraphItem ParseShape(XmlReader reader, ParagraphItemCollection paraItems, MemoryStream drawingStream, MemoryStream shapeStream, ParagraphItem choiceItem);
    private bool IsVMLCustomShape(AutoShapeType shapeType, MemoryStream shapeStream);
    private void ParseDocx2007Extrusion(Shape shape, Stream extrusionStream);
    private float GetPropertyValue(string value);
    private void ParseExtrusionAxis(EffectFormat effectFormat, string value, string attribute);
    private void ParseDocx2007ShadowEffect(Shape shape, Stream shadowStream);
    private void ParseShadowOffsets(EffectFormat effectFormat, string value, string attribute);
    private void ParseFillOffsets(FillFormat fillFormat, string value, string attribute);
    private float GetEffectsPointValue(string value);
    private ShadowType GetShadowType(string value);
    private void ParseXMLRelations(Shape shape, MemoryStream shapeStream);
    private void ParseXMLRelations(GroupShape shape, MemoryStream shapeStream);
    private GroupShape ParseGroupShape(Stream groupShape);
    private Shape ParseShape(MemoryStream shapeStream, MemoryStream drawingStream);
    private void Parse2007Shape(XmlReader reader, Shape shape);
    private void Parse2007GroupShape(XmlReader reader, GroupShape shape);
    private void Parse2007GroupShapeItems(XmlReader reader, GroupShape shape);
    private ShapeType DetectShapeType(MemoryStream shapeStream);
    private void UpdateAutoShapeType(XmlReader shapeReader, ChildShape childShape, string shapetype, string node, ShapeType shapeType);
    private void Parse2007GroupShapeItems(XmlReader reader, ChildGroupShape shape);
    private void ParseCoordinatesOfNestedGroupShape(XmlReader reader, ChildGroupShape nestedGroup);
    private void GetCoordinateOrigin(string coordOrigin, Entity shapeEntity);
    private void ParseTextBoxWrapStyle(XmlReader reader, Shape shape);
    private void ParseTextbox(XmlReader reader, ChildShape shape);
    private void ParseTextbox(XmlReader reader, Shape shape);
    private bool ParseFillEffects(XmlReader reader, GroupShape shape);
    private bool ParseFillEffects(XmlReader reader, ChildShape shape);
    private bool ParseFillEffects(XmlReader reader, Shape shape);
    private float GetOpacityValue(string value);
    private int GetAngle(string angle);
    private void Parse2007GradientFill(XmlReader reader, GradientFill gradientFill);
    private void ParseFocusPosition(XmlReader reader, GradientFill gradientFill);
    private void ParseGradientStops(XmlReader reader, GradientFill gradientFill);
    private void ParseFocus(XmlReader reader, GradientFill gradientFill);
    private ImageRecord GetImageRecord(string imageId);
    private void Parse2007TextboxContent(XmlReader reader, WTextBody textBody);
    private void ParseTextBoxStyle(XmlReader reader, TextFrame textFrame);
    private TextDirection GetTextDirection(string textDirection);
    private void ParseTextboxIntMargins(XmlReader reader, Shape shape);
    private void ParseStroke(XmlReader reader, GroupShape shape);
    private void ParseStroke(XmlReader reader, ChildShape shape);
    private void ParseStroke(XmlReader reader, Shape shape);
    private LineStyle GetShapeLineStyle(string lineStyle);
    private void ParseShape2007Properties(XmlReader reader, GroupShape shape);
    private void ParseShape2007Properties(XmlReader reader, ChildShape shape);
    private void ParseShape2007Properties(XmlReader reader, Shape shape);
    private void ParseLineShapeProperties(XmlReader reader, GroupShape shape);
    private void ParseLineShapeProperties(XmlReader reader, ChildShape shape);
    private void ParseLineShapeProperties(XmlReader reader, Shape shape);
    private void ParseHorizontalRule(XmlReader reader, GroupShape shape);
    private void ParseHorizontalRule(XmlReader reader, Shape shape);
    private void Parse2007ShapeEffects(XmlReader reader, GroupShape shape);
    private void Parse2007ShapeEffects(XmlReader reader, ChildShape shape);
    private void Parse2007ShapeEffects(XmlReader reader, Shape shape);
    private void Apply2007ShapeProperties(GroupShape shape, string propertyName, string propertyValue);
    private void Apply2007ShapeProperties(ChildShape shape, string propertyName, string propertyValue);
    private void Apply2007ShapeProperties(Shape shape, string propertyName, string propertyValue);
    private void ParseDrawingProperties(XmlReader reader, Shape shape);
    private void ParseWatermark(MemoryStream shapeStream, ParagraphItemCollection paraItems);
    private Entity GetBaseEntity(Entity entity);
    private void ParsePictureWatermark(MemoryStream shapeStream, HeaderFooter header);
    private void ParsePictureWatermarkProperties(XmlReader reader, PictureWatermark watermark);
    private void ParseTextWatermark(Stream stream, HeaderFooter header);
    private void ParseTextWatermarkProperties(XmlReader reader, TextWatermark watermark);
    private void ParseTextWatermarkPosition(XmlReader reader, TextWatermark watermark);
    private void ParseTextWatermarkProperties(TextWatermark waterMark, string propertyName, string propertyValue);
    private void ParseTextWatermarkStyleAndSize(XmlReader reader, TextWatermark watermark);
    private string FindAttributeValue(Stream stream, string elementName, string attributeName, string namspace, bool readEmpty);
    private string FindElementValue(Stream stream, string elementName, string namspace);
    private WPicture ParsePictureShape(MemoryStream shapeStream);
    private void ParsePictureShape(XmlReader reader, IEntity entity);
    private string Read2003ImageBase64String(XmlReader reader, string endNode);
    private void ParsePictureShapeImageValues(XmlReader reader, IEntity ent, string localName, bool isAlreadyRead);
    private void SetBrightnessFromFloatRange(WPicture pict, float value);
    private void SetBrightnessFromDecimal(WPicture pict, float value);
    private void SetContrastFromFloatRange(WPicture pict, double value);
    private void SetContrastFromDecimal(WPicture pict, double value);
    private void ParsePictureShapeImage(XmlReader reader, IEntity ent, string localName, bool isAlreadyRead, bool isAlreadyChecked);
    private float GetCroppingValues(string value);
    private void ParseStrokeProps(XmlReader reader, InlineShapeObject shape);
    private LineJoin GetLineJoinStyle(string lineJoinStyle);
    private void ParseShapeBorder(XmlReader reader, BorderCode brc);
    private BorderStyle GetShapeBorderStyle(string boderStyle);
    private void ParsePictureShapeProperties(XmlReader reader, IEntity ent);
    public void ParsePictureShapeStyle(string style, WPicture pic);
    private String[] SortShapeStyle(string style);
    private void ParsePictureShapeProperties(WPicture pic, string propertyName, string propertyValue);
    private WTextBox ParseTextboxShape(MemoryStream shapeStream, MemoryStream drawingStream);
    private void ParseTextboxProperties(XmlReader reader, WTextBox textbox);
    private void ParseTextboxShape(XmlReader reader, WTextBox textBox);
    private void ParseTextBoxWrappingStyle(XmlReader reader, IEntity entity);
    private void ParseTextbox(XmlReader reader, WTextBox textbox);
    private bool ParseFillEffects(XmlReader reader, WTextBox textbox);
    private void ParseGradientFill(XmlReader reader, Background background);
    private void ParseGradientColor(XmlReader reader, Background background);
    private void ParseGradient(XmlReader reader, BackgroundGradient gradient);
    private void ParseRadialGradient(XmlReader reader, BackgroundGradient gradient);
    private GradientShadingVariant ParseShadingVariant(string focus);
    private void ParsePatternFill(XmlReader reader, Background background);
    private void ParsePatternFill(XmlReader reader, FillFormat fillFormat);
    private void ParsePictureFill(XmlReader reader, WTextBox textbox, string fillType);
    private TextWrappingType GetTextWrapType(string wrapType);
    private TextWrappingStyle GetWrapStyle(string wrapStyle);
    private TextWrappingType GetWrapType(string wrapType);
    private void ParseTextboxContent(XmlReader reader, WTextBox textbox);
    private void ParseTextBoxStyle(XmlReader reader, WTextBox textbox);
    private void ParseTextboxIntMargins(XmlReader reader, WTextBox textbox);
    private void ParseTextFrameInternalMargins(XmlReader reader, TextFrame textFrame);
    private float GetTextboxMargin(string margin);
    private float GetShapeInternalMargin(string margin);
    private void ParseStroke(XmlReader reader, WTextBox textBox);
    private LineDashing GetDashStyle(string dashstyle);
    private TextBoxLineStyle GetLineStyle(string lineStyle);
    private void ParseShapeProperties(XmlReader reader, WTextBox textbox);
    private void ParseTextboxEffects(XmlReader reader, WTextBox textbox);
    private float GetPointValue(string value);
    private float GetChildShapePointValue(string value);
    private void ApplyShapeProperties(WTextBox textbox, string propertyName, string propertyValue);
    private void ParseTextBoxWrapType(WTextBox textbox, string value);
    private String[] GetPropertyValues(string value);
    private ShapeType DetectShapeType(MemoryStream shapeStream, AutoShapeType& autoShapeType, Dictionary`2& docxProps, String& shapeTypeId, ParagraphItem choiceItem);
    private void ParseTextBoxGraphics(WTextBox textbox, XmlParagraphItem choiceItem);
    private ParagraphItem ParseDrawing(XmlReader reader, ParagraphItemCollection paraItems, MemoryStream& drawingStream, bool isMappedPictureContentControl);
    private ParagraphItem ParseShape(XmlReader picReader, ParagraphItemCollection paraItems, MemoryStream drawingStream);
    private void ParseCustomGeometry(XmlReader reader, ShapeCommon shape);
    internal static void SetReaderPosition(XmlReader reader);
    internal static void ParseGuideList(XmlReader reader, Dictionary`2<string, string> gdValues);
    internal static void ParsePath2D(XmlReader reader, ShapeCommon shape);
    private static void Parse2DElements(XmlReader reader, Path2D path);
    private static void ParsePath2DPoint(XmlReader reader, List`1<string> pathElements);
    private ShapeBase ParseShapeBaseProperties(XmlReader picReader, ShapeBase shapeBase, MemoryStream drawingStream);
    private void ParsePictureHorizontalPosition(XmlReader reader, ShapeBase shapeBase);
    private void ParsePictureVerticalPosition(XmlReader reader, ShapeBase shape);
    private void ParseWrappingType(XmlReader reader, WrapFormat wrapFormat);
    private void ParseWrapPolygon(XmlReader reader, IEntity entity);
    private ParagraphItem ParseChart(XmlReader picReader, ParagraphItemCollection paraItems, MemoryStream drawingStream);
    private void ParseChartRelations(Stream stream, Dictionary`2<string, DictionaryEntry> relations);
    private void ParseGraphicData(XmlReader reader, WChart chart, MemoryStream drawingStream);
    private bool IsExcelSheet(string relation);
    private string GetExtension(string path);
    private void ParseChartWorkbookThemes(WorkbookImpl workBook);
    private void SetCategortyRange(string categoryRange, WorksheetImpl chartSheet, ChartImpl chart);
    private void ParseGraphicData(XmlReader reader, Shape shape);
    private void ParseGraphicData(XmlReader reader, GroupShape shape);
    private PresetMaterialType ParsePresetMaterialType(string value);
    private void ParseGraphicFrame(MemoryStream graphicStream, GroupShape groupShape, ChildGroupShape childGroupShape);
    private void ParseGraphicFrameNonVisualProperties(XmlReader reader, ChildShape childShape);
    private void Parse2DTransform(XmlReader reader, ChildShape childShape);
    private void ParseExtent(XmlReader reader, ChildShape childShape);
    private void ParseOffset(XmlReader reader, ChildShape childShape);
    private void ParseNestedGroup(XmlReader reader, ChildGroupShape shape);
    private long GenerateShapeID();
    private void ParseGroupShapeProperties(XmlReader reader, ChildGroupShape shape);
    private void ParseGroupShapeProperties(XmlReader reader, GroupShape shape);
    private void ParseEffectList(XmlReader reader, GroupShape shape, string localName);
    private void ParseEffectList(XmlReader reader, ChildShape shape, string localName);
    private void ParseEffectList(XmlReader reader, Shape shape, string localName);
    private void ParseTextOutLine(XmlReader reader, LineFormat lineFormat);
    private void ParseTextOutLineProperties(XmlReader reader, LineFormat lineFormat);
    private void ParseTextFill(XmlReader reader, string localName, FillFormat fillFormat);
    private void ParseBodyProperties(MemoryStream stream, Shape shape);
    private void ParseShapeTextValues(XmlReader reader, Shape shape);
    private void ParseStyleItems(MemoryStream stream, Shape shape);
    private void ParseStyleItems(MemoryStream stream, ChildShape shape);
    private void ParseShapeAdjustValues(XmlReader reader, Dictionary`2<string, string> shapeAdjustValues);
    private void ParseShapeAdjustValues(XmlReader reader, ChildShape shape);
    private void ParseBlipFill(XmlReader reader, FillFormat fillFormat);
    private void ParseBlipImage(XmlReader reader, BlipFormat blipFormat, WPicture picture);
    private float GetBlipImageValue(string attrValue);
    private Color ParseDuotoneColor(XmlReader reader, string parentElement, UInt32& opacity, BlipFormat blipFormat);
    private void ParseBlipExtensionList(XmlReader reader, BlipFormat blipFormat, WPicture picture);
    private void ParseImageProperties(XmlReader reader, BlipFormat blipFormat, WPicture picture);
    private void ReadSvgData(XmlReader reader, WPicture picture);
    private void ParseImageLayer(XmlReader reader, BlipFormat blipFormat);
    private void ParseImageEffect(XmlReader reader, BlipFormat blipFormat);
    private void ParseImageEffectItem(XmlReader reader, ImageEffect imageEffect);
    private float GetImageEffectValue(string value);
    private void ParseBackgroundRemoval(XmlReader reader, ImageEffect imageEffect);
    private void ParseColorChange(XmlReader reader, BlipFormat blipFormat);
    private bool ParseFillRectangle(XmlReader reader, FillFormat fillFormat);
    private TextureAlignment GetTextureAlignment(string textureAlign);
    private PatternType GetPatternType(string value);
    private TextDirection GetTextDirection(string value, bool isToApplyFarEast);
    private void ParseLineFormat(XmlReader reader, Shape shape);
    private void ParseLineFormat(XmlReader reader, ChildShape shape);
    private LineStyle GetShapeOutLineStyle(string value);
    private bool ParseImageHyperlink(XmlReader reader, ParagraphItemCollection paraItems);
    private XmlParagraphItem ParseXmlParaItem(Stream XmlParaItemStream);
    private bool ParseImageRelation(GroupShape shape, string id);
    private bool ParseImageRelation(ChildShape shape, string id);
    private bool ParseImageRelation(ParagraphItem paraItem, string id);
    private List`1<string> FindRelationshipIds(Stream XmlParaItemStream);
    private void FindZIndex(Stream XmlParaItemStream, XmlParagraphItem xmlParaItem);
    private void ParseShapeRelationId(XmlParagraphItem xmlItem, List`1<string> relationIds);
    private ParagraphItem ParsePicture(XmlReader reader, WPicture picture);
    private void ParsePictureProperties(XmlReader reader, WPicture picture);
    private void ParseGraphicData(XmlReader reader, WPicture picture);
    private void ParseLockAspectRatio(XmlReader reader, WPicture picture);
    private void ParsePictureData(XmlReader reader, WPicture picture);
    private void ParseGroupShapePictureData(XmlReader reader, WPicture picture);
    private void ParsePictureBlipFill(XmlReader reader, WPicture picture);
    private void ParseVisualShapeProps(XmlReader reader, WPicture picture);
    private void ParseGroupShapeVisualShapeProps(XmlReader reader, WPicture picture);
    private float GetPictureBorderWidth(string value, string pictureType);
    private void ProcessEffectExtent(XmlReader picReader, ShapeBase shapeBase);
    private LineCap GetLineCapStyle(string lineCap);
    private void ParseLineProps(XmlReader reader, InlineShapeObject shape);
    private void ParseLineProps(XmlReader reader, Shape shape);
    private void ParseLineProps(XmlReader reader, ChildShape shape);
    private void ParseTailEnd(XmlReader reader, LineFormat lineFormat);
    private void ParseHeadEnd(XmlReader reader, LineFormat lineFormat);
    private void ParsePatternFill(XmlReader reader, LineFormat lineFormat);
    private ArrowheadStyle GetLineEnd(string lineEnd);
    private LineEndWidth GetLineEndWidth(string lineEndWidth);
    private LineEndLength GetLineEndLength(string lineEndLength);
    private short GetLanguageID(string value);
    private FlipOrientation GetFlipOrientation(string flip);
    private FlipOrientation GetChildShapeFlipOrientation(string flip);
    private GradientShadeType GetGradientShadeType(string shade);
    private void ParseGradientFill(XmlReader reader, GradientFill gradientFill);
    private void ParseTileRectangle(XmlReader reader, GradientFill gradientFill);
    private void ParseLinearGradient(XmlReader reader, GradientFill gradientFill);
    private void ParseGradientStop(XmlReader reader, GradientFill gradientFill);
    private void ParsePathGradient(XmlReader reader, PathGradient pathGradient, string localName);
    private Color ParseColor(XmlReader reader, string parentElement, UInt32& opacity, string localName, bool isAlreadyChecked);
    private Color ParseColorValues(XmlReader reader, string parentElement, UInt32& opacity, string localName, Color color);
    private Color GetSystemColor(XmlReader reader);
    private Color GetSchemeColor(XmlReader reader);
    private void ParseColorTransform(XmlReader reader, string parentElement, Color& themeColor, UInt32& opacity);
    private bool ParseColorTransform(string localName, string value, Color& themeColor);
    private double GetPercentage(string value);
    private void ParseWrappingType(XmlReader reader, WPicture picture);
    private void ParsePictureHorizontalPosition(XmlReader reader, WPicture picture);
    private ShapeHorizontalAlignment GetHorizAlign(string align);
    private HorizontalOrigin GetHorizOrigin(string origin);
    private void ParsePictureVerticalPosition(XmlReader reader, WPicture picture);
    private ShapeVerticalAlignment GetVertAlign(string align);
    private VerticalAlignment GetTextVertAlign(string align);
    private HeightOrigin GetHeightOrigin(string rel);
    private WidthOrigin GetWidthOrigin(string rel);
    private VerticalOrigin GetVertOrigin(string origin);
    private GraphicDataContentType CheckPicture(XmlReader reader);
    private bool IsValid2016Chart(Stream drawingStream);
    private void ParseBreak(XmlReader reader, ParagraphItemCollection paraItems, IOfficeMathRunElement mathRunElement);
    private ParagraphItem ParseSymbol(XmlReader reader, ParagraphItemCollection paraItems);
    private void UpdateTextRange(WTextRange textRange, string text, WCharacterFormat runFormat);
    private WTextRange ParseText(XmlReader reader, ParagraphItemCollection paraItems, bool isNestedInRunProperties, bool isMathRunText);
    private WTable ParseNestedTable(XmlReader reader, Entity ownerTextBody, string localName, bool isAlreadyCheck);
    private void MoveParaItemsToNestedTable(WTable table, ParagraphItemCollection paraItems, WTextRange txtRange);
    private void ParseNestedBody(XmlReader reader, bool isFirstNestedBody);
    private string GetNestedText(XmlReader reader, Boolean& hasAnotherBodyInText, ParagraphItemCollection paraItems, bool isNestedInRunProperties, bool isAlreadyCheck, String& m_localName, bool preservespace, bool isMathRunText);
    private string GetNestedTextValue(XmlReader reader, Boolean& hasAnotherBodyInText, ParagraphItemCollection paraItems, bool isNestedInRunProperties, String& m_localName, bool preservespace, bool isMathRunText);
    private void SkipCurrentElement(XmlReader reader, string element);
    private string RotateText(string text);
    private string ModifyText(string text);
    private void ParseDocumentBackground(XmlReader reader);
    private void ParseBackgroundPicture(XmlReader reader, Background background);
    private AlternateChunk AddAlternateChunk(IEntity entity);
    private void ParseAlternateChunk(XmlReader reader, AlternateChunk altChunk);
    private IBlockContentControl AddStructureDocumentTagBlock(IEntity entity);
    private void ParseStructureDocumentTagInline(XmlReader reader, InlineContentControl sdTagInline);
    private void ParseSDTContentInline(XmlReader reader, InlineContentControl sdtInlineContent);
    private void ParseStructureDocumentTagBlock(XmlReader reader, BlockContentControl sdTagBlock);
    private void MapPictureContentControl(BlockContentControl sdTagBlock);
    private void ParseSDTEndCharacterFormat(XmlReader reader, WCharacterFormat charFormat);
    private void ParseSDTContent(XmlReader reader, BlockContentControl sdTagBlock);
    private void ParseSDTProperties(XmlReader reader, ContentControlProperties properties);
    private void ParseSDTPlaceHolder(XmlReader reader, ContentControlProperties properties);
    private ContentControlAppearance GetAppearance(string appearance);
    private void ParseDocPartList(XmlReader reader, DocPartList docPartList, ContentControlProperties controlProperties);
    private void ParseDocPartItem(XmlReader reader, DocPartItem docPartItem, ContentControlProperties controlProperties);
    private void ParseDocPartObj(XmlReader reader, DocPartObj docPartobj, ContentControlProperties controlProperties);
    private void parseSDTCheckBox(XmlReader reader, ContentControlProperties properties);
    private void ParseSDTDropDownList(XmlReader reader, ContentControlListItems dropDownList);
    private void ParseSDTComboBox(XmlReader reader, ContentControlListItems comboBox);
    private void ParseSDTDate(XmlReader reader, ContentControlProperties controlProperties);
    private CalendarType GetCalendarType(string type);
    private ContentControlDateStorageFormat GetDateStorageType(string type);
    private void ParseMathMlElement(XmlReader reader, ParagraphItemCollection paraItems);
    internal virtual IOfficeRunFormat ParseMathControlFormat(XmlReader reader, IOfficeMathFunctionBase mathFunction);
    internal virtual void ParseMathRun(XmlReader reader, IOfficeMathRunElement mathParaItem);
    private void ParseDocumentRelations(Stream stream);
    private void ParseFontTableRelations(Stream stream);
    private void ParseRelations(XmlReader relReader, Dictionary`2<string, DictionaryEntry> relations);
    private void ParseCustomProperties(XmlReader reader);
    private void ParseCustomProperty(XmlReader reader, CustomDocumentProperties customProperties);
    private string UpdateText(string text);
    private void ParseCoreProperties(XmlReader reader);
    private void ParseAppProperties(XmlReader reader);
    private int GetAppProperty(string attrValue);
    private void ParseWord2003DocumentProperties(XmlReader reader);
    private void ParseWord2003CustomDocumentproperties(XmlReader reader);
    private void ParseList(XmlReader reader, FormatBase format);
    private ListStyle FindListStyle(WParagraphStyle style);
    private void ParseListFormat(XmlReader reader, WListFormat listFormat, string localName);
    private void UpdateListStyleForInvalidNumId(string id, WListFormat listFormat);
    private void GetListFormatBaseStyleName(ListStyle listStyle, String& styleName);
    private void ParseNumberings(XmlReader reader);
    private void UpdateListStyleNames();
    private void UpdateLinkedListStyles();
    private void UpdateAbstractStyleName(string oldName, string newName);
    private ListStyle FindByStyleLink(string styleLinkName);
    private void ParseWord2003MLNumberings(XmlReader reader, Dictionary`2<long, string> nsidCollection, Dictionary`2<string, long> abstractNumCollection);
    private void ParseDocxNumberings(XmlReader reader, Dictionary`2<long, string> nsidCollection, Dictionary`2<string, long> abstractNumCollection);
    private void ParseListNum(XmlReader reader, Dictionary`2<long, string> nsidCollection, Dictionary`2<string, long> abstractNumCollection);
    private string GetAbstractNumID(Dictionary`2<long, string> nsidCollection, Dictionary`2<string, long> abstractNumCollection, string abstractNumId);
    private void ParseLevelOverride(XmlReader reader, string numId);
    private void ParseLevelOverride(XmlReader reader, OverrideLevelFormat levelFormat);
    private void ParseAbstractNum(XmlReader reader, Dictionary`2<long, string> nsidCollection, Dictionary`2<string, long> abstractNumCollection);
    private void ParseListStyle(XmlReader reader, ListStyle listStyle);
    private void ParseListLevel(XmlReader reader, WListLevel level);
    private void ParseLegacyProperties(XmlReader reader, WListLevel level);
    private FollowCharacterType GetFollowChar(string levelFollow);
    private ListNumberAlignment ParseLevelJc(string justification);
    private void ParseLevelText(WListLevel level, string levelText);
    private ListPatternType GetLevelNumberFormat(string pattern);
    private void UpdateListType(ListStyle listStyle);
    private void UpdateStyleName(ListStyle listStyle);
    private void ParsePictureBullet(XmlReader reader);
    private void ProcessPictureStyle(WPicture picture, string size);
    private float ParseSize(string partString);
    private string ParsePictureId(XmlReader reader);
    private string ParsePictureBulletStyle(XmlReader reader);
    private void ParseStyles(XmlReader reader);
    private void Parse2003XmlStyles(XmlReader reader);
    private void UpdateBaseStyles();
    private void UpdateListInStyles();
    private void UpdateLinkName(Dictionary`2<int, string> linkStyleNamesReferByCharacterStyle, List`1<int> paraLinkStyleIndex);
    private Dictionary`2<string, int> CountOccurrencesOfValue(List`1<string> list);
    private bool ParseStyle(XmlReader reader, Dictionary`2<int, string> linkStyleNamesReferByCharacterStyle, List`1<int> paraLinkStyleIndex);
    private void ParseStyleProperties(XmlReader reader, Style style, Dictionary`2<int, string> linkStyleNamesReferByCharacterStyle, List`1<int> paraLinkStyleIndex, String& styleNameId, string localName);
    private void AddStyleNameID(Style style, string styleName);
    private Style CreateStyle(string styleType);
    private void ParseLatentStyles(XmlReader reader);
    private void ParseDocDefaults(XmlReader reader);
    private WCharacterFormat GetCharacterFormat(Style style);
    private WParagraphFormat GetParagraphFormat(Style style);
    private void ParseConditionalFormattingStyleProperties(XmlReader reader, Style style);
    private ConditionalFormattingType GetConditionalFormattingCode(string styleType);
    private void ParseTableStyleTableProperties(XmlReader reader, TableStyleTableProperties props);
    private void ParseTableStyleRowProperties(XmlReader reader, TableStyleRowProperties props);
    private void ParseTableStyleCellProperties(XmlReader reader, TableStyleCellProperties props);
    private void ParseShading(XmlReader reader, TableStyleTableProperties props);
    private void ParseShading(XmlReader reader, TableStyleCellProperties props);
    private void ParseCharacterFormat(XmlReader reader, WCharacterFormat charFormat, ParagraphItemCollection paraItems);
    private void UpdateRevAuthorInformation(XmlReader reader, WCharacterFormat charFormat);
    private void UpdateRevAuthorInformation(RowFormat rowFormat, XmlReader reader, RevisionType revisionType);
    private float GetFloatValue(string value, string elementName);
    private float GetNumericValue(string value);
    private void ParseLigatures(XmlReader reader, WCharacterFormat charFormat);
    private void ParseNumberForm(XmlReader reader, WCharacterFormat charFormat);
    private void ParseNumberSpacing(XmlReader reader, WCharacterFormat charFormat);
    private void ParseStylisticSet(XmlReader reader, WCharacterFormat charFormat);
    private CFELayout ParseCFELayout(XmlReader reader);
    private StylisticSetType GetStylisticSet(string value);
    private void ParseChangeCharacterFormat(XmlReader reader, WCharacterFormat charFormat);
    private void ParseBorder(XmlReader reader, Border border);
    private BorderStyle GetBorderStyle(string boderStyle, Border border);
    private int GetBorderMultiplier(Border border);
    private void ParseRunShading(XmlReader reader, WCharacterFormat charFormat);
    private TextureStyle ParseTexture(string textureStyle);
    private TextureStyle Parse2003Texture(string textureStyle);
    private void ParseVertAlign(XmlReader reader, WCharacterFormat charFormat);
    private void ParseEmphasis(XmlReader reader, WCharacterFormat charFormat);
    private void ParseTextEffect(XmlReader reader, WCharacterFormat charFormat);
    private void ParseUnderline(XmlReader reader, WCharacterFormat charFormat);
    private void Parse2003Underline(XmlReader reader, WCharacterFormat charFormat);
    private void ParseFonts(XmlReader reader, WCharacterFormat charFormat);
    private static bool IsEnumDefined(String& value, string formattedValue);
    internal static bool IsEnumDefined(String& value);
    private static string FirstLetterToUpper(string str);
    private void ParseLanguage(XmlReader reader, WCharacterFormat charFormat);
    private void ParseHighlight(XmlReader reader, WCharacterFormat charFormat);
    private void ParseParagraphFormat(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseFrameProperties(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseFrameSize(XmlReader reader, WParagraphFormat paraFormat);
    private void ParseFrameAnchor(XmlReader reader, WParagraphFormat paraFormat);
    private void ParseFramePos(XmlReader reader, WParagraphFormat paraFormat);
    private void SetFramePositions(string position, bool isXValue, WParagraphFormat paraFormat);
    private void ParseTabs(XmlReader reader, WParagraphFormat paragraphFormat);
    private TabJustification GetTabAlign(string align);
    private TabLeader GetTabLeader(string leader);
    private void ParseChangeParagraphFormat(XmlReader reader, WParagraphFormat paragraphFormat);
    private void CheckTrackChange(ParagraphItem item);
    private void CreateMoveRangeRevision(WParagraph para, RevisionType revisionType);
    private void UpdateInsDelRevision(XmlReader reader, ParagraphItemCollection paraItems, RevisionType revisionType, IOfficeMathRunElement mathParaItem, bool isParsingRun);
    private void ParseBorders(XmlReader reader, IEntity ent, Borders borders);
    private void ParseBorder(XmlReader reader, Borders borders);
    private void ParseBorderValue(XmlReader reader, Borders borders);
    private void ParseSpacing(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseLineSpacing(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseIndentation(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseParagraph2003Justification(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseParagraphJustification(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseParagraphTextAlignment(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseParagraphTextboxTightWrap(XmlReader reader, WParagraphFormat paragraphFormat);
    private void ParseShading(XmlReader reader, WParagraphFormat paragraphFormat);
    private Color GetThemeFillColor(string value);
    private void ParseSectionProperties(XmlReader reader, IEntity entity);
    private void ParseChangeSectionProperties(XmlReader reader, WSection section);
    private void ParseHeaderFooter(XmlReader reader);
    private void ParseHeaderFooter(WHeadersFooters headerfooter, XmlReader reader, string type, bool isHeader);
    private void ParseHeaderFooter(WHeadersFooters headerfooter, Part part, string type, bool isHeader);
    private void ParseFootnoteProp(XmlReader reader, bool isFootnote, WSection section);
    private void ParseFootnoteNumberStart(XmlReader reader, bool isFootnote, WSection section);
    private void Parse2003FootnoteNumFormat(XmlReader reader, bool isFootnote, WSection section);
    private void ParseFootnoteNumFormat(XmlReader reader, bool isFootnote, WSection section);
    private void ParseFootnoteNumRestart(XmlReader reader, bool isFootnote, WSection section);
    private void ParseFootnoteProp(XmlReader reader, bool isFootnote);
    private void ParseFootnoteNumberStart(XmlReader reader, bool isFootnote);
    private void Parse2003FootnoteNumFormat(XmlReader reader, bool isFootnote);
    private void ParseFootnoteNumFormat(XmlReader reader, bool isFootnote);
    private void ParseFootnoteNumRestart(XmlReader reader, bool isFootnote);
    private void Parse2003PageNumberStyle(WSection section, string numberType);
    private void Parse2003ChapterNumberSeparator(WSection section, string chapterNumberSeprator);
    private void ParseChapterNumberSeparator(WSection section, string chapterNumberSeprator);
    private void ParsePageNumberStyle(WSection section, string numberType);
    private void ParsePageNumberType(XmlReader reader, WSection section);
    private void Parse2003TextDirection(XmlReader reader, IEntity ent);
    private void ParseTextDirection(XmlReader reader, IEntity ent);
    private void ParseLineNumbering(XmlReader reader, WSection section);
    private void ParseVertAlign(XmlReader reader, WSection section);
    private void ParseGrid(XmlReader reader, WSection section);
    private void ParsePageBorders(XmlReader reader, WSection section);
    private void ParseColumns(XmlReader reader, WSection section);
    private void ParseEqualColumns(XmlReader reader, WSection section, int num);
    private void ParseColumn(XmlReader reader, WSection section, int num);
    private void ParsePageMargins(XmlReader reader, WSection section);
    private float GetMarginValue(XmlReader reader, string attributeName);
    private void ParsePageSize(XmlReader reader, WSection section);
    private float GetPageSize(string value);
    private void ParseSectionBreakType(WSection section, string sectionBreakType);
    private void Parse2003SectionBreakType(WSection section, string sectionBreakType);
    private void ParseSettingsRelations(Stream stream);
    private void InitializeCompactSettings();
    private void ParseSettings(Stream stream);
    private void ParseMailMergeSettings(XmlReader reader);
    private void ParseMailMergeSettingsCheckErrors(XmlReader reader);
    private void ParseMailMergeSettingsDestination(XmlReader reader);
    private void ParseMailMergeSettingsDataType(XmlReader reader);
    private void ParseMailMergeSettingsMainDocumentType(XmlReader reader);
    private void ParseWebSettings(Stream stream);
    private void ParseWord2003DocPr(XmlReader reader);
    private bool ParseCompatibiltyOption(XmlReader reader);
    private void ParseCompatNode(XmlReader reader);
    private void ParseWord2003CompatNode(XmlReader reader);
    private void ParseCompatSettingNode(XmlReader reader);
    private void ParseVariables(XmlReader reader);
    private string ParseString(string text);
    private void ParseProtectType(XmlReader reader);
    private void ParseViewType(XmlReader reader);
    private void AddItem(ParagraphItem item, ParagraphItemCollection paragraphItems);
    private void AddToParagraph(ParagraphItem item, ParagraphItemCollection paragraphItems);
    private void AddOleObject(WOleObject oleObject, ParagraphItemCollection paragraphItems);
    private string GetImageName(string imageId, bool isHeaderFooter, bool isPicBullet, Boolean& isImageRelation);
    private void LoadImage(WPicture picture, string id, bool isHeaderFooter, bool isPicBullet);
    private Byte[] GetImageBytes(string imageName);
    private Byte[] GetBytesFrom(Part part);
    private string GetPartName(String& fileName);
    private Part FindPart(string partContainer, string partName);
    private Dictionary`2<string, DictionaryEntry> GetFileRelations(string name);
    private Dictionary`2<string, DictionaryEntry> GetDiagramFileRelations(string name);
    private float ParseFloatVal(string value);
    private bool GetBooleanValue(XmlReader reader);
    private CompatibilityMode GetCompatibilityMode(XmlReader reader);
    private bool GetBooleanValue(XmlReader reader, string nameSpace);
    private string GetReaderElementValue(XmlReader reader);
    private Color GetColorValue(string color);
    private Color GetGradientColor(string color);
    private Color GetHexColor(string color);
    private Color GetHtmlColor(string color);
    private Color GetHighLightColor(string color);
    private float GetFloatValue(XmlReader reader, string attrName, string attrNS);
    private MemoryStream ReadSingleNodeIntoStream(XmlReader reader);
    private void SkipWhitespaces(XmlReader reader);
    internal void Close();
    internal bool StartsWithExt(string text, string value);
}
internal enum Syncfusion.DocIO.DLS.Convertors.FieldGroupType : Enum {
    public int value__;
    public static FieldGroupType FieldInstruction;
    public static FieldGroupType FieldResult;
    public static FieldGroupType FieldInvalid;
}
internal class Syncfusion.DocIO.DLS.Convertors.FormFieldData : object {
    private string m_name;
    private string m_helpText;
    private string m_statusHelpText;
    private FormFieldType m_formFieldType;
    private bool m_bCalculateOnExit;
    private string m_marcoOnStart;
    private string m_marcoOnEnd;
    private bool m_enabled;
    private int m_checkboxSize;
    private CheckBoxSizeType m_checkboxSizeType;
    private string m_defaultText;
    private string m_stringFormat;
    private int m_maxLength;
    internal WDropDownCollection DropDownItems;
    private bool m_bIsListBox;
    internal int Ffres;
    internal int Ffdefres;
    internal bool m_bIsChecked;
    internal bool IsChecked { get; internal set; }
    internal bool IsListBox { get; internal set; }
    internal int MaxLength { get; internal set; }
    internal string StringFormat { get; internal set; }
    internal string DefaultText { get; internal set; }
    internal CheckBoxSizeType CheckboxSizeType { get; internal set; }
    internal int CheckboxSize { get; internal set; }
    internal bool Enabled { get; internal set; }
    internal string MacroOnExit { get; internal set; }
    internal string MarcoOnStart { get; internal set; }
    internal string Name { get; internal set; }
    internal string HelpText { get; internal set; }
    internal bool CalculateOnExit { get; internal set; }
    internal string StatusHelpText { get; internal set; }
    internal FormFieldType FormFieldType { get; internal set; }
    internal bool get_IsChecked();
    internal void set_IsChecked(bool value);
    internal bool get_IsListBox();
    internal void set_IsListBox(bool value);
    internal int get_MaxLength();
    internal void set_MaxLength(int value);
    internal string get_StringFormat();
    internal void set_StringFormat(string value);
    internal string get_DefaultText();
    internal void set_DefaultText(string value);
    internal CheckBoxSizeType get_CheckboxSizeType();
    internal void set_CheckboxSizeType(CheckBoxSizeType value);
    internal int get_CheckboxSize();
    internal void set_CheckboxSize(int value);
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal string get_MacroOnExit();
    internal void set_MacroOnExit(string value);
    internal string get_MarcoOnStart();
    internal void set_MarcoOnStart(string value);
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_HelpText();
    internal void set_HelpText(string value);
    internal bool get_CalculateOnExit();
    internal void set_CalculateOnExit(bool value);
    internal string get_StatusHelpText();
    internal void set_StatusHelpText(string value);
    internal FormFieldType get_FormFieldType();
    internal void set_FormFieldType(FormFieldType value);
}
internal class Syncfusion.DocIO.DLS.Convertors.Groups : object {
    private List`1<Groups> childElements;
    internal List`1<Groups> ChildElements { get; internal set; }
    internal List`1<Groups> get_ChildElements();
    internal void set_ChildElements(List`1<Groups> value);
}
internal class Syncfusion.DocIO.DLS.Convertors.HTMLImporting.HtmlFontWeight : ValueType {
    private int _weight;
    internal HtmlFontWeight(int weight);
}
internal class Syncfusion.DocIO.DLS.Convertors.HTMLImporting.HtmlFontWeights : object {
    internal static HtmlFontWeight Thin { get; }
    internal static HtmlFontWeight ExtraLight { get; }
    internal static HtmlFontWeight Light { get; }
    internal static HtmlFontWeight Normal { get; }
    internal static HtmlFontWeight Medium { get; }
    internal static HtmlFontWeight SemiBold { get; }
    internal static HtmlFontWeight Bold { get; }
    internal static HtmlFontWeight ExtraBold { get; }
    internal static HtmlFontWeight Black { get; }
    internal static HtmlFontWeight get_Thin();
    internal static HtmlFontWeight get_ExtraLight();
    internal static HtmlFontWeight get_Light();
    internal static HtmlFontWeight get_Normal();
    internal static HtmlFontWeight get_Medium();
    internal static HtmlFontWeight get_SemiBold();
    internal static HtmlFontWeight get_Bold();
    internal static HtmlFontWeight get_ExtraBold();
    internal static HtmlFontWeight get_Black();
}
internal class Syncfusion.DocIO.DLS.Convertors.HTMLImporting.HtmlThickness : ValueType {
    private double _Left;
    private double _Top;
    private double _Right;
    private double _Bottom;
    internal double Left { get; internal set; }
    internal double Top { get; internal set; }
    internal double Right { get; internal set; }
    internal double Bottom { get; internal set; }
    internal HtmlThickness(double length);
    internal HtmlThickness(double left, double top, double right, double bottom);
    internal double get_Left();
    internal void set_Left(double value);
    internal double get_Top();
    internal void set_Top(double value);
    internal double get_Right();
    internal void set_Right(double value);
    internal double get_Bottom();
    internal void set_Bottom(double value);
}
internal class Syncfusion.DocIO.DLS.Convertors.PrepareTableInfo : ValueType {
    internal bool InTable;
    internal int Level;
    internal int PrevLevel;
    internal PrepareTableState State;
    internal PrepareTableInfo(bool inTable, int currLevel, int prevLevel);
}
internal class Syncfusion.DocIO.DLS.Convertors.RtfColor : object {
    private int m_redN;
    private int m_greenN;
    private int m_blueN;
    internal int RedN { get; internal set; }
    internal int GreenN { get; internal set; }
    internal int BlueN { get; internal set; }
    internal int get_RedN();
    internal void set_RedN(int value);
    internal int get_GreenN();
    internal void set_GreenN(int value);
    internal int get_BlueN();
    internal void set_BlueN(int value);
}
internal class Syncfusion.DocIO.DLS.Convertors.RtfFont : object {
    private int m_fontNumber;
    private string m_fontID;
    private string m_fontName;
    private short m_fontCharSet;
    private string m_alternateFontName;
    internal int FontNumber { get; internal set; }
    internal string AlternateFontName { get; internal set; }
    internal string FontID { get; internal set; }
    internal string FontName { get; internal set; }
    internal short FontCharSet { get; internal set; }
    internal int get_FontNumber();
    internal void set_FontNumber(int value);
    internal string get_AlternateFontName();
    internal void set_AlternateFontName(string value);
    internal string get_FontID();
    internal void set_FontID(string value);
    internal string get_FontName();
    internal void set_FontName(string value);
    internal short get_FontCharSet();
    internal void set_FontCharSet(short value);
    internal RtfFont Clone();
}
public class Syncfusion.DocIO.DLS.Convertors.RtfLexer : object {
    private static char c_groupStart;
    private static char c_groupEnd;
    private static char c_controlStart;
    private static char c_space;
    private static char c_whiteSpace;
    private static char c_newLine;
    private static char c_semiColon;
    private static char c_doubleQuotes;
    private static char c_backQuote;
    private static char c_openParenthesis;
    private static char c_closeParenthesis;
    private static char c_ambersion;
    private static char c_percentage;
    private static char c_dollarSign;
    private static char c_hash;
    private static char c_atsymbol;
    private static char c_exclamation;
    private static char c_plus;
    private static char c_caret;
    private static char c_openBracket;
    private static char c_closeBracket;
    private static char c_forwardSlash;
    private static char c_questionmark;
    private static char c_greaterthan;
    private static char c_lesserthan;
    private static char c_comma;
    private static char c_verticalBar;
    private static char c_colon;
    private RtfTableType m_currRtfTableType;
    private RtfReader m_rtfReader;
    private string m_token;
    internal char m_prevChar;
    private bool m_bIsImageBytes;
    internal bool m_bIsReadNewChar;
    private RtfTokenType m_rtfTokenType;
    private char m_newChar;
    private List`1<string> m_commentStartRange;
    private int m_commentCount;
    private string m_prevToken;
    private string m_commStartRangeTokenKey;
    internal Char[] m_delimeters;
    public bool IsImageBytes { get; public set; }
    public List`1<string> CommentRangeStartId { get; public set; }
    public RtfTableType CurrRtfTableType { get; public set; }
    public RtfTokenType CurrRtfTokenType { get; public set; }
    public RtfLexer(RtfReader rtfReader);
    public bool get_IsImageBytes();
    public void set_IsImageBytes(bool value);
    public List`1<string> get_CommentRangeStartId();
    public void set_CommentRangeStartId(List`1<string> value);
    public RtfTableType get_CurrRtfTableType();
    public void set_CurrRtfTableType(RtfTableType value);
    public RtfTokenType get_CurrRtfTokenType();
    public void set_CurrRtfTokenType(RtfTokenType value);
    public string ReadNextToken(string prevTokenKey);
    internal string ReadNextToken(string prevTokenKey, bool isLevelText);
    private string ReadControlWord(string token, string prevTokenKey, bool isLevelText);
    private string GenerateCommentInfo(string prevToken, string token);
    private string ReadDocumentElement(string token, string prevTokenKey);
    public void Close();
    internal bool StartsWithExt(string text, string value);
}
internal class Syncfusion.DocIO.DLS.Convertors.RtfParser : object {
    private static string c_groupStart;
    private static string c_groupEnd;
    private static string c_controlStart;
    private static string c_space;
    private static string c_carriegeReturn;
    private static string c_newLine;
    private static string c_semiColon;
    private RtfLexer m_lexer;
    private RtfReader m_rtfReader;
    private string m_token;
    private string m_previousToken;
    private string m_previousTokenKey;
    private string m_previousTokenValue;
    private string m_previousControlString;
    private bool m_bIsContinousList;
    private bool m_bIsPreviousList;
    private RtfTableType m_currentTableType;
    private Dictionary`2<string, RtfFont> m_fontTable;
    private Dictionary`2<int, RtfColor> m_colorTable;
    private Dictionary`2<int, CellFormat> m_cellFormatTable;
    private IWParagraph m_currParagraph;
    private IWSection m_currSection;
    private WordDocument m_document;
    private TextFormat m_currTextFormat;
    private ShapeFormat m_currShapeFormat;
    private PictureFormat m_picFormat;
    private Stack`1<string> m_stack;
    private Stack`1<string> m_pictureOrShapeStack;
    private Stack`1<string> m_groupShapeStack;
    private Stack`1<string> m_destStack;
    private Stack`1<string> m_headerFooterStack;
    private Stack`1<WCommentMark> commentstack;
    private Stack`1<Dictionary`2<int, CellFormat>> m_CellFormatStack;
    private Stack`1<Dictionary`2<int, CellFormat>> m_prevCellFormatStack;
    private RtfFont m_rtfFont;
    private RtfTokenType m_tokenType;
    private RtfTokenType m_prevTokenType;
    private RtfColor m_rtfColorTable;
    private bool m_bIsBorderTop;
    private bool m_bIsBorderBottom;
    private bool m_bIsBorderLeft;
    private bool m_bIsBorderRight;
    private bool m_bIsBorderDiagonalDown;
    private bool m_bIsBorderDiagonalUp;
    private bool m_bIsPictureOrShape;
    private bool m_bIsShape;
    private bool m_bIsHorizontalBorder;
    private bool m_bIsVerticalBorder;
    private bool m_bIsFallBackImage;
    private bool m_bIsShapeResult;
    private int m_bShapeResultStackCount;
    private IWPicture m_currPicture;
    private Shape m_currShape;
    private WTextBox m_currTextBox;
    private IWTextRange tr;
    private bool m_bIsDocumentInfo;
    private bool m_bIsShapePicture;
    private SecionFormat m_secFormat;
    private ListStyle m_currListStyle;
    private ListOverrideStyle m_currListOverrideStyle;
    private WListLevel m_currListLevel;
    private int m_currLevelIndex;
    private Dictionary`2<string, ListStyle> m_listTable;
    private Dictionary`2<string, string> m_listOverrideTable;
    private Dictionary`2<string, IWParagraphStyle> m_styleTable;
    private Dictionary`2<string, WCharacterStyle> m_charStyleTable;
    private string m_currStyleName;
    private bool m_bIsListText;
    private bool m_bIsList;
    private bool isPnStartUpdate;
    private IWTable m_currTable;
    private WTableRow m_currRow;
    private WTableCell m_currCell;
    private int m_currCellFormatIndex;
    private bool m_bIsRow;
    private CellFormat m_currCellFormat;
    private RowFormat m_currRowFormat;
    private bool m_bIsGroupShape;
    private bool m_bIsBookmarkStart;
    private bool m_bIsBookmarkEnd;
    private bool m_bIsHeader;
    private bool m_bIsFooter;
    private bool m_bIsLevelText;
    private WTextBody m_textBody;
    private int m_previousLevel;
    private int m_currentLevel;
    private bool m_bIsCustomProperties;
    private string m_currPropertyName;
    private object m_currPropertyValue;
    private PropertyType m_currPropertyType;
    private bool m_bInTable;
    private Stack`1<WTextBody> m_nestedTextBody;
    private Stack`1<WTable> m_nestedTable;
    private bool m_bCellFinished;
    private Column m_currColumn;
    private IWParagraphStyle m_currStyle;
    private WCharacterStyle m_currCharStyle;
    private string m_currStyleID;
    private int m_secCount;
    private Dictionary`2<int, TabFormat> m_tabCollection;
    private TabFormat m_currTabFormat;
    private int m_tabCount;
    private bool m_bIsLinespacingRule;
    private bool m_bIsAccentChar;
    private int m_currCellBoundary;
    private int m_currRowLeftIndent;
    private Stack`1<RowFormat> m_currRowFormatStack;
    private Stack`1<RowFormat> m_prevRowFormatStack;
    private Stack`1<string> m_backgroundCollectionStack;
    private bool m_bIsBackgroundCollection;
    private bool m_bIsDefaultSectionFormat;
    private SecionFormat m_defaultSectionFormat;
    private string m_styleName;
    private Stack`1<string> m_listLevelStack;
    private bool m_bIsListLevel;
    private IWParagraph m_prevParagraph;
    private TextFormat m_prevTextFormat;
    private WParagraphFormat m_listLevelParaFormat;
    private WCharacterFormat m_listLevelCharFormat;
    private int m_pnLevelNumber;
    private FormFieldData m_currentFormField;
    private Stack`1<int> m_unicodeCountStack;
    private int m_unicodeCount;
    private int m_currColorIndex;
    private Stack`1<Dictionary`2<int, TabFormat>> m_tabFormatStack;
    private Stack`1<TextFormat> m_textFormatStack;
    private Stack`1<WParagraphFormat> m_paragraphFormatStack;
    private WParagraphFormat m_currParagraphFormat;
    private Stack`1<string> m_rtfCollectionStack;
    private Stack`1<string> m_shapeInstructionStack;
    private Stack`1<string> m_shapeTextStack;
    private Stack`1<WTextBody> m_shapeTextBody;
    private Stack`1<Dictionary`2<string, object>> m_ownerShapeTextbodyStack;
    private Stack`1<WParagraph> m_shapeParagraph;
    private Stack`1<Dictionary`2<string, bool>> m_shapeFlagStack;
    private Stack`1<Dictionary`2<string, object>> m_shapeTextbodyStack;
    private List`1<TempShapeProperty> m_drawingFields;
    private bool m_bIsShapeInstruction;
    private bool m_bIsShapeText;
    private bool m_bIsShapePictureAdded;
    private Stack`1<string> m_objectStack;
    private bool m_bIsObject;
    private bool m_bIsStandardPictureSizeNeedToBePreserved;
    private string m_drawingFieldName;
    private string m_drawingFieldValue;
    private Stack`1<int> m_fieldResultGroupStack;
    private Stack`1<int> m_fieldInstructionGroupStack;
    private Stack`1<int> m_fieldGroupStack;
    private Stack`1<WField> m_fieldCollectionStack;
    private Stack`1<string> m_formFieldDataStack;
    private string m_currentFieldGroupData;
    private Stack`1<FieldGroupType> m_fieldGroupTypeStack;
    private string m_defaultCodePage;
    private int m_defaultFontIndex;
    private bool m_bIsRowBorderTop;
    private bool m_bIsRowBorderBottom;
    private bool m_bIsRowBorderLeft;
    private bool m_bIsRowBorderRight;
    private float m_leftcellspace;
    private float m_rightcellspace;
    private float m_bottomcellspace;
    private float m_topcellspace;
    private bool m_bIsWord97StylePadding;
    private bool isWrapPolygon;
    private int m_currenttrleft;
    private Dictionary`2<string, WComment> m_comments;
    private List`1<string> m_commRangeStartId;
    private WComment m_currComment;
    private string m_commAtnText;
    private bool m_isCommentRangeStart;
    private bool m_isCommentReference;
    private bool m_isCommentOwnerParaIsCell;
    private Stack`1<string> m_commentGroupCollection;
    private bool m_isLevelTextLengthRead;
    private bool m_isFirstPlaceHolderRead;
    private bool m_isPibName;
    private bool m_isPibFlags;
    private string m_href;
    private string m_externalLink;
    private bool m_isImageHyperlink;
    private string m_linkType;
    private string m_uniqueStyleID;
    private Tokens token;
    private Groups group;
    private List`1<Groups> groupOrder;
    private bool isNested;
    private bool isSpecialCharacter;
    private bool isPlainTagPresent;
    private bool isPardTagpresent;
    private bool m_isDistFromLeft;
    private string m_DistFromLeftVal;
    private RtfFont m_previousRtfFont;
    private int m_listoverrideLevelCount;
    private bool m_isOverrrideListLevel;
    private string m_currListId;
    private bool istblindtypeDefined;
    private float tblindValue;
    private bool istrpaddltypeDefined;
    private float trpaddlValue;
    private WParagraph inCompleteParagraph;
    private string m_currLFOStyleName;
    private byte m_bFlags;
    private bool IsStyleSheet { get; private set; }
    private bool m_isPnNextList { get; private set; }
    private bool IsSectionBreak { get; private set; }
    internal string DefaultCodePage { get; internal set; }
    internal int DefaultFontIndex { get; internal set; }
    public bool IsDestinationControlWord { get; }
    public bool IsFormFieldGroup { get; }
    public bool IsFieldGroup { get; }
    public int CurrentLevel { get; }
    public int PreviousLevel { get; }
    public WTextBody CurrentTextBody { get; }
    protected IWParagraph CurrentPara { get; protected set; }
    protected Column CurrColumn { get; protected set; }
    protected IWSection CurrentSection { get; }
    protected ListStyle CurrListStyle { get; protected set; }
    protected ListOverrideStyle CurrListOverrideStyle { get; protected set; }
    private WComment CurrentComment { get; private set; }
    private List`1<string> CommentStartIdList { get; }
    private string CommentLinkText { get; private set; }
    private Dictionary`2<string, WComment> Comments { get; }
    protected WListLevel CurrListLevel { get; protected set; }
    private bool IsLevelTextLengthRead { get; private set; }
    public RtfFont CurrRtfFont { get; public set; }
    public RtfColor CurrColorTable { get; public set; }
    public IWTable CurrTable { get; public set; }
    public WTableRow CurrRow { get; public set; }
    public WTableCell CurrCell { get; public set; }
    public CellFormat CurrCellFormat { get; public set; }
    public RowFormat CurrRowFormat { get; public set; }
    public TabFormat CurrTabFormat { get; public set; }
    public RtfParser(WordDocument document, Stream stream);
    private bool get_IsStyleSheet();
    private void set_IsStyleSheet(bool value);
    private bool get_m_isPnNextList();
    private void set_m_isPnNextList(bool value);
    private bool get_IsSectionBreak();
    private void set_IsSectionBreak(bool value);
    internal string get_DefaultCodePage();
    internal void set_DefaultCodePage(string value);
    internal int get_DefaultFontIndex();
    internal void set_DefaultFontIndex(int value);
    public bool get_IsDestinationControlWord();
    public bool get_IsFormFieldGroup();
    public bool get_IsFieldGroup();
    public int get_CurrentLevel();
    public int get_PreviousLevel();
    public WTextBody get_CurrentTextBody();
    protected IWParagraph get_CurrentPara();
    protected void set_CurrentPara(IWParagraph value);
    protected Column get_CurrColumn();
    protected void set_CurrColumn(Column value);
    protected IWSection get_CurrentSection();
    protected ListStyle get_CurrListStyle();
    protected void set_CurrListStyle(ListStyle value);
    protected ListOverrideStyle get_CurrListOverrideStyle();
    protected void set_CurrListOverrideStyle(ListOverrideStyle value);
    private WComment get_CurrentComment();
    private void set_CurrentComment(WComment value);
    private List`1<string> get_CommentStartIdList();
    private string get_CommentLinkText();
    private void set_CommentLinkText(string value);
    private Dictionary`2<string, WComment> get_Comments();
    protected WListLevel get_CurrListLevel();
    protected void set_CurrListLevel(WListLevel value);
    private bool get_IsLevelTextLengthRead();
    private void set_IsLevelTextLengthRead(bool value);
    public RtfFont get_CurrRtfFont();
    public void set_CurrRtfFont(RtfFont value);
    public RtfColor get_CurrColorTable();
    public void set_CurrColorTable(RtfColor value);
    public IWTable get_CurrTable();
    public void set_CurrTable(IWTable value);
    public WTableRow get_CurrRow();
    public void set_CurrRow(WTableRow value);
    public WTableCell get_CurrCell();
    public void set_CurrCell(WTableCell value);
    public CellFormat get_CurrCellFormat();
    public void set_CurrCellFormat(CellFormat value);
    public RowFormat get_CurrRowFormat();
    public void set_CurrRowFormat(RowFormat value);
    public TabFormat get_CurrTabFormat();
    public void set_CurrTabFormat(TabFormat value);
    public void ParseToken();
    private void PlainCount(Groups group);
    private bool IsPnListStyleDefined(Groups group);
    private bool IsPnListStyleDefinedExisting(Groups group);
    private void InitDefaultCompatibilityOptions();
    public void Close();
    private void AddFontTableEntry();
    private void AddColorTableEntry();
    private void AddStyleSheetEntry();
    private Style IsStylePresent(string styleName, StyleType styleType);
    private void ParseControlStart();
    private String[] SeparateAnnotationToken(String[] value);
    private bool IsNestedGroup();
    private void ParseGroupStart();
    private void ParseGroupEnd();
    private void ParseDrawingFields();
    private void ParsePictureDrawingFields();
    private void MoveItemsToShape(WTextBody textBody);
    private void ParseGroupEndWithinFieldGroup();
    private void EnsureFieldSubGroupEnd(FieldGroupType fieldGroupType);
    private void EnsureFieldGroupEnd();
    private void WriteFormFieldProperties();
    private string RemoveDelimiterSpace(string token);
    private bool IsPictureToken();
    private void ParseDocumentElement(string m_token);
    private bool IsDefaultTextFormat(TextFormat m_currTextFormat);
    private string GetEncodedString(string m_token);
    private Encoding GetEncoding();
    private Encoding GetEncoding(string codePage);
    private void ResetTextBackgroundColor(WCharacterFormat sourceFormat);
    private WTextRange GetFieldCodeTextRange(WField field, string fieldCode);
    private void ParseFieldGroupData(string token);
    private void ParseTOCField(string token, FieldType fieldType);
    private void ParseUnknownField(string token, FieldType fieldType);
    private void AppendTextRange(string token);
    private void ReplaceWfieldWithWMergeFieldObject();
    private void ApplyFieldProperties(WField field, string token, FieldType fieldType);
    private void ParseFormFieldDestinationWords(string token);
    private void ParseImageBytes();
    private void ParseCustomDocumentProperties(string m_token);
    private void ParseBuiltInDocumentProperties(string m_token);
    private FieldType GetFieldType(string token);
    private string GetFormattingString(string fieldInstruction, string fieldTypeString);
    private void ApplyDropDownFormFieldProperties(WDropDownFormField dropDownFormField);
    private void ApplyTextFormFieldProperties(WTextFormField textField);
    private void ApplyCheckboxPorperties(WCheckBox checkbox);
    private void ApplyFormFieldProperties(WFormField formField);
    private bool IsSupportedPicture();
    private void AppendPictureToParagraph(string token);
    private float GetRotationAngle(float rotation);
    private int GetBufferSize(int bufferSize);
    private Byte[] GetImageByteArray(string token);
    private void ApplyPictureFormatting(IWPicture currPicture, PictureFormat pictureFormat);
    private AutoShapeType GetAutoShapeType(string shapeValue);
    private void ApplyShapeFormatting(Shape currShape, PictureFormat pictureFormat, ShapeFormat shapeFormat);
    private void ApplyTextBoxFormatting(WTextBox textBox, PictureFormat pictureFormat, ShapeFormat shapeFormat);
    private void ApplyTextBoxFormatsToShape();
    private void CopyParagraphFormatting(WParagraphFormat sourceParaFormat, WParagraphFormat destParaFormat);
    private void ParseControlWords(string token, string tokenKey, string tokenValue, string tokenValue2);
    private void SkipGroup();
    private string ParseBulletChar(string token);
    private void ParseListTable(string token, string tokenKey, string tokenValue, string tokenValue2);
    private void ParselistLevelStart();
    private void CopyCharacterFormatting(WCharacterFormat sourceFormat, WCharacterFormat destFormat);
    private void CopyListStyle(ListStyle sourceListStyle, ListStyle destListStyle);
    private void ParsePageNumberingToken(string token, string tokenKey, string tokenValue);
    private void ParseLineNumberingToken(string token, string tokenKey, string tokenValue);
    private void ParseFontTable(string token, string tokenKey, string tokenValue);
    private void ParseColorTable(string token, string tokenKey, string tokenValue);
    private void ResetListFontName(WCharacterFormat listCharFormat);
    private bool IsParaInShapeResult(string token);
    private void ParseFormattingToken(string token, string tokenKey, string tokenValue, string tokenValue2);
    private float SetFramePositions(string tokenValue, bool isNeg, bool isXValue);
    private void ResetParagraphFormat(WParagraphFormat sourceParaFormat);
    private void ResetBorders(WParagraphFormat sourceParaFormat);
    private void ResetBorder(Border border);
    private void ResetCharacterFormat(WCharacterFormat sourceFormat);
    private float GetEqualColumnWidth(int columnCount);
    private void ParseSpecialCharacters(string token);
    private bool IsAccentCharacterNeedToBeOmitted();
    private TextureStyle GetTextureStyle(int textureValue);
    private void ParseListTextStart();
    private void ParseParagraphEnd();
    private void ParseParagraphStart();
    private void ParseSectionStart();
    private void CopySectionFormat(SecionFormat sourceFormat, SecionFormat destFormat);
    private void ParseRowStart(bool isFromShape);
    private void ParseRowEnd(bool isShapeTextEnd);
    private void ParseCellBoundary(string token, string tokenKey, string tokenValue);
    private bool GetTextWrapAround(TablePositioning positioning);
    private string GetAccentCharacter(string token);
    private string GetCodePage();
    private bool IsSingleByte();
    private int GetFontCharSet();
    private bool IsSupportedCodePage(int codePage);
    private string GetSupportedCodePage(int codePage);
    private void SetDefaultValue(WParagraphFormat paragraphFormat);
    private void ProcessTableInfo(bool isShapeTextEnd);
    private void EnsureLowerTable(int level, bool isShapeTextEnd);
    private void EnsureUpperTable(int level);
    private void ApplyListFormatting(string token, string tokenKey, string tokenValue, WListFormat listFormat);
    private void ApplySectionFormatting();
    private void ParseShapeToken(string token, string tokenKey, string tokenValue);
    private void ParseShapeToken(string token, string tokenValue);
    private void SetDefaultValuesForShapeTextBox();
    private LineStyle GetLineStyle();
    private void SetRotationValue(string rotationValue);
    private void AddShadowDirectionandDistance();
    private void AddAdjustValues();
    private void AddOwnerShapeTextStack();
    private void AddShapeTextbodyStack();
    private void ClearPreviousTextbody();
    private void ResetOwnerShapeStack();
    private void ResetShapeTextbodyStack();
    private void ParsePictureToken(string token, string tokenKey, string tokenValue);
    private int GetIntValue(string tokenValue);
    private void ParsePageVerticalAlignment(string token, string tokenKey, string tokenValue);
    private void ParseOutLineLevel(string token, string tokenKey, string tokenValue);
    private void ParseParagraphBorders(string token, string tokenKey, string tokenValue);
    private void ApplyCellFormatting(WTableCell cell, CellFormat cellFormat);
    private void ApplyRowFormatting(WTableRow row, RowFormat rowFormat);
    private void ApplyBorder(Border destBorder, Border sourceBorder);
    private void AddNewParagraph(IWParagraph newParagraph);
    private void UpdateTabsCollection(WParagraphFormat paraFormat);
    private void UpdateDeleteTabsCollection(WParagraphFormat destFormat, WParagraphFormat baseFormat);
    private void AddNewSection(IWSection newSection);
    private float ExtractTwipsValue(string nValue);
    private float ExtractQuaterPointsValue(string nValue);
    private void SortTabCollection();
    private String[] SeperateToken(string token);
    private string GetFontIndex(string fontFamily, WCharacterFormat charFormat);
    private bool IsCharFormatValueEqual(WCharacterFormat styleCharacterFormat, int key, string textFormatValue);
    private void CopyTextFormatToCharFormat(WCharacterFormat charFormat, TextFormat textFormat);
    private void ApplyParagraphFont(RtfFont rtfFontTable);
    private void ApplyColorTable(RtfColor rtfColor);
    internal bool StartsWithExt(string text, string value);
    private void SetParsedElementFlag(string token);
    private void SetShapeElementsFlag(int shapeTypeValue);
}
public class Syncfusion.DocIO.DLS.Convertors.RtfReader : object {
    private static byte b_endTag;
    private Byte[] m_rtfData;
    private Encoding m_encoding;
    private int m_position;
    private long m_length;
    public Byte[] RtfData { get; }
    public Encoding Encoding { get; }
    public int Position { get; public set; }
    public long Length { get; public set; }
    public RtfReader(Stream stream);
    public Byte[] get_RtfData();
    public Encoding get_Encoding();
    public int get_Position();
    public void set_Position(int value);
    public long get_Length();
    public void set_Length(long value);
    public char ReadChar();
    public string ReadImageBytes();
    public void Close();
}
internal enum Syncfusion.DocIO.DLS.Convertors.ShapeType : Enum {
    public int value__;
    public static ShapeType TextboxShape;
    public static ShapeType GroupedShape;
    public static ShapeType PictureShape;
    public static ShapeType WatermarkShape;
    public static ShapeType OleObject;
    public static ShapeType XmlParagraphItem;
}
internal class Syncfusion.DocIO.DLS.Convertors.TabFormat : object {
    private float m_tabPosition;
    private TabJustification m_tabJustification;
    private TabLeader m_tabLeader;
    internal float TabPosition { get; internal set; }
    internal TabJustification TabJustification { get; internal set; }
    internal TabLeader TabLeader { get; internal set; }
    internal float get_TabPosition();
    internal void set_TabPosition(float value);
    internal TabJustification get_TabJustification();
    internal void set_TabJustification(TabJustification value);
    internal TabLeader get_TabLeader();
    internal void set_TabLeader(TabLeader value);
}
internal class Syncfusion.DocIO.DLS.Convertors.Tokens : Groups {
    private string tokenName;
    private string tokenValue;
    internal string TokenName { get; internal set; }
    internal string TokenValue { get; internal set; }
    internal string get_TokenName();
    internal void set_TokenName(string value);
    internal string get_TokenValue();
    internal void set_TokenValue(string value);
}
internal class Syncfusion.DocIO.DLS.Convertors.UtilityMethods : object {
    public static DateTime ConvertNumberToDateTime(double dNumber);
    private static DateTime DateTimeFromOADate(double dNumber);
    public static void CopyStreamTo(Stream source, Stream destination);
    public static Stream CloneStream(Stream source);
    public static XmlReader CreateReader(Stream data, bool skipToElement);
    public static XmlReader CreateReader(Stream data);
    public static XmlWriter CreateWriter(Stream data, Encoding encoding);
    public static XmlWriter CreateWriter(TextWriter data);
    public static XmlWriter CreateWriter(TextWriter data, bool indent);
}
internal class Syncfusion.DocIO.DLS.Convertors.Windows1252Encoding : Encoding {
    private Char[] map;
    public string WebName { get; }
    public virtual string get_WebName();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class Syncfusion.DocIO.DLS.CssConstants : object {
    public static string Maroon;
    public static string Red;
    public static string Orange;
    public static string Yellow;
    public static string Olive;
    public static string Fuchsia;
    public static string Lime;
    public static string White;
    public static string Green;
    public static string Navy;
    public static string Blue;
    public static string Aqua;
    public static string Teal;
    public static string Black;
    public static string Silver;
    public static string Gray;
    public static string Purple;
    public static string XXSmall;
    public static string XSmall;
    public static string Medium;
    public static string XLarge;
    public static string XXLarge;
    public static string Small;
    public static string Smaller;
    public static string Larger;
    public static string Large;
    public static string Underline;
    public static string LineThrough;
    public static string LineHeight;
    public static string SubScript;
    public static string SuperScript;
    public static string Font;
    public static string LeftIndent;
    public static string TextIndent;
    public static string FontFamily;
    public static string FontSize;
    public static string FontStyle;
    public static string FontWeight;
    public static string TextDecoration;
    public static string TextAlign;
    public static string SubSuperScripts;
    public static string Background;
    public static string Color;
    public static string HyperlinkColor;
    public static string Baseline;
    public static string ListType;
    public static string Margin;
    public static string Border;
    public static string BgColor;
    public static string Align;
    public static string StrikeThrough;
    public static string Cm;
    public static string Mm;
    public static string Px;
    public static string In;
    public static string Ex;
    public static string Em;
    public static string Pt;
    public static string Pc;
    public static string Percentage;
}
internal class Syncfusion.DocIO.DLS.CssDefaultValue : object {
    public static double FontSize;
    public static double ImageHeight;
    public static double ImageWidth;
    public static double DEF_MEDIUMVALUE;
    public static double DEF_THICKVALUE;
    public static double DEF_THINVALUE;
    public static double BeforeSpacing;
    public static double AftereSpacing;
}
internal class Syncfusion.DocIO.DLS.CssPropertiesAttribute : Attribute {
    private string propertyName;
    internal string PropertyName { get; internal set; }
    internal CssPropertiesAttribute(string name);
    internal string get_PropertyName();
    internal void set_PropertyName(string value);
}
internal class Syncfusion.DocIO.DLS.CssPropertiesBox : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<PropertyInfo, object> <PropertyValues>k__BackingField;
    internal Dictionary`2<PropertyInfo, object> PropertyValues { get; internal set; }
    internal CssPropertiesBox(string stylestring);
    [CompilerGeneratedAttribute]
internal Dictionary`2<PropertyInfo, object> get_PropertyValues();
    [CompilerGeneratedAttribute]
internal void set_PropertyValues(Dictionary`2<PropertyInfo, object> value);
    internal void AssignProperties(HtmlNode Box);
}
internal class Syncfusion.DocIO.DLS.CssPropertyInherited : Attribute {
}
internal class Syncfusion.DocIO.DLS.CSSStyle : object {
    private List`1<CSSStyleItem> m_styleCollection;
    internal List`1<CSSStyleItem> StyleCollection { get; internal set; }
    internal List`1<CSSStyleItem> get_StyleCollection();
    internal void set_StyleCollection(List`1<CSSStyleItem> value);
    internal CSSStyleItem GetCSSStyleItem(string styleName, CssStyleType styleType);
    internal void Close();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.CSSStyleItem : object {
    private string m_styleName;
    private Dictionary`2<TextFormatKey, object> m_propertiesHash;
    private Dictionary`2<TextFormatImportantKey, object> m_importantPropertiesHash;
    private CssStyleType m_styleType;
    internal string StyleName { get; internal set; }
    internal CssStyleType StyleType { get; internal set; }
    internal Dictionary`2<TextFormatKey, object> PropertiesHash { get; }
    internal Dictionary`2<TextFormatImportantKey, object> ImportantPropertiesHash { get; }
    internal object Item { get; internal set; }
    internal object Item { get; internal set; }
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal CssStyleType get_StyleType();
    internal void set_StyleType(CssStyleType value);
    internal Dictionary`2<TextFormatKey, object> get_PropertiesHash();
    internal Dictionary`2<TextFormatImportantKey, object> get_ImportantPropertiesHash();
    internal object get_Item(TextFormatKey key);
    internal void set_Item(TextFormatKey key, object value);
    internal object get_Item(TextFormatImportantKey key);
    internal void set_Item(TextFormatImportantKey key, object value);
    internal void Close();
}
public enum Syncfusion.DocIO.DLS.CssStyleSheetType : Enum {
    public int value__;
    public static CssStyleSheetType Inline;
    public static CssStyleSheetType Internal;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.CustomDocumentProperties : XDLSSerializableBase {
    internal static string TagName;
    internal static string NameAttribute;
    internal static string PIDAttribute;
    internal static string FMTIDAttribute;
    protected Dictionary`2<string, DocumentProperty> m_customList;
    internal Dictionary`2<string, DocumentProperty> CustomHash { get; }
    public DocumentProperty Item { get; }
    public DocumentProperty Item { get; }
    public int Count { get; }
    internal CustomDocumentProperties(int count);
    internal Dictionary`2<string, DocumentProperty> get_CustomHash();
    public DocumentProperty get_Item(string name);
    public DocumentProperty get_Item(int index);
    public int get_Count();
    public DocumentProperty Add(string name, object value);
    public void Remove(string name);
    public CustomDocumentProperties Clone();
    internal virtual void Close();
}
public class Syncfusion.DocIO.DLS.CustomXMLNode : object {
    private IEnumerable`1<CustomXMLNode> m_childNodes;
    private CustomXMLNode m_firstChild;
    private CustomXMLNode m_lastChild;
    private string m_text;
    private CustomXMLPart m_ownerPart;
    private CustomXMLNode m_parentNode;
    private string m_xml;
    private string m_xPath;
    public string XML { get; internal set; }
    public IEnumerable`1<CustomXMLNode> ChildNodes { get; }
    public string XPath { get; internal set; }
    public CustomXMLNode FirstChild { get; }
    public CustomXMLNode LastChild { get; }
    public string Text { get; public set; }
    public CustomXMLPart OwnerPart { get; internal set; }
    public CustomXMLNode ParentNode { get; }
    public string get_XML();
    internal void set_XML(string value);
    public IEnumerable`1<CustomXMLNode> get_ChildNodes();
    private IEnumerable`1<CustomXMLNode> AddChildNodes(XNode nodes);
    public string get_XPath();
    internal void set_XPath(string value);
    public CustomXMLNode get_FirstChild();
    public CustomXMLNode get_LastChild();
    public string get_Text();
    public void set_Text(string value);
    public CustomXMLPart get_OwnerPart();
    internal void set_OwnerPart(CustomXMLPart value);
    public CustomXMLNode get_ParentNode();
    public void Delete();
    public CustomXMLNode SelectSingleNode(string xPath);
    public bool HasChildNodes();
    public void AppendChildNode(string name, CustomXMLNodeType nodeType, string nodeValue);
    public void RemoveChild(CustomXMLNode child);
}
public enum Syncfusion.DocIO.DLS.CustomXMLNodeType : Enum {
    public int value__;
    public static CustomXMLNodeType Element;
    public static CustomXMLNodeType Attribute;
    public static CustomXMLNodeType Text;
    public static CustomXMLNodeType Document;
}
public class Syncfusion.DocIO.DLS.CustomXMLPart : object {
    private string m_id;
    private string m_xml;
    private WordDocument m_document;
    internal string XML { get; internal set; }
    internal WordDocument Document { get; }
    public string Id { get; internal set; }
    public CustomXMLPart(WordDocument document);
    internal string get_XML();
    internal void set_XML(string value);
    internal WordDocument get_Document();
    public string get_Id();
    internal void set_Id(string value);
    public void LoadXML(string xml);
    public void Load(Stream xmlStream);
    public void AddNode(CustomXMLNode customXmlNode, string name, CustomXMLNodeType nodeType, string nodeValue);
    public CustomXMLNode SelectSingleNode(string xPath);
}
internal class Syncfusion.DocIO.DLS.DataReaderEnumerator : object {
    private IDataReader m_dataReader;
    private List`1<List`1<string>> m_rows;
    private int m_currRowIndex;
    private String[] m_columnNames;
    public int CurrentRowIndex { get; }
    public int RowsCount { get; }
    public string TableName { get; }
    public bool IsEnd { get; }
    public bool IsLast { get; }
    protected List`1<string> CurrentRow { get; }
    public String[] ColumnNames { get; }
    public DataReaderEnumerator(IDataReader dataReader);
    public sealed virtual int get_CurrentRowIndex();
    public sealed virtual int get_RowsCount();
    public sealed virtual string get_TableName();
    public sealed virtual bool get_IsEnd();
    public sealed virtual bool get_IsLast();
    protected List`1<string> get_CurrentRow();
    public sealed virtual String[] get_ColumnNames();
    public sealed virtual void Reset();
    public sealed virtual bool NextRow();
    public sealed virtual object GetCellValue(string columnName);
    internal void Close();
}
internal class Syncfusion.DocIO.DLS.DataTableEnumerator : object {
    private DataTable m_table;
    private DataRow m_row;
    private int m_currRowIndex;
    private String[] m_columnsNames;
    private int m_matchingRecordsCount;
    private string m_command;
    private string m_tableName;
    internal IEnumerator m_MMtable;
    private Type m_userClassType;
    private int m_rowCount;
    public int CurrentRowIndex { get; }
    public int RowsCount { get; }
    public string TableName { get; }
    public bool IsEnd { get; }
    public bool IsLast { get; }
    protected object CurrentRow { get; }
    internal int MatchingRecordsCount { get; internal set; }
    internal string Command { get; internal set; }
    public String[] ColumnNames { get; }
    public DataTableEnumerator(DataTable table);
    public DataTableEnumerator(DataRow row);
    public DataTableEnumerator(MailMergeDataTable table);
    public sealed virtual int get_CurrentRowIndex();
    public sealed virtual int get_RowsCount();
    public sealed virtual string get_TableName();
    public sealed virtual bool get_IsEnd();
    public sealed virtual bool get_IsLast();
    protected object get_CurrentRow();
    internal int get_MatchingRecordsCount();
    internal void set_MatchingRecordsCount(int value);
    internal string get_Command();
    internal void set_Command(string value);
    public sealed virtual void Reset();
    public sealed virtual bool NextRow();
    internal bool NextRow(String[] command);
    public sealed virtual object GetCellValue(string columnName);
    public sealed virtual String[] get_ColumnNames();
    internal void Close();
    private void ReadColumnNames(DataTable table);
    private void ReadColumnNames(MailMergeDataTable table);
    private void ReadColumnNamesInTable(IEnumerator table);
    private void ReadColumnNames(IEnumerator table);
    private void CalculRowCount();
}
internal class Syncfusion.DocIO.DLS.DataViewEnumerator : object {
    private DataView m_dataView;
    private DataTable m_table;
    private DataRow m_row;
    private int m_currRowIndex;
    private String[] m_columnNames;
    public int CurrentRowIndex { get; }
    public int RowsCount { get; }
    public string TableName { get; }
    public bool IsEnd { get; }
    public bool IsLast { get; }
    protected DataRow CurrentRow { get; }
    public String[] ColumnNames { get; }
    public DataViewEnumerator(DataView dataView);
    public sealed virtual int get_CurrentRowIndex();
    public sealed virtual int get_RowsCount();
    public sealed virtual string get_TableName();
    public sealed virtual bool get_IsEnd();
    public sealed virtual bool get_IsLast();
    protected DataRow get_CurrentRow();
    public sealed virtual void Reset();
    public sealed virtual bool NextRow();
    public sealed virtual object GetCellValue(string columnName);
    public sealed virtual String[] get_ColumnNames();
    internal void Close();
    private void ReadColumnNames(DataTable dataTable);
}
public class Syncfusion.DocIO.DLS.DLSException : Exception {
    private static string DEF_MESSAGE;
    public DLSException(Exception innerExc);
    public DLSException(string message);
    public DLSException(string message, Exception innerExc);
}
internal class Syncfusion.DocIO.DLS.DocIOSortedList`2 : TypedSortedListEx`2<TKey, TValue> {
    public DocIOSortedList`2(IComparer`1<TKey> comparer);
    public DocIOSortedList`2(int count);
    public DocIOSortedList`2(IDictionary`2<TKey, TValue> dictionary);
}
internal class Syncfusion.DocIO.DLS.DocPartItem : object {
    private string m_docPartCategory;
    private string m_docPartGallery;
    private byte m_bFlags;
    internal string DocPartCategory { get; internal set; }
    internal string DocPartGallery { get; internal set; }
    internal bool IsDocPartUnique { get; internal set; }
    internal string get_DocPartCategory();
    internal void set_DocPartCategory(string value);
    internal string get_DocPartGallery();
    internal void set_DocPartGallery(string value);
    internal bool get_IsDocPartUnique();
    internal void set_IsDocPartUnique(bool value);
}
internal class Syncfusion.DocIO.DLS.DocPartList : DocPartItem {
}
internal class Syncfusion.DocIO.DLS.DocPartObj : DocPartItem {
}
public class Syncfusion.DocIO.DLS.DocProperties : object {
    private IWordDocument m_document;
    private DocumentVersion m_version;
    private Hyphenation m_hyphenation;
    public bool FormFieldShading { get; public set; }
    public DocumentVersion Version { get; }
    public Hyphenation Hyphenation { get; }
    internal DocProperties(IWordDocument document);
    public bool get_FormFieldShading();
    public void set_FormFieldShading(bool value);
    public DocumentVersion get_Version();
    public Hyphenation get_Hyphenation();
    internal void SetVersion(DocumentVersion version);
    internal void Close();
}
internal class Syncfusion.DocIO.DLS.DocReaderAdapter : DocReaderAdapterBase {
    private AnnotationAdapter m_annAdapter;
    private FootnoteAdapter m_ftnAdapter;
    private EndnoteAdapter m_endNoteAdapter;
    private TextboxAdapter m_txbxAdapter;
    private HeaderFooterAdapter m_hfAdapter;
    public void Read(WordReader reader, WordDocument wordDoc);
    private void ReadPassword(WordReader reader);
    private void ReadStyleSheet(WordReader reader);
    private string UpdateStyleNameBasedOnId(WordStyle wordStyle);
    private void ReadEscher(WordReader reader);
    private void ReadBackground();
    private void ReadSubDocument(WordReader reader, WordSubdocument wsType);
    private void ReadSectionFormat(WordReader reader, IWSection sec);
    private void ReadDocumentProperties(WordReader reader);
    private void ReadBuiltInDocumentProperties(WordReader reader);
    private void ReadDOP(WordReader reader);
    private bool SubDocumentExists(WordReader reader, WordSubdocument wsType);
    internal virtual void Close();
    protected virtual bool EndOfTextBody(WordReaderBase reader, WordChunkType chunkType);
    protected virtual void ReadAnnotation(WordReaderBase reader);
    protected virtual void ReadFootnote(WordReaderBase reader);
    internal bool StartsWithExt(string text, string value);
    private bool IsMultipleFootNoteEndNoteMarker(String& footNoteMarker, WordReader wReader, WFootnote footnote, bool isCustomFootnoteSplittedText);
    protected virtual void ReadDocumentEnd(WordReaderBase reader);
    protected virtual void ReadTextBox(WordReaderBase reader, FileShapeAddress fspa);
    protected virtual void CheckTextEmbed(ShapeBase shape, WPicture picture);
    protected virtual void ReadAutoShapeTextBox(int shapeId, ShapeObject shapeObj);
    protected virtual void ProcessCommText(WordReaderBase reader, WParagraph para);
    private void SplitCommText(WParagraph para, int startTextPos, int splitPos);
    private void UpdateCommentMarks(WComment comment);
    private void ParseListPicture();
    private void CheckWatermark(WSection section);
}
internal class Syncfusion.DocIO.DLS.DocReaderAdapterBase : object {
    private static int DEF_WMFPLACEABLEHEADER_KEY;
    protected List`1<WPicture> m_listPic;
    protected WTextBody m_textBody;
    protected ITextBodyItem m_currParagraph;
    private bool m_cellFinished;
    private bool m_rowFinished;
    private WTable m_currTable;
    private Stack`1<WTable> m_tablesNested;
    protected Stack`1<WTextBody> m_nestedTextBodies;
    private WField m_currField;
    private Stack`1<WField> m_fieldStack;
    private bool m_isPostFixBkmkStart;
    protected bool m_finalize;
    private WordChunkType m_prevChunkType;
    private BookmarkInfo m_bookmarkInfo;
    private List`1<WTable> nestedTable;
    protected WordDocument DocumentEx;
    protected WParagraph CurrentParagraph { get; }
    protected WField CurrentField { get; }
    internal List`1<WPicture> ListPictures { get; }
    protected WParagraph get_CurrentParagraph();
    protected WField get_CurrentField();
    internal List`1<WPicture> get_ListPictures();
    internal void Init(WordDocument doc);
    protected void ReadTextBody(WordReaderBase reader, WTextBody textBody);
    protected virtual bool EndOfTextBody(WordReaderBase reader, WordChunkType chunkType);
    protected virtual void Preparation(WordReaderBase reader);
    private void ProcessChunk(WordReaderBase reader, HeaderFooter headerFooter);
    private void ReadCustomFootnote(WordReaderBase reader, int splittedTextLength, int startPos);
    private void ProcessBookmarkAfterParaEnd(WordReaderBase reader);
    private void ReadFootnoteMarker(WordReaderBase reader);
    private void PrepareParagraph(WordReaderBase reader, PrepareTableInfo& prepti);
    private void PrepareTable(IWordReaderBase reader, PrepareTableInfo& prepti);
    private void EnsureLowerTable(int level, IWordReaderBase reader);
    private void EnsureUpperTable(int level, IWordReaderBase reader);
    private void UpdateTableGridAfterValue(WTable table, IWordReaderBase reader);
    private void AppendTableRow();
    private void AppendTableCell(PrepareTableInfo& prepti);
    protected virtual void Finalize(WordReaderBase reader);
    private void SetPostfixBkmks();
    private void ProcessBookmarks(WordReaderBase reader);
    private bool IsParagraphBefore(WordReaderBase reader);
    private void AppendBookmark(BookmarkInfo bkmrInfo, bool isBookmarkStart);
    private void ReadText(WordReaderBase reader);
    internal void Addtext(WordReaderBase reader, string text, bool isFromFootNoteSplittedText);
    private void AddTextRange(WordReaderBase reader, string text);
    private void ReadParagraphEnd(WordReaderBase reader);
    private void ReadSymbol(WordReaderBase reader);
    private void ReadCurrentPageNumber(WordReaderBase reader);
    private void ReadTab(WordReaderBase reader);
    private void ReadTableCell(WordReaderBase reader);
    private void ReadTableRow(WordReaderBase reader);
    private static void ExportDefaultPaddings(Paddings destination);
    private bool IsSplitTableRows(WordReaderBase reader, SinglePropertyModifierArray previousRowSprms, SinglePropertyModifierArray currentRowSprms);
    private bool CompareBidiAndPositioning();
    private bool CompareArray(Byte[] buffer1, Byte[] buffer2);
    private void ReadTable(WordReaderBase reader);
    protected virtual void ReadAnnotation(WordReaderBase reader);
    protected virtual void ReadFootnote(WordReaderBase reader);
    private void ReadBreak(WordReaderBase reader, BreakType breakType);
    protected virtual void ReadDocumentEnd(WordReaderBase reader);
    protected virtual void ReadShape(WordReaderBase reader, HeaderFooter headerFooter);
    protected virtual bool ReadWatermark(WordReaderBase reader);
    private bool IsShapeFieldResult(IEntity endItem);
    protected virtual void ReadTextBox(WordReaderBase reader, FileShapeAddress fspa);
    private void ReadPictureShape(WordReaderBase reader, ShapeBase shape, MsofbtSpContainer shapeContainer);
    internal void UpdateImageCroppingPostion(WPicture picture, MsofbtSpContainer ShapeContainer);
    private float GetPictureCropValue(int propValue);
    protected virtual void CheckTextEmbed(ShapeBase shape, WPicture picture);
    private void ReadAutoShape(WordReaderBase reader);
    private bool IsUnsupportedSpType(BaseContainer baseContainer);
    private void ReadAutoShapeText(BaseContainer shapeContainer, ShapeObject shapeObj);
    protected virtual void ReadAutoShapeTextBox(int shapeId, ShapeObject shapeObj);
    internal bool StartsWithExt(string text, string value);
    private void ReadImage(WordReaderBase reader);
    private void PlaceableMetafileHeader(WordImageReader imageReader);
    private short CalculateCheckSum(short Handle, short left, short top, short right, short bottom, short Inch, short reserved);
    private void AddItem(ParagraphItem item, IWParagraph para);
    private void ReadFldBeginMark(WordReaderBase reader);
    private void InsertFldSeparator(WordReaderBase reader);
    private void InsertFldEndMark(WordReaderBase reader);
    private void UpdateFieldType(WordReaderBase reader, WField field, WFieldMark endMark);
    private void InsertStartField(WordReaderBase reader);
    private void ReadOleObject(WordReaderBase reader, FieldType type);
    protected void ReadListFormat(WordReaderBase reader, WListFormat listFormat);
    protected void ReadCharacterFormat(WordReaderBase reader, WCharacterFormat charFormat);
    protected void ReadParagraphFormat(WordReaderBase reader, IWParagraph paragraph);
    protected void UpdateParagraphStyle(IWParagraph paragraph, WordReaderBase reader);
    private void ReadTableRowFormat(WordReaderBase reader, WTable table);
    internal void CheckTrackChanges(ParagraphItem item, WordReaderBase reader);
    internal void CheckTrackChanges(WParagraph paragraph, WordReaderBase reader);
    protected virtual void ProcessCommText(WordReaderBase reader, WParagraph para);
    internal virtual void Close();
}
public enum Syncfusion.DocIO.DLS.DocTextDirection : Enum {
    public int value__;
    public static DocTextDirection LeftToRight;
    public static DocTextDirection TopToBottom;
    public static DocTextDirection TopToBottomRotated;
    public static DocTextDirection LeftToRightRotated;
    public static DocTextDirection RightToLeft;
    public static DocTextDirection RightToLeftRotated;
}
public class Syncfusion.DocIO.DLS.DocumentProperty : object {
    private static int DEF_START_ID2;
    private static int DEF_FILE_TIME_START_YEAR;
    private BuiltInProperty m_propertyId;
    private string m_strName;
    private object m_value;
    private PropertyType m_type;
    private string m_strLinkSource;
    private byte m_bFlags;
    internal bool IsBuiltIn { get; }
    internal BuiltInProperty PropertyId { get; internal set; }
    public string Name { get; }
    public object Value { get; public set; }
    public PropertyValueType ValueType { get; }
    internal bool Boolean { get; internal set; }
    internal int Integer { get; internal set; }
    internal int Int32 { get; internal set; }
    internal double Double { get; internal set; }
    internal string Text { get; internal set; }
    internal DateTime DateTime { get; internal set; }
    internal TimeSpan TimeSpan { get; internal set; }
    internal Byte[] Blob { get; internal set; }
    public ClipboardData ClipboardData { get; public set; }
    internal String[] StringArray { get; internal set; }
    internal Object[] ObjectArray { get; internal set; }
    internal PropertyType PropertyType { get; internal set; }
    internal string LinkSource { get; internal set; }
    internal bool LinkToContent { get; internal set; }
    internal string InternalName { get; }
    internal DocumentProperty(string strName, object value);
    internal DocumentProperty(string strName, object value, PropertyType type);
    internal DocumentProperty(BuiltInProperty propertyId, object value);
    internal DocumentProperty(IPropertyData variant, bool bSummary);
    internal bool get_IsBuiltIn();
    internal BuiltInProperty get_PropertyId();
    internal void set_PropertyId(BuiltInProperty value);
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    public PropertyValueType get_ValueType();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal int get_Integer();
    internal void set_Integer(int value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal double get_Double();
    internal void set_Double(double value);
    internal string get_Text();
    internal void set_Text(string value);
    private PropertyType DetectStringType(string value);
    internal DateTime get_DateTime();
    internal void set_DateTime(DateTime value);
    internal TimeSpan get_TimeSpan();
    internal void set_TimeSpan(TimeSpan value);
    internal Byte[] get_Blob();
    internal void set_Blob(Byte[] value);
    public ClipboardData get_ClipboardData();
    public void set_ClipboardData(ClipboardData value);
    internal String[] get_StringArray();
    internal void set_StringArray(String[] value);
    internal Object[] get_ObjectArray();
    internal void set_ObjectArray(Object[] value);
    internal PropertyType get_PropertyType();
    internal void set_PropertyType(PropertyType value);
    internal string get_LinkSource();
    internal void set_LinkSource(string value);
    internal bool get_LinkToContent();
    internal void set_LinkToContent(bool value);
    internal string get_InternalName();
    public bool ToBool();
    public DateTime ToDateTime();
    public float ToFloat();
    public double ToDouble();
    public int ToInt();
    public virtual string ToString();
    public Byte[] ToByteArray();
    internal bool FillPropVariant(IPropertyData variant, int iPropertyId);
    internal int CorrectIndex(BuiltInProperty propertyId, Boolean& bSummary);
    internal static PropertyType DetectPropertyType(object value);
    private void DetectPropertyType();
    internal void SetLinkSource(IPropertyData variant);
    public DocumentProperty Clone();
    private void CloneValue();
    internal void Close();
}
public enum Syncfusion.DocIO.DLS.DocumentVersion : Enum {
    public int value__;
    public static DocumentVersion Word97;
    public static DocumentVersion Word2000;
    public static DocumentVersion Word2002;
    public static DocumentVersion Word2003;
    public static DocumentVersion Word2007;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.DocVariables : object {
    private Dictionary`2<string, string> m_variables;
    public string Item { get; public set; }
    public int Count { get; }
    internal Dictionary`2<string, string> Items { get; }
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public int get_Count();
    internal Dictionary`2<string, string> get_Items();
    public void Add(string name, string value);
    public string GetNameByIndex(int index);
    public string GetValueByIndex(int index);
    public void Remove(string name);
    internal void Close();
    internal void UpdateVariables(Byte[] variables);
    internal Byte[] ToByteArray();
    private string FindItem(int index, bool returnName);
    private void CheckIndex(int index);
}
internal class Syncfusion.DocIO.DLS.DocWriterAdapter : object {
    private static string LINK_STRING;
    private int m_listID;
    private int m_secNumber;
    private int m_tableNestingLevel;
    private string m_prevStyleName;
    private WParagraph m_lastParagarph;
    private WordWriter m_mainWriter;
    private IWordWriterBase m_currWriter;
    private WordDocument m_document;
    private IWSection m_currSection;
    private WTextBoxCollection m_txbxItems;
    private WTextBoxCollection m_hfTxbxItems;
    private List`1<WComment> m_commentCollection;
    private List`1<WFootnote> m_footnoteCollection;
    private List`1<WFootnote> m_endnoteCollection;
    private Dictionary`2<string, int> m_charStylesHash;
    private Dictionary`2<string, ListData> m_listData;
    private List`1<string> m_bookmarksAfterCell;
    private Stack`1<WField> m_fieldStack;
    private Dictionary`2<string, DictionaryEntry> m_commOffsets;
    private List`1<WPicture> m_listPicture;
    private List`1<WOleObject> m_oleObjects;
    private List`1<OLEObject> m_OLEObjects;
    private IWordWriterBase CurrentWriter { get; private set; }
    private WField CurrentField { get; }
    private List`1<WPicture> ListPicture { get; }
    private WParagraph LastParagraph { get; }
    private List`1<WComment> CommentCollection { get; }
    private List`1<WFootnote> FootnoteCollection { get; }
    private List`1<WFootnote> EndnoteCollection { get; }
    private WTextBoxCollection HFTextBoxCollection { get; }
    private WTextBoxCollection TextBoxCollection { get; }
    private Dictionary`2<string, DictionaryEntry> CommentOffsets { get; }
    private IWordWriterBase get_CurrentWriter();
    private void set_CurrentWriter(IWordWriterBase value);
    private WField get_CurrentField();
    private List`1<WPicture> get_ListPicture();
    private WParagraph get_LastParagraph();
    private List`1<WComment> get_CommentCollection();
    private List`1<WFootnote> get_FootnoteCollection();
    private List`1<WFootnote> get_EndnoteCollection();
    private WTextBoxCollection get_HFTextBoxCollection();
    private WTextBoxCollection get_TextBoxCollection();
    private Dictionary`2<string, DictionaryEntry> get_CommentOffsets();
    public void Write(WordWriter writer, WordDocument document);
    private void Init(WordWriter writer);
    private void WriteBody();
    private void WriteMainBody();
    private void WriteHFBody();
    private void WriteSeparatorStories();
    private void WriteSeparatorStory(WTextBody body);
    private void InsertWatermark(WTextBody textBody, HeaderType headerType);
    private WParagraph GetFirstPara(WTextBody textBody);
    private WParagraph GetFirstTblPara(WTable table);
    private void WriteTextBoxBody(WTextBoxCollection txbxCollection, WordSubdocument txBxType);
    private void WriteTextBoxText(IWordSubdocumentWriter txbxWriter, WTextBox textBox);
    private void WriteFootnotesBody();
    private void WriteAnnotationsBody();
    private void WriteEndnotesBody();
    private void WriteTextBoxes();
    private void WriteHeaderFooter(WordHeaderFooterWriter hfWriter, BodyItemCollection collection, HeaderType hType);
    private void WriteSubDocumentText(IWordSubdocumentWriter writer, WTextBody body);
    private void WriteParagraphs(BodyItemCollection paragraphs, bool isTableBody);
    private bool WriteSDTBlock(BlockContentControl sdtBlock, bool isTableBody);
    private bool CheckCurItemInTable(bool isTableBody, BodyItemCollection paragraphs, int itemIndex);
    private void WriteParagraph(IWParagraph paragraph);
    private bool SerializeDirectionalOverride(ParagraphItem item);
    private void WriteListPictures();
    private void WriteParaItem(ParagraphItem item, IWParagraph paragraph);
    private void WriteDocumentEscher();
    private void WriteAbsoluteTab(WAbsoluteTab absoluteTab);
    private void WriteWatermarkParagraphs();
    private void WriteText(WTextRange text);
    private void WriteTextChunks(string text, bool safeText);
    private void WriteBeginField(WField field);
    private void WriteOleObjectCharProps(WField field);
    private void WriteFormField(WFormField field);
    private void WriteTable(IWTable table);
    private void UpdateHtmlTableBorders(WTable table);
    private void ApplyHtmlTableBorder(Border border);
    private void SetTableNestingLevel(SinglePropertyModifierArray sprms, int value);
    private void SetCellMark(SinglePropertyModifierArray sprms, bool value);
    private void WriteTableProps(IWordWriterBase writer, WTableRow row, IWTable table);
    private void WriteImage(IWPicture picture);
    private void WritePictureShape(WPicture wPict, int height, int width);
    private void WriteEmbedBody(WTextBody text, int shapeId);
    private void WriteInlinePicture(WPicture wPict, int height, int width);
    private bool IsInShapeField(WPicture picture);
    private InlineShapeObject ConvertToInlineShape(InlineShapeObject pictureShape);
    private void WriteShapeObject(ShapeObject shapeObject);
    private void WriteShapeObjTextBody(ShapeObject shapeObject);
    private void WriteSectionEnd(IWSection section);
    private void WriteBookmarkStart(BookmarkStart start);
    private void WriteBookmarkEnd(BookmarkEnd end);
    private void WriteBreak(Break docBreak, WParagraph paragraph);
    private void WriteSymbol(WSymbol symbol);
    private void WriteTextBoxShape(WTextBox textBoxItem);
    private void PrepareTextBoxColl(WTextBox textBoxItem);
    private void CheckShapeForCloning(ParagraphItem shapeItem);
    private void WriteFieldMarkAndText(WFieldMark fldMark);
    private void WriteFieldSeparator();
    private void WriteFieldEnd();
    private void WriteComment(WComment comment);
    private void WriteFootnote(WFootnote footnote);
    private void WriteWatermark(Watermark watermark);
    private void WriteTOC(TableOfContent toc);
    private void WriteFieldWithoutSeparator(string fieldCode, WField field);
    private void WriteCommMark(WCommentMark commMark);
    private void WriteOleObject(WOleObject oleObject);
    private void AddListPictures();
    private void AddPictures(WListFormat listFormat);
    private void WriteParagraphProperties(IWParagraph paragraph);
    private void WriteParagraphStyle(IWordWriterBase writer, IWParagraph paragraph);
    private void WriteStyleSheet(IWordWriter writer);
    private void UpdateDefFormat();
    private void WriteDocumentProperties();
    private void WriteDocumentDefaultFont();
    private void WriteBackground();
    private void WritePictureBackground(MsofbtSpContainer backContainer, MsofbtSpContainer oldBackContainer, Background background, EscherClass escher);
    private void CheckEscher();
    private void WriteCommItems(WComment comment);
    private void CountCommOffset(WComment comment);
    internal void Close();
    private void UpdateCharStyleIndex(string charStyleName, bool isParaBreak);
    private void WriteBreakAfter(WParagraph curPara, BreakType type);
    private bool IsPageBreakNeedToBeSkipped(Entity entity);
    private void WriteListProperties(IWParagraph paragraph, List`1<SinglePropertyModifierRecord> oldSprms, List`1<SinglePropertyModifierRecord> newSprms);
    private void WriteListProperties(WListFormat listFormat, IWordWriterBase writer);
    private void ProcessEmptyList(WListFormat listFormat, IWordWriterBase writer);
    private void ProcessList(WListFormat listFormat, IWordWriterBase writer);
    internal void RemoveListSprms(SinglePropertyModifierArray Sprms);
    internal void WriteEmptyList(SinglePropertyModifierArray Sprms);
    private void ContinueCurrentList(IWordWriterBase writer, WListFormat listFormat);
    private void ApplyStyle(IWordWriterBase writer, WListFormat listFormat, bool useBaseStyle);
    private void ModifyBaseStyles(int listFormatIndex, IWordWriterBase writer);
    private ListData CreateListData(ListStyle listStyle, WordStyleSheet styleSheet, WListFormat lstFormat);
    private void UpdateListInStyle(IWordWriterBase writer, WParagraphStyle style, SinglePropertyModifierArray sprms);
    private void ResetLists();
}
internal class Syncfusion.DocIO.DLS.DocxLaTeXConverter : DocumentLaTeXConverter {
    private WordDocument m_doc;
    internal DocxLaTeXConverter(WordDocument document);
    internal virtual void CreateMathRunElement(IOfficeMathRunElement officeMathRunElement, string text);
    internal virtual void AppendTextInMathRun(IOfficeMathRunElement officeMathRunElement, string text);
    internal virtual string GetText(IOfficeMathRunElement officeMathRunElement);
    internal void Close();
}
internal class Syncfusion.DocIO.DLS.DocxSerializator : DocumentSerializer {
    internal string SlashSymbol;
    internal string InvertedCommas;
    internal string NullSymbol;
    internal static char CarriageReturn;
    internal static char NewLine;
    private ZipArchive m_archive;
    private WordDocument m_document;
    private XmlWriter m_writer;
    private int m_relationShipID;
    private byte m_bFlags;
    private int m_chartElementsRelationId;
    private int m_chartColorStyleID;
    private int m_chartStyleID;
    private int m_chartDrawingID;
    private int m_id;
    private int m_bookmarkId;
    private int m_docPrId;
    private int m_shapeID;
    private int m_lstOverId;
    private bool m_hasImages;
    private bool m_hasNumbering;
    private bool m_isFallBack;
    private bool m_hasFontTable;
    private Dictionary`2<int, Dictionary`2<int, string>> m_lstStyleReferences;
    private Dictionary`2<string, ImageRecord> m_pictureBullets;
    private bool m_hasFootnote;
    private bool m_hasEndnote;
    private bool m_hasMetafiles;
    private bool m_hasOleObject;
    private bool m_hasComment;
    private Dictionary`2<string, ImageRecord> m_documentImages;
    private Dictionary`2<string, ImageRecord> m_footnoteImages;
    private Dictionary`2<string, ImageRecord> m_endnoteImages;
    private Dictionary`2<string, ImageRecord> m_commentImages;
    private Dictionary`2<string, Dictionary`2<string, ImageRecord>> m_headerFooterImages;
    private Dictionary`2<string, Dictionary`2<string, Stream>> m_headerFooterSvgImages;
    private int m_hfSvgImageIndex;
    private Dictionary`2<string, string> m_externalLinkImages;
    private Dictionary`2<string, int> m_bookmarks;
    private Dictionary`2<string, int> m_FallBackbookmarks;
    private List`1<string> m_editableRanges;
    private Dictionary`2<HeaderFooterType, Dictionary`2<string, HeaderFooter>> m_headerFooterColl;
    private List`1<string> m_symbolFontNames;
    private List`1<Entity> m_bookMarkCollection;
    private List`1<Entity> m_editableRangeCollection;
    private Dictionary`2<string, string> m_oleIds;
    internal Dictionary`2<string, Stream> m_oleContainers;
    private Dictionary`2<string, Stream> m_svgDataCollections;
    private Dictionary`2<string, string> m_svgDataHash;
    internal Dictionary`2<string, Dictionary`2<string, Stream>> m_hfOleContainers;
    private List`1<string> m_oleTypes;
    private Dictionary`2<string, DictionaryEntry> m_xmlItemsRef;
    private Dictionary`2<string, string> m_commentsId;
    private Dictionary`2<string, WComment> m_commentsCollection;
    private Dictionary`2<int, WFootnote> m_footnoteColl;
    private Dictionary`2<int, WFootnote> m_endnoteColl;
    private bool IsParagraphContainsCnfStyle;
    private int m_footnoteId;
    private int m_endnoteId;
    private bool HasHyperlink;
    private Dictionary`2<string, string> m_hyperlinkTargets;
    private Dictionary`2<string, string> m_altChunkTargets;
    private Dictionary`2<string, string> m_altChunkContentTypes;
    private Dictionary`2<string, string> m_footnoteHyperlinks;
    private Dictionary`2<string, string> m_footnoteAlternateChunks;
    private Dictionary`2<string, string> m_endnoteHyperlinks;
    private Dictionary`2<string, string> m_endnoteAlternateChunks;
    private Dictionary`2<string, Dictionary`2<string, string>> m_headerFooterHyperlinks;
    private Dictionary`2<string, Dictionary`2<string, string>> m_headerFooterAlternateChunks;
    private Dictionary`2<string, string> m_commentHyperlinks;
    private Dictionary`2<string, string> m_commentAlternateChunks;
    private Dictionary`2<string, string> m_hfIncludePicFieldUrl;
    private Dictionary`2<string, string> m_inclPicFieldUrl;
    private Dictionary`2<string, WChart> m_hfChartCollection;
    private Dictionary`2<string, WChart> m_footnoteChartCollection;
    private Dictionary`2<string, WChart> m_endnoteChartCollection;
    private Dictionary`2<string, WChart> m_commentsChartCollection;
    private Dictionary`2<string, WChart> m_documentChartCollection;
    private bool m_hasChart;
    private Dictionary`2<string, WChart> m_chartRelationId;
    private Dictionary`2<string, DictionaryEntry> m_relations;
    private Dictionary`2<ChartStyleElements, ShapeStyle> m_defaultChartStyleElements;
    private Double[][] m_defaultColorVariations;
    private Dictionary`2<string, Dictionary`2<string, string>> m_headerFooterInclPicUrls;
    private bool m_hasDiagrams;
    private Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> m_hfRelations;
    private List`1<string> m_chartsPathNames;
    private List`1<string> m_cntlPathNames;
    private int m_trackChangeId;
    private string m_watermarkId;
    private String[] m_splittedTextNode;
    private WTextRange m_splittedItem;
    private bool m_isAlternativeTableFormat;
    private bool m_isAlternativeRowFormat;
    private bool m_isAlternativeCellFormat;
    private bool m_isAlternativeCharFormat;
    private bool m_isAlternativeParaFormat;
    private bool m_isAlternativeSection;
    private HeaderFooterType m_HeaderFooterType;
    private bool m_IsAutoshapeTextboxInHeader;
    private Stack`1<WFieldMark> m_fieldMarkStack;
    private Stack`1<WField> m_fieldStack;
    private Dictionary`2<string, DictionaryEntry> m_settingsRelations;
    private bool m_hasEmbedFonts;
    private AutoShapeHelper m_autoShapeHelper;
    private bool m_isSkipBinExtension;
    private List`1<string> m_imagesPath;
    private List`1<Entity> altChunkAfterBookmarks;
    private Dictionary`2<int, Dictionary`2<ParagraphItem, RevisionType>> m_movingRevisionDetails;
    private List`1<Revision> m_movingRevisionCollection;
    private List`1<Entity> m_commentMarkCollection;
    private bool IsMacroEnabled { get; }
    private bool IsSkipFieldItem { get; private set; }
    private bool IsWord2003ML { get; private set; }
    private bool IsSerializingChoiceContent { get; private set; }
    private bool IsWord2007 { get; }
    private bool IsWord2010 { get; }
    private bool IsWord2013 { get; }
    private bool IsWordLatest { get; }
    private bool IsStrict { get; }
    private Dictionary`2<string, DictionaryEntry> SettingsRelations { get; }
    private List`1<Entity> BookMarkCollection { get; }
    private List`1<Entity> EditableRangeCollection { get; }
    internal Dictionary`2<HeaderFooterType, Dictionary`2<string, HeaderFooter>> HeadersFooters { get; }
    internal List`1<string> ControlsPathNames { get; }
    internal List`1<string> ChartsPathNames { get; }
    internal Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> HFRelations { get; }
    internal Dictionary`2<string, Dictionary`2<string, string>> HeaderFooterInclPicUrls { get; }
    internal Dictionary`2<string, string> InclPicFieldUrl { get; }
    internal Dictionary`2<string, string> HeaderFooterInclPicFieldUrl { get; }
    internal Dictionary`2<string, string> ExternalLinkImages { get; }
    internal Dictionary`2<string, WChart> ChartRelationId { get; }
    internal Dictionary`2<string, WChart> HFChartCollection { get; }
    internal Dictionary`2<string, WChart> FootnoteChartCollection { get; }
    internal Dictionary`2<string, WChart> EndnoteChartCollection { get; }
    internal Dictionary`2<string, WChart> CommentsChartCollection { get; }
    internal Dictionary`2<string, WChart> DocumentChartCollection { get; }
    private Dictionary`2<string, DictionaryEntry> ChartRelations { get; }
    internal List`1<string> ImagesPath { get; }
    internal Dictionary`2<string, string> CommentHyperlinks { get; }
    private Dictionary`2<string, string> CommentAlternateChunks { get; }
    internal Dictionary`2<string, string> HyperlinkTargets { get; }
    internal Dictionary`2<string, string> AltChunkTargets { get; }
    internal Dictionary`2<string, string> AltChunkContentTypes { get; }
    internal Dictionary`2<string, string> FootnoteHyperlinks { get; }
    private Dictionary`2<string, string> FootnoteAlternateChunks { get; }
    internal Dictionary`2<string, string> EndnoteHyperlinks { get; }
    private Dictionary`2<string, string> EndnoteAlternateChunks { get; }
    internal Dictionary`2<string, Dictionary`2<string, string>> HeaderFooterHyperlinks { get; }
    private Dictionary`2<string, Dictionary`2<string, string>> HeaderFooterAlternateChunks { get; }
    internal Dictionary`2<string, WComment> CommentCollection { get; }
    private Dictionary`2<string, string> CommentsId { get; }
    internal Dictionary`2<string, Stream> OleContainers { get; }
    internal Dictionary`2<string, Stream> SvgDataCollection { get; }
    private Dictionary`2<string, string> SvgDataHash { get; }
    internal Dictionary`2<string, Dictionary`2<string, Stream>> HFOleContainers { get; }
    private Dictionary`2<string, string> OleIds { get; }
    internal List`1<string> OleContentTypes { get; }
    internal Dictionary`2<string, DictionaryEntry> XmlItemsRelations { get; }
    private Dictionary`2<int, Dictionary`2<int, string>> ListStyleReferences { get; }
    private Dictionary`2<string, ImageRecord> PictureBullets { get; }
    public bool HasFontTable { get; public set; }
    public bool HasFootnote { get; public set; }
    public bool HasEndnote { get; public set; }
    public bool HasNumbering { get; public set; }
    private Dictionary`2<string, ImageRecord> DocumentImages { get; }
    private Dictionary`2<string, ImageRecord> FootnoteImages { get; }
    private Dictionary`2<string, ImageRecord> EndnoteImages { get; }
    private Dictionary`2<string, ImageRecord> CommentImages { get; }
    private Dictionary`2<int, WFootnote> FootnoteCollection { get; }
    private Dictionary`2<int, WFootnote> EndnoteCollection { get; }
    internal Dictionary`2<string, Dictionary`2<string, ImageRecord>> HeaderFooterImages { get; }
    internal Dictionary`2<string, Dictionary`2<string, Stream>> HeaderFooterSvgImages { get; }
    private Stack`1<WField> FieldStack { get; }
    private Stack`1<WFieldMark> FieldMarkStack { get; }
    private WField CurrentField { get; }
    private AutoShapeHelper AutoShapeHelper { get; }
    private Dictionary`2<int, Dictionary`2<ParagraphItem, RevisionType>> MovingRevisionDetails { get; private set; }
    private List`1<Revision> MovingRevisionCollection { get; }
    private List`1<Entity> CommentMarkCollection { get; }
    private bool get_IsMacroEnabled();
    private bool get_IsSkipFieldItem();
    private void set_IsSkipFieldItem(bool value);
    private bool get_IsWord2003ML();
    private void set_IsWord2003ML(bool value);
    private bool get_IsSerializingChoiceContent();
    private void set_IsSerializingChoiceContent(bool value);
    private bool get_IsWord2007();
    private bool get_IsWord2010();
    private bool get_IsWord2013();
    private bool get_IsWordLatest();
    private bool get_IsStrict();
    private Dictionary`2<string, DictionaryEntry> get_SettingsRelations();
    private List`1<Entity> get_BookMarkCollection();
    private List`1<Entity> get_EditableRangeCollection();
    internal Dictionary`2<HeaderFooterType, Dictionary`2<string, HeaderFooter>> get_HeadersFooters();
    internal List`1<string> get_ControlsPathNames();
    internal List`1<string> get_ChartsPathNames();
    internal Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> get_HFRelations();
    internal Dictionary`2<string, Dictionary`2<string, string>> get_HeaderFooterInclPicUrls();
    internal Dictionary`2<string, string> get_InclPicFieldUrl();
    internal Dictionary`2<string, string> get_HeaderFooterInclPicFieldUrl();
    internal Dictionary`2<string, string> get_ExternalLinkImages();
    internal Dictionary`2<string, WChart> get_ChartRelationId();
    internal Dictionary`2<string, WChart> get_HFChartCollection();
    internal Dictionary`2<string, WChart> get_FootnoteChartCollection();
    internal Dictionary`2<string, WChart> get_EndnoteChartCollection();
    internal Dictionary`2<string, WChart> get_CommentsChartCollection();
    internal Dictionary`2<string, WChart> get_DocumentChartCollection();
    private Dictionary`2<string, DictionaryEntry> get_ChartRelations();
    internal List`1<string> get_ImagesPath();
    internal Dictionary`2<string, string> get_CommentHyperlinks();
    private Dictionary`2<string, string> get_CommentAlternateChunks();
    internal Dictionary`2<string, string> get_HyperlinkTargets();
    internal Dictionary`2<string, string> get_AltChunkTargets();
    internal Dictionary`2<string, string> get_AltChunkContentTypes();
    internal Dictionary`2<string, string> get_FootnoteHyperlinks();
    private Dictionary`2<string, string> get_FootnoteAlternateChunks();
    internal Dictionary`2<string, string> get_EndnoteHyperlinks();
    private Dictionary`2<string, string> get_EndnoteAlternateChunks();
    internal Dictionary`2<string, Dictionary`2<string, string>> get_HeaderFooterHyperlinks();
    private Dictionary`2<string, Dictionary`2<string, string>> get_HeaderFooterAlternateChunks();
    internal Dictionary`2<string, WComment> get_CommentCollection();
    private Dictionary`2<string, string> get_CommentsId();
    internal Dictionary`2<string, Stream> get_OleContainers();
    internal Dictionary`2<string, Stream> get_SvgDataCollection();
    private Dictionary`2<string, string> get_SvgDataHash();
    internal Dictionary`2<string, Dictionary`2<string, Stream>> get_HFOleContainers();
    private Dictionary`2<string, string> get_OleIds();
    internal List`1<string> get_OleContentTypes();
    internal Dictionary`2<string, DictionaryEntry> get_XmlItemsRelations();
    private Dictionary`2<int, Dictionary`2<int, string>> get_ListStyleReferences();
    private Dictionary`2<string, ImageRecord> get_PictureBullets();
    public bool get_HasFontTable();
    public void set_HasFontTable(bool value);
    public bool get_HasFootnote();
    public void set_HasFootnote(bool value);
    public bool get_HasEndnote();
    public void set_HasEndnote(bool value);
    public bool get_HasNumbering();
    public void set_HasNumbering(bool value);
    private Dictionary`2<string, ImageRecord> get_DocumentImages();
    private Dictionary`2<string, ImageRecord> get_FootnoteImages();
    private Dictionary`2<string, ImageRecord> get_EndnoteImages();
    private Dictionary`2<string, ImageRecord> get_CommentImages();
    private Dictionary`2<int, WFootnote> get_FootnoteCollection();
    private Dictionary`2<int, WFootnote> get_EndnoteCollection();
    internal Dictionary`2<string, Dictionary`2<string, ImageRecord>> get_HeaderFooterImages();
    internal Dictionary`2<string, Dictionary`2<string, Stream>> get_HeaderFooterSvgImages();
    private Stack`1<WField> get_FieldStack();
    private Stack`1<WFieldMark> get_FieldMarkStack();
    private WField get_CurrentField();
    private AutoShapeHelper get_AutoShapeHelper();
    private Dictionary`2<int, Dictionary`2<ParagraphItem, RevisionType>> get_MovingRevisionDetails();
    private void set_MovingRevisionDetails(Dictionary`2<int, Dictionary`2<ParagraphItem, RevisionType>> value);
    private List`1<Revision> get_MovingRevisionCollection();
    private List`1<Entity> get_CommentMarkCollection();
    internal void SerializeWordML(Stream stream, WordDocument document);
    internal void SerializeWordML(WordDocument document);
    internal void SerializeWordMLDocument();
    private void SerializeWordMLDiagrams(Package wordPackage);
    private void SerializeWordMLActiveXControl(Package wordPackage);
    private void SerializeWordMLCustomXMLContainer(PartContainer customXMLContainer);
    private void SerializeWordMLChart(Dictionary`2<string, WChart> Charts);
    private void SerializeWordMLChartElements(WChart chart, string id);
    private void SerializeWordMLChartElementRelations(Dictionary`2<string, DictionaryEntry> relations, string OccurrenceOfChart);
    private void SerializeWordMLOleContainer(Dictionary`2<string, Stream> oleContainers);
    private void SerializeWordMLImages(Dictionary`2<string, ImageRecord> imageCollection);
    private void SerializeWordMLGeneralRelation();
    private void SerializeWordMLDocumentRelation();
    private void SerializeWordMLThemes();
    private void SerializeWordMLSettings();
    private void SerializeWordMLNumberingsRelation();
    private void SerializeWordMLFontRelation(Stream fontRelStream, Dictionary`2<string, string> fontRelations);
    private void SerializeWordMLSettingsRelation();
    private void SerializeWordMLStyles();
    private void SerializeWordMLCustomProperties();
    private void SerializeWordMLNumberings();
    private void SerializeWordMLFontTable();
    private void SerializeWordMLAppProperties();
    private void SerializeWordMLCoreProperties();
    internal void Serialize(Stream stream, WordDocument document);
    private void SerializeGlossaryDocument();
    private void AddCustomXMLPartsToArchive();
    private void AddPartContainerToArchive(PartContainer partContainer);
    private void AddPartContainerXMLPartContainersToArchive(string itemName, Dictionary`2<string, PartContainer> xmlPartContainers);
    private void SerializeFontTable(String& contentType);
    private string GetFontFileName(string filePath);
    private string GetFontSignature(Byte[] sig);
    private void SerializeDocument();
    private void SerializeVbaProjectRelations();
    private void SerializeVbaProject();
    private void SerializeVbaProjectSignatures();
    private void SerializeVbaData();
    private void SerializeHeaderFooters();
    private void SerializeHeaderFooter(HeaderFooterType hfType, WordDocument doc);
    private void SerializeHeader(HeaderFooter header, string id, string headerFooterPath, string headerFooterRelsPath);
    private void SerializeFooter(HeaderFooter footer, string id, string headerFooterPath, string headerFooterRelsPath);
    private void SerializeHFRelations(string hfId, string headerFooterRelsPath);
    private void SerializeHFCommonRelations(MemoryStream stream, Dictionary`2<string, DictionaryEntry> xmlItemsRels);
    private bool HasSinglePageField(TextBodyItem item);
    private void AddChartsToZip(Package wordPackage);
    private void AddDiagramToZip(Package wordPackage);
    private void AddControlsToZip(Package wordPackage);
    private void AddToZip(Package wordPackage, string partPath);
    private void SerializeRelItems(Package wordPackage, PartContainer partContainer);
    private void AddPartsToZip(Package wordPackage, Dictionary`2<string, DictionaryEntry> relations);
    private void ParseRelations(XmlReader relReader, Dictionary`2<string, DictionaryEntry> relations);
    private void AddXmlItemsToZip(Package wordPackage);
    private void AddContainerToZip(PartContainer cont, string dataPath);
    private bool WriteRel(string relPath);
    private void SerializeEndnoteRelations();
    private void SerializeFootnoteRelations();
    private void SerializeCommentRelations();
    private void SerializeDocumentRelations();
    private void SerializeNumberingsRelation();
    private void SerializeAltChunkRelations(MemoryStream stream, Dictionary`2<string, string> altChunkCollection);
    private void SerializeHyperlinkRelations(MemoryStream stream, Dictionary`2<string, string> hyperlinkCollection);
    private void SerializeSvgImageRelation();
    private void SerializeHFSvgImageRelation(Dictionary`2<string, Stream> images);
    private void SerializeImagesRelations(MemoryStream stream, Dictionary`2<string, ImageRecord> imageCollection);
    private void SerializeImagesRelations(MemoryStream stream, Dictionary`2<string, ImageRecord> imageCollection, ParagraphItem item);
    private void SerializeExternalLinkImages();
    private void SerializeHeaderFooterRelations(MemoryStream docRelStream);
    private void SerializeHFRelation(HeaderFooterType hfType, MemoryStream stream);
    private void SerializeIncludePictureUrlRelations(MemoryStream stream, Dictionary`2<string, string> InclPicFieldUrl);
    private void SerilaizeXmlItemsRelations(MemoryStream stream, Dictionary`2<string, DictionaryEntry> xmlItemsRels);
    private void AddOLEToZip(Dictionary`2<string, Stream> OleContainers);
    private void AddOLEToZip(Package wordPackage);
    private void SerializeBackground(Background background);
    private bool IsNeedToSkipImageRelation(WPicture pic);
    private void SerializeGradient(BackgroundGradient gradient);
    private void SerializeGradientShadings(BackgroundGradient gradient);
    private void SerializeGradientColor(BackgroundGradient gradient);
    private void UpdateImages(WPicture pic);
    private void SerializeDocumentBody();
    private void SerializeSection(WSection section);
    private void SerializeBodyItems(BodyItemCollection bodyItemCollection, bool isLastSection);
    private void SerializeBodyItem(TextBodyItem item, bool isLastSection);
    private void SerializeStructureDocumentTagInline(InlineContentControl sdTagInline);
    private void SerializeSDTContentInline(ParagraphItemCollection paraItems);
    private void UpdateAlternateChunkRelation(Entity entity, AlternateChunk altChunk);
    private void SerializeAlternateChunk(AlternateChunk altChunk);
    private void SerializeBeforeBookmarks(AlternateChunk altChunk);
    private void SerializeAfterBookmarks();
    private void SerializeStructureDocumentTagBlock(BlockContentControl sdTagBlock);
    private void SerializeSDTProperties(ContentControlProperties properties);
    private void SerializeDocPartItem(DocPartItem docPartItem);
    private void SerializeSDTDataBinding(XmlMapping dataBinding);
    private void SerializeSDTLockSetting(ContentControlProperties properties);
    private void SerializeSDTType(ContentControlProperties properties);
    private void SerializeSDTCheckBox(ContentControlProperties properties);
    private void SerializeSDTDropDownList(ContentControlListItems dropDownList);
    private void SerializeSDTDate(ContentControlProperties properties);
    private string GetDateStorageType(ContentControlDateStorageFormat type);
    private string GetCalenderType(CalendarType type);
    private void SerializeSDTContent(WTextBody body);
    private void SerializeTable(WTable table);
    private void SerializeTableRows(WRowCollection rows);
    private void SerializeRow(WTableRow row);
    private void SerializeCells(WCellCollection cells);
    private void SerializeCell(WTableCell cell);
    private void MergeCharProps(WCharacterFormat ParaBreakCharFormat, WCharacterFormat cellCharacterFormat);
    private void SerializeCellFormat(CellFormat cellFormat);
    private void SerializeCellVerticalAlign(VerticalAlignment alignment);
    private void SerializeTableCellDirection(CellFormat cellFormat);
    private void SerializeCellShading(WTableCell cell, RowFormat tf, RowFormat rf);
    private void SerializeCellMerge(CellFormat cellFormat);
    private void SerializeGridSpan(WTableCell cell);
    private void SerializeCellWidth(WTableCell cell);
    private void SerializeRowFormat(WTableRow row);
    private void SerializeCnfStyleElement(WTableRow row);
    private void SerializeCnfStyleElement(WTableCell cell);
    private void SerializeCnfStyleElement(WParagraph paragraph);
    private bool IsParagraphHasCnfStyle(IStyle style, int rowIndex, WTable table);
    private void SerializeTableFormat(RowFormat format, WTable table);
    private void SerializeTableTrackChanges(RowFormat format, WTable table);
    private void SerializeTableTitle(WTable table);
    private void SerializeTableDescription(WTable table);
    private void SerializeTableCellMargin(RowFormat format);
    private void SerializePaddings(Paddings paddings);
    private void SerializeTblLayout(RowFormat format);
    private void SerializeTableShading(RowFormat format);
    private void SerializeTableBorders(RowFormat format);
    private bool IsNoneBorder(Borders borders);
    private void SerializeTableIndentation(RowFormat format);
    private void SerializeCellSpacing(RowFormat format);
    private void SerializeTableWidth(WTable table);
    private void SerializeTableAlignment(RowFormat format);
    private void SerializeTablePositioning(TablePositioning positioning);
    private void SerializeTableHorizPosition(HorizontalPosition position);
    private void SerializeTableVertPosition(VerticalPosition position);
    private void SerializeTableVertRelation(VerticalRelation relation);
    private void SerializeTableHorizRelation(HorizontalRelation relation);
    private void SerializeTableStyle(RowFormat format);
    private void SerializeTableLook(WTable table);
    private void SerializeTableGrid(WTable table);
    private void SerializeGridColumns(WTableColumnCollection grid);
    private void SerializeGridColumn(float colWidth);
    private void SerializeParagraph(WParagraph paragraph, bool isLastSection);
    private void EnsureWatermark(WParagraph paragraph);
    private void SerializeParagraphItems(ParagraphItemCollection paraItems);
    private void SerializeIsNextParaBookmarkEnd();
    private bool SkipFieldItem(ParagraphItem item);
    private void SerializeParagraphItem(ParagraphItem item, bool isFromCompression);
    private void SerializeMathMLElement(WMath math);
    internal virtual void SerializeRunCharacterFormat(IOfficeMathRunElement paraItem);
    internal virtual void SerializeControlProperties(IOfficeRunFormat mathControlFormat);
    internal virtual void SerializeMathRun(IOfficeMathRunElement officeMathParaItem);
    private void SerializeChart(WChart chart);
    private void SerializeChartGraphicData(WChart chart);
    private void SerializeChartRelation(MemoryStream docRelStream);
    private void SerializeChartExStyles(DictionaryEntry relation, ChartImpl chartImpl, string relId);
    private void SerializeChartExColors(DictionaryEntry relation, ChartImpl chartImpl, string relId);
    private void SerializeChartElements(WChart chart, string id);
    private void SerializeDefaultChartStyles(XmlWriter writer, ChartImpl chart, ApplicationImpl applicationImpl);
    private void SerializeDefaultChartColorStyles(XmlWriter writer, ApplicationImpl applicationImpl);
    private void InitializeChartColorElements();
    private void InitializeChartStyleElements();
    private double GetAppVersion();
    private string NextChartElementsRelationId();
    private void SerializeChartElementRelations(Dictionary`2<string, DictionaryEntry> relations, string OccurrenceOfChart, bool isChart2016);
    private void SerializeChartElementRelation(XmlWriter XmlWriter, string relationshipID, string relationshipType, string targetPath);
    private void SerializeRow(XmlWriter writer, WorksheetImpl sheet, string cellTag, int row);
    private void SerializeCells(XmlWriter writer, WorksheetImpl sheet, string cellTag, int row);
    private void SerializeCell(XmlWriter writer, WorksheetImpl sheet, string cellTag, int row, int column);
    private void SerializeSST(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeStringItem(XmlWriter writer, object objTextOrString);
    private string GetFileExtension(ImageRecord image);
    private void SerializeGroupShape(GroupShape shape);
    private void SerializeFallbackShape(GroupShape shape);
    private void SerializeFallbackNestedGroupShape(ChildGroupShape shape);
    private void SerializeFallbackChildShape(XmlReader reader, ChildShape childShape, string value, string shapeType, int shapeId);
    private void SerializeAutoShape(Shape shape);
    private void SerializeFallbackShape(Shape shape);
    private void SerializeDocx2007Extrusion(ThreeDFormat threeDFormat);
    private void SerializeDocx2007ShadowFormat(Shape shape);
    private void SerializeDocx2007ShadowFormat(ChildShape shape);
    private void SerializeHorizontalRule(Shape shape, Dictionary`2<string, Stream> dictionary);
    private void SerializeHorizontalRule(ChildShape shape, Dictionary`2<string, Stream> dictionary);
    private void SerializeHorizontalRule(Shape shape);
    private void SerializeShapeType(XmlWriter m_writer, GroupShape shape, String& shapeType, XmlReader& reader);
    private void SerializeShapeType(XmlWriter m_writer, ChildShape shape, String& shapeType, XmlReader& reader);
    private void SerializeShapeType(XmlWriter m_writer, Shape shape, String& shapeType, XmlReader& reader);
    private MemoryStream ReadSingleNodeIntoStream(XmlReader reader);
    private void SerializeTextBoxFormat(GroupShape shape, Dictionary`2<string, Stream> docxProps);
    private void SerializeTextBoxFormat(ChildShape shape, Dictionary`2<string, Stream> docxProps);
    private void SerializeTextBoxFormat(ChildGroupShape shape, Dictionary`2<string, Stream> docxProps);
    private void SerializeTextBoxFormat(Shape shape, Dictionary`2<string, Stream> docxProps);
    private void SerializeFlip(Shape shape, StringBuilder textBoxStyle);
    private void SerializeConnectorLine2007Properties(LineFormat lineFormat);
    private void SerializePatternLine(Shape shape);
    private void SerializePatternLine(ChildShape shape);
    private void SerializeDocxStream(Dictionary`2<string, Stream> docxProps, string localName);
    private void SerializeDocxStream(Dictionary`2<string, Stream> docxProps, string localName, Shape shapeItem);
    private void SerializeDocxStream(Dictionary`2<string, Stream> docxProps, string localName, ChildShape shapeItem);
    private void SerializeFillEffects(Shape shape, Dictionary`2<string, Stream> docxProps);
    private void SerializeFillEffects(ChildShape shape, Dictionary`2<string, Stream> docxProps);
    private void SerializeSolidFill2007(Shape shape);
    private void SerializeSolidFill2007(ChildShape shape);
    private void SerializeGridFill2007(Shape shape);
    private void SerializeGridFill2007(ChildShape shape);
    private string GetFocusPosition(Shape shape);
    private string GetFocusPosition(ChildShape shape);
    private string GetShadingVariant(GradientShadingVariant gradientShadingVariant);
    private string GetGradientStopAsColors(GradientFill gradientFill);
    private void SortGradientStops(GradientFill gradientFill);
    private string GetAngle(short angle, bool isAnglePositive);
    private void SerializeBlipFill2007(Shape shape);
    private void SerializeBlipFill2007(ChildShape shape);
    private Stream GetManifestResourceStream(string fileName);
    private Byte[] GetPatternImageBytes(string patternType);
    private void SkipWhitespaces(XmlReader reader);
    private string GetEmuFromPoint(double pointValue);
    private void SerializeAbsolutePicture(ParagraphItem item);
    private string GetShapeHorzOrigin(HorizontalOrigin horzOrigin);
    private string GetHorizOriginAsString(HorizontalOrigin horzOrigin);
    private void SerializeInlinePicture(ParagraphItem item);
    private void SerializeShapeDrawingGraphics(ParagraphItem item);
    private void SerializeChildGroupShape(ChildGroupShape innerChildShape, ParagraphItem item);
    private void SerializeChildShape(ChildShape childShape, ParagraphItem item);
    private void SerializeChildGroupChart(WChart chart, ChildShape childShape);
    private void SerializeChildGroupPicture(ChildShape picture);
    private void SerializeNestedGroupShape(ChildGroupShape childGroupShape);
    private void SerializeShape(ShapeCommon shapeBase, ParagraphItem item);
    private void SerializeCustomGeometry(ShapeCommon shapeCommon);
    private void SerializePathElements(List`1<string> pathElements);
    private void SerializeAVList(ShapeCommon shapeCommon);
    private void SerializeGuideList(ShapeCommon shapeCommon);
    private void SerializePoint(List`1<string> pathElements, int k);
    private void SerializeShape(ChildShape shape, ParagraphItem item);
    private void SerializeEffectList(List`1<EffectFormat> effectList);
    private void SerializeThreeDSceneEffects(ThreeDFormat threeDFormat);
    private void SerializeBackdropEffect(ThreeDFormat threeDFormat);
    private void SerializeCameraEffect(ThreeDFormat threeDFormat);
    private void SerializeLightRig(ThreeDFormat threeDFormat);
    private void SerializeThreeDShapeEffects(ThreeDFormat threeDFormat);
    private void SerializePresetMaterialType(ThreeDFormat threeDFormat);
    private void SerializeReflectionEffect(Reflection reflection);
    private void SerializeTextOutLine(LineFormat lineFormat);
    private void SerializeTextReflectionEffect(Reflection reflection);
    private string GetReflectionAlignment(ReflectionAlignmnet reflectionAlignment);
    private void SerializeGlowEffect(GlowFormat glowFormat);
    private void SerializeThreeDTextEffect(ThreeDFormat threeDFormat);
    private void SerializeTextPresetMaterialType(ThreeDFormat threeDFormat);
    private void SerializeShadowEffect(ShadowFormat shadowFormat);
    private void SerializeTextShadowEffect(ShadowFormat shadowFormat);
    private string GetShadowAlignment(ShadowAlignment shadowAlignment);
    private void SerializeTextFill(FillFormat fillFormat);
    private void SerializeTextSolidFill(Color fillColor, float transparency);
    private void SerializeTextGradientFill(GradientFill gradientFill);
    private void SerializeTextGradientStop(GradientStop gradientStop);
    private void SerializeConnectorLineProperties(LineFormat lineFormat);
    private void SerializePatternFill(LineFormat lineFormat);
    private bool IsConnectorShape(AutoShapeType autoShapeType);
    private void SerializeBlipFill(Shape shape);
    private void SerializeBlipExtensions(FillFormat fillFormat, Entity baseEntity);
    private void SerializeBlipFill(FillFormat fillFormat, Entity baseEntity, WPicture picture, ChildShape childShape);
    private void SerializeBlipExtensions(FillFormat fillFormat, Entity baseEntity, WPicture picture, ChildShape childShape);
    private void SerializeBlipFill(FillFormat fillFormat, Entity baseEntity);
    private void SerializeBlipExtensions(Shape shape);
    private void SerializeImageProperties(FillFormat fillFormat, Entity baseEntity);
    private void SerializeImageProperties(GroupShape shape);
    private void SerializeTileRectange(TileRectangle tileRectangle);
    private string GetBlipAlignment(TextureAlignment textureAlignment);
    private void SerializePatternFill(FillFormat fillFormat);
    private string GetPatternFillType(PatternType patternType);
    private void SerializeSolidFill(Color fillColor, float transparency);
    private string GetLineStyle(LineStyle lineStyle, bool is2007);
    private void SerializeTextBoxContent(WTextBody textBody);
    private void SerializeChildShapeTextBoxContent(WTextBody textBody, TextFrame textFrame);
    private void SerializeTextBoxStyle(TextFrame textFrame);
    private void SerializeBodyProperties(Shape shape);
    private void SerializeBodyProperties(ChildShape shape);
    private void SerializeTextDirection(TextDirection textDirection);
    private void SerializeAutoShapeStyles(Shape shape);
    private void SerializeAutoShapeStyles(ChildShape shape);
    private void SerializeAutoShapeStyles(GroupShape shape);
    private void SerializeAutoShapeStyles(ShapeStyleReference shapeStyleRef, bool isFontRef);
    private void SerializeWatermark(Watermark watermark);
    private void SerializeTextWatermark(TextWatermark textWatermark);
    private void SerializePictureWatermark(PictureWatermark pictWatermark);
    private string SerializeTextStyleAttribute(TextWatermark textWatermark);
    private void SerializeSafeFieldText(string inputString, bool isDeletedText);
    private string UpdateInclPicFieldUrl(string url, WField field);
    private void SerializeFieldBegin(WField field);
    private bool IsPictureHyperLink(WField field);
    private void SerializeHyperlinkAttributes(WField field);
    private void WriteLocalReference(WField field);
    private void SerializeFootEndnote(WFootnote footnote, bool isFromCompression);
    private void SerializeFootEndnotes(bool IsEndnotes);
    private void SerializeFootEndnotesStartElement(string collTagStr, string elemTagStr);
    private void SerializeFootEndnoteElement(WFootnote footnote, bool isEndNote, int id);
    private void SerializeDropDownFormField(WDropDownFormField dropDownFormField);
    private void SerializeCheckBoxField(WCheckBox checkBox);
    private void SerializeTextFormField(WTextFormField textFormField);
    private void SerializeFormFieldData(WFormField field);
    private void SerializeTextboxes(WTextBoxCollection textboxes);
    private void SerializeTextBox(WTextBox textBox);
    private string SerializeFallbackTextDirection(TextDirection textDirection);
    private void SerializeFillEffects(WTextBox textBox);
    private void SerializeGradientFill(BackgroundGradient backgroundGradient);
    private void SerializePictureFill(WTextBox textBox);
    private void SerializePatternFill(WTextBox textBox, bool isHeaderFooter);
    private Stream SetIDAttribute(Stream inputStream, string relationId);
    private void SetRelationshipIDAttribute(XmlReader reader, XmlWriter writer, string relationId);
    private bool IsNotShapeFieldResult();
    private void SerializeTextBoxFormat(bool visible, WTextBoxFormat textBoxFormat);
    private string GetTextBoxWrapType(WTextBoxFormat textBoxFormat);
    private string GetHeightOrigin(HeightOrigin rel);
    private string GetWidthOrigin(WidthOrigin rel);
    private string GetTextWrappingTypeAsString(TextWrappingType textWrappingType);
    private string GetTextWrappingStyleAsString(TextWrappingStyle textWrappingStyle);
    private void SerializeStroke(WTextBoxFormat textBoxFormat);
    private string GetDashStyle(LineDashing lineDashing, bool is2007);
    private string GetLineStyle(TextBoxLineStyle lineStyle, bool is2007);
    private void SerializeInsetAttribute(WTextBox textBox);
    private void SerializeInsetAttribute(TextFrame textFrame);
    private void SerializeXmlParagraphItem(XmlParagraphItem item, bool isInGroupShape);
    private Stream UpdateXMLRelation(Shape shape, Stream stream);
    private Stream UpdateXMLRelation(ChildShape shape, Stream stream);
    private Stream ChangeItemRel(Shape shape, Stream shapestream);
    private Stream ChangeItemRel(ChildShape shape, Stream shapestream);
    private void ChangePicRel(Shape shape, string oldID, string newID);
    private void ChangePicRel(ChildShape shape, string oldID, string newID);
    private Stream ChangeItemRel(XmlParagraphItem item);
    private void ChangePicRel(XmlParagraphItem item, string oldID, string newID);
    private Entity GetXmlItemOwner(XmlParagraphItem item);
    private void UpdateHFXmlRels(string newId, HeaderFooter hf, DictionaryEntry itemRel);
    private Stream ChangeIDAttribute(Stream inputStream, List`1& relationIds, XmlParagraphItem xmlParaItem);
    private void ChangeRelationshipIDs(XmlReader reader, XmlWriter writer, List`1& relationIds, XmlParagraphItem xmlParaItem);
    private void ChangeNumId(XmlReader reader, XmlWriter writer);
    private string GetListNumId(string styleName);
    private void ChangeRelationshipIDAttribute(XmlReader reader, XmlWriter writer, List`1& relationIds);
    private void ChangeBlipIDAttribute(XmlReader reader, XmlWriter writer, List`1& relationIds);
    private void ChangeRelationIDAttribute(XmlReader reader, XmlWriter writer, List`1& relationIds);
    private void ChangeDocPropertyIDAttribute(XmlReader reader, XmlWriter writer);
    private void ChangeShapeIDAttribute(XmlReader reader, XmlWriter writer, XmlParagraphItem xmlParaItem);
    private void UpdateZOrderPosition(XmlReader reader, XmlParagraphItem xmlParaItem, XmlWriter writer);
    private void AddXmlItemContType(string relType, string relTarget);
    private void UpdateChartInnerRelation(string containerName);
    private void SerializeAbsoluteTab(WAbsoluteTab absoluteTab);
    private void SerializeOleObject(WOleObject oleObject);
    private void SerializeOleData(WOleObject oleObject, string shapeId);
    private void SerializeOlePicture(WOleObject oleObject);
    private void SerializePictureOffset(WPicture picture);
    private void WriteLinkOptions();
    private string GetOleFileName(OleObjectType objectType, string stringObjType);
    private string GetOleRelType(OleObjectType objectType, string stringObjType);
    private string GetOlePictureStyle(WPicture picture);
    private void UpdateOleContentType(Stream nodeStream);
    private void UpdateOleContentType(string type);
    private void SerializeSymbol(WSymbol symbol);
    private void SerializeFieldMark(WFieldMark fieldMark);
    private void SerializePicture(WPicture picture);
    private bool IsPictureBullet(WPicture picture);
    private void SerializeDrawing(WPicture picture);
    private void SerializeInlinePicture(WPicture picture);
    private RectangleF GetBoundsAfterRotation(RectangleF bounds, float rotation);
    private float GetRotationAngle(float rotation);
    private void SerializeAbsolutePicture(WPicture picture);
    private void SerializePicProperties(WPicture picture);
    private void SerializeDrawingGraphics(WPicture picture);
    private string GetFillRectangleOffsetVal(double value);
    private void SerializeInlineShapeLine(InlineShapeObject shape);
    private string GetLanguage(short key);
    private string GetLineCapStyle(LineCap lineCap, bool is2007);
    private string GetLineJoinStyle(LineJoin linejoin);
    private string GetLineEnd(ArrowheadStyle lineEnd, bool is2007);
    private string GetLineEndWidth(LineEndWidth lineEndWidth, bool is2007);
    private string GetLineEndLength(LineEndLength lineEndLength, bool is2007);
    private void SerializeShapeLine(InlineShapeObject shape);
    private void SerializeGradientFill(GradientFill gradientFill);
    private void SerializeGradientStop(GradientStop gradientStop);
    private string GetFlipOrientation(FlipOrientation flip);
    private string GetGradientShadeType(GradientShadeType shade);
    private void SerializePictureHyperlink(WPicture picture);
    private string UpdateShapeId(ChildShape childShape);
    private string UpdateShapeId(WPicture picture, bool isOlePicture, WOleObject oleObject);
    private string AddImageRelation(Dictionary`2<string, ImageRecord> imageCollection, ImageRecord imageRecord, bool IsSkipToAdd);
    private void UpdateHFImageRels(string id, HeaderFooter hf, ImageRecord imageRecord);
    private void UpdateHFSvgImageRels(string id, HeaderFooter hf, Stream stream);
    private string UpdateHFImageRels(HeaderFooter hf, WPicture image);
    private string UpdateHFImageRels(HeaderFooter hf, ImageRecord imageRecord, bool IsSkipToAdd);
    private string GetHeaderFooterId(HeaderFooter hf);
    private IEntity GetPictureOwner(WPicture pic);
    private IEntity GetOleObjectOwner(WOleObject oleObject);
    private void SerializeShape(WPicture picture);
    private string GetGainStringValue(WPicture picture);
    private string GetBlackLevelStringValue(WPicture picture);
    private float SetCroppingValue(float offset);
    private void SerializeShapeBorderColor(InlineShapeObject shape, bool isOleObjectShape);
    private void WriteStartElement(Boolean& isWritten);
    private void SerializeStrokeProps(InlineShapeObject shape);
    private string GetStrokeLineStyle(TextBoxLineStyle lineStyle);
    private string GetStrokeDashStyle(LineDashing lineDashing);
    private void SerializeWrapping(TextWrappingStyle wrapStyle, TextWrappingType wrapType);
    private void SerializeWrapPolygon(Entity entity, WrapPolygon wrapPolygon);
    private PointF[] AdjustPolygonPoints(List`1<PointF> vertices);
    private string GetWrappingStyleAsString(TextWrappingStyle wrapStyle);
    private string GetVerticalOrginAsString(VerticalOrigin verticalOrigin, bool isShapeStyle);
    private string GetWrappingTypeAsString(TextWrappingType wrapType);
    private string GetPictureWrappingTypeAsString(TextWrappingType wrapType);
    private void SerializeShapeBorders(PICF picDescriptor);
    private void SerializeShapeBorder(BorderCode border, string localName);
    private string GetShapeBorderStyleAsString(BorderStyle borderStyle);
    private string SerializeShapePictStyle(WPicture picture);
    private string SerializeWrapPolygons(WPicture picture);
    private void SerializeBookmarkEnd(BookmarkEnd bookmarkEnd);
    private void SerializeBookmarkStart(BookmarkStart bookmarkStart);
    private void SerializeEditableRangeEnd(EditableRangeEnd editableRangeEnd);
    private void SerializeEditableRangeStart(EditableRangeStart editableRangeStart);
    private void SerializeBreak(Break brk);
    private void SerializeCommentReference(WComment comment);
    private void WriteCommItems(WComment comment, string commentId);
    private void SerializeCommentRangeStart(string commentId);
    private void SerializeCommentRangeEnd(string commentId, WCommentMark commentMark);
    private void SerializeComments();
    internal void SerializeComment(WComment comment, string id);
    private void SerializeCommentMark(WCommentMark commMark);
    private bool CommentIdCheck(string currCommentId);
    private void SerializeCommentsExtended();
    private void SerializeCommentExtended(WCommentExtended commentExtended);
    private void SerializeTextRange(ParagraphItem item);
    private bool IsFieldCode();
    private void SerializeText(string textToDisplay, bool isDeletedText, bool isInstrText);
    private void SerializeRawText(string text, bool isDeletedText);
    private void SerializeInstrText(string text, bool isDeletedText);
    private void SerializeTableOfContents(TableOfContent toc);
    private string GetFieldTypeAsString(FieldType type);
    private void SerializeSectionProperties(WSection section, bool isTrackrevision);
    private void SerializeHFReference(WHeadersFooters headerFooters);
    private void SerializeDocGrid(WSection section);
    private void SerializeSectionProtection(WSection section);
    private void SerializeTextDirection(WSection section);
    private void SerializeColumns(WSection section);
    private void SerializePageSetup(WPageSetup pageSetup);
    private void SerializePageBorders(Borders borders);
    private void SerializeTableCellBorders(CellFormat format);
    private bool IsNoneBorder(Border border);
    private void SerializeBorders(Borders borders, int multipler);
    private void SerializePageMargins(WPageSetup pageSetup);
    private void SerializePageSize(WPageSetup pageSetup);
    private void SerializePageNumberType(WPageSetup pageSetup);
    private void SerializeLineNumberType(WPageSetup pageSetup);
    private void SerializeSectionType(SectionBreakCode sectionBreakCode);
    private string GetSectionBreakCode(SectionBreakCode sectionBreakCode);
    private void SerializeEndnoteProperties(WSection section);
    private void SerializeFootnoteProperties(WSection section);
    private bool IsNeedToSerializeSectionFootNoteProperties(WSection section);
    private bool IsNeedToSerializeSectionEndNoteProperties(WSection section);
    private bool IsNeedToSerializeDocumentFootNoteProperties();
    private bool IsNeedToSerializeDocumentEndNoteProperties();
    private void SerializeEndnoteFootnoteElement(string elemName, string elemValue);
    private void SerializeEndnoteFootnoteNumberFormat(WSection section, bool isFootnote);
    private void SerializeEndnoteFootnoteNumberFormat(bool isFootnote);
    private void AddHeaderFooter(HeaderFooter hf, HeaderFooterType hfType, string id);
    private void SerializeThemes();
    private void SerializeFormatScheme();
    private void SerializeFillStyleList(List`1<FillFormat> fillFormats);
    private void SerializeThemePattern(FillFormat fillFormat);
    private void SerializeThemeColor(List`1<DictionaryEntry> fillSchemeColorTransforms);
    private void SerializeThemeLinePattern(LineFormat lineFormat);
    private void SerializeThemeSolidFill(FillFormat fillFormat);
    private void SerializeThemeGradient(GradientFill gradientFill);
    private void SerializeThemeGradientStop(GradientStop gradientStop);
    private void SerializeEffectStyles(EffectFormat effectFormat);
    private void SerializeLineStyleList(LineFormat lineFormat);
    private void SerializeThemeLineSolidFill(LineFormat lineFormat);
    private void SerializeColorScheme();
    private void SerializeFontScheme();
    private void SerializeDefaultThemes();
    private void SerializeDefaultColorScheme(bool isWord2013);
    private void SerializeRGBColor(string colorValue, string alphaColorValue);
    private void SerializeDefaultFontScheme(bool isWord2013);
    private void SerializeDefaultFormatScheme(bool isWord2013);
    private void SerializeDefaultFillStyleList(bool isWord2013);
    private void SerializeDefaultLineStyleList(bool isWord2013);
    private void SerializeDefaultLineStyle(string width, string lineCap, string lineType, string alignment, bool isMiter);
    private void SerializeDefaultEffectStyleList(bool isWord2013);
    private void SerializeEffectStyle(string blurRadius, string distance, string alpha, bool isAlign);
    private void SerializeDefaultBackgroundFillStyleList(bool isWord2013);
    private void SerializeDefaultBackgroundFillStyleList();
    private void SerializeSchemeColor(string value);
    private void SerializeGradientRelativePositions(string lumMod, string satMod, string tint, string shade);
    private void SerializeDefaultThemeFont(string fontType, bool isWord2013);
    private void SerializeSettings();
    private void SerializeMailMergeSettings();
    private void SerializeMailMergeSettingsMainDocumentType();
    private void SerializeMailMergeSettingsDataType();
    private void SerializeMailMergeSettingsDataSource();
    private void SerializeMailMergeSettingsHeaderSource();
    private void SerializeMailMergeSettingsDestination();
    private void SerializeMailMergeSettingsCheckErrors();
    private void SerializeSettingsRelation();
    private void ParseSettingsRelations();
    private bool SerializeDocxProps(List`1<Stream> tempDocxProps, string propertyName);
    private void SerializeDocxProps(Dictionary`2<string, Stream> tempDocxProps, string propertyName);
    private void SerializeCompatibilityProperties();
    private void SerializeCommonCompatibilityOptions();
    private void SerializeCompatSettings();
    private void SerializeProtect(ProtectionType protectionType);
    private void SerializeDocVariables(DocVariables docVariables);
    private void SerializeFootnoteSettings();
    private void SerializeFootnotePosition();
    private void WriteEntPosition();
    private void SerializeFootnotePosition(WSection section);
    private void WriteFootEndnoteID(bool isFootnote, int id);
    private void SerializeNumberings();
    private void SerializeListOverrides(ListOverrideStyleCollection listOverrideStyles);
    private void SerializeOverrideStyle(ListOverrideStyle listOverrideStyle);
    private void SerializeOverrideLevel(int levelIndex, OverrideLevelFormat level);
    private void SerializeListInstances(ListStyleCollection listStyles);
    private void SerializeAbstractListStyles(ListStyleCollection listStyles);
    private void SerializeListLevel(WListLevel listLevel, int levelIndex);
    private void SerializeLegacyProperties(WListLevel listLevel);
    private void SerializeLevelFollow(WListLevel listLevel);
    private string RemoveIllegalXMLCharacters(string text);
    private void SerializeLevelText(WListLevel listLevel, int lvlIndex);
    private void SerializePictureBullets(ListStyleCollection listStyleCollection);
    private void SerializePictureBullet(WListLevel listLevel);
    private void SerializeStyles();
    private void SerializeDocumentStyles();
    private string GetStyleId(string styleName);
    private void SerializeStyle(Style style, WordDocument document);
    private void SerializeTableStyle(WTableStyle style);
    private void SerializeConditionalFormattingStyle(ConditionalFormattingType code, ConditionalFormattingStyle style);
    private string GetConditionalStyleType(ConditionalFormattingType code);
    private void SerializeTableStyleCellProperties(TableStyleCellProperties props);
    private void SerializeTableStyleRowProperties(TableStyleRowProperties props);
    private void SerializeTableStyleTableProperties(TableStyleTableProperties props);
    private void SerializeShading(TableStyleCellProperties props);
    private void SerializeShading(TableStyleTableProperties props);
    private void SerializeLatentStyles();
    private void SerializeDefaultStyles();
    private void SerializeTableGridStyle();
    private void SerializeNoListStyle();
    private void SerializeTableNormalStyle();
    private void SerializeDefaultParagraphStyle();
    private void SerializeCharacterFormat(WCharacterFormat characterFormat);
    private void SerializeLigatures(WCharacterFormat characterFormat);
    private void SerializeNumberForm(WCharacterFormat characterFormat);
    private void SerializeNumberSpacing(WCharacterFormat characterFormat);
    private void SerializeStylisticSet(WCharacterFormat characterFormat);
    private void SerializeContextualAlternates(WCharacterFormat characterFormat);
    private void SerializeCharacterShading(WCharacterFormat characterFormat);
    private void SerializeCharacterShading(WCharacterFormat characterFormat, Dictionary`2<int, object> oldPropertiesHash);
    private void SerializeParagraphFormat(WParagraphFormat paragraphFormat, WParagraph paragraph);
    private void SerializeMirrorIndents(WParagraphFormat paragraphFormat);
    private void SerializeSuppressAutoHyphens(WParagraphFormat paragraphFormat);
    private string GetNextTChangeId();
    private bool SerializeDirectionalOverride(ParagraphItem item);
    private void SerializeRevisionStart(ParagraphItem item);
    private bool IsFirstOrLastRevItem(ParagraphItem item, Revision revision, bool isStart);
    private void SerializeRevisionEnd(ParagraphItem item);
    private void WriteMoveRangeEnd(RevisionType revisionType, int idValue);
    private void SerializeMoveRangeEnd();
    private void SerializeRevisionsInFormatting(List`1<Revision> revisions);
    private void SerializeTrackChangeProps(string type, string authorName, DateTime dt);
    private void SerializeTrackChangeProps(string type, string authorName, DateTime dt, string name);
    private void SerializeParagraphAlignment(byte value);
    private void SerializeParagraphTextAlignment(byte value);
    private void SerializeParagraphTextboxTightWrap(byte value);
    private void SerializeIndentation(WParagraphFormat paragraphFormat);
    private void SerializeParagraphSpacing(WParagraphFormat paragraphFormat);
    private void SerializeTabs(TabCollection tabs);
    private void SerializeTab(Tab tab);
    private void SerializeParagraphShading(WParagraphFormat paragraphFormat);
    private void SerializeParagraphBorders(WParagraphFormat paragraphFormat, int multiplier);
    private void SerializeListParagraph(WParagraph paragraph);
    private void SerializeListStyle(WParagraphFormat paragraphFormat);
    private void SerializeListFormat(WListFormat lf);
    private void SerializeFrame(WParagraphFormat paragraphFormat);
    private void SerializeFrameWrapMode(FrameWrapMode wrapFrameAround);
    private void SerializeBorder(Border border, string tagName, int multiplier);
    private void SerializeLanguage(WCharacterFormat characterFormat, bool isThemeLang);
    private void SerializeLanguage(WCharacterFormat characterFormat, Dictionary`2<int, object> oldPropertiesHash);
    private void SerializeBoolProperty(string tag, bool value);
    private WParagraphFormat GetBaseFormat(WParagraphFormat format);
    private void SerializeContentTypes(string type);
    private void SerializeContentTypeForGlossary(MemoryStream contentStream);
    private void AddAlternateChunkItem(Dictionary`2<string, string> altchunkItems);
    private void SerializeDiagramType(Package wordPackage, MemoryStream stream);
    private string GetContentType(string partName);
    private void SerializeOleContentType(MemoryStream contentStream);
    private void SerializeHFContentTypes(MemoryStream stream);
    private void SerializeHeaderFootersContentType(HeaderFooterType hfType, MemoryStream stream);
    private void SerializeChartContentType(MemoryStream memoryStream);
    private void WriteXmlItemsContentTypes(MemoryStream stream);
    private void SerializeDefaultContentType(MemoryStream stream, string extension, string contentType);
    private void SerializeOverrideContentType(MemoryStream stream, string partName, string contentType);
    private void SerializeGeneralRelations();
    private void SerializeRelationShip(Stream stream, string relationshipID, string relationshipType, string targetPath);
    private void SerializeRelationShip(string relationshipID, string relationshipType, string targetPath);
    private void SerializeCoreProperties();
    private void SerializeCustomProperties();
    private bool isValidType(PropertyType type);
    private string ConvertToValidXmlString(string text);
    private bool IsValidXmlChar(ushort character);
    private void SerializeAppProperties();
    internal static string ReplaceInvalidSurrogateCharacters(string text);
    private bool IsDefaultStyle(Style style);
    private string GetTabLeader(TabLeader tabLeader);
    private string GetTabJustification(TabJustification tabJustification);
    private int GetListId(WListFormat lf);
    private int AddListOverride(int listId, string lfoStyleName);
    private void SerializeNumPr(int listId, int listLevel);
    private bool HasFont(Dictionary`2<int, object> oldPropertiesHash);
    private bool HasFont(WCharacterFormat characterFormat);
    private XmlWriter CreateWriter(Stream data);
    private XmlReader CreateReader(Stream stream);
    private void ResetRelationShipID();
    private string GetNextRelationShipID();
    private int GetNextID();
    private string GetTextureStyle(TextureStyle texttureStyle);
    private string GetBorderStyle(BorderStyle borderStyle);
    private string GetUnderlineStyle(UnderlineStyle underlineStyle);
    private string GetTextEffect(TextEffect textEffect);
    private string GetEmphasisType(EmphasisType emphasisType);
    private string GetHighlightColor(Color color);
    public string ToString(float value);
    private string GetRGBCode(Color color);
    private float GetDefFontSize(WordDocument doc, short key);
    private string GetPatternType(WListLevel listLevel);
    private char GetListSymbol(int level);
    internal static string UpdateNumberPrefOrSuf(string prefix);
    private string GetPageNumType(PageNumberStyle pageNumberStyle);
    private int GetNextBookmarkID();
    private long GetNextDocPrID();
    private int GetNextShapeID();
    private string ModifyText(string text);
    private Entity GetBaseEntity(Entity entity);
    private Entity GetChartBaseEntity(Entity entity);
    private bool IsPageBreakNeedToBeSkipped(Entity entity);
    private void UpdateItemRelation(ParagraphItem item, string newID, DictionaryEntry itemRel);
    private List`1<string> FindRelationshipIds(Stream XmlParaItemStream);
    private bool IsDocumentContainsDefaultTableStyle();
    internal void Close();
    internal bool StartsWithExt(string text, string value);
}
internal class Syncfusion.DocIO.DLS.EditableRange : object {
    private EditableRangeStart m_editableRangeStart;
    private EditableRangeEnd m_editableRangeEnd;
    internal string Id { get; }
    internal EditableRangeStart EditableRangeStart { get; }
    internal EditableRangeEnd EditableRangeEnd { get; }
    internal EditableRange(EditableRangeStart start);
    internal EditableRange(EditableRangeStart start, EditableRangeEnd end);
    internal string get_Id();
    internal EditableRangeStart get_EditableRangeStart();
    internal EditableRangeEnd get_EditableRangeEnd();
    internal void SetStart(EditableRangeStart start);
    internal void SetEnd(EditableRangeEnd end);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.EditableRangeCollection : CollectionImpl {
    internal EditableRange Item { get; }
    internal EditableRangeCollection(WordDocument doc);
    internal EditableRange get_Item(string id);
    internal EditableRange FindById(string id);
    internal void RemoveAt(int index);
    internal void Remove(EditableRange editableRange);
    internal void Add(EditableRange editableRange);
    internal void AttachEditableRangeStart(EditableRangeStart editableRangeStart);
    internal void AttacheEditableRangeEnd(EditableRangeEnd editableRangeEnd);
}
internal class Syncfusion.DocIO.DLS.EditableRangeEnd : ParagraphItem {
    private string m_id;
    private byte m_bFlags;
    public EntityType EntityType { get; }
    internal string Id { get; }
    internal bool IsAfterParagraphMark { get; internal set; }
    internal bool IsAfterCellMark { get; internal set; }
    internal bool IsAfterRowMark { get; internal set; }
    internal bool IsAfterTableMark { get; internal set; }
    internal bool IsDetached { get; internal set; }
    internal EditableRangeEnd(WordDocument doc);
    internal EditableRangeEnd(IWordDocument document, string id);
    public virtual EntityType get_EntityType();
    internal string get_Id();
    internal bool get_IsAfterParagraphMark();
    internal void set_IsAfterParagraphMark(bool value);
    internal bool get_IsAfterCellMark();
    internal void set_IsAfterCellMark(bool value);
    internal bool get_IsAfterRowMark();
    internal void set_IsAfterRowMark(bool value);
    internal bool get_IsAfterTableMark();
    internal void set_IsAfterTableMark(bool value);
    internal bool get_IsDetached();
    internal void set_IsDetached(bool value);
    internal void SetId(string id);
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void Detach();
    internal virtual void AttachToDocument();
    protected virtual object CloneImpl();
    internal virtual void Close();
    protected virtual void CreateLayoutInfo();
}
internal class Syncfusion.DocIO.DLS.EditableRangeStart : ParagraphItem {
    private string m_id;
    private short m_colFirst;
    private short m_colLast;
    private string m_ed;
    private string m_edGrp;
    private byte m_bFlags;
    public EntityType EntityType { get; }
    internal string Id { get; }
    internal short ColumnFirst { get; internal set; }
    internal short ColumnLast { get; internal set; }
    internal string Ed { get; internal set; }
    internal string EdGrp { get; internal set; }
    internal bool IsDetached { get; internal set; }
    internal EditableRangeStart(WordDocument doc);
    internal EditableRangeStart(IWordDocument doc, string id);
    public virtual EntityType get_EntityType();
    internal string get_Id();
    internal short get_ColumnFirst();
    internal void set_ColumnFirst(short value);
    internal short get_ColumnLast();
    internal void set_ColumnLast(short value);
    internal string get_Ed();
    internal void set_Ed(string value);
    internal string get_EdGrp();
    internal void set_EdGrp(string value);
    internal bool get_IsDetached();
    internal void set_IsDetached(bool value);
    internal void SetId(string id);
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void Detach();
    internal virtual void AttachToDocument();
    protected virtual object CloneImpl();
    internal virtual void Close();
    protected virtual void CreateLayoutInfo();
}
internal enum Syncfusion.DocIO.DLS.EmphasisType : Enum {
    public int value__;
    public static EmphasisType NoEmphasis;
    public static EmphasisType Dot;
    public static EmphasisType Comma;
    public static EmphasisType Circle;
    public static EmphasisType UnderDot;
}
public class Syncfusion.DocIO.DLS.Endnote : object {
    private WTextBody m_separator;
    private WTextBody m_continuationSeparator;
    private WTextBody m_continuationNotice;
    private WordDocument m_ownerDoc;
    public WTextBody Separator { get; public set; }
    public WTextBody ContinuationSeparator { get; public set; }
    public WTextBody ContinuationNotice { get; public set; }
    public Endnote(WordDocument document);
    internal Endnote(Endnote endnote);
    public WTextBody get_Separator();
    public void set_Separator(WTextBody value);
    public WTextBody get_ContinuationSeparator();
    public void set_ContinuationSeparator(WTextBody value);
    public WTextBody get_ContinuationNotice();
    public void set_ContinuationNotice(WTextBody value);
    public Endnote Clone();
    internal void SetOwner(WordDocument document);
    internal void Close();
}
internal class Syncfusion.DocIO.DLS.Entities.Image : object {
    private static string DEF_GIF_HEADER;
    private static int DEF_TIFF_MARKER;
    private Stream m_stream;
    private int m_height;
    private int m_width;
    private long m_Xdpi;
    private long m_Ydpi;
    private ImageFormat m_format;
    private Byte[] m_pngHeader;
    private Byte[] m_jpegHeader;
    private Byte[] m_bmpHeader;
    private Byte[] m_tiffHeader1;
    private Byte[] m_tiffHeader2;
    private Byte[] m_imageData;
    public int Width { get; }
    public int Height { get; }
    public ImageFormat Format { get; }
    public Size Size { get; }
    internal Byte[] ImageData { get; }
    public ImageFormat RawFormat { get; }
    internal long HorizontalDpi { get; internal set; }
    internal long VerticalDpi { get; internal set; }
    public bool IsMetafile { get; }
    public Image(Stream stream);
    public int get_Width();
    public int get_Height();
    public ImageFormat get_Format();
    public Size get_Size();
    internal Byte[] get_ImageData();
    public ImageFormat get_RawFormat();
    internal long get_HorizontalDpi();
    internal void set_HorizontalDpi(long value);
    internal long get_VerticalDpi();
    internal void set_VerticalDpi(long value);
    public bool get_IsMetafile();
    private void Initialize();
    private bool CheckIfTiff();
    private bool CheckIfBmp();
    private void ParseBmpImage();
    private bool CheckIfIcon();
    private bool CheckIfPng();
    private bool CheckIfJpeg();
    private bool CheckIfGif();
    private bool CheckIfEmfOrWmf();
    private void ParsePngImage();
    private Stream GetManifestResourceStream(string fileName);
    private void ParseJpegImage();
    private void GenerateJPEGNormalImage(Byte[] imgData, long index, long length, long bytesleft);
    private void GenerateJPEGJFIFImage(Byte[] imgdata, long index, long length, long bytesleft);
    private void GenerateJPEGEXIFImage(Byte[] imgdata, long index, long length, long bytesleft);
    private void App0Resolution(Byte[] imgdata, long index);
    private void APP1Resolution(Byte[] imgdata, long length, long index, long bytesleft);
    private void ParseGifImage();
    private void ParseIconImage();
    private void ParseEmfOrWmfImage();
    private void ParseTifImage();
    private int ReadUInt32();
    private int ReadInt32();
    private int ReadUInt16();
    private int ReadInt16();
    private int ReadWord();
    private int ReadShortLE();
    private string ReadString(int len);
    private void Reset();
    internal static Image FromStream(MemoryStream memoryStream);
    internal void Save(MemoryStream memoryStream, ImageFormat imageFormat);
    public sealed virtual void Dispose();
}
internal enum Syncfusion.DocIO.DLS.Entities.ImageFormat : Enum {
    public int value__;
    public static ImageFormat Unknown;
    public static ImageFormat Bmp;
    public static ImageFormat Emf;
    public static ImageFormat Gif;
    public static ImageFormat Jpeg;
    public static ImageFormat Png;
    public static ImageFormat Wmf;
    public static ImageFormat Icon;
    public static ImageFormat Tiff;
    public static ImageFormat Exif;
    public static ImageFormat MemoryBmp;
}
internal class Syncfusion.DocIO.DLS.Entities.Metafile : Image {
    public Metafile(Stream stream);
}
public abstract class Syncfusion.DocIO.DLS.Entity : XDLSSerializableBase {
    internal int Index;
    internal List`1<Revision> m_revisions;
    internal List`1<Revision> m_clonedRevisions;
    public Entity Owner { get; }
    public EntityType EntityType { get; }
    public IEntity NextSibling { get; }
    public IEntity PreviousSibling { get; }
    public bool IsComposite { get; }
    internal bool DeepDetached { get; }
    internal List`1<Revision> RevisionsInternal { get; }
    protected Entity(WordDocument doc, Entity owner);
    public sealed virtual Entity get_Owner();
    public abstract virtual EntityType get_EntityType();
    public sealed virtual IEntity get_NextSibling();
    public sealed virtual IEntity get_PreviousSibling();
    public sealed virtual bool get_IsComposite();
    internal bool get_DeepDetached();
    internal bool IsFloatingItem(bool isTextWrapAround);
    internal bool IsFallbackItem();
    internal bool IsBuiltInCharacterStyle(BuiltinStyle builtInStyle);
    internal List`1<Revision> get_RevisionsInternal();
    public sealed virtual Entity Clone();
    internal static bool IsVerticalTextDirection(TextDirection textDirection);
    internal virtual void AddSelf();
    internal virtual void AttachToDocument();
    internal virtual void RemoveSelf();
    internal int GetIndexInOwnerCollection();
    internal bool IsParentOf(Entity entity);
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal Entity GetOwnerTextBody(Entity entity);
    internal Entity GetOwnerShape(Entity entity);
    internal Entity GetBaseEntity(Entity entity);
    internal string GetHierarchicalIndex(string hierarchicalIndex);
    internal int GetZOrder();
    internal bool IsNeedToSortByItsPosition(Entity secondfloatingItem);
    private bool IsNeedToSortByItsPosition(WParagraph firstFloatingItem, WParagraph secondfloatingItem);
    private bool IsNeedToSortByItsPosition(WTableCell firstItemOwnerCell, WTableCell secondItemOwnerCell);
    internal Entity GetOwnerSection(Entity entity);
    internal Entity GetOwnerTable(Entity entity);
    internal Entity GetOwnerCellEntity();
    internal virtual void Compare(WordDocument document);
    internal void RemoveEntityRevision(bool isNeedToRemoveFormatRev);
    internal void RemoveFormatRevision(FormatBase formatBase);
    internal virtual void Close();
}
[DefaultMemberAttribute("Item")]
public abstract class Syncfusion.DocIO.DLS.EntityCollection : CollectionImpl {
    internal ChangeItemsHandlerList ChangeItemsHandlers;
    private byte m_bFlags;
    public Entity Item { get; }
    public Entity FirstItem { get; }
    public Entity LastItem { get; }
    internal bool Joined { get; }
    internal bool IsNewEntityHasField { get; internal set; }
    internal Entity Owner { get; }
    protected Type[] TypesOfElement { get; }
    internal EntityCollection(WordDocument doc);
    internal EntityCollection(WordDocument doc, Entity owner);
    public sealed virtual Entity get_Item(int index);
    public Entity get_FirstItem();
    public Entity get_LastItem();
    internal bool get_Joined();
    internal bool get_IsNewEntityHasField();
    internal void set_IsNewEntityHasField(bool value);
    internal Entity get_Owner();
    protected abstract virtual Type[] get_TypesOfElement();
    public int Add(IEntity entity);
    private void ClearExistingMaxPrefCellWidthOfColumns(IEntity entity);
    private bool IsContentControlAllowBookmark(IEntity entity);
    private bool IsContentControlAllowParagraph();
    private int GetIndexOfLastBookMarkEnd();
    public void Clear();
    public bool Contains(IEntity entity);
    public int IndexOf(IEntity entity);
    public void Insert(int index, IEntity entity);
    internal void UpdatePositionForGroupShape(Entity entity);
    internal void UpdateParagraphTextForInlineControl(int index, Entity entity);
    internal void InsertToInnerList(int index, IEntity entity);
    internal void RemoveFromInnerList(int index);
    internal void AddToInnerList(Entity entity);
    internal void UpdateIndexForDuplicateEntity(int startIndex, bool isAdd);
    internal void UpdateIndex(int startIndex, bool isAdd);
    public void Remove(IEntity entity);
    public void RemoveAt(int index);
    private void UpdateDocumentCollection(IEntity entity);
    private bool IsRenderableItem(IEntity entity);
    private void UpdateGroupShapeCollection(GroupShape groupShape);
    private void UpdateRevisionCollection(Entity entity);
    private void UpdateRevisionCollection(FormatBase formatBase);
    internal void UpdateTrackRevision(IEntity entity);
    private void UpdateTrackRevision(WSection section);
    private void UpdateTrackRevision(TextBodyItem bodyItemEntity);
    private void UpdateTrackRevision(ParagraphItem paraItem);
    private void UpdateTrackRevision(ParagraphItemCollection paraItems);
    internal void UpdateTrackRevision(WTextBody textBody);
    private void UpdateTrackRevision(WTable table);
    private void UpdateParaItemRevision(ParagraphItem paraItem);
    private void CheckTrackChange(ParagraphItem item);
    private void UpdateParagraphRevision(WParagraph paragraph);
    internal Entity NextSibling(Entity entity);
    internal Entity PreviousSibling(Entity entity);
    internal int GetNextOrPrevIndex(int index, EntityType type, bool next);
    internal void InternalClearBy(EntityType type);
    internal void CloneTo(EntityCollection destColl);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, Entity entity);
    private void UpdateFieldRange(Entity entity);
    private void UpdateFieldSeparatorAndEnd(Entity entity);
    private void InsertFieldRange(WField field, int bodyItemIndex, int paraItemIndex, bool isSkipParaItems);
    protected virtual void OnInsertComplete(int index, Entity entity);
    protected virtual void OnRemove(int index);
    private bool IsCorrectElementType(Entity entity);
    private bool IsInstanceOfType(Type type, Entity ent);
    private int OnInsertField(int index, Entity entity);
    private void OnInsertFieldComplete(int index, Entity entity);
    private bool IsMergeFieldNeedToBeUpdated(Entity entity);
    private void OnMergeFieldComplete(int fieldIndex, Entity entity);
    private int OnInsertFormField(int index, Entity entity);
    internal void CheckFormFieldName(string formFieldName);
    internal void OnInsertFormFieldComplete(int index, Entity entity);
    private void UpdateTextFromInlineControl(WParagraph ownerPara, InlineContentControl inlineContentControl);
}
public class Syncfusion.DocIO.DLS.EntityEntry : object {
    public Entity Current;
    public int Index;
    public EntityEntry(Entity ent);
    public bool Fetch();
}
[DefaultMemberAttribute("Item")]
public abstract class Syncfusion.DocIO.DLS.EntitySubsetCollection : object {
    private EntityCollection m_coll;
    private EntityType m_type;
    private int m_lastIndex;
    private int m_lastBaseIndex;
    private int m_count;
    public WordDocument Document { get; }
    public Entity Owner { get; }
    public int Count { get; }
    public Entity Item { get; }
    internal EntitySubsetCollection(EntityCollection coll, EntityType type);
    public WordDocument get_Document();
    public Entity get_Owner();
    public sealed virtual int get_Count();
    public sealed virtual Entity get_Item(int index);
    public void Clear();
    internal void Close();
    public sealed virtual IEnumerator GetEnumerator();
    internal int InternalAdd(Entity entity);
    internal bool InternalContains(Entity entity);
    internal int InternalIndexOf(Entity entity);
    internal int InternalInsert(int index, Entity entity);
    internal void InternalRemove(Entity entity);
    internal void InternalRemoveAt(int index);
    protected Entity GetByIndex(int index);
    private int GetBaseIndex(int index);
    private void UpdateCount();
    private void CheckType(Entity entity);
    private void BaseCollChangeItems(ChangeItemsType type, Entity entity);
    internal void ClearIndexes();
}
public enum Syncfusion.DocIO.DLS.EntityType : Enum {
    public int value__;
    public static EntityType WordDocument;
    public static EntityType Section;
    public static EntityType TextBody;
    public static EntityType HeaderFooter;
    public static EntityType Paragraph;
    public static EntityType AlternateChunk;
    public static EntityType BlockContentControl;
    public static EntityType InlineContentControl;
    public static EntityType RowContentControl;
    public static EntityType CellContentControl;
    [ObsoleteAttribute("This enumeration option has been deprecated. On using this enumeration, BlockContentControl type will be set instead of StructureDocumentTag.")]
public static EntityType StructureDocumentTag;
    [ObsoleteAttribute("This enumeration option has been deprecated. On using this enumeration, InlineContentControl type will be set instead of StructureDocumentTagInline.")]
public static EntityType StructureDocumentTagInline;
    [ObsoleteAttribute("This enumeration option has been deprecated. On using this enumeration, RowContentControl type will be set instead of StructureDocumentTagRow.")]
public static EntityType StructureDocumentTagRow;
    [ObsoleteAttribute("This enumeration option has been deprecated. On using this enumeration, CellContentControl type will be set instead of StructureDocumentTagCell.")]
public static EntityType StructureDocumentTagCell;
    [ObsoleteAttribute("This enumeration option has been deprecated. On using this enumeration, BlockContentControl type will be set instead of SDTBlockContent.")]
public static EntityType SDTBlockContent;
    [ObsoleteAttribute("This enumeration option has been deprecated. On using this enumeration, InlineContentControl type will be set instead of SDTInlineContent.")]
public static EntityType SDTInlineContent;
    [ObsoleteAttribute("This enumeration option has been deprecated. On using this enumeration, RowContentControl type will be set instead of SDTRowContent.")]
public static EntityType SDTRowContent;
    [ObsoleteAttribute("This enumeration option has been deprecated. On using this enumeration, CellContentControl type will be set instead of SDTCellContent.")]
public static EntityType SDTCellContent;
    public static EntityType Table;
    public static EntityType TableRow;
    public static EntityType TableCell;
    public static EntityType TextRange;
    public static EntityType Picture;
    public static EntityType Field;
    public static EntityType FieldMark;
    public static EntityType MergeField;
    public static EntityType SeqField;
    public static EntityType EmbededField;
    public static EntityType ControlField;
    public static EntityType TextFormField;
    public static EntityType DropDownFormField;
    public static EntityType CheckBox;
    public static EntityType BookmarkStart;
    public static EntityType BookmarkEnd;
    public static EntityType Shape;
    public static EntityType Comment;
    public static EntityType Footnote;
    public static EntityType TextBox;
    public static EntityType Break;
    public static EntityType Symbol;
    public static EntityType TOC;
    public static EntityType XmlParaItem;
    public static EntityType Undefined;
    public static EntityType Chart;
    public static EntityType CommentMark;
    public static EntityType CommentEnd;
    public static EntityType OleObject;
    public static EntityType AbsoluteTab;
    public static EntityType AutoShape;
    public static EntityType EditableRangeStart;
    public static EntityType EditableRangeEnd;
    public static EntityType GroupShape;
    public static EntityType ChildShape;
    public static EntityType ChildGroupShape;
    public static EntityType Math;
}
internal enum Syncfusion.DocIO.DLS.ExtendedBorderStyle : Enum {
    public int value__;
    public static ExtendedBorderStyle Apples;
    public static ExtendedBorderStyle ArchedScallops;
    public static ExtendedBorderStyle BabyPacifier;
    public static ExtendedBorderStyle BabyRattle;
    public static ExtendedBorderStyle Balloons3Colors;
    public static ExtendedBorderStyle BalloonsHotAir;
    public static ExtendedBorderStyle BasicBlackDashes;
    public static ExtendedBorderStyle BasicBlackDots;
    public static ExtendedBorderStyle BasicBlackSquares;
    public static ExtendedBorderStyle BasicThinLines;
    public static ExtendedBorderStyle BasicWhiteDashes;
    public static ExtendedBorderStyle BasicWhiteDots;
    public static ExtendedBorderStyle BasicWhiteSquares;
    public static ExtendedBorderStyle BasicWideInline;
    public static ExtendedBorderStyle BasicWideMidline;
    public static ExtendedBorderStyle BasicWideOutline;
    public static ExtendedBorderStyle Bats;
    public static ExtendedBorderStyle Birds;
    public static ExtendedBorderStyle BirdsFlight;
    public static ExtendedBorderStyle Cabins;
    public static ExtendedBorderStyle CakeSlice;
    public static ExtendedBorderStyle CandyCorn;
    public static ExtendedBorderStyle CelticKnotwork;
    public static ExtendedBorderStyle CertificateBanner;
    public static ExtendedBorderStyle ChainLink;
    public static ExtendedBorderStyle ChampagneBottle;
    public static ExtendedBorderStyle CheckedBarBlack;
    public static ExtendedBorderStyle CheckedBarColor;
    public static ExtendedBorderStyle Checkered;
    public static ExtendedBorderStyle ChristmasTree;
    public static ExtendedBorderStyle CirclesLines;
    public static ExtendedBorderStyle CirclesRectangles;
    public static ExtendedBorderStyle ClassicalWave;
    public static ExtendedBorderStyle Clocks;
    public static ExtendedBorderStyle Compass;
    public static ExtendedBorderStyle Confetti;
    public static ExtendedBorderStyle ConfettiGrays;
    public static ExtendedBorderStyle ConfettiOutline;
    public static ExtendedBorderStyle ConfettiStreamers;
    public static ExtendedBorderStyle ConfettiWhite;
    public static ExtendedBorderStyle CornerTriangles;
    public static ExtendedBorderStyle CouponCutoutDashes;
    public static ExtendedBorderStyle CouponCutoutDots;
    public static ExtendedBorderStyle CrazyMaze;
    public static ExtendedBorderStyle CreaturesButterfly;
    public static ExtendedBorderStyle CreaturesFish;
    public static ExtendedBorderStyle CreaturesInsects;
    public static ExtendedBorderStyle CreaturesLadyBug;
    public static ExtendedBorderStyle CrossStitch;
    public static ExtendedBorderStyle Cup;
    public static ExtendedBorderStyle DecoArch;
    public static ExtendedBorderStyle DecoArchColor;
    public static ExtendedBorderStyle DecoBlocks;
    public static ExtendedBorderStyle DiamondsGray;
    public static ExtendedBorderStyle DoubleD;
    public static ExtendedBorderStyle DoubleDiamonds;
    public static ExtendedBorderStyle Earth1;
    public static ExtendedBorderStyle Earth2;
    public static ExtendedBorderStyle EclipsingSquares1;
    public static ExtendedBorderStyle EclipsingSquares2;
    public static ExtendedBorderStyle EggsBlack;
    public static ExtendedBorderStyle Fans;
    public static ExtendedBorderStyle Film;
    public static ExtendedBorderStyle Firecrackers;
    public static ExtendedBorderStyle FlowersBlockPrint;
    public static ExtendedBorderStyle FlowersDaisies;
    public static ExtendedBorderStyle FlowersModern1;
    public static ExtendedBorderStyle FlowersModern2;
    public static ExtendedBorderStyle FlowersPansy;
    public static ExtendedBorderStyle FlowersRedRose;
    public static ExtendedBorderStyle FlowersRoses;
    public static ExtendedBorderStyle FlowersTeacup;
    public static ExtendedBorderStyle FlowersTiny;
    public static ExtendedBorderStyle Gems;
    public static ExtendedBorderStyle GingerbreadMan;
    public static ExtendedBorderStyle Gradient;
    public static ExtendedBorderStyle Handmade1;
    public static ExtendedBorderStyle Handmade2;
    public static ExtendedBorderStyle HeartBalloon;
    public static ExtendedBorderStyle HeartGray;
    public static ExtendedBorderStyle Hearts;
    public static ExtendedBorderStyle HeebieJeebies;
    public static ExtendedBorderStyle Holly;
    public static ExtendedBorderStyle HouseFunky;
    public static ExtendedBorderStyle Hypnotic;
    public static ExtendedBorderStyle IceCreamCones;
    public static ExtendedBorderStyle LightBulb;
    public static ExtendedBorderStyle Lightning1;
    public static ExtendedBorderStyle Lightning2;
    public static ExtendedBorderStyle MapleLeaf;
    public static ExtendedBorderStyle MapleMuffins;
    public static ExtendedBorderStyle MapPins;
    public static ExtendedBorderStyle Marquee;
    public static ExtendedBorderStyle MarqueeToothed;
    public static ExtendedBorderStyle Moons;
    public static ExtendedBorderStyle Mosaic;
    public static ExtendedBorderStyle MusicNotes;
    public static ExtendedBorderStyle Northwest;
    public static ExtendedBorderStyle Ovals;
    public static ExtendedBorderStyle Packages;
    public static ExtendedBorderStyle PalmsBlack;
    public static ExtendedBorderStyle PalmsColor;
    public static ExtendedBorderStyle PaperClips;
    public static ExtendedBorderStyle Papyrus;
    public static ExtendedBorderStyle PartyFavor;
    public static ExtendedBorderStyle PartyGlass;
    public static ExtendedBorderStyle Pencils;
    public static ExtendedBorderStyle People;
    public static ExtendedBorderStyle PeopleHats;
    public static ExtendedBorderStyle PeopleWaving;
    public static ExtendedBorderStyle Poinsettias;
    public static ExtendedBorderStyle PostageStamp;
    public static ExtendedBorderStyle Pumpkin1;
    public static ExtendedBorderStyle PushPinNote1;
    public static ExtendedBorderStyle PushPinNote2;
    public static ExtendedBorderStyle Pyramids;
    public static ExtendedBorderStyle PyramidsAbove;
    public static ExtendedBorderStyle Quadrants;
    public static ExtendedBorderStyle Rings;
    public static ExtendedBorderStyle Safari;
    public static ExtendedBorderStyle Sawtooth;
    public static ExtendedBorderStyle SawtoothGray;
    public static ExtendedBorderStyle ScaredCat;
    public static ExtendedBorderStyle Seattle;
    public static ExtendedBorderStyle ShadowedSquares;
    public static ExtendedBorderStyle SharksTeeth;
    public static ExtendedBorderStyle ShorebirdTracks;
    public static ExtendedBorderStyle Skyrocket;
    public static ExtendedBorderStyle SnowflakeFancy;
    public static ExtendedBorderStyle Snowflakes;
    public static ExtendedBorderStyle Sombrero;
    public static ExtendedBorderStyle Southwest;
    public static ExtendedBorderStyle Stars;
    public static ExtendedBorderStyle Stars3D;
    public static ExtendedBorderStyle StarsBlack;
    public static ExtendedBorderStyle StarsShadowed;
    public static ExtendedBorderStyle StarsTop;
    public static ExtendedBorderStyle Sun;
    public static ExtendedBorderStyle Swirligig;
    public static ExtendedBorderStyle TornPaper;
    public static ExtendedBorderStyle TornPaperBlack;
    public static ExtendedBorderStyle Trees;
    public static ExtendedBorderStyle TriangleParty;
    public static ExtendedBorderStyle Triangles;
    public static ExtendedBorderStyle Tribal1;
    public static ExtendedBorderStyle Tribal2;
    public static ExtendedBorderStyle Tribal3;
    public static ExtendedBorderStyle Tribal4;
    public static ExtendedBorderStyle Tribal5;
    public static ExtendedBorderStyle Tribal6;
    public static ExtendedBorderStyle TwistedLines1;
    public static ExtendedBorderStyle TwistedLines2;
    public static ExtendedBorderStyle Vine;
    public static ExtendedBorderStyle Waveline;
    public static ExtendedBorderStyle WeavingAngles;
    public static ExtendedBorderStyle WeavingBraid;
    public static ExtendedBorderStyle WeavingRibbon;
    public static ExtendedBorderStyle WeavingStrips;
    public static ExtendedBorderStyle WhiteFlowers;
    public static ExtendedBorderStyle Woodwork;
    public static ExtendedBorderStyle XIllusions;
    public static ExtendedBorderStyle ZanyTriangles;
    public static ExtendedBorderStyle ZigZag;
    public static ExtendedBorderStyle ZigZagStitch;
}
public enum Syncfusion.DocIO.DLS.FieldCharType : Enum {
    public int value__;
    public static FieldCharType Begin;
    public static FieldCharType Seperate;
    public static FieldCharType End;
    public static FieldCharType Unknown;
    public static FieldCharType SimpleField;
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.FieldCollection : CollectionImpl {
    internal List`1<string> m_sortedAutoNumFieldIndexes;
    internal List`1<WField> m_sortedAutoNumFields;
    private Dictionary`2<char, int> CharValues;
    internal WField Item { get; }
    internal WField Item { get; }
    internal List`1<WField> SortedAutoNumFields { get; internal set; }
    internal List`1<string> SortedAutoNumFieldIndexes { get; internal set; }
    internal FieldCollection(WordDocument doc);
    internal WField get_Item(string name);
    internal WField get_Item(int index);
    internal List`1<WField> get_SortedAutoNumFields();
    internal void set_SortedAutoNumFields(List`1<WField> value);
    internal List`1<string> get_SortedAutoNumFieldIndexes();
    internal void set_SortedAutoNumFieldIndexes(List`1<string> value);
    public WField FindByName(string name);
    public void RemoveAt(int index);
    public void Remove(WField field);
    public void Clear();
    internal void Add(WField field);
    internal void InsertAutoNumFieldInAsc(WField field);
    private bool IsNewIndexhasLowHierarchy(string oldHierarchicalIndex, string newHierarchicalIndex);
    internal string GetAutoNumFieldResult(WField field);
    private bool IsBothFieldsInSameParagarph(int previousIndex, int currentIndex, bool currentFieldIsInTable);
    private int GetAsNumberFromRoman(string roman);
    private char GetAutoNumSeparatorChar(int indexOfField);
    private string GetNumberFormat(int indexOfField);
    private int GetAsNumberFromLetter(string s);
}
public enum Syncfusion.DocIO.DLS.FieldMarkType : Enum {
    public int value__;
    public static FieldMarkType FieldSeparator;
    public static FieldMarkType FieldEnd;
}
internal enum Syncfusion.DocIO.DLS.FillAspect : Enum {
    public int value__;
    public static FillAspect Ignore;
    public static FillAspect Atmost;
    public static FillAspect Atleast;
}
public class Syncfusion.DocIO.DLS.FillFormat : object {
    private Color m_BackColor;
    private Color m_ForeColor;
    private Color m_recolorTarget;
    private PatternType m_Pattern;
    private TextureAlignment m_TextureAlignment;
    private double m_TextureHorizontalScale;
    private double m_TextureOffsetX;
    private double m_TextureOffsetY;
    private double m_TextureVerticalScale;
    private float m_Transparency;
    private FillType m_FillType;
    private ImageRecord m_ImageRecord;
    private FlipOrientation m_FlipOrientation;
    private TileRectangle m_SourceRectangle;
    private TileRectangle m_FillRectangle;
    private GradientFill m_GradientFill;
    private BlipCompressionType m_compressionMode;
    private BlipFormat m_blipFormat;
    private string m_alternateHRef;
    private float m_angle;
    private FillAspect m_fillAspect;
    private float m_focus;
    private float m_focusPositionX;
    private float m_focusPositionY;
    private float m_positionX;
    private float m_positionY;
    private float m_focusSizeX;
    private float m_focusSizeY;
    private float m_secondaryOpacity;
    private byte m_flagA;
    private List`1<DictionaryEntry> m_fillSchemeColor;
    private ShapeBase m_shape;
    private ChildShape m_childShape;
    private float m_contrast;
    private byte m_bFlags;
    private WCharacterFormat m_characterFormat;
    private byte m_bflag;
    internal static byte IsDefaultFillKey;
    internal static byte IsDefaultFillColorKey;
    private WPicture m_picture;
    internal GradientFill GradientFill { get; internal set; }
    internal bool HasTextFill { get; internal set; }
    internal TileRectangle FillRectangle { get; internal set; }
    internal TileRectangle SourceRectangle { get; internal set; }
    internal FlipOrientation FlipOrientation { get; internal set; }
    internal ImageRecord ImageRecord { get; internal set; }
    internal bool IsDefaultFill { get; internal set; }
    internal bool IsDefaultFillColor { get; internal set; }
    public bool Fill { get; public set; }
    public Color Color { get; public set; }
    internal Color ReColorTarget { get; internal set; }
    internal Color ForeColor { get; internal set; }
    internal PatternType Pattern { get; internal set; }
    internal bool RotateWithObject { get; internal set; }
    internal TextureAlignment TextureAlignment { get; internal set; }
    internal double TextureHorizontalScale { get; internal set; }
    internal double TextureOffsetX { get; internal set; }
    internal double TextureOffsetY { get; internal set; }
    internal bool TextureTile { get; internal set; }
    internal double TextureVerticalScale { get; internal set; }
    public float Transparency { get; public set; }
    internal float Contrast { get; internal set; }
    internal FillType FillType { get; internal set; }
    internal BlipCompressionType BlipCompressionMode { get; internal set; }
    internal BlipFormat BlipFormat { get; internal set; }
    internal bool AlignWithShape { get; internal set; }
    internal bool DetectMouseClick { get; internal set; }
    internal bool ReColor { get; internal set; }
    internal string AlternateHRef { get; internal set; }
    internal float Angle { get; internal set; }
    internal FillAspect Aspect { get; internal set; }
    internal float Focus { get; internal set; }
    internal float FocusPositionX { get; internal set; }
    internal float FocusPositionY { get; internal set; }
    internal float PositionX { get; internal set; }
    internal float PositionY { get; internal set; }
    internal float FocusSizeX { get; internal set; }
    internal float FocusSizeY { get; internal set; }
    internal float SecondaryOpacity { get; internal set; }
    internal bool Visible { get; internal set; }
    internal List`1<DictionaryEntry> FillSchemeColorTransforms { get; internal set; }
    internal bool IsGrpFill { get; internal set; }
    public FillFormat(Shape shape);
    internal FillFormat(ShapeBase shape);
    internal FillFormat(WCharacterFormat characterFormat);
    internal FillFormat(ChildShape shape);
    internal FillFormat(WPicture picture);
    internal FillFormat(InlineShapeObject inlineShapeObject);
    internal GradientFill get_GradientFill();
    internal void set_GradientFill(GradientFill value);
    internal bool get_HasTextFill();
    internal void set_HasTextFill(bool value);
    internal TileRectangle get_FillRectangle();
    internal void set_FillRectangle(TileRectangle value);
    internal TileRectangle get_SourceRectangle();
    internal void set_SourceRectangle(TileRectangle value);
    internal FlipOrientation get_FlipOrientation();
    internal void set_FlipOrientation(FlipOrientation value);
    internal ImageRecord get_ImageRecord();
    internal void set_ImageRecord(ImageRecord value);
    internal bool get_IsDefaultFill();
    internal void set_IsDefaultFill(bool value);
    internal bool get_IsDefaultFillColor();
    internal void set_IsDefaultFillColor(bool value);
    public bool get_Fill();
    public void set_Fill(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    internal Color get_ReColorTarget();
    internal void set_ReColorTarget(Color value);
    internal Color get_ForeColor();
    internal void set_ForeColor(Color value);
    internal PatternType get_Pattern();
    internal void set_Pattern(PatternType value);
    internal bool get_RotateWithObject();
    internal void set_RotateWithObject(bool value);
    internal TextureAlignment get_TextureAlignment();
    internal void set_TextureAlignment(TextureAlignment value);
    internal double get_TextureHorizontalScale();
    internal void set_TextureHorizontalScale(double value);
    internal double get_TextureOffsetX();
    internal void set_TextureOffsetX(double value);
    internal double get_TextureOffsetY();
    internal void set_TextureOffsetY(double value);
    internal bool get_TextureTile();
    internal void set_TextureTile(bool value);
    internal double get_TextureVerticalScale();
    internal void set_TextureVerticalScale(double value);
    public float get_Transparency();
    public void set_Transparency(float value);
    internal float get_Contrast();
    internal void set_Contrast(float value);
    internal FillType get_FillType();
    internal void set_FillType(FillType value);
    internal BlipCompressionType get_BlipCompressionMode();
    internal void set_BlipCompressionMode(BlipCompressionType value);
    internal BlipFormat get_BlipFormat();
    internal void set_BlipFormat(BlipFormat value);
    internal bool get_AlignWithShape();
    internal void set_AlignWithShape(bool value);
    internal bool get_DetectMouseClick();
    internal void set_DetectMouseClick(bool value);
    internal bool get_ReColor();
    internal void set_ReColor(bool value);
    internal string get_AlternateHRef();
    internal void set_AlternateHRef(string value);
    internal float get_Angle();
    internal void set_Angle(float value);
    internal FillAspect get_Aspect();
    internal void set_Aspect(FillAspect value);
    internal float get_Focus();
    internal void set_Focus(float value);
    internal float get_FocusPositionX();
    internal void set_FocusPositionX(float value);
    internal float get_FocusPositionY();
    internal void set_FocusPositionY(float value);
    internal float get_PositionX();
    internal void set_PositionX(float value);
    internal float get_PositionY();
    internal void set_PositionY(float value);
    internal float get_FocusSizeX();
    internal void set_FocusSizeX(float value);
    internal float get_FocusSizeY();
    internal void set_FocusSizeY(float value);
    internal float get_SecondaryOpacity();
    internal void set_SecondaryOpacity(float value);
    internal bool get_Visible();
    internal void set_Visible(bool value);
    internal List`1<DictionaryEntry> get_FillSchemeColorTransforms();
    internal void set_FillSchemeColorTransforms(List`1<DictionaryEntry> value);
    internal bool get_IsGrpFill();
    internal void set_IsGrpFill(bool value);
    private void FillFormatChanged();
    internal FillFormat Clone();
    internal void Close();
    internal bool Compare(FillFormat fillFormat);
    internal StringBuilder GetAsString();
}
public enum Syncfusion.DocIO.DLS.FillType : Enum {
    public int value__;
    public static FillType FillBackground;
    public static FillType FillGradient;
    public static FillType FillMixed;
    public static FillType FillPatterned;
    public static FillType FillPicture;
    public static FillType FillSolid;
    public static FillType FillTextured;
    public static FillType None;
}
internal class Syncfusion.DocIO.DLS.FindUtils : object {
    internal static string DEF_WHOLE_WORD_BEFORE;
    internal static string DEF_WHOLE_WORD_AFTER;
    internal static string DEF_WHOLE_WORD_EMPTY;
    internal static bool IsPatternEmpty(Regex pattern);
    internal static Regex StringToRegex(string given, bool caseSensitive, bool wholeWord);
    internal static int GetStartRangeIndex(WParagraph para, int start, WTextRange& tr);
    internal static bool EnsureSameOwner(WTextRange startTextRange, WTextRange endTextRange);
    private static int GetStartRangeIndexInInlineContentControl(ParagraphItemCollection paragraphItems, int start, WTextRange& tr);
}
internal class Syncfusion.DocIO.DLS.FloatApproxComparer : object {
    public sealed virtual int Compare(object x, object y);
}
public enum Syncfusion.DocIO.DLS.FollowCharacterType : Enum {
    public int value__;
    public static FollowCharacterType Tab;
    public static FollowCharacterType Space;
    public static FollowCharacterType Nothing;
}
internal enum Syncfusion.DocIO.DLS.FontHintType : Enum {
    public int value__;
    public static FontHintType Default;
    public static FontHintType EastAsia;
    public static FontHintType CS;
}
internal class Syncfusion.DocIO.DLS.FontScheme : object {
    private string m_fontSchemeName;
    private MajorMinorFontScheme m_majorFontScheme;
    private MajorMinorFontScheme m_minorFontScheme;
    internal string FontSchemeName { get; internal set; }
    internal MajorMinorFontScheme MajorFontScheme { get; internal set; }
    internal MajorMinorFontScheme MinorFontScheme { get; internal set; }
    internal string get_FontSchemeName();
    internal void set_FontSchemeName(string value);
    internal MajorMinorFontScheme get_MajorFontScheme();
    internal void set_MajorFontScheme(MajorMinorFontScheme value);
    internal MajorMinorFontScheme get_MinorFontScheme();
    internal void set_MinorFontScheme(MajorMinorFontScheme value);
    internal void Close();
}
internal class Syncfusion.DocIO.DLS.FontSchemeStruct : ValueType {
    private string m_name;
    private string m_typeface;
    private byte m_charSet;
    private string m_panose;
    private byte m_pitchFamily;
    internal string Name { get; internal set; }
    internal string Typeface { get; internal set; }
    internal byte Charset { get; internal set; }
    internal string Panose { get; internal set; }
    internal byte PitchFamily { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Typeface();
    internal void set_Typeface(string value);
    internal byte get_Charset();
    internal void set_Charset(byte value);
    internal string get_Panose();
    internal void set_Panose(string value);
    internal byte get_PitchFamily();
    internal void set_PitchFamily(byte value);
}
public class Syncfusion.DocIO.DLS.FontSettings : object {
    internal Dictionary`2<string, Stream> FontStreams;
    private FallbackFonts _fallbackFonts;
    [CompilerGeneratedAttribute]
private SubstituteFontEventHandler SubstituteFont;
    public FallbackFonts FallbackFonts { get; }
    [CompilerGeneratedAttribute]
public void add_SubstituteFont(SubstituteFontEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SubstituteFont(SubstituteFontEventHandler value);
    public FallbackFonts get_FallbackFonts();
    internal Font GetFont(string fontName, float fontSize, FontStyle fontStyle, FontScriptType scriptType);
    private string GetFontStyleValue(FontStyle fontStyle);
    internal void EmbedDocumentFonts(WordDocument document);
    private FontStyle GetFontStyle(string style);
    private void DeObfuscateFont(Stream font, MemoryStream outStream, string fontGuid);
    private Font GetFontFromStream(Stream fontStream, string fontName, float fontSize, FontStyle fontStyle);
    private string ParseGuidString(string guidString);
    internal void Close();
}
public class Syncfusion.DocIO.DLS.Footnote : object {
    private WTextBody m_separator;
    private WTextBody m_continuationSeparator;
    private WTextBody m_continuationNotice;
    private WordDocument m_ownerDoc;
    public WTextBody Separator { get; public set; }
    public WTextBody ContinuationSeparator { get; public set; }
    public WTextBody ContinuationNotice { get; public set; }
    public Footnote(WordDocument document);
    internal Footnote(Footnote footnote);
    public WTextBody get_Separator();
    public void set_Separator(WTextBody value);
    public WTextBody get_ContinuationSeparator();
    public void set_ContinuationSeparator(WTextBody value);
    public WTextBody get_ContinuationNotice();
    public void set_ContinuationNotice(WTextBody value);
    public Footnote Clone();
    internal void SetOwner(WordDocument document);
    internal void Close();
}
[DefaultMemberAttribute("Item")]
public abstract class Syncfusion.DocIO.DLS.FormatBase : XDLSSerializableBase {
    private static byte MAXPARENTLEVEL;
    private static byte MAXKEY;
    protected Dictionary`2<int, object> m_propertiesHash;
    protected Dictionary`2<int, object> m_oldPropertiesHash;
    private FormatBase m_baseFormat;
    private FormatBase m_parentFormat;
    private byte m_compositeKey;
    private byte m_parentLevel;
    private byte m_bFlags;
    internal SinglePropertyModifierArray m_unParsedSprms;
    internal SinglePropertyModifierArray m_sprms;
    internal List`1<Revision> m_revisions;
    internal List`1<Revision> m_clonedRevisions;
    internal bool IsDefault { get; internal set; }
    internal bool IsFormattingChange { get; internal set; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    internal Dictionary`2<int, object> OldPropertiesHash { get; }
    internal FormatBase BaseFormat { get; internal set; }
    protected object Item { get; protected set; }
    internal FormatBase ParentFormat { get; }
    internal List`1<Revision> Revisions { get; }
    internal FormatBase(IWordDocument doc, bool isTextBox);
    public FormatBase(IWordDocument doc);
    public FormatBase(IWordDocument doc, Entity owner);
    public FormatBase(FormatBase parentFormat, int parentKey);
    public FormatBase(FormatBase parent, int parentKey, int parentOffset);
    internal bool get_IsDefault();
    internal void set_IsDefault(bool value);
    internal bool get_IsFormattingChange();
    internal void set_IsFormattingChange(bool value);
    internal Dictionary`2<int, object> get_PropertiesHash();
    internal Dictionary`2<int, object> get_OldPropertiesHash();
    internal FormatBase get_BaseFormat();
    internal void set_BaseFormat(FormatBase value);
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    private bool IsBaseFormatContainsKey(int key);
    internal FormatBase get_ParentFormat();
    internal List`1<Revision> get_Revisions();
    protected internal void ImportContainer(FormatBase format);
    protected virtual void ImportMembers(FormatBase format);
    internal virtual void ApplyBase(FormatBase baseFormat);
    public bool HasKey(int key);
    public bool HasBoolKey(int key);
    public virtual void ClearFormatting();
    protected abstract virtual object GetDefValue(int key);
    protected virtual FormatBase GetDefComposite(int key);
    protected virtual void OnChange(FormatBase format, int propKey);
    internal virtual bool HasValue(int propertyKey);
    internal virtual int GetSprmOption(int propertyKey);
    internal virtual void Close();
    protected internal virtual void EnsureComposites();
    protected void EnsureComposites(Int32[] keys);
    protected int GetBaseKey(int key);
    protected int GetFullKey(int key);
    protected FormatBase GetDefComposite(int key, FormatBase value);
    private void MarkNoDefault();
    internal virtual void RemoveChanges();
    internal virtual void AcceptChanges();
    private int GetStyleChangeOption();
    private int GetChangeOption();
    internal virtual void RemovePositioning();
    internal Stream CloneStream(Stream input);
    internal bool ComparePropertiesCount(FormatBase format);
    internal virtual bool Compare(FormatBase formatBase);
    internal void CompareProperties(FormatBase format);
    private bool IsNeedToConsideredKey(FormatBase format, int key);
    internal bool Compare(int propertyKey, FormatBase format);
    internal bool Compare(object value, object currentValue);
    private string GetARGBCode(Color color);
    internal void CopyProperties(FormatBase format);
    private int GetCompositeParentKey(int key, int parentLevel);
    internal void UpdateProperties(FormatBase format);
    internal void CopyFormat(FormatBase format);
    private bool CheckCharacterStyle(int key);
    private object GetBaseFormatValue(int key);
    internal DateTime ParseDTTM(int value);
    internal int GetDTTMIntValue(DateTime dt);
    internal bool CompareArray(Byte[] buffer1, Byte[] buffer2);
    internal object GetKeyValue(Dictionary`2<int, object> propertyHash, int key);
}
internal class Syncfusion.DocIO.DLS.FormatScheme : object {
    private string m_fmtSchemeName;
    private List`1<FillFormat> m_bgFillFormats;
    private List`1<FillFormat> m_fillFormats;
    private List`1<LineFormat> m_lnStyleList;
    private List`1<EffectFormat> m_effectList;
    internal string FmtName { get; internal set; }
    internal List`1<FillFormat> BgFillFormats { get; internal set; }
    internal List`1<FillFormat> FillFormats { get; internal set; }
    internal List`1<LineFormat> LnStyleScheme { get; internal set; }
    internal List`1<EffectFormat> EffectStyles { get; internal set; }
    internal string get_FmtName();
    internal void set_FmtName(string value);
    internal List`1<FillFormat> get_BgFillFormats();
    internal void set_BgFillFormats(List`1<FillFormat> value);
    internal List`1<FillFormat> get_FillFormats();
    internal void set_FillFormats(List`1<FillFormat> value);
    internal List`1<LineFormat> get_LnStyleScheme();
    internal void set_LnStyleScheme(List`1<LineFormat> value);
    internal List`1<EffectFormat> get_EffectStyles();
    internal void set_EffectStyles(List`1<EffectFormat> value);
    internal void Close();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.FormFieldCollection : CollectionImpl {
    private Dictionary`2<string, WFormField> m_dictionary;
    public WFormField Item { get; }
    public WFormField Item { get; }
    internal Dictionary`2<string, WFormField> FormFieldDictonary { get; }
    internal FormFieldCollection(WTextBody textBody);
    public WFormField get_Item(int index);
    public WFormField get_Item(string formFieldName);
    internal Dictionary`2<string, WFormField> get_FormFieldDictonary();
    public bool ContainsName(string itemName);
    internal void CorrectName(string oldName, string newName);
    internal void Add(WFormField ff);
    internal void Remove(WFormField ff);
    private void Populate(WTextBody textBody);
    private void PopulateFromParagraph(WParagraph para);
    private void PopulateFromTable(WTable table);
    private WFormField GetByName(string formFieldName);
    internal virtual void Close();
}
internal class Syncfusion.DocIO.DLS.FormFieldPropertiesConverter : object {
    public static void ReadFormFieldProperties(WFormField formField, FormField frmField);
    public static void WriteFormFieldProperties(FormField frmField, WFormField formField);
    private static TextFormat GetTextFormat(string formFieldFormat);
    private static string GetStringTextFormat(WTextFormField formField);
    private static NumberFormat GetNumberFormat(string formFieldFormat);
    private static string GetStringNumberFormat(NumberFormat numberFormat);
    private static string GetDefaultNumberValue(NumberFormat numberFormat);
    internal static string FormatText(TextFormat textFormat, string text);
    private static string FormatNumberText(string format, NumberFormat numberFormat, string inputData);
    private static string ConvertNumberToString(string format, double dValue);
}
[FlagsAttribute]
public enum Syncfusion.DocIO.DLS.FormFieldType : Enum {
    public int value__;
    public static FormFieldType TextInput;
    public static FormFieldType CheckBox;
    public static FormFieldType DropDown;
}
internal enum Syncfusion.DocIO.DLS.FrameHorzAnchor : Enum {
    public int value__;
    public static FrameHorzAnchor Text;
    public static FrameHorzAnchor Margin;
    public static FrameHorzAnchor Page;
    public static FrameHorzAnchor None;
}
internal enum Syncfusion.DocIO.DLS.FrameVertAnchor : Enum {
    public int value__;
    public static FrameVertAnchor Margin;
    public static FrameVertAnchor Page;
    public static FrameVertAnchor Text;
    public static FrameVertAnchor None;
}
internal enum Syncfusion.DocIO.DLS.FrameVerticalPosition : Enum {
    public int value__;
    public static FrameVerticalPosition Inline;
    public static FrameVerticalPosition Top;
    public static FrameVerticalPosition Center;
    public static FrameVerticalPosition Bottom;
    public static FrameVerticalPosition Inside;
    public static FrameVerticalPosition Outside;
}
internal class Syncfusion.DocIO.DLS.GradientFill : object {
    private FlipOrientation m_flip;
    private List`1<GradientStop> m_gradientStops;
    private LinearGradient m_linearGradient;
    private PathGradient m_pathGradient;
    private TileRectangle m_tileRectangle;
    private string m_Focus;
    private byte m_bFlags;
    internal string Focus { get; internal set; }
    internal bool RotateWithShape { get; internal set; }
    internal FlipOrientation Flip { get; internal set; }
    internal List`1<GradientStop> GradientStops { get; }
    internal LinearGradient LinearGradient { get; internal set; }
    internal PathGradient PathGradient { get; internal set; }
    internal TileRectangle TileRectangle { get; }
    internal bool IsEmptyElement { get; internal set; }
    internal string get_Focus();
    internal void set_Focus(string value);
    internal bool get_RotateWithShape();
    internal void set_RotateWithShape(bool value);
    internal FlipOrientation get_Flip();
    internal void set_Flip(FlipOrientation value);
    internal List`1<GradientStop> get_GradientStops();
    internal LinearGradient get_LinearGradient();
    internal void set_LinearGradient(LinearGradient value);
    internal PathGradient get_PathGradient();
    internal void set_PathGradient(PathGradient value);
    internal TileRectangle get_TileRectangle();
    internal bool get_IsEmptyElement();
    internal void set_IsEmptyElement(bool value);
    internal GradientFill Clone();
    internal void Close();
    internal bool Compare(GradientFill gradientFill);
    internal StringBuilder GetAsString();
}
internal enum Syncfusion.DocIO.DLS.GradientShadeType : Enum {
    public int value__;
    public static GradientShadeType Circle;
    public static GradientShadeType Rectangle;
    public static GradientShadeType Shape;
}
public enum Syncfusion.DocIO.DLS.GradientShadingStyle : Enum {
    public int value__;
    public static GradientShadingStyle Horizontal;
    public static GradientShadingStyle Vertical;
    public static GradientShadingStyle DiagonalUp;
    public static GradientShadingStyle DiagonalDown;
    public static GradientShadingStyle FromCorner;
    public static GradientShadingStyle FromCenter;
}
public enum Syncfusion.DocIO.DLS.GradientShadingVariant : Enum {
    public int value__;
    public static GradientShadingVariant ShadingUp;
    public static GradientShadingVariant ShadingDown;
    public static GradientShadingVariant ShadingOut;
    public static GradientShadingVariant ShadingMiddle;
}
internal class Syncfusion.DocIO.DLS.GradientStop : object {
    private byte m_position;
    private Color m_color;
    private byte m_opacity;
    private List`1<DictionaryEntry> m_fillSchemeColor;
    internal byte Position { get; internal set; }
    internal Color Color { get; internal set; }
    internal byte Opacity { get; internal set; }
    internal List`1<DictionaryEntry> FillSchemeColorTransforms { get; internal set; }
    internal byte get_Position();
    internal void set_Position(byte value);
    internal Color get_Color();
    internal void set_Color(Color value);
    internal byte get_Opacity();
    internal void set_Opacity(byte value);
    internal List`1<DictionaryEntry> get_FillSchemeColorTransforms();
    internal void set_FillSchemeColorTransforms(List`1<DictionaryEntry> value);
    internal GradientStop Clone();
    internal bool Compare(GradientStop gradientStop);
    internal StringBuilder GetAsString();
}
public enum Syncfusion.DocIO.DLS.GridPitchType : Enum {
    public int value__;
    public static GridPitchType NoGrid;
    public static GridPitchType CharsAndLine;
    public static GridPitchType LinesOnly;
    public static GridPitchType SnapToChars;
}
public class Syncfusion.DocIO.DLS.GroupShape : ShapeBase {
    private FillFormat m_fillFormat;
    private LineFormat m_lineFormat;
    private float m_rotation;
    internal Nullable`1<bool> flipH;
    internal Nullable`1<bool> flipV;
    private List`1<EffectFormat> m_effectList;
    private ChildShapeCollection m_childShapes;
    private byte m_bFlags;
    private List`1<ShapeStyleReference> m_shapeStyleItems;
    private AutoShapeType m_autoShapeType;
    private float m_xValue;
    private float m_yValue;
    private float m_extentXValue;
    private float m_extentYValue;
    internal Dictionary`2<string, Stream> m_docx2007Props;
    private float m_leftPosition;
    private float m_topPosition;
    private Dictionary`2<string, DictionaryEntry> m_relations;
    private Dictionary`2<string, ImageRecord> m_imageRelations;
    private List`1<string> m_styleProps;
    internal ChildShapeCollection ChildShapes { get; internal set; }
    internal Dictionary`2<string, DictionaryEntry> Relations { get; }
    internal Dictionary`2<string, ImageRecord> ImageRelations { get; }
    public float Rotation { get; public set; }
    public bool FlipHorizontal { get; public set; }
    public bool FlipVertical { get; public set; }
    public EntityType EntityType { get; }
    internal AutoShapeType AutoShapeType { get; internal set; }
    internal LineFormat LineFormat { get; internal set; }
    internal bool IsScenePropertiesInline { get; internal set; }
    internal bool IsLineStyleInline { get; internal set; }
    internal List`1<ShapeStyleReference> ShapeStyleReferences { get; internal set; }
    internal bool IsEffectStyleInline { get; internal set; }
    internal List`1<EffectFormat> EffectList { get; internal set; }
    internal bool Is2007Shape { get; internal set; }
    internal bool IsShapePropertiesInline { get; internal set; }
    internal FillFormat FillFormat { get; internal set; }
    internal bool IsFillStyleInline { get; internal set; }
    internal float X { get; internal set; }
    internal Dictionary`2<string, Stream> Docx2007Props { get; internal set; }
    internal float Y { get; internal set; }
    internal float ExtentXValue { get; internal set; }
    internal float ExtentYValue { get; internal set; }
    internal float LeftMargin { get; internal set; }
    internal float TopMargin { get; internal set; }
    internal List`1<string> DocxStyleProps { get; }
    public GroupShape(IWordDocument document);
    public GroupShape(IWordDocument document, ParagraphItem[] childShapes);
    internal ChildShapeCollection get_ChildShapes();
    internal void set_ChildShapes(ChildShapeCollection value);
    internal Dictionary`2<string, DictionaryEntry> get_Relations();
    internal Dictionary`2<string, ImageRecord> get_ImageRelations();
    public float get_Rotation();
    public void set_Rotation(float value);
    public bool get_FlipHorizontal();
    public void set_FlipHorizontal(bool value);
    public bool get_FlipVertical();
    public void set_FlipVertical(bool value);
    public virtual EntityType get_EntityType();
    internal AutoShapeType get_AutoShapeType();
    internal void set_AutoShapeType(AutoShapeType value);
    internal LineFormat get_LineFormat();
    internal void set_LineFormat(LineFormat value);
    internal bool get_IsScenePropertiesInline();
    internal void set_IsScenePropertiesInline(bool value);
    internal bool get_IsLineStyleInline();
    internal void set_IsLineStyleInline(bool value);
    internal List`1<ShapeStyleReference> get_ShapeStyleReferences();
    internal void set_ShapeStyleReferences(List`1<ShapeStyleReference> value);
    internal bool get_IsEffectStyleInline();
    internal void set_IsEffectStyleInline(bool value);
    internal List`1<EffectFormat> get_EffectList();
    internal void set_EffectList(List`1<EffectFormat> value);
    internal bool get_Is2007Shape();
    internal void set_Is2007Shape(bool value);
    internal bool get_IsShapePropertiesInline();
    internal void set_IsShapePropertiesInline(bool value);
    internal FillFormat get_FillFormat();
    internal void set_FillFormat(FillFormat value);
    internal bool get_IsFillStyleInline();
    internal void set_IsFillStyleInline(bool value);
    internal float get_X();
    internal void set_X(float value);
    internal Dictionary`2<string, Stream> get_Docx2007Props();
    internal void set_Docx2007Props(Dictionary`2<string, Stream> value);
    internal float get_Y();
    internal void set_Y(float value);
    internal float get_ExtentXValue();
    internal void set_ExtentXValue(float value);
    internal float get_ExtentYValue();
    internal void set_ExtentYValue(float value);
    internal float get_LeftMargin();
    internal void set_LeftMargin(float value);
    internal float get_TopMargin();
    internal void set_TopMargin(float value);
    internal List`1<string> get_DocxStyleProps();
    internal void Add(ParagraphItem[] childShapes);
    public void Add(ParagraphItem childShape);
    internal ChildShape ConvertShapeToChildShape(Shape shape);
    internal ChildShape ConvertTextboxToChildShape(WTextBox textBox);
    internal ChildShape ConvertChartToChildShape(WChart chart);
    internal ChildShape ConvertPictureToChildShape(WPicture picture);
    internal ChildGroupShape ConvertGroupShapeToChildGroupShape(GroupShape groupShape);
    internal virtual void Detach();
    internal virtual void AttachToDocument();
    internal void UpdatePositionForGroupShapeAndChildShape();
    internal void CalculateGroupShapeBounds();
    public ParagraphItem[] Ungroup();
    internal ParagraphItem[] Ungroup(ChildShapeCollection childShapes, PointF positionOfGroupShape);
    internal Shape ConvertChildShapeToShape(ChildShape childShape);
    internal WPicture ConvertChildShapeToPicture(ChildShape childShape);
    internal GroupShape ConvertChildGroupShapeToGroupShape(ChildGroupShape childGroupShape);
    internal WTextBox ConvertChildShapeToTextbox(ChildShape childShape);
    internal WChart ConvertChildShapeToChart(ChildShape childShape);
    internal bool Compare(GroupShape groupShape);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
    internal void InitializeVMLDefaultValues();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal bool HasChildGroupShape();
    internal void ApplyCharacterFormat(WCharacterFormat charFormat);
    internal void CloneShapeFormat(GroupShape shape);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    private void SetShapeWidth(WSection section);
    private void SetShapeHeight(WSection section);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal virtual void Close();
    internal bool StartsWithExt(string text, string value);
    internal Byte[] GetAsImage();
}
public class Syncfusion.DocIO.DLS.HeaderFooter : WTextBody {
    private HeaderFooterType m_type;
    private byte m_bFlags;
    private Watermark m_watermark;
    public EntityType EntityType { get; }
    internal HeaderFooterType Type { get; internal set; }
    internal bool WriteWatermark { get; internal set; }
    internal Watermark Watermark { get; internal set; }
    public bool LinkToPrevious { get; public set; }
    internal HeaderFooter(WSection sec, HeaderFooterType type);
    public virtual EntityType get_EntityType();
    internal HeaderFooterType get_Type();
    internal void set_Type(HeaderFooterType value);
    internal bool get_WriteWatermark();
    internal void set_WriteWatermark(bool value);
    internal Watermark get_Watermark();
    internal void set_Watermark(Watermark value);
    internal Watermark InsertWatermark(WatermarkType type);
    public bool get_LinkToPrevious();
    public void set_LinkToPrevious(bool value);
    internal bool CheckWriteWatermark();
    private bool GetLinkToPreviousValue();
    private void UpdateLinkToPrevious(bool linkToPrevious);
    private WSection FindSourceSection();
    private bool CheckShapes(HeaderFooter hf);
}
public enum Syncfusion.DocIO.DLS.HeaderFooterType : Enum {
    public int value__;
    public static HeaderFooterType EvenHeader;
    public static HeaderFooterType OddHeader;
    public static HeaderFooterType EvenFooter;
    public static HeaderFooterType OddFooter;
    public static HeaderFooterType FirstPageHeader;
    public static HeaderFooterType FirstPageFooter;
}
public enum Syncfusion.DocIO.DLS.HeadingLevel : Enum {
    public int value__;
    public static HeadingLevel None;
    public static HeadingLevel Heading1;
    public static HeadingLevel Heading2;
    public static HeadingLevel Heading3;
    public static HeadingLevel Heading4;
    public static HeadingLevel Heading5;
    public static HeadingLevel Heading6;
    public static HeadingLevel Heading7;
    public static HeadingLevel Heading8;
    public static HeadingLevel Heading9;
}
public enum Syncfusion.DocIO.DLS.HeightOrigin : Enum {
    public int value__;
    public static HeightOrigin Margin;
    public static HeightOrigin Page;
    public static HeightOrigin TopMargin;
    public static HeightOrigin BottomMargin;
    public static HeightOrigin InsideMargin;
    public static HeightOrigin OutsideMargin;
}
[ExtensionAttribute]
internal static class Syncfusion.DocIO.DLS.HelperMethods : object {
    [ExtensionAttribute]
internal static string ToString(char c, CultureInfo cultureInfo);
}
public enum Syncfusion.DocIO.DLS.HorizontalAlignment : Enum {
    public byte value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Center;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Justify;
    public static HorizontalAlignment Distribute;
    public static HorizontalAlignment JustifyMedium;
    public static HorizontalAlignment JustifyHigh;
    public static HorizontalAlignment JustifyLow;
    public static HorizontalAlignment ThaiJustify;
}
public enum Syncfusion.DocIO.DLS.HorizontalOrigin : Enum {
    public int value__;
    public static HorizontalOrigin Margin;
    public static HorizontalOrigin Page;
    public static HorizontalOrigin Column;
    public static HorizontalOrigin Character;
    public static HorizontalOrigin LeftMargin;
    public static HorizontalOrigin RightMargin;
    public static HorizontalOrigin InsideMargin;
    public static HorizontalOrigin OutsideMargin;
}
internal class Syncfusion.DocIO.DLS.HtmlAsciiCodesInfo : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <HtmlAsciiCodeTable>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, string> <HtmlNameTable>k__BackingField;
    internal static Dictionary`2<string, string> HtmlAsciiCodeTable { get; internal set; }
    internal static Dictionary`2<string, string> HtmlNameTable { get; internal set; }
    private static HtmlAsciiCodesInfo();
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, string> get_HtmlAsciiCodeTable();
    [CompilerGeneratedAttribute]
internal static void set_HtmlAsciiCodeTable(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, string> get_HtmlNameTable();
    [CompilerGeneratedAttribute]
internal static void set_HtmlNameTable(Dictionary`2<string, string> value);
    private static void AddHtmlAsciiSymbols();
    private static void AddHtmlNames();
}
internal enum Syncfusion.DocIO.DLS.HtmlBaselineAlignment : Enum {
    public int value__;
    public static HtmlBaselineAlignment Normal;
    public static HtmlBaselineAlignment Superscript;
    public static HtmlBaselineAlignment Subscript;
}
internal enum Syncfusion.DocIO.DLS.HtmlCellVerticalAlignment : Enum {
    public int value__;
    public static HtmlCellVerticalAlignment Top;
    public static HtmlCellVerticalAlignment Center;
    public static HtmlCellVerticalAlignment Bottom;
}
internal class Syncfusion.DocIO.DLS.HtmlConstants : object {
    public static string HeadTag;
    public static string TitleTag;
    public static string BodyTag;
    public static string HtmlTag;
    public static string StyleTag;
    public static string MetaTag;
    public static string ULTag;
    public static string DLTag;
    public static string OLTag;
    public static string ParagraphTag;
    public static string PreTag;
    public static string DivTag;
    public static string H1Tag;
    public static string H2Tag;
    public static string H3Tag;
    public static string H4Tag;
    public static string H5Tag;
    public static string H6Tag;
    public static string CenterTag;
    public static string LeftTag;
    public static string LiTag;
    public static string DTTag;
    public static string DDTag;
    public static string BlockQuoteTag;
    public static string ImageTag;
    public static string FontTag;
    public static string SpanTag;
    public static string BreakTag;
    public static string HrTag;
    public static string BoldTag;
    public static string ItalicTag;
    public static string UnderlineTag;
    public static string HyperlinkTag;
    public static string StrongTag;
    public static string BigTag;
    public static string SmallTag;
    public static string SubTag;
    public static string SupTag;
    public static string SampTag;
    public static string CodeTag;
    public static string EmTag;
    public static string CaptionTag;
    public static string VarTag;
    public static string StrikeTag;
    public static string DelTag;
    public static string InsTag;
    public static string TableTag;
    public static string TableHeaderTag;
    public static string TableBodyTag;
    public static string TableFooterTag;
    public static string TableRowTag;
    public static string TableCellHeaderTag;
    public static string TableCellDataTag;
    public static string ColumnGroupTag;
    public static string ColumnTag;
    public static string Align;
    public static string Type;
    public static string ListStart;
    public static string Margin;
    public static string Background;
    public static string Color;
    public static string Size;
    public static string Text;
    public static string BgColor;
    public static string Fontfamily;
    public static string Width;
    public static string Height;
    public static string Left;
    public static string Right;
    public static string Center;
    public static string Justify;
    public static string NavigationURL;
    public static string Target;
    public static string ImageSource;
    public static string FontWeight_Bold;
    public static string FontWeight_SemiBold;
    public static string FontWeight_ExtraBold;
    public static string FontStyle_Italic;
    public static string FontStyle_Normal;
    public static string FontStyle_Oblique;
    public static string SmallCaps;
    public static string RowSpan;
    public static string ColumnSpan;
    public static string Border;
    public static string ColumnGroupSpan;
    public static string Valign;
    public static string LeftIndent;
    public static string CellSpacing;
    public static string CellPadding;
    public static string LeftCommentSymbol;
    public static string RightCommentSymbol;
    public static string DocTypeComment;
    public static string NonBreakingSpace;
    internal static string WhiteSpace;
    private static Dictionary`2<string, Color> colorTable;
    public static string HexaDecimalString;
    internal static Dictionary`2<string, Color> ColorTable { get; }
    internal static Dictionary`2<string, Color> get_ColorTable();
    internal static bool IsSupportedTag(string tagName);
    internal static bool IsSelfEndedTag(string tagName);
    internal static bool IsTableItemTag(string tagName);
    internal static bool IsParagraphTag(string tagName);
    internal static bool IsHeadingTag(string name);
    internal static bool IsParagraphItemTag(string tagName);
    internal static bool IsListTag(string tagName);
    internal static string ConvertFontTagSize(string size, string basePixel);
    internal static bool IsListItemTag(string tagName);
    internal static bool IsHeadTag(string tagName);
    internal static bool IsNonSpacingTag(string tagName);
    internal static double ConvertSize(string paramValue, string currentBasePixel);
    internal static double ConvertTableWidth(string paramValue);
    internal static double GetNumberBefore(string val, string end);
    internal static double GetNumber(string val);
    internal static int GetInteger(string val);
    internal static double ParseNumber(string paramValue);
    internal static bool IsHexaString(string hexaString);
    private static void InitColorTable();
    private static void FillColorTable(Dictionary`2<string, Color> colorTable, Type enumType);
}
public class Syncfusion.DocIO.DLS.HtmlConverterFactory : object {
    [ThreadStaticAttribute]
private static IHtmlConverter s_htmlConverter;
    public static IHtmlConverter GetInstance();
    public static void Register(IHtmlConverter converter);
}
internal class Syncfusion.DocIO.DLS.HTMLConverterImpl : object {
    private static string DEF_WHITESPACE;
    private static float DEF_LH_INDENT;
    private static float DEF_MEDIUMVALUE;
    private static float DEF_THICKVALUE;
    private static float DEF_THINVALUE;
    private static float DEF_INDENT;
    private static string c_Xhtml1ScrictDocType;
    private static string c_Xhtml1TRansitionalDocType;
    private byte m_bFlags;
    private static Regex m_removeSpaces;
    private static float c_DefCellWidth;
    private Stack`1<WField> m_fieldStack;
    private RootNode rootNode;
    private XmlDocument m_xmlDoc;
    private Stack`1<TextFormat> m_styleStack;
    private BodyItemCollection m_bodyItems;
    private WTextBody m_textBody;
    private Stack`1<BodyItemCollection> m_nestedBodyItems;
    private Stack`1<WTable> m_nestedTable;
    private WParagraph m_currParagraph;
    private WTable m_currTable;
    private float cellSpacing;
    private string m_basePath;
    private int m_curListLevel;
    private bool isPreTag;
    private List`1<int> m_listLevelNo;
    private bool checkFirstElement;
    private Stack`1<ListStyle> m_listStack;
    private Stack`1<string> m_lfoStack;
    [ThreadStaticAttribute]
private static TextFormat s_defFormat;
    internal float childTableWidth;
    private HorizontalAlignment m_horizontalAlignmentDefinedInCellNode;
    private HorizontalAlignment m_horizontalAlignmentDefinedInRowNode;
    private bool m_bBorderStyle;
    private int m_currTableFooterRowIndex;
    private TextFormat currDivFormat;
    private bool m_bIsInDiv;
    private Stack`1<bool> m_stackTableStyle;
    private Stack`1<bool> m_stackRowStyle;
    private Stack`1<bool> m_stackCellStyle;
    public IWParagraphStyle m_userStyle;
    private TableGrid tableGrid;
    private bool m_bIsInBlockquote;
    private int m_blockquoteLevel;
    private ListStyle m_userListStyle;
    private int m_divCount;
    private bool m_bIsAlignAttrDefinedInRowNode;
    private bool m_bIsAlignAttriDefinedInCellNode;
    private bool m_bIsVAlignAttriDefinedInRowNode;
    private VerticalAlignment m_verticalAlignmentDefinedInRowNode;
    private bool m_bIsBorderCollapse;
    private Stack`1<float> m_listLeftIndentStack;
    private bool m_bIsWithinList;
    private Color m_hyperlinkcolor;
    internal WSection m_currentSection;
    internal HTMLImportSettings HtmlImportSettings;
    private CSSStyle m_CSSStyle;
    private bool isPreserveBreakForInvalidStyles;
    private bool isLastLevelSkipped;
    private int lastSkippedLevelNo;
    private int lastUsedLevelNo;
    private int listCount;
    private bool isParsingTableHeader;
    private List`1<string> bookmarkStartNames;
    private List`1<string> bookmarkEndNames;
    private bool IsPreviousItemFieldStart { get; private set; }
    private bool IsStyleFieldCode { get; private set; }
    private bool IsTableStyle { get; private set; }
    private bool IsRowStyle { get; private set; }
    private bool IsCellStyle { get; private set; }
    internal CSSStyle CSSStyle { get; }
    internal float ClientWidth { get; }
    protected string BasePath { get; protected set; }
    private Stack`1<WField> FieldStack { get; }
    private WField CurrentField { get; }
    protected TextFormat CurrentFormat { get; }
    protected WParagraph CurrentPara { get; }
    private Stack`1<string> LfoStack { get; }
    private Stack`1<ListStyle> ListStack { get; }
    private ListStyle CurrentListStyle { get; }
    private List`1<string> BookmarkStartNames { get; }
    private List`1<string> BookmarkEndNames { get; }
    private static HTMLConverterImpl();
    private bool get_IsPreviousItemFieldStart();
    private void set_IsPreviousItemFieldStart(bool value);
    private bool get_IsStyleFieldCode();
    private void set_IsStyleFieldCode(bool value);
    private bool get_IsTableStyle();
    private void set_IsTableStyle(bool value);
    private bool get_IsRowStyle();
    private void set_IsRowStyle(bool value);
    private bool get_IsCellStyle();
    private void set_IsCellStyle(bool value);
    internal CSSStyle get_CSSStyle();
    internal float get_ClientWidth();
    protected string get_BasePath();
    protected void set_BasePath(string value);
    private Stack`1<WField> get_FieldStack();
    private WField get_CurrentField();
    protected TextFormat get_CurrentFormat();
    protected WParagraph get_CurrentPara();
    private Stack`1<string> get_LfoStack();
    private Stack`1<ListStyle> get_ListStack();
    private ListStyle get_CurrentListStyle();
    private List`1<string> get_BookmarkStartNames();
    private List`1<string> get_BookmarkEndNames();
    public sealed virtual void AppendToTextBody(ITextBody textBody, string html, int paragraphIndex, int paragraphItemIndex, IWParagraphStyle style, ListStyle listStyle);
    public sealed virtual void AppendToTextBody(ITextBody textBody, string html, int paragraphIndex, int paragraphItemIndex);
    private bool ParseBodyStyle(HtmlNode node, ITextBody textBody, int paragraphIndex);
    private void ApplyPageFormat(TextFormat format);
    private void ApplyPageBorder(TextFormat format);
    private void SetNextStyleForParagraphStyle(WordDocument document);
    private void ParseBodyAttributes(HtmlNode node);
    private void RemoveLastLineBreakFromParagraph(BodyItemCollection itemCollection);
    public sealed virtual bool IsValid(string html, XHTMLValidationType type);
    public sealed virtual bool IsValid(string html, XHTMLValidationType type, String& exceptionMessage);
    private string ReplaceHtmlConstantByUnicodeChar(string html);
    private string ReplaceHtmlSpecialCharacters(string html);
    private string ReplaceHtmlSymbols(string html);
    private string ReplaceHtmlCharacters(string html);
    private string ReplaceHtmlMathSymbols(string html);
    private string ReplaceHtmlGreekLetters(string html);
    private string ReplaceHtmlOtherEntities(string html);
    private string ReplaceAmpersand(string html);
    private List`1<int> GetPositions(string source, string searchString);
    private void LoadXhtml(string html);
    private string LoadXhtml(string html, XmlSchema schema);
    private void readerSettings_ValidationEventHandler(object sender, ValidationEventArgs e);
    private string PrepareHtml(string html, XmlSchema schema);
    private string RemoveXmlAndDocTypeElement(string html);
    private string InsertHtmlElement(string html, XmlSchema schema);
    private string MoveHeadElementsFromBodyToHead(string html);
    private string GetDocumentTitle();
    private void TraverseChildNodes(HtmlNode node);
    private void TraverseTextWithinTag(HtmlNode node, HtmlNode prevNode);
    private bool IsTabText(string text);
    private void AddNewParagraphToTextBody(HtmlNode node);
    private void ApplySpanParagraphFormat();
    private bool IsPargraphNeedToBeAdded(HtmlNode node);
    private string RemoveWhiteSpacesAtParagraphBegin(string text, WParagraph CurrentPara);
    private void AddNewParagraph(HtmlNode node);
    private bool NodeIsInDiv(HtmlNode node);
    private void TraverseParagraphTag(HtmlNode node);
    private bool IsFirstNode(HtmlNode node);
    private void ParseTags(HtmlNode node);
    private void ParseFormField(HtmlNode node);
    private void RemoveDuplicateFormFieldBkmk(WFormField formField);
    private bool ParseCheckBoxProperties(HtmlNode node, WCheckBox checkbox);
    private WFormField InsertFormField(HtmlNode node, int fieldType);
    internal void OnInsertFormField(WFormField formField);
    private void ParseDropDownField(HtmlNode node, WDropDownFormField dropDownFormField);
    private bool IsNodeContainAttribute(HtmlNode node, string attrName);
    private void ParseParagraphTag(HtmlNode node);
    private void ApplyBidiToParaItems();
    private bool IsSplitCharacterRTLEnabled(WTextRange textRange);
    internal void SplitLtrAndRtlText(ParagraphItemCollection paraItems, TextSplitter splitter);
    private bool IsRightToLeftLang(short id);
    internal void SplitTextBasedOnCharacterRange(ParagraphItemCollection paraItems);
    internal void SplitTextAndArabianSplitCharacters(ParagraphItemCollection paraItems);
    internal static bool IsArabicWordSplitChar(char character);
    internal static bool IsWordSplitChar(char character);
    internal void CombineConsecutiveRTL(ParagraphItemCollection paraItems);
    private bool IsNodeEmpty(HtmlNode node);
    private void ParseHeadingTag(TextFormat tf, HtmlNode node);
    private void OnBlockquoteBegin(HtmlNode node);
    private void OnBlockquoteEnd();
    private void OnDivBegin(HtmlNode node);
    private void OnDivEnd();
    private void OnTableEnd();
    private void OnTableBegin();
    private void SetNestedTableCellWidthBasedOnPreferredWidth(WTable table, float clientWidth);
    private void WriteHyperlink(HtmlNode node);
    private IWField TraverseHyperlinkField(HtmlNode node);
    private void ApplyHyperlinkStyle(WField field);
    private void ParseImageAttribute(HtmlNode node, IWPicture pic, Boolean& isHeightSpecified, Boolean& isWidthSpecified);
    private void ParseImageStyleAttribute(string attr, IWPicture pic, Boolean& isHeightSpecified, Boolean& isWidthSpecified);
    private void WriteImage(HtmlNode node);
    [AsyncStateMachineAttribute("Syncfusion.DocIO.DLS.HTMLConverterImpl/<GetImage>d__176")]
private Task GetImage(string src, IWPicture pic);
    private Stream GetManifestResourceStream(string fileName);
    private void ParseFormattingTags(HtmlNode tag);
    private void UpdateListLeftIndentStack(float leftIndent, bool isInlineLeftIndent);
    private void ApplyFontSize(string value, TextFormat format);
    private void SetListMode(bool isBulleted, HtmlNode node, TextFormat format);
    private void WriteParagraph(HtmlNode node);
    private bool IsHeadingStyle();
    private void ApplyParagraphStyle();
    private void ApplyParagraphFormat(HtmlNode node);
    private float AdjustLeftIndentForList(HtmlNode node, TextFormat format);
    private bool IsBottomMarginNeedToBePreserved(HtmlNode node, TextFormat format);
    private bool IsTopMarginNeedToBePreserved(HtmlNode node, TextFormat format);
    private bool IsLastNode(HtmlNode node);
    private bool IsDefinedInline(HtmlNode node, string attName);
    private void ApplyListFormatting(WParagraphFormat pformat, TextFormat format, HtmlNode node);
    private ListPatternType GetListPatternType(string attrValue);
    private void ApplyParagraphBorder(WParagraphFormat pformat, TextFormat format);
    private void ApplyDivParagraphFormat(HtmlNode node);
    private void ApplyTextFormatting(WCharacterFormat charFormat);
    private void ApplyDivCharacterFormat(WCharacterFormat charFormat);
    private TextFormat EnsureStyle(HtmlNode node);
    internal string ExtractValue(string value);
    private bool ParseStyle(HtmlNode node);
    private bool IsDefaultBorderFormat(TableBorders borders);
    private void GetFormat(TextFormat format, string paramName, string paramValue, HtmlNode node);
    private TabJustification GetTabjustification(string value);
    private TabLeader GetTabLeader(string value);
    private void GetTextFormat(TextFormat format, string paramName, string paramValue);
    private void ParseLineHeight(string paramValue, TextFormat format, Boolean& isPreserveBreakForInvalidStyles);
    private Color GetRGBColor(String[] value, Int32& j);
    private Color GetColor(string attValue);
    private string GetFontName(string paramValue);
    private void GetFont(string paramValue, TextFormat format);
    private Dictionary`2<string, string> SeparateCssFont(string paramValue, float baseFontSize);
    private float CalculateFontSize(string value);
    private bool IsFontSize(string value);
    private void ParseParagraphBorder(string paramValue, Color& borderColor, Single& borderWidth, BorderStyle& style);
    private void ParseBorder(string paramValue, Border border);
    private bool IsBorderWidth(string value);
    private float CalculateBorderWidth(string value);
    private string GetValidRGBHexedecimal(string value);
    private String[] SeperateParamValue(string paramValue);
    private BorderStyle ToBorderType(string type);
    private void LeaveStyle(bool stylePresent);
    private void UpdateParaFormat(HtmlNode node, WParagraphFormat pformat);
    private TextFormat AddStyle();
    private void UpdateHeightAndWidth(WPicture pic, bool isHeightSpecified, bool isWidthSpecified);
    private string GetAttributeValue(HtmlNode node, string attrName);
    private string GetStyleAttributeValue(string styleAttr, string styleAttrName);
    private bool ConvertToBoolValue(string paramvalue);
    private double ConvertSize(string paramValue, float baseSize);
    private float GetNumberBefore(string val, string end);
    private void OnValidation(object sender, ValidationEventArgs args);
    private void BuildListStyle(ListPatternType type, HtmlNode node);
    public void CreateListLevel(ListStyle style, ListPatternType type, HtmlNode node);
    private string GetListStyleType(HtmlNode node);
    private string GetListStyleTypeFromContainer(HtmlNode node);
    private void UpdateBulletChar(int listLevelNo, HtmlNode node, WListLevel listLevel);
    private void CreateListStyle(HtmlNode node);
    private WListLevel CreateListOverrideStyle(int levelNumber, HtmlNode node);
    private int PrepareListStart(string start, string type);
    private bool IsListNodeStart(HtmlNode node);
    private void ParseTable(HtmlNode node);
    private void ApplyDivTableFormat(HtmlNode node);
    private void ParseTableRows(HtmlNode node, SpanHelper spanHelper, TableBorders tblBorders);
    private void ParseCellAttrs(HtmlNode node, WTableCell cell, SpanHelper spanHelper, TableBorders tblBrdrs);
    private void ParseCellStyle(string attr, WTableCell cell, HtmlNode node, SpanHelper spanHelper);
    private void ApplyBorders(Borders borders, bool isTable);
    private void ApplyBorder(Border border, bool isTable);
    private void ApplyTableBorder(RowFormat format);
    private void ApplyCellBorder(CellFormat format, TableBorders ownerTableFormat);
    private void ParseBorderLineWidth(Borders borders, string paramValue);
    private void ParseBorderStyle(Borders borders, string paramValue);
    private void ParseBorderColor(Borders borders, string paramValue);
    private void ParseRowAttrs(HtmlNode rowNode, WTableRow row);
    private void UpdateHiddenPropertyBasedOnParentNode(HtmlNode rowNode, WTableRow row);
    private void ParseTableAttrs(HtmlNode node, SpanHelper spanHelper, TableBorders brdrs);
    private void ParseTableStyle(string attr, SpanHelper spanHelper);
    private void SetTableWidthFromTableStyle(string widthValue, string maxWidthValue, SpanHelper spanHelper);
    private void ParseTableProperties(string paramName, string paramValue, TextFormat textFormat);
    private void ParseTableBorder(string paramValue, Border border);
    private void ParseRowStyle(string attr, WTableRow row);
    private void ApplyTableBorder(string paramName, string paramValue, Border border);
    private float ToPoints(string val);
    private VerticalAlignment GetVerticalAlignment(string val);
    private HorizontalAlignment GetHorizontalAlignment(string val);
    private int RomanToArabic(string numberStr);
    private void Init();
    private void ParseCssStyle(HtmlNode node);
    private CssStyleType FindCSSselectorType(string selectorName);
    private void FindCSSstyleItem(HtmlNode node, TextFormat textFormat);
    private void FindIDSelector(TextFormat textFormat, HtmlNode node);
    private void FindClassSelector(TextFormat textFormat, CellFormat cellFormat, HtmlNode node);
    private void ApplyCSSStyleForCell(CellFormat cellFormat, HtmlNode node, CSSStyleItem styleItem);
    private void FindDescendantSelector(TextFormat textFormat, HtmlNode node);
    private void FindElementSelector(TextFormat textFormat, HtmlNode node);
    private void FindChildSelector(TextFormat textFormat, HtmlNode node);
    private void ApplyCSSStyle(TextFormat textFormat, HtmlNode node, CSSStyleItem styleItem);
    private void ApplyImportantCSSStyle(TextFormat textFormat, HtmlNode node, CSSStyleItem styleItem);
    private void ParseCSSTextFormatValue(string textFormat, CSSStyleItem CSSItem);
    private void InsertFieldBegin(string fieldCode);
    private void ParseFieldSeparator();
    private void ParseFieldEnd();
    private void ParseFieldCode(FieldType fieldType, string fieldCode);
    private void ParseField(HtmlNode node);
    private string RemoveNewLineCharacter(string text);
    internal bool StartsWithExt(string text, string value);
    internal bool ShouldPreserveBookmark(HtmlNode node);
    internal bool HasMatchingUncreatedParentNode(HtmlNode node, string tagName);
}
internal enum Syncfusion.DocIO.DLS.HtmlDisplayType : Enum {
    public int value__;
    public static HtmlDisplayType None;
    public static HtmlDisplayType Block;
}
public class Syncfusion.DocIO.DLS.HTMLExport : object {
    private static string DEF_HYPHEN;
    private static char DEF_NONBREAK_HYPHEN;
    private static char DEF_SOFT_HYPHEN;
    private XmlWriter m_writer;
    private string m_fileNameWithoutExt;
    private bool m_bIsWriteListTab;
    private int m_imgCounter;
    private int m_currListLevel;
    private Stack`1<int> listStack;
    private Stack`1<WField> m_fieldStack;
    private Stack`1<WField> m_nestedHyperlinkFieldStack;
    private bool isKeepValue;
    private Dictionary`2<int, WFootnote> m_footnotes;
    private Dictionary`2<int, WFootnote> m_endnotes;
    private Dictionary`2<string, Dictionary`2<int, int>> m_lists;
    private string m_ftntAttrStr;
    private string m_ftntString;
    private bool m_bUseAbsolutePath;
    private bool m_bSkipFieldItem;
    private bool m_bSkiPageRefFieldItem;
    private WParagraph m_currPara;
    private bool m_bIsFirstSection;
    private Dictionary`2<string, string> m_stylesColl;
    private WordDocument m_document;
    private string m_prefixedValue;
    private bool m_bIsPrefixedList;
    private bool m_bIsParaWithinDivision;
    private bool m_bIsPreserveListAsPara;
    private Dictionary`2<WPicture, int> m_behindWrapStyleFloatingItems;
    private bool m_cacheFilesInternally;
    private bool m_hasNavigationId;
    private bool m_hasOEBHeaderFooter;
    private int m_nameID;
    private String[] m_headingStyles;
    private MemoryStream m_styleSheet;
    private Dictionary`2<string, string> m_bookmarks;
    private string m_ftntRefAttrStr;
    private WCharacterFormat m_currListCharFormat;
    public bool UseAbsolutePath { get; public set; }
    private Dictionary`2<string, Dictionary`2<int, int>> Lists { get; }
    private Dictionary`2<WPicture, int> BehindWrapStyleFloatingItems { get; }
    private WField CurrentField { get; }
    private WField PreviousField { get; }
    private Dictionary`2<int, WFootnote> Footnotes { get; }
    private Stack`1<WField> FieldStack { get; }
    private Dictionary`2<int, WFootnote> Endnotes { get; }
    internal bool CacheFilesInternally { get; internal set; }
    internal bool HasNavigationId { get; internal set; }
    internal bool HasOEBHeaderFooter { get; internal set; }
    internal Stream EmbeddedStyleSheet { get; }
    public bool get_UseAbsolutePath();
    public void set_UseAbsolutePath(bool value);
    private Dictionary`2<string, Dictionary`2<int, int>> get_Lists();
    private Dictionary`2<WPicture, int> get_BehindWrapStyleFloatingItems();
    private WField get_CurrentField();
    private WField get_PreviousField();
    private Dictionary`2<int, WFootnote> get_Footnotes();
    private Stack`1<WField> get_FieldStack();
    private Dictionary`2<int, WFootnote> get_Endnotes();
    internal bool get_CacheFilesInternally();
    internal void set_CacheFilesInternally(bool value);
    internal bool get_HasNavigationId();
    internal void set_HasNavigationId(bool value);
    internal bool get_HasOEBHeaderFooter();
    internal void set_HasOEBHeaderFooter(bool value);
    internal Stream get_EmbeddedStyleSheet();
    public void SaveAsXhtml(WordDocument doc, Stream stream);
    public void SaveAsXhtml(WordDocument doc, Stream stream, Encoding encoding);
    private XmlWriter CreateWriter(Stream data, Encoding encoding);
    private void WriteXhtml(WordDocument doc, string cssFileName);
    private void Close();
    private void WriteHead(WordDocument doc, string cssFileName);
    private void WriteBody(WordDocument doc);
    internal void AddTrailVersion(WordDocument doc);
    private void WriteBackgroundImage(Byte[] pic);
    private string GetStyleSheet(WordDocument doc);
    private void AppendStyleSheet(Style style, StringBuilder sb);
    private void AppendLine(StringBuilder sb, string textline);
    private void WritePageBreakBeforeSection();
    private void WriteSection(WSection sec);
    private void WriteFootnotes(FootnoteType ftnType);
    private void WriteTextBody(WTextBody body);
    private void WriteBodyItem(TextBodyItem bodyItem);
    private void WriteParagraph(WParagraph para);
    private bool SkipItem(ParagraphItem item);
    private bool IsWritingHyperinkFieldResult();
    private void WriteParagraphItems(ParagraphItemCollection paraItems);
    private string CombineTextInSubsequentTextRanges(ParagraphItemCollection paraItemCollection, Int32& index);
    private void WriteBreak(ParagraphItem item);
    private bool IsLastItemLineBreak(Break breakItem);
    private void WriteTextBox(WTextBox textBox);
    private void WriteFootnote(WFootnote footnote);
    private void WriteFootnoteSpan(WCharacterFormat charFormat);
    private void WriteFtntAttributes(WCharacterFormat charFormat);
    private void WriteFormField(WFormField field);
    private void WriteParagraphOrList(WParagraph para);
    private bool IsPreserveListAsParagraph(WListFormat listFormat);
    private void EnsureWithinDivision(WParagraph para);
    private void WriteParaStyle(WParagraph para, string style, WListFormat listFormat);
    private string AddInlineDecorationStyle(WParagraph para, string style);
    private bool IsHeadingStyleNeedToPreserveAsElementSelector(string styleName);
    private string WriteList(WListFormat listFormat, WParagraph para);
    private WCharacterFormat GetCharacterFormatOfList(WParagraph paragraph);
    private void CopyCharacterFormatting(WCharacterFormat sourceFormat, WCharacterFormat destFormat);
    private string EnsureStyle(string currentStyle, string existingStyle);
    private string ValidateStyle(string p, string style);
    private void WriteListStartTag(WListFormat listFormat, int startAt);
    private int GetStartValue(WListFormat listFormat);
    private void PreserveListAsPara(WListFormat listFormat, WParagraph para);
    private void PreserveBulletsAndNumberingAsText(WListFormat listFormat, int startAt);
    private void WriteTabSpace(WListFormat listFormat);
    private string GetNumberingsAsText(ListPatternType type, int startAt);
    private string ConvertArabicToRoman(int arabic);
    private string GetPrefixValue(WListFormat listFormat, int startAt);
    private void WriteBookmark(BookmarkStart bookmark, Boolean& isBkmkStartWritten);
    private bool IsFormFieldBookmark(BookmarkStart bookmark);
    private bool IsParaHasOnlyBookmarks(BookmarkStart bookmarkstart);
    private void WriteField(WField field);
    private void PushToFieldStack(WField field);
    private void InsertFieldBegin(WField field);
    private void WriteFieldMark(WFieldMark fieldMark);
    private void WriteHyperlink(Hyperlink hyperlink);
    private void WriteImage(WPicture pic);
    private void WriteTextRange(WTextRange tr, string combinedText);
    private void WriteSpanText(string text, string style, WTextRange tr);
    private void WriteTable(WTable table, bool isTableCreatedFromTextBox);
    private bool CheckTableContainsMisalignedColumns(WTable table, List`1<float> colOffsets);
    private void WriteGridCell(int gridCount, PreferredWidthInfo gridWidth);
    private void ApplyTableGridStyle(WTable table, bool isTableCreatedFromTextBox);
    private Border GetBottomBorderOfVerticallyMergedCell(WTableCell cell);
    private Border GetRightBorderOfHorizontallyMergedCell(WTableCell cell);
    private void WriteOffsetsRow(List`1<float> offsets);
    private void WriteSpanAttributes(List`1<float> colOffsets, float rowOffset, WTableCell cell);
    private int GetRowspan(WTableCell cell, float rowOffset);
    private WTableCell GetCellByOffset(WTableRow row, float rowOffset);
    private List`1<float> CalculateOffsets(WTable table);
    private int GetColspan(List`1<float> colOffsets, float startOffset, float colWidth);
    private int GetColspan(WTableCell cell, List`1<float> colOffsets, float startOffset);
    private float WriteCellAttributes(WTableCell cell);
    private void WriteTableAttributes(WTable table, bool isTableCreatedFromTextBox);
    private bool IsBorderAttributeNeedToPreserve(WTable table, string borderStyle);
    private void WriteTableBorder(WTable table, StringBuilder sb);
    private void GetTableborder(Border border, string suffix, StringBuilder sb);
    private string WriteTableCellSpacing(WTable table);
    private string WriteTableWidth(WTable table);
    private void WriteTableAlignment(WTable table, bool isTableCreatedFromTextBox);
    private RowAlignment GetTableAlignment(RowFormat tableFormat);
    private void WriteRowAttributes(WTableRow row);
    private bool IsAllCellsHidden(WTableRow row);
    private string GetPaddings(Paddings paddings);
    private string GetPaddings(WTableCell cell);
    private Paddings GetCellPaddingBasedOnTable(WTableCell cell);
    private string GetStyle(CellFormat format);
    private string GetCellBackground(CellFormat format);
    private string GetParagraphBackground(WParagraphFormat format);
    private int GetColorValue(int foreColorValue, int backColorValue, float percent, bool isForeColorEmpty, bool isBackColorEmpty);
    private void GetBordersStyle(Borders cellBorders, Borders rowBorders, StringBuilder sb, WTableCell ownerCell);
    private Border GetRowBorder(Borders borders, WTableCell cell, string side);
    private void GetBorderStyle(Border cellBorder, Border rowBorder, StringBuilder sb, string suffix, WTableCell cell);
    private void GetCellborderStyleBasedOnTableBorder(WTableCell cell, string suffix, StringBuilder sb);
    private void GetCellBorderColorBasedOnTableBorder(WTableCell cell, string suffix, StringBuilder sb);
    private void GetBorderColor(Border border, StringBuilder sb, string suffix);
    private void GetCellborderWidthBasedOnTableBorder(WTableCell cell, string suffix, StringBuilder sb);
    private float GetLineWidthBasedOnBorderStyle(Border border);
    private string GetStyle(WParagraphFormat format, bool isListLevel, bool isListAsPara, WListFormat listFormat);
    private bool ContextualSpacingChecking();
    private WParagraph GetParagraphFromTable(WTable table);
    private string GetStyle(WCharacterFormat format);
    private string GetStyle(WCharacterFormat format, bool style);
    private string GetHighlightColor(Color color);
    private void SetCheckBoxSize(string style, WCheckBox checkBox, Single& checkBoxSize);
    private string GetColor(Color color);
    private string GetBordersStyle(Borders borders, StringBuilder sb);
    private void GetBorderStyle(string suffix, Border border, StringBuilder sb);
    private string ToBorderStyle(BorderStyle style);
    private string ToParagraphBorderStyle(BorderStyle style);
    private string EncodeName(string name);
    private string CheckValidSymbols(string name);
    private void WriteEmptyPara(WCharacterFormat chFormat);
    private void WriteText(string text);
    private string GetTabText();
    private string ReplaceEmptySpace(string text);
    private string GetClassAttr(Style style);
    private void UpdateStyleHierarchy(Style style, List`1<string> styleHirarchy);
    private bool CheckParentFormat(WParagraphFormat format);
    private void CloseList(int paraLevelNum, WParagraph paragraph);
    private void WriteEndElement(int levelDiff);
    private void WriteListType(ListPatternType type, WListFormat listFormat);
    private int GetLevelNumer(WListFormat listFormat);
    private int GetLstStartVal(WListFormat format);
    private int GetListStartAt(WListFormat format, int levelNumber);
    private void EnsureLvlRestart(WListFormat format, bool fullRestart);
    private float Build_TextureStyle(TextureStyle ts);
    private WListFormat GetListFormat(WParagraph para);
    private int GetOutLineLevel(WParagraphFormat paraFormat);
    private void SortBehindWrapStyleItemByZindex();
    private void CreateNavigationPoint(WParagraph para);
    private bool CheckHeadingStyle(string styleName);
    private string GetParagraphText(string text);
    private int GetHeadingLevel(string p);
    internal string GetNavigationPoint();
}
internal class Syncfusion.DocIO.DLS.HtmlHelperMethods : object {
    internal static string ReplaceBreakCharacters(string text);
}
internal enum Syncfusion.DocIO.DLS.HtmlHighlightColor : Enum {
    public int value__;
    public static HtmlHighlightColor NoColor;
    public static HtmlHighlightColor Yellow;
    public static HtmlHighlightColor BrightGreen;
    public static HtmlHighlightColor Turquoise;
    public static HtmlHighlightColor Pink;
    public static HtmlHighlightColor Blue;
    public static HtmlHighlightColor Red;
    public static HtmlHighlightColor DarkBlue;
    public static HtmlHighlightColor Teal;
    public static HtmlHighlightColor Green;
    public static HtmlHighlightColor Violet;
    public static HtmlHighlightColor DarkRed;
    public static HtmlHighlightColor DarkYellow;
    public static HtmlHighlightColor Gray50;
    public static HtmlHighlightColor Gray25;
    public static HtmlHighlightColor Black;
}
internal class Syncfusion.DocIO.DLS.HtmlHyperlink : object {
    internal string text;
    internal string Text { get; internal set; }
    internal string get_Text();
    internal void set_Text(string value);
}
public class Syncfusion.DocIO.DLS.HTMLImportSettings : object {
    private byte m_bFlags;
    [CompilerGeneratedAttribute]
private ImageNodeVisitedEventHandler ImageNodeVisited;
    public bool IsConsiderListStyleAttribute { get; public set; }
    internal bool AllowUnsupportedCSSProperties { get; internal set; }
    public bool get_IsConsiderListStyleAttribute();
    public void set_IsConsiderListStyleAttribute(bool value);
    internal bool get_AllowUnsupportedCSSProperties();
    internal void set_AllowUnsupportedCSSProperties(bool value);
    [CompilerGeneratedAttribute]
public void add_ImageNodeVisited(ImageNodeVisitedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImageNodeVisited(ImageNodeVisitedEventHandler value);
    internal ImageNodeVisitedEventArgs ExecuteImageNodeVisitedEvent(Stream imageStream, string uri);
}
internal enum Syncfusion.DocIO.DLS.HtmlLineStyleType : Enum {
    public int value__;
    public static HtmlLineStyleType None;
    public static HtmlLineStyleType Single;
    public static HtmlLineStyleType Dot;
    public static HtmlLineStyleType DashSmallGap;
    public static HtmlLineStyleType DashLargeGap;
    public static HtmlLineStyleType DashDot;
    public static HtmlLineStyleType DashDotDot;
    public static HtmlLineStyleType Double;
    public static HtmlLineStyleType Triple;
    public static HtmlLineStyleType ThinThickSmallGap;
    public static HtmlLineStyleType ThickThinSmallGap;
    public static HtmlLineStyleType ThinThickThinSmallGap;
    public static HtmlLineStyleType ThinThickMediumGap;
    public static HtmlLineStyleType ThickThinMediumGap;
    public static HtmlLineStyleType ThinThickThinMediumGap;
    public static HtmlLineStyleType ThinThickLargeGap;
    public static HtmlLineStyleType ThickThinLargeGap;
    public static HtmlLineStyleType ThinThickThinLargeGap;
    public static HtmlLineStyleType SingleWavy;
    public static HtmlLineStyleType DoubleWavy;
    public static HtmlLineStyleType DashDotStroked;
    public static HtmlLineStyleType Emboss3D;
    public static HtmlLineStyleType Engrave3D;
    public static HtmlLineStyleType Outset;
    public static HtmlLineStyleType Inset;
    public static HtmlLineStyleType Thick;
    public static HtmlLineStyleType Cleared;
}
internal class Syncfusion.DocIO.DLS.HtmlNode : object {
    private HtmlNode _parent;
    private List`1<HtmlNode> _nodes;
    private string _font;
    private int listStart;
    private Dictionary`2<int, object> m_propertiesHash;
    internal static short FontSizeKey;
    internal static short FontFamilyKey;
    internal static short ForegroundKey;
    internal static short UnderLineKey;
    internal static short ColorKey;
    internal static short BackgroundColorKey;
    internal static short BackgroundKey;
    internal static short FontWeightKey;
    internal static short FontStyleKey;
    internal static short FontVariantKey;
    internal static short StrikeThroughKey;
    internal static short BaseLineKey;
    internal static short TextDecorationKey;
    internal static short ImageHeightKey;
    internal static short ImageWidthKey;
    internal static short TextAlignKey;
    internal static short WhiteSpaceKey;
    internal static short LeftIndentKey;
    internal static short RightIndentKey;
    internal static short AfterSpacingKey;
    internal static short BeforeSpacingKey;
    internal static short RowSpanKey;
    internal static short ColumnSpanKey;
    internal static short SpanKey;
    internal static short BorderThicknessKey;
    internal static short ActualBgColorKey;
    internal static short FirstLineIndentKey;
    internal static short LineSpacingKey;
    internal static short ListStartKey;
    internal static short CellMarginKey;
    internal static short PreferredWidthKey;
    internal static short HighlightColorKey;
    internal static short ListLevelKey;
    internal static short RowHeightKey;
    internal static short VerticalAlignmentKey;
    internal static short HeaderRowKey;
    internal static short BordersKey;
    internal static short BordersStyleKey;
    internal static short BordersWidthKey;
    internal static short BordersColorKey;
    internal static short BorderTopKey;
    internal static short BorderTopWidthKey;
    internal static short BorderTopStyleKey;
    internal static short BorderTopColorKey;
    internal static short BorderRightKey;
    internal static short BorderRightWidthKey;
    internal static short BorderRightStyleKey;
    internal static short BorderRightColorKey;
    internal static short BorderBottomKey;
    internal static short BorderBottomWidthKey;
    internal static short BorderBottomStyleKey;
    internal static short BorderBottomColorKey;
    internal static short BorderLeftKey;
    internal static short BorderLeftWidthKey;
    internal static short BorderLeftStyleKey;
    internal static short BorderLeftColorKey;
    internal static short BorderCollapseKey;
    internal static short TableAlignmentKey;
    internal static short CellSpacingKey;
    internal static short PaddingKey;
    internal static short PreferredWidthTypeKey;
    internal static short WidthKey;
    internal static short HeightKey;
    internal static short PageBreakKey;
    internal static short DisplayKey;
    internal static short PreferredImageWidthTypeKey;
    internal static short ListStyleTypeKey;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, PropertyInfo> <NotInheritable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmptyTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDivEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCreatedNode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <List>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, PropertyInfo> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<PropertyInfo> <CssProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<PropertyInfo> <InheritableProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlHyperlink <Hyperlink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private HTMLTagInfo <HTMLTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListPattern>k__BackingField;
    internal static Dictionary`2<string, PropertyInfo> NotInheritable { get; internal set; }
    internal bool IsEmptyTag { get; internal set; }
    internal bool IsDivEnd { get; internal set; }
    internal bool IsCreatedNode { get; internal set; }
    internal string OriginalText { get; internal set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("text-align")]
[CssPropertyInherited]
public string TextAlign { get; public set; }
    [CssPropertiesAttribute("white-space")]
[CssPropertyInherited]
public string WhiteSpace { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("display")]
public HtmlDisplayType Display { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("target")]
public string Target { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("title")]
public string Title { get; public set; }
    internal string Text { get; internal set; }
    internal List`1<HtmlNode> Nodes { get; internal set; }
    internal string List { get; internal set; }
    internal int ListLevel { get; internal set; }
    internal static Dictionary`2<string, PropertyInfo> Properties { get; internal set; }
    internal static List`1<PropertyInfo> CssProperties { get; internal set; }
    internal static List`1<PropertyInfo> InheritableProperties { get; internal set; }
    internal HtmlNode ParentNode { get; internal set; }
    internal HtmlNode PreviousNode { get; }
    internal HtmlNode NextNode { get; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("hyperlink")]
[CssPropertyInherited]
public HtmlHyperlink Hyperlink { get; public set; }
    public Color Foreground { get; public set; }
    [CssPropertiesAttribute("background")]
public string Background { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("left-indent")]
[CssPropertyInherited]
public double LeftIndent { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("right-indent")]
[CssPropertyInherited]
public double RightIndent { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("firstLine-indent")]
[CssPropertyInherited]
public double FirstLineIndent { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("after-spacing")]
[CssPropertyInherited]
public double AfterSpacing { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("before-spacing")]
[CssPropertyInherited]
public double BeforeSpacing { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("line-height")]
[CssPropertyInherited]
public string LineHeight { get; public set; }
    [CssPropertiesAttribute("background-color")]
[CssPropertyInherited]
public string BackgroundColor { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("font")]
[CssPropertyInherited]
public string Font { get; public set; }
    internal Color ActualBackgroundColor { get; internal set; }
    internal HtmlHighlightColor HighlightColor { get; internal set; }
    internal HtmlThickness CellMargin { get; internal set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("padding")]
public string Padding { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("padding-left")]
[CssPropertyInherited]
public string PaddingLeft { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("padding-right")]
[CssPropertyInherited]
public string PaddingRight { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("padding-top")]
[CssPropertyInherited]
public string PaddingTop { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("padding-bottom")]
[CssPropertyInherited]
public string PaddingBottom { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("color")]
[CssPropertyInherited]
public string Color { get; public set; }
    internal string ImageSource { get; internal set; }
    internal HTMLTagInfo HTMLTag { get; internal set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("font-family")]
[CssPropertyInherited]
public string FontFamily { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("font-size")]
[CssPropertyInherited]
public string FontSize { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("text-decoration")]
public string TextDecoration { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("font-style")]
[CssPropertyInherited]
public string FontSyle { get; public set; }
    [CssPropertiesAttribute("font-variant")]
[CssPropertyInherited]
public string FontVariant { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("baseline")]
[CssPropertyInherited]
public HtmlBaselineAlignment BaseLine { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("font-weight")]
[CssPropertyInherited]
public string FontWeight { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("list-style-type")]
[CssPropertyInherited]
public string ListStyleType { get; public set; }
    internal string ListPattern { get; internal set; }
    internal int ListStart { get; internal set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("underline")]
[CssPropertyInherited]
public bool UnderLine { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("strike-through")]
public HtmlStrikeThrough StrikeThrough { get; public set; }
    internal double ImageHeight { get; internal set; }
    internal double ImageWidth { get; internal set; }
    [CssPropertiesAttribute("ColGroupSpan")]
public int ColGroupSpan { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("width")]
public string Width { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("height")]
public string Height { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("preferred-width")]
public double PreferredWidth { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("preferred-width-type")]
public HtmlWidthType PreferredWidthType { get; public set; }
    [HTMLNotInheritable]
[CssPropertiesAttribute("preferred-imagewidth-type")]
public HtmlWidthType PreferredImageWidthType { get; public set; }
    [CssPropertiesAttribute("RowSpan")]
public int RowSpan { get; public set; }
    [CssPropertiesAttribute("ColumnSpan")]
public int ColumnSpan { get; public set; }
    [CssPropertiesAttribute("BorderThickness")]
public double BorderThickness { get; public set; }
    internal double RowHeight { get; internal set; }
    internal string VAlign { get; internal set; }
    [CssPropertiesAttribute("vertical-align")]
public HtmlCellVerticalAlignment VerticalAlignment { get; public set; }
    internal int HeaderRow { get; internal set; }
    [CssPropertiesAttribute("page-break-before")]
public string PageBreak { get; public set; }
    [CssPropertiesAttribute("border-collapse")]
public string BorderCollapse { get; public set; }
    [CssPropertiesAttribute("border")]
public string Borders { get; public set; }
    [CssPropertiesAttribute("border-style")]
public string BordersStyle { get; public set; }
    [CssPropertiesAttribute("border-width")]
public string BordersWidth { get; public set; }
    [CssPropertiesAttribute("border-color")]
public string BordersColor { get; public set; }
    [CssPropertiesAttribute("border-top")]
public string BorderTop { get; public set; }
    [CssPropertiesAttribute("border-top-width")]
public string BorderTopWidth { get; public set; }
    [CssPropertiesAttribute("border-top-style")]
public string BorderTopStyle { get; public set; }
    [CssPropertiesAttribute("border-top-color")]
public string BorderTopColor { get; public set; }
    [CssPropertiesAttribute("border-right")]
public string BorderRight { get; public set; }
    [CssPropertiesAttribute("border-right-width")]
public string BorderRightWidth { get; public set; }
    [CssPropertiesAttribute("border-right-style")]
public string BorderRightStyle { get; public set; }
    [CssPropertiesAttribute("border-right-color")]
public string BorderRightColor { get; public set; }
    [CssPropertiesAttribute("border-bottom")]
public string BorderBottom { get; public set; }
    [CssPropertiesAttribute("border-bottom-width")]
public string BorderBottomWidth { get; public set; }
    [CssPropertiesAttribute("border-bottom-style")]
public string BorderBottomStyle { get; public set; }
    [CssPropertiesAttribute("border-bottom-color")]
public string BorderBottomColor { get; public set; }
    [CssPropertiesAttribute("border-left")]
public string BorderLeft { get; public set; }
    [CssPropertiesAttribute("border-left-width")]
public string BorderLeftWidth { get; public set; }
    [CssPropertiesAttribute("border-left-style")]
public string BorderLeftStyle { get; public set; }
    [CssPropertiesAttribute("border-left-color")]
public string BorderLeftColor { get; public set; }
    internal string TableAlignment { get; internal set; }
    internal double CellSpacing { get; internal set; }
    internal HtmlNode(HtmlNode parent, HTMLTagInfo tagname);
    internal HtmlNode(HtmlNode parentbox);
    internal HtmlNode(HtmlNode parent, HTMLTagInfo tagName, int index);
    private static HtmlNode();
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, PropertyInfo> get_NotInheritable();
    [CompilerGeneratedAttribute]
internal static void set_NotInheritable(Dictionary`2<string, PropertyInfo> value);
    [CompilerGeneratedAttribute]
internal bool get_IsEmptyTag();
    [CompilerGeneratedAttribute]
internal void set_IsEmptyTag(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsDivEnd();
    [CompilerGeneratedAttribute]
internal void set_IsDivEnd(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsCreatedNode();
    [CompilerGeneratedAttribute]
internal void set_IsCreatedNode(bool value);
    [CompilerGeneratedAttribute]
internal string get_OriginalText();
    [CompilerGeneratedAttribute]
internal void set_OriginalText(string value);
    public string get_TextAlign();
    public void set_TextAlign(string value);
    public string get_WhiteSpace();
    public void set_WhiteSpace(string value);
    public HtmlDisplayType get_Display();
    public void set_Display(HtmlDisplayType value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
internal string get_Text();
    [CompilerGeneratedAttribute]
internal void set_Text(string value);
    internal List`1<HtmlNode> get_Nodes();
    internal void set_Nodes(List`1<HtmlNode> value);
    [CompilerGeneratedAttribute]
internal string get_List();
    [CompilerGeneratedAttribute]
internal void set_List(string value);
    internal int get_ListLevel();
    internal void set_ListLevel(int value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<string, PropertyInfo> get_Properties();
    [CompilerGeneratedAttribute]
internal static void set_Properties(Dictionary`2<string, PropertyInfo> value);
    [CompilerGeneratedAttribute]
internal static List`1<PropertyInfo> get_CssProperties();
    [CompilerGeneratedAttribute]
internal static void set_CssProperties(List`1<PropertyInfo> value);
    [CompilerGeneratedAttribute]
internal static List`1<PropertyInfo> get_InheritableProperties();
    [CompilerGeneratedAttribute]
internal static void set_InheritableProperties(List`1<PropertyInfo> value);
    internal HtmlNode get_ParentNode();
    internal void set_ParentNode(HtmlNode value);
    internal HtmlNode get_PreviousNode();
    internal HtmlNode get_NextNode();
    [CompilerGeneratedAttribute]
public HtmlHyperlink get_Hyperlink();
    [CompilerGeneratedAttribute]
public void set_Hyperlink(HtmlHyperlink value);
    public Color get_Foreground();
    public void set_Foreground(Color value);
    public string get_Background();
    public void set_Background(string value);
    public double get_LeftIndent();
    public void set_LeftIndent(double value);
    public double get_RightIndent();
    public void set_RightIndent(double value);
    public double get_FirstLineIndent();
    public void set_FirstLineIndent(double value);
    public double get_AfterSpacing();
    public void set_AfterSpacing(double value);
    public double get_BeforeSpacing();
    public void set_BeforeSpacing(double value);
    public string get_LineHeight();
    public void set_LineHeight(string value);
    public string get_BackgroundColor();
    public void set_BackgroundColor(string value);
    public string get_Font();
    public void set_Font(string value);
    internal Color get_ActualBackgroundColor();
    internal void set_ActualBackgroundColor(Color value);
    internal HtmlHighlightColor get_HighlightColor();
    internal void set_HighlightColor(HtmlHighlightColor value);
    internal HtmlThickness get_CellMargin();
    internal void set_CellMargin(HtmlThickness value);
    public string get_Padding();
    public void set_Padding(string value);
    public string get_PaddingLeft();
    public void set_PaddingLeft(string value);
    public string get_PaddingRight();
    public void set_PaddingRight(string value);
    public string get_PaddingTop();
    public void set_PaddingTop(string value);
    public string get_PaddingBottom();
    public void set_PaddingBottom(string value);
    public string get_Color();
    public void set_Color(string value);
    [CompilerGeneratedAttribute]
internal string get_ImageSource();
    [CompilerGeneratedAttribute]
internal void set_ImageSource(string value);
    [CompilerGeneratedAttribute]
internal HTMLTagInfo get_HTMLTag();
    [CompilerGeneratedAttribute]
internal void set_HTMLTag(HTMLTagInfo value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public string get_FontSize();
    public void set_FontSize(string value);
    public string get_TextDecoration();
    public void set_TextDecoration(string value);
    public string get_FontSyle();
    public void set_FontSyle(string value);
    public string get_FontVariant();
    public void set_FontVariant(string value);
    public HtmlBaselineAlignment get_BaseLine();
    public void set_BaseLine(HtmlBaselineAlignment value);
    public string get_FontWeight();
    public void set_FontWeight(string value);
    public string get_ListStyleType();
    public void set_ListStyleType(string value);
    [CompilerGeneratedAttribute]
internal string get_ListPattern();
    [CompilerGeneratedAttribute]
internal void set_ListPattern(string value);
    internal int get_ListStart();
    internal void set_ListStart(int value);
    public bool get_UnderLine();
    public void set_UnderLine(bool value);
    public HtmlStrikeThrough get_StrikeThrough();
    public void set_StrikeThrough(HtmlStrikeThrough value);
    internal double get_ImageHeight();
    internal void set_ImageHeight(double value);
    internal double get_ImageWidth();
    internal void set_ImageWidth(double value);
    public int get_ColGroupSpan();
    public void set_ColGroupSpan(int value);
    public string get_Width();
    public void set_Width(string value);
    public string get_Height();
    public void set_Height(string value);
    public double get_PreferredWidth();
    public void set_PreferredWidth(double value);
    public HtmlWidthType get_PreferredWidthType();
    public void set_PreferredWidthType(HtmlWidthType value);
    public HtmlWidthType get_PreferredImageWidthType();
    public void set_PreferredImageWidthType(HtmlWidthType value);
    public int get_RowSpan();
    public void set_RowSpan(int value);
    public int get_ColumnSpan();
    public void set_ColumnSpan(int value);
    public double get_BorderThickness();
    public void set_BorderThickness(double value);
    internal double get_RowHeight();
    internal void set_RowHeight(double value);
    internal string get_VAlign();
    internal void set_VAlign(string value);
    public HtmlCellVerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(HtmlCellVerticalAlignment value);
    internal int get_HeaderRow();
    internal void set_HeaderRow(int value);
    public string get_PageBreak();
    public void set_PageBreak(string value);
    public string get_BorderCollapse();
    public void set_BorderCollapse(string value);
    public string get_Borders();
    public void set_Borders(string value);
    public string get_BordersStyle();
    public void set_BordersStyle(string value);
    public string get_BordersWidth();
    public void set_BordersWidth(string value);
    public string get_BordersColor();
    public void set_BordersColor(string value);
    public string get_BorderTop();
    public void set_BorderTop(string value);
    public string get_BorderTopWidth();
    public void set_BorderTopWidth(string value);
    public string get_BorderTopStyle();
    public void set_BorderTopStyle(string value);
    public string get_BorderTopColor();
    public void set_BorderTopColor(string value);
    public string get_BorderRight();
    public void set_BorderRight(string value);
    public string get_BorderRightWidth();
    public void set_BorderRightWidth(string value);
    public string get_BorderRightStyle();
    public void set_BorderRightStyle(string value);
    public string get_BorderRightColor();
    public void set_BorderRightColor(string value);
    public string get_BorderBottom();
    public void set_BorderBottom(string value);
    public string get_BorderBottomWidth();
    public void set_BorderBottomWidth(string value);
    public string get_BorderBottomStyle();
    public void set_BorderBottomStyle(string value);
    public string get_BorderBottomColor();
    public void set_BorderBottomColor(string value);
    public string get_BorderLeft();
    public void set_BorderLeft(string value);
    public string get_BorderLeftWidth();
    public void set_BorderLeftWidth(string value);
    public string get_BorderLeftStyle();
    public void set_BorderLeftStyle(string value);
    public string get_BorderLeftColor();
    public void set_BorderLeftColor(string value);
    internal string get_TableAlignment();
    internal void set_TableAlignment(string value);
    internal double get_CellSpacing();
    internal void set_CellSpacing(double value);
    internal string GetFontFamily(string propValue);
    internal string GetHighlightColor(string highlightColor);
    internal HtmlHighlightColor StringToHighlightColor(string color);
    internal HtmlHighlightColor HexCodeToHighlightColor(string hexCode);
    internal Color StringToColor(string colorValue, bool IsHyperlinkColor, bool IsBackgroundColor);
    public HtmlFontWeight StringToFontWeight(string fontweight);
    internal bool IsDivOrListItem();
    internal bool IsFontWeight(string fontweight);
    internal HtmlTextAlignment StringToAlignment(string textalign);
    private float ParseNumber(string number, float hundredPercent);
    internal void InheritStyle(HtmlNode father, bool everything, List`1<PropertyInfo> NotInherit);
    private bool Text_DecorationToUnderline(string textdecoration);
    private HtmlStrikeThrough Text_DecorationToStrikeThrogh(string textdecoration);
    private HtmlBaselineAlignment VerticalAlignToBaseLine(string verticalalign);
    internal HtmlCellVerticalAlignment StringToVerticalAlignment(string value);
    internal HtmlLineStyleType StringToLineStyle(string value);
    internal double StringToLineWidth(string value);
    internal HTMLTableAlignment StringToTableAlignment(string value);
    internal void UpdateWidthAndType(string value);
    internal void UpdateHeight(string value);
    internal void InheritParentStyle();
    internal void InheritDivStyle(HtmlNode node);
    internal static void GatherPropertiesList();
    internal List`1<PropertyInfo> GetPropertiesforTag(string tagname, bool isDivInherit);
    internal bool AreSpanTags(string name);
    internal bool StringToFontStyle(string fontstyle);
    public virtual string ToString();
    internal HtmlNode RootTableNode();
    internal void CopyAttributes(HtmlNode node);
    internal bool HasKey(int Key);
    internal void SetPropertyValue(int Key, object value);
    internal int GetIndex();
    private void AssignPaddingValues(string values);
    private void AssignBorderValues(string value);
    private bool IsBorderColor(string value);
    private bool IsBorderStyle(string value);
    private void AssignBordersStyle(string values);
    private void AssignBordersWidth(string values);
    private void AssignBordersColor(string values);
    private void AssignBorderTopValues(string value);
    private void AssignBorderRightValues(string value);
    private void AssignBorderBottomValues(string value);
    private void AssignBorderLeftValues(string value);
    internal string GetInnerText();
}
internal class Syncfusion.DocIO.DLS.HTMLNotInheritable : Attribute {
}
internal class Syncfusion.DocIO.DLS.HTMLOperators : object {
    public static string Dot;
    public static string OpenBrace;
    public static string CloseBrace;
    public static string Colon;
    public static string SemiColon;
    public static string Equal;
    public static string Quotes;
    public static string LessthanSymbol;
    public static string GreaterthanSymbol;
    public static string Endslash;
    internal static string Space;
    internal static string UnderScore;
}
internal enum Syncfusion.DocIO.DLS.HtmlStrikeThrough : Enum {
    public int value__;
    public static HtmlStrikeThrough None;
    public static HtmlStrikeThrough SingleStrike;
    public static HtmlStrikeThrough DoubleStrike;
}
internal enum Syncfusion.DocIO.DLS.HTMLTableAlignment : Enum {
    public int value__;
    public static HTMLTableAlignment Left;
    public static HTMLTableAlignment Center;
    public static HTMLTableAlignment Right;
}
internal class Syncfusion.DocIO.DLS.HTMLTagInfo : object {
    private bool _isclosing;
    private Regex m_removeSpaces;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelfClosedTag>k__BackingField;
    internal string TagName { get; internal set; }
    internal Dictionary`2<string, object> Attributes { get; internal set; }
    internal bool IsCloseTag { get; internal set; }
    internal bool IsSelfClosedTag { get; internal set; }
    internal bool IsSingle { get; }
    internal HTMLTagInfo(string _name, Dictionary`2<string, object> attlist);
    internal HTMLTagInfo(string tag);
    [CompilerGeneratedAttribute]
internal string get_TagName();
    [CompilerGeneratedAttribute]
internal void set_TagName(string value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
internal void set_Attributes(Dictionary`2<string, object> value);
    internal bool get_IsCloseTag();
    internal void set_IsCloseTag(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsSelfClosedTag();
    [CompilerGeneratedAttribute]
internal void set_IsSelfClosedTag(bool value);
    internal bool get_IsSingle();
    internal void SetAttributes(HtmlNode node);
    internal double BorderLineWidth(HtmlNode node, string value);
    private void ProcessTagName(string htmltag);
    private void GatherAttributes(string htmltag);
    internal bool HasAttribute(string attrname);
}
internal class Syncfusion.DocIO.DLS.HtmlTagsParser : object {
    internal static string HtmlTag;
    internal static string HmlTagAttributes;
    internal static string WhiteSpaces;
    internal static string CssProperties;
    internal static string LineHeight;
    internal static string CssFont;
    internal static string FontStyle;
    internal static string FontVariant;
    internal static string FontWeight;
    internal static string CssPropertyBox;
    internal static MatchCollection Match(string regex, string source);
    internal static string Search(string regex, string source);
    internal static string Search(string regex, string source, Int32& position);
}
internal enum Syncfusion.DocIO.DLS.HtmlTextAlignment : Enum {
    public int value__;
    public static HtmlTextAlignment Left;
    public static HtmlTextAlignment Right;
    public static HtmlTextAlignment Center;
    public static HtmlTextAlignment Justify;
}
internal class Syncfusion.DocIO.DLS.HtmlTextHelper : object {
    internal static char NoWidthOptionalChar;
}
internal class Syncfusion.DocIO.DLS.HtmlTextNode : HtmlNode {
    internal HtmlTextNode(HtmlNode parent, HTMLTagInfo tagname);
}
internal enum Syncfusion.DocIO.DLS.HtmlWidthType : Enum {
    public int value__;
    public static HtmlWidthType Auto;
    public static HtmlWidthType Percent;
    public static HtmlWidthType Pixel;
}
public class Syncfusion.DocIO.DLS.Hyperlink : object {
    private WField m_hyperlink;
    private HyperlinkType m_type;
    private string m_filePath;
    private string m_uriPath;
    private string m_bookmark;
    private string m_textToDisplay;
    private WPicture m_picToDisplay;
    private string m_localReference;
    public string FilePath { get; public set; }
    public string Uri { get; public set; }
    public string BookmarkName { get; public set; }
    public HyperlinkType Type { get; public set; }
    public string TextToDisplay { get; public set; }
    public WPicture PictureToDisplay { get; public set; }
    internal WField Field { get; }
    public string LocalReference { get; public set; }
    public Hyperlink(WField hyperlink);
    public string get_FilePath();
    public void set_FilePath(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_BookmarkName();
    public void set_BookmarkName(string value);
    public HyperlinkType get_Type();
    public void set_Type(HyperlinkType value);
    public string get_TextToDisplay();
    public void set_TextToDisplay(string value);
    public WPicture get_PictureToDisplay();
    public void set_PictureToDisplay(WPicture value);
    internal WField get_Field();
    public string get_LocalReference();
    public void set_LocalReference(string value);
    private void CheckHyperlink(WField field);
    private void Parse();
    private void UpdateTextToDisplay();
    private void SetImageToDisplay();
    private int FindHyperlinkText(WParagraph& ownerPara);
    private void UpdateType();
    private void SetUriValue(string uri);
    private void SetBookmarkNameValue(string name);
    private void SetLocalReferenceValue(string localReference);
    private void SetFilePathValue(string filePath);
    private string CheckValue(string value);
    private string CheckPath(string path);
    private string CheckUri(string uri);
    internal void SetHyperlinkFieldCode();
    internal bool StartsWithExt(string text, string value);
}
public enum Syncfusion.DocIO.DLS.HyperlinkType : Enum {
    public int value__;
    public static HyperlinkType None;
    public static HyperlinkType FileLink;
    public static HyperlinkType WebLink;
    public static HyperlinkType EMailLink;
    public static HyperlinkType Bookmark;
}
public class Syncfusion.DocIO.DLS.Hyphenation : object {
    private IWordDocument m_document;
    public bool AutoHyphenation { get; public set; }
    public bool HyphenateCaps { get; public set; }
    public float HyphenationZone { get; public set; }
    public int ConsecutiveHyphensLimit { get; public set; }
    internal Hyphenation(IWordDocument document);
    public bool get_AutoHyphenation();
    public void set_AutoHyphenation(bool value);
    public bool get_HyphenateCaps();
    public void set_HyphenateCaps(bool value);
    public float get_HyphenationZone();
    public void set_HyphenationZone(float value);
    public int get_ConsecutiveHyphensLimit();
    public void set_ConsecutiveHyphensLimit(int value);
    internal void Close();
}
public class Syncfusion.DocIO.DLS.Hyphenator : object {
    private Dictionary`2<string, List`1<int>> m_patterns;
    private static Dictionary`2<string, Stream> m_dictionaries;
    private static Dictionary`2<string, Hyphenator> m_loadedHyphenators;
    private static char marker;
    private int leftMin;
    private int rightMin;
    [CompilerGeneratedAttribute]
private AddDictionaryEventHandler AddDictionary;
    internal Dictionary`2<string, List`1<int>> Patterns { get; internal set; }
    public static Dictionary`2<string, Stream> Dictionaries { get; public set; }
    internal static Dictionary`2<string, Hyphenator> LoadedHyphenators { get; internal set; }
    internal Hyphenator(Stream file);
    public static void UnloadDictionaries();
    [CompilerGeneratedAttribute]
public void add_AddDictionary(AddDictionaryEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AddDictionary(AddDictionaryEventHandler value);
    internal Dictionary`2<string, List`1<int>> get_Patterns();
    internal void set_Patterns(Dictionary`2<string, List`1<int>> value);
    public static Dictionary`2<string, Stream> get_Dictionaries();
    public static void set_Dictionaries(Dictionary`2<string, Stream> value);
    internal static Dictionary`2<string, Hyphenator> get_LoadedHyphenators();
    internal static void set_LoadedHyphenators(Dictionary`2<string, Hyphenator> value);
    private void LoadPattern(Stream file);
    private int FindMaxValue(List`1<int> levels);
    internal string HyphenateText(string text);
    private Int32[] GetPositions(string text);
    private static Int32[] CreateHyphenateMaskFromLevels(Int32[] levels);
    private string HyphenateByMask(string originalWord, Int32[] hyphenationMask);
    internal string GetAlternateForMissedLanguageCode(string languageCode);
}
public interface Syncfusion.DocIO.DLS.IBlockContentControl {
    public ContentControlProperties ContentControlProperties { get; }
    public WCharacterFormat BreakCharacterFormat { get; }
    public WTextBody TextBody { get; }
    public abstract virtual ContentControlProperties get_ContentControlProperties();
    public abstract virtual WCharacterFormat get_BreakCharacterFormat();
    public abstract virtual WTextBody get_TextBody();
}
internal interface Syncfusion.DocIO.DLS.ICellContentControl {
    public ContentControlProperties ContentControlProperties { get; }
    public WCharacterFormat BreakCharacterFormat { get; }
    public abstract virtual ContentControlProperties get_ContentControlProperties();
    public abstract virtual WCharacterFormat get_BreakCharacterFormat();
}
public interface Syncfusion.DocIO.DLS.ICollectionBase {
    public int Count { get; }
    public abstract virtual int get_Count();
}
public interface Syncfusion.DocIO.DLS.ICompositeEntity {
    public EntityCollection ChildEntities { get; }
    public abstract virtual EntityCollection get_ChildEntities();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IDocumentCollection {
    public IWordDocument Item { get; }
    public abstract virtual IWordDocument get_Item(int index);
}
public interface Syncfusion.DocIO.DLS.IEntity {
    public WordDocument Document { get; }
    public Entity Owner { get; }
    public EntityType EntityType { get; }
    public IEntity NextSibling { get; }
    public IEntity PreviousSibling { get; }
    public bool IsComposite { get; }
    public abstract virtual WordDocument get_Document();
    public abstract virtual Entity get_Owner();
    public abstract virtual EntityType get_EntityType();
    public abstract virtual IEntity get_NextSibling();
    public abstract virtual IEntity get_PreviousSibling();
    public abstract virtual bool get_IsComposite();
    public abstract virtual Entity Clone();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IEntityCollectionBase {
    public Entity Item { get; }
    public abstract virtual Entity get_Item(int index);
}
public interface Syncfusion.DocIO.DLS.IHtmlConverter {
    public abstract virtual void AppendToTextBody(ITextBody dlsTextBody, string html, int paragraphIndex, int paragraphItemIndex);
    public abstract virtual void AppendToTextBody(ITextBody dlsTextBody, string html, int paragraphIndex, int paragraphItemIndex, IWParagraphStyle style, ListStyle listStyle);
    public abstract virtual bool IsValid(string html, XHTMLValidationType type);
    public abstract virtual bool IsValid(string html, XHTMLValidationType type, String& exceptionMessage);
}
public interface Syncfusion.DocIO.DLS.IInlineContentControl {
    public ContentControlProperties ContentControlProperties { get; }
    public WCharacterFormat BreakCharacterFormat { get; }
    public ParagraphItemCollection ParagraphItems { get; }
    public abstract virtual ContentControlProperties get_ContentControlProperties();
    public abstract virtual WCharacterFormat get_BreakCharacterFormat();
    public abstract virtual ParagraphItemCollection get_ParagraphItems();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.ImageCollection : object {
    internal Dictionary`2<int, ImageRecord> m_collection;
    private List`1<int> m_removedImageIds;
    private int m_maxId;
    private WordDocument m_doc;
    internal ImageRecord Item { get; }
    internal WordDocument Document { get; }
    internal ImageCollection(WordDocument doc);
    internal ImageRecord get_Item(int imageId);
    internal WordDocument get_Document();
    internal void Add(ImageRecord image);
    internal bool Remove(int imageId);
    internal void Clear();
    internal ImageRecord LoadImage(Byte[] imageBytes);
    internal ImageRecord LoadMetaFileImage(Byte[] imageBytes, bool isCompressed);
    internal ImageRecord LoadXmlItemImage(Byte[] imageBytes);
    internal Byte[] CompressImageBytes(Byte[] imageBytes);
    internal Byte[] DecompressImageBytes(Byte[] compressedImage);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.ImageEffect : object {
    private List`1<PointF> m_foregroundVertices;
    private List`1<PointF> m_backgroundVertices;
    private Dictionary`2<int, object> m_propertiesHash;
    private bool m_hasBackgroundRemoval;
    internal static byte SharpenAmountKey;
    internal static byte ColorTempratureKey;
    internal static byte SaturationKey;
    internal static byte BrightnessKey;
    internal static byte ContrastKey;
    internal static byte PencilSizeKey;
    internal static byte TransparencyKey;
    internal static byte BlurRadiusKey;
    internal static byte CementTransparencyKey;
    internal static byte CementCrackingKey;
    internal static byte ChalkSketchTransparencyKey;
    internal static byte ChalkSketchPressureKey;
    internal static byte CrisscrossEtchingTransparencyKey;
    internal static byte CrisscrossEtchingPressureKey;
    internal static byte CutoutTransparencyKey;
    internal static byte CutoutShadesKey;
    internal static byte GrainTransparencyKey;
    internal static byte GrainSizeKey;
    internal static byte GlassTransparencyKey;
    internal static byte GlassScalingKey;
    internal static byte GlowDiffusedTransparencyKey;
    internal static byte GlowDiffusedIntensityKey;
    internal static byte GlowEdgesTransparencyKey;
    internal static byte GlowEdgesSmoothnessKey;
    internal static byte LightScreenTransparencyKey;
    internal static byte LightScreenGridKey;
    internal static byte LineDrawingTransparencyKey;
    internal static byte LineDrawingPensilSizeKey;
    internal static byte MarkerTransparencyKey;
    internal static byte MarkerSizeKey;
    internal static byte MosiaicBubbleTransparencyKey;
    internal static byte MosiaicBubblePressureKey;
    internal static byte StrokeTransparencyKey;
    internal static byte StrokeIntensityKey;
    internal static byte BrushTransparencyKey;
    internal static byte BrushSizeKey;
    internal static byte PastelTransparencyKey;
    internal static byte PastelSizeKey;
    internal static byte PencilGrayScaleTransparencyKey;
    internal static byte PencilGrayScaleSizeKey;
    internal static byte PencilSketchTransparencyKey;
    internal static byte PencilSketchSizeKey;
    internal static byte PhotocopyTransparencyKey;
    internal static byte PhotocopySizeKey;
    internal static byte PlasticWrapTransparencyKey;
    internal static byte PlasticWrapSmoothnessKey;
    internal static byte TexturizerTransparencyKey;
    internal static byte TexturizerSizeKey;
    internal static byte SpongeTransparencyKey;
    internal static byte SpongeBrushSizeKey;
    internal static byte BackgroundRemovalRectangleKey;
    internal float SharpenAmount { get; internal set; }
    internal float ColorTemprature { get; internal set; }
    internal float Saturation { get; internal set; }
    internal float Brightness { get; internal set; }
    internal float Contrast { get; internal set; }
    internal float BlurRadius { get; internal set; }
    internal float CementTransparency { get; internal set; }
    internal float CementCracking { get; internal set; }
    internal float ChalkSketchTransparency { get; internal set; }
    internal float ChalkSketchPressure { get; internal set; }
    internal float CrisscrossEtchingTransparency { get; internal set; }
    internal float CrisscrossEtchingPressure { get; internal set; }
    internal float CutoutTransparency { get; internal set; }
    internal float CutoutShades { get; internal set; }
    internal float GrainTransparency { get; internal set; }
    internal float GrainSize { get; internal set; }
    internal float GlassTransparency { get; internal set; }
    internal float GlassScaling { get; internal set; }
    internal float GlowDiffusedTransparency { get; internal set; }
    internal float GlowDiffusedIntensity { get; internal set; }
    internal float GlowEdgesTransparency { get; internal set; }
    internal float GlowEdgesSmoothness { get; internal set; }
    internal float LightScreenTransparency { get; internal set; }
    internal float LightScreenGrid { get; internal set; }
    internal float LineDrawingTransparency { get; internal set; }
    internal float LineDrawingPensilSize { get; internal set; }
    internal float MarkerTransparency { get; internal set; }
    internal float MarkerSize { get; internal set; }
    internal float MosiaicBubbleTransparency { get; internal set; }
    internal float MosiaicBubblePressure { get; internal set; }
    internal float StrokeTransparency { get; internal set; }
    internal float StrokeIntensity { get; internal set; }
    internal float BrushTransparency { get; internal set; }
    internal float BrushSize { get; internal set; }
    internal float PastelTransparency { get; internal set; }
    internal float PastelSize { get; internal set; }
    internal float PencilGrayScaleTransparency { get; internal set; }
    internal float PencilGraySize { get; internal set; }
    internal float PencilSketchTransparency { get; internal set; }
    internal float PencilSketchSize { get; internal set; }
    internal float PhotocopyTransparency { get; internal set; }
    internal float PhotocopySize { get; internal set; }
    internal float PlasticWrapTransparency { get; internal set; }
    internal float PlasticWrapSmoothness { get; internal set; }
    internal float TexturizerTransparency { get; internal set; }
    internal float TexturizerSize { get; internal set; }
    internal float SpongeTransparency { get; internal set; }
    internal float SpongeBrushSize { get; internal set; }
    internal List`1<PointF> ForegroundVertices { get; internal set; }
    internal List`1<PointF> BackgroundVertices { get; internal set; }
    internal TileRectangle BackgroundRemovalRectangle { get; internal set; }
    internal bool HasBackgroundRemovalEffect { get; internal set; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    protected object Item { get; protected set; }
    internal float get_SharpenAmount();
    internal void set_SharpenAmount(float value);
    internal float get_ColorTemprature();
    internal void set_ColorTemprature(float value);
    internal float get_Saturation();
    internal void set_Saturation(float value);
    internal float get_Brightness();
    internal void set_Brightness(float value);
    internal float get_Contrast();
    internal void set_Contrast(float value);
    internal float get_BlurRadius();
    internal void set_BlurRadius(float value);
    internal float get_CementTransparency();
    internal void set_CementTransparency(float value);
    internal float get_CementCracking();
    internal void set_CementCracking(float value);
    internal float get_ChalkSketchTransparency();
    internal void set_ChalkSketchTransparency(float value);
    internal float get_ChalkSketchPressure();
    internal void set_ChalkSketchPressure(float value);
    internal float get_CrisscrossEtchingTransparency();
    internal void set_CrisscrossEtchingTransparency(float value);
    internal float get_CrisscrossEtchingPressure();
    internal void set_CrisscrossEtchingPressure(float value);
    internal float get_CutoutTransparency();
    internal void set_CutoutTransparency(float value);
    internal float get_CutoutShades();
    internal void set_CutoutShades(float value);
    internal float get_GrainTransparency();
    internal void set_GrainTransparency(float value);
    internal float get_GrainSize();
    internal void set_GrainSize(float value);
    internal float get_GlassTransparency();
    internal void set_GlassTransparency(float value);
    internal float get_GlassScaling();
    internal void set_GlassScaling(float value);
    internal float get_GlowDiffusedTransparency();
    internal void set_GlowDiffusedTransparency(float value);
    internal float get_GlowDiffusedIntensity();
    internal void set_GlowDiffusedIntensity(float value);
    internal float get_GlowEdgesTransparency();
    internal void set_GlowEdgesTransparency(float value);
    internal float get_GlowEdgesSmoothness();
    internal void set_GlowEdgesSmoothness(float value);
    internal float get_LightScreenTransparency();
    internal void set_LightScreenTransparency(float value);
    internal float get_LightScreenGrid();
    internal void set_LightScreenGrid(float value);
    internal float get_LineDrawingTransparency();
    internal void set_LineDrawingTransparency(float value);
    internal float get_LineDrawingPensilSize();
    internal void set_LineDrawingPensilSize(float value);
    internal float get_MarkerTransparency();
    internal void set_MarkerTransparency(float value);
    internal float get_MarkerSize();
    internal void set_MarkerSize(float value);
    internal float get_MosiaicBubbleTransparency();
    internal void set_MosiaicBubbleTransparency(float value);
    internal float get_MosiaicBubblePressure();
    internal void set_MosiaicBubblePressure(float value);
    internal float get_StrokeTransparency();
    internal void set_StrokeTransparency(float value);
    internal float get_StrokeIntensity();
    internal void set_StrokeIntensity(float value);
    internal float get_BrushTransparency();
    internal void set_BrushTransparency(float value);
    internal float get_BrushSize();
    internal void set_BrushSize(float value);
    internal float get_PastelTransparency();
    internal void set_PastelTransparency(float value);
    internal float get_PastelSize();
    internal void set_PastelSize(float value);
    internal float get_PencilGrayScaleTransparency();
    internal void set_PencilGrayScaleTransparency(float value);
    internal float get_PencilGraySize();
    internal void set_PencilGraySize(float value);
    internal float get_PencilSketchTransparency();
    internal void set_PencilSketchTransparency(float value);
    internal float get_PencilSketchSize();
    internal void set_PencilSketchSize(float value);
    internal float get_PhotocopyTransparency();
    internal void set_PhotocopyTransparency(float value);
    internal float get_PhotocopySize();
    internal void set_PhotocopySize(float value);
    internal float get_PlasticWrapTransparency();
    internal void set_PlasticWrapTransparency(float value);
    internal float get_PlasticWrapSmoothness();
    internal void set_PlasticWrapSmoothness(float value);
    internal float get_TexturizerTransparency();
    internal void set_TexturizerTransparency(float value);
    internal float get_TexturizerSize();
    internal void set_TexturizerSize(float value);
    internal float get_SpongeTransparency();
    internal void set_SpongeTransparency(float value);
    internal float get_SpongeBrushSize();
    internal void set_SpongeBrushSize(float value);
    internal List`1<PointF> get_ForegroundVertices();
    internal void set_ForegroundVertices(List`1<PointF> value);
    internal List`1<PointF> get_BackgroundVertices();
    internal void set_BackgroundVertices(List`1<PointF> value);
    internal TileRectangle get_BackgroundRemovalRectangle();
    internal void set_BackgroundRemovalRectangle(TileRectangle value);
    internal bool get_HasBackgroundRemovalEffect();
    internal void set_HasBackgroundRemovalEffect(bool value);
    internal Dictionary`2<int, object> get_PropertiesHash();
    private void SetKeyValue(int propKey, object value);
    private float GetValue(int key);
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    internal void Close();
    internal ImageEffect Clone();
    internal bool Compare(ImageEffect imageEffect);
    internal StringBuilder GetAsString();
}
public class Syncfusion.DocIO.DLS.ImageNodeVisitedEventArgs : EventArgs {
    private Stream m_imageStream;
    private string m_uri;
    public Stream ImageStream { get; public set; }
    public string Uri { get; public set; }
    internal ImageNodeVisitedEventArgs(Stream imageStream, string uri);
    public Stream get_ImageStream();
    public void set_ImageStream(Stream value);
    public string get_Uri();
    public void set_Uri(string value);
}
public class Syncfusion.DocIO.DLS.ImageNodeVisitedEventHandler : MulticastDelegate {
    public ImageNodeVisitedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ImageNodeVisitedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ImageNodeVisitedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.DocIO.DLS.ImageRecord : object {
    private int m_imageId;
    internal Byte[] m_imageBytes;
    private int m_occurenceCount;
    private byte m_bFlags;
    private WordDocument m_doc;
    private Size m_size;
    private ImageFormat m_imageFormat;
    private ImageFormat m_imageFormatForPartialTrustMode;
    private int m_length;
    internal string comparedImageName;
    internal int ImageId { get; internal set; }
    internal Byte[] ImageBytes { get; internal set; }
    internal int OccurenceCount { get; internal set; }
    internal bool IsMetafile { get; internal set; }
    internal bool IsAdded { get; internal set; }
    internal Size Size { get; internal set; }
    internal ImageFormat ImageFormatForPartialTrustMode { get; internal set; }
    internal ImageFormat ImageFormat { get; internal set; }
    internal int Length { get; internal set; }
    internal ImageRecord(WordDocument doc, Byte[] imageBytes);
    internal ImageRecord(WordDocument doc, ImageRecord imageRecord);
    internal int get_ImageId();
    internal void set_ImageId(int value);
    internal Byte[] get_ImageBytes();
    internal void set_ImageBytes(Byte[] value);
    internal int get_OccurenceCount();
    internal void set_OccurenceCount(int value);
    internal bool get_IsMetafile();
    internal void set_IsMetafile(bool value);
    internal bool get_IsAdded();
    internal void set_IsAdded(bool value);
    internal Size get_Size();
    internal void set_Size(Size value);
    internal ImageFormat get_ImageFormatForPartialTrustMode();
    internal void set_ImageFormatForPartialTrustMode(ImageFormat value);
    internal ImageFormat get_ImageFormat();
    internal void set_ImageFormat(ImageFormat value);
    internal int get_Length();
    internal void set_Length(int value);
    internal void Detach();
    internal bool IsMetafileHeaderPresent(Byte[] imagebytes);
    internal void Attach();
    internal void Close();
    internal void UpdateImageSizeForPartialTrustMode(Image image);
    internal void UpdateImageSize(Image image);
    private Image GetImageInternalForPartialTrustMode(Byte[] imageBytes);
    private Image GetImageInternal(Byte[] imageBytes);
    internal static Image GetImage(Byte[] imageBytes);
}
public enum Syncfusion.DocIO.DLS.ImageType : Enum {
    public int value__;
    public static ImageType Metafile;
    public static ImageType Bitmap;
}
[FlagsAttribute]
public enum Syncfusion.DocIO.DLS.ImportOptions : Enum {
    public int value__;
    public static ImportOptions KeepSourceFormatting;
    public static ImportOptions MergeFormatting;
    public static ImportOptions KeepTextOnly;
    public static ImportOptions UseDestinationStyles;
    public static ImportOptions ListContinueNumbering;
    public static ImportOptions ListRestartNumbering;
}
public class Syncfusion.DocIO.DLS.InlineContentControl : ParagraphItem {
    private ContentControlProperties m_controlProperties;
    private ParagraphItemCollection m_paragraphItemCollection;
    private ParagraphItem m_mappedItem;
    internal bool IsMappedItem;
    private byte m_bFlags;
    private string m_comparisonText;
    internal ParagraphItem MappedItem { get; internal set; }
    public ParagraphItemCollection ParagraphItems { get; }
    public ContentControlProperties ContentControlProperties { get; }
    public WCharacterFormat BreakCharacterFormat { get; }
    public EntityType EntityType { get; }
    internal int EndPos { get; }
    internal bool IsFirstNestedParaParsed { get; internal set; }
    internal string ComparisonText { get; }
    internal InlineContentControl(WordDocument doc);
    public InlineContentControl(WordDocument doc, ContentControlType controlType);
    internal ParagraphItem get_MappedItem();
    internal void set_MappedItem(ParagraphItem value);
    public sealed virtual ParagraphItemCollection get_ParagraphItems();
    public sealed virtual ContentControlProperties get_ContentControlProperties();
    public sealed virtual WCharacterFormat get_BreakCharacterFormat();
    public virtual EntityType get_EntityType();
    internal virtual int get_EndPos();
    internal bool get_IsFirstNestedParaParsed();
    internal void set_IsFirstNestedParaParsed(bool value);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal bool IsHidden();
    internal bool IsDeletion();
    internal bool IsAllItemSameRevision();
    internal InlineContentControl Clone();
    internal virtual void AddSelf();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal void ApplyBaseFormat();
    internal void ApplyBaseFormatForCharacterStyle(IWCharacterStyle style);
    internal virtual void Close();
    internal string get_ComparisonText();
    internal StringBuilder GetAsString();
    internal void CopyItemsTo(ParagraphItemCollection paraItems);
}
internal class Syncfusion.DocIO.DLS.InlineProperties : object {
    public static string UnderLine;
    public static string FontFamily;
    public static string FontSize;
    public static string FontStyle;
    public static string FontWeight;
    public static string HighlightColor;
    public static string BaseLine;
    public static string StrikeThrough;
    public static string Foreground;
    public static string Text;
    public static string NavigationUrl;
    public static string NavigationText;
    public static string TargetType;
    public static string ImageString;
    public static string ImageSource;
    public static string Width;
    public static string Height;
    public static string UiElement;
}
public class Syncfusion.DocIO.DLS.InlineShapeObject : ShapeObject {
    private PICF m_inlinePictDesc;
    private MsofbtBSE m_curBSE;
    private MsofbtSpContainer m_shapeContainer;
    private int m_oleContainerId;
    private Byte[] m_unparsedData;
    private GradientFill m_lineGradient;
    private byte m_bFlags;
    private FillFormat m_FillFormat;
    internal bool IsHorizontalRule { get; internal set; }
    internal GradientFill LineGradient { get; }
    internal PICF PictureDescriptor { get; internal set; }
    internal MsofbtSpContainer ShapeContainer { get; internal set; }
    internal bool IsOLE { get; internal set; }
    internal int OLEContainerId { get; internal set; }
    internal Byte[] UnparsedData { get; internal set; }
    internal FillFormat FillFormat { get; internal set; }
    internal InlineShapeObject(IWordDocument doc);
    internal bool get_IsHorizontalRule();
    internal void set_IsHorizontalRule(bool value);
    internal GradientFill get_LineGradient();
    internal PICF get_PictureDescriptor();
    internal void set_PictureDescriptor(PICF value);
    internal MsofbtSpContainer get_ShapeContainer();
    internal void set_ShapeContainer(MsofbtSpContainer value);
    internal bool get_IsOLE();
    internal void set_IsOLE(bool value);
    internal int get_OLEContainerId();
    internal void set_OLEContainerId(int value);
    internal Byte[] get_UnparsedData();
    internal void set_UnparsedData(Byte[] value);
    internal FillFormat get_FillFormat();
    internal void set_FillFormat(FillFormat value);
    protected virtual object CloneImpl();
    internal LineDashing GetDashStyle(BorderStyle borderStyle, TextBoxLineStyle& lineStyle);
    internal BorderStyle GetBorderStyle(LineDashing dashStyle, TextBoxLineStyle lineStyle);
    internal void ConvertToInlineShape();
    internal void ConvertToShape();
    internal void GetEffectExtent(double borderWidth, Int64& leftTop, Int64& rightBottom);
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual void Close();
    internal bool Compare(InlineShapeObject pictureShape);
    internal StringBuilder GetAsString();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.InternalMargin : OwnerHolder {
    internal static float DEF_HORIZMARGIN;
    internal static float DEF_VERTMARGIN;
    internal static byte LeftKey;
    internal static byte RightKey;
    internal static byte TopKey;
    internal static byte BottomKey;
    internal float m_intLeftMarg;
    internal float m_intRightMarg;
    internal float m_intTopMarg;
    internal float m_intBottomMarg;
    protected Dictionary`2<int, object> m_propertiesHash;
    public float Left { get; public set; }
    public float Right { get; public set; }
    public float Top { get; public set; }
    public float Bottom { get; public set; }
    protected object Item { get; protected set; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    public float get_Left();
    public void set_Left(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Top();
    public void set_Top(float value);
    public float get_Bottom();
    public void set_Bottom(float value);
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    private void IsShapeSupportInternalMargin();
    internal Dictionary`2<int, object> get_PropertiesHash();
    internal bool HasKey(int Key);
    internal void SetKeyValue(int propKey, object value);
    internal void SetDefaultMargins();
    internal InternalMargin Clone();
    internal bool Compare(InternalMargin internalMargin);
    internal StringBuilder GetAsString();
}
public interface Syncfusion.DocIO.DLS.IParagraphItem {
    public WParagraph OwnerParagraph { get; }
    public bool IsInsertRevision { get; }
    public bool IsDeleteRevision { get; }
    public abstract virtual WParagraph get_OwnerParagraph();
    public abstract virtual bool get_IsInsertRevision();
    public abstract virtual bool get_IsDeleteRevision();
}
internal interface Syncfusion.DocIO.DLS.IRowContentControl {
    public ContentControlProperties ContentControlProperties { get; }
    public WCharacterFormat BreakCharacterFormat { get; }
    public abstract virtual ContentControlProperties get_ContentControlProperties();
    public abstract virtual WCharacterFormat get_BreakCharacterFormat();
}
public interface Syncfusion.DocIO.DLS.IRowsEnumerator {
    public String[] ColumnNames { get; }
    public int RowsCount { get; }
    public int CurrentRowIndex { get; }
    public string TableName { get; }
    public bool IsEnd { get; }
    public bool IsLast { get; }
    public abstract virtual void Reset();
    public abstract virtual bool NextRow();
    public abstract virtual object GetCellValue(string columnName);
    public abstract virtual String[] get_ColumnNames();
    public abstract virtual int get_RowsCount();
    public abstract virtual int get_CurrentRowIndex();
    public abstract virtual string get_TableName();
    public abstract virtual bool get_IsEnd();
    public abstract virtual bool get_IsLast();
}
public interface Syncfusion.DocIO.DLS.IStyle {
    public string Name { get; public set; }
    public StyleType StyleType { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual StyleType get_StyleType();
    public abstract virtual void Remove();
    public abstract virtual IStyle Clone();
    public abstract virtual void Close();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IStyleCollection {
    public IStyle Item { get; }
    public bool FixedIndex13HasStyle { get; public set; }
    public bool FixedIndex14HasStyle { get; public set; }
    public string FixedIndex13StyleName { get; public set; }
    public string FixedIndex14StyleName { get; public set; }
    public abstract virtual IStyle get_Item(int index);
    public abstract virtual bool get_FixedIndex13HasStyle();
    public abstract virtual void set_FixedIndex13HasStyle(bool value);
    public abstract virtual bool get_FixedIndex14HasStyle();
    public abstract virtual void set_FixedIndex14HasStyle(bool value);
    public abstract virtual string get_FixedIndex13StyleName();
    public abstract virtual void set_FixedIndex13StyleName(string value);
    public abstract virtual string get_FixedIndex14StyleName();
    public abstract virtual void set_FixedIndex14StyleName(string value);
    public abstract virtual int Add(IStyle style);
    public abstract virtual IStyle FindByName(string name);
    public abstract virtual IStyle FindByName(string name, StyleType styleType);
    public abstract virtual IStyle FindById(int styleId);
}
public interface Syncfusion.DocIO.DLS.IStyleHolder {
    public string StyleName { get; }
    public abstract virtual string get_StyleName();
    public abstract virtual void ApplyStyle(string styleName);
    public abstract virtual void ApplyStyle(BuiltinStyle builtinStyle);
}
public interface Syncfusion.DocIO.DLS.ITextBody {
    public IWTableCollection Tables { get; }
    public IWParagraphCollection Paragraphs { get; }
    public FormFieldCollection FormFields { get; }
    public IWParagraph LastParagraph { get; }
    public EntityCollection ChildEntities { get; }
    public abstract virtual IWTableCollection get_Tables();
    public abstract virtual IWParagraphCollection get_Paragraphs();
    public abstract virtual FormFieldCollection get_FormFields();
    public abstract virtual IWParagraph get_LastParagraph();
    public abstract virtual EntityCollection get_ChildEntities();
    public abstract virtual IWParagraph AddParagraph();
    public abstract virtual IWTable AddTable();
    public abstract virtual IBlockContentControl AddBlockContentControl(ContentControlType controlType);
    public abstract virtual void InsertXHTML(string html);
    public abstract virtual void InsertXHTML(string html, int paragraphIndex);
    public abstract virtual void InsertXHTML(string html, int paragraphIndex, int paragraphItemIndex);
    public abstract virtual bool IsValidXHTML(string html, XHTMLValidationType type);
    public abstract virtual bool IsValidXHTML(string html, XHTMLValidationType type, String& exceptionMessage);
    public abstract virtual void EnsureMinimum();
}
public interface Syncfusion.DocIO.DLS.ITextBodyItem {
    public abstract virtual int Replace(Regex pattern, string replace);
    public abstract virtual int Replace(string given, string replace, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(Regex pattern, TextSelection textSelection);
}
public interface Syncfusion.DocIO.DLS.IWarning {
    public abstract virtual bool ShowWarnings(List`1<WarningInfo> warnings);
}
public interface Syncfusion.DocIO.DLS.IWCharacterStyle {
    public bool IsPrimaryStyle { get; public set; }
    public WCharacterFormat CharacterFormat { get; }
    public abstract virtual bool get_IsPrimaryStyle();
    public abstract virtual void set_IsPrimaryStyle(bool value);
    public abstract virtual WCharacterFormat get_CharacterFormat();
}
public interface Syncfusion.DocIO.DLS.IWField {
    public TextFormat TextFormat { get; public set; }
    public FieldType FieldType { get; public set; }
    public string FieldCode { get; public set; }
    public abstract virtual TextFormat get_TextFormat();
    public abstract virtual void set_TextFormat(TextFormat value);
    public abstract virtual FieldType get_FieldType();
    public abstract virtual void set_FieldType(FieldType value);
    public abstract virtual string get_FieldCode();
    public abstract virtual void set_FieldCode(string value);
    public abstract virtual void Update();
    public abstract virtual void Unlink();
}
public interface Syncfusion.DocIO.DLS.IWMergeField {
    public string FieldName { get; public set; }
    public string TextBefore { get; public set; }
    public string TextAfter { get; public set; }
    public string Prefix { get; }
    public string NumberFormat { get; }
    public string DateFormat { get; }
    public abstract virtual string get_FieldName();
    public abstract virtual void set_FieldName(string value);
    public abstract virtual string get_TextBefore();
    public abstract virtual void set_TextBefore(string value);
    public abstract virtual string get_TextAfter();
    public abstract virtual void set_TextAfter(string value);
    public abstract virtual string get_Prefix();
    public abstract virtual string get_NumberFormat();
    public abstract virtual string get_DateFormat();
}
public interface Syncfusion.DocIO.DLS.IWordDocument {
    public FontSettings FontSettings { get; }
    public Footnote Footnotes { get; public set; }
    public Endnote Endnotes { get; public set; }
    public float DefaultTabWidth { get; public set; }
    public BuiltinDocumentProperties BuiltinDocumentProperties { get; }
    public Template AttachedTemplate { get; }
    public bool UpdateStylesOnOpen { get; public set; }
    public CustomDocumentProperties CustomDocumentProperties { get; }
    public WSectionCollection Sections { get; }
    public IStyleCollection Styles { get; }
    public ListStyleCollection ListStyles { get; }
    public BookmarkCollection Bookmarks { get; }
    public TextBoxCollection TextBoxes { get; }
    public CommentsCollection Comments { get; }
    public WSection LastSection { get; }
    public WParagraph LastParagraph { get; }
    public FootEndNoteNumberFormat EndnoteNumberFormat { get; public set; }
    public FootEndNoteNumberFormat FootnoteNumberFormat { get; public set; }
    public EndnoteRestartIndex RestartIndexForEndnote { get; public set; }
    public EndnotePosition EndnotePosition { get; public set; }
    public FootnoteRestartIndex RestartIndexForFootnotes { get; public set; }
    public FootnotePosition FootnotePosition { get; public set; }
    public Watermark Watermark { get; public set; }
    public Background Background { get; }
    public MailMerge MailMerge { get; }
    public ProtectionType ProtectionType { get; public set; }
    public ViewSetup ViewSetup { get; }
    public bool ThrowExceptionsForUnsupportedElements { get; public set; }
    public int InitialFootnoteNumber { get; public set; }
    public int InitialEndnoteNumber { get; public set; }
    public EntityCollection ChildEntities { get; }
    public XHTMLValidationType XHTMLValidateOption { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Use the Picture property of Background class to set the background image of the document")]
public Byte[] BackgroundImage { get; public set; }
    public DocVariables Variables { get; }
    public DocProperties Properties { get; }
    public bool HasChanges { get; }
    public bool TrackChanges { get; public set; }
    public bool ReplaceFirst { get; public set; }
    public HTMLImportSettings HTMLImportSettings { get; public set; }
    public MdImportSettings MdImportSettings { get; }
    public SaveOptions SaveOptions { get; }
    public ImportOptions ImportOptions { get; public set; }
    public bool ImportStyles { get; public set; }
    public bool ImportStylesOnTypeMismatch { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Use the UpdateDocumentFields method of WordDocument class to update the fields in the document.")]
public bool UpdateFields { get; public set; }
    public FormatType ActualFormatType { get; }
    public Dictionary`2<string, string> FontSubstitutionTable { get; public set; }
    public bool HasMacros { get; }
    public Hyphenator Hyphenator { get; }
    public RevisionOptions RevisionOptions { get; }
    public abstract virtual FontSettings get_FontSettings();
    public abstract virtual Footnote get_Footnotes();
    public abstract virtual void set_Footnotes(Footnote value);
    public abstract virtual Endnote get_Endnotes();
    public abstract virtual void set_Endnotes(Endnote value);
    public abstract virtual float get_DefaultTabWidth();
    public abstract virtual void set_DefaultTabWidth(float value);
    public abstract virtual BuiltinDocumentProperties get_BuiltinDocumentProperties();
    public abstract virtual Template get_AttachedTemplate();
    public abstract virtual bool get_UpdateStylesOnOpen();
    public abstract virtual void set_UpdateStylesOnOpen(bool value);
    public abstract virtual CustomDocumentProperties get_CustomDocumentProperties();
    public abstract virtual WSectionCollection get_Sections();
    public abstract virtual IStyleCollection get_Styles();
    public abstract virtual ListStyleCollection get_ListStyles();
    public abstract virtual BookmarkCollection get_Bookmarks();
    public abstract virtual TextBoxCollection get_TextBoxes();
    public abstract virtual CommentsCollection get_Comments();
    public abstract virtual WSection get_LastSection();
    public abstract virtual WParagraph get_LastParagraph();
    public abstract virtual FootEndNoteNumberFormat get_EndnoteNumberFormat();
    public abstract virtual void set_EndnoteNumberFormat(FootEndNoteNumberFormat value);
    public abstract virtual FootEndNoteNumberFormat get_FootnoteNumberFormat();
    public abstract virtual void set_FootnoteNumberFormat(FootEndNoteNumberFormat value);
    public abstract virtual EndnoteRestartIndex get_RestartIndexForEndnote();
    public abstract virtual void set_RestartIndexForEndnote(EndnoteRestartIndex value);
    public abstract virtual EndnotePosition get_EndnotePosition();
    public abstract virtual void set_EndnotePosition(EndnotePosition value);
    public abstract virtual FootnoteRestartIndex get_RestartIndexForFootnotes();
    public abstract virtual void set_RestartIndexForFootnotes(FootnoteRestartIndex value);
    public abstract virtual FootnotePosition get_FootnotePosition();
    public abstract virtual void set_FootnotePosition(FootnotePosition value);
    public abstract virtual Watermark get_Watermark();
    public abstract virtual void set_Watermark(Watermark value);
    public abstract virtual Background get_Background();
    public abstract virtual MailMerge get_MailMerge();
    public abstract virtual ProtectionType get_ProtectionType();
    public abstract virtual void set_ProtectionType(ProtectionType value);
    public abstract virtual ViewSetup get_ViewSetup();
    public abstract virtual bool get_ThrowExceptionsForUnsupportedElements();
    public abstract virtual void set_ThrowExceptionsForUnsupportedElements(bool value);
    public abstract virtual int get_InitialFootnoteNumber();
    public abstract virtual void set_InitialFootnoteNumber(int value);
    public abstract virtual int get_InitialEndnoteNumber();
    public abstract virtual void set_InitialEndnoteNumber(int value);
    public abstract virtual EntityCollection get_ChildEntities();
    public abstract virtual XHTMLValidationType get_XHTMLValidateOption();
    public abstract virtual void set_XHTMLValidateOption(XHTMLValidationType value);
    public abstract virtual Byte[] get_BackgroundImage();
    public abstract virtual void set_BackgroundImage(Byte[] value);
    public abstract virtual DocVariables get_Variables();
    public abstract virtual DocProperties get_Properties();
    public abstract virtual bool get_HasChanges();
    public abstract virtual bool get_TrackChanges();
    public abstract virtual void set_TrackChanges(bool value);
    public abstract virtual bool get_ReplaceFirst();
    public abstract virtual void set_ReplaceFirst(bool value);
    public abstract virtual HTMLImportSettings get_HTMLImportSettings();
    public abstract virtual void set_HTMLImportSettings(HTMLImportSettings value);
    public abstract virtual MdImportSettings get_MdImportSettings();
    public abstract virtual SaveOptions get_SaveOptions();
    public abstract virtual ImportOptions get_ImportOptions();
    public abstract virtual void set_ImportOptions(ImportOptions value);
    public abstract virtual bool get_ImportStyles();
    public abstract virtual void set_ImportStyles(bool value);
    public abstract virtual bool get_ImportStylesOnTypeMismatch();
    public abstract virtual void set_ImportStylesOnTypeMismatch(bool value);
    public abstract virtual bool get_UpdateFields();
    public abstract virtual void set_UpdateFields(bool value);
    public abstract virtual FormatType get_ActualFormatType();
    public abstract virtual Dictionary`2<string, string> get_FontSubstitutionTable();
    public abstract virtual void set_FontSubstitutionTable(Dictionary`2<string, string> value);
    public abstract virtual bool get_HasMacros();
    public abstract virtual Hyphenator get_Hyphenator();
    public abstract virtual RevisionOptions get_RevisionOptions();
    public abstract virtual IWParagraph CreateParagraph();
    public abstract virtual void EnsureMinimal();
    public abstract virtual IWSection AddSection();
    public abstract virtual IWParagraphStyle AddParagraphStyle(string styleName);
    public abstract virtual ListStyle AddListStyle(ListType listType, string styleName);
    public abstract virtual string GetText();
    public abstract virtual WordDocument Clone();
    public abstract virtual void ImportSection(IWSection section);
    public abstract virtual void ImportContent(IWordDocument doc);
    public abstract virtual void ImportContent(IWordDocument doc, ImportOptions importOptions);
    public abstract virtual void ImportContent(IWordDocument doc, bool importStyles);
    public abstract virtual IStyle AddStyle(BuiltinStyle builtinStyle);
    public abstract virtual void AcceptChanges();
    public abstract virtual void RejectChanges();
    public abstract virtual void Protect(ProtectionType type);
    public abstract virtual void Protect(ProtectionType type, string password);
    public abstract virtual void EncryptDocument(string password);
    public abstract virtual void RemoveEncryption();
    public abstract virtual List`1<Entity> GetCrossReferenceItems(ReferenceType refernceType);
    public abstract virtual void Open(Stream stream, FormatType formatType, XHTMLValidationType validationType, string baseUrl);
    public abstract virtual void Open(Stream stream, FormatType formatType, XHTMLValidationType validationType);
    public abstract virtual void Open(Stream stream, FormatType formatType);
    public abstract virtual void Open(Stream stream, FormatType formatType, string password);
    public abstract virtual void Save(Stream stream, FormatType formatType);
    public abstract virtual void Close();
    public abstract virtual TextSelection Find(Regex pattern);
    public abstract virtual TextSelection[] FindSingleLine(Regex pattern);
    public abstract virtual TextSelection Find(string given, bool caseSensitive, bool wholeWord);
    public abstract virtual TextSelection[] FindSingleLine(string given, bool caseSensitive, bool wholeWord);
    public abstract virtual TextSelection[] FindAll(Regex pattern);
    public abstract virtual TextSelection[] FindAll(string given, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(Regex pattern, string replace);
    public abstract virtual int Replace(string given, string replace, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord, bool saveFormatting);
    public abstract virtual int Replace(Regex pattern, TextSelection textSelection);
    public abstract virtual int Replace(Regex pattern, TextSelection textSelection, bool saveFormatting);
    public abstract virtual int Replace(string given, TextBodyPart bodyPart, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(string given, TextBodyPart bodyPart, bool caseSensitive, bool wholeWord, bool saveFormatting);
    public abstract virtual int Replace(Regex pattern, TextBodyPart bodyPart);
    public abstract virtual int Replace(Regex pattern, TextBodyPart bodyPart, bool saveFormatting);
    public abstract virtual int Replace(string given, IWordDocument replaceDoc, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(string given, IWordDocument replaceDoc, bool caseSensitive, bool wholeWord, bool saveFormatting);
    public abstract virtual int Replace(Regex pattern, IWordDocument replaceDoc, bool saveFormatting);
    public abstract virtual void UpdateWordCount();
    public abstract virtual void UpdateDocumentFields();
    public abstract virtual void UpdateAlternateChunks();
    public abstract virtual int ReplaceSingleLine(string given, string replace, bool caseSensitive, bool wholeWord);
    public abstract virtual int ReplaceSingleLine(Regex pattern, string replace);
    public abstract virtual int ReplaceSingleLine(string given, TextSelection replacement, bool caseSensitive, bool wholeWord);
    public abstract virtual int ReplaceSingleLine(Regex pattern, TextSelection replacement);
    public abstract virtual int ReplaceSingleLine(string given, TextBodyPart replacement, bool caseSensitive, bool wholeWord);
    public abstract virtual int ReplaceSingleLine(Regex pattern, TextBodyPart replacement);
    public abstract virtual TextSelection FindNext(TextBodyItem startTextBodyItem, string given, bool caseSensitive, bool wholeWord);
    public abstract virtual TextSelection FindNext(TextBodyItem startBodyItem, Regex pattern);
    public abstract virtual TextSelection[] FindNextSingleLine(TextBodyItem startTextBodyItem, string given, bool caseSensitive, bool wholeWord);
    public abstract virtual TextSelection[] FindNextSingleLine(TextBodyItem startBodyItem, Regex pattern);
    public abstract virtual void ResetFindNext();
    public abstract virtual ParagraphItem CreateParagraphItem(ParagraphItemType itemType);
    public abstract virtual void RemoveMacros();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IWParagraph {
    public string StyleName { get; }
    public string Text { get; public set; }
    public bool EnableStyleSeparator { get; public set; }
    public ParagraphItem Item { get; }
    public ParagraphItemCollection Items { get; }
    public WParagraphFormat ParagraphFormat { get; }
    public WListFormat ListFormat { get; }
    public WCharacterFormat BreakCharacterFormat { get; }
    public bool IsInCell { get; }
    public bool IsEndOfSection { get; }
    public bool IsEndOfDocument { get; }
    public string ListString { get; }
    public abstract virtual string get_StyleName();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual bool get_EnableStyleSeparator();
    public abstract virtual void set_EnableStyleSeparator(bool value);
    public abstract virtual ParagraphItem get_Item(int index);
    public abstract virtual ParagraphItemCollection get_Items();
    public abstract virtual WParagraphFormat get_ParagraphFormat();
    public abstract virtual WListFormat get_ListFormat();
    public abstract virtual WCharacterFormat get_BreakCharacterFormat();
    public abstract virtual bool get_IsInCell();
    public abstract virtual bool get_IsEndOfSection();
    public abstract virtual bool get_IsEndOfDocument();
    public abstract virtual void ApplyStyle(string styleName);
    public abstract virtual void ApplyStyle(BuiltinStyle builtinStyle);
    public abstract virtual string get_ListString();
    public abstract virtual IWTextRange AppendText(string text);
    public abstract virtual IInlineContentControl AppendInlineContentControl(ContentControlType controlType);
    public abstract virtual IWPicture AppendPicture(Stream imageStream);
    public abstract virtual IWPicture AppendPicture(Byte[] imageBytes);
    public abstract virtual IWPicture AppendPicture(Byte[] svgData, Byte[] imageBytes);
    public abstract virtual WChart AppendChart(Object[][] data, float width, float height);
    public abstract virtual WChart AppendChart(float width, float height);
    public abstract virtual WChart AppendChart(Stream excelStream, int sheetNumber, string dataRange, float width, float height);
    public abstract virtual IWField AppendField(string fieldName, FieldType fieldType);
    public abstract virtual BookmarkStart AppendBookmarkStart(string name);
    public abstract virtual BookmarkEnd AppendBookmarkEnd(string name);
    public abstract virtual WComment AppendComment(string text);
    public abstract virtual WFootnote AppendFootnote(FootnoteType type);
    public abstract virtual IWTextBox AppendTextBox(float width, float height);
    public abstract virtual WSymbol AppendSymbol(byte characterCode);
    public abstract virtual Break AppendBreak(BreakType breakType);
    public abstract virtual Shape AppendShape(AutoShapeType autoShapeType, float width, float height);
    public abstract virtual void AppendHTML(string html);
    public abstract virtual IWParagraphStyle GetStyle();
    public abstract virtual TextSelection Find(string given, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord, bool saveFormatting);
    public abstract virtual WCheckBox AppendCheckBox();
    public abstract virtual WTextFormField AppendTextFormField(string defaultText);
    public abstract virtual WDropDownFormField AppendDropDownFormField();
    public abstract virtual WCheckBox AppendCheckBox(string checkBoxName, bool defaultCheckBoxValue);
    public abstract virtual WTextFormField AppendTextFormField(string formFieldName, string defaultText);
    public abstract virtual WDropDownFormField AppendDropDownFormField(string dropDropDownName);
    public abstract virtual IWField AppendHyperlink(string link, string text, HyperlinkType type);
    public abstract virtual IWField AppendHyperlink(string link, WPicture picture, HyperlinkType type);
    public abstract virtual void RemoveAbsPosition();
    public abstract virtual TableOfContent AppendTOC(int lowerHeadingLevel, int upperHeadingLevel);
    public abstract virtual void AppendCrossReference(ReferenceType referenceType, ReferenceKind referenceKind, Entity referenceEntity, bool insertAsHyperlink, bool includePosition, bool separatorNumber, string separatorString);
    public abstract virtual WOleObject AppendOleObject(Stream oleStream, WPicture olePicture, OleObjectType type);
    public abstract virtual WOleObject AppendOleObject(Byte[] oleBytes, WPicture olePicture, OleObjectType type);
    public abstract virtual WOleObject AppendOleObject(Stream oleStream, WPicture olePicture, OleLinkType oleLinkType);
    public abstract virtual WOleObject AppendOleObject(Byte[] oleBytes, WPicture olePicture, OleLinkType oleLinkType);
    public abstract virtual WOleObject AppendOleObject(Byte[] oleBytes, WPicture olePicture, string fileExtension);
    public abstract virtual WOleObject AppendOleObject(Stream oleStream, WPicture olePicture, string fileExtension);
    public abstract virtual WMath AppendMath();
    public abstract virtual WMath AppendMath(string laTeX);
    public abstract virtual WSection InsertSectionBreak();
    public abstract virtual WSection InsertSectionBreak(SectionBreakCode breakType);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IWParagraphCollection {
    public WParagraph Item { get; }
    public abstract virtual WParagraph get_Item(int index);
    public abstract virtual int Add(IWParagraph paragraph);
    public abstract virtual void Insert(int index, IWParagraph paragraph);
    public abstract virtual int IndexOf(IWParagraph paragraph);
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.DocIO.DLS.IWParagraphStyle {
    public bool IsPrimaryStyle { get; public set; }
    public WParagraphFormat ParagraphFormat { get; }
    public WCharacterFormat CharacterFormat { get; }
    public abstract virtual bool get_IsPrimaryStyle();
    public abstract virtual void set_IsPrimaryStyle(bool value);
    public abstract virtual WParagraphFormat get_ParagraphFormat();
    public abstract virtual WCharacterFormat get_CharacterFormat();
    public abstract virtual void Close();
}
public interface Syncfusion.DocIO.DLS.IWPicture {
    public float Height { get; public set; }
    public float Width { get; public set; }
    public float HeightScale { get; public set; }
    public float WidthScale { get; public set; }
    public float Rotation { get; public set; }
    public bool FlipHorizontal { get; public set; }
    public bool FlipVertical { get; public set; }
    public Byte[] SvgData { get; }
    public Byte[] ImageBytes { get; }
    public HorizontalOrigin HorizontalOrigin { get; public set; }
    public VerticalOrigin VerticalOrigin { get; public set; }
    public float HorizontalPosition { get; public set; }
    public float VerticalPosition { get; public set; }
    public TextWrappingStyle TextWrappingStyle { get; public set; }
    public TextWrappingType TextWrappingType { get; public set; }
    public bool IsBelowText { get; public set; }
    public ShapeHorizontalAlignment HorizontalAlignment { get; public set; }
    public ShapeVerticalAlignment VerticalAlignment { get; public set; }
    public string AlternativeText { get; public set; }
    public string Name { get; public set; }
    public string Title { get; public set; }
    public bool Visible { get; public set; }
    public WCharacterFormat CharacterFormat { get; }
    public abstract virtual float get_Height();
    public abstract virtual void set_Height(float value);
    public abstract virtual float get_Width();
    public abstract virtual void set_Width(float value);
    public abstract virtual float get_HeightScale();
    public abstract virtual void set_HeightScale(float value);
    public abstract virtual float get_WidthScale();
    public abstract virtual void set_WidthScale(float value);
    public abstract virtual float get_Rotation();
    public abstract virtual void set_Rotation(float value);
    public abstract virtual bool get_FlipHorizontal();
    public abstract virtual void set_FlipHorizontal(bool value);
    public abstract virtual bool get_FlipVertical();
    public abstract virtual void set_FlipVertical(bool value);
    public abstract virtual void LoadImage(Stream imageStream);
    public abstract virtual void LoadImage(Byte[] imageBytes);
    public abstract virtual void LoadImage(Byte[] svgData, Byte[] imageBytes);
    public abstract virtual Byte[] get_SvgData();
    public abstract virtual Byte[] get_ImageBytes();
    public abstract virtual IWParagraph AddCaption(string name, CaptionNumberingFormat format, CaptionPosition captionPosition);
    public abstract virtual HorizontalOrigin get_HorizontalOrigin();
    public abstract virtual void set_HorizontalOrigin(HorizontalOrigin value);
    public abstract virtual VerticalOrigin get_VerticalOrigin();
    public abstract virtual void set_VerticalOrigin(VerticalOrigin value);
    public abstract virtual float get_HorizontalPosition();
    public abstract virtual void set_HorizontalPosition(float value);
    public abstract virtual float get_VerticalPosition();
    public abstract virtual void set_VerticalPosition(float value);
    public abstract virtual TextWrappingStyle get_TextWrappingStyle();
    public abstract virtual void set_TextWrappingStyle(TextWrappingStyle value);
    public abstract virtual TextWrappingType get_TextWrappingType();
    public abstract virtual void set_TextWrappingType(TextWrappingType value);
    public abstract virtual bool get_IsBelowText();
    public abstract virtual void set_IsBelowText(bool value);
    public abstract virtual ShapeHorizontalAlignment get_HorizontalAlignment();
    public abstract virtual void set_HorizontalAlignment(ShapeHorizontalAlignment value);
    public abstract virtual ShapeVerticalAlignment get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(ShapeVerticalAlignment value);
    public abstract virtual string get_AlternativeText();
    public abstract virtual void set_AlternativeText(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual WCharacterFormat get_CharacterFormat();
}
public interface Syncfusion.DocIO.DLS.IWSection {
    public IWParagraphCollection Paragraphs { get; }
    public IWTableCollection Tables { get; }
    public WTextBody Body { get; }
    public WPageSetup PageSetup { get; }
    public ColumnCollection Columns { get; }
    public SectionBreakCode BreakCode { get; public set; }
    public bool ProtectForm { get; public set; }
    public WHeadersFooters HeadersFooters { get; }
    public abstract virtual IWParagraphCollection get_Paragraphs();
    public abstract virtual IWTableCollection get_Tables();
    public abstract virtual WTextBody get_Body();
    public abstract virtual WPageSetup get_PageSetup();
    public abstract virtual ColumnCollection get_Columns();
    public abstract virtual SectionBreakCode get_BreakCode();
    public abstract virtual void set_BreakCode(SectionBreakCode value);
    public abstract virtual bool get_ProtectForm();
    public abstract virtual void set_ProtectForm(bool value);
    public abstract virtual Column AddColumn(float width, float spacing);
    public abstract virtual IWParagraph AddParagraph();
    public abstract virtual IWTable AddTable();
    public abstract virtual WSection Clone();
    public abstract virtual void MakeColumnsEqual();
    public abstract virtual WHeadersFooters get_HeadersFooters();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IWSectionCollection {
    public WSection Item { get; }
    public abstract virtual WSection get_Item(int index);
    public abstract virtual int Add(IWSection section);
    public abstract virtual int IndexOf(IWSection section);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IWTable {
    public WRowCollection Rows { get; }
    public RowFormat TableFormat { get; }
    public WTableCell LastCell { get; }
    public WTableRow FirstRow { get; }
    public WTableRow LastRow { get; }
    public WTableCell Item { get; }
    public float Width { get; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public bool ApplyStyleForHeaderRow { get; public set; }
    public bool ApplyStyleForLastRow { get; public set; }
    public bool ApplyStyleForFirstColumn { get; public set; }
    public bool ApplyStyleForLastColumn { get; public set; }
    public bool ApplyStyleForBandedRows { get; public set; }
    public bool ApplyStyleForBandedColumns { get; public set; }
    public float IndentFromLeft { get; public set; }
    public abstract virtual WRowCollection get_Rows();
    public abstract virtual RowFormat get_TableFormat();
    public abstract virtual WTableCell get_LastCell();
    public abstract virtual WTableRow get_FirstRow();
    public abstract virtual WTableRow get_LastRow();
    public abstract virtual WTableCell get_Item(int row, int column);
    public abstract virtual float get_Width();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual bool get_ApplyStyleForHeaderRow();
    public abstract virtual void set_ApplyStyleForHeaderRow(bool value);
    public abstract virtual bool get_ApplyStyleForLastRow();
    public abstract virtual void set_ApplyStyleForLastRow(bool value);
    public abstract virtual bool get_ApplyStyleForFirstColumn();
    public abstract virtual void set_ApplyStyleForFirstColumn(bool value);
    public abstract virtual bool get_ApplyStyleForLastColumn();
    public abstract virtual void set_ApplyStyleForLastColumn(bool value);
    public abstract virtual bool get_ApplyStyleForBandedRows();
    public abstract virtual void set_ApplyStyleForBandedRows(bool value);
    public abstract virtual bool get_ApplyStyleForBandedColumns();
    public abstract virtual void set_ApplyStyleForBandedColumns(bool value);
    public abstract virtual WTableRow AddRow();
    public abstract virtual WTableRow AddRow(bool isCopyFormat);
    public abstract virtual WTableRow AddRow(bool isCopyFormat, bool autoPopulateCells);
    public abstract virtual void ResetCells(int rowsNum, int columnsNum);
    public abstract virtual void ResetCells(int rowsNum, int columnsNum, RowFormat format, float cellWidth);
    public abstract virtual void ApplyVerticalMerge(int columnIndex, int startRowIndex, int endRowIndex);
    public abstract virtual void ApplyHorizontalMerge(int rowIndex, int startCellIndex, int endCellIndex);
    public abstract virtual float get_IndentFromLeft();
    public abstract virtual void set_IndentFromLeft(float value);
    public abstract virtual void RemoveAbsPosition();
    public abstract virtual void ApplyStyle(BuiltinTableStyle builtinTableStyle);
    public abstract virtual IWTableStyle GetStyle();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IWTableCollection {
    public IWTable Item { get; }
    public abstract virtual IWTable get_Item(int index);
    public abstract virtual int Add(IWTable table);
    public abstract virtual int IndexOf(IWTable table);
    public abstract virtual bool Contains(IWTable table);
}
public interface Syncfusion.DocIO.DLS.IWTableStyle {
    public WParagraphFormat ParagraphFormat { get; }
    public abstract virtual WParagraphFormat get_ParagraphFormat();
}
public interface Syncfusion.DocIO.DLS.IWTextBox {
    public string Name { get; public set; }
    public bool Visible { get; public set; }
    public EntityCollection ChildEntities { get; }
    public WTextBody TextBoxBody { get; }
    public WTextBoxFormat TextBoxFormat { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual EntityCollection get_ChildEntities();
    public abstract virtual WTextBody get_TextBoxBody();
    public abstract virtual WTextBoxFormat get_TextBoxFormat();
    public abstract virtual void set_TextBoxFormat(WTextBoxFormat value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.DocIO.DLS.IWTextBoxCollection {
    public IWTextBox Item { get; }
    public abstract virtual IWTextBox get_Item(int index);
    public abstract virtual int Add(IWTextBox textBox);
}
public interface Syncfusion.DocIO.DLS.IWTextRange {
    public string Text { get; public set; }
    public WCharacterFormat CharacterFormat { get; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual WCharacterFormat get_CharacterFormat();
    public abstract virtual void ApplyCharacterFormat(WCharacterFormat charFormat);
}
internal class Syncfusion.DocIO.DLS.LayoutFootnoteInfoImpl : FootnoteLayoutInfo {
    public LayoutFootnoteInfoImpl(WFootnote footnote);
}
public enum Syncfusion.DocIO.DLS.LigatureType : Enum {
    public int value__;
    public static LigatureType None;
    public static LigatureType Standard;
    public static LigatureType Contextual;
    public static LigatureType StandardContextual;
    public static LigatureType Historical;
    public static LigatureType StandardHistorical;
    public static LigatureType ContextualHistorical;
    public static LigatureType StandardContextualHistorical;
    public static LigatureType Discretional;
    public static LigatureType StandardDiscretional;
    public static LigatureType ContextualDiscretional;
    public static LigatureType StandardContextualDiscretional;
    public static LigatureType HistoricalDiscretional;
    public static LigatureType StandardHistoricalDiscretional;
    public static LigatureType ContextualHistoricalDiscretional;
    public static LigatureType All;
}
internal class Syncfusion.DocIO.DLS.LinearGradient : object {
    private short m_angle;
    private byte m_bFlags;
    internal bool AnglePositive { get; internal set; }
    internal short Angle { get; internal set; }
    internal bool IsAngleDefined { get; internal set; }
    internal bool Scaled { get; internal set; }
    internal bool get_AnglePositive();
    internal void set_AnglePositive(bool value);
    internal short get_Angle();
    internal void set_Angle(short value);
    internal bool get_IsAngleDefined();
    internal void set_IsAngleDefined(bool value);
    internal bool get_Scaled();
    internal void set_Scaled(bool value);
    internal LinearGradient Clone();
    internal bool Compare(LinearGradient linearGradient);
    internal StringBuilder GetAsString();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.LineFormat : object {
    private Color m_BackColor;
    private LineEndLength m_BeginArrowheadLength;
    private ArrowheadStyle m_BeginArrowheadStyle;
    private LineEndWidth m_BeginArrowheadWidth;
    private LineDashing m_DashStyle;
    private LineEndLength m_EndArrowheadLength;
    private ArrowheadStyle m_EndArrowheadStyle;
    private LineEndWidth m_EndArrowheadWidth;
    private bool m_InsetPen;
    private LineStyle m_Style;
    private float m_Transparency;
    internal float m_Weight;
    internal bool m_Line;
    private LineCap m_LineCap;
    private GradientFill m_GradientFill;
    private LineFormatType m_LineFormatType;
    private LineJoin m_LineJoin;
    private PatternType m_Pattern;
    private Color m_ForeColor;
    private ImageRecord m_ImageRecord;
    private string m_miterJoinLimit;
    private List`1<DictionaryEntry> m_lineSchemeColor;
    internal ushort m_flag;
    private ChildShape m_childShape;
    private Entity m_shape;
    internal Dictionary`2<string, Stream> m_docxProps;
    internal byte m_flagA;
    internal Dictionary`2<int, object> m_propertiesHash;
    private WCharacterFormat m_characterFormat;
    private byte m_bflag;
    internal static byte LineJoinKey;
    internal static byte LineCapKey;
    internal static byte BeginArrowheadLengthKey;
    internal static byte BeginArrowheadStyleKey;
    internal static byte BeginArrowheadWidthKey;
    internal static byte DashStyleKey;
    internal static byte EndArrowheadLengthKey;
    internal static byte EndArrowheadStyleKey;
    internal static byte EndArrowheadWidthKey;
    internal static byte InsertPenKey;
    internal static byte StyleKey;
    internal static byte LineWeightKey;
    internal static byte ColorKey;
    internal static byte LineKey;
    internal bool HasTextOutLine { get; internal set; }
    internal ImageRecord ImageRecord { get; internal set; }
    internal Color ForeColor { get; internal set; }
    internal PatternType Pattern { get; internal set; }
    internal LineJoin LineJoin { get; internal set; }
    internal LineFormatType LineFormatType { get; internal set; }
    internal GradientFill GradientFill { get; internal set; }
    internal LineCap LineCap { get; internal set; }
    public bool Line { get; public set; }
    internal Dictionary`2<string, Stream> DocxProps { get; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    protected object Item { get; protected set; }
    public Color Color { get; public set; }
    internal LineEndLength BeginArrowheadLength { get; internal set; }
    public ArrowheadStyle BeginArrowheadStyle { get; public set; }
    internal LineEndWidth BeginArrowheadWidth { get; internal set; }
    public LineDashing DashStyle { get; public set; }
    internal LineEndLength EndArrowheadLength { get; internal set; }
    public ArrowheadStyle EndArrowheadStyle { get; public set; }
    internal LineEndWidth EndArrowheadWidth { get; internal set; }
    internal bool InsetPen { get; internal set; }
    public LineStyle Style { get; public set; }
    public float Transparency { get; public set; }
    public float Weight { get; public set; }
    internal bool Is2007StrokeDefined { get; internal set; }
    internal bool IsInlineLineWeightNull { get; internal set; }
    internal string MiterJoinLimit { get; internal set; }
    internal List`1<DictionaryEntry> LineSchemeColorTransforms { get; internal set; }
    public LineFormat(Shape shape);
    internal LineFormat(ShapeBase shape);
    internal LineFormat(ChildShape shape);
    internal LineFormat(WCharacterFormat characterFormat);
    internal bool get_HasTextOutLine();
    internal void set_HasTextOutLine(bool value);
    internal ImageRecord get_ImageRecord();
    internal void set_ImageRecord(ImageRecord value);
    internal Color get_ForeColor();
    internal void set_ForeColor(Color value);
    internal PatternType get_Pattern();
    internal void set_Pattern(PatternType value);
    internal LineJoin get_LineJoin();
    internal void set_LineJoin(LineJoin value);
    internal LineFormatType get_LineFormatType();
    internal void set_LineFormatType(LineFormatType value);
    internal GradientFill get_GradientFill();
    internal void set_GradientFill(GradientFill value);
    internal LineCap get_LineCap();
    internal void set_LineCap(LineCap value);
    public bool get_Line();
    public void set_Line(bool value);
    internal Dictionary`2<string, Stream> get_DocxProps();
    internal Dictionary`2<int, object> get_PropertiesHash();
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    public Color get_Color();
    public void set_Color(Color value);
    internal LineEndLength get_BeginArrowheadLength();
    internal void set_BeginArrowheadLength(LineEndLength value);
    public ArrowheadStyle get_BeginArrowheadStyle();
    public void set_BeginArrowheadStyle(ArrowheadStyle value);
    internal LineEndWidth get_BeginArrowheadWidth();
    internal void set_BeginArrowheadWidth(LineEndWidth value);
    public LineDashing get_DashStyle();
    public void set_DashStyle(LineDashing value);
    internal LineEndLength get_EndArrowheadLength();
    internal void set_EndArrowheadLength(LineEndLength value);
    public ArrowheadStyle get_EndArrowheadStyle();
    public void set_EndArrowheadStyle(ArrowheadStyle value);
    internal LineEndWidth get_EndArrowheadWidth();
    internal void set_EndArrowheadWidth(LineEndWidth value);
    internal bool get_InsetPen();
    internal void set_InsetPen(bool value);
    public LineStyle get_Style();
    public void set_Style(LineStyle value);
    public float get_Transparency();
    public void set_Transparency(float value);
    public float get_Weight();
    public void set_Weight(float value);
    internal bool get_Is2007StrokeDefined();
    internal void set_Is2007StrokeDefined(bool value);
    internal bool get_IsInlineLineWeightNull();
    internal void set_IsInlineLineWeightNull(bool value);
    internal string get_MiterJoinLimit();
    internal void set_MiterJoinLimit(string value);
    internal List`1<DictionaryEntry> get_LineSchemeColorTransforms();
    internal void set_LineSchemeColorTransforms(List`1<DictionaryEntry> value);
    private void LineFormatChanged();
    internal bool HasKeyValue(int Key);
    internal void SetKeyValue(int propKey, object value);
    internal void Close();
    internal bool HasKey(int propertyKey);
    internal LineFormat Clone();
    internal bool Compare(LineFormat lineFormat);
    internal StringBuilder GetAsString();
}
public enum Syncfusion.DocIO.DLS.LineFormatType : Enum {
    public int value__;
    public static LineFormatType Gradient;
    public static LineFormatType None;
    public static LineFormatType Patterned;
    public static LineFormatType Solid;
}
public enum Syncfusion.DocIO.DLS.LineStyle : Enum {
    public int value__;
    public static LineStyle Single;
    public static LineStyle StyleMixed;
    public static LineStyle ThickBetweenThin;
    public static LineStyle ThickThin;
    public static LineStyle ThinThick;
    public static LineStyle ThinThin;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.ListLevelCollection : XDLSSerializableCollection {
    public WListLevel Item { get; }
    internal ListLevelCollection(ListStyle owner);
    public WListLevel get_Item(int index);
    internal int Add(WListLevel level);
    internal int IndexOf(WListLevel level);
    internal void Clear();
    protected virtual OwnerHolder CreateItem(IXDLSContentReader reader);
    protected virtual string GetTagItemName();
    internal bool Compare(ListLevelCollection listLevels);
}
[FlagsAttribute]
public enum Syncfusion.DocIO.DLS.ListNumberAlignment : Enum {
    public int value__;
    public static ListNumberAlignment Left;
    public static ListNumberAlignment Center;
    public static ListNumberAlignment Right;
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.ListOverrideLevelCollection : XDLSSerializableCollection {
    private Dictionary`2<short, short> m_levelIndex;
    public OverrideLevelFormat Item { get; }
    private ListOverrideStyle OwnerStyle { get; }
    internal Dictionary`2<short, short> LevelIndex { get; internal set; }
    internal ListOverrideLevelCollection(WordDocument doc);
    public OverrideLevelFormat get_Item(int levelNumber);
    private ListOverrideStyle get_OwnerStyle();
    internal Dictionary`2<short, short> get_LevelIndex();
    internal void set_LevelIndex(Dictionary`2<short, short> value);
    internal int Add(int levelNumber, OverrideLevelFormat lfoLevel);
    internal int GetLevelNumber(OverrideLevelFormat levelFormat);
    internal bool HasOverrideLevel(int levelNumber);
    internal virtual void CloneToImpl(CollectionImpl collection);
    protected virtual OwnerHolder CreateItem(IXDLSContentReader reader);
    protected virtual string GetTagItemName();
    internal virtual void Close();
    internal bool Compare(ListOverrideLevelCollection listOverrideLevels);
}
internal class Syncfusion.DocIO.DLS.ListOverrideStyle : Style {
    private ListOverrideLevelCollection m_overrideLevels;
    internal int m_res1;
    internal int m_res2;
    internal string listStyleName;
    internal int m_unused1;
    internal int m_unused2;
    private long m_listID;
    public StyleType StyleType { get; }
    internal ListOverrideLevelCollection OverrideLevels { get; }
    internal long ListID { get; internal set; }
    internal ListOverrideStyle(WordDocument doc);
    public virtual StyleType get_StyleType();
    internal ListOverrideLevelCollection get_OverrideLevels();
    internal long get_ListID();
    internal void set_ListID(long value);
    public virtual IStyle Clone();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual void Close();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    internal bool Compare(ListOverrideStyle listOverrideStyle);
    private bool IsEquivalentListStyle(string sourceListStyleName, string destListStyleName, WordDocument doc);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.ListOverrideStyleCollection : StyleCollection {
    public ListOverrideStyle Item { get; }
    internal ListOverrideStyleCollection(WordDocument doc);
    public ListOverrideStyle get_Item(int index);
    internal int Add(ListOverrideStyle listOverrideStyle);
    public ListOverrideStyle FindByName(string name);
    internal bool HasEquivalentStyle(ListOverrideStyle listOverrideStyle);
    internal ListOverrideStyle GetEquivalentStyle(ListOverrideStyle listOverrideStyle);
}
public enum Syncfusion.DocIO.DLS.ListPatternType : Enum {
    public int value__;
    public static ListPatternType Arabic;
    public static ListPatternType UpRoman;
    public static ListPatternType LowRoman;
    public static ListPatternType UpLetter;
    public static ListPatternType LowLetter;
    public static ListPatternType Ordinal;
    public static ListPatternType Number;
    public static ListPatternType OrdinalText;
    public static ListPatternType LeadingZero;
    public static ListPatternType Bullet;
    public static ListPatternType FarEast;
    public static ListPatternType Special;
    public static ListPatternType ChineseCountingThousand;
    public static ListPatternType KanjiDigit;
    public static ListPatternType None;
}
internal class Syncfusion.DocIO.DLS.ListPropertiesConverter : object {
    [ThreadStaticAttribute]
private static bool isFirstInvalidListID;
    [ThreadStaticAttribute]
private static string m_defaultListStyleName;
    public static void Export(WListFormat listFormat, SinglePropertyModifierArray papxSprms, WordReaderBase reader);
    public static void Export(int formatIndex, int levelIndex, WListFormat listFormat, WordReaderBase reader);
    private static void UpdateNewListFormat(WordReaderBase reader, WListFormat listFormat);
    private static void UpdateListStyleForInvalidListId(WListFormat listFormat, int id, int levelIndex);
    private static void UpdateListType(ListStyle listStyle);
    private static void UpdateStyleName(ListStyle listStyle);
    public static void Import(ListStyle lstStyle, ListData listFormat, WordStyleSheet styleSheet);
    private static void ExportListFormat(WListFormat listFormat, WordReaderBase reader, int id, ListData listData, int levelIndex);
    private static void ExportNewListFormat(WListFormat listFormat, WordReaderBase reader);
    private static string ExportListStyle(WListFormat listFormat, WordReaderBase reader, int id, ListData listData);
    private static void ExportToListLevelCollection(ListLevels lstLevels, ListLevelCollection lstLevelCol, WordReaderBase reader);
    private static void ExportToDLSListLevel(ListLevel docListLevel, WListLevel dlsListLevel, WordReaderBase reader, int levelNumber);
    internal static void ImportToDocListLevel(WListLevel dlsListLevel, ListLevel docListLevel, WordStyleSheet styleSheet, int levelIndex);
    private static void CreateCharacterOffsets(string numStr, Byte[]& characterOffsets);
    private static bool IsBulletPatternType(ListLevels levels);
    private static void CheckListCollection(int listId, WListFormat listFormat);
    private static bool UseBaseListStyle(IWordReaderBase reader);
    private static string ExportListFormatOverrides(int lfoIndex, WordReaderBase reader, ListFormatOverride lstOverride, WListFormat listFormat);
    internal static void ExportListOverride(ListFormatOverride sourceLfo, ListOverrideStyle listOverrideStyle, WordReaderBase reader, IWordDocument doc);
    internal static void ImportListOverride(ListOverrideStyle listOverrideStyle, ListFormatOverride lfo, WordStyleSheet styleSheet);
}
public class Syncfusion.DocIO.DLS.ListStyle : XDLSSerializableBase {
    private static int DEF_MULTIPLIER;
    internal static string DEF_BULLLET_FIRST;
    internal static string DEF_BULLLET_SECOND;
    internal static string DEF_BULLLET_THIRD;
    private ListLevelCollection m_levels;
    private ListType m_listType;
    private string m_name;
    private string m_baseLstStyle;
    private byte m_bFlags;
    private long m_listId;
    private string m_styleLink;
    internal long ListID { get; internal set; }
    internal string StyleLink { get; internal set; }
    public string Name { get; public set; }
    public ListType ListType { get; public set; }
    public ListLevelCollection Levels { get; }
    public StyleType StyleType { get; }
    internal bool IsHybrid { get; internal set; }
    internal bool IsSimple { get; internal set; }
    internal bool IsBuiltInStyle { get; internal set; }
    internal string BaseListStyleName { get; internal set; }
    public ListStyle(IWordDocument doc, ListType listType);
    internal ListStyle(WordDocument doc, ListType listType, bool isOneLevelList);
    internal ListStyle(WordDocument doc);
    internal long get_ListID();
    internal void set_ListID(long value);
    internal string get_StyleLink();
    internal void set_StyleLink(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public ListType get_ListType();
    public void set_ListType(ListType value);
    public ListLevelCollection get_Levels();
    public sealed virtual StyleType get_StyleType();
    internal bool get_IsHybrid();
    internal void set_IsHybrid(bool value);
    internal bool get_IsSimple();
    internal void set_IsSimple(bool value);
    internal bool get_IsBuiltInStyle();
    internal void set_IsBuiltInStyle(bool value);
    internal string get_BaseListStyleName();
    internal void set_BaseListStyleName(string value);
    public static ListStyle CreateEmptyListStyle(IWordDocument doc, ListType listType, bool isOneLevelList);
    public sealed virtual IStyle Clone();
    private sealed virtual override void Syncfusion.DocIO.DLS.IStyle.Close();
    internal void Close();
    protected virtual object CloneImpl();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    internal void CreateDefListLevels(ListType listType);
    public WListLevel GetNearLevel(int levelNumber);
    internal void CreateEmptyListLevels(bool isOneLevelList);
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    private bool RemoveStyleFromUniqueCollection();
    private void UpdateStyleUniqueCollection();
    internal bool Compare(ListStyle listStyle);
    internal bool IsSameListNameOrIDExists(ListStyleCollection docListStyles, long listID, string styleName);
    internal void SetNewName(WordDocument doc);
    internal void SetNewListID(WordDocument destDocument);
    private sealed virtual override void Syncfusion.DocIO.DLS.IStyle.Remove();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.ListStyleCollection : CollectionImpl {
    internal Dictionary`2<string, List`1<IStyle>> m_uniqueNameCollection;
    public ListStyle Item { get; }
    internal ListStyleCollection(WordDocument doc);
    public ListStyle get_Item(int index);
    public int Add(ListStyle style);
    public ListStyle FindByName(string name);
    internal void Remove(IStyle style);
    internal void Insert(int index, IStyle style);
    internal bool HasEquivalentStyle(ListStyle listStyle);
    internal ListStyle GetEquivalentStyle(ListStyle listStyle);
    internal bool HasSameListId(ListStyle currentListStyle);
}
public enum Syncfusion.DocIO.DLS.ListType : Enum {
    public int value__;
    public static ListType Numbered;
    public static ListType Bulleted;
    public static ListType NoList;
}
internal class Syncfusion.DocIO.DLS.MacroData : object {
    private string m_name;
    private string m_bEncrypt;
    private string m_cmg;
    internal string Name { get; internal set; }
    internal string Encrypt { get; internal set; }
    internal string Cmg { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Encrypt();
    internal void set_Encrypt(string value);
    internal string get_Cmg();
    internal void set_Cmg(string value);
}
public class Syncfusion.DocIO.DLS.MailMerge : object {
    private WordDocument m_doc;
    private GroupSelector m_groupSelector;
    private WSectionCollection m_contentSections;
    private String[] m_names;
    private String[] m_values;
    private byte m_bFlags;
    private MailMergeSettings m_settings;
    private bool m_startAtNewPage;
    private DbConnection m_conn;
    private DataSet m_curDataSet;
    private ArrayList m_commands;
    private DataSet m_dataSet;
    private Dictionary`2<string, IRowsEnumerator> m_nestedEnums;
    private Regex m_varCmdRegex;
    private Stack`1<GroupSelector> m_groupSelectors;
    private Dictionary`2<string, string> m_mappedFields;
    private MailMergeDataSet m_dataSetDocIO;
    private List`1<DictionaryEntry> m_commandsDocIO;
    private MailMergeDataSet m_curDataSetDocIO;
    private int m_mergedRecordCount;
    private Dictionary`2<string, bool> m_clearFieldsState;
    private Stack`1<WIfField> m_IfFieldCollections;
    [CompilerGeneratedAttribute]
private MergeFieldEventHandler MergeField;
    [CompilerGeneratedAttribute]
private MergeImageFieldEventHandler MergeImageField;
    [CompilerGeneratedAttribute]
private BeforeClearFieldEventHandler BeforeClearField;
    [CompilerGeneratedAttribute]
private BeforeClearGroupFieldEventHandler BeforeClearGroupField;
    private WMergeField _previousMergeField;
    private bool _isInValidNextField;
    private bool IsSqlConnection { get; private set; }
    private bool IsBeginGroupFound { get; private set; }
    private bool IsEndGroupFound { get; private set; }
    private bool IsNested { get; private set; }
    public bool ClearFields { get; public set; }
    public bool StartAtNewPage { get; public set; }
    protected WordDocument Document { get; }
    public bool RemoveEmptyParagraphs { get; public set; }
    public bool RemoveEmptyGroup { get; public set; }
    public bool InsertAsNewRow { get; public set; }
    private Dictionary`2<string, IRowsEnumerator> NestedEnums { get; }
    private DataSet CurrentDataSet { get; }
    private Regex VariableCommandRegex { get; }
    private Stack`1<GroupSelector> GroupSelectors { get; }
    public Dictionary`2<string, string> MappedFields { get; }
    private MailMergeDataSet CurrentDataSetDocIO { get; }
    private Dictionary`2<string, bool> ClearFieldsState { get; }
    public MailMergeSettings Settings { get; }
    internal MailMerge(WordDocument document);
    private bool get_IsSqlConnection();
    private void set_IsSqlConnection(bool value);
    private bool get_IsBeginGroupFound();
    private void set_IsBeginGroupFound(bool value);
    private bool get_IsEndGroupFound();
    private void set_IsEndGroupFound(bool value);
    private bool get_IsNested();
    private void set_IsNested(bool value);
    public bool get_ClearFields();
    public void set_ClearFields(bool value);
    public bool get_StartAtNewPage();
    public void set_StartAtNewPage(bool value);
    protected WordDocument get_Document();
    public bool get_RemoveEmptyParagraphs();
    public void set_RemoveEmptyParagraphs(bool value);
    public bool get_RemoveEmptyGroup();
    public void set_RemoveEmptyGroup(bool value);
    public bool get_InsertAsNewRow();
    public void set_InsertAsNewRow(bool value);
    private Dictionary`2<string, IRowsEnumerator> get_NestedEnums();
    private DataSet get_CurrentDataSet();
    private Regex get_VariableCommandRegex();
    private Stack`1<GroupSelector> get_GroupSelectors();
    public Dictionary`2<string, string> get_MappedFields();
    private MailMergeDataSet get_CurrentDataSetDocIO();
    private Dictionary`2<string, bool> get_ClearFieldsState();
    public MailMergeSettings get_Settings();
    [CompilerGeneratedAttribute]
public void add_MergeField(MergeFieldEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MergeField(MergeFieldEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MergeImageField(MergeImageFieldEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MergeImageField(MergeImageFieldEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeClearField(BeforeClearFieldEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeClearField(BeforeClearFieldEventHandler value);
    [CompilerGeneratedAttribute]
public void add_BeforeClearGroupField(BeforeClearGroupFieldEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeClearGroupField(BeforeClearGroupFieldEventHandler value);
    public void Execute(String[] fieldNames, String[] fieldValues);
    public void Execute(IEnumerable dataSource);
    public void ExecuteGroup(MailMergeDataTable dataSource);
    public void Execute(DataRow row);
    public void Execute(DataTable table);
    public void Execute(DataView dataView);
    public void ExecuteGroup(DataTable table);
    public void ExecuteGroup(DataView dataView);
    public void ExecuteNestedGroup(DataSet dataSet, ArrayList commands);
    public void ExecuteNestedGroup(MailMergeDataTable dataTable);
    public void ExecuteNestedGroup(MailMergeDataSet dataSource, List`1<DictionaryEntry> commands);
    public String[] GetMergeFieldNames();
    public String[] GetMergeFieldNames(string groupName);
    public String[] GetMergeGroupNames();
    private void GetMergeFieldNamesImpl(List`1<string> fieldsArray, string groupName);
    internal void Close();
    private void OnGroupFound(IRowsEnumerator rowsEnum);
    private bool CheckRecordsCount(IRowsEnumerator rowsEnum);
    private void EmptyGroup(GroupSelector gs);
    private void EmptyGroupInTextbody(GroupSelector gs);
    private void EmptyGroupInTable(GroupSelector gs);
    private void RemoveGoBackBookmark(GroupSelector gs);
    private void RemoveItemsAfterTableStart(GroupSelector gs, WTable table, int startIndex, int startParaIndex, int startCellIndex, Int32& endCellIndex, int startRowIndex, Int32& endRowIndex, int endParaIndex, int endIndex);
    private void RemoveItemsAtTableEnd(GroupSelector gs, WTable table, int endIndex, int endParaIndex, int startCellIndex, int endCellIndex, int startRowIndex, int endRowIndex);
    private void EmptyGroupInTableCell(GroupSelector gs);
    private void RemoveItems(Entity ent, int startIndex, int endIndex);
    private String[] GetTableCommand(string command);
    private void OnBodyGroupFound(IRowsEnumerator rowsEnum);
    private void InsertPageBreak(TextBodySelection bodySel);
    private void RemoveBookMarks(TextBodyPart txtBodyPart);
    private void DeleteBoookmarks(IEntity entity);
    private void OnRowGroupFound(IRowsEnumerator rowsEnum);
    private void ExecuteGroup(IRowsEnumerator rowsEnum);
    private void ExecuteGroup(WSection section, IRowsEnumerator rowsEnum);
    private void ExecuteGroupForSelection(WTextBody textBody, int itemStart, int itemEnd, int pItemStart, int pItemEnd, IRowsEnumerator rowsEnum);
    private bool IsNeedToRemoveGroupEnd(WMergeField mergeField);
    private int UpdateEndIndex(Int32& count, WParagraph para, int endIndex);
    private Entity GetTableEntity(Entity entity);
    private int ExecuteGroupForRowSelection(WTable table, int startRowIndex, int count, IRowsEnumerator rowsEnum);
    private void ExecuteNestedGroup(string tableName);
    private IRowsEnumerator GetEnum(string tableName);
    private void UpdateEnum(string tableName, IRowsEnumerator rowsEnum);
    private object GetDataTable(string tableName);
    private MailMergeDataTable GetDataTable(string tableName, MailMergeDataSet dataSet);
    private string GetCommand(string tableName);
    private string UpdateVarCmd(string command);
    private void VerifyNestedGroups(int startRow, int endRow, WTable table);
    private string FindNestedGroup(int startRow, int endRow, WTable table);
    private DataTable GetDataTableConn(string tableName);
    private DataTable GetDataTableDSet(string tableName);
    protected MergeFieldEventArgs SendMergeField(IWMergeField field, object value, IRowsEnumerator rowsEnum);
    internal MergeFieldEventArgs SendMergeField(IWMergeField field, object value, IRowsEnumerator rowsEnum, int valIndex);
    protected MergeImageFieldEventArgs SendMergeImageField(IWMergeField field, object bmp, IRowsEnumerator rowsEnum, MemoryStream imageByteStream);
    internal BeforeClearFieldEventArgs SendBeforeClearField(IRowsEnumerator rowsEnum, IWMergeField mergeField, object value);
    internal BeforeClearGroupFieldEventArgs SendBeforeClearGroup(IRowsEnumerator rowsEnum, GroupSelector groupSelector);
    private string GetGroupName(string currGroupName);
    private void Execute(IRowsEnumerator rowsEnum);
    private bool CheckNextRow(IRowsEnumerator rowsEnum);
    private void ExecuteForSection(IWSection sec, IRowsEnumerator rowsEnum);
    private void ExecuteForTextBody(BodyItemCollection bodyItems, IRowsEnumerator rowsEnum);
    private void ExecuteForTextBodyItem(ITextBodyItem item, IRowsEnumerator rowsEnum);
    private void ExecuteForParagraph(WParagraph paragraph, IRowsEnumerator rowsEnum);
    private bool IsCellHasValidContent(WTableCell parentCell);
    private void ExecuteForParagraphItems(ParagraphItem pItem, WParagraph paragraph, IRowsEnumerator rowsEnum, Boolean& paraItemCollectionChanged);
    private void ExecuteForTable(IWTable table, IRowsEnumerator rowsEnum);
    private void ConvertToText(WField field, string text);
    private bool UpdateMergeFieldValue(WMergeField mergeField, IRowsEnumerator rowsEnum);
    private object TriggerSendBeforeClearFieldEvent(object value, IRowsEnumerator rowsEnum, WMergeField mergeField);
    private bool UpdateMergeFieldResult(WMergeField mergeField, object value, IRowsEnumerator rowsEnum, int valIndex);
    private void EnusreDoubelQuotesForResult(WIfField ifField, WMergeField mergeField);
    private void CountDoubleQuotes(WParagraph paragraph, int startIindex, int endIndex, Int32& doubleQuotesCount);
    private bool IsDeepDetached(WField field);
    private int RemoveField(WField field, bool isMergeStartAndEndPara);
    private void InsertMergeFieldResultAsTextRange(WMergeField mergeField, MergeFieldEventArgs args);
    private object GetFieldValue(IWMergeField field, IRowsEnumerator rowsEnum);
    private object GetFieldValue(string fieldName, IRowsEnumerator rowsEnum);
    private void UpdateIfFieldValue(WIfField field, IRowsEnumerator rowsEnum);
    private bool UpdateImageMergeFieldValue(WMergeField mergeField, IRowsEnumerator rowsEnum);
    private bool UpdateMergedPicture(WMergeField mergeField, MergeImageFieldEventArgs args);
    private bool UpdateMergeFieldValue(WMergeField mergeField);
    private void CopyContent(WordDocument document);
    private void AppendCopiedContent(WordDocument document);
    private Image GetImage(object data);
    private void GetFieldNamesForParagraph(List`1<string> fieldsArray, TextBodyItem paragraph, string groupName);
    private void GetFieldNamesForParagraphItems(List`1<string> fieldsArray, ParagraphItem item, string groupName);
    private void GetFiledNamesForSDTBlockItems(List`1<string> fieldsArray, BlockContentControl structureDocumentTagBlocklockContent, string groupName);
    private static bool IsBeginGroup(WMergeField field);
    private static bool IsEndGroup(WMergeField field);
    private bool CheckSelection(IRowsEnumerator rowsEnum);
    private void HideFields(IWSectionCollection sections);
    private void RemoveEmptyMergeFieldsInTableRow(WTableRow row);
    private void RemoveEmptyMergeFieldsInBodyItems(TextBodySelection selection);
    private void RemoveEmptyMergeFieldsInBodyItems(BodyItemCollection items);
    private bool RemoveEmptyMergeFieldsInParagraph(WParagraph para);
    private bool HideField(WField field, bool hide);
    private string GetMappedColName(string fieldName);
    private void RemoveSpellChecking();
}
internal enum Syncfusion.DocIO.DLS.MailMergeCheckErrors : Enum {
    public int value__;
    public static MailMergeCheckErrors Simulate;
    public static MailMergeCheckErrors PauseOnError;
    public static MailMergeCheckErrors CollectErrors;
}
public class Syncfusion.DocIO.DLS.MailMergeDataSet : object {
    private string DEF_GROUPNAME_PROPERTY;
    private string DEF_SOURCEDATA_PROPERTY;
    private List`1<object> m_dataSet;
    public List`1<object> DataSet { get; }
    public List`1<object> get_DataSet();
    public void Add(object dataTable);
    public void Clear();
    internal MailMergeDataTable GetDataTable(string tableName);
    internal void RemoveDataTable(string tableName);
}
public class Syncfusion.DocIO.DLS.MailMergeDataTable : object {
    private string m_groupName;
    private IEnumerator m_sourceData;
    private int m_matchingRecordsCount;
    private string m_command;
    public string GroupName { get; }
    public IEnumerator SourceData { get; }
    internal int MatchingRecordsCount { get; internal set; }
    internal string Command { get; internal set; }
    public MailMergeDataTable(string groupName, IEnumerable enumerable);
    internal MailMergeDataTable(string groupName, IEnumerator enumerator);
    public string get_GroupName();
    public IEnumerator get_SourceData();
    internal int get_MatchingRecordsCount();
    internal void set_MatchingRecordsCount(int value);
    internal string get_Command();
    internal void set_Command(string value);
    internal MailMergeDataTable Select(string command);
}
internal enum Syncfusion.DocIO.DLS.MailMergeDataType : Enum {
    public int value__;
    public static MailMergeDataType None;
    public static MailMergeDataType TextFile;
    public static MailMergeDataType Database;
    public static MailMergeDataType Spreadsheet;
    public static MailMergeDataType Query;
    public static MailMergeDataType ODBC;
    public static MailMergeDataType Native;
}
internal enum Syncfusion.DocIO.DLS.MailMergeDestination : Enum {
    public int value__;
    public static MailMergeDestination NewDocument;
    public static MailMergeDestination Printer;
    public static MailMergeDestination EMail;
    public static MailMergeDestination Fax;
}
public class Syncfusion.DocIO.DLS.MailMergeException : Exception {
    private static string DEF_MESSAGE;
    public MailMergeException(Exception innerExc);
    public MailMergeException(string message);
    public MailMergeException(string message, Exception innerExc);
}
internal enum Syncfusion.DocIO.DLS.MailMergeMainDocumentType : Enum {
    public int value__;
    public static MailMergeMainDocumentType NotAMergeDocument;
    public static MailMergeMainDocumentType FormLetters;
    public static MailMergeMainDocumentType MailingLabels;
    public static MailMergeMainDocumentType Envelopes;
    public static MailMergeMainDocumentType Catalog;
    public static MailMergeMainDocumentType EMail;
    public static MailMergeMainDocumentType Fax;
}
public class Syncfusion.DocIO.DLS.MailMergeSettings : object {
    internal static byte ActiveRecordKey;
    internal static byte AddressFieldNameKey;
    internal static byte CheckErrorsKey;
    internal static byte ConnectStringKey;
    internal static byte DataSourceKey;
    internal static byte DataTypeKey;
    internal static byte DestinationKey;
    internal static byte DoNotSupressBlankLinesKey;
    internal static byte HeaderSourceKey;
    internal static byte LinkToQueryKey;
    internal static byte MailAsAttachmentKey;
    internal static byte MailSubjectKey;
    internal static byte MainDocumentTypeKey;
    internal static byte QueryKey;
    internal static byte ViewMergedDataKey;
    internal static byte ODSOSettingsKey;
    private Dictionary`2<int, object> m_propertiesHash;
    internal int ActiveRecord { get; internal set; }
    internal string AddressFieldName { get; internal set; }
    internal MailMergeCheckErrors CheckErrors { get; internal set; }
    internal string ConnectString { get; internal set; }
    public string DataSource { get; public set; }
    internal MailMergeDataType DataType { get; internal set; }
    internal MailMergeDestination Destination { get; internal set; }
    internal bool DoNotSupressBlankLines { get; internal set; }
    internal string HeaderSource { get; internal set; }
    internal bool LinkToQuery { get; internal set; }
    internal bool MailAsAttachment { get; internal set; }
    internal string MailSubject { get; internal set; }
    internal MailMergeMainDocumentType MainDocumentType { get; internal set; }
    internal string Query { get; internal set; }
    internal bool ViewMergedData { get; internal set; }
    internal Stream ODSOSettings { get; internal set; }
    private Dictionary`2<int, object> PropertiesHash { get; }
    public bool HasData { get; }
    internal int get_ActiveRecord();
    internal void set_ActiveRecord(int value);
    internal string get_AddressFieldName();
    internal void set_AddressFieldName(string value);
    internal MailMergeCheckErrors get_CheckErrors();
    internal void set_CheckErrors(MailMergeCheckErrors value);
    internal string get_ConnectString();
    internal void set_ConnectString(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    internal MailMergeDataType get_DataType();
    internal void set_DataType(MailMergeDataType value);
    internal MailMergeDestination get_Destination();
    internal void set_Destination(MailMergeDestination value);
    internal bool get_DoNotSupressBlankLines();
    internal void set_DoNotSupressBlankLines(bool value);
    internal string get_HeaderSource();
    internal void set_HeaderSource(string value);
    internal bool get_LinkToQuery();
    internal void set_LinkToQuery(bool value);
    internal bool get_MailAsAttachment();
    internal void set_MailAsAttachment(bool value);
    internal string get_MailSubject();
    internal void set_MailSubject(string value);
    internal MailMergeMainDocumentType get_MainDocumentType();
    internal void set_MainDocumentType(MailMergeMainDocumentType value);
    internal string get_Query();
    internal void set_Query(string value);
    internal bool get_ViewMergedData();
    internal void set_ViewMergedData(bool value);
    internal Stream get_ODSOSettings();
    internal void set_ODSOSettings(Stream value);
    private Dictionary`2<int, object> get_PropertiesHash();
    public bool get_HasData();
    internal bool HasKey(int Key);
    private void SetKeyValue(int propKey, object value);
    internal void Close();
    public void RemoveData();
}
internal class Syncfusion.DocIO.DLS.MajorMinorFontScheme : object {
    private Dictionary`2<string, string> m_fontTypefaces;
    private FontSchemeStruct m_fontSchemeStruct;
    private List`1<FontSchemeStruct> m_fontSchemeList;
    internal Dictionary`2<string, string> FontTypeface { get; internal set; }
    internal List`1<FontSchemeStruct> FontSchemeList { get; internal set; }
    internal FontSchemeStruct FontSchemeStructure { get; internal set; }
    internal Dictionary`2<string, string> get_FontTypeface();
    internal void set_FontTypeface(Dictionary`2<string, string> value);
    internal List`1<FontSchemeStruct> get_FontSchemeList();
    internal void set_FontSchemeList(List`1<FontSchemeStruct> value);
    internal FontSchemeStruct get_FontSchemeStructure();
    internal void set_FontSchemeStructure(FontSchemeStruct value);
    internal void Close();
}
public class Syncfusion.DocIO.DLS.Margins : object {
    private int m_iLeft;
    private int m_iRight;
    private int m_iTop;
    private int m_iBottom;
    public int All { get; public set; }
    public int Left { get; public set; }
    public int Right { get; public set; }
    public int Top { get; public set; }
    public int Bottom { get; public set; }
    private bool IsAll { get; }
    public Margins(int left, int top, int right, int bottom);
    public int get_All();
    public void set_All(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    private bool get_IsAll();
}
public class Syncfusion.DocIO.DLS.MarginsF : FormatBase {
    internal static int LeftKey;
    internal static int RightKey;
    internal static int TopKey;
    internal static int BottomKey;
    internal static int GutterKey;
    public float All { get; public set; }
    public float Left { get; public set; }
    public float Right { get; public set; }
    public float Top { get; public set; }
    public float Bottom { get; public set; }
    private bool IsAll { get; }
    internal float Gutter { get; internal set; }
    public MarginsF(float left, float top, float right, float bottom);
    public float get_All();
    public void set_All(float value);
    public float get_Left();
    public void set_Left(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Top();
    public void set_Top(float value);
    public float get_Bottom();
    public void set_Bottom(float value);
    private bool get_IsAll();
    internal float get_Gutter();
    internal void set_Gutter(float value);
    public MarginsF Clone();
    protected virtual object GetDefValue(int key);
    internal void SetOldPropertyHashMarginValues(float left, float top, float right, float bottom, float gutter);
    internal object GetPropertyValue(int propKey);
    internal void SetPropertyValue(int propKey, object value);
    internal bool Compare(MarginsF marginsF);
}
internal class Syncfusion.DocIO.DLS.MdToWordConversion : object {
    private WordDocument wordDoc;
    private MarkdownDocument markdownDoc;
    private WListFormat currListFormat;
    internal void ConvertToWordDOM(MarkdownDocument markdownDocument, WordDocument document);
    private void ConvertToWordDocument();
    private void ApplyCodeBlockStyle(WParagraph paragraph, string paraStyleName);
    private void ApplyListStyle(MdListFormat mdListFormat, WParagraph paragraph, Int32& currLvlNumInWord, int i, Boolean& isFirstListOccured);
    private void ConvertMdInlineItems(WParagraph wParagraph, List`1<IMdInline> mdInineItems);
    private void ConvertMdHyperlink(MdHyperlink mdHyperlink, WParagraph wParagraph);
    private void ConvertMdPicture(MdPicture mdPicture, WParagraph wParagraph);
    private void ConvertMdTable(MdTable mdTable, WTable wTable);
    private WTextRange ConvertMdTextRangeToWTextRange(MdTextRange mdTextRange);
    private string GetProcessedText(string text, string replaceCharacter);
    private HorizontalAlignment GetColumnAlignment(ColumnAlignment columnAlignment);
    private void CreateFencedCodeStyle();
    internal void ApplyParagraphStyle(MdParagraphStyle mdStyleName, WParagraph paragraph);
    internal ListPatternType GetListPatternType(int currentListLevel);
    internal void Close();
}
public class Syncfusion.DocIO.DLS.MergeFieldEventArgs : EventArgs {
    private IWordDocument m_doc;
    private IWMergeField m_field;
    private object m_fieldValue;
    private int m_rowIndex;
    private string m_tableName;
    private string m_groupName;
    private WTextRange m_textRange;
    public IWordDocument Document { get; }
    public string FieldName { get; }
    public object FieldValue { get; }
    public string TableName { get; }
    public string GroupName { get; }
    public int RowIndex { get; }
    public WCharacterFormat CharacterFormat { get; }
    public string Text { get; public set; }
    public IWMergeField CurrentMergeField { get; }
    public WTextRange TextRange { get; }
    public MergeFieldEventArgs(IWordDocument doc, string tableName, int rowIndex, IWMergeField field, object value);
    internal MergeFieldEventArgs(IWordDocument doc, string tableName, int rowIndex, IWMergeField field, object value, string groupName);
    public IWordDocument get_Document();
    public string get_FieldName();
    public object get_FieldValue();
    public string get_TableName();
    public string get_GroupName();
    public int get_RowIndex();
    public WCharacterFormat get_CharacterFormat();
    public string get_Text();
    public void set_Text(string value);
    public IWMergeField get_CurrentMergeField();
    public WTextRange get_TextRange();
}
public class Syncfusion.DocIO.DLS.MergeFieldEventHandler : MulticastDelegate {
    public MergeFieldEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MergeFieldEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MergeFieldEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.DocIO.DLS.MergeImageFieldEventArgs : MergeFieldEventArgs {
    private bool m_useText;
    private Image m_image;
    private Stream m_imageStream;
    private bool m_bSkip;
    private WPicture m_picture;
    public bool UseText { get; }
    public Stream ImageStream { get; public set; }
    internal Image Image { get; internal set; }
    public bool Skip { get; public set; }
    public WPicture Picture { get; }
    public MergeImageFieldEventArgs(IWordDocument doc, string tableName, int rowIndex, IWMergeField field, object obj);
    public bool get_UseText();
    public Stream get_ImageStream();
    public void set_ImageStream(Stream value);
    internal Image get_Image();
    internal void set_Image(Image value);
    public bool get_Skip();
    public void set_Skip(bool value);
    public WPicture get_Picture();
    private void LoadImage(Stream stream);
}
public class Syncfusion.DocIO.DLS.MergeImageFieldEventHandler : MulticastDelegate {
    public MergeImageFieldEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MergeImageFieldEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MergeImageFieldEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Syncfusion.DocIO.DLS.MultiplePage : Enum {
    public int value__;
    public static MultiplePage Normal;
    public static MultiplePage MirrorMargins;
    public static MultiplePage TwoPagesPerSheet;
    public static MultiplePage BookFold;
    public static MultiplePage ReverseBookFold;
}
internal class Syncfusion.DocIO.DLS.NamespaceDoc : object {
}
public enum Syncfusion.DocIO.DLS.NumberFormat : Enum {
    public int value__;
    public static NumberFormat None;
    public static NumberFormat WholeNumber;
    public static NumberFormat FloatingPoint;
    public static NumberFormat WholeNumberPercent;
    public static NumberFormat FloatingPointPercent;
    public static NumberFormat WholeNumberWithSpace;
    public static NumberFormat FloatingPointWithSpace;
    public static NumberFormat CurrencyFormat;
}
public enum Syncfusion.DocIO.DLS.NumberFormType : Enum {
    public int value__;
    public static NumberFormType Default;
    public static NumberFormType Lining;
    public static NumberFormType OldStyle;
}
public enum Syncfusion.DocIO.DLS.NumberSpacingType : Enum {
    public int value__;
    public static NumberSpacingType Default;
    public static NumberSpacingType Proportional;
    public static NumberSpacingType Tabular;
}
public enum Syncfusion.DocIO.DLS.OleLinkType : Enum {
    public int value__;
    public static OleLinkType Embed;
    public static OleLinkType Link;
}
public enum Syncfusion.DocIO.DLS.OleObjectType : Enum {
    public int value__;
    public static OleObjectType Undefined;
    public static OleObjectType AdobeAcrobatDocument;
    public static OleObjectType BitmapImage;
    public static OleObjectType MediaClip;
    public static OleObjectType Equation;
    public static OleObjectType GraphChart;
    public static OleObjectType Excel_97_2003_Worksheet;
    public static OleObjectType ExcelBinaryWorksheet;
    public static OleObjectType ExcelChart;
    public static OleObjectType ExcelMacroWorksheet;
    public static OleObjectType ExcelWorksheet;
    public static OleObjectType PowerPoint_97_2003_Presentation;
    public static OleObjectType PowerPoint_97_2003_Slide;
    public static OleObjectType PowerPointMacroPresentation;
    public static OleObjectType PowerPointMacroSlide;
    public static OleObjectType PowerPointPresentation;
    public static OleObjectType PowerPointSlide;
    public static OleObjectType Word_97_2003_Document;
    public static OleObjectType WordDocument;
    public static OleObjectType WordMacroDocument;
    public static OleObjectType VisioDrawing;
    public static OleObjectType MIDISequence;
    public static OleObjectType OpenDocumentPresentation;
    public static OleObjectType OpenDocumentSpreadsheet;
    public static OleObjectType OpenDocumentText;
    public static OleObjectType OpenOfficeSpreadsheet1_1;
    public static OleObjectType OpenOfficeText_1_1;
    public static OleObjectType Package;
    public static OleObjectType VideoClip;
    public static OleObjectType WaveSound;
    public static OleObjectType WordPadDocument;
    public static OleObjectType OpenOfficeSpreadsheet;
    public static OleObjectType OpenOfficeText;
}
public class Syncfusion.DocIO.DLS.OverrideLevelFormat : XDLSSerializableBase {
    private int m_startAt;
    private byte m_bFlags;
    private WListLevel m_lfoLevel;
    internal int m_reserved1;
    internal int m_reserved2;
    internal int m_reserved3;
    internal bool OverrideStartAtValue { get; internal set; }
    internal bool OverrideFormatting { get; internal set; }
    internal int StartAt { get; internal set; }
    internal WListLevel OverrideListLevel { get; internal set; }
    internal OverrideLevelFormat(WordDocument doc);
    internal bool get_OverrideStartAtValue();
    internal void set_OverrideStartAtValue(bool value);
    internal bool get_OverrideFormatting();
    internal void set_OverrideFormatting(bool value);
    internal int get_StartAt();
    internal void set_StartAt(int value);
    internal WListLevel get_OverrideListLevel();
    internal void set_OverrideListLevel(WListLevel value);
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual object CloneImpl();
    internal void Close();
    internal bool Compare(OverrideLevelFormat overrideLevelFormat);
}
public abstract class Syncfusion.DocIO.DLS.OwnerHolder : object {
    protected WordDocument m_doc;
    private OwnerHolder m_owner;
    public WordDocument Document { get; }
    internal OwnerHolder OwnerBase { get; }
    public OwnerHolder(WordDocument doc);
    public OwnerHolder(WordDocument doc, OwnerHolder owner);
    public sealed virtual WordDocument get_Document();
    internal OwnerHolder get_OwnerBase();
    internal void SetOwner(OwnerHolder owner);
    internal void SetOwnerDoc(WordDocument doc);
    internal void SetOwner(WordDocument doc, OwnerHolder owner);
    internal virtual void OnStateChange(object sender);
    internal virtual void Close();
}
internal class Syncfusion.DocIO.DLS.Package : PartContainer {
    internal PartContainer FindPartContainer(string containerName);
    internal Part FindPart(string fullPartName);
    internal void Load(ZipArchive zipArc);
    private void LoadPart(ZipArchiveItem item);
    internal Package Clone();
    internal virtual void Close();
}
public class Syncfusion.DocIO.DLS.Paddings : FormatBase {
    public static int LeftKey;
    public static int TopKey;
    public static int BottomKey;
    public static int RightKey;
    public float Left { get; public set; }
    public float Top { get; public set; }
    public float Right { get; public set; }
    public float Bottom { get; public set; }
    unknown float All {public set; }
    internal bool IsEmpty { get; }
    internal Paddings(FormatBase parent, int baseKey);
    public float get_Left();
    public void set_Left(float value);
    public float get_Top();
    public void set_Top(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Bottom();
    public void set_Bottom(float value);
    public void set_All(float value);
    internal bool get_IsEmpty();
    internal void UpdatePaddings(Paddings padding);
    internal void ImportPaddings(Paddings basePaddings);
    internal bool Compare(Paddings paddings);
    internal Paddings Clone();
    protected virtual object GetDefValue(int key);
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void OnChange(FormatBase format, int propertyKey);
}
public enum Syncfusion.DocIO.DLS.PageAlignment : Enum {
    public int value__;
    public static PageAlignment Top;
    public static PageAlignment Middle;
    public static PageAlignment Justified;
    public static PageAlignment Bottom;
}
public enum Syncfusion.DocIO.DLS.PageNumberAlignment : Enum {
    public int value__;
    public static PageNumberAlignment Left;
    public static PageNumberAlignment Center;
    public static PageNumberAlignment Right;
    public static PageNumberAlignment Inside;
    public static PageNumberAlignment Outside;
}
public class Syncfusion.DocIO.DLS.PageNumbers : FormatBase {
    internal static int ChapterPageSeparatorKey;
    internal static int HeadingLevelForChapterKey;
    public ChapterPageSeparatorType ChapterPageSeparator { get; public set; }
    public HeadingLevel HeadingLevelForChapter { get; public set; }
    public ChapterPageSeparatorType get_ChapterPageSeparator();
    public void set_ChapterPageSeparator(ChapterPageSeparatorType value);
    public HeadingLevel get_HeadingLevelForChapter();
    public void set_HeadingLevelForChapter(HeadingLevel value);
    internal PageNumbers Clone();
    internal object GetPropertyValue(int propKey);
    internal bool Compare(PageNumbers pageNumbers);
    internal void SetPropertyValue(int propKey, object value);
    protected virtual object GetDefValue(int key);
}
public enum Syncfusion.DocIO.DLS.PageNumberStyle : Enum {
    public int value__;
    public static PageNumberStyle Arabic;
    public static PageNumberStyle RomanUpper;
    public static PageNumberStyle RomanLower;
    public static PageNumberStyle LetterUpper;
    public static PageNumberStyle LetterLower;
}
public enum Syncfusion.DocIO.DLS.PageOrientation : Enum {
    public int value__;
    public static PageOrientation Portrait;
    public static PageOrientation Landscape;
}
public class Syncfusion.DocIO.DLS.PageSize : object {
    public static SizeF A3;
    public static SizeF A4;
    public static SizeF A5;
    public static SizeF A6;
    public static SizeF B4;
    public static SizeF B5;
    public static SizeF B6;
    public static SizeF Letter;
    public static SizeF HalfLetter;
    public static SizeF Letter11x17;
    public static SizeF EnvelopeDL;
    public static SizeF Quarto;
    public static SizeF Statement;
    public static SizeF Ledger;
    public static SizeF Tabloid;
    public static SizeF Note;
    public static SizeF Legal;
    public static SizeF Flsa;
    public static SizeF Executive;
    private static PageSize();
}
public abstract class Syncfusion.DocIO.DLS.ParagraphItem : WidgetBase {
    private int m_startIndex;
    protected WCharacterFormat m_charFormat;
    private byte m_bFlags;
    private IOfficeMathRunElement m_ownerMathRunElement;
    internal int m_wcStartPos;
    internal bool SkipDocxItem { get; internal set; }
    internal bool IsMappedItem { get; internal set; }
    internal bool IsCloned { get; internal set; }
    public WParagraph OwnerParagraph { get; }
    public bool IsInsertRevision { get; }
    internal string AuthorName { get; }
    internal DateTime RevDateTime { get; }
    public bool IsDeleteRevision { get; }
    internal bool IsChangedCFormat { get; internal set; }
    internal int StartPos { get; internal set; }
    internal bool IsDetachedTextChanged { get; internal set; }
    internal int EndPos { get; }
    internal bool ItemDetached { get; }
    internal WCharacterFormat ParaItemCharFormat { get; }
    public IOfficeMathRunElement OwnerMathRunElement { get; public set; }
    internal bool IsMoveRevisionFirstItem { get; internal set; }
    internal bool IsMoveRevisionLastItem { get; internal set; }
    internal int WCStartPos { get; internal set; }
    internal int WCEndPos { get; }
    protected ParagraphItem(WordDocument doc);
    internal bool get_SkipDocxItem();
    internal void set_SkipDocxItem(bool value);
    internal bool get_IsMappedItem();
    internal void set_IsMappedItem(bool value);
    internal bool get_IsCloned();
    internal void set_IsCloned(bool value);
    public sealed virtual WParagraph get_OwnerParagraph();
    internal WMath GetBaseWMath(IOfficeMathRunElement OwnerMathRunElement);
    public void ApplyStyle(string styleName);
    internal void ApplyCharacterStyle(IWCharacterStyle style);
    internal WParagraph GetOwnerParagraphValue();
    public sealed virtual bool get_IsInsertRevision();
    internal string get_AuthorName();
    internal DateTime get_RevDateTime();
    internal void SetInsertRev(bool value, string authorName, DateTime dt);
    public sealed virtual bool get_IsDeleteRevision();
    internal void SetDeleteRev(bool value, string authorName, DateTime dt);
    internal bool get_IsChangedCFormat();
    internal void set_IsChangedCFormat(bool value);
    internal int get_StartPos();
    internal void set_StartPos(int value);
    internal bool get_IsDetachedTextChanged();
    internal void set_IsDetachedTextChanged(bool value);
    internal virtual int get_EndPos();
    internal bool get_ItemDetached();
    internal WCharacterFormat get_ParaItemCharFormat();
    public sealed virtual IOfficeMathRunElement get_OwnerMathRunElement();
    public sealed virtual void set_OwnerMathRunElement(IOfficeMathRunElement value);
    internal bool get_IsMoveRevisionFirstItem();
    internal void set_IsMoveRevisionFirstItem(bool value);
    internal bool get_IsMoveRevisionLastItem();
    internal void set_IsMoveRevisionLastItem(bool value);
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void Detach();
    internal void AcceptChanges();
    internal void RemoveChanges();
    internal bool HasTrackedChanges();
    internal WCharacterFormat GetCharFormat();
    internal void ApplyTableStyleFormatting(WParagraph source, WParagraph clonedParagraph);
    internal void SetParagraphItemCharacterFormat(WCharacterFormat charFormat);
    internal bool IsNotFieldShape();
    internal void UpdateParaItemRevision(ParagraphItem paraItem);
    private void CheckTrackChange(ParagraphItem item);
    internal virtual void Close();
    public sealed virtual IOfficeRun CloneRun();
    public sealed virtual void Dispose();
    protected virtual object CloneImpl();
    private void SetFirstAndLastItem(Revision revision, ParagraphItem item);
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal TextWrappingStyle GetTextWrappingStyle();
    internal bool IsWrappingBoundsAdded();
    internal void SetIsWrappingBoundsAdded(bool boolean);
    internal bool GetLayOutInCell();
    internal VerticalOrigin GetVerticalOrigin();
    internal ShapeVerticalAlignment GetShapeVerticalAlignment();
    internal ShapeHorizontalAlignment GetShapeHorizontalAlignment();
    internal HorizontalOrigin GetHorizontalOrigin();
    internal float GetHorizontalPosition();
    internal float GetVerticalPosition();
    internal bool GetAllowOverlap();
    internal void GetEffectExtentValues(Single& leftEdgeExtent, Single& rightEgeExtent, Single& topEdgeExtent, Single& bottomEdgeExtent);
    private float GetLeftMargin(WSection section);
    private float GetRightMargin(WSection section);
    private Entity GetBaseEntity(Entity entity);
    internal float GetWidthRelativeToPercent(bool isDocToPdf);
    internal float GetHeightRelativeToPercent(bool isDocToPdf);
    internal int GetWrapCollectionIndex();
    internal List`1<Path2D> Parse2007CustomShapePoints(string path);
    private List`1<Path2D> ParseVMLPath(string path, List`1<char> VMLCommands, List`1<char> VMLSeparators, List`1<char> VMLOperators);
    private void SkipWhiteSpaces(string path, Int32& index);
    private float GetPathPoint(string path, Int32& index, List`1<char> VMLOperators);
    private int GetNextIndexOfPathCommand(string path, int startIndex, List`1<char> VMLCommands);
    private bool IsValidVMLPath(string path, List`1<char> VMLCommands, List`1<char> VMLSeparators, List`1<char> VMLOperators);
    internal void UpdateVMLPathPoints(RectangleF bounds, string path, PointF coordinateOrgin, string coordinateSize, List`1<Path2D> vmlPoints, bool isUpdated);
    internal void ReUpdateVMLPathPoints(float xOffset, float yOffset, List`1<Path2D> vmlPoints);
    internal virtual int get_WCStartPos();
    internal virtual void set_WCStartPos(int value);
    internal virtual int get_WCEndPos();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.ParagraphItemCollection : EntityCollection {
    private static Type[] DEF_ELEMENT_TYPES;
    public ParagraphItem Item { get; }
    protected WParagraph OwnerParagraph { get; }
    protected Type[] TypesOfElement { get; }
    public ParagraphItemCollection(WordDocument doc);
    internal ParagraphItemCollection(WParagraph owner);
    internal ParagraphItemCollection(InlineContentControl owner);
    private static ParagraphItemCollection();
    public ParagraphItem get_Item(int index);
    protected WParagraph get_OwnerParagraph();
    protected virtual Type[] get_TypesOfElement();
    internal void MoveParaItems(ParagraphItemCollection desParaItems, bool isRemoveLastInlineCC);
    internal void CloneItemsTo(ParagraphItemCollection items);
    internal void UnsafeRemoveAt(int index);
    internal void UnsafeAdd(ParagraphItem item);
    protected virtual void OnInsertComplete(int index, Entity entity);
    protected virtual void OnRemove(int index);
    protected virtual void OnClear();
    internal virtual void Close();
    internal IWidget GetCurrentWidget(int index);
    internal void GetMinimumAndMaximumWordWidthInPara(Single& maximumWordWidthInPara, Single& minumWordWidthInPara);
    private float MeasureMinMaxWordWidth(Dictionary`2<WTextRange, int> spans, int index, int wordStartIndex, int textstartIndex, int lengthOfMatchedtext, int wordCount, string matchedText);
    private bool IsNeedToCalculateWordWidth(string text);
    private void UpdateMinMaxWordWidth(Single& minumWordWidthInPara, Single& maximumWordWidthInPara, float width);
    private int GetLengthTillDelimeter(MatchCollection matches, int i, string text, int startIndex);
}
public enum Syncfusion.DocIO.DLS.ParagraphItemType : Enum {
    public int value__;
    public static ParagraphItemType TextRange;
    public static ParagraphItemType Picture;
    public static ParagraphItemType Field;
    public static ParagraphItemType FieldMark;
    public static ParagraphItemType MergeField;
    public static ParagraphItemType FormField;
    public static ParagraphItemType CheckBox;
    public static ParagraphItemType TextFormField;
    public static ParagraphItemType DropDownFormField;
    public static ParagraphItemType SeqField;
    public static ParagraphItemType EmbedField;
    public static ParagraphItemType ControlField;
    public static ParagraphItemType BookmarkStart;
    public static ParagraphItemType BookmarkEnd;
    public static ParagraphItemType ShapeObject;
    public static ParagraphItemType InlineShapeObject;
    public static ParagraphItemType Comment;
    public static ParagraphItemType Footnote;
    public static ParagraphItemType TextBox;
    public static ParagraphItemType Break;
    public static ParagraphItemType Symbol;
    public static ParagraphItemType TOC;
    public static ParagraphItemType Chart;
    public static ParagraphItemType OleObject;
    public static ParagraphItemType InlineContentControl;
    public static ParagraphItemType Math;
}
internal class Syncfusion.DocIO.DLS.ParagraphProperties : object {
    public static string TextAlignment;
    public static string LeftIndent;
    public static string RightIndent;
    public static string FirstLineIndent;
    public static string BeforeSpacing;
    public static string AfterSpacing;
    public static string ListType;
}
internal class Syncfusion.DocIO.DLS.ParagraphPropertiesConverter : object {
    private static object m_threadLocker;
    private static ParagraphPropertiesConverter();
    internal static void ExportBorder(BorderCode srcBorder, Border destBorder);
    internal static void ExportBorder(SinglePropertyModifierArray sprms, SinglePropertyModifierRecord oldSprm, int newSprmOption, Border border, WParagraphFormat paragraphFormat);
    internal static void ExportBorder(SinglePropertyModifierRecord sprm, Border border, WParagraphFormat paragraphFormat);
    internal static void ExportBorder(Border source, Border destBorder);
    internal static void ImportBorder(BorderCode destBorder, Border srcBorder);
    internal static void ExportTabs(TabsInfo info, TabCollection tabs);
    internal static void SprmsToFormat(SinglePropertyModifierArray sprms, WParagraphFormat paragraphFormat, Dictionary`2<int, string> authorNames, WordStyleSheet styleSheet);
    internal static void UpdateDirectParagraphFormatting(WParagraphFormat paragraphFormat, SinglePropertyModifierArray sprms);
    internal static void CopyBorders(Borders borders, WParagraphFormat paragraphFormat);
    internal static void FormatToSprms(WParagraphFormat paragraphFormat, SinglePropertyModifierArray sprms, WordStyleSheet styleSheet);
    internal static void FormatToSprms(int propKey, object value, SinglePropertyModifierArray sprms, WParagraphFormat paragraphFormat, WordStyleSheet styleSheet, Dictionary`2<int, object> propertyHash);
    private static void ImportTabs(TabCollection tabCollection, SinglePropertyModifierArray sprms);
    private static void ImportShading(Dictionary`2<int, object> propertyHash, SinglePropertyModifierArray sprms);
    private static void ImportBorders(Borders borders, SinglePropertyModifierArray sprms);
    private static void SetBorderSprms(int oldSprmOPtion, int newSprmOption, SinglePropertyModifierArray sprms, BorderCode brc);
}
internal class Syncfusion.DocIO.DLS.Part : object {
    protected Stream m_dataStream;
    protected string m_name;
    internal Stream DataStream { get; }
    internal string Name { get; internal set; }
    public Part(Stream dataStream);
    internal Stream get_DataStream();
    internal string get_Name();
    internal void set_Name(string value);
    internal Part Clone();
    internal void SetDataStream(Stream stream);
    internal void Close();
    internal XAttribute GetXMLAttribute(string attributeName);
}
internal class Syncfusion.DocIO.DLS.PartContainer : object {
    protected string m_name;
    protected Dictionary`2<string, Part> m_xmlParts;
    protected Dictionary`2<string, PartContainer> m_xmlPartContainers;
    protected Dictionary`2<string, Relations> m_relations;
    internal Dictionary`2<string, Part> XmlParts { get; }
    internal Dictionary`2<string, PartContainer> XmlPartContainers { get; }
    internal Dictionary`2<string, Relations> Relations { get; }
    internal string Name { get; internal set; }
    internal Dictionary`2<string, Part> get_XmlParts();
    internal Dictionary`2<string, PartContainer> get_XmlPartContainers();
    internal Dictionary`2<string, Relations> get_Relations();
    internal string get_Name();
    internal void set_Name(string value);
    internal void AddPart(ZipArchiveItem item);
    internal void AddPart(Part xmlPart);
    internal void AddPartContainer(PartContainer container);
    internal PartContainer EnsurePartContainer(String[] nameParts, int startNameIndex);
    internal void LoadRelations(ZipArchiveItem item);
    private string GetPartName(string fullPath);
    internal PartContainer Clone();
    internal string CopyXmlPartContainer(PartContainer newContainer, Package srcPackage, String[] parts, int index);
    internal string CopyXmlPartItems(PartContainer newContainer, Package srcPackage, string partName);
    internal string GetXmlPartRelationKey(string partName);
    private void UpdateInnerRelationTarget(Relations relation, Dictionary`2<string, string> innerRelationTarget);
    private Dictionary`2<string, string> CopyInnerRelatedXmlParts(PartContainer newContainer, Package srcPackage, Relations relation, string curPartName);
    internal PartContainer GetXmlPartContainer(PartContainer srcContainer, string target);
    internal string GetXmlPartContainerPath(PartContainer container, string target);
    private string GetParentPartPath(PartContainer srcContainer);
    internal virtual void Close();
}
internal class Syncfusion.DocIO.DLS.Path2D : object {
    private string m_pathCommandType;
    private List`1<PointF> m_pathPoints;
    private double m_width;
    private double m_height;
    private bool m_isStroke;
    private List`1<string> m_pathElementList;
    internal string PathCommandType { get; }
    internal List`1<PointF> PathPoints { get; }
    internal List`1<string> PathElements { get; }
    internal double Width { get; internal set; }
    internal double Height { get; internal set; }
    internal bool IsStroke { get; internal set; }
    internal Path2D(string pathCommandType, List`1<PointF> pathPoints);
    internal string get_PathCommandType();
    internal List`1<PointF> get_PathPoints();
    internal List`1<string> get_PathElements();
    internal double get_Width();
    internal void set_Width(double value);
    internal double get_Height();
    internal void set_Height(double value);
    internal bool get_IsStroke();
    internal void set_IsStroke(bool value);
    internal Path2D Clone();
    internal void Close();
    internal bool Compare(Path2D path2D);
    internal StringBuilder GetAsString();
}
internal class Syncfusion.DocIO.DLS.PathGradient : object {
    private GradientShadeType m_pathShade;
    private short m_bottomOffset;
    private short m_leftOffset;
    private short m_rightOffset;
    private short m_topOffset;
    internal GradientShadeType PathShade { get; internal set; }
    internal short BottomOffset { get; internal set; }
    internal short LeftOffset { get; internal set; }
    internal short RightOffset { get; internal set; }
    internal short TopOffset { get; internal set; }
    internal GradientShadeType get_PathShade();
    internal void set_PathShade(GradientShadeType value);
    internal short get_BottomOffset();
    internal void set_BottomOffset(short value);
    internal short get_LeftOffset();
    internal void set_LeftOffset(short value);
    internal short get_RightOffset();
    internal void set_RightOffset(short value);
    internal short get_TopOffset();
    internal void set_TopOffset(short value);
    internal PathGradient Clone();
    internal bool Compare(PathGradient pathGradient);
    internal StringBuilder GetAsString();
}
public enum Syncfusion.DocIO.DLS.PatternType : Enum {
    public int value__;
    public static PatternType Pattern10Percent;
    public static PatternType Pattern20Percent;
    public static PatternType Pattern25Percent;
    public static PatternType Pattern30Percent;
    public static PatternType Pattern40Percent;
    public static PatternType Pattern50Percent;
    public static PatternType Pattern5Percent;
    public static PatternType Pattern60Percent;
    public static PatternType Pattern70Percent;
    public static PatternType Pattern75Percent;
    public static PatternType Pattern80Percent;
    public static PatternType Pattern90Percent;
    public static PatternType Cross;
    public static PatternType DarkDownwardDiagonal;
    public static PatternType DarkHorizontal;
    public static PatternType DarkUpwardDiagonal;
    public static PatternType DarkVertical;
    public static PatternType DashedDownwardDiagonal;
    public static PatternType DashedHorizontal;
    public static PatternType DashedUpwardDiagonal;
    public static PatternType DashedVertical;
    public static PatternType DiagonalBrick;
    public static PatternType DiagonalCross;
    public static PatternType Divot;
    public static PatternType DottedDiamond;
    public static PatternType DottedGrid;
    public static PatternType DownwardDiagonal;
    public static PatternType Horizontal;
    public static PatternType HorizontalBrick;
    public static PatternType LargeCheckerBoard;
    public static PatternType LargeConfetti;
    public static PatternType LargeGrid;
    public static PatternType LightDownwardDiagonal;
    public static PatternType LightHorizontal;
    public static PatternType LightUpwardDiagonal;
    public static PatternType LightVertical;
    public static PatternType Mixed;
    public static PatternType NarrowHorizontal;
    public static PatternType NarrowVertical;
    public static PatternType OutlinedDiamond;
    public static PatternType Plaid;
    public static PatternType Shingle;
    public static PatternType SmallCheckerBoard;
    public static PatternType SmallConfetti;
    public static PatternType SmallGrid;
    public static PatternType SolidDiamond;
    public static PatternType Sphere;
    public static PatternType Trellis;
    public static PatternType UpwardDiagonal;
    public static PatternType Vertical;
    public static PatternType Wave;
    public static PatternType Weave;
    public static PatternType WideDownwardDiagonal;
    public static PatternType WideUpwardDiagonal;
    public static PatternType ZigZag;
}
public enum Syncfusion.DocIO.DLS.PictureColor : Enum {
    public int value__;
    public static PictureColor Automatic;
    public static PictureColor Grayscale;
    public static PictureColor BlackAndWhite;
    public static PictureColor Washout;
}
public class Syncfusion.DocIO.DLS.PictureWatermark : Watermark {
    private WPicture m_picture;
    private ImageRecord m_imageRecord;
    private byte m_bFlags;
    private int m_originalPib;
    public float Scaling { get; public set; }
    public bool Washout { get; public set; }
    internal Image Picture { get; internal set; }
    internal WPicture WordPicture { get; internal set; }
    internal int OriginalPib { get; internal set; }
    internal PictureWatermark(Image image, bool washout);
    internal PictureWatermark(WordDocument doc);
    public float get_Scaling();
    public void set_Scaling(float value);
    public bool get_Washout();
    public void set_Washout(bool value);
    internal Image get_Picture();
    internal void set_Picture(Image value);
    internal WPicture get_WordPicture();
    internal void set_WordPicture(WPicture value);
    internal int get_OriginalPib();
    internal void set_OriginalPib(int value);
    public void LoadPicture(Byte[] bytes);
    internal virtual void Close();
    internal void UpdateImage();
    private Image GetImage(Byte[] imageBytes);
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual object CloneImpl();
}
public class Syncfusion.DocIO.DLS.PointsConverter : object {
    public static float FromCm(float centimeter);
    public static float FromInch(float inch);
    public static float FromPixel(float px);
}
internal class Syncfusion.DocIO.DLS.PreferredWidthInfo : object {
    private int m_widthTypeKey;
    private FormatBase m_ownerFormat;
    internal float Width { get; internal set; }
    internal FtsWidth WidthType { get; internal set; }
    internal PreferredWidthInfo(FormatBase ownerFormat, int key);
    internal float get_Width();
    internal void set_Width(float value);
    internal FtsWidth get_WidthType();
    internal void set_WidthType(FtsWidth value);
    internal void Close();
    internal bool Compare(PreferredWidthInfo preferredWidth);
}
internal enum Syncfusion.DocIO.DLS.PrepareTableState : Enum {
    public int value__;
    public static PrepareTableState NoChange;
    public static PrepareTableState EnterTable;
    public static PrepareTableState LeaveTable;
}
public enum Syncfusion.DocIO.DLS.PrinterPaperTray : Enum {
    public int value__;
    public static PrinterPaperTray DefaultBin;
    public static PrinterPaperTray OnlyBin;
    public static PrinterPaperTray LowerBin;
    public static PrinterPaperTray MiddleBin;
    public static PrinterPaperTray ManualFeed;
    public static PrinterPaperTray EnvelopeFeed;
    public static PrinterPaperTray ManualEnvelopeFeed;
    public static PrinterPaperTray AutomaticSheetFeed;
    public static PrinterPaperTray TractorFeed;
    public static PrinterPaperTray SmallFormatBin;
    public static PrinterPaperTray LargeFormatBin;
    public static PrinterPaperTray LargeCapacityBin;
    public static PrinterPaperTray PaperCassette;
    public static PrinterPaperTray FormSource;
}
internal class Syncfusion.DocIO.DLS.PseudoMergeField : object {
    private bool m_fitMailMerge;
    private string m_name;
    private string m_value;
    internal string Name { get; }
    internal string Value { get; internal set; }
    internal bool FitMailMerge { get; }
    internal PseudoMergeField(string fieldText);
    internal string get_Name();
    internal string get_Value();
    internal void set_Value(string value);
    internal bool get_FitMailMerge();
}
internal class Syncfusion.DocIO.DLS.Range : CollectionImpl {
    internal IList Items { get; }
    internal Range(WordDocument doc, OwnerHolder owner);
    internal IList get_Items();
    internal void CloneItemsTo(Range range);
    internal bool ContainTextBodyItems();
    internal int GetLastParagraphItemIndex();
}
internal class Syncfusion.DocIO.DLS.Relations : Part {
    public Relations(ZipArchiveItem item);
    internal Relations(Stream dataStream, string name);
    internal Part Clone();
    internal void Close();
}
internal class Syncfusion.DocIO.DLS.Rendering.DocumentLayouter : object {
    private PageCollection m_pages;
    private Page m_currPage;
    private IWidgetContainer m_docWidget;
    private IWSection m_currSection;
    private IWSection m_prevSection;
    private HeaderFooterLPHandler m_headerLPHandler;
    private HeaderFooterLPHandler m_footerLPHandler;
    private int m_columnIndex;
    private float m_columnsWidth;
    private int m_nextPageIndex;
    private bool m_bFirstPageForSection;
    private byte m_bFlag;
    private byte m_bitFlag;
    private bool m_preserveFormFields;
    private bool m_bisNeedToRestartFootnote;
    private bool m_bisNeedToRestartEndnote;
    private bool m_bDirty;
    private float m_totalColumnWidth;
    private WordToPDFResult m_pageResult;
    internal int m_footnoteCount;
    private int m_endnoteCount;
    private float m_usedHeight;
    private float m_clientHeight;
    private float m_totalHeight;
    private float m_sectionFixedHeight;
    private float m_pageTop;
    private int m_sectionIndex;
    private int m_sectionPagesCount;
    private int lineHeigthCount;
    private float m_firstParaHeight;
    private float m_footnoteHeight;
    private bool m_isFirstPage;
    private bool m_sectionNewPage;
    private bool m_createNewPage;
    private bool m_isContinuousSectionLayouted;
    private List`1<float> m_lineHeights;
    private List`1<float> m_columnHeight;
    private List`1<bool> m_columnHasBreakItem;
    private List`1<float> m_prevColumnsWidth;
    private List`1<FloatingItem> m_prevFloatingItems;
    private List`1<float> m_absolutePositionedTableHeights;
    private Dictionary`2<int, List`1<string>> m_tocLevels;
    private List`1<ParagraphItem> m_tocParaItems;
    private Dictionary`2<Entity, int> m_tocEntryPageNumbers;
    private Dictionary`2<Entity, int> m_bkStartPageNumbers;
    private Dictionary`2<string, bool> m_headerFooterNeedsRelayout;
    private bool m_useTCFields;
    private Entity m_lastTocEntity;
    [ThreadStaticAttribute]
internal static bool m_UpdatingPageFields;
    internal bool m_isNeedtoAdjustFooter;
    internal List`1<FloatingItem> m_FloatingItems;
    private List`1<FloatingItem> m_WrapFloatingItems;
    internal WParagraph m_dynamicParagraph;
    internal WTable m_dynamicTable;
    internal List`1<Entity> m_notFittedfloatingItems;
    internal LayoutedWidget m_maintainltWidget;
    internal Int32[] m_interSectingPoint;
    internal IWidgetContainer m_pageEndWidget;
    internal ExportBookmarkType m_exportBookmarkType;
    private List`1<LayoutedWidget> m_editableFormFieldinEMF;
    private Int32[] m_sectionNumPages;
    private float m_removedWidgetsHeight;
    internal List`1<WParagraph> m_hiddenParaCollection;
    [ThreadStaticAttribute]
private static byte m_bFlags;
    [ThreadStaticAttribute]
internal static DrawingContext m_dc;
    [ThreadStaticAttribute]
internal static int PageNumber;
    [ThreadStaticAttribute]
private static List`1<Dictionary`2<string, BookmarkHyperlink>> m_bookmarkHyperlinks;
    [ThreadStaticAttribute]
private static List`1<BookmarkPosition> m_bookmarks;
    [ThreadStaticAttribute]
private static List`1<EquationField> m_equationFields;
    [ThreadStaticAttribute]
internal static int m_footnoteIDRestartEachPage;
    [ThreadStaticAttribute]
internal static int m_endnoteIDRestartEachPage;
    [ThreadStaticAttribute]
private static bool m_isPageEnd;
    [ThreadStaticAttribute]
private static bool m_isEndUpdateTOC;
    [ThreadStaticAttribute]
internal static int m_footnoteIDRestartEachSection;
    [ThreadStaticAttribute]
internal static int m_footnoteId;
    [ThreadStaticAttribute]
internal static int m_endnoteId;
    internal static DrawingContext DrawingContext { get; }
    internal static bool IsFirstLayouting { get; internal set; }
    internal static bool IsUpdatingTOC { get; internal set; }
    internal static bool IsLayoutingHeaderFooter { get; internal set; }
    internal static bool IsEndPage { get; internal set; }
    internal static List`1<Dictionary`2<string, BookmarkHyperlink>> BookmarkHyperlinks { get; }
    internal static List`1<BookmarkPosition> Bookmarks { get; }
    internal bool IsForceFitLayout { get; internal set; }
    public bool PreserveFormField { get; public set; }
    internal bool PreserveOleEquationAsBitmap { get; internal set; }
    internal List`1<LayoutedWidget> EditableFormFieldinEMF { get; internal set; }
    public PageCollection Pages { get; }
    internal Entity LastTocEntity { get; internal set; }
    internal static bool IsEndUpdateTOC { get; internal set; }
    internal ExportBookmarkType ExportBookmarks { get; internal set; }
    internal Page CurrentPage { get; }
    internal IWSection CurrentSection { get; }
    protected Column CurrentColumn { get; }
    public WordToPDFResult PageResult { get; }
    protected bool IsEvenPage { get; }
    internal bool EnablePdfConformanceLevel { get; internal set; }
    internal float RemovedWidgetsHeight { get; internal set; }
    internal List`1<ParagraphItem> tocParaItems { get; internal set; }
    internal List`1<FloatingItem> FloatingItems { get; internal set; }
    internal List`1<FloatingItem> WrapFloatingItems { get; }
    internal static List`1<EquationField> EquationFields { get; }
    internal LayoutedWidget MaintainltWidget { get; internal set; }
    internal Int32[] InterSectingPoint { get; internal set; }
    unknown bool IsCreateNewPage {internal set; }
    internal Dictionary`2<Entity, int> TOCEntryPageNumbers { get; }
    internal Dictionary`2<Entity, int> BookmarkStartPageNumbers { get; }
    internal Dictionary`2<string, bool> HeaderFooterNeedsRelayout { get; }
    internal Int32[] SectionNumPages { get; }
    internal bool UseTCFields { get; internal set; }
    private static DocumentLayouter();
    internal static DrawingContext get_DrawingContext();
    internal static bool get_IsFirstLayouting();
    internal static void set_IsFirstLayouting(bool value);
    internal static bool get_IsUpdatingTOC();
    internal static void set_IsUpdatingTOC(bool value);
    internal static bool get_IsLayoutingHeaderFooter();
    internal static void set_IsLayoutingHeaderFooter(bool value);
    internal static bool get_IsEndPage();
    internal static void set_IsEndPage(bool value);
    internal static List`1<Dictionary`2<string, BookmarkHyperlink>> get_BookmarkHyperlinks();
    internal static List`1<BookmarkPosition> get_Bookmarks();
    internal bool get_IsForceFitLayout();
    internal void set_IsForceFitLayout(bool value);
    public bool get_PreserveFormField();
    public void set_PreserveFormField(bool value);
    internal bool get_PreserveOleEquationAsBitmap();
    internal void set_PreserveOleEquationAsBitmap(bool value);
    internal List`1<LayoutedWidget> get_EditableFormFieldinEMF();
    internal void set_EditableFormFieldinEMF(List`1<LayoutedWidget> value);
    public PageCollection get_Pages();
    internal Entity get_LastTocEntity();
    internal void set_LastTocEntity(Entity value);
    internal static bool get_IsEndUpdateTOC();
    internal static void set_IsEndUpdateTOC(bool value);
    internal ExportBookmarkType get_ExportBookmarks();
    internal void set_ExportBookmarks(ExportBookmarkType value);
    internal Page get_CurrentPage();
    internal IWSection get_CurrentSection();
    protected Column get_CurrentColumn();
    public WordToPDFResult get_PageResult();
    protected bool get_IsEvenPage();
    internal bool get_EnablePdfConformanceLevel();
    internal void set_EnablePdfConformanceLevel(bool value);
    internal float get_RemovedWidgetsHeight();
    internal void set_RemovedWidgetsHeight(float value);
    internal List`1<ParagraphItem> get_tocParaItems();
    internal void set_tocParaItems(List`1<ParagraphItem> value);
    internal List`1<FloatingItem> get_FloatingItems();
    internal void set_FloatingItems(List`1<FloatingItem> value);
    internal List`1<FloatingItem> get_WrapFloatingItems();
    internal static List`1<EquationField> get_EquationFields();
    internal LayoutedWidget get_MaintainltWidget();
    internal void set_MaintainltWidget(LayoutedWidget value);
    internal Int32[] get_InterSectingPoint();
    internal void set_InterSectingPoint(Int32[] value);
    internal void set_IsCreateNewPage(bool value);
    internal Dictionary`2<Entity, int> get_TOCEntryPageNumbers();
    internal Dictionary`2<Entity, int> get_BookmarkStartPageNumbers();
    internal Dictionary`2<string, bool> get_HeaderFooterNeedsRelayout();
    internal Int32[] get_SectionNumPages();
    internal bool get_UseTCFields();
    internal void set_UseTCFields(bool value);
    public PageCollection Layout(IWordDocument doc);
    internal void ResetTheLayoutedFootnotes(LayoutedWidgetList footnoteWidgets, LayoutedWidgetList endnoteWidgets);
    private void AddLineNumbers(IWordDocument doc);
    private void LayoutLineNumber(LayoutedWidget ltLineWidget, WPageSetup pageSetup, int lineNumber, float xPosition);
    private void UpdateXPositionBasedOnFloatingItem(LayoutedWidget ltLineWidget, Single& xPosition);
    private float GetFirstInlineItemXPosition(LayoutedWidget lineWidget);
    private float GetAscentOfText(LayoutedWidget paraLtWidget, Double& topLineSpace);
    private WPageSetup UpdateSectionPageSetup(IWidget widget);
    private void IntializeGraphics();
    private WCharacterFormat GetNumberingFormat(WordDocument doc);
    public void InitLayoutInfo();
    public void Close();
    internal Stream[] DrawToImage(int startPageIndex, int noOfPages, ExportImageFormat imageType);
    internal ImageFormat GetImageFormat(ExportImageFormat imageFormat);
    internal IImage CreateImage(WPageSetup pageSetup);
    private bool LayoutPages();
    internal Byte[] ConvertAsImage(IWidget widget);
    private Byte[] DrawAsImage(IWidget widget, LayoutedWidget ltWidget);
    private Byte[] ConvertToByteArray(IImage image);
    private IImage CreateImage(float pageWidth, float pageHeight);
    private void CreateNewPage(IWidgetContainer& curWidget);
    private void RecreateLayoutInfo();
    private void ResetFloatingItemsProperties();
    private void ResetNotAddedFloatingEntityProperty();
    private void CreateNewSection();
    private bool CheckSectionBreak(bool isFromDynmicLayout, IWidgetContainer curWidget);
    private bool IsLastTableHasKeepWithNext();
    private bool IsTableHasKeepWithNext(LayoutedWidget ltWidget);
    private void HandlePageBreak();
    private void LayoutHeaderFooter();
    private bool IsNeedToRelayoutHeaderFooter();
    internal float GetWord2013HeaderFooterHeight();
    internal string GetHeaderFooterType(IWidget widget);
    private void ShiftItemsForVerticalAlignment();
    internal WTextBody GetCurrentHeader(IWSection section);
    private WTextBody GetCurrentFooter();
    private WTextBody GetHeaderFooter(IWSection section, HeaderFooter headerFooter);
    private void OnNextSection();
    internal Dictionary`2<Entity, int> GetTOCEntryPageNumbers(WordDocument doc);
    private WParagraph GetLastLtParagraph();
    internal void UpdatePageFields(WordDocument doc, bool isUpdateFromWordToPDF);
    private WParagraph IsTOCParagraph(IWidget widget);
    private void Layouter_LeafLayoutAfter(object sender, LayoutedWidget ltWidget, bool isFromTOCLinkStyle);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutProcessHandler.GetNextArea(RectangleF& area, Int32& columnIndex, Boolean& isContinuousSection, bool isSplittedWidget, Single& topMargin, bool isFromDynmicLayout, IWidgetContainer& curWidget);
    private void HandleDynamicRelayouting(bool isFromDynmicLayout);
    private float GetIntersectingHeight(LayoutedWidget layoutedSectionWidget, LayoutedWidget intersectingItem, bool isItemIntersected);
    private bool IsIntersectedItem(LayoutedWidget intersectingItem, LayoutedWidget layoutedFloatingItem);
    private RectangleF GetSectionClientArea(bool isSplittedWidget, IWidgetContainer curWidget);
    private bool IsFirstInlineTextWrappingStyleItem(WParagraph paragraph);
    private bool IsFirstItemBreakItems(WParagraph paragraph);
    private RectangleF GetColumnClientArea(bool isSplittedWidget);
    private void ClearFields();
    private float GetRequiredHeightForContinuousSection();
    private float GetFloatingItemHeight(List`1<FloatingItem> floatingItems);
    private float GetRequiredHeightForUnEqualColumns();
    private float GetFirstLineHeight();
    private bool IsEqualColumnWidth();
    private bool CheckNextSectionBreakType(bool isContinuousSection);
    private sealed virtual override void Syncfusion.Layouting.ILayoutProcessHandler.PushLayoutedWidget(LayoutedWidget ltWidget, RectangleF layoutArea, bool isNeedToRestartFootnote, bool isNeedToRestartEndnote, LayoutState state, bool isNeedToFindInterSectingPoint, bool isContinuousSection);
    private void FindIntersectPointAndRemovltWidget(LayoutedWidget ltwidget);
    private bool IsFloatingTextBodyItem(IWidget widget);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutProcessHandler.HandleSplittedWidget(SplitWidgetContainer stWidgetContainer, LayoutState state, LayoutedWidget ltWidget, Boolean& isLayoutedWidgetNeedToPushed);
    private bool IsContinueLayoutingNextSection(IWSection nextSection, LayoutedWidget ltWidget, bool isLayoutedWidgetNeedToPushed);
    private bool HandleColumnAndPageBreakInLayoutedWidget(LayoutedWidget ltWidget, bool isLayoutedWidgetNeedToPushed, bool isContinueNextSection);
    private void UpdateSectionHeight(bool isLastcolumOfCurrentPage);
    private sealed virtual override void Syncfusion.Layouting.ILayoutProcessHandler.HandleLayoutedWidget(LayoutedWidget ltWidget);
    private void GetLinesHeight(LayoutedWidget ltWidget);
    private int GetColumnIndexForMinColumnWidth();
    private int GetColumnIndexForMaxColumnWidth();
    internal bool HeaderGetNextArea(RectangleF& area);
    internal void HeaderPushLayoutedWidget(LayoutedWidget ltWidget);
    internal void FootnotePushLayoutedWidget(RectangleF layoutArea);
    internal void EndnotePushLayoutedWidget(RectangleF layoutArea, LayoutedWidget ltWidget);
    internal bool FooterGetNextArea(RectangleF& area);
    internal void FooterPushLayoutedWidget(LayoutedWidget ltWidget);
}
internal interface Syncfusion.DocIO.DLS.Rendering.IRendererBaseHelper {
    public abstract virtual Font GetFallbackFont(Font font, string text, FontScriptType scriptType, WCharacterFormat charFormat, List`1<FallbackFont> fallbackFonts, Dictionary`2<string, Stream> fontStreams);
}
internal class Syncfusion.DocIO.DLS.Rendering.Page : object {
    private LayoutedWidgetList m_pageWidgets;
    private LayoutedWidgetList m_footnoteWidgets;
    private LayoutedWidgetList m_lineNumberWidgets;
    private LayoutedWidgetList m_endnoteWidgets;
    private List`1<TrackChangesMarkups> m_trackChangesMarkups;
    private List`1<int> m_endNotesectionIndex;
    private List`1<int> m_footNotesectionIndex;
    private WPageSetup m_pageSetup;
    private WHeadersFooters m_headersFooters;
    private IWSection m_docSection;
    private int m_iNumber;
    private Byte[] m_backgroundImage;
    private Color m_backgroundColor;
    private List`1<IWField> m_cachedFields;
    private LayoutedWidgetList m_behindWidgets;
    private int m_numberOfBehindShapeWidgetsInHeader;
    private int m_numberOfBehindShapeWidgetsInFooter;
    public LayoutedWidgetList PageWidgets { get; }
    internal IWSection DocSection { get; }
    internal Byte[] BackgroundImage { get; }
    internal Color BackgroundColor { get; }
    internal LayoutedWidgetList FootnoteWidgets { get; }
    internal LayoutedWidgetList LineNumberWidgets { get; }
    internal LayoutedWidgetList EndnoteWidgets { get; }
    internal List`1<TrackChangesMarkups> TrackChangesMarkups { get; internal set; }
    internal LayoutedWidgetList BehindWidgets { get; }
    internal List`1<int> EndNoteSectionIndex { get; }
    internal List`1<int> FootNoteSectionIndex { get; }
    public WPageSetup Setup { get; }
    public int Number { get; public set; }
    internal int NumberOfBehindWidgetsInHeader { get; internal set; }
    internal int NumberOfBehindWidgetsInFooter { get; internal set; }
    internal bool SwapMargins { get; }
    public Page(IWSection section, int iNumber);
    public LayoutedWidgetList get_PageWidgets();
    internal IWSection get_DocSection();
    internal Byte[] get_BackgroundImage();
    internal Color get_BackgroundColor();
    internal LayoutedWidgetList get_FootnoteWidgets();
    internal LayoutedWidgetList get_LineNumberWidgets();
    internal LayoutedWidgetList get_EndnoteWidgets();
    internal List`1<TrackChangesMarkups> get_TrackChangesMarkups();
    internal void set_TrackChangesMarkups(List`1<TrackChangesMarkups> value);
    internal LayoutedWidgetList get_BehindWidgets();
    internal List`1<int> get_EndNoteSectionIndex();
    internal List`1<int> get_FootNoteSectionIndex();
    public WPageSetup get_Setup();
    public int get_Number();
    public void set_Number(int value);
    internal int get_NumberOfBehindWidgetsInHeader();
    internal void set_NumberOfBehindWidgetsInHeader(int value);
    internal int get_NumberOfBehindWidgetsInFooter();
    internal void set_NumberOfBehindWidgetsInFooter(int value);
    internal bool get_SwapMargins();
    public void InitLayoutInfo();
    public void UpdateFieldsNumPages(int numPages);
    public void AddCachedFields(IWField field);
    protected internal RectangleF GetHeaderArea();
    protected internal RectangleF GetFooterArea();
    private void UpdateGutterValue(Single& margin, Column column);
    private void UpdateMirrorMargins(Single& leftMargin, Single& rightMargin);
    protected internal RectangleF GetColumnArea(Column column, float prevWidth, bool isNeedtoAdjustFooter);
    protected internal RectangleF GetColumnArea(int columnIndex, Single& prevColumnsWidth, bool isNeedtoAdjustFooter);
    protected internal RectangleF GetSectionArea(Column column, float prevWidth);
    protected internal RectangleF GetSectionArea(int columnIndex, Single& prevColumnsWidth, bool isNextSection, bool isSplittedWidget);
}
internal class Syncfusion.DocIO.DLS.Rendering.PageCollection : List`1<Page> {
}
internal class Syncfusion.DocIO.DLS.Rendering.PageResult : object {
    private Image m_image;
    private List`1<Dictionary`2<string, RectangleF>> m_hyperLinks;
    private List`1<Dictionary`2<string, BookmarkHyperlink>> m_bookmarkHyperlinks;
    public Image PageImage { get; public set; }
    public List`1<Dictionary`2<string, RectangleF>> Hyperlinks { get; public set; }
    public List`1<Dictionary`2<string, BookmarkHyperlink>> BookmarkHyperlinks { get; public set; }
    public PageResult(Image image, List`1<Dictionary`2<string, RectangleF>> hyperlinks, List`1<Dictionary`2<string, BookmarkHyperlink>> bookmarkHyperlinks);
    public Image get_PageImage();
    public void set_PageImage(Image value);
    public List`1<Dictionary`2<string, RectangleF>> get_Hyperlinks();
    public void set_Hyperlinks(List`1<Dictionary`2<string, RectangleF>> value);
    public List`1<Dictionary`2<string, BookmarkHyperlink>> get_BookmarkHyperlinks();
    public void set_BookmarkHyperlinks(List`1<Dictionary`2<string, BookmarkHyperlink>> value);
}
internal class Syncfusion.DocIO.DLS.Rendering.WordToPDFResult : object {
    private List`1<PageResult> m_pages;
    public List`1<PageResult> Pages { get; }
    public List`1<PageResult> get_Pages();
}
internal enum Syncfusion.DocIO.DLS.RevisedTextEffect : Enum {
    public int value__;
    public static RevisedTextEffect None;
    public static RevisedTextEffect Bold;
    public static RevisedTextEffect Italic;
    public static RevisedTextEffect Underline;
    public static RevisedTextEffect StrikeThrough;
}
public class Syncfusion.DocIO.DLS.Revision : object {
    private string m_author;
    private string m_name;
    private DateTime m_date;
    private Range m_range;
    private RevisionType m_revisionType;
    private RevisionCollection m_childRevisions;
    private object m_ownerBase;
    private WordDocument m_doc;
    private byte m_bFlags;
    public string Author { get; internal set; }
    public DateTime Date { get; internal set; }
    internal Range Range { get; }
    public RevisionType RevisionType { get; internal set; }
    internal string Name { get; internal set; }
    internal RevisionCollection ChildRevisions { get; }
    internal object Owner { get; internal set; }
    internal bool IsAfterParagraphMark { get; internal set; }
    internal bool IsAfterCellMark { get; internal set; }
    internal bool IsAfterRowMark { get; internal set; }
    internal bool IsAfterTableMark { get; internal set; }
    internal Revision(WordDocument doc);
    public string get_Author();
    internal void set_Author(string value);
    public DateTime get_Date();
    internal void set_Date(DateTime value);
    internal Range get_Range();
    public RevisionType get_RevisionType();
    internal void set_RevisionType(RevisionType value);
    internal string get_Name();
    internal void set_Name(string value);
    internal RevisionCollection get_ChildRevisions();
    internal object get_Owner();
    internal void set_Owner(object value);
    internal bool get_IsAfterParagraphMark();
    internal void set_IsAfterParagraphMark(bool value);
    internal bool get_IsAfterCellMark();
    internal void set_IsAfterCellMark(bool value);
    internal bool get_IsAfterRowMark();
    internal void set_IsAfterRowMark(bool value);
    internal bool get_IsAfterTableMark();
    internal void set_IsAfterTableMark(bool value);
    public void Accept();
    private void ClearDependentRevision(bool isFromAccept);
    private Revision GetDependentName();
    private void UnlinkRangeItem(Entity entity, Revision revision, bool isFromAccept);
    private void RemoveItemFromCollectionn(Revision revision, Entity entity, bool isFromAccept);
    private void RemoveItemFromCollectionn(Revision revision, FormatBase formatBase, bool isFromAccept);
    private void MakeChanges(Revision revision, ParagraphItem item, bool acceptChanges);
    private void MakeChanges(FormatBase format, bool acceptChanges);
    private void MakeChanges(WSectionFormat sectionFormat, bool acceptChanges);
    private void MakeChangesInPropertiesHash(FormatBase formatBase, bool acceptChanges, Dictionary`2<int, object> oldFormatBase);
    private void MakeChanges(WCharacterFormat format, bool acceptChanges);
    private void MakeChangesForBreakCharFormat(TextBodyItem item, bool acceptChanges);
    private void MakeChanges(WParagraphFormat format, bool acceptChanges);
    private void MakeChanges(WTable table, bool acceptChanges);
    private void MakeChanges(WTableRow row, bool acceptChanges);
    private void MakeChanges(WTableCell cell, bool acceptChanges);
    private bool RemoveChangedItem(TextBodyItem item, bool acceptChanges);
    private bool IsToRemove(Revision revision, bool acceptChanges);
    private void MoveToNextSection(WSection currSection);
    private bool CheckMoveToNext(TextBodyItem item, bool acceptChanges);
    private bool MoveToNextPara(TextBodyItem item);
    private void RemoveChangedFormat(TextBodyItem item);
    private void UnlinkRangeItem(FormatBase formatBase, Revision revision, bool isFromAccept);
    private void OnClearComplete(Revision revision, object item, bool isFromAccept);
    public void Reject();
    internal void RemoveSelf();
    internal Revision Clone();
    internal void Close();
}
[FlagsAttribute]
internal enum Syncfusion.DocIO.DLS.RevisionBalloonsOptions : Enum {
    public int value__;
    public static RevisionBalloonsOptions Inline;
    public static RevisionBalloonsOptions Deletions;
    public static RevisionBalloonsOptions Formatting;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.RevisionCollection : CollectionImpl {
    public Revision Item { get; }
    internal RevisionCollection(WordDocument doc);
    public Revision get_Item(int index);
    public void AcceptAll();
    public void RejectAll();
    internal void Add(Revision revision);
    internal void Remove(Revision revision);
    internal void CloneItemsTo(RevisionCollection childRevisions);
    internal virtual void Close();
}
[FlagsAttribute]
public enum Syncfusion.DocIO.DLS.RevisionColor : Enum {
    public int value__;
    public static RevisionColor ByAuthor;
    public static RevisionColor Black;
    public static RevisionColor Blue;
    public static RevisionColor BrightGreen;
    public static RevisionColor DarkBlue;
    public static RevisionColor DarkRed;
    public static RevisionColor DarkYellow;
    public static RevisionColor Gray25;
    public static RevisionColor Gray50;
    public static RevisionColor Green;
    public static RevisionColor Pink;
    public static RevisionColor Red;
    public static RevisionColor Teal;
    public static RevisionColor Turquoise;
    public static RevisionColor Violet;
    public static RevisionColor White;
    public static RevisionColor Yellow;
    public static RevisionColor Auto;
    public static RevisionColor ClassicRed;
    public static RevisionColor ClassicBlue;
}
public class Syncfusion.DocIO.DLS.RevisionOptions : object {
    private bool m_showRevisionBars;
    private bool m_showRevisionMarks;
    private RevisionColor m_revisionBarsColor;
    private float m_revisionMarkWidth;
    private RevisionColor m_insertedTextColor;
    private RevisedTextEffect m_insertedTextEffect;
    private RevisedTextEffect m_deletedTextEffect;
    private RevisedTextEffect m_revisedPropertiesEffect;
    private RevisionColor m_deletedTextColor;
    private bool m_showDeletedText;
    private RevisionColor m_revisedPropertiesColor;
    private RevisionType m_showMarkup;
    private RevisionType m_showInBalloons;
    private RevisionBalloonsOptions m_balloonOptions;
    private CommentDisplayMode m_commentDisplayMode;
    private RevisionColor m_commentColor;
    public CommentDisplayMode CommentDisplayMode { get; public set; }
    public RevisionColor CommentColor { get; public set; }
    internal bool ShowRevisionBars { get; internal set; }
    internal bool ShowRevisionMarks { get; internal set; }
    public RevisionColor RevisionBarsColor { get; public set; }
    public RevisionColor InsertedTextColor { get; public set; }
    internal float RevisionMarkWidth { get; internal set; }
    internal RevisedTextEffect InsertedTextEffect { get; internal set; }
    public RevisionColor DeletedTextColor { get; public set; }
    internal RevisedTextEffect DeletedTextEffect { get; internal set; }
    public RevisionColor RevisedPropertiesColor { get; public set; }
    internal RevisedTextEffect RevisedPropetiesEffect { get; internal set; }
    internal bool ShowDeletedText { get; internal set; }
    public RevisionType ShowMarkup { get; public set; }
    public RevisionType ShowInBalloons { get; public set; }
    internal RevisionBalloonsOptions BalloonOptions { get; internal set; }
    public CommentDisplayMode get_CommentDisplayMode();
    public void set_CommentDisplayMode(CommentDisplayMode value);
    public RevisionColor get_CommentColor();
    public void set_CommentColor(RevisionColor value);
    internal bool get_ShowRevisionBars();
    internal void set_ShowRevisionBars(bool value);
    internal bool get_ShowRevisionMarks();
    internal void set_ShowRevisionMarks(bool value);
    public RevisionColor get_RevisionBarsColor();
    public void set_RevisionBarsColor(RevisionColor value);
    public RevisionColor get_InsertedTextColor();
    public void set_InsertedTextColor(RevisionColor value);
    internal float get_RevisionMarkWidth();
    internal void set_RevisionMarkWidth(float value);
    internal RevisedTextEffect get_InsertedTextEffect();
    internal void set_InsertedTextEffect(RevisedTextEffect value);
    public RevisionColor get_DeletedTextColor();
    public void set_DeletedTextColor(RevisionColor value);
    internal RevisedTextEffect get_DeletedTextEffect();
    internal void set_DeletedTextEffect(RevisedTextEffect value);
    public RevisionColor get_RevisedPropertiesColor();
    public void set_RevisedPropertiesColor(RevisionColor value);
    internal RevisedTextEffect get_RevisedPropetiesEffect();
    internal void set_RevisedPropetiesEffect(RevisedTextEffect value);
    internal bool get_ShowDeletedText();
    internal void set_ShowDeletedText(bool value);
    public RevisionType get_ShowMarkup();
    public void set_ShowMarkup(RevisionType value);
    public RevisionType get_ShowInBalloons();
    public void set_ShowInBalloons(RevisionType value);
    internal RevisionBalloonsOptions get_BalloonOptions();
    internal void set_BalloonOptions(RevisionBalloonsOptions value);
    private void SetTrackChangesOptions();
}
[FlagsAttribute]
public enum Syncfusion.DocIO.DLS.RevisionType : Enum {
    public int value__;
    public static RevisionType None;
    public static RevisionType Insertions;
    public static RevisionType Deletions;
    public static RevisionType Formatting;
    public static RevisionType StyleDefinitionChange;
    public static RevisionType MoveFrom;
    public static RevisionType MoveTo;
}
internal class Syncfusion.DocIO.DLS.RootNode : HtmlNode {
    private List`1<string> listNamesCollection;
    private Stack`1<HtmlNode> divElements;
    private Stack`1<HTMLTagInfo> conditionalComments;
    private bool isScriptTag;
    private bool isFirstElementHyperlink;
    private Random randomNumber;
    private static Regex m_removeSpaces;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, CssPropertiesBox> <StyleBoxes>k__BackingField;
    internal Dictionary`2<string, CssPropertiesBox> StyleBoxes { get; internal set; }
    private static RootNode();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, CssPropertiesBox> get_StyleBoxes();
    [CompilerGeneratedAttribute]
internal void set_StyleBoxes(Dictionary`2<string, CssPropertiesBox> value);
    internal bool LoadHtmlString(string htmlString);
    internal bool ParseTags(string htmlString);
    private bool IsCurrentNodeOrParentIsPreTag(HtmlNode node);
    private bool IsNodeContainPreInStyleAttribute(HtmlNode node);
    private string GetStyleAttributeValue(string styleAttr, string styleAttrName);
    internal HtmlNode AddHtmlNode(HtmlNode currentNode, HTMLTagInfo htmlTag);
    internal HtmlNode AppendTextToNode(HtmlNode currentNode, string text);
    internal bool IsTextToTrim(string matchedTag, string text);
    internal HtmlNode AddHtmlTextNode(HtmlNode node, string text, HTMLTagInfo tagName);
    internal HtmlNode FindBaseNode(HtmlNode node, string htmlTag);
    internal HtmlNode FindParentHtmlNode(HtmlNode node);
    internal HtmlNode FindParentBodyNode(HtmlNode node);
    internal HtmlNode CreateHtmlNode(HtmlNode parentNode, string tagName);
    internal HtmlNode FindParagraphNode(HtmlNode node);
    internal HtmlNode FindDivEnd(HtmlNode node);
    internal HtmlNode FindParentTableNode(HtmlNode node);
    internal HtmlNode FindBodyTableNode(HtmlNode node);
    private HtmlNode FindTableRowParent(HtmlNode node);
    private HtmlNode FindTableCellParent(HtmlNode node);
    internal bool IsBodyTag(HtmlNode node);
    private void FormattingBoxes(HtmlNode root);
    private bool IsEmpty(Color color);
    internal void BoxesCorrection(HtmlNode home);
    internal static string EncodeAsciiSymbol(string text);
    internal static string EncodeHtmlNames(string nametext);
    internal void GenerateCssPropertiesBoxes(string stylestring);
    internal void FeedPropertiesBox(string boxstring);
    private bool ContainsUnSupportedTags(string name);
    private bool HasFontSize(HtmlNode node);
    private HtmlNode FindBodyNode(HtmlNode rootNode);
    internal bool IsSpaceNeedToBePreserved(HtmlNode currentNode, HTMLTagInfo tagInfo);
}
public enum Syncfusion.DocIO.DLS.RowAlignment : Enum {
    public int value__;
    public static RowAlignment Left;
    public static RowAlignment Center;
    public static RowAlignment Right;
}
internal class Syncfusion.DocIO.DLS.RowContentControl : object {
    private ContentControlProperties m_controlProperties;
    private WCharacterFormat m_BreakCharacterFormat;
    private WTableRow m_ownerRow;
    public ContentControlProperties ContentControlProperties { get; public set; }
    public WCharacterFormat BreakCharacterFormat { get; public set; }
    internal WTableRow OwnerRow { get; internal set; }
    public RowContentControl(WordDocument document);
    public sealed virtual ContentControlProperties get_ContentControlProperties();
    public void set_ContentControlProperties(ContentControlProperties value);
    public sealed virtual WCharacterFormat get_BreakCharacterFormat();
    public void set_BreakCharacterFormat(WCharacterFormat value);
    internal WTableRow get_OwnerRow();
    internal void set_OwnerRow(WTableRow value);
    internal void Close();
}
public class Syncfusion.DocIO.DLS.RowFormat : FormatBase {
    internal static int BordersKey;
    internal static int RowHeightKey;
    internal static int PaddingsKey;
    internal static int PreferredWidthTypeKey;
    internal static int PreferredWidthKey;
    internal static int GridBeforeWidthTypeKey;
    internal static int GridBeforeWidthKey;
    internal static int GridAfterWidthTypeKey;
    internal static int GridAfterWidthKey;
    internal static int CellSpacingKey;
    internal static int LeftIndentKey;
    internal static int SpacingBetweenCellsKey;
    internal static int IsAutoResizedCellsKey;
    internal static int IsBreakAcrossPagesKey;
    internal static int IsHeaderRowKey;
    internal static int BidiTableKey;
    internal static int RowAlignmentKey;
    internal static int ShadingColorKey;
    internal static int ForeColorKey;
    internal static int TextureStyleKey;
    internal static int PositioningKey;
    internal static int DEF_BORDER_COUNT;
    internal static int HiddenKey;
    internal static int ChangedFormatKey;
    internal static int FormatChangeAuthorNameKey;
    internal static int FormatChangeDateTimeKey;
    internal static int TableStyleNameKey;
    private byte m_bFlags;
    private PreferredWidthInfo m_gridBeforeWidth;
    private PreferredWidthInfo m_gridAfterWidth;
    private PreferredWidthInfo m_preferredWidth;
    private List`1<Stream> m_xmlProps;
    internal float AfterWidth;
    internal float BeforeWidth;
    internal PreferredWidthInfo PreferredWidth { get; }
    internal PreferredWidthInfo GridBeforeWidth { get; }
    internal PreferredWidthInfo GridAfterWidth { get; }
    internal short GridBefore { get; }
    internal short GridAfter { get; }
    internal bool Hidden { get; internal set; }
    public Color BackColor { get; public set; }
    internal Color ForeColor { get; internal set; }
    internal TextureStyle TextureStyle { get; internal set; }
    public Borders Borders { get; }
    public Paddings Paddings { get; }
    public float CellSpacing { get; public set; }
    public float LeftIndent { get; public set; }
    public bool IsAutoResized { get; public set; }
    public bool IsBreakAcrossPages { get; public set; }
    internal bool IsHeaderRow { get; internal set; }
    public bool Bidi { get; public set; }
    public RowAlignment HorizontalAlignment { get; public set; }
    internal bool SkipDefaultPadding { get; internal set; }
    internal bool IsChangedFormat { get; internal set; }
    internal WTableRow OwnerRow { get; }
    internal float Height { get; internal set; }
    internal bool CancelOnChange { get; private set; }
    public bool WrapTextAround { get; public set; }
    public TablePositioning Positioning { get; }
    internal List`1<Stream> XmlProps { get; }
    internal string FormatChangeAuthorName { get; internal set; }
    internal DateTime FormatChangeDateTime { get; internal set; }
    internal bool IsLeftIndentDefined { get; internal set; }
    internal string TableStyleName { get; internal set; }
    internal RowFormat(IWordDocument doc);
    internal PreferredWidthInfo get_PreferredWidth();
    internal PreferredWidthInfo get_GridBeforeWidth();
    internal PreferredWidthInfo get_GridAfterWidth();
    internal short get_GridBefore();
    internal short get_GridAfter();
    internal bool get_Hidden();
    internal void set_Hidden(bool value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    internal Color get_ForeColor();
    internal void set_ForeColor(Color value);
    internal TextureStyle get_TextureStyle();
    internal void set_TextureStyle(TextureStyle value);
    public Borders get_Borders();
    public Paddings get_Paddings();
    public float get_CellSpacing();
    public void set_CellSpacing(float value);
    public float get_LeftIndent();
    public void set_LeftIndent(float value);
    public bool get_IsAutoResized();
    public void set_IsAutoResized(bool value);
    public bool get_IsBreakAcrossPages();
    public void set_IsBreakAcrossPages(bool value);
    internal bool get_IsHeaderRow();
    internal void set_IsHeaderRow(bool value);
    public bool get_Bidi();
    public void set_Bidi(bool value);
    public RowAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(RowAlignment value);
    internal bool get_SkipDefaultPadding();
    internal void set_SkipDefaultPadding(bool value);
    internal bool get_IsChangedFormat();
    internal void set_IsChangedFormat(bool value);
    internal WTableRow get_OwnerRow();
    internal float get_Height();
    internal void set_Height(float value);
    internal bool get_CancelOnChange();
    private void set_CancelOnChange(bool value);
    public bool get_WrapTextAround();
    public void set_WrapTextAround(bool value);
    public TablePositioning get_Positioning();
    internal List`1<Stream> get_XmlProps();
    internal string get_FormatChangeAuthorName();
    internal void set_FormatChangeAuthorName(string value);
    internal DateTime get_FormatChangeDateTime();
    internal void set_FormatChangeDateTime(DateTime value);
    internal bool get_IsLeftIndentDefined();
    internal void set_IsLeftIndentDefined(bool value);
    internal string get_TableStyleName();
    internal void set_TableStyleName(string value);
    internal float GetCellSpacing();
    internal short GetGridCount(int index);
    private int GetOffsetIndex(WTableColumnCollection tableGrid, float offset);
    private float GetCellOffset(int index);
    private bool GetTextWrapAround();
    private void SetTextWrapAround(bool value);
    private void ClearAbsolutePosition();
    internal object GetPropertyValue(int propertyKey);
    internal void SetPropertyValue(int propertyKey, object value);
    internal bool HasSprms();
    private short GetRowIndent();
    internal virtual bool HasValue(int propertyKey);
    internal virtual int GetSprmOption(int propertyKey);
    internal virtual void AcceptChanges();
    internal float UpdateRowBeforeAfterWidth(short gridSpan, bool isAfterWidth);
    internal void ClearPreferredWidthPropertyValue(int key);
    internal bool Compare(RowFormat rowFormat);
    internal virtual void ApplyBase(FormatBase baseFormat);
    protected internal virtual void EnsureComposites();
    protected virtual FormatBase GetDefComposite(int key);
    protected virtual object GetDefValue(int key);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void OnChange(FormatBase format, int propKey);
    internal void RemoveRowSprms();
    protected internal void ImportContainer(FormatBase format);
    private void ImportXmlProps(RowFormat format);
    protected virtual void ImportMembers(FormatBase format);
    internal virtual void RemovePositioning();
    internal virtual void Close();
    internal void CheckDefPadding();
}
internal abstract class Syncfusion.DocIO.DLS.RtfNavigator : object {
    internal static int c_two;
    internal static int c_twentiethOfPoint;
    internal static int c_quaterPoint;
    internal static int c_fiftiethOfPoint;
    internal static float c_thirtyfive;
}
public enum Syncfusion.DocIO.DLS.RtfTableType : Enum {
    public int value__;
    public static RtfTableType FontTable;
    public static RtfTableType ListTable;
    public static RtfTableType ColorTable;
    public static RtfTableType ListOverrideTable;
    public static RtfTableType StyleSheet;
    public static RtfTableType None;
}
public enum Syncfusion.DocIO.DLS.RtfTokenType : Enum {
    public int value__;
    public static RtfTokenType GroupStart;
    public static RtfTokenType GroupEnd;
    public static RtfTokenType ControlWord;
    public static RtfTokenType Text;
    public static RtfTokenType TableEntry;
    public static RtfTokenType Unknown;
}
internal class Syncfusion.DocIO.DLS.RtfWriter : RtfNavigator {
    private static char DEF_FOOTNOTE_SYMBOL;
    private static string DEF_FONT_NAME;
    private static int MM_ANISOTROPIC;
    private string c_lineBreak;
    private string c_transfer;
    private string c_symbol92;
    private string c_symbol31;
    private string c_symbol30;
    private string c_symbol61553;
    private string c_symbol61549;
    private string c_symbol123;
    private string c_symbol125;
    private string c_slashSymbol;
    private string c_symbol8226;
    private string c_enDash;
    private string c_emDash;
    private string c_enSpace;
    private string c_emSpace;
    private string c_section;
    private string c_copyRight;
    private string c_registered;
    private string c_paraMark;
    private string c_tradeMark;
    private string c_singleOpenQuote;
    private string c_singleCloseQuote;
    private string c_doubleOpenQuote;
    private string c_doubleCloseQuote;
    private WordDocument m_doc;
    private Stream m_stream;
    private Encoding m_encoding;
    private Byte[] m_defStyleBytes;
    private Byte[] m_listTableBytes;
    private Byte[] m_listOverrideTableBytes;
    private Byte[] m_styleBytes;
    private Byte[] m_colorBytes;
    private Byte[] m_fontBytes;
    private List`1<Byte[]> m_mainBodyBytesList;
    private int m_fontId;
    private int m_uniqueId;
    private int m_cellEndPos;
    private int m_tableNestedLevel;
    private int m_colorId;
    private Dictionary`2<string, string> m_styles;
    private Dictionary`2<string, string> m_stylesNumb;
    private Dictionary`2<string, Dictionary`2<int, int>> m_listStart;
    private Dictionary`2<string, int> m_listsIds;
    private Dictionary`2<int, long> m_listsLongIds;
    private Dictionary`2<string, string> m_fontEntries;
    private Dictionary`2<string, string> m_associatedFontEntries;
    private bool m_hasFootnote;
    private bool m_hasEndnote;
    private bool m_isCyrillicText;
    private Dictionary`2<int, string> m_listOverride;
    private Dictionary`2<string, string> m_commentIds;
    private Stack`1<object> m_currentField;
    private Dictionary`2<Color, int> m_colorTable;
    private bool m_isField;
    private Dictionary`2<string, string> FontEntries { get; }
    private Dictionary`2<string, string> AssociatedFontEntries { get; }
    private Dictionary`2<string, int> ListsIds { get; }
    private Dictionary`2<int, long> ListsLongIds { get; }
    private Dictionary`2<int, string> ListOverrideAr { get; }
    private Dictionary`2<string, string> Styles { get; }
    private Dictionary`2<string, string> StyleNumb { get; }
    private Dictionary`2<string, Dictionary`2<int, int>> ListStart { get; }
    private Dictionary`2<string, string> CommentIds { get; }
    private Stack`1<object> CurrentField { get; }
    private Dictionary`2<Color, int> ColorTable { get; }
    private Dictionary`2<string, string> get_FontEntries();
    private Dictionary`2<string, string> get_AssociatedFontEntries();
    private Dictionary`2<string, int> get_ListsIds();
    private Dictionary`2<int, long> get_ListsLongIds();
    private Dictionary`2<int, string> get_ListOverrideAr();
    private Dictionary`2<string, string> get_Styles();
    private Dictionary`2<string, string> get_StyleNumb();
    private Dictionary`2<string, Dictionary`2<int, int>> get_ListStart();
    private Dictionary`2<string, string> get_CommentIds();
    private Stack`1<object> get_CurrentField();
    private Dictionary`2<Color, int> get_ColorTable();
    internal void Write(Stream stream, IWordDocument document);
    internal string GetRtfText(IWordDocument document);
    private void WriteBody();
    private void BuildDocProperties();
    private void BuildDefaultStyles();
    private void BuildSections();
    private void BuildBackground();
    private void BuildSection(WSection section);
    private void BuildSectionBodyItems(BodyItemCollection bodyItems);
    private Byte[] BuildBodyItems(BodyItemCollection bodyItems);
    private void BuildHeadersFooters(WHeadersFooters headerFooters);
    private string GetWatermark(Watermark waterMark);
    private void BuildHeaderFooter(string name, BodyItemCollection collect, string watermarkStr, bool writeWaterMark);
    private Byte[] BuildParagraph(WParagraph para);
    private bool CompareListFormat(WParagraph paragraph);
    private bool IsPreviousParagraphHasFieldEnd(WParagraph paragraph);
    private Byte[] BuildParagraphEnd(WParagraph para);
    private void BuildSectToken(MemoryStream memoryStream);
    private string BuildCharacterFormat(WCharacterFormat cFormat);
    private string GetParagraphAlignment(HorizontalAlignment hAlignment);
    private string BuildParagraphFormat(WParagraphFormat pFormat, WParagraph para, bool isParaText);
    private string BuildParagraphFormat(WParagraphFormat pFormat, WParagraph para);
    private string BuildParaSpacing(WParagraphFormat pFormat, bool isInCell);
    private string BuildSpacing(string attribute, float value);
    private string BuildAutoSpacing(string value, bool hasSpacing);
    private string BuildLineSpacing(WParagraphFormat pFormat);
    private string BuildTextureStyle(TextureStyle style);
    private void BuildSectionProp(WSection section);
    private Byte[] BuildPageSetup(WPageSetup pSetup);
    private string BuildPageNumStyle(PageNumberStyle pageNumSt);
    private Byte[] BuildColumns(ColumnCollection cols);
    private void BuildUnderLineStyle(UnderlineStyle style, StringBuilder strBuilder);
    private string BuildTabs(TabCollection tabs);
    private string BuildParaBorders(WParagraphFormat pFormat);
    private string BuildPageBorders(Borders borders);
    private string BuildBorder(Border border, bool isTable);
    private string BuildBorderStyle(BorderStyle borderStyle);
    private void BuildStyleSheet();
    private void BuildStyle(Style style);
    private void BuildStyle(string styleName);
    private string BuildTextBorder(Border brd);
    private string BuildFrameProps(WParagraphFormat pFormat);
    private string BuildParaListId(WParagraph para, WParagraphFormat pFormat);
    private Byte[] BuildTable(WTable table);
    private Byte[] BuildTableRow(WTableRow row);
    private string BuildTRowFormat(RowFormat rowFormat);
    private string BuildTCellFormat(CellFormat cFormat);
    private string BuildTRowBorders(Borders borders);
    private string BuildTCellBorders(WTableCell cell, Borders borders, Borders rowBorders);
    private Byte[] BuildTableCell(WTableCell cell);
    private string BuildPadding(Paddings paddings, bool isRow);
    private string BuildVertAlignment(VerticalAlignment alignment);
    private bool CheckCellBorders(WTableCell cell, BorderType borderType);
    private Byte[] BuildParagraphItem(ParagraphItem item);
    private Byte[] BuildSymbol(WSymbol symbol);
    private Byte[] BuildFootnoteEndnote(WFootnote footnote);
    private string BuildFootnoteProp();
    private string BuildEndnoteProp();
    private string BuildFieldMark(WFieldMark fieldMark);
    private string BuildField(WField field);
    private Byte[] InsertLineBreak(Break brk);
    private string BuildTextRange(WTextRange textRange);
    private Byte[] InsertBkmkEnd(BookmarkEnd bkmkEnd);
    private Byte[] InsertBkmkStart(BookmarkStart bkmkStart);
    private Byte[] BuildTocField(TableOfContent toc);
    private string BuildPicture(WPicture pic, bool isFieldShape);
    private string BuildShapeImage(WPicture pic, bool isFielsShape);
    private string BuildInLineImage(WPicture pic, bool isfieldShape);
    private string BuildShape(Shape shape);
    private void BuildShapeBasicTokens(Shape shape, StringBuilder strBuilder);
    private void BuildShapePositionTokens(Shape shape, StringBuilder strBuilder);
    private void BuildShapeObjectTypeTokens(Shape shape, StringBuilder strBuilder);
    private void BuildShapeHorizontalLineTokens(Shape shape, StringBuilder strBuilder);
    private void BuildShapeLineTokens(Shape shape, StringBuilder strBuilder);
    private void BuildShapeFillTokens(Shape shape, StringBuilder strBuilder);
    private string GetRTFAutoShapeColor(Color color);
    private void BuildShapeAdjustValuesTokens(Shape shape, StringBuilder strBuilder);
    private void BuildShapeShadowTokens(Shape shape, StringBuilder strBuilder);
    private void GenerateOffsetXandY(Shape shape, StringBuilder strBuilder);
    private void BuildShape3DTokens(Shape shape, StringBuilder strBuilder);
    private void ConvertDocxAdjustValues(Shape shape, StringBuilder strBuilder);
    private string BuildRenderMode(ExtrusionRenderMode extrusionRenderMode);
    private string BuildExtrusionplane(ExtrusionPlane extrusionPlane);
    private bool IsWmfImage(WPicture picture);
    private string BuildPictureProp(WPicture pic, bool isFieldshape);
    private string BuildPictureLink(WPicture pic);
    private string BuildMetafileProp(WPicture pic);
    private string BuildWrappingStyle(TextWrappingStyle style, TextWrappingType type);
    private string BuildWrappingType(TextWrappingType type);
    private string BuildShapeProp(string propName, string propValue);
    private int GetAutoShapeType(string shapeValue);
    private int GetLineStyle(string lineStyle);
    private string BuildLayoutInCell(bool isLayoutInCell);
    private string BuildHorAlignm(ShapeHorizontalAlignment hAlignm);
    private string BuildVertAlignm(ShapeVerticalAlignment vAlignm);
    private string BuildHiddenTextBox(bool value);
    private string BuildHorPos(HorizontalOrigin hPos);
    private string BuildVertPos(VerticalOrigin vPos);
    private string BuildShapePosition(float horPos, float vertPos, int shapeW, int shapeH);
    private Byte[] BuildTextBox(WTextBox textBox);
    private void BuildTextBoxPositionTokens(Byte[] byteArr, WTextBox textBox, MemoryStream textBoxStream);
    private void BuildTextBoxFillTokens(Byte[] byteArr, WTextBox textBox, MemoryStream textBoxStream);
    private void BuildTextBoxLineTokens(Byte[] byteArr, WTextBox textBox, MemoryStream textBoxStream);
    private string BuildTextFlow(TextDirection textDirection);
    private string BuildWrapText(TextWrappingStyle textWrappingStyle);
    private string BuildTextBoxLineStyle(TextBoxLineStyle style);
    private string BuildShapeLines(Color col, float lineWidth);
    private string BuildShapeFill(Background backgr, bool isPageBackground);
    private string BuildGradientVariant(GradientShadingVariant variant);
    private void AppendListStyles();
    private string BuildListLevel(WListLevel listLevel);
    private string UpdateNumberPrefix(string prefix);
    private string BuildLevelText(WListLevel listLevel);
    private string BuildLevelNumbers(WListLevel listLevel);
    private int GetLevelTextLeng(string levelText);
    private string GetLevelText(WListLevel listLevel, bool isLevelNumbers);
    private string BuildLevelFormatting(ListPatternType type);
    private void AppendOverrideList();
    private string BuildListText(WParagraph paragraph, WListFormat listFormat);
    private string BuildListText(WListLevel listLevel, WListFormat listFormat, WParagraph paragraph);
    private int GetLstStartVal(WListFormat format);
    private string BuildLstLetterSymbol(WListFormat format);
    private bool IsChanged(String& listLText);
    private bool IsComplexList(string prefix);
    private string BuildPictWtrmarkBody(PictureWatermark picWatermark);
    private string BuildTextWtrmarkBody(TextWatermark textWatermark);
    private string BuildDefWtrmarkProp();
    private string BuildTextFormField(WTextFormField textField);
    private string BuildCheckBox(WCheckBox checkBox);
    private string BuildDropDownField(WDropDownFormField dropDownField);
    private string BuildFormField(WFormField formField);
    private Byte[] BuildCommentMark(WCommentMark cMark);
    private Byte[] BuildComment(WComment comment);
    private Byte[] BuildComItems(WComment comment, string id);
    private bool HasEmptyCommentedItems(WComment comment);
    private string BuildColorValue(WCharacterFormat cFormat, Color cFormatColor, WCharacterFormat baseCFormat, Color baseCFormatColor, int optionKey, string value);
    private string BuildHighlightNamedColor(Color color, string value);
    private string BuildNamedColor(Color color, string value);
    private void CheckFootEndnote();
    private string BuildFieldType(FieldType type);
    private string GetRtfShapeColor(Color color);
    private string GetRtfPageBackgroundColor(Color color);
    private void WriteElements(string param);
    private string GetNextFontId(bool isBidi);
    private int GetNextId();
    private int GetNextColorId();
    private string IsFontEntryExits(string fontName, bool IsBidi);
    private void AppendFont(string fontId, string fontName);
    private string BuildColor(Color color, string attributeStr);
    private string WriteFontName(WCharacterFormat cFormat);
    private string WriteFontNameBidi(WCharacterFormat cFormat);
    private bool HasParaEnd(WParagraph para);
    private string PrepareText(string text);
    private string ReplaceUnicode(string text);
    private string BuildTextRangeStr(WCharacterFormat cFormat, string text);
    private bool WriteFieldEnd(WFieldMark mark);
    private WSection GetOwnerSection(Entity entity);
    private void InitCellEndPos();
}
public class Syncfusion.DocIO.DLS.SaveOptions : object {
    private byte m_bFlags;
    private byte m_bFlags1;
    private CssStyleSheetType m_htmlExportCssStyleSheetType;
    private string m_htmlExportCssStyleSheetFileName;
    private string m_htmlExportImagesFolder;
    private short m_EPubHeadingLevels;
    private String[] m_fontFiles;
    private string m_markdownExportImagesFolder;
    [CompilerGeneratedAttribute]
private ImageNodeVisitedEventHandler ImageNodeVisited;
    internal String[] FontFiles { get; internal set; }
    public string MarkdownExportImagesFolder { get; public set; }
    internal bool EPubExportFont { get; internal set; }
    internal short EPubHeadingLevels { get; internal set; }
    public CssStyleSheetType HtmlExportCssStyleSheetType { get; public set; }
    internal string HtmlExportCssStyleSheetFileName { get; internal set; }
    internal string HtmlExportImagesFolder { get; internal set; }
    public bool HtmlExportHeadersFooters { get; public set; }
    public bool OptimizeRtfFileSize { get; public set; }
    public bool UseContextualSpacing { get; public set; }
    public bool HtmlExportTextInputFormFieldAsText { get; public set; }
    public bool HtmlExportOmitXmlDeclaration { get; public set; }
    public bool MaintainCompatibilityMode { get; public set; }
    public bool HTMLExportWithWordCompatibility { get; public set; }
    public bool HtmlExportBodyContentAlone { get; public set; }
    internal bool IsEventSubscribed { get; }
    internal String[] get_FontFiles();
    internal void set_FontFiles(String[] value);
    public string get_MarkdownExportImagesFolder();
    public void set_MarkdownExportImagesFolder(string value);
    internal bool get_EPubExportFont();
    internal void set_EPubExportFont(bool value);
    internal short get_EPubHeadingLevels();
    internal void set_EPubHeadingLevels(short value);
    public CssStyleSheetType get_HtmlExportCssStyleSheetType();
    public void set_HtmlExportCssStyleSheetType(CssStyleSheetType value);
    internal string get_HtmlExportCssStyleSheetFileName();
    internal void set_HtmlExportCssStyleSheetFileName(string value);
    internal string get_HtmlExportImagesFolder();
    internal void set_HtmlExportImagesFolder(string value);
    public bool get_HtmlExportHeadersFooters();
    public void set_HtmlExportHeadersFooters(bool value);
    public bool get_OptimizeRtfFileSize();
    public void set_OptimizeRtfFileSize(bool value);
    public bool get_UseContextualSpacing();
    public void set_UseContextualSpacing(bool value);
    public bool get_HtmlExportTextInputFormFieldAsText();
    public void set_HtmlExportTextInputFormFieldAsText(bool value);
    public bool get_HtmlExportOmitXmlDeclaration();
    public void set_HtmlExportOmitXmlDeclaration(bool value);
    public bool get_MaintainCompatibilityMode();
    public void set_MaintainCompatibilityMode(bool value);
    public bool get_HTMLExportWithWordCompatibility();
    public void set_HTMLExportWithWordCompatibility(bool value);
    public bool get_HtmlExportBodyContentAlone();
    public void set_HtmlExportBodyContentAlone(bool value);
    internal bool get_IsEventSubscribed();
    [CompilerGeneratedAttribute]
public void add_ImageNodeVisited(ImageNodeVisitedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImageNodeVisited(ImageNodeVisitedEventHandler value);
    internal ImageNodeVisitedEventArgs ExecuteSaveImageEvent(Stream imageStream, string uri);
    internal void Close();
    internal void EnsureImagesFolder(bool m_bImagesFolderCreated, bool m_cacheFilesInternally, string m_imagesFolder, string m_fileNameWithoutExt);
    internal void ProcessImageUsingFileStream(string m_imagesFolder, string imgPath, Byte[] imageBytes);
    internal string GetImagePath(Int32& m_imgCounter, bool m_cacheFilesInternally, string m_fileNameWithoutExt);
}
public enum Syncfusion.DocIO.DLS.SectionBreakCode : Enum {
    public int value__;
    public static SectionBreakCode NoBreak;
    public static SectionBreakCode NewColumn;
    public static SectionBreakCode NewPage;
    public static SectionBreakCode EvenPage;
    public static SectionBreakCode Oddpage;
}
internal class Syncfusion.DocIO.DLS.SectionPropertiesConverter : object {
    public static void Export(WordReader reader, WSection destination, bool parseAll);
    private static void ImportSecSprmToFormat(SectionProperties source, List`1<SinglePropertyModifierRecord> modifiers, WSection destination, Dictionary`2<int, string> authorNames, WPageSetup pageSetup);
    private static void UpdatePageOrientation(SinglePropertyModifierArray sprms, WPageSetup pageSetup);
    public static void Import(SectionProperties destination, WSection source);
    private static void OldFormatToSprms(SectionProperties destination, WSection source);
    internal static void Import(SectionProperties destination, WSection source, bool format);
    private static void ExportBorder(BorderCode srcBorder, Border destBorder);
    private static void ImportBorder(BorderCode destBorder, Border srcBorder);
    private static Borders GetDestBorders(Borders destBorders, WPageSetup destination);
}
public class Syncfusion.DocIO.DLS.Settings : object {
    private CompatibilityOptions m_compatibilityOptions;
    private CompatibilityMode m_CompatibilityMode;
    private WordDocument m_document;
    private byte m_bFlags;
    private string m_hashValue;
    private string m_saltValue;
    private string m_cryptProviderTypeValue;
    private string m_cryptAlgorithmClassValue;
    private string m_cryptAlgorithmTypeValue;
    private string m_cryptAlgorithmSidValue;
    private string m_cryptSpinCountValue;
    private string m_duplicateListStyleNames;
    private WCharacterFormat m_themeFontLanguages;
    private OfficeMathProperties m_mathProperties;
    internal CompatibilityOptions CompatibilityOptions { get; }
    public CompatibilityMode CompatibilityMode { get; public set; }
    internal bool CompatibilityModeEnabled { get; internal set; }
    public bool MaintainFormattingOnFieldUpdate { get; public set; }
    public bool UpdateResultOnFieldCodeChange { get; public set; }
    public bool DisableMovingEntireField { get; public set; }
    public bool DisplayBackgrounds { get; public set; }
    internal string HashValue { get; internal set; }
    internal string SaltValue { get; internal set; }
    internal string CryptProviderTypeValue { get; internal set; }
    internal string CryptAlgorithmSidValue { get; internal set; }
    internal string CryptAlgorithmClassValue { get; internal set; }
    internal string CryptAlgorithmTypeValue { get; internal set; }
    internal string CryptSpinCountValue { get; internal set; }
    internal bool IsOptimizedForBrowser { get; internal set; }
    internal string DuplicateListStyleNames { get; internal set; }
    internal WCharacterFormat ThemeFontLanguages { get; internal set; }
    public bool MaintainImportedListCache { get; public set; }
    public bool SkipIncrementalSaveValidation { get; public set; }
    internal OfficeMathProperties MathProperties { get; internal set; }
    public bool PreserveOleImageAsImage { get; public set; }
    internal Settings(WordDocument document);
    internal CompatibilityOptions get_CompatibilityOptions();
    public CompatibilityMode get_CompatibilityMode();
    public void set_CompatibilityMode(CompatibilityMode value);
    internal bool get_CompatibilityModeEnabled();
    internal void set_CompatibilityModeEnabled(bool value);
    public bool get_MaintainFormattingOnFieldUpdate();
    public void set_MaintainFormattingOnFieldUpdate(bool value);
    public bool get_UpdateResultOnFieldCodeChange();
    public void set_UpdateResultOnFieldCodeChange(bool value);
    public bool get_DisableMovingEntireField();
    public void set_DisableMovingEntireField(bool value);
    public bool get_DisplayBackgrounds();
    public void set_DisplayBackgrounds(bool value);
    internal string get_HashValue();
    internal void set_HashValue(string value);
    internal string get_SaltValue();
    internal void set_SaltValue(string value);
    internal string get_CryptProviderTypeValue();
    internal void set_CryptProviderTypeValue(string value);
    internal string get_CryptAlgorithmSidValue();
    internal void set_CryptAlgorithmSidValue(string value);
    internal string get_CryptAlgorithmClassValue();
    internal void set_CryptAlgorithmClassValue(string value);
    internal string get_CryptAlgorithmTypeValue();
    internal void set_CryptAlgorithmTypeValue(string value);
    internal string get_CryptSpinCountValue();
    internal void set_CryptSpinCountValue(string value);
    internal bool get_IsOptimizedForBrowser();
    internal void set_IsOptimizedForBrowser(bool value);
    internal string get_DuplicateListStyleNames();
    internal void set_DuplicateListStyleNames(string value);
    internal WCharacterFormat get_ThemeFontLanguages();
    internal void set_ThemeFontLanguages(WCharacterFormat value);
    public bool get_MaintainImportedListCache();
    public void set_MaintainImportedListCache(bool value);
    public bool get_SkipIncrementalSaveValidation();
    public void set_SkipIncrementalSaveValidation(bool value);
    internal OfficeMathProperties get_MathProperties();
    internal void set_MathProperties(OfficeMathProperties value);
    public bool get_PreserveOleImageAsImage();
    public void set_PreserveOleImageAsImage(bool value);
    internal void Close();
    internal void SetCompatibilityModeValue(CompatibilityMode value);
}
public class Syncfusion.DocIO.DLS.Shape : ShapeBase {
    private AutoShapeType m_AutoShapeType;
    private WTextBody m_TextBody;
    private FillFormat m_FillFormat;
    private LineFormat m_LineFormat;
    private List`1<string> m_styleProps;
    public string ShapeTypeID;
    private Dictionary`2<string, DictionaryEntry> m_relations;
    private TextFrame m_TextFrame;
    private string m_Adjustments;
    private double m_arcSize;
    private Color m_fontRefColor;
    private RectangleF m_textLayoutingBounds;
    private float m_rotation;
    private byte m_bFlags;
    private List`1<EffectFormat> m_effectList;
    private List`1<ShapeStyleReference> m_shapeStyleItems;
    private WPicture m_fallbackPic;
    private List`1<Path2D> m_vmlPathPoints;
    private Dictionary`2<string, string> m_guideList;
    private Dictionary`2<string, string> m_avList;
    private List`1<Path2D> m_path2DList;
    internal bool m_isVMLPathUpdated;
    internal Dictionary`2<string, Stream> m_docx2007Props;
    private Dictionary`2<string, ImageRecord> m_imageRelations;
    internal Dictionary`2<string, string> m_shapeGuide;
    internal List`1<Path2D> VMLPathPoints { get; internal set; }
    internal bool Is2007Shape { get; internal set; }
    internal RectangleF TextLayoutingBounds { get; internal set; }
    internal bool UseStandardColorHR { get; internal set; }
    internal bool UseNoShadeHR { get; internal set; }
    public float Rotation { get; public set; }
    internal double ArcSize { get; internal set; }
    internal bool IsHorizontalRule { get; internal set; }
    internal string Adjustments { get; internal set; }
    public TextFrame TextFrame { get; public set; }
    internal Color FontRefColor { get; internal set; }
    internal List`1<string> DocxStyleProps { get; }
    internal Dictionary`2<string, Stream> Docx2007Props { get; internal set; }
    internal Dictionary`2<string, ImageRecord> ImageRelations { get; }
    internal Dictionary`2<string, string> ShapeGuide { get; }
    public AutoShapeType AutoShapeType { get; internal set; }
    public WTextBody TextBody { get; public set; }
    public LineFormat LineFormat { get; public set; }
    public FillFormat FillFormat { get; public set; }
    internal List`1<EffectFormat> EffectList { get; internal set; }
    public EntityType EntityType { get; }
    public bool FlipHorizontal { get; public set; }
    public bool FlipVertical { get; public set; }
    internal bool IsEffectStyleInline { get; internal set; }
    internal bool IsLineStyleInline { get; internal set; }
    internal bool IsFillStyleInline { get; internal set; }
    internal bool IsScenePropertiesInline { get; internal set; }
    internal bool IsShapePropertiesInline { get; internal set; }
    internal List`1<ShapeStyleReference> ShapeStyleReferences { get; internal set; }
    internal Dictionary`2<string, DictionaryEntry> Relations { get; }
    internal WPicture FallbackPic { get; internal set; }
    internal List`1<Path2D> Path2DList { get; internal set; }
    internal Shape(IWordDocument doc);
    public Shape(IWordDocument doc, AutoShapeType autoShapeType);
    internal List`1<Path2D> get_VMLPathPoints();
    internal void set_VMLPathPoints(List`1<Path2D> value);
    internal bool get_Is2007Shape();
    internal void set_Is2007Shape(bool value);
    internal RectangleF get_TextLayoutingBounds();
    internal void set_TextLayoutingBounds(RectangleF value);
    internal bool get_UseStandardColorHR();
    internal void set_UseStandardColorHR(bool value);
    internal bool get_UseNoShadeHR();
    internal void set_UseNoShadeHR(bool value);
    public float get_Rotation();
    public void set_Rotation(float value);
    internal double get_ArcSize();
    internal void set_ArcSize(double value);
    internal bool get_IsHorizontalRule();
    internal void set_IsHorizontalRule(bool value);
    internal string get_Adjustments();
    internal void set_Adjustments(string value);
    public TextFrame get_TextFrame();
    public void set_TextFrame(TextFrame value);
    internal Color get_FontRefColor();
    internal void set_FontRefColor(Color value);
    internal List`1<string> get_DocxStyleProps();
    internal Dictionary`2<string, Stream> get_Docx2007Props();
    internal void set_Docx2007Props(Dictionary`2<string, Stream> value);
    internal Dictionary`2<string, ImageRecord> get_ImageRelations();
    internal Dictionary`2<string, string> get_ShapeGuide();
    public AutoShapeType get_AutoShapeType();
    internal void set_AutoShapeType(AutoShapeType value);
    public WTextBody get_TextBody();
    public void set_TextBody(WTextBody value);
    public LineFormat get_LineFormat();
    public void set_LineFormat(LineFormat value);
    public FillFormat get_FillFormat();
    public void set_FillFormat(FillFormat value);
    internal List`1<EffectFormat> get_EffectList();
    internal void set_EffectList(List`1<EffectFormat> value);
    public virtual EntityType get_EntityType();
    public bool get_FlipHorizontal();
    public void set_FlipHorizontal(bool value);
    public bool get_FlipVertical();
    public void set_FlipVertical(bool value);
    internal bool get_IsEffectStyleInline();
    internal void set_IsEffectStyleInline(bool value);
    internal bool get_IsLineStyleInline();
    internal void set_IsLineStyleInline(bool value);
    internal bool get_IsFillStyleInline();
    internal void set_IsFillStyleInline(bool value);
    internal bool get_IsScenePropertiesInline();
    internal void set_IsScenePropertiesInline(bool value);
    internal bool get_IsShapePropertiesInline();
    internal void set_IsShapePropertiesInline(bool value);
    internal List`1<ShapeStyleReference> get_ShapeStyleReferences();
    internal void set_ShapeStyleReferences(List`1<ShapeStyleReference> value);
    internal Dictionary`2<string, DictionaryEntry> get_Relations();
    internal WPicture get_FallbackPic();
    internal void set_FallbackPic(WPicture value);
    internal List`1<Path2D> get_Path2DList();
    internal void set_Path2DList(List`1<Path2D> value);
    internal bool Compare(Shape shape);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
    internal void InitializeVMLDefaultValues();
    internal virtual void Detach();
    internal virtual void AttachToDocument();
    protected virtual object CloneImpl();
    internal void CloneShapeFormat(Shape shape);
    internal Color StyleColorTransform(List`1<DictionaryEntry> fillTransformation, Color themeColor, UInt32& opacity);
    private double GetPercentage(string value);
    private bool ColorTransform(string localName, string value, Color& themeColor);
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    public void ApplyCharacterFormat(WCharacterFormat charFormat);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    private void SetShapeWidth(WSection section);
    private void SetShapeHeight(WSection section);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal void UpdateShapeBoundsToLayoutTextBody(RectangleF& layoutRect, InternalMargin internalMargin, LayoutedWidget ltWidget);
    internal bool IsNoNeedToConsiderLineWidth();
    internal Dictionary`2<string, string> GetGuideList();
    internal Dictionary`2<string, string> GetAvList();
    internal void SetGuideList(Dictionary`2<string, string> value);
    internal void SetAvList(Dictionary`2<string, string> value);
    internal virtual void Close();
    internal bool StartsWithExt(string text, string value);
    internal Byte[] GetAsImage();
}
public abstract class Syncfusion.DocIO.DLS.ShapeBase : ShapeCommon {
    private int m_ZOrderPosition;
    private HorizontalOrigin m_HorizontalOrigin;
    private VerticalOrigin m_VerticalOrigin;
    private HorizontalOrigin m_relHorzOrigin;
    private VerticalOrigin m_relVertOrigin;
    private HorizontalOrigin m_relWidthHorzOrigin;
    private VerticalOrigin m_relHeightVertOrigin;
    internal WrapFormat m_WrapFormat;
    private float m_relHorzpos;
    private float m_relvertpos;
    private float m_relHeight;
    private float m_relWidth;
    private ShapeHorizontalAlignment m_horAlignment;
    private ShapeVerticalAlignment m_vertAlignment;
    private float m_horizPosition;
    private float m_vertPosition;
    private byte m_bFlags;
    internal byte m_bFlags1;
    private static byte LeftEdgeExtentKey;
    private static byte RightEdgeExtentKey;
    private static byte TopEdgeExtentKey;
    private static byte BottomEdgeExtentKey;
    public HorizontalOrigin HorizontalOrigin { get; public set; }
    internal HorizontalOrigin RelativeWidthHorizontalOrigin { get; internal set; }
    internal VerticalOrigin RelativeHeightVerticalOrigin { get; internal set; }
    internal HorizontalOrigin RelativeHorizontalOrigin { get; internal set; }
    internal VerticalOrigin RelativeVerticalOrigin { get; internal set; }
    public ShapeHorizontalAlignment HorizontalAlignment { get; public set; }
    public float HorizontalPosition { get; public set; }
    internal float RelativeHorizontalPosition { get; internal set; }
    internal float RelativeVerticalPosition { get; internal set; }
    internal float RelativeHeight { get; internal set; }
    internal float RelativeWidth { get; internal set; }
    internal bool IsRelativeVerticalPosition { get; internal set; }
    internal bool IsRelativeHorizontalPosition { get; internal set; }
    internal bool IsRelativeHeight { get; internal set; }
    internal bool IsRelativeWidth { get; internal set; }
    public VerticalOrigin VerticalOrigin { get; public set; }
    public ShapeVerticalAlignment VerticalAlignment { get; public set; }
    public float VerticalPosition { get; public set; }
    public WrapFormat WrapFormat { get; public set; }
    internal int ZOrderPosition { get; internal set; }
    public bool IsBelowText { get; public set; }
    internal bool LayoutInCell { get; internal set; }
    public bool LockAnchor { get; public set; }
    internal bool IsCloned { get; internal set; }
    public bool Visible { get; public set; }
    internal float LeftEdgeExtent { get; internal set; }
    internal float TopEdgeExtent { get; internal set; }
    internal float RightEdgeExtent { get; internal set; }
    internal float BottomEdgeExtent { get; internal set; }
    internal ShapeBase(WordDocument doc);
    public HorizontalOrigin get_HorizontalOrigin();
    public void set_HorizontalOrigin(HorizontalOrigin value);
    internal HorizontalOrigin get_RelativeWidthHorizontalOrigin();
    internal void set_RelativeWidthHorizontalOrigin(HorizontalOrigin value);
    internal VerticalOrigin get_RelativeHeightVerticalOrigin();
    internal void set_RelativeHeightVerticalOrigin(VerticalOrigin value);
    internal HorizontalOrigin get_RelativeHorizontalOrigin();
    internal void set_RelativeHorizontalOrigin(HorizontalOrigin value);
    internal VerticalOrigin get_RelativeVerticalOrigin();
    internal void set_RelativeVerticalOrigin(VerticalOrigin value);
    public ShapeHorizontalAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(ShapeHorizontalAlignment value);
    public float get_HorizontalPosition();
    public void set_HorizontalPosition(float value);
    internal float get_RelativeHorizontalPosition();
    internal void set_RelativeHorizontalPosition(float value);
    internal float get_RelativeVerticalPosition();
    internal void set_RelativeVerticalPosition(float value);
    internal float get_RelativeHeight();
    internal void set_RelativeHeight(float value);
    internal float get_RelativeWidth();
    internal void set_RelativeWidth(float value);
    internal bool get_IsRelativeVerticalPosition();
    internal void set_IsRelativeVerticalPosition(bool value);
    internal bool get_IsRelativeHorizontalPosition();
    internal void set_IsRelativeHorizontalPosition(bool value);
    internal bool get_IsRelativeHeight();
    internal void set_IsRelativeHeight(bool value);
    internal bool get_IsRelativeWidth();
    internal void set_IsRelativeWidth(bool value);
    public VerticalOrigin get_VerticalOrigin();
    public void set_VerticalOrigin(VerticalOrigin value);
    public ShapeVerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(ShapeVerticalAlignment value);
    public float get_VerticalPosition();
    public void set_VerticalPosition(float value);
    public WrapFormat get_WrapFormat();
    public void set_WrapFormat(WrapFormat value);
    internal int get_ZOrderPosition();
    internal void set_ZOrderPosition(int value);
    public bool get_IsBelowText();
    public void set_IsBelowText(bool value);
    internal bool get_LayoutInCell();
    internal void set_LayoutInCell(bool value);
    public bool get_LockAnchor();
    public void set_LockAnchor(bool value);
    internal bool get_IsCloned();
    internal void set_IsCloned(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    internal float get_LeftEdgeExtent();
    internal void set_LeftEdgeExtent(float value);
    internal float get_TopEdgeExtent();
    internal void set_TopEdgeExtent(float value);
    internal float get_RightEdgeExtent();
    internal void set_RightEdgeExtent(float value);
    internal float get_BottomEdgeExtent();
    internal void set_BottomEdgeExtent(float value);
    protected virtual object CloneImpl();
    internal virtual void Close();
}
[DefaultMemberAttribute("Item")]
public abstract class Syncfusion.DocIO.DLS.ShapeCommon : ParagraphItem {
    private long m_ID;
    private string m_Name;
    private string m_AlternateText;
    private string m_Title;
    private float m_Height;
    private float m_Width;
    private float m_widthScale;
    private float m_heightScale;
    internal Dictionary`2<string, Stream> m_docxProps;
    private Dictionary`2<int, object> m_propertiesHash;
    internal static byte WidthScaleKey;
    private string m_path;
    private float m_coordinateXOrigin;
    private float m_coordinateYOrigin;
    private string m_coordinateSize;
    internal long ShapeID { get; internal set; }
    public float Height { get; public set; }
    public float Width { get; public set; }
    public float HeightScale { get; public set; }
    public float WidthScale { get; public set; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    protected object Item { get; protected set; }
    public string AlternativeText { get; public set; }
    public string Name { get; public set; }
    public string Title { get; public set; }
    internal Dictionary`2<string, Stream> DocxProps { get; internal set; }
    internal string Path { get; internal set; }
    internal string CoordinateSize { get; internal set; }
    internal float CoordinateXOrigin { get; internal set; }
    internal float CoordinateYOrigin { get; internal set; }
    internal ShapeCommon(WordDocument doc);
    internal long get_ShapeID();
    internal void set_ShapeID(long value);
    public float get_Height();
    public void set_Height(float value);
    public float get_Width();
    public void set_Width(float value);
    public float get_HeightScale();
    public void set_HeightScale(float value);
    public float get_WidthScale();
    public void set_WidthScale(float value);
    internal Dictionary`2<int, object> get_PropertiesHash();
    internal void SetKeyValue(int propKey, object value);
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    internal bool HasKey(int Key);
    public string get_AlternativeText();
    public void set_AlternativeText(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Title();
    public void set_Title(string value);
    internal Dictionary`2<string, Stream> get_DocxProps();
    internal void set_DocxProps(Dictionary`2<string, Stream> value);
    internal string get_Path();
    internal void set_Path(string value);
    internal string get_CoordinateSize();
    internal void set_CoordinateSize(string value);
    internal float get_CoordinateXOrigin();
    internal void set_CoordinateXOrigin(float value);
    internal float get_CoordinateYOrigin();
    internal void set_CoordinateYOrigin(float value);
    protected virtual object CloneImpl();
    internal RectangleF GetBoundsToLayoutShapeTextBody(AutoShapeType autoShapeType, Dictionary`2<string, string> shapeGuide, RectangleF bounds);
    internal virtual void Close();
}
public class Syncfusion.DocIO.DLS.ShapeObject : ParagraphItem {
    private FileShapeAddress m_fspa;
    private WTextBoxCollection m_textBoxColl;
    private byte m_bFlags;
    public EntityType EntityType { get; }
    internal FileShapeAddress FSPA { get; internal set; }
    internal WTextBoxCollection AutoShapeTextCollection { get; }
    internal bool IsHeaderAutoShape { get; internal set; }
    internal bool AllowInCell { get; internal set; }
    internal WCharacterFormat CharacterFormat { get; }
    internal ShapeObject(IWordDocument doc);
    public virtual EntityType get_EntityType();
    internal FileShapeAddress get_FSPA();
    internal void set_FSPA(FileShapeAddress value);
    internal WTextBoxCollection get_AutoShapeTextCollection();
    internal bool get_IsHeaderAutoShape();
    internal void set_IsHeaderAutoShape(bool value);
    internal bool get_AllowInCell();
    internal void set_AllowInCell(bool value);
    internal WCharacterFormat get_CharacterFormat();
    internal virtual void AddSelf();
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    protected virtual object CloneImpl();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void InitXDLSHolder();
    internal virtual void Close();
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.DocIO.DLS.ShapeObjectTextCollection : object {
    private Dictionary`2<int, WTextBox> m_textTable;
    public void AddTextBox(int shapeId, WTextBox textBox);
    public WTextBox GetTextBox(int shapeId);
    internal void Close();
}
internal enum Syncfusion.DocIO.DLS.ShapePosition : Enum {
    public int value__;
    public static ShapePosition Static;
    public static ShapePosition Absolute;
    public static ShapePosition Relative;
}
internal class Syncfusion.DocIO.DLS.ShapeStyleReference : object {
    private int m_styleRefIndex;
    private Color m_styleRefColor;
    private float m_styleRefOpacity;
    internal int StyleRefIndex { get; internal set; }
    internal Color StyleRefColor { get; internal set; }
    internal float StyleRefOpacity { get; internal set; }
    internal int get_StyleRefIndex();
    internal void set_StyleRefIndex(int value);
    internal Color get_StyleRefColor();
    internal void set_StyleRefColor(Color value);
    internal float get_StyleRefOpacity();
    internal void set_StyleRefOpacity(float value);
    internal bool Compare(ShapeStyleReference ShapeStyleReference);
    internal StringBuilder GetAsString();
}
public enum Syncfusion.DocIO.DLS.ShapeType : Enum {
    public int value__;
    public static ShapeType Text;
    public static ShapeType Rectangle;
    public static ShapeType Image;
    public static ShapeType Arc;
    public static ShapeType Ellipse;
    public static ShapeType Line;
    public static ShapeType Path;
    public static ShapeType Bezier;
    public static ShapeType Pie;
    public static ShapeType Polygon;
}
public class Syncfusion.DocIO.DLS.SortedDictionary`2 : TypedSortedListEx`2<TKey, TValue> {
}
internal class Syncfusion.DocIO.DLS.SttbfAssoc : object {
    private ushort m_fExtend;
    private ushort m_cData;
    private ushort m_cbExtra;
    private string m_template;
    private string m_title;
    private string m_subject;
    private string m_keyWords;
    private string m_author;
    private string m_lastModifiedBy;
    private string m_dataSource;
    private string m_headerDocument;
    private string m_writePassword;
    internal string AttachedTemplate { get; internal set; }
    internal string Title { get; internal set; }
    internal string Subject { get; internal set; }
    internal string KeyWords { get; internal set; }
    internal string Author { get; internal set; }
    internal string LastModifiedBy { get; internal set; }
    internal string MailMergeDataSource { get; internal set; }
    internal string MailMergeHeaderDocument { get; internal set; }
    internal string WritePassword { get; internal set; }
    internal string get_AttachedTemplate();
    internal void set_AttachedTemplate(string value);
    internal string get_Title();
    internal void set_Title(string value);
    internal string get_Subject();
    internal void set_Subject(string value);
    internal string get_KeyWords();
    internal void set_KeyWords(string value);
    internal string get_Author();
    internal void set_Author(string value);
    internal string get_LastModifiedBy();
    internal void set_LastModifiedBy(string value);
    internal string get_MailMergeDataSource();
    internal void set_MailMergeDataSource(string value);
    internal string get_MailMergeHeaderDocument();
    internal void set_MailMergeHeaderDocument(string value);
    internal string get_WritePassword();
    internal void set_WritePassword(string value);
    internal void Parse(Byte[] associatedStrings);
    internal Byte[] GetAssociatedStrings();
}
public abstract class Syncfusion.DocIO.DLS.Style : XDLSSerializableBase {
    protected static int DEF_USER_STYLE_ID;
    private int m_styleId;
    private string m_strName;
    protected IStyle m_baseStyle;
    protected WCharacterFormat m_chFormat;
    protected string m_nextStyle;
    protected string m_linkedStyleName;
    private string m_styleIDName;
    protected WordStyleType m_typeCode;
    protected Byte[] m_tapx;
    private byte m_bFlags;
    private int uiPriority;
    private List`1<Entity> m_rangeCollection;
    internal bool IsRemoving;
    internal Byte[] TableStyleData { get; internal set; }
    internal WordStyleType TypeCode { get; internal set; }
    public WCharacterFormat CharacterFormat { get; }
    public string Name { get; public set; }
    internal IStyle BaseStyle { get; }
    internal int StyleId { get; internal set; }
    public StyleType StyleType { get; }
    public BuiltinStyle BuiltInStyleIdentifier { get; }
    internal string NextStyle { get; internal set; }
    internal string LinkStyle { get; internal set; }
    public string LinkedStyleName { get; public set; }
    internal string StyleIDName { get; internal set; }
    public bool IsPrimaryStyle { get; public set; }
    internal bool IsSemiHidden { get; internal set; }
    internal bool UnhideWhenUsed { get; internal set; }
    internal bool IsCustom { get; internal set; }
    internal int UIPriority { get; internal set; }
    internal List`1<Entity> RangeCollection { get; }
    protected Style(WordDocument doc);
    internal Byte[] get_TableStyleData();
    internal void set_TableStyleData(Byte[] value);
    internal WordStyleType get_TypeCode();
    internal void set_TypeCode(WordStyleType value);
    public sealed virtual WCharacterFormat get_CharacterFormat();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal IStyle get_BaseStyle();
    internal int get_StyleId();
    internal void set_StyleId(int value);
    public abstract virtual StyleType get_StyleType();
    public BuiltinStyle get_BuiltInStyleIdentifier();
    internal string get_NextStyle();
    internal void set_NextStyle(string value);
    internal string get_LinkStyle();
    internal void set_LinkStyle(string value);
    public string get_LinkedStyleName();
    public void set_LinkedStyleName(string value);
    internal string get_StyleIDName();
    internal void set_StyleIDName(string value);
    public sealed virtual bool get_IsPrimaryStyle();
    public sealed virtual void set_IsPrimaryStyle(bool value);
    internal bool get_IsSemiHidden();
    internal void set_IsSemiHidden(bool value);
    internal bool get_UnhideWhenUsed();
    internal void set_UnhideWhenUsed(bool value);
    internal bool get_IsCustom();
    internal void set_IsCustom(bool value);
    internal int get_UIPriority();
    internal void set_UIPriority(int value);
    internal List`1<Entity> get_RangeCollection();
    public virtual void ApplyBaseStyle(string styleName);
    public void ApplyBaseStyle(BuiltinStyle bStyle);
    private bool IsStyleNotInBuiltinStyles();
    public sealed virtual void Remove();
    public abstract virtual IStyle Clone();
    private void SetLinkedStyle(string linkStyleName);
    internal virtual void ApplyBaseStyle(Style baseStyle);
    internal void RemoveBaseStyle();
    internal void SetStyleName(string name);
    private void UpdateStyleUniqueCollection(Dictionary`2<string, List`1<IStyle>> uniqueNameOrIdNameCollection, string keyValue);
    private bool RemoveStyleFromUniqueCollection(Dictionary`2<string, List`1<IStyle>> uniqueNameOrIdNameCollection, string keyValue);
    private void UpdateStyleUniqueCollection(Dictionary`2<int, List`1<IStyle>> uniqueIdCollection, int keyValue);
    private bool RemoveStyleFromUniqueCollection(Dictionary`2<int, List`1<IStyle>> uniqueIdCollection, int keyValue);
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal static bool HasGuid(string styleName, String& guid);
    internal virtual bool Compare(Style style);
    internal IStyle ImportStyleTo(WordDocument doc, bool isParagraphStyle);
    private Style CompareAndImportStyle(Style foundStyle, WordDocument doc, List`1<string> styleNames);
    private IStyle AddNewStyle(WordDocument doc, Style newStyle, bool isToClone, List`1<string> styleNames);
    private void CopyBaseStyleFormatting(WordDocument destDocument, WParagraphStyle paraStyle);
    internal string GetUniqueStyleName(string styleName, List`1<string> styleNames);
    private string GetStyleNameId(string styleName);
    public static IStyle CreateBuiltinStyle(BuiltinStyle bStyle, WordDocument doc);
    internal static IStyle CreateBuiltinCharacterStyle(BuiltinStyle bStyle, WordDocument doc);
    internal static IStyle CreateBuiltinStyle(BuiltinTableStyle bStyle, WordDocument doc);
    public static IStyle CreateBuiltinStyle(BuiltinStyle bStyle, StyleType type, WordDocument doc);
    internal static string BuiltInToName(BuiltinStyle bstyle);
    internal static string BuiltInToName(BuiltinTableStyle bstyle);
    public static BuiltinStyle NameToBuiltIn(string styleName);
    internal static bool IsListStyle(BuiltinStyle bstyle);
    private sealed virtual override void Syncfusion.DocIO.DLS.IStyle.Close();
    internal virtual void Close();
    internal Dictionary`2<string, string> GetBuiltinStyles();
    internal Dictionary`2<string, int> GetBuiltinStyleIds();
    internal virtual bool CompareStyleBetweenDocuments(Style style);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void InitXDLSHolder();
    protected virtual void RestoreReference(string name, int index);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.StyleCollection : CollectionImpl {
    internal string m_FixedIndex13StyleName;
    internal string m_FixedIndex14StyleName;
    private byte m_bFlags;
    internal Dictionary`2<string, List`1<IStyle>> m_uniqueNameCollection;
    internal Dictionary`2<int, List`1<IStyle>> m_uniqueStyleIdCollection;
    internal Dictionary`2<string, List`1<IStyle>> m_uniqueStyleIdNameCollection;
    public IStyle Item { get; }
    public bool FixedIndex13HasStyle { get; public set; }
    public bool FixedIndex14HasStyle { get; public set; }
    public string FixedIndex13StyleName { get; public set; }
    public string FixedIndex14StyleName { get; public set; }
    internal StyleCollection(WordDocument doc);
    public sealed virtual IStyle get_Item(int index);
    public sealed virtual bool get_FixedIndex13HasStyle();
    public sealed virtual void set_FixedIndex13HasStyle(bool value);
    public sealed virtual bool get_FixedIndex14HasStyle();
    public sealed virtual void set_FixedIndex14HasStyle(bool value);
    public sealed virtual string get_FixedIndex13StyleName();
    public sealed virtual void set_FixedIndex13StyleName(string value);
    public sealed virtual string get_FixedIndex14StyleName();
    public sealed virtual void set_FixedIndex14StyleName(string value);
    public sealed virtual int Add(IStyle style);
    public sealed virtual IStyle FindByName(string name);
    public sealed virtual IStyle FindByName(string name, StyleType styleType);
    internal IStyle FindByName(string name, StyleType styleType, List`1& styelNames, Boolean& isDiffTypeStyleFound);
    public sealed virtual IStyle FindById(int styleId);
    internal void CloneToImpl(CollectionImpl coll);
    internal void Remove(IStyle style);
    private void UpdateAlternateStyleName(IStyle style);
    private bool IsSameNameExists(string styleName);
    internal static IStyle FindStyleByName(IList styles, string name, Dictionary`2<string, List`1<IStyle>> uniqueNameCollection);
    internal static IStyle FindStyleByName(IList styles, string name, bool findFirstStyle);
    internal IStyle FindFirstStyleByName(string name);
    internal Style FindStyleById(string name);
    internal Style FindStyleById(string name, StyleType styleType);
    internal static IStyle FindStyleByName(IList styles, string name, StyleType styleType, Dictionary`2<string, List`1<IStyle>> uniqueNameCollection);
    internal IStyle FindStyleByName(IList styles, string name, StyleType styleType, List`1& styleNames, Boolean& isDiffTypeStyleFound);
    internal IStyle FindStyleById(IList styles, int styleId, Dictionary`2<int, List`1<IStyle>> uniqueIdCollection);
    internal void Close();
}
public enum Syncfusion.DocIO.DLS.StyleType : Enum {
    public int value__;
    public static StyleType ParagraphStyle;
    public static StyleType CharacterStyle;
    public static StyleType TableStyle;
    public static StyleType NumberingStyle;
    public static StyleType OtherStyle;
}
public enum Syncfusion.DocIO.DLS.StylisticSetType : Enum {
    public int value__;
    public static StylisticSetType StylisticSetDefault;
    public static StylisticSetType StylisticSet01;
    public static StylisticSetType StylisticSet02;
    public static StylisticSetType StylisticSet03;
    public static StylisticSetType StylisticSet04;
    public static StylisticSetType StylisticSet05;
    public static StylisticSetType StylisticSet06;
    public static StylisticSetType StylisticSet07;
    public static StylisticSetType StylisticSet08;
    public static StylisticSetType StylisticSet09;
    public static StylisticSetType StylisticSet10;
    public static StylisticSetType StylisticSet11;
    public static StylisticSetType StylisticSet12;
    public static StylisticSetType StylisticSet13;
    public static StylisticSetType StylisticSet14;
    public static StylisticSetType StylisticSet15;
    public static StylisticSetType StylisticSet16;
    public static StylisticSetType StylisticSet17;
    public static StylisticSetType StylisticSet18;
    public static StylisticSetType StylisticSet19;
    public static StylisticSetType StylisticSet20;
}
public class Syncfusion.DocIO.DLS.SubstituteFontEventArgs : EventArgs {
    private string m_originalFontName;
    private string m_alternateFontName;
    private Stream m_alternateFontStream;
    private FontStyle m_fontStyle;
    [ObsoleteAttribute("This property has been deprecated. Use the OriginalFontName property of SubstituteFontEventArgs class to get the original font name which need to be substituted.")]
public string OrignalFontName { get; internal set; }
    public string OriginalFontName { get; internal set; }
    public string AlternateFontName { get; public set; }
    public FontStyle FontStyle { get; internal set; }
    public Stream AlternateFontStream { get; public set; }
    internal SubstituteFontEventArgs(string orignalFontName, string alternateFontName, FontStyle fontStyle);
    public string get_OrignalFontName();
    internal void set_OrignalFontName(string value);
    public string get_OriginalFontName();
    internal void set_OriginalFontName(string value);
    public string get_AlternateFontName();
    public void set_AlternateFontName(string value);
    public FontStyle get_FontStyle();
    internal void set_FontStyle(FontStyle value);
    public Stream get_AlternateFontStream();
    public void set_AlternateFontStream(Stream value);
}
public class Syncfusion.DocIO.DLS.SubstituteFontEventHandler : MulticastDelegate {
    public SubstituteFontEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SubstituteFontEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, SubstituteFontEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Syncfusion.DocIO.DLS.SubSuperScript : Enum {
    public int value__;
    public static SubSuperScript None;
    public static SubSuperScript SuperScript;
    public static SubSuperScript SubScript;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.SummaryDocumentProperties : XDLSSerializableBase {
    protected Dictionary`2<int, DocumentProperty> m_summaryHash;
    protected Dictionary`2<int, string> m_internalSummaryHash;
    internal static int ContentStatusKey;
    public string Author { get; public set; }
    public string ApplicationName { get; public set; }
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public string Keywords { get; public set; }
    public string Comments { get; public set; }
    public string Template { get; public set; }
    public string LastAuthor { get; public set; }
    public string RevisionNumber { get; public set; }
    public TimeSpan TotalEditingTime { get; public set; }
    public DateTime LastPrinted { get; public set; }
    public DateTime CreateDate { get; public set; }
    public DateTime LastSaveDate { get; public set; }
    public int PageCount { get; internal set; }
    public int WordCount { get; internal set; }
    public int CharCount { get; internal set; }
    public string Thumbnail { get; public set; }
    public int DocSecurity { get; public set; }
    internal string ContentStatus { get; internal set; }
    internal DocumentProperty Item { get; }
    public int Count { get; }
    internal Dictionary`2<int, DocumentProperty> SummaryHash { get; }
    internal SummaryDocumentProperties(int count);
    internal SummaryDocumentProperties(WordDocument doc);
    public string get_Author();
    public void set_Author(string value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_Keywords();
    public void set_Keywords(string value);
    public string get_Comments();
    public void set_Comments(string value);
    public string get_Template();
    public void set_Template(string value);
    public string get_LastAuthor();
    public void set_LastAuthor(string value);
    public string get_RevisionNumber();
    public void set_RevisionNumber(string value);
    public TimeSpan get_TotalEditingTime();
    public void set_TotalEditingTime(TimeSpan value);
    public DateTime get_LastPrinted();
    public void set_LastPrinted(DateTime value);
    public DateTime get_CreateDate();
    public void set_CreateDate(DateTime value);
    public DateTime get_LastSaveDate();
    public void set_LastSaveDate(DateTime value);
    public int get_PageCount();
    internal void set_PageCount(int value);
    public int get_WordCount();
    internal void set_WordCount(int value);
    public int get_CharCount();
    internal void set_CharCount(int value);
    public string get_Thumbnail();
    public void set_Thumbnail(string value);
    public int get_DocSecurity();
    public void set_DocSecurity(int value);
    internal string get_ContentStatus();
    internal void set_ContentStatus(string value);
    internal DocumentProperty get_Item(PIDSI pidsi);
    public int get_Count();
    internal Dictionary`2<int, DocumentProperty> get_SummaryHash();
    private bool HasKey(int key);
    public void Add(int key, DocumentProperty props);
    internal void SetPropertyValue(PIDSI pidsi, object value);
    internal bool HasKeyValue(int Key);
    internal void SetKeyValue(int propKey, string value);
    internal virtual void Close();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.Tab : XDLSSerializableBase {
    private TabJustification m_jc;
    private TabLeader m_tlc;
    private float m_tabPosition;
    private float m_tabDeletePosition;
    internal Dictionary`2<int, object> m_propertiesHash;
    internal static byte DeletePositionKey;
    public TabJustification Justification { get; public set; }
    public TabLeader TabLeader { get; public set; }
    public float Position { get; public set; }
    public float DeletePosition { get; public set; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    protected object Item { get; protected set; }
    internal Tab(IWordDocument doc);
    internal Tab(IWordDocument doc, float position, TabJustification justification, TabLeader leader);
    internal Tab(IWordDocument doc, float position, float deletePosition, TabJustification justification, TabLeader leader);
    public TabJustification get_Justification();
    public void set_Justification(TabJustification value);
    public TabLeader get_TabLeader();
    public void set_TabLeader(TabLeader value);
    public float get_Position();
    public void set_Position(float value);
    public float get_DeletePosition();
    public void set_DeletePosition(float value);
    internal Dictionary`2<int, object> get_PropertiesHash();
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    internal bool HasKey(int Key);
    internal void SetKeyValue(int propKey, object value);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    internal Tab Clone();
    private void OnChange();
    internal bool Compare(Tab tab);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.TabCollection : CollectionImpl {
    private byte m_bFlags;
    public Tab Item { get; }
    internal bool CancelOnChangeEvent { get; internal set; }
    internal TabCollection(WordDocument document);
    internal TabCollection(WordDocument document, FormatBase owner);
    public Tab get_Item(int index);
    internal bool get_CancelOnChangeEvent();
    internal void set_CancelOnChangeEvent(bool value);
    public Tab AddTab();
    public Tab AddTab(float position, TabJustification justification, TabLeader leader);
    public Tab AddTab(float position);
    public void Clear();
    public void RemoveAt(int index);
    public void RemoveByTabPosition(double position);
    internal void AddTab(Tab tab);
    internal void OnChange();
    internal bool Compare(TabCollection tabs);
    internal void UpdateSourceFormatting(TabCollection tabs);
    internal void UpdateTabs(TabCollection tabs);
    internal bool HasTabPosition(float tabPosition);
    internal void SortTabs();
}
public enum Syncfusion.DocIO.DLS.TabJustification : Enum {
    public int value__;
    public static TabJustification Left;
    public static TabJustification Centered;
    public static TabJustification Right;
    public static TabJustification Decimal;
    public static TabJustification Bar;
    public static TabJustification List;
}
public enum Syncfusion.DocIO.DLS.TabLeader : Enum {
    public int value__;
    public static TabLeader NoLeader;
    public static TabLeader Dotted;
    public static TabLeader Hyphenated;
    public static TabLeader Single;
    public static TabLeader Heavy;
}
public class Syncfusion.DocIO.DLS.TableOfContent : ParagraphItem {
    private static int DEF_UPPER_HEADING_LEVEL;
    private static int DEF_LOWER_HEADING_LEVEL;
    private static char DEF_HEADING_LEVELS_SWITCH;
    private static char DEF_HYPERLINK_SWITCH;
    private static char DEF_PAGE_NUMBERS_SWITCH;
    private static char DEF_SEPARATOR_SWITCH;
    private static char DEF_USE_OUTLINE_SWITCH;
    private static char DEF_USE_FIELDS_SWITCH;
    private static char DEF_STYLES_SWITCH;
    private static char DEF_INCLUDE_NEWLINE_CHARACTERS_SWITCH;
    private static char DEF_TABLE_OF_FIGURES_SWITCH;
    private static char DEF_INCLUDE_CAPTIONLABEL_AND_NUMBERS;
    private WField m_tocField;
    private int m_upperHeadingLevel;
    private int m_lowerHeadingLevel;
    private string m_tableID;
    private Dictionary`2<int, List`1<WParagraphStyle>> m_tocStyles;
    private Dictionary`2<Entity, Entity> m_tocEntryEntities;
    private string m_lstSepar;
    private Dictionary`2<int, List`1<string>> m_tocLevels;
    private WParagraph m_tocParagraph;
    internal Entity m_tocEntryLastEntity;
    internal WFieldMark m_captionEndEntity;
    private string m_tableOfFiguresLabel;
    private byte m_bFlags;
    private byte m_bFlags1;
    internal TabLeader m_tabLeader;
    internal bool m_docTocEntryLastEntityReached;
    public string TableOfFiguresLabel { get; public set; }
    public bool IncludeCaptionLabelsAndNumbers { get; public set; }
    public bool UseHeadingStyles { get; public set; }
    public int UpperHeadingLevel { get; public set; }
    public int LowerHeadingLevel { get; public set; }
    public bool UseTableEntryFields { get; public set; }
    public string TableID { get; public set; }
    public bool RightAlignPageNumbers { get; public set; }
    public bool IncludePageNumbers { get; public set; }
    public bool UseHyperlinks { get; public set; }
    public bool UseOutlineLevels { get; public set; }
    public EntityType EntityType { get; }
    internal string FormattingString { get; internal set; }
    internal WField TOCField { get; }
    internal Dictionary`2<int, List`1<WParagraphStyle>> TOCStyles { get; }
    internal Dictionary`2<Entity, Entity> TOCEntryEntities { get; }
    internal Dictionary`2<int, List`1<string>> TOCLevels { get; }
    private WParagraph LastTOCParagraph { get; }
    private bool InvalidFormatString { get; private set; }
    private bool FormattingParsed { get; private set; }
    public bool IncludeNewLineCharacters { get; public set; }
    private SizeF Syncfusion.Layouting.ILayoutInfo.Size { get; private set; }
    private SyncFont Syncfusion.Layouting.ILayoutInfo.Font { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsClipped { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsVerticalText { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsSkip { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsSkipBottomAlign { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsLineContainer { get; }
    private ChildrenLayoutDirection Syncfusion.Layouting.ILayoutInfo.ChildrenLayoutDirection { get; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsLineBreak { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.TextWrap { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsPageBreakItem { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsFirstItemInPage { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsKeepWithNext { get; private set; }
    private bool Syncfusion.Layouting.ILayoutInfo.IsHiddenRow { get; private set; }
    public TableOfContent(IWordDocument doc);
    public TableOfContent(IWordDocument doc, string switches);
    public string get_TableOfFiguresLabel();
    public void set_TableOfFiguresLabel(string value);
    public bool get_IncludeCaptionLabelsAndNumbers();
    public void set_IncludeCaptionLabelsAndNumbers(bool value);
    public bool get_UseHeadingStyles();
    public void set_UseHeadingStyles(bool value);
    public int get_UpperHeadingLevel();
    public void set_UpperHeadingLevel(int value);
    public int get_LowerHeadingLevel();
    public void set_LowerHeadingLevel(int value);
    public bool get_UseTableEntryFields();
    public void set_UseTableEntryFields(bool value);
    public string get_TableID();
    public void set_TableID(string value);
    public bool get_RightAlignPageNumbers();
    public void set_RightAlignPageNumbers(bool value);
    public bool get_IncludePageNumbers();
    public void set_IncludePageNumbers(bool value);
    public bool get_UseHyperlinks();
    public void set_UseHyperlinks(bool value);
    public bool get_UseOutlineLevels();
    public void set_UseOutlineLevels(bool value);
    public virtual EntityType get_EntityType();
    internal string get_FormattingString();
    internal void set_FormattingString(string value);
    internal WField get_TOCField();
    internal Dictionary`2<int, List`1<WParagraphStyle>> get_TOCStyles();
    internal Dictionary`2<Entity, Entity> get_TOCEntryEntities();
    internal Dictionary`2<int, List`1<string>> get_TOCLevels();
    private WParagraph get_LastTOCParagraph();
    private bool get_InvalidFormatString();
    private void set_InvalidFormatString(bool value);
    private bool get_FormattingParsed();
    private void set_FormattingParsed(bool value);
    public bool get_IncludeNewLineCharacters();
    public void set_IncludeNewLineCharacters(bool value);
    public void SetTOCLevelStyle(int levelNumber, string styleName);
    public string GetTOCLevelStyle(int levelNumber);
    public List`1<string> GetTOCLevelStyles(int levelNumber);
    internal WField FindKey();
    private void ParseSwitches();
    private IWParagraphStyle GetBuiltinStyle(BuiltinStyle builtinStyle);
    private void CreateDefStylesColl();
    private void UpdateFormattingString();
    internal void UpdateTOCFieldCode();
    private void RemovePreviousFieldCodeItems();
    private void UpdateTOCLevels();
    private void UpdateHyperlinks();
    private void UpdateNewLineCharacters();
    private void UpdateUsePageNumbers();
    private void UpdatePageNumberAlign();
    private void UpdateUseOutlineLevels();
    private void UpdateUseField();
    private void UpdateHeaderStyles();
    private void UpdateTableOfFigureLabel();
    private void UpdateCaptionLabelAndNumbers();
    private void ParseLabelName(string optionString);
    private void ParseHeadingLevels(string optionString);
    private void ParseNumberAlignment(string optionString);
    private void ParseUseField(string optionString);
    private void ParseHeaderStylesAndUpdateLevel(string optionString, bool isHeadingLevelDefined);
    private bool IsHeadingStyleContainsLevel(string text);
    private void OnChange();
    private void OnGetValue();
    private void SetStyleForTOCLevel(int levelNumber, string styleName, bool onSetProperty);
    private void CheckLevelNumber(string parameterName, int levelNumber);
    internal List`1<string> UpdateTOCStyleLevels();
    internal List`1<ParagraphItem> ParseDocument(List`1<string> tocLinkCharacterStyleNames);
    private void ParseTextBody(WTextBody textBody, List`1<string> tocLinkCharacterStyleNames, List`1<ParagraphItem> tocParaItems, Boolean& isParsingTOCParagraph);
    private void ParseTable(IWTable table, List`1<string> tocLinkCharacterStyleNames, List`1<ParagraphItem> tocParaItems, Boolean& isParsingTOCParagraph);
    private bool CheckTableOfFiguresLabel(IWParagraph paragraph);
    private void ParseParagraph(IWParagraph paragraph, List`1<string> tocLinkCharacterStyleNames, List`1<ParagraphItem> tocParaItems, Boolean& isParsingTOCParagraph);
    private bool CheckOutlineParagraph(IWParagraph paragraph);
    private void CheckAndSplitParagraph(IWParagraph paragraph);
    private void UpdateTabCharacters(WTextRange textRange);
    private void UpdateNewLineCharacters(WTextRange textRange, string splitText);
    private void CreateParagraph(WParagraph paragraph, int index);
    private void SplitTOCParagraph(WParagraph tocParagraph, Int32& paraIndex);
    private bool ContainsValidItems(WParagraph paragraph);
    internal void RemoveUpdatedTocEntries();
    private bool CheckParagraphStyle(string styleName);
    private string CheckAndGetTOCLinkStyle(WParagraph paragraph, Boolean& isTocReferLinkStyle, List`1<string> tocLinkCharacterStyleNames, List`1<ParagraphItem> tocParaItems);
    private int GetTOCLevel(string styleName, WParagraph paragraph);
    private void InsertBookmark(IWParagraph paragraph, WField field, int startIndex, Boolean& isTocReferLinkStyle, List`1<string> tocLinkCharacterStyleNames, List`1<ParagraphItem> tocParaItems);
    private void InsertBookmarkHyperlink(IWParagraph paragraph, WField field, string bookmark, Boolean& isTocReferLinkStyle, List`1<string> tocLinkCharacterStyleNames, List`1<ParagraphItem> tocParaItems);
    private void CreateHyperlink(IWParagraph paragraph, WParagraph tocParagraph, string text, string bookmark, Boolean& isTocReferLinkStyle, List`1<string> tocLinkStyles);
    private void CreateHyperLink(IWParagraph paragraph, WParagraph tocParagraph, bool isTocReferLinkStyle, List`1<string> tocLinkStyles);
    private void AppendTextToTocParagraph(WTextRange paragraphTextRange, string txtValue, WParagraphStyle paragraphStyle, WParagraph tocParagraph);
    private bool IsNeedToApplyFormatting(short key, WParagraphStyle paragraphStyle, WTextRange paragraphTextRange, WCharacterStyle charStyle);
    private bool IsNeedToAddTabStop(WParagraph paragraph, int currentTabItemIndex);
    private bool IsNeedToAddTabStop(int startIndex, int endIndex, WParagraph ownerParagraph);
    private float UpdateTabStopPosition(WParagraph paragraph, Boolean& isTabStopPosFromStyle);
    private float GetTabPositionBasedParagraphStyle(TabCollection tabs, Boolean& isTabStopPosFromStyle, float preTextLength, float tabStopPosition);
    private void createHyperLinkForLinkStyle(IWParagraph paragraph, WParagraph tocParagraph, List`1<string> tocLinkStyles);
    private bool IsNeedToApplyFontName(WTextRange textrange, WCharacterStyle characterStyle);
    private int GetTOCValidItemIndex(WParagraph paragraph);
    private void AddTabsAndPageRefField(WParagraph paragraph, string bookmark);
    private bool CheckTabJustification(WParagraphStyle paraStyle);
    private float GetTabPosition(Entity entity);
    private WParagraph CreateTOCParagraph(int level);
    private string GenerateBookmarkName();
    internal void UpdatePageNumbers(Dictionary`2<Entity, int> tocEntryPageNumbers);
    private void UpdateList(IWParagraph paragraph, WParagraph tocParagraph, Boolean& isTabAdded);
    private void AddListValueAndTab(IWParagraph paragraph, WParagraph tocParagraph, WParagraphStyle tocStyle, string listValue, Boolean& isTabAdded, WCharacterFormat characterFormat);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual object CloneImpl();
    internal virtual void Close();
    private sealed virtual override SizeF Syncfusion.Layouting.ILayoutInfo.get_Size();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_Size(SizeF value);
    private sealed virtual override SyncFont Syncfusion.Layouting.ILayoutInfo.get_Font();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_Font(SyncFont value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsClipped();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsClipped(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsVerticalText();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsVerticalText(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsSkip();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsSkip(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsSkipBottomAlign();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsSkipBottomAlign(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsLineContainer();
    private sealed virtual override ChildrenLayoutDirection Syncfusion.Layouting.ILayoutInfo.get_ChildrenLayoutDirection();
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsLineBreak();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsLineBreak(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_TextWrap();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_TextWrap(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsPageBreakItem();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsPageBreakItem(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsFirstItemInPage();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsFirstItemInPage(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsKeepWithNext();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsKeepWithNext(bool value);
    private sealed virtual override bool Syncfusion.Layouting.ILayoutInfo.get_IsHiddenRow();
    private sealed virtual override void Syncfusion.Layouting.ILayoutInfo.set_IsHiddenRow(bool value);
    internal bool Compare(TableOfContent tableOfContent);
    internal StringBuilder GetAsString();
}
internal class Syncfusion.DocIO.DLS.TablePropertiesConverter : object {
    private static object m_threadLocker;
    private static Byte[] m_cellShadings;
    private static Byte[] m_cellShadings_1st;
    private static Byte[] m_cellShadings_2nd;
    private static Byte[] m_cellShadings_3rd;
    private static Dictionary`2<short, Byte[]> m_cellBorders;
    private static Dictionary`2<short, Byte[]> m_cellTCGRF;
    private static Dictionary`2<short, Byte[]> m_cellWidth;
    private static Byte[] m_topBorderCV;
    private static Byte[] m_leftBorderCV;
    private static Byte[] m_rightBorderCV;
    private static Byte[] m_bottomBorderCV;
    private static Byte[] m_cellBorderType;
    private static TablePropertiesConverter();
    internal static void SprmsToFormat(IWordReaderBase reader, RowFormat rowFormat);
    internal static void SprmsToFormat(SinglePropertyModifierArray sprms, RowFormat rowFormat, WordStyleSheet styleSheet, Dictionary`2<int, string> authorNames, IWordReaderBase reader, bool isNewPropertyHash);
    private static void ApplyBorderStyle(Border border, byte borderTypeValue);
    private static void UpdateRowFormatPropertyHash(RowFormat rowFormat);
    private static void UpdateCellFormatPropertyHash(CellFormat cellFormat);
    private static void UpdatePositioning(TablePositioning positioningOld, TablePositioning positioning);
    private static void UpdatePaddings(Paddings paddingsOld, Paddings paddings);
    private static void UpdateCellPaddings(Dictionary`2<int, Spacings> cellSpacings, WTableRow tableRow, bool isChangedFormat);
    private static void UpdateCellPaddings(Dictionary`2<int, Spacings> cellSpacings, WTableRow tableRow);
    private static void UpdateLeftIndent(SinglePropertyModifierRecord sprmTNestingLevel, WTableRow tableRow, short xCenterArrayStart, bool isChangedFormat);
    private static UInt32[] GetColors(SinglePropertyModifierRecord sprm, int cellCount);
    private static Borders GetCellBorders(WTableCell cell, bool isFormattingChange);
    private static void UpdateCellShading(int startCellIndex, int endCellIndex, Byte[] buf, WTableRow tableRow);
    private static void UpdatePreferredWidthInfo(SinglePropertyModifierRecord sprm, RowFormat rowFormat, int formatKey);
    private static void SetShadingValues(CellFormat cellFormat, ShadingDescriptor shdDesc);
    private static void UpdateTableCellDefinition(SinglePropertyModifierRecord sprm, WTableRow tableRow, Int32& cellCount, Int16[]& xCenterArray, IWordReaderBase reader);
    private static void UpdateTC80(WTableCell tableCell, Byte[] sprmData, int startPos);
    private static void UpdateTCGRF(CellFormat cellFormat, short TCGRF);
    private static CellMerge GetCellMerge(int val, bool isHorizontalCellMerge);
    private static void ExportTableRowBorders(SinglePropertyModifierArray sprms, RowFormat rowFormat, SinglePropertyModifierRecord sprm);
    private static void ExportBorders(TableBorders srcBorders, Borders destBorders);
    private static void ExportTableRowBorders(Byte[] buf, TableBorders tableBorders, bool isOldSprm);
    internal static void FormatToSprms(WTableRow tableRow, SinglePropertyModifierArray sprms, WordStyleSheet styleSheet);
    private static void WriteDxaGapHalf(SinglePropertyModifierArray sprms, WTableRow tableRow, bool isOldFormat);
    private static void WriteTableCellProps(SinglePropertyModifierArray sprms, WTableRow row, bool isOldFormat);
    private static void UpdateXCenterArray(Int16[] m_xCenterArray, WTableRow row, bool isOldFormat);
    private static void UpdateCenterArray(SinglePropertyModifierArray sprms, Int16[] m_xCenterArray, WTableRow tableRow, bool isOldFormat);
    private static void InitCollection(int cellCount);
    private static void UpdateDefaultBorderCV(int cellCount);
    private static void UpdateDefaultShadingBytes(Byte[] operand, int cellCount);
    private static void UpdateCellsInformation(SinglePropertyModifierArray sprms);
    internal static void FormatToSprms(int key, object value, SinglePropertyModifierArray sprms, RowFormat rowFormat, WordStyleSheet styleSheet, bool isOldFormat);
    private static void FormatToSprms(int key, object value, SinglePropertyModifierArray sprms, CellFormat cellFormat, bool isOldFormat, int cellIndex, UInt16& tcgrf);
    private static void SetShading(Dictionary`2<int, object> propertyHash, int cellIndex, bool isRowFormat);
    private static void SetTableBorders(SinglePropertyModifierArray sprms, Borders borders);
    private static void SetCellBorders(Borders borders, int cellIndex, CellFormat cellFormat);
    private static void SetCellBorderColors(Borders borders, int startPos);
    private static void SetPreferredWidthInfo(int widthTypeKey, int widthKey, int sprmOption, SinglePropertyModifierArray sprms, RowFormat rowFormat, bool isOldFormat);
    internal static void SetTablePositioning(TablePositioning tablePositioning, SinglePropertyModifierArray sprms);
    private static void SetPaddings(SinglePropertyModifierArray sprms, int options, Paddings paddings, int cellIndex);
    private static void SetTableShading(SinglePropertyModifierArray sprms, int options, RowFormat rowFormat, bool isChangedFormat);
    private static void BorderToBRC(Border border, BorderCode brc);
    private static void BorderToBRC(Border border, BorderStructure brc);
    private static void BRCToBorder(BorderCode brc, Border border);
    private static void BRCToBorder(BorderStructure brc, Border border);
    private static bool IsEmpty(BorderStructure brc);
    public static void ImportPaddings(Spacings destination, Paddings source);
    public static void ExportPaddings(Spacings source, Paddings destination);
    internal static void ExportDefaultPaddings(Paddings destination);
}
public enum Syncfusion.DocIO.DLS.TableRowHeightType : Enum {
    public int value__;
    public static TableRowHeightType AtLeast;
    public static TableRowHeightType Exactly;
}
public class Syncfusion.DocIO.DLS.TableStyleCellProperties : FormatBase {
    internal static int BordersKey;
    internal static int PaddingsKey;
    internal static int TextWrapKey;
    internal static int VerticalAlignmentKey;
    internal static int ShadingColorKey;
    internal static int ForeColorKey;
    internal static int TextureStyleKey;
    internal static int TextDirectionKey;
    internal static int HorizontalMergeKey;
    internal static int VerticalMergeKey;
    internal static int PreferredWidthTypeKey;
    internal static int PreferredWidthKey;
    internal static int CellWidthKey;
    internal static int FitTextKey;
    internal static int FormatChangeAuthorNameKey;
    internal static int FormatChangeDateTimeKey;
    internal static int CellGridSpanKey;
    public Color BackColor { get; public set; }
    public Color ForeColor { get; public set; }
    public TextureStyle TextureStyle { get; public set; }
    public Borders Borders { get; }
    public Paddings Paddings { get; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    public bool TextWrap { get; public set; }
    internal TableStyleCellProperties(IWordDocument doc);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public TextureStyle get_TextureStyle();
    public void set_TextureStyle(TextureStyle value);
    public Borders get_Borders();
    public Paddings get_Paddings();
    public VerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(VerticalAlignment value);
    public bool get_TextWrap();
    public void set_TextWrap(bool value);
    internal object GetPropertyValue(int propertyKey);
    internal void SetPropertyValue(int propertyKey, object value);
    internal virtual bool HasValue(int propertyKey);
    internal virtual void ApplyBase(FormatBase baseFormat);
    protected internal virtual void EnsureComposites();
    protected virtual object GetDefValue(int key);
    protected virtual FormatBase GetDefComposite(int key);
    internal bool Compare(TableStyleCellProperties tableStyleproeprties);
}
public class Syncfusion.DocIO.DLS.TableStyleRowProperties : FormatBase {
    internal static int CellSpacingKey;
    internal static int IsHiddenKey;
    internal static int IsHeaderKey;
    internal static int IsBreakAcrossPagesKey;
    internal static int RowAlignmentKey;
    public bool IsHidden { get; public set; }
    public bool IsHeader { get; public set; }
    public bool IsBreakAcrossPages { get; public set; }
    public float CellSpacing { get; public set; }
    public RowAlignment HorizontalAlignment { get; public set; }
    internal TableStyleRowProperties(IWordDocument doc);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsHeader();
    public void set_IsHeader(bool value);
    public bool get_IsBreakAcrossPages();
    public void set_IsBreakAcrossPages(bool value);
    public float get_CellSpacing();
    public void set_CellSpacing(float value);
    public RowAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(RowAlignment value);
    internal FormatBase GetAsRowFormat();
    internal object GetPropertyValue(int propertyKey);
    internal void SetPropertyValue(int propertyKey, object value);
    internal virtual bool HasValue(int propertyKey);
    protected virtual object GetDefValue(int key);
    internal bool Compare(TableStyleRowProperties tableStyleRowProperties);
}
public class Syncfusion.DocIO.DLS.TableStyleTableProperties : FormatBase {
    internal static int BordersKey;
    internal static int PaddingsKey;
    internal static int ColumnStripeKey;
    internal static int RowStripeKey;
    internal static int CellSpacingKey;
    internal static int LeftIndentKey;
    internal static int AllowPageBreaksKey;
    internal static int RowAlignmentKey;
    internal static int ShadingColorKey;
    internal static int ForeColorKey;
    internal static int TextureStyleKey;
    public Color BackColor { get; public set; }
    public Color ForeColor { get; public set; }
    public TextureStyle TextureStyle { get; public set; }
    public Borders Borders { get; }
    public Paddings Paddings { get; }
    public float CellSpacing { get; public set; }
    public float LeftIndent { get; public set; }
    public bool AllowPageBreaks { get; public set; }
    public RowAlignment HorizontalAlignment { get; public set; }
    public long ColumnStripe { get; public set; }
    public long RowStripe { get; public set; }
    internal TableStyleTableProperties(IWordDocument doc);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public TextureStyle get_TextureStyle();
    public void set_TextureStyle(TextureStyle value);
    public Borders get_Borders();
    public Paddings get_Paddings();
    public float get_CellSpacing();
    public void set_CellSpacing(float value);
    public float get_LeftIndent();
    public void set_LeftIndent(float value);
    public bool get_AllowPageBreaks();
    public void set_AllowPageBreaks(bool value);
    public RowAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(RowAlignment value);
    public long get_ColumnStripe();
    public void set_ColumnStripe(long value);
    public long get_RowStripe();
    public void set_RowStripe(long value);
    internal FormatBase GetAsTableFormat();
    internal object GetPropertyValue(int propertyKey);
    internal void SetPropertyValue(int propertyKey, object value);
    internal virtual bool HasValue(int propertyKey);
    internal virtual void ApplyBase(FormatBase baseFormat);
    protected internal virtual void EnsureComposites();
    protected virtual object GetDefValue(int key);
    protected virtual FormatBase GetDefComposite(int key);
    internal bool Compare(TableStyleTableProperties tableStyleTableProperties);
}
internal class Syncfusion.DocIO.DLS.TagIdRandomizer : object {
    [ThreadStaticAttribute]
private static Random m_instance;
    [ThreadStaticAttribute]
private static List`1<int> m_ids;
    [ThreadStaticAttribute]
private static List`1<int> m_noneChangeIds;
    [ThreadStaticAttribute]
private static Dictionary`2<int, int> m_changedIds;
    internal static Random Instance { get; }
    internal static Dictionary`2<int, int> ChangedIds { get; }
    internal static List`1<int> Identificators { get; }
    internal static List`1<int> NoneChangeIds { get; }
    internal static Random get_Instance();
    internal static Dictionary`2<int, int> get_ChangedIds();
    internal static List`1<int> get_Identificators();
    internal static List`1<int> get_NoneChangeIds();
    internal static int GetId(int currentId);
    private static bool IsValidId(int newId);
    internal static int GetMarkerId(int currentId, bool newId);
}
public class Syncfusion.DocIO.DLS.Template : object {
    private SttbfAssoc m_assocStrings;
    public string Path { get; public set; }
    internal Template(SttbfAssoc assocStrings);
    public string get_Path();
    public void set_Path(string value);
}
public abstract class Syncfusion.DocIO.DLS.TextBodyItem : WidgetBase {
    public WTextBody OwnerTextBody { get; }
    public bool IsInsertRevision { get; }
    public bool IsDeleteRevision { get; }
    internal bool IsChangedCFormat { get; }
    internal bool IsChangedPFormat { get; }
    internal TextBodyItem NextTextBodyItem { get; }
    public TextBodyItem(WordDocument doc);
    public WTextBody get_OwnerTextBody();
    public bool get_IsInsertRevision();
    public bool get_IsDeleteRevision();
    internal bool get_IsChangedCFormat();
    internal bool get_IsChangedPFormat();
    internal TextBodyItem get_NextTextBodyItem();
    public abstract virtual TextSelection Find(Regex pattern);
    public abstract virtual int Replace(Regex pattern, string replace);
    public abstract virtual int Replace(string given, string replace, bool caseSensitive, bool wholeWord);
    public abstract virtual int Replace(Regex pattern, TextSelection textSelection);
    public abstract virtual int Replace(Regex pattern, TextSelection textSelection, bool saveFormatting);
    internal abstract virtual TextSelectionList FindAll(Regex pattern, bool isDocumentComparison);
    internal abstract virtual TextBodyItem GetNextTextBodyItemValue();
    internal abstract virtual void MakeChanges(bool acceptChanges);
    internal abstract virtual bool CheckInsertRev();
    internal abstract virtual bool CheckDeleteRev();
    internal abstract virtual bool CheckChangedCFormat();
    internal abstract virtual bool CheckChangedPFormat();
    internal abstract virtual void AcceptCChanges();
    internal abstract virtual void AcceptPChanges();
    internal abstract virtual void RemoveCFormatChanges();
    internal abstract virtual void RemovePFormatChanges();
    internal abstract virtual bool HasTrackedChanges();
    internal abstract virtual void SetChangedCFormat(bool check);
    internal abstract virtual void SetChangedPFormat(bool check);
    internal abstract virtual void SetDeleteRev(bool check);
    internal abstract virtual void SetInsertRev(bool check);
    internal abstract virtual void AddInsMark();
    internal abstract virtual void AddDelMark();
    protected TextBodyItem GetNextInSection(WSection section);
}
public class Syncfusion.DocIO.DLS.TextBodyPart : object {
    internal WTextBody m_textPart;
    private WTextBody m_body;
    private int m_itemIndex;
    private int m_pItemIndex;
    private WCharacterFormat m_srcFormat;
    private bool m_saveFormatting;
    public BodyItemCollection BodyItems { get; }
    public TextBodyPart(TextBodySelection textBodySelection);
    public TextBodyPart(TextSelection textSelection);
    public TextBodyPart(WordDocument doc);
    public BodyItemCollection get_BodyItems();
    public void Clear();
    public void Copy(TextSelection textSel);
    private void Copy(TextBodySelection textSel, bool isFindField);
    public void Copy(TextBodySelection textSel);
    public void Copy(TextBodyItem bodyItem, bool clone);
    public void Copy(ParagraphItem pItem, bool clone);
    public WordDocument GetAsWordDocument();
    public void Close();
    internal void Copy(WTextBody textBody, bool clone);
    public void PasteAfter(TextBodyItem bodyItem);
    public void PasteAfter(ParagraphItem paragraphItem);
    public void PasteAt(ITextBody textBody, int itemIndex);
    internal void PasteAt(ITextBody textBody, int itemIndex, int pItemIndex, WCharacterFormat srcFormat, bool saveFormatting);
    public void PasteAt(ITextBody textBody, int itemIndex, int pItemIndex);
    public void PasteAtEnd(ITextBody textBody);
    internal void PasteAt(ITextBody textBody, int itemIndex, int pItemIndex, bool isBkmkReplace);
    internal void PasteAt(InlineContentControl inlineContentControl, int index, WCharacterFormat sourceFormat, bool saveFormatting);
    private void PasteAt(InlineContentControl inlineContentControl, WTextBody textBody);
    private void PasteParagraphAtInlineContentControl(InlineContentControl inlineContentControl, WParagraph paragraph);
    private void PasteContentControlAsPlainText(InlineContentControl sourceContentControl, InlineContentControl nestedContentControl);
    private void PasteTableAtInlineContentControl(InlineContentControl inlineContentControl, WTable table);
    private void PasteTextRangeAtInlineContentControl(InlineContentControl inlineContentControl, WTextRange textRange);
    private void CopyParagraphItems(WParagraph srcParagraph, WParagraph destParagraph);
    internal static void SplitParagraph(WParagraph paragraph, int nextpItemIndex, WParagraph paragraphToInsert);
    private void ValidateArgs();
    private WParagraph SplitParagraph(WParagraph trgFirstParagraph, WParagraph srcLastParagraph);
    private void UpdateFormatting(WParagraph trgParagraph, WParagraph srcParagraph);
    private void EnsureTextBody(WordDocument doc);
    private void ApplySrcFormat(WParagraph paragraph);
    private void ApplySrcFormat(WTable table, WTable srcTable);
    internal void GetBookmarkContentPart(BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private Entity GetSection(Entity entity);
    private void GetTableAfteParagraphBkmkContent(WParagraph paragraphStart, WParagraph paragraphEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private void GetParagraphAfterTableBkmkContent(WParagraph paragraphStart, WParagraph paragraphEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private void GetTableBookmarkContent(WParagraph paragraphStart, WParagraph paragraphEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, WTableCell bkmkEndCell);
    private void AddTextBodyItemsOfNestedTable(BookmarkStart bkmrkStart, WTable bkrmkEndTable, int endRowIndex, WTableCell bkmrkStartCell);
    private void AddTextBodyItems(int startItemIndex, int endItemIndex, WTextBody textBody);
    private void GetParagraphBookmarkContent(WParagraph paragraphStart, WParagraph paragraphEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private void CopyBkmkStartTextBody(int startParagraphIndex, int endParagraphIndex, WTextBody startTextBody, int bkmkStartNextItemIndex, int bkmkEndPrevItemIndex, bool isInSingleSection);
    private void CopyBkmkEndTextBody(int endParagraphIndex, int bkmkEndPreviosItemIndex, WTextBody endTextBody, bool IsFirstBkmkEnd, bool isInSingleSection);
    private bool IsBkmkEndInFirstItem(WParagraph paragraph, BookmarkEnd bkmkEnd, int bkmkEndPreItemIndex);
    private void CopyMultiSectionBodyItems(int startSectionIndex, int endSectionIndex, WordDocument Document);
}
public class Syncfusion.DocIO.DLS.TextBodySelection : object {
    private WTextBody m_textBody;
    private int m_itemStartIndex;
    private int m_itemEndIndex;
    private int m_pItemStartIndex;
    private int m_pItemEndIndex;
    public WTextBody TextBody { get; }
    public int ItemStartIndex { get; public set; }
    public int ItemEndIndex { get; public set; }
    public int ParagraphItemStartIndex { get; public set; }
    public int ParagraphItemEndIndex { get; public set; }
    public TextBodySelection(ParagraphItem itemStart, ParagraphItem itemEnd);
    public TextBodySelection(ITextBody textBody, int itemStartIndex, int itemEndIndex, int pItemStartIndex, int pItemEndIndex);
    public WTextBody get_TextBody();
    public int get_ItemStartIndex();
    public void set_ItemStartIndex(int value);
    public int get_ItemEndIndex();
    public void set_ItemEndIndex(int value);
    public int get_ParagraphItemStartIndex();
    public void set_ParagraphItemStartIndex(int value);
    public int get_ParagraphItemEndIndex();
    public void set_ParagraphItemEndIndex(int value);
    private void ValidateIndexes();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.TextBoxCollection : CollectionImpl {
    public WTextBox Item { get; }
    internal TextBoxCollection(WordDocument doc);
    public WTextBox get_Item(int index);
    public void RemoveAt(int index);
    public void Clear();
    internal void Add(WTextBox textbox);
    internal void Remove(WTextBox textbox);
}
public enum Syncfusion.DocIO.DLS.TextBoxLineStyle : Enum {
    public int value__;
    public static TextBoxLineStyle Simple;
    public static TextBoxLineStyle Double;
    public static TextBoxLineStyle ThickThin;
    public static TextBoxLineStyle ThinThick;
    public static TextBoxLineStyle Triple;
}
internal class Syncfusion.DocIO.DLS.TextBoxPropertiesConverter : object {
    public static void Export(TextBoxProps txbxProps, WTextBoxFormat txbxFormat);
    public static void Import(WTextBoxFormat txbxFormat, TextBoxProps txbxProps);
    internal static void Export(MsofbtSpContainer txbxContainer, FileShapeAddress fspa, WTextBoxFormat txbxFormat, bool skipPositionOrigins);
    internal static void Import(FileShapeAddress fspa, WTextBoxFormat txbxFormat);
    private static void ExportPosition(MsofbtSpContainer txbxContainer, WTextBoxFormat txbxFormat);
    private static void ExportIntMargin(MsofbtSpContainer txbxContainer, WTextBoxFormat txbxFormat);
}
public class Syncfusion.DocIO.DLS.TextConverter : object {
    private StreamWriter m_writer;
    private string m_text;
    private int m_curSectionIndex;
    private bool m_bGetString;
    private WordDocument m_document;
    private WParagraph m_lastPara;
    private bool isFieldEnd;
    private bool isFieldSeparator;
    private WFieldMark seperator;
    private bool isCommentBody;
    public string GetText(WordDocument document);
    public void Write(StreamWriter writer, IWordDocument document);
    public void Read(StreamReader reader, IWordDocument document);
    internal void Read(string text, IWordDocument document);
    private void InitBuiltinDocumentProperties(string text, String[] textLines, IWordDocument doc);
    protected void WriteHFBody(WordDocument document);
    protected void WriteBody(ITextBody body);
    protected void WriteParagraph(ParagraphItemCollection paragraphItems, bool lastPara);
    protected void WriteTable(IWTable table);
    protected void WriteSectionEnd(IWSection section, bool lastSection);
    protected void WriteText(string text);
    protected void WriteList(IWParagraph paragraph);
    protected void WriteNewLine();
    private void UpdateLastPara();
    private void Write();
    internal void AddTrailVersion(bool isBottom);
    private ITextBody GetFooter(WSection section, int sectionIndex);
    private ITextBody GetHeader(WSection section, int sectionIndex);
}
public enum Syncfusion.DocIO.DLS.TextDirection : Enum {
    public int value__;
    public static TextDirection Horizontal;
    public static TextDirection VerticalFarEast;
    public static TextDirection VerticalBottomToTop;
    public static TextDirection VerticalTopToBottom;
    public static TextDirection HorizontalFarEast;
    public static TextDirection Vertical;
}
internal class Syncfusion.DocIO.DLS.TextFinder : object {
    private List`1<WParagraph> m_linePCol;
    [ThreadStaticAttribute]
public static TextFinder m_instance;
    public static TextFinder Instance { get; }
    internal List`1<WParagraph> SingleLinePCol { get; }
    public static TextFinder get_Instance();
    internal List`1<WParagraph> get_SingleLinePCol();
    public TextSelectionList Find(WParagraph para, Regex pattern, bool onlyFirstMatch);
    internal TextSelectionList FindItem(WParagraph para, Regex pattern, bool onlyFirstMatch, bool isDocumentComparison);
    private static void FindInItems(ParagraphItemCollection items, Regex pattern, bool onlyFirstMatch, TextSelectionList selections);
    private static bool Find(ChildShapeCollection childShapes, Regex pattern, bool onlyFirstMatch, TextSelectionList selections);
    private static bool Find(WTextBody textBody, Regex pattern, bool onlyFirstMatch, TextSelectionList selections);
    private static WTextBody GetTextBody(ParagraphItem item);
    public TextSelection[] FindSingleLine(WTextBody textBody, Regex pattern);
    public TextSelection[] FindSingleLine(WTextBody textBody, Regex pattern, int startIndex, int endIndex);
    internal TextSelection[] FindInItems(WParagraph para, Regex pattern, int startIndex, int endIndex);
    private TextSelection[] FindInItems(ChildShapeCollection childShapes, Regex pattern);
    internal TextSelection[] FindSingleLine(Regex pattern);
    internal TextSelection[] FindSingleLine(WTable table, Regex pattern);
    private TextSelectionList FindSingleLine(List`1<WParagraph> paragraphs, Match match);
    internal static void Close();
}
public enum Syncfusion.DocIO.DLS.TextFormat : Enum {
    public int value__;
    public static TextFormat None;
    public static TextFormat Uppercase;
    public static TextFormat Lowercase;
    public static TextFormat FirstCapital;
    public static TextFormat Titlecase;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.TextFrame : OwnerHolder {
    private bool m_bNoWrap;
    private bool m_spAutoFit;
    private bool m_normAutoFit;
    private bool m_noAutoFit;
    private TextDirection m_TextDirection;
    private byte m_flag;
    private ThreeDFormat m_threeDFormat;
    private Shape m_shape;
    private ChildShape m_childShape;
    private float m_widthRelativePercent;
    private float m_heightRelativePercent;
    private WidthOrigin m_widthRelation;
    private HeightOrigin m_heightRelation;
    private TextShapeValues m_presetTextWrapType;
    private Dictionary`2<string, string> m_presetTextWrapAdjustList;
    protected Dictionary`2<int, object> m_propertiesHash;
    internal static byte ShapeAutoFitKey;
    internal static byte NoAutoFitKey;
    internal static byte NormalAutoFitKey;
    internal static byte PresetTextWrapTypeKey;
    private VerticalAlignment m_TextVerticalAlignment;
    private float m_HorizontalRelativePercent;
    private float m_VerticalRelativePercent;
    internal InternalMargin m_intMargin;
    internal bool HasInternalMargin { get; internal set; }
    internal bool Upright { get; internal set; }
    internal ThreeDFormat ThreeDFormat { get; internal set; }
    public TextDirection TextDirection { get; public set; }
    public VerticalAlignment TextVerticalAlignment { get; public set; }
    internal float WidthRelativePercent { get; internal set; }
    internal float HeightRelativePercent { get; internal set; }
    internal WidthOrigin WidthOrigin { get; internal set; }
    internal HeightOrigin HeightOrigin { get; internal set; }
    internal float HorizontalRelativePercent { get; internal set; }
    internal float VerticalRelativePercent { get; internal set; }
    public InternalMargin InternalMargin { get; }
    internal bool NoWrap { get; internal set; }
    internal bool NoAutoFit { get; internal set; }
    internal bool NormalAutoFit { get; internal set; }
    internal bool ShapeAutoFit { get; internal set; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    internal TextShapeValues PresetTextWrapType { get; internal set; }
    internal Dictionary`2<string, string> PresetTextWrapAdjustList { get; }
    protected object Item { get; protected set; }
    internal TextFrame(Shape shape);
    internal TextFrame(ChildShape childShape);
    internal bool get_HasInternalMargin();
    internal void set_HasInternalMargin(bool value);
    internal bool get_Upright();
    internal void set_Upright(bool value);
    internal ThreeDFormat get_ThreeDFormat();
    internal void set_ThreeDFormat(ThreeDFormat value);
    public TextDirection get_TextDirection();
    public void set_TextDirection(TextDirection value);
    public VerticalAlignment get_TextVerticalAlignment();
    public void set_TextVerticalAlignment(VerticalAlignment value);
    internal float get_WidthRelativePercent();
    internal void set_WidthRelativePercent(float value);
    internal float get_HeightRelativePercent();
    internal void set_HeightRelativePercent(float value);
    internal WidthOrigin get_WidthOrigin();
    internal void set_WidthOrigin(WidthOrigin value);
    internal HeightOrigin get_HeightOrigin();
    internal void set_HeightOrigin(HeightOrigin value);
    internal float get_HorizontalRelativePercent();
    internal void set_HorizontalRelativePercent(float value);
    internal float get_VerticalRelativePercent();
    internal void set_VerticalRelativePercent(float value);
    public InternalMargin get_InternalMargin();
    internal bool get_NoWrap();
    internal void set_NoWrap(bool value);
    internal bool get_NoAutoFit();
    internal void set_NoAutoFit(bool value);
    internal bool get_NormalAutoFit();
    internal void set_NormalAutoFit(bool value);
    internal bool get_ShapeAutoFit();
    internal void set_ShapeAutoFit(bool value);
    internal Dictionary`2<int, object> get_PropertiesHash();
    internal TextShapeValues get_PresetTextWrapType();
    internal void set_PresetTextWrapType(TextShapeValues value);
    internal Dictionary`2<string, string> get_PresetTextWrapAdjustList();
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    internal bool HasKey(int Key);
    private void SetKeyValue(int propKey, object value);
    internal bool Compare(TextFrame textFrame);
    internal StringBuilder GetAsString();
}
internal class Syncfusion.DocIO.DLS.TextReplacer : object {
    [ThreadStaticAttribute]
public static TextReplacer m_instance;
    public static TextReplacer Instance { get; }
    public static TextReplacer get_Instance();
    public int Replace(WParagraph para, Regex pattern, string replacement);
    private bool EnsureStartAndEndOwner(WParagraph para, int startCharPos, int endCharPos, WTextRange& tr, Int32& startIndex);
    private static int ReplaceInItems(ParagraphItemCollection items, Regex pattern, string replacement);
    private static int ReplaceInItems(ChildShapeCollection childShapes, Regex pattern, string replacement);
    internal void ReplaceSingleLine(TextSelection[] findText, string replacement);
    internal void ReplaceSingleLine(TextSelection[] findText, TextSelection replacement);
    internal void ReplaceSingleLine(TextSelection[] findText, TextBodyPart replacement);
    private void RemoveOwnerPara(TextSelection selection);
    private void RemoveInternalItems(ParagraphItemCollection paraItems, int end, int startIndex, WTextRange& nextTr, List`1<ParagraphItem> bookmarks);
    private void CorrectNextItems(ParagraphItem pItem, int startIndex, int offset);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.TextSelection : object {
    private WParagraph m_para;
    private WTextRange m_startTr;
    private WTextRange m_endTr;
    private List`1<WTextRange> m_items;
    internal int m_startCut;
    internal int m_endCut;
    private int m_startIndex;
    private int m_endIndex;
    private WTextRange[] m_cachedRanges;
    internal TextSelectionList SelectionChain;
    public string SelectedText { get; }
    public string Item { get; public set; }
    public int Count { get; }
    internal WParagraph OwnerParagraph { get; }
    internal WTextRange StartTextRange { get; }
    internal WTextRange EndTextRange { get; }
    public TextSelection(WParagraph para, int startCharPos, int endCharPos);
    public string get_SelectedText();
    public string get_Item(int index);
    public void set_Item(int index, string value);
    public int get_Count();
    internal WParagraph get_OwnerParagraph();
    internal WTextRange get_StartTextRange();
    internal WTextRange get_EndTextRange();
    public WTextRange[] GetRanges();
    public WTextRange GetAsOneRange();
    internal int SplitAndErase();
    private void GetTextRanges(WTextRange startElement);
    internal void CacheRanges();
    internal void CopyTo(WParagraph para, int startIndex, bool saveFormatting, WCharacterFormat srcFormat);
    internal void CopyTo(InlineContentControl inlineContentControl, int startIndex, bool saveFormatting, WCharacterFormat srcFormat);
    public sealed virtual IEnumerator GetEnumerator();
    private void EnsureIndexes();
    private int GetItemsCount(WTextRange textRange);
    internal void SplitRanges();
    private void UpdateFollowingSelections(bool forStart);
}
internal class Syncfusion.DocIO.DLS.TextSelectionList : List`1<TextSelection> {
}
internal enum Syncfusion.DocIO.DLS.TextShapeValues : Enum {
    public int value__;
    public static TextShapeValues None;
    public static TextShapeValues TextNoShape;
    public static TextShapeValues TextPlain;
    public static TextShapeValues TextStop;
    public static TextShapeValues TextTriangle;
    public static TextShapeValues TextTriangleInverted;
    public static TextShapeValues TextChevron;
    public static TextShapeValues TextChevronInverted;
    public static TextShapeValues TextRingInside;
    public static TextShapeValues TextRingOutside;
    public static TextShapeValues TextArchUp;
    public static TextShapeValues TextArchDown;
    public static TextShapeValues TextCircle;
    public static TextShapeValues TextButton;
    public static TextShapeValues TextArchUpPour;
    public static TextShapeValues TextArchDownPour;
    public static TextShapeValues TextCirclePour;
    public static TextShapeValues TextButtonPour;
    public static TextShapeValues TextCurveUp;
    public static TextShapeValues TextCurveDown;
    public static TextShapeValues TextCanUp;
    public static TextShapeValues TextCanDown;
    public static TextShapeValues TextWave1;
    public static TextShapeValues TextWave2;
    public static TextShapeValues TextDoubleWave1;
    public static TextShapeValues TextWave4;
    public static TextShapeValues TextInflate;
    public static TextShapeValues TextDeflate;
    public static TextShapeValues TextInflateBottom;
    public static TextShapeValues TextDeflateBottom;
    public static TextShapeValues TextInflateTop;
    public static TextShapeValues TextDeflateTop;
    public static TextShapeValues TextDeflateInflate;
    public static TextShapeValues TextDeflateInflateDeflate;
    public static TextShapeValues TextFadeRight;
    public static TextShapeValues TextFadeLeft;
    public static TextShapeValues TextFadeUp;
    public static TextShapeValues TextFadeDown;
    public static TextShapeValues TextSlantUp;
    public static TextShapeValues TextSlantDown;
    public static TextShapeValues TextCascadeUp;
    public static TextShapeValues TextCascadeDown;
}
public enum Syncfusion.DocIO.DLS.TextureAlignment : Enum {
    public int value__;
    public static TextureAlignment AlignmentMixed;
    public static TextureAlignment Bottom;
    public static TextureAlignment BottomLeft;
    public static TextureAlignment BottomRight;
    public static TextureAlignment Center;
    public static TextureAlignment Left;
    public static TextureAlignment Right;
    public static TextureAlignment Top;
    public static TextureAlignment TopLeft;
    public static TextureAlignment TopRight;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.TextWatermark : Watermark {
    private string m_text;
    private string m_fontName;
    private float m_fontSize;
    private Color m_fontColor;
    private byte m_bFlags;
    private byte m_bFlags1;
    private WatermarkLayout m_layout;
    private float m_shapeHeigh;
    private float m_shapeWidth;
    private TextWrappingStyle m_wrappingStyle;
    private HorizontalOrigin m_horizontalOrgin;
    private float m_horizontalPosition;
    private ShapeHorizontalAlignment m_horizontalAlignement;
    private VerticalOrigin m_verticalOrgin;
    private float m_verticalPosition;
    private ShapeVerticalAlignment m_verticalAlignement;
    private int m_rotation;
    private ShapePosition m_position;
    internal Dictionary`2<int, object> m_propertiesHash;
    internal static byte FontSizeKey;
    internal bool Visible { get; internal set; }
    public string Text { get; public set; }
    public string FontName { get; public set; }
    public float Size { get; public set; }
    public Color Color { get; public set; }
    public bool Semitransparent { get; public set; }
    public WatermarkLayout Layout { get; public set; }
    public float Height { get; public set; }
    public float Width { get; public set; }
    internal SizeF ShapeSize { get; }
    internal TextWrappingStyle TextWrappingStyle { get; internal set; }
    internal HorizontalOrigin HorizontalOrigin { get; internal set; }
    internal VerticalOrigin VerticalOrigin { get; internal set; }
    internal ShapeHorizontalAlignment HorizontalAlignment { get; internal set; }
    internal ShapeVerticalAlignment VerticalAlignment { get; internal set; }
    internal float HorizontalPosition { get; internal set; }
    internal float VerticalPosition { get; internal set; }
    internal int Rotation { get; internal set; }
    internal ShapePosition Position { get; internal set; }
    internal Dictionary`2<int, object> PropertiesHash { get; }
    protected object Item { get; protected set; }
    internal TextWatermark(string text);
    public TextWatermark(string text, string fontName, float width, float height);
    internal TextWatermark(string text, string fontName, int fontSize, WatermarkLayout layout);
    internal TextWatermark(WordDocument doc);
    internal bool get_Visible();
    internal void set_Visible(bool value);
    public string get_Text();
    public void set_Text(string value);
    public string get_FontName();
    public void set_FontName(string value);
    public float get_Size();
    public void set_Size(float value);
    public Color get_Color();
    public void set_Color(Color value);
    public bool get_Semitransparent();
    public void set_Semitransparent(bool value);
    public WatermarkLayout get_Layout();
    public void set_Layout(WatermarkLayout value);
    public float get_Height();
    public void set_Height(float value);
    public float get_Width();
    public void set_Width(float value);
    internal SizeF get_ShapeSize();
    internal TextWrappingStyle get_TextWrappingStyle();
    internal void set_TextWrappingStyle(TextWrappingStyle value);
    internal HorizontalOrigin get_HorizontalOrigin();
    internal void set_HorizontalOrigin(HorizontalOrigin value);
    internal VerticalOrigin get_VerticalOrigin();
    internal void set_VerticalOrigin(VerticalOrigin value);
    internal ShapeHorizontalAlignment get_HorizontalAlignment();
    internal void set_HorizontalAlignment(ShapeHorizontalAlignment value);
    internal ShapeVerticalAlignment get_VerticalAlignment();
    internal void set_VerticalAlignment(ShapeVerticalAlignment value);
    internal float get_HorizontalPosition();
    internal void set_HorizontalPosition(float value);
    internal float get_VerticalPosition();
    internal void set_VerticalPosition(float value);
    internal int get_Rotation();
    internal void set_Rotation(int value);
    internal ShapePosition get_Position();
    internal void set_Position(ShapePosition value);
    internal Dictionary`2<int, object> get_PropertiesHash();
    protected object get_Item(int key);
    protected void set_Item(int key, object value);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    private void SetDefaultValues();
    internal void SetDefaultSize();
    private SizeF GetShapeSizeValue();
    internal bool HasKey(int Key);
    internal void SetKeyValue(int propKey, object value);
}
public enum Syncfusion.DocIO.DLS.TextWrappingStyle : Enum {
    public int value__;
    public static TextWrappingStyle Inline;
    public static TextWrappingStyle TopAndBottom;
    public static TextWrappingStyle Square;
    public static TextWrappingStyle InFrontOfText;
    public static TextWrappingStyle Tight;
    public static TextWrappingStyle Through;
    public static TextWrappingStyle Behind;
}
public enum Syncfusion.DocIO.DLS.TextWrappingType : Enum {
    public int value__;
    public static TextWrappingType Both;
    public static TextWrappingType Left;
    public static TextWrappingType Right;
    public static TextWrappingType Largest;
}
internal class Syncfusion.DocIO.DLS.Themes : object {
    private IWordDocument m_document;
    private FormatScheme m_fmtScheme;
    private FontScheme m_fontScheme;
    private Dictionary`2<string, Color> m_schemeColor;
    private string m_colorSchemeName;
    internal Dictionary`2<string, Stream> m_docxProps;
    internal Dictionary`2<string, Color> SchemeColor { get; }
    internal FormatScheme FmtScheme { get; internal set; }
    internal FontScheme FontScheme { get; internal set; }
    internal Dictionary`2<string, Stream> DocxProps { get; }
    internal string ColorSchemeName { get; internal set; }
    internal Themes(IWordDocument doc);
    internal Dictionary`2<string, Color> get_SchemeColor();
    internal FormatScheme get_FmtScheme();
    internal void set_FmtScheme(FormatScheme value);
    internal FontScheme get_FontScheme();
    internal void set_FontScheme(FontScheme value);
    internal Dictionary`2<string, Stream> get_DocxProps();
    internal string get_ColorSchemeName();
    internal void set_ColorSchemeName(string value);
    internal void Close();
}
internal enum Syncfusion.DocIO.DLS.TileFlipMode : Enum {
    public int value__;
    public static TileFlipMode None;
    public static TileFlipMode XY;
    public static TileFlipMode Y;
    public static TileFlipMode X;
}
internal class Syncfusion.DocIO.DLS.TileRectangle : object {
    private float m_bottomOffset;
    private float m_leftOffset;
    private float m_rightOffset;
    private float m_topOffset;
    private byte m_flag;
    internal float BottomOffset { get; internal set; }
    internal float LeftOffset { get; internal set; }
    internal float RightOffset { get; internal set; }
    internal float TopOffset { get; internal set; }
    internal bool HasAttributes { get; internal set; }
    internal float get_BottomOffset();
    internal void set_BottomOffset(float value);
    internal float get_LeftOffset();
    internal void set_LeftOffset(float value);
    internal float get_RightOffset();
    internal void set_RightOffset(float value);
    internal float get_TopOffset();
    internal void set_TopOffset(float value);
    internal bool get_HasAttributes();
    internal void set_HasAttributes(bool value);
    internal TileRectangle Clone();
    internal bool Compare(TileRectangle fillRectangle);
    internal StringBuilder GetAsString();
}
internal enum Syncfusion.DocIO.DLS.ToggleOperand : Enum {
    public byte value__;
    public static ToggleOperand False;
    public static ToggleOperand True;
    public static ToggleOperand PositiveComplexValue;
    public static ToggleOperand NegativeComplexValue;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.TypedSortedListEx`2 : object {
    private static int DefaultCapacity;
    private TKey[] m_arrKeys;
    private Dictionary`2<TKey, TValue> m_dicValues;
    private int m_iSize;
    private int m_iVersion;
    private IComparer`1<TKey> m_comparer;
    private KeyList<TKey, TValue> m_listKeys;
    private ValueList<TKey, TValue> m_lstValues;
    public int Capacity { get; public set; }
    public int Count { get; }
    public IList`1<TKey> Keys { get; }
    public IList`1<TValue> Values { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public TValue Item { get; public set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public object Item { get; public set; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    public TypedSortedListEx`2(int initialCapacity);
    public TypedSortedListEx`2(IComparer`1<TKey> comparer);
    public TypedSortedListEx`2(IComparer`1<TKey> comparer, int capacity);
    public TypedSortedListEx`2(IDictionary`2<TKey, TValue> d);
    public TypedSortedListEx`2(IDictionary`2<TKey, TValue> d, IComparer`1<TKey> comparer);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual IList`1<TKey> get_Keys();
    public virtual IList`1<TValue> get_Values();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual TValue get_Item(TKey key);
    public virtual void set_Item(TKey key, TValue value);
    public static TypedSortedListEx`2<TKey, TValue> Synchronized(TypedSortedListEx`2<TKey, TValue> list);
    public virtual void Add(TKey key, TValue value);
    public virtual void Clear();
    public virtual object Clone();
    public TypedSortedListEx`2<TKey, TValue> CloneAll();
    public virtual bool Contains(TKey key);
    public virtual bool ContainsKey(TKey key);
    public virtual bool ContainsValue(TValue value);
    public virtual void CopyTo(Array array, int arrayIndex);
    public virtual TValue GetByIndex(int index);
    public virtual TKey GetKey(int index);
    public virtual IList`1<TKey> GetKeyList();
    public virtual IList`1<TValue> GetValueList();
    public virtual int IndexOfKey(TKey key);
    public virtual int IndexOfValue(TValue value);
    public virtual void RemoveAt(int index);
    public virtual bool Remove(TKey key);
    public virtual void SetByIndex(int index, TValue value);
    public virtual void TrimToSize();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private void Insert(int index, TKey key, TValue value);
    private void EnsureCapacity(int min);
    public sealed virtual void Add(object key, object value);
    public sealed virtual bool Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
}
internal enum Syncfusion.DocIO.DLS.UpdateMode : Enum {
    public int value__;
    public static UpdateMode Always;
    public static UpdateMode OnCall;
}
internal class Syncfusion.DocIO.DLS.Utf8Checker : object {
    internal static bool IsUtf8(Stream stream);
    private static bool HasExtendedASCIICharacter(Stream stream);
}
public enum Syncfusion.DocIO.DLS.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Middle;
    public static VerticalAlignment Bottom;
}
public enum Syncfusion.DocIO.DLS.VerticalOrigin : Enum {
    public int value__;
    public static VerticalOrigin Margin;
    public static VerticalOrigin Page;
    public static VerticalOrigin Paragraph;
    public static VerticalOrigin Line;
    public static VerticalOrigin TopMargin;
    public static VerticalOrigin BottomMargin;
    public static VerticalOrigin InsideMargin;
    public static VerticalOrigin OutsideMargin;
}
public class Syncfusion.DocIO.DLS.ViewSetup : XDLSSerializableBase {
    public static int DEF_ZOOMING;
    private ZoomType m_zoomType;
    private int m_zoomPercent;
    private DocumentViewType m_docViewType;
    public int ZoomPercent { get; public set; }
    public ZoomType ZoomType { get; public set; }
    public DocumentViewType DocumentViewType { get; public set; }
    public ViewSetup(IWordDocument doc);
    public int get_ZoomPercent();
    public void set_ZoomPercent(int value);
    public ZoomType get_ZoomType();
    public void set_ZoomType(ZoomType value);
    public DocumentViewType get_DocumentViewType();
    public void set_DocumentViewType(DocumentViewType value);
    internal ViewSetup Clone(WordDocument doc);
    internal void SetZoomPercentValue(int value);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
}
internal class Syncfusion.DocIO.DLS.WAbsoluteTab : ParagraphItem {
    private AbsoluteTabAlignment m_alignment;
    private AbsoluteTabRelation m_relation;
    private TabLeader m_tabLeader;
    internal string Text { get; }
    internal float Position { get; }
    public EntityType EntityType { get; }
    internal AbsoluteTabAlignment Alignment { get; internal set; }
    internal AbsoluteTabRelation Relation { get; internal set; }
    internal TabLeader TabLeader { get; internal set; }
    internal WCharacterFormat CharacterFormat { get; internal set; }
    internal WAbsoluteTab(IWordDocument doc);
    internal string get_Text();
    internal float get_Position();
    public virtual EntityType get_EntityType();
    internal AbsoluteTabAlignment get_Alignment();
    internal void set_Alignment(AbsoluteTabAlignment value);
    internal AbsoluteTabRelation get_Relation();
    internal void set_Relation(AbsoluteTabRelation value);
    internal TabLeader get_TabLeader();
    internal void set_TabLeader(TabLeader value);
    internal WCharacterFormat get_CharacterFormat();
    internal void set_CharacterFormat(WCharacterFormat value);
    private float GetTabPostion();
    private float GetTabPostionRelativeToMargin();
    private float GetTabPostionRelativeToIndent();
    private Entity GetAbsoluteTabBaseEntity(Entity ent);
    private float GetCellWidth(WTableCell tableCell);
    private float GetLeftPadding(WTableCell tableCell);
    private float GetRightPadding(WTableCell tableCell);
    internal virtual void AttachToParagraph(WParagraph paragraph, int itemPos);
    internal virtual void Detach();
    internal virtual void Close();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    private float GetLayoutTabPostion();
    internal float GetAbsolutePosition(IEntity ent, float position);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
}
public class Syncfusion.DocIO.DLS.WarningInfo : object {
    private string m_description;
    private WarningType m_warningType;
    public string Description { get; }
    public WarningType WarningType { get; }
    internal WarningInfo(string description, WarningType warningType);
    public string get_Description();
    public WarningType get_WarningType();
}
public enum Syncfusion.DocIO.DLS.WarningType : Enum {
    public int value__;
    public static WarningType DateTime;
    public static WarningType Annotation;
    public static WarningType Comment;
    public static WarningType CurrentSectionNumber;
    public static WarningType CustomShape;
    public static WarningType GroupShape;
    public static WarningType LineNumber;
    public static WarningType Math;
    public static WarningType OLEObject;
    public static WarningType PageNumber;
    public static WarningType Shape;
    public static WarningType PrintMergeHelperField;
    public static WarningType SmartArt;
    public static WarningType TrackChanges;
    public static WarningType Textbox;
    public static WarningType WordArt;
    public static WarningType Watermark;
    public static WarningType Chart;
    public static WarningType Metafile;
}
public class Syncfusion.DocIO.DLS.Watermark : ParagraphItem {
    private WatermarkType m_type;
    private int m_orderIndex;
    private int m_spid;
    public EntityType EntityType { get; }
    public WatermarkType Type { get; }
    internal int OrderIndex { get; internal set; }
    internal int ShapeId { get; internal set; }
    internal Watermark(WatermarkType type);
    internal Watermark(WordDocument doc, WatermarkType type);
    public virtual EntityType get_EntityType();
    public WatermarkType get_Type();
    internal int get_OrderIndex();
    internal void set_OrderIndex(int value);
    internal int get_ShapeId();
    internal void set_ShapeId(int value);
    internal virtual void RemoveSelf();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
}
public enum Syncfusion.DocIO.DLS.WatermarkLayout : Enum {
    public int value__;
    public static WatermarkLayout Diagonal;
    public static WatermarkLayout Horizontal;
}
public enum Syncfusion.DocIO.DLS.WatermarkType : Enum {
    public int value__;
    public static WatermarkType NoWatermark;
    public static WatermarkType PictureWatermark;
    public static WatermarkType TextWatermark;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WCellCollection : EntityCollection {
    private static Type[] DEF_ELEMENT_TYPES;
    public WTableCell Item { get; }
    protected Type[] TypesOfElement { get; }
    public WCellCollection(WTableRow owner);
    private static WCellCollection();
    public WTableCell get_Item(int index);
    protected virtual Type[] get_TypesOfElement();
    public int Add(WTableCell cell);
    protected virtual void OnClear();
    public void Insert(int index, WTableCell cell);
    public int IndexOf(WTableCell cell);
    public void Remove(WTableCell cell);
    public void RemoveAt(int index);
    private void RemoveCellBookmark(int index);
    private void MoveBookmarkStart(WTableCell cell);
    private void MoveBookmarkEnd(WTableCell cell);
    internal void CloneTo(EntityCollection destColl);
    private void OnInsertCell(int index, CellFormat cellFormat);
    private void OnRemoveCell(int index);
}
public class Syncfusion.DocIO.DLS.WCharacterFormat : FormatBase {
    internal static string DEF_FONTFAMILY;
    internal static float DEF_FONTSIZE;
    internal static float DEF_SCALINGSIZE;
    internal static short FontKey;
    internal static short TextColorKey;
    internal static short FontNameKey;
    internal static short FontSizeKey;
    internal static short BoldKey;
    internal static short ItalicKey;
    internal static short StrikeKey;
    internal static short UnderlineKey;
    internal static short TextBkgColorKey;
    internal static short SubSuperScriptKey;
    internal static short DoubleStrikeKey;
    internal static short AllCapsKey;
    internal static short SpacingKey;
    internal static short HiddenKey;
    internal static short PositionKey;
    internal static short LineBreakKey;
    internal static short ShadowKey;
    internal static short EmbossKey;
    internal static short EngraveKey;
    internal static short SmallCapsKey;
    internal static short SpecVanishKey;
    internal static short BidiKey;
    internal static short BoldBidiKey;
    internal static short ItalicBidiKey;
    internal static short FontNameBidiKey;
    internal static short FontSizeBidiKey;
    internal static short HighlightColorKey;
    internal static short LocaleIdASCIIKey;
    internal static short LocaleIdFarEastKey;
    internal static short LidBiKey;
    internal static short FontNameAsciiKey;
    internal static short FontNameFarEastKey;
    internal static short FontNameNonFarEastKey;
    internal static short UnderlineColorKey;
    internal static short BorderKey;
    internal static short OutlineKey;
    internal static short IdctHintKey;
    internal static short NoProofKey;
    internal static short ForeColorKey;
    internal static short TextureStyleKey;
    internal static short FieldVanishKey;
    internal static short EmphasisKey;
    internal static short TextEffectkey;
    internal static short SnapToGridKey;
    internal static short BreakClearKey;
    internal static short CharStyleNameKey;
    internal static short ScalingKey;
    internal static short ComplexScriptKey;
    internal static short WebHiddenKey;
    internal static short InserteRevisionKey;
    internal static short DeleteRevisionKey;
    internal static short ChangedFormatKey;
    internal static short SpecialKey;
    internal static short ListPicIndexKey;
    internal static short ListHasPicKey;
    internal static short ContextualAlternatesKey;
    internal static short LigaturesKey;
    internal static short NumberFormKey;
    internal static short NumberSpacingKey;
    internal static short StylisticSetKey;
    internal static short KernKey;
    internal static short AuthorNameKey;
    internal static short FormatChangeAuthorNameKey;
    internal static short DateTimeKey;
    internal static short FormatChangeDateTimeKey;
    internal static short RevisionNameKey;
    internal static short CFELayoutKey;
    internal static short FitTextKey;
    internal static short FitTextIDKey;
    protected string m_charStyleName;
    protected string m_symExFontName;
    private WCharacterFormat m_tableStyleCharacterFormat;
    private byte m_bFlags;
    private float m_reducedFontSize;
    private List`1<Stream> m_xmlProps;
    private BiDirectionalOverride m_biDirectionalOverride;
    private List`1<int> revisionKeys;
    private ShadowFormat m_shadowFormat;
    private Reflection m_reflectionFormat;
    private GlowFormat m_glowFormat;
    private ThreeDFormat m_threeDFormat;
    private FillFormat m_fillFormat;
    private LineFormat m_lineFormat;
    private bool CancelOnChange { get; private set; }
    internal bool CrossRefChecked { get; internal set; }
    internal float ReducedFontSize { get; internal set; }
    internal string SymExFontName { get; internal set; }
    internal bool IsDocReading { get; internal set; }
    public Font Font { get; public set; }
    public string FontName { get; public set; }
    internal BreakClearType BreakClear { get; internal set; }
    public float FontSize { get; public set; }
    internal ShadowFormat ShadowFormat { get; internal set; }
    internal Reflection ReflectionFormat { get; internal set; }
    internal GlowFormat GlowFormat { get; internal set; }
    internal ThreeDFormat ThreeDFormat { get; internal set; }
    internal LineFormat LineFormat { get; internal set; }
    internal float Scaling { get; internal set; }
    internal float Kern { get; internal set; }
    internal bool IsKernFont { get; }
    public bool ComplexScript { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public bool Strikeout { get; public set; }
    public bool DoubleStrike { get; public set; }
    public UnderlineStyle UnderlineStyle { get; public set; }
    internal Color UnderlineColor { get; internal set; }
    internal FillFormat FillFormat { get; internal set; }
    public Color TextColor { get; public set; }
    public Color TextBackgroundColor { get; public set; }
    public SubSuperScript SubSuperScript { get; public set; }
    public float CharacterSpacing { get; public set; }
    public float Position { get; public set; }
    internal bool LineBreak { get; internal set; }
    public bool Shadow { get; public set; }
    public bool Emboss { get; public set; }
    public bool Engrave { get; public set; }
    public bool Hidden { get; public set; }
    public bool AllCaps { get; public set; }
    public bool SmallCaps { get; public set; }
    internal bool SpecVanish { get; internal set; }
    internal BiDirectionalOverride BiDirectionalOverride { get; internal set; }
    public bool Bidi { get; public set; }
    public bool BoldBidi { get; public set; }
    public bool ItalicBidi { get; public set; }
    public float FontSizeBidi { get; public set; }
    public string FontNameBidi { get; public set; }
    public Color HighlightColor { get; public set; }
    public Border Border { get; }
    internal EmphasisType EmphasisType { get; internal set; }
    internal TextEffect TextEffect { get; internal set; }
    internal bool SnapToGrid { get; internal set; }
    internal bool WebHidden { get; internal set; }
    internal string FontNameAscii { get; internal set; }
    internal string FontNameFarEast { get; internal set; }
    internal string FontNameNonFarEast { get; internal set; }
    internal FontHintType IdctHint { get; internal set; }
    public short LocaleIdASCII { get; public set; }
    public short LocaleIdFarEast { get; public set; }
    public short LocaleIdBidi { get; public set; }
    internal bool NoProof { get; internal set; }
    internal Color ForeColor { get; internal set; }
    internal TextureStyle TextureStyle { get; internal set; }
    public bool OutLine { get; public set; }
    internal bool Special { get; internal set; }
    public string CharStyleName { get; internal set; }
    internal string CharStyleId { get; internal set; }
    internal bool IsInsertRevision { get; internal set; }
    internal bool IsDeleteRevision { get; internal set; }
    internal bool IsChangedFormat { get; internal set; }
    internal int ListPictureIndex { get; internal set; }
    internal bool ListHasPicture { get; internal set; }
    internal WCharacterStyle CharStyle { get; }
    internal bool FieldVanish { get; internal set; }
    internal WCharacterFormat TableStyleCharacterFormat { get; internal set; }
    internal string AuthorName { get; internal set; }
    internal string FormatChangeAuthorName { get; internal set; }
    internal DateTime RevDateTime { get; internal set; }
    internal string RevisionName { get; internal set; }
    internal DateTime FormatChangeDateTime { get; internal set; }
    internal CFELayout CFELayout { get; internal set; }
    internal int FitTextWidth { get; internal set; }
    internal int FitTextID { get; internal set; }
    public bool UseContextualAlternates { get; public set; }
    public LigatureType Ligatures { get; public set; }
    public NumberFormType NumberForm { get; public set; }
    public NumberSpacingType NumberSpacing { get; public set; }
    public StylisticSetType StylisticSet { get; public set; }
    internal List`1<Stream> XmlProps { get; }
    internal List`1<int> RevisionKeys { get; }
    public WCharacterFormat(IWordDocument doc);
    internal WCharacterFormat(IWordDocument doc, Entity owner);
    private bool get_CancelOnChange();
    private void set_CancelOnChange(bool value);
    internal bool get_CrossRefChecked();
    internal void set_CrossRefChecked(bool value);
    internal float get_ReducedFontSize();
    internal void set_ReducedFontSize(float value);
    internal string get_SymExFontName();
    internal void set_SymExFontName(string value);
    internal bool get_IsDocReading();
    internal void set_IsDocReading(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public string get_FontName();
    public void set_FontName(string value);
    internal BreakClearType get_BreakClear();
    internal void set_BreakClear(BreakClearType value);
    public float get_FontSize();
    public void set_FontSize(float value);
    internal ShadowFormat get_ShadowFormat();
    internal void set_ShadowFormat(ShadowFormat value);
    internal Reflection get_ReflectionFormat();
    internal void set_ReflectionFormat(Reflection value);
    internal GlowFormat get_GlowFormat();
    internal void set_GlowFormat(GlowFormat value);
    internal ThreeDFormat get_ThreeDFormat();
    internal void set_ThreeDFormat(ThreeDFormat value);
    internal LineFormat get_LineFormat();
    internal void set_LineFormat(LineFormat value);
    internal float get_Scaling();
    internal void set_Scaling(float value);
    internal float get_Kern();
    internal void set_Kern(float value);
    internal bool get_IsKernFont();
    public bool get_ComplexScript();
    public void set_ComplexScript(bool value);
    public bool get_Bold();
    public void set_Bold(bool value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public bool get_Strikeout();
    public void set_Strikeout(bool value);
    public bool get_DoubleStrike();
    public void set_DoubleStrike(bool value);
    public UnderlineStyle get_UnderlineStyle();
    public void set_UnderlineStyle(UnderlineStyle value);
    internal Color get_UnderlineColor();
    internal void set_UnderlineColor(Color value);
    internal FillFormat get_FillFormat();
    internal void set_FillFormat(FillFormat value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Color get_TextBackgroundColor();
    public void set_TextBackgroundColor(Color value);
    public SubSuperScript get_SubSuperScript();
    public void set_SubSuperScript(SubSuperScript value);
    public float get_CharacterSpacing();
    public void set_CharacterSpacing(float value);
    public float get_Position();
    public void set_Position(float value);
    internal bool get_LineBreak();
    internal void set_LineBreak(bool value);
    public bool get_Shadow();
    public void set_Shadow(bool value);
    public bool get_Emboss();
    public void set_Emboss(bool value);
    public bool get_Engrave();
    public void set_Engrave(bool value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public bool get_AllCaps();
    public void set_AllCaps(bool value);
    public bool get_SmallCaps();
    public void set_SmallCaps(bool value);
    internal bool get_SpecVanish();
    internal void set_SpecVanish(bool value);
    internal BiDirectionalOverride get_BiDirectionalOverride();
    internal void set_BiDirectionalOverride(BiDirectionalOverride value);
    public bool get_Bidi();
    public void set_Bidi(bool value);
    public bool get_BoldBidi();
    public void set_BoldBidi(bool value);
    public bool get_ItalicBidi();
    public void set_ItalicBidi(bool value);
    public float get_FontSizeBidi();
    public void set_FontSizeBidi(float value);
    public string get_FontNameBidi();
    public void set_FontNameBidi(string value);
    public Color get_HighlightColor();
    public void set_HighlightColor(Color value);
    public Border get_Border();
    internal EmphasisType get_EmphasisType();
    internal void set_EmphasisType(EmphasisType value);
    internal TextEffect get_TextEffect();
    internal void set_TextEffect(TextEffect value);
    internal bool get_SnapToGrid();
    internal void set_SnapToGrid(bool value);
    internal bool get_WebHidden();
    internal void set_WebHidden(bool value);
    internal string get_FontNameAscii();
    internal void set_FontNameAscii(string value);
    internal string get_FontNameFarEast();
    internal void set_FontNameFarEast(string value);
    internal string get_FontNameNonFarEast();
    internal void set_FontNameNonFarEast(string value);
    internal FontHintType get_IdctHint();
    internal void set_IdctHint(FontHintType value);
    public short get_LocaleIdASCII();
    public void set_LocaleIdASCII(short value);
    public short get_LocaleIdFarEast();
    public void set_LocaleIdFarEast(short value);
    public short get_LocaleIdBidi();
    public void set_LocaleIdBidi(short value);
    internal bool get_NoProof();
    internal void set_NoProof(bool value);
    internal Color get_ForeColor();
    internal void set_ForeColor(Color value);
    internal TextureStyle get_TextureStyle();
    internal void set_TextureStyle(TextureStyle value);
    public bool get_OutLine();
    public void set_OutLine(bool value);
    internal bool get_Special();
    internal void set_Special(bool value);
    public string get_CharStyleName();
    internal void set_CharStyleName(string value);
    internal string get_CharStyleId();
    internal void set_CharStyleId(string value);
    internal bool get_IsInsertRevision();
    internal void set_IsInsertRevision(bool value);
    internal bool get_IsDeleteRevision();
    internal void set_IsDeleteRevision(bool value);
    internal bool get_IsChangedFormat();
    internal void set_IsChangedFormat(bool value);
    internal int get_ListPictureIndex();
    internal void set_ListPictureIndex(int value);
    internal bool get_ListHasPicture();
    internal void set_ListHasPicture(bool value);
    internal WCharacterStyle get_CharStyle();
    internal bool get_FieldVanish();
    internal void set_FieldVanish(bool value);
    internal WCharacterFormat get_TableStyleCharacterFormat();
    internal void set_TableStyleCharacterFormat(WCharacterFormat value);
    internal string get_AuthorName();
    internal void set_AuthorName(string value);
    internal string get_FormatChangeAuthorName();
    internal void set_FormatChangeAuthorName(string value);
    internal DateTime get_RevDateTime();
    internal void set_RevDateTime(DateTime value);
    internal string get_RevisionName();
    internal void set_RevisionName(string value);
    internal DateTime get_FormatChangeDateTime();
    internal void set_FormatChangeDateTime(DateTime value);
    internal CFELayout get_CFELayout();
    internal void set_CFELayout(CFELayout value);
    internal int get_FitTextWidth();
    internal void set_FitTextWidth(int value);
    internal int get_FitTextID();
    internal void set_FitTextID(int value);
    public bool get_UseContextualAlternates();
    public void set_UseContextualAlternates(bool value);
    public LigatureType get_Ligatures();
    public void set_Ligatures(LigatureType value);
    public NumberFormType get_NumberForm();
    public void set_NumberForm(NumberFormType value);
    public NumberSpacingType get_NumberSpacing();
    public void set_NumberSpacing(NumberSpacingType value);
    public StylisticSetType get_StylisticSet();
    public void set_StylisticSet(StylisticSetType value);
    internal List`1<Stream> get_XmlProps();
    internal void RemoveFontNames();
    internal bool HasValueWithParent(int propertyKey);
    internal bool IsInheritedFromTableStyle(int propertyKey);
    internal bool HasValueInBaseFormat(int propertyKey);
    internal Font GetFontToRender(FontScriptType scriptType);
    internal float GetFontSizeToRender();
    internal bool GetBoldToRender();
    internal bool GetItalicToRender();
    internal FontStyle GetFontStyle();
    private FontStyle GetTextEffect(RevisedTextEffect effect);
    internal bool IsNeedToShowInsertionMarkups();
    internal bool IsNeedToShowDeletionMarkups();
    private bool IsLineBreakNext();
    private void SetLineBreakNext();
    internal object GetPropertyValue(int propKey);
    internal bool GetBoolPropertyValue(short propKey);
    internal void SetPropertyValue(int propKey, object value);
    private bool IsBooleanProperty(int key);
    private bool SerializeAllData();
    internal bool GetComplexBoolValue(int optionKey);
    private WCharacterFormat GetBaseFormat(WCharacterFormat format);
    internal virtual void RemoveChanges();
    internal virtual void AcceptChanges();
    internal void CheckCrossRef();
    private WCharacterStyle GetCharStyleValue();
    internal string GetFontName(short fontKey);
    internal string GetFontNameToRender(FontScriptType scriptType);
    internal string GetFontNameBidiToRender(FontScriptType scriptType);
    private string GetFontNameEAToRender(FontScriptType scriptType);
    private string GetFontNameCSToRender(FontScriptType scriptType);
    private string GetFontNameFromTheme(string fontName, FontScriptType scriptType, FontHintType hintType);
    private void UpdateFontNameFromTheme(MajorMinorFontScheme majorMinorFontScheme, FontScriptType scriptType, String& fontName, FontHintType hintType);
    private string GetFontNameWithFontScript(MajorMinorFontScheme majorMinorFontScheme, short localeID, FontHintType hintType);
    internal bool ContainsValue(int key);
    internal void SetDefaultProperties();
    protected virtual void InitXDLSHolder();
    protected virtual object GetDefValue(int key);
    protected virtual FormatBase GetDefComposite(int key);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected internal void ImportContainer(FormatBase format);
    private void ImportXmlProps(WCharacterFormat format);
    internal List`1<int> get_RevisionKeys();
    protected virtual void ImportMembers(FormatBase format);
    public virtual void ClearFormatting();
    protected virtual void OnChange(FormatBase format, int propKey);
    internal virtual void ApplyBase(FormatBase baseFormat);
    public sealed virtual void Dispose();
    internal virtual void Close();
    private void UpdateUsedFontsCollection();
    internal byte GetBoolComplexValue(int propertyKey, bool value);
    internal object GetComplexBoolValue(object value);
    internal virtual bool HasValue(int propertyKey);
    internal virtual int GetSprmOption(int propertyKey);
    private void WriteComplexAttr(IXDLSAttributeWriter writer, int propKey, string xdlsConstant);
    internal string GetFontHint();
    internal string GetFontNameFromHint(FontScriptType scriptType);
    internal void MergeFormat(WCharacterFormat destinationFormat);
    private void UpdateFormattings(Dictionary`2<int, object> properties);
    internal void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    public sealed virtual IOfficeRunFormat Clone();
    internal void CloneRelationsTo(WordDocument doc);
    private void UpdateFormatting(WordDocument doc);
    internal void UpdateSourceFormat(WCharacterFormat destBaseFormat);
    internal void UpdateSourceFormatting(WCharacterFormat format);
    internal bool IsThemeFont(string fontName);
    internal bool UpdateDocDefaults(int propertyKey);
    internal bool BaseFormatHasFontInfoKey(WCharacterFormat characterFormat, int propertyKey);
    internal virtual bool Compare(FormatBase formatBase);
    internal void ApplyCharFormatChange(WCharacterFormat charFormat);
    internal StringBuilder GetAsString();
    internal void SetKernSize(float value);
    internal void SetPositionValue(float value);
    internal void SetScalingValue(float value);
    internal void SetCharacterSpacingValue(float value);
}
public class Syncfusion.DocIO.DLS.WCharacterStyle : Style {
    public WCharacterStyle BaseStyle { get; }
    public StyleType StyleType { get; }
    public WCharacterStyle(WordDocument doc);
    public WCharacterStyle get_BaseStyle();
    public virtual StyleType get_StyleType();
    public virtual IStyle Clone();
}
public class Syncfusion.DocIO.DLS.WChart : ShapeBase {
    private IOfficeChart m_officeChart;
    private string m_externalDataPath;
    private string m_internalDataPath;
    private string m_userShapes;
    private bool m_isExternalRelation;
    private bool m_is2016Chart;
    public IOfficeChart OfficeChart { get; internal set; }
    internal bool Is2016Chart { get; internal set; }
    internal WorkbookImpl Workbook { get; }
    internal string InternalDataPath { get; internal set; }
    internal string UserShapes { get; internal set; }
    internal bool IsExternalRelation { get; internal set; }
    public OfficeChartType ChartType { get; public set; }
    public string ExternalDataPath { get; public set; }
    public IOfficeDataRange DataRange { get; public set; }
    public bool IsSeriesInRows { get; public set; }
    public string ChartTitle { get; public set; }
    public IOfficeChartTextArea ChartTitleArea { get; }
    public IOfficeChartSeries Series { get; }
    public IOfficeChartCategoryAxis PrimaryCategoryAxis { get; }
    public IOfficeChartValueAxis PrimaryValueAxis { get; }
    public IOfficeChartSeriesAxis PrimarySeriesAxis { get; }
    public IOfficeChartCategoryAxis SecondaryCategoryAxis { get; }
    public IOfficeChartValueAxis SecondaryValueAxis { get; }
    public IOfficeChartFrameFormat ChartArea { get; }
    public IOfficeChartFrameFormat PlotArea { get; }
    public IOfficeChartWallOrFloor Walls { get; }
    public IOfficeChartWallOrFloor SideWall { get; }
    public IOfficeChartWallOrFloor BackWall { get; }
    public IOfficeChartWallOrFloor Floor { get; }
    public IOfficeChartDataTable DataTable { get; }
    public bool HasDataTable { get; public set; }
    public IOfficeChartLegend Legend { get; }
    public bool HasLegend { get; public set; }
    public int Rotation { get; public set; }
    public int Elevation { get; public set; }
    public int Perspective { get; public set; }
    public int HeightPercent { get; public set; }
    public int DepthPercent { get; public set; }
    public int GapDepth { get; public set; }
    public bool RightAngleAxes { get; public set; }
    public bool AutoScaling { get; public set; }
    public bool HasPlotArea { get; public set; }
    public OfficeChartPlotEmpty DisplayBlanksAs { get; public set; }
    public bool PlotVisibleOnly { get; public set; }
    public IOfficeChartCategories Categories { get; }
    public OfficeSeriesNameLevel SeriesNameLevel { get; public set; }
    public OfficeCategoriesLabelLevel CategoryLabelLevel { get; public set; }
    public IOfficeChartData ChartData { get; }
    public EntityType EntityType { get; }
    public WChart(WordDocument doc);
    public IOfficeChart get_OfficeChart();
    internal void set_OfficeChart(IOfficeChart value);
    internal bool get_Is2016Chart();
    internal void set_Is2016Chart(bool value);
    internal WorkbookImpl get_Workbook();
    internal string get_InternalDataPath();
    internal void set_InternalDataPath(string value);
    internal string get_UserShapes();
    internal void set_UserShapes(string value);
    internal bool get_IsExternalRelation();
    internal void set_IsExternalRelation(bool value);
    public OfficeChartType get_ChartType();
    public void set_ChartType(OfficeChartType value);
    public string get_ExternalDataPath();
    public void set_ExternalDataPath(string value);
    public IOfficeDataRange get_DataRange();
    public void set_DataRange(IOfficeDataRange value);
    public bool get_IsSeriesInRows();
    public void set_IsSeriesInRows(bool value);
    public string get_ChartTitle();
    public void set_ChartTitle(string value);
    public IOfficeChartTextArea get_ChartTitleArea();
    public IOfficeChartSeries get_Series();
    public IOfficeChartCategoryAxis get_PrimaryCategoryAxis();
    public IOfficeChartValueAxis get_PrimaryValueAxis();
    public IOfficeChartSeriesAxis get_PrimarySeriesAxis();
    public IOfficeChartCategoryAxis get_SecondaryCategoryAxis();
    public IOfficeChartValueAxis get_SecondaryValueAxis();
    public IOfficeChartFrameFormat get_ChartArea();
    public IOfficeChartFrameFormat get_PlotArea();
    public IOfficeChartWallOrFloor get_Walls();
    public IOfficeChartWallOrFloor get_SideWall();
    public IOfficeChartWallOrFloor get_BackWall();
    public IOfficeChartWallOrFloor get_Floor();
    public IOfficeChartDataTable get_DataTable();
    public bool get_HasDataTable();
    public void set_HasDataTable(bool value);
    public IOfficeChartLegend get_Legend();
    public bool get_HasLegend();
    public void set_HasLegend(bool value);
    public int get_Rotation();
    public void set_Rotation(int value);
    public int get_Elevation();
    public void set_Elevation(int value);
    public int get_Perspective();
    public void set_Perspective(int value);
    public int get_HeightPercent();
    public void set_HeightPercent(int value);
    public int get_DepthPercent();
    public void set_DepthPercent(int value);
    public int get_GapDepth();
    public void set_GapDepth(int value);
    public bool get_RightAngleAxes();
    public void set_RightAngleAxes(bool value);
    public bool get_AutoScaling();
    public void set_AutoScaling(bool value);
    public bool get_HasPlotArea();
    public void set_HasPlotArea(bool value);
    public OfficeChartPlotEmpty get_DisplayBlanksAs();
    public void set_DisplayBlanksAs(OfficeChartPlotEmpty value);
    public bool get_PlotVisibleOnly();
    public void set_PlotVisibleOnly(bool value);
    public IOfficeChartCategories get_Categories();
    public OfficeSeriesNameLevel get_SeriesNameLevel();
    public void set_SeriesNameLevel(OfficeSeriesNameLevel value);
    public OfficeCategoriesLabelLevel get_CategoryLabelLevel();
    public void set_CategoryLabelLevel(OfficeCategoriesLabelLevel value);
    public IOfficeChartData get_ChartData();
    public virtual EntityType get_EntityType();
    internal virtual void AttachToParagraph(WParagraph paragraph, int itemPos);
    internal virtual void Detach();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual void Close();
    internal Stream SaveAsImage();
    internal void CreateDataHolder();
    internal void SetDataRange(int sheetNumber, string dataRange);
    internal void InitializeOfficeChartToImageConverter();
    public void SetChartData(Object[][] data);
    public void SetDataRange(Object[][] data, int rowIndex, int columnIndex);
    public void SetDataRange(IEnumerable enumerable, int rowIndex, int columnIndex);
    public void Refresh(bool updateFormula);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    internal string GetChartAsString();
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
    internal bool Compare(WChart wChart);
}
public class Syncfusion.DocIO.DLS.WCheckBox : WFormField {
    private int m_checkBoxSize;
    private byte m_bFlags;
    private CheckBoxSizeType m_sizeType;
    public EntityType EntityType { get; }
    public int CheckBoxSize { get; public set; }
    public bool DefaultCheckBoxValue { get; public set; }
    public bool Checked { get; public set; }
    public CheckBoxSizeType SizeType { get; public set; }
    private ILayoutInfo Syncfusion.Layouting.IWidget.LayoutInfo { get; }
    public WCheckBox(IWordDocument doc);
    public virtual EntityType get_EntityType();
    public int get_CheckBoxSize();
    public void set_CheckBoxSize(int value);
    public bool get_DefaultCheckBoxValue();
    public void set_DefaultCheckBoxValue(bool value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public CheckBoxSizeType get_SizeType();
    public void set_SizeType(CheckBoxSizeType value);
    protected virtual object CloneImpl();
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    internal void SetCheckBoxSizeValue(int checkBoxSize);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    internal float GetCheckBoxSize(DrawingContext dc);
    private sealed virtual override ILayoutInfo Syncfusion.Layouting.IWidget.get_LayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    internal virtual StringBuilder GetAsString();
}
public class Syncfusion.DocIO.DLS.WComment : ParagraphItem {
    protected WTextBody m_textBody;
    protected WCommentFormat m_format;
    private ParagraphItemCollection m_commItems;
    private TextBodyPart m_bodyPart;
    private bool m_appendItems;
    private WCommentMark m_commentRangeStart;
    private WCommentMark m_commentRangeEnd;
    private string m_parentParaId;
    private byte m_bFlags;
    public WCommentMark CommentRangeStart { get; internal set; }
    public WCommentMark CommentRangeEnd { get; internal set; }
    public EntityCollection ChildEntities { get; }
    public EntityType EntityType { get; }
    public WTextBody TextBody { get; }
    public WCommentFormat Format { get; }
    public ParagraphItemCollection CommentedItems { get; }
    internal bool AppendItems { get; }
    internal TextBodyPart CommentedBodyPart { get; }
    internal string ParentParaId { get; internal set; }
    public WComment Ancestor { get; }
    internal bool IsDetached { get; internal set; }
    public bool Done { get; internal set; }
    public WComment(IWordDocument doc);
    public WCommentMark get_CommentRangeStart();
    internal void set_CommentRangeStart(WCommentMark value);
    public WCommentMark get_CommentRangeEnd();
    internal void set_CommentRangeEnd(WCommentMark value);
    public sealed virtual EntityCollection get_ChildEntities();
    public virtual EntityType get_EntityType();
    public WTextBody get_TextBody();
    public WCommentFormat get_Format();
    public ParagraphItemCollection get_CommentedItems();
    internal bool get_AppendItems();
    internal TextBodyPart get_CommentedBodyPart();
    internal string get_ParentParaId();
    internal void set_ParentParaId(string value);
    public WComment get_Ancestor();
    internal bool get_IsDetached();
    internal void set_IsDetached(bool value);
    public bool get_Done();
    internal void set_Done(bool value);
    protected virtual object CloneImpl();
    public void RemoveCommentedItems();
    internal void RemoveItemsBetween(ParagraphItem firstItem, ParagraphItem lastItem);
    public void ReplaceCommentedItems(string text);
    public void ReplaceCommentedItems(TextBodyPart textBodyPart);
    internal virtual void AddSelf();
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void AttachToDocument();
    internal string SetNewParaID(WordDocument doc, WComment comment);
    internal virtual void Close();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    public void AddCommentedItem(IParagraphItem paraItem);
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private void InsertCommItem(WParagraph para, int index, IParagraphItem item);
    private WCommentMark FindCommentStart(int index, string startId, ParagraphItemCollection itemCollection);
    private bool CheckTextBody(TextBodyItem item);
    private bool CheckPara(WParagraph para);
    private bool CheckTable(WTable table);
    private void RemoveFirstItem(ParagraphItem firstItem, ParagraphItem lastItem);
    private void FillCommItems();
    private void FillCommItems(WParagraph para);
    private void FillCommItems(WTable table);
    private string ModifyText(string text);
    internal string SetParentParaIdAndIsResolved(List`1<string> paraIdOfComments);
    private WComment GetAncestorComment();
}
internal class Syncfusion.DocIO.DLS.WCommentExtended : object {
    private string m_paraId;
    private string m_parentParaId;
    private bool m_isResolved;
    internal string ParaId { get; internal set; }
    internal string ParentParaId { get; internal set; }
    internal bool IsResolved { get; internal set; }
    internal string get_ParaId();
    internal void set_ParaId(string value);
    internal string get_ParentParaId();
    internal void set_ParentParaId(string value);
    internal bool get_IsResolved();
    internal void set_IsResolved(bool value);
}
public class Syncfusion.DocIO.DLS.WCommentFormat : XDLSSerializableBase {
    private string m_strUser;
    private string m_strUserInitials;
    private int m_iBookmarkStartOffset;
    private int m_iBookmarkEndOffset;
    private string m_iTagBkmk;
    private int m_iPosition;
    private DateTime date;
    public DateTime DateTime { get; public set; }
    public string UserInitials { get; public set; }
    public string User { get; public set; }
    internal int BookmarkStartOffset { get; internal set; }
    internal int BookmarkEndOffset { get; internal set; }
    internal string TagBkmk { get; internal set; }
    internal int Position { get; internal set; }
    internal int StartTextPos { get; }
    public DateTime get_DateTime();
    public void set_DateTime(DateTime value);
    public string get_UserInitials();
    public void set_UserInitials(string value);
    public string get_User();
    public void set_User(string value);
    internal int get_BookmarkStartOffset();
    internal void set_BookmarkStartOffset(int value);
    internal int get_BookmarkEndOffset();
    internal void set_BookmarkEndOffset(int value);
    internal string get_TagBkmk();
    internal void set_TagBkmk(string value);
    internal int get_Position();
    internal void set_Position(int value);
    internal int get_StartTextPos();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    public WCommentFormat Clone(IWordDocument doc);
    private bool FindTagBkmk(IWordDocument doc, string tagBkmk);
    private bool IsCommentExists(WTextBody body, string tagBkmk);
    internal void UpdateTagBkmk();
}
public class Syncfusion.DocIO.DLS.WCommentMark : ParagraphItem {
    private string m_commentId;
    private CommentMarkType m_markType;
    private WComment m_ownerComment;
    private byte m_bFlags;
    public WComment Comment { get; internal set; }
    internal string CommentId { get; internal set; }
    public EntityType EntityType { get; }
    public CommentMarkType Type { get; public set; }
    internal bool IsAfterCellMark { get; internal set; }
    internal WCommentMark(WordDocument doc, string commentId);
    internal WCommentMark(WordDocument doc, string commentId, CommentMarkType type);
    public WComment get_Comment();
    internal void set_Comment(WComment value);
    internal string get_CommentId();
    internal void set_CommentId(string value);
    public virtual EntityType get_EntityType();
    public CommentMarkType get_Type();
    public void set_Type(CommentMarkType value);
    internal bool get_IsAfterCellMark();
    internal void set_IsAfterCellMark(bool value);
    protected virtual object CloneImpl();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
}
public class Syncfusion.DocIO.DLS.WControlField : WField {
    private int m_storagePicLocation;
    private OLEObject m_oleObject;
    public EntityType EntityType { get; }
    internal int StoragePicLocation { get; internal set; }
    internal OLEObject OleObject { get; }
    internal WControlField(IWordDocument doc);
    public virtual EntityType get_EntityType();
    internal int get_StoragePicLocation();
    internal void set_StoragePicLocation(int value);
    internal OLEObject get_OleObject();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual void Close();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WDropDownCollection : CollectionImpl {
    public WDropDownItem Item { get; }
    public WDropDownCollection(WordDocument doc);
    public WDropDownItem get_Item(int index);
    public WDropDownItem Add(string text);
    public void Remove(int index);
    public void Clear();
    internal int Add(WDropDownItem item);
    internal void CloneTo(WDropDownCollection destColl);
    internal virtual void Close();
}
public class Syncfusion.DocIO.DLS.WDropDownFormField : WFormField {
    private short m_defaultDropDownValue;
    private WDropDownCollection m_dropDownItems;
    public EntityType EntityType { get; }
    public int DropDownSelectedIndex { get; public set; }
    public WDropDownCollection DropDownItems { get; }
    internal int DefaultDropDownValue { get; internal set; }
    internal string DropDownValue { get; internal set; }
    private ILayoutInfo Syncfusion.Layouting.IWidget.LayoutInfo { get; }
    public WDropDownFormField(IWordDocument doc);
    public virtual EntityType get_EntityType();
    public int get_DropDownSelectedIndex();
    public void set_DropDownSelectedIndex(int value);
    public WDropDownCollection get_DropDownItems();
    internal int get_DefaultDropDownValue();
    internal void set_DefaultDropDownValue(int value);
    internal string get_DropDownValue();
    internal void set_DropDownValue(string value);
    protected virtual object CloneImpl();
    internal virtual void Close();
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void InitXDLSHolder();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    private sealed virtual override ILayoutInfo Syncfusion.Layouting.IWidget.get_LayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    internal virtual StringBuilder GetAsString();
}
public class Syncfusion.DocIO.DLS.WDropDownItem : XDLSSerializableBase {
    private string m_text;
    public string Text { get; public set; }
    public WDropDownItem(IWordDocument doc);
    public string get_Text();
    public void set_Text(string value);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    internal WDropDownItem Clone();
}
internal class Syncfusion.DocIO.DLS.WEmbedField : WField {
    protected internal int m_storagePicLocation;
    private byte m_bFlags;
    public EntityType EntityType { get; }
    internal int StoragePicLocation { get; internal set; }
    internal bool IsOle2 { get; internal set; }
    internal WEmbedField(IWordDocument doc);
    public virtual EntityType get_EntityType();
    internal int get_StoragePicLocation();
    internal void set_StoragePicLocation(int value);
    internal bool get_IsOle2();
    internal void set_IsOle2(bool value);
    protected virtual void InitXDLSHolder();
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual object CloneImpl();
}
public class Syncfusion.DocIO.DLS.WField : WTextRange {
    private static char COMMASEPARATOR;
    private static char OPENPARENTHESIS;
    private static char CLOSEPARENTHESIS;
    private static string PARAGRAPHMARK;
    private static string CELLMARK;
    private static string ROWMARK;
    private static char TableStartMark;
    private static char TableEndMark;
    private static float DefaultIntegralSymbolSize;
    private string m_fieldPattern;
    protected FieldType m_fieldType;
    protected bool m_bConvertedToText;
    private bool m_bIsLocal;
    private bool m_hasInnerPageField;
    private bool m_isNestedField;
    protected ParagraphItemType m_paraItemType;
    protected internal string m_formattingString;
    protected internal string m_fieldValue;
    protected TextFormat m_textFormat;
    private string m_localRef;
    private short m_sourceFldType;
    private short m_bFlags;
    private Range m_range;
    private string m_fieldResult;
    internal Stack`1<WField> m_nestedFields;
    private WFieldMark m_fieldSeparator;
    private WFieldMark m_fieldEnd;
    internal string m_detachedFieldCode;
    internal string m_currentPageNumber;
    private WCharacterFormat m_resultFormat;
    private WField originalField;
    private Stack`1<Entity> entities;
    private List`1<WField> nestedFields;
    private Stack`1<Dictionary`2<string, object>> m_unlinkNestedFieldStack;
    private string m_screenTip;
    private List`1<string> functions;
    internal static char FieldAscii;
    public TextFormat TextFormat { get; public set; }
    public EntityType EntityType { get; }
    public string FieldPattern { get; public set; }
    public string FieldValue { get; }
    public FieldType FieldType { get; public set; }
    internal bool IsDirty { get; internal set; }
    internal bool IsLocked { get; internal set; }
    internal bool IsLocal { get; internal set; }
    internal bool HasInnerPageField { get; internal set; }
    internal bool IsNestedField { get; internal set; }
    internal string FormattingString { get; internal set; }
    internal string LocalReference { get; internal set; }
    internal string ScreenTip { get; internal set; }
    public string FieldCode { get; public set; }
    internal string InternalFieldCode { get; }
    internal short SourceFieldType { get; internal set; }
    internal string FieldResult { get; internal set; }
    internal Range Range { get; }
    internal WFieldMark FieldSeparator { get; internal set; }
    internal WFieldMark FieldEnd { get; internal set; }
    internal bool IsCloned { get; internal set; }
    internal bool IsAdded { get; internal set; }
    internal bool IsFieldRangeUpdated { get; internal set; }
    internal bool IsFieldSeparator { get; internal set; }
    internal bool IsSkip { get; internal set; }
    internal bool IsUpdated { get; internal set; }
    internal bool IsInFieldResult { get; internal set; }
    internal bool IsPgNum { get; internal set; }
    internal bool IsNumPagesInsideExpressionField { get; internal set; }
    internal bool IsNumPageUsedForEvaluation { get; internal set; }
    internal bool IsFieldInsideUnknownField { get; internal set; }
    internal WCharacterFormat ResultFormat { get; }
    public string Text { get; public set; }
    internal bool IsFieldWithoutSeparator { get; }
    internal WField OriginalField { get; internal set; }
    internal List`1<string> Functions { get; }
    private ILayoutInfo Syncfusion.Layouting.IWidget.LayoutInfo { get; }
    internal int WCStartPos { get; internal set; }
    public WField(IWordDocument doc);
    public sealed virtual TextFormat get_TextFormat();
    public sealed virtual void set_TextFormat(TextFormat value);
    public virtual EntityType get_EntityType();
    public string get_FieldPattern();
    public void set_FieldPattern(string value);
    public string get_FieldValue();
    public sealed virtual FieldType get_FieldType();
    public sealed virtual void set_FieldType(FieldType value);
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    internal bool get_IsLocked();
    internal void set_IsLocked(bool value);
    internal bool get_IsLocal();
    internal void set_IsLocal(bool value);
    internal bool get_HasInnerPageField();
    internal void set_HasInnerPageField(bool value);
    internal bool get_IsNestedField();
    internal void set_IsNestedField(bool value);
    internal string get_FormattingString();
    internal void set_FormattingString(string value);
    internal string get_LocalReference();
    internal void set_LocalReference(string value);
    internal string get_ScreenTip();
    internal void set_ScreenTip(string value);
    public sealed virtual string get_FieldCode();
    public sealed virtual void set_FieldCode(string value);
    internal string get_InternalFieldCode();
    internal short get_SourceFieldType();
    internal void set_SourceFieldType(short value);
    internal string get_FieldResult();
    internal void set_FieldResult(string value);
    internal Range get_Range();
    internal WFieldMark get_FieldSeparator();
    internal void set_FieldSeparator(WFieldMark value);
    internal WFieldMark get_FieldEnd();
    internal void set_FieldEnd(WFieldMark value);
    internal bool get_IsCloned();
    internal void set_IsCloned(bool value);
    internal bool get_IsAdded();
    internal void set_IsAdded(bool value);
    internal bool get_IsFieldRangeUpdated();
    internal void set_IsFieldRangeUpdated(bool value);
    internal bool get_IsFieldSeparator();
    internal void set_IsFieldSeparator(bool value);
    internal bool get_IsSkip();
    internal void set_IsSkip(bool value);
    internal bool get_IsUpdated();
    internal void set_IsUpdated(bool value);
    internal bool get_IsInFieldResult();
    internal void set_IsInFieldResult(bool value);
    internal bool get_IsPgNum();
    internal void set_IsPgNum(bool value);
    internal bool get_IsNumPagesInsideExpressionField();
    internal void set_IsNumPagesInsideExpressionField(bool value);
    internal bool get_IsNumPageUsedForEvaluation();
    internal void set_IsNumPageUsedForEvaluation(bool value);
    internal bool get_IsFieldInsideUnknownField();
    internal void set_IsFieldInsideUnknownField(bool value);
    internal WCharacterFormat get_ResultFormat();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    internal bool get_IsFieldWithoutSeparator();
    internal WField get_OriginalField();
    internal void set_OriginalField(WField value);
    internal List`1<string> get_Functions();
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void CreateLayoutInfo();
    internal bool IsSkipFieldResult();
    private bool HasNestedField();
    private bool IsInvalidFieldCode();
    internal void SetSkipForFieldCode(IEntity entity);
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal void SetFieldTypeValue(FieldType fieldType);
    protected internal virtual void ParseFieldCode(string fieldCode);
    protected internal virtual void UpdateFieldCode(string fieldCode);
    private bool CheckFieldWithoutSeparator();
    internal bool AddFormattingString();
    internal string FindFieldCode();
    private void SetTextFormatSwitchString();
    private string UpdateTextFormatSwitchString(TextFormat newType);
    private void SetLocalSwitchString();
    private void SetScreenTipAndPositionSwitch(string fieldCode, int switchStartIndex, string formattingSwitch);
    protected internal virtual string ConvertSwitchesToString();
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void Detach();
    private void RemoveUptoFieldEndInInlineControl(WParagraph ownerPara, WParagraph fieldEndOwnerPara);
    private void RemoveItemsUptoFieldEnd(WParagraph ownerParagraph, int startItemIndex, Boolean& isFoundFieldEnd);
    private void RemoveItemsUptoFieldEnd(InlineContentControl inlineContenControl, int startItemIndex, Boolean& isFoundFieldEnd);
    internal virtual void AttachToDocument();
    private Entity GetFieldOwnerTextBody(Entity entity);
    protected virtual object CloneImpl();
    internal virtual void Close();
    internal ParagraphItem GetAsSymbolOrTextRange();
    internal string GetFieldCodeForUnknownFieldType();
    internal void UpdateUnknownFieldType(WCharacterFormat resultFormat);
    internal WField CreateFieldByType(string fieldCode, FieldType fieldType);
    internal bool IsFormField();
    internal void RemoveFieldCodeItems();
    private string FindFieldResult();
    internal void ReplaceAsTOCField();
    private void RemoveNestedTOCFields();
    internal WField ReplaceValidField();
    internal void SetUnknownFieldType();
    internal void EnusreSpaceInResultText(WMergeField mergeField, string resultText, string textBefore, string textAfter);
    private string UpdateTextBodyFieldCode(WTextBody tBody, WParagraph endParagraph, int startIndex, string code);
    private bool UpdateFieldType(string fieldCode);
    internal void RemovePreviousFieldCode();
    private Entity GetSection(Entity entity);
    internal void EnsureBookmarkStart(BookmarkStart bookmarkStart);
    internal void EnsureBookmarkStart(BookmarkEnd bookmarkEnd);
    internal List`1<WCharacterFormat> GetResultCharacterFormatting();
    private void UpdateRangeCharacterFormats(IList items, List`1& characterFormats, bool isNotMergeFormat);
    private WCharacterFormat GetResultCharFormatFromRange(WTextRange textRange, int i, Int32& count);
    internal ParagraphItem GetIncudePictureFieldResult();
    public sealed virtual void Update();
    private bool IsBooKMarkSeqFieldUpdated(WField field);
    private void ClearSeqFieldInternalCollection();
    internal void UpdateSequenceFieldResult(string fieldResultNumber);
    private int GetSequenceFieldResult();
    private bool IsNeedToResetHeadingLevel();
    internal WParagraph GetPreviousParagraph(WParagraph paragrph);
    private WParagraph GetPreviousParagraphIsInTable(WTable table);
    private WParagraph GetPreviousParagraphIsInCell(WParagraph paragraph);
    private WParagraph GetPreviousParagraphIsInSection(IEntity textBodyItem);
    private WParagraph GetPreviousParagraphIsInSDTContent(BlockContentControl sdtContent);
    private WSeqField GetPrevSeqField();
    private int GetHeadingLevel(WParagraphStyle paragraphStyle);
    private int ParseIntegerValue(string value);
    private void UpdateUnknownField();
    private string GetAutoNumFieldValue(WField field);
    private char GetAutoNumSeparatorChar(WField field);
    private bool IsInValidTextBody(WField field);
    internal void UpdateSetFields();
    private void UpdateBookMarkForSetFields(string bkName);
    private void RemoveBookMarksForSetFields(string bookMarkName);
    private void UpdateDocumentBuiltInProperties(string propertyName);
    private string RemoveStringFormat(string fieldCode, Boolean& isHavingStringFormat);
    internal string UpdateDateField(string text, DateTime currentDateTime);
    private string GetOrdinalstring(bool ordinalString, string text);
    internal bool UpdateNextIfField();
    private void UpdateSectionField();
    private bool IsPictureSwitchIsInSecondPlace();
    internal void UpdateNumberFormatResult(string result);
    internal void UpdateNumberFormatResult(string result, bool skipFieldResultPartUpdate);
    private void UpdateDocPropertyField();
    internal string UpdateTextFormat(string text);
    internal string UpdateTextFormat(string text, string formattingString);
    internal string UpdateTextFormat(string text, string formattingString, Boolean& pageFieldHasFormatText);
    private string GetCapsstring(string text);
    private string CapsConversion(string text, char separator);
    private string GetNumberFormat(string numberFormat);
    private string ChangeToInvariantFormat(string tempNumberFormat);
    private void UpdateRefField();
    private bool IsBookmarkSelfReference(string bkmkName);
    private void CheckRefBookmarkParaItems(int startIndex, ParagraphItemCollection paragraphItems, BookmarkEnd bkmkEnd, Boolean& isFieldReached, Boolean& isBookmarkEndReached);
    private void CheckRefBookmarkBodyItems(int startIndex, BodyItemCollection bodyItems, BookmarkEnd bkmkEnd, Boolean& isFieldReached, Boolean& isBookmarkEndReached);
    private void CheckRefBkmkParaInTableAndBlockCC(WParagraph paragraphStart, BookmarkEnd bkmkEnd, Boolean& isFieldReached, Boolean& isBookmarkEndReached);
    private void CheckRefBookmarkTable(WTable table, WTableCell tableCell, int nextItemIndex, BookmarkEnd bkmkEnd, Boolean& isFieldReached, Boolean& isBookmarkEndReached);
    private void CheckRefBookmarkBody(WParagraph paragraphStart, BookmarkEnd bkmkEnd, Boolean& isFieldReached, Boolean& isBookmarkEndReached);
    internal bool CompareOwnerTextBody(Entity bookmark);
    private void UpdateUnKnownFieldResult(List`1<Entity> fieldResult);
    private void UpdateRefFieldResult(List`1<Entity> fieldResult);
    private void InsertTextBodyItem(WTextBody textBody, int nextTextBodyItemIndex, TextBodyItem textBodyItem);
    private void MoveFieldEndToLastPara(WParagraph para);
    internal string GetHierarchicalIndex(Entity entity);
    internal string GetPositionValue(BookmarkStart bkStart);
    internal bool CompareHierarchicalIndex(string value1, string value2);
    private string GetDateValue(string text, DateTime date);
    private int UpdateCustomDay(int dateValue, DateTime currentDateTime, int count);
    private int UpdateCustomMonth(int dateValue, DateTime currentDateTime, int count);
    private int UpdateCustomYear(int dateValue, DateTime currentDateTime, int count);
    private string GetNumber(string text, Boolean& isNum);
    private string GetNumberAlphabet(string text);
    private string TrimBeginingText(string fieldCode);
    private string TrimEndText(string fieldCode);
    protected string RemoveText(string text, string textToRevome);
    private string RemoveText(string text, string textToRevome, bool isTrim);
    protected List`1<string> SplitIfArguments(string text, List`1& operatorIndexForDoubleQuotes, String& operatorValue);
    private void SplitFieldCode(int tableStart, String& text, String& condition);
    private void SplitFieldCode(List`1<string> operators, List`1<string> arguments, List`1<int> operatorIndex, bool isOperator, String& text, String& condition);
    private string GetOperatorValue(List`1<int> operatorIndex, string text);
    private void UpdateOperatorIndex(List`1<int> operatorsIndex, int count);
    private void UpdateOperatorIndexForDoubleQuote(List`1<int> operatorsIndex, int count);
    private bool IsOperator(List`1<string> operators, String& text, String& condition);
    internal List`1<int> GetOperatorIndex(List`1<string> operators, string text, Boolean& isDoubleQuote);
    private string GetTextInTable(String& text);
    protected string UpdateCondition(string text, List`1<int> operatorIndex, string operatorValue);
    private bool IsOperandEqual(string operand0, string operand1);
    private bool HasOperatorinText(bool isOperatorAtIndex, string operatorValue, string expectedoperator, string text);
    private bool ValidateOperatorIndex(string text, string expectedOperator, List`1<int> operatorIndex);
    private void UpdateCompareField();
    private string CompareExpression(double operand1, double operand2, string operation);
    private void UpdateFormulaField();
    private string RemoveCurrencySymbol(string text, Boolean& isFieldCodeStartWithCurrencySymbol);
    internal string UpdateNumberFormat(string text, string numberFormat);
    private bool IsNeedToFormatFieldResult(string numberFormat);
    private bool IsNeedToFormatFieldResult(string numberFormat, string currency, bool checkContains);
    private string GetFormattedString(string format, string text);
    private void CheckNumberFormatForNegativeValue(String& format, string text);
    private void FormatFieldValue(string format, char groupSeparator, char decimalSeparator, string integerPart, string fractionalPart, StringBuilder fieldResult);
    private void InsertBeforeText(StringBuilder fieldResult, string numberFormat, char separator);
    private void UpdateFractionalPart(string fractionalPart, string numberFormats, char groupSeparator, char decimalSeparator, StringBuilder fieldResult);
    private void UpdateIntegeralPart(string integerPart, string numberFormats, string groupSeparator, StringBuilder fieldResult, bool insertSeparator);
    private string UpdateFieldValueBySeparator(string fieldValue, char separator);
    private string AddFieldValues(List`1<int> fieldValues);
    private List`1<int> SplitFieldValue(string fieldValue, char separator);
    private void SplitBySeparator(Boolean& foundMultipleSeparator, int charIndex, string fieldValue, char separator, StringBuilder integerFieldValue, List`1<int> integerFieldValues, Int32& lastGroupLegth);
    private void Clear(StringBuilder stringBuilder);
    private int ConvertToInteger(string value);
    private bool IsBeginWithDoubleQuote(int index);
    private bool HasValidSeperator(string numberFormat, char seperator, char decimalSeparator, Boolean& insertGroupSeparator);
    private String[] SplitNumberFormat(string numberFormat, char groupSeparator, char decimalSeparator);
    protected string RemoveMergeFormat(string text);
    internal string RemoveMergeFormat(string fieldCode, String& numberFormat);
    private string UpdateFormula(string fieldCode, Boolean& isFieldCodeStartWithCurrencySymbol);
    private string UpdateFunction(string fieldCode, Boolean& isFieldCodeStartWithCurrencySymbol);
    private double Product(List`1<double> operands);
    private double Sum(List`1<double> operands);
    private double Average(List`1<double> operands);
    private double RoundOf(double operand, int decimalPoint);
    private double Defined(string operand);
    private bool IsFunction(string text);
    private bool IsExpression(string text);
    private double UpdateExpression(string text, Boolean& isFieldCodeStartWithCurrencySymbol);
    private void EvaluateExpression(List`1& expression, string operation, bool isAritmeticOperation);
    private List`1<string> SplitExpression(string text, List`1<string> operators, Boolean& isFieldCodeStartWithCurrencySymbol);
    private List`1<double> SplitOperands(string text, Boolean& isFieldCodeStartWithCurrencySymbol);
    public sealed virtual void Unlink();
    private void RemoveFieldItems(Boolean& isFieldReached, Boolean& isFieldSeperatorReached);
    private void ParagraphItems(ParagraphItem paraItem, Boolean& isFieldReached, Boolean& isFieldSeperatorReached);
    private void TextBodyItems(TextBodyItem textbodyItem, Boolean& isFieldReached, Boolean& isFieldSeperatorReached);
    private void RemoveFieldCodesInTextBody(WTextBody textBody, Boolean& isFieldReached, Boolean& isFieldSeperatorReached);
    private void RemoveFieldCodesInParagraph(ParagraphItemCollection paraItems, Boolean& isFieldReached, Boolean& isFieldSeperatorReached);
    private void RemoveFieldCodesInTable(WTable table, Boolean& isFieldReached, Boolean& isFieldSeperatorReached);
    private void RemoveNestedFields();
    private void RemoveField(WField field);
    private void AddUnlinkNestedFieldStack(Boolean& isFieldReached, Boolean& isFieldSeperatorReached);
    private void ResetUnlinkNestedFieldStack(Boolean& isFieldReached, Boolean& isFieldSeperatorReached);
    internal void UpdateFieldRange();
    private void UpdateParagraphItems(ParagraphItemCollection items, int startIndex);
    private string UpdateNestedFieldCode(bool isUpdateNestedFields, WMergeField mergeField);
    protected string UpdateTextForTextBodyItem(Entity entity, bool isUpdateNestedFields);
    private string UpdateTextForTextBodyItem(Entity entity, bool isUpdateNestedFields, WMergeField mergeField);
    private string UpdateTextForTable(Entity entity, bool isUpdateNestedFields, WMergeField mergeField);
    protected string UpdateTextForParagraphItem(Entity entity, bool isUpdateNestedFields);
    internal string GetFieldResultValue();
    private void ParseFieldValue(string fieldValue);
    private static string ClearStringFromOtherCharacters(string value);
    internal void RemoveFieldSeparator(WFieldMark fieldMark);
    protected void ParseField(string fieldCode);
    protected void ParseFieldFormat(String[] fieldValues);
    private void ParseLocalRef(string fieldCode, int startPos);
    private string ParseSwitches(string text, int index);
    private bool IsStartWithValidChar(string text, String& startCharacter);
    private bool IsEndWithValidChar(string text, String& endCharacter);
    private string RemoveMeridiem(string text, Boolean& isMeridiemDefined);
    private string UpdateMeridiem(string text, DateTime currentDateTime);
    internal string UpdateDateValue(string text, DateTime currentDateTime);
    private string UpdateDay(string dateValue, DateTime currentDateTime, int count);
    internal CultureInfo GetCulture(LocaleIDs localID);
    private string UpdateMonth(string dateValue, DateTime currentDateTime, int count);
    private CultureInfo GetCultureFromCharFormat();
    private bool GetHasKeyFromCharacterFormat(WCharacterFormat characterFormat, CultureInfo& culture, bool isRTL);
    private bool GetHasKeyFromBaseFormat(FormatBase baseFormat, CultureInfo& culture, bool isRTL);
    private Entity GetFirstValidFieldCodeItem();
    private Entity GetValidFieldCodeForTextBodyItem(Entity entity);
    private Entity GetValidFieldCodeForTable(Entity entity);
    private Entity GetValidFieldCodeForParagraphItem(Entity entity);
    private string UpdateYear(string dateValue, DateTime currentDateTime, int count);
    private string UpdateHour(string dateValue, DateTime currentDateTime, int count, bool is12HoursFormat);
    private string UpdateMinute(string dateValue, DateTime currentDateTime, int count);
    private string UpdateSecond(string dateValue, DateTime currentDateTime, int count);
    internal void CheckFieldSeparator();
    private void GetFormattingForHyperLink();
    protected Entity GetClonedTable(Entity entity, bool isRefFieldUpdate);
    private Entity GetClonedContentControl(Entity entity, bool isRefFieldUpdate);
    private void UpdateClonedTextBodyItem(WTextBody source, WTextBody destination, bool isRefFieldUpdate);
    private List`1<Entity> GetClonedParagraph(Entity entity, string txt, Entity& nextItem, Int32& itemIndex, bool isRefFieldUpdate);
    private bool UpdateFieldItems(ParagraphItem item, Entity entity, WParagraph& paragraph, List`1& itemsToUpdate, Int32& itemIndex, Boolean& isResultFound);
    private bool IsSkipToAddEmptyPara(WParagraph paragraph, WField field, bool isResultFound);
    private int GetParagraphItemIndex(Entity entity, string txt, int index);
    private int GetStartItemIndex(int index, String& text);
    private void MergeFieldMarkParagraphs();
    internal void RemoveFieldResult();
    protected void RemovePreviousResult();
    private void CheckPragragh(WParagraph paragraph);
    private void UpdateParagraphText(WParagraph paragraph, bool isLastItem, String& result);
    private string GetParagraphItemText(ParagraphItem item);
    internal void UpdateFieldResult(string text);
    internal void UpdateFieldResult(string text, bool isFromHyperLink);
    protected WTextRange GetTextRange(string text);
    internal void SkipLayoutingOfFieldCode();
    internal void SplitTextRangeByParagraphBreak();
    private void SplitTextRange(Entity entity);
    private void SkipMacroButtonFieldCode();
    private string SplitByWhiteSpace(string macroText);
    private void SkipLayoutingOfParagraphItem(Entity entity);
    private void SkipLayoutingOfTextBodyItem(Entity entity);
    private void SkipLayoutingOfTable(Entity entity);
    private bool SetSkip(int startIndex, EntityCollection items, bool isFieldCode, int itemsCount);
    private IEntity GetNextSibling();
    internal void SkipLayoutingFieldItems(bool isFieldCode);
    private bool SkipTableItems(WTable table, WTableCell wTableCell);
    private void SkipParaItems(ParagraphItemCollection items);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    private SizeF GetEQFieldSize(FontScriptType fontScriptType, DrawingContext dc, WCharacterFormat charFormat);
    private LayoutedEQFields LayoutEQfileCode(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private bool IsValidEqFieldCode(List`1<string> splittedFieldCodes, string fieldCode);
    private bool IsValidSwitch(string fieldCode);
    private LayoutedEQFields LayoutSwitch(FontScriptType scriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateSwitch(FontScriptType fontScriptType, LayoutedEQFields ltEqField, string fieldCode, DrawingContext dc, Font font, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateNestedSwitch(FontScriptType fontScriptType, LayoutedEQFields ltEqField, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateTextEQField(TextEQField textEqField, string fieldCode, DrawingContext dc, Font font, WCharacterFormat charFormat, float xPosition, float yPosition);
    private LayoutedEQFields LayoutRadicalSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateRadicalSwitch(FontScriptType scriptType, LayoutedEQFields radicalSwitch, String[] elements, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateRadicalOuterElement(FontScriptType fontScriptType, LayoutedEQFields radicalSwitch, string element, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float outerELementY, float outerElementRight, RectangleF innerElementBounds);
    private void ShiftRadicalSymbolYPosition(LayoutedEQFields ltEQField, float shiftPosition);
    private void UpdateRadicalBounds(LayoutedEQFields ltEQField);
    private void GenerateRadicalSymbol(LayoutedEQFields radicalSwitch, LayoutedEQFields innerElement, float xPosition, Single& outerElementRight, Single& outerElementY, float fontSize);
    private void UpdateRadicalSwitchBounds(LayoutedEQFields radicalSwitch, LayoutedEQFields innerElement, LineEQField rootHook, LineEQField upwardLine, LineEQField topHorizontalLine, float xPosition, float lineThickness);
    private void GenerateUpwardLine(LayoutedEQFields innerElement, LineEQField upwardLine, float lineThickness);
    private void GenerateRadicalDownwardLine(LayoutedEQFields innerElement, LineEQField upwardLine, LineEQField downwardLine, float lineThickness, PointF& downwardStart, Single& height);
    private void GenerateRadicalTopHorizontalLine(LayoutedEQFields innerElement, LineEQField upwardLine, LineEQField topHorizontalLine, float lineThickness);
    private void GenerateRadicalHook(LayoutedEQFields innerElement, LineEQField rootHook, float lineThickness, Single& height, PointF& downwardStart);
    private void GetOuterElementPositions(LineEQField rootHook, LineEQField upwardLine, LineEQField topHorizontalLine, float lineThickness, Single& outerElementRight, Single& outerElementY, float fontSize);
    private float GetWidthFromAngle(float height, double angle1, double angle2);
    private double DegreeIntoRadians(float angle);
    private bool IsValidRadicalSwitch(string fieldCode);
    private bool IsValidListSwitch(string fieldCode);
    private LayoutedEQFields LayoutListSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateListSwitch(FontScriptType fontScriptType, LayoutedEQFields listSwitch, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private bool IsValidSuperscriptSwitch(string fieldCode);
    private bool IsCorrectSuperscriptSwitchSequence(string superscriptEqCode);
    private bool HasPositiveValue(string inputText);
    private LayoutedEQFields LayoutSuperscriptSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateSuperscriptSwitch(FontScriptType fontScriptType, LayoutedEQFields scriptSwitch, String[] elements, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void AddSpaceBelowLine(LayoutedEQFields layoutedEqFields, int spaceBelowLineValue);
    private void AddSpaceAboveLine(LayoutedEQFields layoutedEqFields, int spaceAboveLineValue);
    private int GetSpaceBelowLineValue(string fieldCode);
    private int GetSpaceAboveLineValue(string fieldCode);
    private void AlignColumnWise(LayoutedEQFields ltEqField, DrawingContext dc);
    private void ApplySuperscriptProperties(LayoutedEQFields scriptSwitch, string superscriptEqCode, DrawingContext dc);
    private void AlignAsSuperScriptSwitch(DrawingContext dc, LayoutedEQFields scriptSwitch, int upValue);
    private void AlignAsSubscriptSwitch(DrawingContext dc, LayoutedEQFields scriptSwitch, int downValue);
    private void GetsSuperOrSubscriptPropertiesValue(string fieldCode, Int32& upValue, Int32& downValue, Boolean& isUpValue, Boolean& isDownValue);
    private int GetValueFromstring(string inputText);
    private float GetMaximumBottom(LayoutedEQFields ltEqFields);
    private LayoutedEQFields LayoutFractionSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateFractionSwitch(FontScriptType fontScriptType, LayoutedEQFields fraction, String[] elements, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void InsertFractionLine(FontScriptType fontScriptType, LayoutedEQFields fraction, LayoutedEQFields numerator, LayoutedEQFields denominator, float xPosition, float yPosition, DrawingContext dc, WCharacterFormat charFormat);
    private void SetXForFractionelements(LineEQField fractionLine, LayoutedEQFields numerator, LayoutedEQFields denominator, float xPosition, float yPosition);
    private void SetYForFractionElements(LayoutedEQFields numerator, LayoutedEQFields denominator, DrawingContext dc, float xPosition, float yPosition);
    private float CenterAlign(LineEQField lineEqField, float textWidth);
    private bool IsValidFractionSwitch(string fieldCode);
    private void LayoutEquationFieldCode(FontScriptType fontScriptType, LayoutedEQFields layouttedEqField, List`1<string> splittedFieldCodeSwitch, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private LayoutedEQFields LayoutBracketSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GetBracketsType(string bracketFieldCode, Char& openingChar, Char& closingChar);
    private char GetCorrespondingCloseCharacter(char openingCharacter);
    private void GenerateBracketSwitch(FontScriptType fontScriptType, LayoutedEQFields bracketSwitch, string element, char openBracket, char closeBracket, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateopeningBracket(FontScriptType fontScriptType, LayoutedEQFields bracketSwitch, char openBracket, DrawingContext dc, WCharacterFormat charFormat, bool isBracketContainsMinimumHeight, float xPosition, float yPosition, float maxHeight, float extraWidth, float extraYPosition);
    private void GenerateClosingBracket(FontScriptType fontScriptType, LayoutedEQFields bracketSwitch, char closeBracket, DrawingContext dc, WCharacterFormat charFormat, bool isBracketContainsMinimumHeight, float xPosition, float yPosition, float maxHeight, float extraWidth, float extraYPosition);
    private bool IsBracketContainsMinimumHeight(FontScriptType fontScriptType, char inputCharacter, WCharacterFormat charFormat, DrawingContext dc, float maxHeight);
    private void GenerateCharacter(FontScriptType fontScriptType, LayoutedEQFields layoutedCharacter, char inputCharacter, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight);
    private void AdjustFontSizeOfCharacter(FontScriptType fontScriptType, LayoutedEQFields layoutedCharacter, char inputCharacter, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float maxHeight);
    private void GenerateParenthesisFromUnicodes(LayoutedEQFields charField, char upperPartUnicode, char middlePartUnicode, char lowerPartUnicode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight);
    private void GenerateMiddlePartParenthesis(LayoutedEQFields charField, char middlePartUnicode, LayoutedEQFields middlePart, TextEQField lowerPart, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight);
    private void GenerateSquareBracketFromUnicodes(LayoutedEQFields charField, char upperPartUnicode, char middlePartUnicode, char lowerPartUnicode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight);
    private void GeneratCurlyBraceFromUnicodes(LayoutedEQFields charField, char upperPartUnicode, char middlePartUnicode, char lowerPartUnicode, char extensionPartUnicode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight);
    private void GenerateUpperPartExtension(LayoutedEQFields charField, char extensionPartUnicode, TextEQField middlePart, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight);
    private void GenerateLowerPartExtension(LayoutedEQFields charField, char extensionPartUnicode, TextEQField lowerPart, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight);
    private void GenerateUpperPartOfBracket(LayoutedEQFields charField, char upperPartUnicode, TextEQField upperPart, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateLowerPartOfBracket(LayoutedEQFields charField, char lowerPartUnicode, TextEQField lowerPart, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateRepeatedCharacter(LayoutedEQFields extensionPart, char extensionUnicode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight, float fontSize);
    private bool IsValidBracketSwitch(string fieldCode);
    private bool HasInCorrectBracketSwitchSequence(String[] fieldCodes);
    private bool IsValidBoxSwitch(string fieldCode);
    private bool IsCorrectBoxSwitchSequence(string boxSwitchEqCode);
    private LayoutedEQFields LayoutBoxSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GetBoxSwitchProperties(string boxSwitchEqCode, Boolean& hasLeftLine, Boolean& hasRightLine, Boolean& hasBottomLine, Boolean& hasTopLine);
    private void InsertBox(LayoutedEQFields boxSwitch, bool hasLeftLine, bool hasTopLine, bool hasRightLine, bool hasBottomLine, float extraBoxWidth);
    private void AddLineEQChild(LayoutedEQFields ltEqFields, float x1, float y1, float x2, float y2, string line);
    private void GenerateBoxSwitch(FontScriptType fontScriptType, LayoutedEQFields boxSwitch, string element, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private LayoutedEQFields LayoutIntegralSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GetIntegralProperties(string integralEqCode, Boolean& isInline, String& symbol, Boolean& isVaribleSize);
    private void GenerateIntegralSwitch(FontScriptType fontScriptType, LayoutedEQFields integralSwitch, string element, string symbol, bool isInline, bool isVariableSize, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateIntegralSwitchElements(FontScriptType fontScriptType, LayoutedEQFields upperLimit, LayoutedEQFields lowerLimit, LayoutedEQFields integrand, Single& maxWidth, String[] integralElements, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GetHeightOfSymbol(LayoutedEQFields upperLimit, LayoutedEQFields lowerLimit, LayoutedEQFields integrand, bool isInline, Single& symbolheight);
    private void SetIntegralElementsPosition(FontScriptType fontScriptType, bool isInline, LayoutedEQFields upperLimit, LayoutedEQFields lowerLimit, LayoutedEQFields integralSymbol, LayoutedEQFields integrand, LayoutedEQFields integralSwitch, string symbol, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxWidth);
    private void AlignInlineIntegralSwitch(FontScriptType fontScriptType, LayoutedEQFields upperLimit, LayoutedEQFields lowerLimit, LayoutedEQFields integralSymbol, LayoutedEQFields integrand, LayoutedEQFields integralSwitch, string symbol, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void AlignNotInlineIntegralSwitch(FontScriptType fontScriptType, LayoutedEQFields upperLimit, LayoutedEQFields lowerLimit, LayoutedEQFields integralSymbol, LayoutedEQFields integrand, LayoutedEQFields integralSwitch, DrawingContext dc, WCharacterFormat charFormat, float maxWidth);
    private void AlignPiOrSummationSymbol(LayoutedEQFields upperLimit, LayoutedEQFields lowerLimit, LayoutedEQFields integralSymbol, LayoutedEQFields integrand, DrawingContext dc);
    private void AlignIntegralSymbol(FontScriptType fontScriptType, LayoutedEQFields upperLimit, LayoutedEQFields lowerLimit, LayoutedEQFields integralSymbol, LayoutedEQFields integrand, DrawingContext dc, WCharacterFormat charFormat);
    private float GetExtraValueForLowerLimit(FontScriptType fontScriptType, float integrandHeight, DrawingContext dc, WCharacterFormat charFormat);
    private float GetExtraHeightOfIntegralSymbol(float integrandHeight, float descent);
    private float GetCenterAlignSpace(float maxSize, float elementSize);
    private void GenerateSymbolForIntegralSwitch(FontScriptType fontScriptType, LayoutedEQFields integrand, LayoutedEQFields layoutedSymbol, string inputCharacter, bool isVariableSize, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float symbolSize);
    private float GetIntegralSymbolFontSize(LayoutedEQFields integrand);
    private void GenerateTwoPartsOfIntegral(LayoutedEQFields layoutedSymbol, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float fontSize);
    private void GenerateIntegralFromUnicodes(LayoutedEQFields layoutedSymbol, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight, float fontSize);
    private void GenerateUpperPartOfIntegral(LayoutedEQFields layoutedSymbol, TextEQField upperPart, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float fontSize);
    private void GenerateLowerPartOfIntegral(LayoutedEQFields layoutedSymbol, TextEQField lowerPart, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float fontSize);
    private void GenerateMiddlePartOfIntegral(LayoutedEQFields layoutedSymbol, LayoutedEQFields middlePart, TextEQField lowerPart, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, float maxHeight, float fontSize);
    private bool IsValidIntegralSwitch(string fieldCode);
    private bool HasInCorrectIntegralSequence(String[] fieldCodes);
    private bool IsValidOverstrikeSwitch(string fieldCode);
    private bool IsCorrectOverstrikeSwitchSequence(string overstrikeSwitchEqCode);
    private LayoutedEQFields LayoutOverstrikeSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateOverstrikeSwitch(FontScriptType fontScriptType, LayoutedEQFields overstrikeSwitch, string overstrikeElement, string alignment, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void AlignOverstrikeElements(LayoutedEQFields overstrikeSwitch, string alignment);
    private void GetAlignmentProperty(string overstrikeSwitchEqCode, String& alignment);
    private bool IsValidArraySwitch(string fieldCode);
    private bool IsCorrectArraySwitchSequence(string arrayEqCode);
    private LayoutedEQFields LayoutArraySwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GetArraySwitchProperties(string arraySwitchEqCode, Int32& numberOfColumns, Int32& verticalSpace, Int32& horizontalSpace, StringAlignment& alignment);
    private void GetAlignmentForArraySwitch(string alignmentCode, StringAlignment& alignment);
    private void GenerateArraySwitch(FontScriptType fontScriptType, LayoutedEQFields arraySwitch, string arrayElement, int numberOfColumns, int verticalSpace, int horizontalSpace, StringAlignment alignment, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateArraySwitchElements(FontScriptType fontScriptType, LayoutedEQFields arraySwitch, string arrayElement, int numberOfColumns, int verticalSpace, int horizontalSpace, StringAlignment alignment, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void AlignArraySwitch(LayoutedEQFields arraySwitch, DrawingContext dc, Font font, FontScriptType scriptType);
    private bool HasElementInArraySwitch(LayoutedEQFields arraySwitch, int row, int column);
    private void GetRowsAndColumnsCount(LayoutedEQFields arraySwitch, Int32& rows, Int32& columns);
    private void SetYForArrayElements(LayoutedEQFields arraySwitch, DrawingContext dc, int rows, int columns);
    private void SetColumnWidth(LayoutedEQFields arraySwitch, int rows, int columns);
    private void SetXforElementsInColumn(LayoutedEQFields arraySwitch, int columnIndex, int rows, float xposition);
    private float GetMaximumColumnWidth(LayoutedEQFields arraySwitch, int columnIndex);
    private bool IsValidDisplaceSwitch(string fieldCode);
    private LayoutedEQFields LayoutDisplaceSwitch(FontScriptType fontScriptType, string fieldCode, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateDisplaceSwitch(FontScriptType fontScriptType, LayoutedEQFields displaceSwitch, string displaceElement, int shiftValue, bool hasLine, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void ShiftDisplaceSwitch(FontScriptType fontScriptType, LayoutedEQFields displaceSwitch, int shiftValue, bool hasLine, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GenerateLineInDisplaceSwitch(FontScriptType fontScriptType, LayoutedEQFields displaceSwitch, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition, int length);
    private void SetZeroWidth(LayoutedEQFields ltEqFields);
    private void GenerateSpaceForWidth(FontScriptType fontScriptType, TextEQField ltEqField, float maxWidth, DrawingContext dc, WCharacterFormat charFormat, float xPosition, float yPosition);
    private void GetDisplaceSwitchProperties(string displaceSwitchEqCode, Int32& shiftValue, Boolean& hasLine);
    private bool IsCorrectCodeFormat(string eqCode, bool isAlsoNegative);
    private void SplitTextAndInteger(string originalString, String& valuePart);
    private float GetFontSizeFromHeight(string text, Single& maxHeight, DrawingContext dc, WCharacterFormat charFormat);
    private void EQFieldVerticalAlignment(LayoutedEQFields movableEqField, LayoutedEQFields standardEqField, DrawingContext dc);
    private char GetSeparator();
    private String[] SplitElementsByComma(string element);
    private void UpdateltEqFieldsBounds(LayoutedEQFields ltEQfields);
    private void ShiftEqFieldXPosition(LayoutedEQFields layoutedEqFields, float shiftX);
    private bool HasAnySwitch(string fieldCode);
    private string ExtractSwitch(string fieldCode);
    private void GetSplittedFieldCode(List`1<string> splittedFieldCodeSwitch, string fieldCode);
    private float GetTopMostY(LayoutedEQFields ltEqFields);
    private float GetLeftMostX(LayoutedEQFields ltEqFields);
    private float GetMaximumRight(LayoutedEQFields ltEqFields);
    private bool HasManyCharacters(string fieldcode);
    private string GetSubstringTill(string originalString, char delimeter);
    private bool HasSlashError(string fieldCode);
    private List`1<int> GetIndexOfBackSlashes(string fieldCode);
    private bool HasParenthesisError(string element);
    private bool IsOnlyAlphabets(string inputText);
    private string GetSwitchBeforeText(string eqFieldCode);
    private string GetFirstOccurenceEqSwitch(string eqInstruction);
    private string RemoveEQText(string fieldCode);
    private string ReplaceSymbols(string text);
    private bool IsExistInArray(Char[] charArray, char searchingChar);
    internal WCharacterFormat GetCharacterFormatValue();
    internal WCharacterFormat GetCharacterFormatValue(int paraItemIndex);
    internal FontScriptType GetFontScriptType();
    private WTextRange GetFirstFieldCodeItem();
    private sealed virtual override ILayoutInfo Syncfusion.Layouting.IWidget.get_LayoutInfo();
    internal bool IsBookmarkCrossRefField(String& bkName);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    internal WTextRange GetCurrentTextRange();
    internal BookmarkStart GetBookmarkOfCrossRefField(Boolean& isHiddenBookmark, bool isReturnHiddenBookmark);
    internal bool StartsWithExt(string text, string value);
    internal virtual int get_WCStartPos();
    internal virtual void set_WCStartPos(int value);
    internal void MarkNestedField();
    private void MarkAsNestedField(Entity entity);
    internal StringBuilder GetAsString(bool traverseTillSeparator);
}
public class Syncfusion.DocIO.DLS.WFieldMark : ParagraphItem {
    private FieldMarkType m_fldMarkType;
    private WField m_parentField;
    public EntityType EntityType { get; }
    public WCharacterFormat CharacterFormat { get; }
    public FieldMarkType Type { get; public set; }
    internal WField ParentField { get; internal set; }
    internal WFieldMark(IWordDocument doc);
    protected internal WFieldMark(WFieldMark fieldMark, IWordDocument doc);
    internal WFieldMark(IWordDocument doc, FieldMarkType type);
    public virtual EntityType get_EntityType();
    public WCharacterFormat get_CharacterFormat();
    public FieldMarkType get_Type();
    public void set_Type(FieldMarkType value);
    internal WField get_ParentField();
    internal void set_ParentField(WField value);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void InitXDLSHolder();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
}
public class Syncfusion.DocIO.DLS.WFootnote : ParagraphItem {
    internal static int DEF_FTNSTYLE_REF_ID;
    internal static int DEF_EDNSTYLE_REF_ID;
    private FootnoteType m_footnoteType;
    private WTextBody m_textBody;
    private byte m_symbolCode;
    private string m_strSymbolFontName;
    internal string m_strCustomMarker;
    private short m_changesCount;
    private byte m_bFlags;
    public EntityType EntityType { get; }
    public FootnoteType FootnoteType { get; public set; }
    public bool IsAutoNumbered { get; public set; }
    public WTextBody TextBody { get; }
    public WCharacterFormat MarkerCharacterFormat { get; }
    public byte SymbolCode { get; public set; }
    internal string SymbolFontName { get; internal set; }
    public string CustomMarker { get; public set; }
    internal bool CustomMarkerIsSymbol { get; }
    internal bool IsLayouted { get; internal set; }
    public WFootnote(IWordDocument doc);
    internal WFootnote(IWordDocument doc, string marker);
    public virtual EntityType get_EntityType();
    public FootnoteType get_FootnoteType();
    public void set_FootnoteType(FootnoteType value);
    public bool get_IsAutoNumbered();
    public void set_IsAutoNumbered(bool value);
    public WTextBody get_TextBody();
    public WCharacterFormat get_MarkerCharacterFormat();
    public byte get_SymbolCode();
    public void set_SymbolCode(byte value);
    internal string get_SymbolFontName();
    internal void set_SymbolFontName(string value);
    public string get_CustomMarker();
    public void set_CustomMarker(string value);
    internal bool get_CustomMarkerIsSymbol();
    internal bool get_IsLayouted();
    internal void set_IsLayouted(bool value);
    internal virtual void AddSelf();
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual void OnStateChange(object sender);
    internal virtual void Close();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    private void UpdateAutoMarker(bool isAuto);
    private void UpdateCustomMarker(string curMarker, string destMarker);
    private void UpdateSymbolMarker(byte symbolCode);
    private void ClearPreviousCustomMarker();
    private string GetCustomMarkerValue();
    internal bool CompareCharacterFormat(WCharacterFormat textRangeFormat);
    private bool CompareBorderProperty(Border textRangeBorder);
    internal void UpdateFtnMarker(string curMarker, string destMarker);
    internal void EnsureFtnMarker();
    private void AppendFtnSymbol();
    private WTextRange GenerateSymbol(byte symbolCode);
    private void ReplaceSelection(WTextRange symbol, WParagraph para, TextSelection selection);
    internal void EnsureFtnStyle();
    private void UpdateChangeFlag(bool value);
    private void ReplaceMarker(TextSelection selection, string replaceText);
    private void AppendMarker(string marker, WParagraph para);
    internal WTextRange GenerateText(string marker);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
}
public abstract class Syncfusion.DocIO.DLS.WFormField : WField {
    internal static int DEF_VALUE;
    protected FormFieldType m_curFormFieldType;
    private short m_params;
    private string m_title;
    private string m_help;
    private string m_tooltip;
    private string m_macroOnStart;
    private string m_macroOnEnd;
    private bool m_bHasFFData;
    public FormFieldType FormFieldType { get; }
    public string Name { get; public set; }
    public string Help { get; public set; }
    public string StatusBarHelp { get; public set; }
    public string MacroOnStart { get; public set; }
    public string MacroOnEnd { get; public set; }
    internal int Value { get; internal set; }
    internal int Params { get; internal set; }
    public bool Enabled { get; public set; }
    public bool CalculateOnExit { get; public set; }
    internal bool HasFFData { get; internal set; }
    public WFormField(IWordDocument doc);
    protected WFormField(WFormField formField, IWordDocument doc);
    public FormFieldType get_FormFieldType();
    public string get_Name();
    public void set_Name(string value);
    public string get_Help();
    public void set_Help(string value);
    public string get_StatusBarHelp();
    public void set_StatusBarHelp(string value);
    public string get_MacroOnStart();
    public void set_MacroOnStart(string value);
    public string get_MacroOnEnd();
    public void set_MacroOnEnd(string value);
    internal int get_Value();
    internal void set_Value(int value);
    internal int get_Params();
    internal void set_Params(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_CalculateOnExit();
    public void set_CalculateOnExit(bool value);
    internal bool get_HasFFData();
    internal void set_HasFFData(bool value);
    protected virtual object CloneImpl();
    internal virtual void AttachToParagraph(WParagraph paragraph, int itemPos);
    internal virtual void Detach();
    private void AttachForTextBody(WTextBody textBody);
    private void DetachForTextBody(WTextBody textBody);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    private void ApplyNewBookmarkName(string oldName, string newName);
    private bool ApplyInDocBkmkColl(string oldName, string newName);
    private void ApplyInOwnerParaColl(string oldName, string newName);
    private void CheckFormFieldName(string newName);
    internal abstract virtual StringBuilder GetAsString();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WHeadersFooters : XDLSSerializableBase {
    private HeaderFooter m_evenHeader;
    private HeaderFooter m_oddFooter;
    private HeaderFooter m_oddHeader;
    private HeaderFooter m_evenFooter;
    private HeaderFooter m_firstPageHeader;
    private HeaderFooter m_firstPageFooter;
    public HeaderFooter Header { get; }
    public HeaderFooter Footer { get; }
    public HeaderFooter EvenHeader { get; }
    public HeaderFooter OddHeader { get; }
    public HeaderFooter EvenFooter { get; }
    public HeaderFooter OddFooter { get; }
    public HeaderFooter FirstPageHeader { get; }
    public HeaderFooter FirstPageFooter { get; }
    public bool IsEmpty { get; }
    public HeaderFooter Item { get; }
    public HeaderFooter Item { get; internal set; }
    public bool LinkToPrevious { get; public set; }
    internal WHeadersFooters(WSection sec);
    public HeaderFooter get_Header();
    public HeaderFooter get_Footer();
    public HeaderFooter get_EvenHeader();
    public HeaderFooter get_OddHeader();
    public HeaderFooter get_EvenFooter();
    public HeaderFooter get_OddFooter();
    public HeaderFooter get_FirstPageHeader();
    public HeaderFooter get_FirstPageFooter();
    public bool get_IsEmpty();
    public HeaderFooter get_Item(int index);
    public HeaderFooter get_Item(HeaderFooterType hfType);
    internal void set_Item(HeaderFooterType hfType, HeaderFooter value);
    public bool get_LinkToPrevious();
    public void set_LinkToPrevious(bool value);
    protected virtual void InitXDLSHolder();
    internal WHeadersFooters Clone();
    protected virtual object CloneImpl();
    internal void Close();
    internal void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    public sealed virtual IEnumerator GetEnumerator();
    private bool GetLinkToPreviousValue();
    private void UpdateLinkToPrevious(bool linkToPrevious);
}
public abstract class Syncfusion.DocIO.DLS.WidgetBase : Entity {
    internal ILayoutInfo m_layoutInfo;
    private ILayoutInfo Syncfusion.Layouting.IWidget.LayoutInfo { get; }
    public WidgetBase(WordDocument doc, Entity owner);
    private sealed virtual override ILayoutInfo Syncfusion.Layouting.IWidget.get_LayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    protected abstract virtual void CreateLayoutInfo();
}
public abstract class Syncfusion.DocIO.DLS.WidgetContainer : WidgetBase {
    public int Count { get; }
    private IWidget Syncfusion.Layouting.IWidgetContainer.Item { get; }
    protected IEntityCollectionBase WidgetCollection { get; }
    public EntityCollection WidgetInnerCollection { get; }
    public WidgetContainer(WordDocument doc, Entity owner);
    public sealed virtual int get_Count();
    private sealed virtual override IWidget Syncfusion.Layouting.IWidgetContainer.get_Item(int index);
    protected abstract virtual IEntityCollectionBase get_WidgetCollection();
    public sealed virtual EntityCollection get_WidgetInnerCollection();
    internal virtual void Close();
}
public enum Syncfusion.DocIO.DLS.WidthOrigin : Enum {
    public int value__;
    public static WidthOrigin Margin;
    public static WidthOrigin Page;
    public static WidthOrigin LeftMargin;
    public static WidthOrigin RightMargin;
    public static WidthOrigin InsideMargin;
    public static WidthOrigin OutsideMargin;
}
public class Syncfusion.DocIO.DLS.WIfField : WField {
    private static char FieldTextStart;
    private static char FieldTextEnd;
    private static string PARAGRAPHMARK;
    private string m_expression1;
    private string m_expression2;
    private string m_operator;
    private string m_trueText;
    private string m_falseText;
    private int m_inc;
    private PseudoMergeField m_expField1;
    private PseudoMergeField m_expField2;
    private List`1<Entity> m_trueTextField;
    private List`1<Entity> m_falseTextField;
    private List`1<PseudoMergeField> m_mergeFields;
    private WFieldMark nestedFieldEnd;
    internal PseudoMergeField Expression1 { get; }
    internal PseudoMergeField Expression2 { get; }
    internal List`1<Entity> TrueTextField { get; }
    internal List`1<Entity> FalseTextField { get; }
    internal List`1<PseudoMergeField> MergeFields { get; }
    public WIfField(IWordDocument doc);
    internal PseudoMergeField get_Expression1();
    internal PseudoMergeField get_Expression2();
    internal List`1<Entity> get_TrueTextField();
    internal List`1<Entity> get_FalseTextField();
    internal List`1<PseudoMergeField> get_MergeFields();
    internal void UpdateIfField();
    private void RemoveFieldSeparatorAndResultForAutoNumField(WFieldMark fieldMark);
    private bool HaveAutoNumFieldInResult(List`1<Entity> fieldResult);
    private string GetEntityText(Entity entity, bool isFirstCall);
    private string ConvertFieldResultToString(List`1<Entity> fieldResult);
    private void UpdateIfFieldResult(bool result);
    private bool IsAllFieldResultTextRange(List`1<Entity> fieldResult);
    private void RemoveOtherTextRange(List`1<Entity> fieldResult);
    private void RemoveNestedSetField(List`1& fieldResult);
    private void UpdateIfFieldResult(List`1<Entity> fieldResult);
    private void MergeFieldSeparatorAndFieldEndParagraph();
    private void MoveFieldEndToFieldResultLastPara(WParagraph para);
    internal string ParseResult();
    private List`1<Entity> GetUpdatedRange();
    private void GetClonedFieldItem(Entity entity, List`1& entityList);
    private void GetClonedParagraphItem(Entity entity, List`1& entityList);
    private Entity SplitEntity(Entity entity, string remaining, Boolean& isFirstCall);
    private void ReadExpression(String& expressionText, Entity& entity, Boolean& readTrueText, Boolean& expressionFound, Boolean& isFirstCall);
    private bool ReachedEndOfExpression(String& text);
    private bool IsNeedToSplitText(string text, int i);
    private bool ContainsOperator(String& text);
    private int GetIndexOfOperator(string text);
    private void ReadTrueResult(String& text, Entity& entity, Boolean& readTrueText, Boolean& isIfFieldResult, Boolean& isFirstCall);
    private void ReadFalseResult(String& text, Entity& entity, Boolean& readFalseText, Boolean& isContinuousAdd, Boolean& isIfFieldResult, Boolean& isFirstCall);
    private bool HasRenderableParaItem(List`1<Entity> resultItems);
    private void TrimFieldResults(List`1<Entity> fieldResult);
    private bool HasNoParagraphMark(WParagraph para);
    private void TrimParagraphmark(List`1<Entity> fieldResult);
    private void TrimEmptyText(List`1<Entity> fieldResult);
    private void TrimDoubleQuotes(List`1<Entity> fieldResult);
    private void RemoveFieldTextStartEndChar(WTextRange& textRange, List`1& fieldResult, Int32& entityIndex);
    private void RemoveFieldTextStartEndChar(WTextRange& textRange);
    private void TrimDoubleQuotesinTextRange(WTextRange& textRange, Boolean& isStart, Boolean& isEnd);
    private int GetIndexOfDoubleQuote(string text);
    private void CheckIfField(WParagraph& para, String& text, Boolean& isIfFieldResult);
    private void CheckIfFieldEnd(WParagraph& para, Boolean& isIfFieldResult);
    protected internal virtual void ParseFieldCode(string fieldCode);
    protected internal virtual void UpdateFieldCode(string fieldCode);
    private void CheckExpStrings();
    private void ParseFieldValue();
    internal void UpdateExpString();
    internal void UpdateMergeFields();
    protected virtual object CloneImpl();
    internal virtual void Close();
}
public class Syncfusion.DocIO.DLS.WListFormat : FormatBase {
    internal static int ListLevelNumberKey;
    private static int ListTypeKey;
    internal static int CustomStyleNameKey;
    private static int RestartKey;
    internal static int LfoStyleNameKey;
    internal static int DEF_START_LISTID;
    [ThreadStaticAttribute]
internal static string m_currentStyleName;
    [ThreadStaticAttribute]
internal static int m_currLevelNumber;
    private byte m_bFlags;
    public int ListLevelNumber { get; public set; }
    public ListType ListType { get; }
    public bool RestartNumbering { get; public set; }
    public string CustomStyleName { get; }
    public ListStyle CurrentListStyle { get; }
    public WListLevel CurrentListLevel { get; }
    internal string LFOStyleName { get; internal set; }
    internal WParagraph OwnerParagraph { get; }
    internal bool IsListRemoved { get; internal set; }
    internal bool IsEmptyList { get; internal set; }
    public WListFormat(IWParagraph owner);
    public WListFormat(WordDocument doc, WParagraphStyle owner);
    internal WListFormat(WordDocument doc, WNumberingStyle owner);
    internal WListFormat(WordDocument doc, WTableStyle owner);
    public int get_ListLevelNumber();
    public void set_ListLevelNumber(int value);
    public ListType get_ListType();
    public bool get_RestartNumbering();
    public void set_RestartNumbering(bool value);
    public string get_CustomStyleName();
    public ListStyle get_CurrentListStyle();
    public WListLevel get_CurrentListLevel();
    internal string get_LFOStyleName();
    internal void set_LFOStyleName(string value);
    internal WParagraph get_OwnerParagraph();
    internal bool get_IsListRemoved();
    internal void set_IsListRemoved(bool value);
    internal bool get_IsEmptyList();
    internal void set_IsEmptyList(bool value);
    protected virtual object GetDefValue(int key);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    private void UpdateStyleNameAndType(ListStyle destinationListStyle);
    private bool IsListStyleAdded(WordDocument destDocument, string name, String& newStyleName);
    private void AddListStyleToDestination(WordDocument doc, ListStyle destinationListStyle);
    internal void CloneListRelationsTo(WordDocument doc, string styleName);
    internal void ImportListFormat(WListFormat srcListFormat);
    public void IncreaseIndentLevel();
    public void DecreaseIndentLevel();
    public void ContinueListNumbering();
    public void ApplyStyle(string styleName);
    public void ApplyDefBulletStyle();
    public void ApplyDefNumberedStyle();
    public void RemoveList();
    internal void SetListTypeKey(ListType listType);
    public virtual void ClearFormatting();
    private void CreateDefListStyles(ListType listType);
    internal bool Compare(WListFormat listFormat);
}
public class Syncfusion.DocIO.DLS.WListLevel : XDLSSerializableBase {
    internal int restartLevel;
    private String[] DEF_NUMBER_WORDS;
    private String[] DEF_TENS_WORDS;
    internal static string Level1Str;
    internal static string Level2Str;
    internal static string Level3Str;
    internal static string Level4Str;
    internal static string Level5Str;
    internal static string Level6Str;
    internal static string Level7Str;
    internal static string Level8Str;
    internal static string Level9Str;
    private WCharacterFormat m_chFormat;
    private WParagraphFormat m_prFormat;
    private string m_numberPrefix;
    private string m_numberSufix;
    private string m_layoutNumPref;
    private string m_bulletChar;
    private int m_startAt;
    private ListNumberAlignment m_alignment;
    private ListPatternType m_patternType;
    private FollowCharacterType m_followChar;
    private Byte[] m_charOffset;
    private int m_legacySpace;
    private int m_legacyIndent;
    private string m_pStyle;
    private WPicture m_picBullet;
    private short m_picButtetId;
    private byte m_bFlags;
    private string m_levelText;
    public ListNumberAlignment NumberAlignment { get; public set; }
    public int StartAt { get; public set; }
    public float TabSpaceAfter { get; public set; }
    public float TextPosition { get; public set; }
    public string NumberPrefix { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Use the NumberSuffix property of WListLevel class to set/get the suffix after the number for the specified list level.")]
public string NumberSufix { get; public set; }
    public string NumberSuffix { get; public set; }
    public string BulletCharacter { get; public set; }
    public ListPatternType PatternType { get; public set; }
    public bool NoRestartByHigher { get; public set; }
    public WCharacterFormat CharacterFormat { get; }
    public WParagraphFormat ParagraphFormat { get; }
    protected ListStyle OwnerListStyle { get; }
    protected WListLevel PreviousLevel { get; }
    public FollowCharacterType FollowCharacter { get; public set; }
    public bool IsLegalStyleNumbering { get; public set; }
    public float NumberPosition { get; public set; }
    public bool UsePrevLevelPattern { get; public set; }
    internal bool Word6Legacy { get; internal set; }
    internal int LegacySpace { get; internal set; }
    internal int LegacyIndent { get; internal set; }
    internal string ParaStyleName { get; internal set; }
    internal bool NoLevelText { get; internal set; }
    internal int LevelNumber { get; }
    internal WPicture PicBullet { get; internal set; }
    internal short PicBulletId { get; internal set; }
    internal int PicIndex { get; }
    internal bool IsEmptyPicture { get; internal set; }
    internal string LevelText { get; internal set; }
    public WListLevel(ListStyle listStyle);
    internal WListLevel(WordDocument doc);
    public ListNumberAlignment get_NumberAlignment();
    public void set_NumberAlignment(ListNumberAlignment value);
    public int get_StartAt();
    public void set_StartAt(int value);
    public float get_TabSpaceAfter();
    public void set_TabSpaceAfter(float value);
    public float get_TextPosition();
    public void set_TextPosition(float value);
    public string get_NumberPrefix();
    public void set_NumberPrefix(string value);
    public string get_NumberSufix();
    public void set_NumberSufix(string value);
    public string get_NumberSuffix();
    public void set_NumberSuffix(string value);
    public string get_BulletCharacter();
    public void set_BulletCharacter(string value);
    public ListPatternType get_PatternType();
    public void set_PatternType(ListPatternType value);
    public bool get_NoRestartByHigher();
    public void set_NoRestartByHigher(bool value);
    public WCharacterFormat get_CharacterFormat();
    public WParagraphFormat get_ParagraphFormat();
    protected ListStyle get_OwnerListStyle();
    protected WListLevel get_PreviousLevel();
    public FollowCharacterType get_FollowCharacter();
    public void set_FollowCharacter(FollowCharacterType value);
    public bool get_IsLegalStyleNumbering();
    public void set_IsLegalStyleNumbering(bool value);
    public float get_NumberPosition();
    public void set_NumberPosition(float value);
    public bool get_UsePrevLevelPattern();
    public void set_UsePrevLevelPattern(bool value);
    internal bool get_Word6Legacy();
    internal void set_Word6Legacy(bool value);
    internal int get_LegacySpace();
    internal void set_LegacySpace(int value);
    internal int get_LegacyIndent();
    internal void set_LegacyIndent(int value);
    internal string get_ParaStyleName();
    internal void set_ParaStyleName(string value);
    internal bool get_NoLevelText();
    internal void set_NoLevelText(bool value);
    internal int get_LevelNumber();
    internal WPicture get_PicBullet();
    internal void set_PicBullet(WPicture value);
    internal short get_PicBulletId();
    internal void set_PicBulletId(short value);
    internal int get_PicIndex();
    internal bool get_IsEmptyPicture();
    internal void set_IsEmptyPicture(bool value);
    internal string get_LevelText();
    internal void set_LevelText(string value);
    public void CreateLayoutData(string numStr, Byte[] characterOffsets, int levelNumber);
    public string GetListItemText(int listItemIndex, ListType listType);
    internal string GetListItemText(int listItemIndex, ListType listType, WParagraph paragraph);
    public WListLevel Clone();
    internal static WListLevel CreateDefBulletLvl(float dxLeft, string str, ListStyle listStyle);
    internal static WListLevel CreateDefNumberLvl(int dxLeft, int levelNumber, ListPatternType patType, ListNumberAlignment align, ListStyle listStyle);
    protected virtual object CloneImpl();
    private string GetNumberedItemText(int listItemIndex, WParagraph paragraph);
    private string GetAsWord(int number, bool isOrdinal);
    private string GenerateNumber(Int32& value, int magnitude, string letter);
    internal void Close();
    internal bool Compare(WListLevel listLevel);
    private string RemoveGUID(string styleName);
    internal string CheckNumberPrefOrSuf(string text);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void InitXDLSHolder();
}
public class Syncfusion.DocIO.DLS.WMath : ParagraphItem {
    private OfficeMathParagraph m_mathPara;
    private IWordDocument m_doc;
    public IOfficeMathParagraph MathParagraph { get; }
    public EntityType EntityType { get; }
    public bool IsInline { get; }
    public WMath(IWordDocument doc);
    public IOfficeMathParagraph get_MathParagraph();
    public virtual EntityType get_EntityType();
    public bool get_IsInline();
    protected virtual object CloneImpl();
    internal virtual void Close();
    public void ChangeToDisplay();
    internal Byte[] GetAsImage();
    internal bool IsRenderableItem(ParagraphItem item);
    public void ChangeToInline();
    private bool HasRenderableItemAfterMath(int mathIndex, ParagraphItemCollection paraItems);
    private bool HasRenderableItemBeforeMath(int mathIndex, ParagraphItemCollection paraItems);
    private void RemovePreviousBreak(int mathIndex, ParagraphItemCollection paraItems);
    private void AddEmptyTextRange(ParagraphItemCollection paraItems, int mathIndex);
    private void RemoveNextBreak(ParagraphItemCollection paraItems);
    internal void ApplyBaseFormat();
    private void IterateOfficeMath(IOfficeMath officeMath);
    private void IterateIntoFunction(IOfficeMathFunctionBase officeMathFunction);
    private bool CheckMathIsInline();
    private bool IsMathBeforeBreak(ParagraphItemCollection paraItems);
    private bool IsMathAfterBreak(int mathIndex, ParagraphItemCollection paraItems);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private void InitializingLayoutInfo();
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    internal bool Compare(WMath revMath);
    internal bool Compare(OfficeMathParagraph orgMathPara, OfficeMathParagraph revMathPara);
    internal bool Compare(OfficeMathFunctionBase orgOfficeMathFunctionBase, OfficeMathFunctionBase revOfficeMathFunctionBase);
    internal bool Compare(OfficeMathBox orgOfficeMathBox, OfficeMathBox revOfficeMathBox);
    internal bool Compare(OfficeMathBar orgOfficeMathBar, OfficeMathBar revOfficeMathBar);
    internal bool Compare(OfficeMathRightScript orgOfficeMathBox, OfficeMathRightScript revOfficeMathBox);
    internal bool Compare(OfficeMathPhantom orgOfficeMathPhantom, OfficeMathPhantom revOfficeMathPhantom);
    internal bool Compare(OfficeMathAccent orgOfficeMathAccent, OfficeMathAccent revOfficeMathAccent);
    internal bool Compare(OfficeMathScript orgOfficeMathScript, OfficeMathScript revOfficeMathScript);
    internal bool Compare(OfficeMathRadical orgOfficeMathRadical, OfficeMathRadical revOfficeMathRadical);
    internal bool Compare(OfficeMathNArray orgOfficeMathNArray, OfficeMathNArray revOfficeMathNArray);
    internal bool Compare(OfficeMathMatrix orgOfficeMathMatrix, OfficeMathMatrix revOfficeMathMatrix);
    internal bool Compare(OfficeMathBorderBox orgOfficeMathBorderBox, OfficeMathBorderBox revOfficeMathBorderBox);
    internal bool Compare(OfficeMathEquationArray orgOfficeMathEquationArray, OfficeMathEquationArray revOfficeMathEquationArray);
    internal bool Compare(OfficeMathFraction orgOfficeMathFraction, OfficeMathFraction revOfficeMathFraction);
    internal bool Compare(OfficeMathFunction orgOfficeMathFunction, OfficeMathFunction revOfficeMathFunction);
    internal bool Compare(OfficeMathLeftScript orgOfficeMathLeftScript, OfficeMathLeftScript revOfficeMathLeftScript);
    internal bool Compare(OfficeMathGroupCharacter orgOfficeMathGroupCharacter, OfficeMathGroupCharacter revOfficeMathGroupCharacter);
    internal bool Compare(OfficeMathDelimiter orgOfficeMathDelimiter, OfficeMathDelimiter revOfficeMathDelimiter);
    internal bool Compare(OfficeMathLimit orgOfficeMathBox, OfficeMathLimit revOfficeMathBox);
    internal bool Compare(OfficeMathRunElement orgOfficeMathRunElement, OfficeMathRunElement revOfficeMathRunElement);
    internal bool Compare(OfficeMathFormat orgOfficeMathFormat, OfficeMathFormat revOfficeMathFormat);
    internal bool Compare(OfficeMath orgOfficeMath, OfficeMath revOfficeMath);
    internal bool Compare(MatrixColumnProperties orgMatrixColumnProperties, MatrixColumnProperties revMatrixColumnProperties);
    internal bool Compare(OfficeMathMatrixColumn orgOfficeMathMatrixColumn, OfficeMathMatrixColumn revOfficeMathMatrixColumn);
    internal bool Compare(OfficeMathMatrixRow orgMathMatrixRow, OfficeMathMatrixRow revMathMatrixRow);
    internal bool Compare(OfficeMathBreak orgOfficeMathBreak, OfficeMathBreak revOfficeMathBreak);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
    internal StringBuilder GetAsString(OfficeMathLeftScript officeMathLeftScript);
    internal StringBuilder GetAsString(OfficeMathGroupCharacter officeMathGroupCharacter);
    internal StringBuilder GetAsString(OfficeMathFunctionBase officeMathFunctionBase);
    internal StringBuilder GetAsString(OfficeMathRightScript officeMathRightScript);
    internal StringBuilder GetAsString(OfficeMathRunElement mathRunElement);
    internal StringBuilder GetAsString(OfficeMathFormat officeMathFormat);
    internal StringBuilder GetAsString(OfficeMath officeMath);
    internal StringBuilder GetAsString(OfficeMathPhantom officeMathPhantom);
    internal StringBuilder GetAsString(OfficeMathFraction officeMathFraction);
    internal StringBuilder GetAsString(OfficeMathFunction officeMathFunction);
    internal StringBuilder GetAsString(OfficeMathEquationArray officeMathEquationArray);
    internal StringBuilder GetAsString(MatrixColumnProperties matrixColumnProperties);
    internal StringBuilder GetAsString(OfficeMathMatrix officeMathMatrix);
    internal StringBuilder GetAsString(OfficeMathDelimiter officeMathDelimiter);
    internal StringBuilder GetAsString(OfficeMathAccent officeMathAccent);
    internal StringBuilder GetAsString(OfficeMathScript officeMathScript);
    internal StringBuilder GetAsString(OfficeMathRadical officeMathRadical);
    internal StringBuilder GetAsString(OfficeMathMatrixColumn officeMathMatrixColumn);
    internal StringBuilder GetAsString(OfficeMathMatrixRow officeMathMatrixRow);
    internal StringBuilder GetAsString(OfficeMathBar officeMathBar);
    internal StringBuilder GetAsString(OfficeMathNArray officeMathNArray);
    internal StringBuilder GetAsString(OfficeMathLimit officeMathLimit);
    internal StringBuilder GetAsString(OfficeMathBorderBox officeMathBorderBox);
    internal StringBuilder GetAsString(OfficeMathBox officeMathBox);
    internal StringBuilder GetAsString(OfficeMathBreak officeMathBreak);
    internal StringBuilder GetAsString(OfficeMathParagraph officeMathParagraph);
}
public class Syncfusion.DocIO.DLS.WMergeField : WField {
    protected string m_fieldName;
    private string m_textBefore;
    private string m_textAfter;
    private string m_prefix;
    private string m_numberFormat;
    private string m_dateFormat;
    private ParagraphItemCollection m_pItemColl;
    private string SlashSymbol;
    private string InvertedCommas;
    public EntityType EntityType { get; }
    public string FieldName { get; public set; }
    public string TextBefore { get; public set; }
    public string TextAfter { get; public set; }
    public string Prefix { get; internal set; }
    public string NumberFormat { get; }
    public string DateFormat { get; }
    [ObsoleteAttribute("This property has been deprecated. Use the Text property of WField class to get result text of the field.")]
public ParagraphItemCollection TextItems { get; }
    public WMergeField(IWordDocument doc);
    public virtual EntityType get_EntityType();
    public sealed virtual string get_FieldName();
    public sealed virtual void set_FieldName(string value);
    public sealed virtual string get_TextBefore();
    public sealed virtual void set_TextBefore(string value);
    public sealed virtual string get_TextAfter();
    public sealed virtual void set_TextAfter(string value);
    public sealed virtual string get_Prefix();
    internal void set_Prefix(string value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual string get_DateFormat();
    public ParagraphItemCollection get_TextItems();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected internal virtual void ParseFieldCode(string fieldCode);
    protected internal String[] GetFieldValues(string fieldvalue);
    protected internal virtual void UpdateFieldCode(string fieldCode);
    internal void ApplyBaseFormat();
    internal virtual void Close();
    internal void UpdateFieldMarks();
    internal void ParseFieldName(string fieldName);
    internal void ParseFieldName(string fieldName, String& prefix, String& nameOfField);
    private void ParseFieldNameUsingRegex(string fieldName, String& prefix, String& nameOfField);
    private void ParseFieldNameHavingGroupExpression(string fieldName, String& prefix, String& nameOfField);
    internal string GetInstructionText();
    private string GetTextFormat(TextFormat format);
    private static string ClearStringFromOtherCharacters(string value);
    private string UpdateFieldValue(string fieldCode);
    private void ParseSwitches(string mergeFormat);
    private string UpdateFieldValue(string fieldValue, List`1<int> formatIndex, string mergeSwitch);
    private string UpdateFormatIndexAndFieldValue(string fieldvalue, List`1& formatIndex, string mergeSwitch);
    private string UpdateSwitchesIndexInFieldValue(string fieldValue);
    internal void UpdateMergeFieldResult();
}
internal class Syncfusion.DocIO.DLS.WNumberingStyle : Style {
    private WParagraphFormat m_paragraphFormat;
    protected WListFormat m_listFormat;
    private int m_listIndex;
    private int m_listLevel;
    public WParagraphFormat ParagraphFormat { get; }
    public WNumberingStyle BaseStyle { get; }
    public StyleType StyleType { get; }
    public WListFormat ListFormat { get; }
    internal int ListIndex { get; internal set; }
    internal int ListLevel { get; internal set; }
    internal WNumberingStyle(IWordDocument doc);
    public WParagraphFormat get_ParagraphFormat();
    public WNumberingStyle get_BaseStyle();
    public virtual StyleType get_StyleType();
    public WListFormat get_ListFormat();
    internal int get_ListIndex();
    internal void set_ListIndex(int value);
    internal int get_ListLevel();
    internal void set_ListLevel(int value);
    public virtual IStyle Clone();
    protected virtual object CloneImpl();
    internal virtual void Close();
    protected virtual void InitXDLSHolder();
    internal virtual bool CompareStyleBetweenDocuments(Style style);
}
public class Syncfusion.DocIO.DLS.WOleObject : ParagraphItem {
    private static string DEF_OBJECT_POOL_NAME;
    private static string DEF_INFO_STREAM_NAME;
    private static int DEF_STRUCT_SIZE;
    internal WPicture m_picture;
    private WField m_field;
    private string m_oleStorageName;
    private string m_linkAddress;
    private string m_strObjType;
    private OleObjectType m_oleObjType;
    internal OleLinkType m_linkType;
    private XmlParagraphItem m_oleXmlItem;
    private OLEObject m_oleObject;
    private static Random m_oleRandomIdGen;
    private string m_packageFileName;
    private byte m_bFlags;
    public bool DisplayAsIcon { get; public set; }
    public WPicture OlePicture { get; }
    public EntityType EntityType { get; }
    public Stream Container { get; }
    internal WField Field { get; internal set; }
    public string OleStorageName { get; public set; }
    public string LinkPath { get; public set; }
    public OleLinkType LinkType { get; }
    internal XmlParagraphItem OleXmlItem { get; internal set; }
    internal OleObjectType OleObjectType { get; internal set; }
    internal UpdateMode UpdateMode { get; internal set; }
    public string ObjectType { get; public set; }
    public Byte[] NativeData { get; }
    private OLEObject OleObject { get; }
    internal static int NextOleObjId { get; }
    public string PackageFileName { get; }
    internal bool IsEmpty { get; }
    internal Guid Guid { get; }
    public WOleObject(WordDocument doc);
    public bool get_DisplayAsIcon();
    public void set_DisplayAsIcon(bool value);
    public WPicture get_OlePicture();
    public virtual EntityType get_EntityType();
    public Stream get_Container();
    internal WField get_Field();
    internal void set_Field(WField value);
    public string get_OleStorageName();
    public void set_OleStorageName(string value);
    public string get_LinkPath();
    public void set_LinkPath(string value);
    public OleLinkType get_LinkType();
    internal XmlParagraphItem get_OleXmlItem();
    internal void set_OleXmlItem(XmlParagraphItem value);
    internal OleObjectType get_OleObjectType();
    internal void set_OleObjectType(OleObjectType value);
    internal UpdateMode get_UpdateMode();
    internal void set_UpdateMode(UpdateMode value);
    public string get_ObjectType();
    public void set_ObjectType(string value);
    public Byte[] get_NativeData();
    private OLEObject get_OleObject();
    internal static int get_NextOleObjId();
    public string get_PackageFileName();
    internal bool get_IsEmpty();
    internal Guid get_Guid();
    internal void AddFieldCodeText();
    internal void SetLinkPathValue(string path);
    internal void ParseObjectPool(Stream objectPoolStream);
    internal void UpdateStorageName();
    internal void ParseOlePartStream(Stream stream);
    private void ParseStreams(ICompoundStorage storage);
    internal void ParseOleStream(Stream stream);
    private void CheckObjectInfoStream();
    internal void CreateOleObjContainer(Byte[] nativeData, string dataPath);
    internal Stream GetOlePartStream(bool isNativeData);
    private bool IsNativeItem();
    internal void WriteToStorage(ICompoundStorage storage);
    internal void UpdateGuid(CompoundFile cmpFile, int index);
    private Stream GetOleContainer();
    private void UpdateProps();
    internal void SetOlePicture(WPicture picture);
    internal void SetLinkType(OleLinkType type);
    internal void SetFieldType();
    private void UpdateOleObjInfoStream();
    private Byte[] UpdateObjInfoBytes();
    internal bool Compare(WOleObject oleObject);
    internal StringBuilder GetAsString();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    protected virtual object CloneImpl();
    internal virtual void AddSelf();
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void Detach();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    private void UpdateOleItemReferences();
    private bool IsValidIndex(int index);
    internal virtual void Close();
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.DocIO.DLS.WordColor : object {
    internal static byte MaxRGB;
    internal static int MaxHue;
    private static Int32[] WordKnownColors;
    internal static UInt32[] ArgbArray;
    internal static Color[] ColorsArray;
    private Color m_color;
    private byte m_colorId;
    public static WordColor Empty { get; }
    public static WordColor Black { get; }
    public static WordColor Blue { get; }
    public static WordColor Cyan { get; }
    public static WordColor Green { get; }
    public static WordColor Magenta { get; }
    public static WordColor Red { get; }
    public static WordColor Yellow { get; }
    public static WordColor White { get; }
    public static WordColor DarkBlue { get; }
    public static WordColor DarkCyan { get; }
    public static WordColor DarkGreen { get; }
    public static WordColor DarkMagenta { get; }
    public static WordColor DarkRed { get; }
    public static WordColor DarkYellow { get; }
    public static WordColor DarkGray { get; }
    public static WordColor LightGray { get; }
    public Color Color { get; }
    public byte ColorId { get; }
    public int RGB { get; }
    public WordColor(byte index);
    private static WordColor();
    public static WordColor get_Empty();
    public static WordColor get_Black();
    public static WordColor get_Blue();
    public static WordColor get_Cyan();
    public static WordColor get_Green();
    public static WordColor get_Magenta();
    public static WordColor get_Red();
    public static WordColor get_Yellow();
    public static WordColor get_White();
    public static WordColor get_DarkBlue();
    public static WordColor get_DarkCyan();
    public static WordColor get_DarkGreen();
    public static WordColor get_DarkMagenta();
    public static WordColor get_DarkRed();
    public static WordColor get_DarkYellow();
    public static WordColor get_DarkGray();
    public static WordColor get_LightGray();
    public Color get_Color();
    public byte get_ColorId();
    public int get_RGB();
    internal static UInt32 ConvertHSLToRGB(double hue, double saturation, double luminance);
    internal static Color ConvertColorByShade(Color color, double shade);
    private static double ApplyShade(double colorValue, double shade);
    internal static Color ConvertColorByTint(Color color, double tint);
    private static double ApplyTint(double colorValue, double tint);
    internal static byte ConvertbyModulation(byte value, double percent);
    internal static byte ConvertbyOffset(byte value, double percent);
    internal static void ConvertbyHue(Color& color, double angle);
    internal static void ConvertbyHueMod(Color& color, double ratio);
    internal static void ConvertbyHueOffset(Color& color, double angle);
    internal static void ConvertbyLum(Color& color, double percent);
    internal static void ConvertbyLumMod(Color& color, double percent);
    internal static void ConvertbyLumOffset(Color& color, double percent);
    internal static void ConvertbySat(Color& color, double percent);
    internal static void ConvertbySatMod(Color& color, double percent);
    internal static void ConvertbySatOffset(Color& color, double percent);
    internal static Color ComplementColor(Color color);
    internal static Color InverseGammaColor(Color color);
    internal static double ConvertsRGBtoLinearRGB(double value);
    internal static Color GammaColor(Color color);
    internal static double ConvertsLinearRGBtoRGB(double value);
    internal static Color GrayColor(Color color);
    public static Color InverseColor(Color color);
    private static double ApplyInverse(double colorValue);
    internal static void ConvertColortoHSL(Color color, Double& hue, Double& saturation, Double& luminance);
    internal static Color ConvertHSLToColor(double hue, double saturation, double luminance);
    internal static double HueToRGB(double n1, double n2, double hue);
    public static Color IdToColor(int wordColorId);
    public static int ColorToId(Color color);
    public static UInt32 ConvertColorToRGB(Color color);
    public static UInt32 ConvertColorToRGB(Color color, bool ignoreAlpha);
    public static UInt32 ConvertIdToRGB(int colorId);
    public static int ConvertRGBToId(UInt32 rgb);
    public static Color ConvertRGBToColor(UInt32 rgb);
    public static int ConvertColorToId(Color color);
    public static Color ConvertIdToColor(int id);
    private static int ReduceColor(Color color);
    private static double FindSimilarColor(UInt32 wordColor, UInt32 rgbColor);
    internal static bool IsVeryDarkColor(int r, int g, int b);
    internal static bool IsNotVeryDarkColor(Color backColor);
    private static bool CheckR0(int g, int b);
    private static bool CheckR1(int g, int b);
    private static bool CheckR2(int g, int b);
    private static bool CheckR3(int g, int b);
    private static bool CheckR4(int g, int b);
    private static bool CheckR5(int g, int b);
    private static bool CheckR6(int g, int b);
    private static bool CheckR7(int g, int b);
    private static bool CheckR8(int g, int b);
    private static bool CheckR9(int g, int b);
    private static bool CheckR10(int g, int b);
    private static bool CheckR11(int g, int b);
    private static bool CheckR12(int g, int b);
    private static bool CheckR13(int g, int b);
    private static bool CheckR14(int g, int b);
    private static bool CheckR15(int g, int b);
    private static bool CheckR16(int g, int b);
    private static bool CheckR17(int g, int b);
    private static bool CheckR18(int g, int b);
    private static bool CheckR19(int g, int b);
    private static bool CheckR20(int g, int b);
    private static bool CheckR21(int g, int b);
    private static bool CheckR22(int g, int b);
    private static bool CheckR23(int g, int b);
    private static bool CheckR24(int g, int b);
    private static bool CheckR25(int g, int b);
    private static bool CheckR26(int g, int b);
    private static bool CheckR27(int g, int b);
    private static bool CheckR28(int g, int b);
    private static bool CheckR29(int g, int b);
    private static bool CheckR30(int g, int b);
    private static bool CheckR31(int g, int b);
    private static bool CheckR32(int g, int b);
    private static bool CheckR33(int g, int b);
    private static bool CheckR34(int g, int b);
    private static bool CheckR35(int g, int b);
    private static bool CheckR36(int g, int b);
    private static bool CheckR37(int g, int b);
    private static bool CheckR38(int g, int b);
    private static bool CheckR39(int g, int b);
    private static bool CheckR40(int g, int b);
    private static bool CheckR41(int g, int b);
    private static bool CheckR42(int g, int b);
    private static bool CheckR43(int g, int b);
    private static bool CheckR44(int g, int b);
    private static bool CheckR45(int g, int b);
    private static bool CheckR46(int g, int b);
    private static bool CheckR47(int g, int b);
    private static bool CheckR48(int g, int b);
    private static bool CheckR49(int g, int b);
    private static bool CheckR50(int g, int b);
    private static bool CheckR51(int g, int b);
    private static bool CheckR52(int g, int b);
    private static bool CheckR53(int g, int b);
    private static bool CheckR54(int g, int b);
    private static bool CheckR55(int g, int b);
    private static bool CheckR56(int g, int b);
    private static bool CheckR57(int g, int b);
    private static bool CheckR58(int g, int b);
    private static bool CheckR59(int g, int b);
    private static bool CheckR60(int g, int b);
    private static bool CheckR61(int g, int b);
    private static bool CheckR62(int g, int b);
    private static bool CheckR63(int g, int b);
    private static bool CheckR64(int g, int b);
    private static bool CheckR65(int g, int b);
    private static bool CheckR66(int g, int b);
    private static bool CheckR67(int g, int b);
    private static bool CheckR68(int g, int b);
    private static bool CheckR69(int g, int b);
    private static bool CheckR70(int g, int b);
    private static bool CheckR71(int g, int b);
    private static bool CheckR72(int g, int b);
    private static bool CheckR73(int g, int b);
    private static bool CheckR74(int g, int b);
    private static bool CheckR75(int g, int b);
    private static bool CheckR76(int g, int b);
    private static bool CheckR77(int g, int b);
    private static bool CheckR78(int g, int b);
    private static bool CheckR79(int g, int b);
    private static bool CheckR80(int g, int b);
    private static bool CheckR81(int g, int b);
    private static bool CheckR82(int g, int b);
    private static bool CheckR83(int g, int b);
    private static bool CheckR84(int g, int b);
    private static bool CheckR85(int g, int b);
    private static bool CheckR86(int g, int b);
    private static bool CheckR87(int g, int b);
    private static bool CheckR88(int g, int b);
    private static bool CheckR89(int g, int b);
    private static bool CheckR90(int g, int b);
    private static bool CheckR91(int g, int b);
    private static bool CheckR92(int g, int b);
    private static bool CheckR93(int g, int b);
    private static bool CheckR94(int g, int b);
    private static bool CheckR95(int g, int b);
    private static bool CheckR96(int g, int b);
    private static bool CheckR97(int g, int b);
    private static bool CheckR98(int g, int b);
    private static bool CheckR99(int g, int b);
    private static bool CheckR100(int g, int b);
    private static bool CheckR101(int g, int b);
    private static bool CheckR102(int g, int b);
    private static bool CheckR103(int g, int b);
    private static bool CheckR104(int g, int b);
    private static bool CheckR105(int g, int b);
    private static bool CheckR106(int g, int b);
    private static bool CheckR107(int g, int b);
    private static bool CheckR108(int g, int b);
    private static bool CheckR109(int g, int b);
    private static bool CheckR110(int g, int b);
    private static bool CheckR111(int g, int b);
    private static bool CheckR112(int g, int b);
    private static bool CheckR113(int g, int b);
    private static bool CheckR114(int g, int b);
    private static bool CheckR115(int g, int b);
    private static bool CheckR116(int g, int b);
    private static bool CheckR117(int g, int b);
    private static bool CheckR118(int g, int b);
    private static bool CheckR119(int g, int b);
    private static bool CheckR120(int g, int b);
    private static bool CheckR121(int g, int b);
    private static bool CheckR122(int g, int b);
    private static bool CheckR123(int g, int b);
    private static bool CheckR124(int g, int b);
    private static bool CheckR125(int g, int b);
    private static bool CheckR126(int g, int b);
    private static bool CheckR127(int g, int b);
    private static bool CheckR128(int g, int b);
    private static bool CheckR129(int g, int b);
    private static bool CheckR130(int g, int b);
    private static bool CheckR131(int g, int b);
    private static bool CheckR132(int g, int b);
    private static bool CheckR133(int g, int b);
    private static bool CheckR134(int g, int b);
    private static bool CheckR135(int g, int b);
    private static bool CheckR136(int g, int b);
    private static bool CheckR137(int g, int b);
    private static bool CheckR138(int g, int b);
    private static bool CheckR139(int g, int b);
    private static bool CheckR140(int g, int b);
    private static bool CheckR141(int g, int b);
    private static bool CheckR142(int g, int b);
    private static bool CheckR143(int g, int b);
    private static bool CheckR144(int g, int b);
    private static bool CheckR145(int g, int b);
    private static bool CheckR146(int g, int b);
    private static bool CheckR147(int g, int b);
    private static bool CheckR148(int g, int b);
    private static bool CheckR149(int g, int b);
    private static bool CheckR150(int g, int b);
    private static bool CheckR151(int g, int b);
    private static bool CheckR152(int g, int b);
    private static bool CheckR153(int g, int b);
    private static bool CheckR154(int g, int b);
    private static bool CheckR155(int g, int b);
    private static bool CheckR156(int g, int b);
    private static bool CheckR157(int g, int b);
    private static bool CheckR158(int g, int b);
    private static bool CheckR159(int g, int b);
    private static bool CheckR160(int g, int b);
    private static bool CheckR161(int g, int b);
    private static bool CheckR162(int g, int b);
    private static bool CheckR163(int g, int b);
    private static bool CheckR164(int g, int b);
    private static bool CheckR165(int g, int b);
    private static bool CheckR166(int g, int b);
    private static bool CheckR167(int g, int b);
    private static bool CheckR168(int g, int b);
    private static bool CheckR169(int g, int b);
    private static bool CheckR170(int g, int b);
    private static bool CheckR171(int g, int b);
    private static bool CheckR172(int g, int b);
    private static bool CheckR173(int g, int b);
    private static bool CheckR174(int g, int b);
    private static bool CheckR175(int g, int b);
    private static bool CheckR176(int g, int b);
    private static bool CheckR177(int g, int b);
    private static bool CheckR178(int g, int b);
    private static bool CheckR179(int g, int b);
    private static bool CheckR180(int g, int b);
    private static bool CheckR181(int g, int b);
    private static bool CheckR182(int g, int b);
    private static bool CheckR183(int g, int b);
    private static bool CheckR184(int g, int b);
    private static bool CheckR185(int g, int b);
    private static bool CheckR186(int g, int b);
    private static bool CheckR187(int g, int b);
    private static bool CheckR188(int g, int b);
    private static bool CheckR189(int g, int b);
    private static bool CheckR190(int g, int b);
    private static bool CheckR191(int g, int b);
    private static bool CheckR192(int g, int b);
    private static bool CheckR193(int g, int b);
    private static bool CheckR194(int g, int b);
    private static bool CheckR195(int g, int b);
    private static bool CheckR196(int g, int b);
    private static bool CheckR197(int g, int b);
    private static bool CheckR198(int g, int b);
    private static bool CheckR199(int g, int b);
    private static bool CheckR200(int g, int b);
    private static bool CheckR201(int g, int b);
    private static bool CheckR202(int g, int b);
    private static bool CheckR203(int g, int b);
}
public class Syncfusion.DocIO.DLS.WordDocument : WidgetContainer {
    private static string DEF_NORMAL_STYLE;
    internal static string DEF_BULLETS_STYLE;
    internal static string DEF_NUMBERING_STYLE;
    private static string DEF_NORMAL_TABLESTYLE;
    private static int DEF_USER_STYLE_ID;
    private byte m_bFlags1;
    private byte m_bFlags;
    private byte m_bFlags2;
    private byte m_bFlags3;
    internal TextBodyItem m_prevClonedEntity;
    private FormatType m_actualFormatType;
    private ushort m_fibVersion;
    private string m_duplicateListStyleNames;
    internal Char[] WordComparisonDelimiters;
    private FontFamilyNameStringTable m_ffnStringTable;
    internal BuiltinDocumentProperties m_builtinProp;
    internal CustomDocumentProperties m_customProp;
    protected WSectionCollection m_sections;
    protected IStyleCollection m_styles;
    internal ListStyleCollection m_listStyles;
    internal Dictionary`2<string, int> m_sequenceFieldResults;
    internal Dictionary`2<string, string> m_newlyAttachedComments;
    private ListOverrideStyleCollection m_listOverrides;
    private BookmarkCollection m_bookmarks;
    private EditableRangeCollection m_editableRanges;
    private FieldCollection m_fields;
    private TextBoxCollection m_txbxItems;
    private RevisionCollection m_revisions;
    internal MetaProperties m_contentTypeProperties;
    private CommentsCollection m_Comments;
    private CommentsExCollection m_CommentsEx;
    private float m_defaultTabWidth;
    private CharacterSpacingControl m_characterSpacingControl;
    private MailMerge m_mailMerge;
    private ViewSetup m_viewSetup;
    private Watermark m_watermark;
    private Background m_background;
    private DOPDescriptor m_dop;
    private GrammarSpelling m_grammarSpellingData;
    private EscherClass m_escher;
    private string m_password;
    private Byte[] m_macrosData;
    private Byte[] m_escherDataContainers;
    private Byte[] m_escherContainers;
    private Byte[] m_macroCommands;
    private int m_defShapeId;
    private string m_standardAsciiFont;
    private string m_standardFarEastFont;
    private string m_standardNonFarEastFont;
    private string m_standardBidiFont;
    private static object m_threadLocker;
    private XHTMLValidationType m_htmlValidationOption;
    private Stream m_latentStyles;
    private MemoryStream m_latentStyles2010;
    private WCharacterFormat m_defCharFormat;
    internal WParagraphFormat m_defParaFormat;
    private Package m_docxPackage;
    private ImportOptions m_importOption;
    private DocVariables m_variables;
    private DocProperties m_props;
    private ParagraphItem m_nextParaItem;
    private TextBodyItem m_prevBodyItem;
    private SaveOptions m_saveOptions;
    private RevisionOptions m_revisionOptions;
    private List`1<Stream> m_docxProps;
    private SttbfAssoc m_assocStrings;
    private Dictionary`2<string, string> m_styleNameIds;
    private int m_paraCount;
    private int m_wordCount;
    private int m_charCount;
    private Dictionary`2<string, string> m_fontSubstitutionTable;
    private string m_htmlBaseUrl;
    private Dictionary`2<WField, TableOfContent> m_tableOfContent;
    private List`1<Font> m_usedFonts;
    private List`1<string> m_usedFontNames;
    private Settings m_settings;
    private Themes m_themes;
    private Stream m_vbaProject;
    private Stream m_vbaProjectSignature;
    private Stream m_vbaProjectSignatureAgile;
    private PartContainer m_CustomUIPartContainer;
    private PartContainer m_UserCustomizationPartContainer;
    private PartContainer m_CustomXMLContainer;
    private List`1<MacroData> m_vbaData;
    private List`1<string> m_docEvents;
    private FormatType m_saveFormatType;
    private ushort m_wordVersion;
    private Stack`1<WField> m_clonedFields;
    private int m_altChunkCount;
    private ImageCollection m_imageCollection;
    private Footnote m_footnotes;
    private Endnote m_endnotes;
    private Dictionary`2<string, string> m_listStyleNames;
    private Dictionary`2<string, Storage> m_oleObjectCollection;
    private static bool m_EnablePartialTrustCode;
    private static bool m_disableDateTimeUpdating;
    private Dictionary`2<string, CustomXMLPart> m_customXMLParts;
    private PartContainer m_customXMLPartContainer;
    private HTMLImportSettings m_htmlImportSettings;
    private MdImportSettings m_mdImportSettings;
    private Dictionary`2<string, Dictionary`2<int, int>> m_lists;
    private Dictionary`2<string, Dictionary`2<int, int>> m_listNames;
    private Dictionary`2<string, int> m_previousListLevel;
    private List`1<string> m_previousListLevelOverrideStyle;
    internal int PageCount;
    private List`1<Shape> m_AutoShapeCollection;
    private Byte[] m_sttbfRMark;
    private FontSettings m_fontSettings;
    private Hyphenator m_hyphenator;
    private List`1<Entity> m_FloatingItems;
    internal long m_notSupportedElementFlag;
    internal int m_supportedElementFlag_1;
    internal int m_supportedElementFlag_2;
    internal WordDocument m_AltChunkOwner;
    private int m_balloonCount;
    internal string m_metaXmlItem;
    private string syncfusionLicense;
    internal string claimLicenseKeyURL;
    private bool m_isWarnInserted;
    internal string trialMessage;
    internal int m_tocBookmarkID;
    internal Revision cloneMoveRevision;
    internal long maxShapeId;
    internal Entity m_tocEntryLastEntity;
    internal int m_sectionIndex;
    internal int m_bodyItemIndex;
    internal int m_paraItemIndex;
    internal int m_startRangeIndex;
    internal int m_endRangeIndex;
    internal int m_textStartIndex;
    internal int m_textEndIndex;
    internal string m_authorName;
    internal DateTime m_dateTime;
    internal int m_matchSectionIndex;
    internal int m_matchBodyItemIndex;
    internal int m_matchParaItemIndex;
    internal bool HasNoPictureToCompare;
    private Comparison m_comparison;
    private ComparisonOptions m_comparisonOptions;
    internal int currSectionIndex;
    internal int currBodyItemIndex;
    internal int currParaItemIndex;
    internal bool isUpdatingField;
    private DocxLaTeXConverter m_docxLaTeXConveter;
    [ThreadStaticAttribute]
internal static IHelper RenderHelper;
    public FontSettings FontSettings { get; }
    public Hyphenator Hyphenator { get; }
    public Footnote Footnotes { get; public set; }
    public Endnote Endnotes { get; public set; }
    public float DefaultTabWidth { get; public set; }
    internal CharacterSpacingControl CharacterSpacingControl { get; internal set; }
    internal ushort FIBVersion { get; internal set; }
    public EntityType EntityType { get; }
    public BuiltinDocumentProperties BuiltinDocumentProperties { get; }
    public Template AttachedTemplate { get; }
    public bool UpdateStylesOnOpen { get; public set; }
    public CustomDocumentProperties CustomDocumentProperties { get; }
    public WSectionCollection Sections { get; }
    public IStyleCollection Styles { get; }
    public ListStyleCollection ListStyles { get; }
    public ImportOptions ImportOptions { get; public set; }
    public BookmarkCollection Bookmarks { get; }
    internal EditableRangeCollection EditableRanges { get; }
    public CommentsCollection Comments { get; }
    internal CommentsExCollection CommentsEx { get; }
    public TextBoxCollection TextBoxes { get; public set; }
    public RevisionCollection Revisions { get; }
    public MetaProperties ContentTypeProperties { get; }
    public WSection LastSection { get; }
    public WParagraph LastParagraph { get; }
    public FootEndNoteNumberFormat EndnoteNumberFormat { get; public set; }
    public FootEndNoteNumberFormat FootnoteNumberFormat { get; public set; }
    public EndnoteRestartIndex RestartIndexForEndnote { get; public set; }
    public EndnotePosition EndnotePosition { get; public set; }
    public FootnoteRestartIndex RestartIndexForFootnotes { get; public set; }
    public FootnotePosition FootnotePosition { get; public set; }
    public Watermark Watermark { get; public set; }
    public Background Background { get; }
    public MailMerge MailMerge { get; }
    public ProtectionType ProtectionType { get; public set; }
    public ViewSetup ViewSetup { get; }
    public bool ThrowExceptionsForUnsupportedElements { get; public set; }
    public int InitialFootnoteNumber { get; public set; }
    public int InitialEndnoteNumber { get; public set; }
    public EntityCollection ChildEntities { get; }
    public XHTMLValidationType XHTMLValidateOption { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Use the Picture property of Background class to set the background image of the document")]
public Byte[] BackgroundImage { get; public set; }
    public DocVariables Variables { get; }
    public DocProperties Properties { get; }
    public bool HasChanges { get; }
    public bool TrackChanges { get; public set; }
    public bool ReplaceFirst { get; public set; }
    public HTMLImportSettings HTMLImportSettings { get; public set; }
    public MdImportSettings MdImportSettings { get; internal set; }
    public SaveOptions SaveOptions { get; }
    public RevisionOptions RevisionOptions { get; }
    [ObsoleteAttribute("This property has been deprecated. Use the UpdateDocumentFields method of WordDocument class to update the fields in the document.")]
public bool UpdateFields { get; public set; }
    public FormatType ActualFormatType { get; internal set; }
    public Dictionary`2<string, string> FontSubstitutionTable { get; public set; }
    public bool HasMacros { get; }
    public static bool EnablePartialTrustCode { get; public set; }
    internal static bool DisableDateTimeUpdating { get; internal set; }
    internal bool RestrictFormatting { get; internal set; }
    internal bool Enforcement { get; internal set; }
    internal MultiplePage MultiplePage { get; internal set; }
    internal int SheetsPerBooklet { get; internal set; }
    internal FontFamilyNameStringTable FFNStringTable { get; internal set; }
    internal bool IsComparing { get; internal set; }
    internal Comparison Comparison { get; }
    internal bool IsUpdatingField { get; internal set; }
    internal bool UpdateRevisionOnComparing { get; internal set; }
    internal DocxLaTeXConverter DocxLaTeXConveter { get; }
    internal bool HasStyleSheets { get; internal set; }
    internal Dictionary`2<string, CustomXMLPart> CustomXmlParts { get; }
    internal PartContainer CustomXmlPartContainer { get; }
    internal ImageCollection Images { get; }
    internal Dictionary`2<string, Storage> OleObjectCollection { get; }
    internal Stack`1<WField> ClonedFields { get; }
    internal ListOverrideStyleCollection ListOverrides { get; }
    internal GrammarSpelling GrammarSpellingData { get; internal set; }
    internal DOPDescriptor DOP { get; internal set; }
    internal EscherClass Escher { get; internal set; }
    internal FormatType SaveFormatType { get; internal set; }
    internal bool IsMacroEnabled { get; }
    internal Stream VbaProject { get; internal set; }
    internal Stream VbaProjectSignature { get; internal set; }
    internal Stream VbaProjectSignatureAgile { get; internal set; }
    internal PartContainer CustomUIPartContainer { get; internal set; }
    internal PartContainer UserCustomizationPartContainer { get; internal set; }
    internal PartContainer CustomXMLContainer { get; internal set; }
    internal List`1<MacroData> VbaData { get; internal set; }
    internal List`1<string> DocEvents { get; internal set; }
    internal Byte[] MacrosData { get; internal set; }
    internal Byte[] MacroCommands { get; internal set; }
    internal string StandardAsciiFont { get; internal set; }
    internal string StandardFarEastFont { get; internal set; }
    internal string StandardNonFarEastFont { get; internal set; }
    internal string StandardBidiFont { get; internal set; }
    internal string Password { get; internal set; }
    internal MemoryStream LatentStyles2010 { get; internal set; }
    internal Stream LatentStyles { get; internal set; }
    internal Package DocxPackage { get; internal set; }
    public bool ImportStyles { get; public set; }
    public bool ImportStylesOnTypeMismatch { get; public set; }
    internal WCharacterFormat DefCharFormat { get; internal set; }
    internal WParagraphFormat DefParaFormat { get; internal set; }
    internal SttbfAssoc AssociatedStrings { get; }
    internal bool IsEncrypted { get; private set; }
    internal bool HasPicture { get; internal set; }
    internal bool WriteWarning { get; }
    internal bool WriteProtected { get; internal set; }
    internal bool UpdateAlternateChunk { get; internal set; }
    internal bool IsDeletingBookmarkContent { get; internal set; }
    private Dictionary`2<string, Dictionary`2<int, int>> ListNames { get; }
    private Dictionary`2<string, Dictionary`2<int, int>> Lists { get; }
    private Dictionary`2<string, int> PreviousListLevel { get; }
    private List`1<string> PreviousListLevelOverrideStyle { get; }
    internal bool UseHangingIndentAsListTab { get; }
    internal bool UseHangingIndentAsTabPosition { get; }
    internal Themes Themes { get; }
    public Settings Settings { get; }
    internal int AlternateChunkCount { get; }
    internal bool IsOpening { get; internal set; }
    internal bool IsMailMerge { get; internal set; }
    internal bool IsCloning { get; internal set; }
    internal bool DocHasThemes { get; internal set; }
    internal bool CreateBaseStyle { get; internal set; }
    internal bool IsNormalStyleDefined { get; internal set; }
    internal bool IsDefaultParagraphFontStyleDefined { get; internal set; }
    internal bool IsHTMLImport { get; internal set; }
    internal bool IsSkipFieldDetach { get; internal set; }
    internal bool IsFieldRangeAdding { get; internal set; }
    internal bool IsReadOnly { get; internal set; }
    internal bool BordersSurroundHeader { get; internal set; }
    internal bool BordersSurroundFooter { get; internal set; }
    internal bool DifferentOddAndEvenPages { get; internal set; }
    internal ushort WordVersion { get; internal set; }
    internal List`1<Font> UsedFonts { get; internal set; }
    internal List`1<string> UsedFontNames { get; internal set; }
    internal bool HasTOC { get; }
    internal Dictionary`2<WField, TableOfContent> TOC { get; internal set; }
    internal string HtmlBaseUrl { get; internal set; }
    internal FieldCollection Fields { get; }
    internal List`1<Shape> AutoShapeCollection { get; internal set; }
    internal List`1<Entity> FloatingItems { get; internal set; }
    internal List`1<Stream> DocxProps { get; }
    internal Dictionary`2<string, string> ListStyleNames { get; }
    internal Dictionary`2<string, string> NewlyAttachedComments { get; }
    internal bool HasDocxProps { get; }
    internal bool IsClosing { get; private set; }
    internal Dictionary`2<string, string> StyleNameIds { get; }
    internal bool HasCoverPage { get; internal set; }
    internal int TrackChangesBalloonCount { get; internal set; }
    internal Dictionary`2<string, int> SequenceFieldResults { get; internal set; }
    internal ComparisonOptions ComparisonOptions { get; internal set; }
    protected IEntityCollectionBase WidgetCollection { get; }
    internal Byte[] SttbfRMark { get; internal set; }
    public WordDocument(Stream stream, FormatType type, XHTMLValidationType validationType);
    internal WordDocument(Stream stream);
    public WordDocument(Stream stream, FormatType type);
    public WordDocument(Stream stream, string password);
    public WordDocument(Stream stream, FormatType type, string password);
    protected WordDocument(WordDocument doc);
    private static WordDocument();
    public sealed virtual FontSettings get_FontSettings();
    public sealed virtual Hyphenator get_Hyphenator();
    public sealed virtual Footnote get_Footnotes();
    public sealed virtual void set_Footnotes(Footnote value);
    public sealed virtual Endnote get_Endnotes();
    public sealed virtual void set_Endnotes(Endnote value);
    public sealed virtual float get_DefaultTabWidth();
    public sealed virtual void set_DefaultTabWidth(float value);
    internal CharacterSpacingControl get_CharacterSpacingControl();
    internal void set_CharacterSpacingControl(CharacterSpacingControl value);
    internal ushort get_FIBVersion();
    internal void set_FIBVersion(ushort value);
    public virtual EntityType get_EntityType();
    public sealed virtual BuiltinDocumentProperties get_BuiltinDocumentProperties();
    public sealed virtual Template get_AttachedTemplate();
    public sealed virtual bool get_UpdateStylesOnOpen();
    public sealed virtual void set_UpdateStylesOnOpen(bool value);
    public sealed virtual CustomDocumentProperties get_CustomDocumentProperties();
    public sealed virtual WSectionCollection get_Sections();
    public sealed virtual IStyleCollection get_Styles();
    public sealed virtual ListStyleCollection get_ListStyles();
    public sealed virtual ImportOptions get_ImportOptions();
    public sealed virtual void set_ImportOptions(ImportOptions value);
    public sealed virtual BookmarkCollection get_Bookmarks();
    internal EditableRangeCollection get_EditableRanges();
    public sealed virtual CommentsCollection get_Comments();
    internal CommentsExCollection get_CommentsEx();
    public sealed virtual TextBoxCollection get_TextBoxes();
    public void set_TextBoxes(TextBoxCollection value);
    public RevisionCollection get_Revisions();
    public MetaProperties get_ContentTypeProperties();
    public sealed virtual WSection get_LastSection();
    public sealed virtual WParagraph get_LastParagraph();
    public sealed virtual FootEndNoteNumberFormat get_EndnoteNumberFormat();
    public sealed virtual void set_EndnoteNumberFormat(FootEndNoteNumberFormat value);
    public sealed virtual FootEndNoteNumberFormat get_FootnoteNumberFormat();
    public sealed virtual void set_FootnoteNumberFormat(FootEndNoteNumberFormat value);
    public sealed virtual EndnoteRestartIndex get_RestartIndexForEndnote();
    public sealed virtual void set_RestartIndexForEndnote(EndnoteRestartIndex value);
    public sealed virtual EndnotePosition get_EndnotePosition();
    public sealed virtual void set_EndnotePosition(EndnotePosition value);
    public sealed virtual FootnoteRestartIndex get_RestartIndexForFootnotes();
    public sealed virtual void set_RestartIndexForFootnotes(FootnoteRestartIndex value);
    public sealed virtual FootnotePosition get_FootnotePosition();
    public sealed virtual void set_FootnotePosition(FootnotePosition value);
    public sealed virtual Watermark get_Watermark();
    public sealed virtual void set_Watermark(Watermark value);
    public sealed virtual Background get_Background();
    public sealed virtual MailMerge get_MailMerge();
    public sealed virtual ProtectionType get_ProtectionType();
    public sealed virtual void set_ProtectionType(ProtectionType value);
    public sealed virtual ViewSetup get_ViewSetup();
    public sealed virtual bool get_ThrowExceptionsForUnsupportedElements();
    public sealed virtual void set_ThrowExceptionsForUnsupportedElements(bool value);
    public sealed virtual int get_InitialFootnoteNumber();
    public sealed virtual void set_InitialFootnoteNumber(int value);
    public sealed virtual int get_InitialEndnoteNumber();
    public sealed virtual void set_InitialEndnoteNumber(int value);
    public sealed virtual EntityCollection get_ChildEntities();
    public sealed virtual XHTMLValidationType get_XHTMLValidateOption();
    public sealed virtual void set_XHTMLValidateOption(XHTMLValidationType value);
    public sealed virtual Byte[] get_BackgroundImage();
    public sealed virtual void set_BackgroundImage(Byte[] value);
    public sealed virtual DocVariables get_Variables();
    public sealed virtual DocProperties get_Properties();
    public sealed virtual bool get_HasChanges();
    public sealed virtual bool get_TrackChanges();
    public sealed virtual void set_TrackChanges(bool value);
    public sealed virtual bool get_ReplaceFirst();
    public sealed virtual void set_ReplaceFirst(bool value);
    public sealed virtual HTMLImportSettings get_HTMLImportSettings();
    public sealed virtual void set_HTMLImportSettings(HTMLImportSettings value);
    public sealed virtual MdImportSettings get_MdImportSettings();
    internal void set_MdImportSettings(MdImportSettings value);
    public sealed virtual SaveOptions get_SaveOptions();
    public sealed virtual RevisionOptions get_RevisionOptions();
    public sealed virtual bool get_UpdateFields();
    public sealed virtual void set_UpdateFields(bool value);
    public sealed virtual FormatType get_ActualFormatType();
    internal void set_ActualFormatType(FormatType value);
    public sealed virtual Dictionary`2<string, string> get_FontSubstitutionTable();
    public sealed virtual void set_FontSubstitutionTable(Dictionary`2<string, string> value);
    public sealed virtual bool get_HasMacros();
    public static bool get_EnablePartialTrustCode();
    public static void set_EnablePartialTrustCode(bool value);
    internal static bool get_DisableDateTimeUpdating();
    internal static void set_DisableDateTimeUpdating(bool value);
    internal bool get_RestrictFormatting();
    internal void set_RestrictFormatting(bool value);
    internal bool get_Enforcement();
    internal void set_Enforcement(bool value);
    internal MultiplePage get_MultiplePage();
    internal void set_MultiplePage(MultiplePage value);
    internal int get_SheetsPerBooklet();
    internal void set_SheetsPerBooklet(int value);
    internal FontFamilyNameStringTable get_FFNStringTable();
    internal void set_FFNStringTable(FontFamilyNameStringTable value);
    internal bool get_IsComparing();
    internal void set_IsComparing(bool value);
    internal Comparison get_Comparison();
    internal bool get_IsUpdatingField();
    internal void set_IsUpdatingField(bool value);
    internal bool get_UpdateRevisionOnComparing();
    internal void set_UpdateRevisionOnComparing(bool value);
    internal DocxLaTeXConverter get_DocxLaTeXConveter();
    internal bool get_HasStyleSheets();
    internal void set_HasStyleSheets(bool value);
    internal Dictionary`2<string, CustomXMLPart> get_CustomXmlParts();
    internal PartContainer get_CustomXmlPartContainer();
    internal ImageCollection get_Images();
    internal Dictionary`2<string, Storage> get_OleObjectCollection();
    internal Stack`1<WField> get_ClonedFields();
    internal ListOverrideStyleCollection get_ListOverrides();
    internal GrammarSpelling get_GrammarSpellingData();
    internal void set_GrammarSpellingData(GrammarSpelling value);
    internal DOPDescriptor get_DOP();
    internal void set_DOP(DOPDescriptor value);
    internal EscherClass get_Escher();
    internal void set_Escher(EscherClass value);
    internal FormatType get_SaveFormatType();
    internal void set_SaveFormatType(FormatType value);
    internal bool get_IsMacroEnabled();
    internal Stream get_VbaProject();
    internal void set_VbaProject(Stream value);
    internal Stream get_VbaProjectSignature();
    internal void set_VbaProjectSignature(Stream value);
    internal Stream get_VbaProjectSignatureAgile();
    internal void set_VbaProjectSignatureAgile(Stream value);
    internal PartContainer get_CustomUIPartContainer();
    internal void set_CustomUIPartContainer(PartContainer value);
    internal PartContainer get_UserCustomizationPartContainer();
    internal void set_UserCustomizationPartContainer(PartContainer value);
    internal PartContainer get_CustomXMLContainer();
    internal void set_CustomXMLContainer(PartContainer value);
    internal List`1<MacroData> get_VbaData();
    internal void set_VbaData(List`1<MacroData> value);
    internal List`1<string> get_DocEvents();
    internal void set_DocEvents(List`1<string> value);
    internal Byte[] get_MacrosData();
    internal void set_MacrosData(Byte[] value);
    internal Byte[] get_MacroCommands();
    internal void set_MacroCommands(Byte[] value);
    internal string get_StandardAsciiFont();
    internal void set_StandardAsciiFont(string value);
    internal string get_StandardFarEastFont();
    internal void set_StandardFarEastFont(string value);
    internal string get_StandardNonFarEastFont();
    internal void set_StandardNonFarEastFont(string value);
    internal string get_StandardBidiFont();
    internal void set_StandardBidiFont(string value);
    internal string get_Password();
    internal void set_Password(string value);
    internal MemoryStream get_LatentStyles2010();
    internal void set_LatentStyles2010(MemoryStream value);
    internal Stream get_LatentStyles();
    internal void set_LatentStyles(Stream value);
    internal Package get_DocxPackage();
    internal void set_DocxPackage(Package value);
    public sealed virtual bool get_ImportStyles();
    public sealed virtual void set_ImportStyles(bool value);
    public sealed virtual bool get_ImportStylesOnTypeMismatch();
    public sealed virtual void set_ImportStylesOnTypeMismatch(bool value);
    internal WCharacterFormat get_DefCharFormat();
    internal void set_DefCharFormat(WCharacterFormat value);
    internal WParagraphFormat get_DefParaFormat();
    internal void set_DefParaFormat(WParagraphFormat value);
    internal SttbfAssoc get_AssociatedStrings();
    internal bool get_IsEncrypted();
    private void set_IsEncrypted(bool value);
    internal bool get_HasPicture();
    internal void set_HasPicture(bool value);
    internal bool get_WriteWarning();
    internal bool get_WriteProtected();
    internal void set_WriteProtected(bool value);
    internal bool get_UpdateAlternateChunk();
    internal void set_UpdateAlternateChunk(bool value);
    internal bool get_IsDeletingBookmarkContent();
    internal void set_IsDeletingBookmarkContent(bool value);
    private Dictionary`2<string, Dictionary`2<int, int>> get_ListNames();
    private Dictionary`2<string, Dictionary`2<int, int>> get_Lists();
    private Dictionary`2<string, int> get_PreviousListLevel();
    private List`1<string> get_PreviousListLevelOverrideStyle();
    internal bool get_UseHangingIndentAsListTab();
    internal bool get_UseHangingIndentAsTabPosition();
    internal Themes get_Themes();
    public Settings get_Settings();
    internal int get_AlternateChunkCount();
    internal bool get_IsOpening();
    internal void set_IsOpening(bool value);
    internal bool get_IsMailMerge();
    internal void set_IsMailMerge(bool value);
    internal bool get_IsCloning();
    internal void set_IsCloning(bool value);
    internal bool get_DocHasThemes();
    internal void set_DocHasThemes(bool value);
    internal bool get_CreateBaseStyle();
    internal void set_CreateBaseStyle(bool value);
    internal bool get_IsNormalStyleDefined();
    internal void set_IsNormalStyleDefined(bool value);
    internal bool get_IsDefaultParagraphFontStyleDefined();
    internal void set_IsDefaultParagraphFontStyleDefined(bool value);
    internal bool get_IsHTMLImport();
    internal void set_IsHTMLImport(bool value);
    internal bool get_IsSkipFieldDetach();
    internal void set_IsSkipFieldDetach(bool value);
    internal bool get_IsFieldRangeAdding();
    internal void set_IsFieldRangeAdding(bool value);
    internal bool get_IsReadOnly();
    internal void set_IsReadOnly(bool value);
    internal bool get_BordersSurroundHeader();
    internal void set_BordersSurroundHeader(bool value);
    internal bool get_BordersSurroundFooter();
    internal void set_BordersSurroundFooter(bool value);
    internal bool get_DifferentOddAndEvenPages();
    internal void set_DifferentOddAndEvenPages(bool value);
    internal ushort get_WordVersion();
    internal void set_WordVersion(ushort value);
    internal List`1<Font> get_UsedFonts();
    internal void set_UsedFonts(List`1<Font> value);
    internal List`1<string> get_UsedFontNames();
    internal void set_UsedFontNames(List`1<string> value);
    internal bool get_HasTOC();
    internal Dictionary`2<WField, TableOfContent> get_TOC();
    internal void set_TOC(Dictionary`2<WField, TableOfContent> value);
    internal string get_HtmlBaseUrl();
    internal void set_HtmlBaseUrl(string value);
    internal FieldCollection get_Fields();
    internal List`1<Shape> get_AutoShapeCollection();
    internal void set_AutoShapeCollection(List`1<Shape> value);
    internal void SetDefaultSectionFormatting(WSection destination);
    internal List`1<Entity> get_FloatingItems();
    internal void set_FloatingItems(List`1<Entity> value);
    internal List`1<Stream> get_DocxProps();
    internal Dictionary`2<string, string> get_ListStyleNames();
    internal Dictionary`2<string, string> get_NewlyAttachedComments();
    internal bool get_HasDocxProps();
    internal bool get_IsClosing();
    private void set_IsClosing(bool value);
    internal Dictionary`2<string, string> get_StyleNameIds();
    internal bool get_HasCoverPage();
    internal void set_HasCoverPage(bool value);
    internal int get_TrackChangesBalloonCount();
    internal void set_TrackChangesBalloonCount(int value);
    internal Dictionary`2<string, int> get_SequenceFieldResults();
    internal void set_SequenceFieldResults(Dictionary`2<string, int> value);
    internal ComparisonOptions get_ComparisonOptions();
    internal void set_ComparisonOptions(ComparisonOptions value);
    private FormatType GetFormatType(string fileName, bool isStorageFile);
    public sealed virtual IWParagraph CreateParagraph();
    public sealed virtual void EnsureMinimal();
    public sealed virtual IWSection AddSection();
    public sealed virtual IWParagraphStyle AddParagraphStyle(string styleName);
    public IWCharacterStyle AddCharacterStyle(string styleName);
    public sealed virtual ListStyle AddListStyle(ListType listType, string styleName);
    public sealed virtual string GetText();
    public sealed virtual WordDocument Clone();
    public sealed virtual void ImportSection(IWSection section);
    public sealed virtual void ImportContent(IWordDocument doc);
    public sealed virtual void ImportContent(IWordDocument doc, ImportOptions importOptions);
    private void ImportDocumentText(IWordDocument doc);
    public sealed virtual void ImportContent(IWordDocument doc, bool importStyles);
    private void CopyFontScheme(MajorMinorFontScheme src, MajorMinorFontScheme dest);
    public sealed virtual IStyle AddStyle(BuiltinStyle builtinStyle);
    internal IStyle GetBuiltInTableStyle(BuiltinTableStyle builtinTableStyle);
    private void CheckTableNormalStyle();
    internal void UpdateNextStyle(Style style);
    public sealed virtual void AcceptChanges();
    public sealed virtual void RejectChanges();
    public sealed virtual void Protect(ProtectionType type);
    public sealed virtual void Protect(ProtectionType type, string password);
    private void ResetProtectionTypesValues();
    public sealed virtual void EncryptDocument(string password);
    public sealed virtual void RemoveEncryption();
    internal IStyle AddStyle(StyleType styleType, string styleName);
    private void CheckNormalStyle();
    public sealed virtual List`1<Entity> GetCrossReferenceItems(ReferenceType refernceType);
    private List`1<Entity> GetBookmarksValue();
    private void OpenDocx(Stream stream);
    private void OpenWordML(Stream stream);
    private void SaveDocx(Stream stream);
    private void SaveODT(Stream stream);
    private void SaveWordML(Stream stream);
    private void SaveRtf(Stream stream);
    internal string GetRtfText();
    internal void SaveTxt(Stream stream);
    private void SaveMd(Stream stream);
    private void SaveMd(Stream stream, Encoding encoding);
    public void SaveTxt(Stream stream, Encoding encoding);
    internal void OpenTxt(Stream stream);
    internal void OpenMd(Stream stream);
    internal void OpenText(string text);
    internal void OpenHTML(Stream stream, XHTMLValidationType validationType);
    public sealed virtual void Open(Stream stream, FormatType formatType, XHTMLValidationType validationType, string baseUrl);
    public sealed virtual void Open(Stream stream, FormatType formatType, XHTMLValidationType validationType);
    private void OpenInternal(Stream stream, FormatType formatType, XHTMLValidationType validationType);
    public sealed virtual void Open(Stream stream, FormatType formatType);
    public sealed virtual void Open(Stream stream, FormatType formatType, string password);
    private void OpenInternal(Stream stream, FormatType formatType, string password);
    internal void OpenRtf(Stream stream);
    internal void OpenRtf(string rtfText);
    internal void OpenHTML(Stream stream);
    private void UpdateFormatType(Stream stream, FormatType& formatType);
    public sealed virtual void Save(Stream stream, FormatType formatType);
    internal string GetAsRoman(int number);
    private string GenerateNumber(Int32& value, int magnitude, string letter);
    private string GetChineseWithinTenThousand(int number, bool isAboveFiveDigit, ListPatternType patternType);
    internal string GetChineseExpression(int number, ListPatternType patternType);
    internal string GetAsLetter(int number);
    internal string GetSpanishCardinalTextString(bool cardinalString, string text);
    internal string GetCardTextString(bool cardinalString, string text);
    internal string GetOrdTextString(bool ordinalString, string text);
    internal string GetSpanishOrdinalTextString(bool ordinalString, string text);
    internal string NumberToSpanishWords(int number, bool isCardText);
    internal string NumberToWords(int number, bool isCardText);
    private bool IsTrailParagraph(WParagraph paragraph, bool isText);
    internal void RemoveTrailVersionWatermark(FormatType formatType);
    internal void AddTrailVersionWatermarkForODT();
    internal void AddTrailVersionWatermark(bool isWordToImage);
    internal void AddFirstAndLastParaTrialMessage(bool isWordToImage);
    private void SaveInternal(Stream stream, FormatType formatType);
    internal string GetOrdinal(int num, WCharacterFormat characterFormat);
    private string GetOrdinalInSwedish(int num);
    private string GetOrdinalInCatalan(int num);
    private string GetOrdinalInDanish(int num);
    private string GetOrdinalInEnglish(int num);
    private void SaveHTML(Stream stream);
    public sealed virtual void Close();
    public sealed virtual void Dispose();
    internal static bool CompareArray(Byte[] buffer1, Byte[] buffer2);
    private void CloseContent();
    private void CloseSecContent();
    private void CloseStyles();
    internal Stream[] RenderAsImages(ExportImageFormat type);
    public Stream[] RenderAsImages();
    public Stream[] RenderAsImages(int startPageIndex, int numberOfPages);
    private Stream[] RenderAsImage(int pageIndex, int noOfPages, ExportImageFormat saveFormat);
    public Stream RenderAsImages(int startPageIndex, ExportImageFormat imageFormat);
    public sealed virtual TextSelection Find(Regex pattern);
    public sealed virtual TextSelection[] FindSingleLine(Regex pattern);
    public sealed virtual TextSelection Find(string given, bool caseSensitive, bool wholeWord);
    public sealed virtual TextSelection[] FindSingleLine(string given, bool caseSensitive, bool wholeWord);
    public sealed virtual TextSelection[] FindAll(Regex pattern);
    internal TextSelection[] FindAll(Regex pattern, bool isDocumentComparison);
    public sealed virtual TextSelection[] FindAll(string given, bool caseSensitive, bool wholeWord);
    public sealed virtual int Replace(Regex pattern, string replace);
    public sealed virtual int Replace(string given, string replace, bool caseSensitive, bool wholeWord);
    public sealed virtual int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord);
    public sealed virtual int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord, bool saveFormatting);
    public sealed virtual int Replace(Regex pattern, TextSelection textSelection);
    public sealed virtual int Replace(Regex pattern, TextSelection textSelection, bool saveFormatting);
    public sealed virtual int Replace(string given, TextBodyPart bodyPart, bool caseSensitive, bool wholeWord);
    public sealed virtual int Replace(string given, TextBodyPart bodyPart, bool caseSensitive, bool wholeWord, bool saveFormatting);
    public sealed virtual int Replace(Regex pattern, TextBodyPart bodyPart);
    public sealed virtual int Replace(Regex pattern, TextBodyPart bodyPart, bool saveFormatting);
    public sealed virtual int Replace(string given, IWordDocument replaceDoc, bool caseSensitive, bool wholeWord);
    public sealed virtual int Replace(string given, IWordDocument replaceDoc, bool caseSensitive, bool wholeWord, bool saveFormatting);
    public sealed virtual int Replace(Regex pattern, IWordDocument replaceDoc, bool saveFormatting);
    public sealed virtual void UpdateWordCount();
    private void UpdateWordCountForFields();
    private String[] SplitsText(String& text);
    internal void InternalUpdateWordCount(bool performlayout);
    public sealed virtual void UpdateDocumentFields();
    internal void UpdateDocumentFields(bool performLayout);
    private void UpdateBookmarkSeqField(List`1<WSeqField> bookmarkSeqFiled);
    private string GetBookmarkSeqFiledResultNumber(WSeqField field);
    internal DocumentLayouter UpdateDocumentFieldsInOptimalWay();
    public sealed virtual void UpdateAlternateChunks();
    private AlternateChunk GetFirstAltChunkOfSection();
    private AlternateChunk GetLastAltChunkOfSection();
    private void UpdatePageRefFields(List`1<WField> pagerefFields, Dictionary`2<Entity, int> bkStartPageNumbers);
    private void UpdateRefFields(List`1<WField> refFields);
    private void UpdateListValue(WTextBody textbody, int index, Dictionary`2[] listValueCollections, Dictionary`2[] levelNumberCollections);
    private void UpdateHeaderFooterListValues(Dictionary`2[] listValueCollections, Dictionary`2[] levelNumberCollections);
    private void UpdateShapeListValues(Dictionary`2[] listValueCollections, Dictionary`2[] levelNumberCollections);
    private void UpdateEndNoteListValues(Dictionary`2[] listValueCollections, Dictionary`2[] levelNumberCollections);
    private void UpdateFootNoteListValues(Dictionary`2[] listValueCollections, Dictionary`2[] levelNumberCollections);
    private void UpdateCommentListValues(Dictionary`2[] listValueCollections, Dictionary`2[] levelNumberCollections);
    private void UpdateSectionListValues(Dictionary`2[] listValueCollections, Dictionary`2[] levelNumberCollections);
    private string GetParagraphNumber(WField refFields, BookmarkStart bkStart, WParagraph ownerPara, WListLevel level, string separator, ReferenceKind referencekind, Dictionary`2<Entity, string> paragraphListValue, Dictionary`2<Entity, int> paragraphLevelNumbers);
    internal WTextBody GetEntityOwnerTextBody(WParagraph para);
    private bool IsContainNumPagesField(List`1<WField> pagereffields, List`1<WField> refFields);
    private void CalculateForTextBody(BodyItemCollection bodyItems);
    private string CalculateForParaItems(ParagraphItemCollection paragraphItemCollection);
    private void CalculateForTabls(WTable table);
    private void CalculateForParagraphs(WParagraph para);
    internal void UpdateTableOfContent();
    internal string UpdateListValue(WParagraph paragraph, WListFormat listFormat, WListLevel level);
    private string GetUpdatedSuffix(WListFormat listFormat, string styleName, WListLevel level, int listItemIndex);
    private string UpdateNumberPrefix(string numberPrefix, WListFormat listFormat, string styleName);
    private string GetListLevelText(string levelText);
    internal void ClearLists();
    private void EnsureLevelRestart(WListFormat format, string styleName, bool fullRestart, WListLevel listLevel);
    private int GetListItemIndex(WListFormat format, string styleName, WListLevel listLevel, bool isIncreseStartVal);
    private int GetListStartValue(WListFormat format, string styleName, WListLevel listLevel);
    private void ResetInbetweenLevels(WListFormat format, string styleName, WListLevel listLevel, Dictionary`2<int, int> lstStyle);
    private string GetListValue(WListFormat listFormat, string styleName, WListLevel level, int startAt, int listItemIndex);
    private string GetOrderedNumberPrefix(string levelNumberPrefix);
    private string GetListPrefixByItsLevel(int levelNo, string listPrefix);
    private string GetNumberedListValue(WListLevel prevLevel, int num, bool leadZero, string listPrefix);
    private Int32[] SortKeys(Int32[] keys);
    public sealed virtual int ReplaceSingleLine(string given, string replace, bool caseSensitive, bool wholeWord);
    public sealed virtual int ReplaceSingleLine(Regex pattern, string replace);
    public sealed virtual int ReplaceSingleLine(string given, TextSelection replacement, bool caseSensitive, bool wholeWord);
    public sealed virtual int ReplaceSingleLine(Regex pattern, TextSelection replacement);
    public sealed virtual int ReplaceSingleLine(string given, TextBodyPart replacement, bool caseSensitive, bool wholeWord);
    public sealed virtual int ReplaceSingleLine(Regex pattern, TextBodyPart replacement);
    private int ReplaceHFSingleLine(Regex pattern, string replace);
    private void ResetSingleLineReplace();
    private int ReplaceSingleLine(Regex pattern, string replace, TextBodyItem startItem);
    private bool IsFloatingItemsContainSameZIndexValue();
    internal void SortByZIndex(bool isFromHTMLExport);
    private void SetZOrderPosition();
    public sealed virtual TextSelection FindNext(TextBodyItem startTextBodyItem, string given, bool caseSensitive, bool wholeWord);
    public sealed virtual TextSelection FindNext(TextBodyItem startBodyItem, Regex pattern);
    private TextSelection FindNext(Regex pattern);
    private void UpdateNextItem(TextSelection selection);
    private ParagraphItem GetNextItem(TextBodyItem tbItem);
    private ParagraphItem GetNextItem(WTextBody textBody);
    private bool CheckSelection(TextSelection textSel);
    public sealed virtual TextSelection[] FindNextSingleLine(TextBodyItem startTextBodyItem, string given, bool caseSensitive, bool wholeWord);
    public sealed virtual TextSelection[] FindNextSingleLine(TextBodyItem startBodyItem, Regex pattern);
    private TextSelection[] FindNextSingleLine(Regex pattern);
    public sealed virtual void ResetFindNext();
    public sealed virtual ParagraphItem CreateParagraphItem(ParagraphItemType itemType);
    protected virtual object CloneImpl();
    protected internal WCharacterFormat CreateCharacterFormatImpl();
    protected internal ListStyle CreateListStyleImpl();
    protected internal WListLevel CreateListLevelImpl(ListStyle style);
    protected internal WParagraphFormat CreateParagraphFormatImpl();
    protected internal RowFormat CreateTableFormatImpl();
    protected internal CellFormat CreateCellFormatImpl();
    protected internal WTextBoxFormat CreateTextboxFormatImpl();
    protected internal WTextBoxCollection CreateTextBoxCollectionImpl();
    protected internal WListFormat CreateListFormatImpl(IWParagraph owner);
    internal ICompoundFile CreateCompoundFile();
    internal ICompoundFile CreateCompoundFile(Stream stream);
    internal bool CheckForEncryption(Stream stream);
    internal void EnsureParagraphStyle(IWParagraph paragraph);
    private void AddEmptyParagraph();
    internal void CloneShapeEscher(WordDocument destDoc, IParagraphItem shapeItem);
    internal void CloneProperties(Dictionary`2<string, Stream> sourceProps, Dictionary`2& destinationProps);
    internal void CloneProperties(Dictionary`2<string, string> sourceProps, Dictionary`2& destinationProps);
    internal void CloneProperties(List`1<Stream> sourceProps, List`1& destinationProps);
    internal Stream CloneStream(Stream input);
    internal string GetPasswordValue();
    internal bool IsNeedToAddLineNumbers();
    internal void InsertWatermark(WatermarkType type);
    internal void ReadBackground();
    internal bool HasListStyle();
    internal void UpdateStartPosOfParaItems(ParagraphItem pItem, int offset);
    internal void UpdateStartPos(ParagraphItem item, int offset);
    internal void UpdateStartPosOfInlineContentControlItems(InlineContentControl inlineContentControl, int index, int offset);
    internal bool IsDOCX();
    private void InitDefaultParagraphFormat();
    private void Init();
    internal bool IsInternalManipulation();
    private void UpdateImportOption();
    private void CopyBinaryData(Byte[] srcData, Byte[]& destData);
    private void ClonePictureContainer(WordDocument destDoc, WPicture picture);
    private void CloneTextBoxContainer(WordDocument destDoc, WTextBox textBox);
    private void CloneAutoShapeContainer(WordDocument destDoc, ShapeObject shapeObj);
    private bool CheckContainer(EscherShapeType type, int spid);
    private Byte[] GetBackGndImage();
    private void SetBackgroundImageValue(Byte[] imageBytes);
    private bool HasTrackedChanges();
    internal bool IsSecurityGranted();
    private void CheckFileName(string fileName);
    private void ResetWatermark();
    internal void UpdateHeaderWatermark(Watermark watermark);
    private void SetProtection(ProtectionType type);
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void CreateLayoutInfo();
    protected virtual IEntityCollectionBase get_WidgetCollection();
    internal Byte[] get_SttbfRMark();
    internal void set_SttbfRMark(Byte[] value);
    public sealed virtual void RemoveMacros();
    internal void SetTriggerElement(Int64& flag, int bitPosition);
    internal bool HasElement(long flag, int bitPosition);
    internal void SetTriggerElement(Int32& flag, int bitPosition);
    internal bool HasElement(int flag, int bitPosition);
    internal bool HasDifferentPageSetup();
    internal void ParagraphItemRevision(ParagraphItem item, RevisionType revisionType, string revAuthorName, DateTime revDateTime, string name, bool isNestedRevision, Revision moveRevision, Revision contentRevision, Stack`1<Revision> m_trackchangeRevisionDetails);
    private Revision GetRevisionForRemainingParaItem(ParagraphItem item, bool isChildRevision, RevisionType revisionType, string revAuthorName, DateTime revDateTime, string name, Revision rowRevision, Revision moveRevision, Stack`1<Revision> m_trackchangeRevisionDetails);
    private Revision GetRevisionForFirstParaItem(ParagraphItem item, bool isChildRevision, RevisionType revisionType, string revAuthorName, DateTime revDateTime, string name, Revision rowRevision, Revision moveRevision);
    private Revision GetRowRevision(ParagraphItem item, RevisionType revisionType, string revAuthorName, Boolean& isChildRevision, Revision& rowRevision);
    private Revision GetExistingRevision(List`1<Revision> revisions, RevisionType revisionType, string revAuthorName);
    private Revision GetExistingRevision(List`1<Revision> prevItemRevisions, RevisionType revisionType, string revAuthorName, Stack`1<Revision> trackChanges, Entity currItem);
    private Revision CreateRevision(bool isChildRevision, RevisionType revisionType, string revAuthorName, DateTime revDateTime, string name, Revision rowRevision, Revision moveRevision, Entity item);
    internal void TableRowRevision(RevisionType revisionType, WTableRow tableRow, WordReaderBase reader);
    private void LinkNestedTableRowRevision(RevisionType revisionType, WTableRow tableRow, string revAuthorName, DateTime revDateTime);
    internal Revision CreateNewRevision(RevisionType revisionType, string authorName, DateTime dateTime, string name);
    internal Revision CreateNewChildRevision(RevisionType revisionType, string authorName, DateTime dateTime, string name);
    internal void BreakCharacterFormatRevision(RevisionType revisionType, WCharacterFormat charFormat, Revision moveRevision, WordReaderBase reader);
    internal string GetAuthorName(WordReaderBase reader, bool isInsertKey);
    internal DateTime GetDateTime(WordReaderBase reader, bool isInsertKey, WCharacterFormat charFormat);
    private void LineTableRevForBreakCharacterFormat(WCharacterFormat charFormat, Revision moveRevision, RevisionType revisionType, string revAuthorName, DateTime revDateTime, string name);
    private void LinkMoveRevForBreakCharacterFormat(WCharacterFormat charFormat, Revision moveRevision, RevisionType revisionType, string revAuthorName, DateTime revDateTime, string name);
    internal void MoveRevisionRanges(Revision sourceRevision, Revision destinationRevision);
    internal void ParaFormatChangeRevision(WParagraphFormat paragraphFormat);
    internal void SectionFormatChangeRevision(WSection section);
    private Revision GetSameRevision(FormatBase previousFormat, FormatBase currentFormat);
    internal void CharFormatChangeRevision(WCharacterFormat charFormat, ParagraphItem item);
    private Revision GetCharRevisionForStyle(WCharacterFormat charFormat, string formatRevAuthorName, DateTime formatRevDateTime);
    private Revision GetCharRevisionForFirstParaItem(ParagraphItem item, WCharacterFormat charFormat);
    private Revision GetPreviousBreakCharFmtChange(WParagraph paragraph, WCharacterFormat charFormat);
    private WParagraphFormat GetParagraphFormat(Style style);
    internal bool HasRenderableItemBefore(ParagraphItem item);
    internal void UpdateTableFormatRevision(WTableRow row);
    internal void UpdateRowFormatRevision(RowFormat rowFormat);
    internal void UpdateCellFormatRevision(WTableCell tableCell);
    private Revision GetRowFormattingRevision(WTableRow row);
    internal void UpdateFieldRevision(WField field);
    private void RemoveFieldRangeRevision(TextBodyItem bodyItemEntity, Stack`1<WField> nestedField, Revision fieldRevision, WField CurrentField);
    private void RemoveFieldRangeRevision(ParagraphItem paraItem, Stack`1<WField> nestedField, Revision fieldRevision, WField CurrentField);
    private void RemoveFieldRangeRevision(WTextBody textBody, Stack`1<WField> nestedField, Revision fieldRevision, WField CurrentField);
    private void RemoveFieldRangeRevision(ParagraphItemCollection paraItems, Stack`1<WField> nestedField, Revision fieldRevision, WField CurrentField);
    private void RemoveFieldRangeRevision(WTable table, Stack`1<WField> nestedField, Revision fieldRevision);
    private void RemoveFieldRevisions(List`1<Revision> revisions, Entity entity, Stack`1<WField> nestedField, FormatBase format, Revision fieldRevision);
    internal void UpdateTableRowRevision(WTableRow tableRow);
    private void RemoveTableCellRevision(WTextBody textBody, Revision rowRevision);
    private void RemoveTableCellRevision(ParagraphItemCollection paraItems, Revision rowRevision);
    private void RemoveTableCellRevision(WTable table, Revision rowRevision);
    private void RemoveTableCellRevision(List`1<Revision> revisions, Entity entity, FormatBase format, Revision rowRevision);
    internal void RemoveImproperBookmarks();
    internal void UpdateLastItemRevision(IWParagraph paragraph, ParagraphItemCollection items);
    private void LinkContentControlWithBreakCharFormat(Entity item, List`1<Revision> breakRevisions);
    private void LinkLastItemWithBreakCharFormat(IWParagraph paragraph, List`1<Revision> breakRevisions, List`1<Revision> itemRevisions);
    internal void LinkEmptyParaBreakCharacterFormat(IWParagraph paragraph, ParagraphItemCollection items);
    internal void RemoveRevisionFromCollection(WTextBody textBody);
    private void RemoveRevisionFromCollection(ParagraphItemCollection paraItems);
    private void RemoveRevisionFromCollection(WTable table);
    private void RemoveRevisions(List`1<Revision> revisions);
    internal void CharacterFormatChange(WCharacterFormat charFormat, ParagraphItem item, WordReaderBase reader);
    internal void ParagraphFormatChange(WParagraphFormat paraFormat);
    internal void SectionFormatChange(WSection section);
    internal void UpdateTableRevision(WTable table);
    internal static Encoding GetEncoding(string codePageName);
    public WTableStyle AddTableStyle(string styleName);
    public Entity FindItemByProperty(EntityType entityType, string propertyName, string propertyValue);
    public Entity FindItemByProperties(EntityType entityType, String[] propertyNames, String[] propertyValues);
    public List`1<Entity> FindAllItemsByProperty(EntityType entityType, string propertyName, string propertyValue);
    public List`1<Entity> FindAllItemsByProperties(EntityType entityType, String[] propertyNames, String[] propertyValues);
    private List`1<Entity> IterateSection(EntityType entityType, String[] propertyNames, String[] propertyValues, bool onlyFirstMatch);
    private List`1<Entity> IterateTextBody(WTextBody textBody, EntityType entityType, String[] propertyNames, String[] propertyValues, bool onlyFirstMatch);
    private List`1<Entity> IterateParagraph(ParagraphItemCollection paraItems, EntityType entityType, String[] propertyNames, String[] propertyValues, bool onlyFirstMatch);
    private List`1<Entity> IterateTable(WTable table, EntityType entityType, String[] propertyNames, String[] propertyValues, bool onlyFirstMatch);
    private bool IsEntityEquals(Entity currentItem, EntityType entityType, String[] propertyNames, String[] propertyValues);
    private bool IsUnSupportedEntityType(EntityType entityType);
    private bool IsPropertyValuesEqual(object obj, String[] propertyNames, String[] propertyValues);
    private List`1<Entity> FindWaterMarks(String[] propertyNames, String[] propertyValues, bool onlyFirstMatch);
    private List`1<Entity> AddFindItems(List`1<Entity> destination, List`1<Entity> source);
    internal void UpdateMatchIndex();
    private void MarkNestedField(FieldCollection fieldCollection);
    internal void UpdateIndex(int bodyItemIndex, int paraItemIndex, int startRangeIndex, int endRangeIndex, int textStartIndex, int textEndIndex);
    internal void SkipOtherBodyText();
    private void SetWCStartPosForSection(int beginParaIndex, int endParaIndex, int secIndex, int startIndex, int endIndex);
    private void IterateThroughBodyItems(TextBodyItem bodyItem);
    private void SetWCStartPos(WParagraph para, int startIndex, int endIndex);
    public void Compare(WordDocument document, string author, DateTime dateTime, ComparisonOptions comparisonOptions);
    internal void WordCompare(WordDocument document, string author, DateTime dateTime, ComparisonOptions comparisonOptions);
    private void ApplySecFormatRevision(WSectionFormat orgSectionFormat, WSectionFormat revSectionFormat);
    private void InitCompareInfo(WordDocument orgDocument, WordDocument revDocument, string authorName, DateTime dateTime, ComparisonOptions comparisonOptions);
    private void DisposeCompareInfo(WordDocument orgDocument, WordDocument revDocument);
    private void CompareStylesBetweenDocuments(WordDocument revisedDocument);
    private void ModifyDefFormatsAsRevised(WordDocument revisedDocument);
    private void SetDefaultFormat(WordDocument revisedDoc, WParagraphStyle style);
    internal void CompareEmptyParagraphs(WTextBody originalTextBody, WTextBody revisedTextBody);
    private void EndOfTheDocument(WordDocument revDoc);
    private void DeleteItemsAtDocumentEnd(WordDocument revisedDoc);
    private void InsertItemsToEndOfTheDocument(WordDocument revisedDocument);
    internal void MarkInsertRevision(WordDocumentPart documentPart);
    internal void InsertFieldItems(WParagraph orgPara, WParagraph revPara, Int32& itemIndex, Int32& paraIndex);
    internal WParagraph GetOwnerParagraphToInsertBookmark(Entity entity, bool isStart);
    internal void RemoveDelMark(ParagraphItem paraItem);
    internal void RemoveInsMark(ParagraphItem paraItem);
}
public class Syncfusion.DocIO.DLS.WordDocumentPart : object {
    private WSectionCollection m_sections;
    public WSectionCollection Sections { get; }
    public WordDocumentPart(WordDocument document);
    public WSectionCollection get_Sections();
    public void Load(WordDocument document);
    public WordDocument GetAsWordDocument();
    public void Close();
    internal void GetWordDocumentPart(BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private Entity GetSection(Entity entity);
    private void GetParagraphAfterTableDocumentPart(WParagraph startParagraph, WParagraph endParagraph, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private void GetTableAfterParagraphDocumentPart(WParagraph startParagraph, WParagraph endParagraph, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private void GetTableDocumentPart(WParagraph startParagraph, WParagraph endParagraph, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd, WTableCell bkmkEndCell);
    private void AddSectionBodyItems(int startItemIndex, int endItemIndex, WTextBody textBody, WSection section);
    private void GetParagraphDocumentPart(WParagraph paraStart, WParagraph paraEnd, BookmarkStart bkmkStart, BookmarkEnd bkmkEnd);
    private void AddLastSectionToDocumentPart(int endParagraphIndex, int bkmkEndPreviosItemIndex, WTextBody endTextBody, bool IsFirstBkmkEnd, bool isInSingleSection);
    private void AddInBetweenSections(int startSectionIndex, int endSectionIndex, WordDocument document);
    private void AddFirstSectionToDocumentPart(int startParagraphIndex, int endParagraphIndex, WTextBody startTextBody, int bkmkStartNextItemIndex, int bkmkEndPreviosItemIndex, bool isInSingleSection, WSection section);
    private bool IsBkmkEndInFirstItem(WParagraph paragraph, ParagraphItem bkmkEnd, int bkmkEndPreviosItemIndex);
}
internal class Syncfusion.DocIO.DLS.WordToMdConversion : object {
    private MarkdownDocument markdownDocument;
    private MdCodeBlock codeBlock;
    private bool isFieldEnd;
    private bool isFieldSeparator;
    private bool isHyperlink;
    private WFieldMark seperator;
    private int imageCount;
    internal string filePath;
    internal MarkdownDocument GetMarkdownText(WordDocument document);
    private void IterateBody(ITextBody body);
    private MdCodeBlock IterateParagraph(WParagraph paragraph);
    private void IterateParagraphItems(ParagraphItemCollection paragraphItems, MdParagraph mdParagraph);
    private MdCodeBlock ConvertAsCodeBlock(WParagraph paragraph, MdCodeBlock codeBlock);
    private void IterateTableRow(MdTableRow mdRow, WTableRow row);
    private void ConvertCellIntoText(WTableCell cell, MdTableRow mdRow, MdTableCell mdCell);
    private void GetCellContent(Entity entity, MdTableRow mdRow, MdTableCell mdCell);
    private void IterateNestedTable(WTable table, MdTableRow mdRow, MdTableCell mdCell);
    internal bool IterateFieldHyperlink(Hyperlink link, MdHyperlink mdHyperlink);
    private void AddCellsforSpannedCells(WTableCell cell, MdTableCell mdCell, MdTableRow mdRow);
    private void InsertSpace(MdTableCell mdCell);
    private void GetParaContentInCell(IWParagraph paragraph, MdTableCell cell);
    private void SetTableAlignment(WTableRow row, MdTable table);
    private bool CheckFormat(MdTextRange currentText, MdTextRange previousText);
    private void ExecuteEvent(MdPicture mdPicture, WPicture picture);
    private void SaveImageInFolder(WPicture picture, MdPicture mdPicture, string exportImagesFolder);
    internal void ApplyListFormat(MdParagraph mdparagraph, IWParagraph paragraph);
    internal void ApplyTextFormat(WCharacterFormat characterFormat, string text, MdTextRange mdTextRange);
    internal void ConvertAsMdPicture(MdPicture mdPicture, WPicture picture, MdParagraph mdParagraph, string imageFormat);
    private string GetImageFormat(WPicture picture);
    internal void ConvertAndWrite(string filepath, WordDocument document, StreamWriter writer);
}
public class Syncfusion.DocIO.DLS.WPageSetup : FormatBase {
    private static float DEF_PAGE_WIDTH;
    private static float DEF_PAGE_HEIGHT;
    private static float DEF_PAGE_MARGINS;
    private static float DEF_PAGE_MARGIN_LEFT;
    internal static float DEF_AUTO_TAB_LENGHT;
    private static float DEF_AR_TO_LETTER_LIMIT;
    private static int DEF_A_ASCII_INDEX;
    internal static int LinePitchKey;
    internal static int PitchTypeKey;
    internal static int VerticalAlignKey;
    internal static int PageOrientKey;
    internal static int PageSizeKey;
    internal static int EqualColWidthKey;
    internal static int MarginKey;
    internal static int DrawLinesBetwColsKey;
    internal static int LineNumberingModeKey;
    internal static int FootnotePositionKey;
    internal static int FootnoteNumberFormatKey;
    internal static int EndnoteNumberFormatKey;
    internal static int RestartIndexForFootnotesKey;
    internal static int RestartIndexForEndnoteKey;
    internal static int InitialFootnoteNumberKey;
    internal static int InitialEndnoteNumberKey;
    internal static int PageNumberStyleKey;
    internal static int PageNumberRestartKey;
    internal static int PageNumberStartAtKey;
    internal static int BidiKey;
    internal static int EndnotePositionKey;
    internal static int HeaderDistanceKey;
    internal static int FooterDistanceKey;
    internal static int OtherPagesTrayKey;
    internal static int FirstPageTrayKey;
    internal static int LineNumberingStartValueKey;
    internal static int PageBorderIsInFrontKey;
    internal static int PageBorderOffsetFromKey;
    internal static int LineNumDistanceFromTextKey;
    internal static int PageBorderApplyKey;
    internal static int DifferentFirstPageKey;
    internal static int DifferentOddAndEvenPageKey;
    internal static int BorderKey;
    internal static int PageNumbersKey;
    internal static int spaceKey;
    internal static int NumberOfColumnsKey;
    internal static int LineNumnberingModKey;
    internal FootEndNoteNumberFormat EndnoteNumberFormat { get; internal set; }
    internal FootEndNoteNumberFormat FootnoteNumberFormat { get; internal set; }
    internal EndnoteRestartIndex RestartIndexForEndnote { get; internal set; }
    internal FootnoteRestartIndex RestartIndexForFootnotes { get; internal set; }
    internal FootnotePosition FootnotePosition { get; internal set; }
    internal EndnotePosition EndnotePosition { get; internal set; }
    internal int InitialFootnoteNumber { get; internal set; }
    internal int InitialEndnoteNumber { get; internal set; }
    [ObsoleteAttribute("This property has been deprecated. Use the DefaultTabWidth property of WordDocument class to set default tab width for the document.")]
public float DefaultTabWidth { get; public set; }
    public SizeF PageSize { get; public set; }
    public PageOrientation Orientation { get; public set; }
    public PageAlignment VerticalAlignment { get; public set; }
    public MarginsF Margins { get; public set; }
    public float HeaderDistance { get; public set; }
    public float FooterDistance { get; public set; }
    public float ClientWidth { get; }
    public bool DifferentFirstPage { get; public set; }
    public bool DifferentOddAndEvenPages { get; public set; }
    public LineNumberingMode LineNumberingMode { get; public set; }
    public int LineNumberingStep { get; public set; }
    public int LineNumberingStartValue { get; public set; }
    public float LineNumberingDistanceFromText { get; public set; }
    public PageBordersApplyType PageBordersApplyType { get; public set; }
    public PageBorderOffsetFrom PageBorderOffsetFrom { get; public set; }
    public bool IsFrontPageBorder { get; public set; }
    public Borders Borders { get; internal set; }
    public bool Bidi { get; public set; }
    internal bool EqualColumnWidth { get; internal set; }
    public PageNumberStyle PageNumberStyle { get; public set; }
    public int PageStartingNumber { get; public set; }
    public bool RestartPageNumbering { get; public set; }
    internal float LinePitch { get; internal set; }
    internal GridPitchType PitchType { get; internal set; }
    internal bool DrawLinesBetweenCols { get; internal set; }
    public PageNumbers PageNumbers { get; internal set; }
    public PrinterPaperTray FirstPageTray { get; public set; }
    public PrinterPaperTray OtherPagesTray { get; public set; }
    internal int NumberOfColumns { get; internal set; }
    internal float ColumnSpace { get; internal set; }
    internal WPageSetup(WSection sec);
    internal FootEndNoteNumberFormat get_EndnoteNumberFormat();
    internal void set_EndnoteNumberFormat(FootEndNoteNumberFormat value);
    internal FootEndNoteNumberFormat get_FootnoteNumberFormat();
    internal void set_FootnoteNumberFormat(FootEndNoteNumberFormat value);
    internal EndnoteRestartIndex get_RestartIndexForEndnote();
    internal void set_RestartIndexForEndnote(EndnoteRestartIndex value);
    internal FootnoteRestartIndex get_RestartIndexForFootnotes();
    internal void set_RestartIndexForFootnotes(FootnoteRestartIndex value);
    internal FootnotePosition get_FootnotePosition();
    internal void set_FootnotePosition(FootnotePosition value);
    internal EndnotePosition get_EndnotePosition();
    internal void set_EndnotePosition(EndnotePosition value);
    internal int get_InitialFootnoteNumber();
    internal void set_InitialFootnoteNumber(int value);
    internal int get_InitialEndnoteNumber();
    internal void set_InitialEndnoteNumber(int value);
    public float get_DefaultTabWidth();
    public void set_DefaultTabWidth(float value);
    public SizeF get_PageSize();
    public void set_PageSize(SizeF value);
    public PageOrientation get_Orientation();
    public void set_Orientation(PageOrientation value);
    public PageAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(PageAlignment value);
    public MarginsF get_Margins();
    public void set_Margins(MarginsF value);
    public float get_HeaderDistance();
    public void set_HeaderDistance(float value);
    public float get_FooterDistance();
    public void set_FooterDistance(float value);
    public float get_ClientWidth();
    public bool get_DifferentFirstPage();
    public void set_DifferentFirstPage(bool value);
    public bool get_DifferentOddAndEvenPages();
    public void set_DifferentOddAndEvenPages(bool value);
    public LineNumberingMode get_LineNumberingMode();
    public void set_LineNumberingMode(LineNumberingMode value);
    public int get_LineNumberingStep();
    public void set_LineNumberingStep(int value);
    public int get_LineNumberingStartValue();
    public void set_LineNumberingStartValue(int value);
    public float get_LineNumberingDistanceFromText();
    public void set_LineNumberingDistanceFromText(float value);
    public PageBordersApplyType get_PageBordersApplyType();
    public void set_PageBordersApplyType(PageBordersApplyType value);
    public PageBorderOffsetFrom get_PageBorderOffsetFrom();
    public void set_PageBorderOffsetFrom(PageBorderOffsetFrom value);
    public bool get_IsFrontPageBorder();
    public void set_IsFrontPageBorder(bool value);
    public Borders get_Borders();
    internal void set_Borders(Borders value);
    public bool get_Bidi();
    public void set_Bidi(bool value);
    internal bool get_EqualColumnWidth();
    internal void set_EqualColumnWidth(bool value);
    public PageNumberStyle get_PageNumberStyle();
    public void set_PageNumberStyle(PageNumberStyle value);
    public int get_PageStartingNumber();
    public void set_PageStartingNumber(int value);
    public bool get_RestartPageNumbering();
    public void set_RestartPageNumbering(bool value);
    internal float get_LinePitch();
    internal void set_LinePitch(float value);
    internal GridPitchType get_PitchType();
    internal void set_PitchType(GridPitchType value);
    internal bool get_DrawLinesBetweenCols();
    internal void set_DrawLinesBetweenCols(bool value);
    public PageNumbers get_PageNumbers();
    internal void set_PageNumbers(PageNumbers value);
    public PrinterPaperTray get_FirstPageTray();
    public void set_FirstPageTray(PrinterPaperTray value);
    public PrinterPaperTray get_OtherPagesTray();
    public void set_OtherPagesTray(PrinterPaperTray value);
    internal int get_NumberOfColumns();
    internal void set_NumberOfColumns(int value);
    internal float get_ColumnSpace();
    internal void set_ColumnSpace(float value);
    internal void SetPageSetupProperty(string propertyName, object propertyValue);
    internal void InitializeDocxPageSetup();
    internal bool Compare(WPageSetup pageSetup);
    public void InsertPageNumbers(bool topOfPage, PageNumberAlignment horizontalAlignment);
    internal string GetNumberFormatValue(byte numberFormat, int number);
    private string GetAsRoman(int number);
    private string GetAsLetter(int number);
    private static void AppendChar(StringBuilder builder, int number);
    private static Stack`1<int> ConvertToLetter(float arabic);
    private string GenerateNumber(Int32& value, int magnitude, string letter);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void InitXDLSHolder();
    public virtual string ToString();
    internal WPageSetup Clone();
    internal virtual void Close();
    internal object GetPropertyValue(int propKey);
    internal void SetPropertyValue(int propKey, object value);
    protected internal virtual void EnsureComposites();
    protected virtual FormatBase GetDefComposite(int key);
    protected virtual object GetDefValue(int key);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WParagraph : TextBodyItem {
    private static string DEF_NORMAL_STYLE;
    private static string DEF_DEFAULTPARAGRAPHFONT_STYLE_ID;
    private static int DEF_LIST_STYLE_ID;
    private static int DEF_USER_STYLE_ID;
    private string m_paraId;
    protected IWParagraphStyle m_style;
    internal StringBuilder m_strTextBuilder;
    internal string m_liststring;
    protected WParagraphFormat m_prFormat;
    protected WListFormat m_listFormat;
    private byte m_bFlags;
    private byte m_bAFlags;
    protected ParagraphItemCollection m_pItemColl;
    private ParagraphItemCollection m_pEmptyItemColl;
    private ParagraphItemCollection m_paragraphItems;
    private WCharacterFormat m_charFormat;
    private TextBodyItem m_ownerTextBodyItem;
    internal StringBuilder m_strTextBuilder2;
    internal bool HasSDTInlineItem { get; internal set; }
    internal bool SplitWidgetContainerDrawn { get; internal set; }
    internal bool IsStyleApplied { get; internal set; }
    internal bool IsNeedToMeasureBookMarkSize { get; }
    public EntityType EntityType { get; }
    public EntityCollection ChildEntities { get; }
    public string StyleName { get; }
    public string ListString { get; }
    internal string ParaId { get; internal set; }
    public string Text { get; public set; }
    public bool EnableStyleSeparator { get; public set; }
    public ParagraphItem Item { get; }
    public ParagraphItemCollection Items { get; }
    public WParagraphFormat ParagraphFormat { get; }
    public WCharacterFormat BreakCharacterFormat { get; }
    public WListFormat ListFormat { get; }
    public bool IsInCell { get; }
    internal bool IsFloatingItemsLayouted { get; internal set; }
    internal bool IsXpositionUpated { get; internal set; }
    internal bool HasParRTFTag { get; internal set; }
    public bool IsEndOfSection { get; }
    public bool IsEndOfDocument { get; }
    internal bool IsLastItem { get; internal set; }
    internal bool IsNeedToSkip { get; internal set; }
    internal bool IsTopMarginValueUpdated { get; internal set; }
    private int Syncfusion.Layouting.IWidgetContainer.Count { get; }
    private EntityCollection Syncfusion.Layouting.IWidgetContainer.WidgetInnerCollection { get; }
    private IWidget Syncfusion.Layouting.IWidgetContainer.Item { get; }
    protected IEntityCollectionBase WidgetCollection { get; }
    internal bool RemoveEmpty { get; internal set; }
    internal ParagraphItem LastItem { get; }
    internal IWParagraphStyle ParaStyle { get; internal set; }
    internal bool SectionEndMark { get; }
    internal bool IsTextReplaced { get; internal set; }
    internal bool IsAppendingHTML { get; internal set; }
    internal bool IsCreatedUsingHtmlSpanTag { get; internal set; }
    internal string InternalText { get; internal set; }
    public WParagraph(IWordDocument doc);
    internal bool get_HasSDTInlineItem();
    internal void set_HasSDTInlineItem(bool value);
    internal bool get_SplitWidgetContainerDrawn();
    internal void set_SplitWidgetContainerDrawn(bool value);
    internal bool get_IsStyleApplied();
    internal void set_IsStyleApplied(bool value);
    internal bool get_IsNeedToMeasureBookMarkSize();
    public virtual EntityType get_EntityType();
    public sealed virtual EntityCollection get_ChildEntities();
    public sealed virtual string get_StyleName();
    public sealed virtual string get_ListString();
    internal string get_ParaId();
    internal void set_ParaId(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual bool get_EnableStyleSeparator();
    public sealed virtual void set_EnableStyleSeparator(bool value);
    public sealed virtual ParagraphItem get_Item(int index);
    public sealed virtual ParagraphItemCollection get_Items();
    public sealed virtual WParagraphFormat get_ParagraphFormat();
    public sealed virtual WCharacterFormat get_BreakCharacterFormat();
    public sealed virtual WListFormat get_ListFormat();
    public sealed virtual bool get_IsInCell();
    internal bool get_IsFloatingItemsLayouted();
    internal void set_IsFloatingItemsLayouted(bool value);
    internal bool get_IsXpositionUpated();
    internal void set_IsXpositionUpated(bool value);
    internal bool get_HasParRTFTag();
    internal void set_HasParRTFTag(bool value);
    public sealed virtual bool get_IsEndOfSection();
    public sealed virtual bool get_IsEndOfDocument();
    internal bool get_IsLastItem();
    internal void set_IsLastItem(bool value);
    internal bool get_IsNeedToSkip();
    internal void set_IsNeedToSkip(bool value);
    internal bool get_IsTopMarginValueUpdated();
    internal void set_IsTopMarginValueUpdated(bool value);
    private sealed virtual override int Syncfusion.Layouting.IWidgetContainer.get_Count();
    private sealed virtual override EntityCollection Syncfusion.Layouting.IWidgetContainer.get_WidgetInnerCollection();
    private sealed virtual override IWidget Syncfusion.Layouting.IWidgetContainer.get_Item(int index);
    protected IEntityCollectionBase get_WidgetCollection();
    private bool IsNeedToAddEmptyTextRangeForBreakItem(Break breakItem);
    internal bool IsContainDinOffcFont();
    internal bool IsDinFontCreatable(string fontName, bool isDinFontOccur, FontScriptType scriptType);
    internal bool IsContainFloatingItems();
    internal bool IsLastItemBreak(Int32& index);
    internal bool get_RemoveEmpty();
    internal void set_RemoveEmpty(bool value);
    internal ParagraphItem get_LastItem();
    internal IWParagraphStyle get_ParaStyle();
    internal void set_ParaStyle(IWParagraphStyle value);
    internal bool get_SectionEndMark();
    internal bool get_IsTextReplaced();
    internal void set_IsTextReplaced(bool value);
    internal bool get_IsAppendingHTML();
    internal void set_IsAppendingHTML(bool value);
    internal bool get_IsCreatedUsingHtmlSpanTag();
    internal void set_IsCreatedUsingHtmlSpanTag(bool value);
    internal int GetHeadingLevel(WParagraphStyle style, WParagraph currParagraph);
    private void MoveParagraphItems(WParagraph targetParagraph, WParagraph sourceParagraph, int startIndex);
    internal bool IsNeedToFitSymbol(WParagraph ownerParagraph);
    internal bool HasInlineItem(int endIndex);
    internal void SplitTextRange();
    internal void InsertBreak(BreakType breakType);
    public sealed virtual void ApplyStyle(string styleName);
    internal void ApplyStyle(string styleName, bool isDomChanges);
    public sealed virtual void ApplyStyle(BuiltinStyle builtinStyle);
    internal void ApplyStyle(BuiltinStyle builtinStyle, bool isDomChanges);
    public sealed virtual IWParagraphStyle GetStyle();
    public sealed virtual void RemoveAbsPosition();
    internal bool IsExactlyRowHeight(WTableCell ownerTableCell, Single& rowHeight);
    internal bool IsExactlyRowHeight();
    public sealed virtual IWTextRange AppendText(string text);
    public sealed virtual IInlineContentControl AppendInlineContentControl(ContentControlType controlType);
    public sealed virtual IWPicture AppendPicture(Byte[] imageBytes);
    public sealed virtual IWPicture AppendPicture(Byte[] svgData, Byte[] imageBytes);
    public sealed virtual WChart AppendChart(Object[][] data, float width, float height);
    public sealed virtual WChart AppendChart(float width, float height);
    public sealed virtual WChart AppendChart(Stream excelStream, int sheetNumber, string dataRange, float width, float height);
    private void DetectExcelFileFromStream(Stream stream);
    public sealed virtual IWField AppendField(string fieldName, FieldType fieldType);
    public sealed virtual IWField AppendHyperlink(string link, string text, HyperlinkType type);
    public sealed virtual IWField AppendHyperlink(string link, WPicture picture, HyperlinkType type);
    public sealed virtual BookmarkStart AppendBookmarkStart(string name);
    public sealed virtual BookmarkEnd AppendBookmarkEnd(string name);
    internal EditableRangeEnd AppendEditableRangeEnd(string id);
    public sealed virtual WComment AppendComment(string text);
    public sealed virtual WFootnote AppendFootnote(FootnoteType type);
    public sealed virtual IWTextBox AppendTextBox(float width, float height);
    public sealed virtual WCheckBox AppendCheckBox();
    public sealed virtual WCheckBox AppendCheckBox(string checkBoxName, bool defaultCheckBoxValue);
    public sealed virtual WTextFormField AppendTextFormField(string defaultText);
    public sealed virtual WTextFormField AppendTextFormField(string formFieldName, string defaultText);
    public sealed virtual WDropDownFormField AppendDropDownFormField();
    public sealed virtual WDropDownFormField AppendDropDownFormField(string dropDropDownName);
    public sealed virtual WSymbol AppendSymbol(byte characterCode);
    public sealed virtual Break AppendBreak(BreakType breakType);
    public sealed virtual Shape AppendShape(AutoShapeType autoShapeType, float width, float height);
    public sealed virtual TableOfContent AppendTOC(int lowerHeadingLevel, int upperHeadingLevel);
    public sealed virtual void AppendCrossReference(ReferenceType referenceType, ReferenceKind referenceKind, Entity referenceEntity, bool insertAsHyperlink, bool includePosition, bool separatorNumber, string separatorString);
    public sealed virtual IWPicture AppendPicture(Stream imageStream);
    public sealed virtual void AppendHTML(string html);
    public sealed virtual WOleObject AppendOleObject(Stream oleStream, WPicture olePicture, OleObjectType type);
    public sealed virtual WOleObject AppendOleObject(Byte[] oleBytes, WPicture olePicture, OleObjectType type);
    public sealed virtual WOleObject AppendOleObject(Stream oleStream, WPicture olePicture, OleLinkType oleLinkType);
    public sealed virtual WOleObject AppendOleObject(Byte[] oleBytes, WPicture olePicture, OleLinkType oleLinkType);
    public sealed virtual WOleObject AppendOleObject(Byte[] oleBytes, WPicture olePicture, string fileExtension);
    public sealed virtual WOleObject AppendOleObject(Stream oleStream, WPicture olePicture, string fileExtension);
    public sealed virtual WMath AppendMath();
    public sealed virtual WMath AppendMath(string laTeX);
    internal Entity GetOwnerEntity();
    internal bool OmitHeadingStyles();
    internal bool IsInHeaderFooter();
    internal WParagraph GetFirstParagraphInOwnerTextbody(WTextBody textbody);
    internal WFieldMark AppendFieldMark(FieldMarkType type);
    internal Break AppendLineBreak(string lineBreakText);
    internal IWField AppendHyperlink(string link, string text, WPicture pict, HyperlinkType type);
    internal void LoadPicture(WPicture picture, ImageRecord imageRecord);
    internal IWField AppendIndexEntry(string entryToMark);
    internal WMergeField AppendMergeField(string fieldName);
    internal WListFormat GetListFormatValue();
    internal WListFormat GetListFormat(WListLevel& listLevel, Int32& tabLevelIndex, Nullable`1& leftIndent, Nullable`1& firstLineIndent);
    internal WListLevel GetListLevel(WListFormat listFormat, Int32& tabLevelIndex);
    internal string GetListText(bool isFromTextConverter, Boolean& isPicBullet);
    internal WListLevel GetListLevel(WListFormat listFormat);
    internal Single[] GetLeftRightMargindAndFirstLineIndent(WListFormat listformat, WListLevel level, WParagraphStyle paraStyle);
    internal bool IsZeroAutoLineSpace();
    internal bool IsLineNumbersEnabled();
    internal bool IsContainsInLineImage();
    public virtual TextSelection Find(Regex pattern);
    public sealed virtual TextSelection Find(string given, bool caseSensitive, bool wholeWord);
    public virtual int Replace(Regex pattern, string replace);
    public virtual int Replace(string given, string replace, bool caseSensitive, bool wholeWord);
    public virtual int Replace(Regex pattern, TextSelection textSelection);
    public virtual int Replace(Regex pattern, TextSelection textSelection, bool saveFormatting);
    public sealed virtual int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord);
    public sealed virtual int Replace(string given, TextSelection textSelection, bool caseSensitive, bool wholeWord, bool saveFormatting);
    internal int ReplaceFirst(string given, string replace, bool caseSensitive, bool wholeWord);
    internal int ReplaceFirst(Regex pattern, string replace);
    public sealed virtual WSection InsertSectionBreak();
    public sealed virtual WSection InsertSectionBreak(SectionBreakCode breakType);
    internal WSection GetOwnerSection();
    internal ParagraphItemCollection GetParagraphItems();
    internal void ClearItems();
    internal virtual TextSelectionList FindAll(Regex pattern, bool isDocumentComparison);
    internal TextSelectionList FindFirst(Regex pattern);
    internal void RemoveItems(int startIndex, bool toEnd);
    internal WParagraph CloneWithoutItems();
    internal IParagraphItem AppendItem(ParagraphItemType itemType);
    internal void UpdateText(WTextRange pItem, string newText, bool isRemove);
    internal void UpdateText(ParagraphItem pItem, int removeTextLength, string newText, bool isRemove);
    private void UpdateStartPosOfParaItems(ParagraphItem pItem, int offset);
    internal void ApplyStyle(IWParagraphStyle style, bool isDomChanges);
    internal bool IsTextContainsNonBreakingSpaceCharacter(string text);
    internal bool IsNonBreakingCharacterCombinedWithSpace(string text, int pos);
    internal int GetsTheIndexOfSpaceToSplit(string text, int index);
    internal void ApplyCharacterStyle(IWCharacterStyle style);
    internal void ReplaceWithoutCorrection(int start, int length, string replacement);
    internal virtual void AddSelf();
    private void ApplyDuplicateStyleFormatting(WordDocument destDocument);
    private List`1<int> GetListParaFormatProperties();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    private bool IsNeedToRemoveItems(Entity baseEntity, ParagraphItem item);
    private bool IsNeedToAddFloatingItemsCollection(Entity entity);
    private void UpdateMergeFormatting(WordDocument doc);
    private void UpdateSourceFormatting(WordDocument doc);
    private void CloneStyleRelations(WordDocument doc);
    internal void ImportStyle(IWParagraphStyle style);
    protected virtual object CloneImpl();
    private WParagraph CloneParagraph(bool cloneItems);
    internal string GetParagraphText(bool isLastPargraph);
    internal bool HasNonHiddenPara();
    internal bool IsPreviousParagraphMarkIsHidden();
    internal bool IsPerviousHiddenPara(IEntity prevsibling);
    internal bool IsPreviousParagraphMarkIsInDeletion(IEntity& prevEntity);
    internal bool IsPreviousParaInDeletion(IEntity prevsibling);
    internal bool GetNextNonDeleteRevisionListParagraph(IEntity& nextListPara);
    private bool IsParagraphMarkDeleted();
    internal IEntity GetPreviousOrNextNonDeleteRevisionEntity(bool isPrevious);
    private bool IsPreviousParagraphHasContent(IEntity prevsibling);
    internal string GetText(int startIndex, int endIndex);
    private void ApplyBaseStyleFormats();
    internal bool IsEmptyParagraph();
    private void ApplyListStyle(BuiltinStyle builtinStyle);
    private void CheckNormalStyle();
    internal virtual void Close();
    internal void ApplyListParaStyle();
    internal FieldType GetLastFieldType();
    internal WField GetLastField();
    internal WTableCell GetOwnerTableCell(WTextBody Owner);
    private void CreateEmptyParagraph();
    internal bool IsParagraphHasSectionBreak();
    private bool IsSectionEndMark();
    private string ModifyText(string text);
    internal void UpdateBookmarkEnd(ParagraphItem item, WParagraph paragraphStart, bool isAddItem);
    internal bool IsAtleastFrameHeight();
    internal virtual void MakeChanges(bool acceptChanges);
    internal virtual void RemoveCFormatChanges();
    internal virtual void RemovePFormatChanges();
    internal virtual void AcceptCChanges();
    internal virtual void AcceptPChanges();
    internal virtual bool CheckChangedPFormat();
    internal virtual bool CheckInsertRev();
    internal virtual bool CheckDeleteRev();
    internal virtual bool CheckChangedCFormat();
    internal bool CheckOnRemove();
    internal virtual bool HasTrackedChanges();
    internal virtual void SetDeleteRev(bool check);
    internal virtual void SetInsertRev(bool check);
    internal virtual void SetChangedCFormat(bool check);
    internal virtual void SetChangedPFormat(bool check);
    internal bool IsOnlyHasSpaces();
    private bool IsParagraphContainsOnlyTextRange();
    internal virtual TextBodyItem GetNextTextBodyItemValue();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void InitXDLSHolder();
    protected virtual void RestoreReference(string name, int index);
    internal bool HasNoRenderableItem();
    internal bool HasRenderableItemFromIndex(int pItemIndex);
    internal Entity GetOwnerBaseEntity(Entity entity);
    internal bool IsFirstLine(LayoutedWidget ltWidget);
    internal void RemoveSplitStringWidget();
    internal IWidget GetPreviousSibling(IWidget widget);
    internal IWidget GetPreviousInlineItems(IWidget widget);
    internal bool IsLastLine(LayoutedWidget ltWidget);
    internal IWidget GetNextSibling(IWidget widget);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    protected virtual void CreateLayoutInfo();
    private void UpdateCharacterSpacingForFitTextAppliedTableCell();
    private void UpdateCharacterSpacingOrScaling(float contentWidth, int totalTextLength, WTableCell tableCell);
    private void SplitLastCharacterAsNewTextRange(WTextRange& lastTextRange);
    internal bool IsDeletionParagraph();
    internal bool IsPreviousParagraphInDeleteRevision();
    private void CombineconsecutiveRTL(ParagraphItemCollection paraItems);
    private bool IsParagraphContainsOnlyBookMarks();
    private void SplitTextRangeByScriptType(ParagraphItemCollection paraItems, TextSplitter splitter);
    private void SplitLtrAndRtlText(ParagraphItemCollection paraItems, TextSplitter splitter);
    private bool IsRightToLeftLang(short id);
    internal string GetDisplayText(ParagraphItemCollection ParagraphItems);
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal bool IsVerticalText();
    private bool IsHiddenParagraph();
    private void SplitByLineBreak(ParagraphItemCollection paraItems);
    internal bool IsFirstParagraphOfOwnerTextBody();
    internal bool IsFirstParagraphOfTextBody(Entity ownerBaseEntity, Entity childEntity);
    private bool IsSkipCellMark();
    internal float GetHeight(WParagraph paragraph, ParagraphItem paraItem);
    internal float GetSize(ParagraphItem paraItem, float height);
    internal bool IsAdjacentParagraphHaveSameBorders(WParagraph adjacentParagraph, float currentParaLeftIndent);
    internal bool IsSameAdjacentBorder(Border border, Border adjacentBorder);
    internal bool IsSameLeftIndent(WParagraph adjacentParagrph, float firstParaLeftPosition);
    internal bool IsParagraphBeforeSpacingNeedToSkip();
    internal double GetDefaultTabWidth();
    internal bool StartsWithExt(string text, string value);
    internal void GetMinimumAndMaximumWordWidth(Single& minimumWordWidth, Single& maximumWordWidth, Single& paragraphWidth, bool needtoCalculateParaWidth);
    internal float GetParagraphWidth();
    private float GetParaItemsWidth(ParagraphItemCollection paraItems);
    internal string get_InternalText();
    internal void set_InternalText(string value);
    internal void CompareParagraphFormats(WParagraph revisedParagraph);
    private void CompareMatchedTextFormatting(TextSelection selection, Int32& startRangeIndex, Int32& endRangeIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& orgParaItemIndex);
    private void CompareMultipleTextRange(TextSelection selection, Int32& startRangeIndex, Int32& endRangeIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& orgParaItemIndex);
    private void SplitOrgAndRevMatchedText(TextSelection selection, Int32& startRangeIndex, Int32& endRangeIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& orgParaItemIndex);
    private void CompareCharacterFormat(WCharacterFormat orgCharFormat, WCharacterFormat revCharFormat);
    private void CompareFormatting(bool matched, Boolean& firstMatchInPara, WordDocument originalDocument, WTextBody originalTextbody, int textRangeIndex, TextSelection matchedText, Int32& startRangeIndex, Int32& endRangeIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& orgParaItemIndex);
    private void CompareParaFormattingForDelimiter(Boolean& firstMatchInPara, WParagraph orgParagraph);
    internal bool CompareParagraphFormat(WParagraph paragraph);
    private void ApplyParaFormatChange(WParagraph orgParagraph);
    private string GetStyleNameId(string styleName, WordDocument document);
    private void UpdateBodyItemIndex(int textStartIndex, int textEndIndex, int paraItemIndex, WTextBody textBody);
    internal virtual void Compare(WordDocument originalDocument);
    private void IsNeedToMarkInsDel(WordDocument originalDocument, Boolean& isNeedToMarkInsertion, Boolean& isNeedToMarkDeletion, int revparaItemIndex, int orgMatchedSecIndex, int orgMatchedBodyItemIndex, int orgMatchedParaItemIndex, WTextBody orgTextBody);
    private void AddSkippedBookmarks(WordDocument originalDocument, Dictionary`2& skippedBookmarks, TextSelection matchedText);
    private void CompareNonRenderableItems(WordDocument originalDocument, WTextBody orgTextBody, Int32& paraItemIndex, int startRangeIndex);
    private void CheckRevBkmkInOrgDoc(WordDocument originalDocument, WTextBody textBody, string bkmkName);
    private void ResetParaItemIndex(WordDocument originalDocument, WTextBody orgTextBody, int startOwnerParaIndex, int endOwnerParaIndex, int startIndex, int endIndex);
    private void SplitBothOrgAndRevText(Int32& textStartIndex, Int32& startRangeIndex, Int32& paraItemIndex, Int32& textIndex, Int32& textEndIndex, string wordToMatch, WordDocument originalDocument, WTextBody orgTextBody);
    private void SplitTextRanges(WordDocument originalDocument, TextSelection matchedText, bool isLastWordMatched, Int32& textStartIndex, Int32& startRangeIndex, Int32& paraItemIndex, Int32& textIndex, Int32& textEndIndex, string wordToMatch, WTextBody orgTextBody);
    private void InsertionAndDeletion(WordDocument originalDocument, bool isNeedToMarkInsertion, bool isNeedToMarkDeletion, TextSelection matchedText, int startRangeIndex);
    private void CompareEmptyParagraphs(WordDocument orgDoc, WTextBody orgTextBody);
    private void ComparePreviousEmptyParagraphs(WordDocument orgDoc, WTextBody orgTextBody);
    private void CompareWithCurrentItemOnly(WordDocument originalDocument, Int32& paraItemIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& textIndex, Boolean& isLastWordMatched, Int32& startRangeIndex, WTextBody originalTextBody);
    private ParagraphItem GetCurrParaItem(WordDocument document, WTextBody textBody);
    private void UpdateNextRevDocIndex(Int32& paraItemIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& textIndex, Int32& startRangeIndex, WTextBody revTextBody);
    private string GetFieldCodeString(WField field);
    private void CompareField(WordDocument orgDoc, Int32& revParaItemIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& textIndex, Boolean& isLastWordMatched, Int32& startRangeIndex, WTextBody originalTextBody);
    private WField FindFieldInOrgDoc(Comparison comparison, Int32& index, ParagraphItem revParaItem);
    private void CompareFieldCodeFormatting(ParagraphItem orgParaItem, ParagraphItem revParaItem);
    private WordDocument GetResultDocPartFromField(WordDocument document, WTextBody textBody, ParagraphItem paraItem);
    private void ClearHeadersAndFooters(WordDocument document);
    private void CompareFieldResult(WordDocument orgDoc, WordDocument revDoc, WTextBody orgTextBody, WTextBody revTextBody, ParagraphItem orgParaItem, ParagraphItem revParaItem);
    private void CompareInlineCCItems(WordDocument orgDoc, WordDocument revDoc, InlineContentControl orgInlineCC, InlineContentControl revInlineCC);
    private WordDocument GetDocFromInlineCC(WordDocument document, InlineContentControl inlineCC);
    private void MoveFieldItemsToOrg(ParagraphItem orgParaItem, ParagraphItem revParaItem, WordDocument orgDoc, WordDocument revDoc);
    private void RemoveFieldBeginToFieldSep(ParagraphItem orgParaItem);
    private void CompareContainerElements(WordDocument orgDoc, Int32& revParaItemIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& textIndex, Boolean& isLastWordMatched, Int32& startRangeIndex, WTextBody originalTextbody);
    private void MarkRevForParagraphItem(WordDocument orgDoc, ParagraphItem orgParaItem, ParagraphItem revItem, bool isMatchedItem, int startRangeIndex, int revParaItemIndex, WTextBody originalTextBody);
    private void CompareOleObject(WordDocument orgDoc, Int32& revParaItemIndex, Boolean& isLastWordMatched, Int32& startRangeIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& textIndex, WTextBody originalTextBody);
    private void MarkRevForOle(WordDocument orgDoc, WTextBody originalTextBody, ParagraphItem orgParaItem, WField orgItemField, WField revItemField, int startRangeIndex, int revParaItemIndex, bool isMatchedItem);
    private void InsertAndDeleteUnmatchedItems(WordDocument orgDoc, ParagraphItem paraItem, int startRangeIndex, int revParaItemIndex, WTextBody originalTextbody);
    private void MoveCurrPosition(WordDocument document, int doc1ParaItemIndex, int doc1BodyItemIndex, int doc1MatchParaItemCount, int doc2ParaItemIndex, int doc2MatchParaItemCount, WTextBody textBody);
    private void SplitRevisedDocumentText(Int32& textStartIndex, Int32& startRangeIndex, Int32& paraItemIndex, Int32& textIndex, Int32& textEndIndex, string wordToMatch, bool isTextBody);
    private void SplitOriginalDocumentText(WordDocument originalDocument);
    private void CopyIndexesFromDoc(WordDocument originalDocument, WTextBody textBody);
    private void CopyIndexesFromTextBody(WordDocument originalDocument, WTextBody textBody);
    private void SplitOriginalTextBodyText(WTextBody textBody);
    private void SplitText(Int32& textStartIndex, Int32& textEndIndex, Int32& paraItemIndex, Int32& startRangeIndex, Int32& textIndex);
    private int FindMatchingWordFromSelection(TextSelection[] matches, int sectionIndex, int bodyItemIndex, int paraItemIndex, int lastMatchedPositionIndex);
    private void InsertParagraphItems(TextSelection matchedText, WordDocument originalDocument, int revParaItemIndex);
    internal void Insertion(WordDocument originalDocument, int currRevParaItemIndex, int orgCurrMatchParaItemIndex, int orgCurrMatchBodyItemIndex, int orgCurrMatchSecIndex, WTextBody orgTextBody);
    internal WParagraph AppendTextToParagraphEnd(WordDocument originalDocument, WParagraph bkmkStartParagraph, WTextBody originalTextBody);
    internal virtual void AddInsMark();
    internal virtual void AddDelMark();
    internal void RemoveDelMark();
    internal void RemoveInsMark();
    private void DeleteItems(WordDocument originalDocument, int startSecIndex, int endSecIndex, int startBodyItemIndex, int endBodyItemIndex);
    internal void UpdateParagraphRevision(WParagraph paragraph, bool isIncludeParaItems);
    internal void ApplyInsRevision(WParagraph paragraph, int startIndex, int endIndex);
    internal void ApplyInsRevision(ParagraphItem item);
    private void AddDeleteRevisonMark(TextSelection matchedRange, WordDocument originalDocument, Boolean& IsNeedToInsert);
    private void AddDeleteRevisionMark(WordDocument originalDocument, WordDocument revisedDocument, int endSecIndex, int endBodyItemIndex, int endParaItemIndex, Boolean& isNeedToInsert, WTextBody originalTextBody);
    private void AddDeleteRevisionMarkInTextBody(WTextBody textBody, int endBodyItemIndex, int endParaItemIndex);
    internal void ApplyDelRevision(WParagraph paragraph, int startIndex, int endIndex);
    internal void ApplyDelRevision(ParagraphItem paraItem);
    internal bool CheckParaItem(ParagraphItem item);
    internal string GetNextWord(Int32& paraItemIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& startRangeIndex, Int32& endRangeIndex, Int32& wordIndex, Dictionary`2& skippedBookmarks);
    private void SkipPrevNonRenderableItems(Int32& paraItemIndex, Int32& wordIndex, Int32& textEndIndex, Char[] delimiters);
    internal bool IsNonRenderableItem(ParagraphItem item);
    internal bool IsParaHasOnlyBookmark();
    internal bool IsSpecialDelimeter(char delimiter);
    private bool CheckForDelimiter(TextSelection matchedText, WTextRange& originalText, Char& original, Int32& i);
    internal bool CheckPreviousRange(WTextRange& originalText, Char& original, Int32& i, int itemIndex);
    internal void CompareSpecialDelimiterWithPreviousText(TextSelection matchedText, int paraItemIndex, int textStartIndex);
    private void CheckPreviousRange(WTextRange originalText, WTextRange revisedText, int i);
    private void CompareSpaces(WTextRange originalText, WTextRange revisedText, Boolean& isNotMatched);
    private string GetCharacters(WTextRange text);
    internal void Compare(WTextBody orgTextBody);
    private void CompareTextranges(WordDocument originalDocument, string wordToMatch, Int32& paraItemIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& wordIndex, Boolean& isLastWordMatched, Int32& startRangeIndex, Int32& endRangeIndex, Boolean& firstMatchInPara, Dictionary`2& skippedBookmarks, Boolean& hasMatch, WTextBody orgTextBody);
    private bool HasOnlyComment(WParagraph para, Int32& itemIndex);
    internal void SplitUnmatchedTextAndMoveParaItemIndex(WParagraph lastMatchedParagraph, Int32& paraItemIndex, Int32& textStartCutIndex, Int32& textEndCutIndex);
    internal void CompareSpecialDelimeters(WordDocument originalDocument, string wordToMatch, Int32& paraItemIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& wordIndex, Boolean& isLastWordMatched, Int32& startRangeIndex, Boolean& firstMatchInPara, WTextBody originalTextBody);
    private ParagraphItem SkipNonRenderableItems(WordDocument originalDocument, WParagraph paragraph, WTextBody orgTextBody);
    private WTextRange SplitSeparateTextrangeForDelimiter(WTextRange textRange, char delimiter, Int32& currRangeIndex, WParagraph paragraph, int delimiterIndex);
    private void SplitTextBasedOnDelimiter(WordDocument originalDocument, Int32& paraItemIndex, Int32& textStartIndex, Int32& textEndIndex, Int32& textIndex, Int32& startRangeIndex, WTextRange endRange, char space, WParagraph paragraph, WTextBody originalTextBody);
    private void SkipParaItemIndexForBookmarks(WParagraph paragraph, Int32& paraItemIndex);
    internal void SkipBookmarks(WParagraph paragraph, Int32& paraItemIndex);
    internal StringBuilder GetAsString(ParagraphItemCollection collection);
    internal StringBuilder GetAsString(ParagraphItem item);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WParagraphCollection : EntitySubsetCollection {
    public WParagraph Item { get; }
    internal ITextBody OwnerTextBody { get; }
    public WParagraphCollection(BodyItemCollection bodyItems);
    public sealed virtual WParagraph get_Item(int index);
    internal ITextBody get_OwnerTextBody();
    public sealed virtual int Add(IWParagraph paragraph);
    public bool Contains(IWParagraph paragraph);
    public sealed virtual void Insert(int index, IWParagraph paragraph);
    public sealed virtual int IndexOf(IWParagraph paragraph);
    public void Remove(IWParagraph paragraph);
    public sealed virtual void RemoveAt(int index);
}
public class Syncfusion.DocIO.DLS.WParagraphFormat : FormatBase {
    internal static short HrAlignmentKey;
    internal static short LeftIndentKey;
    internal static short RightIndentKey;
    internal static short FirstLineIndentKey;
    internal static short KeepKey;
    internal static short BeforeSpacingKey;
    internal static short AfterSpacingKey;
    internal static short KeepFollowKey;
    internal static short WidowControlKey;
    internal static short BeforeLinesKey;
    internal static short AfterLinesKey;
    internal static short PageBreakBeforeKey;
    internal static short PageBreakAfterKey;
    internal static short BordersKey;
    internal static short BackColorKey;
    internal static short BackGroundColorKey;
    internal static short ColumnBreakAfterKey;
    internal static short TabsKey;
    internal static short BidiKey;
    internal static short ForeColorKey;
    internal static short TextureStyleKey;
    internal static short DataKey;
    internal static short AdjustRightIndentKey;
    internal static short AutoSpaceDEKey;
    internal static short AutoSpaceDNKey;
    internal static short LineSpacingKey;
    internal static short LineSpacingRuleKey;
    internal static short SpacingBeforeAutoKey;
    internal static short SpacingAfterAutoKey;
    internal static short OutlineLevelKey;
    internal static short LeftBorderKey;
    internal static short RightBorderKey;
    internal static short TopBorderKey;
    internal static short BottomBorderKey;
    internal static short LeftBorderNewKey;
    internal static short RightBorderNewKey;
    internal static short TopBorderNewKey;
    internal static short BottomBorderNewKey;
    internal static short BetweenBorderKey;
    internal static short BarBorderKey;
    internal static short BetweenBorderNewKey;
    internal static short BarBorderNewKey;
    internal static short ChangedFormatKey;
    internal static short ContextualSpacingKey;
    internal static short FrameHorizontalPositionKey;
    internal static short FrameVerticalPositionKey;
    internal static short FrameXKey;
    internal static short FrameYKey;
    internal static short FrameWidthKey;
    internal static short FrameHeightKey;
    internal static short FrameHorizontalDistanceFromTextKey;
    internal static short FrameVerticalDistanceFromTextKey;
    internal static short WrapFrameAroundKey;
    internal static short SuppressAutoHyphensKey;
    internal static short MirrorIndentsKey;
    internal static short LeftIndentCharsKey;
    internal static short FirstLineIndentCharsKey;
    internal static short RightIndentCharsKey;
    internal static short WordWrapKey;
    internal static short BaseLineAlignmentKey;
    internal static short SnapToGridKey;
    internal static short SuppressOverlapKey;
    internal static short TextBoxTightWrapKey;
    internal static short SuppressLineNumbersKey;
    internal static short LockFrameAnchorKey;
    internal static short KinsokuKey;
    internal static short OverflowPunctuationKey;
    internal static short TopLinePunctuationKey;
    internal static short DropCapKey;
    internal static short DropCapLinesKey;
    internal static short FrameTextDirectionKey;
    internal static short FormatChangeDateTimeKey;
    internal static short FormatChangeAuthorNameKey;
    internal static short ParagraphStyleNameKey;
    private WParagraphFormat m_tableStyleParagraphFormat;
    private byte m_bFlags;
    internal WAbsoluteTab m_absoluteTab;
    private Dictionary`2<string, Stream> m_xmlProps;
    private bool CancelOnChange { get; private set; }
    internal bool WordWrap { get; internal set; }
    internal WAbsoluteTab AbsoluteTab { get; internal set; }
    internal float FirstLineIndentChars { get; internal set; }
    internal float LeftIndentChars { get; internal set; }
    internal float RightIndentChars { get; internal set; }
    public bool Bidi { get; public set; }
    public TabCollection Tabs { get; }
    public bool Keep { get; public set; }
    public bool KeepFollow { get; public set; }
    public bool PageBreakBefore { get; public set; }
    public bool PageBreakAfter { get; public set; }
    public bool WidowControl { get; public set; }
    internal bool AutoSpaceDN { get; internal set; }
    internal bool AutoSpaceDE { get; internal set; }
    internal bool AdjustRightIndent { get; internal set; }
    public HorizontalAlignment HorizontalAlignment { get; public set; }
    internal HorizontalAlignment LogicalJustification { get; internal set; }
    public float LeftIndent { get; public set; }
    public float RightIndent { get; public set; }
    public float FirstLineIndent { get; public set; }
    public float BeforeSpacing { get; public set; }
    internal float BeforeLines { get; internal set; }
    internal float AfterLines { get; internal set; }
    public float AfterSpacing { get; public set; }
    public Borders Borders { get; }
    public Color BackColor { get; public set; }
    internal Color BackGroundColor { get; internal set; }
    public bool ColumnBreakAfter { get; public set; }
    public float LineSpacing { get; public set; }
    public LineSpacingRule LineSpacingRule { get; public set; }
    internal Color ForeColor { get; internal set; }
    internal TextureStyle TextureStyle { get; internal set; }
    public bool SpaceBeforeAuto { get; public set; }
    public bool SpaceAfterAuto { get; public set; }
    public OutlineLevel OutlineLevel { get; public set; }
    internal bool IsFrame { get; }
    internal byte FrameVerticalPos { get; internal set; }
    internal byte FrameVerticalAnchor { get; }
    internal byte FrameHorizontalPos { get; internal set; }
    internal float FrameX { get; internal set; }
    internal float FrameY { get; internal set; }
    internal float FrameWidth { get; internal set; }
    internal float FrameHeight { get; internal set; }
    internal float FrameHorizontalDistanceFromText { get; internal set; }
    internal float FrameVerticalDistanceFromText { get; internal set; }
    internal FrameWrapMode WrapFrameAround { get; internal set; }
    internal bool IsChangedFormat { get; internal set; }
    public bool ContextualSpacing { get; public set; }
    internal WParagraphFormat TableStyleParagraphFormat { get; internal set; }
    public bool MirrorIndents { get; public set; }
    public bool SuppressAutoHyphens { get; public set; }
    internal BaseLineAlignment BaseLineAlignment { get; internal set; }
    internal bool SnapToGrid { get; internal set; }
    internal bool SuppressOverlap { get; internal set; }
    internal TextboxTightWrapOptions TextboxTightWrap { get; internal set; }
    internal bool SuppressLineNumbers { get; internal set; }
    internal bool LockFrameAnchor { get; internal set; }
    internal bool Kinsoku { get; internal set; }
    internal bool OverflowPunctuation { get; internal set; }
    internal bool TopLinePunctuation { get; internal set; }
    internal DropCapType DropCap { get; internal set; }
    internal int DropCapLines { get; internal set; }
    internal byte TextDirection { get; internal set; }
    internal Dictionary`2<string, Stream> XmlProps { get; }
    internal DateTime FormatChangeDateTime { get; internal set; }
    internal string FormatChangeAuthorName { get; internal set; }
    internal string ParagraphStyleName { get; internal set; }
    public WParagraphFormat(IWordDocument document);
    private bool get_CancelOnChange();
    private void set_CancelOnChange(bool value);
    internal bool get_WordWrap();
    internal void set_WordWrap(bool value);
    internal WAbsoluteTab get_AbsoluteTab();
    internal void set_AbsoluteTab(WAbsoluteTab value);
    internal float get_FirstLineIndentChars();
    internal void set_FirstLineIndentChars(float value);
    internal float get_LeftIndentChars();
    internal void set_LeftIndentChars(float value);
    internal float get_RightIndentChars();
    internal void set_RightIndentChars(float value);
    public bool get_Bidi();
    public void set_Bidi(bool value);
    public TabCollection get_Tabs();
    public bool get_Keep();
    public void set_Keep(bool value);
    public bool get_KeepFollow();
    public void set_KeepFollow(bool value);
    public bool get_PageBreakBefore();
    public void set_PageBreakBefore(bool value);
    public bool get_PageBreakAfter();
    public void set_PageBreakAfter(bool value);
    public bool get_WidowControl();
    public void set_WidowControl(bool value);
    internal bool get_AutoSpaceDN();
    internal void set_AutoSpaceDN(bool value);
    internal bool get_AutoSpaceDE();
    internal void set_AutoSpaceDE(bool value);
    internal bool get_AdjustRightIndent();
    internal void set_AdjustRightIndent(bool value);
    public HorizontalAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(HorizontalAlignment value);
    internal HorizontalAlignment get_LogicalJustification();
    internal void set_LogicalJustification(HorizontalAlignment value);
    public float get_LeftIndent();
    public void set_LeftIndent(float value);
    public float get_RightIndent();
    public void set_RightIndent(float value);
    public float get_FirstLineIndent();
    public void set_FirstLineIndent(float value);
    public float get_BeforeSpacing();
    public void set_BeforeSpacing(float value);
    internal float get_BeforeLines();
    internal void set_BeforeLines(float value);
    internal float get_AfterLines();
    internal void set_AfterLines(float value);
    public float get_AfterSpacing();
    public void set_AfterSpacing(float value);
    public Borders get_Borders();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    internal Color get_BackGroundColor();
    internal void set_BackGroundColor(Color value);
    public bool get_ColumnBreakAfter();
    public void set_ColumnBreakAfter(bool value);
    public float get_LineSpacing();
    public void set_LineSpacing(float value);
    public LineSpacingRule get_LineSpacingRule();
    public void set_LineSpacingRule(LineSpacingRule value);
    internal Color get_ForeColor();
    internal void set_ForeColor(Color value);
    internal TextureStyle get_TextureStyle();
    internal void set_TextureStyle(TextureStyle value);
    public bool get_SpaceBeforeAuto();
    public void set_SpaceBeforeAuto(bool value);
    public bool get_SpaceAfterAuto();
    public void set_SpaceAfterAuto(bool value);
    public OutlineLevel get_OutlineLevel();
    public void set_OutlineLevel(OutlineLevel value);
    internal bool get_IsFrame();
    internal byte get_FrameVerticalPos();
    internal void set_FrameVerticalPos(byte value);
    internal byte get_FrameVerticalAnchor();
    internal byte get_FrameHorizontalPos();
    internal void set_FrameHorizontalPos(byte value);
    internal float get_FrameX();
    internal void set_FrameX(float value);
    internal float get_FrameY();
    internal void set_FrameY(float value);
    internal float get_FrameWidth();
    internal void set_FrameWidth(float value);
    internal float get_FrameHeight();
    internal void set_FrameHeight(float value);
    internal float get_FrameHorizontalDistanceFromText();
    internal void set_FrameHorizontalDistanceFromText(float value);
    internal float get_FrameVerticalDistanceFromText();
    internal void set_FrameVerticalDistanceFromText(float value);
    internal FrameWrapMode get_WrapFrameAround();
    internal void set_WrapFrameAround(FrameWrapMode value);
    internal bool get_IsChangedFormat();
    internal void set_IsChangedFormat(bool value);
    public bool get_ContextualSpacing();
    public void set_ContextualSpacing(bool value);
    internal WParagraphFormat get_TableStyleParagraphFormat();
    internal void set_TableStyleParagraphFormat(WParagraphFormat value);
    public bool get_MirrorIndents();
    public void set_MirrorIndents(bool value);
    public bool get_SuppressAutoHyphens();
    public void set_SuppressAutoHyphens(bool value);
    internal BaseLineAlignment get_BaseLineAlignment();
    internal void set_BaseLineAlignment(BaseLineAlignment value);
    internal bool get_SnapToGrid();
    internal void set_SnapToGrid(bool value);
    internal bool get_SuppressOverlap();
    internal void set_SuppressOverlap(bool value);
    internal TextboxTightWrapOptions get_TextboxTightWrap();
    internal void set_TextboxTightWrap(TextboxTightWrapOptions value);
    internal bool get_SuppressLineNumbers();
    internal void set_SuppressLineNumbers(bool value);
    internal bool get_LockFrameAnchor();
    internal void set_LockFrameAnchor(bool value);
    internal bool get_Kinsoku();
    internal void set_Kinsoku(bool value);
    internal bool get_OverflowPunctuation();
    internal void set_OverflowPunctuation(bool value);
    internal bool get_TopLinePunctuation();
    internal void set_TopLinePunctuation(bool value);
    internal DropCapType get_DropCap();
    internal void set_DropCap(DropCapType value);
    internal int get_DropCapLines();
    internal void set_DropCapLines(int value);
    internal byte get_TextDirection();
    internal void set_TextDirection(byte value);
    internal Dictionary`2<string, Stream> get_XmlProps();
    internal DateTime get_FormatChangeDateTime();
    internal void set_FormatChangeDateTime(DateTime value);
    internal string get_FormatChangeAuthorName();
    internal void set_FormatChangeAuthorName(string value);
    internal string get_ParagraphStyleName();
    internal void set_ParagraphStyleName(string value);
    internal bool IsContainFrameKey();
    internal bool IsInFrame();
    internal bool IsFrameXAlign(float xPosition);
    internal bool IsFrameYAlign(float yPosition);
    private object GetPropertyValue(int propKey);
    private bool ContainsBordersSprm();
    internal object GetSpacingValue(int key);
    internal object GetParagraphFormat(int key);
    internal void SetPropertyValue(int propKey, object value);
    internal void ChangeTabs(TabCollection tabs);
    internal void CreateTabsCol();
    internal bool ContainsValue(int key);
    internal bool IsPreviousParagraphInSameFrame();
    internal bool IsNextParagraphInSameFrame();
    internal bool IsInSameFrame(WParagraphFormat paraFormat);
    internal void SetDefaultProperties();
    internal bool IsBuiltInHeadingStyle(string styleName);
    private OutlineLevel GetOutLineLevelForHeadingStyle(string styleName);
    protected internal virtual void EnsureComposites();
    protected virtual object GetDefValue(int key);
    protected virtual FormatBase GetDefComposite(int key);
    protected internal void ImportContainer(FormatBase format);
    private void ImportXmlProps(WParagraphFormat format);
    protected virtual void ImportMembers(FormatBase format);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void InitXDLSHolder();
    internal virtual void AcceptChanges();
    internal virtual void RemovePositioning();
    internal virtual void ApplyBase(FormatBase baseFormat);
    internal virtual void Close();
    internal virtual bool HasValue(int propertyKey);
    internal bool HasValueWithParent(int propertyKey);
    internal bool HasBorder();
    internal HorizontalAlignment GetAlignmentToRender();
    internal bool HasShading();
    internal virtual int GetSprmOption(int propertyKey);
    internal void UpdateJustification(SinglePropertyModifierArray sprms, SinglePropertyModifierRecord sprmPJc);
    internal void UpdateBiDi(bool value);
    internal void UpdateTabs(SinglePropertyModifierArray sprms);
    internal void UpdateOldFormatBorders(Borders& borders);
    internal BorderCode GetBorder(SinglePropertyModifierRecord record);
    internal void UpdateSourceFormat(WParagraphFormat destBaseFormat);
    internal void UpdateSourceFormatting(WParagraphFormat format);
    private void CompareListFormat(WParagraphFormat format);
    internal void NestedParaFormatting(WParagraphFormat format);
    private bool IsValueDefined(int key);
    private void RemoveValue(int key);
    public virtual void ClearFormatting();
    internal void SetFrameHorizontalDistanceFromTextValue(float value);
    internal void SetFrameVerticalDistanceFromTextValue(float value);
    internal void SetFrameYValue(float value);
    internal void SetFrameXValue(float value);
    internal void SetFrameWidthValue(float value);
    internal bool Compare(WParagraphFormat paragraphFormat);
}
public class Syncfusion.DocIO.DLS.WParagraphStyle : Style {
    protected WParagraphFormat m_prFormat;
    protected WListFormat m_listFormat;
    private int m_listIndex;
    private int m_listLevel;
    public WParagraphFormat ParagraphFormat { get; }
    public WParagraphStyle BaseStyle { get; }
    public StyleType StyleType { get; }
    public WListFormat ListFormat { get; }
    internal int ListIndex { get; internal set; }
    internal int ListLevel { get; internal set; }
    public WParagraphStyle(IWordDocument doc);
    public sealed virtual WParagraphFormat get_ParagraphFormat();
    public WParagraphStyle get_BaseStyle();
    public virtual StyleType get_StyleType();
    public WListFormat get_ListFormat();
    internal int get_ListIndex();
    internal void set_ListIndex(int value);
    internal int get_ListLevel();
    internal void set_ListLevel(int value);
    public virtual void ApplyBaseStyle(string styleName);
    public virtual IStyle Clone();
    internal virtual bool Compare(Style style);
    internal virtual void ApplyBaseStyle(Style baseStyle);
    internal WListFormat GetListFormatIncludeBaseStyle();
    internal int GetListLevelNumberIncludeBaseStyle(WParagraphStyle& levelNumberStyle);
    protected virtual object CloneImpl();
    private sealed virtual override void Syncfusion.DocIO.DLS.IWParagraphStyle.Close();
    internal virtual void Close();
    internal virtual bool CompareStyleBetweenDocuments(Style style);
    private void AddDefaultFormat(WCharacterFormat characterFormat, WParagraphFormat paragraphFormat);
    protected virtual void InitXDLSHolder();
}
public class Syncfusion.DocIO.DLS.WPicture : ParagraphItem {
    private float m_rotation;
    internal SizeF m_size;
    private float m_widthScale;
    private float m_heightScale;
    private HorizontalOrigin m_horizontalOrigin;
    private ShapePosition m_shapePosition;
    private VerticalOrigin m_verticalOrigin;
    private float m_horizPosition;
    private TileRectangle m_fillRectable;
    private float m_vertPosition;
    private float m_DistanceFromBottom;
    private float m_DistanceFromLeft;
    private float m_DistanceFromRight;
    private float m_DistanceFromTop;
    private TextWrappingStyle m_wrappingStyle;
    private TextWrappingType m_wrappingType;
    private ShapeHorizontalAlignment m_horAlignment;
    private ShapeVerticalAlignment m_vertAlignment;
    private int m_spid;
    private InlineShapeObject m_inlinePictureShape;
    internal List`1<Stream> m_docxProps;
    internal List`1<Stream> m_docxVisualShapeProps;
    private List`1<Stream> m_signatureLineElements;
    private string m_altText;
    private string m_name;
    private string m_title;
    private WTextBody m_embedBody;
    private int m_orderIndex;
    private ImageRecord m_imageRecord;
    internal short WrapCollectionIndex;
    private WrapPolygon m_wrapPolygon;
    private string m_href;
    private string m_ExternalLinkName;
    private string m_linktype;
    private ushort m_bFlags;
    private FillFormat m_fillFormat;
    private Color m_chromaKeyColor;
    private string m_oPictureHRef;
    private Byte[] m_svgImageData;
    private string m_svgExternalLinkName;
    internal TileRectangle FillRectangle { get; internal set; }
    internal bool HasBorder { get; }
    public EntityType EntityType { get; }
    public float Height { get; public set; }
    public float Rotation { get; public set; }
    public float Width { get; public set; }
    public float HeightScale { get; public set; }
    public float WidthScale { get; public set; }
    public bool LockAspectRatio { get; public set; }
    internal Image ImageForPartialTrustMode { get; }
    internal Image Image { get; }
    public Byte[] ImageBytes { get; }
    public Byte[] SvgData { get; internal set; }
    internal ImageRecord ImageRecord { get; }
    internal ShapePosition Position { get; internal set; }
    public HorizontalOrigin HorizontalOrigin { get; public set; }
    public VerticalOrigin VerticalOrigin { get; public set; }
    public float HorizontalPosition { get; public set; }
    public float VerticalPosition { get; public set; }
    internal float DistanceFromBottom { get; internal set; }
    internal float DistanceFromLeft { get; internal set; }
    internal float DistanceFromRight { get; internal set; }
    internal float DistanceFromTop { get; internal set; }
    public TextWrappingStyle TextWrappingStyle { get; public set; }
    public TextWrappingType TextWrappingType { get; public set; }
    public ShapeHorizontalAlignment HorizontalAlignment { get; public set; }
    public ShapeVerticalAlignment VerticalAlignment { get; public set; }
    public bool IsBelowText { get; public set; }
    public WCharacterFormat CharacterFormat { get; internal set; }
    internal int ShapeId { get; internal set; }
    internal string OPictureHRef { get; internal set; }
    internal bool IsHeaderPicture { get; internal set; }
    internal InlineShapeObject PictureShape { get; internal set; }
    internal SizeF Size { get; internal set; }
    internal bool IsMetaFile { get; }
    internal List`1<Stream> DocxProps { get; internal set; }
    internal List`1<Stream> DocxVisualShapeProps { get; internal set; }
    internal List`1<Stream> SignatureLineElements { get; }
    public string AlternativeText { get; public set; }
    public string Name { get; public set; }
    internal Color ChromaKeyColor { get; internal set; }
    public string Title { get; public set; }
    internal WTextBody EmbedBody { get; internal set; }
    internal bool IsShape { get; internal set; }
    internal int OrderIndex { get; internal set; }
    internal bool LayoutInCell { get; internal set; }
    internal bool AllowOverlap { get; internal set; }
    internal string Href { get; internal set; }
    internal string ExternalLink { get; internal set; }
    internal string SvgExternalLink { get; internal set; }
    internal bool HasImageRecordReference { get; internal set; }
    internal string LinkType { get; internal set; }
    internal WrapPolygon WrapPolygon { get; internal set; }
    public bool Visible { get; public set; }
    internal bool IsWrappingBoundsAdded { get; internal set; }
    internal FillFormat FillFormat { get; internal set; }
    public bool FlipHorizontal { get; public set; }
    public bool FlipVertical { get; public set; }
    internal bool IsDefaultPicOfContentControl { get; internal set; }
    public WPicture(IWordDocument doc);
    internal TileRectangle get_FillRectangle();
    internal void set_FillRectangle(TileRectangle value);
    internal bool get_HasBorder();
    public virtual EntityType get_EntityType();
    public sealed virtual float get_Height();
    public sealed virtual void set_Height(float value);
    public sealed virtual float get_Rotation();
    public sealed virtual void set_Rotation(float value);
    public sealed virtual float get_Width();
    public sealed virtual void set_Width(float value);
    public sealed virtual float get_HeightScale();
    public sealed virtual void set_HeightScale(float value);
    public sealed virtual float get_WidthScale();
    public sealed virtual void set_WidthScale(float value);
    public bool get_LockAspectRatio();
    public void set_LockAspectRatio(bool value);
    internal Image get_ImageForPartialTrustMode();
    internal Image get_Image();
    public sealed virtual Byte[] get_ImageBytes();
    public sealed virtual Byte[] get_SvgData();
    internal void set_SvgData(Byte[] value);
    internal ImageRecord get_ImageRecord();
    internal ShapePosition get_Position();
    internal void set_Position(ShapePosition value);
    public sealed virtual HorizontalOrigin get_HorizontalOrigin();
    public sealed virtual void set_HorizontalOrigin(HorizontalOrigin value);
    public sealed virtual VerticalOrigin get_VerticalOrigin();
    public sealed virtual void set_VerticalOrigin(VerticalOrigin value);
    public sealed virtual float get_HorizontalPosition();
    public sealed virtual void set_HorizontalPosition(float value);
    public sealed virtual float get_VerticalPosition();
    public sealed virtual void set_VerticalPosition(float value);
    internal float get_DistanceFromBottom();
    internal void set_DistanceFromBottom(float value);
    internal float get_DistanceFromLeft();
    internal void set_DistanceFromLeft(float value);
    internal float get_DistanceFromRight();
    internal void set_DistanceFromRight(float value);
    internal float get_DistanceFromTop();
    internal void set_DistanceFromTop(float value);
    public sealed virtual TextWrappingStyle get_TextWrappingStyle();
    public sealed virtual void set_TextWrappingStyle(TextWrappingStyle value);
    public sealed virtual TextWrappingType get_TextWrappingType();
    public sealed virtual void set_TextWrappingType(TextWrappingType value);
    public sealed virtual ShapeHorizontalAlignment get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ShapeHorizontalAlignment value);
    public sealed virtual ShapeVerticalAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ShapeVerticalAlignment value);
    public sealed virtual bool get_IsBelowText();
    public sealed virtual void set_IsBelowText(bool value);
    public sealed virtual WCharacterFormat get_CharacterFormat();
    internal void set_CharacterFormat(WCharacterFormat value);
    internal int get_ShapeId();
    internal void set_ShapeId(int value);
    internal string get_OPictureHRef();
    internal void set_OPictureHRef(string value);
    internal bool get_IsHeaderPicture();
    internal void set_IsHeaderPicture(bool value);
    internal InlineShapeObject get_PictureShape();
    internal void set_PictureShape(InlineShapeObject value);
    internal SizeF get_Size();
    internal void set_Size(SizeF value);
    internal bool get_IsMetaFile();
    internal List`1<Stream> get_DocxProps();
    internal void set_DocxProps(List`1<Stream> value);
    internal List`1<Stream> get_DocxVisualShapeProps();
    internal void set_DocxVisualShapeProps(List`1<Stream> value);
    internal List`1<Stream> get_SignatureLineElements();
    public sealed virtual string get_AlternativeText();
    public sealed virtual void set_AlternativeText(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal Color get_ChromaKeyColor();
    internal void set_ChromaKeyColor(Color value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    internal WTextBody get_EmbedBody();
    internal void set_EmbedBody(WTextBody value);
    internal bool get_IsShape();
    internal void set_IsShape(bool value);
    internal int get_OrderIndex();
    internal void set_OrderIndex(int value);
    internal bool get_LayoutInCell();
    internal void set_LayoutInCell(bool value);
    internal bool get_AllowOverlap();
    internal void set_AllowOverlap(bool value);
    internal string get_Href();
    internal void set_Href(string value);
    internal string get_ExternalLink();
    internal void set_ExternalLink(string value);
    internal string get_SvgExternalLink();
    internal void set_SvgExternalLink(string value);
    internal bool get_HasImageRecordReference();
    internal void set_HasImageRecordReference(bool value);
    internal string get_LinkType();
    internal void set_LinkType(string value);
    internal WrapPolygon get_WrapPolygon();
    internal void set_WrapPolygon(WrapPolygon value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    internal bool get_IsWrappingBoundsAdded();
    internal void set_IsWrappingBoundsAdded(bool value);
    internal FillFormat get_FillFormat();
    internal void set_FillFormat(FillFormat value);
    public sealed virtual bool get_FlipHorizontal();
    public sealed virtual void set_FlipHorizontal(bool value);
    public sealed virtual bool get_FlipVertical();
    public sealed virtual void set_FlipVertical(bool value);
    internal bool get_IsDefaultPicOfContentControl();
    internal void set_IsDefaultPicOfContentControl(bool value);
    public sealed virtual void LoadImage(Byte[] imageBytes);
    public sealed virtual void LoadImage(Byte[] svgData, Byte[] imageBytes);
    internal static void EvaluateSVGImageBytes(Byte[] svgData);
    internal void LoadImage(Image image);
    public sealed virtual void LoadImage(Stream imageStream);
    private void UpdateBlipImageRecord();
    public sealed virtual IWParagraph AddCaption(string name, CaptionNumberingFormat format, CaptionPosition captionPosition);
    internal virtual void AddSelf();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void InitXDLSHolder();
    internal virtual void Close();
    internal bool Compare(WPicture picture);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
    internal Dictionary`2<float, List`1<float>> GetBrightnessValueRanges();
    internal Dictionary`2<float, List`1<double>> GetContrastValueRanges();
    internal void SetWidthScaleValue(float value);
    internal void SetHeightScaleValue(float value);
    internal void SetTextWrappingStyleValue(TextWrappingStyle textWrappingStyle);
    internal virtual void Detach();
    internal void RemoveImageInCollection();
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void AttachToDocument();
    private bool IsPreviousItemIsOleObject();
    internal void LoadImage(Byte[] imageBytes, bool isMetafile);
    internal void LoadImage(ImageRecord imageRecord);
    internal void CheckTextWrappingStyle();
    private Image GetImageForPartialTrustMode(Byte[] imageBytes);
    internal SizeF ConvertSizeForPartialTrustMode(Image image);
    internal Image GetImage(Byte[] imageBytes, bool isImageFromScratch);
    internal static Stream GetManifestResourceStream(string fileName);
    private void ResetImageData();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal SizeF ConvertSize(Image image);
    private void CheckPicSizeForPartialTrustMode(Image image);
    private void CheckPicSize(Image image);
}
public class Syncfusion.DocIO.DLS.WrapFormat : object {
    private bool m_AllowOverlap;
    private float m_DistanceBottom;
    private float m_DistanceLeft;
    private float m_DistanceRight;
    private float m_DistanceTop;
    private TextWrappingType m_TextWrappingType;
    private TextWrappingStyle m_TextWrappingStyle;
    private WrapPolygon m_wrapPolygon;
    internal bool IsWrappingBoundsAdded;
    internal int WrapCollectionIndex;
    private byte m_bFlags;
    public bool AllowOverlap { get; public set; }
    public float DistanceBottom { get; public set; }
    public float DistanceLeft { get; public set; }
    public float DistanceRight { get; public set; }
    public float DistanceTop { get; public set; }
    internal bool IsBelowText { get; internal set; }
    public TextWrappingType TextWrappingType { get; public set; }
    public TextWrappingStyle TextWrappingStyle { get; public set; }
    internal WrapPolygon WrapPolygon { get; internal set; }
    public bool get_AllowOverlap();
    public void set_AllowOverlap(bool value);
    public float get_DistanceBottom();
    public void set_DistanceBottom(float value);
    public float get_DistanceLeft();
    public void set_DistanceLeft(float value);
    public float get_DistanceRight();
    public void set_DistanceRight(float value);
    public float get_DistanceTop();
    public void set_DistanceTop(float value);
    internal bool get_IsBelowText();
    internal void set_IsBelowText(bool value);
    public TextWrappingType get_TextWrappingType();
    public void set_TextWrappingType(TextWrappingType value);
    public TextWrappingStyle get_TextWrappingStyle();
    public void set_TextWrappingStyle(TextWrappingStyle value);
    internal void SetTextWrappingStyleValue(TextWrappingStyle textWrappingStyle);
    internal WrapPolygon get_WrapPolygon();
    internal void set_WrapPolygon(WrapPolygon value);
    internal void Close();
    internal bool Compare(WrapFormat wrapFormat);
    internal StringBuilder GetAsString();
}
internal class Syncfusion.DocIO.DLS.WrapPolygon : object {
    private byte m_bFlags;
    private List`1<PointF> m_vertices;
    internal bool Edited { get; internal set; }
    internal List`1<PointF> Vertices { get; internal set; }
    internal bool get_Edited();
    internal void set_Edited(bool value);
    internal List`1<PointF> get_Vertices();
    internal void set_Vertices(List`1<PointF> value);
    internal WrapPolygon Clone();
    internal void Close();
    internal bool Compare(WrapPolygon wrapPolygon);
    internal StringBuilder GetAsString();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WRowCollection : EntityCollection {
    private static Type[] DEF_ELEMENT_TYPES;
    public WTableRow Item { get; }
    protected Type[] TypesOfElement { get; }
    public WRowCollection(WTable owner);
    private static WRowCollection();
    public WTableRow get_Item(int index);
    protected virtual Type[] get_TypesOfElement();
    public int Add(WTableRow row);
    public void Insert(int index, WTableRow row);
    public int IndexOf(WTableRow row);
    public void Remove(WTableRow row);
}
public class Syncfusion.DocIO.DLS.WSection : WidgetContainer {
    private static float DEF_DISTANCE_BETWEEN_COLUMNS;
    private WTextBody m_body;
    internal WSectionFormat m_sectionFormat;
    internal WHeadersFooters m_headersFooters;
    private EntityCollection m_childEntities;
    protected internal Byte[] m_internalData;
    private short m_previousHeaderCount;
    private short m_previousFooterCount;
    private byte m_bFlags;
    internal short PreviousHeaderCount { get; internal set; }
    internal short PreviousFooterCount { get; internal set; }
    public WTextBody Body { get; }
    public WHeadersFooters HeadersFooters { get; }
    public WPageSetup PageSetup { get; internal set; }
    internal WSectionFormat SectionFormat { get; }
    public ColumnCollection Columns { get; }
    public SectionBreakCode BreakCode { get; public set; }
    internal Byte[] DataArray { get; internal set; }
    public EntityType EntityType { get; }
    public EntityCollection ChildEntities { get; }
    public IWParagraphCollection Paragraphs { get; }
    public IWTableCollection Tables { get; }
    internal DocTextDirection TextDirection { get; internal set; }
    public bool ProtectForm { get; public set; }
    internal bool IsSectionFitInSamePage { get; internal set; }
    protected IEntityCollectionBase WidgetCollection { get; }
    public WSection(IWordDocument doc);
    internal short get_PreviousHeaderCount();
    internal void set_PreviousHeaderCount(short value);
    internal short get_PreviousFooterCount();
    internal void set_PreviousFooterCount(short value);
    public sealed virtual WTextBody get_Body();
    public sealed virtual WHeadersFooters get_HeadersFooters();
    public sealed virtual WPageSetup get_PageSetup();
    internal void set_PageSetup(WPageSetup value);
    internal WSectionFormat get_SectionFormat();
    public sealed virtual ColumnCollection get_Columns();
    public sealed virtual SectionBreakCode get_BreakCode();
    public sealed virtual void set_BreakCode(SectionBreakCode value);
    internal Byte[] get_DataArray();
    internal void set_DataArray(Byte[] value);
    public virtual EntityType get_EntityType();
    public sealed virtual EntityCollection get_ChildEntities();
    public sealed virtual IWParagraphCollection get_Paragraphs();
    public sealed virtual IWTableCollection get_Tables();
    internal DocTextDirection get_TextDirection();
    internal void set_TextDirection(DocTextDirection value);
    public sealed virtual bool get_ProtectForm();
    public sealed virtual void set_ProtectForm(bool value);
    internal bool get_IsSectionFitInSamePage();
    internal void set_IsSectionFitInSamePage(bool value);
    public sealed virtual Column AddColumn(float width, float spacing);
    internal Column AddColumn(float width, float spacing, bool isOpening);
    public sealed virtual void MakeColumnsEqual();
    public sealed virtual WSection Clone();
    public sealed virtual IWParagraph AddParagraph();
    public sealed virtual IWTable AddTable();
    internal IBlockContentControl AddStructureDocumentTag();
    internal AlternateChunk AddAlternateChunk();
    internal virtual void AddSelf();
    internal string GetText(WParagraph lastParagraph);
    internal void AddEmptyParagraph();
    internal bool LineNumbersEnabled();
    internal WSection CloneWithoutBodyItems();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    protected virtual object CloneImpl();
    internal void MakeChanges(bool acceptChanges);
    internal bool HasTrackedChanges();
    internal void CompareHeaderFooter(WSection originalSection);
    internal bool CompareSectionFormat(WSection section);
    internal virtual void Close();
    internal WParagraph GetFirstParagraph();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    protected virtual IEntityCollectionBase get_WidgetCollection();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WSectionCollection : EntityCollection {
    private static Type[] DEF_ELEMENT_TYPES;
    public WSection Item { get; }
    protected Type[] TypesOfElement { get; }
    public WSectionCollection(WordDocument doc);
    private static WSectionCollection();
    public sealed virtual WSection get_Item(int index);
    protected virtual Type[] get_TypesOfElement();
    public sealed virtual int Add(IWSection section);
    public sealed virtual int IndexOf(IWSection section);
    internal string GetText();
}
internal class Syncfusion.DocIO.DLS.WSectionFormat : FormatBase {
    private static float DEF_DISTANCE_BETWEEN_COLUMNS;
    internal static int BreakcodeKey;
    internal static int TextDirectionKey;
    internal static int PageSetupKey;
    internal static int ChangedFormatKey;
    internal static int FormatChangeAuthorNameKey;
    internal static int FormatChangeDateTimeKey;
    internal ColumnCollection m_columns;
    internal ColumnCollection m_sectFormattingColumnCollection;
    internal ColumnCollection SectFormattingColumnCollection { get; internal set; }
    internal WPageSetup PageSetup { get; internal set; }
    internal SectionBreakCode BreakCode { get; internal set; }
    internal ColumnCollection Columns { get; }
    internal DocTextDirection TextDirection { get; internal set; }
    internal bool IsChangedFormat { get; internal set; }
    internal string FormatChangeAuthorName { get; internal set; }
    internal DateTime FormatChangeDateTime { get; internal set; }
    internal WSectionFormat(WSection section);
    internal ColumnCollection get_SectFormattingColumnCollection();
    internal void set_SectFormattingColumnCollection(ColumnCollection value);
    internal WPageSetup get_PageSetup();
    internal void set_PageSetup(WPageSetup value);
    internal SectionBreakCode get_BreakCode();
    internal void set_BreakCode(SectionBreakCode value);
    internal ColumnCollection get_Columns();
    internal DocTextDirection get_TextDirection();
    internal void set_TextDirection(DocTextDirection value);
    internal bool get_IsChangedFormat();
    internal void set_IsChangedFormat(bool value);
    internal string get_FormatChangeAuthorName();
    internal void set_FormatChangeAuthorName(string value);
    internal DateTime get_FormatChangeDateTime();
    internal void set_FormatChangeDateTime(DateTime value);
    internal WSectionFormat Clone();
    internal object GetPropertyValue(int propKey);
    internal void SetPropertyValue(int propKey, object value);
    protected virtual object GetDefValue(int key);
    protected virtual FormatBase GetDefComposite(int key);
    internal bool Compare(WSectionFormat sectionFormat);
    internal virtual void Close();
}
public class Syncfusion.DocIO.DLS.WSeqField : WField {
    private CaptionNumberingFormat m_numberFormat;
    private ParagraphItemCollection m_pItemColl;
    private string m_bookmarkname;
    private bool m_insertnextnumber;
    private int m_resetheadinglevel;
    private int m_resetnumber;
    private bool m_repeatnearestnumber;
    private bool m_hideresult;
    public EntityType EntityType { get; }
    public string FormattingString { get; }
    public CaptionNumberingFormat NumberFormat { get; public set; }
    public string CaptionName { get; public set; }
    public string BookmarkName { get; public set; }
    public bool InsertNextNumber { get; public set; }
    public bool RepeatNearestNumber { get; public set; }
    public bool HideResult { get; public set; }
    public int ResetNumber { get; public set; }
    public int ResetHeadingLevel { get; public set; }
    public WSeqField(IWordDocument doc);
    protected internal WSeqField(WField field);
    public virtual EntityType get_EntityType();
    public string get_FormattingString();
    public CaptionNumberingFormat get_NumberFormat();
    public void set_NumberFormat(CaptionNumberingFormat value);
    public string get_CaptionName();
    public void set_CaptionName(string value);
    public string get_BookmarkName();
    public void set_BookmarkName(string value);
    public bool get_InsertNextNumber();
    public void set_InsertNextNumber(bool value);
    public bool get_RepeatNearestNumber();
    public void set_RepeatNearestNumber(bool value);
    public bool get_HideResult();
    public void set_HideResult(bool value);
    public int get_ResetNumber();
    public void set_ResetNumber(int value);
    public int get_ResetHeadingLevel();
    public void set_ResetHeadingLevel(int value);
    protected internal virtual void ParseFieldCode(string fieldCode);
    internal string GetSeqCaptionName();
    protected internal virtual void UpdateFieldCode(string fieldCode);
    private string UpdateFieldValue(string fieldCode);
    private string UpdateSwitchesIndexInFieldValue(string fieldValue);
    private string UpdateFormatIndexAndFieldValue(string fieldvalue, List`1& formatIndex, string seqSwitch);
    private string UpdateFieldValue(string fieldValue, List`1<int> formatIndex, string seqSwitch);
    private void ParseSwitches(string seqFormat);
    protected internal String[] GetFieldValues(string fieldvalue);
    private static string ClearStringFromOtherCharacters(string value);
    private void SwitchUpdation(bool switchValue, string switchType);
    private void SwitchUpdationLevel(string oldValue, string switchType, int switchValue);
    private string ClearFieldSwitch(string fieldCode);
    private string ClearFieldSwitchLevel(string fieldCode, string oldLevel);
    private string ClearSwitchString(string fieldCode);
    protected internal virtual string ConvertSwitchesToString();
    internal void UpdateFieldMarks();
    internal void UpdateSequenceFieldResult();
}
public class Syncfusion.DocIO.DLS.WSymbol : ParagraphItem {
    private string m_fontName;
    private byte m_charCode;
    private byte m_charCodeExt;
    private string m_charValue;
    public EntityType EntityType { get; }
    public WCharacterFormat CharacterFormat { get; }
    public string FontName { get; public set; }
    public byte CharacterCode { get; public set; }
    internal byte CharCodeExt { get; internal set; }
    internal string CharValue { get; }
    public WSymbol(IWordDocument doc);
    public virtual EntityType get_EntityType();
    public WCharacterFormat get_CharacterFormat();
    public string get_FontName();
    public void set_FontName(string value);
    public byte get_CharacterCode();
    public void set_CharacterCode(byte value);
    internal byte get_CharCodeExt();
    internal void set_CharCodeExt(byte value);
    internal string get_CharValue();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    protected virtual object CloneImpl();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    internal Font GetFont(DrawingContext dc);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
    internal bool Compare(WSymbol symbol);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WTable : TextBodyItem {
    private WRowCollection m_rows;
    private RowFormat m_initTableFormat;
    internal float m_tableWidth;
    private WTableColumnCollection m_tableGrid;
    private XmlTableFormat m_xmlTblFormat;
    internal XmlTableFormat m_trackTblFormat;
    internal WTableColumnCollection m_trackTableGrid;
    private IWTableStyle m_style;
    private string m_title;
    private string m_description;
    private short m_bFlags;
    private byte m_bFlags1;
    private byte m_bFlags2;
    internal List`1<WTable> m_recalculateTables;
    private int maxPrefWidthRowIndex;
    internal List`1<float> m_maxPrefCellWidthOfColumns;
    private float m_totalmaxPrefCellWidthOfColumns;
    public EntityType EntityType { get; }
    public WRowCollection Rows { get; }
    public RowFormat TableFormat { get; }
    internal PreferredWidthInfo PreferredTableWidth { get; }
    public string StyleName { get; }
    public WTableCell LastCell { get; }
    public WTableRow FirstRow { get; }
    public WTableRow LastRow { get; }
    public WTableCell Item { get; }
    public float Width { get; }
    public EntityCollection ChildEntities { get; }
    internal WTableColumnCollection TableGrid { get; }
    public float IndentFromLeft { get; public set; }
    internal XmlTableFormat DocxTableFormat { get; internal set; }
    internal XmlTableFormat TrackTblFormat { get; }
    internal WTableColumnCollection TrackTableGrid { get; }
    public bool ApplyStyleForHeaderRow { get; public set; }
    public bool ApplyStyleForLastRow { get; public set; }
    public bool ApplyStyleForFirstColumn { get; public set; }
    public bool ApplyStyleForLastColumn { get; public set; }
    public bool ApplyStyleForBandedRows { get; public set; }
    public bool ApplyStyleForBandedColumns { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    internal bool IsFrame { get; }
    internal bool IsCompleteFrame { get; }
    internal bool IsTableGridUpdated { get; internal set; }
    internal bool IsTableGridVerified { get; internal set; }
    internal bool IsTableGridCorrupted { get; internal set; }
    internal bool IsTableCellWidthDefined { get; internal set; }
    internal bool IsUpdateCellWidthByPartitioning { get; internal set; }
    internal bool UsePreferredCellWidth { get; internal set; }
    internal bool IsInCell { get; }
    internal bool IsAllCellsHavePointWidth { get; internal set; }
    internal bool HasOnlyParagraphs { get; internal set; }
    internal bool IsRecalulateBasedOnLastCol { get; internal set; }
    internal bool HasOnlyHorizontalText { get; internal set; }
    internal bool HasPercentPreferredCellWidth { get; internal set; }
    internal bool HasAutoPreferredCellWidth { get; internal set; }
    internal bool HasNonePreferredCellWidth { get; internal set; }
    internal bool HasPointPreferredCellWidth { get; internal set; }
    internal bool IsNeedToRecalculate { get; internal set; }
    internal List`1<WTable> RecalculateTables { get; }
    internal bool HasHorizontalMergeCells { get; internal set; }
    internal bool IsFromHTML { get; internal set; }
    internal bool IsAllRowsHaveSameCellCount { get; internal set; }
    internal bool IsMergedTable { get; internal set; }
    private int Syncfusion.Layouting.ITableWidget.MaxRowIndex { get; }
    private int Syncfusion.Layouting.ITableWidget.RowsCount { get; }
    public WTable(IWordDocument doc);
    public WTable(IWordDocument doc, bool showBorder);
    public virtual EntityType get_EntityType();
    public sealed virtual WRowCollection get_Rows();
    public sealed virtual RowFormat get_TableFormat();
    internal PreferredWidthInfo get_PreferredTableWidth();
    public string get_StyleName();
    public sealed virtual WTableCell get_LastCell();
    public sealed virtual WTableRow get_FirstRow();
    public sealed virtual WTableRow get_LastRow();
    public sealed virtual WTableCell get_Item(int row, int column);
    public sealed virtual float get_Width();
    public sealed virtual EntityCollection get_ChildEntities();
    internal WTableColumnCollection get_TableGrid();
    internal void ChangeTrackTableGrid();
    public sealed virtual float get_IndentFromLeft();
    public sealed virtual void set_IndentFromLeft(float value);
    internal XmlTableFormat get_DocxTableFormat();
    internal void set_DocxTableFormat(XmlTableFormat value);
    internal XmlTableFormat get_TrackTblFormat();
    internal WTableColumnCollection get_TrackTableGrid();
    public sealed virtual bool get_ApplyStyleForHeaderRow();
    public sealed virtual void set_ApplyStyleForHeaderRow(bool value);
    public sealed virtual bool get_ApplyStyleForLastRow();
    public sealed virtual void set_ApplyStyleForLastRow(bool value);
    public sealed virtual bool get_ApplyStyleForFirstColumn();
    public sealed virtual void set_ApplyStyleForFirstColumn(bool value);
    public sealed virtual bool get_ApplyStyleForLastColumn();
    public sealed virtual void set_ApplyStyleForLastColumn(bool value);
    public sealed virtual bool get_ApplyStyleForBandedRows();
    public sealed virtual void set_ApplyStyleForBandedRows(bool value);
    public sealed virtual bool get_ApplyStyleForBandedColumns();
    public sealed virtual void set_ApplyStyleForBandedColumns(bool value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    internal bool get_IsFrame();
    internal bool get_IsCompleteFrame();
    internal bool get_IsTableGridUpdated();
    internal void set_IsTableGridUpdated(bool value);
    internal bool get_IsTableGridVerified();
    internal void set_IsTableGridVerified(bool value);
    internal bool get_IsTableGridCorrupted();
    internal void set_IsTableGridCorrupted(bool value);
    internal bool get_IsTableCellWidthDefined();
    internal void set_IsTableCellWidthDefined(bool value);
    internal bool get_IsUpdateCellWidthByPartitioning();
    internal void set_IsUpdateCellWidthByPartitioning(bool value);
    internal bool get_UsePreferredCellWidth();
    internal void set_UsePreferredCellWidth(bool value);
    internal bool get_IsInCell();
    internal bool get_IsAllCellsHavePointWidth();
    internal void set_IsAllCellsHavePointWidth(bool value);
    internal bool get_HasOnlyParagraphs();
    internal void set_HasOnlyParagraphs(bool value);
    internal bool get_IsRecalulateBasedOnLastCol();
    internal void set_IsRecalulateBasedOnLastCol(bool value);
    internal bool get_HasOnlyHorizontalText();
    internal void set_HasOnlyHorizontalText(bool value);
    internal bool get_HasPercentPreferredCellWidth();
    internal void set_HasPercentPreferredCellWidth(bool value);
    internal bool get_HasAutoPreferredCellWidth();
    internal void set_HasAutoPreferredCellWidth(bool value);
    internal bool get_HasNonePreferredCellWidth();
    internal void set_HasNonePreferredCellWidth(bool value);
    internal bool get_HasPointPreferredCellWidth();
    internal void set_HasPointPreferredCellWidth(bool value);
    internal bool get_IsNeedToRecalculate();
    internal void set_IsNeedToRecalculate(bool value);
    internal List`1<WTable> get_RecalculateTables();
    internal bool get_HasHorizontalMergeCells();
    internal void set_HasHorizontalMergeCells(bool value);
    internal bool get_IsFromHTML();
    internal void set_IsFromHTML(bool value);
    internal bool get_IsAllRowsHaveSameCellCount();
    internal void set_IsAllRowsHaveSameCellCount(bool value);
    internal bool get_IsMergedTable();
    internal void set_IsMergedTable(bool value);
    private void RenameDupliateStyle(IStyle style, IStyleCollection docStyles);
    private WTableStyle CreateTableGridStyle(IStyleCollection docStyles);
    private WTableStyle CreateTableNormalStyle(IStyleCollection styleCollection);
    public WTable Clone();
    public sealed virtual void ResetCells(int rowsNum, int columnsNum);
    public sealed virtual void ResetCells(int rowsNum, int columnsNum, RowFormat format, float cellWidth);
    public sealed virtual void ApplyStyle(BuiltinTableStyle builtinTableStyle);
    internal void ApplyStyle(BuiltinTableStyle builtinTableStyle, bool isClearCellShading);
    public sealed virtual WTableRow AddRow();
    public sealed virtual WTableRow AddRow(bool isCopyFormat);
    public sealed virtual WTableRow AddRow(bool isCopyFormat, bool autoPopulateCells);
    public virtual int Replace(Regex pattern, string replace);
    public virtual int Replace(string given, string replace, bool caseSensitive, bool wholeWord);
    public virtual int Replace(Regex pattern, TextSelection textSelection);
    public virtual int Replace(Regex pattern, TextSelection textSelection, bool saveFormatting);
    public virtual TextSelection Find(Regex pattern);
    public sealed virtual void ApplyVerticalMerge(int columnIndex, int startRowIndex, int endRowIndex);
    private void RemoveStartCellEmptyParagraph(int columnIndex, int startRowIndex, int endRowIndex);
    private void RemoveContinueCellEmptyParagraph(int columnIndex, int rowIndex, int endRowIndex);
    private bool IsFollowingCellsEmpty(int columnIndex, int startRowIndex, int endRowIndex);
    internal bool HasRenderableItem(IWParagraph paragraph);
    public sealed virtual void ApplyHorizontalMerge(int rowIndex, int startCellIndex, int endCellIndex);
    internal void UpdateStartcell(WCellCollection cells, int startCellIndex, int endCellIndex);
    internal void UpdateContinuecell(WCellCollection cells, int cellIndex, int endCellIndex);
    internal void UpdateBookmark(WCellCollection cells, int currCellIndex, int prevCellIndex);
    internal void UpdateParaItems(WCellCollection cells, int currCellIndex, int prevCellIndex, bool isPrevCellEmpty);
    private bool ChecksLastPara(BodyItemCollection items, Boolean& isEmpty, Boolean& isNotConsider);
    public sealed virtual void RemoveAbsPosition();
    internal void GetMinimumAndMaximumWordWidth(Single& minimumWordWidth, Single& maximumWordWidth);
    private void CheckToRecalculatAgain();
    private bool IsSkipToResizeNestedTable(float tableWidth);
    private bool IsContainsDifferentKeys(WTable previousTable, WTable currentTable, int Key);
    private bool IsTableHasSamePadding(WTable previousTable, WTable currentTable);
    private void ChangeSamePaddingTableState(WTableCell tableCell);
    private void SetPaddingValue(WTableRow row);
    internal void MergeTables(WTable currentTable);
    private void SetMergedRowBorders(WTable currentTable, WTable previousTable, WTableRow tableRow);
    private Border GetBorder(string border, Borders borders);
    private bool HasBorder(BorderStyle borderStyle, Border tableBorder);
    internal void AutoFitTable(AutoFitType autoFitType);
    internal bool IsSDTInTableCell(BlockContentControl sdtBlock);
    internal WTableCell GetOwnerTableCell();
    internal string GetTableText();
    public sealed virtual IWTableStyle GetStyle();
    private void ApplyStyle(IWTableStyle style, bool isClearCellShading);
    private void RemoveCellBackGroundColor();
    public void ApplyStyle(string styleName);
    internal void ApplyStyle(string styleName, bool isClearCellShading);
    internal void ApplyBaseStyleFormats();
    private bool IsStyleContainConditionalFormattingType(ConditionalFormattingType formattingType);
    private ConditionalFormattingStyle GetUpdatedcnfRowStyleFormatting(WTableStyle tableStyle, int rowIndex, bool isContinuesHeaderRow, bool isContainsLastRowFormatting, bool isOddRow, long rowStripe);
    private ConditionalFormattingStyle GetConditionalFormattingRowStyle(WTableStyle style, int rowIndex, bool isContinuesHeaderRow, bool isContainsLastRowFormatting, bool isOddRow, long rowStripe);
    private ConditionalFormattingStyle GetUpdatedcnfCellStyleFormatting(WTableStyle tableStyle, ConditionalFormattingType conditionalFormattingType, int rowIndex, int cellIndex, bool isOddColumn, long colStripe);
    private ConditionalFormattingStyle GetConditionalFormattingCellStyle(WTableStyle tableStyle, ConditionalFormattingType conditionalFormattingType, int rowIndex, int cellIndex, bool isOddColumn, long colStripe);
    private void UpdatePropertiesKeys(Dictionary`2<int, object> destination, Dictionary`2<int, object> source);
    private void BaseStyleFormatCopy(WTableStyle baseStyle, WCharacterFormat characterFormat, WParagraphFormat paragraphFormat);
    internal CellFormat GetCellFormatFromStyle(int rowIndex, int cellIndex);
    private void UpdateRowBorders(Borders dest, Borders src, Borders tableBorders, int index, int count, bool isLeftRightWidthapplicable);
    private void UpdateColumnBorders(Borders dest, Borders src, Borders tableBorders, int index, int count, bool isLeftRightWidthapplicable);
    internal virtual TextSelectionList FindAll(Regex pattern, bool isDocumentComparison);
    internal virtual void AddSelf();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    private void CloneStyleTo(WordDocument doc);
    private void CheckTableGrid();
    private bool IsCellWidthZero();
    internal void UpdateCellWidthByPartitioning(float tableWidth, Boolean& isTableGridMissMatch);
    private bool IsSkipToUpdateByEqualPartition(WTableRow row);
    internal void UpdateUnDefinedCellWidth();
    internal void UpdateTableGrid(bool isTableGridMissMatch, bool isgridafter);
    private bool IsGridUpdateBasedOnMaxPrefWidthPercent(float tableWidth, bool isTableGridMissMatch, Single& totalMaxCellPrefWidth, List`1& maxCellPrefWidth);
    private bool IsGridUpdateForAutoFitTblBasedOnMaxPrefWidth(Single& totalMaxCellPrefWidth, List`1& maxCellPrefWidth);
    private bool IsUpdateMaxPrefCellWidthOfColumns(List`1& maxCellPrefWidth);
    private void UpdateGridAndCellWidthBasedOnMaxPrefWidthPercent(float tableWidth, Single& totalMaxCellPrefWidth, List`1& maxCellPrefWidth);
    private List`1<float> UpdateMaxPrefWidthBasedOnTableWidthPercent(float tableWidth, Single& totalMaxCellPrefWidth, List`1& maxCellPrefWidth);
    private void UpdateCellWidthAndTableGrid(List`1<float> maxCellPrefWidth);
    private bool IsGridUpdateBasedOnMaxPrefWidth(float tableWidth, Single& totalMaxCellPrefWidth, List`1& maxCellPrefWidth);
    private bool IsGridUpdateBasedOnMaxPrefWidthPoint(float tableWidth, Single& totalMaxCellPrefWidth, List`1& maxCellPrefWidth);
    private void UpdateMaxPrefWidthBasedOnTableWidth(float tableWidth, Single& totalMaxCellPrefWidth, List`1& maxCellPrefWidth);
    private float GetCellWidthFromMaxCellPrefWidth(int columnIndex, int columnSpan, List`1<float> maxCellPrefWidth);
    private void UpdateMaxPrefWidthBasedOnSpannedCells(List`1& maxCellPrefWidth);
    private void UpdateGridAndCellWidthBasedOnMaxPrefWidth(float tableWidth, Single& totalMaxCellPrefWidth, List`1& maxCellPrefWidth);
    private bool IsCorruptGridUpdateBasedOnCellPrefWidth();
    private bool IsTableRowHasBeforeAfterWidth();
    private void UpdateGridAndCellWidthBasedOnCellPrefWidth();
    internal bool CheckCellWidth();
    private bool IsNeedToMergeTwoTables();
    internal void AutoFitColumns(bool forceAutoFitToContent);
    internal void DocAutoFitColumns();
    private bool IsAllRowsHaveSameWidth(float rowWidth);
    private bool CheckNeedToAutoFit();
    private bool CheckIsNeedToSkipGridValue(float containerWidth, bool isAutoWidth, float currentRowWidthBasedOnCells);
    internal bool HasMergeCellsInTable(bool isNeedToConsidervMerge);
    private bool IsAutoTableSkipTableGrid();
    private void ResizeAutoTableColumnWidth();
    internal void UpdateGridSpan();
    internal void UpdateGridSpan(WTable table);
    private bool IsAutoWidth(float parentCellWidth, float tableWidth);
    internal int GetRowSpan(WTableCell wCell);
    internal float GetCellWidth(float preferredWidth, FtsWidth preferredWidthType, float containerWidth, WTableCell cell);
    internal float GetMinimumPreferredWidth(WTableCell cell);
    private void SetNewWidthToCells(bool isTableGridCorrupts);
    private float GetMaxNestedTableWidthFromLastColumn();
    private void SetNewWidthToNestedTableCells();
    internal void SetCellWidthAsColumnPreferredWidth(WTable table, WTableColumnCollection columns);
    internal void UpdateRowBeforeAfter(WTable table);
    internal bool IsColumnNotHaveEnoughWidth(float clientWidth, bool isConsiderPointsValue);
    internal bool IsColumnsNotHaveEnoughPreferredWidthForWordWidth(WTableColumnCollection columns, float tableWidth);
    private bool IsTableBasedOnContent(WTable table);
    private void SetParagraphWidthToCells();
    private bool IsAllCellsHaveAutoZeroWidth();
    internal int MaximumCellCount();
    private bool HasSpaceToConsiderMaxWordWidth(short gridColumnStartIndex);
    private void UpdatePreferredWidthProperties(bool updateAllowAutoFit, AutoFitType autoFittype);
    private void ClearPreferredWidths(bool beforeAutoFit);
    private bool IsTablesAnyOneOfRowsCellWidthsDefined(WTable table);
    private float GetMaxRowWidth(float clientWidth);
    private void UpdateCellWidth(WTableRow row, float clientWidth, float tableWidth, float maxRowWidth, bool isSkiptoCalculateCellWidth, bool isGridafter);
    private List`1<float> RecalculatevMergeRow(WTableCell vmergecell, WTableCell cell, WTableRow currRow, float tableWidth);
    private bool IsAllRowCellHasSamePrefWidth();
    private int GetMaxPreferredWidthRowIndex(float tableWidth);
    private void CalculateCellWidthFixedTable(WTableCell cell, float rowWidth, int defaultPrefCellWidth, float totalWidthToShrink, float totalWidthToExpand);
    internal bool IsAutoTableExceedsClientWidth();
    private bool IsNeedtoResizeCell(float tableWidth);
    private float GetGridBeforeAfter(WTableRow row, float clientWidth, bool isAfterWidth, float tableWidth, float currOffset, float maxRowWidth, bool isTableGridMissMatch);
    private float GetGridBeforeAfter(PreferredWidthInfo widthInfo, float tableWidth);
    private float GetCellWidth(WTableCell cell, float clientWidth, float tableWidth, float currOffset, float maxRowWidth, bool isTableGridMissMatch, bool isRowHasDefinedCells, int cellcolumnIndex);
    internal List`1<float> GetMaxPrefCellWidthOfColumns(Single& totalCellPreferredWidth, int maxCellCount);
    internal float GetColumnMaxPrefWidth(int columnIndex);
    internal bool IsHtmlTableExceedsClientWidth();
    internal float GetOwnerWidth();
    internal float GetTableClientWidth(float clientWidth);
    internal void CalculatePaddingOfTableWidth(Single& leftPad, Single& rightPad);
    private void UpdateTableGrid(float currOffset);
    internal virtual TextBodyItem GetNextTextBodyItemValue();
    internal void UpdateFormat(FormatBase format, int propKey);
    internal virtual void Close();
    internal float UpdateWidth();
    private WSection GetOwnerSection();
    private HeaderFooter GetOwnerHeaderFooter();
    internal WTable GetOwnerTable();
    internal void RemoveUnwantedHorizontalMergeCells(WTable table);
    internal int MaxCellCountWithoutSpannedCells(WTable table);
    internal virtual void MakeChanges(bool acceptChanges);
    internal virtual void RemoveCFormatChanges();
    internal virtual void RemovePFormatChanges();
    internal virtual void AcceptCChanges();
    internal virtual void AcceptPChanges();
    internal virtual bool CheckChangedPFormat();
    internal virtual bool CheckDeleteRev();
    internal virtual bool CheckInsertRev();
    internal virtual bool CheckChangedCFormat();
    internal virtual bool HasTrackedChanges();
    internal bool RemoveChangedTable(bool acceptChanges);
    internal virtual void SetDeleteRev(bool check);
    internal virtual void SetInsertRev(bool check);
    internal virtual void SetChangedCFormat(bool check);
    internal virtual void SetChangedPFormat(bool check);
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal bool IsHiddenRow(int rowIndex, WTable table);
    internal bool IsHiddenParagraph(WParagraph paragraph);
    internal bool IsHiddenTable(WTable table);
    private sealed virtual override int Syncfusion.Layouting.ITableWidget.get_MaxRowIndex();
    private sealed virtual override int Syncfusion.Layouting.ITableWidget.get_RowsCount();
    private sealed virtual override IWidgetContainer Syncfusion.Layouting.ITableWidget.GetCellWidget(int row, int column);
    private sealed virtual override IWidget Syncfusion.Layouting.ITableWidget.GetRowWidget(int row);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    internal virtual void Compare(WordDocument orgDoc);
    internal void Compare(WTextBody originalTextBody);
    internal void CompareTable(WordDocument orgDoc, WTextBody orgTextbody);
    internal bool CompareTableFormattings(WTable table);
    private List`1<string> GetMatchedTableAndIndexes(List`1<WTable> orgDocTables, WTable& maxRowMatchedTable);
    private List`1<string> GetLongestMatchedIndexes(WTable orgTable, WTable revTable);
    private List`1<string> GetAllMatchedIndex(WTable orgTable, WTable revTable);
    private void ApplyMatchedTableRevision(WTable orgDocMatchedTable, List`1<string> matchedTableRowIndexes);
    private void CompareTableFormat(WTable orgTable);
    private void CompareCellFormat(WTableCell orgTableCell, WTableCell revTableCell, WTableStyle style, WTable orgDocMatchedTable);
    private void CompareRowFormat(WTableRow orgTableRow, WTableRow revTableRow, WTableStyle style);
    internal StringBuilder GetAsString();
    internal virtual void AddDelMark();
    internal virtual void AddInsMark();
    internal void RemoveDeleteRevision();
    internal void RemoveInsertRevision();
}
public class Syncfusion.DocIO.DLS.WTableCell : WTextBody {
    private CellFormat m_cellFormat;
    private WCharacterFormat m_charFormat;
    internal TextureStyle m_textureStyle;
    internal Color m_foreColor;
    internal CellFormat m_trackCellFormat;
    private short m_gridStartIndex;
    private CellContentControl m_CellContentControl;
    private float m_cellStartPosition;
    private float m_cellEndPosition;
    private ColumnSizeInfo m_sizeInfo;
    private string m_ComparisonText;
    public short GridSpan { get; internal set; }
    internal short GridColumnStartIndex { get; internal set; }
    internal CellContentControl ContentControl { get; internal set; }
    internal bool IsChangedFormat { get; }
    public EntityType EntityType { get; }
    public WTableRow OwnerRow { get; }
    public CellFormat CellFormat { get; }
    public float Width { get; public set; }
    internal Color ForeColor { get; internal set; }
    internal TextureStyle TextureStyle { get; internal set; }
    internal WCharacterFormat CharacterFormat { get; }
    internal bool IsFixedWidth { get; }
    internal CellFormat TrackCellFormat { get; }
    internal PreferredWidthInfo PreferredWidth { get; }
    internal float CellStartPosition { get; }
    internal float CellEndPosition { get; }
    internal ColumnSizeInfo SizeInfo { get; }
    internal string ComparisonText { get; }
    protected IEntityCollectionBase WidgetCollection { get; }
    public WTableCell(IWordDocument document);
    public short get_GridSpan();
    internal void set_GridSpan(short value);
    internal short get_GridColumnStartIndex();
    internal void set_GridColumnStartIndex(short value);
    internal CellContentControl get_ContentControl();
    internal void set_ContentControl(CellContentControl value);
    internal bool get_IsChangedFormat();
    public virtual EntityType get_EntityType();
    public WTableRow get_OwnerRow();
    public CellFormat get_CellFormat();
    public float get_Width();
    public void set_Width(float value);
    internal Color get_ForeColor();
    internal void set_ForeColor(Color value);
    internal TextureStyle get_TextureStyle();
    internal void set_TextureStyle(TextureStyle value);
    internal WCharacterFormat get_CharacterFormat();
    internal bool get_IsFixedWidth();
    internal CellFormat get_TrackCellFormat();
    internal PreferredWidthInfo get_PreferredWidth();
    internal float get_CellStartPosition();
    internal float get_CellEndPosition();
    internal ColumnSizeInfo get_SizeInfo();
    internal string get_ComparisonText();
    public sealed virtual Entity Clone();
    public int GetCellIndex();
    protected virtual object CloneImpl();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    internal bool IsCellWidthZero();
    private void UpdateTablePreferredWidth(float prevWidth, float newValue);
    internal void ApplyTableStyleBaseFormats(CellFormat cellFormat, WParagraphFormat paraFormat, WCharacterFormat charFormat, BodyItemCollection items);
    private void ApplyTableStyleBaseFormatsInlineCC(InlineContentControl inlineControl, WCharacterFormat charFormat, bool isOverrideFontSizeBidi, bool isOverrideFontSize, WParagraph para, bool isOverrideTableStyleFontSize);
    private bool IsTableStyleHasFormatting();
    private bool IsNotEmptyParaFormat(WParagraphFormat paraFormat);
    private void IsOverrideStyleHierarchy(Boolean& isOverrideFontSize, Boolean& isOverrideFontSizeBidi);
    private void IsFontSizeDefinedInStyle(IWParagraphStyle paraStyle, Boolean& isOverrideFontSize, Boolean& isOverrideFontSizeBidi);
    private bool IsNormalStyleFontSizeNotInLimit(Boolean& isOverrideFontSize, Boolean& isOverrideFontSizeBidi);
    private void SetDocDefaultFontSize(WCharacterFormat charFormat, bool isOverrideFontSizeBidi, bool isOverrideFontSize);
    private void SetCharFontSize(WParagraph ownerPara, WCharacterFormat paraItemCharFormat, WCharacterFormat tableStyleCharFormat, bool isOverrideTableStyleFontSize, bool hasFontSize, bool hasFontSizeBidi);
    private void SetFontSizeForItem(WParagraph ownerPara, WCharacterFormat paraItemCharFormat, WCharacterFormat tableStyleCharFormat, bool isOverrideTableStyleFontSize, int key, bool haskey);
    private bool IsGetFontSizeFromTableStyle(WCharacterFormat paraItemCharFormat, WParagraph ownerPara, int key, bool hasFontSizeKey);
    private bool UseDocDefaultFontSize(WCharacterFormat charFormat, short key);
    internal Entity CloneCell();
    internal TextBodyItem GetNextTextBodyItem();
    internal WTableCell GetVerticalMergeStartCell();
    internal virtual void Close();
    internal float GetCellWidth();
    internal float GetCellLayoutingWidth();
    private float GetCellStartPositionValue();
    private float GetCellEndPositionValue();
    internal int GetHorizontalMergeEndCellIndex();
    internal WTableCell GetPreviousCell();
    internal float GetLeftPadding();
    internal float GetRightPadding();
    internal float GetTopPadding();
    internal float GetBottomPadding();
    internal ColumnSizeInfo GetSizeInfo(bool isAutoFit, bool isAutoWidth, bool needtoCalculateParaWidth);
    private void GetMinimumAndMaximumWordWidth(BodyItemCollection bodyItemCollection, Single& minimumWordWidth, Single& maximumWordWidth, Single& paragraphWidth, bool needtoCalculateParaWidth);
    private void GetMinimumAndMaximumWordWidth(TextBodyItem textBodyItem, Single& minimumWordWidth, Single& maximumWordWidth, Single& paragraphWidth, bool needtoCalculateParaWidth);
    internal float GetMinimumPreferredWidth();
    internal bool IsFitAsPerMaximumWordWidth(float width, float maxWordWidth);
    internal void SetHasPreferredWidth();
    internal StringBuilder GetCellAsString();
    internal string GetWordComparisonText();
    protected virtual IEntityCollectionBase get_WidgetCollection();
    protected virtual void CreateLayoutInfo();
    internal CellLayoutInfo CreateCellLayoutInfo();
    internal void InitCellLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal WTableRow GetOwnerRow(WTableCell ownerTableCell);
    private void CheckFootNoteInTextBody(WTextBody textBody);
    private void CheckFootNoteInParagraph(WParagraph paragraph);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    internal IWParagraph AddPrevParagraph();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WTableCollection : EntitySubsetCollection {
    public IWTable Item { get; }
    internal ITextBody OwnerTextBody { get; }
    public WTableCollection(BodyItemCollection bodyItems);
    public sealed virtual IWTable get_Item(int index);
    internal ITextBody get_OwnerTextBody();
    public sealed virtual int Add(IWTable table);
    public sealed virtual bool Contains(IWTable table);
    public sealed virtual int IndexOf(IWTable table);
    public int Insert(int index, IWTable table);
    public void Remove(IWTable table);
    public void RemoveAt(int index);
}
internal class Syncfusion.DocIO.DLS.WTableColumn : object {
    private float m_preferredwidth;
    internal float m_endOffset;
    private ColumnSizeInfo sizeInfo;
    private bool m_hasMaximumWordWidth;
    internal float PreferredWidth { get; internal set; }
    internal float EndOffset { get; internal set; }
    internal float MinimumWordWidth { get; internal set; }
    internal float MaximumWordWidth { get; internal set; }
    internal float MinimumWidth { get; internal set; }
    internal bool HasMaximumWordWidth { get; internal set; }
    internal float MaxParaWidth { get; internal set; }
    internal float get_PreferredWidth();
    internal void set_PreferredWidth(float value);
    internal float get_EndOffset();
    internal void set_EndOffset(float value);
    internal float get_MinimumWordWidth();
    internal void set_MinimumWordWidth(float value);
    internal float get_MaximumWordWidth();
    internal void set_MaximumWordWidth(float value);
    internal float get_MinimumWidth();
    internal void set_MinimumWidth(float value);
    internal bool get_HasMaximumWordWidth();
    internal void set_HasMaximumWordWidth(bool value);
    internal float get_MaxParaWidth();
    internal void set_MaxParaWidth(float value);
    internal WTableColumn Clone();
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.DLS.WTableColumnCollection : CollectionImpl {
    private IWordDocument m_doc;
    internal IWordDocument Document { get; }
    internal WTableColumn Item { get; }
    internal WTableColumnCollection(WordDocument doc);
    internal IWordDocument get_Document();
    internal WTableColumn get_Item(int index);
    internal void AddColumns(float offset);
    internal void UpdateColumns(int currentColumnIndex, int columnSpan, float preferredWidthEndOffset, ColumnSizeInfo sizeInfo, Dictionary`2<int, float> preferredWidths, bool isGridAfterColumn);
    internal void UpdatePreferredWidhToColumns(Dictionary`2<int, float> preferredWidths);
    private float GetPreviousColumnWidth(int columnIndex, Dictionary`2<int, float> preferredWidths);
    internal int IndexOf(WTableColumn ownerColumn);
    internal int IndexOf(float offSet);
    internal bool Contains(float offSet);
    internal void InsertColumn(int coulmnIndex, float offset);
    internal void RemoveColumn(int columnIndex);
    internal void ResetColumns();
    internal WTableColumnCollection Clone();
    internal void AutoFitColumns(float containerWidth, float preferredTableWidth, bool isAutoWidth, bool forceAutoFitToContent, WTable table);
    internal float GetTotalWidth(byte type);
    internal bool IsNaNOrInfinity(float value);
    internal void FitColumns(float containerWidth, float preferredTableWidth, bool isAutoWidth, WTable table, bool isTableGridCorrupts);
    private bool IsResizeColumnBasedOnCellPrefAndMaxWordWidth(WTable table, WTableColumnCollection columns, float clientWidth, List`1& calculatedColumnWidth);
    private List`1<float> GetColumnsWidthBasedOnCellPrefAndMaxWordWidth(Single& totalColumnWidth, WTableColumnCollection columns, List`1<float> maxCellPrefWidth);
    private void RecalculatePctTable(WTable table, WTableColumnCollection columns, float totalMaximumWordWidth, float tableWidth);
    private bool IsPointTableExceedsTableWidth(WTable table, WTableColumnCollection columns, float clientWidth, int maxCellCount, List`1& maxCellPrefWidth, Single& totalMaximumWordWidth, Single& totalCellPrefWidth);
    internal bool IsPctTableNotHaveEnoughMaxWordWidth(WTable table, WTableColumnCollection columns, float tableWidth, List`1& calculatedColumnWidth);
    private void ResizePointTableToTableWidth(WTableColumnCollection columns, List`1<float> maxCellPrefWidth, float totalMaximumWordWidth, float tableWidth, float totalCellPrefWidth);
    private bool IsPointTableResizeColumnsByCellPrefAndMaxWordWidth(WTable table, WTableColumnCollection columns, float clientWidth, int maxCellCount);
    private void ResizePointTableColumnsByCellPrefAndMaxWordWidth(WTable table, WTableColumnCollection columns, float tableWidth, int maxCellCount);
    private bool IsPctTableUseMaxWordWidth(WTable table, WTableColumnCollection columns, float clientWidth);
    private bool IsPointTableResizeColBasedOnCellPrefWidth(WTable table, int maxCellCount, WTableColumnCollection columns, List`1& calculatedColumnWidth, Single& totalCellPreferredWidth, float tableWidth);
    private bool CheckPreferredWidth(List`1& calculatedColumnWidth, WTable table, Single& totalCellPreferredWidth, int maxCellCount, float tableWidth, WTableColumnCollection columns);
    private bool IsTableExceedsTableWidth(WTable table, WTableColumnCollection columns, float clientWidth);
    private bool IsAutoTableResizeColumnsBasedOnCellPctPrefWidth(WTable table, List`1& pctCellWidthRowIndexes, WTableColumnCollection columns, float clientWidth, int maxCellCount);
    private List`1<int> GetPctCellPrefWidthRowIndexes(WTable table, WTableColumnCollection columns, float clientWidth);
    private void ResizeColumnsBasedOnPctCellPrefWidth(WTableColumnCollection columns, List`1<int> rowsContainingPercentCell, WTable table, float clientWidth);
    private bool IsResizeColumnBasedOnCellPreferredWidth(WTable table, WTableColumnCollection columns, float clientWidth, Single& totalCellPreferredWidth, List`1& calculatedColumnWidth, int maxCellCount, float totalColumnWidth);
    private bool IsEnoughCalculatedWidth(WTableColumnCollection columns, List`1<float> calculatedColumnWidth, float totalCellPreferredWidth, float clientWidth);
    private void ResizeColumnsBasedOnCalculatedColumnWidth(WTableColumnCollection columns, List`1<float> calculatedColumnWidth);
    private bool IsAutoTableResizeColumnsBasedOnMaxParaWidth(WTable table, WTableColumnCollection columns, float clientWidth, float totalColumnWidth);
    private void SetMaxParaWidthAsPreferredWidth(WTableColumnCollection columns);
    private bool IsResizeColumnBasedOnMaxParaWidth(WTable table, WTableColumnCollection columns, float clientWidth, float totalMaxParaWidth, float totalColumnPrefWidth);
    private bool IsMaxParaWidthExceedsPreferredWidth(float clientWidth, WTableColumnCollection columns);
    private bool IsColumnHasZeroParaWidth(WTableColumnCollection columns);
    private void ResizeColumnBasedOnMaxParaWidth(WTableColumnCollection columns, float totalMaxParaWidth, float clientWidth);
    private bool IsTableExceedClientWidth(WTable table, WTableColumnCollection columns, float clientWidth);
    private void SetMaxWordWidthAsPreferredWidth(WTableColumnCollection columns);
    private void ChecksNestedTableNeedToRecalculate(WTable nestedTable, WTableColumnCollection columns, float clientWidth, float totalColumnWidth, float tableWidth);
    private bool IsNestedTableShrinkToClientWidth(WTable table, WTable ownerTable, float totalColumnWidth, float clientWidth);
    private bool IsNestedPctTableUsesMaxWordWidth(WTable table, WTableColumnCollection columns, float clientWidth, WTable ownerTable);
    private bool IsColumnNotHaveEnoughMaxWordWidth(WTableColumnCollection columns);
    private bool IsAutoTableUsesCellPointPrefWidth(WTable table, WTableColumnCollection columns, float clientWidth, Single& totalCellPreferredWidth, List`1& calculatedColumnWidth, int maxCellCount);
    private bool IsCalculatedWidthEnoughForMaxWordWidth(List`1<float> calculateWidth, WTableColumnCollection columns);
    private List`1<float> GetComparedMaxCellPrefWidth(WTable table, int maxCellCount, Single& totalCellPrefWidth);
    internal bool IsAutoTableUsesNestedTableWidth(WTable table, WTableColumnCollection columns, int maxCellCount);
    private bool IsAutoTableUsesCellPrefWidth(WTable table, WTableColumnCollection columns, float maxCellCount, float clientWidth);
    private bool IsNestedTableUsesOwnerWidth(WTable table, WTableColumnCollection columns, int maxCellCount);
    internal bool HasLeftorRightPadding(WTableCell ownerCell);
    private bool IsSamePctValues(List`1<int> rowIndexes, WTable table);
    private bool IsExpandColumnsBasedOnParaWidth(WTable table, WTableColumnCollection columns, float clientWidth);
    private void ExpandColumnsBasedOnParaWidth(WTableColumnCollection columns);
    private bool IsExpandColumnsToClientWidth(WTable table, WTableColumnCollection columns, float clientWidth, Single& totalMaximumWordWidth);
    private void ExpandColumnsToClientWidth(WTableColumnCollection columns, float totalMaximumWordWidth, float clientWidth);
    private bool IsResizeColumnsToClientWidth(WTable table, WTableColumnCollection columns, float clientWidth, Single& totalMaximumWordWidth);
    private bool IsAllColumnsPrefWidthEqual(WTableColumnCollection columns);
    private void ResizeColumnsToClientWidth(WTableColumnCollection columns, float totalMaximumWordWidth, float clientWidth);
    private bool IsResizeHtmlTableColumnsBasedOnContent(WTable table, WTableColumnCollection columns, float clientWidth, Single& totalMaximumWordWidth, Single& totalSpaceToExpand);
    private bool IsResizeColumnsToPrefTableWidth(WTable table, WTableColumnCollection columns, float clientWidth, Single& totalMaximumWordWidth, Single& totalSpaceToExpand);
    private void ResizeColumnsToPrefTableWidth(WTableColumnCollection columns, float totalMaximumWordWidth, float totalSpaceToExpand);
    internal float GetCellWidth(int columnIndex, int columnSpan);
    internal void UpdateEndOffset();
    internal void ValidateColumnWidths();
}
public class Syncfusion.DocIO.DLS.WTableRow : WidgetBase {
    private WCellCollection m_cells;
    private RowFormat m_tableFormat;
    private WCharacterFormat m_charFormat;
    private TableRowHeightType m_heightType;
    private Byte[] m_internalData;
    internal RowFormat m_trackRowFormat;
    private byte m_bFlags;
    private RowContentControl m_RowContentControl;
    private string m_ComparisonText;
    public EntityCollection ChildEntities { get; }
    public EntityType EntityType { get; }
    public WCellCollection Cells { get; public set; }
    public TableRowHeightType HeightType { get; public set; }
    public RowFormat RowFormat { get; }
    public float Height { get; public set; }
    public bool IsHeader { get; public set; }
    internal WTable OwnerTable { get; }
    internal Byte[] DataArray { get; internal set; }
    internal WCharacterFormat CharacterFormat { get; }
    internal RowFormat TrackRowFormat { get; }
    internal bool IsDeleteRevision { get; internal set; }
    internal bool IsInsertRevision { get; internal set; }
    internal bool HasTblPrEx { get; internal set; }
    internal RowContentControl ContentControl { get; internal set; }
    internal string ComparisonText { get; }
    internal bool IsKeepWithNext { get; }
    public WTableRow(IWordDocument document);
    public sealed virtual EntityCollection get_ChildEntities();
    public virtual EntityType get_EntityType();
    public WCellCollection get_Cells();
    public void set_Cells(WCellCollection value);
    public TableRowHeightType get_HeightType();
    public void set_HeightType(TableRowHeightType value);
    public RowFormat get_RowFormat();
    public float get_Height();
    public void set_Height(float value);
    public bool get_IsHeader();
    public void set_IsHeader(bool value);
    internal WTable get_OwnerTable();
    internal Byte[] get_DataArray();
    internal void set_DataArray(Byte[] value);
    internal WCharacterFormat get_CharacterFormat();
    internal RowFormat get_TrackRowFormat();
    internal bool get_IsDeleteRevision();
    internal void set_IsDeleteRevision(bool value);
    internal bool get_IsInsertRevision();
    internal void set_IsInsertRevision(bool value);
    internal bool get_HasTblPrEx();
    internal void set_HasTblPrEx(bool value);
    internal RowContentControl get_ContentControl();
    internal void set_ContentControl(RowContentControl value);
    internal string get_ComparisonText();
    public WTableRow Clone();
    public WTableCell AddCell();
    public WTableCell AddCell(bool isCopyFormat);
    public int GetRowIndex();
    internal bool IsCellWidthZero();
    internal void UpdateCellWidthByPartitioning(float tableWidth, bool isSkipToEqualPartition);
    internal void UpdateUnDefinedCellWidth(float tableWidth);
    internal virtual void AddSelf();
    protected virtual object CloneImpl();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    private void CheckFormatOwner();
    internal void OnInsertCell(int index, CellFormat cellFormat);
    internal void OnRemoveCell(int index);
    internal float GetWidthToResizeCells(float clientWidth);
    private float GetGridBeforeAfter(PreferredWidthInfo widthInfo, float clientWidth);
    internal float GetRowWidth();
    internal void GetRowWidth(Single& preferredWidth, float tableWidth);
    internal float GetRowPreferredWidth(float tableWidth);
    internal bool IsAllCellsHasPointAndPerecentPrefWidth();
    internal float GetRowPreferredWidthFromPoint(int defaultPrefCellWidth);
    internal void UpdateRowRevision(WordDocument document);
    internal virtual void Close();
    internal bool CompareRowText(WTableRow tableRow);
    internal StringBuilder GetAsString();
    internal string GetWordComparisonText();
    internal List`1<WTableRow> GetMatchedRows(List`1<WTable> tables, bool withTableAscii, int startRowIndex, int startTableIndex);
    internal void AddDelMark();
    internal void AddInsMark();
    internal void RemoveDeleteRevision();
    internal void RemoveInsertRevision();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void CreateLayoutInfo();
    private bool IsNeedToSkipParaMark(WParagraph paragraph, int paraItemCount);
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal bool get_IsKeepWithNext();
    private void GetFirstParagraphOfRow(WParagraph& paragraph);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
}
public class Syncfusion.DocIO.DLS.WTableStyle : Style {
    private WParagraphFormat m_paragraphFormat;
    private WListFormat m_listFormat;
    private TableStyleCellProperties m_cellProperties;
    private TableStyleRowProperties m_rowProperties;
    private TableStyleTableProperties m_tableProperties;
    private ConditionalFormattingStyleCollection m_conditionalFormattingStyles;
    public WParagraphFormat ParagraphFormat { get; }
    internal WListFormat ListFormat { get; }
    public TableStyleCellProperties CellProperties { get; }
    public TableStyleRowProperties RowProperties { get; }
    public TableStyleTableProperties TableProperties { get; }
    internal WTableStyle BaseStyle { get; }
    public StyleType StyleType { get; }
    public ConditionalFormattingStyleCollection ConditionalFormattingStyles { get; }
    internal WTableStyle(IWordDocument doc);
    public sealed virtual WParagraphFormat get_ParagraphFormat();
    internal WListFormat get_ListFormat();
    public TableStyleCellProperties get_CellProperties();
    public TableStyleRowProperties get_RowProperties();
    public TableStyleTableProperties get_TableProperties();
    internal WTableStyle get_BaseStyle();
    public virtual StyleType get_StyleType();
    public ConditionalFormattingStyleCollection get_ConditionalFormattingStyles();
    internal ConditionalFormattingStyle ConditionalFormat(ConditionalFormattingType conditionCode);
    public virtual void ApplyBaseStyle(string styleName);
    public void ApplyBaseStyle(BuiltinTableStyle tableStyle);
    private void CheckNormalStyle();
    public virtual IStyle Clone();
    internal virtual void ApplyBaseStyle(Style baseStyle);
    protected virtual object CloneImpl();
    internal virtual void Close();
    internal virtual bool CompareStyleBetweenDocuments(Style style);
}
public class Syncfusion.DocIO.DLS.WTextBody : WidgetContainer {
    protected BodyItemCollection m_bodyItems;
    private WParagraphCollection m_paragraphs;
    private WTableCollection m_tables;
    private FormFieldCollection m_formFields;
    private List`1<AlternateChunk> m_alternateChunkCollection;
    private byte m_bflag;
    internal int m_bodyItemIndex;
    internal int m_paraItemIndex;
    internal int m_textStartIndex;
    internal int m_startRangeIndex;
    internal int m_endRangeIndex;
    internal int m_textEndIndex;
    internal int m_matchBodyItemIndex;
    internal int m_matchParaItemIndex;
    internal int currSectionIndex;
    internal int currBodyItemIndex;
    internal int currParaItemIndex;
    public EntityType EntityType { get; }
    public IWParagraphCollection Paragraphs { get; }
    public IWTableCollection Tables { get; }
    public FormFieldCollection FormFields { get; }
    internal List`1<AlternateChunk> AlternateChunkCollection { get; }
    internal bool IsPerformingFindAndReplace { get; internal set; }
    public IWParagraph LastParagraph { get; }
    internal bool IsFormFieldsCreated { get; }
    internal BodyItemCollection Items { get; }
    public EntityCollection ChildEntities { get; }
    protected IEntityCollectionBase WidgetCollection { get; }
    internal WTextBody(WordDocument doc, Entity owner);
    internal WTextBody(WSection sec);
    public virtual EntityType get_EntityType();
    public sealed virtual IWParagraphCollection get_Paragraphs();
    public sealed virtual IWTableCollection get_Tables();
    public sealed virtual FormFieldCollection get_FormFields();
    internal List`1<AlternateChunk> get_AlternateChunkCollection();
    internal bool get_IsPerformingFindAndReplace();
    internal void set_IsPerformingFindAndReplace(bool value);
    public sealed virtual IWParagraph get_LastParagraph();
    internal bool get_IsFormFieldsCreated();
    internal BodyItemCollection get_Items();
    public sealed virtual EntityCollection get_ChildEntities();
    public sealed virtual IWParagraph AddParagraph();
    public sealed virtual IWTable AddTable();
    public sealed virtual IBlockContentControl AddBlockContentControl(ContentControlType controlType);
    internal IBlockContentControl AddStructureDocumentTag();
    internal AlternateChunk AddAlternateChunk();
    internal AlternateChunk AddAltChunk(AlternateChunk altChunk);
    public sealed virtual void InsertXHTML(string html);
    public sealed virtual void InsertXHTML(string html, int paragraphIndex);
    public sealed virtual void InsertXHTML(string html, int paragraphIndex, int paragraphItemIndex);
    public sealed virtual bool IsValidXHTML(string html, XHTMLValidationType type);
    public sealed virtual bool IsValidXHTML(string html, XHTMLValidationType type, String& exceptionMessage);
    public sealed virtual void EnsureMinimum();
    internal TextSelection Find(Regex pattern);
    internal TextSelectionList FindAll(Regex pattern, bool isDocumentComparison, bool isFromTextbody);
    internal int Replace(Regex pattern, string replace);
    internal int Replace(Regex pattern, TextSelection textSelection, bool saveFormatting);
    internal int Replace(Regex pattern, TextBodyPart textPart, bool saveFormatting);
    internal int Replace(Regex pattern, IWordDocument replaceDoc, bool saveFormatting);
    private WCharacterFormat GetSrcCharacterFormat(TextSelection sel);
    internal WParagraph GetTextBodyFirstPara(bool isAddNewParagraph);
    internal virtual void AddSelf();
    protected virtual object CloneImpl();
    private Entity GetTextBodyBaseEntity(Entity entity);
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual void Close();
    internal bool IsContainBlockContentControl();
    internal void MakeChanges(bool acceptChanges);
    private bool RemoveChangedItem(TextBodyItem item, bool acceptChanges, Int32& itemIndex);
    internal bool HasTrackedChanges();
    private void RemoveChangedFormat(TextBodyItem item);
    internal void MoveTextBodyItems(WTextBody srcTextBody);
    private bool CheckMoveToNext(TextBodyItem item, bool acceptChanges);
    private bool MoveToNextPara(TextBodyItem item);
    protected virtual void InitXDLSHolder();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    protected virtual IEntityCollectionBase get_WidgetCollection();
    internal bool IsAutoFit(Boolean& isNeedToUpdateWidth, IWidget entity);
    internal void UpdateMatchIndex();
    internal virtual void Compare(WordDocument originalDocument);
    internal void UpdateIndex(int bodyItemIndex, int paraItemIndex, int startRangeIndex, int endRangeIndex, int textStartIndex, int textEndIndex);
    internal void Compare(WTextBody originalTextBody);
    private void BackUpCollections(WTextBody originalTextBody, List`1<BlockContentControl> blockContentControls, List`1<InlineContentControl> inlineContentControls, List`1<Shape> shapes, List`1<GroupShape> groupShapes, List`1<WPicture> pictures, List`1<WTextBox> textBoxes, List`1<WChart> charts, List`1<WField> fields, List`1<WTable> tables, List`1<WMath> maths, List`1<WOleObject> oles, List`1<TableOfContent> tocs);
    private void ClearCollections(Comparison comparison);
    private void ResetCollections(Comparison comparison, List`1<BlockContentControl> blockContentControls, List`1<InlineContentControl> inlineContentControls, List`1<Shape> shapes, List`1<GroupShape> groupShapes, List`1<WPicture> pictures, List`1<WTextBox> textBoxes, List`1<WChart> charts, List`1<WField> fields, List`1<WTable> tables, List`1<WMath> maths, List`1<WOleObject> oles, List`1<TableOfContent> tocs);
    private void EndOfTheTextBody(WTextBody originalTextBody);
    private void DeleteItemsToTextBody(WTextBody originalTextBody);
    private void InsertItemsToTextBody(WTextBody originalTextBody);
    internal StringBuilder GetAsString();
}
public class Syncfusion.DocIO.DLS.WTextBox : ParagraphItem {
    internal WTextBody m_textBody;
    protected WTextBoxFormat m_txbxFormat;
    private int m_txbxSpid;
    internal Dictionary`2<string, Stream> m_docxProps;
    private Shape m_shape;
    private RectangleF m_textLayoutingBounds;
    private byte m_bFlags;
    public string Name { get; public set; }
    public bool Visible { get; public set; }
    public EntityCollection ChildEntities { get; }
    public EntityType EntityType { get; }
    internal RectangleF TextLayoutingBounds { get; internal set; }
    internal bool IsShape { get; internal set; }
    internal Dictionary`2<string, Stream> DocxProps { get; }
    public WTextBoxFormat TextBoxFormat { get; public set; }
    public WTextBody TextBoxBody { get; }
    internal int TextBoxSpid { get; internal set; }
    internal WCharacterFormat CharacterFormat { get; }
    internal Shape Shape { get; internal set; }
    private ILayoutInfo Syncfusion.Layouting.IWidget.LayoutInfo { get; }
    public WTextBox(IWordDocument doc);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual EntityCollection get_ChildEntities();
    public virtual EntityType get_EntityType();
    internal RectangleF get_TextLayoutingBounds();
    internal void set_TextLayoutingBounds(RectangleF value);
    internal bool get_IsShape();
    internal void set_IsShape(bool value);
    internal Dictionary`2<string, Stream> get_DocxProps();
    public sealed virtual WTextBoxFormat get_TextBoxFormat();
    public sealed virtual void set_TextBoxFormat(WTextBoxFormat value);
    public sealed virtual WTextBody get_TextBoxBody();
    internal int get_TextBoxSpid();
    internal void set_TextBoxSpid(int value);
    internal WCharacterFormat get_CharacterFormat();
    internal Shape get_Shape();
    internal void set_Shape(Shape value);
    internal virtual void AddSelf();
    internal virtual void AttachToDocument();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    protected virtual object CloneImpl();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal bool IsNoNeedToConsiderLineWidth();
    internal void CalculateBoundsBasedOnLineWidth(RectangleF& bounds, WTextBoxFormat textBoxFormat);
    internal virtual void Detach();
    internal TextBodyItem GetNextTextBodyItem();
    internal virtual void Close();
    internal void SetTextBody(WTextBody textBody);
    internal WTable GetAsTable(int currPageIndex);
    private float GetRightMarginHorizPosition(float pageWidth, float rightMargin, ShapeHorizontalAlignment horzAlignment, float horzPosition, float shapeWidth, TextWrappingStyle textWrapStyle);
    private float GetLeftMarginHorizPosition(float leftMargin, ShapeHorizontalAlignment horzAlignment, float horzPosition, float shapeWidth, TextWrappingStyle textWrapStyle);
    private RowAlignment GetHorAlign(ShapeHorizontalAlignment shapeAlign);
    internal BorderStyle GetBordersStyle(TextBoxLineStyle lineStyle);
    internal void InitializeVMLDefaultValues();
    internal void ApplyCharacterFormat(WCharacterFormat charFormat);
    internal bool Compare(WTextBox textBox);
    internal StringBuilder GetAsString();
    internal StringBuilder GetProperties();
    internal List`1<string> GetIgnorableProperties();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    private sealed virtual override ILayoutInfo Syncfusion.Layouting.IWidget.get_LayoutInfo();
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    internal Byte[] GetAsImage();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.DocIO.DLS.WTextBoxCollection : EntityCollection {
    private static Type[] TYPES;
    public IWTextBox Item { get; }
    protected Type[] TypesOfElement { get; }
    public WTextBoxCollection(IWordDocument doc);
    private static WTextBoxCollection();
    public sealed virtual IWTextBox get_Item(int index);
    protected virtual Type[] get_TypesOfElement();
    public sealed virtual int Add(IWTextBox textBox);
}
public class Syncfusion.DocIO.DLS.WTextBoxFormat : FormatBase {
    internal static float DEF_LINE_WIDTH;
    internal static byte LineWidthKey;
    private HorizontalOrigin m_horizRelation;
    private VerticalOrigin m_vertRelation;
    private WidthOrigin m_widthRelation;
    private HeightOrigin m_heightRelation;
    private float m_width;
    private float m_height;
    private Color m_fillColor;
    private Color m_lineColor;
    private TextBoxLineStyle m_lineStyle;
    private TextWrappingStyle m_wrapStyle;
    private float m_wrapDistanceBottom;
    private float m_wrapDistanceLeft;
    private float m_wrapDistanceRight;
    private float m_wrapDistanceTop;
    private float m_horPosition;
    private float m_verPosition;
    private int m_spid;
    internal float m_txbxLineWidth;
    private LineDashing m_lineDashing;
    private TextWrappingType m_wrappingType;
    private WrapMode m_wrapMode;
    private float m_txID;
    private byte m_bFlags;
    private ShapeHorizontalAlignment m_horizAlignment;
    private ShapeVerticalAlignment m_verticalAlignment;
    private VerticalAlignment m_textVerticalAlignment;
    private InternalMargin m_intMargin;
    private Background m_background;
    private int m_orderIndex;
    private List`1<string> m_styleProps;
    private float m_widthRelPercent;
    private float m_heightRelPercent;
    private float m_horRelPercent;
    private float m_verRelPercent;
    private TextDirection m_textDirection;
    private Color m_textThemeColor;
    internal short WrapCollectionIndex;
    private WrapPolygon m_wrapPolygon;
    private List`1<Stream> m_docxProps;
    private string m_name;
    private float m_rotation;
    private byte m_bflag;
    private string m_path;
    private float m_coordinateXOrigin;
    private float m_coordinateYOrigin;
    private string m_coordinateSize;
    private List`1<Path2D> m_vmlPathPoints;
    internal bool m_isVMLPathUpdated;
    internal bool IsWrappingBoundsAdded { get; internal set; }
    internal string Name { get; internal set; }
    public WidthOrigin WidthOrigin { get; public set; }
    public HeightOrigin HeightOrigin { get; public set; }
    public HorizontalOrigin HorizontalOrigin { get; public set; }
    public VerticalOrigin VerticalOrigin { get; public set; }
    public TextWrappingStyle TextWrappingStyle { get; public set; }
    internal float WrapDistanceBottom { get; internal set; }
    internal float WrapDistanceLeft { get; internal set; }
    internal float WrapDistanceRight { get; internal set; }
    internal float WrapDistanceTop { get; internal set; }
    public Color FillColor { get; public set; }
    public TextBoxLineStyle LineStyle { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public Color LineColor { get; public set; }
    public bool NoLine { get; public set; }
    internal WrapMode WrappingMode { get; internal set; }
    public float HorizontalPosition { get; public set; }
    internal bool IsBelowText { get; internal set; }
    public float VerticalPosition { get; public set; }
    public TextWrappingType TextWrappingType { get; public set; }
    internal int TextBoxShapeID { get; internal set; }
    public float LineWidth { get; public set; }
    public LineDashing LineDashing { get; public set; }
    public ShapeHorizontalAlignment HorizontalAlignment { get; public set; }
    public ShapeVerticalAlignment VerticalAlignment { get; public set; }
    public VerticalAlignment TextVerticalAlignment { get; public set; }
    internal float TextBoxIdentificator { get; internal set; }
    internal bool IsHeaderTextBox { get; internal set; }
    public InternalMargin InternalMargin { get; }
    public float Rotation { get; public set; }
    public bool FlipHorizontal { get; public set; }
    public bool FlipVertical { get; public set; }
    public Background FillEfects { get; }
    internal bool AllowInCell { get; internal set; }
    internal int OrderIndex { get; internal set; }
    internal List`1<string> DocxStyleProps { get; }
    internal bool HasDocxProps { get; }
    public bool AutoFit { get; public set; }
    internal float WidthRelativePercent { get; internal set; }
    internal float HeightRelativePercent { get; internal set; }
    internal float HorizontalRelativePercent { get; internal set; }
    internal float VerticalRelativePercent { get; internal set; }
    public TextDirection TextDirection { get; public set; }
    internal Color TextThemeColor { get; internal set; }
    public bool AllowOverlap { get; public set; }
    internal WrapPolygon WrapPolygon { get; internal set; }
    internal List`1<Stream> DocxProps { get; }
    internal string Path { get; internal set; }
    internal string CoordinateSize { get; internal set; }
    internal float CoordinateXOrigin { get; internal set; }
    internal float CoordinateYOrigin { get; internal set; }
    internal List`1<Path2D> VMLPathPoints { get; internal set; }
    public WTextBoxFormat(WordDocument doc);
    internal bool get_IsWrappingBoundsAdded();
    internal void set_IsWrappingBoundsAdded(bool value);
    internal string get_Name();
    internal void set_Name(string value);
    public WidthOrigin get_WidthOrigin();
    public void set_WidthOrigin(WidthOrigin value);
    public HeightOrigin get_HeightOrigin();
    public void set_HeightOrigin(HeightOrigin value);
    public HorizontalOrigin get_HorizontalOrigin();
    public void set_HorizontalOrigin(HorizontalOrigin value);
    public VerticalOrigin get_VerticalOrigin();
    public void set_VerticalOrigin(VerticalOrigin value);
    public TextWrappingStyle get_TextWrappingStyle();
    public void set_TextWrappingStyle(TextWrappingStyle value);
    internal float get_WrapDistanceBottom();
    internal void set_WrapDistanceBottom(float value);
    internal float get_WrapDistanceLeft();
    internal void set_WrapDistanceLeft(float value);
    internal float get_WrapDistanceRight();
    internal void set_WrapDistanceRight(float value);
    internal float get_WrapDistanceTop();
    internal void set_WrapDistanceTop(float value);
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public TextBoxLineStyle get_LineStyle();
    public void set_LineStyle(TextBoxLineStyle value);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public bool get_NoLine();
    public void set_NoLine(bool value);
    internal WrapMode get_WrappingMode();
    internal void set_WrappingMode(WrapMode value);
    public float get_HorizontalPosition();
    public void set_HorizontalPosition(float value);
    internal bool get_IsBelowText();
    internal void set_IsBelowText(bool value);
    public float get_VerticalPosition();
    public void set_VerticalPosition(float value);
    public TextWrappingType get_TextWrappingType();
    public void set_TextWrappingType(TextWrappingType value);
    internal int get_TextBoxShapeID();
    internal void set_TextBoxShapeID(int value);
    public float get_LineWidth();
    public void set_LineWidth(float value);
    public LineDashing get_LineDashing();
    public void set_LineDashing(LineDashing value);
    public ShapeHorizontalAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(ShapeHorizontalAlignment value);
    public ShapeVerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(ShapeVerticalAlignment value);
    public VerticalAlignment get_TextVerticalAlignment();
    public void set_TextVerticalAlignment(VerticalAlignment value);
    internal float get_TextBoxIdentificator();
    internal void set_TextBoxIdentificator(float value);
    internal bool get_IsHeaderTextBox();
    internal void set_IsHeaderTextBox(bool value);
    public InternalMargin get_InternalMargin();
    public float get_Rotation();
    public void set_Rotation(float value);
    public bool get_FlipHorizontal();
    public void set_FlipHorizontal(bool value);
    public bool get_FlipVertical();
    public void set_FlipVertical(bool value);
    public Background get_FillEfects();
    internal bool get_AllowInCell();
    internal void set_AllowInCell(bool value);
    internal int get_OrderIndex();
    internal void set_OrderIndex(int value);
    internal List`1<string> get_DocxStyleProps();
    internal bool get_HasDocxProps();
    public bool get_AutoFit();
    public void set_AutoFit(bool value);
    internal float get_WidthRelativePercent();
    internal void set_WidthRelativePercent(float value);
    internal float get_HeightRelativePercent();
    internal void set_HeightRelativePercent(float value);
    internal float get_HorizontalRelativePercent();
    internal void set_HorizontalRelativePercent(float value);
    internal float get_VerticalRelativePercent();
    internal void set_VerticalRelativePercent(float value);
    public TextDirection get_TextDirection();
    public void set_TextDirection(TextDirection value);
    internal Color get_TextThemeColor();
    internal void set_TextThemeColor(Color value);
    public bool get_AllowOverlap();
    public void set_AllowOverlap(bool value);
    internal WrapPolygon get_WrapPolygon();
    internal void set_WrapPolygon(WrapPolygon value);
    internal List`1<Stream> get_DocxProps();
    internal string get_Path();
    internal void set_Path(string value);
    internal string get_CoordinateSize();
    internal void set_CoordinateSize(string value);
    internal float get_CoordinateXOrigin();
    internal void set_CoordinateXOrigin(float value);
    internal float get_CoordinateYOrigin();
    internal void set_CoordinateYOrigin(float value);
    internal List`1<Path2D> get_VMLPathPoints();
    internal void set_VMLPathPoints(List`1<Path2D> value);
    public virtual void ClearFormatting();
    protected virtual object GetDefValue(int key);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    internal bool HasKeyValue(int Key);
    internal void SetKeyValue(int propKey, object value);
    internal virtual void Close();
    public WTextBoxFormat Clone();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal bool Compare(WTextBoxFormat textboxFormat);
    internal StringBuilder GetAsString();
    internal void UpdateFillEffects(MsofbtSpContainer container, WordDocument doc);
    internal void SetTextWrappingStyleValue(TextWrappingStyle textWrappingStyle);
}
public class Syncfusion.DocIO.DLS.WTextFormField : WFormField {
    internal static string DEF_TEXT;
    private TextFormFieldType m_formFieldType;
    private string m_defText;
    private int m_maxLength;
    private string m_strTextFormat;
    private WTextRange m_text;
    private short m_iFieldSeparator;
    public EntityType EntityType { get; }
    public TextFormFieldType Type { get; public set; }
    public string StringFormat { get; public set; }
    public string DefaultText { get; public set; }
    public int MaximumLength { get; public set; }
    public WTextRange TextRange { get; public set; }
    public string Text { get; public set; }
    public WTextFormField(IWordDocument doc);
    public virtual EntityType get_EntityType();
    public TextFormFieldType get_Type();
    public void set_Type(TextFormFieldType value);
    public string get_StringFormat();
    public void set_StringFormat(string value);
    public string get_DefaultText();
    public void set_DefaultText(string value);
    public int get_MaximumLength();
    public void set_MaximumLength(int value);
    public WTextRange get_TextRange();
    public void set_TextRange(WTextRange value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    internal virtual void Close();
    protected virtual object CloneImpl();
    private WTextRange GetFirstTextRange();
    private void GetTextRangeValue();
    private string UpdateTextBodyItemText(Entity entity);
    private string UpdateTextForTable(Entity entity);
    private string UpdateParagraphItemText(Entity entity);
    private void SetTextRangeValue(WTextRange textRange);
    private void RemovePreviousText();
    private void RemoveTextBodyItem(Entity entity);
    private void InsertParagraphItems(WParagraph paragraph);
    private void RemoveParagraphItem(Entity entity);
    private void AppendDateTimeField(FieldType fieldType);
    internal void SetTextFormFieldType(TextFormFieldType txtFormFieldType);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void InitXDLSHolder();
    internal virtual StringBuilder GetAsString();
}
public class Syncfusion.DocIO.DLS.WTextRange : ParagraphItem {
    private int m_txtLength;
    private string m_detachedText;
    private string m_originalText;
    private float m_ascent;
    private byte m_bFlags;
    private CharacterRangeType m_charRangeType;
    private FontScriptType m_fontScriptType;
    internal int m_wcEndPos;
    private int m_wcTextLength;
    public EntityType EntityType { get; }
    public string Text { get; public set; }
    internal string OrignalText { get; internal set; }
    public WCharacterFormat CharacterFormat { get; internal set; }
    internal int TextLength { get; internal set; }
    internal CharacterRangeType CharacterRange { get; internal set; }
    internal FontScriptType ScriptType { get; internal set; }
    internal int EndPos { get; }
    internal bool SafeText { get; internal set; }
    internal bool IsParagraphMark { get; }
    internal int WCTextLength { get; internal set; }
    internal int WCEndPos { get; }
    internal int WCStartPos { get; internal set; }
    public WTextRange(IWordDocument doc);
    public virtual EntityType get_EntityType();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    private void UpdateXMLMappedValue(WParagraph ownerPara, string value);
    internal string get_OrignalText();
    internal void set_OrignalText(string value);
    public sealed virtual WCharacterFormat get_CharacterFormat();
    internal void set_CharacterFormat(WCharacterFormat value);
    internal int get_TextLength();
    internal void set_TextLength(int value);
    internal CharacterRangeType get_CharacterRange();
    internal void set_CharacterRange(CharacterRangeType value);
    internal FontScriptType get_ScriptType();
    internal void set_ScriptType(FontScriptType value);
    internal virtual int get_EndPos();
    internal bool get_SafeText();
    internal void set_SafeText(bool value);
    internal bool get_IsParagraphMark();
    internal virtual void AttachToParagraph(WParagraph paragraph, int itemPos);
    internal void Attach(WParagraph paragraph, int itemPos, bool isField);
    internal void InsertTextInParagraphText(WParagraph paragraph);
    internal virtual void Detach();
    internal void Detach(bool isField);
    protected virtual object CloneImpl();
    internal object CloneImpl(bool isField);
    public sealed virtual void ApplyCharacterFormat(WCharacterFormat charFormat);
    internal void SplitWidgets();
    private void SplitByTab();
    private WField GetHyperLinkField(WParagraph ownerParagraph, Int32& rangeIndex);
    internal virtual void Close();
    private void SplitByParagraphBreak();
    protected virtual void InitXDLSHolder();
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal SizeF GetTextRangeSize(WTextRange clonedTextRange);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    private sealed virtual override SizeF Syncfusion.Layouting.ITextMeasurable.Measure(string text);
    private sealed virtual override SizeF Syncfusion.Layouting.ITextMeasurable.Measure(DrawingContext dc, string text);
    private sealed virtual override double Syncfusion.Layouting.IStringWidget.GetTextAscent(DrawingContext dc, Single& exceededLineAscent);
    private Font GetFont();
    private sealed virtual override int Syncfusion.Layouting.IStringWidget.OffsetToIndex(DrawingContext dc, double offset, string text, float clientWidth, float clientActiveAreaWidth, bool isSplitByCharacter);
    internal float GetClientWidth(DrawingContext dc, float clientWidth);
    private sealed virtual override ISplitLeafWidget[] Syncfusion.Layouting.ISplitLeafWidget.SplitBySize(DrawingContext dc, SizeF offset, float clientWidth, float clientActiveAreaWidth, Boolean& isLastWordFit, bool isTabStopInterSectingfloattingItem, bool isSplitByCharacter, bool isFirstItemInLine, Int32& countForConsecutivelimit, Layouter layouter, Boolean& isHyphenated);
    private sealed virtual override SizeF Syncfusion.Layouting.ILeafWidget.Measure(DrawingContext dc);
    private bool IsLastTextRangeWithSpace(string text);
    private bool IsSpaceWidthSetToZero(WParagraph ownerPara, string text);
    internal int get_WCTextLength();
    internal void set_WCTextLength(int value);
    internal virtual int get_WCEndPos();
    internal virtual int get_WCStartPos();
    internal virtual void set_WCStartPos(int value);
}
internal class Syncfusion.DocIO.DLS.XAttribute : object {
    private string m_name;
    private string m_value;
    internal string LocalName { get; internal set; }
    internal string Name { get; internal set; }
    internal string Value { get; internal set; }
    internal string get_LocalName();
    internal void set_LocalName(string value);
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Value();
    internal void set_Value(string value);
}
internal class Syncfusion.DocIO.DLS.XDocument : object {
    private XNode m_rootNode;
    public XNode RootNode { get; public set; }
    public XNode get_RootNode();
    public void set_RootNode(XNode value);
    internal void LoadXml(XmlReader reader);
    private void SkipWhitespaces(XmlReader reader);
    private void AddNode(XmlReader reader, XNode parent, XmlNodeType nodeType);
}
[ExtensionAttribute]
internal static class Syncfusion.DocIO.DLS.XDocumentExtension : object {
    [ExtensionAttribute]
internal static XNode SelectSingleNode(XDocument document, string xPath);
}
public enum Syncfusion.DocIO.DLS.XHTMLValidationType : Enum {
    public int value__;
    public static XHTMLValidationType Strict;
    public static XHTMLValidationType Transitional;
    public static XHTMLValidationType None;
}
public interface Syncfusion.DocIO.DLS.XML.IXDLSAttributeReader {
    public abstract virtual bool HasAttribute(string name);
    public abstract virtual string ReadString(string name);
    public abstract virtual int ReadInt(string name);
    public abstract virtual short ReadShort(string name);
    public abstract virtual float ReadFloat(string name);
    public abstract virtual bool ReadBoolean(string name);
    public abstract virtual byte ReadByte(string name);
    public abstract virtual Enum ReadEnum(string name, Type enumType);
    public abstract virtual Color ReadColor(string name);
}
public interface Syncfusion.DocIO.DLS.XML.IXDLSAttributeWriter {
    public abstract virtual void WriteValue(string name, float value);
    public abstract virtual void WriteValue(string name, double value);
    public abstract virtual void WriteValue(string name, int value);
    public abstract virtual void WriteValue(string name, string value);
    public abstract virtual void WriteValue(string name, Enum value);
    public abstract virtual void WriteValue(string name, bool value);
    public abstract virtual void WriteValue(string name, Color value);
    public abstract virtual void WriteValue(string name, DateTime value);
}
public interface Syncfusion.DocIO.DLS.XML.IXDLSContentReader {
    public string TagName { get; }
    public XmlNodeType NodeType { get; }
    public XmlReader InnerReader { get; }
    public IXDLSAttributeReader AttributeReader { get; }
    public abstract virtual string get_TagName();
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual string GetAttributeValue(string name);
    public abstract virtual bool ReadChildElement(object value);
    public abstract virtual object ReadChildElement(Type type);
    public abstract virtual string ReadChildStringContent();
    public abstract virtual Byte[] ReadChildBinaryElement();
    public abstract virtual XmlReader get_InnerReader();
    public abstract virtual IXDLSAttributeReader get_AttributeReader();
}
public interface Syncfusion.DocIO.DLS.XML.IXDLSContentWriter {
    public XmlWriter InnerWriter { get; }
    public abstract virtual void WriteChildBinaryElement(string name, Byte[] value);
    public abstract virtual void WriteChildStringElement(string name, string value);
    public abstract virtual void WriteChildElement(string name, object value);
    public abstract virtual void WriteChildRefElement(string name, int refToElement);
    public abstract virtual XmlWriter get_InnerWriter();
}
public interface Syncfusion.DocIO.DLS.XML.IXDLSFactory {
    public abstract virtual IXDLSSerializable Create(IXDLSContentReader reader);
}
public interface Syncfusion.DocIO.DLS.XML.IXDLSSerializable {
    public XDLSHolder XDLSHolder { get; }
    public abstract virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    public abstract virtual void WriteXmlContent(IXDLSContentWriter writer);
    public abstract virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    public abstract virtual bool ReadXmlContent(IXDLSContentReader reader);
    public abstract virtual XDLSHolder get_XDLSHolder();
    public abstract virtual void RestoreReference(string name, int value);
}
public interface Syncfusion.DocIO.DLS.XML.IXDLSSerializableCollection {
    public string TagItemName { get; }
    public int Count { get; }
    public abstract virtual IXDLSSerializable AddNewItem(IXDLSContentReader reader);
    public abstract virtual string get_TagItemName();
    public abstract virtual int get_Count();
}
public class Syncfusion.DocIO.DLS.XML.PropertyNames : object {
    public static string X1;
    public static string X2;
    public static string Y1;
    public static string Y2;
    public static string X3;
    public static string X4;
    public static string Y3;
    public static string Y4;
    public static string Type;
    public static string X;
    public static string Y;
    public static string Width;
    public static string Height;
    public static string StartAngle;
    public static string SweepAngle;
    public static string FillMode;
    public static string Items;
    public static string Item;
    public static string Points;
    public static string Point;
    public static string Style;
    public static string Text;
    public static string Shapes;
    public static string BorderColor;
    public static string Format;
    public static string ShapeFormat;
    public static string NoFill;
    public static string Color;
    public static string GradientFill;
    public static string GradientColorStart;
    public static string GradientColorEnd;
    public static string GradientMode;
    public static string NoLine;
    public static string DashStyle;
    public static string Line;
    public static string Fill;
    public static string Transform;
    public static string M11;
    public static string M12;
    public static string M21;
    public static string M22;
    public static string D1;
    public static string D2;
}
public class Syncfusion.DocIO.DLS.XML.XDLSConstants : object {
    public static string SectionsTag;
    public static string StylesTag;
    public static string ListStylesTag;
    public static string SectionItemTag;
    public static string PageSetupTag;
    public static string PageSetupFirstPageAttr;
    public static string PageSetupDiffOddEvenPagesAttr;
    public static string ColumnsTag;
    public static string ColumnTag;
    public static string ParagraphsTag;
    public static string HeadersFootersTag;
    public static string TextBodyTag;
    public static string TOCFieldTag;
    public static string SectionBreakCodeAttr;
    public static string StyleItemTag;
    public static string CharacterFormatTag;
    public static string ParagraphFormatTag;
    public static string TableFormatTag;
    public static string CellFormatTag;
    public static string ListFormatTag;
    public static string StyleBaseTag;
    public static string ShapeFormatTag;
    public static string ListLevelItemTag;
    public static string ListLevelsTag;
    public static string ListLevelInternalDataTag;
    public static string ListLevelPrefPatternAttr;
    public static string ListLevelSufPatternAttr;
    public static string ListLevelBulletPatternAttr;
    public static string ListLevelIndentAttr;
    public static string ListLevelPrevPatternAttr;
    public static string ListLevelPatternTypeAttr;
    public static string ListLevelStartAtAttr;
    public static string ListLevelNumberAlignAttr;
    public static string ListLevelFollowCharacterAttr;
    public static string ListLevelIsLegalAttr;
    public static string ListLevelNoRestartNum;
    public static string ListFormatTypeAttr;
    public static string ListFormatLevelNumAttr;
    public static string ListFormatStyleNameAttr;
    public static string StyleNameAttr;
    public static string StyleBaseNameAttr;
    public static string PenColorAttr;
    public static string PenBrushAttr;
    public static string PSPageHeightAttr;
    public static string PSPageWidthAttr;
    public static string PSAlignmentAttr;
    public static string PSFooterDistanceAttr;
    public static string PSHeaderDistanceAttr;
    public static string PSOrientationAttr;
    public static string PSBottomMarginAttr;
    public static string PSTopMarginAttr;
    public static string PSLeftMarginAttr;
    public static string PSRightMarginAttr;
    public static string PSSpacingBeforeColumnsAttr;
    public static string EvenHeaderTag;
    public static string OddHeaderTag;
    public static string EvenFooterTag;
    public static string OddFooterTag;
    public static string FirstPageHeaderTag;
    public static string FirstPageFooterTag;
    public static string ColumnItemTag;
    public static string ColumnsItemTag;
    public static string CellItemTag;
    public static string CellsItemTag;
    public static string RowItemTag;
    public static string RowsItemTag;
    public static string TableVrAlignmentAttr;
    public static string TableHrAlignmentAttr;
    public static string TableVrMergeAttr;
    public static string TableHorizMergeAttr;
    public static string TableWidthAttr;
    public static string TableCellWidthAttr;
    public static string TableCellShadingColorAttr;
    public static string TableRowHeigthAttr;
    public static string TableRowHeaderAttr;
    public static string TableRowHeighTypeAttr;
    public static string TableLeftIndentAttr;
    public static string TableCellPaddingsAttr;
    public static string CellSpacing;
    public static string LeftOffset;
    public static string CellTextWrapAttr;
    public static string CellSamePaddingsAsTableAttr;
    public static string TableCellTextureAttr;
    public static string TableCellForeColorAttr;
    public static string TableCellFitTextAttr;
    public static string TableCellTextDirAttr;
    public static string ParagraphItemTag;
    public static string ItemsTag;
    public static string ItemTag;
    public static string ItemTypeParagraphValue;
    public static string ItemTypeTableValue;
    public static string ParagraphTabsAttr;
    public static string ParagraphHrAlignmentAttr;
    public static string ParagraphVrAlignmentAttr;
    public static string ParagraphLeftIndentAttr;
    public static string ParagraphRightIndentAttr;
    public static string ParagraphFirstLineIndentAttr;
    public static string ParagraphKeepAttr;
    public static string ParagraphBeforeSpacingAttr;
    public static string ParagraphAfterSpacingAttr;
    public static string ParagraphKeepFollowAttr;
    public static string ParagraphWidowControlAttr;
    public static string ParagraphPageBreakBeforeAttr;
    public static string ParagraphPageBreakAfterAttr;
    public static string ParagraphColumnBreakAfterAttr;
    public static string ParagraphBackColorAttr;
    public static string ParagraphBidiAttr;
    public static string TabPositionAttr;
    public static string TabJustificationAttr;
    public static string TabLeaderAttr;
    public static string TabTag;
    public static string AutoTabWidthAttr;
    public static string TabDeleteAttr;
    public static string ShapeItemTag;
    public static string ColumnWidthAttr;
    public static string ColumnSpacingAttr;
    public static string ImageTag;
    public static string ImageIsMetafileAttr;
    public static string WidthScale;
    public static string HeightScale;
    public static string PictBrightnessAttr;
    public static string PictContrastAttr;
    public static string PictColorAttr;
    public static string CropFromLeft;
    public static string CropFromRight;
    public static string CropFromTop;
    public static string CropFromBottom;
    public static string TextRangeTag;
    public static string TextTag;
    public static string TypeTag;
    public static string PaddingBottomTag;
    public static string PaddingTopTag;
    public static string PaddingLeftTag;
    public static string PaddingRightTag;
    public static string BorderBottomTag;
    public static string BorderTopTag;
    public static string BorderLeftTag;
    public static string BorderRightTag;
    public static string BorderHorizontalTag;
    public static string BorderVerticalTag;
    public static string BordersItemTag;
    public static string BorderColorAttr;
    public static string BorderWidthAttr;
    public static string BorderTypeAttr;
    public static string BorderSpaceAttr;
    public static string BorderShadowAttr;
    public static string TextColorAttr;
    public static string TextFontNameAttr;
    public static string TextFontSizeAttr;
    public static string TextBoldAttr;
    public static string TextItalicAttr;
    public static string TextStrikeAttr;
    public static string TextDoubleStrikeAttr;
    public static string TextUnderlineAttr;
    public static string TextSubSuperScriptAttr;
    public static string TextLineSpacingAttr;
    public static string TextPositionAttr;
    public static string TextBackgroundColorAttr;
    public static string TextLineBreakAttr;
    public static string TextBoxFormatTag;
    public static string ShapeWidthAttr;
    public static string ShapeHeightAttr;
    public static string ShapeLineStyleAttr;
    public static string ShapeTextWrappingStyleAttr;
    public static string ShapeFillColorAttr;
    public static string ShapeLineColorAttr;
    public static string HFTextBoxesTag;
    public static string TextBoxesTag;
    public static string BookMarkNameAttr;
    public static string Bookmark;
    public static string IsCellGroupBkmkAttr;
    public static string FilePath;
    public static string Uri;
    public static string HyperlinkType;
    public static string Hyperlink;
    public static string PictureCharFormatTag;
    public static string BreakTypeAttr;
    public static string ProtectionTypeAttr;
    public static string ShadeFormDataAttr;
    public static string MacrosTag;
    public static string EscherContainersTag;
    public static string EscherDataConatinersTag;
    public static string MacroCommandsTag;
    public static string DOPFormatting1Attr;
    public static string DOPDxaHotZAttr;
    public static string DOPConsecAttr;
    public static string DOPInternalData;
    public static string StandardAsciiFont;
    public static string StandardFarEastFont;
    public static string StandardNonFarEastFont;
    public static string MergeFieldNameAttr;
    public static string FieldConvertedAttr;
    public static string MergeFieldTextBeforeAttr;
    public static string MergeFieldTextAfterAttr;
    public static string MergeFieldNumberFormatAttr;
    public static string MergeFieldDateFormatAttr;
    public static string MergeFieldPrefixAttr;
    public static string FieldUpperCaseAttr;
    public static string FieldLowerCaseAttr;
    public static string FieldTitleCaseAttr;
    public static string FieldFirstCapitalAttr;
    public static string FieldIsLocalAttr;
    public static string FieldTypeAttr;
    public static string FieldNameAttr;
    public static string FieldValueAttr;
    public static string FieldMarkTypeAttr;
    public static string FieldFormattingAttr;
    public static string EmbedFieldStorageNameAttr;
    public static string FormFieldParamsAttr;
    public static string FormFieldMaxLengthAttr;
    public static string FormFieldCheckBoxSizeAttr;
    public static string FormFieldCheckBoxSizeType;
    public static string FormFieldTitleAttr;
    public static string FormFieldDefTextAttr;
    public static string FormFieldDefaultCheckBoxValueAttr;
    public static string FormFieldDefaultDropDownValueAttr;
    public static string FormFieldTextFormatAttr;
    public static string FormFieldStrTextFormatAttr;
    public static string FormFieldHelpAttr;
    public static string FormFieldTooltipAttr;
    public static string FormFieldMacroOnStartAttr;
    public static string FormFieldMacroOnEndAttr;
    public static string FormFieldIsSpecialAttr;
    public static string FormFieldTextTypeAttr;
    public static string FormFieldDropDownItemsTag;
    public static string FormFieldDropDownItemTextAttr;
    public static string BuiltinPropertiesTag;
    public static string CustomPropertiesTag;
    public static string PropertyTag;
    public static string CharacterStylesTag;
    public static string TextCharStyleName;
    public static string ListOverridesTag;
    public static string StyleIdAttr;
    public static string PropertiesCompanyAttr;
    public static string PropertiesManagerAttr;
    public static string PropertiesCategoryAttr;
    public static string PropertiesBytesCountAttr;
    public static string PropertiesLinesCountAttr;
    public static string PropertiesParagraphCountAttr;
    public static string PropertiesSlideCountAttr;
    public static string PropertiesNoteCountAttr;
    public static string PropertiesHiddenCountAttr;
    public static string PropertiesAuthorAttr;
    public static string PropertiesApplicationNameAttr;
    public static string PropertiesTitleAttr;
    public static string PropertiesSubjectAttr;
    public static string PropertiesKeywordsAttr;
    public static string PropertiesCommentsAttr;
    public static string PropertiesTemplateAttr;
    public static string PropertiesLastAuthorAttr;
    public static string PropertiesRevisionNumberAttr;
    public static string PropertiesEditTimeAttr;
    public static string PropertiesLastPrintedAttr;
    public static string PropertiesCreateDateAttr;
    public static string PropertiesLastSaveDateAttr;
    public static string PropertiesPageCountAttr;
    public static string PropertiesWordCountAttr;
    public static string PropertiesCharCountAttr;
    public static string PropertiesThumbnailAttr;
    public static string PropertiesDocSecurityAttr;
    public static string PropertiesTypeAttr;
    public static string PropertiesNameAttr;
    public static string PropertiesValueAttr;
    public static string ListFormatListTypeAttr;
    public static string ListFormatUseBaseStyleAttr;
    public static string ListFormatLfoStyleNameAttr;
    public static string ListFormatHybridAttr;
    public static string ListFormatSimpleAttr;
    public static string ListLevelLegacyAttr;
    public static string ListLevelLegacySpaceAttr;
    public static string ListLevelLegacyIndentAttr;
    public static string LevelOverrideTag;
    public static string LevelOverrideStartAtAttr;
    public static string LevelOverrideFormatAttr;
    public static string LevelOverrideStartAttr;
    public static string LevelOverrideReserved1Attr;
    public static string LevelOverrideReserved2Attr;
    public static string LevelOverrideReserved3Attr;
    public static string OverrideListLevelsTag;
    public static string OverrideListLevelTag;
    public static string OverrideListStyleTag;
    public static string OverrideListStyleNameAttr;
    public static string OverrideListRes1Attr;
    public static string OverrideListRes2Attr;
    public static string OverrideListUnused1Attr;
    public static string OverrideListUnused2Attr;
    public static string TableIsAutoResizedAttr;
    public static string TableIsBreakAcrossPagesAttr;
    public static string TableBidiAttr;
    public static string InternalDataTag;
    public static string ShapeContainerDataTag;
    public static string ShapeBlipTag;
    public static string ShapeFbseTag;
    public static string PictureDescriptorTag;
    public static string ShapeObjIsOLEAttr;
    public static string ShapeObjOLEContId;
    public static string TextShadowAttr;
    public static string TextEmbossAttr;
    public static string TextEngraveAttr;
    public static string TextHiddenAttr;
    public static string TextHiddenComplexAttr;
    internal static string TextSpecVanishAttr;
    public static string TextDStrikeComplexAttr;
    public static string TextSmallCapsComplexAttr;
    public static string TextStrikeComplexAttr;
    public static string TextAllCapsAttr;
    public static string TextSmallCapsAttr;
    public static string TextBidiAttr;
    public static string TextBoldBidiAttr;
    public static string TextItalicBidiAttr;
    public static string TextFontSizeBidiAttr;
    public static string TextFontNameBidiAttr;
    public static string TextFontNameAsciiAttr;
    public static string TextFontNameFarEastAttr;
    public static string TextFontNameNonFarEastAttr;
    public static string TextHighlightColorKey;
    public static string TextItalicComplexKey;
    public static string TextShadowComplexAttr;
    public static string TextBoldComplexKey;
    public static string TextRgLid0Attr;
    public static string TextRgLid1Attr;
    public static string TextRgLid3Attr;
    public static string TextRgLid3_2Attr;
    public static string TextLidAttr;
    public static string TextLidBiAttr;
    public static string TextNoProofAttr;
    public static string TextIdctHintAttr;
    public static string TextAllCapsComplexKey;
    public static string TextTextureAttr;
    public static string TextForeColorAttr;
    public static string TextOutLineAttr;
    public static string TextEmbossComplex;
    public static string TextEngraveComplex;
    public static string TextBorderTag;
    public static string ParagraphLineSpacingAttr;
    public static string ParagraphLineSpacingRuleAttr;
    public static string ViewSetupTag;
    public static string ViewSetupZoomPercentAttr;
    public static string ViewSetupZoomTypeAttr;
    public static string ViewSetupViewTypeAttr;
    public static string PageSetupLineNumStepAttr;
    public static string PageSetupLineNumDistanceAttr;
    public static string PageSetupLineNumModeAttr;
    public static string PageSetupLineNumStartValueAttr;
    public static string PageSetupBorderApplyAttr;
    public static string PageSetupBorderOffsetFromAttr;
    public static string PageSetupBorderIsInFrontAttr;
    public static string PageSetupColumnEqualAttr;
    public static string SymbolCharCodeAttr;
    public static string SymbolCharCodeExtAttr;
    public static string TextBoxTag;
    public static string ShapeHorizOriginAttr;
    public static string ShapeVertOriginAttr;
    public static string ShapeHorizPositionAttr;
    public static string ShapeVertPositionAttr;
    public static string ShapeLineWidthAttr;
    public static string ShapeLineDashingAttr;
    public static string ShapeWrappingTypeAttr;
    public static string ShapeWrappingStyleAttr;
    public static string ShapeWrappingModeAttr;
    public static string ShapeIsBelowTextAttr;
    public static string ShapeNoLineAttr;
    public static string ShapeNoFillAttr;
    public static string ShapeHorizAlignAttr;
    public static string ShapeVertAlignAttr;
    public static string ShapeFrontOrderAttr;
    public static string ShapeIdentAttr;
    public static string ShapeTextBoxCountAttr;
    public static string ShapeIsHeaderAttr;
    public static string CommentTag;
    public static string CommentFormatTag;
    public static string CommentFormatUserInitialsAttr;
    public static string CommentFormatUserAttr;
    public static string CommentBookmarkStartAttr;
    public static string CommentBookmarkEndAttr;
    public static string CommentTagBkmkAttr;
    public static string FootnoteTag;
    public static string FootnoteMarkerCPTag;
    public static string FootnoteIsAutoNumberedAttr;
    public static string FootnoteCustomMarkerAttr;
    public static string FootnoteTypeAttr;
    public static string FootnoteSymbolCodeAttr;
    public static string FootnoteSymbolFontNameAttr;
    public static string InitialFootnoteNumberAttr;
    public static string FootnotePositionAttr;
    public static string RestartIndexForFootnotesAttr;
    public static string EndnoteNumberFormatAttr;
    public static string FootnoteNumberFormatAttr;
    public static string RestartIndexForEndnoteAttr;
    public static string EndnotePositionAttr;
    public static string InitialEndnoteNumberAttr;
    public static string WatermarkTag;
    public static string WatermarkTypeAttr;
    public static string WatermarkTextAttr;
    public static string WatermarkTextFontNameAttr;
    public static string WatermarkTextFontSizeAttr;
    public static string WatermarkTextFontColorAttr;
    public static string WatermarkTextLayoutAttr;
    public static string WatermarkTextSemitransAttr;
    public static string WatermarkShapeHeightAttr;
    public static string WatermarkShapeWidthAttr;
    public static string WatermarkPictureWashoutAttr;
    public static string WatermarkPictureScaleAttr;
    public static string WatermarkPictureIsMetaAttr;
    public static string WatermarkPicturePibAttr;
    public static string BackgroundTag;
    public static string BackgroundGradientTag;
    public static string BackgroundTypeAttr;
    public static string BackImageIsMetaAttr;
    public static string BackgroundColorAttr;
    public static string BackgroundBackColorAttr;
    public static string BackgroundGradientStyle;
    public static string BackgroundGradientVariant;
    public static string EmbedObjectStorageNameAttr;
    public static string EmbedObjectIsOle2Attr;
    public static string ObjectPoolTag;
    public static string GrammarDataTag;
    public static string SpellingDataTag;
}
public class Syncfusion.DocIO.DLS.XML.XDLSCustomRW : object {
    private XmlReader m_reader;
    private XmlWriter m_writer;
    public bool Write(XmlWriter writer, string tagName, object value);
    public object Read(XmlReader reader, Type type);
    private void WriteColor(string name, Color color);
    private void WriteFont(string name, Font font);
    private Font ReadFont();
    private Color ReadColor();
}
public class Syncfusion.DocIO.DLS.XML.XDLSHolder : object {
    private int m_id;
    private Dictionary`2<string, object> m_hashElements;
    private Dictionary`2<string, object> m_hashRefElements;
    private byte m_bFlags;
    public int ID { get; public set; }
    public bool Cleared { get; public set; }
    public bool EnableID { get; public set; }
    public bool SkipMe { get; public set; }
    public int get_ID();
    public void set_ID(int value);
    public bool get_Cleared();
    public void set_Cleared(bool value);
    public bool get_EnableID();
    public void set_EnableID(bool value);
    public bool get_SkipMe();
    public void set_SkipMe(bool value);
    public void AddElement(string tagName, object value);
    public void AddRefElement(string tagName, object value);
    public void WriteHolder(IXDLSContentWriter writer);
    public bool ReadHolder(IXDLSContentReader reader);
    public void AfterDeserialization(IXDLSSerializable owner);
    public void BeforeSerialization();
    private void Clear();
    internal void Close();
}
public class Syncfusion.DocIO.DLS.XML.XDLSReader : object {
    private Dictionary`2<Type, object> s_enumHashEntryDict;
    private XmlReader m_reader;
    private XDLSCustomRW m_customRW;
    public string TagName { get; }
    public XmlNodeType NodeType { get; }
    public XmlReader InnerReader { get; }
    public IXDLSAttributeReader AttributeReader { get; }
    public XDLSReader(XmlReader reader);
    public void Deserialize(IXDLSSerializable value);
    public sealed virtual bool HasAttribute(string name);
    public sealed virtual string ReadString(string name);
    public sealed virtual int ReadInt(string name);
    public sealed virtual short ReadShort(string name);
    public double ReadDouble(string name);
    public sealed virtual float ReadFloat(string name);
    public sealed virtual bool ReadBoolean(string name);
    public sealed virtual byte ReadByte(string name);
    public sealed virtual Enum ReadEnum(string name, Type enumType);
    public sealed virtual Color ReadColor(string name);
    private Color GetHexColor(string color);
    public sealed virtual string get_TagName();
    public sealed virtual XmlNodeType get_NodeType();
    public sealed virtual string GetAttributeValue(string name);
    public sealed virtual bool ReadChildElement(object value);
    public sealed virtual object ReadChildElement(Type type);
    public sealed virtual string ReadChildStringContent();
    public sealed virtual Byte[] ReadChildBinaryElement();
    internal Image ReadImage();
    internal Image ReadImage(bool isMetafile);
    public sealed virtual XmlReader get_InnerReader();
    public sealed virtual IXDLSAttributeReader get_AttributeReader();
    private void ReadElement(IXDLSSerializable value);
    private void ReadElementCollection(IXDLSSerializableCollection coll);
}
public abstract class Syncfusion.DocIO.DLS.XML.XDLSSerializableBase : OwnerHolder {
    private XDLSHolder m_XDLSHolder;
    private XDLSHolder Syncfusion.DocIO.DLS.XML.IXDLSSerializable.XDLSHolder { get; }
    protected XDLSHolder XDLSHolder { get; }
    protected XDLSSerializableBase(WordDocument doc, Entity entity);
    private sealed virtual override void Syncfusion.DocIO.DLS.XML.IXDLSSerializable.WriteXmlAttributes(IXDLSAttributeWriter writer);
    private sealed virtual override void Syncfusion.DocIO.DLS.XML.IXDLSSerializable.WriteXmlContent(IXDLSContentWriter writer);
    private sealed virtual override void Syncfusion.DocIO.DLS.XML.IXDLSSerializable.ReadXmlAttributes(IXDLSAttributeReader reader);
    private sealed virtual override bool Syncfusion.DocIO.DLS.XML.IXDLSSerializable.ReadXmlContent(IXDLSContentReader reader);
    private sealed virtual override XDLSHolder Syncfusion.DocIO.DLS.XML.IXDLSSerializable.get_XDLSHolder();
    private sealed virtual override void Syncfusion.DocIO.DLS.XML.IXDLSSerializable.RestoreReference(string name, int value);
    internal object CloneInt();
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    protected XDLSHolder get_XDLSHolder();
    protected virtual object CloneImpl();
    protected virtual void WriteXmlAttributes(IXDLSAttributeWriter writer);
    protected virtual void WriteXmlContent(IXDLSContentWriter writer);
    protected virtual void ReadXmlAttributes(IXDLSAttributeReader reader);
    protected virtual bool ReadXmlContent(IXDLSContentReader reader);
    protected virtual void InitXDLSHolder();
    protected virtual void RestoreReference(string name, int index);
    internal virtual void Close();
}
public abstract class Syncfusion.DocIO.DLS.XML.XDLSSerializableCollection : CollectionImpl {
    private string Syncfusion.DocIO.DLS.XML.IXDLSSerializableCollection.TagItemName { get; }
    protected XDLSSerializableCollection(WordDocument doc, OwnerHolder owner);
    private sealed virtual override IXDLSSerializable Syncfusion.DocIO.DLS.XML.IXDLSSerializableCollection.AddNewItem(IXDLSContentReader reader);
    private sealed virtual override string Syncfusion.DocIO.DLS.XML.IXDLSSerializableCollection.get_TagItemName();
    internal virtual void CloneToImpl(CollectionImpl coll);
    protected abstract virtual string GetTagItemName();
    protected abstract virtual OwnerHolder CreateItem(IXDLSContentReader reader);
}
public class Syncfusion.DocIO.DLS.XML.XDLSWriter : object {
    private static string DEF_SHARP;
    private static string DEF_HEX_FORMAT;
    private XmlWriter m_writer;
    private string m_rootTagName;
    private XDLSCustomRW m_customRW;
    private Metafile m_srcMetafile;
    public XmlWriter InnerWriter { get; }
    public XDLSWriter(XmlWriter writer);
    public void Serialize(IXDLSSerializable value);
    private void WriteElement(string tagName, IXDLSSerializable value, bool isWriteID);
    private void WriteCollectionElement(string tagName, IXDLSSerializableCollection value);
    protected virtual void WriteCustomElement(string tagName, object value);
    private void WriteDefElement(string tagName, object value);
    public sealed virtual void WriteValue(string name, float value);
    public sealed virtual void WriteValue(string name, double value);
    public sealed virtual void WriteValue(string name, int value);
    public sealed virtual void WriteValue(string name, string value);
    public sealed virtual void WriteValue(string name, Enum value);
    public sealed virtual void WriteValue(string name, bool value);
    public sealed virtual void WriteValue(string name, Color value);
    public sealed virtual void WriteValue(string name, DateTime value);
    public sealed virtual void WriteChildStringElement(string name, string value);
    public sealed virtual void WriteChildBinaryElement(string name, Byte[] value);
    public sealed virtual void WriteChildElement(string name, object value);
    public sealed virtual void WriteChildRefElement(string name, int refToElement);
    internal void WriteImage(Image image);
    public sealed virtual XmlWriter get_InnerWriter();
    private MemoryStream CreateStreamFromImage(Image image);
}
public class Syncfusion.DocIO.DLS.XmlMapping : object {
    private string m_prefixMapping;
    private string m_XPath;
    private string m_storeItemID;
    private byte m_bFlags;
    private CustomXMLPart m_customXMLPart;
    private CustomXMLNode m_customXMLNode;
    private Entity m_ownerControl;
    public bool IsMapped { get; internal set; }
    public string PrefixMapping { get; internal set; }
    public string XPath { get; internal set; }
    internal string StoreItemID { get; internal set; }
    public CustomXMLPart CustomXmlPart { get; }
    public CustomXMLNode CustomXmlNode { get; }
    internal bool IsWordML { get; internal set; }
    internal bool IsSupportWordML { get; internal set; }
    internal XmlMapping(Entity ownerControl);
    public bool get_IsMapped();
    internal void set_IsMapped(bool value);
    public string get_PrefixMapping();
    internal void set_PrefixMapping(string value);
    public string get_XPath();
    internal void set_XPath(string value);
    internal string get_StoreItemID();
    internal void set_StoreItemID(string value);
    public CustomXMLPart get_CustomXmlPart();
    public CustomXMLNode get_CustomXmlNode();
    internal bool get_IsWordML();
    internal void set_IsWordML(bool value);
    internal bool get_IsSupportWordML();
    internal void set_IsSupportWordML(bool value);
    public void SetMapping(string xPath, string prefixMapping, CustomXMLPart customXmlPart);
    public void Delete();
    public void SetMappingByNode(CustomXMLNode customXmlNode);
    private void MapItemsToControl(string text);
    internal string GetOrUpdateMappedValue(WordDocument document, InlineContentControl control, XmlElement rootElement, string modifiedText, bool isMappedwithCustomXML, Boolean& isRootElement, Boolean& isDocProperty, Boolean& isMappedElementHasNoValue);
    internal string GetOrUpdateMappedValue(WordDocument document, BlockContentControl blockControl, XmlElement rootElement, string modifiedText, Boolean& isRootElement, Boolean& isDocProperty, Boolean& isMappedElementHasNoValue);
    internal XmlNamespaceManager GetXmlNamespaceManager(XmlDocument xmlDocument, string prefixMapping);
    private static void ProcessNode(XmlNode node, XmlNamespaceManager namespaceManager, Int32& namespaceIndex);
    private static bool IsNamespaceURIExists(XmlNamespaceManager namespaceManager, string uri);
    private List`1<string> GetListPath(string path, Boolean& isDocProperty);
    private string SetCoreProperty(object control, List`1<string> xPathList, WordDocument m_doc, string modifiedText);
    private string GetPathIndex(string path, Int32& startIndex, Int32& endIndex);
    internal void UpdateMappedValue(InlineContentControl inlineControl, WordDocument document, string replacementText);
    internal void UpdateMappedValue(BlockContentControl blockControl, WordDocument document, string replacementText);
    private void ReplaceMappedValue(WordDocument document, InlineContentControl inlineControl, PartContainer partContainer, string mappedXmlPart, string replacementText);
    private void ReplaceMappedValue(WordDocument document, BlockContentControl blockControl, PartContainer partContainer, string mappedXmlPart, string replacementText);
    private XmlElement GetXmlElement(string xmlPartsPath, PartContainer partContainer);
    private void SaveXmlElement(string xmlPartsPath, PartContainer partContainer, XmlDocument doc);
}
internal class Syncfusion.DocIO.DLS.XmlParagraphItem : ParagraphItem {
    private Stream m_xmlNode;
    private Dictionary`2<string, DictionaryEntry> m_relations;
    internal string m_shapeHyperlink;
    private Dictionary`2<string, ImageRecord> m_imageRelations;
    private int m_zOrderPosition;
    private bool m_hasNestedImageRelations;
    internal ParagraphItemCollection MathParaItemsCollection;
    internal Dictionary`2<string, ImageRecord> ImageRelations { get; }
    internal Dictionary`2<string, DictionaryEntry> Relations { get; }
    internal Stream DataNode { get; internal set; }
    internal WCharacterFormat CharacterFormat { get; internal set; }
    internal int ZOrderIndex { get; internal set; }
    public EntityType EntityType { get; }
    internal bool HasNestedImageRelations { get; internal set; }
    public XmlParagraphItem(Stream xmlNode, IWordDocument wordDocument);
    internal Dictionary`2<string, ImageRecord> get_ImageRelations();
    internal Dictionary`2<string, DictionaryEntry> get_Relations();
    internal Stream get_DataNode();
    internal void set_DataNode(Stream value);
    internal WCharacterFormat get_CharacterFormat();
    internal void set_CharacterFormat(WCharacterFormat value);
    internal int get_ZOrderIndex();
    internal void set_ZOrderIndex(int value);
    public virtual EntityType get_EntityType();
    internal bool get_HasNestedImageRelations();
    internal void set_HasNestedImageRelations(bool value);
    internal void ApplyCharacterFormat(WCharacterFormat charFormat);
    protected virtual object CloneImpl();
    protected virtual void CreateLayoutInfo();
    internal virtual void InitLayoutInfo(Entity entity, Boolean& isLastTOCEntry);
    internal virtual void CloneRelationsTo(WordDocument doc, OwnerHolder nextOwner);
    internal virtual void AttachToParagraph(WParagraph owner, int itemPos);
    internal virtual void Detach();
    private void UpdateXmlParts(WordDocument destination);
    private string UpdateXmlPartContainer(Package srcPackage, PartContainer srcContainer, PartContainer destContainer, String[] parts, int index);
    internal virtual void Close();
}
public class Syncfusion.DocIO.DLS.XmlTableFormat : object {
    private List`1<Stream> m_nodeArr;
    private string m_styleName;
    private WTable m_ownerTable;
    internal List`1<Stream> NodeArray { get; internal set; }
    internal string StyleName { get; internal set; }
    internal RowFormat Format { get; }
    internal bool HasFormat { get; }
    internal WTable Owner { get; }
    internal XmlTableFormat(WTable owner);
    internal List`1<Stream> get_NodeArray();
    internal void set_NodeArray(List`1<Stream> value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal RowFormat get_Format();
    internal bool get_HasFormat();
    internal WTable get_Owner();
    internal XmlTableFormat Clone(WTable ownerTable);
    internal void Close();
}
internal class Syncfusion.DocIO.DLS.XNode : object {
    private XNode m_parentNode;
    private string m_name;
    private string m_value;
    private List`1<XNode> m_childNodes;
    private List`1<XAttribute> m_attributes;
    private XmlNodeType m_nodeType;
    internal XmlNodeType NodeType { get; internal set; }
    internal string Name { get; internal set; }
    internal string LocalName { get; internal set; }
    internal string Value { get; internal set; }
    internal string InnerText { get; internal set; }
    internal XNode ParentNode { get; internal set; }
    internal XNode NextSibling { get; }
    internal XNode PreviousSibling { get; }
    internal List`1<XNode> ChildNodes { get; internal set; }
    internal List`1<XAttribute> Attributes { get; internal set; }
    internal XmlNodeType get_NodeType();
    internal void set_NodeType(XmlNodeType value);
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_LocalName();
    internal void set_LocalName(string value);
    internal string get_Value();
    internal void set_Value(string value);
    internal string get_InnerText();
    internal void set_InnerText(string value);
    internal XNode get_ParentNode();
    internal void set_ParentNode(XNode value);
    internal XNode get_NextSibling();
    internal XNode get_PreviousSibling();
    internal List`1<XNode> get_ChildNodes();
    internal void set_ChildNodes(List`1<XNode> value);
    internal List`1<XAttribute> get_Attributes();
    internal void set_Attributes(List`1<XAttribute> value);
}
public class Syncfusion.DocIO.DLSConstants : object {
    public static int ImageScalingFactor;
    public static int BitmapScaleFactor;
    public static int MetafileScaleFactor;
    public static int BorderLineFactor;
    public static int TwipsInOnePoint;
    public static int PercentageFactor;
    public static int EmusPerPoint;
    public static int EmusPerPointMetafile;
    internal static int HundredthsUnit;
    internal static int ThousandthsUnit;
    internal static int SixtyThousandthsUnit;
    internal static int FixedPointsUnit;
    internal static int IntSize;
    internal static int ShortSize;
    internal static int LongSize;
    internal static int BitsInShort;
    internal static int BitsInByte;
    internal static int DoubleSize;
    internal static string WindowsCodePage;
    internal static string DateTimeFormatStructure;
    internal static int OneLakhUnit;
}
public enum Syncfusion.DocIO.DocumentViewType : Enum {
    public int value__;
    public static DocumentViewType None;
    public static DocumentViewType PrintLayout;
    public static DocumentViewType OutlineLayout;
    public static DocumentViewType NormalLayout;
    public static DocumentViewType WebLayout;
}
internal interface Syncfusion.DocIO.Drawing.IHelper {
    public abstract virtual void CreateFont(Stream stream, string fontName, float fontSize, FontStyle fontStyle);
    public abstract virtual IFontFamily GetFontFamily(string name);
    public abstract virtual IFontFamily GetFontFamily(string name, float fontSize);
    public abstract virtual Matrix MakeRotationDegrees(float angle, float x, float y);
    public abstract virtual Dictionary`2<string, float> ParseShapeFormula(AutoShapeType autoShapeType, Dictionary`2<string, string> shapeGuide, RectangleF bounds);
    public abstract virtual float GetDescent(Font font, FontScriptType scriptType);
    public abstract virtual float GetAscent(Font font, FontScriptType scriptType);
    public abstract virtual float GetLineSpacing(Font font);
    public abstract virtual float GetEmHeight(Font font);
    public abstract virtual float GetFontHeight(Font font, FontScriptType scriptType);
    public abstract virtual Stream GetFontStream(Font font, FontScriptType scriptType);
    public abstract virtual string GetFontName(string fontName, float fontSize, FontStyle fontStyle, FontScriptType scriptType);
    public abstract virtual string GetFontName(string fontName, float fontSize, FontStyle fontStyle, FontScriptType scriptType, Boolean& hasStylesAndWeights);
    public abstract virtual string GetUnicodeFamilyName(string text, string fontName);
    public abstract virtual IBitmap GetBitmap(int width, int height);
    public abstract virtual IGraphics GetGraphics(IImage image);
    public abstract virtual ISolidBrush GetSolidBrush(Color color);
    public abstract virtual ITextureBrush GetTextureBrush(IImage image, RectangleF rect, IImageAttributes imageAttributes);
    public abstract virtual IHatchBrush GetHatchBrush(HatchStyle hatchstyle, Color foreColor, Color backColor);
    public abstract virtual IGraphicsPath GetGraphicsPath();
    public abstract virtual IBitmap GetBitmap();
    public abstract virtual IImageAttributes GetImageAttributes();
    public abstract virtual IImage CreateImageFromStream(MemoryStream stream);
    public abstract virtual Byte[] ConvertTiffToPng(Byte[] imageBytes);
    public abstract virtual Byte[] ConvertMetafileToPng(Byte[] imageBytes);
    public abstract virtual bool HasBitmap(IImage image);
    public abstract virtual IColorMatrix GetColorMatrix();
    public abstract virtual IColorMatrix GetColorMatrix(Single[][] newColorMatrix);
    public abstract virtual IPen GetPen(Color color);
    public abstract virtual IPen GetPen(Color color, float width);
    public abstract virtual void ApplyScale(Matrix matrix, float x, float y);
    public abstract virtual void MultiplyMatrix(Matrix srcMatrix, Matrix matrix, MatrixOrder order);
    public abstract virtual void TranslateMatrix(Matrix matrix, float offsetX, float offsetY, MatrixOrder order);
    public abstract virtual void RotateMatrix(Matrix matrix, float angle, PointF point, MatrixOrder order);
    public abstract virtual void RotateMatrix(Matrix matrix, float angle);
    public abstract virtual IFontExtension GetFontExtension(string fontName, float fontSize, FontStyle fontStyle, GraphicsUnit graphicsUnit, FontScriptType scriptType);
    public abstract virtual bool IsValidFontStream(Stream fontStream);
    public abstract virtual Font GetFallbackFont(Font font, string text, FontScriptType scriptType, List`1<FallbackFont> fallbackFonts, Dictionary`2<string, Stream> fontStreams);
    public abstract virtual Font GetRegularStyleFontToMeasure(Font font, string text, FontScriptType scriptType);
    public abstract virtual void ConvertChartAsImage(IOfficeChart officeChart, Stream imageAsStream, ChartRenderingOptions imageOptions);
}
internal enum Syncfusion.DocIO.DropCapType : Enum {
    public int value__;
    public static DropCapType None;
    public static DropCapType DropCap;
    public static DropCapType Margin;
}
public enum Syncfusion.DocIO.EndnotePosition : Enum {
    public int value__;
    public static EndnotePosition DisplayEndOfSection;
    public static EndnotePosition DisplayEndOfDocument;
}
public enum Syncfusion.DocIO.EndnoteRestartIndex : Enum {
    public int value__;
    public static EndnoteRestartIndex DoNotRestart;
    public static EndnoteRestartIndex RestartForEachSection;
}
[FlagsAttribute]
public enum Syncfusion.DocIO.ExportBookmarkType : Enum {
    public int value__;
    public static ExportBookmarkType Bookmarks;
    public static ExportBookmarkType Headings;
    public static ExportBookmarkType None;
}
public enum Syncfusion.DocIO.ExportImageFormat : Enum {
    public int value__;
    public static ExportImageFormat Jpeg;
    public static ExportImageFormat Png;
}
public enum Syncfusion.DocIO.FieldType : Enum {
    public int value__;
    public static FieldType FieldNone;
    public static FieldType FieldAddin;
    public static FieldType FieldAdvance;
    public static FieldType FieldAsk;
    public static FieldType FieldAuthor;
    public static FieldType FieldAutoNum;
    public static FieldType FieldAutoNumLegal;
    public static FieldType FieldAutoNumOutline;
    public static FieldType FieldAutoText;
    public static FieldType FieldAutoTextList;
    public static FieldType FieldBarCode;
    public static FieldType FieldComments;
    public static FieldType FieldCompare;
    public static FieldType FieldCreateDate;
    public static FieldType FieldData;
    public static FieldType FieldDatabase;
    public static FieldType FieldDate;
    public static FieldType FieldDDE;
    public static FieldType FieldDDEAuto;
    public static FieldType FieldDocProperty;
    public static FieldType FieldDocVariable;
    public static FieldType FieldEditTime;
    public static FieldType FieldEmbed;
    public static FieldType FieldEmpty;
    public static FieldType FieldExpression;
    public static FieldType FieldFileName;
    public static FieldType FieldFileSize;
    public static FieldType FieldFillIn;
    public static FieldType FieldFootnoteRef;
    public static FieldType FieldFormCheckBox;
    public static FieldType FieldFormDropDown;
    public static FieldType FieldFormTextInput;
    public static FieldType FieldFormula;
    public static FieldType FieldGlossary;
    public static FieldType FieldGoToButton;
    public static FieldType FieldHTMLActiveX;
    public static FieldType FieldHyperlink;
    public static FieldType FieldIf;
    public static FieldType FieldImport;
    public static FieldType FieldInclude;
    public static FieldType FieldIncludePicture;
    public static FieldType FieldIncludeText;
    public static FieldType FieldIndex;
    public static FieldType FieldIndexEntry;
    public static FieldType FieldInfo;
    public static FieldType FieldKeyWord;
    public static FieldType FieldLastSavedBy;
    public static FieldType FieldLink;
    public static FieldType FieldListNum;
    public static FieldType FieldMacroButton;
    public static FieldType FieldMergeField;
    public static FieldType FieldMergeRec;
    public static FieldType FieldMergeSeq;
    public static FieldType FieldNext;
    public static FieldType FieldNextIf;
    public static FieldType FieldNoteRef;
    public static FieldType FieldNumChars;
    public static FieldType FieldNumPages;
    public static FieldType FieldNumWords;
    public static FieldType FieldOCX;
    public static FieldType FieldPage;
    public static FieldType FieldPageRef;
    public static FieldType FieldPrint;
    public static FieldType FieldPrintDate;
    public static FieldType FieldPrivate;
    public static FieldType FieldQuote;
    public static FieldType FieldRef;
    public static FieldType FieldRefDoc;
    public static FieldType FieldRevisionNum;
    public static FieldType FieldSaveDate;
    public static FieldType FieldSection;
    public static FieldType FieldSectionPages;
    public static FieldType FieldSequence;
    public static FieldType FieldSet;
    public static FieldType FieldSkipIf;
    public static FieldType FieldStyleRef;
    public static FieldType FieldSubject;
    public static FieldType FieldSubscriber;
    public static FieldType FieldSymbol;
    public static FieldType FieldTemplate;
    public static FieldType FieldTime;
    public static FieldType FieldTitle;
    public static FieldType FieldTOA;
    public static FieldType FieldTOAEntry;
    public static FieldType FieldTOC;
    public static FieldType FieldTOCEntry;
    public static FieldType FieldUserAddress;
    public static FieldType FieldUserInitials;
    public static FieldType FieldUserName;
    public static FieldType FieldShape;
    public static FieldType FieldBidiOutline;
    public static FieldType FieldAddressBlock;
    public static FieldType FieldUnknown;
}
public class Syncfusion.DocIO.FileCorruptException : Exception {
    private static string DEF_MESSAGE;
}
internal enum Syncfusion.DocIO.FontFamilyType : Enum {
    public int value__;
    public static FontFamilyType Auto;
    public static FontFamilyType Roman;
    public static FontFamilyType Swiss;
    public static FontFamilyType Modern;
    public static FontFamilyType Script;
    public static FontFamilyType Decorative;
}
public enum Syncfusion.DocIO.FontPitchType : Enum {
    public int value__;
    public static FontPitchType Default;
    public static FontPitchType Fixed;
    public static FontPitchType Variable;
}
public enum Syncfusion.DocIO.FootEndNoteNumberFormat : Enum {
    public int value__;
    public static FootEndNoteNumberFormat Arabic;
    public static FootEndNoteNumberFormat UpperCaseRoman;
    public static FootEndNoteNumberFormat LowerCaseRoman;
    public static FootEndNoteNumberFormat UpperCaseLetter;
    public static FootEndNoteNumberFormat LowerCaseLetter;
}
public enum Syncfusion.DocIO.FootnotePosition : Enum {
    public int value__;
    public static FootnotePosition PrintAsEndnotes;
    public static FootnotePosition PrintAtBottomOfPage;
    public static FootnotePosition PrintImmediatelyBeneathText;
}
public enum Syncfusion.DocIO.FootnoteRestartIndex : Enum {
    public int value__;
    public static FootnoteRestartIndex DoNotRestart;
    public static FootnoteRestartIndex RestartForEachSection;
    public static FootnoteRestartIndex RestartForEachPage;
}
public enum Syncfusion.DocIO.FootnoteType : Enum {
    public int value__;
    public static FootnoteType Footnote;
    public static FootnoteType Endnote;
}
public enum Syncfusion.DocIO.FormatType : Enum {
    public int value__;
    public static FormatType Doc;
    public static FormatType Dot;
    public static FormatType Docx;
    public static FormatType StrictDocx;
    public static FormatType Word2007;
    public static FormatType Word2010;
    public static FormatType Word2013;
    public static FormatType Word2007Dotx;
    public static FormatType Word2010Dotx;
    public static FormatType Word2013Dotx;
    public static FormatType Dotx;
    public static FormatType Word2007Docm;
    public static FormatType Word2010Docm;
    public static FormatType Word2013Docm;
    public static FormatType Docm;
    public static FormatType Word2007Dotm;
    public static FormatType Word2010Dotm;
    public static FormatType Word2013Dotm;
    public static FormatType Dotm;
    public static FormatType WordML;
    public static FormatType Rtf;
    public static FormatType Txt;
    public static FormatType Markdown;
    public static FormatType Automatic;
    public static FormatType Html;
    public static FormatType Odt;
}
internal enum Syncfusion.DocIO.FrameWrapMode : Enum {
    public int value__;
    public static FrameWrapMode Auto;
    public static FrameWrapMode NotBeside;
    public static FrameWrapMode Around;
    public static FrameWrapMode None;
    public static FrameWrapMode Tight;
    public static FrameWrapMode Through;
}
internal enum Syncfusion.DocIO.FtsWidth : Enum {
    public int value__;
    public static FtsWidth None;
    public static FtsWidth Auto;
    public static FtsWidth Percentage;
    public static FtsWidth Point;
}
public enum Syncfusion.DocIO.HorizontalPosition : Enum {
    public int value__;
    public static HorizontalPosition Left;
    public static HorizontalPosition Center;
    public static HorizontalPosition Right;
    public static HorizontalPosition Inside;
    public static HorizontalPosition Outside;
}
public enum Syncfusion.DocIO.HorizontalRelation : Enum {
    public int value__;
    public static HorizontalRelation Column;
    public static HorizontalRelation Margin;
    public static HorizontalRelation Page;
}
public enum Syncfusion.DocIO.HttpContentDisposition : Enum {
    public int value__;
    public static HttpContentDisposition InBrowser;
    public static HttpContentDisposition Attachment;
}
public enum Syncfusion.DocIO.LineDashing : Enum {
    public int value__;
    public static LineDashing Solid;
    public static LineDashing Dash;
    public static LineDashing Dot;
    public static LineDashing DashDot;
    public static LineDashing DashDotDot;
    public static LineDashing DotGEL;
    public static LineDashing DashGEL;
    public static LineDashing LongDashGEL;
    public static LineDashing DashDotGEL;
    public static LineDashing LongDashDotGEL;
    public static LineDashing LongDashDotDotGEL;
}
public enum Syncfusion.DocIO.LineNumberingMode : Enum {
    public int value__;
    public static LineNumberingMode RestartPage;
    public static LineNumberingMode RestartSection;
    public static LineNumberingMode Continuous;
    public static LineNumberingMode None;
}
public enum Syncfusion.DocIO.LineSpacingRule : Enum {
    public int value__;
    public static LineSpacingRule AtLeast;
    public static LineSpacingRule Exactly;
    public static LineSpacingRule Multiple;
}
internal class Syncfusion.DocIO.NamespaceDoc : object {
}
internal enum Syncfusion.DocIO.ODF.Base.AfterBreak : Enum {
    public int value__;
    public static AfterBreak auto;
    public static AfterBreak column;
    public static AfterBreak page;
}
internal enum Syncfusion.DocIO.ODF.Base.BeforeBreak : Enum {
    public int value__;
    public static BeforeBreak auto;
    public static BeforeBreak column;
    public static BeforeBreak page;
}
internal enum Syncfusion.DocIO.ODF.Base.BorderLineStyle : Enum {
    public int value__;
    public static BorderLineStyle none;
    public static BorderLineStyle solid;
    public static BorderLineStyle Double;
    public static BorderLineStyle dotted;
    public static BorderLineStyle dashed;
    public static BorderLineStyle longdash;
    public static BorderLineStyle dotdash;
    public static BorderLineStyle dotdotdash;
    public static BorderLineStyle wave;
}
internal enum Syncfusion.DocIO.ODF.Base.Calender : Enum {
    public int value__;
    public static Calender gregorian;
    public static Calender gengou;
    public static Calender ROC;
    public static Calender hanja_yoil;
    public static Calender hanja;
    public static Calender hijri;
    public static Calender jewish;
    public static Calender buddhist;
}
internal enum Syncfusion.DocIO.ODF.Base.CaptionAngleType : Enum {
    public int value__;
    public static CaptionAngleType Fixed;
    public static CaptionAngleType Free;
}
internal enum Syncfusion.DocIO.ODF.Base.CaptionEscapeDirection : Enum {
    public int value__;
    public static CaptionEscapeDirection Horizontal;
    public static CaptionEscapeDirection Vertical;
    public static CaptionEscapeDirection Auto;
}
internal enum Syncfusion.DocIO.ODF.Base.CaptionType : Enum {
    public int value__;
    public static CaptionType StraightLine;
    public static CaptionType AngledLine;
    public static CaptionType AngledConnectorLine;
}
internal enum Syncfusion.DocIO.ODF.Base.CellValueType : Enum {
    public int value__;
    public static CellValueType Float;
    public static CellValueType Percentage;
    public static CellValueType Currency;
    public static CellValueType Date;
    public static CellValueType Time;
    public static CellValueType Boolean;
    public static CellValueType String;
}
internal enum Syncfusion.DocIO.ODF.Base.ColorMode : Enum {
    public int value__;
    public static ColorMode Greyscale;
    public static ColorMode Mono;
    public static ColorMode Watermark;
}
internal enum Syncfusion.DocIO.ODF.Base.Combine : Enum {
    public int value__;
    public static Combine none;
    public static Combine letters;
    public static Combine lines;
}
internal enum Syncfusion.DocIO.ODF.Base.DrawAspect : Enum {
    public int value__;
    public static DrawAspect Content;
    public static DrawAspect Thumbnail;
    public static DrawAspect Icon;
    public static DrawAspect Printview;
}
internal enum Syncfusion.DocIO.ODF.Base.Emphasize : Enum {
    public int value__;
    public static Emphasize none;
    public static Emphasize accent;
    public static Emphasize dot;
    public static Emphasize circle;
    public static Emphasize disc;
    public static Emphasize above;
    public static Emphasize below;
}
internal enum Syncfusion.DocIO.ODF.Base.FillRule : Enum {
    public int value__;
    public static FillRule NonZero;
    public static FillRule EvenOdd;
}
internal enum Syncfusion.DocIO.ODF.Base.FillType : Enum {
    public int value__;
    public static FillType None;
    public static FillType Solid;
    public static FillType Bitmap;
    public static FillType Gradient;
    public static FillType Hatch;
}
internal enum Syncfusion.DocIO.ODF.Base.FontFamilyGeneric : Enum {
    public int value__;
    public static FontFamilyGeneric System;
    public static FontFamilyGeneric Roman;
    public static FontFamilyGeneric Swiss;
    public static FontFamilyGeneric Modern;
    public static FontFamilyGeneric Script;
    public static FontFamilyGeneric Decorative;
}
internal enum Syncfusion.DocIO.ODF.Base.FontPitch : Enum {
    public int value__;
    public static FontPitch none;
    public static FontPitch Fixed;
    public static FontPitch Variable;
}
internal enum Syncfusion.DocIO.ODF.Base.FontRelief : Enum {
    public int value__;
    public static FontRelief none;
    public static FontRelief embossed;
    public static FontRelief engraved;
}
internal enum Syncfusion.DocIO.ODF.Base.FontStretch : Enum {
    public int value__;
    public static FontStretch Normal;
    public static FontStretch UltraCondensed;
    public static FontStretch ExtraCondensed;
    public static FontStretch Condensed;
    public static FontStretch SemiCondensed;
    public static FontStretch SemiExpanded;
    public static FontStretch Expanded;
    public static FontStretch ExtraExpanded;
    public static FontStretch UltraExpanded;
}
internal enum Syncfusion.DocIO.ODF.Base.FontVariant : Enum {
    public int value__;
    public static FontVariant normal;
    public static FontVariant smallcaps;
}
internal enum Syncfusion.DocIO.ODF.Base.FontWeight : Enum {
    public int value__;
    public static FontWeight normal;
    public static FontWeight bold;
}
internal enum Syncfusion.DocIO.ODF.Base.HoriAlignment : Enum {
    public byte value__;
    public static HoriAlignment Left;
    public static HoriAlignment Center;
    public static HoriAlignment Right;
    public static HoriAlignment Justify;
    public static HoriAlignment Distribute;
    public static HoriAlignment JustifyMedium;
    public static HoriAlignment JustifyHigh;
    public static HoriAlignment JustifyLow;
    public static HoriAlignment ThaiJustify;
}
internal enum Syncfusion.DocIO.ODF.Base.HorizontalAlign : Enum {
    public int value__;
    public static HorizontalAlign Left;
    public static HorizontalAlign Center;
    public static HorizontalAlign Right;
    public static HorizontalAlign Margin;
}
internal enum Syncfusion.DocIO.ODF.Base.HyphenationKeep : Enum {
    public int value__;
    public static HyphenationKeep auto;
    public static HyphenationKeep page;
}
internal enum Syncfusion.DocIO.ODF.Base.KeepTogether : Enum {
    public int value__;
    public static KeepTogether auto;
    public static KeepTogether always;
}
internal enum Syncfusion.DocIO.ODF.Base.LineBreak : Enum {
    public int value__;
    public static LineBreak normal;
    public static LineBreak strict;
}
internal enum Syncfusion.DocIO.ODF.Base.LineMode : Enum {
    public int value__;
    public static LineMode continuous;
    public static LineMode skipwhitespace;
}
internal enum Syncfusion.DocIO.ODF.Base.LineType : Enum {
    public int value__;
    public static LineType none;
    public static LineType single;
    public static LineType Double;
}
internal enum Syncfusion.DocIO.ODF.Base.LineWidth : Enum {
    public int value__;
    public static LineWidth auto;
    public static LineWidth normal;
    public static LineWidth bold;
    public static LineWidth thin;
    public static LineWidth dash;
    public static LineWidth medium;
    public static LineWidth thick;
}
internal enum Syncfusion.DocIO.ODF.Base.ListNumberFormat : Enum {
    public int value__;
    public static ListNumberFormat Decimal;
    public static ListNumberFormat LowerLetter;
    public static ListNumberFormat UpperLetter;
    public static ListNumberFormat LowerRoman;
    public static ListNumberFormat UpperRoman;
    public static ListNumberFormat Bullet;
}
internal enum Syncfusion.DocIO.ODF.Base.MeasureAlign : Enum {
    public int value__;
    public static MeasureAlign Automatic;
    public static MeasureAlign LeftOutside;
    public static MeasureAlign Inside;
    public static MeasureAlign RightOutside;
}
internal enum Syncfusion.DocIO.ODF.Base.MeasureVerticalAlign : Enum {
    public int value__;
    public static MeasureVerticalAlign Automatic;
    public static MeasureVerticalAlign Above;
    public static MeasureVerticalAlign Below;
    public static MeasureVerticalAlign Center;
}
internal enum Syncfusion.DocIO.ODF.Base.OBreakType : Enum {
    public int value__;
    public static OBreakType PageBreak;
    public static OBreakType ColumnBreak;
    public static OBreakType LineBreak;
}
internal enum Syncfusion.DocIO.ODF.Base.ODFFontFamily : Enum {
    public int value__;
    public static ODFFontFamily Paragraph;
    public static ODFFontFamily Text;
    public static ODFFontFamily Table;
    public static ODFFontFamily Table_Column;
    public static ODFFontFamily Table_Row;
    public static ODFFontFamily Table_Cell;
    public static ODFFontFamily Section;
    public static ODFFontFamily Ruby;
    public static ODFFontFamily Graphic;
    public static ODFFontFamily Presentation;
    public static ODFFontFamily DrawingPage;
    public static ODFFontFamily Chart;
}
internal enum Syncfusion.DocIO.ODF.Base.ODFFontStyle : Enum {
    public int value__;
    public static ODFFontStyle normal;
    public static ODFFontStyle italic;
    public static ODFFontStyle oblique;
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.AutomaticStyles : CommonStyles {
    private PageLayoutCollection m_pageLayout;
    internal PageLayoutCollection PageLayoutCollection { get; internal set; }
    internal PageLayoutCollection get_PageLayoutCollection();
    internal void set_PageLayoutCollection(PageLayoutCollection value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.BooleanStyle : DataStyle {
    private bool m_boolean;
    internal bool Boolean { get; internal set; }
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.BorderProperties : object {
    private ODFBorder m_border;
    private ODFBorder m_borderTop;
    private ODFBorder m_borderBottom;
    private ODFBorder m_borderLeft;
    private ODFBorder m_borderRight;
    private ODFBorder m_diagonalLeft;
    private ODFBorder m_diagonalRight;
    internal byte borderFlags;
    internal static ushort BorderKey;
    internal static ushort BorderTopKey;
    internal static ushort BorderBottomKey;
    internal static ushort BorderLeftKey;
    internal static ushort BorderRightKey;
    internal ODFBorder Border { get; internal set; }
    internal ODFBorder BorderTop { get; internal set; }
    internal ODFBorder BorderBottom { get; internal set; }
    internal ODFBorder BorderLeft { get; internal set; }
    internal ODFBorder BorderRight { get; internal set; }
    internal ODFBorder DiagonalLeft { get; internal set; }
    internal ODFBorder DiagonalRight { get; internal set; }
    internal ODFBorder get_Border();
    internal void set_Border(ODFBorder value);
    internal ODFBorder get_BorderTop();
    internal void set_BorderTop(ODFBorder value);
    internal ODFBorder get_BorderBottom();
    internal void set_BorderBottom(ODFBorder value);
    internal ODFBorder get_BorderLeft();
    internal void set_BorderLeft(ODFBorder value);
    internal ODFBorder get_BorderRight();
    internal void set_BorderRight(ODFBorder value);
    internal ODFBorder get_DiagonalLeft();
    internal void set_DiagonalLeft(ODFBorder value);
    internal ODFBorder get_DiagonalRight();
    internal void set_DiagonalRight(ODFBorder value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.CalculationSettings : object {
    private bool m_useRegularExpressions;
    internal bool UseRegularExpressions { get; internal set; }
    internal bool get_UseRegularExpressions();
    internal void set_UseRegularExpressions(bool value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.CenterHeader : HeaderSection {
    internal List`1<string> MappedValues;
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.CollectionBase`1 : object {
    internal static string GenerateDefaultName(string strStart, ICollection[] arrCollections);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.CommonStyles : object {
    private List`1<NumberStyle> m_numbeStyles;
    private List`1<CurrencyStyle> m_currencyStyles;
    private List`1<PercentageStyle> m_percentageStyles;
    private List`1<DateStyle> m_dateStyles;
    private List`1<TimeStyle> m_timeStyles;
    private List`1<BooleanStyle> m_booleanStyles;
    private List`1<TextStyle> m_textStyles;
    private List`1<DefaultStyle> m_defaultStyles;
    private ODFStyleCollection m_odfStyles;
    internal List`1<NumberStyle> NumbeStyles { get; internal set; }
    internal List`1<CurrencyStyle> CurrencyStyles { get; internal set; }
    internal List`1<PercentageStyle> PercentageStyles { get; internal set; }
    internal List`1<DateStyle> DateStyles { get; internal set; }
    internal List`1<TimeStyle> TimeStyles { get; internal set; }
    internal List`1<BooleanStyle> BooleanStyles { get; internal set; }
    internal List`1<TextStyle> TextStyles { get; internal set; }
    internal List`1<DefaultStyle> DefaultStyles { get; internal set; }
    internal ODFStyleCollection OdfStyles { get; internal set; }
    internal List`1<NumberStyle> get_NumbeStyles();
    internal void set_NumbeStyles(List`1<NumberStyle> value);
    internal List`1<CurrencyStyle> get_CurrencyStyles();
    internal void set_CurrencyStyles(List`1<CurrencyStyle> value);
    internal List`1<PercentageStyle> get_PercentageStyles();
    internal void set_PercentageStyles(List`1<PercentageStyle> value);
    internal List`1<DateStyle> get_DateStyles();
    internal void set_DateStyles(List`1<DateStyle> value);
    internal List`1<TimeStyle> get_TimeStyles();
    internal void set_TimeStyles(List`1<TimeStyle> value);
    internal List`1<BooleanStyle> get_BooleanStyles();
    internal void set_BooleanStyles(List`1<BooleanStyle> value);
    internal List`1<TextStyle> get_TextStyles();
    internal void set_TextStyles(List`1<TextStyle> value);
    internal List`1<DefaultStyle> get_DefaultStyles();
    internal void set_DefaultStyles(List`1<DefaultStyle> value);
    internal ODFStyleCollection get_OdfStyles();
    internal void set_OdfStyles(ODFStyleCollection value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.CommonTableParaProperties : MarginBorderProperties {
    private string m_backgroundColor;
    private KeepTogether m_keepWithNext;
    private int m_pageNumber;
    private AfterBreak m_afterBreak;
    private BeforeBreak m_beforeBreak;
    private string m_shadowType;
    private WritingMode m_writingMode;
    internal byte m_CommonstyleFlags;
    private static byte WritingModeKey;
    private static byte BeforeBreakKey;
    private static byte AfterBreakKey;
    private static byte KeepWithNextKey;
    private static byte ShadowTypeKey;
    private static byte PageNumberKey;
    private static byte BackgroundColorKey;
    internal WritingMode WritingMode { get; internal set; }
    internal BeforeBreak BeforeBreak { get; internal set; }
    internal AfterBreak AfterBreak { get; internal set; }
    internal KeepTogether KeepWithNext { get; internal set; }
    internal string ShadowType { get; internal set; }
    internal int PageNumber { get; internal set; }
    internal string BackgroundColor { get; internal set; }
    internal WritingMode get_WritingMode();
    internal void set_WritingMode(WritingMode value);
    internal BeforeBreak get_BeforeBreak();
    internal void set_BeforeBreak(BeforeBreak value);
    internal AfterBreak get_AfterBreak();
    internal void set_AfterBreak(AfterBreak value);
    internal KeepTogether get_KeepWithNext();
    internal void set_KeepWithNext(KeepTogether value);
    internal string get_ShadowType();
    internal void set_ShadowType(string value);
    internal int get_PageNumber();
    internal void set_PageNumber(int value);
    internal string get_BackgroundColor();
    internal void set_BackgroundColor(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.CommonType : object {
    private int m_decimalPlaces;
    private bool m_grouping;
    private int m_minIntegerDigits;
    internal byte nFormatFlags;
    internal static byte DecimalPlacesKey;
    internal static byte GroupingKey;
    internal static byte MinIntegerDigitsKey;
    internal int DecimalPlaces { get; internal set; }
    internal bool Grouping { get; internal set; }
    internal int MinIntegerDigits { get; internal set; }
    internal int get_DecimalPlaces();
    internal void set_DecimalPlaces(int value);
    internal bool get_Grouping();
    internal void set_Grouping(bool value);
    internal int get_MinIntegerDigits();
    internal void set_MinIntegerDigits(int value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.CurrencyStyle : DataStyle {
    private CurrencySymbol m_currencySymbol;
    private NumberType m_number;
    private bool m_automaticOrder;
    internal CurrencySymbol CurrencySymbol { get; internal set; }
    internal NumberType Number { get; internal set; }
    internal bool AutomaticOrder { get; internal set; }
    internal CurrencySymbol get_CurrencySymbol();
    internal void set_CurrencySymbol(CurrencySymbol value);
    internal NumberType get_Number();
    internal void set_Number(NumberType value);
    internal bool get_AutomaticOrder();
    internal void set_AutomaticOrder(bool value);
    public virtual bool Equals(object obj);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.CurrencySymbol : LanguageStyle {
    private string m_data;
    internal string Data { get; internal set; }
    internal string get_Data();
    internal void set_Data(string value);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DataStyle : NumberFormat {
    private string m_name;
    private string m_displayName;
    private bool m_volatile;
    private List`1<string> m_text;
    private List`1<MapStyle> m_map;
    private TextProperties m_textProperties;
    private bool m_hasSections;
    internal string Name { get; internal set; }
    internal string DisplayName { get; internal set; }
    internal bool Volatile { get; internal set; }
    internal List`1<string> Text { get; internal set; }
    internal List`1<MapStyle> Map { get; internal set; }
    internal TextProperties TextProperties { get; internal set; }
    internal bool HasSections { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_DisplayName();
    internal void set_DisplayName(string value);
    internal bool get_Volatile();
    internal void set_Volatile(bool value);
    internal List`1<string> get_Text();
    internal void set_Text(List`1<string> value);
    internal List`1<MapStyle> get_Map();
    internal void set_Map(List`1<MapStyle> value);
    internal TextProperties get_TextProperties();
    internal void set_TextProperties(TextProperties value);
    internal bool get_HasSections();
    internal void set_HasSections(bool value);
    internal void Dispose1();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DataStyleCollection : object {
    internal List`1<string> FillImage;
    internal List`1<string> Gradient;
    internal List`1<string> Hatch;
    internal List`1<string> Marker;
    internal List`1<string> Opacity;
    internal List`1<string> StrokeDash;
    internal List`1<BooleanStyle> BooleanStyles;
    internal List`1<NumberStyle> NumberStyles;
    internal List`1<PercentageStyle> PercentageStyles;
    internal List`1<CurrencyStyle> CurrencyStyles;
    internal List`1<DateStyle> DateStyles;
    internal List`1<TimeStyle> TimeStyles;
    internal List`1<TextStyle> ListStyles;
    internal List`1<string> DefaultSyles;
    internal List`1<string> DefaultPageLayout;
    internal List`1<string> Styles;
    internal List`1<string> LinearGradients;
    internal List`1<string> RadialGradients;
    internal List`1<string> TableTemplate;
    internal List`1<string> BibiliographyConfiguration;
    internal List`1<string> LineNumberingConfiguration;
    internal List`1<string> ListStyles1;
    internal List`1<string> Notes;
    internal List`1<string> OutlineStyles;
    internal void LoadStyles();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DateBase : TimeBase {
    private string m_calender;
    internal string Calender { get; internal set; }
    internal string get_Calender();
    internal void set_Calender(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DateStyle : TimeStyle {
    private bool m_automaticOrder;
    private DateBase m_day;
    private DateBase m_dayOfWeek;
    private DateBase m_era;
    private Month m_month;
    private DateBase m_quarter;
    private DateBase m_weekOfYear;
    private DateBase m_year;
    internal bool AutomaticOrder { get; internal set; }
    internal DateBase Day { get; internal set; }
    internal DateBase DayOfWeek { get; internal set; }
    internal DateBase Era { get; internal set; }
    internal Month Month { get; internal set; }
    internal DateBase Quarter { get; internal set; }
    internal DateBase WeekOfYear { get; internal set; }
    internal DateBase Year { get; internal set; }
    internal bool get_AutomaticOrder();
    internal void set_AutomaticOrder(bool value);
    internal DateBase get_Day();
    internal void set_Day(DateBase value);
    internal DateBase get_DayOfWeek();
    internal void set_DayOfWeek(DateBase value);
    internal DateBase get_Era();
    internal void set_Era(DateBase value);
    internal Month get_Month();
    internal void set_Month(Month value);
    internal DateBase get_Quarter();
    internal void set_Quarter(DateBase value);
    internal DateBase get_WeekOfYear();
    internal void set_WeekOfYear(DateBase value);
    internal DateBase get_Year();
    internal void set_Year(DateBase value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DefaultPageLayout : object {
    private HeaderFooterStyle m_headerStyle;
    private HeaderFooterStyle m_footerStyle;
    private PageLayoutProperties m_pageLayoutProperties;
    internal HeaderFooterStyle HeaderStyle { get; internal set; }
    internal HeaderFooterStyle FooterStyle { get; internal set; }
    internal PageLayoutProperties PageLayoutProperties { get; internal set; }
    internal HeaderFooterStyle get_HeaderStyle();
    internal void set_HeaderStyle(HeaderFooterStyle value);
    internal HeaderFooterStyle get_FooterStyle();
    internal void set_FooterStyle(HeaderFooterStyle value);
    internal PageLayoutProperties get_PageLayoutProperties();
    internal void set_PageLayoutProperties(PageLayoutProperties value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DefaultStyle : object {
    private ODFFontFamily m_family;
    private MapStyle m_map;
    private ODFParagraphProperties m_paragraphProperties;
    private OTableCellProperties m_tableCellProperties;
    private OTableColumnProperties m_tableColumnProperties;
    private OTableProperties m_tableProperties;
    private OTableRowProperties m_tableRowProperties;
    private TextProperties m_textProperties;
    private SectionProperties m_sectionProperties;
    private string m_name;
    internal byte StylePropFlag;
    internal static byte MapKey;
    internal static byte ParagraphPropertiesKey;
    internal static byte TableCellPropertiesKey;
    internal static byte TableColumnPropertiesKey;
    internal static byte TablePropertiesKey;
    internal static byte TableRowPropertiesKey;
    internal static byte TextPropertiesKey;
    internal static byte SectionPropertykey;
    internal string Name { get; internal set; }
    internal ODFFontFamily Family { get; internal set; }
    internal MapStyle Map { get; internal set; }
    internal ODFParagraphProperties ParagraphProperties { get; internal set; }
    internal SectionProperties ODFSectionProperties { get; internal set; }
    internal OTableCellProperties TableCellProperties { get; internal set; }
    internal OTableColumnProperties TableColumnProperties { get; internal set; }
    internal OTableProperties TableProperties { get; internal set; }
    internal OTableRowProperties TableRowProperties { get; internal set; }
    internal TextProperties Textproperties { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal ODFFontFamily get_Family();
    internal void set_Family(ODFFontFamily value);
    internal MapStyle get_Map();
    internal void set_Map(MapStyle value);
    internal ODFParagraphProperties get_ParagraphProperties();
    internal void set_ParagraphProperties(ODFParagraphProperties value);
    internal SectionProperties get_ODFSectionProperties();
    internal void set_ODFSectionProperties(SectionProperties value);
    internal OTableCellProperties get_TableCellProperties();
    internal void set_TableCellProperties(OTableCellProperties value);
    internal OTableColumnProperties get_TableColumnProperties();
    internal void set_TableColumnProperties(OTableColumnProperties value);
    internal OTableProperties get_TableProperties();
    internal void set_TableProperties(OTableProperties value);
    internal OTableRowProperties get_TableRowProperties();
    internal void set_TableRowProperties(OTableRowProperties value);
    internal TextProperties get_Textproperties();
    internal void set_Textproperties(TextProperties value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DefaultStyleCollection : CollectionBase`1<PageLayout> {
    private Dictionary`2<string, DefaultStyle> m_defaultStyles;
    internal Dictionary`2<string, DefaultStyle> DefaultStyles { get; internal set; }
    internal Dictionary`2<string, DefaultStyle> get_DefaultStyles();
    internal void set_DefaultStyles(Dictionary`2<string, DefaultStyle> value);
    internal string Add(DefaultStyle style);
    private string ContainsValue(DefaultStyle style);
    private string MapName(DefaultStyle style);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DocumentContent : object {
    private List`1<FontFace> m_fontFaceDecls;
    private AutomaticStyles m_automaticStyles;
    private OBody m_body;
    internal List`1<FontFace> FontFaceDecls { get; internal set; }
    internal AutomaticStyles AutomaticStyles { get; internal set; }
    internal OBody Body { get; internal set; }
    internal List`1<FontFace> get_FontFaceDecls();
    internal void set_FontFaceDecls(List`1<FontFace> value);
    internal AutomaticStyles get_AutomaticStyles();
    internal void set_AutomaticStyles(AutomaticStyles value);
    internal OBody get_Body();
    internal void set_Body(OBody value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.DocumentStyles : object {
    private List`1<FontFace> m_fontFaceDecls;
    private CommonStyles m_commmonStyles;
    private AutomaticStyles m_autoStyles;
    private MasterPageCollection m_masterStyles;
    internal List`1<FontFace> FontFaceDecls { get; internal set; }
    internal CommonStyles CommmonStyles { get; internal set; }
    internal AutomaticStyles AutoStyles { get; internal set; }
    internal MasterPageCollection MasterStyles { get; internal set; }
    internal List`1<FontFace> get_FontFaceDecls();
    internal void set_FontFaceDecls(List`1<FontFace> value);
    internal CommonStyles get_CommmonStyles();
    internal void set_CommmonStyles(CommonStyles value);
    internal AutomaticStyles get_AutoStyles();
    internal void set_AutoStyles(AutomaticStyles value);
    internal MasterPageCollection get_MasterStyles();
    internal void set_MasterStyles(MasterPageCollection value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.EmbeddedTextType : object {
    private int m_position;
    private string m_content;
    internal int Position { get; internal set; }
    internal string Content { get; internal set; }
    internal int get_Position();
    internal void set_Position(int value);
    internal string get_Content();
    internal void set_Content(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.FontFace : object {
    private FontFamilyGeneric m_fontfamilyGeneric;
    private FontPitch m_fontPitch;
    private string m_name;
    internal FontFamilyGeneric FontFamilyGeneric { get; internal set; }
    internal FontPitch FontPitch { get; internal set; }
    internal string Name { get; internal set; }
    internal FontFace(string name);
    internal FontFamilyGeneric get_FontFamilyGeneric();
    internal void set_FontFamilyGeneric(FontFamilyGeneric value);
    internal FontPitch get_FontPitch();
    internal void set_FontPitch(FontPitch value);
    internal string get_Name();
    internal void set_Name(string value);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.FractionType : CommonType {
    private int m_minDenominatorDigits;
    private int m_minNumeratorDigits;
    private int m_denominatorValue;
    internal int MinDenominatorDigits { get; internal set; }
    internal int MinNumeratorDigits { get; internal set; }
    internal int DenominatorValue { get; internal set; }
    internal int get_MinDenominatorDigits();
    internal void set_MinDenominatorDigits(int value);
    internal int get_MinNumeratorDigits();
    internal void set_MinNumeratorDigits(int value);
    internal int get_DenominatorValue();
    internal void set_DenominatorValue(int value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.HeaderFooterContent : object {
    private bool m_display;
    private HeaderSection m_regionCenter;
    private HeaderSection m_regionLeft;
    private HeaderSection m_regionRight;
    private OTable m_table;
    private string m_alphabeticalIndex;
    private string m_alphabeticalIndexAutoMarkFile;
    private string m_bibiliography;
    private string m_change;
    private string m_changeEnd;
    private string m_changeStart;
    private string m_DDEConnectionDecls;
    private string m_heading;
    private string m_illustrationIndex;
    private string m_list;
    private string m_objectIndex;
    private string m_Para;
    private string m_section;
    private string m_sequenceDecls;
    private int m_tableindex;
    private string m_TableOfContent;
    private string m_trackedChanges;
    private string m_userFileds;
    private string m_userIndex;
    private string m_variableDecls;
    private List`1<OTextBodyItem> m_bodyItems;
    internal List`1<OTextBodyItem> ChildItems { get; }
    internal bool Display { get; internal set; }
    internal HeaderSection RegionCenter { get; internal set; }
    internal HeaderSection RegionLeft { get; internal set; }
    internal HeaderSection RegionRight { get; internal set; }
    internal OTable Table { get; internal set; }
    internal string AlphabeticalIndex { get; internal set; }
    internal string AlphabeticalIndexAutoMarkFile { get; internal set; }
    internal string Bibiliography { get; internal set; }
    internal string Change { get; internal set; }
    internal string ChangeEnd { get; internal set; }
    internal string ChangeStart { get; internal set; }
    internal string DDEConnectionDecls { get; internal set; }
    internal string Heading { get; internal set; }
    internal string IllustrationIndex { get; internal set; }
    internal string List { get; internal set; }
    internal string ObjectIndex { get; internal set; }
    internal string Para { get; internal set; }
    internal string Section { get; internal set; }
    internal string SequenceDecls { get; internal set; }
    internal int Tableindex { get; internal set; }
    internal string TableOfContent { get; internal set; }
    internal string TrackedChanges { get; internal set; }
    internal string UserFileds { get; internal set; }
    internal string UserIndex { get; internal set; }
    internal string VariableDecls { get; internal set; }
    internal List`1<OTextBodyItem> get_ChildItems();
    internal bool get_Display();
    internal void set_Display(bool value);
    internal HeaderSection get_RegionCenter();
    internal void set_RegionCenter(HeaderSection value);
    internal HeaderSection get_RegionLeft();
    internal void set_RegionLeft(HeaderSection value);
    internal HeaderSection get_RegionRight();
    internal void set_RegionRight(HeaderSection value);
    internal OTable get_Table();
    internal void set_Table(OTable value);
    internal string get_AlphabeticalIndex();
    internal void set_AlphabeticalIndex(string value);
    internal string get_AlphabeticalIndexAutoMarkFile();
    internal void set_AlphabeticalIndexAutoMarkFile(string value);
    internal string get_Bibiliography();
    internal void set_Bibiliography(string value);
    internal string get_Change();
    internal void set_Change(string value);
    internal string get_ChangeEnd();
    internal void set_ChangeEnd(string value);
    internal string get_ChangeStart();
    internal void set_ChangeStart(string value);
    internal string get_DDEConnectionDecls();
    internal void set_DDEConnectionDecls(string value);
    internal string get_Heading();
    internal void set_Heading(string value);
    internal string get_IllustrationIndex();
    internal void set_IllustrationIndex(string value);
    internal string get_List();
    internal void set_List(string value);
    internal string get_ObjectIndex();
    internal void set_ObjectIndex(string value);
    internal string get_Para();
    internal void set_Para(string value);
    internal string get_Section();
    internal void set_Section(string value);
    internal string get_SequenceDecls();
    internal void set_SequenceDecls(string value);
    internal int get_Tableindex();
    internal void set_Tableindex(int value);
    internal string get_TableOfContent();
    internal void set_TableOfContent(string value);
    internal string get_TrackedChanges();
    internal void set_TrackedChanges(string value);
    internal string get_UserFileds();
    internal void set_UserFileds(string value);
    internal string get_UserIndex();
    internal void set_UserIndex(string value);
    internal string get_VariableDecls();
    internal void set_VariableDecls(string value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.HeaderFooterProperties : MarginBorderProperties {
    private double m_minHeight;
    private List`1<OTextBodyItem> m_textBodyItem;
    internal List`1<OTextBodyItem> TextBodyItems { get; internal set; }
    internal double MinHeight { get; internal set; }
    internal List`1<OTextBodyItem> get_TextBodyItems();
    internal void set_TextBodyItems(List`1<OTextBodyItem> value);
    internal double get_MinHeight();
    internal void set_MinHeight(double value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.HeaderFooterStyle : object {
    private HeaderFooterProperties m_headerFooterProperties;
    private bool m_isHeader;
    private double m_headerDistance;
    private double m_footerDistance;
    internal bool IsHeader { get; internal set; }
    internal HeaderFooterProperties HeaderFooterproperties { get; internal set; }
    internal double HeaderDistance { get; internal set; }
    internal double FooterDistance { get; internal set; }
    internal bool get_IsHeader();
    internal void set_IsHeader(bool value);
    internal HeaderFooterProperties get_HeaderFooterproperties();
    internal void set_HeaderFooterproperties(HeaderFooterProperties value);
    internal double get_HeaderDistance();
    internal void set_HeaderDistance(double value);
    internal double get_FooterDistance();
    internal void set_FooterDistance(double value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.HeaderSection : object {
    private OParagraph m_paragraph;
    internal OParagraph Paragraph { get; internal set; }
    internal OParagraph get_Paragraph();
    internal void set_Paragraph(OParagraph value);
    internal void Dispose();
}
internal interface Syncfusion.DocIO.ODF.Base.ODFImplementation.INamedObject {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.LanguageStyle : object {
    private string m_country;
    private string m_language;
    private string m_rFCLanguageTag;
    private string m_script;
    internal string Country { get; internal set; }
    internal string Language { get; internal set; }
    internal string RFCLanguageTag { get; internal set; }
    internal string Script { get; internal set; }
    internal string get_Country();
    internal void set_Country(string value);
    internal string get_Language();
    internal void set_Language(string value);
    internal string get_RFCLanguageTag();
    internal void set_RFCLanguageTag(string value);
    internal string get_Script();
    internal void set_Script(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.LeftHeader : HeaderSection {
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ListLevelProperties : object {
    private string m_numberSufix;
    private string m_numberPrefix;
    private float m_spaceBefore;
    private float m_minimumLabelWidth;
    private float m_leftMargin;
    private float m_textIndent;
    private ListNumberFormat m_numberFormat;
    private string m_bulletCharacter;
    private ODFStyle m_odfStyle;
    private TextProperties m_TextProperties;
    private bool m_isPictureBullet;
    private string m_href;
    private OPicture m_pictureBullet;
    private TextAlign m_textAlign;
    internal string PictureHRef { get; internal set; }
    internal OPicture PictureBullet { get; internal set; }
    internal bool IsPictureBullet { get; internal set; }
    internal ODFStyle Style { get; internal set; }
    internal TextProperties TextProperties { get; internal set; }
    internal string BulletCharacter { get; internal set; }
    internal string NumberSufix { get; internal set; }
    internal string NumberPrefix { get; internal set; }
    internal float SpaceBefore { get; internal set; }
    internal float MinimumLabelWidth { get; internal set; }
    internal float LeftMargin { get; internal set; }
    internal float TextIndent { get; internal set; }
    internal ListNumberFormat NumberFormat { get; internal set; }
    internal TextAlign TextAlignment { get; internal set; }
    internal string get_PictureHRef();
    internal void set_PictureHRef(string value);
    internal OPicture get_PictureBullet();
    internal void set_PictureBullet(OPicture value);
    internal bool get_IsPictureBullet();
    internal void set_IsPictureBullet(bool value);
    internal ODFStyle get_Style();
    internal void set_Style(ODFStyle value);
    internal TextProperties get_TextProperties();
    internal void set_TextProperties(TextProperties value);
    internal string get_BulletCharacter();
    internal void set_BulletCharacter(string value);
    internal string get_NumberSufix();
    internal void set_NumberSufix(string value);
    internal string get_NumberPrefix();
    internal void set_NumberPrefix(string value);
    internal float get_SpaceBefore();
    internal void set_SpaceBefore(float value);
    internal float get_MinimumLabelWidth();
    internal void set_MinimumLabelWidth(float value);
    internal float get_LeftMargin();
    internal void set_LeftMargin(float value);
    internal float get_TextIndent();
    internal void set_TextIndent(float value);
    internal ListNumberFormat get_NumberFormat();
    internal void set_NumberFormat(ListNumberFormat value);
    internal TextAlign get_TextAlignment();
    internal void set_TextAlignment(TextAlign value);
    internal void Close();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.Manifest.FileEntry : object {
    private string m_path;
    private string m_mediaType;
    internal string Path { get; internal set; }
    internal string MediaType { get; internal set; }
    internal string get_Path();
    internal void set_Path(string value);
    internal string get_MediaType();
    internal void set_MediaType(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.Manifest.Manifest : object {
    private List`1<FileEntry> m_files;
    internal List`1<FileEntry> Files { get; internal set; }
    internal List`1<FileEntry> get_Files();
    internal void set_Files(List`1<FileEntry> value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.MapStyle : object {
    private string m_applyStyleName;
    private string m_condition;
    private string m_baseCellAddress;
    internal string ApplyStyleName { get; internal set; }
    internal string Condition { get; internal set; }
    internal string BaseCellAddress { get; internal set; }
    internal string get_ApplyStyleName();
    internal void set_ApplyStyleName(string value);
    internal string get_Condition();
    internal void set_Condition(string value);
    internal string get_BaseCellAddress();
    internal void set_BaseCellAddress(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.MarginBorderProperties : BorderProperties {
    private double m_marginLeft;
    private double m_marginRight;
    private double m_marginTop;
    private double m_marginBottom;
    internal byte m_marginFlag;
    private static byte MarginLeftKey;
    private static byte MarginRightKey;
    private static byte MarginTopKey;
    private static byte MarginBottomKey;
    internal double MarginLeft { get; internal set; }
    internal double MarginRight { get; internal set; }
    internal double MarginTop { get; internal set; }
    internal double MarginBottom { get; internal set; }
    internal double get_MarginLeft();
    internal void set_MarginLeft(double value);
    internal double get_MarginRight();
    internal void set_MarginRight(double value);
    internal double get_MarginTop();
    internal void set_MarginTop(double value);
    internal double get_MarginBottom();
    internal void set_MarginBottom(double value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.MasterPage : object {
    private string m_name;
    private string m_pageLayoutName;
    private HeaderFooterContent m_header;
    private HeaderFooterContent m_headerLeft;
    private HeaderFooterContent m_footer;
    private HeaderFooterContent m_footerLeft;
    private HeaderFooterContent m_firstPageHeader;
    private HeaderFooterContent m_firstPageFooter;
    public string Name { get; public set; }
    internal string PageLayoutName { get; internal set; }
    internal HeaderFooterContent Header { get; internal set; }
    internal HeaderFooterContent HeaderLeft { get; internal set; }
    internal HeaderFooterContent Footer { get; internal set; }
    internal HeaderFooterContent FooterLeft { get; internal set; }
    internal HeaderFooterContent FirstPageHeader { get; internal set; }
    internal HeaderFooterContent FirstPageFooter { get; internal set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal string get_PageLayoutName();
    internal void set_PageLayoutName(string value);
    internal HeaderFooterContent get_Header();
    internal void set_Header(HeaderFooterContent value);
    internal HeaderFooterContent get_HeaderLeft();
    internal void set_HeaderLeft(HeaderFooterContent value);
    internal HeaderFooterContent get_Footer();
    internal void set_Footer(HeaderFooterContent value);
    internal HeaderFooterContent get_FooterLeft();
    internal void set_FooterLeft(HeaderFooterContent value);
    internal HeaderFooterContent get_FirstPageHeader();
    internal void set_FirstPageHeader(HeaderFooterContent value);
    internal HeaderFooterContent get_FirstPageFooter();
    internal void set_FirstPageFooter(HeaderFooterContent value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.MasterPageCollection : CollectionBase`1<MasterPage> {
    private Dictionary`2<string, MasterPage> m_dictMasterPages;
    internal Dictionary`2<string, MasterPage> DictMasterPages { get; internal set; }
    internal Dictionary`2<string, MasterPage> get_DictMasterPages();
    internal void set_DictMasterPages(Dictionary`2<string, MasterPage> value);
    internal string Add(MasterPage page);
    private string ContainsValue(MasterPage page);
    internal void Remove(string key);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.Month : DateBase {
    private string m_possesiveForm;
    private string m_textual;
    internal string PossesiveForm { get; internal set; }
    internal string Textual { get; internal set; }
    internal string get_PossesiveForm();
    internal void set_PossesiveForm(string value);
    internal string get_Textual();
    internal void set_Textual(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.NamedObject : object {
    private string m_name;
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.NumberFormat : LanguageStyle {
    private string m_title;
    private string m_transliterationCountry;
    private string m_transliterationFormat;
    private string m_transliterationLanguage;
    private string m_transliterationStyle;
    internal string Title { get; internal set; }
    internal string TransliterationCountry { get; internal set; }
    internal string TransliterationFormat { get; internal set; }
    internal string TransliterationLanguage { get; internal set; }
    internal string TransliterationStyle { get; internal set; }
    internal string get_Title();
    internal void set_Title(string value);
    internal string get_TransliterationCountry();
    internal void set_TransliterationCountry(string value);
    internal string get_TransliterationFormat();
    internal void set_TransliterationFormat(string value);
    internal string get_TransliterationLanguage();
    internal void set_TransliterationLanguage(string value);
    internal string get_TransliterationStyle();
    internal void set_TransliterationStyle(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.NumberStyle : DataStyle {
    private NumberType m_number;
    private FractionType m_fraction;
    private ScientificNumberType m_scientificNumber;
    internal NumberType Number { get; internal set; }
    internal FractionType Fraction { get; internal set; }
    internal ScientificNumberType ScientificNumber { get; internal set; }
    internal NumberType get_Number();
    internal void set_Number(NumberType value);
    internal FractionType get_Fraction();
    internal void set_Fraction(FractionType value);
    internal ScientificNumberType get_ScientificNumber();
    internal void set_ScientificNumber(ScientificNumberType value);
    internal bool HasKey(int propertyKey, int flagname);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.NumberType : CommonType {
    private string m_decimalReplacement;
    private string m_displayFactor;
    private EmbeddedTextType m_embeddedText;
    internal string DecimalReplacement { get; internal set; }
    internal string DisplayFactor { get; internal set; }
    internal EmbeddedTextType EmbeddedText { get; internal set; }
    internal string get_DecimalReplacement();
    internal void set_DecimalReplacement(string value);
    internal string get_DisplayFactor();
    internal void set_DisplayFactor(string value);
    internal EmbeddedTextType get_EmbeddedText();
    internal void set_EmbeddedText(EmbeddedTextType value);
    public virtual bool Equals(object obj);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OBody : object {
    private Text m_text;
    private List`1<OTextBodyItem> m_textBodyItem;
    internal List`1<OTextBodyItem> TextBodyItems { get; internal set; }
    internal List`1<OTextBodyItem> get_TextBodyItems();
    internal void set_TextBodyItems(List`1<OTextBodyItem> value);
    internal void Close();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OBookmark : OParagraphItem {
    private string m_name;
    internal string Name { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OBookmarkEnd : OParagraphItem {
    private string m_name;
    internal string Name { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OBookmarkStart : OParagraphItem {
    private string m_name;
    internal string Name { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OBreak : OParagraphItem {
    private OBreakType m_breakType;
    internal OBreakType BreakType { get; internal set; }
    internal OBreakType get_BreakType();
    internal void set_BreakType(OBreakType value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ODFBorder : object {
    private Color m_borderColor;
    private BorderLineStyle m_lineStyle;
    private string m_lineWidth;
    internal byte styleFlags;
    private static byte LineColorKey;
    private static byte LineStyleKey;
    private static byte LineWidthKey;
    internal Color LineColor { get; internal set; }
    internal BorderLineStyle LineStyle { get; internal set; }
    internal string LineWidth { get; internal set; }
    internal Color get_LineColor();
    internal void set_LineColor(Color value);
    internal BorderLineStyle get_LineStyle();
    internal void set_LineStyle(BorderLineStyle value);
    internal string get_LineWidth();
    internal void set_LineWidth(string value);
    internal bool HasKey(int propertyKey);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ODFColumns : object {
    private int m_columnCount;
    private int m_columnGap;
    public int ColumnGap { get; public set; }
    internal int ColumnCount { get; internal set; }
    public int get_ColumnGap();
    public void set_ColumnGap(int value);
    internal int get_ColumnCount();
    internal void set_ColumnCount(int value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ODFOffice : object {
    private DocumentContent m_docContent;
    private DocumentStyles m_docStyles;
    internal DocumentContent DocContent { get; internal set; }
    internal DocumentStyles DocStyles { get; internal set; }
    internal DocumentContent get_DocContent();
    internal void set_DocContent(DocumentContent value);
    internal DocumentStyles get_DocStyles();
    internal void set_DocStyles(DocumentStyles value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ODFParagraph : object {
    private string m_styleName;
    private string m_alphabeticalIndexMark;
    private string m_alphabeticalIndexMarkStart;
    private string m_alphabeticalIndexMarkEnd;
    private string m_authorInitals;
    private string m_authorName;
    private string m_bibliographyMark;
    private string m_bookMark;
    private string m_bookMarkStart;
    private string m_bookMarkEnd;
    private string m_bookMarkRef;
    private string m_change;
    private string m_changeStart;
    private string m_changeEnd;
    private string m_chapter;
    private string m_chapterCount;
    private string m_conditionalText;
    private DateTime m_creationDate;
    private DateTime m_creationTime;
    private string m_creator;
    private string m_databaseDisplay;
    private string m_databaseName;
    private string m_databaseNext;
    private string m_databaseRowNumber;
    private string m_databaseRowSelect;
    private DateTime m_date;
    private string m_ddeConnection;
    private string m_description;
    private string m_editingCycles;
    private string m_editingDuration;
    private string m_executeMacro;
    private string m_expression;
    private string m_fileName;
    private string m_hiddenParagraph;
    private string m_hiddenText;
    private int m_imageCount;
    private string m_initialCreator;
    private string m_keywords;
    private string m_lineBreak;
    private DateTime m_modificationDate;
    private DateTime m_modificationTime;
    private string m_modificationNote;
    private string m_modificationNoteRef;
    private int m_objectCount;
    private string m_pageContinuation;
    private int m_pageCount;
    private PageNumber m_pageNumber;
    private string m_setvariable;
    private int m_paragraphCount;
    private string m_placeHolder;
    private DateTime m_printDate;
    private string m_printedBy;
    private DateTime m_printTime;
    private string m_referenceMark;
    private string m_referenceMarkStart;
    private string m_referenceMarkEnd;
    private string m_referenceRef;
    private string m_ruby;
    private string m_script;
    private string m_senderCity;
    private string m_senderCompany;
    private string m_senderCountry;
    private string m_senderEmail;
    private string m_senderFax;
    private string m_senderFirstName;
    private string m_senderinitials;
    private string m_senderLastName;
    private string m_senderPhonePrivate;
    private string m_senderPhoneWork;
    private string m_senderPosition;
    private string m_senderPostalCode;
    private string m_stateOrProvince;
    private string m_senderStreet;
    private string m_senderTitle;
    private string m_sequence;
    private string m_sequenceRef;
    private string m_sheetName;
    private string m_softPageBreak;
    private string m_span;
    private string m_subject;
    private string m_tab;
    private int m_tableCount;
    private string m_tableFormula;
    private string m_templateName;
    private string m_textInput;
    private DateTime m_time;
    private string m_title;
    private string m_tocMark;
    private string m_tocMarkStart;
    private string m_tocMarkEnd;
    private string m_userDefined;
    private string m_userFieldGet;
    private string m_userFieldInput;
    private string m_userIndexMark;
    private string m_getVariable;
    private string m_setVariable;
    private string m_getVariableInput;
    private int m_wordCount;
    internal int WordCount { get; internal set; }
    internal string GetVariableInput { get; internal set; }
    internal string SetVariable { get; internal set; }
    internal string GetVariable1 { get; internal set; }
    internal string UserIndexMark { get; internal set; }
    internal string UserFieldInput { get; internal set; }
    internal string UserFieldGet { get; internal set; }
    internal string UserDefined { get; internal set; }
    internal string TocMarkEnd { get; internal set; }
    internal string TocMarkStart { get; internal set; }
    internal string TocMark { get; internal set; }
    internal string Title { get; internal set; }
    internal DateTime Time { get; internal set; }
    internal string TextInput { get; internal set; }
    internal string TemplateName { get; internal set; }
    internal string TableFormula { get; internal set; }
    internal int TableCount { get; internal set; }
    internal string Tab { get; internal set; }
    internal string Subject { get; internal set; }
    internal string Span { get; internal set; }
    internal string SheetName { get; internal set; }
    internal string SoftPageBreak { get; internal set; }
    internal string SequenceRef { get; internal set; }
    internal string Sequence { get; internal set; }
    internal string SenderTitle { get; internal set; }
    internal string SenderStreet { get; internal set; }
    internal string StateOrProvince { get; internal set; }
    internal string SenderPosition { get; internal set; }
    internal string SenderPostalCode { get; internal set; }
    internal string SenderPhoneWork { get; internal set; }
    internal string SenderPhonePrivate { get; internal set; }
    internal string SenderLastName { get; internal set; }
    internal string Senderinitials { get; internal set; }
    internal string SenderFirstName { get; internal set; }
    internal string SenderFax { get; internal set; }
    internal string SenderEmail { get; internal set; }
    internal string SenderCountry { get; internal set; }
    internal string SenderCompany { get; internal set; }
    internal string SenderCity { get; internal set; }
    internal string Script { get; internal set; }
    internal string Ruby { get; internal set; }
    internal string ReferenceRef { get; internal set; }
    internal string ReferenceMarkEnd { get; internal set; }
    internal string ReferenceMarkStart { get; internal set; }
    internal string ReferenceMark { get; internal set; }
    internal DateTime PrintTime { get; internal set; }
    internal string PrintedBy { get; internal set; }
    internal DateTime PrintDate { get; internal set; }
    internal string PlaceHolder { get; internal set; }
    internal int ParagraphCount { get; internal set; }
    internal string Setvariable { get; internal set; }
    internal string GetVariable { get; internal set; }
    internal PageNumber PageNumber { get; internal set; }
    internal int PageCount { get; internal set; }
    internal string PageContinuation { get; internal set; }
    internal int ObjectCount { get; internal set; }
    internal string ModificationNoteRef { get; internal set; }
    internal string ModificationNote { get; internal set; }
    internal DateTime ModificationTime { get; internal set; }
    internal DateTime ModificationDate { get; internal set; }
    internal string LineBreak { get; internal set; }
    internal string Keywords { get; internal set; }
    internal string InitialCreator { get; internal set; }
    internal int ImageCount { get; internal set; }
    internal string HiddenText { get; internal set; }
    internal string HiddenParagraph { get; internal set; }
    internal string FileName { get; internal set; }
    internal string Expression { get; internal set; }
    internal string ExecuteMacro { get; internal set; }
    internal string EditingDuration { get; internal set; }
    internal string EditingCycles { get; internal set; }
    internal string Description { get; internal set; }
    internal string DdeConnection { get; internal set; }
    internal DateTime Date { get; internal set; }
    internal string DatabaseRowSelect { get; internal set; }
    internal string DatabaseRowNumber { get; internal set; }
    internal string DatabaseNext { get; internal set; }
    internal string DatabaseDisplay { get; internal set; }
    internal string Creator { get; internal set; }
    internal DateTime CreationTime { get; internal set; }
    internal DateTime CreationDate { get; internal set; }
    internal string ConditionalText { get; internal set; }
    internal string ChapterCount { get; internal set; }
    internal string Chapter { get; internal set; }
    internal string ChangeEnd { get; internal set; }
    internal string ChangeStart { get; internal set; }
    internal string Change { get; internal set; }
    internal string BookMarkRef { get; internal set; }
    internal string BookMarkEnd { get; internal set; }
    internal string BookMarkStart { get; internal set; }
    internal string BookMark { get; internal set; }
    internal string BibliographyMark { get; internal set; }
    internal string AuthorName { get; internal set; }
    internal string AuthorInitals { get; internal set; }
    internal string AlphabeticalIndexMarkEnd { get; internal set; }
    internal string AlphabeticalIndexMarkStart { get; internal set; }
    internal string AlphabeticalIndexMark { get; internal set; }
    internal string StyleName { get; internal set; }
    internal int get_WordCount();
    internal void set_WordCount(int value);
    internal string get_GetVariableInput();
    internal void set_GetVariableInput(string value);
    internal string get_SetVariable();
    internal void set_SetVariable(string value);
    internal string get_GetVariable1();
    internal void set_GetVariable1(string value);
    internal string get_UserIndexMark();
    internal void set_UserIndexMark(string value);
    internal string get_UserFieldInput();
    internal void set_UserFieldInput(string value);
    internal string get_UserFieldGet();
    internal void set_UserFieldGet(string value);
    internal string get_UserDefined();
    internal void set_UserDefined(string value);
    internal string get_TocMarkEnd();
    internal void set_TocMarkEnd(string value);
    internal string get_TocMarkStart();
    internal void set_TocMarkStart(string value);
    internal string get_TocMark();
    internal void set_TocMark(string value);
    internal string get_Title();
    internal void set_Title(string value);
    internal DateTime get_Time();
    internal void set_Time(DateTime value);
    internal string get_TextInput();
    internal void set_TextInput(string value);
    internal string get_TemplateName();
    internal void set_TemplateName(string value);
    internal string get_TableFormula();
    internal void set_TableFormula(string value);
    internal int get_TableCount();
    internal void set_TableCount(int value);
    internal string get_Tab();
    internal void set_Tab(string value);
    internal string get_Subject();
    internal void set_Subject(string value);
    internal string get_Span();
    internal void set_Span(string value);
    internal string get_SheetName();
    internal void set_SheetName(string value);
    internal string get_SoftPageBreak();
    internal void set_SoftPageBreak(string value);
    internal string get_SequenceRef();
    internal void set_SequenceRef(string value);
    internal string get_Sequence();
    internal void set_Sequence(string value);
    internal string get_SenderTitle();
    internal void set_SenderTitle(string value);
    internal string get_SenderStreet();
    internal void set_SenderStreet(string value);
    internal string get_StateOrProvince();
    internal void set_StateOrProvince(string value);
    internal string get_SenderPosition();
    internal void set_SenderPosition(string value);
    internal string get_SenderPostalCode();
    internal void set_SenderPostalCode(string value);
    internal string get_SenderPhoneWork();
    internal void set_SenderPhoneWork(string value);
    internal string get_SenderPhonePrivate();
    internal void set_SenderPhonePrivate(string value);
    internal string get_SenderLastName();
    internal void set_SenderLastName(string value);
    internal string get_Senderinitials();
    internal void set_Senderinitials(string value);
    internal string get_SenderFirstName();
    internal void set_SenderFirstName(string value);
    internal string get_SenderFax();
    internal void set_SenderFax(string value);
    internal string get_SenderEmail();
    internal void set_SenderEmail(string value);
    internal string get_SenderCountry();
    internal void set_SenderCountry(string value);
    internal string get_SenderCompany();
    internal void set_SenderCompany(string value);
    internal string get_SenderCity();
    internal void set_SenderCity(string value);
    internal string get_Script();
    internal void set_Script(string value);
    internal string get_Ruby();
    internal void set_Ruby(string value);
    internal string get_ReferenceRef();
    internal void set_ReferenceRef(string value);
    internal string get_ReferenceMarkEnd();
    internal void set_ReferenceMarkEnd(string value);
    internal string get_ReferenceMarkStart();
    internal void set_ReferenceMarkStart(string value);
    internal string get_ReferenceMark();
    internal void set_ReferenceMark(string value);
    internal DateTime get_PrintTime();
    internal void set_PrintTime(DateTime value);
    internal string get_PrintedBy();
    internal void set_PrintedBy(string value);
    internal DateTime get_PrintDate();
    internal void set_PrintDate(DateTime value);
    internal string get_PlaceHolder();
    internal void set_PlaceHolder(string value);
    internal int get_ParagraphCount();
    internal void set_ParagraphCount(int value);
    internal string get_Setvariable();
    internal void set_Setvariable(string value);
    internal string get_GetVariable();
    internal void set_GetVariable(string value);
    internal PageNumber get_PageNumber();
    internal void set_PageNumber(PageNumber value);
    internal int get_PageCount();
    internal void set_PageCount(int value);
    internal string get_PageContinuation();
    internal void set_PageContinuation(string value);
    internal int get_ObjectCount();
    internal void set_ObjectCount(int value);
    internal string get_ModificationNoteRef();
    internal void set_ModificationNoteRef(string value);
    internal string get_ModificationNote();
    internal void set_ModificationNote(string value);
    internal DateTime get_ModificationTime();
    internal void set_ModificationTime(DateTime value);
    internal DateTime get_ModificationDate();
    internal void set_ModificationDate(DateTime value);
    internal string get_LineBreak();
    internal void set_LineBreak(string value);
    internal string get_Keywords();
    internal void set_Keywords(string value);
    internal string get_InitialCreator();
    internal void set_InitialCreator(string value);
    internal int get_ImageCount();
    internal void set_ImageCount(int value);
    internal string get_HiddenText();
    internal void set_HiddenText(string value);
    internal string get_HiddenParagraph();
    internal void set_HiddenParagraph(string value);
    internal string get_FileName();
    internal void set_FileName(string value);
    internal string get_Expression();
    internal void set_Expression(string value);
    internal string get_ExecuteMacro();
    internal void set_ExecuteMacro(string value);
    internal string get_EditingDuration();
    internal void set_EditingDuration(string value);
    internal string get_EditingCycles();
    internal void set_EditingCycles(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal string get_DdeConnection();
    internal void set_DdeConnection(string value);
    internal DateTime get_Date();
    internal void set_Date(DateTime value);
    internal string get_DatabaseRowSelect();
    internal void set_DatabaseRowSelect(string value);
    internal string get_DatabaseRowNumber();
    internal void set_DatabaseRowNumber(string value);
    internal string get_DatabaseNext();
    internal void set_DatabaseNext(string value);
    internal string get_DatabaseDisplay();
    internal void set_DatabaseDisplay(string value);
    internal string get_Creator();
    internal void set_Creator(string value);
    internal DateTime get_CreationTime();
    internal void set_CreationTime(DateTime value);
    internal DateTime get_CreationDate();
    internal void set_CreationDate(DateTime value);
    internal string get_ConditionalText();
    internal void set_ConditionalText(string value);
    internal string get_ChapterCount();
    internal void set_ChapterCount(string value);
    internal string get_Chapter();
    internal void set_Chapter(string value);
    internal string get_ChangeEnd();
    internal void set_ChangeEnd(string value);
    internal string get_ChangeStart();
    internal void set_ChangeStart(string value);
    internal string get_Change();
    internal void set_Change(string value);
    internal string get_BookMarkRef();
    internal void set_BookMarkRef(string value);
    internal string get_BookMarkEnd();
    internal void set_BookMarkEnd(string value);
    internal string get_BookMarkStart();
    internal void set_BookMarkStart(string value);
    internal string get_BookMark();
    internal void set_BookMark(string value);
    internal string get_BibliographyMark();
    internal void set_BibliographyMark(string value);
    internal string get_AuthorName();
    internal void set_AuthorName(string value);
    internal string get_AuthorInitals();
    internal void set_AuthorInitals(string value);
    internal string get_AlphabeticalIndexMarkEnd();
    internal void set_AlphabeticalIndexMarkEnd(string value);
    internal string get_AlphabeticalIndexMarkStart();
    internal void set_AlphabeticalIndexMarkStart(string value);
    internal string get_AlphabeticalIndexMark();
    internal void set_AlphabeticalIndexMark(string value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ODFParagraphProperties : CommonTableParaProperties {
    private HyphenationKeep m_hyphenationKeep;
    private int m_hyphenationLadderCount;
    private KeepTogether m_keepTogether;
    private float m_lineHeight;
    private UInt32 m_orphans;
    private float m_padding;
    private float m_paddingBottom;
    private float m_paddingTop;
    private float m_paddingLeft;
    private float m_paddingRight;
    private TextAlign m_textAlign;
    private TextAlignLast m_textAlignLast;
    private float m_textIndent;
    private UInt32 m_windows;
    private UInt32 m_backgroundTransparancy;
    private float m_borderLineWidth;
    private float m_borderLineWidthTop;
    private float m_borderLineWidthBottom;
    private float m_borderLineWidthLeft;
    private float m_borderLineWidthRight;
    private bool m_fontIndependentLineSpacing;
    private bool m_justifySingleWord;
    private double m_lineHeightAtLeast;
    private double m_lineSpacing;
    private bool m_registerTrue;
    private bool m_snapToLayoutGrid;
    private UInt32 m_tapToDistance;
    private UInt32 m_lineNumber;
    private bool m_numberLines;
    private bool m_lineBreak;
    private PunctuationWrap m_punctuationWrap;
    private TextAutoSpace m_textAutoSpace;
    private Nullable`1<VerticalAlign> m_verticalAlign;
    private bool m_isTab;
    private double m_afterSpacing;
    private double m_beforeSpacing;
    private double m_leftIndent;
    private double m_rightIndent;
    private List`1<TabStops> m_tabStops;
    internal int m_styleFlag1;
    internal byte m_styleFlag2;
    private static int VerticalAlignKey;
    private static int TextAutoSpaceKey;
    private static int PunctuationWrapKey;
    private static int LineBreakKey;
    private static int NumberLinesKey;
    private static int LineNumberKey;
    private static int TapToDistanceKey;
    private static int SnapToLayoutGridKey;
    private static int RegisterTrueKey;
    private static int LineSpacingKey;
    private static int LineHeightAtLeastKey;
    private static int JustifySingleWordKey;
    private static int BorderLineWidthRightKey;
    private static int BorderLineWidthLeftKey;
    private static int BorderLineWidthBottomKey;
    private static int BorderLineWidthTopKey;
    private static int BorderLineWidthKey;
    private static int BackgroundTransparancyKey;
    private static int WindowsKey;
    private static int TextIndentKey;
    private static int TextAlignLastKey;
    private static int TextAlignKey;
    private static int PaddingRightKey;
    private static int PaddingLeftKey;
    private static int PaddingTopKey;
    private static int PaddingBottomKey;
    private static int PaddingKey;
    private static int OrphansKey;
    private static int LineHeightKey;
    private static int KeepTogetherKey;
    private static int HyphenationLadderCountKey;
    private static int HyphenationKeepKey;
    private static byte BeforeSpacingKey;
    private static byte AfterSpacingKey;
    private static byte LeftIndentKey;
    private static byte RightIndentKey;
    internal List`1<TabStops> TabStops { get; internal set; }
    internal Nullable`1<VerticalAlign> VerticalAlign { get; internal set; }
    internal TextAutoSpace TextAutoSpace { get; internal set; }
    internal PunctuationWrap PunctuationWrap { get; internal set; }
    internal bool LineBreak { get; internal set; }
    internal bool NumberLines { get; internal set; }
    internal UInt32 LineNumber { get; internal set; }
    internal UInt32 TapToDistance { get; internal set; }
    internal bool SnapToLayoutGrid { get; internal set; }
    internal bool RegisterTrue { get; internal set; }
    internal double LineSpacing { get; internal set; }
    internal double LineHeightAtLeast { get; internal set; }
    internal bool JustifySingleWord { get; internal set; }
    internal float BorderLineWidthRight { get; internal set; }
    internal float BorderLineWidthLeft { get; internal set; }
    internal float BorderLineWidthBottom { get; internal set; }
    internal float BorderLineWidthTop { get; internal set; }
    internal float BorderLineWidth { get; internal set; }
    internal UInt32 BackgroundTransparancy { get; internal set; }
    internal UInt32 Windows { get; internal set; }
    internal float TextIndent { get; internal set; }
    internal TextAlignLast TextAlignLast { get; internal set; }
    internal TextAlign TextAlign { get; internal set; }
    internal float PaddingRight { get; internal set; }
    internal float PaddingLeft { get; internal set; }
    internal float PaddingTop { get; internal set; }
    internal float PaddingBottom { get; internal set; }
    internal float Padding { get; internal set; }
    internal UInt32 Orphans { get; internal set; }
    internal float LineHeight { get; internal set; }
    internal KeepTogether KeepTogether { get; internal set; }
    internal int HyphenationLadderCount { get; internal set; }
    internal HyphenationKeep HyphenationKeep { get; internal set; }
    internal bool FontIndependentLineSpacing { get; internal set; }
    internal bool IsTab { get; internal set; }
    internal double BeforeSpacing { get; internal set; }
    internal double AfterSpacing { get; internal set; }
    internal double LeftIndent { get; internal set; }
    internal double RightIndent { get; internal set; }
    internal List`1<TabStops> get_TabStops();
    internal void set_TabStops(List`1<TabStops> value);
    internal Nullable`1<VerticalAlign> get_VerticalAlign();
    internal void set_VerticalAlign(Nullable`1<VerticalAlign> value);
    internal TextAutoSpace get_TextAutoSpace();
    internal void set_TextAutoSpace(TextAutoSpace value);
    internal PunctuationWrap get_PunctuationWrap();
    internal void set_PunctuationWrap(PunctuationWrap value);
    internal bool get_LineBreak();
    internal void set_LineBreak(bool value);
    internal bool get_NumberLines();
    internal void set_NumberLines(bool value);
    internal UInt32 get_LineNumber();
    internal void set_LineNumber(UInt32 value);
    internal UInt32 get_TapToDistance();
    internal void set_TapToDistance(UInt32 value);
    internal bool get_SnapToLayoutGrid();
    internal void set_SnapToLayoutGrid(bool value);
    internal bool get_RegisterTrue();
    internal void set_RegisterTrue(bool value);
    internal double get_LineSpacing();
    internal void set_LineSpacing(double value);
    internal double get_LineHeightAtLeast();
    internal void set_LineHeightAtLeast(double value);
    internal bool get_JustifySingleWord();
    internal void set_JustifySingleWord(bool value);
    internal float get_BorderLineWidthRight();
    internal void set_BorderLineWidthRight(float value);
    internal float get_BorderLineWidthLeft();
    internal void set_BorderLineWidthLeft(float value);
    internal float get_BorderLineWidthBottom();
    internal void set_BorderLineWidthBottom(float value);
    internal float get_BorderLineWidthTop();
    internal void set_BorderLineWidthTop(float value);
    internal float get_BorderLineWidth();
    internal void set_BorderLineWidth(float value);
    internal UInt32 get_BackgroundTransparancy();
    internal void set_BackgroundTransparancy(UInt32 value);
    internal UInt32 get_Windows();
    internal void set_Windows(UInt32 value);
    internal float get_TextIndent();
    internal void set_TextIndent(float value);
    internal TextAlignLast get_TextAlignLast();
    internal void set_TextAlignLast(TextAlignLast value);
    internal TextAlign get_TextAlign();
    internal void set_TextAlign(TextAlign value);
    internal float get_PaddingRight();
    internal void set_PaddingRight(float value);
    internal float get_PaddingLeft();
    internal void set_PaddingLeft(float value);
    internal float get_PaddingTop();
    internal void set_PaddingTop(float value);
    internal float get_PaddingBottom();
    internal void set_PaddingBottom(float value);
    internal float get_Padding();
    internal void set_Padding(float value);
    internal UInt32 get_Orphans();
    internal void set_Orphans(UInt32 value);
    internal float get_LineHeight();
    internal void set_LineHeight(float value);
    internal KeepTogether get_KeepTogether();
    internal void set_KeepTogether(KeepTogether value);
    internal int get_HyphenationLadderCount();
    internal void set_HyphenationLadderCount(int value);
    internal HyphenationKeep get_HyphenationKeep();
    internal void set_HyphenationKeep(HyphenationKeep value);
    internal bool get_FontIndependentLineSpacing();
    internal void set_FontIndependentLineSpacing(bool value);
    internal bool get_IsTab();
    internal void set_IsTab(bool value);
    internal double get_BeforeSpacing();
    internal void set_BeforeSpacing(double value);
    internal double get_AfterSpacing();
    internal void set_AfterSpacing(double value);
    internal double get_LeftIndent();
    internal void set_LeftIndent(double value);
    internal double get_RightIndent();
    internal void set_RightIndent(double value);
    internal bool HasKey(int propertyKey, int flagName);
    public virtual bool Equals(object obj);
    internal void Close();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ODFStyle : DefaultStyle {
    private string m_name;
    private string m_dataStyleName;
    private UInt32 m_defaultOutlineLevel;
    private string m_displayName;
    private UInt32 m_listLevel;
    private string m_listStyleName;
    private string m_masterPageName;
    private string m_nextStyleName;
    private string m_parentStyleName;
    private string m_percentageDataStyleName;
    private bool m_isInlineStyle;
    private bool m_hasParent;
    internal byte styleFlags;
    internal bool isDefault;
    public string Name { get; public set; }
    internal string DataStyleName { get; internal set; }
    internal UInt32 DefaultOutlineLevel { get; internal set; }
    internal string DisplayName { get; internal set; }
    internal string ListStyleName { get; internal set; }
    internal string MasterPageName { get; internal set; }
    internal string NextStyleName { get; internal set; }
    internal string ParentStyleName { get; internal set; }
    internal string PercentageDataStyleName { get; internal set; }
    internal UInt32 ListLevel { get; internal set; }
    internal bool IsInlineSTyle { get; internal set; }
    internal bool HasParent { get; internal set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal string get_DataStyleName();
    internal void set_DataStyleName(string value);
    internal UInt32 get_DefaultOutlineLevel();
    internal void set_DefaultOutlineLevel(UInt32 value);
    internal string get_DisplayName();
    internal void set_DisplayName(string value);
    internal string get_ListStyleName();
    internal void set_ListStyleName(string value);
    internal string get_MasterPageName();
    internal void set_MasterPageName(string value);
    internal string get_NextStyleName();
    internal void set_NextStyleName(string value);
    internal string get_ParentStyleName();
    internal void set_ParentStyleName(string value);
    internal string get_PercentageDataStyleName();
    internal void set_PercentageDataStyleName(string value);
    internal UInt32 get_ListLevel();
    internal void set_ListLevel(UInt32 value);
    internal bool get_IsInlineSTyle();
    internal void set_IsInlineSTyle(bool value);
    internal bool get_HasParent();
    internal void set_HasParent(bool value);
    internal bool HasKey(int propertyKey, int flagname);
    public virtual bool Equals(object obj);
    internal void Close();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ODFStyleCollection : CollectionBase`1<ODFStyle> {
    private Dictionary`2<string, ODFStyle> m_dictStyles;
    internal Dictionary`2<string, ODFStyle> DictStyles { get; internal set; }
    internal Dictionary`2<string, ODFStyle> get_DictStyles();
    internal void set_DictStyles(Dictionary`2<string, ODFStyle> value);
    internal string Add(ODFStyle style);
    internal string Add(ODFStyle style, int index);
    private string ContainsValue(ODFStyle style);
    private string MapName(ODFStyle style);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ODocument : object {
    private OBody m_body;
    private Dictionary`2<string, ImageRecord> m_documentImages;
    private List`1<OListStyle> m_listStyles;
    private List`1<ODFStyle> m_tocStyles;
    internal OBody Body { get; internal set; }
    internal Dictionary`2<string, ImageRecord> DocumentImages { get; }
    internal List`1<OListStyle> ListStyles { get; }
    internal List`1<ODFStyle> TOCStyles { get; internal set; }
    internal OBody get_Body();
    internal void set_Body(OBody value);
    internal Dictionary`2<string, ImageRecord> get_DocumentImages();
    internal List`1<OListStyle> get_ListStyles();
    internal List`1<ODFStyle> get_TOCStyles();
    internal void set_TOCStyles(List`1<ODFStyle> value);
    internal void Close();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OField : OParagraphItem {
    private string m_formattingstring;
    private string m_fieldValue;
    private string m_text;
    private OFieldType m_oFieldType;
    private PageNumberFormat m_pageNumberFormat;
    private CultureInfo m_fieldCulture;
    internal string FormattingString { get; internal set; }
    internal string FieldValue { get; internal set; }
    internal string Text { get; internal set; }
    internal CultureInfo FieldCulture { get; internal set; }
    internal OFieldType OFieldType { get; internal set; }
    internal PageNumberFormat PageNumberFormat { get; internal set; }
    internal string get_FormattingString();
    internal void set_FormattingString(string value);
    internal string get_FieldValue();
    internal void set_FieldValue(string value);
    internal string get_Text();
    internal void set_Text(string value);
    internal CultureInfo get_FieldCulture();
    internal void set_FieldCulture(CultureInfo value);
    internal OFieldType get_OFieldType();
    internal void set_OFieldType(OFieldType value);
    internal PageNumberFormat get_PageNumberFormat();
    internal void set_PageNumberFormat(PageNumberFormat value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OHyperlink : OParagraphItem {
    private string m_fieldValue;
    private string m_text;
    internal string FieldValue { get; internal set; }
    internal string Text { get; internal set; }
    internal string get_FieldValue();
    internal void set_FieldValue(string value);
    internal string get_Text();
    internal void set_Text(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OListStyle : object {
    private List`1<ListLevelProperties> m_listLevels;
    private string m_name;
    private string m_currentStyleName;
    internal string Name { get; internal set; }
    internal string CurrentStyleName { get; internal set; }
    internal List`1<ListLevelProperties> ListLevels { get; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_CurrentStyleName();
    internal void set_CurrentStyleName(string value);
    internal List`1<ListLevelProperties> get_ListLevels();
    internal void Close();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OListStyleCollection : object {
    private List`1<OListStyle> m_listStyles;
    internal List`1<OListStyle> OListStyles { get; }
    internal List`1<OListStyle> get_OListStyles();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OMergeField : OParagraphItem {
    private string m_fieldName;
    private string m_textBefore;
    private string m_textAfter;
    private string m_text;
    internal string FieldName { get; internal set; }
    internal string TextBefore { get; internal set; }
    internal string TextAfter { get; internal set; }
    internal string Text { get; internal set; }
    internal string get_FieldName();
    internal void set_FieldName(string value);
    internal string get_TextBefore();
    internal void set_TextBefore(string value);
    internal string get_TextAfter();
    internal void set_TextAfter(string value);
    internal string get_Text();
    internal void set_Text(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OParagraph : OTextBodyItem {
    private string m_styleName;
    private string m_listStyleName;
    private int m_listLevelNumber;
    private string m_alphabeticalIndexMark;
    private string m_alphabeticalIndexMarkStart;
    private string m_alphabeticalIndexMarkEnd;
    private string m_authorInitals;
    private string m_authorName;
    private string m_bibliographyMark;
    private string m_bookMark;
    private string m_bookMarkStart;
    private string m_bookMarkEnd;
    private string m_bookMarkRef;
    private string m_change;
    private string m_changeStart;
    private string m_changeEnd;
    private string m_chapter;
    private string m_chapterCount;
    private string m_conditionalText;
    private DateTime m_creationDate;
    private DateTime m_creationTime;
    private string m_creator;
    private string m_databaseDisplay;
    private string m_databaseName;
    private string m_databaseNext;
    private string m_databaseRowNumber;
    private string m_databaseRowSelect;
    private DateTime m_date;
    private string m_ddeConnection;
    private string m_description;
    private string m_editingCycles;
    private string m_editingDuration;
    private string m_executeMacro;
    private string m_expression;
    private string m_fileName;
    private string m_hiddenParagraph;
    private string m_hiddenText;
    private int m_imageCount;
    private string m_initialCreator;
    private string m_keywords;
    private bool m_lineBreak;
    private DateTime m_modificationDate;
    private DateTime m_modificationTime;
    private string m_modificationNote;
    private string m_modificationNoteRef;
    private int m_objectCount;
    private string m_pageContinuation;
    private int m_pageCount;
    private PageNumber m_pageNumber;
    private string m_setvariable;
    private int m_paragraphCount;
    private string m_placeHolder;
    private DateTime m_printDate;
    private string m_printedBy;
    private DateTime m_printTime;
    private string m_referenceMark;
    private string m_referenceMarkStart;
    private string m_referenceMarkEnd;
    private string m_referenceRef;
    private string m_ruby;
    private string m_script;
    private string m_senderCity;
    private string m_senderCompany;
    private string m_senderCountry;
    private string m_senderEmail;
    private string m_senderFax;
    private string m_senderFirstName;
    private string m_senderinitials;
    private string m_senderLastName;
    private string m_senderPhonePrivate;
    private string m_senderPhoneWork;
    private string m_senderPosition;
    private string m_senderPostalCode;
    private string m_stateOrProvince;
    private string m_senderStreet;
    private string m_senderTitle;
    private string m_sequence;
    private string m_sequenceRef;
    private string m_sheetName;
    private string m_softPageBreak;
    private bool m_span;
    private string m_subject;
    private string m_tab;
    private int m_tableCount;
    private string m_tableFormula;
    private string m_templateName;
    private string m_textInput;
    private DateTime m_time;
    private string m_title;
    private string m_tocMark;
    private string m_tocMarkStart;
    private string m_tocMarkEnd;
    private string m_userDefined;
    private string m_userFieldGet;
    private string m_userFieldInput;
    private string m_userIndexMark;
    private string m_getVariable;
    private string m_setVariable;
    private string m_getVariableInput;
    private int m_wordCount;
    private Heading m_header;
    private List`1<OParagraphItem> m_OParagraphItemCollection;
    internal Heading Header { get; internal set; }
    internal List`1<OParagraphItem> OParagraphItemCollection { get; internal set; }
    internal string ListStyleName { get; internal set; }
    internal int ListLevelNumber { get; internal set; }
    internal int WordCount { get; internal set; }
    internal string GetVariableInput { get; internal set; }
    internal string SetVariable { get; internal set; }
    internal string GetVariable1 { get; internal set; }
    internal string UserIndexMark { get; internal set; }
    internal string UserFieldInput { get; internal set; }
    internal string UserFieldGet { get; internal set; }
    internal string UserDefined { get; internal set; }
    internal string TocMarkEnd { get; internal set; }
    internal string TocMarkStart { get; internal set; }
    internal string TocMark { get; internal set; }
    internal string Title { get; internal set; }
    internal DateTime Time { get; internal set; }
    internal string TextInput { get; internal set; }
    internal string TemplateName { get; internal set; }
    internal string TableFormula { get; internal set; }
    internal int TableCount { get; internal set; }
    internal string Tab { get; internal set; }
    internal string Subject { get; internal set; }
    internal bool Span { get; internal set; }
    internal string SheetName { get; internal set; }
    internal string SoftPageBreak { get; internal set; }
    internal string SequenceRef { get; internal set; }
    internal string Sequence { get; internal set; }
    internal string SenderTitle { get; internal set; }
    internal string SenderStreet { get; internal set; }
    internal string StateOrProvince { get; internal set; }
    internal string SenderPosition { get; internal set; }
    internal string SenderPostalCode { get; internal set; }
    internal string SenderPhoneWork { get; internal set; }
    internal string SenderPhonePrivate { get; internal set; }
    internal string SenderLastName { get; internal set; }
    internal string Senderinitials { get; internal set; }
    internal string SenderFirstName { get; internal set; }
    internal string SenderFax { get; internal set; }
    internal string SenderEmail { get; internal set; }
    internal string SenderCountry { get; internal set; }
    internal string SenderCompany { get; internal set; }
    internal string SenderCity { get; internal set; }
    internal string Script { get; internal set; }
    internal string Ruby { get; internal set; }
    internal string ReferenceRef { get; internal set; }
    internal string ReferenceMarkEnd { get; internal set; }
    internal string ReferenceMarkStart { get; internal set; }
    internal string ReferenceMark { get; internal set; }
    internal DateTime PrintTime { get; internal set; }
    internal string PrintedBy { get; internal set; }
    internal DateTime PrintDate { get; internal set; }
    internal string PlaceHolder { get; internal set; }
    internal int ParagraphCount { get; internal set; }
    internal string Setvariable { get; internal set; }
    internal string GetVariable { get; internal set; }
    internal PageNumber PageNumber { get; internal set; }
    internal int PageCount { get; internal set; }
    internal string PageContinuation { get; internal set; }
    internal int ObjectCount { get; internal set; }
    internal string ModificationNoteRef { get; internal set; }
    internal string ModificationNote { get; internal set; }
    internal DateTime ModificationTime { get; internal set; }
    internal DateTime ModificationDate { get; internal set; }
    internal bool LineBreak { get; internal set; }
    internal string Keywords { get; internal set; }
    internal string InitialCreator { get; internal set; }
    internal int ImageCount { get; internal set; }
    internal string HiddenText { get; internal set; }
    internal string HiddenParagraph { get; internal set; }
    internal string FileName { get; internal set; }
    internal string Expression { get; internal set; }
    internal string ExecuteMacro { get; internal set; }
    internal string EditingDuration { get; internal set; }
    internal string EditingCycles { get; internal set; }
    internal string Description { get; internal set; }
    internal string DdeConnection { get; internal set; }
    internal DateTime Date { get; internal set; }
    internal string DatabaseRowSelect { get; internal set; }
    internal string DatabaseRowNumber { get; internal set; }
    internal string DatabaseNext { get; internal set; }
    internal string DatabaseDisplay { get; internal set; }
    internal string Creator { get; internal set; }
    internal DateTime CreationTime { get; internal set; }
    internal DateTime CreationDate { get; internal set; }
    internal string ConditionalText { get; internal set; }
    internal string ChapterCount { get; internal set; }
    internal string Chapter { get; internal set; }
    internal string ChangeEnd { get; internal set; }
    internal string ChangeStart { get; internal set; }
    internal string Change { get; internal set; }
    internal string BookMarkRef { get; internal set; }
    internal string BookMarkEnd { get; internal set; }
    internal string BookMarkStart { get; internal set; }
    internal string BookMark { get; internal set; }
    internal string BibliographyMark { get; internal set; }
    internal string AuthorName { get; internal set; }
    internal string AuthorInitals { get; internal set; }
    internal string AlphabeticalIndexMarkEnd { get; internal set; }
    internal string AlphabeticalIndexMarkStart { get; internal set; }
    internal string AlphabeticalIndexMark { get; internal set; }
    internal string StyleName { get; internal set; }
    internal Heading get_Header();
    internal void set_Header(Heading value);
    internal List`1<OParagraphItem> get_OParagraphItemCollection();
    internal void set_OParagraphItemCollection(List`1<OParagraphItem> value);
    internal string get_ListStyleName();
    internal void set_ListStyleName(string value);
    internal int get_ListLevelNumber();
    internal void set_ListLevelNumber(int value);
    internal int get_WordCount();
    internal void set_WordCount(int value);
    internal string get_GetVariableInput();
    internal void set_GetVariableInput(string value);
    internal string get_SetVariable();
    internal void set_SetVariable(string value);
    internal string get_GetVariable1();
    internal void set_GetVariable1(string value);
    internal string get_UserIndexMark();
    internal void set_UserIndexMark(string value);
    internal string get_UserFieldInput();
    internal void set_UserFieldInput(string value);
    internal string get_UserFieldGet();
    internal void set_UserFieldGet(string value);
    internal string get_UserDefined();
    internal void set_UserDefined(string value);
    internal string get_TocMarkEnd();
    internal void set_TocMarkEnd(string value);
    internal string get_TocMarkStart();
    internal void set_TocMarkStart(string value);
    internal string get_TocMark();
    internal void set_TocMark(string value);
    internal string get_Title();
    internal void set_Title(string value);
    internal DateTime get_Time();
    internal void set_Time(DateTime value);
    internal string get_TextInput();
    internal void set_TextInput(string value);
    internal string get_TemplateName();
    internal void set_TemplateName(string value);
    internal string get_TableFormula();
    internal void set_TableFormula(string value);
    internal int get_TableCount();
    internal void set_TableCount(int value);
    internal string get_Tab();
    internal void set_Tab(string value);
    internal string get_Subject();
    internal void set_Subject(string value);
    internal bool get_Span();
    internal void set_Span(bool value);
    internal string get_SheetName();
    internal void set_SheetName(string value);
    internal string get_SoftPageBreak();
    internal void set_SoftPageBreak(string value);
    internal string get_SequenceRef();
    internal void set_SequenceRef(string value);
    internal string get_Sequence();
    internal void set_Sequence(string value);
    internal string get_SenderTitle();
    internal void set_SenderTitle(string value);
    internal string get_SenderStreet();
    internal void set_SenderStreet(string value);
    internal string get_StateOrProvince();
    internal void set_StateOrProvince(string value);
    internal string get_SenderPosition();
    internal void set_SenderPosition(string value);
    internal string get_SenderPostalCode();
    internal void set_SenderPostalCode(string value);
    internal string get_SenderPhoneWork();
    internal void set_SenderPhoneWork(string value);
    internal string get_SenderPhonePrivate();
    internal void set_SenderPhonePrivate(string value);
    internal string get_SenderLastName();
    internal void set_SenderLastName(string value);
    internal string get_Senderinitials();
    internal void set_Senderinitials(string value);
    internal string get_SenderFirstName();
    internal void set_SenderFirstName(string value);
    internal string get_SenderFax();
    internal void set_SenderFax(string value);
    internal string get_SenderEmail();
    internal void set_SenderEmail(string value);
    internal string get_SenderCountry();
    internal void set_SenderCountry(string value);
    internal string get_SenderCompany();
    internal void set_SenderCompany(string value);
    internal string get_SenderCity();
    internal void set_SenderCity(string value);
    internal string get_Script();
    internal void set_Script(string value);
    internal string get_Ruby();
    internal void set_Ruby(string value);
    internal string get_ReferenceRef();
    internal void set_ReferenceRef(string value);
    internal string get_ReferenceMarkEnd();
    internal void set_ReferenceMarkEnd(string value);
    internal string get_ReferenceMarkStart();
    internal void set_ReferenceMarkStart(string value);
    internal string get_ReferenceMark();
    internal void set_ReferenceMark(string value);
    internal DateTime get_PrintTime();
    internal void set_PrintTime(DateTime value);
    internal string get_PrintedBy();
    internal void set_PrintedBy(string value);
    internal DateTime get_PrintDate();
    internal void set_PrintDate(DateTime value);
    internal string get_PlaceHolder();
    internal void set_PlaceHolder(string value);
    internal int get_ParagraphCount();
    internal void set_ParagraphCount(int value);
    internal string get_Setvariable();
    internal void set_Setvariable(string value);
    internal string get_GetVariable();
    internal void set_GetVariable(string value);
    internal PageNumber get_PageNumber();
    internal void set_PageNumber(PageNumber value);
    internal int get_PageCount();
    internal void set_PageCount(int value);
    internal string get_PageContinuation();
    internal void set_PageContinuation(string value);
    internal int get_ObjectCount();
    internal void set_ObjectCount(int value);
    internal string get_ModificationNoteRef();
    internal void set_ModificationNoteRef(string value);
    internal string get_ModificationNote();
    internal void set_ModificationNote(string value);
    internal DateTime get_ModificationTime();
    internal void set_ModificationTime(DateTime value);
    internal DateTime get_ModificationDate();
    internal void set_ModificationDate(DateTime value);
    internal bool get_LineBreak();
    internal void set_LineBreak(bool value);
    internal string get_Keywords();
    internal void set_Keywords(string value);
    internal string get_InitialCreator();
    internal void set_InitialCreator(string value);
    internal int get_ImageCount();
    internal void set_ImageCount(int value);
    internal string get_HiddenText();
    internal void set_HiddenText(string value);
    internal string get_HiddenParagraph();
    internal void set_HiddenParagraph(string value);
    internal string get_FileName();
    internal void set_FileName(string value);
    internal string get_Expression();
    internal void set_Expression(string value);
    internal string get_ExecuteMacro();
    internal void set_ExecuteMacro(string value);
    internal string get_EditingDuration();
    internal void set_EditingDuration(string value);
    internal string get_EditingCycles();
    internal void set_EditingCycles(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal string get_DdeConnection();
    internal void set_DdeConnection(string value);
    internal DateTime get_Date();
    internal void set_Date(DateTime value);
    internal string get_DatabaseRowSelect();
    internal void set_DatabaseRowSelect(string value);
    internal string get_DatabaseRowNumber();
    internal void set_DatabaseRowNumber(string value);
    internal string get_DatabaseNext();
    internal void set_DatabaseNext(string value);
    internal string get_DatabaseDisplay();
    internal void set_DatabaseDisplay(string value);
    internal string get_Creator();
    internal void set_Creator(string value);
    internal DateTime get_CreationTime();
    internal void set_CreationTime(DateTime value);
    internal DateTime get_CreationDate();
    internal void set_CreationDate(DateTime value);
    internal string get_ConditionalText();
    internal void set_ConditionalText(string value);
    internal string get_ChapterCount();
    internal void set_ChapterCount(string value);
    internal string get_Chapter();
    internal void set_Chapter(string value);
    internal string get_ChangeEnd();
    internal void set_ChangeEnd(string value);
    internal string get_ChangeStart();
    internal void set_ChangeStart(string value);
    internal string get_Change();
    internal void set_Change(string value);
    internal string get_BookMarkRef();
    internal void set_BookMarkRef(string value);
    internal string get_BookMarkEnd();
    internal void set_BookMarkEnd(string value);
    internal string get_BookMarkStart();
    internal void set_BookMarkStart(string value);
    internal string get_BookMark();
    internal void set_BookMark(string value);
    internal string get_BibliographyMark();
    internal void set_BibliographyMark(string value);
    internal string get_AuthorName();
    internal void set_AuthorName(string value);
    internal string get_AuthorInitals();
    internal void set_AuthorInitals(string value);
    internal string get_AlphabeticalIndexMarkEnd();
    internal void set_AlphabeticalIndexMarkEnd(string value);
    internal string get_AlphabeticalIndexMarkStart();
    internal void set_AlphabeticalIndexMarkStart(string value);
    internal string get_AlphabeticalIndexMark();
    internal void set_AlphabeticalIndexMark(string value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OParagraphCollection : object {
    private List`1<OParagraph> m_Paragraph;
    internal List`1<OParagraph> Paragraph { get; internal set; }
    internal List`1<OParagraph> get_Paragraph();
    internal void set_Paragraph(List`1<OParagraph> value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OParagraphItem : object {
    private TextProperties m_TextProperties;
    private ODFParagraphProperties m_ParagraphProperties;
    private string m_text;
    private bool m_span;
    private bool m_space;
    private string m_styleName;
    internal string StyleName { get; internal set; }
    internal bool Space { get; internal set; }
    internal bool Span { get; internal set; }
    internal string Text { get; internal set; }
    internal ODFParagraphProperties ParagraphProperties { get; internal set; }
    internal TextProperties TextProperties { get; internal set; }
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal bool get_Space();
    internal void set_Space(bool value);
    internal bool get_Span();
    internal void set_Span(bool value);
    internal string get_Text();
    internal void set_Text(string value);
    internal ODFParagraphProperties get_ParagraphProperties();
    internal void set_ParagraphProperties(ODFParagraphProperties value);
    internal TextProperties get_TextProperties();
    internal void set_TextProperties(TextProperties value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OPicture : OParagraphItem {
    private float m_widthScale;
    private float m_heightScale;
    private float m_height;
    private float m_width;
    private string m_name;
    private float m_horizontalPosition;
    private float m_verticalPosition;
    private int m_orderIndex;
    private int m_spid;
    private string m_oPictureHRef;
    private TextWrappingStyle m_wrappingStyle;
    internal float Height { get; internal set; }
    internal float Width { get; internal set; }
    internal float HeightScale { get; internal set; }
    internal float WidthScale { get; internal set; }
    public string Name { get; public set; }
    internal float HorizontalPosition { get; internal set; }
    internal float VerticalPosition { get; internal set; }
    internal int OrderIndex { get; internal set; }
    internal int ShapeId { get; internal set; }
    internal string OPictureHRef { get; internal set; }
    internal TextWrappingStyle TextWrappingStyle { get; internal set; }
    internal float get_Height();
    internal void set_Height(float value);
    internal float get_Width();
    internal void set_Width(float value);
    internal float get_HeightScale();
    internal void set_HeightScale(float value);
    internal float get_WidthScale();
    internal void set_WidthScale(float value);
    public string get_Name();
    public void set_Name(string value);
    internal float get_HorizontalPosition();
    internal void set_HorizontalPosition(float value);
    internal float get_VerticalPosition();
    internal void set_VerticalPosition(float value);
    internal int get_OrderIndex();
    internal void set_OrderIndex(int value);
    internal int get_ShapeId();
    internal void set_ShapeId(int value);
    internal string get_OPictureHRef();
    internal void set_OPictureHRef(string value);
    internal TextWrappingStyle get_TextWrappingStyle();
    internal void set_TextWrappingStyle(TextWrappingStyle value);
    internal void SetWidthScaleValue(float value);
    internal void SetHeightScaleValue(float value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTable : OTextBodyItem {
    private string m_name;
    private string m_styleName;
    private bool m_softPageBreak;
    private List`1<OTableColumn> m_columns;
    private List`1<OTableRow> m_rows;
    internal static int MaxColumnCount;
    internal static int MaxRowCount;
    internal string Name { get; internal set; }
    internal string StyleName { get; internal set; }
    internal bool SoftPageBreak { get; internal set; }
    internal List`1<OTableColumn> Columns { get; internal set; }
    internal List`1<OTableRow> Rows { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal bool get_SoftPageBreak();
    internal void set_SoftPageBreak(bool value);
    internal List`1<OTableColumn> get_Columns();
    internal void set_Columns(List`1<OTableColumn> value);
    internal List`1<OTableRow> get_Rows();
    internal void set_Rows(List`1<OTableRow> value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTableCell : object {
    private object m_value;
    private string m_value2;
    private bool m_booleanValue;
    private string m_currency;
    private DateTime m_dateValue;
    private TimeSpan m_timeValue;
    private string m_formula;
    private int m_columnsSpanned;
    private int m_rowsSpanned;
    private int m_matrixColunsSpanned;
    private int m_matrixRowsSpanned;
    private CellValueType m_type;
    private string m_styleName;
    private int m_columnsRepeated;
    private string m_tableFormula;
    private OParagraph m_paragraph;
    private bool m_isBlank;
    private List`1<OTextBodyItem> m_textBodyIetm;
    private float m_cellWidth;
    internal float CellWidth { get; internal set; }
    internal List`1<OTextBodyItem> TextBodyIetm { get; internal set; }
    internal object Value { get; internal set; }
    internal string Value2 { get; internal set; }
    internal CellValueType Type { get; internal set; }
    internal string StyleName { get; internal set; }
    internal int ColumnsRepeated { get; internal set; }
    internal string TableFormula { get; internal set; }
    internal OParagraph Paragraph { get; internal set; }
    internal bool BooleanValue { get; internal set; }
    internal string Currency { get; internal set; }
    internal DateTime DateValue { get; internal set; }
    internal TimeSpan TimeValue { get; internal set; }
    internal int ColumnsSpanned { get; internal set; }
    internal int RowsSpanned { get; internal set; }
    internal int MatrixColunsSpanned { get; internal set; }
    internal int MatrixRowsSpanned { get; internal set; }
    internal bool IsBlank { get; internal set; }
    internal float get_CellWidth();
    internal void set_CellWidth(float value);
    internal List`1<OTextBodyItem> get_TextBodyIetm();
    internal void set_TextBodyIetm(List`1<OTextBodyItem> value);
    internal object get_Value();
    internal void set_Value(object value);
    internal string get_Value2();
    internal void set_Value2(string value);
    internal CellValueType get_Type();
    internal void set_Type(CellValueType value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal int get_ColumnsRepeated();
    internal void set_ColumnsRepeated(int value);
    internal string get_TableFormula();
    internal void set_TableFormula(string value);
    internal OParagraph get_Paragraph();
    internal void set_Paragraph(OParagraph value);
    internal bool get_BooleanValue();
    internal void set_BooleanValue(bool value);
    internal string get_Currency();
    internal void set_Currency(string value);
    internal DateTime get_DateValue();
    internal void set_DateValue(DateTime value);
    internal TimeSpan get_TimeValue();
    internal void set_TimeValue(TimeSpan value);
    internal int get_ColumnsSpanned();
    internal void set_ColumnsSpanned(int value);
    internal int get_RowsSpanned();
    internal void set_RowsSpanned(int value);
    internal int get_MatrixColunsSpanned();
    internal void set_MatrixColunsSpanned(int value);
    internal int get_MatrixRowsSpanned();
    internal void set_MatrixRowsSpanned(int value);
    internal bool get_IsBlank();
    internal void set_IsBlank(bool value);
    public virtual bool Equals(object obj);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTableCellProperties : BorderProperties {
    private int m_rotationAngle;
    private bool m_wrap;
    private float m_borderLineWidth;
    private float m_borderLineWidthTop;
    private float m_borderLineWidthBottom;
    private float m_borderLineWidthLeft;
    private float m_borderLineWidthRight;
    private bool m_shrinkToFit;
    private Nullable`1<VerticalAlign> m_verticalAlign;
    private Color m_backColor;
    private float m_paddingTop;
    private float m_paddingBottom;
    private float m_paddingLeft;
    private float m_paddingRight;
    private bool m_repeatContent;
    private PageOrder m_direction;
    internal ushort tableCellFlags;
    internal static byte RotationAngleKey;
    internal static byte WrapKey;
    internal static byte BorderLineWidthKey;
    internal static byte BorderLineWidthTopKey;
    internal static byte BorderLineWidthBottomKey;
    internal static byte BorderLineWidthLeftKey;
    internal static byte BorderLineWidthRightKey;
    internal static byte ShrinkToFitKey;
    internal static byte BackColorKey;
    internal static byte VerticalAlignKey;
    internal static byte PaddingRightKey;
    internal static byte paddingLeftKey;
    internal static byte PaddingBottomKey;
    internal static byte PaddingTopKey;
    internal static byte RepeatContentKey;
    internal static byte DirectionKey;
    internal int RotationAngle { get; internal set; }
    internal bool Wrap { get; internal set; }
    internal float BorderLineWidth { get; internal set; }
    internal float BorderLineWidthTop { get; internal set; }
    internal float BorderLineWidthBottom { get; internal set; }
    internal float BorderLineWidthLeft { get; internal set; }
    internal float BorderLineWidthRight { get; internal set; }
    internal bool ShrinkToFit { get; internal set; }
    internal Color BackColor { get; internal set; }
    internal Nullable`1<VerticalAlign> VerticalAlign { get; internal set; }
    internal float PaddingRight { get; internal set; }
    internal float PaddingLeft { get; internal set; }
    internal float PaddingBottom { get; internal set; }
    internal float PaddingTop { get; internal set; }
    internal bool RepeatContent { get; internal set; }
    internal PageOrder Direction { get; internal set; }
    internal int get_RotationAngle();
    internal void set_RotationAngle(int value);
    internal bool get_Wrap();
    internal void set_Wrap(bool value);
    internal float get_BorderLineWidth();
    internal void set_BorderLineWidth(float value);
    internal float get_BorderLineWidthTop();
    internal void set_BorderLineWidthTop(float value);
    internal float get_BorderLineWidthBottom();
    internal void set_BorderLineWidthBottom(float value);
    internal float get_BorderLineWidthLeft();
    internal void set_BorderLineWidthLeft(float value);
    internal float get_BorderLineWidthRight();
    internal void set_BorderLineWidthRight(float value);
    internal bool get_ShrinkToFit();
    internal void set_ShrinkToFit(bool value);
    internal Color get_BackColor();
    internal void set_BackColor(Color value);
    internal Nullable`1<VerticalAlign> get_VerticalAlign();
    internal void set_VerticalAlign(Nullable`1<VerticalAlign> value);
    internal float get_PaddingRight();
    internal void set_PaddingRight(float value);
    internal float get_PaddingLeft();
    internal void set_PaddingLeft(float value);
    internal float get_PaddingBottom();
    internal void set_PaddingBottom(float value);
    internal float get_PaddingTop();
    internal void set_PaddingTop(float value);
    internal bool get_RepeatContent();
    internal void set_RepeatContent(bool value);
    internal PageOrder get_Direction();
    internal void set_Direction(PageOrder value);
    internal bool HasKey(int propertyKey, int flagname);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTableColumn : object {
    private string m_defaultCellStyleName;
    private int m_repeatedRowColumns;
    private string m_styleName;
    private bool m_visibility;
    private int m_outlineLevel;
    private bool m_isCollapsed;
    internal string DefaultCellStyleName { get; internal set; }
    internal int RepeatedRowColumns { get; internal set; }
    internal string StyleName { get; internal set; }
    internal bool Visibility { get; internal set; }
    internal int OutlineLevel { get; internal set; }
    internal bool IsCollapsed { get; internal set; }
    internal string get_DefaultCellStyleName();
    internal void set_DefaultCellStyleName(string value);
    internal int get_RepeatedRowColumns();
    internal void set_RepeatedRowColumns(int value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal bool get_Visibility();
    internal void set_Visibility(bool value);
    internal int get_OutlineLevel();
    internal void set_OutlineLevel(int value);
    internal bool get_IsCollapsed();
    internal void set_IsCollapsed(bool value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTableColumnProperties : object {
    private double m_columnWidth;
    private bool m_useOptimalColumnWidth;
    internal double ColumnWidth { get; internal set; }
    internal bool UseOptimalColumnWidth { get; internal set; }
    internal double get_ColumnWidth();
    internal void set_ColumnWidth(double value);
    internal bool get_UseOptimalColumnWidth();
    internal void set_UseOptimalColumnWidth(bool value);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTableProperties : CommonTableParaProperties {
    private bool m_hasColor;
    private bool m_mayBreakBetweenRows;
    private bool m_display;
    private float m_tableWidth;
    private HoriAlignment m_horizontalAlignment;
    internal float TableWidth { get; internal set; }
    internal bool HasColor { get; internal set; }
    internal bool Display { get; internal set; }
    internal HoriAlignment HoriAlignment { get; internal set; }
    internal float get_TableWidth();
    internal void set_TableWidth(float value);
    internal bool get_HasColor();
    internal void set_HasColor(bool value);
    internal bool get_Display();
    internal void set_Display(bool value);
    internal HoriAlignment get_HoriAlignment();
    internal void set_HoriAlignment(HoriAlignment value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTableRow : OTableColumn {
    private List`1<OTableCell> m_cells;
    internal List`1<OTableCell> Cells { get; internal set; }
    internal List`1<OTableCell> get_Cells();
    internal void set_Cells(List`1<OTableCell> value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTableRowProperties : object {
    private double m_rowHeight;
    private bool m_useOptimalRowHeight;
    private bool m_isBreakAcrossPages;
    private bool m_isHeaderRow;
    internal double RowHeight { get; internal set; }
    internal bool UseOptimalRowHeight { get; internal set; }
    internal bool IsBreakAcrossPages { get; internal set; }
    internal bool IsHeaderRow { get; internal set; }
    internal double get_RowHeight();
    internal void set_RowHeight(double value);
    internal bool get_UseOptimalRowHeight();
    internal void set_UseOptimalRowHeight(bool value);
    internal bool get_IsBreakAcrossPages();
    internal void set_IsBreakAcrossPages(bool value);
    internal bool get_IsHeaderRow();
    internal void set_IsHeaderRow(bool value);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTextBodyItem : object {
    private byte m_flag;
    private string m_sectionStyleName;
    internal bool IsFirstItemOfSection { get; internal set; }
    internal bool IsLastItemOfSection { get; internal set; }
    internal string SectionStyleName { get; internal set; }
    internal bool get_IsFirstItemOfSection();
    internal void set_IsFirstItemOfSection(bool value);
    internal bool get_IsLastItemOfSection();
    internal void set_IsLastItemOfSection(bool value);
    internal string get_SectionStyleName();
    internal void set_SectionStyleName(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.OTextRange : OParagraphItem {
    private string m_text;
    internal string Text { get; internal set; }
    internal string get_Text();
    internal void set_Text(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.PageLayout : DefaultPageLayout {
    private string m_name;
    private PageUsage m_pageUsage;
    private int m_columnsCount;
    private float m_columnsGap;
    public string Name { get; public set; }
    internal PageUsage PageUsage { get; internal set; }
    internal int ColumnsCount { get; internal set; }
    internal float ColumnsGap { get; internal set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal PageUsage get_PageUsage();
    internal void set_PageUsage(PageUsage value);
    internal int get_ColumnsCount();
    internal void set_ColumnsCount(int value);
    internal float get_ColumnsGap();
    internal void set_ColumnsGap(float value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.PageLayoutCollection : CollectionBase`1<PageLayout> {
    private Dictionary`2<string, PageLayout> m_dictStyles;
    internal Dictionary`2<string, PageLayout> DictStyles { get; internal set; }
    internal Dictionary`2<string, PageLayout> get_DictStyles();
    internal void set_DictStyles(Dictionary`2<string, PageLayout> value);
    internal string Add(PageLayout layout);
    internal void Remove(string key);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.PageLayoutProperties : MarginBorderProperties {
    private double m_pageWidth;
    private PrintOrientation m_pageOrientation;
    private double m_pageHeight;
    private PageOrder m_printPageOrder;
    private string m_scaleTo;
    private TableCentering m_tableCentering;
    private string m_printableObjects;
    private string m_firstPageNumber;
    private double m_paddingLeft;
    private double m_paddingRight;
    private double m_paddingTop;
    private double m_paddingBottom;
    internal double PaddingBottom { get; internal set; }
    internal double PaddingTop { get; internal set; }
    internal double PaddingRight { get; internal set; }
    internal double PaddingLeft { get; internal set; }
    internal double PageWidth { get; internal set; }
    internal double PageHeight { get; internal set; }
    internal PrintOrientation PageOrientation { get; internal set; }
    internal PageOrder PrintPageOrder { get; internal set; }
    internal string ScaleTo { get; internal set; }
    internal TableCentering TableCentering { get; internal set; }
    internal string PrintableObjects { get; internal set; }
    internal string FirstPageNumber { get; internal set; }
    internal double get_PaddingBottom();
    internal void set_PaddingBottom(double value);
    internal double get_PaddingTop();
    internal void set_PaddingTop(double value);
    internal double get_PaddingRight();
    internal void set_PaddingRight(double value);
    internal double get_PaddingLeft();
    internal void set_PaddingLeft(double value);
    internal double get_PageWidth();
    internal void set_PageWidth(double value);
    internal double get_PageHeight();
    internal void set_PageHeight(double value);
    internal PrintOrientation get_PageOrientation();
    internal void set_PageOrientation(PrintOrientation value);
    internal PageOrder get_PrintPageOrder();
    internal void set_PrintPageOrder(PageOrder value);
    internal string get_ScaleTo();
    internal void set_ScaleTo(string value);
    internal TableCentering get_TableCentering();
    internal void set_TableCentering(TableCentering value);
    internal string get_PrintableObjects();
    internal void set_PrintableObjects(string value);
    internal string get_FirstPageNumber();
    internal void set_FirstPageNumber(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.PageNumber : object {
    private PageNumberFormat m_pageNumber;
    private bool m_numberLetterSync;
    private bool m_pageFixed;
    private int m_pageAdjust;
    private SelectPage m_selectPage;
    private string m_content;
    internal SelectPage SelectPage { get; internal set; }
    internal int PageAdjust { get; internal set; }
    internal bool PageFixed { get; internal set; }
    internal bool NumberLetterSync { get; internal set; }
    internal PageNumberFormat PgNumber { get; internal set; }
    internal string Content { get; internal set; }
    internal SelectPage get_SelectPage();
    internal void set_SelectPage(SelectPage value);
    internal int get_PageAdjust();
    internal void set_PageAdjust(int value);
    internal bool get_PageFixed();
    internal void set_PageFixed(bool value);
    internal bool get_NumberLetterSync();
    internal void set_NumberLetterSync(bool value);
    internal PageNumberFormat get_PgNumber();
    internal void set_PgNumber(PageNumberFormat value);
    internal string get_Content();
    internal void set_Content(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.PercentageStyle : DataStyle {
    private NumberType m_number;
    internal NumberType Number { get; internal set; }
    internal NumberType get_Number();
    internal void set_Number(NumberType value);
    internal void Dispose();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.RightHeader : object {
    private OParagraph m_paragraph;
    internal OParagraph Paragraph { get; internal set; }
    internal OParagraph get_Paragraph();
    internal void set_Paragraph(OParagraph value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.ScientificNumberType : CommonType {
    private int m_minExponenDigits;
    internal int MinExponentDigits { get; internal set; }
    internal int get_MinExponentDigits();
    internal void set_MinExponentDigits(int value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.Seconds : TimeBase {
    private int m_decimalPlaces;
    internal int DecimalPlaces { get; internal set; }
    internal int get_DecimalPlaces();
    internal void set_DecimalPlaces(int value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.SectionProperties : object {
    private string m_backgroundColor;
    private int m_marginLeft;
    private int m_marginRight;
    private ODFColumns m_columns;
    internal ODFColumns Columns { get; internal set; }
    internal string BackgroundColor { get; internal set; }
    internal int MarginLeft { get; internal set; }
    internal int MarginRight { get; internal set; }
    internal ODFColumns get_Columns();
    internal void set_Columns(ODFColumns value);
    internal string get_BackgroundColor();
    internal void set_BackgroundColor(string value);
    internal int get_MarginLeft();
    internal void set_MarginLeft(int value);
    internal int get_MarginRight();
    internal void set_MarginRight(int value);
    internal void Close();
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.TextProperties : object {
    private string m_fontFamily;
    private string m_fontName;
    private double m_fontSize;
    private FontWeight m_fontWeight;
    private int m_textRotationAngle;
    private float m_textScale;
    private Color m_backgroundColor;
    private Color m_color;
    private string m_countryCode;
    private string m_textPosition;
    private ODFFontStyle m_fontStyle;
    private FontVariant m_fontVariant;
    private bool m_hyphenate;
    private int m_hyphenation_push_char_count;
    private int m_hyphenation_remain_char_count;
    private string m_language;
    private float m_letterSpacing;
    private bool m_shadow;
    private Transform m_textTransform;
    private string m_countryAsian;
    private string m_countryComplex;
    private string m_font_charset;
    private string m_font_charset_asian;
    private string m_font_charset_complex;
    private string m_fontFamilyAsian;
    private string m_fontFamliyComplex;
    private FontFamilyGeneric m_fontFamilyGeneric;
    private FontFamilyGeneric m_fontFamilyGenericComplex;
    private FontFamilyGeneric m_fontFamilyGenericAsian;
    private string m_fontNameAsian;
    private string m_fontNameComplex;
    private FontPitch m_fontPitch;
    private FontPitch m_fontPitchAsian;
    private FontPitch m_fontPitchComplex;
    private int m_fontSizeRel;
    private int m_fontSizeRelAsian;
    private int m_fontSizeRelComplex;
    private bool m_fontStyleAsian;
    private bool m_fontStyleComplex;
    private string m_fontStyleName;
    private string m_fontStyleNameComplex;
    private string m_fontStyleNameAsian;
    private FontWeight m_fontWeightComplex;
    private FontWeight m_fontWeightAsian;
    private string m_languageAsian;
    private string m_languageComplex;
    private bool m_letterKerning;
    private string m_rfcLanguageTag;
    private string m_rfcLanguageTagAsian;
    private string m_rfcLanguageTagComplex;
    private bool m_textBlinking;
    private Combine m_textCombine;
    private char m_textCombineEndChar;
    private char m_textCombineStartChar;
    private Emphasize m_textEmphasize;
    private string m_linethroughColor;
    private LineMode m_linethroughMode;
    private BorderLineStyle m_linethroughStyle;
    private string m_linethroughText;
    private LineType m_linethroughTextStyle;
    private LineType m_linethroughType;
    private LineWidth m_linethroughWidth;
    private bool m_textOutline;
    private string m_textOverlineColor;
    private LineMode m_textOverlineMode;
    private BorderLineStyle m_textOverlineStyle;
    private LineType m_textOverlineType;
    private LineWidth m_textOverlineWidth;
    private TextRotationScale m_textRotationScale;
    private int m_textScaling;
    private string m_textUnderlineColor;
    private LineMode m_textUnderlineMode;
    private BorderLineStyle m_textUnderlineStyle;
    private LineType m_textUnderlineType;
    private LineWidth m_textUnderlineWidth;
    private bool m_useWindowFontColor;
    private string m_textCondition;
    private TextDisplay m_textDisplay;
    private bool m_isTextDisplay;
    private FontRelief m_fontRelief;
    private string m_charStyleName;
    internal int m_textFlag1;
    internal int m_textFlag2;
    internal int m_textFlag3;
    private static int FontReliefKey;
    private static int TextDisplayKey;
    private static int TextConditionKey;
    private static int UseWindowFontColorKey;
    private static int TextUnderlineWidthKey;
    private static int TextUnderlineTypeKey;
    private static int TextUnderlineStyleKey;
    private static int TextUnderlineModeKey;
    private static int TextUnderlineColorKey;
    private static int TextScalingKey;
    private static int TextRotationScaleKey;
    private static int TextOverlineWidthKey;
    private static int TextOverlineTypeKey;
    private static int TextOverlineStyleKey;
    private static int TextOverlineModeKey;
    private static int TextOverlineColorKey;
    private static int FontNameKey;
    private static int FontSizeKey;
    private static int TextRotationAngleKey;
    private static int TextScaleKey;
    private static int BackgroundColorKey;
    private static int TextPositionKey;
    private static int FontWeightKey;
    private static int ColorKey;
    private static int CountryCodeKey;
    private static int FontFamilyKey;
    private static int FontStyleKey;
    private static int IsTextDisplayKey;
    private static int FontVariantKey;
    private static int HyphenateKey;
    private static int HyphenationPushCharCountKey;
    private static int HyphenationRemainCharCountKey;
    private static int LanguageKey;
    private static int LetterSpacingKey;
    private static int ShadowKey;
    private static int TextTransformKey;
    private static int CountryAsianKey;
    private static int CountryComplexKey;
    private static int FontCharsetKey;
    private static int FontCharsetAsianKey;
    private static int FontCharsetComplexKey;
    private static int FontFamliyComplexKey;
    private static int FontFamilyAsianKey;
    private static int FontFamilyGenericKey;
    private static int FontFamilyGenericAsianKey;
    private static int FontFamilyGenericComplexKey;
    private static int FontNameComplexKey;
    private static int FontNameAsianKey;
    private static int FontPitchKey;
    private static int FontPitchComplexKey;
    private static int FontPitchAsianKey;
    private static int FontSizeRelComplexKey;
    private static int FontSizeRelAsianKey;
    private static int FontSizeRelKey;
    private static int FontStyleComplexKey;
    private static int FontStyleAsianKey;
    private static int FontStyleNameKey;
    private static int FontStyleNameAsianKey;
    private static int FontStyleNameComplexKey;
    private static int FontWeightAsianKey;
    private static int FontWeightComplexKey;
    private static int RfcLanguageTagComplexKey;
    private static int RfcLanguageTagAsianKey;
    private static int RfcLanguageTagKey;
    private static int LetterKerningKey;
    private static int LanguageComplexKey;
    private static int LanguageAsianKey;
    private static int TextCombineStartCharKey;
    private static int TextCombineEndCharKey;
    private static int TextCombineKey;
    private static int TextBlinkingKey;
    private static int TextOutlineKey;
    private static int LinethroughWidthKey;
    private static int LinethroughTypeKey;
    private static int LinethroughTextStyleKey;
    private static int LinethroughTextKey;
    private static byte LinethroughStyleKey;
    private static int LinethroughModeKey;
    private static int LinethroughColorKey;
    private static int TextEmphasizeKey;
    internal string CharStyleName { get; internal set; }
    internal FontRelief FontRelief { get; internal set; }
    public TextDisplay TextDisplay { get; public set; }
    internal string TextCondition { get; internal set; }
    internal bool UseWindowFontColor { get; internal set; }
    internal LineWidth TextUnderlineWidth { get; internal set; }
    internal LineType TextUnderlineType { get; internal set; }
    internal BorderLineStyle TextUnderlineStyle { get; internal set; }
    internal LineMode TextUnderlineMode { get; internal set; }
    internal string TextUnderlineColor { get; internal set; }
    internal int TextScaling { get; internal set; }
    internal TextRotationScale TextRotationScale { get; internal set; }
    internal LineWidth TextOverlineWidth { get; internal set; }
    internal LineType TextOverlineType { get; internal set; }
    internal BorderLineStyle TextOverlineStyle { get; internal set; }
    internal LineMode TextOverlineMode { get; internal set; }
    public string TextOverlineColor { get; public set; }
    internal string FontName { get; internal set; }
    internal double FontSize { get; internal set; }
    internal int TextRotationAngle { get; internal set; }
    internal float TextScale { get; internal set; }
    internal Color BackgroundColor { get; internal set; }
    internal string TextPosition { get; internal set; }
    internal FontWeight FontWeight { get; internal set; }
    internal Color Color { get; internal set; }
    internal string CountryCode { get; internal set; }
    internal string FontFamily { get; internal set; }
    internal ODFFontStyle FontStyle { get; internal set; }
    internal bool IsTextDisplay { get; internal set; }
    internal FontVariant FontVariant { get; internal set; }
    internal bool Hyphenate { get; internal set; }
    internal int HyphenationPushCharCount { get; internal set; }
    internal int HyphenationRemainCharCount { get; internal set; }
    internal string Language { get; internal set; }
    internal float LetterSpacing { get; internal set; }
    internal bool Shadow { get; internal set; }
    internal Transform TextTransform { get; internal set; }
    internal string CountryAsian { get; internal set; }
    internal string CountryComplex { get; internal set; }
    internal string FontCharset { get; internal set; }
    internal string FontCharsetAsian { get; internal set; }
    internal string FontCharsetComplex { get; internal set; }
    internal string FontFamliyComplex { get; internal set; }
    internal string FontFamilyAsian { get; internal set; }
    internal FontFamilyGeneric FontFamilyGeneric { get; internal set; }
    internal FontFamilyGeneric FontFamilyGenericAsian { get; internal set; }
    internal FontFamilyGeneric FontFamilyGenericComplex { get; internal set; }
    internal string FontNameComplex { get; internal set; }
    internal string FontNameAsian { get; internal set; }
    internal FontPitch FontPitch { get; internal set; }
    internal FontPitch FontPitchComplex { get; internal set; }
    internal FontPitch FontPitchAsian { get; internal set; }
    internal int FontSizeRelComplex { get; internal set; }
    internal int FontSizeRelAsian { get; internal set; }
    internal int FontSizeRel { get; internal set; }
    internal bool FontStyleComplex { get; internal set; }
    internal bool FontStyleAsian { get; internal set; }
    internal string FontStyleName { get; internal set; }
    internal string FontStyleNameAsian { get; internal set; }
    internal string FontStyleNameComplex { get; internal set; }
    internal FontWeight FontWeightAsian { get; internal set; }
    internal FontWeight FontWeightComplex { get; internal set; }
    internal string RfcLanguageTagComplex { get; internal set; }
    internal string RfcLanguageTagAsian { get; internal set; }
    internal string RfcLanguageTag { get; internal set; }
    internal bool LetterKerning { get; internal set; }
    internal string LanguageComplex { get; internal set; }
    internal string LanguageAsian { get; internal set; }
    internal char TextCombineStartChar { get; internal set; }
    internal char TextCombineEndChar { get; internal set; }
    internal Combine TextCombine { get; internal set; }
    internal bool TextBlinking { get; internal set; }
    internal bool TextOutline { get; internal set; }
    internal LineWidth LinethroughWidth { get; internal set; }
    internal LineType LinethroughType { get; internal set; }
    internal LineType LinethroughTextStyle { get; internal set; }
    internal string LinethroughText { get; internal set; }
    internal BorderLineStyle LinethroughStyle { get; internal set; }
    internal LineMode LinethroughMode { get; internal set; }
    internal string LinethroughColor { get; internal set; }
    internal Emphasize TextEmphasize { get; internal set; }
    internal string get_CharStyleName();
    internal void set_CharStyleName(string value);
    internal FontRelief get_FontRelief();
    internal void set_FontRelief(FontRelief value);
    public TextDisplay get_TextDisplay();
    public void set_TextDisplay(TextDisplay value);
    internal string get_TextCondition();
    internal void set_TextCondition(string value);
    internal bool get_UseWindowFontColor();
    internal void set_UseWindowFontColor(bool value);
    internal LineWidth get_TextUnderlineWidth();
    internal void set_TextUnderlineWidth(LineWidth value);
    internal LineType get_TextUnderlineType();
    internal void set_TextUnderlineType(LineType value);
    internal BorderLineStyle get_TextUnderlineStyle();
    internal void set_TextUnderlineStyle(BorderLineStyle value);
    internal LineMode get_TextUnderlineMode();
    internal void set_TextUnderlineMode(LineMode value);
    internal string get_TextUnderlineColor();
    internal void set_TextUnderlineColor(string value);
    internal int get_TextScaling();
    internal void set_TextScaling(int value);
    internal TextRotationScale get_TextRotationScale();
    internal void set_TextRotationScale(TextRotationScale value);
    internal LineWidth get_TextOverlineWidth();
    internal void set_TextOverlineWidth(LineWidth value);
    internal LineType get_TextOverlineType();
    internal void set_TextOverlineType(LineType value);
    internal BorderLineStyle get_TextOverlineStyle();
    internal void set_TextOverlineStyle(BorderLineStyle value);
    internal LineMode get_TextOverlineMode();
    internal void set_TextOverlineMode(LineMode value);
    public string get_TextOverlineColor();
    public void set_TextOverlineColor(string value);
    internal string get_FontName();
    internal void set_FontName(string value);
    internal double get_FontSize();
    internal void set_FontSize(double value);
    internal int get_TextRotationAngle();
    internal void set_TextRotationAngle(int value);
    internal float get_TextScale();
    internal void set_TextScale(float value);
    internal Color get_BackgroundColor();
    internal void set_BackgroundColor(Color value);
    internal string get_TextPosition();
    internal void set_TextPosition(string value);
    internal FontWeight get_FontWeight();
    internal void set_FontWeight(FontWeight value);
    internal Color get_Color();
    internal void set_Color(Color value);
    internal string get_CountryCode();
    internal void set_CountryCode(string value);
    internal string get_FontFamily();
    internal void set_FontFamily(string value);
    internal ODFFontStyle get_FontStyle();
    internal void set_FontStyle(ODFFontStyle value);
    internal bool get_IsTextDisplay();
    internal void set_IsTextDisplay(bool value);
    internal FontVariant get_FontVariant();
    internal void set_FontVariant(FontVariant value);
    internal bool get_Hyphenate();
    internal void set_Hyphenate(bool value);
    internal int get_HyphenationPushCharCount();
    internal void set_HyphenationPushCharCount(int value);
    internal int get_HyphenationRemainCharCount();
    internal void set_HyphenationRemainCharCount(int value);
    internal string get_Language();
    internal void set_Language(string value);
    internal float get_LetterSpacing();
    internal void set_LetterSpacing(float value);
    internal bool get_Shadow();
    internal void set_Shadow(bool value);
    internal Transform get_TextTransform();
    internal void set_TextTransform(Transform value);
    internal string get_CountryAsian();
    internal void set_CountryAsian(string value);
    internal string get_CountryComplex();
    internal void set_CountryComplex(string value);
    internal string get_FontCharset();
    internal void set_FontCharset(string value);
    internal string get_FontCharsetAsian();
    internal void set_FontCharsetAsian(string value);
    internal string get_FontCharsetComplex();
    internal void set_FontCharsetComplex(string value);
    internal string get_FontFamliyComplex();
    internal void set_FontFamliyComplex(string value);
    internal string get_FontFamilyAsian();
    internal void set_FontFamilyAsian(string value);
    internal FontFamilyGeneric get_FontFamilyGeneric();
    internal void set_FontFamilyGeneric(FontFamilyGeneric value);
    internal FontFamilyGeneric get_FontFamilyGenericAsian();
    internal void set_FontFamilyGenericAsian(FontFamilyGeneric value);
    internal FontFamilyGeneric get_FontFamilyGenericComplex();
    internal void set_FontFamilyGenericComplex(FontFamilyGeneric value);
    internal string get_FontNameComplex();
    internal void set_FontNameComplex(string value);
    internal string get_FontNameAsian();
    internal void set_FontNameAsian(string value);
    internal FontPitch get_FontPitch();
    internal void set_FontPitch(FontPitch value);
    internal FontPitch get_FontPitchComplex();
    internal void set_FontPitchComplex(FontPitch value);
    internal FontPitch get_FontPitchAsian();
    internal void set_FontPitchAsian(FontPitch value);
    internal int get_FontSizeRelComplex();
    internal void set_FontSizeRelComplex(int value);
    internal int get_FontSizeRelAsian();
    internal void set_FontSizeRelAsian(int value);
    internal int get_FontSizeRel();
    internal void set_FontSizeRel(int value);
    internal bool get_FontStyleComplex();
    internal void set_FontStyleComplex(bool value);
    internal bool get_FontStyleAsian();
    internal void set_FontStyleAsian(bool value);
    internal string get_FontStyleName();
    internal void set_FontStyleName(string value);
    internal string get_FontStyleNameAsian();
    internal void set_FontStyleNameAsian(string value);
    internal string get_FontStyleNameComplex();
    internal void set_FontStyleNameComplex(string value);
    internal FontWeight get_FontWeightAsian();
    internal void set_FontWeightAsian(FontWeight value);
    internal FontWeight get_FontWeightComplex();
    internal void set_FontWeightComplex(FontWeight value);
    internal string get_RfcLanguageTagComplex();
    internal void set_RfcLanguageTagComplex(string value);
    internal string get_RfcLanguageTagAsian();
    internal void set_RfcLanguageTagAsian(string value);
    internal string get_RfcLanguageTag();
    internal void set_RfcLanguageTag(string value);
    internal bool get_LetterKerning();
    internal void set_LetterKerning(bool value);
    internal string get_LanguageComplex();
    internal void set_LanguageComplex(string value);
    internal string get_LanguageAsian();
    internal void set_LanguageAsian(string value);
    internal char get_TextCombineStartChar();
    internal void set_TextCombineStartChar(char value);
    internal char get_TextCombineEndChar();
    internal void set_TextCombineEndChar(char value);
    internal Combine get_TextCombine();
    internal void set_TextCombine(Combine value);
    internal bool get_TextBlinking();
    internal void set_TextBlinking(bool value);
    internal bool get_TextOutline();
    internal void set_TextOutline(bool value);
    internal LineWidth get_LinethroughWidth();
    internal void set_LinethroughWidth(LineWidth value);
    internal LineType get_LinethroughType();
    internal void set_LinethroughType(LineType value);
    internal LineType get_LinethroughTextStyle();
    internal void set_LinethroughTextStyle(LineType value);
    internal string get_LinethroughText();
    internal void set_LinethroughText(string value);
    internal BorderLineStyle get_LinethroughStyle();
    internal void set_LinethroughStyle(BorderLineStyle value);
    internal LineMode get_LinethroughMode();
    internal void set_LinethroughMode(LineMode value);
    internal string get_LinethroughColor();
    internal void set_LinethroughColor(string value);
    internal Emphasize get_TextEmphasize();
    internal void set_TextEmphasize(Emphasize value);
    internal bool HasKey(int propertyKey, int flagname);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.TextStyle : DataStyle {
    private bool m_textContent;
    internal bool TextContent { get; internal set; }
    internal bool get_TextContent();
    internal void set_TextContent(bool value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.TimeBase : object {
    private string m_style;
    internal string Style { get; internal set; }
    internal string get_Style();
    internal void set_Style(string value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.TimeStyle : DataStyle {
    private string m_ampm;
    private TimeBase m_hours;
    private TimeBase m_minutes;
    private Seconds m_seconds;
    internal string AMPM { get; internal set; }
    internal TimeBase Hours { get; internal set; }
    internal TimeBase Minutes { get; internal set; }
    internal Seconds Seconds { get; internal set; }
    internal string get_AMPM();
    internal void set_AMPM(string value);
    internal TimeBase get_Hours();
    internal void set_Hours(TimeBase value);
    internal TimeBase get_Minutes();
    internal void set_Minutes(TimeBase value);
    internal Seconds get_Seconds();
    internal void set_Seconds(Seconds value);
}
internal class Syncfusion.DocIO.ODF.Base.ODFImplementation.Xlink : object {
    public string actuate;
    public string href;
    public string type;
}
internal class Syncfusion.DocIO.ODF.Base.ODFSerialization.ODFConstants : object {
    internal static int FirstVisibleChar;
    internal static Char[] allowedChars;
    internal static string OfficeNamespace;
    internal static string MetaNamespace;
    internal static string ConfigNamespace;
    internal static string TextNamespace;
    internal static string TableNamespace;
    internal static string DrawNamespace;
    internal static string PresentationNamespace;
    internal static string Drawing3DNamespace;
    internal static string ChartNamespace;
    internal static string FormNamespace;
    internal static string DBNamespace;
    internal static string ScriptNamespace;
    internal static string OFNamespace;
    internal static string StyleNamespace;
    internal static string NumberNamespace;
    internal static string AnimationNamespace;
    internal static string ManifestNamespace;
    internal static string FONamespace;
    internal static string SVGNamespace;
    internal static string SMILNamespace;
    internal static string XlinkNamespace;
    internal static string DCNamespace;
    internal static string MathNamespace;
    internal static string XHTMLNamespace;
    internal static string ExcelMimetypeValue;
    internal static string DocMimetypeValue;
    internal static string ManifestPartName;
    internal static string ContentPartName;
    internal static string MetaPartName;
    internal static string MimetypePartName;
    internal static string StylesPartName;
    internal static string SettingsPartName;
    internal static string DocContent;
    internal static string DocStyles;
    internal static string DocMeta;
    internal static string DocSettings;
    internal static string ManifestLocalName;
    internal static string EntryTagName;
    internal static string PathTagName;
    internal static string MediaTagName;
    internal static string MediaPath;
    internal static string XmlNamespacePrefix;
    internal static string TableLocalName;
    internal static string OfficeLocalName;
    internal static string CommonStylesLocalName;
    internal static string AutoStylesLocalName;
    internal static string MasterStylesLocalName;
    internal static string StyleLocalName;
    internal static string DrawLocalName;
    internal static string FOLocalName;
    internal static string XlinkLocalName;
    internal static string DCLocalName;
    internal static string NumberLocalName;
    internal static string SVGLocalName;
    internal static string OFLocalName;
    internal static string AnimationLocalName;
    internal static string ChartLocalName;
    internal static string Drawing3DLocalName;
    internal static string MetaLocalName;
    internal static string PresentationLocalName;
    internal static string TextLocalName;
    internal static string ConfigLocalName;
    internal static string DBLocalName;
    internal static string FormLocalName;
    internal static string ScriptLocalName;
    internal static string XHTMLLocalName;
    internal static string SMILLocalName;
    internal static string BodyLocalName;
    internal static string PageLayoutNameTag;
    internal static string BookmarkStartTag;
    internal static string BookmarkEndTag;
    internal static string FontFaceDeclsTag;
    internal static string FontFaceTag;
    internal static string NameTag;
    internal static string FontFamilyTag;
    internal static string FamilyGenericTag;
    internal static string FontPitchTag;
    internal static string FamilyTag;
    internal static string VAlign;
    internal static string BackColor;
    internal static string BorderTop;
    internal static string BorderBottom;
    internal static string BorderLeft;
    internal static string BorderRight;
    internal static string TxtPropertiesTag;
    internal static string FontNameTag;
    internal static string FontSizeTag;
    internal static string FontSizeAsianTag;
    internal static string FontSizeComplexTag;
    internal static string ColorTag;
    internal static string FontWeightTag;
    internal static string FontStyleTag;
    internal static string FontReliefTag;
    internal static string LetterKerningTag;
    internal static string LineThroughTypeTag;
    internal static string MasterPagTag;
    internal static string HeaderTag;
    internal static string HeaderLeftTag;
    internal static string FooterTag;
    internal static string FooterLeftTag;
    internal static string PageLayoutTag;
    internal static string PageLayoutPropertiesTag;
    internal static string PageWidthTag;
    internal static string PageHeightTag;
    internal static string PageOrientationTag;
    internal static string MarginTopTag;
    internal static string MarginLeftTag;
    internal static string MarginRightTag;
    internal static string MarginBottomTag;
    internal static string TableCenteringTag;
    internal static string PrintPageOrderTag;
    internal static string HeaderStyleTag;
    internal static string FooterStyleTag;
    internal static string HeaderFooterPropertiesTag;
    internal static string MinHeightTag;
    internal static string FirstPageNumberTag;
    internal static string ScaleToTag;
    internal static string TablePropTag;
    internal static string TableColumnProp;
    internal static string TableRowProp;
    internal static string DisplayTag;
    internal static string WritingModeTag;
    internal static string ColumnWidthTag;
    internal static string RowHeightTag;
    internal static string ParentStyleTag;
    internal static string DateStyle;
    internal static string SectionProps;
    internal static string DefCellStyle;
    internal static string HyperlinkPrefix;
    internal static string GraphicFillColor;
    internal static string GraphicStrokeColor;
    internal static string ParaTag;
    internal static string FrameTag;
    internal static string ImageTag;
    internal static string OrderIndex;
    internal static string WidthTag;
    internal static string HeightTag;
    internal static string RelativeHeightTag;
    internal static string RelativeWidthTag;
    internal static string HRefTag;
    private static ODFConstants();
}
internal class Syncfusion.DocIO.ODF.Base.ODFSerialization.ODFWriter : object {
    private ZipArchive m_archieve;
    private XmlWriter m_writer;
    private ODocument m_document;
    private ODFStyleCollection m_odfStyles;
    private Dictionary`2<string, string> m_dateFormat;
    internal Dictionary`2<string, string> DateFormat { get; }
    private XmlWriter CreateWriter(Stream data);
    internal void SaveDocument(Stream stream);
    internal void SerializeDocumentManifest();
    internal void SerializeMimeType();
    internal void SerializeContent(MemoryStream stream);
    internal void SerializeMetaData();
    internal void SerializeSettings();
    internal MemoryStream SerializeContentNameSpace();
    internal void SerializeContentEnd(MemoryStream stream);
    internal void SerializeBodyStart();
    internal void SerializeHeaderFooterContent(HeaderFooterContent headerFooter);
    internal void SerializeDocIOContent(ODocument document);
    private void SerializeList(OParagraph paragraph, Stack`1& listStack, String& m_previousParaListStyleName);
    private void SerializeListStartStyle(Stack`1& listStack, OParagraph paragraph);
    private void SerializeEndList(Stack`1& listStack);
    private void SerializeTableOfContentSource();
    private string GetNumberFormat(PageNumberFormat pageNumberFormat);
    internal void SerializePicture(OPicture picture);
    internal void SerializeMergeField(OMergeField mergeField);
    internal void SerializeDateTimeField(OField field);
    internal void SerializeHyperlink(OField field);
    internal Dictionary`2<string, string> get_DateFormat();
    private void DateStyle(string formattingString, string styleName, CultureInfo culture);
    internal void SerializeDefaultStyles(DefaultStyleCollection defaultStyle);
    private void SerializeCalculationSettings();
    private void SerializeDefaultParagraphProperties(ODFParagraphProperties paragraphProperties);
    private void SerializeDefaultTextProperties(TextProperties textProperties);
    internal void SerializeTables(List`1<OTable> tables);
    private void WriteCellType(OTableCell curCell);
    private void WriteRepeatedCells(OTableRow row, OTableCell cell, int colsRepeated);
    private void SerializeOParagraph(OParagraph paragraph, Stack`1& listStack, String& m_previousParaListStyleName);
    private void SerializeParagraph(OParagraph para);
    internal void SerializeExcelBody(List`1<OTable> tables);
    internal MemoryStream SerializeStyleStart();
    internal void SerializeStylesEnd(MemoryStream stream);
    public static string ToReadableString(TimeSpan span);
    internal void SerializeFontFaceDecls(List`1<FontFace> fonts);
    internal void SerializeFontface(FontFace font);
    internal void SerializeDataStyles(ODFStyleCollection styles);
    internal void SerializeDataStylesStart();
    internal void SerializeGeneralStyle(NumberStyle style);
    internal void SerializeNumberStyle(DataStyle nFormat);
    internal void SerializeNumberToken(CurrencyStyle style);
    internal void SerializeDateToken();
    internal void SerializeCommonStyles(ODFStyleCollection styles);
    internal void SerializeODFStyles(ODFStyleCollection ODFStyles);
    internal void SerializeTableDefaultStyle();
    internal void SerializeDefaultGraphicStyle();
    private void SerializeTableProperties(OTableProperties tableProp);
    private void SerializeColumnProprties(OTableColumnProperties tableColumnProp);
    private void SerializeRowProprties(OTableRowProperties tableRowProp);
    private void SerializeSectionProperties(SectionProperties sectionProps);
    private void SerializeParagraphProperties(ODFParagraphProperties paraProp);
    private void SerializeExcelTableCellProperties(OTableCellProperties cellProp);
    private void SerializeTableCellProperties(OTableCellProperties cellProp);
    internal void SerializeTextProperties(TextProperties txtProp);
    internal void SerializeAutomaticStyles(PageLayoutCollection layouts);
    internal void SerializeAutoStyleStart();
    internal void SerializeContentAutoStyles(ODFStyleCollection styles);
    internal void SerializeContentListStyles(List`1<OListStyle> listStyles);
    internal void SerializeMasterStyles(MasterPageCollection mPages, List`1<string> pageNames);
    private void SerializeHeaderFooter(HeaderFooterContent headerFooter, bool isHeader);
    internal void SerializeHeaderLeftStart();
    internal void SerializeFooterLeftStart();
    internal void SerializeHeaderStart();
    internal void SerializeFooterStart();
    internal void SerializeMasterStylesStart();
    internal void SerializeEnd();
    private void SerializePageLayouts(PageLayoutCollection layouts);
    private void SerializeHeaderFooterStyles(PageLayout layout);
    private void SerializeHeaderFooterProperties(HeaderFooterStyle HFStyle);
    private static string HexConverter(Color c);
    internal void Dispose();
}
internal enum Syncfusion.DocIO.ODF.Base.OFieldType : Enum {
    public int value__;
    public static OFieldType FieldNone;
    public static OFieldType FieldAddin;
    public static OFieldType FieldAdvance;
    public static OFieldType FieldAsk;
    public static OFieldType FieldAuthor;
    public static OFieldType FieldAutoNum;
    public static OFieldType FieldAutoNumLegal;
    public static OFieldType FieldAutoNumOutline;
    public static OFieldType FieldAutoText;
    public static OFieldType FieldAutoTextList;
    public static OFieldType FieldBarCode;
    public static OFieldType FieldComments;
    public static OFieldType FieldCompare;
    public static OFieldType FieldCreateDate;
    public static OFieldType FieldData;
    public static OFieldType FieldDatabase;
    public static OFieldType FieldDate;
    public static OFieldType FieldDDE;
    public static OFieldType FieldDDEAuto;
    public static OFieldType FieldDocProperty;
    public static OFieldType FieldDocVariable;
    public static OFieldType FieldEditTime;
    public static OFieldType FieldEmbed;
    public static OFieldType FieldEmpty;
    public static OFieldType FieldExpression;
    public static OFieldType FieldFileName;
    public static OFieldType FieldFileSize;
    public static OFieldType FieldFillIn;
    public static OFieldType FieldFootnoteRef;
    public static OFieldType FieldFormCheckBox;
    public static OFieldType FieldFormDropDown;
    public static OFieldType FieldFormTextInput;
    public static OFieldType FieldFormula;
    public static OFieldType FieldGlossary;
    public static OFieldType FieldGoToButton;
    public static OFieldType FieldHTMLActiveX;
    public static OFieldType FieldHyperlink;
    public static OFieldType FieldIf;
    public static OFieldType FieldImport;
    public static OFieldType FieldInclude;
    public static OFieldType FieldIncludePicture;
    public static OFieldType FieldIncludeText;
    public static OFieldType FieldIndex;
    public static OFieldType FieldIndexEntry;
    public static OFieldType FieldInfo;
    public static OFieldType FieldKeyWord;
    public static OFieldType FieldLastSavedBy;
    public static OFieldType FieldLink;
    public static OFieldType FieldListNum;
    public static OFieldType FieldMacroButton;
    public static OFieldType FieldMergeField;
    public static OFieldType FieldMergeRec;
    public static OFieldType FieldMergeSeq;
    public static OFieldType FieldNext;
    public static OFieldType FieldNextIf;
    public static OFieldType FieldNoteRef;
    public static OFieldType FieldNumChars;
    public static OFieldType FieldNumPages;
    public static OFieldType FieldNumWords;
    public static OFieldType FieldOCX;
    public static OFieldType FieldPage;
    public static OFieldType FieldPageRef;
    public static OFieldType FieldPrint;
    public static OFieldType FieldPrintDate;
    public static OFieldType FieldPrivate;
    public static OFieldType FieldQuote;
    public static OFieldType FieldRef;
    public static OFieldType FieldRefDoc;
    public static OFieldType FieldRevisionNum;
    public static OFieldType FieldSaveDate;
    public static OFieldType FieldSection;
    public static OFieldType FieldSectionPages;
    public static OFieldType FieldSequence;
    public static OFieldType FieldSet;
    public static OFieldType FieldSkipIf;
    public static OFieldType FieldStyleRef;
    public static OFieldType FieldSubject;
    public static OFieldType FieldSubscriber;
    public static OFieldType FieldSymbol;
    public static OFieldType FieldTemplate;
    public static OFieldType FieldTime;
    public static OFieldType FieldTitle;
    public static OFieldType FieldTOA;
    public static OFieldType FieldTOAEntry;
    public static OFieldType FieldTOC;
    public static OFieldType FieldTOCEntry;
    public static OFieldType FieldUserAddress;
    public static OFieldType FieldUserInitials;
    public static OFieldType FieldUserName;
    public static OFieldType FieldShape;
    public static OFieldType FieldBidiOutline;
    public static OFieldType FieldAddressBlock;
    public static OFieldType FieldUnknown;
}
internal enum Syncfusion.DocIO.ODF.Base.PageNumberFormat : Enum {
    public int value__;
    public static PageNumberFormat Numerical;
    public static PageNumberFormat LowerRoman;
    public static PageNumberFormat UpperRoman;
    public static PageNumberFormat LowerCase;
    public static PageNumberFormat UpperCase;
    public static PageNumberFormat UpperAlphabet;
    public static PageNumberFormat LowerAlphabet;
    public static PageNumberFormat Arabic;
    public static PageNumberFormat Ordinal;
    public static PageNumberFormat CardinalText;
    public static PageNumberFormat OrdinalText;
    public static PageNumberFormat Hexa;
    public static PageNumberFormat DollorText;
    public static PageNumberFormat ArabicDash;
}
internal enum Syncfusion.DocIO.ODF.Base.PageOrder : Enum {
    public int value__;
    public static PageOrder ttb;
    public static PageOrder ltr;
}
internal enum Syncfusion.DocIO.ODF.Base.PageUsage : Enum {
    public int value__;
    public static PageUsage all;
    public static PageUsage left;
    public static PageUsage mirrored;
    public static PageUsage right;
}
internal enum Syncfusion.DocIO.ODF.Base.PrintOrientation : Enum {
    public int value__;
    public static PrintOrientation portrait;
    public static PrintOrientation landscape;
}
internal enum Syncfusion.DocIO.ODF.Base.PunctuationWrap : Enum {
    public int value__;
    public static PunctuationWrap simple;
    public static PunctuationWrap hanging;
}
internal enum Syncfusion.DocIO.ODF.Base.RefPoint : Enum {
    public int value__;
    public static RefPoint TopLeft;
    public static RefPoint Top;
    public static RefPoint TopRight;
    public static RefPoint Left;
    public static RefPoint Center;
    public static RefPoint Right;
    public static RefPoint BottomLeft;
    public static RefPoint Bottom;
    public static RefPoint BottomRight;
}
internal enum Syncfusion.DocIO.ODF.Base.SelectPage : Enum {
    public int value__;
    public static SelectPage previous;
    public static SelectPage current;
    public static SelectPage next;
}
internal enum Syncfusion.DocIO.ODF.Base.Shadow : Enum {
    public int value__;
    public static Shadow Visible;
    public static Shadow Hidden;
}
internal enum Syncfusion.DocIO.ODF.Base.Stroke : Enum {
    public int value__;
    public static Stroke None;
    public static Stroke Dash;
    public static Stroke Solid;
}
internal enum Syncfusion.DocIO.ODF.Base.StrokeLineCap : Enum {
    public int value__;
    public static StrokeLineCap Butt;
    public static StrokeLineCap Square;
    public static StrokeLineCap Round;
}
internal enum Syncfusion.DocIO.ODF.Base.StrokeLineJoin : Enum {
    public int value__;
    public static StrokeLineJoin Miter;
    public static StrokeLineJoin Round;
    public static StrokeLineJoin Bevel;
    public static StrokeLineJoin Middle;
    public static StrokeLineJoin None;
    public static StrokeLineJoin Inherit;
}
internal enum Syncfusion.DocIO.ODF.Base.TableCentering : Enum {
    public int value__;
    public static TableCentering None;
    public static TableCentering Horizontal;
    public static TableCentering Vertical;
    public static TableCentering Both;
}
internal enum Syncfusion.DocIO.ODF.Base.TabStopLeader : Enum {
    public int value__;
    public static TabStopLeader NoLeader;
    public static TabStopLeader Dotted;
    public static TabStopLeader Hyphenated;
    public static TabStopLeader Single;
    public static TabStopLeader Heavy;
}
internal enum Syncfusion.DocIO.ODF.Base.TextAlign : Enum {
    public int value__;
    public static TextAlign start;
    public static TextAlign end;
    public static TextAlign left;
    public static TextAlign right;
    public static TextAlign center;
    public static TextAlign justify;
}
internal enum Syncfusion.DocIO.ODF.Base.TextAlignLast : Enum {
    public int value__;
    public static TextAlignLast start;
    public static TextAlignLast center;
    public static TextAlignLast justify;
}
internal enum Syncfusion.DocIO.ODF.Base.TextAreaHAlign : Enum {
    public int value__;
    public static TextAreaHAlign Left;
    public static TextAreaHAlign Center;
    public static TextAreaHAlign Right;
    public static TextAreaHAlign Justify;
}
internal enum Syncfusion.DocIO.ODF.Base.TextAreaVAlign : Enum {
    public int value__;
    public static TextAreaVAlign Top;
    public static TextAreaVAlign Middle;
    public static TextAreaVAlign Bottom;
    public static TextAreaVAlign Justify;
}
internal enum Syncfusion.DocIO.ODF.Base.TextAutoSpace : Enum {
    public int value__;
    public static TextAutoSpace none;
    public static TextAutoSpace ideographalpha;
}
internal enum Syncfusion.DocIO.ODF.Base.TextDisplay : Enum {
    public int value__;
    public static TextDisplay True;
    public static TextDisplay none;
    public static TextDisplay condition;
}
internal enum Syncfusion.DocIO.ODF.Base.TextPosition : Enum {
    public int value__;
    public static TextPosition Super;
    public static TextPosition Sub;
}
internal enum Syncfusion.DocIO.ODF.Base.TextRotationScale : Enum {
    public int value__;
    public static TextRotationScale Fixed;
    public static TextRotationScale lineheight;
}
internal enum Syncfusion.DocIO.ODF.Base.TextWrappingStyle : Enum {
    public int value__;
    public static TextWrappingStyle Inline;
    public static TextWrappingStyle TopAndBottom;
    public static TextWrappingStyle Square;
    public static TextWrappingStyle InFrontOfText;
    public static TextWrappingStyle Tight;
    public static TextWrappingStyle Through;
    public static TextWrappingStyle Behind;
}
internal enum Syncfusion.DocIO.ODF.Base.Transform : Enum {
    public int value__;
    public static Transform none;
    public static Transform lowercase;
    public static Transform uppercase;
    public static Transform capitalize;
}
internal enum Syncfusion.DocIO.ODF.Base.Unit : Enum {
    public int value__;
    public static Unit Automatic;
    public static Unit MilliMeter;
    public static Unit CentiMeter;
    public static Unit Meter;
    public static Unit KiloMeter;
    public static Unit Point;
    public static Unit Pica;
    public static Unit Inch;
    public static Unit Feet;
    public static Unit Mile;
}
internal enum Syncfusion.DocIO.ODF.Base.VerticalAlign : Enum {
    public int value__;
    public static VerticalAlign top;
    public static VerticalAlign middle;
    public static VerticalAlign bottom;
    public static VerticalAlign automatic;
    public static VerticalAlign baseline;
}
internal enum Syncfusion.DocIO.ODF.Base.WritingMode : Enum {
    public int value__;
    public static WritingMode LRTB;
    public static WritingMode RLTB;
    public static WritingMode TBRL;
    public static WritingMode TBLR;
    public static WritingMode LR;
    public static WritingMode RL;
    public static WritingMode TB;
    public static WritingMode Page;
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.Heading : ODFParagraphProperties {
    private string m_classNames;
    private string m_condStyleName;
    private int m_id;
    private bool m_isListHeader;
    private int m_outlineLevel;
    private bool m_restartNumbering;
    private UInt32 m_startValue;
    private string m_styleName;
    internal string StyleName { get; internal set; }
    internal UInt32 StartValue { get; internal set; }
    internal bool RestartNumbering { get; internal set; }
    internal int OutlineLevel { get; internal set; }
    internal bool IsListHeader { get; internal set; }
    internal int Id { get; internal set; }
    internal string CondStyleName { get; internal set; }
    internal string ClassNames { get; internal set; }
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal UInt32 get_StartValue();
    internal void set_StartValue(UInt32 value);
    internal bool get_RestartNumbering();
    internal void set_RestartNumbering(bool value);
    internal int get_OutlineLevel();
    internal void set_OutlineLevel(int value);
    internal bool get_IsListHeader();
    internal void set_IsListHeader(bool value);
    internal int get_Id();
    internal void set_Id(int value);
    internal string get_CondStyleName();
    internal void set_CondStyleName(string value);
    internal string get_ClassNames();
    internal void set_ClassNames(string value);
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.ListHeader : object {
    private Heading m_heading;
    private List m_list;
    private ODFParagraphProperties m_paragraph;
    internal ODFParagraphProperties Paragraph { get; internal set; }
    internal List List { get; internal set; }
    internal Heading Heading { get; internal set; }
    internal ODFParagraphProperties get_Paragraph();
    internal void set_Paragraph(ODFParagraphProperties value);
    internal List get_List();
    internal void set_List(List value);
    internal Heading get_Heading();
    internal void set_Heading(Heading value);
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.ListItem : ListHeader {
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.NumberedParagraph : object {
    private bool m_isContinueNumbering;
    private int m_level;
    private int m_listId;
    private int m_startValue;
    private string m_styleName;
    private ODFParagraphProperties m_paragraphStyle;
    private Heading m_headingStyle;
    internal Heading HeadingStyle { get; internal set; }
    internal ODFParagraphProperties ParagraphStyle { get; internal set; }
    internal string StyleName { get; internal set; }
    internal int StartValue { get; internal set; }
    internal int ListId { get; internal set; }
    internal int Level { get; internal set; }
    internal bool IsContinueNumbering { get; internal set; }
    internal Heading get_HeadingStyle();
    internal void set_HeadingStyle(Heading value);
    internal ODFParagraphProperties get_ParagraphStyle();
    internal void set_ParagraphStyle(ODFParagraphProperties value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal int get_StartValue();
    internal void set_StartValue(int value);
    internal int get_ListId();
    internal void set_ListId(int value);
    internal int get_Level();
    internal void set_Level(int value);
    internal bool get_IsContinueNumbering();
    internal void set_IsContinueNumbering(bool value);
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.OTableOfContent : object {
    private string m_name;
    private bool m_isProtected;
    private string m_protectionKey;
    private string m_protectionKeyDigestAlgorithm;
    internal string ProtectionKeyDigestAlgorithm { get; internal set; }
    internal string ProtectionKey { get; internal set; }
    internal bool Isprotected { get; internal set; }
    internal string Name { get; internal set; }
    internal string get_ProtectionKeyDigestAlgorithm();
    internal void set_ProtectionKeyDigestAlgorithm(string value);
    internal string get_ProtectionKey();
    internal void set_ProtectionKey(string value);
    internal bool get_Isprotected();
    internal void set_Isprotected(bool value);
    internal string get_Name();
    internal void set_Name(string value);
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.Section : object {
    private string m_styleName;
    internal string StyleName { get; internal set; }
    internal string get_StyleName();
    internal void set_StyleName(string value);
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.Styles.List : object {
    private string m_continueList;
    private bool m_isContinueNumbering;
    private ListHeader m_listHeader;
    private ListItem m_listItem;
    internal ListItem ListItem { get; internal set; }
    internal ListHeader ListHeader { get; internal set; }
    internal bool IsContinueNumbering { get; internal set; }
    internal string ContinueList { get; internal set; }
    internal ListItem get_ListItem();
    internal void set_ListItem(ListItem value);
    internal ListHeader get_ListHeader();
    internal void set_ListHeader(ListHeader value);
    internal bool get_IsContinueNumbering();
    internal void set_IsContinueNumbering(bool value);
    internal string get_ContinueList();
    internal void set_ContinueList(string value);
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.TabStops : object {
    private TextAlign m_textAlignType;
    private double m_textPosition;
    private TabStopLeader m_tabLeader;
    internal double TextPosition { get; internal set; }
    internal TextAlign TextAlignType { get; internal set; }
    internal TabStopLeader TabStopLeader { get; internal set; }
    internal double get_TextPosition();
    internal void set_TextPosition(double value);
    internal TextAlign get_TextAlignType();
    internal void set_TextAlignType(TextAlign value);
    internal TabStopLeader get_TabStopLeader();
    internal void set_TabStopLeader(TabStopLeader value);
}
internal class Syncfusion.DocIO.ODFConverter.Base.ODFImplementation.Text : object {
    private OParagraph m_paragraph;
    private Heading m_heading;
    private List m_list;
    private NumberedParagraph m_numberedParagraph;
    private Section m_section;
    private OTableOfContent m_tableOfContent;
    private bool m_isSoftPageBreak;
    private OParagraphCollection m_paraItem;
    internal OParagraphCollection ParagraphItem { get; internal set; }
    internal bool IsSoftPageBreak { get; internal set; }
    internal OTableOfContent TableOfContent { get; internal set; }
    internal Section Section { get; internal set; }
    internal NumberedParagraph NumberedParagraph { get; internal set; }
    internal List List { get; internal set; }
    internal Heading Heading { get; internal set; }
    internal OParagraph Paragraph { get; internal set; }
    internal OParagraphCollection get_ParagraphItem();
    internal void set_ParagraphItem(OParagraphCollection value);
    internal bool get_IsSoftPageBreak();
    internal void set_IsSoftPageBreak(bool value);
    internal OTableOfContent get_TableOfContent();
    internal void set_TableOfContent(OTableOfContent value);
    internal Section get_Section();
    internal void set_Section(Section value);
    internal NumberedParagraph get_NumberedParagraph();
    internal void set_NumberedParagraph(NumberedParagraph value);
    internal List get_List();
    internal void set_List(List value);
    internal Heading get_Heading();
    internal void set_Heading(Heading value);
    internal OParagraph get_Paragraph();
    internal void set_Paragraph(OParagraph value);
}
internal class Syncfusion.DocIO.ODTConvertion.DocToODTConverter : object {
    private WordDocument m_document;
    internal ODocument m_oDocument;
    internal OParagraph paragraph;
    internal OParagraphItem opara;
    internal ODFStyle odfStyle;
    private ODFWriter m_writer;
    private ODFStyleCollection odfstyleCollection1;
    private int m_docPrId;
    private List`1<string> pageNames;
    private BeforeBreak m_lastBreak;
    private byte m_flag;
    private int m_relationShipID;
    internal bool IsWritingHeaderFooter { get; internal set; }
    public DocToODTConverter(WordDocument document);
    internal bool get_IsWritingHeaderFooter();
    internal void set_IsWritingHeaderFooter(bool value);
    internal void ConvertToODF(Stream stream);
    internal void MapDocumentStyles();
    internal void ConvertFontFace();
    internal void MapContent();
    private TextProperties CopyCharFormatToTextFormat(WCharacterFormat charFormat, TextProperties textProp);
    private BorderLineStyle GetUnderlineStyle(UnderlineStyle charstyle);
    private ODFParagraphProperties CopyParaFormatToParagraphPropertiesFormat(WParagraphFormat paraformat);
    private ODFParagraphProperties ResetInlineParagraphFormat(WParagraphFormat paraformat, ODFParagraphProperties paraProp);
    private TextAlign GetAlignment(WParagraphFormat paragraphFormat);
    private BorderLineStyle GetUnderlineStyle(BorderStyle style);
    private string GetColor(Color color);
    internal void ConvertDefaultStyles();
    private TextAlign GetTabAlignment(TabJustification tabAlignment);
    private TabStopLeader GetTabStop(TabLeader tabLeader);
    private ODFFontFamily GetStyleType(StyleType styleType);
    internal void GetBody();
    private SectionProperties ConvertDocToODFSectionProperties(WSection section);
    private OTextBodyItem GetOTextBodyItem(TextBodyItem TextbodyItem);
    private OTextBodyItem GetOParagraph(TextBodyItem TextbodyItem, Int32& fieldEndMarkIndex, Boolean& isInSameParagraph, Boolean& isInSameTextBody, Int32& fieldEndOwnerParagraphIndex, Int32& breakIndex, bool isContinuousSection);
    private PageNumberFormat GetNumberFormat(string pageNumberFormat);
    private void GetOPicture(OPicture oPicture, WPicture picture, ODFStyle odfStyle);
    private string ConvertToValidXmlString(string text);
    private bool IsValidXmlChar(ushort character);
    private int GetNextDocPrID();
    private string UpdateShapeId(WPicture picture, bool isOlePicture, bool isPictureBullet, WOleObject oleObject);
    private string AddImageRelation(Dictionary`2<string, ImageRecord> imageCollection, ImageRecord imageRecord);
    private string GetNextRelationShipID();
    private void ResetRelationShipID();
    private IEntity GetPictureOwner(WPicture pic);
    private IEntity GetOleObjectOwner(WOleObject oleObject);
    private Entity GetBaseEntity(Entity entity);
    private void GetTableBorder(WTable table, OTable table1);
    private void GetRowHeight(WTableRow row, OTableRow tableRow);
    private Border GetRightBorder(int cellIndex, int cellLast, Borders borders, WTableCell m_cell);
    private Border GetLeftBorder(int cellIndex, WTableCell m_cell, Borders borders);
    private Border GetBottomBorder(int cellIndex, int cellLast, int rowIndex, int rowLast, WTableCell m_cell, Borders borders);
    private Border GetTopBorder(int cellIndex, int rowIndex, Borders borders, WTableCell m_cell, int previousRowIndex);
    private void GetCellStyle(WTableCell m_cell, TableStyleTableProperties tableStyle, OTableCell cell, Paddings paddings, WTableStyle tablebackcolor);
    private void GetColumnWidth(WTable table, OTableColumn cellColumn, OTable table1);
    private Paddings GetCellPaddingBasedOnTable(WTableCell cell);
    private OTextBodyItem GetTableContent(TextBodyItem TextbodyItem);
    private string CombineTextInSubsequentTextRanges(ParagraphItemCollection paraItemCollection, Int32& index);
    internal void LoadHeaderFooterContents(WHeadersFooters headersFooters, MasterPage page);
    internal HeaderFooterContent GetHeaderFooterContent(HeaderFooterContent oHeaderFooter, HeaderFooter headerFooter);
    private void ConvertAutomaticAndMasterStyles();
    private void MapListStyles();
    private TextAlign GetListLevelAlingment(ListNumberAlignment numberAlignment);
    private void ConvertPageLayOut(WPageSetup pageSetup, PageLayout layout, MasterPage masterPage);
    internal bool StartsWithExt(string text, string value);
    internal void Close();
}
internal class Syncfusion.DocIO.ODTImplementation.OParagraphCollection : object {
    private List`1<OParagraph> m_Paragraph;
    internal List`1<OParagraph> Paragraph { get; internal set; }
    internal List`1<OParagraph> get_Paragraph();
    internal void set_Paragraph(List`1<OParagraph> value);
}
public enum Syncfusion.DocIO.OutlineLevel : Enum {
    public int value__;
    public static OutlineLevel Level1;
    public static OutlineLevel Level2;
    public static OutlineLevel Level3;
    public static OutlineLevel Level4;
    public static OutlineLevel Level5;
    public static OutlineLevel Level6;
    public static OutlineLevel Level7;
    public static OutlineLevel Level8;
    public static OutlineLevel Level9;
    public static OutlineLevel BodyText;
}
public enum Syncfusion.DocIO.PageBorderOffsetFrom : Enum {
    public int value__;
    public static PageBorderOffsetFrom Text;
    public static PageBorderOffsetFrom PageEdge;
}
public enum Syncfusion.DocIO.PageBordersApplyType : Enum {
    public int value__;
    public static PageBordersApplyType AllPages;
    public static PageBordersApplyType FirstPage;
    public static PageBordersApplyType AllExceptFirstPage;
}
public enum Syncfusion.DocIO.PropertyType : Enum {
    public int value__;
    public static PropertyType Summary;
    public static PropertyType DocumentSummary;
    public static PropertyType Custom;
}
public enum Syncfusion.DocIO.PropertyValueType : Enum {
    public int value__;
    public static PropertyValueType Boolean;
    public static PropertyValueType Date;
    public static PropertyValueType Float;
    public static PropertyValueType Double;
    public static PropertyValueType Int;
    public static PropertyValueType String;
    public static PropertyValueType ByteArray;
    public static PropertyValueType ClipData;
}
public enum Syncfusion.DocIO.ProtectionType : Enum {
    public int value__;
    public static ProtectionType AllowOnlyComments;
    public static ProtectionType AllowOnlyFormFields;
    public static ProtectionType AllowOnlyReading;
    public static ProtectionType AllowOnlyRevisions;
    public static ProtectionType NoProtection;
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.AnnotationsRW : SubDocumentRW {
    private List`1<string> m_grpXstAtnOwners;
    private AnnotationBookmarks m_bookmarks;
    private AnnotationDescriptor m_currDescriptor;
    private int m_descIndex;
    internal AnnotationsRW(Stream stream, Fib fib);
    internal virtual void Read(Stream stream, Fib fib);
    internal virtual void Write(Stream stream, Fib fib);
    internal void AddDescriptor(AnnotationDescriptor atrd, int pos, int bkmkStart, int bkmkEnd);
    internal void AddDescriptor(AnnotationDescriptor atrd, int pos);
    internal int AddGXAO(string gxao);
    internal AnnotationDescriptor GetDescriptor(int index);
    internal string GetUser(int index);
    internal int GetBookmarkStartOffset(int index);
    internal int GetBookmarkEndOffset(int index);
    internal int GetPosition(int index);
    private void ReadGXAO(int pos, int length);
    private void WriteGXAO();
    internal virtual void Close();
    protected virtual void Init();
    protected virtual void ReadTxtPositions();
    protected virtual void ReadDescriptors();
    protected virtual void ReadDescriptor(BinaryReader reader, int pos, int posNext);
    protected virtual void WriteDescriptors();
    protected virtual void WriteTxtPositions();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.AtnStatePositions : StatePositionsBase {
    internal AtnStatePositions(WordFKPData fkp);
    internal virtual int MoveToItem(int itemIndex);
    internal virtual bool UpdateItemEndPos(long iEndPos);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.AnnotationDescriptor : object {
    internal static int DEF_LENGTH;
    private string m_xstUsrInitl;
    private short m_ibst;
    private short m_ak;
    private short m_grfbmc;
    private int m_lTagBkmk;
    internal short IndexToGrpOwner { get; internal set; }
    internal string UserInitials { get; internal set; }
    internal short Ak { get; internal set; }
    internal short Grfbmc { get; internal set; }
    internal int TagBkmk { get; internal set; }
    internal AnnotationDescriptor(BinaryReader reader);
    internal short get_IndexToGrpOwner();
    internal void set_IndexToGrpOwner(short value);
    internal string get_UserInitials();
    internal void set_UserInitials(string value);
    internal short get_Ak();
    internal void set_Ak(short value);
    internal short get_Grfbmc();
    internal void set_Grfbmc(short value);
    internal int get_TagBkmk();
    internal void set_TagBkmk(int value);
    internal void Read(BinaryReader reader);
    internal void Write(BinaryWriter writer);
}
[CLSCompliantAttribute("False")]
internal abstract class Syncfusion.DocIO.ReaderWriter.Biff_Records.BaseWordRecord : object {
    private static int DEF_BITS_IN_BYTE;
    private static int DEF_BITS_IN_SHORT;
    private static int DEF_BITS_IN_INT;
    internal int Length { get; }
    protected IDataStructure UnderlyingStructure { get; }
    internal BaseWordRecord(Byte[] data);
    internal BaseWordRecord(Byte[] arrData, int iOffset);
    internal BaseWordRecord(Byte[] arrData, int iOffset, int iCount);
    internal BaseWordRecord(Stream stream, int iCount);
    internal virtual int get_Length();
    protected virtual IDataStructure get_UnderlyingStructure();
    internal static bool GetBit(byte btOptions, int bitPos);
    internal static bool GetBit(short sOptions, int bitPos);
    internal static bool GetBit(int iOptions, int bitPos);
    internal static int GetBitsByMask(int value, int BitMask, int iStartBit);
    internal static UInt32 GetBitsByMask(UInt32 value, int BitMask, int iStartBit);
    internal static int SetBit(int iValue, int bitPos, bool value);
    internal static int SetBitsByMask(int destination, int BitMask, int value);
    internal static int SetBitsByMask(int destination, int BitMask, int iStartBit, int value);
    internal static UInt32 SetBitsByMask(UInt32 destination, int BitMask, int value);
    internal static bool GetBit(UInt32 uiOptions, int bitPos);
    internal static UInt32 SetBit(UInt32 uiValue, int bitPos, bool value);
    internal static ushort ReadUInt16(Stream stream);
    internal static UInt32 ReadUInt32(Stream stream);
    internal static short ReadInt16(Stream stream);
    internal static int ReadInt32(Stream stream);
    internal static ushort ReadUInt16(Byte[] arrData, int iOffset);
    internal static ushort ReadUInt16(Byte[] arrData, Int32& iOffset);
    internal static string ReadString(Stream stream);
    internal static void WriteString(Stream stream, string str);
    internal static string ReadString(Byte[] arrData, int iOffset);
    internal static string ReadString(Byte[] arrData, int iOffset, ushort usCount);
    internal static string GetZeroTerminatedString(Byte[] arrData, int iOffset, Int32& iEndPos);
    internal static Byte[] ToZeroTerminatedArray(string str);
    internal static void WriteUInt16(Byte[] arrData, ushort usValue, Int32& iOffset);
    internal static void WriteUInt32(Byte[] arrData, UInt32 uintValue, Int32& iOffset);
    internal static void WriteUInt32(Stream stream, UInt32 value);
    internal static void WriteInt32(Stream stream, int value);
    internal static void WriteInt16(Stream stream, short value);
    internal static void WriteUInt16(Stream stream, ushort value);
    internal static void WriteString(Byte[] arrData, string strValue, Int32& iOffset);
    internal static int WriteBytes(Byte[] arrData, Byte[] bytes, int iOffset);
    internal Byte[] ReadBytes(Stream stream, int i);
    internal virtual void Parse(Byte[] data);
    internal virtual void ParseBytes(Byte[] arrData, int iOffset);
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal virtual void Parse(Stream stream, int iCount);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal virtual int Save(Stream stream);
    internal virtual void Close();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.BinaryTable : BaseWordRecord {
    private UInt32[] m_arrFC;
    private BinTableEntry[] m_arrEntry;
    internal UInt32[] FileCharacterPos { get; }
    internal BinTableEntry[] Entries { get; }
    internal int EntriesCount { get; internal set; }
    internal int Length { get; }
    internal BinaryTable(Byte[] arrData);
    internal BinaryTable(Stream stream, int iCount);
    internal virtual void Close();
    internal virtual void Parse(Byte[] arrData, int iOffset, int iLength);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal UInt32[] get_FileCharacterPos();
    internal BinTableEntry[] get_Entries();
    internal int get_EntriesCount();
    internal void set_EntriesCount(int value);
    internal virtual int get_Length();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.BookmarkDescriptor : object {
    private int DEF_STRUCT_SIZE;
    private int m_bkmkCount;
    private List`1<BookmarkFirstStructure> m_bkfArr;
    private List`1<int> m_bklArr;
    private int m_lastEnd;
    internal int BookmarkCount { get; }
    private BookmarkFirstStructure[] BkfArray { get; }
    internal BookmarkDescriptor(Stream stream, int bookmarkCount, int bkfPos, int bkfLength, int bklPos, int bklLength);
    internal int get_BookmarkCount();
    private BookmarkFirstStructure[] get_BkfArray();
    internal int GetBeginPos(int i);
    internal void SetBeginPos(int i, int position);
    internal int GetEndPos(int i);
    internal void SetEndPos(int i, int position);
    internal void Save(Stream stream, Fib fib, UInt32 endChar);
    internal void Add(int startPos);
    internal bool IsCellGroup(int bookmarkIndex);
    internal void SetCellGroup(int bookmarkIndex, bool isCellGroup);
    internal short GetStartCellIndex(int bookmarkIndex);
    internal void SetStartCellIndex(int bookmarkIndex, int position);
    internal short GetEndCellIndex(int bookmarkIndex);
    internal void SetEndCellIndex(int bookmarkIndex, int position);
    internal void Close();
    private void ReadBKL(int bklPos, Stream stream, int bklLength);
    private void ReadBKF(int bkfPos, Stream stream, int bkfLength);
    private void WriteBKF(Stream stream, Fib fib, UInt32 endChar);
    private void WriteBKL(Stream stream, Fib fib, UInt32 endChar);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.BookmarkInfo : object {
    private string m_strName;
    private int m_iStartPos;
    private int m_iEndPos;
    private bool m_isCellGroup;
    private short m_startCell;
    private short m_endCell;
    private int m_bookmarkIndex;
    internal string Name { get; internal set; }
    internal int EndPos { get; internal set; }
    internal int StartPos { get; internal set; }
    internal bool IsCellGroupBookmark { get; }
    internal short StartCellIndex { get; internal set; }
    internal short EndCellIndex { get; internal set; }
    internal int Index { get; internal set; }
    internal BookmarkInfo(string name, int startPos, int endPos, bool isCellGroup, short startCellIndex, short endCellIndex);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_EndPos();
    internal void set_EndPos(int value);
    internal int get_StartPos();
    internal void set_StartPos(int value);
    internal bool get_IsCellGroupBookmark();
    internal short get_StartCellIndex();
    internal void set_StartCellIndex(short value);
    internal short get_EndCellIndex();
    internal void set_EndCellIndex(short value);
    internal int get_Index();
    internal void set_Index(int value);
    internal BookmarkInfo Clone();
}
[DefaultMemberAttribute("Item")]
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.BookmarkNameStringTable : object {
    private List`1<string> m_strArr;
    private int m_bkmkCount;
    internal int BookmarkCount { get; internal set; }
    internal string Item { get; }
    internal int BookmarkNamesLength { get; }
    internal BookmarkNameStringTable(Stream stream, int length);
    internal int get_BookmarkCount();
    internal void set_BookmarkCount(int value);
    internal string get_Item(int index);
    internal int get_BookmarkNamesLength();
    internal void Close();
    internal void Save(Stream stream, Fib fib);
    internal void Add(string name);
    internal int Find(string name);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.BorderCode : BaseWordRecord {
    private int DEF_NEW_BRC_LENGTH;
    private byte m_dptLineWidth;
    private byte m_brcType;
    private byte m_colorId;
    private Color m_colorExt;
    private byte m_props;
    private byte m_bFlags;
    internal byte LineWidth { get; internal set; }
    internal byte BorderType { get; internal set; }
    internal byte Space { get; internal set; }
    internal bool Shadow { get; internal set; }
    internal byte LineColor { get; internal set; }
    internal Color LineColorExt { get; internal set; }
    internal bool IsDefault { get; internal set; }
    internal bool IsClear { get; }
    internal BorderCode(Byte[] arr, int iOffset);
    internal void Parse(Byte[] arr, int iOffset);
    internal void ParseNewBrc(Byte[] arr, int iOffset);
    internal void SaveBytes(Byte[] arr, int iOffset);
    internal void SaveNewBrc(Byte[] arr, int iOffset);
    internal void Read(BinaryReader reader);
    internal void Write(Stream stream);
    internal BorderCode Clone();
    internal bool Compare(BorderCode border);
    internal StringBuilder GetAsString();
    private static List`1<string> GetIgnorableProperties();
    internal byte get_LineWidth();
    internal void set_LineWidth(byte value);
    internal byte get_BorderType();
    internal void set_BorderType(byte value);
    internal byte get_Space();
    internal void set_Space(byte value);
    internal bool get_Shadow();
    internal void set_Shadow(bool value);
    internal byte get_LineColor();
    internal void set_LineColor(byte value);
    internal Color get_LineColorExt();
    internal void set_LineColorExt(Color value);
    internal bool get_IsDefault();
    internal void set_IsDefault(bool value);
    internal bool get_IsClear();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.BreakDescriptor : BaseWordRecord {
    internal static int DEF_BKD_SIZE;
    internal short m_ipgd;
    internal short m_dcpDepend;
    internal byte m_iCol;
    internal byte m_options;
    internal short Ipgd { get; internal set; }
    internal short DcpDepend { get; internal set; }
    internal byte Options { get; internal set; }
    internal bool TableBreak { get; internal set; }
    internal bool ColumnBreak { get; internal set; }
    internal bool Marked { get; internal set; }
    internal bool Unk { get; internal set; }
    internal bool TextOverflow { get; internal set; }
    internal BreakDescriptor(Stream stream);
    internal short get_Ipgd();
    internal void set_Ipgd(short value);
    internal short get_DcpDepend();
    internal void set_DcpDepend(short value);
    internal byte get_Options();
    internal void set_Options(byte value);
    internal bool get_TableBreak();
    internal void set_TableBreak(bool value);
    internal bool get_ColumnBreak();
    internal void set_ColumnBreak(bool value);
    internal bool get_Marked();
    internal void set_Marked(bool value);
    internal bool get_Unk();
    internal void set_Unk(bool value);
    internal bool get_TextOverflow();
    internal void set_TextOverflow(bool value);
    internal void Read(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.BreakDescriptorRecord : BaseWordRecord {
    private static int DEF_BIT_TABLE_BREAK;
    private static int DEF_BIT_COLUMN_BREAK;
    private static int DEF_BIT_MARKED;
    private static int DEF_BIT_LIMIT_VALID;
    internal static int DEF_RECORD_SIZE;
    private BreakDescriptorStructure m_field;
    internal short PageDescriptorIndex { get; internal set; }
    internal short itxbxs { get; internal set; }
    internal short CharPosNumber { get; internal set; }
    internal ushort Options { get; }
    internal byte ColumnIndex { get; internal set; }
    internal bool IsTableBreak { get; internal set; }
    internal bool IsColumnBreak { get; internal set; }
    internal bool IsMarked { get; internal set; }
    internal bool IsLimitValid { get; internal set; }
    internal bool IsTextOverflow { get; internal set; }
    protected IDataStructure UnderlyingStructure { get; }
    internal int Length { get; }
    internal BreakDescriptorRecord(Byte[] data);
    internal BreakDescriptorRecord(Byte[] arrData, int iOffset);
    internal BreakDescriptorRecord(Byte[] arrData, int iOffset, int iCount);
    internal BreakDescriptorRecord(Stream stream, int iCount);
    internal short get_PageDescriptorIndex();
    internal void set_PageDescriptorIndex(short value);
    internal short get_itxbxs();
    internal void set_itxbxs(short value);
    internal short get_CharPosNumber();
    internal void set_CharPosNumber(short value);
    internal ushort get_Options();
    internal byte get_ColumnIndex();
    internal void set_ColumnIndex(byte value);
    internal bool get_IsTableBreak();
    internal void set_IsTableBreak(bool value);
    internal bool get_IsColumnBreak();
    internal void set_IsColumnBreak(bool value);
    internal bool get_IsMarked();
    internal void set_IsMarked(bool value);
    internal bool get_IsLimitValid();
    internal void set_IsLimitValid(bool value);
    internal bool get_IsTextOverflow();
    internal void set_IsTextOverflow(bool value);
    protected virtual IDataStructure get_UnderlyingStructure();
    internal virtual int get_Length();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.BreakDescriptorTable : BaseWordRecord {
    private UInt32[] m_arrFC;
    private BreakDescriptorRecord[] m_arrEntry;
    internal UInt32[] FileCharacterPos { get; }
    internal BreakDescriptorRecord[] Entries { get; }
    internal int Length { get; }
    internal BreakDescriptorTable(Byte[] data);
    internal BreakDescriptorTable(Byte[] arrData, int iOffset);
    internal BreakDescriptorTable(Byte[] arrData, int iOffset, int iCount);
    internal BreakDescriptorTable(Stream stream, int iCount);
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal virtual void Parse(Stream stream, int iCount);
    internal UInt32[] get_FileCharacterPos();
    internal BreakDescriptorRecord[] get_Entries();
    internal virtual int get_Length();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.CharacterProperties : object {
    private CharacterPropertyException m_chpx;
    private WordStyleSheet m_styleSheet;
    private byte m_bFlags;
    internal SinglePropertyModifierArray Sprms { get; }
    internal CharacterPropertyException CharacterPropertyException { get; }
    internal bool ComplexScript { get; internal set; }
    internal bool Bold { get; internal set; }
    internal byte BoldComplex { get; internal set; }
    internal bool Italic { get; internal set; }
    internal byte ItalicComplex { get; internal set; }
    internal bool Strike { get; internal set; }
    internal byte ShadowComplex { get; internal set; }
    internal byte StrikeComplex { get; internal set; }
    internal bool DoubleStrike { get; internal set; }
    internal byte UnderlineCode { get; internal set; }
    internal string FontName { get; internal set; }
    internal string FontNameAscii { get; internal set; }
    internal string FontNameFarEast { get; internal set; }
    internal string FontNameNonFarEast { get; internal set; }
    internal string FontNameBi { get; internal set; }
    internal ushort FontAscii { get; internal set; }
    internal ushort FontFarEast { get; internal set; }
    internal ushort FontNonFarEast { get; internal set; }
    internal ushort FontBi { get; internal set; }
    internal float FontSize { get; internal set; }
    internal ushort FontSizeHP { get; internal set; }
    internal byte FontColor { get; internal set; }
    internal Color FontColorExt { get; internal set; }
    internal UInt32 FontColorRGB { get; internal set; }
    internal byte HighlightColor { get; internal set; }
    internal byte SubSuperScript { get; internal set; }
    internal byte Clear { get; internal set; }
    internal int PicLocation { get; internal set; }
    internal bool Outline { get; internal set; }
    internal bool Shadow { get; internal set; }
    internal bool Emboss { get; internal set; }
    internal byte EmbossComplex { get; internal set; }
    internal bool Engrave { get; internal set; }
    internal byte EngraveComplex { get; internal set; }
    internal bool Hidden { get; internal set; }
    internal bool SpecVanish { get; internal set; }
    internal bool SmallCaps { get; internal set; }
    internal bool AllCaps { get; internal set; }
    internal byte AllCapsComplex { get; internal set; }
    internal short Position { get; internal set; }
    internal short LineSpacing { get; internal set; }
    internal ushort Scaling { get; internal set; }
    internal ushort Kern { get; internal set; }
    internal ShadingDescriptor Shading { get; internal set; }
    internal ShadingDescriptor ShadingNew { get; internal set; }
    internal BorderCode Border { get; internal set; }
    internal bool StickProperties { get; internal set; }
    internal bool Special { get; internal set; }
    internal SymbolDescriptor Symbol { get; internal set; }
    internal byte HiddenComplex { get; internal set; }
    internal byte DoubleStrikeComplex { get; internal set; }
    internal byte SmallCapsComplex { get; internal set; }
    internal bool FldVanish { get; internal set; }
    internal byte FldVanishComplex { get; internal set; }
    internal bool NoProof { get; internal set; }
    internal byte IdctHint { get; internal set; }
    internal bool IsInsertRevision { get; internal set; }
    internal bool IsDeleteRevision { get; internal set; }
    internal bool IsChangedFormat { get; internal set; }
    internal int ListPictureIndex { get; internal set; }
    internal bool ListHasImage { get; internal set; }
    internal bool BoldBi { get; internal set; }
    internal bool ItalicBi { get; internal set; }
    internal bool Bidi { get; internal set; }
    internal ushort FontSizeBi { get; internal set; }
    internal WordStyleSheet StyleSheet { get; internal set; }
    internal bool IsOle2 { get; internal set; }
    internal bool IsData { get; internal set; }
    internal ushort CharacterStyleId { get; internal set; }
    internal short LocaleIdASCII { get; internal set; }
    internal short LocaleIdASCII1 { get; internal set; }
    internal short LocaleIdFarEast { get; internal set; }
    internal short LocaleIdFarEast1 { get; internal set; }
    internal short LidBi { get; internal set; }
    internal CharacterProperties(WordStyleSheet styleSheet);
    internal CharacterProperties(CharacterPropertyException chpx, WordStyleSheet styleSheet);
    internal SinglePropertyModifierArray get_Sprms();
    internal CharacterPropertyException get_CharacterPropertyException();
    internal bool get_ComplexScript();
    internal void set_ComplexScript(bool value);
    internal bool get_Bold();
    internal void set_Bold(bool value);
    internal byte get_BoldComplex();
    internal void set_BoldComplex(byte value);
    internal bool get_Italic();
    internal void set_Italic(bool value);
    internal byte get_ItalicComplex();
    internal void set_ItalicComplex(byte value);
    internal bool get_Strike();
    internal void set_Strike(bool value);
    internal byte get_ShadowComplex();
    internal void set_ShadowComplex(byte value);
    internal byte get_StrikeComplex();
    internal void set_StrikeComplex(byte value);
    internal bool get_DoubleStrike();
    internal void set_DoubleStrike(bool value);
    internal byte get_UnderlineCode();
    internal void set_UnderlineCode(byte value);
    internal string get_FontName();
    internal void set_FontName(string value);
    internal string get_FontNameAscii();
    internal void set_FontNameAscii(string value);
    internal string get_FontNameFarEast();
    internal void set_FontNameFarEast(string value);
    internal string get_FontNameNonFarEast();
    internal void set_FontNameNonFarEast(string value);
    internal string get_FontNameBi();
    internal void set_FontNameBi(string value);
    internal ushort get_FontAscii();
    internal void set_FontAscii(ushort value);
    internal ushort get_FontFarEast();
    internal void set_FontFarEast(ushort value);
    internal ushort get_FontNonFarEast();
    internal void set_FontNonFarEast(ushort value);
    internal ushort get_FontBi();
    internal void set_FontBi(ushort value);
    internal float get_FontSize();
    internal void set_FontSize(float value);
    internal ushort get_FontSizeHP();
    internal void set_FontSizeHP(ushort value);
    internal byte get_FontColor();
    internal void set_FontColor(byte value);
    internal Color get_FontColorExt();
    internal void set_FontColorExt(Color value);
    internal UInt32 get_FontColorRGB();
    internal void set_FontColorRGB(UInt32 value);
    internal byte get_HighlightColor();
    internal void set_HighlightColor(byte value);
    internal byte get_SubSuperScript();
    internal void set_SubSuperScript(byte value);
    internal byte get_Clear();
    internal void set_Clear(byte value);
    internal int get_PicLocation();
    internal void set_PicLocation(int value);
    internal bool get_Outline();
    internal void set_Outline(bool value);
    internal bool get_Shadow();
    internal void set_Shadow(bool value);
    internal bool get_Emboss();
    internal void set_Emboss(bool value);
    internal byte get_EmbossComplex();
    internal void set_EmbossComplex(byte value);
    internal bool get_Engrave();
    internal void set_Engrave(bool value);
    internal byte get_EngraveComplex();
    internal void set_EngraveComplex(byte value);
    internal bool get_Hidden();
    internal void set_Hidden(bool value);
    internal bool get_SpecVanish();
    internal void set_SpecVanish(bool value);
    internal bool get_SmallCaps();
    internal void set_SmallCaps(bool value);
    internal bool get_AllCaps();
    internal void set_AllCaps(bool value);
    internal byte get_AllCapsComplex();
    internal void set_AllCapsComplex(byte value);
    internal short get_Position();
    internal void set_Position(short value);
    internal short get_LineSpacing();
    internal void set_LineSpacing(short value);
    internal ushort get_Scaling();
    internal void set_Scaling(ushort value);
    internal ushort get_Kern();
    internal void set_Kern(ushort value);
    internal ShadingDescriptor get_Shading();
    internal void set_Shading(ShadingDescriptor value);
    internal ShadingDescriptor get_ShadingNew();
    internal void set_ShadingNew(ShadingDescriptor value);
    internal BorderCode get_Border();
    internal void set_Border(BorderCode value);
    internal bool get_StickProperties();
    internal void set_StickProperties(bool value);
    internal bool get_Special();
    internal void set_Special(bool value);
    internal SymbolDescriptor get_Symbol();
    internal void set_Symbol(SymbolDescriptor value);
    internal byte get_HiddenComplex();
    internal void set_HiddenComplex(byte value);
    internal byte get_DoubleStrikeComplex();
    internal void set_DoubleStrikeComplex(byte value);
    internal byte get_SmallCapsComplex();
    internal void set_SmallCapsComplex(byte value);
    internal bool get_FldVanish();
    internal void set_FldVanish(bool value);
    internal byte get_FldVanishComplex();
    internal void set_FldVanishComplex(byte value);
    internal bool get_NoProof();
    internal void set_NoProof(bool value);
    internal byte get_IdctHint();
    internal void set_IdctHint(byte value);
    internal bool get_IsInsertRevision();
    internal void set_IsInsertRevision(bool value);
    internal bool get_IsDeleteRevision();
    internal void set_IsDeleteRevision(bool value);
    internal bool get_IsChangedFormat();
    internal void set_IsChangedFormat(bool value);
    internal int get_ListPictureIndex();
    internal void set_ListPictureIndex(int value);
    internal bool get_ListHasImage();
    internal void set_ListHasImage(bool value);
    internal bool get_BoldBi();
    internal void set_BoldBi(bool value);
    internal bool get_ItalicBi();
    internal void set_ItalicBi(bool value);
    internal bool get_Bidi();
    internal void set_Bidi(bool value);
    internal ushort get_FontSizeBi();
    internal void set_FontSizeBi(ushort value);
    internal WordStyleSheet get_StyleSheet();
    internal void set_StyleSheet(WordStyleSheet value);
    internal bool get_IsOle2();
    internal void set_IsOle2(bool value);
    internal bool get_IsData();
    internal void set_IsData(bool value);
    internal ushort get_CharacterStyleId();
    internal void set_CharacterStyleId(ushort value);
    internal short get_LocaleIdASCII();
    internal void set_LocaleIdASCII(short value);
    internal short get_LocaleIdASCII1();
    internal void set_LocaleIdASCII1(short value);
    internal short get_LocaleIdFarEast();
    internal void set_LocaleIdFarEast(short value);
    internal short get_LocaleIdFarEast1();
    internal void set_LocaleIdFarEast1(short value);
    internal short get_LidBi();
    internal void set_LidBi(short value);
    internal bool HasOptions(int option);
    internal SinglePropertyModifierArray GetCopiableSprm();
    internal bool GetBoolean(SinglePropertyModifierRecord record);
    internal string GetFontName(SinglePropertyModifierRecord record);
    internal BorderCode GetBorder(SinglePropertyModifierRecord record);
    internal ShadingDescriptor GetShading(SinglePropertyModifierRecord record);
    internal SymbolDescriptor GetSymbol(SinglePropertyModifierRecord record);
    internal Color GetColor(SinglePropertyModifierRecord record);
    internal void SetAllFontNames(string fontName);
    internal void SetFontName(string fontName, int option);
    internal void AddSprmWithBoolValue(int option, bool value);
    internal void AddSprmWithByteValue(int option, byte value);
    internal void AddSprmWithUShortValue(int option, ushort value);
    internal void AddSprmWithShortValue(int option, short value);
    internal void AddSprmWithIntValue(int option, int value);
    internal CharacterPropertyException CloneChpx();
    internal void RemoveSprm(int option);
    internal bool HasSprms();
    internal SinglePropertyModifierRecord GetNewSprm(int option);
    private int GetNewPropsStartIndex();
    private int ConvertColor(int brg);
    private static bool GetComplexBoolean(byte sprmValue, bool styleSheetValue);
    public virtual string ToString();
    internal void Close();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.CharacterPropertyException : BaseWordRecord {
    private byte m_btLength;
    protected SinglePropertyModifierArray m_arrSprms;
    internal SinglePropertyModifierArray PropertyModifiers { get; internal set; }
    internal int ModifiersCount { get; }
    internal int Length { get; }
    internal ushort FontAscii { get; internal set; }
    internal ushort FontFarEast { get; internal set; }
    internal ushort FontNonFarEast { get; internal set; }
    internal CharacterPropertyException(Byte[] arrData, int iOffset);
    internal CharacterPropertyException(UniversalPropertyException property);
    internal CharacterPropertyException(Byte[] arrData);
    internal SinglePropertyModifierArray get_PropertyModifiers();
    internal void set_PropertyModifiers(SinglePropertyModifierArray value);
    internal int get_ModifiersCount();
    internal virtual int get_Length();
    internal ushort get_FontAscii();
    internal void set_FontAscii(ushort value);
    internal ushort get_FontFarEast();
    internal void set_FontFarEast(ushort value);
    internal ushort get_FontNonFarEast();
    internal void set_FontNonFarEast(ushort value);
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal int Save(BinaryWriter writer, Stream stream, int length);
    internal bool HasSprms();
    internal virtual void Close();
    public bool Equals(CharacterPropertyException chpx);
    private bool IsSprmEqual(SinglePropertyModifierRecord sprm, SinglePropertyModifierRecord prevSprm, SprmCompareType sprmCompareType);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.CharPosTableRecord : BaseWordRecord {
    private Int32[] m_arrPositions;
    internal Int32[] Positions { get; internal set; }
    internal int Length { get; }
    internal CharPosTableRecord(Byte[] data);
    internal CharPosTableRecord(Byte[] arrData, int iOffset);
    internal CharPosTableRecord(Byte[] arrData, int iOffset, int iCount);
    internal CharPosTableRecord(Stream stream, int iCount);
    internal Int32[] get_Positions();
    internal void set_Positions(Int32[] value);
    internal virtual int get_Length();
    internal string GetTextChunk(string text, int position);
    internal virtual void Close();
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal virtual int Save(Byte[] arrData, int iOffset);
}
[DefaultMemberAttribute("Item")]
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ColumnArray : List`1<object> {
    private static int DEF_DISTANCE_BETWEEN_COLUMNS;
    private SinglePropertyModifierArray m_sprms;
    internal ColumnDescriptor Item { get; }
    internal bool ColumnsEvenlySpaced { get; internal set; }
    internal ColumnArray(SinglePropertyModifierArray sprms);
    internal ColumnDescriptor AddColumn();
    internal ColumnDescriptor AddEmptyColumn();
    internal ColumnDescriptor get_Item(int index);
    internal bool get_ColumnsEvenlySpaced();
    internal void set_ColumnsEvenlySpaced(bool value);
    internal void Close();
    internal void ReadColumnsProperties(bool isFromPropertyHash);
    internal void ReadColumn();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ColumnDescriptor : object {
    private static ushort DEF_WIDTH;
    private static ushort DEF_SPACE;
    private SinglePropertyModifierRecord m_widthRecord;
    private SinglePropertyModifierRecord m_spaceRecord;
    internal ushort Width { get; internal set; }
    internal ushort Space { get; internal set; }
    internal ColumnDescriptor(SinglePropertyModifierRecord width, SinglePropertyModifierRecord space);
    internal ushort get_Width();
    internal void set_Width(ushort value);
    internal ushort get_Space();
    internal void set_Space(ushort value);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.FieldDescriptor : BaseWordRecord {
    private byte m_ch;
    private byte m_reserved;
    private byte m_fieldType;
    internal bool HasSeparator { get; internal set; }
    internal bool IsResultDirty { get; internal set; }
    internal bool IsResultEdited { get; internal set; }
    internal bool IsLocked { get; internal set; }
    internal bool IsNested { get; internal set; }
    internal FieldType Type { get; internal set; }
    internal byte FieldBoundary { get; internal set; }
    internal FieldDescriptor(BinaryReader reader);
    internal bool get_HasSeparator();
    internal void set_HasSeparator(bool value);
    internal bool get_IsResultDirty();
    internal void set_IsResultDirty(bool value);
    internal bool get_IsResultEdited();
    internal void set_IsResultEdited(bool value);
    internal bool get_IsLocked();
    internal void set_IsLocked(bool value);
    internal bool get_IsNested();
    internal void set_IsNested(bool value);
    internal FieldType get_Type();
    internal void set_Type(FieldType value);
    internal byte get_FieldBoundary();
    internal void set_FieldBoundary(byte value);
    internal void Parse(short sh);
    internal short Save();
    internal FieldDescriptor Clone();
    internal void Read(BinaryReader reader);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Fields : BaseWordRecord {
    internal int DEF_FLD_SIZE;
    private BinaryReader m_reader;
    private DocIOSortedList`2<int, FieldDescriptor> m_curList;
    private Dictionary`2<WordSubdocument, DocIOSortedList`2<int, FieldDescriptor>> m_fieldsList;
    internal DocIOSortedList`2<int, FieldDescriptor> MainFields { get; }
    internal DocIOSortedList`2<int, FieldDescriptor> HFFields { get; }
    internal DocIOSortedList`2<int, FieldDescriptor> FtnFields { get; }
    internal DocIOSortedList`2<int, FieldDescriptor> AtnFields { get; }
    internal DocIOSortedList`2<int, FieldDescriptor> EdnFields { get; }
    internal DocIOSortedList`2<int, FieldDescriptor> TxbxFields { get; }
    internal DocIOSortedList`2<int, FieldDescriptor> HdrTxbxFields { get; }
    internal Fields(Fib fib, BinaryReader reader);
    internal DocIOSortedList`2<int, FieldDescriptor> get_MainFields();
    internal DocIOSortedList`2<int, FieldDescriptor> get_HFFields();
    internal DocIOSortedList`2<int, FieldDescriptor> get_FtnFields();
    internal DocIOSortedList`2<int, FieldDescriptor> get_AtnFields();
    internal DocIOSortedList`2<int, FieldDescriptor> get_EdnFields();
    internal DocIOSortedList`2<int, FieldDescriptor> get_TxbxFields();
    internal DocIOSortedList`2<int, FieldDescriptor> get_HdrTxbxFields();
    internal void AddField(WordSubdocument docType, FieldDescriptor fld, int pos);
    internal DocIOSortedList`2<int, FieldDescriptor> GetFieldsForSubDoc(WordSubdocument type);
    internal void Write(Stream stream, UInt32 endPosition, WordSubdocument subDocument);
    internal virtual void Close();
    internal FieldDescriptor FindFld(WordSubdocument docType, int pos);
    private void ReadFieldDescriptor(BinaryReader reader, int pos, int posNext);
    private void ReadFieldsForSubDoc(WordSubdocument docType, UInt32 pos, UInt32 length);
    private void WriteFieldsForSubDocument(DocIOSortedList`2<int, FieldDescriptor> stList, Stream stream, UInt32 endPosition);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.FieldTypeDefiner : object {
    [ThreadStaticAttribute]
private static Dictionary`2<string, FieldType> m_hashStrType;
    [ThreadStaticAttribute]
private static Dictionary`2<FieldType, string> m_hashTypeStr;
    internal static Dictionary`2<string, FieldType> StrTypeTable { get; }
    internal static Dictionary`2<FieldType, string> TypeStrTable { get; }
    internal static Dictionary`2<string, FieldType> get_StrTypeTable();
    internal static Dictionary`2<FieldType, string> get_TypeStrTable();
    internal static FieldType GetFieldType(string fieldCode);
    internal static string GetFieldCode(FieldType fieldType);
    internal static bool IsFormField(FieldType fieldType);
    private static void InitStrTypeHash();
    private static void InitTypeStrHash();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.FontFamilyNameRecord : BaseWordRecord {
    private static int DEF_MAX_LENGTH;
    private static int DEF_PITCHREQUEST_MASK;
    private static int DEF_ISTRUETYPE_MASK;
    private static int DEF_ISTRUETYPE_OFFSET;
    private static int DEF_FONTFAMILYID_MASK;
    private static int DEF_FONTFAMILYID_OFFSET;
    private byte m_bflags;
    private FFNBaseStructure m_ffnBase;
    private string m_strFontName;
    private string m_strAltFontName;
    private Byte[] m_dbgFontName;
    private Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> m_embedFonts;
    protected IDataStructure UnderlyingStructure { get; }
    private byte TotalLengthM1 { get; }
    internal int Length { get; }
    internal byte PitchRequest { get; internal set; }
    internal bool IsSubsetted { get; internal set; }
    internal bool TrueType { get; internal set; }
    internal byte FontFamilyID { get; internal set; }
    internal short Weight { get; internal set; }
    internal Byte[] SigUsb0 { get; internal set; }
    internal Byte[] SigUsb1 { get; internal set; }
    internal Byte[] SigUsb2 { get; internal set; }
    internal Byte[] SigUsb3 { get; internal set; }
    internal Byte[] SigCsb0 { get; internal set; }
    internal Byte[] SigCsb1 { get; internal set; }
    internal byte CharacterSetId { get; internal set; }
    internal string FontName { get; internal set; }
    internal string AlternativeFontName { get; internal set; }
    internal Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> EmbedFonts { get; internal set; }
    protected virtual IDataStructure get_UnderlyingStructure();
    private byte get_TotalLengthM1();
    internal virtual int get_Length();
    internal byte get_PitchRequest();
    internal void set_PitchRequest(byte value);
    internal bool get_IsSubsetted();
    internal void set_IsSubsetted(bool value);
    internal bool get_TrueType();
    internal void set_TrueType(bool value);
    internal byte get_FontFamilyID();
    internal void set_FontFamilyID(byte value);
    internal short get_Weight();
    internal void set_Weight(short value);
    internal Byte[] get_SigUsb0();
    internal void set_SigUsb0(Byte[] value);
    internal Byte[] get_SigUsb1();
    internal void set_SigUsb1(Byte[] value);
    internal Byte[] get_SigUsb2();
    internal void set_SigUsb2(Byte[] value);
    internal Byte[] get_SigUsb3();
    internal void set_SigUsb3(Byte[] value);
    internal Byte[] get_SigCsb0();
    internal void set_SigCsb0(Byte[] value);
    internal Byte[] get_SigCsb1();
    internal void set_SigCsb1(Byte[] value);
    internal byte get_CharacterSetId();
    internal void set_CharacterSetId(byte value);
    internal string get_FontName();
    internal void set_FontName(string value);
    internal string get_AlternativeFontName();
    internal void set_AlternativeFontName(string value);
    internal Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> get_EmbedFonts();
    internal void set_EmbedFonts(Dictionary`2<string, Dictionary`2<string, DictionaryEntry>> value);
    internal int ParseBytes(Byte[] arrData, int iOffset, int iCount);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal virtual void Close();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.FontFamilyNameStringTable : BaseWordRecord {
    private ushort DEF_EXTENDED;
    private ushort m_extendedFlag;
    private ushort m_noStrings;
    private ushort m_extraDataLen;
    private FontFamilyNameRecord[] m_ffnRecords;
    internal int Length { get; }
    internal int RecordsCount { get; internal set; }
    internal FontFamilyNameRecord[] FontFamilyNameRecords { get; }
    internal virtual int get_Length();
    internal int get_RecordsCount();
    internal void set_RecordsCount(int value);
    internal FontFamilyNameRecord[] get_FontFamilyNameRecords();
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal virtual void Close();
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.FormField : object {
    internal static int DEF_VALUE;
    private FieldType m_fieldType;
    private PICF m_picf;
    private ushort m_params;
    private ushort m_maxLength;
    private ushort m_checkBoxSize;
    private string m_title;
    private string m_defaultTextInputValue;
    private bool m_defaultCheckBoxValue;
    private ushort m_defaultDropDownValue;
    private string m_textFormat;
    private string m_help;
    private string m_tooltip;
    private string m_macroOnStart;
    private string m_macroOnEnd;
    private List`1<string> m_dropDownItems;
    private bool m_isUnicode;
    internal FormFieldType FormFieldType { get; }
    internal FieldType FieldType { get; }
    internal short Params { get; internal set; }
    internal int MaxLength { get; internal set; }
    internal int CheckBoxSize { get; internal set; }
    internal string Title { get; internal set; }
    internal bool Checked { get; internal set; }
    internal bool DefaultCheckBoxValue { get; internal set; }
    internal int DefaultDropDownValue { get; internal set; }
    internal string DefaultTextInputValue { get; internal set; }
    internal string Format { get; internal set; }
    internal int Value { get; internal set; }
    internal string Help { get; internal set; }
    internal string Tooltip { get; internal set; }
    internal string MacroOnStart { get; internal set; }
    internal string MacroOnEnd { get; internal set; }
    internal int DropDownIndex { get; internal set; }
    internal List`1<string> DropDownItems { get; }
    internal string DropDownValue { get; internal set; }
    internal bool IsCalculateOnExit { get; internal set; }
    internal bool IsCheckBoxExplicitSize { get; internal set; }
    internal bool IsDisabled { get; internal set; }
    internal TextFormFieldType TextFormFieldType { get; internal set; }
    internal FormField(FieldType fieldType);
    internal FormField(FieldType fieldType, BinaryReader reader);
    internal FormFieldType get_FormFieldType();
    internal FieldType get_FieldType();
    internal short get_Params();
    internal void set_Params(short value);
    internal int get_MaxLength();
    internal void set_MaxLength(int value);
    internal int get_CheckBoxSize();
    internal void set_CheckBoxSize(int value);
    internal string get_Title();
    internal void set_Title(string value);
    internal bool get_Checked();
    internal void set_Checked(bool value);
    internal bool get_DefaultCheckBoxValue();
    internal void set_DefaultCheckBoxValue(bool value);
    internal int get_DefaultDropDownValue();
    internal void set_DefaultDropDownValue(int value);
    internal string get_DefaultTextInputValue();
    internal void set_DefaultTextInputValue(string value);
    internal string get_Format();
    internal void set_Format(string value);
    internal int get_Value();
    internal void set_Value(int value);
    internal string get_Help();
    internal void set_Help(string value);
    internal string get_Tooltip();
    internal void set_Tooltip(string value);
    internal string get_MacroOnStart();
    internal void set_MacroOnStart(string value);
    internal string get_MacroOnEnd();
    internal void set_MacroOnEnd(string value);
    internal int get_DropDownIndex();
    internal void set_DropDownIndex(int value);
    internal List`1<string> get_DropDownItems();
    internal string get_DropDownValue();
    internal void set_DropDownValue(string value);
    internal bool get_IsCalculateOnExit();
    internal void set_IsCalculateOnExit(bool value);
    internal bool get_IsCheckBoxExplicitSize();
    internal void set_IsCheckBoxExplicitSize(bool value);
    internal bool get_IsDisabled();
    internal void set_IsDisabled(bool value);
    internal TextFormFieldType get_TextFormFieldType();
    internal void set_TextFormFieldType(TextFormFieldType value);
    internal void Write(Stream stream);
    internal static string ReadUnicodeString(BinaryReader binaryReader, bool readZero);
    internal string ReadString(BinaryReader binaryReader, bool readZero);
    internal static void WriteString(string text, BinaryWriter writer, bool writeSeparator);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.LineSpacingDescriptor : object {
    private short m_dyaLine;
    private bool m_fMultLinespace;
    internal short LineSpacing { get; internal set; }
    internal LineSpacingRule LineSpacingRule { get; internal set; }
    internal LineSpacingDescriptor(Byte[] operand);
    internal short get_LineSpacing();
    internal void set_LineSpacing(short value);
    internal LineSpacingRule get_LineSpacingRule();
    internal void set_LineSpacingRule(LineSpacingRule value);
    internal void Parse(Byte[] operand);
    internal Byte[] Save();
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListData : BaseWordRecord {
    private static int DEF_LEVELS_COUNT;
    private static int DEF_RGISTD;
    private static int DEF_SIMPLE_BIT;
    private static int DEF_HYBRID_BIT;
    private int m_lsid;
    private int m_tplc;
    private Int32[] m_rgistd;
    private int m_Options;
    private ListLevels m_levels;
    private string m_name;
    internal ListLevels Levels { get; }
    internal string Name { get; internal set; }
    internal bool RestartHeading { get; }
    internal bool SimpleList { get; internal set; }
    internal bool IsHybridMultilevel { get; }
    internal int ListID { get; internal set; }
    internal ListData(int lsid);
    internal ListData(int lsid, bool isHybrid, bool isSimpleList);
    internal ListData(Stream reader);
    internal ListLevels get_Levels();
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_RestartHeading();
    internal bool get_SimpleList();
    internal void set_SimpleList(bool value);
    internal bool get_IsHybridMultilevel();
    internal int get_ListID();
    internal void set_ListID(int value);
    internal virtual void Close();
    internal void ReadLvl(Stream stream);
    internal void WriteListData(Stream stream);
    internal void ReadListData(Stream stream);
    internal void WriteLvl(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListFormatOverride : BaseWordRecord {
    private int m_lsid;
    private int m_unused1;
    private int m_unused2;
    internal int m_res1;
    internal int m_res2;
    private List`1<object> m_levels;
    private int m_clfolvl;
    internal List`1<object> Levels { get; }
    internal int ListID { get; internal set; }
    internal ListFormatOverride(Stream stream);
    internal virtual void Close();
    internal List`1<object> get_Levels();
    internal int get_ListID();
    internal void set_ListID(int value);
    internal void WriteLfo(Stream stream);
    internal void ReadLfo(Stream stream);
    internal void WriteLfoLvls(Stream stream);
    internal void ReadLfoLvls(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListFormatOverrideLevel : BaseWordRecord {
    internal int m_startAt;
    internal int m_ilvl;
    internal bool m_bStartAt;
    internal bool m_bFormatting;
    internal int m_reserved1;
    internal int m_reserved2;
    internal int m_reserved3;
    internal ListLevel m_lvl;
    internal ListFormatOverrideLevel(bool overrideLvl);
    internal ListFormatOverrideLevel(Stream stream);
    internal void Write(Stream stream);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListFormatOverrides : List`1<ListFormatOverride> {
    internal ListFormatOverride Item { get; internal set; }
    internal ListFormatOverride get_Item(int index);
    internal void set_Item(int index, ListFormatOverride value);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListFormats : List`1<ListData> {
    internal ListData Item { get; internal set; }
    internal ListData GetListFromId(int id);
    internal ListData FindListData(int listId);
    internal ListData get_Item(int index);
    internal void set_Item(int index, ListData value);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListInfo : BaseWordRecord {
    private static int DEF_LIST_ID;
    private static string DEF_BULLLET_FIRST;
    private static string DEF_BULLLET_SECOND;
    private static string DEF_BULLLET_THIRD;
    private static int DEF_MULTIPLIER;
    private int m_listid;
    private ListFormats m_listFormats;
    private ListFormatOverrides m_listFormatOverrides;
    internal ListFormatOverrides ListFormatOverrides { get; }
    internal ListFormats ListFormats { get; }
    internal ListInfo(Fib fib, Stream stream);
    internal void ReadLst(Fib fib, Stream stream);
    internal void ReadLfo(Fib fib, Stream stream);
    internal void ReadStringTable(Fib fib, Stream stream);
    internal int WriteLfo(Stream stream);
    internal int WriteLst(Stream stream);
    internal int WriteStringTable(Stream stream);
    internal short ApplyNumberList();
    internal ListData GetLevelFormat(int levelNumber);
    internal ListInfo Clone();
    internal short ApplyBulletList();
    internal short ApplyList(ListData listData, WListFormat listFormat, WordStyleSheet styleSheet);
    internal short ApplyLFO(ListData listData, WListFormat listFormat, WordStyleSheet styleSheet);
    internal ListFormatOverrides get_ListFormatOverrides();
    internal ListFormats get_ListFormats();
    internal virtual void Close();
    private ListLevel CreateBuletLvl(int dxLeft, string str);
    private ListLevel CreateNumberLvl(int dxLeft, int levelNumber, ListPatternType nfc, ListNumberAlignment align);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListLevel : BaseWordRecord {
    internal int m_startAt;
    internal ListPatternType m_nfc;
    internal ListNumberAlignment m_jc;
    internal bool m_bLegal;
    internal bool m_bNoRestart;
    internal bool m_bPrev;
    internal bool m_bPrevSpace;
    internal bool m_bWord6;
    internal bool m_unused;
    internal Byte[] m_rgbxchNums;
    internal FollowCharacterType m_ixchFollow;
    internal int m_dxaSpace;
    internal int m_dxaIndent;
    internal int m_reserved;
    internal CharacterPropertyException m_chpx;
    internal ParagraphPropertyException m_papx;
    internal string m_str;
    internal ListLevel(Stream stream);
    internal void Write(Stream stream);
    private void Read(Stream stream);
    private void ReadListSprms(int dataLen, Stream stream, bool isChpx);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListLevels : List`1<object> {
    internal ListLevel Item { get; internal set; }
    internal ListLevel get_Item(int index);
    internal void set_Item(int index, ListLevel value);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ListProperties : object {
    private ListInfo m_listInfo;
    private ParagraphPropertyException m_papx;
    private Dictionary`2<string, short> m_overrideStyles;
    private Dictionary`2<string, short> m_styles;
    internal Dictionary`2<string, short> StyleListIndexes { get; }
    internal ListProperties(ListInfo listInfo, ParagraphPropertyException papx);
    internal Dictionary`2<string, short> get_StyleListIndexes();
    internal void Close();
    internal void UpdatePAPX(ParagraphPropertyException papx);
    internal void ContinueCurrentList(ListData listData, WListFormat listFormat, WordStyleSheet styleSheet);
    internal int ApplyList(ListData listData, WListFormat listFormat, WordStyleSheet styleSheet, bool applyToPap);
    internal int ApplyBaseStyleList(ListData listData, WListFormat listFormat, WordStyleSheet styleSheet);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ParagraphExceptionInDiskPage : ParagraphPropertyException {
    internal int Length { get; }
    protected bool IsPad { get; }
    internal ParagraphExceptionInDiskPage(ParagraphPropertyException papx);
    internal virtual int get_Length();
    protected bool get_IsPad();
    internal int Parse(Byte[] arrData, int iOffset);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal void Save(BinaryWriter writer, Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ParagraphHeight : BaseWordRecord {
    private static int DEF_BIT_SPARE;
    private static int DEF_BIT_VALID;
    private static int DEF_BIT_DIFF_LINES;
    private static int DEF_BYTE_LINES_COUNT;
    private static int DEF_MASK_NEXT_ROW_HINT;
    private static int DEF_START_NEXT_ROW_HINT;
    private static int DEF_RECORD_SIZE;
    private ParagraphHeightStructure m_structure;
    internal ParagraphHeightStructure Structure { get; }
    internal bool IsSpare { get; internal set; }
    internal bool IsValid { get; internal set; }
    internal bool IsDifferentLines { get; internal set; }
    internal byte LinesCount { get; internal set; }
    internal int Width { get; internal set; }
    internal int Height { get; internal set; }
    internal int NextRowHint { get; internal set; }
    protected IDataStructure UnderlyingStructure { get; }
    internal int Length { get; }
    internal ParagraphHeight(Byte[] arrData);
    internal ParagraphHeight(Stream stream);
    internal ParagraphHeightStructure get_Structure();
    internal bool get_IsSpare();
    internal void set_IsSpare(bool value);
    internal bool get_IsValid();
    internal void set_IsValid(bool value);
    internal bool get_IsDifferentLines();
    internal void set_IsDifferentLines(bool value);
    internal byte get_LinesCount();
    internal void set_LinesCount(byte value);
    internal int get_Width();
    internal void set_Width(int value);
    internal int get_Height();
    internal void set_Height(int value);
    internal int get_NextRowHint();
    internal void set_NextRowHint(int value);
    protected virtual IDataStructure get_UnderlyingStructure();
    internal virtual int get_Length();
    internal void Parse(Byte[] arrData, int iOffset);
    internal int Save(Byte[] arrData, int iOffset);
}
public enum Syncfusion.DocIO.ReaderWriter.Biff_Records.ParagraphJustify : Enum {
    public int value__;
    public static ParagraphJustify Left;
    public static ParagraphJustify Center;
    public static ParagraphJustify Right;
    public static ParagraphJustify LeftAndRight;
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ParagraphPropertiesPage : BaseWordRecord {
    private static int DEF_FC_SIZE;
    private UInt32[] m_arrFC;
    private BXStructure[] m_arrHeight;
    private ParagraphExceptionInDiskPage[] m_arrPAPX;
    internal UInt32[] FileCharPos { get; }
    internal BXStructure[] Heights { get; }
    internal ParagraphExceptionInDiskPage[] ParagraphProperties { get; }
    internal int RunsCount { get; internal set; }
    internal int Length { get; }
    internal ParagraphPropertiesPage(FKPStructure structure);
    internal UInt32[] get_FileCharPos();
    internal BXStructure[] get_Heights();
    internal ParagraphExceptionInDiskPage[] get_ParagraphProperties();
    internal int get_RunsCount();
    internal void set_RunsCount(int value);
    internal virtual int get_Length();
    internal virtual void Close();
    private void Parse(FKPStructure structure);
    internal FKPStructure Save();
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal void SaveToStream(BinaryWriter writer, Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ParagraphPropertyException : BaseWordRecord {
    protected ushort m_usStyleId;
    protected SinglePropertyModifierArray m_arrSprms;
    private byte m_bFlags;
    private bool IsHugePapx { get; private set; }
    internal ushort StyleIndex { get; internal set; }
    internal SinglePropertyModifierArray PropertyModifiers { get; internal set; }
    internal int ModifiersCount { get; }
    internal int Length { get; }
    internal ushort ParagraphStyleId { get; internal set; }
    internal ParagraphPropertyException(Stream stream, int iCount, bool isHugePapx);
    internal ParagraphPropertyException(UniversalPropertyException property);
    internal virtual void Close();
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal virtual int Save(Stream stream);
    internal int SaveHugePapx(Stream stream);
    private bool get_IsHugePapx();
    private void set_IsHugePapx(bool value);
    internal ushort get_StyleIndex();
    internal void set_StyleIndex(ushort value);
    internal SinglePropertyModifierArray get_PropertyModifiers();
    internal void set_PropertyModifiers(SinglePropertyModifierArray value);
    internal int get_ModifiersCount();
    internal virtual int get_Length();
    internal ushort get_ParagraphStyleId();
    internal void set_ParagraphStyleId(ushort value);
    internal ParagraphPropertyException ClonePapx(bool stickProperties, ParagraphPropertyException papx);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.PICF : object {
    internal static int DEF_PICF_LENGTH;
    internal static int DEF_SCALING_FACTOR;
    internal int lcb;
    internal short cbHeader;
    internal short mm;
    internal short xExt;
    internal short yExt;
    internal short hMf;
    internal short bm_rcWinMF;
    internal short bm_rcWinMF1;
    internal short bm_rcWinMF2;
    internal short bm_rcWinMF3;
    internal short bm_rcWinMF4;
    internal short bm_rcWinMF5;
    internal short bm_rcWinMF6;
    internal short dxaGoal;
    internal short dyaGoal;
    internal ushort mx;
    internal ushort my;
    internal short dyaCropLeft;
    internal short dyaCropTop;
    internal short dxaCropRight;
    internal short dyaCropBottom;
    internal short brcl;
    internal bool fFrameEmpty;
    internal bool fBitmap;
    internal bool fDrawHatch;
    internal bool fError;
    internal short bpp;
    internal BorderCode brcTop;
    internal BorderCode brcLeft;
    internal BorderCode brcBottom;
    internal BorderCode brcRight;
    internal short dxaOrigin;
    internal short dyaOrigin;
    internal short cProps;
    internal int ScaleHeight { get; }
    internal int ScaleWidth { get; }
    internal double ScaleX { get; }
    internal double ScaleY { get; }
    internal BorderCode BorderTop { get; }
    internal BorderCode BorderLeft { get; }
    internal BorderCode BorderRight { get; }
    internal BorderCode BorderBottom { get; }
    internal PICF(BinaryReader reader);
    internal int get_ScaleHeight();
    internal int get_ScaleWidth();
    internal double get_ScaleX();
    internal double get_ScaleY();
    internal BorderCode get_BorderTop();
    internal BorderCode get_BorderLeft();
    internal BorderCode get_BorderRight();
    internal BorderCode get_BorderBottom();
    internal void Read(BinaryReader reader);
    internal void Read(Stream stream);
    internal void Write(Stream stream);
    internal PICF Clone();
    internal void SetBasePictureOptions(int height, int width, float heightScale, float widthScale);
    internal bool Compare(PICF pictureDescriptor);
    internal StringBuilder GetAsString();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.PieceDescriptorRecord : BaseWordRecord {
    internal static int RECORD_SIZE;
    private PieceDescriptorStructure m_field;
    internal bool fNoParaLast { get; internal set; }
    internal bool fPaphNil { get; internal set; }
    internal bool fCopied { get; internal set; }
    internal UInt32 FileOffset { get; internal set; }
    internal PropertyModifierStructure PropertyModifier { get; internal set; }
    protected IDataStructure UnderlyingStructure { get; }
    internal int Length { get; }
    internal PieceDescriptorRecord(Byte[] arrData);
    internal PieceDescriptorRecord(Byte[] arrData, int iOffset);
    internal bool get_fNoParaLast();
    internal void set_fNoParaLast(bool value);
    internal bool get_fPaphNil();
    internal void set_fPaphNil(bool value);
    internal bool get_fCopied();
    internal void set_fCopied(bool value);
    internal UInt32 get_FileOffset();
    internal void set_FileOffset(UInt32 value);
    internal PropertyModifierStructure get_PropertyModifier();
    internal void set_PropertyModifier(PropertyModifierStructure value);
    protected virtual IDataStructure get_UnderlyingStructure();
    internal virtual int get_Length();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.PieceTable : BaseWordRecord {
    private UInt32[] m_arrFC;
    private PieceDescriptorRecord[] m_arrEntry;
    internal UInt32[] FileCharacterPos { get; }
    internal PieceDescriptorRecord[] Entries { get; }
    internal int Length { get; }
    internal int EntriesCount { get; internal set; }
    internal PieceTable(Byte[] arrData);
    internal virtual void Close();
    internal virtual void Parse(Byte[] arrData);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal UInt32[] get_FileCharacterPos();
    internal PieceDescriptorRecord[] get_Entries();
    internal virtual int get_Length();
    internal int get_EntriesCount();
    internal void set_EntriesCount(int value);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.PosStructReader : object {
    internal static void Read(BinaryReader binaryReader, int structCount, PosStructReaderDelegate deleg);
    internal static void Read(BinaryReader reader, int dataLength, int structLength, PosStructReaderDelegate deleg);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.PosStructReaderDelegate : MulticastDelegate {
    public PosStructReaderDelegate(object object, IntPtr method);
    public virtual void Invoke(BinaryReader reader, int pos, int nextPos);
    public virtual IAsyncResult BeginInvoke(BinaryReader reader, int pos, int nextPos, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ReferencePositionTable : BaseWordRecord {
    private Int32[] m_arrPositions;
    private UInt16[] m_arrNumbers;
    internal Int32[] Positions { get; }
    internal UInt16[] Numbers { get; }
    internal int Length { get; }
    internal ReferencePositionTable(Byte[] data);
    internal ReferencePositionTable(Byte[] arrData, int iOffset);
    internal ReferencePositionTable(Byte[] arrData, int iOffset, int iCount);
    internal ReferencePositionTable(Stream stream, int iCount);
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal Int32[] get_Positions();
    internal UInt16[] get_Numbers();
    internal virtual int get_Length();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.SectionDescriptor : BaseWordRecord {
    private SectionDescriptorStructure m_structure;
    internal static int DEF_RECORD_SIZE;
    internal short Internal1 { get; internal set; }
    internal short Internal2 { get; internal set; }
    internal UInt32 SepxPosition { get; internal set; }
    internal int MacPrintOffset { get; internal set; }
    protected IDataStructure UnderlyingStructure { get; }
    internal int Length { get; }
    internal SectionDescriptor(Byte[] arrData);
    internal SectionDescriptor(Byte[] arrData, int iOffset);
    internal short get_Internal1();
    internal void set_Internal1(short value);
    internal short get_Internal2();
    internal void set_Internal2(short value);
    internal UInt32 get_SepxPosition();
    internal void set_SepxPosition(UInt32 value);
    internal int get_MacPrintOffset();
    internal void set_MacPrintOffset(int value);
    protected virtual IDataStructure get_UnderlyingStructure();
    internal virtual int get_Length();
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.SectionExceptionsTable : BaseWordRecord {
    private Int32[] m_arrPositions;
    private SectionDescriptor[] m_arrDescriptors;
    internal Int32[] Positions { get; }
    internal SectionDescriptor[] Descriptors { get; }
    internal int Length { get; }
    internal int EntriesCount { get; internal set; }
    internal SectionExceptionsTable(Byte[] arrData);
    internal SectionExceptionsTable(Stream stream, int iCount);
    internal virtual void Close();
    internal virtual void Parse(Byte[] data, int iOffset, int iCount);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal Int32[] get_Positions();
    internal SectionDescriptor[] get_Descriptors();
    internal virtual int get_Length();
    internal int get_EntriesCount();
    internal void set_EntriesCount(int value);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.SectionProperties : object {
    private SectionPropertyException m_sepx;
    private ColumnArray m_columnsArray;
    private ColumnArray m_oldColumnsArray;
    private bool m_stickProperties;
    internal bool StickProperties { get; internal set; }
    internal SinglePropertyModifierArray Sprms { get; }
    internal short HeaderHeight { get; internal set; }
    internal short FooterHeight { get; internal set; }
    internal bool TitlePage { get; internal set; }
    internal byte BreakCode { get; internal set; }
    internal byte TextDirection { get; internal set; }
    internal ColumnArray Columns { get; }
    internal ColumnArray OldColumns { get; }
    internal short BottomMargin { get; internal set; }
    internal short TopMargin { get; internal set; }
    internal short LeftMargin { get; internal set; }
    internal short RightMargin { get; internal set; }
    internal byte Orientation { get; internal set; }
    internal ushort PageHeight { get; internal set; }
    internal ushort PageWidth { get; internal set; }
    internal ushort FirstPageTray { get; internal set; }
    internal ushort OtherPagesTray { get; internal set; }
    internal byte VerticalAlignment { get; internal set; }
    internal short Gutter { get; internal set; }
    internal bool Bidi { get; internal set; }
    internal byte PageNfc { get; internal set; }
    internal ushort PageStartAt { get; internal set; }
    internal bool PageRestart { get; internal set; }
    internal ushort LinePitch { get; internal set; }
    internal ushort PitchType { get; internal set; }
    internal bool DrawLinesBetweenCols { get; internal set; }
    internal bool ProtectForm { get; internal set; }
    internal bool IsChangedFormat { get; internal set; }
    internal byte ChapterPageSeparator { get; internal set; }
    internal byte HeadingLevelForChapter { get; internal set; }
    internal LineNumberingMode LineNumberingMode { get; internal set; }
    internal ushort LineNumberingStep { get; internal set; }
    internal short LineNumberingStartValue { get; internal set; }
    internal short LineNumberingDistanceFromText { get; internal set; }
    internal BorderCode LeftBorder { get; internal set; }
    internal BorderCode TopBorder { get; internal set; }
    internal BorderCode RightBorder { get; internal set; }
    internal BorderCode BottomBorder { get; internal set; }
    internal BorderCode LeftBorderNew { get; internal set; }
    internal BorderCode TopBorderNew { get; internal set; }
    internal BorderCode RightBorderNew { get; internal set; }
    internal BorderCode BottomBorderNew { get; internal set; }
    internal PageBordersApplyType PageBorderApply { get; internal set; }
    internal bool PageBorderIsInFront { get; internal set; }
    internal PageBorderOffsetFrom PageBorderOffsetFrom { get; internal set; }
    internal ushort ColumnsCount { get; internal set; }
    internal ushort EndnoteNumberFormat { get; internal set; }
    internal ushort FootnoteNumberFormat { get; internal set; }
    internal byte RestartIndexForEndnote { get; internal set; }
    internal byte RestartIndexForFootnotes { get; internal set; }
    internal byte FootnotePosition { get; internal set; }
    internal ushort InitialFootnoteNumber { get; internal set; }
    internal ushort InitialEndnoteNumber { get; internal set; }
    internal SectionProperties(SectionPropertyException sepx);
    internal bool get_StickProperties();
    internal void set_StickProperties(bool value);
    internal SinglePropertyModifierArray get_Sprms();
    internal short get_HeaderHeight();
    internal void set_HeaderHeight(short value);
    internal short get_FooterHeight();
    internal void set_FooterHeight(short value);
    internal bool get_TitlePage();
    internal void set_TitlePage(bool value);
    internal byte get_BreakCode();
    internal void set_BreakCode(byte value);
    internal byte get_TextDirection();
    internal void set_TextDirection(byte value);
    internal ColumnArray get_Columns();
    internal ColumnArray get_OldColumns();
    internal short get_BottomMargin();
    internal void set_BottomMargin(short value);
    internal short get_TopMargin();
    internal void set_TopMargin(short value);
    internal short get_LeftMargin();
    internal void set_LeftMargin(short value);
    internal short get_RightMargin();
    internal void set_RightMargin(short value);
    internal byte get_Orientation();
    internal void set_Orientation(byte value);
    internal ushort get_PageHeight();
    internal void set_PageHeight(ushort value);
    internal ushort get_PageWidth();
    internal void set_PageWidth(ushort value);
    internal ushort get_FirstPageTray();
    internal void set_FirstPageTray(ushort value);
    internal ushort get_OtherPagesTray();
    internal void set_OtherPagesTray(ushort value);
    internal byte get_VerticalAlignment();
    internal void set_VerticalAlignment(byte value);
    internal short get_Gutter();
    internal void set_Gutter(short value);
    internal bool get_Bidi();
    internal void set_Bidi(bool value);
    internal byte get_PageNfc();
    internal void set_PageNfc(byte value);
    internal ushort get_PageStartAt();
    internal void set_PageStartAt(ushort value);
    internal bool get_PageRestart();
    internal void set_PageRestart(bool value);
    internal ushort get_LinePitch();
    internal void set_LinePitch(ushort value);
    internal ushort get_PitchType();
    internal void set_PitchType(ushort value);
    internal bool get_DrawLinesBetweenCols();
    internal void set_DrawLinesBetweenCols(bool value);
    internal bool get_ProtectForm();
    internal void set_ProtectForm(bool value);
    internal bool get_IsChangedFormat();
    internal void set_IsChangedFormat(bool value);
    internal byte get_ChapterPageSeparator();
    internal void set_ChapterPageSeparator(byte value);
    internal byte get_HeadingLevelForChapter();
    internal void set_HeadingLevelForChapter(byte value);
    internal LineNumberingMode get_LineNumberingMode();
    internal void set_LineNumberingMode(LineNumberingMode value);
    internal ushort get_LineNumberingStep();
    internal void set_LineNumberingStep(ushort value);
    internal short get_LineNumberingStartValue();
    internal void set_LineNumberingStartValue(short value);
    internal short get_LineNumberingDistanceFromText();
    internal void set_LineNumberingDistanceFromText(short value);
    internal BorderCode get_LeftBorder();
    internal void set_LeftBorder(BorderCode value);
    internal BorderCode get_TopBorder();
    internal void set_TopBorder(BorderCode value);
    internal BorderCode get_RightBorder();
    internal void set_RightBorder(BorderCode value);
    internal BorderCode get_BottomBorder();
    internal void set_BottomBorder(BorderCode value);
    internal BorderCode get_LeftBorderNew();
    internal void set_LeftBorderNew(BorderCode value);
    internal BorderCode get_TopBorderNew();
    internal void set_TopBorderNew(BorderCode value);
    internal BorderCode get_RightBorderNew();
    internal void set_RightBorderNew(BorderCode value);
    internal BorderCode get_BottomBorderNew();
    internal void set_BottomBorderNew(BorderCode value);
    internal PageBordersApplyType get_PageBorderApply();
    internal void set_PageBorderApply(PageBordersApplyType value);
    internal bool get_PageBorderIsInFront();
    internal void set_PageBorderIsInFront(bool value);
    internal PageBorderOffsetFrom get_PageBorderOffsetFrom();
    internal void set_PageBorderOffsetFrom(PageBorderOffsetFrom value);
    internal ushort get_ColumnsCount();
    internal void set_ColumnsCount(ushort value);
    internal ushort get_EndnoteNumberFormat();
    internal void set_EndnoteNumberFormat(ushort value);
    internal ushort get_FootnoteNumberFormat();
    internal void set_FootnoteNumberFormat(ushort value);
    internal byte get_RestartIndexForEndnote();
    internal void set_RestartIndexForEndnote(byte value);
    internal byte get_RestartIndexForFootnotes();
    internal void set_RestartIndexForFootnotes(byte value);
    internal byte get_FootnotePosition();
    internal void set_FootnotePosition(byte value);
    internal ushort get_InitialFootnoteNumber();
    internal void set_InitialFootnoteNumber(ushort value);
    internal ushort get_InitialEndnoteNumber();
    internal void set_InitialEndnoteNumber(ushort value);
    internal SectionPropertyException CloneSepx();
    internal bool HasOptions(int options);
    internal SinglePropertyModifierArray GetCopiableSprm();
    internal BorderCode GetBorder(SinglePropertyModifierRecord record);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.SectionPropertyException : BaseWordRecord {
    private SinglePropertyModifierArray m_arrSprms;
    internal SinglePropertyModifierArray Properties { get; internal set; }
    internal int Count { get; }
    internal int Length { get; }
    internal ushort HeaderHeight { get; internal set; }
    internal ushort FooterHeight { get; internal set; }
    internal bool IsTitlePage { get; internal set; }
    internal byte BreakCode { get; internal set; }
    internal int ColumnsCount { get; internal set; }
    internal SectionPropertyException(bool isDefaultSEP);
    internal SectionPropertyException(Stream stream);
    internal SinglePropertyModifierArray get_Properties();
    internal void set_Properties(SinglePropertyModifierArray value);
    internal int get_Count();
    internal virtual int get_Length();
    internal ushort get_HeaderHeight();
    internal void set_HeaderHeight(ushort value);
    internal ushort get_FooterHeight();
    internal void set_FooterHeight(ushort value);
    internal bool get_IsTitlePage();
    internal void set_IsTitlePage(bool value);
    internal byte get_BreakCode();
    internal void set_BreakCode(byte value);
    internal int get_ColumnsCount();
    internal void set_ColumnsCount(int value);
    internal virtual void Close();
    private void Parse(Stream stream);
    internal virtual int Save(Byte[] arrData, int iOffset);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.ShadingDescriptor : object {
    internal static int DEF_SHD_LENGTH;
    internal static int DEF_SHD_NEW_LENGTH;
    private UInt32 m_foreColorExt;
    private UInt32 m_backColorExt;
    private TextureStyle m_pattern;
    internal Color ForeColor { get; internal set; }
    internal Color BackColor { get; internal set; }
    internal TextureStyle Pattern { get; internal set; }
    internal static int StructLength { get; }
    internal ShadingDescriptor(short shd);
    internal Color get_ForeColor();
    internal void set_ForeColor(Color value);
    internal Color get_BackColor();
    internal void set_BackColor(Color value);
    internal TextureStyle get_Pattern();
    internal void set_Pattern(TextureStyle value);
    internal static int get_StructLength();
    internal ShadingDescriptor Clone();
    internal void Read(short shd);
    internal short Save();
    internal void ReadNewShd(Byte[] shd, int offset);
    internal Byte[] SaveNewShd();
}
[DefaultMemberAttribute("Item")]
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.SinglePropertyModifierArray : BaseWordRecord {
    private List`1<SinglePropertyModifierRecord> m_arrModifiers;
    internal List`1<SinglePropertyModifierRecord> Modifiers { get; }
    internal SinglePropertyModifierRecord Item { get; }
    public int Count { get; }
    internal int Length { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal SinglePropertyModifierArray(Byte[] data);
    internal SinglePropertyModifierArray(Byte[] arrData, int iOffset);
    internal SinglePropertyModifierArray(Byte[] arrData, int iOffset, int iCount);
    internal SinglePropertyModifierArray(Stream stream, int iCount);
    internal void RemoveValue(int options);
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal void CheckDuplicateSprms(SinglePropertyModifierRecord sprm);
    private bool IsCorrectSprm(SinglePropertyModifierRecord sprm);
    internal bool IsValidCharacterPropertySprm(SinglePropertyModifierRecord sprm);
    private bool IsValidParagraphPropertySprm(SinglePropertyModifierRecord sprm);
    private bool IsValidTablePropertySprm(SinglePropertyModifierRecord sprm);
    private bool IsValidSectionPropertySprm(SinglePropertyModifierRecord sprm);
    private bool IsValidPicturePropertySprm(SinglePropertyModifierRecord sprm);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal int Save(BinaryWriter writer, Stream stream, int length);
    internal int Save(BinaryWriter writer, Stream stream);
    internal void Clear();
    internal void Add(SinglePropertyModifierRecord modifier);
    internal void SortSprms();
    private bool IsContainTrackChangesSprm(Int32& trackChangeSprmIndex);
    internal void InsertAt(SinglePropertyModifierRecord modifier, int index);
    internal void InsertRangeAt(SinglePropertyModifierArray modifiers, int index);
    internal bool GetBoolean(int options, bool defValue);
    internal byte GetByte(int options, byte defValue);
    internal bool HasSprm(int options);
    internal ushort GetUShort(int options, ushort defValue);
    internal short GetShort(int options, short defValue);
    internal int GetInt(int icoe, int defVal);
    internal UInt32 GetUInt(int icoe, UInt32 defVal);
    internal Byte[] GetByteArray(int options);
    internal void SetBoolValue(int options, bool flag);
    internal void SetByteValue(int options, byte value);
    internal void SetUShortValue(int options, ushort value);
    internal void SetShortValue(int options, short value);
    internal void SetIntValue(int options, int value);
    internal void SetUIntValue(int options, UInt32 value);
    internal void SetByteArrayValue(int options, Byte[] value);
    internal SinglePropertyModifierArray Clone();
    internal void Close();
    internal List`1<SinglePropertyModifierRecord> get_Modifiers();
    internal SinglePropertyModifierRecord get_Item(int option);
    public sealed virtual int get_Count();
    internal virtual int get_Length();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    private SinglePropertyModifierRecord GetSPRM(int options);
    internal SinglePropertyModifierRecord GetSprmByIndex(int sprmIndex);
    internal bool Contain(int option);
    internal SinglePropertyModifierRecord TryGetSprm(int options);
    internal SinglePropertyModifierRecord GetNewSprm(int option, int wallSprmOption);
    private int GetNewPropsStartIndex(int wallSprmOption);
    internal SinglePropertyModifierRecord GetOldSprm(int option, int wallSprmOption);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.SinglePropertyModifierRecord : BaseWordRecord {
    private static int DEF_MASK_UNIQUE_ID;
    private static int DEF_START_UNIQUE_ID;
    private static int DEF_BIT_SPECIAL_HANDLE;
    private static int DEF_MASK_SPRM_TYPE;
    private static int DEF_START_SPRM_TYPE;
    private static int DEF_MASK_OPERAND_SIZE;
    private static int DEF_START_OPERAND_SIZE;
    private static int DEF_MASK_WORD;
    private ushort m_usOptions;
    private int m_iOperandLength;
    private Byte[] m_arrOperand;
    private short m_length;
    internal int UniqueID { get; internal set; }
    internal bool IsSpecialHandling { get; internal set; }
    internal WordSprmType SprmType { get; internal set; }
    internal WordSprmOperandSize OperandSize { get; internal set; }
    internal int OperandLength { get; }
    internal Byte[] Operand { get; internal set; }
    internal bool BoolValue { get; internal set; }
    internal byte ByteValue { get; internal set; }
    internal ushort UshortValue { get; internal set; }
    internal short ShortValue { get; internal set; }
    internal int IntValue { get; internal set; }
    internal UInt32 UIntValue { get; internal set; }
    internal Byte[] ByteArray { get; internal set; }
    internal int TypedOptions { get; internal set; }
    internal ushort Options { get; internal set; }
    internal int Length { get; }
    internal WordSprmOptionType OptionType { get; }
    internal SinglePropertyModifierRecord(int options);
    internal SinglePropertyModifierRecord(Stream stream);
    internal int get_UniqueID();
    internal void set_UniqueID(int value);
    internal bool get_IsSpecialHandling();
    internal void set_IsSpecialHandling(bool value);
    internal WordSprmType get_SprmType();
    internal void set_SprmType(WordSprmType value);
    internal WordSprmOperandSize get_OperandSize();
    internal void set_OperandSize(WordSprmOperandSize value);
    internal int get_OperandLength();
    internal Byte[] get_Operand();
    internal void set_Operand(Byte[] value);
    internal bool get_BoolValue();
    internal void set_BoolValue(bool value);
    internal byte get_ByteValue();
    internal void set_ByteValue(byte value);
    internal ushort get_UshortValue();
    internal void set_UshortValue(ushort value);
    internal short get_ShortValue();
    internal void set_ShortValue(short value);
    internal int get_IntValue();
    internal void set_IntValue(int value);
    internal UInt32 get_UIntValue();
    internal void set_UIntValue(UInt32 value);
    internal Byte[] get_ByteArray();
    internal void set_ByteArray(Byte[] value);
    internal int get_TypedOptions();
    internal void set_TypedOptions(int value);
    internal ushort get_Options();
    internal void set_Options(ushort value);
    internal virtual int get_Length();
    internal WordSprmOptionType get_OptionType();
    internal int Parse(Byte[] arrBuffer, int iOffset);
    internal void Parse(Stream stream);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal int Save(BinaryWriter writer, Stream stream);
    internal SinglePropertyModifierRecord Clone();
    internal static int ConvertToInt(WordSprmOperandSize operandSize);
    internal static void ParseOptions(int options, WordSprmType& type, WordSprmOperandSize& opSize);
    private void DBG_TestParseOptions();
    private short GetSprmLength();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Spacings : object {
    private short m_left;
    private short m_right;
    private short m_top;
    private short m_bottom;
    private byte m_cellNumber;
    internal short Left { get; internal set; }
    internal short Right { get; internal set; }
    internal short Top { get; internal set; }
    internal short Bottom { get; internal set; }
    internal int CellNumber { get; internal set; }
    internal bool IsEmpty { get; }
    internal Spacings(SinglePropertyModifierRecord sprm);
    internal short get_Left();
    internal void set_Left(short value);
    internal short get_Right();
    internal void set_Right(short value);
    internal short get_Top();
    internal void set_Top(short value);
    internal short get_Bottom();
    internal void set_Bottom(short value);
    internal int get_CellNumber();
    internal void set_CellNumber(int value);
    internal bool get_IsEmpty();
    internal void Parse(SinglePropertyModifierRecord sprm);
    internal void Save(SinglePropertyModifierArray modifierArray, int options, int cellNumber);
    internal Spacings Clone();
    private SinglePropertyModifierRecord SaveSingleRecord(byte type, short dist, int options);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.StringTableRecord : BaseWordRecord {
    internal StringTableRecord(Byte[] data);
    internal StringTableRecord(Byte[] arrData, int iOffset);
    internal StringTableRecord(Byte[] arrData, int iOffset, int iCount);
    internal StringTableRecord(Stream stream, int iCount);
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.Asumyi : object {
    private byte m_flagsA;
    private ushort m_wDlgLevel;
    private UInt32 m_lHighestLevel;
    private UInt32 m_lCurrentLevel;
    internal bool Valid { get; internal set; }
    internal bool View { get; internal set; }
    internal byte ViewBy { get; internal set; }
    internal bool UpdateProps { get; internal set; }
    internal ushort WDlgLevel { get; internal set; }
    internal UInt32 LHighestLevel { get; internal set; }
    internal UInt32 LCurrentLevel { get; internal set; }
    internal bool get_Valid();
    internal void set_Valid(bool value);
    internal bool get_View();
    internal void set_View(bool value);
    internal byte get_ViewBy();
    internal void set_ViewBy(byte value);
    internal bool get_UpdateProps();
    internal void set_UpdateProps(bool value);
    internal ushort get_WDlgLevel();
    internal void set_WDlgLevel(ushort value);
    internal UInt32 get_LHighestLevel();
    internal void set_LHighestLevel(UInt32 value);
    internal UInt32 get_LCurrentLevel();
    internal void set_LCurrentLevel(UInt32 value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.BinTableEntry : object {
    public static int RECORD_SIZE;
    private int m_iValue;
    internal int Value { get; internal set; }
    internal int get_Value();
    internal void set_Value(int value);
    internal int Parse(Byte[] arrData, int iOffset);
    internal void Save(Byte[] arrData, int iOffset);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.BookmarkFirstStructure : object {
    private int m_beginCP;
    private short m_endIndex;
    private int m_props;
    internal int BeginPos { get; internal set; }
    internal int Props { get; internal set; }
    internal short EndIndex { get; internal set; }
    internal int get_BeginPos();
    internal void set_BeginPos(int value);
    internal int get_Props();
    internal void set_Props(int value);
    internal short get_EndIndex();
    internal void set_EndIndex(short value);
    internal Byte[] SavePos();
    internal Byte[] SaveProps();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.BorderStructure : object {
    private static int DEF_RECORD_SIZE;
    private byte m_dptLineWidth;
    private byte m_brcType;
    private byte m_color;
    private byte m_props;
    public byte LineWidth { get; public set; }
    public byte BorderType { get; public set; }
    public byte Space { get; public set; }
    public bool Shadow { get; public set; }
    public byte LineColor { get; public set; }
    public bool IsClear { get; }
    internal byte Props { get; internal set; }
    public int Length { get; }
    public BorderStructure(Byte[] arr, int iOffset);
    public byte get_LineWidth();
    public void set_LineWidth(byte value);
    public byte get_BorderType();
    public void set_BorderType(byte value);
    public byte get_Space();
    public void set_Space(byte value);
    public bool get_Shadow();
    public void set_Shadow(bool value);
    public byte get_LineColor();
    public void set_LineColor(byte value);
    public bool get_IsClear();
    internal byte get_Props();
    internal void set_Props(byte value);
    public sealed virtual int get_Length();
    internal BorderStructure Clone();
    public sealed virtual void Parse(Byte[] arr, int iOffset);
    public sealed virtual int Save(Byte[] arr, int iOffset);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.BreakDescriptorStructure : object {
    private static int DEF_RECORD_SIZE;
    internal short ipgd;
    internal short itxbxs;
    internal short dcpDepend;
    internal byte iCol;
    internal byte Options;
    public int Length { get; }
    public sealed virtual int get_Length();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arr, int iOffset);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.BXStructure : object {
    internal static int DEF_RECORD_SIZE;
    private byte m_btOffset;
    private ParagraphHeight m_height;
    internal byte Offset { get; internal set; }
    internal ParagraphHeight Height { get; }
    public int Length { get; }
    internal byte get_Offset();
    internal void set_Offset(byte value);
    internal ParagraphHeight get_Height();
    public sealed virtual int get_Length();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arrData, int iOffset);
    internal void Save(BinaryWriter writer);
}
internal static class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.ByteConverter : object {
    internal static short ReadInt16(Byte[] arrData, Int32& iOffset);
    internal static int ReadInt32(Byte[] arrData, Int32& iOffset);
    internal static long ReadInt64(Byte[] arrData, Int32& iOffset);
    internal static ushort ReadUInt16(Byte[] arrData, Int32& iOffset);
    internal static UInt32 ReadUInt32(Byte[] arrData, Int32& iOffset);
    internal static Byte[] ReadBytes(Byte[] arrData, int length, Int32& iOffset);
    internal static void WriteInt16(Byte[] destination, Int32& iOffset, short val);
    internal static void WriteUInt16(Byte[] destination, Int32& iOffset, ushort val);
    internal static void WriteInt32(Byte[] destination, Int32& iOffset, int val);
    internal static void WriteInt64(Byte[] destination, Int32& iOffset, long val);
    internal static void WriteUInt32(Byte[] destination, Int32& iOffset, UInt32 val);
    internal static void WriteBytes(Byte[] destination, Int32& iOffset, Byte[] bytes);
    internal static void CopyMemory(Byte[] destination, Byte[] source, int length);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.CharacterPropertiesPage : BaseWordRecord {
    private static int DEF_FC_SIZE;
    private UInt32[] m_arrFC;
    private CharacterPropertyException[] m_arrCHPX;
    internal UInt32[] FileCharPos { get; }
    internal CharacterPropertyException[] CharacterProperties { get; }
    internal int RunsCount { get; internal set; }
    internal int Length { get; }
    internal CharacterPropertiesPage(FKPStructure structure);
    internal UInt32[] get_FileCharPos();
    internal CharacterPropertyException[] get_CharacterProperties();
    internal int get_RunsCount();
    internal void set_RunsCount(int value);
    internal virtual int get_Length();
    internal virtual void Close();
    private void Parse(FKPStructure structure);
    private FKPStructure Save();
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal int SaveToStream(BinaryWriter writer, Stream stream);
    internal bool IsChpxRepeats(int CurrentIndex, Int32& ReturnIndex);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.Constants : object {
    public static int FileCharPosSize;
    public static int BytesInWord;
    public static int BytesInInt;
    public static int DiskPageSize;
    public static int BytesInLong;
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.Copts : object {
    private UInt32 m_flagsA;
    private byte m_flagsg;
    private DOPDescriptor m_dopBase;
    internal Copts80 Copts80 { get; }
    internal bool SpLayoutLikeWW8 { get; internal set; }
    internal bool FtnLayoutLikeWW8 { get; internal set; }
    internal bool DontUseHTMLParagraphAutoSpacing { get; internal set; }
    internal bool DontAdjustLineHeightInTable { get; internal set; }
    internal bool ForgetLastTabAlign { get; internal set; }
    internal bool UseAutospaceForFullWidthAlpha { get; internal set; }
    internal bool AlignTablesRowByRow { get; internal set; }
    internal bool LayoutRawTableWidth { get; internal set; }
    internal bool LayoutTableRowsApart { get; internal set; }
    internal bool UseWord97LineBreakingRules { get; internal set; }
    internal bool DontBreakWrappedTables { get; internal set; }
    internal bool DontSnapToGridInCell { get; internal set; }
    internal bool DontAllowFieldEndSelect { get; internal set; }
    internal bool ApplyBreakingRules { get; internal set; }
    internal bool DontWrapTextWithPunct { get; internal set; }
    internal bool DontUseAsianBreakRules { get; internal set; }
    internal bool UseWord2002TableStyleRules { get; internal set; }
    internal bool GrowAutoFit { get; internal set; }
    internal bool UseNormalStyleForList { get; internal set; }
    internal bool DontUseIndentAsNumberingTabStop { get; internal set; }
    internal bool FELineBreak11 { get; internal set; }
    internal bool AllowSpaceOfSameStyleInTable { get; internal set; }
    internal bool WW11IndentRules { get; internal set; }
    internal bool DontAutofitConstrainedTables { get; internal set; }
    internal bool AutofitLikeWW11 { get; internal set; }
    internal bool UnderlineTabInNumList { get; internal set; }
    internal bool HangulWidthLikeWW11 { get; internal set; }
    internal bool SplitPgBreakAndParaMark { get; internal set; }
    internal bool DontVertAlignCellWithSp { get; internal set; }
    internal bool DontBreakConstrainedForcedTables { get; internal set; }
    internal bool DontVertAlignInTxbx { get; internal set; }
    internal bool Word11KerningPairs { get; internal set; }
    internal bool CachedColBalance { get; internal set; }
    internal Copts(DOPDescriptor dopBase);
    internal Copts80 get_Copts80();
    internal bool get_SpLayoutLikeWW8();
    internal void set_SpLayoutLikeWW8(bool value);
    internal bool get_FtnLayoutLikeWW8();
    internal void set_FtnLayoutLikeWW8(bool value);
    internal bool get_DontUseHTMLParagraphAutoSpacing();
    internal void set_DontUseHTMLParagraphAutoSpacing(bool value);
    internal bool get_DontAdjustLineHeightInTable();
    internal void set_DontAdjustLineHeightInTable(bool value);
    internal bool get_ForgetLastTabAlign();
    internal void set_ForgetLastTabAlign(bool value);
    internal bool get_UseAutospaceForFullWidthAlpha();
    internal void set_UseAutospaceForFullWidthAlpha(bool value);
    internal bool get_AlignTablesRowByRow();
    internal void set_AlignTablesRowByRow(bool value);
    internal bool get_LayoutRawTableWidth();
    internal void set_LayoutRawTableWidth(bool value);
    internal bool get_LayoutTableRowsApart();
    internal void set_LayoutTableRowsApart(bool value);
    internal bool get_UseWord97LineBreakingRules();
    internal void set_UseWord97LineBreakingRules(bool value);
    internal bool get_DontBreakWrappedTables();
    internal void set_DontBreakWrappedTables(bool value);
    internal bool get_DontSnapToGridInCell();
    internal void set_DontSnapToGridInCell(bool value);
    internal bool get_DontAllowFieldEndSelect();
    internal void set_DontAllowFieldEndSelect(bool value);
    internal bool get_ApplyBreakingRules();
    internal void set_ApplyBreakingRules(bool value);
    internal bool get_DontWrapTextWithPunct();
    internal void set_DontWrapTextWithPunct(bool value);
    internal bool get_DontUseAsianBreakRules();
    internal void set_DontUseAsianBreakRules(bool value);
    internal bool get_UseWord2002TableStyleRules();
    internal void set_UseWord2002TableStyleRules(bool value);
    internal bool get_GrowAutoFit();
    internal void set_GrowAutoFit(bool value);
    internal bool get_UseNormalStyleForList();
    internal void set_UseNormalStyleForList(bool value);
    internal bool get_DontUseIndentAsNumberingTabStop();
    internal void set_DontUseIndentAsNumberingTabStop(bool value);
    internal bool get_FELineBreak11();
    internal void set_FELineBreak11(bool value);
    internal bool get_AllowSpaceOfSameStyleInTable();
    internal void set_AllowSpaceOfSameStyleInTable(bool value);
    internal bool get_WW11IndentRules();
    internal void set_WW11IndentRules(bool value);
    internal bool get_DontAutofitConstrainedTables();
    internal void set_DontAutofitConstrainedTables(bool value);
    internal bool get_AutofitLikeWW11();
    internal void set_AutofitLikeWW11(bool value);
    internal bool get_UnderlineTabInNumList();
    internal void set_UnderlineTabInNumList(bool value);
    internal bool get_HangulWidthLikeWW11();
    internal void set_HangulWidthLikeWW11(bool value);
    internal bool get_SplitPgBreakAndParaMark();
    internal void set_SplitPgBreakAndParaMark(bool value);
    internal bool get_DontVertAlignCellWithSp();
    internal void set_DontVertAlignCellWithSp(bool value);
    internal bool get_DontBreakConstrainedForcedTables();
    internal void set_DontBreakConstrainedForcedTables(bool value);
    internal bool get_DontVertAlignInTxbx();
    internal void set_DontVertAlignInTxbx(bool value);
    internal bool get_Word11KerningPairs();
    internal void set_Word11KerningPairs(bool value);
    internal bool get_CachedColBalance();
    internal void set_CachedColBalance(bool value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.Copts60 : object {
    private ushort m_flags;
    private DOPDescriptor m_dopBase;
    internal bool NoTabForInd { get; internal set; }
    internal bool NoSpaceRaiseLower { get; internal set; }
    internal bool SuppressSpBfAfterPgBrk { get; internal set; }
    internal bool WrapTrailSpaces { get; internal set; }
    internal bool MapPrintTextColor { get; internal set; }
    internal bool NoColumnBalance { get; internal set; }
    internal bool ConvMailMergeEsc { get; internal set; }
    internal bool SuppressTopSpacing { get; internal set; }
    internal bool OrigWordTableRules { get; internal set; }
    internal bool ShowBreaksInFrames { get; internal set; }
    internal bool SwapBordersFacingPgs { get; internal set; }
    internal bool LeaveBackslashAlone { get; internal set; }
    internal bool ExpShRtn { get; internal set; }
    internal bool DntULTrlSpc { get; internal set; }
    internal bool DntBlnSbDbWid { get; internal set; }
    internal Copts60(DOPDescriptor dopBase);
    internal bool get_NoTabForInd();
    internal void set_NoTabForInd(bool value);
    internal bool get_NoSpaceRaiseLower();
    internal void set_NoSpaceRaiseLower(bool value);
    internal bool get_SuppressSpBfAfterPgBrk();
    internal void set_SuppressSpBfAfterPgBrk(bool value);
    internal bool get_WrapTrailSpaces();
    internal void set_WrapTrailSpaces(bool value);
    internal bool get_MapPrintTextColor();
    internal void set_MapPrintTextColor(bool value);
    internal bool get_NoColumnBalance();
    internal void set_NoColumnBalance(bool value);
    internal bool get_ConvMailMergeEsc();
    internal void set_ConvMailMergeEsc(bool value);
    internal bool get_SuppressTopSpacing();
    internal void set_SuppressTopSpacing(bool value);
    internal bool get_OrigWordTableRules();
    internal void set_OrigWordTableRules(bool value);
    internal bool get_ShowBreaksInFrames();
    internal void set_ShowBreaksInFrames(bool value);
    internal bool get_SwapBordersFacingPgs();
    internal void set_SwapBordersFacingPgs(bool value);
    internal bool get_LeaveBackslashAlone();
    internal void set_LeaveBackslashAlone(bool value);
    internal bool get_ExpShRtn();
    internal void set_ExpShRtn(bool value);
    internal bool get_DntULTrlSpc();
    internal void set_DntULTrlSpc(bool value);
    internal bool get_DntBlnSbDbWid();
    internal void set_DntBlnSbDbWid(bool value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.Copts80 : object {
    private ushort m_flags;
    private DOPDescriptor m_dopBase;
    internal Copts60 Copts60 { get; }
    internal bool SuppressTopSpacingMac5 { get; internal set; }
    internal bool TruncDxaExpand { get; internal set; }
    internal bool PrintBodyBeforeHdr { get; internal set; }
    internal bool NoExtLeading { get; internal set; }
    internal bool DontMakeSpaceForUL { get; internal set; }
    internal bool MWSmallCaps { get; internal set; }
    internal bool F2ptExtLeadingOnly { get; internal set; }
    internal bool TruncFontHeight { get; internal set; }
    internal bool SubOnSize { get; internal set; }
    internal bool LineWrapLikeWord6 { get; internal set; }
    internal bool WW6BorderRules { get; internal set; }
    internal bool ExactOnTop { get; internal set; }
    internal bool ExtraAfter { get; internal set; }
    internal bool WPSpace { get; internal set; }
    internal bool WPJust { get; internal set; }
    internal bool PrintMet { get; internal set; }
    internal Copts80(DOPDescriptor dopBase);
    internal Copts60 get_Copts60();
    internal bool get_SuppressTopSpacingMac5();
    internal void set_SuppressTopSpacingMac5(bool value);
    internal bool get_TruncDxaExpand();
    internal void set_TruncDxaExpand(bool value);
    internal bool get_PrintBodyBeforeHdr();
    internal void set_PrintBodyBeforeHdr(bool value);
    internal bool get_NoExtLeading();
    internal void set_NoExtLeading(bool value);
    internal bool get_DontMakeSpaceForUL();
    internal void set_DontMakeSpaceForUL(bool value);
    internal bool get_MWSmallCaps();
    internal void set_MWSmallCaps(bool value);
    internal bool get_F2ptExtLeadingOnly();
    internal void set_F2ptExtLeadingOnly(bool value);
    internal bool get_TruncFontHeight();
    internal void set_TruncFontHeight(bool value);
    internal bool get_SubOnSize();
    internal void set_SubOnSize(bool value);
    internal bool get_LineWrapLikeWord6();
    internal void set_LineWrapLikeWord6(bool value);
    internal bool get_WW6BorderRules();
    internal void set_WW6BorderRules(bool value);
    internal bool get_ExactOnTop();
    internal void set_ExactOnTop(bool value);
    internal bool get_ExtraAfter();
    internal void set_ExtraAfter(bool value);
    internal bool get_WPSpace();
    internal void set_WPSpace(bool value);
    internal bool get_WPJust();
    internal void set_WPJust(bool value);
    internal bool get_PrintMet();
    internal void set_PrintMet(bool value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.Dogrid : object {
    private ushort m_xaGrid;
    private ushort m_yaGrid;
    private ushort m_dxaGrid;
    private ushort m_dyaGrid;
    private byte m_flagsA;
    private byte m_flagsB;
    internal ushort XaGrid { get; internal set; }
    internal ushort YaGrid { get; internal set; }
    internal ushort DxaGrid { get; internal set; }
    internal ushort DyaGrid { get; internal set; }
    internal byte DyGridDisplay { get; internal set; }
    internal byte DxGridDisplay { get; internal set; }
    internal bool FollowMargins { get; internal set; }
    internal ushort get_XaGrid();
    internal void set_XaGrid(ushort value);
    internal ushort get_YaGrid();
    internal void set_YaGrid(ushort value);
    internal ushort get_DxaGrid();
    internal void set_DxaGrid(ushort value);
    internal ushort get_DyaGrid();
    internal void set_DyaGrid(ushort value);
    internal byte get_DyGridDisplay();
    internal void set_DyGridDisplay(byte value);
    internal byte get_DxGridDisplay();
    internal void set_DxGridDisplay(byte value);
    internal bool get_FollowMargins();
    internal void set_FollowMargins(bool value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DOP2000 : object {
    private byte m_ilvlLastBulletMain;
    private byte m_ilvlLastNumberMain;
    private ushort m_istdClickParaType;
    private ushort m_flagsA;
    private ushort m_flagsJ;
    private Copts m_copts;
    private ushort m_verCompatPre10;
    private ushort m_flagsP;
    private DOPDescriptor m_dopBase;
    internal byte IlvlLastBulletMain { get; internal set; }
    internal byte IlvlLastNumberMain { get; internal set; }
    internal ushort IstdClickParaType { get; internal set; }
    internal bool LADAllDone { get; internal set; }
    internal bool EnvelopeVis { get; internal set; }
    internal bool MaybeTentativeListInDoc { get; internal set; }
    internal bool MaybeFitText { get; internal set; }
    internal bool FCCAllDone { get; internal set; }
    internal bool RelyOnCSS_WebOpt { get; internal set; }
    internal bool RelyOnVML_WebOpt { get; internal set; }
    internal bool AllowPNG_WebOpt { get; internal set; }
    internal byte ScreenSize_WebOpt { get; internal set; }
    internal bool OrganizeInFolder_WebOpt { get; internal set; }
    internal bool UseLongFileNames_WebOpt { get; internal set; }
    internal ushort PixelsPerInch_WebOpt { get; internal set; }
    internal bool WebOptionsInit { get; internal set; }
    internal bool MaybeFEL { get; internal set; }
    internal bool CharLineUnits { get; internal set; }
    internal Copts Copts { get; }
    internal ushort VerCompatPre10 { get; internal set; }
    internal bool NoMargPgvwSaved { get; internal set; }
    internal bool BulletProofed { get; internal set; }
    internal bool SaveUim { get; internal set; }
    internal bool FilterPrivacy { get; internal set; }
    internal bool SeenRepairs { get; internal set; }
    internal bool HasXML { get; internal set; }
    internal bool ValidateXML { get; internal set; }
    internal bool SaveInvalidXML { get; internal set; }
    internal bool ShowXMLErrors { get; internal set; }
    internal bool AlwaysMergeEmptyNamespace { get; internal set; }
    internal DOP2000(DOPDescriptor dopBase);
    internal byte get_IlvlLastBulletMain();
    internal void set_IlvlLastBulletMain(byte value);
    internal byte get_IlvlLastNumberMain();
    internal void set_IlvlLastNumberMain(byte value);
    internal ushort get_IstdClickParaType();
    internal void set_IstdClickParaType(ushort value);
    internal bool get_LADAllDone();
    internal void set_LADAllDone(bool value);
    internal bool get_EnvelopeVis();
    internal void set_EnvelopeVis(bool value);
    internal bool get_MaybeTentativeListInDoc();
    internal void set_MaybeTentativeListInDoc(bool value);
    internal bool get_MaybeFitText();
    internal void set_MaybeFitText(bool value);
    internal bool get_FCCAllDone();
    internal void set_FCCAllDone(bool value);
    internal bool get_RelyOnCSS_WebOpt();
    internal void set_RelyOnCSS_WebOpt(bool value);
    internal bool get_RelyOnVML_WebOpt();
    internal void set_RelyOnVML_WebOpt(bool value);
    internal bool get_AllowPNG_WebOpt();
    internal void set_AllowPNG_WebOpt(bool value);
    internal byte get_ScreenSize_WebOpt();
    internal void set_ScreenSize_WebOpt(byte value);
    internal bool get_OrganizeInFolder_WebOpt();
    internal void set_OrganizeInFolder_WebOpt(bool value);
    internal bool get_UseLongFileNames_WebOpt();
    internal void set_UseLongFileNames_WebOpt(bool value);
    internal ushort get_PixelsPerInch_WebOpt();
    internal void set_PixelsPerInch_WebOpt(ushort value);
    internal bool get_WebOptionsInit();
    internal void set_WebOptionsInit(bool value);
    internal bool get_MaybeFEL();
    internal void set_MaybeFEL(bool value);
    internal bool get_CharLineUnits();
    internal void set_CharLineUnits(bool value);
    internal Copts get_Copts();
    internal ushort get_VerCompatPre10();
    internal void set_VerCompatPre10(ushort value);
    internal bool get_NoMargPgvwSaved();
    internal void set_NoMargPgvwSaved(bool value);
    internal bool get_BulletProofed();
    internal void set_BulletProofed(bool value);
    internal bool get_SaveUim();
    internal void set_SaveUim(bool value);
    internal bool get_FilterPrivacy();
    internal void set_FilterPrivacy(bool value);
    internal bool get_SeenRepairs();
    internal void set_SeenRepairs(bool value);
    internal bool get_HasXML();
    internal void set_HasXML(bool value);
    internal bool get_ValidateXML();
    internal void set_ValidateXML(bool value);
    internal bool get_SaveInvalidXML();
    internal void set_SaveInvalidXML(bool value);
    internal bool get_ShowXMLErrors();
    internal void set_ShowXMLErrors(bool value);
    internal bool get_AlwaysMergeEmptyNamespace();
    internal void set_AlwaysMergeEmptyNamespace(bool value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DOP2002 : object {
    private ushort m_flagsA;
    private ushort m_istdTableDflt;
    private ushort m_verCompat;
    private ushort m_grfFmtFilter;
    private ushort m_iFolioPages;
    private int m_cpgText;
    private UInt32 m_cpMinRMText;
    private UInt32 m_cpMinRMFtn;
    private UInt32 m_cpMinRMHdd;
    private UInt32 m_cpMinRMAtn;
    private UInt32 m_cpMinRMEdn;
    private UInt32 m_cpMinRmTxbx;
    private UInt32 m_cpMinRmHdrTxbx;
    private UInt32 m_rsidRoot;
    private DOPDescriptor m_dopBase;
    internal bool DoNotEmbedSystemFont { get; internal set; }
    internal bool WordCompat { get; internal set; }
    internal bool LiveRecover { get; internal set; }
    internal bool EmbedFactoids { get; internal set; }
    internal bool FactoidXML { get; internal set; }
    internal bool FactoidAllDone { get; internal set; }
    internal bool FolioPrint { get; internal set; }
    internal bool ReverseFolio { get; internal set; }
    internal byte TextLineEnding { get; internal set; }
    internal bool HideFcc { get; internal set; }
    internal bool AcetateShowMarkup { get; internal set; }
    internal bool AcetateShowAtn { get; internal set; }
    internal bool AcetateShowInsDel { get; internal set; }
    internal bool AcetateShowProps { get; internal set; }
    internal ushort IstdTableDflt { get; internal set; }
    internal ushort VerCompat { get; internal set; }
    internal ushort GrfFmtFilter { get; internal set; }
    internal ushort IFolioPages { get; internal set; }
    internal int CpgText { get; internal set; }
    internal UInt32 CpMinRMText { get; internal set; }
    internal UInt32 CpMinRMFtn { get; internal set; }
    internal UInt32 CpMinRMHdd { get; internal set; }
    internal UInt32 CpMinRMAtn { get; internal set; }
    internal UInt32 CpMinRMEdn { get; internal set; }
    internal UInt32 CpMinRmTxbx { get; internal set; }
    internal UInt32 CpMinRmHdrTxbx { get; internal set; }
    internal DOP2002(DOPDescriptor dopBase);
    internal bool get_DoNotEmbedSystemFont();
    internal void set_DoNotEmbedSystemFont(bool value);
    internal bool get_WordCompat();
    internal void set_WordCompat(bool value);
    internal bool get_LiveRecover();
    internal void set_LiveRecover(bool value);
    internal bool get_EmbedFactoids();
    internal void set_EmbedFactoids(bool value);
    internal bool get_FactoidXML();
    internal void set_FactoidXML(bool value);
    internal bool get_FactoidAllDone();
    internal void set_FactoidAllDone(bool value);
    internal bool get_FolioPrint();
    internal void set_FolioPrint(bool value);
    internal bool get_ReverseFolio();
    internal void set_ReverseFolio(bool value);
    internal byte get_TextLineEnding();
    internal void set_TextLineEnding(byte value);
    internal bool get_HideFcc();
    internal void set_HideFcc(bool value);
    internal bool get_AcetateShowMarkup();
    internal void set_AcetateShowMarkup(bool value);
    internal bool get_AcetateShowAtn();
    internal void set_AcetateShowAtn(bool value);
    internal bool get_AcetateShowInsDel();
    internal void set_AcetateShowInsDel(bool value);
    internal bool get_AcetateShowProps();
    internal void set_AcetateShowProps(bool value);
    internal ushort get_IstdTableDflt();
    internal void set_IstdTableDflt(ushort value);
    internal ushort get_VerCompat();
    internal void set_VerCompat(ushort value);
    internal ushort get_GrfFmtFilter();
    internal void set_GrfFmtFilter(ushort value);
    internal ushort get_IFolioPages();
    internal void set_IFolioPages(ushort value);
    internal int get_CpgText();
    internal void set_CpgText(int value);
    internal UInt32 get_CpMinRMText();
    internal void set_CpMinRMText(UInt32 value);
    internal UInt32 get_CpMinRMFtn();
    internal void set_CpMinRMFtn(UInt32 value);
    internal UInt32 get_CpMinRMHdd();
    internal void set_CpMinRMHdd(UInt32 value);
    internal UInt32 get_CpMinRMAtn();
    internal void set_CpMinRMAtn(UInt32 value);
    internal UInt32 get_CpMinRMEdn();
    internal void set_CpMinRMEdn(UInt32 value);
    internal UInt32 get_CpMinRmTxbx();
    internal void set_CpMinRmTxbx(UInt32 value);
    internal UInt32 get_CpMinRmHdrTxbx();
    internal void set_CpMinRmHdrTxbx(UInt32 value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DOP2003 : object {
    private ushort m_flagsA;
    private byte m_flagsO;
    private UInt32 m_dxaPageLock;
    private UInt32 m_dyaPageLock;
    private UInt32 m_pctFontLock;
    private byte m_grfitbid;
    private ushort m_ilfoMacAtCleanup;
    private DOPDescriptor m_dopBase;
    internal bool TreatLockAtnAsReadOnly { get; internal set; }
    internal bool StyleLock { get; internal set; }
    internal bool AutoFmtOverride { get; internal set; }
    internal bool RemoveWordML { get; internal set; }
    internal bool ApplyCustomXForm { get; internal set; }
    internal bool StyleLockEnforced { get; internal set; }
    internal bool FakeLockAtn { get; internal set; }
    internal bool IgnoreMixedContent { get; internal set; }
    internal bool ShowPlaceholderText { get; internal set; }
    internal bool Word97Doc { get; internal set; }
    internal bool StyleLockTheme { get; internal set; }
    internal bool StyleLockQFSet { get; internal set; }
    internal bool ReadingModeInkLockDown { get; internal set; }
    internal bool AcetateShowInkAtn { get; internal set; }
    internal bool FilterDttm { get; internal set; }
    internal bool EnforceDocProt { get; internal set; }
    internal byte DocProtCur { get; internal set; }
    internal bool DispBkSpSaved { get; internal set; }
    internal UInt32 DxaPageLock { get; internal set; }
    internal UInt32 DyaPageLock { get; internal set; }
    internal UInt32 PctFontLock { get; internal set; }
    internal byte Grfitbid { get; internal set; }
    internal ushort IlfoMacAtCleanup { get; internal set; }
    internal DOP2003(DOPDescriptor dopBase);
    internal bool get_TreatLockAtnAsReadOnly();
    internal void set_TreatLockAtnAsReadOnly(bool value);
    internal bool get_StyleLock();
    internal void set_StyleLock(bool value);
    internal bool get_AutoFmtOverride();
    internal void set_AutoFmtOverride(bool value);
    internal bool get_RemoveWordML();
    internal void set_RemoveWordML(bool value);
    internal bool get_ApplyCustomXForm();
    internal void set_ApplyCustomXForm(bool value);
    internal bool get_StyleLockEnforced();
    internal void set_StyleLockEnforced(bool value);
    internal bool get_FakeLockAtn();
    internal void set_FakeLockAtn(bool value);
    internal bool get_IgnoreMixedContent();
    internal void set_IgnoreMixedContent(bool value);
    internal bool get_ShowPlaceholderText();
    internal void set_ShowPlaceholderText(bool value);
    internal bool get_Word97Doc();
    internal void set_Word97Doc(bool value);
    internal bool get_StyleLockTheme();
    internal void set_StyleLockTheme(bool value);
    internal bool get_StyleLockQFSet();
    internal void set_StyleLockQFSet(bool value);
    internal bool get_ReadingModeInkLockDown();
    internal void set_ReadingModeInkLockDown(bool value);
    internal bool get_AcetateShowInkAtn();
    internal void set_AcetateShowInkAtn(bool value);
    internal bool get_FilterDttm();
    internal void set_FilterDttm(bool value);
    internal bool get_EnforceDocProt();
    internal void set_EnforceDocProt(bool value);
    internal byte get_DocProtCur();
    internal void set_DocProtCur(byte value);
    internal bool get_DispBkSpSaved();
    internal void set_DispBkSpSaved(bool value);
    internal UInt32 get_DxaPageLock();
    internal void set_DxaPageLock(UInt32 value);
    internal UInt32 get_DyaPageLock();
    internal void set_DyaPageLock(UInt32 value);
    internal UInt32 get_PctFontLock();
    internal void set_PctFontLock(UInt32 value);
    internal byte get_Grfitbid();
    internal void set_Grfitbid(byte value);
    internal ushort get_IlfoMacAtCleanup();
    internal void set_IlfoMacAtCleanup(ushort value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DOP2007 : object {
    private ushort m_flagsA;
    private DopMth m_dopMath;
    private DOPDescriptor m_dopBase;
    internal bool RMTrackFormatting { get; internal set; }
    internal bool RMTrackMoves { get; internal set; }
    internal byte Ssm { get; internal set; }
    internal bool ReadingModeInkLockDownActualPage { get; internal set; }
    internal bool AutoCompressPictures { get; internal set; }
    internal DopMth DopMath { get; }
    internal DOP2007(DOPDescriptor dopBase);
    internal bool get_RMTrackFormatting();
    internal void set_RMTrackFormatting(bool value);
    internal bool get_RMTrackMoves();
    internal void set_RMTrackMoves(bool value);
    internal byte get_Ssm();
    internal void set_Ssm(byte value);
    internal bool get_ReadingModeInkLockDownActualPage();
    internal void set_ReadingModeInkLockDownActualPage(bool value);
    internal bool get_AutoCompressPictures();
    internal void set_AutoCompressPictures(bool value);
    internal DopMth get_DopMath();
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DOP95 : object {
    private Copts80 m_copts80;
    private DOPDescriptor m_dopBase;
    internal Copts80 Copts80 { get; }
    internal DOP95(DOPDescriptor dopBase);
    internal Copts80 get_Copts80();
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DOP97 : object {
    private ushort m_adt;
    private DopTypography m_doptypography;
    private Dogrid m_dogrid;
    private ushort m_flagsA;
    private Asumyi m_asumyi;
    private UInt32 m_cChWS;
    private UInt32 m_cChWSWithSubdocs;
    private UInt32 m_grfDocEvents;
    private UInt32 m_flagsM;
    private UInt32 m_cpMaxListCacheMainDoc;
    private ushort m_ilfoLastBulletMain;
    private ushort m_ilfoLastNumberMain;
    private UInt32 m_cDBC;
    private UInt32 m_cDBCWithSubdocs;
    private ushort m_nfcFtnRef;
    private ushort m_nfcEdnRef;
    private ushort m_hpsZoomFontPag;
    private ushort m_dywDispPag;
    private DOPDescriptor m_dopBase;
    internal ushort Adt { get; internal set; }
    internal DopTypography DopTypography { get; }
    internal Dogrid Dogrid { get; }
    internal byte LvlDop { get; internal set; }
    internal bool GramAllDone { get; internal set; }
    internal bool GramAllClean { get; internal set; }
    internal bool SubsetFonts { get; internal set; }
    internal bool HtmlDoc { get; internal set; }
    internal bool DiskLvcInvalid { get; internal set; }
    internal bool SnapBorder { get; internal set; }
    internal bool IncludeHeader { get; internal set; }
    internal bool IncludeFooter { get; internal set; }
    internal Asumyi Asumyi { get; }
    internal UInt32 CChWS { get; internal set; }
    internal UInt32 CChWSWithSubdocs { get; internal set; }
    internal UInt32 GrfDocEvents { get; internal set; }
    internal bool VirusPrompted { get; internal set; }
    internal bool VirusLoadSafe { get; internal set; }
    internal UInt32 KeyVirusSession30 { get; internal set; }
    internal UInt32 CpMaxListCacheMainDoc { get; internal set; }
    internal ushort IlfoLastBulletMain { get; internal set; }
    internal ushort IlfoLastNumberMain { get; internal set; }
    internal UInt32 CDBC { get; internal set; }
    internal UInt32 CDBCWithSubdocs { get; internal set; }
    internal ushort NfcFtnRef { get; internal set; }
    internal ushort NfcEdnRef { get; internal set; }
    internal ushort HpsZoomFontPag { get; internal set; }
    internal ushort DywDispPag { get; internal set; }
    internal DOP97(DOPDescriptor dopBase);
    internal ushort get_Adt();
    internal void set_Adt(ushort value);
    internal DopTypography get_DopTypography();
    internal Dogrid get_Dogrid();
    internal byte get_LvlDop();
    internal void set_LvlDop(byte value);
    internal bool get_GramAllDone();
    internal void set_GramAllDone(bool value);
    internal bool get_GramAllClean();
    internal void set_GramAllClean(bool value);
    internal bool get_SubsetFonts();
    internal void set_SubsetFonts(bool value);
    internal bool get_HtmlDoc();
    internal void set_HtmlDoc(bool value);
    internal bool get_DiskLvcInvalid();
    internal void set_DiskLvcInvalid(bool value);
    internal bool get_SnapBorder();
    internal void set_SnapBorder(bool value);
    internal bool get_IncludeHeader();
    internal void set_IncludeHeader(bool value);
    internal bool get_IncludeFooter();
    internal void set_IncludeFooter(bool value);
    internal Asumyi get_Asumyi();
    internal UInt32 get_CChWS();
    internal void set_CChWS(UInt32 value);
    internal UInt32 get_CChWSWithSubdocs();
    internal void set_CChWSWithSubdocs(UInt32 value);
    internal UInt32 get_GrfDocEvents();
    internal void set_GrfDocEvents(UInt32 value);
    internal bool get_VirusPrompted();
    internal void set_VirusPrompted(bool value);
    internal bool get_VirusLoadSafe();
    internal void set_VirusLoadSafe(bool value);
    internal UInt32 get_KeyVirusSession30();
    internal void set_KeyVirusSession30(UInt32 value);
    internal UInt32 get_CpMaxListCacheMainDoc();
    internal void set_CpMaxListCacheMainDoc(UInt32 value);
    internal ushort get_IlfoLastBulletMain();
    internal void set_IlfoLastBulletMain(ushort value);
    internal ushort get_IlfoLastNumberMain();
    internal void set_IlfoLastNumberMain(ushort value);
    internal UInt32 get_CDBC();
    internal void set_CDBC(UInt32 value);
    internal UInt32 get_CDBCWithSubdocs();
    internal void set_CDBCWithSubdocs(UInt32 value);
    internal ushort get_NfcFtnRef();
    internal void set_NfcFtnRef(ushort value);
    internal ushort get_NfcEdnRef();
    internal void set_NfcEdnRef(ushort value);
    internal ushort get_HpsZoomFontPag();
    internal void set_HpsZoomFontPag(ushort value);
    internal ushort get_DywDispPag();
    internal void set_DywDispPag(ushort value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DOPDescriptor : BaseWordRecord {
    private static int DEF_PROTECTION_KEY;
    internal static int DEF_MAX_PASSWORDLEN;
    private static ushort DEF_PASSWORD_CONST;
    private byte m_nfcEdnRef;
    private byte m_nfcFtnRef;
    private byte m_bepc;
    private int m_nEdn;
    private byte m_rncEdn;
    private int m_nFtn;
    private byte m_rncFtn;
    private bool m_bFacingPage;
    private bool m_bWidowControl;
    private bool m_bPMHMainDoc;
    private int m_grfSuppression;
    private byte m_fpc;
    private int m_unused0_7;
    private int m_grpfIhdt;
    private UInt32 m_flagA;
    private Copts60 m_copts60;
    private ushort m_dxaTabs;
    private int m_wSpare;
    private int m_dxaHotZ;
    private int m_cConsecHypLim;
    private int m_wSpare2;
    private UInt32 m_dttmCreated;
    private UInt32 m_dttmRevised;
    private UInt32 m_dttmLastPrint;
    private int m_nRevision;
    private int m_tmEdited;
    private int m_cWords;
    private int m_cCh;
    private int m_cPg;
    private int m_cParas;
    private ushort m_End;
    private ushort m_epc;
    private int m_cLines;
    private int m_wordsFtnEnd;
    private int m_cChFtnEdn;
    private int m_cPgFtnEdn;
    private int m_cParasFrnEdn;
    private int m_cLinesFtnEdn;
    private UInt32 m_lKeyProtDoc;
    private ushort m_wvkSaved;
    private bool m_shadeFormData;
    internal Byte[] m_dopLeftData;
    private DateTime m_created;
    private DateTime m_revised;
    private DateTime m_lastPrinted;
    private TimeSpan m_editTime;
    private DOP95 m_dop95;
    private DOP97 m_dop97;
    private DOP2000 m_dop2000;
    private DOP2002 m_dop2002;
    private DOP2003 m_dop2003;
    private DOP2007 m_dop2007;
    internal DOP95 Dop95 { get; }
    internal DOP97 Dop97 { get; }
    internal DOP2000 Dop2000 { get; }
    internal DOP2002 Dop2002 { get; }
    internal DOP2003 Dop2003 { get; }
    internal DOP2007 Dop2007 { get; }
    internal Copts60 Copts60 { get; }
    internal byte EndnoteNumberFormat { get; internal set; }
    internal byte FootnoteNumberFormat { get; internal set; }
    internal byte EndnotePosition { get; internal set; }
    internal int InitialEndnoteNumber { get; internal set; }
    internal byte RestartIndexForEndnote { get; internal set; }
    internal int InitialFootnoteNumber { get; internal set; }
    internal byte RestartIndexForFootnotes { get; internal set; }
    internal byte FootnotePosition { get; internal set; }
    internal ProtectionType ProtectionType { get; internal set; }
    internal UInt32 ProtectionKey { get; }
    internal bool OddAndEvenPagesHeaderFooter { get; internal set; }
    internal byte ViewType { get; internal set; }
    internal ushort ZoomPercent { get; internal set; }
    internal byte ZoomType { get; internal set; }
    internal ushort DefaultTabWidth { get; internal set; }
    internal int DxaHotZ { get; internal set; }
    internal int ConsecHypLim { get; internal set; }
    internal bool SpellAllDone { get; internal set; }
    internal bool SpellAllClean { get; internal set; }
    internal bool SpellHideErrors { get; internal set; }
    internal bool GramHideErrors { get; internal set; }
    internal bool LabelDoc { get; internal set; }
    internal bool HyphCapitals { get; internal set; }
    internal bool AutoHyphen { get; internal set; }
    internal bool FormNoFields { get; internal set; }
    internal bool LinkStyles { get; internal set; }
    internal bool RevMarking { get; internal set; }
    internal bool ExactCWords { get; internal set; }
    internal bool PagHidden { get; internal set; }
    internal bool PagResults { get; internal set; }
    internal bool LockAtn { get; internal set; }
    internal bool MirrorMargins { get; internal set; }
    internal bool Word97Compat { get; internal set; }
    internal bool ProtEnabled { get; internal set; }
    internal bool DispFormFldSel { get; internal set; }
    internal bool RMView { get; internal set; }
    internal bool RMPrint { get; internal set; }
    internal bool LockVbaProj { get; internal set; }
    internal bool LockRev { get; internal set; }
    internal bool EmbedFonts { get; internal set; }
    internal Byte[] DopInternalData { get; internal set; }
    internal bool FormFieldShading { get; internal set; }
    internal bool GutterAtTop { get; internal set; }
    internal DOPDescriptor(Stream stream, int dopStart, int dopLength, bool isTemplate);
    internal DOP95 get_Dop95();
    internal DOP97 get_Dop97();
    internal DOP2000 get_Dop2000();
    internal DOP2002 get_Dop2002();
    internal DOP2003 get_Dop2003();
    internal DOP2007 get_Dop2007();
    internal Copts60 get_Copts60();
    internal byte get_EndnoteNumberFormat();
    internal void set_EndnoteNumberFormat(byte value);
    internal byte get_FootnoteNumberFormat();
    internal void set_FootnoteNumberFormat(byte value);
    internal byte get_EndnotePosition();
    internal void set_EndnotePosition(byte value);
    internal int get_InitialEndnoteNumber();
    internal void set_InitialEndnoteNumber(int value);
    internal byte get_RestartIndexForEndnote();
    internal void set_RestartIndexForEndnote(byte value);
    internal int get_InitialFootnoteNumber();
    internal void set_InitialFootnoteNumber(int value);
    internal byte get_RestartIndexForFootnotes();
    internal void set_RestartIndexForFootnotes(byte value);
    internal byte get_FootnotePosition();
    internal void set_FootnotePosition(byte value);
    internal ProtectionType get_ProtectionType();
    internal void set_ProtectionType(ProtectionType value);
    internal UInt32 get_ProtectionKey();
    internal bool get_OddAndEvenPagesHeaderFooter();
    internal void set_OddAndEvenPagesHeaderFooter(bool value);
    internal byte get_ViewType();
    internal void set_ViewType(byte value);
    internal ushort get_ZoomPercent();
    internal void set_ZoomPercent(ushort value);
    internal byte get_ZoomType();
    internal void set_ZoomType(byte value);
    internal ushort get_DefaultTabWidth();
    internal void set_DefaultTabWidth(ushort value);
    internal int get_DxaHotZ();
    internal void set_DxaHotZ(int value);
    internal int get_ConsecHypLim();
    internal void set_ConsecHypLim(int value);
    internal bool get_SpellAllDone();
    internal void set_SpellAllDone(bool value);
    internal bool get_SpellAllClean();
    internal void set_SpellAllClean(bool value);
    internal bool get_SpellHideErrors();
    internal void set_SpellHideErrors(bool value);
    internal bool get_GramHideErrors();
    internal void set_GramHideErrors(bool value);
    internal bool get_LabelDoc();
    internal void set_LabelDoc(bool value);
    internal bool get_HyphCapitals();
    internal void set_HyphCapitals(bool value);
    internal bool get_AutoHyphen();
    internal void set_AutoHyphen(bool value);
    internal bool get_FormNoFields();
    internal void set_FormNoFields(bool value);
    internal bool get_LinkStyles();
    internal void set_LinkStyles(bool value);
    internal bool get_RevMarking();
    internal void set_RevMarking(bool value);
    internal bool get_ExactCWords();
    internal void set_ExactCWords(bool value);
    internal bool get_PagHidden();
    internal void set_PagHidden(bool value);
    internal bool get_PagResults();
    internal void set_PagResults(bool value);
    internal bool get_LockAtn();
    internal void set_LockAtn(bool value);
    internal bool get_MirrorMargins();
    internal void set_MirrorMargins(bool value);
    internal bool get_Word97Compat();
    internal void set_Word97Compat(bool value);
    internal bool get_ProtEnabled();
    internal void set_ProtEnabled(bool value);
    internal bool get_DispFormFldSel();
    internal void set_DispFormFldSel(bool value);
    internal bool get_RMView();
    internal void set_RMView(bool value);
    internal bool get_RMPrint();
    internal void set_RMPrint(bool value);
    internal bool get_LockVbaProj();
    internal void set_LockVbaProj(bool value);
    internal bool get_LockRev();
    internal void set_LockRev(bool value);
    internal bool get_EmbedFonts();
    internal void set_EmbedFonts(bool value);
    internal Byte[] get_DopInternalData();
    internal void set_DopInternalData(Byte[] value);
    internal bool get_FormFieldShading();
    internal void set_FormFieldShading(bool value);
    internal bool get_GutterAtTop();
    internal void set_GutterAtTop(bool value);
    internal void UpdateDateTime(BuiltinDocumentProperties builtInDocumnetProperties);
    internal UInt32 Write(Stream stream);
    internal DOPDescriptor Clone();
    internal void SetProtection(ProtectionType type, string password);
    private DateTime ParseDateTime(UInt32 dateTime);
    private UInt32 SetDateTime(DateTime dt);
    private UInt32 ConvertDayOfWeek(DayOfWeek dow);
    [CLSCompliantAttribute("False")]
internal static ushort GetPasswordHash(string password);
    private static Boolean[] GetCharBits15(char charToConvert);
    private static ushort GetUInt16FromBits(Boolean[] bits);
    private static Boolean[] RotateBits(Boolean[] bits, int count);
    internal static int Round(int value, int degree);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DopMth : object {
    private ushort m_flagsA;
    private ushort m_ftcMath;
    private UInt32 m_dxaLeftMargin;
    private UInt32 m_dxaRightMargin;
    private UInt32 m_dxaIndentWrapped;
    internal byte Mthbrk { get; internal set; }
    internal byte MthbrkSub { get; internal set; }
    internal byte Mthbpjc { get; internal set; }
    internal bool MathSmallFrac { get; internal set; }
    internal bool MathIntLimUndOvr { get; internal set; }
    internal bool MathNaryLimUndOvr { get; internal set; }
    internal bool MathWrapAlignLeft { get; internal set; }
    internal bool MathUseDispDefaults { get; internal set; }
    internal ushort FtcMath { get; internal set; }
    internal UInt32 DxaLeftMargin { get; internal set; }
    internal UInt32 DxaRightMargin { get; internal set; }
    internal UInt32 DxaIndentWrapped { get; internal set; }
    internal byte get_Mthbrk();
    internal void set_Mthbrk(byte value);
    internal byte get_MthbrkSub();
    internal void set_MthbrkSub(byte value);
    internal byte get_Mthbpjc();
    internal void set_Mthbpjc(byte value);
    internal bool get_MathSmallFrac();
    internal void set_MathSmallFrac(bool value);
    internal bool get_MathIntLimUndOvr();
    internal void set_MathIntLimUndOvr(bool value);
    internal bool get_MathNaryLimUndOvr();
    internal void set_MathNaryLimUndOvr(bool value);
    internal bool get_MathWrapAlignLeft();
    internal void set_MathWrapAlignLeft(bool value);
    internal bool get_MathUseDispDefaults();
    internal void set_MathUseDispDefaults(bool value);
    internal ushort get_FtcMath();
    internal void set_FtcMath(ushort value);
    internal UInt32 get_DxaLeftMargin();
    internal void set_DxaLeftMargin(UInt32 value);
    internal UInt32 get_DxaRightMargin();
    internal void set_DxaRightMargin(UInt32 value);
    internal UInt32 get_DxaIndentWrapped();
    internal void set_DxaIndentWrapped(UInt32 value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.DopTypography : object {
    private ushort m_flagsA;
    private ushort m_cchFollowingPunct;
    private ushort m_cchLeadingPunct;
    private Byte[] m_rgxchFPunct;
    private Byte[] m_rgxchLPunct;
    internal bool KerningPunct { get; internal set; }
    internal byte Justification { get; internal set; }
    internal byte LevelOfKinsoku { get; internal set; }
    internal bool Print2on1 { get; internal set; }
    internal byte CustomKsu { get; internal set; }
    internal bool JapaneseUseLevel2 { get; internal set; }
    internal ushort CchFollowingPunct { get; internal set; }
    internal ushort CchLeadingPunct { get; internal set; }
    internal Byte[] RgxchFPunct { get; internal set; }
    internal Byte[] RgxchLPunct { get; internal set; }
    internal bool get_KerningPunct();
    internal void set_KerningPunct(bool value);
    internal byte get_Justification();
    internal void set_Justification(byte value);
    internal byte get_LevelOfKinsoku();
    internal void set_LevelOfKinsoku(byte value);
    internal bool get_Print2on1();
    internal void set_Print2on1(bool value);
    internal byte get_CustomKsu();
    internal void set_CustomKsu(byte value);
    internal bool get_JapaneseUseLevel2();
    internal void set_JapaneseUseLevel2(bool value);
    internal ushort get_CchFollowingPunct();
    internal void set_CchFollowingPunct(ushort value);
    internal ushort get_CchLeadingPunct();
    internal void set_CchLeadingPunct(ushort value);
    internal Byte[] get_RgxchFPunct();
    internal void set_RgxchFPunct(Byte[] value);
    internal Byte[] get_RgxchLPunct();
    internal void set_RgxchLPunct(Byte[] value);
    internal void Parse(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.FFNBaseStructure : object {
    private static int DEF_RECORD_LENGTH;
    private static int DEF_PANOSE_SIZE;
    private static int DEF_FONTSIGNATURE_SIZE;
    private byte m_btTotalLength;
    private byte m_btOptions;
    private short m_wWeight;
    private byte m_btCharacterSetId;
    private byte m_btAlternateFontIndex;
    private Byte[] m_PANOSE;
    internal Byte[] m_FONTSIGNATURE;
    internal byte TotalLengthM1 { get; internal set; }
    internal byte Options { get; internal set; }
    internal short Weight { get; internal set; }
    internal byte CharacterSetId { get; internal set; }
    internal byte AlternateFontIndex { get; internal set; }
    public int Length { get; }
    internal byte get_TotalLengthM1();
    internal void set_TotalLengthM1(byte value);
    internal byte get_Options();
    internal void set_Options(byte value);
    internal short get_Weight();
    internal void set_Weight(short value);
    internal byte get_CharacterSetId();
    internal void set_CharacterSetId(byte value);
    internal byte get_AlternateFontIndex();
    internal void set_AlternateFontIndex(byte value);
    public sealed virtual int get_Length();
    internal void Close();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arrData, int iOffset);
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.FKPStructure : object {
    internal static int DEF_RECORD_SIZE;
    private Byte[] m_arrPageData;
    private byte m_btLength;
    internal Byte[] PageData { get; }
    internal byte Count { get; internal set; }
    public int Length { get; }
    internal FKPStructure(Stream stream);
    internal Byte[] get_PageData();
    internal byte get_Count();
    internal void set_Count(byte value);
    public sealed virtual int get_Length();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arrData, int iOffset);
    internal int Save(Stream stream);
    internal void Close();
}
internal interface Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.IDataStructure {
    public int Length { get; }
    public abstract virtual void Parse(Byte[] arrData, int iOffset);
    public abstract virtual int Save(Byte[] arrData, int iOffset);
    public abstract virtual int get_Length();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.ParagraphHeightStructure : object {
    private static int DEF_RECORD_SIZE;
    internal UInt32 Options;
    internal int Width;
    internal int Height;
    public int Length { get; }
    public sealed virtual int get_Length();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arrData, int iOffset);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.PieceDescriptorStructure : object {
    private static int DEF_PRM_OFFSET;
    private static int DEF_RECORD_SIZE;
    private ushort m_usOptions;
    private UInt32 m_fc;
    private PropertyModifierStructure m_prm;
    internal ushort Options { get; internal set; }
    internal UInt32 FileOffset { get; internal set; }
    internal PropertyModifierStructure PropertyModifier { get; internal set; }
    public int Length { get; }
    internal ushort get_Options();
    internal void set_Options(ushort value);
    internal UInt32 get_FileOffset();
    internal void set_FileOffset(UInt32 value);
    internal PropertyModifierStructure get_PropertyModifier();
    internal void set_PropertyModifier(PropertyModifierStructure value);
    public sealed virtual int get_Length();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arrData, int iOffset);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.PropertyModifierStructure : ValueType {
    private static int DEF_BIT_COMPLEX;
    private static int DEF_RECORD_SIZE;
    private ushort m_usOptions;
    internal bool IsComplex { get; internal set; }
    internal int Length { get; }
    internal bool get_IsComplex();
    internal void set_IsComplex(bool value);
    internal int get_Length();
    internal void Parse(Byte[] arrData, Int32& iOffset);
    internal void Save(Byte[] arrData, Int32& iOffset);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.SectionDescriptorStructure : object {
    private static int DEF_RECORD_SIZE;
    private short m_sInternal;
    private UInt32 m_fcSepx;
    private short m_sInternal2;
    private int m_fcMpr;
    internal short Internal1 { get; internal set; }
    internal short Internal2 { get; internal set; }
    internal UInt32 SepxPosition { get; internal set; }
    internal int MacPrintOffset { get; internal set; }
    public int Length { get; }
    internal short get_Internal1();
    internal void set_Internal1(short value);
    internal short get_Internal2();
    internal void set_Internal2(short value);
    internal UInt32 get_SepxPosition();
    internal void set_SepxPosition(UInt32 value);
    internal int get_MacPrintOffset();
    internal void set_MacPrintOffset(int value);
    public sealed virtual int get_Length();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arrData, int iOffset);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.StyleDefinitionBase : object {
    internal static int DEF_RECORD_SIZE;
    private static int DEF_START_ID;
    private static int DEF_MASK_ID;
    private static int DEF_BIT_SCRATCH;
    private static int DEF_BIT_INVALID_HEIGHT;
    private static int DEF_BIT_HAS_UPE;
    private static int DEF_BIT_MASS_COPY;
    private static int DEF_MASK_TYPE_CODE;
    private static int DEF_START_TYPE_CODE;
    private static int DEF_MASK_BASE_STYLE;
    private static int DEF_START_BASE_STYLE;
    private static int DEF_MASK_UPX_NUMBER;
    private static int DEF_START_UPX_NUMBER;
    private static int DEF_MASK_NEXT_STYLE;
    private static int DEF_START_NEXT_STYLE;
    private static int DEF_BIT_AUTO_REDEFINE;
    private static int DEF_BIT_HIDDEN;
    private static int DEF_BIT_SEMIHIDDEN;
    private static int DEF_BIT_UNHIDEUSED;
    private static int DEF_BIT_QFORMAT;
    private ushort m_usOptions1;
    private ushort m_usOptions2;
    private ushort m_usOptions3;
    private ushort m_usUpeOffset;
    private ushort m_usOptions4;
    private ushort m_usOptions5;
    internal ushort StyleId { get; internal set; }
    internal bool IsScratch { get; internal set; }
    internal bool IsInvalidHeight { get; internal set; }
    internal bool HasUpe { get; internal set; }
    internal bool IsMassCopy { get; internal set; }
    internal ushort TypeCode { get; internal set; }
    internal ushort BaseStyle { get; internal set; }
    internal ushort UPEOffset { get; internal set; }
    internal ushort UpxNumber { get; internal set; }
    internal ushort NextStyleId { get; internal set; }
    internal bool IsAutoRedefine { get; internal set; }
    internal bool IsHidden { get; internal set; }
    public int Length { get; }
    internal ushort LinkStyleId { get; internal set; }
    internal bool IsSemiHidden { get; internal set; }
    internal bool IsQFormat { get; internal set; }
    internal bool UnhideWhenUsed { get; internal set; }
    internal ushort get_StyleId();
    internal void set_StyleId(ushort value);
    internal bool get_IsScratch();
    internal void set_IsScratch(bool value);
    internal bool get_IsInvalidHeight();
    internal void set_IsInvalidHeight(bool value);
    internal bool get_HasUpe();
    internal void set_HasUpe(bool value);
    internal bool get_IsMassCopy();
    internal void set_IsMassCopy(bool value);
    internal ushort get_TypeCode();
    internal void set_TypeCode(ushort value);
    internal ushort get_BaseStyle();
    internal void set_BaseStyle(ushort value);
    internal ushort get_UPEOffset();
    internal void set_UPEOffset(ushort value);
    internal ushort get_UpxNumber();
    internal void set_UpxNumber(ushort value);
    internal ushort get_NextStyleId();
    internal void set_NextStyleId(ushort value);
    internal bool get_IsAutoRedefine();
    internal void set_IsAutoRedefine(bool value);
    internal bool get_IsHidden();
    internal void set_IsHidden(bool value);
    public sealed virtual int get_Length();
    internal ushort get_LinkStyleId();
    internal void set_LinkStyleId(ushort value);
    internal bool get_IsSemiHidden();
    internal void set_IsSemiHidden(bool value);
    internal bool get_IsQFormat();
    internal void set_IsQFormat(bool value);
    internal bool get_UnhideWhenUsed();
    internal void set_UnhideWhenUsed(bool value);
    internal void Clear();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arrData, int iOffset);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.Structures.StyleSheetInfoStructure : object {
    private static int DEF_BIT_STYLE_NAMES_WRITTEN;
    private static int DEF_RECORD_SIZE;
    private ushort m_usStylesCount;
    private ushort m_usSTDBaseLength;
    private ushort m_usOptions;
    private ushort m_usStiMaxWhenSaved;
    private ushort m_usISTDMaxFixedWhenSaved;
    private ushort m_usBuiltInNamesVersion;
    private UInt16[] m_arrStandardChpStsh;
    private ushort m_ftcBi;
    internal ushort StylesCount { get; internal set; }
    internal ushort STDBaseLength { get; internal set; }
    internal bool IsStdStyleNamesWritten { get; internal set; }
    internal ushort StiMaxWhenSaved { get; internal set; }
    internal ushort ISTDMaxFixedWhenSaved { get; internal set; }
    internal ushort BuiltInNamesVersion { get; internal set; }
    internal UInt16[] StandardChpStsh { get; internal set; }
    internal ushort FtcBi { get; internal set; }
    public int Length { get; }
    internal ushort get_StylesCount();
    internal void set_StylesCount(ushort value);
    internal ushort get_STDBaseLength();
    internal void set_STDBaseLength(ushort value);
    internal bool get_IsStdStyleNamesWritten();
    internal void set_IsStdStyleNamesWritten(bool value);
    internal ushort get_StiMaxWhenSaved();
    internal void set_StiMaxWhenSaved(ushort value);
    internal ushort get_ISTDMaxFixedWhenSaved();
    internal void set_ISTDMaxFixedWhenSaved(ushort value);
    internal ushort get_BuiltInNamesVersion();
    internal void set_BuiltInNamesVersion(ushort value);
    internal UInt16[] get_StandardChpStsh();
    internal void set_StandardChpStsh(UInt16[] value);
    internal ushort get_FtcBi();
    internal void set_FtcBi(ushort value);
    public sealed virtual int get_Length();
    public sealed virtual void Parse(Byte[] arrData, int iOffset);
    public sealed virtual int Save(Byte[] arrData, int iOffset);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.StyleDefinitionRecord : BaseWordRecord {
    private static int DEF_START_ID;
    private static int DEF_MASK_ID;
    private static int DEF_BIT_SCRATCH;
    private static int DEF_BIT_INVALID_HEIGHT;
    private static int DEF_BIT_HAS_UPE;
    private static int DEF_BIT_MASS_COPY;
    private static int DEF_MASK_TYPE_CODE;
    private static int DEF_START_TYPE_CODE;
    private static int DEF_MASK_BASE_STYLE;
    private static int DEF_START_BASE_STYLE;
    private static int DEF_MASK_UPX_NUMBER;
    private static int DEF_START_UPX_NUMBER;
    private static int DEF_MASK_NEXT_STYLE;
    private static int DEF_START_NEXT_STYLE;
    private static int DEF_BIT_AUTO_REDEFINE;
    private static int DEF_BIT_HIDDEN;
    private StyleDefinitionBase m_basePart;
    private string m_strStyleName;
    private string m_aliasesStyleName;
    private UniversalPropertyException[] m_arrUpx;
    private CharacterPropertyException m_chpx;
    private ParagraphPropertyException m_papx;
    private Byte[] m_data;
    private Byte[] m_data1;
    private Byte[] m_data2;
    private Byte[] m_data3;
    private Byte[] m_tapx;
    private StyleSheetInfoRecord m_shInfo;
    internal Byte[] Tapx { get; internal set; }
    internal ushort StyleId { get; internal set; }
    internal bool IsScratch { get; internal set; }
    internal bool IsInvalidHeight { get; internal set; }
    internal bool HasUpe { get; internal set; }
    internal bool IsMassCopy { get; internal set; }
    internal WordStyleType TypeCode { get; internal set; }
    internal ushort BaseStyle { get; internal set; }
    internal ushort UPEOffset { get; internal set; }
    internal ushort UpxNumber { get; internal set; }
    internal ushort NextStyleId { get; internal set; }
    internal bool IsAutoRedefine { get; internal set; }
    internal bool IsHidden { get; internal set; }
    internal string StyleName { get; internal set; }
    internal string AliasesStyleName { get; internal set; }
    internal UniversalPropertyException[] PropertyExceptions { get; }
    internal CharacterPropertyException CharacterProperty { get; internal set; }
    internal ParagraphPropertyException ParagraphProperty { get; internal set; }
    protected IDataStructure UnderlyingStructure { get; }
    internal int Length { get; }
    internal Byte[] DBG_data { get; }
    internal Byte[] DBG_data1 { get; }
    internal Byte[] DBG_data2 { get; }
    internal Byte[] DBG_data3 { get; }
    internal ushort LinkStyleId { get; internal set; }
    internal bool IsQFormat { get; internal set; }
    internal bool UnhideWhenUsed { get; internal set; }
    internal bool IsSemiHidden { get; internal set; }
    private int UpxLength { get; }
    internal StyleDefinitionRecord(string styleName, ushort styleId, StyleSheetInfoRecord info);
    internal StyleDefinitionRecord(Byte[] arrData, int iOffset, int iCount, StyleSheetInfoRecord info);
    internal StyleDefinitionRecord(Stream stream, int iCount, StyleSheetInfoRecord info);
    internal Byte[] get_Tapx();
    internal void set_Tapx(Byte[] value);
    internal ushort get_StyleId();
    internal void set_StyleId(ushort value);
    internal bool get_IsScratch();
    internal void set_IsScratch(bool value);
    internal bool get_IsInvalidHeight();
    internal void set_IsInvalidHeight(bool value);
    internal bool get_HasUpe();
    internal void set_HasUpe(bool value);
    internal bool get_IsMassCopy();
    internal void set_IsMassCopy(bool value);
    internal WordStyleType get_TypeCode();
    internal void set_TypeCode(WordStyleType value);
    internal ushort get_BaseStyle();
    internal void set_BaseStyle(ushort value);
    internal ushort get_UPEOffset();
    internal void set_UPEOffset(ushort value);
    internal ushort get_UpxNumber();
    internal void set_UpxNumber(ushort value);
    internal ushort get_NextStyleId();
    internal void set_NextStyleId(ushort value);
    internal bool get_IsAutoRedefine();
    internal void set_IsAutoRedefine(bool value);
    internal bool get_IsHidden();
    internal void set_IsHidden(bool value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal string get_AliasesStyleName();
    internal void set_AliasesStyleName(string value);
    internal UniversalPropertyException[] get_PropertyExceptions();
    internal CharacterPropertyException get_CharacterProperty();
    internal void set_CharacterProperty(CharacterPropertyException value);
    internal ParagraphPropertyException get_ParagraphProperty();
    internal void set_ParagraphProperty(ParagraphPropertyException value);
    protected virtual IDataStructure get_UnderlyingStructure();
    internal virtual int get_Length();
    internal Byte[] get_DBG_data();
    internal Byte[] get_DBG_data1();
    internal Byte[] get_DBG_data2();
    internal Byte[] get_DBG_data3();
    internal ushort get_LinkStyleId();
    internal void set_LinkStyleId(ushort value);
    internal bool get_IsQFormat();
    internal void set_IsQFormat(bool value);
    internal bool get_UnhideWhenUsed();
    internal void set_UnhideWhenUsed(bool value);
    internal bool get_IsSemiHidden();
    internal void set_IsSemiHidden(bool value);
    internal virtual void Close();
    internal void Parse(Stream stream, int iCount, StyleSheetInfoRecord info);
    internal void Clear();
    internal virtual int Save(Stream stream);
    private int get_UpxLength();
    private void ParseUpxPart(Byte[] arrVariable, int iStartPos);
    private int MakeEven(int iStartPos);
    private void SaveUpxPart(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.StyleSheetInfoRecord : BaseWordRecord {
    private static int DEF_BIT_STYLE_NAMES_WRITTEN;
    private StyleSheetInfoStructure m_structure;
    internal ushort StylesCount { get; internal set; }
    internal ushort STDBaseLength { get; internal set; }
    internal bool IsStdStyleNamesWritten { get; internal set; }
    internal ushort StiMaxWhenSaved { get; internal set; }
    internal ushort ISTDMaxFixedWhenSaved { get; internal set; }
    internal ushort BuiltInNamesVersion { get; internal set; }
    internal UInt16[] StandardChpStsh { get; internal set; }
    protected IDataStructure UnderlyingStructure { get; }
    internal int Length { get; }
    internal ushort FtcBi { get; internal set; }
    internal StyleSheetInfoRecord(ushort iSTDBaseLength);
    internal StyleSheetInfoRecord(Byte[] arrData);
    internal StyleSheetInfoRecord(Byte[] arrData, int iOffset);
    internal StyleSheetInfoRecord(Byte[] arrData, int iOffset, int iCount);
    internal StyleSheetInfoRecord(Stream stream, int iCount);
    internal ushort get_StylesCount();
    internal void set_StylesCount(ushort value);
    internal ushort get_STDBaseLength();
    internal void set_STDBaseLength(ushort value);
    internal bool get_IsStdStyleNamesWritten();
    internal void set_IsStdStyleNamesWritten(bool value);
    internal ushort get_StiMaxWhenSaved();
    internal void set_StiMaxWhenSaved(ushort value);
    internal ushort get_ISTDMaxFixedWhenSaved();
    internal void set_ISTDMaxFixedWhenSaved(ushort value);
    internal ushort get_BuiltInNamesVersion();
    internal void set_BuiltInNamesVersion(ushort value);
    internal UInt16[] get_StandardChpStsh();
    internal void set_StandardChpStsh(UInt16[] value);
    protected virtual IDataStructure get_UnderlyingStructure();
    internal virtual int get_Length();
    internal ushort get_FtcBi();
    internal void set_FtcBi(ushort value);
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
    internal virtual void Close();
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.SymbolDescriptor : object {
    internal static int DEF_STRUCT_SIZE;
    internal static int DEF_EXT_VALUE;
    private short m_fontCode;
    private byte m_charSpecifier;
    private byte m_charSpecifierExt;
    internal short FontCode { get; internal set; }
    internal byte CharCode { get; internal set; }
    internal byte CharCodeExt { get; internal set; }
    internal short get_FontCode();
    internal void set_FontCode(short value);
    internal byte get_CharCode();
    internal void set_CharCode(byte value);
    internal byte get_CharCodeExt();
    internal void set_CharCodeExt(byte value);
    internal void Parse(Byte[] operand);
    internal Byte[] Save();
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.TabDescriptor : object {
    internal static int DEF_TAB_LENGTH;
    private TabJustification m_jc;
    private TabLeader m_tlc;
    internal TabJustification Justification { get; internal set; }
    internal TabLeader TabLeader { get; internal set; }
    internal TabDescriptor(byte options);
    internal TabDescriptor(TabJustification justification, TabLeader leader);
    internal TabJustification get_Justification();
    internal void set_Justification(TabJustification value);
    internal TabLeader get_TabLeader();
    internal void set_TabLeader(TabLeader value);
    internal byte Save();
}
[DefaultMemberAttribute("Item")]
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.TableBorders : object {
    private BorderCode[] m_brcArr;
    internal BorderCode Item { get; internal set; }
    internal BorderCode LeftBorder { get; internal set; }
    internal BorderCode RightBorder { get; internal set; }
    internal BorderCode TopBorder { get; internal set; }
    internal BorderCode BottomBorder { get; internal set; }
    internal BorderCode HorizontalBorder { get; internal set; }
    internal BorderCode VerticalBorder { get; internal set; }
    internal BorderCode get_Item(int index);
    internal void set_Item(int index, BorderCode value);
    internal BorderCode get_LeftBorder();
    internal void set_LeftBorder(BorderCode value);
    internal BorderCode get_RightBorder();
    internal void set_RightBorder(BorderCode value);
    internal BorderCode get_TopBorder();
    internal void set_TopBorder(BorderCode value);
    internal BorderCode get_BottomBorder();
    internal void set_BottomBorder(BorderCode value);
    internal BorderCode get_HorizontalBorder();
    internal void set_HorizontalBorder(BorderCode value);
    internal BorderCode get_VerticalBorder();
    internal void set_VerticalBorder(BorderCode value);
    private void Init();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.TabsInfo : object {
    private Int16[] m_tabPositions;
    private Int16[] m_tabDeletePositions;
    private TabDescriptor[] m_tabDescriptors;
    private byte m_tabsCount;
    private Byte[] m_data;
    private byte m_opcode;
    private int m_deleteOffset;
    internal byte TabCount { get; }
    internal Int16[] TabPositions { get; }
    internal Int16[] TabDeletePositions { get; internal set; }
    internal TabDescriptor[] Descriptors { get; }
    internal TabsInfo(byte length);
    internal TabsInfo(SinglePropertyModifierArray sprms, int sprm);
    internal TabsInfo(SinglePropertyModifierRecord record);
    internal byte get_TabCount();
    internal Int16[] get_TabPositions();
    internal Int16[] get_TabDeletePositions();
    internal void set_TabDeletePositions(Int16[] value);
    internal TabDescriptor[] get_Descriptors();
    internal void Save(SinglePropertyModifierArray sprms, int sprmOption);
    private void Parse(SinglePropertyModifierRecord record);
    private void ParseInit();
    private void ParseDeletePositions();
    private void ParsePositions();
    private void ParseDescriptors();
    private bool SaveInit();
    private void SaveDeletePositions();
    private void SavePositions();
    private void SaveDescriptors();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.TextBoxStoryDescriptor : BaseWordRecord {
    internal static int DEF_TXBX_LENGTH;
    private int m_cTxbxAndiNextReuse;
    private int m_cReusable;
    private bool m_fReusable;
    private UInt32 m_reserved;
    private int m_lid;
    private int m_txidUndo;
    internal int TextBoxCnt { get; internal set; }
    internal int ReusableCnt { get; internal set; }
    internal bool IsReusable { get; internal set; }
    internal int ShapeIdent { get; internal set; }
    internal UInt32 Reserved { get; internal set; }
    internal TextBoxStoryDescriptor(Stream stream);
    private static TextBoxStoryDescriptor();
    internal int get_TextBoxCnt();
    internal void set_TextBoxCnt(int value);
    internal int get_ReusableCnt();
    internal void set_ReusableCnt(int value);
    internal bool get_IsReusable();
    internal void set_IsReusable(bool value);
    internal int get_ShapeIdent();
    internal void set_ShapeIdent(int value);
    internal UInt32 get_Reserved();
    internal void set_Reserved(UInt32 value);
    internal void Read(Stream stream);
    internal void Write(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.UniversalPropertyException : BaseWordRecord {
    private Byte[] m_arrData;
    internal Byte[] Data { get; }
    internal int Length { get; }
    internal UniversalPropertyException(Byte[] arrData, int iOffset, int iCount);
    internal Byte[] get_Data();
    internal virtual int get_Length();
    internal virtual void Close();
    internal virtual void Parse(Byte[] arrData, int iOffset, int iCount);
}
public enum Syncfusion.DocIO.ReaderWriter.Biff_Records.WordComplexBlockType : Enum {
    public int value__;
    public static WordComplexBlockType Sprms;
    public static WordComplexBlockType PieceTable;
}
public enum Syncfusion.DocIO.ReaderWriter.Biff_Records.WordSprmOperandSize : Enum {
    public int value__;
    public static WordSprmOperandSize OneBit;
    public static WordSprmOperandSize OneByte;
    public static WordSprmOperandSize TwoBytes;
    public static WordSprmOperandSize FourBytes;
    public static WordSprmOperandSize TwoBytes2;
    public static WordSprmOperandSize TwoBytes3;
    public static WordSprmOperandSize Variable;
    public static WordSprmOperandSize ThreeBytes;
}
internal class Syncfusion.DocIO.ReaderWriter.Biff_Records.WordSprmOptions : object {
    public static int sprmPIstd;
    public static int sprmPIstdPermute;
    public static int sprmPIncLvl;
    public static int sprmPJc;
    public static int sprmPFSideBySide;
    public static int sprmPFKeep;
    public static int sprmPFKeepFollow;
    public static int sprmPFPageBreakBefore;
    public static int sprmPBrcl;
    public static int sprmPBrcp;
    public static int sprmPIlvl;
    public static int sprmPIlfo;
    public static int sprmPFNoLineNumb;
    public static int sprmPChgTabsPapx;
    public static int sprmPDxaRight;
    public static int sprmPDxaLeft;
    public static int sprmPNest;
    public static int sprmPDxaLeft1;
    public static int sprmPDyaLine;
    public static int sprmPDyaBefore;
    public static int sprmPDyaAfter;
    public static int sprmPChgTabs;
    public static int sprmPFInTable;
    public static int sprmPFTtp;
    public static int sprmPDxaAbs;
    public static int sprmPDyaAbs;
    public static int sprmPDxaWidth;
    public static int sprmPPc;
    public static int sprmPBrcTop10;
    public static int sprmPBrcLeft10;
    public static int sprmPBrcBottom10;
    public static int sprmPBrcRight10;
    public static int sprmPBrcBetween10;
    public static int sprmPBrcBar10;
    public static int sprmPDxaFromText10;
    public static int sprmPWr;
    public static int sprmPBrcTop;
    public static int sprmPBrcLeft;
    public static int sprmPBrcBottom;
    public static int sprmPBrcRight;
    public static int sprmPBrcBetween;
    public static int sprmPBrcBar;
    public static int sprmPBrcTopNew;
    public static int sprmPBrcLeftNew;
    public static int sprmPBrcBottomNew;
    public static int sprmPBrcRightNew;
    internal static int sprmPBrcBetweenNew;
    internal static int sprmPBrcBarNew;
    public static int sprmPFNoAutoHyph;
    public static int sprmPWHeightAbs;
    public static int sprmPDcs;
    public static int sprmPShd;
    public static int sprmPDyaFromText;
    public static int sprmPDxaFromText;
    public static int sprmPFLocked;
    public static int sprmPFMirrorIndents;
    public static int sprmPFWidowControl;
    public static int sprmPRuler;
    public static int sprmPFKinsoku;
    public static int sprmPFWordWrap;
    public static int sprmPFOverflowPunct;
    public static int sprmPFTopLinePunct;
    public static int sprmPFAutoSpaceDE;
    public static int sprmPFAutoSpaceDN;
    public static int sprmPWAlignFont;
    public static int sprmPFrameTextFlow;
    public static int sprmPISnapBaseLine;
    public static int sprmPAnld;
    public static int sprmPPropRMark;
    public static int sprmPOutLvl;
    public static int sprmPFBiDi;
    public static int sprmPFNumRMIns;
    public static int sprmPCrLf;
    public static int sprmPNumRM;
    public static int sprmPHugePapx;
    public static int sprmPHugePapx2;
    public static int sprmPFUsePgsuSettings;
    public static int sprmPFAdjustRight;
    public static int sprmCFRMarkDel;
    public static int sprmCFRMark;
    public static int sprmCFFldVanish;
    public static int sprmCPicLocation;
    public static int sprmCIbstRMark;
    public static int sprmCDttmRMark;
    public static int sprmCFData;
    public static int sprmCIdslRMark;
    public static int sprmCChs;
    public static int sprmCSymbol;
    public static int sprmCFOle2;
    public static int sprmCIdCharType;
    public static int sprmCHighlight;
    public static int sprmCObjLocation;
    public static int sprmCFFtcAsciSymb;
    public static int sprmCIstd;
    public static int sprmCIstdPermute;
    public static int sprmCDefault;
    public static int sprmCPlain;
    public static int sprmCKcd;
    public static int sprmCFBold;
    public static int sprmCFItalic;
    public static int sprmCFStrike;
    public static int sprmCFOutline;
    public static int sprmCFShadow;
    public static int sprmCFSmallCaps;
    public static int sprmCFCaps;
    public static int sprmCFVanish;
    public static int sprmCFSpecVanish;
    public static int sprmCFtcDefault;
    public static int sprmCKul;
    public static int sprmCSizePos;
    public static int sprmCDxaSpace;
    public static int sprmPTtwo;
    public static int sprmCLid;
    public static int sprmCIco;
    public static int sprmCIcoe;
    public static int sprmCHps;
    public static int sprmCHpsInc;
    public static int sprmCHpsPos;
    public static int sprmCHpsPosAdj;
    public static int sprmCMajority;
    public static int sprmCIss;
    public static int sprmCHpsNew50;
    public static int sprmCHpsInc1;
    public static int sprmCHpsKern;
    public static int sprmCMajority50;
    public static int sprmCHpsMul;
    public static int sprmCYsri;
    public static int sprmCRgFtc0;
    public static int sprmCRgFtc1;
    public static int sprmCRgFtc2;
    public static int sprmCCharScale;
    public static int sprmCFDStrike;
    public static int sprmCFImprint;
    public static int sprmCFSpec;
    public static int sprmCFObj;
    public static int sprmCPropRMark;
    public static int sprmCFEmboss;
    public static int sprmCSfxText;
    public static int sprmCFBiDi;
    public static int sprmCFDiacColor;
    public static int sprmCFComplexScripts;
    public static int sprmCFBoldBi;
    public static int sprmCFItalicBi;
    public static int sprmCFtcBi;
    public static int sprmCLidBi;
    public static int sprmCIcoBi;
    public static int sprmCHpsBi;
    public static int sprmCDispFldRMark;
    public static int sprmCIbstRMarkDel;
    public static int sprmCDttmRMarkDel;
    public static int sprmCBrc;
    public static int sprmCBrcNew;
    public static int sprmCFELayout;
    public static int sprmCShd;
    public static int sprmCIdslRMarkDel;
    public static int sprmCFUsePgsuSettings;
    public static int sprmCFitText;
    public static int sprmCCpg;
    public static int sprmCRgLid0_80;
    public static int sprmCRgLid1_80;
    public static int sprmCIdctHint;
    public static int sprmPicBrcl;
    public static int sprmPicScale;
    public static int sprmPicBrcTop;
    public static int sprmPicBrcLeft;
    public static int sprmPicBrcBottom;
    public static int sprmPicBrcRight;
    public static int sprmScnsPgn;
    public static int sprmSiHeadingPgn;
    public static int sprmSOlstAnm;
    public static int sprmSDxaColWidth;
    public static int sprmSDxaColSpacing;
    public static int sprmSFEvenlySpaced;
    public static int sprmSFProtected;
    public static int sprmSDmBinFirst;
    public static int sprmSDmBinOther;
    public static int sprmSBkc;
    public static int sprmSFTitlePage;
    public static int sprmSCcolumns;
    public static int sprmSNfcFtnRef;
    public static int sprmSNfcEdnRef;
    public static int sprmSNFtn;
    public static int sprmSNEdn;
    public static int sprmSFpc;
    public static int sprmSRncFtn;
    public static int sprmSRncEdn;
    public static int sprmSDxaColumns;
    public static int sprmSFAutoPgn;
    public static int sprmSNfcPgn;
    public static int sprmSDyaPgn;
    public static int sprmSDxaPgn;
    public static int sprmSFPgnRestart;
    public static int sprmSFEndnote;
    public static int sprmSLnc;
    public static int sprmSGprfIhdt;
    public static int sprmSNLnnMod;
    public static int sprmSDxaLnn;
    public static int sprmSDyaHdrTop;
    public static int sprmSDyaHdrBottom;
    public static int sprmSLBetween;
    public static int sprmSVjc;
    public static int sprmSLnnMin;
    public static int sprmSPgnStart;
    public static int sprmSBOrientation;
    public static int sprmSBCustomize;
    public static int sprmSXaPage;
    public static int sprmSYaPage;
    public static int sprmSDxaLeft;
    public static int sprmSDxaRight;
    public static int sprmSDyaTop;
    public static int sprmSDyaBottom;
    public static int sprmSDzaGutter;
    public static int sprmSDmPaperReq;
    public static int sprmSPropRMark;
    public static int sprmSFBiDi;
    public static int sprmSFFacingCol;
    public static int sprmSFRTLGutter;
    public static int sprmSBrcTop;
    public static int sprmSBrcLeft;
    public static int sprmSBrcBottom;
    public static int sprmSBrcRight;
    public static int sprmSPgbProp;
    public static int sprmSDxtCharSpace;
    public static int sprmSDyaLinePitch;
    public static int sprmSClm;
    public static int sprmSTextFlow;
    public static int sprmTJc;
    public static int sprmTJc1;
    public static int sprmTDxaLeft;
    public static int sprmTDxaGapHalf;
    public static int sprmTFCantSplit;
    public static int sprmTFKeepFollow;
    public static int sprmTFCantSplit90;
    public static int sprmTTableHeader;
    public static int sprmTTableBorders;
    public static int sprmTDefTable10;
    public static int sprmTDyaRowHeight;
    public static int sprmTDefTable;
    public static int sprmTDefTableShd;
    public static int sprmTTlp;
    public static int sprmTFBiDi90;
    public static int sprmTFBiDi;
    public static int sprmTHTMLProps;
    public static int sprmTSetBrc;
    public static int sprmTInsert;
    public static int sprmTDelete;
    public static int sprmTDxaCol;
    public static int sprmTMerge;
    public static int sprmTSplit;
    public static int sprmTSetBrc10;
    public static int sprmTSetShd;
    public static int sprmTSetShdOdd;
    public static int sprmTTextFlow;
    public static int sprmTDiagLine;
    public static int sprmTVertMerge;
    public static int sprmTVertAlign;
    public static int sprmTCellFHideMark;
    public static int sprmPTimeStamp;
    public static int sprmCShdNew;
    public static int sprmPShdNew;
    public static int sprmTTableBordersNew;
    public static int sprmTCellMargins;
    public static int sprmTTableCellMargins;
    public static int sprmNone;
    public static int sprmUnknown1;
    public static int sprmUnknown2;
    public static int sprmCRgLid0;
    public static int sprmCRgLid1;
    public static int sprmPSubTableCellEnd;
    public static int sprmPSubTableRowEnd;
    public static int sprmTTopBorderColor;
    public static int sprmTLeftBorderColor;
    public static int sprmTBottomBorderColor;
    public static int sprmTRightBorderColor;
    public static int sprmTCellSpacing;
    public static int sprmTAutoResizeCells;
    public static int sprmSBrcBottomNew;
    public static int sprmSBrcLeftNew;
    public static int sprmSBrcRightNew;
    public static int sprmSBrcTopNew;
    public static int sprmPDxaLeft1Bi;
    public static int sprmPTableProps;
    public static int sprmTIstd;
    public static int sprmTNestingLevel;
    public static int sprmTableUnknown1;
    public static int sprmTableUnknown2;
    public static int sprmTPreferredWidth;
    public static int sprmTWidthBefore;
    public static int sprmTWidthAfter;
    public static int sprmTWidthIndent;
    public static int sprmCUnderlineColor;
    public static int sprmCFNoProof;
    public static int sprmPJcBi;
    public static int sprmPDxaLeftBi;
    public static int sprmPDxaRightBi;
    public static int sprmPFBeforeAuto;
    public static int sprmPFAfterAuto;
    public static int sprmTPropRMark;
    public static int sprmTPositionCode;
    public static int sprmTFrameLeft;
    public static int sprmTFrameTop;
    public static int sprmTFromTextBottom;
    public static int sprmTFromTextLeft;
    public static int sprmTFromTextRight;
    public static int sprmTFromTextTop;
    public static int sprmTCellShdNew;
    public static int sprmTCellShdNew2;
    public static int SprmTCellShdNew2Dup;
    public static int sprmTCellShdNew3;
    public static int SprmTCellShdNew3Dup;
    public static int sprmTCellShdNewDup;
    public static int sprmTTableShd;
    public static int sprmPFNoAllowOverlap;
    public static int sprmPDylBefore;
    public static int sprmPDylAfter;
    public static int sprmPUndocumented6465;
    public static int sprmPUndocumented6654;
    public static int sprmPUndocumentedC653;
    public static int sprmPUndocumentedC66C;
    public static int sprmCLbcCRJ;
    public static int sprmCUndocumented2A86;
    public static int sprmCPbiHasImage;
    public static int sprmCUndocumented6815;
    public static int sprmCUndocumented6816;
    public static int sprmCUndocumented6817;
    public static int sprmCPbiImageIndex;
    public static int sprmCFWebHidden;
    public static int sprmCUndocumentedSpacing;
    public static int sprmCUndocumentedRevisionProblem;
    public static int sprmCUndocumented1;
    public static int sprmCUndocumented2;
    public static int sprmCUndocumented3;
    public static int sprmCUndocumented4;
    public static int sprmCUndocumented5;
    public static int sprmCUndocumented6;
    public static int sprmCUndocumented7;
    public static int sprmCUndocumented8;
    public static int sprmTCellBrcType;
    public static int sprmCPropRMark1;
    public static int sprmCWall;
    public static int sprmPWall;
    public static int sprmPPropRMark90;
    public static int sprmTWall;
    public static int sprmPFContSpacing;
    public static int sprmSWall;
    public static int sprmPDxcLeft;
    public static int sprmPDxcLeft1;
    public static int sprmPDxcRight;
    public static int sprmTFNoAllowOverlap;
}
public enum Syncfusion.DocIO.ReaderWriter.Biff_Records.WordSprmOptionType : Enum {
    public int value__;
    public static WordSprmOptionType sprmPIstd;
    public static WordSprmOptionType sprmPIstdPermute;
    public static WordSprmOptionType sprmPIncLvl;
    public static WordSprmOptionType sprmPJc;
    public static WordSprmOptionType sprmPFSideBySide;
    public static WordSprmOptionType sprmPFKeep;
    public static WordSprmOptionType sprmPFKeepFollow;
    public static WordSprmOptionType sprmPFPageBreakBefore;
    public static WordSprmOptionType sprmPBrcl;
    public static WordSprmOptionType sprmPBrcp;
    public static WordSprmOptionType sprmPIlvl;
    public static WordSprmOptionType sprmPIlfo;
    public static WordSprmOptionType sprmPFNoLineNumb;
    public static WordSprmOptionType sprmPChgTabsPapx;
    public static WordSprmOptionType sprmPDxaRight;
    public static WordSprmOptionType sprmPDxaLeft;
    public static WordSprmOptionType sprmPNest;
    public static WordSprmOptionType sprmPDxaLeft1;
    public static WordSprmOptionType sprmPDyaLine;
    public static WordSprmOptionType sprmPDyaBefore;
    public static WordSprmOptionType sprmPDyaAfter;
    public static WordSprmOptionType sprmPChgTabs;
    public static WordSprmOptionType sprmPFInTable;
    public static WordSprmOptionType sprmPFTtp;
    public static WordSprmOptionType sprmPDxaAbs;
    public static WordSprmOptionType sprmPDyaAbs;
    public static WordSprmOptionType sprmPDxaWidth;
    public static WordSprmOptionType sprmPPc;
    public static WordSprmOptionType sprmPBrcTop10;
    public static WordSprmOptionType sprmPBrcLeft10;
    public static WordSprmOptionType sprmPBrcBottom10;
    public static WordSprmOptionType sprmPBrcRight10;
    public static WordSprmOptionType sprmPBrcBetween10;
    public static WordSprmOptionType sprmPBrcBar10;
    public static WordSprmOptionType sprmPDxaFromText10;
    public static WordSprmOptionType sprmPWr;
    public static WordSprmOptionType sprmPBrcTop;
    public static WordSprmOptionType sprmPBrcLeft;
    public static WordSprmOptionType sprmPBrcBottom;
    public static WordSprmOptionType sprmPBrcRight;
    public static WordSprmOptionType sprmPBrcBetween;
    public static WordSprmOptionType sprmPBrcBar;
    public static WordSprmOptionType sprmPBrcTopNew;
    public static WordSprmOptionType sprmPBrcLeftNew;
    public static WordSprmOptionType sprmPBrcBottomNew;
    public static WordSprmOptionType sprmPBrcRightNew;
    public static WordSprmOptionType sprmPFNoAutoHyph;
    public static WordSprmOptionType sprmPWHeightAbs;
    public static WordSprmOptionType sprmPDcs;
    public static WordSprmOptionType sprmPShd;
    public static WordSprmOptionType sprmPDyaFromText;
    public static WordSprmOptionType sprmPDxaFromText;
    public static WordSprmOptionType sprmPFLocked;
    public static WordSprmOptionType sprmPFWidowControl;
    public static WordSprmOptionType sprmPRuler;
    public static WordSprmOptionType sprmPFKinsoku;
    public static WordSprmOptionType sprmPFWordWrap;
    public static WordSprmOptionType sprmPFOverflowPunct;
    public static WordSprmOptionType sprmPFTopLinePunct;
    public static WordSprmOptionType sprmPFAutoSpaceDE;
    public static WordSprmOptionType sprmPFAutoSpaceDN;
    public static WordSprmOptionType sprmPWAlignFont;
    public static WordSprmOptionType sprmPFrameTextFlow;
    public static WordSprmOptionType sprmPISnapBaseLine;
    public static WordSprmOptionType sprmPAnld;
    public static WordSprmOptionType sprmPPropRMark;
    public static WordSprmOptionType sprmPOutLvl;
    public static WordSprmOptionType sprmPFBiDi;
    public static WordSprmOptionType sprmPFNumRMIns;
    public static WordSprmOptionType sprmPCrLf;
    public static WordSprmOptionType sprmPNumRM;
    public static WordSprmOptionType sprmPHugePapx;
    public static WordSprmOptionType sprmPHugePapx2;
    public static WordSprmOptionType sprmPFUsePgsuSettings;
    public static WordSprmOptionType sprmPFAdjustRight;
    public static WordSprmOptionType sprmCFRMarkDel;
    public static WordSprmOptionType sprmCFRMark;
    public static WordSprmOptionType sprmCFFldVanish;
    public static WordSprmOptionType sprmCPicLocation;
    public static WordSprmOptionType sprmCIbstRMark;
    public static WordSprmOptionType sprmCDttmRMark;
    public static WordSprmOptionType sprmCFData;
    public static WordSprmOptionType sprmCIdslRMark;
    public static WordSprmOptionType sprmCChs;
    public static WordSprmOptionType sprmCSymbol;
    public static WordSprmOptionType sprmCFOle2;
    public static WordSprmOptionType sprmCIdCharType;
    public static WordSprmOptionType sprmCHighlight;
    public static WordSprmOptionType sprmCObjLocation;
    public static WordSprmOptionType sprmCFFtcAsciSymb;
    public static WordSprmOptionType sprmCIstd;
    public static WordSprmOptionType sprmCIstdPermute;
    public static WordSprmOptionType sprmCDefault;
    public static WordSprmOptionType sprmCPlain;
    public static WordSprmOptionType sprmCKcd;
    public static WordSprmOptionType sprmCFBold;
    public static WordSprmOptionType sprmCFItalic;
    public static WordSprmOptionType sprmCFStrike;
    public static WordSprmOptionType sprmCFOutline;
    public static WordSprmOptionType sprmCFShadow;
    public static WordSprmOptionType sprmCFSmallCaps;
    public static WordSprmOptionType sprmCFCaps;
    public static WordSprmOptionType sprmCFVanish;
    public static WordSprmOptionType sprmCFtcDefault;
    public static WordSprmOptionType sprmCKul;
    public static WordSprmOptionType sprmCSizePos;
    public static WordSprmOptionType sprmCDxaSpace;
    public static WordSprmOptionType sprmCLid;
    public static WordSprmOptionType sprmCIco;
    public static WordSprmOptionType sprmCIcoe;
    public static WordSprmOptionType sprmCHps;
    public static WordSprmOptionType sprmCHpsInc;
    public static WordSprmOptionType sprmCHpsPos;
    public static WordSprmOptionType sprmCHpsPosAdj;
    public static WordSprmOptionType sprmCMajority;
    public static WordSprmOptionType sprmCIss;
    public static WordSprmOptionType sprmCHpsNew50;
    public static WordSprmOptionType sprmCHpsInc1;
    public static WordSprmOptionType sprmCHpsKern;
    public static WordSprmOptionType sprmCMajority50;
    public static WordSprmOptionType sprmCHpsMul;
    public static WordSprmOptionType sprmCYsri;
    public static WordSprmOptionType sprmCRgFtc0;
    public static WordSprmOptionType sprmCRgFtc1;
    public static WordSprmOptionType sprmCRgFtc2;
    public static WordSprmOptionType sprmCCharScale;
    public static WordSprmOptionType sprmCFDStrike;
    public static WordSprmOptionType sprmCFImprint;
    public static WordSprmOptionType sprmCFSpec;
    public static WordSprmOptionType sprmCFObj;
    public static WordSprmOptionType sprmCPropRMark;
    public static WordSprmOptionType sprmCFEmboss;
    public static WordSprmOptionType sprmCSfxText;
    public static WordSprmOptionType sprmCFBiDi;
    public static WordSprmOptionType sprmCFDiacColor;
    public static WordSprmOptionType sprmCFBoldBi;
    public static WordSprmOptionType sprmCFItalicBi;
    public static WordSprmOptionType sprmCFtcBi;
    public static WordSprmOptionType sprmCLidBi;
    public static WordSprmOptionType sprmCIcoBi;
    public static WordSprmOptionType sprmCHpsBi;
    public static WordSprmOptionType sprmCDispFldRMark;
    public static WordSprmOptionType sprmCIbstRMarkDel;
    public static WordSprmOptionType sprmCDttmRMarkDel;
    public static WordSprmOptionType sprmCBrc;
    public static WordSprmOptionType sprmCShd;
    public static WordSprmOptionType sprmCIdslRMarkDel;
    public static WordSprmOptionType sprmCFUsePgsuSettings;
    public static WordSprmOptionType sprmCCpg;
    public static WordSprmOptionType sprmCRgLid0;
    public static WordSprmOptionType sprmCRgLid1;
    public static WordSprmOptionType sprmCIdctHint;
    public static WordSprmOptionType sprmPicBrcl;
    public static WordSprmOptionType sprmPicScale;
    public static WordSprmOptionType sprmPicBrcTop;
    public static WordSprmOptionType sprmPicBrcLeft;
    public static WordSprmOptionType sprmPicBrcBottom;
    public static WordSprmOptionType sprmPicBrcRight;
    public static WordSprmOptionType sprmScnsPgn;
    public static WordSprmOptionType sprmSiHeadingPgn;
    public static WordSprmOptionType sprmSOlstAnm;
    public static WordSprmOptionType sprmSDxaColWidth;
    public static WordSprmOptionType sprmSDxaColSpacing;
    public static WordSprmOptionType sprmSFEvenlySpaced;
    public static WordSprmOptionType sprmSFProtected;
    public static WordSprmOptionType sprmSDmBinFirst;
    public static WordSprmOptionType sprmSDmBinOther;
    public static WordSprmOptionType sprmSBkc;
    public static WordSprmOptionType sprmSFTitlePage;
    public static WordSprmOptionType sprmSCcolumns;
    public static WordSprmOptionType sprmSNfcFtnRef;
    public static WordSprmOptionType sprmSNfcEdnRef;
    public static WordSprmOptionType sprmSNFtn;
    public static WordSprmOptionType sprmSNEdn;
    public static WordSprmOptionType sprmSFpc;
    public static WordSprmOptionType sprmSRncFtn;
    public static WordSprmOptionType sprmSRncEdn;
    public static WordSprmOptionType sprmSDxaColumns;
    public static WordSprmOptionType sprmSFAutoPgn;
    public static WordSprmOptionType sprmSNfcPgn;
    public static WordSprmOptionType sprmSDyaPgn;
    public static WordSprmOptionType sprmSDxaPgn;
    public static WordSprmOptionType sprmSFPgnRestart;
    public static WordSprmOptionType sprmSFEndnote;
    public static WordSprmOptionType sprmSLnc;
    public static WordSprmOptionType sprmSGprfIhdt;
    public static WordSprmOptionType sprmSNLnnMod;
    public static WordSprmOptionType sprmSDxaLnn;
    public static WordSprmOptionType sprmSDyaHdrTop;
    public static WordSprmOptionType sprmSDyaHdrBottom;
    public static WordSprmOptionType sprmSLBetween;
    public static WordSprmOptionType sprmSVjc;
    public static WordSprmOptionType sprmSLnnMin;
    public static WordSprmOptionType sprmSPgnStart;
    public static WordSprmOptionType sprmSBOrientation;
    public static WordSprmOptionType sprmSBCustomize;
    public static WordSprmOptionType sprmSXaPage;
    public static WordSprmOptionType sprmSYaPage;
    public static WordSprmOptionType sprmSDxaLeft;
    public static WordSprmOptionType sprmSDxaRight;
    public static WordSprmOptionType sprmSDyaTop;
    public static WordSprmOptionType sprmSDyaBottom;
    public static WordSprmOptionType sprmSDzaGutter;
    public static WordSprmOptionType sprmSDmPaperReq;
    public static WordSprmOptionType sprmSPropRMark;
    public static WordSprmOptionType sprmSFBiDi;
    public static WordSprmOptionType sprmSFFacingCol;
    public static WordSprmOptionType sprmSFRTLGutter;
    public static WordSprmOptionType sprmSBrcTop;
    public static WordSprmOptionType sprmSBrcLeft;
    public static WordSprmOptionType sprmSBrcBottom;
    public static WordSprmOptionType sprmSBrcRight;
    public static WordSprmOptionType sprmSPgbProp;
    public static WordSprmOptionType sprmSDxtCharSpace;
    public static WordSprmOptionType sprmSDyaLinePitch;
    public static WordSprmOptionType sprmSClm;
    public static WordSprmOptionType sprmSTextFlow;
    public static WordSprmOptionType sprmTJc;
    public static WordSprmOptionType sprmTDxaLeft;
    public static WordSprmOptionType sprmTDxaGapHalf;
    public static WordSprmOptionType sprmTFCantSplit;
    public static WordSprmOptionType sprmTFCantSplit90;
    public static WordSprmOptionType sprmTTableHeader;
    public static WordSprmOptionType sprmTTableBorders;
    public static WordSprmOptionType sprmTDefTable10;
    public static WordSprmOptionType sprmTDyaRowHeight;
    public static WordSprmOptionType sprmTDefTable;
    public static WordSprmOptionType sprmTDefTableShd;
    public static WordSprmOptionType sprmTTlp;
    public static WordSprmOptionType sprmTFBiDi;
    public static WordSprmOptionType sprmTHTMLProps;
    public static WordSprmOptionType sprmTSetBrc;
    public static WordSprmOptionType sprmTInsert;
    public static WordSprmOptionType sprmTDelete;
    public static WordSprmOptionType sprmTDxaCol;
    public static WordSprmOptionType sprmTMerge;
    public static WordSprmOptionType sprmTSplit;
    public static WordSprmOptionType sprmTSetBrc10;
    public static WordSprmOptionType sprmTSetShd;
    public static WordSprmOptionType sprmTSetShdOdd;
    public static WordSprmOptionType sprmTTextFlow;
    public static WordSprmOptionType sprmTDiagLine;
    public static WordSprmOptionType sprmTVertMerge;
    public static WordSprmOptionType sprmTVertAlign;
    public static WordSprmOptionType sprmTCellFHideMark;
    public static WordSprmOptionType sprmPTimeStamp;
    public static WordSprmOptionType sprmCShdNew;
    public static WordSprmOptionType sprmPShdNew;
    public static WordSprmOptionType sprmTTableBordersNew;
    public static WordSprmOptionType sprmTCellMargins;
    public static WordSprmOptionType sprmTTableCellMargins;
    public static WordSprmOptionType sprmNone;
    public static WordSprmOptionType sprmUnknown1;
    public static WordSprmOptionType sprmUnknown2;
    public static WordSprmOptionType sprmCRgLid3;
    public static WordSprmOptionType sprmCRgLid3_2;
    public static WordSprmOptionType sprmPSubTableCellEnd;
    public static WordSprmOptionType sprmPSubTableRowEnd;
    public static WordSprmOptionType sprmTTopBorderColor;
    public static WordSprmOptionType sprmTLeftBorderColor;
    public static WordSprmOptionType sprmTBottomBorderColor;
    public static WordSprmOptionType sprmTRightBorderColor;
    public static WordSprmOptionType sprmTCellSpacing;
    public static WordSprmOptionType sprmTAutoResizeCells;
    public static WordSprmOptionType sprmSBrcBottomNew;
    public static WordSprmOptionType sprmSBrcLeftNew;
    public static WordSprmOptionType sprmSBrcRightNew;
    public static WordSprmOptionType sprmSBrcTopNew;
    public static WordSprmOptionType sprmPDxaLeft1Bi;
    public static WordSprmOptionType sprmPTableProps;
    public static WordSprmOptionType sprmTIstd;
    public static WordSprmOptionType sprmTNestingLevel;
    public static WordSprmOptionType sprmTableUnknown1;
    public static WordSprmOptionType sprmTableUnknown2;
    public static WordSprmOptionType sprmTPreferredWidth;
    public static WordSprmOptionType sprmTWidthBefore;
    public static WordSprmOptionType sprmTWidthAfter;
    public static WordSprmOptionType sprmTWidthIndent;
    public static WordSprmOptionType sprmCUnderlineColor;
    public static WordSprmOptionType sprmCFNoProof;
    public static WordSprmOptionType sprmPJcBi;
    public static WordSprmOptionType sprmPDxaLeftBi;
    public static WordSprmOptionType sprmPDxaRightBi;
    public static WordSprmOptionType sprmPFBeforeAuto;
    public static WordSprmOptionType sprmPFAfterAuto;
    public static WordSprmOptionType sprmTPropRMark;
    public static WordSprmOptionType sprmTPositionCode;
    public static WordSprmOptionType sprmTFrameLeft;
    public static WordSprmOptionType sprmTFrameTop;
    public static WordSprmOptionType sprmTFromTextBottom;
    public static WordSprmOptionType sprmTFromTextLeft;
    public static WordSprmOptionType sprmTFromTextRight;
    public static WordSprmOptionType sprmTFromTextTop;
    public static WordSprmOptionType sprmTCellShdNew;
    public static WordSprmOptionType sprmTCellShdNew2;
    public static WordSprmOptionType SprmTCellShdNew2Dup;
    public static WordSprmOptionType sprmTCellShdNew3;
    public static WordSprmOptionType SprmTCellShdNew3Dup;
    public static WordSprmOptionType sprmTCellShdNewDup;
    public static WordSprmOptionType sprmTTableShd;
    public static WordSprmOptionType sprmPFNoAllowOverlap;
    public static WordSprmOptionType sprmPDylBefore;
    public static WordSprmOptionType sprmPDylAfter;
    public static WordSprmOptionType sprmPUndocumented6465;
    public static WordSprmOptionType sprmPUndocumented6654;
    public static WordSprmOptionType sprmPUndocumentedC653;
    public static WordSprmOptionType sprmPUndocumentedC66C;
    public static WordSprmOptionType sprmCLbcCRJ;
    public static WordSprmOptionType sprmCUndocumented2A86;
    public static WordSprmOptionType sprmCPbiHasImage;
    public static WordSprmOptionType sprmCUndocumented6815;
    public static WordSprmOptionType sprmCUndocumented6816;
    public static WordSprmOptionType sprmCUndocumented6817;
    public static WordSprmOptionType sprmCPbiImageIndex;
    public static WordSprmOptionType sprmCFWebHidden;
    public static WordSprmOptionType sprmCUndocumentedSpacing;
    public static WordSprmOptionType sprmCUndocumentedRevisionProblem;
    public static WordSprmOptionType sprmCUndocumented1;
    public static WordSprmOptionType sprmCUndocumented2;
    public static WordSprmOptionType sprmCUndocumented3;
    public static WordSprmOptionType sprmCUndocumented4;
    public static WordSprmOptionType sprmCUndocumented5;
    public static WordSprmOptionType sprmCUndocumented6;
    public static WordSprmOptionType sprmCUndocumented7;
    public static WordSprmOptionType sprmCUndocumented8;
    public static WordSprmOptionType sprmTCellBrcType;
    public static WordSprmOptionType sprmCPropRMark1;
    public static WordSprmOptionType sprmCWall;
    public static WordSprmOptionType sprmPWall;
    public static WordSprmOptionType sprmPPropRMark90;
    public static WordSprmOptionType sprmTWall;
    public static WordSprmOptionType sprmPFContSpacing;
    public static WordSprmOptionType sprmSWall;
    public static WordSprmOptionType sprmPDxcLeft;
    public static WordSprmOptionType sprmPDxcLeft1;
    public static WordSprmOptionType sprmPDxcRight;
    public static WordSprmOptionType sprmTFNoAllowOverlap;
}
public enum Syncfusion.DocIO.ReaderWriter.Biff_Records.WordSprmType : Enum {
    public int value__;
    public static WordSprmType ParagraphProperties;
    public static WordSprmType CharacterProperties;
    public static WordSprmType PictureProperties;
    public static WordSprmType SectionProperties;
    public static WordSprmType TableProperties;
}
public enum Syncfusion.DocIO.ReaderWriter.Biff_Records.WordStyleType : Enum {
    public int value__;
    public static WordStyleType ParagraphStyle;
    public static WordStyleType CharacterStyle;
    public static WordStyleType TableStyle;
    public static WordStyleType ListStyle;
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.BaseProps : FileShapeAddress {
    protected ShapeHorizontalAlignment m_horAlignment;
    protected ShapeVerticalAlignment m_vertAlignment;
    internal ShapeHorizontalAlignment HorizontalAlignment { get; internal set; }
    internal ShapeVerticalAlignment VerticalAlignment { get; internal set; }
    internal ShapeHorizontalAlignment get_HorizontalAlignment();
    internal void set_HorizontalAlignment(ShapeHorizontalAlignment value);
    internal ShapeVerticalAlignment get_VerticalAlignment();
    internal void set_VerticalAlignment(ShapeVerticalAlignment value);
}
internal abstract class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher._Blip : BaseEscherRecord {
    protected static int DEF_UID_LENGTH;
    private Guid m_guid;
    private Guid m_guid2;
    internal MSOBlipType Type { get; }
    internal Byte[] ImageBytes { get; internal set; }
    internal ImageRecord ImageRecord { get; internal set; }
    internal ImageFormat ImageFormat { get; }
    internal Guid Uid { get; internal set; }
    internal Guid Uid2 { get; internal set; }
    internal bool IsDib { get; }
    protected _Blip(WordDocument doc);
    internal MSOBlipType get_Type();
    internal abstract virtual Byte[] get_ImageBytes();
    internal abstract virtual void set_ImageBytes(Byte[] value);
    internal abstract virtual ImageRecord get_ImageRecord();
    internal abstract virtual void set_ImageRecord(ImageRecord value);
    internal ImageFormat get_ImageFormat();
    internal Guid get_Uid();
    internal void set_Uid(Guid value);
    internal Guid get_Uid2();
    internal void set_Uid2(Guid value);
    internal bool get_IsDib();
    protected void ReadGuid(Stream stream);
    internal bool HasUid2();
    internal abstract virtual BaseEscherRecord Clone();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher._FBSE : BaseWordRecord {
    public static int DEF_GUID_LENGTH;
    public static int DEF_FBSE_LENGTH;
    internal int m_btWin32;
    internal int m_btMacOS;
    internal Byte[] m_rgbUid;
    internal int m_tag;
    internal int m_size;
    internal int m_cRef;
    internal int m_foDelay;
    internal int m_usage;
    internal int m_cbName;
    internal int m_unused2;
    internal int m_unused3;
    public void Read(Stream stream);
    public void Write(Stream stream);
    public _FBSE Clone();
    internal bool Compare(_FBSE fbse);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher._MSOFBH : BaseWordRecord {
    internal static int DEF_ISCONTAINER;
    private int m_version;
    private int m_instance;
    private int m_type;
    private int m_length;
    internal WordDocument m_doc;
    internal int Instance { get; internal set; }
    internal bool IsContainer { get; internal set; }
    internal int Length { get; internal set; }
    internal MSOFBT Type { get; internal set; }
    internal int Version { get; internal set; }
    internal _MSOFBH(WordDocument doc);
    internal _MSOFBH(Stream stream, WordDocument doc);
    internal int get_Instance();
    internal void set_Instance(int value);
    internal bool get_IsContainer();
    internal void set_IsContainer(bool value);
    internal int get_Length();
    internal void set_Length(int value);
    internal MSOFBT get_Type();
    internal void set_Type(MSOFBT value);
    internal int get_Version();
    internal void set_Version(int value);
    internal void Read(Stream stream);
    internal void Write(Stream stream);
    internal BaseEscherRecord CreateRecordFromHeader();
    internal _MSOFBH Clone();
    internal static BaseEscherRecord ReadHeaderWithRecord(Stream stream, WordDocument doc);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.ArtObjectsRW : BaseWordRecord {
    private Stream m_stream;
    private DocIOSortedList`2<WordSubdocument, DocIOSortedList`2<int, FileShapeAddress>> m_fspas;
    private DocIOSortedList`2<WordSubdocument, DocIOSortedList`2<int, TextBoxStoryDescriptor>> m_txbxs;
    private DocIOSortedList`2<WordSubdocument, DocIOSortedList`2<int, BreakDescriptor>> m_txbxBkds;
    private int m_txBxMainEndPos;
    private int m_txBxHeaderEndPos;
    internal DocIOSortedList`2<int, FileShapeAddress> MainDocFSPAs { get; }
    internal DocIOSortedList`2<int, TextBoxStoryDescriptor> MainDocTxBxs { get; }
    internal DocIOSortedList`2<int, BreakDescriptor> MainDocTxBxBKDs { get; }
    internal DocIOSortedList`2<int, FileShapeAddress> HfDocFSPAs { get; }
    internal DocIOSortedList`2<int, TextBoxStoryDescriptor> HfDocTxBxs { get; }
    internal DocIOSortedList`2<int, BreakDescriptor> HfDocTxBxBKDs { get; }
    internal int StructsCount { get; }
    internal ArtObjectsRW(Fib fib, Stream stream);
    internal DocIOSortedList`2<int, FileShapeAddress> get_MainDocFSPAs();
    internal DocIOSortedList`2<int, TextBoxStoryDescriptor> get_MainDocTxBxs();
    internal DocIOSortedList`2<int, BreakDescriptor> get_MainDocTxBxBKDs();
    internal DocIOSortedList`2<int, FileShapeAddress> get_HfDocFSPAs();
    internal DocIOSortedList`2<int, TextBoxStoryDescriptor> get_HfDocTxBxs();
    internal DocIOSortedList`2<int, BreakDescriptor> get_HfDocTxBxBKDs();
    internal int get_StructsCount();
    internal void AddFSPA(FileShapeAddress fspa, WordSubdocument docType, int pos);
    internal void AddTxbx(WordSubdocument docType, TextBoxStoryDescriptor txbxStoryDesc, BreakDescriptor txbxBKDesc, int pos);
    internal void Read(Stream stream, Fib fib);
    internal void Write(Stream stream, Fib fib, int endMain, int endHeader);
    internal int GetTxbxPosition(bool isHdrTxbx, int index);
    internal int GetShapeObjectId(WordSubdocument subDocType, int txbxIndex);
    internal virtual void Close();
    internal FileShapeAddress FindFileShape(WordSubdocument docType, int CP);
    private void ReadShapeFSPA(WordSubdocument docType, int pos, int length);
    private void ReadTxbx(WordSubdocument docType, int pos, int length);
    private void ReadTxbxBkd(WordSubdocument docType, int pos, int length);
    private Int32[] GetPositions(int structSize, int length);
    private void WriteFSPAs(Fib fib, int endMain, int endHeader);
    private void WriteTxBxs(Fib fib, int endCharacter);
    private void WriteTxBxBKDs(Fib fib);
    private void WriteArtObjectsTxBxBKDs(DocIOSortedList`2<int, BreakDescriptor> stList, int endPos);
    private void WriteArtObjectsTxBxs(DocIOSortedList`2<int, TextBoxStoryDescriptor> stList, int endPos);
    private void WriteArtObjectsFSPAs(DocIOSortedList`2<int, FileShapeAddress> stList, int endPos);
    private TextBoxStoryDescriptor GetByIndex(DocIOSortedList`2<int, TextBoxStoryDescriptor> col, int index);
    private int GetKey(DocIOSortedList`2<int, TextBoxStoryDescriptor> col, int index);
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.BackgroundFillType : Enum {
    public int value__;
    public static BackgroundFillType msofillSolid;
    public static BackgroundFillType msofillPattern;
    public static BackgroundFillType msofillTexture;
    public static BackgroundFillType msofillPicture;
    public static BackgroundFillType msofillShade;
    public static BackgroundFillType msofillShadeCenter;
    public static BackgroundFillType msofillShadeShape;
    public static BackgroundFillType msofillShadeScale;
    public static BackgroundFillType msofillShadeTitle;
    public static BackgroundFillType msofillBackground;
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.BaseContainer : BaseEscherRecord {
    private ContainerCollection m_childrenContainers;
    internal ContainerCollection Children { get; }
    internal BaseContainer(WordDocument doc);
    internal BaseContainer(MSOFBT type, WordDocument doc);
    internal ContainerCollection get_Children();
    internal static bool RemoveContainerBySpid(BaseContainer baseContainer, int spid);
    internal void SynchronizeIdent(WTextBoxCollection autoShapeCollection, Int32& txbxShapeId, Int32& pictShapeId, Int32& txId, Int32& textColIndex);
    internal int GetSpid();
    internal bool SetSpid(int spid);
    internal BaseEscherRecord FindContainerByMsofbt(MSOFBT msofbt);
    internal BaseEscherRecord FindContainerByType(Type type);
    internal BaseContainer FindParentContainer(BaseContainer baseContainer);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
    internal virtual void CloneRelationsTo(WordDocument doc);
    internal void RemoveBaseContainerOle();
    private void SyncOPTTxid(MsofbtOPT optRecord, Int32& txId);
    private void SyncSpRecord(MsofbtSp msofbtSp, WTextBoxCollection autoShapeCollection, Int32& txbxShapeId, Int32& pictShapeId, Int32& textColIndex);
    internal virtual void Close();
}
internal abstract class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.BaseEscherRecord : BaseWordRecord {
    private _MSOFBH m_msofbh;
    internal WordDocument m_doc;
    internal _MSOFBH Header { get; internal set; }
    internal BaseEscherRecord(WordDocument doc);
    internal BaseEscherRecord(MSOFBT type, int version, WordDocument doc);
    internal _MSOFBH get_Header();
    internal void set_Header(_MSOFBH value);
    protected abstract virtual void ReadRecordData(Stream stream);
    protected abstract virtual void WriteRecordData(Stream stream);
    internal abstract virtual BaseEscherRecord Clone();
    internal bool ReadRecord(_MSOFBH msofbh, Stream stream);
    internal void ReadMsofbhWithRecord(Stream stream);
    internal int WriteMsofbhWithRecord(Stream stream);
    internal virtual void Close();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.ContainerCollection : List`1<object> {
    private WordDocument m_doc;
    internal ContainerCollection(WordDocument doc);
    internal int Write(Stream stream);
    internal void Read(Stream stream, int length);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.EscherClass : object {
    private static int DEF_MAIN_DRAWING_ID;
    private static int DEF_HF_DRAWING_ID;
    private static int DEF_MAIN_SPID;
    private static int DEF_HF_SPID;
    private static int DEF_MAIN_SPIDMAX;
    private static int DEF_HF_SPIDMAX;
    internal MsofbtDggContainer m_msofbtDggContainer;
    internal ContainerCollection m_dgContainers;
    private Dictionary`2<int, BaseContainer> m_containers;
    private MsofbtSpContainer m_backgroundContainer;
    private WordDocument m_doc;
    internal WordDocument Document { get; }
    internal Dictionary`2<int, BaseContainer> Containers { get; }
    internal MsofbtSpContainer BackgroundContainer { get; }
    internal EscherClass(WordDocument doc);
    internal EscherClass(Stream tableStream, Stream docStream, long dggInfoOffset, long dggInfoLength, WordDocument doc);
    internal WordDocument get_Document();
    internal Dictionary`2<int, BaseContainer> get_Containers();
    internal MsofbtSpContainer get_BackgroundContainer();
    internal void Read(Stream tableStream, long dggInfoLength, Stream docStream);
    internal void ReadContainersData(Stream Stream);
    internal void WriteContainersData(Stream stream);
    internal UInt32 WriteContainers(Stream stream);
    internal void AddContainerForSubDocument(WordSubdocument documentType, BaseEscherRecord baseEscherRecord);
    internal MsofbtDgContainer FindDgContainerForSubDocType(ShapeDocType ShapeDocType);
    internal void InitShapeSpids();
    internal void RemoveHeaderContainer();
    internal BaseContainer FindParentContainer(BaseContainer baseContainer);
    internal int GetTxid(int spid);
    internal int GetShapeOrderIndex(int spId);
    internal void SetTxid(int spid, int txid);
    internal BaseContainer FindContainerBySpid(int spid);
    internal MsofbtSpContainer FindInDgContainers(int spid);
    internal EscherShapeType GetBaseEscherRecordType(MsofbtSpContainer spCon);
    internal int CloneContainerBySpid(WordDocument destDoc, WordSubdocument docType, int spid, int newSpid);
    internal void RemoveEscherOle();
    internal void RemoveContainerBySpid(int spid, bool isHeaderContainer);
    internal void RemoveBStoreByPid(int pib);
    internal void ModifyBStoreByPid(int pib, MsofbtBSE bse);
    internal MsofbtSpContainer GetBackgroundContainerValue();
    internal bool CheckBStoreContByPid(int pib);
    private void ReadBseData(BaseContainer baseContainer, Stream stream);
    private void InitWriting();
    private void WriteDggContainer(Stream stream);
    private void WriteDgContainers(Stream stream);
    internal void CreateDgForSubDocuments();
    private void CreateDefaultDgg();
    private void CreateDgForSubDocument(ShapeDocType shapeDocType, int drawingId, int shapeId);
    private static MsofbtSpContainer FindContainerAmongChildren(BaseContainer parentContainer, int spid);
    private void AddShapeBse(MsofbtSpContainer spContainer);
    internal static ShapeDocType ConvertToShapeDocType(WordSubdocument docType);
    private void AddParentContainer(BaseContainer baseContainer);
    private MsofbtGeneral CreateGeneralData();
    private void InitFidcl(int dgid, int cspidCur);
    private bool FindFIDCLDgid(int dgid, FIDCL fidclObj);
    private int GetShapeCount(BaseContainer baseContainer);
    private int GetBlipId(MsofbtSpContainer spContainer);
    private void FillCollectionForSearch();
    internal void FillCollectionForSearch(BaseContainer baseContainer);
    private void AddSpContToSearchCol(MsofbtSpContainer spContainer);
    internal void Close();
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.EscherShapeType : Enum {
    public int value__;
    public static EscherShapeType msosptAccentBorderCallout1;
    public static EscherShapeType msosptAccentBorderCallout2;
    public static EscherShapeType msosptAccentBorderCallout3;
    public static EscherShapeType msosptAccentBorderCallout90;
    public static EscherShapeType msosptAccenrCallout1;
    public static EscherShapeType msosptAccentCallout2;
    public static EscherShapeType msosptAccentCallout3;
    public static EscherShapeType msosptAccentCallout90;
    public static EscherShapeType msosptActionButtonBackPrevious;
    public static EscherShapeType msosptActionButtonBeginning;
    public static EscherShapeType msosptActionButtonBlank;
    public static EscherShapeType msosptActionButtonDocument;
    public static EscherShapeType msosptActionButtonEnd;
    public static EscherShapeType msosptActionButtonForwardNext;
    public static EscherShapeType msosptActionButtonHelp;
    public static EscherShapeType msosptActionButtonHome;
    public static EscherShapeType msosptActionButtonInformation;
    public static EscherShapeType msosptActionButtonMovie;
    public static EscherShapeType msosptActionButtonReturn;
    public static EscherShapeType msosptActionButtonSound;
    public static EscherShapeType msosptArc;
    public static EscherShapeType msosptArrow;
    public static EscherShapeType msosptBalloon;
    public static EscherShapeType msosptBentArrow;
    public static EscherShapeType msosptBentConnector2;
    public static EscherShapeType msosptBentConnector3;
    public static EscherShapeType msosptBentConnector4;
    public static EscherShapeType msosptBentConnector5;
    public static EscherShapeType msosptBentUpArrow;
    public static EscherShapeType msosptBevel;
    public static EscherShapeType msosptBlockArc;
    public static EscherShapeType msosptBorderCallout1;
    public static EscherShapeType msosptBorderCallout2;
    public static EscherShapeType msosptBorderCallout3;
    public static EscherShapeType msosptBorderCallout90;
    public static EscherShapeType msosptBracePair;
    public static EscherShapeType msosptBracketPair;
    public static EscherShapeType msosptCallout1;
    public static EscherShapeType msosptCallout2;
    public static EscherShapeType msosptCallout3;
    public static EscherShapeType msosptCallout90;
    public static EscherShapeType msosptCan;
    public static EscherShapeType msosptChevron;
    public static EscherShapeType msosptCircularArrow;
    public static EscherShapeType msosptCloudCallout;
    public static EscherShapeType msosptCube;
    public static EscherShapeType msosptCurvedConnector2;
    public static EscherShapeType msosptCurvedConnector3;
    public static EscherShapeType msosptCurvedConnector4;
    public static EscherShapeType msosptCurvedConnector5;
    public static EscherShapeType msosptCurvedDownArrow;
    public static EscherShapeType msosptCurvedLeftArrow;
    public static EscherShapeType msosptCurvedRightArrow;
    public static EscherShapeType msosptCurvedUpArrow;
    public static EscherShapeType msosptCustomShape;
    public static EscherShapeType msosptDiamond;
    public static EscherShapeType msosptDonut;
    public static EscherShapeType msosptDoubleWave;
    public static EscherShapeType msosptDownArrow;
    public static EscherShapeType msosptDownArrowCallout;
    public static EscherShapeType msosptEllipse;
    public static EscherShapeType msosptEllipseRibbon;
    public static EscherShapeType msosptEllipseRibbon2;
    public static EscherShapeType msosptFlowChartAlternateProcess;
    public static EscherShapeType msosptFlowChartCollate;
    public static EscherShapeType msosptFlowChartConnector;
    public static EscherShapeType msosptFlowChartDecision;
    public static EscherShapeType msosptFlowChartDelay;
    public static EscherShapeType msosptFlowChartDisplay;
    public static EscherShapeType msosptFlowChartDocument;
    public static EscherShapeType msosptFlowChartExtract;
    public static EscherShapeType msosptFlowChartInputOutput;
    public static EscherShapeType msosptFlowChartInternalStorage;
    public static EscherShapeType msosptFlowChartMagneticDisk;
    public static EscherShapeType msosptFlowChartMagneticDrum;
    public static EscherShapeType msosptFlowChartMagneticTape;
    public static EscherShapeType msosptFlowChartManualInput;
    public static EscherShapeType msosptFlowChartManualOperation;
    public static EscherShapeType msosptFlowChartMerge;
    public static EscherShapeType msosptFlowChartMultidocument;
    public static EscherShapeType msosptFlowChartOfflineStorage;
    public static EscherShapeType msosptFlowChartOffpageConnector;
    public static EscherShapeType msosptFlowChartOnlineStorage;
    public static EscherShapeType msosptFlowChartOr;
    public static EscherShapeType msosptFlowChartPredefinedProcess;
    public static EscherShapeType msosptFlowChartPreparation;
    public static EscherShapeType msosptFlowChartProcess;
    public static EscherShapeType msosptFlowChartPunchedCard;
    public static EscherShapeType msosptFlowChartPunchedTape;
    public static EscherShapeType msosptFlowChartSort;
    public static EscherShapeType msosptFlowChartSummingJunction;
    public static EscherShapeType msosptFlowChartTerminator;
    public static EscherShapeType msosptFoldedCorner;
    public static EscherShapeType msosptGroup;
    public static EscherShapeType msosptHeart;
    public static EscherShapeType msosptHexagon;
    public static EscherShapeType msosptHomePlate;
    public static EscherShapeType msosptHorizontalScroll;
    public static EscherShapeType msosptHostControl;
    public static EscherShapeType msosptPictureFrame;
    public static EscherShapeType msosptIrregularSeal1;
    public static EscherShapeType msosptIrregularSeal2;
    public static EscherShapeType msosptLeftArrow;
    public static EscherShapeType msosptLeftArrowCallout;
    public static EscherShapeType msosptLeftBrace;
    public static EscherShapeType msosptLeftBracket;
    public static EscherShapeType msosptLeftRightArrow;
    public static EscherShapeType msosptLeftRightArrowCallout;
    public static EscherShapeType msosptLeftRightUpArrow;
    public static EscherShapeType msosptLeftUpArrow;
    public static EscherShapeType msosptLightningBolt;
    public static EscherShapeType msosptLine;
    public static EscherShapeType msosptMoon;
    public static EscherShapeType msosptMin;
    public static EscherShapeType msosptNoSmoking;
    public static EscherShapeType msosptNotchedRightArrow;
    public static EscherShapeType msosptOctagon;
    public static EscherShapeType msosptOleControl;
    public static EscherShapeType msosptOleObject;
    public static EscherShapeType msosptParallelogram;
    public static EscherShapeType msosptPentagon;
    public static EscherShapeType msosptPlaque;
    public static EscherShapeType msosptPlus;
    public static EscherShapeType msosptQuadArrow;
    public static EscherShapeType msosptQuadArrowCallout;
    public static EscherShapeType msosptRectangle;
    public static EscherShapeType msosptRibbon;
    public static EscherShapeType msosptRibbon2;
    public static EscherShapeType msosptRightArrowCallout;
    public static EscherShapeType msosptRightBrace;
    public static EscherShapeType msosptRightBracket;
    public static EscherShapeType msosptRightTriangle;
    public static EscherShapeType msosptRoundRectangle;
    public static EscherShapeType msosptSeal;
    public static EscherShapeType msosptSeal16;
    public static EscherShapeType msosptSeal24;
    public static EscherShapeType msosptSeal32;
    public static EscherShapeType msosptSeal4;
    public static EscherShapeType msosptSeal8;
    public static EscherShapeType msosptSmileyFace;
    public static EscherShapeType msosptStar;
    public static EscherShapeType msosptStraightConnector1;
    public static EscherShapeType msosptStripedRightArrow;
    public static EscherShapeType msosptSun;
    public static EscherShapeType msosptTextBox;
    public static EscherShapeType msosptTextArchDownCurve;
    public static EscherShapeType msosptTextArchDownPour;
    public static EscherShapeType msosptTextArchUpCurve;
    public static EscherShapeType msosptTextArchUpPour;
    public static EscherShapeType msosptTextButtonCurve;
    public static EscherShapeType msosptTextButtonPour;
    public static EscherShapeType msosptTextCanDown;
    public static EscherShapeType msosptTextCanUp;
    public static EscherShapeType msosptTextCascadeDown;
    public static EscherShapeType msosptTextCascadeUp;
    public static EscherShapeType msosptTextChevron;
    public static EscherShapeType msosptTextChevronInverted;
    public static EscherShapeType msosptTextCircleCurve;
    public static EscherShapeType msosptTextCirclePour;
    public static EscherShapeType msosptTextCurve;
    public static EscherShapeType msosptTextCurveDown;
    public static EscherShapeType msosptTextCurveUp;
    public static EscherShapeType msosptTextDeflate;
    public static EscherShapeType msosptTextDeflateBottom;
    public static EscherShapeType msosptTextDeflateInflate;
    public static EscherShapeType msosptTextDeflateInflateDeflate;
    public static EscherShapeType msosptTextDeflateTop;
    public static EscherShapeType msosptTextFadeDown;
    public static EscherShapeType msosptTextFadeLeft;
    public static EscherShapeType msosptTextFadeRight;
    public static EscherShapeType msosptTextFadeUp;
    public static EscherShapeType msosptTextHexagon;
    public static EscherShapeType msosptTextInflate;
    public static EscherShapeType msosptTextInflateBottom;
    public static EscherShapeType msosptTextInflateTop;
    public static EscherShapeType msosptTextOctagon;
    public static EscherShapeType msosptTextOnCurve;
    public static EscherShapeType msosptTextOnRing;
    public static EscherShapeType msosptTextPlainText;
    public static EscherShapeType msosptTextRing;
    public static EscherShapeType msosptTextRingInside;
    public static EscherShapeType msosptTextRingOutside;
    public static EscherShapeType msosptTextSimple;
    public static EscherShapeType msosptTextSlantDown;
    public static EscherShapeType msosptTextSlantUp;
    public static EscherShapeType msosptTextStop;
    public static EscherShapeType msosptTextTriangle;
    public static EscherShapeType msosptTextTriangleInverted;
    public static EscherShapeType msosptTextWave;
    public static EscherShapeType msosptTextWave1;
    public static EscherShapeType msosptTextWave2;
    public static EscherShapeType msosptTextWave3;
    public static EscherShapeType msosptTextWave4;
    public static EscherShapeType msosptThickArrow;
    public static EscherShapeType msosptTrapezoid;
    public static EscherShapeType msosptTriangle;
    public static EscherShapeType msosptUpArrow;
    public static EscherShapeType msosptUpArrowCallout;
    public static EscherShapeType msosptUpDownArrow;
    public static EscherShapeType msosptUpDownArrowCallout;
    public static EscherShapeType msosptUturnArrow;
    public static EscherShapeType msosptVerticalScroll;
    public static EscherShapeType msosptWave;
    public static EscherShapeType msosptWedgeEllipseCallout;
    public static EscherShapeType msosptWedgeRectCallout;
    public static EscherShapeType msosptWedgeRRectCallout;
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FIDCL : BaseWordRecord {
    internal int m_dgid;
    internal int m_cspidCur;
    internal FIDCL(Stream stream);
    internal FIDCL(int dgid, int cspidCur);
    internal void Write(Stream stream);
    internal void Read(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FileShapeAddress : BaseWordRecord {
    internal static int DEF_FSPA_LENGTH;
    private int m_spid;
    private int m_xaLeft;
    private int m_yaTop;
    private int m_xaRight;
    private int m_yaBottom;
    private int m_relHrzPos;
    private int m_relVrtPos;
    private int m_wrapStyle;
    private int m_wrapType;
    private int m_cTxbx;
    private byte m_bFlags;
    internal int Spid { get; internal set; }
    internal int XaLeft { get; internal set; }
    internal int YaTop { get; internal set; }
    internal int XaRight { get; internal set; }
    internal int YaBottom { get; internal set; }
    internal bool IsHeaderShape { get; internal set; }
    internal HorizontalOrigin RelHrzPos { get; internal set; }
    internal VerticalOrigin RelVrtPos { get; internal set; }
    internal TextWrappingStyle TextWrappingStyle { get; internal set; }
    internal TextWrappingType TextWrappingType { get; internal set; }
    internal bool IsRcaSimple { get; internal set; }
    internal bool IsBelowText { get; internal set; }
    internal bool IsAnchorLock { get; internal set; }
    internal int TxbxCount { get; internal set; }
    internal int Height { get; internal set; }
    internal int Width { get; internal set; }
    internal FileShapeAddress(Stream stream);
    internal int get_Spid();
    internal void set_Spid(int value);
    internal int get_XaLeft();
    internal void set_XaLeft(int value);
    internal int get_YaTop();
    internal void set_YaTop(int value);
    internal int get_XaRight();
    internal void set_XaRight(int value);
    internal int get_YaBottom();
    internal void set_YaBottom(int value);
    internal bool get_IsHeaderShape();
    internal void set_IsHeaderShape(bool value);
    internal HorizontalOrigin get_RelHrzPos();
    internal void set_RelHrzPos(HorizontalOrigin value);
    internal VerticalOrigin get_RelVrtPos();
    internal void set_RelVrtPos(VerticalOrigin value);
    internal TextWrappingStyle get_TextWrappingStyle();
    internal void set_TextWrappingStyle(TextWrappingStyle value);
    internal TextWrappingType get_TextWrappingType();
    internal void set_TextWrappingType(TextWrappingType value);
    internal bool get_IsRcaSimple();
    internal void set_IsRcaSimple(bool value);
    internal bool get_IsBelowText();
    internal void set_IsBelowText(bool value);
    internal bool get_IsAnchorLock();
    internal void set_IsAnchorLock(bool value);
    internal int get_TxbxCount();
    internal void set_TxbxCount(int value);
    internal int get_Height();
    internal void set_Height(int value);
    internal int get_Width();
    internal void set_Width(int value);
    internal void Read(Stream stream);
    internal void Write(Stream stream);
    internal FileShapeAddress Clone();
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FlipOrientation : Enum {
    public int value__;
    public static FlipOrientation None;
    public static FlipOrientation Horizontal;
    public static FlipOrientation Vertical;
    public static FlipOrientation Both;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTE3dObject : Enum {
    public int value__;
    public static FOPTE3dObject c3DSpecularAmt;
    public static FOPTE3dObject c3DDiffuseAmt;
    public static FOPTE3dObject c3DShininess;
    public static FOPTE3dObject c3DEdgeThickness;
    public static FOPTE3dObject c3DExtrudeForward;
    public static FOPTE3dObject c3DExtrudeBackward;
    public static FOPTE3dObject c3DExtrudePlane;
    public static FOPTE3dObject c3DExtrusionColor;
    public static FOPTE3dObject c3DCrMod;
    public static FOPTE3dObject f3D;
    public static FOPTE3dObject fc3DMetallic;
    public static FOPTE3dObject fc3DUseExtrusionColor;
    public static FOPTE3dObject fc3DLightFace;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTE3dStyle : Enum {
    public int value__;
    public static FOPTE3dStyle c3DYRotationAngle;
    public static FOPTE3dStyle c3DXRotationAngle;
    public static FOPTE3dStyle c3DRotationAxisX;
    public static FOPTE3dStyle c3DRotationAxisY;
    public static FOPTE3dStyle c3DRotationAxisZ;
    public static FOPTE3dStyle c3DRotationAngle;
    public static FOPTE3dStyle c3DRotationCenterX;
    public static FOPTE3dStyle c3DRotationCenterY;
    public static FOPTE3dStyle c3DRotationCenterZ;
    public static FOPTE3dStyle c3DRenderMode;
    public static FOPTE3dStyle c3DTolerance;
    public static FOPTE3dStyle c3DXViewpoint;
    public static FOPTE3dStyle c3DYViewpoint;
    public static FOPTE3dStyle c3DZViewpoint;
    public static FOPTE3dStyle c3DOriginX;
    public static FOPTE3dStyle c3DOriginY;
    public static FOPTE3dStyle c3DSkewAngle;
    public static FOPTE3dStyle c3DSkewAmount;
    public static FOPTE3dStyle c3DAmbientIntensity;
    public static FOPTE3dStyle c3DKeyX;
    public static FOPTE3dStyle c3DKeyY;
    public static FOPTE3dStyle c3DKeyZ;
    public static FOPTE3dStyle c3DKeyIntensity;
    public static FOPTE3dStyle c3DFillX;
    public static FOPTE3dStyle c3DFillY;
    public static FOPTE3dStyle c3DFillZ;
    public static FOPTE3dStyle c3DFillIntensity;
    public static FOPTE3dStyle fc3DConstrainRotation;
    public static FOPTE3dStyle fc3DRotationCenterAuto;
    public static FOPTE3dStyle fc3DParallel;
    public static FOPTE3dStyle fc3DKeyHarsh;
    public static FOPTE3dStyle fc3DFillHarsh;
}
internal abstract class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEBase : BaseWordRecord {
    private int m_id;
    private bool m_isBid;
    internal int Id { get; internal set; }
    internal bool IsBid { get; }
    internal FOPTEBase(int id, bool isBid);
    internal int get_Id();
    internal void set_Id(int value);
    internal bool get_IsBid();
    internal abstract virtual void Write(Stream stream);
    internal abstract virtual FOPTEBase Clone();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEBid : FOPTEBase {
    private UInt32 m_value;
    internal UInt32 Value { get; internal set; }
    internal FOPTEBid(int id, bool isBid, UInt32 value);
    internal UInt32 get_Value();
    internal void set_Value(UInt32 value);
    internal virtual void Write(Stream stream);
    internal virtual FOPTEBase Clone();
    internal StringBuilder GetAsString();
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEBlip : Enum {
    public int value__;
    public static FOPTEBlip cropFromTop;
    public static FOPTEBlip cropFromBottom;
    public static FOPTEBlip cropFromLeft;
    public static FOPTEBlip cropFromRight;
    public static FOPTEBlip pib;
    public static FOPTEBlip pibName;
    public static FOPTEBlip pibFlags;
    public static FOPTEBlip pictureTransparent;
    public static FOPTEBlip pictureContrast;
    public static FOPTEBlip pictureBrightness;
    public static FOPTEBlip pictureGamma;
    public static FOPTEBlip pictureId;
    public static FOPTEBlip pictureDblCrMod;
    public static FOPTEBlip pictureFillCrMod;
    public static FOPTEBlip pictureLineCrMod;
    public static FOPTEBlip pibPrint;
    public static FOPTEBlip pibPrintName;
    public static FOPTEBlip pibPrintFlags;
    public static FOPTEBlip fNoHitTestPicture;
    public static FOPTEBlip pictureGray;
    public static FOPTEBlip pictureBiLevel;
    public static FOPTEBlip pictureActive;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEBottomLineStyle : Enum {
    public int value__;
    public static FOPTEBottomLineStyle lineBottomColor;
    public static FOPTEBottomLineStyle lineBottomOpacity;
    public static FOPTEBottomLineStyle lineBottomBackColor;
    public static FOPTEBottomLineStyle lineBottomCrMod;
    public static FOPTEBottomLineStyle lineBottomType;
    public static FOPTEBottomLineStyle lineBottomFillBlip;
    public static FOPTEBottomLineStyle lineBottomFillBlipName;
    public static FOPTEBottomLineStyle lineBottomFillBlipFlags;
    public static FOPTEBottomLineStyle lineBottomFillWidth;
    public static FOPTEBottomLineStyle lineBottomFillHeight;
    public static FOPTEBottomLineStyle lineBottomFillDztype;
    public static FOPTEBottomLineStyle lineBottomWidth;
    public static FOPTEBottomLineStyle lineBottomMiterLimit;
    public static FOPTEBottomLineStyle lineBottomStyle;
    public static FOPTEBottomLineStyle lineBottomDashing;
    public static FOPTEBottomLineStyle lineBottomDashStyle;
    public static FOPTEBottomLineStyle lineBottomStartArrowhead;
    public static FOPTEBottomLineStyle lineBottomEndArrowhead;
    public static FOPTEBottomLineStyle lineBottomStartArrowWidth;
    public static FOPTEBottomLineStyle lineBottomStartArrowLength;
    public static FOPTEBottomLineStyle lineBottomEndArrowWidth;
    public static FOPTEBottomLineStyle lineBottomEndArrowLength;
    public static FOPTEBottomLineStyle lineBottomJoinStyle;
    public static FOPTEBottomLineStyle lineBottomEndCapStyle;
    public static FOPTEBottomLineStyle lineBottomColorExt;
    public static FOPTEBottomLineStyle reserved1562;
    public static FOPTEBottomLineStyle lineBottomColorExtMod;
    public static FOPTEBottomLineStyle reserved1564;
    public static FOPTEBottomLineStyle lineBottomBackColorExt;
    public static FOPTEBottomLineStyle reserved1566;
    public static FOPTEBottomLineStyle lineBottomBackColorExtMod;
    public static FOPTEBottomLineStyle reserved1568;
    public static FOPTEBottomLineStyle reserved1569;
    public static FOPTEBottomLineStyle reserved1570;
    public static FOPTEBottomLineStyle bottomLineStyleBooleanProperties;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTECallout : Enum {
    public int value__;
    public static FOPTECallout spcot;
    public static FOPTECallout dxyCalloutGap;
    public static FOPTECallout spcoa;
    public static FOPTECallout spcod;
    public static FOPTECallout dxyCalloutDropSpecified;
    public static FOPTECallout dxyCalloutLengthSpecified;
    public static FOPTECallout fCallout;
    public static FOPTECallout fCalloutAccentBar;
    public static FOPTECallout fCalloutTextBorder;
    public static FOPTECallout fCalloutMinusX;
    public static FOPTECallout fCalloutMinusY;
    public static FOPTECallout fCalloutDropAuto;
    public static FOPTECallout fCalloutLengthSpecified;
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEComplex : FOPTEBase {
    private int m_dataLength;
    private Byte[] m_data;
    internal Byte[] Value { get; internal set; }
    internal FOPTEComplex(int id, bool isBid, int valueLength);
    internal Byte[] get_Value();
    internal void set_Value(Byte[] value);
    internal void ReadData(Stream stream);
    internal virtual void Write(Stream stream);
    internal void WriteData(Stream stream);
    internal virtual FOPTEBase Clone();
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEFillStyle : Enum {
    public int value__;
    public static FOPTEFillStyle fillType;
    public static FOPTEFillStyle fillColor;
    public static FOPTEFillStyle fillOpacity;
    public static FOPTEFillStyle fillBackColor;
    public static FOPTEFillStyle fillBackOpacity;
    public static FOPTEFillStyle fillCrMod;
    public static FOPTEFillStyle fillBlip;
    public static FOPTEFillStyle fillBlipName;
    public static FOPTEFillStyle fillBlipFlags;
    public static FOPTEFillStyle fillWidth;
    public static FOPTEFillStyle fillHeight;
    public static FOPTEFillStyle fillAngle;
    public static FOPTEFillStyle fillFocus;
    public static FOPTEFillStyle fillToLeft;
    public static FOPTEFillStyle fillToTop;
    public static FOPTEFillStyle fillToRight;
    public static FOPTEFillStyle fillToBottom;
    public static FOPTEFillStyle fillRectLeft;
    public static FOPTEFillStyle fillRectTop;
    public static FOPTEFillStyle fillRectRight;
    public static FOPTEFillStyle fillRectBottom;
    public static FOPTEFillStyle fillDztype;
    public static FOPTEFillStyle fillShadePreset;
    public static FOPTEFillStyle fillShadeColors;
    public static FOPTEFillStyle fillOriginX;
    public static FOPTEFillStyle fillOriginY;
    public static FOPTEFillStyle fillShapeOriginX;
    public static FOPTEFillStyle fillShapeOriginY;
    public static FOPTEFillStyle fillShadeType;
    public static FOPTEFillStyle fFilled;
    public static FOPTEFillStyle fHitTestFill;
    public static FOPTEFillStyle fillShape;
    public static FOPTEFillStyle fillUseRect;
    public static FOPTEFillStyle fNoFillHitTest;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEGeometry : Enum {
    public int value__;
    public static FOPTEGeometry geoLeft;
    public static FOPTEGeometry geoTop;
    public static FOPTEGeometry geoRight;
    public static FOPTEGeometry geoBottom;
    public static FOPTEGeometry shapePath;
    public static FOPTEGeometry pVertices;
    public static FOPTEGeometry pSegmentInfo;
    public static FOPTEGeometry adjustValue;
    public static FOPTEGeometry adjust2Value;
    public static FOPTEGeometry adjust3Value;
    public static FOPTEGeometry adjust4Value;
    public static FOPTEGeometry adjust5Value;
    public static FOPTEGeometry adjust6Value;
    public static FOPTEGeometry adjust7Value;
    public static FOPTEGeometry adjust8Value;
    public static FOPTEGeometry adjust9Value;
    public static FOPTEGeometry adjust10Value;
    public static FOPTEGeometry fShadowOK;
    public static FOPTEGeometry f3DOK;
    public static FOPTEGeometry fLineOK;
    public static FOPTEGeometry fGtextOK;
    public static FOPTEGeometry fFillShadeShapeOK;
    public static FOPTEGeometry fFillOK;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEGeoText : Enum {
    public int value__;
    public static FOPTEGeoText gtextUNICODE;
    public static FOPTEGeoText gtextRTF;
    public static FOPTEGeoText gtextAlign;
    public static FOPTEGeoText gtextSize;
    public static FOPTEGeoText gtextSpacing;
    public static FOPTEGeoText gtextFont;
    public static FOPTEGeoText gtextFReverseRows;
    public static FOPTEGeoText fGtext;
    public static FOPTEGeoText gtextFVertical;
    public static FOPTEGeoText gtextFKern;
    public static FOPTEGeoText gtextFTight;
    public static FOPTEGeoText gtextFStretch;
    public static FOPTEGeoText gtextFShrinkFit;
    public static FOPTEGeoText gtextFBestFit;
    public static FOPTEGeoText gtextFNormalize;
    public static FOPTEGeoText gtextFDxMeasure;
    public static FOPTEGeoText gtextFBold;
    public static FOPTEGeoText gtextFItalic;
    public static FOPTEGeoText gtextFUnderline;
    public static FOPTEGeoText gtextFShadow;
    public static FOPTEGeoText gtextFSmallcaps;
    public static FOPTEGeoText gtextFStrikethrough;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEGroupShape : Enum {
    public int value__;
    public static FOPTEGroupShape wzName;
    public static FOPTEGroupShape wzDescription;
    public static FOPTEGroupShape pihlShape;
    public static FOPTEGroupShape pWrapPolygonVertices;
    public static FOPTEGroupShape dxWrapDistLeft;
    public static FOPTEGroupShape dyWrapDistTop;
    public static FOPTEGroupShape dxWrapDistRight;
    public static FOPTEGroupShape dyWrapDistBottom;
    public static FOPTEGroupShape lidRegroup;
    public static FOPTEGroupShape unused906;
    public static FOPTEGroupShape wzTooltip;
    public static FOPTEGroupShape wzScript;
    public static FOPTEGroupShape posh;
    public static FOPTEGroupShape posrelh;
    public static FOPTEGroupShape posv;
    public static FOPTEGroupShape posrelv;
    public static FOPTEGroupShape pctHR;
    public static FOPTEGroupShape alignHR;
    public static FOPTEGroupShape dxHeightHR;
    public static FOPTEGroupShape dxWidthHR;
    public static FOPTEGroupShape wzScriptExtAttr;
    public static FOPTEGroupShape scriptLang;
    public static FOPTEGroupShape wzScriptLangAttr;
    public static FOPTEGroupShape borderTopColor;
    public static FOPTEGroupShape borderLeftColor;
    public static FOPTEGroupShape borderBottomColor;
    public static FOPTEGroupShape borderRightColor;
    public static FOPTEGroupShape tableProperties;
    public static FOPTEGroupShape tableRowProperties;
    public static FOPTEGroupShape wzWebBot;
    public static FOPTEGroupShape metroBlob;
    public static FOPTEGroupShape dhgt;
    public static FOPTEGroupShape fEditedWrap;
    public static FOPTEGroupShape fBehindDocument;
    public static FOPTEGroupShape fOnDblClickNotify;
    public static FOPTEGroupShape fIsButton;
    public static FOPTEGroupShape fOneD;
    public static FOPTEGroupShape fHidden;
    public static FOPTEGroupShape fPrint;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTELeftLineStyle : Enum {
    public int value__;
    public static FOPTELeftLineStyle lineLeftColor;
    public static FOPTELeftLineStyle lineLeftOpacity;
    public static FOPTELeftLineStyle lineLeftBackColor;
    public static FOPTELeftLineStyle lineLeftCrMod;
    public static FOPTELeftLineStyle lineLeftType;
    public static FOPTELeftLineStyle lineLeftFillBlip;
    public static FOPTELeftLineStyle lineLeftFillBlipName;
    public static FOPTELeftLineStyle lineLeftFillBlipFlags;
    public static FOPTELeftLineStyle lineLeftFillWidth;
    public static FOPTELeftLineStyle lineLeftFillHeight;
    public static FOPTELeftLineStyle lineLeftFillDztype;
    public static FOPTELeftLineStyle lineLeftWidth;
    public static FOPTELeftLineStyle lineLeftMiterLimit;
    public static FOPTELeftLineStyle lineLeftStyle;
    public static FOPTELeftLineStyle lineLeftDashing;
    public static FOPTELeftLineStyle lineLeftDashStyle;
    public static FOPTELeftLineStyle lineLeftStartArrowhead;
    public static FOPTELeftLineStyle lineLeftEndArrowhead;
    public static FOPTELeftLineStyle lineLeftStartArrowWidth;
    public static FOPTELeftLineStyle lineLeftStartArrowLength;
    public static FOPTELeftLineStyle lineLeftEndArrowWidth;
    public static FOPTELeftLineStyle lineLeftEndArrowLength;
    public static FOPTELeftLineStyle lineLeftJoinStyle;
    public static FOPTELeftLineStyle lineLeftEndCapStyle;
    public static FOPTELeftLineStyle lineLeftColorExt;
    public static FOPTELeftLineStyle reserved1370;
    public static FOPTELeftLineStyle lineLeftColorExtMod;
    public static FOPTELeftLineStyle reserved1372;
    public static FOPTELeftLineStyle lineLeftBackColorExt;
    public static FOPTELeftLineStyle reserved1374;
    public static FOPTELeftLineStyle lineLeftBackColorExtMod;
    public static FOPTELeftLineStyle reserved1376;
    public static FOPTELeftLineStyle reserved1377;
    public static FOPTELeftLineStyle reserved1378;
    public static FOPTELeftLineStyle leftLineStyleBooleanProperties;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTELineStyle : Enum {
    public int value__;
    public static FOPTELineStyle lineColor;
    public static FOPTELineStyle lineOpacity;
    public static FOPTELineStyle lineBackColor;
    public static FOPTELineStyle lineCrMod;
    public static FOPTELineStyle lineType;
    public static FOPTELineStyle lineFillBlip;
    public static FOPTELineStyle lineFillBlipName;
    public static FOPTELineStyle lineFillBlipFlags;
    public static FOPTELineStyle lineFillWidth;
    public static FOPTELineStyle lineFillHeight;
    public static FOPTELineStyle lineFillDztype;
    public static FOPTELineStyle lineWidth;
    public static FOPTELineStyle lineMiterLimit;
    public static FOPTELineStyle lineStyle;
    public static FOPTELineStyle lineDashing;
    public static FOPTELineStyle lineDashStyle;
    public static FOPTELineStyle lineStartArrowhead;
    public static FOPTELineStyle lineEndArrowhead;
    public static FOPTELineStyle lineStartArrowWidth;
    public static FOPTELineStyle lineStartArrowLength;
    public static FOPTELineStyle lineEndArrowWidth;
    public static FOPTELineStyle lineEndArrowLength;
    public static FOPTELineStyle lineJoinStyle;
    public static FOPTELineStyle lineEndCapStyle;
    public static FOPTELineStyle lineColorExt;
    public static FOPTELineStyle reserved474;
    public static FOPTELineStyle lineColorExtMod;
    public static FOPTELineStyle reserved476;
    public static FOPTELineStyle lineBackColorExt;
    public static FOPTELineStyle reserved478;
    public static FOPTELineStyle lineBackColorExtMod;
    public static FOPTELineStyle reserved480;
    public static FOPTELineStyle reserved481;
    public static FOPTELineStyle reserved482;
    public static FOPTELineStyle lineStyleBooleanProperties;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEPerspectiveStyle : Enum {
    public int value__;
    public static FOPTEPerspectiveStyle perspectiveType;
    public static FOPTEPerspectiveStyle perspectiveOffsetX;
    public static FOPTEPerspectiveStyle perspectiveOffsetY;
    public static FOPTEPerspectiveStyle perspectiveScaleXToX;
    public static FOPTEPerspectiveStyle perspectiveScaleYToX;
    public static FOPTEPerspectiveStyle perspectiveScaleXToY;
    public static FOPTEPerspectiveStyle perspectiveScaleYToY;
    public static FOPTEPerspectiveStyle perspectivePerspectiveX;
    public static FOPTEPerspectiveStyle perspectivePerspectiveY;
    public static FOPTEPerspectiveStyle perspectiveWeight;
    public static FOPTEPerspectiveStyle perspectiveOriginX;
    public static FOPTEPerspectiveStyle perspectiveOriginY;
    public static FOPTEPerspectiveStyle fPerspective;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEProtection : Enum {
    public int value__;
    public static FOPTEProtection fLockRotation;
    public static FOPTEProtection fLockAspectRatio;
    public static FOPTEProtection fLockPosition;
    public static FOPTEProtection fLockAgainstSelect;
    public static FOPTEProtection fLockCropping;
    public static FOPTEProtection fLockVertices;
    public static FOPTEProtection fLockText;
    public static FOPTEProtection fLockAdjustHandles;
    public static FOPTEProtection fLockAgainstGrouping;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTERightLineStyle : Enum {
    public int value__;
    public static FOPTERightLineStyle lineRightColor;
    public static FOPTERightLineStyle lineRightOpacity;
    public static FOPTERightLineStyle lineRightBackColor;
    public static FOPTERightLineStyle lineRightCrMod;
    public static FOPTERightLineStyle lineRightType;
    public static FOPTERightLineStyle lineRightFillBlip;
    public static FOPTERightLineStyle lineRightFillBlipName;
    public static FOPTERightLineStyle lineRightFillBlipFlags;
    public static FOPTERightLineStyle lineRightFillWidth;
    public static FOPTERightLineStyle lineRightFillHeight;
    public static FOPTERightLineStyle lineRightFillDztype;
    public static FOPTERightLineStyle lineRightWidth;
    public static FOPTERightLineStyle lineRightMiterLimit;
    public static FOPTERightLineStyle lineRightStyle;
    public static FOPTERightLineStyle lineRightDashing;
    public static FOPTERightLineStyle lineRightDashStyle;
    public static FOPTERightLineStyle lineRightStartArrowhead;
    public static FOPTERightLineStyle lineRightEndArrowhead;
    public static FOPTERightLineStyle lineRightStartArrowWidth;
    public static FOPTERightLineStyle lineRightStartArrowLength;
    public static FOPTERightLineStyle lineRightEndArrowWidth;
    public static FOPTERightLineStyle lineRightEndArrowLength;
    public static FOPTERightLineStyle lineRightJoinStyle;
    public static FOPTERightLineStyle lineRightEndCapStyle;
    public static FOPTERightLineStyle lineRightColorExt;
    public static FOPTERightLineStyle reserved1498;
    public static FOPTERightLineStyle lineRightColorExtMod;
    public static FOPTERightLineStyle reserved1500;
    public static FOPTERightLineStyle lineRightBackColorExt;
    public static FOPTERightLineStyle reserved1502;
    public static FOPTERightLineStyle lineRightBackColorExtMod;
    public static FOPTERightLineStyle reserved1504;
    public static FOPTERightLineStyle reserved1505;
    public static FOPTERightLineStyle reserved1506;
    public static FOPTERightLineStyle rightLineStyleBooleanProperties;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEShadowStyle : Enum {
    public int value__;
    public static FOPTEShadowStyle shadowType;
    public static FOPTEShadowStyle shadowColor;
    public static FOPTEShadowStyle shadowHighlight;
    public static FOPTEShadowStyle shadowCrMod;
    public static FOPTEShadowStyle shadowOpacity;
    public static FOPTEShadowStyle shadowOffsetX;
    public static FOPTEShadowStyle shadowOffsetY;
    public static FOPTEShadowStyle shadowSecondOffsetX;
    public static FOPTEShadowStyle shadowSecondOffsetY;
    public static FOPTEShadowStyle shadowScaleXToX;
    public static FOPTEShadowStyle shadowScaleYToX;
    public static FOPTEShadowStyle shadowScaleXToY;
    public static FOPTEShadowStyle shadowScaleYToY;
    public static FOPTEShadowStyle shadowPerspectiveX;
    public static FOPTEShadowStyle shadowPerspectiveY;
    public static FOPTEShadowStyle shadowWeight;
    public static FOPTEShadowStyle shadowOriginX;
    public static FOPTEShadowStyle shadowOriginY;
    public static FOPTEShadowStyle fShadow;
    public static FOPTEShadowStyle fshadowObscured;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEShape : Enum {
    public int value__;
    public static FOPTEShape hspMaster;
    public static FOPTEShape cxstyle;
    public static FOPTEShape bWMode;
    public static FOPTEShape bWModePureBW;
    public static FOPTEShape bWModeBW;
    public static FOPTEShape fOleIcon;
    public static FOPTEShape fPreferRelativeResize;
    public static FOPTEShape fLockShapeType;
    public static FOPTEShape fDeleteAttachedObject;
    public static FOPTEShape fBackground;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTEText : Enum {
    public int value__;
    public static FOPTEText lTxid;
    public static FOPTEText dxTextLeft;
    public static FOPTEText dyTextTop;
    public static FOPTEText dxTextRight;
    public static FOPTEText dyTextBottom;
    public static FOPTEText WrapText;
    public static FOPTEText scaleText;
    public static FOPTEText anchorText;
    public static FOPTEText txflTextFlow;
    public static FOPTEText cdirFont;
    public static FOPTEText hspNext;
    public static FOPTEText txdir;
    public static FOPTEText fSelectText;
    public static FOPTEText fAutoTextMargin;
    public static FOPTEText fRotateText;
    public static FOPTEText fFitShapeToText;
    public static FOPTEText fFitTextToShape;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTETopLineStyle : Enum {
    public int value__;
    public static FOPTETopLineStyle lineTopColor;
    public static FOPTETopLineStyle lineTopOpacity;
    public static FOPTETopLineStyle lineTopBackColor;
    public static FOPTETopLineStyle lineTopCrMod;
    public static FOPTETopLineStyle lineTopType;
    public static FOPTETopLineStyle lineTopFillBlip;
    public static FOPTETopLineStyle lineTopFillBlipName;
    public static FOPTETopLineStyle lineTopFillBlipFlags;
    public static FOPTETopLineStyle lineTopFillWidth;
    public static FOPTETopLineStyle lineTopFillHeight;
    public static FOPTETopLineStyle lineTopFillDztype;
    public static FOPTETopLineStyle lineTopWidth;
    public static FOPTETopLineStyle lineTopMiterLimit;
    public static FOPTETopLineStyle lineTopStyle;
    public static FOPTETopLineStyle lineTopDashing;
    public static FOPTETopLineStyle lineTopDashStyle;
    public static FOPTETopLineStyle lineTopStartArrowhead;
    public static FOPTETopLineStyle lineTopEndArrowhead;
    public static FOPTETopLineStyle lineTopStartArrowWidth;
    public static FOPTETopLineStyle lineTopStartArrowLength;
    public static FOPTETopLineStyle lineTopEndArrowWidth;
    public static FOPTETopLineStyle lineTopEndArrowLength;
    public static FOPTETopLineStyle lineTopJoinStyle;
    public static FOPTETopLineStyle lineTopEndCapStyle;
    public static FOPTETopLineStyle lineTopColorExt;
    public static FOPTETopLineStyle reserved1434;
    public static FOPTETopLineStyle lineTopColorExtMod;
    public static FOPTETopLineStyle reserved1436;
    public static FOPTETopLineStyle lineTopBackColorExt;
    public static FOPTETopLineStyle reserved1438;
    public static FOPTETopLineStyle lineTopBackColorExtMod;
    public static FOPTETopLineStyle reserved1440;
    public static FOPTETopLineStyle reserved1441;
    public static FOPTETopLineStyle reserved1442;
    public static FOPTETopLineStyle topLineStyleBooleanProperties;
}
public enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.FOPTETransform : Enum {
    public int value__;
    public static FOPTETransform rotation;
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineCap : Enum {
    public int value__;
    public static LineCap Round;
    public static LineCap Square;
    public static LineCap Flat;
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEnd : Enum {
    public int value__;
    public static LineEnd NoEnd;
    public static LineEnd ArrowEnd;
    public static LineEnd ArrowStealthEnd;
    public static LineEnd ArrowDiamondEnd;
    public static LineEnd ArrowOvalEnd;
    public static LineEnd ArrowOpenEnd;
    public static LineEnd ArrowChevronEnd;
    public static LineEnd ArrowDoubleChevronEnd;
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndLength : Enum {
    public int value__;
    public static LineEndLength ShortArrow;
    public static LineEndLength MediumLenArrow;
    public static LineEndLength LongArrow;
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineEndWidth : Enum {
    public int value__;
    public static LineEndWidth NarrowArrow;
    public static LineEndWidth MediumWidthArrow;
    public static LineEndWidth WideArrow;
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin : Enum {
    public int value__;
    public static LineJoin Bevel;
    public static LineJoin Miter;
    public static LineJoin Round;
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineStyleBooleanProperties : object {
    internal static UInt32 DefaultValue;
    private int m_key;
    private msofbtRGFOPTE m_prop;
    internal bool HasDefined { get; }
    internal bool PenAlignInset { get; internal set; }
    internal bool UsefLineOpaqueBackColor { get; internal set; }
    internal bool UsefInsetPen { get; internal set; }
    internal bool UsefInsetPenOK { get; internal set; }
    internal bool UsefArrowheadsOK { get; internal set; }
    internal bool UsefLine { get; internal set; }
    internal bool UsefHitTestLine { get; internal set; }
    internal bool UsefLineFillShape { get; internal set; }
    internal bool UsefNoLineDrawDash { get; internal set; }
    internal bool LineOpaqueBackColor { get; internal set; }
    internal bool InsetPen { get; internal set; }
    internal bool InsetPenOK { get; internal set; }
    internal bool ArrowheadsOK { get; internal set; }
    internal bool Line { get; internal set; }
    internal bool HitTestLine { get; internal set; }
    internal bool LineFillShape { get; internal set; }
    internal bool NoLineDrawDash { get; internal set; }
    internal LineStyleBooleanProperties(msofbtRGFOPTE prop, int key);
    internal bool get_HasDefined();
    internal bool get_PenAlignInset();
    internal void set_PenAlignInset(bool value);
    internal bool get_UsefLineOpaqueBackColor();
    internal void set_UsefLineOpaqueBackColor(bool value);
    internal bool get_UsefInsetPen();
    internal void set_UsefInsetPen(bool value);
    internal bool get_UsefInsetPenOK();
    internal void set_UsefInsetPenOK(bool value);
    internal bool get_UsefArrowheadsOK();
    internal void set_UsefArrowheadsOK(bool value);
    internal bool get_UsefLine();
    internal void set_UsefLine(bool value);
    internal bool get_UsefHitTestLine();
    internal void set_UsefHitTestLine(bool value);
    internal bool get_UsefLineFillShape();
    internal void set_UsefLineFillShape(bool value);
    internal bool get_UsefNoLineDrawDash();
    internal void set_UsefNoLineDrawDash(bool value);
    internal bool get_LineOpaqueBackColor();
    internal void set_LineOpaqueBackColor(bool value);
    internal bool get_InsetPen();
    internal void set_InsetPen(bool value);
    internal bool get_InsetPenOK();
    internal void set_InsetPenOK(bool value);
    internal bool get_ArrowheadsOK();
    internal void set_ArrowheadsOK(bool value);
    internal bool get_Line();
    internal void set_Line(bool value);
    internal bool get_HitTestLine();
    internal void set_HitTestLine(bool value);
    internal bool get_LineFillShape();
    internal void set_LineFillShape(bool value);
    internal bool get_NoLineDrawDash();
    internal void set_NoLineDrawDash(bool value);
    internal bool Compare(LineStyleBooleanProperties lineProperties);
    internal StringBuilder GetAsString();
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.LineType : Enum {
    public int value__;
    public static LineType Solid;
    public static LineType Pattern;
    public static LineType Texture;
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtBSE : BaseEscherRecord {
    private _FBSE m_fbse;
    private _Blip m_blip;
    private byte m_bFlags;
    internal _Blip Blip { get; internal set; }
    internal _FBSE Fbse { get; }
    internal bool IsInlineBlip { get; internal set; }
    internal bool IsPictureInShapeField { get; internal set; }
    internal MsofbtBSE(WordDocument doc);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal void Read(Stream stream);
    internal void Write(Stream stream);
    internal void Initialize(ImageRecord imageRecord);
    internal _Blip get_Blip();
    internal void set_Blip(_Blip value);
    internal _FBSE get_Fbse();
    internal bool get_IsInlineBlip();
    internal void set_IsInlineBlip(bool value);
    internal bool get_IsPictureInShapeField();
    internal void set_IsPictureInShapeField(bool value);
    internal virtual BaseEscherRecord Clone();
    private bool IsMetafile(ImageFormat imageFormat);
    private bool IsBitmap(ImageFormat imageFormat);
    internal bool Compare(MsofbtBSE bse);
    internal StringBuilder GetAsString();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtBstoreContainer : BaseContainer {
    internal MsofbtBstoreContainer(WordDocument doc);
    protected virtual void WriteRecordData(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtClientAnchor : MsofbtGeneral {
    internal MsofbtClientAnchor(WordDocument doc);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtClientData : MsofbtGeneral {
    internal MsofbtClientData(WordDocument doc);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtClientTextbox : BaseEscherRecord {
    private int m_txId;
    internal int Txid { get; internal set; }
    public MsofbtClientTextbox(WordDocument doc);
    internal int get_Txid();
    internal void set_Txid(int value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtDg : BaseEscherRecord {
    private int m_shapeCount;
    private int m_spidLast;
    internal int DrawingId { get; internal set; }
    internal int ShapeCount { get; internal set; }
    internal int SpidLast { get; internal set; }
    internal MsofbtDg(WordDocument doc);
    internal int get_DrawingId();
    internal void set_DrawingId(int value);
    internal int get_ShapeCount();
    internal void set_ShapeCount(int value);
    internal int get_SpidLast();
    internal void set_SpidLast(int value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtDgContainer : BaseContainer {
    private ShapeDocType m_shapeDocType;
    internal MsofbtDg Dg { get; }
    internal MsofbtSpgrContainer PatriarchGroupContainer { get; }
    internal ShapeDocType ShapeDocType { get; internal set; }
    internal MsofbtDgContainer(WordDocument doc);
    internal MsofbtDg get_Dg();
    internal MsofbtSpgrContainer get_PatriarchGroupContainer();
    internal ShapeDocType get_ShapeDocType();
    internal void set_ShapeDocType(ShapeDocType value);
    private static void GetShapeCountAndMaxSpid(BaseContainer baseContainer, Int32& shapeCount, Int32& spidMax);
    internal void InitWriting();
    internal virtual BaseEscherRecord Clone();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtDgg : BaseEscherRecord {
    private int m_spidMax;
    private int m_shapeCount;
    private int m_drawingCount;
    private List`1<FIDCL> m_filCls;
    internal int DrawingCount { get; internal set; }
    internal List`1<FIDCL> Fidcls { get; }
    internal int ShapeCount { get; internal set; }
    internal int SpidMax { get; internal set; }
    internal MsofbtDgg(WordDocument doc);
    internal int get_DrawingCount();
    internal void set_DrawingCount(int value);
    internal List`1<FIDCL> get_Fidcls();
    internal int get_ShapeCount();
    internal void set_ShapeCount(int value);
    internal int get_SpidMax();
    internal void set_SpidMax(int value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtDggContainer : BaseContainer {
    internal MsofbtBstoreContainer BstoreContainer { get; }
    internal MsofbtDgg Dgg { get; }
    internal MsofbtDggContainer(WordDocument doc);
    internal MsofbtBstoreContainer get_BstoreContainer();
    internal MsofbtDgg get_Dgg();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtGeneral : BaseEscherRecord {
    private Byte[] m_data;
    internal Byte[] Data { get; internal set; }
    internal MsofbtGeneral(WordDocument doc);
    internal Byte[] get_Data();
    internal void set_Data(Byte[] value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
    internal virtual void Close();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtImage : _Blip {
    private static int DEF_COLOR_USED_OFFSET;
    private static int DEF_DIB_HEADER_SIZE;
    private static Byte[] DEF_SIGNATURE;
    private static Byte[] DEF_RESERVED;
    private static UInt32 DEF_COLOR_SIZE;
    private ImageRecord m_imageRecord;
    internal Byte[] ImageBytes { get; internal set; }
    internal ImageRecord ImageRecord { get; internal set; }
    internal MsofbtImage(WordDocument doc);
    internal MsofbtImage(ImageRecord imageRecord, bool isBitmap, WordDocument doc);
    private static MsofbtImage();
    internal virtual Byte[] get_ImageBytes();
    internal virtual void set_ImageBytes(Byte[] value);
    internal virtual ImageRecord get_ImageRecord();
    internal virtual void set_ImageRecord(ImageRecord value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
    internal virtual void Close();
    private Byte[] ConvertDibToBmp(Byte[] imageBytes);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtMetaFile : _Blip {
    internal int m_length;
    internal int m_rectLeft;
    internal int m_rectTop;
    internal int m_rectRight;
    internal int m_rectBottom;
    internal int m_rectWidth;
    internal int m_rectHeight;
    private byte m_fFilter;
    private ImageRecord m_imageRecord;
    internal CompressionMethod Compression { get; }
    internal Byte[] ImageBytes { get; internal set; }
    internal ImageRecord ImageRecord { get; internal set; }
    internal MsofbtMetaFile(WordDocument doc);
    internal MsofbtMetaFile(ImageRecord imageRecord, WordDocument doc);
    internal MsofbtMetaFile(WPicture picture, WordDocument doc);
    internal CompressionMethod get_Compression();
    internal virtual Byte[] get_ImageBytes();
    internal virtual void set_ImageBytes(Byte[] value);
    internal virtual ImageRecord get_ImageRecord();
    internal virtual void set_ImageRecord(ImageRecord value);
    internal virtual BaseEscherRecord Clone();
    internal virtual void Close();
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtOPT : BaseEscherRecord {
    public static int DEF_PIB_ID;
    public static int DEF_PIBFLAGS_ID;
    public static int DEF_TXID;
    public static int DEF_WRAP_REXT;
    internal static UInt32 DEF_WRAP_DIST;
    private msofbtRGFOPTE m_prop;
    private LineStyleBooleanProperties m_lineProps;
    private WrapPolygonVertices m_wrapPolygonVetrices;
    internal LineStyleBooleanProperties LineProperties { get; }
    internal WrapPolygonVertices WrapPolygonVertices { get; }
    internal FOPTEBid Pib { get; }
    internal FOPTEBid Txid { get; }
    internal msofbtRGFOPTE Properties { get; internal set; }
    internal UInt32 LayoutInTableCell { get; internal set; }
    internal bool AllowInTableCell { get; }
    internal bool AllowOverlap { get; internal set; }
    internal bool Visible { get; internal set; }
    internal UInt32 DistanceFromBottom { get; internal set; }
    internal UInt32 DistanceFromLeft { get; internal set; }
    internal UInt32 DistanceFromRight { get; internal set; }
    internal UInt32 DistanceFromTop { get; internal set; }
    internal UInt32 Roation { get; internal set; }
    internal MsofbtOPT(WordDocument doc);
    internal LineStyleBooleanProperties get_LineProperties();
    internal WrapPolygonVertices get_WrapPolygonVertices();
    internal FOPTEBid get_Pib();
    internal FOPTEBid get_Txid();
    internal msofbtRGFOPTE get_Properties();
    internal void set_Properties(msofbtRGFOPTE value);
    internal UInt32 get_LayoutInTableCell();
    internal void set_LayoutInTableCell(UInt32 value);
    internal bool get_AllowInTableCell();
    internal bool get_AllowOverlap();
    internal void set_AllowOverlap(bool value);
    internal bool get_Visible();
    internal void set_Visible(bool value);
    internal UInt32 get_DistanceFromBottom();
    internal void set_DistanceFromBottom(UInt32 value);
    internal UInt32 get_DistanceFromLeft();
    internal void set_DistanceFromLeft(UInt32 value);
    internal UInt32 get_DistanceFromRight();
    internal void set_DistanceFromRight(UInt32 value);
    internal UInt32 get_DistanceFromTop();
    internal void set_DistanceFromTop(UInt32 value);
    internal UInt32 get_Roation();
    internal void set_Roation(UInt32 value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
    internal virtual void Close();
    public UInt32 GetPropertyValue(int key);
    internal void SetPropertyValue(int key, UInt32 value);
    public Byte[] GetComplexPropValue(int key);
    private int CountInstanceValue();
    internal bool Compare(MsofbtOPT shapeOptions);
    internal StringBuilder GetAsString();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.msofbtRGFOPTE : DocIOSortedList`2<int, FOPTEBase> {
    public static int DEF_TXID;
    public static UInt32 DEF_LINE_WIDTH_PT;
    public static float DEF_LINE_WIDTH;
    public static UInt32 DEF_COLOR_EMPTY;
    public static UInt32 DEF_NO_LINE;
    public static UInt32 DEF_COLOR_FILL;
    public static UInt32 DEF_NO_COLOR_FILL;
    public static UInt32 DEF_BEHIND_DOC;
    public static UInt32 DEF_NOT_BEHIND_DOC;
    public static UInt32 DEF_FIT_TEXT_TO_SHAPE;
    public static UInt32 DEF_BACKGROND_SHAPE;
    private int m_prevPid;
    internal void Add(FOPTEBase fopteBase);
    internal int Write(Stream stream);
    internal void Read(Stream stream, int length);
    internal List`1<FOPTEBase> GetPostProps();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtSecondaryFOPT : BaseEscherRecord {
    private msofbtRGFOPTE m_prop;
    internal msofbtRGFOPTE Properties { get; internal set; }
    internal MsofbtSecondaryFOPT(WordDocument doc);
    internal msofbtRGFOPTE get_Properties();
    internal void set_Properties(msofbtRGFOPTE value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
    internal virtual void Close();
    public UInt32 GetPropertyValue(int key);
    public Byte[] GetComplexPropValue(int key);
    private int CountInstanceValue();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtSolverContainer : BaseContainer {
    internal MsofbtSolverContainer(WordDocument doc);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtSp : BaseEscherRecord {
    private int m_shapeId;
    private int m_shapeFlags;
    internal bool IsGroup { get; internal set; }
    internal bool IsChild { get; internal set; }
    internal bool IsPatriarch { get; internal set; }
    internal bool IsDeleted { get; internal set; }
    internal bool IsOle { get; internal set; }
    internal bool HasMaster { get; internal set; }
    internal bool IsFlippedHor { get; internal set; }
    internal bool IsFlippedVert { get; internal set; }
    internal bool IsConnector { get; internal set; }
    internal bool HasAnchor { get; internal set; }
    internal bool IsBackground { get; internal set; }
    internal bool HasShapeTypeProperty { get; internal set; }
    internal int ShapeId { get; internal set; }
    internal EscherShapeType ShapeType { get; internal set; }
    internal MsofbtSp(WordDocument doc);
    internal bool get_IsGroup();
    internal void set_IsGroup(bool value);
    internal bool get_IsChild();
    internal void set_IsChild(bool value);
    internal bool get_IsPatriarch();
    internal void set_IsPatriarch(bool value);
    internal bool get_IsDeleted();
    internal void set_IsDeleted(bool value);
    internal bool get_IsOle();
    internal void set_IsOle(bool value);
    internal bool get_HasMaster();
    internal void set_HasMaster(bool value);
    internal bool get_IsFlippedHor();
    internal void set_IsFlippedHor(bool value);
    internal bool get_IsFlippedVert();
    internal void set_IsFlippedVert(bool value);
    internal bool get_IsConnector();
    internal void set_IsConnector(bool value);
    internal bool get_HasAnchor();
    internal void set_HasAnchor(bool value);
    internal bool get_IsBackground();
    internal void set_IsBackground(bool value);
    internal bool get_HasShapeTypeProperty();
    internal void set_HasShapeTypeProperty(bool value);
    internal int get_ShapeId();
    internal void set_ShapeId(int value);
    internal EscherShapeType get_ShapeType();
    internal void set_ShapeType(EscherShapeType value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
    internal bool Compare(MsofbtSp shape);
    internal StringBuilder GetAsString();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtSpContainer : BaseContainer {
    public static int DEF_TXID_INCREMENT;
    public static string DEF_PICTMARK_STRING;
    public static string DEF_TEXTMARK_STRING;
    public static string DEF_NULL_STRING;
    private static UInt32 DEF_NOTALLOWINCELL;
    private MsofbtBSE m_bse;
    private byte m_bFlags;
    internal MsofbtBSE Bse { get; internal set; }
    internal int Pib { get; internal set; }
    internal MsofbtSp Shape { get; internal set; }
    internal MsofbtOPT ShapeOptions { get; }
    internal int Txid { get; internal set; }
    internal MsofbtTertiaryFOPT ShapePosition { get; }
    internal bool IsWatermark { get; internal set; }
    internal MsofbtSpContainer(WordDocument doc);
    internal MsofbtBSE get_Bse();
    internal void set_Bse(MsofbtBSE value);
    internal int get_Pib();
    internal void set_Pib(int value);
    internal MsofbtSp get_Shape();
    internal void set_Shape(MsofbtSp value);
    internal MsofbtOPT get_ShapeOptions();
    internal int get_Txid();
    internal void set_Txid(int value);
    internal MsofbtTertiaryFOPT get_ShapePosition();
    internal bool get_IsWatermark();
    internal void set_IsWatermark(bool value);
    public UInt32 GetPropertyValue(int key);
    public Byte[] GetComplexPropValue(int key);
    internal bool HasFillEffect();
    internal BackgroundFillType GetBackgroundFillType();
    internal BackgroundType GetBackgroundType();
    internal ImageRecord GetBackgroundImage(EscherClass escher);
    internal Byte[] GetBackgroundImBytes(EscherClass escher);
    internal Color GetBackgroundColor(bool isPictureBackground);
    internal GradientShadingStyle GetGradientShadingStyle(BackgroundFillType fillType);
    internal GradientShadingVariant GetGradientShadingVariant(GradientShadingStyle shadingStyle);
    internal MsofbtSpContainer CreateRectangleContainer();
    internal void UpdateBackground(WordDocument doc, Background background);
    internal void UpdateFillGradient(BackgroundGradient gradient);
    internal void UpdateFillPicture(Background background, int fillBlipIndex);
    internal void UpdateFillColor(Color color);
    internal void CreateTextWatermarkContainer(int watermarkNum, TextWatermark textWatermark);
    internal void CreatePictWatermarkContainer(int watermarkNum, PictureWatermark pictWatermark);
    private void ApplyPictureProperties(MsofbtTertiaryFOPT msofbtShapePosition, WPicture picture);
    public MsofbtSpContainer CreateImageContainer(WPicture pict, PictureShapeProps pictProps);
    public MsofbtSpContainer CreateInlineImageContainer(WPicture pict);
    public MsofbtSpContainer CreateTextBoxContainer(bool visible, WTextBoxFormat txbxFormat);
    public bool IsMetafile(ImageFormat imageFormat);
    private bool IsBitmap(ImageFormat imageFormat);
    private bool IsBitmapForPartialTrustMode(ImageFormat imageFormat);
    public void WriteContainer(Stream stream);
    internal MsofbtSpContainer CreateInlineTxbxImageCont();
    internal void CheckOptContainer();
    public static MsofbtSpContainer ReadInlineImageContainers(int length, Stream stream, WordDocument doc);
    public static _Blip GetBlipFromShapeContainer(BaseEscherRecord escherRecord);
    internal virtual BaseEscherRecord Clone();
    internal virtual void CloneRelationsTo(WordDocument doc);
    internal bool Compare(MsofbtSpContainer shapeContainer);
    internal StringBuilder GetAsString();
    internal void RemoveSpContainerOle();
    internal void WriteTextBoxOptions(bool visible, WTextBoxFormat txbxFormat);
    internal void WritePictureOptions(PictureShapeProps pictProps, WPicture pic);
    private UInt32 SetPictureCropValue(float offset);
    private UInt32 SetPictureRotationValue(float rotation);
    private void SetShapeOption(msofbtRGFOPTE shapeProps, UInt32 curValue, int fopteKey, bool isBid);
    private void SetBoolShapeOption(msofbtRGFOPTE shapeProps, int fopteKey, int bitMask, int startBit, int value, UInt32 defValue);
    private UInt32 GetOpacity(byte opacity);
    private void CheckEscher(WordDocument doc);
    private GradientShadingVariant GetCornerStyleVariant();
    private void AddGradientFillAngle(GradientShadingStyle shadingStyle);
    private void AddGradientFocusFopte(GradientShadingStyle shadingStyle, GradientShadingVariant shadingVariant);
    private void AddGradientFillType(GradientShadingStyle shadingStyle);
    private void AddFillProperties(GradientShadingStyle shadingStyle, GradientShadingVariant shadingVariant);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtSpgr : BaseEscherRecord {
    private int m_rectLeft;
    private int m_rectTop;
    private int m_rectRight;
    private int m_rectBottom;
    internal MsofbtSpgr(WordDocument doc);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtSpgrContainer : BaseContainer {
    internal MsofbtSp Shape { get; }
    internal MsofbtSpgrContainer(WordDocument doc);
    internal MsofbtSp get_Shape();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.MsofbtTertiaryFOPT : BaseEscherRecord {
    private static int DEF_UNKNOWN2_PID;
    private static UInt32 DEF_NOTALLOWINCELL;
    private msofbtRGFOPTE m_prop;
    private LineStyleBooleanProperties m_lineProps;
    private WrapPolygonVertices m_wrapPolygonVetrices;
    internal LineStyleBooleanProperties LineProperties { get; }
    internal WrapPolygonVertices WrapPolygonVertices { get; }
    internal msofbtRGFOPTE Properties { get; internal set; }
    public UInt32 XAlign { get; public set; }
    public UInt32 XRelTo { get; public set; }
    public UInt32 YAlign { get; public set; }
    public UInt32 YRelTo { get; public set; }
    public UInt32 LayoutInTableCell { get; public set; }
    public UInt32 Unknown1 { get; public set; }
    public UInt32 Unknown2 { get; public set; }
    internal bool AllowInTableCell { get; internal set; }
    internal bool AllowOverlap { get; internal set; }
    internal bool Visible { get; internal set; }
    internal MsofbtTertiaryFOPT(WordDocument doc);
    internal LineStyleBooleanProperties get_LineProperties();
    internal WrapPolygonVertices get_WrapPolygonVertices();
    internal msofbtRGFOPTE get_Properties();
    internal void set_Properties(msofbtRGFOPTE value);
    public UInt32 get_XAlign();
    public void set_XAlign(UInt32 value);
    public UInt32 get_XRelTo();
    public void set_XRelTo(UInt32 value);
    public UInt32 get_YAlign();
    public void set_YAlign(UInt32 value);
    public UInt32 get_YRelTo();
    public void set_YRelTo(UInt32 value);
    public UInt32 get_LayoutInTableCell();
    public void set_LayoutInTableCell(UInt32 value);
    public UInt32 get_Unknown1();
    public void set_Unknown1(UInt32 value);
    public UInt32 get_Unknown2();
    public void set_Unknown2(UInt32 value);
    internal bool get_AllowInTableCell();
    internal void set_AllowInTableCell(bool value);
    internal bool get_AllowOverlap();
    internal void set_AllowOverlap(bool value);
    internal bool get_Visible();
    internal void set_Visible(bool value);
    protected virtual void ReadRecordData(Stream stream);
    protected virtual void WriteRecordData(Stream stream);
    internal virtual BaseEscherRecord Clone();
    internal virtual void Close();
    internal UInt32 GetPropertyValue(int key);
    internal void SetPropertyValue(int key, UInt32 value);
    internal Byte[] GetComplexPropValue(int key);
    private int CountInstanceValue();
    internal bool Compare(MsofbtTertiaryFOPT shapePosition);
    internal StringBuilder GetAsString();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.PictureShape : ShapeBase {
    private ImageRecord m_imageRecord;
    internal ImageRecord ImageRecord { get; }
    internal PictureShapeProps PictureProps { get; }
    internal PictureShape(ImageRecord imageRecord);
    internal ImageRecord get_ImageRecord();
    internal PictureShapeProps get_PictureProps();
    protected internal virtual void CreateShapeImpl();
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.ShadeType : Enum {
    public int value__;
    public static ShadeType msoshadeNone;
    public static ShadeType msoshadeGamma;
    public static ShadeType msoshadeSigma;
    public static ShadeType msoshadeBand;
    public static ShadeType msoshadeOneColor;
    public static ShadeType msoshadeParameterShift;
    public static ShadeType msoshadeDefault;
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.ShapeBase : object {
    protected BaseProps m_shapeProps;
    internal BaseProps ShapeProps { get; }
    internal BaseProps get_ShapeProps();
    internal virtual void Close();
    protected internal virtual void CreateShapeImpl();
}
internal enum Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.ShapeDocType : Enum {
    public int value__;
    public static ShapeDocType Main;
    public static ShapeDocType HeaderFooter;
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.TextBoxShape : ShapeBase {
    internal TextBoxProps TextBoxProps { get; }
    internal TextBoxProps get_TextBoxProps();
    protected internal virtual void CreateShapeImpl();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.Escher.WrapPolygonVertices : object {
    private int m_key;
    private msofbtRGFOPTE m_prop;
    private List`1<PointF> m_coords;
    private UInt32 m_nelems;
    private UInt32 m_nelemsalloc;
    private UInt32 m_cbelem;
    internal List`1<PointF> Coords { get; internal set; }
    internal UInt32 nElems { get; internal set; }
    internal UInt32 nElemsAlloc { get; internal set; }
    internal UInt32 cbElem { get; internal set; }
    internal WrapPolygonVertices(msofbtRGFOPTE prop, int key);
    internal List`1<PointF> get_Coords();
    internal void set_Coords(List`1<PointF> value);
    internal UInt32 get_nElems();
    internal void set_nElems(UInt32 value);
    internal UInt32 get_nElemsAlloc();
    internal void set_nElemsAlloc(UInt32 value);
    internal UInt32 get_cbElem();
    internal void set_cbElem(UInt32 value);
    internal bool Compare(WrapPolygonVertices wrapPolygonVertices);
    internal StringBuilder GetAsString();
    private void readArrayData();
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.OLEObject.CompObjectStream : object {
    private static int DEF_STREAM_SIZE;
    private static int DEF_MARKER_OR_LENGTH4;
    private static int DEF_MARKER_OR_LENGTH5;
    private static UInt32 DEF_UNICODE_MARKER;
    private int m_streamLength;
    private CompObjHeader m_header;
    private string m_ansiUserTypeData;
    private string m_ansiClipboardFormatData;
    private string m_reserved1Data;
    private UInt32 m_unicodeMarker;
    private string m_unicodeUserTypeData;
    private string m_unicodeClipboardFormatData;
    private string m_reserved2Data;
    internal int Length { get; }
    internal string ObjectType { get; }
    internal string ObjectTypeReserved { get; }
    internal CompObjectStream(Stream stream);
    internal CompObjectStream(OleObjectType oleType);
    internal int get_Length();
    internal string get_ObjectType();
    internal string get_ObjectTypeReserved();
    internal void Parse(Byte[] arrData, int iOffset);
    internal int Save(Byte[] arrData, int iOffset);
    internal void SaveTo(Stream stream);
    private void WriteZeroByteArr(Stream stream, int byteLength);
    private void WriteLengthPrefixedString(Stream stream, string data);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.OLEObject.LinkInfoStream : object {
    private static int DEF_STRUCT_SIZE;
    private static int DEF_UNICODE_MARKER;
    private static int DEF_UNICODE_MARKER_SIZE;
    private Byte[] m_filePathDataASCII;
    private Byte[] m_filePathDataUNICOD;
    private string m_filePath;
    internal int Length { get; }
    internal LinkInfoStream(Stream stream);
    internal LinkInfoStream(string filePath);
    internal int get_Length();
    internal void Parse(Byte[] arrData, int iOffset);
    internal int Save(Byte[] arrData, int iOffset);
    internal void SaveTo(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.OLEObject.ObjectInfoStream : object {
    private static int DEF_STRUCT_SIZE;
    private Byte[] m_dataBytes;
    internal int Length { get; }
    internal ObjectInfoStream(Stream stream);
    internal int get_Length();
    internal void Parse(Byte[] arrData, int iOffset);
    internal int Save(Byte[] arrData, int iOffset);
    internal void SaveTo(Stream stream, OleLinkType linkType, OleObjectType oleType);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.OLEObject.OLEObject : object {
    private static string DEF_OLE_STREAM_NAME;
    private static string DEF_CONTENT_STREAM_NAME;
    private static string DEF_WP_STREAM_NAME;
    private static string DEF_INFO_STREAM_NAME;
    internal static string DEF_COMP_STREAM_NAME;
    private static string DEF_LINK_INFO_STREAM_NAME;
    private static string DEF_NATIVE_STREAM_NAME;
    private static string DEF_PRINT_STREAM_NAME;
    private static string DEF_OLE_PRES000_NAME;
    private static string DEF_END_INFO_MARKER;
    private static string DEF_EQUATION_STREAM_NAME;
    private static string DEF_WORKBOOK_STREAM_NAME;
    private static string DEF_PACKAGE_STREAM_NAME;
    private static string DEF_PPT_STREAM_NAME;
    private static string DEF_WORD_STREAM_NAME;
    private static string DEF_VISIO_STREAM_NAME;
    private static string DEF_ODP_STREAM_NAME;
    private static string DEF_OOPACKAGE_STREAM_NAME;
    private static string DEF_SUMMARY_STREAM_NAME;
    private static string DEF_DOC_SUMMARY_STREAM_NAME;
    private static string DEF_OBJECT_POOL_NAME;
    private OleObjectType m_oleType;
    private Storage m_storage;
    private Guid m_guid;
    private byte m_bFlags;
    internal Guid Guid { get; internal set; }
    internal Storage Storage { get; }
    internal OleObjectType OleType { get; }
    internal bool Cloned { get; internal set; }
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal Storage get_Storage();
    internal OleObjectType get_OleType();
    internal bool get_Cloned();
    internal void set_Cloned(bool value);
    internal void ParseObjectPool(Stream objectPoolStream, string oleStorageName, Dictionary`2<string, Storage> oleObjectCollection);
    internal void Save(Stream stream, WOleObject oleObject);
    internal void Save(Byte[] nativeData, string dataPath, WOleObject oleObject);
    internal string AddOleObjectToCollection(Dictionary`2<string, Storage> oleObjectCollection, string oleStorageName);
    private void WriteNativeData(Byte[] nativeData, string dataPath, OleObjectType objType);
    private void WriteNativeData(Byte[] nativeData, string streamName);
    private void WritePBrush(Byte[] nativeData);
    private void WriteNativeStreams(Stream stream);
    private void WriteCompObjStream(OleObjectType objType);
    private void WriteLinkInfoStream(OleObjectType objType, string dataPath);
    private void WriteOleStream(OleLinkType linkType, OleObjectType objType, string dataPath);
    private void WriteObjInfoStream(OleLinkType linkType, OleObjectType objType);
    private void WritePackage(Byte[] nativeData, string dataPath);
    internal OLEObject Clone();
    internal void Close();
    internal void SetStorage(Storage storage);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.OLEObject.OLEStream : object {
    private static int DEF_VERSION_CONSTANT;
    private static int DEF_RESERVED_VALUE;
    private static int DEF_EMBEDDED_SIZE;
    private static int DEF_CLSID_INDICATOR;
    private static int DEF_EMBED_FLAG;
    private static int DEF_LINK_FLAG;
    private int m_streamLeng;
    private int m_oleVersion;
    private int m_flags;
    private int m_linkUpdateOption;
    private int m_reserved1;
    private int m_reservedMonikerStreamSize;
    private MonokerStream m_reservedMonikerStream;
    private int m_relativeSourceMonikerStreamSize;
    private MonokerStream m_relativeSourceMonikerStream;
    private int m_absoluteSourceMonikerStreamSize;
    private MonokerStream m_absoluteSourceMonikerStream;
    private int m_clsidIndicator;
    private CLSID m_clsid;
    private int m_reservedDisplayName;
    private int m_reserved2;
    private int m_localUpdateTime;
    private int m_localCheckUpdateTime;
    private int m_remoteUpdateTime;
    private OleLinkType m_linkType;
    private string m_filePath;
    internal int Length { get; }
    internal OLEStream(Stream stream);
    internal OLEStream(OleLinkType type, string filePath);
    internal int get_Length();
    internal void Parse(Byte[] arrData, int iOffset);
    internal int Save(Byte[] arrData, int iOffset);
    internal void SaveTo(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.OLEObject.OleTypeConvertor : object {
    internal static OleObjectType ToOleType(string oleTypeStr);
    internal static string ToString(OleObjectType oleType, bool isWord2003);
    internal static Guid GetGUID(OleObjectType type);
    private static bool StartsWithExt(string text, string value);
}
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.OLEObject.Storage : object {
    private Dictionary`2<string, Stream> m_streams;
    private List`1<Storage> m_storages;
    private string m_storageName;
    private int m_occurenceCount;
    private Guid m_guid;
    internal string StorageName { get; internal set; }
    internal Guid Guid { get; internal set; }
    internal Dictionary`2<string, Stream> Streams { get; }
    internal List`1<Storage> Storages { get; }
    internal int OccurrenceCount { get; internal set; }
    internal Storage(string storageName);
    internal string get_StorageName();
    internal void set_StorageName(string value);
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal Dictionary`2<string, Stream> get_Streams();
    internal List`1<Storage> get_Storages();
    internal int get_OccurrenceCount();
    internal void set_OccurrenceCount(int value);
    internal void ParseStorages(ICompoundStorage storage);
    internal void ParseStreams(ICompoundStorage storage);
    internal void WriteToStorage(ICompoundStorage storage);
    private Byte[] GetByteArray(Stream stream);
    internal string CompareStorage(Dictionary`2<string, Storage> oleObjectCollection);
    internal void UpdateGuid(CompoundFile cmpFile, int storageIndex, string storageName);
    internal Storage Clone();
    internal void Close();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.PictureShapeProps : BaseProps {
    private float m_brightness;
    private float m_contrast;
    private PictureColor m_color;
    private string m_altText;
    private string m_name;
    internal float PictureBrightness { get; internal set; }
    internal float PictureContrast { get; internal set; }
    internal PictureColor PictureColor { get; internal set; }
    internal string AlternativeText { get; internal set; }
    internal string Name { get; internal set; }
    internal float get_PictureBrightness();
    internal void set_PictureBrightness(float value);
    internal float get_PictureContrast();
    internal void set_PictureContrast(float value);
    internal PictureColor get_PictureColor();
    internal void set_PictureColor(PictureColor value);
    internal string get_AlternativeText();
    internal void set_AlternativeText(string value);
    internal string get_Name();
    internal void set_Name(string value);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.DataStreamParser.TextBoxProps : BaseProps {
    private float m_txbxLineWidth;
    private LineDashing m_lineDashing;
    private Color m_fillColor;
    private TextBoxLineStyle m_lineStyle;
    private WrapMode m_wrapMode;
    private float m_txID;
    private bool m_noLine;
    private Color m_lineColor;
    private UInt32 m_leftMargin;
    private UInt32 m_rightMargin;
    private UInt32 m_topMargin;
    private UInt32 m_bottomMargin;
    private byte m_bFlags;
    internal bool NoLine { get; internal set; }
    internal WrapMode WrapText { get; internal set; }
    internal bool FitShapeToText { get; internal set; }
    internal TextBoxLineStyle LineStyle { get; internal set; }
    internal Color FillColor { get; internal set; }
    internal Color LineColor { get; internal set; }
    internal float TxbxLineWidth { get; internal set; }
    internal LineDashing LineDashing { get; internal set; }
    internal float TXID { get; internal set; }
    internal UInt32 LeftMargin { get; internal set; }
    internal UInt32 RightMargin { get; internal set; }
    internal UInt32 TopMargin { get; internal set; }
    internal UInt32 BottomMargin { get; internal set; }
    internal bool get_NoLine();
    internal void set_NoLine(bool value);
    internal WrapMode get_WrapText();
    internal void set_WrapText(WrapMode value);
    internal bool get_FitShapeToText();
    internal void set_FitShapeToText(bool value);
    internal TextBoxLineStyle get_LineStyle();
    internal void set_LineStyle(TextBoxLineStyle value);
    internal Color get_FillColor();
    internal void set_FillColor(Color value);
    internal Color get_LineColor();
    internal void set_LineColor(Color value);
    internal float get_TxbxLineWidth();
    internal void set_TxbxLineWidth(float value);
    internal LineDashing get_LineDashing();
    internal void set_LineDashing(LineDashing value);
    internal float get_TXID();
    internal void set_TXID(float value);
    internal UInt32 get_LeftMargin();
    internal void set_LeftMargin(UInt32 value);
    internal UInt32 get_RightMargin();
    internal void set_RightMargin(UInt32 value);
    internal UInt32 get_TopMargin();
    internal void set_TopMargin(UInt32 value);
    internal UInt32 get_BottomMargin();
    internal void set_BottomMargin(UInt32 value);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.EndnotesRW : FootnotesRW {
    internal EndnotesRW(Stream stream, Fib fib);
    protected virtual void WriteTxtPositions();
    protected virtual void WriteDescriptors();
    protected virtual void ReadTxtPositions();
    protected virtual void ReadDescriptors();
    protected virtual void ReadDescriptor(BinaryReader reader, int pos, int posNext);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.EndnoteStatePositions : StatePositionsBase {
    internal EndnoteStatePositions(WordFKPData fkp);
    internal virtual int MoveToItem(int itemIndex);
    internal virtual bool UpdateItemEndPos(long iEndPos);
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.BitmapBLIP : Blip {
    private Byte[] m_rgbUid;
    private Byte[] m_rgbUidPrimary;
    private byte m_tag;
    private MemoryStream m_pvImageBytes;
    public Byte[] RgbUid { get; public set; }
    public Byte[] RgbUidPrimary { get; public set; }
    public byte Tag { get; public set; }
    public MemoryStream ImageBytes { get; public set; }
    public Byte[] get_RgbUid();
    public void set_RgbUid(Byte[] value);
    public Byte[] get_RgbUidPrimary();
    public void set_RgbUidPrimary(Byte[] value);
    public byte get_Tag();
    public void set_Tag(byte value);
    public MemoryStream get_ImageBytes();
    public void set_ImageBytes(MemoryStream value);
    public virtual Image Read(Stream stream, int length, bool hasPrimaryUid);
    internal virtual void Write(Stream stream, MemoryStream image, MSOBlipType imageFormat, Byte[] id);
    private void WriteDefaults(Stream stream, long size, MSOBlipType type, Byte[] id);
    internal virtual void Close();
}
internal abstract class Syncfusion.DocIO.ReaderWriter.Escher.Blip : BaseWordRecord {
    public abstract virtual Image Read(Stream stream, int length, bool chr);
    internal abstract virtual void Write(Stream stream, MemoryStream image, MSOBlipType imageFormat, Byte[] id);
}
internal enum Syncfusion.DocIO.ReaderWriter.Escher.BlipFopte : Enum {
    public int value__;
    public static BlipFopte pib;
    public static BlipFopte pibName;
    public static BlipFopte pibFlags;
    public static BlipFopte pictureTransparent;
    public static BlipFopte NoLineDrawDash;
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.BstoreContainer : BaseWordRecord {
    private FBSE m_fbse;
    private BitmapBLIP m_bitmapBlip;
    private Image m_bitmap;
    private Blip m_blip;
    internal FBSE Fbse { get; internal set; }
    public Image Bitmap { get; }
    internal FBSE get_Fbse();
    internal void set_Fbse(FBSE value);
    public Image get_Bitmap();
    public void Read(Stream stream);
    internal void Write(Stream stream, MemoryStream imageStream, Byte[] id, Image image);
    internal virtual void Close();
}
internal enum Syncfusion.DocIO.ReaderWriter.Escher.CompressionMethod : Enum {
    public int value__;
    public static CompressionMethod msocompressionZip;
    public static CompressionMethod msocompressionNone;
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.FBSE : BaseWordRecord {
    private MSOBlipType m_btWin32;
    private MSOBlipType m_btMacOS;
    private Byte[] m_rgbUid;
    private ushort m_tag;
    private UInt32 m_size;
    private UInt32 m_cRef;
    private UInt32 m_foDelay;
    private MSOBlipUsage m_usage;
    private byte m_cbName;
    private byte m_unused2;
    private byte m_unused3;
    public MSOBlipType Win32 { get; public set; }
    public MSOBlipType MacOS { get; public set; }
    public Byte[] Uid { get; public set; }
    public ushort Tag { get; public set; }
    public UInt32 Size { get; public set; }
    public UInt32 Ref { get; public set; }
    public UInt32 Delay { get; public set; }
    public MSOBlipUsage Usage { get; public set; }
    public byte Name { get; public set; }
    unknown byte Unused2 {public set; }
    unknown byte Unused3 {public set; }
    public MSOBlipType get_Win32();
    public void set_Win32(MSOBlipType value);
    public MSOBlipType get_MacOS();
    public void set_MacOS(MSOBlipType value);
    public Byte[] get_Uid();
    public void set_Uid(Byte[] value);
    public ushort get_Tag();
    public void set_Tag(ushort value);
    public UInt32 get_Size();
    public void set_Size(UInt32 value);
    public UInt32 get_Ref();
    public void set_Ref(UInt32 value);
    public UInt32 get_Delay();
    public void set_Delay(UInt32 value);
    public MSOBlipUsage get_Usage();
    public void set_Usage(MSOBlipUsage value);
    public byte get_Name();
    public void set_Name(byte value);
    public void set_Unused2(byte value);
    public void set_Unused3(byte value);
    public void Read(Stream stream);
    public void Write(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.FOPTE : BaseWordRecord {
    private ushort m_pid;
    private ushort m_bid;
    private ushort m_complex;
    private UInt32 m_op;
    private Byte[] m_name;
    public ushort Pid { get; public set; }
    public bool IsBid { get; public set; }
    public bool IsComplex { get; public set; }
    public UInt32 Op { get; public set; }
    public Byte[] NameBytes { get; public set; }
    public ushort get_Pid();
    public void set_Pid(ushort value);
    public bool get_IsBid();
    public void set_IsBid(bool value);
    public bool get_IsComplex();
    public void set_IsComplex(bool value);
    public UInt32 get_Op();
    public void set_Op(UInt32 value);
    public Byte[] get_NameBytes();
    public void set_NameBytes(Byte[] value);
    public int Read(Stream stream);
    public void Write(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.FSP : BaseWordRecord {
    private UInt32 m_spid;
    private UInt32 m_grfPersistent;
    public UInt32 Spid { get; public set; }
    public UInt32 GzfPersistent { get; public set; }
    public bool IsGroup { get; }
    public bool ISChild { get; }
    public bool IsPatriarch { get; }
    public bool IsDeleted { get; }
    public bool IsOleShape { get; }
    public bool IsHaveMaster { get; }
    public bool IsFliph { get; }
    public bool IsFlipv { get; }
    public bool IsConnector { get; }
    public bool IsHaveAnchor { get; }
    public bool IsBackground { get; }
    public bool IsHavespt { get; }
    public void Read(Stream stream);
    public void Write(Stream stream);
    public UInt32 get_Spid();
    public void set_Spid(UInt32 value);
    public UInt32 get_GzfPersistent();
    public void set_GzfPersistent(UInt32 value);
    public bool get_IsGroup();
    public bool get_ISChild();
    public bool get_IsPatriarch();
    public bool get_IsDeleted();
    public bool get_IsOleShape();
    public bool get_IsHaveMaster();
    public bool get_IsFliph();
    public bool get_IsFlipv();
    public bool get_IsConnector();
    public bool get_IsHaveAnchor();
    public bool get_IsBackground();
    public bool get_IsHavespt();
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.MetafileBlip : Blip {
    private Byte[] m_rgbUid;
    private Byte[] m_rgbUidPrimary;
    private UInt32 m_cbSave;
    private byte m_fCompression;
    private Byte[] m_pvBits;
    private int m_length;
    private int m_rectLeft;
    private int m_rectTop;
    private int m_rectRight;
    private int m_rectBottom;
    private int m_rectWidth;
    private int m_rectHeight;
    private CompressionMethod m_compressionMethod;
    private byte m_fFilter;
    private Byte[] m_compressedImage;
    private Byte[] m_uncompressedImage;
    private Metafile m_srcMetafile;
    internal Metafile Metafile { get; internal set; }
    internal Metafile get_Metafile();
    internal void set_Metafile(Metafile value);
    public virtual Image Read(Stream stream, int length, bool hasPrimaryUid);
    internal virtual void Write(Stream stream, MemoryStream image, MSOBlipType imageFormat, Byte[] Uid);
    private void WriteDefaults(Stream stream, long size, Byte[] Uid);
    internal virtual void Close();
}
internal enum Syncfusion.DocIO.ReaderWriter.Escher.MSOBI : Enum {
    public int value__;
    public static MSOBI msobiUNKNOWN;
    public static MSOBI msobiWMF;
    public static MSOBI msobiEMF;
    public static MSOBI msobiPICT;
    public static MSOBI msobiPNG;
    public static MSOBI msobiJFIF;
    public static MSOBI msobiJPEG;
    public static MSOBI msobiDIB;
    public static MSOBI msobiClient;
}
internal enum Syncfusion.DocIO.ReaderWriter.Escher.MSOBlipType : Enum {
    public int value__;
    public static MSOBlipType msoblipERROR;
    public static MSOBlipType msoblipUNKNOWN;
    public static MSOBlipType msoblipEMF;
    public static MSOBlipType msoblipWMF;
    public static MSOBlipType msoblipPICT;
    public static MSOBlipType msoblipJPEG;
    public static MSOBlipType msoblipPNG;
    public static MSOBlipType msoblipDIB;
    public static MSOBlipType msoblipFirstClient;
    public static MSOBlipType msoblipLastClient;
}
internal enum Syncfusion.DocIO.ReaderWriter.Escher.MSOBlipUsage : Enum {
    public int value__;
    public static MSOBlipUsage msoblipUsageDefault;
    public static MSOBlipUsage msoblipUsageTexture;
    public static MSOBlipUsage msoblipUsageMax;
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.MSOFBH : BaseWordRecord {
    private UInt32 m_ver;
    private UInt32 m_inst;
    private MSOFBT m_fbt;
    private UInt32 m_cbLength;
    public UInt32 Version { get; public set; }
    public UInt32 Inst { get; public set; }
    internal MSOFBT Msofbt { get; internal set; }
    public UInt32 Length { get; public set; }
    public void Read(Stream stream);
    public void Write(Stream stream);
    public UInt32 get_Version();
    public void set_Version(UInt32 value);
    public UInt32 get_Inst();
    public void set_Inst(UInt32 value);
    internal MSOFBT get_Msofbt();
    internal void set_Msofbt(MSOFBT value);
    public UInt32 get_Length();
    public void set_Length(UInt32 value);
}
internal enum Syncfusion.DocIO.ReaderWriter.Escher.MSOFBT : Enum {
    public int value__;
    public static MSOFBT msofbtDggContainer;
    public static MSOFBT msofbtBstoreContainer;
    public static MSOFBT msofbtDgContainer;
    public static MSOFBT msofbtSpgrContainer;
    public static MSOFBT msofbtSpContainer;
    public static MSOFBT msofbtSolverContainer;
    public static MSOFBT msofbtDgg;
    public static MSOFBT msofbtBSE;
    public static MSOFBT msofbtDg;
    public static MSOFBT msofbtSpgr;
    public static MSOFBT msofbtSp;
    public static MSOFBT msofbtOPT;
    public static MSOFBT msofbtTextbox;
    public static MSOFBT msofbtClientTextbox;
    public static MSOFBT msofbtAnchor;
    public static MSOFBT msofbtChildAnchor;
    public static MSOFBT msofbtClientAnchor;
    public static MSOFBT msofbtClientData;
    public static MSOFBT msofbtConnectorRule;
    public static MSOFBT msofbtAlignRule;
    public static MSOFBT msofbtArcRule;
    public static MSOFBT msofbtClientRule;
    public static MSOFBT msofbtCLSID;
    public static MSOFBT msofbtCalloutRule;
    public static MSOFBT msofbtBlipFirst;
    public static MSOFBT msofbtBlipEMF;
    public static MSOFBT msofbtBlipWMF;
    public static MSOFBT msofbtBlipJPEG;
    public static MSOFBT msofbtBlipPNG;
    public static MSOFBT msofbtBlipDIB;
    public static MSOFBT msofbtREGROUPItems;
    public static MSOFBT msofbtSelection;
    public static MSOFBT msofbtColorMRU;
    public static MSOFBT msofbtDeletedPspl;
    public static MSOFBT msofbtSplitMenuColors;
    public static MSOFBT msofbtOleObject;
    public static MSOFBT msofbtColorScheme;
    public static MSOFBT msofbtSecondaryFOPT;
    public static MSOFBT msofbtTertiaryFOPT;
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.Rect : BaseWordRecord {
    private long m_left;
    private long m_right;
    private long m_top;
    private long m_bottom;
    public long Left { get; public set; }
    public long Right { get; public set; }
    public long Top { get; public set; }
    public long Bottom { get; public set; }
    public long get_Left();
    public void set_Left(long value);
    public long get_Right();
    public void set_Right(long value);
    public long get_Top();
    public void set_Top(long value);
    public long get_Bottom();
    public void set_Bottom(long value);
    public void Read(Stream stream);
    public void Write(Stream stream);
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.SPContainer : BaseWordRecord {
    private static int DEF_MSOFBH_LENGTH;
    private static int DEF_SP_LENGTH;
    private static int DEF_FOPTE_LENGTH;
    private static int DEF_RECT_LENGTH;
    private FSP m_sp;
    private List`1<FOPTE> m_opt;
    private Rect m_anchor;
    private List`1<MSOFBH> m_msofbhArray;
    public int Length { get; }
    public int get_Length();
    public void Read(Stream stream, UInt32 lenght);
    public void Write(Stream stream);
    private void ReadFoptes(Stream stream, MSOFBH msofbh);
    private void WriteFoptes(Stream stream);
    private int GetFoptesLength();
    private void GenerateDefaultOPT();
    private void WriteFSP(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Escher.WordImageReader : object {
    private MemoryStream m_dataStream;
    private string m_strImageName;
    private int m_iStartImage;
    private PICF m_picData;
    private Image m_bitmap;
    private MsofbtSpContainer m_spContainer;
    private string m_altText;
    private string m_name;
    private Byte[] m_unparsedData;
    private int m_dataStreamPosiotion;
    private ImageRecord m_imageRecord;
    internal string ImageName { get; }
    public short Width { get; public set; }
    public short Height { get; public set; }
    public Image Image { get; }
    public int WidthScale { get; }
    public int HeightScale { get; }
    internal MsofbtSpContainer InlineShapeContainer { get; }
    internal PICF PictureDescriptor { get; }
    internal ImageRecord ImageRecord { get; }
    internal string AlternativeText { get; internal set; }
    internal string Name { get; internal set; }
    internal Byte[] UnparsedData { get; }
    internal WordImageReader(MemoryStream dataStream, int offset, WordDocument doc);
    internal string get_ImageName();
    public sealed virtual short get_Width();
    public void set_Width(short value);
    public sealed virtual short get_Height();
    public void set_Height(short value);
    public sealed virtual Image get_Image();
    public sealed virtual int get_WidthScale();
    public sealed virtual int get_HeightScale();
    internal MsofbtSpContainer get_InlineShapeContainer();
    internal PICF get_PictureDescriptor();
    internal ImageRecord get_ImageRecord();
    internal string get_AlternativeText();
    internal void set_AlternativeText(string value);
    internal string get_Name();
    internal void set_Name(string value);
    internal Byte[] get_UnparsedData();
    private void UpdateUnParsedData();
    private void UpdateProps();
}
internal class Syncfusion.DocIO.ReaderWriter.Escher.WordImageWriter : object {
    private MemoryStream m_dataStream;
    private PICF m_picData;
    private Metafile m_srcMetafile;
    internal MemoryStream DataStream { get; }
    internal PICF PictureData { get; }
    internal WordImageWriter(MemoryStream dataStream);
    internal MemoryStream get_DataStream();
    internal PICF get_PictureData();
    internal int WriteImage(WPicture pict, int height, int width);
    private void SetPictureSize(float height, float width, WPicture pict);
    internal int WriteInlineShapeObject(InlineShapeObject shapeObj);
    internal int WriteInlineTxBxPicture(WTextBoxFormat txbxFormat);
    internal void Close();
    private void SavePicf();
}
internal class Syncfusion.DocIO.ReaderWriter.Fib : object {
    private Byte[] m_fibBase;
    private ushort m_csw;
    private Byte[] m_fibRgW;
    private ushort m_cslw;
    private Byte[] m_fibRgLw;
    private ushort m_cbRgFcLcb;
    private Byte[] m_fibRgFcLcbBlob;
    private ushort m_cswNew;
    private Byte[] m_fibRgCswNew;
    private Encoding m_encoding;
    internal ushort FibVersion { get; }
    internal ushort WIdent { get; internal set; }
    internal ushort NFib { get; internal set; }
    internal ushort BaseUnused { get; internal set; }
    internal ushort Lid { get; internal set; }
    internal ushort PnNext { get; internal set; }
    internal bool FDot { get; internal set; }
    internal bool FGlsy { get; internal set; }
    internal bool FComplex { get; internal set; }
    internal bool FHasPic { get; internal set; }
    internal byte CQuickSaves { get; internal set; }
    internal bool FEncrypted { get; internal set; }
    internal bool FWhichTblStm { get; internal set; }
    internal bool FReadOnlyRecommended { get; internal set; }
    internal bool FWriteReservation { get; internal set; }
    internal bool FExtChar { get; internal set; }
    internal bool FLoadOverride { get; internal set; }
    internal bool FFarEast { get; internal set; }
    internal bool FObfuscated { get; internal set; }
    internal ushort NFibBack { get; internal set; }
    internal int LKey { get; internal set; }
    internal byte Envr { get; internal set; }
    internal bool FMac { get; internal set; }
    internal bool FEmptySpecial { get; internal set; }
    internal bool FLoadOverridePage { get; internal set; }
    internal bool BaseReserved1 { get; internal set; }
    internal bool BaseReserved2 { get; internal set; }
    internal byte FSpare0 { get; internal set; }
    internal ushort BaseReserved3 { get; internal set; }
    internal ushort BaseReserved4 { get; internal set; }
    internal UInt32 BaseReserved5 { get; internal set; }
    internal UInt32 BaseReserved6 { get; internal set; }
    internal ushort Csw { get; internal set; }
    internal ushort FibRgWReserved1 { get; internal set; }
    internal ushort FibRgWReserved2 { get; internal set; }
    internal ushort FibRgWReserved3 { get; internal set; }
    internal ushort FibRgWReserved4 { get; internal set; }
    internal ushort FibRgWReserved5 { get; internal set; }
    internal ushort FibRgWReserved6 { get; internal set; }
    internal ushort FibRgWReserved7 { get; internal set; }
    internal ushort FibRgWReserved8 { get; internal set; }
    internal ushort FibRgWReserved9 { get; internal set; }
    internal ushort FibRgWReserved10 { get; internal set; }
    internal ushort FibRgWReserved11 { get; internal set; }
    internal ushort FibRgWReserved12 { get; internal set; }
    internal ushort FibRgWReserved13 { get; internal set; }
    internal ushort FibRgWLidFE { get; internal set; }
    internal ushort Cslw { get; internal set; }
    internal int CbMac { get; internal set; }
    internal int RgLwReserved1 { get; internal set; }
    internal int RgLwReserved2 { get; internal set; }
    internal int CcpText { get; internal set; }
    internal int CcpFtn { get; internal set; }
    internal int CcpHdd { get; internal set; }
    internal int RgLwReserved3 { get; internal set; }
    internal int CcpAtn { get; internal set; }
    internal int CcpEdn { get; internal set; }
    internal int CcpTxbx { get; internal set; }
    internal int CcpHdrTxbx { get; internal set; }
    internal int RgLwReserved4 { get; internal set; }
    internal int RgLwReserved5 { get; internal set; }
    internal int RgLwReserved6 { get; internal set; }
    internal int RgLwReserved7 { get; internal set; }
    internal int RgLwReserved8 { get; internal set; }
    internal int RgLwReserved9 { get; internal set; }
    internal int RgLwReserved10 { get; internal set; }
    internal int RgLwReserved11 { get; internal set; }
    internal int RgLwReserved12 { get; internal set; }
    internal int RgLwReserved13 { get; internal set; }
    internal int RgLwReserved14 { get; internal set; }
    internal ushort CbRgFcLcb { get; internal set; }
    internal UInt32 FibRgFcLcb97FcStshfOrig { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbStshfOrig { get; internal set; }
    internal UInt32 FibRgFcLcb97FcStshf { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbStshf { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcffndRef { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcffndRef { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcffndTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcffndTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfandRef { get; internal set; }
    internal UInt32 FibRgFcLcb97lcbPlcfandRef { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfandTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfandTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfSed { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfSed { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcPad { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcPad { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfPhe { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfPhe { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfGlsy { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfGlsy { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfGlsy { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfGlsy { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfHdd { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfHdd { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfBteChpx { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfBteChpx { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfBtePapx { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfBtePapx { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfSea { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfSea { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfFfn { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfFfn { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfFldMom { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfFldMom { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfFldHdr { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfFldHdr { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfFldFtn { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfFldFtn { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfFldAtn { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfFldAtn { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfFldMcr { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfFldMcr { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfBkmk { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfBkmk { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfBkf { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfBkf { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfBkl { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfBkl { get; internal set; }
    internal UInt32 FibRgFcLcb97FcCmds { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbCmds { get; internal set; }
    internal UInt32 FibRgFcLcb97FcUnused1 { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbUnused1 { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfMcr { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfMcr { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPrDrvr { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPrDrvr { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPrEnvPort { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPrEnvPort { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPrEnvLand { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPrEnvLand { get; internal set; }
    internal UInt32 FibRgFcLcb97FcWss { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbWss { get; internal set; }
    internal UInt32 FibRgFcLcb97FcDop { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbDop { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfAssoc { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfAssoc { get; internal set; }
    internal UInt32 FibRgFcLcb97FcClx { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbClx { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfPgdFtn { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfPgdFtn { get; internal set; }
    internal UInt32 FibRgFcLcb97FcAutosaveSource { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbAutosaveSource { get; internal set; }
    internal UInt32 FibRgFcLcb97FcGrpXstAtnOwners { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbGrpXstAtnOwners { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfAtnBkmk { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfAtnBkmk { get; internal set; }
    internal UInt32 FibRgFcLcb97FcUnused2 { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbUnused2 { get; internal set; }
    internal UInt32 FibRgFcLcb97FcUnused3 { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbUnused3 { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcSpaMom { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcSpaMom { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcSpaHdr { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcSpaHdr { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfAtnBkf { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfAtnBkf { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfAtnBkl { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfAtnBkl { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPms { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPms { get; internal set; }
    internal UInt32 FibRgFcLcb97FcFormFldSttbs { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbFormFldSttbs { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfendRef { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfendRef { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfendTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfendTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfFldEdn { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfFldEdn { get; internal set; }
    internal UInt32 FibRgFcLcb97FcUnused4 { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbUnused4 { get; internal set; }
    internal UInt32 FibRgFcLcb97FcDggInfo { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbDggInfo { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfRMark { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfRMark { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfCaption { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfCaption { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfAutoCaption { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfAutoCaption { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfWkb { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfWkb { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfSpl { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfSpl { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcftxbxTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcftxbxTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfFldTxbx { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfFldTxbx { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfHdrtxbxTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfHdrtxbxTxt { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcffldHdrTxbx { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcffldHdrTxbx { get; internal set; }
    internal UInt32 FibRgFcLcb97FcStwUser { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbStwUser { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbTtmbd { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbTtmbd { get; internal set; }
    internal UInt32 FibRgFcLcb97FcCookieData { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbCookieData { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPgdMotherOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPgdMotherOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97FcBkdMotherOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbBkdMotherOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPgdFtnOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPgdFtnOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97FcBkdFtnOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbBkdFtnOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPgdEdnOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPgdEdnOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97FcBkdEdnOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbBkdEdnOldOld { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbfIntlFld { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfIntlFld { get; internal set; }
    internal UInt32 FibRgFcLcb97FcRouteSlip { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbRouteSlip { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbSavedBy { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbSavedBy { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbFnm { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbFnm { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlfLst { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlfLst { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlfLfo { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlfLfo { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfTxbxBkd { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfTxbxBkd { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfTxbxHdrBkd { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfTxbxHdrBkd { get; internal set; }
    internal UInt32 FibRgFcLcb97FcDocUndoWord9 { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbDocUndoWord9 { get; internal set; }
    internal UInt32 FibRgFcLcb97FcRgbUse { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbRgbUse { get; internal set; }
    internal UInt32 FibRgFcLcb97FcUsp { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbUsp { get; internal set; }
    internal UInt32 FibRgFcLcb97FcUskf { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbUskf { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcupcRgbUse { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcupcRgbUse { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcupcUsp { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcupcUsp { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbGlsyStyle { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbGlsyStyle { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlgosl { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlgosl { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcocx { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcocx { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfBteLvc { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfBteLvc { get; internal set; }
    internal UInt32 FibRgFcLcb97DwLowDateTime { get; internal set; }
    internal UInt32 FibRgFcLcb97DwHighDateTime { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfLvcPre10 { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfLvcPre10 { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfAsumy { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfAsumy { get; internal set; }
    internal UInt32 FibRgFcLcb97FcPlcfGram { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbPlcfGram { get; internal set; }
    internal UInt32 FibRgFcLcb97FcSttbListNames { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbListNames { get; internal set; }
    internal UInt32 FibRgFcLcb97fcSttbfUssr { get; internal set; }
    internal UInt32 FibRgFcLcb97LcbSttbfUssr { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcPlcfTch { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbPlcfTch { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcRmdThreading { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbRmdThreading { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcMid { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbMid { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcSttbRgtplc { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbSttbRgtplc { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcMsoEnvelope { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbMsoEnvelope { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcPlcfLad { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbPlcfLad { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcRgDofr { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbRgDofr { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcPlcosl { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbPlcosl { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcPlcfCookieOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbPlcfCookieOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcPgdMotherOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbPgdMotherOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcBkdMotherOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbBkdMotherOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcPgdFtnOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbPgdFtnOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcBkdFtnOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbBkdFtnOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcPgdEdnOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbPgdEdnOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000FcBkdEdnOld { get; internal set; }
    internal UInt32 FibRgFcLcb2000LcbBkdEdnOld { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcUnused1 { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbUnused1 { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfPgp { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfPgp { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfuim { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfuim { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlfguidUim { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlfguidUim { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcAtrdExtra { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbAtrdExtra { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlrsid { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlrsid { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcSttbfBkmkFactoid { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbSttbfBkmkFactoid { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfBkfFactoid { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfBkfFactoid { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfcookie { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfcookie { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfBklFactoid { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfBklFactoid { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcFactoidData { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbFactoidData { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcDocUndo { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbDocUndo { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcSttbfBkmkFcc { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbSttbfBkmkFcc { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfBkfFcc { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfBkfFcc { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfBklFcc { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfBklFcc { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcSttbfbkmkBPRepairs { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbSttbfbkmkBPRepairs { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfbkfBPRepairs { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfbkfBPRepairs { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfbklBPRepairs { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfbklBPRepairs { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPmsNew { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPmsNew { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcODSO { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbODSO { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfpmiOldXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfpmiOldXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfpmiNewXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfpmiNewXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcfpmiMixedXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcfpmiMixedXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcUnused2 { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbUnused2 { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcffactoid { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcffactoid { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcflvcOldXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcflvcOldXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcflvcNewXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcflvcNewXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002FcPlcflvcMixedXP { get; internal set; }
    internal UInt32 FibRgFcLcb2002LcbPlcflvcMixedXP { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcHplxsdr { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbHplxsdr { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcSttbfBkmkSdt { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbSttbfBkmkSdt { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcfBkfSdt { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcfBkfSdt { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcfBklSdt { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcfBklSdt { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcCustomXForm { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbCustomXForm { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcSttbfBkmkProt { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbSttbfBkmkProt { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcfBkfProt { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcfBkfProt { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcfBklProt { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcfBklProt { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcSttbProtUser { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbSttbProtUser { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcUnused { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbUnused { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcfpmiOld { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcfpmiOld { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcfpmiOldInline { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcfpmiOldInline { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcfpmiNew { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcfpmiNew { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcfpmiNewInline { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcfpmiNewInline { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcflvcOld { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcflvcOld { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcflvcOldInline { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcflvcOldInline { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcflvcNew { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcflvcNew { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPlcflvcNewInline { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPlcflvcNewInline { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPgdMother { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPgdMother { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcBkdMother { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbBkdMother { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcAfdMother { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbAfdMother { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPgdFtn { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPgdFtn { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcBkdFtn { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbBkdFtn { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcAfdFtn { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbAfdFtn { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcPgdEdn { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbPgdEdn { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcBkdEdn { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbBkdEdn { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcAfdEdn { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbAfdEdn { get; internal set; }
    internal UInt32 FibRgFcLcb2003FcAfd { get; internal set; }
    internal UInt32 FibRgFcLcb2003LcbAfd { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcPlcfmthd { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbPlcfmthd { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcSttbfBkmkMoveFrom { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbSttbfBkmkMoveFrom { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcPlcfBkfMoveFrom { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbPlcfBkfMoveFrom { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcPlcfBklMoveFrom { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbPlcfBklMoveFrom { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcSttbfBkmkMoveTo { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbSttbfBkmkMoveTo { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcPlcfBkfMoveTo { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbPlcfBkfMoveTo { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcPlcfBklMoveTo { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbPlcfBklMoveTo { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcUnused1 { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbUnused1 { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcUnused2 { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbUnused2 { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcUnused3 { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbUnused3 { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcSttbfBkmkArto { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbSttbfBkmkArto { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcPlcfBkfArto { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbPlcfBkfArto { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcPlcfBklArto { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbPlcfBklArto { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcArtoData { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbArtoData { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcUnused4 { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbUnused4 { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcUnused5 { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbUnused5 { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcUnused6 { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbUnused6 { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcOssTheme { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbOssTheme { get; internal set; }
    internal UInt32 FibRgFcLcb2007FcColorSchemeMapping { get; internal set; }
    internal UInt32 FibRgFcLcb2007LcbColorSchemeMapping { get; internal set; }
    internal ushort CswNew { get; internal set; }
    internal ushort NFibNew { get; internal set; }
    internal ushort CQuickSavesNew { get; internal set; }
    internal ushort LidThemeOther { get; internal set; }
    internal ushort LidThemeFE { get; internal set; }
    internal ushort LidThemeCS { get; internal set; }
    internal int EncodingCharSize { get; }
    internal Encoding Encoding { get; internal set; }
    internal ushort get_FibVersion();
    internal ushort get_WIdent();
    internal void set_WIdent(ushort value);
    internal ushort get_NFib();
    internal void set_NFib(ushort value);
    internal ushort get_BaseUnused();
    internal void set_BaseUnused(ushort value);
    internal ushort get_Lid();
    internal void set_Lid(ushort value);
    internal ushort get_PnNext();
    internal void set_PnNext(ushort value);
    internal bool get_FDot();
    internal void set_FDot(bool value);
    internal bool get_FGlsy();
    internal void set_FGlsy(bool value);
    internal bool get_FComplex();
    internal void set_FComplex(bool value);
    internal bool get_FHasPic();
    internal void set_FHasPic(bool value);
    internal byte get_CQuickSaves();
    internal void set_CQuickSaves(byte value);
    internal bool get_FEncrypted();
    internal void set_FEncrypted(bool value);
    internal bool get_FWhichTblStm();
    internal void set_FWhichTblStm(bool value);
    internal bool get_FReadOnlyRecommended();
    internal void set_FReadOnlyRecommended(bool value);
    internal bool get_FWriteReservation();
    internal void set_FWriteReservation(bool value);
    internal bool get_FExtChar();
    internal void set_FExtChar(bool value);
    internal bool get_FLoadOverride();
    internal void set_FLoadOverride(bool value);
    internal bool get_FFarEast();
    internal void set_FFarEast(bool value);
    internal bool get_FObfuscated();
    internal void set_FObfuscated(bool value);
    internal ushort get_NFibBack();
    internal void set_NFibBack(ushort value);
    internal int get_LKey();
    internal void set_LKey(int value);
    internal byte get_Envr();
    internal void set_Envr(byte value);
    internal bool get_FMac();
    internal void set_FMac(bool value);
    internal bool get_FEmptySpecial();
    internal void set_FEmptySpecial(bool value);
    internal bool get_FLoadOverridePage();
    internal void set_FLoadOverridePage(bool value);
    internal bool get_BaseReserved1();
    internal void set_BaseReserved1(bool value);
    internal bool get_BaseReserved2();
    internal void set_BaseReserved2(bool value);
    internal byte get_FSpare0();
    internal void set_FSpare0(byte value);
    internal ushort get_BaseReserved3();
    internal void set_BaseReserved3(ushort value);
    internal ushort get_BaseReserved4();
    internal void set_BaseReserved4(ushort value);
    internal UInt32 get_BaseReserved5();
    internal void set_BaseReserved5(UInt32 value);
    internal UInt32 get_BaseReserved6();
    internal void set_BaseReserved6(UInt32 value);
    internal ushort get_Csw();
    internal void set_Csw(ushort value);
    internal ushort get_FibRgWReserved1();
    internal void set_FibRgWReserved1(ushort value);
    internal ushort get_FibRgWReserved2();
    internal void set_FibRgWReserved2(ushort value);
    internal ushort get_FibRgWReserved3();
    internal void set_FibRgWReserved3(ushort value);
    internal ushort get_FibRgWReserved4();
    internal void set_FibRgWReserved4(ushort value);
    internal ushort get_FibRgWReserved5();
    internal void set_FibRgWReserved5(ushort value);
    internal ushort get_FibRgWReserved6();
    internal void set_FibRgWReserved6(ushort value);
    internal ushort get_FibRgWReserved7();
    internal void set_FibRgWReserved7(ushort value);
    internal ushort get_FibRgWReserved8();
    internal void set_FibRgWReserved8(ushort value);
    internal ushort get_FibRgWReserved9();
    internal void set_FibRgWReserved9(ushort value);
    internal ushort get_FibRgWReserved10();
    internal void set_FibRgWReserved10(ushort value);
    internal ushort get_FibRgWReserved11();
    internal void set_FibRgWReserved11(ushort value);
    internal ushort get_FibRgWReserved12();
    internal void set_FibRgWReserved12(ushort value);
    internal ushort get_FibRgWReserved13();
    internal void set_FibRgWReserved13(ushort value);
    internal ushort get_FibRgWLidFE();
    internal void set_FibRgWLidFE(ushort value);
    internal ushort get_Cslw();
    internal void set_Cslw(ushort value);
    internal int get_CbMac();
    internal void set_CbMac(int value);
    internal int get_RgLwReserved1();
    internal void set_RgLwReserved1(int value);
    internal int get_RgLwReserved2();
    internal void set_RgLwReserved2(int value);
    internal int get_CcpText();
    internal void set_CcpText(int value);
    internal int get_CcpFtn();
    internal void set_CcpFtn(int value);
    internal int get_CcpHdd();
    internal void set_CcpHdd(int value);
    internal int get_RgLwReserved3();
    internal void set_RgLwReserved3(int value);
    internal int get_CcpAtn();
    internal void set_CcpAtn(int value);
    internal int get_CcpEdn();
    internal void set_CcpEdn(int value);
    internal int get_CcpTxbx();
    internal void set_CcpTxbx(int value);
    internal int get_CcpHdrTxbx();
    internal void set_CcpHdrTxbx(int value);
    internal int get_RgLwReserved4();
    internal void set_RgLwReserved4(int value);
    internal int get_RgLwReserved5();
    internal void set_RgLwReserved5(int value);
    internal int get_RgLwReserved6();
    internal void set_RgLwReserved6(int value);
    internal int get_RgLwReserved7();
    internal void set_RgLwReserved7(int value);
    internal int get_RgLwReserved8();
    internal void set_RgLwReserved8(int value);
    internal int get_RgLwReserved9();
    internal void set_RgLwReserved9(int value);
    internal int get_RgLwReserved10();
    internal void set_RgLwReserved10(int value);
    internal int get_RgLwReserved11();
    internal void set_RgLwReserved11(int value);
    internal int get_RgLwReserved12();
    internal void set_RgLwReserved12(int value);
    internal int get_RgLwReserved13();
    internal void set_RgLwReserved13(int value);
    internal int get_RgLwReserved14();
    internal void set_RgLwReserved14(int value);
    internal ushort get_CbRgFcLcb();
    internal void set_CbRgFcLcb(ushort value);
    internal UInt32 get_FibRgFcLcb97FcStshfOrig();
    internal void set_FibRgFcLcb97FcStshfOrig(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbStshfOrig();
    internal void set_FibRgFcLcb97LcbStshfOrig(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcStshf();
    internal void set_FibRgFcLcb97FcStshf(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbStshf();
    internal void set_FibRgFcLcb97LcbStshf(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcffndRef();
    internal void set_FibRgFcLcb97FcPlcffndRef(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcffndRef();
    internal void set_FibRgFcLcb97LcbPlcffndRef(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcffndTxt();
    internal void set_FibRgFcLcb97FcPlcffndTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcffndTxt();
    internal void set_FibRgFcLcb97LcbPlcffndTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfandRef();
    internal void set_FibRgFcLcb97FcPlcfandRef(UInt32 value);
    internal UInt32 get_FibRgFcLcb97lcbPlcfandRef();
    internal void set_FibRgFcLcb97lcbPlcfandRef(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfandTxt();
    internal void set_FibRgFcLcb97FcPlcfandTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfandTxt();
    internal void set_FibRgFcLcb97LcbPlcfandTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfSed();
    internal void set_FibRgFcLcb97FcPlcfSed(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfSed();
    internal void set_FibRgFcLcb97LcbPlcfSed(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcPad();
    internal void set_FibRgFcLcb97FcPlcPad(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcPad();
    internal void set_FibRgFcLcb97LcbPlcPad(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfPhe();
    internal void set_FibRgFcLcb97FcPlcfPhe(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfPhe();
    internal void set_FibRgFcLcb97LcbPlcfPhe(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfGlsy();
    internal void set_FibRgFcLcb97FcSttbfGlsy(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfGlsy();
    internal void set_FibRgFcLcb97LcbSttbfGlsy(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfGlsy();
    internal void set_FibRgFcLcb97FcPlcfGlsy(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfGlsy();
    internal void set_FibRgFcLcb97LcbPlcfGlsy(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfHdd();
    internal void set_FibRgFcLcb97FcPlcfHdd(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfHdd();
    internal void set_FibRgFcLcb97LcbPlcfHdd(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfBteChpx();
    internal void set_FibRgFcLcb97FcPlcfBteChpx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfBteChpx();
    internal void set_FibRgFcLcb97LcbPlcfBteChpx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfBtePapx();
    internal void set_FibRgFcLcb97FcPlcfBtePapx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfBtePapx();
    internal void set_FibRgFcLcb97LcbPlcfBtePapx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfSea();
    internal void set_FibRgFcLcb97FcPlcfSea(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfSea();
    internal void set_FibRgFcLcb97LcbPlcfSea(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfFfn();
    internal void set_FibRgFcLcb97FcSttbfFfn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfFfn();
    internal void set_FibRgFcLcb97LcbSttbfFfn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfFldMom();
    internal void set_FibRgFcLcb97FcPlcfFldMom(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfFldMom();
    internal void set_FibRgFcLcb97LcbPlcfFldMom(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfFldHdr();
    internal void set_FibRgFcLcb97FcPlcfFldHdr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfFldHdr();
    internal void set_FibRgFcLcb97LcbPlcfFldHdr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfFldFtn();
    internal void set_FibRgFcLcb97FcPlcfFldFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfFldFtn();
    internal void set_FibRgFcLcb97LcbPlcfFldFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfFldAtn();
    internal void set_FibRgFcLcb97FcPlcfFldAtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfFldAtn();
    internal void set_FibRgFcLcb97LcbPlcfFldAtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfFldMcr();
    internal void set_FibRgFcLcb97FcPlcfFldMcr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfFldMcr();
    internal void set_FibRgFcLcb97LcbPlcfFldMcr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfBkmk();
    internal void set_FibRgFcLcb97FcSttbfBkmk(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfBkmk();
    internal void set_FibRgFcLcb97LcbSttbfBkmk(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfBkf();
    internal void set_FibRgFcLcb97FcPlcfBkf(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfBkf();
    internal void set_FibRgFcLcb97LcbPlcfBkf(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfBkl();
    internal void set_FibRgFcLcb97FcPlcfBkl(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfBkl();
    internal void set_FibRgFcLcb97LcbPlcfBkl(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcCmds();
    internal void set_FibRgFcLcb97FcCmds(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbCmds();
    internal void set_FibRgFcLcb97LcbCmds(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcUnused1();
    internal void set_FibRgFcLcb97FcUnused1(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbUnused1();
    internal void set_FibRgFcLcb97LcbUnused1(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfMcr();
    internal void set_FibRgFcLcb97FcSttbfMcr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfMcr();
    internal void set_FibRgFcLcb97LcbSttbfMcr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPrDrvr();
    internal void set_FibRgFcLcb97FcPrDrvr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPrDrvr();
    internal void set_FibRgFcLcb97LcbPrDrvr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPrEnvPort();
    internal void set_FibRgFcLcb97FcPrEnvPort(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPrEnvPort();
    internal void set_FibRgFcLcb97LcbPrEnvPort(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPrEnvLand();
    internal void set_FibRgFcLcb97FcPrEnvLand(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPrEnvLand();
    internal void set_FibRgFcLcb97LcbPrEnvLand(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcWss();
    internal void set_FibRgFcLcb97FcWss(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbWss();
    internal void set_FibRgFcLcb97LcbWss(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcDop();
    internal void set_FibRgFcLcb97FcDop(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbDop();
    internal void set_FibRgFcLcb97LcbDop(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfAssoc();
    internal void set_FibRgFcLcb97FcSttbfAssoc(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfAssoc();
    internal void set_FibRgFcLcb97LcbSttbfAssoc(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcClx();
    internal void set_FibRgFcLcb97FcClx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbClx();
    internal void set_FibRgFcLcb97LcbClx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfPgdFtn();
    internal void set_FibRgFcLcb97FcPlcfPgdFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfPgdFtn();
    internal void set_FibRgFcLcb97LcbPlcfPgdFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcAutosaveSource();
    internal void set_FibRgFcLcb97FcAutosaveSource(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbAutosaveSource();
    internal void set_FibRgFcLcb97LcbAutosaveSource(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcGrpXstAtnOwners();
    internal void set_FibRgFcLcb97FcGrpXstAtnOwners(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbGrpXstAtnOwners();
    internal void set_FibRgFcLcb97LcbGrpXstAtnOwners(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfAtnBkmk();
    internal void set_FibRgFcLcb97FcSttbfAtnBkmk(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfAtnBkmk();
    internal void set_FibRgFcLcb97LcbSttbfAtnBkmk(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcUnused2();
    internal void set_FibRgFcLcb97FcUnused2(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbUnused2();
    internal void set_FibRgFcLcb97LcbUnused2(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcUnused3();
    internal void set_FibRgFcLcb97FcUnused3(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbUnused3();
    internal void set_FibRgFcLcb97LcbUnused3(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcSpaMom();
    internal void set_FibRgFcLcb97FcPlcSpaMom(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcSpaMom();
    internal void set_FibRgFcLcb97LcbPlcSpaMom(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcSpaHdr();
    internal void set_FibRgFcLcb97FcPlcSpaHdr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcSpaHdr();
    internal void set_FibRgFcLcb97LcbPlcSpaHdr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfAtnBkf();
    internal void set_FibRgFcLcb97FcPlcfAtnBkf(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfAtnBkf();
    internal void set_FibRgFcLcb97LcbPlcfAtnBkf(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfAtnBkl();
    internal void set_FibRgFcLcb97FcPlcfAtnBkl(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfAtnBkl();
    internal void set_FibRgFcLcb97LcbPlcfAtnBkl(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPms();
    internal void set_FibRgFcLcb97FcPms(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPms();
    internal void set_FibRgFcLcb97LcbPms(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcFormFldSttbs();
    internal void set_FibRgFcLcb97FcFormFldSttbs(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbFormFldSttbs();
    internal void set_FibRgFcLcb97LcbFormFldSttbs(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfendRef();
    internal void set_FibRgFcLcb97FcPlcfendRef(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfendRef();
    internal void set_FibRgFcLcb97LcbPlcfendRef(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfendTxt();
    internal void set_FibRgFcLcb97FcPlcfendTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfendTxt();
    internal void set_FibRgFcLcb97LcbPlcfendTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfFldEdn();
    internal void set_FibRgFcLcb97FcPlcfFldEdn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfFldEdn();
    internal void set_FibRgFcLcb97LcbPlcfFldEdn(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcUnused4();
    internal void set_FibRgFcLcb97FcUnused4(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbUnused4();
    internal void set_FibRgFcLcb97LcbUnused4(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcDggInfo();
    internal void set_FibRgFcLcb97FcDggInfo(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbDggInfo();
    internal void set_FibRgFcLcb97LcbDggInfo(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfRMark();
    internal void set_FibRgFcLcb97FcSttbfRMark(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfRMark();
    internal void set_FibRgFcLcb97LcbSttbfRMark(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfCaption();
    internal void set_FibRgFcLcb97FcSttbfCaption(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfCaption();
    internal void set_FibRgFcLcb97LcbSttbfCaption(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfAutoCaption();
    internal void set_FibRgFcLcb97FcSttbfAutoCaption(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfAutoCaption();
    internal void set_FibRgFcLcb97LcbSttbfAutoCaption(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfWkb();
    internal void set_FibRgFcLcb97FcPlcfWkb(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfWkb();
    internal void set_FibRgFcLcb97LcbPlcfWkb(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfSpl();
    internal void set_FibRgFcLcb97FcPlcfSpl(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfSpl();
    internal void set_FibRgFcLcb97LcbPlcfSpl(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcftxbxTxt();
    internal void set_FibRgFcLcb97FcPlcftxbxTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcftxbxTxt();
    internal void set_FibRgFcLcb97LcbPlcftxbxTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfFldTxbx();
    internal void set_FibRgFcLcb97FcPlcfFldTxbx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfFldTxbx();
    internal void set_FibRgFcLcb97LcbPlcfFldTxbx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfHdrtxbxTxt();
    internal void set_FibRgFcLcb97FcPlcfHdrtxbxTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfHdrtxbxTxt();
    internal void set_FibRgFcLcb97LcbPlcfHdrtxbxTxt(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcffldHdrTxbx();
    internal void set_FibRgFcLcb97FcPlcffldHdrTxbx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcffldHdrTxbx();
    internal void set_FibRgFcLcb97LcbPlcffldHdrTxbx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcStwUser();
    internal void set_FibRgFcLcb97FcStwUser(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbStwUser();
    internal void set_FibRgFcLcb97LcbStwUser(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbTtmbd();
    internal void set_FibRgFcLcb97FcSttbTtmbd(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbTtmbd();
    internal void set_FibRgFcLcb97LcbSttbTtmbd(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcCookieData();
    internal void set_FibRgFcLcb97FcCookieData(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbCookieData();
    internal void set_FibRgFcLcb97LcbCookieData(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPgdMotherOldOld();
    internal void set_FibRgFcLcb97FcPgdMotherOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPgdMotherOldOld();
    internal void set_FibRgFcLcb97LcbPgdMotherOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcBkdMotherOldOld();
    internal void set_FibRgFcLcb97FcBkdMotherOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbBkdMotherOldOld();
    internal void set_FibRgFcLcb97LcbBkdMotherOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPgdFtnOldOld();
    internal void set_FibRgFcLcb97FcPgdFtnOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPgdFtnOldOld();
    internal void set_FibRgFcLcb97LcbPgdFtnOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcBkdFtnOldOld();
    internal void set_FibRgFcLcb97FcBkdFtnOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbBkdFtnOldOld();
    internal void set_FibRgFcLcb97LcbBkdFtnOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPgdEdnOldOld();
    internal void set_FibRgFcLcb97FcPgdEdnOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPgdEdnOldOld();
    internal void set_FibRgFcLcb97LcbPgdEdnOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcBkdEdnOldOld();
    internal void set_FibRgFcLcb97FcBkdEdnOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbBkdEdnOldOld();
    internal void set_FibRgFcLcb97LcbBkdEdnOldOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbfIntlFld();
    internal void set_FibRgFcLcb97FcSttbfIntlFld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfIntlFld();
    internal void set_FibRgFcLcb97LcbSttbfIntlFld(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcRouteSlip();
    internal void set_FibRgFcLcb97FcRouteSlip(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbRouteSlip();
    internal void set_FibRgFcLcb97LcbRouteSlip(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbSavedBy();
    internal void set_FibRgFcLcb97FcSttbSavedBy(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbSavedBy();
    internal void set_FibRgFcLcb97LcbSttbSavedBy(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbFnm();
    internal void set_FibRgFcLcb97FcSttbFnm(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbFnm();
    internal void set_FibRgFcLcb97LcbSttbFnm(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlfLst();
    internal void set_FibRgFcLcb97FcPlfLst(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlfLst();
    internal void set_FibRgFcLcb97LcbPlfLst(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlfLfo();
    internal void set_FibRgFcLcb97FcPlfLfo(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlfLfo();
    internal void set_FibRgFcLcb97LcbPlfLfo(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfTxbxBkd();
    internal void set_FibRgFcLcb97FcPlcfTxbxBkd(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfTxbxBkd();
    internal void set_FibRgFcLcb97LcbPlcfTxbxBkd(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfTxbxHdrBkd();
    internal void set_FibRgFcLcb97FcPlcfTxbxHdrBkd(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfTxbxHdrBkd();
    internal void set_FibRgFcLcb97LcbPlcfTxbxHdrBkd(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcDocUndoWord9();
    internal void set_FibRgFcLcb97FcDocUndoWord9(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbDocUndoWord9();
    internal void set_FibRgFcLcb97LcbDocUndoWord9(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcRgbUse();
    internal void set_FibRgFcLcb97FcRgbUse(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbRgbUse();
    internal void set_FibRgFcLcb97LcbRgbUse(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcUsp();
    internal void set_FibRgFcLcb97FcUsp(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbUsp();
    internal void set_FibRgFcLcb97LcbUsp(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcUskf();
    internal void set_FibRgFcLcb97FcUskf(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbUskf();
    internal void set_FibRgFcLcb97LcbUskf(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcupcRgbUse();
    internal void set_FibRgFcLcb97FcPlcupcRgbUse(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcupcRgbUse();
    internal void set_FibRgFcLcb97LcbPlcupcRgbUse(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcupcUsp();
    internal void set_FibRgFcLcb97FcPlcupcUsp(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcupcUsp();
    internal void set_FibRgFcLcb97LcbPlcupcUsp(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbGlsyStyle();
    internal void set_FibRgFcLcb97FcSttbGlsyStyle(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbGlsyStyle();
    internal void set_FibRgFcLcb97LcbSttbGlsyStyle(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlgosl();
    internal void set_FibRgFcLcb97FcPlgosl(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlgosl();
    internal void set_FibRgFcLcb97LcbPlgosl(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcocx();
    internal void set_FibRgFcLcb97FcPlcocx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcocx();
    internal void set_FibRgFcLcb97LcbPlcocx(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfBteLvc();
    internal void set_FibRgFcLcb97FcPlcfBteLvc(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfBteLvc();
    internal void set_FibRgFcLcb97LcbPlcfBteLvc(UInt32 value);
    internal UInt32 get_FibRgFcLcb97DwLowDateTime();
    internal void set_FibRgFcLcb97DwLowDateTime(UInt32 value);
    internal UInt32 get_FibRgFcLcb97DwHighDateTime();
    internal void set_FibRgFcLcb97DwHighDateTime(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfLvcPre10();
    internal void set_FibRgFcLcb97FcPlcfLvcPre10(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfLvcPre10();
    internal void set_FibRgFcLcb97LcbPlcfLvcPre10(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfAsumy();
    internal void set_FibRgFcLcb97FcPlcfAsumy(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfAsumy();
    internal void set_FibRgFcLcb97LcbPlcfAsumy(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcPlcfGram();
    internal void set_FibRgFcLcb97FcPlcfGram(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbPlcfGram();
    internal void set_FibRgFcLcb97LcbPlcfGram(UInt32 value);
    internal UInt32 get_FibRgFcLcb97FcSttbListNames();
    internal void set_FibRgFcLcb97FcSttbListNames(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbListNames();
    internal void set_FibRgFcLcb97LcbSttbListNames(UInt32 value);
    internal UInt32 get_FibRgFcLcb97fcSttbfUssr();
    internal void set_FibRgFcLcb97fcSttbfUssr(UInt32 value);
    internal UInt32 get_FibRgFcLcb97LcbSttbfUssr();
    internal void set_FibRgFcLcb97LcbSttbfUssr(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcPlcfTch();
    internal void set_FibRgFcLcb2000FcPlcfTch(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbPlcfTch();
    internal void set_FibRgFcLcb2000LcbPlcfTch(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcRmdThreading();
    internal void set_FibRgFcLcb2000FcRmdThreading(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbRmdThreading();
    internal void set_FibRgFcLcb2000LcbRmdThreading(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcMid();
    internal void set_FibRgFcLcb2000FcMid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbMid();
    internal void set_FibRgFcLcb2000LcbMid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcSttbRgtplc();
    internal void set_FibRgFcLcb2000FcSttbRgtplc(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbSttbRgtplc();
    internal void set_FibRgFcLcb2000LcbSttbRgtplc(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcMsoEnvelope();
    internal void set_FibRgFcLcb2000FcMsoEnvelope(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbMsoEnvelope();
    internal void set_FibRgFcLcb2000LcbMsoEnvelope(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcPlcfLad();
    internal void set_FibRgFcLcb2000FcPlcfLad(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbPlcfLad();
    internal void set_FibRgFcLcb2000LcbPlcfLad(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcRgDofr();
    internal void set_FibRgFcLcb2000FcRgDofr(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbRgDofr();
    internal void set_FibRgFcLcb2000LcbRgDofr(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcPlcosl();
    internal void set_FibRgFcLcb2000FcPlcosl(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbPlcosl();
    internal void set_FibRgFcLcb2000LcbPlcosl(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcPlcfCookieOld();
    internal void set_FibRgFcLcb2000FcPlcfCookieOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbPlcfCookieOld();
    internal void set_FibRgFcLcb2000LcbPlcfCookieOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcPgdMotherOld();
    internal void set_FibRgFcLcb2000FcPgdMotherOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbPgdMotherOld();
    internal void set_FibRgFcLcb2000LcbPgdMotherOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcBkdMotherOld();
    internal void set_FibRgFcLcb2000FcBkdMotherOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbBkdMotherOld();
    internal void set_FibRgFcLcb2000LcbBkdMotherOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcPgdFtnOld();
    internal void set_FibRgFcLcb2000FcPgdFtnOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbPgdFtnOld();
    internal void set_FibRgFcLcb2000LcbPgdFtnOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcBkdFtnOld();
    internal void set_FibRgFcLcb2000FcBkdFtnOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbBkdFtnOld();
    internal void set_FibRgFcLcb2000LcbBkdFtnOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcPgdEdnOld();
    internal void set_FibRgFcLcb2000FcPgdEdnOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbPgdEdnOld();
    internal void set_FibRgFcLcb2000LcbPgdEdnOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000FcBkdEdnOld();
    internal void set_FibRgFcLcb2000FcBkdEdnOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2000LcbBkdEdnOld();
    internal void set_FibRgFcLcb2000LcbBkdEdnOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcUnused1();
    internal void set_FibRgFcLcb2002FcUnused1(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbUnused1();
    internal void set_FibRgFcLcb2002LcbUnused1(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfPgp();
    internal void set_FibRgFcLcb2002FcPlcfPgp(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfPgp();
    internal void set_FibRgFcLcb2002LcbPlcfPgp(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfuim();
    internal void set_FibRgFcLcb2002FcPlcfuim(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfuim();
    internal void set_FibRgFcLcb2002LcbPlcfuim(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlfguidUim();
    internal void set_FibRgFcLcb2002FcPlfguidUim(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlfguidUim();
    internal void set_FibRgFcLcb2002LcbPlfguidUim(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcAtrdExtra();
    internal void set_FibRgFcLcb2002FcAtrdExtra(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbAtrdExtra();
    internal void set_FibRgFcLcb2002LcbAtrdExtra(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlrsid();
    internal void set_FibRgFcLcb2002FcPlrsid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlrsid();
    internal void set_FibRgFcLcb2002LcbPlrsid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcSttbfBkmkFactoid();
    internal void set_FibRgFcLcb2002FcSttbfBkmkFactoid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbSttbfBkmkFactoid();
    internal void set_FibRgFcLcb2002LcbSttbfBkmkFactoid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfBkfFactoid();
    internal void set_FibRgFcLcb2002FcPlcfBkfFactoid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfBkfFactoid();
    internal void set_FibRgFcLcb2002LcbPlcfBkfFactoid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfcookie();
    internal void set_FibRgFcLcb2002FcPlcfcookie(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfcookie();
    internal void set_FibRgFcLcb2002LcbPlcfcookie(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfBklFactoid();
    internal void set_FibRgFcLcb2002FcPlcfBklFactoid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfBklFactoid();
    internal void set_FibRgFcLcb2002LcbPlcfBklFactoid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcFactoidData();
    internal void set_FibRgFcLcb2002FcFactoidData(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbFactoidData();
    internal void set_FibRgFcLcb2002LcbFactoidData(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcDocUndo();
    internal void set_FibRgFcLcb2002FcDocUndo(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbDocUndo();
    internal void set_FibRgFcLcb2002LcbDocUndo(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcSttbfBkmkFcc();
    internal void set_FibRgFcLcb2002FcSttbfBkmkFcc(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbSttbfBkmkFcc();
    internal void set_FibRgFcLcb2002LcbSttbfBkmkFcc(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfBkfFcc();
    internal void set_FibRgFcLcb2002FcPlcfBkfFcc(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfBkfFcc();
    internal void set_FibRgFcLcb2002LcbPlcfBkfFcc(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfBklFcc();
    internal void set_FibRgFcLcb2002FcPlcfBklFcc(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfBklFcc();
    internal void set_FibRgFcLcb2002LcbPlcfBklFcc(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcSttbfbkmkBPRepairs();
    internal void set_FibRgFcLcb2002FcSttbfbkmkBPRepairs(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbSttbfbkmkBPRepairs();
    internal void set_FibRgFcLcb2002LcbSttbfbkmkBPRepairs(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfbkfBPRepairs();
    internal void set_FibRgFcLcb2002FcPlcfbkfBPRepairs(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfbkfBPRepairs();
    internal void set_FibRgFcLcb2002LcbPlcfbkfBPRepairs(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfbklBPRepairs();
    internal void set_FibRgFcLcb2002FcPlcfbklBPRepairs(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfbklBPRepairs();
    internal void set_FibRgFcLcb2002LcbPlcfbklBPRepairs(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPmsNew();
    internal void set_FibRgFcLcb2002FcPmsNew(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPmsNew();
    internal void set_FibRgFcLcb2002LcbPmsNew(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcODSO();
    internal void set_FibRgFcLcb2002FcODSO(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbODSO();
    internal void set_FibRgFcLcb2002LcbODSO(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfpmiOldXP();
    internal void set_FibRgFcLcb2002FcPlcfpmiOldXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfpmiOldXP();
    internal void set_FibRgFcLcb2002LcbPlcfpmiOldXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfpmiNewXP();
    internal void set_FibRgFcLcb2002FcPlcfpmiNewXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfpmiNewXP();
    internal void set_FibRgFcLcb2002LcbPlcfpmiNewXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcfpmiMixedXP();
    internal void set_FibRgFcLcb2002FcPlcfpmiMixedXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcfpmiMixedXP();
    internal void set_FibRgFcLcb2002LcbPlcfpmiMixedXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcUnused2();
    internal void set_FibRgFcLcb2002FcUnused2(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbUnused2();
    internal void set_FibRgFcLcb2002LcbUnused2(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcffactoid();
    internal void set_FibRgFcLcb2002FcPlcffactoid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcffactoid();
    internal void set_FibRgFcLcb2002LcbPlcffactoid(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcflvcOldXP();
    internal void set_FibRgFcLcb2002FcPlcflvcOldXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcflvcOldXP();
    internal void set_FibRgFcLcb2002LcbPlcflvcOldXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcflvcNewXP();
    internal void set_FibRgFcLcb2002FcPlcflvcNewXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcflvcNewXP();
    internal void set_FibRgFcLcb2002LcbPlcflvcNewXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002FcPlcflvcMixedXP();
    internal void set_FibRgFcLcb2002FcPlcflvcMixedXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2002LcbPlcflvcMixedXP();
    internal void set_FibRgFcLcb2002LcbPlcflvcMixedXP(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcHplxsdr();
    internal void set_FibRgFcLcb2003FcHplxsdr(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbHplxsdr();
    internal void set_FibRgFcLcb2003LcbHplxsdr(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcSttbfBkmkSdt();
    internal void set_FibRgFcLcb2003FcSttbfBkmkSdt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbSttbfBkmkSdt();
    internal void set_FibRgFcLcb2003LcbSttbfBkmkSdt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcfBkfSdt();
    internal void set_FibRgFcLcb2003FcPlcfBkfSdt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcfBkfSdt();
    internal void set_FibRgFcLcb2003LcbPlcfBkfSdt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcfBklSdt();
    internal void set_FibRgFcLcb2003FcPlcfBklSdt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcfBklSdt();
    internal void set_FibRgFcLcb2003LcbPlcfBklSdt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcCustomXForm();
    internal void set_FibRgFcLcb2003FcCustomXForm(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbCustomXForm();
    internal void set_FibRgFcLcb2003LcbCustomXForm(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcSttbfBkmkProt();
    internal void set_FibRgFcLcb2003FcSttbfBkmkProt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbSttbfBkmkProt();
    internal void set_FibRgFcLcb2003LcbSttbfBkmkProt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcfBkfProt();
    internal void set_FibRgFcLcb2003FcPlcfBkfProt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcfBkfProt();
    internal void set_FibRgFcLcb2003LcbPlcfBkfProt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcfBklProt();
    internal void set_FibRgFcLcb2003FcPlcfBklProt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcfBklProt();
    internal void set_FibRgFcLcb2003LcbPlcfBklProt(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcSttbProtUser();
    internal void set_FibRgFcLcb2003FcSttbProtUser(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbSttbProtUser();
    internal void set_FibRgFcLcb2003LcbSttbProtUser(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcUnused();
    internal void set_FibRgFcLcb2003FcUnused(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbUnused();
    internal void set_FibRgFcLcb2003LcbUnused(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcfpmiOld();
    internal void set_FibRgFcLcb2003FcPlcfpmiOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcfpmiOld();
    internal void set_FibRgFcLcb2003LcbPlcfpmiOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcfpmiOldInline();
    internal void set_FibRgFcLcb2003FcPlcfpmiOldInline(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcfpmiOldInline();
    internal void set_FibRgFcLcb2003LcbPlcfpmiOldInline(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcfpmiNew();
    internal void set_FibRgFcLcb2003FcPlcfpmiNew(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcfpmiNew();
    internal void set_FibRgFcLcb2003LcbPlcfpmiNew(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcfpmiNewInline();
    internal void set_FibRgFcLcb2003FcPlcfpmiNewInline(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcfpmiNewInline();
    internal void set_FibRgFcLcb2003LcbPlcfpmiNewInline(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcflvcOld();
    internal void set_FibRgFcLcb2003FcPlcflvcOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcflvcOld();
    internal void set_FibRgFcLcb2003LcbPlcflvcOld(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcflvcOldInline();
    internal void set_FibRgFcLcb2003FcPlcflvcOldInline(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcflvcOldInline();
    internal void set_FibRgFcLcb2003LcbPlcflvcOldInline(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcflvcNew();
    internal void set_FibRgFcLcb2003FcPlcflvcNew(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcflvcNew();
    internal void set_FibRgFcLcb2003LcbPlcflvcNew(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPlcflvcNewInline();
    internal void set_FibRgFcLcb2003FcPlcflvcNewInline(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPlcflvcNewInline();
    internal void set_FibRgFcLcb2003LcbPlcflvcNewInline(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPgdMother();
    internal void set_FibRgFcLcb2003FcPgdMother(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPgdMother();
    internal void set_FibRgFcLcb2003LcbPgdMother(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcBkdMother();
    internal void set_FibRgFcLcb2003FcBkdMother(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbBkdMother();
    internal void set_FibRgFcLcb2003LcbBkdMother(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcAfdMother();
    internal void set_FibRgFcLcb2003FcAfdMother(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbAfdMother();
    internal void set_FibRgFcLcb2003LcbAfdMother(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPgdFtn();
    internal void set_FibRgFcLcb2003FcPgdFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPgdFtn();
    internal void set_FibRgFcLcb2003LcbPgdFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcBkdFtn();
    internal void set_FibRgFcLcb2003FcBkdFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbBkdFtn();
    internal void set_FibRgFcLcb2003LcbBkdFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcAfdFtn();
    internal void set_FibRgFcLcb2003FcAfdFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbAfdFtn();
    internal void set_FibRgFcLcb2003LcbAfdFtn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcPgdEdn();
    internal void set_FibRgFcLcb2003FcPgdEdn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbPgdEdn();
    internal void set_FibRgFcLcb2003LcbPgdEdn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcBkdEdn();
    internal void set_FibRgFcLcb2003FcBkdEdn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbBkdEdn();
    internal void set_FibRgFcLcb2003LcbBkdEdn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcAfdEdn();
    internal void set_FibRgFcLcb2003FcAfdEdn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbAfdEdn();
    internal void set_FibRgFcLcb2003LcbAfdEdn(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003FcAfd();
    internal void set_FibRgFcLcb2003FcAfd(UInt32 value);
    internal UInt32 get_FibRgFcLcb2003LcbAfd();
    internal void set_FibRgFcLcb2003LcbAfd(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcPlcfmthd();
    internal void set_FibRgFcLcb2007FcPlcfmthd(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbPlcfmthd();
    internal void set_FibRgFcLcb2007LcbPlcfmthd(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcSttbfBkmkMoveFrom();
    internal void set_FibRgFcLcb2007FcSttbfBkmkMoveFrom(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbSttbfBkmkMoveFrom();
    internal void set_FibRgFcLcb2007LcbSttbfBkmkMoveFrom(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcPlcfBkfMoveFrom();
    internal void set_FibRgFcLcb2007FcPlcfBkfMoveFrom(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbPlcfBkfMoveFrom();
    internal void set_FibRgFcLcb2007LcbPlcfBkfMoveFrom(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcPlcfBklMoveFrom();
    internal void set_FibRgFcLcb2007FcPlcfBklMoveFrom(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbPlcfBklMoveFrom();
    internal void set_FibRgFcLcb2007LcbPlcfBklMoveFrom(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcSttbfBkmkMoveTo();
    internal void set_FibRgFcLcb2007FcSttbfBkmkMoveTo(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbSttbfBkmkMoveTo();
    internal void set_FibRgFcLcb2007LcbSttbfBkmkMoveTo(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcPlcfBkfMoveTo();
    internal void set_FibRgFcLcb2007FcPlcfBkfMoveTo(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbPlcfBkfMoveTo();
    internal void set_FibRgFcLcb2007LcbPlcfBkfMoveTo(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcPlcfBklMoveTo();
    internal void set_FibRgFcLcb2007FcPlcfBklMoveTo(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbPlcfBklMoveTo();
    internal void set_FibRgFcLcb2007LcbPlcfBklMoveTo(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcUnused1();
    internal void set_FibRgFcLcb2007FcUnused1(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbUnused1();
    internal void set_FibRgFcLcb2007LcbUnused1(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcUnused2();
    internal void set_FibRgFcLcb2007FcUnused2(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbUnused2();
    internal void set_FibRgFcLcb2007LcbUnused2(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcUnused3();
    internal void set_FibRgFcLcb2007FcUnused3(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbUnused3();
    internal void set_FibRgFcLcb2007LcbUnused3(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcSttbfBkmkArto();
    internal void set_FibRgFcLcb2007FcSttbfBkmkArto(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbSttbfBkmkArto();
    internal void set_FibRgFcLcb2007LcbSttbfBkmkArto(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcPlcfBkfArto();
    internal void set_FibRgFcLcb2007FcPlcfBkfArto(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbPlcfBkfArto();
    internal void set_FibRgFcLcb2007LcbPlcfBkfArto(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcPlcfBklArto();
    internal void set_FibRgFcLcb2007FcPlcfBklArto(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbPlcfBklArto();
    internal void set_FibRgFcLcb2007LcbPlcfBklArto(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcArtoData();
    internal void set_FibRgFcLcb2007FcArtoData(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbArtoData();
    internal void set_FibRgFcLcb2007LcbArtoData(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcUnused4();
    internal void set_FibRgFcLcb2007FcUnused4(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbUnused4();
    internal void set_FibRgFcLcb2007LcbUnused4(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcUnused5();
    internal void set_FibRgFcLcb2007FcUnused5(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbUnused5();
    internal void set_FibRgFcLcb2007LcbUnused5(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcUnused6();
    internal void set_FibRgFcLcb2007FcUnused6(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbUnused6();
    internal void set_FibRgFcLcb2007LcbUnused6(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcOssTheme();
    internal void set_FibRgFcLcb2007FcOssTheme(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbOssTheme();
    internal void set_FibRgFcLcb2007LcbOssTheme(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007FcColorSchemeMapping();
    internal void set_FibRgFcLcb2007FcColorSchemeMapping(UInt32 value);
    internal UInt32 get_FibRgFcLcb2007LcbColorSchemeMapping();
    internal void set_FibRgFcLcb2007LcbColorSchemeMapping(UInt32 value);
    internal ushort get_CswNew();
    internal void set_CswNew(ushort value);
    internal ushort get_NFibNew();
    internal void set_NFibNew(ushort value);
    internal ushort get_CQuickSavesNew();
    internal void set_CQuickSavesNew(ushort value);
    internal ushort get_LidThemeOther();
    internal void set_LidThemeOther(ushort value);
    internal ushort get_LidThemeFE();
    internal void set_LidThemeFE(ushort value);
    internal ushort get_LidThemeCS();
    internal void set_LidThemeCS(ushort value);
    internal int get_EncodingCharSize();
    internal Encoding get_Encoding();
    internal void set_Encoding(Encoding value);
    private void Initialize();
    private void InitializeBeforeRead();
    internal void Read(Stream stream);
    internal void ReadAfterDecryption(Stream stream);
    private void ReadInternal(Stream stream);
    private void ValidateCbRgFcLcb();
    private void ValidateCswNew();
    private void CorrectFib();
    internal void Write(Stream stream, ushort fibVersion);
    private void WriteInternal(Stream stream);
    internal void WriteAfterEncryption(Stream stream);
    internal void UpdateFcMac();
    internal virtual void Close();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.FootnotesRW : SubDocumentRW {
    internal int InitialDescriptorNumber { get; internal set; }
    internal FootnotesRW(Stream stream, Fib fib);
    internal int get_InitialDescriptorNumber();
    internal void set_InitialDescriptorNumber(int value);
    internal void AddReferense(int pos, bool autoNumbered);
    internal int GetDescriptor(int index);
    protected virtual void WriteTxtPositions();
    protected virtual void WriteDescriptors();
    protected virtual void ReadTxtPositions();
    protected virtual void ReadDescriptors();
    protected virtual void ReadDescriptor(BinaryReader reader, int pos, int posNext);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.FootnoteStatePositions : StatePositionsBase {
    internal FootnoteStatePositions(WordFKPData fkp);
    internal virtual int MoveToItem(int itemIndex);
    internal virtual bool UpdateItemEndPos(long iEndPos);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.GrammarSpelling : object {
    private Byte[] m_plcfsplData;
    private Byte[] m_plcfgramData;
    private List`1<int> m_gramPositions;
    private List`1<int> m_spellPositions;
    internal Byte[] PlcfsplData { get; internal set; }
    internal Byte[] PlcfgramData { get; internal set; }
    internal GrammarSpelling(Fib fib, Stream stream, CharPosTableRecord hfCharPosTable);
    internal Byte[] get_PlcfsplData();
    internal void set_PlcfsplData(Byte[] value);
    internal Byte[] get_PlcfgramData();
    internal void set_PlcfgramData(Byte[] value);
    internal void Write(Fib fib, Stream stream);
    internal void GetPositions(Fib fib, Stream stream);
    private void MakeCorrection(CharPosTableRecord hfCharPosTable, Fib fib, Stream stream);
    private bool MakeHeaderCorrection(CharPosTableRecord hfCharPosTable, Fib fib);
    private bool ShiftHFPos(bool isGrammar, int startHeaderCP, int startShiftCP, int shiftValue);
    private void SetHFSeparatorsPos(int value, int startIndex, int endIndex, bool isGrammar);
    private int GetPosIndex(bool isGrammarArray, int charPos);
    private void ShiftPositions(int startIndex, int shiftValue, bool isGrammarArray);
    private void UpdateGramSpellData(Stream stream, Fib fib);
    internal void Close();
}
public enum Syncfusion.DocIO.ReaderWriter.HeaderType : Enum {
    public int value__;
    public static HeaderType InvalidValue;
    public static HeaderType EvenHeader;
    public static HeaderType OddHeader;
    public static HeaderType EvenFooter;
    public static HeaderType OddFooter;
    public static HeaderType FirstPageHeader;
    public static HeaderType FirstPageFooter;
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.HFStatePositions : StatePositionsBase {
    private int m_iSectionIndex;
    private bool m_isNextItemText;
    internal int SectionIndex { get; internal set; }
    internal HFStatePositions(WordFKPData fkp);
    internal int get_SectionIndex();
    internal void set_SectionIndex(int value);
    internal virtual int MoveToItem(int itemIndex);
    internal void MoveToNextHeaderPos();
    internal bool UpdateHeaderEndPos(long iEndPos, HeaderType headerType);
    internal virtual bool IsEndOfSubdocItemText(long iPos);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.HFTextBoxStatePositions : TextBoxStatePositions {
    internal HFTextBoxStatePositions(WordFKPData fkp);
    internal virtual int MoveToItem(int itemIndex);
}
internal interface Syncfusion.DocIO.ReaderWriter.IWordImageReader {
    public Image Image { get; }
    public int WidthScale { get; }
    public int HeightScale { get; }
    public short Width { get; }
    public short Height { get; }
    public abstract virtual Image get_Image();
    public abstract virtual int get_WidthScale();
    public abstract virtual int get_HeightScale();
    public abstract virtual short get_Width();
    public abstract virtual short get_Height();
}
[CLSCompliantAttribute("False")]
internal interface Syncfusion.DocIO.ReaderWriter.IWordReader {
    public bool IsFootnote { get; }
    public bool IsEndnote { get; }
    public int SectionNumber { get; }
    public SectionProperties SectionProperties { get; }
    public DOPDescriptor DOP { get; }
    public abstract virtual bool get_IsFootnote();
    public abstract virtual bool get_IsEndnote();
    [CompilerGeneratedAttribute]
public abstract virtual void add_NeedPassword(NeedPasswordEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NeedPassword(NeedPasswordEventHandler value);
    public abstract virtual int get_SectionNumber();
    public abstract virtual SectionProperties get_SectionProperties();
    public abstract virtual DOPDescriptor get_DOP();
    public abstract virtual IWordSubdocumentReader GetSubdocumentReader(WordSubdocument subDocumentType);
    public abstract virtual void ReadDocumentHeader(WordDocument doc);
    public abstract virtual void ReadDocumentEnd();
    public abstract virtual BookmarkInfo[] GetBookmarks();
}
[CLSCompliantAttribute("False")]
internal interface Syncfusion.DocIO.ReaderWriter.IWordReaderBase {
    public bool HasTableBody { get; }
    public WordStyleSheet StyleSheet { get; }
    public int CurrentStyleIndex { get; }
    public WordChunkType ChunkType { get; }
    public string TextChunk { get; public set; }
    public CharacterPropertyException CHPX { get; }
    public ParagraphPropertyException PAPX { get; }
    public int CurrentTextPosition { get; public set; }
    public BookmarkInfo[] Bookmarks { get; }
    public Dictionary`2<int, string> SttbfRMarkAuthorNames { get; }
    public Stack`1<Dictionary`2<WTableRow, short>> TableRowWidthStack { get; }
    public List`1<short> MaximumTableRowWidth { get; }
    public abstract virtual bool get_HasTableBody();
    public abstract virtual WordStyleSheet get_StyleSheet();
    public abstract virtual int get_CurrentStyleIndex();
    public abstract virtual WordChunkType get_ChunkType();
    public abstract virtual string get_TextChunk();
    public abstract virtual void set_TextChunk(string value);
    public abstract virtual CharacterPropertyException get_CHPX();
    public abstract virtual ParagraphPropertyException get_PAPX();
    public abstract virtual int get_CurrentTextPosition();
    public abstract virtual void set_CurrentTextPosition(int value);
    public abstract virtual BookmarkInfo[] get_Bookmarks();
    public abstract virtual Dictionary`2<int, string> get_SttbfRMarkAuthorNames();
    public abstract virtual Stack`1<Dictionary`2<WTableRow, short>> get_TableRowWidthStack();
    public abstract virtual List`1<short> get_MaximumTableRowWidth();
    public abstract virtual WordChunkType ReadChunk();
    public abstract virtual IWordImageReader GetImageReader(WordDocument doc);
    public abstract virtual ShapeBase GetDrawingObject();
    public abstract virtual FormField GetFormField(FieldType fieldType);
    public abstract virtual bool ReadWatermark(WordDocument doc, WTextBody m_textBody);
}
[CLSCompliantAttribute("False")]
internal interface Syncfusion.DocIO.ReaderWriter.IWordSubdocumentReader {
    public WordSubdocument Type { get; }
    public HeaderType HeaderType { get; }
    public int ItemNumber { get; }
    public abstract virtual WordSubdocument get_Type();
    public abstract virtual HeaderType get_HeaderType();
    public abstract virtual int get_ItemNumber();
    public abstract virtual void Reset();
    public abstract virtual void MoveToItem(int itemIndex);
}
[CLSCompliantAttribute("False")]
internal interface Syncfusion.DocIO.ReaderWriter.IWordSubdocumentWriter {
    public WordSubdocument Type { get; }
    public abstract virtual WordSubdocument get_Type();
    public abstract virtual void WriteDocumentEnd();
    public abstract virtual void WriteItemStart();
    public abstract virtual void WriteItemEnd();
}
[CLSCompliantAttribute("False")]
internal interface Syncfusion.DocIO.ReaderWriter.IWordWriter {
    public DOPDescriptor DOP { get; }
    public SectionProperties SectionProperties { get; }
    public abstract virtual DOPDescriptor get_DOP();
    public abstract virtual SectionProperties get_SectionProperties();
    public abstract virtual void WriteDocumentHeader();
    public abstract virtual void WriteDocumentEnd(string password, string author, ushort fibVersion, Dictionary`2<string, Storage> oleObjectCollection);
    public abstract virtual IWordSubdocumentWriter GetSubdocumentWriter(WordSubdocument subDocumentType);
    public abstract virtual void InsertPageBreak();
}
[CLSCompliantAttribute("False")]
internal interface Syncfusion.DocIO.ReaderWriter.IWordWriterBase {
    public WordStyleSheet StyleSheet { get; }
    public int CurrentStyleIndex { get; public set; }
    public CharacterPropertyException CHPX { get; public set; }
    public CharacterPropertyException BreakCHPX { get; public set; }
    public bool BreakCHPXStickProperties { get; public set; }
    public bool CHPXStickProperties { get; public set; }
    public ParagraphPropertyException PAPX { get; public set; }
    public bool PAPXStickProperties { get; public set; }
    public ListProperties ListProperties { get; }
    public abstract virtual WordStyleSheet get_StyleSheet();
    public abstract virtual int get_CurrentStyleIndex();
    public abstract virtual void set_CurrentStyleIndex(int value);
    public abstract virtual CharacterPropertyException get_CHPX();
    public abstract virtual void set_CHPX(CharacterPropertyException value);
    public abstract virtual CharacterPropertyException get_BreakCHPX();
    public abstract virtual void set_BreakCHPX(CharacterPropertyException value);
    public abstract virtual bool get_BreakCHPXStickProperties();
    public abstract virtual void set_BreakCHPXStickProperties(bool value);
    public abstract virtual bool get_CHPXStickProperties();
    public abstract virtual void set_CHPXStickProperties(bool value);
    public abstract virtual ParagraphPropertyException get_PAPX();
    public abstract virtual void set_PAPX(ParagraphPropertyException value);
    public abstract virtual bool get_PAPXStickProperties();
    public abstract virtual void set_PAPXStickProperties(bool value);
    public abstract virtual ListProperties get_ListProperties();
    public abstract virtual void WriteChunk(string textChunk);
    public abstract virtual void WriteMarker(WordChunkType chunkType);
    public abstract virtual void WriteCellMark(int nestingLevel);
    public abstract virtual void WriteRowMark(int nestingLevel, int cellCount);
    public abstract virtual void InsertStartField(string fieldcode, bool hasSeparator);
    public abstract virtual void InsertStartField(string fieldcode, WField field, bool hasSeparator);
    public abstract virtual void InsertEndField();
    public abstract virtual void InsertFieldSeparator();
    public abstract virtual void InsertImage(WPicture pict);
    public abstract virtual void InsertImage(WPicture pict, int height, int width);
    public abstract virtual void InsertShape(WPicture pict, PictureShapeProps pictProps);
    public abstract virtual int InsertTextBox(bool visible, WTextBoxFormat txbxFormat);
    public abstract virtual void InsertFormField(string fieldcode, FormField formField, WFormField wFormField);
    public abstract virtual void InsertBookmarkStart(string name, BookmarkStart start);
    public abstract virtual void InsertBookmarkEnd(string name);
    public abstract virtual void InsertWatermark(Watermark watermark, UnitsConvertor initsConvertor, float maxWidth);
    public abstract virtual void WriteSafeChunk(string textChunk);
    public abstract virtual void InsertFieldIndexEntry(string fieldCode);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.MainStatePositions : StatePositionsBase {
    private int m_iEndSecPos;
    private int m_iCurrentSepxIndex;
    internal int SectionIndex { get; }
    internal SectionPropertyException CurrentSepx { get; }
    internal MainStatePositions(WordFKPData fkp);
    internal int get_SectionIndex();
    internal SectionPropertyException get_CurrentSepx();
    internal bool NextSepx(Int32& iEndPos);
    internal bool UpdateSepxEndPos(long iEndPos);
    internal virtual void InitStartEndPos();
    internal virtual long GetMinEndPos(long curPos);
}
public class Syncfusion.DocIO.ReaderWriter.NeedPasswordEventHandler : MulticastDelegate {
    public NeedPasswordEventHandler(object object, IntPtr method);
    public virtual string Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.Aes : object {
    private int Nb;
    private int Nk;
    private int Nr;
    private Byte[] key;
    private Byte[0...,0...] Sbox;
    private Byte[0...,0...] iSbox;
    private Byte[0...,0...] w;
    private Byte[0...,0...] Rcon;
    private Byte[0...,0...] State;
    private KeySize mKeySize;
    internal Aes(KeySize keySize, Byte[] keyBytes);
    private void Initialize();
    internal void Cipher(Byte[] input, Byte[] output);
    internal void InvCipher(Byte[] input, Byte[] output);
    private void SetNbNkNr(KeySize keySize);
    private void BuildSbox();
    private void BuildInvSbox();
    private void BuildRcon();
    private void AddRoundKey(int round);
    private void SubBytes();
    private void InvSubBytes();
    private void ShiftRows();
    private void InvShiftRows();
    private void MixColumns();
    private void InvMixColumns();
    private static byte gfmultby01(byte b);
    private static byte gfmultby02(byte b);
    private static byte gfmultby03(byte b);
    private static byte gfmultby09(byte b);
    private static byte gfmultby0b(byte b);
    private static byte gfmultby0d(byte b);
    private static byte gfmultby0e(byte b);
    private void KeyExpansion();
    private Byte[] SubWord(Byte[] word);
    private Byte[] RotWord(Byte[] word);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.AgileDecryptor : object {
    private static int SegmentSize;
    private DataSpaceMap m_dataSpaceMap;
    private AgileEncryptionInfo m_info;
    private ICompoundStorage m_storage;
    private Byte[] m_intermediateKey;
    private SecurityHelper m_securityHelper;
    private HashAlgorithm m_hashAlgorithm;
    private HMAC m_hmacSha;
    internal Stream Decrypt();
    internal void Initialize(ICompoundStorage storage);
    internal bool CheckPassword(string password);
    private bool CheckEncryptedPackage(Byte[] encryptedPackage);
    private Byte[] Decrypt(Byte[] data, int blockSize, Byte[] arrKey, Byte[] IV, int actualLength);
    private void ParseTransform(ICompoundStorage dataSpaces);
    private void ParseDataSpaceMap(ICompoundStorage dataSpaces);
    private void ParseTransformInfo(ICompoundStorage transformStorage);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.AgileEncryptionInfo : object {
    private int m_iVersionInfo;
    private int m_iReserved;
    private XmlEncryptionDescriptor m_xmlEncryptionDescriptor;
    private SecurityHelper m_securityHelper;
    internal int VersionInfo { get; internal set; }
    internal int Reserved { get; internal set; }
    internal XmlEncryptionDescriptor XmlEncryptionDescriptor { get; }
    internal AgileEncryptionInfo(Stream stream);
    internal int get_VersionInfo();
    internal void set_VersionInfo(int value);
    internal int get_Reserved();
    internal void set_Reserved(int value);
    internal XmlEncryptionDescriptor get_XmlEncryptionDescriptor();
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.AgileEncryptor : object {
    private static int DefaultVersion;
    private static int Reserved;
    private static int SegmentSize;
    private SecurityHelper m_securityHelper;
    private HashAlgorithm m_hashAlgorithm;
    private HMAC m_hmacSha;
    private string m_hashAlgorithmName;
    private int m_keyBits;
    private int m_hashSize;
    internal AgileEncryptor(string hashAlgorithm, int keyBits, int hashSize);
    internal void Encrypt(Stream data, string password, ICompoundStorage root);
    private void PrepareEncryptionInfo(Stream data, ICompoundStorage root, string password);
    private Byte[] PrepareEncryptedPackage(Stream data, ICompoundStorage root, KeyData keyData, Byte[] intermediateKey);
    private void InitializeKeyData(KeyData keyData);
    private void InitializeEncryptedKey(EncryptedKey key);
    private void PrepareDataSpaces(ICompoundStorage root);
    private void SerializeVersion(ICompoundStorage dataSpaces);
    private void SerializeTransformInfo(ICompoundStorage dataSpaces);
    private void SerializeDataSpaceInfo(ICompoundStorage dataSpaces);
    private void SerializeDataSpaceMap(ICompoundStorage dataSpaces);
    private Byte[] CreateSalt(int length);
    private Byte[] Encrypt(Byte[] data, int blockSize, Byte[] key, Byte[] IV);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.DataIntegrity : object {
    private Byte[] m_encryptedHmacKey;
    private Byte[] m_encryptedHmacValue;
    internal Byte[] EncryptedHmacKey { get; internal set; }
    internal Byte[] EncryptedHmacValue { get; internal set; }
    internal Byte[] get_EncryptedHmacKey();
    internal void set_EncryptedHmacKey(Byte[] value);
    internal Byte[] get_EncryptedHmacValue();
    internal void set_EncryptedHmacValue(Byte[] value);
    internal void Parse(XmlReader reader);
    internal void Serialize(XmlWriter writer);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.DataSpaceDefinition : object {
    private static int DefaultHeaderLength;
    private int m_iHeaderLength;
    private List`1<string> m_lstTransformRefs;
    private SecurityHelper m_securityHelper;
    internal List`1<string> TransformRefs { get; }
    internal DataSpaceDefinition(Stream stream);
    internal List`1<string> get_TransformRefs();
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.DataSpaceMap : object {
    private static int DefaultHeaderSize;
    private int m_iHeaderSize;
    private List`1<DataSpaceMapEntry> m_lstMapEntries;
    private SecurityHelper m_securityHelper;
    internal List`1<DataSpaceMapEntry> MapEntries { get; }
    internal DataSpaceMap(Stream stream);
    internal List`1<DataSpaceMapEntry> get_MapEntries();
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.DataSpaceMapEntry : object {
    private List`1<DataSpaceReferenceComponent> m_lstComponents;
    private string m_strDataSpaceName;
    private SecurityHelper m_securityHelper;
    internal List`1<DataSpaceReferenceComponent> Components { get; }
    internal string DataSpaceName { get; internal set; }
    internal DataSpaceMapEntry(Stream stream);
    internal List`1<DataSpaceReferenceComponent> get_Components();
    internal string get_DataSpaceName();
    internal void set_DataSpaceName(string value);
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.DataSpaceReferenceComponent : object {
    private int m_iComponentType;
    private string m_strName;
    private SecurityHelper m_securityHelper;
    internal int ComponentType { get; }
    internal string Name { get; }
    internal DataSpaceReferenceComponent(int type, string name);
    internal DataSpaceReferenceComponent(Stream stream);
    internal int get_ComponentType();
    internal string get_Name();
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.DocxProtection : object {
    internal static int SpinCount;
    internal static string CryptographicType;
    internal static string CryptographicAlgorithmClass;
    internal static string CryptographicAlgorithmType;
    internal static int CryptographicAlgorithmId;
    internal Byte[] ComputeHash(Byte[] salt, UInt32 encryptedPassword);
    private Byte[] CombineByteArrays(Byte[] array1, Byte[] array2);
    internal Byte[] CreateSalt(int length);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.EncryptedKey : object {
    private int m_iSpinCount;
    private int m_iSaltSize;
    private int m_iBlockSize;
    private int m_iKeyBits;
    private int m_iHashSize;
    private string m_sCipherAlgorithm;
    private string m_sCipherChaining;
    private string m_sHashAlgorithm;
    private Byte[] m_arrSalt;
    private Byte[] m_encryptedVerifierHashInput;
    private Byte[] m_encryptedVerifierHashValue;
    private Byte[] m_encryptedKeyValue;
    internal int SpinCount { get; internal set; }
    internal int SaltSize { get; internal set; }
    internal int BlockSize { get; internal set; }
    internal int KeyBits { get; internal set; }
    internal int HashSize { get; internal set; }
    internal string CipherAlgorithm { get; internal set; }
    internal string CipherChaining { get; internal set; }
    internal string HashAlgorithm { get; internal set; }
    internal Byte[] Salt { get; internal set; }
    internal Byte[] EncryptedVerifierHashInput { get; internal set; }
    internal Byte[] EncryptedVerifierHashValue { get; internal set; }
    internal Byte[] EncryptedKeyValue { get; internal set; }
    internal int get_SpinCount();
    internal void set_SpinCount(int value);
    internal int get_SaltSize();
    internal void set_SaltSize(int value);
    internal int get_BlockSize();
    internal void set_BlockSize(int value);
    internal int get_KeyBits();
    internal void set_KeyBits(int value);
    internal int get_HashSize();
    internal void set_HashSize(int value);
    internal string get_CipherAlgorithm();
    internal void set_CipherAlgorithm(string value);
    internal string get_CipherChaining();
    internal void set_CipherChaining(string value);
    internal string get_HashAlgorithm();
    internal void set_HashAlgorithm(string value);
    internal Byte[] get_Salt();
    internal void set_Salt(Byte[] value);
    internal Byte[] get_EncryptedVerifierHashInput();
    internal void set_EncryptedVerifierHashInput(Byte[] value);
    internal Byte[] get_EncryptedVerifierHashValue();
    internal void set_EncryptedVerifierHashValue(Byte[] value);
    internal Byte[] get_EncryptedKeyValue();
    internal void set_EncryptedKeyValue(Byte[] value);
    internal void Parse(XmlReader reader);
    internal void Serialize(XmlWriter writer);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.EncryptionHeader : object {
    private int m_iFlags;
    private int m_iSizeExtra;
    private int m_iAlgorithmId;
    private int m_iAlgorithmIdHash;
    private int m_iKeySize;
    private int m_iProviderType;
    private int m_iReserved1;
    private int m_iReserved2;
    private string m_strCSPName;
    private SecurityHelper m_securityHelper;
    internal int Flags { get; internal set; }
    internal int SizeExtra { get; internal set; }
    internal int AlgorithmId { get; internal set; }
    internal int AlgorithmIdHash { get; internal set; }
    internal int KeySize { get; internal set; }
    internal int ProviderType { get; internal set; }
    internal int Reserved1 { get; internal set; }
    internal int Reserved2 { get; internal set; }
    internal string CSPName { get; internal set; }
    internal EncryptionHeader(Stream stream);
    internal int get_Flags();
    internal void set_Flags(int value);
    internal int get_SizeExtra();
    internal void set_SizeExtra(int value);
    internal int get_AlgorithmId();
    internal void set_AlgorithmId(int value);
    internal int get_AlgorithmIdHash();
    internal void set_AlgorithmIdHash(int value);
    internal int get_KeySize();
    internal void set_KeySize(int value);
    internal int get_ProviderType();
    internal void set_ProviderType(int value);
    internal int get_Reserved1();
    internal void set_Reserved1(int value);
    internal int get_Reserved2();
    internal void set_Reserved2(int value);
    internal string get_CSPName();
    internal void set_CSPName(string value);
    internal void Parse(Stream stream);
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.EncryptionTransformInfo : object {
    private string m_strName;
    private int m_iBlockSize;
    private int m_iCipherMode;
    private int m_iReserved;
    private SecurityHelper m_securityHelper;
    internal string Name { get; internal set; }
    internal int BlockSize { get; internal set; }
    internal int CipherMode { get; }
    internal int Reserved { get; }
    internal EncryptionTransformInfo(Stream stream);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_BlockSize();
    internal void set_BlockSize(int value);
    internal int get_CipherMode();
    internal int get_Reserved();
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.EncryptionVerifier : object {
    private Byte[] m_arrSalt;
    private Byte[] m_arrEncryptedVerifier;
    private Byte[] m_arrEncryptedVerifierHash;
    private int m_iVerifierHashSize;
    private SecurityHelper m_securityHelper;
    internal Byte[] Salt { get; internal set; }
    internal Byte[] EncryptedVerifier { get; internal set; }
    internal Byte[] EncryptedVerifierHash { get; internal set; }
    internal int VerifierHashSize { get; internal set; }
    internal EncryptionVerifier(Stream stream);
    internal Byte[] get_Salt();
    internal void set_Salt(Byte[] value);
    internal Byte[] get_EncryptedVerifier();
    internal void set_EncryptedVerifier(Byte[] value);
    internal Byte[] get_EncryptedVerifierHash();
    internal void set_EncryptedVerifierHash(Byte[] value);
    internal int get_VerifierHashSize();
    internal void set_VerifierHashSize(int value);
    internal void Parse(Stream stream);
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.KeyData : object {
    private int m_iSaltSize;
    private int m_iBlockSize;
    private int m_iKeyBits;
    private int m_iHashSize;
    private string m_sCipherAlgorithm;
    private string m_sCipherChaining;
    private string m_sHashAlgorithm;
    private Byte[] m_arrSalt;
    internal int SaltSize { get; internal set; }
    internal int BlockSize { get; internal set; }
    internal int KeyBits { get; internal set; }
    internal int HashSize { get; internal set; }
    internal string CipherAlgorithm { get; internal set; }
    internal string CipherChaining { get; internal set; }
    internal string HashAlgorithm { get; internal set; }
    internal Byte[] Salt { get; internal set; }
    internal int get_SaltSize();
    internal void set_SaltSize(int value);
    internal int get_BlockSize();
    internal void set_BlockSize(int value);
    internal int get_KeyBits();
    internal void set_KeyBits(int value);
    internal int get_HashSize();
    internal void set_HashSize(int value);
    internal string get_CipherAlgorithm();
    internal void set_CipherAlgorithm(string value);
    internal string get_CipherChaining();
    internal void set_CipherChaining(string value);
    internal string get_HashAlgorithm();
    internal void set_HashAlgorithm(string value);
    internal Byte[] get_Salt();
    internal void set_Salt(Byte[] value);
    internal void Parse(XmlReader reader);
    internal static int GetAttributeValueAsInt(XmlReader reader, string attributeName);
    internal static Byte[] GetAttributeValueAsByte(XmlReader reader, string attributeName);
    internal void Serialize(XmlWriter writer);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.KeyEncryptors : object {
    private EncryptedKey m_encryptedKey;
    internal EncryptedKey EncryptedKey { get; }
    internal EncryptedKey get_EncryptedKey();
    internal void Parse(XmlReader reader);
    internal void Serialize(XmlWriter writer);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.MD5Context : object {
    private static Byte[] PADDING;
    private UInt32[] m_uiI;
    private UInt32[] m_buf;
    private Byte[] m_in;
    private Byte[] m_digest;
    internal UInt32[] I { get; }
    internal UInt32[] Buffer { get; }
    internal Byte[] InBuffer { get; }
    internal Byte[] Digest { get; }
    private static MD5Context();
    internal UInt32[] get_I();
    internal UInt32[] get_Buffer();
    internal Byte[] get_InBuffer();
    internal Byte[] get_Digest();
    internal void Update(Byte[] inBuf, UInt32 inLen);
    internal void FinalValue();
    internal void StoreDigest();
    private UInt32 F(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 G(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 H(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 III(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 ROTATE_LEFT(UInt32 x, byte n);
    private void FF(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s, UInt32 ac);
    private void GG(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s, UInt32 ac);
    private void HH(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s, UInt32 ac);
    private void II(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s, UInt32 ac);
    private void Transform(UInt32[] inn);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.SecurityHelper : object {
    private static int PasswordIterationCount;
    internal static string EncryptionInfoStream;
    internal static string DataSpacesStorage;
    internal static string DataSpaceMapStream;
    internal static string TransformPrimaryStream;
    internal static string DataSpaceInfoStorage;
    internal static string TransformInfoStorage;
    internal static string EncryptedPackageStream;
    internal static string StrongEncryptionDataSpaceStream;
    internal static string StrongEncryptionTransformStream;
    internal static string VersionStream;
    internal EncrytionType GetEncryptionType(ICompoundStorage storage);
    internal int ReadInt32(Stream stream, Byte[] buffer);
    internal string ReadUnicodeString(Stream stream);
    internal string ReadUnicodeStringZero(Stream stream);
    internal void WriteInt32(Stream stream, int value);
    internal void WriteUnicodeString(Stream stream, string value);
    internal void WriteUnicodeStringZero(Stream stream, string value);
    internal Byte[] CreateKey(string password, Byte[] salt, int keyLength);
    internal Byte[] CreateAgileEncryptionKey(HashAlgorithm hashAlgorithm, string password, Byte[] salt, Byte[] blockKey, int keyLength, int iterationCount);
    internal Byte[] EncryptDecrypt(Byte[] data, EncryptionMethod method, int blockSize);
    internal Byte[] CombineArray(Byte[] buffer1, Byte[] buffer2);
    internal Byte[] CorrectSize(Byte[] data, int size, byte padding);
    internal Byte[] ConcatenateIV(Byte[] data, Byte[] IV);
    internal bool CompareArray(Byte[] buffer1, Byte[] buffer2);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.StandardDecryptor : object {
    private int BlockSize;
    private DataSpaceMap m_dataSpaceMap;
    private StandardEncryptionInfo m_info;
    private ICompoundStorage m_storage;
    private Byte[] m_arrKey;
    private SecurityHelper m_securityHelper;
    internal Stream Decrypt();
    internal void Initialize(ICompoundStorage storage);
    internal bool CheckPassword(string password);
    private Byte[] Decrypt(Byte[] data, Byte[] key);
    private void ParseTransfrom(ICompoundStorage dataSpaces);
    private void ParseDataSpaceMap(ICompoundStorage dataSpaces);
    private void ParseTransformInfo(ICompoundStorage transformStorage);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.StandardEncryptionInfo : object {
    private int m_iVersionInfo;
    private int m_iFlags;
    private EncryptionHeader m_header;
    private EncryptionVerifier m_verifier;
    private SecurityHelper m_securityHelper;
    internal int VersionInfo { get; internal set; }
    internal int Flags { get; internal set; }
    internal EncryptionHeader Header { get; }
    internal EncryptionVerifier Verifier { get; }
    internal StandardEncryptionInfo(Stream stream);
    internal int get_VersionInfo();
    internal void set_VersionInfo(int value);
    internal int get_Flags();
    internal void set_Flags(int value);
    internal EncryptionHeader get_Header();
    internal EncryptionVerifier get_Verifier();
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.StandardEncryptor : object {
    private static int KeyLength;
    private static int DefaultVersion;
    private static int DefaultFlags;
    private static int AES128AlgorithmId;
    private static int SHA1AlgorithmHash;
    private static int DefaultProviderType;
    private static string DefaultCSPName;
    private SecurityHelper m_securityHelper;
    internal void Encrypt(Stream data, string password, ICompoundStorage root);
    private void PrepareDataSpaces(ICompoundStorage root);
    private void SerializeVersion(ICompoundStorage dataSpaces);
    private void SerializeTransformInfo(ICompoundStorage dataSpaces);
    private void SerializeDataSpaceInfo(ICompoundStorage dataSpaces);
    private void SerializeDataSpaceMap(ICompoundStorage dataSpaces);
    private Byte[] PrepareEncryptionInfo(ICompoundStorage root, string password);
    private Byte[] CreateSalt(int length);
    private Byte[] Encrypt(Byte[] data, Byte[] key);
    private void Encrypt(Stream stream, Byte[] key, Stream output);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.TransformInfoHeader : object {
    private int m_iTransformType;
    private string m_strTransformId;
    private string m_strTransformName;
    private int m_iReaderVersion;
    private int m_iUpdaterVersion;
    private int m_iWriterVersion;
    private SecurityHelper m_securityHelper;
    internal int TransformType { get; internal set; }
    internal string TransformId { get; internal set; }
    internal string TransformName { get; internal set; }
    internal int ReaderVersion { get; internal set; }
    internal int UpdaterVersion { get; internal set; }
    internal int WriterVersion { get; internal set; }
    internal TransformInfoHeader(Stream stream);
    internal int get_TransformType();
    internal void set_TransformType(int value);
    internal string get_TransformId();
    internal void set_TransformId(string value);
    internal string get_TransformName();
    internal void set_TransformName(string value);
    internal int get_ReaderVersion();
    internal void set_ReaderVersion(int value);
    internal int get_UpdaterVersion();
    internal void set_UpdaterVersion(int value);
    internal int get_WriterVersion();
    internal void set_WriterVersion(int value);
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.VersionInfo : object {
    private string m_strFeatureId;
    private int m_iReaderVersion;
    private int m_iUpdaterVersion;
    private int m_iWriterVersion;
    private SecurityHelper m_securityHelper;
    internal string FeatureId { get; internal set; }
    internal int ReaderVersion { get; internal set; }
    internal int UpdaterVersion { get; internal set; }
    internal int WriterVersion { get; internal set; }
    internal string get_FeatureId();
    internal void set_FeatureId(string value);
    internal int get_ReaderVersion();
    internal void set_ReaderVersion(int value);
    internal int get_UpdaterVersion();
    internal void set_UpdaterVersion(int value);
    internal int get_WriterVersion();
    internal void set_WriterVersion(int value);
    internal void Serialize(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.WordDecryptor : object {
    private static int DEF_READ_LENGTH;
    private static int DEF_PAS_LEN;
    private static int DEF_BLOCK_SIZE;
    private static int DEF_START_POS;
    private static int DEF_INC_BYTE_MAXVAL;
    private static UInt32 DEF_PASSWORD_CONST;
    private static UInt16[] initCodeArr;
    private static UInt16[0...,0...] encryptMatrix;
    private Byte[] m_baDocumentID;
    private Byte[] m_baPoint;
    private Byte[] m_baHash;
    private Byte[] m_baPassword;
    private MD5Context m_valContext;
    private MemoryStream m_tableStream;
    private MemoryStream m_dataStream;
    private MemoryStream m_mainStream;
    private Fib m_fib;
    private bool m_bIsComplexFile;
    private WordKey m_key;
    internal MemoryStream TableStream { get; }
    internal MemoryStream MainStream { get; }
    internal MemoryStream DataStream { get; }
    internal WordDecryptor(MemoryStream tableStream, MemoryStream mainStream, MemoryStream dataStream, Fib fib);
    private static WordDecryptor();
    internal MemoryStream get_TableStream();
    internal MemoryStream get_MainStream();
    internal MemoryStream get_DataStream();
    public void TestEncrypt(MemoryStream& stream, string password, Byte[]& docID, Byte[]& point, Byte[]& hash);
    public void TestDecrypt(MemoryStream& stream, string password, Byte[]& docid, Byte[]& point, Byte[]& hash);
    internal bool CheckPassword(string password);
    internal void Decrypt();
    internal void Encrypt(string password);
    private MemoryStream DecryptStream(MemoryStream stream);
    private void ConvertPassword(string password);
    private void PrepareKey(Byte[] data);
    private void MakeKey(UInt32 block);
    private bool MemoryCompare(Byte[] block1, Byte[] block2, int length);
    private bool VerifyPassword();
    private void PrepareValContext();
    private void DecryptBuffer(Byte[] data, int length);
    internal static UInt32 GetPasswordHash(string password);
    private static UInt32 RevertBytes(UInt32 changeVal);
    private static ushort GetHighOrderHash(string password);
    private static ushort GetLowOrderHash(string password);
    private static Boolean[] GetCharBits7(char charToConvert);
    private static Boolean[] GetCharBits15(char charToConvert);
    private static ushort GetUInt16FromBits(Boolean[] bits);
    private static Boolean[] RotateBits(Boolean[] bits, int count);
    public static int Round(int value, int degree);
}
internal class Syncfusion.DocIO.ReaderWriter.Security.WordKey : object {
    private Byte[] m_baState;
    private byte m_bX;
    private byte m_bY;
    internal Byte[] status { get; internal set; }
    internal byte x { get; internal set; }
    internal byte y { get; internal set; }
    internal Byte[] get_status();
    internal void set_status(Byte[] value);
    internal byte get_x();
    internal void set_x(byte value);
    internal byte get_y();
    internal void set_y(byte value);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.Security.XmlEncryptionDescriptor : object {
    private static string XMLNameSpace;
    private KeyData m_keyData;
    private DataIntegrity m_dataIntegrity;
    private KeyEncryptors m_keyEncryptors;
    internal KeyData KeyData { get; internal set; }
    internal DataIntegrity DataIntegrity { get; internal set; }
    internal KeyEncryptors KeyEncryptors { get; internal set; }
    internal KeyData get_KeyData();
    internal void set_KeyData(KeyData value);
    internal DataIntegrity get_DataIntegrity();
    internal void set_DataIntegrity(DataIntegrity value);
    internal KeyEncryptors get_KeyEncryptors();
    internal void set_KeyEncryptors(KeyEncryptors value);
    public void Parse(Stream stream);
    public void Serialize(Stream stream);
    private XmlWriter CreateWriter(Stream data);
    public XmlReader CreateReader(Stream data);
}
internal enum Syncfusion.DocIO.ReaderWriter.SprmCompareType : Enum {
    public int value__;
    public static SprmCompareType Boolean;
    public static SprmCompareType ByteArray;
    public static SprmCompareType ByteValue;
    public static SprmCompareType IntValue;
    public static SprmCompareType ShortValue;
    public static SprmCompareType UIntValue;
    public static SprmCompareType UShortValue;
}
[CLSCompliantAttribute("False")]
internal abstract class Syncfusion.DocIO.ReaderWriter.StatePositionsBase : object {
    protected int m_iStartItemPos;
    protected int m_iEndItemPos;
    protected int m_iItemIndex;
    protected long m_iEndCHPxPos;
    internal long m_iEndPAPxPos;
    internal long m_iEndPieceTablePos;
    internal long m_iStartPieceTablePos;
    protected int m_iStartText;
    protected int m_iEndText;
    protected WordFKPData m_fkp;
    protected BookmarkInfo[] m_bookmarks;
    private int m_curTextPosition;
    private int m_iCurrentPapxFKPIndex;
    private int m_iCurrentChpxFKPIndex;
    private int m_iCurrentPapxIndex;
    private int m_iCurrentChpxIndex;
    internal int StartItemPos { get; }
    internal int EndItemPos { get; }
    internal int ItemIndex { get; internal set; }
    internal int StartText { get; internal set; }
    internal CharacterPropertyException CurrentChpx { get; }
    internal ParagraphPropertyException CurrentPapx { get; }
    internal int CurrentTextPosition { get; internal set; }
    protected WPTablesData Tables { get; }
    protected bool IsCurrentPapxPosition { get; }
    protected bool IsCurrentChpxPosition { get; }
    private CharacterPropertiesPage CurrentChpxPage { get; }
    private ParagraphPropertiesPage CurrentPapxPage { get; }
    internal StatePositionsBase(WordFKPData fkp);
    internal int get_StartItemPos();
    internal int get_EndItemPos();
    internal int get_ItemIndex();
    internal void set_ItemIndex(int value);
    internal int get_StartText();
    internal void set_StartText(int value);
    internal CharacterPropertyException get_CurrentChpx();
    internal ParagraphPropertyException get_CurrentPapx();
    internal int get_CurrentTextPosition();
    internal void set_CurrentTextPosition(int value);
    protected WPTablesData get_Tables();
    protected bool get_IsCurrentPapxPosition();
    protected bool get_IsCurrentChpxPosition();
    private CharacterPropertiesPage get_CurrentChpxPage();
    private ParagraphPropertiesPage get_CurrentPapxPage();
    internal virtual void InitStartEndPos();
    internal bool NextChpx();
    internal bool NextPapx();
    internal virtual long GetMinEndPos(long curPos);
    internal bool UpdateCHPxEndPos(long iEndPos);
    internal bool UpdatePAPxEndPos(long iEndPos);
    internal bool IsFirstPass(long iPos);
    internal bool IsEndOfText(long iPos);
    internal virtual bool UpdateItemEndPos(long iEndPos);
    internal virtual int MoveToItem(int itemIndex);
    internal virtual bool IsEndOfSubdocItemText(long iPos);
    protected void MoveToCurrentChpxPapx();
}
internal class Syncfusion.DocIO.ReaderWriter.StreamsManager : object {
    public static string MacrosStorageName;
    public static string ObjectPoolStorageName;
    private static string c_mainStream;
    private static string c_dataStream;
    private static string c_tableStream;
    private static string c_summaryInfoStream;
    private static string c_documentSummaryInfoStream;
    private Byte[] m_compObjData;
    private string m_fileName;
    private Stream m_outStream;
    private ICompoundFile m_compoundFile;
    private MemoryStream m_mainStream;
    private MemoryStream m_tableStream;
    private MemoryStream m_dataStream;
    private MemoryStream m_macrosStream;
    private MemoryStream m_summaryInfoStream;
    private MemoryStream m_documentSummaryInfoStream;
    private MemoryStream m_objectPoolStream;
    private BinaryWriter m_mainWriter;
    private BinaryWriter m_tableWriter;
    private BinaryWriter m_dataWriter;
    private BinaryWriter m_summaryInfoWriter;
    private BinaryWriter m_documentSummaryInfoWriter;
    private BinaryReader m_mainReader;
    private BinaryReader m_tableReader;
    private BinaryReader m_dataReader;
    private BinaryReader m_summaryInfoReader;
    private BinaryReader m_documentSummaryInfoReader;
    private bool m_bNetStorage;
    internal ICompoundFile CompoundFile { get; }
    internal MemoryStream MainStream { get; }
    internal MemoryStream TableStream { get; }
    internal MemoryStream DataStream { get; }
    internal MemoryStream MacrosStream { get; internal set; }
    internal MemoryStream ObjectPoolStream { get; internal set; }
    internal MemoryStream SummaryInfoStream { get; internal set; }
    internal MemoryStream DocumentSummaryInfoStream { get; internal set; }
    internal BinaryWriter SummaryInfoWriter { get; internal set; }
    internal BinaryWriter DocumentSummaryInfoWriter { get; internal set; }
    internal BinaryReader SummaryInfoReader { get; internal set; }
    internal BinaryReader DocumentSummaryInfoReader { get; internal set; }
    internal BinaryWriter MainWriter { get; }
    internal BinaryWriter TableWriter { get; }
    internal BinaryWriter DataWriter { get; }
    internal BinaryReader MainReader { get; }
    internal BinaryReader TableReader { get; }
    internal BinaryReader DataReader { get; }
    internal StreamsManager(Stream stream, bool createNewStorage);
    internal ICompoundFile get_CompoundFile();
    internal MemoryStream get_MainStream();
    internal MemoryStream get_TableStream();
    internal MemoryStream get_DataStream();
    internal MemoryStream get_MacrosStream();
    internal void set_MacrosStream(MemoryStream value);
    internal MemoryStream get_ObjectPoolStream();
    internal void set_ObjectPoolStream(MemoryStream value);
    internal MemoryStream get_SummaryInfoStream();
    internal void set_SummaryInfoStream(MemoryStream value);
    internal MemoryStream get_DocumentSummaryInfoStream();
    internal void set_DocumentSummaryInfoStream(MemoryStream value);
    internal BinaryWriter get_SummaryInfoWriter();
    internal void set_SummaryInfoWriter(BinaryWriter value);
    internal BinaryWriter get_DocumentSummaryInfoWriter();
    internal void set_DocumentSummaryInfoWriter(BinaryWriter value);
    internal BinaryReader get_SummaryInfoReader();
    internal void set_SummaryInfoReader(BinaryReader value);
    internal BinaryReader get_DocumentSummaryInfoReader();
    internal void set_DocumentSummaryInfoReader(BinaryReader value);
    internal BinaryWriter get_MainWriter();
    internal BinaryWriter get_TableWriter();
    internal BinaryWriter get_DataWriter();
    internal BinaryReader get_MainReader();
    internal BinaryReader get_TableReader();
    internal BinaryReader get_DataReader();
    internal void LoadStg(Stream stream);
    internal void LoadTableStream(string tableStreamName);
    internal void LoadSummaryInfoStream();
    internal void LoadDocumentSummaryInfoStream();
    internal void UpdateStreams(MemoryStream mainStream, MemoryStream tableStream, MemoryStream dataStream);
    internal void WriteSubStorage(MemoryStream stream, string storageName);
    internal void SaveStg(Dictionary`2<string, Storage> oleObjectCollection);
    internal void CloseStg();
    private void SaveStream(string name, MemoryStream stream);
    private void SaveCompObjStream();
    private void InitStreams();
    private void LoadStreams();
    private MemoryStream LoadStreamFromCompound(string name);
    private MemoryStream LoadSubStorage(string name);
    private MemoryStream ReadSubStorage(string stgName);
}
[CLSCompliantAttribute("False")]
internal abstract class Syncfusion.DocIO.ReaderWriter.SubDocumentRW : object {
    protected Fib m_fib;
    protected List`1<int> m_txtPositions;
    protected List`1<int> m_refPositions;
    protected List`1<AnnotationDescriptor> m_descriptorsAnnot;
    protected List`1<short> m_descrFootEndntes;
    protected BinaryReader m_reader;
    protected BinaryWriter m_writer;
    private int m_endRefPosition;
    protected int m_iCount;
    protected int m_iInitialDesctiptorNumber;
    protected int m_autoCount;
    protected int m_endReference;
    internal int m_footEndnoteRefIndex;
    internal int Count { get; }
    internal SubDocumentRW(Stream stream, Fib fib);
    internal int get_Count();
    internal bool HasReference(int reference);
    internal bool HasReference(int startPosition, int endPosition, Int32& textLength);
    internal bool HasPosition(int position);
    internal virtual void Read(Stream stream, Fib fib);
    internal virtual void Write(Stream stream, Fib fib);
    internal virtual void AddTxtPosition(int position);
    internal virtual int GetTxtPosition(int index);
    internal virtual void Close();
    protected virtual void ReadDescriptors();
    protected abstract virtual void WriteDescriptors();
    protected void ReadDescriptors(int length, int size);
    protected void AddRefPosition(int position);
    protected virtual void Init();
    protected abstract virtual void ReadTxtPositions();
    protected void ReadTxtPositions(int count);
    protected void WriteTxtPositionsBase();
    protected abstract virtual void WriteTxtPositions();
    protected virtual void WriteRefPositions(int endPos);
    protected virtual void ReadDescriptor(BinaryReader reader, int pos, int posNext);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.TextBoxStatePositions : StatePositionsBase {
    internal TextBoxStatePositions(WordFKPData fkp);
    internal virtual int MoveToItem(int itemIndex);
    internal virtual bool UpdateItemEndPos(long iEndPos);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordAnnotationReader : WordSubdocumentReader {
    public bool IsStartAnnotation { get; }
    public AnnotationDescriptor Descriptor { get; }
    public string User { get; }
    public int BookmarkStartOffset { get; }
    public int BookmarkEndOffset { get; }
    public int Position { get; }
    public WordAnnotationReader(WordReader mainReader);
    public bool get_IsStartAnnotation();
    public AnnotationDescriptor get_Descriptor();
    public string get_User();
    public int get_BookmarkStartOffset();
    public int get_BookmarkEndOffset();
    public virtual WordChunkType ReadChunk();
    public int get_Position();
    protected virtual void CreateStatePositions();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordAnnotationWriter : WordSubdocumentWriter {
    internal WordAnnotationWriter(WordWriter mainWriter);
    public virtual void WriteDocumentEnd();
    public virtual void WriteItemStart();
    protected virtual void IncreaseCcp(int dataLength);
}
public enum Syncfusion.DocIO.ReaderWriter.WordBreakCode : Enum {
    public int value__;
    public static WordBreakCode NoBreak;
    public static WordBreakCode NewColumn;
    public static WordBreakCode NewPage;
    public static WordBreakCode EvenPage;
    public static WordBreakCode Oddpage;
}
public enum Syncfusion.DocIO.ReaderWriter.WordChunkType : Enum {
    public int value__;
    public static WordChunkType Text;
    public static WordChunkType ParagraphEnd;
    public static WordChunkType SectionEnd;
    public static WordChunkType PageBreak;
    public static WordChunkType ColumnBreak;
    public static WordChunkType DocumentEnd;
    public static WordChunkType Image;
    public static WordChunkType Shape;
    public static WordChunkType Table;
    public static WordChunkType TableRow;
    public static WordChunkType TableCell;
    public static WordChunkType Footnote;
    public static WordChunkType FieldBeginMark;
    public static WordChunkType FieldSeparator;
    public static WordChunkType FieldEndMark;
    public static WordChunkType Tab;
    public static WordChunkType Annotation;
    public static WordChunkType LineBreak;
    public static WordChunkType Symbol;
    public static WordChunkType CurrentPageNumber;
    public static WordChunkType EndOfSubdocText;
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordEndnoteReader : WordFootnoteReader {
    public WordEndnoteReader(WordReader mainReader);
    protected virtual bool CheckPosition();
    protected virtual void Init();
    protected virtual void InitStatePositions();
    protected virtual bool IsEndOfItems();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordEndnoteWriter : WordSubdocumentWriter {
    internal WordEndnoteWriter(WordWriter mainWriter);
    public virtual void WriteItemStart();
    public virtual void WriteDocumentEnd();
    protected virtual void IncreaseCcp(int dataLength);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordFKPData : object {
    private static int DEF_COUNTRUN_SIZE;
    private Fib m_fib;
    private WPTablesData m_tables;
    private List`1<UInt32> m_papxPositions;
    private List`1<ParagraphExceptionInDiskPage> m_papxProps;
    private List`1<UInt32> m_chpxPositions;
    private List`1<CharacterPropertyException> m_chpxProps;
    private List`1<int> m_sepxPositions;
    private List`1<SectionPropertyException> m_sepxProps;
    private FKPStructure[] m_chpxFKPs;
    private FKPStructure[] m_papxFKPs;
    private ParagraphPropertiesPage[] m_papxPages;
    private CharacterPropertiesPage[] m_chpxPages;
    private SectionPropertyException[] m_secProperties;
    private long m_lastSepxPosition;
    internal Fib Fib { get; }
    internal long EndOfSepx { get; }
    internal int SepxAddedCount { get; }
    internal WPTablesData Tables { get; }
    internal WordFKPData(Fib fib, WPTablesData tables);
    internal Fib get_Fib();
    internal long get_EndOfSepx();
    internal int get_SepxAddedCount();
    internal WPTablesData get_Tables();
    internal SectionPropertyException GetSepx(int index);
    internal void AddChpxProperties(UInt32 pos, CharacterPropertyException chpx);
    internal void AddPapxProperties(UInt32 pos, ParagraphExceptionInDiskPage papx, MemoryStream dataStream);
    internal void AddSepxProperties(int pos, SectionPropertyException sepx);
    internal void Read(MemoryStream stream);
    internal void Write(Stream stream);
    internal ParagraphPropertiesPage GetPapxPage(int i);
    internal CharacterPropertiesPage GetChpxPage(int i);
    internal void CloneAndAddLastPapx(UInt32 pos);
    internal void CloneAndAddLastChpx(UInt32 pos);
    internal void Close();
    internal FKPStructure[] ReadFKPs(MemoryStream stream, BinaryTable table);
    private void WritePapx(Stream stream);
    private int FillPapxPage(ParagraphPropertiesPage page, UInt32 pagePos, int papxIndex);
    private int GetPapxCountPerPage(int papxIndex);
    private void WriteChpx(Stream stream);
    private int FillChpxPage(CharacterPropertiesPage page, UInt32 pagePos, int chpxIndex);
    private int GetChpxCountPerPage(int chpxIndex);
    internal bool IsChpxRepeats(int chpxIndex, int CurrentIndex);
    private void WriteSepx(Stream stream);
    private int AlignByDiskPage(Stream stream);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordFootnoteReader : WordSubdocumentReader {
    protected int m_prevStreamPos;
    public bool IsNextItem { get; }
    public WordFootnoteReader(WordReader mainReader);
    public bool get_IsNextItem();
    protected virtual void CreateStatePositions();
    protected virtual bool CheckPosition();
    protected virtual void Init();
    protected virtual void InitStatePositions();
    protected virtual bool IsEndOfItems();
    public virtual WordChunkType ReadChunk();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordFootnoteWriter : WordSubdocumentWriter {
    internal WordFootnoteWriter(WordWriter mainWriter);
    public virtual void WriteDocumentEnd();
    public virtual void WriteItemStart();
    protected virtual void IncreaseCcp(int dataLength);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordHeaderFooterReader : WordSubdocumentReader {
    public HFStatePositions StatePositions { get; }
    public WordHeaderFooterReader(WordReader mainReader);
    public HFStatePositions get_StatePositions();
    public virtual void Reset();
    public void MoveToSection(int iSectionNumber);
    public void MoveToHeader(HeaderType hType);
    public virtual void MoveToItem(int itemIndex);
    public virtual FileShapeAddress GetFSPA();
    protected virtual void UpdateStreamPosition();
    protected virtual void CreateStatePositions();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordHeaderFooterWriter : WordSubdocumentWriter {
    private static int DEF_HEADER_INDEX;
    protected HeaderType m_headerType;
    private int m_iItemIndex;
    private int m_iSectionIndex;
    internal HeaderType HeaderType { get; internal set; }
    internal WordHeaderFooterWriter(WordWriter mainWriter);
    internal HeaderType get_HeaderType();
    internal void set_HeaderType(HeaderType value);
    public virtual void WriteDocumentEnd();
    internal void WriteSectionEnd();
    internal void ClosePrevSeparator();
    protected void ClosePrevHeaderTypes(HeaderType headerType);
    protected virtual void IncreaseCcp(int dataLength);
    protected virtual void InitClass();
    private void WriteHeaderFooterHead();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordHFTextBoxReader : WordSubdocumentReader {
    public WordHFTextBoxReader(WordReader mainReader);
    protected virtual void CreateStatePositions();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordHFTextBoxWriter : WordTextBoxWriter {
    internal WordHFTextBoxWriter(WordWriter mainWriter);
    internal void WriteHFTextBoxEnd(int spid);
    protected virtual void IncreaseCcp(int dataLength);
    protected virtual void AddNewTxbx(bool isLast, int spid);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordReader : WordReaderBase {
    private static int DEF_PID_CODEPAGE;
    protected bool m_bDisposed;
    protected bool m_bDestroyStream;
    private SectionProperties m_secProperties;
    private bool m_bHeaderRead;
    private IWordSubdocumentReader m_lastReader;
    private BuiltinDocumentProperties m_builtinProp;
    private CustomDocumentProperties m_custProp;
    private Encoding m_strEncoding;
    private int m_customFnSplittedTextLength;
    private Dictionary`2<int, string> m_sttbFRAuthorNames;
    [CompilerGeneratedAttribute]
private NeedPasswordEventHandler NeedPassword;
    public DOPDescriptor DOP { get; }
    public MainStatePositions StatePositions { get; }
    public int SectionNumber { get; }
    public SectionProperties SectionProperties { get; }
    public BuiltinDocumentProperties BuiltinDocumentProperties { get; }
    public CustomDocumentProperties CustomDocumentProperties { get; }
    public MemoryStream MacrosStream { get; }
    public Byte[] MacroCommands { get; public set; }
    public Byte[] Variables { get; public set; }
    public GrammarSpelling GrammarSpellingData { get; }
    public bool IsFootnote { get; }
    internal int CustomFnSplittedTextLength { get; internal set; }
    public bool IsEndnote { get; }
    public string StandardAsciiFont { get; }
    public string StandardFarEastFont { get; }
    public string StandardNonFarEastFont { get; }
    public string StandardBidiFont { get; }
    public bool IsEncrypted { get; }
    internal Byte[] AssociatedStrings { get; internal set; }
    internal Byte[] SttbfRMark { get; internal set; }
    public Dictionary`2<int, string> SttbfRMarkAuthorNames { get; }
    public WordReader(Stream stream);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NeedPassword(NeedPasswordEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NeedPassword(NeedPasswordEventHandler value);
    public sealed virtual DOPDescriptor get_DOP();
    public MainStatePositions get_StatePositions();
    public sealed virtual int get_SectionNumber();
    public sealed virtual SectionProperties get_SectionProperties();
    public BuiltinDocumentProperties get_BuiltinDocumentProperties();
    public CustomDocumentProperties get_CustomDocumentProperties();
    public MemoryStream get_MacrosStream();
    public Byte[] get_MacroCommands();
    public void set_MacroCommands(Byte[] value);
    public Byte[] get_Variables();
    public void set_Variables(Byte[] value);
    public GrammarSpelling get_GrammarSpellingData();
    public sealed virtual bool get_IsFootnote();
    internal int get_CustomFnSplittedTextLength();
    internal void set_CustomFnSplittedTextLength(int value);
    public sealed virtual bool get_IsEndnote();
    public string get_StandardAsciiFont();
    public string get_StandardFarEastFont();
    public string get_StandardNonFarEastFont();
    public string get_StandardBidiFont();
    public bool get_IsEncrypted();
    internal Byte[] get_AssociatedStrings();
    internal void set_AssociatedStrings(Byte[] value);
    internal Byte[] get_SttbfRMark();
    internal void set_SttbfRMark(Byte[] value);
    public sealed virtual Dictionary`2<int, string> get_SttbfRMarkAuthorNames();
    public sealed virtual IWordSubdocumentReader GetSubdocumentReader(WordSubdocument subDocumentType);
    public sealed virtual void ReadDocumentHeader(WordDocument doc);
    private void ReadSummaryManaged();
    private void ReadDocumentProperties(DocumentPropertyCollection properties);
    private void ReadProperties(PropertySection section, IDictionary dicProperties, bool bSummary, bool bBuiltIn);
    public virtual WordChunkType ReadChunk();
    public sealed virtual void ReadDocumentEnd();
    public virtual FieldDescriptor GetFld();
    internal virtual void Close();
    public virtual FileShapeAddress GetFSPA();
    public virtual void FreezeStreamPos();
    public virtual void UnfreezeStreamPos();
    protected virtual void InitClass();
    protected virtual void UpdateEndPositions(long iEndPos);
    private void UpdateSectionProperties();
    private void UpdateStyleSheet();
    private void UpdateStyleProperties(WordStyle style, StyleDefinitionRecord record);
    private MemoryStream CopyStream(Stream entryStream);
    public sealed virtual void Dispose();
}
[CLSCompliantAttribute("False")]
internal abstract class Syncfusion.DocIO.ReaderWriter.WordReaderBase : object {
    private static int INVALID_CHUNK_LENGTH;
    private static int DEF_WORD9_DOP_LEN;
    private static int DEF_WORD10_DOP_LEN;
    private static int DEF_WORD11_DOP_LEN;
    public StreamsManager m_streamsManager;
    public DocInfo m_docInfo;
    protected WordStyleSheet m_styleSheet;
    protected string m_textChunk;
    protected WordChunkType m_chunkType;
    protected int m_currStyleIndex;
    protected StatePositionsBase m_statePositions;
    protected WordSubdocument m_type;
    protected int m_startTextPos;
    protected int m_endTextPos;
    private ParagraphPropertyException m_papx;
    private CharacterPropertyException m_chpx;
    private BookmarkInfo[] m_bookmarks;
    private long m_iSavedStreamPosition;
    private bool m_bStreamPosSaved;
    private BookmarkInfo m_currentBookmark;
    private BookmarkInfo m_bookmarkAfterParaEnd;
    private bool m_isBookmarkStart;
    private bool m_isBKMKStartAfterParaEnd;
    private int m_cellCounter;
    private bool m_isCellMark;
    private Dictionary`2<int, string> m_sttbFRAuthorNames;
    private Stack`1<Dictionary`2<WTableRow, short>> m_tableRowWidthStack;
    private List`1<short> m_tableMaxRowWidth;
    public int CurrentStyleIndex { get; }
    public WordStyleSheet StyleSheet { get; }
    public WordChunkType ChunkType { get; }
    public string TextChunk { get; public set; }
    public CharacterPropertyException CHPX { get; }
    internal SinglePropertyModifierArray CHPXSprms { get; }
    public ParagraphPropertyException PAPX { get; }
    internal SinglePropertyModifierArray PAPXSprms { get; }
    public ListInfo ListInfo { get; }
    public bool HasTableBody { get; }
    public EscherClass Escher { get; public set; }
    public Fields Fields { get; }
    public WPTablesData TablesData { get; }
    public int CurrentTextPosition { get; public set; }
    public BookmarkInfo[] Bookmarks { get; public set; }
    public BookmarkInfo CurrentBookmark { get; public set; }
    public BookmarkInfo BookmarkAfterParaEnd { get; public set; }
    public bool IsBKMKStartAfterParaEnd { get; public set; }
    public bool IsBookmarkStart { get; }
    public DocumentVersion Version { get; }
    protected Encoding Encoding { get; }
    protected internal int EncodingCharSize { get; }
    protected WordStyle CurrentStyle { get; }
    internal int StartTextPos { get; }
    internal int EndTextPos { get; }
    public Dictionary`2<int, string> SttbfRMarkAuthorNames { get; }
    public Stack`1<Dictionary`2<WTableRow, short>> TableRowWidthStack { get; }
    public List`1<short> MaximumTableRowWidth { get; }
    public WordReaderBase(StreamsManager streamsManager);
    public sealed virtual int get_CurrentStyleIndex();
    public sealed virtual WordStyleSheet get_StyleSheet();
    public sealed virtual WordChunkType get_ChunkType();
    public sealed virtual string get_TextChunk();
    public sealed virtual void set_TextChunk(string value);
    public sealed virtual CharacterPropertyException get_CHPX();
    internal SinglePropertyModifierArray get_CHPXSprms();
    public sealed virtual ParagraphPropertyException get_PAPX();
    internal SinglePropertyModifierArray get_PAPXSprms();
    public ListInfo get_ListInfo();
    public sealed virtual bool get_HasTableBody();
    public EscherClass get_Escher();
    public void set_Escher(EscherClass value);
    public Fields get_Fields();
    public WPTablesData get_TablesData();
    public sealed virtual int get_CurrentTextPosition();
    public sealed virtual void set_CurrentTextPosition(int value);
    public sealed virtual BookmarkInfo[] get_Bookmarks();
    public void set_Bookmarks(BookmarkInfo[] value);
    public BookmarkInfo get_CurrentBookmark();
    public void set_CurrentBookmark(BookmarkInfo value);
    public BookmarkInfo get_BookmarkAfterParaEnd();
    public void set_BookmarkAfterParaEnd(BookmarkInfo value);
    public bool get_IsBKMKStartAfterParaEnd();
    public void set_IsBKMKStartAfterParaEnd(bool value);
    public bool get_IsBookmarkStart();
    public DocumentVersion get_Version();
    protected Encoding get_Encoding();
    protected internal int get_EncodingCharSize();
    protected WordStyle get_CurrentStyle();
    internal int get_StartTextPos();
    internal int get_EndTextPos();
    public sealed virtual Dictionary`2<int, string> get_SttbfRMarkAuthorNames();
    public sealed virtual Stack`1<Dictionary`2<WTableRow, short>> get_TableRowWidthStack();
    public sealed virtual List`1<short> get_MaximumTableRowWidth();
    public virtual WordChunkType ReadChunk();
    public virtual IWordImageReader GetImageReader(WordDocument doc);
    public virtual FileShapeAddress GetFSPA();
    public sealed virtual ShapeBase GetDrawingObject();
    public sealed virtual FormField GetFormField(FieldType fieldType);
    public virtual FieldDescriptor GetFld();
    public sealed virtual bool ReadWatermark(WordDocument doc, WTextBody m_textBody);
    public sealed virtual BookmarkInfo[] GetBookmarks();
    public bool SubdocumentExist();
    internal virtual void Close();
    public virtual void FreezeStreamPos();
    public virtual void UnfreezeStreamPos();
    public bool HasList();
    internal void RestoreBookmark();
    protected void UpdateBookmarks();
    protected virtual void InitClass();
    protected virtual long GetChunkEndPosition(long iCurrentPos);
    protected virtual void UpdateEndPositions(long iEndPos);
    protected virtual void UpdateChunkType();
    protected void UpdateCharacterProperties();
    protected void UpdateParagraphProperties();
    protected void ReadChunkString(int length);
    protected int CalcCP(int startPos, int length);
    private bool IsWatermark(MsofbtSpContainer spContainer);
    private TextBoxShape ReadTextBoxProps(MsofbtSpContainer spContainer, FileShapeAddress fspa);
    private PictureShape ReadPictureProps(MsofbtSpContainer spContainer, FileShapeAddress fspa);
    private void ReadTextWatermark(MsofbtSpContainer spContainer, WordDocument doc, FileShapeAddress fspa, HeaderFooter header);
    private void UpdateTextWatermarkPositions(TextWatermark textWatermark, MsofbtSpContainer spContainer, FileShapeAddress fspa);
    private void ReadPictureWatermark(MsofbtSpContainer spContainer, WordDocument doc, FileShapeAddress fspa, HeaderFooter header);
    private void ApplyShapeProperties(WPicture picture, FileShapeAddress fspa, MsofbtTertiaryFOPT shapePosition);
    private void InitBaseShapeProps(FileShapeAddress fspa, ShapeBase shape, MsofbtSpContainer container);
    private void InitTextBoxProps(TextBoxShape shape, MsofbtSpContainer container);
    private void InitPictureProps(PictureShape pictShape, MsofbtSpContainer spContainer);
    private int ReadAndParseTextChunk(int iLength);
    private int CheckSpecCharacters(int iLength);
    private bool IsZeroChunk();
    private int CalculateChunkLength();
    private bool IsNextItem();
    private int GetFldChunkLen(int curPos, int endPos);
    private bool CheckCurTextChunk(int curChunkPosLen);
    private int CalculateBkmkChunkLen(int startStreamPos, int endStreamPos);
    private int GetBookmarkChunkLen(long curDocStreamPos, long endDocStreamPos);
    private void CheckTableBookmark(int startTextPos, int endTextPos);
    private void SetCurrentBookmark(int startPos, int endPos);
    private void DisableBookmark(int bookmarkIndex);
    private int CheckAndGetCurChunkLen(int curChunkPosLen);
    private int CheckForSymbols(int chunkLen);
    private DocumentVersion GetDocVersion();
    internal SymbolDescriptor GetSymbolDescriptor();
    internal string GetFontName(int wordSprmOption);
    internal int GetPicLocation();
    internal Dictionary`2<int, string> GetSTTBFRNames(Byte[] sttb);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordStyle : object {
    private string m_strName;
    private WordStyleSheet m_styleSheet;
    private int m_baseStyleIndex;
    private int m_nextStyleIndex;
    private int m_linkStyleIndex;
    private int m_id;
    internal static WordStyle Empty;
    private WordStyleType m_typeCode;
    private Byte[] m_tapx;
    private byte m_bFlags;
    private CharacterPropertyException m_chpx;
    private ParagraphPropertyException m_papx;
    internal Byte[] TableStyleData { get; internal set; }
    internal WordStyleType TypeCode { get; internal set; }
    internal int BaseStyleIndex { get; internal set; }
    internal int ID { get; internal set; }
    internal bool IsCharacterStyle { get; internal set; }
    internal string Name { get; internal set; }
    internal bool HasUpe { get; internal set; }
    internal int NextStyleIndex { get; internal set; }
    internal int LinkStyleIndex { get; internal set; }
    internal bool IsPrimary { get; internal set; }
    internal bool IsSemiHidden { get; internal set; }
    internal bool UnhideWhenUsed { get; internal set; }
    internal WordStyleSheet StyleSheet { get; }
    internal CharacterPropertyException CHPX { get; internal set; }
    internal ParagraphPropertyException PAPX { get; internal set; }
    internal WordStyle(WordStyleSheet styleSheet, string name);
    internal WordStyle(WordStyleSheet styleSheet, string name, bool isCharacterStyle);
    private static WordStyle();
    internal Byte[] get_TableStyleData();
    internal void set_TableStyleData(Byte[] value);
    internal WordStyleType get_TypeCode();
    internal void set_TypeCode(WordStyleType value);
    internal int get_BaseStyleIndex();
    internal void set_BaseStyleIndex(int value);
    internal int get_ID();
    internal void set_ID(int value);
    internal bool get_IsCharacterStyle();
    internal void set_IsCharacterStyle(bool value);
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_HasUpe();
    internal void set_HasUpe(bool value);
    internal int get_NextStyleIndex();
    internal void set_NextStyleIndex(int value);
    internal int get_LinkStyleIndex();
    internal void set_LinkStyleIndex(int value);
    internal bool get_IsPrimary();
    internal void set_IsPrimary(bool value);
    internal bool get_IsSemiHidden();
    internal void set_IsSemiHidden(bool value);
    internal bool get_UnhideWhenUsed();
    internal void set_UnhideWhenUsed(bool value);
    internal WordStyleSheet get_StyleSheet();
    internal CharacterPropertyException get_CHPX();
    internal void set_CHPX(CharacterPropertyException value);
    internal ParagraphPropertyException get_PAPX();
    internal void set_PAPX(ParagraphPropertyException value);
    internal void UpdateName(string name);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordStyleSheet : object {
    internal static string DEF_FONT_NAME;
    private static string DEF_NORMAL_STYLE;
    private static string DEF_DPF_STYLE;
    private static string DEF_LIST_FONT_NAME;
    private static int DEF_STDCOUNT;
    internal bool IsFixedIndex13HasStyle;
    internal bool IsFixedIndex14HasStyle;
    internal string FixedIndex13StyleName;
    internal string FixedIndex14StyleName;
    private List`1<string> m_fontNameList;
    private Dictionary`2<string, int> m_fontNames;
    private String[] m_defFontNames;
    private List`1<WordStyle> m_styleList;
    private int m_defStyleIndex;
    private Dictionary`2<string, string> m_fontSubstitutionTable;
    private Dictionary`2<int, string> m_styleNames;
    internal Dictionary`2<int, string> StyleNames { get; }
    internal Dictionary`2<string, string> FontSubstitutionTable { get; internal set; }
    internal List`1<string> FontNamesList { get; }
    internal int DefaultStyleIndex { get; }
    internal int StylesCount { get; }
    internal WordStyleSheet(bool createDefCharStyle);
    internal Dictionary`2<int, string> get_StyleNames();
    internal Dictionary`2<string, string> get_FontSubstitutionTable();
    internal void set_FontSubstitutionTable(Dictionary`2<string, string> value);
    internal List`1<string> get_FontNamesList();
    internal int get_DefaultStyleIndex();
    internal int get_StylesCount();
    internal WordStyle CreateStyle(string name);
    internal WordStyle CreateStyle(string name, bool characterStyle);
    internal WordStyle CreateStyle(string name, int index);
    internal int AddStyle(WordStyle style);
    internal int AddEmptyStyle();
    internal int StyleNameToIndex(string name, bool isCharacter);
    internal int StyleNameToIndex(string name);
    internal int FontNameToIndex(string name);
    internal WordStyle GetStyleByIndex(int index);
    internal WordStyle UpdateStyle(int index, string name);
    internal void RemoveStyleByIndex(int index);
    internal void InsertStyle(int index, WordStyle style);
    internal void UpdateFontSubstitutionTable(FontFamilyNameRecord ffnRecord);
    internal void UpdateFontName(string name);
    internal void UpdateFontNames(String[] names);
    internal void ClearFontNames();
    internal void Close();
    private void ValidateNameParameter(string name, int withoutIndex);
}
public enum Syncfusion.DocIO.ReaderWriter.WordSubdocument : Enum {
    public int value__;
    public static WordSubdocument Main;
    public static WordSubdocument Footnote;
    public static WordSubdocument HeaderFooter;
    public static WordSubdocument Endnote;
    public static WordSubdocument Annotation;
    public static WordSubdocument TextBox;
    public static WordSubdocument HeaderTextBox;
}
[CLSCompliantAttribute("False")]
internal abstract class Syncfusion.DocIO.ReaderWriter.WordSubdocumentReader : WordReaderBase {
    protected int DEF_SECTION_NUMBER;
    protected HeaderType m_headerType;
    protected int m_itemIndex;
    private bool m_bIsNextItemPos;
    private WordReader m_mainReader;
    public WordSubdocument Type { get; }
    public HeaderType HeaderType { get; public set; }
    public int ItemNumber { get; }
    public StatePositionsBase StatePositions { get; }
    internal bool IsNextItemPos { get; }
    public WordSubdocumentReader(WordReader mainReader);
    public sealed virtual WordSubdocument get_Type();
    public sealed virtual HeaderType get_HeaderType();
    public void set_HeaderType(HeaderType value);
    public sealed virtual int get_ItemNumber();
    public StatePositionsBase get_StatePositions();
    internal bool get_IsNextItemPos();
    public virtual FieldDescriptor GetFld();
    public virtual void Reset();
    public virtual void MoveToItem(int itemIndex);
    protected virtual void CreateStatePositions();
    protected virtual long GetChunkEndPosition(long iCurrentPos);
    protected virtual void InitClass();
    protected virtual void UpdateStreamPosition();
    protected virtual void UpdateEndPositions(long iEndPos);
    public virtual void UnfreezeStreamPos();
}
[CLSCompliantAttribute("False")]
internal abstract class Syncfusion.DocIO.ReaderWriter.WordSubdocumentWriter : WordWriterBase {
    public WordSubdocument Type { get; }
    internal WordSubdocumentWriter(WordWriter mainWriter);
    public sealed virtual WordSubdocument get_Type();
    public abstract virtual void WriteDocumentEnd();
    public virtual void WriteItemStart();
    public virtual void WriteItemEnd();
    protected virtual void InitClass();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordTextBoxReader : WordSubdocumentReader {
    public WordTextBoxReader(WordReader mainReader);
    protected virtual void CreateStatePositions();
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordTextBoxWriter : WordSubdocumentWriter {
    protected static UInt32 DEF_TEXTBOX_RESERVED_DATA;
    protected int m_lastTxbxPosition;
    protected int m_txbxBkDCnt;
    protected long m_dataPosition;
    internal WordTextBoxWriter(WordWriter mainWriter);
    public virtual void WriteDocumentEnd();
    public virtual void WriteItemEnd();
    internal void WriteTextBoxEnd(int spid);
    protected virtual void IncreaseCcp(int dataLength);
    protected virtual void AddNewTxbx(bool isLast, int spid);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WordWriter : WordWriterBase {
    private bool m_bHeaderWritten;
    private int m_commentID;
    private bool m_bLastParagrapfEnd;
    private SectionProperties m_secProperties;
    private IWordSubdocumentWriter m_lastWriter;
    private BuiltinDocumentProperties m_builtinProp;
    private CustomDocumentProperties m_customProp;
    private bool m_isTemplate;
    private bool m_bIsWriteProtected;
    private bool m_bHasPicture;
    public SectionProperties SectionProperties { get; }
    public BuiltinDocumentProperties BuiltinDocumentProperties { get; public set; }
    public CustomDocumentProperties CustomDocumentProperties { get; public set; }
    public DOPDescriptor DOP { get; public set; }
    public GrammarSpelling GrammarSpellingData { get; public set; }
    public MemoryStream MacrosStream { get; public set; }
    public MemoryStream ObjectPoolStream { get; public set; }
    public Byte[] MacroCommands { get; public set; }
    public Byte[] Variables { get; public set; }
    public string StandardAsciiFont { get; public set; }
    public string StandardFarEastFont { get; public set; }
    public string StandardBidiFont { get; public set; }
    public string StandardNonFarEastFont { get; public set; }
    internal bool IsTemplate { get; internal set; }
    public Byte[] AssociatedStrings { get; public set; }
    public Byte[] SttbfRMark { get; public set; }
    internal bool WriteProtected { get; internal set; }
    internal bool HasPicture { get; internal set; }
    public WordWriter(Stream stream);
    public sealed virtual SectionProperties get_SectionProperties();
    public BuiltinDocumentProperties get_BuiltinDocumentProperties();
    public void set_BuiltinDocumentProperties(BuiltinDocumentProperties value);
    public CustomDocumentProperties get_CustomDocumentProperties();
    public void set_CustomDocumentProperties(CustomDocumentProperties value);
    public sealed virtual DOPDescriptor get_DOP();
    public void set_DOP(DOPDescriptor value);
    public GrammarSpelling get_GrammarSpellingData();
    public void set_GrammarSpellingData(GrammarSpelling value);
    public MemoryStream get_MacrosStream();
    public void set_MacrosStream(MemoryStream value);
    public MemoryStream get_ObjectPoolStream();
    public void set_ObjectPoolStream(MemoryStream value);
    public Byte[] get_MacroCommands();
    public void set_MacroCommands(Byte[] value);
    public Byte[] get_Variables();
    public void set_Variables(Byte[] value);
    public string get_StandardAsciiFont();
    public void set_StandardAsciiFont(string value);
    public string get_StandardFarEastFont();
    public void set_StandardFarEastFont(string value);
    public string get_StandardBidiFont();
    public void set_StandardBidiFont(string value);
    public string get_StandardNonFarEastFont();
    public void set_StandardNonFarEastFont(string value);
    internal bool get_IsTemplate();
    internal void set_IsTemplate(bool value);
    public Byte[] get_AssociatedStrings();
    public void set_AssociatedStrings(Byte[] value);
    public Byte[] get_SttbfRMark();
    public void set_SttbfRMark(Byte[] value);
    internal bool get_WriteProtected();
    internal void set_WriteProtected(bool value);
    internal bool get_HasPicture();
    internal void set_HasPicture(bool value);
    public sealed virtual void WriteDocumentHeader();
    public sealed virtual IWordSubdocumentWriter GetSubdocumentWriter(WordSubdocument subDocumentType);
    public virtual void WriteChunk(string textChunk);
    public virtual void WriteSafeChunk(string textChunk);
    public virtual void WriteMarker(WordChunkType chunkType);
    public sealed virtual void WriteDocumentEnd(string password, string author, ushort fibVersion, Dictionary`2<string, Storage> oleObjectCollection);
    public void InsertComment(WCommentFormat format);
    public void InsertFootnote(WFootnote footnote);
    public sealed virtual void InsertPageBreak();
    private void CompleteMainStream();
    private void WriteZeroBlock(int size);
    private void WriteTables(string author);
    private void WriteSummary();
    private void WriteProps(PropertySection section, ICollection values);
    private PropertyData ConvertToPropertyData(DocumentProperty property, int iPropertyId);
    private void AddSepxProperties();
    internal virtual void Close();
    protected virtual void InitClass();
    protected virtual void IncreaseCcp(int dataLength);
    public sealed virtual void Dispose();
}
[CLSCompliantAttribute("False")]
internal abstract class Syncfusion.DocIO.ReaderWriter.WordWriterBase : object {
    private static int DEF_FIELDSHAPETYPE_VAL;
    public StreamsManager m_streamsManager;
    public DocInfo m_docInfo;
    protected WordStyleSheet m_styleSheet;
    protected int m_nextPicLocation;
    protected CharacterPropertyException m_chpx;
    protected CharacterPropertyException m_breakChpx;
    protected ParagraphPropertyException m_papx;
    protected ListProperties m_listProperties;
    private Stack`1<FieldDescriptor> m_endStack;
    private int m_iCountCell;
    private int m_currStyleIndex;
    protected int m_curTxbxId;
    protected int m_curPicId;
    private int m_curTxid;
    protected int m_textColIndex;
    protected int m_iStartText;
    protected BinaryWriter m_textWriter;
    private byte m_bFlag;
    protected WordSubdocument m_type;
    public WordStyleSheet StyleSheet { get; }
    public int CurrentStyleIndex { get; public set; }
    public CharacterPropertyException CHPX { get; public set; }
    public CharacterPropertyException BreakCHPX { get; public set; }
    public ParagraphPropertyException PAPX { get; public set; }
    public bool BreakCHPXStickProperties { get; public set; }
    public bool CHPXStickProperties { get; public set; }
    public bool PAPXStickProperties { get; public set; }
    public ListProperties ListProperties { get; }
    public EscherClass Escher { get; public set; }
    public StreamsManager StreamsManager { get; }
    public BinaryWriter MainWriter { get; }
    internal int NextTextId { get; }
    public WordWriterBase(StreamsManager streamsManager);
    public sealed virtual WordStyleSheet get_StyleSheet();
    public sealed virtual int get_CurrentStyleIndex();
    public sealed virtual void set_CurrentStyleIndex(int value);
    public sealed virtual CharacterPropertyException get_CHPX();
    public sealed virtual void set_CHPX(CharacterPropertyException value);
    public sealed virtual CharacterPropertyException get_BreakCHPX();
    public sealed virtual void set_BreakCHPX(CharacterPropertyException value);
    public sealed virtual ParagraphPropertyException get_PAPX();
    public sealed virtual void set_PAPX(ParagraphPropertyException value);
    public sealed virtual bool get_BreakCHPXStickProperties();
    public sealed virtual void set_BreakCHPXStickProperties(bool value);
    public sealed virtual bool get_CHPXStickProperties();
    public sealed virtual void set_CHPXStickProperties(bool value);
    public sealed virtual bool get_PAPXStickProperties();
    public sealed virtual void set_PAPXStickProperties(bool value);
    public sealed virtual ListProperties get_ListProperties();
    public EscherClass get_Escher();
    public void set_Escher(EscherClass value);
    public StreamsManager get_StreamsManager();
    public BinaryWriter get_MainWriter();
    internal int get_NextTextId();
    public virtual void WriteChunk(string textChunk);
    public virtual void WriteSafeChunk(string textChunk);
    public sealed virtual void WriteCellMark(int nestingLevel);
    public sealed virtual void WriteRowMark(int nestingLevel, int cellCount);
    public virtual void WriteMarker(WordChunkType chunkType);
    private void SetCellMark(SinglePropertyModifierArray sprms, bool value);
    private void SetTableNestingLevel(SinglePropertyModifierArray sprms, int value);
    public TableBorders CreateTableBorders();
    public sealed virtual void InsertStartField(string fieldcode, bool hasSeparator);
    public sealed virtual void InsertStartField(string fieldcode, WField field, bool hasSeparator);
    public sealed virtual void InsertFieldSeparator();
    public sealed virtual void InsertEndField();
    public sealed virtual void InsertFieldIndexEntry(string fieldCode);
    public sealed virtual void InsertFormField(string fieldcode, FormField formField, WFormField wFormField);
    public void InsertHyperlink(string displayText, string url, bool isLocalUrl);
    public sealed virtual void InsertImage(WPicture picture);
    public sealed virtual void InsertImage(WPicture picture, int height, int width);
    public sealed virtual void InsertShape(WPicture pict, PictureShapeProps pictProps);
    public sealed virtual int InsertTextBox(bool visible, WTextBoxFormat txbxFormat);
    public int InsertInlineTextBox(bool visible, WTextBoxFormat txbxFormat);
    public void InsertShapeObject(ShapeObject shapeObj);
    public void InsertInlineShapeObject(InlineShapeObject shapeObj);
    public sealed virtual void InsertBookmarkStart(string name, BookmarkStart start);
    public sealed virtual void InsertBookmarkEnd(string name);
    public sealed virtual void InsertWatermark(Watermark watermark, UnitsConvertor unitsConvertor, float maxWidth);
    internal virtual void Close();
    protected abstract virtual void IncreaseCcp(int dataLength);
    protected virtual void InitClass();
    protected void WriteString(string text);
    protected void AddChpxProperties(bool isParaBreak);
    protected void AddPapxProperties();
    private void UpdateShadingSprms(ParagraphPropertyException paraPropertyException);
    protected void WriteSymbol(char symbol);
    protected void WriteChar(char symbol);
    protected void WriteNestedMark();
    internal virtual int GetTextPos();
    private void SetFSPASpid(BaseProps props);
    protected FieldDescriptor WriteFieldStart(FieldType fieldType);
    protected FieldDescriptor WriteFieldSeparator();
    protected void WriteFieldEnd();
    protected void WriteNilPICFAndBinData(WField field);
    private string RemoveFormattingString(string value);
    protected void AddFieldDescriptor(FieldDescriptor fld, int pos);
    public void AddTxBxContainer(bool visible, WTextBoxFormat txbxFormat);
    internal void SyncTxBxContainer(MsofbtSpContainer spContainer, bool visible, WTextBoxFormat txbxFormat);
    internal void AddPictContainer(WPicture pict, MsofbtSpContainer spContainer, PictureShapeProps pictProps);
    internal void SyncPictContainer(MsofbtSpContainer spContainer, PictureShapeProps pictProps, WPicture pic);
    private void UpdateContainers(int oldId, int newId, MsofbtSpContainer spContainer);
    private FileShapeAddress CreateWatermarkFSPA();
    private MsofbtSpContainer InsertTextWatermark(Watermark watermark, FileShapeAddress fspa, UnitsConvertor unitsConvertor);
    private MsofbtSpContainer InsertPictureWatermark(Watermark watermark, FileShapeAddress fspa, UnitsConvertor unitsConvertor, float maxWidth);
    private SizeF FitPictureToPage(PictureWatermark picWatermark, float maxWidth, UnitsConvertor unitsConvertor);
    private void CreatePictureWatermarkCont(PictureWatermark pictWatermark, MsofbtSpContainer pictContainer);
    private int GetWatermarkNumber();
    private bool IsImageEqual(Byte[] imageHash1, Byte[] imageHash2);
}
internal class Syncfusion.DocIO.ReaderWriter.WPStylesData : object {
    private WPTablesData m_tablesData;
    [CLSCompliantAttribute("False")]
internal StyleSheetInfoRecord StyleSheetInfo { get; }
    [CLSCompliantAttribute("False")]
internal StyleDefinitionRecord[] StyleDefinitions { get; }
    [CLSCompliantAttribute("False")]
internal WPStylesData(WPTablesData tables);
    internal StyleSheetInfoRecord get_StyleSheetInfo();
    internal StyleDefinitionRecord[] get_StyleDefinitions();
    [CLSCompliantAttribute("False")]
internal StyleDefinitionRecord GetStyleRecordByID(int styleID);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.DocIO.ReaderWriter.WPTablesData : object {
    internal static string DEF_TABLESTREAM_NAME;
    private static string EXC_NOTREAD_TABLE_MESS;
    internal EscherClass m_escher;
    private Fib m_fib;
    private SectionExceptionsTable m_sectionTable;
    internal PieceTable m_pieceTable;
    private FontFamilyNameStringTable m_ffnStringTable;
    private BookmarkNameStringTable m_bkmkStringTable;
    private BookmarkDescriptor m_bkmkDescriptor;
    private BinaryTable m_binTableCHPX;
    private BinaryTable m_binTablePAPX;
    private ListInfo m_listInfo;
    private CharPosTableRecord m_charPosTableHF;
    private StyleSheetInfoRecord m_styleSheetInfo;
    private StyleDefinitionRecord[] m_arrStyleDefinitions;
    private List`1<UInt32> m_pieceTablePositions;
    internal List`1<Encoding> m_pieceTableEncodings;
    private DOPDescriptor m_dopDescriptor;
    private ArtObjectsRW m_artObjects;
    private AnnotationsRW m_anotations;
    private FootnotesRW m_footnotes;
    private EndnotesRW m_endnotes;
    private Fields m_fields;
    private Byte[] m_macroCommands;
    private Byte[] m_variables;
    private Byte[] m_assocStrings;
    private Byte[] m_sttbfRMark;
    private SinglePropertyModifierArray m_clxModifiers;
    private List`1<int> m_secPositions;
    private List`1<int> m_sepxPositions;
    private List`1<UInt32> m_papPositions;
    private List`1<int> m_papxPositions;
    private List`1<UInt32> m_chpPositions;
    private List`1<int> m_chpxPositions;
    private Int32[] m_headerPositions;
    private string m_standardAsciiFont;
    private string m_standardFarEastFont;
    private string m_standardNonFarEastFont;
    private string m_standardBidiFont;
    private GrammarSpelling m_grammarSpellingTablesData;
    internal ArtObjectsRW ArtObj { get; }
    internal AnnotationsRW Annotations { get; }
    internal FootnotesRW Footnotes { get; }
    internal EndnotesRW Endnotes { get; }
    internal SectionExceptionsTable SectionsTable { get; }
    internal FontFamilyNameStringTable FFNStringTable { get; internal set; }
    internal StyleSheetInfoRecord StyleSheetInfo { get; internal set; }
    internal StyleDefinitionRecord[] StyleDefinitions { get; internal set; }
    internal CharPosTableRecord HeaderFooterCharPosTable { get; }
    internal BinaryTable CHPXBinaryTable { get; }
    internal BinaryTable PAPXBinaryTable { get; }
    internal Int32[] HeaderPositions { get; internal set; }
    internal int SectionCount { get; }
    internal BookmarkNameStringTable BookmarkStrings { get; }
    internal BookmarkDescriptor BookmarkDescriptor { get; }
    internal DOPDescriptor DOP { get; internal set; }
    internal ListInfo ListInfo { get; internal set; }
    internal List`1<UInt32> PieceTablePositions { get; }
    internal ArtObjectsRW FileArtObjects { get; }
    internal EscherClass Escher { get; internal set; }
    internal Fields Fields { get; internal set; }
    internal Byte[] MacroCommands { get; internal set; }
    internal Fib Fib { get; }
    internal string StandardAsciiFont { get; internal set; }
    internal string StandardFarEastFont { get; internal set; }
    internal string StandardNonFarEastFont { get; internal set; }
    internal string StandardBidiFont { get; internal set; }
    internal GrammarSpelling GrammarSpellingData { get; internal set; }
    internal Byte[] Variables { get; internal set; }
    internal Byte[] AsociatedStrings { get; internal set; }
    internal Byte[] SttbfRMark { get; internal set; }
    internal WPTablesData(Fib fib);
    internal ArtObjectsRW get_ArtObj();
    internal AnnotationsRW get_Annotations();
    internal FootnotesRW get_Footnotes();
    internal EndnotesRW get_Endnotes();
    internal SectionExceptionsTable get_SectionsTable();
    internal FontFamilyNameStringTable get_FFNStringTable();
    internal void set_FFNStringTable(FontFamilyNameStringTable value);
    internal StyleSheetInfoRecord get_StyleSheetInfo();
    internal void set_StyleSheetInfo(StyleSheetInfoRecord value);
    internal StyleDefinitionRecord[] get_StyleDefinitions();
    internal void set_StyleDefinitions(StyleDefinitionRecord[] value);
    internal CharPosTableRecord get_HeaderFooterCharPosTable();
    internal BinaryTable get_CHPXBinaryTable();
    internal BinaryTable get_PAPXBinaryTable();
    internal Int32[] get_HeaderPositions();
    internal void set_HeaderPositions(Int32[] value);
    internal int get_SectionCount();
    internal BookmarkNameStringTable get_BookmarkStrings();
    internal BookmarkDescriptor get_BookmarkDescriptor();
    internal DOPDescriptor get_DOP();
    internal void set_DOP(DOPDescriptor value);
    internal ListInfo get_ListInfo();
    internal void set_ListInfo(ListInfo value);
    internal List`1<UInt32> get_PieceTablePositions();
    internal ArtObjectsRW get_FileArtObjects();
    internal EscherClass get_Escher();
    internal void set_Escher(EscherClass value);
    internal Fields get_Fields();
    internal void set_Fields(Fields value);
    internal Byte[] get_MacroCommands();
    internal void set_MacroCommands(Byte[] value);
    internal Fib get_Fib();
    internal string get_StandardAsciiFont();
    internal void set_StandardAsciiFont(string value);
    internal string get_StandardFarEastFont();
    internal void set_StandardFarEastFont(string value);
    internal string get_StandardNonFarEastFont();
    internal void set_StandardNonFarEastFont(string value);
    internal string get_StandardBidiFont();
    internal void set_StandardBidiFont(string value);
    internal GrammarSpelling get_GrammarSpellingData();
    internal void set_GrammarSpellingData(GrammarSpelling value);
    internal Byte[] get_Variables();
    internal void set_Variables(Byte[] value);
    internal Byte[] get_AsociatedStrings();
    internal void set_AsociatedStrings(Byte[] value);
    internal Byte[] get_SttbfRMark();
    internal void set_SttbfRMark(Byte[] value);
    internal void Read(Stream stream);
    internal void Write(Stream stream, bool hasSubDocument);
    internal UInt32 ConvertCharPosToFileCharPos(UInt32 charPos);
    internal BookmarkInfo[] GetBookmarks();
    internal void AddSectionRecord(int charPos, int sepxPos);
    internal void AddPapxRecord(UInt32 charPos, int papxPos);
    internal void AddChpxRecord(UInt32 pos, int chpxPos);
    internal void AddStyleSheetTable(WordStyleSheet styleSheet);
    internal void Close();
    private void ReadFFNTable(Stream stream, Fib fib);
    internal Encoding GetEncodingByFC(long position);
    internal UInt32 ConvertFCToCP(UInt32 fc);
    internal bool HasSubdocument(WordSubdocument wsType);
    internal bool HasList();
    private void AddFFNTable(WordStyleSheet styleSheet);
    private void WriteFFNTable(Stream stream);
    private void WriteStyleSheet(Stream stream);
    private int WriteShort(Stream stream, ushort val);
    private void ReadStyleSheet(Stream stream);
    private long ReadStyleSheetTable(Stream stream);
    private void ReadStylesDefinitions(Stream stream, long lNextBlockStart);
    private void GenerateTables(bool hasSubDocument);
    private UInt32 NormalizeFileCharPos(UInt32 fileCharPos, Boolean& bIsUnicode);
    private void ReadComplexPart(Stream stream);
    private ushort ReadUInt16(Stream stream);
    private UInt32 ReadUInt32(Stream stream);
    private void ReadLists(Fib fib, Stream stream);
    private void WriteDocumentProperties(Stream stream, Fib fib);
    private void ReadDocumentProperties(Fib fib, Stream stream);
    private void WriteFields(Stream stream, WordSubdocument subDocument);
    private void ReadFields(Fib fib, Stream stream);
    private void WriteBookmarks(Stream stream, Fib fib);
    private void ReadBookmarks(Fib fib, Stream stream);
    private void ParsePieceTableEncodings();
    private void ReadArtObjects(Fib fib, Stream stream);
    private void ReadAnnotations(Fib fib, Stream stream);
    private void ReadFootnotes(Fib fib, Stream stream);
    private void ReadEndnotes(Fib fib, Stream stream);
    private void WriteArtObjects(Stream stream, Fib fib);
    private void WriteAnnotations(Fib fib, Stream stream);
    private void WriteFootnotes(Fib fib, Stream stream);
    private void WriteEndnotes(Fib fib, Stream stream);
    private static void SynchronizeSpids(ContainerCollection collection, IDictionaryEnumerator mainEnumerator);
    private void ReadMacroCommands(Fib fib, Stream stream);
    private void WriteMacroCommands(Fib fib, Stream stream);
    private void ReadGrammarSpellingData(Fib fib, Stream stream);
    private void WriteGrammarSpellingData(Fib fib, Stream stream);
    private bool ContainShapes(Fib fib);
    private void ReadVariables(Fib fib, Stream stream);
    private void WriteVariables(Fib fib, Stream stream);
    private void ReadAssocStrings(Fib fib, Stream stream);
    private void ReadSttbfRMark(Fib fib, Stream stream);
    private void WriteAssocStrings(Fib fib, Stream stream);
    private void WriteSttbfRMark(Fib fib, Stream stream);
    private void UpdateSTTBStructure();
    private void WriteRmdThreading(Stream stream);
}
public enum Syncfusion.DocIO.ReferenceKind : Enum {
    public int value__;
    public static ReferenceKind ContentText;
    public static ReferenceKind AboveBelow;
    public static ReferenceKind PageNumber;
    public static ReferenceKind NumberRelativeContext;
    public static ReferenceKind NumberNoContext;
    public static ReferenceKind NumberFullContext;
}
public enum Syncfusion.DocIO.ReferenceType : Enum {
    public int value__;
    public static ReferenceType Bookmark;
}
internal class Syncfusion.DocIO.Rendering.BookmarkPosition : object {
    private RectangleF m_bounds;
    private int m_pageNumber;
    private int m_bookmarkStyle;
    private string m_bookmarkName;
    internal int BookmarkStyle { get; internal set; }
    public RectangleF Bounds { get; public set; }
    public int PageNumber { get; public set; }
    public string BookmarkName { get; public set; }
    public BookmarkPosition(string bookmarkName, int pageNumber, RectangleF bounds);
    internal BookmarkPosition(string bookmarkName, int pageNumber, RectangleF bounds, int level);
    internal int get_BookmarkStyle();
    internal void set_BookmarkStyle(int value);
    public RectangleF get_Bounds();
    public void set_Bounds(RectangleF value);
    public int get_PageNumber();
    public void set_PageNumber(int value);
    public string get_BookmarkName();
    public void set_BookmarkName(string value);
}
internal class Syncfusion.DocIO.Rendering.DrawingContext : DocumentLayouter {
    private static float DEF_SCRIPT_FACTOR;
    private static float DEF_EMBOSS_ENGRAVE_FACTOR;
    private static float DEF_DINOFFC_TEXT_FACTOR;
    private static float DEF_DINOFFC_LISTTEXT_FACTOR;
    private static float DEF_FONT_SIZE;
    private static float DEF_PICBULLET_MIN_FONT_SIZE;
    private static float DEF_PICBULLET_SCALE_FACTOR;
    private static char NONBREAK_HYPHEN;
    private static char Zero_Width_Joiner;
    private static char SOFT_HYPHEN;
    private static char SPACE;
    private bool m_enableComplexScript;
    [ThreadStaticAttribute]
private static Dictionary`2<WPicture, IImage> headerImageCollection;
    private ChartRenderingOptions m_chartRenderingOptions;
    private Dictionary`2<string, Stream> m_privateFontStream;
    private List`1<FallbackFont> m_fallbackFonts;
    private IGraphics m_graphics;
    private IGraphics m_graphicsBmp;
    private List`1<Dictionary`2<string, RectangleF>> m_hyperLinks;
    internal WParagraph currParagraph;
    internal WTextRange currTextRange;
    internal Hyperlink currHyperlink;
    internal WFieldMark formFieldEnd;
    private WField m_currentField;
    private string m_currentBkName;
    private ExportBookmarkType m_exportBookmarkType;
    internal RectangleF CurrParagraphBounds;
    private byte m_bFlag;
    private byte m_bFlag1;
    internal int m_orderIndex;
    internal float m_pageMarginLeft;
    private Dictionary`2<int, LayoutedWidget> m_overLappedShapeWidgets;
    private FontMetric m_fontmetric;
    private StringFormat m_stringformat;
    internal Stack`1<RectangleF> ClipBoundsContainer;
    private List`1<LayoutedWidget> m_editableFormFieldinEMF;
    private RectangleF m_editableTextFormBounds;
    private RectangleF m_rotateTransform;
    private string m_editableTextFormText;
    private WTextRange m_editableTextFormTextRange;
    private int m_lastTextRangeIndex;
    private Dictionary`2<int, int> autoTagIndex;
    private string m_commentId;
    private List`1<PointF[]> m_commentMarks;
    internal List`1<KeyValuePair`2<string, bool>> m_previousLineCommentStartMarks;
    internal Hyperlink m_prevPageHyperlink;
    private int autoTagCount;
    [ThreadStaticAttribute]
private static List`1<BookmarkPosition> m_bookmarks;
    private int currParagraphIndex;
    private Dictionary`2<WCharacterFormat, List`1<RectangleF>> underLineValues;
    private Dictionary`2<WCharacterFormat, RectangleF> strikeThroughValues;
    private Dictionary`2<WPicture, IImage> HeaderImageCollection { get; }
    private bool IsListCharacter { get; private set; }
    internal bool RecreateNestedMetafile { get; internal set; }
    internal Dictionary`2<int, int> AutoTagIndex { get; }
    internal List`1<LayoutedWidget> EditableFormFieldinEMF { get; internal set; }
    internal WField CurrentRefField { get; internal set; }
    internal string CurrentBookmarkName { get; internal set; }
    internal ExportBookmarkType ExportBookmarks { get; internal set; }
    internal bool EnableComplexScript { get; internal set; }
    internal List`1<FallbackFont> FallbackFonts { get; internal set; }
    public Dictionary`2<string, Stream> FontStreams { get; public set; }
    public IGraphics Graphics { get; public set; }
    internal IGraphics GraphicsBmp { get; }
    internal List`1<Dictionary`2<string, RectangleF>> Hyperlinks { get; }
    internal static List`1<Dictionary`2<string, BookmarkHyperlink>> BookmarkHyperlinksList { get; }
    internal static List`1<BookmarkPosition> Bookmarks { get; }
    internal Dictionary`2<int, LayoutedWidget> OverLappedShapeWidgets { get; }
    public FontMetric FontMetric { get; }
    public StringFormat StringFormt { get; }
    internal bool EmbedFonts { get; internal set; }
    internal bool EmbedCompleteFonts { get; internal set; }
    internal bool AutoTag { get; internal set; }
    internal ChartRenderingOptions ChartRenderingOptions { get; internal set; }
    internal DrawingContext(IGraphics graphics, GraphicsUnit pageUnit);
    private Dictionary`2<WPicture, IImage> get_HeaderImageCollection();
    private bool get_IsListCharacter();
    private void set_IsListCharacter(bool value);
    internal bool get_RecreateNestedMetafile();
    internal void set_RecreateNestedMetafile(bool value);
    internal Dictionary`2<int, int> get_AutoTagIndex();
    internal List`1<LayoutedWidget> get_EditableFormFieldinEMF();
    internal void set_EditableFormFieldinEMF(List`1<LayoutedWidget> value);
    internal WField get_CurrentRefField();
    internal void set_CurrentRefField(WField value);
    internal string get_CurrentBookmarkName();
    internal void set_CurrentBookmarkName(string value);
    internal ExportBookmarkType get_ExportBookmarks();
    internal void set_ExportBookmarks(ExportBookmarkType value);
    internal bool get_EnableComplexScript();
    internal void set_EnableComplexScript(bool value);
    internal List`1<FallbackFont> get_FallbackFonts();
    internal void set_FallbackFonts(List`1<FallbackFont> value);
    public Dictionary`2<string, Stream> get_FontStreams();
    public void set_FontStreams(Dictionary`2<string, Stream> value);
    public IGraphics get_Graphics();
    public void set_Graphics(IGraphics value);
    internal IGraphics get_GraphicsBmp();
    internal List`1<Dictionary`2<string, RectangleF>> get_Hyperlinks();
    internal static List`1<Dictionary`2<string, BookmarkHyperlink>> get_BookmarkHyperlinksList();
    internal static List`1<BookmarkPosition> get_Bookmarks();
    internal Dictionary`2<int, LayoutedWidget> get_OverLappedShapeWidgets();
    public FontMetric get_FontMetric();
    public StringFormat get_StringFormt();
    internal bool get_EmbedFonts();
    internal void set_EmbedFonts(bool value);
    internal bool get_EmbedCompleteFonts();
    internal void set_EmbedCompleteFonts(bool value);
    internal bool get_AutoTag();
    internal void set_AutoTag(bool value);
    internal ChartRenderingOptions get_ChartRenderingOptions();
    internal void set_ChartRenderingOptions(ChartRenderingOptions value);
    internal void DrawOverLappedShapeWidgets(bool isHaveToInitLayoutInfo);
    internal bool IsColorMismatched(IEntity nextsibling, WParagraph paragraph);
    internal void DrawParagraph(WParagraph paragraph, LayoutedWidget ltWidget);
    internal void DrawTextBox(WTextBox textBox, LayoutedWidget ltWidget);
    private RectangleF UpdateClipBounds(RectangleF clipBounds);
    private void DrawBarTabStop(WParagraph paragraph, LayoutedWidget ltWidget);
    private RectangleF GetBoundsToDrawParagraphBackGroundColor(WParagraph paragraph, LayoutedWidget ltWidget, bool isParagraphMarkIsHidden, bool isLineDrawing, Boolean& resetTransform);
    internal bool IsParagraphContainingListHasBreak(LayoutedWidget ltWidget);
    private Entity GetBaseEntity(Entity entity);
    private bool IsNeedtoUpdateTabPosition(LayoutedWidget widget, int index);
    public void UpdateTabPosition(LayoutedWidget widget, RectangleF clientArea);
    private void UpdateDecimalTabPosition(LayoutedWidget ltWidget, RectangleF clientArea);
    private void UpdateDecimalTabPositionInCell(LayoutedWidget ltWidget, RectangleF clientArea);
    private bool IsDecimalTabStart(LayoutedWidget ltWidget, int decimalTabStart, bool isDecimalTab, int i, float widthToShift, bool isInCell);
    private float GetWidthToShift(LayoutedWidget ltWidget, int decimalTabStart, bool isInCell, RectangleF clientArea);
    public WParagraphFormat GetCurrentTabFormat(WParagraph paragraph);
    private float GetColumnWidth(WParagraph paragraph);
    public float GetLeftWidth(WParagraph paragraph, int decimalTabStart, int decimalTabEnd);
    internal float GetLeftWidth(LayoutedWidget ltWidget, int decimalTabStart, int decimalTabEnd);
    private int GetIndexOfDecimalseparator(WParagraph paragraph, int decimalTabStart, int decimalTabEnd, Single& leftWidth, Int32& decimalSeparator, Boolean& isSeparator);
    private int GetIndexOfDecimalseparator(LayoutedWidget ltWidget, int decimalTabStart, int decimalTabEnd, Single& leftWidth, Int32& decimalSeparator, Boolean& isSeparator);
    private bool IsDecimalSeparator(Char[] ch, Int32& decimalSeparator, bool isPrevTextHasNumber);
    private WParagraph GetOwnerParagraph(LayoutedWidget ltWidget);
    private int GetTabEndIndex(LayoutedWidget ltWidget, int startIndex);
    public float GetListValue(WParagraph paragraph, ParagraphLayoutInfo paragraphInfo, WListFormat listFormat);
    internal void DrawList(WParagraph paragraph, LayoutedWidget ltWidget, WListFormat listFormat);
    private void DrawListTabLeader(WParagraph paragraph, ParagraphLayoutInfo paragraphInfo, float listWidth, float xPosition, float yPosition);
    private string GetTabLeader(ParagraphLayoutInfo paragraphInfo);
    public float GetAscentValueForEQField(WField field);
    internal float IsLineContainsEQfield(LayoutedWidget ltWidget);
    internal bool IsEmptyParagraph(WParagraph para);
    private void AddCommentMark(WCommentMark commentMark, LayoutedWidget ltWidget);
    private void DrawCommentMarks(RevisionOptions revisionOptions);
    internal void DrawAbsoluteTab(WAbsoluteTab absoluteTab, LayoutedWidget ltWidget);
    private void UpdateAbsoluteTabLeader(WAbsoluteTab absoluteTab, LayoutedWidget ltWidget, String& text);
    internal void DrawSeparator(WTextRange txtRange, LayoutedWidget ltWidget);
    internal void DrawTextRange(WTextRange txtRange, LayoutedWidget ltWidget, string text);
    internal string GetTrimmedText(string originalText);
    private bool IsValidFieldResult(WField hyperLinkField, IWidget widget);
    internal void UpdateBookmarkTargetPosition(Entity ent, LayoutedWidget ltWidget);
    internal void CreateBookmarkRerefeceLink(Entity ent, LayoutedWidget ltWidget);
    private bool IsTextRangeFollowWithTab(LayoutedWidget ltWidget);
    private void UpdateTabLeader(WTextRange txtRange, LayoutedWidget ltWidget, String& text);
    private void FillDots(Font font, LayoutedWidget ltWidget, WCharacterFormat charFormat, StringFormat format, String& text);
    private void FillSingle(Font font, LayoutedWidget ltWidget, WCharacterFormat charFormat, StringFormat format, String& text);
    private void FillHyphens(Font font, LayoutedWidget ltWidget, WCharacterFormat charFormat, StringFormat format, String& text);
    private void FillSpace(Font font, LayoutedWidget ltWidget, StringFormat format, String& text);
    internal void DrawSymbol(WSymbol symbol, LayoutedWidget ltWidget);
    internal void DrawPicture(WPicture picture, LayoutedWidget ltwidget);
    private IColorMatrix CreateColorMatrix(float b, float c, float s);
    private bool IsTableInTextBoxOrShape(Entity entity, bool checkTextBoxOnly);
    public RectangleF GetBoundingBoxCoordinates(RectangleF bounds, float angle);
    private RectangleF CalculateBoundingBox(PointF[] imageCoordinates);
    internal Matrix GetTransformMatrix(RectangleF bounds, float angle);
    private Matrix GetMatrixValuesFromSkia(Matrix matrix);
    private Stream GetManifestResourceStream(string fileName);
    private void DrawInlinePictureShape(WPicture picture, RectangleF bounds, SizeF size, IImage image);
    private IPen CreatePen(InlineShapeObject inlineShapeObject);
    private Color GetColorBorder(InlineShapeObject inlineShapeObject);
    private DashCap GetLineCap(LineCap lineCap);
    private LineJoin GetLineJoin(LineJoin lineJoin);
    private IPen GetPictureBorderPen(InlineShapeObject inlineShape, BorderCode borderCode, IPen pen);
    private IPen GetDashAndLineStyle(InlineShapeObject inlineShape, IPen pen);
    private IPen GetDashStyle(LineDashing lineDashing, IPen pen);
    private void CropImageBounds(WPicture picture, RectangleF& bounds, SizeF& size);
    private RectangleF CropPosition(WPicture picture, SizeF imageSize);
    internal void DrawEquationField(FontScriptType scriptType, LayoutedEQFields ltEQField, WCharacterFormat charFormat);
    private void DrawArraySwitch(FontScriptType scriptType, LayoutedEQFields ltEQField, WCharacterFormat charFormat, StringAlignment arraySwitchAlignment);
    private void DrawRadicalSwitch(FontScriptType scriptType, LayoutedEQFields ltEQField, WCharacterFormat charFormat);
    private void EnsureComplexScript(WCharacterFormat charFormat);
    private PointF[] GetDestinationPoints(RectangleF bounds, SizeF size, float leftBorderWidth, float topBorderWidth);
    private void AlignEqFieldSwitches(LayoutedEQFields ltEQField, float xPosition, float yPosition);
    internal void ShiftEqFieldXYPosition(LayoutedEQFields ltEQField, float xPosition, float yPosition);
    public void GenerateErrorFieldCode(LayoutedEQFields ltEQFiled, float xPosition, float yPosition, WCharacterFormat charFormat);
    public void ShiftEqFieldYPosition(LayoutedEQFields LayoutedEQFields, float yPosition);
    internal float GetTopMostY(LayoutedEQFields ltEQField, float minY);
    internal void DrawString(FontScriptType scriptType, string text, WCharacterFormat charFormat, WParagraphFormat paraFormat, RectangleF bounds, float clipWidth, LayoutedWidget ltWidget);
    private void Rotate(float ang, Boolean& flipV, Boolean& flipH, TextWrappingStyle textWrappingStyle, bool doNotRotateText, bool isNeedToScale, Boolean& isRotateTransformApplied, Single& rotationAngle);
    private void CheckPreOrNextSiblingIsTab(WCharacterFormat& charFormat, RectangleF& textBounds, LayoutedWidget ltWidget, Boolean& isSameLine);
    private List`1<RectangleF> CalculateTextBounds(string text, RectangleF textBounds, Font font, StringFormat format, WCharacterFormat charFormat, FontScriptType scriptType);
    private void AddLineToCollection(string text, bool isSubSuperScriptNone, Font font, WCharacterFormat charFormat, RectangleF textBounds, bool isSameLine, FontScriptType scriptType);
    private bool IsSameLine(float boundsRight, float boundsX, WCharacterFormat charFormat, WCharacterFormat preCharFormat, bool isPositionRaisedOrSuperScript);
    private bool IsSame(float value1, float value2, int digit);
    private bool HasUnderlineOrStricthrough(WTextRange txtRange, WCharacterFormat charFormat, FontScriptType scriptType);
    private bool IsContentControlHavingTextRange(InlineContentControl inlineContentControl);
    private Font GetPrivateFont(string fontName, float fontsize, FontStyle style);
    private bool IsTabWidget(LayoutedWidget ltWidget);
    private LayoutedWidget GetTextBoxWidget(LayoutedWidget ltWidget);
    private void ReverseString(String& text);
    private void DrawSmallCapString(FontScriptType scriptType, CharacterRangeType characterRangeType, string text, WCharacterFormat charFormat, RectangleF bounds, Font font, StringFormat format, IBrush textBrush, bool isCharacterSpacing);
    private bool IsTextNeedToClip(LayoutedWidget ltWidget);
    private bool IsWidgetNeedToClipBasedOnXPosition(LayoutedWidget ltWidget, Single& clipWidth, RectangleF bounds);
    public int GetColumnIndex(WSection section, RectangleF sectionBounds);
    private float GetClipTopPosition(RectangleF bounds, bool isInlinePicture);
    public Font GetDefaultFont(FontScriptType scriptType, Font font, WCharacterFormat charFormat);
    internal void DrawStringBasedOnCharSpacing(FontScriptType scriptType, CharacterRangeType characterRangeType, Font font, IBrush textBrush, RectangleF bounds, string text, StringFormat format, WCharacterFormat charFormat);
    private void TransformGraphicsPosition(LayoutedWidget ltWidget, bool isNeedToScale, Boolean& isRotateTransformApplied, PointF& translatePoints, Single& rotationAngle, WParagraph ownerParagraph);
    private void UpdateXYPosition(Single& xPosition, Single& yPosition, Entity entity, LayoutedWidget ltWidget);
    private LayoutedWidget GetOwnerCellLayoutedWidget(LayoutedWidget ltWidget);
    private float GetLayoutedTextBoxContentHeight(LayoutedWidget ltWidget);
    private float GetWidthToShiftVerticalText(VerticalAlignment verticalAlignment, float cellLayoutedHeight, float cellHeight);
    internal RectangleF GetClipBounds(RectangleF bounds, float clipWidth, float clipTop);
    private RectangleF UpdateClipBounds(RectangleF clipBounds, RectangleF ownerClipBounds);
    internal RectangleF UpdateClipBoundsBasedOnOwner(RectangleF clipBounds, RectangleF ownerClipBounds);
    private float GetCellHeightForVerticalText(Entity ent);
    private void DrawRTLText(FontScriptType scriptType, CharacterRangeType characterRangeType, string text, WCharacterFormat charFormat, Font font, IBrush textBrush, RectangleF bounds, StringFormat format);
    private void DrawChineseText(FontScriptType scriptType, CharacterRangeType characterRangeType, string text, WCharacterFormat charFormat, Font font, IBrush textBrush, RectangleF bounds, StringFormat format);
    private Font GetAlternateFontToMeasure(string text, Font font);
    internal Font GetAlternateFontToRender(string text, Font tempfont, WCharacterFormat charFormat);
    private bool IsContainsUnicodeCharOnly(string text);
    private bool IsInvalidCharacter(string text);
    private void DrawUnicodeText(FontScriptType scriptType, CharacterRangeType characterRangeType, string text, WCharacterFormat charFormat, Font font, IBrush textBrush, RectangleF bounds, StringFormat format);
    internal void DrawUnicodeString(FontScriptType scriptType, CharacterRangeType characterRangeType, string text, WCharacterFormat charFormat, Font font, IBrush textBrush, RectangleF bounds, StringFormat format);
    internal bool IsOwnerParagraphEmpty(string text);
    internal void DrawJustifiedLine(WTextRange txtRange, string text, WCharacterFormat charFormat, WParagraphFormat paraFormat, RectangleF bounds, LayoutedWidget ltWidget);
    private void RotateAndScaleTransform(RectangleF& bounds, RectangleF& clipBounds, float scaleFactor, PointF translatePoints, float rotationAngle, bool isListCharacter, bool flipV, bool flipH);
    private void ScaleTransformMatrix(float scaleFactor, PointF translatePoints, float rotationAngle, bool flipV, bool flipH);
    private void DrawParagraphBorders(WParagraph paragraph, WParagraphFormat paraFormat, LayoutedWidget ltWidget, bool isParagraphMarkIsHidden);
    private void DrawParagraphBorders(List`1<Border> borderRenderingOrder, RectangleF bounds, Borders borders, Borders previousBorder, WParagraph paragraph, LayoutedWidget ltWidget);
    private void DrawHorizontalBorder(List`1<Border> borderRenderingOrder, RectangleF bounds, Borders borders, Border border, bool isMultiLineLeftBorder, bool isMultiLineRightBorder, bool isMultiLineHorizontalBorder, float betweenBorderLineWidth, float leftBorderLineWidth, float rightBorderLineWidth, WParagraph paragraph, LayoutedWidget ltWidget);
    private void DrawLeftBorder(List`1<Border> borderRenderingOrder, RectangleF bounds, Borders borders, Border border, Borders previousBorder, bool isMultiLineTopBorder, bool isMultiLineBottomBorder, bool isMultiLineLeftBorder, bool isMultiLineHorizontalBorder, float leftBorderLineWidth, float topBorderLineWidth, float betweenBorderLineWidth, float bottomBorderLineWidth, WParagraph paragraph, LayoutedWidget ltWidget);
    private void DrawRightBorder(List`1<Border> borderRenderingOrder, RectangleF bounds, Borders borders, Border border, Borders previousBorder, bool isMultiLineTopBorder, bool isMultiLineHorizontalBorder, bool isMultiLineRightBorder, bool isMultiLineBottomBorder, float rightBorderLineWidth, float topBorderLineWidth, float betweenBorderLineWidth, float bottomBorderLineWidth, WParagraph paragraph, LayoutedWidget ltWidget);
    private void DrawTopBorder(List`1<Border> borderRenderingOrder, RectangleF bounds, Borders borders, Border border, bool isMultiLineTopBorder, float topBorderLineWidth, float leftBorderLineWidth, float rightBorderLineWidth);
    private void DrawBottomBorder(List`1<Border> borderRenderingOrder, RectangleF bounds, Borders borders, Border border, bool isMultiLineBottomBorder, float leftBorderLineWidth, float bottomBorderLineWidth, float rightBorderLineWidth, WParagraph paragraph, LayoutedWidget ltWidget);
    private float GetSpaceForBottomBorder(Entity entity);
    private void SortTwoBorders(List`1<Border> renderingOrderList, Border firstBorder, Border secondBorder, Borders borders, bool isLeftBorder);
    private void AddNextParagraphBounds(LayoutedWidget layoutedWidget, RectangleF& bounds);
    internal void DrawRevisionMark(PointF start, PointF end, Color lineColor, float lineWidth);
    private void DrawBorder(Border border, PointF start, PointF end);
    private void DrawParagraphBorder(Border border, PointF start, PointF end);
    private void DrawBorder(CellBorder border, PointF start, PointF end);
    internal virtual void DrawTable(WTable table, LayoutedWidget ltWidget);
    internal virtual void DrawTableRow(WTableRow row, LayoutedWidget ltWidget);
    internal virtual void DrawTableCell(WTableCell cell, LayoutedWidget ltWidget);
    private void FillCellColor(LayoutedWidget ltWidget);
    internal bool IsTexBoxHaveBackgroundPicture(WTextBox textbox);
    internal void DrawTextureStyle(TextureStyle textureStyle, Color foreColor, Color backColor, RectangleF bounds);
    private Color GetForeColor(Color foreColor, Color backColor, float percent);
    private int GetColorValue(int foreColorValue, int backColorValue, float percent, bool isForeColorEmpty, bool isBackColorEmpty);
    private void FillTexture(TextureStyle textureStyle, Color foreColor, Color backColor, RectangleF bounds);
    internal virtual void DrawCellBorders(WTableCell cell, LayoutedWidget ltWidget, float previousCellsTopBorderWidth);
    private void DrawMultiLineLeftBorder(CellLayoutInfo cellLayoutInfo, CellBorder leftBorder, PointF start, PointF end, bool isFirstRow, bool isLastRow, bool isFirstCell, bool isLastCell);
    private void DrawDoubleLineLeftBorder(CellLayoutInfo cellLayoutInfo, CellBorder leftBorder, PointF start, PointF end, bool isFirstRow, bool isLastRow, bool isFirstCell, bool isLastCell);
    private void DrawMultiLineRightBorder(CellLayoutInfo cellLayoutInfo, CellBorder rightBorder, PointF start, PointF end, bool isFirstRow, bool isLastRow, bool isFirstCell, bool isLastCell);
    private void DrawDoubleLineRightBorder(CellLayoutInfo cellLayoutInfo, CellBorder rightBorder, PointF start, PointF end, bool isFirstRow, bool isLastRow, bool isFirstCell, bool isLastCell);
    private void DrawMultiLineBottomBorder(CellLayoutInfo cellLayoutInfo, PointF start, PointF end, bool isBiDiTable);
    private void DrawDoubleLineBottomBorder(CellLayoutInfo cellLayoutInfo, PointF start, PointF end, bool isBiDiTable);
    private void DrawMultiLineTopBorder(CellLayoutInfo cellLayoutInfo, CellBorder topBorder, PointF start, PointF end, bool isStart, bool isEnd);
    private void DrawDoubleLineTopBorder(CellLayoutInfo cellLayoutInfo, CellBorder topBorder, PointF start, PointF end, bool isStart, bool isEnd);
    private bool IsMultiLineBorder(BorderStyle borderType);
    private bool IsMultiLineParagraphBorder(BorderStyle borderType);
    private Single[] GetBorderLineWidthArray(BorderStyle borderType, float lineWidth);
    private bool IsDoubleBorder(Border border);
    private void DrawMultiLineLeftBorder(Border leftBorder, PointF start, PointF end, bool isTopBorderSame, bool isBetweenBorderSame, bool isBottomBorderSame);
    private void DrawDoubleLineLeftBorder(Border leftBorder, PointF start, PointF end, bool isTopBorderSame, bool isBetweenBorderSame, bool isBottomBorderSame);
    private void DrawTripleLineLeftBorder(Border leftBorder, PointF start, PointF end, bool isTopBorderSame, bool isBetweenBorderSame, bool isBottomBorderSame);
    private void DrawMultiLineRightBorder(Border rightBorder, PointF start, PointF end, bool isTopBorderSame, bool isBetweenBorderSame, bool isBottomBorderSame);
    private void DrawDoubleLineRightBorder(Border rightBorder, PointF start, PointF end, bool isTopBorderSame, bool isBetweenBorderSame, bool isBottomBorderSame);
    private void DrawTripleLineRightBorder(Border rightBorder, PointF start, PointF end, bool isTopBorderSame, bool isBetweenBorderSame, bool isBottomBorderSame);
    private void DrawMultiLineTopBorder(Border topBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame);
    private void DrawDoubleLineTopBorder(Border topBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame);
    private void DrawTripleLineTopBorder(Border topBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame);
    private void DrawMultiLineBottomBorder(Border bottomBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame);
    private void DrawDoubleLineBottomBorder(Border bottomBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame);
    private void DrawDoubleLine(WCharacterFormat charFormat, BorderStyle borderType, float lineWidth, PointF start, PointF end);
    private void DrawTripleLineBottomBorder(Border bottomBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame);
    private void DrawMultiLineBetweenBorder(Border betweenBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame, Border leftBorder, Border rightBorder, bool isOverlapLeft, bool isOverlapRight);
    private void DrawDoubleLineBetweenBorder(Border betweenBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame, Border leftBorder, Border rightBorder, bool isOverlapLeft, bool isOverlapRight);
    private void DrawTripleLineBetweenBorder(Border betweenBorder, PointF start, PointF end, bool isLeftBorderSame, bool isRightBorderSame, Border leftBorder, Border rightBorder, bool isOverlapLeft, bool isOverlapRight);
    private float GetLeftRightLineWidht(Single[] lineArray, bool isLeft);
    internal void DrawBackgroundColor(Color bgColor, int width, int height);
    internal void DrawBackgroundImage(IImage image, WPageSetup pageSetup);
    internal void DrawWatermark(Watermark watermark, WPageSetup pageSetup, RectangleF bounds);
    internal void Draw(Page page);
    private List`1<KeyValuePair`2<string, bool>> GetPreviousLineCommentStartMark();
    private void DrawRoundedRectangle(IPen pen, RectangleF rect, Color fillColor);
    private void DrawMarkupTriangles(PointF position, Color revisionColor);
    private bool IsEmptyWaterMark(Watermark waterMark);
    private bool IsWaterMarkNeedToBeDraw(Page page, HeaderFooter headerFooter);
    private bool IsWaterMarkInParagraph(WParagraph paragraph, Page page);
    private bool IsWaterMarkInTable(WTable table, Page page);
    private bool IsWaterMarkOrderHasChanged(int OrderIndex, bool IsBelowText, Page page);
    internal void Draw(SplitWidgetContainer widget, LayoutedWidget layoutedWidget);
    private LayoutedWidgetList SortLayoutWidgetsWithXPosition(LayoutedWidgetList childWidgets);
    private void AlignChildWidgets(LayoutedWidget LastLine, WParagraph paragraph);
    internal void Draw(IWidgetContainer widget, LayoutedWidget ltWidget);
    internal virtual void DrawImpl(IWidgetContainer widget, LayoutedWidget ltWidget);
    internal void Draw(IWidget widget, LayoutedWidget layoutedWidget);
    private bool IsNeedToSkip(IWidget widget);
    internal void DrawPageBorder(int pageNumber, PageCollection pageCollection);
    internal void Draw(BookmarkStart bookmarkStart, LayoutedWidget ltWidget);
    private bool IsNeedToClip(RectangleF itemBounds);
    private Color GetHightLightColor(Color hightLightColor);
    internal bool IsTextRange(WParagraph paragraph);
    internal void Draw(LayoutedWidget layoutedWidget, bool isHaveToInitLayoutInfo);
    private void AddFloatingItemsOfTable(LayoutedWidget layoutedWidget);
    private void IterateChildElements(LayoutedWidget para_LtWidget);
    private void AddFloatingItemsInCollection(LayoutedWidget ltWidget);
    private float GetSpaceWidthAtEndFromText(WTextRange textRange, string text);
    private bool IsRTLParaLine(LayoutedWidget m_currChildLW);
    private bool HasTextRangeBidi(LayoutedWidgetList layoutedWidgets);
    private bool IsLineItemDrawn(LayoutedWidget ltWidget);
    private void DrawLine(Dictionary`2<WCharacterFormat, List`1<RectangleF>> underLineValues, Dictionary`2<WCharacterFormat, RectangleF> strikeThroughValues, LayoutedWidget ltWidget);
    private void TransformGraphics(WCharacterFormat characterFormat, Boolean& isNeedToScale, Boolean& isRotateTransformApplied, Boolean& isNeedToClip, LayoutedWidget ltWidget);
    private void GetTextboxOrShapesRotationValue(Single& ang, Boolean& flipH, Boolean& flipV, Boolean& doNotRotateText, TextWrappingStyle& textWrappingStyle, Boolean& hasCommentsHighlighter, WTextRange textRange);
    private bool IsNeedToChangeUnderLineWidth(string fontName);
    private void DrawUnderLine(WCharacterFormat characterFormat, RectangleF textBounds);
    private IGraphicsPath CreateWavyPath(WCharacterFormat characterFormat, RectangleF bounds, Font font);
    private void DrawStrikeThrough(WCharacterFormat characterFormat, RectangleF textBounds);
    private IPen CreatePen(WCharacterFormat charFormat, float lineWidth);
    private bool IsNeedToRemoveClipBounds(IWidget widget);
    private RectangleF TextboxClipBounds(WTable table, RectangleF clipBounds);
    private RectangleF UpdateClipBounds(RectangleF clipBounds, bool reverseClipping);
    private void SetClip(RectangleF clippingBounds);
    private void ResetClip();
    internal void ResetTransform();
    private void SetRotateTransform(RectangleF rotateBounds, float rotation, bool flipV, bool flipH);
    public void SetScaleTransform(float sx, float sy);
    private RectangleF GetClippingBounds(LayoutedWidget cellltWidget);
    private void Draw(WParagraph paragraph, LayoutedWidget ltWidget);
    private void DrawCommentHighlighter(LayoutedWidget ltWidget, WordDocument document);
    private KeyValuePair`2<string, bool> GetKeyValuePair(string inputKey, List`1<KeyValuePair`2<string, bool>> keyValuePairCollection);
    private bool ContainsKey(string inputKey, List`1<KeyValuePair`2<string, bool>> keyValuePairCollection);
    private void DrawCommentHighlighter(RevisionOptions revisionOptions, RectangleF bounds, bool isResolvedComment);
    private LayoutedWidget GetMaximumHeightWidget(LayoutedWidget ltWidget);
    private bool IsLinesInteresectWithFloatingItems(LayoutedWidget ltWidget, bool isLineContainer);
    private void DrawLineBackGroundColors(WParagraph paragraph, LayoutedWidget ltWidget);
    private List`1<RectangleF> GetBackGroundColorRenderingBounds(LayoutedWidget ltWidget, RectangleF remaingingBounds);
    private RectangleF FindFillColorBounds(Boolean& isNeedToFindFillColorRenderingBounds, RectangleF childItemBounds, List`1<RectangleF> intersectingBoundsCollection, RectangleF remaingingBounds);
    public RectangleF GetInnerItemsRenderingBounds(LayoutedWidget ltWidget);
    internal void Draw(SplitTableWidget splitTableWidget, LayoutedWidget layoutedWidget);
    private void Draw(BlockContentControl SDT, LayoutedWidget ltWidget);
    private void Draw(InlineContentControl SDT, LayoutedWidget ltWidget);
    private void Draw(WCommentMark commentMark, LayoutedWidget ltWidget);
    private void Draw(WAbsoluteTab absoluteTab, LayoutedWidget ltWidget);
    internal void Draw(WChart chart, LayoutedWidget ltWidget);
    internal void DrawChart(WChart chart, LayoutedWidget widget);
    internal void Draw(WCheckBox checkBox, LayoutedWidget ltWidget);
    internal void Draw(WDropDownFormField dropDownFormField, LayoutedWidget ltWidget);
    private void Draw(WField field, LayoutedWidget ltWidget);
    internal void Draw(WOleObject oleObject, LayoutedWidget ltWidget);
    internal void Draw(WPicture picture, LayoutedWidget ltWidget);
    internal void Draw(WSymbol symbol, LayoutedWidget ltWidget);
    private void Draw(WTable table, LayoutedWidget ltWidget);
    private LayoutedWidget GetFirstItemInFrame(LayoutedWidgetList layoutedWidgets, int index, WParagraphFormat originalFormat);
    private void Draw(WTableCell cell, LayoutedWidget ltWidget);
    private void Draw(WTableRow row, LayoutedWidget ltWidget);
    internal void Draw(WTextBox textBox, LayoutedWidget ltWidget);
    internal void Draw(WTextFormField textFormField, LayoutedWidget ltWidget);
    internal void Draw(LeafEmtyWidget leafEmtyWidget, LayoutedWidget layoutedWidget);
    internal void Draw(Shape shape, LayoutedWidget ltWidget);
    internal void Draw(ChildShape shape, LayoutedWidget ltWidget);
    internal void Draw(SplitStringWidget splitStringWidget, LayoutedWidget layoutedWidget);
    internal void Draw(WTextRange textRange, LayoutedWidget ltWidget);
    internal void Draw(IStringWidget stringWidget, LayoutedWidget ltWidget, string text);
    internal void DrawImpl(LayoutedWidget ltWidget);
    internal void DrawImpl(WFootnote footNote, LayoutedWidget ltWidget);
    private Entity GetOwnerLayoutedWidget(LayoutedWidget ltWidget);
    private WParagraph GetParagraphWidget(LayoutedWidget ltWidget);
    private WTableCell GetCellWidget(LayoutedWidget ltWidget);
    private bool IsOverLappedShapeWidget(LayoutedWidget ltWidget);
    private RectangleF UpdateWaterMarkPosition(ParagraphItem pItem, WPageSetup pageSetup, RectangleF bounds);
    private void DrawTextWatermark(TextWatermark textWatermark, RectangleF bounds, WPageSetup pageSetup);
    private IBitmap ConvertAsImage(TextWatermark textWatermark, Font font);
    private Color ChangeColorBrightness(Color color, float correctionFactor);
    internal void DrawPageBorder(WPageSetup pageSetup, RectangleF headerBounds, RectangleF footerBounds, RectangleF pageBounds);
    private PointF[] GetLeftBorderPoints(WPageSetup pageSetup, RectangleF headerBounds, RectangleF footerBounds, RectangleF pageBounds);
    private PointF[] GetRightBorderPoints(WPageSetup pageSetup, RectangleF headerBounds, RectangleF footerBounds, RectangleF pageBounds);
    private PointF[] GetBottomBorderPoints(WPageSetup pageSetup, RectangleF headerBounds, RectangleF footerBounds, RectangleF pageBounds);
    private PointF[] GetTopBorderPoints(WPageSetup pageSetup, RectangleF headerBounds, RectangleF footerBounds, RectangleF pageBounds);
    private float GetFontSize(TextWatermark textWatermark);
    private void AdjustPictureBrightnessAndContrast(IBitmap bmp, WPicture picture, IImageAttributes& imageAttributes, bool isWatermark);
    private void DrawImageWatermark(PictureWatermark pictureWatermark, RectangleF bounds, WPageSetup pageSetup);
    internal void DrawCheckBox(WCheckBox checkbox, LayoutedWidget ltWidget);
    internal void DrawShape(Shape shape, LayoutedWidget ltWidget);
    private void DrawPictureFill(ImageRecord imageRecord, IGraphicsPath path, RectangleF bounds, float transparency);
    private void ApplyImageTransparency(IImageAttributes imageAttributes, float transparency);
    private void DrawLineShapeBasedOnLineType(Shape shape, RectangleF bounds, IPen pen);
    private void DrawLineShapeBasedOnLineType(ChildShape shape, RectangleF bounds, IPen pen);
    private bool IsArrowPreserved(Shape shape);
    private bool IsArrowPreserved(ChildShape shape);
    internal void DrawChildShape(ChildShape childShape, LayoutedWidget ltWidget);
    private bool IsShapeNeedToBeFill(AutoShapeType shapeType);
    private void Rotate(ParagraphItem shapeFrame, float rotation, bool flipV, bool flipH, RectangleF rect);
    private Matrix GetTransformMatrix(RectangleF bounds, float ang, bool flipH, bool flipV);
    private IGraphicsPath GetGraphicsPath(Shape shape, RectangleF bounds, IPen& pen);
    private IGraphicsPath GetGraphicsPath(ChildShape shape, RectangleF bounds, IPen& pen);
    public SizeF MeasureImage(WPicture image);
    public SizeF MeasurePictureBulletSize(WPicture picture, Font font);
    public SizeF MeasureString(string text, Font font, StringFormat format, FontScriptType scriptType);
    public SizeF MeasureString(string text, Font font, StringFormat format, WCharacterFormat charFormat, bool isMeasureFromTabList, FontScriptType scriptType);
    public RectangleF GetExactStringBounds(string text, Font font);
    public SizeF MeasureString(string text, Font font, StringFormat format, WCharacterFormat charFormat, bool isMeasureFromTabList, bool isMeasureFromSmallCapString, FontScriptType scriptType);
    private float GetFactor(string fontName);
    public float GetSubSuperScriptFontSize(Font font);
    public float GetExceededLineHeightForArialUnicodeMSFont(Font fontExt, bool isAscent, FontScriptType scriptType);
    public SizeF MeasureString(string text, Font font, Font defaultFont, StringFormat format, WCharacterFormat charFormat, FontScriptType scriptType);
    private void MeasureSmallCapString(string text, SizeF& size, Font font, StringFormat format, WCharacterFormat charFormat, FontScriptType scriptType);
    private SizeF MeasureUnicodeString(string text, Font font, Font defaultFont, StringFormat format, WCharacterFormat charFormat, FontScriptType scriptType);
    public SizeF MeasureTextRange(WTextRange txtRange, string text);
    public float GetAscent(Font font, FontScriptType scriptType);
    public float GetDescent(Font font, FontScriptType scriptType);
    public void IntializeGraphics(WPageSetup pageSetup);
    public void DisposeGraphics();
    public void FillRectangle(Color color, Rectangle rectangle);
    public void MatrixTranslate(Matrix matrix, float x, float y, MatrixOrder matrixOrder);
    public void MatrixMultiply(Matrix matrix, Matrix target, MatrixOrder matrixOrder);
    private void MatrixRotate(Matrix matrix, float angle, PointF point, MatrixOrder matrixOrder);
    private IGraphicsPath CreateGraphicsPath();
    private IBitmap CreateBitmap(int width, int height);
    private IGraphics GetGraphicsFromImage(IBitmap bmp);
    private void DrawUnicodeString(string text, Font font, IBrush brush, RectangleF rectangle, StringFormat stringFormat, FontScriptType scriptType);
    private IImage GetImage(IImage image);
    private Byte[] GetImage(Byte[] imageBytes);
    private IImage CreateImageFromStream(MemoryStream stream);
    private IHatchBrush CreateHatchBrush(HatchStyle hatchstyle, Color foreColor, Color backColor);
    private IPen CreatePen(Color color);
    private IBitmap CreateBitmap();
    private IBrush CreateBrush(Color color);
    private IPen CreatePen(Color color, float width);
    private ISolidBrush CreateSolidBrush(Color color);
    private IColorMatrix CreateColorMatrix();
    private IColorMatrix CreateColorMatrix(Single[][] newColorMatrix);
    private IImageAttributes CreateImageAttributes();
    private void DrawArrowHead(ChildShape shape, IPen pen, RectangleF bounds, Boolean& isArrowHeadExist, IGraphicsPath& path, PointF[] linePoints);
    private void DrawArrowHead(Shape shape, IPen pen, RectangleF bounds, Boolean& isArrowHeadExist, IGraphicsPath& path, PointF[] linePoints);
    private void DrawOpenEndArrowHead(Shape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawOpenEndArrowHead(ChildShape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawCloseEndArrowHead(Shape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawStealthEndArrowHead(Shape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawCloseEndArrowHead(ChildShape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawStealthEndArrowHead(ChildShape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawOpenBeginArrowHead(Shape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawOpenBeginArrowHead(ChildShape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawCloseBeginArrowHead(Shape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawCloseBeginArrowHead(ChildShape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawStealthBeginArrowHead(Shape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void DrawStealthBeginArrowHead(ChildShape shape, IPen pen, RectangleF bounds, PointF[] linePoints, PointF& endPoint, Boolean& isArrowHeadExist, IGraphicsPath& path);
    private void AddCloseArrowHeadPoints(PointF[] points, IPen pen);
    private void AddStealthArrowHeadPoints(PointF[] points, IPen pen);
    private void AddOpenArrowHeadPoints(PointF[] points, IGraphicsPath& path);
    private void GetOpenArrowDefaultValues(LineFormat lineFormat, float lineWidth, Single& arrowLength, Single& arrowAngle, Single& adjustValue, bool isFromBeginArrow);
    private void GetCloseArrowDefaultValues(LineFormat lineFormat, float lineWidth, Single& arrowLength, Single& arrowAngle, Single& adjustValue, bool isFromBeginArrow);
    private LineEndLength GetArrowHeadLength(LineFormat lineFormat, bool isFromBeginArrow);
    private void GetCloseNarrowArrowDefaultValues(LineEndLength arrowHeadLength, float lineWidth, Single& arrowLength, Single& arrowAngle, Single& adjustValue);
    private void GetCloseMediumArrowDefaultValues(LineEndLength arrowHeadLength, float lineWidth, Single& arrowLength, Single& arrowAngle, Single& adjustValue);
    private void GetCloseWideArrowDefaultValues(LineEndLength arrowHeadLength, float lineWidth, Single& arrowLength, Single& arrowAngle, Single& adjustValue);
    private void GetOpenNarrowArrowDefaultValues(LineEndLength arrowHeadLength, float lineWidth, Single& arrowLength, Single& arrowAngle, Single& adjustValue);
    private void GetOpenMediumArrowDefaultValues(LineEndLength arrowHeadLength, float lineWidth, Single& arrowLength, Single& arrowAngle, Single& adjustValue);
    private void GetOpenWideArrowDefaultValues(LineEndLength arrowHeadLength, float lineWidth, Single& arrowLength, Single& arrowAngle, Single& adjustValue);
    private double FindAngleToLeftAndRightHeadPoint(bool isFlipHorizontal, bool isFlipVertical, float width, PointF point1, PointF point2, bool isFromBeginArrow);
    private double FindAngleToLeftAndRightHeadPoint(Shape shape, PointF point1, PointF point2, bool isFromBeginArrow);
    private double FindArrowHeadAngleRadians(PointF point1, PointF point2, bool isFromSeparateOrientation);
    private PointF FindBaseLineEndPoint(bool isFlipHorizontal, bool isFlipVertical, float width, float height, PointF[] linePoints, float adjustValue, bool isFromBeginArrow);
    private void GetEndPointForBaseLine(bool isFromBeginArrow, double degree, double length, float adjustValue, PointF[] linePoints, Single& x, Single& y);
    private double FindAngleRadians(PointF[] linePoints, bool isFromBottomToTop);
    private PointF[] FindArrowHeadPoints(Shape shape, IPen pen, RectangleF bounds, PointF[] linePoints, bool isFromOpenArrow, bool isFromBeginArrow);
    private PointF[] FindArrowHeadPoints(ChildShape shape, IPen pen, RectangleF bounds, PointF[] linePoints, bool isFromOpenArrow, bool isFromBeginArrow);
    private void FindLeftRightHeadPoints(bool isFlipHorizontal, bool isFlipVertical, float width, PointF[] linePoints, PointF[]& points, float arrowAngle, float arrowLength, bool isFromBeginArrow);
    private void ConstrucBasetLine(bool isFromBeginArrow, PointF points, PointF[] linePoints, PointF& point1, PointF& point2);
    private void GetArrowDefaultValues(LineFormat lineFormat, IPen pen, Single& arrowLength, Single& arrowAngle, Single& adjustValue, bool isFromOpenArrow, bool isFromBeginArrow);
    private double RadianToDegree(double angle);
    private double Degree2Radian(double a);
    private void GetEndPoint(double angle, float len, float start_x, float start_y, Single& end_x, Single& end_y);
    private PointF[] GetLinePointsBasedOnFlip(bool isFlipHorizontal, bool isFlipVertical, RectangleF bounds);
    private bool IsSoftHyphen(LayoutedWidget ltWidget);
    private StringFormat GetStringFormat(WCharacterFormat charFormat);
    private ISolidBrush GetBrush(Color color);
    public Color GetTextColor(WCharacterFormat charFormat);
    public Font GetFont(WTextRange txtRange, WCharacterFormat charFormat, string text);
    private Color GetRevisionColor(RevisionColor revisionColor);
    private Color GetRevisionColor(RevisionColor revisionColor, bool isInsertText);
    private Color GetRevisionColor(RevisionColor revisionColor, bool isInsertText, bool isResolvedComment);
    private Color GetRevisionFillColor(RevisionColor revisionColor, bool isResolvedComment);
    private void UpdateAlternateFont(WCharacterFormat charFormat, string fontName, Font& font);
    public bool IsTOC(WTextRange txtRange);
    internal bool ParagraphContainsTOC(WTextRange txtRange);
    internal bool ParagraphContainsHyperlink(Entity entity);
    internal bool isTOCParagraphInHyperLink(WTextRange txtRange);
    internal bool IsTextRangeFound(WField hyperLinkField, WTextRange textRange, Int32& index);
    public Font GetFont(FontScriptType scriptType, WCharacterFormat charFormat, string text);
    private Font UpdateBidiFont(FontScriptType scriptType, WCharacterFormat charFormat, Font font, float fontSize, FontStyle fontStyle);
    private Font CreateFont(WCharacterFormat characterFormat, string fontName, float fontSize, FontStyle fontStyle);
    private bool HasPrivateFont(string fontName);
    private StringAlignment GetStringAlignment(WParagraphFormat paraFormat);
    private IPen GetPen(Border border, bool isParagraphBorder);
    private IPen GetPen(BorderStyle borderType, float borderLineWidth, Color borderColor);
    private IPen GetPen(UnderlineStyle underlineStyle, float lineWidth, Color lineColor);
    private IImage ScaleImage(IImage srcImage, float width, float height);
    private void AddLinkToBookmark(RectangleF bounds, string bookmarkName, bool isTargetNull);
    private void CreateAndAddLinkToBookmark(RectangleF bounds, string bookmarkName, bool isTargetNull);
    private void AddHyperLink(Hyperlink hyperlink, RectangleF bounds);
    private void AddHyperLink(WPicture picture, LayoutedWidget ltwidget);
    private void UpdateBookmarkTargetBoundsAndPageNumber(BookmarkHyperlink bmhyperlink, string bmHyperlinkValue);
    private void UpdateTOCLevel(WParagraph paragraph, BookmarkHyperlink bookmark);
    public int GetSplitIndexByOffset(string text, ITextMeasurable measurer, double offset, bool bSplitByChar, bool bIsInCell, float clientWidth, float clientActiveAreaWidth, bool isSplitByCharacter);
    internal int UpdateResIndex(string text, ITextMeasurable measurer, int resIndex, bool bSplitByChar, bool bIsInCell, double offset, float clientWidth, float clientActiveAreaWidth, bool isSplitByCharacter);
    internal bool IsLeadingCharacter(char c);
    public bool IsBeginCharacter(char c);
    internal bool IsOverFlowCharacter(char c);
    public bool IsUnicodeText(string text);
    public Entity GetPreviousSibling(WTextRange textRange);
    public float GetCellWidth(ParagraphItem paraItem);
    internal string GetPdfFontCollectionKey(Font font, bool isUnicode);
    internal bool IsUnicode(string text);
    private int GetWordLength(string text, int startIndex);
    public void Close();
    internal void DrawBehindWidgets(LayoutedWidgetList behindWidgets, IWidget ownerWidget, int length, bool isHaveToInitLayoutInfo);
    internal int GetOrderIndex(IWidget widget);
    public float GetLineWidth(BorderCode border);
    public float GetLineWidth(WPicture picture);
}
internal class Syncfusion.DocIO.Rendering.MathRenderer : object {
    private DrawingContext m_drawingContext;
    internal DrawingContext DrawingContext { get; }
    internal MathRenderer(DrawingContext drawingContext);
    internal DrawingContext get_DrawingContext();
    internal void Draw(WMath math, LayoutedWidget ltWidget);
    internal void Draw(LayoutedOMathWidget layoutedOMathWidget);
    private void DrawDelimiterCharacter(LayoutedStringWidget delimiterCharacterWidget, float stretchableHeight, WCharacterFormat format);
    internal void Draw(LayoutedLineWidget lineWidget);
    private void Draw(LayoutedStringWidget stringWidget, WCharacterFormat characterFormat, float scalingFactor);
    internal void Dispose();
}
internal class Syncfusion.DocIO.Rendering.ShapePath : object {
    private RectangleF _rectBounds;
    private Dictionary`2<string, string> _shapeGuide;
    internal ShapePath(RectangleF bounds, Dictionary`2<string, string> shapeGuide);
    internal IGraphicsPath GetCurvedConnectorPath();
    internal IGraphicsPath GetCurvedConnector2Path();
    internal IGraphicsPath GetCurvedConnector4Path();
    internal IGraphicsPath GetCurvedConnector5Path();
    internal IGraphicsPath GetBentConnectorPath();
    internal IGraphicsPath GetBendConnector2Path();
    internal IGraphicsPath GetBentConnector4Path();
    internal IGraphicsPath GetBentConnector5Path();
    internal IGraphicsPath GetRoundedRectanglePath();
    internal IGraphicsPath GetSnipSingleCornerRectanglePath();
    internal IGraphicsPath GetSnipSameSideCornerRectanglePath();
    internal IGraphicsPath GetSnipDiagonalCornerRectanglePath();
    internal IGraphicsPath GetSnipAndRoundSingleCornerRectanglePath();
    internal IGraphicsPath GetRoundSingleCornerRectanglePath();
    internal IGraphicsPath GetRoundSameSideCornerRectanglePath();
    internal IGraphicsPath GetRoundDiagonalCornerRectanglePath();
    internal IGraphicsPath GetTrianglePath();
    internal IGraphicsPath GetParallelogramPath();
    internal IGraphicsPath GetTrapezoidPath();
    internal IGraphicsPath GetRegularPentagonPath();
    internal IGraphicsPath GetHexagonPath();
    internal IGraphicsPath GetHeptagonPath();
    internal IGraphicsPath GetOctagonPath();
    internal IGraphicsPath GetDecagonPath();
    internal IGraphicsPath GetDodecagonPath();
    internal IGraphicsPath GetPiePath();
    internal IGraphicsPath GetChordPath();
    internal IGraphicsPath GetTearDropPath();
    internal IGraphicsPath GetFramePath();
    internal IGraphicsPath GetHalfFramePath();
    internal IGraphicsPath GetL_ShapePath();
    internal IGraphicsPath GetDiagonalStripePath();
    internal IGraphicsPath GetCrossPath();
    internal IGraphicsPath GetPlaquePath();
    internal IGraphicsPath GetCanPath();
    internal IGraphicsPath GetCubePath();
    internal IGraphicsPath GetBevelPath();
    internal IGraphicsPath GetDonutPath(double lineWidth);
    internal IGraphicsPath GetNoSymbolPath();
    internal IGraphicsPath GetBlockArcPath();
    internal IGraphicsPath GetFoldedCornerPath();
    internal IGraphicsPath[] GetSmileyFacePath();
    internal IGraphicsPath GetHeartPath();
    internal IGraphicsPath GetLightningBoltPath();
    internal IGraphicsPath GetSunPath();
    internal IGraphicsPath GetMoonPath();
    internal IGraphicsPath GetCloudPath();
    internal IGraphicsPath[] GetArcPath();
    internal IGraphicsPath GetDoubleBracketPath();
    internal IGraphicsPath GetDoubleBracePath();
    internal IGraphicsPath GetLeftBracketPath();
    internal IGraphicsPath GetRightBracketPath();
    internal IGraphicsPath GetLeftBracePath();
    internal IGraphicsPath GetRightBracePath();
    internal IGraphicsPath GetRightArrowPath();
    internal IGraphicsPath GetLeftArrowPath();
    internal IGraphicsPath GetUpArrowPath();
    internal IGraphicsPath GetDownArrowPath();
    internal IGraphicsPath GetLeftRightArrowPath();
    internal IGraphicsPath GetCurvedRightArrowPath();
    internal IGraphicsPath GetCurvedLeftArrowPath();
    internal IGraphicsPath GetCurvedUpArrowPath();
    internal IGraphicsPath GetCurvedDownArrowPath();
    internal IGraphicsPath GetUpDownArrowPath();
    internal IGraphicsPath GetQuadArrowPath();
    internal IGraphicsPath GetLeftRightUpArrowPath();
    internal IGraphicsPath GetBentArrowPath();
    internal IGraphicsPath GetUTrunArrowPath();
    internal IGraphicsPath GetLeftUpArrowPath();
    internal IGraphicsPath GetBentUpArrowPath();
    internal IGraphicsPath GetStripedRightArrowPath();
    internal IGraphicsPath GetNotchedRightArrowPath();
    internal IGraphicsPath GetPentagonPath();
    internal IGraphicsPath GetChevronPath();
    internal IGraphicsPath GetRightArrowCalloutPath();
    internal IGraphicsPath GetDownArrowCalloutPath();
    internal IGraphicsPath GetLeftArrowCalloutPath();
    internal IGraphicsPath GetUpArrowCalloutPath();
    internal IGraphicsPath GetLeftRightArrowCalloutPath();
    internal IGraphicsPath GetQuadArrowCalloutPath();
    internal IGraphicsPath GetCircularArrowPath();
    internal IGraphicsPath GetMathPlusPath();
    internal IGraphicsPath GetMathMinusPath();
    internal IGraphicsPath GetMathMultiplyPath();
    internal IGraphicsPath GetMathDivisionPath();
    internal IGraphicsPath GetMathEqualPath();
    internal IGraphicsPath GetMathNotEqualPath();
    internal IGraphicsPath GetFlowChartAlternateProcessPath();
    internal IGraphicsPath GetFlowChartPredefinedProcessPath();
    internal IGraphicsPath GetFlowChartInternalStoragePath();
    internal IGraphicsPath GetFlowChartDocumentPath();
    internal IGraphicsPath GetFlowChartMultiDocumentPath();
    internal IGraphicsPath GetFlowChartTerminatorPath();
    internal IGraphicsPath GetFlowChartPreparationPath();
    internal IGraphicsPath GetFlowChartManualInputPath();
    internal IGraphicsPath GetFlowChartManualOperationPath();
    internal IGraphicsPath GetFlowChartConnectorPath();
    internal IGraphicsPath GetFlowChartOffPageConnectorPath();
    internal IGraphicsPath GetFlowChartCardPath();
    internal IGraphicsPath GetFlowChartPunchedTapePath();
    internal IGraphicsPath GetFlowChartSummingJunctionPath();
    internal IGraphicsPath GetFlowChartOrPath();
    internal IGraphicsPath GetFlowChartCollatePath();
    internal IGraphicsPath GetFlowChartSortPath();
    internal IGraphicsPath GetFlowChartExtractPath();
    internal IGraphicsPath GetFlowChartMergePath();
    internal IGraphicsPath GetFlowChartOnlineStoragePath();
    internal IGraphicsPath GetFlowChartDelayPath();
    internal IGraphicsPath GetFlowChartSequentialAccessStoragePath();
    internal IGraphicsPath GetFlowChartMagneticDiskPath();
    internal IGraphicsPath GetFlowChartDirectAccessStoragePath();
    internal IGraphicsPath GetFlowChartDisplayPath();
    internal IGraphicsPath GetExplosion1();
    internal IGraphicsPath GetExplosion2();
    internal IGraphicsPath GetStar4Point();
    internal IGraphicsPath GetStar5Point();
    internal IGraphicsPath GetStar6Point();
    internal IGraphicsPath GetStar7Point();
    internal IGraphicsPath GetStar8Point();
    internal IGraphicsPath GetStar10Point();
    internal IGraphicsPath GetStar12Point();
    internal IGraphicsPath GetStar16Point();
    internal IGraphicsPath GetStar24Point();
    internal IGraphicsPath GetStar32Point();
    internal IGraphicsPath GetUpRibbon();
    internal IGraphicsPath GetDownRibbon();
    internal IGraphicsPath GetCurvedUpRibbon();
    internal IGraphicsPath GetCurvedDownRibbon();
    internal IGraphicsPath GetVerticalScroll();
    internal IGraphicsPath[] GetHorizontalScroll();
    internal IGraphicsPath GetWave();
    internal IGraphicsPath GetDoubleWave();
    internal IGraphicsPath GetRectangularCalloutPath();
    internal IGraphicsPath GetRoundedRectangularCalloutPath();
    internal IGraphicsPath GetOvalCalloutPath();
    internal IGraphicsPath GetCloudCalloutPath();
    internal IGraphicsPath GetLineCallout1Path();
    internal IGraphicsPath GetLineCallout2Path();
    internal IGraphicsPath GetLineCallout3Path();
    internal IGraphicsPath GetLineCallout1AccentBarPath();
    internal IGraphicsPath GetLineCallout2AccentBarPath();
    internal IGraphicsPath GetLineCallout3AccentBarPath();
    internal IGraphicsPath GetLineCallout1NoBorderPath();
    internal IGraphicsPath GetLineCallout2NoBorderPath();
    internal IGraphicsPath GetLineCallout3NoBorderPath();
    internal IGraphicsPath GetLineCallout1BorderAndAccentBarPath();
    internal IGraphicsPath GetLineCallout2BorderAndAccentBarPath();
    internal IGraphicsPath GetLineCallout3BorderAndAccentBarPath();
    internal IGraphicsPath GetVMLCustomShapePath(List`1<Path2D> path2DPoints);
    internal IGraphicsPath GetCustomGeomentryPath(RectangleF bounds, IGraphicsPath path, Shape shape);
    private void GetGeomentryPath(IGraphicsPath path, List`1<double> pathElements, double pathWidth, double pathHeight, RectangleF bounds);
    private float GetGeomentryPathXValue(double pathWidth, double x, RectangleF bounds);
    private float GetGeomentryPathYValue(double pathHeight, double y, RectangleF bounds);
    private void ConvertPathElement(string pathElement, List`1<double> pathElements, Dictionary`2<string, string> combinedValues, Path2D path, Dictionary`2<string, float> calculatedValues);
    private IGraphicsPath GetGraphicsPath();
    private float GetDegreeValue(float value);
    private PointF GetXYPosition(float xDifference, float yDifference, float positionRatio);
    private Dictionary`2<string, float> GetPathAdjustValue(AutoShapeType shapeType);
    public Dictionary`2<string, float> ParseShapeFormula(AutoShapeType shapeType);
    private Dictionary`2<string, float> GetFormulaValues(AutoShapeType shapeType, Dictionary`2<string, string> formulaColl, bool isAdjValue);
    private Single[] GetOperandValues(AutoShapeType shapeType, Dictionary`2& formulaValues, String[] splitFormula, bool isAdjValue);
    private float GetPresetOperandValue(string operand);
    private float GetResultValue(string formula, Single[] operandValues);
    private Dictionary`2<string, string> GetShapeFormula(AutoShapeType shapeType);
    private Dictionary`2<string, float> GetDefaultPathAdjValues(AutoShapeType shapeType);
    internal void Close();
}
internal class Syncfusion.DocIO.Rendering.SortByColorBrightness : object {
    public sealed virtual int Compare(Border firstBorder, Border secondBorder);
}
public enum Syncfusion.DocIO.ShapeHorizontalAlignment : Enum {
    public int value__;
    public static ShapeHorizontalAlignment None;
    public static ShapeHorizontalAlignment Left;
    public static ShapeHorizontalAlignment Center;
    public static ShapeHorizontalAlignment Right;
    public static ShapeHorizontalAlignment Inside;
    public static ShapeHorizontalAlignment Outside;
}
public enum Syncfusion.DocIO.ShapeVerticalAlignment : Enum {
    public int value__;
    public static ShapeVerticalAlignment Bottom;
    public static ShapeVerticalAlignment Center;
    public static ShapeVerticalAlignment Inline;
    public static ShapeVerticalAlignment Inside;
    public static ShapeVerticalAlignment None;
    public static ShapeVerticalAlignment Outside;
    public static ShapeVerticalAlignment Top;
}
internal class Syncfusion.DocIO.SpecialCharacters : object {
    public static char ParagraphEnd;
    public static char PageBreak;
    public static char ColumnBreak;
    public static char TableAscii;
    public static char ImageAscii;
    public static char ShapeAscii;
    public static char FootnoteAscii;
    public static char FieldBeginMark;
    public static char FieldEndMark;
    public static char FieldSeparator;
    public static char TabAscii;
    public static char LineBreakAscii;
    public static char SymbolAscii;
    public static char AnnotationAscii;
    public static char CurrPageNumber;
    public static string FootnoteAsciiStr;
    public static string PageBreakStr;
    internal static char NonBreakingHyphen;
    internal static char SoftHyphen;
    internal static char NonBreakingSpace;
    internal static char Separator;
    internal static char ContinuationSeparator;
    public static Char[] SpecialSymbolArr;
    private static SpecialCharacters();
}
internal class Syncfusion.DocIO.StreamReadException : Exception {
    private static string DEF_MESSAGE;
    internal StreamReadException(Exception innerExc);
    internal StreamReadException(string message);
    internal StreamReadException(string message, Exception innerExc);
}
internal class Syncfusion.DocIO.StreamWriteException : Exception {
    private static string DEF_MESSAGE;
    internal StreamWriteException(string message);
}
internal enum Syncfusion.DocIO.TextboxTightWrapOptions : Enum {
    public int value__;
    public static TextboxTightWrapOptions None;
    public static TextboxTightWrapOptions AllLines;
    public static TextboxTightWrapOptions FirstAndLastLine;
    public static TextboxTightWrapOptions FirstLineOnly;
    public static TextboxTightWrapOptions LastLineOnly;
}
public enum Syncfusion.DocIO.TextEffect : Enum {
    public int value__;
    public static TextEffect None;
    public static TextEffect LasVegasLights;
    public static TextEffect BlinkingBackground;
    public static TextEffect SparkleText;
    public static TextEffect MarchingBlackAnts;
    public static TextEffect MarchingRedAnts;
    public static TextEffect Shimmer;
}
public enum Syncfusion.DocIO.TextFormFieldType : Enum {
    public int value__;
    public static TextFormFieldType RegularText;
    public static TextFormFieldType NumberText;
    public static TextFormFieldType DateText;
    public static TextFormFieldType CurrentDateText;
    public static TextFormFieldType CurrentTimeText;
    public static TextFormFieldType Calculation;
}
public enum Syncfusion.DocIO.TextureStyle : Enum {
    public int value__;
    public static TextureStyle Texture10Percent;
    public static TextureStyle Texture12Pt5Percent;
    public static TextureStyle Texture15Percent;
    public static TextureStyle Texture17Pt5Percent;
    public static TextureStyle Texture20Percent;
    public static TextureStyle Texture22Pt5Percent;
    public static TextureStyle Texture25Percent;
    public static TextureStyle Texture27Pt5Percent;
    public static TextureStyle Texture2Pt5Percent;
    public static TextureStyle Texture30Percent;
    public static TextureStyle Texture32Pt5Percent;
    public static TextureStyle Texture35Percent;
    public static TextureStyle Texture37Pt5Percent;
    public static TextureStyle Texture40Percent;
    public static TextureStyle Texture42Pt5Percent;
    public static TextureStyle Texture45Percent;
    public static TextureStyle Texture47Pt5Percent;
    public static TextureStyle Texture50Percent;
    public static TextureStyle Texture52Pt5Percent;
    public static TextureStyle Texture55Percent;
    public static TextureStyle Texture57Pt5Percent;
    public static TextureStyle Texture5Percent;
    public static TextureStyle Texture60Percent;
    public static TextureStyle Texture62Pt5Percent;
    public static TextureStyle Texture65Percent;
    public static TextureStyle Texture67Pt5Percent;
    public static TextureStyle Texture70Percent;
    public static TextureStyle Texture72Pt5Percent;
    public static TextureStyle Texture75Percent;
    public static TextureStyle Texture77Pt5Percent;
    public static TextureStyle Texture7Pt5Percent;
    public static TextureStyle Texture80Percent;
    public static TextureStyle Texture82Pt5Percent;
    public static TextureStyle Texture85Percent;
    public static TextureStyle Texture87Pt5Percent;
    public static TextureStyle Texture90Percent;
    public static TextureStyle Texture92Pt5Percent;
    public static TextureStyle Texture95Percent;
    public static TextureStyle Texture97Pt5Percent;
    public static TextureStyle TextureCross;
    public static TextureStyle TextureDarkCross;
    public static TextureStyle TextureDarkDiagonalCross;
    public static TextureStyle TextureDarkDiagonalDown;
    public static TextureStyle TextureDarkDiagonalUp;
    public static TextureStyle TextureDarkHorizontal;
    public static TextureStyle TextureDarkVertical;
    public static TextureStyle TextureDiagonalCross;
    public static TextureStyle TextureDiagonalDown;
    public static TextureStyle TextureDiagonalUp;
    public static TextureStyle TextureHorizontal;
    public static TextureStyle TextureNone;
    public static TextureStyle TextureSolid;
    public static TextureStyle TextureVertical;
    public static TextureStyle TextureNil;
}
public abstract class Syncfusion.DocIO.Utilities.DocIOEncoding : object {
    private static Int32[] m_charCodeTable;
    private static DocIOEncoding();
    public static string GetString(Byte[] bytes);
}
public enum Syncfusion.DocIO.VerticalPosition : Enum {
    public int value__;
    public static VerticalPosition None;
    public static VerticalPosition Top;
    public static VerticalPosition Center;
    public static VerticalPosition Bottom;
    public static VerticalPosition Inside;
    public static VerticalPosition Outside;
}
public enum Syncfusion.DocIO.VerticalRelation : Enum {
    public int value__;
    public static VerticalRelation Margin;
    public static VerticalRelation Page;
    public static VerticalRelation Paragraph;
}
[CLSCompliantAttribute("False")]
internal abstract class Syncfusion.DocIO.WordRWAdapterBase : object {
    protected IWordReader m_mainReader;
    protected IWordWriter m_mainWriter;
    protected int m_textPos;
    protected void Read(IWordReader reader);
    protected virtual void ReadBody(IWordReader reader);
    protected abstract virtual void ReadHFBody(IWordReader reader);
    protected abstract virtual void ReadTextBoxBody(WordSubdocumentReader txbxReader, int txbxIndex);
    protected virtual void ReadChunk(IWordReaderBase baseReader);
    protected virtual void ReadChunkBase(IWordReaderBase reader);
    protected abstract virtual void ReadSubDocumentBody(IWordReaderBase reader, WordSubdocument subDocument);
    protected abstract virtual void ReadChunkBefore(IWordReaderBase reader);
    protected abstract virtual void ReadPageBreak(IWordReader reader);
    protected abstract virtual void ReadBreak(IWordReader reader, BreakType breakType);
    protected abstract virtual void ReadSectionEnd(IWordReader reader);
    protected abstract virtual void ReadField(IWordReaderBase reader);
    protected abstract virtual void ReadTable(IWordReaderBase reader);
    protected abstract virtual void ReadTableRow(IWordReaderBase reader);
    protected abstract virtual void ReadTableCell(IWordReaderBase reader);
    protected abstract virtual void ReadImage(IWordReaderBase reader);
    protected abstract virtual void ReadParagraphEnd(IWordReaderBase reader);
    protected abstract virtual void ReadText(IWordReaderBase reader);
    protected abstract virtual void ReadStyleSheet(IWordReader reader);
    protected abstract virtual void ReadLineBreak(IWordReaderBase reader);
    protected abstract virtual void ReadShape(IWordReaderBase reader);
    protected abstract virtual void ReadTextBoxShape(IWordReaderBase reader, TextBoxShape txtShape);
    protected abstract virtual void ReadImageShape(IWordReaderBase reader, PictureShape imageShape);
    protected abstract virtual void ReadShapeObjectsBody(IWordReader reader);
    protected abstract virtual void ReadSymbol(IWordReaderBase reader);
    protected abstract virtual void ReadFieldEnd(IWordReaderBase reader);
    protected abstract virtual void ReadCurrentPageNumber(IWordReaderBase reader);
    protected abstract virtual void ReadAnnotationBody(IWordReaderBase reader);
    protected abstract virtual void ReadAnnotation(IWordReader reader);
    protected abstract virtual void ReadFootnoteBody(IWordReaderBase reader);
    protected abstract virtual void ReadFootnote(IWordReader reader);
    protected abstract virtual void ReadFootnoteMarker(IWordReaderBase reader);
}
public enum Syncfusion.DocIO.WrapMode : Enum {
    public int value__;
    public static WrapMode Square;
    public static WrapMode ByPoints;
    public static WrapMode None;
    public static WrapMode TopBottom;
    public static WrapMode Through;
}
public enum Syncfusion.DocIO.ZoomType : Enum {
    public int value__;
    public static ZoomType None;
    public static ZoomType FullPage;
    public static ZoomType PageWidth;
    public static ZoomType TextFit;
}
internal class Syncfusion.Layouting.CellLayoutInfo : LayoutInfo {
    private WTableCell m_cell;
    private VerticalAlignment m_verticalAlignment;
    private byte m_bFlags;
    private Spacings m_paddings;
    private Spacings m_margins;
    private RectangleF m_cellContentLayoutingBounds;
    private byte m_bFlags1;
    private float m_topPadding;
    private float m_updatedTopPadding;
    private float m_bottomPadding;
    private Dictionary`2<CellBorder, float> m_updatedTopBorders;
    private Dictionary`2<CellBorder, float> m_updatedSplittedTopBorders;
    private CellBorder m_topBorder;
    private CellBorder m_bottomBorder;
    private CellBorder m_leftBorder;
    private CellBorder m_rightBorder;
    private CellBorder m_prevCellTopBorder;
    private CellBorder m_nextCellTopBorder;
    private CellBorder m_prevCellBottomBorder;
    private CellBorder m_nextCellBottomBorder;
    internal bool IsColumnMergeStart { get; internal set; }
    internal bool IsColumnMergeContinue { get; internal set; }
    internal bool IsRowMergeStart { get; internal set; }
    internal bool IsRowMergeContinue { get; internal set; }
    internal bool IsRowMergeEnd { get; internal set; }
    internal VerticalAlignment VerticalAlignment { get; internal set; }
    internal RectangleF CellContentLayoutingBounds { get; internal set; }
    internal bool SkipTopBorder { get; internal set; }
    internal bool SkipBottomBorder { get; internal set; }
    internal bool SkipLeftBorder { get; internal set; }
    internal bool SkipRightBorder { get; internal set; }
    internal float TopPadding { get; internal set; }
    internal float UpdatedTopPadding { get; internal set; }
    internal float BottomPadding { get; internal set; }
    internal CellBorder TopBorder { get; internal set; }
    internal CellBorder BottomBorder { get; internal set; }
    internal CellBorder LeftBorder { get; internal set; }
    internal CellBorder RightBorder { get; internal set; }
    internal Dictionary`2<CellBorder, float> UpdatedTopBorders { get; }
    internal Dictionary`2<CellBorder, float> UpdatedSplittedTopBorders { get; internal set; }
    internal CellBorder PrevCellTopBorder { get; }
    internal CellBorder NextCellTopBorder { get; internal set; }
    internal CellBorder PrevCellBottomBorder { get; internal set; }
    internal CellBorder NextCellBottomBorder { get; internal set; }
    internal bool IsCellHasEndNote { get; internal set; }
    internal bool IsCellHasFootNote { get; internal set; }
    public Spacings Paddings { get; }
    public Spacings Margins { get; }
    public CellLayoutInfo(WTableCell cell);
    internal bool get_IsColumnMergeStart();
    internal void set_IsColumnMergeStart(bool value);
    internal bool get_IsColumnMergeContinue();
    internal void set_IsColumnMergeContinue(bool value);
    internal bool get_IsRowMergeStart();
    internal void set_IsRowMergeStart(bool value);
    internal bool get_IsRowMergeContinue();
    internal void set_IsRowMergeContinue(bool value);
    internal bool get_IsRowMergeEnd();
    internal void set_IsRowMergeEnd(bool value);
    internal VerticalAlignment get_VerticalAlignment();
    internal void set_VerticalAlignment(VerticalAlignment value);
    internal RectangleF get_CellContentLayoutingBounds();
    internal void set_CellContentLayoutingBounds(RectangleF value);
    internal bool get_SkipTopBorder();
    internal void set_SkipTopBorder(bool value);
    internal bool get_SkipBottomBorder();
    internal void set_SkipBottomBorder(bool value);
    internal bool get_SkipLeftBorder();
    internal void set_SkipLeftBorder(bool value);
    internal bool get_SkipRightBorder();
    internal void set_SkipRightBorder(bool value);
    internal float get_TopPadding();
    internal void set_TopPadding(float value);
    internal float get_UpdatedTopPadding();
    internal void set_UpdatedTopPadding(float value);
    internal float get_BottomPadding();
    internal void set_BottomPadding(float value);
    internal CellBorder get_TopBorder();
    internal void set_TopBorder(CellBorder value);
    internal CellBorder get_BottomBorder();
    internal void set_BottomBorder(CellBorder value);
    internal CellBorder get_LeftBorder();
    internal void set_LeftBorder(CellBorder value);
    internal CellBorder get_RightBorder();
    internal void set_RightBorder(CellBorder value);
    internal Dictionary`2<CellBorder, float> get_UpdatedTopBorders();
    internal Dictionary`2<CellBorder, float> get_UpdatedSplittedTopBorders();
    internal void set_UpdatedSplittedTopBorders(Dictionary`2<CellBorder, float> value);
    internal CellBorder get_PrevCellTopBorder();
    internal CellBorder get_NextCellTopBorder();
    internal void set_NextCellTopBorder(CellBorder value);
    internal CellBorder get_PrevCellBottomBorder();
    internal void set_PrevCellBottomBorder(CellBorder value);
    internal CellBorder get_NextCellBottomBorder();
    internal void set_NextCellBottomBorder(CellBorder value);
    internal bool get_IsCellHasEndNote();
    internal void set_IsCellHasEndNote(bool value);
    internal bool get_IsCellHasFootNote();
    internal void set_IsCellHasFootNote(bool value);
    public sealed virtual Spacings get_Paddings();
    public sealed virtual Spacings get_Margins();
    internal void InitMerges();
    private bool IsCellVerticallyMerged(float cellStartPos, float cellWidth, int adjRowIndex, bool checkMergeEnd, bool checkMergeStart);
    internal void InitSpacings();
    private bool IsTableHavePadding(Paddings padding);
    private float GetLeftHalfWidth(int cellIndex);
    private float GetRightHalfWidth(int cellIndex, int cellLast);
    private void GetBottomHalfWidth(int cellIndex, int cellLast, int rowIndex, int rowLast);
    internal float GetTopHalfWidth(int cellIndex, int rowIndex, WTableCell m_cell, int previousRowIndex);
    internal List`1<WTableCell> GetAdjacentRowCell(float cellStartPos, float cellEndPos, int rowIndex);
    internal void InitLayoutInfo();
}
internal enum Syncfusion.Layouting.ChildrenLayoutDirection : Enum {
    public int value__;
    public static ChildrenLayoutDirection Horizontal;
    public static ChildrenLayoutDirection Vertical;
}
internal class Syncfusion.Layouting.CommentsMarkups : TrackChangesMarkups {
    private WComment m_comment;
    private float m_extraSpacing;
    internal WComment Comment { get; }
    internal string CommentID { get; }
    internal float ExtraSpacing { get; internal set; }
    internal CommentsMarkups(WordDocument wordDocument, WComment comment);
    internal WComment get_Comment();
    internal string get_CommentID();
    internal float get_ExtraSpacing();
    internal void set_ExtraSpacing(float value);
    private string GetBalloonValueForComments();
    internal void AppendInCommentsBalloon();
    private void ApplyCommentsProperties(float fontSize);
}
internal class Syncfusion.Layouting.EquationField : object {
    private WField m_eqFieldEntity;
    private LayoutedEQFields m_layouttedEQField;
    internal WField EQFieldEntity { get; internal set; }
    internal LayoutedEQFields LayouttedEQField { get; internal set; }
    internal WField get_EQFieldEntity();
    internal void set_EQFieldEntity(WField value);
    internal LayoutedEQFields get_LayouttedEQField();
    internal void set_LayouttedEQField(LayoutedEQFields value);
}
internal class Syncfusion.Layouting.Exceptions.InvalidLayoutStateException : LayoutException {
    private static string DEF_MESSAGE;
    public InvalidLayoutStateException(Exception innerExc);
    public InvalidLayoutStateException(string message);
    public InvalidLayoutStateException(string message, Exception innerExc);
}
internal class Syncfusion.Layouting.Exceptions.LayoutException : ApplicationException {
    private static string DEF_MESSAGE;
    public LayoutException(Exception innerExc);
    public LayoutException(string message);
    public LayoutException(string message, Exception innerExc);
}
internal class Syncfusion.Layouting.FieldLayoutInfo : LayoutInfo {
    public FieldLayoutInfo(ChildrenLayoutDirection childLayoutDirection);
}
internal class Syncfusion.Layouting.FloatingItem : object {
    private RectangleF m_textWrappingBounds;
    private Entity m_FloatingEntity;
    private List`1<Entity> m_frameEntities;
    private int m_wrapcollectionindex;
    private byte m_bFlags;
    internal RectangleF TextWrappingBounds { get; internal set; }
    internal Entity FloatingEntity { get; internal set; }
    internal List`1<Entity> FrameEntities { get; internal set; }
    internal TextWrappingStyle TextWrappingStyle { get; }
    internal TextWrappingType TextWrappingType { get; }
    internal WParagraph OwnerParagraph { get; }
    internal bool AllowOverlap { get; }
    internal bool LayoutInCell { get; }
    internal int WrapCollectionIndex { get; internal set; }
    internal bool IsFloatingItemFit { get; internal set; }
    internal bool IsDoesNotDenotesRectangle { get; internal set; }
    internal RectangleF get_TextWrappingBounds();
    internal void set_TextWrappingBounds(RectangleF value);
    internal Entity get_FloatingEntity();
    internal void set_FloatingEntity(Entity value);
    internal List`1<Entity> get_FrameEntities();
    internal void set_FrameEntities(List`1<Entity> value);
    internal TextWrappingStyle get_TextWrappingStyle();
    internal TextWrappingType get_TextWrappingType();
    internal WParagraph get_OwnerParagraph();
    internal bool get_AllowOverlap();
    internal bool get_LayoutInCell();
    internal int get_WrapCollectionIndex();
    internal void set_WrapCollectionIndex(int value);
    internal bool get_IsFloatingItemFit();
    internal void set_IsFloatingItemFit(bool value);
    internal bool get_IsDoesNotDenotesRectangle();
    internal void set_IsDoesNotDenotesRectangle(bool value);
    internal static void SortFloatingItems(List`1<FloatingItem> floatingItems, SortPosition sortPosition, bool isNeedToUpdateWrapCollectionIndex);
    internal static bool IsYPositionIntersect(RectangleF floatingItemBounds, RectangleF currentItemBounds);
    internal static void SortSameYPostionFloatingItems(List`1<FloatingItem> floatingItems, SortPosition sortPosition);
    internal static void SortIntersectedYPostionFloatingItems(List`1<FloatingItem> floatingItems, SortPosition sortPosition);
    internal static void UpdateWrapCollectionIndex(List`1<FloatingItem> floatingItems, int sortItemIndex, int indexToBeInserted);
    internal static void SortXYPostionFloatingItems(List`1<FloatingItem> floatingItems, RectangleF rect, SizeF size);
    internal static bool IsYPositionIntersect(RectangleF floatingItemBounds, RectangleF currentItemBounds, float height);
    private static bool IsNeedTobeChangeSortedItem(SortPosition SortPosition, RectangleF firstItem, RectangleF secondItem);
    internal static RectangleF GetIntersectingItemBounds(Layouter m_lcOperator, FloatingItem intersectedFloatingItem, float yPosition);
    internal static List`1<FloatingItem> GetIntersectingFloatingItems(Layouter m_lcOperator, FloatingItem intersectedFloatingItem, float yPosition);
    internal static FloatingItem GetMinBottomFloatingItem(List`1<FloatingItem> fItems);
}
internal class Syncfusion.Layouting.FontMetric : object {
    public double Ascent(Font font, FontScriptType scriptType);
    public double Descent(Font font, FontScriptType scriptType);
}
internal class Syncfusion.Layouting.FootnoteLayoutInfo : LayoutInfo {
    private string m_footnoteID;
    private WTextRange m_textRange;
    private float m_height;
    private float m_endnoteheight;
    internal float FootnoteHeight { get; internal set; }
    internal float Endnoteheight { get; internal set; }
    internal string FootnoteID { get; internal set; }
    internal WTextRange TextRange { get; internal set; }
    internal FootnoteLayoutInfo(ChildrenLayoutDirection childLayoutDirection);
    internal float get_FootnoteHeight();
    internal void set_FootnoteHeight(float value);
    internal float get_Endnoteheight();
    internal void set_Endnoteheight(float value);
    internal string get_FootnoteID();
    internal void set_FootnoteID(string value);
    internal WTextRange get_TextRange();
    internal void set_TextRange(WTextRange value);
    internal string GetFootnoteID(WFootnote footnote, int id);
    internal Entity GetBaseEntity(Entity entity);
}
internal enum Syncfusion.Layouting.HAlignment : Enum {
    public int value__;
    public static HAlignment Left;
    public static HAlignment Center;
    public static HAlignment Right;
    public static HAlignment Justify;
    public static HAlignment Distributed;
}
internal class Syncfusion.Layouting.HtmlToDocLayoutInfo : object {
    private bool m_bRemoveLineBreak;
    internal bool RemoveLineBreak { get; internal set; }
    internal bool get_RemoveLineBreak();
    internal void set_RemoveLineBreak(bool value);
}
internal interface Syncfusion.Layouting.ILayoutedFuntionWidget {
    public IOfficeMathFunctionBase Widget { get; }
    public RectangleF Bounds { get; public set; }
    public LayoutedOMathWidget Owner { get; public set; }
    public abstract virtual IOfficeMathFunctionBase get_Widget();
    public abstract virtual RectangleF get_Bounds();
    public abstract virtual void set_Bounds(RectangleF value);
    public abstract virtual LayoutedOMathWidget get_Owner();
    public abstract virtual void set_Owner(LayoutedOMathWidget value);
    public abstract virtual void ShiftXYPosition(float xPosition, float yPosition);
    public abstract virtual void Dispose();
}
internal interface Syncfusion.Layouting.ILayoutInfo {
    public bool IsClipped { get; public set; }
    public bool IsSkip { get; public set; }
    public bool IsSkipBottomAlign { get; public set; }
    public bool IsLineContainer { get; }
    public ChildrenLayoutDirection ChildrenLayoutDirection { get; }
    public bool IsLineBreak { get; public set; }
    public bool TextWrap { get; public set; }
    public bool IsPageBreakItem { get; public set; }
    public bool IsVerticalText { get; public set; }
    public bool IsFirstItemInPage { get; public set; }
    public bool IsKeepWithNext { get; public set; }
    public bool IsHiddenRow { get; public set; }
    public SizeF Size { get; public set; }
    public SyncFont Font { get; public set; }
    public abstract virtual bool get_IsClipped();
    public abstract virtual void set_IsClipped(bool value);
    public abstract virtual bool get_IsSkip();
    public abstract virtual void set_IsSkip(bool value);
    public abstract virtual bool get_IsSkipBottomAlign();
    public abstract virtual void set_IsSkipBottomAlign(bool value);
    public abstract virtual bool get_IsLineContainer();
    public abstract virtual ChildrenLayoutDirection get_ChildrenLayoutDirection();
    public abstract virtual bool get_IsLineBreak();
    public abstract virtual void set_IsLineBreak(bool value);
    public abstract virtual bool get_TextWrap();
    public abstract virtual void set_TextWrap(bool value);
    public abstract virtual bool get_IsPageBreakItem();
    public abstract virtual void set_IsPageBreakItem(bool value);
    public abstract virtual bool get_IsVerticalText();
    public abstract virtual void set_IsVerticalText(bool value);
    public abstract virtual bool get_IsFirstItemInPage();
    public abstract virtual void set_IsFirstItemInPage(bool value);
    public abstract virtual bool get_IsKeepWithNext();
    public abstract virtual void set_IsKeepWithNext(bool value);
    public abstract virtual bool get_IsHiddenRow();
    public abstract virtual void set_IsHiddenRow(bool value);
    public abstract virtual SizeF get_Size();
    public abstract virtual void set_Size(SizeF value);
    public abstract virtual SyncFont get_Font();
    public abstract virtual void set_Font(SyncFont value);
}
internal interface Syncfusion.Layouting.ILayoutProcessHandler {
    public abstract virtual bool GetNextArea(RectangleF& rect, Int32& columnIndex, Boolean& isContinuousSection, bool isSplittedWidget, Single& topMargin, bool isFromDynmicLayout, IWidgetContainer& curWidget);
    public abstract virtual void PushLayoutedWidget(LayoutedWidget ltWidget, RectangleF layoutArea, bool isNeedToRestartFootnote, bool m_bisNeedToRestartEndnoteID, LayoutState state, bool isNeedToFindInterSectingPoint, bool isContinuousSection);
    public abstract virtual bool HandleSplittedWidget(SplitWidgetContainer stWidgetContainer, LayoutState state, LayoutedWidget ltWidget, Boolean& isLayoutedWidgetNeedToPushed);
    public abstract virtual void HandleLayoutedWidget(LayoutedWidget ltWidget);
}
internal interface Syncfusion.Layouting.ILayoutSpacingsInfo {
    public Spacings Paddings { get; }
    public Spacings Margins { get; }
    public abstract virtual Spacings get_Paddings();
    public abstract virtual Spacings get_Margins();
}
internal interface Syncfusion.Layouting.ILCOperator {
    public DrawingContext DrawingContext { get; }
    public abstract virtual DrawingContext get_DrawingContext();
    public abstract virtual void SendLeafLayoutAfter(LayoutedWidget ltWidget, bool isFromTOCLinkStyle);
}
internal interface Syncfusion.Layouting.ILeafWidget {
    public abstract virtual SizeF Measure(DrawingContext dc);
}
internal interface Syncfusion.Layouting.ISplitLeafWidget {
    public abstract virtual ISplitLeafWidget[] SplitBySize(DrawingContext dc, SizeF size, float clientWidth, float clientActiveAreaWidth, Boolean& isLastWordFit, bool isTabStopInterSectingfloattingItem, bool isSplitByCharacter, bool isFirstItemInLine, Int32& countForConsecutivelimit, Layouter layouter, Boolean& isHyphenated);
}
internal interface Syncfusion.Layouting.IStringWidget {
    public abstract virtual int OffsetToIndex(DrawingContext dc, double offset, string text, float clientWidth, float clientActiveAreaWidth, bool isSplitByCharacter);
    public abstract virtual double GetTextAscent(DrawingContext dc, Single& exceededLineAscent);
}
internal interface Syncfusion.Layouting.ITableLayoutInfo {
    public float Width { get; public set; }
    public float Height { get; }
    public Single[] CellsWidth { get; public set; }
    public int HeadersRowCount { get; }
    public Boolean[] IsDefaultCells { get; }
    public bool IsSplittedTable { get; public set; }
    public double CellSpacings { get; }
    public double CellPaddings { get; }
    public abstract virtual float get_Width();
    public abstract virtual void set_Width(float value);
    public abstract virtual float get_Height();
    public abstract virtual Single[] get_CellsWidth();
    public abstract virtual void set_CellsWidth(Single[] value);
    public abstract virtual int get_HeadersRowCount();
    public abstract virtual Boolean[] get_IsDefaultCells();
    public abstract virtual bool get_IsSplittedTable();
    public abstract virtual void set_IsSplittedTable(bool value);
    public abstract virtual double get_CellSpacings();
    public abstract virtual double get_CellPaddings();
}
internal interface Syncfusion.Layouting.ITableWidget {
    public int MaxRowIndex { get; }
    public int RowsCount { get; }
    public abstract virtual int get_MaxRowIndex();
    public abstract virtual int get_RowsCount();
    public abstract virtual IWidgetContainer GetCellWidget(int row, int column);
    public abstract virtual IWidget GetRowWidget(int row);
}
internal interface Syncfusion.Layouting.ITextMeasurable {
    public abstract virtual SizeF Measure(string text);
    public abstract virtual SizeF Measure(DrawingContext dc, string text);
}
internal interface Syncfusion.Layouting.IWidget {
    public ILayoutInfo LayoutInfo { get; }
    public abstract virtual ILayoutInfo get_LayoutInfo();
    public abstract virtual void InitLayoutInfo();
    public abstract virtual void InitLayoutInfo(IWidget widget);
}
[DefaultMemberAttribute("Item")]
internal interface Syncfusion.Layouting.IWidgetContainer {
    public int Count { get; }
    public IWidget Item { get; }
    public EntityCollection WidgetInnerCollection { get; }
    public abstract virtual int get_Count();
    public abstract virtual IWidget get_Item(int index);
    public abstract virtual EntityCollection get_WidgetInnerCollection();
}
internal class Syncfusion.Layouting.LayoutArea : object {
    private RectangleF m_area;
    private RectangleF m_clientArea;
    private RectangleF m_clientActiveArea;
    private ILayoutSpacingsInfo m_spacings;
    private bool m_bSkipSubtractWhenInvalidParameter;
    public double Width { get; }
    public double Height { get; }
    public bool SkipSubtractWhenInvalidParameter { get; public set; }
    public Spacings Margins { get; }
    public Spacings Paddings { get; }
    public RectangleF OuterArea { get; }
    public RectangleF ClientArea { get; }
    public RectangleF ClientActiveArea { get; }
    public LayoutArea(RectangleF area);
    public LayoutArea(RectangleF area, ILayoutSpacingsInfo spacings, IWidget widget);
    public double get_Width();
    public double get_Height();
    public bool get_SkipSubtractWhenInvalidParameter();
    public void set_SkipSubtractWhenInvalidParameter(bool value);
    public Spacings get_Margins();
    public Spacings get_Paddings();
    public RectangleF get_OuterArea();
    public RectangleF get_ClientArea();
    public RectangleF get_ClientActiveArea();
    public void CutFromLeft(double x, bool isSkip);
    public void CutFromLeft(double x);
    internal void UpdateDynamicRelayoutBounds(float x, float y, bool isNeedToUpdateWidth, float width);
    public void CutFromTop(double y);
    public void CutFromTop(double y, float footnoteHeight);
    internal void CutFromTop(double y, float footnoteHeight, bool isSkip);
    public void CutFromTop();
    internal void UpdateClientActiveArea(RectangleF rectangle);
    private void UpdateClientArea(IWidget widget);
    internal void UpdateBounds(float topPad);
    internal void UpdateBoundsBasedOnTextWrap(float bottom);
    internal void UpdateWidth(float previousTabPosition);
    internal void UpdateLeftPosition(float x);
}
internal abstract class Syncfusion.Layouting.LayoutContext : object {
    internal static float DEF_LEFT_MIN_WIDTH_SQUARE;
    internal static float DEF_LEFT_MIN_WIDTH_2013_TIGHTANDTHROW;
    internal static float DEF_LEFT_MIN_WIDTH_TIGHTANDTHROW;
    internal static float DEF_MIN_WIDTH_SQUARE;
    internal static float DEF_MIN_WIDTH_2013_TIGHTANDTHROW;
    internal static float DEF_MIN_WIDTH_TIGHTANDTHROW;
    internal static float MAX_WIDTH;
    private static float BottomOverlapDifferenceForTightAndThroughWrappingStyle;
    internal LayoutState m_ltState;
    protected IWidget m_sptWidget;
    protected IWidget m_notFittedWidget;
    protected IWidget m_LineNumberWidget;
    protected IWidget m_widget;
    protected LayoutedWidget m_ltWidget;
    internal bool m_bSkipAreaSpacing;
    protected LayoutArea m_layoutArea;
    protected ILCOperator m_lcOperator;
    private float m_clientLayoutAreaRight;
    protected byte m_bFlags;
    public IWidget SplittedWidget { get; public set; }
    public LayoutState State { get; }
    public ILayoutInfo LayoutInfo { get; }
    public LayoutArea LayoutArea { get; }
    public DrawingContext DrawingContext { get; }
    public float BoundsPaddingRight { get; }
    public float BoundsMarginBottom { get; }
    public IWidget Widget { get; public set; }
    public bool IsVerticalNotFitted { get; public set; }
    internal bool IsInnerLayouting { get; internal set; }
    internal bool IsAreaUpdated { get; internal set; }
    internal bool IsTabStopBeyondRightMarginExists { get; internal set; }
    internal bool IsNeedToWrap { get; internal set; }
    protected bool IsForceFitLayout { get; protected set; }
    internal float ClientLayoutAreaRight { get; internal set; }
    public LayoutContext(IWidget widget, ILCOperator lcOperator, bool isForceFitLayout);
    public IWidget get_SplittedWidget();
    public void set_SplittedWidget(IWidget value);
    public LayoutState get_State();
    public ILayoutInfo get_LayoutInfo();
    public LayoutArea get_LayoutArea();
    public DrawingContext get_DrawingContext();
    public float get_BoundsPaddingRight();
    public float get_BoundsMarginBottom();
    public IWidget get_Widget();
    public void set_Widget(IWidget value);
    public bool get_IsVerticalNotFitted();
    public void set_IsVerticalNotFitted(bool value);
    internal bool get_IsInnerLayouting();
    internal void set_IsInnerLayouting(bool value);
    internal bool get_IsAreaUpdated();
    internal void set_IsAreaUpdated(bool value);
    internal bool get_IsTabStopBeyondRightMarginExists();
    internal void set_IsTabStopBeyondRightMarginExists(bool value);
    internal bool get_IsNeedToWrap();
    internal void set_IsNeedToWrap(bool value);
    protected bool get_IsForceFitLayout();
    protected void set_IsForceFitLayout(bool value);
    internal float get_ClientLayoutAreaRight();
    internal void set_ClientLayoutAreaRight(float value);
    public abstract virtual LayoutedWidget Layout(RectangleF rect);
    public bool IsEnsureSplitted();
    protected virtual void DoLayoutAfter();
    internal void LayoutFootnote(WFootnote footnote, LayoutedWidget currLtWidget, bool isFootnoteRefrencedlineLayouted);
    internal bool IsNeedToConsiderAdjustValues(Single& adjustingValue, WParagraph paragraph, TextWrappingStyle textWrappingStyle, int index);
    internal float AdjustingValueToWrap(float margin, float borderValue, bool hasBorder);
    private float GetFootNoteLayoutingHeight();
    private bool IsExactlyRowVerticalMergeStartCell(WTableCell cell);
    internal WTextBox IsEntityOwnerIsWTextbox(Entity entity);
    internal bool IsWord2013(WordDocument document);
    internal bool IsNotWord2013Jusitfy(WParagraph paragraph);
    internal float GetTotalTopMarginAndPaddingValues(WTable table);
    internal void RemoveBehindWidgets(LayoutedWidget ltWidget);
    private void RemoveFromLayoutedTable(LayoutedWidget ltTable);
    private void RemoveFromLayoutedRow(LayoutedWidget ltRow);
    private void RemoveFromLayoutedParagraph(LayoutedWidget ltWidget);
    private void RemoveFromLayoutedLine(LayoutedWidget lineLtWidget);
    internal void LayoutEndnote(WFootnote endnote, LayoutedWidget currLtWidget);
    internal void LayoutFootnoteTextBody(IWidgetContainer widgetContainer, Single& height, float clientHeight, bool referencedLineIsLayouted);
    private bool IsFootnoteSplitted(WTextBody textBody);
    internal void LayoutEndnoteTextBody(IWidgetContainer widgetContainer, Single& height, float clientHeight);
    internal void AddLayoutWidgetInBeforeInsectingPoint(LayoutedWidget interSectWidget, int index);
    internal void UpdateWrappingDifferenceValue(LayoutedWidget firstItem);
    internal void UpdateFootnoteWidgets(LayoutedWidget ltWidget);
    private bool IsNeedToRemoveFootnoteSeparator(LayoutedWidget ltWidget);
    internal void UpdateFootnoteWidgets(WParagraph paragraph);
    protected void CreateLayoutArea(RectangleF rect);
    private void LayoutTextWrapWidgets(IWidget widget);
    protected void AddToFloatingItems(LayoutedWidget ltWidget, ILeafWidget leafWidget);
    protected bool IsDrawingElement(ILeafWidget leafWidget);
    internal bool IsDoNotSuppressIndent(WParagraph paragraph, float yPosition, float wrappingBoundsBottom, int floatingItemIndex);
    private WTextBody GetSDTOwnerTextBody(BlockContentControl sdtBlockContent);
    internal void ResetFloatingEntityProperty(WParagraph paragraph);
    internal float GetParagraphTopMargin(WParagraph paragraph);
    internal WTextRange GetTextRange(IWidget widget);
    private RectangleF AdjustboundsBasedOnWrapPolygon(RectangleF rect, List`1<PointF> vertices, float imageWidth, float imageHeight, Boolean& IsDoesNotDenotesRectangle);
    internal PointF LineIntersectionPoint(PointF ps1, PointF pe1, PointF ps2, PointF pe2);
    internal bool sameSign(float a, float b);
    private bool IsWrapPolygonDenotesRectangle(List`1<PointF> vertices, Single& minX, Single& maxX, Single& minY, Single& maxY);
    internal void UpdateParagraphXPositionBasedOnTextWrap(WParagraph paragraph, float xPosition, float yPosition);
    internal bool IsOwnerCellInFrame(WParagraph paragraph);
    internal void ModifyXPositionForRTLLayouting(int floatingItemIndex, RectangleF& textWrappingBounds, RectangleF clientLayoutArea);
    internal void ResetXPositionForRTLLayouting(int floatingItemIndex, RectangleF& textWrappingBounds, float floatingItemXPosition);
    private bool IsNeedToUpdateParagraphYPosition(float yPosition, TextWrappingStyle textWrappingStyle, WParagraph paragraph, float paraMarkEndPosition, float bottomPosition);
    private bool IsFloatingItemIntersectParaMark(float startValue, float endValue);
    internal RectangleF AdjustTightAndThroughBounds(FloatingItem floatingItem, RectangleF clientArea, float size1);
    private void FindMaxMinIntersectPoint(List`1<PointF> vertices, float width, float height, RectangleF rect, float size1, FloatingItem floatingItem, RectangleF clientArea, PointF& minimumInterSectPoint, PointF& maximumIntersectPoint);
    private bool IsLineSlopeIsLeftToRight(PointF firstPoint, PointF secondPoint);
    private bool pnpoly(PointF[] poly, PointF pnt);
    private bool IsNeedToUpdateYPosition(Entity floatingEntity);
    private void UpdateParagraphYPositionBasedonTextWrap();
    private Entity GetPreviousItem(WParagraph wParagraph);
    internal bool IsInSameTextBody(TextBodyItem bodyItem, FloatingItem fItem, WTextBody& ownerBody);
    internal void UpdateXYPositionBasedOnAdjacentFloatingItems(List`1<FloatingItem> floatingItems, RectangleF rect, SizeF size, WParagraph paragraph, bool isFromLeafLayoutContext);
    private void UpdateYPosition(List`1<FloatingItem> interSectingItems, RectangleF rect, SizeF size, WParagraph paragraph, bool isFromLeafLayoutContext);
    private float GetMinWidth(TextWrappingStyle textWrappingStyle, WParagraph ownerParagraph);
    private string GetWordVersion(WParagraph paragraph);
    private float GetMinWidthBetweenFloatingItems(TextWrappingStyle leftStyle, TextWrappingStyle rightStyle, string wordVersion);
    private bool IsSquareOrTightAndThrow(FloatingItem floatingItem);
    internal bool IsYPositionIntersect(RectangleF floatingItemBounds, RectangleF currentItemBounds, float height);
    internal RectangleF GetBottomPositionForTightAndThrough(float floattingItemBottomPosition, RectangleF textWrappingBounds, WParagraph paragraph, float yPostion, float leafWidgetHeight);
    private float GetMultipleFactorValue(WParagraph paragraph);
    internal float GetFloattingItemBottom(Entity entity, float bottom);
    private float GetExceededBottomValueForTightAndThrough(float floattingItemBottomPosition, float yPosition, float multipleFactorValue, WParagraph paragraph, bool isSplittedLine);
    private float GetBottomValueForSquareAndTopandBottom(WParagraph paragraph);
    internal WParagraph GetPreviousParagraph(WParagraph paragrph);
    private WParagraph GetPreviousParagraphIsInSDTContent(BlockContentControl sdtContent);
    private WParagraph GetPreviousParagraphIsInTable(WTable table);
    internal int GetFloattingItemIndex(Entity entity);
    internal bool IsInFootnote(WParagraph paragraph);
    internal Entity IsInTextBox(WParagraph paragraph);
    internal float GetPageMarginLeft(WParagraph paragraph);
    private void UpdateParagraphTopMargin(WParagraph paragraph);
    private bool IsTOC(WParagraph paragraph);
    private bool IsPageBreak(IWidget childWidget);
    private bool IsParagraphFirstItemHasPageOrColumnBreak(WParagraph paragraph);
    private bool IsSectionBreak(WParagraph para);
    protected void CreateLayoutArea(RectangleF rect, Paddings cellPadding);
    protected void CreateLayoutedWidget(PointF location);
    internal void UpdateAreaWidth(float previousTabPosition);
    internal bool StartsWithExt(string text, string value);
    protected void UpdateForceFitLayoutState(LayoutContext childContext);
    public static LayoutContext Create(IWidget widget, ILCOperator lcOperator, bool isForceFitLayout);
    internal bool IsInFrame(WParagraph paragraph);
    internal bool IsFrameInClientArea(WParagraph paragraph, RectangleF textWrappingBounds);
    internal RectangleF GetFrameBounds(WParagraph paragraph, RectangleF bounds);
    private bool IsFrameLayouted(WParagraph paragraph, Int32& j);
    private Entity GetBaseTextBody(Entity entity);
    internal Entity GetBaseEntity(Entity entity);
    internal bool IsBaseFromSection(Entity entity);
    internal bool IsInTable(Entity entity);
    private float GetPositionX(WParagraphFormat paraFormat, WSection section, RectangleF bounds, float frameWidth);
    private float GetPositionY(WParagraphFormat paraFormat, WSection section, RectangleF bounds, float frameHeight, bool IsAtleastHeight);
}
internal class Syncfusion.Layouting.LayoutedAccentWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_equation;
    private LayoutedStringWidget m_accentCharacter;
    private float m_scalingFactor;
    internal LayoutedStringWidget AccentCharacter { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal float ScalingFactor { get; internal set; }
    internal LayoutedAccentWidget(IOfficeMathFunctionBase widget);
    internal LayoutedAccentWidget(LayoutedAccentWidget srcWidget);
    internal LayoutedStringWidget get_AccentCharacter();
    internal void set_AccentCharacter(LayoutedStringWidget value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    internal float get_ScalingFactor();
    internal void set_ScalingFactor(float value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedBarWidget : LayoutedFuntionWidget {
    private LayoutedLineWidget m_barline;
    private LayoutedOMathWidget m_equation;
    internal LayoutedLineWidget BarLine { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedBarWidget(IOfficeMathFunctionBase widget);
    internal LayoutedBarWidget(LayoutedBarWidget srcWidget);
    internal LayoutedLineWidget get_BarLine();
    internal void set_BarLine(LayoutedLineWidget value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedBoderBoxWidget : LayoutedFuntionWidget {
    private List`1<LayoutedLineWidget> m_borderLines;
    private LayoutedOMathWidget m_equation;
    internal List`1<LayoutedLineWidget> BorderLines { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedBoderBoxWidget(IOfficeMathFunctionBase widget);
    internal LayoutedBoderBoxWidget(LayoutedBoderBoxWidget srcWidget);
    internal List`1<LayoutedLineWidget> get_BorderLines();
    internal void set_BorderLines(List`1<LayoutedLineWidget> value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedBoxWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_equation;
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedBoxWidget(IOfficeMathFunctionBase widget);
    internal LayoutedBoxWidget(LayoutedBoxWidget srcWidget);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedDelimiterWidget : LayoutedFuntionWidget {
    private LayoutedStringWidget m_beginChar;
    private LayoutedStringWidget m_endChar;
    private LayoutedStringWidget m_seperator;
    private List`1<LayoutedOMathWidget> m_equation;
    internal LayoutedStringWidget BeginCharacter { get; internal set; }
    internal LayoutedStringWidget EndCharacter { get; internal set; }
    internal LayoutedStringWidget Seperator { get; internal set; }
    internal List`1<LayoutedOMathWidget> Equation { get; internal set; }
    internal LayoutedDelimiterWidget(IOfficeMathFunctionBase widget);
    internal LayoutedDelimiterWidget(LayoutedDelimiterWidget srcWidget);
    internal LayoutedStringWidget get_BeginCharacter();
    internal void set_BeginCharacter(LayoutedStringWidget value);
    internal LayoutedStringWidget get_EndCharacter();
    internal void set_EndCharacter(LayoutedStringWidget value);
    internal LayoutedStringWidget get_Seperator();
    internal void set_Seperator(LayoutedStringWidget value);
    internal List`1<LayoutedOMathWidget> get_Equation();
    internal void set_Equation(List`1<LayoutedOMathWidget> value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedEQFields : object {
    private List`1<LayoutedEQFields> m_childEQFileds;
    private RectangleF m_bounds;
    private EQSwitchType m_switchType;
    private StringAlignment m_alignment;
    internal RectangleF Bounds { get; internal set; }
    internal List`1<LayoutedEQFields> ChildEQFileds { get; internal set; }
    internal EQSwitchType SwitchType { get; internal set; }
    internal StringAlignment Alignment { get; internal set; }
    internal RectangleF get_Bounds();
    internal void set_Bounds(RectangleF value);
    internal List`1<LayoutedEQFields> get_ChildEQFileds();
    internal void set_ChildEQFileds(List`1<LayoutedEQFields> value);
    internal EQSwitchType get_SwitchType();
    internal void set_SwitchType(EQSwitchType value);
    internal StringAlignment get_Alignment();
    internal void set_Alignment(StringAlignment value);
}
internal class Syncfusion.Layouting.LayoutedEquationArrayWidget : LayoutedFuntionWidget {
    private List`1<List`1<LayoutedOMathWidget>> m_equation;
    internal List`1<List`1<LayoutedOMathWidget>> Equation { get; internal set; }
    internal LayoutedEquationArrayWidget(IOfficeMathFunctionBase widget);
    internal LayoutedEquationArrayWidget(LayoutedEquationArrayWidget srcWidget);
    internal List`1<List`1<LayoutedOMathWidget>> get_Equation();
    internal void set_Equation(List`1<List`1<LayoutedOMathWidget>> value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedFractionWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_numerator;
    private LayoutedOMathWidget m_denominator;
    private LayoutedLineWidget m_fractionLine;
    internal LayoutedOMathWidget Numerator { get; internal set; }
    internal LayoutedOMathWidget Denominator { get; internal set; }
    internal LayoutedLineWidget FractionLine { get; internal set; }
    internal LayoutedFractionWidget(IOfficeMathFunctionBase widget);
    internal LayoutedFractionWidget(LayoutedFractionWidget srcWidget);
    internal LayoutedOMathWidget get_Numerator();
    internal void set_Numerator(LayoutedOMathWidget value);
    internal LayoutedOMathWidget get_Denominator();
    internal void set_Denominator(LayoutedOMathWidget value);
    internal LayoutedLineWidget get_FractionLine();
    internal void set_FractionLine(LayoutedLineWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal abstract class Syncfusion.Layouting.LayoutedFuntionWidget : object {
    private RectangleF m_bounds;
    private IOfficeMathFunctionBase m_widget;
    private LayoutedOMathWidget m_owner;
    public IOfficeMathFunctionBase Widget { get; }
    public RectangleF Bounds { get; public set; }
    public LayoutedOMathWidget Owner { get; public set; }
    internal LayoutedFuntionWidget(IOfficeMathFunctionBase widget);
    internal LayoutedFuntionWidget(LayoutedFuntionWidget srcWidget);
    public sealed virtual IOfficeMathFunctionBase get_Widget();
    public sealed virtual RectangleF get_Bounds();
    public sealed virtual void set_Bounds(RectangleF value);
    public sealed virtual LayoutedOMathWidget get_Owner();
    public sealed virtual void set_Owner(LayoutedOMathWidget value);
    public abstract virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedGroupCharacterWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_equation;
    private LayoutedStringWidget m_groupCharacter;
    private float m_scalingFactor;
    internal LayoutedStringWidget GroupCharacter { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal float ScalingFactor { get; internal set; }
    internal LayoutedGroupCharacterWidget(IOfficeMathFunctionBase widget);
    internal LayoutedGroupCharacterWidget(LayoutedGroupCharacterWidget srcWidget);
    internal LayoutedStringWidget get_GroupCharacter();
    internal void set_GroupCharacter(LayoutedStringWidget value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    internal float get_ScalingFactor();
    internal void set_ScalingFactor(float value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedLimitWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_limit;
    private LayoutedOMathWidget m_equation;
    internal LayoutedOMathWidget Limit { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedLimitWidget(IOfficeMathFunctionBase widget);
    internal LayoutedLimitWidget(LayoutedLimitWidget srcWidget);
    internal LayoutedOMathWidget get_Limit();
    internal void set_Limit(LayoutedOMathWidget value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedLineWidget : object {
    private PointF m_point1;
    private PointF m_point2;
    private Color m_color;
    private float m_width;
    private bool m_skip;
    internal PointF Point1 { get; internal set; }
    internal PointF Point2 { get; internal set; }
    internal Color Color { get; internal set; }
    internal float Width { get; internal set; }
    internal bool Skip { get; internal set; }
    internal LayoutedLineWidget(LayoutedLineWidget srcWidget);
    internal PointF get_Point1();
    internal void set_Point1(PointF value);
    internal PointF get_Point2();
    internal void set_Point2(PointF value);
    internal Color get_Color();
    internal void set_Color(Color value);
    internal float get_Width();
    internal void set_Width(float value);
    internal bool get_Skip();
    internal void set_Skip(bool value);
    internal void ShiftXYPosition(float xPosition, float yPosition);
    public void Dispose();
}
internal class Syncfusion.Layouting.LayoutedMathFunctionWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_functionName;
    private LayoutedOMathWidget m_equation;
    internal LayoutedOMathWidget FunctionName { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedMathFunctionWidget(IOfficeMathFunctionBase widget);
    internal LayoutedMathFunctionWidget(LayoutedMathFunctionWidget srcWidget);
    internal LayoutedOMathWidget get_FunctionName();
    internal void set_FunctionName(LayoutedOMathWidget value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedMathWidget : LayoutedWidget {
    private List`1<LayoutedOMathWidget> m_layoutedOMathWidgetList;
    internal List`1<LayoutedOMathWidget> ChildWidgets { get; }
    internal LayoutedMathWidget(IWidget widget);
    internal LayoutedMathWidget(LayoutedWidget srcWidget);
    internal List`1<LayoutedOMathWidget> get_ChildWidgets();
    internal void Dispose();
    internal void ShiftXYPosition(float xPosition, float yPosition, bool isSkipOwnerContainer);
    internal void ShiftXYPosition(float xPosition, float yPosition);
    internal Font GetFont();
}
internal class Syncfusion.Layouting.LayoutedMatrixWidget : LayoutedFuntionWidget {
    private List`1<List`1<LayoutedOMathWidget>> rows;
    internal List`1<List`1<LayoutedOMathWidget>> Rows { get; internal set; }
    internal LayoutedMatrixWidget(IOfficeMathFunctionBase widget);
    internal LayoutedMatrixWidget(LayoutedMatrixWidget srcWidget);
    internal List`1<List`1<LayoutedOMathWidget>> get_Rows();
    internal void set_Rows(List`1<List`1<LayoutedOMathWidget>> value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedNArrayWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_superscript;
    private LayoutedOMathWidget m_subscript;
    private LayoutedOMathWidget m_equation;
    private LayoutedStringWidget m_narrayCharacter;
    internal LayoutedOMathWidget Superscript { get; internal set; }
    internal LayoutedOMathWidget Subscript { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedStringWidget NArrayCharacter { get; internal set; }
    internal LayoutedNArrayWidget(IOfficeMathFunctionBase widget);
    internal LayoutedNArrayWidget(LayoutedNArrayWidget srcWidget);
    internal LayoutedOMathWidget get_Superscript();
    internal void set_Superscript(LayoutedOMathWidget value);
    internal LayoutedOMathWidget get_Subscript();
    internal void set_Subscript(LayoutedOMathWidget value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    internal LayoutedStringWidget get_NArrayCharacter();
    internal void set_NArrayCharacter(LayoutedStringWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedOfficeRunWidget : LayoutedWidget {
    private LayoutedWidget m_ltWidget;
    private IOfficeMathFunctionBase m_widget;
    private LayoutedOMathWidget m_owner;
    public IOfficeMathFunctionBase Widget { get; }
    internal LayoutedWidget LayoutedWidget { get; internal set; }
    public LayoutedOMathWidget Owner { get; public set; }
    internal LayoutedOfficeRunWidget(IOfficeMathFunctionBase widget);
    internal LayoutedOfficeRunWidget(ILayoutedFuntionWidget srcWidget);
    public sealed virtual IOfficeMathFunctionBase get_Widget();
    internal LayoutedWidget get_LayoutedWidget();
    internal void set_LayoutedWidget(LayoutedWidget value);
    public sealed virtual LayoutedOMathWidget get_Owner();
    public sealed virtual void set_Owner(LayoutedOMathWidget value);
    public sealed virtual void ShiftXYPosition(float xPosition, float yPosition);
    public sealed virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedOMathWidget : object {
    private List`1<ILayoutedFuntionWidget> m_layoutedFucntionWidgetList;
    private RectangleF m_bounds;
    private IOfficeMath m_widget;
    private LayoutedMathWidget m_owner;
    internal List`1<ILayoutedFuntionWidget> ChildWidgets { get; }
    internal RectangleF Bounds { get; internal set; }
    internal IOfficeMath Widget { get; }
    internal LayoutedMathWidget Owner { get; internal set; }
    internal LayoutedOMathWidget(IOfficeMath widget);
    internal LayoutedOMathWidget(LayoutedOMathWidget srcWidget);
    internal List`1<ILayoutedFuntionWidget> get_ChildWidgets();
    internal RectangleF get_Bounds();
    internal void set_Bounds(RectangleF value);
    internal IOfficeMath get_Widget();
    internal LayoutedMathWidget get_Owner();
    internal void set_Owner(LayoutedMathWidget value);
    internal void Dispose();
    internal void ShiftXYPosition(float xPosition, float yPosition, bool isSkipOwnerContainer);
    internal void ShiftXYPosition(float xPosition, float yPosition);
    internal float GetVerticalCenterPoint();
    internal float GetVerticalCenterPoint(Int32& maxHeightWidgetIndex);
    internal float GetVerticalCenterPoint(ILayoutedFuntionWidget layoutedFuntionWidget);
}
internal class Syncfusion.Layouting.LayoutedPhantomWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_equation;
    private bool m_show;
    internal bool Show { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedPhantomWidget(IOfficeMathFunctionBase widget);
    internal LayoutedPhantomWidget(LayoutedPhantomWidget srcWidget);
    internal bool get_Show();
    internal void set_Show(bool value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedRadicalWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_degree;
    private LayoutedOMathWidget m_equation;
    private LayoutedLineWidget[] m_radicalLines;
    internal LayoutedOMathWidget Degree { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedLineWidget[] RadicalLines { get; internal set; }
    internal LayoutedRadicalWidget(IOfficeMathFunctionBase widget);
    internal LayoutedRadicalWidget(LayoutedRadicalWidget srcWidget);
    internal LayoutedOMathWidget get_Degree();
    internal void set_Degree(LayoutedOMathWidget value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    internal LayoutedLineWidget[] get_RadicalLines();
    internal void set_RadicalLines(LayoutedLineWidget[] value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedScriptWidget : LayoutedFuntionWidget {
    private LayoutedOMathWidget m_superscript;
    private LayoutedOMathWidget m_subscript;
    private LayoutedOMathWidget m_equation;
    internal LayoutedOMathWidget Superscript { get; internal set; }
    internal LayoutedOMathWidget Subscript { get; internal set; }
    internal LayoutedOMathWidget Equation { get; internal set; }
    internal LayoutedScriptWidget(IOfficeMathFunctionBase widget);
    internal LayoutedScriptWidget(LayoutedScriptWidget srcWidget);
    internal LayoutedOMathWidget get_Superscript();
    internal void set_Superscript(LayoutedOMathWidget value);
    internal LayoutedOMathWidget get_Subscript();
    internal void set_Subscript(LayoutedOMathWidget value);
    internal LayoutedOMathWidget get_Equation();
    internal void set_Equation(LayoutedOMathWidget value);
    public virtual void ShiftXYPosition(float xPosition, float yPosition);
    public virtual void Dispose();
}
internal class Syncfusion.Layouting.LayoutedStringWidget : object {
    private RectangleF m_bounds;
    private string m_text;
    private Font m_font;
    private bool m_isStretchable;
    internal RectangleF Bounds { get; internal set; }
    internal string Text { get; internal set; }
    internal Font Font { get; internal set; }
    internal bool IsStretchable { get; internal set; }
    internal LayoutedStringWidget(LayoutedStringWidget srcWidget);
    internal RectangleF get_Bounds();
    internal void set_Bounds(RectangleF value);
    internal string get_Text();
    internal void set_Text(string value);
    internal Font get_Font();
    internal void set_Font(Font value);
    internal bool get_IsStretchable();
    internal void set_IsStretchable(bool value);
    public void ShiftXYPosition(float xPosition, float yPosition);
    public void Dispose();
}
internal class Syncfusion.Layouting.LayoutedWidget : object {
    private RectangleF m_bounds;
    private IWidget m_widget;
    private LayoutedWidgetList m_ltWidgets;
    private string m_textTag;
    private float m_wordSpace;
    private HAlignment m_horizontalAlign;
    private float m_subWidth;
    private int m_spaces;
    private TabJustification m_prevTabJustification;
    private LayoutedWidget m_owner;
    private byte m_bFlags;
    internal float m_footnoteHeight;
    internal float m_endnoteHeight;
    internal List`1<RectangleF> m_intersectingBounds;
    private bool m_isTrackChanges;
    private CharacterRangeType m_charRangeType;
    internal TabJustification PrevTabJustification { get; internal set; }
    internal bool IsTrackChanges { get; internal set; }
    public int Spaces { get; public set; }
    public bool IsLastLine { get; public set; }
    public float SubWidth { get; public set; }
    public HAlignment HorizontalAlign { get; public set; }
    public float WordSpace { get; public set; }
    public string TextTag { get; public set; }
    public RectangleF Bounds { get; public set; }
    internal IWidget Widget { get; }
    public LayoutedWidgetList ChildWidgets { get; public set; }
    internal CharacterRangeType CharacterRange { get; internal set; }
    public LayoutedWidget Owner { get; public set; }
    internal bool IsLastItemInPage { get; internal set; }
    internal bool IsNotFitted { get; internal set; }
    internal bool IsContainsSpaceCharAtEnd { get; internal set; }
    internal List`1<RectangleF> IntersectingBounds { get; }
    public LayoutedWidget(IWidget widget);
    public LayoutedWidget(IWidget widget, PointF location);
    public LayoutedWidget(LayoutedWidget ltWidget);
    internal TabJustification get_PrevTabJustification();
    internal void set_PrevTabJustification(TabJustification value);
    internal bool get_IsTrackChanges();
    internal void set_IsTrackChanges(bool value);
    public int get_Spaces();
    public void set_Spaces(int value);
    public bool get_IsLastLine();
    public void set_IsLastLine(bool value);
    public float get_SubWidth();
    public void set_SubWidth(float value);
    public HAlignment get_HorizontalAlign();
    public void set_HorizontalAlign(HAlignment value);
    public float get_WordSpace();
    public void set_WordSpace(float value);
    public string get_TextTag();
    public void set_TextTag(string value);
    public sealed virtual RectangleF get_Bounds();
    public sealed virtual void set_Bounds(RectangleF value);
    internal IWidget get_Widget();
    public LayoutedWidgetList get_ChildWidgets();
    public void set_ChildWidgets(LayoutedWidgetList value);
    internal CharacterRangeType get_CharacterRange();
    internal void set_CharacterRange(CharacterRangeType value);
    public LayoutedWidget get_Owner();
    public void set_Owner(LayoutedWidget value);
    internal bool get_IsLastItemInPage();
    internal void set_IsLastItemInPage(bool value);
    internal bool get_IsNotFitted();
    internal void set_IsNotFitted(bool value);
    internal bool get_IsContainsSpaceCharAtEnd();
    internal void set_IsContainsSpaceCharAtEnd(bool value);
    internal List`1<RectangleF> get_IntersectingBounds();
    internal void GetFootnoteHeight(Single& height);
    internal void GetFootnoteHeightForTableRow(Single& height, LayoutedWidget row);
    private LayoutedWidget GetChildParagraphWidgets(LayoutedWidget layoutedWidget);
    private bool IsTableWidget(IWidget widget);
    internal RectangleF GetFrameClipBounds(RectangleF bounds, WParagraphFormat paragraphFormat, ParagraphLayoutInfo paraLayoutInfo, float maxTextHeight);
    internal bool IsBehindWidget();
    public void InitLayoutInfo(bool resetTabLayoutInfo);
    public void InitLayoutInfoForTextWrapElements();
    public void InitLayoutInfoAll();
    public void ShiftLocation(double xOffset, double yOffset, bool isPictureNeedToBeShifted, bool isFromFloatingItemVerticalAlignment);
    public void ShiftLocation(double xOffset, double yOffset, bool isPictureNeedToBeShifted, bool isFromFloatingItemVerticalAlignment, bool isNeedToShiftOwnerWidget);
    private bool IsFloatingItemNeedToBeAlign(IWidget widget);
    private bool CompatibilityCheck(CompatibilityMode compatibilityMode, bool dontVertAlignCellWithSp, bool layoutInCell);
    public void ShiftLocation(double xOffset, double yOffset, float footerHeight, float pageHeight, bool isHeader, DocumentLayouter layouter);
    public void ShiftLocation(double xOffset, double yOffset, float footerHeight, float originalDistance, float pageHeight, bool isHeader, DocumentLayouter layouter);
    private void UpdateTextWrappingBounds(LayoutedWidget ltWidget, DocumentLayouter layouter);
    private void GetDistanceValues(IWidget leafWidget, Single& distanceFromLeft, Single& distanceFromRight, Single& distanceFromTop, Single& distanceFromBottom);
    private bool IsShiftAbsTableBasedOnPageBottom(LayoutedWidget ltWidget, double xOffset);
    private bool IsShiftAbsTableBasedOnPageBottom(LayoutedWidget ltWidget, double xOffset, double yOffset, float footerHeight);
    internal void ShiftLocationOfCommentsMarkups(float xOffset, float yOffset, List`1<TrackChangesMarkups> trackChangesMarkups);
    private float GetExtentWidth(Entity entity);
    private float GetExtentHeight(Entity entity);
    internal void GetGroupShapeExtent(Single& extensionWidth, Single& extensionHeight, Entity entity, RectangleF groupShapeBounds);
    private Entity GetBaseEntity(Entity entity);
    public void UpdateLtWidgetBounds(float width, float height, float totalWidth, float totalHeight);
    internal RectangleF GetOwnerTextBodyBounds();
    private bool IsLtWidgetBoundsNeedToUpdate(LayoutedWidget ltWidget);
    public void AlignBottom(DrawingContext dc, float remClientAreaHeight, float clientAreaBottom, bool isRowFitInSamePage, bool isLayoutingHeaderRow, bool isLayoutingHeaderFooter, bool isForceFitLayout);
    private bool IsParagraphHasList();
    private bool IsNeedToUpdateListYPos();
    private bool IsLineContainsPicture();
    private bool IsNeedtoMoveNextPage(WParagraph paragraph);
    private void ShiftLineWidgetYPosition(DrawingContext dc, double maxAscent, double topLineSpace, double maxHeight, Single& extraLineAscent, bool isInlineDrawingObject, Double& maxAscentOfLoweredPos, Boolean& isAllWordsContainLoweredPos);
    private float GetTextAscentValueForMath(LayoutedMathWidget layoutedMathWidget, DrawingContext dc);
    private void ShiftListYPosition(WParagraph paragraph, DrawingContext dc, double maxAscent, double topLineSpace, double maxHeight, Single& extraLineAscent, Double& maxAscentOfLoweredPos, Boolean& isAllWordsContainLoweredPos);
    private void ShiftYPosition(DrawingContext dc, double textAscent, double maxAscent, double topLineSpace, double maxHeight, float exceededLineAscent, Single& extraLineAscent, WCharacterFormat charFormat, LayoutedWidget ltWidget, SizeF size, Double& maxAscentOfLoweredPos, Boolean& isAllWordsContainLoweredPos);
    private bool HasRaisedPosition();
    private bool IsMaxHeightInLine(DrawingContext dc, float height);
    private bool IsContainsMathItemInLine();
    internal WParagraph GetParagraph();
    internal bool CalculateMaxChildWidget(DrawingContext dc, WParagraph paragraph, bool isFirstLineOfParagraph, bool isLastLineOfParagraph, Double& maxHeight, Double& maxAscent, Double& maxTextHeight, Double& maxTextAscent, Double& maxTextDescent, Single& maxY, Double& maxAscentOfLoweredPos, IStringWidget& lastTextWidget, Boolean& isClippedLine, Boolean& isTextInLine, Boolean& containsInlinePicture, Boolean& isAllWordsContainLoweredPos, Double& maxLineHeight);
    private bool IsParaHasOnlyTabs();
    private WField GetField();
    private bool IsSkipFieldCodeParagraphHeight();
    private bool IsInlineFloatingItem(IWidget item);
    public void AlignCenter(DrawingContext dc, double subWidth, bool isAlignCenter);
    public double AlignRight(DrawingContext dc, double subWidth, bool isAlignCenter);
    internal double AlignCenterorRight(DrawingContext dc, double subWidth, bool isAlignCenter);
    private float ValidLayoutedItemCenterorRightPosition(DrawingContext dc, bool isAlignCenter, double subWidth);
    public void AlignJustify(DrawingContext dc, double subWidth, bool isFromInterSectingFloattingItem, bool isParaBidi);
    private bool IsNeedToTrimTextRange(int index, LayoutedWidgetList childWidgets);
    private int GetTabIndex();
    private WTextRange GetTextRange(IWidget widget);
    private bool IsNotWord2013();
    private float GetSpaceDelta(int countAllSpaces, double subWidth, Int32[] widgetSpaces, int index);
    internal void UpdateParaFirstLineHorizontalPositions(ParagraphLayoutInfo paragraphInfo, IWidget widget, Single& x, Single& width);
    internal static bool IsIncludeWidgetInLineHeight(IWidget widget);
    internal static bool IsIncludeTextWidgetInLineHeight(IWidget widget);
}
internal class Syncfusion.Layouting.LayoutedWidgetList : List`1<LayoutedWidget> {
}
internal class Syncfusion.Layouting.Layouter : object {
    private DrawingContext m_drawingContext;
    internal RectangleF m_clientLayoutArea;
    private float m_pageTop;
    private List`1<SplitWidgetContainer> m_footnoteSplittedWidgets;
    private List`1<SplitWidgetContainer> m_endnoteSplittedWidgets;
    private List`1<Entity> m_endnotesInstance;
    private LayoutTab m_previousTab;
    private float m_previousTabWidth;
    private RectangleF m_frameLayoutArea;
    private RectangleF m_frameBounds;
    private float m_wrappingDifference;
    private bool m_isLayoutingTableHeight;
    private bool m_isSkipBottomForFrame;
    private float m_rightPositionOfTabStopInterSectingFloattingItems;
    private float m_maxRightPositionOfTabStopInterSectingFloattingItems;
    private float m_frameHeight;
    internal float m_firstItemInPageYPosition;
    private ushort m_bFlags;
    private byte m_byteFlag;
    private TableOfContent m_layoutingTOC;
    internal IEntity m_fieldentity;
    private int m_currentColumnIndex;
    private int m_countForConsecutiveLimit;
    private float m_ParagraphYPosition;
    internal List`1<float> m_lineSpaceWidths;
    internal float m_effectiveJustifyWidth;
    private WField m_unknownField;
    private bool m_isLayoutTrackChanges;
    private float m_hiddenLineBottom;
    [CompilerGeneratedAttribute]
private LeafLayoutEventHandler LeafLayoutAfter;
    internal float HiddenLineBottom { get; internal set; }
    internal RectangleF FrameBounds { get; internal set; }
    internal bool IsLayoutingVerticalMergeStartCell { get; internal set; }
    internal bool IsNeedToRestartFootnote { get; internal set; }
    internal bool m_canSplitbyCharacter { get; internal set; }
    internal bool m_canSplitByTab { get; internal set; }
    internal bool IsNeedToRestartEndnote { get; internal set; }
    internal bool IsNeedToRestartFootnoteID { get; internal set; }
    internal bool IsNeedToRestartEndnoteID { get; internal set; }
    internal int CurrPageIndex { get; }
    internal bool IsNeedToRelayout { get; internal set; }
    internal bool IsWord2013WordFitLayout { get; internal set; }
    internal bool IsNeedToRelayoutTable { get; internal set; }
    internal int PageNumber { get; }
    internal float RemovedWidgetsHeight { get; internal set; }
    internal bool IsRowFitInSamePage { get; internal set; }
    internal bool IsLayoutingHeaderRow { get; internal set; }
    internal bool IsLayoutingTrackChanges { get; internal set; }
    internal bool AtLeastOneChildFitted { get; internal set; }
    internal IEntity FieldEntity { get; internal set; }
    public DrawingContext DrawingContext { get; public set; }
    internal WField UnknownField { get; internal set; }
    internal RectangleF ClientLayoutArea { get; }
    internal float PageTopMargin { get; }
    internal RectangleF FrameLayoutArea { get; internal set; }
    internal float FrameHeight { get; internal set; }
    internal bool IsSkipBottomForFrame { get; internal set; }
    internal bool IsLayoutingHeaderFooter { get; internal set; }
    internal bool IsLayoutingHeader { get; internal set; }
    internal bool IsFirstItemInLine { get; internal set; }
    internal bool IsLayoutingTableHeight { get; internal set; }
    internal bool IsLayoutingFootnote { get; internal set; }
    internal float WrappingDifference { get; internal set; }
    internal float MaxRightPositionOfTabStopInterSectingFloattingItems { get; internal set; }
    internal float RightPositionOfTabStopInterSectingFloattingItems { get; internal set; }
    internal Dictionary`2<Entity, int> TOCEntryPageNumbers { get; }
    internal List`1<ParagraphItem> tocParaItems { get; }
    internal List`1<WParagraph> HiddenParagraphCollection { get; }
    internal WParagraph LastTOCParagraph { get; }
    internal bool UpdatingPageFields { get; }
    internal bool IsNeedtoAdjustFooter { get; internal set; }
    internal LayoutedWidgetList FootnoteWidgets { get; }
    internal int FootnoteCount { get; }
    internal LayoutedWidgetList LineNumberWidgets { get; }
    internal LayoutedWidgetList EndnoteWidgets { get; }
    internal List`1<TrackChangesMarkups> TrackChangesMarkups { get; }
    internal LayoutedWidgetList BehindWidgets { get; }
    internal int NumberOfBehindWidgetsInHeader { get; internal set; }
    internal int NumberOfBehindWidgetsInFooter { get; internal set; }
    internal List`1<int> EndNoteSectionIndex { get; }
    internal IWSection CurrentSection { get; }
    internal List`1<int> FootNoteSectionIndex { get; }
    internal List`1<SplitWidgetContainer> FootnoteSplittedWidgets { get; internal set; }
    internal List`1<SplitWidgetContainer> EndnoteSplittedWidgets { get; internal set; }
    internal List`1<Entity> EndnotesInstances { get; internal set; }
    internal List`1<FloatingItem> FloatingItems { get; }
    internal List`1<FloatingItem> WrapFloatingItems { get; }
    internal WParagraph DynamicParagraph { get; internal set; }
    internal WTable DynamicTable { get; internal set; }
    internal List`1<Entity> NotFittedFloatingItems { get; internal set; }
    internal LayoutedWidget MaintainltWidget { get; internal set; }
    internal Int32[] m_interSectingPoint { get; internal set; }
    internal IWidgetContainer PageEndWidget { get; internal set; }
    internal bool IsForceFitLayout { get; internal set; }
    internal LayoutTab PreviousTab { get; internal set; }
    internal float PreviousTabWidth { get; internal set; }
    internal bool IsTabWidthUpdatedBasedOnIndent { get; internal set; }
    internal TableOfContent LayoutingTOC { get; internal set; }
    internal int CurrentColumnIndex { get; internal set; }
    internal int CountForConsecutiveLimit { get; internal set; }
    internal float ParagraphYPosition { get; internal set; }
    internal bool IsTwoLinesLayouted { get; internal set; }
    internal bool IsFootnoteHeightAdjusted { get; internal set; }
    internal List`1<float> LineSpaceWidths { get; }
    [CompilerGeneratedAttribute]
public void add_LeafLayoutAfter(LeafLayoutEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LeafLayoutAfter(LeafLayoutEventHandler value);
    internal float get_HiddenLineBottom();
    internal void set_HiddenLineBottom(float value);
    internal RectangleF get_FrameBounds();
    internal void set_FrameBounds(RectangleF value);
    internal bool get_IsLayoutingVerticalMergeStartCell();
    internal void set_IsLayoutingVerticalMergeStartCell(bool value);
    internal bool get_IsNeedToRestartFootnote();
    internal void set_IsNeedToRestartFootnote(bool value);
    internal bool get_m_canSplitbyCharacter();
    internal void set_m_canSplitbyCharacter(bool value);
    internal bool get_m_canSplitByTab();
    internal void set_m_canSplitByTab(bool value);
    internal bool get_IsNeedToRestartEndnote();
    internal void set_IsNeedToRestartEndnote(bool value);
    internal bool get_IsNeedToRestartFootnoteID();
    internal void set_IsNeedToRestartFootnoteID(bool value);
    internal bool get_IsNeedToRestartEndnoteID();
    internal void set_IsNeedToRestartEndnoteID(bool value);
    internal int get_CurrPageIndex();
    internal bool get_IsNeedToRelayout();
    internal void set_IsNeedToRelayout(bool value);
    internal bool get_IsWord2013WordFitLayout();
    internal void set_IsWord2013WordFitLayout(bool value);
    internal bool get_IsNeedToRelayoutTable();
    internal void set_IsNeedToRelayoutTable(bool value);
    internal int get_PageNumber();
    internal float get_RemovedWidgetsHeight();
    internal void set_RemovedWidgetsHeight(float value);
    internal bool get_IsRowFitInSamePage();
    internal void set_IsRowFitInSamePage(bool value);
    internal bool get_IsLayoutingHeaderRow();
    internal void set_IsLayoutingHeaderRow(bool value);
    internal bool get_IsLayoutingTrackChanges();
    internal void set_IsLayoutingTrackChanges(bool value);
    internal bool get_AtLeastOneChildFitted();
    internal void set_AtLeastOneChildFitted(bool value);
    internal IEntity get_FieldEntity();
    internal void set_FieldEntity(IEntity value);
    public sealed virtual DrawingContext get_DrawingContext();
    public void set_DrawingContext(DrawingContext value);
    internal WField get_UnknownField();
    internal void set_UnknownField(WField value);
    internal RectangleF get_ClientLayoutArea();
    internal float get_PageTopMargin();
    internal RectangleF get_FrameLayoutArea();
    internal void set_FrameLayoutArea(RectangleF value);
    internal float get_FrameHeight();
    internal void set_FrameHeight(float value);
    internal bool get_IsSkipBottomForFrame();
    internal void set_IsSkipBottomForFrame(bool value);
    internal bool get_IsLayoutingHeaderFooter();
    internal void set_IsLayoutingHeaderFooter(bool value);
    internal bool get_IsLayoutingHeader();
    internal void set_IsLayoutingHeader(bool value);
    internal bool get_IsFirstItemInLine();
    internal void set_IsFirstItemInLine(bool value);
    internal bool get_IsLayoutingTableHeight();
    internal void set_IsLayoutingTableHeight(bool value);
    internal bool get_IsLayoutingFootnote();
    internal void set_IsLayoutingFootnote(bool value);
    internal float get_WrappingDifference();
    internal void set_WrappingDifference(float value);
    internal float get_MaxRightPositionOfTabStopInterSectingFloattingItems();
    internal void set_MaxRightPositionOfTabStopInterSectingFloattingItems(float value);
    internal float get_RightPositionOfTabStopInterSectingFloattingItems();
    internal void set_RightPositionOfTabStopInterSectingFloattingItems(float value);
    internal Dictionary`2<Entity, int> get_TOCEntryPageNumbers();
    internal List`1<ParagraphItem> get_tocParaItems();
    internal List`1<WParagraph> get_HiddenParagraphCollection();
    internal WParagraph get_LastTOCParagraph();
    internal bool get_UpdatingPageFields();
    internal bool get_IsNeedtoAdjustFooter();
    internal void set_IsNeedtoAdjustFooter(bool value);
    internal LayoutedWidgetList get_FootnoteWidgets();
    internal int get_FootnoteCount();
    internal LayoutedWidgetList get_LineNumberWidgets();
    internal LayoutedWidgetList get_EndnoteWidgets();
    internal List`1<TrackChangesMarkups> get_TrackChangesMarkups();
    internal LayoutedWidgetList get_BehindWidgets();
    internal int get_NumberOfBehindWidgetsInHeader();
    internal void set_NumberOfBehindWidgetsInHeader(int value);
    internal int get_NumberOfBehindWidgetsInFooter();
    internal void set_NumberOfBehindWidgetsInFooter(int value);
    internal List`1<int> get_EndNoteSectionIndex();
    internal IWSection get_CurrentSection();
    internal List`1<int> get_FootNoteSectionIndex();
    internal List`1<SplitWidgetContainer> get_FootnoteSplittedWidgets();
    internal void set_FootnoteSplittedWidgets(List`1<SplitWidgetContainer> value);
    internal List`1<SplitWidgetContainer> get_EndnoteSplittedWidgets();
    internal void set_EndnoteSplittedWidgets(List`1<SplitWidgetContainer> value);
    internal List`1<Entity> get_EndnotesInstances();
    internal void set_EndnotesInstances(List`1<Entity> value);
    internal List`1<FloatingItem> get_FloatingItems();
    internal List`1<FloatingItem> get_WrapFloatingItems();
    internal WParagraph get_DynamicParagraph();
    internal void set_DynamicParagraph(WParagraph value);
    internal WTable get_DynamicTable();
    internal void set_DynamicTable(WTable value);
    internal List`1<Entity> get_NotFittedFloatingItems();
    internal void set_NotFittedFloatingItems(List`1<Entity> value);
    internal LayoutedWidget get_MaintainltWidget();
    internal void set_MaintainltWidget(LayoutedWidget value);
    internal Int32[] get_m_interSectingPoint();
    internal void set_m_interSectingPoint(Int32[] value);
    internal IWidgetContainer get_PageEndWidget();
    internal void set_PageEndWidget(IWidgetContainer value);
    internal bool get_IsForceFitLayout();
    internal void set_IsForceFitLayout(bool value);
    internal LayoutTab get_PreviousTab();
    internal void set_PreviousTab(LayoutTab value);
    internal float get_PreviousTabWidth();
    internal void set_PreviousTabWidth(float value);
    internal bool get_IsTabWidthUpdatedBasedOnIndent();
    internal void set_IsTabWidthUpdatedBasedOnIndent(bool value);
    internal TableOfContent get_LayoutingTOC();
    internal void set_LayoutingTOC(TableOfContent value);
    internal int get_CurrentColumnIndex();
    internal void set_CurrentColumnIndex(int value);
    internal int get_CountForConsecutiveLimit();
    internal void set_CountForConsecutiveLimit(int value);
    internal float get_ParagraphYPosition();
    internal void set_ParagraphYPosition(float value);
    internal bool get_IsTwoLinesLayouted();
    internal void set_IsTwoLinesLayouted(bool value);
    internal bool get_IsFootnoteHeightAdjusted();
    internal void set_IsFootnoteHeightAdjusted(bool value);
    internal List`1<float> get_LineSpaceWidths();
    public void Layout(IWidgetContainer widget, ILayoutProcessHandler handler, DrawingContext dc);
    private void RemoveLayoutedFootnoteWidget();
    private void RemoveSplitStringWidget(LayoutedWidget ltwidget);
    private void LayoutTrackChangesBalloon(Layouter layouter);
    private LayoutedWidget GetBalloonLayoutedWidget(WTextBody changedText, float yPosition, List`1<TrackChangesMarkups> updatedTrackChangesMarkups, Layouter layouter);
    private float GetBalloonYposition(float yPosition, List`1<TrackChangesMarkups> updatedTrackChangesMarkups, Layouter layouter);
    private void AdjustBalloonPosition(TrackChangesMarkups trackChangesMarkups, List`1<TrackChangesMarkups> updatedTrackChangesMarkups, float clientAreaY, Layouter layouter);
    private void IsCurrentWidgetNeedToLayout(LayoutContext lc, int columnIndex, Boolean& isSplittedWidget, Boolean& isCurrentWidgetNeedToLayout, bool isContinuousSection);
    private sealed virtual override void Syncfusion.Layouting.ILCOperator.SendLeafLayoutAfter(LayoutedWidget ltWidget, bool isFromTOCLinkStyle);
    internal void ResetWordLayoutingFlags(bool canSplitByCharacter, bool canSplitByTab, bool isFirstItemInLine, List`1<float> lineSpaceWidths, float width);
    internal static float GetLeftMargin(WSection section);
    internal static float GetRightMargin(WSection section);
    internal float GetCurrentPageHeaderHeight();
    internal static float GetCurrentPageRightPosition(WSection section);
}
internal class Syncfusion.Layouting.LayoutInfo : object {
    private ushort m_bFlags;
    private ChildrenLayoutDirection m_childrenLayoutDirection;
    private SizeF m_size;
    private SyncFont m_font;
    public bool IsClipped { get; public set; }
    public SizeF Size { get; public set; }
    public bool IsSkip { get; public set; }
    public bool IsSkipBottomAlign { get; public set; }
    public bool IsVerticalText { get; public set; }
    public bool IsLineContainer { get; public set; }
    public ChildrenLayoutDirection ChildrenLayoutDirection { get; }
    public bool IsLineBreak { get; public set; }
    internal bool IsLineNumberItem { get; internal set; }
    public bool TextWrap { get; public set; }
    public bool IsPageBreakItem { get; public set; }
    public bool IsFirstItemInPage { get; public set; }
    public bool IsKeepWithNext { get; public set; }
    public bool IsHiddenRow { get; public set; }
    public SyncFont Font { get; public set; }
    public LayoutInfo(ChildrenLayoutDirection childLayoutDirection);
    public sealed virtual bool get_IsClipped();
    public sealed virtual void set_IsClipped(bool value);
    public sealed virtual SizeF get_Size();
    public sealed virtual void set_Size(SizeF value);
    public sealed virtual bool get_IsSkip();
    public sealed virtual void set_IsSkip(bool value);
    public sealed virtual bool get_IsSkipBottomAlign();
    public sealed virtual void set_IsSkipBottomAlign(bool value);
    public sealed virtual bool get_IsVerticalText();
    public sealed virtual void set_IsVerticalText(bool value);
    public sealed virtual bool get_IsLineContainer();
    public void set_IsLineContainer(bool value);
    public sealed virtual ChildrenLayoutDirection get_ChildrenLayoutDirection();
    public sealed virtual bool get_IsLineBreak();
    public sealed virtual void set_IsLineBreak(bool value);
    internal bool get_IsLineNumberItem();
    internal void set_IsLineNumberItem(bool value);
    public sealed virtual bool get_TextWrap();
    public sealed virtual void set_TextWrap(bool value);
    public sealed virtual bool get_IsPageBreakItem();
    public sealed virtual void set_IsPageBreakItem(bool value);
    public sealed virtual bool get_IsFirstItemInPage();
    public sealed virtual void set_IsFirstItemInPage(bool value);
    public sealed virtual bool get_IsKeepWithNext();
    public sealed virtual void set_IsKeepWithNext(bool value);
    public sealed virtual bool get_IsHiddenRow();
    public sealed virtual void set_IsHiddenRow(bool value);
    public sealed virtual SyncFont get_Font();
    public sealed virtual void set_Font(SyncFont value);
}
internal enum Syncfusion.Layouting.LayoutState : Enum {
    public int value__;
    public static LayoutState Unknown;
    public static LayoutState NotFitted;
    public static LayoutState Splitted;
    public static LayoutState WrapText;
    public static LayoutState Fitted;
    public static LayoutState Breaked;
    public static LayoutState DynamicRelayout;
}
internal class Syncfusion.Layouting.LCContainer : LayoutContext {
    protected int m_curWidgetIndex;
    protected LayoutedWidget m_currChildLW;
    protected bool m_bAtLastOneChildFitted;
    protected IWidgetContainer WidgetContainer { get; }
    protected IWidget CurrentChildWidget { get; }
    public LCContainer(IWidgetContainer widget, ILCOperator lcOperator, bool isForceFitLayout);
    protected IWidgetContainer get_WidgetContainer();
    protected IWidget get_CurrentChildWidget();
    public virtual LayoutedWidget Layout(RectangleF rect);
    private void AddToCollectionAndRelayout(LayoutContext childContext);
    private bool IsFloatingTextBodyItem(IWidget widget);
    private float GetRightPosition(float rightPosition, Boolean& isNeedToUpdateXPosition);
    private bool IsSkipParaMarkItem(IWidget widget);
    private bool IsSkipParagraphBreak(IWidget widget);
    private bool CheckKeepWithNextForHiddenPara(IEntity widget);
    private bool IsSizeExceedsClientSize(WParagraph paragraph);
    private IEntity GetPreviousParagraphDeletedItem(Entity childWidget);
    protected virtual LayoutContext CreateNextChildContext();
    private void RemoveLineLayoutedWidgetFromTable();
    private bool IsInSameTextBody(WField field);
    private void UpdateAboluteTabPosition(WAbsoluteTab absoluteTab);
    private bool IsNeedToShowComments(TextBodyItem bodyItem);
    private void CreateBalloonForComments(IWidget childWidget);
    private bool IsNeedToShowDeletedMarkUp(TextBodyItem bodyItem);
    private bool IsNeedToShowFormattingMarkUp(TextBodyItem bodyItem);
    private bool IsNeedToCreateNewBalloonForCFormat(ParagraphItem paragraphItem, string newBalloonValue);
    private void CreateBalloonForDeletedParagraphItem(IWidget childWidget);
    private void AppendContentsForDeletedTextRange(TrackChangesMarkups trackChangesMarkups, IWidget childWidget);
    private void AppendContentsForDeletedImage(TrackChangesMarkups trackChangesMarkups, IWidget childWidget);
    private void CreateBalloonForDeletedParagraphText(IWidget childWidget);
    private void AppendContentsForDeletedParagraph(TrackChangesMarkups trackChangesMarkups, IWidget childWidget);
    private void CreateBalloonValueForCFormat(IWidget childWidget);
    private void RemoveSameValues(Dictionary`2<int, object> dicToRemove, Dictionary`2<int, object> standardDic);
    private void CreateBalloonValueForPFormat(IWidget childWidget);
    private void CreateBalloonValueForListFormat(IWidget childWidget);
    private void CreateBalloonValueForTableFormat(IWidget childWidget);
    private bool LastRowHaveDynamicPara(WTableRow row);
    private bool IsLastItemTable(WTableCell cell);
    private bool IsNeedToSkipMovingBreakItem(WParagraph para);
    private void UpdateExpressionField(IWidget childWidget);
    internal LayoutedWidget CheckNullConditionAndReturnltwidget();
    private void FindIntersectPointAndRemovltWidgetForTable();
    private int GetIntersectingWidgetItem(LayoutedWidget ltwidget, float yPosition, int i);
    private void LayoutFootnoteSplittedWidgets(IWidget childWidget);
    private void LayoutEndnoteSplittedWidgets(IWidget childWidget);
    private bool IsParagraphSplittedByPageBreak(WParagraph paragraph);
    private bool IsPreviousParagraphHaveSectionBreak(WParagraph paragraph);
    private bool IsHeaderContentExceedsTopMargin();
    private void UpdateTextBodyItemPosition(IWidget childWidget);
    internal float GetFootnoteHeight();
    private bool IsUpdatedParagraph(ParagraphLayoutInfo paraInfo);
    private void UpdateParagraphMargins(WParagraph paragraph);
    protected virtual void MarkAsNotFitted(LayoutContext childContext, bool isFootnote);
    internal bool IsNeedToSetNotFitted(bool isKeep);
    private IWidget GetPriviousSibling(IWidget widget);
    private bool IsNotFittedItem(IWidget widget);
    internal void RemoveAutoHyphenatedString(IWidget SplittedWidget, bool isAutoHyphen);
    private void UpdateltBounds(LayoutedWidget widget);
    private float GetMaximumRight(LayoutedWidget widget);
    private float GetMaximumBottom(LayoutedWidget widget);
    private string GetPeekWord(string hyphenatedLine);
    private bool IsPageBreakInTable(IWidget LeafWidget);
    internal WParagraph GetParagraph();
    private void RemoveXmlMathParaItems(WParagraph paragraph);
    protected virtual void MarkAsFitted(LayoutContext childContext);
    private bool IsHorizantalRule(IWidget currentChildWidget);
    private bool IsNeedToCreateBalloonForBreakCharacterFormat(WParagraph paragraph, String& breakCFormatBalloonValue);
    private string GetCFormatBallloonValue(WCharacterFormat characterFormat);
    private string GetPreviousFormattedBalloonValue();
    private bool HasCommentMark(string commentId);
    protected void ShiftTrackChangesBalloons(float lineYPostion, float bottomPositionWithLineSpacing, float bottomPositionWithoutLineSpacing);
    private bool IsNeedToLayoutFootnoteTextBody(LayoutContext childContext);
    private void MarkAsWrapText(LayoutContext childContext);
    private bool IsTableNextParagraphNeedToSplit();
    protected virtual void MarkAsSplitted(LayoutContext childContext);
    private void UpdateSplittedWidgetIndex(LayoutContext childContext);
    protected virtual void MarkAsBreaked(LayoutContext childContext);
    protected virtual void UpdateClientArea();
    private RectangleF UpdateSpacingInfo(RectangleF bounds, LayoutedWidget layoutedWidget);
    private bool IsNextTextBodyItemIsParagraph(WParagraph paragraph);
    private bool IsInFrame(WTable table);
    private void UpdateFrameBounds(RectangleF bounds, bool isAtleastHeight);
    protected virtual void ChangeChildsAlignment();
    protected bool NextChildWidget();
    internal void SplitedUpWidget(IWidget splitWidget, bool isEndNoteSplitWidgets);
    internal void SplitedUpWidget(IWidget splitWidget, bool isEndNoteSplitWidgets, bool IsInFrame);
    protected void SaveChildContextState(LayoutContext childContext);
    private float GetTableHeight(WTable table);
    protected virtual void DoLayoutChild(LayoutContext childContext);
    private float GetCharacterPositionOfFloatingitem(LayoutContext childContext);
    private bool IsSplitLine(RectangleF clientArea, WParagraph ownerpara, bool hasTextInRange);
    private bool HasTextInRange(LayoutContext childContext);
    private bool IsNeedToUpdateFloatingEntityBounds(Entity entity);
    private FloatingItem GetFloatingItemFromCollection(Entity entity);
    protected void AddChildLW(LayoutContext childContext);
    private void LayoutFootnoteOfLayoutedLines(LayoutedWidget layoutedWidget);
    private bool IsLastFootnoteNotInSamePage(LayoutedWidget layoutedWidget);
    private void UpdateParagraphYPosition(LayoutedWidget widget, LayoutContext ltwidget);
    private void shiftYPosition(LayoutedWidget ltwidget, int index, float yposition);
    private float GetsFrameHeight(Int32& index, LayoutedWidget LayoutedWidget, float frameheight);
    private void UpdateFloatingItemBounds(float yPosition);
    private RectangleF ResetAdjustedboundsBasedOnWrapPolygon(FloatingItem floatingItem, RectangleF currChildLWBounds);
    private void SplitEndNoteWidgets();
    private void AddBehindWidgets(LayoutedWidget ltWidget);
    private bool CheckWidgetWrappingType(IWidget widget);
    private bool CheckWidgetWrappingTypeAndHorizontalOrigin(IWidget widget);
    private bool CheckWrappingTypeAndHorizontalOrigin(TextWrappingStyle textWrappingStyle, HorizontalOrigin horizontalOrigin);
    private void IsDynamicRelayoutOccurByFrame(LayoutContext childContext);
    private float GetFrameYPosition(WParagraphFormat paraFormat, int index);
    private float GetPreviousItemBottom(int index);
    private float GetPreviousLineBottom(LayoutedWidget lineContainer, float frameBottom);
    private bool IsLastItemInFrame(WParagraph para);
    private bool IsInSameFrame(WParagraph para, WTable table);
    private void UpdateLWBounds(LayoutContext childContext);
    private bool IsNeedToSkipRightPad(WParagraph paragraph);
    private int GetPreviousItemIndex(int index);
    private bool IsFloatingFrame(WParagraph paragraph);
    private bool IsBottomPositionNeedToBeUpdate(LayoutContext childContext);
    protected bool IsNonRenderableItem(IWidget widget);
    private bool IsInSection(BlockContentControl blockContentControl);
    private void AddFrameBounds();
    private void UpdateFrameBounds();
    private Entity GetFirstFrameItem(Entity entity, List`1<Entity> frameEntities);
    private bool IsFloatingEntityExist(Entity entity);
    private void UpdateFrameBounds(WParagraph paragraph);
    private bool IsNeedToConsiderAtleastFrameHeight(LayoutedWidget paraLayoutedWidget, LayoutedWidget lastLineLayoutedWidget);
    private void UpdateFrameBounds(WTable table);
    protected virtual void UpdateHorizontalAlignment(short xAlignment);
    private void UpdateVerticalAlignment(short yAlginment);
    private void CommitKeepWithNext(IWidget& splittedWidget, bool isKeep);
    private WSection GetSection();
    private bool RemoveltWidgets(Boolean& isLastTocParagraphRemoved, LayoutedWidget lwtWidget, IWidget& splittedWidget, bool isBlockContentControlChild, Boolean& isWidgetsRemoved, Int32& splittedWidgetIndex);
    private void IsEndOfTOC();
    private bool IsEndOfTocParagraphLayouted();
    private bool IsLastTOCParagraph(Entity entity);
    private void CommitWithKeepWithNexForWord2013Format(IWidget& splittedWidget, WSection section, Boolean& isLastTocParagraphRemoved);
    private bool IsNeedToRemoveItems(LayoutedWidget ltWidget);
    private bool RemoveItemsFromltWidgets(IWidget& splittedWidget, Boolean& isLastTocParagraphRemoved, LayoutedWidget lwtWidget, bool isBlockContentControlChild, Boolean& isWidgetsRemoved, Int32& splittedWidgetIndex);
    private int StartRowIndex(LayoutedWidget tableWidget, Int32& rowCount);
    private bool IsAllTextBodyItemHavingKeepWithNext();
    private bool IsNeedToCommitKeepWithNext();
    internal bool SetKeepWithNextForBlockContentControl(IWidget widget, Boolean& isKeepWithNext);
}
internal class Syncfusion.Layouting.LCLineContainer : LCContainer {
    internal bool IsFirstItemInPage { get; internal set; }
    public LCLineContainer(IWidgetContainer container, ILCOperator lcOperator, bool isForceFitLayout);
    internal bool get_IsFirstItemInPage();
    internal void set_IsFirstItemInPage(bool value);
    protected virtual void DoLayoutChild(LayoutContext childContext);
    private void UpdatePositionByLineTextWrap(WParagraph paragraph);
    private bool SkipUpdatingPosition(WParagraph paragraph);
    private bool IsNeedToUpdateIntersectingBounds(WParagraph currentParagraph);
    private void UpdateItersectingFloatingItemBounds();
    protected virtual LayoutContext CreateNextChildContext();
    protected virtual void MarkAsNotFitted(LayoutContext childContext, bool isFootnote);
    private void MoveLayoutedLineToNextPage(WParagraph paragraph, LayoutContext childContext);
    private void RemoveCommentMarkUps(float yPos);
    private bool IsNeedToSplitPreviousItem(LayoutedWidget widget, LayoutContext childContext);
    private void IsFloatingItemFitted(Layouter layouter, LayoutContext childContext);
    private void RemoveTrackChangesBalloon(float yPos);
    private void RemoveAutoHyphenatedString(IWidget SplittedWidget, bool isAutoHyphen);
    private void UpdateltBounds(LayoutedWidget widget);
    private float GetMaximumRight(LayoutedWidget widget);
    private float GetMaximumBottom(LayoutedWidget widget);
    private string GetPeekWord(string hyphenatedLine);
    private bool IsLineContainOnlyNonRenderableItem(LayoutedWidget lineWidget);
    private bool IsLineContainsOnlyMathItems(LayoutedWidget lineWidget);
    private void IsEndPage(WParagraph paragraph, bool keepFollow);
    private bool IsNeedToResetSplitWidget(LayoutContext childContext, WParagraph paragraph, bool isSplittedLine);
    private void UpdateFootnoteWidgets();
    private bool IsKeepLineTogether(LayoutContext childContext);
    private bool IsLastParagraphNeedToBeLayout(LayoutContext childContext);
    private bool IsNeedToLayout(WTableCell ownerTableCell);
    private bool IsParagraphContainsBookMarksOnly();
    private bool IsNeedToNotFitTheItem();
    protected virtual void MarkAsFitted(LayoutContext childContext);
    protected virtual void MarkAsSplitted(LayoutContext childContext);
    protected virtual void UpdateClientArea();
    private bool IsRTLChar(char character);
    private bool IsRTLText(string text);
    private bool IsLineContainsRTL();
    protected virtual void ChangeChildsAlignment();
    private void TrackChangesAlignment(float subWidth);
    private void UpdateXPositionOfCommentBalloon();
    private bool IsDisplayMath();
    private bool HasTextRangeBidi(LayoutedWidgetList layoutedWidgets);
    private void UpdateCharacterRange(int i, int rtlStartIndex, List`1<bool> splittedWidgetBidiValues, List`1& characterRangeTypes);
    private LayoutedWidget GetNextValidWidget(int startIndex, LayoutedWidgetList layoutedWidgets);
    private bool ShiftWidgetsForRTLLayouting(double subWidth, double subWidthBeforeSpaceTrim, HAlignment alignment, bool hasIntersectingFloatingItem, bool isLastLine, bool isContainsRTL);
    private bool ShiftWidgetsForRTLLayouting(LayoutedWidget resultedWidget);
    private float GetStartPosition(bool paraBidi, HAlignment alignment, double subWidth, double trimmedSpaceDiff, bool isAutoFrame);
    private void UpdateBounds(LayoutedWidgetList reorderedWidgets, bool paraBidi, HAlignment alignment, double subWidth, double trimmedSpaceDiff, bool isAutoFrame);
    private void UpdateBounds(LayoutedWidget childltWidget, float lineX);
    private float GetFirstNonFloatingItemX();
    private LayoutedWidgetList ReorderWidgets(List`1<CharacterRangeType> characterRangeTypes, List`1<bool> splittedWidgetBidiValues, bool paraBidi);
    private bool IsNumberNonReversingCharacter(LayoutedWidget childltWidget);
    private bool IsNumberReverseLangForSlash(short id);
    private bool IsNumberReverseLangForOthers(short id);
    private bool IsInsertWordSplitToLeft(List`1<CharacterRangeType> characterRangeTypes, List`1<bool> splittedWidgetBidiValues, int widgetIndex);
    private float GetListWidthToShiftLine();
    private void ShiftLineForListWidth();
    private void ShiftRTLAndNormalText(int lastRtlTextIndex, int engTextIndex, bool isNormalText);
    private void ShiftNormalText(int engTextIndex);
    private void ShiftRTLText(int rtlTextIndex, bool isBidi, bool isNormalText);
    private void ShiftWidgets(int startIndex, int endIndex);
    private float GetLastTabWidth(WParagraphFormat paraFormat, int tabsCount);
    private void SplitLineBasedOnInterSectingFlotingEntity(LayoutedWidget m_backupWidget, RectangleF& interSectingFloattingItem, LayoutedWidget m_resulttedWidgt);
    private int GetFirstInlineItemIndex(LayoutedWidget ltWidget);
    private RectangleF InterSectingFloattingItem(RectangleF rect);
    private void UpdateSubWidthBasedOnTextWrap(WParagraph paragraph, Double& subWidth, float xPosition, float rightMargin);
    protected virtual void UpdateHorizontalAlignment(short xAlignment);
    internal bool IsTOC(WParagraph para);
    protected virtual void DoLayoutAfter();
    private bool SkipUpdatingPageNumber(WParagraph paragraph);
    private bool IsParagraphContainsInvalidItemsOnly(WParagraph para, int pageBreakIndex);
    private bool IsNullOrWhiteSpace(string text);
    private bool IsTOCNeedNotToBeUpdated(WParagraph paragraph, SplitWidgetContainer swc);
    private int GetValidParaItemIndex(WParagraph paragraph, int paraItemIndex);
    private void UpdateTOCPageNumber(WParagraph para);
    private bool CheckHeadingStyle(WParagraph para);
    private bool CheckTableOfFiguresLabel(WParagraph para);
}
internal class Syncfusion.Layouting.LCTable : LayoutContext {
    private static float DEF_MIN_WIDTH;
    private bool m_bHeaderRepeat;
    private bool isRowMoved;
    private int m_currHeaderRowIndex;
    private int m_currRowIndex;
    private int m_currColIndex;
    private LayoutedWidget m_currRowLW;
    private LayoutedWidget m_currCellLW;
    protected bool m_bAtLastOneCellFitted;
    private SplitWidgetContainer[] m_splitedCells;
    private LayoutState m_blastRowState;
    private SplitTableWidget m_spitTableWidget;
    private WTable m_table;
    private bool m_isTableSplitted;
    private LayoutArea m_rowLayoutArea;
    private List`1<LayoutedWidget> m_verticallyMergeStartLW;
    private float m_headerRowHeight;
    private float m_verticallyMergedCellFootnoteHeight;
    private RectangleF TableClientActiveArea;
    private float LayoutedHeaderRowHeight;
    private bool IsFirstItemInPage { get; private set; }
    public ILayoutInfo TableLayoutInfo { get; }
    public ITableWidget TableWidget { get; }
    public int CurrRowIndex { get; }
    internal float LeftPad { get; }
    public LCTable(SplitTableWidget splitWidget, ILCOperator lcOperator, bool isForceFitLayout);
    public LCTable(ITableWidget table, ILCOperator lcOperator, bool isForceFitLayout);
    private bool get_IsFirstItemInPage();
    private void set_IsFirstItemInPage(bool value);
    public ILayoutInfo get_TableLayoutInfo();
    public ITableWidget get_TableWidget();
    public int get_CurrRowIndex();
    internal float get_LeftPad();
    private Entity GetBaseEntity(Entity entity);
    private Entity GetParentBaseEntity(Entity entity);
    public virtual LayoutedWidget Layout(RectangleF rect);
    private void ClearVerticalMergeStartLW();
    private bool IsLayoutedFloatingTableInTextBodyItems();
    private bool IsLayoutedFloatingTableInBlockContentControl(LayoutedWidget ltWidget);
    private bool IsTableRelayout(RectangleF& tableClientArea, int startingRowIndex);
    private bool IsNeedToMoveRow(FloatingItem item);
    private bool IsInTextBoxOrShape(WTable table);
    private bool IsLayoutedFloatingTableInWTablacell();
    private bool IsContainsTable(FloatingItem floatingItem);
    private bool GetLayoutedFloatingTable();
    private void FootnoteRowLayouting();
    private bool IsAdjacentCellHasFootnote();
    private void RemoveFootnoteFromLayouter();
    private bool IsWrappedTable();
    private void UpdateTableLWBounds(bool isWrappedTable, bool isSplittedtable);
    internal Entity GetOwnerTable(Entity entity);
    private bool IsNeedToSkipSplittingTable();
    private void RelayoutingTable();
    private void UpdateTableKeepWithNext();
    private void UpdateAbsoluteTablePosition();
    private MarginsF InitializePageMargins();
    private void AdjustClientAreaBasedOnTextWrap(SizeF size, RectangleF& rect, float rowHeight);
    private float GetHeightofTable();
    internal RectangleF AdjustTextWrappingBounds(FloatingItem floatingItem, RectangleF clientLayoutArea, SizeF size, int wrapItemIndex, int i, RectangleF rect, RectangleF textWrappingBounds, TextWrappingStyle textWrappingStyle, bool allowOverlap);
    private RectangleF AdjustWrappingBounds(RectangleF textWrappingBounds, float DistanceLeft, float DistanceRight, float DistanceTop, float DistanceBottom);
    private bool IsFloatingItemIntersect(int wrapItemIndex, int i, RectangleF rect, RectangleF textWrappingBounds, TextWrappingStyle textWrappingStyle, bool allowOverlap, SizeF size);
    private bool IsNeedToUpdateTableYPosition(RectangleF textWrappingBounds, RectangleF rect, Single& remainingHeightOfFloatingItem, float rowHeight);
    private bool IsFloatingItemIntersectForTopAndBottom(int wrapItemIndex, int i, RectangleF rect, RectangleF textWrappingBounds, TextWrappingStyle textWrappingStyle, bool allowOverlap, SizeF size);
    private bool IsAdjustTightAndThroughBounds(TextWrappingStyle textWrappingStyle, int i);
    private bool IsTableMoveToNextPage(TextBodyItem widget);
    private float GetFirstRowWidth();
    private bool IsRowNotFittedBasedOnFloatingItem();
    private float GetMaxCellHeight(float cellMinHeight);
    private IWidget CreateRowLayoutedWidget();
    private void InitCellSpacing(WTableRow row);
    private void LayoutRow(IWidget rowWidget);
    private void LayoutRow(IWidget rowWidget, Boolean& isFitRowByUsingVerticalDistance);
    private bool IsInExactlyRow(Entity entity);
    private bool IsFitRowByUsingVerticalDistance();
    private bool IsRowSplitByPageBreakBefore(WTableRow tableRow);
    private bool CheckFootnoteInRowIsSplitted(LayoutContext childContext);
    private LayoutArea CreateRowLayoutArea(WTableRow row, float bottomPad);
    private void GetCellsMaxTopAndBottomPadding(WTableRow row, Single& maxTopPading, Single& maxBottomPadding, Single& maxTopMargin, Single& maxBottomMargin);
    private void UpdateCellsMaxTopAndBottomPadding(WTableRow row, float maxTopPading, float maxBottomPading);
    private float UpdateCellsBottomPaddingAndMargin(WTableRow row, float maxBottomPading, float maxBottomMargin);
    private void CommitRow();
    private bool IsRowMoveToNextPageBasedOnNestedFloatingTableBottom(LayoutedWidget currRowWidget);
    private bool IsNeedToLayoutHeaderRow();
    private void UpdateVerticalMergedCell(LayoutedWidget rowLW, bool isNextRowNotFitted);
    private bool IsRowHasExactlyHeight(Entity entity);
    private void UpdateUnorderedFootNotesBounds(int unOrderCount);
    private int GetFootNoteID(IWidget widget);
    private bool IsFootNote(IWidget widget);
    private void UpdateSplittedVerticalMergeCell(LayoutContext lc, LayoutedWidget mergeStartLW, RowLayoutInfo rowInfo, LayoutedWidget childLW, LayoutedWidget rowLW, int currentIndex, bool isNextRowNotFitted);
    private bool IsHeaderRow(WTableRow row);
    private LayoutedWidget GetVerticalMergeStartLW(LayoutedWidget verticalMergeEndLW);
    private void UpdateVerticalTextCellLW();
    private void UpdateSplittedCells();
    private IWidget GetChildParaWidget(LayoutedWidget layoutedWidget);
    private LayoutedWidget GetChildParagraphWidgets(LayoutedWidget layoutedWidget);
    private bool IsTableWidget(IWidget widget);
    private bool IsNotEmptySplittedCell();
    private bool IsRowNeedToBeSplitted(bool isFirstItemInPage);
    private bool IsAllRowHavingKeepWithNext();
    private bool IsCellhMergeTillEnd(WTableRow currRow, int maxColIndex);
    private double GetRightPadValue(WTableRow currRow, int maxColIndex);
    private void UpdateRowLWBounds();
    private void NextRowIndex();
    private bool IsNeedToLayoutHeaderRow(WTable table, int currRowIndex);
    private bool SkipLayoutingHeaderRow();
    private bool IsCurrentPageFirstItemPicture(Single& pictureHeight);
    private bool IsSplittedParagrapghHasPicture(SplitWidgetContainer widgetContainer, Single& pictureHeight, float cellPadding);
    private bool IsAnyOfCellFirstItemPicture(Single& pictureHeight);
    private List`1<WPicture> FindPicturesFromTableCell();
    private WPicture FindPictureInParagraph(WParagraph paragraph);
    private void LayoutHeaderRow(WTableRow row);
    private void UpdateHeaderRowWidget();
    private bool IsInFrame();
    private void UpdateCellHeight(int column);
    private void UpdateVerticalCellAlignment(LayoutedWidget cellLW);
    private void UpdateVerticalTextCellAlignment(LayoutedWidget cellLW);
    private float GetDisplacementValue(LayoutedWidget child, float cellBottom, bool isRemainingSpace, float remainingSpace);
    private bool IsCellHavingShapes(LayoutedWidget child);
    private float FindMaximumBottomOfFloattingItem(LayoutedWidget child);
    private bool IsLayoutedWidgetNeedToBeShifted(TextWrappingStyle textWrappingStyle, RectangleF cellBounds, RectangleF floatingItemBounds, float distanceFromRight, float distanceFromLeft, float distanceFromTop, float distanceFromBottom, CompatibilityMode mode, bool isLayoutInCell);
    private void CreateTableClientArea(RectangleF& rect);
    private LayoutedWidget LayoutCell(LayoutContext childContext, RectangleF cellArea, bool isSkip);
    private bool CompareOwnerOfTableCell(WTableRow CurrentRow, FloatingItem Item);
    private void AddVerticallyMergedCellFootNote(WTextBody textBody);
    private void AddVerticallyMergedCellFootNote(WParagraph paragraph);
    private LayoutContext CreateNextCellContext();
    private void SaveChildContextState(LayoutContext childContext);
    private void MarkAsSplitted(LayoutContext childContext);
    protected virtual void MarkAsBreaked(LayoutContext childContext);
    private void MarkAsNotFitted(LayoutContext childContext);
    private bool CommitKeepWithNext();
    private bool IsNeedToCommitKeepWithNext(Boolean& isAllItemsInPageHavingKeepWihtNext);
    private bool IsContainsKeepLines();
    private bool IsPreviousRowHasVerticalMergeContinueCell(WTableRow PreviousRow);
    private void MarkAsFitted(LayoutContext childContext);
    private void UpdateClientArea();
    private bool IsInsideClippableItem();
    private void GetFootnoteHeight(Single& height);
    private float GetRowWidth(WTableRow ownerRow);
    private LayoutArea GetCellClientArea(CellLayoutInfo cellInfo, int rowIndex, int columnIndex, float maxCellsTopPadding, float maxCellsTopMargin);
    private float GetMaxRowLeftIndent();
    private float GetCellWidth(int rowIndex, int colIndex);
    private float GetCellHeight(int rowIndex, int colIndex, float cellMinHeight);
    private float GetCellMergedWidth(int rowIndex, int colIndex);
    private void UpdateLWBounds();
    private void CorrectTableClientArea(RectangleF& rect);
    private bool IsNeedToUpdateRTLTableXPosition(ITableLayoutInfo info, float leftindent, RectangleF rect);
    private RowAlignment GetHorizontalAlignment();
    private float GetMinimumRightPad();
    private float GetRightPad(WTableCell tableCell);
}
internal class Syncfusion.Layouting.LeafEmtyWidget : object {
    private SizeF m_size;
    private LayoutInfo m_layoutInfo;
    public ILayoutInfo LayoutInfo { get; }
    public LeafEmtyWidget(SizeF size);
    public sealed virtual SizeF Measure(DrawingContext dc);
    public sealed virtual ILayoutInfo get_LayoutInfo();
    public void Draw(DrawingContext dc, LayoutedWidget layoutedWidget);
    public sealed virtual void InitLayoutInfo();
    public sealed virtual void InitLayoutInfo(IWidget widget);
}
internal class Syncfusion.Layouting.LeafLayoutContext : LayoutContext {
    private bool m_isXPositionUpdated;
    private bool m_isYPositionUpdated;
    private bool m_isWrapText;
    private bool isHyphenated;
    public ILeafWidget LeafWidget { get; }
    public LeafLayoutContext(ILeafWidget strWidget, ILCOperator lcOperator, bool isForceFitLayout);
    public ILeafWidget get_LeafWidget();
    internal bool IsDecimaltabIsInCell(WParagraph paragraph, ILeafWidget leafWidget);
    internal bool IsDecimalTabPoint(WParagraph paragraph, ILeafWidget leafWidget);
    internal RectangleF NeedToUpdateClientArea(RectangleF rect, WParagraph paragraph, ILeafWidget leafWidget, Layouter layouter, ParagraphLayoutInfo paragraphLayoutInfo);
    internal void UpdateShiftDistance(RectangleF& bounds, ParagraphItem paraItem);
    public virtual LayoutedWidget Layout(RectangleF rect);
    private bool IsTabNeedToFit(TabsLayoutInfo tabsInfo, float currentTabPosition, WParagraph paragraph, RectangleF rect);
    private RectangleF ShiftXYBasedOnRotation(ParagraphItem paraItem, RectangleF bounds);
    private void HandleFloatingItemHaveCharacterOrigin(WParagraph paragraph);
    internal RectangleF FindWrappedPosition(SizeF widgetSize, RectangleF clientArea);
    private bool IsLineSpacingFitsWidget(WParagraph paragraph, float height);
    private void UpdatePictureBorderSize(WPicture picture, SizeF& size);
    private bool IsFloatingItemLayouted(WParagraph paragraph);
    private bool IsNeedToResetClientArea(WParagraph paragraph, ILeafWidget leafWidget, bool isFloating);
    private void IsDynamicRelayoutingOccur(WParagraph paragraph, int i);
    private bool IsFloatingItemExistInCollection(Int32& i);
    private void CreateLayoutedWidget(int i);
    private void SetBoundsForLayoutedWidget(RectangleF textWrappingBounds, float distanceFromLeft, float distanceFromTop, float distanceFromRight, float distanceFromBottom);
    private void LayoutGroupShapeTextBody();
    private void LayoutCustomChildShape(Entity entity, LayoutedWidget layoutedWidget);
    private RectangleF GetChildShapePositionToDraw(RectangleF groupShapeBounds, float groupShapeRotation, RectangleF childShapeBounds);
    private void LayoutChildShapeTextBody(LayoutedWidget layoutedtWidget);
    private void LayoutChildGroupTextBody(float groupShapeRotation, Entity entity, LayoutedWidget layoutedWidget, float extensionWidth, float extensionHeight, List`1<RectangleF> groupShapeBounds, List`1<float> groupShapeRotations, List`1<Nullable`1<bool>> groupShapeHorzFlips, List`1<Nullable`1<bool>> groupShapeVertFlips);
    private void CalculateRotationOfChildShape(float rotation, float width, float height, Single& left, Single& top, Single& extensionWidth, Single& extensionHeight);
    private void CalculateSumOfRotationAngle(Single& rotation, LayoutedWidget ltWidget, List`1<RectangleF> groupShapeBounds, List`1<float> groupShapeRotations, List`1<Nullable`1<bool>> groupShapeHorzFlips, List`1<Nullable`1<bool>> groupShapeVertFlips);
    private void SetChildShapeFlips(float rotation, ChildShape childShape);
    internal int GetFlipHCount(Entity entity, int count);
    internal int GetFlipVCount(Entity entity, int count);
    internal bool IsGroupFlipH(Entity entity);
    internal bool IsGroupFlipV(Entity entity);
    private static RectangleF CreateRect(PointF[] points);
    private void LayoutShapeTextBody();
    private void LayoutTextBoxBody();
    private void UpdateAutoFitTextBoxBounds(WTextBox textBox, LayoutedWidget textBodyLtWidget, WTextBoxFormat textBoxFormat);
    private void UpdateAutoFitRenderingBounds(LayoutedWidget textbodyOwnerWidget, LayoutedWidget textbodyWidget, bool isHorizontalText, bool isNeedToUpdateWidth, bool isAutoFit, InternalMargin margin);
    private void UpdateHorizontalTextRenderingBounds(LayoutedWidget textbodyOwnerWidget, bool isAutoFit, bool isNeedToUpdateWidth, LayoutedWidget ltWidget, InternalMargin margin, RectangleF textLayoutingBounds);
    private void UpdateVerticalTextRenderingBounds(LayoutedWidget textbodyOwnerWidget, bool isAutoFit, bool isNeedToUpdateWidth, LayoutedWidget ltWidget, InternalMargin margin, RectangleF textLayoutingBounds);
    private void UpdateXYPositionBasedOnModifiedSize(float modifiedWidth, float modifiedHeight, LayoutedWidget textBodyLtWidget, float shiftDistance);
    private RectangleF UpdateAutoFitLayoutingBounds(RectangleF bounds, bool isHorizontalText, bool isAutoFit, bool isNeedToUpdateWidth);
    private bool IsAnyOfParagraphHasMultipleLines(LayoutedWidget textBodyItems);
    private void UpdateBoundsBasedOnParagraphAlignments(LayoutedWidget ltWidget, Single& updatedWidth, float layoutedClientWidth, Single& maximumWidth, bool isRecursiveCall);
    private void ShiftXPositionBasedOnAlignment(LayoutedWidget ltWidget, float widthReduced);
    private float GetMaximumWidth(LayoutedWidget lineContainer);
    private void UpdateLayoutedWidgetBasedOnVerticalAlignment(RectangleF bounds, LayoutedWidget ltWidget, VerticalAlignment textVerticalAlignment);
    private void UpdateShapeBoundsToLayoutTextBody(RectangleF& layoutRect, InternalMargin internalMargin);
    private void UpdateChildShapeBoundsToLayoutTextBody(RectangleF& layoutRect, InternalMargin internalMargin, LayoutedWidget ltWidget);
    private WTextRange GetCurrTextRange();
    private void UpdateTabWidth(RectangleF& rect, SizeF& size, WTextRange textRange);
    private void UpdateAreaMaxWidth();
    private float ClientAreaRight(WParagraph paragraph, float rectRight);
    private float GetPageMarginLeft();
    private float GetPageMarginRight();
    private void UpdateLeafWidgetPosition(RectangleF& rect, Single& xPosition, float width);
    internal bool IsLeafWidgetNeedToBeSplitted(SizeF size, float clientActiveAreaWidth, RectangleF rect, float floatingItemIndentY);
    private bool TryFit(SizeF s);
    private bool IsNeedToFitBasedOnLineSpacing(WParagraph paragraph, SizeF size);
    private bool IsNeedToFitSectionBreakParaHavingOnlyFloatingItems(WParagraph ownerPara, ILeafWidget leafWidget);
    private bool IsNeedToFitItemOfLastParagraph();
    private bool IsNeedToFitLastParagraph(float columnWidth, SizeF size);
    private bool IsPictureFromOleObject();
    private bool IsNeedToFitLineBreak(SizeF size);
    private bool IsTextContainsLineBreakCharacters();
    private bool IsClipped(SizeF size);
    private bool IsParagraphItemNeedToFit(ParagraphItem paraItem);
    private float GetPararaphLeftIndent();
    private bool IsPictureFit(SizeF size, float clientActiveAreaWidth, RectangleF rect, float floatingItemIndentY);
    private bool IsNextSiblingFitted(VerticalOrigin vOrgin, HorizontalOrigin hOrigin, ParagraphItem paraItem);
    private float GetLineSpacing(WParagraph ownerParagraph);
    private bool IsFitPictureInSection(float columnWidth, float picHeight, float pageHeight, SizeF size, float clientActiveAreaWidth, Entity ent, ParagraphItem paraItem);
    private bool IsFitPictureInTextBox(SizeF size, float picHeight, Entity ent);
    private bool IsFitPictureInTable(float cellWidth, float picHeight, SizeF size, WTable table);
    private bool IsFitPictureInHeaderFooter(float picHeight, float pageHeight, SizeF size, float columnWidth, float clientActiveAreaWidth, Entity ent, double headerFooterPosition);
    private bool IsFloatingItemFit(Entity ent, SizeF size, WParagraph ownerParagraph, ParagraphItem paraItem, float pageHeight, RectangleF rect, float floatingItemIndentY, ParagraphLayoutInfo paragraphLayoutInfo);
    private bool IsShapePlacedOnParagraphBottom(WParagraph ownerParagraph, SizeF size, ParagraphLayoutInfo paragraphLayoutInfo);
    private float GetAngle(ParagraphItem paraItem);
    private float GetEmptyTextRangeHeight();
    private Entity GetBaseEntity(ParagraphItem entity, WParagraph ownerParagraph);
    private bool IsTextRangeFitInClientActiveArea(SizeF size);
    private bool IsTextRangeNeedToFit();
    private bool IsWordFittedByJustification(float availableLineWidth, float nextWordWidth);
    private void FitWordAndUpdateState();
    private void ForceFitWidget(IWidget widget, SizeF size);
    private void DoWord2013JustificationWordFit(WParagraph paragraph, float clientWidth, Layouter layouter);
    private string GetNextText();
    private bool IsNextWordFound(string text, Font font, WCharacterFormat charFormat, Single& nextWordWidth, FontScriptType scriptType);
    private float GetNextWordWidth(Single& leadingSpaceWidth);
    private float AddLeadingSpaces(String& text, Font font, FontScriptType scriptType);
    private void UpdateSpaceWidth(IWidget leafWidget);
    internal LayoutedWidget WordLayout(RectangleF rect, SizeF size, WTextRange textRange, WParagraph paragraph);
    private bool IsNeedToSkipSplitTextByCharacter(WTextRange textRange, WParagraph paragraph);
    private void UpdateSpaceWidth(WTextRange nextText, Single& nextsiblingWidth);
    private void GetDefaultBorderSpacingValue(Single& border, Boolean& isBorderValueZero, bool isWord2013, HorizontalPosition tableHorizontalPosition);
    private void SplitUnicodeTextByWord(WTextRange textRange, RectangleF rect, SizeF size, float clientWidth);
    private bool IsUnicodeTextNeedToBeSplittedByWord(SizeF size, RectangleF rect, WTextRange textRange, float clientWidth);
    private string GetText();
    private bool IsTextNeedToBeSplittedByWord(SizeF size, RectangleF rect, IWidget iwidget, float clientWidth);
    private float GetWidthToFitText(WTextRange textRange, float nextTextRangeWidth);
    private float GetNextTextRangeWidth(IWidget nextSiblingTextRange, String& nextSiblingText, SizeF size, RectangleF rect);
    private float GetUnicodeNextTextRangeWidth(WTextRange nextSiblingTextRange, String& nextSiblingText, SizeF size, RectangleF rect);
    private bool IsNextSibligSizeNeedToBeMeasure(SizeF& sizeNext, IWidget nextSiblingwidget, RectangleF rect, SizeF size);
    private bool IsUnicodeNextSibligSizeNeedToBeMeasure(SizeF& sizeNext, WTextRange nextSiblingTextRange, RectangleF rect, SizeF size);
    private bool IsBeginCJKCharacter(string text, Int32& index);
    private IWidget GetValidInlineNextSibling(ParagraphItem paragraphItem);
    private IWidget GetNextSibling(IWidget widget);
    internal bool IsLeafWidgetIsInCell(ParagraphItem paraItem);
    internal bool IsLeafWidgetIsInTextBox(ParagraphItem paraItem);
    internal bool IsLeafWidgetNextSiblingIsTextRange(WTextRange textRange);
    internal void SplitByWord(ISplitLeafWidget splitLeafWidget, SizeF size, WTextRange textRange, float clientWidth, bool isWrapTextBasedOnAbsTable);
    internal bool IsTextNeedToBeSplitted(SizeF size, RectangleF rect, WTextRange textRange);
    internal bool IsTextNeedToBeSplitted(WTextRange prevSiblingTextRange, WTextRange nextSiblingTextRange);
    private WParagraph GetOwnerParagraph();
    private bool CheckWrappingStyleForWrapping(TextWrappingStyle textWrappingStyle);
    private bool IsNeedToWrapLeafWidget(WParagraph ownerPara, Layouter layouter);
    private bool IsNeedToWrapParaMarkToRightSide(WParagraph ownerPara, RectangleF textWrappingBounds, float bottom, Layouter layouter, RectangleF rect, TextWrappingType textWrappingType, TextWrappingStyle textWrappingStyle, float minimumWidthRequired);
    private bool IsNeedToWrapForSquareTightAndThrough(Layouter layouter, int wrapOwnerIndex, int wrapItemIndex, TextWrappingStyle textWrappingStyle, RectangleF textWrappingBounds, bool allowOverlap, int wrapCollectionIndex, Entity floatingEntity, bool isTextRangeInTextBox, RectangleF rect, SizeF size, bool isWithInTextBox);
    private bool IsParaSpacingExceed(double textHeight, double floatingItemYpos, RectangleF rect);
    private bool IsNeedToWrapForTopAndBottom(WParagraph currWidgetOwnerPara, Layouter layouter, int wrapOwnerIndex, int wrapItemIndex, TextWrappingStyle textWrappingStyle, RectangleF textWrappingBounds, bool allowOverlap, int wrapCollectionIndex, Entity floatingEntity, bool isTextRangeInTextBox, RectangleF rect, SizeF size);
    private bool IsNeedToForceDynamicRelayout(WParagraph currWidgetOwnerPara, ParagraphLayoutInfo paragraphLayoutInfo, TextWrappingStyle textWrappingStyle, Entity floatingEntity);
    private bool IsFloatingItemLayoutInCell(WParagraph currWidgetOwnerPara, TextWrappingStyle textWrappingStyle, Entity floatingEntity);
    private bool IsOwnerParaNotFittedInSamePage(TextWrappingStyle textWrappingStyle, Entity floatingEntity, Layouter layouter, LayoutedWidget floatingWidget, ParagraphLayoutInfo paragraphLayoutInfo);
    private bool IsNeedDoIntermediateWrapping(float remainingClientWidth, TextWrappingStyle textWrappingStyle, Layouter layouter, TextWrappingType textWrappingType, RectangleF rect, SizeF size, ParagraphLayoutInfo paragraphLayoutInfo, bool isDoesNotDenotesRectangle, RectangleF textWrappingBounds, ILeafWidget leafWidget, float minwidth, float minimumWidthRequired);
    internal bool IsFloatingItemOnLeft(RectangleF rect, float minwidth, RectangleF textWrappingBounds);
    private bool IsLineBreakIntersectOnFloatingItem(ILeafWidget leafWidget, TextWrappingStyle textWrappingStyle, RectangleF textWrappingBounds, RectangleF rect, SizeF size, WParagraph ownerPara);
    private RectangleF RemoveDistancesFromTextValueOfLeftAndRight(Entity entity, RectangleF bounds);
    internal void AdjustClientAreaBasedOnTextWrap(ILeafWidget leafWidget, SizeF& size, RectangleF& rect);
    private bool LayoutBasedOnFloatingItemTop(WParagraph ownerPara, SizeF size, FloatingItem floatingItem);
    private bool IsLayoutOnTopBasedOnLine();
    private bool IsLayoutOnTopBasedOnBottomEdgeExtent();
    private bool CanWrapBreak(WParagraph owner, WParagraph fItemOwner);
    private float GetMinimumWidthRequiredForTable(WTextRange currTextRange, WTable table, float border, bool isWord2013, HorizontalPosition tableHorizontalPosition, bool isBorderValueZero);
    private float GetMaximumRightCellBorderWidth(WTable table);
    private bool IsNeedToWrapFloatingItem(ILeafWidget leafWidget);
    private bool IsFirstTextRangeInParagraph(ILeafWidget leafWidget);
    private bool SkipSectionBreak(WParagraph ownerPara, ILeafWidget leafWidget);
    internal void UpdateParaFirstLineHorizontalPositions(ParagraphLayoutInfo paragraphInfo, IWidget widget, Single& x, Single& width);
    private bool SkipBookmark(SizeF size);
    private bool IsTextFitBelow(RectangleF wrappingBounds, float textHeight, Entity entity);
    private float GetTopMarginValueForFloatingTable(WParagraph paragraph, Entity floatingEntity, float yPosition);
    private void UpdateXposition(RectangleF textWrappingBounds, int i, RectangleF& rect, SizeF size, float minwidth);
    private void AdjustClientAreaBasedOnExceededTab(ILeafWidget leafWidget, SizeF size, RectangleF& rect, WParagraph paragraph);
    private float GetMinWidth(WTextRange currTextRange, SizeF size, RectangleF rect);
    private bool IsLeafWidgetOwnerIsTextBox();
    private SizeF GetPageFieldSize(WField field);
    protected virtual void DoLayoutAfter();
    private SizeF UpdateEQFieldWidth(DrawingContext dc, WCharacterFormat charFormat);
    private void FitWidget(SizeF size, IWidget widget, bool isLastWordFit, float indentX, float indentY, bool isFloatingItem);
    private bool GetFloattingItemPosition(Single& indentX, Single& indentY, SizeF& size, float shiftDistance);
    private CellLayoutInfo GetCellLayoutInfo(Entity entity);
    private float GetFloatingItemSpacing(WParagraph paragraph);
    private void GetPictureWrappingBounds(Single& indentX, Single& indentY, SizeF& size, float angle);
    private float GetRightMarginHorizPosition(float pageWidth, float rightMargin, ShapeHorizontalAlignment horzAlignment, float horzPosition, float shapeWidth, TextWrappingStyle textWrapStyle, float rightEdgeExtent, float leftEdgeExtent, ParagraphItem paraItem);
    private int IsParagraphContainingLineBreakInFirst(WParagraph paragraph);
    private float GetLeftMarginHorizPosition(float leftMargin, ShapeHorizontalAlignment horzAlignment, float horzPosition, float shapeWidth, TextWrappingStyle textWrapStyle, float rightEdgeExtent, float leftEdgeExtent, ParagraphItem paraItem);
    private bool IsFitLeafWidgetInContainerHeight(ParagraphItem paraItem, bool isInCell, bool isInTextBox, Entity ent);
    private bool IsFitLeafWidgetInContainer(ParagraphItem paraItem, bool isWord2013);
    private double GetVerticalPosition(ParagraphItem paraItem, float vertPosition, VerticalOrigin vertOrigin, TextWrappingStyle textWrapStyle, CellLayoutInfo cellLayoutInfo);
    private double GetHorizontalPosition(SizeF size, ParagraphItem paraItem, ShapeHorizontalAlignment horzAlignment, HorizontalOrigin horzOrigin, float horzPosition, TextWrappingStyle textWrapStyle, float cellWid, float rightEdgeExtent, float leftEdgeExtent, float leftMargin);
    private double UpdateLeafWidgetWidth(double width, IWidget widget);
    private bool IsNeedToAddCellBounds(TextWrappingStyle textWrappingStyle);
    private void SplitUpWidget(ISplitLeafWidget splitLeafWidget, float clientActiveAreaWidth);
}
internal class Syncfusion.Layouting.LineEQField : LayoutedEQFields {
    private PointF m_point1;
    private PointF m_point2;
    internal PointF Point1 { get; internal set; }
    internal PointF Point2 { get; internal set; }
    internal PointF get_Point1();
    internal void set_Point1(PointF value);
    internal PointF get_Point2();
    internal void set_Point2(PointF value);
}
internal class Syncfusion.Layouting.MathLayoutContext : LayoutContext {
    private WordDocument m_document;
    private SizeF m_containerSize;
    private List`1<char> stretchableCharacters;
    private Stack`1<MathFunctionType> m_mathLayoutingStack;
    private float operatorXPosition;
    private float lineMaxHeight;
    private float mathXPosition;
    internal WMath MathWidget { get; }
    internal WordDocument Document { get; }
    internal SizeF ContainerSize { get; internal set; }
    private Stack`1<MathFunctionType> MathLayoutingStack { get; }
    internal MathLayoutContext(ILeafWidget widget, ILCOperator lcOperator, bool isForceFitLayout);
    internal WMath get_MathWidget();
    internal WordDocument get_Document();
    internal SizeF get_ContainerSize();
    internal void set_ContainerSize(SizeF value);
    private Stack`1<MathFunctionType> get_MathLayoutingStack();
    public virtual LayoutedWidget Layout(RectangleF rect);
    private bool CreateLayoutArea(RectangleF& rect);
    private LayoutedMathWidget DoMathAlignment(LayoutedMathWidget ltMathWidget, RectangleF clientArea);
    private void LayoutOfficeMathFunctions(RectangleF clientArea, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathBaseCollection officeMathFunctions);
    private ILayoutedFuntionWidget LayoutGroupCharacterWidget(RectangleF clientActiveArea, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private void FindTextDifference(string eqText, string baseChar, WCharacterFormat characterFormat, RectangleF bounds, Single& shiftY);
    private LayoutedLimitWidget LayoutLimitWidget(RectangleF clientActiveArea, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private ILayoutedFuntionWidget LayoutBoxWidget(RectangleF clientActiveArea, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private LayoutedScriptWidget LayoutScriptWidget(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private LayoutedFuntionWidget LayoutNArrayWidget(RectangleF clientActiveArea, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private LayoutedAccentWidget LayoutAccentWidget(RectangleF clientActiveArea, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private string GetEquationText(IOfficeMath equation);
    private LayoutedStringWidget GetStringltWidget(WCharacterFormat characterFormat, string character, RectangleF clientActiveArea);
    private RectangleF GetUpdatedBoundsForNArray(LayoutedNArrayWidget nArrayWidget, IOfficeMathNArray nArray, RectangleF narrayBounds);
    private RectangleF GetUpdatedBounds(IOfficeMathScript script, IOfficeMathLeftScript leftScript, IOfficeMathRightScript rightScript, LayoutedScriptWidget scriptWidget);
    private WCharacterFormat GetControlCharacterProperty(IOfficeMathFunctionBase mathFunction);
    private RectangleF UpdateBounds(RectangleF currentBounds, RectangleF modifiedBounds);
    private void GetNextCharacters(WTextRange textRange, Char& firstSpace, Char& secondSpace, Char& finalChar);
    internal void UpdateTextByMathStyles(WTextRange textRange, int currentIndex);
    private bool ShouldSkipSpacingAfterOperator(char previousCharacter, char currentChar, Char& nextCharacter, int characterIndex, string text, int currentIndex, WTextRange textRange);
    private bool IsNeedToSkipSpaceCharacter(Char& nextCharacter, int characterIndex, string text, int currentIndex, WTextRange textRange);
    private void GetNextCharacter(Char& nextCharacter, int characterIndex, string text, int currentIndex, WTextRange textRange);
    private void GetPreviousCharacter(Char& previousCharacter, int characterIndex, string text, int currentIndex, WTextRange textRange);
    private int AdjustBaseValue(int charValue, int baseValue);
    internal bool IsOperatorSymbol(int charValue);
    internal bool IsGreakCharacter(int charValue);
    private ILayoutedFuntionWidget LayoutRunElement(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction, int currentIndex);
    private bool IsNested();
    private bool HasNestedFunction(MathFunctionType functionType);
    private LayoutedRadicalWidget LayoutRadicalSwitch(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private void ShiftLayoutedLineWidgetXYPosition(LayoutedLineWidget[] layoutedLines, float shiftX, float shiftY);
    private LayoutedLineWidget[] GenerateRadicalLines(IOfficeMathRadical radical, RectangleF equationBounds, Single& radicalSymbolWidth);
    private List`1<PointF> GenerateRadicalHook(RectangleF argumentBounds, float lineThickness, List`1<PointF> downwardLinePoints, Single& height, Font controlFont);
    private static List`1<PointF> GenerateRadicalTopHorizontalLine(RectangleF argumentBounds, float lineThickness, List`1<PointF> upwardLinePoints);
    private List`1<PointF> GenerateRadicalDownwardLine(RectangleF argumentBounds, float lineThickness, List`1<PointF> upwardLinePoints, Single& height, Font controlFont);
    private List`1<PointF> GenerateRadicalUpwardLine(RectangleF argumentBounds, float lineThickness, Font controlFont);
    private float GetWidthFromAngle(float height, double angle1, double angle2);
    private double DegreeIntoRadians(float angle);
    private LayoutedPhantomWidget LayoutPhantomSwitch(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private LayoutedFractionWidget LayoutFractionSwitch(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private LayoutedDelimiterWidget LayoutDelimiterSwitch(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private bool IsStretchableCharacter(char character);
    private LayoutedMathFunctionWidget LayoutMathFunctionWidget(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private LayoutedBoderBoxWidget LayoutBoderBoxWidget(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private LayoutedBarWidget LayoutBarWidget(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private LayoutedMatrixWidget LayoutMatrixWidget(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    internal void AlignCellsVertically(List`1<LayoutedOMathWidget> layoutedCellCollection, int maxHeightCellIndex, float rowSpacing, RectangleF& currentBounds, IOfficeMathMatrix matrix, float maxRowHeight, Single& previousLowerHeight);
    internal void AlignCellsHorizontally(RectangleF& previousMaxCellBounds, float xPosition, int columnIndex, LayoutedOMathWidget maxCellWidget, LayoutedMatrixWidget layoutedMatrixWidget, MathHorizontalAlignment columnAlignment, float columnSpacing, int maxCellWidthIndex, IOfficeMathMatrix matrix);
    internal LayoutedLineWidget GenerateBarline(IOfficeMathBar bar, LayoutedBarWidget layoutedBarWidget, RectangleF& innerBounds, Font controlFont, WCharacterFormat characterFormat, float barWidth);
    internal List`1<LayoutedLineWidget> GenerateBorderBox(IOfficeMathBorderBox borderBox, LayoutedBoderBoxWidget borderBoxWidget, RectangleF& innerBounds, Font controlFont, WCharacterFormat characterFormat, float borderWidth);
    private LayoutedEquationArrayWidget LayoutEquationArraySwitch(RectangleF currentBounds, LayoutedOMathWidget officeMathLayoutedWidget, IOfficeMathFunctionBase mathFunction);
    private void SplitEquationArray(List`1<List`1<IOfficeMath>> splittedEquationArray, IOfficeMathEquationArray equationArray);
    private float GetRowSpacing(float inputRowSpacing, Font font, SpacingRule spacingRule);
    private float GetColumnSpacing(float columnSpacing, Font font, SpacingRule spacingRule);
    private void ReduceFontSizeOfOfficeMath(IOfficeMath officeMath, float fontSizeRatio);
    private void AlignMathWidgetVertically(LayoutedMathWidget layoutedMathWidget);
    private void AlignOfficeMathWidgetVertically(LayoutedOMathWidget officeMathWidget);
    private float GetMaxBottom(LayoutedOMathWidget officeMathWidget);
    private float GetMaxBottom(LayoutedMathWidget mathWidget);
    private float GetVerticalCenterPoint(LayoutedOMathWidget officeMathWidget);
    private void LayoutOfficeMathCollection(RectangleF clientArea, LayoutedMathWidget layoutedMathWidget, IOfficeMaths officeMathCollection);
    private LayoutedOMathWidget LayoutOfficeMath(RectangleF clientActiveArea, IOfficeMath officeMath);
    private LayoutedOMathWidget CreateOMathLayoutedWidget(PointF location, IOfficeMath officeMath);
    private LayoutedMathWidget CreateMathLayoutedWidget(PointF location);
    private PointF Transform(PointF inputPoint, float length, float angle);
}
internal class Syncfusion.Layouting.ParagraphLayoutInfo : LayoutInfo {
    private byte m_bFlags;
    private float m_topMargin;
    private float m_bottomMargin;
    private float m_topPadding;
    private float m_bottomPadding;
    private int m_levelNumber;
    private HAlignment m_justification;
    private float m_firstLineIndent;
    private float m_listTab;
    private float m_yPosition;
    private float m_pargaraphOriginalYPosition;
    private float m_listTabWidth;
    private List`1<float> m_listYPositions;
    private string m_listValue;
    private WCharacterFormat m_characterFormat;
    private ListNumberAlignment m_listAlignment;
    private LayoutTab m_listTabStop;
    private float m_xPosition;
    private ListType m_listType;
    private Spacings m_paddings;
    private Spacings m_margins;
    private SyncFont m_listfont;
    private bool m_skipTopBorder;
    private bool m_skipBottomBorder;
    private bool m_skipLeftBorder;
    private bool m_skipRightBorder;
    private bool m_skipHorizontalBorder;
    internal bool SkipTopBorder { get; internal set; }
    internal bool SkipBottomBorder { get; internal set; }
    internal bool SkipLeftBorder { get; internal set; }
    internal bool SkipRightBorder { get; internal set; }
    internal bool SkipHorizonatalBorder { get; internal set; }
    public bool IsPageBreak { get; public set; }
    public int LevelNumber { get; public set; }
    public HAlignment Justification { get; public set; }
    public float FirstLineIndent { get; public set; }
    public bool IsKeepTogether { get; public set; }
    public float ListTab { get; public set; }
    internal float ListTabWidth { get; internal set; }
    internal float YPosition { get; internal set; }
    internal float PargaraphOriginalYPosition { get; internal set; }
    internal List`1<float> ListYPositions { get; }
    public string ListValue { get; public set; }
    public ListType CurrentListType { get; public set; }
    public WCharacterFormat CharacterFormat { get; public set; }
    public ListNumberAlignment ListAlignment { get; public set; }
    public LayoutTab ListTabStop { get; public set; }
    public bool IsFirstLine { get; public set; }
    public float TopPadding { get; public set; }
    public float BottomPadding { get; public set; }
    public float TopMargin { get; public set; }
    public float BottomMargin { get; public set; }
    public bool IsNotFitted { get; public set; }
    internal bool IsXPositionReUpdate { get; internal set; }
    internal float XPosition { get; internal set; }
    internal SyncFont ListFont { get; internal set; }
    internal bool IsSectionEndMark { get; internal set; }
    public Spacings Paddings { get; }
    public Spacings Margins { get; }
    public ParagraphLayoutInfo(ChildrenLayoutDirection childLayoutDirection);
    public ParagraphLayoutInfo(ChildrenLayoutDirection childLayoutDirection, bool isPageBreak);
    internal bool get_SkipTopBorder();
    internal void set_SkipTopBorder(bool value);
    internal bool get_SkipBottomBorder();
    internal void set_SkipBottomBorder(bool value);
    internal bool get_SkipLeftBorder();
    internal void set_SkipLeftBorder(bool value);
    internal bool get_SkipRightBorder();
    internal void set_SkipRightBorder(bool value);
    internal bool get_SkipHorizonatalBorder();
    internal void set_SkipHorizonatalBorder(bool value);
    public bool get_IsPageBreak();
    public void set_IsPageBreak(bool value);
    public int get_LevelNumber();
    public void set_LevelNumber(int value);
    public HAlignment get_Justification();
    public void set_Justification(HAlignment value);
    public float get_FirstLineIndent();
    public void set_FirstLineIndent(float value);
    public bool get_IsKeepTogether();
    public void set_IsKeepTogether(bool value);
    public float get_ListTab();
    public void set_ListTab(float value);
    internal float get_ListTabWidth();
    internal void set_ListTabWidth(float value);
    internal float get_YPosition();
    internal void set_YPosition(float value);
    internal float get_PargaraphOriginalYPosition();
    internal void set_PargaraphOriginalYPosition(float value);
    internal List`1<float> get_ListYPositions();
    public string get_ListValue();
    public void set_ListValue(string value);
    public ListType get_CurrentListType();
    public void set_CurrentListType(ListType value);
    public WCharacterFormat get_CharacterFormat();
    public void set_CharacterFormat(WCharacterFormat value);
    public ListNumberAlignment get_ListAlignment();
    public void set_ListAlignment(ListNumberAlignment value);
    public LayoutTab get_ListTabStop();
    public void set_ListTabStop(LayoutTab value);
    public bool get_IsFirstLine();
    public void set_IsFirstLine(bool value);
    public float get_TopPadding();
    public void set_TopPadding(float value);
    public float get_BottomPadding();
    public void set_BottomPadding(float value);
    public float get_TopMargin();
    public void set_TopMargin(float value);
    public float get_BottomMargin();
    public void set_BottomMargin(float value);
    public bool get_IsNotFitted();
    public void set_IsNotFitted(bool value);
    internal bool get_IsXPositionReUpdate();
    internal void set_IsXPositionReUpdate(bool value);
    internal float get_XPosition();
    internal void set_XPosition(float value);
    internal SyncFont get_ListFont();
    internal void set_ListFont(SyncFont value);
    internal bool get_IsSectionEndMark();
    internal void set_IsSectionEndMark(bool value);
    public sealed virtual Spacings get_Paddings();
    public sealed virtual Spacings get_Margins();
    internal void InitLayoutInfo();
}
internal enum Syncfusion.Layouting.PrintUnits : Enum {
    public int value__;
    public static PrintUnits Display;
    public static PrintUnits Document;
    public static PrintUnits Inch;
    public static PrintUnits Millimeter;
    public static PrintUnits Centimeter;
    public static PrintUnits Pixel;
    public static PrintUnits Point;
    public static PrintUnits EMU;
}
internal class Syncfusion.Layouting.RowLayoutInfo : LayoutInfo {
    private ushort m_bFlags;
    private double m_rowHeight;
    private Spacings m_margins;
    private Spacings m_paddings;
    internal bool IsFootnoteReduced { get; internal set; }
    internal bool IsFootnoteSplitted { get; internal set; }
    internal bool IsExactlyRowHeight { get; internal set; }
    internal bool IsRowSplitted { get; internal set; }
    internal double RowHeight { get; }
    internal bool IsRowHasVerticalMergeContinueCell { get; internal set; }
    internal bool IsRowHasVerticalMergeEndCell { get; internal set; }
    internal bool IsRowHasVerticalMergeStartCell { get; internal set; }
    internal bool IsRowHasVerticalTextCell { get; internal set; }
    internal bool IsRowBreakByPageBreakBefore { get; internal set; }
    internal bool IsRowHeightExceedsClientByFloatingItem { get; internal set; }
    internal bool IsCellPaddingUpdated { get; internal set; }
    internal bool IsRowSplittedByFloatingItem { get; internal set; }
    public Spacings Paddings { get; }
    public Spacings Margins { get; }
    public RowLayoutInfo(bool isExactlyRow, float rowHeight);
    internal bool get_IsFootnoteReduced();
    internal void set_IsFootnoteReduced(bool value);
    internal bool get_IsFootnoteSplitted();
    internal void set_IsFootnoteSplitted(bool value);
    internal bool get_IsExactlyRowHeight();
    internal void set_IsExactlyRowHeight(bool value);
    internal bool get_IsRowSplitted();
    internal void set_IsRowSplitted(bool value);
    internal double get_RowHeight();
    internal bool get_IsRowHasVerticalMergeContinueCell();
    internal void set_IsRowHasVerticalMergeContinueCell(bool value);
    internal bool get_IsRowHasVerticalMergeEndCell();
    internal void set_IsRowHasVerticalMergeEndCell(bool value);
    internal bool get_IsRowHasVerticalMergeStartCell();
    internal void set_IsRowHasVerticalMergeStartCell(bool value);
    internal bool get_IsRowHasVerticalTextCell();
    internal void set_IsRowHasVerticalTextCell(bool value);
    internal bool get_IsRowBreakByPageBreakBefore();
    internal void set_IsRowBreakByPageBreakBefore(bool value);
    internal bool get_IsRowHeightExceedsClientByFloatingItem();
    internal void set_IsRowHeightExceedsClientByFloatingItem(bool value);
    internal bool get_IsCellPaddingUpdated();
    internal void set_IsCellPaddingUpdated(bool value);
    internal bool get_IsRowSplittedByFloatingItem();
    internal void set_IsRowSplittedByFloatingItem(bool value);
    public sealed virtual Spacings get_Paddings();
    public sealed virtual Spacings get_Margins();
}
internal class Syncfusion.Layouting.SortPointByX : object {
    public sealed virtual int Compare(PointF a, PointF b);
}
internal enum Syncfusion.Layouting.SortPosition : Enum {
    public int value__;
    public static SortPosition X;
    public static SortPosition Y;
    public static SortPosition Bottom;
}
internal class Syncfusion.Layouting.Spacings : object {
    private float m_left;
    private float m_top;
    private float m_right;
    private float m_bottom;
    public float Left { get; public set; }
    public float Top { get; public set; }
    public float Right { get; public set; }
    public float Bottom { get; public set; }
    public float get_Left();
    public void set_Left(float value);
    public float get_Top();
    public void set_Top(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Bottom();
    public void set_Bottom(float value);
}
internal class Syncfusion.Layouting.SplitStringWidget : object {
    private IStringWidget m_strWidget;
    internal int m_prevWidgetIndex;
    internal int StartIndex;
    internal int Length;
    private byte m_bFlags;
    internal bool IsTrailSpacesWrapped { get; internal set; }
    public string SplittedText { get; }
    public IStringWidget RealStringWidget { get; }
    public ILayoutInfo LayoutInfo { get; }
    public SplitStringWidget(IStringWidget strWidget, int startIndex, int length);
    internal bool get_IsTrailSpacesWrapped();
    internal void set_IsTrailSpacesWrapped(bool value);
    public string get_SplittedText();
    public IStringWidget get_RealStringWidget();
    public string GetText();
    public sealed virtual ILayoutInfo get_LayoutInfo();
    public void InitLayoutInfo(IWidget widget);
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    public sealed virtual ISplitLeafWidget[] SplitBySize(DrawingContext dc, SizeF offset, float clientWidth, float clientActiveAreaWidth, Boolean& isLastWordFit, bool isTabStopInterSectingfloattingItem, bool isSplitByCharacter, bool isFirstItemInLine, Int32& countForConsecutivelimit, Layouter layouter, Boolean& isHyphenated);
    public sealed virtual SizeF Measure(DrawingContext dc);
    public static ISplitLeafWidget[] SplitBySize(DrawingContext dc, double offset, IStringWidget strWidget, SplitStringWidget splitStringWidget, float clientWidth, float clientActiveAreaWidth, Boolean& isLastWordFit, bool isTabStopInterSectingfloattingItem, bool isSplitByCharacter, bool isFirstItemInLine, Int32& countForConsecutivelimit, Layouter layouter, Boolean& isHyphenated);
    public static ISplitLeafWidget[] SplitByOffset(DrawingContext dc, double offset, int startIndex, IStringWidget strWidget, StringSplitInfo splitInfo, float clientWidth, float clientActiveAreaWidth, string textToSplit, bool isSpliByCharacter, bool isFirstItemInLine);
    private static bool StartsWithExt(string text, string value);
}
internal class Syncfusion.Layouting.SplitTableWidget : object {
    private ITableWidget m_tableWidget;
    private int m_rowNumber;
    private int m_colNumber;
    private SplitWidgetContainer[] m_splittedCells;
    public ITableWidget TableWidget { get; }
    public int StartRowNumber { get; }
    public int StartColumnNumber { get; }
    public SplitWidgetContainer[] SplittedCells { get; }
    public ILayoutInfo LayoutInfo { get; }
    public SplitTableWidget(ITableWidget tableWidget, int rowNumber);
    public SplitTableWidget(ITableWidget tableWidget, int rowNumber, SplitWidgetContainer[] splittedCells);
    public SplitTableWidget(ITableWidget tableWidget, int rowNumber, int colNumber);
    public ITableWidget get_TableWidget();
    public int get_StartRowNumber();
    public int get_StartColumnNumber();
    public SplitWidgetContainer[] get_SplittedCells();
    public sealed virtual ILayoutInfo get_LayoutInfo();
    public void Draw(DrawingContext dc, LayoutedWidget layoutedWidget);
    public sealed virtual void InitLayoutInfo();
    public sealed virtual void InitLayoutInfo(IWidget widget);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.Layouting.SplitWidgetContainer : object {
    private IWidgetContainer m_container;
    internal IWidget m_currentChild;
    private int m_firstIndex;
    private IWidgetContainer m_realWidgetConatiner;
    public IWidgetContainer RealWidgetContainer { get; }
    public ILayoutInfo LayoutInfo { get; }
    public int Count { get; }
    public IWidget Item { get; }
    public EntityCollection WidgetInnerCollection { get; }
    public SplitWidgetContainer(IWidgetContainer container);
    public SplitWidgetContainer(IWidgetContainer container, IWidget currentChild, int firstIndex);
    public IWidgetContainer get_RealWidgetContainer();
    public sealed virtual ILayoutInfo get_LayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo();
    private sealed virtual override void Syncfusion.Layouting.IWidget.InitLayoutInfo(IWidget widget);
    public sealed virtual int get_Count();
    public sealed virtual IWidget get_Item(int index);
    public sealed virtual EntityCollection get_WidgetInnerCollection();
}
internal class Syncfusion.Layouting.StringParser : object {
    public static char WhiteSpace;
    public static char Tab;
    public static char Hyphen;
    public static Char[] Spaces;
    private static RegexOptions c_regexOptions;
    private static string c_whiteSpacePatterm;
    private static Regex s_whiteSpaceRegex;
    private string m_text;
    private int m_position;
    public bool EOF { get; }
    public int Length { get; }
    public int Position { get; public set; }
    public StringParser(string text);
    private static StringParser();
    public bool get_EOF();
    public int get_Length();
    public int get_Position();
    public void set_Position(int value);
    public static int GetCharsCount(string text, char symbol);
    public static int GetCharsCount(string text, Char[] symbols);
    public string ReadLine();
    public string PeekLine();
    public string ReadWord(IEntity strWidget);
    public string PeekWord(IEntity strWidget);
    public char Read();
    public string Read(int count);
    public string ReadToSymbol(char symbol, bool readSymbol);
    public char Peek();
    public void Close();
    public string ReadToEnd();
    internal static bool IsWhitespace(string token);
    internal static bool IsSpace(char token);
    internal static bool IsTab(char token);
    internal static int GetWhitespaceCount(string line, bool start);
    internal static bool IsUnicodeChineseText(string text);
    private static bool Contains(Char[] array, char symbol);
}
internal class Syncfusion.Layouting.StringSplitInfo : object {
    private int m_firstPos;
    private int m_lastPos;
    public int FirstPos { get; }
    public int LastPos { get; }
    public int Length { get; }
    public StringSplitInfo(int firstPos, int lastPos);
    public int get_FirstPos();
    public int get_LastPos();
    public int get_Length();
    public void Check(int length);
    public void Extend(StringSplitInfo strSplitInfo);
    public StringSplitInfo GetSplitFirstPart(int position);
    public StringSplitInfo GetSplitSecondPart(int position);
    public string GetSubstring(string text);
}
internal class Syncfusion.Layouting.StringSplitResult : object {
    public TextLineInfo[] Lines;
    public string Remainder;
    public SizeF ActualSize;
    public float LineHeight;
    public bool Empty { get; }
    public int Count { get; }
    public bool get_Empty();
    public int get_Count();
}
internal class Syncfusion.Layouting.StringSplitter : object {
    private DrawingContext m_dc;
    private Hyphenator hyphen;
    public StringSplitResult Split(string text, Font font, Font defaultFont, StringFormat format, SizeF size, WCharacterFormat charFormat, Boolean& isLastWordFit, bool isTabStopInterSectingfloattingItem, Boolean& isTrailSpacesWrapped, bool isAutoHyphenated, IStringWidget strWidget, Boolean& isHyphenated);
    internal void Close();
    private StringSplitResult DoSplit(Boolean& isLastWordFit, string text, Font font, Font defaultFont, WCharacterFormat charFormat, StringFormat format, SizeF size, bool isTabStopInterSectingfloattingItem, Boolean& isTrailSpacesWrapped, bool isAutoHyphenated, IStringWidget strWidget, Boolean& isHyphenated);
    private bool CopyToResult(StringSplitResult result, StringSplitResult lineResult, List`1<TextLineInfo> lines, Int32& numInserted, Font font, Font defaultFont, WCharacterFormat charFormat, StringFormat format, SizeF textSize);
    private void SaveResult(StringSplitResult result, List`1<TextLineInfo> lines, StringParser reader, Font m_font, string m_text);
    private float GetLineHeight(Font m_font, FontScriptType scriptType);
    private StringSplitResult SplitLine(string line, float lineIndent, Boolean& isLastWordFit, Font font, Font defaultFont, WCharacterFormat charFormat, StringFormat format, SizeF size, bool isTabStopInterSectingfloattingItem, Boolean& isTrailSpacesWrapped, bool isAutoHyphenated, IEntity strWidget, Boolean& isHyphenated);
    private void GetDictionary(WCharacterFormat charFormat, string languageCode);
    private void SplitAsPerAutoHyphenation(float maxWidth, List`1<string> hyphenatedWords, String& fittedWord, String& remainingWord, Font font, Font defaultFont, WCharacterFormat charFormat);
    private void AddToLineResult(StringSplitResult lineResult, List`1<TextLineInfo> lines, string line, float lineWidth, TextLineType breakType, Font font);
    private TextLineInfo TrimLine(TextLineInfo info, bool firstLine, Font font, Font defaultFont, WCharacterFormat charFormat, StringFormat format, SizeF size);
    private float GetLineWidth(string line, Font font, Font defaultFont, WCharacterFormat charFormat);
    private float GetLineIndent(bool firstLine, StringFormat format, SizeF size);
    private StringTrimming GetWrapType(StringFormat format);
}
internal class Syncfusion.Layouting.SyncFont : object {
    private byte m_bFlags;
    private string m_fontname;
    private float m_fontsize;
    internal bool Bold { get; internal set; }
    internal bool Italic { get; internal set; }
    internal bool Underline { get; internal set; }
    internal bool Strikeout { get; internal set; }
    public SyncFont(Font font);
    internal bool get_Bold();
    internal void set_Bold(bool value);
    internal bool get_Italic();
    internal void set_Italic(bool value);
    internal bool get_Underline();
    internal void set_Underline(bool value);
    internal bool get_Strikeout();
    internal void set_Strikeout(bool value);
    public Font GetFont(WordDocument Document, FontScriptType scriptType);
}
internal enum Syncfusion.Layouting.TabJustification : Enum {
    public int value__;
    public static TabJustification Left;
    public static TabJustification Centered;
    public static TabJustification Right;
    public static TabJustification Decimal;
    public static TabJustification Bar;
}
internal enum Syncfusion.Layouting.TabLeader : Enum {
    public int value__;
    public static TabLeader NoLeader;
    public static TabLeader Dotted;
    public static TabLeader Hyphenated;
    public static TabLeader Single;
    public static TabLeader Heavy;
}
internal class Syncfusion.Layouting.TableLayoutInfo : LayoutInfo {
    private WTable m_table;
    private Single[] m_cellsWidth;
    private int m_headersRowCount;
    private Boolean[] m_isDefaultCells;
    private float m_width;
    private float m_height;
    private float m_headerRowHeight;
    private byte m_bFlags;
    private Spacings m_paddings;
    private Spacings m_margins;
    public float Width { get; public set; }
    public float Height { get; }
    public Single[] CellsWidth { get; public set; }
    public int HeadersRowCount { get; }
    public Boolean[] IsDefaultCells { get; }
    public bool IsSplittedTable { get; public set; }
    internal float HeaderRowHeight { get; internal set; }
    internal bool IsHeaderRowHeightUpdated { get; internal set; }
    internal bool IsHeaderNotRepeatForAllPages { get; internal set; }
    public Spacings Paddings { get; }
    public Spacings Margins { get; }
    public double CellSpacings { get; }
    public double CellPaddings { get; }
    public TableLayoutInfo(WTable table);
    public sealed virtual float get_Width();
    public sealed virtual void set_Width(float value);
    public sealed virtual float get_Height();
    public sealed virtual Single[] get_CellsWidth();
    public sealed virtual void set_CellsWidth(Single[] value);
    public sealed virtual int get_HeadersRowCount();
    public sealed virtual Boolean[] get_IsDefaultCells();
    public sealed virtual bool get_IsSplittedTable();
    public sealed virtual void set_IsSplittedTable(bool value);
    internal float get_HeaderRowHeight();
    internal void set_HeaderRowHeight(float value);
    internal bool get_IsHeaderRowHeightUpdated();
    internal void set_IsHeaderRowHeightUpdated(bool value);
    internal bool get_IsHeaderNotRepeatForAllPages();
    internal void set_IsHeaderNotRepeatForAllPages(bool value);
    public sealed virtual Spacings get_Paddings();
    public sealed virtual Spacings get_Margins();
    private bool CheckNeedToAutoFit(WTable table);
    private void AddParagraphToEmptyCell(WTable table);
    private int GetHeadersRowCount();
    private float GetTableHeight();
    private float GetRowHeight(WTableRow row);
    public sealed virtual double get_CellSpacings();
    public sealed virtual double get_CellPaddings();
}
internal class Syncfusion.Layouting.TabsLayoutInfo : LayoutInfo {
    protected double m_defaultTabWidth;
    protected double m_pageMarginLeft;
    protected double m_pageMarginRight;
    internal List`1<LayoutTab> m_list;
    internal LayoutTab m_currTab;
    private float m_tabWidth;
    private bool m_isTabWidthUpdatedBasedOnIndent;
    public double DefaultTabWidth { get; }
    internal double PageMarginLeft { get; internal set; }
    internal double PageMarginRight { get; internal set; }
    internal bool IsTabWidthUpdatedBasedOnIndent { get; internal set; }
    internal float TabWidth { get; internal set; }
    public TabLeader CurrTabLeader { get; }
    public TabJustification CurrTabJustification { get; }
    internal List`1<LayoutTab> LayoutTabList { get; }
    public TabsLayoutInfo(ChildrenLayoutDirection childLayoutDirection);
    public double get_DefaultTabWidth();
    internal double get_PageMarginLeft();
    internal void set_PageMarginLeft(double value);
    internal double get_PageMarginRight();
    internal void set_PageMarginRight(double value);
    internal bool get_IsTabWidthUpdatedBasedOnIndent();
    internal void set_IsTabWidthUpdatedBasedOnIndent(bool value);
    internal float get_TabWidth();
    internal void set_TabWidth(float value);
    public TabLeader get_CurrTabLeader();
    public TabJustification get_CurrTabJustification();
    internal List`1<LayoutTab> get_LayoutTabList();
    public double GetNextTabPosition(double position);
    public void AddTab(float position, TabJustification justification, TabLeader leader);
    internal void SortParagraphTabsCollection(WParagraphFormat paragraphFormat, TabCollection listTabCollection, int tabLevelIndex);
    private void UpdateTabs(Dictionary`2<int, TabCollection> tabCollection, int count);
    private void ClearDeleteTabPositions(Dictionary`2<float, int> delPosition, List`1<int> tabLevels);
    private void UpdateTabsCollection(Tab tab, int currLevelIndex, Int32[] levelIndexes, Dictionary`2<float, int> delPosition, List`1<int> tabLevels, Dictionary`2<int, TabCollection> tabCollection);
}
internal class Syncfusion.Layouting.TextEQField : LayoutedEQFields {
    private string m_text;
    private Font m_font;
    internal string Text { get; internal set; }
    internal Font Font { get; internal set; }
    internal string get_Text();
    internal void set_Text(string value);
    internal Font get_Font();
    internal void set_Font(Font value);
}
internal class Syncfusion.Layouting.TextLineInfo : ValueType {
    public string Line;
    public float Width;
    public TextLineType LineType;
    public int Length;
}
[FlagsAttribute]
internal enum Syncfusion.Layouting.TextLineType : Enum {
    public int value__;
    public static TextLineType None;
    public static TextLineType NewLineBreak;
    public static TextLineType LayoutBreak;
    public static TextLineType FirstParagraphLine;
    public static TextLineType LastParagraphLine;
}
internal class Syncfusion.Layouting.TrackChangesMarkups : object {
    private RevisionType m_markupType;
    private WTextBody m_changedValue;
    private PointF m_position;
    private LayoutedWidget m_ltWidget;
    private float m_emptySpace;
    private WordDocument m_wordDocument;
    private float m_ballonYPosition;
    private bool m_isAligned;
    internal WordDocument Document { get; }
    internal float BallonYPosition { get; internal set; }
    internal RevisionType TypeOfMarkup { get; internal set; }
    internal WTextBody ChangedValue { get; internal set; }
    internal PointF Position { get; internal set; }
    internal LayoutedWidget LtWidget { get; internal set; }
    internal float EmptySpace { get; internal set; }
    internal bool IsAligned { get; internal set; }
    internal TrackChangesMarkups(WordDocument wordDocument);
    internal WordDocument get_Document();
    internal float get_BallonYPosition();
    internal void set_BallonYPosition(float value);
    internal RevisionType get_TypeOfMarkup();
    internal void set_TypeOfMarkup(RevisionType value);
    internal WTextBody get_ChangedValue();
    internal void set_ChangedValue(WTextBody value);
    internal PointF get_Position();
    internal void set_Position(PointF value);
    internal LayoutedWidget get_LtWidget();
    internal void set_LtWidget(LayoutedWidget value);
    internal float get_EmptySpace();
    internal void set_EmptySpace(float value);
    internal bool get_IsAligned();
    internal void set_IsAligned(bool value);
    internal string GetBalloonValueForMarkupType();
    internal void DisplayBalloonValueCFormat(FontScriptType scriptType, Dictionary`2<int, object> newpropertyhash, WCharacterFormat characterformat, Dictionary`2& hierarchyOrder);
    internal void DisplayBalloonValueforRemovedCFormat(Dictionary`2<int, object> newpropertyhash, WCharacterFormat characterformat, Dictionary`2& hierarchyOrder);
    private string GetDisplayNameOfLocale(short localeIdASCII);
    private string GetTextureStyleText(TextureStyle textureStyle);
    private string GenerateShadingFormattingText(string textureStyle, string foreColor, string textBgColor);
    private string GetColorName(Color colorValue);
    internal void DisplayBalloonValueForPFormat(Dictionary`2<int, object> newpropertyhash, WParagraphFormat paragraphFormat, Dictionary`2& hierarchyOrder);
    private void GenerateAlignmentFormattingText(WParagraphFormat paragraphFormat, Dictionary`2<int, string> hierarchyOrder);
    internal void DisplayBalloonValueForRemovedPFormat(Dictionary`2<int, object> newpropertyhash, WParagraphFormat paragraphFormat, Dictionary`2& hierarchyOrder);
    private void TextureStyleFormatting(string trackChangesTextureName, Dictionary`2<int, string> hierarchyOrder, String[] shadingFormattings, string shadingFormattingText, bool isBackcolorRead, bool isForecolorRead);
    private void BackgroundColorFormatting(string trackChangesBackColorName, Dictionary`2<int, string> hierarchyOrder, String[] shadingFormattings, string shadingFormattingText, bool isTextureRead, bool isForecolorRead);
    private void ForecolorFormatting(string trackChangesForeColorName, Dictionary`2<int, string> hierarchyOrder, String[] shadingFormattings, string shadingFormattingText, bool isTextureRead, bool isBackcolorRead);
    private string GetBorderChangesText(WParagraphFormat paragraphFormat);
    private string GetSpacingChangesText(Dictionary`2<int, object> newpropertyhash, WParagraphFormat paragraphFormat);
    private string GetFrameFormattingText(Dictionary`2<int, object> newpropertyhash, WParagraphFormat paragraphFormat);
    private string GetFrameWrappingFormmattedText(FrameWrapMode wrapFrameAround);
    private string GetFrameYFormattedText(float frameY);
    private string GetFrameXFormattedText(float frameX);
    private string GenerateIndentsFormattingText(Dictionary`2<int, object> newpropertyhash, WParagraphFormat paragraphFormat);
    private string GetTabAlignmentText(TabJustification justification);
    internal string DisplayBalloonValueForListFormat(Dictionary`2<int, object> newpropertyhash, WListFormat listFormat);
    private string GetListPatternFormattedText(ListPatternType patternType);
    internal void AppendInDeletionBalloon(WTextRange textRange);
    internal string ConvertDictionaryValuesToString(Dictionary`2<int, string> hierarchyOrder);
}
internal class Syncfusion.Layouting.UIDispatcher : object {
    internal static void Execute(Action action);
}
internal class Syncfusion.Layouting.UnitsConvertor : object {
    internal static int STANDART_DPI;
    private Double[] m_Proportions;
    [ThreadStaticAttribute]
private static UnitsConvertor m_instance;
    private Double[] Proportions { get; }
    public static UnitsConvertor Instance { get; }
    private Double[] get_Proportions();
    public static UnitsConvertor get_Instance();
    public double ConvertUnits(double value, PrintUnits from, PrintUnits to);
    public float ConvertToPixels(float value, PrintUnits from);
    public double ConvertToPixels(double value, PrintUnits from);
    public RectangleF ConvertToPixels(RectangleF rect, PrintUnits from);
    public PointF ConvertToPixels(PointF point, PrintUnits from);
    public SizeF ConvertToPixels(SizeF size, PrintUnits from);
    public float ConvertFromPixels(float value, PrintUnits to);
    public double ConvertFromPixels(double value, PrintUnits to);
    public RectangleF ConvertFromPixels(RectangleF rect, PrintUnits to);
    public PointF ConvertFromPixels(PointF point, PrintUnits to);
    public SizeF ConvertFromPixels(Size size, PrintUnits to);
    public SizeF ConvertFromPixels(SizeF size, PrintUnits to);
    public float ConvertToPixels(float value, PrintUnits from, float dpi);
    public double ConvertToPixels(double value, PrintUnits from, float dpi);
    public float ConvertFromPixels(float value, PrintUnits to, float dpi);
    public double ConvertFromPixels(double value, PrintUnits to, float dpi);
    public SizeF ConvertFromPixels(SizeF size, PrintUnits to, float dpi);
    private Double[] GetProporsion(float dpi);
    internal void InitDefProporsions();
    internal static void Close();
}
internal class System.Runtime.CompilerServices.ExtensionAttribute : Attribute {
}
