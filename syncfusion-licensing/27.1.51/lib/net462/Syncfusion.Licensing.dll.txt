public class Syncfusion.CoreAssembly : object {
    public static string StudioCoreVersion;
    private static CoreAssembly();
}
public class Syncfusion.Lic.util.encoders.Hex : object {
    private static HexTranslator encoder;
    private static Hex();
    public static Byte[] decode(string data);
}
public class Syncfusion.Lic.util.encoders.HexTranslator : object {
    private static Byte[] hexTable;
    private static HexTranslator();
    public int getEncodedBlockSize();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.BitVector64 : ValueType {
    private ulong vectorData;
    public ulong Data { get; }
    public bool Item { get; public set; }
    public ulong Item { get; public set; }
    public BitVector64(long initialValue);
    public BitVector64(int initialValue);
    public BitVector64(BitVector32 initialValue);
    public BitVector64(BitVector64 initialValue);
    public ulong get_Data();
    public bool get_Item(UInt32 bit);
    public void set_Item(UInt32 bit, bool value);
    public ulong get_Item(Section section);
    public void set_Item(Section section, ulong value);
    public static ulong CreateMask();
    public static ulong CreateMask(ulong previous);
    public static Section CreateSection(short maxValue);
    public static Section CreateSection(short maxValue, Section previous);
    public static string ToString(BitVector64 value);
    public virtual string ToString();
    public virtual bool Equals(object objectValue);
    public virtual int GetHashCode();
    private static ushort CreateMaskFromHighValue(int highValue);
    private static Section CreateSectionHelper(short maxValue, ushort priorMask, ushort priorOffset);
    private static ushort CountBitsSet(ushort mask);
}
[EditorBrowsableAttribute("1")]
public interface Syncfusion.Licensing.crypto.AsymmetricBlockCipher {
    public abstract virtual void init(bool forEncryption, CipherParameters param);
    public abstract virtual int getInputBlockSize();
    public abstract virtual int getOutputBlockSize();
    public abstract virtual Byte[] processBlock(Byte[] inBytes, int inOff, int len);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.AsymmetricCipherKeyPair : object {
    private AsymmetricKeyParameter publicParam;
    private AsymmetricKeyParameter privateParam;
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.AsymmetricKeyParameter : object {
    private bool privateKey;
    public AsymmetricKeyParameter(bool privateKey);
    public bool isPrivate();
}
[EditorBrowsableAttribute("1")]
public interface Syncfusion.Licensing.crypto.CipherParameters {
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.CryptoException : Exception {
    public CryptoException(string message);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.DataLengthException : RuntimeCryptoException {
    public DataLengthException(string message);
}
[EditorBrowsableAttribute("1")]
public interface Syncfusion.Licensing.crypto.Digest {
    public abstract virtual string getAlgorithmName();
    public abstract virtual int getDigestSize();
    public abstract virtual void update(byte inByte);
    public abstract virtual void update(Byte[] inBytes, int inOff, int len);
    public abstract virtual int doFinal(Byte[] outBytes, int outOff);
    public abstract virtual void reset();
}
[EditorBrowsableAttribute("1")]
public abstract class Syncfusion.Licensing.crypto.digests.GeneralDigest : object {
    private Byte[] xBuf;
    private int xBufOff;
    private long byteCount;
    public sealed virtual void update(byte inbyte);
    public sealed virtual void update(Byte[] inBytes, int inOff, int len);
    public void finish();
    public virtual void reset();
    protected abstract virtual void processWord(Byte[] inBytes, int inOff);
    protected abstract virtual void processLength(long bitLength);
    protected abstract virtual void processBlock();
    public abstract virtual string getAlgorithmName();
    public abstract virtual int getDigestSize();
    public abstract virtual int doFinal(Byte[] outBytes, int outOff);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.digests.SHA1Digest : GeneralDigest {
    private static int DIGEST_LENGTH;
    private int H1;
    private int H2;
    private int H3;
    private int H4;
    private int H5;
    private Int32[] X;
    private int xOff;
    private static int Y1;
    private static int Y2;
    private static int Y3;
    private static int Y4;
    private static SHA1Digest();
    public virtual string getAlgorithmName();
    public virtual int getDigestSize();
    protected virtual void processWord(Byte[] inBytes, int inOff);
    private void unpackWord(int word, Byte[] outBytes, int outOff);
    protected virtual void processLength(long bitLength);
    public virtual int doFinal(Byte[] outBytes, int outOff);
    public virtual void reset();
    private int f(int u, int v, int w);
    private int h(int u, int v, int w);
    private int g(int u, int v, int w);
    private int rotateLeft(int x, int n);
    protected virtual void processBlock();
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.encodings.PKCS1Encoding : object {
    private static int HEADER_LENGTH;
    private SecureRandom random;
    private AsymmetricBlockCipher engine;
    private bool forEncryption;
    private bool forPrivateKey;
    public PKCS1Encoding(AsymmetricBlockCipher cipher);
    private static PKCS1Encoding();
    public sealed virtual void init(bool forEncryption, CipherParameters param);
    public sealed virtual int getInputBlockSize();
    public sealed virtual int getOutputBlockSize();
    public sealed virtual Byte[] processBlock(Byte[] inBytes, int inOff, int inLen);
    private Byte[] encodeBlock(Byte[] inBytes, int inOff, int inLen);
    private Byte[] decodeBlock(Byte[] inBytes, int inOff, int inLen);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.engines.RSAEngine : object {
    private RSAKeyParameters key;
    private bool forEncryption;
    public string getAlgorithmName();
    public sealed virtual void init(bool forEncryption, CipherParameters param);
    public sealed virtual int getInputBlockSize();
    public sealed virtual int getOutputBlockSize();
    public sealed virtual Byte[] processBlock(Byte[] inBytes, int inOff, int inLen);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.InvalidCipherTextException : CryptoException {
    public InvalidCipherTextException(string message);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.parameters.ParametersWithRandom : object {
    private SecureRandom random;
    private CipherParameters parameters;
    public ParametersWithRandom(CipherParameters parameters, SecureRandom random);
    public ParametersWithRandom(CipherParameters parameters);
    public SecureRandom getRandom();
    public CipherParameters getParameters();
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.parameters.RSAKeyParameters : AsymmetricKeyParameter {
    private BigInteger modulus;
    private BigInteger exponent;
    public RSAKeyParameters(bool isPrivate, BigInteger modulus, BigInteger exponent);
    public BigInteger getModulus();
    public BigInteger getExponent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.parameters.RSAPrivateCrtKeyParameters : RSAKeyParameters {
    private BigInteger e;
    private BigInteger p;
    private BigInteger q;
    private BigInteger dP;
    private BigInteger dQ;
    private BigInteger qInv;
    public RSAPrivateCrtKeyParameters(BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger p, BigInteger q, BigInteger dP, BigInteger dQ, BigInteger qInv);
    public BigInteger getPublicExponent();
    public BigInteger getP();
    public BigInteger getQ();
    public BigInteger getDP();
    public BigInteger getDQ();
    public BigInteger getQInv();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.crypto.RuntimeCryptoException : Exception {
    public RuntimeCryptoException(string message);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.FusionLicenseProvider : object {
    private static string privateKey;
    [EditorBrowsableAttribute("1")]
public static bool isDesignerModeValidated;
    [EditorBrowsableAttribute("1")]
public static bool isAppDesignerMode;
    [EditorBrowsableAttribute("1")]
private static bool isBoldLicenseValidation;
    [EditorBrowsableAttribute("1")]
private static string claimLicenseKeyURL;
    private static bool isLicenseExceptionShown;
    protected static List`1<string> registeredLicenses;
    private static bool isLicensed;
    private static bool isTrial;
    private static bool isDesigner;
    private static bool isSinglePlatform;
    private static string fileFormatExceptionMessage;
    private static int licenseValidatedEffectiveControlsCount;
    private static bool isSyncfusionApp;
    private static string invalidVersion;
    [ThreadStaticAttribute]
private static List`1<Platform> _Platforms;
    private static List`1<Platform> Platforms { get; private set; }
    [EditorBrowsableAttribute("1")]
public static string DesignMode { get; }
    [EditorBrowsableAttribute("1")]
public static bool IsBoldLicenseValidation { get; public set; }
    [EditorBrowsableAttribute("1")]
public static string ClaimLicenseKeyURL { get; public set; }
    private static FusionLicenseProvider();
    private static List`1<Platform> get_Platforms();
    private static void set_Platforms(List`1<Platform> value);
    [EditorBrowsableAttribute("1")]
public static string GetLicenseType(List`1<Platform> platformList);
    public static string get_DesignMode();
    [EditorBrowsableAttribute("1")]
public static bool IsDesigner();
    [EditorBrowsableAttribute("1")]
public static bool IsDesignerMode();
    [EditorBrowsableAttribute("1")]
public static string GetLicenseType(Platform platform);
    [EditorBrowsableAttribute("1")]
public static string GetLicenseType(Platform platform, bool isInternalDependentControl);
    public static string GetLicenseType(Platform platform, Boolean& shouldQuit, bool isInternalDependentControl);
    [EditorBrowsableAttribute("1")]
public static string GetLicenseType(Platform platform, string version, bool fromExtension);
    [EditorBrowsableAttribute("1")]
public static string GetClaimLicenseURL(Platform platform);
    private static bool ValidateCallingFromSyncfusion();
    private static LicenseType GetModeOfLicense(Platform platform);
    private static LicenseType GetModeOfLicense(Platform platform, string assemblyVersion);
    private static bool IsSyncfusionPFXSigned();
    private static bool IsAssemblySignedWithSfKey(Assembly assembly);
    private static bool IsSampleBrowser(Assembly assembly);
    private static LicenseType GetProjectKeyType(string key, string version, Platform platform);
    private static LicenseType ValidateExpiryDate(string keyInfo);
    private static string Base64Encode(string projectKey);
    private static string Base64Decode(string base64EncodedData);
    public static bool get_IsBoldLicenseValidation();
    public static void set_IsBoldLicenseValidation(bool value);
    public static string get_ClaimLicenseKeyURL();
    public static void set_ClaimLicenseKeyURL(string value);
    [EditorBrowsableAttribute("1")]
public static string ProjectKey(long projectId, string unlockKey);
    [EditorBrowsableAttribute("1")]
public static string GenerateBase64LicenseKey(string platform, string version, DateTime expiryDate, string timeStamp);
    [EditorBrowsableAttribute("1")]
public static KeyInfo ExtractBase64LicenseKey(string key);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.KeyInfo : object {
    private string version;
    private string platform;
    private DateTime expiryDate;
    private string timeStamp;
    public string Version { get; public set; }
    public string Platform { get; public set; }
    public DateTime ExpiryDate { get; public set; }
    public string TimeStamp { get; public set; }
    public string get_Version();
    public void set_Version(string value);
    public string get_Platform();
    public void set_Platform(string value);
    public DateTime get_ExpiryDate();
    public void set_ExpiryDate(DateTime value);
    public string get_TimeStamp();
    public void set_TimeStamp(string value);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.KeyLogic : object {
    private BitVector64 bv;
    private static Section mySect1;
    private static Section mySect2;
    private static Section mySect3;
    private static Section mySect4;
    private static Section mySect5;
    private int emailChecksum;
    private ulong prods;
    public int EmailChecksum { get; public set; }
    public ulong Prods { get; public set; }
    public ulong DaysExpire { get; public set; }
    public DateTime DateExpire { get; public set; }
    public ulong Type { get; public set; }
    public ulong V1 { get; public set; }
    public ulong V2 { get; public set; }
    public ulong V3 { get; public set; }
    public KeyLogic(int version, Byte[] bytes);
    public void InitializeBitVector(int version);
    public int get_EmailChecksum();
    public void set_EmailChecksum(int value);
    public ulong get_Prods();
    public void set_Prods(ulong value);
    public ulong get_DaysExpire();
    public void set_DaysExpire(ulong value);
    public DateTime get_DateExpire();
    public void set_DateExpire(DateTime value);
    public ulong get_Type();
    public void set_Type(ulong value);
    public ulong get_V1();
    public void set_V1(ulong value);
    public ulong get_V2();
    public void set_V2(ulong value);
    public ulong get_V3();
    public void set_V3(ulong value);
}
[EditorBrowsableAttribute("1")]
public enum Syncfusion.Licensing.LicenseError : Enum {
    public int value__;
    public static LicenseError None;
    public static LicenseError DesigntimeNoKey;
    public static LicenseError DesigntimeKeyExpired;
    public static LicenseError DesigntimeNotLicensedControl;
    public static LicenseError RuntimeKeyExpired;
    public static LicenseError RuntimeNotLicensedControl;
    public static LicenseError RuntimeLicensedComponentEntryMissing;
    public static LicenseError RuntimeNoLicx;
    public static LicenseError Unknown;
}
internal class Syncfusion.Licensing.LicenseLog : object {
    public LicenseUsageMode UsageMode;
    public bool isASPDotNet;
    public string runtimeLicenseKey;
    public string executingVersionInfo;
    public string executingVersionInfoFromAssembly;
    public ArrayList runtimeKeys;
    public string ErrorMessage;
    public ArrayList licxFoundAssemblyList;
    public ArrayList LicxEntries;
    public bool isExpired;
    public bool failed;
    public LicenseError GetErrorKind();
    public virtual string ToString();
    public bool HasLicxEntries();
}
[EditorBrowsableAttribute("1")]
public enum Syncfusion.Licensing.LicenseType : Enum {
    public int value__;
    [DescriptionAttribute("")]
public static LicenseType Licensed;
    [DescriptionAttribute("This application was built using a trial version of Syncfusion Essential Studio. To remove the license validation message permanently, a valid license key must be included.")]
public static LicenseType NoLicense;
    [DescriptionAttribute("")]
public static LicenseType Trial;
    [DescriptionAttribute("The included Syncfusion license key is invalid.")]
public static LicenseType Invalid;
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.math.BigInteger : object {
    public static long IMASK;
    private int sign;
    private Int32[] magnitude;
    private int nBits;
    private int nBitLength;
    private long mQuote;
    private static int BITS_PER_BYTE;
    private static int BYTES_PER_INT;
    private static Byte[] rndMask;
    private static Byte[] bitCounts;
    private static Byte[] bitLengths;
    public static BigInteger ZERO;
    public static BigInteger ONE;
    private static BigInteger TWO;
    private BigInteger(int signum, Int32[] mag);
    public BigInteger(string sval);
    public BigInteger(string sval, int rdx);
    public BigInteger(Byte[] bval);
    public BigInteger(int sign, Byte[] mag);
    public BigInteger(int numBits, Random rnd);
    public BigInteger(int bitLength, int certainty, Random rnd);
    private static BigInteger();
    private Int32[] makeMagnitude(Byte[] bval);
    private void nextRndBytes(Random rnd, Byte[] bytes);
    public BigInteger abs();
    private Int32[] add(Int32[] a, Int32[] b);
    public BigInteger add(BigInteger val);
    private int bitLength(int indx, Int32[] mag);
    public int bitLength();
    private static int bitLen(int w);
    private int compareTo(int xIndx, Int32[] x, int yIndx, Int32[] y);
    public int compareTo(BigInteger val);
    private Int32[] divide(Int32[] x, Int32[] y);
    public BigInteger divide(BigInteger val);
    public virtual bool Equals(object val);
    public bool isProbablePrime(int certainty);
    public long longValue();
    public BigInteger mod(BigInteger m);
    public BigInteger modInverse(BigInteger m);
    private static BigInteger extEuclid(BigInteger a, BigInteger b, BigInteger u1Out, BigInteger u2Out);
    private void zero(Int32[] x);
    public BigInteger modPow(BigInteger exponent, BigInteger m);
    private Int32[] square(Int32[] w, Int32[] x);
    private Int32[] multiply(Int32[] x, Int32[] y, Int32[] z);
    private long getMQuote();
    public void multiplyMonty(Int32[] a, Int32[] x, Int32[] y, Int32[] m, long mQuote);
    public BigInteger multiply(BigInteger val);
    public BigInteger negate();
    private Int32[] remainder(Int32[] x, Int32[] y);
    public BigInteger remainder(BigInteger val);
    private Int32[] shiftLeft(Int32[] mag, int n);
    public BigInteger shiftLeft(int n);
    private Int32[] shiftRight(int start, Int32[] mag, int n);
    private Int32[] shiftRightOne(int start, Int32[] mag);
    public BigInteger shiftRight(int n);
    private Int32[] subtract(int xStart, Int32[] x, int yStart, Int32[] y);
    public BigInteger subtract(BigInteger val);
    public Byte[] toByteArray();
    public virtual string ToString();
    public string ToString(int rdx);
    public static BigInteger valueOf(long val);
    public int getLowestSetBit();
    public bool testBit(int n);
}
public enum Syncfusion.Licensing.Platform : Enum {
    public int value__;
    public static Platform WindowsForms;
    public static Platform WPF;
    public static Platform ASPNETCore;
    public static Platform ASPNETMVC;
    public static Platform FileFormats;
    public static Platform Xamarin;
    public static Platform UWP;
    public static Platform ASPNET;
    public static Platform Blazor;
    public static Platform WinUI;
    public static Platform MAUI;
    public static Platform Utility;
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.PublicKeyDecrypt : object {
    internal static RSAKeyParameters pubParameters;
    private static PublicKeyDecrypt();
    public static Byte[] SyncfusionDecode(string key);
    private static Byte[] DecodeLongBuffer(string encryptedLongKey, RSAKeyParameters pubParameters);
    private static Byte[] DecodeLongBuffer(Byte[] buffer, RSAKeyParameters pubParameters);
}
internal class Syncfusion.Licensing.PublicKeyDecryptProxy : object {
    private static Type typeOfPublicKeyDecrypt;
    public static Byte[] SyncfusionDecode(string key);
}
internal class Syncfusion.Licensing.RuntimeKeyInfo : object {
    public string key;
    public ulong type;
    public DateTime expire;
    public UnlockKeyInfo unlockKeyInfo;
}
public class Syncfusion.Licensing.security.SecureRandom : Random {
    private static SecureRandom rand;
    private long counter;
    private SHA1Digest digest;
    private Byte[] state;
    private Byte[] intBytes;
    private Byte[] longBytes;
    private static SecureRandom();
    public virtual void setSeed(Byte[] inSeed);
    public virtual void setSeed(long rSeed);
    public static Byte[] getSeed(int numBytes);
    public virtual Byte[] generateSeed(int numBytes);
    public virtual void nextBytes(Byte[] bytes);
    public virtual int nextInt();
    protected int next(int numBits);
    private Byte[] longToBytes(long val);
}
internal class Syncfusion.Licensing.Sweep : object {
    internal static string ErrorMessage;
    internal static string assemblyName;
    internal ulong ver1;
    internal ulong ver2;
    internal ulong ver3;
    internal static string UK;
    internal static string s1;
    private ulong rt;
    private DateTime expire;
    private static Sweep();
    public void InitAssemblyInfo(Type t);
    public ulong GetRTResultForIsKeyValid2();
    public DateTime GetExpireResultForIsKeyValid2();
    private bool CheckCallStack(Type type, LicenseContext context);
    private void GetAssemblyInformation(Type type, UInt64& ver1, UInt64& ver2, UInt64& ver3, String& assemblyname);
    private Stream GetManifestResourceStream(Assembly satellite, string name);
    public static string ByteArray2String(Byte[] bs);
    internal static void GetS1();
    public string GetErrorMessage();
    public bool GetEncLic(Assembly asm, Type type, LicenseContext context);
    private static string DecryptString(string encrString);
    private static bool Compare(Int32[] _prod, string assembly);
    internal static bool CheckLicense(int ver1, int ver2, int ver3, string pszKey, string pszEmail, String& pszAssembly, int unlock, IntPtr& t, IntPtr& a, IntPtr& b, IntPtr& c);
    internal static String[] _Find_UnlockKey();
    private static void GetValuesFromKey(RegistryKey hKey, StringCollection sc);
    internal static RegistryKey TryGetLegacyKey();
    internal static RegistryKey TryGetCurrentUserKey();
    internal static RegistryKey TryGetLocalMachineKey();
    public static void GetProdArray(ulong wProds, Int32[]& _prod);
    private static int ParseHexDigit(char c);
    private static string ParseHex(string hex);
    private static int Checksum(string str);
    public static String[] GetUnlockTextInformation();
    public static UnlockKeyInfo[] GetUnlockKeyInfos();
}
public class Syncfusion.Licensing.SyncfusionLicenseProvider : FusionLicenseProvider {
    public static void RegisterLicense(string licenseKey);
    [EditorBrowsableAttribute("1")]
public static bool ValidateLicense(Platform platform, String& message);
    [EditorBrowsableAttribute("1")]
public static bool ValidateLicense(Platform platform);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Licensing.UnlockKeyInfo : object {
    public string fullKey;
    public string version;
    public string encodedKeyPart;
    public string encodedVersion;
    public KeyLogic kc;
    public String[] assemblies;
    public string filterVersion;
    public Int32[] prodArray;
    public UnlockKeyInfo(string key);
    public UnlockKeyInfo(string key, string filterVersion);
    public virtual string ToString();
    private string DecryptString(string encrString);
    private bool IsPossiblyValidKey(string key);
    private ArrayList DecodeAssembliesFromProductIds(Int32[] prodArray);
    public ArrayList RemoveDuplicates(ArrayList assms);
    public static string ByteArray2String(Byte[] bs);
    public static string ExtractPrefixVersionInfo(string str);
    private String[] ProductNamesFromAssemblyNames(String[] assemblyNames);
    private string ToCapitalCase(string s);
}
