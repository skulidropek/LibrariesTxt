public class SelectedColorChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Color <OldColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <NewColor>k__BackingField;
    public Color OldColor { get; internal set; }
    public Color NewColor { get; internal set; }
    [CompilerGeneratedAttribute]
public Color get_OldColor();
    [CompilerGeneratedAttribute]
internal void set_OldColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_NewColor();
    [CompilerGeneratedAttribute]
internal void set_NewColor(Color value);
}
internal enum Standard.AC : Enum {
    public byte value__;
    public static AC SRC_OVER;
    public static AC SRC_ALPHA;
}
internal enum Standard.APPDOCLISTTYPE : Enum {
    public int value__;
    public static APPDOCLISTTYPE ADLT_RECENT;
    public static APPDOCLISTTYPE ADLT_FREQUENT;
}
internal static class Standard.Assert : object {
    private static void _Break();
    [ConditionalAttribute("DEBUG")]
public static void Evaluate(EvaluateFunction argument);
    [ConditionalAttribute("DEBUG")]
[ObsoleteAttribute("Use Assert.AreEqual instead of Assert.Equals", "False")]
public static void Equals(T expected, T actual);
    [ConditionalAttribute("DEBUG")]
public static void AreEqual(T expected, T actual);
    [ConditionalAttribute("DEBUG")]
public static void AreNotEqual(T notExpected, T actual);
    [ConditionalAttribute("DEBUG")]
public static void Implies(bool condition, bool result);
    [ConditionalAttribute("DEBUG")]
public static void Implies(bool condition, ImplicationFunction result);
    [ConditionalAttribute("DEBUG")]
public static void IsNeitherNullNorEmpty(string value);
    [ConditionalAttribute("DEBUG")]
public static void IsNeitherNullNorWhitespace(string value);
    [ConditionalAttribute("DEBUG")]
public static void IsNotNull(T value);
    [ConditionalAttribute("DEBUG")]
public static void IsDefault(T value);
    [ConditionalAttribute("DEBUG")]
public static void IsNotDefault(T value);
    [ConditionalAttribute("DEBUG")]
public static void IsFalse(bool condition);
    [ConditionalAttribute("DEBUG")]
public static void IsFalse(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
public static void IsTrue(bool condition);
    [ConditionalAttribute("DEBUG")]
public static void IsTrue(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
public static void Fail();
    [ConditionalAttribute("DEBUG")]
public static void Fail(string message);
    [ConditionalAttribute("DEBUG")]
public static void IsNull(T item);
    [ConditionalAttribute("DEBUG")]
public static void BoundedDoubleInc(double lowerBoundInclusive, double value, double upperBoundInclusive);
    [ConditionalAttribute("DEBUG")]
public static void BoundedInteger(int lowerBoundInclusive, int value, int upperBoundExclusive);
    [ConditionalAttribute("DEBUG")]
public static void IsApartmentState(ApartmentState expectedState);
    [ConditionalAttribute("DEBUG")]
public static void NullableIsNotNull(Nullable`1<T> value);
    [ConditionalAttribute("DEBUG")]
public static void NullableIsNull(Nullable`1<T> value);
    [ConditionalAttribute("DEBUG")]
public static void IsNotOnMainThread();
}
internal enum Standard.BI : Enum {
    public int value__;
    public static BI RGB;
}
internal class Standard.BITMAPINFO : ValueType {
    public BITMAPINFOHEADER bmiHeader;
    public RGBQUAD bmiColors;
}
internal class Standard.BITMAPINFOHEADER : ValueType {
    public int biSize;
    public int biWidth;
    public int biHeight;
    public short biPlanes;
    public short biBitCount;
    public BI biCompression;
    public int biSizeImage;
    public int biXPelsPerMeter;
    public int biYPelsPerMeter;
    public int biClrUsed;
    public int biClrImportant;
}
internal class Standard.BLENDFUNCTION : ValueType {
    public AC BlendOp;
    public byte BlendFlags;
    public byte SourceConstantAlpha;
    public AC AlphaFormat;
}
internal class Standard.CHANGEFILTERSTRUCT : ValueType {
    public UInt32 cbSize;
    public MSGFLTINFO ExtStatus;
}
internal static class Standard.CLSID : object {
    public static string TaskbarList;
    public static string EnumerableObjectCollection;
    public static string ShellLink;
    public static string DestinationList;
    public static string ApplicationDestinations;
    public static string ApplicationDocumentLists;
    public static T CoCreateInstance(string clsid);
}
internal enum Standard.CombineRgnResult : Enum {
    public int value__;
    public static CombineRgnResult ERROR;
    public static CombineRgnResult NULLREGION;
    public static CombineRgnResult SIMPLEREGION;
    public static CombineRgnResult COMPLEXREGION;
}
internal class Standard.CREATESTRUCT : ValueType {
    public IntPtr lpCreateParams;
    public IntPtr hInstance;
    public IntPtr hMenu;
    public IntPtr hwndParent;
    public int cy;
    public int cx;
    public int y;
    public int x;
    public WS style;
    public string lpszName;
    public string lpszClass;
    public WS_EX dwExStyle;
}
[FlagsAttribute]
internal enum Standard.CS : Enum {
    public UInt32 value__;
    public static CS VREDRAW;
    public static CS HREDRAW;
    public static CS DBLCLKS;
    public static CS OWNDC;
    public static CS CLASSDC;
    public static CS PARENTDC;
    public static CS NOCLOSE;
    public static CS SAVEBITS;
    public static CS BYTEALIGNCLIENT;
    public static CS BYTEALIGNWINDOW;
    public static CS GLOBALCLASS;
    public static CS IME;
    public static CS DROPSHADOW;
}
internal enum Standard.DeviceCap : Enum {
    public int value__;
    public static DeviceCap BITSPIXEL;
    public static DeviceCap PLANES;
    public static DeviceCap LOGPIXELSX;
    public static DeviceCap LOGPIXELSY;
}
internal enum Standard.DOGIF : Enum {
    public int value__;
    public static DOGIF DEFAULT;
    public static DOGIF TRAVERSE_LINK;
    public static DOGIF NO_HDROP;
    public static DOGIF NO_URL;
    public static DOGIF ONLY_IF_ONE;
}
internal static class Standard.DoubleUtilities : object {
    private static double Epsilon;
    public static bool AreClose(double value1, double value2);
    public static bool LessThan(double value1, double value2);
    public static bool GreaterThan(double value1, double value2);
    public static bool LessThanOrClose(double value1, double value2);
    public static bool GreaterThanOrClose(double value1, double value2);
    public static bool IsFinite(double value);
    public static bool IsValidSize(double value);
}
internal static class Standard.DpiHelper : object {
    private static Matrix _transformToDevice;
    private static Matrix _transformToDip;
    private static DpiHelper();
    public static Point DevicePixelsToLogical(Point devicePoint);
    public static Rect DeviceRectToLogical(Rect deviceRectangle);
    public static Size DeviceSizeToLogical(Size deviceSize);
    public static Point LogicalPixelsToDevice(Point logicalPoint);
    public static Rect LogicalRectToDevice(Rect logicalRectangle);
    public static Size LogicalSizeToDevice(Size logicalSize);
    public static Thickness LogicalThicknessToDevice(Thickness logicalThickness);
}
internal enum Standard.DWM_SIT : Enum {
    public int value__;
    public static DWM_SIT None;
    public static DWM_SIT DISPLAYFRAME;
}
internal class Standard.DWM_TIMING_INFO : ValueType {
    public int cbSize;
    public UNSIGNED_RATIO rateRefresh;
    public ulong qpcRefreshPeriod;
    public UNSIGNED_RATIO rateCompose;
    public ulong qpcVBlank;
    public ulong cRefresh;
    public UInt32 cDXRefresh;
    public ulong qpcCompose;
    public ulong cFrame;
    public UInt32 cDXPresent;
    public ulong cRefreshFrame;
    public ulong cFrameSubmitted;
    public UInt32 cDXPresentSubmitted;
    public ulong cFrameConfirmed;
    public UInt32 cDXPresentConfirmed;
    public ulong cRefreshConfirmed;
    public UInt32 cDXRefreshConfirmed;
    public ulong cFramesLate;
    public UInt32 cFramesOutstanding;
    public ulong cFrameDisplayed;
    public ulong qpcFrameDisplayed;
    public ulong cRefreshFrameDisplayed;
    public ulong cFrameComplete;
    public ulong qpcFrameComplete;
    public ulong cFramePending;
    public ulong qpcFramePending;
    public ulong cFramesDisplayed;
    public ulong cFramesComplete;
    public ulong cFramesPending;
    public ulong cFramesAvailable;
    public ulong cFramesDropped;
    public ulong cFramesMissed;
    public ulong cRefreshNextDisplayed;
    public ulong cRefreshNextPresented;
    public ulong cRefreshesDisplayed;
    public ulong cRefreshesPresented;
    public ulong cRefreshStarted;
    public ulong cPixelsReceived;
    public ulong cPixelsDrawn;
    public ulong cBuffersEmpty;
}
internal enum Standard.DWMFLIP3D : Enum {
    public int value__;
    public static DWMFLIP3D DEFAULT;
    public static DWMFLIP3D EXCLUDEBELOW;
    public static DWMFLIP3D EXCLUDEABOVE;
}
internal enum Standard.DWMNCRP : Enum {
    public int value__;
    public static DWMNCRP USEWINDOWSTYLE;
    public static DWMNCRP DISABLED;
    public static DWMNCRP ENABLED;
}
internal enum Standard.DWMWA : Enum {
    public int value__;
    public static DWMWA NCRENDERING_ENABLED;
    public static DWMWA NCRENDERING_POLICY;
    public static DWMWA TRANSITIONS_FORCEDISABLED;
    public static DWMWA ALLOW_NCPAINT;
    public static DWMWA CAPTION_BUTTON_BOUNDS;
    public static DWMWA NONCLIENT_RTL_LAYOUT;
    public static DWMWA FORCE_ICONIC_REPRESENTATION;
    public static DWMWA FLIP3D_POLICY;
    public static DWMWA EXTENDED_FRAME_BOUNDS;
    public static DWMWA HAS_ICONIC_BITMAP;
    public static DWMWA DISALLOW_PEEK;
    public static DWMWA EXCLUDED_FROM_PEEK;
}
[FlagsAttribute]
internal enum Standard.ErrorModes : Enum {
    public int value__;
    public static ErrorModes Default;
    public static ErrorModes FailCriticalErrors;
    public static ErrorModes NoGpFaultErrorBox;
    public static ErrorModes NoAlignmentFaultExcept;
    public static ErrorModes NoOpenFileErrorBox;
}
internal enum Standard.Facility : Enum {
    public int value__;
    public static Facility Null;
    public static Facility Rpc;
    public static Facility Dispatch;
    public static Facility Storage;
    public static Facility Itf;
    public static Facility Win32;
    public static Facility Windows;
    public static Facility Control;
    public static Facility Ese;
    public static Facility WinCodec;
}
internal enum Standard.FO : Enum {
    public int value__;
    public static FO MOVE;
    public static FO COPY;
    public static FO DELETE;
    public static FO RENAME;
}
internal enum Standard.FOF : Enum {
    public ushort value__;
    public static FOF MULTIDESTFILES;
    public static FOF CONFIRMMOUSE;
    public static FOF SILENT;
    public static FOF RENAMEONCOLLISION;
    public static FOF NOCONFIRMATION;
    public static FOF WANTMAPPINGHANDLE;
    public static FOF ALLOWUNDO;
    public static FOF FILESONLY;
    public static FOF SIMPLEPROGRESS;
    public static FOF NOCONFIRMMKDIR;
    public static FOF NOERRORUI;
    public static FOF NOCOPYSECURITYATTRIBS;
    public static FOF NORECURSION;
    public static FOF NO_CONNECTED_ELEMENTS;
    public static FOF WANTNUKEWARNING;
    public static FOF NORECURSEREPARSE;
}
internal enum Standard.GCLP : Enum {
    public int value__;
    public static GCLP HBRBACKGROUND;
}
internal enum Standard.GPS : Enum {
    public int value__;
    public static GPS DEFAULT;
    public static GPS HANDLERPROPERTIESONLY;
    public static GPS READWRITE;
    public static GPS TEMPORARY;
    public static GPS FASTPROPERTIESONLY;
    public static GPS OPENSLOWITEM;
    public static GPS DELAYCREATION;
    public static GPS BESTEFFORT;
    public static GPS NO_OPLOCK;
    public static GPS MASK_VALID;
}
internal enum Standard.GWL : Enum {
    public int value__;
    public static GWL WNDPROC;
    public static GWL HINSTANCE;
    public static GWL HWNDPARENT;
    public static GWL STYLE;
    public static GWL EXSTYLE;
    public static GWL USERDATA;
    public static GWL ID;
}
[FlagsAttribute]
internal enum Standard.HCF : Enum {
    public int value__;
    public static HCF HIGHCONTRASTON;
    public static HCF AVAILABLE;
    public static HCF HOTKEYACTIVE;
    public static HCF CONFIRMHOTKEY;
    public static HCF HOTKEYSOUND;
    public static HCF INDICATOR;
    public static HCF HOTKEYAVAILABLE;
}
internal class Standard.HIGHCONTRAST : ValueType {
    public int cbSize;
    public HCF dwFlags;
    public IntPtr lpszDefaultScheme;
}
internal class Standard.HRESULT : ValueType {
    private UInt32 _value;
    public static HRESULT S_OK;
    public static HRESULT S_FALSE;
    public static HRESULT E_PENDING;
    public static HRESULT E_NOTIMPL;
    public static HRESULT E_NOINTERFACE;
    public static HRESULT E_POINTER;
    public static HRESULT E_ABORT;
    public static HRESULT E_FAIL;
    public static HRESULT E_UNEXPECTED;
    public static HRESULT STG_E_INVALIDFUNCTION;
    public static HRESULT REGDB_E_CLASSNOTREG;
    public static HRESULT DESTS_E_NO_MATCHING_ASSOC_HANDLER;
    public static HRESULT DESTS_E_NORECDOCS;
    public static HRESULT DESTS_E_NOTALLCLEARED;
    public static HRESULT E_ACCESSDENIED;
    public static HRESULT E_OUTOFMEMORY;
    public static HRESULT E_INVALIDARG;
    public static HRESULT INTSAFE_E_ARITHMETIC_OVERFLOW;
    public static HRESULT COR_E_OBJECTDISPOSED;
    public static HRESULT WC_E_GREATERTHAN;
    public static HRESULT WC_E_SYNTAX;
    public Facility Facility { get; }
    public int Code { get; }
    public bool Succeeded { get; }
    public bool Failed { get; }
    public HRESULT(UInt32 i);
    private static HRESULT();
    public static HRESULT Make(bool severe, Facility facility, int code);
    public Facility get_Facility();
    public static Facility GetFacility(int errorCode);
    public int get_Code();
    public static int GetCode(int error);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HRESULT hrLeft, HRESULT hrRight);
    public static bool op_Inequality(HRESULT hrLeft, HRESULT hrRight);
    public bool get_Succeeded();
    public bool get_Failed();
    public void ThrowIfFailed();
    public void ThrowIfFailed(string message);
    public static void ThrowLastError();
}
internal enum Standard.HT : Enum {
    public int value__;
    public static HT ERROR;
    public static HT TRANSPARENT;
    public static HT NOWHERE;
    public static HT CLIENT;
    public static HT CAPTION;
    public static HT SYSMENU;
    public static HT GROWBOX;
    public static HT SIZE;
    public static HT MENU;
    public static HT HSCROLL;
    public static HT VSCROLL;
    public static HT MINBUTTON;
    public static HT MAXBUTTON;
    public static HT LEFT;
    public static HT RIGHT;
    public static HT TOP;
    public static HT TOPLEFT;
    public static HT TOPRIGHT;
    public static HT BOTTOM;
    public static HT BOTTOMLEFT;
    public static HT BOTTOMRIGHT;
    public static HT BORDER;
    public static HT REDUCE;
    public static HT ZOOM;
    public static HT SIZEFIRST;
    public static HT SIZELAST;
    public static HT OBJECT;
    public static HT CLOSE;
    public static HT HELP;
}
[GuidAttribute("12337d35-94c6-48a0-bce7-6a9c69d4d600")]
[InterfaceTypeAttribute("1")]
internal interface Standard.IApplicationDestinations {
    public abstract virtual void SetAppID(string pszAppID);
    public abstract virtual void RemoveDestination(object punk);
    public abstract virtual void RemoveAllDestinations();
}
[GuidAttribute("3c594f9f-9f30-47a1-979a-c9e83d3d0a06")]
[InterfaceTypeAttribute("1")]
internal interface Standard.IApplicationDocumentLists {
    public abstract virtual void SetAppID(string pszAppID);
    public abstract virtual object GetList(APPDOCLISTTYPE listtype, UInt32 cItemsDesired, Guid& riid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6332debf-87b5-4670-90c0-5e57b408a49e")]
internal interface Standard.ICustomDestinationList {
    public abstract virtual void SetAppID(string pszAppID);
    public abstract virtual object BeginList(UInt32& pcMaxSlots, Guid& riid);
    public abstract virtual HRESULT AppendCategory(string pszCategory, IObjectArray poa);
    public abstract virtual void AppendKnownCategory(KDC category);
    public abstract virtual HRESULT AddUserTasks(IObjectArray poa);
    public abstract virtual void CommitList();
    public abstract virtual object GetRemovedDestinations(Guid& riid);
    public abstract virtual void DeleteList(string pszAppID);
    public abstract virtual void AbortList();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("000214F2-0000-0000-C000-000000000046")]
internal interface Standard.IEnumIDList {
    public abstract virtual HRESULT Next(UInt32 celt, IntPtr& rgelt, Int32& pceltFetched);
    public abstract virtual HRESULT Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IEnumIDList& ppenum);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2c1c7e2e-2d0e-4059-831e-1e6f82335c2e")]
internal interface Standard.IEnumObjects {
    public abstract virtual void Next(UInt32 celt, Guid& riid, Object[] rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual IEnumObjects Clone();
}
internal static class Standard.IID : object {
    public static string EnumIdList;
    public static string EnumObjects;
    public static string HtmlDocument2;
    public static string ModalWindow;
    public static string ObjectArray;
    public static string ObjectCollection;
    public static string PropertyNotifySink;
    public static string PropertyStore;
    public static string ServiceProvider;
    public static string ShellFolder;
    public static string ShellLink;
    public static string ShellItem;
    public static string ShellItem2;
    public static string ShellItemArray;
    public static string TaskbarList;
    public static string TaskbarList2;
    public static string Unknown;
    public static string ApplicationDestinations;
    public static string ApplicationDocumentLists;
    public static string CustomDestinationList;
    public static string ObjectWithAppUserModelId;
    public static string ObjectWithProgId;
    public static string TaskbarList3;
    public static string TaskbarList4;
}
internal class Standard.INPUT : ValueType {
    public UInt32 type;
    public MOUSEINPUT mi;
}
internal enum Standard.INPUT_TYPE : Enum {
    public UInt32 value__;
    public static INPUT_TYPE MOUSE;
}
[GuidAttribute("92CA9DCD-5622-4bba-A805-5E9F541BD8C9")]
[InterfaceTypeAttribute("1")]
internal interface Standard.IObjectArray {
    public abstract virtual UInt32 GetCount();
    public abstract virtual object GetAt(UInt32 uiIndex, Guid& riid);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("92CA9DCD-5622-4bba-A805-5E9F541BD8C9")]
internal interface Standard.IObjectCollection {
    public abstract virtual UInt32 GetCount();
    public abstract virtual object GetAt(UInt32 uiIndex, Guid& riid);
    public abstract virtual void AddObject(object punk);
    public abstract virtual void AddFromArray(IObjectArray poaSource);
    public abstract virtual void RemoveObjectAt(UInt32 uiIndex);
    public abstract virtual void Clear();
}
[GuidAttribute("36db0196-9665-46d1-9ba7-d3709eecf9ed")]
[InterfaceTypeAttribute("1")]
internal interface Standard.IObjectWithAppUserModelId {
    public abstract virtual void SetAppID(string pszAppID);
    public abstract virtual string GetAppID();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("71e806fb-8dee-46fc-bf8c-7748a8a1ae13")]
internal interface Standard.IObjectWithProgId {
    public abstract virtual void SetProgID(string pszProgID);
    public abstract virtual string GetProgID();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("886d8eeb-8cf2-4446-8d02-cdba1dbdcf99")]
internal interface Standard.IPropertyStore {
    public abstract virtual UInt32 GetCount();
    public abstract virtual PKEY GetAt(UInt32 iProp);
    public abstract virtual void GetValue(PKEY& pkey, PROPVARIANT pv);
    public abstract virtual void SetValue(PKEY& pkey, PROPVARIANT pv);
    public abstract virtual void Commit();
}
[GuidAttribute("000214E6-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Standard.IShellFolder {
    public abstract virtual void ParseDisplayName(IntPtr hwnd, IBindCtx pbc, string pszDisplayName, Int32& pchEaten, IntPtr& ppidl, UInt32& pdwAttributes);
    public abstract virtual IEnumIDList EnumObjects(IntPtr hwnd, SHCONTF grfFlags);
    public abstract virtual object BindToObject(IntPtr pidl, IBindCtx pbc, Guid& riid);
    public abstract virtual object BindToStorage(IntPtr pidl, IBindCtx pbc, Guid& riid);
    public abstract virtual HRESULT CompareIDs(IntPtr lParam, IntPtr pidl1, IntPtr pidl2);
    public abstract virtual object CreateViewObject(IntPtr hwndOwner, Guid& riid);
    public abstract virtual void GetAttributesOf(UInt32 cidl, IntPtr apidl, SFGAO& rgfInOut);
    public abstract virtual object GetUIObjectOf(IntPtr hwndOwner, UInt32 cidl, IntPtr apidl, Guid& riid, UInt32& rgfReserved);
    public abstract virtual void GetDisplayNameOf(IntPtr pidl, SHGDN uFlags, IntPtr& pName);
    public abstract virtual void SetNameOf(IntPtr hwnd, IntPtr pidl, string pszName, SHGDN uFlags, IntPtr& ppidlOut);
}
[GuidAttribute("43826d1e-e718-42ee-bc55-a1e261c37bfe")]
[InterfaceTypeAttribute("1")]
internal interface Standard.IShellItem {
    public abstract virtual object BindToHandler(IBindCtx pbc, Guid& bhid, Guid& riid);
    public abstract virtual IShellItem GetParent();
    public abstract virtual string GetDisplayName(SIGDN sigdnName);
    public abstract virtual SFGAO GetAttributes(SFGAO sfgaoMask);
    public abstract virtual int Compare(IShellItem psi, SICHINT hint);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7e9fb0d3-919f-4307-ab2e-9b1860310c93")]
internal interface Standard.IShellItem2 {
    public abstract virtual object BindToHandler(IBindCtx pbc, Guid& bhid, Guid& riid);
    public abstract virtual IShellItem GetParent();
    public abstract virtual string GetDisplayName(SIGDN sigdnName);
    public abstract virtual SFGAO GetAttributes(SFGAO sfgaoMask);
    public abstract virtual int Compare(IShellItem psi, SICHINT hint);
    public abstract virtual object GetPropertyStore(GPS flags, Guid& riid);
    public abstract virtual object GetPropertyStoreWithCreateObject(GPS flags, object punkCreateObject, Guid& riid);
    public abstract virtual object GetPropertyStoreForKeys(IntPtr rgKeys, UInt32 cKeys, GPS flags, Guid& riid);
    public abstract virtual object GetPropertyDescriptionList(IntPtr keyType, Guid& riid);
    public abstract virtual void Update(IBindCtx pbc);
    public abstract virtual PROPVARIANT GetProperty(IntPtr key);
    public abstract virtual Guid GetCLSID(IntPtr key);
    public abstract virtual FILETIME GetFileTime(IntPtr key);
    public abstract virtual int GetInt32(IntPtr key);
    public abstract virtual string GetString(IntPtr key);
    public abstract virtual UInt32 GetUInt32(IntPtr key);
    public abstract virtual ulong GetUInt64(IntPtr key);
    public abstract virtual void GetBool(IntPtr key);
}
[GuidAttribute("B63EA76D-1F85-456F-A19C-48159EFA858B")]
[InterfaceTypeAttribute("1")]
internal interface Standard.IShellItemArray {
    public abstract virtual object BindToHandler(IBindCtx pbc, Guid& rbhid, Guid& riid);
    public abstract virtual object GetPropertyStore(int flags, Guid& riid);
    public abstract virtual object GetPropertyDescriptionList(PKEY& keyType, Guid& riid);
    public abstract virtual UInt32 GetAttributes(SIATTRIBFLAGS dwAttribFlags, UInt32 sfgaoMask);
    public abstract virtual UInt32 GetCount();
    public abstract virtual IShellItem GetItemAt(UInt32 dwIndex);
    public abstract virtual object EnumItems();
}
[GuidAttribute("000214F9-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Standard.IShellLinkW {
    public abstract virtual void GetPath(StringBuilder pszFile, int cchMaxPath, WIN32_FIND_DATAW pfd, SLGP fFlags);
    public abstract virtual void GetIDList(IntPtr& ppidl);
    public abstract virtual void SetIDList(IntPtr pidl);
    public abstract virtual void GetDescription(StringBuilder pszFile, int cchMaxName);
    public abstract virtual void SetDescription(string pszName);
    public abstract virtual void GetWorkingDirectory(StringBuilder pszDir, int cchMaxPath);
    public abstract virtual void SetWorkingDirectory(string pszDir);
    public abstract virtual void GetArguments(StringBuilder pszArgs, int cchMaxPath);
    public abstract virtual void SetArguments(string pszArgs);
    public abstract virtual short GetHotKey();
    public abstract virtual void SetHotKey(short wHotKey);
    public abstract virtual UInt32 GetShowCmd();
    public abstract virtual void SetShowCmd(UInt32 iShowCmd);
    public abstract virtual void GetIconLocation(StringBuilder pszIconPath, int cchIconPath, Int32& piIcon);
    public abstract virtual void SetIconLocation(string pszIconPath, int iIcon);
    public abstract virtual void SetRelativePath(string pszPathRel, UInt32 dwReserved);
    public abstract virtual void Resolve(IntPtr hwnd, UInt32 fFlags);
    public abstract virtual void SetPath(string pszFile);
}
[GuidAttribute("56FDF342-FD6D-11d0-958A-006097C9A090")]
[InterfaceTypeAttribute("1")]
internal interface Standard.ITaskbarList {
    public abstract virtual void HrInit();
    public abstract virtual void AddTab(IntPtr hwnd);
    public abstract virtual void DeleteTab(IntPtr hwnd);
    public abstract virtual void ActivateTab(IntPtr hwnd);
    public abstract virtual void SetActiveAlt(IntPtr hwnd);
}
[GuidAttribute("602D4995-B13A-429b-A66E-1935E44F4317")]
[InterfaceTypeAttribute("1")]
internal interface Standard.ITaskbarList2 {
    public abstract virtual void HrInit();
    public abstract virtual void AddTab(IntPtr hwnd);
    public abstract virtual void DeleteTab(IntPtr hwnd);
    public abstract virtual void ActivateTab(IntPtr hwnd);
    public abstract virtual void SetActiveAlt(IntPtr hwnd);
    public abstract virtual void MarkFullscreenWindow(IntPtr hwnd, bool fFullscreen);
}
[GuidAttribute("ea1afb91-9e28-4b86-90e9-9e9f8a5eefaf")]
[InterfaceTypeAttribute("1")]
internal interface Standard.ITaskbarList3 {
    public abstract virtual void HrInit();
    public abstract virtual void AddTab(IntPtr hwnd);
    public abstract virtual void DeleteTab(IntPtr hwnd);
    public abstract virtual void ActivateTab(IntPtr hwnd);
    public abstract virtual void SetActiveAlt(IntPtr hwnd);
    public abstract virtual void MarkFullscreenWindow(IntPtr hwnd, bool fFullscreen);
    public abstract virtual HRESULT SetProgressValue(IntPtr hwnd, ulong ullCompleted, ulong ullTotal);
    public abstract virtual HRESULT SetProgressState(IntPtr hwnd, TBPF tbpFlags);
    public abstract virtual HRESULT RegisterTab(IntPtr hwndTab, IntPtr hwndMDI);
    public abstract virtual HRESULT UnregisterTab(IntPtr hwndTab);
    public abstract virtual HRESULT SetTabOrder(IntPtr hwndTab, IntPtr hwndInsertBefore);
    public abstract virtual HRESULT SetTabActive(IntPtr hwndTab, IntPtr hwndMDI, UInt32 dwReserved);
    public abstract virtual HRESULT ThumbBarAddButtons(IntPtr hwnd, UInt32 cButtons, THUMBBUTTON[] pButtons);
    public abstract virtual HRESULT ThumbBarUpdateButtons(IntPtr hwnd, UInt32 cButtons, THUMBBUTTON[] pButtons);
    public abstract virtual HRESULT ThumbBarSetImageList(IntPtr hwnd, object himl);
    public abstract virtual HRESULT SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, string pszDescription);
    public abstract virtual HRESULT SetThumbnailTooltip(IntPtr hwnd, string pszTip);
    public abstract virtual HRESULT SetThumbnailClip(IntPtr hwnd, RefRECT prcClip);
}
[GuidAttribute("ea1afb91-9e28-4b86-90e9-9e9f8a5eefaf")]
[InterfaceTypeAttribute("1")]
internal interface Standard.ITaskbarList4 {
    public abstract virtual void HrInit();
    public abstract virtual void AddTab(IntPtr hwnd);
    public abstract virtual void DeleteTab(IntPtr hwnd);
    public abstract virtual void ActivateTab(IntPtr hwnd);
    public abstract virtual void SetActiveAlt(IntPtr hwnd);
    public abstract virtual void MarkFullscreenWindow(IntPtr hwnd, bool fFullscreen);
    public abstract virtual HRESULT SetProgressValue(IntPtr hwnd, ulong ullCompleted, ulong ullTotal);
    public abstract virtual HRESULT SetProgressState(IntPtr hwnd, TBPF tbpFlags);
    public abstract virtual HRESULT RegisterTab(IntPtr hwndTab, IntPtr hwndMDI);
    public abstract virtual HRESULT UnregisterTab(IntPtr hwndTab);
    public abstract virtual HRESULT SetTabOrder(IntPtr hwndTab, IntPtr hwndInsertBefore);
    public abstract virtual HRESULT SetTabActive(IntPtr hwndTab, IntPtr hwndMDI, UInt32 dwReserved);
    public abstract virtual HRESULT ThumbBarAddButtons(IntPtr hwnd, UInt32 cButtons, THUMBBUTTON[] pButtons);
    public abstract virtual HRESULT ThumbBarUpdateButtons(IntPtr hwnd, UInt32 cButtons, THUMBBUTTON[] pButtons);
    public abstract virtual HRESULT ThumbBarSetImageList(IntPtr hwnd, object himl);
    public abstract virtual HRESULT SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, string pszDescription);
    public abstract virtual HRESULT SetThumbnailTooltip(IntPtr hwnd, string pszTip);
    public abstract virtual HRESULT SetThumbnailClip(IntPtr hwnd, RefRECT prcClip);
    public abstract virtual void SetTabProperties(IntPtr hwndTab, STPF stpFlags);
}
internal enum Standard.KDC : Enum {
    public int value__;
    public static KDC FREQUENT;
    public static KDC RECENT;
}
internal class Standard.LOGFONT : ValueType {
    public int lfHeight;
    public int lfWidth;
    public int lfEscapement;
    public int lfOrientation;
    public int lfWeight;
    public byte lfItalic;
    public byte lfUnderline;
    public byte lfStrikeOut;
    public byte lfCharSet;
    public byte lfOutPrecision;
    public byte lfClipPrecision;
    public byte lfQuality;
    public byte lfPitchAndFamily;
    public string lfFaceName;
}
internal class Standard.ManagedIStream : object {
    private static int STGTY_STREAM;
    private static int STGM_READWRITE;
    private static int LOCK_EXCLUSIVE;
    private Stream _source;
    public ManagedIStream(Stream source);
    private void _Validate();
    [ObsoleteAttribute("The method is not implemented", "True")]
public sealed virtual void Clone(IStream& ppstm);
    public sealed virtual void Commit(int grfCommitFlags);
    public sealed virtual void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    [ObsoleteAttribute("The method is not implemented", "True")]
public sealed virtual void LockRegion(long libOffset, long cb, int dwLockType);
    public sealed virtual void Read(Byte[] pv, int cb, IntPtr pcbRead);
    [ObsoleteAttribute("The method is not implemented", "True")]
public sealed virtual void Revert();
    public sealed virtual void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
    public sealed virtual void SetSize(long libNewSize);
    public sealed virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    [ObsoleteAttribute("The method is not implemented", "True")]
public sealed virtual void UnlockRegion(long libOffset, long cb, int dwLockType);
    public sealed virtual void Write(Byte[] pv, int cb, IntPtr pcbWritten);
    public sealed virtual void Dispose();
}
internal class Standard.MARGINS : ValueType {
    public int cxLeftWidth;
    public int cxRightWidth;
    public int cyTopHeight;
    public int cyBottomHeight;
}
internal class Standard.MessageHandler : MulticastDelegate {
    public MessageHandler(object object, IntPtr method);
    public virtual IntPtr Invoke(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    public virtual IAsyncResult BeginInvoke(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(Boolean& handled, IAsyncResult result);
}
internal class Standard.MessageWindow : DispatcherObject {
    private static WndProc s_WndProc;
    private static Dictionary`2<IntPtr, MessageWindow> s_windowLookup;
    private WndProc _wndProcCallback;
    private string _className;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    public IntPtr Handle { get; private set; }
    public MessageWindow(CS classStyle, WS style, WS_EX exStyle, Rect location, string name, WndProc callback);
    private static MessageWindow();
    [CompilerGeneratedAttribute]
public IntPtr get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(IntPtr value);
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    private void _Dispose(bool disposing, bool isHwndBeingDestroyed);
    private static IntPtr _WndProc(IntPtr hwnd, WM msg, IntPtr wParam, IntPtr lParam);
    private static object _DestroyWindow(IntPtr hwnd, string className);
}
[FlagsAttribute]
internal enum Standard.MF : Enum {
    public UInt32 value__;
    public static MF DOES_NOT_EXIST;
    public static MF ENABLED;
    public static MF BYCOMMAND;
    public static MF GRAYED;
    public static MF DISABLED;
}
internal class Standard.MINMAXINFO : ValueType {
    public POINT ptReserved;
    public POINT ptMaxSize;
    public POINT ptMaxPosition;
    public POINT ptMinTrackSize;
    public POINT ptMaxTrackSize;
}
internal class Standard.MONITORINFO : object {
    public int cbSize;
    public RECT rcMonitor;
    public RECT rcWork;
    public int dwFlags;
}
internal enum Standard.MOUSEEVENTF : Enum {
    public int value__;
    public static MOUSEEVENTF LEFTDOWN;
    public static MOUSEEVENTF LEFTUP;
}
internal class Standard.MOUSEINPUT : ValueType {
    public int dx;
    public int dy;
    public int mouseData;
    public int dwFlags;
    public int time;
    public IntPtr dwExtraInfo;
}
internal enum Standard.MSGFLT : Enum {
    public int value__;
    public static MSGFLT RESET;
    public static MSGFLT ALLOW;
    public static MSGFLT DISALLOW;
}
internal enum Standard.MSGFLTINFO : Enum {
    public int value__;
    public static MSGFLTINFO NONE;
    public static MSGFLTINFO ALREADYALLOWED_FORWND;
    public static MSGFLTINFO ALREADYDISALLOWED_FORWND;
    public static MSGFLTINFO ALLOWED_HIGHER;
}
internal static class Standard.NativeMethods : object {
    private static bool _AdjustWindowRectEx(RECT& lpRect, WS dwStyle, bool bMenu, WS_EX dwExStyle);
    public static RECT AdjustWindowRectEx(RECT lpRect, WS dwStyle, bool bMenu, WS_EX dwExStyle);
    private static bool _ChangeWindowMessageFilter(WM message, MSGFLT dwFlag);
    private static bool _ChangeWindowMessageFilterEx(IntPtr hwnd, WM message, MSGFLT action, CHANGEFILTERSTRUCT& pChangeFilterStruct);
    public static HRESULT ChangeWindowMessageFilterEx(IntPtr hwnd, WM message, MSGFLT action, MSGFLTINFO& filterInfo);
    public static CombineRgnResult CombineRgn(IntPtr hrgnDest, IntPtr hrgnSrc1, IntPtr hrgnSrc2, RGN fnCombineMode);
    private static IntPtr _CommandLineToArgvW(string cmdLine, Int32& numArgs);
    public static String[] CommandLineToArgvW(string cmdLine);
    private static SafeHBITMAP _CreateDIBSection(SafeDC hdc, BITMAPINFO& bitmapInfo, int iUsage, IntPtr& ppvBits, IntPtr hSection, int dwOffset);
    private static SafeHBITMAP _CreateDIBSectionIntPtr(IntPtr hdc, BITMAPINFO& bitmapInfo, int iUsage, IntPtr& ppvBits, IntPtr hSection, int dwOffset);
    public static SafeHBITMAP CreateDIBSection(SafeDC hdc, BITMAPINFO& bitmapInfo, IntPtr& ppvBits, IntPtr hSection, int dwOffset);
    private static IntPtr _CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
    public static IntPtr CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
    private static IntPtr _CreateRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    public static IntPtr CreateRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
    private static IntPtr _CreateRectRgnIndirect(RECT& lprc);
    public static IntPtr CreateRectRgnIndirect(RECT lprc);
    public static IntPtr CreateSolidBrush(int crColor);
    private static IntPtr _CreateWindowEx(WS_EX dwExStyle, string lpClassName, string lpWindowName, WS dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
    public static IntPtr CreateWindowEx(WS_EX dwExStyle, string lpClassName, string lpWindowName, WS dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
    public static IntPtr DefWindowProc(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);
    public static bool DeleteObject(IntPtr hObject);
    public static bool DestroyIcon(IntPtr handle);
    public static bool DestroyWindow(IntPtr hwnd);
    public static bool IsWindow(IntPtr hwnd);
    public static void DwmExtendFrameIntoClientArea(IntPtr hwnd, MARGINS& pMarInset);
    private static bool _DwmIsCompositionEnabled();
    private static HRESULT _DwmGetColorizationColor(UInt32& pcrColorization, Boolean& pfOpaqueBlend);
    public static bool DwmGetColorizationColor(UInt32& pcrColorization, Boolean& pfOpaqueBlend);
    public static bool DwmIsCompositionEnabled();
    public static bool DwmDefWindowProc(IntPtr hwnd, WM msg, IntPtr wParam, IntPtr lParam, IntPtr& plResult);
    private static void _DwmSetWindowAttribute(IntPtr hwnd, DWMWA dwAttribute, Int32& pvAttribute, int cbAttribute);
    public static void DwmSetWindowAttributeFlip3DPolicy(IntPtr hwnd, DWMFLIP3D flip3dPolicy);
    public static void DwmSetWindowAttributeDisallowPeek(IntPtr hwnd, bool disallowPeek);
    private static int _EnableMenuItem(IntPtr hMenu, SC uIDEnableItem, MF uEnable);
    public static MF EnableMenuItem(IntPtr hMenu, SC uIDEnableItem, MF uEnable);
    private static bool _RemoveMenu(IntPtr hMenu, UInt32 uPosition, UInt32 uFlags);
    public static void RemoveMenu(IntPtr hMenu, SC uPosition, MF uFlags);
    private static bool _DrawMenuBar(IntPtr hWnd);
    public static void DrawMenuBar(IntPtr hWnd);
    [ReliabilityContractAttribute("3", "2")]
public static bool FindClose(IntPtr handle);
    public static SafeFindHandle FindFirstFileW(string lpFileName, WIN32_FIND_DATAW lpFindFileData);
    public static bool FindNextFileW(SafeFindHandle hndFindFile, WIN32_FIND_DATAW lpFindFileData);
    private static bool _GetClientRect(IntPtr hwnd, RECT& lpRect);
    public static RECT GetClientRect(IntPtr hwnd);
    private static HRESULT _GetCurrentThemeName(StringBuilder pszThemeFileName, int dwMaxNameChars, StringBuilder pszColorBuff, int cchMaxColorChars, StringBuilder pszSizeBuff, int cchMaxSizeChars);
    public static void GetCurrentThemeName(String& themeFileName, String& color, String& size);
    public static bool IsThemeActive();
    [ObsoleteAttribute("Use SafeDC.GetDC instead.", "True")]
public static void GetDC();
    public static int GetDeviceCaps(SafeDC hdc, DeviceCap nIndex);
    private static int _GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, int nSize);
    public static string GetModuleFileName(IntPtr hModule);
    private static IntPtr _GetModuleHandle(string lpModuleName);
    public static IntPtr GetModuleHandle(string lpModuleName);
    private static bool _GetMonitorInfo(IntPtr hMonitor, MONITORINFO lpmi);
    public static MONITORINFO GetMonitorInfo(IntPtr hMonitor);
    private static IntPtr _GetStockObject(StockObject fnObject);
    public static IntPtr GetStockObject(StockObject fnObject);
    public static IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
    public static int GetSystemMetrics(SM nIndex);
    public static IntPtr GetWindowLongPtr(IntPtr hwnd, GWL nIndex);
    public static void SetWindowThemeAttribute(IntPtr hwnd, WINDOWTHEMEATTRIBUTETYPE eAttribute, WTA_OPTIONS& pvAttribute, UInt32 cbAttribute);
    private static int GetWindowLongPtr32(IntPtr hWnd, GWL nIndex);
    private static IntPtr GetWindowLongPtr64(IntPtr hWnd, GWL nIndex);
    private static bool GetWindowPlacement(IntPtr hwnd, WINDOWPLACEMENT lpwndpl);
    public static WINDOWPLACEMENT GetWindowPlacement(IntPtr hwnd);
    private static bool _GetWindowRect(IntPtr hWnd, RECT& lpRect);
    public static RECT GetWindowRect(IntPtr hwnd);
    public static Status GdipCreateBitmapFromStream(IStream stream, IntPtr& bitmap);
    public static Status GdipCreateHBITMAPFromBitmap(IntPtr bitmap, IntPtr& hbmReturn, int background);
    public static Status GdipCreateHICONFromBitmap(IntPtr bitmap, IntPtr& hbmReturn);
    public static Status GdipDisposeImage(IntPtr image);
    public static Status GdipImageForceValidation(IntPtr image);
    public static Status GdiplusStartup(IntPtr& token, StartupInput input, StartupOutput& output);
    public static Status GdiplusShutdown(IntPtr token);
    public static bool IsWindowVisible(IntPtr hwnd);
    private static IntPtr _LocalFree(IntPtr hMem);
    public static IntPtr MonitorFromWindow(IntPtr hwnd, UInt32 dwFlags);
    private static bool _PostMessage(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);
    public static void PostMessage(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);
    private static short _RegisterClassEx(WNDCLASSEX& lpwcx);
    public static short RegisterClassEx(WNDCLASSEX& lpwcx);
    private static UInt32 _RegisterWindowMessage(string lpString);
    public static WM RegisterWindowMessage(string lpString);
    private static IntPtr _SetActiveWindow(IntPtr hWnd);
    public static IntPtr SetActiveWindow(IntPtr hwnd);
    public static IntPtr SetClassLongPtr(IntPtr hwnd, GCLP nIndex, IntPtr dwNewLong);
    private static int SetClassLongPtr32(IntPtr hWnd, GCLP nIndex, int dwNewLong);
    private static IntPtr SetClassLongPtr64(IntPtr hWnd, GCLP nIndex, IntPtr dwNewLong);
    public static ErrorModes SetErrorMode(ErrorModes newMode);
    private static bool _SetProcessWorkingSetSize(IntPtr hProcess, IntPtr dwMinimiumWorkingSetSize, IntPtr dwMaximumWorkingSetSize);
    public static void SetProcessWorkingSetSize(IntPtr hProcess, int dwMinimumWorkingSetSize, int dwMaximumWorkingSetSize);
    public static IntPtr SetWindowLongPtr(IntPtr hwnd, GWL nIndex, IntPtr dwNewLong);
    private static int SetWindowLongPtr32(IntPtr hWnd, GWL nIndex, int dwNewLong);
    private static IntPtr SetWindowLongPtr64(IntPtr hWnd, GWL nIndex, IntPtr dwNewLong);
    private static int _SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool bRedraw);
    public static void SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool bRedraw);
    private static bool _SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, SWP uFlags);
    public static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, SWP uFlags);
    public static Win32Error SHFileOperation(SHFILEOPSTRUCT& lpFileOp);
    public static bool ShowWindow(IntPtr hwnd, SW nCmdShow);
    private static bool _SystemParametersInfo_String(SPI uiAction, int uiParam, string pvParam, SPIF fWinIni);
    private static bool _SystemParametersInfo_NONCLIENTMETRICS(SPI uiAction, int uiParam, NONCLIENTMETRICS& pvParam, SPIF fWinIni);
    private static bool _SystemParametersInfo_HIGHCONTRAST(SPI uiAction, int uiParam, HIGHCONTRAST& pvParam, SPIF fWinIni);
    public static void SystemParametersInfo(SPI uiAction, int uiParam, string pvParam, SPIF fWinIni);
    public static NONCLIENTMETRICS SystemParameterInfo_GetNONCLIENTMETRICS();
    public static HIGHCONTRAST SystemParameterInfo_GetHIGHCONTRAST();
    public static UInt32 TrackPopupMenuEx(IntPtr hmenu, UInt32 fuFlags, int x, int y, IntPtr hwnd, IntPtr lptpm);
    private static IntPtr _SelectObject(SafeDC hdc, IntPtr hgdiobj);
    public static IntPtr SelectObject(SafeDC hdc, IntPtr hgdiobj);
    private static IntPtr _SelectObjectSafeHBITMAP(SafeDC hdc, SafeHBITMAP hgdiobj);
    public static IntPtr SelectObject(SafeDC hdc, SafeHBITMAP hgdiobj);
    public static int SendInput(int nInputs, INPUT& pInputs, int cbSize);
    public static IntPtr SendMessage(IntPtr hWnd, WM Msg, IntPtr wParam, IntPtr lParam);
    private static bool _UnregisterClassAtom(IntPtr lpClassName, IntPtr hInstance);
    private static bool _UnregisterClassName(string lpClassName, IntPtr hInstance);
    public static void UnregisterClass(short atom, IntPtr hinstance);
    public static void UnregisterClass(string lpClassName, IntPtr hInstance);
    private static bool _UpdateLayeredWindow(IntPtr hwnd, SafeDC hdcDst, POINT& pptDst, SIZE& psize, SafeDC hdcSrc, POINT& pptSrc, int crKey, BLENDFUNCTION& pblend, ULW dwFlags);
    private static bool _UpdateLayeredWindowIntPtr(IntPtr hwnd, IntPtr hdcDst, IntPtr pptDst, IntPtr psize, IntPtr hdcSrc, IntPtr pptSrc, int crKey, BLENDFUNCTION& pblend, ULW dwFlags);
    public static void UpdateLayeredWindow(IntPtr hwnd, SafeDC hdcDst, POINT& pptDst, SIZE& psize, SafeDC hdcSrc, POINT& pptSrc, int crKey, BLENDFUNCTION& pblend, ULW dwFlags);
    public static void UpdateLayeredWindow(IntPtr hwnd, int crKey, BLENDFUNCTION& pblend, ULW dwFlags);
    private static void _SHAddToRecentDocs_String(SHARD uFlags, string pv);
    private static void _SHAddToRecentDocs_ShellLink(SHARD uFlags, IShellLinkW pv);
    public static void SHAddToRecentDocs(string path);
    public static void SHAddToRecentDocs(IShellLinkW shellLink);
    private static HRESULT _DwmGetCompositionTimingInfo(IntPtr hwnd, DWM_TIMING_INFO& pTimingInfo);
    public static Nullable`1<DWM_TIMING_INFO> DwmGetCompositionTimingInfo(IntPtr hwnd);
    public static void DwmInvalidateIconicBitmaps(IntPtr hwnd);
    public static void DwmSetIconicThumbnail(IntPtr hwnd, IntPtr hbmp, DWM_SIT dwSITFlags);
    public static void DwmSetIconicLivePreviewBitmap(IntPtr hwnd, IntPtr hbmp, RefPOINT pptClient, DWM_SIT dwSITFlags);
    public static void SHGetItemFromDataObject(IDataObject pdtobj, DOGIF dwFlags, Guid& riid, Object& ppv);
    public static HRESULT SHCreateItemFromParsingName(string pszPath, IBindCtx pbc, Guid& riid, Object& ppv);
    public static bool Shell_NotifyIcon(NIM dwMessage, NOTIFYICONDATA lpdata);
    public static void SetCurrentProcessExplicitAppUserModelID(string AppID);
    public static HRESULT GetCurrentProcessExplicitAppUserModelID(String& AppID);
}
[FlagsAttribute]
internal enum Standard.NIF : Enum {
    public UInt32 value__;
    public static NIF MESSAGE;
    public static NIF ICON;
    public static NIF TIP;
    public static NIF STATE;
    public static NIF INFO;
    public static NIF GUID;
    public static NIF REALTIME;
    public static NIF SHOWTIP;
    public static NIF XP_MASK;
    public static NIF VISTA_MASK;
}
internal enum Standard.NIIF : Enum {
    public int value__;
    public static NIIF NONE;
    public static NIIF INFO;
    public static NIIF WARNING;
    public static NIIF ERROR;
    public static NIIF USER;
    public static NIIF NOSOUND;
    public static NIIF LARGE_ICON;
    public static NIIF NIIF_RESPECT_QUIET_TIME;
    public static NIIF XP_ICON_MASK;
}
internal enum Standard.NIM : Enum {
    public UInt32 value__;
    public static NIM ADD;
    public static NIM MODIFY;
    public static NIM DELETE;
    public static NIM SETFOCUS;
    public static NIM SETVERSION;
}
internal class Standard.NONCLIENTMETRICS : ValueType {
    public int cbSize;
    public int iBorderWidth;
    public int iScrollWidth;
    public int iScrollHeight;
    public int iCaptionWidth;
    public int iCaptionHeight;
    public LOGFONT lfCaptionFont;
    public int iSmCaptionWidth;
    public int iSmCaptionHeight;
    public LOGFONT lfSmCaptionFont;
    public int iMenuWidth;
    public int iMenuHeight;
    public LOGFONT lfMenuFont;
    public LOGFONT lfStatusFont;
    public LOGFONT lfMessageFont;
    public int iPaddedBorderWidth;
    public static NONCLIENTMETRICS VistaMetricsStruct { get; }
    public static NONCLIENTMETRICS XPMetricsStruct { get; }
    public static NONCLIENTMETRICS get_VistaMetricsStruct();
    public static NONCLIENTMETRICS get_XPMetricsStruct();
}
internal class Standard.NOTIFYICONDATA : object {
    public int cbSize;
    public IntPtr hWnd;
    public int uID;
    public NIF uFlags;
    public int uCallbackMessage;
    public IntPtr hIcon;
    public Char[] szTip;
    public UInt32 dwState;
    public UInt32 dwStateMask;
    public Char[] szInfo;
    public UInt32 uVersion;
    public Char[] szInfoTitle;
    public UInt32 dwInfoFlags;
    public Guid guidItem;
    private IntPtr hBalloonIcon;
}
internal enum Standard.OLECMDEXECOPT : Enum {
    public int value__;
    public static OLECMDEXECOPT DODEFAULT;
    public static OLECMDEXECOPT PROMPTUSER;
    public static OLECMDEXECOPT DONTPROMPTUSER;
    public static OLECMDEXECOPT SHOWHELP;
}
internal enum Standard.OLECMDF : Enum {
    public int value__;
    public static OLECMDF SUPPORTED;
    public static OLECMDF ENABLED;
    public static OLECMDF LATCHED;
    public static OLECMDF NINCHED;
    public static OLECMDF INVISIBLE;
    public static OLECMDF DEFHIDEONCTXTMENU;
}
internal enum Standard.OLECMDID : Enum {
    public int value__;
    public static OLECMDID OPEN;
    public static OLECMDID NEW;
    public static OLECMDID SAVE;
    public static OLECMDID SAVEAS;
    public static OLECMDID SAVECOPYAS;
    public static OLECMDID PRINT;
    public static OLECMDID PRINTPREVIEW;
    public static OLECMDID PAGESETUP;
    public static OLECMDID SPELL;
    public static OLECMDID PROPERTIES;
    public static OLECMDID CUT;
    public static OLECMDID COPY;
    public static OLECMDID PASTE;
    public static OLECMDID PASTESPECIAL;
    public static OLECMDID UNDO;
    public static OLECMDID REDO;
    public static OLECMDID SELECTALL;
    public static OLECMDID CLEARSELECTION;
    public static OLECMDID ZOOM;
    public static OLECMDID GETZOOMRANGE;
    public static OLECMDID UPDATECOMMANDS;
    public static OLECMDID REFRESH;
    public static OLECMDID STOP;
    public static OLECMDID HIDETOOLBARS;
    public static OLECMDID SETPROGRESSMAX;
    public static OLECMDID SETPROGRESSPOS;
    public static OLECMDID SETPROGRESSTEXT;
    public static OLECMDID SETTITLE;
    public static OLECMDID SETDOWNLOADSTATE;
    public static OLECMDID STOPDOWNLOAD;
    public static OLECMDID ONTOOLBARACTIVATED;
    public static OLECMDID FIND;
    public static OLECMDID DELETE;
    public static OLECMDID HTTPEQUIV;
    public static OLECMDID HTTPEQUIV_DONE;
    public static OLECMDID ENABLE_INTERACTION;
    public static OLECMDID ONUNLOAD;
    public static OLECMDID PROPERTYBAG2;
    public static OLECMDID PREREFRESH;
    public static OLECMDID SHOWSCRIPTERROR;
    public static OLECMDID SHOWMESSAGE;
    public static OLECMDID SHOWFIND;
    public static OLECMDID SHOWPAGESETUP;
    public static OLECMDID SHOWPRINT;
    public static OLECMDID CLOSE;
    public static OLECMDID ALLOWUILESSSAVEAS;
    public static OLECMDID DONTDOWNLOADCSS;
    public static OLECMDID UPDATEPAGESTATUS;
    public static OLECMDID PRINT2;
    public static OLECMDID PRINTPREVIEW2;
    public static OLECMDID SETPRINTTEMPLATE;
    public static OLECMDID GETPRINTTEMPLATE;
    public static OLECMDID PAGEACTIONBLOCKED;
    public static OLECMDID PAGEACTIONUIQUERY;
    public static OLECMDID FOCUSVIEWCONTROLS;
    public static OLECMDID FOCUSVIEWCONTROLSQUERY;
    public static OLECMDID SHOWPAGEACTIONMENU;
}
internal class Standard.PKEY : ValueType {
    private Guid _fmtid;
    private UInt32 _pid;
    public static PKEY Title;
    public static PKEY AppUserModel_ID;
    public static PKEY AppUserModel_IsDestListSeparator;
    public static PKEY AppUserModel_RelaunchCommand;
    public static PKEY AppUserModel_RelaunchDisplayNameResource;
    public static PKEY AppUserModel_RelaunchIconResource;
    public PKEY(Guid fmtid, UInt32 pid);
    private static PKEY();
}
internal class Standard.POINT : ValueType {
    public int x;
    public int y;
}
internal class Standard.PROPVARIANT : object {
    private ushort vt;
    private IntPtr pointerVal;
    private byte byteVal;
    private long longVal;
    private short boolVal;
    public VarEnum VarType { get; }
    public VarEnum get_VarType();
    public string GetValue();
    public void SetValue(bool f);
    public void SetValue(string val);
    public void Clear();
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    private void Dispose(bool disposing);
}
internal enum Standard.READYSTATE : Enum {
    public int value__;
    public static READYSTATE UNINITIALIZED;
    public static READYSTATE LOADING;
    public static READYSTATE LOADED;
    public static READYSTATE INTERACTIVE;
    public static READYSTATE COMPLETE;
}
internal class Standard.RECT : ValueType {
    private int _left;
    private int _top;
    private int _right;
    private int _bottom;
    public int Left { get; public set; }
    public int Right { get; public set; }
    public int Top { get; public set; }
    public int Bottom { get; public set; }
    public int Width { get; }
    public int Height { get; }
    public POINT Position { get; }
    public SIZE Size { get; }
    public void Offset(int dx, int dy);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Width();
    public int get_Height();
    public POINT get_Position();
    public SIZE get_Size();
    public static RECT Union(RECT rect1, RECT rect2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Standard.RefPOINT : object {
    public int x;
    public int y;
}
internal class Standard.RefRECT : object {
    private int _left;
    private int _top;
    private int _right;
    private int _bottom;
    public int Width { get; }
    public int Height { get; }
    public int Left { get; public set; }
    public int Right { get; public set; }
    public int Top { get; public set; }
    public int Bottom { get; public set; }
    public RefRECT(int left, int top, int right, int bottom);
    public int get_Width();
    public int get_Height();
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public void Offset(int dx, int dy);
}
internal class Standard.RGBQUAD : ValueType {
    public byte rgbBlue;
    public byte rgbGreen;
    public byte rgbRed;
    public byte rgbReserved;
}
internal enum Standard.RGN : Enum {
    public int value__;
    public static RGN AND;
    public static RGN OR;
    public static RGN XOR;
    public static RGN DIFF;
    public static RGN COPY;
}
internal class Standard.SafeConnectionPointCookie : SafeHandleZeroOrMinusOneIsInvalid {
    private IConnectionPoint _cp;
    public SafeConnectionPointCookie(IConnectionPointContainer target, object sink, Guid eventId);
    public void Disconnect();
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
internal class Standard.SafeDC : SafeHandleZeroOrMinusOneIsInvalid {
    private Nullable`1<IntPtr> _hwnd;
    private bool _created;
    unknown IntPtr Hwnd {public set; }
    public void set_Hwnd(IntPtr value);
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
    public static SafeDC CreateDC(string deviceName);
    public static SafeDC CreateCompatibleDC(SafeDC hdc);
    public static SafeDC GetDC(IntPtr hwnd);
    public static SafeDC GetDesktop();
    public static SafeDC WrapDC(IntPtr hdc);
}
internal class Standard.SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class Standard.SafeGdiplusStartupToken : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
    public static SafeGdiplusStartupToken Startup();
}
internal class Standard.SafeHBITMAP : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
internal enum Standard.SC : Enum {
    public int value__;
    public static SC SIZE;
    public static SC MOVE;
    public static SC MINIMIZE;
    public static SC MAXIMIZE;
    public static SC NEXTWINDOW;
    public static SC PREVWINDOW;
    public static SC CLOSE;
    public static SC VSCROLL;
    public static SC HSCROLL;
    public static SC MOUSEMENU;
    public static SC KEYMENU;
    public static SC ARRANGE;
    public static SC RESTORE;
    public static SC TASKLIST;
    public static SC SCREENSAVE;
    public static SC HOTKEY;
    public static SC DEFAULT;
    public static SC MONITORPOWER;
    public static SC CONTEXTHELP;
    public static SC SEPARATOR;
    public static SC F_ISSECURE;
    public static SC ICON;
    public static SC ZOOM;
}
[FlagsAttribute]
internal enum Standard.SFGAO : Enum {
    public UInt32 value__;
    public static SFGAO CANCOPY;
    public static SFGAO CANMOVE;
    public static SFGAO CANLINK;
    public static SFGAO STORAGE;
    public static SFGAO CANRENAME;
    public static SFGAO CANDELETE;
    public static SFGAO HASPROPSHEET;
    public static SFGAO DROPTARGET;
    public static SFGAO CAPABILITYMASK;
    public static SFGAO ENCRYPTED;
    public static SFGAO ISSLOW;
    public static SFGAO GHOSTED;
    public static SFGAO LINK;
    public static SFGAO SHARE;
    public static SFGAO READONLY;
    public static SFGAO HIDDEN;
    public static SFGAO DISPLAYATTRMASK;
    public static SFGAO FILESYSANCESTOR;
    public static SFGAO FOLDER;
    public static SFGAO FILESYSTEM;
    public static SFGAO HASSUBFOLDER;
    public static SFGAO CONTENTSMASK;
    public static SFGAO VALIDATE;
    public static SFGAO REMOVABLE;
    public static SFGAO COMPRESSED;
    public static SFGAO BROWSABLE;
    public static SFGAO NONENUMERATED;
    public static SFGAO NEWCONTENT;
    public static SFGAO CANMONIKER;
    public static SFGAO HASSTORAGE;
    public static SFGAO STREAM;
    public static SFGAO STORAGEANCESTOR;
    public static SFGAO STORAGECAPMASK;
    public static SFGAO PKEYSFGAOMASK;
}
internal enum Standard.SHARD : Enum {
    public int value__;
    public static SHARD PIDL;
    public static SHARD PATHA;
    public static SHARD PATHW;
    public static SHARD APPIDINFO;
    public static SHARD APPIDINFOIDLIST;
    public static SHARD LINK;
    public static SHARD APPIDINFOLINK;
}
internal class Standard.SHARDAPPIDINFO : object {
    private object psi;
    private string pszAppID;
}
internal class Standard.SHARDAPPIDINFOIDLIST : object {
    private IntPtr pidl;
    private string pszAppID;
}
internal class Standard.SHARDAPPIDINFOLINK : object {
    private IntPtr psl;
    private string pszAppID;
}
internal enum Standard.SHCONTF : Enum {
    public int value__;
    public static SHCONTF CHECKING_FOR_CHILDREN;
    public static SHCONTF FOLDERS;
    public static SHCONTF NONFOLDERS;
    public static SHCONTF INCLUDEHIDDEN;
    public static SHCONTF INIT_ON_FIRST_NEXT;
    public static SHCONTF NETPRINTERSRCH;
    public static SHCONTF SHAREABLE;
    public static SHCONTF STORAGE;
    public static SHCONTF NAVIGATION_ENUM;
    public static SHCONTF FASTITEMS;
    public static SHCONTF FLATLIST;
    public static SHCONTF ENABLE_ASYNC;
}
internal class Standard.SHFILEOPSTRUCT : ValueType {
    public IntPtr hwnd;
    public FO wFunc;
    public string pFrom;
    public string pTo;
    public FOF fFlags;
    public int fAnyOperationsAborted;
    public IntPtr hNameMappings;
    public string lpszProgressTitle;
}
[FlagsAttribute]
internal enum Standard.SHGDN : Enum {
    public int value__;
    public static SHGDN SHGDN_NORMAL;
    public static SHGDN SHGDN_INFOLDER;
    public static SHGDN SHGDN_FOREDITING;
    public static SHGDN SHGDN_FORADDRESSBAR;
    public static SHGDN SHGDN_FORPARSING;
}
internal enum Standard.SIATTRIBFLAGS : Enum {
    public int value__;
    public static SIATTRIBFLAGS AND;
    public static SIATTRIBFLAGS OR;
    public static SIATTRIBFLAGS APPCOMPAT;
}
internal enum Standard.SICHINT : Enum {
    public UInt32 value__;
    public static SICHINT DISPLAY;
    public static SICHINT ALLFIELDS;
    public static SICHINT CANONICAL;
    public static SICHINT TEST_FILESYSPATH_IF_NOT_EQUAL;
}
internal enum Standard.SIGDN : Enum {
    public UInt32 value__;
    public static SIGDN NORMALDISPLAY;
    public static SIGDN PARENTRELATIVEPARSING;
    public static SIGDN DESKTOPABSOLUTEPARSING;
    public static SIGDN PARENTRELATIVEEDITING;
    public static SIGDN DESKTOPABSOLUTEEDITING;
    public static SIGDN FILESYSPATH;
    public static SIGDN URL;
    public static SIGDN PARENTRELATIVEFORADDRESSBAR;
    public static SIGDN PARENTRELATIVE;
}
internal class Standard.SIZE : ValueType {
    public int cx;
    public int cy;
}
[FlagsAttribute]
internal enum Standard.SLGP : Enum {
    public int value__;
    public static SLGP SHORTPATH;
    public static SLGP UNCPRIORITY;
    public static SLGP RAWPATH;
}
internal enum Standard.SM : Enum {
    public int value__;
    public static SM CXSCREEN;
    public static SM CYSCREEN;
    public static SM CXVSCROLL;
    public static SM CYHSCROLL;
    public static SM CYCAPTION;
    public static SM CXBORDER;
    public static SM CYBORDER;
    public static SM CXFIXEDFRAME;
    public static SM CYFIXEDFRAME;
    public static SM CYVTHUMB;
    public static SM CXHTHUMB;
    public static SM CXICON;
    public static SM CYICON;
    public static SM CXCURSOR;
    public static SM CYCURSOR;
    public static SM CYMENU;
    public static SM CXFULLSCREEN;
    public static SM CYFULLSCREEN;
    public static SM CYKANJIWINDOW;
    public static SM MOUSEPRESENT;
    public static SM CYVSCROLL;
    public static SM CXHSCROLL;
    public static SM DEBUG;
    public static SM SWAPBUTTON;
    public static SM CXMIN;
    public static SM CYMIN;
    public static SM CXSIZE;
    public static SM CYSIZE;
    public static SM CXFRAME;
    public static SM CXSIZEFRAME;
    public static SM CYFRAME;
    public static SM CYSIZEFRAME;
    public static SM CXMINTRACK;
    public static SM CYMINTRACK;
    public static SM CXDOUBLECLK;
    public static SM CYDOUBLECLK;
    public static SM CXICONSPACING;
    public static SM CYICONSPACING;
    public static SM MENUDROPALIGNMENT;
    public static SM PENWINDOWS;
    public static SM DBCSENABLED;
    public static SM CMOUSEBUTTONS;
    public static SM SECURE;
    public static SM CXEDGE;
    public static SM CYEDGE;
    public static SM CXMINSPACING;
    public static SM CYMINSPACING;
    public static SM CXSMICON;
    public static SM CYSMICON;
    public static SM CYSMCAPTION;
    public static SM CXSMSIZE;
    public static SM CYSMSIZE;
    public static SM CXMENUSIZE;
    public static SM CYMENUSIZE;
    public static SM ARRANGE;
    public static SM CXMINIMIZED;
    public static SM CYMINIMIZED;
    public static SM CXMAXTRACK;
    public static SM CYMAXTRACK;
    public static SM CXMAXIMIZED;
    public static SM CYMAXIMIZED;
    public static SM NETWORK;
    public static SM CLEANBOOT;
    public static SM CXDRAG;
    public static SM CYDRAG;
    public static SM SHOWSOUNDS;
    public static SM CXMENUCHECK;
    public static SM CYMENUCHECK;
    public static SM SLOWMACHINE;
    public static SM MIDEASTENABLED;
    public static SM MOUSEWHEELPRESENT;
    public static SM XVIRTUALSCREEN;
    public static SM YVIRTUALSCREEN;
    public static SM CXVIRTUALSCREEN;
    public static SM CYVIRTUALSCREEN;
    public static SM CMONITORS;
    public static SM SAMEDISPLAYFORMAT;
    public static SM IMMENABLED;
    public static SM CXFOCUSBORDER;
    public static SM CYFOCUSBORDER;
    public static SM TABLETPC;
    public static SM MEDIACENTER;
    public static SM REMOTESESSION;
    public static SM REMOTECONTROL;
}
internal enum Standard.SPI : Enum {
    public int value__;
    public static SPI GETBEEP;
    public static SPI SETBEEP;
    public static SPI GETMOUSE;
    public static SPI SETMOUSE;
    public static SPI GETBORDER;
    public static SPI SETBORDER;
    public static SPI GETKEYBOARDSPEED;
    public static SPI SETKEYBOARDSPEED;
    public static SPI LANGDRIVER;
    public static SPI ICONHORIZONTALSPACING;
    public static SPI GETSCREENSAVETIMEOUT;
    public static SPI SETSCREENSAVETIMEOUT;
    public static SPI GETSCREENSAVEACTIVE;
    public static SPI SETSCREENSAVEACTIVE;
    public static SPI GETGRIDGRANULARITY;
    public static SPI SETGRIDGRANULARITY;
    public static SPI SETDESKWALLPAPER;
    public static SPI SETDESKPATTERN;
    public static SPI GETKEYBOARDDELAY;
    public static SPI SETKEYBOARDDELAY;
    public static SPI ICONVERTICALSPACING;
    public static SPI GETICONTITLEWRAP;
    public static SPI SETICONTITLEWRAP;
    public static SPI GETMENUDROPALIGNMENT;
    public static SPI SETMENUDROPALIGNMENT;
    public static SPI SETDOUBLECLKWIDTH;
    public static SPI SETDOUBLECLKHEIGHT;
    public static SPI GETICONTITLELOGFONT;
    public static SPI SETDOUBLECLICKTIME;
    public static SPI SETMOUSEBUTTONSWAP;
    public static SPI SETICONTITLELOGFONT;
    public static SPI GETFASTTASKSWITCH;
    public static SPI SETFASTTASKSWITCH;
    public static SPI SETDRAGFULLWINDOWS;
    public static SPI GETDRAGFULLWINDOWS;
    public static SPI GETNONCLIENTMETRICS;
    public static SPI SETNONCLIENTMETRICS;
    public static SPI GETMINIMIZEDMETRICS;
    public static SPI SETMINIMIZEDMETRICS;
    public static SPI GETICONMETRICS;
    public static SPI SETICONMETRICS;
    public static SPI SETWORKAREA;
    public static SPI GETWORKAREA;
    public static SPI SETPENWINDOWS;
    public static SPI GETHIGHCONTRAST;
    public static SPI SETHIGHCONTRAST;
    public static SPI GETKEYBOARDPREF;
    public static SPI SETKEYBOARDPREF;
    public static SPI GETSCREENREADER;
    public static SPI SETSCREENREADER;
    public static SPI GETANIMATION;
    public static SPI SETANIMATION;
    public static SPI GETFONTSMOOTHING;
    public static SPI SETFONTSMOOTHING;
    public static SPI SETDRAGWIDTH;
    public static SPI SETDRAGHEIGHT;
    public static SPI SETHANDHELD;
    public static SPI GETLOWPOWERTIMEOUT;
    public static SPI GETPOWEROFFTIMEOUT;
    public static SPI SETLOWPOWERTIMEOUT;
    public static SPI SETPOWEROFFTIMEOUT;
    public static SPI GETLOWPOWERACTIVE;
    public static SPI GETPOWEROFFACTIVE;
    public static SPI SETLOWPOWERACTIVE;
    public static SPI SETPOWEROFFACTIVE;
    public static SPI SETCURSORS;
    public static SPI SETICONS;
    public static SPI GETDEFAULTINPUTLANG;
    public static SPI SETDEFAULTINPUTLANG;
    public static SPI SETLANGTOGGLE;
    public static SPI GETWINDOWSEXTENSION;
    public static SPI SETMOUSETRAILS;
    public static SPI GETMOUSETRAILS;
    public static SPI SETSCREENSAVERRUNNING;
    public static SPI SCREENSAVERRUNNING;
    public static SPI GETFILTERKEYS;
    public static SPI SETFILTERKEYS;
    public static SPI GETTOGGLEKEYS;
    public static SPI SETTOGGLEKEYS;
    public static SPI GETMOUSEKEYS;
    public static SPI SETMOUSEKEYS;
    public static SPI GETSHOWSOUNDS;
    public static SPI SETSHOWSOUNDS;
    public static SPI GETSTICKYKEYS;
    public static SPI SETSTICKYKEYS;
    public static SPI GETACCESSTIMEOUT;
    public static SPI SETACCESSTIMEOUT;
    public static SPI GETSERIALKEYS;
    public static SPI SETSERIALKEYS;
    public static SPI GETSOUNDSENTRY;
    public static SPI SETSOUNDSENTRY;
    public static SPI GETSNAPTODEFBUTTON;
    public static SPI SETSNAPTODEFBUTTON;
    public static SPI GETMOUSEHOVERWIDTH;
    public static SPI SETMOUSEHOVERWIDTH;
    public static SPI GETMOUSEHOVERHEIGHT;
    public static SPI SETMOUSEHOVERHEIGHT;
    public static SPI GETMOUSEHOVERTIME;
    public static SPI SETMOUSEHOVERTIME;
    public static SPI GETWHEELSCROLLLINES;
    public static SPI SETWHEELSCROLLLINES;
    public static SPI GETMENUSHOWDELAY;
    public static SPI SETMENUSHOWDELAY;
    public static SPI GETWHEELSCROLLCHARS;
    public static SPI SETWHEELSCROLLCHARS;
    public static SPI GETSHOWIMEUI;
    public static SPI SETSHOWIMEUI;
    public static SPI GETMOUSESPEED;
    public static SPI SETMOUSESPEED;
    public static SPI GETSCREENSAVERRUNNING;
    public static SPI GETDESKWALLPAPER;
    public static SPI GETAUDIODESCRIPTION;
    public static SPI SETAUDIODESCRIPTION;
    public static SPI GETSCREENSAVESECURE;
    public static SPI SETSCREENSAVESECURE;
    public static SPI GETHUNGAPPTIMEOUT;
    public static SPI SETHUNGAPPTIMEOUT;
    public static SPI GETWAITTOKILLTIMEOUT;
    public static SPI SETWAITTOKILLTIMEOUT;
    public static SPI GETWAITTOKILLSERVICETIMEOUT;
    public static SPI SETWAITTOKILLSERVICETIMEOUT;
    public static SPI GETMOUSEDOCKTHRESHOLD;
    public static SPI SETMOUSEDOCKTHRESHOLD;
    public static SPI GETPENDOCKTHRESHOLD;
    public static SPI SETPENDOCKTHRESHOLD;
    public static SPI GETWINARRANGING;
    public static SPI SETWINARRANGING;
    public static SPI GETMOUSEDRAGOUTTHRESHOLD;
    public static SPI SETMOUSEDRAGOUTTHRESHOLD;
    public static SPI GETPENDRAGOUTTHRESHOLD;
    public static SPI SETPENDRAGOUTTHRESHOLD;
    public static SPI GETMOUSESIDEMOVETHRESHOLD;
    public static SPI SETMOUSESIDEMOVETHRESHOLD;
    public static SPI GETPENSIDEMOVETHRESHOLD;
    public static SPI SETPENSIDEMOVETHRESHOLD;
    public static SPI GETDRAGFROMMAXIMIZE;
    public static SPI SETDRAGFROMMAXIMIZE;
    public static SPI GETSNAPSIZING;
    public static SPI SETSNAPSIZING;
    public static SPI GETDOCKMOVING;
    public static SPI SETDOCKMOVING;
    public static SPI GETACTIVEWINDOWTRACKING;
    public static SPI SETACTIVEWINDOWTRACKING;
    public static SPI GETMENUANIMATION;
    public static SPI SETMENUANIMATION;
    public static SPI GETCOMBOBOXANIMATION;
    public static SPI SETCOMBOBOXANIMATION;
    public static SPI GETLISTBOXSMOOTHSCROLLING;
    public static SPI SETLISTBOXSMOOTHSCROLLING;
    public static SPI GETGRADIENTCAPTIONS;
    public static SPI SETGRADIENTCAPTIONS;
    public static SPI GETKEYBOARDCUES;
    public static SPI SETKEYBOARDCUES;
    public static SPI GETMENUUNDERLINES;
    public static SPI SETMENUUNDERLINES;
    public static SPI GETACTIVEWNDTRKZORDER;
    public static SPI SETACTIVEWNDTRKZORDER;
    public static SPI GETHOTTRACKING;
    public static SPI SETHOTTRACKING;
    public static SPI GETMENUFADE;
    public static SPI SETMENUFADE;
    public static SPI GETSELECTIONFADE;
    public static SPI SETSELECTIONFADE;
    public static SPI GETTOOLTIPANIMATION;
    public static SPI SETTOOLTIPANIMATION;
    public static SPI GETTOOLTIPFADE;
    public static SPI SETTOOLTIPFADE;
    public static SPI GETCURSORSHADOW;
    public static SPI SETCURSORSHADOW;
    public static SPI GETMOUSESONAR;
    public static SPI SETMOUSESONAR;
    public static SPI GETMOUSECLICKLOCK;
    public static SPI SETMOUSECLICKLOCK;
    public static SPI GETMOUSEVANISH;
    public static SPI SETMOUSEVANISH;
    public static SPI GETFLATMENU;
    public static SPI SETFLATMENU;
    public static SPI GETDROPSHADOW;
    public static SPI SETDROPSHADOW;
    public static SPI GETBLOCKSENDINPUTRESETS;
    public static SPI SETBLOCKSENDINPUTRESETS;
    public static SPI GETUIEFFECTS;
    public static SPI SETUIEFFECTS;
    public static SPI GETDISABLEOVERLAPPEDCONTENT;
    public static SPI SETDISABLEOVERLAPPEDCONTENT;
    public static SPI GETCLIENTAREAANIMATION;
    public static SPI SETCLIENTAREAANIMATION;
    public static SPI GETCLEARTYPE;
    public static SPI SETCLEARTYPE;
    public static SPI GETSPEECHRECOGNITION;
    public static SPI SETSPEECHRECOGNITION;
    public static SPI GETFOREGROUNDLOCKTIMEOUT;
    public static SPI SETFOREGROUNDLOCKTIMEOUT;
    public static SPI GETACTIVEWNDTRKTIMEOUT;
    public static SPI SETACTIVEWNDTRKTIMEOUT;
    public static SPI GETFOREGROUNDFLASHCOUNT;
    public static SPI SETFOREGROUNDFLASHCOUNT;
    public static SPI GETCARETWIDTH;
    public static SPI SETCARETWIDTH;
    public static SPI GETMOUSECLICKLOCKTIME;
    public static SPI SETMOUSECLICKLOCKTIME;
    public static SPI GETFONTSMOOTHINGTYPE;
    public static SPI SETFONTSMOOTHINGTYPE;
    public static SPI GETFONTSMOOTHINGCONTRAST;
    public static SPI SETFONTSMOOTHINGCONTRAST;
    public static SPI GETFOCUSBORDERWIDTH;
    public static SPI SETFOCUSBORDERWIDTH;
    public static SPI GETFOCUSBORDERHEIGHT;
    public static SPI SETFOCUSBORDERHEIGHT;
    public static SPI GETFONTSMOOTHINGORIENTATION;
    public static SPI SETFONTSMOOTHINGORIENTATION;
    public static SPI GETMINIMUMHITRADIUS;
    public static SPI SETMINIMUMHITRADIUS;
    public static SPI GETMESSAGEDURATION;
    public static SPI SETMESSAGEDURATION;
}
[FlagsAttribute]
internal enum Standard.SPIF : Enum {
    public int value__;
    public static SPIF None;
    public static SPIF UPDATEINIFILE;
    public static SPIF SENDCHANGE;
    public static SPIF SENDWININICHANGE;
}
internal class Standard.StartupInput : object {
    public int GdiplusVersion;
    public IntPtr DebugEventCallback;
    public bool SuppressBackgroundThread;
    public bool SuppressExternalCodecs;
}
internal class Standard.StartupOutput : ValueType {
    public IntPtr hook;
    public IntPtr unhook;
}
[FlagsAttribute]
internal enum Standard.STATE_SYSTEM : Enum {
    public int value__;
    public static STATE_SYSTEM UNAVAILABLE;
    public static STATE_SYSTEM SELECTED;
    public static STATE_SYSTEM FOCUSED;
    public static STATE_SYSTEM PRESSED;
    public static STATE_SYSTEM CHECKED;
    public static STATE_SYSTEM MIXED;
    public static STATE_SYSTEM INDETERMINATE;
    public static STATE_SYSTEM READONLY;
    public static STATE_SYSTEM HOTTRACKED;
    public static STATE_SYSTEM DEFAULT;
    public static STATE_SYSTEM EXPANDED;
    public static STATE_SYSTEM COLLAPSED;
    public static STATE_SYSTEM BUSY;
    public static STATE_SYSTEM FLOATING;
    public static STATE_SYSTEM MARQUEED;
    public static STATE_SYSTEM ANIMATED;
    public static STATE_SYSTEM INVISIBLE;
    public static STATE_SYSTEM OFFSCREEN;
    public static STATE_SYSTEM SIZEABLE;
    public static STATE_SYSTEM MOVEABLE;
    public static STATE_SYSTEM SELFVOICING;
    public static STATE_SYSTEM FOCUSABLE;
    public static STATE_SYSTEM SELECTABLE;
    public static STATE_SYSTEM LINKED;
    public static STATE_SYSTEM TRAVERSED;
    public static STATE_SYSTEM MULTISELECTABLE;
    public static STATE_SYSTEM EXTSELECTABLE;
    public static STATE_SYSTEM ALERT_LOW;
    public static STATE_SYSTEM ALERT_MEDIUM;
    public static STATE_SYSTEM ALERT_HIGH;
    public static STATE_SYSTEM PROTECTED;
    public static STATE_SYSTEM VALID;
}
internal enum Standard.Status : Enum {
    public int value__;
    public static Status Ok;
    public static Status GenericError;
    public static Status InvalidParameter;
    public static Status OutOfMemory;
    public static Status ObjectBusy;
    public static Status InsufficientBuffer;
    public static Status NotImplemented;
    public static Status Win32Error;
    public static Status WrongState;
    public static Status Aborted;
    public static Status FileNotFound;
    public static Status ValueOverflow;
    public static Status AccessDenied;
    public static Status UnknownImageFormat;
    public static Status FontFamilyNotFound;
    public static Status FontStyleNotFound;
    public static Status NotTrueTypeFont;
    public static Status UnsupportedGdiplusVersion;
    public static Status GdiplusNotInitialized;
    public static Status PropertyNotFound;
    public static Status PropertyNotSupported;
    public static Status ProfileNotFound;
}
internal enum Standard.StockObject : Enum {
    public int value__;
    public static StockObject WHITE_BRUSH;
    public static StockObject LTGRAY_BRUSH;
    public static StockObject GRAY_BRUSH;
    public static StockObject DKGRAY_BRUSH;
    public static StockObject BLACK_BRUSH;
    public static StockObject NULL_BRUSH;
    public static StockObject HOLLOW_BRUSH;
    public static StockObject WHITE_PEN;
    public static StockObject BLACK_PEN;
    public static StockObject NULL_PEN;
    public static StockObject SYSTEM_FONT;
    public static StockObject DEFAULT_PALETTE;
}
[FlagsAttribute]
internal enum Standard.STPF : Enum {
    public int value__;
    public static STPF NONE;
    public static STPF USEAPPTHUMBNAILALWAYS;
    public static STPF USEAPPTHUMBNAILWHENACTIVE;
    public static STPF USEAPPPEEKALWAYS;
    public static STPF USEAPPPEEKWHENACTIVE;
}
internal static class Standard.STR_GPS : object {
    public static string HANDLERPROPERTIESONLY;
    public static string FASTPROPERTIESONLY;
    public static string OPENSLOWITEM;
    public static string DELAYCREATION;
    public static string BESTEFFORT;
    public static string NO_OPLOCK;
}
internal enum Standard.SW : Enum {
    public int value__;
    public static SW HIDE;
    public static SW SHOWNORMAL;
    public static SW NORMAL;
    public static SW SHOWMINIMIZED;
    public static SW SHOWMAXIMIZED;
    public static SW MAXIMIZE;
    public static SW SHOWNOACTIVATE;
    public static SW SHOW;
    public static SW MINIMIZE;
    public static SW SHOWMINNOACTIVE;
    public static SW SHOWNA;
    public static SW RESTORE;
    public static SW SHOWDEFAULT;
    public static SW FORCEMINIMIZE;
}
[FlagsAttribute]
internal enum Standard.SWP : Enum {
    public int value__;
    public static SWP ASYNCWINDOWPOS;
    public static SWP DEFERERASE;
    public static SWP DRAWFRAME;
    public static SWP FRAMECHANGED;
    public static SWP HIDEWINDOW;
    public static SWP NOACTIVATE;
    public static SWP NOCOPYBITS;
    public static SWP NOMOVE;
    public static SWP NOOWNERZORDER;
    public static SWP NOREDRAW;
    public static SWP NOREPOSITION;
    public static SWP NOSENDCHANGING;
    public static SWP NOSIZE;
    public static SWP NOZORDER;
    public static SWP SHOWWINDOW;
}
internal enum Standard.TBPF : Enum {
    public int value__;
    public static TBPF NOPROGRESS;
    public static TBPF INDETERMINATE;
    public static TBPF NORMAL;
    public static TBPF ERROR;
    public static TBPF PAUSED;
}
[FlagsAttribute]
internal enum Standard.THB : Enum {
    public UInt32 value__;
    public static THB BITMAP;
    public static THB ICON;
    public static THB TOOLTIP;
    public static THB FLAGS;
}
[FlagsAttribute]
internal enum Standard.THBF : Enum {
    public UInt32 value__;
    public static THBF ENABLED;
    public static THBF DISABLED;
    public static THBF DISMISSONCLICK;
    public static THBF NOBACKGROUND;
    public static THBF HIDDEN;
    public static THBF NONINTERACTIVE;
}
internal class Standard.THUMBBUTTON : ValueType {
    public static int THBN_CLICKED;
    public THB dwMask;
    public UInt32 iId;
    public UInt32 iBitmap;
    public IntPtr hIcon;
    public string szTip;
    public THBF dwFlags;
}
internal class Standard.TITLEBARINFO : ValueType {
    public int cbSize;
    public RECT rcTitleBar;
    public STATE_SYSTEM rgstate_TitleBar;
    public STATE_SYSTEM rgstate_Reserved;
    public STATE_SYSTEM rgstate_MinimizeButton;
    public STATE_SYSTEM rgstate_MaximizeButton;
    public STATE_SYSTEM rgstate_HelpButton;
    public STATE_SYSTEM rgstate_CloseButton;
}
internal class Standard.TITLEBARINFOEX : ValueType {
    public int cbSize;
    public RECT rcTitleBar;
    public STATE_SYSTEM rgstate_TitleBar;
    public STATE_SYSTEM rgstate_Reserved;
    public STATE_SYSTEM rgstate_MinimizeButton;
    public STATE_SYSTEM rgstate_MaximizeButton;
    public STATE_SYSTEM rgstate_HelpButton;
    public STATE_SYSTEM rgstate_CloseButton;
    public RECT rgrect_TitleBar;
    public RECT rgrect_Reserved;
    public RECT rgrect_MinimizeButton;
    public RECT rgrect_MaximizeButton;
    public RECT rgrect_HelpButton;
    public RECT rgrect_CloseButton;
}
internal enum Standard.ULW : Enum {
    public int value__;
    public static ULW ALPHA;
    public static ULW COLORKEY;
    public static ULW OPAQUE;
}
internal class Standard.UNSIGNED_RATIO : ValueType {
    public UInt32 uiNumerator;
    public UInt32 uiDenominator;
}
internal static class Standard.Utility : object {
    private static Version _osVersion;
    private static Version _presentationFrameworkVersion;
    private static int s_bitDepth;
    public static bool IsOSVistaOrNewer { get; }
    public static bool IsOSWindows7OrNewer { get; }
    public static bool IsPresentationFrameworkVersionLessThan4 { get; }
    private static Utility();
    private static bool _MemCmp(IntPtr left, IntPtr right, long cb);
    public static int RGB(Color c);
    public static Color ColorFromArgbDword(UInt32 color);
    public static int GET_X_LPARAM(IntPtr lParam);
    public static int GET_Y_LPARAM(IntPtr lParam);
    public static int HIWORD(int i);
    public static int LOWORD(int i);
    public static bool AreStreamsEqual(Stream left, Stream right);
    public static bool GuidTryParse(string guidString, Guid& guid);
    public static bool IsFlagSet(int value, int mask);
    public static bool IsFlagSet(UInt32 value, UInt32 mask);
    public static bool IsFlagSet(long value, long mask);
    public static bool IsFlagSet(ulong value, ulong mask);
    public static bool get_IsOSVistaOrNewer();
    public static bool get_IsOSWindows7OrNewer();
    public static bool get_IsPresentationFrameworkVersionLessThan4();
    public static IntPtr GenerateHICON(ImageSource image, Size dimensions);
    public static BitmapFrame GetBestMatch(IList`1<BitmapFrame> frames, int width, int height);
    private static int _MatchImage(BitmapFrame frame, int bitDepth, int width, int height, int bpp);
    private static int _WeightedAbs(int valueHave, int valueWant, bool fPunish);
    private static BitmapFrame _GetBestMatch(IList`1<BitmapFrame> frames, int bitDepth, int width, int height);
    private static int _GetBitDepth();
    public static void SafeDeleteFile(string path);
    public static void SafeDeleteObject(IntPtr& gdiObject);
    public static void SafeDestroyIcon(IntPtr& hicon);
    public static void SafeDestroyWindow(IntPtr& hwnd);
    public static void SafeDispose(T& disposable);
    public static void SafeDisposeImage(IntPtr& gdipImage);
    public static void SafeCoTaskMemFree(IntPtr& ptr);
    public static void SafeFreeHGlobal(IntPtr& hglobal);
    public static void SafeRelease(T& comObject);
    public static void GeneratePropertyString(StringBuilder source, string propertyName, string value);
    [ObsoleteAttribute]
public static string GenerateToString(T object);
    public static void CopyStream(Stream destination, Stream source);
    public static string HashStreamMD5(Stream stm);
    public static void EnsureDirectory(string path);
    public static bool MemCmp(Byte[] left, Byte[] right, int cb);
    public static string UrlDecode(string url);
    public static string UrlEncode(string url);
    private static bool _UrlEncodeIsSafe(byte b);
    private static bool _IsAsciiAlphaNumeric(byte b);
    private static byte _IntToHex(int n);
    private static int _HexToInt(char h);
    public static void AddDependencyPropertyChangeListener(object component, DependencyProperty property, EventHandler listener);
    public static void RemoveDependencyPropertyChangeListener(object component, DependencyProperty property, EventHandler listener);
    public static bool IsThicknessNonNegative(Thickness thickness);
    public static bool IsCornerRadiusValid(CornerRadius cornerRadius);
    public static bool IsDoubleFiniteAndNonNegative(double d);
}
internal static class Standard.Verify : object {
    [DebuggerStepThroughAttribute]
public static void IsApartmentState(ApartmentState requiredState, string message);
    [DebuggerStepThroughAttribute]
public static void IsNeitherNullNorEmpty(string value, string name);
    [DebuggerStepThroughAttribute]
public static void IsNeitherNullNorWhitespace(string value, string name);
    [DebuggerStepThroughAttribute]
public static void IsNotDefault(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void IsNotNull(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void IsNull(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void PropertyIsNotNull(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void PropertyIsNull(T obj, string name);
    [DebuggerStepThroughAttribute]
public static void IsTrue(bool statement, string name);
    [DebuggerStepThroughAttribute]
public static void IsTrue(bool statement, string name, string message);
    [DebuggerStepThroughAttribute]
public static void AreEqual(T expected, T actual, string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static void AreNotEqual(T notExpected, T actual, string parameterName, string message);
    [DebuggerStepThroughAttribute]
public static void UriIsAbsolute(Uri uri, string parameterName);
    [DebuggerStepThroughAttribute]
public static void BoundedInteger(int lowerBoundInclusive, int value, int upperBoundExclusive, string parameterName);
    [DebuggerStepThroughAttribute]
public static void BoundedDoubleInc(double lowerBoundInclusive, double value, double upperBoundInclusive, string message, string parameter);
    [DebuggerStepThroughAttribute]
public static void TypeSupportsInterface(Type type, Type interfaceType, string parameterName);
    [DebuggerStepThroughAttribute]
public static void FileExists(string filePath, string parameterName);
    [DebuggerStepThroughAttribute]
internal static void ImplementsInterface(object parameter, Type interfaceType, string parameterName);
}
[BestFitMappingAttribute("False")]
internal class Standard.WIN32_FIND_DATAW : object {
    public FileAttributes dwFileAttributes;
    public FILETIME ftCreationTime;
    public FILETIME ftLastAccessTime;
    public FILETIME ftLastWriteTime;
    public int nFileSizeHigh;
    public int nFileSizeLow;
    public int dwReserved0;
    public int dwReserved1;
    public string cFileName;
    public string cAlternateFileName;
}
internal class Standard.Win32Error : ValueType {
    private int _value;
    public static Win32Error ERROR_SUCCESS;
    public static Win32Error ERROR_INVALID_FUNCTION;
    public static Win32Error ERROR_FILE_NOT_FOUND;
    public static Win32Error ERROR_PATH_NOT_FOUND;
    public static Win32Error ERROR_TOO_MANY_OPEN_FILES;
    public static Win32Error ERROR_ACCESS_DENIED;
    public static Win32Error ERROR_INVALID_HANDLE;
    public static Win32Error ERROR_OUTOFMEMORY;
    public static Win32Error ERROR_NO_MORE_FILES;
    public static Win32Error ERROR_SHARING_VIOLATION;
    public static Win32Error ERROR_INVALID_PARAMETER;
    public static Win32Error ERROR_INSUFFICIENT_BUFFER;
    public static Win32Error ERROR_NESTING_NOT_ALLOWED;
    public static Win32Error ERROR_KEY_DELETED;
    public static Win32Error ERROR_NOT_FOUND;
    public static Win32Error ERROR_NO_MATCH;
    public static Win32Error ERROR_BAD_DEVICE;
    public static Win32Error ERROR_CANCELLED;
    public static Win32Error ERROR_CLASS_ALREADY_EXISTS;
    public static Win32Error ERROR_INVALID_DATATYPE;
    public Win32Error(int i);
    private static Win32Error();
    public static HRESULT op_Explicit(Win32Error error);
    public HRESULT ToHRESULT();
    public static Win32Error GetLastError();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Win32Error errLeft, Win32Error errRight);
    public static bool op_Inequality(Win32Error errLeft, Win32Error errRight);
}
internal static class Standard.Win32Value : object {
    public static UInt32 MAX_PATH;
    public static UInt32 INFOTIPSIZE;
    public static UInt32 TRUE;
    public static UInt32 FALSE;
    public static UInt32 sizeof_WCHAR;
    public static UInt32 sizeof_CHAR;
    public static UInt32 sizeof_BOOL;
}
internal class Standard.WINDOWPLACEMENT : object {
    public int length;
    public int flags;
    public SW showCmd;
    public POINT ptMinPosition;
    public POINT ptMaxPosition;
    public RECT rcNormalPosition;
}
internal class Standard.WINDOWPOS : ValueType {
    public IntPtr hwnd;
    public IntPtr hwndInsertAfter;
    public int x;
    public int y;
    public int cx;
    public int cy;
    public int flags;
}
internal enum Standard.WINDOWTHEMEATTRIBUTETYPE : Enum {
    public UInt32 value__;
    public static WINDOWTHEMEATTRIBUTETYPE WTA_NONCLIENT;
}
internal enum Standard.WM : Enum {
    public int value__;
    public static WM NULL;
    public static WM CREATE;
    public static WM DESTROY;
    public static WM MOVE;
    public static WM SIZE;
    public static WM ACTIVATE;
    public static WM SETFOCUS;
    public static WM KILLFOCUS;
    public static WM ENABLE;
    public static WM SETREDRAW;
    public static WM SETTEXT;
    public static WM GETTEXT;
    public static WM GETTEXTLENGTH;
    public static WM PAINT;
    public static WM CLOSE;
    public static WM QUERYENDSESSION;
    public static WM QUIT;
    public static WM QUERYOPEN;
    public static WM ERASEBKGND;
    public static WM SYSCOLORCHANGE;
    public static WM SHOWWINDOW;
    public static WM CTLCOLOR;
    public static WM WININICHANGE;
    public static WM SETTINGCHANGE;
    public static WM ACTIVATEAPP;
    public static WM SETCURSOR;
    public static WM MOUSEACTIVATE;
    public static WM CHILDACTIVATE;
    public static WM QUEUESYNC;
    public static WM GETMINMAXINFO;
    public static WM WINDOWPOSCHANGING;
    public static WM WINDOWPOSCHANGED;
    public static WM CONTEXTMENU;
    public static WM STYLECHANGING;
    public static WM STYLECHANGED;
    public static WM DISPLAYCHANGE;
    public static WM GETICON;
    public static WM SETICON;
    public static WM NCCREATE;
    public static WM NCDESTROY;
    public static WM NCCALCSIZE;
    public static WM NCHITTEST;
    public static WM NCPAINT;
    public static WM NCACTIVATE;
    public static WM GETDLGCODE;
    public static WM SYNCPAINT;
    public static WM NCMOUSEMOVE;
    public static WM NCLBUTTONDOWN;
    public static WM NCLBUTTONUP;
    public static WM NCLBUTTONDBLCLK;
    public static WM NCRBUTTONDOWN;
    public static WM NCRBUTTONUP;
    public static WM NCRBUTTONDBLCLK;
    public static WM NCMBUTTONDOWN;
    public static WM NCMBUTTONUP;
    public static WM NCMBUTTONDBLCLK;
    public static WM SYSKEYDOWN;
    public static WM SYSKEYUP;
    public static WM SYSCHAR;
    public static WM SYSDEADCHAR;
    public static WM COMMAND;
    public static WM SYSCOMMAND;
    public static WM MOUSEMOVE;
    public static WM LBUTTONDOWN;
    public static WM LBUTTONUP;
    public static WM LBUTTONDBLCLK;
    public static WM RBUTTONDOWN;
    public static WM RBUTTONUP;
    public static WM RBUTTONDBLCLK;
    public static WM MBUTTONDOWN;
    public static WM MBUTTONUP;
    public static WM MBUTTONDBLCLK;
    public static WM MOUSEWHEEL;
    public static WM XBUTTONDOWN;
    public static WM XBUTTONUP;
    public static WM XBUTTONDBLCLK;
    public static WM MOUSEHWHEEL;
    public static WM PARENTNOTIFY;
    public static WM CAPTURECHANGED;
    public static WM POWERBROADCAST;
    public static WM DEVICECHANGE;
    public static WM ENTERSIZEMOVE;
    public static WM EXITSIZEMOVE;
    public static WM IME_SETCONTEXT;
    public static WM IME_NOTIFY;
    public static WM IME_CONTROL;
    public static WM IME_COMPOSITIONFULL;
    public static WM IME_SELECT;
    public static WM IME_CHAR;
    public static WM IME_REQUEST;
    public static WM IME_KEYDOWN;
    public static WM IME_KEYUP;
    public static WM NCMOUSELEAVE;
    public static WM TABLET_DEFBASE;
    public static WM TABLET_ADDED;
    public static WM TABLET_DELETED;
    public static WM TABLET_FLICK;
    public static WM TABLET_QUERYSYSTEMGESTURESTATUS;
    public static WM CUT;
    public static WM COPY;
    public static WM PASTE;
    public static WM CLEAR;
    public static WM UNDO;
    public static WM RENDERFORMAT;
    public static WM RENDERALLFORMATS;
    public static WM DESTROYCLIPBOARD;
    public static WM DRAWCLIPBOARD;
    public static WM PAINTCLIPBOARD;
    public static WM VSCROLLCLIPBOARD;
    public static WM SIZECLIPBOARD;
    public static WM ASKCBFORMATNAME;
    public static WM CHANGECBCHAIN;
    public static WM HSCROLLCLIPBOARD;
    public static WM QUERYNEWPALETTE;
    public static WM PALETTEISCHANGING;
    public static WM PALETTECHANGED;
    public static WM HOTKEY;
    public static WM PRINT;
    public static WM PRINTCLIENT;
    public static WM APPCOMMAND;
    public static WM THEMECHANGED;
    public static WM DWMCOMPOSITIONCHANGED;
    public static WM DWMNCRENDERINGCHANGED;
    public static WM DWMCOLORIZATIONCOLORCHANGED;
    public static WM DWMWINDOWMAXIMIZEDCHANGE;
    public static WM GETTITLEBARINFOEX;
    public static WM DWMSENDICONICTHUMBNAIL;
    public static WM DWMSENDICONICLIVEPREVIEWBITMAP;
    public static WM USER;
    public static WM TRAYMOUSEMESSAGE;
    public static WM APP;
}
internal class Standard.WNDCLASSEX : ValueType {
    public int cbSize;
    public CS style;
    public WndProc lpfnWndProc;
    public int cbClsExtra;
    public int cbWndExtra;
    public IntPtr hInstance;
    public IntPtr hIcon;
    public IntPtr hCursor;
    public IntPtr hbrBackground;
    public string lpszMenuName;
    public string lpszClassName;
    public IntPtr hIconSm;
}
internal class Standard.WndProc : MulticastDelegate {
    public WndProc(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr hwnd, WM uMsg, IntPtr wParam, IntPtr lParam);
    public virtual IAsyncResult BeginInvoke(IntPtr hwnd, WM uMsg, IntPtr wParam, IntPtr lParam, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
internal class Standard.WndProcHook : MulticastDelegate {
    public WndProcHook(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr hwnd, WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    public virtual IAsyncResult BeginInvoke(IntPtr hwnd, WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(Boolean& handled, IAsyncResult result);
}
[FlagsAttribute]
internal enum Standard.WS : Enum {
    public UInt32 value__;
    public static WS OVERLAPPED;
    public static WS POPUP;
    public static WS CHILD;
    public static WS MINIMIZE;
    public static WS VISIBLE;
    public static WS DISABLED;
    public static WS CLIPSIBLINGS;
    public static WS CLIPCHILDREN;
    public static WS MAXIMIZE;
    public static WS BORDER;
    public static WS DLGFRAME;
    public static WS VSCROLL;
    public static WS HSCROLL;
    public static WS SYSMENU;
    public static WS THICKFRAME;
    public static WS GROUP;
    public static WS TABSTOP;
    public static WS MINIMIZEBOX;
    public static WS MAXIMIZEBOX;
    public static WS CAPTION;
    public static WS TILED;
    public static WS ICONIC;
    public static WS SIZEBOX;
    public static WS TILEDWINDOW;
    public static WS OVERLAPPEDWINDOW;
    public static WS POPUPWINDOW;
    public static WS CHILDWINDOW;
}
[FlagsAttribute]
internal enum Standard.WS_EX : Enum {
    public UInt32 value__;
    public static WS_EX None;
    public static WS_EX DLGMODALFRAME;
    public static WS_EX NOPARENTNOTIFY;
    public static WS_EX TOPMOST;
    public static WS_EX ACCEPTFILES;
    public static WS_EX TRANSPARENT;
    public static WS_EX MDICHILD;
    public static WS_EX TOOLWINDOW;
    public static WS_EX WINDOWEDGE;
    public static WS_EX CLIENTEDGE;
    public static WS_EX CONTEXTHELP;
    public static WS_EX RIGHT;
    public static WS_EX LEFT;
    public static WS_EX RTLREADING;
    public static WS_EX LTRREADING;
    public static WS_EX LEFTSCROLLBAR;
    public static WS_EX RIGHTSCROLLBAR;
    public static WS_EX CONTROLPARENT;
    public static WS_EX STATICEDGE;
    public static WS_EX APPWINDOW;
    public static WS_EX LAYERED;
    public static WS_EX NOINHERITLAYOUT;
    public static WS_EX LAYOUTRTL;
    public static WS_EX COMPOSITED;
    public static WS_EX NOACTIVATE;
    public static WS_EX OVERLAPPEDWINDOW;
    public static WS_EX PALETTEWINDOW;
}
internal class Standard.WTA_OPTIONS : ValueType {
    public static UInt32 Size;
    public WTNCA dwFlags;
    public WTNCA dwMask;
}
[FlagsAttribute]
internal enum Standard.WTNCA : Enum {
    public UInt32 value__;
    public static WTNCA NODRAWCAPTION;
    public static WTNCA NODRAWICON;
    public static WTNCA NOSYSMENU;
    public static WTNCA NOMIRRORHELP;
    public static WTNCA VALIDBITS;
}
internal enum Standard.WVR : Enum {
    public int value__;
    public static WVR ALIGNTOP;
    public static WVR ALIGNLEFT;
    public static WVR ALIGNBOTTOM;
    public static WVR ALIGNRIGHT;
    public static WVR HREDRAW;
    public static WVR VREDRAW;
    public static WVR VALIDRECTS;
    public static WVR REDRAW;
}
internal class Syncfusion.AssemblyInfo : SharedBaseAssembly {
}
public class Syncfusion.SharedBaseAssembly : object {
    public static string Name;
    public static Assembly Assembly;
    public static string RootNamespace;
    private static SharedBaseAssembly();
    public static Assembly AssemblyResolver(object sender, ResolveEventArgs e);
}
public class Syncfusion.Windows.Automation.Peers.CalendarAutomationPeer : FrameworkElementAutomationPeer {
    private Dictionary`2<DateTimeCalendarModePair, CalendarChildrenAutomationPeer> calendarChildren;
    private List`1<AutomationPeer> peers;
    private Calendar OwningCalendar { get; }
    private Grid OwningGrid { get; }
    private Dictionary`2<DateTimeCalendarModePair, CalendarChildrenAutomationPeer> CalendarChildrenPeers { get; private set; }
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private int System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor { get; }
    public CalendarAutomationPeer(Calendar owner);
    private Calendar get_OwningCalendar();
    private Grid get_OwningGrid();
    private Dictionary`2<DateTimeCalendarModePair, CalendarChildrenAutomationPeer> get_CalendarChildrenPeers();
    private void set_CalendarChildrenPeers(Dictionary`2<DateTimeCalendarModePair, CalendarChildrenAutomationPeer> value);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    private CalendarChildrenAutomationPeer GetCalendarChildrenAutomationPeer(DateTime date, CalendarMode displayMode);
    internal void RaiseSelectionEvents(SelectionChangedEventArgs e);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override int System.Windows.Automation.Provider.IMultipleViewProvider.get_CurrentView();
    private sealed virtual override Int32[] System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews();
    private sealed virtual override string System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(int viewId);
    private sealed virtual override void System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(int viewId);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.get_RowOrColumnMajor();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetRowHeaders();
    internal void Dispose();
}
public class Syncfusion.Windows.Automation.Peers.CalendarButtonAutomationPeer : ButtonAutomationPeer {
    private Calendar OwningCalendar { get; }
    private IRawElementProviderSimple OwningCalendarAutomationPeer { get; }
    private CalendarButton OwningCalendarButton { get; }
    private Nullable`1<DateTime> Date { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public CalendarButtonAutomationPeer(CalendarButton owner);
    private Calendar get_OwningCalendar();
    private IRawElementProviderSimple get_OwningCalendarAutomationPeer();
    private CalendarButton get_OwningCalendarButton();
    private Nullable`1<DateTime> get_Date();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetLocalizedControlTypeCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetNameCore();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
}
internal class Syncfusion.Windows.Automation.Peers.CalendarChildrenAutomationPeer : AutomationPeer {
    [CompilerGeneratedAttribute]
private Calendar <OwningCalendar>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private CalendarMode <DisplayMode>k__BackingField;
    internal Calendar OwningCalendar { get; internal set; }
    internal DateTime Date { get; private set; }
    internal CalendarMode DisplayMode { get; private set; }
    private bool IsCalendarDayButton { get; }
    private Button OwningButton { get; }
    private FrameworkElementAutomationPeer CalendarChildrenPeer { get; }
    internal CalendarChildrenAutomationPeer(DateTime date, Calendar owningCalendar, CalendarMode displayMode);
    [CompilerGeneratedAttribute]
internal Calendar get_OwningCalendar();
    [CompilerGeneratedAttribute]
internal void set_OwningCalendar(Calendar value);
    [CompilerGeneratedAttribute]
internal DateTime get_Date();
    [CompilerGeneratedAttribute]
private void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
internal CalendarMode get_DisplayMode();
    [CompilerGeneratedAttribute]
private void set_DisplayMode(CalendarMode value);
    private bool get_IsCalendarDayButton();
    private Button get_OwningButton();
    private FrameworkElementAutomationPeer get_CalendarChildrenPeer();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual string GetAcceleratorKeyCore();
    protected virtual string GetAccessKeyCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetAutomationIdCore();
    protected virtual Rect GetBoundingRectangleCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual Point GetClickablePointCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetItemStatusCore();
    protected virtual string GetItemTypeCore();
    protected virtual AutomationPeer GetLabeledByCore();
    protected virtual bool HasKeyboardFocusCore();
    protected virtual bool IsContentElementCore();
    protected virtual bool IsControlElementCore();
    protected virtual bool IsEnabledCore();
    protected virtual bool IsKeyboardFocusableCore();
    protected virtual bool IsOffscreenCore();
    protected virtual bool IsPasswordCore();
    protected virtual bool IsRequiredForFormCore();
    protected virtual void SetFocusCore();
    protected virtual AutomationOrientation GetOrientationCore();
    protected virtual string GetNameCore();
}
public class Syncfusion.Windows.Automation.Peers.CalendarDayButtonAutomationPeer : ButtonAutomationPeer {
    private Calendar OwningCalendar { get; }
    private IRawElementProviderSimple OwningCalendarAutomationPeer { get; }
    private CalendarDayButton OwningCalendarDayButton { get; }
    private Nullable`1<DateTime> Date { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    public CalendarDayButtonAutomationPeer(CalendarDayButton owner);
    private Calendar get_OwningCalendar();
    private IRawElementProviderSimple get_OwningCalendarAutomationPeer();
    private CalendarDayButton get_OwningCalendarDayButton();
    private Nullable`1<DateTime> get_Date();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetLocalizedControlTypeCore();
    protected virtual string GetNameCore();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems();
    private bool EnsureSelection();
}
public class Syncfusion.Windows.Controls.ButtonBaseBehavior : ControlBehavior {
    protected internal Type TargetType { get; }
    protected internal virtual Type get_TargetType();
    protected virtual void OnAttach(Control control);
    protected virtual void OnDetach(Control control);
    protected virtual void UpdateState(Control control, bool useTransitions);
}
[DesignTimeVisibleAttribute("False")]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Syncfusion.Windows.Controls.Calendar : Control {
    private static string ElementRoot;
    private static string ElementMonth;
    private static int COLS;
    private static int ROWS;
    private static int YEAR_ROWS;
    private static int YEAR_COLS;
    private static int YEARS_PER_DECADE;
    internal bool AllowClose;
    private Nullable`1<DateTime> _hoverStart;
    private Nullable`1<DateTime> _hoverEnd;
    private bool _isShiftPressed;
    private Nullable`1<DateTime> _currentDate;
    internal CalendarItem _monthControl;
    private CalendarBlackoutDatesCollection _blackoutDates;
    private SelectedDatesCollection _selectedDates;
    public static RoutedEvent SelectedDatesChangedEvent;
    private EventHandler`1<CalendarDateChangedEventArgs> DisplayDateChanged;
    private EventHandler`1<CalendarModeChangedEventArgs> DisplayModeChanged;
    private EventHandler`1<EventArgs> SelectionModeChanged;
    private PropertyChangedCallback DisableDateSelectionChanged;
    private PropertyChangedCallback NewDateChanged;
    private RoutedEventHandler MonthChanged;
    private RoutedEventHandler PreviousCalendarPageChanged;
    private RoutedEventHandler NextCalendarPageChanged;
    private DependencyPropertyChangedEventHandler SelectedDateChanged;
    public static DependencyProperty CalendarButtonStyleProperty;
    public static DependencyProperty CalendarDayButtonStyleProperty;
    public static DependencyProperty CalendarItemStyleProperty;
    public static DependencyProperty DisplayDateProperty;
    public static DependencyProperty DisplayDateEndProperty;
    public static DependencyProperty DisplayDateStartProperty;
    public static DependencyProperty DisplayModeProperty;
    public static DependencyProperty CultureProperty;
    private bool internalFormatSet;
    public static DependencyProperty FormatCalendarProperty;
    public static DependencyProperty AbbreviatedMonthNamesProperty;
    public static DependencyProperty ShortestDayNamesProperty;
    public static DependencyProperty FirstDayOfWeekProperty;
    public static DependencyProperty CanBlockWeekEndsProperty;
    internal static DependencyProperty NewDateProperty;
    public static DependencyProperty DisableDateSelectionProperty;
    public static DependencyProperty IsTodayHighlightedProperty;
    public static DependencyProperty SelectedDateProperty;
    public static DependencyProperty SelectionModeProperty;
    private MouseButtonEventHandler DayButtonMouseUp;
    private RoutedEventHandler DayOrMonthPreviewKeyDown;
    [CompilerGeneratedAttribute]
private bool <DatePickerDisplayDateFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DisplayDateInternal>k__BackingField;
    public CalendarBlackoutDatesCollection BlackoutDates { get; public set; }
    [ObsoleteAttribute("This property is Deprecated, please use the Implicity style.")]
public Style CalendarButtonStyle { get; public set; }
    [ObsoleteAttribute("This property is Deprecated, please use the Implicity style.")]
public Style CalendarDayButtonStyle { get; public set; }
    [ObsoleteAttribute("This property is Deprecated, please use the Implicity style.")]
public Style CalendarItemStyle { get; public set; }
    public DateTime DisplayDate { get; public set; }
    public Nullable`1<DateTime> DisplayDateEnd { get; public set; }
    public Nullable`1<DateTime> DisplayDateStart { get; public set; }
    public CalendarMode DisplayMode { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Calendar FormatCalendar { get; public set; }
    public String[] AbbreviatedMonthNames { get; public set; }
    public String[] ShortestDayNames { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public bool CanBlockWeekEnds { get; public set; }
    public bool DisableDateSelection { get; public set; }
    internal Nullable`1<DateTime> NewDate { get; internal set; }
    public bool IsTodayHighlighted { get; public set; }
    public Nullable`1<DateTime> SelectedDate { get; public set; }
    public SelectedDatesCollection SelectedDates { get; }
    public CalendarSelectionMode SelectionMode { get; public set; }
    internal bool DatePickerDisplayDateFlag { get; internal set; }
    internal DateTime DisplayDateInternal { get; private set; }
    internal DateTime DisplayDateEndInternal { get; }
    internal DateTime DisplayDateStartInternal { get; }
    internal DateTime CurrentDate { get; internal set; }
    internal Nullable`1<DateTime> HoverStart { get; internal set; }
    internal Nullable`1<DateTime> HoverEnd { get; internal set; }
    internal CalendarItem MonthControl { get; }
    internal DateTime DisplayMonth { get; }
    internal DateTime DisplayYear { get; }
    private bool IsRightToLeft { get; }
    private static Calendar();
    public void add_SelectedDatesChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public void remove_SelectedDatesChanged(EventHandler`1<SelectionChangedEventArgs> value);
    public void add_DisplayDateChanged(EventHandler`1<CalendarDateChangedEventArgs> value);
    public void remove_DisplayDateChanged(EventHandler`1<CalendarDateChangedEventArgs> value);
    public void add_DisplayModeChanged(EventHandler`1<CalendarModeChangedEventArgs> value);
    public void remove_DisplayModeChanged(EventHandler`1<CalendarModeChangedEventArgs> value);
    public void add_SelectionModeChanged(EventHandler`1<EventArgs> value);
    public void remove_SelectionModeChanged(EventHandler`1<EventArgs> value);
    public void add_DisableDateSelectionChanged(PropertyChangedCallback value);
    public void remove_DisableDateSelectionChanged(PropertyChangedCallback value);
    internal void add_NewDateChanged(PropertyChangedCallback value);
    internal void remove_NewDateChanged(PropertyChangedCallback value);
    public void add_MonthChanged(RoutedEventHandler value);
    public void remove_MonthChanged(RoutedEventHandler value);
    public void add_PreviousCalendarPageChanged(RoutedEventHandler value);
    public void remove_PreviousCalendarPageChanged(RoutedEventHandler value);
    public void add_NextCalendarPageChanged(RoutedEventHandler value);
    public void remove_NextCalendarPageChanged(RoutedEventHandler value);
    public void add_SelectedDateChanged(DependencyPropertyChangedEventHandler value);
    public void remove_SelectedDateChanged(DependencyPropertyChangedEventHandler value);
    private void Calendar_Loaded(object sender, RoutedEventArgs e);
    private void Calendar_Unloaded(object sender, RoutedEventArgs e);
    public CalendarBlackoutDatesCollection get_BlackoutDates();
    public void set_BlackoutDates(CalendarBlackoutDatesCollection value);
    public Style get_CalendarButtonStyle();
    public void set_CalendarButtonStyle(Style value);
    public Style get_CalendarDayButtonStyle();
    public void set_CalendarDayButtonStyle(Style value);
    public Style get_CalendarItemStyle();
    public void set_CalendarItemStyle(Style value);
    public DateTime get_DisplayDate();
    public void set_DisplayDate(DateTime value);
    private static void OnDisplayDateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceDisplayDate(DependencyObject d, object value);
    public Nullable`1<DateTime> get_DisplayDateEnd();
    public void set_DisplayDateEnd(Nullable`1<DateTime> value);
    private static void OnDisplayDateEndChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceDisplayDateEnd(DependencyObject d, object value);
    public Nullable`1<DateTime> get_DisplayDateStart();
    public void set_DisplayDateStart(Nullable`1<DateTime> value);
    private static void OnDisplayDateStartChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object CoerceDisplayDateStart(DependencyObject d, object value);
    public CalendarMode get_DisplayMode();
    public void set_DisplayMode(CalendarMode value);
    private static void OnDisplayModePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    private static void OnCultureChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Calendar get_FormatCalendar();
    public void set_FormatCalendar(Calendar value);
    private static void OnFormatCalenderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnFormatCalenderChanged(DependencyPropertyChangedEventArgs e);
    public String[] get_AbbreviatedMonthNames();
    public void set_AbbreviatedMonthNames(String[] value);
    private static void OnAbbrevaiatedMonthNamesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnAbbrevaiatedMonthNamesChanged(DependencyPropertyChangedEventArgs e);
    public String[] get_ShortestDayNames();
    public void set_ShortestDayNames(String[] value);
    private static void OnShortestDayNamesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnShortestDayNamesChanged(DependencyPropertyChangedEventArgs e);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    private static void OnFirstDayOfWeekChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_CanBlockWeekEnds();
    public void set_CanBlockWeekEnds(bool value);
    private static void OnCanBlockWeekEndsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_DisableDateSelection();
    public void set_DisableDateSelection(bool value);
    internal Nullable`1<DateTime> get_NewDate();
    internal void set_NewDate(Nullable`1<DateTime> value);
    public static void OnNewDateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNewDateChanged(DependencyPropertyChangedEventArgs args);
    private void FireMonthChanged();
    public static void OnDisableDateSelectionChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDisableDateSelectionChanged(DependencyPropertyChangedEventArgs args);
    public bool get_IsTodayHighlighted();
    public void set_IsTodayHighlighted(bool value);
    private static void OnIsTodayHighlightedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnLanguageChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Nullable`1<DateTime> get_SelectedDate();
    public void set_SelectedDate(Nullable`1<DateTime> value);
    private static void OnSelectedDateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected void OnSelectedDateChanged(DependencyPropertyChangedEventArgs e);
    public SelectedDatesCollection get_SelectedDates();
    public CalendarSelectionMode get_SelectionMode();
    public void set_SelectionMode(CalendarSelectionMode value);
    private static void OnSelectionModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void add_DayButtonMouseUp(MouseButtonEventHandler value);
    internal void remove_DayButtonMouseUp(MouseButtonEventHandler value);
    internal void add_DayOrMonthPreviewKeyDown(RoutedEventHandler value);
    internal void remove_DayOrMonthPreviewKeyDown(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
internal bool get_DatePickerDisplayDateFlag();
    [CompilerGeneratedAttribute]
internal void set_DatePickerDisplayDateFlag(bool value);
    [CompilerGeneratedAttribute]
internal DateTime get_DisplayDateInternal();
    [CompilerGeneratedAttribute]
private void set_DisplayDateInternal(DateTime value);
    internal DateTime get_DisplayDateEndInternal();
    internal DateTime get_DisplayDateStartInternal();
    internal DateTime get_CurrentDate();
    internal void set_CurrentDate(DateTime value);
    internal Nullable`1<DateTime> get_HoverStart();
    internal void set_HoverStart(Nullable`1<DateTime> value);
    internal Nullable`1<DateTime> get_HoverEnd();
    internal void set_HoverEnd(Nullable`1<DateTime> value);
    internal CalendarItem get_MonthControl();
    internal DateTime get_DisplayMonth();
    internal DateTime get_DisplayYear();
    private bool get_IsRightToLeft();
    public virtual void OnApplyTemplate();
    public virtual string ToString();
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnSelectedDatesChanged(SelectionChangedEventArgs e);
    protected virtual void OnDisplayDateChanged(CalendarDateChangedEventArgs e);
    protected virtual void OnDisplayModeChanged(CalendarModeChangedEventArgs e);
    protected virtual void OnSelectionModeChanged(EventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    internal CalendarDayButton FindDayButtonFromDay(DateTime day);
    internal static bool IsValidDateSelection(Calendar cal, object value);
    internal void OnDayButtonMouseUp(MouseButtonEventArgs e);
    internal void OnDayOrMonthPreviewKeyDown(RoutedEventArgs e);
    internal void OnDayClick(DateTime selectedDate);
    internal void OnMonthCalendarButtonPressed(CalendarButton b, bool switchDisplayMode);
    internal void OnCalendarButtonPressed(CalendarButton b, bool switchDisplayMode);
    private Nullable`1<DateTime> GetDateOffset(DateTime date, int offset, CalendarMode displayMode);
    private void MoveDisplayTo(Nullable`1<DateTime> date);
    internal void FireOnNextClick();
    internal void FireOnPreviousClick();
    internal void OnNextClick();
    public void ShowNextCalendarPage();
    public void ShowPreviousCalendarPage();
    internal void OnPreviousClick();
    internal void OnSelectedDatesCollectionChanged(SelectionChangedEventArgs e);
    internal void UpdateCellItems();
    private void CoerceFromSelection();
    private void AddKeyboardSelection();
    private static bool IsSelectionChanged(SelectionChangedEventArgs e);
    private static bool IsValidDisplayMode(object value);
    internal static bool IsValidFirstDayOfWeek(object value);
    private static bool IsValidKeyboardSelection(Calendar cal, object value);
    private static bool IsValidSelectionMode(object value);
    private void OnSelectedMonthChanged(Nullable`1<DateTime> selectedMonth);
    private void OnSelectedYearChanged(Nullable`1<DateTime> selectedYear);
    internal void FocusDate(DateTime date);
    private static void OnGotFocus(object sender, RoutedEventArgs e);
    private bool ProcessCalendarKey(KeyEventArgs e);
    private void ProcessDownKey(bool ctrl, bool shift);
    private void ProcessEndKey(bool shift);
    private bool ProcessEnterKey();
    private void ProcessHomeKey(bool shift);
    private void ProcessLeftKey(bool shift);
    private void ProcessPageDownKey(bool shift);
    private void ProcessPageUpKey(bool shift);
    private void ProcessRightKey(bool shift);
    private void ProcessSelection(bool shift, Nullable`1<DateTime> lastSelectedDate);
    private void ProcessShiftKeyUp();
    private void ProcessUpKey(bool ctrl, bool shift);
    private void ClosePopup(Nullable`1<DateTime> newDate);
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Syncfusion.Windows.Controls.CalendarBlackoutDatesCollection : ObservableCollection`1<CalendarDateRange> {
    private Thread _dispatcherThread;
    private Calendar _owner;
    public CalendarBlackoutDatesCollection(Calendar owner);
    public void AddDatesInPast();
    public bool Contains(DateTime date);
    public bool Contains(DateTime start, DateTime end);
    public bool ContainsAny(CalendarDateRange range);
    internal Nullable`1<DateTime> GetNonBlackoutDate(Nullable`1<DateTime> requestedDate, int dayInterval);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, CalendarDateRange item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, CalendarDateRange item);
    private void RegisterItem(CalendarDateRange item);
    private void UnRegisterItem(CalendarDateRange item);
    private void Item_Changing(object sender, CalendarDateRangeChangingEventArgs e);
    private void Item_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private bool IsValid(CalendarDateRange item);
    private bool IsValid(DateTime start, DateTime end);
    private bool IsValidThread();
    private CalendarDateRange GetContainingDateRange(DateTime date);
}
public class Syncfusion.Windows.Controls.CalendarDateChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AddedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RemovedDate>k__BackingField;
    public Nullable`1<DateTime> AddedDate { get; private set; }
    public Nullable`1<DateTime> RemovedDate { get; private set; }
    internal CalendarDateChangedEventArgs(Nullable`1<DateTime> removedDate, Nullable`1<DateTime> addedDate);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AddedDate();
    [CompilerGeneratedAttribute]
private void set_AddedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_RemovedDate();
    [CompilerGeneratedAttribute]
private void set_RemovedDate(Nullable`1<DateTime> value);
}
public class Syncfusion.Windows.Controls.CalendarDateRange : object {
    private DateTime _end;
    private DateTime _start;
    private PropertyChangedEventHandler PropertyChanged;
    private EventHandler`1<CalendarDateRangeChangingEventArgs> Changing;
    public DateTime End { get; public set; }
    public DateTime Start { get; public set; }
    public CalendarDateRange(DateTime day);
    public CalendarDateRange(DateTime start, DateTime end);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public DateTime get_End();
    public void set_End(DateTime value);
    public DateTime get_Start();
    public void set_Start(DateTime value);
    internal void add_Changing(EventHandler`1<CalendarDateRangeChangingEventArgs> value);
    internal void remove_Changing(EventHandler`1<CalendarDateRangeChangingEventArgs> value);
    internal bool ContainsAny(CalendarDateRange range);
    private void OnChanging(CalendarDateRangeChangingEventArgs e);
    private void OnPropertyChanged(PropertyChangedEventArgs e);
    private static DateTime CoerceEnd(DateTime start, DateTime end);
}
internal class Syncfusion.Windows.Controls.CalendarDateRangeChangingEventArgs : EventArgs {
    private DateTime _start;
    private DateTime _end;
    public DateTime Start { get; }
    public DateTime End { get; }
    public CalendarDateRangeChangingEventArgs(DateTime start, DateTime end);
    public DateTime get_Start();
    public DateTime get_End();
}
public enum Syncfusion.Windows.Controls.CalendarMode : Enum {
    public int value__;
    public static CalendarMode Month;
    public static CalendarMode Year;
    public static CalendarMode Decade;
}
public class Syncfusion.Windows.Controls.CalendarModeChangedEventArgs : RoutedEventArgs {
    [CompilerGeneratedAttribute]
private CalendarMode <NewMode>k__BackingField;
    [CompilerGeneratedAttribute]
private CalendarMode <OldMode>k__BackingField;
    public CalendarMode NewMode { get; private set; }
    public CalendarMode OldMode { get; private set; }
    public CalendarModeChangedEventArgs(CalendarMode oldMode, CalendarMode newMode);
    [CompilerGeneratedAttribute]
public CalendarMode get_NewMode();
    [CompilerGeneratedAttribute]
private void set_NewMode(CalendarMode value);
    [CompilerGeneratedAttribute]
public CalendarMode get_OldMode();
    [CompilerGeneratedAttribute]
private void set_OldMode(CalendarMode value);
}
internal class Syncfusion.Windows.Controls.CalendarSelectionChangedEventArgs : SelectionChangedEventArgs {
    public CalendarSelectionChangedEventArgs(RoutedEvent eventId, IList removedItems, IList addedItems);
    protected virtual void InvokeEventHandler(Delegate genericHandler, object genericTarget);
}
public enum Syncfusion.Windows.Controls.CalendarSelectionMode : Enum {
    public int value__;
    public static CalendarSelectionMode SingleDate;
    public static CalendarSelectionMode SingleRange;
    public static CalendarSelectionMode MultipleRange;
    public static CalendarSelectionMode None;
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.Windows.Controls.ChildCollection : object {
    private Collection`1<object> children;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual int IndexOf(object item);
    public sealed virtual void Insert(int index, object item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(object item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object item);
    public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    public sealed virtual bool Remove(object item);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Syncfusion.Windows.Controls.ContentTransition : DependencyObject {
}
public class Syncfusion.Windows.Controls.ControlBehavior : VisualStateBehavior {
    protected internal Type TargetType { get; }
    protected internal virtual Type get_TargetType();
    protected virtual void OnAttach(Control control);
    protected virtual void OnDetach(Control control);
    protected virtual void UpdateStateHandler(object o, EventArgs e);
    protected virtual void UpdateState(Control control, bool useTransitions);
}
[ExtensionAttribute]
internal static class Syncfusion.Windows.Controls.DateTimeHelper : object {
    public static Nullable`1<DateTime> AddDays(DateTime time, int days, Calendar cal);
    public static Nullable`1<DateTime> AddMonths(DateTime time, int months, Calendar cal);
    public static Nullable`1<DateTime> AddYears(DateTime time, int years, Calendar cal);
    public static Nullable`1<DateTime> SetYear(DateTime date, int year, Calendar calendar);
    public static Nullable`1<DateTime> SetDay(DateTime date, int day, Calendar calendar);
    public static Nullable`1<DateTime> SetYearMonth(DateTime date, DateTime yearMonth, Calendar calendar);
    public static int CompareDays(DateTime dt1, DateTime dt2, Calendar calendar);
    internal static int CompareYearMonth(DateTime selectedDate, DateTime dateTime, Calendar calendar);
    public static int DecadeOfDate(DateTime date, Calendar calendar);
    public static DateTime DiscardDayTime(DateTime d, Calendar calendar);
    public static DateTime GetValidDateTime(DateTime d, Calendar calendar);
    public static Nullable`1<DateTime> DiscardTime(Nullable`1<DateTime> d, Calendar calendar);
    public static int EndOfDecade(DateTime date, Calendar calendar);
    public static DateTimeFormatInfo GetCurrentDateFormat(object culture);
    internal static CultureInfo GetCulture(FrameworkElement element);
    internal static CultureInfo GetCultureInfo(DependencyObject element);
    internal static DateTimeFormatInfo GetDateFormat(CultureInfo culture);
    public static bool InRange(DateTime date, CalendarDateRange range, Calendar calendar);
    public static bool InRange(DateTime date, DateTime start, DateTime end, Calendar calendar);
    public static string ToDayString(Nullable`1<DateTime> date, CultureInfo culture, Calendar calendar);
    public static string ToDecadeRangeString(int decade, CultureInfo culture);
    public static string ToYearMonthPatternString(Nullable`1<DateTime> date, CultureInfo culture, String[] abbreviatedMonthNames, Calendar calendar);
    public static string ToYearString(Nullable`1<DateTime> date, CultureInfo culture, Calendar calendar);
    public static string ToAbbreviatedMonthString(Nullable`1<DateTime> date, CultureInfo culture, String[] abbreviatedMonthNames, Calendar calendar);
    public static string ToLongDateString(Nullable`1<DateTime> date, CultureInfo culture);
    [ExtensionAttribute]
public static DateTime GetCulturedDateTime(DateTime d, Calendar calendar);
}
public class Syncfusion.Windows.Controls.FadeTransition : ContentTransition {
    public static DependencyProperty DurationProperty;
    public static DependencyProperty EasingProperty;
    public TimeSpan Duration { get; public set; }
    public EasingFunctionBase Easing { get; public set; }
    private static FadeTransition();
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public EasingFunctionBase get_Easing();
    public void set_Easing(EasingFunctionBase value);
    internal Timeline BuildAnimation(double from, double to, TimeSpan duration, EasingFunctionBase easingfunction);
}
internal static class Syncfusion.Windows.Controls.KeyboardHelper : object {
    public static void GetMetaKeyState(Boolean& ctrl, Boolean& shift);
}
public class Syncfusion.Windows.Controls.ListBoxItemBehavior : ControlBehavior {
    protected internal Type TargetType { get; }
    protected internal virtual Type get_TargetType();
    protected virtual void OnAttach(Control control);
    protected virtual void OnDetach(Control control);
    protected virtual void UpdateState(Control control, bool useTransitions);
}
internal class Syncfusion.Windows.Controls.NamespaceDoc : object {
}
public enum Syncfusion.Windows.Controls.Position : Enum {
    public int value__;
    public static Position Bottom;
    public static Position Center;
    public static Position Top;
    public static Position Left;
    public static Position Right;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Controls.Primitives.CalendarButton : Button {
    private bool _shouldCoerceContent;
    private object _coercedContent;
    internal static DependencyPropertyKey HasSelectedDaysPropertyKey;
    public static DependencyProperty HasSelectedDaysProperty;
    internal static DependencyPropertyKey IsInactivePropertyKey;
    public static DependencyProperty IsInactiveProperty;
    [CompilerGeneratedAttribute]
private Calendar <Owner>k__BackingField;
    public bool HasSelectedDays { get; internal set; }
    public bool IsInactive { get; internal set; }
    internal Calendar Owner { get; internal set; }
    private static CalendarButton();
    public bool get_HasSelectedDays();
    internal void set_HasSelectedDays(bool value);
    public bool get_IsInactive();
    internal void set_IsInactive(bool value);
    [CompilerGeneratedAttribute]
internal Calendar get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(Calendar value);
    public virtual void OnApplyTemplate();
    public sealed virtual void Dispose();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    internal void SetContentInternal(string value);
    private void ChangeVisualState(bool useTransitions);
    private static void OnVisualStatePropertyChanged(DependencyObject dObject, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceContent(DependencyObject sender, object baseValue);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object param0, RoutedEventArgs param1);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Controls.Primitives.CalendarDayButton : Button {
    private static int DEFAULTCONTENT;
    internal static string StateToday;
    internal static string StateRegularDay;
    internal static string GroupDay;
    internal static string StateBlackoutDay;
    internal static string StateNormalDay;
    internal static string GroupBlackout;
    private bool _shouldCoerceContent;
    private object _coercedContent;
    internal static DependencyPropertyKey IsTodayPropertyKey;
    public static DependencyProperty IsTodayProperty;
    internal static DependencyPropertyKey IsSelectedPropertyKey;
    public static DependencyProperty IsSelectedProperty;
    internal static DependencyPropertyKey IsInactivePropertyKey;
    public static DependencyProperty IsInactiveProperty;
    internal static DependencyPropertyKey IsBlackedOutPropertyKey;
    public static DependencyProperty IsBlackedOutProperty;
    internal static DependencyPropertyKey IsHighlightedPropertyKey;
    public static DependencyProperty IsHighlightedProperty;
    [CompilerGeneratedAttribute]
private Calendar <Owner>k__BackingField;
    public bool IsToday { get; }
    public bool IsSelected { get; }
    public bool IsInactive { get; }
    public bool IsBlackedOut { get; }
    public bool IsHighlighted { get; }
    internal Calendar Owner { get; internal set; }
    private static CalendarDayButton();
    public bool get_IsToday();
    public bool get_IsSelected();
    public bool get_IsInactive();
    public bool get_IsBlackedOut();
    public bool get_IsHighlighted();
    [CompilerGeneratedAttribute]
internal Calendar get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(Calendar value);
    public virtual void OnApplyTemplate();
    public sealed virtual void Dispose();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    internal void ChangeVisualState(bool useTransitions);
    internal void SetContentInternal(string value);
    private static void OnVisualStatePropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceContent(DependencyObject sender, object baseValue);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object param0, RoutedEventArgs param1);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Controls.Primitives.CalendarItem : Control {
    private static string ElementRoot;
    private static string ElementHeaderButton;
    private static string ElementPreviousButton;
    private static string ElementNextButton;
    private static string ElementDayTitleTemplate;
    private static string ElementMonthView;
    private static string ElementYearView;
    private static string ElementDisabledVisual;
    private static int COLS;
    private static int ROWS;
    private static int YEAR_COLS;
    private static int YEAR_ROWS;
    private static int NUMBER_OF_DAYS_IN_WEEK;
    private DataTemplate _dayTitleTemplate;
    private FrameworkElement _disabledVisual;
    private Button _headerButton;
    internal Grid _monthView;
    private Button _nextButton;
    private Button _previousButton;
    internal Grid _yearView;
    private bool _isMonthPressed;
    private bool _isDayPressed;
    [CompilerGeneratedAttribute]
private Calendar <Owner>k__BackingField;
    internal Grid MonthView { get; }
    internal Calendar Owner { get; internal set; }
    internal Grid YearView { get; }
    private CalendarMode DisplayMode { get; }
    internal Button HeaderButton { get; }
    internal Button NextButton { get; }
    internal Button PreviousButton { get; }
    private DateTime DisplayDate { get; }
    private CultureInfo Culture { get; }
    private Calendar FormatCalendar { get; }
    private static CalendarItem();
    internal Grid get_MonthView();
    [CompilerGeneratedAttribute]
internal Calendar get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(Calendar value);
    internal Grid get_YearView();
    private CalendarMode get_DisplayMode();
    internal Button get_HeaderButton();
    internal Button get_NextButton();
    internal Button get_PreviousButton();
    private DateTime get_DisplayDate();
    private CultureInfo get_Culture();
    private Calendar get_FormatCalendar();
    public virtual void OnApplyTemplate();
    public sealed virtual void Dispose();
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    internal void UpdateDecadeMode();
    internal void UpdateMonthMode();
    internal void UpdateYearMode();
    internal IEnumerable`1<CalendarDayButton> GetCalendarDayButtons();
    internal CalendarDayButton GetFocusedCalendarDayButton();
    internal CalendarDayButton GetCalendarDayButton(DateTime date);
    internal CalendarButton GetCalendarButton(DateTime date, CalendarMode mode);
    internal CalendarButton GetFocusedCalendarButton();
    internal IEnumerable`1<CalendarButton> GetCalendarButtons();
    internal void FocusDate(DateTime date);
    private int GetDecadeForDecadeMode(DateTime selectedYear);
    private void EndDrag(bool ctrl, DateTime selectedDate);
    private Calendar GetCalendar(CultureInfo culture);
    private void CellOrMonth_PreviewKeyDown(object sender, RoutedEventArgs e);
    private void Cell_Clicked(object sender, RoutedEventArgs e);
    private void Cell_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void Cell_MouseEnter(object sender, MouseEventArgs e);
    private void Cell_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void FinishSelection(DateTime selectedDate);
    private void Month_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void Month_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void Month_MouseEnter(object sender, MouseEventArgs e);
    private void Month_Clicked(object sender, RoutedEventArgs e);
    private void HeaderButton_Click(object sender, RoutedEventArgs e);
    private void PreviousButton_Click(object sender, RoutedEventArgs e);
    private void NextButton_Click(object sender, RoutedEventArgs e);
    private void PopulateGrids();
    private void SetMonthModeDayTitles();
    private void SetMonthModeCalendarDayButtons();
    private void SetMonthModeDayButtonState(CalendarDayButton childButton, Nullable`1<DateTime> dateToAdd);
    private void AddMonthModeHighlight();
    private void SetMonthModeHeaderButton();
    private void SetMonthModeNextButton();
    private void SetMonthModePreviousButton();
    private void SetYearButtons(int decade, int decadeEnd);
    private void SetYearModeMonthButtons();
    private void SetYearModeHeaderButton();
    private void SetYearModeNextButton();
    private void SetYearModePreviousButton();
    private void SetDecadeModeHeaderButton(int decade);
    private void SetDecadeModeNextButton(int decadeEnd);
    private void SetDecadeModePreviousButton(int decade);
    private int GetNumberOfDisplayedDaysFromPreviousMonth(DateTime firstOfMonth);
    private BindingBase GetOwnerBinding(string propertyName);
}
public class Syncfusion.Windows.Controls.ProgressBarBehavior : ControlBehavior {
    protected internal Type TargetType { get; }
    protected internal virtual Type get_TargetType();
    protected virtual void OnAttach(Control control);
    protected virtual void OnDetach(Control control);
    protected virtual void UpdateState(Control control, bool useTransitions);
}
[EditorBrowsableAttribute("1")]
public class Syncfusion.Windows.Controls.RotateTransition : ContentTransition {
    public static DependencyProperty EasingProperty;
    public static DependencyProperty DurationProperty;
    public TimeSpan Duration { get; public set; }
    public EasingFunctionBase Easing { get; public set; }
    private static RotateTransition();
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public EasingFunctionBase get_Easing();
    public void set_Easing(EasingFunctionBase value);
    internal DoubleAnimationUsingKeyFrames BuildTimeLine(double from, double to);
    internal ObjectAnimationUsingKeyFrames BuildObjectTimeline(object visibility);
}
public class Syncfusion.Windows.Controls.SelectedDatesCollection : ObservableCollection`1<DateTime> {
    private Collection`1<DateTime> _addedItems;
    private Collection`1<DateTime> _removedItems;
    private Thread _dispatcherThread;
    private bool _isAddingRange;
    private Calendar _owner;
    private Nullable`1<DateTime> _maximumDate;
    private Nullable`1<DateTime> _minimumDate;
    internal Nullable`1<DateTime> MinimumDate { get; }
    internal Nullable`1<DateTime> MaximumDate { get; }
    public SelectedDatesCollection(Calendar owner);
    internal Nullable`1<DateTime> get_MinimumDate();
    internal Nullable`1<DateTime> get_MaximumDate();
    public void AddRange(DateTime start, DateTime end);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, DateTime item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, DateTime item);
    internal void AddRangeInternal(DateTime start, DateTime end);
    internal void ClearInternal();
    internal void ClearInternal(bool fireChangeNotification);
    internal void Toggle(DateTime date);
    private void RaiseSelectionChanged(IList removedItems, IList addedItems);
    private void BeginAddRange();
    private void EndAddRange();
    private bool CheckSelectionMode();
    private bool IsValidThread();
    private void UpdateMinMax(DateTime date);
    private void ClearMinMax();
    private static IEnumerable`1<DateTime> GetDaysInRange(DateTime start, DateTime end, Calendar calendar);
    private static int GetDirection(DateTime start, DateTime end);
}
[ContentPropertyAttribute("Host")]
public class Syncfusion.Windows.Controls.SfNavigator : Control {
    public static DependencyProperty ActiveItemProperty;
    public static DependencyProperty ActiveIndexProperty;
    public static DependencyProperty HostProperty;
    private Direction direction;
    private ContentControl part_Content;
    private ContentControl part_SupportingContent;
    private ContentControl activeContent;
    private ContentControl supportingContent;
    private RoutedEventHandler Navigated;
    [CompilerGeneratedAttribute]
private ChildCollection <Items>k__BackingField;
    public object ActiveItem { get; public set; }
    public int ActiveIndex { get; public set; }
    public ChildCollection Items { get; private set; }
    public object Host { get; public set; }
    private static SfNavigator();
    public void add_Navigated(RoutedEventHandler value);
    public void remove_Navigated(RoutedEventHandler value);
    public object get_ActiveItem();
    public void set_ActiveItem(object value);
    public int get_ActiveIndex();
    public void set_ActiveIndex(int value);
    [CompilerGeneratedAttribute]
public ChildCollection get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(ChildCollection value);
    public object get_Host();
    public void set_Host(object value);
    public void Navigate(object child);
    public void UpdateTransform();
    public virtual void OnApplyTemplate();
    protected virtual void OnActiveItemChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void OnActiveIndexChanged(DependencyPropertyChangedEventArgs args);
    private void ValidateActiveIndex(int index);
    private void ValidateActiveIndex(int index, int oldindex);
    private static void OnActiveIndexChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void OnActiveItemChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void OnHostChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void SfNavigator_SizeChanged(object sender, SizeChangedEventArgs e);
    private void SfNavigator_LayoutUpdated(object sender, object e);
    private void NavigatorLoaded(object sender, RoutedEventArgs e);
    private void SwapActiveContent();
    private Timeline CreateAnimation(double fromvalue, double toValue);
    private Storyboard CreateStoryBoard(DependencyObject target, string property, double from, double to);
    [CompilerGeneratedAttribute]
private void <Navigate>b__1(object sender, EventArgs e);
}
public class Syncfusion.Windows.Controls.SlideTransition : ContentTransition {
    public Position Position;
    public static DependencyProperty EasingProperty;
    public static DependencyProperty DirectionProperty;
    public static DependencyProperty DurationProperty;
    public TimeSpan Duration { get; public set; }
    public EasingFunctionBase Easing { get; public set; }
    public SlideDirection Direction { get; public set; }
    private static SlideTransition();
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public EasingFunctionBase get_Easing();
    public void set_Easing(EasingFunctionBase value);
    public SlideDirection get_Direction();
    public void set_Direction(SlideDirection value);
    public Timeline CreateExitAnimation(double toValue);
    public Timeline CreateEnterAnimation(double fromValue);
    private static void OnDirectionChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
}
internal static class Syncfusion.Windows.Controls.SR : object {
    private static ResourceManager _resourceManager;
    private static SR();
    internal static string Get(SRID id);
    internal static string Get(SRID id, Object[] args);
}
internal class Syncfusion.Windows.Controls.SRID : ValueType {
    private string _string;
    public string String { get; }
    public static SRID DataGrid_SelectAllCommandText { get; }
    public static SRID DataGrid_SelectAllKey { get; }
    public static SRID DataGrid_SelectAllKeyDisplayString { get; }
    public static SRID DataGrid_BeginEditCommandText { get; }
    public static SRID DataGrid_CommitEditCommandText { get; }
    public static SRID DataGrid_CancelEditCommandText { get; }
    public static SRID DataGrid_DeleteCommandText { get; }
    public static SRID DataGridCellItemAutomationPeer_NameCoreFormat { get; }
    public static SRID CalendarAutomationPeer_CalendarButtonLocalizedControlType { get; }
    internal static SRID DateTimeEditAutomationPeer_DateTimeEditLocalizedControlType { get; }
    public static SRID CalendarAutomationPeer_DayButtonLocalizedControlType { get; }
    public static SRID CalendarAutomationPeer_BlackoutDayHelpText { get; }
    public static SRID Calendar_NextButtonName { get; }
    public static SRID Calendar_PreviousButtonName { get; }
    public static SRID DatePickerAutomationPeer_LocalizedControlType { get; }
    public static SRID DatePickerTextBox_DefaultWatermarkText { get; }
    public static SRID DatePicker_DropDownButtonName { get; }
    public static SRID DataGrid_ColumnIndexOutOfRange { get; }
    public static SRID DataGrid_ColumnDisplayIndexOutOfRange { get; }
    public static SRID DataGrid_DisplayIndexOutOfRange { get; }
    public static SRID DataGrid_InvalidColumnReuse { get; }
    public static SRID DataGrid_DuplicateDisplayIndex { get; }
    public static SRID DataGrid_NewColumnInvalidDisplayIndex { get; }
    public static SRID DataGrid_NullColumn { get; }
    public static SRID DataGrid_ReadonlyCellsItemsSource { get; }
    public static SRID DataGrid_InvalidSortDescription { get; }
    public static SRID DataGrid_ProbableInvalidSortDescription { get; }
    public static SRID DataGridLength_InvalidType { get; }
    public static SRID DataGridLength_Infinity { get; }
    public static SRID DataGrid_CannotSelectCell { get; }
    public static SRID DataGridRow_CannotSelectRowWhenCells { get; }
    public static SRID DataGrid_AutomationInvokeFailed { get; }
    public static SRID SelectedCellsCollection_InvalidItem { get; }
    public static SRID SelectedCellsCollection_DuplicateItem { get; }
    public static SRID VirtualizedCellInfoCollection_IsReadOnly { get; }
    public static SRID VirtualizedCellInfoCollection_DoesNotSupportIndexChanges { get; }
    public static SRID ClipboardCopyMode_Disabled { get; }
    public static SRID Calendar_OnDisplayModePropertyChanged_InvalidValue { get; }
    public static SRID Calendar_OnFirstDayOfWeekChanged_InvalidValue { get; }
    public static SRID Calendar_OnSelectedDateChanged_InvalidValue { get; }
    public static SRID Calendar_OnSelectedDateChanged_InvalidOperation { get; }
    public static SRID CalendarCollection_MultiThreadedCollectionChangeNotSupported { get; }
    public static SRID Calendar_CheckSelectionMode_InvalidOperation { get; }
    public static SRID Calendar_OnSelectionModeChanged_InvalidValue { get; }
    public static SRID Calendar_UnSelectableDates { get; }
    public static SRID DatePickerTextBox_TemplatePartIsOfIncorrectType { get; }
    public static SRID DatePicker_OnSelectedDateFormatChanged_InvalidValue { get; }
    public static SRID DatePicker_WatermarkText { get; }
    public static SRID CalendarAutomationPeer_MonthMode { get; }
    public static SRID CalendarAutomationPeer_YearMode { get; }
    public static SRID CalendarAutomationPeer_DecadeMode { get; }
    internal static SRID CalendarEditAutomationPeer_DaysMode { get; }
    internal static SRID CalendarEditAutomationPeer_MonthMode { get; }
    internal static SRID CalendarEditAutomationPeer_YearMode { get; }
    internal static SRID CalendarEditAutomationPeer_YearRangeMode { get; }
    internal static SRID CalendarEditAutomationPeer_WeekNumbersMode { get; }
    private SRID(string s);
    public string get_String();
    public static SRID get_DataGrid_SelectAllCommandText();
    public static SRID get_DataGrid_SelectAllKey();
    public static SRID get_DataGrid_SelectAllKeyDisplayString();
    public static SRID get_DataGrid_BeginEditCommandText();
    public static SRID get_DataGrid_CommitEditCommandText();
    public static SRID get_DataGrid_CancelEditCommandText();
    public static SRID get_DataGrid_DeleteCommandText();
    public static SRID get_DataGridCellItemAutomationPeer_NameCoreFormat();
    public static SRID get_CalendarAutomationPeer_CalendarButtonLocalizedControlType();
    internal static SRID get_DateTimeEditAutomationPeer_DateTimeEditLocalizedControlType();
    public static SRID get_CalendarAutomationPeer_DayButtonLocalizedControlType();
    public static SRID get_CalendarAutomationPeer_BlackoutDayHelpText();
    public static SRID get_Calendar_NextButtonName();
    public static SRID get_Calendar_PreviousButtonName();
    public static SRID get_DatePickerAutomationPeer_LocalizedControlType();
    public static SRID get_DatePickerTextBox_DefaultWatermarkText();
    public static SRID get_DatePicker_DropDownButtonName();
    public static SRID get_DataGrid_ColumnIndexOutOfRange();
    public static SRID get_DataGrid_ColumnDisplayIndexOutOfRange();
    public static SRID get_DataGrid_DisplayIndexOutOfRange();
    public static SRID get_DataGrid_InvalidColumnReuse();
    public static SRID get_DataGrid_DuplicateDisplayIndex();
    public static SRID get_DataGrid_NewColumnInvalidDisplayIndex();
    public static SRID get_DataGrid_NullColumn();
    public static SRID get_DataGrid_ReadonlyCellsItemsSource();
    public static SRID get_DataGrid_InvalidSortDescription();
    public static SRID get_DataGrid_ProbableInvalidSortDescription();
    public static SRID get_DataGridLength_InvalidType();
    public static SRID get_DataGridLength_Infinity();
    public static SRID get_DataGrid_CannotSelectCell();
    public static SRID get_DataGridRow_CannotSelectRowWhenCells();
    public static SRID get_DataGrid_AutomationInvokeFailed();
    public static SRID get_SelectedCellsCollection_InvalidItem();
    public static SRID get_SelectedCellsCollection_DuplicateItem();
    public static SRID get_VirtualizedCellInfoCollection_IsReadOnly();
    public static SRID get_VirtualizedCellInfoCollection_DoesNotSupportIndexChanges();
    public static SRID get_ClipboardCopyMode_Disabled();
    public static SRID get_Calendar_OnDisplayModePropertyChanged_InvalidValue();
    public static SRID get_Calendar_OnFirstDayOfWeekChanged_InvalidValue();
    public static SRID get_Calendar_OnSelectedDateChanged_InvalidValue();
    public static SRID get_Calendar_OnSelectedDateChanged_InvalidOperation();
    public static SRID get_CalendarCollection_MultiThreadedCollectionChangeNotSupported();
    public static SRID get_Calendar_CheckSelectionMode_InvalidOperation();
    public static SRID get_Calendar_OnSelectionModeChanged_InvalidValue();
    public static SRID get_Calendar_UnSelectableDates();
    public static SRID get_DatePickerTextBox_TemplatePartIsOfIncorrectType();
    public static SRID get_DatePicker_OnSelectedDateFormatChanged_InvalidValue();
    public static SRID get_DatePicker_WatermarkText();
    public static SRID get_CalendarAutomationPeer_MonthMode();
    public static SRID get_CalendarAutomationPeer_YearMode();
    public static SRID get_CalendarAutomationPeer_DecadeMode();
    internal static SRID get_CalendarEditAutomationPeer_DaysMode();
    internal static SRID get_CalendarEditAutomationPeer_MonthMode();
    internal static SRID get_CalendarEditAutomationPeer_YearMode();
    internal static SRID get_CalendarEditAutomationPeer_YearRangeMode();
    internal static SRID get_CalendarEditAutomationPeer_WeekNumbersMode();
}
public class Syncfusion.Windows.Controls.TextBoxBaseBehavior : ControlBehavior {
    protected internal Type TargetType { get; }
    protected internal virtual Type get_TargetType();
    protected virtual void OnAttach(Control control);
    protected virtual void OnDetach(Control control);
    protected virtual void UpdateState(Control control, bool useTransitions);
}
public class Syncfusion.Windows.Controls.ToggleButtonBehavior : ButtonBaseBehavior {
    protected internal Type TargetType { get; }
    protected internal virtual Type get_TargetType();
    protected virtual void OnAttach(Control control);
    protected virtual void OnDetach(Control control);
    protected virtual void UpdateState(Control control, bool useTransitions);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.ButtonAdvAutomationPeer : FrameworkElementAutomationPeer {
    private ButtonAdv MyOwner { get; }
    public ButtonAdvAutomationPeer(ButtonAdv control);
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    private ButtonAdv get_MyOwner();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.CalendarEditAutomationPeer : FrameworkElementAutomationPeer {
    private CalendarEdit OwningCalendar { get; }
    private CalendarEditGrid OwningGrid { get; }
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private int System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor { get; }
    public CalendarEditAutomationPeer(CalendarEdit owner);
    private CalendarEdit get_OwningCalendar();
    private CalendarEditGrid get_OwningGrid();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override int System.Windows.Automation.Provider.IMultipleViewProvider.get_CurrentView();
    private sealed virtual override Int32[] System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews();
    private sealed virtual override string System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(int viewId);
    private sealed virtual override void System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(int viewId);
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.get_RowOrColumnMajor();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetRowHeaders();
}
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.CalendarEditCellAutomationPeer : FrameworkElementAutomationPeer {
    internal CalendarEdit Calendar;
    private Cell MyOwner { get; }
    public CalendarEditCellAutomationPeer(Cell owner);
    private Cell get_MyOwner();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
}
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.CalendarEditDayNamesAutomationPeer : FrameworkElementAutomationPeer {
    private DayNameCell MyOwner { get; }
    public CalendarEditDayNamesAutomationPeer(DayNameCell owner);
    private DayNameCell get_MyOwner();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
}
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.CalendarEditHeaderAutomationPeer : FrameworkElementAutomationPeer {
    private MonthButton MyOwner { get; }
    public CalendarEditHeaderAutomationPeer(MonthButton owner);
    private MonthButton get_MyOwner();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
}
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.CalendarEditNavigatorAutomationPeer : FrameworkElementAutomationPeer {
    private NavigateButton MyOwner { get; }
    public CalendarEditNavigatorAutomationPeer(NavigateButton owner);
    private NavigateButton get_MyOwner();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.DateTimeEditAutomationPeer : FrameworkElementAutomationPeer {
    public ExpandCollapseState ExpandCollapseState { get; }
    private DateTimeEdit MyOwner { get; }
    public string Value { get; }
    public bool IsReadOnly { get; }
    public DateTimeEditAutomationPeer(DateTimeEdit control);
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetLocalizedControlTypeCore();
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private DateTimeEdit get_MyOwner();
    public sealed virtual string get_Value();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string value);
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.DropDownButtonAdvAutomationPeer : FrameworkElementAutomationPeer {
    private DropDownButtonAdv MyOwner { get; }
    public DropDownButtonAdvAutomationPeer(DropDownButtonAdv control);
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    private DropDownButtonAdv get_MyOwner();
}
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.DropDownMenuGroupAutomationPeer : FrameworkElementAutomationPeer {
    private DropDownMenuGroup MyOwner { get; }
    public DropDownMenuGroupAutomationPeer(DropDownMenuGroup control);
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    private DropDownMenuGroup get_MyOwner();
}
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.DropDownMenuItemAutomationPeer : FrameworkElementAutomationPeer {
    private DropDownMenuItem MyOwner { get; }
    public DropDownMenuItemAutomationPeer(DropDownMenuItem control);
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    private DropDownMenuItem get_MyOwner();
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.SplitButtonAutomationPeer : FrameworkElementAutomationPeer {
    private SplitButtonAdv MyOwner { get; }
    public SplitButtonAutomationPeer(SplitButtonAdv control);
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    private SplitButtonAdv get_MyOwner();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Controls.Tools.AutomationPeer.UpDownAutomationPeer : FrameworkElementAutomationPeer {
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private UpDown MyOwner { get; }
    public UpDownAutomationPeer(UpDown control);
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private UpDown get_MyOwner();
    protected virtual string GetAutomationIdCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    public sealed virtual void SetValue(double value);
}
public class Syncfusion.Windows.Controls.TransitionContentControl : ContentControl {
    public static DependencyProperty TransitionProperty;
    public static DependencyProperty EnableAnimationProperty;
    private ContentPresenter part_Content;
    private ContentControl part_TempContent;
    private Grid part_LayoutRoot;
    public ContentTransition Transition { get; public set; }
    public bool EnableAnimation { get; public set; }
    private static TransitionContentControl();
    public ContentTransition get_Transition();
    public void set_Transition(ContentTransition value);
    public bool get_EnableAnimation();
    public void set_EnableAnimation(bool value);
    public void Dispose();
    public virtual void OnApplyTemplate();
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    protected virtual void OnContentChanged(object oldContent, object newContent);
    protected virtual void Dispose(bool disposing);
}
public class Syncfusion.Windows.Controls.TransitionInverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo language);
}
internal abstract class Syncfusion.Windows.Controls.TypeHandlerFactory`1 : object {
    private List`1<TypeHandler> handlers;
    private Dictionary`2<Type, TypeHandler> handlerCache;
    public ICollection`1<TypeHandler> Handlers { get; }
    protected bool IsInitialized { get; }
    public ICollection`1<TypeHandler> get_Handlers();
    protected TypeHandler GetHandler(Type type);
    protected bool GetCachedHandler(Type type, TypeHandler& handler);
    protected void CacheHandler(Type type, TypeHandler handler);
    protected TypeHandler DetermineBestHandler(TypeHandler handler, Type type);
    protected static Type GetImplementingType(Type baseType, Type targetType);
    private static bool DoesTypeImplement(Type baseType, Type targetType);
    private static bool IsGenericTypeDefinitionOf(Type baseDefinition, Type targetType);
    private static Type GetGenericTypeDefinition(Type type);
    protected void RegisterHandler(TypeHandler handler);
    protected void UnregisterHandler(TypeHandler handler);
    protected bool get_IsInitialized();
    protected virtual void Initialize();
    protected void InitializeIfNecessary();
    protected virtual TypeHandler GetDefaultHandler(Type type);
    protected abstract virtual Type GetBaseType(TypeHandler handler);
}
public abstract class Syncfusion.Windows.Controls.VisualStateBehavior : object {
    public static DependencyProperty VisualStateBehaviorProperty;
    private static DependencyProperty IsVisualStateBehaviorAttachedProperty;
    protected internal Type TargetType { get; }
    private static VisualStateBehavior();
    public static VisualStateBehavior GetVisualStateBehavior(DependencyObject obj);
    public static void SetVisualStateBehavior(DependencyObject obj, VisualStateBehavior value);
    private static void OnVisualStateBehaviorChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void Attach(Control control);
    private void Detach(Control control);
    private static bool GetIsVisualStateBehaviorAttached(DependencyObject obj);
    private static void SetIsVisualStateBehaviorAttached(DependencyObject obj, bool value);
    public static void RegisterBehavior(VisualStateBehavior behavior);
    protected internal abstract virtual Type get_TargetType();
    protected abstract virtual void OnAttach(Control control);
    protected abstract virtual void OnDetach(Control control);
    protected abstract virtual void UpdateStateHandler(object o, EventArgs e);
    private void DetachHandler(object sender, RoutedEventArgs e);
    private void AttachHandler(object sender, RoutedEventArgs e);
    protected abstract virtual void UpdateState(Control control, bool useTransitions);
    protected static bool AddValueChanged(DependencyProperty dp, Type targetType, object instance, EventHandler handler);
    protected static bool RemoveValueChanged(DependencyProperty dp, Type targetType, object instance, EventHandler handler);
}
internal class Syncfusion.Windows.Controls.VisualStateBehaviorFactory : TypeHandlerFactory`1<VisualStateBehavior> {
    [ThreadStaticAttribute]
private static VisualStateBehaviorFactory _instance;
    [ThreadStaticAttribute]
private static bool _registeredKnownTypes;
    internal static VisualStateBehaviorFactory Instance { get; }
    internal static VisualStateBehaviorFactory get_Instance();
    internal static void AttachBehavior(Control control);
    internal static void RegisterControlBehavior(VisualStateBehavior behavior);
    protected virtual Type GetBaseType(VisualStateBehavior behavior);
}
internal static class Syncfusion.Windows.Controls.VisualStates : object {
    public static string StateCalendarButtonUnfocused;
    public static string StateCalendarButtonFocused;
    public static string GroupCalendarButtonFocus;
    public static string StateNormal;
    public static string StateMouseOver;
    public static string StatePressed;
    public static string StateDisabled;
    public static string GroupCommon;
    public static string StateUnfocused;
    public static string StateFocused;
    public static string GroupFocus;
    public static string StateSelected;
    public static string StateUnselected;
    public static string GroupSelection;
    public static string StateActive;
    public static string StateInactive;
    public static string GroupActive;
    public static string StateValid;
    public static string StateInvalidFocused;
    public static string StateInvalidUnfocused;
    public static string GroupValidation;
    public static string StateUnwatermarked;
    public static string StateWatermarked;
    public static string GroupWatermark;
    public static void GoToState(Control control, bool useTransitions, String[] stateNames);
}
public class Syncfusion.Windows.Converters.BrushToColorConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo language);
}
public abstract class Syncfusion.Windows.JumpItem : object {
    [CompilerGeneratedAttribute]
private string <CustomCategory>k__BackingField;
    public string CustomCategory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CustomCategory();
    [CompilerGeneratedAttribute]
public void set_CustomCategory(string value);
}
public enum Syncfusion.Windows.JumpItemRejectionReason : Enum {
    public int value__;
    public static JumpItemRejectionReason None;
    public static JumpItemRejectionReason InvalidItem;
    public static JumpItemRejectionReason NoRegisteredHandler;
    public static JumpItemRejectionReason RemovedByUser;
}
public class Syncfusion.Windows.JumpItemsRejectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IList`1<JumpItem> <RejectedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<JumpItemRejectionReason> <RejectionReasons>k__BackingField;
    public IList`1<JumpItem> RejectedItems { get; private set; }
    public IList`1<JumpItemRejectionReason> RejectionReasons { get; private set; }
    public JumpItemsRejectedEventArgs(IList`1<JumpItem> rejectedItems, IList`1<JumpItemRejectionReason> reasons);
    [CompilerGeneratedAttribute]
public IList`1<JumpItem> get_RejectedItems();
    [CompilerGeneratedAttribute]
private void set_RejectedItems(IList`1<JumpItem> value);
    [CompilerGeneratedAttribute]
public IList`1<JumpItemRejectionReason> get_RejectionReasons();
    [CompilerGeneratedAttribute]
private void set_RejectionReasons(IList`1<JumpItemRejectionReason> value);
}
public class Syncfusion.Windows.JumpItemsRemovedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IList`1<JumpItem> <RemovedItems>k__BackingField;
    public IList`1<JumpItem> RemovedItems { get; private set; }
    public JumpItemsRemovedEventArgs(IList`1<JumpItem> removedItems);
    [CompilerGeneratedAttribute]
public IList`1<JumpItem> get_RemovedItems();
    [CompilerGeneratedAttribute]
private void set_RemovedItems(IList`1<JumpItem> value);
}
[ContentPropertyAttribute("JumpItems")]
public class Syncfusion.Windows.JumpList : object {
    private static object s_lock;
    private static Dictionary`2<Application, JumpList> s_applicationMap;
    private Application _application;
    private Nullable`1<bool> _initializing;
    private List`1<JumpItem> _jumpItems;
    private static string _FullName;
    private EventHandler`1<JumpItemsRejectedEventArgs> JumpItemsRejected;
    private EventHandler`1<JumpItemsRemovedEventArgs> JumpItemsRemovedByUser;
    [CompilerGeneratedAttribute]
private bool <ShowFrequentCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowRecentCategory>k__BackingField;
    public bool ShowFrequentCategory { get; public set; }
    public bool ShowRecentCategory { get; public set; }
    public List`1<JumpItem> JumpItems { get; }
    private bool _IsUnmodified { get; }
    private static string _RuntimeId { get; }
    private static JumpList();
    public JumpList(IEnumerable`1<JumpItem> items, bool showFrequent, bool showRecent);
    public static void AddToRecentCategory(string itemPath);
    public static void AddToRecentCategory(JumpPath jumpPath);
    public static void AddToRecentCategory(JumpTask jumpTask);
    public static void SetJumpList(Application application, JumpList value);
    public static JumpList GetJumpList(Application application);
    [CompilerGeneratedAttribute]
public bool get_ShowFrequentCategory();
    [CompilerGeneratedAttribute]
public void set_ShowFrequentCategory(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowRecentCategory();
    [CompilerGeneratedAttribute]
public void set_ShowRecentCategory(bool value);
    public List`1<JumpItem> get_JumpItems();
    private bool get__IsUnmodified();
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    private static string get__RuntimeId();
    public void Apply();
    private void ApplyFromApplication();
    private void _ApplyList();
    private void _BuildShellLists(List`1& successList, List`1& rejectedList, List`1& removedList);
    private static bool ListContainsShellObject(List`1<_ShellObjectPair> removedList, object shellObject);
    private static object GetShellObjectForJumpItem(JumpItem jumpItem);
    private static List`1<_ShellObjectPair> GenerateJumpItems(IObjectArray shellObjects);
    private static void AddCategory(ICustomDestinationList cdl, string category, List`1<_ShellObjectPair> jumpItems, List`1<JumpItem> successList, List`1<_RejectedJumpItemPair> rejectionList);
    private static void AddCategory(ICustomDestinationList cdl, string category, List`1<_ShellObjectPair> jumpItems, List`1<JumpItem> successList, List`1<_RejectedJumpItemPair> rejectionList, bool isHeterogenous);
    private static IShellLinkW CreateLinkFromJumpTask(JumpTask jumpTask, bool allowSeparators);
    private static IShellItem2 GetShellItemForPath(string path);
    private static IShellItem2 CreateItemFromJumpPath(JumpPath jumpPath);
    private static JumpItem GetJumpItemForShellObject(object shellObject);
    private static string ShellLinkToString(IShellLinkW shellLink);
    private void RejectEverything();
    public void add_JumpItemsRejected(EventHandler`1<JumpItemsRejectedEventArgs> value);
    public void remove_JumpItemsRejected(EventHandler`1<JumpItemsRejectedEventArgs> value);
    public void add_JumpItemsRemovedByUser(EventHandler`1<JumpItemsRemovedEventArgs> value);
    public void remove_JumpItemsRemovedByUser(EventHandler`1<JumpItemsRemovedEventArgs> value);
}
public class Syncfusion.Windows.JumpPath : JumpItem {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class Syncfusion.Windows.JumpTask : JumpItem {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconResourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IconResourceIndex>k__BackingField;
    public string Title { get; public set; }
    public string Description { get; public set; }
    public string ApplicationPath { get; public set; }
    public string Arguments { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string IconResourcePath { get; public set; }
    public int IconResourceIndex { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationPath(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_IconResourcePath();
    [CompilerGeneratedAttribute]
public void set_IconResourcePath(string value);
    [CompilerGeneratedAttribute]
public int get_IconResourceIndex();
    [CompilerGeneratedAttribute]
public void set_IconResourceIndex(int value);
}
public class Syncfusion.Windows.MarginChangedEventArgs : EventArgs {
    public Thickness Margin;
    public MarginChangedEventArgs(Thickness margin);
}
public class Syncfusion.Windows.MarginChangedHandler : MulticastDelegate {
    public MarginChangedHandler(object object, IntPtr method);
    public virtual void Invoke(object o, MarginChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object o, MarginChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum Syncfusion.Windows.NonClientFrameEdges : Enum {
    public int value__;
    public static NonClientFrameEdges Bottom;
    public static NonClientFrameEdges Left;
    public static NonClientFrameEdges None;
    public static NonClientFrameEdges Right;
    public static NonClientFrameEdges Top;
}
public enum Syncfusion.Windows.Primitives.SlideDirection : Enum {
    public int value__;
    public static SlideDirection Up;
    public static SlideDirection Down;
    public static SlideDirection Left;
    public static SlideDirection Right;
    public static SlideDirection Default;
}
public enum Syncfusion.Windows.ResizeGripDirection : Enum {
    public int value__;
    public static ResizeGripDirection None;
    public static ResizeGripDirection TopLeft;
    public static ResizeGripDirection Top;
    public static ResizeGripDirection TopRight;
    public static ResizeGripDirection Right;
    public static ResizeGripDirection BottomRight;
    public static ResizeGripDirection Bottom;
    public static ResizeGripDirection BottomLeft;
    public static ResizeGripDirection Left;
}
public enum Syncfusion.Windows.Shared.AnimationDirection : Enum {
    public int value__;
    public static AnimationDirection Horizontal;
    public static AnimationDirection Vertical;
}
public enum Syncfusion.Windows.Shared.AnimationTypes : Enum {
    public int value__;
    public static AnimationTypes None;
    public static AnimationTypes Fade;
    public static AnimationTypes Slide;
    public static AnimationTypes Scroll;
    public static AnimationTypes Custom;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.AutoTemplatedContentControl : ContentControl {
    public AutoTemplatedContentControl(Type keyType);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.AutoTemplatedControl : Control {
    public AutoTemplatedControl(Type keyType);
}
[DesignTimeVisibleAttribute("False")]
public static class Syncfusion.Windows.Shared.BindingUtils : object {
    public static DependencyProperty EnableBindingErrorsProperty;
    private static BindingUtils();
    public static bool GetEnableBindingErrors(DependencyObject obj);
    public static void SetEnableBindingErrors(DependencyObject obj, bool value);
    private static void OnEnableBindingErrorsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    public static BindingExpressionBase SetBinding(DependencyObject target, object source, DependencyProperty dp, object propertyPath);
    public static BindingExpressionBase SetBinding(DependencyObject target, object source, DependencyProperty dp, object propertyPath, BindingMode mode);
    public static BindingExpressionBase SetBinding(DependencyObject target, object source, DependencyProperty dp, object propertyPath, BindingMode mode, IValueConverter converter);
    public static BindingExpressionBase SetRelativeBinding(DependencyObject target, DependencyProperty dp, Type sourceType, object sourceProperty);
    public static BindingExpressionBase SetRelativeBinding(DependencyObject target, DependencyProperty dp, Type sourceType, object sourceProperty, BindingMode mode);
    public static BindingExpressionBase SetRelativeBinding(DependencyObject target, DependencyProperty dp, Type sourceType, object sourceProperty, BindingMode mode, int ancestorLevel);
    public static BindingExpressionBase SetTemplatedParentBinding(DependencyObject target, DependencyProperty dp, object sourceProperty, BindingMode mode);
    public static void SetBindingToVisualChild(FrameworkElement rootelement, Type typeChild, object source, DependencyProperty dp, object sourcePropertyName);
}
[ContentPropertyAttribute("BlockoutDatesRange")]
[ObsoleteAttribute("BlackDatesCollection class is deprecated, use BlackoutDatesCollection instead")]
public class Syncfusion.Windows.Shared.BlackDatesCollection : ObservableCollection`1<BlackoutDatesRange> {
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
}
public class Syncfusion.Windows.Shared.BlackoutDatesCollection : BlackDatesCollection {
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
}
public class Syncfusion.Windows.Shared.BlackoutDatesRange : object {
    [CompilerGeneratedAttribute]
private DateTime <StartDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndDate>k__BackingField;
    public DateTime StartDate { get; public set; }
    public DateTime EndDate { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_StartDate();
    [CompilerGeneratedAttribute]
public void set_StartDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTime value);
}
internal static class Syncfusion.Windows.Shared.BooleanBoxes : object {
    internal static object FalseBox;
    internal static object TrueBox;
    private static BooleanBoxes();
    internal static object Box(bool value);
}
public class Syncfusion.Windows.Shared.BooleanToVisibilityConverterEx : object {
    private string direction;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.BoolNegationConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.BoolToObjectConverter : DependencyObject {
    public static DependencyProperty TrueValueProperty;
    public static DependencyProperty FalseValueProperty;
    public static DependencyProperty CanConvertToTargetTypeProperty;
    public object TrueValue { get; public set; }
    public object FalseValue { get; public set; }
    public bool CanConvertToTargetType { get; public set; }
    private static BoolToObjectConverter();
    public object get_TrueValue();
    public void set_TrueValue(object value);
    public object get_FalseValue();
    public void set_FalseValue(object value);
    public bool get_CanConvertToTargetType();
    public void set_CanConvertToTargetType(bool value);
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.BoolToVisibilityConverter : BooleanToVisibilityConverterEx {
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.Border3D : Border {
    private static double DEF_LINE_THICKNESS;
    private static Color ColorBightest;
    private static Color ColorBright;
    private static Color ColorDark;
    private static Color ColorDarkest;
    private Pen m_penBrightest;
    private Pen m_penBright;
    private Pen m_penDark;
    private Pen m_penDarkest;
    public static DependencyProperty IsInvertedProperty;
    public bool IsInverted { get; public set; }
    private static Border3D();
    public bool get_IsInverted();
    public void set_IsInverted(bool value);
    private Pen CreatePen(Color color);
    private void PreparePens();
    protected virtual void OnRender(DrawingContext dc);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.BorderEyeDrop : Border {
    private bool m_bPressed;
    private int m_iLastX;
    private int m_iLastY;
    private Cursor m_cursor;
    public static DependencyProperty ColorProperty;
    public static RoutedEvent BeginColorPickingEvent;
    public static RoutedEvent EndColorPickingEvent;
    public static RoutedEvent CancelColorPickingEvent;
    public Color Color { get; public set; }
    private static BorderEyeDrop();
    public Color get_Color();
    public void set_Color(Color value);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    private void Current_PostNotifyInput(object sender, NotifyInputEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    private void BorderEyeDrop_MouseMove(object sender, MouseEventArgs e);
    private void BorderEyeDrop_LostMouseCapture(object sender, MouseEventArgs e);
    private void UpdatePixelColor();
    internal static int GetCursorPos(Win32Point& pt);
    internal static IntPtr CreateDC(string strDriver, string strDevice, string strOutput, IntPtr pData);
    internal static int GetPixel(IntPtr hdc, int x, int y);
    internal static int DeleteDC(IntPtr hdc);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("True")]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.CalendarEdit : Control {
    private static string CmainGrid;
    private static string CweekNumbers;
    private static string CWeekNumbersGridCurrent;
    private static string CWeekNumbersGridFollow;
    private static string CyearUpDown;
    private static string CyearUpDownPanel;
    private static string CeditMonthName;
    private static string CnextMonthButtonName;
    private static string CprevMonthButtonName;
    internal bool yearpressed;
    internal bool monthpressed;
    internal bool yearrangepress;
    internal bool mousescroll;
    internal bool mouseDayscroll;
    private bool isTouchSelection;
    internal bool mousemonthscroll;
    internal bool mouseyearscroll;
    internal bool mouseyearrangescroll;
    internal bool mouseweeknumberscroll;
    private Storyboard mmonthStoryboard;
    private Storyboard mmoveStoryboard;
    private Storyboard mvisualModeStoryboard;
    private DateTime m_shiftDate;
    private bool m_shiftDateChangeEnabled;
    private bool mbselectedDatesUpdateLocked;
    private int milockCounter;
    private Cell mpressedCell;
    private bool isMonthNavigated;
    private List`1<Date> mselectedDatesList;
    private List`1<Date> mInvalidDateList;
    private int m_iscrollCounter;
    private bool m_dateSetManual;
    private bool isControlSelection;
    internal NavigateButton m_nextButton;
    internal NavigateButton m_prevButton;
    internal MonthButton m_monthButton1;
    internal MonthButton m_monthButton2;
    private MonthPopup m_popup;
    private VisualModeHistory mvisualModeInfo;
    private Queue`1<VisualModeHistory> m_visualModeQueue;
    private bool m_postScrollNeed;
    internal Button m_todayButton;
    private bool m_cellClicked;
    private bool wcellClicked;
    private CalendarVisualMode viewmode;
    private bool isNextModeSet;
    private CalendarVisualMode calendarVisualMode;
    private CalendarVisualMode nextMode;
    private bool isTemplateApplied;
    internal DateTime miDate;
    internal DateTime mxDate;
    private static DateTime m_currentCultureMinDate;
    private DateTime m_oldMinDate;
    private DateTime m_newMinDate;
    private bool m_bsuspendEventFire;
    private Grid m_mainGrid;
    private ContentPresenter m_weekNumbersContainer;
    private ContentPresenter wcurrentweekNumbersContainer;
    private ContentPresenter wfollowweekNumbersContainer;
    private UpDown m_yearUpDown;
    private StackPanel m_yearUpDownPanel;
    private DispatcherTimer m_timer;
    private TextBlock m_editMonthName;
    private Hashtable m_toolTipDates;
    public static int startYear;
    public static int endYear;
    public static int primaryDate;
    public static string clickedweeknumber;
    private PropertyChangedCallback DateChanged;
    private MonthChangedEventHandler MonthChanged;
    private PropertyChangedCallback CultureChanged;
    private PropertyChangedCallback IsTodayButtonClickedChanged;
    private PropertyChangedCallback CalendarChanged;
    private PropertyChangedCallback CalendarStyleChanged;
    private PropertyChangedCallback DisableDateSelectionChanged;
    private PropertyChangedCallback AllowSelectionChanged;
    private PropertyChangedCallback AllowMultiplySelectionChanged;
    private PropertyChangedCallback IsDayNamesAbbreviatedChanged;
    private PropertyChangedCallback IsMonthNameAbbreviatedChanged;
    private PropertyChangedCallback SelectionRangeModeChanged;
    private PropertyChangedCallback SelectionBorderBrushChanged;
    private PropertyChangedCallback MouseOverBorderBrushChanged;
    private PropertyChangedCallback MouseOverBackgroundChanged;
    private PropertyChangedCallback MouseOverForegroundChanged;
    private PropertyChangedCallback SelectedDayCellBorderBrushChanged;
    private PropertyChangedCallback TodayCellBorderBrushChanged;
    private PropertyChangedCallback TodayCellForegroundChanged;
    private PropertyChangedCallback TodayCellBackgroundChanged;
    private PropertyChangedCallback TodayCellSelectedBorderBrushChanged;
    private PropertyChangedCallback TodayCellSelectedBackgroundChanged;
    private PropertyChangedCallback SelectedDayCellHoverBackgroundChanged;
    private PropertyChangedCallback SelectedDayCellBackgroundChanged;
    private PropertyChangedCallback SelectedDayCellForegroundChanged;
    private PropertyChangedCallback NotCurrentMonthForegroundChanged;
    private PropertyChangedCallback SelectionForegroundChanged;
    private PropertyChangedCallback WeekNumberSelectionBorderBrushChanged;
    private PropertyChangedCallback WeekNumberSelectionBorderThicknessChanged;
    private PropertyChangedCallback WeekNumberSelectionBorderCornerRadiusChanged;
    private PropertyChangedCallback WeekNumberBackgroundChanged;
    private PropertyChangedCallback WeekNumberForegroundChanged;
    private PropertyChangedCallback WeekNumberHoverForegroundChanged;
    private PropertyChangedCallback WeekNumberSelectionForegroundChanged;
    private PropertyChangedCallback WeekNumberSelectionBackgroundChanged;
    private PropertyChangedCallback WeekNumberHoverBackgroundChanged;
    private PropertyChangedCallback WeekNumberHoverBorderBrushChanged;
    private PropertyChangedCallback WeekNumberBorderBrushChanged;
    private PropertyChangedCallback WeekNumberBorderThicknessChanged;
    private PropertyChangedCallback WeekNumberCornerRadiusChanged;
    private PropertyChangedCallback SelectionBorderCornerRadiusChanged;
    private PropertyChangedCallback FrameMovingTimeChanged;
    private PropertyChangedCallback ChangeModeTimeChanged;
    private PropertyChangedCallback MonthChangeDirectionChanged;
    private PropertyChangedCallback DayNameCellsDataTemplateChanged;
    private PropertyChangedCallback PreviousScrollButtonTemplateChanged;
    private PropertyChangedCallback NextScrollButtonTemplateChanged;
    private PropertyChangedCallback DayCellsDataTemplateChanged;
    private PropertyChangedCallback DayCellsStyleChanged;
    private PropertyChangedCallback DayNameCellsStyleChanged;
    private PropertyChangedCallback DayCellsDataTemplateSelectorChanged;
    private PropertyChangedCallback DayNameCellsDataTemplateSelectorChanged;
    private PropertyChangedCallback DateDataTemplatesChanged;
    private PropertyChangedCallback DateStylesChanged;
    private PropertyChangedCallback ScrollToDateEnabledChanged;
    private PropertyChangedCallback VisualModeChanged;
    private PropertyChangedCallback TodayRowIsVisibleChanged;
    private PropertyChangedCallback MinMaxHiddenChanged;
    private PropertyChangedCallback IsShowWeekNumbersChanged;
    private PropertyChangedCallback IsShowWeekNumbersGridChanged;
    private PropertyChangedCallback IsAllowYearSelectionChanged;
    private PropertyChangedCallback ShowPreviousMonthDaysChanged;
    private PropertyChangedCallback ShowNextMonthDaysChanged;
    private MouseButtonEventHandler YearRangeCellMouseLeftButtonUp;
    private MouseButtonEventHandler YearRangeCellMouseLeftButtonDown;
    private MouseButtonEventHandler YearCellMouseLeftButtonUp;
    private MouseButtonEventHandler YearCellMouseLeftButtonDown;
    private MouseButtonEventHandler MonthCellMouseLeftButtonUp;
    private MouseButtonEventHandler MonthCellMouseLeftButtonDown;
    private MouseButtonEventHandler DayCellMouseLeftButtonDown;
    private MouseButtonEventHandler DayCellMouseLeftButtonUp;
    private MouseButtonEventHandler DayNameCellMouseLeftButtonDown;
    private MouseButtonEventHandler WeekNumberCellPanelMouseLeftButtonDown;
    private MouseButtonEventHandler WeekNumberCellMouseLeftButtonDown;
    private PropertyChangedCallback VisibleDataChanged;
    public bool Invalidateflag;
    public static RoutedUICommand NextCommand;
    public static RoutedUICommand PrevCommand;
    public static RoutedUICommand UpCommand;
    public static DependencyProperty SpecialDatesProperty;
    private bool updateSelection;
    public static DependencyProperty CalendarProperty;
    public static DependencyProperty IsTodayButtonClickedProperty;
    public static DependencyProperty CultureProperty;
    public static DependencyProperty CalendarStyleProperty;
    public static DependencyProperty DateProperty;
    public static DependencyProperty SelectedDatesProperty;
    public static DependencyProperty BlackoutDatesProperty;
    public static DependencyProperty MouseOverBorderBrushProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    public static DependencyProperty MouseOverForegroundProperty;
    public static DependencyProperty SelectedDayCellBorderBrushProperty;
    public static DependencyProperty TodayCellBorderBrushProperty;
    public static DependencyProperty TodayCellForegroundProperty;
    public static DependencyProperty TodayCellBackgroundProperty;
    public static DependencyProperty TodayCellSelectedBorderBrushProperty;
    public static DependencyProperty TodayCellSelectedBackgroundProperty;
    public static DependencyProperty SelectedDayCellHoverBackgroundProperty;
    public static DependencyProperty NotCurrentMonthForegroundProperty;
    public static DependencyProperty SelectedDayCellBackgroundProperty;
    public static DependencyProperty SelectedDayCellForegroundProperty;
    public static DependencyProperty SelectionBorderBrushProperty;
    public static DependencyProperty SelectionForegroundProperty;
    [ObsoleteAttribute("InValidDateBorderBrush property is deprecated, use BlackoutDatesBorderBrush instead")]
public static DependencyProperty InValidDateBorderBrushProperty;
    [ObsoleteAttribute("InValidDateForeGround property is deprecated, use BlackoutDatesForeground instead")]
public static DependencyProperty InValidDateForeGroundProperty;
    [ObsoleteAttribute("InValidDateBackground property is deprecated, use BlackoutDatesBackground instead")]
public static DependencyProperty InValidDateBackgroundProperty;
    [ObsoleteAttribute("InValidDateCrossBackground property is deprecated, use BlackoutDatesCrossBrush instead")]
public static DependencyProperty InValidDateCrossBackgroundProperty;
    public static DependencyProperty BlackoutDatesBorderBrushProperty;
    public static DependencyProperty BlackoutDatesForegroundProperty;
    public static DependencyProperty BlackoutDatesBackgroundProperty;
    public static DependencyProperty BlackoutDatesCrossBrushProperty;
    public static DependencyProperty WeekNumberSelectionBorderBrushProperty;
    public static DependencyProperty WeekNumberSelectionBorderThicknessProperty;
    public static DependencyProperty WeekNumberSelectionBorderCornerRadiusProperty;
    public static DependencyProperty WeekNumberBackgroundProperty;
    public static DependencyProperty WeekNumberSelectionBackgroundProperty;
    public static DependencyProperty WeekNumberHoverBackgroundProperty;
    public static DependencyProperty WeekNumberHoverBorderBrushProperty;
    public static DependencyProperty WeekNumberHoverForegroundProperty;
    public static DependencyProperty WeekNumberSelectionForegroundProperty;
    public static DependencyProperty WeekNumberBorderBrushProperty;
    public static DependencyProperty WeekNumberForegroundProperty;
    public static DependencyProperty WeekNumberCornerRadiusProperty;
    public static DependencyProperty WeekNumberBorderThicknessProperty;
    public static DependencyProperty SelectionBorderCornerRadiusProperty;
    public static DependencyProperty AllowSelectionProperty;
    public static DependencyProperty AllowMultiplySelectionProperty;
    [ObsoleteAttribute("IsDayNamesAbbreviated property is deprecated, use ShowAbbreviatedDayNames instead")]
public static DependencyProperty IsDayNamesAbbreviatedProperty;
    [ObsoleteAttribute("IsMonthNameAbbreviated property is deprecated, use ShowAbbreviatedMonthNames instead")]
public static DependencyProperty IsMonthNameAbbreviatedProperty;
    public static DependencyProperty ShowAbbreviatedDayNamesProperty;
    public static DependencyProperty ShowAbbreviatedMonthNamesProperty;
    public static DependencyProperty SelectionRangeModeProperty;
    public static DependencyProperty FrameMovingTimeProperty;
    public static DependencyProperty ChangeModeTimeProperty;
    public static DependencyProperty MonthChangeDirectionProperty;
    public static DependencyProperty DayNameCellsDataTemplateProperty;
    public static DependencyProperty NextScrollButtonTemplateProperty;
    public static DependencyProperty PreviousScrollButtonTemplateProperty;
    public static DependencyProperty DayCellsDataTemplateProperty;
    public static DependencyProperty DayCellsStyleProperty;
    public static DependencyProperty DayNameCellsStyleProperty;
    public static DependencyProperty DayCellsDataTemplateSelectorProperty;
    public static DependencyProperty DayNameCellsDataTemplateSelectorProperty;
    public static DependencyProperty DateDataTemplatesProperty;
    public static DependencyProperty DateStylesProperty;
    public static DependencyProperty DisableDateSelectionProperty;
    public static DependencyProperty ScrollToDateEnabledProperty;
    protected internal static DependencyProperty DayNamesGridProperty;
    protected internal static DependencyProperty WeekNumbersGridProperty;
    protected internal static DependencyProperty CurrentDayGridProperty;
    protected internal static DependencyProperty FollowingDayGridProperty;
    protected internal static DependencyProperty CurrentMonthGridProperty;
    protected internal static DependencyProperty CurrentYearGridProperty;
    protected internal static DependencyProperty CurrentYearRangeGridProperty;
    protected internal static DependencyProperty FollowingMonthGridProperty;
    protected internal static DependencyProperty FollowingYearGridProperty;
    protected internal static DependencyProperty FollowingYearRangeGridProperty;
    protected internal static DependencyProperty CurrentWeekNumbersGridProperty;
    protected internal static DependencyProperty FollowingWeekNumbersGridProperty;
    protected internal static DependencyProperty VisualModeProperty;
    public static DependencyProperty MinDateProperty;
    public static DependencyProperty MaxDateProperty;
    protected internal static DependencyProperty VisibleDataProperty;
    public static DependencyProperty HeaderForegroundProperty;
    public static DependencyProperty HeaderBackgroundProperty;
    protected static DependencyPropertyKey TodayDatePropertyKey;
    public static DependencyProperty TodayDateProperty;
    public static DependencyProperty TodayRowIsVisibleProperty;
    public static DependencyProperty MinMaxHiddenProperty;
    [ObsoleteAttribute("IsShowWeekNumbers property is deprecated, use ShowWeekNumbers instead")]
public static DependencyProperty IsShowWeekNumbersProperty;
    [ObsoleteAttribute("IsShowWeekNumbersGrid property is deprecated")]
public static DependencyProperty IsShowWeekNumbersGridProperty;
    [ObsoleteAttribute("IsAllowYearSelection property is deprecated, use AllowYearEditing instead")]
public static DependencyProperty IsAllowYearSelectionProperty;
    public static DependencyProperty ShowWeekNumbersProperty;
    public static DependencyProperty AllowYearEditingProperty;
    public static DependencyProperty ShowPreviousMonthDaysProperty;
    public static DependencyProperty ShowNextMonthDaysProperty;
    public List`1<Date> SelectedDatesList { get; public set; }
    public List`1<Date> InvalidDates { get; public set; }
    public bool IsInitializeComplete { get; }
    public CalendarVisualMode VisualMode { get; public set; }
    public CalendarVisualMode ViewMode { get; public set; }
    protected VisualModeHistory VisualModeInfo { get; protected set; }
    internal bool IsWeekCellClicked { get; internal set; }
    internal bool IsCellClicked { get; internal set; }
    internal Hashtable TooltipDates { get; }
    internal bool IsNextModeSet { get; internal set; }
    internal CalendarVisualMode NextMode { get; internal set; }
    public Calendar Calendar { get; public set; }
    [TypeConverterAttribute("Syncfusion.Windows.Shared.CultureInfoTypeConverter")]
public CultureInfo Culture { get; public set; }
    [ObsoleteAttribute("This property is deprecated, the default CalendarStyle is changed to Vista style")]
[BrowsableAttribute("False")]
public CalendarStyle CalendarStyle { get; public set; }
    public DateTime Date { get; public set; }
    public DatesCollection SelectedDates { get; public set; }
    public BlackDatesCollection BlackoutDates { get; public set; }
    public SpecialDatesCollection SpecialDates { get; public set; }
    public Brush SelectionBorderBrush { get; public set; }
    [ObsoleteAttribute("InValidDateBorderBrush is deprecated, use BlackoutDatesBorderBrush instead")]
public Brush InValidDateBorderBrush { get; public set; }
    [ObsoleteAttribute("InValidDateForeGround is deprecated, use BlackoutDatesForeground instead")]
public Brush InValidDateForeGround { get; public set; }
    [ObsoleteAttribute("InValidDateBackground is deprecated, use BlackoutDatesBackground instead")]
public Brush InValidDateBackground { get; public set; }
    [ObsoleteAttribute("InValidDateCrossBackground is deprecated, use BlackoutDatesCrossBrush instead")]
public Brush InValidDateCrossBackground { get; public set; }
    public Brush BlackoutDatesBorderBrush { get; public set; }
    public Brush BlackoutDatesForeground { get; public set; }
    public Brush BlackoutDatesBackground { get; public set; }
    public Brush BlackoutDatesCrossBrush { get; public set; }
    public Brush SelectionForeground { get; public set; }
    public Brush WeekNumberSelectionBorderBrush { get; public set; }
    public Thickness WeekNumberSelectionBorderThickness { get; public set; }
    public Thickness WeekNumberBorderThickness { get; public set; }
    public CornerRadius WeekNumberSelectionBorderCornerRadius { get; public set; }
    public Brush WeekNumberBackground { get; public set; }
    public Brush MouseOverBorderBrush { get; public set; }
    public Brush NotCurrentMonthForeground { get; public set; }
    public Brush MouseOverForeground { get; public set; }
    public Brush MouseOverBackground { get; public set; }
    public Brush SelectedDayCellBorderBrush { get; public set; }
    public Brush SelectedDayCellBackground { get; public set; }
    public Brush SelectedDayCellHoverBackground { get; public set; }
    public Brush TodayCellBorderBrush { get; public set; }
    public Brush TodayCellBackground { get; public set; }
    public Brush TodayCellForeground { get; public set; }
    public Brush TodayCellSelectedBorderBrush { get; public set; }
    public Brush TodayCellSelectedBackground { get; public set; }
    public Brush SelectedDayCellForeground { get; public set; }
    public Brush WeekNumberForeground { get; public set; }
    public Brush WeekNumberBorderBrush { get; public set; }
    public Brush WeekNumberHoverBorderBrush { get; public set; }
    public Brush WeekNumberSelectionBackground { get; public set; }
    public Brush WeekNumberHoverBackground { get; public set; }
    public Brush WeekNumberHoverForeground { get; public set; }
    public Brush WeekNumberSelectionForeground { get; public set; }
    public CornerRadius SelectionBorderCornerRadius { get; public set; }
    public CornerRadius WeekNumberCornerRadius { get; public set; }
    public bool AllowSelection { get; public set; }
    public bool AllowMultiplySelection { get; public set; }
    [BrowsableAttribute("False")]
public bool IsTodayButtonClicked { get; public set; }
    [ObsoleteAttribute("IsDayNamesAbbreviated is deprecated, use ShowAbbreviatedDayNames instead")]
public bool IsDayNamesAbbreviated { get; public set; }
    public bool ShowAbbreviatedDayNames { get; public set; }
    [ObsoleteAttribute("IsMonthNameAbbreviated is deprecated, use ShowAbbreviatedMonthNames instead")]
public bool IsMonthNameAbbreviated { get; public set; }
    public bool ShowAbbreviatedMonthNames { get; public set; }
    [ObsoleteAttribute("IsShowWeekNumbers is deprecated, use ShowWeekNumbers instead")]
public bool IsShowWeekNumbers { get; public set; }
    public bool ShowWeekNumbers { get; public set; }
    [ObsoleteAttribute(" IsShowWeekNumbersGrid is deprecated")]
public bool IsShowWeekNumbersGrid { get; public set; }
    [ObsoleteAttribute("IsAllowYearSelection is deprecated, use IsAllowYearSelection instead")]
public bool IsAllowYearSelection { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("This property is deprecated, you can navigate to year view and choose required year")]
public bool AllowYearEditing { get; public set; }
    public bool ShowPreviousMonthDays { get; public set; }
    public bool ShowNextMonthDays { get; public set; }
    public SelectionRangeMode SelectionRangeMode { get; public set; }
    public int FrameMovingTime { get; public set; }
    public int ChangeModeTime { get; public set; }
    public AnimationDirection MonthChangeDirection { get; public set; }
    public DataTemplate DayNameCellsDataTemplate { get; public set; }
    public ControlTemplate PreviousScrollButtonTemplate { get; public set; }
    public ControlTemplate NextScrollButtonTemplate { get; public set; }
    public DataTemplate DayCellsDataTemplate { get; public set; }
    public Style DayCellsStyle { get; public set; }
    public Style DayNameCellsStyle { get; public set; }
    public DataTemplateSelector DayCellsDataTemplateSelector { get; public set; }
    public DataTemplateSelector DayNameCellsDataTemplateSelector { get; public set; }
    public DataTemplatesDictionary DateDataTemplates { get; public set; }
    public StylesDictionary DateStyles { get; public set; }
    public bool DisableDateSelection { get; public set; }
    public bool ScrollToDateEnabled { get; public set; }
    protected internal DayNamesGrid DayNamesGrid { get; protected internal set; }
    protected internal WeekNumbersGrid WeekNumbersGrid { get; protected internal set; }
    protected internal DayGrid CurrentDayGrid { get; protected internal set; }
    protected internal DayGrid FollowingDayGrid { get; protected internal set; }
    protected internal MonthGrid CurrentMonthGrid { get; protected internal set; }
    protected internal YearGrid CurrentYearGrid { get; protected internal set; }
    protected internal YearRangeGrid CurrentYearRangeGrid { get; protected internal set; }
    protected internal WeekNumberGridPanel CurrentWeekNumbersGrid { get; protected internal set; }
    protected internal WeekNumberGridPanel FollowingWeekNumbersGrid { get; protected internal set; }
    protected internal MonthGrid FollowingMonthGrid { get; protected internal set; }
    protected internal YearGrid FollowingYearGrid { get; protected internal set; }
    protected internal YearRangeGrid FollowingYearRangeGrid { get; protected internal set; }
    public DateTime MinDate { get; public set; }
    public DateTime MaxDate { get; public set; }
    protected internal VisibleDate VisibleData { get; protected internal set; }
    public Brush HeaderForeground { get; public set; }
    public Brush HeaderBackground { get; public set; }
    public string TodayDate { get; private set; }
    public bool TodayRowIsVisible { get; public set; }
    public bool MinMaxHidden { get; public set; }
    private static CalendarEdit();
    private void SpecialDates_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void CurrentDayGrid_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void DayGrid_StylusButtonUp(object sender, StylusButtonEventArgs e);
    private void HandleDayGridButtonUp(DayCell releasedCell);
    private void DayCell_MouseDown(object sender, MouseButtonEventArgs e);
    private void CalendarEdit_Loaded(object sender, RoutedEventArgs e);
    private void CalendarEdit_Unloaded(object sender, RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void BlackoutDates_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnBlackoutDatesCollectionChanged(NotifyCollectionChangedEventArgs e);
    private void OnBlackoutDatesCollectionChanged(DependencyPropertyChangedEventArgs e);
    public void add_DateChanged(PropertyChangedCallback value);
    public void remove_DateChanged(PropertyChangedCallback value);
    public void add_MonthChanged(MonthChangedEventHandler value);
    public void remove_MonthChanged(MonthChangedEventHandler value);
    public void add_CultureChanged(PropertyChangedCallback value);
    public void remove_CultureChanged(PropertyChangedCallback value);
    internal void add_IsTodayButtonClickedChanged(PropertyChangedCallback value);
    internal void remove_IsTodayButtonClickedChanged(PropertyChangedCallback value);
    public void add_CalendarChanged(PropertyChangedCallback value);
    public void remove_CalendarChanged(PropertyChangedCallback value);
    public void add_CalendarStyleChanged(PropertyChangedCallback value);
    public void remove_CalendarStyleChanged(PropertyChangedCallback value);
    public void add_DisableDateSelectionChanged(PropertyChangedCallback value);
    public void remove_DisableDateSelectionChanged(PropertyChangedCallback value);
    public void add_AllowSelectionChanged(PropertyChangedCallback value);
    public void remove_AllowSelectionChanged(PropertyChangedCallback value);
    public void add_AllowMultiplySelectionChanged(PropertyChangedCallback value);
    public void remove_AllowMultiplySelectionChanged(PropertyChangedCallback value);
    public void add_IsDayNamesAbbreviatedChanged(PropertyChangedCallback value);
    public void remove_IsDayNamesAbbreviatedChanged(PropertyChangedCallback value);
    public void add_IsMonthNameAbbreviatedChanged(PropertyChangedCallback value);
    public void remove_IsMonthNameAbbreviatedChanged(PropertyChangedCallback value);
    public void add_SelectionRangeModeChanged(PropertyChangedCallback value);
    public void remove_SelectionRangeModeChanged(PropertyChangedCallback value);
    public void add_SelectionBorderBrushChanged(PropertyChangedCallback value);
    public void remove_SelectionBorderBrushChanged(PropertyChangedCallback value);
    public void add_MouseOverBorderBrushChanged(PropertyChangedCallback value);
    public void remove_MouseOverBorderBrushChanged(PropertyChangedCallback value);
    public void add_MouseOverBackgroundChanged(PropertyChangedCallback value);
    public void remove_MouseOverBackgroundChanged(PropertyChangedCallback value);
    public void add_MouseOverForegroundChanged(PropertyChangedCallback value);
    public void remove_MouseOverForegroundChanged(PropertyChangedCallback value);
    public void add_SelectedDayCellBorderBrushChanged(PropertyChangedCallback value);
    public void remove_SelectedDayCellBorderBrushChanged(PropertyChangedCallback value);
    public void add_TodayCellBorderBrushChanged(PropertyChangedCallback value);
    public void remove_TodayCellBorderBrushChanged(PropertyChangedCallback value);
    public void add_TodayCellForegroundChanged(PropertyChangedCallback value);
    public void remove_TodayCellForegroundChanged(PropertyChangedCallback value);
    public void add_TodayCellBackgroundChanged(PropertyChangedCallback value);
    public void remove_TodayCellBackgroundChanged(PropertyChangedCallback value);
    public void add_TodayCellSelectedBorderBrushChanged(PropertyChangedCallback value);
    public void remove_TodayCellSelectedBorderBrushChanged(PropertyChangedCallback value);
    public void add_TodayCellSelectedBackgroundChanged(PropertyChangedCallback value);
    public void remove_TodayCellSelectedBackgroundChanged(PropertyChangedCallback value);
    public void add_SelectedDayCellHoverBackgroundChanged(PropertyChangedCallback value);
    public void remove_SelectedDayCellHoverBackgroundChanged(PropertyChangedCallback value);
    public void add_SelectedDayCellBackgroundChanged(PropertyChangedCallback value);
    public void remove_SelectedDayCellBackgroundChanged(PropertyChangedCallback value);
    public void add_SelectedDayCellForegroundChanged(PropertyChangedCallback value);
    public void remove_SelectedDayCellForegroundChanged(PropertyChangedCallback value);
    public void add_NotCurrentMonthForegroundChanged(PropertyChangedCallback value);
    public void remove_NotCurrentMonthForegroundChanged(PropertyChangedCallback value);
    public void add_SelectionForegroundChanged(PropertyChangedCallback value);
    public void remove_SelectionForegroundChanged(PropertyChangedCallback value);
    public void add_WeekNumberSelectionBorderBrushChanged(PropertyChangedCallback value);
    public void remove_WeekNumberSelectionBorderBrushChanged(PropertyChangedCallback value);
    public void add_WeekNumberSelectionBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_WeekNumberSelectionBorderThicknessChanged(PropertyChangedCallback value);
    public void add_WeekNumberSelectionBorderCornerRadiusChanged(PropertyChangedCallback value);
    public void remove_WeekNumberSelectionBorderCornerRadiusChanged(PropertyChangedCallback value);
    public void add_WeekNumberBackgroundChanged(PropertyChangedCallback value);
    public void remove_WeekNumberBackgroundChanged(PropertyChangedCallback value);
    public void add_WeekNumberForegroundChanged(PropertyChangedCallback value);
    public void remove_WeekNumberForegroundChanged(PropertyChangedCallback value);
    public void add_WeekNumberHoverForegroundChanged(PropertyChangedCallback value);
    public void remove_WeekNumberHoverForegroundChanged(PropertyChangedCallback value);
    public void add_WeekNumberSelectionForegroundChanged(PropertyChangedCallback value);
    public void remove_WeekNumberSelectionForegroundChanged(PropertyChangedCallback value);
    public void add_WeekNumberSelectionBackgroundChanged(PropertyChangedCallback value);
    public void remove_WeekNumberSelectionBackgroundChanged(PropertyChangedCallback value);
    public void add_WeekNumberHoverBackgroundChanged(PropertyChangedCallback value);
    public void remove_WeekNumberHoverBackgroundChanged(PropertyChangedCallback value);
    public void add_WeekNumberHoverBorderBrushChanged(PropertyChangedCallback value);
    public void remove_WeekNumberHoverBorderBrushChanged(PropertyChangedCallback value);
    public void add_WeekNumberBorderBrushChanged(PropertyChangedCallback value);
    public void remove_WeekNumberBorderBrushChanged(PropertyChangedCallback value);
    public void add_WeekNumberBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_WeekNumberBorderThicknessChanged(PropertyChangedCallback value);
    public void add_WeekNumberCornerRadiusChanged(PropertyChangedCallback value);
    public void remove_WeekNumberCornerRadiusChanged(PropertyChangedCallback value);
    public void add_SelectionBorderCornerRadiusChanged(PropertyChangedCallback value);
    public void remove_SelectionBorderCornerRadiusChanged(PropertyChangedCallback value);
    public void add_FrameMovingTimeChanged(PropertyChangedCallback value);
    public void remove_FrameMovingTimeChanged(PropertyChangedCallback value);
    public void add_ChangeModeTimeChanged(PropertyChangedCallback value);
    public void remove_ChangeModeTimeChanged(PropertyChangedCallback value);
    public void add_MonthChangeDirectionChanged(PropertyChangedCallback value);
    public void remove_MonthChangeDirectionChanged(PropertyChangedCallback value);
    public void add_DayNameCellsDataTemplateChanged(PropertyChangedCallback value);
    public void remove_DayNameCellsDataTemplateChanged(PropertyChangedCallback value);
    public void add_PreviousScrollButtonTemplateChanged(PropertyChangedCallback value);
    public void remove_PreviousScrollButtonTemplateChanged(PropertyChangedCallback value);
    public void add_NextScrollButtonTemplateChanged(PropertyChangedCallback value);
    public void remove_NextScrollButtonTemplateChanged(PropertyChangedCallback value);
    public void add_DayCellsDataTemplateChanged(PropertyChangedCallback value);
    public void remove_DayCellsDataTemplateChanged(PropertyChangedCallback value);
    public void add_DayCellsStyleChanged(PropertyChangedCallback value);
    public void remove_DayCellsStyleChanged(PropertyChangedCallback value);
    public void add_DayNameCellsStyleChanged(PropertyChangedCallback value);
    public void remove_DayNameCellsStyleChanged(PropertyChangedCallback value);
    public void add_DayCellsDataTemplateSelectorChanged(PropertyChangedCallback value);
    public void remove_DayCellsDataTemplateSelectorChanged(PropertyChangedCallback value);
    public void add_DayNameCellsDataTemplateSelectorChanged(PropertyChangedCallback value);
    public void remove_DayNameCellsDataTemplateSelectorChanged(PropertyChangedCallback value);
    public void add_DateDataTemplatesChanged(PropertyChangedCallback value);
    public void remove_DateDataTemplatesChanged(PropertyChangedCallback value);
    public void add_DateStylesChanged(PropertyChangedCallback value);
    public void remove_DateStylesChanged(PropertyChangedCallback value);
    public void add_ScrollToDateEnabledChanged(PropertyChangedCallback value);
    public void remove_ScrollToDateEnabledChanged(PropertyChangedCallback value);
    public void add_VisualModeChanged(PropertyChangedCallback value);
    public void remove_VisualModeChanged(PropertyChangedCallback value);
    public void add_TodayRowIsVisibleChanged(PropertyChangedCallback value);
    public void remove_TodayRowIsVisibleChanged(PropertyChangedCallback value);
    public void add_MinMaxHiddenChanged(PropertyChangedCallback value);
    public void remove_MinMaxHiddenChanged(PropertyChangedCallback value);
    public void add_IsShowWeekNumbersChanged(PropertyChangedCallback value);
    public void remove_IsShowWeekNumbersChanged(PropertyChangedCallback value);
    public void add_IsShowWeekNumbersGridChanged(PropertyChangedCallback value);
    public void remove_IsShowWeekNumbersGridChanged(PropertyChangedCallback value);
    public void add_IsAllowYearSelectionChanged(PropertyChangedCallback value);
    public void remove_IsAllowYearSelectionChanged(PropertyChangedCallback value);
    public void add_ShowPreviousMonthDaysChanged(PropertyChangedCallback value);
    public void remove_ShowPreviousMonthDaysChanged(PropertyChangedCallback value);
    public void add_ShowNextMonthDaysChanged(PropertyChangedCallback value);
    public void remove_ShowNextMonthDaysChanged(PropertyChangedCallback value);
    protected internal void add_YearRangeCellMouseLeftButtonUp(MouseButtonEventHandler value);
    protected internal void remove_YearRangeCellMouseLeftButtonUp(MouseButtonEventHandler value);
    protected internal void add_YearRangeCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void remove_YearRangeCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void add_YearCellMouseLeftButtonUp(MouseButtonEventHandler value);
    protected internal void remove_YearCellMouseLeftButtonUp(MouseButtonEventHandler value);
    protected internal void add_YearCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void remove_YearCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void add_MonthCellMouseLeftButtonUp(MouseButtonEventHandler value);
    protected internal void remove_MonthCellMouseLeftButtonUp(MouseButtonEventHandler value);
    protected internal void add_MonthCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void remove_MonthCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void add_DayCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void remove_DayCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void add_DayCellMouseLeftButtonUp(MouseButtonEventHandler value);
    protected internal void remove_DayCellMouseLeftButtonUp(MouseButtonEventHandler value);
    protected internal void add_DayNameCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void remove_DayNameCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void add_WeekNumberCellPanelMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void remove_WeekNumberCellPanelMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void add_WeekNumberCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void remove_WeekNumberCellMouseLeftButtonDown(MouseButtonEventHandler value);
    protected internal void add_VisibleDataChanged(PropertyChangedCallback value);
    protected internal void remove_VisibleDataChanged(PropertyChangedCallback value);
    public List`1<Date> get_SelectedDatesList();
    public void set_SelectedDatesList(List`1<Date> value);
    public List`1<Date> get_InvalidDates();
    public void set_InvalidDates(List`1<Date> value);
    public bool get_IsInitializeComplete();
    public CalendarVisualMode get_VisualMode();
    public void set_VisualMode(CalendarVisualMode value);
    public CalendarVisualMode get_ViewMode();
    public void set_ViewMode(CalendarVisualMode value);
    protected VisualModeHistory get_VisualModeInfo();
    protected void set_VisualModeInfo(VisualModeHistory value);
    internal bool get_IsWeekCellClicked();
    internal void set_IsWeekCellClicked(bool value);
    internal bool get_IsCellClicked();
    internal void set_IsCellClicked(bool value);
    internal Hashtable get_TooltipDates();
    internal bool get_IsNextModeSet();
    internal void set_IsNextModeSet(bool value);
    internal CalendarVisualMode get_NextMode();
    internal void set_NextMode(CalendarVisualMode value);
    public void SetToolTip(int rowIndex, int colIndex, ToolTip tooltip);
    public void SetToolTip(Date date, ToolTip tooltip);
    internal int GetWeekNumber(DateTime dt);
    public void LockSelectedDatesUpdate();
    public void UnLockSelectedDatesUpdate();
    public void SetVisibleMonth(int month);
    public void SetVisibleYear(int year);
    protected virtual void ScrollToDate();
    protected virtual void BeginMoving(MoveDirection direction, int month);
    protected virtual void Move(MoveDirection direction);
    protected virtual void ChangeVisualModePreview(VisibleDate date);
    protected virtual void ChangeVisualModeIndeed();
    protected virtual void ChangeMode(ChangeVisualModeDirection direction);
    protected void ClearSelectedCell();
    protected virtual void ChangeVisualMode(ChangeVisualModeDirection direction);
    private void HideWeekNumbersContainer();
    private void ShowWeekNumbersContainer();
    private void ShowWeekNumbersForYearContainer();
    private void HideWeekNumbersForYearContainer();
    protected virtual void NavigateButtonVerify();
    protected internal void SetBackground(DayGrid dayGrid, SolidColorBrush currentBrush, SolidColorBrush followingBrush, bool isCurrent);
    protected virtual double CalculateLayOnValue(DayGrid current);
    protected virtual void Highlight(Border border, HighlightSate state);
    protected virtual void SetDateDataTemplates(DayGrid current, CollectionChangedAction action, DataTemplateItem item);
    protected virtual void SetDateStyles(DayGrid current, CollectionChangedAction action, StyleItem item);
    protected internal virtual void InitilizeDayCellTemplates(DayGrid current);
    protected internal virtual void InitilizeDayCellStyles(DayGrid current);
    private static bool ValidateFrameMovingTime(object value);
    private void SetCellToolTip(int rowIndex, int colIndex, DayGrid current, ToolTip tooltip);
    private bool IsOutOfDateRange(int month);
    private bool IsOutOfDateRange(MoveDirection direction, Date& returnDate);
    private void AddMonth(int month);
    private void ScrollMonth(int month);
    private void AddYear(int year);
    private int CalculateMonthDelta(DateTime startDate, DateTime endDate);
    private void MultiplySelect(DateTime date, ModifierKeys modifiers);
    private bool IsStoryboardActive(Storyboard sb);
    private int GetFocusCellIndex();
    private void SetKeyboardfocus(int index, ArrayList cellsCollection, ModifierKeys modifierKeys, Key key, DayGrid currentDayGrid);
    private int ValidateFocusIndex();
    private int SetFocusedCellIndex(int oldValue, int direction, Orientation orientation, Boolean& moved);
    private void CoerceVisibleData(Calendar calendar);
    private void SetCorrectDate();
    public virtual void OnDatesCollectionChanged(DependencyPropertyChangedEventArgs e);
    private void InitializeGrid();
    private List`1<DateTime> GetDateRange(DateTime StartingDate, DateTime EndingDate);
    private void ProcessSelectedDatesCollectionChange(NotifyCollectionChangedEventArgs e);
    internal CalendarEditGrid FindCurrentGrid(CalendarVisualMode mode);
    private void UpdateSelectedDatesList();
    private void ProcessSelection(DateTime newDate);
    private void OnDayCellClick(DayCell sender, ChangeMonthMode mode, ModifierKeys modifiers);
    private void UpdateCellClickedValue();
    private void OnYearCellClick(YearCell sender);
    private void OnYearRangeCellClick(YearRangeCell sender);
    private void OnMonthCellClick(MonthCell sender);
    private void OnWeekNumbersCellClick(WeekNumberCell sender);
    private void UpdateVisibleData();
    private bool IsAnimationRequired();
    private void TodayButton_Click(object sender, RoutedEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnStylusButtonUp(StylusButtonEventArgs e);
    protected virtual void OnStylusDown(StylusDownEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    public virtual void OnApplyTemplate();
    private void PrevButtonUpdate();
    private void M_prevButton_PreviewTouchDown(object sender, TouchEventArgs e);
    private void M_prevButton_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void NextButtonUpdate();
    private void M_nextButton_PreviewTouchDown(object sender, TouchEventArgs e);
    private void M_nextButton_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void AddMonthButtonsEvents();
    private void DeleteMonthButtonsEvents();
    private void ApplyWeekNumbersTemplate();
    private void ApplyWeekNumbersForYearTemplate();
    private void ApplyYearEditingTemplate();
    private void ApplyEditMonthTemplate();
    private bool IsYearSelectionInStandardStyle();
    private void SetEditMonthText();
    private StackPanel GetYearUpDownPanel();
    private UpDown GetYearUpDown();
    private void MonthButton1_MouseLeave(object sender, MouseEventArgs e);
    private void UpDownPanel_MouseLeave(object sender, MouseEventArgs e);
    private void MonthButton1_MouseEnter(object sender, MouseEventArgs e);
    private void Timer_Tick(object sender, EventArgs e);
    private bool IsUpDownPanelVisible();
    private ContentPresenter GetWeekNumbersContainer();
    private ContentPresenter GetWeekNumbersPanelCurrent();
    private ContentPresenter GetWeekNumbersPanelFollow();
    private Grid GetMainGrid();
    private void UpdateSelectionBorderBrush();
    protected virtual void FireYearRangeCellMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void FireYearRangeCellMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void FireYearCellMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void FireYearCellMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void FireMonthCellMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void FireMonthCellMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void FireDayCellMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void FireWeekNumberCellMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void FireWeekNumberCellPanelMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void FireDayCellMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void FireDayNameCellMouseLeftButtonDown(MouseButtonEventArgs e);
    private void MonthButton_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    internal CalendarVisualMode GetNextValue(CalendarVisualMode mode);
    internal CalendarVisualMode GetPreviousValue(CalendarVisualMode mode);
    internal bool IsFlagValueSet(CalendarVisualMode mode);
    internal bool HasFlag(Enum variable, Enum value);
    private void VisualModeStoryboard_OnCompleted(object sender, EventArgs e);
    private void MoveStoryboard_Completed(object sender, EventArgs e);
    private void Popup_OnHidePopup(object sender, HidePopupEventArgs e);
    private void NavigateButton_OnMouseEnter(object sender, MouseEventArgs e);
    private void DayGrid_OnKeyDown(object sender, KeyEventArgs e);
    private void VisualModeGrid_OnKeyDown(object sender, KeyEventArgs e);
    private void ProcessUpKey();
    private void ProcessPageUpKey();
    private void ProcessPageDownKey();
    private int ProcessHomeKey(CalendarEditGrid currentGrid, int previousSelectedIndex);
    private int ProcessEndKey(CalendarEditGrid currentGrid, int previousSelectedIndex);
    private void ProcessViewNavigation(Cell cell);
    private int CenturyOfDate(DateTime date, Calendar calendar);
    private int DecadeOfDate(DateTime date, Calendar calendar);
    private int GetPreviousSelectedCell(CalendarEditGrid currentGrid, int previousCell);
    private bool ProcesssGridNavigation(Cell cell, Key key);
    private bool ValidateCurrentCell(Cell cell);
    private void YearRangeCell_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void HandleYearRangeCellUp(YearRangeCell releasedCell);
    internal bool CanScrollToView();
    private void YearRangeCell_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void YearCell_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void HandleYearCellUp(YearCell releasedCell);
    private void YearCell_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void MonthCell_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void HandleMonthCellUp(MonthCell releasedCell);
    private void MonthCell_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void HandleMonthCellDown(MonthCell currentCell);
    private void WeekNumberCell_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void HandleWeekNumberCellDown(WeekNumberCell currentCell, TextBlock weekNumberBlock);
    private void WeekNumberCellPanel_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void HandleWeekNumberCellPanelDown(WeekNumberCellPanel weekNumberCellPanel);
    internal int GetMonth(int Year, int Week);
    private void OnWeekNumberCellPanelClick(WeekNumberCellPanel sender);
    private void DayCell_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void HandleDayCellDown(DayCell currentCell);
    private void DayCell_OnMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void HandleDayCellUp(DayCell releasedCell);
    private void DayNameCell_OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void HandleDayNameCellDown(UIElement DayNameCell);
    private void DayNamesGrid_OnMouseLeave(object sender, MouseEventArgs e);
    private void DayNamesGrid_OnMouseMove(object sender, MouseEventArgs e);
    private void DayGrid_OnMouseMove(object sender, MouseEventArgs e);
    private void SelectedDates_OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void DateStyles_OnPropertyChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void DateDataTemplates_OnPropertyChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void UpdateWeekNumbersContainer();
    public void NextCommandExecute(object sender, ExecutedRoutedEventArgs e);
    public void NextCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    public void PrevCommandExecute(object sender, ExecutedRoutedEventArgs e);
    public void PrevCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    public void UpCommandExecute(object sender, ExecutedRoutedEventArgs e);
    public void UpCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    protected virtual void OnManipulationDelta(ManipulationDeltaEventArgs e);
    private void monthButton_StylusDown(object sender, StylusDownEventArgs e);
    private void HandleHeaderButtonDown();
    private void DayGrid_StylusMove(object sender, StylusEventArgs e);
    private void DayGrid_StylusUp(object sender, StylusEventArgs e);
    private void DayGrid_StylusSystemGesture(object sender, StylusSystemGestureEventArgs e);
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public Calendar get_Calendar();
    public void set_Calendar(Calendar value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public CalendarStyle get_CalendarStyle();
    public void set_CalendarStyle(CalendarStyle value);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public DatesCollection get_SelectedDates();
    public void set_SelectedDates(DatesCollection value);
    public BlackDatesCollection get_BlackoutDates();
    public void set_BlackoutDates(BlackDatesCollection value);
    public SpecialDatesCollection get_SpecialDates();
    public void set_SpecialDates(SpecialDatesCollection value);
    private static void OnSpecialDatesCollectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_SelectionBorderBrush();
    public void set_SelectionBorderBrush(Brush value);
    public Brush get_InValidDateBorderBrush();
    public void set_InValidDateBorderBrush(Brush value);
    public Brush get_InValidDateForeGround();
    public void set_InValidDateForeGround(Brush value);
    public Brush get_InValidDateBackground();
    public void set_InValidDateBackground(Brush value);
    public Brush get_InValidDateCrossBackground();
    public void set_InValidDateCrossBackground(Brush value);
    public Brush get_BlackoutDatesBorderBrush();
    public void set_BlackoutDatesBorderBrush(Brush value);
    public Brush get_BlackoutDatesForeground();
    public void set_BlackoutDatesForeground(Brush value);
    public Brush get_BlackoutDatesBackground();
    public void set_BlackoutDatesBackground(Brush value);
    public Brush get_BlackoutDatesCrossBrush();
    public void set_BlackoutDatesCrossBrush(Brush value);
    public Brush get_SelectionForeground();
    public void set_SelectionForeground(Brush value);
    public Brush get_WeekNumberSelectionBorderBrush();
    public void set_WeekNumberSelectionBorderBrush(Brush value);
    public Thickness get_WeekNumberSelectionBorderThickness();
    public void set_WeekNumberSelectionBorderThickness(Thickness value);
    public Thickness get_WeekNumberBorderThickness();
    public void set_WeekNumberBorderThickness(Thickness value);
    public CornerRadius get_WeekNumberSelectionBorderCornerRadius();
    public void set_WeekNumberSelectionBorderCornerRadius(CornerRadius value);
    public Brush get_WeekNumberBackground();
    public void set_WeekNumberBackground(Brush value);
    public Brush get_MouseOverBorderBrush();
    public void set_MouseOverBorderBrush(Brush value);
    public Brush get_NotCurrentMonthForeground();
    public void set_NotCurrentMonthForeground(Brush value);
    public Brush get_MouseOverForeground();
    public void set_MouseOverForeground(Brush value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public Brush get_SelectedDayCellBorderBrush();
    public void set_SelectedDayCellBorderBrush(Brush value);
    public Brush get_SelectedDayCellBackground();
    public void set_SelectedDayCellBackground(Brush value);
    public Brush get_SelectedDayCellHoverBackground();
    public void set_SelectedDayCellHoverBackground(Brush value);
    public Brush get_TodayCellBorderBrush();
    public void set_TodayCellBorderBrush(Brush value);
    public Brush get_TodayCellBackground();
    public void set_TodayCellBackground(Brush value);
    public Brush get_TodayCellForeground();
    public void set_TodayCellForeground(Brush value);
    public Brush get_TodayCellSelectedBorderBrush();
    public void set_TodayCellSelectedBorderBrush(Brush value);
    public Brush get_TodayCellSelectedBackground();
    public void set_TodayCellSelectedBackground(Brush value);
    public Brush get_SelectedDayCellForeground();
    public void set_SelectedDayCellForeground(Brush value);
    public Brush get_WeekNumberForeground();
    public void set_WeekNumberForeground(Brush value);
    public Brush get_WeekNumberBorderBrush();
    public void set_WeekNumberBorderBrush(Brush value);
    public Brush get_WeekNumberHoverBorderBrush();
    public void set_WeekNumberHoverBorderBrush(Brush value);
    public Brush get_WeekNumberSelectionBackground();
    public void set_WeekNumberSelectionBackground(Brush value);
    public Brush get_WeekNumberHoverBackground();
    public void set_WeekNumberHoverBackground(Brush value);
    public Brush get_WeekNumberHoverForeground();
    public void set_WeekNumberHoverForeground(Brush value);
    public Brush get_WeekNumberSelectionForeground();
    public void set_WeekNumberSelectionForeground(Brush value);
    public CornerRadius get_SelectionBorderCornerRadius();
    public void set_SelectionBorderCornerRadius(CornerRadius value);
    public CornerRadius get_WeekNumberCornerRadius();
    public void set_WeekNumberCornerRadius(CornerRadius value);
    public bool get_AllowSelection();
    public void set_AllowSelection(bool value);
    public bool get_AllowMultiplySelection();
    public void set_AllowMultiplySelection(bool value);
    public bool get_IsTodayButtonClicked();
    public void set_IsTodayButtonClicked(bool value);
    public bool get_IsDayNamesAbbreviated();
    public void set_IsDayNamesAbbreviated(bool value);
    public bool get_ShowAbbreviatedDayNames();
    public void set_ShowAbbreviatedDayNames(bool value);
    public bool get_IsMonthNameAbbreviated();
    public void set_IsMonthNameAbbreviated(bool value);
    public bool get_ShowAbbreviatedMonthNames();
    public void set_ShowAbbreviatedMonthNames(bool value);
    public bool get_IsShowWeekNumbers();
    public void set_IsShowWeekNumbers(bool value);
    public bool get_ShowWeekNumbers();
    public void set_ShowWeekNumbers(bool value);
    public bool get_IsShowWeekNumbersGrid();
    public void set_IsShowWeekNumbersGrid(bool value);
    public bool get_IsAllowYearSelection();
    public void set_IsAllowYearSelection(bool value);
    public bool get_AllowYearEditing();
    public void set_AllowYearEditing(bool value);
    public bool get_ShowPreviousMonthDays();
    public void set_ShowPreviousMonthDays(bool value);
    public bool get_ShowNextMonthDays();
    public void set_ShowNextMonthDays(bool value);
    public SelectionRangeMode get_SelectionRangeMode();
    public void set_SelectionRangeMode(SelectionRangeMode value);
    public int get_FrameMovingTime();
    public void set_FrameMovingTime(int value);
    public int get_ChangeModeTime();
    public void set_ChangeModeTime(int value);
    public AnimationDirection get_MonthChangeDirection();
    public void set_MonthChangeDirection(AnimationDirection value);
    public DataTemplate get_DayNameCellsDataTemplate();
    public void set_DayNameCellsDataTemplate(DataTemplate value);
    public ControlTemplate get_PreviousScrollButtonTemplate();
    public void set_PreviousScrollButtonTemplate(ControlTemplate value);
    public ControlTemplate get_NextScrollButtonTemplate();
    public void set_NextScrollButtonTemplate(ControlTemplate value);
    public DataTemplate get_DayCellsDataTemplate();
    public void set_DayCellsDataTemplate(DataTemplate value);
    public Style get_DayCellsStyle();
    public void set_DayCellsStyle(Style value);
    public Style get_DayNameCellsStyle();
    public void set_DayNameCellsStyle(Style value);
    public DataTemplateSelector get_DayCellsDataTemplateSelector();
    public void set_DayCellsDataTemplateSelector(DataTemplateSelector value);
    public DataTemplateSelector get_DayNameCellsDataTemplateSelector();
    public void set_DayNameCellsDataTemplateSelector(DataTemplateSelector value);
    public DataTemplatesDictionary get_DateDataTemplates();
    public void set_DateDataTemplates(DataTemplatesDictionary value);
    public StylesDictionary get_DateStyles();
    public void set_DateStyles(StylesDictionary value);
    public bool get_DisableDateSelection();
    public void set_DisableDateSelection(bool value);
    public bool get_ScrollToDateEnabled();
    public void set_ScrollToDateEnabled(bool value);
    protected internal DayNamesGrid get_DayNamesGrid();
    protected internal void set_DayNamesGrid(DayNamesGrid value);
    protected internal WeekNumbersGrid get_WeekNumbersGrid();
    protected internal void set_WeekNumbersGrid(WeekNumbersGrid value);
    protected internal DayGrid get_CurrentDayGrid();
    protected internal void set_CurrentDayGrid(DayGrid value);
    protected internal DayGrid get_FollowingDayGrid();
    protected internal void set_FollowingDayGrid(DayGrid value);
    protected internal MonthGrid get_CurrentMonthGrid();
    protected internal void set_CurrentMonthGrid(MonthGrid value);
    protected internal YearGrid get_CurrentYearGrid();
    protected internal void set_CurrentYearGrid(YearGrid value);
    protected internal YearRangeGrid get_CurrentYearRangeGrid();
    protected internal void set_CurrentYearRangeGrid(YearRangeGrid value);
    protected internal WeekNumberGridPanel get_CurrentWeekNumbersGrid();
    protected internal void set_CurrentWeekNumbersGrid(WeekNumberGridPanel value);
    protected internal WeekNumberGridPanel get_FollowingWeekNumbersGrid();
    protected internal void set_FollowingWeekNumbersGrid(WeekNumberGridPanel value);
    protected internal MonthGrid get_FollowingMonthGrid();
    protected internal void set_FollowingMonthGrid(MonthGrid value);
    protected internal YearGrid get_FollowingYearGrid();
    protected internal void set_FollowingYearGrid(YearGrid value);
    protected internal YearRangeGrid get_FollowingYearRangeGrid();
    protected internal void set_FollowingYearRangeGrid(YearRangeGrid value);
    public DateTime get_MinDate();
    public void set_MinDate(DateTime value);
    public DateTime get_MaxDate();
    public void set_MaxDate(DateTime value);
    protected internal VisibleDate get_VisibleData();
    protected internal void set_VisibleData(VisibleDate value);
    public Brush get_HeaderForeground();
    public void set_HeaderForeground(Brush value);
    public Brush get_HeaderBackground();
    public void set_HeaderBackground(Brush value);
    public string get_TodayDate();
    private void set_TodayDate(string value);
    public bool get_TodayRowIsVisible();
    public void set_TodayRowIsVisible(bool value);
    public bool get_MinMaxHidden();
    public void set_MinMaxHidden(bool value);
    private static void OnCalendarChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnCalendarStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnCultureChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnAllowSelectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnAllowMultiplySelectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnShowAbbreviatedMonthNamesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsTodayButtonClickedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectionRangeModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectionBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnBlackoutDatesBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnBlackoutDatesBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnBlackoutDatesForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnBlackoutDatesForegroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnBlackoutDatesBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnBlackoutDatesBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnBlackoutDatesCrossBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void BlackoutDatesCrossBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnMouseOverBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMouseOverForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMouseOverBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedDayCellBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedDayCellHoverBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTodayCellBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTodayCellForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTodayCellBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTodayCellSelectedBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTodayCellSelectedBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnNotCurrentMonthForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedDayCellBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedDayCellForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectionForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberSelectionBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberSelectionBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberSelectionBorderCornerRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberHoverBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberHoverBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberSelectionBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberCornerRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberSelectionForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnWeekNumberHoverForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectionBorderCornerRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnFrameMovingTimeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnChangeModeTimeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMonthChangeDirectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnShowAbbreviatedDayNamesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDayNameCellsDataTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnPreviousScrollButtonTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnNextScrollButtonTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDayCellsDataTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDayCellsStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDayNameCellsStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDayCellsDataTemplateSelectorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDayNameCellsDataTemplateSelectorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDateDataTemplatesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnShowWeekNumbersChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnShowWeekNumbersGridChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnAllowYearEditingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnShowPreviousMonthDaysChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnShowNextMonthDaysChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnTodayRowIsVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMinMaxHiddenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMinDateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceMinDateProperty(DependencyObject sender, object data);
    private static void OnMaxDateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceMaxDateProperty(DependencyObject sender, object data);
    private static object OnCoerceVisibleData(DependencyObject d, object value);
    private static void OnVisibleDataChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnVisualModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnScrollToDateEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDateStylesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDisableDateSelectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnDatesCollectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnBlackDatesCollectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object OnCoerceDate(DependencyObject d, object value);
    protected virtual void OnShowWeekNumbersChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnShowWeekNumbersGridChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnAllowYearSelectionChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnShowPreviousMonthDaysChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnShowNextMonthDaysChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnTodayRowIsVisibleChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinMaxHiddenChanged(DependencyPropertyChangedEventArgs e);
    protected virtual VisibleDate OnCoerceVisibleData(object obj);
    protected virtual void OnVisibleDataChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnScrollToDateEnabledChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnVisualModeChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDateStylesChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDisableDateSelectionChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnCalendarChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnCalendarStyleChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnCultureChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDateChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnAllowSelectionChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectionRangeModeChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectionBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectionForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMouseOverBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMouseOverBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMouseOverForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectedDayCellBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectedDayCellHoverBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnTodayCellBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnTodayCellForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnTodayCellBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnTodayCellSelectedBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnTodayCellSelectedBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnNotCurrentMonthForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectedDayCellBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectedDayCellForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberSelectionBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberSelectionBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberSelectionBorderCornerRadiusChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberCornerRadiusChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberSelectionBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberHoverBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberHoverBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberSelectionForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnWeekNumberHoverForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnSelectionBorderCornerRadiusChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameMovingTimeChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnChangeModeTimeChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMonthChangeDirectionChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMonthNameAbbreviatedChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnIsTodayButtonClickedChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnAllowMultiplySelectionChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDayNamesAbbreviatedChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDayNameCellsDataTemplateChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnNextScrollButtonTemplateChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnPreviousScrollButtonTemplateChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDayCellsDataTemplateChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDayCellsStyleChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDayNameCellsStyleChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDayCellsDataTemplateSelectorChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDayNameCellsDataTemplateSelectorChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnDateDataTemplatesChanged(DependencyPropertyChangedEventArgs e);
    protected virtual DateTime OnCoerceDate(DateTime date);
    private void OnAnimationCompleted(object sender, EventArgs e);
    private void UpdateMinDate(DependencyPropertyChangedEventArgs e);
    private void VisibleDataToMinSupportedDate(DateTimeFormatInfo format);
    private void InitializePopup();
    private void InitVisibleDayGrid();
    private static void OnInValidDateBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnInValidDateForeGroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnInValidDateBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnInValidDateCrossBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsDayNamesAbbreviatedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsMonthNamesAbbreviatedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsShowWeekNumbersChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsAllowYearSelectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
[DesignTimeVisibleAttribute("False")]
public abstract class Syncfusion.Windows.Shared.CalendarEditGrid : Grid {
    private int mcolumnsCount;
    private int mrowsCount;
    private ArrayList mcellsCollection;
    private int mfocusedCellIndex;
    protected internal int FocusedCellIndex { get; protected internal set; }
    protected internal int RowsCount { get; protected internal set; }
    protected internal int ColumnsCount { get; protected internal set; }
    protected internal ArrayList CellsCollection { get; protected internal set; }
    public CalendarEditGrid(int rowsCount, int columnsCount);
    private void CalendarEditGrid_Loaded(object sender, RoutedEventArgs e);
    protected internal int get_FocusedCellIndex();
    protected internal void set_FocusedCellIndex(int value);
    protected internal int get_RowsCount();
    protected internal void set_RowsCount(int value);
    protected internal int get_ColumnsCount();
    protected internal void set_ColumnsCount(int value);
    protected internal ArrayList get_CellsCollection();
    protected internal void set_CellsCollection(ArrayList value);
    public virtual void SetIsSelected(VisibleDate date);
    public virtual void Initialize(VisibleDate date, CultureInfo culture, Calendar calendar);
    protected void AddToInnerGrid(UIElement element);
    protected abstract virtual Cell CreateCell();
    private void GenerateGrid();
    private void FillGrid();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public enum Syncfusion.Windows.Shared.CalendarStyle : Enum {
    public int value__;
    public static CalendarStyle Standard;
    public static CalendarStyle Vista;
}
[FlagsAttribute]
public enum Syncfusion.Windows.Shared.CalendarVisualMode : Enum {
    public int value__;
    public static CalendarVisualMode All;
    public static CalendarVisualMode WeekNumbers;
    public static CalendarVisualMode Days;
    public static CalendarVisualMode Months;
    public static CalendarVisualMode Years;
    public static CalendarVisualMode YearsRange;
}
public class Syncfusion.Windows.Shared.Carousel : ItemsControl {
    private static RoutedCommand selectFirstItemCommand;
    private static RoutedCommand selectLastItemCommand;
    private static RoutedCommand selectNextItemCommand;
    private static RoutedCommand selectPreviousItemCommand;
    private static RoutedCommand selectNextPageCommand;
    private static RoutedCommand selectPreviousPageCommand;
    private bool IsVisualChanged;
    private Panel _itemsHost;
    private ScrollBar horizontalScrollBar;
    private ScrollBar verticalScrollBar;
    internal CarouselItem previousSelected;
    internal bool isNextPage;
    internal bool isPreviousPage;
    public static DependencyProperty SkewAngleXFractionProperty;
    public static DependencyProperty SkewAngleYFractionProperty;
    public static DependencyProperty EnableLoopingProperty;
    public static DependencyProperty ItemsPerPageProperty;
    public static DependencyProperty ScaleFractionsProperty;
    public static DependencyProperty ScalingEnabledProperty;
    public static DependencyProperty OpacityEnabledProperty;
    public static DependencyProperty OpacityFractionsProperty;
    public static DependencyProperty SkewAngleXEnabledProperty;
    public static DependencyProperty SkewAngleXFractionsProperty;
    public static DependencyProperty SkewAngleYEnabledProperty;
    public static DependencyProperty SkewAngleYFractionsProperty;
    public static DependencyProperty RadiusXProperty;
    public static DependencyProperty RadiusYProperty;
    public static DependencyProperty OpacityFractionProperty;
    public static DependencyProperty ScaleFractionProperty;
    public static DependencyProperty RotationAngleProperty;
    public static DependencyProperty RotationSpeedProperty;
    public static DependencyProperty EnableRotationAnimationProperty;
    public static DependencyProperty TopItemPositionProperty;
    public static DependencyProperty PathProperty;
    public static DependencyProperty EnableVirtualizationProperty;
    public static DependencyProperty SelectedItemProperty;
    public static DependencyProperty SelectedValueProperty;
    public static DependencyProperty SelectedIndexProperty;
    public static DependencyProperty VisualModeProperty;
    public static DependencyProperty EnableTouchProperty;
    private PropertyChangedCallback SelectionChanged;
    private PropertyChangedCallback SelectedIndexChanged;
    private PropertyChangedCallback SelectedValueChanged;
    private Nullable`1<Point> swipestart;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate15;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate17;
    public double SkewAngleXFraction { get; public set; }
    public double SkewAngleYFraction { get; public set; }
    public bool EnableLooping { get; public set; }
    public int ItemsPerPage { get; public set; }
    public PathFractionCollection ScaleFractions { get; public set; }
    public bool ScalingEnabled { get; public set; }
    public bool OpacityEnabled { get; public set; }
    public PathFractionCollection OpacityFractions { get; public set; }
    public bool SkewAngleXEnabled { get; public set; }
    public PathFractionCollection SkewAngleXFractions { get; public set; }
    public bool SkewAngleYEnabled { get; public set; }
    public PathFractionCollection SkewAngleYFractions { get; public set; }
    public double RadiusX { get; public set; }
    public double RadiusY { get; public set; }
    public double OpacityFraction { get; public set; }
    public double ScaleFraction { get; public set; }
    public double RotationAngle { get; public set; }
    public double RotationSpeed { get; public set; }
    public bool EnableRotationAnimation { get; public set; }
    public double TopItemPosition { get; public set; }
    public Path Path { get; public set; }
    public bool EnableVirtualization { get; public set; }
    public object SelectedItem { get; public set; }
    public object SelectedValue { get; public set; }
    public int SelectedIndex { get; public set; }
    public VisualMode VisualMode { get; public set; }
    public bool EnableTouch { get; public set; }
    internal Panel ItemsHost { get; }
    internal Panel HostPanel { get; }
    public static RoutedCommand SelectFirstItemCommand { get; internal set; }
    public static RoutedCommand SelectLastItemCommand { get; internal set; }
    public static RoutedCommand SelectNextItemCommand { get; internal set; }
    public static RoutedCommand SelectPreviousItemCommand { get; internal set; }
    public static RoutedCommand SelectNextPageCommand { get; internal set; }
    public static RoutedCommand SelectPreviousPageCommand { get; internal set; }
    private static Carousel();
    public double get_SkewAngleXFraction();
    public void set_SkewAngleXFraction(double value);
    public double get_SkewAngleYFraction();
    public void set_SkewAngleYFraction(double value);
    public bool get_EnableLooping();
    public void set_EnableLooping(bool value);
    public int get_ItemsPerPage();
    public void set_ItemsPerPage(int value);
    public PathFractionCollection get_ScaleFractions();
    public void set_ScaleFractions(PathFractionCollection value);
    public bool get_ScalingEnabled();
    public void set_ScalingEnabled(bool value);
    public bool get_OpacityEnabled();
    public void set_OpacityEnabled(bool value);
    public PathFractionCollection get_OpacityFractions();
    public void set_OpacityFractions(PathFractionCollection value);
    public bool get_SkewAngleXEnabled();
    public void set_SkewAngleXEnabled(bool value);
    public PathFractionCollection get_SkewAngleXFractions();
    public void set_SkewAngleXFractions(PathFractionCollection value);
    public bool get_SkewAngleYEnabled();
    public void set_SkewAngleYEnabled(bool value);
    public PathFractionCollection get_SkewAngleYFractions();
    public void set_SkewAngleYFractions(PathFractionCollection value);
    public double get_RadiusX();
    public void set_RadiusX(double value);
    public double get_RadiusY();
    public void set_RadiusY(double value);
    public double get_OpacityFraction();
    public void set_OpacityFraction(double value);
    public double get_ScaleFraction();
    public void set_ScaleFraction(double value);
    public double get_RotationAngle();
    public void set_RotationAngle(double value);
    public double get_RotationSpeed();
    public void set_RotationSpeed(double value);
    public bool get_EnableRotationAnimation();
    public void set_EnableRotationAnimation(bool value);
    public double get_TopItemPosition();
    public void set_TopItemPosition(double value);
    public Path get_Path();
    public void set_Path(Path value);
    public bool get_EnableVirtualization();
    public void set_EnableVirtualization(bool value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public object get_SelectedValue();
    public void set_SelectedValue(object value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public VisualMode get_VisualMode();
    public void set_VisualMode(VisualMode value);
    public bool get_EnableTouch();
    public void set_EnableTouch(bool value);
    internal Panel get_ItemsHost();
    internal Panel get_HostPanel();
    public static RoutedCommand get_SelectFirstItemCommand();
    internal static void set_SelectFirstItemCommand(RoutedCommand value);
    public static RoutedCommand get_SelectLastItemCommand();
    internal static void set_SelectLastItemCommand(RoutedCommand value);
    public static RoutedCommand get_SelectNextItemCommand();
    internal static void set_SelectNextItemCommand(RoutedCommand value);
    public static RoutedCommand get_SelectPreviousItemCommand();
    internal static void set_SelectPreviousItemCommand(RoutedCommand value);
    public static RoutedCommand get_SelectNextPageCommand();
    internal static void set_SelectNextPageCommand(RoutedCommand value);
    public static RoutedCommand get_SelectPreviousPageCommand();
    internal static void set_SelectPreviousPageCommand(RoutedCommand value);
    public void add_SelectionChanged(PropertyChangedCallback value);
    public void remove_SelectionChanged(PropertyChangedCallback value);
    public void add_SelectedIndexChanged(PropertyChangedCallback value);
    public void remove_SelectedIndexChanged(PropertyChangedCallback value);
    public void add_SelectedValueChanged(PropertyChangedCallback value);
    public void remove_SelectedValueChanged(PropertyChangedCallback value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public virtual void OnApplyTemplate();
    private static void OnFractionChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnPathChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnEnableLoopingChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnRationAngleChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void OnSelectedItemChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static object CoerceSelectedIndex(DependencyObject d, object baseValue);
    public void SelectFirstItem();
    public void SelectLastItem();
    public void SelectNextItem();
    public void SelectPreviousItem();
    public void SelectNextPage();
    public void SelectPreviousPage();
    public sealed virtual void Dispose();
    internal int CoerceItemsPerPageValue(int itemsPerPage);
    protected void OnItemsPerPageChanged(DependencyObject obj);
    protected void OnTopItemPositionChanged(DependencyObject obj);
    protected void OnItemsVisualChanged(DependencyObject obj);
    protected void OnSelectedItemChanged(DependencyPropertyChangedEventArgs args);
    protected void OnSelectedValueChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void OnSelectedIndexChanged(DependencyPropertyChangedEventArgs args);
    private void Carousel_LayoutUpdated(object sender, EventArgs e);
    private void SetSelectedItem();
    private void UpdateLargeChangeValue();
    private void SetVisualProperties();
    private void OnFractionCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void OnFractionValuePropertyChanged();
    private void CanSelectFirstItem(object sender, CanExecuteRoutedEventArgs e);
    private void SelectFirstItem(object sender, ExecutedRoutedEventArgs e);
    private void CanSelectLastItem(object sender, CanExecuteRoutedEventArgs e);
    private void SelectLastItem(object sender, ExecutedRoutedEventArgs e);
    private void CanSelectNextItem(object sender, CanExecuteRoutedEventArgs e);
    private void SelectNextItem(object sender, ExecutedRoutedEventArgs e);
    private void CanSelectPreviousItem(object sender, CanExecuteRoutedEventArgs e);
    private void SelectPreviousItem(object sender, ExecutedRoutedEventArgs e);
    private void CanSelectNextPage(object sender, CanExecuteRoutedEventArgs e);
    private void SelectNextPage(object sender, ExecutedRoutedEventArgs e);
    private void CanSelectPreviousPage(object sender, CanExecuteRoutedEventArgs e);
    private void SelectPreviousPage(object sender, ExecutedRoutedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__1(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__8(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__9(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__a(DependencyObject s, DependencyPropertyChangedEventArgs a);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__b(DependencyObject s, DependencyPropertyChangedEventArgs a);
}
public class Syncfusion.Windows.Shared.CarouselItem : ContentControl {
    private Nullable`1<Point> swipestart;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty OwnerProperty;
    public bool IsSelected { get; public set; }
    public Carousel Owner { get; public set; }
    private static CarouselItem();
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public Carousel get_Owner();
    public void set_Owner(Carousel value);
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    private static void OnIsSelectedChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.Windows.Shared.CarouselPanel : Canvas {
    private static double C_DEFAULT_ROTATION_SPEED;
    private static double C_MINIMUM_ROTATION_SPEED;
    private static double C_MAXIMUM_ROTATION_SPEED;
    private static double C_DEFAULT_FADE;
    private static double C_MINIMUM_FADE;
    private static double C_MAXIMUM_FADE;
    private static double C_DEFAULT_SCALE;
    private static double C_MINIMUM_SCALE;
    private static double C_MAXIMUM_SCALE;
    private static double INTERNAL_SCALE_COEFFICIENT;
    private double rotationDiff;
    protected double X_SCALE;
    protected double Y_SCALE;
    protected double _targetRotation;
    protected internal DispatcherTimer _timer;
    internal int currentIndex;
    internal double _rotationToGo;
    internal double _currentRotation;
    public static DependencyProperty ScaleFractionProperty;
    public static DependencyProperty OpacityFractionProperty;
    internal static DependencyProperty SkewAngleXFractionProperty;
    internal static DependencyProperty SkewAngleYFractionProperty;
    public static DependencyProperty RotationSpeedProperty;
    public static DependencyProperty EnableRotationAnimationProperty;
    public static DependencyProperty RadiusXProperty;
    public static DependencyProperty RadiusYProperty;
    internal static DependencyProperty ScalingEnabledProperty;
    internal static DependencyProperty OpacityEnabledProperty;
    internal static DependencyProperty SkewAngleXEnabledProperty;
    internal static DependencyProperty SkewAngleYEnabledProperty;
    public double ScaleFraction { get; public set; }
    public double OpacityFraction { get; public set; }
    internal double SkewAngleXFraction { get; internal set; }
    internal double SkewAngleYFraction { get; internal set; }
    public double RotationSpeed { get; public set; }
    public bool EnableRotationAnimation { get; public set; }
    public double RadiusX { get; public set; }
    public double RadiusY { get; public set; }
    internal bool ScalingEnabled { get; internal set; }
    internal bool OpacityEnabled { get; internal set; }
    internal bool SkewAngleXEnabled { get; internal set; }
    internal bool SkewAngleYEnabled { get; internal set; }
    private double RotationAmount { get; }
    private static CarouselPanel();
    public double get_ScaleFraction();
    public void set_ScaleFraction(double value);
    public double get_OpacityFraction();
    public void set_OpacityFraction(double value);
    internal double get_SkewAngleXFraction();
    internal void set_SkewAngleXFraction(double value);
    internal double get_SkewAngleYFraction();
    internal void set_SkewAngleYFraction(double value);
    public double get_RotationSpeed();
    public void set_RotationSpeed(double value);
    public bool get_EnableRotationAnimation();
    public void set_EnableRotationAnimation(bool value);
    public double get_RadiusX();
    public void set_RadiusX(double value);
    public double get_RadiusY();
    public void set_RadiusY(double value);
    internal bool get_ScalingEnabled();
    internal void set_ScalingEnabled(bool value);
    internal bool get_OpacityEnabled();
    internal void set_OpacityEnabled(bool value);
    internal bool get_SkewAngleXEnabled();
    internal void set_SkewAngleXEnabled(bool value);
    internal bool get_SkewAngleYEnabled();
    internal void set_SkewAngleYEnabled(bool value);
    private double get_RotationAmount();
    protected virtual void OnInitialized(EventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private static object CoerceScaleFractions(DependencyObject sender, object obj);
    private static void OnScaleFractionChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static object CoerceOpacityFractions(DependencyObject sender, object obj);
    private static void OnOpacityFractionChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static object CoerceRotateSpeed(DependencyObject sender, object obj);
    private static void OnRotationSpeedChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    internal static double GetFrontElementSpace(double currentRotation, int targetIndex, int totalNumberOfElements);
    public void SelectElement(FrameworkElement element);
    [ObsoleteAttribute("GetSelecteItem is deprecated, please use GetSelectedItem instead.")]
public int GetSelecteItem(FrameworkElement element);
    public int GetSelectedItem(FrameworkElement element);
    internal void SelectElement(FrameworkElement element, bool forward, bool backward);
    internal double SetDegrees(double rawDegrees);
    internal void Rotate(double numberOfDegrees);
    protected void SetOpacity(FrameworkElement element, double degrees);
    protected int GetZValue(double degrees);
    protected double GetScaledSize(double degrees);
    protected virtual void TimerTick(object sender, EventArgs e);
    private void CarouselPanel_Loaded(object sender, RoutedEventArgs e);
    private double CoerceRadius(double radius, double distance, double itemLength);
    private double RadsConvert(double degrees);
    private double GetCoefficient(double degrees);
    private void MoveToItem(FrameworkElement element, bool forward, bool backward);
}
internal class Syncfusion.Windows.Shared.CarouselPanelHelper : object {
    private CustomPathCarouselPanel carouselPanel;
    public int ItemsCount { get; }
    public int PageSize { get; }
    public int Position { get; }
    public CarouselPanelHelper(CustomPathCarouselPanel panel);
    public int get_ItemsCount();
    public int get_PageSize();
    public int get_Position();
    public int ItemCount();
    private ItemsControl ParentItem();
}
internal static class Syncfusion.Windows.Shared.CarouselPanelHelperMethods : object {
    public static Path GetPath();
    public static PathFractionCollection GetDefaultFractionsCollection(double fraction);
    internal static int GetItemCountlater(PathFractionRangeHandler range, int itemCount);
    internal static int GetItemCountBefore(PathFractionRangeHandler range);
    public static bool IsInRange(int value, int min, int max);
    public static int CoerceRangeValues(int value, int min, int max);
}
internal class Syncfusion.Windows.Shared.CarouselPathHelper : object {
    private Path _CarouselPath;
    private PathGeometry _Geometry;
    private PathFractions[] _PathFractions;
    internal PathFractions topElementPathFraction;
    internal CustomPathCarouselPanel customPathCarouselPanel;
    public Path CarouselPath { get; public set; }
    public PathGeometry Geometry { get; public set; }
    public PathFractions[] PathFractions { get; }
    public int TopElementPathFractionIndex { get; }
    public double TopElementPathFraction { get; }
    public CarouselPathHelper(Path Path, int ItemsPerPage);
    public Path get_CarouselPath();
    public void set_CarouselPath(Path value);
    public PathGeometry get_Geometry();
    public void set_Geometry(PathGeometry value);
    public PathFractions[] get_PathFractions();
    public int get_TopElementPathFractionIndex();
    public double get_TopElementPathFraction();
    public void SetTopElementPathFraction(PathFractions desiredPathFraction);
    public PathFractions NearestPathFractionAtLeft(double pathFraction);
    public static int NearestPathFractionAtLeft(PathFractions[] _pathfractions, double pathFraction);
    private static int FindNearestPathFractionIndex(double pathFraction, PathFractions[] PathFractions);
    public PathFractions NearestPathFractionAtRight(double pathFraction);
    public static int NearestPathFractionAtRight(PathFractions[] _pathFractions, double pathFraction);
    private bool IsPathFractionDifferentFromStartAndEndFractions(PathFractions _pathFraction);
    public bool IsPathFraction(double pathFraction);
    public static PathFractions[] PathFraction(int ItemsPerPage);
    internal void UpdateCustomPath(Size availablesize, Thickness padding, Size itemSize);
    private ScaleTransform ScaleCustomPathWithAvailableSize(Rect ViewPort, Rect GeometryBounds, Stretch Stretch);
    private static Rect ChangeGeometryBounds(Rect CurrentGeometryBounds, Matrix Transformation);
    private TranslateTransform ChangeCustomPathToAvailableSize(Rect ViewPort, Rect GeometryBounds);
    private static double CalculateHorizontalTransformation(HorizontalAlignment Alignment, double RemainingWidth);
    private static double CalculateVerticalTransformation(VerticalAlignment Alignment, double RemainHeight);
    public int GetPathFractionIndex(double pathFraction);
    public int GetVisiblePathFractionCount();
    public static bool IsVisible(double pathFraction);
    public int CompareCustomPathFractions(PathFractions x, PathFractions y);
    public PathFractions GetVisiblePathFraction(int index);
}
[DesignTimeVisibleAttribute("False")]
public abstract class Syncfusion.Windows.Shared.Cell : ContentControl {
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty IsInvalidDateProperty;
    private CornerRadius mcornerRadius;
    public CornerRadius CornerRadius { get; public set; }
    public bool IsSelected { get; public set; }
    public bool IsInvalidDate { get; public set; }
    private static Cell();
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_IsInvalidDate();
    public void set_IsInvalidDate(bool value);
}
internal class Syncfusion.Windows.Shared.CharacterProperties : object {
    private string _regExpression;
    private bool _isLiteral;
    private Nullable`1<bool> _isUpper;
    private Nullable`1<bool> _isPromptchar;
    private Nullable`1<bool> _isOptional;
    public string RegExpression { get; public set; }
    public bool IsLiteral { get; public set; }
    public Nullable`1<bool> IsUpper { get; public set; }
    public Nullable`1<bool> IsPromptCharacter { get; public set; }
    public Nullable`1<bool> IsOptional { get; public set; }
    public sealed virtual string get_RegExpression();
    public sealed virtual void set_RegExpression(string value);
    public sealed virtual bool get_IsLiteral();
    public sealed virtual void set_IsLiteral(bool value);
    public sealed virtual Nullable`1<bool> get_IsUpper();
    public sealed virtual void set_IsUpper(Nullable`1<bool> value);
    public sealed virtual Nullable`1<bool> get_IsPromptCharacter();
    public sealed virtual void set_IsPromptCharacter(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsOptional();
    public void set_IsOptional(Nullable`1<bool> value);
}
public enum Syncfusion.Windows.Shared.CheckIconType : Enum {
    public int value__;
    public static CheckIconType CheckBox;
    public static CheckIconType RadioButton;
    public static CheckIconType None;
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("False")]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.ChromelessWindow : Window {
    private static int HORZRES;
    private static int VERTRES;
    private static int LOGPIXELSX;
    private static int LOGPIXELSY;
    private bool dragIsIn;
    private bool m_dwmEnabled;
    private bool m_isSizing;
    private bool m_isInitialized;
    private TitleButton restButton;
    private TitleButton closeButton;
    internal bool updateNew;
    private TitleButton maxButton;
    private Border contentArea;
    private StackPanel panel;
    private TitleButton minButton;
    private Point m_lastTitlebarPoint;
    private DateTime m_lastIconClick;
    private Point m_lastIconPoint;
    private Image m_icon;
    private Image m_iconLeft;
    private IntPtr window_hwnd;
    private Label ResizeGrip;
    private Border resizeborder;
    private WindowState lastMenuState;
    private bool suspendLocationUpdate;
    private static double m_lastTitlebarPointXTemp;
    private bool flag;
    private bool iscustommaxhghtused;
    private bool iscustommaxwidthused;
    private Border borderMask;
    public static RoutedUICommand CloseWindow;
    public static RoutedUICommand ToggleMaximizedState;
    public static RoutedUICommand ToggleMinimizedState;
    public static DependencyProperty TitleTextAlignmentProperty;
    public static DependencyProperty IconAlignmentProperty;
    public static DependencyProperty ResizeGripStyleProperty;
    public static DependencyProperty ShowMaximizeButtonProperty;
    public static DependencyProperty ShowMinimizeButtonProperty;
    public static DependencyProperty UseNativeChromeProperty;
    internal static DependencyProperty IsGlassActiveProperty;
    public static DependencyProperty TitleBarTemplateProperty;
    public static DependencyProperty MaximizeButtonTemplateProperty;
    public static DependencyProperty MinimizeButtonTemplateProperty;
    public static DependencyProperty RestoreButtonTemplateProperty;
    public static DependencyProperty CloseButtonTemplateProperty;
    public static DependencyProperty LeftHeaderItemsSourceProperty;
    public static DependencyProperty RightHeaderItemsSourceProperty;
    public static DependencyProperty LeftHeaderItemTemplateProperty;
    public static DependencyProperty RightHeaderItemTemplateProperty;
    public static DependencyProperty ResizeBorderBrushProperty;
    public static DependencyProperty TitleBarBackgroundProperty;
    public static DependencyProperty TitleBarHeightProperty;
    public static DependencyProperty TitleFontSizeProperty;
    public static DependencyProperty TitleBarForegroundProperty;
    public static DependencyProperty NavigationBarBackgroundProperty;
    public static DependencyProperty WindowContentAreaBorderBrushProperty;
    public static DependencyProperty ResizeBorderThicknessProperty;
    public static DependencyProperty WindowCornerRadiusProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ShowIconProperty;
    public static DependencyProperty ShowTitleProperty;
    public static DependencyProperty HideTaskBarProperty;
    private static DependencyProperty WindowSizePropertyDescriptor;
    private PropertyChangedCallback IsGlassActiveChanged;
    private ReSizeGripMouseEventHandler ReSizeGripMouseEvent;
    [CompilerGeneratedAttribute]
private CornerRadius <cornerRadius>k__BackingField;
    internal bool IsGlassActive { get; internal set; }
    private bool CanEnableGlass { get; }
    private double DPIOffset { get; }
    public Brush ResizeBorderBrush { get; public set; }
    public Brush TitleBarBackground { get; public set; }
    public double TitleBarHeight { get; public set; }
    public double TitleFontSize { get; public set; }
    public Brush TitleBarForeground { get; public set; }
    public LinearGradientBrush NavigationBarBackground { get; public set; }
    public Brush WindowContentAreaBorderBrush { get; public set; }
    public Thickness ResizeBorderThickness { get; public set; }
    public ControlTemplate TitleBarTemplate { get; public set; }
    public ControlTemplate MaximizeButtonTemplate { get; public set; }
    public ControlTemplate MinimizeButtonTemplate { get; public set; }
    public ControlTemplate RestoreButtonTemplate { get; public set; }
    public ControlTemplate CloseButtonTemplate { get; public set; }
    public TitleBar TitleBar { get; }
    public HorizontalAlignment TitleTextAlignment { get; public set; }
    public IconAlignment IconAlignment { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    internal CornerRadius cornerRadius { get; internal set; }
    public bool ShowIcon { get; public set; }
    public bool ShowTitle { get; public set; }
    public IEnumerable LeftHeaderItemsSource { get; public set; }
    public IEnumerable RightHeaderItemsSource { get; public set; }
    public DataTemplate LeftHeaderItemTemplate { get; public set; }
    public DataTemplate RightHeaderItemTemplate { get; public set; }
    public Style ResizeGripStyle { get; public set; }
    public bool UseNativeChrome { get; public set; }
    public bool ShowMaximizeButton { get; public set; }
    public bool ShowMinimizeButton { get; public set; }
    public bool HideTaskBar { get; public set; }
    private int DpiX { get; }
    private int DpiY { get; }
    private static ChromelessWindow();
    private void MaximizeWindowExecuted(object sender, ExecutedRoutedEventArgs e);
    private void MinimizeWindowExecuted(object sender, ExecutedRoutedEventArgs e);
    private void CloseWindowExecuted(object sender, ExecutedRoutedEventArgs e);
    internal bool get_IsGlassActive();
    internal void set_IsGlassActive(bool value);
    private bool get_CanEnableGlass();
    private double get_DPIOffset();
    public Brush get_ResizeBorderBrush();
    public void set_ResizeBorderBrush(Brush value);
    public Brush get_TitleBarBackground();
    public void set_TitleBarBackground(Brush value);
    public double get_TitleBarHeight();
    public void set_TitleBarHeight(double value);
    public double get_TitleFontSize();
    public void set_TitleFontSize(double value);
    public Brush get_TitleBarForeground();
    public void set_TitleBarForeground(Brush value);
    public LinearGradientBrush get_NavigationBarBackground();
    public void set_NavigationBarBackground(LinearGradientBrush value);
    public Brush get_WindowContentAreaBorderBrush();
    public void set_WindowContentAreaBorderBrush(Brush value);
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    public ControlTemplate get_TitleBarTemplate();
    public void set_TitleBarTemplate(ControlTemplate value);
    public ControlTemplate get_MaximizeButtonTemplate();
    public void set_MaximizeButtonTemplate(ControlTemplate value);
    public ControlTemplate get_MinimizeButtonTemplate();
    public void set_MinimizeButtonTemplate(ControlTemplate value);
    public ControlTemplate get_RestoreButtonTemplate();
    public void set_RestoreButtonTemplate(ControlTemplate value);
    public ControlTemplate get_CloseButtonTemplate();
    public void set_CloseButtonTemplate(ControlTemplate value);
    public TitleBar get_TitleBar();
    public HorizontalAlignment get_TitleTextAlignment();
    public void set_TitleTextAlignment(HorizontalAlignment value);
    public IconAlignment get_IconAlignment();
    public void set_IconAlignment(IconAlignment value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    [CompilerGeneratedAttribute]
internal CornerRadius get_cornerRadius();
    [CompilerGeneratedAttribute]
internal void set_cornerRadius(CornerRadius value);
    public bool get_ShowIcon();
    public void set_ShowIcon(bool value);
    public bool get_ShowTitle();
    public void set_ShowTitle(bool value);
    public IEnumerable get_LeftHeaderItemsSource();
    public void set_LeftHeaderItemsSource(IEnumerable value);
    public IEnumerable get_RightHeaderItemsSource();
    public void set_RightHeaderItemsSource(IEnumerable value);
    public DataTemplate get_LeftHeaderItemTemplate();
    public void set_LeftHeaderItemTemplate(DataTemplate value);
    public DataTemplate get_RightHeaderItemTemplate();
    public void set_RightHeaderItemTemplate(DataTemplate value);
    public Style get_ResizeGripStyle();
    public void set_ResizeGripStyle(Style value);
    public bool get_UseNativeChrome();
    public void set_UseNativeChrome(bool value);
    public bool get_ShowMaximizeButton();
    public void set_ShowMaximizeButton(bool value);
    public bool get_ShowMinimizeButton();
    public void set_ShowMinimizeButton(bool value);
    public bool get_HideTaskBar();
    public void set_HideTaskBar(bool value);
    private static void OnIsGlassActiveChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnWindowSizeDpChanged();
    protected virtual void OnIsGlassActiveChanged(DependencyPropertyChangedEventArgs e);
    private WindowChrome GetDefaultNativeChrome();
    private static void OnUseNativeChromeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public void add_IsGlassActiveChanged(PropertyChangedCallback value);
    public void remove_IsGlassActiveChanged(PropertyChangedCallback value);
    private static void OnResizePropertyThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void ChromelessWindow_Unloaded(object sender, RoutedEventArgs e);
    private void ChromelessWindow_Loaded(object sender, RoutedEventArgs e);
    private void ChromelessWindow_StateChanged(object sender, EventArgs e);
    protected internal void SystemButtonsUpdate();
    private void OnIconMouseDown(object sender, MouseButtonEventArgs e);
    private void Imgicon_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    private void _UpdateSystemMenu(Nullable`1<WindowState> assumeState);
    internal bool IsFlagSet(int value, int mask);
    private WindowState _GetHwndState();
    private bool _ModifyStyle(WindowStyleValues removeStyle, WindowStyleValues addStyle);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    private void DragMoveWindow();
    public virtual void OnApplyTemplate();
    private void CheckVisualStyle();
    protected virtual void OnSourceInitialized(EventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnPreviewMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    private void SendSizingMessage(Point point, MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnPreviewMouseMove(MouseEventArgs e);
    private IntPtr HookMethod(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr HandleWM_SIZE(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr HandleWM_SIZING(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr HandleWM_EXITSIZEMOVE(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr HandleWM_ENTERSIZEMOVE(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr HandleWM_GETMINMAXINFO(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private int DPIcalculationX(double desiredPixels);
    private int DPIcalculationY(double desiredPixels);
    private int get_DpiX();
    private int get_DpiY();
    private static IntPtr GetDC(IntPtr hWnd);
    private static int GetDeviceCaps(IntPtr hdc, int nIndex);
    private IntPtr HandleWM_DWMCOMPOSITIONCHANGED(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr HandleWM_NCCALCSIZE(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr HandleWM_NCHITTEST(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private void UpdateWindowRegion(bool bRedraw);
    private void SetBorderMask();
    private static int Offset(int value);
    private void DefineWindowRegion(bool bRedraw, int width, int height);
    private void UpdateGlassChange();
    private void ExtendWindow();
    private Rect CalculateClientRectangle(Rect rect);
    private SizingDirection GetSizingDirection(Point point);
    public void add_ReSizeGripMouseEvent(ReSizeGripMouseEventHandler value);
    public void remove_ReSizeGripMouseEvent(ReSizeGripMouseEventHandler value);
    private void SendSizingMessage(SizingDirection sizing);
    private void HandleSizeToContent();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ChromelessWindowInterop : object {
    internal static int WM_SYSCOMMAND;
    internal static int WM_LBUTTONUP;
    internal static int WM_NCLBUTTONDOWN;
    internal static int HT_CAPTION;
    internal static int TPM_RETURNCMD;
    internal static int MONITOR_DEFAULTTONEAREST;
    internal static int SetWindowPos(IntPtr hwnd, int hwndInsertAfter, int x, int y, int cx, int cy, int wFlags);
    internal static UInt32 SHAppBarMessage(int dwMessage, APPBARDATA& pData);
    internal static IntPtr FindWindow(string lpClassName, string lpWindowName);
    internal static bool GetWindowRect(IntPtr hWnd, RECT& r);
    internal static void DwmExtendFrameIntoClientArea(IntPtr hWnd, MARGINS& pMarInset);
    private static void DwmIsCompositionEnabled(Boolean& pfEnabled);
    internal static bool GetMonitorInfo(IntPtr hMonitor, MONITORINFO lpmi);
    private static IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
    internal static IntPtr MonitorFromWindow(IntPtr hwnd, int dwFlags);
    internal static IntPtr SendMessage(IntPtr hWnd, int msg, int wParam, int lParam);
    [CLSCompliantAttribute("False")]
public static int TrackPopupMenu(IntPtr hMenu, UInt32 uFlags, int x, int y, int nReserved, IntPtr hWnd, IntPtr prcRect);
    internal static IntPtr CreateRoundRectRgn(int x1, int y1, int x2, int y2, int cx, int cy);
    internal static int SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool bRedraw);
    internal static int GetWindowLong(IntPtr hWnd, int nIndex);
    internal static int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
    internal static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, int uFlags);
    internal static bool GetCursorPos(POINT& lpPoint);
    internal static bool AdjustWindowRectEx(RECT& lpRECT, int dwStyle, bool bMenu, int dwExStyle);
    internal static int DwmDefWindowProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, IntPtr& plResult);
    internal static bool IsVista();
    internal static short GetX(int point);
    internal static short GetY(int point);
    internal static int GetX(IntPtr point);
    internal static int GetY(IntPtr point);
    internal static void ShowSystemMenu(IntPtr handle, Point point);
    internal static void HandleMinMax(ChromelessWindow window, IntPtr hwnd, IntPtr lParam);
    internal static bool CanEnableDwm();
    internal static Point GetTransformedPoint(Visual visual);
    internal static void ExtendWindow(IntPtr hWnd, int size);
}
public class Syncfusion.Windows.Shared.ClipConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetType, object parameter, CultureInfo culture);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("False")]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.Clock : Control {
    private static double C_firstBorderFrameRadius;
    private static double C_secondInnerBorderFrameRadius;
    private static double C_thirdBorderFrameRadius;
    private static double C_centeredEllipseRadius;
    private static double C_innerClockGeneralWidth;
    private static double C_innerClockGeneralHeight;
    private static double C_frameMinWidth;
    private static int C_angleOffset;
    private static int C_rotationOffset;
    private static string C_hourHandName;
    private static string C_minuteHandName;
    private static string C_secondHandName;
    private static string C_hourHandRotateTransformName;
    private static string C_minuteHandRotateTransformName;
    private static string C_secondHandRotateTransformHandName;
    private static string C_centeredEllipseName;
    private static string C_upRepeatButtonName;
    private static string C_downRepeatButtonName;
    private static string C_upInnerRepeatButtonName;
    private static string C_downInnerRepeatButtonName;
    private static string C_firstBorderFrameColorName;
    private static string C_thirdBorderFrameBackgroundColorName;
    private static string C_thirdBorderFrameBrushColorName;
    private static string C_dialBorderColorName;
    private static string C_clockPanelBorderColorName;
    private static string C_clockPanelInnerBorderColorName;
    private static string C_clockPanelBackgroundColorName;
    private static string C_aMPMSelectorBorderBrushName;
    private static string C_aMPMSelectorBackgroundName;
    private static string C_aMPMSelectorForegroundName;
    private static string C_aMPMSelectorButtonsArrowBrushName;
    private static string C_aMPMSelectorButtonsBackgroundName;
    private static string C_aMPMSelectorButtonsBorderBrushName;
    private static string C_aMPMMouseOverButtonsBorderBrushName;
    private static string C_aMPMMouseOverButtonsArrowBrushName;
    private static string C_aMPMMouseOverButtonsBackgroundName;
    private static string C_ClockPointBrushName;
    private static string C_centerCircleBrushName;
    private static string C_secondHandBrushName;
    private static string C_secondHandMouseOverBrushName;
    private static string C_minuteHandBrushName;
    private static string C_minuteHandBorderBrushName;
    private static string C_minuteHandMouseOverBrushName;
    private static string C_minuteHandMouseOverBorderBrushName;
    private static string C_hourHandBrushName;
    private static string C_hourHandBorderBrushName;
    private static string C_hourHandMouseOverBrushName;
    private static string C_hourHandMouseOverBorderBrushName;
    private static string C_hourHandPressedBrushName;
    private static string C_minuteHandPressedBrushName;
    private static string C_secondHandPressedBrushName;
    private DispatcherTimer m_timer1;
    private Path m_hourHand;
    private Path m_minuteHand;
    private Rectangle m_secondHand;
    private Ellipse m_centeredEllipse;
    private RotateTransform m_hourHandRotateTransform;
    private RotateTransform m_minuteHandRotateTransform;
    private RotateTransform m_secondHandRotateTransform;
    private int m_hoursAdded;
    private int m_minutesAdded;
    private int m_secondsAdded;
    public static RoutedCommand m_AMPMSelect;
    private CommandBinding amPMSelectBinding;
    internal bool timerstatus;
    public static DependencyProperty CanResizeProperty;
    internal static DependencyProperty IsPressedHourHandProperty;
    internal static DependencyProperty IsPressedMinuteHandProperty;
    internal static DependencyProperty IsPressedSecondHandProperty;
    internal static DependencyProperty FirstBorderFrameRadiusProperty;
    internal static DependencyProperty SecondInnerBorderFrameRadiusProperty;
    internal static DependencyProperty ThirdBorderFrameRadiusProperty;
    internal static DependencyProperty CenteredEllipseRadiusProperty;
    internal static DependencyProperty InnerClockGeneralWidthProperty;
    internal static DependencyProperty InnerClockGeneralHeightProperty;
    internal static DependencyProperty SecondHandHeightProperty;
    internal static DependencyProperty FrameWidthProperty;
    internal static DependencyProperty LongTimeProperty;
    private static Brush c_defaultBrushValue;
    private static Color c_defaultColorValue;
    private PropertyChangedCallback ClockCornerRadiusChanged;
    private PropertyChangedCallback BorderThicknessChanged;
    private PropertyChangedCallback SecondHandThicknessChanged;
    private PropertyChangedCallback InnerBorderThicknessChanged;
    private PropertyChangedCallback DialBorderThicknessChanged;
    private PropertyChangedCallback AMPMSelectorPositionChanged;
    private PropertyChangedCallback DateTimeChanged;
    private PropertyChangedCallback BorderBrushChanged;
    private PropertyChangedCallback ClockFrameBrushChanged;
    private PropertyChangedCallback DialBackgroundChanged;
    private PropertyChangedCallback DialCenterBackgroundChanged;
    private PropertyChangedCallback InnerBorderBrushChanged;
    private PropertyChangedCallback FrameBorderThicknessChanged;
    private PropertyChangedCallback FrameInnerBorderThicknessChanged;
    private PropertyChangedCallback FrameBorderBrushChanged;
    private PropertyChangedCallback FrameInnerBorderBrushChanged;
    private PropertyChangedCallback FrameBackgroundChanged;
    private PropertyChangedCallback FrameCornerRadiusChanged;
    private PropertyChangedCallback AMPMSelectorBorderThicknessChanged;
    private PropertyChangedCallback AMPMSelectorBorderBrushChanged;
    private PropertyChangedCallback AMPMSelectorBackgroundChanged;
    private PropertyChangedCallback AMPMSelectorForegroundChanged;
    private PropertyChangedCallback AMPMSelectorButtonsArrowBrushChanged;
    private PropertyChangedCallback AMPMSelectorButtonsBackgroundChanged;
    private PropertyChangedCallback AMPMSelectorCornerRadiusChanged;
    private PropertyChangedCallback AMPMSelectorButtonsBorderBrushChanged;
    private PropertyChangedCallback AMPMMouseOverButtonsBorderBrushChanged;
    private PropertyChangedCallback AMPMMouseOverButtonsArrowBrushChanged;
    private PropertyChangedCallback AMPMMouseOverButtonsBackgroundChanged;
    private PropertyChangedCallback ClockPointBrushChanged;
    private PropertyChangedCallback CenterCircleBrushChanged;
    private PropertyChangedCallback SecondHandBrushChanged;
    private PropertyChangedCallback SecondHandMouseOverBrushChanged;
    private PropertyChangedCallback MinuteHandBrushChanged;
    private PropertyChangedCallback MinuteHandBorderBrushChanged;
    private PropertyChangedCallback MinuteHandMouseOverBrushChanged;
    private PropertyChangedCallback MinuteHandMouseOverBorderBrushChanged;
    private PropertyChangedCallback HourHandBrushChanged;
    private PropertyChangedCallback HourHandBorderBrushChanged;
    private PropertyChangedCallback HourHandMouseOverBrushChanged;
    private PropertyChangedCallback HourHandMouseOverBorderBrushChanged;
    private PropertyChangedCallback HourHandPressedBrushChanged;
    private PropertyChangedCallback MinuteHandPressedBrushChanged;
    private PropertyChangedCallback SecondHandPressedBrushChanged;
    private PropertyChangedCallback IsInsideAmPmVisibleChanged;
    private PropertyChangedCallback IsDigitalAmPmVisibleChanged;
    public static DependencyProperty DateTimeProperty;
    public static DependencyProperty ClockCornerRadiusProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty SecondHandThicknessProperty;
    public static DependencyProperty InnerBorderThicknessProperty;
    public static DependencyProperty DialBorderThicknessProperty;
    public static DependencyProperty AMPMSelectorPositionProperty;
    public static DependencyProperty InnerBorderBrushProperty;
    public static DependencyProperty DialBackgroundProperty;
    public static DependencyProperty DialCenterBackgroundProperty;
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty ClockFrameBrushProperty;
    public static DependencyProperty FrameBorderThicknessProperty;
    public static DependencyProperty FrameInnerBorderThicknessProperty;
    public static DependencyProperty FrameBorderBrushProperty;
    public static DependencyProperty FrameInnerBorderBrushProperty;
    public static DependencyProperty FrameBackgroundProperty;
    public static DependencyProperty FrameCornerRadiusProperty;
    public static DependencyProperty AMPMSelectorBorderThicknessProperty;
    public static DependencyProperty AMPMSelectorCornerRadiusProperty;
    public static DependencyProperty AMPMSelectorBorderBrushProperty;
    public static DependencyProperty AMPMSelectorBackgroundProperty;
    public static DependencyProperty AMPMSelectorForegroundProperty;
    public static DependencyProperty AMPMSelectorButtonsArrowBrushProperty;
    public static DependencyProperty AMPMSelectorButtonsBackgroundProperty;
    public static DependencyProperty AMPMSelectorButtonsBorderBrushProperty;
    public static DependencyProperty AMPMMouseOverButtonsBorderBrushProperty;
    public static DependencyProperty AMPMMouseOverButtonsArrowBrushProperty;
    public static DependencyProperty AMPMMouseOverButtonsBackgroundProperty;
    public static DependencyProperty ClockPointBrushProperty;
    public static DependencyProperty CenterCircleBrushProperty;
    public static DependencyProperty SecondHandBrushProperty;
    public static DependencyProperty SecondHandMouseOverBrushProperty;
    public static DependencyProperty MinuteHandBrushProperty;
    public static DependencyProperty MinuteHandBorderBrushProperty;
    public static DependencyProperty MinuteHandMouseOverBrushProperty;
    public static DependencyProperty MinuteHandMouseOverBorderBrushProperty;
    public static DependencyProperty HourHandBrushProperty;
    public static DependencyProperty HourHandBorderBrushProperty;
    public static DependencyProperty HourHandMouseOverBrushProperty;
    public static DependencyProperty HourHandMouseOverBorderBrushProperty;
    public static DependencyProperty HourHandPressedBrushProperty;
    public static DependencyProperty MinuteHandPressedBrushProperty;
    public static DependencyProperty SecondHandPressedBrushProperty;
    public static DependencyProperty IsInsideAmPmVisibleProperty;
    public static DependencyProperty IsDigitalAmPmVisibleProperty;
    internal bool IsPressedHourHand { get; internal set; }
    internal bool IsPressedMinuteHand { get; internal set; }
    internal bool IsPressedSecondHand { get; internal set; }
    internal double FirstBorderFrameRadius { get; internal set; }
    internal double SecondInnerBorderFrameRadius { get; internal set; }
    internal double ThirdBorderFrameRadius { get; internal set; }
    internal double CenteredEllipseRadius { get; internal set; }
    internal double InnerClockGeneralWidth { get; internal set; }
    public bool CanResize { get; public set; }
    internal double InnerClockGeneralHeight { get; internal set; }
    internal double SecondHandHeight { get; internal set; }
    internal double FrameWidth { get; internal set; }
    internal string LongTime { get; private set; }
    public DateTime DateTime { get; public set; }
    public CornerRadius ClockCornerRadius { get; public set; }
    public Thickness BorderThickness { get; public set; }
    public double SecondHandThickness { get; public set; }
    public Thickness InnerBorderThickness { get; public set; }
    public Thickness DialBorderThickness { get; public set; }
    public Position AMPMSelectorPosition { get; public set; }
    public Brush InnerBorderBrush { get; public set; }
    public Brush DialBackground { get; public set; }
    public Brush DialCenterBackground { get; public set; }
    public Brush BorderBrush { get; public set; }
    public Brush ClockFrameBrush { get; public set; }
    public Thickness FrameBorderThickness { get; public set; }
    public Thickness FrameInnerBorderThickness { get; public set; }
    public Brush FrameBorderBrush { get; public set; }
    public Brush FrameInnerBorderBrush { get; public set; }
    public Brush FrameBackground { get; public set; }
    public CornerRadius FrameCornerRadius { get; public set; }
    public Thickness AMPMSelectorBorderThickness { get; public set; }
    public Brush AMPMSelectorBorderBrush { get; public set; }
    public Brush AMPMSelectorBackground { get; public set; }
    public Brush AMPMSelectorForeground { get; public set; }
    public Brush AMPMSelectorButtonsArrowBrush { get; public set; }
    public Brush AMPMSelectorButtonsBackground { get; public set; }
    public CornerRadius AMPMSelectorCornerRadius { get; public set; }
    public Brush AMPMSelectorButtonsBorderBrush { get; public set; }
    public Brush AMPMMouseOverButtonsBorderBrush { get; public set; }
    public Brush AMPMMouseOverButtonsArrowBrush { get; public set; }
    public Brush AMPMMouseOverButtonsBackground { get; public set; }
    public Brush ClockPointBrush { get; public set; }
    public Brush CenterCircleBrush { get; public set; }
    public Brush SecondHandBrush { get; public set; }
    public Brush SecondHandMouseOverBrush { get; public set; }
    public Brush MinuteHandBrush { get; public set; }
    public Brush MinuteHandBorderBrush { get; public set; }
    public Brush MinuteHandMouseOverBrush { get; public set; }
    public Brush MinuteHandMouseOverBorderBrush { get; public set; }
    public Brush HourHandBrush { get; public set; }
    public Brush HourHandBorderBrush { get; public set; }
    public Brush HourHandMouseOverBrush { get; public set; }
    public Brush HourHandMouseOverBorderBrush { get; public set; }
    public Brush HourHandPressedBrush { get; public set; }
    public Brush MinuteHandPressedBrush { get; public set; }
    public Brush SecondHandPressedBrush { get; public set; }
    public bool IsInsideAmPmVisible { get; public set; }
    public bool IsDigitalAmPmVisible { get; public set; }
    private static Clock();
    private void Clock_Loaded(object sender, RoutedEventArgs e);
    private void Clock_Unloaded(object sender, RoutedEventArgs e);
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Stop();
    public void Start();
    internal bool get_IsPressedHourHand();
    internal void set_IsPressedHourHand(bool value);
    internal bool get_IsPressedMinuteHand();
    internal void set_IsPressedMinuteHand(bool value);
    internal bool get_IsPressedSecondHand();
    internal void set_IsPressedSecondHand(bool value);
    internal double get_FirstBorderFrameRadius();
    internal void set_FirstBorderFrameRadius(double value);
    internal double get_SecondInnerBorderFrameRadius();
    internal void set_SecondInnerBorderFrameRadius(double value);
    internal double get_ThirdBorderFrameRadius();
    internal void set_ThirdBorderFrameRadius(double value);
    internal double get_CenteredEllipseRadius();
    internal void set_CenteredEllipseRadius(double value);
    internal double get_InnerClockGeneralWidth();
    internal void set_InnerClockGeneralWidth(double value);
    public bool get_CanResize();
    public void set_CanResize(bool value);
    internal double get_InnerClockGeneralHeight();
    internal void set_InnerClockGeneralHeight(double value);
    internal double get_SecondHandHeight();
    internal void set_SecondHandHeight(double value);
    internal double get_FrameWidth();
    internal void set_FrameWidth(double value);
    internal string get_LongTime();
    private void set_LongTime(string value);
    public virtual void OnApplyTemplate();
    protected virtual void OnInitialized(EventArgs e);
    private void InitHands();
    private void InitHandsRotateTransform();
    private void Timer_Tick(object sender, EventArgs e);
    private void UpdateDateTime();
    protected virtual void OnDateTimeChanged(DependencyPropertyChangedEventArgs e);
    private static void OnDateTimeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void HourHand_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void MinuteHand_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void SecondHand_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    private int CorrectTimeDifference(int diff);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    private bool IsCtrlAltPressed();
    private void ClearDraggingFlags();
    private void HourMouseWheelRotation(int delta);
    private void MinuteMouseWheelRotation(int delta);
    private void SecondMouseWheelRotation(int delta);
    private void ChangeAMPMSelectValue(object sender, ExecutedRoutedEventArgs e);
    public DateTime get_DateTime();
    public void set_DateTime(DateTime value);
    public CornerRadius get_ClockCornerRadius();
    public void set_ClockCornerRadius(CornerRadius value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    public double get_SecondHandThickness();
    public void set_SecondHandThickness(double value);
    public Thickness get_InnerBorderThickness();
    public void set_InnerBorderThickness(Thickness value);
    public Thickness get_DialBorderThickness();
    public void set_DialBorderThickness(Thickness value);
    public Position get_AMPMSelectorPosition();
    public void set_AMPMSelectorPosition(Position value);
    public Brush get_InnerBorderBrush();
    public void set_InnerBorderBrush(Brush value);
    public Brush get_DialBackground();
    public void set_DialBackground(Brush value);
    public Brush get_DialCenterBackground();
    public void set_DialCenterBackground(Brush value);
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Brush get_ClockFrameBrush();
    public void set_ClockFrameBrush(Brush value);
    public Thickness get_FrameBorderThickness();
    public void set_FrameBorderThickness(Thickness value);
    public Thickness get_FrameInnerBorderThickness();
    public void set_FrameInnerBorderThickness(Thickness value);
    public Brush get_FrameBorderBrush();
    public void set_FrameBorderBrush(Brush value);
    public Brush get_FrameInnerBorderBrush();
    public void set_FrameInnerBorderBrush(Brush value);
    public Brush get_FrameBackground();
    public void set_FrameBackground(Brush value);
    public CornerRadius get_FrameCornerRadius();
    public void set_FrameCornerRadius(CornerRadius value);
    public Thickness get_AMPMSelectorBorderThickness();
    public void set_AMPMSelectorBorderThickness(Thickness value);
    public Brush get_AMPMSelectorBorderBrush();
    public void set_AMPMSelectorBorderBrush(Brush value);
    public Brush get_AMPMSelectorBackground();
    public void set_AMPMSelectorBackground(Brush value);
    public Brush get_AMPMSelectorForeground();
    public void set_AMPMSelectorForeground(Brush value);
    public Brush get_AMPMSelectorButtonsArrowBrush();
    public void set_AMPMSelectorButtonsArrowBrush(Brush value);
    public Brush get_AMPMSelectorButtonsBackground();
    public void set_AMPMSelectorButtonsBackground(Brush value);
    public CornerRadius get_AMPMSelectorCornerRadius();
    public void set_AMPMSelectorCornerRadius(CornerRadius value);
    public Brush get_AMPMSelectorButtonsBorderBrush();
    public void set_AMPMSelectorButtonsBorderBrush(Brush value);
    public Brush get_AMPMMouseOverButtonsBorderBrush();
    public void set_AMPMMouseOverButtonsBorderBrush(Brush value);
    public Brush get_AMPMMouseOverButtonsArrowBrush();
    public void set_AMPMMouseOverButtonsArrowBrush(Brush value);
    public Brush get_AMPMMouseOverButtonsBackground();
    public void set_AMPMMouseOverButtonsBackground(Brush value);
    public Brush get_ClockPointBrush();
    public void set_ClockPointBrush(Brush value);
    public Brush get_CenterCircleBrush();
    public void set_CenterCircleBrush(Brush value);
    public Brush get_SecondHandBrush();
    public void set_SecondHandBrush(Brush value);
    public Brush get_SecondHandMouseOverBrush();
    public void set_SecondHandMouseOverBrush(Brush value);
    public Brush get_MinuteHandBrush();
    public void set_MinuteHandBrush(Brush value);
    public Brush get_MinuteHandBorderBrush();
    public void set_MinuteHandBorderBrush(Brush value);
    public Brush get_MinuteHandMouseOverBrush();
    public void set_MinuteHandMouseOverBrush(Brush value);
    public Brush get_MinuteHandMouseOverBorderBrush();
    public void set_MinuteHandMouseOverBorderBrush(Brush value);
    public Brush get_HourHandBrush();
    public void set_HourHandBrush(Brush value);
    public Brush get_HourHandBorderBrush();
    public void set_HourHandBorderBrush(Brush value);
    public Brush get_HourHandMouseOverBrush();
    public void set_HourHandMouseOverBrush(Brush value);
    public Brush get_HourHandMouseOverBorderBrush();
    public void set_HourHandMouseOverBorderBrush(Brush value);
    public Brush get_HourHandPressedBrush();
    public void set_HourHandPressedBrush(Brush value);
    public Brush get_MinuteHandPressedBrush();
    public void set_MinuteHandPressedBrush(Brush value);
    public Brush get_SecondHandPressedBrush();
    public void set_SecondHandPressedBrush(Brush value);
    public bool get_IsInsideAmPmVisible();
    public void set_IsInsideAmPmVisible(bool value);
    public bool get_IsDigitalAmPmVisible();
    public void set_IsDigitalAmPmVisible(bool value);
    public void add_ClockCornerRadiusChanged(PropertyChangedCallback value);
    public void remove_ClockCornerRadiusChanged(PropertyChangedCallback value);
    public void add_BorderThicknessChanged(PropertyChangedCallback value);
    public void remove_BorderThicknessChanged(PropertyChangedCallback value);
    public void add_SecondHandThicknessChanged(PropertyChangedCallback value);
    public void remove_SecondHandThicknessChanged(PropertyChangedCallback value);
    public void add_InnerBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_InnerBorderThicknessChanged(PropertyChangedCallback value);
    public void add_DialBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_DialBorderThicknessChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorPositionChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorPositionChanged(PropertyChangedCallback value);
    public void add_DateTimeChanged(PropertyChangedCallback value);
    public void remove_DateTimeChanged(PropertyChangedCallback value);
    public void add_BorderBrushChanged(PropertyChangedCallback value);
    public void remove_BorderBrushChanged(PropertyChangedCallback value);
    public void add_ClockFrameBrushChanged(PropertyChangedCallback value);
    public void remove_ClockFrameBrushChanged(PropertyChangedCallback value);
    public void add_DialBackgroundChanged(PropertyChangedCallback value);
    public void remove_DialBackgroundChanged(PropertyChangedCallback value);
    public void add_DialCenterBackgroundChanged(PropertyChangedCallback value);
    public void remove_DialCenterBackgroundChanged(PropertyChangedCallback value);
    public void add_InnerBorderBrushChanged(PropertyChangedCallback value);
    public void remove_InnerBorderBrushChanged(PropertyChangedCallback value);
    public void add_FrameBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_FrameBorderThicknessChanged(PropertyChangedCallback value);
    public void add_FrameInnerBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_FrameInnerBorderThicknessChanged(PropertyChangedCallback value);
    public void add_FrameBorderBrushChanged(PropertyChangedCallback value);
    public void remove_FrameBorderBrushChanged(PropertyChangedCallback value);
    public void add_FrameInnerBorderBrushChanged(PropertyChangedCallback value);
    public void remove_FrameInnerBorderBrushChanged(PropertyChangedCallback value);
    public void add_FrameBackgroundChanged(PropertyChangedCallback value);
    public void remove_FrameBackgroundChanged(PropertyChangedCallback value);
    public void add_FrameCornerRadiusChanged(PropertyChangedCallback value);
    public void remove_FrameCornerRadiusChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorBorderThicknessChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorBorderBrushChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorBorderBrushChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorBackgroundChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorBackgroundChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorForegroundChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorForegroundChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorButtonsArrowBrushChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorButtonsArrowBrushChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorButtonsBackgroundChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorButtonsBackgroundChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorCornerRadiusChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorCornerRadiusChanged(PropertyChangedCallback value);
    public void add_AMPMSelectorButtonsBorderBrushChanged(PropertyChangedCallback value);
    public void remove_AMPMSelectorButtonsBorderBrushChanged(PropertyChangedCallback value);
    public void add_AMPMMouseOverButtonsBorderBrushChanged(PropertyChangedCallback value);
    public void remove_AMPMMouseOverButtonsBorderBrushChanged(PropertyChangedCallback value);
    public void add_AMPMMouseOverButtonsArrowBrushChanged(PropertyChangedCallback value);
    public void remove_AMPMMouseOverButtonsArrowBrushChanged(PropertyChangedCallback value);
    public void add_AMPMMouseOverButtonsBackgroundChanged(PropertyChangedCallback value);
    public void remove_AMPMMouseOverButtonsBackgroundChanged(PropertyChangedCallback value);
    public void add_ClockPointBrushChanged(PropertyChangedCallback value);
    public void remove_ClockPointBrushChanged(PropertyChangedCallback value);
    public void add_CenterCircleBrushChanged(PropertyChangedCallback value);
    public void remove_CenterCircleBrushChanged(PropertyChangedCallback value);
    public void add_SecondHandBrushChanged(PropertyChangedCallback value);
    public void remove_SecondHandBrushChanged(PropertyChangedCallback value);
    public void add_SecondHandMouseOverBrushChanged(PropertyChangedCallback value);
    public void remove_SecondHandMouseOverBrushChanged(PropertyChangedCallback value);
    public void add_MinuteHandBrushChanged(PropertyChangedCallback value);
    public void remove_MinuteHandBrushChanged(PropertyChangedCallback value);
    public void add_MinuteHandBorderBrushChanged(PropertyChangedCallback value);
    public void remove_MinuteHandBorderBrushChanged(PropertyChangedCallback value);
    public void add_MinuteHandMouseOverBrushChanged(PropertyChangedCallback value);
    public void remove_MinuteHandMouseOverBrushChanged(PropertyChangedCallback value);
    public void add_MinuteHandMouseOverBorderBrushChanged(PropertyChangedCallback value);
    public void remove_MinuteHandMouseOverBorderBrushChanged(PropertyChangedCallback value);
    public void add_HourHandBrushChanged(PropertyChangedCallback value);
    public void remove_HourHandBrushChanged(PropertyChangedCallback value);
    public void add_HourHandBorderBrushChanged(PropertyChangedCallback value);
    public void remove_HourHandBorderBrushChanged(PropertyChangedCallback value);
    public void add_HourHandMouseOverBrushChanged(PropertyChangedCallback value);
    public void remove_HourHandMouseOverBrushChanged(PropertyChangedCallback value);
    public void add_HourHandMouseOverBorderBrushChanged(PropertyChangedCallback value);
    public void remove_HourHandMouseOverBorderBrushChanged(PropertyChangedCallback value);
    public void add_HourHandPressedBrushChanged(PropertyChangedCallback value);
    public void remove_HourHandPressedBrushChanged(PropertyChangedCallback value);
    public void add_MinuteHandPressedBrushChanged(PropertyChangedCallback value);
    public void remove_MinuteHandPressedBrushChanged(PropertyChangedCallback value);
    public void add_SecondHandPressedBrushChanged(PropertyChangedCallback value);
    public void remove_SecondHandPressedBrushChanged(PropertyChangedCallback value);
    public void add_IsInsideAmPmVisibleChanged(PropertyChangedCallback value);
    public void remove_IsInsideAmPmVisibleChanged(PropertyChangedCallback value);
    public void add_IsDigitalAmPmVisibleChanged(PropertyChangedCallback value);
    public void remove_IsDigitalAmPmVisibleChanged(PropertyChangedCallback value);
    protected virtual void OnClockCornerRadiusChanged(DependencyPropertyChangedEventArgs e);
    private static void OnClockCornerRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private static void OnBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnSecondHandThicknessChanged(DependencyPropertyChangedEventArgs e);
    private static void OnSecondHandThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnInnerBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private static void OnInnerBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnDialBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private static void OnDialBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorPositionChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorPositionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnInnerBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnInnerBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnDialBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnDialBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnDialCenterBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnDialCenterBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnClockFrameBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnClockFrameBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameInnerBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameInnerBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameInnerBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameInnerBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameCornerRadiusChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameCornerRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorForegroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorButtonsArrowBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorButtonsArrowBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorButtonsBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorButtonsBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorCornerRadiusChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorCornerRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMSelectorButtonsBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMSelectorButtonsBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMMouseOverButtonsBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMMouseOverButtonsBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMMouseOverButtonsArrowBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMMouseOverButtonsArrowBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnAMPMMouseOverButtonsBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnAMPMMouseOverButtonsBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnClockPointBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnClockPointBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnCenterCircleBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnCenterCircleBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnSecondHandBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnSecondHandBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnSecondHandMouseOverBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnSecondHandMouseOverBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinuteHandBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnMinuteHandBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinuteHandBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnMinuteHandBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinuteHandMouseOverBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnMinuteHandMouseOverBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinuteHandMouseOverBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnMinuteHandMouseOverBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnHourHandBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnHourHandBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnHourHandBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnHourHandBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnHourHandMouseOverBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnHourHandMouseOverBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnHourHandMouseOverBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnHourHandMouseOverBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnHourHandPressedBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnHourHandPressedBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinuteHandPressedBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnMinuteHandPressedBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnSecondHandPressedBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnSecondHandPressedBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnIsInsideAmPmVisibleChanged(DependencyPropertyChangedEventArgs e);
    private static void OnIsInsideAmPmVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnIsDigitalAmPmVisibleChanged(DependencyPropertyChangedEventArgs e);
    private static void OnIsDigitalAmPmVisibleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public enum Syncfusion.Windows.Shared.CloseCalendarAction : Enum {
    public int value__;
    public static CloseCalendarAction Never;
    public static CloseCalendarAction SingleClick;
    public static CloseCalendarAction DoubleClick;
}
public enum Syncfusion.Windows.Shared.CloseMode : Enum {
    public int value__;
    public static CloseMode Hide;
    public static CloseMode Delete;
}
public class Syncfusion.Windows.Shared.CollectionVisibilityConverter : EmptyCollectionToObjectConverter {
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("False")]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.ColorBar : Control {
    private static string ColorBarSlider;
    private float m_sliderValue;
    private bool m_mouseClicked;
    private PropertyChangedCallback SliderValueChanged;
    private PropertyChangedCallback ColorChanged;
    public static DependencyProperty ColorProperty;
    internal static DependencyProperty SliderValueProperty;
    internal static DependencyProperty SliderMaxValueProperty;
    public Color Color { get; public set; }
    internal float SliderValue { get; internal set; }
    private float SliderMaxValue { get; private set; }
    private static ColorBar();
    public void add_SliderValueChanged(PropertyChangedCallback value);
    public void remove_SliderValueChanged(PropertyChangedCallback value);
    public void add_ColorChanged(PropertyChangedCallback value);
    public void remove_ColorChanged(PropertyChangedCallback value);
    public virtual void OnApplyTemplate();
    private static void OnSliderValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnGotMouseCapture(MouseEventArgs e);
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    private void OnSliderValueChanged(DependencyPropertyChangedEventArgs e);
    private static void OnColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnColorChanged(DependencyPropertyChangedEventArgs e);
    public Color get_Color();
    public void set_Color(Color value);
    internal float get_SliderValue();
    internal void set_SliderValue(float value);
    private float get_SliderMaxValue();
    private void set_SliderMaxValue(float value);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("True")]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.ColorEdit : Control {
    private static string C_pickerColorBar;
    private static string C_colorToggleButton;
    private static string C_colorPalette;
    private static string C_defaultSkinName;
    private static string C_colorEditContainerBrush;
    private static string C_systemColors;
    private static string C_buttomH;
    private static string C_buttomS;
    private static string C_buttomV;
    private static string C_wordKnownColorsTextBox;
    private static string C_colorStringEditor;
    private static string C_suchInRed;
    private static string C_suchInGreen;
    private static string C_suchInBlue;
    internal bool changeHSVBackground;
    internal bool changeColor;
    internal int Hcount;
    internal string CurrentHSV;
    internal bool CanChange;
    internal int count;
    internal bool allow;
    private bool breakLoop;
    internal Brush previousSelectedBrush;
    private bool mouseLeftDown;
    private ToggleButton toggle;
    private ContentPresenter content;
    private bool colorchangedInternally;
    internal bool rev;
    internal float m_r;
    internal float m_g;
    internal float m_b;
    internal float m_a;
    public static RoutedCommand M_changeColorWhite;
    public static RoutedCommand M_changeColorBlack;
    private FrameworkElement m_colorPalette;
    private TextBox m_wordKnownColorsTextBox;
    internal Popup m_wordKnownColorPopup;
    private RadioButton m_buttomH;
    private RadioButton m_buttomS;
    private RadioButton m_buttomV;
    internal Color m_color;
    internal float A_value;
    private ComboBox m_systemColors;
    private ToggleButton m_colorToggleButton;
    private Color m_colorBeforeEyeDropStart;
    private bool m_bColorUpdating;
    private TextBox m_colorStringEditor;
    private ColorBar m_editColorBar;
    private bool m_bNeedChangeHSV;
    private Button linear;
    private Button radial;
    private Button Reverse;
    private Button Solid;
    private Button Gradient;
    private ToggleButton popupButton;
    private bool isLinear;
    internal StackPanel enableSwitch;
    internal Popup GradPopup;
    internal ColorPicker m_colorPicker;
    internal bool bindedmanually;
    internal bool flag;
    internal Path selectorEllipse;
    private ComboBox obj;
    public static DependencyProperty AProperty;
    public static DependencyProperty RProperty;
    public static DependencyProperty GProperty;
    public static DependencyProperty BProperty;
    public static DependencyProperty BackgroundRProperty;
    public static DependencyProperty BackgroundGProperty;
    public static DependencyProperty BackgroundBProperty;
    public static DependencyProperty BackgroundAProperty;
    public static DependencyProperty IsScRGBColorProperty;
    public static DependencyProperty IsAlphaVisibleProperty;
    public static DependencyProperty HSVProperty;
    internal static DependencyProperty HProperty;
    internal static DependencyProperty SProperty;
    internal static DependencyProperty VProperty;
    internal static DependencyProperty SliderValueHSVProperty;
    internal static DependencyProperty SliderMaxValueHSVProperty;
    internal static DependencyProperty SelectorPositionXProperty;
    internal static DependencyProperty SelectorPositionYProperty;
    internal static DependencyProperty WordKnownColorsPositionXProperty;
    internal static DependencyProperty WordKnownColorsPositionYProperty;
    internal static DependencyProperty VisualizationStyleProperty;
    public static DependencyProperty ThumbTemplateProperty;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty StartpointProperty;
    public static DependencyProperty EndpointProperty;
    public static DependencyProperty CentrePointProperty;
    public static DependencyProperty GradientOriginProperty;
    public static DependencyProperty RadiusXProperty;
    public static DependencyProperty RadiusYProperty;
    public static DependencyProperty BrushProperty;
    public static DependencyProperty BrushModeProperty;
    public static DependencyProperty EnableGradientToSolidSwitchProperty;
    public static DependencyProperty GradientPropertyEditorModeProperty;
    public static DependencyProperty IsOpenGradientPropertyEditorProperty;
    public static DependencyProperty IsGradientPropertyEnabledProperty;
    internal static DependencyProperty InvertColorProperty;
    public static DependencyProperty EnableToolTipProperty;
    private CommandBinding colorWhiteBinding;
    private CommandBinding colorBlackBinding;
    private PropertyChangedCallback RChanged;
    private PropertyChangedCallback GChanged;
    private PropertyChangedCallback BChanged;
    private PropertyChangedCallback AChanged;
    private PropertyChangedCallback HChanged;
    private PropertyChangedCallback SChanged;
    private PropertyChangedCallback VChanged;
    private PropertyChangedCallback SliderValueHSVChanged;
    private PropertyChangedCallback VisualizationStyleChanged;
    private PropertyChangedCallback ColorChanged;
    private PropertyChangedCallback GradientPropertyEditorModeChanged;
    private PropertyChangedCallback IsOpenGradientPropertyEditorChanged;
    private PropertyChangedCallback IsGradientPropertyEnabledChanged;
    private PropertyChangedCallback EnableToolTipChanged;
    private bool isEyeDropper;
    internal UpDown startx;
    internal UpDown starty;
    internal UpDown endx;
    internal UpDown endy;
    internal UpDown centrex;
    internal UpDown centrey;
    internal UpDown gradx;
    internal UpDown grady;
    internal UpDown radiusx;
    internal UpDown radiusy;
    private GradientStartPoint mys;
    internal bool rgbChanged;
    internal bool blackWhitePressed;
    private GradientStartPoint mye;
    private GradientStartPoint Centre;
    private GradientStartPoint Gradientorigin;
    internal TextBox tb;
    internal TextBox rval;
    internal TextBox gval;
    internal TextBox bval;
    internal TextBox hval;
    internal TextBox sval;
    internal TextBox vval;
    private Grid RadialGrid;
    private Grid LinearGrid;
    private Border GradBorder;
    private Window window;
    private GradientBrush gb;
    internal bool blackWhite;
    internal bool loaded;
    internal bool Edited;
    internal bool mousedown;
    internal bool setnocolor;
    internal Slider SliderH;
    internal Slider SliderS;
    internal Slider SliderV;
    public static DependencyProperty IsGradientOriginVisibleProperty;
    public static DependencyProperty IsCenterVisibleProperty;
    public static DependencyProperty IsRadiusVisibleProperty;
    [CompilerGeneratedAttribute]
private Rectangle <rectBar>k__BackingField;
    [CompilerGeneratedAttribute]
private Canvas <canvasBar>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <gradientGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private GradientItemCollection <gradientItemCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <CurrentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <SelectedColor>k__BackingField;
    private Rectangle rectBar { get; private set; }
    internal Canvas canvasBar { get; internal set; }
    internal Grid gradientGrid { get; internal set; }
    internal GradientItemCollection gradientItemCollection { get; internal set; }
    internal Rectangle CurrentColor { get; internal set; }
    internal Rectangle SelectedColor { get; internal set; }
    public bool EnableToolTip { get; public set; }
    public bool IsScRGBColor { get; public set; }
    public float R { get; public set; }
    public float G { get; public set; }
    public float B { get; public set; }
    public float A { get; public set; }
    public Brush BackgroundA { get; public set; }
    public Brush BackgroundR { get; public set; }
    public Brush BackgroundG { get; public set; }
    public Brush BackgroundB { get; public set; }
    public float H { get; public set; }
    public float S { get; public set; }
    public float V { get; public set; }
    private float SelectorPositionX { get; private set; }
    private float SelectorPositionY { get; private set; }
    private float SliderValueHSV { get; private set; }
    private float SliderMaxValueHSV { get; private set; }
    public HSV HSV { get; public set; }
    public ControlTemplate ThumbTemplate { get; public set; }
    private float WordKnownColorsPositionX { get; private set; }
    private float WordKnownColorsPositionY { get; private set; }
    public ColorSelectionMode VisualizationStyle { get; public set; }
    public Color Color { get; public set; }
    public Point Startpoint { get; public set; }
    public Point RadiusX { get; public set; }
    public Point RadiusY { get; public set; }
    public Point GradientOrigin { get; public set; }
    public Point Endpoint { get; public set; }
    public Point CentrePoint { get; public set; }
    public Brush Brush { get; public set; }
    public Color InvertColor { get; public set; }
    public bool IsAlphaVisible { get; public set; }
    public BrushModes BrushMode { get; public set; }
    public GradientPropertyEditorMode GradientPropertyEditorMode { get; public set; }
    public bool IsOpenGradientPropertyEditor { get; public set; }
    public bool IsGradientPropertyEnabled { get; public set; }
    public bool EnableGradientToSolidSwitch { get; public set; }
    public bool IsGradientOriginVisible { get; public set; }
    public bool IsCenterVisible { get; public set; }
    public bool IsRadiusVisible { get; public set; }
    private static ColorEdit();
    [CompilerGeneratedAttribute]
private Rectangle get_rectBar();
    [CompilerGeneratedAttribute]
private void set_rectBar(Rectangle value);
    [CompilerGeneratedAttribute]
internal Canvas get_canvasBar();
    [CompilerGeneratedAttribute]
internal void set_canvasBar(Canvas value);
    [CompilerGeneratedAttribute]
internal Grid get_gradientGrid();
    [CompilerGeneratedAttribute]
internal void set_gradientGrid(Grid value);
    [CompilerGeneratedAttribute]
internal GradientItemCollection get_gradientItemCollection();
    [CompilerGeneratedAttribute]
internal void set_gradientItemCollection(GradientItemCollection value);
    [CompilerGeneratedAttribute]
internal Rectangle get_CurrentColor();
    [CompilerGeneratedAttribute]
internal void set_CurrentColor(Rectangle value);
    [CompilerGeneratedAttribute]
internal Rectangle get_SelectedColor();
    [CompilerGeneratedAttribute]
internal void set_SelectedColor(Rectangle value);
    public bool get_EnableToolTip();
    public void set_EnableToolTip(bool value);
    public bool get_IsScRGBColor();
    public void set_IsScRGBColor(bool value);
    public float get_R();
    public void set_R(float value);
    public float get_G();
    public void set_G(float value);
    public float get_B();
    public void set_B(float value);
    public float get_A();
    public void set_A(float value);
    public Brush get_BackgroundA();
    public void set_BackgroundA(Brush value);
    public Brush get_BackgroundR();
    public void set_BackgroundR(Brush value);
    public Brush get_BackgroundG();
    public void set_BackgroundG(Brush value);
    public Brush get_BackgroundB();
    public void set_BackgroundB(Brush value);
    public float get_H();
    public void set_H(float value);
    public float get_S();
    public void set_S(float value);
    public float get_V();
    public void set_V(float value);
    private float get_SelectorPositionX();
    private void set_SelectorPositionX(float value);
    private float get_SelectorPositionY();
    private void set_SelectorPositionY(float value);
    private float get_SliderValueHSV();
    private void set_SliderValueHSV(float value);
    private float get_SliderMaxValueHSV();
    private void set_SliderMaxValueHSV(float value);
    public HSV get_HSV();
    public void set_HSV(HSV value);
    public ControlTemplate get_ThumbTemplate();
    public void set_ThumbTemplate(ControlTemplate value);
    private float get_WordKnownColorsPositionX();
    private void set_WordKnownColorsPositionX(float value);
    private float get_WordKnownColorsPositionY();
    private void set_WordKnownColorsPositionY(float value);
    public ColorSelectionMode get_VisualizationStyle();
    public void set_VisualizationStyle(ColorSelectionMode value);
    public Color get_Color();
    public void set_Color(Color value);
    public Point get_Startpoint();
    public void set_Startpoint(Point value);
    public Point get_RadiusX();
    public void set_RadiusX(Point value);
    public Point get_RadiusY();
    public void set_RadiusY(Point value);
    public Point get_GradientOrigin();
    public void set_GradientOrigin(Point value);
    public Point get_Endpoint();
    public void set_Endpoint(Point value);
    public Point get_CentrePoint();
    public void set_CentrePoint(Point value);
    public Brush get_Brush();
    public void set_Brush(Brush value);
    public Color get_InvertColor();
    public void set_InvertColor(Color value);
    public bool get_IsAlphaVisible();
    public void set_IsAlphaVisible(bool value);
    public BrushModes get_BrushMode();
    public void set_BrushMode(BrushModes value);
    public GradientPropertyEditorMode get_GradientPropertyEditorMode();
    public void set_GradientPropertyEditorMode(GradientPropertyEditorMode value);
    public bool get_IsOpenGradientPropertyEditor();
    public void set_IsOpenGradientPropertyEditor(bool value);
    public bool get_IsGradientPropertyEnabled();
    public void set_IsGradientPropertyEnabled(bool value);
    public bool get_EnableGradientToSolidSwitch();
    public void set_EnableGradientToSolidSwitch(bool value);
    private void ColorEdit_Loaded(object sender, RoutedEventArgs e);
    private void Gradientorigin_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Centre_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void mye_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void Initialize();
    public void add_RChanged(PropertyChangedCallback value);
    public void remove_RChanged(PropertyChangedCallback value);
    public void add_GChanged(PropertyChangedCallback value);
    public void remove_GChanged(PropertyChangedCallback value);
    public void add_BChanged(PropertyChangedCallback value);
    public void remove_BChanged(PropertyChangedCallback value);
    public void add_AChanged(PropertyChangedCallback value);
    public void remove_AChanged(PropertyChangedCallback value);
    public void add_HChanged(PropertyChangedCallback value);
    public void remove_HChanged(PropertyChangedCallback value);
    public void add_SChanged(PropertyChangedCallback value);
    public void remove_SChanged(PropertyChangedCallback value);
    public void add_VChanged(PropertyChangedCallback value);
    public void remove_VChanged(PropertyChangedCallback value);
    public void add_SliderValueHSVChanged(PropertyChangedCallback value);
    public void remove_SliderValueHSVChanged(PropertyChangedCallback value);
    public void add_VisualizationStyleChanged(PropertyChangedCallback value);
    public void remove_VisualizationStyleChanged(PropertyChangedCallback value);
    public void add_ColorChanged(PropertyChangedCallback value);
    public void remove_ColorChanged(PropertyChangedCallback value);
    public void add_GradientPropertyEditorModeChanged(PropertyChangedCallback value);
    public void remove_GradientPropertyEditorModeChanged(PropertyChangedCallback value);
    public void add_IsOpenGradientPropertyEditorChanged(PropertyChangedCallback value);
    public void remove_IsOpenGradientPropertyEditorChanged(PropertyChangedCallback value);
    public void add_IsGradientPropertyEnabledChanged(PropertyChangedCallback value);
    public void remove_IsGradientPropertyEnabledChanged(PropertyChangedCallback value);
    public void add_EnableToolTipChanged(PropertyChangedCallback value);
    public void remove_EnableToolTipChanged(PropertyChangedCallback value);
    private static void OnRChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnGChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnBChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnAChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnHChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnVChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSliderValueHSVChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnVisualizationStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnEnableSwitchChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnSelectedBrushChanged(DependencyPropertyChangedEventArgs e);
    internal void RefreshGradientStoppers(Brush brush);
    private static void OnBrushModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnGradientPropertyEditorModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsOpenGradientPropertyEditorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnEnableToolTipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnGradientPropertyEditorModeChanged(DependencyPropertyChangedEventArgs e);
    private void OnIsOpenGradientPropertyEditorChanged(DependencyPropertyChangedEventArgs e);
    private void OnIsGradientPropertyEnabledChanged(DependencyPropertyChangedEventArgs e);
    private static void OnIsGradientPropertyEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnEnableToolTipChanged(DependencyPropertyChangedEventArgs e);
    private void OnBrushModeChanged(DependencyPropertyChangedEventArgs e);
    public static String[] SuchColor(Color color);
    private static UInt32[] InitColorTable();
    private static Color FromUInt32(UInt32 argb);
    private void OnRChanged(DependencyPropertyChangedEventArgs e);
    private void OnGChanged(DependencyPropertyChangedEventArgs e);
    private void OnBChanged(DependencyPropertyChangedEventArgs e);
    private void UpdateColor();
    private float GetHPart();
    private void OnAChanged(DependencyPropertyChangedEventArgs e);
    private void ChangeColorWhite(object sender, ExecutedRoutedEventArgs e);
    private void ChangeColorBlack(object sender, ExecutedRoutedEventArgs e);
    private void UpdateColorBarSlider();
    private void OnHChanged(DependencyPropertyChangedEventArgs e);
    private void OnSChanged(DependencyPropertyChangedEventArgs e);
    private void OnVChanged(DependencyPropertyChangedEventArgs e);
    private void OnSliderValueHSVChanged(DependencyPropertyChangedEventArgs e);
    private void HSVSelected(object sender, RoutedEventArgs args);
    private void UpdateVisibility(Visibility visibility);
    private void updateBrushMode(Visibility visibility);
    private void ProcessColorPickingStart(object sender, RoutedEventArgs e);
    private void ProcessColorPickingCancel(object sender, RoutedEventArgs e);
    public virtual void OnApplyTemplate();
    private void M_systemColors_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void M_colorPalette_MouseLeave(object sender, MouseEventArgs e);
    private void Window_MouseDown(object sender, MouseButtonEventArgs e);
    private void Content_Loaded(object sender, RoutedEventArgs e);
    private void Toggle_LostFocus(object sender, RoutedEventArgs e);
    private void m_colorPalette_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void m_colorPalette_TouchUp(object sender, TouchEventArgs e);
    private void m_colorPalette_TouchDown(object sender, TouchEventArgs e);
    private void OnPreviewMouseDown(object sender, MouseButtonEventArgs e);
    private void Window_LocationChanged(object sender, EventArgs e);
    private void Window_Deactivated(object sender, EventArgs e);
    internal void SelectedColor_MouseLeftButtonDown(object sender, MouseEventArgs args);
    internal void CurrentColor_MouseLeftButtonDown(object sender, MouseEventArgs args);
    internal void SwapColors();
    internal void SwapColor();
    internal void SetBrush(GradientBrush gbrush);
    private void m_colorStringEditor_GotFocus(object sender, RoutedEventArgs e);
    private void m_colorStringEditor_MouseDown(object sender, MouseButtonEventArgs e);
    private void sval_LostFocus(object sender, RoutedEventArgs e);
    private void tb_LostFocus(object sender, RoutedEventArgs e);
    private void m_colorStringEditor_TextChanged(object sender, TextChangedEventArgs e);
    private void mys_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void popupButton_Click(object sender, RoutedEventArgs e);
    private void Gradient_Click(object sender, RoutedEventArgs e);
    private void Solid_Click(object sender, RoutedEventArgs e);
    private void Reverse_Click(object sender, RoutedEventArgs e);
    private void radial_Click(object sender, RoutedEventArgs e);
    private void linear_Click(object sender, RoutedEventArgs e);
    private void rectBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal void RemoveSelection();
    internal void fillGradient(GradientStopItem gradstop);
    private void applygradient();
    private void PickerColorBar_ColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void m_colorStringEditor_KeyDown(object sender, KeyEventArgs e);
    private void ColorStringEditor_LostFocus(object sender, RoutedEventArgs e);
    private void ColorEdit_SizeChanged(object sender, SizeChangedEventArgs e);
    private void OnVisualizationStyleChanged(DependencyPropertyChangedEventArgs e);
    private void OnColorChanged(DependencyPropertyChangedEventArgs e);
    private void ChangetheColorValues(DependencyPropertyChangedEventArgs e);
    private void obj_DropDownOpened(object sender, EventArgs e);
    internal void CalculateHSVSelectorPosition();
    private float GetXPositionForSV();
    private float GetYPositionForV();
    private float GetYPositionForHS();
    private float GetXPositionForH();
    private void OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void OnMouseMove(object sender, MouseEventArgs e);
    private Point FindColorHSV(Point p);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    private void CalculateWordKnownColorsPosition(Point point);
    private ToolTip GetColorsTooltip();
    private void FindColorH(Point p);
    private void FindColorS(Point p);
    private void FindColorV(Point p);
    internal void CalculateBackground();
    public bool get_IsGradientOriginVisible();
    public void set_IsGradientOriginVisible(bool value);
    public bool get_IsCenterVisible();
    public void set_IsCenterVisible(bool value);
    public bool get_IsRadiusVisible();
    public void set_IsRadiusVisible(bool value);
    public void CalculateHSVBackground();
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ColorItem : object {
    private string m_name;
    private SolidColorBrush m_brush;
    public string Name { get; public set; }
    public SolidColorBrush Brush { get; }
    public ColorItem(string name, SolidColorBrush brush);
    public string get_Name();
    public void set_Name(string value);
    public SolidColorBrush get_Brush();
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ColorItemList : ObservableCollection`1<ColorItem> {
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("True")]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.ColorPicker : Control {
    private static string C_colorToggleButton;
    private static string C_colorEditPopup;
    private static string C_colorEdit;
    private static string C_color;
    private static string C_defaultSkinName;
    private static string C_colorEditContainerBrush;
    private static string C_systemColors;
    internal LinearGradientBrush m_gradient;
    internal ColorEdit m_colorEditor;
    private ComboBox m_systemColors;
    private Popup m_colorEditorPopup;
    private ToggleButton m_colorToggleButton;
    public static RoutedCommand M_displayPopup;
    private Window window;
    private Brush m_tempBrush;
    internal bool flag;
    private CommandBinding displayPopup;
    private ComboBox obj;
    public static DependencyProperty HeaderTemplateProperty;
    internal static DependencyProperty ColorProperty;
    internal static DependencyProperty IsColorPaletteVisibleProperty;
    public static DependencyProperty EnableSolidToGradientSwitchProperty;
    public static DependencyProperty BrushProperty;
    public static DependencyProperty VisualizationStyleProperty;
    public static DependencyProperty BrushModeProperty;
    public static DependencyProperty GradientPropertyEditorModeProperty;
    public static DependencyProperty IsOpenGradientPropertyEditorProperty;
    public static DependencyProperty GradientBrushDisplayModeProperty;
    public static DependencyProperty IsGradientPropertyEnabledProperty;
    public static DependencyProperty ColorEditBackgroundProperty;
    public static DependencyProperty EnableToolTipProperty;
    public static DependencyProperty IsAlphaVisibleProperty;
    public static DependencyProperty IsGradientOriginVisibleProperty;
    public static DependencyProperty IsCenterVisibleProperty;
    public static DependencyProperty IsRadiusVisibleProperty;
    private PropertyChangedCallback ColorChanged;
    private EventHandler`1<SelectedColorChangedEventArgs> SelectedColorChanged;
    private PropertyChangedCallback EnableToolTipChanged;
    private PropertyChangedCallback SelectedBrushChanged;
    private PropertyChangedCallback SelectedBrushModeChanged;
    private PropertyChangedCallback GradientPropertyEditorModeChanged;
    private PropertyChangedCallback GradientBrushDisplayModeChanged;
    private PropertyChangedCallback IsOpenGradientPropertyEditorChanged;
    private PropertyChangedCallback IsGradientPropertyEnabledChanged;
    public DataTemplate HeaderTemplate { get; public set; }
    public Color Color { get; public set; }
    public bool IsColorPaletteVisible { get; public set; }
    public ColorSelectionMode VisualizationStyle { get; public set; }
    public Brush ColorEditBackground { get; public set; }
    public bool IsAlphaVisible { get; public set; }
    public BrushModes BrushMode { get; public set; }
    public bool EnableSolidToGradientSwitch { get; public set; }
    public Brush Brush { get; public set; }
    public GradientPropertyEditorMode GradientPropertyEditorMode { get; public set; }
    public GradientBrushDisplayMode GradientBrushDisplayMode { get; public set; }
    public bool IsOpenGradientPropertyEditor { get; public set; }
    public bool IsGradientPropertyEnabled { get; public set; }
    public bool EnableToolTip { get; public set; }
    public bool IsGradientOriginVisible { get; public set; }
    public bool IsCenterVisible { get; public set; }
    public bool IsRadiusVisible { get; public set; }
    private static ColorPicker();
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public Color get_Color();
    public void set_Color(Color value);
    public bool get_IsColorPaletteVisible();
    public void set_IsColorPaletteVisible(bool value);
    public ColorSelectionMode get_VisualizationStyle();
    public void set_VisualizationStyle(ColorSelectionMode value);
    public Brush get_ColorEditBackground();
    public void set_ColorEditBackground(Brush value);
    public bool get_IsAlphaVisible();
    public void set_IsAlphaVisible(bool value);
    public BrushModes get_BrushMode();
    public void set_BrushMode(BrushModes value);
    public bool get_EnableSolidToGradientSwitch();
    public void set_EnableSolidToGradientSwitch(bool value);
    public Brush get_Brush();
    public void set_Brush(Brush value);
    public GradientPropertyEditorMode get_GradientPropertyEditorMode();
    public void set_GradientPropertyEditorMode(GradientPropertyEditorMode value);
    public GradientBrushDisplayMode get_GradientBrushDisplayMode();
    public void set_GradientBrushDisplayMode(GradientBrushDisplayMode value);
    public bool get_IsOpenGradientPropertyEditor();
    public void set_IsOpenGradientPropertyEditor(bool value);
    public bool get_IsGradientPropertyEnabled();
    public void set_IsGradientPropertyEnabled(bool value);
    public bool get_EnableToolTip();
    public void set_EnableToolTip(bool value);
    public bool get_IsGradientOriginVisible();
    public void set_IsGradientOriginVisible(bool value);
    public bool get_IsCenterVisible();
    public void set_IsCenterVisible(bool value);
    public bool get_IsRadiusVisible();
    public void set_IsRadiusVisible(bool value);
    public void add_ColorChanged(PropertyChangedCallback value);
    public void remove_ColorChanged(PropertyChangedCallback value);
    public void add_SelectedColorChanged(EventHandler`1<SelectedColorChangedEventArgs> value);
    public void remove_SelectedColorChanged(EventHandler`1<SelectedColorChangedEventArgs> value);
    public void add_EnableToolTipChanged(PropertyChangedCallback value);
    public void remove_EnableToolTipChanged(PropertyChangedCallback value);
    public void add_SelectedBrushChanged(PropertyChangedCallback value);
    public void remove_SelectedBrushChanged(PropertyChangedCallback value);
    public void add_SelectedBrushModeChanged(PropertyChangedCallback value);
    public void remove_SelectedBrushModeChanged(PropertyChangedCallback value);
    public void add_GradientPropertyEditorModeChanged(PropertyChangedCallback value);
    public void remove_GradientPropertyEditorModeChanged(PropertyChangedCallback value);
    public void add_GradientBrushDisplayModeChanged(PropertyChangedCallback value);
    public void remove_GradientBrushDisplayModeChanged(PropertyChangedCallback value);
    public void add_IsOpenGradientPropertyEditorChanged(PropertyChangedCallback value);
    public void remove_IsOpenGradientPropertyEditorChanged(PropertyChangedCallback value);
    public void add_IsGradientPropertyEnabledChanged(PropertyChangedCallback value);
    public void remove_IsGradientPropertyEnabledChanged(PropertyChangedCallback value);
    private static void OnColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSelectedBrushModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnSelectedBrushModeChanged(DependencyPropertyChangedEventArgs e);
    private static void OnSelectedBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnSelectedBrushChanged(DependencyPropertyChangedEventArgs e);
    private static void OnGradientPropertyEditorModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnGradientPropertyEditorModeChanged(DependencyPropertyChangedEventArgs e);
    private static void OnIsOpenGradientPropertyEditorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnIsOpenGradientPropertyEditorChanged(DependencyPropertyChangedEventArgs e);
    private static void OnIsGradientPropertyEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnIsGradientPropertyEnabledChanged(DependencyPropertyChangedEventArgs e);
    private static void OnGradientBrushDisplayModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnGradientBrushDisplayModeChanged(DependencyPropertyChangedEventArgs e);
    private static void OnColorEditBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnEnableToolTipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnEnableSwitchChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void instance_Loaded(object sender, RoutedEventArgs e);
    private void OnEnableSwitchChanged(DependencyPropertyChangedEventArgs e);
    private static void IsAlphaVisiblePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public virtual void OnApplyTemplate();
    private void Window_PreviewMouseDown(object sender, MouseButtonEventArgs e);
    private void OnColorEditPopupClosed(object sender, EventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    internal void SelectPaletteColor();
    private void obj_DropDownOpened(object sender, EventArgs e);
    private void OnColorChanged(DependencyPropertyChangedEventArgs e);
    private void OnColorEditBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private void OnEnableToolTipChanged(DependencyPropertyChangedEventArgs e);
    public void ColorChange(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private void DisplayPopup(object sender, RoutedEventArgs e);
    private void OnKeyDown(object sender, KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    private void OnMouseDownOutsideCapturedElement(object sender, MouseButtonEventArgs e);
    private void ColorEditorPopup_Opened(object sender, EventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    private void OnMouseDown(object sender, MouseButtonEventArgs e);
    public sealed virtual void Dispose();
    internal void Dispose(bool disposing);
}
[ValueConversionAttribute("System.Windows.Media.Color", "System.Windows.Media.Brush")]
public class Syncfusion.Windows.Shared.ColorToBrushConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.ColorToHSVBackgroundConverter : object {
    private HSV m_hsv;
    private float m_h;
    private float m_s;
    private float m_v;
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    private Brush GenerateHSVBrush();
    private Brush GenerateHBrush();
    private Brush GenerateSBrush();
    private Brush GenerateVBrush();
    private Brush GenerateSliderBrushHSV();
    private Brush GenerateHorizontalSliderBrush();
    private Brush GenerateHSliderBrush();
    private DrawingBrush GetHSliderBrush(double brushStartX, double brushStartY, double brushEndX, double brushEndY);
    private Brush GenerateSSliderBrush();
    private Brush GenerateVSliderBrush();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Shared.ComboBoxAdvAutomationPeer : SelectorAutomationPeer {
    private ComboBoxAdv MyOwner { get; }
    public ComboBoxAdvAutomationPeer(ComboBoxAdv control);
    protected virtual string GetAutomationIdCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
    internal virtual void RaiseValueChangedEvent();
    private ComboBoxAdv get_MyOwner();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Shared.ComboBoxItemAdvAutomationPeer : FrameworkElementAutomationPeer {
    private ComboBoxItemAdv MyOwner { get; }
    public ComboBoxItemAdvAutomationPeer(ComboBoxItemAdv control);
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    internal void RaiseValueChangedEvent();
    private ComboBoxItemAdv get_MyOwner();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Shared.ComboBoxItemAdvDataAutomationPeer : ItemAutomationPeer {
    public ComboBoxItemAdvDataAutomationPeer(object item, ItemsControlAutomationPeer itemsControlAutomationPeer);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Syncfusion.Windows.Shared.Controls.Editors.AutomationPeer.DoubleTextBoxAutomationPeer : TextBoxAutomationPeer {
    private DoubleTextBox MyOwner { get; }
    public DoubleTextBoxAutomationPeer(DoubleTextBox owner);
    private DoubleTextBox get_MyOwner();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Shared.Controls.TimeSpanEditAutomationPeer : FrameworkElementAutomationPeer {
    private TimeSpanEdit MyOwner { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    public TimeSpanEditAutomationPeer(TimeSpanEdit control);
    private TimeSpanEdit get_MyOwner();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetHelpTextCore();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string value);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
}
[ExtensionAttribute]
public static class Syncfusion.Windows.Shared.ConversionExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<long> ConvertToInt64Null(string text);
    [ExtensionAttribute]
public static Nullable`1<double> ConvertToDoubleNull(string text, CultureInfo culture, NumberFormatInfo numberformat);
    [ExtensionAttribute]
public static Nullable`1<decimal> ConvertToDecimalNull(string text);
}
public class Syncfusion.Windows.Shared.CornerRadiusConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.CountToVisibilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.CultureInfoTypeConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum Syncfusion.Windows.Shared.CurrencySymbolPosition : Enum {
    public int value__;
    public static CurrencySymbolPosition Left;
    public static CurrencySymbolPosition Right;
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.CurrencyTextBox : EditorBase {
    private PropertyChangedCallback MinValueChanged;
    private PropertyChangedCallback CurrencySymbolPositionChanged;
    private PropertyChangedCallback ValueChanged;
    private PropertyChangedCallback MaxValueChanged;
    private PropertyChangedCallback CurrencyDecimalDigitsChanged;
    private PropertyChangedCallback CurrencyDecimalSeparatorChanged;
    private PropertyChangedCallback CurrencyGroupSeparatorChanged;
    private PropertyChangedCallback CurrencyGroupSizesChanged;
    private PropertyChangedCallback CurrencyNegativePatternChanged;
    private PropertyChangedCallback CurrencyPositivePatternChanged;
    private PropertyChangedCallback CurrencySymbolChanged;
    private PropertyChangedCallback ValidationCompletedChanged;
    private PropertyChangedCallback InvalidValueBehaviorChanged;
    private StringValidationCompletedEventHandler ValueValidationCompleted;
    private PropertyChangedCallback ValidationValueChanged;
    private CancelEventHandler Validating;
    private EventHandler Validated;
    internal Nullable`1<decimal> OldValue;
    internal Nullable`1<decimal> mValue;
    internal Nullable`1<bool> mValueChanged;
    internal bool mIsLoaded;
    internal string checktext;
    private string currencySymbol;
    private RepeatButton upButton;
    private RepeatButton downButton;
    internal int currencyDecimalDigits;
    internal bool IsExceedCurrencyDecimalDigits;
    private ScrollViewer PART_ContentHost;
    private Border Focused_Border;
    private bool _validatingrResult;
    private bool IsGotFocus;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty MinValueProperty;
    public static DependencyProperty MaxValueProperty;
    public static DependencyProperty CurrencyDecimalDigitsProperty;
    public static DependencyProperty CurrencyDecimalSeparatorProperty;
    public static DependencyProperty CurrencyGroupSeparatorProperty;
    public static DependencyProperty GroupSeperatorEnabledProperty;
    public static DependencyProperty CurrencyGroupSizesProperty;
    public static DependencyProperty CurrencyNegativePatternProperty;
    public static DependencyProperty CurrencyPositivePatternProperty;
    public static DependencyProperty CurrencySymbolProperty;
    public static DependencyProperty ScrollIntervalProperty;
    public static DependencyProperty MaximumCurrencyDecimalDigitsProperty;
    public static DependencyProperty MinimumCurrencyDecimalDigitsProperty;
    internal bool IsValueChanged;
    public static DependencyProperty CurrencySymbolPositionProperty;
    public static DependencyProperty NullValueProperty;
    public static DependencyProperty ValueValidationProperty;
    public static DependencyProperty InvalidValueBehaviorProperty;
    public static DependencyProperty ValidationValueProperty;
    public static DependencyProperty ValidationCompletedProperty;
    [CompilerGeneratedAttribute]
private ICommand <pastecommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <copycommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <cutcommand>k__BackingField;
    public ICommand pastecommand { get; private set; }
    public ICommand copycommand { get; private set; }
    public ICommand cutcommand { get; private set; }
    public Nullable`1<decimal> Value { get; public set; }
    public decimal MinValue { get; public set; }
    public decimal MaxValue { get; public set; }
    public int CurrencyDecimalDigits { get; public set; }
    public string CurrencyDecimalSeparator { get; public set; }
    public string CurrencyGroupSeparator { get; public set; }
    public bool GroupSeperatorEnabled { get; public set; }
    public Int32Collection CurrencyGroupSizes { get; public set; }
    public int CurrencyNegativePattern { get; public set; }
    public int CurrencyPositivePattern { get; public set; }
    public string CurrencySymbol { get; public set; }
    public double ScrollInterval { get; public set; }
    public int MaximumCurrencyDecimalDigits { get; public set; }
    public int MinimumCurrencyDecimalDigits { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public CurrencySymbolPosition CurrencySymbolPosition { get; public set; }
    public Nullable`1<decimal> NullValue { get; public set; }
    public StringValidation ValueValidation { get; public set; }
    public InvalidInputBehavior InvalidValueBehavior { get; public set; }
    public string ValidationValue { get; public set; }
    public bool ValidationCompleted { get; public set; }
    private static CurrencyTextBox();
    public void add_MinValueChanged(PropertyChangedCallback value);
    public void remove_MinValueChanged(PropertyChangedCallback value);
    public void add_CurrencySymbolPositionChanged(PropertyChangedCallback value);
    public void remove_CurrencySymbolPositionChanged(PropertyChangedCallback value);
    public void add_ValueChanged(PropertyChangedCallback value);
    public void remove_ValueChanged(PropertyChangedCallback value);
    public void add_MaxValueChanged(PropertyChangedCallback value);
    public void remove_MaxValueChanged(PropertyChangedCallback value);
    public void add_CurrencyDecimalDigitsChanged(PropertyChangedCallback value);
    public void remove_CurrencyDecimalDigitsChanged(PropertyChangedCallback value);
    public void add_CurrencyDecimalSeparatorChanged(PropertyChangedCallback value);
    public void remove_CurrencyDecimalSeparatorChanged(PropertyChangedCallback value);
    public void add_CurrencyGroupSeparatorChanged(PropertyChangedCallback value);
    public void remove_CurrencyGroupSeparatorChanged(PropertyChangedCallback value);
    public void add_CurrencyGroupSizesChanged(PropertyChangedCallback value);
    public void remove_CurrencyGroupSizesChanged(PropertyChangedCallback value);
    public void add_CurrencyNegativePatternChanged(PropertyChangedCallback value);
    public void remove_CurrencyNegativePatternChanged(PropertyChangedCallback value);
    public void add_CurrencyPositivePatternChanged(PropertyChangedCallback value);
    public void remove_CurrencyPositivePatternChanged(PropertyChangedCallback value);
    public void add_CurrencySymbolChanged(PropertyChangedCallback value);
    public void remove_CurrencySymbolChanged(PropertyChangedCallback value);
    public void add_ValidationCompletedChanged(PropertyChangedCallback value);
    public void remove_ValidationCompletedChanged(PropertyChangedCallback value);
    public void add_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void remove_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void add_ValueValidationCompleted(StringValidationCompletedEventHandler value);
    public void remove_ValueValidationCompleted(StringValidationCompletedEventHandler value);
    public void add_ValidationValueChanged(PropertyChangedCallback value);
    public void remove_ValidationValueChanged(PropertyChangedCallback value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    [CompilerGeneratedAttribute]
public ICommand get_pastecommand();
    [CompilerGeneratedAttribute]
private void set_pastecommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_copycommand();
    [CompilerGeneratedAttribute]
private void set_copycommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_cutcommand();
    [CompilerGeneratedAttribute]
private void set_cutcommand(ICommand value);
    private void _pastecommand(object parameter);
    private void _copycommand(object parameter);
    private void _cutcommand(object parameter);
    private bool Canpaste(object parameter);
    public virtual void OnApplyTemplate();
    private void CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    private void Paste();
    private void copy();
    private void SpinButton_Click(object sender, RoutedEventArgs e);
    private void ChangeValue(bool canIncrement);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void cut();
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    internal virtual void OnCultureChanged();
    internal virtual void OnNumberFormatChanged();
    protected virtual void OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    public virtual void OnUseNullOptionChanged(DependencyPropertyChangedEventArgs args);
    internal void FormatText();
    internal void SetValue(Nullable`1<bool> IsReload, Nullable`1<decimal> _Value);
    internal Nullable`1<decimal> ValidateValue(Nullable`1<decimal> Val);
    internal CultureInfo GetCulture();
    private void CheckIsExceedDecimalDigits();
    private void UpdateCurrencyDecimalDigits();
    internal static int CountDecimalDigits(string p, DependencyObject d);
    internal void UpdateCurrencyDecimalDigits(int count);
    private static object CoerceValue(DependencyObject d, object baseValue);
    private void IntegerTextbox_Loaded(object sender, RoutedEventArgs e);
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    public Nullable`1<decimal> get_Value();
    public void set_Value(Nullable`1<decimal> value);
    public decimal get_MinValue();
    public void set_MinValue(decimal value);
    public decimal get_MaxValue();
    public void set_MaxValue(decimal value);
    public int get_CurrencyDecimalDigits();
    public void set_CurrencyDecimalDigits(int value);
    public string get_CurrencyDecimalSeparator();
    public void set_CurrencyDecimalSeparator(string value);
    public string get_CurrencyGroupSeparator();
    public void set_CurrencyGroupSeparator(string value);
    public bool get_GroupSeperatorEnabled();
    public void set_GroupSeperatorEnabled(bool value);
    public Int32Collection get_CurrencyGroupSizes();
    public void set_CurrencyGroupSizes(Int32Collection value);
    public int get_CurrencyNegativePattern();
    public void set_CurrencyNegativePattern(int value);
    public int get_CurrencyPositivePattern();
    public void set_CurrencyPositivePattern(int value);
    public string get_CurrencySymbol();
    public void set_CurrencySymbol(string value);
    public double get_ScrollInterval();
    public void set_ScrollInterval(double value);
    public int get_MaximumCurrencyDecimalDigits();
    public void set_MaximumCurrencyDecimalDigits(int value);
    public int get_MinimumCurrencyDecimalDigits();
    public void set_MinimumCurrencyDecimalDigits(int value);
    public static void OnCurrencyDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencyDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    public static void OnCurrencyDecimalSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencyDecimalSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnCurrencyGroupSizesChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencyGroupSizesChanged(DependencyPropertyChangedEventArgs args);
    private static object CoerceCurrencyGroupSeperator(DependencyObject d, object baseValue);
    public static void OnCurrencyGroupSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencyGroupSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnCurrencyNegativePatternChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencyNegativePatternChanged(DependencyPropertyChangedEventArgs args);
    public static void OnCurrencyPositivePatternChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencyPositivePatternChanged(DependencyPropertyChangedEventArgs args);
    public static void OnCurrencySymbolChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencySymbolChanged(DependencyPropertyChangedEventArgs args);
    public static void OnValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMinValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMaxValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaxValueChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMaximumCurrencyDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaximumCurrencyDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMinimumCurrencyDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMinimumCurrencyDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    public CurrencySymbolPosition get_CurrencySymbolPosition();
    public void set_CurrencySymbolPosition(CurrencySymbolPosition value);
    public static void OnCurrencySymbolPositionChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencySymbolPositionChanged(DependencyPropertyChangedEventArgs args);
    public Nullable`1<decimal> get_NullValue();
    public void set_NullValue(Nullable`1<decimal> value);
    public static void OnNullValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNullValueChanged(DependencyPropertyChangedEventArgs args);
    public StringValidation get_ValueValidation();
    public void set_ValueValidation(StringValidation value);
    public InvalidInputBehavior get_InvalidValueBehavior();
    public void set_InvalidValueBehavior(InvalidInputBehavior value);
    public static void OnInvalidValueBehaviorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnInvalidValueBehaviorChanged(DependencyPropertyChangedEventArgs args);
    public string get_ValidationValue();
    public void set_ValidationValue(string value);
    public static void OnValidationValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationValueChanged(DependencyPropertyChangedEventArgs args);
    public bool get_ValidationCompleted();
    public void set_ValidationCompleted(bool value);
    public static void OnValidationCompletedPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationCompletedPropertyChanged(DependencyPropertyChangedEventArgs args);
    internal void OnValueValidationCompleted(StringValidationEventArgs e);
    internal void OnValidated(EventArgs e);
    internal bool OnValidating(CancelEventArgs e);
}
internal class Syncfusion.Windows.Shared.CurrencyValueHandler : object {
    public static CurrencyValueHandler currencyValueHandler;
    private bool selectedAll;
    private NumberFormatInfo numberFormat;
    private string maskedText;
    private int selectionStart;
    private int selectionEnd;
    private int selectionLength;
    private int separatorStart;
    private int separatorEnd;
    private int caretPosition;
    private string unmaskedText;
    private decimal previewValue;
    private bool minusKeyValidationFlag;
    private bool valueAvailable;
    private double convertedValue;
    private int currencyFlag;
    private bool positionFlag;
    private static CurrencyValueHandler();
    public bool MatchWithMask(CurrencyTextBox currencyTextBox, string text);
    public bool HandleKeyDown(CurrencyTextBox currencyTextBox, KeyEventArgs eventArgs);
    public bool HandleBackSpaceKey(CurrencyTextBox currencyTextBox);
    public bool HandleDeleteKey(CurrencyTextBox currencyTextBox);
    public bool HandleUpDownKey(CurrencyTextBox currencyTextBox, bool isUpKeyPressed);
    private void InitializeValues(CurrencyTextBox currencyTextBox);
    private void GenerateUnmaskedText(CurrencyTextBox currencyTextBox, bool isMatchingMask);
    private bool CharacterValidation(CurrencyTextBox currencyTextBox, string text);
    private bool TextEditingForMatchingMask(CurrencyTextBox currencyTextBox, string text);
    private void UpdateCurrencyDecimalDigits(CurrencyTextBox currencyTextBox);
    private void TrimmingZerosinUnmaskedText();
    private bool TextEditingForBackspace(CurrencyTextBox currencyTextBox);
    private bool TextEditingForDelete(CurrencyTextBox currencyTextBox);
    private bool ValueValidation(CurrencyTextBox currencyTextBox);
    private bool StringValidationOnKeyPress(CurrencyTextBox currencyTextBox, bool isBackspaceKeyPressed);
}
public class Syncfusion.Windows.Shared.CursorHandler : object {
    public static bool GetCursorPos(POINT& lpPoint);
    public static bool SetCursorPos(int x, int y);
}
public class Syncfusion.Windows.Shared.CustomPathCarouselPanel : VirtualizingPanel {
    private Path _Path;
    private bool isRefreshing;
    private PathFractionRangeHandler m_PathFractionRangeHandler;
    private SortedDictionary`2<double, UIElement> sorteditems;
    private VirtualizingPanelHandler CurrentVirtualizingPanelHandler;
    private VirtualizingPanelHandler OldVirtualizingPanelHandler;
    private CarouselPanelHelper CarouselPanelHelper;
    internal Carousel Owner;
    internal CarouselItem removingItem;
    internal bool isRender;
    internal Size finalSize;
    internal Path DrawingPath;
    internal CarouselPathHelper carouselPathHelper;
    internal PathFractionCollection internalOpacityFractions;
    internal PathFractionCollection internalScaleFractions;
    internal PathFractionCollection internalSkewAngleXFractions;
    internal PathFractionCollection internalSkewAngleYFractions;
    internal int MaxPanelOffset;
    internal int ViewPanelOffset;
    internal int PanelOffset;
    internal VirtualizingPanelHandler NewVirtualizingPanelHandler;
    internal VirtualizingPanelHandler tempVirtualizingPanelHandler;
    public static DependencyProperty ItemsPerPageProperty;
    public static DependencyProperty TopItemPositionProperty;
    public static DependencyProperty OpacityEnabledProperty;
    public static DependencyProperty OpacityFractionsProperty;
    public static DependencyProperty ScalingEnabledProperty;
    public static DependencyProperty ScaleFractionsProperty;
    public static DependencyProperty SkewAngleXEnabledProperty;
    public static DependencyProperty SkewAngleXFractionsProperty;
    public static DependencyProperty SkewAngleYEnabledProperty;
    public static DependencyProperty SkewAngleYFractionsProperty;
    private static DependencyProperty ItemPathFractionManagerProperty;
    private static DependencyProperty PathFractionProperty;
    internal bool isControlsDefaultHeightUpdated;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate1;
    public Path Path { get; public set; }
    public int ItemsPerPage { get; public set; }
    public double TopItemPosition { get; public set; }
    public bool OpacityEnabled { get; public set; }
    public PathFractionCollection OpacityFractions { get; public set; }
    public bool ScalingEnabled { get; public set; }
    public PathFractionCollection ScaleFractions { get; public set; }
    public bool SkewAngleXEnabled { get; public set; }
    public PathFractionCollection SkewAngleXFractions { get; public set; }
    public bool SkewAngleYEnabled { get; public set; }
    public PathFractionCollection SkewAngleYFractions { get; public set; }
    internal PathFractionCollection InternalOpacityFractions { get; }
    internal PathFractionCollection InternalScaleFractions { get; }
    internal PathFractionCollection InternalSkewAngleXFractions { get; }
    internal PathFractionCollection InternalSkewAngleYFractions { get; }
    private bool ShouldLoadItems { get; }
    private static CustomPathCarouselPanel();
    public Path get_Path();
    public void set_Path(Path value);
    public int get_ItemsPerPage();
    public void set_ItemsPerPage(int value);
    public double get_TopItemPosition();
    public void set_TopItemPosition(double value);
    public bool get_OpacityEnabled();
    public void set_OpacityEnabled(bool value);
    public PathFractionCollection get_OpacityFractions();
    public void set_OpacityFractions(PathFractionCollection value);
    public bool get_ScalingEnabled();
    public void set_ScalingEnabled(bool value);
    public PathFractionCollection get_ScaleFractions();
    public void set_ScaleFractions(PathFractionCollection value);
    public bool get_SkewAngleXEnabled();
    public void set_SkewAngleXEnabled(bool value);
    public PathFractionCollection get_SkewAngleXFractions();
    public void set_SkewAngleXFractions(PathFractionCollection value);
    public bool get_SkewAngleYEnabled();
    public void set_SkewAngleYEnabled(bool value);
    public PathFractionCollection get_SkewAngleYFractions();
    public void set_SkewAngleYFractions(PathFractionCollection value);
    internal PathFractionCollection get_InternalOpacityFractions();
    internal PathFractionCollection get_InternalScaleFractions();
    internal PathFractionCollection get_InternalSkewAngleXFractions();
    internal PathFractionCollection get_InternalSkewAngleYFractions();
    private bool get_ShouldLoadItems();
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual UIElementCollection CreateUIElementCollection(FrameworkElement logicalParent);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnItemsChanged(object sender, ItemsChangedEventArgs args);
    protected virtual void OnRender(DrawingContext dc);
    private static double ArrangeVisibleChild(double childHeightStartPoint, UIElement child);
    private static void OnTopItemPositionChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static object CoerceTopItemPosition(DependencyObject obj, object value);
    private static double GetCurrentEffectValue(UIElement item, PathFractionCollection effectCollection);
    internal static double CalculateChange(double currentPathFraction, FractionValue stop1, FractionValue stop2);
    private static int GetOffsetFromCurrentArrangement(VisibleItemsHandler arrangement);
    internal static PathFractionManager GetPathFractionManager(UIElement element);
    internal static void SetPathFractionManager(UIElement element, PathFractionManager value);
    internal static void SetPathFraction(UIElement element, double value);
    internal static double GetPathFraction(UIElement element);
    internal static int GetItemCountLater(PathFractionRangeHandler range, int itemCount);
    internal static int GetItemCountBefore(PathFractionRangeHandler range);
    public void RenderAgain();
    public void MoveBy(int displacement);
    public void BringItemIntoView(UIElement item, bool isItemSelected);
    internal void MeasurePanel(Size availableSize);
    internal void RecalculatePosition(UIElement child);
    internal VisibleItemsHandler GetCurrentItemPathArrangement();
    internal void SetCustomPathWithItems(int numberOfItems);
    internal UIElement FindClosestElementToPathFraction(double point);
    internal void UpdatePanelOffset(int displacement);
    internal void MoveItemInternallyforoutofrange(int displacement);
    internal void MoveItemInternallyBy(int displacement);
    internal void Invalidate(bool invalidateVisual);
    internal void Refresh(bool isCollectionModified, int pathDisplacement);
    internal void FinishItemMovements();
    protected void OnItemsPerPageChanged(DependencyObject obj);
    private void CarouselPanel_Loaded(object sender, RoutedEventArgs e);
    private void SetPaths();
    private void SetDrawingPathFromPath(Path drawingPath);
    private void SetFractionPathDrawing(Path drawingPath);
    private void DrawPath(DrawingContext dc);
    private void ApplyOffsetTransform(UIElement item, MatrixTransform transform);
    private void SelectedItemChanged(object sender, RoutedEventArgs e);
    private void CleanUpItems();
    private void RemoveDisconnectedItems();
    private void CleanGeneratedItems();
    private void UpdateVisibleItems();
    private void UpdateChildPairs();
    private void GenerateItems();
    private void GenerateChildrenWithItemContainerGenerator();
    private void CleanUpItems(int firstVisibleItemIndex, int lastVisibleItemIndex);
    private void UpdateVisualization();
    private void UpdateZorder();
    private void UpdateOpacityFractions(UIElement item);
    private void UpdateScaleFractions(UIElement item, ScaleTransform& transform);
    private void UpdateSkewAngleXFractions(UIElement item, SkewTransform& transform);
    private void UpdateSkewAngleYFractions(UIElement item, SkewTransform& transform);
    private void CheckPanelOffset();
    private void SetMaximumandViewPanelOffset();
    private int CalculateMaximumOffset();
    private int GetMovementOffsetFromTopElement(UIElement element);
    private void Start_ItemMovement();
    private void PrepareItemsToMove(VirtualizingPanelHandler _VirtualizingPanelHandler);
    private int CoerceDisplacement(int displacement);
    private void InitializeItemMovement();
    private void CheckSelectedItem();
    private void TargetRendering(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__0(DependencyObject s, DependencyPropertyChangedEventArgs a);
}
public enum Syncfusion.Windows.Shared.DataState : Enum {
    public int value__;
    public static DataState Correct;
    public static DataState IncorrectDate;
    public static DataState IncorrectTime;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DataTemplateItem : object {
    private DateTime m_date;
    private DataTemplate m_template;
    public DateTime Date { get; public set; }
    public DataTemplate Template { get; public set; }
    public DataTemplateItem(DateTime date, DataTemplate template);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public DataTemplate get_Template();
    public void set_Template(DataTemplate value);
}
[DesignTimeVisibleAttribute("False")]
[DefaultMemberAttribute("Item")]
public class Syncfusion.Windows.Shared.DataTemplatesDictionary : Hashtable {
    private NotifyCollectionChangedEventHandler CollectionChanged;
    public object Item { get; public set; }
    public virtual void Add(object key, object value);
    public virtual void Remove(object key);
    public virtual void Clear();
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void NotifyCollectionChanged(NotifyCollectionChangedAction action, DataTemplateItem item);
}
public class Syncfusion.Windows.Shared.Date : ValueType {
    private int m_year;
    private int m_month;
    private int m_day;
    public int Year { get; public set; }
    public int Month { get; public set; }
    public int Day { get; public set; }
    public Date(int year, int month, int day);
    public Date(DateTime date, Calendar calendar);
    public int get_Year();
    public void set_Year(int value);
    public int get_Month();
    public void set_Month(int value);
    public int get_Day();
    public void set_Day(int value);
    public DateTime ToDateTime(Calendar calendar);
    public Date AddMonthToDate(int month);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public static bool op_Equality(Date a, Date b);
    public static bool op_Inequality(Date a, Date b);
    public static bool op_GreaterThan(Date a, Date b);
    public static bool op_LessThan(Date a, Date b);
    public static bool op_GreaterThanOrEqual(Date a, Date b);
    public static bool op_LessThanOrEqual(Date a, Date b);
    public sealed virtual bool Equals(Date other);
    public sealed virtual int CompareTo(Date other);
}
public enum Syncfusion.Windows.Shared.DatePart : Enum {
    public int value__;
    public static DatePart Year;
    public static DatePart Month;
    public static DatePart Day;
    public static DatePart Hour;
    public static DatePart Minute;
    public static DatePart Second;
    public static DatePart Fraction;
    public static DatePart Separator;
}
public enum Syncfusion.Windows.Shared.DateParts : Enum {
    public int value__;
    public static DateParts Year;
    public static DateParts Month;
    public static DateParts Day;
    public static DateParts None;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DatesCollection : ObservableCollection`1<DateTime> {
    private bool m_allowInsert;
    protected internal bool AllowInsert { get; protected internal set; }
    protected internal bool get_AllowInsert();
    protected internal void set_AllowInsert(bool value);
    public sealed virtual void Dispose();
    protected virtual void InsertItem(int index, DateTime item);
}
public class Syncfusion.Windows.Shared.DateTimeBase : TextBox {
    private PropertyChangedCallback IsDropDownOpenChanged;
    private PropertyChangedCallback UnderlyingDateTimeChanged;
    private PropertyChangedCallback IsScrollingOnCircleChanged;
    private PropertyChangedCallback CustomPatternChanged;
    private PropertyChangedCallback PatternChanged;
    private PropertyChangedCallback IsWatchEnabledChanged;
    private PropertyChangedCallback IsEmptyDateEnabledChanged;
    private PropertyChangedCallback IsButtonPopUpEnabledChanged;
    private PropertyChangedCallback IsCalendarEnabledChanged;
    private PropertyChangedCallback IsVisibleRepeatButtonChanged;
    private PropertyChangedCallback RepeatButtonBackgroundChanged;
    private PropertyChangedCallback RepeatButtonBorderBrushChanged;
    private PropertyChangedCallback RepeatButtonBorderThicknessChanged;
    private PropertyChangedCallback UpRepeatButtonMarginChanged;
    private PropertyChangedCallback DownRepeatButtonMarginChanged;
    private PropertyChangedCallback UpRepeatButtonTemplateChanged;
    private PropertyChangedCallback DownRepeatButtonTemplateChanged;
    [ObsoleteAttribute("ReadOnly Property is deprecated, use IsReadOnly Property instead")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DependencyProperty ReadOnlyProperty;
    private PropertyChangedCallback CultureInfoChanged;
    public static DependencyProperty CanEditProperty;
    public static DependencyProperty CustomPatternProperty;
    public static DependencyProperty DateTimeFormatProperty;
    public static DependencyProperty MaskedTextProperty;
    public static DependencyProperty CultureInfoProperty;
    public static DependencyProperty NoneDateTextProperty;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("IsScrollingOnCircle Property is deprecated, use EnableMouseWheelEdit Property instead")]
public static DependencyProperty IsScrollingOnCircleProperty;
    public static DependencyProperty EnableMouseWheelEditProperty;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public static DependencyProperty IncorrectForegroundProperty;
    public static DependencyProperty PatternProperty;
    public static DependencyProperty IsEmptyDateEnabledProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty IsEnabledRepeatButtonProperty;
    public static DependencyProperty IsVisibleRepeatButtonProperty;
    public static DependencyProperty IsPopupEnabledProperty;
    public static DependencyProperty IsButtonPopUpEnabledProperty;
    public static DependencyProperty IsCalendarEnabledProperty;
    public static DependencyProperty FormatCalendarProperty;
    internal static DependencyProperty UnderlyingDateTimeProperty;
    [BrowsableAttribute("False")]
[ObsoleteAttribute("CorrectForeground property is deprecated, use Foreground instead")]
[EditorBrowsableAttribute("1")]
public static DependencyProperty CorrectForegroundProperty;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public static DependencyProperty IsHoldMaxWidthProperty;
    public static DependencyProperty IsCultureRightToLeftProperty;
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DependencyProperty IsAutoCorrectProperty;
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DependencyProperty UncertainForegroundProperty;
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static DependencyProperty DateValidationModeProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public static DependencyProperty AutoCorrectedHiglightDurationProperty;
    internal static DependencyProperty IsEditableProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public static DependencyProperty CaretTemplateProperty;
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static DependencyProperty IsCaretAnimationProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public static DependencyProperty IsAnimationProperty;
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static DependencyProperty ScrollDurationProperty;
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DependencyProperty IsMaskInputEnabledProperty;
    public static DependencyProperty RepeatButtonBorderBrushProperty;
    public static DependencyProperty RepeatButtonBackgroundProperty;
    public static DependencyProperty RepeatButtonBorderThicknessProperty;
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DependencyProperty DownRepeatButtonContentTemplateProperty;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public static DependencyProperty UpRepeatButtonContentTemplateProperty;
    public static DependencyProperty UpRepeatButtonMarginProperty;
    public static DependencyProperty DownRepeatButtonMarginProperty;
    public static DependencyProperty SelectWholeContentProperty;
    public static DependencyProperty PopupDelayProperty;
    public static DependencyProperty UpRepeatButtonTemplateProperty;
    public static DependencyProperty DownRepeatButtonTemplateProperty;
    public static DependencyProperty DropDownButtonTemplateProperty;
    public static DependencyProperty ContentElementVisibilityProperty;
    public static DependencyProperty WatermarkVisibilityProperty;
    public static DependencyProperty IsWatchEnabledProperty;
    [ObsoleteAttribute("Use IsReadOnly Property")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool ReadOnly { get; public set; }
    public string CustomPattern { get; public set; }
    public CultureInfo CultureInfo { get; public set; }
    public DateTimeFormatInfo DateTimeFormat { get; public set; }
    public string NoneDateText { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("IsScrollingOnCircle property is deprecated, use EnableMouseWheelEdit instead")]
public bool IsScrollingOnCircle { get; public set; }
    public bool EnableMouseWheelEdit { get; public set; }
    public DateTimePattern Pattern { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public string MaskedText { get; public set; }
    public bool CanEdit { get; public set; }
    public Calendar FormatCalendar { get; public set; }
    internal Nullable`1<DateTime> UnderlyingDateTime { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use Foreground Property")]
public Brush CorrectForeground { get; public set; }
    public bool IsCultureRightToLeft { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public bool IsHoldMaxWidth { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool IsAutoCorrect { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Brush UncertainForeground { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[EditorBrowsableAttribute("1")]
public DateValidationMode DateValidationMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public double AutoCorrectedHiglightDuration { get; public set; }
    internal bool IsEditable { get; internal set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[EditorBrowsableAttribute("1")]
public ControlTemplate CaretTemplate { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[EditorBrowsableAttribute("1")]
public bool IsCaretAnimation { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public bool IsAnimation { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public double ScrollDuration { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[EditorBrowsableAttribute("1")]
public bool IsMaskInputEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public Brush IncorrectForeground { get; public set; }
    public Brush RepeatButtonBorderBrush { get; public set; }
    public Brush RepeatButtonBackground { get; public set; }
    public Thickness RepeatButtonBorderThickness { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DataTemplate DownRepeatButtonContentTemplate { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DataTemplate UpRepeatButtonContentTemplate { get; public set; }
    public Thickness UpRepeatButtonMargin { get; public set; }
    public Thickness DownRepeatButtonMargin { get; public set; }
    public bool SelectWholeContent { get; public set; }
    public TimeSpan PopupDelay { get; public set; }
    public ControlTemplate UpRepeatButtonTemplate { get; public set; }
    public ControlTemplate DownRepeatButtonTemplate { get; public set; }
    public ControlTemplate DropDownButtonTemplate { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Visibility ContentElementVisibility { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Visibility WatermarkVisibility { get; public set; }
    public bool IsEmptyDateEnabled { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    public bool IsEnabledRepeatButton { get; public set; }
    public bool IsPopupEnabled { get; public set; }
    public bool IsWatchEnabled { get; public set; }
    public bool IsCalendarEnabled { get; public set; }
    public bool IsVisibleRepeatButton { get; public set; }
    public bool IsButtonPopUpEnabled { get; public set; }
    private static DateTimeBase();
    public void add_IsDropDownOpenChanged(PropertyChangedCallback value);
    public void remove_IsDropDownOpenChanged(PropertyChangedCallback value);
    public void add_UnderlyingDateTimeChanged(PropertyChangedCallback value);
    public void remove_UnderlyingDateTimeChanged(PropertyChangedCallback value);
    public void add_IsScrollingOnCircleChanged(PropertyChangedCallback value);
    public void remove_IsScrollingOnCircleChanged(PropertyChangedCallback value);
    public void add_CustomPatternChanged(PropertyChangedCallback value);
    public void remove_CustomPatternChanged(PropertyChangedCallback value);
    public void add_PatternChanged(PropertyChangedCallback value);
    public void remove_PatternChanged(PropertyChangedCallback value);
    public void add_IsWatchEnabledChanged(PropertyChangedCallback value);
    public void remove_IsWatchEnabledChanged(PropertyChangedCallback value);
    public void add_IsEmptyDateEnabledChanged(PropertyChangedCallback value);
    public void remove_IsEmptyDateEnabledChanged(PropertyChangedCallback value);
    public void add_IsButtonPopUpEnabledChanged(PropertyChangedCallback value);
    public void remove_IsButtonPopUpEnabledChanged(PropertyChangedCallback value);
    public void add_IsCalendarEnabledChanged(PropertyChangedCallback value);
    public void remove_IsCalendarEnabledChanged(PropertyChangedCallback value);
    public void add_IsVisibleRepeatButtonChanged(PropertyChangedCallback value);
    public void remove_IsVisibleRepeatButtonChanged(PropertyChangedCallback value);
    public void add_RepeatButtonBackgroundChanged(PropertyChangedCallback value);
    public void remove_RepeatButtonBackgroundChanged(PropertyChangedCallback value);
    public void add_RepeatButtonBorderBrushChanged(PropertyChangedCallback value);
    public void remove_RepeatButtonBorderBrushChanged(PropertyChangedCallback value);
    public void add_RepeatButtonBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_RepeatButtonBorderThicknessChanged(PropertyChangedCallback value);
    public void add_UpRepeatButtonMarginChanged(PropertyChangedCallback value);
    public void remove_UpRepeatButtonMarginChanged(PropertyChangedCallback value);
    public void add_DownRepeatButtonMarginChanged(PropertyChangedCallback value);
    public void remove_DownRepeatButtonMarginChanged(PropertyChangedCallback value);
    public void add_UpRepeatButtonTemplateChanged(PropertyChangedCallback value);
    public void remove_UpRepeatButtonTemplateChanged(PropertyChangedCallback value);
    public void add_DownRepeatButtonTemplateChanged(PropertyChangedCallback value);
    public void remove_DownRepeatButtonTemplateChanged(PropertyChangedCallback value);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnDragEnter(DragEventArgs e);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public void add_CultureInfoChanged(PropertyChangedCallback value);
    public void remove_CultureInfoChanged(PropertyChangedCallback value);
    public string get_CustomPattern();
    public void set_CustomPattern(string value);
    public CultureInfo get_CultureInfo();
    public void set_CultureInfo(CultureInfo value);
    public DateTimeFormatInfo get_DateTimeFormat();
    public void set_DateTimeFormat(DateTimeFormatInfo value);
    public string get_NoneDateText();
    public void set_NoneDateText(string value);
    public bool get_IsScrollingOnCircle();
    public void set_IsScrollingOnCircle(bool value);
    public bool get_EnableMouseWheelEdit();
    public void set_EnableMouseWheelEdit(bool value);
    public DateTimePattern get_Pattern();
    public void set_Pattern(DateTimePattern value);
    public string get_MaskedText();
    public void set_MaskedText(string value);
    public bool get_CanEdit();
    public void set_CanEdit(bool value);
    public static void OnCustomPatternChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCustomPatternChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsScrollingOnCircleChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsScrollingOnCircleChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsEmptyDateEnabledChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsEmptyDateEnabledChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsDropDownOpenChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public void CheckPopUpStatus(DependencyObject obj);
    protected void OnIsDropDownOpenChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsVisibleRepeatButtonChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsVisibleRepeatButtonChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsButtonPopUpEnabledChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsButtonPopUpEnabledChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsCalendarEnabledChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsCalendarEnabledChanged(DependencyPropertyChangedEventArgs args);
    public Calendar get_FormatCalendar();
    public void set_FormatCalendar(Calendar value);
    internal Nullable`1<DateTime> get_UnderlyingDateTime();
    internal void set_UnderlyingDateTime(Nullable`1<DateTime> value);
    public static void OnUnderlyingDateTimeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnUnderlyingDateTimeChanged(DependencyPropertyChangedEventArgs args);
    public Brush get_CorrectForeground();
    public void set_CorrectForeground(Brush value);
    public bool get_IsCultureRightToLeft();
    public void set_IsCultureRightToLeft(bool value);
    public bool get_IsHoldMaxWidth();
    public void set_IsHoldMaxWidth(bool value);
    public bool get_IsAutoCorrect();
    public void set_IsAutoCorrect(bool value);
    public Brush get_UncertainForeground();
    public void set_UncertainForeground(Brush value);
    public DateValidationMode get_DateValidationMode();
    public void set_DateValidationMode(DateValidationMode value);
    public double get_AutoCorrectedHiglightDuration();
    public void set_AutoCorrectedHiglightDuration(double value);
    internal bool get_IsEditable();
    internal void set_IsEditable(bool value);
    public static void OnIsEditableChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnIsEditableChangedHanlde(DependencyPropertyChangedEventArgs e);
    public ControlTemplate get_CaretTemplate();
    public void set_CaretTemplate(ControlTemplate value);
    public bool get_IsCaretAnimation();
    public void set_IsCaretAnimation(bool value);
    public bool get_IsAnimation();
    public void set_IsAnimation(bool value);
    public double get_ScrollDuration();
    public void set_ScrollDuration(double value);
    public bool get_IsMaskInputEnabled();
    public void set_IsMaskInputEnabled(bool value);
    public Brush get_IncorrectForeground();
    public void set_IncorrectForeground(Brush value);
    public Brush get_RepeatButtonBorderBrush();
    public void set_RepeatButtonBorderBrush(Brush value);
    public static void OnRepeatButtonBorderBrushChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnRepeatButtonBorderBrushChanged(DependencyPropertyChangedEventArgs args);
    public Brush get_RepeatButtonBackground();
    public void set_RepeatButtonBackground(Brush value);
    public static void OnRepeatButtonBackgroundChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnRepeatButtonBackgroundChanged(DependencyPropertyChangedEventArgs args);
    public Thickness get_RepeatButtonBorderThickness();
    public void set_RepeatButtonBorderThickness(Thickness value);
    public static void OnRepeatButtonBorderThicknessChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnRepeatButtonBorderThicknessChanged(DependencyPropertyChangedEventArgs args);
    public DataTemplate get_DownRepeatButtonContentTemplate();
    public void set_DownRepeatButtonContentTemplate(DataTemplate value);
    public DataTemplate get_UpRepeatButtonContentTemplate();
    public void set_UpRepeatButtonContentTemplate(DataTemplate value);
    public Thickness get_UpRepeatButtonMargin();
    public void set_UpRepeatButtonMargin(Thickness value);
    public static void OnUpRepeatButtonMarginChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnUpRepeatButtonMarginChanged(DependencyPropertyChangedEventArgs args);
    public Thickness get_DownRepeatButtonMargin();
    public void set_DownRepeatButtonMargin(Thickness value);
    public static void OnDownRepeatButtonMarginChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDownRepeatButtonMarginChanged(DependencyPropertyChangedEventArgs args);
    public bool get_SelectWholeContent();
    public void set_SelectWholeContent(bool value);
    public TimeSpan get_PopupDelay();
    public void set_PopupDelay(TimeSpan value);
    public ControlTemplate get_UpRepeatButtonTemplate();
    public void set_UpRepeatButtonTemplate(ControlTemplate value);
    public static void OnUpRepeatButtonTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnUpRepeatButtonTemplateChanged(DependencyPropertyChangedEventArgs args);
    public ControlTemplate get_DownRepeatButtonTemplate();
    public void set_DownRepeatButtonTemplate(ControlTemplate value);
    public static void OnDownRepeatButtonTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDownRepeatButtonTemplateChanged(DependencyPropertyChangedEventArgs args);
    public ControlTemplate get_DropDownButtonTemplate();
    public void set_DropDownButtonTemplate(ControlTemplate value);
    public static void OnDropDownButtonTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDropDownButtonTemplateChanged(DependencyPropertyChangedEventArgs args);
    public static void OnCultureChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCultureChanged(DependencyPropertyChangedEventArgs args);
    public static void OnPatternChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPatternChanged(DependencyPropertyChangedEventArgs args);
    public static void OnDateTimeFormatChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDateTimeFormatChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void BasePropertiesChanged();
    public Visibility get_ContentElementVisibility();
    public void set_ContentElementVisibility(Visibility value);
    public Visibility get_WatermarkVisibility();
    public void set_WatermarkVisibility(Visibility value);
    private static object CoerceWatermarkVisibility(DependencyObject d, object baseValue);
    public static void OnWatermarkVisibilityChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnWatermarkVisibilityChanged(DependencyPropertyChangedEventArgs args);
    public bool get_IsEmptyDateEnabled();
    public void set_IsEmptyDateEnabled(bool value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public bool get_IsEnabledRepeatButton();
    public void set_IsEnabledRepeatButton(bool value);
    public bool get_IsPopupEnabled();
    public void set_IsPopupEnabled(bool value);
    public bool get_IsWatchEnabled();
    public void set_IsWatchEnabled(bool value);
    public static void OnIsWatchEnabledChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsWatchEnabledChanged(DependencyPropertyChangedEventArgs args);
    public bool get_IsCalendarEnabled();
    public void set_IsCalendarEnabled(bool value);
    public bool get_IsVisibleRepeatButton();
    public void set_IsVisibleRepeatButton(bool value);
    public bool get_IsButtonPopUpEnabled();
    public void set_IsButtonPopUpEnabled(bool value);
    internal string GetStringPattern(DateTimeFormatInfo dateTimeFormatInfo, DateTimePattern dateTimePattern, string customPattern);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.DateTimeEdit : DateTimeBase {
    private RoutedEventHandler CalendarPopupOpened;
    private RoutedEventHandler ClockPopupOpenedEvent;
    private RoutedEventHandler ClockPopupOpened;
    private PropertyChangedCallback CloseCalendarActionChanged;
    public static DependencyProperty CloseCalendarActionProperty;
    private PropertyChangedCallback DateTimeChanged;
    private PropertyChangedCallback MaxDateTimeChanged;
    private PropertyChangedCallback MinDateTimeChanged;
    private PropertyChangedCallback DisableDateSelectionChanged;
    private PropertyChangedCallback DropDownViewChanged;
    private RoutedEventHandler MonthChanged;
    internal bool mValueChanged;
    internal bool mIsLoaded;
    internal bool mtextboxclicked;
    internal Nullable`1<DateTime> mValue;
    internal Nullable`1<DateTime> OldValue;
    internal int mSelectedCollection;
    internal bool mTextInputpartended;
    internal string checktext;
    internal bool checkday;
    internal bool checkday1;
    internal bool checkday2;
    internal bool checkmonth;
    internal bool ignoreDateChange;
    internal double calendarHeight;
    private bool IsValidationSuccess;
    private ObservableCollection`1<DateTimeProperties> mDateTimeProperties;
    public static DependencyProperty EnableAlphaKeyNavigationProperty;
    public static DependencyProperty AbbreviatedMonthNamesProperty;
    public static DependencyProperty ShortestDayNamesProperty;
    public static DependencyProperty AllowEnterProperty;
    public static DependencyProperty FreezeClockOnEditProperty;
    public static DependencyProperty EnableClassicStyleProperty;
    [BrowsableAttribute("False")]
[ObsoleteAttribute("EnableCombinedStyle property is deprecated, use DropDownView property instead")]
[EditorBrowsableAttribute("1")]
public static DependencyProperty EnableCombinedStyleProperty;
    public static DependencyProperty EnableDeleteKeyProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty EnableBackspaceKeyProperty;
    public static DependencyProperty OnFocusBehaviorProperty;
    internal bool selectionChanged;
    public bool lp;
    public bool lp1;
    private bool isdirectionchangedfromculture;
    private ToggleButton PART_DropDown;
    private Popup PART_Popup;
    private Grid PART_PopupGrid;
    private Border footerBorder;
    private Grid PART_OptionGrid;
    private Grid PART_PopupGrid_Classic;
    private Button todayButton;
    private Button noneButton;
    private Button okButton;
    private Button cancelButton;
    private Canvas _outsidePopupCanvas;
    private Canvas _OutsideCalendarPopupCanvas;
    private Canvas _outsideCanvas;
    private Grid _popupGrid;
    private Grid _root;
    private Calendar _calendar;
    private Calendar _Calendar;
    public static DependencyProperty DateTimeCalenderProperty;
    private Calendar Calendar_Classic;
    private Clock clock;
    private Border PART_ClockBorder;
    private DispatcherTimer DT;
    public static DependencyProperty ClockProperty;
    private RepeatButton PART_UpButton;
    private RepeatButton PART_DownButton;
    public static DependencyProperty ShowMaskOnNullValueProperty;
    public static DependencyProperty TodayButtonActionProperty;
    public static DependencyProperty IsNullProperty;
    public static DependencyProperty NullValueProperty;
    public static DependencyProperty DateTimeProperty;
    public static DependencyProperty MinDateTimeProperty;
    public static DependencyProperty MaxDateTimeProperty;
    public static DependencyProperty DefaultDatePartProperty;
    public static DependencyProperty CalendarStyleProperty;
    public static DependencyProperty DisableDateSelectionProperty;
    public static DependencyProperty DropDownViewProperty;
    public static DependencyProperty AutoForwardingProperty;
    public CloseCalendarAction CloseCalendarAction { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
internal ObservableCollection`1<DateTimeProperties> DateTimeProperties { get; internal set; }
    public bool EnableAlphaKeyNavigation { get; public set; }
    public String[] AbbreviatedMonthNames { get; public set; }
    public String[] ShortestDayNames { get; public set; }
    [ObsoleteAttribute("AllowEnter property is deprecated, use F4 or Alt + Down or click dropdown button to open popup")]
public bool AllowEnter { get; public set; }
    public bool FreezeClockOnEdit { get; public set; }
    public bool EnableClassicStyle { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("EnableCombinedStyle property is deprecated, use DropDownView property instead")]
public bool EnableCombinedStyle { get; public set; }
    public bool EnableDeleteKey { get; public set; }
    public bool EnableBackspaceKey { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public OnFocusBehavior OnFocusBehavior { get; public set; }
    public FrameworkElement DateTimeCalender { get; public set; }
    public FrameworkElement Clock { get; public set; }
    public Nullable`1<DateTime> NullValue { get; public set; }
    public Nullable`1<DateTime> DateTime { get; public set; }
    public DateParts DefaultDatePart { get; public set; }
    public TodayButtonAction TodayButtonAction { get; public set; }
    public bool ShowMaskOnNullValue { get; public set; }
    public DateTime MinDateTime { get; public set; }
    public DateTime MaxDateTime { get; public set; }
    public DropDownViews DropDownView { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool IsNull { get; public set; }
    [ObsoleteAttribute("This property is Deprecated, please use the Implicity style.")]
public Style CalendarStyle { get; public set; }
    public bool DisableDateSelection { get; public set; }
    public bool AutoForwarding { get; public set; }
    private static DateTimeEdit();
    public void add_CalendarPopupOpened(RoutedEventHandler value);
    public void remove_CalendarPopupOpened(RoutedEventHandler value);
    public void add_ClockPopupOpenedEvent(RoutedEventHandler value);
    public void remove_ClockPopupOpenedEvent(RoutedEventHandler value);
    public void add_ClockPopupOpened(RoutedEventHandler value);
    public void remove_ClockPopupOpened(RoutedEventHandler value);
    public void add_CloseCalendarActionChanged(PropertyChangedCallback value);
    public void remove_CloseCalendarActionChanged(PropertyChangedCallback value);
    public CloseCalendarAction get_CloseCalendarAction();
    public void set_CloseCalendarAction(CloseCalendarAction value);
    private static void OnCloseCalendarActionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnCloseCalendarActionChanged(DependencyPropertyChangedEventArgs e);
    public void add_DateTimeChanged(PropertyChangedCallback value);
    public void remove_DateTimeChanged(PropertyChangedCallback value);
    public void add_MaxDateTimeChanged(PropertyChangedCallback value);
    public void remove_MaxDateTimeChanged(PropertyChangedCallback value);
    public void add_MinDateTimeChanged(PropertyChangedCallback value);
    public void remove_MinDateTimeChanged(PropertyChangedCallback value);
    public void add_DisableDateSelectionChanged(PropertyChangedCallback value);
    public void remove_DisableDateSelectionChanged(PropertyChangedCallback value);
    public void add_DropDownViewChanged(PropertyChangedCallback value);
    public void remove_DropDownViewChanged(PropertyChangedCallback value);
    public void add_MonthChanged(RoutedEventHandler value);
    public void remove_MonthChanged(RoutedEventHandler value);
    internal ObservableCollection`1<DateTimeProperties> get_DateTimeProperties();
    internal void set_DateTimeProperties(ObservableCollection`1<DateTimeProperties> value);
    public bool get_EnableAlphaKeyNavigation();
    public void set_EnableAlphaKeyNavigation(bool value);
    public String[] get_AbbreviatedMonthNames();
    public void set_AbbreviatedMonthNames(String[] value);
    private static void OnAbbrevaiatedMonthNamesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnAbbrevaiatedMonthNamesChanged(DependencyPropertyChangedEventArgs e);
    public String[] get_ShortestDayNames();
    public void set_ShortestDayNames(String[] value);
    private static void OnShortestDayNamesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnShortestDayNamesChanged(DependencyPropertyChangedEventArgs e);
    public bool get_AllowEnter();
    public void set_AllowEnter(bool value);
    public bool get_FreezeClockOnEdit();
    public void set_FreezeClockOnEdit(bool value);
    private void DateTimeEdit_MouseDoubleClick(object sender, MouseButtonEventArgs e);
    private void DateTimeEdit_Unloaded(object sender, RoutedEventArgs e);
    private void DisposeCalendar(Calendar calendar);
    private void DisposeClock(Clock clock);
    public sealed virtual void Dispose();
    private void DateTimeEdit_Loaded(object sender, RoutedEventArgs e);
    public bool get_EnableClassicStyle();
    public void set_EnableClassicStyle(bool value);
    public bool get_EnableCombinedStyle();
    public void set_EnableCombinedStyle(bool value);
    public bool get_EnableDeleteKey();
    public void set_EnableDeleteKey(bool value);
    public bool get_EnableBackspaceKey();
    public void set_EnableBackspaceKey(bool value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public OnFocusBehavior get_OnFocusBehavior();
    public void set_OnFocusBehavior(OnFocusBehavior value);
    private void DateTimeEdit_SelectionChanged(object sender, RoutedEventArgs e);
    internal CultureInfo GetCulture();
    internal void ReloadTextBox();
    internal Nullable`1<DateTime> ValidateValue(Nullable`1<DateTime> Val);
    internal void LoadOnValueChanged();
    internal void LoadTextBox();
    public FrameworkElement get_DateTimeCalender();
    public void set_DateTimeCalender(FrameworkElement value);
    private static void OnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void Popup_OnApplyTemplate();
    private void UpdateFooterVisiblity();
    private void BlackoutDates_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Calendar_DayOrMonthPreviewKeyDown(object sender, RoutedEventArgs e);
    private void Clock_Loaded(object sender, RoutedEventArgs e);
    private void Button_Today_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void _calendar_NewDateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal bool CheckLeapYear(int value);
    private DateTime ValidateYearField(Key key, DateTime currentDate, DateTimeProperties characterProperty);
    internal bool ValidateDateTimeField(Key key);
    internal DateTime GetValidDateTime();
    private Calendar GetCalendar();
    internal DateTime IsBlackoutDate(Key key, DateTime date);
    internal bool IsValidDate();
    private bool CanNavigateCalendarElement();
    private void UpdateCalendarFocus();
    private bool UpdateCalendarItemFocus(Calendar calendar, Button noneButton, bool CanFocusCalendarItem);
    private bool UpdateCalendarElementFocus(bool isShiftPressed, Calendar calendar, Button noneButton, Button todayButton, Button okButton, Button cancelButton);
    private bool ProcessTabKey(Key key, bool isShiftPressed);
    internal void UpdateDateTimeValue(DateTime date, DateTimeEdit dateTimeEdit, DateTimeProperties characterProperty);
    private void UpdateDateTimeValue();
    private void FireMonthChanged();
    private void PART_Popup_Closed(object sender, EventArgs e);
    private DateTime ValidateDateTimeValue(DateTime data);
    private void PART_DropDown_Checked(object sender, RoutedEventArgs e);
    private void DT_Tick(object sender, EventArgs e);
    private void Button_NoDate_Click(object sender, RoutedEventArgs e);
    private void CancelButton_Click(object sender, RoutedEventArgs e);
    private void OkButton_Click(object sender, RoutedEventArgs e);
    private void PerformOkClick();
    private void _OutsideCalendarPopupCanvas_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void clock_DateTimeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void Button_Clock_Unchecked(object sender, RoutedEventArgs e);
    private void PART_DropDown_Unchecked(object sender, RoutedEventArgs e);
    public FrameworkElement get_Clock();
    public void set_Clock(FrameworkElement value);
    private static void OnClockPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public void OpenPopup();
    public void ClosePopup();
    private void _outsidePopupCanvas_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void calender_SelectedDatesChanged(object sender, SelectionChangedEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnDrop(DragEventArgs e);
    public virtual void OnApplyTemplate();
    private void PART_DownButton_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void PART_UpButton_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void Calendar_Classic_MouseButtonDown(object sender, MouseButtonEventArgs e);
    private void PART_DownButton_Click(object sender, RoutedEventArgs e);
    private void PART_UpButton_Click(object sender, RoutedEventArgs e);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    private void UpdateDateOnLostFocus();
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void BasePropertiesChanged();
    public Nullable`1<DateTime> get_NullValue();
    public void set_NullValue(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_DateTime();
    public void set_DateTime(Nullable`1<DateTime> value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public DateParts get_DefaultDatePart();
    public void set_DefaultDatePart(DateParts value);
    public TodayButtonAction get_TodayButtonAction();
    public void set_TodayButtonAction(TodayButtonAction value);
    public bool get_ShowMaskOnNullValue();
    public void set_ShowMaskOnNullValue(bool value);
    public DateTime get_MinDateTime();
    public void set_MinDateTime(DateTime value);
    public DateTime get_MaxDateTime();
    public void set_MaxDateTime(DateTime value);
    public DropDownViews get_DropDownView();
    public void set_DropDownView(DropDownViews value);
    public bool get_IsNull();
    public void set_IsNull(bool value);
    public Style get_CalendarStyle();
    public void set_CalendarStyle(Style value);
    private static void OnCalendarStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_DisableDateSelection();
    public void set_DisableDateSelection(bool value);
    public bool get_AutoForwarding();
    public void set_AutoForwarding(bool value);
    public static void OnDateTimeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDateTimeChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinDateTimeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMinDateTimeChanged(DependencyPropertyChangedEventArgs args);
    public static void OnDropDownViewChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDropDownViewChanged(DependencyPropertyChangedEventArgs args);
    public static void OnDisableDateSelectionChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDisableDateSelectionChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMaxDateTimeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaxDateTimeChanged(DependencyPropertyChangedEventArgs args);
    private static object CoerceDateTime(DependencyObject d, object baseValue);
    private static object CoerceMinValue(DependencyObject d, object baseValue);
    private static object CoerceMaxValue(DependencyObject d, object baseValue);
}
internal class Syncfusion.Windows.Shared.DateTimeHandler : object {
    internal static Char[] allStandardFormats;
    internal static DateTimeHandler m_dateTimeHandler;
    public static bool selectedflag;
    public static DateTimeHandler dateTimeHandler { get; public set; }
    private static DateTimeHandler();
    public static DateTimeHandler get_dateTimeHandler();
    public static void set_dateTimeHandler(DateTimeHandler value);
    public ObservableCollection`1<DateTimeProperties> CreateDateTimePatteren(DateTimeEdit MaskedTextBoxAdv);
    private static int GetGroupLengthByMask(string mask);
    private static string GetSpecificFormat(string format, DateTimeFormatInfo info);
    public string CreateDisplayText(DateTimeEdit datetimeeditobj);
    public void HandleSelection(DateTimeEdit datetimeeditobj);
    private DateTime ValidateYearField(DateTime date, DateTimeEdit dateTimeEdit, DateTimeProperties characterProperty, int month, int day);
    private void ValidateDateTimeInput(DateTimeEdit dateTimeEdit, DateTimeProperties characterProperty, DateTime date);
    public bool MatchWithMask(DateTimeEdit datetimeeditobj, string text);
}
public enum Syncfusion.Windows.Shared.DateTimePattern : Enum {
    public int value__;
    public static DateTimePattern CustomPattern;
    public static DateTimePattern ShortDate;
    public static DateTimePattern LongDate;
    public static DateTimePattern ShortTime;
    public static DateTimePattern LongTime;
    public static DateTimePattern FullDateTime;
    public static DateTimePattern MonthDay;
    public static DateTimePattern RFC1123;
    public static DateTimePattern SortableDateTime;
    public static DateTimePattern UniversalSortableDateTime;
    public static DateTimePattern YearMonth;
}
internal class Syncfusion.Windows.Shared.DateTimeProperties : object {
    private int _KeyPressCount;
    [CompilerGeneratedAttribute]
private int <StartPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lenghth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MonthName>k__BackingField;
    public int StartPosition { get; public set; }
    public int Lenghth { get; public set; }
    public Nullable`1<bool> IsReadOnly { get; public set; }
    public DateTimeType Type { get; public set; }
    public string Content { get; public set; }
    public string Pattern { get; public set; }
    public int KeyPressCount { get; public set; }
    public string MonthName { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartPosition();
    [CompilerGeneratedAttribute]
public void set_StartPosition(int value);
    [CompilerGeneratedAttribute]
public int get_Lenghth();
    [CompilerGeneratedAttribute]
public void set_Lenghth(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public DateTimeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(DateTimeType value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    public int get_KeyPressCount();
    public void set_KeyPressCount(int value);
    [CompilerGeneratedAttribute]
public string get_MonthName();
    [CompilerGeneratedAttribute]
public void set_MonthName(string value);
}
public enum Syncfusion.Windows.Shared.DateTimeType : Enum {
    public int value__;
    public static DateTimeType Fraction;
    public static DateTimeType Second;
    public static DateTimeType Minutes;
    public static DateTimeType Hour12;
    public static DateTimeType Hour24;
    public static DateTimeType Day;
    public static DateTimeType Dayname;
    public static DateTimeType Month;
    public static DateTimeType monthname;
    public static DateTimeType year;
    public static DateTimeType period;
    public static DateTimeType designator;
    public static DateTimeType TimeZone;
    public static DateTimeType others;
}
internal class Syncfusion.Windows.Shared.DateUtils : object {
    public static int AddMonth(int month, int param);
    public static DateTime GetFirstDayOfMonth(int year, int month, Calendar calendar);
    public static Int32[0...,0...] GenerateMatrix(int month, int year, DateTimeFormatInfo format, Calendar calendar);
}
public enum Syncfusion.Windows.Shared.DateValidationMode : Enum {
    public int value__;
    public static DateValidationMode Strict;
    public static DateValidationMode Warning;
}
public enum Syncfusion.Windows.Shared.DateViewMode : Enum {
    public int value__;
    public static DateViewMode Normal;
    public static DateViewMode Correct;
    public static DateViewMode Uncertain;
    public static DateViewMode Incorrect;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DayCell : Cell {
    public static DependencyProperty IsCurrentMonthProperty;
    public static DependencyProperty IsTodayProperty;
    public static DependencyProperty IsDateProperty;
    public static DependencyProperty DateProperty;
    public static RoutedEvent HighlightEvent;
    public static DependencyProperty IsFirstDayofMonthProperty;
    public bool IsCurrentMonth { get; public set; }
    public bool IsToday { get; public set; }
    public bool IsFirstDayofMonth { get; public set; }
    public bool IsDate { get; public set; }
    public Date Date { get; public set; }
    private static DayCell();
    public void add_Highlight(RoutedEventHandler value);
    public void remove_Highlight(RoutedEventHandler value);
    public bool get_IsCurrentMonth();
    public void set_IsCurrentMonth(bool value);
    public bool get_IsToday();
    public void set_IsToday(bool value);
    public bool get_IsFirstDayofMonth();
    public void set_IsFirstDayofMonth(bool value);
    public bool get_IsDate();
    public void set_IsDate(bool value);
    public Date get_Date();
    public void set_Date(Date value);
    protected internal void UpdateCellTemplateAndSelector(DataTemplate template, DataTemplateSelector selector);
    protected internal void SetTemplate(DataTemplate template);
    protected internal void SetStyle(Style style);
    protected internal void FireHighlightEvent();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DayCellPanel : Grid {
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DayGrid : CalendarEditGrid {
    internal static int DEFROWSCOUNT;
    internal static int DEFCOLUMNSCOUNT;
    private Border mselectionBorder;
    private Int32[0...,0...] mcalendarMatrix;
    private CalendarEdit mparentCalendar;
    private Hashtable mdateCells;
    private List`1<int> mweekNumbers;
    private List`1<WeekNumberCell> mweekNumberCells;
    private Hashtable moldTooltipIndexes;
    private Hashtable mnewTooltipDates;
    internal List`1<WeekNumberCell> WeekNumbers { get; }
    protected internal Hashtable DateCells { get; protected internal set; }
    protected internal Int32[0...,0...] CalendarMatrix { get; protected internal set; }
    protected internal CalendarEdit ParentCalendar { get; protected internal set; }
    protected internal Border SelectionBorder { get; protected internal set; }
    private static DayGrid();
    internal List`1<WeekNumberCell> get_WeekNumbers();
    protected internal Hashtable get_DateCells();
    protected internal void set_DateCells(Hashtable value);
    protected internal Int32[0...,0...] get_CalendarMatrix();
    protected internal void set_CalendarMatrix(Int32[0...,0...] value);
    protected internal CalendarEdit get_ParentCalendar();
    protected internal void set_ParentCalendar(CalendarEdit value);
    protected internal Border get_SelectionBorder();
    protected internal void set_SelectionBorder(Border value);
    public virtual void Initialize(VisibleDate data, CultureInfo culture, Calendar calendar);
    internal void SetDayCellToolTip(DayCell dc, int index);
    protected internal void SetIsSelected();
    protected internal void SetIsInvalid();
    protected internal void SetIsDate(Calendar calendar);
    protected internal void SetIsFirstDayofMonth();
    protected internal void SetIsToday(Calendar calendar);
    protected internal void SetIsCurrentMonth(int month);
    protected internal void SetDayCellContent();
    protected internal void SetDayCellDate(VisibleDate data, DateTimeFormatInfo format, Calendar calendar);
    protected internal void UpdateTemplateAndSelector(DataTemplate template, DataTemplateSelector selector, DataTemplatesDictionary dateTemplates);
    internal void SetSpecialDatesTemplate();
    protected internal void UpdateStyles(Style style, StylesDictionary dateStyles);
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
    protected virtual Cell CreateCell();
    private void UpdateParent();
    private void UpdateDateCells(Calendar calendar, int visibleMonth);
    private int GetNextMonth(int visibleMonth);
    private int GetPrevMonth(int visibleMonth);
    private void HidePrevMonthDays(DayCell dayCell, int visibleMonth);
    private void HideNextMonthDays(DayCell dayCell, int visibleMonth);
    private void FillWeekNumberCells();
    private void SetNewCellTooltip(DayCell dc, Hashtable toolTipDates, int index);
    private void SetOldCellTooltip(DayCell dc, int index);
    private bool IsInTooltipIndexArrays(int index);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DayNameCell : ContentControl {
    private CornerRadius mcornerRadius;
    public CornerRadius CornerRadius { get; public set; }
    private static DayNameCell();
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    protected internal void UpdateCellTemplateAndSelector(DataTemplate template, DataTemplateSelector selector);
    protected internal void SetStyle(Style style);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DayNamesGrid : FrameworkElement {
    private static int DEFCOLUMNSCOUNT;
    private Grid minnerGrid;
    private CalendarEdit mparentCalendar;
    private ArrayList mdayNameCells;
    public ArrayList DayNameCells { get; public set; }
    public CalendarEdit ParentCalendar { get; public set; }
    protected int VisualChildrenCount { get; }
    private static DayNamesGrid();
    private void DayNamesGrid_Loaded(object sender, RoutedEventArgs e);
    public ArrayList get_DayNameCells();
    public void set_DayNameCells(ArrayList value);
    public CalendarEdit get_ParentCalendar();
    public void set_ParentCalendar(CalendarEdit value);
    protected virtual int get_VisualChildrenCount();
    protected internal void SetDayNames(DateTimeFormatInfo format);
    protected internal void UpdateTemplateAndSelector(DataTemplate template, DataTemplateSelector selector);
    protected internal void UpdateStyles(Style style);
    protected void GenerateGrid();
    protected void FillGrid();
    protected void UpdateParent();
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
    internal void Dispose(bool Disposing);
    public sealed virtual void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public static class Syncfusion.Windows.Shared.DebugHelper : object {
    private static MemoryStream m_streamInMemoryTraceInfo;
    private static MemoryStream m_streamInMemoryDebug;
    private static TraceListener m_listenerForWPFTraces;
    private static TraceListener m_listenerForDebug;
    private static GZipStream m_streamCompressedTraceInfo;
    private static GZipStream m_streamCompressedDebugOutput;
    private static DebugHelper();
    public static void Attach();
    private static int IsThemeActive();
    private static int GetCurrentThemeName(StringBuilder pszThemeFileName, int dwMaxNameChars, StringBuilder pszColorBuff, int dwMaxColorChars, StringBuilder pszSizeBuff, int cchMaxSizeChars);
    private static void AddListener(TraceSource trace, TraceListener listener, Nullable`1<SourceLevels> level);
    private static void CurrentDomain_ProcessExit(object sender, EventArgs e);
    private static void SaveAllAndClose(Exception exception);
    private static void WriteExceptionInfoToDebug(Exception exception);
    private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e);
    private static void SendMail(string mailBody, string pathDebugLog, string pathWPFTraces);
}
public class Syncfusion.Windows.Shared.DelegateCommand : object {
    private EventHandler CanExecuteChanged;
    private Predicate`1<object> canExecute;
    private Action`1<object> executeAction;
    private bool canExecuteCache;
    public DelegateCommand(Action`1<object> executeAction);
    public DelegateCommand(Action`1<object> executeAction, Predicate`1<object> canExecute);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual bool CanExecute(object parameter);
    public void RaiseCanExecuteChanged();
    public sealed virtual void Execute(object parameter);
}
public class Syncfusion.Windows.Shared.DelegateCommand`1 : object {
    private Predicate`1<T> _canExecute;
    private Action`1<T> _method;
    private bool _canExecuteCache;
    private EventHandler CanExecuteChanged;
    public DelegateCommand`1(Action`1<T> method);
    public DelegateCommand`1(Action`1<T> method, Predicate`1<T> canExecute);
    public sealed virtual bool CanExecute(object parameter);
    public void RaiseCanExecuteChanged();
    public sealed virtual void Execute(object parameter);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
}
public class Syncfusion.Windows.Shared.DependencyObjectToVisualConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.DisableEffect : ShaderEffect {
    public static DependencyProperty InputProperty;
    public static DependencyProperty FilterColorProperty;
    public Brush Input { get; public set; }
    public Color FilterColor { get; public set; }
    private static DisableEffect();
    public Brush get_Input();
    public void set_Input(Brush value);
    public Color get_FilterColor();
    public void set_FilterColor(Color value);
}
public class Syncfusion.Windows.Shared.DispatcherHandler : MulticastDelegate {
    public DispatcherHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DomainUpDown : Control {
    protected static double DEF_ANIMATION_SPEED;
    public static RoutedCommand m_downValue;
    public static RoutedCommand m_upValue;
    private TextBox m_firstBlock;
    private TextBox m_secondBlock;
    private TextBox m_textBox;
    private bool m_isAnimated;
    private bool m_isUp;
    private int m_exIndex;
    private int m_index;
    private ArrayList m_list;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty AnimationShiftProperty;
    private PropertyChangedCallback ValueChanged;
    public string Item { get; }
    public string Value { get; public set; }
    public double AnimationShift { get; public set; }
    private static DomainUpDown();
    public string get_Item(int index);
    public string get_Value();
    public void set_Value(string value);
    public double get_AnimationShift();
    public void set_AnimationShift(double value);
    private void Initialize();
    public int Add(string item);
    public void RemoveAt(int index);
    public void Remove(string item);
    public void AddRange(String[] range);
    public void add_ValueChanged(PropertyChangedCallback value);
    public void remove_ValueChanged(PropertyChangedCallback value);
    private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnValueChanged(DependencyPropertyChangedEventArgs e);
    private void ChangeDownValue(object sender, ExecutedRoutedEventArgs e);
    private void ChangeUpValue(object sender, ExecutedRoutedEventArgs e);
    private void UpdateCounter(bool isUp);
    private void Animation();
    private void Animation_Completed(object sender, EventArgs e);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.DoubleTextBox : EditorBase {
    private PropertyChangedCallback ValidationCompletedChanged;
    private PropertyChangedCallback InvalidValueBehaviorChanged;
    private StringValidationCompletedEventHandler ValueValidationCompleted;
    private PropertyChangedCallback ValidationValueChanged;
    private CancelEventHandler Validating;
    private EventHandler Validated;
    private PropertyChangedCallback MinValueChanged;
    private PropertyChangedCallback ValueChanged;
    private ValueChangingEventHandler ValueChanging;
    private PropertyChangedCallback MaxValueChanged;
    private PropertyChangedCallback NumberDecimalDigitsChanged;
    private PropertyChangedCallback NumberDecimalSeparatorChanged;
    private PropertyChangedCallback NumberGroupSizesChanged;
    private PropertyChangedCallback NumberGroupSeparatorChanged;
    private PropertyChangedCallback IsExceedDecimalDigitsChanged;
    private PropertyChangedCallback MinimumNumberDecimalDigitsChanged;
    private PropertyChangedCallback MaximumNumberDecimalDigitsChanged;
    internal Nullable`1<double> OldValue;
    internal Nullable`1<double> mValue;
    internal string utext;
    internal int uval;
    internal Nullable`1<bool> mValueChanged;
    internal bool mIsLoaded;
    internal int count;
    internal bool negativeFlag;
    internal string checktext;
    internal int numberDecimalDigits;
    internal string lostfocusmasktext;
    internal bool isUpDownDoubleTextBox;
    private RepeatButton upButton;
    private RepeatButton downButton;
    private ScrollViewer PART_ContentHost;
    private bool _validatingrResult;
    private bool MinMaxchanged;
    public static DependencyProperty NumberGroupSizesProperty;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty MinimumNumberDecimalDigitsProperty;
    public static DependencyProperty MaximumNumberDecimalDigitsProperty;
    public static DependencyProperty MinValueProperty;
    public static DependencyProperty MaxValueProperty;
    public static DependencyProperty NumberGroupSeparatorProperty;
    public static DependencyProperty NumberDecimalDigitsProperty;
    public static DependencyProperty NumberDecimalSeparatorProperty;
    public static DependencyProperty GroupSeperatorEnabledProperty;
    internal static DependencyProperty IsExceedDecimalDigitsProperty;
    public static DependencyProperty ScrollIntervalProperty;
    public static DependencyProperty StepProperty;
    public static DependencyProperty NullValueProperty;
    public static DependencyProperty ValueValidationProperty;
    public static DependencyProperty InvalidValueBehaviorProperty;
    public static DependencyProperty ValidationValueProperty;
    public static DependencyProperty ValidationCompletedProperty;
    [CompilerGeneratedAttribute]
private ICommand <pastecommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <copycommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <cutcommand>k__BackingField;
    public ICommand pastecommand { get; private set; }
    public ICommand copycommand { get; private set; }
    public ICommand cutcommand { get; private set; }
    public Nullable`1<double> Value { get; public set; }
    public double MinValue { get; public set; }
    public double MaxValue { get; public set; }
    public string NumberGroupSeparator { get; public set; }
    public Int32Collection NumberGroupSizes { get; public set; }
    public int MinimumNumberDecimalDigits { get; public set; }
    public int MaximumNumberDecimalDigits { get; public set; }
    public int NumberDecimalDigits { get; public set; }
    public string NumberDecimalSeparator { get; public set; }
    public bool GroupSeperatorEnabled { get; public set; }
    internal bool IsExceedDecimalDigits { get; internal set; }
    public double ScrollInterval { get; public set; }
    public double Step { get; public set; }
    public Nullable`1<double> NullValue { get; public set; }
    public StringValidation ValueValidation { get; public set; }
    public InvalidInputBehavior InvalidValueBehavior { get; public set; }
    public string ValidationValue { get; public set; }
    public bool ValidationCompleted { get; public set; }
    private static DoubleTextBox();
    public void add_ValidationCompletedChanged(PropertyChangedCallback value);
    public void remove_ValidationCompletedChanged(PropertyChangedCallback value);
    public void add_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void remove_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void add_ValueValidationCompleted(StringValidationCompletedEventHandler value);
    public void remove_ValueValidationCompleted(StringValidationCompletedEventHandler value);
    public void add_ValidationValueChanged(PropertyChangedCallback value);
    public void remove_ValidationValueChanged(PropertyChangedCallback value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    public void add_MinValueChanged(PropertyChangedCallback value);
    public void remove_MinValueChanged(PropertyChangedCallback value);
    public void add_ValueChanged(PropertyChangedCallback value);
    public void remove_ValueChanged(PropertyChangedCallback value);
    public void add_ValueChanging(ValueChangingEventHandler value);
    public void remove_ValueChanging(ValueChangingEventHandler value);
    public void add_MaxValueChanged(PropertyChangedCallback value);
    public void remove_MaxValueChanged(PropertyChangedCallback value);
    public void add_NumberDecimalDigitsChanged(PropertyChangedCallback value);
    public void remove_NumberDecimalDigitsChanged(PropertyChangedCallback value);
    public void add_NumberDecimalSeparatorChanged(PropertyChangedCallback value);
    public void remove_NumberDecimalSeparatorChanged(PropertyChangedCallback value);
    public void add_NumberGroupSizesChanged(PropertyChangedCallback value);
    public void remove_NumberGroupSizesChanged(PropertyChangedCallback value);
    public void add_NumberGroupSeparatorChanged(PropertyChangedCallback value);
    public void remove_NumberGroupSeparatorChanged(PropertyChangedCallback value);
    internal void add_IsExceedDecimalDigitsChanged(PropertyChangedCallback value);
    internal void remove_IsExceedDecimalDigitsChanged(PropertyChangedCallback value);
    public void add_MinimumNumberDecimalDigitsChanged(PropertyChangedCallback value);
    public void remove_MinimumNumberDecimalDigitsChanged(PropertyChangedCallback value);
    public void add_MaximumNumberDecimalDigitsChanged(PropertyChangedCallback value);
    public void remove_MaximumNumberDecimalDigitsChanged(PropertyChangedCallback value);
    [CompilerGeneratedAttribute]
public ICommand get_pastecommand();
    [CompilerGeneratedAttribute]
private void set_pastecommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_copycommand();
    [CompilerGeneratedAttribute]
private void set_copycommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_cutcommand();
    [CompilerGeneratedAttribute]
private void set_cutcommand(ICommand value);
    private void DoubleTextBox_NumberFormatChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void DoubleTextBox_Unloaded(object sender, RoutedEventArgs e);
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    private void _pastecommand(object parameter);
    private void _copycommand(object parameter);
    private void _cutcommand(object parameter);
    private bool Canpaste(object parameter);
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    private void CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    public static Visual FindChild(Visual startingFrom, Type typeDescendant);
    private void cut();
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    internal virtual void OnCultureChanged();
    internal virtual void OnNumberFormatChanged();
    protected virtual void OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void FormatText();
    internal bool SetValue(Nullable`1<bool> IsReload, Nullable`1<double> _Value);
    internal bool TriggerValueChangingEvent(ValueChangingEventArgs args);
    internal Nullable`1<double> ValidateValue(Nullable`1<double> Val);
    internal CultureInfo GetCulture();
    private static object CoerceValue(DependencyObject d, object baseValue);
    internal static int CountDecimalDigits(string p, DependencyObject d);
    private void copy();
    private void Paste();
    private void SpinButton_Click(object sender, RoutedEventArgs e);
    private void ChangeValue(bool canIncrement);
    private double MaxLengthValidation(double value);
    private void UpdateNumberDecimalDigits();
    internal void UpdateNumberDecimalDigits(int count);
    private void DoubleTextbox_Loaded(object sender, RoutedEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    public Nullable`1<double> get_Value();
    public void set_Value(Nullable`1<double> value);
    public double get_MinValue();
    public void set_MinValue(double value);
    public double get_MaxValue();
    public void set_MaxValue(double value);
    public string get_NumberGroupSeparator();
    public void set_NumberGroupSeparator(string value);
    public Int32Collection get_NumberGroupSizes();
    public void set_NumberGroupSizes(Int32Collection value);
    public int get_MinimumNumberDecimalDigits();
    public void set_MinimumNumberDecimalDigits(int value);
    public int get_MaximumNumberDecimalDigits();
    public void set_MaximumNumberDecimalDigits(int value);
    public int get_NumberDecimalDigits();
    public void set_NumberDecimalDigits(int value);
    public string get_NumberDecimalSeparator();
    public void set_NumberDecimalSeparator(string value);
    public bool get_GroupSeperatorEnabled();
    public void set_GroupSeperatorEnabled(bool value);
    internal bool get_IsExceedDecimalDigits();
    internal void set_IsExceedDecimalDigits(bool value);
    public static void OnIsExceedDecimalDigits(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsExceedDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMaximumNumberDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaximumNumberDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinimumNumberDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMinimumNumberDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    private void CheckIsExceedDecimalDigits();
    public double get_ScrollInterval();
    public void set_ScrollInterval(double value);
    public double get_Step();
    public void set_Step(double value);
    public static void OnNumberGroupSizesChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNumberGroupSizesChanged(DependencyPropertyChangedEventArgs args);
    public static void OnNumberDecimalSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNumberDecimalSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnNumberDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNumberDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    public static void OnValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public virtual void OnUseNullOptionChanged(DependencyPropertyChangedEventArgs args);
    protected void OnValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMinValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMaxValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaxValueChanged(DependencyPropertyChangedEventArgs args);
    private static void OnNumberGroupSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static object CoerceNumberGroupSeperator(DependencyObject d, object baseValue);
    protected virtual void OnNumberGroupSeparatorChanged(DependencyPropertyChangedEventArgs e);
    public Nullable`1<double> get_NullValue();
    public void set_NullValue(Nullable`1<double> value);
    public static void OnNullValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNullValueChanged(DependencyPropertyChangedEventArgs args);
    public StringValidation get_ValueValidation();
    public void set_ValueValidation(StringValidation value);
    public InvalidInputBehavior get_InvalidValueBehavior();
    public void set_InvalidValueBehavior(InvalidInputBehavior value);
    public static void OnInvalidValueBehaviorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnInvalidValueBehaviorChanged(DependencyPropertyChangedEventArgs args);
    public string get_ValidationValue();
    public void set_ValidationValue(string value);
    public static void OnValidationValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationValueChanged(DependencyPropertyChangedEventArgs args);
    public bool get_ValidationCompleted();
    public void set_ValidationCompleted(bool value);
    public static void OnValidationCompletedPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationCompletedPropertyChanged(DependencyPropertyChangedEventArgs args);
    internal void OnValueValidationCompleted(StringValidationEventArgs e);
    internal void OnValidated(EventArgs e);
    internal bool OnValidating(CancelEventArgs e);
}
[ValueConversionAttribute("System.Double", "System.String")]
public class Syncfusion.Windows.Shared.DoubleToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Syncfusion.Windows.Shared.DoubleValueHandler : object {
    public static DoubleValueHandler doubleValueHandler;
    internal bool AllowSelectionStart;
    internal int count;
    private NumberFormatInfo numberFormat;
    private string maskedText;
    private int selectionStart;
    private int selectionEnd;
    private int selectionLength;
    private int separatorStart;
    private int separatorEnd;
    private int caretPosition;
    private string unmaskedText;
    private double previewValue;
    private int negflag;
    private int groupSeperator;
    private bool minusKeyValidationflag;
    private int selectedLength;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    private static DoubleValueHandler();
    public bool MatchWithMask(DoubleTextBox doubleTextBox, string text);
    public bool HandleKeyDown(DoubleTextBox doubleTextBox, KeyEventArgs eventArgs);
    public bool HandleBackSpaceKey(DoubleTextBox doubleTextBox);
    public bool HandleDeleteKey(DoubleTextBox doubleTextBox);
    public bool HandleUpDownKey(DoubleTextBox doubleTextBox, bool isUpKeyPressed);
    private void InitializeValues(DoubleTextBox doubleTextBox);
    private void GenerateUnmaskedText(DoubleTextBox doubleTextBox, bool isMatchingMask, bool isBackspaceKeyPressed);
    private bool CharacterValidation(DoubleTextBox doubleTextBox, string text);
    private bool TextEditingForMatchingMask(DoubleTextBox doubleTextBox, string text);
    private bool TextEditingForBackspace(DoubleTextBox doubleTextBox);
    private bool TextEditingForDelete(DoubleTextBox doubleTextBox);
    private void UpdateNumberDecimalDigits(DoubleTextBox doubleTextBox);
    private bool MinMaxValidation(DoubleTextBox doubleTextBox, bool isBackspaceKeyPressed);
    private bool StringValidationOnKeyPress(DoubleTextBox doubleTextBox, bool isBackspaceKeyPressed);
    [CompilerGeneratedAttribute]
private static bool <TextEditingForMatchingMask>b__1(char c);
}
[ValueConversionAttribute("System.Windows.Media.DrawingBrush", "System.Windows.Media.Drawing")]
public class Syncfusion.Windows.Shared.DrawingBrushToDrawingConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.DrawingHelper : ContentControl {
    private Hashtable m_drawingsHash;
    private Visual m_topMostVisual;
    private int m_convertionChainCount;
    public static DependencyProperty DrawingBrushProperty;
    public DrawingBrush DrawingBrush { get; public set; }
    private static DrawingHelper();
    private static void OnDrawingBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private List`1<Point> GetPointsFromDrawing(Drawing drawing);
    private List`1<Point> GetPointsFromGeometryDrawing(Drawing drawing);
    private static List`1<Point> GetPointsFromGeometry(Geometry geometry);
    private GuidelineSet GetGuidelineSetForDrawing(Drawing drawing);
    internal static Drawing ApplyTransformToDrawing(Drawing drawing, GeneralTransform generalTransform);
    private Drawing GetDrawing(object obj);
    private static Drawing ConvertDrawingBrushToDrawing(DrawingBrush brush);
    private Drawing ConvertVisualToDrawing(Visual visual);
    public DrawingBrush get_DrawingBrush();
    public void set_DrawingBrush(DrawingBrush value);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public static class Syncfusion.Windows.Shared.DrawingUtils : object {
    private static Point EMPTY_POINT;
    private static bool wfcHostFlag;
    private static FrameworkElement m_winhost;
    private static DrawingUtils();
    public static DrawingBrush PrepareFake(UIElement mainElement);
    public static void PrepareFake(FrameworkElement mainElement, Border fake);
    public static Bitmap GetScreenShot(IntPtr winHandle, Size bounds);
    private static DrawingGroup GetDrawingGroup(UIElement element, Point mainPoint);
    private static Drawing GetDrawing(UIElement element, Point mainPoint);
    private static Drawing GetDrawingUseDrawingVisual(UIElement element, Point setPoint);
    private static Drawing GetDrawingUseVisualTreeHelper(UIElement element, Point setPoint);
    private static bool GetDrawingTree(DependencyObject element, List`1<Drawing> drawingList, Point mainPoint, bool isFirstBranch);
}
public enum Syncfusion.Windows.Shared.DropDownViews : Enum {
    public int value__;
    public static DropDownViews Classic;
    public static DropDownViews Clock;
    public static DropDownViews Combined;
    public static DropDownViews Calendar;
}
public class Syncfusion.Windows.Shared.EditorBase : TextBox {
    private PropertyChangedCallback CultureChanged;
    private PropertyChangedCallback NumberFormatChanged;
    private PropertyChangedCallback WaterMarkTemplateChanged;
    private PropertyChangedCallback WaterMarkTextChanged;
    private PropertyChangedCallback IsUndoEnabledChanged;
    private PropertyChangedCallback TextSelectionOnFocusChanged;
    private PropertyChangedCallback NegativeForegroundChanged;
    private PropertyChangedCallback IsValueNegativeChanged;
    private PropertyChangedCallback EnterToMoveNextChanged;
    internal bool minusPressed;
    private AdornerLayer aLayer;
    private TextBoxSelectionAdorner txtSelectionAdorner1;
    private ExtendedScrollingAdorner vAdorner;
    public static DependencyProperty ReadOnlyProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty ShowSpinButtonProperty;
    public static DependencyProperty EnableTouchProperty;
    public static DependencyProperty EnableRangeAdornerProperty;
    public static DependencyProperty EnableExtendedScrollingProperty;
    public static DependencyProperty RangeAdornerBackgroundProperty;
    internal static DependencyProperty FocusedBackgroundProperty;
    internal static DependencyProperty FocusedForegroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty ReadOnlyBackgroundProperty;
    public static DependencyProperty SelectionForegroundProperty;
    public static DependencyProperty EnableFocusColorsProperty;
    internal bool allowchange;
    public static DependencyProperty PasteModeProperty;
    public static DependencyProperty PositiveForegroundProperty;
    public static DependencyProperty EditorForegroundProperty;
    public static DependencyProperty NegativeForegroundProperty;
    public static DependencyProperty ApplyNegativeForegroundProperty;
    public static DependencyProperty IsNegativeProperty;
    public static DependencyProperty IsZeroProperty;
    public static DependencyProperty MaxValidationProperty;
    public static DependencyProperty MinValidationProperty;
    public static DependencyProperty MaxValueOnExceedMaxDigitProperty;
    public static DependencyProperty MinValueOnExceedMinDigitProperty;
    public static DependencyProperty IsNullProperty;
    public static DependencyProperty UseNullOptionProperty;
    public static DependencyProperty CultureProperty;
    public static DependencyProperty ZeroColorProperty;
    public static DependencyProperty ApplyZeroColorProperty;
    public static DependencyProperty NumberFormatProperty;
    public static DependencyProperty IsUndoEnabledProperty;
    public static DependencyProperty MaskedTextProperty;
    public static DependencyProperty WatermarkTemplateProperty;
    public static DependencyProperty WatermarkTextProperty;
    public static DependencyProperty WatermarkVisibilityProperty;
    public static DependencyProperty ContentElementVisibilityProperty;
    public static DependencyProperty WatermarkTextForegroundProperty;
    public static DependencyProperty WatermarkBackgroundProperty;
    public static DependencyProperty WatermarkOpacityProperty;
    public static DependencyProperty WatermarkTextIsVisibleProperty;
    public static DependencyProperty IsScrollingOnCircleProperty;
    public static DependencyProperty EnterToMoveNextProperty;
    public static DependencyProperty TextSelectionOnFocusProperty;
    public static DependencyProperty IsCaretAnimationEnabledProperty;
    internal static DependencyProperty CaretIndexProperty;
    [ObsoleteAttribute("Use IsReadOnly Property")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool ReadOnly { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public bool ShowSpinButton { get; public set; }
    public bool EnableTouch { get; public set; }
    public bool EnableRangeAdorner { get; public set; }
    public bool EnableExtendedScrolling { get; public set; }
    public Brush RangeAdornerBackground { get; public set; }
    internal Brush FocusedBackground { get; internal set; }
    internal Brush FocusedForeground { get; internal set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public Brush FocusedBorderBrush { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public Brush ReadOnlyBackground { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public Brush SelectionForeground { get; public set; }
    public bool EnableFocusColors { get; public set; }
    public PasteMode PasteMode { get; public set; }
    public CultureInfo Culture { get; public set; }
    public NumberFormatInfo NumberFormat { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public Brush EditorForeground { get; public set; }
    public Brush PositiveForeground { get; public set; }
    public bool ApplyNegativeForeground { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool IsNegative { get; public set; }
    public Brush NegativeForeground { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool IsZero { get; public set; }
    public bool ApplyZeroColor { get; public set; }
    public Brush ZeroColor { get; public set; }
    public bool UseNullOption { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool IsNull { get; public set; }
    public MaxValidation MaxValidation { get; public set; }
    public MinValidation MinValidation { get; public set; }
    public bool MaxValueOnExceedMaxDigit { get; public set; }
    public bool MinValueOnExceedMinDigit { get; public set; }
    public bool IsUndoEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string MaskedText { get; public set; }
    public DataTemplate WatermarkTemplate { get; public set; }
    public string WatermarkText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Visibility WatermarkVisibility { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public Visibility ContentElementVisibility { get; public set; }
    public Brush WatermarkTextForeground { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Brush WatermarkBackground { get; public set; }
    public double WatermarkOpacity { get; public set; }
    public bool WatermarkTextIsVisible { get; public set; }
    public bool IsScrollingOnCircle { get; public set; }
    public bool EnterToMoveNext { get; public set; }
    public bool TextSelectionOnFocus { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public bool IsCaretAnimationEnabled { get; public set; }
    internal int CaretIndex { get; internal set; }
    private static EditorBase();
    public void add_CultureChanged(PropertyChangedCallback value);
    public void remove_CultureChanged(PropertyChangedCallback value);
    public void add_NumberFormatChanged(PropertyChangedCallback value);
    public void remove_NumberFormatChanged(PropertyChangedCallback value);
    public void add_WaterMarkTemplateChanged(PropertyChangedCallback value);
    public void remove_WaterMarkTemplateChanged(PropertyChangedCallback value);
    public void add_WaterMarkTextChanged(PropertyChangedCallback value);
    public void remove_WaterMarkTextChanged(PropertyChangedCallback value);
    public void add_IsUndoEnabledChanged(PropertyChangedCallback value);
    public void remove_IsUndoEnabledChanged(PropertyChangedCallback value);
    public void add_TextSelectionOnFocusChanged(PropertyChangedCallback value);
    public void remove_TextSelectionOnFocusChanged(PropertyChangedCallback value);
    public void add_NegativeForegroundChanged(PropertyChangedCallback value);
    public void remove_NegativeForegroundChanged(PropertyChangedCallback value);
    public void add_IsValueNegativeChanged(PropertyChangedCallback value);
    public void remove_IsValueNegativeChanged(PropertyChangedCallback value);
    public void add_EnterToMoveNextChanged(PropertyChangedCallback value);
    public void remove_EnterToMoveNextChanged(PropertyChangedCallback value);
    private void EditorBase_Unloaded(object sender, RoutedEventArgs e);
    private void EditorBase_Loaded(object sender, RoutedEventArgs e);
    private void EditorBase_MouseDoubleClick(object sender, MouseButtonEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnDrop(DragEventArgs e);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public static void OnCornerRadiusChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public bool get_ShowSpinButton();
    public void set_ShowSpinButton(bool value);
    public bool get_EnableTouch();
    public void set_EnableTouch(bool value);
    public static void OnEnableTouchChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnEnableTouchChanged(DependencyPropertyChangedEventArgs args);
    public bool get_EnableRangeAdorner();
    public void set_EnableRangeAdorner(bool value);
    public bool get_EnableExtendedScrolling();
    public void set_EnableExtendedScrolling(bool value);
    public static void OnEnableExtendedScrollingChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnEnableExtendedScrollingChanged(DependencyPropertyChangedEventArgs args);
    public Brush get_RangeAdornerBackground();
    public void set_RangeAdornerBackground(Brush value);
    internal Brush get_FocusedBackground();
    internal void set_FocusedBackground(Brush value);
    public static void OnFocusedBackgroundChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    internal Brush get_FocusedForeground();
    internal void set_FocusedForeground(Brush value);
    public static void OnFocusedForegroundChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnFocusedForegroundChanged(DependencyPropertyChangedEventArgs args);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public static void OnFocusedBorderBrushChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public Brush get_ReadOnlyBackground();
    public void set_ReadOnlyBackground(Brush value);
    public static void OnReadOnlyBackgroundChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public Brush get_SelectionForeground();
    public void set_SelectionForeground(Brush value);
    public bool get_EnableFocusColors();
    public void set_EnableFocusColors(bool value);
    public PasteMode get_PasteMode();
    public void set_PasteMode(PasteMode value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public NumberFormatInfo get_NumberFormat();
    public void set_NumberFormat(NumberFormatInfo value);
    public Brush get_EditorForeground();
    public void set_EditorForeground(Brush value);
    public Brush get_PositiveForeground();
    public void set_PositiveForeground(Brush value);
    public bool get_ApplyNegativeForeground();
    public void set_ApplyNegativeForeground(bool value);
    public bool get_IsNegative();
    public void set_IsNegative(bool value);
    public Brush get_NegativeForeground();
    public void set_NegativeForeground(Brush value);
    public bool get_IsZero();
    public void set_IsZero(bool value);
    public bool get_ApplyZeroColor();
    public void set_ApplyZeroColor(bool value);
    public Brush get_ZeroColor();
    public void set_ZeroColor(Brush value);
    public bool get_UseNullOption();
    public void set_UseNullOption(bool value);
    public bool get_IsNull();
    public void set_IsNull(bool value);
    public MaxValidation get_MaxValidation();
    public void set_MaxValidation(MaxValidation value);
    public MinValidation get_MinValidation();
    public void set_MinValidation(MinValidation value);
    public bool get_MaxValueOnExceedMaxDigit();
    public void set_MaxValueOnExceedMaxDigit(bool value);
    public bool get_MinValueOnExceedMinDigit();
    public void set_MinValueOnExceedMinDigit(bool value);
    public bool get_IsUndoEnabled();
    public void set_IsUndoEnabled(bool value);
    public string get_MaskedText();
    public void set_MaskedText(string value);
    public static void OnPositiveForegroundChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPositiveForegroundChanged(DependencyPropertyChangedEventArgs args);
    public static void OnApplyNegativeForegroundChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnApplyNegativeForegroundChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinValidationChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public static void OnZeroNegativeColorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnZeroNegativeColorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnApplyZeroColorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnApplyZeroColorChanged(DependencyPropertyChangedEventArgs args);
    public DataTemplate get_WatermarkTemplate();
    public void set_WatermarkTemplate(DataTemplate value);
    public static void OnWaterMarkTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnWaterMarkTemplateChanged(DependencyPropertyChangedEventArgs args);
    public void set_WatermarkText(string value);
    public string get_WatermarkText();
    public static void OnWaterMarkTextChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnWaterMarkTextChanged(DependencyPropertyChangedEventArgs args);
    public void set_WatermarkVisibility(Visibility value);
    public Visibility get_WatermarkVisibility();
    private static object CoerceWatermarkVisibility(DependencyObject d, object baseValue);
    public static void OnWatermarkVisibilityPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnWatermarkVisibilityPropertyChanged(DependencyPropertyChangedEventArgs args);
    public Visibility get_ContentElementVisibility();
    public void set_ContentElementVisibility(Visibility value);
    public Brush get_WatermarkTextForeground();
    public void set_WatermarkTextForeground(Brush value);
    public Brush get_WatermarkBackground();
    public void set_WatermarkBackground(Brush value);
    public double get_WatermarkOpacity();
    public void set_WatermarkOpacity(double value);
    public bool get_WatermarkTextIsVisible();
    public void set_WatermarkTextIsVisible(bool value);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    public static void OnIsUndoEnabledChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsUndoEnabledChanged(DependencyPropertyChangedEventArgs args);
    public static void OnNegativeForegroundChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNegativeForegroundChanged(DependencyPropertyChangedEventArgs args);
    public static void OnEnterToMoveNextChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnEnterToMoveNextChanged(DependencyPropertyChangedEventArgs args);
    public static void OnForegroundChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnForegroundChanged(DependencyPropertyChangedEventArgs args);
    public static void OnUseNullOptionChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public virtual void OnUseNullOptionChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsNegativeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsNegativeChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsZeroChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsZeroChanged(DependencyPropertyChangedEventArgs args);
    public static void OnIsNullChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsNullChanged(DependencyPropertyChangedEventArgs args);
    public static void OnCultureChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCultureChanged(DependencyPropertyChangedEventArgs args);
    public static void OnNumberFormatChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNumberFormatChanged(DependencyPropertyChangedEventArgs args);
    public static void OnTextSelectionOnFocusChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnTextSelectionOnFocusChanged(DependencyPropertyChangedEventArgs args);
    public bool get_IsScrollingOnCircle();
    public void set_IsScrollingOnCircle(bool value);
    public bool get_EnterToMoveNext();
    public void set_EnterToMoveNext(bool value);
    public bool get_TextSelectionOnFocus();
    public void set_TextSelectionOnFocus(bool value);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    internal virtual void OnCultureChanged();
    internal virtual void OnNumberFormatChanged();
    public bool get_IsCaretAnimationEnabled();
    public void set_IsCaretAnimationEnabled(bool value);
    internal int get_CaretIndex();
    internal void set_CaretIndex(int value);
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.EditorCommands : object {
    private static RoutedCommand clear;
    public static RoutedCommand Clear { get; }
    private static EditorCommands();
    public static RoutedCommand get_Clear();
}
public class Syncfusion.Windows.Shared.EmptyCollectionToObjectConverter : EmptyObjectToObjectConverter {
    protected virtual bool CheckValueIsEmpty(object value);
}
public class Syncfusion.Windows.Shared.EmptyObjectToObjectConverter : DependencyObject {
    public static DependencyProperty NotEmptyValueProperty;
    public static DependencyProperty EmptyValueProperty;
    public static DependencyProperty CanConvertToTargetTypeProperty;
    public object NotEmptyValue { get; public set; }
    public object EmptyValue { get; public set; }
    public bool CanConvertToTargetType { get; public set; }
    private static EmptyObjectToObjectConverter();
    public object get_NotEmptyValue();
    public void set_NotEmptyValue(object value);
    public object get_EmptyValue();
    public void set_EmptyValue(object value);
    public bool get_CanConvertToTargetType();
    public void set_CanConvertToTargetType(bool value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual bool CheckValueIsEmpty(object value);
}
public class Syncfusion.Windows.Shared.EmptyStringToObjectConverter : EmptyObjectToObjectConverter {
    protected virtual bool CheckValueIsEmpty(object value);
}
internal class Syncfusion.Windows.Shared.EnabledDisabledResources : ValueType {
    public object EnabledResource;
    public object DisabledResource;
}
public class Syncfusion.Windows.Shared.EnableMultiVlaueConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Shared.ExpandModes : Enum {
    public int value__;
    public static ExpandModes ExpandOnMouseOver;
    public static ExpandModes ExpandOnClick;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ExtendedScrollingAdorner : Adorner {
    private Thumb valueThumb;
    private VisualCollection visualCollection;
    private Rect adornedElementRect;
    private FrameworkElement fElement;
    private double prevVerticalChange;
    private double prevHorizontalChange;
    private POINT pnt;
    private bool isThumbMoved;
    private StreamResourceInfo info;
    private Cursor scrollingCursor;
    public bool IsReadOnly { get; }
    protected int VisualChildrenCount { get; }
    public ExtendedScrollingAdorner(UIElement adornedElement);
    public bool get_IsReadOnly();
    private void valueThumb_PreviewMouseMove(object sender, MouseEventArgs e);
    private void fElement_IsKeyboardFocusWithinChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void fElement_IsKeyboardFocusedChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void valueThumb_PreviewMouseDown(object sender, MouseButtonEventArgs e);
    private void fElement_PreviewMouseMove(object sender, MouseEventArgs e);
    private void valueThumb_PreviewMouseUp(object sender, MouseButtonEventArgs e);
    private void valueThumb_DragDelta(object sender, DragDeltaEventArgs e);
    private void ValueChange(bool increase);
    private void ArrangeThumb();
    protected virtual int get_VisualChildrenCount();
    protected virtual Visual GetVisualChild(int index);
}
public class Syncfusion.Windows.Shared.FractionValue : DependencyObject {
    public static DependencyProperty FractionProperty;
    public static DependencyProperty ValueProperty;
    internal Action PropertyChanged;
    public double Fraction { get; public set; }
    public double Value { get; public set; }
    private static FractionValue();
    public double get_Fraction();
    public void set_Fraction(double value);
    public double get_Value();
    public void set_Value(double value);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    private void RaisePropertyChanged();
}
public enum Syncfusion.Windows.Shared.FrameType : Enum {
    public int value__;
    public static FrameType Rectangle;
    public static FrameType RoundedRectangle;
    public static FrameType Circle;
}
public static class Syncfusion.Windows.Shared.GarbageUtils : object {
}
public class Syncfusion.Windows.Shared.GenericDoubleAnimation : DoubleAnimationBase {
    public static DependencyProperty FromProperty;
    public static DependencyProperty ToProperty;
    public static DependencyProperty StepValueProviderProperty;
    public double From { get; public set; }
    public double To { get; public set; }
    public IDoubleAnimationStepValueProvider StepValueProvider { get; public set; }
    private static GenericDoubleAnimation();
    public double get_From();
    public void set_From(double value);
    public double get_To();
    public void set_To(double value);
    public IDoubleAnimationStepValueProvider get_StepValueProvider();
    public void set_StepValueProvider(IDoubleAnimationStepValueProvider value);
    protected virtual double GetCurrentValueCore(double startValue, double targetValue, AnimationClock clock);
    protected virtual Freezable CreateInstanceCore();
}
[DesignTimeVisibleAttribute("False")]
internal class Syncfusion.Windows.Shared.GradientItemCollection : ItemsControl {
    [CompilerGeneratedAttribute]
private GradientStopItem <gradientItem>k__BackingField;
    internal GradientStopItem gradientItem { get; internal set; }
    private static GradientItemCollection();
    [CompilerGeneratedAttribute]
internal GradientStopItem get_gradientItem();
    [CompilerGeneratedAttribute]
internal void set_gradientItem(GradientStopItem value);
}
public class Syncfusion.Windows.Shared.GradientStartPoint : object {
    internal double x;
    internal double y;
    private PropertyChangedEventHandler PropertyChanged;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    private void NotifyPropertyChanged(string p);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void Dispose();
}
[DesignTimeVisibleAttribute("False")]
internal class Syncfusion.Windows.Shared.GradientStopItem : Control {
    internal ColorEdit cedit;
    public static DependencyProperty ColorProperty;
    private Thumb th;
    [CompilerGeneratedAttribute]
private Canvas <gradientitem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isselected>k__BackingField;
    [CompilerGeneratedAttribute]
private double <offset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isEnabled>k__BackingField;
    public Color color { get; public set; }
    internal Canvas gradientitem { get; internal set; }
    internal bool isselected { get; internal set; }
    internal double offset { get; internal set; }
    internal bool isEnabled { get; internal set; }
    public GradientStopItem(Color col, bool sel, double off, ColorEdit edit);
    private static GradientStopItem();
    public Color get_color();
    public void set_color(Color value);
    [CompilerGeneratedAttribute]
internal Canvas get_gradientitem();
    [CompilerGeneratedAttribute]
internal void set_gradientitem(Canvas value);
    [CompilerGeneratedAttribute]
internal bool get_isselected();
    [CompilerGeneratedAttribute]
internal void set_isselected(bool value);
    [CompilerGeneratedAttribute]
internal double get_offset();
    [CompilerGeneratedAttribute]
internal void set_offset(double value);
    [CompilerGeneratedAttribute]
internal bool get_isEnabled();
    [CompilerGeneratedAttribute]
internal void set_isEnabled(bool value);
    private void createitem();
    public static ColorEdit GetBrushEditParentFromChildren(FrameworkElement element);
    private void gradientitem_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void gradientitem_MouseMove(object sender, MouseEventArgs e);
    private void gradientitem_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    internal void Dispose();
}
public class Syncfusion.Windows.Shared.GridLengthToDoubleConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Shared.GWL : Enum {
    public int value__;
    public static GWL WNDPROC;
    public static GWL HINSTANCE;
    public static GWL HWNDPARENT;
    public static GWL STYLE;
    public static GWL EXSTYLE;
    public static GWL USERDATA;
    public static GWL ID;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.HidePopupEventArgs : EventArgs {
    private Date m_selectedDate;
    public Date SelectedDate { get; public set; }
    public HidePopupEventArgs(Date selectedDate);
    public Date get_SelectedDate();
    public void set_SelectedDate(Date value);
}
internal enum Syncfusion.Windows.Shared.HitTestResults : Enum {
    public int value__;
    public static HitTestResults Error;
    public static HitTestResults Transparent;
    public static HitTestResults Nowhere;
    public static HitTestResults Client;
    public static HitTestResults Caption;
    public static HitTestResults Sysmenu;
    public static HitTestResults GrowBox;
    public static HitTestResults Menu;
    public static HitTestResults HScroll;
    public static HitTestResults VScroll;
    public static HitTestResults ButtonMin;
    public static HitTestResults ButtonMax;
    public static HitTestResults BorderLeft;
    public static HitTestResults BorderRight;
    public static HitTestResults BorderTop;
    public static HitTestResults BorderBottom;
    public static HitTestResults CornerLeftTop;
    public static HitTestResults CornerTopRight;
    public static HitTestResults CornerTopLeft;
    public static HitTestResults CornerBottonRight;
    public static HitTestResults Border;
    public static HitTestResults Object;
    public static HitTestResults Close;
    public static HitTestResults Help;
}
[ValueConversionAttribute("System.DateTime", "System.Int32")]
public class Syncfusion.Windows.Shared.HoursConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Shared.HSV : Enum {
    public int value__;
    public static HSV H;
    public static HSV S;
    public static HSV V;
}
[MarkupExtensionReturnTypeAttribute("System.Windows.Media.Brush")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.HSVBackgroundBrushExtension : MarkupExtension {
    private static ColorToHSVBackgroundConverter m_converter;
    private string m_key;
    private static HSVBackgroundBrushExtension();
    public HSVBackgroundBrushExtension(string key);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class Syncfusion.Windows.Shared.HsvColor : ValueType {
    public double H;
    public double S;
    public double V;
    public HsvColor(double h, double s, double v);
    public static HsvColor ConvertRgbToHsv(int r, int b, int g);
    public static Color ConvertHsvToRgb(double h, double s, double v);
}
internal interface Syncfusion.Windows.Shared.ICharacterProperties {
    public string RegExpression { get; public set; }
    public bool IsLiteral { get; public set; }
    public Nullable`1<bool> IsUpper { get; public set; }
    public Nullable`1<bool> IsPromptCharacter { get; public set; }
    public abstract virtual string get_RegExpression();
    public abstract virtual void set_RegExpression(string value);
    public abstract virtual bool get_IsLiteral();
    public abstract virtual void set_IsLiteral(bool value);
    public abstract virtual Nullable`1<bool> get_IsUpper();
    public abstract virtual void set_IsUpper(Nullable`1<bool> value);
    public abstract virtual Nullable`1<bool> get_IsPromptCharacter();
    public abstract virtual void set_IsPromptCharacter(Nullable`1<bool> value);
}
public class Syncfusion.Windows.Shared.IcoFileSizeSelectorConverter : object {
    [CompilerGeneratedAttribute]
private static Func`2<BitmapFrame, double> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<BitmapFrame, double> CS$<>9__CachedAnonymousMethodDelegate4;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    [CompilerGeneratedAttribute]
private static double <Convert>b__1(BitmapFrame f);
    [CompilerGeneratedAttribute]
private static double <Convert>b__2(BitmapFrame f);
}
public enum Syncfusion.Windows.Shared.IconAlignment : Enum {
    public int value__;
    public static IconAlignment Left;
    public static IconAlignment Right;
}
[DesignTimeVisibleAttribute("False")]
public interface Syncfusion.Windows.Shared.IDoubleAnimationStepValueProvider {
    public abstract virtual double GetAnimationStepValue(double totalseconds, double from, double current, double duration);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.IntegerTextBox : EditorBase {
    private PropertyChangedCallback ValidationCompletedChanged;
    private PropertyChangedCallback InvalidValueBehaviorChanged;
    private StringValidationCompletedEventHandler ValueValidationCompleted;
    private PropertyChangedCallback ValidationValueChanged;
    private CancelEventHandler Validating;
    private EventHandler Validated;
    private PropertyChangedCallback MinValueChanged;
    private PropertyChangedCallback ValueChanged;
    private PropertyChangedCallback MaxValueChanged;
    private PropertyChangedCallback NumberGroupSizesChanged;
    private PropertyChangedCallback NumberGroupSeparatorChanged;
    internal Nullable`1<long> OldValue;
    internal Nullable`1<long> mValue;
    internal Nullable`1<bool> mValueChanged;
    internal bool mIsLoaded;
    internal int count;
    internal string checktext;
    private RepeatButton upButton;
    private RepeatButton downButton;
    private ScrollViewer PART_ContentHost;
    private bool _validatingrResult;
    public static DependencyProperty GroupSeperatorEnabledProperty;
    public static DependencyProperty NumberGroupSizesProperty;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty MinValueProperty;
    public static DependencyProperty MaxValueProperty;
    public static DependencyProperty NumberGroupSeparatorProperty;
    public static DependencyProperty ScrollIntervalProperty;
    internal double percentage;
    public static DependencyProperty NullValueProperty;
    public static DependencyProperty ValueValidationProperty;
    public static DependencyProperty InvalidValueBehaviorProperty;
    public static DependencyProperty ValidationValueProperty;
    public static DependencyProperty ValidationCompletedProperty;
    [CompilerGeneratedAttribute]
private ICommand <pastecommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <copycommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <cutcommand>k__BackingField;
    public ICommand pastecommand { get; private set; }
    public ICommand copycommand { get; private set; }
    public ICommand cutcommand { get; private set; }
    public Nullable`1<long> Value { get; public set; }
    public long MinValue { get; public set; }
    public long MaxValue { get; public set; }
    public string NumberGroupSeparator { get; public set; }
    public bool GroupSeperatorEnabled { get; public set; }
    public Int32Collection NumberGroupSizes { get; public set; }
    public double ProgressFactor { get; }
    public int ScrollInterval { get; public set; }
    public Nullable`1<long> NullValue { get; public set; }
    public StringValidation ValueValidation { get; public set; }
    public InvalidInputBehavior InvalidValueBehavior { get; public set; }
    public string ValidationValue { get; public set; }
    public bool ValidationCompleted { get; public set; }
    private static IntegerTextBox();
    public void add_ValidationCompletedChanged(PropertyChangedCallback value);
    public void remove_ValidationCompletedChanged(PropertyChangedCallback value);
    public void add_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void remove_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void add_ValueValidationCompleted(StringValidationCompletedEventHandler value);
    public void remove_ValueValidationCompleted(StringValidationCompletedEventHandler value);
    public void add_ValidationValueChanged(PropertyChangedCallback value);
    public void remove_ValidationValueChanged(PropertyChangedCallback value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    public void add_MinValueChanged(PropertyChangedCallback value);
    public void remove_MinValueChanged(PropertyChangedCallback value);
    public void add_ValueChanged(PropertyChangedCallback value);
    public void remove_ValueChanged(PropertyChangedCallback value);
    public void add_MaxValueChanged(PropertyChangedCallback value);
    public void remove_MaxValueChanged(PropertyChangedCallback value);
    public void add_NumberGroupSizesChanged(PropertyChangedCallback value);
    public void remove_NumberGroupSizesChanged(PropertyChangedCallback value);
    public void add_NumberGroupSeparatorChanged(PropertyChangedCallback value);
    public void remove_NumberGroupSeparatorChanged(PropertyChangedCallback value);
    [CompilerGeneratedAttribute]
public ICommand get_pastecommand();
    [CompilerGeneratedAttribute]
private void set_pastecommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_copycommand();
    [CompilerGeneratedAttribute]
private void set_copycommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_cutcommand();
    [CompilerGeneratedAttribute]
private void set_cutcommand(ICommand value);
    private void IntegerTextBox_Unloaded(object sender, RoutedEventArgs e);
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    private void _pastecommand(object parameter);
    private void _copycommand(object parameter);
    private void _cutcommand(object parameter);
    private bool Canpaste(object parameter);
    public virtual void OnApplyTemplate();
    private void CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    private void copy();
    private void Paste();
    private void SpinButton_Click(object sender, RoutedEventArgs e);
    private void ChangeValue(bool canIncrement);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void cut();
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    internal virtual void OnCultureChanged();
    internal virtual void OnNumberFormatChanged();
    protected virtual void OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    public virtual void OnUseNullOptionChanged(DependencyPropertyChangedEventArgs args);
    internal void FormatText();
    internal void SetValue(Nullable`1<bool> IsReload, Nullable`1<long> _Value);
    internal Nullable`1<long> ValidateValue(Nullable`1<long> Val);
    internal CultureInfo GetCulture();
    private static object CoerceValue(DependencyObject d, object baseValue);
    private void IntegerTextbox_Loaded(object sender, RoutedEventArgs e);
    public Nullable`1<long> get_Value();
    public void set_Value(Nullable`1<long> value);
    public long get_MinValue();
    public void set_MinValue(long value);
    public long get_MaxValue();
    public void set_MaxValue(long value);
    public string get_NumberGroupSeparator();
    public void set_NumberGroupSeparator(string value);
    public bool get_GroupSeperatorEnabled();
    public void set_GroupSeperatorEnabled(bool value);
    public Int32Collection get_NumberGroupSizes();
    public void set_NumberGroupSizes(Int32Collection value);
    public double get_ProgressFactor();
    public int get_ScrollInterval();
    public void set_ScrollInterval(int value);
    public static void OnNumberGroupSizesChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNumberGroupSizesChanged(DependencyPropertyChangedEventArgs args);
    public static void OnValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMinValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMaxValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaxValueChanged(DependencyPropertyChangedEventArgs args);
    private static void OnNumberGroupSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static object CoerceNumberGroupSeperator(DependencyObject d, object baseValue);
    protected virtual void OnNumberGroupSeparatorChanged(DependencyPropertyChangedEventArgs e);
    public Nullable`1<long> get_NullValue();
    public void set_NullValue(Nullable`1<long> value);
    public static void OnNullValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNullValueChanged(DependencyPropertyChangedEventArgs args);
    internal void OnValueValidationCompleted(StringValidationEventArgs e);
    internal void OnValidated(EventArgs e);
    internal bool OnValidating(CancelEventArgs e);
    public StringValidation get_ValueValidation();
    public void set_ValueValidation(StringValidation value);
    public InvalidInputBehavior get_InvalidValueBehavior();
    public void set_InvalidValueBehavior(InvalidInputBehavior value);
    public static void OnInvalidValueBehaviorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnInvalidValueBehaviorChanged(DependencyPropertyChangedEventArgs args);
    public string get_ValidationValue();
    public void set_ValidationValue(string value);
    public static void OnValidationValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationValueChanged(DependencyPropertyChangedEventArgs args);
    public bool get_ValidationCompleted();
    public void set_ValidationCompleted(bool value);
    public static void OnValidationCompletedPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationCompletedPropertyChanged(DependencyPropertyChangedEventArgs args);
}
internal class Syncfusion.Windows.Shared.IntegerValueHandler : object {
    public static IntegerValueHandler integerValueHandler;
    private NumberFormatInfo numberFormat;
    private int selectionStart;
    private int selectionEnd;
    private int selectionLength;
    private int caretPosition;
    private string unmaskedText;
    private string maskedText;
    private bool minusKeyValidationflag;
    private static IntegerValueHandler();
    public bool MatchWithMask(IntegerTextBox integerTextBox, string text);
    private bool CharacterValidation(IntegerTextBox integerTextBox, string text, bool minusKeyValidationflag);
    public bool HandleKeyDown(IntegerTextBox integerTextBox, KeyEventArgs eventArgs);
    private void InitializeValues(IntegerTextBox integerTextBox);
    private void GenerateUnmaskedText(IntegerTextBox integerTextBox);
    private bool TextEditingforBackSpace(IntegerTextBox integerTextBox);
    private bool TextEditingForMatchingMask(IntegerTextBox integerTextBox, string text, bool minusKeyValidationflag);
    public bool HandleBackSpaceKey(IntegerTextBox integerTextBox);
    private bool TextEditingforDelete(IntegerTextBox integerTextBox);
    public bool HandleDeleteKey(IntegerTextBox integerTextBox);
    public bool HandleUpDownKey(IntegerTextBox integerTextBox, bool isUpKeyPressed);
}
public enum Syncfusion.Windows.Shared.InvalidInputBehavior : Enum {
    public int value__;
    public static InvalidInputBehavior None;
    public static InvalidInputBehavior DisplayErrorMessage;
    public static InvalidInputBehavior ResetValue;
}
internal interface Syncfusion.Windows.Shared.IOverviewPanel {
    public double Scale { get; public set; }
    public double ZoomFactor { get; public set; }
    public double MinimumZoom { get; public set; }
    public double MaximumZoom { get; public set; }
    public bool IsZoomInEnabled { get; public set; }
    public ICommand ZoomIn { get; public set; }
    public bool IsZoomOutEnabled { get; public set; }
    public ICommand ZoomOut { get; public set; }
    public bool IsZoomToEnabled { get; public set; }
    public ICommand ZoomTo { get; public set; }
    public bool IsZoomResetEnabled { get; public set; }
    public ICommand ZoomReset { get; public set; }
    public ZoomMode ZoomMode { get; public set; }
    public bool AllowResize { get; public set; }
    public bool IsPanEnabled { get; public set; }
    public abstract virtual double get_Scale();
    public abstract virtual void set_Scale(double value);
    public abstract virtual double get_ZoomFactor();
    public abstract virtual void set_ZoomFactor(double value);
    public abstract virtual double get_MinimumZoom();
    public abstract virtual void set_MinimumZoom(double value);
    public abstract virtual double get_MaximumZoom();
    public abstract virtual void set_MaximumZoom(double value);
    public abstract virtual bool get_IsZoomInEnabled();
    public abstract virtual void set_IsZoomInEnabled(bool value);
    public abstract virtual ICommand get_ZoomIn();
    public abstract virtual void set_ZoomIn(ICommand value);
    public abstract virtual bool get_IsZoomOutEnabled();
    public abstract virtual void set_IsZoomOutEnabled(bool value);
    public abstract virtual ICommand get_ZoomOut();
    public abstract virtual void set_ZoomOut(ICommand value);
    public abstract virtual bool get_IsZoomToEnabled();
    public abstract virtual void set_IsZoomToEnabled(bool value);
    public abstract virtual ICommand get_ZoomTo();
    public abstract virtual void set_ZoomTo(ICommand value);
    public abstract virtual bool get_IsZoomResetEnabled();
    public abstract virtual void set_IsZoomResetEnabled(bool value);
    public abstract virtual ICommand get_ZoomReset();
    public abstract virtual void set_ZoomReset(ICommand value);
    public abstract virtual ZoomMode get_ZoomMode();
    public abstract virtual void set_ZoomMode(ZoomMode value);
    public abstract virtual bool get_AllowResize();
    public abstract virtual void set_AllowResize(bool value);
    public abstract virtual bool get_IsPanEnabled();
    public abstract virtual void set_IsPanEnabled(bool value);
}
public interface Syncfusion.Windows.Shared.IPinnables {
    public bool IsPinned { get; public set; }
    public abstract virtual bool get_IsPinned();
    public abstract virtual void set_IsPinned(bool value);
}
public class Syncfusion.Windows.Shared.IsEnabledResourceExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    public string ID { get; public set; }
    public IsEnabledResourceExtension(string id);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    private object GetEnabledResource(IServiceProvider serviceProvider);
    private object GetDisabledResource(IServiceProvider serviceProvider);
}
public class Syncfusion.Windows.Shared.IsEnabledResourceKeyExtension : ResourceKey {
    private Assembly m_asm;
    [CompilerGeneratedAttribute]
private ResourceKeyState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    public ResourceKeyState State { get; public set; }
    public string ID { get; public set; }
    public Assembly Assembly { get; }
    public IsEnabledResourceKeyExtension(ResourceKeyState state, string id);
    [CompilerGeneratedAttribute]
public ResourceKeyState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ResourceKeyState value);
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
    public virtual Assembly get_Assembly();
}
internal class Syncfusion.Windows.Shared.IsEnabledToResourceConverter : object {
    private EnabledDisabledResources m_resources;
    internal IsEnabledToResourceConverter(EnabledDisabledResources resources);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface Syncfusion.Windows.Shared.ISkinStylePropagator {
    public abstract virtual void OnStyleChanged(string visualStyle);
}
internal enum Syncfusion.Windows.Shared.ItemMovementState : Enum {
    public int value__;
    public static ItemMovementState NotStarted;
    public static ItemMovementState Started;
    public static ItemMovementState Finished;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ItemsControlInternal : ItemsControl {
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ItemsControlInternalItem : ContentControl {
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public interface Syncfusion.Windows.Shared.ITextInputLayoutNotification {
    public abstract virtual void OnSelectedItemsChanged();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public interface Syncfusion.Windows.Shared.ITextInputLayoutSelector {
    public bool IsDropDownOpen { get; public set; }
    public bool IsTextInputLayoutChild { get; public set; }
    public abstract virtual bool get_IsDropDownOpen();
    public abstract virtual void set_IsDropDownOpen(bool value);
    public abstract virtual bool get_IsTextInputLayoutChild();
    public abstract virtual void set_IsTextInputLayoutChild(bool value);
    public abstract virtual IEnumerable GetSelectedItems();
}
public interface Syncfusion.Windows.Shared.IZoomMouseParameter {
    public MouseEventArgs MouseEventArgs { get; public set; }
    public abstract virtual MouseEventArgs get_MouseEventArgs();
    public abstract virtual void set_MouseEventArgs(MouseEventArgs value);
}
public interface Syncfusion.Windows.Shared.IZoomParameter {
}
public interface Syncfusion.Windows.Shared.IZoomPositionParameter {
    public Nullable`1<double> ZoomTo { get; public set; }
    public Nullable`1<double> ZoomFactor { get; public set; }
    public Nullable`1<Point> FocusPoint { get; public set; }
    public abstract virtual Nullable`1<double> get_ZoomTo();
    public abstract virtual void set_ZoomTo(Nullable`1<double> value);
    public abstract virtual Nullable`1<double> get_ZoomFactor();
    public abstract virtual void set_ZoomFactor(Nullable`1<double> value);
    public abstract virtual Nullable`1<Point> get_FocusPoint();
    public abstract virtual void set_FocusPoint(Nullable`1<Point> value);
}
public class Syncfusion.Windows.Shared.KeyCode : object {
    public static string KeycodeToChar(Key key, bool isShift);
}
internal class Syncfusion.Windows.Shared.KeyHandler : object {
    public static KeyHandler keyHandler;
    private Hashtable monthTable;
    private static KeyHandler();
    public bool HandleKeyDown(DateTimeEdit dateTimeEdit, KeyEventArgs eventArgs);
    public bool HandleAlphaKeys(DateTimeEdit dateTimeEdit, Key k);
    public bool HandleLeftKey(DateTimeEdit dateTimeEdit);
    public bool HandleRightKey(DateTimeEdit dateTimeEdit);
    private void NavigateSelectionToNextField(int index, DateTimeEdit dateTimeEdit);
    private void UpdateSelection(bool isUpdateSelection, DateTimeEdit dateTimeEdit);
    private DateTimeProperties GetDateTimeEditProperty(DateTimeEdit dateTimeEdit);
    public bool HandleUpKey(DateTimeEdit dateTimeEdit);
    internal DateTime ValidateMinMaxDateTime(bool IsMaxDateValidation, DateTime date, DateTimeEdit dateTimeEdit);
    public bool HandleDownKey(DateTimeEdit dateTimeEdit);
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Shared.LicenseHelper : object {
    private static bool shouldQuit;
    internal static LicenseMessage licenseMessage;
    internal static LicenseMessage exitLicenseMessage;
    private static LicenseHelper();
    public static void ValidateLicense(bool isInternalDependentControl);
}
internal class Syncfusion.Windows.Shared.LicenseMessage : object {
    internal LicensePopup msgbox;
    private bool exceedControlCount;
    internal bool ExceedControlCount { get; internal set; }
    internal bool get_ExceedControlCount();
    internal void set_ExceedControlCount(bool value);
    public void DisplayMessage(string title, string message);
    [CompilerGeneratedAttribute]
private void <DisplayMessage>b__0(object sender, CancelEventArgs args);
}
public class Syncfusion.Windows.Shared.LicensePopup : Window {
    private bool exceedControlCount;
    internal LicensePopup LicensePopupWindow;
    internal TextBlock error_Message;
    internal Button close_Button;
    internal Button claim_License_Button;
    private bool _contentLoaded;
    internal bool ExceedControlCount { get; internal set; }
    internal void CloseWindow();
    private void ClaimLicense();
    internal bool get_ExceedControlCount();
    internal void set_ExceedControlCount(bool value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0(object sender, RoutedEventArgs args);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1(object sender, RoutedEventArgs args);
}
public class Syncfusion.Windows.Shared.LocalizationResourceAccessor : object {
    public ResourceManager Resources;
    protected virtual Assembly GetControlAssembly();
    protected virtual string GetControlAssemblyDefaultNamespace();
    protected virtual ResourceManager GetDefaultResourceManager();
    private ResourceManager GetLocalizedResourceManager(Assembly lookupassembly, string nameSpace);
    public string GetString(string name, Object[] args);
    public string GetString(string name);
    public string GetString(CultureInfo culture, string name);
    public void SetResources(Assembly lookupassembly, string nameSpace);
}
public class Syncfusion.Windows.Shared.LogicalUtils : object {
    public static DependencyObject GetParent(DependencyObject current);
    public static DependencyObject GetRootParent(DependencyObject current);
    public static DependencyObject GetParentOfType(DependencyObject current, Type type);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.Magnifier : Control {
    private static int CdefaultDPI;
    private bool m_bIsAdded;
    private AdornerLayer m_adornerLayer;
    private MagnifierAdorner mAdorner;
    private static bool c_isInDesignMode;
    private PropertyChangedCallback FrameTypeChanged;
    private PropertyChangedCallback FrameHeightChanged;
    private PropertyChangedCallback FrameWidthChanged;
    private PropertyChangedCallback FrameRadiusChanged;
    private PropertyChangedCallback FrameCornerRadiusChanged;
    private PropertyChangedCallback FrameBackgroundChanged;
    private PropertyChangedCallback ZoomFactorChanged;
    private PropertyChangedCallback EnableExportChanged;
    private PropertyChangedCallback TargetElementChanged;
    private CoerceValueCallback TargetElementChanging;
    public static DependencyProperty FrameTypeProperty;
    public static DependencyProperty FrameHeightProperty;
    public static DependencyProperty FrameWidthProperty;
    public static DependencyProperty FrameRadiusProperty;
    public static DependencyProperty FrameCornerRadiusProperty;
    public static DependencyProperty FrameBackgroundProperty;
    public static DependencyProperty ZoomFactorProperty;
    public static DependencyProperty EnableExportProperty;
    public static DependencyProperty TargetElementProperty;
    public static DependencyProperty CurrentProperty;
    public static DependencyProperty ViewboxProperty;
    public static DependencyProperty BackgroundWidthProperty;
    public static DependencyProperty BackgroundHeightProperty;
    public static DependencyProperty ActualTargetElementProperty;
    public FrameType FrameType { get; public set; }
    public double FrameHeight { get; public set; }
    public double FrameWidth { get; public set; }
    public double FrameRadius { get; public set; }
    public double FrameCornerRadius { get; public set; }
    public Brush FrameBackground { get; public set; }
    public double ZoomFactor { get; public set; }
    public bool EnableExport { get; public set; }
    public UIElement TargetElement { get; public set; }
    internal Rect Viewbox { get; internal set; }
    internal Size CurrentSize { get; }
    internal double BackgroundWidth { get; internal set; }
    internal double BackgroundHeight { get; internal set; }
    internal UIElement ActualTargetElement { get; internal set; }
    private static Magnifier();
    public FrameType get_FrameType();
    public void set_FrameType(FrameType value);
    public double get_FrameHeight();
    public void set_FrameHeight(double value);
    public double get_FrameWidth();
    public void set_FrameWidth(double value);
    public double get_FrameRadius();
    public void set_FrameRadius(double value);
    public double get_FrameCornerRadius();
    public void set_FrameCornerRadius(double value);
    public Brush get_FrameBackground();
    public void set_FrameBackground(Brush value);
    public double get_ZoomFactor();
    public void set_ZoomFactor(double value);
    public bool get_EnableExport();
    public void set_EnableExport(bool value);
    public UIElement get_TargetElement();
    public void set_TargetElement(UIElement value);
    internal Rect get_Viewbox();
    internal void set_Viewbox(Rect value);
    internal Size get_CurrentSize();
    internal double get_BackgroundWidth();
    internal void set_BackgroundWidth(double value);
    internal double get_BackgroundHeight();
    internal void set_BackgroundHeight(double value);
    internal UIElement get_ActualTargetElement();
    internal void set_ActualTargetElement(UIElement value);
    public void add_FrameTypeChanged(PropertyChangedCallback value);
    public void remove_FrameTypeChanged(PropertyChangedCallback value);
    public void add_FrameHeightChanged(PropertyChangedCallback value);
    public void remove_FrameHeightChanged(PropertyChangedCallback value);
    public void add_FrameWidthChanged(PropertyChangedCallback value);
    public void remove_FrameWidthChanged(PropertyChangedCallback value);
    public void add_FrameRadiusChanged(PropertyChangedCallback value);
    public void remove_FrameRadiusChanged(PropertyChangedCallback value);
    public void add_FrameCornerRadiusChanged(PropertyChangedCallback value);
    public void remove_FrameCornerRadiusChanged(PropertyChangedCallback value);
    public void add_FrameBackgroundChanged(PropertyChangedCallback value);
    public void remove_FrameBackgroundChanged(PropertyChangedCallback value);
    public void add_ZoomFactorChanged(PropertyChangedCallback value);
    public void remove_ZoomFactorChanged(PropertyChangedCallback value);
    public void add_EnableExportChanged(PropertyChangedCallback value);
    public void remove_EnableExportChanged(PropertyChangedCallback value);
    public void add_TargetElementChanged(PropertyChangedCallback value);
    public void remove_TargetElementChanged(PropertyChangedCallback value);
    protected internal void add_TargetElementChanging(CoerceValueCallback value);
    protected internal void remove_TargetElementChanging(CoerceValueCallback value);
    private static void OnFrameTypeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameTypeChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameHeightChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameHeightChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameWidthChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameRadiusChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameCornerRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameCornerRadiusChanged(DependencyPropertyChangedEventArgs e);
    private static void OnFrameBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFrameBackgroundChanged(DependencyPropertyChangedEventArgs e);
    private static void OnZoomFactorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnZoomFactorChanged(DependencyPropertyChangedEventArgs e);
    private static object CoerceZoomFactor(DependencyObject d, object baseValue);
    protected virtual object CoerceZoomFactor(object baseValue);
    private static void OnEnableExportChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnEnableExportChanged(DependencyPropertyChangedEventArgs e);
    private static void OnTargetElementChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnTargetElementChanged(DependencyPropertyChangedEventArgs e);
    private static object CoerceTargetElement(DependencyObject d, object baseValue);
    protected virtual object CoerceTargetElement(object baseValue);
    private static void OnCurrentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public void AssociateWith(UIElement target);
    public void ZoomIn(double zoomFactor);
    public void ZoomOut(double zoomFactor);
    public static void SetCurrent(DependencyObject d, Magnifier magnifier);
    public static Magnifier GetCurrent(DependencyObject d);
    public void Save(Stream stream, BitmapEncoder encoder);
    public void Save(Stream stream);
    public void Save(string fileName);
    public void Save(string fileName, BitmapEncoder encoder);
    public void SaveToXps(Stream stream);
    public void SaveToXps(string filename);
    public void CopyToClipboard();
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
    private void ChangeTargetElement(UIElement uieOld, UIElement uieNew);
    private void TargetElement_MouseLeave(object sender, MouseEventArgs e);
    private void TargetElement_MouseEnter(object sender, MouseEventArgs e);
    private void TargetElement_LayoutUpdated(object sender, EventArgs e);
    private void Magnifier_SizeChanged(object sender, SizeChangedEventArgs e);
    private void UpdateTemplateDependentProperties();
    private BitmapEncoder CreateEncoderByExtension(string extension);
    private void UpdateActualTargetElement();
    private AdornerDecorator FindAdornerDecorator(UIElement rootElement);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.MagnifierAdorner : Adorner {
    private Magnifier mMagnifier;
    private Point mMousePoint;
    protected int VisualChildrenCount { get; }
    public MagnifierAdorner(UIElement element, Magnifier magnifier);
    private object Magnifier_TargetElementChanging(DependencyObject d, object baseValue);
    private void Current_PostProcessInput(object sender, ProcessInputEventArgs e);
    internal void UpdateMagnifierViewbox();
    private Point CalculateMagnifierViewboxLocation();
    internal void DisconnectMagnifier();
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
}
public class Syncfusion.Windows.Shared.MaskedEditorModel : object {
    internal MaskedTextBox maskedText;
    private static string defDigitSymbols;
    private static string defOtherSymbols;
    private static string defSeparatorSymbols;
    private static string defShiftSymbols;
    [CompilerGeneratedAttribute]
private string <CurrencySymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DateSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecimalSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberGroupSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private char <PromptChar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaskIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, ShiftStatus> <ShiftStatusIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, int> <TextMaskIndexes>k__BackingField;
    public string CurrencySymbol { get; public set; }
    public string DateSeparator { get; public set; }
    public string DecimalSeparator { get; public set; }
    public string Mask { get; public set; }
    public string NumberGroupSeparator { get; public set; }
    public char PromptChar { get; public set; }
    public string Text { get; public set; }
    public string TimeSeparator { get; public set; }
    private int MaskIndex { get; private set; }
    private Dictionary`2<int, ShiftStatus> ShiftStatusIndexes { get; private set; }
    private Dictionary`2<int, int> TextMaskIndexes { get; private set; }
    private static MaskedEditorModel();
    [CompilerGeneratedAttribute]
public string get_CurrencySymbol();
    [CompilerGeneratedAttribute]
public void set_CurrencySymbol(string value);
    [CompilerGeneratedAttribute]
public string get_DateSeparator();
    [CompilerGeneratedAttribute]
public void set_DateSeparator(string value);
    [CompilerGeneratedAttribute]
public string get_DecimalSeparator();
    [CompilerGeneratedAttribute]
public void set_DecimalSeparator(string value);
    [CompilerGeneratedAttribute]
public string get_Mask();
    [CompilerGeneratedAttribute]
public void set_Mask(string value);
    [CompilerGeneratedAttribute]
public string get_NumberGroupSeparator();
    [CompilerGeneratedAttribute]
public void set_NumberGroupSeparator(string value);
    [CompilerGeneratedAttribute]
public char get_PromptChar();
    [CompilerGeneratedAttribute]
public void set_PromptChar(char value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_TimeSeparator();
    [CompilerGeneratedAttribute]
public void set_TimeSeparator(string value);
    [CompilerGeneratedAttribute]
private int get_MaskIndex();
    [CompilerGeneratedAttribute]
private void set_MaskIndex(int value);
    [CompilerGeneratedAttribute]
private Dictionary`2<int, ShiftStatus> get_ShiftStatusIndexes();
    [CompilerGeneratedAttribute]
private void set_ShiftStatusIndexes(Dictionary`2<int, ShiftStatus> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<int, int> get_TextMaskIndexes();
    [CompilerGeneratedAttribute]
private void set_TextMaskIndexes(Dictionary`2<int, int> value);
    public static string GetMaskedText(string mask, string text, string dateSeparator, string timeSeparator, string decimalSeparator, string numberGroupSeparator, char promptChar, string currencySymbol);
    public string GetMaskedText();
    protected internal void ApplyNewMask();
    protected string GetNextMaskSymbol(bool bMoveCursor);
    protected string GetSeparatorText(char symbol);
    protected ShiftStatus GetShiftStatus(string maskSymbol);
    protected bool IsAcceptableSymbol(string maskSymbol, char input);
    protected bool IsInputSymbol(string maskSymbol);
    protected bool IsShiftSymbol(string maskSymbol);
    protected bool IsSymbolLiteral(string maskSymbol);
    protected bool IsSymbolSeparator(string maskSymbol);
    protected bool ReplaceTextSymbol(int index, string symbol);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
[ObsoleteAttribute("This control is obsolete. Use new SfMaskedEdit in Syncfusion.SfInput.WPF assembly instead.")]
public class Syncfusion.Windows.Shared.MaskedTextBox : TextBox {
    private PropertyChangedCallback MaskChanged;
    private PropertyChangedCallback ValidationStringChanged;
    private PropertyChangedCallback MaskCompletedChanged;
    private PropertyChangedCallback InvalidValueBehaviorChanged;
    private PropertyChangedCallback DateSeparatorChanged;
    private PropertyChangedCallback TimeSeparatorChanged;
    private PropertyChangedCallback DecimalSeparatorChanged;
    private PropertyChangedCallback NumberGroupSeparatorChanged;
    private PropertyChangedCallback CurrencySymbolChanged;
    private PropertyChangedCallback PromptCharChanged;
    private PropertyChangedCallback WatermarkTextModeChanged;
    private PropertyChangedCallback WatermarkTextIsVisibleChanged;
    private CancelEventHandler Validating;
    private EventHandler Validated;
    private StringValidationCompletedEventHandler StringValidationCompleted;
    private PropertyChangedCallback TextSelectionOnFocusChanged;
    private PropertyChangedCallback EnterToMoveNextChanged;
    private PropertyChangedCallback MinLengthChanged;
    private PropertyChangedCallback WatermarkTemplateChanged;
    private PropertyChangedCallback WatermarkTextChanged;
    private PropertyChangedCallback ValueChanged;
    internal string mValue;
    internal bool mIsLoaded;
    internal bool mValueChanged;
    internal string oldValue;
    internal int tempSelectedLength;
    private AdornerLayer aLayer;
    private TextBoxSelectionAdorner txtSelectionAdorner1;
    public static DependencyProperty WatermarkTemplateProperty;
    public static DependencyProperty IsNumericProperty;
    public static DependencyProperty MinLengthProperty;
    public static DependencyProperty WatermarkTextProperty;
    public static DependencyProperty WatermarkVisibilityProperty;
    public static DependencyProperty ContentElementVisibilityProperty;
    public static DependencyProperty WatermarkTextForegroundProperty;
    public static DependencyProperty WatermarkBackgroundProperty;
    public static DependencyProperty WatermarkOpacityProperty;
    public static DependencyProperty WatermarkTextIsVisibleProperty;
    public static DependencyProperty ReadOnlyProperty;
    internal static DependencyProperty CaretIndexProperty;
    public static DependencyProperty IsUndoEnabledProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty FocusedForegroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty IsCaretAnimationEnabledProperty;
    public static DependencyProperty ReadOnlyBackgroundProperty;
    public static DependencyProperty SelectionForegroundProperty;
    public static DependencyProperty InvalidValueBehaviorProperty;
    private ObservableCollection`1<CharacterProperties> mCharCollection;
    public static DependencyProperty EnterToMoveNextProperty;
    public static DependencyProperty ValidationStringProperty;
    public static DependencyProperty MaxCharLengthProperty;
    public static DependencyProperty StringValidationProperty;
    public static DependencyProperty TextSelectionOnFocusProperty;
    public static DependencyProperty PromptCharProperty;
    public static DependencyProperty MaskedTextProperty;
    public static DependencyProperty MaskProperty;
    public static DependencyProperty CultureProperty;
    public static DependencyProperty CurrencySymbolProperty;
    public static DependencyProperty DateSeparatorProperty;
    public static DependencyProperty TimeSeparatorProperty;
    public static DependencyProperty DecimalSeparatorProperty;
    public static DependencyProperty GroupSeperatorEnabledProperty;
    public static DependencyProperty NumberGroupSeparatorProperty;
    public static DependencyProperty WatermarkTextModeProperty;
    public static DependencyProperty TextMaskFormatProperty;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty EnableTouchProperty;
    public static DependencyProperty MaskCompletedProperty;
    private bool fromlostfocus;
    private static bool isIME;
    private static string mtboxtext;
    private static int cindex;
    private List`1<Key> KeyList;
    private ContentControl PART_Watermark;
    private bool mMouseLeftButtonDown;
    [CompilerGeneratedAttribute]
private ICommand <pastecommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <copycommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <cutcommand>k__BackingField;
    public DataTemplate WatermarkTemplate { get; public set; }
    public string WatermarkText { get; public set; }
    public bool IsNumeric { get; public set; }
    public int MinLength { get; public set; }
    public Visibility WatermarkVisibility { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public Visibility ContentElementVisibility { get; public set; }
    public Brush WatermarkTextForeground { get; public set; }
    public Brush WatermarkBackground { get; public set; }
    public double WatermarkOpacity { get; public set; }
    public bool WatermarkTextIsVisible { get; public set; }
    public ICommand pastecommand { get; private set; }
    public ICommand copycommand { get; private set; }
    public ICommand cutcommand { get; private set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Use IsReadOnly Property")]
public bool ReadOnly { get; public set; }
    internal int CaretIndex { get; internal set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public bool IsUndoEnabled { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public CornerRadius CornerRadius { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public Brush FocusedBackground { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public Brush FocusedForeground { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public Brush FocusedBorderBrush { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public bool IsCaretAnimationEnabled { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public Brush ReadOnlyBackground { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public Brush SelectionForeground { get; public set; }
    public InvalidInputBehavior InvalidValueBehavior { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public string MaskedText { get; public set; }
    public string Mask { get; public set; }
    internal ObservableCollection`1<CharacterProperties> CharCollection { get; internal set; }
    public char PromptChar { get; public set; }
    public CultureInfo Culture { get; public set; }
    public string CurrencySymbol { get; public set; }
    public string DateSeparator { get; public set; }
    public string TimeSeparator { get; public set; }
    public string DecimalSeparator { get; public set; }
    public string NumberGroupSeparator { get; public set; }
    public WatermarkTextMode WatermarkTextMode { get; public set; }
    public MaskFormat TextMaskFormat { get; public set; }
    public string Value { get; public set; }
    public StringValidation StringValidation { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Use MaxLength property")]
public int MaxCharLength { get; public set; }
    public string ValidationString { get; public set; }
    public bool EnterToMoveNext { get; public set; }
    public bool TextSelectionOnFocus { get; public set; }
    public bool GroupSeperatorEnabled { get; public set; }
    public bool EnableTouch { get; public set; }
    public bool MaskCompleted { get; public set; }
    private static MaskedTextBox();
    public void add_MaskChanged(PropertyChangedCallback value);
    public void remove_MaskChanged(PropertyChangedCallback value);
    public void add_ValidationStringChanged(PropertyChangedCallback value);
    public void remove_ValidationStringChanged(PropertyChangedCallback value);
    public void add_MaskCompletedChanged(PropertyChangedCallback value);
    public void remove_MaskCompletedChanged(PropertyChangedCallback value);
    public void add_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void remove_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void add_DateSeparatorChanged(PropertyChangedCallback value);
    public void remove_DateSeparatorChanged(PropertyChangedCallback value);
    public void add_TimeSeparatorChanged(PropertyChangedCallback value);
    public void remove_TimeSeparatorChanged(PropertyChangedCallback value);
    public void add_DecimalSeparatorChanged(PropertyChangedCallback value);
    public void remove_DecimalSeparatorChanged(PropertyChangedCallback value);
    public void add_NumberGroupSeparatorChanged(PropertyChangedCallback value);
    public void remove_NumberGroupSeparatorChanged(PropertyChangedCallback value);
    public void add_CurrencySymbolChanged(PropertyChangedCallback value);
    public void remove_CurrencySymbolChanged(PropertyChangedCallback value);
    public void add_PromptCharChanged(PropertyChangedCallback value);
    public void remove_PromptCharChanged(PropertyChangedCallback value);
    public void add_WatermarkTextModeChanged(PropertyChangedCallback value);
    public void remove_WatermarkTextModeChanged(PropertyChangedCallback value);
    public void add_WatermarkTextIsVisibleChanged(PropertyChangedCallback value);
    public void remove_WatermarkTextIsVisibleChanged(PropertyChangedCallback value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    public void add_StringValidationCompleted(StringValidationCompletedEventHandler value);
    public void remove_StringValidationCompleted(StringValidationCompletedEventHandler value);
    public void add_TextSelectionOnFocusChanged(PropertyChangedCallback value);
    public void remove_TextSelectionOnFocusChanged(PropertyChangedCallback value);
    public void add_EnterToMoveNextChanged(PropertyChangedCallback value);
    public void remove_EnterToMoveNextChanged(PropertyChangedCallback value);
    public void add_MinLengthChanged(PropertyChangedCallback value);
    public void remove_MinLengthChanged(PropertyChangedCallback value);
    public void add_WatermarkTemplateChanged(PropertyChangedCallback value);
    public void remove_WatermarkTemplateChanged(PropertyChangedCallback value);
    public void add_WatermarkTextChanged(PropertyChangedCallback value);
    public void remove_WatermarkTextChanged(PropertyChangedCallback value);
    public void add_ValueChanged(PropertyChangedCallback value);
    public void remove_ValueChanged(PropertyChangedCallback value);
    public DataTemplate get_WatermarkTemplate();
    public void set_WatermarkTemplate(DataTemplate value);
    public void set_WatermarkText(string value);
    public string get_WatermarkText();
    public bool get_IsNumeric();
    public void set_IsNumeric(bool value);
    public int get_MinLength();
    public void set_MinLength(int value);
    public static void OnWaterMarkTextChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnWaterMarkTextChanged(DependencyPropertyChangedEventArgs args);
    public void set_WatermarkVisibility(Visibility value);
    public Visibility get_WatermarkVisibility();
    private static Visibility CoerceWatermarkVisibility(DependencyObject d, object baseValue);
    public Visibility get_ContentElementVisibility();
    public void set_ContentElementVisibility(Visibility value);
    public Brush get_WatermarkTextForeground();
    public void set_WatermarkTextForeground(Brush value);
    public Brush get_WatermarkBackground();
    public void set_WatermarkBackground(Brush value);
    public double get_WatermarkOpacity();
    public void set_WatermarkOpacity(double value);
    public bool get_WatermarkTextIsVisible();
    public void set_WatermarkTextIsVisible(bool value);
    public static void OnWatermarkTextIsVisibleChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnWatermarkTextIsVisibleChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinLengthChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMinLengthChanged(DependencyPropertyChangedEventArgs args);
    public static void OnWaterMarkTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnWaterMarkTemplateChanged(DependencyPropertyChangedEventArgs args);
    private static void OnTextInputStart(object sender, TextCompositionEventArgs e);
    [CompilerGeneratedAttribute]
public ICommand get_pastecommand();
    [CompilerGeneratedAttribute]
private void set_pastecommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_copycommand();
    [CompilerGeneratedAttribute]
private void set_copycommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_cutcommand();
    [CompilerGeneratedAttribute]
private void set_cutcommand(ICommand value);
    private void MaskedTextBox_Unloaded(object sender, RoutedEventArgs e);
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    private void _pastecommand(object parameter);
    private void _copycommand(object parameter);
    private void _cutcommand(object parameter);
    private void copy();
    private bool Canpaste(object parameter);
    private void CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    private void ExecuteClearCommand(object sender, ExecutedRoutedEventArgs e);
    private void CanExecuteClearCommand(object sender, CanExecuteRoutedEventArgs e);
    private void MaskedTextBox_TextChanged(object sender, TextChangedEventArgs e);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    private void MaskedTextBox_Loaded(object sender, RoutedEventArgs e);
    internal int get_CaretIndex();
    internal void set_CaretIndex(int value);
    public bool get_IsUndoEnabled();
    public void set_IsUndoEnabled(bool value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public Brush get_FocusedForeground();
    public void set_FocusedForeground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public bool get_IsCaretAnimationEnabled();
    public void set_IsCaretAnimationEnabled(bool value);
    public Brush get_ReadOnlyBackground();
    public void set_ReadOnlyBackground(Brush value);
    public Brush get_SelectionForeground();
    public void set_SelectionForeground(Brush value);
    public InvalidInputBehavior get_InvalidValueBehavior();
    public void set_InvalidValueBehavior(InvalidInputBehavior value);
    public static void OnInvalidValueBehaviorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnInvalidValueBehaviorChanged(DependencyPropertyChangedEventArgs args);
    public string get_MaskedText();
    public void set_MaskedText(string value);
    public string get_Mask();
    public void set_Mask(string value);
    internal ObservableCollection`1<CharacterProperties> get_CharCollection();
    internal void set_CharCollection(ObservableCollection`1<CharacterProperties> value);
    public char get_PromptChar();
    public void set_PromptChar(char value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public string get_CurrencySymbol();
    public void set_CurrencySymbol(string value);
    public string get_DateSeparator();
    public void set_DateSeparator(string value);
    public string get_TimeSeparator();
    public void set_TimeSeparator(string value);
    public string get_DecimalSeparator();
    public void set_DecimalSeparator(string value);
    public string get_NumberGroupSeparator();
    public void set_NumberGroupSeparator(string value);
    public WatermarkTextMode get_WatermarkTextMode();
    public void set_WatermarkTextMode(WatermarkTextMode value);
    public MaskFormat get_TextMaskFormat();
    public void set_TextMaskFormat(MaskFormat value);
    public string get_Value();
    public void set_Value(string value);
    private static object CoerceMaskValue(DependencyObject d, object baseValue);
    public StringValidation get_StringValidation();
    public void set_StringValidation(StringValidation value);
    public int get_MaxCharLength();
    public void set_MaxCharLength(int value);
    public string get_ValidationString();
    public void set_ValidationString(string value);
    public bool get_EnterToMoveNext();
    public void set_EnterToMoveNext(bool value);
    public bool get_TextSelectionOnFocus();
    public void set_TextSelectionOnFocus(bool value);
    public static void OnTextSelectionOnFocusChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnTextSelectionOnFocusChanged(DependencyPropertyChangedEventArgs args);
    public static void OnEnterToMoveNextChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnEnterToMoveNextChanged(DependencyPropertyChangedEventArgs args);
    public static void OnValidationStringChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationStringChanged(DependencyPropertyChangedEventArgs args);
    public static void OnPromptCharChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPromptCharChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMaskChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaskChanged(DependencyPropertyChangedEventArgs args);
    public static void OnCurrencySymbolChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnCurrencySymbolChanged(DependencyPropertyChangedEventArgs args);
    public static void OnDateSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDateSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnTimeSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnTimeSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnDecimalSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDecimalSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public bool get_GroupSeperatorEnabled();
    public void set_GroupSeperatorEnabled(bool value);
    public static void OnNumberGroupSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNumberGroupSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnWatermarkTextModeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnWatermarkTextModeChanged(DependencyPropertyChangedEventArgs args);
    public static void OnTestMaskFormatChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnTestMaskFormatChanged(DependencyPropertyChangedEventArgs args);
    public bool get_EnableTouch();
    public void set_EnableTouch(bool value);
    public static void OnEnableTouchChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnEnableTouchChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnDrop(DragEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    public static void OnValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValueChanged(DependencyPropertyChangedEventArgs args);
    public bool get_MaskCompleted();
    public void set_MaskCompleted(bool value);
    public static void OnMaskCompletedPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaskCompletedPropertyChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    private void MaskedTextBox_LostFocus(object sender, RoutedEventArgs e);
    internal void OnStringValidationCompleted(StringValidationEventArgs e);
    internal void OnValidated(EventArgs e);
    internal bool OnValidating(CancelEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    internal void LoadTextBox();
    private void CheckWaterMarkVisibility();
    internal CultureInfo GetCulture();
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void cut();
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    protected virtual void OnTextChanged(TextChangedEventArgs e);
    internal void SetValue(Nullable`1<bool> IsReload, object _Value);
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
}
public enum Syncfusion.Windows.Shared.MaskFormat : Enum {
    public int value__;
    public static MaskFormat ExcludePromptAndLiterals;
    public static MaskFormat IncludePrompt;
    public static MaskFormat IncludeLiterals;
    public static MaskFormat IncludePromptAndLiterals;
}
internal class Syncfusion.Windows.Shared.MaskHandler : object {
    public static MaskHandler maskHandler;
    private static MaskHandler();
    public bool MatchWithMask(MaskedTextBox maskedTextBox, string text);
    public ObservableCollection`1<CharacterProperties> CreateRegularExpression(MaskedTextBox maskedTextBox);
    public string CreateDisplayText(MaskedTextBox maskedTextBox);
    public string CreateValueFromText(MaskedTextBox maskedTextBox);
    public bool HandleKeyDown(MaskedTextBox maskedTextBox, KeyEventArgs eventArgs);
    public bool HandlePaste(MaskedTextBox maskedTextBox);
    public bool HandleDeleteKey(MaskedTextBox maskedTextBox);
    public bool HandleValidationString(MaskedTextBox maskedTextBox, string text);
    public bool HandleBackSpaceKey(MaskedTextBox maskedTextBox);
    private string displayTextValue(string displayText, string text, bool isNumeric);
    public string CoerceValue(MaskedTextBox maskedTextbox, string value, MaskFormat maskformat);
    public string ValueFromMaskedText(MaskedTextBox maskedTextBox, MaskFormat TextMaskFormat, string maskedText, ObservableCollection`1<CharacterProperties> CharCollection);
}
public enum Syncfusion.Windows.Shared.MaxValidation : Enum {
    public int value__;
    public static MaxValidation OnKeyPress;
    public static MaxValidation OnLostFocus;
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.MenuAdv : ItemsControl {
    internal Canvas OutsidePopupCanvas;
    internal bool IsItemSelected;
    internal bool IsItemMouseOver;
    internal bool isMouseOver;
    internal bool isInitialOrientation;
    internal bool firstClick;
    internal bool isSecondClick;
    internal double PanelHeight;
    internal double PanelWidth;
    private double menuItemWidth;
    internal bool IsAltKeyPressed;
    internal bool IsMenuItemOpened;
    internal int accesscount;
    internal bool IsTopLevelItem;
    internal bool IsExecuteonLostFocus;
    internal MenuItemAdv currentOpenMenu;
    internal MenuItemAdv MouseOverItem;
    internal bool isMouseEnterpopup;
    internal bool IsAllPopupClosed;
    internal Window mainWindow;
    private bool isMenuLoaded;
    public static DependencyProperty IsScrollEnabledProperty;
    public static DependencyProperty ExpandModeProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty PopUpAnimationTypeProperty;
    public static DependencyProperty FocusOnAltProperty;
    [CompilerGeneratedAttribute]
private IDictionary`2<DependencyObject, object> <ContainersToItems>k__BackingField;
    internal IDictionary`2<DependencyObject, object> ContainersToItems { get; internal set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the Orientation of the MenuAdv, Which may be Horizontal or Vertical.")]
public Orientation Orientation { get; public set; }
    [DescriptionAttribute("Represents the Expand modes of MenuItems which present in the MenuAdv")]
[CategoryAttribute("Common Properties")]
public ExpandModes ExpandMode { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Represents menu items present in submenu popup can be scrollable or not")]
public bool IsScrollEnabled { get; public set; }
    [DescriptionAttribute("Represents the ANimation type to open the subMenu popup, which may be None, Fade, Slide or Scroll.")]
[CategoryAttribute("Common Properties")]
public AnimationTypes PopUpAnimationType { get; public set; }
    [DescriptionAttribute("Represent the Focus Enable when pressed on Alt Key")]
[CategoryAttribute("Common Properties")]
public bool FocusOnAlt { get; public set; }
    private static MenuAdv();
    private static void OnAccessKeyPressed(object sender, AccessKeyPressedEventArgs e);
    [CompilerGeneratedAttribute]
internal IDictionary`2<DependencyObject, object> get_ContainersToItems();
    [CompilerGeneratedAttribute]
internal void set_ContainersToItems(IDictionary`2<DependencyObject, object> value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public ExpandModes get_ExpandMode();
    public void set_ExpandMode(ExpandModes value);
    public bool get_IsScrollEnabled();
    public void set_IsScrollEnabled(bool value);
    public AnimationTypes get_PopUpAnimationType();
    public void set_PopUpAnimationType(AnimationTypes value);
    public bool get_FocusOnAlt();
    public void set_FocusOnAlt(bool value);
    private static void OnItemContainerStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOrientationChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static StackPanel GetStackpanel(UIElement parent);
    protected virtual void OnPreviewKeyUp(KeyEventArgs e);
    public virtual void OnApplyTemplate();
    private void MenuAdv_Loaded(object sender, RoutedEventArgs e);
    private void MainWindow_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void MenuAdv_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void MenuAdv_Unloaded(object sender, RoutedEventArgs e);
    private void MainWindow_PreviewMouseRightButtonUp(object sender, MouseButtonEventArgs e);
    private void MainWindow_KeyUp(object sender, KeyEventArgs e);
    private void MainWindow_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void MainWindow_LocationChanged(object sender, EventArgs e);
    private void MainWindow_Deactivated(object sender, EventArgs e);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    internal void UpdateSeparatorVisibility(MenuItemSeparator item);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    public void Dispose();
    private void RootVisual_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    internal StackPanel GetStackPanel();
    internal void GetMenuItem(MenuItemAdv menuItem);
    internal void CloseAllPopupsInternal(MenuItemAdv item);
    internal void CloseAllPopUps();
    internal void ChangeExtendButtonVisibility();
}
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[StyleTypedPropertyAttribute]
[TemplateVisualStateAttribute]
[StyleTypedPropertyAttribute]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class Syncfusion.Windows.Shared.MenuItemAdv : HeaderedItemsControl {
    internal CheckBox CheckBoxPanel;
    internal RadioButton RadioButtonPanel;
    private Popup SubMenuItemPopUp;
    private Border PopUpBorder;
    private Grid IconGrid;
    private Grid PopUpGrid;
    internal Grid menuItemAdvGrid;
    private StackPanel menuAdvStackPanel;
    private StackPanel panel;
    private ScrollViewer PART_ScrollViewer;
    internal Button PART_BottomScroll;
    internal Button PART_TopScroll;
    private TextBlock GestureTextBlock;
    private bool canGestureTextBlockVisible;
    private DispatcherTimer ScrollerTick;
    private double scrollableValue;
    private IEnumerator`1<DependencyObject> items;
    private bool ScrollabilityEnabled;
    internal bool IsBoundaryDetected;
    internal bool isSubMenuItemsPopupOpenedThroughRightKey;
    internal bool isSubMenuItemsPopupOpenedThroughEnterKey;
    internal bool isSubMenuItemsPopupOpenedThroughLeftKey;
    internal bool isSubMenuItemsPopupOpenedThroughDownKey;
    internal bool canFocused;
    private Border MenuItemBorder;
    internal bool isActiveScope;
    internal bool IsRightLeftKeyPressed;
    private ContentControl IconContent;
    private FrameworkElement previouslyFocusedElement;
    private double PanelHeight;
    private bool _isExecute;
    internal ContentControl cpresenter;
    private RoutedEventHandler PopUpClosed;
    private RoutedEventHandler PopUpClosing;
    private RoutedEventHandler PopUpOpened;
    private RoutedEventHandler PopUpOpening;
    public static RoutedEvent ClickEvent;
    private RoutedEventHandler Checked;
    private RoutedEventHandler UnChecked;
    public static DependencyProperty RoleProperty;
    public static DependencyProperty InputGestureTextProperty;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty IsSubMenuOpenProperty;
    public static DependencyProperty ExtendButtonVisibilityProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty IsCheckableProperty;
    public static DependencyProperty IsCheckedProperty;
    internal static DependencyProperty CheckIconTypeProperty;
    public static DependencyProperty CheckBoxVisibilityProperty;
    public static DependencyProperty RadioButtonVisibilityProperty;
    public static DependencyProperty GroupNameProperty;
    public static DependencyProperty ScrollerHeightProperty;
    public static DependencyProperty StaysOpenOnClickProperty;
    public static DependencyProperty TopScrollButtonStyleProperty;
    public static DependencyProperty BottomScrollButtonStyleProperty;
    public static DependencyProperty CheckBoxStyleProperty;
    public static DependencyProperty RadioButtonStyleProperty;
    internal static DependencyProperty PanelWidthProperty;
    internal bool mouseEnterOnPopup;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    private EventHandler CanExecuteChangedHandler;
    [CompilerGeneratedAttribute]
private IDictionary`2<DependencyObject, object> <ContainersToItems>k__BackingField;
    [CompilerGeneratedAttribute]
private MenuAdv <ParentMenuAdv>k__BackingField;
    [CompilerGeneratedAttribute]
private MenuItemAdv <ParentMenuItemAdv>k__BackingField;
    [CompilerGeneratedAttribute]
private MenuAdv <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private MenuAdv <ParentMenu>k__BackingField;
    internal IDictionary`2<DependencyObject, object> ContainersToItems { get; internal set; }
    internal MenuAdv ParentMenuAdv { get; internal set; }
    internal MenuItemAdv ParentMenuItemAdv { get; internal set; }
    internal MenuAdv Parent { get; internal set; }
    internal MenuAdv ParentMenu { get; internal set; }
    public Role Role { get; private set; }
    [DescriptionAttribute("Represents the SubMenu popup can be open")]
[CategoryAttribute("Common properties")]
public bool IsSubMenuOpen { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the object which is to be placed as Icon.")]
public object Icon { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the MenuItem can be checkable or not")]
public bool IsCheckable { get; public set; }
    public bool IsPressed { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the MenuItem is Checked or not")]
public bool IsChecked { get; public set; }
    [DescriptionAttribute("Represents the CheckIconType of the MenuItem, Which may be a Check Box or Radio Button")]
[CategoryAttribute("Appearance")]
public CheckIconType CheckIconType { get; public set; }
    [DescriptionAttribute("Represents the Group Name of Menu Items which are to be used as Radio Buttons")]
[CategoryAttribute("Common Properties")]
public string GroupName { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Represents the Command Paramenter which has to be passed with the Command to execute it.")]
public string InputGestureText { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the style of the Scroll Button present in the Top of the SubMenu popup")]
public Style TopScrollButtonStyle { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the style of the Scroll Button present in the Bottom of the SubMenu popup")]
public Style BottomScrollButtonStyle { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the style of the Check Box present in the MenuItem Icon")]
public Style CheckBoxStyle { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the style of the Radio Button present in the MenuItem Icon")]
public Style RadioButtonStyle { get; public set; }
    [DescriptionAttribute("Represents the SubMenu popup can be closed while selecting a MenuItem")]
[CategoryAttribute("Common Properties")]
public bool StaysOpenOnClick { get; public set; }
    internal double PanelWidth { get; internal set; }
    public Visibility ExtendButtonVisibility { get; public set; }
    public Visibility CheckBoxVisibility { get; public set; }
    public Visibility RadioButtonVisibility { get; public set; }
    public double ScrollerHeight { get; public set; }
    [DescriptionAttribute("Represents the Command of the MenuItem")]
[CategoryAttribute("Common Properties")]
public ICommand Command { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Represents the Command Paramenter which has to be passed with the Command to execute it.")]
public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    private static MenuItemAdv();
    private void MenuItemAdv_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void MenuItemAdv_Unloaded(object sender, RoutedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    public void add_PopUpClosed(RoutedEventHandler value);
    public void remove_PopUpClosed(RoutedEventHandler value);
    public void add_PopUpClosing(RoutedEventHandler value);
    public void remove_PopUpClosing(RoutedEventHandler value);
    public void add_PopUpOpened(RoutedEventHandler value);
    public void remove_PopUpOpened(RoutedEventHandler value);
    public void add_PopUpOpening(RoutedEventHandler value);
    public void remove_PopUpOpening(RoutedEventHandler value);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    public void add_Checked(RoutedEventHandler value);
    public void remove_Checked(RoutedEventHandler value);
    public void add_UnChecked(RoutedEventHandler value);
    public void remove_UnChecked(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<DependencyObject, object> get_ContainersToItems();
    [CompilerGeneratedAttribute]
internal void set_ContainersToItems(IDictionary`2<DependencyObject, object> value);
    [CompilerGeneratedAttribute]
internal MenuAdv get_ParentMenuAdv();
    [CompilerGeneratedAttribute]
internal void set_ParentMenuAdv(MenuAdv value);
    [CompilerGeneratedAttribute]
internal MenuItemAdv get_ParentMenuItemAdv();
    [CompilerGeneratedAttribute]
internal void set_ParentMenuItemAdv(MenuItemAdv value);
    [CompilerGeneratedAttribute]
internal MenuAdv get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(MenuAdv value);
    [CompilerGeneratedAttribute]
internal MenuAdv get_ParentMenu();
    [CompilerGeneratedAttribute]
internal void set_ParentMenu(MenuAdv value);
    public Role get_Role();
    private void set_Role(Role value);
    public bool get_IsSubMenuOpen();
    public void set_IsSubMenuOpen(bool value);
    public object get_Icon();
    public void set_Icon(object value);
    public bool get_IsCheckable();
    public void set_IsCheckable(bool value);
    public bool get_IsPressed();
    public void set_IsPressed(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public CheckIconType get_CheckIconType();
    public void set_CheckIconType(CheckIconType value);
    public string get_GroupName();
    public void set_GroupName(string value);
    public string get_InputGestureText();
    public void set_InputGestureText(string value);
    public Style get_TopScrollButtonStyle();
    public void set_TopScrollButtonStyle(Style value);
    public Style get_BottomScrollButtonStyle();
    public void set_BottomScrollButtonStyle(Style value);
    public Style get_CheckBoxStyle();
    public void set_CheckBoxStyle(Style value);
    public Style get_RadioButtonStyle();
    public void set_RadioButtonStyle(Style value);
    public bool get_StaysOpenOnClick();
    public void set_StaysOpenOnClick(bool value);
    internal double get_PanelWidth();
    internal void set_PanelWidth(double value);
    public Visibility get_ExtendButtonVisibility();
    public void set_ExtendButtonVisibility(Visibility value);
    public Visibility get_CheckBoxVisibility();
    public void set_CheckBoxVisibility(Visibility value);
    public Visibility get_RadioButtonVisibility();
    public void set_RadioButtonVisibility(Visibility value);
    public double get_ScrollerHeight();
    public void set_ScrollerHeight(double value);
    private static void OnIsCheckedPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    internal static void OnPanelWidthChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public virtual void OnApplyTemplate();
    private void GetTemplateChildrens();
    private void SubMenuItemPopUp_MouseLeave(object sender, MouseEventArgs e);
    private void MenuItemCanExecute(MenuItemAdv menuitem);
    private void SubMenuItemPopUp_MouseEnter(object sender, MouseEventArgs e);
    private static void OnAccessKeyPressed(object sender, AccessKeyPressedEventArgs e);
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    private void RegisterEvents();
    private void RadioButtonPanel_Click(object sender, RoutedEventArgs e);
    private void CheckBoxPanel_Click(object sender, RoutedEventArgs e);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    private void menuItemAdvGrid_MouseEnter(object sender, MouseEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    internal IEnumerable`1<T> GetChildMenu(DependencyObject depObj);
    protected virtual void OnPreviewMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnPreviewKeyUp(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    internal void Dispose();
    private void MenuItemAdv_PopUpClosing(object sender, RoutedEventArgs e);
    private void RadioButtonPanel_MouseLeave(object sender, MouseEventArgs e);
    private void CheckBoxPanel_MouseLeave(object sender, MouseEventArgs e);
    private void MenuItemAdv_Loaded(object sender, RoutedEventArgs e);
    protected void OnPanelWidthChanged(DependencyPropertyChangedEventArgs args);
    private void panel_LayoutUpdated(object sender, EventArgs e);
    private void SubMenuItemPopUp_LayoutUpdated(object sender, EventArgs e);
    private void ScrollUp_Tick(object sender, EventArgs e);
    private void PART_TopScroll_MouseLeave(object sender, MouseEventArgs e);
    private void PART_BottomScroll_MouseLeave(object sender, MouseEventArgs e);
    private void PART_BottomScroll_MouseEnter(object sender, MouseEventArgs e);
    private void PART_TopScroll_MouseEnter(object sender, MouseEventArgs e);
    private static void OnIsSubMenuOpenChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnOpening(RoutedEventArgs e);
    protected virtual void OnOpened(RoutedEventArgs e);
    protected virtual void OnClosing(RoutedEventArgs e);
    protected virtual void OnClosed(RoutedEventArgs e);
    private static void OnIsCheckablePropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnCheckIconTypeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnIsCheckedPropertyChanged(DependencyPropertyChangedEventArgs args);
    internal void CallVisualState(MenuItemAdv Item, string state);
    internal void UpKeyAction();
    internal void DownKeyAction();
    internal void RightKeyAction();
    internal void LeftKeyAction();
    internal void EnterKeyAction();
    internal void TabKeyAction();
    internal void AltKeyAction();
    internal void EscapeKeyAction();
    internal void HandlePopupOpen();
    internal void SelectPopUpAnimation();
    internal void ChangeExtendButtonVisibility();
    internal void CheckGroupName(MenuItemAdv menuitem);
    private void UnCheck(MenuItemAdv menuitem);
    internal StackPanel GetStackPanel();
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    private static void CommandChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private void OnCommandChanged(ICommand oldCommand, ICommand newCommand);
    private void UnhookCommand(ICommand command);
    private void HookCommand(ICommand command);
    private void OnCanExecuteChanged(object sender, EventArgs e);
    private void UpdateCanExecute();
    private void UpdateCanExecute(MenuItemAdv menu);
    private static bool CanExecuteCommandSource(MenuItemAdv commandSource);
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class Syncfusion.Windows.Shared.MenuItemSeparator : Separator {
}
public enum Syncfusion.Windows.Shared.MinimizedItemsOrientation : Enum {
    public int value__;
    public static MinimizedItemsOrientation Top;
    public static MinimizedItemsOrientation Bottom;
    public static MinimizedItemsOrientation Right;
    public static MinimizedItemsOrientation Left;
}
[ValueConversionAttribute("System.DateTime", "System.Int32")]
public class Syncfusion.Windows.Shared.MinutesConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Shared.MinValidation : Enum {
    public int value__;
    public static MinValidation OnKeyPress;
    public static MinValidation OnLostFocus;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.MonthButton : ContentControl {
    private static MonthButton();
    protected internal void Initialize(VisibleDate data, Calendar calendar, CultureInfo culture, bool isAbbreviated, CalendarVisualMode mode);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.MonthCell : Cell {
    public static DependencyProperty MonthNumberProperty;
    public int MonthNumber { get; public set; }
    private static MonthCell();
    public int get_MonthNumber();
    public void set_MonthNumber(int value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Syncfusion.Windows.Shared.MonthChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <PreviousMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    public int PreviousMonth { get; public set; }
    public int NewMonth { get; public set; }
    public object Source { get; public set; }
    public MonthChangedEventArgs(int oldMonth, int newMonth, object source);
    [CompilerGeneratedAttribute]
public int get_PreviousMonth();
    [CompilerGeneratedAttribute]
public void set_PreviousMonth(int value);
    [CompilerGeneratedAttribute]
public int get_NewMonth();
    [CompilerGeneratedAttribute]
public void set_NewMonth(int value);
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.MonthGrid : CalendarEditGrid {
    internal static int DEFROWSCOUNT;
    internal static int DEFCOLUMNSCOUNT;
    private CalendarEdit mparentCalendar;
    protected internal CalendarEdit ParentCalendar { get; protected internal set; }
    private static MonthGrid();
    protected internal CalendarEdit get_ParentCalendar();
    protected internal void set_ParentCalendar(CalendarEdit value);
    private void UpdateParent();
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
    public virtual void Initialize(VisibleDate date, CultureInfo culture, Calendar calendar);
    public virtual void SetIsSelected(VisibleDate date);
    protected internal void SetMonthCellContent(CultureInfo culture);
    protected internal void SetMonthNumber(VisibleDate date, Calendar calendar);
    protected virtual Cell CreateCell();
    public void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Syncfusion.Windows.Shared.MonthPopup : object {
    private Popup m_popup;
    private ListBox m_selector;
    private bool m_canSelect;
    private Hashtable m_popupDates;
    private DispatcherTimer m_timer;
    private Date m_currentDate;
    private DateTimeFormatInfo m_format;
    private Date m_minDate;
    private Date m_maxDate;
    private EventHandler`1<HidePopupEventArgs> HidePopup;
    public DateTimeFormatInfo Format { get; public set; }
    public Date CurrentDate { get; public set; }
    public Date MinDate { get; public set; }
    public Date MaxDate { get; public set; }
    public MonthPopup(Popup popup, Date date, DateTimeFormatInfo format, Date minDate, Date maxDate);
    public void Show();
    public void RefreshContent();
    internal void Dispose();
    private void RaiseHidePopupEvent(HidePopupEventArgs e);
    private void FillMonthSelector();
    private void Selector_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void Selector_MouseMove(object sender, MouseEventArgs e);
    private void Timer_Tick(object sender, EventArgs e);
    private void Selector_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void Selector_KeyDown(object sender, KeyEventArgs e);
    public DateTimeFormatInfo get_Format();
    public void set_Format(DateTimeFormatInfo value);
    public Date get_CurrentDate();
    public void set_CurrentDate(Date value);
    public Date get_MinDate();
    public void set_MinDate(Date value);
    public Date get_MaxDate();
    public void set_MaxDate(Date value);
    public void add_HidePopup(EventHandler`1<HidePopupEventArgs> value);
    public void remove_HidePopup(EventHandler`1<HidePopupEventArgs> value);
}
[ValueConversionAttribute("System.Object[]", "System.String")]
public class Syncfusion.Windows.Shared.MultiObjectToFormatedStringConverter : object {
    private static string DEFAULT_FORMAT;
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.NativeConstants : object {
    public static int SWP_NOSIZE;
    public static int SWP_NOMOVE;
    public static int SWP_NOZORDER;
    public static int SWP_NOREDRAW;
    public static int SWP_NOACTIVATE;
    public static int SWP_DRAWFRAME;
    public static int SWP_FRAMECHANGED;
    public static int SWP_SHOWWINDOW;
    public static int SWP_HIDEWINDOW;
    public static int SWP_NOCOPYBITS;
    public static int SWP_NOOWNERZORDER;
    public static int SWP_NOREPOSITION;
    public static int SWP_NOSENDCHANGING;
    public static int SWP_DEFERERASE;
    public static int SWP_ASYNCWINDOWPOS;
    public static int HWND_NOTOPMOST;
    public static int HWND_TOP;
    public static int HWND_TOPMOST;
    public static int WM_NCHITTEST;
    public static int WM_WINDOWPOSCHANGING;
    public static int WM_MOVE;
    public static int HTTRANSPARENT;
    public static int WM_SYSCOMMAND;
    public static int SC_KEYMENU;
    public static int NIM_ADD;
    public static int NIM_MODIFY;
    public static int NIM_DELETE;
}
public class Syncfusion.Windows.Shared.NativeMethods : object {
    internal static int WA_INACTIVE;
    public static int SM_CXSCREEN;
    public static int SM_CYSCREEN;
    [SecurityCriticalAttribute]
public static int SetWindowPos(IntPtr hwnd, int hwndInsertAfter, int x, int y, int cx, int cy, int wFlags);
    public static int IntPtrToInt32(IntPtr intPtr);
    public static int LoWord(int n);
    public static int LoWord(IntPtr n);
    public static void ScreenToClient(IntPtr hWnd, POINT pt);
    public static bool ClipCursor(RECT& rcClip);
    public static bool ClipCursor(object passNull);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
public static bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
public static bool ShowWindow(HandleRef hWnd, int nCmdShow);
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
public static IntPtr SetWindowLong(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    public static IntPtr SetWindowLongPtr(IntPtr hwnd, GWL nIndex, IntPtr dwNewLong);
    private static IntPtr SetWindowLongPtr32(IntPtr hWnd, GWL nIndex, IntPtr dwNewLong);
    private static IntPtr SetWindowLongPtr64(IntPtr hWnd, GWL nIndex, IntPtr dwNewLong);
    public static bool DwmDefWindowProc(IntPtr hwnd, WM msg, IntPtr wParam, IntPtr lParam, IntPtr& plResult);
    private static int St_EnableMenuItem(IntPtr hMenu, SystemCommands uIDEnableItem, SystemMenuItemBehavior uEnable);
    [CLSCompliantAttribute("False")]
public static SystemMenuItemBehavior EnableMenuItem(IntPtr hMenu, SystemCommands uIDEnableItem, SystemMenuItemBehavior uEnable);
    private static bool GetWindowPlacement(IntPtr hwnd, WINDOWPLACEMENT lpwndpl);
    public static WINDOWPLACEMENT GetWindowPlacement(IntPtr hwnd);
    public static IntPtr GetSystemMenu(IntPtr hWnd, bool bRevert);
    [CLSCompliantAttribute("False")]
public static int TrackPopupMenu(IntPtr hMenu, UInt32 uFlags, int x, int y, int nReserved, IntPtr hWnd, IntPtr prcRect);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, int lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, int wParam, IntPtr lParam);
    public static bool Shell_NotifyIcon(int dwMessage, NotifyIconData& pnid);
    public static int SHAppBarMessage(int dwMessage, APPBARDATA& pData);
    public static IntPtr FindWindow(string lpClassName, string lpWindowName);
    public static bool GetWindowRect(IntPtr hWnd, RECT& lpRect);
    public static IntPtr GetDesktopWindow();
    public static IntPtr FindWindowEx(IntPtr parentHandle, IntPtr childAfter, string className, IntPtr windowTitle);
    public static IntPtr GetDC(IntPtr hWnd);
    public static int ReleaseDC(IntPtr hwnd, IntPtr hdc);
    public static int GetPixel(IntPtr hdc, int x, int y);
    public static bool GetCursorPos(Point& lpPoint);
    public static bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, TernaryRasterOperations dwRop);
    public static int GetSystemMetrics(int abc);
    public static IntPtr GetWindowDC(int ptr);
    public static IntPtr DeleteDC(IntPtr hDc);
    public static IntPtr DeleteObject(IntPtr hDc);
    public static bool BitBlt(IntPtr hdcDest, int xDest, int yDest, int wDest, int hDest, IntPtr hdcSource, int xSrc, int ySrc, int RasterOp);
    public static IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);
    public static IntPtr CreateCompatibleDC(IntPtr hdc);
    public static IntPtr SelectObject(IntPtr hdc, IntPtr bmp);
    private static IntPtr GetWindowLongPtr32(IntPtr hWnd, GWL nIndex);
    private static IntPtr GetWindowLongPtr64(IntPtr hWnd, GWL nIndex);
    public static IntPtr CreateDC(string lpszDriver, string lpszDevice, string lpszOutput, IntPtr lpInitData);
    [CLSCompliantAttribute("False")]
public static UInt32 GetFontData(IntPtr hdc, UInt32 dwTable, UInt32 dwOffset, Byte[] lpvBuffer, UInt32 cbData);
    public static int GetDeviceCaps(IntPtr hdc, int nIndex);
    public static IntPtr GetWindowLongPtr(IntPtr hwnd, GWL nIndex);
    private static IntPtr IntSetWindowLongPtr(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    private static int IntSetWindowLong(HandleRef hWnd, int nIndex, int dwNewLong);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
private static int IntScreenToClient(IntPtr hWnd, POINT pt);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.NavigateButton : ContentControl {
    public static DependencyProperty EnabledProperty;
    public bool Enabled { get; public set; }
    private static NavigateButton();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    protected internal void UpdateCellTemplate(ControlTemplate template);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.NavigateButtonBase : ButtonBase {
    private CornerRadius mcornerRadius;
    public CornerRadius CornerRadius { get; public set; }
    private static NavigateButtonBase();
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.NonStickingPopup : Popup {
    private bool m_Shift;
    private int m_Shiftcount;
    private static NonStickingPopup();
    public void Removehandle();
    private static void OnPlacementRectangleChanged(DependencyObject d, DependencyPropertyChangedEventArgs args);
    private void OnPlacementRectangleChanged(DependencyPropertyChangedEventArgs args);
    private IntPtr PositioningHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    protected virtual void OnOpened(EventArgs e);
    private bool ChangeDefault();
    private void OnOpenedSecure();
}
public abstract class Syncfusion.Windows.Shared.NotificationObject : object {
    private PropertyChangedEventHandler PropertyChanged;
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
    protected void RaisePropertyChanged(String[] propertyNames);
    protected void RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression);
}
public class Syncfusion.Windows.Shared.NullToVisibilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.ObjectNullToVisibilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.ObjectToBoolConverter : BoolToObjectConverter {
    public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Object", "System.String")]
public class Syncfusion.Windows.Shared.ObjectToFormatedStringConverter : object {
    private static string DEFAULT_FORMAT;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.ObservableFrameworkElements : ObservableCollection`1<FrameworkElement> {
    public void AddRange(IEnumerable`1<FrameworkElement> list);
    public ObservableFrameworkElements GetCopy();
    public void CopyTo(List`1<FrameworkElement> list);
    public void RemoveRange(IEnumerable`1<FrameworkElement> list);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ObservableUIElementCollection : UIElementCollection {
    private NotifyCollectionChangedEventHandler CollectionChanged;
    public ObservableUIElementCollection(UIElement visualParent, FrameworkElement logicalParent);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public virtual int Add(UIElement element);
    public virtual void Clear();
    public virtual void Insert(int index, UIElement element);
    public virtual void Remove(UIElement element);
    public virtual void RemoveAt(int index);
    public virtual void RemoveRange(int index, int count);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, IList added, IList removed, int index);
}
public enum Syncfusion.Windows.Shared.OnFocusBehavior : Enum {
    public int value__;
    public static OnFocusBehavior Default;
    public static OnFocusBehavior CursorOnFirstCharacter;
    public static OnFocusBehavior CursorAtEnd;
}
public class Syncfusion.Windows.Shared.Overview : Control {
    internal bool IsResizing;
    internal bool IsResized;
    public static DependencyProperty AllowResizeProperty;
    public static DependencyProperty IsPanEnabledProperty;
    public static DependencyProperty ScaleProperty;
    public static DependencyProperty IsZoomInEnabledProperty;
    public static DependencyProperty ZoomInProperty;
    public static DependencyProperty IsZoomOutEnabledProperty;
    public static DependencyProperty ZoomOutProperty;
    public static DependencyProperty IsZoomToEnabledProperty;
    public static DependencyProperty ZoomToProperty;
    public static DependencyProperty IsZoomResetEnabledProperty;
    public static DependencyProperty ZoomResetProperty;
    public static DependencyProperty ZoomFactorProperty;
    public static DependencyProperty MinimumZoomProperty;
    public static DependencyProperty MaximumZoomProperty;
    public static DependencyProperty ZoomModeProperty;
    public static DependencyProperty ContentBackgroundProperty;
    public static DependencyProperty ViewPortBrushProperty;
    public static DependencyProperty OverviewSourceAncestorProperty;
    internal static DependencyProperty ScrollSourceProperty;
    internal static DependencyProperty ScrollContentTargetProperty;
    internal static DependencyProperty VpOffsetXProperty;
    internal static DependencyProperty VpOffsetYProperty;
    internal static DependencyProperty VpWidthProperty;
    internal static DependencyProperty VpHeightProperty;
    internal static DependencyProperty WindowWidthProperty;
    internal static DependencyProperty WindowHeightProperty;
    internal static DependencyProperty TransProperty;
    private EventHandler ScrollViewer_LayoutUpdated;
    private Point m_DragDelta;
    [CompilerGeneratedAttribute]
private Panel <Img>k__BackingField;
    public bool AllowResize { get; public set; }
    public bool IsPanEnabled { get; public set; }
    public double Scale { get; public set; }
    internal double UnitScale { get; internal set; }
    public bool IsZoomInEnabled { get; public set; }
    public ICommand ZoomIn { get; public set; }
    public bool IsZoomOutEnabled { get; public set; }
    public ICommand ZoomOut { get; public set; }
    public bool IsZoomToEnabled { get; public set; }
    public ICommand ZoomTo { get; public set; }
    public bool IsZoomResetEnabled { get; public set; }
    public ICommand ZoomReset { get; public set; }
    public double ZoomFactor { get; public set; }
    public double MinimumZoom { get; public set; }
    public double MaximumZoom { get; public set; }
    public ZoomMode ZoomMode { get; public set; }
    public Brush ContentBackground { get; public set; }
    public Brush ViewPortBrush { get; public set; }
    public DependencyObject OverviewSourceAncestor { get; public set; }
    internal OverviewContentHolder ScrollSource { get; internal set; }
    internal DependencyObject ScrollContentTarget { get; internal set; }
    internal double VpOffsetX { get; internal set; }
    internal double VpOffsetY { get; internal set; }
    internal double VpWidth { get; internal set; }
    internal double VpHeight { get; internal set; }
    internal double WindowWidth { get; internal set; }
    internal double WindowHeight { get; internal set; }
    internal Transform Trans { get; internal set; }
    internal Panel Img { get; internal set; }
    private static Overview();
    public sealed virtual bool get_AllowResize();
    public sealed virtual void set_AllowResize(bool value);
    public sealed virtual bool get_IsPanEnabled();
    public sealed virtual void set_IsPanEnabled(bool value);
    private void InternalBinding(string sourceProp, DependencyProperty dpProp);
    public sealed virtual double get_Scale();
    public sealed virtual void set_Scale(double value);
    internal double get_UnitScale();
    internal void set_UnitScale(double value);
    public sealed virtual bool get_IsZoomInEnabled();
    public sealed virtual void set_IsZoomInEnabled(bool value);
    public sealed virtual ICommand get_ZoomIn();
    public sealed virtual void set_ZoomIn(ICommand value);
    public sealed virtual bool get_IsZoomOutEnabled();
    public sealed virtual void set_IsZoomOutEnabled(bool value);
    public sealed virtual ICommand get_ZoomOut();
    public sealed virtual void set_ZoomOut(ICommand value);
    public sealed virtual bool get_IsZoomToEnabled();
    public sealed virtual void set_IsZoomToEnabled(bool value);
    public sealed virtual ICommand get_ZoomTo();
    public sealed virtual void set_ZoomTo(ICommand value);
    public sealed virtual bool get_IsZoomResetEnabled();
    public sealed virtual void set_IsZoomResetEnabled(bool value);
    public sealed virtual ICommand get_ZoomReset();
    public sealed virtual void set_ZoomReset(ICommand value);
    public sealed virtual double get_ZoomFactor();
    public sealed virtual void set_ZoomFactor(double value);
    public sealed virtual double get_MinimumZoom();
    public sealed virtual void set_MinimumZoom(double value);
    public sealed virtual double get_MaximumZoom();
    public sealed virtual void set_MaximumZoom(double value);
    public sealed virtual ZoomMode get_ZoomMode();
    public sealed virtual void set_ZoomMode(ZoomMode value);
    public Brush get_ContentBackground();
    public void set_ContentBackground(Brush value);
    public Brush get_ViewPortBrush();
    public void set_ViewPortBrush(Brush value);
    public DependencyObject get_OverviewSourceAncestor();
    public void set_OverviewSourceAncestor(DependencyObject value);
    private static void OnOverviewSourceAncestorChanged(DependencyObject dp, DependencyPropertyChangedEventArgs evtArgs);
    private static T FindChildScrollViewer(DependencyObject depObj);
    internal OverviewContentHolder get_ScrollSource();
    internal void set_ScrollSource(OverviewContentHolder value);
    internal DependencyObject get_ScrollContentTarget();
    internal void set_ScrollContentTarget(DependencyObject value);
    private static void OnScrollContentTargetChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void Overview_Unloaded(object sender, RoutedEventArgs e);
    private static void OnScrollSourceChanged(DependencyObject dp, DependencyPropertyChangedEventArgs evtArgs);
    private void holder_ScrollChanged(object sender, ScrollChangedEventArgs e);
    internal double get_VpOffsetX();
    internal void set_VpOffsetX(double value);
    private static void OnVpOffsetChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal double get_VpOffsetY();
    internal void set_VpOffsetY(double value);
    internal double get_VpWidth();
    internal void set_VpWidth(double value);
    internal double get_VpHeight();
    internal void set_VpHeight(double value);
    internal double get_WindowWidth();
    internal void set_WindowWidth(double value);
    internal double get_WindowHeight();
    internal void set_WindowHeight(double value);
    internal Transform get_Trans();
    internal void set_Trans(Transform value);
    [CompilerGeneratedAttribute]
internal Panel get_Img();
    [CompilerGeneratedAttribute]
internal void set_Img(Panel value);
    private void Img_SizeChanged(object sender, SizeChangedEventArgs e);
    private void UpdateVp();
    internal void InvalidateScroll();
    internal void UpdateSourceScroll();
    internal void UpdateScrollViewer();
    private void Overview_LayoutUpdated_UpdateVP(object sender, EventArgs e);
    private void Overview_LayoutUpdated_UpdateSV(object sender, EventArgs e);
    public virtual void OnApplyTemplate();
    private void UpdateScrollContentTarget();
    internal void UpdateSource();
    private void ScrollSource_Loaded(object sender, RoutedEventArgs e);
    private void drag_DragStarted(object sender, DragStartedEventArgs e);
    private void drag_DragDelta(object sender, DragDeltaEventArgs e);
    private void drag_DragCompleted(object sender, DragCompletedEventArgs e);
    private static T FindScrollViewer(DependencyObject obj);
    private Size GetUniformImageSize();
}
[ContentPropertyAttribute("Content")]
public class Syncfusion.Windows.Shared.OverviewContentHolder : Control {
    private static double LineSize;
    private static double WheelSize;
    public static DependencyProperty OriginProperty;
    public static DependencyProperty EnableFitToPageProperty;
    private static DependencyProperty TopLeftProperty;
    public static DependencyProperty PageBackgroundProperty;
    public static DependencyProperty AllowResizeProperty;
    internal Overview _overviewParent;
    public static DependencyProperty ContentProperty;
    private Stack`1<ZoomOperation> zoomStack;
    public static DependencyProperty IsZoomEnabledProperty;
    private Nullable`1<Point> m_PanStartPosition;
    private Point m_PreviousMousePosition;
    private DateTime m_LastLeftClick;
    private DateTime m_LastRightClick;
    internal OverviewMouseState m_MouseState;
    private ScaleTransform _scaleTransform;
    private TranslateTransform _translateTransform;
    private DoubleAnimation _scaleXAnimation;
    private DoubleAnimation _scaleYAnimation;
    private DoubleAnimation _translateXAnimation;
    private DoubleAnimation _translateYAnimation;
    private Duration _animationDuration;
    private Storyboard _storyboard;
    public static DependencyProperty AnimationEnabledProperty;
    public static DependencyProperty ZoomInGestureProperty;
    public static DependencyProperty ZoomOutGestureProperty;
    public static DependencyProperty ScaleProperty;
    public static DependencyProperty IsZoomInEnabledProperty;
    public static DependencyProperty ZoomInProperty;
    public static DependencyProperty IsZoomOutEnabledProperty;
    public static DependencyProperty ZoomOutProperty;
    public static DependencyProperty IsZoomToEnabledProperty;
    public static DependencyProperty ZoomToProperty;
    public static DependencyProperty IsZoomResetEnabledProperty;
    public static DependencyProperty ZoomResetProperty;
    public static DependencyProperty ZoomFactorProperty;
    public static DependencyProperty MinimumZoomProperty;
    public static DependencyProperty MaximumZoomProperty;
    public static DependencyProperty ZoomModeProperty;
    public static DependencyProperty IsPanEnabledProperty;
    private Grid PART_Grid;
    private Rectangle PART_PageBackground;
    private ContentControl diagramView;
    private bool m_CanHorizontallyScroll;
    private bool m_CanVerticallyScroll;
    private double m_HorizontalOffset;
    private double m_VerticalOffset;
    private double m_ViewportWidth;
    private double m_ViewportHeight;
    private double m_ExtentWidth;
    private double m_ExtentHeight;
    private ScrollViewer m_ScrollOwner;
    public static RoutedEvent FitToPageEvent;
    public static RoutedEvent ExtraPanningEvent;
    public bool EnableFitToPage { get; public set; }
    internal Point TopLeft { get; internal set; }
    public Brush PageBackground { get; public set; }
    public bool AllowResize { get; public set; }
    public UIElement Content { get; public set; }
    public bool IsZoomEnabled { get; public set; }
    public bool AnimationEnabled { get; public set; }
    public ZoomGesture ZoomInGesture { get; public set; }
    public ZoomGesture ZoomOutGesture { get; public set; }
    public double Scale { get; public set; }
    internal double UnitScale { get; internal set; }
    public bool IsZoomInEnabled { get; public set; }
    public ICommand ZoomIn { get; public set; }
    public bool IsZoomOutEnabled { get; public set; }
    public ICommand ZoomOut { get; public set; }
    public bool IsZoomToEnabled { get; public set; }
    public ICommand ZoomTo { get; public set; }
    public bool IsZoomResetEnabled { get; public set; }
    public ICommand ZoomReset { get; public set; }
    public double ZoomFactor { get; public set; }
    public double MinimumZoom { get; public set; }
    public double MaximumZoom { get; public set; }
    public ZoomMode ZoomMode { get; public set; }
    public bool IsPanEnabled { get; public set; }
    public bool CanHorizontallyScroll { get; public set; }
    public bool CanVerticallyScroll { get; public set; }
    public ScrollViewer ScrollOwner { get; public set; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    private static OverviewContentHolder();
    public static Point GetOrigin(DependencyObject obj);
    public static void SetOrigin(DependencyObject obj, Point value);
    public bool get_EnableFitToPage();
    public void set_EnableFitToPage(bool value);
    private static void OnFitToPageEnabled(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal Point get_TopLeft();
    internal void set_TopLeft(Point value);
    private static void OnTopLeftChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public Brush get_PageBackground();
    public void set_PageBackground(Brush value);
    public sealed virtual bool get_AllowResize();
    public sealed virtual void set_AllowResize(bool value);
    private void OverviewContentHolder_Loaded(object sender, RoutedEventArgs e);
    public UIElement get_Content();
    public void set_Content(UIElement value);
    private static void OnContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnContentChanged(object oldContent, object newContent);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    public bool get_IsZoomEnabled();
    public void set_IsZoomEnabled(bool value);
    private static void IsZoomEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void PerformZoom(MouseEventArgs e);
    private object GetZoomParameter(object param);
    private Point GetMousePosition(MouseEventArgs e, double Scale);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    private void SetPanStartPoint(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseRightButtonUp(MouseButtonEventArgs e);
    public bool get_AnimationEnabled();
    public void set_AnimationEnabled(bool value);
    public ZoomGesture get_ZoomInGesture();
    public void set_ZoomInGesture(ZoomGesture value);
    public ZoomGesture get_ZoomOutGesture();
    public void set_ZoomOutGesture(ZoomGesture value);
    public sealed virtual double get_Scale();
    public sealed virtual void set_Scale(double value);
    internal double get_UnitScale();
    internal void set_UnitScale(double value);
    private static void OnScaleChanged(DependencyObject dp, DependencyPropertyChangedEventArgs e);
    public sealed virtual bool get_IsZoomInEnabled();
    public sealed virtual void set_IsZoomInEnabled(bool value);
    public sealed virtual ICommand get_ZoomIn();
    public sealed virtual void set_ZoomIn(ICommand value);
    public sealed virtual bool get_IsZoomOutEnabled();
    public sealed virtual void set_IsZoomOutEnabled(bool value);
    public sealed virtual ICommand get_ZoomOut();
    public sealed virtual void set_ZoomOut(ICommand value);
    public sealed virtual bool get_IsZoomToEnabled();
    public sealed virtual void set_IsZoomToEnabled(bool value);
    public sealed virtual ICommand get_ZoomTo();
    public sealed virtual void set_ZoomTo(ICommand value);
    public sealed virtual bool get_IsZoomResetEnabled();
    public sealed virtual void set_IsZoomResetEnabled(bool value);
    public sealed virtual ICommand get_ZoomReset();
    public sealed virtual void set_ZoomReset(ICommand value);
    public sealed virtual double get_ZoomFactor();
    public sealed virtual void set_ZoomFactor(double value);
    public sealed virtual double get_MinimumZoom();
    public sealed virtual void set_MinimumZoom(double value);
    public sealed virtual double get_MaximumZoom();
    public sealed virtual void set_MaximumZoom(double value);
    public sealed virtual ZoomMode get_ZoomMode();
    public sealed virtual void set_ZoomMode(ZoomMode value);
    public sealed virtual bool get_IsPanEnabled();
    public sealed virtual void set_IsPanEnabled(bool value);
    private static void OnIsPanEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private bool CanZoomInExecute(object parameter);
    private bool CanZoomOutExecute(object parameter);
    private bool CanZoomToExecute(object parameter);
    private bool CanZoomResetExecute(object parameter);
    private void ExecuteZoomInCommand(object param);
    private void ExecuteZoomOutCommand(object param);
    private void CheckZoomStack(object parameter);
    private void ExecuteZoomResetCommand(object parameter);
    private void ExecuteZoomToCommand(object parameter);
    private void UpdatePageBackground();
    public void FitToPage();
    public virtual void OnApplyTemplate();
    private void diagramView_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private ScrollBar CheckScrollBar(DependencyObject element);
    private ContentControl GetDiagramView(DependencyObject element);
    private void diagramView_PreviewMouseWheel(object sender, MouseWheelEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void ApplyAnimation(Size actualSize);
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual void LineDown();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual void LineUp();
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void PageDown();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual void PageUp();
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual void SetVerticalOffset(double offset);
    private void SetViewportWidth(double newValue);
    private void SetViewportHeight(double newValue);
    private void SetExtentWidth(double newValue);
    private void SetExtentHeight(double newValue);
    private void VerifyScrollData();
    private void VerifyAndInvalidateScrollData();
    public void add_UpdateFitToPage(OverviewFitPageEventHandler value);
    public void remove_UpdateFitToPage(OverviewFitPageEventHandler value);
    public void add_ExtraPanning(ExtraPanningEventEventHandler value);
    public void remove_ExtraPanning(ExtraPanningEventEventHandler value);
    private void InvokeScrollChangedEvent(ScrollParamether param, double oldValue, double newValue);
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
}
public class Syncfusion.Windows.Shared.OverviewCustomPanel : Panel {
    internal static DependencyProperty OverviewProperty;
    internal Overview Overview { get; internal set; }
    private static OverviewCustomPanel();
    internal Overview get_Overview();
    internal void set_Overview(Overview value);
    private void OverviewCustomPanel_Loaded(object sender, RoutedEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
[ExtensionAttribute]
internal static class Syncfusion.Windows.Shared.OverviewExtension : object {
    [ExtensionAttribute]
internal static double GetScaleRatio(double source, double target);
    [ExtensionAttribute]
private static Size GetScaleRatioSize(Size source, Size target);
    [ExtensionAttribute]
internal static double GetScaleRatioDouble(Size source, Size target);
    [ExtensionAttribute]
internal static Size GetUniformSize(Size source, Size target);
    [ExtensionAttribute]
internal static bool IsMouseWheelUp(MouseWheelEventArgs args, OverviewContentHolder och);
    [ExtensionAttribute]
internal static bool CanZoom_Keys_Or(OverviewContentHolder och, ZoomGesture gesture);
    [ExtensionAttribute]
internal static bool CanZoom_Keys_And(OverviewContentHolder och, ZoomGesture gesture);
    [ExtensionAttribute]
internal static bool CanZoom(MouseWheelEventArgs args, OverviewContentHolder och, ZoomGesture gesture);
    [ExtensionAttribute]
internal static bool CanZoom(MouseButtonEventArgs args, OverviewContentHolder och, ZoomGesture gesture);
    [ExtensionAttribute]
internal static bool CanZoomIn(MouseWheelEventArgs args, OverviewContentHolder och);
    [ExtensionAttribute]
internal static bool CanZoomOut(MouseWheelEventArgs args, OverviewContentHolder och);
    [ExtensionAttribute]
internal static bool CanZoomIn(MouseButtonEventArgs args, OverviewContentHolder och);
    [ExtensionAttribute]
internal static bool CanZoomOut(MouseButtonEventArgs args, OverviewContentHolder och);
    [ExtensionAttribute]
internal static bool CanZoomIn(MouseEventArgs args, OverviewContentHolder och);
    [ExtensionAttribute]
internal static bool CanZoomOut(MouseEventArgs args, OverviewContentHolder och);
}
internal enum Syncfusion.Windows.Shared.OverviewMouseState : Enum {
    public int value__;
    public static OverviewMouseState LeftClick;
    public static OverviewMouseState RightClick;
    public static OverviewMouseState LeftDoubleClick;
    public static OverviewMouseState RightDoubleClick;
    public static OverviewMouseState Pan;
    public static OverviewMouseState None;
}
public class Syncfusion.Windows.Shared.OverviewResizer : ContentControl {
    private Overview ov;
    private double horChange;
    private double verChange;
    private double initWidth;
    private double initHeight;
    private double initx;
    private double inity;
    private double startMouseX;
    private double startMouseY;
    public virtual void OnApplyTemplate();
    private void OverviewResizer_DragStarted(object sender, DragStartedEventArgs e);
    private void OverviewResizer_DragDelta(object sender, DragDeltaEventArgs e);
    private void OverviewResizer_DragDeltaComplete(object sender, DragCompletedEventArgs e);
    private static T FindParent(UIElement control);
}
[DesignTimeVisibleAttribute("False")]
public static class Syncfusion.Windows.Shared.ParamsTable : object {
    public static Dictionary`2<object, object> Params;
    private static ParamsTable();
}
public enum Syncfusion.Windows.Shared.PasteMode : Enum {
    public int value__;
    public static PasteMode Default;
    public static PasteMode Advanced;
}
public class Syncfusion.Windows.Shared.PathFractionCollection : ObservableCollection`1<FractionValue> {
    internal void FindNearestPoints(double currentStopPointPathFraction, FractionValue& LeftNearestStopPint, FractionValue& RightNearestStopPint);
}
internal class Syncfusion.Windows.Shared.PathFractionManager : object {
    private double newPathFraction;
    private double currentPathFraction;
    public double NewPathFraction { get; }
    public double CurrentPathFraction { get; }
    public PathFractionManager(double newVal, double oldVal);
    public double get_NewPathFraction();
    public double get_CurrentPathFraction();
}
internal class Syncfusion.Windows.Shared.PathFractionRangeHandler : object {
    private static int MinimumIndexValue;
    private LinkedList`1<VisiblePanelItem> _ChildIndexPair;
    private int firstVisibleItemIndex;
    private int lastVisibleItemIndex;
    private LinkedList`1<VisiblePanelItem> visibleItems;
    public int Count { get; }
    public VisiblePanelItem First { get; }
    public int FirstVisibleItemIndex { get; }
    public bool HasVisibleItems { get; }
    public VisiblePanelItem Last { get; }
    public int LastVisibleItemIndex { get; }
    public LinkedList`1<VisiblePanelItem> ToCleanUp { get; private set; }
    internal PathFractionRangeHandler(LinkedList`1<VisiblePanelItem> visibleItems);
    public int get_Count();
    public VisiblePanelItem get_First();
    public int get_FirstVisibleItemIndex();
    public bool get_HasVisibleItems();
    public VisiblePanelItem get_Last();
    public int get_LastVisibleItemIndex();
    public LinkedList`1<VisiblePanelItem> get_ToCleanUp();
    private void set_ToCleanUp(LinkedList`1<VisiblePanelItem> value);
    public void AddFirst(LinkedList`1<VisiblePanelItem> pairs);
    public void AddFirst(VisiblePanelItem pair);
    public void AddLast(LinkedList`1<VisiblePanelItem> pairs);
    public void AddLast(VisiblePanelItem pair);
    public void Clear();
    public void ClearCleanUp();
    public sealed virtual IEnumerator`1<VisiblePanelItem> GetEnumerator();
    public int GetVisibleItemsCount();
    public bool IsInVisibleRange(int index);
    public void Remove(VisiblePanelItem pair);
    public void ScheduleClean(IList`1<VisiblePanelItem> pairs);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void UpdateVisibleRange(VisibleRangeAction action, LinkedList`1<VisiblePanelItem> pairs);
}
public class Syncfusion.Windows.Shared.PathFractions : DependencyObject {
    public static DependencyProperty PathFractionProperty;
    public double PathFraction { get; public set; }
    public PathFractions(double pathFraction);
    private static PathFractions();
    public double get_PathFraction();
    public void set_PathFraction(double value);
    private static object CoercePathFraction(DependencyObject d, object baseValue);
}
public enum Syncfusion.Windows.Shared.PercentEditMode : Enum {
    public int value__;
    public static PercentEditMode PercentMode;
    public static PercentEditMode DoubleMode;
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.PercentTextBox : EditorBase {
    private PropertyChangedCallback ValidationCompletedChanged;
    private PropertyChangedCallback InvalidValueBehaviorChanged;
    private StringValidationCompletedEventHandler ValueValidationCompleted;
    private PropertyChangedCallback ValidationValueChanged;
    private CancelEventHandler Validating;
    private EventHandler Validated;
    private PropertyChangedCallback PercentageSymbolChanged;
    private PropertyChangedCallback PercentEditModeChanged;
    private PropertyChangedCallback PercentValueChanged;
    private PropertyChangedCallback MinValueChanged;
    private PropertyChangedCallback MaxValueChanged;
    private PropertyChangedCallback PercentDecimalDigitsChanged;
    private PropertyChangedCallback PercentDecimalSeparatorChanged;
    private PropertyChangedCallback PercentGroupSeparatorChanged;
    private PropertyChangedCallback PercentGroupSizesChanged;
    private PropertyChangedCallback MinimumNumberDecimalDigitsChanged;
    private PropertyChangedCallback MaximumNumberDecimalDigitsChanged;
    internal Nullable`1<double> OldValue;
    internal Nullable`1<double> mValue;
    internal Nullable`1<bool> mValueChanged;
    internal bool mIsLoaded;
    internal string checktext;
    private RepeatButton upButton;
    private RepeatButton downButton;
    internal int percentDecimalDigits;
    internal bool IsExceedPercentDecimalDigits;
    private ScrollViewer PART_ContentHost;
    private bool _validatingrResult;
    private PropertyChangedCallback ValidationOnLostFocusChanged;
    public static DependencyProperty ValidationOnLostFocusProperty;
    public static DependencyProperty GroupSeperatorEnabledProperty;
    public static DependencyProperty PercentEditModeProperty;
    public static DependencyProperty PercentValueProperty;
    public static DependencyProperty MinValueProperty;
    public static DependencyProperty MaxValueProperty;
    public static DependencyProperty PercentDecimalDigitsProperty;
    public static DependencyProperty PercentDecimalSeparatorProperty;
    public static DependencyProperty PercentGroupSeparatorProperty;
    public static DependencyProperty ScrollIntervalProperty;
    public static DependencyProperty PercentGroupSizesProperty;
    public static DependencyProperty PercentNegativePatternProperty;
    public static DependencyProperty PercentPositivePatternProperty;
    public static DependencyProperty PercentageSymbolProperty;
    public static DependencyProperty MinPercentDecimalDigitsProperty;
    public static DependencyProperty MaxPercentDecimalDigitsProperty;
    public static DependencyProperty NullValueProperty;
    public static DependencyProperty AllowMultipleSymbolProperty;
    public static DependencyProperty ValueValidationProperty;
    public static DependencyProperty InvalidValueBehaviorProperty;
    public static DependencyProperty ValidationValueProperty;
    public static DependencyProperty ValidationCompletedProperty;
    [CompilerGeneratedAttribute]
private ICommand <pastecommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <copycommand>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <cutcommand>k__BackingField;
    public ICommand pastecommand { get; private set; }
    public ICommand copycommand { get; private set; }
    public ICommand cutcommand { get; private set; }
    public bool ValidationOnLostFocus { get; public set; }
    public PercentEditMode PercentEditMode { get; public set; }
    public bool GroupSeperatorEnabled { get; public set; }
    public Nullable`1<double> PercentValue { get; public set; }
    public double MinValue { get; public set; }
    public double MaxValue { get; public set; }
    public int PercentDecimalDigits { get; public set; }
    public string PercentDecimalSeparator { get; public set; }
    public string PercentGroupSeparator { get; public set; }
    public double ScrollInterval { get; public set; }
    public Int32Collection PercentGroupSizes { get; public set; }
    public int PercentNegativePattern { get; public set; }
    public int PercentPositivePattern { get; public set; }
    public string PercentageSymbol { get; public set; }
    public int MinPercentDecimalDigits { get; public set; }
    public int MaxPercentDecimalDigits { get; public set; }
    public Nullable`1<double> NullValue { get; public set; }
    public bool AllowMultipleSymbol { get; public set; }
    public StringValidation ValueValidation { get; public set; }
    public InvalidInputBehavior InvalidValueBehavior { get; public set; }
    public string ValidationValue { get; public set; }
    public bool ValidationCompleted { get; public set; }
    private static PercentTextBox();
    public void add_ValidationCompletedChanged(PropertyChangedCallback value);
    public void remove_ValidationCompletedChanged(PropertyChangedCallback value);
    public void add_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void remove_InvalidValueBehaviorChanged(PropertyChangedCallback value);
    public void add_ValueValidationCompleted(StringValidationCompletedEventHandler value);
    public void remove_ValueValidationCompleted(StringValidationCompletedEventHandler value);
    public void add_ValidationValueChanged(PropertyChangedCallback value);
    public void remove_ValidationValueChanged(PropertyChangedCallback value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    public void add_PercentageSymbolChanged(PropertyChangedCallback value);
    public void remove_PercentageSymbolChanged(PropertyChangedCallback value);
    public void add_PercentEditModeChanged(PropertyChangedCallback value);
    public void remove_PercentEditModeChanged(PropertyChangedCallback value);
    public void add_PercentValueChanged(PropertyChangedCallback value);
    public void remove_PercentValueChanged(PropertyChangedCallback value);
    public void add_MinValueChanged(PropertyChangedCallback value);
    public void remove_MinValueChanged(PropertyChangedCallback value);
    public void add_MaxValueChanged(PropertyChangedCallback value);
    public void remove_MaxValueChanged(PropertyChangedCallback value);
    public void add_PercentDecimalDigitsChanged(PropertyChangedCallback value);
    public void remove_PercentDecimalDigitsChanged(PropertyChangedCallback value);
    public void add_PercentDecimalSeparatorChanged(PropertyChangedCallback value);
    public void remove_PercentDecimalSeparatorChanged(PropertyChangedCallback value);
    public void add_PercentGroupSeparatorChanged(PropertyChangedCallback value);
    public void remove_PercentGroupSeparatorChanged(PropertyChangedCallback value);
    public void add_PercentGroupSizesChanged(PropertyChangedCallback value);
    public void remove_PercentGroupSizesChanged(PropertyChangedCallback value);
    private void add_MinimumNumberDecimalDigitsChanged(PropertyChangedCallback value);
    private void remove_MinimumNumberDecimalDigitsChanged(PropertyChangedCallback value);
    private void add_MaximumNumberDecimalDigitsChanged(PropertyChangedCallback value);
    private void remove_MaximumNumberDecimalDigitsChanged(PropertyChangedCallback value);
    [CompilerGeneratedAttribute]
public ICommand get_pastecommand();
    [CompilerGeneratedAttribute]
private void set_pastecommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_copycommand();
    [CompilerGeneratedAttribute]
private void set_copycommand(ICommand value);
    [CompilerGeneratedAttribute]
public ICommand get_cutcommand();
    [CompilerGeneratedAttribute]
private void set_cutcommand(ICommand value);
    private void PercentTextBox_Unloaded(object sender, RoutedEventArgs e);
    public void Dispose();
    private sealed virtual override void System.IDisposable.Dispose();
    private void _pastecommand(object parameter);
    private void _copycommmand(object parameter);
    private void _cutcommmand(object parameter);
    private void copy();
    private void CommandExecuted(object sender, ExecutedRoutedEventArgs e);
    private void Paste();
    private void SpinButton_Click(object sender, RoutedEventArgs e);
    private void ChangeValue(bool canIncrement);
    private double MaxLengthValidation(double value);
    private bool Canpaste(object parameter);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    private void PercentTextBox_SelectionChanged(object sender, RoutedEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void cut();
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    internal virtual void OnCultureChanged();
    internal virtual void OnNumberFormatChanged();
    protected virtual void OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    public virtual void OnUseNullOptionChanged(DependencyPropertyChangedEventArgs args);
    internal void FormatText();
    internal void SetValue(Nullable`1<bool> IsReload, Nullable`1<double> _Value);
    internal Nullable`1<double> ValidateValue(Nullable`1<double> Val);
    internal CultureInfo GetCulture();
    private void CheckIsExceedDecimalDigits();
    private void UpdatePercentDecimalDigits();
    internal static int CountDecimalDigits(string p, DependencyObject d);
    internal void UpdatePercentDecimalDigits(int count);
    private static object CoerceValue(DependencyObject d, object baseValue);
    private void IntegerTextbox_Loaded(object sender, RoutedEventArgs e);
    public bool get_ValidationOnLostFocus();
    public void set_ValidationOnLostFocus(bool value);
    public void add_ValidationOnLostFocusChanged(PropertyChangedCallback value);
    public void remove_ValidationOnLostFocusChanged(PropertyChangedCallback value);
    public PercentEditMode get_PercentEditMode();
    public void set_PercentEditMode(PercentEditMode value);
    public bool get_GroupSeperatorEnabled();
    public void set_GroupSeperatorEnabled(bool value);
    public Nullable`1<double> get_PercentValue();
    public void set_PercentValue(Nullable`1<double> value);
    public double get_MinValue();
    public void set_MinValue(double value);
    public double get_MaxValue();
    public void set_MaxValue(double value);
    public int get_PercentDecimalDigits();
    public void set_PercentDecimalDigits(int value);
    public string get_PercentDecimalSeparator();
    public void set_PercentDecimalSeparator(string value);
    public string get_PercentGroupSeparator();
    public void set_PercentGroupSeparator(string value);
    public double get_ScrollInterval();
    public void set_ScrollInterval(double value);
    public Int32Collection get_PercentGroupSizes();
    public void set_PercentGroupSizes(Int32Collection value);
    public int get_PercentNegativePattern();
    public void set_PercentNegativePattern(int value);
    public static void OnPercentNegativePatternChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static object CoercePercentGroupSeperator(DependencyObject d, object baseValue);
    protected void OnPercentNegativePatternChanged(DependencyPropertyChangedEventArgs args);
    public int get_PercentPositivePattern();
    public void set_PercentPositivePattern(int value);
    public static void OnPercentPositivePatternChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPercentPositivePatternChanged(DependencyPropertyChangedEventArgs args);
    public string get_PercentageSymbol();
    public void set_PercentageSymbol(string value);
    public int get_MinPercentDecimalDigits();
    public void set_MinPercentDecimalDigits(int value);
    public int get_MaxPercentDecimalDigits();
    public void set_MaxPercentDecimalDigits(int value);
    public static void OnPercentDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPercentDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    private static void OnValidationOnLostFocusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnValidationOnLostFocusChanged(DependencyPropertyChangedEventArgs e);
    public static void OnPercentDecimalSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPercentDecimalSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnPercentGroupSeparatorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPercentGroupSeparatorChanged(DependencyPropertyChangedEventArgs args);
    public static void OnPercentGroupSizesChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPercentGroupSizesChanged(DependencyPropertyChangedEventArgs args);
    public static void OnPercentageSymbolChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPercentageSymbolChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMinimumNumberDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnMinimumNumberDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMaximumNumberDecimalDigitsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnMaximumNumberDecimalDigitsChanged(DependencyPropertyChangedEventArgs args);
    public static void OnPercentEditModeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnPercentEditModeChanged(DependencyPropertyChangedEventArgs args);
    public static void OnValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMinValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMaxValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnMaxValueChanged(DependencyPropertyChangedEventArgs args);
    public Nullable`1<double> get_NullValue();
    public void set_NullValue(Nullable`1<double> value);
    public bool get_AllowMultipleSymbol();
    public void set_AllowMultipleSymbol(bool value);
    public static void OnNullValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnNullValueChanged(DependencyPropertyChangedEventArgs args);
    public StringValidation get_ValueValidation();
    public void set_ValueValidation(StringValidation value);
    public InvalidInputBehavior get_InvalidValueBehavior();
    public void set_InvalidValueBehavior(InvalidInputBehavior value);
    public static void OnInvalidValueBehaviorChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnInvalidValueBehaviorChanged(DependencyPropertyChangedEventArgs args);
    public string get_ValidationValue();
    public void set_ValidationValue(string value);
    public static void OnValidationValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationValueChanged(DependencyPropertyChangedEventArgs args);
    public bool get_ValidationCompleted();
    public void set_ValidationCompleted(bool value);
    public static void OnValidationCompletedPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnValidationCompletedPropertyChanged(DependencyPropertyChangedEventArgs args);
    internal void OnValueValidationCompleted(StringValidationEventArgs e);
    internal void OnValidated(EventArgs e);
    internal bool OnValidating(CancelEventArgs e);
}
internal class Syncfusion.Windows.Shared.PercentValueHandler : object {
    private bool _negativeZeroPresent;
    public static PercentValueHandler percentValueHandler;
    private NumberFormatInfo numberFormat;
    private string maskedText;
    private int selectionStart;
    private int selectionEnd;
    private int selectionLength;
    private int separatorStart;
    private int separatorEnd;
    private int caretPosition;
    private string unmaskedText;
    private double previewValue;
    private bool minusKeyValidationFlag;
    private bool separatorFlag;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    private static PercentValueHandler();
    public bool MatchWithMask(PercentTextBox percentTextBox, string text);
    public bool HandleKeyDown(PercentTextBox percentTextBox, KeyEventArgs eventArgs);
    public bool HandleBackSpaceKey(PercentTextBox percentTextBox);
    public bool HandleDeleteKey(PercentTextBox percentTextBox);
    public bool HandleUpDownKey(PercentTextBox percentTextBox, bool isUpKeyPressed);
    private void InitializeValues(PercentTextBox percentTextBox);
    private void GenerateUnmaskedText(PercentTextBox percentTextBox, bool isMatchingMask);
    private bool CharacterValidation(PercentTextBox percentTextBox, string text);
    private bool TextEditingForMatchingMask(PercentTextBox percentTextBox, string text);
    private void UpdatePercentDecimalDigits(PercentTextBox percentTextBox);
    private void TrimmingZerosinUnmaskedText();
    private bool TextEditingForBackspace(PercentTextBox percentTextBox);
    private bool TextEditingForDelete(PercentTextBox percentTextBox);
    private bool GeneratePreviewValue(PercentTextBox percentTextBox, bool isBackspaceKeyPressed);
    private bool StringValidationOnKeyPress(PercentTextBox percentTextBox, bool isBackspaceKeyPressed);
    [CompilerGeneratedAttribute]
private static bool <TextEditingForMatchingMask>b__1(char p);
}
public class Syncfusion.Windows.Shared.PermissionHelper : object {
    private static Nullable`1<bool> m_unmanagedCodePermission;
    public static bool HasUnmanagedCodePermission { get; }
    public static bool get_HasUnmanagedCodePermission();
    public static Point GetSafePointToScreen(Visual visual, Point point);
    private static Nullable`1<bool> HasSecurityPermissionFlag(SecurityPermissionFlag flag);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.PinnableItemsControl : ItemsControl {
    internal PinnableListBox pinnableListBox;
    [CompilerGeneratedAttribute]
private bool <IsPinnedContainer>k__BackingField;
    public bool IsPinnedContainer { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsPinnedContainer();
    [CompilerGeneratedAttribute]
public void set_IsPinnedContainer(bool value);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.PinnableListBox : ItemsControl {
    private RoutedEventHandler PinStatusChangedEvent;
    internal bool isCalledByUpdateItems;
    internal string default_StoreFile;
    internal PinnableListBoxItem pinnableItem;
    internal PinnableItemsControl pinnedItems;
    internal PinnableItemsControl unpinnedItems;
    public static DependencyProperty PinItemsSortDescriptionProperty;
    public static DependencyProperty UnPinItemsSortDescriptionProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty PinnedItemsProperty;
    public static DependencyProperty PinnedSortDirectionProperty;
    public static DependencyProperty UnPinnedSortDirectionProperty;
    public static DependencyProperty UnpinnedItemsProperty;
    public static DependencyProperty SelectedItemProperty;
    public string PinItemsSortDescription { get; public set; }
    public string UnPinItemsSortDescription { get; public set; }
    public string Header { get; public set; }
    public ObservableCollection`1<object> PinnedItems { get; public set; }
    public ListSortDirection PinnedSortDirection { get; public set; }
    public ListSortDirection UnPinnedSortDirection { get; public set; }
    public ObservableCollection`1<object> UnpinnedItems { get; public set; }
    public object SelectedItem { get; public set; }
    private static PinnableListBox();
    public void add_PinStatusChangedEvent(RoutedEventHandler value);
    public void remove_PinStatusChangedEvent(RoutedEventHandler value);
    public void SaveState(string fileName);
    public void LoadState(string fileName);
    internal void ApplyStateParams(PinnableListBoxParams stateparams);
    public virtual void OnApplyTemplate();
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnInitialized(EventArgs e);
    public string get_PinItemsSortDescription();
    public void set_PinItemsSortDescription(string value);
    public string get_UnPinItemsSortDescription();
    public void set_UnPinItemsSortDescription(string value);
    public string get_Header();
    public void set_Header(string value);
    public ObservableCollection`1<object> get_PinnedItems();
    public void set_PinnedItems(ObservableCollection`1<object> value);
    public ListSortDirection get_PinnedSortDirection();
    public void set_PinnedSortDirection(ListSortDirection value);
    public ListSortDirection get_UnPinnedSortDirection();
    public void set_UnPinnedSortDirection(ListSortDirection value);
    public ObservableCollection`1<object> get_UnpinnedItems();
    public void set_UnpinnedItems(ObservableCollection`1<object> value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    internal void FirePinStatusChanged();
    internal void UpdatePinItems(PinnableListBox control, object item, bool ispinned);
    public void SortCollection();
}
public class Syncfusion.Windows.Shared.PinnableListBoxEventArgs : RoutedEventArgs {
    private object pinnablelistboxItem;
    public object PinnablelistboxItem { get; public set; }
    public object get_PinnablelistboxItem();
    public void set_PinnablelistboxItem(object value);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.PinnableListBoxItem : ContentControl {
    private ContextMenu cMenu;
    internal PinnableListBox pinnableListBox;
    public static DependencyProperty IconProperty;
    public static DependencyProperty AddedTimeProperty;
    public static DependencyProperty IsPinnedProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty DescriptionProperty;
    public static RoutedCommand PinCommand;
    public static RoutedCommand RemoveCommand;
    public static RoutedCommand ClearCommand;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    public ImageSource Icon { get; public set; }
    public DateTime AddedTime { get; public set; }
    public bool IsPinned { get; public set; }
    public Thickness CornerRadius { get; public set; }
    public bool IsSelected { get; public set; }
    public string Description { get; public set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    private static PinnableListBoxItem();
    private void PinnableListBoxItem_Unloaded(object sender, RoutedEventArgs e);
    private void PinnableListBoxItem_Loaded(object sender, RoutedEventArgs e);
    public ImageSource get_Icon();
    public void set_Icon(ImageSource value);
    public DateTime get_AddedTime();
    public void set_AddedTime(DateTime value);
    public bool get_IsPinned();
    public void set_IsPinned(bool value);
    public static void OnIsPinnedChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsPinnedChanged(DependencyPropertyChangedEventArgs args);
    public Thickness get_CornerRadius();
    public void set_CornerRadius(Thickness value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public string get_Description();
    public void set_Description(string value);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    private static void OnPinExecute(object sender, ExecutedRoutedEventArgs e);
    private static void OnPinCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private static void OnRemoveExecute(object sender, ExecutedRoutedEventArgs args);
    private static void OnRemoveCanExecute(object sender, CanExecuteRoutedEventArgs args);
    private static void OnClearExecute(object sender, ExecutedRoutedEventArgs args);
    private static void OnCLearCanExecute(object sender, CanExecuteRoutedEventArgs args);
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    private static void OnCommandChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void HookCommand(ICommand olcommand, ICommand newommand);
    private void CanExecuteChanged(object sender, EventArgs e);
}
public class Syncfusion.Windows.Shared.PinnableListBoxParams : object {
    [CompilerGeneratedAttribute]
private string <PinItemsSortDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnPinItemsSortDescription>k__BackingField;
    public string PinItemsSortDescription { get; public set; }
    public string UnPinItemsSortDescription { get; public set; }
    public PinnableListBoxParams(string pinItemsSortDescription, string unPinItemsSortDescription);
    [CompilerGeneratedAttribute]
public string get_PinItemsSortDescription();
    [CompilerGeneratedAttribute]
public void set_PinItemsSortDescription(string value);
    [CompilerGeneratedAttribute]
public string get_UnPinItemsSortDescription();
    [CompilerGeneratedAttribute]
public void set_UnPinItemsSortDescription(string value);
}
public class Syncfusion.Windows.Shared.POINT : object {
    public int x;
    public int y;
    public POINT(int x, int y);
    public virtual string ToString();
}
public enum Syncfusion.Windows.Shared.PopupState : Enum {
    public int value__;
    public static PopupState None;
    public static PopupState ShowTab;
    public static PopupState ShowCalendar;
    public static PopupState ShowWatch;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.PreviewBorder : Border {
    private Stretch m_Stretch;
    public PreviewBorder(Stretch stretch);
    private void OnDataContextChanged(object sender, DependencyPropertyChangedEventArgs e);
}
internal class Syncfusion.Windows.Shared.Printing.BaseCommand : object {
    private Action`1<object> _execute;
    private Predicate`1<object> _canExecute;
    public BaseCommand(Action`1<object> execute);
    public BaseCommand(Action`1<object> execute, Predicate`1<object> canExecute);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual void Execute(object parameter);
}
public class Syncfusion.Windows.Shared.Printing.CustomMarginDialog : ChromelessWindow {
    private PrintOptionsControl OptionsControl;
    internal TextBlock left;
    internal UpDown PrintMarginLeftUPDowm;
    internal TextBlock right;
    internal UpDown PrintMarginRightUPDowm;
    internal TextBlock top;
    internal UpDown PrintMarginTopUPDowm;
    internal TextBlock bottom;
    internal UpDown PrintMarginBottomUPDowm;
    internal Button OkButton;
    internal Button CancelButton;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private double <LeftMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RightMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TopMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BottomMargin>k__BackingField;
    public double LeftMargin { get; public set; }
    public double RightMargin { get; public set; }
    public double TopMargin { get; public set; }
    public double BottomMargin { get; public set; }
    public CustomMarginDialog(PrintOptionsControl control, Thickness pageMargin);
    [CompilerGeneratedAttribute]
public double get_LeftMargin();
    [CompilerGeneratedAttribute]
public void set_LeftMargin(double value);
    [CompilerGeneratedAttribute]
public double get_RightMargin();
    [CompilerGeneratedAttribute]
public void set_RightMargin(double value);
    [CompilerGeneratedAttribute]
public double get_TopMargin();
    [CompilerGeneratedAttribute]
public void set_TopMargin(double value);
    [CompilerGeneratedAttribute]
public double get_BottomMargin();
    [CompilerGeneratedAttribute]
public void set_BottomMargin(double value);
    public virtual void OnApplyTemplate();
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnClosing(CancelEventArgs e);
    private void OkButton_Click(object sender, RoutedEventArgs e);
    private void CancelButton_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Syncfusion.Windows.Shared.Printing.CustomPageSizeDialog : Window {
    private PrintOptionsControl optionsControl;
    internal TextBlock width;
    internal UpDown PrintWidthUPDowm;
    internal TextBlock height;
    internal UpDown HeightUPDowm;
    internal Button OkButton;
    internal Button CancelButton;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private double <PageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PageWidth>k__BackingField;
    public double PageHeight { get; public set; }
    public double PageWidth { get; public set; }
    public CustomPageSizeDialog(PrintOptionsControl printOptionsControl, Size pagesize);
    [CompilerGeneratedAttribute]
public double get_PageHeight();
    [CompilerGeneratedAttribute]
public void set_PageHeight(double value);
    [CompilerGeneratedAttribute]
public double get_PageWidth();
    [CompilerGeneratedAttribute]
public void set_PageWidth(double value);
    public virtual void OnApplyTemplate();
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    private void CancelButton_Click(object sender, RoutedEventArgs e);
    private void OkButton_Click(object sender, RoutedEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Syncfusion.Windows.Shared.Printing.DropDownCustomPopupPlacement : object {
    public static CustomPopupPlacementCallback Callback { get; }
    public static CustomPopupPlacementCallback get_Callback();
    public static CustomPopupPlacement[] GetPlaces(Size popupSize, Size targetSize, Point offset);
}
internal class Syncfusion.Windows.Shared.Printing.NamespaceDoc : object {
}
public class Syncfusion.Windows.Shared.Printing.PageSizeTextConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Shared.Printing.PageSizeUnit : Enum {
    public int value__;
    public static PageSizeUnit Inches;
    public static PageSizeUnit Centimeters;
}
[ExtensionAttribute]
public static class Syncfusion.Windows.Shared.Printing.PrintExtensions : object {
    internal static double CmConst;
    private static PrintExtensions();
    public static Window GetParentWindow(DependencyObject child);
    internal static double PixelToCm(double value);
    internal static double CmToPixel(double value);
    internal static Size PixelToCm(Size size);
    internal static Size CmToPixel(Size size);
    internal static Thickness CmToPixel(Thickness thickness);
    internal static Thickness PixelToCm(Thickness thickness);
    internal static List`1<PrintPageOrientation> GetOrientationList(ResourceWrapper resources, string themeName);
    internal static List`1<PrintPageCollation> GetCollationList(ResourceWrapper resources, string themeName);
    internal static List`1<PrintPageRangeSelection> GetPageRangeSelectionList(ResourceWrapper resources, string themeName);
    internal static List`1<PrintPageMargin> GetMarginList(PrintOptionsControl optionsControl, string themeName);
    [ExtensionAttribute]
internal static void SelectDefaultPageMediaSize(PrintManager printManager);
    [ExtensionAttribute]
internal static Dictionary`2<PrintPageSize, Tuple`3<string, int, int>> GetPrinterSupportedPaperSizes(PrintManager printManager, List`1& pageSizeOptions, PageSizeUnit unit);
    [ExtensionAttribute]
internal static PrintTicket GetCustomizedPrintTicket(PrintManager printManager, Nullable`1<Size> customSize, bool isPreview);
    [ExtensionAttribute]
internal static Tuple`3<string, int, int> FindNearestPageMediaSizeWithName(PrintManager printManager, XmlDocument xml, bool isPreview);
    [ExtensionAttribute]
internal static Tuple`3<string, int, int> FindNearestPageMediaSize(PrintManager printManager, int width, int height, PageSizeUnit units, bool isPreview);
    [ExtensionAttribute]
internal static void UpdateXMLDocumentWithPageMediaSize(PrintManager printManager, XmlDocument& xml, bool isPreview);
    private static Dictionary`2<PrintPageSize, Tuple`3<string, int, int>> GetSupportedPageSizes(XmlDocument xml, List`1& pageSizeOptions, PageSizeUnit unit);
}
public class Syncfusion.Windows.Shared.Printing.PrintManager : object {
    private int pagecount;
    private bool isdisposed;
    private double printPageHeaderHeight;
    private double printPageFooterHeight;
    private PageSizeUnit _unit;
    private double printPageHeight;
    private double printPageWidth;
    private DataTemplate printPageHeaderTemplate;
    private DataTemplate printPageFooterTemplate;
    private Thickness printPageMargin;
    private PrintOrientation printPageOrientation;
    private int selectedScaleIndex;
    private Collation selectedCollation;
    private PageRangeSelection selectedPageRange;
    private int _copiesCount;
    private int _frompage;
    private int _topage;
    internal PrintDialog dialog;
    internal bool NeedToChangeDefaultPrinter;
    private PrintQueueOption selectedPrinter;
    private List`1<PrintQueueOption> printers;
    private List`1<PrintPageSize> pageSizeOptions;
    private PrintOptionsControl printOptionsControl;
    protected internal bool isSuspended;
    internal Action InValidatePreviewPanel;
    protected internal string SelectedPageMediaName;
    protected internal bool isPagesInitialized;
    private PrintSettingsBase _printSettings;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private Dictionary`2<PrintPageSize, Tuple`3<string, int, int>> <printQueueCapablitySizes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PrintPageControl> <Pages>k__BackingField;
    internal Dictionary`2<PrintPageSize, Tuple`3<string, int, int>> printQueueCapablitySizes { get; internal set; }
    protected internal PrintSettingsBase PrintSettings { get; }
    protected internal List`1<PrintPageControl> Pages { get; internal set; }
    internal PrintOptionsControl PrintOptionsControl { get; internal set; }
    public int SelectedScaleIndex { get; public set; }
    public PageSizeUnit PageSizeDisplayUnit { get; public set; }
    public int PageCount { get; protected set; }
    public Thickness PageMargin { get; public set; }
    public double PageHeight { get; public set; }
    public double PageWidth { get; public set; }
    public double PageHeaderHeight { get; public set; }
    public double PageFooterHeight { get; public set; }
    public DataTemplate PageHeaderTemplate { get; public set; }
    public DataTemplate PageFooterTemplate { get; public set; }
    public Collation Collation { get; internal set; }
    public PageRangeSelection PageRangeSelection { get; internal set; }
    public int CopiesCount { get; internal set; }
    public int FromPage { get; internal set; }
    public int ToPage { get; internal set; }
    public PrintOrientation PageOrientation { get; public set; }
    public List`1<PrintQueueOption> Printers { get; internal set; }
    public PrintQueueOption SelectedPrinter { get; internal set; }
    public List`1<PrintPageSize> PageSizeOptions { get; internal set; }
    public PrintManager(PrintSettingsBase settings);
    [CompilerGeneratedAttribute]
internal Dictionary`2<PrintPageSize, Tuple`3<string, int, int>> get_printQueueCapablitySizes();
    [CompilerGeneratedAttribute]
internal void set_printQueueCapablitySizes(Dictionary`2<PrintPageSize, Tuple`3<string, int, int>> value);
    protected internal PrintSettingsBase get_PrintSettings();
    [CompilerGeneratedAttribute]
protected internal List`1<PrintPageControl> get_Pages();
    [CompilerGeneratedAttribute]
internal void set_Pages(List`1<PrintPageControl> value);
    internal PrintOptionsControl get_PrintOptionsControl();
    internal void set_PrintOptionsControl(PrintOptionsControl value);
    public int get_SelectedScaleIndex();
    public void set_SelectedScaleIndex(int value);
    public PageSizeUnit get_PageSizeDisplayUnit();
    public void set_PageSizeDisplayUnit(PageSizeUnit value);
    public int get_PageCount();
    protected void set_PageCount(int value);
    public Thickness get_PageMargin();
    public void set_PageMargin(Thickness value);
    public double get_PageHeight();
    public void set_PageHeight(double value);
    public double get_PageWidth();
    public void set_PageWidth(double value);
    public double get_PageHeaderHeight();
    public void set_PageHeaderHeight(double value);
    public double get_PageFooterHeight();
    public void set_PageFooterHeight(double value);
    public DataTemplate get_PageHeaderTemplate();
    public void set_PageHeaderTemplate(DataTemplate value);
    public DataTemplate get_PageFooterTemplate();
    public void set_PageFooterTemplate(DataTemplate value);
    public Collation get_Collation();
    internal void set_Collation(Collation value);
    public PageRangeSelection get_PageRangeSelection();
    internal void set_PageRangeSelection(PageRangeSelection value);
    public int get_CopiesCount();
    internal void set_CopiesCount(int value);
    public int get_FromPage();
    internal void set_FromPage(int value);
    public int get_ToPage();
    internal void set_ToPage(int value);
    public PrintOrientation get_PageOrientation();
    public void set_PageOrientation(PrintOrientation value);
    public List`1<PrintQueueOption> get_Printers();
    internal void set_Printers(List`1<PrintQueueOption> value);
    public PrintQueueOption get_SelectedPrinter();
    internal void set_SelectedPrinter(PrintQueueOption value);
    public List`1<PrintPageSize> get_PageSizeOptions();
    internal void set_PageSizeOptions(List`1<PrintPageSize> value);
    protected internal void OnPrintPropertyChanged();
    public void Print();
    public virtual void Print(PrintDialog printDialog, bool showPrintDialog);
    protected virtual void PrintDocument(PrintDialog printDialog, Nullable`1<bool> canPrint);
    protected internal virtual PrintPageControl CreatePage(int pageIndex);
    protected internal virtual PrintPageControl CreatePage(int pageIndex, PrintPageControl pageControl);
    internal double GetPageWidth();
    internal double GetPageHeight();
    internal virtual void InitializePrint();
    protected virtual void ComputePageCount();
    protected virtual void InitializeProperties();
    public virtual FixedDocument GetPrintDocument();
    public virtual FixedDocument GetPrintDocument(int start, int end);
    public virtual void OnSelectedPrinterChanged(PrintQueue printQueue);
    protected internal virtual void OnPrintMarginChanged(Thickness value);
    protected internal virtual void OnPageSizeChanged(double width, double height);
    protected internal virtual void OnPrintOrientationChanged(PrintOrientation value);
    protected internal virtual List`1<PrintScaleInfo> GetScaleOptions(string themeName);
    protected internal virtual void OnPrintScaleOptionChanged(int index);
    internal void PrintWithDialog();
    private void OnSelectedPrintQueueChanged();
    private void OnPrintOptionControlChanged();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
public class Syncfusion.Windows.Shared.Printing.PrintOptionsControl : Control {
    private bool isWired;
    private object previousMargin;
    private bool isdisposed;
    private bool IsInSuspend;
    private object previousPageSize;
    private List`1<PrintPageOrientation> orientationOptions;
    private List`1<PrintPageRangeSelection> pageRangeSelectionOptions;
    private List`1<PrintPageCollation> pageCollationOptions;
    private List`1<PrintPageMargin> marginOptions;
    private int _copiesCount;
    private int _frompage;
    private int _topage;
    private List`1<PrintPageSize> pageSizeOptions;
    private PrintPageSize selectedPageSize;
    private PrintQueueOption selectedPrinter;
    private Collation selectedCollation;
    private PageRangeSelection selectedPageRange;
    private List`1<PrintQueueOption> printers;
    internal PrintManager printManager;
    internal PrintPreviewAreaControl printPreviewAreaControl;
    internal Thickness DefaultPageMargin;
    internal ResourceWrapper resources;
    private Button Part_QuickPrintButton;
    private ComboBox Part_PapersComboBox;
    private ComboBox Part_MarginComboBox;
    private ComboBox Part_ScaleOptionComboBox;
    private ComboBox Part_OrientationCombombBox;
    private ComboBox PART_PrintersComboBox;
    private ComboBox PART_CollatedComboBox;
    private ComboBox PART_PageRangeSelectionComboBox;
    private TextBox Part_CopyCount_TextBox;
    private RepeatButton Part_CopyCount_UpButton;
    private RepeatButton Part_CopyCount_DownButton;
    private TextBox Part_FromPage_TextBox;
    private RepeatButton Part_FromPage_UpButton;
    private RepeatButton Part_FromPage_DownButton;
    private TextBox Part_ToPage_TextBox;
    private RepeatButton Part_ToPage_UpButton;
    private RepeatButton Part_ToPage_DownButton;
    public static DependencyProperty SelectedScaleIndexProperty;
    internal static DependencyProperty PageMarginProperty;
    internal static DependencyProperty PageSizeProperty;
    public static DependencyProperty PrintOrientationProperty;
    private ICommand printCommand;
    private ICommand quickPrintCommand;
    private PropertyChangedEventHandler PropertyChanged;
    public List`1<PrintPageRangeSelection> PrintPageRangeSelectionOptions { get; }
    public List`1<PrintPageCollation> PrintPageCollationOptions { get; }
    public List`1<PrintPageOrientation> OrientationOptions { get; }
    public List`1<PrintScaleInfo> ScaleOptions { get; }
    public List`1<PrintPageMargin> MarginOptions { get; public set; }
    public int CopiesCount { get; public set; }
    public int FromPage { get; public set; }
    public int ToPage { get; public set; }
    public List`1<PrintPageSize> PageSizeOptions { get; public set; }
    public List`1<PrintQueueOption> Printers { get; internal set; }
    public PrintQueueOption SelectedPrinter { get; public set; }
    public Collation SelectedCollation { get; public set; }
    public PageRangeSelection SelectedPrintPageRange { get; public set; }
    public PrintPageSize SelectedPageSize { get; public set; }
    public int SelectedScaleIndex { get; public set; }
    internal Thickness PageMargin { get; internal set; }
    internal Size PageSize { get; internal set; }
    public PrintOrientation PrintOrientation { get; public set; }
    public ICommand PrintCommand { get; }
    public ICommand QuickPrintCommand { get; }
    private static PrintOptionsControl();
    public List`1<PrintPageRangeSelection> get_PrintPageRangeSelectionOptions();
    public List`1<PrintPageCollation> get_PrintPageCollationOptions();
    public List`1<PrintPageOrientation> get_OrientationOptions();
    public List`1<PrintScaleInfo> get_ScaleOptions();
    public List`1<PrintPageMargin> get_MarginOptions();
    public void set_MarginOptions(List`1<PrintPageMargin> value);
    public int get_CopiesCount();
    public void set_CopiesCount(int value);
    public int get_FromPage();
    public void set_FromPage(int value);
    public int get_ToPage();
    public void set_ToPage(int value);
    public List`1<PrintPageSize> get_PageSizeOptions();
    public void set_PageSizeOptions(List`1<PrintPageSize> value);
    public List`1<PrintQueueOption> get_Printers();
    internal void set_Printers(List`1<PrintQueueOption> value);
    public PrintQueueOption get_SelectedPrinter();
    public void set_SelectedPrinter(PrintQueueOption value);
    public Collation get_SelectedCollation();
    public void set_SelectedCollation(Collation value);
    public PageRangeSelection get_SelectedPrintPageRange();
    public void set_SelectedPrintPageRange(PageRangeSelection value);
    public PrintPageSize get_SelectedPageSize();
    public void set_SelectedPageSize(PrintPageSize value);
    public int get_SelectedScaleIndex();
    public void set_SelectedScaleIndex(int value);
    private static void OnPrintScaleOptionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal Thickness get_PageMargin();
    internal void set_PageMargin(Thickness value);
    private static void OnPrintMarginChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal Size get_PageSize();
    internal void set_PageSize(Size value);
    private static void OnPageSizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PrintOrientation get_PrintOrientation();
    public void set_PrintOrientation(PrintOrientation value);
    private static void OnPrintOrientationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public virtual void OnApplyTemplate();
    private void UpdatePageRangeSelection();
    private List`1<PrintPageCollation> UpdatePrintPageCollationValues();
    private List`1<PrintPageRangeSelection> UpdatePrintPageRangeSelectionValues();
    private List`1<PrintPageOrientation> UpdateOrientationValues();
    private List`1<PrintPageMargin> UpdateMarginValues();
    private void UpdatePaperSizeComboBox(Size size);
    private void UpdatePageMarginComboBox(Thickness pageMargin);
    internal void InitializePrintOptionsWindow();
    private void WireEvents();
    private void PART_PageRangeSelectionComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void PART_CollatedComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void Part_ToPage_DownButton_Click(object sender, RoutedEventArgs e);
    private void Part_ToPage_UpButton_Click(object sender, RoutedEventArgs e);
    private void Part_FromPage_DownButton_Click(object sender, RoutedEventArgs e);
    private void Part_FromPage_UpButton_Click(object sender, RoutedEventArgs e);
    private void ChangefromPageValue(bool IsUp, TextBox textbox);
    private void ChangeToPageValue(bool IsUp, TextBox textbox);
    private void Part_PapersComboBox_DropDownOpened(object sender, EventArgs e);
    private void Part_PapersComboBox_DropDownClosed(object sender, EventArgs e);
    private void Part_MarginComboBox_DropDownOpened(object sender, EventArgs e);
    private void Part_MarginCombox_DropDownClosed(object sender, EventArgs e);
    private void UnWireEvents();
    private void OnPrintOptionsControlLoaded(object sender, RoutedEventArgs e);
    private void OnPrintOptionsControlUnloaded(object sender, RoutedEventArgs e);
    private void Part_OrientationComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void PART_PrintersComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void Part_PapersComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e);
    internal void SetPageSize(Size pagesize);
    internal void ResetPageSizeToPreviousValue();
    internal void ResetPageMaringToPreviousValue();
    internal void SetCustomMargin(Thickness pageMargin);
    private void Part_MarginComboBoxSelectionChanged(object sender, SelectionChangedEventArgs e);
    private bool UpdatePage(Thickness selectedMargin, bool canupdate);
    public ICommand get_PrintCommand();
    private void OnprintCommandClicked(object obj);
    public ICommand get_QuickPrintCommand();
    private void OnQuickprintCommandClicked(object obj);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnPropertyChanged(string propertyName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    private void Part_TextBox_MouseMove(object sender, MouseEventArgs e);
    private void Part_CopyCount_DownButton_Click(object sender, RoutedEventArgs e);
    private void Part_CopyCount_UpButton_Click(object sender, RoutedEventArgs e);
    private void ChangeValue(bool IsUp, TextBox textbox);
    private void Part_TextBox_KeyDown(object sender, KeyEventArgs e);
    private bool IsNumberOrControlKey(Key inKey);
    private void ShowInvalidBorderandToolTip(TextBox textBox);
    private void ClearInvalidBorderandToolTip(TextBox textBox);
    private void OnPartTextBoxLostFocus(object sender, RoutedEventArgs e);
    private void TextBox_PreviewKeyDown(object sender, KeyEventArgs e);
    private void OnPasting(object sender, DataObjectPastingEventArgs e);
    private bool IsNumber(string text);
    private void PrintOptionsControl_MouseMove(object sender, MouseEventArgs e);
    [CompilerGeneratedAttribute]
private bool <get_PrintCommand>b__6(object o);
    [CompilerGeneratedAttribute]
private bool <get_QuickPrintCommand>b__7(object o);
}
public enum Syncfusion.Windows.Shared.Printing.PrintOrientation : Enum {
    public int value__;
    public static PrintOrientation Portrait;
    public static PrintOrientation Landscape;
}
public class Syncfusion.Windows.Shared.Printing.PrintPageCollation : object {
    [CompilerGeneratedAttribute]
private string <CollationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Collation <Collation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImagePath>k__BackingField;
    public string CollationName { get; public set; }
    public Collation Collation { get; public set; }
    public string ImagePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CollationName();
    [CompilerGeneratedAttribute]
public void set_CollationName(string value);
    [CompilerGeneratedAttribute]
public Collation get_Collation();
    [CompilerGeneratedAttribute]
public void set_Collation(Collation value);
    [CompilerGeneratedAttribute]
public string get_ImagePath();
    [CompilerGeneratedAttribute]
public void set_ImagePath(string value);
}
public class Syncfusion.Windows.Shared.Printing.PrintPageControl : ContentControl {
    private int _pageIndex;
    private bool isdisposed;
    private PrintManager printManager;
    private Viewbox PartViewbox;
    private Border PartScalingBorder;
    private PropertyChangedEventHandler PropertyChanged;
    public int PageIndex { get; public set; }
    public PrintPageControl(PrintManager printManager);
    public int get_PageIndex();
    public void set_PageIndex(int value);
    public virtual void OnApplyTemplate();
    internal void Zoom(double percent);
    private void RaisePropertyChanged(string propertyName);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
public class Syncfusion.Windows.Shared.Printing.PrintPageMargin : NotificationObject {
    private Thickness thickness;
    private string marginName;
    private string imagePath;
    public string MarginName { get; public set; }
    public string ImagePath { get; public set; }
    public Thickness Thickness { get; public set; }
    public string get_MarginName();
    public void set_MarginName(string value);
    public string get_ImagePath();
    public void set_ImagePath(string value);
    public Thickness get_Thickness();
    public void set_Thickness(Thickness value);
}
public class Syncfusion.Windows.Shared.Printing.PrintPageOrientation : object {
    [CompilerGeneratedAttribute]
private string <OrientationName>k__BackingField;
    [CompilerGeneratedAttribute]
private PrintOrientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImagePath>k__BackingField;
    public string OrientationName { get; public set; }
    public PrintOrientation Orientation { get; public set; }
    public string ImagePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OrientationName();
    [CompilerGeneratedAttribute]
public void set_OrientationName(string value);
    [CompilerGeneratedAttribute]
public PrintOrientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(PrintOrientation value);
    [CompilerGeneratedAttribute]
public string get_ImagePath();
    [CompilerGeneratedAttribute]
public void set_ImagePath(string value);
}
public class Syncfusion.Windows.Shared.Printing.PrintPageRangeSelection : object {
    [CompilerGeneratedAttribute]
private string <PageRangeSelectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private PageRangeSelection <PageRangeSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImagePath>k__BackingField;
    public string PageRangeSelectionName { get; public set; }
    public PageRangeSelection PageRangeSelection { get; public set; }
    public string ImagePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PageRangeSelectionName();
    [CompilerGeneratedAttribute]
public void set_PageRangeSelectionName(string value);
    [CompilerGeneratedAttribute]
public PageRangeSelection get_PageRangeSelection();
    [CompilerGeneratedAttribute]
public void set_PageRangeSelection(PageRangeSelection value);
    [CompilerGeneratedAttribute]
public string get_ImagePath();
    [CompilerGeneratedAttribute]
public void set_ImagePath(string value);
}
public class Syncfusion.Windows.Shared.Printing.PrintPageSize : NotificationObject {
    private string pageSizeName;
    private PageSizeUnit unit;
    private Path imagePath;
    private Size size;
    public PageSizeUnit PageSizeUnit { get; public set; }
    public string PageSizeName { get; public set; }
    public Path ImagePath { get; public set; }
    public Size Size { get; public set; }
    public PageSizeUnit get_PageSizeUnit();
    public void set_PageSizeUnit(PageSizeUnit value);
    public string get_PageSizeName();
    public void set_PageSizeName(string value);
    public Path get_ImagePath();
    public void set_ImagePath(Path value);
    public Size get_Size();
    public void set_Size(Size value);
    internal Size ToPixels();
}
public class Syncfusion.Windows.Shared.Printing.PrintPreview : Control {
    private bool isWired;
    private bool isdisposed;
    private PrintManager printManager;
    private TextBox Part_TextBox;
    private Slider PartZoomSlider;
    private Button PartZoomInButton;
    private Button PartZoomOutButton;
    private PrintOptionsControl PartPrintOptionsControl;
    private PrintPreviewAreaControl PartPrintPreviewAreaControl;
    public PrintPreview(PrintManager printManager);
    public virtual void OnApplyTemplate();
    private void WireEvents();
    private void TextBox_PreviewKeyDown(object sender, KeyEventArgs e);
    private void OnPasting(object sender, DataObjectPastingEventArgs e);
    private bool IsNumber(string text);
    private void UnWireEvents();
    private void OnPrintPreviewControlLoaded(object sender, RoutedEventArgs e);
    private void OnPrintPreviewControlUnloaded(object sender, RoutedEventArgs e);
    private void Part_TextBox_MouseMove(object sender, MouseEventArgs e);
    private void PartZoomSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs`1<double> e);
    private void Part_TextBox_KeyDown(object sender, KeyEventArgs e);
    private bool IsNumberOrControlKey(Key inKey);
    private void ShowInvalidBorderandToolTip(TextBox textBox);
    private void ClearInvalidBorderandToolTip(TextBox textBox);
    private void OnPartTextBoxLostFocus(object sender, RoutedEventArgs e);
    private void OnZoomInClicked(object obj, RoutedEventArgs routedEventArgs);
    private void OnZoomOutClicked(object obj, RoutedEventArgs routedEventArgs);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
public class Syncfusion.Windows.Shared.Printing.PrintPreviewAreaControl : Control {
    private int totalPages;
    private bool isdisposed;
    private PrintManager printManager;
    private bool isPageIndexSetFromOverride;
    internal PrintPreviewPanel PartPrintWindowPanel;
    public static DependencyProperty ZoomFactorProperty;
    public static DependencyProperty PageIndexProperty;
    private ICommand firstCommand;
    private ICommand previousCommand;
    private ICommand nextCommand;
    private ICommand lastCommand;
    private PropertyChangedEventHandler PropertyChanged;
    public int TotalPages { get; internal set; }
    public PrintManager PrintManager { get; public set; }
    public double ZoomFactor { get; public set; }
    public int PageIndex { get; public set; }
    public ICommand FirstCommand { get; }
    public ICommand PreviousCommand { get; }
    public ICommand NextCommand { get; }
    public ICommand LastCommand { get; }
    private static PrintPreviewAreaControl();
    public int get_TotalPages();
    internal void set_TotalPages(int value);
    public PrintManager get_PrintManager();
    public void set_PrintManager(PrintManager value);
    public double get_ZoomFactor();
    public void set_ZoomFactor(double value);
    private static void OnZoomFactorDependencyPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_PageIndex();
    public void set_PageIndex(int value);
    private static void OnPageIndexChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void UpdateZoomFactor();
    internal void OnZoomFactorChanged(double value);
    public virtual void OnApplyTemplate();
    private void OnPrintPreviewControlLoaded(object sender, RoutedEventArgs e);
    public ICommand get_FirstCommand();
    private void OnFirstCommandClicked(object obj);
    public ICommand get_PreviousCommand();
    private void OnPreviousCommandClicked(object obj);
    public ICommand get_NextCommand();
    private void OnNextCommandClicked(object obj);
    public ICommand get_LastCommand();
    private void OnLastCommandClicked(object obj);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void OnPropertyChanged(string propertyName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__0(int index);
    [CompilerGeneratedAttribute]
private void <OnApplyTemplate>b__1();
    [CompilerGeneratedAttribute]
private bool <get_FirstCommand>b__2(object o);
    [CompilerGeneratedAttribute]
private bool <get_PreviousCommand>b__3(object o);
    [CompilerGeneratedAttribute]
private bool <get_NextCommand>b__4(object o);
    [CompilerGeneratedAttribute]
private bool <get_LastCommand>b__5(object o);
}
public class Syncfusion.Windows.Shared.Printing.PrintPreviewPanel : Panel {
    private static double LineSize;
    private static double WheelSize;
    private double yPosition;
    private double xPosition;
    private int previousPageIndex;
    private PrintManager printManager;
    internal Action`1<int> SetPageIndex;
    internal Action InValidateParent;
    private Size InfiniteSize;
    private Size _Extent;
    private Size _Viewport;
    private Point _Offset;
    private ScrollViewer _ScrollOwner;
    private bool _CanVerticallyScroll;
    private bool _CanHorizontallyScroll;
    [CompilerGeneratedAttribute]
private PrintPageControl <Child>k__BackingField;
    internal PrintPageControl Child { get; internal set; }
    public bool CanHorizontallyScroll { get; public set; }
    public bool CanVerticallyScroll { get; public set; }
    public double ExtentHeight { get; }
    public double ExtentWidth { get; }
    public double HorizontalOffset { get; }
    public double VerticalOffset { get; }
    public double ViewportHeight { get; }
    public double ViewportWidth { get; }
    public ScrollViewer ScrollOwner { get; public set; }
    public PrintPreviewPanel(PrintManager printManager);
    [CompilerGeneratedAttribute]
internal PrintPageControl get_Child();
    [CompilerGeneratedAttribute]
internal void set_Child(PrintPageControl value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    internal void SetPrintManager(PrintManager printManager);
    internal void UpdateScrollInfo(Size viewport, Size extent);
    internal void InValidate();
    public sealed virtual bool get_CanHorizontallyScroll();
    public sealed virtual void set_CanHorizontallyScroll(bool value);
    public sealed virtual bool get_CanVerticallyScroll();
    public sealed virtual void set_CanVerticallyScroll(bool value);
    public sealed virtual double get_ExtentHeight();
    public sealed virtual double get_ExtentWidth();
    public sealed virtual double get_HorizontalOffset();
    public sealed virtual double get_VerticalOffset();
    public sealed virtual double get_ViewportHeight();
    public sealed virtual double get_ViewportWidth();
    public sealed virtual ScrollViewer get_ScrollOwner();
    public sealed virtual void set_ScrollOwner(ScrollViewer value);
    public sealed virtual void LineDown();
    public sealed virtual void LineUp();
    public sealed virtual void LineLeft();
    public sealed virtual void LineRight();
    public sealed virtual void MouseWheelDown();
    public sealed virtual void MouseWheelUp();
    public sealed virtual void MouseWheelLeft();
    public sealed virtual void MouseWheelRight();
    public sealed virtual void PageDown();
    public sealed virtual void PageUp();
    public sealed virtual void PageLeft();
    public sealed virtual void PageRight();
    public sealed virtual Rect MakeVisible(Visual visual, Rect rectangle);
    public sealed virtual void SetHorizontalOffset(double offset);
    public sealed virtual void SetVerticalOffset(double offset);
}
public class Syncfusion.Windows.Shared.Printing.PrintQueueNameToVisibilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.Printing.PrintQueueOption : NotificationObject {
    private PrintQueue printQueue;
    private Path imagePath;
    private bool isDefault;
    public PrintQueue PrintQueue { get; public set; }
    public Path ImagePath { get; public set; }
    public bool IsDefault { get; public set; }
    public PrintQueue get_PrintQueue();
    public void set_PrintQueue(PrintQueue value);
    public Path get_ImagePath();
    public void set_ImagePath(Path value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
}
public class Syncfusion.Windows.Shared.Printing.PrintScaleInfo : object {
    [CompilerGeneratedAttribute]
private string <ImagePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScaleName>k__BackingField;
    public string ImagePath { get; public set; }
    public string ScaleName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ImagePath();
    [CompilerGeneratedAttribute]
public void set_ImagePath(string value);
    [CompilerGeneratedAttribute]
public string get_ScaleName();
    [CompilerGeneratedAttribute]
public void set_ScaleName(string value);
}
public class Syncfusion.Windows.Shared.Printing.PrintSettingsBase : object {
    private double printPageHeaderHeight;
    private double printPageFooterHeight;
    private Style printPreviewWindowStyle;
    private double printPageWidth;
    private double printPageHeight;
    private DataTemplate printPageHeaderTemplate;
    private DataTemplate printPageFooterTemplate;
    private Thickness printPageMargin;
    private PrintOrientation printPageOrientation;
    private PropertyChangedEventHandler PropertyChanged;
    public PrintOrientation Orientation { get; public set; }
    public Style PrintPreviewWindowStyle { get; public set; }
    public double PageHeight { get; public set; }
    public double PageWidth { get; public set; }
    public double PageHeaderHeight { get; public set; }
    public double PageFooterHeight { get; public set; }
    public Thickness PageMargin { get; public set; }
    public DataTemplate PageHeaderTemplate { get; public set; }
    public DataTemplate PageFooterTemplate { get; public set; }
    public PrintOrientation get_Orientation();
    public void set_Orientation(PrintOrientation value);
    public Style get_PrintPreviewWindowStyle();
    public void set_PrintPreviewWindowStyle(Style value);
    public double get_PageHeight();
    public void set_PageHeight(double value);
    public double get_PageWidth();
    public void set_PageWidth(double value);
    public double get_PageHeaderHeight();
    public void set_PageHeaderHeight(double value);
    public double get_PageFooterHeight();
    public void set_PageFooterHeight(double value);
    public Thickness get_PageMargin();
    public void set_PageMargin(Thickness value);
    public DataTemplate get_PageHeaderTemplate();
    public void set_PageHeaderTemplate(DataTemplate value);
    public DataTemplate get_PageFooterTemplate();
    public void set_PageFooterTemplate(DataTemplate value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnPropertyChanged(string propertyName);
}
public class Syncfusion.Windows.Shared.ProgressConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetType, object parameter, CultureInfo culture);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Syncfusion.Windows.Shared.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
[CompilerGeneratedAttribute]
internal class Syncfusion.Windows.Shared.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
public static class Syncfusion.Windows.Shared.PropertySupport : object {
    public static string ExtractPropertyName(Expression`1<Func`1<T>> propertyExpression);
}
public class Syncfusion.Windows.Shared.RadiusConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.RadiusToWidthHeightConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.RandomBrushConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo language);
    private Brush GetRandomBrush(Brush brush);
}
public class Syncfusion.Windows.Shared.RECT : ValueType {
    public int left;
    public int top;
    public int right;
    public int bottom;
    public Size Size { get; }
    public RECT(Point lefttop, Point rightbottom);
    public RECT(int left, int top, int right, int bottom);
    public RECT(Rect r);
    public static RECT FromXYWH(int x, int y, int width, int height);
    public Size get_Size();
}
public class Syncfusion.Windows.Shared.ReSizeGripMouseEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MouseButtonState <ButtonState>k__BackingField;
    public MouseButtonState ButtonState { get; internal set; }
    [CompilerGeneratedAttribute]
public MouseButtonState get_ButtonState();
    [CompilerGeneratedAttribute]
internal void set_ButtonState(MouseButtonState value);
}
public class Syncfusion.Windows.Shared.ResizeGripStyle : Label {
}
public enum Syncfusion.Windows.Shared.ResourceKeyState : Enum {
    public int value__;
    public static ResourceKeyState Enabled;
    public static ResourceKeyState Disabled;
}
public class Syncfusion.Windows.Shared.ResourceNameToResourceStringConverter : object {
    protected virtual LocalizationResourceAccessor GetResourceAccessor();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.Resources.ResourceWrapper : object {
    private static string AccessCalendarTextName;
    private static string AccessWatchTextName;
    private static string AccessEmptyDateTextName;
    private static string AccessTodayTextName;
    private static string MinimizeTooltipName;
    private static string MaximizeTooltipName;
    private static string CloseTooltipName;
    private static string RestoreTooltipName;
    private static string TodayLabelName;
    private static string OkLabelName;
    private static string CancelLabelName;
    private static string AccessClockTextName;
    private static string StandardColorsTextName;
    private static string ThemeColorsTextName;
    private static string RecentlyUsedTextName;
    private static string MoreColorsTextName;
    private static string NoColorTextName;
    private static string AutomaticTextName;
    private static string StandardTextName;
    private static string ColorsTextName;
    private static string CustomTextName;
    private static string ColorModelsTextName;
    private static string CancelTextName;
    private static string OKTextName;
    private static string NewTextName;
    private static string CurrentTextName;
    private static string MoreColorsWindowTitleName;
    private static string HueTooltipTextName;
    private static string SaturationTooltipTextName;
    private static string ValueTooltipTextName;
    private static string RedTooltipTextName;
    private static string BlueTooltipTextName;
    private static string GreenTooltipTextName;
    private static string AlphaTooltipTextName;
    private static string SelectAllTextName;
    private static string PortraitOrientationTextName;
    private static string PrintPreviewTextName;
    private static string LandscapeOrientationTextName;
    private static string CustomPageSizeTextName;
    private static string PrintPaperSize;
    private static string WidthTextName;
    private static string HeightTextName;
    private static string NormalTextName;
    private static string LeftTextName;
    private static string RightTextName;
    private static string TopTextName;
    private static string BottomTextName;
    private static string ModerateTextName;
    private static string NarrowTextName;
    private static string WideTextName;
    private static string CustomMarginTextName;
    private static string MarginsText;
    private static string PrintTextName;
    private static string QuickPrintTextName;
    private static string SettingsTextName;
    private static string WeekNumbersName;
    private static string StartPointName;
    private static string EndPointName;
    private static string GradientOriginName;
    private static string CenterName;
    private static string RadiusName;
    private static string LinearGradientName;
    private static string RadialGradientName;
    private static string SolidName;
    private static string HeaderTextName;
    private static string NotInDictionaryTextName;
    private static string SuggestionsTextName;
    private static string IgnoreOnceTextName;
    private static string IgnoreAllTextName;
    private static string AddToDictionaryTextName;
    private static string ChangeTextName;
    private static string ChangeAllTextName;
    private static string CloseTextName;
    [CompilerGeneratedAttribute]
private string <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_PageMargin_Wide>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrintPreview>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuickPrint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_CustomMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Margins>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_PageMargin_Narrow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_PageMargin_Moderate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_PageMargin_Normal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_MorePaperSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_PaperSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_Orientation_Landscape>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Print_Orientation_Portrait>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessCalendarText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessWatchText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessEmptyDateText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessTodayText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimizeTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximizeTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RestoreTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TodayLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OkLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessClockText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThemeColorsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardColorsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecentlyUsedText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreColorsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutomaticText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoColorText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorModelsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OKText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MoreColorsWindowTitleText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HueTooltipText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SaturationTooltipText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueTooltipText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedTooltipText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlueTooltipText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GreenTooltipText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlphaTooltipText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectAll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WeekNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GradientOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Solid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinearGradient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RadialGradient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerHeaderText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerNotInDictionaryText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerSuggestionsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerIgnoreOnceText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerIgnoreAllText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerAddToDictionaryText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerChangeText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerChangeAllText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpellCheckerCloseText>k__BackingField;
    public string Settings { get; public set; }
    public string Print_PageMargin_Wide { get; public set; }
    public string PrintPreview { get; public set; }
    public string QuickPrint { get; public set; }
    public string Print { get; public set; }
    public string Print_CustomMargin { get; public set; }
    public string Margins { get; public set; }
    public string Print_PageMargin_Narrow { get; public set; }
    public string Print_PageMargin_Moderate { get; public set; }
    public string Bottom { get; public set; }
    public string Top { get; public set; }
    public string Right { get; public set; }
    public string Left { get; public set; }
    public string Print_PageMargin_Normal { get; public set; }
    public string Height { get; public set; }
    public string Width { get; public set; }
    public string Print_MorePaperSizes { get; public set; }
    public string Print_PaperSize { get; public set; }
    public string Print_Orientation_Landscape { get; public set; }
    public string Print_Orientation_Portrait { get; public set; }
    public string AccessCalendarText { get; public set; }
    public string AccessWatchText { get; public set; }
    public string AccessEmptyDateText { get; public set; }
    public string AccessTodayText { get; public set; }
    public string MinimizeTooltip { get; public set; }
    public string MaximizeTooltip { get; public set; }
    public string CloseTooltip { get; public set; }
    public string RestoreTooltip { get; public set; }
    public string TodayLabel { get; public set; }
    public string OkLabel { get; public set; }
    public string CancelLabel { get; public set; }
    public string AccessClockText { get; public set; }
    public string ThemeColorsText { get; public set; }
    public string StandardColorsText { get; public set; }
    public string RecentlyUsedText { get; public set; }
    public string MoreColorsText { get; public set; }
    public string AutomaticText { get; public set; }
    public string NoColorText { get; public set; }
    public string StandardText { get; public set; }
    public string ColorsText { get; public set; }
    public string CustomText { get; public set; }
    public string ColorModelsText { get; public set; }
    public string CancelText { get; public set; }
    public string OKText { get; public set; }
    public string NewText { get; public set; }
    public string CurrentText { get; public set; }
    public string MoreColorsWindowTitleText { get; public set; }
    public string HueTooltipText { get; public set; }
    public string SaturationTooltipText { get; public set; }
    public string ValueTooltipText { get; public set; }
    public string RedTooltipText { get; public set; }
    public string BlueTooltipText { get; public set; }
    public string GreenTooltipText { get; public set; }
    public string AlphaTooltipText { get; public set; }
    public string SelectAll { get; public set; }
    public string WeekNumbers { get; public set; }
    public string StartPoint { get; internal set; }
    public string EndPoint { get; internal set; }
    public string GradientOrigin { get; internal set; }
    public string Center { get; internal set; }
    public string Radius { get; internal set; }
    public string Solid { get; internal set; }
    public string LinearGradient { get; internal set; }
    public string RadialGradient { get; internal set; }
    public string SpellCheckerHeaderText { get; public set; }
    public string SpellCheckerNotInDictionaryText { get; public set; }
    public string SpellCheckerSuggestionsText { get; public set; }
    public string SpellCheckerIgnoreOnceText { get; public set; }
    public string SpellCheckerIgnoreAllText { get; public set; }
    public string SpellCheckerAddToDictionaryText { get; public set; }
    public string SpellCheckerChangeText { get; public set; }
    public string SpellCheckerChangeAllText { get; public set; }
    public string SpellCheckerCloseText { get; public set; }
    public static void SetResources(Assembly assembly);
    public static void SetResources(Assembly assembly, string _namespace);
    [CompilerGeneratedAttribute]
public string get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(string value);
    [CompilerGeneratedAttribute]
public string get_Print_PageMargin_Wide();
    [CompilerGeneratedAttribute]
public void set_Print_PageMargin_Wide(string value);
    [CompilerGeneratedAttribute]
public string get_PrintPreview();
    [CompilerGeneratedAttribute]
public void set_PrintPreview(string value);
    [CompilerGeneratedAttribute]
public string get_QuickPrint();
    [CompilerGeneratedAttribute]
public void set_QuickPrint(string value);
    [CompilerGeneratedAttribute]
public string get_Print();
    [CompilerGeneratedAttribute]
public void set_Print(string value);
    [CompilerGeneratedAttribute]
public string get_Print_CustomMargin();
    [CompilerGeneratedAttribute]
public void set_Print_CustomMargin(string value);
    [CompilerGeneratedAttribute]
public string get_Margins();
    [CompilerGeneratedAttribute]
public void set_Margins(string value);
    [CompilerGeneratedAttribute]
public string get_Print_PageMargin_Narrow();
    [CompilerGeneratedAttribute]
public void set_Print_PageMargin_Narrow(string value);
    [CompilerGeneratedAttribute]
public string get_Print_PageMargin_Moderate();
    [CompilerGeneratedAttribute]
public void set_Print_PageMargin_Moderate(string value);
    [CompilerGeneratedAttribute]
public string get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(string value);
    [CompilerGeneratedAttribute]
public string get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(string value);
    [CompilerGeneratedAttribute]
public string get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(string value);
    [CompilerGeneratedAttribute]
public string get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(string value);
    [CompilerGeneratedAttribute]
public string get_Print_PageMargin_Normal();
    [CompilerGeneratedAttribute]
public void set_Print_PageMargin_Normal(string value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public string get_Print_MorePaperSizes();
    [CompilerGeneratedAttribute]
public void set_Print_MorePaperSizes(string value);
    [CompilerGeneratedAttribute]
public string get_Print_PaperSize();
    [CompilerGeneratedAttribute]
public void set_Print_PaperSize(string value);
    [CompilerGeneratedAttribute]
public string get_Print_Orientation_Landscape();
    [CompilerGeneratedAttribute]
public void set_Print_Orientation_Landscape(string value);
    [CompilerGeneratedAttribute]
public string get_Print_Orientation_Portrait();
    [CompilerGeneratedAttribute]
public void set_Print_Orientation_Portrait(string value);
    [CompilerGeneratedAttribute]
public string get_AccessCalendarText();
    [CompilerGeneratedAttribute]
public void set_AccessCalendarText(string value);
    [CompilerGeneratedAttribute]
public string get_AccessWatchText();
    [CompilerGeneratedAttribute]
public void set_AccessWatchText(string value);
    [CompilerGeneratedAttribute]
public string get_AccessEmptyDateText();
    [CompilerGeneratedAttribute]
public void set_AccessEmptyDateText(string value);
    [CompilerGeneratedAttribute]
public string get_AccessTodayText();
    [CompilerGeneratedAttribute]
public void set_AccessTodayText(string value);
    [CompilerGeneratedAttribute]
public string get_MinimizeTooltip();
    [CompilerGeneratedAttribute]
public void set_MinimizeTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_MaximizeTooltip();
    [CompilerGeneratedAttribute]
public void set_MaximizeTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_CloseTooltip();
    [CompilerGeneratedAttribute]
public void set_CloseTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_RestoreTooltip();
    [CompilerGeneratedAttribute]
public void set_RestoreTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_TodayLabel();
    [CompilerGeneratedAttribute]
public void set_TodayLabel(string value);
    [CompilerGeneratedAttribute]
public string get_OkLabel();
    [CompilerGeneratedAttribute]
public void set_OkLabel(string value);
    [CompilerGeneratedAttribute]
public string get_CancelLabel();
    [CompilerGeneratedAttribute]
public void set_CancelLabel(string value);
    [CompilerGeneratedAttribute]
public string get_AccessClockText();
    [CompilerGeneratedAttribute]
public void set_AccessClockText(string value);
    [CompilerGeneratedAttribute]
public string get_ThemeColorsText();
    [CompilerGeneratedAttribute]
public void set_ThemeColorsText(string value);
    [CompilerGeneratedAttribute]
public string get_StandardColorsText();
    [CompilerGeneratedAttribute]
public void set_StandardColorsText(string value);
    [CompilerGeneratedAttribute]
public string get_RecentlyUsedText();
    [CompilerGeneratedAttribute]
public void set_RecentlyUsedText(string value);
    [CompilerGeneratedAttribute]
public string get_MoreColorsText();
    [CompilerGeneratedAttribute]
public void set_MoreColorsText(string value);
    [CompilerGeneratedAttribute]
public string get_AutomaticText();
    [CompilerGeneratedAttribute]
public void set_AutomaticText(string value);
    [CompilerGeneratedAttribute]
public string get_NoColorText();
    [CompilerGeneratedAttribute]
public void set_NoColorText(string value);
    [CompilerGeneratedAttribute]
public string get_StandardText();
    [CompilerGeneratedAttribute]
public void set_StandardText(string value);
    [CompilerGeneratedAttribute]
public string get_ColorsText();
    [CompilerGeneratedAttribute]
public void set_ColorsText(string value);
    [CompilerGeneratedAttribute]
public string get_CustomText();
    [CompilerGeneratedAttribute]
public void set_CustomText(string value);
    [CompilerGeneratedAttribute]
public string get_ColorModelsText();
    [CompilerGeneratedAttribute]
public void set_ColorModelsText(string value);
    [CompilerGeneratedAttribute]
public string get_CancelText();
    [CompilerGeneratedAttribute]
public void set_CancelText(string value);
    [CompilerGeneratedAttribute]
public string get_OKText();
    [CompilerGeneratedAttribute]
public void set_OKText(string value);
    [CompilerGeneratedAttribute]
public string get_NewText();
    [CompilerGeneratedAttribute]
public void set_NewText(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentText();
    [CompilerGeneratedAttribute]
public void set_CurrentText(string value);
    [CompilerGeneratedAttribute]
public string get_MoreColorsWindowTitleText();
    [CompilerGeneratedAttribute]
public void set_MoreColorsWindowTitleText(string value);
    [CompilerGeneratedAttribute]
public string get_HueTooltipText();
    [CompilerGeneratedAttribute]
public void set_HueTooltipText(string value);
    [CompilerGeneratedAttribute]
public string get_SaturationTooltipText();
    [CompilerGeneratedAttribute]
public void set_SaturationTooltipText(string value);
    [CompilerGeneratedAttribute]
public string get_ValueTooltipText();
    [CompilerGeneratedAttribute]
public void set_ValueTooltipText(string value);
    [CompilerGeneratedAttribute]
public string get_RedTooltipText();
    [CompilerGeneratedAttribute]
public void set_RedTooltipText(string value);
    [CompilerGeneratedAttribute]
public string get_BlueTooltipText();
    [CompilerGeneratedAttribute]
public void set_BlueTooltipText(string value);
    [CompilerGeneratedAttribute]
public string get_GreenTooltipText();
    [CompilerGeneratedAttribute]
public void set_GreenTooltipText(string value);
    [CompilerGeneratedAttribute]
public string get_AlphaTooltipText();
    [CompilerGeneratedAttribute]
public void set_AlphaTooltipText(string value);
    [CompilerGeneratedAttribute]
public string get_SelectAll();
    [CompilerGeneratedAttribute]
public void set_SelectAll(string value);
    [CompilerGeneratedAttribute]
public string get_WeekNumbers();
    [CompilerGeneratedAttribute]
public void set_WeekNumbers(string value);
    [CompilerGeneratedAttribute]
public string get_StartPoint();
    [CompilerGeneratedAttribute]
internal void set_StartPoint(string value);
    [CompilerGeneratedAttribute]
public string get_EndPoint();
    [CompilerGeneratedAttribute]
internal void set_EndPoint(string value);
    [CompilerGeneratedAttribute]
public string get_GradientOrigin();
    [CompilerGeneratedAttribute]
internal void set_GradientOrigin(string value);
    [CompilerGeneratedAttribute]
public string get_Center();
    [CompilerGeneratedAttribute]
internal void set_Center(string value);
    [CompilerGeneratedAttribute]
public string get_Radius();
    [CompilerGeneratedAttribute]
internal void set_Radius(string value);
    [CompilerGeneratedAttribute]
public string get_Solid();
    [CompilerGeneratedAttribute]
internal void set_Solid(string value);
    [CompilerGeneratedAttribute]
public string get_LinearGradient();
    [CompilerGeneratedAttribute]
internal void set_LinearGradient(string value);
    [CompilerGeneratedAttribute]
public string get_RadialGradient();
    [CompilerGeneratedAttribute]
internal void set_RadialGradient(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerHeaderText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerHeaderText(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerNotInDictionaryText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerNotInDictionaryText(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerSuggestionsText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerSuggestionsText(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerIgnoreOnceText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerIgnoreOnceText(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerIgnoreAllText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerIgnoreAllText(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerAddToDictionaryText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerAddToDictionaryText(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerChangeText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerChangeText(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerChangeAllText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerChangeAllText(string value);
    [CompilerGeneratedAttribute]
public string get_SpellCheckerCloseText();
    [CompilerGeneratedAttribute]
public void set_SpellCheckerCloseText(string value);
}
public class Syncfusion.Windows.Shared.Resources.SR : object {
    public static void ReleaseResources();
    public static string GetString(CultureInfo culture, string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Object[] args);
    public static string GetString(CultureInfo culture, string name);
    public static object GetObject(CultureInfo culture, string name);
    public static object GetObject(string name);
    public static bool GetBoolean(CultureInfo culture, string name);
    public static bool GetBoolean(string name);
    public static byte GetByte(CultureInfo culture, string name);
    public static byte GetByte(string name);
    public static char GetChar(CultureInfo culture, string name);
    public static char GetChar(string name);
    public static double GetDouble(CultureInfo culture, string name);
    public static double GetDouble(string name);
    public static float GetFloat(CultureInfo culture, string name);
    public static float GetFloat(string name);
    public static int GetInt(string name);
    public static int GetInt(CultureInfo culture, string name);
    public static long GetLong(string name);
    public static long GetLong(CultureInfo culture, string name);
    public static short GetShort(CultureInfo culture, string name);
    public static short GetShort(string name);
    public static void SetDefaultNamespace(string nameSpace);
    public static void SetResources(Assembly assembly, string _namespace);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Syncfusion.Windows.Shared.Resources.Syncfusion_Shared_Wpf : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessCalendarText { get; }
    internal static string AccessClockText { get; }
    internal static string AccessEmptyDateText { get; }
    internal static string AccessTodayText { get; }
    internal static string AccessWatchText { get; }
    internal static string AlphaTooltipText { get; }
    internal static string AutomaticText { get; }
    internal static string BlueTooltipText { get; }
    internal static string CancelText { get; }
    internal static string CloseTooltip { get; }
    internal static string ColorModelsText { get; }
    internal static string ColorsText { get; }
    internal static string CurrentText { get; }
    internal static string CustomText { get; }
    internal static string GreenTooltipText { get; }
    internal static string HueTooltipText { get; }
    internal static string MaximizeTooltip { get; }
    internal static string MinimizeTooltip { get; }
    internal static string MoreColorsText { get; }
    internal static string MoreColorsWindowTitleText { get; }
    internal static string NewText { get; }
    internal static string OKText { get; }
    internal static string PropertySupport_ExpressionNotProperty_Exception { get; }
    internal static string PropertySupport_NotMemberAccessExpression_Exception { get; }
    internal static string PropertySupport_StaticExpression_Exception { get; }
    internal static string RecentlyUsedText { get; }
    internal static string RedTooltipText { get; }
    internal static string RestoreTooltip { get; }
    internal static string SaturationTooltipText { get; }
    internal static string StandardColorsText { get; }
    internal static string StandardText { get; }
    internal static string ThemeColorsText { get; }
    internal static string TodayLabel { get; }
    internal static string ValueTooltipText { get; }
    internal static string SpellCheckerNotInDictionaryText { get; }
    internal static string SpellCheckerSuggestionsText { get; }
    internal static string SpellCheckerIgnoreOnceText { get; }
    internal static string SpellCheckerIgnoreAllText { get; }
    internal static string SpellCheckerAddToDictionaryText { get; }
    internal static string SpellCheckerChangeText { get; }
    internal static string SpellCheckerChangeAllText { get; }
    internal static string SpellCheckerCloseText { get; }
    internal static string SpellCheckerHeaderText { get; }
    internal static string WeekNumbers { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessCalendarText();
    internal static string get_AccessClockText();
    internal static string get_AccessEmptyDateText();
    internal static string get_AccessTodayText();
    internal static string get_AccessWatchText();
    internal static string get_AlphaTooltipText();
    internal static string get_AutomaticText();
    internal static string get_BlueTooltipText();
    internal static string get_CancelText();
    internal static string get_CloseTooltip();
    internal static string get_ColorModelsText();
    internal static string get_ColorsText();
    internal static string get_CurrentText();
    internal static string get_CustomText();
    internal static string get_GreenTooltipText();
    internal static string get_HueTooltipText();
    internal static string get_MaximizeTooltip();
    internal static string get_MinimizeTooltip();
    internal static string get_MoreColorsText();
    internal static string get_MoreColorsWindowTitleText();
    internal static string get_NewText();
    internal static string get_OKText();
    internal static string get_PropertySupport_ExpressionNotProperty_Exception();
    internal static string get_PropertySupport_NotMemberAccessExpression_Exception();
    internal static string get_PropertySupport_StaticExpression_Exception();
    internal static string get_RecentlyUsedText();
    internal static string get_RedTooltipText();
    internal static string get_RestoreTooltip();
    internal static string get_SaturationTooltipText();
    internal static string get_StandardColorsText();
    internal static string get_StandardText();
    internal static string get_ThemeColorsText();
    internal static string get_TodayLabel();
    internal static string get_ValueTooltipText();
    internal static string get_SpellCheckerNotInDictionaryText();
    internal static string get_SpellCheckerSuggestionsText();
    internal static string get_SpellCheckerIgnoreOnceText();
    internal static string get_SpellCheckerIgnoreAllText();
    internal static string get_SpellCheckerAddToDictionaryText();
    internal static string get_SpellCheckerChangeText();
    internal static string get_SpellCheckerChangeAllText();
    internal static string get_SpellCheckerCloseText();
    internal static string get_SpellCheckerHeaderText();
    internal static string get_WeekNumbers();
}
public enum Syncfusion.Windows.Shared.Role : Enum {
    public int value__;
    public static Role SubmenuHeader;
    public static Role SubmenuItem;
    public static Role TopLevelHeader;
    public static Role TopLevelItem;
}
public enum Syncfusion.Windows.Shared.RunMode : Enum {
    public int value__;
    public static RunMode TypeAndScroll;
    public static RunMode ScrollOnly;
    public static RunMode ReadOnly;
}
public class Syncfusion.Windows.Shared.ScreenUtils : object {
    public static Rect FixByScreenBounds(Rect rectWindow);
    public static FrameworkElement GetElementFromPoint(ItemsControl parentItemsControl, Point point);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ScRGBColorExtension : MarkupExtension {
    private static RGBToStringConverter m_converter;
    private string m_key;
    private static ScRGBColorExtension();
    public ScRGBColorExtension(string key);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
internal class Syncfusion.Windows.Shared.ScrollBarVisibilityToVisibilityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal enum Syncfusion.Windows.Shared.ScrollParamether : Enum {
    public int value__;
    public static ScrollParamether HorizontalOffset;
    public static ScrollParamether VerticalOffset;
    public static ScrollParamether ViewportWidth;
    public static ScrollParamether ViewportHeight;
    public static ScrollParamether ExtentWidth;
    public static ScrollParamether ExtentHeight;
}
[DesignTimeVisibleAttribute("False")]
[ValueConversionAttribute("System.DateTime", "System.Int32")]
public class Syncfusion.Windows.Shared.SecondsConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Shared.SelectionRangeMode : Enum {
    public int value__;
    public static SelectionRangeMode WholeColumn;
    public static SelectionRangeMode CurrentMonth;
}
[FlagsAttribute]
internal enum Syncfusion.Windows.Shared.SetWindowPosParams : Enum {
    public int value__;
    public static SetWindowPosParams SWP_FRAMECHANGED;
    public static SetWindowPosParams SWP_NOMOVE;
    public static SetWindowPosParams SWP_NOSIZE;
    public static SetWindowPosParams SWP_NOZORDER;
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static class Syncfusion.Windows.Shared.SfSkinManagerExtension : object {
    private static Type sfskinmanagertype;
    private static MethodInfo getThemeMethod;
    private static MethodInfo setThemeMethod;
    private static MethodInfo getThemeNameMethod;
    private static MethodInfo getBaseThemeNameMethod;
    private static MethodInfo getThemeDesignMethod;
    private static MethodInfo setSizeModeMethod;
    private static MethodInfo getSizeModeMethod;
    private static MethodInfo getShowAcrylicBackgroundMethod;
    public static string GetThemeName(DependencyObject obj);
    public static string GetBaseThemeName(DependencyObject obj);
    public static string GetThemeDesign(DependencyObject obj);
    public static void SetTheme(DependencyObject obj, object value);
    public static void SetTheme(DependencyObject sourceobject, DependencyObject childobject);
    public static string GetSizeMode(DependencyObject obj);
    public static bool GetShowAcrylicBackground(DependencyObject obj);
    public static void SetSizeMode(DependencyObject obj, object value);
    public static void SetSizeMode(DependencyObject sourceobject, DependencyObject childobject);
}
public class Syncfusion.Windows.Shared.SharedLocalizationResourceAccessor : LocalizationResourceAccessor {
    public static SharedLocalizationResourceAccessor Instance;
    private static SharedLocalizationResourceAccessor();
    protected virtual Assembly GetControlAssembly();
    protected virtual string GetControlAssemblyDefaultNamespace();
    protected virtual ResourceManager GetDefaultResourceManager();
}
public class Syncfusion.Windows.Shared.SharedLocalizationResourceExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    public string ResourceName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
public void set_ResourceName(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public enum Syncfusion.Windows.Shared.ShiftStatus : Enum {
    public int value__;
    public static ShiftStatus None;
    public static ShiftStatus Uppercase;
    public static ShiftStatus Lowercase;
}
public enum Syncfusion.Windows.Shared.ShowWindowOptions : Enum {
    public int value__;
    public static ShowWindowOptions HIDE;
    public static ShowWindowOptions SHOWNORMAL;
    public static ShowWindowOptions NORMAL;
    public static ShowWindowOptions SHOWMINIMIZED;
    public static ShowWindowOptions SHOWMAXIMIZED;
    public static ShowWindowOptions MAXIMIZE;
    public static ShowWindowOptions SHOWNOACTIVATE;
    public static ShowWindowOptions SHOW;
    public static ShowWindowOptions MINIMIZE;
    public static ShowWindowOptions SHOWMINNOACTIVE;
    public static ShowWindowOptions SHOWNA;
    public static ShowWindowOptions RESTORE;
    public static ShowWindowOptions SHOWDEFAULT;
    public static ShowWindowOptions FORCEMINIMIZE;
}
public enum Syncfusion.Windows.Shared.Skin : Enum {
    public int value__;
    public static Skin Default;
    public static Skin Blend;
    public static Skin Office2003;
    public static Skin Office2007Blue;
    public static Skin Office2007Black;
    public static Skin Office2007Silver;
    public static Skin SyncOrange;
    public static Skin ShinyRed;
    public static Skin ShinyBlue;
    public static Skin Office2010Blue;
    public static Skin Office2010Black;
    public static Skin Office2010Silver;
    public static Skin VS2010;
    public static Skin Metro;
    public static Skin Transparent;
    public static Skin Office2013;
    public static Skin Windows8;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.SkinColorScheme : SkinStorage {
    public Color sskinColor;
    private static object value;
    public SkinColorScheme(Color skinColor);
    public SkinColorScheme(int skinColor);
    private static GradientStop clone(GradientStop parent, GradientStop child);
    public static ResourceDictionary ApplyCustomColorScheme(ResourceDictionary templatedictionary, Color skinColor);
    private static ResourceDictionary MergeColors(ResourceDictionary dictionary, Color skinColor);
    internal Color GetColor(int rgb);
    internal Color GetColor(Color baseColor);
    internal static Color GetColor(Color baseColor, Color skinColor);
    internal static byte MergeChannels(int baseChannel, int skinChannel);
    internal static Color MergeChannels(Color color, Color skinColor);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.SkinManager : DependencyObject {
    public static DependencyProperty ActiveColorSchemeProperty;
    private static SkinManager();
    public static void RemoveDictionaryIfExist(FrameworkElement element, ResourceDictionary dictionary);
    internal static SkinTypeAttribute GetSkinAttribute(FrameworkElement element, string currentskin);
    private static void OnActiveColorSchemeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void win_Loaded(object sender, RoutedEventArgs e);
    [TypeConverterAttribute("System.Windows.Media.BrushConverter")]
public static SolidColorBrush GetActiveColorScheme(DependencyObject obj);
    private static void ApplyActiveColorToMSControls(DependencyObject obj, SolidColorBrush value);
    public static void SetActiveColorScheme(DependencyObject obj, SolidColorBrush value);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.SkinStorage : DependencyObject {
    private static string DefaultName;
    private static Brush metrobrush;
    private static Brush metrohoverbrush;
    private static Brush metroforegroundbrush;
    private static Brush metroborderbrush;
    private static Brush metrofocusedbrush;
    private static Brush metrobackgroundbrush;
    private static Brush metropanelbackgroundbrush;
    private static Brush metrohighlightedforegroundbrush;
    private static FontFamily metrofontfamily;
    public static DependencyProperty MetroBrushProperty;
    public static DependencyProperty MetroForegroundBrushProperty;
    public static DependencyProperty MetroHoverBrushProperty;
    public static DependencyProperty MetroBorderBrushProperty;
    public static DependencyProperty MetroFocusedBorderBrushProperty;
    public static DependencyProperty MetroBackgroundBrushProperty;
    public static DependencyProperty MetroFontFamilyProperty;
    public static DependencyProperty MetroPanelBackgroundBrushProperty;
    public static DependencyProperty MetroHighlightedForegroundBrushProperty;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static string ClassicThemeXAMLPath;
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public static string SharedThemeXAMLPath;
    private static bool IsUserControlPresent;
    private static bool IsPageControlPresent;
    private static ObservableCollection`1<FrameworkElement> Root;
    private static bool IsSkinNotChanged;
    private static bool windowflag;
    internal static DependencyProperty MergedDictionaryPathProperty;
    public static DependencyProperty EnableOptimizationProperty;
    public static DependencyProperty VisualStyleProperty;
    public static DependencyProperty OverrideVisualStyleProperty;
    internal static DependencyProperty IsMSDictionaryMergedProperty;
    public static DependencyProperty EnableTouchProperty;
    internal static DependencyProperty IsDictionaryMergedProperty;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
private static bool isThemeChangeNotNeeded;
    public static bool IsThemeChangeNotNeeded { get; public set; }
    private static SkinStorage();
    public static Brush GetMetroBrush(DependencyObject obj);
    public static void SetMetroBrush(DependencyObject obj, Brush value);
    public static Brush GetMetroForegroundBrush(DependencyObject obj);
    public static void SetMetroForegroundBrush(DependencyObject obj, Brush value);
    public static Brush GetMetroHoverBrush(DependencyObject obj);
    public static void SetMetroHoverBrush(DependencyObject obj, Brush value);
    public static Brush GetMetroBorderBrush(DependencyObject obj);
    public static void SetMetroBorderBrush(DependencyObject obj, Brush value);
    public static Brush GetMetroFocusedBorderBrush(DependencyObject obj);
    public static void SetMetroFocusedBorderBrush(DependencyObject obj, Brush value);
    public static Brush GetMetroBackgroundBrush(DependencyObject obj);
    public static void SetMetroBackgroundBrush(DependencyObject obj, Brush value);
    public static Brush GetMetroPanelBackgroundBrush(DependencyObject obj);
    public static void SetMetroPanelBackgroundBrush(DependencyObject obj, Brush value);
    public static Brush GetMetroHighlightedForegroundBrush(DependencyObject obj);
    public static void SetMetroHighlightedForegroundBrush(DependencyObject obj, Brush value);
    public static FontFamily GetMetroFontFamily(DependencyObject obj);
    public static void SetMetroFontFamily(DependencyObject obj, FontFamily value);
    public static void MergeMetroBrush(ResourceDictionary metroskindictionary, DependencyObject obj);
    private static void MergeMetroBrushDictionaries(FrameworkElement element, ResourceDictionary dictionary);
    private static void ApplyMetroBrush(DependencyObject obj);
    private static void OnMetroBrushChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void UpdateMetroBrush(FrameworkElement element, Collection`1<ResourceDictionary> MergedDictionaries, int count);
    private static void element_Loaded1(object sender, RoutedEventArgs e);
    private static void RemoveDictionaryIfExist(FrameworkElement element, ResourceDictionary dictionary);
    public static string GetVisualStyle(DependencyObject obj);
    public static bool GetOverrideVisualStyle(DependencyObject obj);
    public static void SetVisualStyle(DependencyObject obj, string value);
    public static void SetOverrideVisualStyle(DependencyObject obj, bool value);
    internal static void SetMergedDictionaryPath(DependencyObject obj, string value);
    internal static ObservableCollection`1<string> GetMergedDictionaryPath(DependencyObject obj);
    public static bool GetEnableOptimization(DependencyObject obj);
    public static void SetEnableOptimization(DependencyObject obj, bool value);
    public static bool GetEnableTouch(DependencyObject obj);
    public static void SetEnableTouch(DependencyObject obj, bool value);
    internal static bool GetIsDictionaryMerged(DependencyObject obj);
    internal static void SetIsDictionaryMerged(DependencyObject obj, bool value);
    internal static bool GetIsMSDictionaryMerged(DependencyObject obj);
    internal static void SetIsMSDictionaryMerged(DependencyObject obj, bool value);
    public static bool get_IsThemeChangeNotNeeded();
    public static void set_IsThemeChangeNotNeeded(bool value);
    private static void OnEnableOptimizationChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void OnVisualStyleChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void OnOverrideVisualStyleChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static SkinTypeAttribute GetSkinAttribute(FrameworkElement element, string currentskin);
    private static SkinTypeAttribute GetSkinAttribute(Control element, string currentskin);
    private static void ApplySkin(DependencyObject obj, string style);
    private static bool IsMSDictionaryMrgedInParent(FrameworkElement fe);
    private static void OuterControlIterate(FrameworkElement fe, string style);
    private static void ControlIterate(IEnumerable`1<Visual> fe, string style);
    private static bool IsApply(FrameworkElement frameSkin);
    private static ResourceDictionary MergeDic(ResourceDictionary rd, string skin);
    private static void ApplyOptimization(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void element_Loaded(object sender, RoutedEventArgs e);
    private static void ResetResources(DependencyObject obj, string appliedskin);
    private static bool ResolveClassicAssemblyReference();
    internal static ResourceDictionary GetMSControlDictionary(string skin);
    private static void MergeDictionaryIntoElement(FrameworkElement element, ResourceDictionary Dict);
    private static void ClearDictionary(FrameworkElement element);
    private static void element_Unloaded(object sender, RoutedEventArgs e);
}
[ExtensionAttribute]
internal static class Syncfusion.Windows.Shared.SkinStorageExtension : object {
    private static ObservableCollection`1<string> MergedDictionaryPathCollection;
    [ExtensionAttribute]
internal static void AddIntoMergedDictionaryPath(FrameworkElement element, string path);
    [ExtensionAttribute]
internal static int IndexOfMergedDictionaryPath(FrameworkElement element, string path);
    [ExtensionAttribute]
internal static void RemoveFromMergedDictionaryPath(FrameworkElement element, string path);
    [ExtensionAttribute]
internal static bool IsContainsInMergedDictionaryPath(FrameworkElement element, string path);
    [ExtensionAttribute]
internal static ObservableCollection`1<string> GetMergedDictionaryPath(FrameworkElement element);
    [ExtensionAttribute]
internal static void ClearMergedDictionaryPath(FrameworkElement element);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Shared.SkinTypeAttribute : Attribute {
    private Skin skinVisualStyle;
    private string xamlResource;
    private Type type;
    public Skin SkinVisualStyle { get; public set; }
    public string XamlResource { get; public set; }
    public Type Type { get; public set; }
    public Skin get_SkinVisualStyle();
    public void set_SkinVisualStyle(Skin value);
    public string get_XamlResource();
    public void set_XamlResource(string value);
    public Type get_Type();
    public void set_Type(Type value);
}
public class Syncfusion.Windows.Shared.SpecialDate : object {
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <CellTemplate>k__BackingField;
    public DateTime Date { get; public set; }
    public DataTemplate CellTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public DataTemplate get_CellTemplate();
    [CompilerGeneratedAttribute]
public void set_CellTemplate(DataTemplate value);
    public sealed virtual void Dispose();
}
[ContentPropertyAttribute("SpecialDates")]
public class Syncfusion.Windows.Shared.SpecialDatesCollection : ObservableCollection`1<SpecialDate> {
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
}
public class Syncfusion.Windows.Shared.SpinCommand : DelegateCommand {
    public SpinCommand(Action`1<object> executeAction, Predicate`1<object> canExecute);
    public SpinCommand(Action`1<object> executeAction);
    public void UpdateCanExecute();
}
public enum Syncfusion.Windows.Shared.StorageFormat : Enum {
    public int value__;
    public static StorageFormat Xml;
    public static StorageFormat Binary;
    public static StorageFormat Registry;
}
[ExtensionAttribute]
public static class Syncfusion.Windows.Shared.StringExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
public class Syncfusion.Windows.Shared.StringToImageTypeConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Syncfusion.Windows.Shared.StringToTooltipTypeConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Syncfusion.Windows.Shared.StringToVisibility : StringVisibilityConverter {
}
public enum Syncfusion.Windows.Shared.StringValidation : Enum {
    public int value__;
    public static StringValidation OnKeyPress;
    public static StringValidation OnLostFocus;
}
public class Syncfusion.Windows.Shared.StringValidationCompletedEventHandler : MulticastDelegate {
    public StringValidationCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StringValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StringValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.Windows.Shared.StringValidationEventArgs : EventArgs {
    private bool m_bCancel;
    private bool m_bIsValidInput;
    private string m_message;
    private string m_validationString;
    public bool Cancel { get; public set; }
    public bool IsValidInput { get; }
    public string Message { get; }
    public string ValidationString { get; }
    public StringValidationEventArgs(bool bCancel, bool bIsValidInput, string message, string validationString);
    public StringValidationEventArgs(bool bIsValidInput, string message, string validationString);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public bool get_IsValidInput();
    public string get_Message();
    public string get_ValidationString();
}
public class Syncfusion.Windows.Shared.StringVisibilityConverter : EmptyStringToObjectConverter {
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.StyleItem : object {
    private DateTime m_date;
    private Style m_style;
    public DateTime Date { get; public set; }
    public Style Style { get; public set; }
    public StyleItem(DateTime date, Style style);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public Style get_Style();
    public void set_Style(Style value);
}
[DesignTimeVisibleAttribute("False")]
[DefaultMemberAttribute("Item")]
public class Syncfusion.Windows.Shared.StylesDictionary : Hashtable {
    private NotifyCollectionChangedEventHandler CollectionChanged;
    public object Item { get; public set; }
    public virtual void Add(object key, object value);
    public virtual void Remove(object key);
    public virtual void Clear();
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private void NotifyCollectionChanged(NotifyCollectionChangedAction action, StyleItem item);
}
public enum Syncfusion.Windows.Shared.SystemCommands : Enum {
    public int value__;
    public static SystemCommands SIZE;
    public static SystemCommands MOVE;
    public static SystemCommands MINIMIZE;
    public static SystemCommands MAXIMIZE;
    public static SystemCommands NEXTWINDOW;
    public static SystemCommands PREVWINDOW;
    public static SystemCommands CLOSE;
    public static SystemCommands VSCROLL;
    public static SystemCommands HSCROLL;
    public static SystemCommands MOUSEMENU;
    public static SystemCommands KEYMENU;
    public static SystemCommands ARRANGE;
    public static SystemCommands RESTORE;
    public static SystemCommands TASKLIST;
    public static SystemCommands SCREENSAVE;
    public static SystemCommands HOTKEY;
    public static SystemCommands DEFAULT;
    public static SystemCommands MONITORPOWER;
    public static SystemCommands CONTEXTHELP;
    public static SystemCommands SEPARATOR;
    public static SystemCommands F_ISSECURE;
    public static SystemCommands ICON;
    public static SystemCommands ZOOM;
}
[CLSCompliantAttribute("False")]
[FlagsAttribute]
public enum Syncfusion.Windows.Shared.SystemMenuItemBehavior : Enum {
    public UInt32 value__;
    public static SystemMenuItemBehavior DOES_NOT_EXIST;
    public static SystemMenuItemBehavior ENABLED;
    public static SystemMenuItemBehavior BYCOMMAND;
    public static SystemMenuItemBehavior GRAYED;
    public static SystemMenuItemBehavior DISABLED;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.TemplatedAdornerBase : Adorner {
    private TemplatedAdornerInternalControl m_innerControl;
    private double m_offsetX;
    private double m_offsetY;
    private PropertyChangedCallback OffsetXChanged;
    private PropertyChangedCallback OffsetYChanged;
    public static DependencyProperty OffsetXProperty;
    public static DependencyProperty OffsetYProperty;
    protected TemplatedAdornerInternalControl InnerControl { get; }
    public Size DesiredSizeInternal { get; }
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    protected IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    private static TemplatedAdornerBase();
    public TemplatedAdornerBase(UIElement adornedElement);
    protected TemplatedAdornerInternalControl get_InnerControl();
    public Size get_DesiredSizeInternal();
    public double get_OffsetX();
    public void set_OffsetX(double value);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    protected virtual IEnumerator get_LogicalChildren();
    public sealed virtual void Dispose();
    public void add_OffsetXChanged(PropertyChangedCallback value);
    public void remove_OffsetXChanged(PropertyChangedCallback value);
    public void add_OffsetYChanged(PropertyChangedCallback value);
    public void remove_OffsetYChanged(PropertyChangedCallback value);
    public virtual GeneralTransform GetDesiredTransform(GeneralTransform transform);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
    private static void OnOffsetXChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOffsetYChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnOffsetXChanged(DependencyPropertyChangedEventArgs e);
    private void OnOffsetYChanged(DependencyPropertyChangedEventArgs e);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.TemplatedAdornerInternalControl : AutoTemplatedControl {
    private TemplatedAdornerBase m_adorner;
    public UIElement AdornedElement { get; }
    public TemplatedAdornerBase Adorner { get; }
    public TemplatedAdornerInternalControl(TemplatedAdornerBase adorner);
    public UIElement get_AdornedElement();
    public TemplatedAdornerBase get_Adorner();
    public DependencyObject GetTemplateChildInternal(string childName);
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[DesignTimeVisibleAttribute("False")]
internal class Syncfusion.Windows.Shared.TextBoxSelectionAdorner : Adorner {
    private Thumb selectionThumb1;
    private Thumb selectionThumb2;
    private VisualCollection visualCollection;
    private bool isCalledByDragDelta;
    private bool isCalledByMouseUp;
    private double widthChange2;
    private double widthChange1;
    private ThumbDirection thumbDirection;
    private TextBox iTextBox;
    protected int VisualChildrenCount { get; }
    public TextBoxSelectionAdorner(UIElement adornedElement);
    private void selectionThumb_PreviewMouseUp(object sender, MouseButtonEventArgs e);
    private void iTextBox_LostFocus(object sender, RoutedEventArgs e);
    private void selectionThumb_PreviewMouseDown(object sender, MouseButtonEventArgs e);
    private void iTextBox_SelectionChanged(object sender, RoutedEventArgs e);
    public void iTextBox_PreviewMouseUp(object sender, MouseEventArgs e);
    private void HandleThumbVisiblity();
    private void iTextBox_PreviewKeyDown(object sender, KeyEventArgs e);
    private void iTextBox_PreviewMouseDown(object sender, MouseButtonEventArgs e);
    private void selectionThumb_DragDelta(object sender, DragDeltaEventArgs e);
    protected virtual int get_VisualChildrenCount();
    protected virtual Visual GetVisualChild(int index);
    internal void Dispose();
}
public static class Syncfusion.Windows.Shared.ThemeColors : object {
    private static string C_HoverBrush;
    private static string C_BackgroundBrush;
    private static string C_BorderBrush;
    private static string C_SelectedBrush;
    private static string C_ForegroundBrush;
    private static string C_ActiveWindowTitleBrush;
    private static string C_InActiveWindowTitleBrush;
    private static string C_RibbonPanelBrush;
    private static string C_MenuBackgroundBrush;
    private static string C_MenuHoverBrush;
    private static string C_GalleryHeaderBrush;
    private static string C_ColumnHeaderBrush;
    private static string C_CardViewGroupingBarBrush;
    private static string C_HorizontalThumbBrush;
    private static string C_HorizontalThumbHoverBrush;
    private static string C_HorizontalThumbPressedBrush;
    private static string C_VerticalThumbBrush;
    private static string C_VerticalThumbHoverBrush;
    private static string C_VerticalThumbPressedBrush;
    private static string C_TrackBrush;
    private static string C_TabHoverBrush;
    private static string C_TabHoverBorderBrush;
    public static string HoverBrush { get; }
    public static string BackgroundBrush { get; }
    public static string BorderBrush { get; }
    public static string SelectedBrush { get; }
    public static string ForegroundBrush { get; }
    public static string ActiveWindowTitleBrush { get; }
    public static string InActiveWindowTitleBrush { get; }
    public static string RibbonPanelBrush { get; }
    public static string MenuBackgroundBrush { get; }
    public static string MenuHoverBrush { get; }
    public static string GalleryHeaderBrush { get; }
    public static string ColumnHeaderBrush { get; }
    public static string CardViewGroupingBarBrush { get; }
    public static string HorizontalThumbHoverBrush { get; }
    public static string HorizontalThumbPressedBrush { get; }
    public static string HorizontalThumbBrush { get; }
    public static string VerticalThumbHoverBrush { get; }
    public static string VerticalThumbPressedBrush { get; }
    public static string VerticalThumbBrush { get; }
    public static string TrackBrush { get; }
    public static string TabHoverBrush { get; }
    public static string TabHoverBorderBrush { get; }
    public static string get_HoverBrush();
    public static string get_BackgroundBrush();
    public static string get_BorderBrush();
    public static string get_SelectedBrush();
    public static string get_ForegroundBrush();
    public static string get_ActiveWindowTitleBrush();
    public static string get_InActiveWindowTitleBrush();
    public static string get_RibbonPanelBrush();
    public static string get_MenuBackgroundBrush();
    public static string get_MenuHoverBrush();
    public static string get_GalleryHeaderBrush();
    public static string get_ColumnHeaderBrush();
    public static string get_CardViewGroupingBarBrush();
    public static string get_HorizontalThumbHoverBrush();
    public static string get_HorizontalThumbPressedBrush();
    public static string get_HorizontalThumbBrush();
    public static string get_VerticalThumbHoverBrush();
    public static string get_VerticalThumbPressedBrush();
    public static string get_VerticalThumbBrush();
    public static string get_TrackBrush();
    public static string get_TabHoverBrush();
    public static string get_TabHoverBorderBrush();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.ThicknessToDoubleConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal enum Syncfusion.Windows.Shared.ThumbDirection : Enum {
    public int value__;
    public static ThumbDirection None;
    public static ThumbDirection Forward;
    public static ThumbDirection Backward;
}
internal class Syncfusion.Windows.Shared.ThumbPosition : ValueType {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartingPoint>k__BackingField;
    public int Position { get; public set; }
    public double StartingPoint { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public double get_StartingPoint();
    [CompilerGeneratedAttribute]
public void set_StartingPoint(double value);
}
public class Syncfusion.Windows.Shared.TileViewCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public object Source { get; public set; }
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class Syncfusion.Windows.Shared.TileViewCancelRepositioningEventHandler : MulticastDelegate {
    public TileViewCancelRepositioningEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TileViewCancelEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, TileViewCancelEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.TileViewControl : Selector {
    internal int iCount;
    internal double draggedHeight;
    internal bool AllowAdd;
    internal double draggedWidth;
    internal TileViewItem DraggedItem;
    internal bool IsSplitterUsedinMinimizedState;
    internal TileViewItem SwappedfromMaximized;
    internal TileViewItem SwappedfromMinimized;
    internal bool IsSwapped;
    internal double OldDesiredHeight;
    internal double OldDesiredWidth;
    internal Dictionary`2<int, TileViewItem> TileViewItemOrder;
    internal ArrayList ItemsHeaderHeight;
    internal ArrayList MinimizeditemsOrder;
    private ScrollBar vScrollBar;
    private ScrollBar hScrollBar;
    private bool isContextMenuOpen;
    internal double MinimizedVirtualItemSize;
    internal TileViewVirtualizingPanel TileVirtualizingPanel;
    internal DispatcherTimer Timer;
    internal UIElementCollection VirtualizingTileItemsCollection;
    internal bool IsDragging;
    internal bool IsScroll;
    internal double MinimizedScrollStep;
    internal double MaximizedScrollStep;
    internal int RemoveAtVirtualPostion;
    internal bool IsSizechanged;
    internal bool IsInsertOrRemoveItem;
    internal int firstVisibleIndex;
    internal TileViewItem PreviousMaximizedElement;
    internal int count;
    internal double ControlActualHeight;
    internal double ControlActualWidth;
    internal bool marginFlag;
    internal double LastminItemStore;
    internal int Rows;
    internal int Columns;
    private TileViewItem tileViewItem;
    internal TileViewItem maximizedItem;
    internal ObservableCollection`1<TileViewItem> tileViewItems;
    internal List`1<TileViewItem> initialTileViewItems;
    private DataTemplate tempContentTemplate;
    internal double LeftMargin;
    internal double RightMargin;
    internal double TopMargin;
    internal double BottomMargin;
    internal bool needToUpdate;
    internal Panel itemsPanel;
    internal bool isTileItemsLoaded;
    internal ScrollViewer scroll;
    internal Grid MainGrid;
    internal bool Update;
    internal double canvasheightonMinimized;
    internal double canvaswidthonMinimized;
    internal bool isheaderClicked;
    private PropertyChangedCallback IsClickHeaderToMaximizePropertyChanged;
    private PropertyChangedCallback IsMinMaxButtonOnMouseOverOnlyChanged;
    private PropertyChangedCallback IsSplitterVisibilityChanged;
    private PropertyChangedCallback RowCountChanged;
    private PropertyChangedCallback ColumnCountChanged;
    private PropertyChangedCallback AllowItemRepositioningChanged;
    private PropertyChangedCallback MinimizedItemsOrientationChanged;
    private PropertyChangedCallback MinimizedItemsPercentageChanged;
    private PropertyChangedCallback SplitterThicknessChanged;
    private TileViewOrderChangeEventHandler Repositioned;
    private TileViewCancelRepositioningEventHandler Repositioning;
    public static DependencyProperty MinimizedItemsOrientationProperty;
    public static DependencyProperty CurrentItemsOrderProperty;
    public static DependencyProperty EnableTouchProperty;
    public static DependencyProperty EnableAnimationProperty;
    public static DependencyProperty AnimationDurationProperty;
    public static DependencyProperty AllowItemRepositioningProperty;
    public static DependencyProperty MinimizedItemsPercentageProperty;
    public static DependencyProperty IsMinMaxButtonOnMouseOverOnlyProperty;
    public static DependencyProperty IsVirtualizingProperty;
    public static DependencyProperty RowHeightProperty;
    public static DependencyProperty ColumnWidthProperty;
    public static DependencyProperty RowCountProperty;
    public static DependencyProperty ColumnCountProperty;
    public static DependencyProperty SplitterThicknessProperty;
    public static DependencyProperty SplitterColorProperty;
    public static DependencyProperty SplitterVisibilityProperty;
    public static DependencyProperty MinimizedItemTemplateProperty;
    public static DependencyProperty MaximizedItemTemplateProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty ClickHeaderToMaximizeProperty;
    public static DependencyProperty VerticalScrollBarVisibilityProperty;
    public static DependencyProperty HorizontalScrollBarVisibilityProperty;
    public static DependencyProperty MinimizedHeaderTemplateProperty;
    public static DependencyProperty MaximizedHeaderTemplateProperty;
    public static DependencyProperty UseNormalStateProperty;
    internal List`1<int> HiddenTileViewItems;
    private int tempitemcount;
    private List`1<object> _tileviewcanvasleft;
    private List`1<object> _tileviewcanvastop;
    private List`1<object> updatedcanvasleft;
    private List`1<object> sortedcanvasleft;
    private List`1<int> currentposition;
    internal List`1<TileViewItem> updatedtileviewitems;
    internal List`1<TileViewItem> orderedtileviewitems;
    private List`1<object> updatedcanvastop;
    internal bool isReOrdered;
    private double minimizedItemHeight;
    private double minimizedItemWidth;
    internal bool initialload;
    private TileViewEventHandler Minimized;
    private TileViewEventHandler Minimizing;
    private TileViewCancelEventHandler Maximizing;
    private TileViewEventHandler Maximized;
    private TileViewCancelEventHandler Restoring;
    private TileViewEventHandler Restored;
    private TileViewEventHandler MaximizedItemChanged;
    [CompilerGeneratedAttribute]
private static Func`2<TileViewItem, double> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<TileViewItem, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<TileViewItem, bool> CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static Func`2<TileViewItem, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<int, bool> CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static Func`2<int, int> CS$<>9__CachedAnonymousMethodDelegated;
    internal ScrollViewer ScrollHost { get; }
    public bool EnableTouch { get; public set; }
    public bool EnableAnimation { get; public set; }
    public TimeSpan AnimationDuration { get; public set; }
    public GridLength RowHeight { get; public set; }
    public GridLength ColumnWidth { get; public set; }
    public List`1<int> CurrentItemsOrder { get; public set; }
    public DataTemplate MinimizedItemTemplate { get; public set; }
    public DataTemplate MaximizedItemTemplate { get; public set; }
    public MinimizedItemsOrientation MinimizedItemsOrientation { get; public set; }
    public Visibility SplitterVisibility { get; public set; }
    public Brush SplitterColor { get; public set; }
    public bool IsMinMaxButtonOnMouseOverOnly { get; public set; }
    internal double minimizedColumnWidth { get; internal set; }
    public int RowCount { get; public set; }
    public int ColumnCount { get; public set; }
    public double SplitterThickness { get; public set; }
    public double MinimizedItemsPercentage { get; public set; }
    public bool IsVirtualizing { get; public set; }
    internal double minimizedRowHeight { get; }
    public bool AllowItemRepositioning { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public DataTemplate MinimizedHeaderTemplate { get; public set; }
    public DataTemplate MaximizedHeaderTemplate { get; public set; }
    public bool ClickHeaderToMaximize { get; public set; }
    public bool UseNormalState { get; public set; }
    private static TileViewControl();
    internal ScrollViewer get_ScrollHost();
    private void timer_Tick(object sender, EventArgs e);
    internal void SetState(TileViewItem item, TileViewItemState state);
    private void TileViewControl_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void ItemContainerGenerator_StatusChanged(object sender, EventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnInitialized(EventArgs e);
    private void TileViewControl_Loaded(object sender, RoutedEventArgs e);
    private void TileViewControl_Unloaded(object sender, RoutedEventArgs e);
    private void ClearLocal(DependencyObject obj);
    private void Dispatcher_ShutdownFinished(object sender, EventArgs e);
    private void EndReferences();
    public void add_IsClickHeaderToMaximizePropertyChanged(PropertyChangedCallback value);
    public void remove_IsClickHeaderToMaximizePropertyChanged(PropertyChangedCallback value);
    public void add_IsMinMaxButtonOnMouseOverOnlyChanged(PropertyChangedCallback value);
    public void remove_IsMinMaxButtonOnMouseOverOnlyChanged(PropertyChangedCallback value);
    public void add_IsSplitterVisibilityChanged(PropertyChangedCallback value);
    public void remove_IsSplitterVisibilityChanged(PropertyChangedCallback value);
    public void add_RowCountChanged(PropertyChangedCallback value);
    public void remove_RowCountChanged(PropertyChangedCallback value);
    public void add_ColumnCountChanged(PropertyChangedCallback value);
    public void remove_ColumnCountChanged(PropertyChangedCallback value);
    public void add_AllowItemRepositioningChanged(PropertyChangedCallback value);
    public void remove_AllowItemRepositioningChanged(PropertyChangedCallback value);
    public void add_MinimizedItemsOrientationChanged(PropertyChangedCallback value);
    public void remove_MinimizedItemsOrientationChanged(PropertyChangedCallback value);
    public void add_MinimizedItemsPercentageChanged(PropertyChangedCallback value);
    public void remove_MinimizedItemsPercentageChanged(PropertyChangedCallback value);
    public void add_SplitterThicknessChanged(PropertyChangedCallback value);
    public void remove_SplitterThicknessChanged(PropertyChangedCallback value);
    public void add_Repositioned(TileViewOrderChangeEventHandler value);
    public void remove_Repositioned(TileViewOrderChangeEventHandler value);
    public void add_Repositioning(TileViewCancelRepositioningEventHandler value);
    public void remove_Repositioning(TileViewCancelRepositioningEventHandler value);
    private static object CoerceCurrentItemsOrder(DependencyObject d, object baseValue);
    public bool get_EnableTouch();
    public void set_EnableTouch(bool value);
    public bool get_EnableAnimation();
    public void set_EnableAnimation(bool value);
    private static void OnEnableAnimationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public TimeSpan get_AnimationDuration();
    public void set_AnimationDuration(TimeSpan value);
    private static void OnAnimationDurationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public GridLength get_RowHeight();
    public void set_RowHeight(GridLength value);
    public GridLength get_ColumnWidth();
    public void set_ColumnWidth(GridLength value);
    public List`1<int> get_CurrentItemsOrder();
    public void set_CurrentItemsOrder(List`1<int> value);
    public DataTemplate get_MinimizedItemTemplate();
    public void set_MinimizedItemTemplate(DataTemplate value);
    public DataTemplate get_MaximizedItemTemplate();
    public void set_MaximizedItemTemplate(DataTemplate value);
    public MinimizedItemsOrientation get_MinimizedItemsOrientation();
    public void set_MinimizedItemsOrientation(MinimizedItemsOrientation value);
    public Visibility get_SplitterVisibility();
    public void set_SplitterVisibility(Visibility value);
    public Brush get_SplitterColor();
    public void set_SplitterColor(Brush value);
    public bool get_IsMinMaxButtonOnMouseOverOnly();
    public void set_IsMinMaxButtonOnMouseOverOnly(bool value);
    internal double get_minimizedColumnWidth();
    internal void set_minimizedColumnWidth(double value);
    public int get_RowCount();
    public void set_RowCount(int value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public double get_SplitterThickness();
    public void set_SplitterThickness(double value);
    public double get_MinimizedItemsPercentage();
    public void set_MinimizedItemsPercentage(double value);
    public bool get_IsVirtualizing();
    public void set_IsVirtualizing(bool value);
    internal double get_minimizedRowHeight();
    public bool get_AllowItemRepositioning();
    public void set_AllowItemRepositioning(bool value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public DataTemplate get_MinimizedHeaderTemplate();
    public void set_MinimizedHeaderTemplate(DataTemplate value);
    public DataTemplate get_MaximizedHeaderTemplate();
    public void set_MaximizedHeaderTemplate(DataTemplate value);
    public bool get_ClickHeaderToMaximize();
    public void set_ClickHeaderToMaximize(bool value);
    public bool get_UseNormalState();
    public void set_UseNormalState(bool value);
    internal Dictionary`2<int, TileViewItem> GetTileViewItemOrder();
    internal TileViewItem GetItemContainer(object obj);
    internal void GetTileViewItems();
    internal virtual void StartTileViewItemDragEvents(TileViewItem repCard);
    internal virtual void EndTileViewItemDragEvents(TileViewItem RC);
    internal void SetRowsAndColumns(Dictionary`2<int, TileViewItem> TileViewItemOrder);
    public void UpdateTileViewLayout(bool needAnimation);
    public bool CloseTileViewItem(TileViewItem CloseTileViewItem);
    internal void listClear();
    internal void UpdateTileViewLayout();
    internal void GetTileViewItemsSizes();
    private void CalculateMinimizedItemWidth();
    private void CalculateMinimizedItemHeight();
    internal void AnimateTileViewLayout();
    internal void ItemAnimationCompleted(TileViewItem item);
    internal void ChangeDataTemplate(TileViewItem tileviewitem);
    private static void OnItemContainerStyleChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    public void BringIntoView(object data);
    private void BringIntoView(int index);
    private void UpdateFirstVisibleIndex(int index);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject Dobj, object obj);
    internal void GetScrollViewer();
    private void Scroll_ContextMenuOpening(object sender, ContextMenuEventArgs e);
    internal void scroll_ScrollChanged(object obj, ScrollChangedEventArgs args);
    internal void GetCanvasHeight();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    private List`1<int> ValidateCurrentItemsOrder(List`1<int> newValue, List`1<int> currentItemsOrder);
    internal void UpdateCurrentOrderFromTileItems();
    internal Dictionary`2<int, TileViewItem> GetTileItemsOrderFromCurrentOrder();
    private void ApplyContainerStyle(TileViewItem item, object obj);
    private void ApplyHeaderTemplate(TileViewItem item, object obj);
    internal void ChangeHeaderContent(TileViewItem item);
    internal void ChangeHeaderTemplate(TileViewItem item);
    private void ApplyContentTemplate(TileViewItem item, object obj);
    internal void ApplyTileViewContent(TileViewItem item);
    private static void OnSplitterThicknessChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnSplitterThicknessChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMinimizedItemsPercentageChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnMinimizedItemsPercentageChanged(DependencyPropertyChangedEventArgs args);
    public static void OnUseNormalStatePropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public static void OnScrollBarVisibilityPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnUseNormalStatePropertyChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void OnScrollBarVisibilityPropertyChanged(DependencyPropertyChangedEventArgs args);
    private static void OnIsMinMaxButtonOnMouseOverOnlyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnRowCountChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnRowCountChanged(DependencyPropertyChangedEventArgs args);
    private static void OnColumnCountChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnColumnCountChanged(DependencyPropertyChangedEventArgs args);
    private static object CoerceColumnCount(DependencyObject d, object baseValue);
    private static object CoerceRowCount(DependencyObject d, object baseValue);
    protected virtual void OnIsMinMaxButtonOnMouseOverOnlyChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMinimizedItemTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnMinimizedItemTemplateChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMaximizedItemTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnMaximizedItemTemplateChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMinimizedHeaderTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnMinimizedHeaderTemplateChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMaximizedHeaderTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnMaximizedHeaderTemplateChanged(DependencyPropertyChangedEventArgs args);
    private static void OnHeaderTemplateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnHeaderTemplateChanged(DependencyPropertyChangedEventArgs args);
    private static void OnSplitterVisibilityChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnSplitterVisibilityChanged(DependencyPropertyChangedEventArgs args);
    private static void OnMinimizedItemsOrientationChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnMinimizedItemsOrientationChanged(DependencyPropertyChangedEventArgs args);
    private static void OnCurrentItemsOrderChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnCurrentItemsOrderChanged(DependencyPropertyChangedEventArgs args);
    private static void OnAllowItemRepositioningChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnAllowItemRepositioningChanged(DependencyPropertyChangedEventArgs args);
    internal void repCard_Normal(object sender, EventArgs e);
    internal void repCard_Maximized(object sender, EventArgs e);
    internal void repCard_DragMoved(object sender, TileViewDragEventArgs DEArgs);
    private void repCard_DragFinished(object sender, TileViewDragEventArgs DEArgs);
    internal void ChangeOrder(Int32[] arr);
    public void SaveOrder();
    public void LoadOrder();
    private void repCard_DragStarted(object sender, TileViewDragEventArgs DEArgs);
    private void TileViewControl_SizeChanged(object sender, SizeChangedEventArgs e);
    private void TileViewControl_LayoutUpdated(object sender, EventArgs e);
    internal void RC_Minimized(object sender, CancelEventArgs e);
    public static void OnClickHeaderToMaximizePropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnClickHeaderToMaximizePropertyChanged(DependencyPropertyChangedEventArgs args);
    public void add_Minimized(TileViewEventHandler value);
    public void remove_Minimized(TileViewEventHandler value);
    public void add_Minimizing(TileViewEventHandler value);
    public void remove_Minimizing(TileViewEventHandler value);
    public void add_Maximizing(TileViewCancelEventHandler value);
    public void remove_Maximizing(TileViewCancelEventHandler value);
    public void add_Maximized(TileViewEventHandler value);
    public void remove_Maximized(TileViewEventHandler value);
    public void add_Restoring(TileViewCancelEventHandler value);
    public void remove_Restoring(TileViewCancelEventHandler value);
    public void add_Restored(TileViewEventHandler value);
    public void remove_Restored(TileViewEventHandler value);
    public void add_MaximizedItemChanged(TileViewEventHandler value);
    public void remove_MaximizedItemChanged(TileViewEventHandler value);
    protected virtual void OnMinimized(TileViewEventArgs e);
    protected virtual void OnMinimizing(TileViewEventArgs e);
    protected virtual void OnMaximizedItemChanged(TileViewEventArgs e);
    protected virtual void OnRestoring(TileViewCancelEventArgs e);
    protected virtual void OnRestored(TileViewEventArgs e);
    protected virtual void OnMaximizing(TileViewCancelEventArgs e);
    protected virtual void OnMaximized(TileViewEventArgs e);
    internal void ChangeMinMaxButtonVisibility(object obj, Visibility visible);
    public void GetTileViewItemsSizesforSplitter();
    public void AnimateTileViewLayoutforSplitter();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static double <UpdateTileViewLayout>b__0(TileViewItem t);
    [CompilerGeneratedAttribute]
private static bool <OnItemsChanged>b__2(TileViewItem tv);
    [CompilerGeneratedAttribute]
private static bool <OnItemsChanged>b__3(TileViewItem tv);
    [CompilerGeneratedAttribute]
private static bool <OnItemsChanged>b__4(TileViewItem tv);
    [CompilerGeneratedAttribute]
private bool <ValidateCurrentItemsOrder>b__8(int t);
    [CompilerGeneratedAttribute]
private static bool <ValidateCurrentItemsOrder>b__9(int t);
    [CompilerGeneratedAttribute]
private static int <ValidateCurrentItemsOrder>b__a(int i);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Syncfusion.Windows.Shared.TileViewControlAutomationPeer : FrameworkElementAutomationPeer {
    private TileViewControl MyOwner { get; }
    public TileViewControlAutomationPeer(TileViewControl control);
    protected virtual string GetAutomationIdCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
    private TileViewControl get_MyOwner();
    protected virtual string GetItemStatusCore();
}
public class Syncfusion.Windows.Shared.TileViewDragEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <HorizontalChange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private double <VerticalChange>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseEventArgs <MouseEventArgs>k__BackingField;
    public double HorizontalChange { get; public set; }
    public string Event { get; public set; }
    public double VerticalChange { get; public set; }
    public MouseEventArgs MouseEventArgs { get; public set; }
    public TileViewDragEventArgs(double horizontalChange, double verticalChange, MouseEventArgs mouseEventArgs, string eventName);
    [CompilerGeneratedAttribute]
public double get_HorizontalChange();
    [CompilerGeneratedAttribute]
public void set_HorizontalChange(double value);
    [CompilerGeneratedAttribute]
public string get_Event();
    [CompilerGeneratedAttribute]
public void set_Event(string value);
    [CompilerGeneratedAttribute]
public double get_VerticalChange();
    [CompilerGeneratedAttribute]
public void set_VerticalChange(double value);
    [CompilerGeneratedAttribute]
public MouseEventArgs get_MouseEventArgs();
    [CompilerGeneratedAttribute]
public void set_MouseEventArgs(MouseEventArgs value);
}
public class Syncfusion.Windows.Shared.TileViewDragEventHandler : MulticastDelegate {
    public TileViewDragEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TileViewDragEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, TileViewDragEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.Windows.Shared.TileViewEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TileViewItemState <OldState>k__BackingField;
    [CompilerGeneratedAttribute]
private TileViewItemState <NewState>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    public TileViewItemState OldState { get; public set; }
    public TileViewItemState NewState { get; public set; }
    public object Source { get; public set; }
    public TileViewEventArgs(TileViewItemState oldState, TileViewItemState newState);
    [CompilerGeneratedAttribute]
public TileViewItemState get_OldState();
    [CompilerGeneratedAttribute]
public void set_OldState(TileViewItemState value);
    [CompilerGeneratedAttribute]
public TileViewItemState get_NewState();
    [CompilerGeneratedAttribute]
public void set_NewState(TileViewItemState value);
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class Syncfusion.Windows.Shared.TileViewItem : TileViewItemBase {
    private static string MinMaxButtonName;
    internal TileViewItem Currentitem;
    internal TileViewItem Nextitem;
    internal Point HeaderPoint;
    internal Border split;
    internal Popup Splitpopup;
    internal bool Splitflag;
    private Point startpoint;
    private Point endpoint;
    public Grid mainGrid;
    internal bool disablePropertyChangedNotify;
    internal ToggleButton minMaxButton;
    public ContentPresenter TileViewContent;
    public ContentPresenter HeaderContent;
    internal Button closeButton;
    internal Border HeaderPart;
    internal GridLength onMinimizedHeight;
    internal GridLength onMinimizedWidth;
    internal Grid PART_Content;
    private int TileViewItemIndex;
    internal MinimizedItemsOrientation MinPos;
    private EventHandler CardMaximized;
    private EventHandler CardNormal;
    private EventHandler CardMinimized;
    private TileViewEventHandler StateChanged;
    private TileViewCancelEventHandler StateChanging;
    private RoutedEventHandler Selected;
    private CloseEventHandler Closed;
    private CloseEventHandler Closing;
    public static DependencyProperty ShareSpaceProperty;
    public static DependencyProperty IsOverrideItemTemplateProperty;
    public static DependencyProperty ItemTemplateProperty;
    public static DependencyProperty MinimizedItemTemplateProperty;
    public static DependencyProperty MaximizedItemTemplateProperty;
    public static DependencyProperty HeaderBorderBrushProperty;
    public static DependencyProperty HeaderBorderThicknessProperty;
    public static DependencyProperty MinMaxButtonToolTipProperty;
    public static DependencyProperty HeaderCornerRadiusProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty HeaderCursorProperty;
    public static DependencyProperty MinMaxButtonMarginProperty;
    public static DependencyProperty CloseButtonMarginProperty;
    public static DependencyProperty MinMaxButtonStyleProperty;
    public static DependencyProperty CloseButtonStyleProperty;
    public static DependencyProperty TileViewItemStateProperty;
    public static DependencyProperty MinMaxButtonBackgroundProperty;
    internal static DependencyProperty MinMaxButtonBorderBrushProperty;
    internal static DependencyProperty MinMaxButtonThicknessProperty;
    public static DependencyProperty HeaderVisibilityProperty;
    public static DependencyProperty HeaderBackgroundProperty;
    public static DependencyProperty HeaderForegroundProperty;
    public static DependencyProperty MinMaxButtonVisibilityProperty;
    public static DependencyProperty CloseButtonVisibilityProperty;
    public static DependencyProperty HeaderHeightProperty;
    public static DependencyProperty SplitColumnProperty;
    public static DependencyProperty SplitRowProperty;
    public static DependencyProperty BorderColumnProperty;
    public static DependencyProperty BorderRowProperty;
    public static DependencyProperty OnMinimizedHeightProperty;
    public static DependencyProperty OnMinimizedWidthProperty;
    public static DependencyProperty ItemContentTemplateProperty;
    public static DependencyProperty MaximizedItemContentProperty;
    public static DependencyProperty MinimizedItemContentProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty MinimizedHeaderProperty;
    public static DependencyProperty MaximizedHeaderProperty;
    public static DependencyProperty CloseModeProperty;
    private GridSplitter gsp;
    private int ind;
    private int itemscount;
    internal bool canAnimateTiles;
    public bool IsOverrideItemTemplate { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplate MinimizedItemTemplate { get; public set; }
    public DataTemplate MaximizedItemTemplate { get; public set; }
    internal int RepCardIndex { get; internal set; }
    internal ToggleButton MinMaxButton { get; }
    public TileViewItemState TileViewItemState { get; public set; }
    public Brush MinMaxButtonBackground { get; public set; }
    internal Brush MinMaxButtonBorderBrush { get; internal set; }
    internal Thickness MinMaxButtonThickness { get; internal set; }
    public Brush HeaderBackground { get; public set; }
    public Brush HeaderForeground { get; public set; }
    public Visibility HeaderVisibility { get; public set; }
    public Thickness MinMaxButtonMargin { get; public set; }
    public Thickness CloseButtonMargin { get; public set; }
    public Style MinMaxButtonStyle { get; public set; }
    public Style CloseButtonStyle { get; public set; }
    public Brush HeaderBorderBrush { get; public set; }
    public bool ShareSpace { get; public set; }
    public Thickness HeaderBorderThickness { get; public set; }
    public string MinMaxButtonToolTip { get; public set; }
    public CornerRadius HeaderCornerRadius { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Cursor HeaderCursor { get; public set; }
    public Visibility MinMaxButtonVisibility { get; public set; }
    public Visibility CloseButtonVisibility { get; public set; }
    public double HeaderHeight { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public int SplitColumn { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public int SplitRow { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public int BorderColumn { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public int BorderRow { get; public set; }
    public GridLength OnMinimizedHeight { get; public set; }
    public GridLength OnMinimizedWidth { get; public set; }
    public object MaximizedItemContent { get; public set; }
    public object MinimizedItemContent { get; public set; }
    public DataTemplate ItemContentTemplate { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public bool IsSelected { get; public set; }
    public object MinimizedHeader { get; public set; }
    public object MaximizedHeader { get; public set; }
    public CloseMode CloseMode { get; public set; }
    private static TileViewItem();
    internal void add_CardMaximized(EventHandler value);
    internal void remove_CardMaximized(EventHandler value);
    internal void add_CardNormal(EventHandler value);
    internal void remove_CardNormal(EventHandler value);
    internal void add_CardMinimized(EventHandler value);
    internal void remove_CardMinimized(EventHandler value);
    public void add_StateChanged(TileViewEventHandler value);
    public void remove_StateChanged(TileViewEventHandler value);
    public void add_StateChanging(TileViewCancelEventHandler value);
    public void remove_StateChanging(TileViewCancelEventHandler value);
    public void add_Selected(RoutedEventHandler value);
    public void remove_Selected(RoutedEventHandler value);
    private void TileViewItem_KeyDown(object sender, KeyEventArgs e);
    public void add_Closed(CloseEventHandler value);
    public void remove_Closed(CloseEventHandler value);
    public void add_Closing(CloseEventHandler value);
    public void remove_Closing(CloseEventHandler value);
    protected virtual void OnClosing(CloseEventArgs e);
    protected virtual void OnClosed(CloseEventArgs e);
    public bool get_IsOverrideItemTemplate();
    public void set_IsOverrideItemTemplate(bool value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public DataTemplate get_MinimizedItemTemplate();
    public void set_MinimizedItemTemplate(DataTemplate value);
    public DataTemplate get_MaximizedItemTemplate();
    public void set_MaximizedItemTemplate(DataTemplate value);
    internal int get_RepCardIndex();
    internal void set_RepCardIndex(int value);
    internal ToggleButton get_MinMaxButton();
    public TileViewItemState get_TileViewItemState();
    public void set_TileViewItemState(TileViewItemState value);
    public Brush get_MinMaxButtonBackground();
    public void set_MinMaxButtonBackground(Brush value);
    internal Brush get_MinMaxButtonBorderBrush();
    internal void set_MinMaxButtonBorderBrush(Brush value);
    internal Thickness get_MinMaxButtonThickness();
    internal void set_MinMaxButtonThickness(Thickness value);
    public Brush get_HeaderBackground();
    public void set_HeaderBackground(Brush value);
    public Brush get_HeaderForeground();
    public void set_HeaderForeground(Brush value);
    public Visibility get_HeaderVisibility();
    public void set_HeaderVisibility(Visibility value);
    public Thickness get_MinMaxButtonMargin();
    public void set_MinMaxButtonMargin(Thickness value);
    public Thickness get_CloseButtonMargin();
    public void set_CloseButtonMargin(Thickness value);
    public Style get_MinMaxButtonStyle();
    public void set_MinMaxButtonStyle(Style value);
    public Style get_CloseButtonStyle();
    public void set_CloseButtonStyle(Style value);
    public Brush get_HeaderBorderBrush();
    public void set_HeaderBorderBrush(Brush value);
    public bool get_ShareSpace();
    public void set_ShareSpace(bool value);
    public Thickness get_HeaderBorderThickness();
    public void set_HeaderBorderThickness(Thickness value);
    public string get_MinMaxButtonToolTip();
    public void set_MinMaxButtonToolTip(string value);
    public CornerRadius get_HeaderCornerRadius();
    public void set_HeaderCornerRadius(CornerRadius value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public Cursor get_HeaderCursor();
    public void set_HeaderCursor(Cursor value);
    public Visibility get_MinMaxButtonVisibility();
    public void set_MinMaxButtonVisibility(Visibility value);
    public Visibility get_CloseButtonVisibility();
    public void set_CloseButtonVisibility(Visibility value);
    public double get_HeaderHeight();
    public void set_HeaderHeight(double value);
    public int get_SplitColumn();
    public void set_SplitColumn(int value);
    public int get_SplitRow();
    public void set_SplitRow(int value);
    public int get_BorderColumn();
    public void set_BorderColumn(int value);
    public int get_BorderRow();
    public void set_BorderRow(int value);
    public GridLength get_OnMinimizedHeight();
    public void set_OnMinimizedHeight(GridLength value);
    public GridLength get_OnMinimizedWidth();
    public void set_OnMinimizedWidth(GridLength value);
    public object get_MaximizedItemContent();
    public void set_MaximizedItemContent(object value);
    public object get_MinimizedItemContent();
    public void set_MinimizedItemContent(object value);
    public DataTemplate get_ItemContentTemplate();
    public void set_ItemContentTemplate(DataTemplate value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public object get_MinimizedHeader();
    public void set_MinimizedHeader(object value);
    public object get_MaximizedHeader();
    public void set_MaximizedHeader(object value);
    public CloseMode get_CloseMode();
    public void set_CloseMode(CloseMode value);
    public virtual void OnApplyTemplate();
    internal void Dispose();
    private void ParentTileViewControl_IsMinMaxButtonOnMouseOverOnlyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void closeButton_Click(object sender, RoutedEventArgs e);
    private void LoadinDesignMode();
    internal void LoadSplitter();
    internal void split_MouseEnter(object sender, MouseEventArgs e);
    internal void split_MouseLeave(object sender, MouseEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseButtonEventArgs e);
    internal void split_MouseMove(object sender, MouseEventArgs e);
    internal void split_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    internal void split_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    internal void HeaderPart_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    internal void MinMaxButton_Click(object sender, RoutedEventArgs e);
    internal void Onloadingitems();
    public virtual void UpdateCoordinate(Point Pt);
    internal virtual void TileViewItemMaximize();
    internal virtual void RestoreTileViewItems();
    internal void TileViewItemsMinimizeMethod(MinimizedItemsOrientation mpos);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    private static void OnEnumLoad(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    internal void TileViewItemOnHiddenState(TileViewItem item);
    protected virtual void OnEnumLoad(DependencyPropertyChangedEventArgs e);
    internal void HiddenStateChanged(TileViewItem item);
    protected virtual void OnStateChanging(TileViewCancelEventArgs e);
    protected virtual void OnStateChanged(TileViewEventArgs e);
    public MinimizedItemsOrientation minposmethod();
    internal virtual void AnimatePosition(double x, double y);
    private void animationPosition_Completed(object sender, EventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    private void makeToggleButtonVisible(bool isvisible);
    public static void OnItemTemplateChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    internal void tileviewControl_IsMinMaxButtonOnMouseOverOnlyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void ParentTileViewControl_IsClickHeaderToMaximizePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void ParentTileViewControl_AllowItemRepositioningChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMinimizedHeightPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMinimizedWidthPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsSelectedPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected virtual void OnManipulationDelta(ManipulationDeltaEventArgs e);
    protected virtual void OnManipulationCompleted(ManipulationCompletedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.TileViewItemAnimationBase : HeaderedContentControl {
    private bool animatingSize;
    private bool animatingPosition;
    private TimeSpan animationTimeSpanSize;
    private TimeSpan animationTimespanPosition;
    internal SplineDoubleKeyFrame animationWidthKeyFrameSize;
    internal SplineDoubleKeyFrame animationHeightKeyFrameSize;
    internal SplineDoubleKeyFrame animationXKeyFramePosition;
    internal SplineDoubleKeyFrame animationYKeyFramePosition;
    internal Storyboard animationSize;
    internal Storyboard animationPosition;
    private TileViewControl tileView;
    internal static DependencyProperty SizeAnimationDurationProperty;
    internal static DependencyProperty PositionAnimationDurationProperty;
    public TileViewControl ParentTileViewControl { get; internal set; }
    internal TimeSpan PositionAnimationDuration { get; internal set; }
    internal TimeSpan SizeAnimationDuration { get; internal set; }
    private static TileViewItemAnimationBase();
    public TileViewControl get_ParentTileViewControl();
    internal void set_ParentTileViewControl(TileViewControl value);
    internal void AnimationChanged();
    internal TimeSpan get_PositionAnimationDuration();
    internal void set_PositionAnimationDuration(TimeSpan value);
    internal TimeSpan get_SizeAnimationDuration();
    internal void set_SizeAnimationDuration(TimeSpan value);
    private static void SetAnimationSizeDuration(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    protected virtual void SetAnimationSizeDuration(DependencyPropertyChangedEventArgs e);
    private static void SetPositionAnimationDuration(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    protected virtual void SetPositionAnimationDuration(DependencyPropertyChangedEventArgs e);
    private void AnimationSize_Completed(object sender, EventArgs e);
    private void AnimationPosition_Completed(object sender, EventArgs e);
    public void AnimateSize(double width, double height);
    internal virtual void AnimatePosition(double x, double y);
}
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public class Syncfusion.Windows.Shared.TileViewItemAutomationPeer : FrameworkElementAutomationPeer {
    private TileViewItem MyOwner { get; }
    public TileViewItemAutomationPeer(TileViewItem control);
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetHelpTextCore();
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    private TileViewItem get_MyOwner();
    protected virtual string GetItemStatusCore();
}
public class Syncfusion.Windows.Shared.TileViewItemBase : TileViewItemAnimationBase {
    private static string FloatPanelArea;
    private static int currZIndex;
    private Point dragCompletedPoint;
    private bool dragging;
    public UIElement UIElementObj;
    private TileViewDragEventHandler DragStartedEvent;
    private TileViewDragEventHandler DragMouseMoveEvent;
    private TileViewDragEventHandler DragCompletedEvent;
    private TileViewDragEventHandler PanelFocused;
    internal static DependencyProperty IsMovableProperty;
    internal bool IsMovable { get; internal set; }
    internal static int CurrentZIndex { get; internal set; }
    internal Point DragCompletedPoint { get; internal set; }
    private static TileViewItemBase();
    public void add_DragStartedEvent(TileViewDragEventHandler value);
    public void remove_DragStartedEvent(TileViewDragEventHandler value);
    public void add_DragMouseMoveEvent(TileViewDragEventHandler value);
    public void remove_DragMouseMoveEvent(TileViewDragEventHandler value);
    public void add_DragCompletedEvent(TileViewDragEventHandler value);
    public void remove_DragCompletedEvent(TileViewDragEventHandler value);
    public void add_PanelFocused(TileViewDragEventHandler value);
    public void remove_PanelFocused(TileViewDragEventHandler value);
    internal bool get_IsMovable();
    internal void set_IsMovable(bool value);
    internal static int get_CurrentZIndex();
    internal static void set_CurrentZIndex(int value);
    internal Point get_DragCompletedPoint();
    internal void set_DragCompletedPoint(Point value);
    public virtual void OnApplyTemplate();
    public virtual void UpdateCoordinate(Point Pt);
    public virtual void UpdateFloatPanelSize(double Width, double Height);
    public void FloatPanelArea_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    public void FloatPanelArea_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    public void FloatPanelArea_MouseMove(object sender, MouseEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.TileViewItemCloseButton : Button {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Syncfusion.Windows.Shared.TileViewItemCloseButtonAutomationPeer : FrameworkElementAutomationPeer {
    private TileViewItemCloseButton MyOwner { get; }
    public TileViewItemCloseButtonAutomationPeer(TileViewItemCloseButton control);
    protected virtual string GetNameCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetHelpTextCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    private TileViewItemCloseButton get_MyOwner();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Shared.TileViewItemDataAutomationPeer : ItemAutomationPeer {
    public TileViewItemDataAutomationPeer(object item, ItemsControlAutomationPeer itemsControlAutomationPeer);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class Syncfusion.Windows.Shared.TileViewItemMinMaxButton : ToggleButton {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
public class Syncfusion.Windows.Shared.TileViewItemMinMaxButtonAutomationPeer : FrameworkElementAutomationPeer {
    private TileViewItemMinMaxButton MyOwner { get; }
    public TileViewItemMinMaxButtonAutomationPeer(TileViewItemMinMaxButton control);
    protected virtual string GetNameCore();
    protected virtual string GetAutomationIdCore();
    protected virtual string GetClassNameCore();
    protected virtual string GetHelpTextCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    private TileViewItemMinMaxButton get_MyOwner();
}
public enum Syncfusion.Windows.Shared.TileViewItemState : Enum {
    public int value__;
    public static TileViewItemState Normal;
    public static TileViewItemState Maximized;
    public static TileViewItemState Minimized;
    public static TileViewItemState Hidden;
}
public class Syncfusion.Windows.Shared.TileViewOrderChangeEventHandler : MulticastDelegate {
    public TileViewOrderChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TileViewEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, TileViewEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.TileViewVirtualizingPanel : VirtualizingPanel {
    internal int FirstVisibleIndex;
    internal int LastVisibleIndex;
    internal Size m_extentSize;
    internal Size extent;
    internal bool IsMaximizedButtonClick;
    internal bool isTilesRestore;
    internal int VirtualColumn;
    internal int VirtualRow;
    internal ScrollBar verticalBar;
    private ItemsControl parentItemsControl;
    internal double scrollStep;
    private Size m_viewportSize;
    private IScrollInfo m_scrollInfo;
    internal ScrollViewer m_scrollOwner;
    private TileViewControl parentTileView;
    private bool m_bCanVerticallyScroll;
    private bool m_bCanHorizontallyScroll;
    private bool isScrollActive;
    private Point m_offsetPoint;
    private Thumb vScrollThumb;
    private Thumb hScrollThumb;
    private bool isThumUp;
    private bool isMouseDown;
    internal TileViewControl ParentTileViewControl { get; }
    internal IScrollInfo ScrollInfo { get; }
    private bool System.Windows.Controls.Primitives.IScrollInfo.CanHorizontallyScroll { get; private set; }
    private bool System.Windows.Controls.Primitives.IScrollInfo.CanVerticallyScroll { get; private set; }
    private double System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.ExtentWidth { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.HorizontalOffset { get; }
    private ScrollViewer System.Windows.Controls.Primitives.IScrollInfo.ScrollOwner { get; private set; }
    private double System.Windows.Controls.Primitives.IScrollInfo.VerticalOffset { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight { get; }
    private double System.Windows.Controls.Primitives.IScrollInfo.ViewportWidth { get; }
    internal TileViewControl get_ParentTileViewControl();
    internal IScrollInfo get_ScrollInfo();
    private sealed virtual override bool System.Windows.Controls.Primitives.IScrollInfo.get_CanHorizontallyScroll();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.set_CanHorizontallyScroll(bool value);
    private sealed virtual override bool System.Windows.Controls.Primitives.IScrollInfo.get_CanVerticallyScroll();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.set_CanVerticallyScroll(bool value);
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_ExtentHeight();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_ExtentWidth();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_HorizontalOffset();
    private sealed virtual override ScrollViewer System.Windows.Controls.Primitives.IScrollInfo.get_ScrollOwner();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.set_ScrollOwner(ScrollViewer value);
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_VerticalOffset();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_ViewportHeight();
    private sealed virtual override double System.Windows.Controls.Primitives.IScrollInfo.get_ViewportWidth();
    internal void Dispose(bool isDisposable);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    private void CalculateMinimizedItemSize();
    protected virtual Size ArrangeOverride(Size arrangeSize);
    private void UpdateScrollerOffset(int firstVisibleIndex, Size availableSize);
    private void CleanUpItems(int firstVisibleItemIndex, int lastVisibleItemIndex);
    internal void RemoveDraggedItems(int oldIndex, int newIndex);
    private void UpdateScrollInfo(Size availableSize);
    private void scrollThumb_PreviewMouseUp(object sender, MouseButtonEventArgs e);
    private void scrollThumb_PreviewMouseDown(object sender, MouseButtonEventArgs e);
    internal void CalculateFirstVisibleIndex(double offset);
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.LineDown();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.LineLeft();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.LineRight();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.LineUp();
    private sealed virtual override Rect System.Windows.Controls.Primitives.IScrollInfo.MakeVisible(Visual visual, Rect rectangle);
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.MouseWheelDown();
    internal void UpdateMinimizedScrollStep();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.MouseWheelLeft();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.MouseWheelRight();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.MouseWheelUp();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageDown();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageLeft();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageRight();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.PageUp();
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.SetHorizontalOffset(double offset);
    private sealed virtual override void System.Windows.Controls.Primitives.IScrollInfo.SetVerticalOffset(double offset);
    internal void RemoveDisconnectedItem(int removeAtVirtualPostion);
}
[DesignTimeVisibleAttribute("False")]
internal class Syncfusion.Windows.Shared.TimedListener : TextWriterTraceListener {
    public TimedListener(Stream stream);
    public virtual void WriteLine(string message);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.TimeSpanEdit : TextBox {
    private AdornerLayer aLayer;
    private TextBoxSelectionAdorner txtSelectionAdorner1;
    private ExtendedScrollingAdorner vAdorner;
    private Dictionary`2<int, char> tPosition;
    private Dictionary`2<int, int> tLength;
    private Dictionary`2<int, int> tStart;
    private bool isSelectionChanged;
    private bool selectionStartChanged;
    private int selectionStart;
    private ICommand upCommand;
    private ICommand downCommand;
    private RepeatButton upButton;
    private RepeatButton downButton;
    private bool isDaysVisibile;
    private bool isHoursVisible;
    private bool isMinutesVisible;
    private bool isSecondsVisible;
    private bool isAppendDigit;
    private bool isSpinButtonPressed;
    private string keyCatch;
    private bool isMinMaxValidate;
    private string tempTimeSpan;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty StepIntervalProperty;
    public static DependencyProperty MinValueProperty;
    public static DependencyProperty MaxValueProperty;
    public static DependencyProperty FormatProperty;
    public static DependencyProperty NullStringProperty;
    public static DependencyProperty ShowArrowButtonsProperty;
    public static DependencyProperty IncrementOnScrollingProperty;
    public static DependencyProperty AllowNullProperty;
    private PropertyChangedCallback ValueChanged;
    public static DependencyProperty EnableTouchProperty;
    public static DependencyProperty EnableExtendedScrollingProperty;
    [CompilerGeneratedAttribute]
private TimeSpanElements <SelectedSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<int, char>, bool> CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<int, char>, bool> CS$<>9__CachedAnonymousMethodDelegatef;
    private TimeSpanElements SelectedSpan { get; private set; }
    public Nullable`1<TimeSpan> Value { get; public set; }
    public TimeSpan MaxValue { get; public set; }
    public TimeSpan MinValue { get; public set; }
    public TimeSpan StepInterval { get; public set; }
    public string Format { get; public set; }
    public string NullString { get; public set; }
    public bool ShowArrowButtons { get; public set; }
    public bool IncrementOnScrolling { get; public set; }
    public bool AllowNull { get; public set; }
    public ICommand UpCommand { get; }
    public ICommand DownCommand { get; }
    public bool EnableTouch { get; public set; }
    public bool EnableExtendedScrolling { get; public set; }
    private static TimeSpanEdit();
    private void TimeSpanEdit_Loaded(object sender, RoutedEventArgs e);
    private void ExecuteClearCommand(object sender, ExecutedRoutedEventArgs e);
    private void CanExecuteClearCommand(object sender, CanExecuteRoutedEventArgs e);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private TimeSpanElements get_SelectedSpan();
    [CompilerGeneratedAttribute]
private void set_SelectedSpan(TimeSpanElements value);
    public Nullable`1<TimeSpan> get_Value();
    public void set_Value(Nullable`1<TimeSpan> value);
    public TimeSpan get_MaxValue();
    public void set_MaxValue(TimeSpan value);
    public TimeSpan get_MinValue();
    public void set_MinValue(TimeSpan value);
    public TimeSpan get_StepInterval();
    public void set_StepInterval(TimeSpan value);
    public string get_Format();
    public void set_Format(string value);
    public string get_NullString();
    public void set_NullString(string value);
    public bool get_ShowArrowButtons();
    public void set_ShowArrowButtons(bool value);
    public bool get_IncrementOnScrolling();
    public void set_IncrementOnScrolling(bool value);
    public bool get_AllowNull();
    public void set_AllowNull(bool value);
    public void add_ValueChanged(PropertyChangedCallback value);
    public void remove_ValueChanged(PropertyChangedCallback value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public virtual void OnApplyTemplate();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    public ICommand get_UpCommand();
    public ICommand get_DownCommand();
    private bool HandleRight();
    private void HandleLeft();
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnSelectionChanged(RoutedEventArgs e);
    private void UpdateSelectedSpan();
    private void AppendDigit(int val);
    private void IncreaseorDecreaseSpanValue(bool isUp);
    internal void UpExecute();
    internal void DownExecute();
    private bool UpCanExecute();
    private bool DownCanExecute();
    public static void OnNullStringChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void OnNullStringChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMinValueChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void OnMaxValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnMaxValueChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void OnMinValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnFormatStringChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void OnFormatStringChanged(DependencyPropertyChangedEventArgs args);
    public static void OnAllowNullChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void OnAllowNullChanged(DependencyPropertyChangedEventArgs args);
    public static void OnValueChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void OnValueChanged(DependencyPropertyChangedEventArgs args);
    private void CreateDisplayText();
    public bool get_EnableTouch();
    public void set_EnableTouch(bool value);
    public static void OnEnableTouchChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnEnableTouchChanged(DependencyPropertyChangedEventArgs args);
    public bool get_EnableExtendedScrolling();
    public void set_EnableExtendedScrolling(bool value);
    public static void OnEnableExtendedScrollingChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnEnableExtendedScrollingChanged(DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
private void <get_UpCommand>b__0(object param);
    [CompilerGeneratedAttribute]
private bool <get_UpCommand>b__1(object param);
    [CompilerGeneratedAttribute]
private void <get_DownCommand>b__4(object param);
    [CompilerGeneratedAttribute]
private bool <get_DownCommand>b__5(object param);
    [CompilerGeneratedAttribute]
private static bool <CreateDisplayText>b__8(char c);
    [CompilerGeneratedAttribute]
private static bool <CreateDisplayText>b__9(KeyValuePair`2<int, char> x);
    [CompilerGeneratedAttribute]
private static bool <CreateDisplayText>b__b(KeyValuePair`2<int, char> x);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.TitleBar : ContentControl {
    public static DependencyProperty IconProperty;
    public ImageSource Icon { get; public set; }
    internal Window MainWindow { get; }
    private static TitleBar();
    public virtual void OnApplyTemplate();
    public ImageSource get_Icon();
    public void set_Icon(ImageSource value);
    internal Window get_MainWindow();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.TitleButton : Button {
    public static DependencyProperty IsCloseButtonProperty;
    public bool IsCloseButton { get; internal set; }
    private static TitleButton();
    public bool get_IsCloseButton();
    internal void set_IsCloseButton(bool value);
}
public enum Syncfusion.Windows.Shared.TodayButtonAction : Enum {
    public int value__;
    public static TodayButtonAction Date;
    public static TodayButtonAction DateTime;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.TrippleBorder : Decorator {
    private static int CornerRadiusOffset;
    private Rect m_rectOutside;
    private Rect m_rectBorder;
    private Rect m_rectInside;
    private Pen m_outsidePen;
    private Pen m_borderPen;
    private Pen m_insidePen;
    private UIElement m_adornerChild;
    private PropertyChangedCallback BorderBrushChanged;
    private PropertyChangedCallback BorderThicknessChanged;
    private PropertyChangedCallback InsideBorderBrushChanged;
    private PropertyChangedCallback InsideBorderThicknessChanged;
    private PropertyChangedCallback OutsideBorderBrushChanged;
    private PropertyChangedCallback OutsideBorderThicknessChanged;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty InsideBorderBrushProperty;
    public static DependencyProperty InsideBorderThicknessProperty;
    public static DependencyProperty OutsideBorderBrushProperty;
    public static DependencyProperty OutsideBorderThicknessProperty;
    public UIElement AdornerChild { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public Brush BorderBrush { get; public set; }
    public double BorderThickness { get; public set; }
    public Brush InsideBorderBrush { get; public set; }
    public double InsideBorderThickness { get; public set; }
    public Brush OutsideBorderBrush { get; public set; }
    public double OutsideBorderThickness { get; public set; }
    public Brush Background { get; public set; }
    protected IEnumerator LogicalChildren { get; }
    protected int VisualChildrenCount { get; }
    private static TrippleBorder();
    public UIElement get_AdornerChild();
    public void set_AdornerChild(UIElement value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public double get_BorderThickness();
    public void set_BorderThickness(double value);
    public Brush get_InsideBorderBrush();
    public void set_InsideBorderBrush(Brush value);
    public double get_InsideBorderThickness();
    public void set_InsideBorderThickness(double value);
    public Brush get_OutsideBorderBrush();
    public void set_OutsideBorderBrush(Brush value);
    public double get_OutsideBorderThickness();
    public void set_OutsideBorderThickness(double value);
    public Brush get_Background();
    public void set_Background(Brush value);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Visual GetVisualChild(int index);
    protected virtual IEnumerator get_LogicalChildren();
    protected virtual int get_VisualChildrenCount();
    private static void OnBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnInsideBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnInsideBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOutsideBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnOutsideBorderThicknessChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private void OnBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private void OnInsideBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private void OnInsideBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private void OnOutsideBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    private void OnOutsideBorderThicknessChanged(DependencyPropertyChangedEventArgs e);
    private void ChangePen(Pen& pen, Brush brush, double thickness);
    public void add_BorderBrushChanged(PropertyChangedCallback value);
    public void remove_BorderBrushChanged(PropertyChangedCallback value);
    public void add_BorderThicknessChanged(PropertyChangedCallback value);
    public void remove_BorderThicknessChanged(PropertyChangedCallback value);
    public void add_InsideBorderBrushChanged(PropertyChangedCallback value);
    public void remove_InsideBorderBrushChanged(PropertyChangedCallback value);
    public void add_InsideBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_InsideBorderThicknessChanged(PropertyChangedCallback value);
    public void add_OutsideBorderBrushChanged(PropertyChangedCallback value);
    public void remove_OutsideBorderBrushChanged(PropertyChangedCallback value);
    public void add_OutsideBorderThicknessChanged(PropertyChangedCallback value);
    public void remove_OutsideBorderThicknessChanged(PropertyChangedCallback value);
}
internal static class Syncfusion.Windows.Shared.TypeConverterHelper : object {
    internal static bool ChanngeTypeToBool(object parameter);
    public static object ChangeType(object value, Type type);
    public static object ChangeType(object value, Type type, IFormatProvider provider);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("True")]
[SkinTypeAttribute]
public class Syncfusion.Windows.Shared.UpDown : Control {
    public static RoutedCommand m_downValue;
    public static RoutedCommand m_upValue;
    private Border border;
    private DoubleTextBox t1;
    private DoubleTextBox textbox;
    private RepeatButton Upbutton;
    private RepeatButton Downbutton;
    private Nullable`1<double> m_value;
    private Nullable`1<double> m_oldvalue;
    private Nullable`1<double> m_exvalue;
    private CommandBinding downValueBinding;
    private CommandBinding upValueBinding;
    private PropertyChangedCallback AllowEditChanged;
    private PropertyChangedCallback StepChanged;
    private PropertyChangedCallback UseNullOptionChanged;
    private PropertyChangedCallback ValueChanged;
    private ValueChangingEventHandler ValueChanging;
    private PropertyChangedCallback MinValueChanged;
    private PropertyChangedCallback IsScrollingOnCircleChanged;
    private PropertyChangedCallback MaxValueChanged;
    private PropertyChangedCallback NumberFormatInfoChanged;
    private PropertyChangedCallback ZeroColorChanged;
    private PropertyChangedCallback NegativeForegroundChanged;
    private PropertyChangedCallback MinValidationChanged;
    private PropertyChangedCallback MaxValidationChanged;
    private PropertyChangedCallback CursorTemplateChanged;
    private PropertyChangedCallback IsValueNegativeChanged;
    private PropertyChangedCallback NullValueTextChanged;
    private PropertyChangedCallback FocusedBackgroundChanged;
    private PropertyChangedCallback FocusedForegroundChanged;
    private PropertyChangedCallback FocusedBorderBrushChanged;
    public static DependencyProperty IsScrollingOnCircleProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty NumberDecimalDigitsProperty;
    public static DependencyProperty GroupSeperatorEnabledProperty;
    public static DependencyProperty IsFocusedProperty;
    public static DependencyProperty NullValueTextProperty;
    internal static DependencyProperty AnimationShiftProperty;
    public static DependencyProperty IsValueNegativeProperty;
    public static DependencyProperty CursorBackgroundProperty;
    public static DependencyProperty CursorBorderBrushProperty;
    public static DependencyProperty CursorWidthProperty;
    public static DependencyProperty CursorBorderThicknessProperty;
    public static DependencyProperty CursorTemplateProperty;
    public static DependencyProperty CursorVisibleProperty;
    internal static DependencyProperty CursorPositionProperty;
    public static DependencyProperty SelectionBrushProperty;
    public static DependencyProperty EnableRangeAdornerProperty;
    public static DependencyProperty RangeAdornerBackgroundProperty;
    public static DependencyProperty EnableExtendedScrollingProperty;
    public static DependencyProperty EnableTouchProperty;
    public static DependencyProperty UpDownForegroundProperty;
    public static DependencyProperty UpDownBackgroundProperty;
    public static DependencyProperty UpDownBorderBrushProperty;
    public static DependencyProperty TextAlignmentProperty;
    public static DependencyProperty ApplyZeroColorProperty;
    public static DependencyProperty EnableNegativeColorsProperty;
    public static DependencyProperty CultureProperty;
    public static DependencyProperty EnableFocusedColorsProperty;
    public static DependencyProperty FocusedBackgroundProperty;
    public static DependencyProperty IsUpdownFocusedProperty;
    public static DependencyProperty FocusedForegroundProperty;
    public static DependencyProperty FocusedBorderBrushProperty;
    public static DependencyProperty NegativeBackgroundProperty;
    public static DependencyProperty NegativeBorderBrushProperty;
    public static DependencyProperty AllowEditProperty;
    public static DependencyProperty MinValidationProperty;
    public static DependencyProperty MaxValidationProperty;
    public static DependencyProperty MinValueOnExceedMinDigitProperty;
    public static DependencyProperty MaxValueOnExceedMaxDigitProperty;
    public static DependencyProperty NegativeForegroundProperty;
    public static DependencyProperty ZeroColorProperty;
    public static DependencyProperty UseNullOptionProperty;
    public static DependencyProperty NumberFormatInfoProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty NullValueProperty;
    public static DependencyProperty ValueProperty;
    public static DependencyProperty MinValueProperty;
    public static DependencyProperty MaxValueProperty;
    public static DependencyProperty StepProperty;
    public static DependencyProperty AnimationSpeedProperty;
    private bool nagativevaluechanged;
    private bool minMaxChanged;
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
internal double AnimationShift { get; internal set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool IsValueNegative { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public Brush CursorBackground { get; public set; }
    public bool IsScrollingOnCircle { get; public set; }
    public bool IsReadOnly { get; public set; }
    public int NumberDecimalDigits { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public Brush CursorBorderBrush { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public double CursorWidth { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public Thickness CursorBorderThickness { get; public set; }
    [BrowsableAttribute("False")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public ControlTemplate CursorTemplate { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
public bool CursorVisible { get; public set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
internal Thickness CursorPosition { get; internal set; }
    [ObsoleteAttribute("Property will not help due to internal arhitecture changes")]
[BrowsableAttribute("False")]
public Brush SelectionBrush { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Brush UpDownForeground { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public Brush UpDownBackground { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Brush UpDownBorderBrush { get; public set; }
    public TextAlignment TextAlignment { get; public set; }
    public bool ApplyZeroColor { get; public set; }
    public bool EnableNegativeColors { get; public set; }
    public CultureInfo Culture { get; public set; }
    public bool EnableFocusedColors { get; public set; }
    public Brush FocusedBackground { get; public set; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool IsUpdownFocused { get; public set; }
    public Brush FocusedForeground { get; public set; }
    public Brush FocusedBorderBrush { get; public set; }
    public Brush NegativeBackground { get; public set; }
    public Brush NegativeBorderBrush { get; public set; }
    public bool AllowEdit { get; public set; }
    public MinValidation MinValidation { get; public set; }
    public MaxValidation MaxValidation { get; public set; }
    public bool MinValueOnExceedMinDigit { get; public set; }
    public bool MaxValueOnExceedMaxDigit { get; public set; }
    public Brush NegativeForeground { get; public set; }
    public Brush ZeroColor { get; public set; }
    public bool UseNullOption { get; public set; }
    public NumberFormatInfo NumberFormatInfo { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public Nullable`1<double> NullValue { get; public set; }
    public Nullable`1<double> Value { get; public set; }
    public double MinValue { get; public set; }
    public double MaxValue { get; public set; }
    public double Step { get; public set; }
    public double AnimationSpeed { get; public set; }
    public bool IsKeyboardFocused { get; }
    public bool GroupSeperatorEnabled { get; public set; }
    public bool IsFocused { get; internal set; }
    public string NullValueText { get; public set; }
    public bool EnableRangeAdorner { get; public set; }
    public Brush RangeAdornerBackground { get; public set; }
    public bool EnableExtendedScrolling { get; public set; }
    public bool EnableTouch { get; public set; }
    private static UpDown();
    private void UpDown_Unloaded(object sender, RoutedEventArgs e);
    private void UpDown_Loaded(object sender, RoutedEventArgs e);
    private void UpDown_LostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e);
    public void add_AllowEditChanged(PropertyChangedCallback value);
    public void remove_AllowEditChanged(PropertyChangedCallback value);
    public void add_StepChanged(PropertyChangedCallback value);
    public void remove_StepChanged(PropertyChangedCallback value);
    public void add_UseNullOptionChanged(PropertyChangedCallback value);
    public void remove_UseNullOptionChanged(PropertyChangedCallback value);
    public void add_ValueChanged(PropertyChangedCallback value);
    public void remove_ValueChanged(PropertyChangedCallback value);
    public void add_ValueChanging(ValueChangingEventHandler value);
    public void remove_ValueChanging(ValueChangingEventHandler value);
    public void add_MinValueChanged(PropertyChangedCallback value);
    public void remove_MinValueChanged(PropertyChangedCallback value);
    public void add_IsScrollingOnCircleChanged(PropertyChangedCallback value);
    public void remove_IsScrollingOnCircleChanged(PropertyChangedCallback value);
    public void add_MaxValueChanged(PropertyChangedCallback value);
    public void remove_MaxValueChanged(PropertyChangedCallback value);
    public void add_NumberFormatInfoChanged(PropertyChangedCallback value);
    public void remove_NumberFormatInfoChanged(PropertyChangedCallback value);
    public void add_ZeroColorChanged(PropertyChangedCallback value);
    public void remove_ZeroColorChanged(PropertyChangedCallback value);
    public void add_NegativeForegroundChanged(PropertyChangedCallback value);
    public void remove_NegativeForegroundChanged(PropertyChangedCallback value);
    public void add_MinValidationChanged(PropertyChangedCallback value);
    public void remove_MinValidationChanged(PropertyChangedCallback value);
    public void add_MaxValidationChanged(PropertyChangedCallback value);
    public void remove_MaxValidationChanged(PropertyChangedCallback value);
    public void add_CursorTemplateChanged(PropertyChangedCallback value);
    public void remove_CursorTemplateChanged(PropertyChangedCallback value);
    public void add_IsValueNegativeChanged(PropertyChangedCallback value);
    public void remove_IsValueNegativeChanged(PropertyChangedCallback value);
    public void add_NullValueTextChanged(PropertyChangedCallback value);
    public void remove_NullValueTextChanged(PropertyChangedCallback value);
    public void add_FocusedBackgroundChanged(PropertyChangedCallback value);
    public void remove_FocusedBackgroundChanged(PropertyChangedCallback value);
    public void add_FocusedForegroundChanged(PropertyChangedCallback value);
    public void remove_FocusedForegroundChanged(PropertyChangedCallback value);
    public void add_FocusedBorderBrushChanged(PropertyChangedCallback value);
    public void remove_FocusedBorderBrushChanged(PropertyChangedCallback value);
    internal double get_AnimationShift();
    internal void set_AnimationShift(double value);
    public bool get_IsValueNegative();
    public void set_IsValueNegative(bool value);
    public Brush get_CursorBackground();
    public void set_CursorBackground(Brush value);
    public bool get_IsScrollingOnCircle();
    public void set_IsScrollingOnCircle(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public int get_NumberDecimalDigits();
    public void set_NumberDecimalDigits(int value);
    public Brush get_CursorBorderBrush();
    public void set_CursorBorderBrush(Brush value);
    public double get_CursorWidth();
    public void set_CursorWidth(double value);
    public Thickness get_CursorBorderThickness();
    public void set_CursorBorderThickness(Thickness value);
    public ControlTemplate get_CursorTemplate();
    public void set_CursorTemplate(ControlTemplate value);
    public bool get_CursorVisible();
    public void set_CursorVisible(bool value);
    internal Thickness get_CursorPosition();
    internal void set_CursorPosition(Thickness value);
    public Brush get_SelectionBrush();
    public void set_SelectionBrush(Brush value);
    public Brush get_UpDownForeground();
    public void set_UpDownForeground(Brush value);
    public Brush get_UpDownBackground();
    public void set_UpDownBackground(Brush value);
    public Brush get_UpDownBorderBrush();
    public void set_UpDownBorderBrush(Brush value);
    public TextAlignment get_TextAlignment();
    public void set_TextAlignment(TextAlignment value);
    public bool get_ApplyZeroColor();
    public void set_ApplyZeroColor(bool value);
    public bool get_EnableNegativeColors();
    public void set_EnableNegativeColors(bool value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_EnableFocusedColors();
    public void set_EnableFocusedColors(bool value);
    public Brush get_FocusedBackground();
    public void set_FocusedBackground(Brush value);
    public bool get_IsUpdownFocused();
    public void set_IsUpdownFocused(bool value);
    public Brush get_FocusedForeground();
    public void set_FocusedForeground(Brush value);
    public Brush get_FocusedBorderBrush();
    public void set_FocusedBorderBrush(Brush value);
    public Brush get_NegativeBackground();
    public void set_NegativeBackground(Brush value);
    public Brush get_NegativeBorderBrush();
    public void set_NegativeBorderBrush(Brush value);
    public bool get_AllowEdit();
    public void set_AllowEdit(bool value);
    public MinValidation get_MinValidation();
    public void set_MinValidation(MinValidation value);
    public MaxValidation get_MaxValidation();
    public void set_MaxValidation(MaxValidation value);
    public bool get_MinValueOnExceedMinDigit();
    public void set_MinValueOnExceedMinDigit(bool value);
    public bool get_MaxValueOnExceedMaxDigit();
    public void set_MaxValueOnExceedMaxDigit(bool value);
    public Brush get_NegativeForeground();
    public void set_NegativeForeground(Brush value);
    public Brush get_ZeroColor();
    public void set_ZeroColor(Brush value);
    public bool get_UseNullOption();
    public void set_UseNullOption(bool value);
    public NumberFormatInfo get_NumberFormatInfo();
    public void set_NumberFormatInfo(NumberFormatInfo value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public Nullable`1<double> get_NullValue();
    public void set_NullValue(Nullable`1<double> value);
    public Nullable`1<double> get_Value();
    public void set_Value(Nullable`1<double> value);
    public double get_MinValue();
    public void set_MinValue(double value);
    public double get_MaxValue();
    public void set_MaxValue(double value);
    public double get_Step();
    public void set_Step(double value);
    public double get_AnimationSpeed();
    public void set_AnimationSpeed(double value);
    public bool get_IsKeyboardFocused();
    public bool get_GroupSeperatorEnabled();
    public void set_GroupSeperatorEnabled(bool value);
    public bool get_IsFocused();
    internal void set_IsFocused(bool value);
    public string get_NullValueText();
    public void set_NullValueText(string value);
    public bool get_EnableRangeAdorner();
    public void set_EnableRangeAdorner(bool value);
    public Brush get_RangeAdornerBackground();
    public void set_RangeAdornerBackground(Brush value);
    public bool get_EnableExtendedScrolling();
    public void set_EnableExtendedScrolling(bool value);
    public bool get_EnableTouch();
    public void set_EnableTouch(bool value);
    private static void OnFocusedBackgroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnFocusedForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnFocusedBorderBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsValueNegativeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnNullValueTextChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnCursorTemplateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnAllowEditChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnNegativeForegroundChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMinValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMaxValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnNumberFormatInfoChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnZeroColorChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsScrollingOnClicleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMaxValidationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnMinValidationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnUseNullOptionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnStepChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnFocusedBackgroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnFocusedForegroundChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnFocusedBorderBrushChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnCursorTemplateChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnIsValueNegativeChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnNullValueTextChanged(DependencyPropertyChangedEventArgs e);
    private static object CoerceValue(DependencyObject d, object baseValue);
    protected virtual void OnAllowEditChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnNegativeForegroundChanged(DependencyPropertyChangedEventArgs e);
    private void OnIsScrollingOnClicleChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinValueChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMaxValueChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnNumberFormatInfoChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnZeroColorChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMaxValidationChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMinValidationChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnUseNullOptionChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnStepChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnValueChanged(DependencyPropertyChangedEventArgs e);
    private void ChangeUpValue(object sender, ExecutedRoutedEventArgs e);
    private void ChangeDownValue(object sender, ExecutedRoutedEventArgs e);
    private void ChangeValue(bool IsUp);
    private void UpdateBackground();
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    private void UpDown_LostFocus(object sender, RoutedEventArgs e);
    private void UpDown_GotFocus(object sender, RoutedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void Animation();
    internal void Dispose(bool disposing);
    public void SelectAll();
    public sealed virtual void Dispose();
    public virtual void OnApplyTemplate();
    private void textbox_ValueChanging(object sender, ValueChangingEventArgs e);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.UpDownCursor : Control {
    private static UpDownCursor();
}
[DesignTimeVisibleAttribute("False")]
public static class Syncfusion.Windows.Shared.Utils.DataUtils : object {
    public static object GetObjectByPath(object obj, string path);
    public static double ConvertToDouble(object obj);
    public static double GetDoubleByPath(object obj, string path);
}
public class Syncfusion.Windows.Shared.ValueChangingEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    public object NewValue { get; public set; }
    public object OldValue { get; public set; }
    [CompilerGeneratedAttribute]
public object get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(object value);
    [CompilerGeneratedAttribute]
public object get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(object value);
}
internal class Syncfusion.Windows.Shared.ValueToIndexConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.VectorImageUtil : object {
    public static void SaveImage(string fileName, FrameworkElement element);
    public static void SaveXAML(string fileName, ImageSource imageContent);
    public static Visual ImportXaml(ImageSource imageSourceContent, FlowDocument document);
}
internal class Syncfusion.Windows.Shared.VirtualizingItemsCollection : object {
    private int _ItemsCount;
    private int _ItemsPerPage;
    private int firstVisibleIndex;
    private int lastVisibleIndex;
    private int offset;
    public int CountAfter { get; }
    public int CountBefore { get; }
    public int FirstVisibleIndex { get; }
    public int FreePosition { get; }
    public bool HasMoreItems { get; }
    public bool HasReachedEnd { get; }
    public bool HasVisibleItems { get; }
    public int ItemsCount { get; private set; }
    public int ItemsPerPage { get; private set; }
    public int LastVisibleIndex { get; }
    public int Offset { get; private set; }
    public bool OffsetIsMaximum { get; }
    public bool PageFull { get; }
    public int VisibleItemsCount { get; }
    public VirtualizingItemsCollection(int itemsPerPage, int itemsCount);
    public VirtualizingItemsCollection(int itemsPerPage, int itemsCount, int offset);
    public int get_CountAfter();
    public int get_CountBefore();
    public int get_FirstVisibleIndex();
    public int get_FreePosition();
    public bool get_HasMoreItems();
    public bool get_HasReachedEnd();
    public bool get_HasVisibleItems();
    public int get_ItemsCount();
    private void set_ItemsCount(int value);
    public int get_ItemsPerPage();
    private void set_ItemsPerPage(int value);
    public int get_LastVisibleIndex();
    public int get_Offset();
    private void set_Offset(int value);
    public bool get_OffsetIsMaximum();
    public bool get_PageFull();
    public int get_VisibleItemsCount();
    public void ModifyOffsetAfterItemAdded(int newIndexPosition, int count);
    public void ModifyOffsetAfterItemRemoved(int index, int count);
    private int GetFirstVisibleIndex();
    private int GetLastVisibleIndex();
    public int GetPosition(int index, bool isLooping, int selectedIndex);
    private bool IsBeforeVisibleRange(int index);
    public void Move(int displacement);
    public void MoveLeft(int displacement);
    public void MoveRight(int displacement);
    public void TryFill();
}
internal abstract class Syncfusion.Windows.Shared.VirtualizingPanelHandler : object {
    private VisibleItemsHandler initialPathPositionStates;
    private bool isInitialized;
    private CarouselPathHelper carouselPathHelper;
    private TimeSpan duration;
    private TimeSpan lastRender;
    private TimeSpan totalRunningTime;
    private ItemMovementState state;
    public CarouselPathHelper CarouselPathHelper { get; protected set; }
    public TimeSpan Duration { get; public set; }
    public VisibleItemsHandler InitialPathPositionStates { get; public set; }
    public bool IsInitialized { get; }
    public TimeSpan LastRender { get; protected set; }
    public ItemMovementState State { get; protected internal set; }
    public TimeSpan TotalRunningTime { get; protected set; }
    public CarouselPathHelper get_CarouselPathHelper();
    protected void set_CarouselPathHelper(CarouselPathHelper value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public VisibleItemsHandler get_InitialPathPositionStates();
    public void set_InitialPathPositionStates(VisibleItemsHandler value);
    public bool get_IsInitialized();
    public TimeSpan get_LastRender();
    protected void set_LastRender(TimeSpan value);
    public ItemMovementState get_State();
    protected internal void set_State(ItemMovementState value);
    public TimeSpan get_TotalRunningTime();
    protected void set_TotalRunningTime(TimeSpan value);
    public abstract virtual void CalculateItemsToAdd(VisibleRangeAction& action, LinkedList`1& itemsToAdd, bool isLooping, int selectedIndex);
    public abstract virtual void AddItemToMove(VisiblePanelItem item, bool isLooping, int selectedIndex, bool isNextPage, bool isPreviousPage);
    protected abstract virtual void Animate(double percentageDone);
    public abstract virtual void EndItemMovement();
    public abstract virtual void Reverse();
    public abstract virtual IList`1<VisiblePanelItem> GetItemsToRemoveEndofArrangeOverride();
    public virtual void BeginItemMovement(TimeSpan beginTime);
    public void Initialize(CarouselPathHelper PathHelper, VisibleItemsHandler positionStates);
    protected virtual void Initialize();
    private static Point CalculateNewPosition(UIElement item, CarouselPathHelper carouselPathHelper);
    public static MatrixTransform RecalculateItemPosition(UIElement item, CarouselPathHelper carouselPathHelper);
    private static void CustomPathCenterItem(UIElement item, Matrix& itemTransform, CarouselPathHelper carouselPathHelper);
    protected static void SetPathFractionManagerForItem(UIElement item, double startPathFraction, double endPathFraction);
    protected static void EndItemMovement(List`1<VisiblePanelItem> collection, CarouselPathHelper animationPath);
    public void Update(TimeSpan currentTime);
    public double GetPercentageDone();
    public TimeSpan GetTimeLeft();
    protected static void ReverseAnimationdata(List`1<VisiblePanelItem> collection);
    protected static void UpdateCustomPathItemFraction(UIElement item, double animationPercentageDone);
    protected void UpdateItemTransformation(UIElement item);
}
internal class Syncfusion.Windows.Shared.VirtualizingPanelItemMoveHandler : VirtualizingPanelHandler {
    private VirtualizingItemsCollection _VirtualizingItemsCollection;
    private List`1<VisiblePanelItem> newItemsToExit;
    private List`1<VisiblePanelItem> newItemsToStay;
    private List`1<VisiblePanelItem> oldItemsToExit;
    private List`1<VisiblePanelItem> oldItemsToStay;
    private int pathDisplacement;
    public VirtualizingItemsCollection Collection { get; public set; }
    public int PathDisplacement { get; }
    public VirtualizingPanelItemMoveHandler(int displacement, CarouselPanelHelper infoProvider);
    public VirtualizingItemsCollection get_Collection();
    public void set_Collection(VirtualizingItemsCollection value);
    public int get_PathDisplacement();
    public virtual void AddItemToMove(VisiblePanelItem item, bool isLooping, int selectedIndex, bool isNextPage, bool isPreviousPage);
    protected virtual void Initialize();
    private void AddExistingItem(VisiblePanelItem pair, bool isLooping, int selectedIndex, bool isNextPage, bool isPreviousPage);
    public double CalculateNextPathFraction(int index, bool isLooping, int selectedIndex);
    public double GetExitPathFraction();
    private void AddNewItem(VisiblePanelItem pair, bool isLooping, int selectedIndex, bool isNextPage, bool isPreviousPage);
    private void SetStartingPathFraction(UIElement item);
    private void CalculateNewItemAnimation(VisiblePanelItem pair, bool isLooping, int selectedIndex, bool isNextPage, bool isPreviousPage);
    public virtual void CalculateItemsToAdd(VisibleRangeAction& action, LinkedList`1& itemsToAdd, bool isLooping, int selectedIndex);
    public virtual IList`1<VisiblePanelItem> GetItemsToRemoveEndofArrangeOverride();
    protected virtual void Animate(double percentageDone);
    private void Animate(List`1<VisiblePanelItem> collection, double percentageDone);
    public virtual void EndItemMovement();
    public bool IsOpposite(int displacement);
    public virtual void Reverse();
    private void ReverseOldAndNewItems();
}
public class Syncfusion.Windows.Shared.VisibilityNegationConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.VisibleDate : ValueType {
    public int VisibleYear;
    public int VisibleDay;
    public int VisibleMonth;
    public VisibleDate(int year, int month, int day);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.Windows.Shared.VisibleItemsHandler : object {
    private static int AvailablePositionDigit;
    private VisiblePanelItem[] positions;
    public int Count { get; }
    public VisiblePanelItem Item { get; public set; }
    public VisibleItemsHandler(int visiblePositions);
    public int get_Count();
    public VisiblePanelItem get_Item(int positionIndex);
    public void set_Item(int positionIndex, VisiblePanelItem value);
    public int GetFreePositionsLeft();
    public int GetFreePositionsRight();
    public VisiblePanelItem GetItemAtPosition(int positionIndex);
    public int GetLargestItemIndex();
    public int GetUsedPositions();
    public void SetItemAtPosition(int positionIndex, VisiblePanelItem item);
    public virtual string ToString();
}
internal class Syncfusion.Windows.Shared.VisiblePanelItem : object {
    private UIElement _Child;
    private int _Index;
    public UIElement Child { get; public set; }
    public int Index { get; public set; }
    public VisiblePanelItem(UIElement child, int index);
    public UIElement get_Child();
    public void set_Child(UIElement value);
    public int get_Index();
    public void set_Index(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal enum Syncfusion.Windows.Shared.VisibleRangeAction : Enum {
    public int value__;
    public static VisibleRangeAction RemoveFromStart;
    public static VisibleRangeAction RemoveFromEnd;
    public static VisibleRangeAction AddFromStart;
    public static VisibleRangeAction AddFromEnd;
}
public enum Syncfusion.Windows.Shared.VisualMode : Enum {
    public int value__;
    public static VisualMode Standard;
    public static VisualMode CustomPath;
}
[ValueConversionAttribute("System.Windows.Media.Visual", "System.Windows.Media.Drawing")]
internal class Syncfusion.Windows.Shared.VisualToDrawingConverter : object {
    private DrawingHelper m_helper;
    private Visual m_topMostVisual;
    private int m_convertionChainCount;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Shared.VisualUtils : object {
    private static string RootPopupTypeName;
    public static Type RootPopupType;
    private static VisualUtils();
    public static Visual FindRootVisual(Visual startingFrom);
    public static Visual FindAncestor(Visual startingFrom, Type typeAncestor);
    public static Visual FindLogicalAncestor(Visual startingFrom, Type typeAncestor);
    public static Visual FindDescendant(Visual startingFrom, Type typeDescendant);
    public static Visual FindDescendant(Visual startingFrom, string typeNameDescendant);
    public static IEnumerable`1<Visual> EnumChildrenOfType(Visual rootelement, Type typeChild);
    public static Panel GetItemsPanel(ItemsControl owner, Type panelType);
    public static ItemsControl GetItemsControlFromChildren(FrameworkElement element);
    public static IEnumerable`1<DependencyObject> EnumLogicalChildrenOfType(DependencyObject rootelement, Type typeChild);
    public static bool IsDescendant(DependencyObject reference, DependencyObject node);
    public static void InvalidateParentMeasure(FrameworkElement element);
    public static FrameworkElement FindSomeParent(FrameworkElement rootelement, Type typeParent);
    public static T FindVisualParent(DependencyObject child);
    [ObsoleteAttribute("SetDependencyPropretyUsedByAnimation is deprecated, please use SetDependencyPropertyUsedByAnimation instead.")]
public static void SetDependencyPropretyUsedByAnimation(UIElement targetElement, DependencyProperty dependencyProperty, double value);
    public static void SetDependencyPropertyUsedByAnimation(UIElement targetElement, DependencyProperty dependencyProperty, double value);
    public static bool HasChildOfType(Visual rootelEment, Type searchType);
    public static Point PointToScreen(UIElement visual, Point point);
    public static Point GetPointRelativeTo(UIElement visual, UIElement relativeTo);
    private static DependencyObject FindParent(DependencyObject d);
    public static Page GetPageFromChildren(FrameworkElement element);
    public static Window GetWindowFromChildren(FrameworkElement element);
}
public enum Syncfusion.Windows.Shared.WatermarkTextMode : Enum {
    public int value__;
    public static WatermarkTextMode HideTextOnFocus;
    public static WatermarkTextMode HideTextOnTyping;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.WeekNumberCell : Cell {
    private CornerRadius mcornerRadius;
    public CornerRadius CornerRadius { get; public set; }
    private static WeekNumberCell();
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    protected internal void UpdateCellTemplateAndSelector(DataTemplate template, DataTemplateSelector selector);
    protected internal void SetStyle(Style style);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void Dispose();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.WeekNumberCellPanel : Cell {
    public static DependencyProperty WeekNumberProperty;
    public string WeekNumber { get; public set; }
    private static WeekNumberCellPanel();
    public string get_WeekNumber();
    public void set_WeekNumber(string value);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.WeekNumberGridPanel : CalendarEditGrid {
    private static int DEFROWSCOUNT;
    private static int DEFCOLUMNSCOUNT;
    public static int NumberOfWeeks;
    private CalendarEdit mparentCalendar;
    protected internal CalendarEdit ParentCalendar { get; protected internal set; }
    private static WeekNumberGridPanel();
    protected internal CalendarEdit get_ParentCalendar();
    protected internal void set_ParentCalendar(CalendarEdit value);
    protected void UpdateParent();
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
    public virtual void Initialize(VisibleDate date, CultureInfo culture, Calendar calendar);
    protected internal void SetWeekNumber(VisibleDate date, CultureInfo culture, Calendar calendar);
    protected internal void SetWeekCellContent();
    public virtual void SetIsSelected(VisibleDate date);
    protected virtual Cell CreateCell();
    public void Dispose();
    protected virtual void Dispose(bool disposing);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.WeekNumbersGrid : CalendarEditGrid {
    private static int DEFCOLUMNSCOUNT;
    private static int DEFROWSCOUNT;
    public ArrayList WeekNumberCells { get; public set; }
    private static WeekNumbersGrid();
    public ArrayList get_WeekNumberCells();
    public void set_WeekNumberCells(ArrayList value);
    protected internal void SetWeekNumbers(List`1<WeekNumberCell> list);
    protected internal void UpdateTemplateAndSelector(DataTemplate template, DataTemplateSelector selector);
    protected internal void UpdateStyles(Style style);
    protected void UpdateParent();
    protected virtual Cell CreateCell();
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
}
public class Syncfusion.Windows.Shared.WindowInterop : object {
    internal static int WM_SYSCOMMAND;
    internal static int WM_LBUTTONUP;
    internal static int TPM_RETURNCMD;
    internal static int MONITOR_DEFAULTTONEAREST;
    internal static int WINDOWSTYLENONE;
    internal static int SetWindowPos(IntPtr hwnd, int hwndInsertAfter, int x, int y, int cx, int cy, int wflags);
    internal static bool GetWindowRect(IntPtr hwnd, RECT& rect);
    internal static void DwmExtendFrameIntoClientArea(IntPtr hwnd, MARGINS& pmarInset);
    private static void DwmIsCompositionEnabled(Boolean& pfEnabled);
    internal static bool GetMonitorInfo(IntPtr hMonitor, MONITORINFO lpmi);
    internal static IntPtr GetSystemMenu(IntPtr hwnd, bool brevert);
    internal static IntPtr MonitorFromWindow(IntPtr hwnd, int dwFlags);
    internal static IntPtr SendMessage(IntPtr hwnd, int msg, int wparam, int lparam);
    internal static int TrackPopupMenu(IntPtr hmenu, UInt32 uflags, int x, int y, int nreserved, IntPtr hwnd, IntPtr prcRect);
    internal static IntPtr CreateRoundRectRgn(int x1, int y1, int x2, int y2, int cx, int cy);
    internal static int SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool bRedraw);
    internal static int GetWindowLong(IntPtr hWnd, int nIndex);
    internal static int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
    internal static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, int uFlags);
    internal static bool GetCursorPos(POINT& lpPoint);
    internal static bool AdjustWindowRectEx(RECT& lpRECT, int dwStyle, bool bMenu, int dwExStyle);
    internal static int DwmDefWindowProc(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam, IntPtr& plresult);
    internal static int GetMenuItemID(IntPtr hmenu, int pos);
    internal static bool EnableMenuItem(IntPtr hmenu, UInt32 uiDEnableItem, UInt32 uenable);
    internal static bool IsVista();
    internal static short GetX(int point);
    internal static short GetY(int point);
    internal static int GetX(IntPtr point);
    internal static int GetY(IntPtr point);
    internal static void ShowSystemMenu(IntPtr handle, Point point);
    internal static void HandleMinMax(Window window, IntPtr hwnd, IntPtr lParam);
    internal static bool CanEnableDwm();
    internal static void ExtendWindow(IntPtr hWnd, int size);
    internal static Point GetTransformedPoint(Visual visual);
}
internal enum Syncfusion.Windows.Shared.WindowLongValues : Enum {
    public int value__;
    public static WindowLongValues GWL_EXSTYLE;
    public static WindowLongValues GWL_STYLE;
}
public class Syncfusion.Windows.Shared.WINDOWPLACEMENT : object {
    public int length;
    public int flags;
    public ShowWindowOptions showCmd;
    public POINT ptMinPosition;
    public POINT ptMaxPosition;
    public RECT rcNormalPosition;
}
public class Syncfusion.Windows.Shared.WINDOWPOS : ValueType {
    public IntPtr hwnd;
    public IntPtr hwndInsertAfter;
    public int x;
    public int y;
    public int cx;
    public int cy;
    public int flags;
}
internal enum Syncfusion.Windows.Shared.WindowsMessages : Enum {
    public int value__;
    public static WindowsMessages WM_DWMCOMPOSITIONCHANGED;
    public static WindowsMessages WM_ENTERSIZEMOVE;
    public static WindowsMessages WM_EXITSIZEMOVE;
    public static WindowsMessages WM_GETMINMAXINFO;
    public static WindowsMessages WM_NCCALCSIZE;
    public static WindowsMessages WM_NCHITTEST;
    public static WindowsMessages WM_SIZE;
    public static WindowsMessages WM_SIZING;
    public static WindowsMessages WM_SYSCOMMAND;
    public static WindowsMessages WVR_VALIDRECTS;
    public static WindowsMessages WM_WINDOWPOSCHANGING;
    public static WindowsMessages WM_WINDOWPOSCHANGED;
}
[FlagsAttribute]
[CLSCompliantAttribute("False")]
public enum Syncfusion.Windows.Shared.WindowStyleValues : Enum {
    public UInt32 value__;
    public static WindowStyleValues OVERLAPPED;
    public static WindowStyleValues POPUP;
    public static WindowStyleValues CHILD;
    public static WindowStyleValues MINIMIZE;
    public static WindowStyleValues VISIBLE;
    public static WindowStyleValues DISABLED;
    public static WindowStyleValues CLIPSIBLINGS;
    public static WindowStyleValues CLIPCHILDREN;
    public static WindowStyleValues MAXIMIZE;
    public static WindowStyleValues BORDER;
    public static WindowStyleValues DLGFRAME;
    public static WindowStyleValues VSCROLL;
    public static WindowStyleValues HSCROLL;
    public static WindowStyleValues SYSMENU;
    public static WindowStyleValues THICKFRAME;
    public static WindowStyleValues GROUP;
    public static WindowStyleValues TABSTOP;
    public static WindowStyleValues MINIMIZEBOX;
    public static WindowStyleValues MAXIMIZEBOX;
    public static WindowStyleValues CAPTION;
    public static WindowStyleValues TILED;
    public static WindowStyleValues ICONIC;
    public static WindowStyleValues SIZEBOX;
    public static WindowStyleValues TILEDWINDOW;
    public static WindowStyleValues OVERLAPPEDWINDOW;
    public static WindowStyleValues POPUPWINDOW;
    public static WindowStyleValues CHILDWINDOW;
}
public enum Syncfusion.Windows.Shared.WM : Enum {
    public int value__;
    public static WM NULL;
    public static WM CREATE;
    public static WM DESTROY;
    public static WM MOVE;
    public static WM SIZE;
    public static WM ACTIVATE;
    public static WM SETFOCUS;
    public static WM KILLFOCUS;
    public static WM ENABLE;
    public static WM SETREDRAW;
    public static WM SETTEXT;
    public static WM GETTEXT;
    public static WM GETTEXTLENGTH;
    public static WM PAINT;
    public static WM CLOSE;
    public static WM QUERYENDSESSION;
    public static WM QUIT;
    public static WM QUERYOPEN;
    public static WM ERASEBKGND;
    public static WM SYSCOLORCHANGE;
    public static WM WINDOWPOSCHANGING;
    public static WM WINDOWPOSCHANGED;
    public static WM SETICON;
    public static WM NCCREATE;
    public static WM NCDESTROY;
    public static WM NCCALCSIZE;
    public static WM NCHITTEST;
    public static WM NCPAINT;
    public static WM NCACTIVATE;
    public static WM GETDLGCODE;
    public static WM SYNCPAINT;
    public static WM NCMOUSEMOVE;
    public static WM NCLBUTTONDOWN;
    public static WM NCLBUTTONUP;
    public static WM NCLBUTTONDBLCLK;
    public static WM NCRBUTTONDOWN;
    public static WM NCRBUTTONUP;
    public static WM NCRBUTTONDBLCLK;
    public static WM NCMBUTTONDOWN;
    public static WM NCMBUTTONUP;
    public static WM NCMBUTTONDBLCLK;
    public static WM SYSKEYDOWN;
    public static WM SYSKEYUP;
    public static WM SYSCHAR;
    public static WM SYSDEADCHAR;
    public static WM SYSCOMMAND;
    public static WM DWMCOMPOSITIONCHANGED;
    public static WM USER;
    public static WM APP;
}
public enum Syncfusion.Windows.Shared.WorkResult : Enum {
    public int value__;
    public static WorkResult Read;
    public static WorkResult ChangedType;
    public static WorkResult ChangedScroll;
    public static WorkResult IncorrectChangedType;
    public static WorkResult IncorrectChangedScroll;
}
public class Syncfusion.Windows.Shared.XAMLParser : object {
    [ObsoleteAttribute("GetFomattedXAML is deprecated, please use GetFormattedXAML instead.")]
public static Paragraph GetFomattedXAML(string xamlText);
    public static Paragraph GetFormattedXAML(string xamlText);
}
public class Syncfusion.Windows.Shared.XamlToken : ValueType {
    public XamlTokenKind Kind;
    public short Length;
    public XamlToken(XamlTokenKind kind, int length);
}
public class Syncfusion.Windows.Shared.XamlTokenizer : object {
    private string input;
    private int position;
    private XamlTokenizerMode mode;
    public string RemainingText { get; }
    public static List`1<XamlToken> Tokenize(string input);
    public List`1<XamlToken> Tokenize(string input, XamlTokenizerMode& x_mode);
    private List`1<XamlToken> Tokenize();
    private List`1<string> TokensToStrings(List`1<XamlToken> list, string input);
    public string get_RemainingText();
    private XamlToken NextToken();
    private bool IsNameCharacter(char character);
    private XamlToken TokenizeAttributeValue();
    private XamlToken TokenizeName(XamlTokenKind kind, XamlTokenizerMode nextMode);
    private XamlToken TokenizeElementWhitespace();
    private bool StartsWith(string text);
    private XamlToken TokenizeInsideElement();
    private XamlToken TokenizeText();
    private XamlToken TokenizeOutsideElement();
    private XamlToken TokenizeSimple(string text, XamlTokenKind kind, XamlTokenizerMode nextMode);
    private XamlToken TokenizeOpen();
    private XamlToken TokenizeEntity();
    private XamlToken TokenizeInsideProcessingInstruction();
    private XamlToken TokenizeInsideCData();
    private XamlToken TokenizeInsideComment();
    public static Color ColorForToken(XamlToken token, string tokenText);
}
public enum Syncfusion.Windows.Shared.XamlTokenizerMode : Enum {
    public int value__;
    public static XamlTokenizerMode InsideComment;
    public static XamlTokenizerMode InsideProcessingInstruction;
    public static XamlTokenizerMode AfterOpen;
    public static XamlTokenizerMode AfterAttributeName;
    public static XamlTokenizerMode AfterAttributeEquals;
    public static XamlTokenizerMode InsideElement;
    public static XamlTokenizerMode OutsideElement;
    public static XamlTokenizerMode InsideCData;
}
public enum Syncfusion.Windows.Shared.XamlTokenKind : Enum {
    public short value__;
    public static XamlTokenKind Open;
    public static XamlTokenKind Close;
    public static XamlTokenKind SelfClose;
    public static XamlTokenKind OpenClose;
    public static XamlTokenKind ElementName;
    public static XamlTokenKind ElementWhitespace;
    public static XamlTokenKind AttributeName;
    public static XamlTokenKind Equals;
    public static XamlTokenKind AttributeValue;
    public static XamlTokenKind CommentBegin;
    public static XamlTokenKind CommentText;
    public static XamlTokenKind CommentEnd;
    public static XamlTokenKind Entity;
    public static XamlTokenKind OpenProcessingInstruction;
    public static XamlTokenKind CloseProcessingInstruction;
    public static XamlTokenKind CDataBegin;
    public static XamlTokenKind CDataEnd;
    public static XamlTokenKind TextContent;
    public static XamlTokenKind EOF;
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.YearCell : Cell {
    public static DependencyProperty YearProperty;
    public static DependencyProperty IsBelongToCurrentRangeProperty;
    public int Year { get; public set; }
    public bool IsBelongToCurrentRange { get; public set; }
    private static YearCell();
    public int get_Year();
    public void set_Year(int value);
    public bool get_IsBelongToCurrentRange();
    public void set_IsBelongToCurrentRange(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.YearGrid : CalendarEditGrid {
    internal static int DEFROWSCOUNT;
    internal static int DEFCOLUMNSCOUNT;
    private CalendarEdit mparentCalendar;
    protected internal CalendarEdit ParentCalendar { get; protected internal set; }
    private static YearGrid();
    protected internal CalendarEdit get_ParentCalendar();
    protected internal void set_ParentCalendar(CalendarEdit value);
    private void UpdateParent();
    internal void VisulParent(DependencyObject obj);
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
    public virtual void Initialize(VisibleDate date, CultureInfo culture, Calendar calendar);
    public virtual void SetIsSelected(VisibleDate date);
    protected internal void SetIsBelongToCurrentRange();
    protected internal void SetYearCellContent();
    protected internal void SetYear(VisibleDate date, Calendar calendar);
    protected virtual Cell CreateCell();
    public void Dispose();
    protected virtual void Dispose(bool disposing);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.YearRangeCell : Cell {
    public static DependencyProperty YearsProperty;
    public static DependencyProperty IsBelongToCurrentRangeProperty;
    public YearsRange Years { get; public set; }
    public bool IsBelongToCurrentRange { get; public set; }
    private static YearRangeCell();
    public YearsRange get_Years();
    public void set_Years(YearsRange value);
    public bool get_IsBelongToCurrentRange();
    public void set_IsBelongToCurrentRange(bool value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Shared.YearRangeGrid : CalendarEditGrid {
    internal static int DEFROWSCOUNT;
    internal static int DEFCOLUMNSCOUNT;
    private CalendarEdit mparentCalendar;
    protected internal CalendarEdit ParentCalendar { get; protected internal set; }
    private static YearRangeGrid();
    protected internal CalendarEdit get_ParentCalendar();
    protected internal void set_ParentCalendar(CalendarEdit value);
    private void UpdateParent();
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
    public virtual void Initialize(VisibleDate date, CultureInfo culture, Calendar calendar);
    public virtual void SetIsSelected(VisibleDate date);
    protected internal void SetYearRangeCellContent();
    protected internal void SetYearRange(VisibleDate date, Calendar calendar);
    protected internal void SetIsBelongToCurrentRange();
    protected virtual Cell CreateCell();
    public void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Syncfusion.Windows.Shared.YearsRange : ValueType {
    public int StartYear;
    public int EndYear;
    public YearsRange(int startYear, int endYear);
}
public enum Syncfusion.Windows.Shared.ZoomGesture : Enum {
    public int value__;
    public static ZoomGesture None;
    public static ZoomGesture MouseWheelUp;
    public static ZoomGesture MouseWheelDown;
    public static ZoomGesture Ctrl;
    public static ZoomGesture Shift;
    public static ZoomGesture Alt;
    public static ZoomGesture LeftClick;
    public static ZoomGesture RightClick;
    public static ZoomGesture LeftDoubleClick;
    public static ZoomGesture RightDoubleClick;
    public static ZoomGesture And;
}
public enum Syncfusion.Windows.Shared.ZoomMode : Enum {
    public int value__;
    public static ZoomMode Unit;
    public static ZoomMode Percentage;
}
public class Syncfusion.Windows.Shared.ZoomMouseParameter : object {
    [CompilerGeneratedAttribute]
private MouseEventArgs <MouseEventArgs>k__BackingField;
    public MouseEventArgs MouseEventArgs { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual MouseEventArgs get_MouseEventArgs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MouseEventArgs(MouseEventArgs value);
}
public class Syncfusion.Windows.Shared.ZoomParamenter : object {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ZoomTo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ZoomFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Point> <FocusPoint>k__BackingField;
    public Nullable`1<double> ZoomTo { get; public set; }
    public Nullable`1<double> ZoomFactor { get; public set; }
    public Nullable`1<Point> FocusPoint { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<double> get_ZoomTo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ZoomTo(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<double> get_ZoomFactor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ZoomFactor(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Point> get_FocusPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FocusPoint(Nullable`1<Point> value);
}
public static class Syncfusion.Windows.SystemCommands : object {
    [CompilerGeneratedAttribute]
private static RoutedCommand <CloseWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <MaximizeWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <MinimizeWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <RestoreWindowCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private static RoutedCommand <ShowSystemMenuCommand>k__BackingField;
    public static RoutedCommand CloseWindowCommand { get; private set; }
    public static RoutedCommand MaximizeWindowCommand { get; private set; }
    public static RoutedCommand MinimizeWindowCommand { get; private set; }
    public static RoutedCommand RestoreWindowCommand { get; private set; }
    public static RoutedCommand ShowSystemMenuCommand { get; private set; }
    private static SystemCommands();
    [CompilerGeneratedAttribute]
public static RoutedCommand get_CloseWindowCommand();
    [CompilerGeneratedAttribute]
private static void set_CloseWindowCommand(RoutedCommand value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_MaximizeWindowCommand();
    [CompilerGeneratedAttribute]
private static void set_MaximizeWindowCommand(RoutedCommand value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_MinimizeWindowCommand();
    [CompilerGeneratedAttribute]
private static void set_MinimizeWindowCommand(RoutedCommand value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_RestoreWindowCommand();
    [CompilerGeneratedAttribute]
private static void set_RestoreWindowCommand(RoutedCommand value);
    [CompilerGeneratedAttribute]
public static RoutedCommand get_ShowSystemMenuCommand();
    [CompilerGeneratedAttribute]
private static void set_ShowSystemMenuCommand(RoutedCommand value);
    private static void _PostSystemCommand(Window window, SC command);
    public static void CloseWindow(Window window);
    public static void MaximizeWindow(Window window);
    public static void MinimizeWindow(Window window);
    public static void RestoreWindow(Window window);
    public static void ShowSystemMenu(Window window, Point screenLocation);
    internal static void ShowSystemMenuPhysicalCoordinates(Window window, Point physicalScreenLocation);
}
public class Syncfusion.Windows.SystemParameters2 : object {
    [ThreadStaticAttribute]
private static SystemParameters2 _threadLocalSingleton;
    private MessageWindow _messageHwnd;
    private bool _isGlassEnabled;
    private Color _glassColor;
    private SolidColorBrush _glassColorBrush;
    private Thickness _windowResizeBorderThickness;
    private Thickness _windowNonClientFrameThickness;
    private double _captionHeight;
    private Size _smallIconSize;
    private string _uxThemeName;
    private string _uxThemeColor;
    private bool _isHighContrast;
    private CornerRadius _windowCornerRadius;
    private Rect _captionButtonLocation;
    private Dictionary`2<WM, List`1<_SystemMetricUpdate>> _UpdateTable;
    private PropertyChangedEventHandler PropertyChanged;
    public static SystemParameters2 Current { get; }
    public bool IsGlassEnabled { get; private set; }
    public Color WindowGlassColor { get; private set; }
    public SolidColorBrush WindowGlassBrush { get; private set; }
    public Thickness WindowResizeBorderThickness { get; private set; }
    public Thickness WindowNonClientFrameThickness { get; private set; }
    public double WindowCaptionHeight { get; private set; }
    public Size SmallIconSize { get; private set; }
    public string UxThemeName { get; private set; }
    public string UxThemeColor { get; private set; }
    public bool HighContrast { get; private set; }
    public CornerRadius WindowCornerRadius { get; private set; }
    public Rect WindowCaptionButtonsLocation { get; private set; }
    private void _InitializeIsGlassEnabled();
    private void _UpdateIsGlassEnabled(IntPtr wParam, IntPtr lParam);
    private void _InitializeGlassColor();
    private void _UpdateGlassColor(IntPtr wParam, IntPtr lParam);
    private void _InitializeCaptionHeight();
    private void _UpdateCaptionHeight(IntPtr wParam, IntPtr lParam);
    private void _InitializeWindowResizeBorderThickness();
    private void _UpdateWindowResizeBorderThickness(IntPtr wParam, IntPtr lParam);
    private void _InitializeWindowNonClientFrameThickness();
    private void _UpdateWindowNonClientFrameThickness(IntPtr wParam, IntPtr lParam);
    private void _InitializeSmallIconSize();
    private void _UpdateSmallIconSize(IntPtr wParam, IntPtr lParam);
    private void _LegacyInitializeCaptionButtonLocation();
    private void _InitializeCaptionButtonLocation();
    private void _UpdateCaptionButtonLocation(IntPtr wParam, IntPtr lParam);
    private void _InitializeHighContrast();
    private void _UpdateHighContrast(IntPtr wParam, IntPtr lParam);
    private void _InitializeThemeInfo();
    private void _UpdateThemeInfo(IntPtr wParam, IntPtr lParam);
    private void _InitializeWindowCornerRadius();
    private void _UpdateWindowCornerRadius(IntPtr wParam, IntPtr lParam);
    public static SystemParameters2 get_Current();
    internal static void UpdateCaptionHeight(double pointY);
    private IntPtr _WndProc(IntPtr hwnd, WM msg, IntPtr wParam, IntPtr lParam);
    public bool get_IsGlassEnabled();
    private void set_IsGlassEnabled(bool value);
    public Color get_WindowGlassColor();
    private void set_WindowGlassColor(Color value);
    public SolidColorBrush get_WindowGlassBrush();
    private void set_WindowGlassBrush(SolidColorBrush value);
    public Thickness get_WindowResizeBorderThickness();
    private void set_WindowResizeBorderThickness(Thickness value);
    public Thickness get_WindowNonClientFrameThickness();
    private void set_WindowNonClientFrameThickness(Thickness value);
    public double get_WindowCaptionHeight();
    private void set_WindowCaptionHeight(double value);
    public Size get_SmallIconSize();
    private void set_SmallIconSize(Size value);
    public string get_UxThemeName();
    private void set_UxThemeName(string value);
    public string get_UxThemeColor();
    private void set_UxThemeColor(string value);
    public bool get_HighContrast();
    private void set_HighContrast(bool value);
    public CornerRadius get_WindowCornerRadius();
    private void set_WindowCornerRadius(CornerRadius value);
    public Rect get_WindowCaptionButtonsLocation();
    private void set_WindowCaptionButtonsLocation(Rect value);
    protected virtual void Finalize();
    public void Dispose();
    private void _Dispose(bool disposing);
    private void _NotifyPropertyChanged(string propertyName);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__7(object sender, EventArgs e);
}
public class Syncfusion.Windows.TaskbarItemInfo : Freezable {
    private static int c_MaximumThumbButtons;
    private static WM WM_TASKBARBUTTONCREATED;
    private static Thickness _EmptyThickness;
    private SafeGdiplusStartupToken _gdipToken;
    private bool _haveAddedButtons;
    private Window _window;
    private HwndSource _hwndSource;
    private ITaskbarList3 _taskbarList;
    private Size _overlaySize;
    private bool _isAttached;
    public static DependencyProperty TaskbarItemInfoProperty;
    public static DependencyProperty ProgressStateProperty;
    public static DependencyProperty ProgressValueProperty;
    public static DependencyProperty OverlayProperty;
    public static DependencyProperty DescriptionProperty;
    public static DependencyProperty ThumbnailClipMarginProperty;
    public static DependencyProperty ThumbButtonInfosProperty;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatec;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegated;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate14;
    public TaskbarItemProgressState ProgressState { get; public set; }
    public double ProgressValue { get; public set; }
    public ImageSource Overlay { get; public set; }
    public string Description { get; public set; }
    public Thickness ThumbnailClipMargin { get; public set; }
    public ThumbButtonInfoCollection ThumbButtonInfos { get; public set; }
    private static TaskbarItemInfo();
    protected virtual Freezable CreateInstanceCore();
    public static TaskbarItemInfo GetTaskbarItemInfo(Window window);
    public static void SetTaskbarItemInfo(Window window, TaskbarItemInfo value);
    private static void _OnTaskbarItemInfoChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static object _CoerceTaskbarItemInfoValue(DependencyObject d, object value);
    public TaskbarItemProgressState get_ProgressState();
    public void set_ProgressState(TaskbarItemProgressState value);
    private void _OnProgressStateChanged();
    private static TaskbarItemProgressState _CoerceProgressState(TaskbarItemProgressState value);
    public double get_ProgressValue();
    public void set_ProgressValue(double value);
    private void _OnProgressValueChanged();
    private static double _CoerceProgressValue(double progressValue);
    public ImageSource get_Overlay();
    public void set_Overlay(ImageSource value);
    private void _OnOverlayChanged();
    public string get_Description();
    public void set_Description(string value);
    private void _OnDescriptionChanged();
    public Thickness get_ThumbnailClipMargin();
    public void set_ThumbnailClipMargin(Thickness value);
    private void _OnThumbnailClipMarginChanged();
    private static Thickness _CoerceThumbnailClipMargin(Thickness margin);
    public ThumbButtonInfoCollection get_ThumbButtonInfos();
    public void set_ThumbButtonInfos(ThumbButtonInfoCollection value);
    private void _OnThumbButtonsChanged();
    private IntPtr _GetHICONFromImageSource(ImageSource image, Size dimensions);
    private void _SetWindow(Window window);
    private void _OnWindowSourceInitialized(object sender, EventArgs e);
    private IntPtr _WndProc(IntPtr hwnd, int uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private void _OnIsAttachedChanged(bool attached);
    private void _DetachWindow();
    private HRESULT _UpdateOverlay(bool attached);
    private HRESULT _UpdateTooltip(bool attached);
    private HRESULT _UpdateProgressValue(bool attached);
    private HRESULT _UpdateProgressState(bool attached);
    private HRESULT _UpdateThumbnailClipping(bool attached);
    private HRESULT _RegisterThumbButtons();
    private HRESULT _UpdateThumbButtons(bool attached);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__4(DependencyObject d, object e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__6(DependencyObject d, object e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__7(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__8(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__9(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__a(DependencyObject d, object e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__b(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public enum Syncfusion.Windows.TaskbarItemProgressState : Enum {
    public int value__;
    public static TaskbarItemProgressState None;
    public static TaskbarItemProgressState Indeterminate;
    public static TaskbarItemProgressState Normal;
    public static TaskbarItemProgressState Error;
    public static TaskbarItemProgressState Paused;
}
[AttributeUsageAttribute("4")]
public class Syncfusion.Windows.TemplateVisualStateAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    public string Name { get; public set; }
    public string GroupName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
}
[DefaultEventAttribute("Click")]
public class Syncfusion.Windows.ThumbButtonInfo : Freezable {
    private EventHandler _commandEvent;
    public static DependencyProperty VisibilityProperty;
    public static DependencyProperty DismissWhenClickedProperty;
    public static DependencyProperty ImageSourceProperty;
    public static DependencyProperty IsBackgroundVisibleProperty;
    public static DependencyProperty DescriptionProperty;
    public static DependencyProperty IsEnabledProperty;
    public static DependencyProperty IsInteractiveProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    private static DependencyProperty _CanExecuteProperty;
    private EventHandler Click;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegate6;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate9;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatea;
    public Visibility Visibility { get; public set; }
    public bool DismissWhenClicked { get; public set; }
    public ImageSource ImageSource { get; public set; }
    public bool IsBackgroundVisible { get; public set; }
    public string Description { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsInteractive { get; public set; }
    private bool _CanExecute { get; private set; }
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    private static ThumbButtonInfo();
    protected virtual Freezable CreateInstanceCore();
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    public bool get_DismissWhenClicked();
    public void set_DismissWhenClicked(bool value);
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    public bool get_IsBackgroundVisible();
    public void set_IsBackgroundVisible(bool value);
    public string get_Description();
    public void set_Description(string value);
    private static object _CoerceDescription(DependencyObject d, object value);
    private object _CoerceIsEnabledValue(object value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsInteractive();
    public void set_IsInteractive(bool value);
    private void _OnCommandChanged(DependencyPropertyChangedEventArgs e);
    private bool get__CanExecute();
    private void set__CanExecute(bool value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    internal void InvokeClick();
    private void _InvokeCommand();
    private void _UnhookCommand(ICommand command);
    private void _HookCommand(ICommand command);
    private void _UpdateCanExecute();
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    [CompilerGeneratedAttribute]
private void <_HookCommand>b__0(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__1(DependencyObject d, object e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__2(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__3(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__4(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__5(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class Syncfusion.Windows.ThumbButtonInfoCollection : FreezableCollection`1<ThumbButtonInfo> {
    private static ThumbButtonInfoCollection s_empty;
    internal static ThumbButtonInfoCollection Empty { get; }
    protected virtual Freezable CreateInstanceCore();
    internal static ThumbButtonInfoCollection get_Empty();
}
public enum Syncfusion.Windows.Tools.BrushModes : Enum {
    public int value__;
    public static BrushModes Solid;
    public static BrushModes Gradient;
}
public class Syncfusion.Windows.Tools.BrushToTextConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Tools.ColorSelectionMode : Enum {
    public int value__;
    public static ColorSelectionMode RGB;
    public static ColorSelectionMode HSV;
    public static ColorSelectionMode ClassicHSV;
    public static ColorSelectionMode ClassicRGB;
}
[DesignTimeVisibleAttribute("False")]
[ValueConversionAttribute("System.Windows.Media.Color", "System.Windows.Media.Brush")]
public class Syncfusion.Windows.Tools.ColorToBrushConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Tools.ColorToStringConverter : object {
    private Color m_currentColorValue;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Double", "System.Windows.Media.Color")]
public class Syncfusion.Windows.Tools.ColorToValueConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Double", "System.Windows.Media.Color")]
public class Syncfusion.Windows.Tools.ColorToWordKnownColorsConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Tools.Controls.AutoCompleteModes : Enum {
    public int value__;
    public static AutoCompleteModes None;
    public static AutoCompleteModes Suggest;
}
public enum Syncfusion.Windows.Tools.Controls.BlackWhiteVisible : Enum {
    public int value__;
    public static BlackWhiteVisible Black;
    public static BlackWhiteVisible White;
    public static BlackWhiteVisible None;
    public static BlackWhiteVisible Both;
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.BusyIndicator : ContentControl {
    internal Button cancelButton;
    internal ToggleButton closeButton;
    internal DispatcherTimer timer;
    internal DisableEffect disableEffect;
    internal FrameworkElement content;
    internal ContentControl description;
    internal ProgressBar progressBar;
    internal Grid progressGrid;
    private PropertyChangedCallback IsBusyChanged;
    private PropertyChangedCallback DescriptionPlacementChanged;
    private PropertyChangedCallback ProgressValueChanged;
    private PropertyChangedCallback EnableGrayScaleEffectChanged;
    private CancelEventHandler CancelClick;
    private CancelEventHandler Closing;
    private RoutedEventHandler Closed;
    internal static DependencyProperty BusyProperty;
    public static DependencyProperty IsBusyProperty;
    public static DependencyProperty HeaderProperty;
    public static DependencyProperty HeaderAlignmentProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty LoadingDescriptionProperty;
    public static DependencyProperty LoadingDescriptionTemplateProperty;
    public static DependencyProperty ProgressValueProperty;
    public static DependencyProperty DelayProperty;
    public static DependencyProperty IsIndeterminateProperty;
    public static DependencyProperty CloseButtonVisibilityProperty;
    public static DependencyProperty CancelButtonVisibilityProperty;
    public static DependencyProperty CloseButtonStyleProperty;
    public static DependencyProperty ProgressBarStyleProperty;
    public static DependencyProperty OverlayOpacityProperty;
    public static DependencyProperty OverlayBrushProperty;
    public static DependencyProperty DescriptionPlacementProperty;
    public static DependencyProperty EnableGrayScaleEffectProperty;
    internal bool Busy { get; internal set; }
    public bool IsBusy { get; public set; }
    public object Header { get; public set; }
    public HorizontalAlignment HeaderAlignment { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public object LoadingDescription { get; public set; }
    public DataTemplate LoadingDescriptionTemplate { get; public set; }
    public double ProgressValue { get; public set; }
    public TimeSpan Delay { get; public set; }
    public bool IsIndeterminate { get; public set; }
    public Visibility CloseButtonVisibility { get; public set; }
    public Visibility CancelButtonVisibility { get; public set; }
    public Style CloseButtonStyle { get; public set; }
    public Style ProgressBarStyle { get; public set; }
    public double OverlayOpacity { get; public set; }
    public Brush OverlayBrush { get; public set; }
    public DescriptionPlacement DescriptionPlacement { get; public set; }
    public bool EnableGrayScaleEffect { get; public set; }
    private static BusyIndicator();
    public void add_IsBusyChanged(PropertyChangedCallback value);
    public void remove_IsBusyChanged(PropertyChangedCallback value);
    public void add_DescriptionPlacementChanged(PropertyChangedCallback value);
    public void remove_DescriptionPlacementChanged(PropertyChangedCallback value);
    public void add_ProgressValueChanged(PropertyChangedCallback value);
    public void remove_ProgressValueChanged(PropertyChangedCallback value);
    public void add_EnableGrayScaleEffectChanged(PropertyChangedCallback value);
    public void remove_EnableGrayScaleEffectChanged(PropertyChangedCallback value);
    public void add_CancelClick(CancelEventHandler value);
    public void remove_CancelClick(CancelEventHandler value);
    public void add_Closing(CancelEventHandler value);
    public void remove_Closing(CancelEventHandler value);
    public void add_Closed(RoutedEventHandler value);
    public void remove_Closed(RoutedEventHandler value);
    private void OnBusyIndicator_Unloaded(object sender, RoutedEventArgs e);
    private void OnBusyIndicator_Loaded(object sender, RoutedEventArgs e);
    internal bool get_Busy();
    internal void set_Busy(bool value);
    public bool get_IsBusy();
    public void set_IsBusy(bool value);
    public object get_Header();
    public void set_Header(object value);
    public HorizontalAlignment get_HeaderAlignment();
    public void set_HeaderAlignment(HorizontalAlignment value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public object get_LoadingDescription();
    public void set_LoadingDescription(object value);
    public DataTemplate get_LoadingDescriptionTemplate();
    public void set_LoadingDescriptionTemplate(DataTemplate value);
    public double get_ProgressValue();
    public void set_ProgressValue(double value);
    public TimeSpan get_Delay();
    public void set_Delay(TimeSpan value);
    public bool get_IsIndeterminate();
    public void set_IsIndeterminate(bool value);
    public Visibility get_CloseButtonVisibility();
    public void set_CloseButtonVisibility(Visibility value);
    public Visibility get_CancelButtonVisibility();
    public void set_CancelButtonVisibility(Visibility value);
    public Style get_CloseButtonStyle();
    public void set_CloseButtonStyle(Style value);
    public Style get_ProgressBarStyle();
    public void set_ProgressBarStyle(Style value);
    public double get_OverlayOpacity();
    public void set_OverlayOpacity(double value);
    public Brush get_OverlayBrush();
    public void set_OverlayBrush(Brush value);
    public DescriptionPlacement get_DescriptionPlacement();
    public void set_DescriptionPlacement(DescriptionPlacement value);
    public bool get_EnableGrayScaleEffect();
    public void set_EnableGrayScaleEffect(bool value);
    public static void OnIsBusyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnIsBusyChanged(DependencyPropertyChangedEventArgs args);
    private void timer_Tick(object sender, EventArgs e);
    public static void OnDescriptionPlacementChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnDescriptionPlacementChanged(DependencyPropertyChangedEventArgs args);
    private void SetDescriptionPlacement();
    private void UpdateGrayScaleEffect();
    public static void OnProgressValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnProgressValueChanged(DependencyPropertyChangedEventArgs args);
    public static void OnEnableGrayScaleEffectChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    protected void OnEnableGrayScaleEffectChanged(DependencyPropertyChangedEventArgs args);
    public virtual void OnApplyTemplate();
    private void closeButton_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void cancelButton_Click(object sender, RoutedEventArgs e);
    private void Close(CancelEventArgs args, RoutedEventArgs e);
    private void UpdateIsBusy(bool isBusy);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.ButtonAdv : ButtonBase {
    private static double SmallIconHeight;
    private static double SmallIconWidth;
    private static double NormalIconHeight;
    private static double NormalIconWidth;
    private static double LargeIconHeight;
    private static double LargeIconWidth;
    private AccessText accessText;
    private ContentPresenter smallIconContent;
    private ContentPresenter largeIconContent;
    public static DependencyProperty IsCancelProperty;
    public static DependencyProperty IsDefaultProperty;
    public static DependencyProperty IconStretchProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty IconTemplateProperty;
    public static DependencyProperty IconTemplateSelectorProperty;
    public static DependencyProperty SmallIconProperty;
    public static DependencyProperty IsCheckableProperty;
    public static DependencyProperty IsCheckedProperty;
    public static DependencyProperty LargeIconProperty;
    public static DependencyProperty IconWidthProperty;
    public static DependencyProperty IconHeightProperty;
    public static DependencyProperty SizeModeProperty;
    public static DependencyProperty IsMultiLineProperty;
    public static DependencyProperty CornerRadiusProperty;
    private RoutedEventHandler Checked;
    public bool IsCancel { get; public set; }
    public bool IsDefault { get; public set; }
    public Stretch IconStretch { get; public set; }
    [DescriptionAttribute("The Label Property of this element can be set to any string value")]
[CategoryAttribute("Common Properties")]
public string Label { get; public set; }
    public DataTemplate IconTemplate { get; public set; }
    public DataTemplateSelector IconTemplateSelector { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Represents the Image displayed in the element, when size form is Small or Normal")]
public ImageSource SmallIcon { get; public set; }
    [DescriptionAttribute("Represents the value, whether the element can be checkable or not")]
[CategoryAttribute("Common Properties")]
public bool IsCheckable { get; public set; }
    [DescriptionAttribute("Represents the value, whether the element is checked or not")]
[CategoryAttribute("Common Properties")]
public bool IsChecked { get; public set; }
    [DescriptionAttribute("Represents the Image displayed in the element, when size form is Large")]
[CategoryAttribute("Common Properties")]
public ImageSource LargeIcon { get; public set; }
    [DescriptionAttribute("Represents to set the Image width")]
[CategoryAttribute("Common Properties")]
public double IconWidth { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Represents to set the Image height")]
public double IconHeight { get; public set; }
    [DescriptionAttribute("Represents the Size of the element, which may be Normal, Small or Large")]
[CategoryAttribute("Appearance")]
public SizeMode SizeMode { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the value, whether the text in the element can be multilined or not")]
public bool IsMultiLine { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    private static ButtonAdv();
    public bool get_IsCancel();
    public void set_IsCancel(bool value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public Stretch get_IconStretch();
    public void set_IconStretch(Stretch value);
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public DataTemplate get_IconTemplate();
    public void set_IconTemplate(DataTemplate value);
    public DataTemplateSelector get_IconTemplateSelector();
    public void set_IconTemplateSelector(DataTemplateSelector value);
    public sealed virtual ImageSource get_SmallIcon();
    public sealed virtual void set_SmallIcon(ImageSource value);
    public bool get_IsCheckable();
    public void set_IsCheckable(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public sealed virtual ImageSource get_LargeIcon();
    public sealed virtual void set_LargeIcon(ImageSource value);
    public double get_IconWidth();
    public void set_IconWidth(double value);
    public double get_IconHeight();
    public void set_IconHeight(double value);
    public sealed virtual SizeMode get_SizeMode();
    public sealed virtual void set_SizeMode(SizeMode value);
    public sealed virtual bool get_IsMultiLine();
    public sealed virtual void set_IsMultiLine(bool value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public void add_Checked(RoutedEventHandler value);
    public void remove_Checked(RoutedEventHandler value);
    private void Initialize();
    public void UpdateSize();
    private static void OnIsCheckableChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnIsCheckableChanged();
    private static void OnIsCheckedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnIsCheckedChanged();
    private static void OnSizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnSizeChanged();
    private static void OnIsCancelChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnIsDefaultChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnClick();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public virtual void OnApplyTemplate();
}
public class Syncfusion.Windows.Tools.Controls.ColorGroup : Control {
    public ColorPickerPalette colorpicker;
    public static DependencyProperty HeaderNameProperty;
    public static DependencyProperty HeaderVisibilityProperty;
    internal static DependencyProperty ColorProperty;
    public static DependencyProperty DataSourceProperty;
    public static DependencyProperty PanelVisibilityProperty;
    public static DependencyProperty ThemeHeaderForeGroundProperty;
    public static DependencyProperty ThemeHeaderBackGroundProperty;
    public static DependencyProperty NameProperty;
    internal ItemsControl colorGroupItemsControl;
    public Rectangle cgHeaderName;
    public TextBlock cgHeaderTextBox;
    public Visibility PanelVisibility { get; public set; }
    public Visibility HeaderVisibility { get; public set; }
    public Brush color { get; public set; }
    public Brush ThemeHeaderForeGround { get; public set; }
    public Brush ThemeHeaderBackGround { get; public set; }
    public ObservableCollection`1<ColorGroupItem> DataSource { get; public set; }
    public string ColorName { get; public set; }
    public string HeaderName { get; public set; }
    private static ColorGroup();
    public Visibility get_PanelVisibility();
    public void set_PanelVisibility(Visibility value);
    public Visibility get_HeaderVisibility();
    public void set_HeaderVisibility(Visibility value);
    public Brush get_color();
    public void set_color(Brush value);
    public Brush get_ThemeHeaderForeGround();
    public void set_ThemeHeaderForeGround(Brush value);
    public Brush get_ThemeHeaderBackGround();
    public void set_ThemeHeaderBackGround(Brush value);
    public ObservableCollection`1<ColorGroupItem> get_DataSource();
    public void set_DataSource(ObservableCollection`1<ColorGroupItem> value);
    public string get_ColorName();
    public void set_ColorName(string value);
    public string get_HeaderName();
    public void set_HeaderName(string value);
    public virtual void OnApplyTemplate();
    public void cgHeaderName_MouseLeftButtonDown(object sender, MouseEventArgs args);
    private static void IsHeaderChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void IsHeaderChanged(DependencyPropertyChangedEventArgs e);
    private static void IsColorChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void IsColorChanged(DependencyPropertyChangedEventArgs e);
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Syncfusion.Windows.Tools.Controls.ColorGroupItem : Control {
    public Collection`1<ColorGroupItem> ColorGroupItemsCollection;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty VariantsProperty;
    public static DependencyProperty WidthProperty;
    public static DependencyProperty HeightProperty;
    public static DependencyProperty ColorNameProperty;
    public static DependencyProperty BorderMarginProperty;
    public static DependencyProperty ItemMarginProperty;
    public static DependencyProperty BorderThicknessProperty;
    public static DependencyProperty IsSelectedProperty;
    internal string colorname;
    internal ColorGroup item;
    internal bool setFocus;
    internal bool IsMouseOver;
    internal FrameworkElement colorGroupItemBorder;
    public string ColorName { get; public set; }
    public bool Variants { get; public set; }
    public Brush Color { get; public set; }
    public Thickness BorderMargin { get; public set; }
    public double BorderWidth { get; public set; }
    public double BorderHeight { get; public set; }
    public Thickness BorderThick { get; public set; }
    public Thickness ItemMargin { get; public set; }
    public bool IsSelected { get; public set; }
    private static ColorGroupItem();
    public string get_ColorName();
    public void set_ColorName(string value);
    public bool get_Variants();
    public void set_Variants(bool value);
    public Brush get_Color();
    public void set_Color(Brush value);
    public Thickness get_BorderMargin();
    public void set_BorderMargin(Thickness value);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public double get_BorderHeight();
    public void set_BorderHeight(double value);
    public Thickness get_BorderThick();
    public void set_BorderThick(Thickness value);
    public Thickness get_ItemMargin();
    public void set_ItemMargin(Thickness value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public virtual void OnApplyTemplate();
    private void ColorGroupItemBorder_KeyDown(object sender, KeyEventArgs e);
    internal static ColorGroup GetBrushEditParentFromChildren(FrameworkElement element);
    internal Brush Lighten(Color inColor, int level, String& name, string color);
    private static void IsVariantsChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void IsVariantsChanged(DependencyPropertyChangedEventArgs e);
    private void ColorGroupItemBorderMouseLeave(object sender, MouseEventArgs e);
    private void ColorGroupItemBorder_LostFocus(object sender, RoutedEventArgs e);
    private void ColorGroupItemBorderMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    internal void FocusBorder();
    protected virtual void OnGotFocus(RoutedEventArgs e);
    internal void SelectColor(FrameworkElement border);
    private void r_MouseLeave(object sender, MouseEventArgs e);
    private void BorderMouseMove(object sender, MouseEventArgs e);
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.ColorPickerPalette : Control {
    public static DependencyProperty AutomaticColorProperty;
    public static DependencyProperty ColorProperty;
    public static DependencyProperty SelectedBrushProperty;
    public static DependencyProperty ThemeHeaderBackGroundProperty;
    public static DependencyProperty SetCustomColorsProperty;
    public static DependencyProperty CustomColorsCollectionProperty;
    public static DependencyProperty CustomHeaderVisibilityProperty;
    public static DependencyProperty AutomaticColorVisibilityProperty;
    public static DependencyProperty NoColorVisibilityProperty;
    public static DependencyProperty MoreColorOptionVisibilityProperty;
    public static DependencyProperty CustomHeaderTextProperty;
    public static DependencyProperty ThemeHeaderForeGroundProperty;
    public static DependencyProperty MouseOverBackgroundProperty;
    internal static DependencyProperty ExpandedMoreColorsBorderPressedProperty;
    internal static DependencyProperty ExpandedAutomaticBorderPressedProperty;
    internal static DependencyProperty IsAutomaticBorderPressedProperty;
    internal static DependencyProperty IsMoreColorsBorderPressedProperty;
    public static DependencyProperty PopupWidthProperty;
    public static DependencyProperty PopupHeightProperty;
    public static DependencyProperty BorderWidthProperty;
    public static DependencyProperty BorderHeightProperty;
    public static DependencyProperty ColorNameProperty;
    internal static DependencyProperty ColorGroupItemProperty;
    internal static DependencyProperty MoreColorProperty;
    public static DependencyProperty ThemePanelVisibilityProperty;
    public static DependencyProperty StandardPanelVisibilityProperty;
    public static DependencyProperty IsStandardTabVisibleProperty;
    public static DependencyProperty IsCustomTabVisibleProperty;
    public static DependencyProperty RecentlyUsedPanelVisibilityProperty;
    public static DependencyProperty ThemesProperty;
    public static DependencyProperty BlackWhiteVisibilityProperty;
    public static DependencyProperty GenerateThemeVariantsProperty;
    public static DependencyProperty GenerateStandardVariantsProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty IconSizeProperty;
    public static DependencyProperty MoreColorsIconProperty;
    public static DependencyProperty MoreColorsIconSizeProperty;
    public static DependencyProperty SelectedCommandProperty;
    public static DependencyProperty ModeProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public ObservableCollection`1[] col;
    public ObservableCollection`1[] CustomCol;
    public ObservableCollection`1<ColorGroupItem> RecentlyUsedCollection;
    public ObservableCollection`1<ColorGroupItem> StdColorCollection;
    public ObservableCollection`1<ColorGroupItem> ColorGroupCollection;
    public ObservableCollection`1<ColorGroupItem> CustomColorGroupCollection;
    private PropertyChangedCallback ColorChanged;
    private PropertyChangedCallback PopupHeightChanged;
    private ColorGroup colorGroup;
    private ColorGroup colorGroup1;
    private int row;
    private int column;
    private int popupItemIndex;
    internal bool IsAutomaticSelected;
    internal bool IsSelected;
    private Window window;
    internal MoreColorsWindow child;
    internal bool IsChecked;
    internal bool updownclick;
    internal bool Isloaded;
    internal bool click;
    internal bool Loadfinished;
    internal Border morecolorsborder;
    internal Border automaticborder;
    private Border autoColorBorder;
    private Border Nocolorsborder;
    private ColorGroup item1;
    private ColorGroup item2;
    private ColorGroup item3;
    internal bool isPopupclosedOnAutomaticClick;
    private Border updown;
    private Border colorBorder;
    private Border popupBorder;
    private Border OutBorder;
    private Grid outerGrid;
    private Border LayoutBorder;
    internal ItemsControl ColorArea;
    internal Grid Colorgrid;
    private MoreColorWindowEventHandler MoreColorWindowOpened;
    private MoreColorWindowEventHandler MoreColorWindowOpening;
    private EventHandler`1<SelectedBrushChangedEventArgs> SelectedBrushChanged;
    private DropDownOpenedEventHandler DropDownOpened;
    internal string themestyle;
    internal double RefWidth;
    internal bool widthchanged;
    private double width;
    private double height;
    [CompilerGeneratedAttribute]
private Popup <Popup>k__BackingField;
    public ImageSource Icon { get; public set; }
    public Size IconSize { get; public set; }
    public ImageSource MoreColorsIcon { get; public set; }
    public Size MoreColorsIconSize { get; public set; }
    public ICommand SelectedCommand { get; public set; }
    public PickerMode Mode { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public Brush AutomaticColor { get; public set; }
    public bool SetCustomColors { get; public set; }
    public ObservableCollection`1<CustomColor> CustomColorsCollection { get; public set; }
    public Color Color { get; public set; }
    public Brush SelectedBrush { get; public set; }
    public double PopupWidth { get; public set; }
    public double PopupHeight { get; public set; }
    public double BorderWidth { get; public set; }
    public double BorderHeight { get; public set; }
    public string ColorName { get; public set; }
    public ColorGroupItem SelectedItem { get; internal set; }
    public Brush ThemeHeaderBackGround { get; public set; }
    public bool IsAutomaticBorderPressed { get; private set; }
    public bool IsMoreColorsBorderPressed { get; private set; }
    public bool ExpandedAutomaticBorderPressed { get; private set; }
    public Brush MouseOverBackground { get; public set; }
    public bool ExpandedMoreColorsBorderPressed { get; private set; }
    public Brush ThemeHeaderForeGround { get; public set; }
    internal PolygonItem SelectedMoreColor { get; internal set; }
    public Visibility AutomaticColorVisibility { get; public set; }
    public Visibility NoColorVisibility { get; public set; }
    public Visibility MoreColorOptionVisibility { get; public set; }
    public Visibility ThemePanelVisibility { get; public set; }
    public Visibility CustomHeaderVisibility { get; public set; }
    public string CustomHeaderText { get; public set; }
    public Visibility IsStandardTabVisible { get; public set; }
    public Visibility IsCustomTabVisible { get; public set; }
    public Visibility StandardPanelVisibility { get; public set; }
    public Visibility RecentlyUsedPanelVisibility { get; public set; }
    public PaletteTheme Themes { get; public set; }
    public BlackWhiteVisible BlackWhiteVisibility { get; public set; }
    public bool GenerateStandardVariants { get; public set; }
    public bool GenerateThemeVariants { get; public set; }
    public Popup Popup { get; internal set; }
    [ObsoleteAttribute("This property is deprecated, please use Mode property")]
public bool IsExpanded { get; public set; }
    private static ColorPickerPalette();
    public ImageSource get_Icon();
    public void set_Icon(ImageSource value);
    public Size get_IconSize();
    public void set_IconSize(Size value);
    public ImageSource get_MoreColorsIcon();
    public void set_MoreColorsIcon(ImageSource value);
    public Size get_MoreColorsIconSize();
    public void set_MoreColorsIconSize(Size value);
    public ICommand get_SelectedCommand();
    public void set_SelectedCommand(ICommand value);
    public PickerMode get_Mode();
    public void set_Mode(PickerMode value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public void add_ColorChanged(PropertyChangedCallback value);
    public void remove_ColorChanged(PropertyChangedCallback value);
    public void add_PopupHeightChanged(PropertyChangedCallback value);
    public void remove_PopupHeightChanged(PropertyChangedCallback value);
    public Brush get_AutomaticColor();
    public void set_AutomaticColor(Brush value);
    public bool get_SetCustomColors();
    public void set_SetCustomColors(bool value);
    public ObservableCollection`1<CustomColor> get_CustomColorsCollection();
    public void set_CustomColorsCollection(ObservableCollection`1<CustomColor> value);
    public Color get_Color();
    public void set_Color(Color value);
    public Brush get_SelectedBrush();
    public void set_SelectedBrush(Brush value);
    public double get_PopupWidth();
    public void set_PopupWidth(double value);
    public double get_PopupHeight();
    public void set_PopupHeight(double value);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public double get_BorderHeight();
    public void set_BorderHeight(double value);
    public string get_ColorName();
    public void set_ColorName(string value);
    public ColorGroupItem get_SelectedItem();
    internal void set_SelectedItem(ColorGroupItem value);
    public Brush get_ThemeHeaderBackGround();
    public void set_ThemeHeaderBackGround(Brush value);
    public bool get_IsAutomaticBorderPressed();
    private void set_IsAutomaticBorderPressed(bool value);
    public bool get_IsMoreColorsBorderPressed();
    private void set_IsMoreColorsBorderPressed(bool value);
    public bool get_ExpandedAutomaticBorderPressed();
    private void set_ExpandedAutomaticBorderPressed(bool value);
    public Brush get_MouseOverBackground();
    public void set_MouseOverBackground(Brush value);
    public bool get_ExpandedMoreColorsBorderPressed();
    private void set_ExpandedMoreColorsBorderPressed(bool value);
    public Brush get_ThemeHeaderForeGround();
    public void set_ThemeHeaderForeGround(Brush value);
    internal PolygonItem get_SelectedMoreColor();
    internal void set_SelectedMoreColor(PolygonItem value);
    public Visibility get_AutomaticColorVisibility();
    public void set_AutomaticColorVisibility(Visibility value);
    public Visibility get_NoColorVisibility();
    public void set_NoColorVisibility(Visibility value);
    public Visibility get_MoreColorOptionVisibility();
    public void set_MoreColorOptionVisibility(Visibility value);
    public Visibility get_ThemePanelVisibility();
    public void set_ThemePanelVisibility(Visibility value);
    public Visibility get_CustomHeaderVisibility();
    public void set_CustomHeaderVisibility(Visibility value);
    public string get_CustomHeaderText();
    public void set_CustomHeaderText(string value);
    public Visibility get_IsStandardTabVisible();
    public void set_IsStandardTabVisible(Visibility value);
    public Visibility get_IsCustomTabVisible();
    public void set_IsCustomTabVisible(Visibility value);
    public Visibility get_StandardPanelVisibility();
    public void set_StandardPanelVisibility(Visibility value);
    public Visibility get_RecentlyUsedPanelVisibility();
    public void set_RecentlyUsedPanelVisibility(Visibility value);
    public PaletteTheme get_Themes();
    public void set_Themes(PaletteTheme value);
    public BlackWhiteVisible get_BlackWhiteVisibility();
    public void set_BlackWhiteVisibility(BlackWhiteVisible value);
    public bool get_GenerateStandardVariants();
    public void set_GenerateStandardVariants(bool value);
    public bool get_GenerateThemeVariants();
    public void set_GenerateThemeVariants(bool value);
    [CompilerGeneratedAttribute]
public Popup get_Popup();
    [CompilerGeneratedAttribute]
internal void set_Popup(Popup value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public void add_MoreColorWindowOpened(MoreColorWindowEventHandler value);
    public void remove_MoreColorWindowOpened(MoreColorWindowEventHandler value);
    public void add_MoreColorWindowOpening(MoreColorWindowEventHandler value);
    public void remove_MoreColorWindowOpening(MoreColorWindowEventHandler value);
    public void add_SelectedBrushChanged(EventHandler`1<SelectedBrushChangedEventArgs> value);
    public void remove_SelectedBrushChanged(EventHandler`1<SelectedBrushChangedEventArgs> value);
    public void add_DropDownOpened(DropDownOpenedEventHandler value);
    public void remove_DropDownOpened(DropDownOpenedEventHandler value);
    public virtual void OnApplyTemplate();
    private void Nocolorsborder_MouseUp(object sender, MouseButtonEventArgs e);
    private void Nocolorsborder_MouseDown(object sender, MouseButtonEventArgs e);
    private void OnPopupClosed(object sender, EventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    private void morecolorsborder_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void automaticborder_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void ColorPickerPalette_Unloaded(object sender, RoutedEventArgs e);
    internal void RaiseCommand();
    private void colorBorder_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnMoreColorWindowOpening(MoreColorCancelEventArgs e);
    protected virtual void OnMoreColorWindowOpened(MoreColorCancelEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    private void automaticborder_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void SelectAutomaticColor();
    private void morecolorsborder_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void OpenMoreColorsWindow();
    private void ColorPickerPalette_LostFocus(object sender, RoutedEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    private void OnMouseDownOutsideCapturedElement(object sender, MouseButtonEventArgs e);
    private static void OnModeChanged(DependencyObject target, DependencyPropertyChangedEventArgs args);
    private static void OnIsExpandedChanged(DependencyObject target, DependencyPropertyChangedEventArgs args);
    private void e_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    internal void UnwiredEvents();
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private void RootVisual_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void ColorBorderMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void LoadInExpandedMode(bool isexpanded);
    private void updownMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void OpenPopup();
    private void LoadCustomColors();
    public void LoadStandardColors(bool variant);
    public void LoadThemeColors(bool variant);
    private void ThemeColors();
    private void HighLightThemeColor();
    private void UnSelectPreviousColor();
    private void StandardColors();
    private void HighlightStdColor();
    private void RecentlyUsed();
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    private void ColorPickerPalette_Loaded(object sender, RoutedEventArgs e);
    private void window_Deactivated(object sender, EventArgs e);
    private void MainWindow_LocationChanged(object sender, EventArgs e);
    private void MainWindow_MouseDown(object sender, MouseButtonEventArgs e);
    private static void IsAutomaticColorChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void IsAutomaticColorChanged(DependencyPropertyChangedEventArgs e);
    private static void IsColorChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static void OnBrushChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void IsColorChanged(DependencyPropertyChangedEventArgs e);
    private void ChangeThemeAndStdColor();
    private static void standard_visibility_changed(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static void ThemeVariantsChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void ThemeVariantsChanged(DependencyPropertyChangedEventArgs e);
    private static void ThemeColorChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void ThemeColorChanged(DependencyPropertyChangedEventArgs e);
    private static void BlackWhiteVisibilityChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void BlackWhiteVisibilityChanged(DependencyPropertyChangedEventArgs e);
    private static void StandardVariantsChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void StandardVariantsChanged(DependencyPropertyChangedEventArgs e);
    private static void ThemeVisibilityChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void ThemeVisibilityChanged(DependencyPropertyChangedEventArgs e);
    private static void OnPopupHeightChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    protected virtual void OnPopupHeightChanged(DependencyPropertyChangedEventArgs e);
    private static void recentlyusedvisibilitychanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    private static void OnSetCustomColorsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <OpenMoreColorsWindow>b__0(PolygonItem more);
    [CompilerGeneratedAttribute]
private bool <LoadCustomColors>b__3(ColorGroup p);
    [CompilerGeneratedAttribute]
private bool <LoadCustomColors>b__4(ColorGroup p);
}
public class Syncfusion.Windows.Tools.Controls.ColorSelectedCommandArgs : object {
    [CompilerGeneratedAttribute]
private SolidColorBrush <Brush>k__BackingField;
    public SolidColorBrush Brush { get; internal set; }
    [CompilerGeneratedAttribute]
public SolidColorBrush get_Brush();
    [CompilerGeneratedAttribute]
internal void set_Brush(SolidColorBrush value);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.ComboBoxAdv : Selector {
    private EventHandler DropDownClosed;
    private EventHandler DropDownOpened;
    private Point lastMousePosition;
    internal bool IsGotKeyBoardFocus;
    internal object oldItem;
    internal object newItem;
    internal Window MainWindow;
    internal int itemcount;
    internal bool removeFlag;
    internal bool internalSelect;
    private ItemsControl selectedItems;
    internal ScrollViewer DropDownScrollBar;
    private ContentPresenter selectedContent;
    internal TextBlock defaultText;
    internal TextBox IsEditDefaultText;
    private ToggleButton toggleButton;
    internal ComboBoxItemAdv SelectAllItem;
    internal Button OKButton;
    internal Button CancelButton;
    internal bool isKeyDown;
    public string searchText;
    private TextBox Part_IsEdit;
    private int charindex;
    private ItemsControl tokenItemsControl;
    private Border tokenBorder;
    private int lastRowTokenItemIndex;
    private TextBlock NoRecords;
    private Key KeyPressed;
    internal bool IsTokenRemoved;
    private string oldFilter;
    private List`1<string> AddedTokenItems;
    private DispatcherTimer timer;
    private bool isTextInputLayoutChild;
    internal Popup popup;
    internal SelectionChangedEventArgs SelectionChangedEvent;
    internal bool internalChange;
    private bool _keypressed;
    private bool isBackspaceOrDeleteKeyPressed;
    internal static DependencyProperty InactiveBrushProperty;
    public static DependencyProperty IsEditableProperty;
    public static DependencyProperty EnableTokenProperty;
    public static DependencyProperty AutoCompleteModeProperty;
    private bool isReadOnly;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty MaxDropDownHeightProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty SelectionBoxItemTemplateProperty;
    public static DependencyProperty SelectionBoxItemProperty;
    public static DependencyProperty SelectionBoxItemStringFormatProperty;
    public static DependencyProperty AllowMultiSelectProperty;
    public static DependencyProperty AllowSelectAllProperty;
    public static DependencyProperty EnableOKCancelProperty;
    public static DependencyProperty SelectedItemsProperty;
    public static DependencyProperty SelectedValueDelimiterProperty;
    public static DependencyProperty SelectionBoxTemplateProperty;
    public static DependencyProperty DefaultTextProperty;
    public static DependencyProperty DropDownContentTemplateProperty;
    public static DependencyProperty TextProperty;
    [CompilerGeneratedAttribute]
private Nullable`1<char> <oldTempChar>k__BackingField;
    [CompilerGeneratedAttribute]
private char <newTempChar>k__BackingField;
    [CompilerGeneratedAttribute]
private IList <SelItemsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <ChangedItems>k__BackingField;
    public Nullable`1<char> oldTempChar { get; public set; }
    public char newTempChar { get; public set; }
    private bool Syncfusion.Windows.Shared.ITextInputLayoutSelector.IsTextInputLayoutChild { get; private set; }
    internal Brush InactiveBrush { get; internal set; }
    public bool IsEditable { get; public set; }
    public bool EnableToken { get; public set; }
    public AutoCompleteModes AutoCompleteMode { get; public set; }
    public bool IsReadOnly { get; public set; }
    public double MaxDropDownHeight { get; public set; }
    public bool IsDropDownOpen { get; public set; }
    public DataTemplate SelectionBoxItemTemplate { get; internal set; }
    public object SelectionBoxItem { get; }
    public string SelectionBoxItemStringFormat { get; internal set; }
    public bool AllowMultiSelect { get; public set; }
    public bool AllowSelectAll { get; public set; }
    public bool EnableOKCancel { get; public set; }
    public IEnumerable SelectedItems { get; public set; }
    internal IList SelItemsInternal { get; internal set; }
    internal List`1<object> ChangedItems { get; internal set; }
    public string SelectedValueDelimiter { get; public set; }
    public DataTemplate SelectionBoxTemplate { get; public set; }
    public string DefaultText { get; public set; }
    public DataTemplate DropDownContentTemplate { get; public set; }
    public string Text { get; public set; }
    private static ComboBoxAdv();
    public void add_DropDownClosed(EventHandler value);
    public void remove_DropDownClosed(EventHandler value);
    public void add_DropDownOpened(EventHandler value);
    public void remove_DropDownOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public Nullable`1<char> get_oldTempChar();
    [CompilerGeneratedAttribute]
public void set_oldTempChar(Nullable`1<char> value);
    [CompilerGeneratedAttribute]
public char get_newTempChar();
    [CompilerGeneratedAttribute]
public void set_newTempChar(char value);
    private sealed virtual override bool Syncfusion.Windows.Shared.ITextInputLayoutSelector.get_IsTextInputLayoutChild();
    private sealed virtual override void Syncfusion.Windows.Shared.ITextInputLayoutSelector.set_IsTextInputLayoutChild(bool value);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnDisplayMemberPathChanged(string oldDisplayMemberPath, string newDisplayMemberPath);
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    private bool FilterItem(object value);
    internal ComboBoxItemAdv GetItemContainer(object obj);
    public virtual void OnApplyTemplate();
    private void TokenBorder_PreviewMouseDown(object sender, MouseButtonEventArgs e);
    private void WireEvent();
    private void ComboBoxAdv_Loaded(object sender, RoutedEventArgs e);
    private void TokenItemsControl_SizeChanged(object sender, SizeChangedEventArgs e);
    private void ComboBoxAdv_LostFocus(object sender, RoutedEventArgs e);
    private void UpdateToken();
    private void SetSelectionBoxItem(object item);
    private void UpdateText();
    private void Popup_Opened(object sender, EventArgs e);
    private void ComboBoxAdv_GotFocus(object sender, RoutedEventArgs e);
    private void Part_IsEdit_GotFocus(object sender, RoutedEventArgs e);
    private void Part_IsEdit_LostFocus(object sender, RoutedEventArgs e);
    private void Part_IsEdit_PreviewKeyDown(object sender, KeyEventArgs e);
    private void Part_IsEdit_TextChanged(object sender, TextChangedEventArgs e);
    private void MainWindow_Deactivated(object sender, EventArgs e);
    private void MainWindow_LocationChanged(object sender, EventArgs e);
    private void popup_Closed(object sender, EventArgs e);
    private void ComboBoxAdv_Unloaded(object sender, RoutedEventArgs e);
    private void OnCancelButtonClick(object sender, RoutedEventArgs e);
    private void OnOKButtonClick(object sender, RoutedEventArgs e);
    protected internal void UpdateSelectAllItemState();
    protected internal void ResetSelectedItems();
    protected internal void UpdateSelectedItems();
    private void ResetTokenItems();
    private bool ShowDefaultText();
    private static void OnMouseButtonDown(object sender, MouseButtonEventArgs e);
    private static void OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void CloseDropDown();
    private static void OnMouseWheel(object sender, MouseWheelEventArgs e);
    internal void Close();
    private void ComboBoxAdv_SelectionChanged(object sender, SelectionChangedEventArgs e);
    internal void UpdateSelectMode();
    private void UpdateCheckBoxVisibility(ComboBoxItemAdv item);
    internal void UpdateItemSelectMode(ComboBoxItemAdv item);
    internal void UpdateDefaultTextVisibility();
    internal void UpdateSelectionBox();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnTextInput(TextCompositionEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    internal void RefreshFilter();
    private void UpdateNoRecords();
    internal void RemoveToken(object tokenItem);
    internal IList GetDisplayMemberItems();
    internal object GetDisplayMemberValue(object item);
    internal void AddToken(string text, Key pressedkey);
    private void timer_Tick(object sender, EventArgs e);
    private void ValidateItem(Key pressedkey);
    private void UpdateSelectedText(object item);
    protected internal virtual ObservableCollection`1<object> OnItemChecked(object checkedItem, ObservableCollection`1<object> selectedItems);
    protected internal virtual ObservableCollection`1<object> OnItemUnchecked(object unCheckedItem, ObservableCollection`1<object> selectedItems);
    private void ClearSelection();
    private static void OnAllowMultiSelectChanged(object sender, DependencyPropertyChangedEventArgs args);
    private static void OnAutoCompleteModeChanged(object sender, DependencyPropertyChangedEventArgs e);
    private static void OnEnableTokenChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private static void OnIsEditableChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private void OnFilterApplied();
    private void UpdateSelectionOnDropDownOpen(ComboBoxAdv instance);
    private void OnDropDownClosed();
    private static void OnIsDropDownOpenChanged(object sender, DependencyPropertyChangedEventArgs args);
    private static void OnSelectedValueDelimiterChanged(object sender, DependencyPropertyChangedEventArgs args);
    private void OnTextChanged(string searchText);
    private static void OnTextChanged(DependencyObject sender, DependencyPropertyChangedEventArgs arg);
    private static void OnSelectionBoxTemplateChanged(object sender, DependencyPropertyChangedEventArgs args);
    internal void NotifyComboBoxItemAdvEnter(ComboBoxItemAdv item, bool state);
    internal bool IsMouseMove();
    internal Brush get_InactiveBrush();
    internal void set_InactiveBrush(Brush value);
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public bool get_EnableToken();
    public void set_EnableToken(bool value);
    public AutoCompleteModes get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteModes value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public double get_MaxDropDownHeight();
    public void set_MaxDropDownHeight(double value);
    public sealed virtual bool get_IsDropDownOpen();
    public sealed virtual void set_IsDropDownOpen(bool value);
    public DataTemplate get_SelectionBoxItemTemplate();
    internal void set_SelectionBoxItemTemplate(DataTemplate value);
    public object get_SelectionBoxItem();
    public string get_SelectionBoxItemStringFormat();
    internal void set_SelectionBoxItemStringFormat(string value);
    public bool get_AllowMultiSelect();
    public void set_AllowMultiSelect(bool value);
    public bool get_AllowSelectAll();
    public void set_AllowSelectAll(bool value);
    public bool get_EnableOKCancel();
    public void set_EnableOKCancel(bool value);
    public IEnumerable get_SelectedItems();
    public void set_SelectedItems(IEnumerable value);
    private ObservableCollection`1<ComboBoxItemAdv> GetSelectedItems();
    private void coll_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal void SelectItems();
    private static void OnSelectedItemsChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
internal IList get_SelItemsInternal();
    [CompilerGeneratedAttribute]
internal void set_SelItemsInternal(IList value);
    [CompilerGeneratedAttribute]
internal List`1<object> get_ChangedItems();
    [CompilerGeneratedAttribute]
internal void set_ChangedItems(List`1<object> value);
    private void FireOnSelectionChanged(List`1<object> removedItems, List`1<object> addedItems);
    internal void OnSelectedItemsChanged(DependencyPropertyChangedEventArgs args);
    public string get_SelectedValueDelimiter();
    public void set_SelectedValueDelimiter(string value);
    public DataTemplate get_SelectionBoxTemplate();
    public void set_SelectionBoxTemplate(DataTemplate value);
    public string get_DefaultText();
    public void set_DefaultText(string value);
    public DataTemplate get_DropDownContentTemplate();
    public void set_DropDownContentTemplate(DataTemplate value);
    public string get_Text();
    public void set_Text(string value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    internal void RaiseValueChangedEvent();
    public sealed virtual void Dispose();
    private sealed virtual override IEnumerable Syncfusion.Windows.Shared.ITextInputLayoutSelector.GetSelectedItems();
    [CompilerGeneratedAttribute]
private void <ResetSelectedItems>b__4(object item);
    [CompilerGeneratedAttribute]
private bool <UpdateSelectionBox>b__a(KeyValuePair`2<string, object> i);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Tools.Controls.ComboBoxItemAdv : ContentControl {
    internal CheckBox CheckBox;
    public static RoutedEvent SelectedEvent;
    public static RoutedEvent UnSelectedEvent;
    public static DependencyProperty IsSelectedProperty;
    internal static DependencyProperty MultiSelectProperty;
    public static DependencyProperty IsHighlightedProperty;
    public static DependencyProperty IsPressedProperty;
    [CompilerGeneratedAttribute]
private bool <IsSelectAll>k__BackingField;
    internal ComboBoxAdv Parent { get; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool MultiSelect { get; public set; }
    public ItemsControl ParentItemsControl { get; }
    protected internal bool IsSelectAll { get; protected internal set; }
    public bool IsSelected { get; public set; }
    public bool IsHighlighted { get; internal set; }
    public bool IsPressed { get; protected set; }
    private static ComboBoxItemAdv();
    internal ComboBoxAdv get_Parent();
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    public ItemsControl get_ParentItemsControl();
    [CompilerGeneratedAttribute]
protected internal bool get_IsSelectAll();
    [CompilerGeneratedAttribute]
protected internal void set_IsSelectAll(bool value);
    public void add_Selected(RoutedEventHandler value);
    public void remove_Selected(RoutedEventHandler value);
    public void add_UnSelected(RoutedEventHandler value);
    public void remove_UnSelected(RoutedEventHandler value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_IsHighlighted();
    internal void set_IsHighlighted(bool value);
    public bool get_IsPressed();
    protected void set_IsPressed(bool value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    internal void UpdateCheckBoxBinding();
    internal void UpdateSelection();
    protected virtual void OnGotFocus(RoutedEventArgs e);
    public virtual void OnApplyTemplate();
    private void CheckBox_Unchecked(object sender, RoutedEventArgs e);
    private void CheckBox_Checked(object sender, RoutedEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    internal void UpdateParentSelectedItems();
    private static void OnIsSelectedChanged(object sender, DependencyPropertyChangedEventArgs args);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public class Syncfusion.Windows.Tools.Controls.ComboBoxTokenItem : ContentControl {
    private Button tokenButton;
    private ItemsControl Parent { get; }
    private ItemsControl get_Parent();
    public virtual void OnApplyTemplate();
    private void TokenButton_Unloaded(object sender, RoutedEventArgs e);
    private void TokenButton_MouseDown(object sender, MouseButtonEventArgs e);
}
public class Syncfusion.Windows.Tools.Controls.CustomColor : object {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColorName>k__BackingField;
    public Color Color { get; public set; }
    public string ColorName { get; public set; }
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public string get_ColorName();
    [CompilerGeneratedAttribute]
public void set_ColorName(string value);
}
public enum Syncfusion.Windows.Tools.Controls.DescriptionPlacement : Enum {
    public int value__;
    public static DescriptionPlacement Left;
    public static DescriptionPlacement Top;
    public static DescriptionPlacement Right;
    public static DescriptionPlacement Bottom;
}
internal enum Syncfusion.Windows.Tools.Controls.DockArea : Enum {
    public int value__;
    public static DockArea Top;
    public static DockArea Left;
    public static DockArea Right;
    public static DockArea Bottom;
    public static DockArea None;
}
public enum Syncfusion.Windows.Tools.Controls.DropDirection : Enum {
    public int value__;
    public static DropDirection BottomLeft;
    public static DropDirection BottomRight;
    public static DropDirection TopLeft;
    public static DropDirection TopRight;
    public static DropDirection Right;
    public static DropDirection Left;
}
[SkinTypeAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.DropDownButtonAdv : ContentControl {
    private static double SmallIconHeight;
    private static double SmallIconWidth;
    private static double NormalIconHeight;
    private static double NormalIconWidth;
    private static double LargeIconHeight;
    private static double LargeIconWidth;
    internal DropDownMenuItem dropitem;
    private TextBlock accessText;
    internal Popup _dropdown;
    protected internal bool isopened;
    private ContentPresenter smallIconContent;
    private ContentPresenter largeIconContent;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty SmallIconProperty;
    public static DependencyProperty LargeIconProperty;
    public static DependencyProperty IconTemplateProperty;
    public static DependencyProperty IconTemplateSelectorProperty;
    public static DependencyProperty IconWidthProperty;
    public static DependencyProperty IconHeightProperty;
    public static DependencyProperty SizeModeProperty;
    public static DependencyProperty IsMultiLineProperty;
    public static DependencyProperty IsDropDownOpenProperty;
    public static DependencyProperty StayDropDownOnClickProperty;
    public static DependencyProperty StaysOpenProperty;
    public static DependencyProperty DropDirectionProperty;
    public static DependencyProperty IsPressedProperty;
    private CancelEventHandler DropDownOpening;
    private RoutedEventHandler DropDownOpened;
    private CancelEventHandler DropDownClosing;
    private RoutedEventHandler DropDownClosed;
    private Window currentWindow;
    [DescriptionAttribute("The Label Property of this element can be set to any string value")]
[CategoryAttribute("Common Properties")]
public string Label { get; public set; }
    [DescriptionAttribute("Represents the Image displayed in the element, when size form is Small or Normal")]
[CategoryAttribute("Common Properties")]
public ImageSource SmallIcon { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Represents the Image displayed in the element, when size form is Large")]
public ImageSource LargeIcon { get; public set; }
    public DataTemplate IconTemplate { get; public set; }
    public DataTemplateSelector IconTemplateSelector { get; public set; }
    [DescriptionAttribute("Represents to set the Image width")]
[CategoryAttribute("Common Properties")]
public double IconWidth { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Represents to set the Image height")]
public double IconHeight { get; public set; }
    [DescriptionAttribute("Represents the Size of the element, which may be Normal, Small or Large")]
[CategoryAttribute("Appearance")]
public SizeMode SizeMode { get; public set; }
    [CategoryAttribute("Appearance")]
[DescriptionAttribute("Represents the value, whether the text in the element can be multilined or not")]
public bool IsMultiLine { get; public set; }
    [DescriptionAttribute("Represents the value, whether the drop down menu is open or not")]
public bool IsDropDownOpen { get; public set; }
    public bool StayDropDownOnClick { get; public set; }
    public bool StaysOpen { get; public set; }
    [DescriptionAttribute("Represents the direction, in which the drop down of this element has to be displayed.")]
[CategoryAttribute("Common Properties")]
public DropDirection DropDirection { get; public set; }
    public bool IsPressed { get; protected internal set; }
    private static DropDownButtonAdv();
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public sealed virtual ImageSource get_SmallIcon();
    public sealed virtual void set_SmallIcon(ImageSource value);
    public sealed virtual ImageSource get_LargeIcon();
    public sealed virtual void set_LargeIcon(ImageSource value);
    public DataTemplate get_IconTemplate();
    public void set_IconTemplate(DataTemplate value);
    public DataTemplateSelector get_IconTemplateSelector();
    public void set_IconTemplateSelector(DataTemplateSelector value);
    public double get_IconWidth();
    public void set_IconWidth(double value);
    public double get_IconHeight();
    public void set_IconHeight(double value);
    public sealed virtual SizeMode get_SizeMode();
    public sealed virtual void set_SizeMode(SizeMode value);
    public sealed virtual bool get_IsMultiLine();
    public sealed virtual void set_IsMultiLine(bool value);
    public bool get_IsDropDownOpen();
    public void set_IsDropDownOpen(bool value);
    public bool get_StayDropDownOnClick();
    public void set_StayDropDownOnClick(bool value);
    public bool get_StaysOpen();
    public void set_StaysOpen(bool value);
    public DropDirection get_DropDirection();
    public void set_DropDirection(DropDirection value);
    public bool get_IsPressed();
    protected internal void set_IsPressed(bool value);
    public void add_DropDownOpening(CancelEventHandler value);
    public void remove_DropDownOpening(CancelEventHandler value);
    public void add_DropDownOpened(RoutedEventHandler value);
    public void remove_DropDownOpened(RoutedEventHandler value);
    public void add_DropDownClosing(CancelEventHandler value);
    public void remove_DropDownClosing(CancelEventHandler value);
    public void add_DropDownClosed(RoutedEventHandler value);
    public void remove_DropDownClosed(RoutedEventHandler value);
    private void Initialize();
    public void UpdateSize();
    private static void OnSizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnSizeChanged();
    private static void OnDropDirectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnDropDirectionChanged();
    private static object OnIsDropDownCoerceValueChanged(DependencyObject d, object basevalue);
    private bool OnIsDropDownCoerceValueChanged(bool basevalue);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    private static void OnIsDropDownOpenChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    internal void OnIsDropDownOpenChanged();
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    private void UpdateDropDirection();
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    public CustomPopupPlacement[] UpdatePopupPlacement(Size popupSize, Size targetSize, Point offset);
    public virtual void OnApplyTemplate();
    private void DropDownButtonAdv_Loaded(object sender, RoutedEventArgs e);
    private void OnWindowLoaded(Window newWindow);
    private void MainWindow_SizeChanged(object sender, SizeChangedEventArgs e);
    private void MainWindow_LocationChanged(object sender, EventArgs e);
    private void _dropdown_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void _dropdown_Opened(object sender, EventArgs e);
    private void _dropdown_Closed(object sender, EventArgs e);
    private void _dropdown_IsOpenChanged(object sender, EventArgs e);
    public sealed virtual void Dispose();
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.DropDownMenuGroup : HeaderedItemsControl {
    internal static int iconPadding;
    private Thumb _resizethumb;
    internal Border iconContainer;
    internal Border moreItemTrayBar;
    internal double maximumTrayBarWidth;
    public static DependencyProperty IconBarEnabledProperty;
    public static DependencyProperty IsMoreItemsIconTrayEnabledProperty;
    public static DependencyProperty ScrollBarVisibilityProperty;
    public static DependencyProperty MoreItemsProperty;
    public static DependencyProperty IsResizableProperty;
    [CategoryAttribute("Appearance")]
public bool IconBarEnabled { get; public set; }
    [CategoryAttribute("Apperance")]
public bool IsMoreItemsIconTrayEnabled { get; public set; }
    [CategoryAttribute("Apperance")]
public ScrollBarVisibility ScrollBarVisibility { get; public set; }
    [CategoryAttribute("Common Properties")]
public ObservableCollection`1<UIElement> MoreItems { get; public set; }
    [CategoryAttribute("Layout")]
public bool IsResizable { get; public set; }
    private static DropDownMenuGroup();
    public bool get_IconBarEnabled();
    public void set_IconBarEnabled(bool value);
    public bool get_IsMoreItemsIconTrayEnabled();
    public void set_IsMoreItemsIconTrayEnabled(bool value);
    public ScrollBarVisibility get_ScrollBarVisibility();
    public void set_ScrollBarVisibility(ScrollBarVisibility value);
    public ObservableCollection`1<UIElement> get_MoreItems();
    public void set_MoreItems(ObservableCollection`1<UIElement> value);
    public bool get_IsResizable();
    public void set_IsResizable(bool value);
    public virtual void OnApplyTemplate();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    private void _resizethumb_DragDelta(object sender, DragDeltaEventArgs e);
    private void DropDownMenuGroup_KeyDown(object sender, KeyEventArgs e);
    private void DropDownMenuGroup_Loaded(object sender, RoutedEventArgs e);
    private void ValidateIconBarWidth();
    public sealed virtual void Dispose();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.DropDownMenuItem : HeaderedItemsControl {
    internal Popup _dropdown;
    internal ColumnDefinition _column;
    private ColumnDefinition subItemPathColumn;
    private EventHandler CanExecuteChangedHandler;
    private PropertyChangedCallback IsCheckedChanged;
    private RoutedEventHandler Click;
    public static DependencyProperty IconSizeProperty;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty HasItemsProperty;
    public static DependencyProperty IsCheckableProperty;
    public static DependencyProperty IsCheckedProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandTargetProperty;
    [CompilerGeneratedAttribute]
private DropDownMenuItem <ParentRibbonMenuItem>k__BackingField;
    internal DropDownMenuItem ParentRibbonMenuItem { get; internal set; }
    internal DropDownButtonAdv ParentDropDown { get; }
    public object Icon { get; public set; }
    public Size IconSize { get; public set; }
    public bool IsPressed { get; public set; }
    public bool HasItems { get; internal set; }
    [DescriptionAttribute("Represents the value, whether the element can be checkable or not")]
[CategoryAttribute("Common Properties")]
public bool IsCheckable { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Represents the value, whether the element is checked or not")]
public bool IsChecked { get; public set; }
    [CategoryAttribute("Common Properties")]
public ICommand Command { get; public set; }
    [CategoryAttribute("Common Properties")]
public object CommandParameter { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    private static DropDownMenuItem();
    public void add_IsCheckedChanged(PropertyChangedCallback value);
    public void remove_IsCheckedChanged(PropertyChangedCallback value);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
internal DropDownMenuItem get_ParentRibbonMenuItem();
    [CompilerGeneratedAttribute]
internal void set_ParentRibbonMenuItem(DropDownMenuItem value);
    internal DropDownButtonAdv get_ParentDropDown();
    private void DropDownMenuItem_Loaded(object sender, RoutedEventArgs e);
    public object get_Icon();
    public void set_Icon(object value);
    public Size get_IconSize();
    public void set_IconSize(Size value);
    public bool get_IsPressed();
    public void set_IsPressed(bool value);
    public bool get_HasItems();
    internal void set_HasItems(bool value);
    public bool get_IsCheckable();
    public void set_IsCheckable(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    private static void OnCommandChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private void OnCommandChanged(ICommand oldCommand, ICommand newCommand);
    private static void OnIsCheckableChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnIsCheckableChanged(DependencyPropertyChangedEventArgs e);
    private static void OnIsCheckedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    private void UpdateCanExecute();
    private void OnCanExecuteChanged(object sender, EventArgs e);
    private static bool CanExecuteCommandSource(DropDownMenuItem commandSource);
    private void RemoveSubMenuItemArrow();
    protected virtual void OnClick();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[CLSCompliantAttribute("True")]
public class Syncfusion.Windows.Tools.Controls.FloatingToolBar : ContentControl {
    internal WrapPanel panel;
    private double resizeOffset;
    private Thumb topThumb;
    private Thumb bottomThumb;
    private Thumb leftThumb;
    private Popup PART_DropPopUp;
    private Thumb rightThumb;
    private Thumb titleThumb;
    private FrameworkElement client;
    private ToolBarAdv toolBar;
    private bool forceDrag;
    private double maxLineSize;
    private double minLineSize;
    private bool isDragging;
    private Button closbutton;
    public static DependencyProperty ControlsResourceDictionaryProperty;
    public static DependencyProperty TitleProperty;
    internal Popup popup;
    [CompilerGeneratedAttribute]
private ToolBarManager <Manager>k__BackingField;
    internal ToolBarManager Manager { get; internal set; }
    public ToolBarAdv ToolBar { get; public set; }
    public ObservableCollection`1<ToolBarIteminfo> ToolBarItemInfoCollection { get; public set; }
    public ResourceDictionary ControlsResourceDictionary { get; public set; }
    internal bool ForceDrag { get; internal set; }
    public string Title { get; public set; }
    private static FloatingToolBar();
    [CompilerGeneratedAttribute]
internal ToolBarManager get_Manager();
    [CompilerGeneratedAttribute]
internal void set_Manager(ToolBarManager value);
    public ToolBarAdv get_ToolBar();
    public void set_ToolBar(ToolBarAdv value);
    public ObservableCollection`1<ToolBarIteminfo> get_ToolBarItemInfoCollection();
    public void set_ToolBarItemInfoCollection(ObservableCollection`1<ToolBarIteminfo> value);
    public ResourceDictionary get_ControlsResourceDictionary();
    public void set_ControlsResourceDictionary(ResourceDictionary value);
    internal bool get_ForceDrag();
    internal void set_ForceDrag(bool value);
    public string get_Title();
    public void set_Title(string value);
    private void FloatingToolBar_Loaded(object sender, RoutedEventArgs e);
    public virtual void OnApplyTemplate();
    private void GetTemplateChild();
    private void titleThumb_DragCompleted(object sender, DragCompletedEventArgs e);
    private void closbutton_Click(object sender, RoutedEventArgs e);
    private void OnMouseDown(object sender, MouseButtonEventArgs args);
    private static void OnControlsResourceDictionaryPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnControlsResourceDictionaryPropertyChanged(DependencyPropertyChangedEventArgs args);
    internal void ApplyStyleForControls();
    private void titleThumb_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void titleThumb_MouseMove(object sender, MouseEventArgs e);
    private void titleThumb_DragStarted(object sender, DragStartedEventArgs e);
    private void titleThumb_DragDelta(object sender, DragDeltaEventArgs e);
    internal void MoveWindow(double horizontalChange, double verticalChange);
    private void FindDockArea(Point point);
    private void ResizeDragDelta(object sender, DragDeltaEventArgs e);
    private void Resize(double change);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    private double GetMaxLineSize();
    private double GetMinLineSize();
    private void MeasureLineSizes();
    internal void InsertItems(ToolBarAdv toolBar);
    private void HookEvents();
    internal void UnhookEvents();
    private void FloatingToolBar_Unloaded(object sender, RoutedEventArgs e);
}
public class Syncfusion.Windows.Tools.Controls.HorizontalContentToTextAlignmentConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface Syncfusion.Windows.Tools.Controls.IButtonAdv {
    public string Label { get; public set; }
    public ImageSource LargeIcon { get; public set; }
    public ImageSource SmallIcon { get; public set; }
    public bool IsMultiLine { get; public set; }
    public SizeMode SizeMode { get; public set; }
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual ImageSource get_LargeIcon();
    public abstract virtual void set_LargeIcon(ImageSource value);
    public abstract virtual ImageSource get_SmallIcon();
    public abstract virtual void set_SmallIcon(ImageSource value);
    public abstract virtual bool get_IsMultiLine();
    public abstract virtual void set_IsMultiLine(bool value);
    public abstract virtual SizeMode get_SizeMode();
    public abstract virtual void set_SizeMode(SizeMode value);
}
public interface Syncfusion.Windows.Tools.Controls.IPrintDocument {
    public int TotalPages { get; public set; }
    public Size PageSize { get; public set; }
    public Size PrintablePageSize { get; public set; }
    public Thickness Margin { get; public set; }
    public abstract virtual int get_TotalPages();
    public abstract virtual void set_TotalPages(int value);
    public abstract virtual Size get_PageSize();
    public abstract virtual void set_PageSize(Size value);
    public abstract virtual Size get_PrintablePageSize();
    public abstract virtual void set_PrintablePageSize(Size value);
    public abstract virtual Thickness get_Margin();
    public abstract virtual void set_Margin(Thickness value);
    public abstract virtual FrameworkElement GetPage(int pageNo);
    public abstract virtual void OnSetPageSize();
}
public class Syncfusion.Windows.Tools.Controls.MoreColorCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public object Source { get; public set; }
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class Syncfusion.Windows.Tools.Controls.MoreColorsWindow : Window {
    private double adj;
    internal double hyp;
    private double opp;
    internal double xp;
    internal double yp;
    internal double x;
    internal double y;
    private PolygonItem polygontemp;
    internal PolygonItem polygonitem;
    internal Binding bind;
    public ObservableCollection`1<PolygonItem> morecolorcollection;
    public ColorPickerPalette palette;
    private double xprev;
    private double yprev;
    internal Grid WindowGrid;
    internal Grid LayoutRoot;
    internal Button OKButton;
    internal Button CancelButton;
    internal Border New;
    internal Border Current;
    internal TabControl tab;
    internal TabItem standard;
    internal StackPanel standardPanel;
    internal ItemsControl Item;
    internal Path path;
    internal Path path1;
    internal TabItem custom;
    internal StackPanel custompanel;
    internal ColorEdit asd;
    internal Thumb thumb1;
    internal Thumb thumb2;
    internal Thumb thumb3;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private Brush <color>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<PolygonItem, bool> CS$<>9__CachedAnonymousMethodDelegate92;
    [CompilerGeneratedAttribute]
private static Func`2<PolygonItem, bool> CS$<>9__CachedAnonymousMethodDelegate94;
    [CompilerGeneratedAttribute]
private static Func`2<PolygonItem, bool> CS$<>9__CachedAnonymousMethodDelegate9d;
    [CompilerGeneratedAttribute]
private static Func`2<PolygonItem, bool> CS$<>9__CachedAnonymousMethodDelegate9f;
    internal Brush color { get; internal set; }
    [CompilerGeneratedAttribute]
internal Brush get_color();
    [CompilerGeneratedAttribute]
internal void set_color(Brush value);
    private void MoreColorsWindow_Unloaded(object sender, RoutedEventArgs e);
    private void LoadPolygonItem();
    private void drawPath1();
    private void drawSmallPath1();
    private void ChildWindow1KeyDown(object sender, KeyEventArgs e);
    private int GetPolygonItem(double x, double y, PolygonItem& polygon);
    private void OKButton_Click(object sender, RoutedEventArgs e);
    private void SelectAndClose();
    private void close();
    private void CancelButton_Click(object sender, RoutedEventArgs e);
    public PointCollection CalculatePoints(double x, double y, double side);
    public PointCollection CalculatePoints(double x, double y);
    private void asdSelectedBrushChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void RadioButtonClick(object sender, RoutedEventArgs e);
    private void HSVRadioButtonClick(object sender, RoutedEventArgs e);
    private void tab_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void Thumb_DragDelta(object sender, DragDeltaEventArgs e);
    private void tab_SizeChanged(object sender, SizeChangedEventArgs e);
    private void Thumb_DragDelta_1(object sender, DragDeltaEventArgs e);
    protected virtual void OnClosed(EventArgs e);
    internal void Dispose();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private static bool <drawPath1>b__91(PolygonItem more);
    [CompilerGeneratedAttribute]
private static bool <drawSmallPath1>b__93(PolygonItem more);
    [CompilerGeneratedAttribute]
private static bool <ChildWindow1KeyDown>b__97(PolygonItem more);
    [CompilerGeneratedAttribute]
private static bool <ChildWindow1KeyDown>b__99(PolygonItem more);
    [CompilerGeneratedAttribute]
private bool <tab_SelectionChanged>b__a3(PolygonItem more);
    [CompilerGeneratedAttribute]
private bool <tab_SizeChanged>b__a5(PolygonItem more);
    [CompilerGeneratedAttribute]
private bool <tab_SizeChanged>b__a6(PolygonItem more);
}
public class Syncfusion.Windows.Tools.Controls.MoreColorVisibilityconverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Tools.Controls.OrientedValue : object {
    public static double GetOrientedXValue(Point point, Orientation orientation);
    public static double GetOrientedYValue(Point point, Orientation orientation);
    public static double GetOrientedTopValue(Rect rect, Orientation orientation);
    public static double GetOrientedBottomValue(Rect rect, Orientation orientation);
    public static double GetOrientedLeftValue(Rect rect, Orientation orientation);
    public static double GetOrientedRightValue(Rect rect, Orientation orientation);
    public static double GetOrientedWidthValue(Size size, Orientation orientation);
    public static double GetOrientedHeightValue(Size size, Orientation orientation);
    public static double GetOrientedWidthValue(Rect rect, Orientation orientation);
    public static double GetOrientedHeightValue(Rect rect, Orientation orientation);
    public static Size GetOrientedSize(double width, double height, Orientation orientation);
}
public enum Syncfusion.Windows.Tools.Controls.OverflowMode : Enum {
    public int value__;
    public static OverflowMode AsNeeded;
    public static OverflowMode Always;
    public static OverflowMode Never;
}
public class Syncfusion.Windows.Tools.Controls.PageInformation : object {
    private int pageNumber;
    private int totalPages;
    private PropertyChangedEventHandler PropertyChanged;
    public int PageNumber { get; internal set; }
    public int TotalPages { get; internal set; }
    internal void set_PageNumber(int value);
    public int get_PageNumber();
    internal void set_TotalPages(int value);
    public int get_TotalPages();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnPropertyChanged(string name);
}
internal class Syncfusion.Windows.Tools.Controls.PageSetupUI : ChromelessWindow {
    private Dictionary`2<string, PaperSize> pages;
    private double _pageWidth;
    private double _pageHeight;
    private double _leftMargin;
    private double _topMargin;
    private double _bottomMargin;
    private double _rightMargin;
    private PrintPageSettings pageSetupSettings;
    internal Grid grd_General;
    internal UpDown top;
    internal UpDown bottom;
    internal UpDown left;
    internal UpDown right;
    internal RadioButton portrait;
    internal RadioButton landscape;
    internal ComboBox pagesize;
    internal UpDown pageWidth;
    internal UpDown pageHeight;
    internal Button Cancel_button;
    internal Button Ok_button;
    internal Button Default;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private bool <IsInternalChange>k__BackingField;
    public bool IsInternalChange { get; public set; }
    public double PageWidth { get; }
    public double PageHeight { get; }
    public double LeftMargin { get; }
    public double TopMargin { get; }
    public double BottomMargin { get; }
    public double RightMargin { get; }
    private PrintPageSettings PageSetupSettings { get; private set; }
    public PageSetupUI(PrintPageSettings pageSettings);
    [CompilerGeneratedAttribute]
public bool get_IsInternalChange();
    [CompilerGeneratedAttribute]
public void set_IsInternalChange(bool value);
    public double get_PageWidth();
    public double get_PageHeight();
    public double get_LeftMargin();
    public double get_TopMargin();
    public double get_BottomMargin();
    public double get_RightMargin();
    private PrintPageSettings get_PageSetupSettings();
    private void set_PageSetupSettings(PrintPageSettings value);
    private void GetPageSettings();
    private void SetPageSettings();
    private void Default_Click(object sender, RoutedEventArgs e);
    private void Orientation_Checked(object sender, RoutedEventArgs e);
    private void pagesize_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void Ok_button_Click(object sender, RoutedEventArgs e);
    private void LoadPageDimention();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public enum Syncfusion.Windows.Tools.Controls.PaletteTheme : Enum {
    public int value__;
    public static PaletteTheme Office;
    public static PaletteTheme Grayscale;
    public static PaletteTheme Apex;
    public static PaletteTheme Aspect;
    public static PaletteTheme Civic;
    public static PaletteTheme Equity;
    public static PaletteTheme Flow;
    public static PaletteTheme Foundary;
    public static PaletteTheme Median;
    public static PaletteTheme Metro;
}
internal class Syncfusion.Windows.Tools.Controls.PaperSize : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public double Width { get; public set; }
    public double Height { get; public set; }
    public PaperSize(double x, double y);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
}
public enum Syncfusion.Windows.Tools.Controls.PickerMode : Enum {
    public int value__;
    public static PickerMode Palette;
    public static PickerMode DropDown;
    public static PickerMode Split;
}
public class Syncfusion.Windows.Tools.Controls.PolygonItem : Control {
    public static DependencyProperty PointsProperty;
    public static DependencyProperty ColorNameProperty;
    public static DependencyProperty colorProperty;
    public static DependencyProperty RowIndexProperty;
    public static DependencyProperty ColumnIndexProperty;
    private PolygonItem more;
    private Polygon poly;
    internal MoreColorsWindow child;
    internal Path paths;
    [CompilerGeneratedAttribute]
private static Func`2<PolygonItem, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<PolygonItem, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public int ColumnIndex { get; public set; }
    public string ColorName { get; public set; }
    public int RowIndex { get; public set; }
    public Brush color { get; public set; }
    public PointCollection Points { get; public set; }
    private static PolygonItem();
    public int get_ColumnIndex();
    public void set_ColumnIndex(int value);
    public string get_ColorName();
    public void set_ColorName(string value);
    public int get_RowIndex();
    public void set_RowIndex(int value);
    public Brush get_color();
    public void set_color(Brush value);
    public PointCollection get_Points();
    public void set_Points(PointCollection value);
    public virtual void OnApplyTemplate();
    internal static MoreColorsWindow GetBrushEditParentFromChildren(FrameworkElement element);
    private void polyMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    internal PathGeometry DrawPath(PointCollection points);
    private static void IsColorChanged(DependencyObject o, DependencyPropertyChangedEventArgs e);
    internal void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private static bool <polyMouseLeftButtonDown>b__0(PolygonItem more);
    [CompilerGeneratedAttribute]
private static bool <polyMouseLeftButtonDown>b__1(PolygonItem more);
}
internal class Syncfusion.Windows.Tools.Controls.PrintPageSettings : object {
    [CompilerGeneratedAttribute]
private Orientation <PageOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Thickness <PageMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageType>k__BackingField;
    public Orientation PageOrientation { get; public set; }
    internal double PageWidth { get; internal set; }
    internal double PageHeight { get; internal set; }
    internal Thickness PageMargin { get; internal set; }
    internal string PageType { get; internal set; }
    [CompilerGeneratedAttribute]
public Orientation get_PageOrientation();
    [CompilerGeneratedAttribute]
public void set_PageOrientation(Orientation value);
    [CompilerGeneratedAttribute]
internal double get_PageWidth();
    [CompilerGeneratedAttribute]
internal void set_PageWidth(double value);
    [CompilerGeneratedAttribute]
internal double get_PageHeight();
    [CompilerGeneratedAttribute]
internal void set_PageHeight(double value);
    [CompilerGeneratedAttribute]
internal Thickness get_PageMargin();
    [CompilerGeneratedAttribute]
internal void set_PageMargin(Thickness value);
    [CompilerGeneratedAttribute]
internal string get_PageType();
    [CompilerGeneratedAttribute]
internal void set_PageType(string value);
}
public class Syncfusion.Windows.Tools.Controls.PrintPreviewControl : UserControl {
    private static double ZOOM_STARTING_SIZE;
    private bool isLoaded;
    private int currentpage;
    private double zoomFactor;
    private PageSetupUI PageSetup;
    private PageInformation pageInfo;
    private PrintPageSettings pageSettings;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty FooterTemplateProperty;
    public static DependencyProperty ZoomFactorProperty;
    internal Grid MainGrid;
    internal RowDefinition toolBarGridRow;
    internal RowDefinition parameterGridRow;
    internal RowDefinition viewerContentRow;
    internal StackPanel toolBar;
    internal Button buttonPrint;
    internal Button buttonFirst;
    internal Button buttonPrevious;
    internal TextBox textBoxCurrentPage;
    internal TextBlock labelOf;
    internal TextBlock textBoxTotalPages;
    internal Button buttonNext;
    internal Button buttonLast;
    internal Border comboBoxExternalBorder;
    internal ComboBox comboBoxPageZoom;
    internal Button PageLayout;
    internal Grid gridRenderingRegion;
    internal ScrollViewer scrollViewer;
    internal StackPanel PageView;
    internal ScaleTransform Zoom;
    internal Grid renderArea;
    internal ContentControl renderHeader;
    internal ContentControl renderCanvas;
    internal ContentControl renderFooter;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private IPrintDocument <PrintDocument>k__BackingField;
    public bool CanMoveNext { get; }
    public bool CanMovePrevious { get; }
    public bool CanMoveFirst { get; }
    public bool CanMoveLast { get; }
    internal DataTemplate HeaderTemplate { get; public set; }
    internal DataTemplate FooterTemplate { get; public set; }
    public int CurrentPage { get; public set; }
    public int TotalPage { get; }
    public IPrintDocument PrintDocument { get; public set; }
    public double ZoomFactor { get; public set; }
    private PrintPageSettings PageSetupSettings { get; private set; }
    public PrintPreviewControl(IPrintDocument printDocument);
    private static PrintPreviewControl();
    public bool get_CanMoveNext();
    public bool get_CanMovePrevious();
    public bool get_CanMoveFirst();
    public bool get_CanMoveLast();
    public void set_HeaderTemplate(DataTemplate value);
    internal DataTemplate get_HeaderTemplate();
    public void set_FooterTemplate(DataTemplate value);
    internal DataTemplate get_FooterTemplate();
    public int get_CurrentPage();
    public void set_CurrentPage(int value);
    public int get_TotalPage();
    [CompilerGeneratedAttribute]
public IPrintDocument get_PrintDocument();
    [CompilerGeneratedAttribute]
public void set_PrintDocument(IPrintDocument value);
    public double get_ZoomFactor();
    public void set_ZoomFactor(double value);
    private PrintPageSettings get_PageSetupSettings();
    private void set_PageSetupSettings(PrintPageSettings value);
    public static void OnHeaderTemplatePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public static void OnFooterTemplatePropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    public static void OnZoomFactorPropertyChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e);
    private void WireEvents();
    public void UpdateToolbarCulture();
    private void PrintNavigationControl_Loaded(object sender, RoutedEventArgs e);
    private void IntializePrintDialog();
    private double GetHeight(DataTemplate dataTemplate);
    private void comboBoxPageZoom_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void SetPageContent(int pageNo);
    private void UpdatePageDetails(int pageno);
    private void SetPageSize();
    public void UpdatePrintDialog();
    private void UpdateImageContent();
    private void buttonFirst_Click(object sender, RoutedEventArgs e);
    private void buttonPrevious_Click(object sender, RoutedEventArgs e);
    private void buttonNext_Click(object sender, RoutedEventArgs e);
    private void buttonLast_Click(object sender, RoutedEventArgs e);
    private void buttonprint_Click(object sender, RoutedEventArgs e);
    private StackPanel GetPageVisual(int pageNo);
    public void Print();
    private FixedDocument GetFixedDocument();
    private void PageLayout_Click(object sender, RoutedEventArgs e);
    private void Ok_button_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Syncfusion.Windows.Tools.Controls.PrintVisualContainer : FrameworkElement {
    private VisualCollection children;
    protected int VisualChildrenCount { get; }
    public void AddVisual(Visual v);
    protected virtual Visual GetVisualChild(int index);
    protected virtual int get_VisualChildrenCount();
}
public class Syncfusion.Windows.Tools.Controls.SelectedBrushChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Brush <OldBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Brush <NewBrush>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <OldColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <NewColor>k__BackingField;
    public Brush OldBrush { get; internal set; }
    public Brush NewBrush { get; internal set; }
    public Color OldColor { get; internal set; }
    public Color NewColor { get; internal set; }
    [CompilerGeneratedAttribute]
public Brush get_OldBrush();
    [CompilerGeneratedAttribute]
internal void set_OldBrush(Brush value);
    [CompilerGeneratedAttribute]
public Brush get_NewBrush();
    [CompilerGeneratedAttribute]
internal void set_NewBrush(Brush value);
    [CompilerGeneratedAttribute]
public Color get_OldColor();
    [CompilerGeneratedAttribute]
internal void set_OldColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_NewColor();
    [CompilerGeneratedAttribute]
internal void set_NewColor(Color value);
}
public enum Syncfusion.Windows.Tools.Controls.SizeMode : Enum {
    public int value__;
    public static SizeMode Normal;
    public static SizeMode Small;
    public static SizeMode Large;
}
public class Syncfusion.Windows.Tools.Controls.SizeToDoubleConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.SplitButtonAdv : DropDownButtonAdv {
    private Border _button;
    private Border _dropdownbutton;
    private Border _buttonNormal;
    private Border _dropdownbuttonNormal;
    private Popup _dropdown;
    private RoutedEventHandler Click;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty IsDefaultProperty;
    public static DependencyProperty CommandTargetProperty;
    public static DependencyProperty IsDropDownPressedProperty;
    private EventHandler canExecuteChangedEventHandler;
    [DescriptionAttribute("Gets or sets the command when the Button is pressed")]
[CategoryAttribute("Common Properties")]
public ICommand Command { get; public set; }
    [CategoryAttribute("Common Properties")]
[DescriptionAttribute("Gets or sets the parameter to pass the Command property")]
public object CommandParameter { get; public set; }
    public bool IsDefault { get; public set; }
    public IInputElement CommandTarget { get; public set; }
    public bool IsDropDownPressed { get; protected internal set; }
    private static SplitButtonAdv();
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    protected virtual void OnClick();
    public sealed virtual ICommand get_Command();
    public void set_Command(ICommand value);
    public sealed virtual object get_CommandParameter();
    public void set_CommandParameter(object value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public sealed virtual IInputElement get_CommandTarget();
    public void set_CommandTarget(IInputElement value);
    public bool get_IsDropDownPressed();
    protected internal void set_IsDropDownPressed(bool value);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    private void _button_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void _button_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    public virtual void OnApplyTemplate();
    private static void OnAccessKeyPressed(object sender, AccessKeyPressedEventArgs e);
    protected virtual void OnAccessKey(AccessKeyEventArgs e);
    private void _buttonNormal_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void _dropdown_Closed(object sender, EventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    private void _dropdownbutton_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private static void OnIsDefaultChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public void Dispose();
    private static void CommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void HookUpCommand(ICommand oldCommand, ICommand newCommand);
    private void RemoveCommand(ICommand oldCommand, ICommand newCommand);
    private void AddCommand(ICommand oldCommand, ICommand newCommand);
    private void CanExecuteChanged(object sender, EventArgs e);
}
public class Syncfusion.Windows.Tools.Controls.TemplateToVisibilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Tools.Controls.TextToVisibilityConverter : StringVisibilityConverter {
}
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.ToolBarAdv : ItemsControl {
    private ToolBarPanelAdv ToolBarPanel;
    private DropDownButtonAdv addorRemoveButton;
    internal bool isInternallyChangingState;
    internal Dictionary`2<object, DependencyObject> generatedConatiner;
    internal List`1<object> ToolStripItems;
    internal List`1<object> OverflowItems;
    internal Size RequiredSize;
    private DropDownMenuGroup PART_AddRemoveItems;
    internal Size EmptySpace;
    private static bool stateChanged;
    internal bool CanToolStripItemsMoveToOverflow;
    internal bool CanOverflowItemMoveToToolStrip;
    internal Grid DraggingThumb;
    internal Rect BoundingRectangle;
    internal ToolBarBand ToolBarBand;
    private bool isDragging;
    private FrameworkElement OverflowButton;
    private Panel OverflowPanel;
    internal Size ExtraSize;
    private Popup OverflowPopup;
    private bool hasOverflowItems;
    internal FloatingToolBar floatingToolBar;
    private Path overflowHorizantalPath;
    private Path overflowHorizantalPathRight;
    private Path overflowVerticalPath;
    private Path overflowVerticalPathBottom;
    private DataTemplate defaultDropDownIconTemplate;
    internal bool isArranged;
    internal bool isMeasured;
    private bool ispressed;
    private bool isLoaded;
    internal bool isWindows11;
    private bool canMouseMoveExecute;
    private EventHandler`1<ToolBarStateChangedEventArgs> ToolBarStateChanged;
    public static DependencyProperty EnableAddRemoveButtonProperty;
    public static DependencyProperty FloatingBarLocationProperty;
    public static DependencyProperty OverflowModeProperty;
    internal static DependencyProperty IsOverflowItemProperty;
    public static DependencyProperty GripperVisibilityProperty;
    public static DependencyProperty OverflowButtonVisibilityProperty;
    public static DependencyProperty BandProperty;
    public static DependencyProperty BandIndexProperty;
    public static DependencyProperty ToolBarNameProperty;
    public static DependencyProperty ControlsResourceDictionaryProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty IsAvailableProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty IsOverflowOpenProperty;
    public static DependencyProperty ToolBarItemInfoCollectionProperty;
    public static DependencyProperty IconTemplateProperty;
    internal bool Expanded;
    internal Nullable`1<double> CollapsedWidth;
    internal Nullable`1<double> CollapsedHeight;
    [CompilerGeneratedAttribute]
private ToolBarTrayAdv <Tray>k__BackingField;
    internal ToolBarTrayAdv Tray { get; internal set; }
    internal bool IsHostedInsideTray { get; }
    internal bool IsDragging { get; internal set; }
    public bool EnableAddRemoveButton { get; public set; }
    public Point FloatingBarLocation { get; public set; }
    internal bool IsOverflowItem { get; internal set; }
    public Visibility GripperVisibility { get; public set; }
    public Visibility OverflowButtonVisibility { get; public set; }
    public int Band { get; public set; }
    public int BandIndex { get; public set; }
    public string ToolBarName { get; public set; }
    public ResourceDictionary ControlsResourceDictionary { get; public set; }
    public bool HasOverflowItems { get; internal set; }
    public Orientation Orientation { get; internal set; }
    public bool IsOverflowOpen { get; public set; }
    public ObservableCollection`1<ToolBarIteminfo> ToolBarItemInfoCollection { get; public set; }
    private static ToolBarAdv();
    [CompilerGeneratedAttribute]
internal ToolBarTrayAdv get_Tray();
    [CompilerGeneratedAttribute]
internal void set_Tray(ToolBarTrayAdv value);
    public void add_ToolBarStateChanged(EventHandler`1<ToolBarStateChangedEventArgs> value);
    public void remove_ToolBarStateChanged(EventHandler`1<ToolBarStateChangedEventArgs> value);
    internal bool get_IsHostedInsideTray();
    internal bool get_IsDragging();
    internal void set_IsDragging(bool value);
    public bool get_EnableAddRemoveButton();
    public void set_EnableAddRemoveButton(bool value);
    public Point get_FloatingBarLocation();
    public void set_FloatingBarLocation(Point value);
    public static OverflowMode GetOverflowMode(DependencyObject obj);
    public static void SetOverflowMode(DependencyObject obj, OverflowMode value);
    public static bool GetIsOverflowItem(DependencyObject obj);
    private static void SetIsOverflowItem(DependencyObject obj, bool value);
    internal bool get_IsOverflowItem();
    internal void set_IsOverflowItem(bool value);
    public Visibility get_GripperVisibility();
    public void set_GripperVisibility(Visibility value);
    public Visibility get_OverflowButtonVisibility();
    public void set_OverflowButtonVisibility(Visibility value);
    public int get_Band();
    public void set_Band(int value);
    public int get_BandIndex();
    public void set_BandIndex(int value);
    public string get_ToolBarName();
    public void set_ToolBarName(string value);
    private static void OnToolBarNamechanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnToolBarNamechanged(DependencyPropertyChangedEventArgs args);
    public ResourceDictionary get_ControlsResourceDictionary();
    public void set_ControlsResourceDictionary(ResourceDictionary value);
    public static string GetLabel(DependencyObject obj);
    public static void SetLabel(DependencyObject obj, string value);
    public static ImageSource GetIcon(DependencyObject obj);
    public static void SetIcon(DependencyObject obj, ImageSource value);
    public static bool GetIsAvailable(DependencyObject obj);
    public static void SetIsAvailable(DependencyObject obj, bool value);
    private static void OnIsAvailableChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    public bool get_HasOverflowItems();
    internal void set_HasOverflowItems(bool value);
    public Orientation get_Orientation();
    internal void set_Orientation(Orientation value);
    private static void OnOrientationChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    public bool get_IsOverflowOpen();
    public void set_IsOverflowOpen(bool value);
    public ObservableCollection`1<ToolBarIteminfo> get_ToolBarItemInfoCollection();
    public void set_ToolBarItemInfoCollection(ObservableCollection`1<ToolBarIteminfo> value);
    public static DataTemplate GetIconTemplate(DependencyObject obj);
    public static void SetIconTemplate(DependencyObject obj, DataTemplate value);
    private void ToolBarAdv_Loaded(object sender, RoutedEventArgs e);
    internal void RaiseToolBarStateChanged(ToolBarState oldState, ToolBarState newState);
    private void DraggingThumb_MouseLeave(object sender, MouseEventArgs e);
    private void DraggingThumb_MouseMove1(object sender, MouseEventArgs e);
    private void DraggingThumb_MouseLeftButtonUp1(object sender, MouseButtonEventArgs e);
    private void DraggingThumb_MouseLeftButtonDown1(object sender, MouseButtonEventArgs e);
    internal static IEnumerable`1<T> FindVisualChildren(DependencyObject parent);
    public virtual void OnApplyTemplate();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    private void addorRemoveButton_DropDownClosed(object sender, RoutedEventArgs e);
    private void OverflowPopup_Closed(object sender, EventArgs e);
    private static void OnFloatingBarLocationChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnFloatingBarLocationChanged(DependencyPropertyChangedEventArgs args);
    private static void OnControlsResourceDictionaryPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnControlsResourceDictionaryPropertyChanged(DependencyPropertyChangedEventArgs args);
    internal void OnToolBarStateChanged(ToolBarState oldState, ToolBarState newState);
    internal void DockToolBar(DockArea area);
    internal void ChangeStateInternally(ToolBarState state);
    private void RootVisual_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void UpdateOverflowPathsVisibility();
    private void DraggingThumb_MouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    private void OverflowButton_Click(object sender, RoutedEventArgs e);
    private void DraggingThumb_MouseLeftButtonUp(object sender, MouseButtonEventArgs e);
    private void DraggingThumb_MouseMove(object sender, MouseEventArgs e);
    internal void FloatToolBar(Point point, bool forceDrag);
    private static void OnBandChanged(DependencyObject dp, DependencyPropertyChangedEventArgs args);
    protected void OnBandChanged(DependencyPropertyChangedEventArgs args);
    private static void OnBandIndexChanged(DependencyObject dp, DependencyPropertyChangedEventArgs args);
    protected void OnBandIndexChanged(DependencyPropertyChangedEventArgs args);
    protected virtual void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue);
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    private bool IsOverflowAlways(object item);
    private bool IsAlwaysInToolStrip(object item);
    private void UpdateVisualState();
    internal void ClearTempItems();
    private void GenerateToolStripAndOverflowItems(Size size);
    internal void InsertItemToPanel(Panel panel, object item);
    private void CacheContainer(object item, DependencyObject container);
    private DependencyObject GetContainerOfItem(object item);
    private void GenerateContainers();
    private Size GetSize(object item);
    private void InsertToolStripItems();
    private void InsertOverflowItems();
    private void ClearContainers();
    private void ClearToolBarPanel();
    private void ClearOverflowPanel();
    internal Size GetDesiredSize();
    internal void Arrange(Size size);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    protected virtual DependencyObject GetContainerForItemOverride();
    internal void Resize(Size availableSize);
    protected virtual Size MeasureOverride(Size availableSize);
    private Size GetValidSize(Size size);
    private void UpdateToolbarItemInfoCollection();
}
public class Syncfusion.Windows.Tools.Controls.ToolBarBand : object {
    private ToolBarTrayAdv tray;
    private bool isWindowResizing;
    [CompilerGeneratedAttribute]
private double <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BandNo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ToolBarAdv> <ToolBars>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <BoundingRectangle>k__BackingField;
    public double Size { get; public set; }
    public int BandNo { get; public set; }
    internal bool IsWindowResizing { get; internal set; }
    internal List`1<ToolBarAdv> ToolBars { get; internal set; }
    public Rect BoundingRectangle { get; internal set; }
    public ToolBarBand(ToolBarTrayAdv trayAdv);
    [CompilerGeneratedAttribute]
public double get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(double value);
    [CompilerGeneratedAttribute]
public int get_BandNo();
    [CompilerGeneratedAttribute]
public void set_BandNo(int value);
    internal bool get_IsWindowResizing();
    internal void set_IsWindowResizing(bool value);
    [CompilerGeneratedAttribute]
internal List`1<ToolBarAdv> get_ToolBars();
    [CompilerGeneratedAttribute]
internal void set_ToolBars(List`1<ToolBarAdv> value);
    [CompilerGeneratedAttribute]
public Rect get_BoundingRectangle();
    [CompilerGeneratedAttribute]
internal void set_BoundingRectangle(Rect value);
    public void Insert(ToolBarAdv toolBar);
    public void InsertAt(int pos, ToolBarAdv bar);
    public void Remove(ToolBarAdv bar);
    public void CorrectOrder();
    private void CorrectBandIndexes();
    public int GetPosition(double xPos);
    private int CompareBandIndex(ToolBarAdv bar1, ToolBarAdv bar2);
    internal Size ArrangeToolBars(double x, double y);
    internal Size Measure(Size availableSize);
    private void CollapseToolBar(ToolBarAdv bar, Size availableSize);
    private double GetSizeExceptPointerElement(int pointerIndex, bool flag);
    private double FindMaxSize();
    internal static int CompareBand(ToolBarBand bar1, ToolBarBand bar2);
}
public class Syncfusion.Windows.Tools.Controls.ToolBarIteminfo : object {
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageSource <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTemplate <IconTemplate>k__BackingField;
    public string Label { get; public set; }
    public ImageSource Icon { get; public set; }
    public object Host { get; public set; }
    public bool IsChecked { get; public set; }
    public DataTemplate IconTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public ImageSource get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(ImageSource value);
    [CompilerGeneratedAttribute]
public object get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(object value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
public DataTemplate get_IconTemplate();
    [CompilerGeneratedAttribute]
public void set_IconTemplate(DataTemplate value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void OnPropertyChanged(string property);
    private void ToolBarIteminfo_PropertyChanged(object sender, PropertyChangedEventArgs e);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Tools.Controls.ToolBarItemSeparator : Control {
    public static DependencyProperty OrientationProperty;
    public Orientation Orientation { get; public set; }
    private static ToolBarItemSeparator();
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
}
[SkinTypeAttribute]
[ToolboxItemAttribute("False")]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("False")]
[SkinTypeAttribute]
[ContentPropertyAttribute("Content")]
[StyleTypedPropertyAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
public class Syncfusion.Windows.Tools.Controls.ToolBarManager : Control {
    internal ContentControl content;
    private ToolBarManagerPanel panel;
    private bool needToInvalidate;
    private Size currentSize;
    internal List`1<FloatingToolBar> FloatingToolBars;
    public static DependencyProperty LeftToolBarTrayProperty;
    public static DependencyProperty RightToolBarTrayProperty;
    public static DependencyProperty TopToolBarTrayProperty;
    public static DependencyProperty BottomToolBarTrayProperty;
    public static DependencyProperty ContentProperty;
    public static DependencyProperty CanDockAtTopProperty;
    public static DependencyProperty CanDockAtBottomProperty;
    public static DependencyProperty CanDockAtLeftProperty;
    public static DependencyProperty CanDockAtRightProperty;
    internal static DependencyProperty DockAreaProperty;
    public static DependencyProperty ToolBarStateProperty;
    public static DependencyProperty FloatingToolBarStyleProperty;
    private Window wn;
    public ToolBarTrayAdv LeftToolBarTray { get; public set; }
    public ToolBarTrayAdv RightToolBarTray { get; public set; }
    public ToolBarTrayAdv TopToolBarTray { get; public set; }
    public ToolBarTrayAdv BottomToolBarTray { get; public set; }
    public UIElement Content { get; public set; }
    public bool CanDockAtTop { get; public set; }
    public bool CanDockAtBottom { get; public set; }
    public bool CanDockAtLeft { get; public set; }
    public bool CanDockAtRight { get; public set; }
    public Style FloatingToolBarStyle { get; public set; }
    private static ToolBarManager();
    public ToolBarTrayAdv get_LeftToolBarTray();
    public void set_LeftToolBarTray(ToolBarTrayAdv value);
    public ToolBarTrayAdv get_RightToolBarTray();
    public void set_RightToolBarTray(ToolBarTrayAdv value);
    public ToolBarTrayAdv get_TopToolBarTray();
    public void set_TopToolBarTray(ToolBarTrayAdv value);
    public ToolBarTrayAdv get_BottomToolBarTray();
    public void set_BottomToolBarTray(ToolBarTrayAdv value);
    public UIElement get_Content();
    public void set_Content(UIElement value);
    public bool get_CanDockAtTop();
    public void set_CanDockAtTop(bool value);
    public bool get_CanDockAtBottom();
    public void set_CanDockAtBottom(bool value);
    public bool get_CanDockAtLeft();
    public void set_CanDockAtLeft(bool value);
    public bool get_CanDockAtRight();
    public void set_CanDockAtRight(bool value);
    internal static DockArea GetDockArea(DependencyObject obj);
    internal static void SetDockArea(DependencyObject obj, DockArea value);
    public static ToolBarState GetToolBarState(ToolBarAdv obj);
    public static void SetToolBarState(ToolBarAdv obj, ToolBarState value);
    public Style get_FloatingToolBarStyle();
    public void set_FloatingToolBarStyle(Style value);
    private void ToolBarManager_Loaded(object sender, RoutedEventArgs e);
    private void WindowStateClosed(object sender, EventArgs e);
    private void WindowStateActivated(object sender, EventArgs e);
    private void WindowStateDeactivated(object sender, EventArgs e);
    private void ToolBarManager_Unloaded(object sender, RoutedEventArgs e);
    private void wn_StateChanged(object sender, EventArgs e);
    private static void OnTopTrayChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnToolBarStateChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnLeftTrayChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnRightTrayChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private static void OnBottomTrayChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    public virtual void OnApplyTemplate();
    private void OnTrayChanged(DependencyPropertyChangedEventArgs args);
    private void InsertTray(ToolBarTrayAdv oldTray, ToolBarTrayAdv newTray);
    private static void OnFloatingToolBarStyleChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    private void OnFloatingToolBarStyleChanged(DependencyPropertyChangedEventArgs args);
    private void InsertTrays();
    private void RemoveFromParent(ToolBarTrayAdv tray);
    internal bool CanDock(DockArea area);
    internal void Remove(ToolBarTrayAdv tray);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    private Size MeasureCall(Size availableSize);
    internal DockArea FindDockArea(Point point);
    private double GetSize(ToolBarTrayAdv tray, Orientation orientation);
    internal ToolBarTrayAdv GetToolBarTray(DockArea area);
    internal DockArea GetDockArea(ToolBarTrayAdv tray);
    internal void DockTray(ToolBarTrayAdv tray, DockArea area);
    internal void DockToolBar(ToolBarAdv toolBar, DockArea area);
    public void InvalidateLayout();
    internal void Invalidate();
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class Syncfusion.Windows.Tools.Controls.ToolBarManagerPanel : Panel {
    private ToolBarManager manager;
    public ToolBarManager Manager { get; }
    public ToolBarManager get_Manager();
    internal void Arrange(Size finalSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    private void CalculateSize(ToolBarTrayAdv tray, Double& size);
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class Syncfusion.Windows.Tools.Controls.ToolBarOverflowPanel : WrapPanel {
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class Syncfusion.Windows.Tools.Controls.ToolBarPanelAdv : StackPanel {
    public virtual void OnApplyTemplate();
}
public enum Syncfusion.Windows.Tools.Controls.ToolBarState : Enum {
    public int value__;
    public static ToolBarState Docking;
    public static ToolBarState Floating;
    public static ToolBarState Hidden;
}
public class Syncfusion.Windows.Tools.Controls.ToolBarStateChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ToolBarState <OldState>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolBarState <NewState>k__BackingField;
    public ToolBarState OldState { get; internal set; }
    public ToolBarState NewState { get; internal set; }
    [CompilerGeneratedAttribute]
public ToolBarState get_OldState();
    [CompilerGeneratedAttribute]
internal void set_OldState(ToolBarState value);
    [CompilerGeneratedAttribute]
public ToolBarState get_NewState();
    [CompilerGeneratedAttribute]
internal void set_NewState(ToolBarState value);
}
[SkinTypeAttribute]
[TemplatePartAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[DesignTimeVisibleAttribute("False")]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[ContentPropertyAttribute("ToolBars")]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[SkinTypeAttribute]
[ToolboxItemAttribute("False")]
public class Syncfusion.Windows.Tools.Controls.ToolBarTrayAdv : Control {
    internal List`1<ToolBarBand> Bands;
    private TrayPanel panel;
    private bool forceArrangeCall;
    private bool forceMeasureCall;
    internal ToolBarManager ToolBarManager;
    public static DependencyProperty ToolBarsProperty;
    public static DependencyProperty IsLockedProperty;
    public static DependencyProperty OrientationProperty;
    public bool IsHostedInToolBarManager { get; }
    public ObservableCollection`1<ToolBarAdv> ToolBars { get; internal set; }
    public bool IsLocked { get; public set; }
    public Orientation Orientation { get; public set; }
    private static ToolBarTrayAdv();
    public bool get_IsHostedInToolBarManager();
    public ObservableCollection`1<ToolBarAdv> get_ToolBars();
    internal void set_ToolBars(ObservableCollection`1<ToolBarAdv> value);
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    private static void OnOrientationChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args);
    internal void UpdateVisualState();
    public virtual void OnApplyTemplate();
    internal void ArrangeCall(Rect rect);
    protected virtual Size ArrangeOverride(Size finalSize);
    internal void MeasureCall(bool inValidate, Size availableSize);
    protected virtual Size MeasureOverride(Size availableSize);
    private Size MeasureSize(Size availableSize);
    internal DockArea FindDockArea(Point point);
    internal void DockToolBar(ToolBarAdv toolBarAdv, DockArea area);
    internal void Remove(ToolBarAdv toolBar);
    private void SubscribeEvents();
    private void ToolBarsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void CorrectBandNos();
    private void InsertToPanel(ToolBarAdv bar);
    private void InsertBars();
    internal ToolBarBand GetPreviousBand(ToolBarBand band);
    internal ToolBarBand GetNextBand(ToolBarBand band);
    private void InsertBand(int bandNo, ToolBarAdv bar);
    internal ToolBarBand GetBandFromPoint(Point point);
    internal ToolBarBand TryCreateNewBand(Point point);
    internal ToolBarBand GetLastBand();
    internal ToolBarBand GetFirstBand();
    internal void MoveBarToBand(ToolBarAdv bar, ToolBarBand band, double xPos);
    internal void InvalidateLayout();
    private ToolBarBand GetToolBarBand(int bandNo);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Tools.Controls.TrayPanel : Panel {
}
public class Syncfusion.Windows.Tools.Controls.VisibilityToThicknessConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Tools.CultureToCalendarConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Double", "System.Int32")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Tools.DoubleToIntConverter : object {
    private static double Duration;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Windows.Point", "System.Double")]
public class Syncfusion.Windows.Tools.DoubleToPointConverter : object {
    private Point startPoint;
    private Point endPoint;
    private Point centre;
    private Point grad;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Windows.Point", "System.Double")]
public class Syncfusion.Windows.Tools.DoubleToPointConverterY : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Double", "System.String")]
public class Syncfusion.Windows.Tools.DoublToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Tools.GradientBrushDisplayMode : Enum {
    public int value__;
    public static GradientBrushDisplayMode Default;
    public static GradientBrushDisplayMode Extended;
}
public class Syncfusion.Windows.Tools.GradientBrushToVisibilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum Syncfusion.Windows.Tools.GradientPropertyEditorMode : Enum {
    public int value__;
    public static GradientPropertyEditorMode Popup;
    public static GradientPropertyEditorMode Extended;
}
internal enum Syncfusion.Windows.Tools.KnownColor : Enum {
    public UInt32 value__;
    public static KnownColor AliceBlue;
    public static KnownColor AntiqueWhite;
    public static KnownColor Aqua;
    public static KnownColor Aquamarine;
    public static KnownColor Azure;
    public static KnownColor Beige;
    public static KnownColor Bisque;
    public static KnownColor Black;
    public static KnownColor BlanchedAlmond;
    public static KnownColor Blue;
    public static KnownColor BlueViolet;
    public static KnownColor Brown;
    public static KnownColor BurlyWood;
    public static KnownColor CadetBlue;
    public static KnownColor Chartreuse;
    public static KnownColor Chocolate;
    public static KnownColor Coral;
    public static KnownColor CornflowerBlue;
    public static KnownColor Cornsilk;
    public static KnownColor Crimson;
    public static KnownColor Cyan;
    public static KnownColor DarkBlue;
    public static KnownColor DarkCyan;
    public static KnownColor DarkGoldenrod;
    public static KnownColor DarkGray;
    public static KnownColor DarkGreen;
    public static KnownColor DarkKhaki;
    public static KnownColor DarkMagenta;
    public static KnownColor DarkOliveGreen;
    public static KnownColor DarkOrange;
    public static KnownColor DarkOrchid;
    public static KnownColor DarkRed;
    public static KnownColor DarkSalmon;
    public static KnownColor DarkSeaGreen;
    public static KnownColor DarkSlateBlue;
    public static KnownColor DarkSlateGray;
    public static KnownColor DarkTurquoise;
    public static KnownColor DarkViolet;
    public static KnownColor DeepPink;
    public static KnownColor DeepSkyBlue;
    public static KnownColor DimGray;
    public static KnownColor DodgerBlue;
    public static KnownColor Firebrick;
    public static KnownColor FloralWhite;
    public static KnownColor ForestGreen;
    public static KnownColor Fuchsia;
    public static KnownColor Gainsboro;
    public static KnownColor GhostWhite;
    public static KnownColor Gold;
    public static KnownColor Goldenrod;
    public static KnownColor Gray;
    public static KnownColor Green;
    public static KnownColor GreenYellow;
    public static KnownColor Honeydew;
    public static KnownColor HotPink;
    public static KnownColor IndianRed;
    public static KnownColor Indigo;
    public static KnownColor Ivory;
    public static KnownColor Khaki;
    public static KnownColor Lavender;
    public static KnownColor LavenderBlush;
    public static KnownColor LawnGreen;
    public static KnownColor LemonChiffon;
    public static KnownColor LightBlue;
    public static KnownColor LightCoral;
    public static KnownColor LightCyan;
    public static KnownColor LightGoldenrodYellow;
    public static KnownColor LightGray;
    public static KnownColor LightGreen;
    public static KnownColor LightPink;
    public static KnownColor LightSalmon;
    public static KnownColor LightSeaGreen;
    public static KnownColor LightSkyBlue;
    public static KnownColor LightSlateGray;
    public static KnownColor LightSteelBlue;
    public static KnownColor LightYellow;
    public static KnownColor Lime;
    public static KnownColor LimeGreen;
    public static KnownColor Linen;
    public static KnownColor Magenta;
    public static KnownColor Maroon;
    public static KnownColor MediumAquamarine;
    public static KnownColor MediumBlue;
    public static KnownColor MediumOrchid;
    public static KnownColor MediumPurple;
    public static KnownColor MediumSeaGreen;
    public static KnownColor MediumSlateBlue;
    public static KnownColor MediumSpringGreen;
    public static KnownColor MediumTurquoise;
    public static KnownColor MediumVioletRed;
    public static KnownColor MidnightBlue;
    public static KnownColor MintCream;
    public static KnownColor MistyRose;
    public static KnownColor Moccasin;
    public static KnownColor NavajoWhite;
    public static KnownColor Navy;
    public static KnownColor OldLace;
    public static KnownColor Olive;
    public static KnownColor OliveDrab;
    public static KnownColor Orange;
    public static KnownColor OrangeRed;
    public static KnownColor Orchid;
    public static KnownColor PaleGoldenrod;
    public static KnownColor PaleGreen;
    public static KnownColor PaleTurquoise;
    public static KnownColor PaleVioletRed;
    public static KnownColor PapayaWhip;
    public static KnownColor PeachPuff;
    public static KnownColor Peru;
    public static KnownColor Pink;
    public static KnownColor Plum;
    public static KnownColor PowderBlue;
    public static KnownColor Purple;
    public static KnownColor Red;
    public static KnownColor RosyBrown;
    public static KnownColor RoyalBlue;
    public static KnownColor SaddleBrown;
    public static KnownColor Salmon;
    public static KnownColor SandyBrown;
    public static KnownColor SeaGreen;
    public static KnownColor SeaShell;
    public static KnownColor Sienna;
    public static KnownColor Silver;
    public static KnownColor SkyBlue;
    public static KnownColor SlateBlue;
    public static KnownColor SlateGray;
    public static KnownColor Snow;
    public static KnownColor SpringGreen;
    public static KnownColor SteelBlue;
    public static KnownColor Tan;
    public static KnownColor Teal;
    public static KnownColor Thistle;
    public static KnownColor Tomato;
    public static KnownColor Transparent;
    public static KnownColor Turquoise;
    public static KnownColor UnknownColor;
    public static KnownColor Violet;
    public static KnownColor Wheat;
    public static KnownColor White;
    public static KnownColor WhiteSmoke;
    public static KnownColor Yellow;
    public static KnownColor YellowGreen;
}
public class Syncfusion.Windows.Tools.RangedFloatToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class Syncfusion.Windows.Tools.RGBToStringConverter : object {
    private Color color;
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
[DesignTimeVisibleAttribute("False")]
[ValueConversionAttribute("System.String", "System.Double")]
public class Syncfusion.Windows.Tools.StringToAngleConverter : object {
    private static string Up;
    private static string Down;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.String", "System.Windows.Thickness")]
[DesignTimeVisibleAttribute("False")]
public class Syncfusion.Windows.Tools.StringToThiknessConverter : object {
    private static string Up;
    private static string Down;
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Double", "System.Single")]
public class Syncfusion.Windows.Tools.ValueToStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ContentPropertyAttribute("Storyboard")]
[RuntimeNamePropertyAttribute("Name")]
public class Syncfusion.Windows.VisualState : DependencyObject {
    private static DependencyProperty StoryboardProperty;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public Storyboard Storyboard { get; public set; }
    private static VisualState();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Storyboard get_Storyboard();
    public void set_Storyboard(Storyboard value);
}
public class Syncfusion.Windows.VisualStateChangedEventArgs : EventArgs {
    private VisualState _oldState;
    private VisualState _newState;
    private Control _control;
    public VisualState OldState { get; }
    public VisualState NewState { get; }
    public Control Control { get; }
    internal VisualStateChangedEventArgs(VisualState oldState, VisualState newState, Control control);
    public VisualState get_OldState();
    public VisualState get_NewState();
    public Control get_Control();
}
[RuntimeNamePropertyAttribute("Name")]
[ContentPropertyAttribute("States")]
public class Syncfusion.Windows.VisualStateGroup : DependencyObject {
    private EventHandler`1<VisualStateChangedEventArgs> CurrentStateChanged;
    private EventHandler`1<VisualStateChangedEventArgs> CurrentStateChanging;
    private Collection`1<Storyboard> _currentStoryboards;
    private FreezableCollection`1<VisualState> _states;
    private FreezableCollection`1<VisualTransition> _transitions;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualState <CurrentState>k__BackingField;
    public string Name { get; public set; }
    public IList States { get; }
    public IList Transitions { get; }
    internal VisualState CurrentState { get; internal set; }
    internal Collection`1<Storyboard> CurrentStoryboards { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public IList get_States();
    public IList get_Transitions();
    [CompilerGeneratedAttribute]
internal VisualState get_CurrentState();
    [CompilerGeneratedAttribute]
internal void set_CurrentState(VisualState value);
    internal VisualState GetState(string stateName);
    internal Collection`1<Storyboard> get_CurrentStoryboards();
    internal void StartNewThenStopOld(FrameworkElement element, Storyboard[] newStoryboards);
    internal void RaiseCurrentStateChanging(FrameworkElement element, VisualState oldState, VisualState newState, Control control);
    internal void RaiseCurrentStateChanged(FrameworkElement element, VisualState oldState, VisualState newState, Control control);
    public void add_CurrentStateChanged(EventHandler`1<VisualStateChangedEventArgs> value);
    public void remove_CurrentStateChanged(EventHandler`1<VisualStateChangedEventArgs> value);
    public void add_CurrentStateChanging(EventHandler`1<VisualStateChangedEventArgs> value);
    public void remove_CurrentStateChanging(EventHandler`1<VisualStateChangedEventArgs> value);
}
public class Syncfusion.Windows.VisualStateManager : DependencyObject {
    public static DependencyProperty CustomVisualStateManagerProperty;
    internal static DependencyProperty VisualStateGroupsProperty;
    private static Duration DurationZero;
    private static VisualStateManager();
    public static bool GoToState(Control control, string stateName, bool useTransitions);
    protected virtual bool GoToStateCore(Control control, FrameworkElement templateRoot, string stateName, VisualStateGroup group, VisualState state, bool useTransitions);
    public static VisualStateManager GetCustomVisualStateManager(FrameworkElement obj);
    public static void SetCustomVisualStateManager(FrameworkElement obj, VisualStateManager value);
    internal static Collection`1<VisualStateGroup> GetVisualStateGroupsInternal(FrameworkElement obj);
    public static IList GetVisualStateGroups(FrameworkElement obj);
    internal static void SetVisualStateGroups(FrameworkElement obj, Collection`1<VisualStateGroup> value);
    private static void OnVisualStateGroupsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    internal static bool TryGetState(IList`1<VisualStateGroup> groups, string stateName, VisualStateGroup& group, VisualState& state);
    private static bool GoToStateInternal(Control control, FrameworkElement element, VisualStateGroup group, VisualState state, bool useTransitions);
    private static bool ShouldRunStateStoryboard(FrameworkElement control, FrameworkElement stateGroupsRoot, VisualState state, VisualStateGroup group);
    protected void RaiseCurrentStateChanging(VisualStateGroup stateGroup, VisualState oldState, VisualState newState, Control control);
    protected void RaiseCurrentStateChanged(VisualStateGroup stateGroup, VisualState oldState, VisualState newState, Control control);
    private static Storyboard GenerateDynamicTransitionAnimations(FrameworkElement root, VisualStateGroup group, VisualState newState, VisualTransition transition);
    private static Timeline GenerateFromAnimation(FrameworkElement root, Timeline timeline);
    private static Timeline GenerateToAnimation(FrameworkElement root, Timeline timeline, bool isEntering);
    private static void CopyStoryboardTargetProperties(FrameworkElement root, Timeline source, Timeline destination);
    internal static VisualTransition GetTransition(FrameworkElement element, VisualStateGroup group, VisualState from, VisualState to);
    private static Nullable`1<Color> GetTargetColor(Timeline timeline, bool isEntering);
    private static Nullable`1<double> GetTargetDouble(Timeline timeline, bool isEntering);
    private static Nullable`1<Point> GetTargetPoint(Timeline timeline, bool isEntering);
    private static Dictionary`2<TimelineDataToken, Timeline> FlattenTimelines(Storyboard storyboard);
    private static Dictionary`2<TimelineDataToken, Timeline> FlattenTimelines(Collection`1<Storyboard> storyboards);
    private static void FlattenTimelines(Storyboard storyboard, Dictionary`2<TimelineDataToken, Timeline> result);
    private static FrameworkElement GetTemplateRoot(Control control);
    private static Control GetTemplatedParent(FrameworkElement element);
}
[ContentPropertyAttribute("Storyboard")]
public class Syncfusion.Windows.VisualTransition : DependencyObject {
    private Duration _generatedDuration;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private Storyboard <Storyboard>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DynamicStoryboardCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExplicitStoryboardCompleted>k__BackingField;
    public string From { get; public set; }
    public string To { get; public set; }
    public Storyboard Storyboard { get; public set; }
    [TypeConverterAttribute("System.Windows.DurationConverter")]
public Duration GeneratedDuration { get; public set; }
    internal bool IsDefault { get; }
    internal bool DynamicStoryboardCompleted { get; internal set; }
    internal bool ExplicitStoryboardCompleted { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    [CompilerGeneratedAttribute]
public Storyboard get_Storyboard();
    [CompilerGeneratedAttribute]
public void set_Storyboard(Storyboard value);
    public Duration get_GeneratedDuration();
    public void set_GeneratedDuration(Duration value);
    internal bool get_IsDefault();
    [CompilerGeneratedAttribute]
internal bool get_DynamicStoryboardCompleted();
    [CompilerGeneratedAttribute]
internal void set_DynamicStoryboardCompleted(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ExplicitStoryboardCompleted();
    [CompilerGeneratedAttribute]
internal void set_ExplicitStoryboardCompleted(bool value);
}
public class Syncfusion.Windows.WindowChrome : Freezable {
    private MarginChangedHandler MarginChanged;
    public static DependencyProperty WindowChromeProperty;
    public static DependencyProperty IsHitTestVisibleInChromeProperty;
    public static DependencyProperty CaptionHeightProperty;
    public static DependencyProperty ResizeBorderThicknessProperty;
    public static DependencyProperty GlassFrameThicknessProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty NonClientFrameEdgesProperty;
    public static DependencyProperty UseAeroCaptionButtonsProperty;
    public static DependencyProperty ResizeGripDirectionProperty;
    private static List`1<_SystemParameterBoundProperty> _BoundProperties;
    private static NonClientFrameEdges NonClientFrameEdges_All;
    private EventHandler PropertyChangedThatRequiresRepaint;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegatee;
    [CompilerGeneratedAttribute]
private static ValidateValueCallback CS$<>9__CachedAnonymousMethodDelegatef;
    [CompilerGeneratedAttribute]
private static ValidateValueCallback CS$<>9__CachedAnonymousMethodDelegate10;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate11;
    [CompilerGeneratedAttribute]
private static CoerceValueCallback CS$<>9__CachedAnonymousMethodDelegate12;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate13;
    [CompilerGeneratedAttribute]
private static ValidateValueCallback CS$<>9__CachedAnonymousMethodDelegate14;
    [CompilerGeneratedAttribute]
private static PropertyChangedCallback CS$<>9__CachedAnonymousMethodDelegate15;
    public static Thickness GlassFrameCompleteThickness { get; }
    public double CaptionHeight { get; public set; }
    public Thickness ResizeBorderThickness { get; public set; }
    public Thickness GlassFrameThickness { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    public NonClientFrameEdges NonClientFrameEdges { get; public set; }
    public bool UseAeroCaptionButtons { get; public set; }
    private static WindowChrome();
    public void add_MarginChanged(MarginChangedHandler value);
    public void remove_MarginChanged(MarginChangedHandler value);
    public void OnMarginChanged(WindowChrome wChrome, MarginChangedEventArgs args);
    public static Thickness get_GlassFrameCompleteThickness();
    private static void _OnChromeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public static WindowChrome GetWindowChrome(Window window);
    public static void SetWindowChrome(Window window, WindowChrome chrome);
    public static bool GetIsHitTestVisibleInChrome(IInputElement inputElement);
    public static void SetIsHitTestVisibleInChrome(IInputElement inputElement, bool hitTestVisible);
    public double get_CaptionHeight();
    public void set_CaptionHeight(double value);
    public Thickness get_ResizeBorderThickness();
    public void set_ResizeBorderThickness(Thickness value);
    private static object _CoerceGlassFrameThickness(Thickness thickness);
    public Thickness get_GlassFrameThickness();
    public void set_GlassFrameThickness(Thickness value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    public NonClientFrameEdges get_NonClientFrameEdges();
    public void set_NonClientFrameEdges(NonClientFrameEdges value);
    public bool get_UseAeroCaptionButtons();
    public void set_UseAeroCaptionButtons(bool value);
    public static void SetResizeGripDirection(IInputElement inputElement, ResizeGripDirection direction);
    public static ResizeGripDirection GetResizeGripDirection(IInputElement inputElement);
    protected virtual Freezable CreateInstanceCore();
    private static bool _NonClientFrameEdgesAreValid(object value);
    private void _OnPropertyChangedThatRequiresRepaint();
    internal void add_PropertyChangedThatRequiresRepaint(EventHandler value);
    internal void remove_PropertyChangedThatRequiresRepaint(EventHandler value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__6(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__7(object value);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__8(object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__9(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static object <.cctor>b__a(DependencyObject d, object o);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__b(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private static bool <.cctor>b__c(object value);
    [CompilerGeneratedAttribute]
private static void <.cctor>b__d(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
internal class Syncfusion.Windows.WindowChromeWorker : DependencyObject {
    private static SWP _SwpFlags;
    private List`1<KeyValuePair`2<WM, MessageHandler>> _messageTable;
    private Window _window;
    private IntPtr _hwnd;
    private HwndSource _hwndSource;
    private bool _isHooked;
    private bool _isFixedUp;
    private bool _isUserResizing;
    private bool _hasUserMovedWindow;
    private Point _windowPosAtStartOfUserMove;
    private int _blackGlassFixupAttemptCount;
    private WindowChrome _chromeInfo;
    private WindowState _lastRoundingState;
    private WindowState _lastMenuState;
    private bool _isGlassEnabled;
    public static DependencyProperty WindowChromeWorkerProperty;
    private static HT[0...,0...] _HitTestBorders;
    private bool _IsWindowDocked { get; }
    private static WindowChromeWorker();
    public void SetWindowChrome(WindowChrome newChrome);
    private void _OnChromePropertyChangedThatRequiresRepaint(object sender, EventArgs e);
    private static void _OnChromeWorkerChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void _SetWindow(Window window);
    private void _UnsetWindow(object sender, EventArgs e);
    public static WindowChromeWorker GetWindowChromeWorker(Window window);
    public static void SetWindowChromeWorker(Window window, WindowChromeWorker chrome);
    private void _OnWindowPropertyChangedThatRequiresTemplateFixup(object sender, EventArgs e);
    private void _ApplyNewCustomChrome();
    private void _FixupTemplateIssues();
    private void _FixupWindows7Issues();
    private void _FixupRestoreBounds(object sender, EventArgs e);
    private RECT _GetAdjustedWindowRect(RECT rcWindow);
    private HT _GetHTFromResizeGripDirection(ResizeGripDirection direction);
    private bool get__IsWindowDocked();
    private IntPtr _WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleSetTextOrIcon(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCActivate(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCCalcSize(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCHitTest(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleNCRButtonUp(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleSize(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleWindowPosChanged(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleDwmCompositionChanged(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleSettingChange(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleEnterSizeMove(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleExitSizeMove(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private IntPtr _HandleMove(WM uMsg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private bool _ModifyStyle(WS removeStyle, WS addStyle);
    private WindowState _GetHwndState();
    private Rect _GetWindowRect();
    private void _UpdateSystemMenu(Nullable`1<WindowState> assumeState);
    private void _UpdateFrameState(bool force);
    private void _ClearRoundingRegion();
    private void _SetRoundingRegion(Nullable`1<WINDOWPOS> wp);
    private static IntPtr _CreateRoundRectRgn(Rect region, double radius);
    private static void _CreateAndCombineRoundRectRgn(IntPtr hrgnSource, Rect region, double radius);
    private static bool _IsUniform(CornerRadius cornerRadius);
    private void _ExtendGlassFrame();
    private HT _HitTestNca(Rect windowPosition, Point mousePosition);
    private void _RestoreStandardChromeState(bool isClosing);
    private void _UnhookCustomChrome();
    private void _RestoreFrameworkIssueFixups();
    private void _RestoreGlassFrame();
    private void _RestoreHrgn();
    [CompilerGeneratedAttribute]
private void <_SetWindow>b__1(object sender, EventArgs e);
}
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public class XamlGeneratedNamespace.GeneratedInternalTypeHelper : InternalTypeHelper {
    protected virtual object CreateInstance(Type type, CultureInfo culture);
    protected virtual object GetPropertyValue(PropertyInfo propertyInfo, object target, CultureInfo culture);
    protected virtual void SetPropertyValue(PropertyInfo propertyInfo, object target, object value, CultureInfo culture);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string handler);
    protected virtual void AddEventHandler(EventInfo eventInfo, object target, Delegate handler);
}
