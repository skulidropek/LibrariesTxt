public class Syncfusion.XForms.Android.Border.SfBorderRenderer : ViewRenderer {
    private float topLeftRadius;
    private float topRightRadius;
    private float bottomLeftRadius;
    private float bottomRightRadius;
    private Color backgroundColor;
    private Color borderColor;
    private float borderWidth;
    private Path roundRectPath;
    private Paint borderPaint;
    private Paint shadowPaint;
    private bool allowShadow;
    private float shadowBottomHeight;
    private float shadowRightWidth;
    private float shadowTopHeight;
    private float shadowLeftWidth;
    private Color shadowColor;
    private Single[] lineDashArray;
    private float density;
    private Thickness thickness;
    private bool isBorderThicknessUpdated;
    private Path thicknessRectPath;
    public SfBorderRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnDraw(Canvas canvas);
    protected virtual bool DrawChild(Canvas canvas, View child, long drawingTime);
    private void UpdateRoundedRect(bool isBorderRect);
    protected virtual void Dispose(bool disposing);
    private void UpdateProperties(bool isCornerRadiusUpdated, bool isBackgroundColorUpdated, bool isBorderColorUpdated, bool isBorderWidthUpdated, bool isShadowUpdated, bool isDashArrayUpdated, bool isShadowColorUpdated);
    private void DrawBorder(Canvas canvas);
    private void DrawBorderLine(Canvas canvas, float strokeWidth, float x1, float y1, float x2, float y2);
    private void DrawBorderCurve(Canvas canvas, float strokeWidth, float x1, float y1, float x2, float y2, float x3, float y3);
    private bool IsEqualBorderThickness();
    private Single[] ConvertToNativeDashArray(Double[] formsDashArray);
}
public static class Syncfusion.XForms.Android.Core.Core : object {
    public static void Init(FormsAppCompatActivity activity);
    private static void Activity_ConfigurationChanged(object sender, EventArgs e);
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.Android.Core.FlaggedEnumExt : object {
    [IteratorStateMachineAttribute("Syncfusion.XForms.Android.Core.FlaggedEnumExt/<GetAllItems>d__0")]
[ExtensionAttribute]
internal static IEnumerable`1<Enum> GetAllItems(Enum targetEnum);
    [ExtensionAttribute]
internal static bool IsEmpty(SfEffects source);
    [ExtensionAttribute]
internal static SfEffects Add(SfEffects target, SfEffects newItem);
    [ExtensionAttribute]
internal static SfEffects ComplementsOf(SfEffects target, SfEffects source);
    [ExtensionAttribute]
internal static SfEffects ComplementsOf(SfEffects target, SfEffects source1, SfEffects source2);
}
internal class Syncfusion.XForms.Android.Core.MeasureTextSize : object {
    public sealed virtual double MeasureTextWidth(string text, string fontFamily, double size);
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.Android.Core.NativeHelper : object {
    [ExtensionAttribute]
internal static Color ToNativeColor(Color color);
    [ExtensionAttribute]
internal static void RefreshView(View view);
    [ExtensionAttribute]
internal static EditText GetNativeEditText(ViewGroup viewGroup);
    [ExtensionAttribute]
internal static TypefaceStyle ConvertToNativeStyle(FontAttributes fontAttributes, float fontSize);
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "1.0.0.0")]
public class Syncfusion.XForms.Android.Core.Resource : object {
    private static Resource();
}
internal class Syncfusion.XForms.Android.Core.SfThickness : ValueType {
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    internal double Left { get; internal set; }
    internal double Top { get; internal set; }
    internal double Right { get; internal set; }
    internal double Bottom { get; internal set; }
    internal double HorizontalThickness { get; }
    internal double VerticalThickness { get; }
    internal bool IsEmpty { get; }
    internal bool IsUniformSize { get; }
    internal SfThickness(double uniformThickness);
    internal SfThickness(double horizontalSize, double verticalSize);
    internal SfThickness(double left, double top, double right, double bottom);
    internal SfThickness(Thickness thickness, float density);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal double get_Left();
    [CompilerGeneratedAttribute]
internal void set_Left(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal double get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal double get_Right();
    [CompilerGeneratedAttribute]
internal void set_Right(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal double get_Bottom();
    [CompilerGeneratedAttribute]
internal void set_Bottom(double value);
    internal double get_HorizontalThickness();
    internal double get_VerticalThickness();
    internal bool get_IsEmpty();
    internal bool get_IsUniformSize();
    public static SfThickness op_Implicit(double uniformThickness);
    internal bool Equals(object thickness);
    private bool Equals(SfThickness thickness);
}
internal static class Syncfusion.XForms.Android.Core.Utils : object {
    private static string FontFileRegex;
    internal static View GetNativeView(DataTemplate template, VisualElement parent, object bindingContext, Context androidContext, double x, double y, double width, double height);
    internal static View GetNativeView(DataTemplate template, VisualElement parent, object bindingContext, Context androidContext, bool canMeasureAndLayout);
    internal static View GetNativeView(View formsView, VisualElement parent, object bindingContext, Context androidContext, double x, double y, double width, double height);
    internal static View GetNativeView(View formsView, VisualElement parent, object bindingContext, Context androidContext, bool canMeasureAndLayout);
    internal static Typeface GetNativeFont(string fontFamily, FontAttributes fontAttributes);
    private static Typeface FontAsset(string fontFamily);
    private static TypefaceStyle ToTypefaceStyle(FontAttributes attributes);
}
internal class Syncfusion.XForms.Android.DeviceOrientation : object {
    public sealed virtual bool GetOrientation();
}
public enum Syncfusion.XForms.Android.EffectsView.AutoResetEffects : Enum {
    public int value__;
    public static AutoResetEffects None;
    public static AutoResetEffects Highlight;
    public static AutoResetEffects Ripple;
    public static AutoResetEffects Scale;
}
internal class Syncfusion.XForms.Android.EffectsView.EffectsViewDependencyService : object {
    public sealed virtual void ApplyEffects(SfEffects effects, RippleStartPosition rippleStartPosition, Nullable`1<Point> rippleStartPoint, bool repeat, object nativeObject);
    public sealed virtual void Reset(object nativeObject);
}
internal class Syncfusion.XForms.Android.EffectsView.GestureListener : SimpleOnGestureListener {
    private SfEffectsViewRenderer effectsView;
    public GestureListener(SfEffectsViewRenderer effectsView);
    public virtual bool OnDown(MotionEvent e);
    public virtual void OnLongPress(MotionEvent e);
    public virtual bool OnDoubleTap(MotionEvent e);
    public virtual bool OnDoubleTapEvent(MotionEvent e);
    public virtual bool OnSingleTapUp(MotionEvent e);
}
[FlagsAttribute]
public enum Syncfusion.XForms.Android.EffectsView.RippleStartPosition : Enum {
    public int value__;
    public static RippleStartPosition Left;
    public static RippleStartPosition Top;
    public static RippleStartPosition Right;
    public static RippleStartPosition Bottom;
    public static RippleStartPosition Default;
}
[FlagsAttribute]
public enum Syncfusion.XForms.Android.EffectsView.SfEffects : Enum {
    public int value__;
    public static SfEffects None;
    public static SfEffects Highlight;
    public static SfEffects Ripple;
    public static SfEffects Scale;
    public static SfEffects Selection;
    public static SfEffects Rotation;
}
public class Syncfusion.XForms.Android.EffectsView.SfEffectsViewRenderer : ViewRenderer {
    private float rippleTransparencyFactor;
    private float highlightTransparencyFactor;
    private float selectionTransparencyFactor;
    private static float minAnimationDuration;
    private Rect highlightRect;
    private Rect selectionRect;
    private GestureListener gestureListener;
    private GestureDetector gestureDetector;
    private long selectionAnimationDuration;
    private SfThickness cornerRadius;
    private float rippleAnimationDuration;
    private float scaleAnimationDuration;
    private float rotationAnimationDuration;
    private float initialRippleFactor;
    private Color rippleColor;
    private Color highlightColor;
    private float scaleFactor;
    private float angle;
    private Color selectionColor;
    private AutoResetEffects autoResetEffect;
    private SfEffects touchDownEffects;
    private SfEffects longPressEffects;
    private SfEffects touchUpEffects;
    private ValueAnimator rippleRadiusAnimator;
    private ValueAnimator highlightAnimator;
    private ValueAnimator fadeOutHighlightAnimator;
    private ValueAnimator selectionAnimator;
    private ValueAnimator fadeInRippleAnimator;
    private ValueAnimator fadeOutRippleAnimator;
    private ObjectAnimator scaleAnimator;
    private ObjectAnimator removeScaleAnimator;
    private ObjectAnimator rotationAnimator;
    private AnimatorSet rippleAnimatorSet;
    private bool isSelected;
    private bool fadeOutRipple;
    private bool shouldIgnoreTouches;
    private bool shouldApplyEffectsBehindContent;
    private float pivotX;
    private float pivotY;
    private float currentRippleRadius;
    private float finalRippleRadius;
    private Paint paint;
    private Paint roundedRectPaint;
    private Path roundRectPath;
    private Color transparentRippleColor;
    private Color transparentHighlightColor;
    private Color transparentSelectionColor;
    private bool canRepeatEffects;
    private bool removeHighlightAndRippleOnCompletion;
    private bool longPressHandled;
    private bool doubleTapHandled;
    private bool touchUpHandled;
    private int actualRippleColorAlpha;
    private float touchDownX;
    private float touchDownY;
    private float scaleX;
    private float scaleY;
    private bool isSizeChanged;
    private bool isEffectsInvokedProgrammatically;
    [CompilerGeneratedAttribute]
private EventHandler AnimationCompleted;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    internal SfThickness CornerRadius { get; internal set; }
    internal float RippleColorOpacity { get; internal set; }
    internal float SelectionColorOpacity { get; internal set; }
    internal float HighlightColorOpacity { get; internal set; }
    internal float RippleAnimationDuration { get; internal set; }
    internal float ScaleAnimationDuration { get; internal set; }
    internal float RotationAnimationDuration { get; internal set; }
    internal float InitialRippleFactor { get; internal set; }
    internal Color RippleColor { get; internal set; }
    internal Color HighlightColor { get; internal set; }
    internal float ScaleFactor { get; internal set; }
    internal float Angle { get; internal set; }
    internal Color SelectionColor { get; internal set; }
    internal AutoResetEffects AutoResetEffect { get; internal set; }
    internal SfEffects TouchDownEffects { get; internal set; }
    internal SfEffects LongPressEffects { get; internal set; }
    internal SfEffects TouchUpEffects { get; internal set; }
    internal bool FadeOutRipple { get; internal set; }
    internal bool ShouldApplyEffectsBehindContent { get; internal set; }
    internal bool ShouldIgnoreTouches { get; internal set; }
    internal bool IsSelected { get; internal set; }
    private float RippleFadeInOutAnimationDuration { get; }
    private float HighlightAnimationDuration { get; }
    public SfEffectsViewRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateProperties(bool isCornerRadiusUpdated, bool isHighlightColorChanged, bool isInitialRippleFactorUpdated, bool isLongPressEffectUpdated, bool isRippleAnimationDurationUpdated, bool canApplyEffectsBehindContent, bool isRippleColorChanged, bool isTouchDownEffectUpdate, bool isTouchUpEffectUpdated, bool isSelectionColorChanged, bool isScaleFactorUpdated, bool isAngleUpdated, bool canIgnoreTouches, bool isSelectionChanged, bool isBackgroundColorChanged, bool isScaleAnimationDurationUpdated, bool isRotationAnimationDurationUpdated, bool canFadeOutRipple, bool isHoverEffectsUpdated, bool isAutoResetEffectUpdate, bool isRippleColorOpacityUpdated, bool isSelectionColorOpacityUpdated, bool isHighlightColorOpacityUpdated);
    private SfEffects ConvertToNative(SfEffects formsEffects);
    private AutoResetEffects ConvertToNativeAutoResetEffect(AutoResetEffects effect);
    [CompilerGeneratedAttribute]
internal void add_AnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_AnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_SelectionChanged(EventHandler value);
    internal SfThickness get_CornerRadius();
    internal void set_CornerRadius(SfThickness value);
    internal float get_RippleColorOpacity();
    internal void set_RippleColorOpacity(float value);
    internal float get_SelectionColorOpacity();
    internal void set_SelectionColorOpacity(float value);
    internal float get_HighlightColorOpacity();
    internal void set_HighlightColorOpacity(float value);
    internal float get_RippleAnimationDuration();
    internal void set_RippleAnimationDuration(float value);
    internal float get_ScaleAnimationDuration();
    internal void set_ScaleAnimationDuration(float value);
    internal float get_RotationAnimationDuration();
    internal void set_RotationAnimationDuration(float value);
    internal float get_InitialRippleFactor();
    internal void set_InitialRippleFactor(float value);
    internal Color get_RippleColor();
    internal void set_RippleColor(Color value);
    internal Color get_HighlightColor();
    internal void set_HighlightColor(Color value);
    internal float get_ScaleFactor();
    internal void set_ScaleFactor(float value);
    internal float get_Angle();
    internal void set_Angle(float value);
    internal Color get_SelectionColor();
    internal void set_SelectionColor(Color value);
    internal AutoResetEffects get_AutoResetEffect();
    internal void set_AutoResetEffect(AutoResetEffects value);
    internal SfEffects get_TouchDownEffects();
    internal void set_TouchDownEffects(SfEffects value);
    internal SfEffects get_LongPressEffects();
    internal void set_LongPressEffects(SfEffects value);
    internal SfEffects get_TouchUpEffects();
    internal void set_TouchUpEffects(SfEffects value);
    internal bool get_FadeOutRipple();
    internal void set_FadeOutRipple(bool value);
    internal bool get_ShouldApplyEffectsBehindContent();
    internal void set_ShouldApplyEffectsBehindContent(bool value);
    internal bool get_ShouldIgnoreTouches();
    internal void set_ShouldIgnoreTouches(bool value);
    internal bool get_IsSelected();
    internal void set_IsSelected(bool value);
    private float get_RippleFadeInOutAnimationDuration();
    private float get_HighlightAnimationDuration();
    public virtual bool OnTouchEvent(MotionEvent e);
    internal void Reset();
    internal void ApplyEffects(SfEffects effects, RippleStartPosition rippleStartPosition, Nullable`1<Point> rippleStartPoint, bool repeat);
    internal void InvokeAnimationCompletedEvent();
    internal void InvokeSelectionChangedEvent();
    internal void OnTouchDown(float x, float y);
    internal void OnLongPressed(float x, float y);
    internal void OnDoubleTap();
    internal void OnTouchUp(float x, float y);
    protected virtual void DispatchDraw(Canvas canvas);
    protected virtual bool DrawChild(Canvas canvas, View child, long drawingTime);
    protected virtual void OnSizeChanged(int w, int h, int oldw, int oldh);
    protected virtual void Dispose(bool disposing);
    private void AddEffects(float x, float y, SfEffects effects);
    private void AddOrRemoveAutoResetEffect(float x, float y, AutoResetEffects effect, bool isTouchUpEnabled);
    private void DrawHighlightShape(Canvas canvas);
    private void DrawRippleShape(Canvas canvas);
    private void DrawSelectionShape(Canvas canvas);
    private void DrawRoundedCorners(Canvas canvas);
    private void ClipEfffectsView(Canvas canvas);
    private void ResetFlags();
    private Color GetTransparentColor(Color color, float transparencyFactor);
    private void AddHighlightEffect();
    private void OnHighlightAnimationUpdate(object sender, AnimatorUpdateEventArgs e);
    private void OnHighlightAnimationEnd(object sender, EventArgs e);
    private void RemoveHighlightEffect();
    private void OnFadeOutHighlightAnimationUpdate(object sender, AnimatorUpdateEventArgs e);
    private void OnFadeOutHighlightAnimationEnd(object sender, EventArgs e);
    private float GetRippleRadiusFromFactor();
    private float GetFinalRadius();
    private void AddRippleEffect();
    private void OnFadeInRippleAnimationUpdate(object sender, AnimatorUpdateEventArgs e);
    private void OnFadeInRippleAnimationEnd(object sender, EventArgs e);
    private void OnRippleRadiusAnimationUpdate(object sender, AnimatorUpdateEventArgs e);
    private void RemoveFadeInAndRippleRadiusAnimators();
    private void OnRippleRadiusAnimationEnd(object sender, EventArgs e);
    private void RemoveRippleEffect(double duration);
    private void OnFadeOutRippleAnimationUpdate(object sender, AnimatorUpdateEventArgs e);
    private void OnFadeOutRippleAnimationEnd(object sender, EventArgs e);
    private void UpdateScaleXYValues(float factor);
    private void UpdateScale(float duration, bool isTouchUpEnabled, bool forceRemove);
    private void OnScaleAnimatorEnd(object sender, EventArgs e);
    private void OnRemovingScaleAnimatorEnd(object sender, EventArgs e);
    private void UpdateSelectionEffect();
    private void OnSelectionAnimationUpdate(object sender, AnimatorUpdateEventArgs e);
    private void OnSelectionAnimationEnd(object sender, EventArgs e);
    private void RemoveSelectionEffect();
    private void OnFadeOutSelectionColorAnimationEnd(object sender, EventArgs e);
    private void UpdateRotation();
    private void OnRotationAnimatorEnd(object sender, EventArgs e);
}
public class Syncfusion.XForms.Android.Graphics.SfGradientViewRenderer : ViewRenderer {
    private SfGradientView gradientView;
    private Int32[] colors;
    private PointF startPoint;
    private PointF endPoint;
    private Single[] offsets;
    private PointF center;
    private float radius;
    private SfGradientBrush gradientBrush;
    private SfLinearGradientBrush linearGradient;
    private SfRadialGradientBrush radialGradient;
    private bool isLinear;
    private Paint paint;
    public SfGradientViewRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnDraw(Canvas canvas);
    protected virtual void Dispose(bool disposing);
    private void UpdateProperties();
    private void BackgroundBrush_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetGradientStops();
    private void GradientStop_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetStartPoint();
    private void SetEndPoint();
    private void SetCenter();
    private void SetRadius();
}
public class Syncfusion.XForms.Android.Shimmer.SfShimmerRenderer : ViewRenderer {
    private int centerY;
    private int templateX;
    private int templateWidth;
    private int templateHeight;
    private int columnSpacing;
    private Paint wavePaint;
    private Matrix shimmerMatrix;
    private ValueAnimator animator;
    private Paint shimmerPaint;
    private float density;
    private Shader shader;
    public SfShimmerRenderer(Context context);
    private void DrawShimmerView(Canvas canvas);
    private void DrawPersona(Canvas canvas);
    private void DrawVideo(Canvas canvas);
    private void DrawFeed(Canvas canvas);
    private void DrawShopping(Canvas canvas);
    private void DrawProfile(Canvas canvas);
    private void DrawArticle(Canvas canvas);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnLayout(bool changed, int left, int top, int right, int bottom);
    protected virtual void DispatchDraw(Canvas canvas);
    protected virtual void Dispose(bool disposing);
    private void DrawShimmerWave(Canvas canvas);
    private float Offset(float start, float end, float percent);
    public void AddWaveShader();
    public void AddWaveAnimator();
    private void OnWaveAnimatorUpdate(object sender, AnimatorUpdateEventArgs e);
    private void UpdateShimmerWave();
    private Element GetParent(Element parent);
}
internal class Syncfusion.XForms.Android.Shimmer.ShimmerViewRenderer : ViewRenderer {
    private float density;
    private Paint paint;
    public ShimmerViewRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void OnDraw(Canvas canvas);
    protected virtual void Dispose(bool disposing);
}
internal class Syncfusion.XForms.Android.TextInputLayout.InputLayoutBorder : View {
    private float cornerRadius;
    private float thickness;
    private Color borderColor;
    private Color background;
    private string text;
    private double cutoutStartX;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private Paint paint;
    private SfTextInputLayout inputLayout;
    private float scaleDensity;
    private float density;
    internal float CornerRadius { get; internal set; }
    internal float Thickness { get; internal set; }
    internal Color BorderColor { get; internal set; }
    internal Color Background { get; internal set; }
    internal string Text { get; internal set; }
    internal double CutoutStartX { get; internal set; }
    internal InputLayoutBorder(Context context, SfTextInputLayout parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal float get_CornerRadius();
    internal void set_CornerRadius(float value);
    internal float get_Thickness();
    internal void set_Thickness(float value);
    internal Color get_BorderColor();
    internal void set_BorderColor(Color value);
    internal Color get_Background();
    internal void set_Background(Color value);
    internal string get_Text();
    internal void set_Text(string value);
    internal double get_CutoutStartX();
    internal void set_CutoutStartX(double value);
    protected virtual void NotifyPropertyChanged(string propertyName);
    protected virtual void OnDraw(Canvas canvas);
    protected virtual void Dispose(bool disposing);
    private void DrawBorder(Canvas canvas, RectF bounds);
}
internal class Syncfusion.XForms.Android.TextInputLayout.InputLayoutBorderRenderer : ViewRenderer`2<InputLayoutBorder, InputLayoutBorder> {
    private InputLayoutBorder nativeBorder;
    private InputLayoutBorder formsBorder;
    private SfTextInputLayout inputLayout;
    public InputLayoutBorderRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutBorder> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Syncfusion.XForms.Android.TextInputLayout.InputLayoutBorderRenderer/<NativeBorder_Touch>d__7")]
private void NativeBorder_Touch(object sender, TouchEventArgs e);
    private void OnFormsBorderPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnFloatedHintLabelStylePropertyChanged(object sender, PropertyChangedEventArgs e);
    [AsyncStateMachineAttribute("Syncfusion.XForms.Android.TextInputLayout.InputLayoutBorderRenderer/<<NativeBorder_Touch>b__7_0>d")]
[CompilerGeneratedAttribute]
private void <NativeBorder_Touch>b__7_0();
}
public class Syncfusion.XForms.Android.TextInputLayout.InputLayoutClearButtonViewRenderer : ViewRenderer`2<InputLayoutClearView, ImageView> {
    private int clearButtonIconSize;
    private SfTextInputLayout inputLayout;
    private int ClearButtonIcon;
    private InputLayoutClearView clearButtonView;
    private ImageView nativeImageView;
    private GestureListener gestureListener;
    private GestureDetector gestureDetector;
    public InputLayoutClearButtonViewRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutClearView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnAttachedToWindow();
    protected virtual void Dispose(bool disposing);
    private void UpdateIconPadding();
    private void SetTintColor();
    private void OnClearButtonViewClicked();
}
internal class Syncfusion.XForms.Android.TextInputLayout.InputLayoutToggleViewRenderer : ViewRenderer`2<InputLayoutToggleView, ImageView> {
    private int passwordIconSize;
    private int dropDownIconSize;
    private SfTextInputLayout inputLayout;
    private int passwordToggleVisibleIcon;
    private int passwordToggleCollapsedIcon;
    private int dropDownIcon;
    private InputLayoutToggleView toggleView;
    private ImageView nativeImageView;
    private GestureListener gestureListener;
    private GestureDetector gestureDetector;
    public InputLayoutToggleViewRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutToggleView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual bool OnTouchEvent(MotionEvent e);
    protected virtual void OnAttachedToWindow();
    protected virtual void Dispose(bool disposing);
    private void UpdateIconPadding();
    private void UpdateToggleIcons();
    private void SetTintColor();
    private void OnToggleViewClicked();
    private void InvokeApplyEffects();
    private void ResetEffects();
}
public class Syncfusion.XForms.Android.TextInputLayout.SfTextInputLayoutRenderer : ViewRenderer`2<SfTextInputLayout, View> {
    private EditText nativeEditText;
    private SfTextInputLayout inputLayout;
    private float density;
    public SfTextInputLayoutRenderer(Context context);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SfTextInputLayout> e);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnInputViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void UpdateNativeView(View view);
    private void UpdateText();
    private void OverrideEditTextDefaultStyle(IVisualElementRenderer renderer);
    private void UpdatePadding();
    private void HookEvents();
    private void OnUnfocused(object sender, FocusEventArgs e);
    private void OnFocused(object sender, FocusEventArgs e);
    private void OnTextChanged(object sender, TextChangedEventArgs e);
    private void UnhookEvents();
    [CompilerGeneratedAttribute]
private void <OnElementPropertyChanged>b__6_0();
    [CompilerGeneratedAttribute]
private void <UpdateNativeView>b__9_0();
    [CompilerGeneratedAttribute]
private void <OnUnfocused>b__14_0();
    [CompilerGeneratedAttribute]
private void <OnFocused>b__15_0();
}
