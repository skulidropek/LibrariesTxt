public interface Syncfusion.Core.XForms.IPullToRefresh {
    public bool CanCustomizeContentLayout { get; public set; }
    public abstract virtual bool get_CanCustomizeContentLayout();
    public abstract virtual void set_CanCustomizeContentLayout(bool value);
    public abstract virtual void Pulling(double progress, object pullToRefresh, Boolean& cancel);
    public abstract virtual void Refreshing(object pullToRefresh);
    public abstract virtual void Refreshed(object pullToRefresh);
    public abstract virtual void PullingCancelled(object pullToRefresh);
    public abstract virtual bool CanHandleGesture(object pullToRefresh);
}
internal class Syncfusion.Core.XForms.NamespaceDoc : object {
}
public enum Syncfusion.XForms.AvatarView.AvatarCharacter : Enum {
    public int value__;
    public static AvatarCharacter Avatar1;
    public static AvatarCharacter Avatar2;
    public static AvatarCharacter Avatar3;
    public static AvatarCharacter Avatar4;
    public static AvatarCharacter Avatar5;
    public static AvatarCharacter Avatar6;
    public static AvatarCharacter Avatar7;
    public static AvatarCharacter Avatar8;
    public static AvatarCharacter Avatar9;
    public static AvatarCharacter Avatar10;
    public static AvatarCharacter Avatar11;
    public static AvatarCharacter Avatar12;
    public static AvatarCharacter Avatar13;
    public static AvatarCharacter Avatar14;
    public static AvatarCharacter Avatar15;
    public static AvatarCharacter Avatar16;
    public static AvatarCharacter Avatar17;
    public static AvatarCharacter Avatar18;
    public static AvatarCharacter Avatar19;
    public static AvatarCharacter Avatar20;
    public static AvatarCharacter Avatar21;
    public static AvatarCharacter Avatar22;
    public static AvatarCharacter Avatar23;
    public static AvatarCharacter Avatar24;
    public static AvatarCharacter Avatar25;
    public static AvatarCharacter Avatar26;
    public static AvatarCharacter Avatar27;
    public static AvatarCharacter Avatar28;
    public static AvatarCharacter Avatar29;
    public static AvatarCharacter Avatar30;
}
public enum Syncfusion.XForms.AvatarView.AvatarColorMode : Enum {
    public int value__;
    public static AvatarColorMode Default;
    public static AvatarColorMode LightBackground;
    public static AvatarColorMode DarkBackground;
}
internal class Syncfusion.XForms.AvatarView.AvatarGroupView : Grid {
    [CompilerGeneratedAttribute]
private Image <TertiaryImage>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <TertiaryGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <SecondaryLayoutGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private FontIconLabel <PrimaryInitialsLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private Image <PrimaryImage>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <PrimaryGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private FontIconLabel <SecondaryInitialsLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private Image <SecondaryImage>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <SecondaryGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private FontIconLabel <TertiaryInitialsLabel>k__BackingField;
    internal Image TertiaryImage { get; internal set; }
    internal Grid TertiaryGrid { get; internal set; }
    internal Grid SecondaryLayoutGrid { get; internal set; }
    internal FontIconLabel PrimaryInitialsLabel { get; internal set; }
    internal Image PrimaryImage { get; internal set; }
    internal Grid PrimaryGrid { get; internal set; }
    internal FontIconLabel SecondaryInitialsLabel { get; internal set; }
    internal Image SecondaryImage { get; internal set; }
    internal Grid SecondaryGrid { get; internal set; }
    internal FontIconLabel TertiaryInitialsLabel { get; internal set; }
    [CompilerGeneratedAttribute]
internal Image get_TertiaryImage();
    [CompilerGeneratedAttribute]
internal void set_TertiaryImage(Image value);
    [CompilerGeneratedAttribute]
internal Grid get_TertiaryGrid();
    [CompilerGeneratedAttribute]
internal void set_TertiaryGrid(Grid value);
    [CompilerGeneratedAttribute]
internal Grid get_SecondaryLayoutGrid();
    [CompilerGeneratedAttribute]
internal void set_SecondaryLayoutGrid(Grid value);
    [CompilerGeneratedAttribute]
internal FontIconLabel get_PrimaryInitialsLabel();
    [CompilerGeneratedAttribute]
internal void set_PrimaryInitialsLabel(FontIconLabel value);
    [CompilerGeneratedAttribute]
internal Image get_PrimaryImage();
    [CompilerGeneratedAttribute]
internal void set_PrimaryImage(Image value);
    [CompilerGeneratedAttribute]
internal Grid get_PrimaryGrid();
    [CompilerGeneratedAttribute]
internal void set_PrimaryGrid(Grid value);
    [CompilerGeneratedAttribute]
internal FontIconLabel get_SecondaryInitialsLabel();
    [CompilerGeneratedAttribute]
internal void set_SecondaryInitialsLabel(FontIconLabel value);
    [CompilerGeneratedAttribute]
internal Image get_SecondaryImage();
    [CompilerGeneratedAttribute]
internal void set_SecondaryImage(Image value);
    [CompilerGeneratedAttribute]
internal Grid get_SecondaryGrid();
    [CompilerGeneratedAttribute]
internal void set_SecondaryGrid(Grid value);
    [CompilerGeneratedAttribute]
internal FontIconLabel get_TertiaryInitialsLabel();
    [CompilerGeneratedAttribute]
internal void set_TertiaryInitialsLabel(FontIconLabel value);
    internal void ArrageElementsSpacing(bool hasSecondaryElement, bool hasTertiaryElement);
    internal void SetInitialsFontAttributeValues(Label referenceLabel);
    internal void SetInitialsFontFamily(string actualFontFamily, string fontIconFontFamily);
    internal void SetColors(AvatarColorMode colorMode);
    private void PopulatePrimaryGrid();
    private void PopulateSecondaryGrid();
}
public enum Syncfusion.XForms.AvatarView.AvatarShape : Enum {
    public int value__;
    public static AvatarShape Square;
    public static AvatarShape Circle;
    public static AvatarShape Custom;
}
public enum Syncfusion.XForms.AvatarView.AvatarSize : Enum {
    public int value__;
    public static AvatarSize ExtraLarge;
    public static AvatarSize Large;
    public static AvatarSize Medium;
    public static AvatarSize Small;
    public static AvatarSize ExtraSmall;
}
internal class Syncfusion.XForms.AvatarView.AvatarViewAutomaticColor : object {
    [CompilerGeneratedAttribute]
private Color <LightColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <DarkColor>k__BackingField;
    internal Color LightColor { get; internal set; }
    internal Color DarkColor { get; internal set; }
    [CompilerGeneratedAttribute]
internal Color get_LightColor();
    [CompilerGeneratedAttribute]
internal void set_LightColor(Color value);
    [CompilerGeneratedAttribute]
internal Color get_DarkColor();
    [CompilerGeneratedAttribute]
internal void set_DarkColor(Color value);
}
internal static class Syncfusion.XForms.AvatarView.AvatarViewColorTable : object {
    [CompilerGeneratedAttribute]
private static int <CurrentBackgroundColorIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <InitialsLightColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static Color <InitialsDarkColor>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<AvatarViewAutomaticColor> <AutomaticColors>k__BackingField;
    internal static int CurrentBackgroundColorIndex { get; internal set; }
    internal static Color InitialsLightColor { get; internal set; }
    internal static Color InitialsDarkColor { get; internal set; }
    internal static List`1<AvatarViewAutomaticColor> AutomaticColors { get; internal set; }
    private static AvatarViewColorTable();
    [CompilerGeneratedAttribute]
internal static int get_CurrentBackgroundColorIndex();
    [CompilerGeneratedAttribute]
internal static void set_CurrentBackgroundColorIndex(int value);
    [CompilerGeneratedAttribute]
internal static Color get_InitialsLightColor();
    [CompilerGeneratedAttribute]
internal static void set_InitialsLightColor(Color value);
    [CompilerGeneratedAttribute]
internal static Color get_InitialsDarkColor();
    [CompilerGeneratedAttribute]
internal static void set_InitialsDarkColor(Color value);
    [CompilerGeneratedAttribute]
internal static List`1<AvatarViewAutomaticColor> get_AutomaticColors();
    [CompilerGeneratedAttribute]
internal static void set_AutomaticColors(List`1<AvatarViewAutomaticColor> value);
    internal static void GenerateAutomaticBackgroundColors();
}
internal static class Syncfusion.XForms.AvatarView.AvatarViewSizeTable : object {
    [CompilerGeneratedAttribute]
private static double <ExtraLargeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <LargeSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <MediumSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <SmallSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <ExtraSmallSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <ExtraLargeFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <LargeFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <MediumFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <SmallFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <ExtraSmallFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static double <SquareAvatarStyleCornerRadius>k__BackingField;
    internal static double ExtraLargeSize { get; internal set; }
    internal static double LargeSize { get; internal set; }
    internal static double MediumSize { get; internal set; }
    internal static double SmallSize { get; internal set; }
    internal static double ExtraSmallSize { get; internal set; }
    internal static double ExtraLargeFontSize { get; internal set; }
    internal static double LargeFontSize { get; internal set; }
    internal static double MediumFontSize { get; internal set; }
    internal static double SmallFontSize { get; internal set; }
    internal static double ExtraSmallFontSize { get; internal set; }
    internal static double SquareAvatarStyleCornerRadius { get; internal set; }
    private static AvatarViewSizeTable();
    [CompilerGeneratedAttribute]
internal static double get_ExtraLargeSize();
    [CompilerGeneratedAttribute]
internal static void set_ExtraLargeSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_LargeSize();
    [CompilerGeneratedAttribute]
internal static void set_LargeSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_MediumSize();
    [CompilerGeneratedAttribute]
internal static void set_MediumSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_SmallSize();
    [CompilerGeneratedAttribute]
internal static void set_SmallSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_ExtraSmallSize();
    [CompilerGeneratedAttribute]
internal static void set_ExtraSmallSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_ExtraLargeFontSize();
    [CompilerGeneratedAttribute]
internal static void set_ExtraLargeFontSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_LargeFontSize();
    [CompilerGeneratedAttribute]
internal static void set_LargeFontSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_MediumFontSize();
    [CompilerGeneratedAttribute]
internal static void set_MediumFontSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_SmallFontSize();
    [CompilerGeneratedAttribute]
internal static void set_SmallFontSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_ExtraSmallFontSize();
    [CompilerGeneratedAttribute]
internal static void set_ExtraSmallFontSize(double value);
    [CompilerGeneratedAttribute]
internal static double get_SquareAvatarStyleCornerRadius();
    [CompilerGeneratedAttribute]
internal static void set_SquareAvatarStyleCornerRadius(double value);
}
internal static class Syncfusion.XForms.AvatarView.AvatarViewStaticText : object {
    internal static string DefaultFontIconText;
    internal static string DefaultGroupFontText;
    internal static string DefaultFontIconUWPText;
    internal static string DefaultGroupFontUWPText;
    internal static string DefaultIconFontAndroidFileText;
    internal static string DefaultIconFontiOSFileText;
    internal static string DefaultIconFontUWPFileText;
    internal static string AvatarCharacterFileTypeText;
    internal static string SpaceText;
    private static AvatarViewStaticText();
}
public enum Syncfusion.XForms.AvatarView.ContentType : Enum {
    public int value__;
    public static ContentType Initials;
    public static ContentType AvatarCharacter;
    public static ContentType Custom;
    public static ContentType Group;
    public static ContentType Default;
}
internal class Syncfusion.XForms.AvatarView.FontIconLabel : Label {
    [CompilerGeneratedAttribute]
private string <AvatarContentType>k__BackingField;
    internal string AvatarContentType { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_AvatarContentType();
    [CompilerGeneratedAttribute]
internal void set_AvatarContentType(string value);
}
public enum Syncfusion.XForms.AvatarView.InitialsType : Enum {
    public int value__;
    public static InitialsType SingleCharacter;
    public static InitialsType DoubleCharacter;
}
[PreserveAttribute]
[DesignTimeVisibleAttribute("True")]
public class Syncfusion.XForms.AvatarView.SfAvatarView : SfBorder {
    public static BindableProperty InitialsColorProperty;
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty ImageSourceProperty;
    public static BindableProperty ContentTypeProperty;
    public static BindableProperty InitialsTypeProperty;
    public static BindableProperty AvatarCharacterProperty;
    public static BindableProperty BackgroundGradientProperty;
    public static BindableProperty HeightRequestProperty;
    public static BindableProperty GroupSourceProperty;
    public static BindableProperty BackgroundColorMemberPathProperty;
    public static BindableProperty InitialsColorMemberPathProperty;
    public static BindableProperty AvatarNameProperty;
    public static BindableProperty AvatarSizeProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty AvatarShapeProperty;
    public static BindableProperty WidthRequestProperty;
    public static BindableProperty CornerRadiusProperty;
    public static BindableProperty ImageSourceMemberPathProperty;
    public static BindableProperty ColorModeProperty;
    public static BindableProperty InitialsMemberPathProperty;
    public static BindableProperty AspectProperty;
    private string imageLocation;
    private bool isGroupSourceEmpty;
    [CompilerGeneratedAttribute]
private View <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Grid <LayoutGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private Image <AvatarImage>k__BackingField;
    [CompilerGeneratedAttribute]
private Image <CustomImage>k__BackingField;
    [CompilerGeneratedAttribute]
private SfGradientView <GradientView>k__BackingField;
    [CompilerGeneratedAttribute]
private FontIconLabel <InitialsLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private AvatarGroupView <GroupView>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontIconFontFamily>k__BackingField;
    [BrowsableAttribute("False")]
public View Content { get; public set; }
    public Aspect Aspect { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    public Color InitialsColor { get; public set; }
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public ImageSource ImageSource { get; public set; }
    public ContentType ContentType { get; public set; }
    public AvatarCharacter AvatarCharacter { get; public set; }
    public string AvatarName { get; public set; }
    public double HeightRequest { get; public set; }
    public InitialsType InitialsType { get; public set; }
    public SfGradientBrush BackgroundGradient { get; public set; }
    public Color BackgroundColor { get; public set; }
    public IEnumerable GroupSource { get; public set; }
    public string BackgroundColorMemberPath { get; public set; }
    public string ImageSourceMemberPath { get; public set; }
    public Thickness CornerRadius { get; public set; }
    public AvatarColorMode AvatarColorMode { get; public set; }
    public string InitialsColorMemberPath { get; public set; }
    public double WidthRequest { get; public set; }
    public string InitialsMemberPath { get; public set; }
    public AvatarShape AvatarShape { get; public set; }
    public AvatarSize AvatarSize { get; public set; }
    internal Grid LayoutGrid { get; internal set; }
    internal Image AvatarImage { get; internal set; }
    internal Image CustomImage { get; internal set; }
    internal SfGradientView GradientView { get; internal set; }
    internal FontIconLabel InitialsLabel { get; internal set; }
    internal AvatarGroupView GroupView { get; internal set; }
    internal string FontIconFontFamily { get; internal set; }
    private static SfAvatarView();
    [CompilerGeneratedAttribute]
public View get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(View value);
    public Aspect get_Aspect();
    public void set_Aspect(Aspect value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public Color get_InitialsColor();
    public void set_InitialsColor(Color value);
    public double get_FontSize();
    public void set_FontSize(double value);
    public ImageSource get_ImageSource();
    public void set_ImageSource(ImageSource value);
    public ContentType get_ContentType();
    public void set_ContentType(ContentType value);
    public AvatarCharacter get_AvatarCharacter();
    public void set_AvatarCharacter(AvatarCharacter value);
    public string get_AvatarName();
    public void set_AvatarName(string value);
    public double get_HeightRequest();
    public void set_HeightRequest(double value);
    public InitialsType get_InitialsType();
    public void set_InitialsType(InitialsType value);
    public SfGradientBrush get_BackgroundGradient();
    public void set_BackgroundGradient(SfGradientBrush value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public IEnumerable get_GroupSource();
    public void set_GroupSource(IEnumerable value);
    public string get_BackgroundColorMemberPath();
    public void set_BackgroundColorMemberPath(string value);
    public string get_ImageSourceMemberPath();
    public void set_ImageSourceMemberPath(string value);
    public Thickness get_CornerRadius();
    public void set_CornerRadius(Thickness value);
    public AvatarColorMode get_AvatarColorMode();
    public void set_AvatarColorMode(AvatarColorMode value);
    public string get_InitialsColorMemberPath();
    public void set_InitialsColorMemberPath(string value);
    public double get_WidthRequest();
    public void set_WidthRequest(double value);
    public string get_InitialsMemberPath();
    public void set_InitialsMemberPath(string value);
    public AvatarShape get_AvatarShape();
    public void set_AvatarShape(AvatarShape value);
    public AvatarSize get_AvatarSize();
    public void set_AvatarSize(AvatarSize value);
    [CompilerGeneratedAttribute]
internal Grid get_LayoutGrid();
    [CompilerGeneratedAttribute]
internal void set_LayoutGrid(Grid value);
    [CompilerGeneratedAttribute]
internal Image get_AvatarImage();
    [CompilerGeneratedAttribute]
internal void set_AvatarImage(Image value);
    [CompilerGeneratedAttribute]
internal Image get_CustomImage();
    [CompilerGeneratedAttribute]
internal void set_CustomImage(Image value);
    [CompilerGeneratedAttribute]
internal SfGradientView get_GradientView();
    [CompilerGeneratedAttribute]
internal void set_GradientView(SfGradientView value);
    [CompilerGeneratedAttribute]
internal FontIconLabel get_InitialsLabel();
    [CompilerGeneratedAttribute]
internal void set_InitialsLabel(FontIconLabel value);
    [CompilerGeneratedAttribute]
internal AvatarGroupView get_GroupView();
    [CompilerGeneratedAttribute]
internal void set_GroupView(AvatarGroupView value);
    [CompilerGeneratedAttribute]
internal string get_FontIconFontFamily();
    [CompilerGeneratedAttribute]
internal void set_FontIconFontFamily(string value);
    private static void OnInitialsColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFontSizePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFontFamilyPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFontAttributesPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnImageSourcePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnAspectPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnContentTypePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnInitialsTypePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnAvatarCharacterPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnNamePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnBackgroundGradientPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnAvatarStylePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnHeightRequestPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnColorModePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnBackgroundColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCornerRadiusPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnWidthRequestPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnGroupSourcePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnInitialsMemberPathPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnImageSourceMemberPathPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnBackgroundColorMemberPathPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnInitialsColorMemberPathPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static string SetDefaultFontText();
    private static string SetDefaultGroupFontText();
    private void UpdateAspect();
    private void InitializeElements();
    private void InitializeGradientView();
    private void InitializeGroupView();
    private void InitializeAvatarImage();
    private void InitializeCustomImage();
    private void DisplayCurrentAvatarElement();
    private void CollaspeAllAvatarView();
    private void SetAvatarCharacter(AvatarCharacter avatarCharacterType);
    private string GetDefaultFontIconText(Label labelElement);
    private void SetDefaultFontFamilyBasedOnDevice();
    private void UpdateGroupViewValues();
    private void SetGroupElementValue(Label groupLabel, Grid groupGrid, Image groupImage, object initialsValue, object imageValue, object backgroundColorValue, object textColorValue);
    private object GetPropertyValue(string propertyName, object item);
    private void HookCollectionChangedEvent();
    private void SetColors();
    private void ApplyAvatarStyleSetting();
    private void ApplyConstantAvatarStyleSetting();
    private void SetAvatarSizing(double avatarSizeRequest, double initialFontSize, bool isCircleType);
    private void SetAvatarSizing(double avatarWidthRequest, double avatarHeightRequest, Thickness avatarCornerRadius, double initialFontSize);
    private void SetInitialsBasedOnInitialsType(string initialsValue, Label elementLabel);
    private string GetValidatedInitials(string initialsValue, Label labelElement);
    private string GetSingleWordInitial(string word, Label labelElement);
    private void SfAvatarView_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
[PreserveAttribute]
[DesignTimeVisibleAttribute("True")]
public class Syncfusion.XForms.Border.SfBorder : ContentView {
    public static BindableProperty BorderColorProperty;
    public static BindableProperty BorderWidthProperty;
    public static BindableProperty CornerRadiusProperty;
    public static BindableProperty BackgroundColorProperty;
    public static BindableProperty HasShadowProperty;
    public static BindableProperty ShadowColorProperty;
    public static BindableProperty DashArrayProperty;
    public static BindableProperty BorderThicknessProperty;
    [CompilerGeneratedAttribute]
private float <BottomShadowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RightShadowWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TopShadowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private float <LeftShadowWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ShadowOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ShadowX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ShadowY>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBorderThicknessUpdated>k__BackingField;
    public Thickness CornerRadius { get; public set; }
    public Color BorderColor { get; public set; }
    public double BorderWidth { get; public set; }
    public Color BackgroundColor { get; public set; }
    public bool HasShadow { get; public set; }
    public Color ShadowColor { get; public set; }
    public Double[] DashArray { get; public set; }
    public Thickness BorderThickness { get; public set; }
    internal float BottomShadowHeight { get; internal set; }
    internal float RightShadowWidth { get; internal set; }
    internal float TopShadowHeight { get; internal set; }
    internal float LeftShadowWidth { get; internal set; }
    internal float ShadowOffset { get; internal set; }
    internal float ShadowX { get; internal set; }
    internal float ShadowY { get; internal set; }
    internal bool IsBorderThicknessUpdated { get; internal set; }
    private static SfBorder();
    public Thickness get_CornerRadius();
    public void set_CornerRadius(Thickness value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public Double[] get_DashArray();
    public void set_DashArray(Double[] value);
    public Thickness get_BorderThickness();
    public void set_BorderThickness(Thickness value);
    [CompilerGeneratedAttribute]
internal float get_BottomShadowHeight();
    [CompilerGeneratedAttribute]
internal void set_BottomShadowHeight(float value);
    [CompilerGeneratedAttribute]
internal float get_RightShadowWidth();
    [CompilerGeneratedAttribute]
internal void set_RightShadowWidth(float value);
    [CompilerGeneratedAttribute]
internal float get_TopShadowHeight();
    [CompilerGeneratedAttribute]
internal void set_TopShadowHeight(float value);
    [CompilerGeneratedAttribute]
internal float get_LeftShadowWidth();
    [CompilerGeneratedAttribute]
internal void set_LeftShadowWidth(float value);
    [CompilerGeneratedAttribute]
internal float get_ShadowOffset();
    [CompilerGeneratedAttribute]
internal void set_ShadowOffset(float value);
    [CompilerGeneratedAttribute]
internal float get_ShadowX();
    [CompilerGeneratedAttribute]
internal void set_ShadowX(float value);
    [CompilerGeneratedAttribute]
internal float get_ShadowY();
    [CompilerGeneratedAttribute]
internal void set_ShadowY(float value);
    [CompilerGeneratedAttribute]
internal bool get_IsBorderThicknessUpdated();
    [CompilerGeneratedAttribute]
internal void set_IsBorderThicknessUpdated(bool value);
    private sealed virtual override ResourceDictionary Syncfusion.XForms.Themes.IParentThemeElement.GetThemeDictionary();
    private sealed virtual override void Syncfusion.XForms.Themes.IThemeElement.OnControlThemeChanged(string oldTheme, string newTheme);
    private sealed virtual override void Syncfusion.XForms.Themes.IThemeElement.OnCommonThemeChanged(string oldTheme, string newTheme);
    protected virtual void LayoutChildren(double x, double y, double width, double height);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
    private static void OhHasShadowChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnDashArrayChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnBorderWidthChanged(BindableObject bindable, object oldValue, object newValue);
    private static object OnBorderWidthCoerceChanged(BindableObject bindable, object value);
    private static void OnBorderThicknessChanged(BindableObject bindable, object oldValue, object newValue);
}
[PreserveAttribute]
[XamlFilePathAttribute("Border\SfBorderStyles.xaml")]
public class Syncfusion.XForms.Border.SfBorderStyles : ResourceDictionary {
    [GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
private void InitializeComponent();
}
internal class Syncfusion.XForms.Core.AndroidPhonePlatform`1 : object {
    public sealed virtual T GetValue(OnPlatformOrientation`1<T> values);
}
internal class Syncfusion.XForms.Core.AndroidTabletPlatform`1 : object {
    public sealed virtual T GetValue(OnPlatformOrientation`1<T> values);
}
public class Syncfusion.XForms.Core.CancelEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
internal class Syncfusion.XForms.Core.Desktop`1 : object {
    public sealed virtual T GetValue(OnPlatformOrientation`1<T> values);
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.Core.FlaggedEnumExt : object {
    [IteratorStateMachineAttribute("Syncfusion.XForms.Core.FlaggedEnumExt/<GetAllItems>d__0")]
[ExtensionAttribute]
internal static IEnumerable`1<Enum> GetAllItems(Enum targetEnum);
    [ExtensionAttribute]
internal static bool IsEmpty(SfEffects source);
    [ExtensionAttribute]
internal static SfEffects Add(SfEffects target, SfEffects newItem);
    [ExtensionAttribute]
internal static SfEffects ComplementsOf(SfEffects target, SfEffects source);
    [ExtensionAttribute]
internal static SfEffects ComplementsOf(SfEffects target, SfEffects source1, SfEffects source2);
}
internal interface Syncfusion.XForms.Core.IDeviceOrientation {
    public abstract virtual bool GetOrientation();
}
internal interface Syncfusion.XForms.Core.IMeasureTextSize {
    public abstract virtual double MeasureTextWidth(string text, string fontFamily, double size);
}
internal class Syncfusion.XForms.Core.iOSPhonePlatform`1 : object {
    public sealed virtual T GetValue(OnPlatformOrientation`1<T> values);
}
internal class Syncfusion.XForms.Core.iOSTabletPlatform`1 : object {
    public sealed virtual T GetValue(OnPlatformOrientation`1<T> values);
}
internal interface Syncfusion.XForms.Core.IRuntimePlatform`1 {
    public abstract virtual T GetValue(OnPlatformOrientation`1<T> values);
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.Core.LicenseHelper : object {
    private static bool isNeedtoQuit;
    [CompilerGeneratedAttribute]
private static EventHandler`1<EventArgs> LicensePopupClosed;
    [ExtensionAttribute]
internal static void ValidateLicense(View view, bool isEffectiveControl);
    [ExtensionAttribute]
internal static void ValidateLicense(Page page);
    [AsyncStateMachineAttribute("Syncfusion.XForms.Core.LicenseHelper/<ShowLicenseMessage>d__3")]
[ObsoleteAttribute]
internal static void ShowLicenseMessage(string message);
    internal static void ValidateLicense(bool isEffectiveControl);
    [CompilerGeneratedAttribute]
internal static void add_LicensePopupClosed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal static void remove_LicensePopupClosed(EventHandler`1<EventArgs> value);
    [AsyncStateMachineAttribute("Syncfusion.XForms.Core.LicenseHelper/<ValidateWPFLicense>d__8")]
private static Task ValidateWPFLicense(string message);
}
public abstract class Syncfusion.XForms.Core.OnPlatformOrientation`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsDefaultSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPortraitSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLandscapeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPhonePortraitSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPhoneLandscapeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTabletPortraitSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTabletLandscapeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPhoneSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTabletSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDesktopSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAndroidSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsiOSSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUWPSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAndroidPhonePortraitSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAndroidPhoneLandscapeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsiOSPhonePortraitSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsiOSPhoneLandscapeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAndroidTabletPortraitSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAndroidTabletLandscapeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsiOSTabletPortraitSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsiOSTabletLandscapeSet>k__BackingField;
    private BindableProperty targetProperty;
    private BindableObject targetObject;
    private T defaultValue;
    private T portrait;
    private T landscape;
    private T phonePortrait;
    private T phoneLandscape;
    private T tabletPortrait;
    private T tabletLandscape;
    private T phone;
    private T tablet;
    private T desktop;
    private T android;
    private T ios;
    private T uwp;
    private T androidPhonePortrait;
    private T androidPhoneLandscape;
    private T iosPhonePortrait;
    private T iosPhoneLandscape;
    private T androidTabletPortrait;
    private T androidTabletLandscape;
    private T iosTabletPortrait;
    private T iosTabletLandscape;
    private IRuntimePlatform`1<T> runtimePlatform;
    [CompilerGeneratedAttribute]
private bool <UseBinding>k__BackingField;
    private T bindingValue;
    private bool isPortrait;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    internal bool IsDefaultSet { get; internal set; }
    internal bool IsPortraitSet { get; internal set; }
    internal bool IsLandscapeSet { get; internal set; }
    internal bool IsPhonePortraitSet { get; internal set; }
    internal bool IsPhoneLandscapeSet { get; internal set; }
    internal bool IsTabletPortraitSet { get; internal set; }
    internal bool IsTabletLandscapeSet { get; internal set; }
    internal bool IsPhoneSet { get; internal set; }
    internal bool IsTabletSet { get; internal set; }
    internal bool IsDesktopSet { get; internal set; }
    internal bool IsAndroidSet { get; internal set; }
    internal bool IsiOSSet { get; internal set; }
    internal bool IsUWPSet { get; internal set; }
    internal bool IsAndroidPhonePortraitSet { get; internal set; }
    internal bool IsAndroidPhoneLandscapeSet { get; internal set; }
    internal bool IsiOSPhonePortraitSet { get; internal set; }
    internal bool IsiOSPhoneLandscapeSet { get; internal set; }
    internal bool IsAndroidTabletPortraitSet { get; internal set; }
    internal bool IsAndroidTabletLandscapeSet { get; internal set; }
    internal bool IsiOSTabletPortraitSet { get; internal set; }
    internal bool IsiOSTabletLandscapeSet { get; internal set; }
    public T Default { get; public set; }
    public T Portrait { get; public set; }
    public T Landscape { get; public set; }
    public T PhonePortrait { get; public set; }
    public T PhoneLandscape { get; public set; }
    public T TabletPortrait { get; public set; }
    public T TabletLandscape { get; public set; }
    public T Phone { get; public set; }
    public T Tablet { get; public set; }
    public T Desktop { get; public set; }
    public T Android { get; public set; }
    public T iOS { get; public set; }
    public T UWP { get; public set; }
    public T AndroidPhonePortrait { get; public set; }
    public T iOSPhonePortrait { get; public set; }
    public T AndroidPhoneLandscape { get; public set; }
    public T iOSPhoneLandscape { get; public set; }
    public T AndroidTabletPortrait { get; public set; }
    public T iOSTabletPortrait { get; public set; }
    public T AndroidTabletLandscape { get; public set; }
    public T iOSTabletLandscape { get; public set; }
    public bool UseBinding { get; public set; }
    public T BindingValue { get; internal set; }
    internal bool IsPortrait { get; private set; }
    [CompilerGeneratedAttribute]
internal bool get_IsDefaultSet();
    [CompilerGeneratedAttribute]
internal void set_IsDefaultSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsPortraitSet();
    [CompilerGeneratedAttribute]
internal void set_IsPortraitSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsLandscapeSet();
    [CompilerGeneratedAttribute]
internal void set_IsLandscapeSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsPhonePortraitSet();
    [CompilerGeneratedAttribute]
internal void set_IsPhonePortraitSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsPhoneLandscapeSet();
    [CompilerGeneratedAttribute]
internal void set_IsPhoneLandscapeSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsTabletPortraitSet();
    [CompilerGeneratedAttribute]
internal void set_IsTabletPortraitSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsTabletLandscapeSet();
    [CompilerGeneratedAttribute]
internal void set_IsTabletLandscapeSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsPhoneSet();
    [CompilerGeneratedAttribute]
internal void set_IsPhoneSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsTabletSet();
    [CompilerGeneratedAttribute]
internal void set_IsTabletSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsDesktopSet();
    [CompilerGeneratedAttribute]
internal void set_IsDesktopSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAndroidSet();
    [CompilerGeneratedAttribute]
internal void set_IsAndroidSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsiOSSet();
    [CompilerGeneratedAttribute]
internal void set_IsiOSSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsUWPSet();
    [CompilerGeneratedAttribute]
internal void set_IsUWPSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAndroidPhonePortraitSet();
    [CompilerGeneratedAttribute]
internal void set_IsAndroidPhonePortraitSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAndroidPhoneLandscapeSet();
    [CompilerGeneratedAttribute]
internal void set_IsAndroidPhoneLandscapeSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsiOSPhonePortraitSet();
    [CompilerGeneratedAttribute]
internal void set_IsiOSPhonePortraitSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsiOSPhoneLandscapeSet();
    [CompilerGeneratedAttribute]
internal void set_IsiOSPhoneLandscapeSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAndroidTabletPortraitSet();
    [CompilerGeneratedAttribute]
internal void set_IsAndroidTabletPortraitSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAndroidTabletLandscapeSet();
    [CompilerGeneratedAttribute]
internal void set_IsAndroidTabletLandscapeSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsiOSTabletPortraitSet();
    [CompilerGeneratedAttribute]
internal void set_IsiOSTabletPortraitSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsiOSTabletLandscapeSet();
    [CompilerGeneratedAttribute]
internal void set_IsiOSTabletLandscapeSet(bool value);
    public T get_Default();
    public void set_Default(T value);
    public T get_Portrait();
    public void set_Portrait(T value);
    public T get_Landscape();
    public void set_Landscape(T value);
    public T get_PhonePortrait();
    public void set_PhonePortrait(T value);
    public T get_PhoneLandscape();
    public void set_PhoneLandscape(T value);
    public T get_TabletPortrait();
    public void set_TabletPortrait(T value);
    public T get_TabletLandscape();
    public void set_TabletLandscape(T value);
    public T get_Phone();
    public void set_Phone(T value);
    public T get_Tablet();
    public void set_Tablet(T value);
    public T get_Desktop();
    public void set_Desktop(T value);
    public T get_Android();
    public void set_Android(T value);
    public T get_iOS();
    public void set_iOS(T value);
    public T get_UWP();
    public void set_UWP(T value);
    public T get_AndroidPhonePortrait();
    public void set_AndroidPhonePortrait(T value);
    public T get_iOSPhonePortrait();
    public void set_iOSPhonePortrait(T value);
    public T get_AndroidPhoneLandscape();
    public void set_AndroidPhoneLandscape(T value);
    public T get_iOSPhoneLandscape();
    public void set_iOSPhoneLandscape(T value);
    public T get_AndroidTabletPortrait();
    public void set_AndroidTabletPortrait(T value);
    public T get_iOSTabletPortrait();
    public void set_iOSTabletPortrait(T value);
    public T get_AndroidTabletLandscape();
    public void set_AndroidTabletLandscape(T value);
    public T get_iOSTabletLandscape();
    public void set_iOSTabletLandscape(T value);
    [CompilerGeneratedAttribute]
public bool get_UseBinding();
    [CompilerGeneratedAttribute]
public void set_UseBinding(bool value);
    public T get_BindingValue();
    internal void set_BindingValue(T value);
    internal bool get_IsPortrait();
    private void set_IsPortrait(bool value);
    private void OnOrientationChanged(object sender);
    private void UpdateBindingPath();
    public object ProvideValue(IServiceProvider serviceProvider);
    private sealed virtual override object Xamarin.Forms.Xaml.IMarkupExtension.ProvideValue(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string propertyName);
}
public class Syncfusion.XForms.Core.OnPlatformOrientationAspect : OnPlatformOrientation`1<Aspect> {
}
public class Syncfusion.XForms.Core.OnPlatformOrientationDataTemplate : OnPlatformOrientation`1<DataTemplate> {
}
public class Syncfusion.XForms.Core.OnPlatformOrientationDoubleValue : OnPlatformOrientation`1<double> {
}
public class Syncfusion.XForms.Core.OnPlatformOrientationIntValue : OnPlatformOrientation`1<int> {
}
public class Syncfusion.XForms.Core.OnPlatformOrientationLayoutOptions : OnPlatformOrientation`1<LayoutOptions> {
}
public class Syncfusion.XForms.Core.OnPlatformOrientationStringValue : OnPlatformOrientation`1<string> {
}
public class Syncfusion.XForms.Core.OnPlatformOrientationThickness : OnPlatformOrientation`1<Thickness> {
}
internal class Syncfusion.XForms.Core.RTLConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Syncfusion.XForms.Core.SfThickness : ValueType {
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    internal double Left { get; internal set; }
    internal double Top { get; internal set; }
    internal double Right { get; internal set; }
    internal double Bottom { get; internal set; }
    internal double HorizontalThickness { get; }
    internal double VerticalThickness { get; }
    internal bool IsEmpty { get; }
    internal bool IsUniformSize { get; }
    internal SfThickness(double uniformThickness);
    internal SfThickness(double horizontalSize, double verticalSize);
    internal SfThickness(double left, double top, double right, double bottom);
    [CompilerGeneratedAttribute]
internal double get_Left();
    [CompilerGeneratedAttribute]
internal void set_Left(double value);
    [CompilerGeneratedAttribute]
internal double get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(double value);
    [CompilerGeneratedAttribute]
internal double get_Right();
    [CompilerGeneratedAttribute]
internal void set_Right(double value);
    [CompilerGeneratedAttribute]
internal double get_Bottom();
    [CompilerGeneratedAttribute]
internal void set_Bottom(double value);
    internal double get_HorizontalThickness();
    internal double get_VerticalThickness();
    internal bool get_IsEmpty();
    internal bool get_IsUniformSize();
    public static SfThickness op_Implicit(double uniformThickness);
    internal bool Equals(object thickness);
    private bool Equals(SfThickness thickness);
}
public static class Syncfusion.XForms.Core.ThreadHelper : object {
    [CompilerGeneratedAttribute]
private static int <MainThreadId>k__BackingField;
    internal static int MainThreadId { get; private set; }
    public static bool IsOnMainThread { get; }
    [CompilerGeneratedAttribute]
internal static int get_MainThreadId();
    [CompilerGeneratedAttribute]
private static void set_MainThreadId(int value);
    public static void Initialize(int mainThreadId);
    public static bool get_IsOnMainThread();
}
public enum Syncfusion.XForms.Editors.ClearButtonVisibilityMode : Enum {
    public int value__;
    public static ClearButtonVisibilityMode Never;
    public static ClearButtonVisibilityMode WhileEditing;
}
public enum Syncfusion.XForms.EffectsView.AutoResetEffects : Enum {
    public int value__;
    public static AutoResetEffects None;
    public static AutoResetEffects Highlight;
    public static AutoResetEffects Ripple;
    public static AutoResetEffects Scale;
}
internal interface Syncfusion.XForms.EffectsView.IEffectsViewDependencyService {
    public abstract virtual void ApplyEffects(SfEffects effects, RippleStartPosition rippleStartPosition, Nullable`1<Point> rippleStartPoint, bool repeat, object nativeObject);
    public abstract virtual void Reset(object nativeObject);
}
internal class Syncfusion.XForms.EffectsView.PlatformConfigurationRegistry`1 : object {
    private TElement formsElement;
    private Dictionary`2<Type, object> platformSpecifics;
    internal PlatformConfigurationRegistry`1(TElement element);
    public sealed virtual IPlatformElementConfiguration`2<T, TElement> On();
}
[FlagsAttribute]
public enum Syncfusion.XForms.EffectsView.RippleStartPosition : Enum {
    public int value__;
    public static RippleStartPosition Left;
    public static RippleStartPosition Top;
    public static RippleStartPosition Right;
    public static RippleStartPosition Bottom;
    public static RippleStartPosition Default;
}
[FlagsAttribute]
public enum Syncfusion.XForms.EffectsView.SfEffects : Enum {
    public int value__;
    public static SfEffects None;
    public static SfEffects Highlight;
    public static SfEffects Ripple;
    public static SfEffects Scale;
    public static SfEffects Selection;
    public static SfEffects Rotation;
}
public class Syncfusion.XForms.EffectsView.SfEffectsView : ContentView {
    public static BindableProperty RippleColorOpacityProperty;
    public static BindableProperty SelectionColorOpacityProperty;
    public static BindableProperty HighlightColorOpacityProperty;
    public static BindableProperty RippleAnimationDurationProperty;
    public static BindableProperty ScaleAnimationDurationProperty;
    public static BindableProperty RotationAnimationDurationProperty;
    public static BindableProperty CornerRadiusProperty;
    public static BindableProperty InitialRippleFactorProperty;
    public static BindableProperty ScaleFactorProperty;
    public static BindableProperty HighlightColorProperty;
    public static BindableProperty RippleColorProperty;
    public static BindableProperty SelectionColorProperty;
    public static BindableProperty AngleProperty;
    public static BindableProperty FadeOutRippleProperty;
    public static BindableProperty AutoResetEffectProperty;
    public static BindableProperty TouchDownEffectsProperty;
    public static BindableProperty LongPressEffectsProperty;
    public static BindableProperty TouchUpEffectsProperty;
    public static BindableProperty IsSelectedProperty;
    public static BindableProperty ShouldIgnoreTouchesProperty;
    internal static BindableProperty ShouldApplyEffectsBehindContentProperty;
    private Lazy`1<PlatformConfigurationRegistry`1<SfEffectsView>> platformConfigurationRegistry;
    public static BindableProperty TouchDownCommandProperty;
    public static BindableProperty LongPressedCommandProperty;
    public static BindableProperty TouchUpCommandProperty;
    public static BindableProperty TouchDownCommandParameterProperty;
    public static BindableProperty LongPressedCommandParameterProperty;
    public static BindableProperty TouchUpCommandParameterProperty;
    [CompilerGeneratedAttribute]
private object <NativeObject>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler AnimationCompleted;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private EventHandler TouchDown;
    [CompilerGeneratedAttribute]
private EventHandler LongPressed;
    [CompilerGeneratedAttribute]
private EventHandler TouchUp;
    public double RippleColorOpacity { get; public set; }
    public double SelectionColorOpacity { get; public set; }
    public double HighlightColorOpacity { get; public set; }
    public double RippleAnimationDuration { get; public set; }
    public double ScaleAnimationDuration { get; public set; }
    public double RotationAnimationDuration { get; public set; }
    public Thickness CornerRadius { get; public set; }
    public double InitialRippleFactor { get; public set; }
    public double ScaleFactor { get; public set; }
    public Color HighlightColor { get; public set; }
    public Color RippleColor { get; public set; }
    public Color SelectionColor { get; public set; }
    public int Angle { get; public set; }
    public bool FadeOutRipple { get; public set; }
    public AutoResetEffects AutoResetEffect { get; public set; }
    public SfEffects TouchDownEffects { get; public set; }
    public SfEffects LongPressEffects { get; public set; }
    public SfEffects TouchUpEffects { get; public set; }
    public bool IsSelected { get; public set; }
    public bool ShouldIgnoreTouches { get; public set; }
    internal bool ShouldApplyEffectsBehindContent { get; internal set; }
    internal object NativeObject { get; internal set; }
    public ICommand TouchDownCommand { get; public set; }
    public ICommand LongPressedCommand { get; public set; }
    public ICommand TouchUpCommand { get; public set; }
    public object TouchDownCommandParameter { get; public set; }
    public object LongPressedCommandParameter { get; public set; }
    public object TouchUpCommandParameter { get; public set; }
    private static SfEffectsView();
    public double get_RippleColorOpacity();
    public void set_RippleColorOpacity(double value);
    public double get_SelectionColorOpacity();
    public void set_SelectionColorOpacity(double value);
    public double get_HighlightColorOpacity();
    public void set_HighlightColorOpacity(double value);
    public double get_RippleAnimationDuration();
    public void set_RippleAnimationDuration(double value);
    public double get_ScaleAnimationDuration();
    public void set_ScaleAnimationDuration(double value);
    public double get_RotationAnimationDuration();
    public void set_RotationAnimationDuration(double value);
    public Thickness get_CornerRadius();
    public void set_CornerRadius(Thickness value);
    public double get_InitialRippleFactor();
    public void set_InitialRippleFactor(double value);
    public double get_ScaleFactor();
    public void set_ScaleFactor(double value);
    public Color get_HighlightColor();
    public void set_HighlightColor(Color value);
    public Color get_RippleColor();
    public void set_RippleColor(Color value);
    public Color get_SelectionColor();
    public void set_SelectionColor(Color value);
    public int get_Angle();
    public void set_Angle(int value);
    public bool get_FadeOutRipple();
    public void set_FadeOutRipple(bool value);
    public AutoResetEffects get_AutoResetEffect();
    public void set_AutoResetEffect(AutoResetEffects value);
    public SfEffects get_TouchDownEffects();
    public void set_TouchDownEffects(SfEffects value);
    public SfEffects get_LongPressEffects();
    public void set_LongPressEffects(SfEffects value);
    public SfEffects get_TouchUpEffects();
    public void set_TouchUpEffects(SfEffects value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_ShouldIgnoreTouches();
    public void set_ShouldIgnoreTouches(bool value);
    internal bool get_ShouldApplyEffectsBehindContent();
    internal void set_ShouldApplyEffectsBehindContent(bool value);
    [CompilerGeneratedAttribute]
internal object get_NativeObject();
    [CompilerGeneratedAttribute]
internal void set_NativeObject(object value);
    public ICommand get_TouchDownCommand();
    public void set_TouchDownCommand(ICommand value);
    public ICommand get_LongPressedCommand();
    public void set_LongPressedCommand(ICommand value);
    public ICommand get_TouchUpCommand();
    public void set_TouchUpCommand(ICommand value);
    public object get_TouchDownCommandParameter();
    public void set_TouchDownCommandParameter(object value);
    public object get_LongPressedCommandParameter();
    public void set_LongPressedCommandParameter(object value);
    public object get_TouchUpCommandParameter();
    public void set_TouchUpCommandParameter(object value);
    [CompilerGeneratedAttribute]
public void add_AnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_TouchDown(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TouchDown(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LongPressed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LongPressed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_TouchUp(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TouchUp(EventHandler value);
    private sealed virtual override ResourceDictionary Syncfusion.XForms.Themes.IParentThemeElement.GetThemeDictionary();
    private sealed virtual override void Syncfusion.XForms.Themes.IThemeElement.OnControlThemeChanged(string oldTheme, string newTheme);
    private sealed virtual override void Syncfusion.XForms.Themes.IThemeElement.OnCommonThemeChanged(string oldTheme, string newTheme);
    public IPlatformElementConfiguration`2<T, SfEffectsView> On();
    public void Reset();
    public void ApplyEffects(SfEffects effects, RippleStartPosition rippleStartPosition, Nullable`1<Point> rippleStartPoint, bool repeat);
    internal void RaiseAnimationCompletedEvent(EventArgs eventArgs);
    internal void RaiseSelectedEvent(EventArgs eventArgs);
    internal void InvokeTouchDownEventAndCommand();
    internal void InvokeLongPressedEventAndCommand();
    internal void InvokeTouchUpEventAndCommand();
    [CompilerGeneratedAttribute]
private PlatformConfigurationRegistry`1<SfEffectsView> <.ctor>b__113_0();
}
[XamlFilePathAttribute("Theme\Resources\SfEffectsViewStyles.xaml")]
public class Syncfusion.XForms.EffectsView.SfEffectsViewStyles : ResourceDictionary {
    [GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
private void InitializeComponent();
}
[ComVisibleAttribute("False")]
public class Syncfusion.XForms.Graphics.GradientStopCollection : ObservableCollection`1<SfGradientStop> {
}
[PreserveAttribute]
public abstract class Syncfusion.XForms.Graphics.SfGradientBrush : Element {
    public static BindableProperty GradientStopsProperty;
    public GradientStopCollection GradientStops { get; public set; }
    private static SfGradientBrush();
    public GradientStopCollection get_GradientStops();
    public void set_GradientStops(GradientStopCollection value);
    private static void OnGradientStopsPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void GradientStopsPropertyChanged(GradientStopCollection oldValue, GradientStopCollection newValue);
    private void GradientStops_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected virtual void OnBindingContextChanged();
}
[PreserveAttribute]
public class Syncfusion.XForms.Graphics.SfGradientStop : Element {
    public static BindableProperty ColorProperty;
    public static BindableProperty OffsetProperty;
    public Color Color { get; public set; }
    public double Offset { get; public set; }
    private static SfGradientStop();
    public Color get_Color();
    public void set_Color(Color value);
    public double get_Offset();
    public void set_Offset(double value);
}
[PreserveAttribute]
[DesignTimeVisibleAttribute("True")]
public class Syncfusion.XForms.Graphics.SfGradientView : View {
    public static BindableProperty BackgroundBrushProperty;
    public SfGradientBrush BackgroundBrush { get; public set; }
    private static SfGradientView();
    public SfGradientBrush get_BackgroundBrush();
    public void set_BackgroundBrush(SfGradientBrush value);
    private static void OnBackgroundBrushPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void BackgroundBrushPropertyChanged(SfGradientBrush oldValue, SfGradientBrush newValue);
    protected virtual void OnBindingContextChanged();
}
[PreserveAttribute]
public class Syncfusion.XForms.Graphics.SfLinearGradientBrush : SfGradientBrush {
    public static BindableProperty StartPointProperty;
    public static BindableProperty EndPointProperty;
    public Point StartPoint { get; public set; }
    public Point EndPoint { get; public set; }
    private static SfLinearGradientBrush();
    public Point get_StartPoint();
    public void set_StartPoint(Point value);
    public Point get_EndPoint();
    public void set_EndPoint(Point value);
}
[PreserveAttribute]
public class Syncfusion.XForms.Graphics.SfRadialGradientBrush : SfGradientBrush {
    public static BindableProperty RadiusProperty;
    public static BindableProperty CenterProperty;
    public double Radius { get; public set; }
    public Point Center { get; public set; }
    private static SfRadialGradientBrush();
    public double get_Radius();
    public void set_Radius(double value);
    public Point get_Center();
    public void set_Center(Point value);
}
public interface Syncfusion.XForms.ParallaxView.IParallaxView {
    public Size ScrollableContentSize { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Scrolling(EventHandler`1<ParallaxScrollingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Scrolling(EventHandler`1<ParallaxScrollingEventArgs> value);
    public abstract virtual Size get_ScrollableContentSize();
    public abstract virtual void set_ScrollableContentSize(Size value);
}
public class Syncfusion.XForms.ParallaxView.ParallaxScrollingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <ScrollX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScrollY>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanAnimate>k__BackingField;
    public double ScrollX { get; internal set; }
    public double ScrollY { get; internal set; }
    public bool CanAnimate { get; internal set; }
    public ParallaxScrollingEventArgs(double scrollX, double scrollY, bool canAnimate);
    [CompilerGeneratedAttribute]
public double get_ScrollX();
    [CompilerGeneratedAttribute]
internal void set_ScrollX(double value);
    [CompilerGeneratedAttribute]
public double get_ScrollY();
    [CompilerGeneratedAttribute]
internal void set_ScrollY(double value);
    [CompilerGeneratedAttribute]
public bool get_CanAnimate();
    [CompilerGeneratedAttribute]
internal void set_CanAnimate(bool value);
}
[ExtensionAttribute]
public static class Syncfusion.XForms.PlatformConfiguration.UWPSpecific.SfEffectsView : object {
    public static BindableProperty HoverEffectsProperty;
    private static SfEffectsView();
    public static SfEffects GetHoverEffects(BindableObject element);
    public static void SetHoverEffects(BindableObject element, SfEffects value);
    [ExtensionAttribute]
public static IPlatformElementConfiguration`2<Windows, SfEffectsView> SetHoverEffects(IPlatformElementConfiguration`2<Windows, SfEffectsView> config, SfEffects value);
}
[DesignTimeVisibleAttribute("True")]
public class Syncfusion.XForms.Shimmer.SfShimmer : ContentView {
    public static BindableProperty ContentProperty;
    public static BindableProperty CustomViewProperty;
    public static BindableProperty WaveDirectionProperty;
    public static BindableProperty TypeProperty;
    public static BindableProperty ColorProperty;
    public static BindableProperty WaveColorProperty;
    public static BindableProperty WaveWidthProperty;
    public static BindableProperty AnimationDurationProperty;
    public static BindableProperty IsActiveProperty;
    internal static BindableProperty PersonaStyleProperty;
    internal static BindableProperty ProfileStyleProperty;
    internal static BindableProperty ArticleStyleProperty;
    internal static BindableProperty FeedStyleProperty;
    internal static BindableProperty VideoStyleProperty;
    internal static BindableProperty ShoppingStyleProperty;
    private UInt32 fadeAnimationDuration;
    public View Content { get; public set; }
    public View CustomView { get; public set; }
    public WaveDirection WaveDirection { get; public set; }
    public ShimmerTypes Type { get; public set; }
    public Color Color { get; public set; }
    public Color WaveColor { get; public set; }
    public double WaveWidth { get; public set; }
    public double AnimationDuration { get; public set; }
    public bool IsActive { get; public set; }
    internal SfTemplateStyle PersonaStyle { get; internal set; }
    internal SfTemplateStyle ProfileStyle { get; internal set; }
    internal SfTemplateStyle ArticleStyle { get; internal set; }
    internal SfTemplateStyle VideoStyle { get; internal set; }
    internal SfTemplateStyle FeedStyle { get; internal set; }
    internal SfTemplateStyle ShoppingStyle { get; internal set; }
    private static SfShimmer();
    public View get_Content();
    public void set_Content(View value);
    public View get_CustomView();
    public void set_CustomView(View value);
    public WaveDirection get_WaveDirection();
    public void set_WaveDirection(WaveDirection value);
    public ShimmerTypes get_Type();
    public void set_Type(ShimmerTypes value);
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_WaveColor();
    public void set_WaveColor(Color value);
    public double get_WaveWidth();
    public void set_WaveWidth(double value);
    public double get_AnimationDuration();
    public void set_AnimationDuration(double value);
    public bool get_IsActive();
    public void set_IsActive(bool value);
    internal SfTemplateStyle get_PersonaStyle();
    internal void set_PersonaStyle(SfTemplateStyle value);
    internal SfTemplateStyle get_ProfileStyle();
    internal void set_ProfileStyle(SfTemplateStyle value);
    internal SfTemplateStyle get_ArticleStyle();
    internal void set_ArticleStyle(SfTemplateStyle value);
    internal SfTemplateStyle get_VideoStyle();
    internal void set_VideoStyle(SfTemplateStyle value);
    internal SfTemplateStyle get_FeedStyle();
    internal void set_FeedStyle(SfTemplateStyle value);
    internal SfTemplateStyle get_ShoppingStyle();
    internal void set_ShoppingStyle(SfTemplateStyle value);
    private sealed virtual override ResourceDictionary Syncfusion.XForms.Themes.IParentThemeElement.GetThemeDictionary();
    private sealed virtual override void Syncfusion.XForms.Themes.IThemeElement.OnControlThemeChanged(string oldTheme, string newTheme);
    private sealed virtual override void Syncfusion.XForms.Themes.IThemeElement.OnCommonThemeChanged(string oldTheme, string newTheme);
    private static void OnContentChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCustomViewChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnIsActivePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private void OnContentChanged();
    private void OnCustomViewChanged(object newValue);
    private void OnIsActivePropertyChanged();
    private void InitializeBuildInTemplateStyles();
}
[XamlFilePathAttribute("Theme\Resources\SfShimmerStyles.xaml")]
public class Syncfusion.XForms.Shimmer.SfShimmerStyles : ResourceDictionary {
    [GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
private void InitializeComponent();
}
internal class Syncfusion.XForms.Shimmer.SfTemplateStyle : BindableObject {
    internal static BindableProperty CircleRadiusProperty;
    internal static BindableProperty SquareSizeProperty;
    internal static BindableProperty WidthProperty;
    internal static BindableProperty HeightProperty;
    internal static BindableProperty LineSpacingProperty;
    internal static BindableProperty LineHeightProperty;
    internal double CircleRadius { get; internal set; }
    internal double Width { get; internal set; }
    internal double Height { get; internal set; }
    internal double LineSpacing { get; internal set; }
    internal double LineHeight { get; internal set; }
    internal double SquareSize { get; internal set; }
    private static SfTemplateStyle();
    internal double get_CircleRadius();
    internal void set_CircleRadius(double value);
    internal double get_Width();
    internal void set_Width(double value);
    internal double get_Height();
    internal void set_Height(double value);
    internal double get_LineSpacing();
    internal void set_LineSpacing(double value);
    internal double get_LineHeight();
    internal void set_LineHeight(double value);
    internal double get_SquareSize();
    internal void set_SquareSize(double value);
}
public enum Syncfusion.XForms.Shimmer.ShimmerTypes : Enum {
    public int value__;
    public static ShimmerTypes Persona;
    public static ShimmerTypes Profile;
    public static ShimmerTypes Article;
    public static ShimmerTypes Video;
    public static ShimmerTypes Feed;
    public static ShimmerTypes Shopping;
}
public class Syncfusion.XForms.Shimmer.ShimmerView : View {
    public static BindableProperty CornerRadiusProperty;
    public double CornerRadius { get; public set; }
    [EditorBrowsableAttribute("1")]
public Color BackgroundColor { get; internal set; }
    private static ShimmerView();
    public double get_CornerRadius();
    public void set_CornerRadius(double value);
    public Color get_BackgroundColor();
    internal void set_BackgroundColor(Color value);
    protected virtual SizeRequest OnMeasure(double widthConstraint, double heightConstraint);
}
public enum Syncfusion.XForms.Shimmer.WaveDirection : Enum {
    public int value__;
    public static WaveDirection Default;
    public static WaveDirection LeftToRight;
    public static WaveDirection TopToBottom;
    public static WaveDirection RightToLeft;
    public static WaveDirection BottomToTop;
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.TextInputLayout.AnimationHelper : object {
    [AsyncStateMachineAttribute("Syncfusion.XForms.TextInputLayout.AnimationHelper/<TranslationAnimateTo>d__0")]
[ExtensionAttribute]
internal static void TranslationAnimateTo(Label label, UInt32 duration, double x, double y, double scale, bool canAnimate, bool isRTL);
}
internal class Syncfusion.XForms.TextInputLayout.ClearButtonView : InputLayoutClearView {
}
public enum Syncfusion.XForms.TextInputLayout.ContainerType : Enum {
    public int value__;
    public static ContainerType Outlined;
    public static ContainerType Filled;
    public static ContainerType None;
}
internal class Syncfusion.XForms.TextInputLayout.DropDownToggleView : InputLayoutToggleView {
}
internal interface Syncfusion.XForms.TextInputLayout.IAnimateInNative {
    public abstract virtual void AnimateTo(Label label, double x, double y, int duration, double scale, bool isBeingAnimate, bool isRTL);
}
internal interface Syncfusion.XForms.TextInputLayout.IAutoComplete {
    public bool HasChangeCharacters { get; }
    public abstract virtual bool get_HasChangeCharacters();
}
internal interface Syncfusion.XForms.TextInputLayout.IComboBox {
    public bool HasChangeCharacters { get; }
    public abstract virtual bool get_HasChangeCharacters();
}
internal interface Syncfusion.XForms.TextInputLayout.IDropDownView {
    public abstract virtual void UpdateDropDownState(bool isToggleIconClicked);
    public abstract virtual void UpdateClearfocused(bool IsClearClicked);
    public abstract virtual void UpdateDropDownViewWidth(double width);
    public abstract virtual void UpdateDropDownViewMargin(Thickness thickness);
    public abstract virtual void UpdateTokenViewPadding(Thickness thickness);
    public abstract virtual void UpdateClearButtonColor(Color clearButtonColor);
    public abstract virtual void UpdateClearButtonPadding(Thickness thickness);
    public abstract virtual int GetSelectedItemsCount();
}
internal interface Syncfusion.XForms.TextInputLayout.IMaskedEdit {
    public bool HasMask { get; }
    public bool IsPassword { get; }
    public abstract virtual bool get_HasMask();
    public abstract virtual bool get_IsPassword();
}
internal class Syncfusion.XForms.TextInputLayout.InputLayoutBorder : View {
    private double thickness;
    private double cornerRadius;
    private Color color;
    private Color background;
    private string text;
    private double cutoutStartX;
    private bool shouldRefreshLayout;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private SfTextInputLayout <InputLayout>k__BackingField;
    public double Thickness { get; public set; }
    public double CornerRadius { get; public set; }
    public Color Color { get; public set; }
    public Color Background { get; public set; }
    public string Text { get; public set; }
    internal double CutoutStartX { get; internal set; }
    internal SfTextInputLayout InputLayout { get; internal set; }
    internal bool ShouldRefreshLayout { get; internal set; }
    internal InputLayoutBorder(SfTextInputLayout parent);
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(PropertyChangedEventHandler value);
    public double get_Thickness();
    public void set_Thickness(double value);
    public double get_CornerRadius();
    public void set_CornerRadius(double value);
    public Color get_Color();
    public void set_Color(Color value);
    public Color get_Background();
    public void set_Background(Color value);
    public string get_Text();
    public void set_Text(string value);
    internal double get_CutoutStartX();
    internal void set_CutoutStartX(double value);
    [CompilerGeneratedAttribute]
internal SfTextInputLayout get_InputLayout();
    [CompilerGeneratedAttribute]
internal void set_InputLayout(SfTextInputLayout value);
    internal bool get_ShouldRefreshLayout();
    internal void set_ShouldRefreshLayout(bool value);
    protected virtual void NotifyPropertyChanged(string propertyName);
}
public class Syncfusion.XForms.TextInputLayout.InputLayoutClearView : View {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private SfTextInputLayout <InputLayout>k__BackingField;
    public Color Color { get; public set; }
    internal SfTextInputLayout InputLayout { get; internal set; }
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
internal SfTextInputLayout get_InputLayout();
    [CompilerGeneratedAttribute]
internal void set_InputLayout(SfTextInputLayout value);
}
internal class Syncfusion.XForms.TextInputLayout.InputLayoutToggleView : View {
    public static BindableProperty ColorProperty;
    internal static BindableProperty IsCheckedProperty;
    [CompilerGeneratedAttribute]
private SfTextInputLayout <InputLayout>k__BackingField;
    public Color Color { get; public set; }
    internal bool IsChecked { get; internal set; }
    internal SfTextInputLayout InputLayout { get; internal set; }
    private static InputLayoutToggleView();
    public Color get_Color();
    public void set_Color(Color value);
    internal bool get_IsChecked();
    internal void set_IsChecked(bool value);
    [CompilerGeneratedAttribute]
internal SfTextInputLayout get_InputLayout();
    [CompilerGeneratedAttribute]
internal void set_InputLayout(SfTextInputLayout value);
}
public class Syncfusion.XForms.TextInputLayout.LabelStyle : BindableObject {
    public static BindableProperty FontSizeProperty;
    public static BindableProperty FontAttributesProperty;
    public static BindableProperty FontFamilyProperty;
    public static BindableProperty ColorProperty;
    [TypeConverterAttribute("Xamarin.Forms.FontSizeConverter")]
public double FontSize { get; public set; }
    public FontAttributes FontAttributes { get; public set; }
    public string FontFamily { get; public set; }
    public Color Color { get; public set; }
    private static LabelStyle();
    public double get_FontSize();
    public void set_FontSize(double value);
    public FontAttributes get_FontAttributes();
    public void set_FontAttributes(FontAttributes value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public Color get_Color();
    public void set_Color(Color value);
}
internal class Syncfusion.XForms.TextInputLayout.NamespaceDoc : object {
}
internal class Syncfusion.XForms.TextInputLayout.PasswordToggleView : InputLayoutToggleView {
}
internal class Syncfusion.XForms.TextInputLayout.SfBoxView : BoxView {
}
internal class Syncfusion.XForms.TextInputLayout.SfLabel : Label {
}
[DesignTimeVisibleAttribute("True")]
[ContentPropertyAttribute("InputView")]
public class Syncfusion.XForms.TextInputLayout.SfTextInputLayout : TemplatedView {
    public static BindableProperty ShowTrailingViewProperty;
    public static BindableProperty ShowLeadingViewProperty;
    public static BindableProperty ShowHintProperty;
    public static BindableProperty EnableHintAnimationProperty;
    public static BindableProperty ShowCharCountProperty;
    public static BindableProperty ShowHelperTextProperty;
    public static BindableProperty HasErrorProperty;
    public static BindableProperty EnableFloatingProperty;
    public static BindableProperty EnablePasswordVisibilityToggleProperty;
    internal static BindableProperty ShowDropDownButtonProperty;
    internal static BindableProperty ShowClearButtonProperty;
    internal static BindableProperty ClearButtonColorProperty;
    public static BindableProperty IsHintAlwaysFloatedProperty;
    public static BindableProperty ContainerBackgroundColorProperty;
    public static BindableProperty ErrorColorProperty;
    public static BindableProperty FocusedColorProperty;
    public static BindableProperty UnfocusedColorProperty;
    public static BindableProperty InputViewProperty;
    public static BindableProperty LeadingViewProperty;
    public static BindableProperty TrailingViewProperty;
    public static BindableProperty LeadingViewPositionProperty;
    public static BindableProperty TrailingViewPositionProperty;
    public static BindableProperty HintProperty;
    public static BindableProperty HelperTextProperty;
    public static BindableProperty ErrorTextProperty;
    public static BindableProperty ContainerTypeProperty;
    public static BindableProperty CharMaxLengthProperty;
    public static BindableProperty IsEnabledProperty;
    internal static BindablePropertyKey CurrentActiveColorKey;
    public static BindableProperty CurrentActiveColorProperty;
    public static BindableProperty ReserveSpaceForAssistiveLabelsProperty;
    public static BindableProperty OutlineCornerRadiusProperty;
    public static BindableProperty FocusedStrokeWidthProperty;
    public static BindableProperty UnfocusedStrokeWidthProperty;
    public static BindableProperty InputViewPaddingProperty;
    public static BindableProperty HintLabelStyleProperty;
    public static BindableProperty HelperLabelStyleProperty;
    public static BindableProperty ErrorLabelStyleProperty;
    public static BindableProperty CounterLabelStyleProperty;
    internal static int ICONSIZE;
    internal static double SCALINGRATIO;
    internal static BindableProperty IsRTLProperty;
    internal static BindableProperty IsHintFloatedForDropDownProperty;
    internal static BindableProperty HintColorProperty;
    internal static BindableProperty DisabledHintColorProperty;
    internal static BindableProperty FloatedHintFocusedColorProperty;
    internal static BindableProperty FloatedHintUnfocusedColorProperty;
    internal static BindableProperty FloatedHintErrorColorProperty;
    internal static BindableProperty FloatedHintDisabledColorProperty;
    internal static BindableProperty LineColorProperty;
    internal static BindableProperty FocusedLineColorProperty;
    internal static BindableProperty ErrorLineColorProperty;
    internal static BindableProperty FilledLineDisabledColorProperty;
    internal static BindableProperty OutlinedLineDisabledColorProperty;
    internal static BindableProperty CounterLabelColorProperty;
    internal static BindableProperty CounterLabelErrorColorProperty;
    internal static BindableProperty CounterLabelDisabledColorProperty;
    internal static BindableProperty ContainerBackgroundDisabledColorProperty;
    internal static BindableProperty HelperTextColorProperty;
    internal static BindableProperty HelperTextDisabledColorProperty;
    internal static BindableProperty ErrorTextColorProperty;
    internal static BindableProperty ErrorTextDisabledColorProperty;
    internal static BindableProperty PasswordToggleFocusedColorProperty;
    internal static BindableProperty PasswordToggleUnfocusedColorProperty;
    internal static BindableProperty PasswordToggleDisabledColorProperty;
    internal static BindableProperty PasswordToggleErrorColorProperty;
    internal static BindableProperty InputViewIsVisibleProperty;
    private static BindableProperty IsInputViewEnabledProperty;
    internal static double DefaultHintLabelFontSize;
    private static double defaultLabelFontSize;
    private Grid contentGrid;
    private int passwordToggleIconSize;
    private int clearButtonIconSize;
    private UInt32 animationDuration;
    private Color disabledFilledColor;
    private Color disabledOutlineColor;
    private Color enabledContainerDefaultBackgroundColor;
    private Color disabledContainerDefaultBackgroundColor;
    private int filledTopPadding;
    private int filledBottomPadding;
    private int noneBottomPadding;
    private int outlinedPadding;
    private double filledAndNoneDefaultCornerRadius;
    private Grid bottomGrid;
    private Label errorLabel;
    private Label helperLabel;
    private Label counterLabel;
    private BoxView baseLine;
    private InputLayoutBorder outlineBorder;
    private bool isFocused;
    private bool isIntialized;
    private bool inputViewIsComboBox;
    private bool inputViewIsAutoComplete;
    internal static double FLOATEDHINTREPOSITIONINGRATIO;
    private string dropDownText;
    [CompilerGeneratedAttribute]
private double <AssistiveLabelFontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AssistiveLabelHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EdgePadding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Label <HintLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private InputLayoutToggleView <InputLayoutToggleView>k__BackingField;
    [CompilerGeneratedAttribute]
private InputLayoutClearView <InputLayoutClearView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHintFloated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDropDownControl>k__BackingField;
    [CompilerGeneratedAttribute]
private SfEffectsView <EffectsView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisibleInternallyChanged>k__BackingField;
    [EditorBrowsableAttribute("1")]
public ControlTemplate ControlTemplate { get; internal set; }
    public bool ShowLeadingView { get; public set; }
    public bool ShowTrailingView { get; public set; }
    public bool ShowHint { get; public set; }
    public bool EnableHintAnimation { get; public set; }
    public bool ShowCharCount { get; public set; }
    public bool ShowHelperText { get; public set; }
    public bool HasError { get; public set; }
    public bool EnableFloating { get; public set; }
    public bool IsHintAlwaysFloated { get; public set; }
    public bool EnablePasswordVisibilityToggle { get; public set; }
    internal bool ShowDropDownButton { get; internal set; }
    internal bool ShowClearButton { get; internal set; }
    internal Color ClearButtonColor { get; internal set; }
    public Color ContainerBackgroundColor { get; public set; }
    public Color ErrorColor { get; public set; }
    public Color FocusedColor { get; public set; }
    public Color UnfocusedColor { get; public set; }
    public Color CurrentActiveColor { get; internal set; }
    public View InputView { get; public set; }
    public View LeadingView { get; public set; }
    public View TrailingView { get; public set; }
    public ViewPosition LeadingViewPosition { get; public set; }
    public ViewPosition TrailingViewPosition { get; public set; }
    public string Hint { get; public set; }
    public string HelperText { get; public set; }
    public string ErrorText { get; public set; }
    public ContainerType ContainerType { get; public set; }
    public int CharMaxLength { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool ReserveSpaceForAssistiveLabels { get; public set; }
    public double OutlineCornerRadius { get; public set; }
    public double FocusedStrokeWidth { get; public set; }
    public double UnfocusedStrokeWidth { get; public set; }
    public Thickness InputViewPadding { get; public set; }
    public LabelStyle HintLabelStyle { get; public set; }
    public LabelStyle HelperLabelStyle { get; public set; }
    public LabelStyle ErrorLabelStyle { get; public set; }
    public LabelStyle CounterLabelStyle { get; public set; }
    private bool IsInputViewEnabled { get; private set; }
    internal bool IsRTL { get; internal set; }
    internal bool IsHintFloatedForDropDown { get; internal set; }
    internal Color HintColor { get; internal set; }
    internal Color DisabledHintColor { get; internal set; }
    internal Color FloatedHintFocusedColor { get; internal set; }
    internal Color FloatedHintUnfocusedColor { get; internal set; }
    internal Color FloatedHintErrorColor { get; internal set; }
    internal Color FloatedHintDisabledColor { get; internal set; }
    internal Color LineColor { get; internal set; }
    internal Color FocusedLineColor { get; internal set; }
    internal Color ErrorLineColor { get; internal set; }
    internal Color FilledLineDisabledColor { get; internal set; }
    internal Color OutlinedLineDisabledColor { get; internal set; }
    internal Color CounterLabelColor { get; internal set; }
    internal Color CounterLabelErrorColor { get; internal set; }
    internal Color CounterLabelDisabledColor { get; internal set; }
    internal Color ContainerBackgroundDisabledColor { get; internal set; }
    internal Color HelperTextColor { get; internal set; }
    internal Color HelperTextDisabledColor { get; internal set; }
    internal Color ErrorTextColor { get; internal set; }
    internal Color ErrorTextDisabledColor { get; internal set; }
    internal Color PasswordToggleFocusedColor { get; internal set; }
    internal Color PasswordToggleUnfocusedColor { get; internal set; }
    internal Color PasswordToggleDisabledColor { get; internal set; }
    internal Color PasswordToggleErrorColor { get; internal set; }
    internal bool InputViewIsVisible { get; internal set; }
    internal bool IsOutlined { get; }
    internal double BaseLineMaxHeight { get; }
    internal double AssistiveLabelFontSize { get; }
    internal int AssistiveLabelHeight { get; }
    internal int EdgePadding { get; internal set; }
    internal string Text { get; private set; }
    internal Label HintLabel { get; internal set; }
    internal InputLayoutToggleView InputLayoutToggleView { get; internal set; }
    internal InputLayoutClearView InputLayoutClearView { get; internal set; }
    internal bool IsHintFloated { get; internal set; }
    internal bool IsDropDownControl { get; internal set; }
    internal bool IsHintVisible { get; }
    internal SfEffectsView EffectsView { get; internal set; }
    internal bool IsVisibleInternallyChanged { get; internal set; }
    private int TopPadding { get; }
    private int BottomPadding { get; }
    private bool IsHintFloatedExplicitly { get; }
    private static SfTextInputLayout();
    public ControlTemplate get_ControlTemplate();
    internal void set_ControlTemplate(ControlTemplate value);
    public bool get_ShowLeadingView();
    public void set_ShowLeadingView(bool value);
    public bool get_ShowTrailingView();
    public void set_ShowTrailingView(bool value);
    public bool get_ShowHint();
    public void set_ShowHint(bool value);
    public bool get_EnableHintAnimation();
    public void set_EnableHintAnimation(bool value);
    public bool get_ShowCharCount();
    public void set_ShowCharCount(bool value);
    public bool get_ShowHelperText();
    public void set_ShowHelperText(bool value);
    public bool get_HasError();
    public void set_HasError(bool value);
    public bool get_EnableFloating();
    public void set_EnableFloating(bool value);
    public bool get_IsHintAlwaysFloated();
    public void set_IsHintAlwaysFloated(bool value);
    public bool get_EnablePasswordVisibilityToggle();
    public void set_EnablePasswordVisibilityToggle(bool value);
    internal bool get_ShowDropDownButton();
    internal void set_ShowDropDownButton(bool value);
    internal bool get_ShowClearButton();
    internal void set_ShowClearButton(bool value);
    internal Color get_ClearButtonColor();
    internal void set_ClearButtonColor(Color value);
    public Color get_ContainerBackgroundColor();
    public void set_ContainerBackgroundColor(Color value);
    public Color get_ErrorColor();
    public void set_ErrorColor(Color value);
    public Color get_FocusedColor();
    public void set_FocusedColor(Color value);
    public Color get_UnfocusedColor();
    public void set_UnfocusedColor(Color value);
    public Color get_CurrentActiveColor();
    internal void set_CurrentActiveColor(Color value);
    public View get_InputView();
    public void set_InputView(View value);
    public View get_LeadingView();
    public void set_LeadingView(View value);
    public View get_TrailingView();
    public void set_TrailingView(View value);
    public ViewPosition get_LeadingViewPosition();
    public void set_LeadingViewPosition(ViewPosition value);
    public ViewPosition get_TrailingViewPosition();
    public void set_TrailingViewPosition(ViewPosition value);
    public string get_Hint();
    public void set_Hint(string value);
    public string get_HelperText();
    public void set_HelperText(string value);
    public string get_ErrorText();
    public void set_ErrorText(string value);
    public ContainerType get_ContainerType();
    public void set_ContainerType(ContainerType value);
    public int get_CharMaxLength();
    public void set_CharMaxLength(int value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_ReserveSpaceForAssistiveLabels();
    public void set_ReserveSpaceForAssistiveLabels(bool value);
    public double get_OutlineCornerRadius();
    public void set_OutlineCornerRadius(double value);
    public double get_FocusedStrokeWidth();
    public void set_FocusedStrokeWidth(double value);
    public double get_UnfocusedStrokeWidth();
    public void set_UnfocusedStrokeWidth(double value);
    public Thickness get_InputViewPadding();
    public void set_InputViewPadding(Thickness value);
    public LabelStyle get_HintLabelStyle();
    public void set_HintLabelStyle(LabelStyle value);
    public LabelStyle get_HelperLabelStyle();
    public void set_HelperLabelStyle(LabelStyle value);
    public LabelStyle get_ErrorLabelStyle();
    public void set_ErrorLabelStyle(LabelStyle value);
    public LabelStyle get_CounterLabelStyle();
    public void set_CounterLabelStyle(LabelStyle value);
    private bool get_IsInputViewEnabled();
    private void set_IsInputViewEnabled(bool value);
    internal bool get_IsRTL();
    internal void set_IsRTL(bool value);
    internal bool get_IsHintFloatedForDropDown();
    internal void set_IsHintFloatedForDropDown(bool value);
    internal Color get_HintColor();
    internal void set_HintColor(Color value);
    internal Color get_DisabledHintColor();
    internal void set_DisabledHintColor(Color value);
    internal Color get_FloatedHintFocusedColor();
    internal void set_FloatedHintFocusedColor(Color value);
    internal Color get_FloatedHintUnfocusedColor();
    internal void set_FloatedHintUnfocusedColor(Color value);
    internal Color get_FloatedHintErrorColor();
    internal void set_FloatedHintErrorColor(Color value);
    internal Color get_FloatedHintDisabledColor();
    internal void set_FloatedHintDisabledColor(Color value);
    internal Color get_LineColor();
    internal void set_LineColor(Color value);
    internal Color get_FocusedLineColor();
    internal void set_FocusedLineColor(Color value);
    internal Color get_ErrorLineColor();
    internal void set_ErrorLineColor(Color value);
    internal Color get_FilledLineDisabledColor();
    internal void set_FilledLineDisabledColor(Color value);
    internal Color get_OutlinedLineDisabledColor();
    internal void set_OutlinedLineDisabledColor(Color value);
    internal Color get_CounterLabelColor();
    internal void set_CounterLabelColor(Color value);
    internal Color get_CounterLabelErrorColor();
    internal void set_CounterLabelErrorColor(Color value);
    internal Color get_CounterLabelDisabledColor();
    internal void set_CounterLabelDisabledColor(Color value);
    internal Color get_ContainerBackgroundDisabledColor();
    internal void set_ContainerBackgroundDisabledColor(Color value);
    internal Color get_HelperTextColor();
    internal void set_HelperTextColor(Color value);
    internal Color get_HelperTextDisabledColor();
    internal void set_HelperTextDisabledColor(Color value);
    internal Color get_ErrorTextColor();
    internal void set_ErrorTextColor(Color value);
    internal Color get_ErrorTextDisabledColor();
    internal void set_ErrorTextDisabledColor(Color value);
    internal Color get_PasswordToggleFocusedColor();
    internal void set_PasswordToggleFocusedColor(Color value);
    internal Color get_PasswordToggleUnfocusedColor();
    internal void set_PasswordToggleUnfocusedColor(Color value);
    internal Color get_PasswordToggleDisabledColor();
    internal void set_PasswordToggleDisabledColor(Color value);
    internal Color get_PasswordToggleErrorColor();
    internal void set_PasswordToggleErrorColor(Color value);
    internal bool get_InputViewIsVisible();
    internal void set_InputViewIsVisible(bool value);
    internal bool get_IsOutlined();
    internal double get_BaseLineMaxHeight();
    [CompilerGeneratedAttribute]
internal double get_AssistiveLabelFontSize();
    [CompilerGeneratedAttribute]
internal int get_AssistiveLabelHeight();
    [CompilerGeneratedAttribute]
internal int get_EdgePadding();
    [CompilerGeneratedAttribute]
internal void set_EdgePadding(int value);
    [CompilerGeneratedAttribute]
internal string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
internal Label get_HintLabel();
    [CompilerGeneratedAttribute]
internal void set_HintLabel(Label value);
    [CompilerGeneratedAttribute]
internal InputLayoutToggleView get_InputLayoutToggleView();
    [CompilerGeneratedAttribute]
internal void set_InputLayoutToggleView(InputLayoutToggleView value);
    [CompilerGeneratedAttribute]
internal InputLayoutClearView get_InputLayoutClearView();
    [CompilerGeneratedAttribute]
internal void set_InputLayoutClearView(InputLayoutClearView value);
    [CompilerGeneratedAttribute]
internal bool get_IsHintFloated();
    [CompilerGeneratedAttribute]
internal void set_IsHintFloated(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsDropDownControl();
    [CompilerGeneratedAttribute]
internal void set_IsDropDownControl(bool value);
    internal bool get_IsHintVisible();
    [CompilerGeneratedAttribute]
internal SfEffectsView get_EffectsView();
    [CompilerGeneratedAttribute]
internal void set_EffectsView(SfEffectsView value);
    [CompilerGeneratedAttribute]
internal bool get_IsVisibleInternallyChanged();
    [CompilerGeneratedAttribute]
internal void set_IsVisibleInternallyChanged(bool value);
    private int get_TopPadding();
    private int get_BottomPadding();
    private bool get_IsHintFloatedExplicitly();
    private sealed virtual override ResourceDictionary Syncfusion.XForms.Themes.IParentThemeElement.GetThemeDictionary();
    private sealed virtual override void Syncfusion.XForms.Themes.IThemeElement.OnControlThemeChanged(string oldTheme, string newTheme);
    private sealed virtual override void Syncfusion.XForms.Themes.IThemeElement.OnCommonThemeChanged(string oldTheme, string newTheme);
    internal double GetLeftPadding();
    internal double GetTopPadding();
    internal double GetRightPadding();
    internal double GetRightMargin();
    internal double GetBottomPadding();
    internal void UpdateText(string newText, bool isDisposed);
    internal void AnimateTo(UInt32 duration, bool canAnimate, bool forceTranslateToTop);
    internal void OnFocusChanged(bool focused);
    private void ClearViewVisibiity(bool visible);
    internal void UpdateClearButton(bool focused);
    internal void InitializeDropDownView(bool isComboBox, bool isAutoComplete);
    internal double GetFloatedHintAdjustmentPosition();
    protected virtual void OnBindingContextChanged();
    protected virtual void OnParentSet();
    private static void OnShowLeadingViewPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnShowTrailingViewPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnInputViewEnabledPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnShowHintChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnShowCharCountChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnShowHelperTextChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnHasErrorChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnHintAlwaysFloatedChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnEnablePasswordVisibilityToggleChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnContainerBackgroundColorChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnErrorColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnUnfocusedColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFocusedColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnInputViewChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnLeadingViewChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnTrailingViewChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnLeadingViewPositionChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnTrailingViewPositionChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnHintChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnHelperTextChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnErrorTextChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnContainerTypeChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCharMaxLengthChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnEnabledPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnIsRTLPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnHintColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnLineColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCounterLabelColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnHelperTextColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnErrorTextColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnPasswordToggleColorPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnInputViewIsVisiblePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnReserveSpaceForAssistiveLabelsPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCornerRadiusPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnFocusedStrokeWidthPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnUnfocusedStrokeWidthPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnInputViewPaddingPropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnHintLabelStylePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static LabelStyle GetHintLabelStyleDefaultValue();
    private static void OnHelperLabelStylePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static LabelStyle GetHelperLabelStyleDefaultValue();
    private static void OnErrorLabelStylePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static LabelStyle GetErrorLabelStyleDefaultValue();
    private static void OnCounterLabelStylePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static LabelStyle GetCounterLabelStyleDefaultValue();
    private static void OnLabelStyleChanged(object oldValue, object newValue, PropertyChangedEventHandler propertyChangedEvent, Label label);
    private static void SetLabelStyleValue(PropertyChangedEventArgs e, Label label, LabelStyle textStlye);
    private static void SetLabelStyle(Label label, LabelStyle labelStyle);
    internal void UpdateToggleViewAccessibilityText();
    private void OnStrokeWidthPropertyChanged();
    private void UpdateSpaceAllocationForAssistiveLabels();
    private bool NeedSpaceForAssistiveLabels();
    private void UpdateCornerRadius();
    private void UpdateStrokeWidth();
    private void OnFocusedColorPropertyChanged(object newValue);
    private void OnUnfocusedColorPropertyChanged(object newValue);
    private void OnErrorColorPropertyChanged(object newValue);
    private void OnHintColorPropertyChanged();
    private void OnLineColorPropertyChanged();
    private void OnErrorTextColorPropertyChanged();
    private void OnCounterLabelColorPropertyChanged();
    private void OnHelperTextColorPropertyChanged();
    private void OnPasswordToggleColorPropertyChanged();
    private void UpdateContainerBackgroundColor();
    private void UpdateHintColor();
    private void OnMarginChanged();
    private Thickness GetDesiredHorizontalPadding();
    private void UpdateLineColor();
    private void UpdateErrorTextColor();
    private void UpdateCounterLabelColor();
    private void UpdateHelperTextColor();
    private void UpdateToggleViewColor();
    private void OnInputViewEnabledPropertyChanged();
    private void OnIsRTLPropertyChanged();
    private void OnEnabledPropertyChanged(bool isEnabled);
    private void OnShowHintChanged(object newValue);
    private void OnHintPropertyChanged();
    private void OnShowCharCountChanged(object newValue);
    private void OnShowHelperTextChanged();
    private void OnHasErrorChanged();
    private void OnHintAlwaysFloatedChanged();
    private void OnEnablePasswordVisibilityToggleChanged(object newValue);
    private void OnColorChanged();
    private void OnInputViewChanged(object oldValue, object newValue);
    private void OnInputViewSizeChanged(object sender, EventArgs e);
    private void OnLeadingViewChanged(object oldValue, object newValue);
    private void OnTrailingViewChanged(object oldValue, object newValue);
    private void OnLeadingViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnLeadingViewPositionChanged();
    private void OnTrailingViewPositionChanged();
    private void OnHintChanged(object newValue);
    private void OnContainerTypeChanged(object newValue);
    private void UpdateCharLength();
    private void DefineRowsAndColumns();
    private double GetLayoutHeight();
    private void UpdateGridRowHeight(int rowId, int height);
    private void UpdateGridColumnWidth(int columnId, int width);
    private double GetToggleIconSize();
    private double GetClearButtonIconSize();
    private void UpdateToggleIconSize();
    private void UpdateClearButtonIconSize();
    private void Initialize();
    private void InitializeAssistiveLabels();
    private void InitializeLabelStyles();
    private void InitializeToggleView();
    private void SetBinding();
    private void BindPasswordToggleViewProperty();
    private void BindIsInputViewEnabledProperty();
    private void BindIsInputViewVisibleProperty();
    private void BindIsEnabledToggleViewProperty();
    private void RemovePasswordToggleView();
    private void UpdateToggleViewPosition();
    private void UpdateClearButtonViewPosition();
    private void UpdateErrorVisibility();
    [AsyncStateMachineAttribute("Syncfusion.XForms.TextInputLayout.SfTextInputLayout/<AnimateAssistiveLabelTo>d__479")]
private void AnimateAssistiveLabelTo(Label label);
    private void OnSizeChanged(object sender, EventArgs e);
    private void UpdateAccessibility();
    private void AccessibilityToTextInputLayoutUIElements();
    private void SetAutomationProperties();
    private void ResetAutomationProperties();
    private bool CanUpdateAutomationProperties();
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private bool ShouldApplyErrorColor();
    private void UpdateColor(bool allowMarginUpdate);
    private void UpdateViewMargin();
    private void UpdateInputViewMargin(int topMargin, bool isNoneType);
    private void AnimateHintTo(UInt32 duration, bool canAnimate, bool forceTranslateToTop);
    [AsyncStateMachineAttribute("Syncfusion.XForms.TextInputLayout.SfTextInputLayout/<AnimateInputViewTo>d__492")]
private void AnimateInputViewTo(UInt32 duration, bool canAnimate, bool hintFloated);
    private void UpdateOutlineBorderText();
    private void OnHintLabelStylePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnHelperLabelStylePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnErrorLabelStylePropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnCounterLabelStylePropertyChanged(object sender, PropertyChangedEventArgs e);
    private static void UpdateLineWidth(View view, int column, int columnSpan);
    private void UpdateViewPositions();
    private void AddLeadAndTrailView(int viewIndex, object oldValue, object newValue);
    private static void UpdateLeadingTrialingViewHeight(View view);
    private void UpdateIconPadding();
    private void UpdateEdgePadding();
    private void UpdateDropDownViewWidth();
    private void UpdateDropDownViewMargin();
    private void UpdateTokenViewPadding();
    private void UpdateClearButtonPadding();
    private void UpdateClearButtonColor();
    [CompilerGeneratedAttribute]
private void <OnIsRTLPropertyChanged>b__438_0();
    [CompilerGeneratedAttribute]
private void <OnHintPropertyChanged>b__441_0();
    [CompilerGeneratedAttribute]
private void <OnHintPropertyChanged>b__441_1();
    [CompilerGeneratedAttribute]
private void <OnContainerTypeChanged>b__456_0();
    [CompilerGeneratedAttribute]
private void <AnimateHintTo>b__491_0(double a);
    [CompilerGeneratedAttribute]
private void <AnimateHintTo>b__491_1(double a);
}
[XamlFilePathAttribute("Theme\Resources\SfTextInputLayoutStyles.xaml")]
public class Syncfusion.XForms.TextInputLayout.SfTextInputLayoutStyles : ResourceDictionary {
    [GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
private void InitializeComponent();
}
public class Syncfusion.XForms.TextInputLayout.TextInputCounterLabel : Label {
}
public class Syncfusion.XForms.TextInputLayout.TextInputErrorLabel : Label {
}
public class Syncfusion.XForms.TextInputLayout.TextInputHelperLabel : Label {
}
public class Syncfusion.XForms.TextInputLayout.TextInputHintLabel : Label {
}
public static class Syncfusion.XForms.TextInputLayout.TextInputLayoutResourceManager : object {
    [CompilerGeneratedAttribute]
private static ResourceManager <Manager>k__BackingField;
    public static ResourceManager Manager { get; public set; }
    [CompilerGeneratedAttribute]
public static ResourceManager get_Manager();
    [CompilerGeneratedAttribute]
public static void set_Manager(ResourceManager value);
}
internal static class Syncfusion.XForms.TextInputLayout.TextInputLayoutResources : object {
    internal static string PasswordToggleVisibleIconAccessibilityText { get; }
    internal static string PasswordToggleCollapsedIconAccessibilityText { get; }
    internal static string DropDownViewAccessibilityText { get; }
    internal static CultureInfo Culture { get; }
    internal static string get_PasswordToggleVisibleIconAccessibilityText();
    internal static string get_PasswordToggleCollapsedIconAccessibilityText();
    internal static string get_DropDownViewAccessibilityText();
    internal static CultureInfo get_Culture();
    internal static string GetString(string key, string actualText);
}
public enum Syncfusion.XForms.TextInputLayout.ViewPosition : Enum {
    public int value__;
    public static ViewPosition Inside;
    public static ViewPosition Outside;
}
[XamlFilePathAttribute("Theme\Resources\DarkTheme.xaml")]
public class Syncfusion.XForms.Themes.DarkTheme : ResourceDictionary {
    [GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
private void InitializeComponent();
}
internal interface Syncfusion.XForms.Themes.IParentThemeElement {
    public abstract virtual ResourceDictionary GetThemeDictionary();
}
internal interface Syncfusion.XForms.Themes.IThemeElement {
    public abstract virtual void OnControlThemeChanged(string oldTheme, string newTheme);
    public abstract virtual void OnCommonThemeChanged(string oldTheme, string newTheme);
}
[XamlFilePathAttribute("Theme\Resources\LightTheme.xaml")]
public class Syncfusion.XForms.Themes.LightTheme : ResourceDictionary {
    [GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
private void InitializeComponent();
}
[ComVisibleAttribute("False")]
public class Syncfusion.XForms.Themes.SfChartColors : List`1<Color> {
}
[XamlFilePathAttribute("Theme\Resources\SyncfusionThemeDictionary.xaml")]
public class Syncfusion.XForms.Themes.SyncfusionThemeDictionary : ResourceDictionary {
    [GeneratedCodeAttribute("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
private void InitializeComponent();
}
internal static class Syncfusion.XForms.Themes.ThemeElement : object {
    public static BindableProperty CommonThemeProperty;
    public static BindableProperty ControlThemeProperty;
    public static BindableProperty PrimaryColorProperty;
    public static BindableProperty PrimaryLightColorProperty;
    public static BindableProperty PrimaryDarkColorProperty;
    public static BindableProperty PrimaryForegroundColorProperty;
    public static BindableProperty PrimaryLightForegroundColorProperty;
    public static BindableProperty PrimaryDarkForegroundColorProperty;
    public static BindableProperty SuccessColorProperty;
    public static BindableProperty ErrorColorProperty;
    public static BindableProperty WarningColorProperty;
    public static BindableProperty InfoColorProperty;
    private static Dictionary`2<string, WeakReference`1<ResourceDictionary>> ControlThemeCache;
    private static List`1<WeakReference`1<ResourceDictionary>> StyleTargetDictionaries;
    private static BindableProperty controlKeyProperty;
    private static BindableProperty implicitStyleProperty;
    private static Dictionary`2<ResourceDictionary, List`1<ResourceDictionary>> pendingDictionariesToMerge;
    private static bool isScheduled;
    private static ThemeElement();
    internal static void InitializeThemeResources(Element element, string controlKey);
    internal static void AddStyleDictionary(ResourceDictionary resourceDictionary);
    private static void MergePendingDictionaries();
    private static void OnImplicitStyleChanged(BindableObject bindable, object oldValue, object newValue);
    private static void OnCommonThemePropertyChanged(BindableObject bindable, object oldValue, object newValue);
    private static void MergeThemeDictionary(string key, ResourceDictionary themeDictionary);
    private static bool TryGetThemeDictionary(VisualElement element, ResourceDictionary& resourceDictionary);
    private static void OnControlThemeChanged(BindableObject bindable, object oldValue, object newValue);
}
