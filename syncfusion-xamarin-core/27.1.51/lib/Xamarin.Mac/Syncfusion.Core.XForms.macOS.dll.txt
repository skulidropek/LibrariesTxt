public static class Syncfusion.XForms.macOS.Core.Core : object {
}
public class Syncfusion.XForms.MacOS.Core.SfCellView : SfView {
    private SfCollectionViewCell _collectionViewCell;
    public SfCellView(SfCollectionViewCell collectionViewCell);
    public virtual void Layout();
    public virtual void DrawRect(CGRect dirtyRect);
    internal void InvokeBaseDraw(CGRect dirtyRect);
    internal void InvokeBaseLayout();
}
public class Syncfusion.XForms.MacOS.Core.SfCollectionView : NSScrollView {
    private NSView topView;
    private NSCollectionView collectionView;
    private INSCollectionViewDataSource dataSource;
    private INSCollectionViewDelegate _delegate;
    private NSCollectionViewLayout collectionViewLayout;
    private bool selectable;
    private bool allowsMultipleSelection;
    private CGPoint contentOffset;
    [EditorBrowsableAttribute("1")]
public nfloat Alpha { get; public set; }
    public CGPoint Center { get; }
    public bool WantsDefaultClipping { get; }
    public bool IsFlipped { get; }
    public NSColor BackgroundColor { get; public set; }
    public NSCollectionView CollectionView { get; internal set; }
    public INSCollectionViewDataSource DataSource { get; public set; }
    public INSCollectionViewDelegate Delegate { get; public set; }
    public NSCollectionViewLayout CollectionViewLayout { get; public set; }
    public bool Selectable { get; public set; }
    public bool AllowsMultipleSelection { get; public set; }
    public CGPoint ContentOffset { get; public set; }
    [EditorBrowsableAttribute("1")]
public NSEdgeInsets ContentInset { get; public set; }
    [EditorBrowsableAttribute("1")]
public NSCollectionViewItem[] VisibleCells { get; }
    public SfCollectionView(CGRect frame, NSCollectionViewLayout layout);
    public SfCollectionView(CGRect frame);
    public nfloat get_Alpha();
    public void set_Alpha(nfloat value);
    public CGPoint get_Center();
    public virtual bool get_WantsDefaultClipping();
    public virtual bool get_IsFlipped();
    public virtual NSColor get_BackgroundColor();
    public virtual void set_BackgroundColor(NSColor value);
    public NSCollectionView get_CollectionView();
    internal void set_CollectionView(NSCollectionView value);
    public INSCollectionViewDataSource get_DataSource();
    public void set_DataSource(INSCollectionViewDataSource value);
    public INSCollectionViewDelegate get_Delegate();
    public void set_Delegate(INSCollectionViewDelegate value);
    public NSCollectionViewLayout get_CollectionViewLayout();
    public void set_CollectionViewLayout(NSCollectionViewLayout value);
    public bool get_Selectable();
    public void set_Selectable(bool value);
    public bool get_AllowsMultipleSelection();
    public void set_AllowsMultipleSelection(bool value);
    public CGPoint get_ContentOffset();
    public void set_ContentOffset(CGPoint value);
    public NSEdgeInsets get_ContentInset();
    public void set_ContentInset(NSEdgeInsets value);
    public NSCollectionViewItem[] get_VisibleCells();
    public void SetNeedsDisplay();
    public void SetNeedsLayout();
    public CGPoint GetCenter();
    public virtual void BringSubviewToFront(NSView view);
    public virtual void WillRemoveSubview(NSView subview);
    public virtual void InsertSubview(NSView insertView, int index);
    public virtual void LayoutSubviews();
    public virtual void Draw(CGRect rect);
    public virtual void WillMoveToSuperview(NSView newsuper);
    public virtual void Layout();
    public virtual void DrawRect(CGRect dirtyRect);
    public virtual void ViewWillMoveToSuperview(NSView newSuperview);
    public virtual void WillMoveToWindow(NSWindow newWindow);
    public virtual void ViewWillMoveToWindow(NSWindow newWindow);
    public bool IsDescendantOfView(NSView aView);
    public virtual void TouchesBegan(NSSet touches, NSEvent theEvent);
    public virtual void TouchesMoved(NSSet touches, NSEvent theEvent);
    public virtual void TouchesCancelled(NSSet touches, NSEvent theEvent);
    public virtual void TouchesEnded(NSSet touches, NSEvent theEvent);
    public virtual void TouchesBeganWithEvent(NSEvent theEvent);
    public virtual void TouchesMovedWithEvent(NSEvent theEvent);
    public virtual void TouchesCancelledWithEvent(NSEvent theEvent);
    public virtual void TouchesEndedWithEvent(NSEvent theEvent);
    public void RegisterClassForCell(Type itemClass, string identifier);
    public void RegisterNibForCell(NSNib nib, string identifier);
    public NSCollectionViewItem DequeueReusableCell(string identifier, NSIndexPath indexPath);
    [AsyncStateMachineAttribute("Syncfusion.XForms.MacOS.Core.SfCollectionView/<ReloadData>d__74")]
public void ReloadData();
    public NSCollectionViewItem CellForItem(NSIndexPath indexPath);
    public NSIndexPath IndexPathForCell(NSCollectionViewItem item);
    public NSIndexPath IndexPathForItemAtPoint(CGPoint point);
    public void InsertItems(NSIndexPath[] indexPaths);
    public void DeleteItems(NSIndexPath[] indexPaths);
    public void MoveItem(NSIndexPath indexPath, NSIndexPath newIndexPath);
    public void ScrollToItem(NSIndexPath indexPath, NSCollectionViewScrollPosition scrollPosition, bool animated);
    public void ScrollRectToVisible(CGRect rect, bool animated);
    public void PerformBatchUpdates(Action updates, Action`1<bool> completionHandler);
}
public class Syncfusion.XForms.MacOS.Core.SfCollectionViewCell : NSCollectionViewItem {
    private SfView backgroundView;
    [CompilerGeneratedAttribute]
private SfView <ContentView>k__BackingField;
    private SfView selectedBackgroundView;
    public SfView BackgroundView { get; public set; }
    public SfView ContentView { get; private set; }
    public SfView SelectedBackgroundView { get; public set; }
    public nfloat Alpha { get; public set; }
    public NSColor BackgroundColor { get; public set; }
    public CALayer Layer { get; public set; }
    public bool Opaque { get; }
    public CGPoint Center { get; }
    public CGRect Bounds { get; public set; }
    public CGRect Frame { get; public set; }
    public SfCollectionViewCell(IntPtr intptr);
    public SfCollectionViewCell(NSCoder coder);
    public SfCollectionViewCell(CGRect rect);
    public SfView get_BackgroundView();
    public void set_BackgroundView(SfView value);
    [CompilerGeneratedAttribute]
public SfView get_ContentView();
    [CompilerGeneratedAttribute]
private void set_ContentView(SfView value);
    public SfView get_SelectedBackgroundView();
    public void set_SelectedBackgroundView(SfView value);
    public nfloat get_Alpha();
    public void set_Alpha(nfloat value);
    public NSColor get_BackgroundColor();
    public void set_BackgroundColor(NSColor value);
    public CALayer get_Layer();
    public void set_Layer(CALayer value);
    public bool get_Opaque();
    public CGPoint get_Center();
    public CGRect get_Bounds();
    public void set_Bounds(CGRect value);
    public CGRect get_Frame();
    public void set_Frame(CGRect value);
    public virtual void LayoutSubviews();
    public virtual void Draw(CGRect rect);
    public virtual void AddSubview(NSView view);
    public virtual void InsertSubview(NSView insertView, int index);
    public virtual void AddGestureRecognizer(NSGestureRecognizer recognizer);
    public virtual void RemoveFromSuperview();
    public void SetNeedsDisplay();
    public void SetNeedsLayout();
    private void Initialize();
}
public class Syncfusion.XForms.MacOS.Core.SfCollectionViewDataSource : NSCollectionViewDataSource {
    public virtual NSCollectionViewItem GetItem(NSCollectionView collectionView, NSIndexPath indexPath);
    public virtual nint GetNumberofItems(NSCollectionView collectionView, nint section);
    public virtual nint GetNumberOfSections(NSCollectionView collectionView);
    public virtual NSView GetView(NSCollectionView collectionView, NSString kind, NSIndexPath indexPath);
    public virtual NSCollectionViewItem GetCell(NSCollectionView collectionView, NSIndexPath indexPath);
    public virtual nint GetItemsCount(NSCollectionView collectionView, nint section);
    public virtual nint NumberOfSections(NSCollectionView collectionView);
    public virtual NSView GetViewForSupplementaryElement(NSCollectionView collectionView, NSString elementKind, NSIndexPath indexPath);
}
public class Syncfusion.XForms.MacOS.Core.SfCollectionViewDelegateFlowLayout : NSCollectionViewDelegateFlowLayout {
    public virtual CGSize SizeForItem(NSCollectionView collectionView, NSCollectionViewLayout collectionViewLayout, NSIndexPath indexPath);
    public virtual NSEdgeInsets InsetForSection(NSCollectionView collectionView, NSCollectionViewLayout collectionViewLayout, nint section);
    public virtual nfloat MinimumLineSpacing(NSCollectionView collectionView, NSCollectionViewLayout collectionViewLayout, nint section);
    public virtual nfloat MinimumInteritemSpacingForSection(NSCollectionView collectionView, NSCollectionViewLayout collectionViewLayout, nint section);
    public virtual void ItemsSelected(NSCollectionView collectionView, NSSet indexPaths);
    public virtual void ItemsDeselected(NSCollectionView collectionView, NSSet indexPaths);
    public virtual NSSet ShouldSelectItems(NSCollectionView collectionView, NSSet indexPaths);
    public virtual NSSet ShouldDeselectItems(NSCollectionView collectionView, NSSet indexPaths);
    public virtual void ItemsChanged(NSCollectionView collectionView, NSSet indexPaths, NSCollectionViewItemHighlightState highlightState);
    public virtual CGSize GetSizeForItem(NSCollectionView collectionView, NSCollectionViewLayout collectionViewLayout, NSIndexPath indexPath);
    public virtual NSEdgeInsets GetInsetForSection(NSCollectionView collectionView, NSCollectionViewLayout collectionViewLayout, nint section);
    public virtual nfloat GetMinimumLineSpacingForSection(NSCollectionView collectionView, NSCollectionViewLayout collectionViewLayout, nint section);
    public virtual nfloat GetMinimumInteritemSpacingForSection(NSCollectionView collectionView, NSCollectionViewLayout collectionViewLayout, nint section);
    public virtual void ItemSelected(NSCollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemDeselected(NSCollectionView collectionView, NSIndexPath indexPath);
    public virtual bool ShouldDeselectItem(NSCollectionView collectionView, NSIndexPath indexPath);
    public virtual bool ShouldSelectItem(NSCollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemHighlighted(NSCollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemUnhighlighted(NSCollectionView collectionView, NSIndexPath indexPath);
}
public class Syncfusion.XForms.MacOS.Core.SfCollectionViewFlowLayout : NSCollectionViewFlowLayout {
    public virtual bool ShouldInvalidateLayoutForBoundsChange(CGRect newBounds);
    public virtual NSCollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect(CGRect rect);
    public virtual NSCollectionViewLayoutAttributes LayoutAttributesForItem(NSIndexPath indexPath);
    public virtual bool ShouldInvalidateLayout(CGRect newBounds);
    public virtual NSCollectionViewLayoutAttributes[] GetLayoutAttributesForElements(CGRect rect);
    public virtual NSCollectionViewLayoutAttributes GetLayoutAttributesForItem(NSIndexPath indexPath);
}
public class Syncfusion.XForms.MacOS.Core.SfColor : NSColor {
    public SfColor(IntPtr handle);
    public static NSColor FromRGB(nfloat r, nfloat g, nfloat b);
    public static NSColor FromRGBA(nfloat r, nfloat g, nfloat b, nfloat a);
    public static NSColor FromHSB(nfloat hue, nfloat saturation, nfloat brightness);
    public static NSColor FromHSBA(nfloat hue, nfloat saturation, nfloat brightness, nfloat alpha);
}
public class Syncfusion.XForms.MacOS.Core.SfGraphics : NSGraphicsContext {
    private static NSImage currentContextImage;
    public static void BeginImageContextWithOptions(CGSize size, bool opaque, nfloat scale);
    public static CGContext GetCurrentContext();
    public static void PushContext(CGContext context);
    public static void PopContext();
    public static NSImage GetImageFromCurrentImageContext();
    public static void EndImageContext();
}
public class Syncfusion.XForms.MacOS.Core.SfImage : NSImage {
    public SfImage(IntPtr handle);
    public SfImage(CGSize aSize);
    public SfImage(NSData data);
    public SfImage(string fileName, bool lazy);
    public SfImage(CGImage cgImage, CGSize size);
    public SfImage(NSPasteboard pasteboard);
    public SfImage(NSUrl url);
    public SfImage(string fileName);
    public SfImage(NSData data, bool ignoresOrientation);
    public static NSImage ImageNamed(string name);
    public static NSImage ImageNamed(NSImageName name);
}
public class Syncfusion.XForms.MacOS.Core.SfImageView : NSImageView {
    private NSView topView;
    private NSColor backgroundColor;
    public NSColor BackgroundColor { get; public set; }
    public bool WantsDefaultClipping { get; }
    public bool IsFlipped { get; }
    public CGPoint Center { get; }
    [EditorBrowsableAttribute("1")]
public nfloat Alpha { get; public set; }
    public SfImageView(IntPtr handle);
    public SfImageView(NSImage image);
    public SfImageView(CGRect frameRect);
    public NSColor get_BackgroundColor();
    public void set_BackgroundColor(NSColor value);
    public virtual bool get_WantsDefaultClipping();
    public virtual bool get_IsFlipped();
    public CGPoint get_Center();
    public nfloat get_Alpha();
    public void set_Alpha(nfloat value);
    private void Initialize();
    public void SetNeedsDisplay();
    public void SetNeedsLayout();
    public CGPoint GetCenter();
    public virtual void BringSubviewToFront(NSView view);
    public virtual void WillRemoveSubview(NSView subview);
    public virtual void InsertSubview(NSView insertView, int index);
    public virtual void LayoutSubviews();
    public virtual void Draw(CGRect rect);
    public virtual void WillMoveToSuperview(NSView newsuper);
    public virtual void Layout();
    public virtual void DrawRect(CGRect dirtyRect);
    public virtual void ViewWillMoveToSuperview(NSView newSuperview);
    public bool IsDescendantOfView(NSView aView);
    public virtual void WillMoveToWindow(NSWindow newWindow);
    public virtual void ViewWillMoveToWindow(NSWindow newWindow);
    public virtual void TouchesBegan(NSSet touches, NSEvent theEvent);
    public virtual void TouchesMoved(NSSet touches, NSEvent theEvent);
    public virtual void TouchesCancelled(NSSet touches, NSEvent theEvent);
    public virtual void TouchesEnded(NSSet touches, NSEvent theEvent);
    public virtual void TouchesBeganWithEvent(NSEvent theEvent);
    public virtual void TouchesMovedWithEvent(NSEvent theEvent);
    public virtual void TouchesCancelledWithEvent(NSEvent theEvent);
    public virtual void TouchesEndedWithEvent(NSEvent theEvent);
}
public class Syncfusion.XForms.MacOS.Core.SfIndexPath : NSIndexPath {
    public static NSIndexPath FromRowSection(nint row, nint section);
}
public class Syncfusion.XForms.MacOS.Core.SfLabel : NSTextField {
    private NSView topView;
    [EditorBrowsableAttribute("1")]
public nint Lines { get; public set; }
    [EditorBrowsableAttribute("1")]
public NSTextAlignment TextAlignment { get; public set; }
    [EditorBrowsableAttribute("1")]
public string Text { get; public set; }
    [EditorBrowsableAttribute("1")]
public NSAttributedString AttributedText { get; public set; }
    [EditorBrowsableAttribute("1")]
public nfloat Alpha { get; public set; }
    public CGPoint Center { get; }
    public bool WantsDefaultClipping { get; }
    public bool IsFlipped { get; }
    public SfLabel(IntPtr handle);
    public SfLabel(CGRect frameRect);
    public nint get_Lines();
    public void set_Lines(nint value);
    public NSTextAlignment get_TextAlignment();
    public void set_TextAlignment(NSTextAlignment value);
    public string get_Text();
    public void set_Text(string value);
    public NSAttributedString get_AttributedText();
    public void set_AttributedText(NSAttributedString value);
    public nfloat get_Alpha();
    public void set_Alpha(nfloat value);
    public CGPoint get_Center();
    public virtual bool get_WantsDefaultClipping();
    public virtual bool get_IsFlipped();
    private void Initialize();
    public void SetNeedsDisplay();
    public void SetNeedsLayout();
    public CGPoint GetCenter();
    public virtual void BringSubviewToFront(NSView view);
    public virtual void WillRemoveSubview(NSView subview);
    public virtual void InsertSubview(NSView insertView, int index);
    public virtual void LayoutSubviews();
    public virtual void Draw(CGRect rect);
    public virtual void WillMoveToSuperview(NSView newsuper);
    public virtual void Layout();
    public virtual void DrawRect(CGRect dirtyRect);
    public virtual void ViewWillMoveToSuperview(NSView newSuperview);
    public virtual void WillMoveToWindow(NSWindow newWindow);
    public virtual void ViewWillMoveToWindow(NSWindow newWindow);
    public bool IsDescendantOfView(NSView aView);
    public virtual void TouchesBegan(NSSet touches, NSEvent theEvent);
    public virtual void TouchesMoved(NSSet touches, NSEvent theEvent);
    public virtual void TouchesCancelled(NSSet touches, NSEvent theEvent);
    public virtual void TouchesEnded(NSSet touches, NSEvent theEvent);
    public virtual void TouchesBeganWithEvent(NSEvent theEvent);
    public virtual void TouchesMovedWithEvent(NSEvent theEvent);
    public virtual void TouchesCancelledWithEvent(NSEvent theEvent);
    public virtual void TouchesEndedWithEvent(NSEvent theEvent);
}
public class Syncfusion.XForms.MacOS.Core.SfLongPressGestureRecognizer : NSPressGestureRecognizer {
    private Action _action;
    public SfLongPressGestureRecognizer(Action action);
    public SfLongPressGestureRecognizer(NSObject target, Selector action);
    [ExportAttribute("handlePressGesture:")]
private void HandlePressGesture(NSGestureRecognizer recognizer);
    public void AddTarget(Action action);
    protected virtual void Dispose(bool disposing);
}
public class Syncfusion.XForms.MacOS.Core.SfPanGestureRecognizer : NSPanGestureRecognizer {
    private Action _action;
    public SfPanGestureRecognizer(Action action);
    public SfPanGestureRecognizer(NSObject target, Selector action);
    [ExportAttribute("handlePanGesture:")]
private void HandlePanGesture(NSGestureRecognizer recognizer);
    public void AddTarget(Action action);
    protected virtual void Dispose(bool disposing);
}
public class Syncfusion.XForms.MacOS.Core.SfPinchGestureRecognizer : NSMagnificationGestureRecognizer {
    private Action _action;
    [EditorBrowsableAttribute("1")]
public nfloat Scale { get; public set; }
    public SfPinchGestureRecognizer(Action action);
    public SfPinchGestureRecognizer(NSObject target, Selector action);
    public nfloat get_Scale();
    public void set_Scale(nfloat value);
    [ExportAttribute("handlePinchGesture:")]
private void HandlePinchGesture(NSGestureRecognizer recognizer);
    public void AddTarget(Action action);
    protected virtual void Dispose(bool disposing);
}
public class Syncfusion.XForms.MacOS.Core.SfScrollView : NSScrollView {
    private NSView topView;
    [EditorBrowsableAttribute("1")]
public nfloat Alpha { get; public set; }
    public CGPoint Center { get; }
    public bool WantsDefaultClipping { get; }
    public bool IsFlipped { get; }
    public SfScrollView(IntPtr handle);
    public SfScrollView(CGRect frameRect);
    public nfloat get_Alpha();
    public void set_Alpha(nfloat value);
    public CGPoint get_Center();
    public virtual bool get_WantsDefaultClipping();
    public virtual bool get_IsFlipped();
    public void SetNeedsDisplay();
    public void SetNeedsLayout();
    public CGPoint GetCenter();
    public virtual void BringSubviewToFront(NSView view);
    public virtual void WillRemoveSubview(NSView subview);
    public virtual void InsertSubview(NSView insertView, int index);
    public virtual void LayoutSubviews();
    public virtual void Draw(CGRect rect);
    public virtual void WillMoveToSuperview(NSView newsuper);
    public virtual void Layout();
    public virtual void DrawRect(CGRect dirtyRect);
    public virtual void ViewWillMoveToSuperview(NSView newSuperview);
    public virtual void WillMoveToWindow(NSWindow newWindow);
    public virtual void ViewWillMoveToWindow(NSWindow newWindow);
    public bool IsDescendantOfView(NSView aView);
    public virtual void TouchesBegan(NSSet touches, NSEvent theEvent);
    public virtual void TouchesMoved(NSSet touches, NSEvent theEvent);
    public virtual void TouchesCancelled(NSSet touches, NSEvent theEvent);
    public virtual void TouchesEnded(NSSet touches, NSEvent theEvent);
    public virtual void TouchesBeganWithEvent(NSEvent theEvent);
    public virtual void TouchesMovedWithEvent(NSEvent theEvent);
    public virtual void TouchesCancelledWithEvent(NSEvent theEvent);
    public virtual void TouchesEndedWithEvent(NSEvent theEvent);
    public virtual void ScrollWheel(NSEvent theEvent);
}
public class Syncfusion.XForms.MacOS.Core.SfTapGestureRecognizer : NSClickGestureRecognizer {
    private Action _action;
    [EditorBrowsableAttribute("1")]
public nuint NumberOfTapsRequired { get; public set; }
    public SfTapGestureRecognizer(Action action);
    public SfTapGestureRecognizer(NSObject target, Selector action);
    public nuint get_NumberOfTapsRequired();
    public void set_NumberOfTapsRequired(nuint value);
    [ExportAttribute("handleTapGesture:")]
private void HandleTapGesture(NSGestureRecognizer recognizer);
    public void AddTarget(Action action);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Syncfusion.XForms.MacOS.Core.SfUtils : object {
    [ExtensionAttribute]
public static CGSize StringSize(string str, NSFont font);
    [ExtensionAttribute]
public static CGSize StringSize(NSString str, NSFont font);
    [ExtensionAttribute]
public static CGSize GetSizeUsingAttributes(NSString str, NSStringAttributes attributes);
    [ExtensionAttribute]
public static void DrawString(NSString str, CGPoint point, NSStringAttributes attributes);
    [ExtensionAttribute]
public static NSColor ColorWithAlpha(NSColor color, nfloat alpha);
    [ExtensionAttribute]
public static CGRect InsetRect(NSEdgeInsets edgeInsets, CGRect rect);
}
public class Syncfusion.XForms.MacOS.Core.SfView : NSView {
    private NSView topView;
    private NSColor backgroundColor;
    public NSColor BackgroundColor { get; public set; }
    [EditorBrowsableAttribute("1")]
public nfloat Alpha { get; public set; }
    public CGPoint Center { get; }
    public bool WantsDefaultClipping { get; }
    public bool IsFlipped { get; }
    public SfView(IntPtr handle);
    public SfView(CGRect frameRect);
    public NSColor get_BackgroundColor();
    public void set_BackgroundColor(NSColor value);
    public nfloat get_Alpha();
    public void set_Alpha(nfloat value);
    public CGPoint get_Center();
    public virtual bool get_WantsDefaultClipping();
    public virtual bool get_IsFlipped();
    private void Initialize();
    public void SetNeedsDisplay();
    public void SetNeedsLayout();
    public CGPoint GetCenter();
    public virtual void BringSubviewToFront(NSView view);
    public virtual void WillRemoveSubview(NSView subview);
    public virtual void InsertSubview(NSView insertView, int index);
    public virtual void LayoutSubviews();
    public virtual void Draw(CGRect rect);
    public virtual void WillMoveToSuperview(NSView newsuper);
    public virtual void Layout();
    public virtual void DrawRect(CGRect dirtyRect);
    public virtual void ViewWillMoveToSuperview(NSView newSuperview);
    public bool IsDescendantOfView(NSView aView);
    public virtual void TouchesBegan(NSSet touches, NSEvent theEvent);
    public virtual void TouchesMoved(NSSet touches, NSEvent theEvent);
    public virtual void TouchesCancelled(NSSet touches, NSEvent theEvent);
    public virtual void TouchesEnded(NSSet touches, NSEvent theEvent);
    public virtual void TouchesBeganWithEvent(NSEvent theEvent);
    public virtual void TouchesMovedWithEvent(NSEvent theEvent);
    public virtual void TouchesCancelledWithEvent(NSEvent theEvent);
    public virtual void TouchesEndedWithEvent(NSEvent theEvent);
    public virtual void WillMoveToWindow(NSWindow newWindow);
    public virtual void ViewWillMoveToWindow(NSWindow newWindow);
}
internal static class Syncfusion.XForms.macOS.Core.Utils : object {
    internal static NSView GetNativeView(DataTemplate template, VisualElement parent, object bindingContext, double x, double y, double width, double height);
    internal static NSView GetNativeView(DataTemplate template, VisualElement parent, object bindingContext, bool canMeasureAndLayout);
    internal static NSView GetNativeView(View formsView, VisualElement parent, object bindingContext, double x, double y, double width, double height);
    internal static NSView GetNativeView(View formsView, VisualElement parent, object bindingContext, bool canMeasureAndLayout);
}
