public class Syncfusion.XForms.iOS.Border.SfBorderRenderer : ViewRenderer {
    private nfloat borderWidth;
    private CGColor backgroundColor;
    private CGColor borderColor;
    private nfloat topLeftRadius;
    private nfloat topRightRadius;
    private nfloat bottomLeftRadius;
    private nfloat bottomRightRadius;
    private bool hasShadow;
    private CGColor shadowColor;
    private CAShapeLayer clipMaskLayer;
    private CAShapeLayer shadowMaskLayer;
    private UIBezierPath bezierpath;
    private UIView shadowView;
    private nfloat[] lineDashArray;
    private Thickness thickness;
    private bool isBorderThicknessUpdated;
    public static void Init();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void Draw(CGRect rect);
    private void DrawBorderAndShadow(CGRect rect, bool isEqualBorderThickness, bool isEmptyBorderThickness, bool isEmptyDashes);
    protected virtual void Dispose(bool disposing);
    private void UpdateProperties(bool isCornerRadiusUpdated, bool isBackgroundColorUpdated, bool isBorderColorUpdated, bool isBorderWidthUpdated, bool hasShadowUpdated, bool isDashArrayUpdated, bool isShadowColorUpdated);
    private UIBezierPath CreateCornerRadiusPath(CGRect rect, bool isMaskLayer);
    private CGPath CreateBorderThicknessCornerRadiusPath(CGRect rect);
    private void DrawBorders(CGContext context, CGRect rect);
    private void DrawBorderCurve(CGContext context, bool isEmptyDashes, float width, nfloat radius, nfloat x1, nfloat x2, nfloat x3, nfloat y1, nfloat y2, nfloat y3);
    private void DrawBorderLine(CGContext context, bool isEmptyDashes, nfloat width, nfloat x1, nfloat x2, nfloat y1, nfloat y2);
    private static nfloat[] ConvertToNativeDashArray(Double[] formsDashArray);
    private void OnSizeChanged(object sender, EventArgs e);
    private bool IsEqualBorderThickness(Thickness thickness);
}
public static class Syncfusion.XForms.iOS.Core.Core : object {
    public static void Init();
    private static void DeviceOrientationChanged(NSNotification notification);
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.iOS.Core.FlaggedEnumExt : object {
    [IteratorStateMachineAttribute("Syncfusion.XForms.iOS.Core.FlaggedEnumExt/<GetAllItems>d__0")]
[ExtensionAttribute]
internal static IEnumerable`1<Enum> GetAllItems(Enum targetEnum);
    [ExtensionAttribute]
internal static bool IsEmpty(SfEffects source);
    [ExtensionAttribute]
internal static SfEffects Add(SfEffects target, SfEffects newItem);
    [ExtensionAttribute]
internal static SfEffects ComplementsOf(SfEffects target, SfEffects source);
    [ExtensionAttribute]
internal static SfEffects ComplementsOf(SfEffects target, SfEffects source1, SfEffects source2);
}
internal class Syncfusion.XForms.iOS.Core.FontFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostScriptName>k__BackingField;
    internal static String[] Extensions;
    internal string FileName { get; internal set; }
    internal string Extension { get; internal set; }
    internal string PostScriptName { get; internal set; }
    private static FontFile();
    [CompilerGeneratedAttribute]
internal string get_FileName();
    [CompilerGeneratedAttribute]
internal void set_FileName(string value);
    [CompilerGeneratedAttribute]
internal string get_Extension();
    [CompilerGeneratedAttribute]
internal void set_Extension(string value);
    internal string FileNameWithExtension(string extension);
    internal string FileNameWithExtension();
    [CompilerGeneratedAttribute]
internal string get_PostScriptName();
    [CompilerGeneratedAttribute]
internal void set_PostScriptName(string value);
    internal string GetPostScriptNameWithSpaces();
    internal static string CleanseFontName(string fontName);
    internal static FontFile FromString(string input);
    [IteratorStateMachineAttribute("Syncfusion.XForms.iOS.Core.FontFile/<GetFontName>d__18")]
private static IEnumerable`1<string> GetFontName(string fontFamily);
}
[SecuritySafeCriticalAttribute]
internal class Syncfusion.XForms.iOS.Core.FontIconLabelRenderer : LabelRenderer {
    private CGDataProvider provider;
    private CGFont fonts;
    private NSError error;
    private FontIconLabel formFontIconLabel;
    [SecuritySafeCriticalAttribute]
protected virtual void OnElementChanged(ElementChangedEventArgs`1<Label> e);
    internal static string GetAvatarContentType(object obj, string propertyName);
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
}
internal class Syncfusion.XForms.iOS.Core.MeasureTextSize : object {
    public sealed virtual double MeasureTextWidth(string text, string fontFamily, double size);
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.iOS.Core.NativeHelper : object {
    [ExtensionAttribute]
internal static UIColor ToNativeColor(Color color);
    [ExtensionAttribute]
internal static void RefreshView(UIView view);
    [ExtensionAttribute]
internal static UIFont ConvertToNativeStyle(FontAttributes fontAttributes, float fontSize);
}
public static class Syncfusion.XForms.iOS.Core.SfAvatarViewRenderer : object {
    public static void Init();
}
internal class Syncfusion.XForms.iOS.Core.SfThickness : ValueType {
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    internal double Left { get; internal set; }
    internal double Top { get; internal set; }
    internal double Right { get; internal set; }
    internal double Bottom { get; internal set; }
    internal double HorizontalThickness { get; }
    internal double VerticalThickness { get; }
    internal bool IsEmpty { get; }
    internal bool IsUniformSize { get; }
    internal SfThickness(double uniformThickness);
    internal SfThickness(double horizontalSize, double verticalSize);
    internal SfThickness(double left, double top, double right, double bottom);
    internal SfThickness(Thickness thickness, float density);
    [CompilerGeneratedAttribute]
internal double get_Left();
    [CompilerGeneratedAttribute]
internal void set_Left(double value);
    [CompilerGeneratedAttribute]
internal double get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(double value);
    [CompilerGeneratedAttribute]
internal double get_Right();
    [CompilerGeneratedAttribute]
internal void set_Right(double value);
    [CompilerGeneratedAttribute]
internal double get_Bottom();
    [CompilerGeneratedAttribute]
internal void set_Bottom(double value);
    internal double get_HorizontalThickness();
    internal double get_VerticalThickness();
    internal bool get_IsEmpty();
    internal bool get_IsUniformSize();
    public static SfThickness op_Implicit(double uniformThickness);
    internal bool Equals(object thickness);
    private bool Equals(SfThickness thickness);
}
internal class Syncfusion.XForms.iOS.Core.UIKeyInputController : object {
    private Selector selector;
    internal UIViewController KeyInputController;
    public UIKeyInputController(string commandAttributeText);
    public bool AddKeyCommandInViewController(UIView control, string key);
    public void RemoveKeyCommandInViewController(string key);
    internal UIViewController GetUIViewController(UIView view);
}
internal static class Syncfusion.XForms.iOS.Core.Utils : object {
    internal static UIView GetNativeView(DataTemplate template, VisualElement parent, object bindingContext, double x, double y, double width, double height);
    internal static UIView GetNativeView(DataTemplate template, VisualElement parent, object bindingContext, bool canMeasureAndLayout);
    internal static UIView GetNativeView(View formsView, VisualElement parent, object bindingContext, double x, double y, double width, double height);
    internal static UIView GetNativeView(View formsView, VisualElement parent, object bindingContext, bool canMeasureAndLayout);
    internal static UIFont GetNativeFont(string family, float size, FontAttributes attributes);
}
internal class Syncfusion.XForms.iOS.DeviceOrientation : object {
    public sealed virtual bool GetOrientation();
}
public enum Syncfusion.XForms.iOS.EffectsView.AutoResetEffects : Enum {
    public int value__;
    public static AutoResetEffects None;
    public static AutoResetEffects Highlight;
    public static AutoResetEffects Ripple;
    public static AutoResetEffects Scale;
}
internal class Syncfusion.XForms.iOS.EffectsView.EffectsViewDependencyService : object {
    public sealed virtual void ApplyEffects(SfEffects effects, RippleStartPosition rippleStartPosition, Nullable`1<Point> rippleStartPoint, bool repeat, object nativeObject);
    public sealed virtual void Reset(object nativeObject);
}
[FlagsAttribute]
public enum Syncfusion.XForms.iOS.EffectsView.RippleStartPosition : Enum {
    public int value__;
    public static RippleStartPosition Left;
    public static RippleStartPosition Top;
    public static RippleStartPosition Right;
    public static RippleStartPosition Bottom;
    public static RippleStartPosition Default;
}
[FlagsAttribute]
public enum Syncfusion.XForms.iOS.EffectsView.SfEffects : Enum {
    public int value__;
    public static SfEffects None;
    public static SfEffects Highlight;
    public static SfEffects Ripple;
    public static SfEffects Scale;
    public static SfEffects Selection;
    public static SfEffects Rotation;
}
internal class Syncfusion.XForms.iOS.EffectsView.SfEffectsViewLayer : CALayer {
    private ObservableCollection`1<SfEffectsViewLayer> clonedLayerObjects;
    [CompilerGeneratedAttribute]
private CGPoint <CircleCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private nfloat <RippleRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private CGColor <RippleColor>k__BackingField;
    [CompilerGeneratedAttribute]
private CGColor <SelectionColor>k__BackingField;
    [CompilerGeneratedAttribute]
private CGRect <SelectionRect>k__BackingField;
    public CGRect Frame { get; public set; }
    internal CGPoint CircleCenter { get; internal set; }
    [ExportAttribute("rippleradius")]
internal nfloat RippleRadius { get; internal set; }
    [ExportAttribute("rippleColor")]
internal CGColor RippleColor { get; internal set; }
    [ExportAttribute("selectionColor")]
internal CGColor SelectionColor { get; internal set; }
    internal CGRect SelectionRect { get; internal set; }
    [ExportAttribute("initWithLayer:")]
internal SfEffectsViewLayer(CALayer layer);
    public virtual CGRect get_Frame();
    public virtual void set_Frame(CGRect value);
    [CompilerGeneratedAttribute]
internal CGPoint get_CircleCenter();
    [CompilerGeneratedAttribute]
internal void set_CircleCenter(CGPoint value);
    [CompilerGeneratedAttribute]
internal nfloat get_RippleRadius();
    [CompilerGeneratedAttribute]
internal void set_RippleRadius(nfloat value);
    [CompilerGeneratedAttribute]
internal CGColor get_RippleColor();
    [CompilerGeneratedAttribute]
internal void set_RippleColor(CGColor value);
    [CompilerGeneratedAttribute]
internal CGColor get_SelectionColor();
    [CompilerGeneratedAttribute]
internal void set_SelectionColor(CGColor value);
    [CompilerGeneratedAttribute]
internal CGRect get_SelectionRect();
    [CompilerGeneratedAttribute]
internal void set_SelectionRect(CGRect value);
    [ExportAttribute("needsDisplayForKey:")]
public static bool NeedsDisplayForKey(NSString key);
    public virtual void Clone(CALayer layer);
    protected virtual void Dispose(bool disposing);
    public virtual void DrawInContext(CGContext context);
}
public class Syncfusion.XForms.iOS.EffectsView.SfEffectsViewRenderer : ViewRenderer {
    private nfloat highlightTransparencyFactor;
    private nfloat initialRippleFactor;
    private nfloat fadeInOutDurationFactor;
    private nfloat rippleTransparencyFactor;
    private nfloat selectionTransparencyFactor;
    private nfloat highlightDurationFactor;
    private nfloat selectionDuration;
    private nfloat minAnimationDuration;
    private nfloat rippleAnimationDuration;
    private nfloat scaleAnimationDuration;
    private nfloat rotationAnimationDuration;
    private CABasicAnimation highlightAnimation;
    private CABasicAnimation fadeInRippleAnimation;
    private CABasicAnimation rippleAnimation;
    private CABasicAnimation fadeOutRippleAnimation;
    private UIViewPropertyAnimator rotationAnimation;
    private CAAnimationGroup groupRippleAnimation;
    private UIViewPropertyAnimator groupScaleAnimation;
    private UIViewPropertyAnimator removeScaleAnimation;
    private CABasicAnimation selectionAnimation;
    private UIColor highlightColor;
    private UIColor transparencyHighlightColor;
    private UIColor transparencySelectionColor;
    private UIColor transparencyRippleColor;
    private UIColor rippleColor;
    private UIColor selectionColor;
    private AutoResetEffects autoResetEffect;
    private SfEffects touchDownEffects;
    private SfEffects longPressEffects;
    private SfEffects touchUpEffects;
    private UIBezierPath bezierPath;
    private bool canRepeatEffects;
    private bool touchUpHandled;
    private bool isTouchPointMoved;
    private bool longPressHandled;
    private SfThickness cornerRadius;
    private bool removeHighlightAndRippleOnCompletion;
    private UILongPressGestureRecognizer longPressGesture;
    private CAShapeLayer maskLayer;
    private bool shouldApplyEffectsBehindContent;
    private nfloat scaleFactor;
    private float angle;
    private bool fadeOutRipple;
    private bool shouldIgnoreTouches;
    private CGPoint effectsPivotPosition;
    private nfloat viewHeight;
    private nfloat viewWidth;
    private bool isSelected;
    private float endAngle;
    private nfloat scaleX;
    private nfloat scaleY;
    private bool isSizeChanged;
    private bool isEffectsInvokedProgrammatically;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private EventHandler AnimationCompleted;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private SfEffectsViewLayer <EffectsLayer>k__BackingField;
    public CGRect Frame { get; public set; }
    internal SfThickness CornerRadius { get; internal set; }
    internal nfloat RippleColorOpacity { get; internal set; }
    internal nfloat SelectionColorOpacity { get; internal set; }
    internal nfloat HighlightColorOpacity { get; internal set; }
    internal AutoResetEffects AutoResetEffect { get; internal set; }
    internal SfEffects TouchDownEffects { get; internal set; }
    internal SfEffects LongPressEffects { get; internal set; }
    internal SfEffects TouchUpEffects { get; internal set; }
    internal UIColor HighlightColor { get; internal set; }
    internal UIColor RippleColor { get; internal set; }
    internal UIColor SelectionColor { get; internal set; }
    internal nfloat InitialRippleFactor { get; internal set; }
    internal nfloat ScaleFactor { get; internal set; }
    internal nfloat RippleAnimationDuration { get; internal set; }
    internal nfloat ScaleAnimationDuration { get; internal set; }
    internal nfloat RotationAnimationDuration { get; internal set; }
    internal bool IsSelected { get; internal set; }
    internal float Angle { get; internal set; }
    internal bool FadeOutRipple { get; internal set; }
    internal bool ShouldApplyEffectsBehindContent { get; internal set; }
    internal bool ShouldIgnoreTouches { get; internal set; }
    internal SfEffectsViewLayer EffectsLayer { get; internal set; }
    private nfloat RippleFadeInOutAnimationDuration { get; }
    private nfloat HighlightAnimationDuration { get; }
    [CompilerGeneratedAttribute]
internal void add_AnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_AnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_SelectionChanged(EventHandler value);
    public virtual CGRect get_Frame();
    public virtual void set_Frame(CGRect value);
    internal SfThickness get_CornerRadius();
    internal void set_CornerRadius(SfThickness value);
    internal nfloat get_RippleColorOpacity();
    internal void set_RippleColorOpacity(nfloat value);
    internal nfloat get_SelectionColorOpacity();
    internal void set_SelectionColorOpacity(nfloat value);
    internal nfloat get_HighlightColorOpacity();
    internal void set_HighlightColorOpacity(nfloat value);
    internal AutoResetEffects get_AutoResetEffect();
    internal void set_AutoResetEffect(AutoResetEffects value);
    internal SfEffects get_TouchDownEffects();
    internal void set_TouchDownEffects(SfEffects value);
    internal SfEffects get_LongPressEffects();
    internal void set_LongPressEffects(SfEffects value);
    internal SfEffects get_TouchUpEffects();
    internal void set_TouchUpEffects(SfEffects value);
    internal UIColor get_HighlightColor();
    internal void set_HighlightColor(UIColor value);
    internal UIColor get_RippleColor();
    internal void set_RippleColor(UIColor value);
    internal UIColor get_SelectionColor();
    internal void set_SelectionColor(UIColor value);
    internal nfloat get_InitialRippleFactor();
    internal void set_InitialRippleFactor(nfloat value);
    internal nfloat get_ScaleFactor();
    internal void set_ScaleFactor(nfloat value);
    internal nfloat get_RippleAnimationDuration();
    internal void set_RippleAnimationDuration(nfloat value);
    internal nfloat get_ScaleAnimationDuration();
    internal void set_ScaleAnimationDuration(nfloat value);
    internal nfloat get_RotationAnimationDuration();
    internal void set_RotationAnimationDuration(nfloat value);
    internal bool get_IsSelected();
    internal void set_IsSelected(bool value);
    internal float get_Angle();
    internal void set_Angle(float value);
    internal bool get_FadeOutRipple();
    internal void set_FadeOutRipple(bool value);
    internal bool get_ShouldApplyEffectsBehindContent();
    internal void set_ShouldApplyEffectsBehindContent(bool value);
    internal bool get_ShouldIgnoreTouches();
    internal void set_ShouldIgnoreTouches(bool value);
    [CompilerGeneratedAttribute]
internal SfEffectsViewLayer get_EffectsLayer();
    [CompilerGeneratedAttribute]
internal void set_EffectsLayer(SfEffectsViewLayer value);
    private nfloat get_RippleFadeInOutAnimationDuration();
    private nfloat get_HighlightAnimationDuration();
    public virtual void TouchesBegan(NSSet touches, UIEvent evt);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    public virtual void TouchesCancelled(NSSet touches, UIEvent evt);
    public virtual void TouchesMoved(NSSet touches, UIEvent evt);
    internal void Reset();
    internal void ApplyEffects(SfEffects effects, RippleStartPosition rippleStartPosition, Nullable`1<CGPoint> rippleStartPoint, bool repeat);
    protected virtual void Dispose(bool disposing);
    private void Initialize();
    private CGPoint GetTouchPoint(NSSet touches);
    private void OnLongPressed();
    private void DrawCornerRadius();
    private UIBezierPath GetCornerRadiusPath(CGRect rect);
    private void InvokeAnimationCompletedEvent();
    private void InvokeSelectionChangedEvent();
    private void ResetFlags();
    private void AddEffects(SfEffects effects);
    private void AddOrRemoveAutoResetEffect(AutoResetEffects effect, bool isTouchUpEnabled);
    private void AddHighlightEffect();
    private void ApplyHighlightColorAnimation();
    private void OnHighlightAnimationCompleted(object sender, CAAnimationStateEventArgs e);
    private void RemoveHighlightEffect(bool forceRemove);
    private void OnHighlightFadeOutAnimationCompleted(object sender, CAAnimationStateEventArgs e);
    private double GetRippleRadiusFromFactor();
    private double GetFinalRadius();
    private void AddRippleEffect();
    [AsyncStateMachineAttribute("Syncfusion.XForms.iOS.EffectsView.SfEffectsViewRenderer/<ApplyRippleAnimation>d__159")]
private void ApplyRippleAnimation();
    private void RemoveFadeInAndRippleRadiusAnimators();
    private void OnRippleAnimationCompleted(object sender, CAAnimationStateEventArgs e);
    private void RemoveRippleEffect(bool forceRemove);
    private void OnRippleFadeOutAnimationCompleted(object sender, EventArgs e);
    private void UpdateScaleXYValues(nfloat factor);
    private void UpdateScale(double duration, bool isTouchUpEnabled, bool forceRemove);
    private void OnScaleAnimationCompleted();
    private void OnRemovingScaleAnimationCompleted();
    private void UpdateSelectionEffect();
    private void ApplySelectionAnimation();
    private void OnSelectionAnimationStarted(object sender, EventArgs e);
    private void OnSelectionAnimationCompleted(object sender, CAAnimationStateEventArgs e);
    private void RemoveSelectionEffect();
    private void OnSelectionFadeOutAnimationCompleted(object sender, CAAnimationStateEventArgs e);
    private void UpdateRotation(double duration);
    private void OnRotationAnimationCompleted();
    public static void Init();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateProperties(bool isCornerRadiusUpdated, bool isHighlightColorChanged, bool isInitialRippleFactorUpdated, bool isLongPressEffectUpdated, bool isRippleAnimationDurationUpdated, bool canApplyEffectsBehindContent, bool isRippleColorChanged, bool isTouchDownEffectUpdate, bool isTouchUpEffectUpdated, bool isSelectionColorChanged, bool isScaleFactorUpdated, bool isAngleUpdated, bool canIgnoreTouches, bool isSelectionChanged, bool isBackgroundColorChanged, bool isScaleAnimationDurationUpdated, bool isRotationAnimationDurationUpdated, bool canFadeOutRipple, bool isHoverEffectsUpdated, bool isAutoResetEffectUpdate, bool isRippleColorOpacityUpdated, bool isSelectionColorOpacityUpdated, bool isHighlightColorOpacityUpdated);
    private SfEffects ConvertToNative(SfEffects formsEffects);
    private AutoResetEffects ConvertToNativeAutoResetEffect(AutoResetEffects effect);
    [CompilerGeneratedAttribute]
private void <UpdateScale>b__165_0(UIViewAnimatingPosition e);
    [CompilerGeneratedAttribute]
private void <UpdateScale>b__165_1(UIViewAnimatingPosition e);
}
public class Syncfusion.XForms.iOS.Graphics.SfGradientViewRenderer : ViewRenderer {
    private SfGradientView gradientView;
    private CGColor[] colors;
    private CGPoint startPoint;
    private CGPoint endPoint;
    private nfloat[] offsets;
    private CGPoint center;
    private float radius;
    private SfGradientBrush gradientBrush;
    private SfLinearGradientBrush linearGradient;
    private SfRadialGradientBrush radialGradient;
    private bool isLinear;
    private CGSize previousSize;
    public static void Init();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void LayoutSubviews();
    public virtual void Draw(CGRect rect);
    protected virtual void Dispose(bool disposing);
    private void UpdateProperties();
    private void BackgroundBrush_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetGradientStops();
    private void GradientStop_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetStartPoint();
    private void SetEndPoint();
    private void SetCenter();
    private void SetRadius();
}
public class Syncfusion.XForms.iOS.Shimmer.SfShimmerRenderer : ViewRenderer {
    private CABasicAnimation waveAnimation;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private ShimmerWaveLayer <WaveLayer>k__BackingField;
    public CGRect Frame { get; public set; }
    internal ShimmerWaveLayer WaveLayer { get; internal set; }
    public virtual CGRect get_Frame();
    public virtual void set_Frame(CGRect value);
    [CompilerGeneratedAttribute]
internal ShimmerWaveLayer get_WaveLayer();
    [CompilerGeneratedAttribute]
internal void set_WaveLayer(ShimmerWaveLayer value);
    public static void Init();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<View> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void LayoutSubviews();
    protected virtual void Dispose(bool disposing);
    private void Initialize();
    private void SetAnimatableValues();
    private void AddWaveAnimation();
    private void RemoveWaveAnimation();
    private void RestartAnimation();
}
internal class Syncfusion.XForms.iOS.Shimmer.ShimmerViewRenderer : ViewRenderer {
}
internal class Syncfusion.XForms.iOS.Shimmer.ShimmerWaveLayer : CALayer {
    private float columnSpacing;
    private float centerY;
    private float templateX;
    private float templateWidth;
    private float templateHeight;
    private CGRect waveRect;
    private CGGradient gradient;
    private CGPath roundedPath;
    private ObservableCollection`1<ShimmerWaveLayer> clonedLayerObjects;
    [CompilerGeneratedAttribute]
private SfShimmer <FormsShimmer>k__BackingField;
    [CompilerGeneratedAttribute]
private CGPoint <RectPosition>k__BackingField;
    internal SfShimmer FormsShimmer { get; internal set; }
    [ExportAttribute("rectPosition")]
internal CGPoint RectPosition { get; internal set; }
    [ExportAttribute("initWithLayer:")]
internal ShimmerWaveLayer(CALayer layer);
    internal ShimmerWaveLayer(IntPtr handle);
    private void DrawBuiltInView(CGContext context);
    private void DrawPersona(CGContext context);
    private void DrawVideo(CGContext context);
    private void DrawFeed(CGContext context);
    private void DrawShopping(CGContext context);
    private void DrawArticle(CGContext context);
    private void DrawProfile(CGContext context);
    [CompilerGeneratedAttribute]
internal SfShimmer get_FormsShimmer();
    [CompilerGeneratedAttribute]
internal void set_FormsShimmer(SfShimmer value);
    [CompilerGeneratedAttribute]
internal CGPoint get_RectPosition();
    [CompilerGeneratedAttribute]
internal void set_RectPosition(CGPoint value);
    [ExportAttribute("needsDisplayForKey:")]
public static bool NeedsDisplayForKey(NSString key);
    public virtual void Clone(CALayer layer);
    public virtual void DrawInContext(CGContext context);
    protected virtual void Dispose(bool disposing);
    private void DrawCustomView(CGContext context);
    private void DrawShimmerWave(CGContext context);
    private ValueTuple`2<double, double> GetPosition(VisualElement view);
    [IteratorStateMachineAttribute("Syncfusion.XForms.iOS.Shimmer.ShimmerWaveLayer/<GetShimmerViewRenderers>d__34")]
private IEnumerable`1<ShimmerViewRenderer> GetShimmerViewRenderers(UIView view);
}
internal class Syncfusion.XForms.iOS.TextInputLayout.AnimationImplementationiOS : object {
    public sealed virtual void AnimateTo(Label label, double x, double y, int duration, double scale, bool canAnimate, bool isRTL);
}
internal class Syncfusion.XForms.iOS.TextInputLayout.InputLayoutBorder : UIView {
    private SfTextInputLayout inputLayout;
    private float cornerRadius;
    private float thickness;
    private UIColor borderColor;
    private UIColor background;
    private string text;
    private double cutoutStartX;
    private bool shouldRefreshLayout;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    internal float CornerRadius { get; internal set; }
    internal float Thickness { get; internal set; }
    internal UIColor BorderColor { get; internal set; }
    internal UIColor Background { get; internal set; }
    internal string Text { get; internal set; }
    internal double CutoutStartX { get; internal set; }
    internal bool ShouldRefreshLayout { get; internal set; }
    internal InputLayoutBorder(SfTextInputLayout parent);
    public virtual void Draw(CGRect rect);
    private UIStringAttributes GetEditorTextAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal float get_CornerRadius();
    internal void set_CornerRadius(float value);
    internal float get_Thickness();
    internal void set_Thickness(float value);
    internal UIColor get_BorderColor();
    internal void set_BorderColor(UIColor value);
    internal UIColor get_Background();
    internal void set_Background(UIColor value);
    internal string get_Text();
    internal void set_Text(string value);
    internal double get_CutoutStartX();
    internal void set_CutoutStartX(double value);
    internal bool get_ShouldRefreshLayout();
    internal void set_ShouldRefreshLayout(bool value);
    protected virtual void NotifyPropertyChanged(string propertyName);
}
internal class Syncfusion.XForms.iOS.TextInputLayout.InputLayoutBorderRenderer : ViewRenderer`2<InputLayoutBorder, InputLayoutBorder> {
    private InputLayoutBorder nativeBorder;
    private InputLayoutBorder formsBorder;
    private SfTextInputLayout inputLayout;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutBorder> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    private void OnFormsBorderPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnFloatedHintLabelStylePropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Syncfusion.XForms.iOS.TextInputLayout.InputLayoutClearButtonViewRenderer : ViewRenderer`2<InputLayoutClearView, UIImageView> {
    private InputLayoutClearView clearButtonView;
    private SfTextInputLayout inputLayout;
    private UIImageView nativeImageView;
    private UIImage clearButtonIcon;
    private int clearButtonIconSize;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutClearView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void LayoutSubviews();
    private void LoadClearButtonIcons();
    private void SetTintColor();
    public virtual void TouchesBegan(NSSet touches, UIEvent evt);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    public virtual void TouchesCancelled(NSSet touches, UIEvent evt);
}
internal class Syncfusion.XForms.iOS.TextInputLayout.InputLayoutToggleViewRenderer : ViewRenderer`2<InputLayoutToggleView, UIImageView> {
    private InputLayoutToggleView toggleView;
    private SfTextInputLayout inputLayout;
    private UIImageView nativeImageView;
    private UIImage passwordToggleVisibleIcon;
    private UIImage passwordToggleCollapseIcon;
    private UIImage dropDownIcon;
    private int passwordIconSize;
    private int dropDownIconSize;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutToggleView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual void LayoutSubviews();
    private void LoadToggleIcons();
    private void UpdateToggleIcons();
    private void SetTintColor();
    public virtual void TouchesBegan(NSSet touches, UIEvent evt);
    public virtual void TouchesEnded(NSSet touches, UIEvent evt);
    public virtual void TouchesCancelled(NSSet touches, UIEvent evt);
}
public class Syncfusion.XForms.iOS.TextInputLayout.SfTextInputLayoutRenderer : ViewRenderer`2<SfTextInputLayout, UIView> {
    private UITextField nativeTextField;
    private UITextView nativeTextView;
    private SfTextInputLayout inputLayout;
    public static void Init();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SfTextInputLayout> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void UpdateNativeView(View view);
    private UITextField GetTextField(UIView view);
    private void OverrideTextFieldDefaultStyle();
    private void OverrideTextViewDefaultStyle();
    private void HookTextFieldEvents();
    private void HookTextViewEvents();
    private void OnInputViewPropertyChanged(object sender, PropertyChangedEventArgs e);
    private bool OnCharacterChanged(UITextField textField, NSRange range, string replacementString);
    private void OnSelectedIndexChanged(object sender, EventArgs e);
    private void OnFocused(object sender, EventArgs e);
    private void OnUnfocused(object sender, EventArgs e);
    private void UnhookEvents();
    [CompilerGeneratedAttribute]
private void <OnElementPropertyChanged>b__5_0();
    [CompilerGeneratedAttribute]
private void <UpdateNativeView>b__7_0();
    [CompilerGeneratedAttribute]
private void <UpdateNativeView>b__7_1();
    [CompilerGeneratedAttribute]
private void <OnUnfocused>b__17_0();
}
