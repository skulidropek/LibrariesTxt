public class Syncfusion.XForms.UWP.Border.SfBorderRenderer : ViewRenderer`2<SfBorder, Border> {
    private Border nativeBorder;
    private Color shadowColor;
    private bool isEmptyDashes;
    private bool isBorderThicknessUpdated;
    private DoubleCollection strokeDashArray;
    private Path dashPath;
    private Border siblingBorder;
    private Grid contentGrid;
    private DoubleCollection dashArray;
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SfBorder> e);
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void UpdateDashArray();
    private void UpdateDashPath(UIElement child);
    private Path GetDottedBorderPath(DoubleCollection strokeDashArray);
    protected virtual void Dispose(bool disposing);
    private Brush GetNativeBrush(Color color);
    private DoubleCollection ConvertToNativeDashArray(Double[] formsDashArray);
    private Thickness GetBorderThickness(Thickness thickness);
    private CornerRadius GetBorderCornerRadius(Thickness thickness);
    private void AddChild();
}
public static class Syncfusion.XForms.UWP.Core.Core : object {
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.UWP.Core.FlaggedEnumExt : object {
    [IteratorStateMachineAttribute("Syncfusion.XForms.UWP.Core.FlaggedEnumExt/<GetAllItems>d__0")]
[ExtensionAttribute]
internal static IEnumerable`1<Enum> GetAllItems(Enum targetEnum);
    [ExtensionAttribute]
internal static bool IsEmpty(SfEffects source);
    [ExtensionAttribute]
internal static SfEffects Add(SfEffects target, SfEffects newItem);
    [ExtensionAttribute]
internal static SfEffects ComplementsOf(SfEffects target, SfEffects source);
    [ExtensionAttribute]
internal static SfEffects ComplementsOf(SfEffects target, SfEffects source1, SfEffects source2);
}
internal class Syncfusion.XForms.UWP.Core.MeasureTextSize : object {
    public sealed virtual double MeasureTextWidth(string text, string fontFamily, double size);
}
[ExtensionAttribute]
internal static class Syncfusion.XForms.UWP.Core.NativeHelper : object {
    [ExtensionAttribute]
internal static SolidColorBrush ToNativeColor(Color color);
    [ExtensionAttribute]
internal static FontStyle ConvertToNativeStyle(FontAttributes fontAttributes, float fontSize);
    internal static bool RemoveTextBoxDefaultStyle(TextBox& nativeTextBox, bool isEntry);
}
public class Syncfusion.XForms.UWP.Core.SfEditorRenderer : EditorRenderer {
    private Size emptySize;
    private TextBox clonedTextBox;
    private bool isMaterialLayout;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<Editor> e);
    public virtual SizeRequest GetDesiredSize(double widthConstraint, double heightConstraint);
    private Size GetClonedTextBoxSize(FormsTextBox control, Size constraint);
}
internal class Syncfusion.XForms.UWP.Core.SfThickness : ValueType {
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Bottom>k__BackingField;
    internal double Left { get; internal set; }
    internal double Top { get; internal set; }
    internal double Right { get; internal set; }
    internal double Bottom { get; internal set; }
    internal double HorizontalThickness { get; }
    internal double VerticalThickness { get; }
    internal bool IsEmpty { get; }
    internal bool IsUniformSize { get; }
    internal SfThickness(double uniformThickness);
    internal SfThickness(double horizontalSize, double verticalSize);
    internal SfThickness(double left, double top, double right, double bottom);
    internal SfThickness(Thickness thickness, float density);
    [CompilerGeneratedAttribute]
internal double get_Left();
    [CompilerGeneratedAttribute]
internal void set_Left(double value);
    [CompilerGeneratedAttribute]
internal double get_Top();
    [CompilerGeneratedAttribute]
internal void set_Top(double value);
    [CompilerGeneratedAttribute]
internal double get_Right();
    [CompilerGeneratedAttribute]
internal void set_Right(double value);
    [CompilerGeneratedAttribute]
internal double get_Bottom();
    [CompilerGeneratedAttribute]
internal void set_Bottom(double value);
    internal double get_HorizontalThickness();
    internal double get_VerticalThickness();
    internal bool get_IsEmpty();
    internal bool get_IsUniformSize();
    public static SfThickness op_Implicit(double uniformThickness);
    internal bool Equals(object thickness);
    private bool Equals(SfThickness thickness);
}
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.BoxInstanceMethod : MulticastDelegate {
    public BoxInstanceMethod(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_NativeColorConverter();
    private object Activate_2_ClearButtonViewVisibleIcon();
    private object Activate_4_DropDownIcon();
    private object Activate_5_ToggleCollapsedIcon();
    private object Activate_6_ToggleVisibleIcon();
    private object Activate_7_TreeViewNode();
    private object Activate_12_ShellRenderer();
    private object Activate_13_NavigationView();
    private object Activate_33_NavigationViewTemplateSettings();
    private object Activate_34_ShellSectionRenderer();
    private void VectorAdd_10_IList(object instance, object item);
    private void VectorAdd_32_IList(object instance, object item);
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_TreeViewNode_IsExpanded(object instance);
    private void set_0_TreeViewNode_IsExpanded(object instance, object Value);
    private object get_1_TreeViewNode_HasUnrealizedChildren(object instance);
    private void set_1_TreeViewNode_HasUnrealizedChildren(object instance, object Value);
    private object get_2_TreeViewNode_Content(object instance);
    private void set_2_TreeViewNode_Content(object instance, object Value);
    private object get_3_TreeViewNode_Children(object instance);
    private object get_4_TreeViewNode_Depth(object instance);
    private object get_5_TreeViewNode_HasChildren(object instance);
    private object get_6_TreeViewNode_Parent(object instance);
    private object get_7_ShellRenderer_FlyoutBackgroundColor(object instance);
    private void set_7_ShellRenderer_FlyoutBackgroundColor(object instance, object Value);
    private object get_8_NavigationView_IsTitleBarAutoPaddingEnabled(object instance);
    private void set_8_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value);
    private object get_9_NavigationView_IsSettingsVisible(object instance);
    private void set_9_NavigationView_IsSettingsVisible(object instance, object Value);
    private object get_10_NavigationView_IsPaneVisible(object instance);
    private void set_10_NavigationView_IsPaneVisible(object instance, object Value);
    private object get_11_NavigationView_IsPaneToggleButtonVisible(object instance);
    private void set_11_NavigationView_IsPaneToggleButtonVisible(object instance, object Value);
    private object get_12_NavigationView_IsPaneOpen(object instance);
    private void set_12_NavigationView_IsPaneOpen(object instance, object Value);
    private object get_13_NavigationView_IsBackEnabled(object instance);
    private void set_13_NavigationView_IsBackEnabled(object instance, object Value);
    private object get_14_NavigationView_IsBackButtonVisible(object instance);
    private void set_14_NavigationView_IsBackButtonVisible(object instance, object Value);
    private object get_15_NavigationView_HeaderTemplate(object instance);
    private void set_15_NavigationView_HeaderTemplate(object instance, object Value);
    private object get_16_NavigationView_Header(object instance);
    private void set_16_NavigationView_Header(object instance, object Value);
    private object get_17_NavigationView_ExpandedModeThresholdWidth(object instance);
    private void set_17_NavigationView_ExpandedModeThresholdWidth(object instance, object Value);
    private object get_18_NavigationView_MenuItemContainerStyle(object instance);
    private void set_18_NavigationView_MenuItemContainerStyle(object instance, object Value);
    private object get_19_NavigationView_ContentOverlay(object instance);
    private void set_19_NavigationView_ContentOverlay(object instance, object Value);
    private object get_20_NavigationView_CompactPaneLength(object instance);
    private void set_20_NavigationView_CompactPaneLength(object instance, object Value);
    private object get_21_NavigationView_CompactModeThresholdWidth(object instance);
    private void set_21_NavigationView_CompactModeThresholdWidth(object instance, object Value);
    private object get_22_NavigationView_AutoSuggestBox(object instance);
    private void set_22_NavigationView_AutoSuggestBox(object instance, object Value);
    private object get_23_NavigationView_MenuItemContainerStyleSelector(object instance);
    private void set_23_NavigationView_MenuItemContainerStyleSelector(object instance, object Value);
    private object get_24_NavigationView_AlwaysShowHeader(object instance);
    private void set_24_NavigationView_AlwaysShowHeader(object instance, object Value);
    private object get_25_NavigationView_ShoulderNavigationEnabled(object instance);
    private void set_25_NavigationView_ShoulderNavigationEnabled(object instance, object Value);
    private object get_26_NavigationView_SelectionFollowsFocus(object instance);
    private void set_26_NavigationView_SelectionFollowsFocus(object instance, object Value);
    private object get_27_NavigationView_SelectedItem(object instance);
    private void set_27_NavigationView_SelectedItem(object instance, object Value);
    private object get_28_NavigationView_PaneToggleButtonStyle(object instance);
    private void set_28_NavigationView_PaneToggleButtonStyle(object instance, object Value);
    private object get_29_NavigationView_PaneTitle(object instance);
    private void set_29_NavigationView_PaneTitle(object instance, object Value);
    private object get_30_NavigationView_PaneHeader(object instance);
    private void set_30_NavigationView_PaneHeader(object instance, object Value);
    private object get_31_NavigationView_PaneFooter(object instance);
    private void set_31_NavigationView_PaneFooter(object instance, object Value);
    private object get_32_NavigationView_PaneDisplayMode(object instance);
    private void set_32_NavigationView_PaneDisplayMode(object instance, object Value);
    private object get_33_NavigationView_PaneCustomContent(object instance);
    private void set_33_NavigationView_PaneCustomContent(object instance, object Value);
    private object get_34_NavigationView_OverflowLabelMode(object instance);
    private void set_34_NavigationView_OverflowLabelMode(object instance, object Value);
    private object get_35_NavigationView_OpenPaneLength(object instance);
    private void set_35_NavigationView_OpenPaneLength(object instance, object Value);
    private object get_36_NavigationView_MenuItemsSource(object instance);
    private void set_36_NavigationView_MenuItemsSource(object instance, object Value);
    private object get_37_NavigationView_MenuItemTemplateSelector(object instance);
    private void set_37_NavigationView_MenuItemTemplateSelector(object instance, object Value);
    private object get_38_NavigationView_MenuItemTemplate(object instance);
    private void set_38_NavigationView_MenuItemTemplate(object instance, object Value);
    private object get_39_NavigationView_DisplayMode(object instance);
    private object get_40_NavigationView_MenuItems(object instance);
    private object get_41_NavigationView_SettingsItem(object instance);
    private object get_42_NavigationView_TemplateSettings(object instance);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
internal class Syncfusion.XForms.UWP.Core.Syncfusion_Core_XForms_UWP_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private IXamlType _boxedType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxInstanceMethod <BoxInstance>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType BoxedType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public BoxInstanceMethod BoxInstance { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public sealed virtual IXamlType get_BoxedType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    [CompilerGeneratedAttribute]
public BoxInstanceMethod get_BoxInstance();
    [CompilerGeneratedAttribute]
public void set_BoxInstance(BoxInstanceMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void SetBoxedType(IXamlType boxedType);
    public object BoxType(object instance);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
internal static class Syncfusion.XForms.UWP.Core.Utils : object {
    internal static FrameworkElement GetNativeView(DataTemplate template, VisualElement parent, object bindingContext, double x, double y, double width, double height);
    internal static FrameworkElement GetNativeView(DataTemplate template, VisualElement parent, object bindingContext, bool canMeasureAndLayout);
    internal static FrameworkElement GetNativeView(View formsView, VisualElement parent, object bindingContext, double x, double y, double width, double height);
    internal static FrameworkElement GetNativeView(View formsView, VisualElement parent, object bindingContext, bool canMeasureAndLayout);
    internal static FontFamily GetNativeFont(string family);
}
internal class Syncfusion.XForms.UWP.DeviceOrientation : object {
    public sealed virtual bool GetOrientation();
}
public enum Syncfusion.XForms.UWP.EffectsView.AutoResetEffects : Enum {
    public int value__;
    public static AutoResetEffects None;
    public static AutoResetEffects Highlight;
    public static AutoResetEffects Ripple;
    public static AutoResetEffects Scale;
}
internal class Syncfusion.XForms.UWP.EffectsView.EffectsViewDependencyService : object {
    public sealed virtual void ApplyEffects(SfEffects effects, RippleStartPosition rippleStartPosition, Nullable`1<Point> rippleStartPoint, bool repeat, object nativeObject);
    public sealed virtual void Reset(object nativeObject);
}
internal class Syncfusion.XForms.UWP.EffectsView.RipplePositionConvertor : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string language);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string language);
}
[FlagsAttribute]
public enum Syncfusion.XForms.UWP.EffectsView.RippleStartPosition : Enum {
    public int value__;
    public static RippleStartPosition Left;
    public static RippleStartPosition Top;
    public static RippleStartPosition Right;
    public static RippleStartPosition Bottom;
    public static RippleStartPosition Default;
}
[FlagsAttribute]
public enum Syncfusion.XForms.UWP.EffectsView.SfEffects : Enum {
    public int value__;
    public static SfEffects None;
    public static SfEffects Highlight;
    public static SfEffects Ripple;
    public static SfEffects Scale;
    public static SfEffects Selection;
    public static SfEffects Rotation;
}
internal class Syncfusion.XForms.UWP.EffectsView.SfEffectsViewAutomationPeer : FrameworkElementAutomationPeer {
    public SfEffectsViewAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class Syncfusion.XForms.UWP.EffectsView.SfEffectsViewRenderer : ViewRenderer`2<SfEffectsView, FrameworkElement> {
    private double fadeInOutDurationFactor;
    private double highlightDurationFactor;
    private float highlightTransparencyFactor;
    private double minAnimationDuration;
    private float rippleTransparencyFactor;
    private double selectionDuration;
    private float selectionTransparencyFactor;
    private Border border;
    private bool canRepeatEffects;
    private CompositeTransform compositeTransform;
    private Grid contentGrid;
    private double currentAngle;
    private double currentScaleX;
    private double currentScaleY;
    private Canvas effectsViewCanvas;
    private UIElement effectsViewChildren;
    private DoubleAnimation fadeInRippleAnimation;
    private ColorAnimation fadingRippleAnimation;
    private ColorAnimation fadeOutHighlightAnimation;
    private DoubleAnimation fadeOutRippleAnimation;
    private ColorAnimation highlightAnimation;
    private Rectangle highlightRectangle;
    private bool isEffectsInvokedProgrammatically;
    private bool isPointerMoved;
    private bool isTouchDown;
    private bool isSizeChanged;
    private bool longPressHandled;
    private double previousAngle;
    private double previousScaleX;
    private double previousScaleY;
    private bool removeHighlightAndRippleOnCompletion;
    private Storyboard storyboardForRemovingHighlightEffect;
    private Storyboard storyboardForRemovingRippleEffect;
    private Storyboard storyboardForRemovingTransformEffects;
    private Storyboard storyboardForRemovingSelectionColor;
    private DoubleAnimation rippleRadiusAnimation;
    private DoubleAnimation rotationAnimation;
    private DoubleAnimation resetRotationAnimation;
    private DoubleAnimation scaleXAnimation;
    private DoubleAnimation resetScaleXAnimation;
    private DoubleAnimation scaleYAnimation;
    private DoubleAnimation resetScaleYAnimation;
    private ColorAnimation selectionAnimation;
    private EventHandler`1<object> OnRemovingSelectionEffectAnimationCompleted;
    private Rectangle selectionRectangle;
    private Storyboard highlightStoryboard;
    private Storyboard rippleStoryboard;
    private Storyboard selectionStoryboard;
    private Storyboard storyboardWithTransform;
    private bool touchUpHandled;
    private SolidColorBrush transparencyHighlighColor;
    private SolidColorBrush transparencyRippleColor;
    private SolidColorBrush transparencySelectionColor;
    internal static DependencyProperty AngleProperty;
    internal static DependencyProperty AutoResetEffectProperty;
    internal static DependencyProperty CornerRadiusProperty;
    internal static DependencyProperty FadeOutRippleProperty;
    internal static DependencyProperty HighlightColorProperty;
    internal static DependencyProperty HoverEffectsProperty;
    internal static DependencyProperty InitialRippleFactorProperty;
    internal static DependencyProperty IsSelectedProperty;
    internal static DependencyProperty LongPressEffectsProperty;
    internal static DependencyProperty RippleAnimationDurationProperty;
    internal static DependencyProperty RippleColorProperty;
    internal static DependencyProperty RotationAnimationDurationProperty;
    internal static DependencyProperty ScaleAnimationDurationProperty;
    internal static DependencyProperty ScaleFactorProperty;
    internal static DependencyProperty SelectionColorProperty;
    internal static DependencyProperty ShouldApplyEffectsBehindContentProperty;
    internal static DependencyProperty ShouldIgnoreTouchesProperty;
    internal static DependencyProperty TouchDownEffectsProperty;
    internal static DependencyProperty TouchUpEffectsProperty;
    [CompilerGeneratedAttribute]
private EventHandler AnimationCompleted;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    [CompilerGeneratedAttribute]
private Point <EffectsPivotPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Ellipse <Ripple>k__BackingField;
    internal double Angle { get; internal set; }
    internal float RippleColorOpacity { get; internal set; }
    internal float HighlightColorOpacity { get; internal set; }
    internal float SelectionColorOpacity { get; internal set; }
    internal SfThickness CornerRadius { get; internal set; }
    internal Point EffectsPivotPosition { get; internal set; }
    internal bool FadeOutRipple { get; internal set; }
    internal Brush HighlightColor { get; internal set; }
    internal SfEffects HoverEffects { get; internal set; }
    internal double InitialRippleFactor { get; internal set; }
    internal bool IsSelected { get; internal set; }
    internal SfEffects LongPressEffects { get; internal set; }
    internal Ellipse Ripple { get; internal set; }
    internal double RippleAnimationDuration { get; internal set; }
    internal Brush RippleColor { get; internal set; }
    internal double RotationAnimationDuration { get; internal set; }
    internal double ScaleAnimationDuration { get; internal set; }
    internal double ScaleFactor { get; internal set; }
    internal Brush SelectionColor { get; internal set; }
    internal bool ShouldApplyEffectsBehindContent { get; internal set; }
    internal bool ShouldIgnoreTouches { get; internal set; }
    internal AutoResetEffects AutoResetEffect { get; internal set; }
    internal SfEffects TouchDownEffects { get; internal set; }
    internal SfEffects TouchUpEffects { get; internal set; }
    private double HighlightAnimationDuration { get; }
    private double RippleFadeInOutAnimationDuration { get; }
    private static SfEffectsViewRenderer();
    [CompilerGeneratedAttribute]
internal void add_AnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_AnimationCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_SelectionChanged(EventHandler value);
    internal double get_Angle();
    internal void set_Angle(double value);
    internal float get_RippleColorOpacity();
    internal void set_RippleColorOpacity(float value);
    internal float get_HighlightColorOpacity();
    internal void set_HighlightColorOpacity(float value);
    internal float get_SelectionColorOpacity();
    internal void set_SelectionColorOpacity(float value);
    internal SfThickness get_CornerRadius();
    internal void set_CornerRadius(SfThickness value);
    [CompilerGeneratedAttribute]
internal Point get_EffectsPivotPosition();
    [CompilerGeneratedAttribute]
internal void set_EffectsPivotPosition(Point value);
    internal bool get_FadeOutRipple();
    internal void set_FadeOutRipple(bool value);
    internal Brush get_HighlightColor();
    internal void set_HighlightColor(Brush value);
    internal SfEffects get_HoverEffects();
    internal void set_HoverEffects(SfEffects value);
    internal double get_InitialRippleFactor();
    internal void set_InitialRippleFactor(double value);
    internal bool get_IsSelected();
    internal void set_IsSelected(bool value);
    internal SfEffects get_LongPressEffects();
    internal void set_LongPressEffects(SfEffects value);
    [CompilerGeneratedAttribute]
internal Ellipse get_Ripple();
    [CompilerGeneratedAttribute]
internal void set_Ripple(Ellipse value);
    internal double get_RippleAnimationDuration();
    internal void set_RippleAnimationDuration(double value);
    internal Brush get_RippleColor();
    internal void set_RippleColor(Brush value);
    internal double get_RotationAnimationDuration();
    internal void set_RotationAnimationDuration(double value);
    internal double get_ScaleAnimationDuration();
    internal void set_ScaleAnimationDuration(double value);
    internal double get_ScaleFactor();
    internal void set_ScaleFactor(double value);
    internal Brush get_SelectionColor();
    internal void set_SelectionColor(Brush value);
    internal bool get_ShouldApplyEffectsBehindContent();
    internal void set_ShouldApplyEffectsBehindContent(bool value);
    internal bool get_ShouldIgnoreTouches();
    internal void set_ShouldIgnoreTouches(bool value);
    internal AutoResetEffects get_AutoResetEffect();
    internal void set_AutoResetEffect(AutoResetEffects value);
    internal SfEffects get_TouchDownEffects();
    internal void set_TouchDownEffects(SfEffects value);
    internal SfEffects get_TouchUpEffects();
    internal void set_TouchUpEffects(SfEffects value);
    private double get_HighlightAnimationDuration();
    private double get_RippleFadeInOutAnimationDuration();
    protected virtual void Dispose(bool disposing);
    internal void Reset();
    internal void ApplyEffects(SfEffects effects, RippleStartPosition rippleStartPosition, Nullable`1<Point> rippleStartPoint, bool repeat);
    private void ClearStoryboard(Storyboard storyboard);
    private CornerRadius GetBorderCornerRadius(Thickness thickness);
    private double GetFinalDiameterByPythagoras();
    private double GetRippleDiameterFromFactor();
    private SolidColorBrush GetTransparentColor(SolidColorBrush colorBrush, float transparencyFactor);
    private void GetTranslatingChild();
    private Point GetTouchPoint(PointerRoutedEventArgs pointer);
    private void HookEvents();
    private void Initialize();
    private void InitializeBorder();
    private void InvokeAnimationCompletedEvent();
    private void InvokeSelectionChangedEvent();
    private static void OnCornerRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnCornerRadiusChanged(DependencyPropertyChangedEventArgs e);
    private static void OnIsSelectedChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnIsSelectedChanged(DependencyPropertyChangedEventArgs e);
    private void OnPointerHolding(object sender, HoldingRoutedEventArgs e);
    private void OnPointerCanceled(object sender, PointerRoutedEventArgs e);
    private void OnPointerCaptureLost(object sender, PointerRoutedEventArgs e);
    private void OnPointerEntered(object sender, PointerRoutedEventArgs e);
    private void OnPointerExited(object sender, PointerRoutedEventArgs e);
    private void OnPointerMoved(object sender, PointerRoutedEventArgs e);
    private void OnPointerPressed(object sender, PointerRoutedEventArgs e);
    private void OnPointerReleased(object sender, PointerRoutedEventArgs e);
    private static void OnShouldApplyEffectsBehindContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnShouldApplyEffectsBehindContentChanged(DependencyPropertyChangedEventArgs e);
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void ResetFlags();
    private void UnhookEvents();
    private void AddEffects(SfEffects effects);
    private void AddOrRemoveAutoResetEffect(AutoResetEffects effect, bool isTouchUpEnabled);
    private ColorAnimation GetColorAnimation(Color from, Color to, double duration);
    private DoubleAnimation GetDoubleAnimation(double from, double to, double duration);
    private void RemoveEffects(SfEffects effects);
    private void AddHighlightEffect();
    private void RemoveHighlightEffect();
    private void AddRippleEffect();
    private void RemoveRippleEffect();
    private void RemoveHighlightAndRippleEffects();
    private void UpdateScaleXYValues(double factor);
    private void UpdateScale(double duration);
    private void RemoveScaleEffect(bool forceRemove);
    private void UpdateSelectionEffect();
    private void RemoveSelectionEffect();
    private void UpdateRotation(double duration);
    private void RemoveRotationEffects();
    private void OnHighlightAnimationCompleted(object sender, object e);
    private void OnHighlightFadeOutAnimationCompleted(object sender, object e);
    private void OnRippleAnimationCompleted(object sender, object e);
    private void OnRippleFadeOutAnimationCompleted(object sender, object e);
    private void OnStoryboardWithTransformCompleted(object sender, object e);
    private void OnTransformEffectsRemovingAnimationCompleted(object sender, object e);
    private void OnSelectionAnimationCompleted(object sender, object e);
    protected virtual void SetAutomationId(string id);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SfEffectsView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateProperties(bool isCornerRadiusUpdated, bool isHighlightColorChanged, bool isInitialRippleFactorUpdated, bool isLongPressEffectUpdated, bool isRippleAnimationDurationUpdated, bool canApplyEffectsBehindContent, bool isRippleColorChanged, bool isTouchDownEffectUpdate, bool isTouchUpEffectUpdated, bool isSelectionColorChanged, bool isScaleFactorUpdated, bool isAngleUpdated, bool canIgnoreTouches, bool isSelectionChanged, bool isBackgroundColorChanged, bool isScaleAnimationDurationUpdated, bool isRotationAnimationDurationUpdated, bool canFadeOutRipple, bool isHoverEffectsUpdated, bool isAutoResetEffectUpdate, bool isRippleColorOpacityUpdated, bool isSelectionColorOpacityUpdated, bool isHighlightColorOpacityUpdated);
    private SfEffects ConvertToNative(SfEffects formsEffects);
    private AutoResetEffects ConvertToNativeAutoResetEffect(AutoResetEffects effect);
    [CompilerGeneratedAttribute]
private void <RemoveSelectionEffect>b__202_0(object sender, object e);
}
internal class Syncfusion.XForms.UWP.Graphics.SfGradientViewAutomationPeer : FrameworkElementAutomationPeer {
    public SfGradientViewAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class Syncfusion.XForms.UWP.Graphics.SfGradientViewRenderer : ViewRenderer`2<SfGradientView, Panel> {
    private Point startPoint;
    private Point endPoint;
    private SfGradientBrush gradientBrush;
    private GradientStopCollection gradientStops;
    public static void Init();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SfGradientView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private static Color GetWindowsColor(Color formsColor);
    private void UpdateProperties();
    private void Brush_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void SetBackground();
    private void SetBackgroundBrush(Brush gradientBrush);
    private void SetGradientStops();
    private void AddGradientStops(SfGradientBrush gradientBrush);
    private void Gradient_PropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetAutomationId(string id);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class Syncfusion.XForms.UWP.Shimmer.SfShimmerAutomationPeer : FrameworkElementAutomationPeer {
    public SfShimmerAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class Syncfusion.XForms.UWP.Shimmer.SfShimmerRenderer : ViewRenderer`2<SfShimmer, FrameworkElement> {
    private float columnSpacing;
    private float centerY;
    private float templateX;
    private float templateWidth;
    private float templateHeight;
    private FrameworkElement childRenderer;
    private string animatablePropertyName;
    private SpriteVisual visual;
    private Compositor compositor;
    private CompositionLinearGradientBrush waveBrush;
    private CompositionSurfaceBrush shimmerViewBrush;
    private CompositionMaskBrush maskBrush;
    private Vector2KeyFrameAnimation waveAnimation;
    private CompositionDrawingSurface viewSurface;
    private CompositionGraphicsDevice graphicsDevice;
    private void DrawBuiltInView(CanvasDrawingSession drawingSession);
    private void OnChildRendererSizeChanged(object sender, SizeChangedEventArgs e);
    private void DrawPersona(CanvasDrawingSession drawingSession);
    private void DrawVideo(CanvasDrawingSession drawingSession);
    private void DrawFeed(CanvasDrawingSession drawingSession);
    private void DrawShopping(CanvasDrawingSession drawingSession);
    private void DrawArticle(CanvasDrawingSession drawingSession);
    private void DrawProfile(CanvasDrawingSession drawingSession);
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SfShimmer> e);
    [AsyncStateMachineAttribute("Syncfusion.XForms.UWP.Shimmer.SfShimmerRenderer/<OnElementPropertyChanged>d__24")]
protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void SetAutomationId(string id);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private void InitializeCompositorObjects();
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void DrawShimmer();
    private void ApplyMask();
    private void RestartAnimation();
    private Vector2 GetFinalValue();
    private void UpdateShimmerWaveColor();
    private void DrawShimmerView();
    private ValueTuple`2<double, double> GetPosition(VisualElement view);
    [IteratorStateMachineAttribute("Syncfusion.XForms.UWP.Shimmer.SfShimmerRenderer/<GetShimmerViewRenderers>d__37")]
private IEnumerable`1<ShimmerViewRenderer> GetShimmerViewRenderers(FrameworkElement frameworkElement);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(object sender, PropertyChangedEventArgs e);
}
internal class Syncfusion.XForms.UWP.Shimmer.ShimmerViewAutomationPeer : FrameworkElementAutomationPeer {
    public ShimmerViewAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
internal class Syncfusion.XForms.UWP.Shimmer.ShimmerViewRenderer : ViewRenderer`2<ShimmerView, FrameworkElement> {
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<ShimmerView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void SetAutomationId(string id);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class Syncfusion.XForms.UWP.TextInputLayout.AnimationImplementation : object {
    private TextBlock nativeTextBlock;
    private Storyboard storyboard;
    private double prevTranslatedY;
    private ScaleTransform scaleTransform;
    private TranslateTransform translateTransform;
    private double prevTranslatedX;
    public sealed virtual void AnimateTo(Label label, double xPosition, double yPosition, int duration, double scale, bool canAnimate, bool isRTL);
    public sealed virtual void Dispose();
    private void SetTextBlock(Label label);
    private void SetStoryboard(int duration);
    private void ClearStoryboard();
}
public class Syncfusion.XForms.UWP.TextInputLayout.ClearButtonViewVisibleIcon : ContentPresenter {
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
private bool _contentLoaded;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
public class Syncfusion.XForms.UWP.TextInputLayout.DropDownIcon : ContentPresenter {
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
private bool _contentLoaded;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
internal class Syncfusion.XForms.UWP.TextInputLayout.InputLayoutBorder : Grid {
    private float cornerRadius;
    private float thickness;
    private SolidColorBrush borderColor;
    private SolidColorBrush background;
    private string text;
    private double cutoutStartX;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private Path closedOutlinePath;
    private Path openedOutlinePath;
    private SfTextInputLayout inputLayout;
    [CompilerGeneratedAttribute]
private bool <CanUpdate>k__BackingField;
    internal float CornerRadius { get; internal set; }
    internal float Thickness { get; internal set; }
    internal SolidColorBrush BorderColor { get; internal set; }
    internal SolidColorBrush Background { get; internal set; }
    internal string Text { get; internal set; }
    internal double CutoutStartX { get; internal set; }
    internal bool CanUpdate { get; internal set; }
    internal InputLayoutBorder(SfTextInputLayout parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal float get_CornerRadius();
    internal void set_CornerRadius(float value);
    internal float get_Thickness();
    internal void set_Thickness(float value);
    internal SolidColorBrush get_BorderColor();
    internal void set_BorderColor(SolidColorBrush value);
    internal SolidColorBrush get_Background();
    internal void set_Background(SolidColorBrush value);
    internal string get_Text();
    internal void set_Text(string value);
    internal double get_CutoutStartX();
    internal void set_CutoutStartX(double value);
    protected virtual void NotifyPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
internal bool get_CanUpdate();
    [CompilerGeneratedAttribute]
internal void set_CanUpdate(bool value);
    protected virtual Size MeasureOverride(Size availableSize);
    [AsyncStateMachineAttribute("Syncfusion.XForms.UWP.TextInputLayout.InputLayoutBorder/<ScheduleUpdate>d__37")]
internal void ScheduleUpdate();
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void DrawBorder();
    private void UpdatePathData();
    private PathFigure GetOutlineBorderPathFigure(double textWidth, double adjustment, double leftPosition, double cornerHeight, double cornerWidth, double actualHeight);
    private Size GetTextSize();
    private void SetLabelStyle(TextBlock textBlock);
}
internal class Syncfusion.XForms.UWP.TextInputLayout.InputLayoutBorderRenderer : ViewRenderer`2<InputLayoutBorder, InputLayoutBorder> {
    private InputLayoutBorder nativeBorder;
    private InputLayoutBorder formsBorder;
    private SfTextInputLayout inputLayout;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutBorder> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void OnPointerPressed(object sender, PointerRoutedEventArgs e);
    private void OnPointerReleased(object sender, PointerRoutedEventArgs e);
    private void OnFormsBorderPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnFloatedHintLabelStylePropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Syncfusion.XForms.UWP.TextInputLayout.InputLayoutClearButtonViewRenderer : ViewRenderer`2<InputLayoutClearView, ContentControl> {
    private InputLayoutClearView ClearButtonView;
    private SfTextInputLayout inputLayout;
    private ContentControl contentControl;
    private ContentPresenter ClearButtonIcon;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutClearView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void OnClearButtonViewPressed(object sender, PointerRoutedEventArgs e);
    private void OnClearButtonViewClicked(object sender, PointerRoutedEventArgs e);
}
internal class Syncfusion.XForms.UWP.TextInputLayout.InputLayoutToggleViewRenderer : ViewRenderer`2<InputLayoutToggleView, ContentControl> {
    private InputLayoutToggleView toggleView;
    private SfTextInputLayout inputLayout;
    private ContentControl contentControl;
    private ContentPresenter passwordToggleVisibleIcon;
    private ContentPresenter passwordToggleCollapseIcon;
    private ContentPresenter dropDownIcon;
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<InputLayoutToggleView> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    private void OnToggleViewPressed(object sender, PointerRoutedEventArgs e);
    private void OnToggleViewClicked(object sender, PointerRoutedEventArgs e);
    private void UpdateToggleIcons();
}
internal class Syncfusion.XForms.UWP.TextInputLayout.NativeColorConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, string culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, string culture);
}
internal class Syncfusion.XForms.UWP.TextInputLayout.SfTextInputLayoutAutomationPeer : FrameworkElementAutomationPeer {
    public SfTextInputLayoutAutomationPeer(FrameworkElement owner);
    protected virtual AutomationControlType GetAutomationControlTypeCore();
    protected virtual string GetClassNameCore();
}
public class Syncfusion.XForms.UWP.TextInputLayout.SfTextInputLayoutRenderer : ViewRenderer`2<SfTextInputLayout, FrameworkElement> {
    internal static DependencyProperty TextProperty;
    private TextBox nativeTextBox;
    private bool isDisposed;
    private SfTextInputLayout inputLayout;
    private bool isLoaded;
    private Panel inputViewRenderer;
    private Control nativeNumericUpDown;
    internal string Text { get; internal set; }
    private static SfTextInputLayoutRenderer();
    internal string get_Text();
    internal void set_Text(string value);
    public static void Init();
    protected virtual void OnElementChanged(ElementChangedEventArgs`1<SfTextInputLayout> e);
    protected virtual void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual void SetAutomationId(string id);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [ObsoleteAttribute("This method is no longer needed from v17.3.")]
[EditorBrowsableAttribute("1")]
protected virtual void OnTextBoxLoaded();
    [ObsoleteAttribute("This method is no longer needed from v17.3.")]
[EditorBrowsableAttribute("1")]
protected void UpdateText();
    private static void OnTextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private void OnTextPropertyChanged();
    private void UpdateNativeView(View inputView);
    private void Control_SizeChanged(object sender, SizeChangedEventArgs e);
    private TextBox GetNativeTextBox(FrameworkElement frameworkElement);
    private void OverrideDefaultStyle();
    private void OverrideTextboxForegroundColor();
    private void HookEvents();
    private void OnSizeChanged(object sender, SizeChangedEventArgs e);
    private void OnFocused(object sender, RoutedEventArgs e);
    private void OnUnfocused(object sender, RoutedEventArgs e);
    private void OnLoaded(object sender, RoutedEventArgs e);
    private void UnhookEvents();
    [CompilerGeneratedAttribute]
private void <OnElementPropertyChanged>b__12_0();
}
public class Syncfusion.XForms.UWP.TextInputLayout.ToggleCollapsedIcon : ContentPresenter {
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
private bool _contentLoaded;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
public class Syncfusion.XForms.UWP.TextInputLayout.ToggleVisibleIcon : ContentPresenter {
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
private bool _contentLoaded;
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public void InitializeComponent();
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void Connect(int connectionId, object target);
    [GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", " 10.0.17.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual IComponentConnector GetBindingConnector(int connectionId, object target);
}
