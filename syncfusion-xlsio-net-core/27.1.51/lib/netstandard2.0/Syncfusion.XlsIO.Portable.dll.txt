public enum Syncfusion.CompoundFile.Net.VarEnum : Enum {
    public int value__;
    public static VarEnum VT_ARRAY;
    public static VarEnum VT_BLOB;
    public static VarEnum VT_BLOB_OBJECT;
    public static VarEnum VT_BOOL;
    public static VarEnum VT_BSTR;
    public static VarEnum VT_BYREF;
    public static VarEnum VT_CARRAY;
    public static VarEnum VT_CF;
    public static VarEnum VT_CLSID;
    public static VarEnum VT_CY;
    public static VarEnum VT_DATE;
    public static VarEnum VT_DECIMAL;
    public static VarEnum VT_DISPATCH;
    public static VarEnum VT_EMPTY;
    public static VarEnum VT_ERROR;
    public static VarEnum VT_FILETIME;
    public static VarEnum VT_HRESULT;
    public static VarEnum VT_I1;
    public static VarEnum VT_I2;
    public static VarEnum VT_I4;
    public static VarEnum VT_I8;
    public static VarEnum VT_INT;
    public static VarEnum VT_LPSTR;
    public static VarEnum VT_LPWSTR;
    public static VarEnum VT_NULL;
    public static VarEnum VT_PTR;
    public static VarEnum VT_R4;
    public static VarEnum VT_R8;
    public static VarEnum VT_RECORD;
    public static VarEnum VT_SAFEARRAY;
    public static VarEnum VT_STORAGE;
    public static VarEnum VT_STORED_OBJECT;
    public static VarEnum VT_STREAM;
    public static VarEnum VT_STREAMED_OBJECT;
    public static VarEnum VT_UI1;
    public static VarEnum VT_UI2;
    public static VarEnum VT_UI4;
    public static VarEnum VT_UI8;
    public static VarEnum VT_UINT;
    public static VarEnum VT_UNKNOWN;
    public static VarEnum VT_USERDEFINED;
    public static VarEnum VT_VARIANT;
    public static VarEnum VT_VECTOR;
    public static VarEnum VT_VOID;
}
public enum Syncfusion.CompoundFile.XlsIO.BuiltInProperty : Enum {
    public int value__;
    public static BuiltInProperty Title;
    public static BuiltInProperty Subject;
    public static BuiltInProperty Author;
    public static BuiltInProperty Keywords;
    public static BuiltInProperty Comments;
    public static BuiltInProperty Template;
    public static BuiltInProperty LastAuthor;
    public static BuiltInProperty RevisionNumber;
    public static BuiltInProperty EditTime;
    public static BuiltInProperty LastPrinted;
    public static BuiltInProperty CreationDate;
    public static BuiltInProperty LastSaveDate;
    public static BuiltInProperty PageCount;
    public static BuiltInProperty WordCount;
    public static BuiltInProperty CharCount;
    public static BuiltInProperty Thumbnail;
    public static BuiltInProperty ApplicationName;
    public static BuiltInProperty Security;
    public static BuiltInProperty Category;
    public static BuiltInProperty PresentationTarget;
    public static BuiltInProperty ByteCount;
    public static BuiltInProperty LineCount;
    public static BuiltInProperty ParagraphCount;
    public static BuiltInProperty SlideCount;
    public static BuiltInProperty NoteCount;
    public static BuiltInProperty HiddenCount;
    public static BuiltInProperty MultimediaClipCount;
    public static BuiltInProperty ScaleCrop;
    public static BuiltInProperty HeadingPair;
    public static BuiltInProperty DocParts;
    public static BuiltInProperty Manager;
    public static BuiltInProperty Company;
    public static BuiltInProperty LinksDirty;
    public static BuiltInProperty CharactersWithSpaces;
}
public class Syncfusion.CompoundFile.XlsIO.ClipboardData : object {
    public int Format;
    public Byte[] Data;
    public sealed virtual object Clone();
    public int Serialize(Stream stream);
    public void Parse(Stream stream);
}
public abstract class Syncfusion.CompoundFile.XlsIO.CompoundStream : Stream {
    private string m_strStreamName;
    public string Name { get; protected set; }
    public CompoundStream(string streamName);
    public virtual void CopyTo(CompoundStream stream);
    public string get_Name();
    protected void set_Name(string value);
}
public class Syncfusion.CompoundFile.XlsIO.DocumentPropertyImpl : object {
    private static int DEF_START_ID2;
    public static int DEF_FILE_TIME_START_YEAR;
    private BuiltInProperty m_propertyId;
    private string m_strName;
    private object m_value;
    private PropertyType m_type;
    private string m_strLinkSource;
    private bool m_bLinkToContent;
    public bool IsBuiltIn { get; }
    public BuiltInProperty PropertyId { get; public set; }
    public string Name { get; }
    public object Value { get; public set; }
    public bool Boolean { get; public set; }
    public int Integer { get; public set; }
    public int Int32 { get; public set; }
    public double Double { get; public set; }
    public string Text { get; public set; }
    public DateTime DateTime { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public Byte[] Blob { get; public set; }
    public ClipboardData ClipboardData { get; public set; }
    public String[] StringArray { get; public set; }
    public Object[] ObjectArray { get; public set; }
    public PropertyType PropertyType { get; public set; }
    public string LinkSource { get; public set; }
    public bool LinkToContent { get; public set; }
    public string InternalName { get; }
    public DocumentPropertyImpl(string strName, object value);
    public DocumentPropertyImpl(BuiltInProperty propertyId, object value);
    public DocumentPropertyImpl(IPropertyData variant, bool bSummary);
    public sealed virtual bool get_IsBuiltIn();
    public sealed virtual BuiltInProperty get_PropertyId();
    public void set_PropertyId(BuiltInProperty value);
    public sealed virtual string get_Name();
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
    public sealed virtual bool get_Boolean();
    public sealed virtual void set_Boolean(bool value);
    public sealed virtual int get_Integer();
    public sealed virtual void set_Integer(int value);
    public sealed virtual int get_Int32();
    public sealed virtual void set_Int32(int value);
    public sealed virtual double get_Double();
    public sealed virtual void set_Double(double value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    private PropertyType DetectStringType(string value);
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    public sealed virtual TimeSpan get_TimeSpan();
    public sealed virtual void set_TimeSpan(TimeSpan value);
    public Byte[] get_Blob();
    public void set_Blob(Byte[] value);
    public ClipboardData get_ClipboardData();
    public void set_ClipboardData(ClipboardData value);
    public String[] get_StringArray();
    public void set_StringArray(String[] value);
    public Object[] get_ObjectArray();
    public void set_ObjectArray(Object[] value);
    public PropertyType get_PropertyType();
    public void set_PropertyType(PropertyType value);
    public sealed virtual string get_LinkSource();
    public sealed virtual void set_LinkSource(string value);
    public sealed virtual bool get_LinkToContent();
    public sealed virtual void set_LinkToContent(bool value);
    public string get_InternalName();
    public bool FillPropVariant(IPropertyData variant, int iPropertyId);
    public static int CorrectIndex(BuiltInProperty propertyId, Boolean& bSummary);
    private void DetectPropertyType();
    public void SetLinkSource(IPropertyData variant);
    public sealed virtual object Clone();
    private void CloneValue();
}
public interface Syncfusion.CompoundFile.XlsIO.ICompoundFile {
    public ICompoundStorage RootStorage { get; }
    public abstract virtual ICompoundStorage get_RootStorage();
    public abstract virtual void Flush();
    public abstract virtual void Save(Stream stream);
}
public interface Syncfusion.CompoundFile.XlsIO.ICompoundStorage {
    public String[] Streams { get; }
    public String[] Storages { get; }
    public string Name { get; }
    public abstract virtual CompoundStream CreateStream(string streamName);
    public abstract virtual CompoundStream OpenStream(string streamName);
    public abstract virtual void DeleteStream(string streamName);
    public abstract virtual bool ContainsStream(string streamName);
    public abstract virtual ICompoundStorage CreateStorage(string storageName);
    public abstract virtual ICompoundStorage OpenStorage(string storageName);
    public abstract virtual void DeleteStorage(string storageName);
    public abstract virtual bool ContainsStorage(string storageName);
    public abstract virtual void Flush();
    public abstract virtual String[] get_Streams();
    public abstract virtual String[] get_Storages();
    public abstract virtual string get_Name();
    public abstract virtual void InsertCopy(ICompoundStorage storageToCopy);
    public abstract virtual void InsertCopy(CompoundStream streamToCopy);
}
public interface Syncfusion.CompoundFile.XlsIO.IDocumentProperty {
    public bool IsBuiltIn { get; }
    public BuiltInProperty PropertyId { get; }
    public string Name { get; }
    public object Value { get; public set; }
    public bool Boolean { get; public set; }
    public int Integer { get; public set; }
    public int Int32 { get; public set; }
    public double Double { get; public set; }
    public string Text { get; public set; }
    public DateTime DateTime { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public string LinkSource { get; public set; }
    public bool LinkToContent { get; public set; }
    public abstract virtual bool get_IsBuiltIn();
    public abstract virtual BuiltInProperty get_PropertyId();
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual bool get_Boolean();
    public abstract virtual void set_Boolean(bool value);
    public abstract virtual int get_Integer();
    public abstract virtual void set_Integer(int value);
    public abstract virtual int get_Int32();
    public abstract virtual void set_Int32(int value);
    public abstract virtual double get_Double();
    public abstract virtual void set_Double(double value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual DateTime get_DateTime();
    public abstract virtual void set_DateTime(DateTime value);
    public abstract virtual TimeSpan get_TimeSpan();
    public abstract virtual void set_TimeSpan(TimeSpan value);
    public abstract virtual string get_LinkSource();
    public abstract virtual void set_LinkSource(string value);
    public abstract virtual bool get_LinkToContent();
    public abstract virtual void set_LinkToContent(bool value);
}
public class Syncfusion.CompoundFile.XlsIO.Net.CompoundFile : object {
    private static string RootEntryName;
    private Stream m_stream;
    private FileHeader m_header;
    private FAT m_fat;
    private DIF m_dif;
    private Directory m_directory;
    private CompoundStorage m_root;
    private Stream m_shortStream;
    private Stream m_miniFatStream;
    private FAT m_miniFat;
    private bool m_bDirectMode;
    internal FileHeader Header { get; }
    public Directory Directory { get; }
    public ICompoundStorage Root { get; }
    internal DIF DIF { get; }
    internal FAT Fat { get; }
    internal Stream BaseStream { get; }
    internal bool DirectMode { get; internal set; }
    public ICompoundStorage RootStorage { get; }
    public CompoundFile(Stream stream);
    internal FileHeader get_Header();
    public Directory get_Directory();
    public ICompoundStorage get_Root();
    internal DIF get_DIF();
    internal FAT get_Fat();
    internal Stream get_BaseStream();
    internal bool get_DirectMode();
    internal void set_DirectMode(bool value);
    public void Open(Stream stream);
    private void InitializeVariables();
    internal void ReadSector(Byte[] buffer, int offset, int sectorIndex, FileHeader header);
    internal Stream GetEntryStream(DirectoryEntry entry);
    internal void SetEntryStream(DirectoryEntry entry, Stream stream);
    private void SetEntryLongStream(DirectoryEntry entry, Stream stream);
    private void SetEntryShortStream(DirectoryEntry entry, Stream stream);
    private void WriteData(Stream destination, int startSector, Stream stream, FAT fat);
    private void AllocateSectors(DirectoryEntry entry, int iAllocatedSectors, int iRequiredSectors, FAT fat);
    private int AllocateSectors(int iSector, int iAllocatedSectors, int iRequiredSectors, FAT fat);
    [CLSCompliantAttribute("False")]
public static long GetSectorOffset(int sectorIndex, ushort sectorShift);
    [CLSCompliantAttribute("False")]
public static long GetSectorOffset(int sectorIndex, ushort sectorShift, int headerSize);
    public static bool CheckHeader(Stream stream);
    internal DirectoryEntry AllocateDirectoryEntry(string streamName, EntryType entryType);
    internal void RemoveItem(DirectoryEntry directoryEntry);
    internal int ReadData(DirectoryEntry entry, long position, Byte[] buffer, int length);
    internal void WriteData(DirectoryEntry entry, long position, Byte[] buffer, int offset, int length);
    private void GetOffsets(DirectoryEntry entry, long position, Int32& iCurrentOffset, Int32& iCurrentSector);
    public sealed virtual ICompoundStorage get_RootStorage();
    public sealed virtual void Flush();
    public sealed virtual void Save(Stream stream);
    private void WriteStreamTo(Stream destination);
    private void SaveMiniStream();
    private void SerializeDirectory();
    public sealed virtual void Dispose();
}
public class Syncfusion.CompoundFile.XlsIO.Net.CompoundFileException : Exception {
    private static string DefaultExceptionMessage;
    public CompoundFileException(string message);
}
internal class Syncfusion.CompoundFile.XlsIO.Net.CompoundStorage : object {
    private CompoundFile m_parentFile;
    private SortedList`2<string, ICompoundItem> m_nodes;
    private DirectoryEntry m_entry;
    private List`1<string> m_arrStorages;
    private List`1<string> m_arrStreams;
    private List`1<int> m_entryIndexes;
    public String[] Streams { get; }
    public String[] Storages { get; }
    public string Name { get; }
    public DirectoryEntry Entry { get; }
    public CompoundStorage(CompoundFile parent, string name, int entryIndex);
    public CompoundStorage(CompoundFile parentFile, DirectoryEntry entry);
    private void AddItem(int entryIndex);
    public sealed virtual CompoundStream CreateStream(string streamName);
    public sealed virtual CompoundStream OpenStream(string streamName);
    public sealed virtual void DeleteStream(string streamName);
    public sealed virtual bool ContainsStream(string streamName);
    public sealed virtual ICompoundStorage CreateStorage(string storageName);
    public sealed virtual ICompoundStorage OpenStorage(string storageName);
    private void Open();
    public sealed virtual void DeleteStorage(string storageName);
    public sealed virtual void Dispose();
    public sealed virtual bool ContainsStorage(string storageName);
    public sealed virtual void Flush();
    private void UpdateDirectory(RBTreeNode node);
    private int GetNodeId(RBTreeNode node);
    public sealed virtual String[] get_Streams();
    public sealed virtual String[] get_Storages();
    public sealed virtual string get_Name();
    public sealed virtual DirectoryEntry get_Entry();
    public sealed virtual void InsertCopy(ICompoundStorage storageToCopy);
    public sealed virtual void InsertCopy(CompoundStream streamToCopy);
}
internal class Syncfusion.CompoundFile.XlsIO.Net.CompoundStorageWrapper : object {
    private CompoundStorage m_storage;
    public String[] Streams { get; }
    public String[] Storages { get; }
    public string Name { get; }
    public DirectoryEntry Entry { get; }
    public CompoundStorageWrapper(CompoundStorage wrapped);
    public sealed virtual void Dispose();
    public sealed virtual CompoundStream CreateStream(string streamName);
    public sealed virtual CompoundStream OpenStream(string streamName);
    public sealed virtual void DeleteStream(string streamName);
    public sealed virtual bool ContainsStream(string streamName);
    public sealed virtual ICompoundStorage CreateStorage(string storageName);
    public sealed virtual ICompoundStorage OpenStorage(string storageName);
    public sealed virtual void DeleteStorage(string storageName);
    public sealed virtual bool ContainsStorage(string storageName);
    public sealed virtual void Flush();
    public sealed virtual String[] get_Streams();
    public sealed virtual String[] get_Storages();
    public sealed virtual string get_Name();
    public DirectoryEntry get_Entry();
    public sealed virtual void InsertCopy(ICompoundStorage storageToCopy);
    internal void UpdateStorageGuid(ICompoundStorage storageToCopy);
    public sealed virtual void InsertCopy(CompoundStream streamToCopy);
}
internal class Syncfusion.CompoundFile.XlsIO.Net.CompoundStreamDirect : CompoundStreamNet {
    private static int MinimumSize;
    private long m_lPosition;
    public long Length { get; }
    public long Position { get; public set; }
    public CompoundStreamDirect(CompoundFile file, DirectoryEntry entry);
    public virtual void Open();
    public virtual int Read(Byte[] buffer, int offset, int length);
    public virtual void Write(Byte[] buffer, int offset, int length);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
}
internal class Syncfusion.CompoundFile.XlsIO.Net.CompoundStreamNet : CompoundStream {
    private CompoundFile m_parentFile;
    private DirectoryEntry m_entry;
    private Stream m_stream;
    public DirectoryEntry Entry { get; }
    protected Stream Stream { get; protected set; }
    public CompoundFile ParentFile { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public CompoundStreamNet(CompoundFile file, DirectoryEntry entry);
    public sealed virtual DirectoryEntry get_Entry();
    protected Stream get_Stream();
    protected void set_Stream(Stream value);
    public CompoundFile get_ParentFile();
    public virtual void Open();
    public virtual int Read(Byte[] buffer, int offset, int length);
    public virtual void Write(Byte[] buffer, int offset, int length);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public void Dispose();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    protected virtual void Dispose(bool disposing);
}
internal class Syncfusion.CompoundFile.XlsIO.Net.CompoundStreamWrapper : CompoundStream {
    private CompoundStream m_stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CompoundStreamWrapper(CompoundStream wrapped);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
internal class Syncfusion.CompoundFile.XlsIO.Net.DIF : object {
    public static int SectorsInHeader;
    private List`1<int> m_arrSectorID;
    private List`1<int> m_arrDifSectors;
    public List`1<int> SectorIds { get; }
    public DIF(Stream stream, FileHeader header);
    public List`1<int> get_SectorIds();
    internal void Write(Stream stream, FileHeader header);
    internal void AllocateSectors(int fatSectorsRequired, FAT fat);
    private void AllocateDifSectors(int additionalSectors, FAT fat);
    private void RemoveLastSectors(int sectorCount, FAT fat);
    private void AddDifSectors(int sectorCount, FAT fat);
}
public class Syncfusion.CompoundFile.XlsIO.Net.Directory : object {
    private List`1<DirectoryEntry> m_lstEntries;
    public List`1<DirectoryEntry> Entries { get; }
    public Directory(Byte[] data);
    public List`1<DirectoryEntry> get_Entries();
    public int FindEmpty();
    public void Add(DirectoryEntry entry);
    public void Write(Stream stream);
}
public class Syncfusion.CompoundFile.XlsIO.Net.DirectoryEntry : object {
    public static int SizeInFile;
    private static int StreamNameSize;
    private string m_strName;
    private EntryType m_entryType;
    private byte m_color;
    private int m_leftId;
    private int m_rightId;
    private int m_childId;
    private Guid m_storageGuid;
    private int m_iStorageFlags;
    private DateTime m_dateCreate;
    private DateTime m_dateModify;
    private int m_iStartSector;
    private UInt32 m_uiSize;
    private int m_iReserved;
    private int m_iEntryId;
    public int LastSector;
    public int LastOffset;
    public string Name { get; public set; }
    public EntryType Type { get; public set; }
    public byte Color { get; public set; }
    public int LeftId { get; public set; }
    public int RightId { get; public set; }
    public int ChildId { get; public set; }
    public Guid StorageGuid { get; public set; }
    public int StorageFlags { get; public set; }
    public DateTime DateCreate { get; public set; }
    public DateTime DateModify { get; public set; }
    public int StartSector { get; public set; }
    public UInt32 Size { get; public set; }
    public int Reserved { get; public set; }
    public int EntryId { get; internal set; }
    public DirectoryEntry(string name, EntryType type, int entryId);
    public DirectoryEntry(Byte[] data, int offset, int entryId);
    public string get_Name();
    public void set_Name(string value);
    public EntryType get_Type();
    public void set_Type(EntryType value);
    public byte get_Color();
    public void set_Color(byte value);
    public int get_LeftId();
    public void set_LeftId(int value);
    public int get_RightId();
    public void set_RightId(int value);
    public int get_ChildId();
    public void set_ChildId(int value);
    public Guid get_StorageGuid();
    public void set_StorageGuid(Guid value);
    public int get_StorageFlags();
    public void set_StorageFlags(int value);
    public DateTime get_DateCreate();
    public void set_DateCreate(DateTime value);
    public DateTime get_DateModify();
    public void set_DateModify(DateTime value);
    public int get_StartSector();
    public void set_StartSector(int value);
    public UInt32 get_Size();
    public void set_Size(UInt32 value);
    public int get_Reserved();
    public void set_Reserved(int value);
    public int get_EntryId();
    internal void set_EntryId(int value);
    public void Write(Stream stream);
}
public class Syncfusion.CompoundFile.XlsIO.Net.DocumentPropertyCollection : object {
    private static int ByteOrder;
    private static Guid FirstSectionGuid;
    private int m_iFirstSectionOffset;
    private List`1<PropertySection> m_lstSections;
    public List`1<PropertySection> Sections { get; }
    public DocumentPropertyCollection(Stream stream);
    private static DocumentPropertyCollection();
    public List`1<PropertySection> get_Sections();
    private void ParseSections(Stream stream);
    private void ReadHeader(Stream stream);
    private void WriteSections(Stream stream);
    private void WriteHeader(Stream stream);
    public void Serialize(Stream stream);
}
internal class Syncfusion.CompoundFile.XlsIO.Net.FAT : object {
    private List`1<int> m_lstFatChains;
    private List`1<int> m_freeSectors;
    private ushort m_usSectorShift;
    private Stream m_stream;
    private int m_iHeaderSize;
    public int SectorSize { get; }
    public FAT(Stream parentStream, ushort sectorShift, int headerSize);
    public FAT(Stream parentStream, ushort sectorShift, Stream fatStreamToParse, int headerSize);
    public FAT(CompoundFile file, Stream stream, DIF dif, FileHeader header);
    public int get_SectorSize();
    public Byte[] GetStream(Stream stream, int firstSector, CompoundFile file);
    internal int NextSector(int sectorIndex);
    internal void CloseChain(int iSector);
    internal int EnlargeChain(int sector, int sectorCount);
    internal void FreeSector(int sector);
    private void FreeLastSector();
    private int AllocateNewSectors(Int32& sector, int count);
    private int AddSectors(int count);
    private int AllocateFreeSectors(Int32& sector, int count);
    public void Write(Stream stream, DIF dif, FileHeader header);
    private void AllocateFatSectors(int fatSectorsCount, DIF dif);
    private int FillNextSector(int fatItemToStart, Byte[] arrSector);
    internal int AllocateSector(int sectorType);
    internal int AddSector();
    internal void WriteSimple(MemoryStream stream, int sectorSize);
    internal long GetSectorOffset(int sectorIndex);
    internal int GetChainLength(int firstSector);
}
internal class Syncfusion.CompoundFile.XlsIO.Net.FileHeader : object {
    public static int HeaderSize;
    private static int SignatureSize;
    private static Byte[] DefaultSignature;
    internal static int ShortSize;
    internal static int IntSize;
    private Byte[] m_arrSignature;
    private Guid m_classId;
    private ushort m_usMinorVersion;
    private ushort m_usDllVersion;
    private ushort m_usByteOrder;
    private ushort m_usSectorShift;
    private ushort m_usMiniSectorShift;
    private ushort m_usReserved;
    private UInt32 m_uiReserved1;
    private UInt32 m_uiReserved2;
    private int m_iFatSectorsNumber;
    private int m_iDirectorySectorStart;
    private int m_iSignature;
    private UInt32 m_uiMiniSectorCutoff;
    private int m_iMiniFastStart;
    private int m_iMiniFatNumber;
    private int m_iDifStart;
    private int m_iDifNumber;
    private Int32[] m_arrFatStart;
    public int SectorSize { get; }
    public ushort MinorVersion { get; }
    public ushort DllVersion { get; }
    public ushort ByteOrder { get; }
    public ushort SectorShift { get; }
    public ushort MiniSectorShift { get; }
    public ushort Reserved { get; }
    public UInt32 Reserved1 { get; }
    public UInt32 Reserved2 { get; }
    public int FatSectorsNumber { get; public set; }
    public int DirectorySectorStart { get; public set; }
    public int Signature { get; }
    public UInt32 MiniSectorCutoff { get; }
    public int MiniFastStart { get; public set; }
    public int MiniFatNumber { get; public set; }
    public int DifStart { get; public set; }
    public int DifNumber { get; public set; }
    public Int32[] FatStart { get; }
    public FileHeader(Stream stream);
    private static FileHeader();
    public void Serialize(Stream stream);
    public static bool CheckSignature(Stream stream);
    private void CheckSignature();
    private static bool CheckSignature(Byte[] arrSignature);
    private void WriteUInt16(Byte[] buffer, int offset, ushort value);
    private void WriteUInt32(Byte[] buffer, int offset, UInt32 value);
    private void WriteInt32(Byte[] buffer, int offset, int value);
    public int get_SectorSize();
    public ushort get_MinorVersion();
    public ushort get_DllVersion();
    public ushort get_ByteOrder();
    public ushort get_SectorShift();
    public ushort get_MiniSectorShift();
    public ushort get_Reserved();
    public UInt32 get_Reserved1();
    public UInt32 get_Reserved2();
    public int get_FatSectorsNumber();
    public void set_FatSectorsNumber(int value);
    public int get_DirectorySectorStart();
    public void set_DirectorySectorStart(int value);
    public int get_Signature();
    public UInt32 get_MiniSectorCutoff();
    public int get_MiniFastStart();
    public void set_MiniFastStart(int value);
    public int get_MiniFatNumber();
    public void set_MiniFatNumber(int value);
    public int get_DifStart();
    public void set_DifStart(int value);
    public int get_DifNumber();
    public void set_DifNumber(int value);
    public Int32[] get_FatStart();
    internal void Write(Stream stream);
    internal long GetSectorOffset(int sectorIndex);
    internal long GetSectorOffset(int sectorIndex, int headerSize);
}
internal interface Syncfusion.CompoundFile.XlsIO.Net.ICompoundItem {
    public DirectoryEntry Entry { get; }
    public abstract virtual DirectoryEntry get_Entry();
    public abstract virtual void Flush();
}
public interface Syncfusion.CompoundFile.XlsIO.Net.IPropertyData {
    public object Value { get; }
    public VarEnum Type { get; }
    public string Name { get; }
    public int Id { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual VarEnum get_Type();
    public abstract virtual string get_Name();
    public abstract virtual int get_Id();
    public abstract virtual void set_Id(int value);
    public abstract virtual bool SetValue(object value, PropertyType type);
}
internal class Syncfusion.CompoundFile.XlsIO.Net.ItemNamesComparer : object {
    public sealed virtual int Compare(object x, object y);
    public sealed virtual int Compare(string x, string y);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.CompoundFile.XlsIO.Net.MapCollection : object {
    private RBTreeNode m_MyHead;
    private int m_size;
    private IComparer m_comparer;
    public RBTreeNode Empty { get; }
    public int Count { get; }
    public object Item { get; public set; }
    public MapCollection(IComparer comparer);
    public RBTreeNode get_Empty();
    public int get_Count();
    public object get_Item(object key);
    public void set_Item(object key, object value);
    protected void Initialize();
    public void Clear();
    public void Add(object key, object value);
    public bool Contains(object key);
    public void Remove(object key);
    private RBTreeNode begin();
    public static RBTreeNode Min(RBTreeNode node);
    public static RBTreeNode Max(RBTreeNode node);
    public static RBTreeNode Inc(RBTreeNode node);
    public static RBTreeNode Dec(RBTreeNode node);
    protected RBTreeNode LBound(object key);
    protected RBTreeNode UBound(object key);
    protected void LRotate(RBTreeNode _where);
    protected void RRotate(RBTreeNode _where);
    protected void Erase(RBTreeNode _root);
    protected void Insert(bool _addLeft, RBTreeNode _where, object key, object value);
    public sealed virtual IEnumerator GetEnumerator();
    internal void ForAll(NodeFunction function);
    private void ForAll(RBTreeNode startNode, NodeFunction function);
}
public class Syncfusion.CompoundFile.XlsIO.Net.MapEnumerator : object {
    private RBTreeNode m_current;
    private RBTreeNode m_parent;
    private object System.Collections.IEnumerator.Current { get; }
    public RBTreeNode Current { get; }
    public MapEnumerator(RBTreeNode parent);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public RBTreeNode get_Current();
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
}
public enum Syncfusion.CompoundFile.XlsIO.Net.NodeColor : Enum {
    public int value__;
    public static NodeColor Red;
    public static NodeColor Black;
}
public class Syncfusion.CompoundFile.XlsIO.Net.PropertyData : object {
    private static int LinkBit;
    private static int NamesDictionaryId;
    public static long DEF_FILETIME_TICKS_DIFFERENCE;
    private int m_iId;
    private string m_strName;
    public PropertyType PropertyType;
    public object Data;
    public bool IsLinkToSource { get; }
    public int ParentId { get; }
    public int Id { get; public set; }
    public object Value { get; public set; }
    public VarEnum Type { get; public set; }
    public string Name { get; public set; }
    public PropertyData(int id);
    public bool get_IsLinkToSource();
    public int get_ParentId();
    public sealed virtual int get_Id();
    public sealed virtual void set_Id(int value);
    public void Parse(Stream stream, int roundedSize);
    internal void Parse(Stream stream, int roundedSize, int codePage);
    internal bool IsValidProperty();
    private IList ParseVector(Stream stream, int roundedSize);
    internal IList ParseVector(Stream stream, int roundedSize, int codePage);
    private IList CreateArray(PropertyType itemType, int count);
    private object ParseSingleValue(PropertyType itemType, Stream stream, int roundedSize);
    internal object ParseSingleValue(PropertyType itemType, Stream stream, int roundedSize, int codePage);
    private object GetDateTime(Stream stream, Byte[] buffer);
    private object GetBlob(Stream stream, Byte[] buffer);
    private object GetClipboardData(Stream stream, Byte[] buffer);
    private object GetObject(Stream stream, int roundedSize);
    private object GetObject(Stream stream, int roundedSize, int codePage);
    private int WriteObject(Stream stream, object value);
    public int Serialize(Stream stream);
    private int SerializeDictionary(Stream stream, Dictionary`2<int, string> dictionary);
    private int SerializeVector(Stream stream, IList data);
    private int SerializeSingleValue(Stream stream, object value, PropertyType valueType);
    private int SerializeClipboardData(Stream stream, ClipboardData data);
    private int SerializeBlob(Stream stream, Byte[] value);
    public sealed virtual bool SetValue(object value, PropertyType type);
    public sealed virtual object get_Value();
    public void set_Value(object value);
    public sealed virtual VarEnum get_Type();
    public void set_Type(VarEnum value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public sealed virtual int CompareTo(object obj);
}
public class Syncfusion.CompoundFile.XlsIO.Net.PropertySection : object {
    private static int PropertyNamesId;
    private static short UnicodeCodePage;
    private int m_iOffset;
    private Guid m_id;
    private int m_iLength;
    private List`1<PropertyData> m_lstProperties;
    private int m_sCodePage;
    private DictionaryInfo m_dictionaryInfo;
    public int Offset { get; public set; }
    public Guid Id { get; public set; }
    public int Length { get; public set; }
    public int Count { get; }
    public List`1<PropertyData> Properties { get; }
    public PropertySection(Guid guid, int sectionOffset);
    public int get_Offset();
    public void set_Offset(int value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public int get_Length();
    public void set_Length(int value);
    public int get_Count();
    public List`1<PropertyData> get_Properties();
    public void Parse(Stream stream);
    private void ParseDictionary(Stream stream, Dictionary`2& dictNames);
    private Dictionary`2<int, string> ParsePropertyNames(Stream stream, DictionaryInfo dictionaryInfo);
    private void ParseSpecialProperties(PropertyData property, Stream stream, int reservedSize, Dictionary`2& dictNames);
    private Dictionary`2<int, string> ParsePropertyNames(Stream stream);
    public void Serialize(Stream stream);
    private Dictionary`2<int, string> PrepareNames();
}
public class Syncfusion.CompoundFile.XlsIO.Net.RBTreeNode : object {
    private RBTreeNode m_left;
    private RBTreeNode m_right;
    private RBTreeNode m_parent;
    private NodeColor m_color;
    private bool m_bIsNil;
    private object m_key;
    private object m_value;
    public RBTreeNode Left { get; public set; }
    public RBTreeNode Right { get; public set; }
    public RBTreeNode Parent { get; public set; }
    public NodeColor Color { get; public set; }
    public bool IsNil { get; public set; }
    public object Key { get; public set; }
    public object Value { get; public set; }
    public bool IsRed { get; }
    public bool IsBlack { get; }
    public RBTreeNode(RBTreeNode left, RBTreeNode parent, RBTreeNode right, object key, object value);
    public RBTreeNode(RBTreeNode left, RBTreeNode parent, RBTreeNode right, object key, object value, NodeColor color);
    public RBTreeNode get_Left();
    public void set_Left(RBTreeNode value);
    public RBTreeNode get_Right();
    public void set_Right(RBTreeNode value);
    public RBTreeNode get_Parent();
    public void set_Parent(RBTreeNode value);
    public NodeColor get_Color();
    public void set_Color(NodeColor value);
    public bool get_IsNil();
    public void set_IsNil(bool value);
    public object get_Key();
    public void set_Key(object value);
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsRed();
    public bool get_IsBlack();
}
internal class Syncfusion.CompoundFile.XlsIO.Net.SectorTypes : object {
    public static int FreeSector;
    public static int EndOfChain;
    public static int FatSector;
    public static int DifSector;
}
public static class Syncfusion.CompoundFile.XlsIO.Net.StreamHelper : object {
    public static int IntSize;
    private static int ShortSize;
    private static int DoubleSize;
    public static short ReadInt16(Stream stream, Byte[] buffer);
    public static int ReadInt32(Stream stream, Byte[] buffer);
    public static double ReadDouble(Stream stream, Byte[] buffer);
    public static int WriteInt16(Stream stream, short value);
    public static int WriteInt32(Stream stream, int value);
    public static int WriteDouble(Stream stream, double value);
    public static string GetAsciiString(Stream stream, int roundedSize);
    internal static string GetAsciiString(Stream stream, int roundedSize, int codePage);
    public static string GetUnicodeString(Stream stream, int roundedSize);
    public static int WriteAsciiString(Stream stream, string value, bool align);
    public static int WriteUnicodeString(Stream stream, string value);
    public static int WriteString(Stream stream, string value, Encoding encoding, bool align);
    public static void AddPadding(Stream stream, Int32& iWrittenSize);
    private static string RemoveLastZero(string value);
}
public enum Syncfusion.CompoundFile.XlsIO.PIDDSI : Enum {
    public int value__;
    public static PIDDSI Category;
    public static PIDDSI PresFormat;
    public static PIDDSI ByteCount;
    public static PIDDSI LineCount;
    public static PIDDSI ParCount;
    public static PIDDSI SlideCount;
    public static PIDDSI NoteCount;
    public static PIDDSI HiddenCount;
    public static PIDDSI MmclipCount;
    public static PIDDSI Scale;
    public static PIDDSI HeadingPair;
    public static PIDDSI DocParts;
    public static PIDDSI Manager;
    public static PIDDSI Company;
    public static PIDDSI LinksDirty;
}
public enum Syncfusion.CompoundFile.XlsIO.PIDSI : Enum {
    public int value__;
    public static PIDSI Title;
    public static PIDSI Subject;
    public static PIDSI Author;
    public static PIDSI Keywords;
    public static PIDSI Comments;
    public static PIDSI Template;
    public static PIDSI LastAuthor;
    public static PIDSI Revnumber;
    public static PIDSI EditTime;
    public static PIDSI LastPrinted;
    public static PIDSI Create_dtm;
    public static PIDSI LastSave_dtm;
    public static PIDSI Pagecount;
    public static PIDSI Wordcount;
    public static PIDSI Charcount;
    public static PIDSI Thumbnail;
    public static PIDSI Appname;
    public static PIDSI Doc_security;
}
[FlagsAttribute]
public enum Syncfusion.CompoundFile.XlsIO.PropertyType : Enum {
    public int value__;
    public static PropertyType Bool;
    public static PropertyType Int;
    public static PropertyType Int32;
    public static PropertyType Int16;
    public static PropertyType UInt32;
    public static PropertyType String;
    public static PropertyType AsciiString;
    public static PropertyType DateTime;
    public static PropertyType Blob;
    public static PropertyType Vector;
    public static PropertyType Object;
    public static PropertyType Double;
    public static PropertyType Empty;
    public static PropertyType Null;
    public static PropertyType ClipboardData;
    public static PropertyType AsciiStringArray;
    public static PropertyType StringArray;
    public static PropertyType ObjectArray;
}
public enum Syncfusion.CompoundFile.XlsIO.STGM : Enum {
    public int value__;
    public static STGM STGM_READ;
    public static STGM STGM_WRITE;
    public static STGM STGM_READWRITE;
    public static STGM STGM_SHARE_DENY_NONE;
    public static STGM STGM_SHARE_DENY_READ;
    public static STGM STGM_SHARE_DENY_WRITE;
    public static STGM STGM_SHARE_EXCLUSIVE;
    public static STGM STGM_PRIORITY;
    public static STGM STGM_CREATE;
    public static STGM STGM_CONVERT;
    public static STGM STGM_FAILIFTHERE;
    public static STGM STGM_DIRECT;
    public static STGM STGM_TRANSACTED;
    public static STGM STGM_NOSCRATCH;
    public static STGM STGM_NOSNAPSHOT;
    public static STGM STGM_SIMPLE;
    public static STGM STGM_DIRECT_SWMR;
    public static STGM STGM_DELETEONRELEASE;
}
internal enum Syncfusion.Drawing.AutoShapeConstant : Enum {
    public int value__;
    public static AutoShapeConstant Index_0;
    public static AutoShapeConstant Index_1;
    public static AutoShapeConstant Index_2;
    public static AutoShapeConstant Index_3;
    public static AutoShapeConstant Index_4;
    public static AutoShapeConstant Index_5;
    public static AutoShapeConstant Index_6;
    public static AutoShapeConstant Index_7;
    public static AutoShapeConstant Index_8;
    public static AutoShapeConstant Index_9;
    public static AutoShapeConstant Index_10;
    public static AutoShapeConstant Index_11;
    public static AutoShapeConstant Index_12;
    public static AutoShapeConstant Index_13;
    public static AutoShapeConstant Index_14;
    public static AutoShapeConstant Index_15;
    public static AutoShapeConstant Index_16;
    public static AutoShapeConstant Index_17;
    public static AutoShapeConstant Index_18;
    public static AutoShapeConstant Index_19;
    public static AutoShapeConstant Index_20;
    public static AutoShapeConstant Index_21;
    public static AutoShapeConstant Index_22;
    public static AutoShapeConstant Index_23;
    public static AutoShapeConstant Index_24;
    public static AutoShapeConstant Index_25;
    public static AutoShapeConstant Index_26;
    public static AutoShapeConstant Index_27;
    public static AutoShapeConstant Index_28;
    public static AutoShapeConstant Index_29;
    public static AutoShapeConstant Index_30;
    public static AutoShapeConstant Index_31;
    public static AutoShapeConstant Index_32;
    public static AutoShapeConstant Index_33;
    public static AutoShapeConstant Index_34;
    public static AutoShapeConstant Index_35;
    public static AutoShapeConstant Index_36;
    public static AutoShapeConstant Index_37;
    public static AutoShapeConstant Index_38;
    public static AutoShapeConstant Index_39;
    public static AutoShapeConstant Index_40;
    public static AutoShapeConstant Index_41;
    public static AutoShapeConstant Index_42;
    public static AutoShapeConstant Index_43;
    public static AutoShapeConstant Index_44;
    public static AutoShapeConstant Index_45;
    public static AutoShapeConstant Index_46;
    public static AutoShapeConstant Index_47;
    public static AutoShapeConstant Index_48;
    public static AutoShapeConstant Index_49;
    public static AutoShapeConstant Index_50;
    public static AutoShapeConstant Index_51;
    public static AutoShapeConstant Index_52;
    public static AutoShapeConstant Index_53;
    public static AutoShapeConstant Index_54;
    public static AutoShapeConstant Index_55;
    public static AutoShapeConstant Index_56;
    public static AutoShapeConstant Index_57;
    public static AutoShapeConstant Index_58;
    public static AutoShapeConstant Index_59;
    public static AutoShapeConstant Index_60;
    public static AutoShapeConstant Index_61;
    public static AutoShapeConstant Index_62;
    public static AutoShapeConstant Index_63;
    public static AutoShapeConstant Index_64;
    public static AutoShapeConstant Index_65;
    public static AutoShapeConstant Index_66;
    public static AutoShapeConstant Index_67;
    public static AutoShapeConstant Index_68;
    public static AutoShapeConstant Index_69;
    public static AutoShapeConstant Index_70;
    public static AutoShapeConstant Index_71;
    public static AutoShapeConstant Index_72;
    public static AutoShapeConstant Index_73;
    public static AutoShapeConstant Index_74;
    public static AutoShapeConstant Index_75;
    public static AutoShapeConstant Index_76;
    public static AutoShapeConstant Index_77;
    public static AutoShapeConstant Index_78;
    public static AutoShapeConstant Index_79;
    public static AutoShapeConstant Index_80;
    public static AutoShapeConstant Index_81;
    public static AutoShapeConstant Index_82;
    public static AutoShapeConstant Index_83;
    public static AutoShapeConstant Index_84;
    public static AutoShapeConstant Index_85;
    public static AutoShapeConstant Index_86;
    public static AutoShapeConstant Index_87;
    public static AutoShapeConstant Index_88;
    public static AutoShapeConstant Index_89;
    public static AutoShapeConstant Index_90;
    public static AutoShapeConstant Index_91;
    public static AutoShapeConstant Index_92;
    public static AutoShapeConstant Index_93;
    public static AutoShapeConstant Index_94;
    public static AutoShapeConstant Index_95;
    public static AutoShapeConstant Index_96;
    public static AutoShapeConstant Index_97;
    public static AutoShapeConstant Index_98;
    public static AutoShapeConstant Index_99;
    public static AutoShapeConstant Index_100;
    public static AutoShapeConstant Index_101;
    public static AutoShapeConstant Index_102;
    public static AutoShapeConstant Index_103;
    public static AutoShapeConstant Index_104;
    public static AutoShapeConstant Index_105;
    public static AutoShapeConstant Index_106;
    public static AutoShapeConstant Index_107;
    public static AutoShapeConstant Index_108;
    public static AutoShapeConstant Index_109;
    public static AutoShapeConstant Index_110;
    public static AutoShapeConstant Index_111;
    public static AutoShapeConstant Index_112;
    public static AutoShapeConstant Index_113;
    public static AutoShapeConstant Index_114;
    public static AutoShapeConstant Index_115;
    public static AutoShapeConstant Index_116;
    public static AutoShapeConstant Index_117;
    public static AutoShapeConstant Index_118;
    public static AutoShapeConstant Index_119;
    public static AutoShapeConstant Index_120;
    public static AutoShapeConstant Index_121;
    public static AutoShapeConstant Index_122;
    public static AutoShapeConstant Index_123;
    public static AutoShapeConstant Index_124;
    public static AutoShapeConstant Index_125;
    public static AutoShapeConstant Index_126;
    public static AutoShapeConstant Index_127;
    public static AutoShapeConstant Index_128;
    public static AutoShapeConstant Index_129;
    public static AutoShapeConstant Index_130;
    public static AutoShapeConstant Index_131;
    public static AutoShapeConstant Index_132;
    public static AutoShapeConstant Index_133;
    public static AutoShapeConstant Index_134;
    public static AutoShapeConstant Index_135;
    public static AutoShapeConstant Index_136;
    public static AutoShapeConstant Index_137;
    public static AutoShapeConstant Index_138;
    public static AutoShapeConstant Index_139;
    public static AutoShapeConstant Index_140;
    public static AutoShapeConstant Index_141;
    public static AutoShapeConstant Index_142;
    public static AutoShapeConstant Index_143;
    public static AutoShapeConstant Index_144;
    public static AutoShapeConstant Index_145;
    public static AutoShapeConstant Index_146;
    public static AutoShapeConstant Index_147;
    public static AutoShapeConstant Index_148;
    public static AutoShapeConstant Index_149;
    public static AutoShapeConstant Index_150;
    public static AutoShapeConstant Index_151;
    public static AutoShapeConstant Index_152;
    public static AutoShapeConstant Index_153;
    public static AutoShapeConstant Index_154;
    public static AutoShapeConstant Index_155;
    public static AutoShapeConstant Index_156;
    public static AutoShapeConstant Index_157;
    public static AutoShapeConstant Index_158;
    public static AutoShapeConstant Index_159;
    public static AutoShapeConstant Index_160;
    public static AutoShapeConstant Index_161;
    public static AutoShapeConstant Index_162;
    public static AutoShapeConstant Index_163;
    public static AutoShapeConstant Index_164;
    public static AutoShapeConstant Index_165;
    public static AutoShapeConstant Index_166;
    public static AutoShapeConstant Index_167;
    public static AutoShapeConstant Index_168;
    public static AutoShapeConstant Index_169;
    public static AutoShapeConstant Index_170;
    public static AutoShapeConstant Index_171;
    public static AutoShapeConstant Index_172;
    public static AutoShapeConstant Index_173;
    public static AutoShapeConstant Index_174;
    public static AutoShapeConstant Index_175;
    public static AutoShapeConstant Index_176;
    public static AutoShapeConstant Index_177;
    public static AutoShapeConstant Index_178;
    public static AutoShapeConstant Index_179;
    public static AutoShapeConstant Index_180;
    public static AutoShapeConstant Index_181;
    public static AutoShapeConstant Index_182;
    public static AutoShapeConstant Index_183;
    public static AutoShapeConstant Index_184;
    public static AutoShapeConstant Index_185;
    public static AutoShapeConstant Index_186;
    public static AutoShapeConstant Index_187;
}
internal class Syncfusion.Drawing.AutoShapeHelper : object {
    internal static Dictionary`2<string, int> dictionary;
    internal static AutoShapeConstant GetAutoShapeConstant(string shapeString);
    internal static AutoShapeType GetAutoShapeType(AutoShapeConstant shapeConstant);
    internal static AutoShapeConstant GetAutoShapeConstant(AutoShapeType autoShapeType);
    internal static string GetAutoShapeString(AutoShapeConstant shapeConstant);
}
internal class Syncfusion.Drawing.AutoShapeSerializator : object {
    private AnchorType anchorType;
    private string attribute;
    private string chartNameSpace;
    private AutoShapeImpl parentShape;
    private ShapeImplExt shape;
    private int resolution;
    private string nameSpace;
    internal AutoShapeSerializator(ShapeImplExt shape);
    internal AutoShapeSerializator(AutoShapeImpl parentShape);
    private void SerializeAbsoluteAnchor(XmlWriter xmlTextWriter);
    private void SerializeAnchorPosition(XmlWriter xmlTextWriter);
    private void SerializeClientData(XmlWriter xmlTextWriter);
    private void SerializeConnector(XmlWriter xmlTextWriter);
    private void SerializeGenralShapes(XmlWriter xmlTextWriter);
    private void SerializeGraphicFrame(XmlWriter xmlTextWriter);
    private void SerializeGroupShapes(XmlWriter xmlTextWriter);
    private void SerializeOneCellAnchor(XmlWriter xmlTextWriter);
    private void SerializePicture(XmlWriter xmlTextWriter);
    private void SerializeRelSizeAnchor(XmlWriter writer);
    internal void SerializeShapeChoices(XmlWriter xmlTextWriter);
    private void SerializeShapeNonVisual(XmlWriter xmlTextWriter);
    private void SerializeTwoCellAnchor(XmlWriter xmlTextWriter);
    internal void Write(XmlWriter xmlTextWriter);
    private void WriteShapeAttributes(XmlWriter xmlTextWriter, bool isGeneralShape);
    private void SerializeColRowAnchor(XmlWriter writer, string tagName, int column, int columnOffset, int row, int rowOffset, WorksheetBaseImpl sheet, string drawingsNamespace);
    private void SerializeXYAnchor(XmlWriter writer, string tagName, int column, int row, string drawingsNamespace);
}
internal class Syncfusion.Drawing.ClientAnchor : object {
    private SizeProperties m_size;
    private WorksheetImpl m_workSheet;
    internal WorksheetImpl Worksheet { get; internal set; }
    internal PlacementType Placement { get; internal set; }
    internal int Height { get; internal set; }
    internal int Width { get; internal set; }
    internal int Top { get; internal set; }
    internal int Left { get; internal set; }
    internal int LeftColumn { get; internal set; }
    internal int TopRow { get; internal set; }
    internal int TopRowOffset { get; internal set; }
    internal int LeftColumnOffset { get; internal set; }
    internal int RightColumnOffset { get; internal set; }
    internal int BottomRowOffset { get; internal set; }
    internal int RightColumn { get; internal set; }
    internal int BottomRow { get; internal set; }
    internal ClientAnchor(WorksheetImpl worksheetImpl);
    internal WorksheetImpl get_Worksheet();
    internal void set_Worksheet(WorksheetImpl value);
    internal PlacementType get_Placement();
    internal void set_Placement(PlacementType value);
    internal int get_Height();
    internal void set_Height(int value);
    internal int get_Width();
    internal void set_Width(int value);
    internal int get_Top();
    internal void set_Top(int value);
    internal int get_Left();
    internal void set_Left(int value);
    internal int get_LeftColumn();
    internal void set_LeftColumn(int value);
    internal int get_TopRow();
    internal void set_TopRow(int value);
    internal int get_TopRowOffset();
    internal void set_TopRowOffset(int value);
    internal int get_LeftColumnOffset();
    internal void set_LeftColumnOffset(int value);
    internal int get_RightColumnOffset();
    internal void set_RightColumnOffset(int value);
    internal int get_BottomRowOffset();
    internal void set_BottomRowOffset(int value);
    internal int get_RightColumn();
    internal void set_RightColumn(int value);
    internal int get_BottomRow();
    internal void set_BottomRow(int value);
    internal Int32[] GetTopAndTopRowOffset(int topRow, int top, int bottom);
    internal int CalculateHeight(int topRow, int top, int bottomRow, int bottom);
    internal int CalculateRowOffset(int minRow, int minOffsetValue, int maxRow, int maxOffsetValue);
    internal int CalculateColumnOffset(int minColumn, int minOffsetValue, int maxColumn, int maxOffsetValue);
    internal Int32[] GetLeftAndLeftColumnOffset(int leftColumn, int left, int right);
    internal int CalculateWidth(int leftColumn, int left, int rightColumn, int right);
    internal Int32[] GetTopAndTopOffset(int bottomRow, int bottomRowOffset, int bottom);
    internal Int32[] GetLeftAndLeftOffset(int rightColumn, int rightColumnOffset, int right);
    internal void SetAnchor(int left, int top, int right, int bottom);
    internal void SetAnchor(int topRow, int top, int leftColumn, int left, int height, int width);
    internal void SetAnchor(int topRow, int topRowOffset, int leftColumn, int leftColumnOffset, int bottomRow, int bottomRowOffset, int rightColumn, int rightColumnOffset);
    internal ClientAnchor Clone(object parent);
}
internal class Syncfusion.Drawing.DrawingParser : object {
    internal AutoShapeType autoShapeType;
    internal bool isHyperLink;
    internal bool isGroupShape;
    internal double topX;
    internal double topY;
    internal double bottomX;
    internal double bottomY;
    internal AutoShapeConstant autoShapeConstant;
    internal int leftColumn;
    internal int leftColumnOffset;
    internal int posX;
    internal int posY;
    internal int extCX;
    internal int extCY;
    internal int topRow;
    internal int topRowOffset;
    internal int rightColumn;
    internal int rightColumnOffset;
    internal int bottomRow;
    internal int bottomRowOffset;
    internal int cx;
    internal int cy;
    internal ClientAnchor clientAnchor;
    internal string placement;
    internal string relationID;
    internal string anchorName;
    internal int id;
    internal string name;
    internal string descr;
    internal string tittle;
    public double shapeRotation;
    public Stream CustGeomStream;
    internal Stream FillStream;
    public bool IsHidden;
    public bool FlipVertical;
    public bool FlipHorizontal;
    public string preFix;
    public string shapeType;
    internal bool m_isCustomGeom;
    internal void AddShape(AutoShapeImpl autoShapeImpl, WorksheetBaseImpl sheet);
}
internal static class Syncfusion.Drawing.Helper : object {
    internal static Dictionary`2<string, int> columnAttributes;
    internal static string GetPlacementType(PlacementType placementType);
    internal static PlacementType GetPlacementType(string placementString);
    internal static string GetVerticalFlowType(TextVertOverflowType textVertOverflowType);
    internal static string GetHorizontalFlowType(TextHorzOverflowType textHorzOverflowType);
    internal static TextVertOverflowType GetVerticalFlowType(string value);
    internal static TextHorzOverflowType GetHorizontalFlowType(string value);
    internal static TextDirection SetTextDirection(string textVerticalType);
    internal static void SetAnchorPosition(TextBodyPropertiesHolder textProperties, string anchorType, bool anchorCtrl);
    internal static double ParseDouble(string value);
    internal static int ParseInt(string value);
    internal static string ToString(double value);
    internal static string ToString(int value);
    internal static bool ParseBoolen(string value);
    internal static short ParseShort(string value);
    internal static int ConvertEmuToOffset(int emuValue, int resolution);
    internal static int ConvertOffsetToEMU(int offsetValue, int resolution);
    internal static AnchorType GetAnchorType(string anchorType);
    internal static string GetAnchorTypeString(AnchorType anchorType);
    internal static double EmuToPoint(int emu);
    internal static int PointToEmu(double point);
    internal static double ToDouble(string value);
}
internal class Syncfusion.Drawing.Path2D : object {
    private List`1<double> _pathElementList;
    private double _width;
    private double _height;
    private bool _isStroke;
    internal List`1<double> PathElements { get; }
    internal double Width { get; internal set; }
    internal double Height { get; internal set; }
    internal bool IsStroke { get; internal set; }
    internal List`1<double> get_PathElements();
    internal double get_Width();
    internal void set_Width(double value);
    internal double get_Height();
    internal void set_Height(double value);
    internal bool get_IsStroke();
    internal void set_IsStroke(bool value);
    internal void Close();
    public Path2D Clone();
}
internal class Syncfusion.Drawing.PreservationLogger : object {
    private PreservedFlag m_flag;
    internal bool CheckFlag(PreservedFlag flag);
    internal void SetFlag(PreservedFlag flag);
    internal void ResetFlag();
    internal bool GetPreservedItem(PreservedFlag flag);
}
internal enum Syncfusion.Drawing.PreservedFlag : Enum {
    public int value__;
    public static PreservedFlag Fill;
    public static PreservedFlag Line;
    public static PreservedFlag RichText;
}
internal class Syncfusion.Drawing.Serializator : object {
    internal void AddShape(ShapeImplExt shape, XmlWriter xmlTextwriter);
    internal void AddShape(AutoShapeImpl shape, XmlWriter xmlTextwriter);
    private void WriteHeader(XmlWriter xmlTextWriter);
}
internal class Syncfusion.Drawing.ShapeImplExt : object {
    private string m_textlink;
    private bool m_LockWithSheet;
    private bool m_PrintWithSheet;
    private bool m_noChangeAspect;
    private bool m_fPublished;
    private ClientAnchor m_clientAnchor;
    private ExcelAutoShapeType m_shapeType;
    private AutoShapeType m_autoShapeType;
    private ShapeDrawingType m_shapeDrawingType;
    private int m_shapeID;
    private TextFrame m_textframe;
    private Dictionary`2<string, Stream> m_preservedElements;
    private string m_decription;
    private string m_name;
    private bool m_isHidden;
    private bool m_flipVertical;
    private bool m_flipHorizontal;
    private string m_title;
    private WorksheetImpl m_worksheet;
    private AnchorType m_anchorType;
    private string m_macro;
    private string m_text;
    private bool m_lockText;
    private bool m_published;
    private bool m_isCreated;
    private double m_shapeRotation;
    private ShapeFillImpl m_fill;
    private ShapeLineFormatImpl m_line;
    private RelationCollection m_relations;
    private PreservationLogger m_logger;
    private WorksheetBaseImpl m_parentSheet;
    private Rectangle m_coordinates;
    private Dictionary`2<string, string> m_shapeGuide;
    private List`1<Path2D> m_pathList;
    private bool m_bCustomGeometry;
    internal double Rotation { get; internal set; }
    internal WorksheetImpl Worksheet { get; internal set; }
    internal string Description { get; internal set; }
    internal Dictionary`2<string, Stream> PreservedElements { get; }
    internal string Title { get; internal set; }
    internal bool IsCreated { get; internal set; }
    public TextFrame TextFrame { get; }
    public ClientAnchor ClientAnchor { get; }
    public ShapeFillImpl Fill { get; }
    public ShapeLineFormatImpl Line { get; }
    public int ShapeID { get; public set; }
    public ExcelAutoShapeType ShapeType { get; public set; }
    public AutoShapeType AutoShapeType { get; }
    public string Macro { get; public set; }
    public string TextLink { get; public set; }
    public bool LocksText { get; public set; }
    internal bool NoChangeAspect { get; internal set; }
    internal bool LockWithSheet { get; internal set; }
    internal bool PrintWithSheet { get; internal set; }
    public bool Published { get; public set; }
    public AnchorType AnchorType { get; public set; }
    public string Name { get; public set; }
    public bool IsHidden { get; public set; }
    public RelationCollection Relations { get; }
    public PreservationLogger Logger { get; }
    public bool FlipVertical { get; public set; }
    public bool FlipHorizontal { get; public set; }
    internal Rectangle Coordinates { get; internal set; }
    internal WorksheetBaseImpl ParentSheet { get; internal set; }
    internal Dictionary`2<string, string> ShapeGuide { get; internal set; }
    internal List`1<Path2D> Path2DList { get; internal set; }
    internal bool IsCustomGeometry { get; internal set; }
    public ShapeImplExt(AutoShapeType autoShapeType, WorksheetImpl worksheetImpl);
    internal ShapeImplExt(AutoShapeType autoShapeType, WorksheetBaseImpl worksheetBaseImpl);
    private void CreateShapeType(AutoShapeType autoShapeType);
    internal double get_Rotation();
    internal void set_Rotation(double value);
    internal WorksheetImpl get_Worksheet();
    internal void set_Worksheet(WorksheetImpl value);
    internal string get_Description();
    internal void set_Description(string value);
    internal Dictionary`2<string, Stream> get_PreservedElements();
    internal string get_Title();
    internal void set_Title(string value);
    internal bool get_IsCreated();
    internal void set_IsCreated(bool value);
    public TextFrame get_TextFrame();
    public ClientAnchor get_ClientAnchor();
    public ShapeFillImpl get_Fill();
    public ShapeLineFormatImpl get_Line();
    public int get_ShapeID();
    public void set_ShapeID(int value);
    public ExcelAutoShapeType get_ShapeType();
    public void set_ShapeType(ExcelAutoShapeType value);
    public AutoShapeType get_AutoShapeType();
    public string get_Macro();
    public void set_Macro(string value);
    public string get_TextLink();
    public void set_TextLink(string value);
    public bool get_LocksText();
    public void set_LocksText(bool value);
    internal bool get_NoChangeAspect();
    internal void set_NoChangeAspect(bool value);
    internal bool get_LockWithSheet();
    internal void set_LockWithSheet(bool value);
    internal bool get_PrintWithSheet();
    internal void set_PrintWithSheet(bool value);
    public bool get_Published();
    public void set_Published(bool value);
    public AnchorType get_AnchorType();
    public void set_AnchorType(AnchorType value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public RelationCollection get_Relations();
    public PreservationLogger get_Logger();
    public bool get_FlipVertical();
    public void set_FlipVertical(bool value);
    public bool get_FlipHorizontal();
    public void set_FlipHorizontal(bool value);
    internal Rectangle get_Coordinates();
    internal void set_Coordinates(Rectangle value);
    internal WorksheetBaseImpl get_ParentSheet();
    internal void set_ParentSheet(WorksheetBaseImpl value);
    internal Dictionary`2<string, string> get_ShapeGuide();
    internal void set_ShapeGuide(Dictionary`2<string, string> value);
    internal List`1<Path2D> get_Path2DList();
    internal void set_Path2DList(List`1<Path2D> value);
    internal bool get_IsCustomGeometry();
    internal void set_IsCustomGeometry(bool value);
    internal ShapeImplExt Clone(ShapeImpl parent);
}
internal class Syncfusion.Drawing.ShapeNonVisual : object {
    private string attribute;
    private string drawingPros;
    private string drawingShapeProps;
    private string nonVisual;
    private ShapeImplExt shape;
    private string nameSpace;
    public ShapeNonVisual(ShapeImplExt shape, string attribute);
    private void InitializeShapeType(ExcelAutoShapeType shapeType);
    private void SerializeNonVisualDrawingProps(XmlWriter xmlTextWriter);
    private void SerializeNonVisualDrawingShapeProps(XmlWriter xmlTextWriter);
    internal void Write(XmlWriter xmlTextWriter);
}
internal class Syncfusion.Drawing.ShapePropertiesSerializor : object {
    private string attribute;
    private ShapeImplExt shape;
    internal ShapeImpl parentShape;
    private int dpiX;
    private int dpiY;
    private string nameSpace;
    public ShapePropertiesSerializor(ShapeImplExt shape, string attribute);
    internal ShapePropertiesSerializor(AutoShapeImpl parentShape, string attribute);
    private void SerializeEffectProperties(XmlWriter xmlTextWriter);
    private void SerializeFillProperties(XmlWriter xmlTextWriter);
    private void SerializeGemoerty(XmlWriter xmlTextWriter);
    private void SerializeLineProperties(XmlWriter xmlTextWriter);
    private void SerializeScence3d(XmlWriter xmlTextWriter);
    private void SerializeShape3d(XmlWriter xmlTextWriter);
    private void SerializeTransformation(XmlWriter xmlTextWriter);
    internal void Write(XmlWriter xmlTextWriter);
}
internal class Syncfusion.Drawing.ShapeStyle : object {
    private string attribute;
    private ShapeImplExt shape;
    private string nameSpace;
    private StyleEntryModifierEnum m_styleElementMod;
    private StyleOrFontReference m_lnRefStyleEntry;
    private double m_lineWidthScale;
    private StyleOrFontReference m_effectRefStyleEntry;
    private StyleOrFontReference m_fillRefStyleEntry;
    private StyleOrFontReference m_fontRefstyleEntry;
    private StyleEntryShapeProperties m_shapeProperties;
    private TextSettings m_defaultParagraphRunProperties;
    private TextBodyPropertiesHolder m_textBodyProperties;
    internal StyleEntryModifierEnum StyleElementMod { get; internal set; }
    internal StyleOrFontReference LineRefStyleEntry { get; internal set; }
    internal double LineWidthScale { get; internal set; }
    internal StyleOrFontReference EffectRefStyleEntry { get; internal set; }
    internal StyleOrFontReference FillRefStyleEntry { get; internal set; }
    internal StyleOrFontReference FontRefstyleEntry { get; internal set; }
    internal StyleEntryShapeProperties ShapeProperties { get; internal set; }
    internal TextSettings DefaultRunParagraphProperties { get; internal set; }
    internal TextBodyPropertiesHolder TextBodyProperties { get; internal set; }
    public ShapeStyle(ShapeImplExt shape, string arrtibute);
    internal ShapeStyle(string attributeValue, string nameSpaceValue, StyleEntryModifierEnum enumValue);
    internal StyleEntryModifierEnum get_StyleElementMod();
    internal void set_StyleElementMod(StyleEntryModifierEnum value);
    internal StyleOrFontReference get_LineRefStyleEntry();
    internal void set_LineRefStyleEntry(StyleOrFontReference value);
    internal double get_LineWidthScale();
    internal void set_LineWidthScale(double value);
    internal StyleOrFontReference get_EffectRefStyleEntry();
    internal void set_EffectRefStyleEntry(StyleOrFontReference value);
    internal StyleOrFontReference get_FillRefStyleEntry();
    internal void set_FillRefStyleEntry(StyleOrFontReference value);
    internal StyleOrFontReference get_FontRefstyleEntry();
    internal void set_FontRefstyleEntry(StyleOrFontReference value);
    internal StyleEntryShapeProperties get_ShapeProperties();
    internal void set_ShapeProperties(StyleEntryShapeProperties value);
    internal TextSettings get_DefaultRunParagraphProperties();
    internal void set_DefaultRunParagraphProperties(TextSettings value);
    internal TextBodyPropertiesHolder get_TextBodyProperties();
    internal void set_TextBodyProperties(TextBodyPropertiesHolder value);
    private void SerializeStyleOrFontReference(XmlWriter writer, StyleOrFontReference styleEntry, string styleEntryName, bool isFontReference);
    private void SerializeColorSettings(XmlWriter writer, ColorModel colorModelType, string colorValue, double lumModValue, double lumOffValue1, double lumOffValue2, double shadeValue);
    private void SerializeShapeProperties(XmlWriter writer);
    private void SerializeDefaultRPrProperties(XmlWriter writer);
    internal void Write(XmlWriter xmlTextWriter, string parentElement);
}
internal class Syncfusion.Drawing.SizeProperties : object {
    internal static float FULL_COLUMN_OFFSET;
    internal static float FULL_ROW_OFFSET;
    private int m_left;
    private int m_top;
    private int m_bottom;
    private int m_right;
    private int m_leftColumn;
    private int m_rightColumn;
    private int m_topRow;
    private int m_bottomRow;
    private PlacementType m_placementType;
    internal int Bottom { get; internal set; }
    internal int Left { get; internal set; }
    internal int Right { get; internal set; }
    internal int Top { get; internal set; }
    private static SizeProperties();
    internal void SetBottomRow(int bottomRow);
    internal int GetRightColumn();
    internal void SetRightColumn(int rightColumn);
    internal PlacementType GetPlacementType();
    internal void SetPlacementType(PlacementType placementType);
    internal int GetTopRow();
    internal void SetTopRow(int topRow);
    internal int GetLeftColumn();
    internal void SetLeftColumn(int leftColumn);
    internal int GetBottomRow();
    internal int get_Bottom();
    internal void set_Bottom(int value);
    internal int get_Left();
    internal void set_Left(int value);
    internal int get_Right();
    internal void set_Right(int value);
    internal int get_Top();
    internal void set_Top(int value);
    internal SizeProperties Clone(object parent);
}
internal class Syncfusion.Drawing.StyleEntryShapeProperties : object {
    private byte m_flag;
    private ExcelFillType m_shapeFillType;
    private double m_borderWeight;
    private ColorModel m_shapeFillColorModelType;
    private string m_shapeFillColorValue;
    private double m_shapeFillLumModValue;
    private double m_shapeFillLumOffValue1;
    private double m_shapeFillLumOffValue2;
    private ColorModel m_borderFillColorModelType;
    private string m_borderFillColorValue;
    private double m_borderFillLumModValue;
    private double m_borderFillLumOffValue1;
    private double m_borderFillLumOffValue2;
    private Excel2007ShapeLineStyle m_borderLineStyle;
    private bool m_borderIsRound;
    private EndLineCap m_lineCap;
    private bool m_isInsetPenAlignment;
    internal ExcelFillType ShapeFillType { get; internal set; }
    internal double BorderWeight { get; internal set; }
    internal ColorModel ShapeFillColorModelType { get; internal set; }
    internal string ShapeFillColorValue { get; internal set; }
    internal double ShapeFillLumModValue { get; internal set; }
    internal double ShapeFillLumOffValue1 { get; internal set; }
    internal double ShapeFillLumOffValue2 { get; internal set; }
    internal ColorModel BorderFillColorModelType { get; internal set; }
    internal string BorderFillColorValue { get; internal set; }
    internal double BorderFillLumModValue { get; internal set; }
    internal double BorderFillLumOffValue1 { get; internal set; }
    internal double BorderFillLumOffValue2 { get; internal set; }
    internal Excel2007ShapeLineStyle BorderLineStyle { get; internal set; }
    internal bool BorderIsRound { get; internal set; }
    internal EndLineCap LineCap { get; internal set; }
    internal bool IsInsetPenAlignment { get; internal set; }
    internal byte FlagOptions { get; }
    internal ExcelFillType get_ShapeFillType();
    internal void set_ShapeFillType(ExcelFillType value);
    internal double get_BorderWeight();
    internal void set_BorderWeight(double value);
    internal ColorModel get_ShapeFillColorModelType();
    internal void set_ShapeFillColorModelType(ColorModel value);
    internal string get_ShapeFillColorValue();
    internal void set_ShapeFillColorValue(string value);
    internal double get_ShapeFillLumModValue();
    internal void set_ShapeFillLumModValue(double value);
    internal double get_ShapeFillLumOffValue1();
    internal void set_ShapeFillLumOffValue1(double value);
    internal double get_ShapeFillLumOffValue2();
    internal void set_ShapeFillLumOffValue2(double value);
    internal ColorModel get_BorderFillColorModelType();
    internal void set_BorderFillColorModelType(ColorModel value);
    internal string get_BorderFillColorValue();
    internal void set_BorderFillColorValue(string value);
    internal double get_BorderFillLumModValue();
    internal void set_BorderFillLumModValue(double value);
    internal double get_BorderFillLumOffValue1();
    internal void set_BorderFillLumOffValue1(double value);
    internal double get_BorderFillLumOffValue2();
    internal void set_BorderFillLumOffValue2(double value);
    internal Excel2007ShapeLineStyle get_BorderLineStyle();
    internal void set_BorderLineStyle(Excel2007ShapeLineStyle value);
    internal bool get_BorderIsRound();
    internal void set_BorderIsRound(bool value);
    internal EndLineCap get_LineCap();
    internal void set_LineCap(EndLineCap value);
    internal bool get_IsInsetPenAlignment();
    internal void set_IsInsetPenAlignment(bool value);
    internal byte get_FlagOptions();
}
internal class Syncfusion.Drawing.StyleOrFontReference : object {
    private int m_index;
    private ColorModel m_colorModelType;
    private string m_colorValue;
    private double m_lumModValue;
    private double m_lumOffValue1;
    private double m_lumOffValue2;
    private double m_shadeValue;
    internal int Index { get; internal set; }
    internal ColorModel ColorModelType { get; internal set; }
    internal string ColorValue { get; internal set; }
    internal double LumModValue { get; internal set; }
    internal double LumOffValue1 { get; internal set; }
    internal double LumOffValue2 { get; internal set; }
    internal double ShadeValue { get; internal set; }
    internal StyleOrFontReference(int index, ColorModel colorModel, string colorValue, double lumModValue, double lumOffValue1, double lumOffValue2, double shadeValue);
    internal int get_Index();
    internal void set_Index(int value);
    internal ColorModel get_ColorModelType();
    internal void set_ColorModelType(ColorModel value);
    internal string get_ColorValue();
    internal void set_ColorValue(string value);
    internal double get_LumModValue();
    internal void set_LumModValue(double value);
    internal double get_LumOffValue1();
    internal void set_LumOffValue1(double value);
    internal double get_LumOffValue2();
    internal void set_LumOffValue2(double value);
    internal double get_ShadeValue();
    internal void set_ShadeValue(double value);
}
internal class Syncfusion.Drawing.TextBody : object {
    private string attribute;
    private ShapeImplExt shape;
    private string nameSpace;
    public TextBody(ShapeImplExt shape, string attribute);
    private void TextParagraph(XmlWriter xmlTextWriter_0);
    internal void Write(XmlWriter xmlTextWriter);
}
internal enum Syncfusion.XlsIO.AnchorType : Enum {
    public int value__;
    public static AnchorType Absolute;
    public static AnchorType RelSize;
    public static AnchorType OneCell;
    public static AnchorType TwoCell;
}
public enum Syncfusion.XlsIO.AutoShapeType : Enum {
    public int value__;
    public static AutoShapeType Unknown;
    public static AutoShapeType Line;
    public static AutoShapeType ElbowConnector;
    public static AutoShapeType CurvedConnector;
    public static AutoShapeType BentConnector2;
    public static AutoShapeType StraightConnector;
    public static AutoShapeType BentConnector4;
    public static AutoShapeType BentConnector5;
    public static AutoShapeType CurvedConnector2;
    public static AutoShapeType CurvedConnector4;
    public static AutoShapeType CurvedConnector5;
    public static AutoShapeType Rectangle;
    public static AutoShapeType RoundedRectangle;
    public static AutoShapeType SnipSingleCornerRectangle;
    public static AutoShapeType SnipSameSideCornerRectangle;
    public static AutoShapeType SnipDiagonalCornerRectangle;
    public static AutoShapeType SnipAndRoundSingleCornerRectangle;
    public static AutoShapeType RoundSingleCornerRectangle;
    public static AutoShapeType RoundSameSideCornerRectangle;
    public static AutoShapeType RoundDiagonalCornerRectangle;
    public static AutoShapeType Oval;
    public static AutoShapeType IsoscelesTriangle;
    public static AutoShapeType RightTriangle;
    public static AutoShapeType Parallelogram;
    public static AutoShapeType Trapezoid;
    public static AutoShapeType Diamond;
    public static AutoShapeType RegularPentagon;
    public static AutoShapeType Hexagon;
    public static AutoShapeType Heptagon;
    public static AutoShapeType Octagon;
    public static AutoShapeType Decagon;
    public static AutoShapeType Dodecagon;
    public static AutoShapeType Pie;
    public static AutoShapeType Chord;
    public static AutoShapeType Teardrop;
    public static AutoShapeType Frame;
    public static AutoShapeType HalfFrame;
    public static AutoShapeType L_Shape;
    public static AutoShapeType DiagonalStripe;
    public static AutoShapeType Cross;
    public static AutoShapeType Plaque;
    public static AutoShapeType Can;
    public static AutoShapeType Cube;
    public static AutoShapeType Bevel;
    public static AutoShapeType Donut;
    public static AutoShapeType NoSymbol;
    public static AutoShapeType BlockArc;
    public static AutoShapeType FoldedCorner;
    public static AutoShapeType SmileyFace;
    public static AutoShapeType Heart;
    public static AutoShapeType LightningBolt;
    public static AutoShapeType Sun;
    public static AutoShapeType Moon;
    public static AutoShapeType Cloud;
    public static AutoShapeType Arc;
    public static AutoShapeType DoubleBracket;
    public static AutoShapeType DoubleBrace;
    public static AutoShapeType LeftBracket;
    public static AutoShapeType RightBracket;
    public static AutoShapeType LeftBrace;
    public static AutoShapeType RightBrace;
    public static AutoShapeType RightArrow;
    public static AutoShapeType LeftArrow;
    public static AutoShapeType UpArrow;
    public static AutoShapeType DownArrow;
    public static AutoShapeType LeftRightArrow;
    public static AutoShapeType UpDownArrow;
    public static AutoShapeType QuadArrow;
    public static AutoShapeType LeftRightUpArrow;
    public static AutoShapeType BentArrow;
    public static AutoShapeType UTurnArrow;
    public static AutoShapeType LeftUpArrow;
    public static AutoShapeType BentUpArrow;
    public static AutoShapeType CurvedRightArrow;
    public static AutoShapeType CurvedLeftArrow;
    public static AutoShapeType CurvedUpArrow;
    public static AutoShapeType CurvedDownArrow;
    public static AutoShapeType StripedRightArrow;
    public static AutoShapeType NotchedRightArrow;
    public static AutoShapeType Pentagon;
    public static AutoShapeType Chevron;
    public static AutoShapeType RightArrowCallout;
    public static AutoShapeType DownArrowCallout;
    public static AutoShapeType LeftArrowCallout;
    public static AutoShapeType UpArrowCallout;
    public static AutoShapeType LeftRightArrowCallout;
    public static AutoShapeType UpDownArrowCallout;
    public static AutoShapeType QuadArrowCallout;
    public static AutoShapeType CircularArrow;
    public static AutoShapeType MathPlus;
    public static AutoShapeType MathMinus;
    public static AutoShapeType MathMultiply;
    public static AutoShapeType MathDivision;
    public static AutoShapeType MathEqual;
    public static AutoShapeType MathNotEqual;
    public static AutoShapeType FlowChartProcess;
    public static AutoShapeType FlowChartAlternateProcess;
    public static AutoShapeType FlowChartDecision;
    public static AutoShapeType FlowChartData;
    public static AutoShapeType FlowChartPredefinedProcess;
    public static AutoShapeType FlowChartInternalStorage;
    public static AutoShapeType FlowChartDocument;
    public static AutoShapeType FlowChartMultiDocument;
    public static AutoShapeType FlowChartTerminator;
    public static AutoShapeType FlowChartPreparation;
    public static AutoShapeType FlowChartManualInput;
    public static AutoShapeType FlowChartManualOperation;
    public static AutoShapeType FlowChartConnector;
    public static AutoShapeType FlowChartOffPageConnector;
    public static AutoShapeType FlowChartCard;
    public static AutoShapeType FlowChartPunchedTape;
    public static AutoShapeType FlowChartSummingJunction;
    public static AutoShapeType FlowChartOr;
    public static AutoShapeType FlowChartCollate;
    public static AutoShapeType FlowChartSort;
    public static AutoShapeType FlowChartExtract;
    public static AutoShapeType FlowChartMerge;
    public static AutoShapeType FlowChartStoredData;
    public static AutoShapeType FlowChartDelay;
    public static AutoShapeType FlowChartSequentialAccessStorage;
    public static AutoShapeType FlowChartMagneticDisk;
    public static AutoShapeType FlowChartDirectAccessStorage;
    public static AutoShapeType FlowChartDisplay;
    public static AutoShapeType Explosion1;
    public static AutoShapeType Explosion2;
    public static AutoShapeType Star4Point;
    public static AutoShapeType Star5Point;
    public static AutoShapeType Star6Point;
    public static AutoShapeType Star7Point;
    public static AutoShapeType Star8Point;
    public static AutoShapeType Star10Point;
    public static AutoShapeType Star12Point;
    public static AutoShapeType Star16Point;
    public static AutoShapeType Star24Point;
    public static AutoShapeType Star32Point;
    public static AutoShapeType UpRibbon;
    public static AutoShapeType DownRibbon;
    public static AutoShapeType CurvedUpRibbon;
    public static AutoShapeType CurvedDownRibbon;
    public static AutoShapeType VerticalScroll;
    public static AutoShapeType HorizontalScroll;
    public static AutoShapeType Wave;
    public static AutoShapeType DoubleWave;
    public static AutoShapeType RectangularCallout;
    public static AutoShapeType RoundedRectangularCallout;
    public static AutoShapeType OvalCallout;
    public static AutoShapeType CloudCallout;
    public static AutoShapeType LineCallout1;
    public static AutoShapeType LineCallout2;
    public static AutoShapeType LineCallout3;
    public static AutoShapeType LineCallout1AccentBar;
    public static AutoShapeType LineCallout2AccentBar;
    public static AutoShapeType LineCallout3AccentBar;
    public static AutoShapeType LineCallout1NoBorder;
    public static AutoShapeType LineCallout2NoBorder;
    public static AutoShapeType LineCallout3NoBorder;
    public static AutoShapeType LineCallout1BorderAndAccentBar;
    public static AutoShapeType LineCallout2BorderAndAccentBar;
    public static AutoShapeType LineCallout3BorderAndAccentBar;
}
internal enum Syncfusion.XlsIO.AxisLabelAlignment : Enum {
    public byte value__;
    public static AxisLabelAlignment Left;
    public static AxisLabelAlignment Center;
    public static AxisLabelAlignment Right;
}
public enum Syncfusion.XlsIO.BuiltInStyles : Enum {
    public int value__;
    public static BuiltInStyles Normal;
    public static BuiltInStyles Comma;
    public static BuiltInStyles Currency;
    public static BuiltInStyles Percent;
    public static BuiltInStyles Comma0;
    public static BuiltInStyles Currency0;
    public static BuiltInStyles Note;
    public static BuiltInStyles WarningText;
    public static BuiltInStyles Title;
    public static BuiltInStyles Heading1;
    public static BuiltInStyles Heading2;
    public static BuiltInStyles Heading3;
    public static BuiltInStyles Heading4;
    public static BuiltInStyles Input;
    public static BuiltInStyles Output;
    public static BuiltInStyles Calculation;
    public static BuiltInStyles CheckCell;
    public static BuiltInStyles LinkedCell;
    public static BuiltInStyles Total;
    public static BuiltInStyles Good;
    public static BuiltInStyles Bad;
    public static BuiltInStyles Neutral;
    public static BuiltInStyles Accent1;
    public static BuiltInStyles Accent1_20;
    public static BuiltInStyles Accent1_40;
    public static BuiltInStyles Accent1_60;
    public static BuiltInStyles Accent2;
    public static BuiltInStyles Accent2_20;
    public static BuiltInStyles Accent2_40;
    public static BuiltInStyles Accent2_60;
    public static BuiltInStyles Accent3;
    public static BuiltInStyles Accent3_20;
    public static BuiltInStyles Accent3_40;
    public static BuiltInStyles Accent3_60;
    public static BuiltInStyles Accent4;
    public static BuiltInStyles Accent4_20;
    public static BuiltInStyles Accent4_40;
    public static BuiltInStyles Accent4_60;
    public static BuiltInStyles Accent5;
    public static BuiltInStyles Accent5_20;
    public static BuiltInStyles Accent5_40;
    public static BuiltInStyles Accent5_60;
    public static BuiltInStyles Accent6;
    public static BuiltInStyles Accent6_20;
    public static BuiltInStyles Accent6_40;
    public static BuiltInStyles Accent6_60;
    public static BuiltInStyles ExplanatoryText;
}
internal class Syncfusion.XlsIO.Calculate.ArrayParser : object {
    private string validFunctionNameChars;
    private Char[] markers;
    private int length;
    private static char BMARKER;
    internal ArrayDelegate GetArrayRecordPosition;
    internal CalcEngine Engine;
    internal ArrayParser(CalcEngine engine);
    internal String[] SplitString(string formula);
    internal string CalculateArraySize(string substring, Int32& height, Int32& width, Int32& minHeight, Int32& minWidth);
    internal List`1<String[]> ResizeCellRange(string formula, string originalFormula);
    internal string Parse(string formula, string originalFormula);
    internal string ParseLibraryFormula(string formula);
    internal string ComputeInteriorFunction(string arg, string label, int computedLevel);
    internal bool IsMultiCellArray(string formula);
    internal string ParseMultiCellArray(string formula, string originalFormula);
    internal string ParseDimensionalArray(string formula);
    internal string ParseRangeArray(string formula, int height, int width);
    internal string ParseHorizontalArray(string formula);
    internal string ParseVerticalArray(string formula);
    internal int GetHeight(String[] substrings);
    internal int GetWidth(String[] substrings);
    internal int GetPosition(Int32& height, Int32& width);
    internal string ComputeLen(string arg, int computedLevel);
    internal string ComputeRow(string arg, int computedLevel);
    internal string ComputeColumn(string arg, int computedLevel);
    internal string ComputeIF(string arg, int computedLevel);
    internal string PerformLogicalTestForRange(string logicTest, string strArray, int computedLevel, string logicalRange);
    internal string PerformLogicalTest(string logicTest, string strArray, int computedLevel, String[] ss);
    internal string ComputeCountIF(String[] s1, char op, string criteria, bool isNumber, double compare, int computedLevel, int count);
    public sealed virtual void Dispose();
}
public class Syncfusion.XlsIO.Calculate.CalcEngine : object {
    private Dictionary`2<object, object> _formulaInfoTable;
    private List`1<object> breakedFormulaCells;
    private List`1<object> tempBreakedFormulaCells;
    private List`1<object> processedCells;
    private Dictionary`2<object, object> dependentFormulaCells;
    private bool _isDisposed;
    private Char[] BRACEDELIMETER;
    private string BRACERIGHTnLEFT;
    private bool useFormulaValues;
    private bool getValueFromArgPreserveLeadingZeros;
    private bool ignoreCellValue;
    private int calcID;
    private int columnMaxCount;
    private int rowMaxCount;
    public bool IgnoreValueChanged;
    private bool inAPull;
    private bool useDependencies;
    private bool checkDanglingStack;
    private bool inHandleIterations;
    private bool inRecalculateRange;
    private bool isRangeOperand;
    private bool forceRefreshCall;
    private bool preserveFormula;
    private string validFunctionNameChars;
    private static char BMARKER;
    internal string cell;
    [ThreadStaticAttribute]
private static char formulaChar;
    internal int reservedWord_AND;
    internal int reservedWord_IF;
    internal int reservedWord_ELSE;
    internal int reservedWord_NOT;
    internal int reservedWord_OR;
    internal int reservedWord_THEN;
    internal int reservedWord_XOR;
    private string validPrecedingChars;
    private Dictionary`2<object, object> variableNamesToTokens;
    private Dictionary`2<object, object> variableTokensToNames;
    internal bool isBracesReplaced;
    private bool isG17Applied;
    private Dictionary`2<object, object> dependentCells;
    public static double machineepsilon;
    public static double maxrealnumber;
    public static double minrealnumber;
    public double ACC;
    public double BIGNO;
    public double BIGNI;
    private Dictionary`2<object, object> refreshedCells;
    private Dictionary`2<object, object> libraryFunctions;
    internal Char[] tokens;
    internal static int sheetID;
    private char CHAR_and;
    private char CHAR_or;
    private List`1<object> circCheckList;
    private List`1<object> errorStrings;
    private int computedValueLevel;
    private int dependencyLevel;
    private int maximumRecursiveCalls;
    private static char CHAR_divide;
    private string BRACELEFT;
    private string BRACERIGHT;
    private string STRING_and;
    private string STRING_E;
    private string STRING_EM;
    private string STRING_EP;
    private string TRUEVALUESTR;
    private string FALSEVALUESTR;
    private string STRING_or;
    private string TIC;
    private static string STRING_empty;
    private static string STRING_fixedreference;
    private static string STRING_greatereq;
    private static string STRING_lesseq;
    private static string STRING_noequal;
    private char RIGHTBRACKET;
    private char LEFTBRACKET;
    private char CHAR_EP;
    private char CHAR_EM;
    private char UNIQUESTRINGMARKER;
    private char MarkerChar;
    private static char sheetToken;
    private static char TOKEN_EM;
    private static char TOKEN_EP;
    private static char TOKEN_multiply;
    private static char TOKEN_divide;
    private static char TOKEN_add;
    private static char TOKEN_subtract;
    private static char CHAR_add;
    private static char CHAR_subtract;
    private static char TOKEN_less;
    private static char CHAR_less;
    private static char CHAR_lesseq;
    private static char TOKEN_greater;
    private static char TOKEN_greatereq;
    private static char TOKEN_equal;
    private static char CHAR_equal;
    private static char TOKEN_lesseq;
    private static char CHAR_greatereq;
    private static char TOKEN_noequal;
    private static char CHAR_noequal;
    private static char TOKEN_and;
    private static char CHAR_multiply;
    private static char CHAR_greater;
    private static char CHAR_ANDop;
    private static char CHAR_ELSEop;
    private static char CHAR_IFop;
    private static char CHAR_NOTop;
    private static char TOKEN_ANDop;
    private static char TOKEN_ELSEop;
    private static char TOKEN_IFop;
    private static char CHAR_ORop;
    private static char CHAR_THENop;
    private static char CHAR_XORop;
    private int computeFunctionLevel;
    private DateTime dateTime1900;
    internal ICalcData grid;
    private bool exteriorFormula;
    private bool vlookupInsideIFFormula;
    private string activeFunctionName;
    private bool rethrowLibraryComputationExceptions;
    private bool isIndexInteriorFormula;
    private bool lockDependencies;
    private bool exceptionThrown;
    private bool currentRowNotationEnabled;
    private bool calculationsSuspended;
    private bool allowShortCircuitIFs;
    private bool supportLogicalOperators;
    private bool useNoAmpersandQuotes;
    private bool treatStringsAsZero;
    internal bool matchType;
    private bool alwaysComputeDuringRefresh;
    private bool ensureIFCallDuringShortCircuit;
    private bool supportRangeOperands;
    private bool throwCircularException;
    private bool ignoreBracet;
    private bool findRangeIfIntersect;
    private double ABSOLUTEZERO;
    private string BMARKER2;
    [ThreadStaticAttribute]
private static GridSheetFamilyItem defaultFamilyItem;
    [ThreadStaticAttribute]
internal static Dictionary`2<object, object> modelToSheetID;
    [ThreadStaticAttribute]
internal static Dictionary`2<object, object> sheetFamiliesList;
    [ThreadStaticAttribute]
private static int sheetFamilyID;
    [ThreadStaticAttribute]
private static char parseArgumentSeparator;
    [ThreadStaticAttribute]
private static char parseDecimalSeparator;
    [ThreadStaticAttribute]
private static char parseDateTimeSeparator;
    private static string TABLE_ROW;
    private static string TABLE_HEADERS;
    private static string TABLE_TOTALS;
    private static string TABLE_DATA;
    private static string TABLE_ALL;
    private int iterationMaxCount;
    private double dateTime1900Double;
    private static double OADate1904;
    private double iterationMaxTolerance;
    internal int iterations_dont_converge;
    private Dictionary`2<object, object> iterationValues;
    private Exception libraryComputationException;
    private bool supportsSheetRanges;
    private char tempSheetPlaceHolder;
    [ThreadStaticAttribute]
internal static int TokenCount;
    private string markers;
    [ThreadStaticAttribute]
private static int maxStackDepth;
    private Char[] logicalOperators;
    private Dictionary`2<object, object> namedRanges;
    private String[] reservedWordOperators;
    private string IFMarker;
    private static char TOKEN_NOTop;
    private static char TOKEN_or;
    private static char TOKEN_ORop;
    private static char TOKEN_THENop;
    private static char TOKEN_XORop;
    internal bool UseDate1904;
    private bool isAreaCalculation;
    public static bool Treat1900AsLeapYear;
    internal bool errorFormula;
    private bool excelLikeComputations;
    [CompilerGeneratedAttribute]
private FormulaParsingEventHandler FormulaParsing;
    [CompilerGeneratedAttribute]
private UnknownFunctionEventHandler UnknownFunction;
    [CompilerGeneratedAttribute]
private UpdateNamedRangeEventHandler UpdateNamedRange;
    [CompilerGeneratedAttribute]
private FormulaComputedEventHandler FormulaComputed;
    [CompilerGeneratedAttribute]
private UpdateExternalFormulaEventHandler UpdateExternalFormula;
    [CompilerGeneratedAttribute]
private GetExternalWorksheetEventHandler QueryExternalWorksheet;
    [CompilerGeneratedAttribute]
private GetExternalNamedRangeEventHandler GetExternalNamedRange;
    internal bool IsArrayFormula;
    internal ArrayParser ArrayParser;
    internal LinearRegression LinearRegression;
    private static bool isParseArgumentSeparator;
    private static bool isParseDecimalSeparatorChanged;
    internal int operators_cannot_start_an_expression;
    internal int cannot_parse;
    internal int bad_library;
    internal int invalid_char_in_front_of;
    internal int number_contains_2_decimal_points;
    internal int expression_cannot_end_with_an_operator;
    internal int invalid_characters_following_an_operator;
    internal int invalid_char_in_number;
    internal int mismatched_parentheses;
    internal int unknown_formula_name;
    internal int requires_a_single_argument;
    internal int requires_3_args;
    internal int invalid_Math_argument;
    internal int requires_2_args;
    internal int bad_index;
    internal int Name_error;
    internal int too_complex;
    internal int circular_reference_;
    internal int missing_formula;
    internal int improper_formula;
    internal int invalid_expression;
    internal int cell_empty;
    internal int bad_formula;
    internal int empty_expression;
    internal int virtual_mode_required;
    internal int mismatched_tics;
    internal int wrong_number_arguments;
    internal int invalid_arguments;
    public int already_registered;
    internal int calculation_overflow;
    internal int missing_sheet;
    internal int parameters_notvalid;
    internal int invalid_parameter;
    internal int value_between;
    internal int invalid_argument;
    internal int parameter_place;
    internal int invalid_arg_value;
    internal int parameter_length;
    internal int invalid_suffix;
    internal int num_null;
    internal int min_value;
    internal int incorrect_array_length;
    internal int solution_converge;
    public String[] FormulaErrorStrings;
    private bool isDoubleQuotes;
    private bool isErrorString;
    private Dictionary`2<object, object> namedRangesNonScoped;
    internal bool findNamedRange;
    private Dictionary`2<object, object> scopedRangeStrings;
    private List`1<object> weekEndType;
    private char MarkerParseChar;
    private bool isInteriorFunction;
    private char CHARTIC;
    private bool multiTick;
    private bool rethrowExceptions;
    private bool useDatesInCalcs;
    private List`1<string> nativeFormats;
    private List`1<object> sortedSheetNames;
    private LookupCachingMode enableLookupTableCaching;
    private Dictionary`2<string, LookUps> lookupTables;
    private List`1<object> formulaErrorStrings;
    private static String[] charTable;
    private static Int32[] factorialTable;
    private Random rand;
    private static double PI;
    private static Double[] gammaAs;
    private static int gauss_n;
    private static Double[] gauss_x;
    private static Double[] gauss_w;
    internal bool IgnoreSubtotal;
    internal int hitCount;
    public bool TreatStringsAsZero { get; public set; }
    internal bool IsAreaCalculation { get; internal set; }
    public int MaximumRecursiveCalls { get; public set; }
    public bool CalculatingSuspended { get; public set; }
    public Dictionary`2<object, object> LibraryFunctions { get; }
    public bool UseNoAmpersandQuotes { get; public set; }
    internal bool ExceptionThrown { get; internal set; }
    public Exception LibraryComputationException { get; }
    public bool RethrowLibraryComputationExceptions { get; public set; }
    [DefaultValueAttribute("False")]
public bool ExcelLikeComputations { get; public set; }
    public static int MaxStackDepth { get; public set; }
    public String[] ReservedWordOperators { get; public set; }
    public static char FormulaCharacter { get; public set; }
    internal bool CurrentRowNotationEnabled { get; internal set; }
    internal string ActiveFunctionName { get; }
    public string ActiveCell { get; }
    public bool AllowShortCircuitIFs { get; public set; }
    public bool AlwaysComputeDuringRefresh { get; public set; }
    public bool UseFormulaValues { get; public set; }
    public bool CheckDanglingStack { get; public set; }
    public int ColumnMaxCount { get; public set; }
    public bool EnsureIFCallDuringShortCircuit { get; public set; }
    public bool ForceRefreshCall { get; public set; }
    public Dictionary`2<object, object> FormulaInfoTable { get; }
    public bool GetValueFromArgPreserveLeadingZeros { get; public set; }
    public int IterationMaxCount { get; public set; }
    public double IterationMaxTolerance { get; public set; }
    private Dictionary`2<object, object> IterationValues { get; }
    public bool LockDependencies { get; public set; }
    public int RowMaxCount { get; public set; }
    public bool SupportLogicalOperators { get; public set; }
    public bool SupportRangeOperands { get; public set; }
    public bool SupportsSheetRanges { get; public set; }
    public bool ThrowCircularException { get; public set; }
    public bool UseDependencies { get; public set; }
    public string ValidPrecedingChars { get; public set; }
    internal bool PreserveFormula { get; internal set; }
    internal bool IsSheeted { get; }
    public static char ParseArgumentSeparator { get; public set; }
    public static char ParseDecimalSeparator { get; public set; }
    public static char ParseDateTimeSeparator { get; public set; }
    public List`1<object> ErrorStrings { get; public set; }
    public Dictionary`2<object, object> DependentCells { get; }
    public Dictionary`2<object, object> DependentFormulaCells { get; }
    public Dictionary`2<object, object> NamedRanges { get; public set; }
    public List`1<object> WeekEndType { get; }
    public bool UseDatesInCalculations { get; public set; }
    public bool RethrowParseExceptions { get; public set; }
    private List`1<string> NativeFormats { get; }
    private List`1<object> SortedSheetNames { get; }
    public LookupCachingMode EnableLookupTableCaching { get; public set; }
    private static CalcEngine();
    public CalcEngine(ICalcData ParentObject);
    [CompilerGeneratedAttribute]
public void add_FormulaParsing(FormulaParsingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FormulaParsing(FormulaParsingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_UnknownFunction(UnknownFunctionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UnknownFunction(UnknownFunctionEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_UpdateNamedRange(UpdateNamedRangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_UpdateNamedRange(UpdateNamedRangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_FormulaComputed(FormulaComputedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FormulaComputed(FormulaComputedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_UpdateExternalFormula(UpdateExternalFormulaEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_UpdateExternalFormula(UpdateExternalFormulaEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_QueryExternalWorksheet(GetExternalWorksheetEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_QueryExternalWorksheet(GetExternalWorksheetEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_GetExternalNamedRange(GetExternalNamedRangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_GetExternalNamedRange(GetExternalNamedRangeEventHandler value);
    public bool get_TreatStringsAsZero();
    public void set_TreatStringsAsZero(bool value);
    internal bool get_IsAreaCalculation();
    internal void set_IsAreaCalculation(bool value);
    public int get_MaximumRecursiveCalls();
    public void set_MaximumRecursiveCalls(int value);
    public bool get_CalculatingSuspended();
    public void set_CalculatingSuspended(bool value);
    public Dictionary`2<object, object> get_LibraryFunctions();
    public bool get_UseNoAmpersandQuotes();
    public void set_UseNoAmpersandQuotes(bool value);
    internal bool get_ExceptionThrown();
    internal void set_ExceptionThrown(bool value);
    public Exception get_LibraryComputationException();
    public bool get_RethrowLibraryComputationExceptions();
    public void set_RethrowLibraryComputationExceptions(bool value);
    public bool get_ExcelLikeComputations();
    public void set_ExcelLikeComputations(bool value);
    public static int get_MaxStackDepth();
    public static void set_MaxStackDepth(int value);
    public String[] get_ReservedWordOperators();
    public void set_ReservedWordOperators(String[] value);
    public static char get_FormulaCharacter();
    public static void set_FormulaCharacter(char value);
    internal bool get_CurrentRowNotationEnabled();
    internal void set_CurrentRowNotationEnabled(bool value);
    internal string get_ActiveFunctionName();
    public string get_ActiveCell();
    public bool get_AllowShortCircuitIFs();
    public void set_AllowShortCircuitIFs(bool value);
    public bool get_AlwaysComputeDuringRefresh();
    public void set_AlwaysComputeDuringRefresh(bool value);
    public bool get_UseFormulaValues();
    public void set_UseFormulaValues(bool value);
    public bool get_CheckDanglingStack();
    public void set_CheckDanglingStack(bool value);
    public int get_ColumnMaxCount();
    public void set_ColumnMaxCount(int value);
    public bool get_EnsureIFCallDuringShortCircuit();
    public void set_EnsureIFCallDuringShortCircuit(bool value);
    public bool get_ForceRefreshCall();
    public void set_ForceRefreshCall(bool value);
    public Dictionary`2<object, object> get_FormulaInfoTable();
    public bool get_GetValueFromArgPreserveLeadingZeros();
    public void set_GetValueFromArgPreserveLeadingZeros(bool value);
    public int get_IterationMaxCount();
    public void set_IterationMaxCount(int value);
    public double get_IterationMaxTolerance();
    public void set_IterationMaxTolerance(double value);
    private Dictionary`2<object, object> get_IterationValues();
    public bool get_LockDependencies();
    public void set_LockDependencies(bool value);
    public int get_RowMaxCount();
    public void set_RowMaxCount(int value);
    public bool get_SupportLogicalOperators();
    public void set_SupportLogicalOperators(bool value);
    public bool get_SupportRangeOperands();
    public void set_SupportRangeOperands(bool value);
    public bool get_SupportsSheetRanges();
    public void set_SupportsSheetRanges(bool value);
    public bool get_ThrowCircularException();
    public void set_ThrowCircularException(bool value);
    public bool get_UseDependencies();
    public void set_UseDependencies(bool value);
    public string get_ValidPrecedingChars();
    public void set_ValidPrecedingChars(string value);
    internal bool get_PreserveFormula();
    internal void set_PreserveFormula(bool value);
    internal bool get_IsSheeted();
    public static char get_ParseArgumentSeparator();
    public static void set_ParseArgumentSeparator(char value);
    public static char get_ParseDecimalSeparator();
    public static void set_ParseDecimalSeparator(char value);
    public static char get_ParseDateTimeSeparator();
    public static void set_ParseDateTimeSeparator(char value);
    public List`1<object> get_ErrorStrings();
    public void set_ErrorStrings(List`1<object> value);
    private string FormulaErrorStringCheck(string args, FormulaArgumentType argumentType);
    private bool IsArgumentIsNumber(string arg);
    internal string Parse(string text);
    internal bool TryGetNamedRange(string text, String& scopedRange);
    private string CheckForStringTIC(string text);
    private bool CheckHasCharBeforeNumber(string tempFormula);
    public string ParseFormula(string formula);
    public string ParseAndComputeFormula(string formula);
    private bool CheckHasExternalWorkbook(string formula);
    private string ExternalBookToken(string s);
    private string ParseSimple(string text);
    internal bool IsUpper(char leter);
    private string ParseSimple(string text, Char[] markers, Char[] operators, Boolean& needToContinue);
    public void PutTokensForSheets(String& text);
    private void HandleSheetRanges(String& text, GridSheetFamilyItem family);
    private bool NotInBlock(string text, int position);
    private void MarkLibraryFormulas(String& formula);
    internal Dictionary`2<object, object> SaveStrings(String& text);
    internal void SetStrings(String& retValue, Dictionary`2<object, object> strings);
    private int FindLastNonQB(string text);
    private string GetCellFrom(string range);
    private int FindNonQB(string text);
    private string ZapBlocks(string text);
    public bool AddFunction(string name, LibraryFunction func);
    public bool RemoveFunction(string name);
    public virtual void InitLibraryFunctions();
    public static int CreateSheetFamilyID();
    public void RegisterGridAsSheet(string refName, ICalcData model, int sheetFamilyID);
    public static void UnregisterGridAsSheet(string refName, ICalcData model);
    public void RenameSheet(string sheetName, ICalcData model);
    public Dictionary`2<object, object> get_DependentCells();
    public Dictionary`2<object, object> get_DependentFormulaCells();
    public void UpdateDependenciesAndCell(string cell1);
    private void HandleIterations(FormulaInfo formula);
    private bool CheckUnderTolerance(double d, double oldValue);
    internal void UpdateDependencies(string s);
    internal void ClearFormulaDependentCells(string cell);
    public static GridSheetFamilyItem GetSheetFamilyItem(ICalcData model);
    private void AddToFormulaDependentCells(string s);
    private string SheetToken(string s);
    public sealed virtual void Dispose();
    private bool FindNextSeparator(string formula, Int32& location);
    private void MarkupResultToIncludeInFormula(String& s);
    public bool GetFormulaArrayBounds(string currentCell, int arrayHeight, int arrayWidth, Int32& firstRowIndex, Int32& firstColIndex, Int32& lastRowIndex, Int32& lastColIndex);
    private string HandleEmbeddedEs(string text);
    public int RowIndex(string s);
    public int ColIndex(string s);
    internal bool IsCellReference(string args);
    private bool CanGetRowIndex(string s);
    private void MarkColonsInQuotes(String& args);
    private int MatchingRightBracket(string formula);
    internal String[] SplitArguments(string args, char argSeperator);
    private string StripTics0(string s);
    public string StripTics(string s);
    private String[] SplitArguments(string array);
    public String[] SplitArgsPreservingQuotedCommas(string args);
    private static bool TextIsEmpty(string s);
    private string PopString(Stack`1<object> _stack);
    private double Pop(Stack`1<object> _stack);
    internal void GetFormulaText(String& s);
    public void AdjustRangeArg(String& range);
    private double comb(int k, int n);
    public void ClearLibraryComputationException();
    public string GetValueFromParentObject(string cell1, bool calculateFormula);
    private int FindLastqNotInBrackets(string s);
    public string GetValueFromGrid(int row, int col);
    private bool TryParseExactDateTime(string value, DateTime& result);
    private string GetValueComputeFormulaIfNecessary(int row, int col, ICalcData grd);
    public string GetValueFromParentObject(ICalcData grd, int row, int col);
    public string GetValueFromParentObject(ICalcData grd, int row, int col, bool calculateFormula);
    public virtual string GetValueFromArg(string arg);
    public String[] GetCellsFromArgs(string args);
    internal String[] GetCellsFromArgs(string args, bool findCellsFromRange);
    public void RecalculateRange(RangeInfo range, ICalcData data);
    public virtual string ToString();
    private bool FindRightBracket(string formula, Int32& location);
    private string HandleEmbeddedIf(string formula);
    public string GetValueFromParentObject(string cell1);
    public string GetValueFromParentObject(int row, int col);
    public string ComputedValue(string formula);
    private string ProcessUpperCase(String& formula, Int32& i, String& sheet);
    private void ComputeEnsureIFCall(String& formula);
    private void ComputeShortCircuitIFFormula(String& formula);
    internal string GetExactResultsFromCellReference(string cellReference, string result);
    internal string ComputeInteriorFunctions(string formula);
    public string ComputeFormula(string parsedFormula);
    public string PullUpdatedValue(string cellRef);
    public void PullUpdatedValue(int targetSheetID, int row, int col);
    internal void grid_ValueChanged(object sender, ValueChangedEventArgs e);
    public void UpdateCalcID();
    public void Refresh(string s);
    public string ComputeDCount(string args);
    public string ComputeDCountA(string args);
    public string ComputeDAverage(string args);
    public string ComputeDGet(string args);
    public string ComputeDMax(string args);
    public string ComputeDMin(string args);
    public string ComputeDProduct(string args);
    public string ComputeDVar(string args);
    public string ComputeDVarp(string args);
    public string ComputeDStdev(string args);
    public string ComputeDStdevp(string args);
    public string ComputeDSum(string args);
    public string ComputeAcsch(string argList);
    public string ComputeBigMul(string argList);
    private long DivRem(long a, long b, Int64& divRem);
    public string ComputeDivRem(string argList);
    public string ComputeIEEERemainder(string argList);
    private double NormalCumulativeDistribution(double x, double mean, double standardDeviation);
    private double FCumulativeDistributionInverse(double p, int k1, int k2);
    private double DerivativeOfFProbabilityDensity(double x, double k1, double k2, double pdf);
    private double NormalCumulativeDistributionInverse(double p, double mean, double standardDeviation);
    public string ComputeReplaceB(string argList);
    public string ComputeBahtText(string arg);
    public string ComputeLogest(string range);
    public string ComputeLogestb(string range);
    public static Double[] MostRecentValues(Double[] inArray, int length);
    public double Mean(Double[] array, double decayFactor, int length);
    public double WeightedMean(Double[] valueArray, Double[] weightArray);
    public static double UniformCumulativeDensityFunction(double x, double min, double max);
    public static double HalfLifeOfGeometricSeries(double decayFactor, int length);
    public static double SumOfGeometricSeries(double decayFactor, int length);
    public static double SumOfInfiniteGeometricSeries(double decayFactor);
    public double Covariance(Double[] array1, Double[] array2, double decayFactor);
    public void RefreshRange(RangeInfo range);
    public void ResetVariableNames();
    public void RegisterVariableNames(String[] list);
    private string ZapQuotedColons(string s);
    public string PlaceVariablenameTokensIntoFormula(string formula);
    private bool IsEqual(double d1, double d2);
    private string IsBlankOrVal(string args);
    public static double besseli1(double x);
    public static double besselk1(double x);
    public static double besselk0(double x);
    private Double[0...,0...] generateSubArray(Double[0...,0...] a, int N, int j1);
    public static string getBetween(string strSource, string strStart, string strEnd);
    public string GetFormulaRowCol(ICalcData grd, int row, int col);
    public int GetCalcID();
    public Double[] ListToDouble(List`1<object> arrayList);
    private void Mark(String& copy, String& text, string op, char token, bool checkPrecedingChar);
    private void MarkIF(String& copy, String& text);
    private void MarkReserveWords(String& text);
    private int FindAndCheckPrecedingChar(String& copy, string op, int loc);
    private Stack`1<object> CombineStack(string formula, int i, Stack`1<object> _tempStack);
    public static void ResetSheetFamilyID();
    public static void ResetSheetIDs();
    public string HandleIteration(string s, FormulaInfo formula);
    public Dictionary`2<object, object> get_NamedRanges();
    public void set_NamedRanges(Dictionary`2<object, object> value);
    private void PopulateNamedRangesNonScoped();
    private void CheckAddNonScopedNamedRange(string key);
    public bool AddNamedRange(string name, string range);
    public bool RemoveNamedRange(string name);
    internal void MarkNamedRanges(String& argList);
    internal string GetTableRange(string text);
    internal int GetTopRowIndexFromRange(string range);
    internal string CheckForNamedRange(string text);
    private bool CheckIfNameRangesIntersect(string formula, String& finalValue);
    private bool FindNextEndIndex(string formula, Int32& location);
    public string ComputeDate(string argList);
    public string ComputeDatevalue(string argList);
    public string ComputeDay(string argList);
    public string ComputeDays360(string argList);
    public string ComputeYearFrac(string argList);
    private bool IsLeap(double year);
    public string ComputeDays(string argList);
    public string ComputeEDate(string argList);
    public string ComputeEOMonth(string argList);
    public string ComputeWeeknum(string argList);
    public string ComputeISOWeeknum(string argList);
    public string ComputeWorkDay(string argList);
    public string ComputeNetworkDays(string argList);
    public string ComputeNetworkDaysintl(string argList);
    public string ComputeWorkDayintl(string argList);
    public string ComputeHour(string argList);
    public string ComputeMinute(string argList);
    public string ComputeSecond(string argList);
    public string ComputeMonth(string argList);
    public string ComputeNow(string argList);
    public string ComputeToday(string argList);
    public string ComputeTime(string argList);
    public string ComputeTimevalue(string argList);
    public string ComputeWeekday(string argList);
    public string ComputeYear(string argList);
    public string ComputeDatedIF(string argList);
    private bool Daysfeb29(DateTime sDate, DateTime eDate);
    private int GetSerialDateFromDate(int y, int m, int d);
    internal double GetSerialDateTimeFromDate(DateTime dt);
    private DateTime GetDateFromSerialDate(int days);
    public List`1<object> get_WeekEndType();
    public string BaseToBase(string argList, int from, int to);
    public string ComputeDec2Bin(string argList);
    public string ComputeDec2Oct(string argList);
    public string ComputeDec2Hex(string argList);
    public string ComputeBin2Oct(string argList);
    public string ComputeBin2Dec(string argList);
    public string ComputeBin2Hex(string argList);
    public string ComputeHex2Bin(string argList);
    public string ComputeHex2Oct(string argList);
    public string ComputeHex2Dec(string argList);
    public string ComputeOct2Bin(string argList);
    public string ComputeOct2Hex(string argList);
    public string ComputeOct2Dec(string argList);
    public string ComputeReal(string argList);
    public string ComputeImaginary(string argList);
    public string ComputeImABS(string argList);
    public string ComputeImProduct(string argList);
    public string ComputeComplex(string argList);
    public string ComputeImSum(string argList);
    public string ComputeImSub(string argList);
    public string ComputeImConjugate(string argList);
    public string ComputeImDiv(string argList);
    public string ComputeImSqrt(string argList);
    public string ComputeImArgument(string argList);
    public string ComputeIMSin(string argList);
    public string ComputeImSinH(string argList);
    public string ComputeIMCSC(string argList);
    public string ComputeIMCos(string argList);
    public string ComputeIMSEC(string argList);
    public string ComputeIMTan(string argList);
    public string ComputeImCot(string argList);
    public string ComputeIMCSCH(string argList);
    public string ComputeImCosH(string argList);
    public string ComputeIMTanH(string argList);
    public string ComputeIMCotH(string argList);
    public string ComputeIMSecH(string argList);
    public string ComputeIMLOG10(string argList);
    public string ComputeIMLOG2(string argList);
    public string ComputeIMLN(string argList);
    public string ComputeImEXP(string argList);
    public string ComputeImPower(string argList);
    public string ComputeImaginaryDifference(string argList);
    internal bool InvertMatrix(Double[0...,0...] A, Double[0...,0...]& invA);
    public string ComputeBitOr(string argList);
    public string ComputeBitXor(string argList);
    public string ComputeBitAnd(string argList);
    public string ComputeBitLShift(string argList);
    public string ComputeBitRShift(string argList);
    public string ComputeErf(string argList);
    public string ComputeErfCPrecise(string argList);
    public string ComputeErfPrecise(string argList);
    public string ComputeBesselI(string argList);
    public static double besseli0(double x);
    public string ComputeBesselJ(string argList);
    public static double j1(string x);
    public static double j0(string x);
    public string ComputeBesselY(string argList);
    public static double y0(double x);
    public static double y1(double x);
    public string ComputebesselK(string argList);
    public string ComputeConversion(string argList);
    private static void besselmfirstcheb(double c, Double& b0, Double& b1, Double& b2);
    private static void besselmnextcheb(double x, double c, Double& b0, Double& b1, Double& b2);
    private static void besselm1firstcheb(double c, Double& b0, Double& b1, Double& b2);
    private static void besselm1nextcheb(double x, double c, Double& b0, Double& b1, Double& b2);
    public bool get_UseDatesInCalculations();
    public void set_UseDatesInCalculations(bool value);
    public bool get_RethrowParseExceptions();
    public void set_RethrowParseExceptions(bool value);
    private List`1<string> get_NativeFormats();
    private List`1<object> get_SortedSheetNames();
    private bool IsOptimizedMatchesEnabled();
    private bool IsVLookupCachingEnabled();
    private bool IsHLookupCachingEnabled();
    private bool IsLookupCachingEnabled();
    public LookupCachingMode get_EnableLookupTableCaching();
    public void set_EnableLookupTableCaching(LookupCachingMode value);
    public void LookupCachingClearAll();
    public void LookupCachingClearSheet(ICalcData grd);
    private void MarkParseArgumentSeparatorInQuotes(String& args);
    public void ReloadErrorStrings();
    private string GetSheetTokenFromReference(string r);
    public int GetSheetID(ICalcData grd);
    private double Determinant(Double[0...,0...] a, int k);
    private double NormalProbabilityDensity(double x, double mean, double standardDeviation);
    private bool Cofactor(Double[0...,0...] num, int f, Double[0...,0...]& inverse);
    private bool Inverse(Double[0...,0...] num, Double[0...,0...] fac, int r, Double[0...,0...]& inverse);
    private bool IsDate(object o, DateTime& date);
    internal bool IsRange(string range);
    internal bool ISColumn(string range);
    public double ChiSquaredProbabilityDensityFunction(double x, int k);
    private double StdevdotP(Double[] range);
    private double NormalCumulativeDistributionFunctionInverse(double p, double mean, double standardDeviation);
    public double StandardNormalCumulativeDistributionInverse(double p);
    private double pearson(Double[] x, Double[] y, int n);
    public string ComputeNpv(string argList);
    public string ComputePmt(string argList);
    public string ComputePpmt(string argList);
    public string ComputePv(string argList);
    public string ComputeEffect(string argList);
    public string ComputeRate(string argList);
    public string ComputeSln(string argList);
    public string ComputeSyd(string argList);
    public string ComputeVdb(string argList);
    public string ComputeDollarDe(string args);
    public string ComputeDollarFr(string args);
    public string ComputeDuration(string args);
    public string ComputeACCRINTM(string args);
    public string ComputeRRI(string args);
    public string ComputeFvschedule(string args);
    public string ComputeIntrate(string argList);
    public string ComputeDisc(string args);
    public string ComputeFv(string argList);
    public string ComputeIpmt(string argList);
    public string ComputeIrr(string argList);
    public string ComputeXirr(string argList);
    private string ComputeXirr(Double[] cashFlows, Double[] dates, double lowerBoundRate);
    private string CalculateXirr(Double[] cashFlows, Double[] dates, double guessRate);
    private double CalculateNPV(Double[] cashFlows, Double[] dates, double rate);
    private double CalculateNPVDerivative(Double[] cashFlows, Double[] dates, double rate);
    public string ComputeIspmt(string argList);
    public string ComputeMirr(string argList);
    public string ComputeNper(string argList);
    public string ComputeDb(string argList);
    public string ComputeDdb(string argList);
    public string ComputeCUMIPMT(string args);
    public string ComputeACCRINT(string args);
    public string ComputeCUMPRINC(string args);
    public string ComputeNominal(string args);
    public string ComputeMDuration(string args);
    private string CalculateMDuration(DateTime settlementDate, DateTime maturityDate, double couponRate, double yield, int frequency, int basis);
    public string ComputePDuration(string args);
    public string ComputeCoupNCD(string args);
    private string CheckErrorStringForCoupDays(string args, DateTime& settlementDate, DateTime& maturityDate, Int32& monthBetweenCoupon, Int32& basis);
    public string ComputeCoupPCD(string args);
    public string ComputeCoupDayBS(string args);
    private string CalculateCoupDays(DateTime settlementDate, DateTime maturityDate, int monthBetweenCoupon, int basis, bool isFormulaCoupDayBS, bool isFormulaCoupDaySNC);
    private int CalculateDaysCount(DateTime start, DateTime end, int basis);
    public string ComputeCoupDaySNC(string args);
    public string ComputeCoupDays(string args);
    public string ComputeCoupNum(string args);
    public string ComputeAddress(string argList);
    public string ComputeCell(string arg);
    public string ComputeInfo(string argList);
    public string ComputeType(string argList);
    public string ComputeIsFormula(string argList);
    private int matchCompare(object o1, object o2);
    public string ComputeHLookUp(string range);
    internal void SplitRange(string range, String& rangeValue, String& logicalValue);
    public string ComputeMatch(string arg);
    private string GetResultRange(string lookupRange, string resultRange, Boolean& isRangeModified);
    internal string CalculateLookupVector(string lookupRange);
    public string ComputeLookUp(string range);
    private string GetResultVectorValue(string resultVal, string lookUp, Boolean& isRangeModified, int index, String[] s, List`1<string> cellValue);
    private bool FindExactMatch(string arg, string lookUp);
    public string ComputeVLookUp(string range);
    public string ComputeLeft(string range);
    public string ComputeLen(string range);
    public string ComputeMid(string range);
    public string ComputeRight(string range);
    public bool IsSeparatorInTIC(string s);
    public String[] GetStringArray(string s);
    public string ComputeConcatenate(string range);
    public string ComputeIndirect(string args);
    private string SubstituteText(string text, string old_Text, string new_Text, string instance_num);
    public string ComputeSubstitute(string range);
    public string ComputeText(string range);
    public string ComputeTextJoin(string range);
    public string ComputeConcat(string range);
    public string ComputeValue(string range);
    public string ComputeMod(string range);
    public string ComputeTrunc(string range);
    private void PerformLogicalOperation(string tempr, Boolean& indexValue, Int32& count, Double[]& vector, String& errorString);
    private void PerformArithmeticCalculation(string range, Boolean& indexValue, Int32& count, Double[]& vector, String& errorString);
    private string PerformSumproductArithmetic(string range);
    public string ComputeSumProduct(string range);
    internal void performMultiplication(string r, Boolean& indexValue, Int32& count, Double[]& vector, String& errorString);
    public string ComputeDollar(string args);
    public string ComputeFixed(string args);
    public string ComputeChoose(string arg);
    public string ComputeLower(string args);
    public string ComputeUpper(string args);
    public string ComputeT(string args);
    public string ComputeColumn(string arg);
    public string ComputeRow(string arg);
    public string ComputeN(string args);
    private string ComputeNA(string args);
    public string ComputeNA();
    public string ComputeErrorType(string args);
    public string ComputeTrim(string args);
    public string ComputeIsLogical(string args);
    public string ComputeIsNA(string args);
    public string ComputeIsErr(string range);
    public string ComputeIsBlank(string args);
    public string ComputeIsText(string args);
    public string ComputeIsNonText(string args);
    public string ComputeIsError(string range);
    public string ComputeIsRef(string args);
    public string ComputeAnd(string range);
    public string ComputeIFS(string args);
    public string ComputeSwitch(string args);
    private String[] ComputeLogicalArrayFormula(string range);
    public string ComputeOr(string range);
    public string ComputeNot(string args);
    public string ComputeOffSet(string arg);
    public string ComputeTrue(string empty);
    public string ComputeFalse(string empty);
    public string ComputeXor(string range);
    public string ComputeIfNA(string range);
    public string ComputeAcos(string args);
    public string ComputeArabic(string arg);
    public string ComputeAreas(string arg);
    public string ComputeAsin(string args);
    public string ComputeAsinh(string args);
    public string ComputeAtan(string args);
    public string ComputeAtan2(string argList);
    public string ComputeAtanh(string args);
    public string ComputeCeiling(string args);
    public string ComputeCeilingMath(string args);
    public string ComputeColumns(string arg);
    public string ComputeCombin(string argList);
    public string ComputeCombinA(string argList);
    public string ComputeLog(string argList);
    public string ComputeLog10(string args);
    public string ComputeExp(string args);
    public string ComputeSqrtpi(string args);
    public string ComputeSqrt(string args);
    public string ComputeAbs(string args);
    public string ComputeCos(string args);
    public string ComputeAcosh(string args);
    public string ComputeRand(string args);
    public string ComputeTan(string args);
    public string ComputeTanh(string args);
    private bool CheckCriteria(char op, string s, string criteria);
    private bool CheckCriteria(char op, string s, double compare);
    public string ComputeSumif(string argList);
    private void FindRowColIndex(Int32& startRow, Int32& endRow, Int32& startCol, Int32& endCol);
    public string ComputeAsc(string arg);
    public string ComputeAcot(string argList);
    public string ComputeAcoth(string argList);
    public string ComputeAsech(string argList);
    public string ComputeBase(string argList);
    public string ComputeCosh(string args);
    public string ComputeCot(string argList);
    public string ComputeCoth(string argList);
    public string ComputeCsc(string argList);
    public string ComputeCsch(string argList);
    public string ComputeDecimal(string argList);
    public string ComputeDegrees(string args);
    public string ComputeEven(string args);
    public string ComputeFact(string args);
    public string ComputeFactdouble(string args);
    public string ComputeFloor(string args);
    private double CalculateFloorValue(double d1, double d2);
    public string ComputeFormulaText(string argList);
    public string ComputeGcd(string range);
    public string ComputeHyperlink(string argList);
    public string ComputeInt(string range);
    public string ComputeIsEven(string args);
    public string ComputeIsNumber(string range);
    public string ComputeIsOdd(string args);
    public string ComputeLcm(string range);
    public string ComputeLn(string argList);
    private string ComputeMath(string args, MathFunc func);
    public string ComputeMdeterm(string arg);
    internal void GetCofactor(Double[0...,0...] matrix, Double[0...,0...]& iMatrix);
    public string ComputeMInverse(string arg);
    public string ComputeMmult(string arg);
    public string ComputeMround(string argList);
    public string ComputeMultinomial(string range);
    public string ComputeMUnit(string arg);
    public string ComputeOdd(string args);
    public string ComputePI(string args);
    public string ComputePow(string args);
    private string GetValueForBool(string arg);
    public string ComputeProduct(string range);
    public string ComputeQuotient(string range);
    public string ComputeRadians(string args);
    public string ComputeRoman(string argList);
    public string ComputeRound(string argList);
    public string ComputeRounddown(string argList);
    public string ComputeRoundup(string argList);
    public string ComputeRows(string arg);
    public string ComputeSecant(string argList);
    public string ComputeSecanth(string argList);
    public string ComputeSheet(string argList);
    public string ComputeSheets(string argList);
    public string ComputeSign(string args);
    public string ComputeSin(string args);
    public string ComputeSinh(string args);
    internal String[] ComputeSumArray(string range);
    public string ComputeSum(string range);
    public string ComputeSumIFS(string argList);
    private string CalculateIFSFormula(string argList, string condition);
    public string ComputeSumsq(string range);
    public string ComputeSumx2my2(string range);
    public string ComputeSumx2py2(string range);
    public string ComputeSumxmy2(string range);
    public string ComputeTranspose(string arg);
    public string ComputeTruncate(string argList);
    public string ComputeRandbetween(string argList);
    public string ComputeSeriessum(string arg);
    public string ComputeXLookUp(string args);
    private string GetMatchedValue(string lookupValue, string lookupRange, string returnArray, string notFound, string matchMode, string searchMode);
    internal String[] ReorderCellsColumnWise(String[] cells);
    private string CalculateLookupRange(string lookupRange);
    private int FindMatchFromRange(string lookupValue, String[] tempArray, string matchMode);
    private string FindMatchMode(string arg);
    private string FindSearchMode(string arg);
    private string ValidateArgumentType(string arg, FormulaArgumentType type);
    public string ComputeXMatch(string args);
    private int FindMatchIndex(string lookupValue, string lookupRange, string matchMode, string searchMode);
    private String[] SortDescendingOrder(String[] cells);
    private String[] GetsortedArray(String[] array);
    private int FindMatch(string lookupValue, String[] tempArray, string matchMode);
    private bool CheckForMatch(string tempValue, string lookupValue);
    public string ComputeFloorMath(string args);
    private double validateArg(string arg);
    internal string FloorMathArrayCalculation(String[] range);
    private void ParseArgAsDouble(string number, string sign, string mode, Double& d1, Double& d2, Double& d3);
    private void ParseArgAsDouble(string number, string sign, Double& d1, Double& d2);
    private double CalculateFloorMathValue(double d1, double d2, double d3);
    public string ComputeFloorPrecise(string args);
    private double CalculateFloorPrecise(double d1, double d2);
    private double CalculateCeilingValue(double d1, double d2);
    internal string FloorPreciseArrayCalculation(String[] range);
    internal string IsoCeilingArrayCalculation(String[] range);
    internal string CeilingPreciseArrayCalculation(String[] range);
    public string ComputeIsoCeiling(string args);
    public string ComputeCeilingPrecise(string args);
    public string ComputeVStack(string args);
    public string ComputeHStack(string args);
    private List`1<string> ValidateStackArgs(string args, String& errorCheck);
    private string ConvertArrayToString(String[0...,0...] result, int rows, int col);
    private string VerticalStackValue(List`1<string> arrayList);
    private string HorizontalStackValue(List`1<string> arrayList);
    public string ComputePhi(string args);
    internal Double[] GetDoubleArray(string range);
    private double Covariance(Double[] array1, Double[] array2);
    public double Mean(Double[] array);
    public static double Mean(Double[] array, double decayFactor);
    public static double InverseSumOfGeometricSeries(double decayFactor, int length);
    private double GammaLn(double x);
    public string ComputeAvedev(string range);
    public string ComputeAveragea(string range);
    public string ComputeAverageIFS(string argList);
    private string findCriteria(string criteria, Char& op);
    internal bool CheckForCriteriaMatch(string s, char op, string criteria, bool isNumber, double compare);
    public string ComputeChidist(string argList);
    public string ComputeGrowth(string range);
    internal void ComputeLogestMB(Double[] y, Double[] x, Double& m, Double& b);
    public string ComputeGammaln(string argList);
    private double chidist(double x, double v);
    private double chiinv(double p, double v);
    public string ComputeLinest(string range);
    public string ComputeChiinv(string argList);
    public string ComputeChitest(string range);
    private double normaldensity(double x, double u, double s);
    private double normaldist(double x, double u, double s);
    public string ComputeNormdist(string argList);
    public string ComputeNormsDist(string argList);
    public string ComputeNorminv(string argList);
    private double normalinv(double p, double u, double s);
    private double newnormalinv(double p);
    public string ComputeNormsInv(string argList);
    public string ComputeConfidence(string argList);
    public string ComputeCorrel(string range);
    public string ComputeCount(string range);
    public string ComputeCounta(string range);
    public string ComputeCountblank(string range);
    public string ComputeCountif(string argList);
    private string ComputeCountIFFunctions(string argList, bool isCountif);
    public string ComputeCOUNTIFS(string argList);
    public string ComputeCovar(string range);
    public string ComputeCritbinom(string argList);
    private int critbinom(int nTrials, double p, double alpha);
    public string ComputeExpondist(string argList);
    public string ComputeFdist(string argList);
    private double fdensity(double x, int df1, int df2);
    private double fdist(double x, int df1, int df2);
    private double finv(double p, int df1, int df2);
    public string ComputeFinv(string argList);
    public string ComputeFisher(string argList);
    public string ComputeFisherinv(string argList);
    public string ComputeForecast(string range);
    private double var(Double[] x);
    public string ComputeKurt(string range);
    public string ComputeLarge(string range);
    public string ComputeLognormdist(string argList);
    public string ComputeLoginv(string argList);
    public string ComputeMaxa(string range);
    public string ComputeMedian(string range);
    public string ComputeMina(string range);
    public string ComputeMode(string range);
    public string ComputeNegbinomdist(string argList);
    private double negbinomdensity(int failures, int successes, double p);
    public string ComputePearson(string range);
    public string ComputePercentile(string range);
    internal string ComputeContionalFomattingPercentile(string range);
    public string ComputePercentrank(string range);
    public string ComputePermut(string argList);
    public string ComputePoisson(string argList);
    public string ComputeProb(string range);
    public string ComputeQuartile(string range);
    public string ComputeRank(string range);
    public string ComputeRsq(string range);
    public string ComputeSkew(string range);
    private double sd(Double[] x, Double& xbar);
    public string ComputeSlope(string range);
    public string ComputeSmall(string range);
    public string ComputeStandardize(string argList);
    public string ComputeStdev(string range);
    public string ComputeStdeva(string range);
    public string ComputeStdevaP(string range);
    public string ComputeStdevp(string range);
    public string ComputeStdevpa(string range);
    public string ComputeSteyx(string range);
    public string ComputeTrimmean(string range);
    public string ComputeVar(string range);
    private Double[] GetDoubleArrayA(string range);
    public string ComputeVara(string range);
    public string ComputeVarp(string range);
    public string ComputeVarpa(string range);
    public string ComputeWeibull(string argList);
    public string ComputeZtest(string range);
    private void CalculateMultiRange(String& range);
    public string ComputeMax(string range);
    public string ComputeMINIFS(string argList);
    public string ComputeMAXIFS(string argList);
    public string ComputeSubTotal(string args);
    public string ComputeMin(string range);
    public string ComputeAvg(string range);
    public string ComputeHarmean(string range);
    public string ComputeHypgeomdist(string argList);
    public string ComputeHypgeomOdist(string argList);
    private string CalculateArea(string s);
    public string ComputeIf(string args);
    public string ComputeIfError(string args);
    public string ComputeIntercept(string range);
    public string ComputeBinomdist(string argList);
    private double binomdist(int trials, int successes, double p);
    public string ComputeSkewP(string range);
    public string ComputeCovarianceP(string range);
    public string ComputeCovarianceS(string range);
    public string ComputePercentileInc(string range);
    public string ComputePercentrankExc(string range);
    public string ComputePercentileExc(string range);
    public string ComputePercentrankInc(string range);
    private double sdP(Double[] x, Double& xbar);
    public string ComputeStdevaS(string range);
    public string ComputeVarPAdv(string range);
    public string ComputeVarSAdv(string range);
    public string ComputePermutationA(string argList);
    public string ComputeNormOdist(string argList);
    public string ComputeNormOinv(string argList);
    public string ComputeNormOsODist(string argList);
    public double StandardNormalProbabilityDensity(double x);
    public double StandardNormalCumulativeDistributionFunction(double x);
    private double StandardNormalProbabilityDensityFunction(double x);
    public double StandardNormalCumulativeDistribution(double x);
    public double StandardNormalCumulativeDistributionFunctionInverse(double p);
    public string ComputeNormOsOInv(string argList);
    public string ComputeWeiBullODist(string argList);
    public string ComputeExponODist(string argList);
    private double GammaInv(double p, double a, double b);
    private int GammaInvInitialState(double a, double p, Double& beginX, Double& beginY, Double& endX, Double& endY, Double& di, Double& result);
    private int GammaInvMiddleState(double a, double p, Double& beginX, Double& beginY, Double& endX, Double& endY, Double& di, Double& result);
    private int GammaInvFinalState(double a, double p, Double& beginX, Double& beginY, Double& endX, Double& endY, Double& di, Double& result);
    private double GammaInvUpperIncomplete(double a, double x);
    private double GammaLowerIncomplete(double a, double x);
    private double GammaUpperIncomplete(double a, double x);
    private double GammaDistCummulative(double a, double b, double x);
    private double GammaDistProbability(double a, double b, double x);
    public string ComputeGammadist(string argList);
    public string ComputeGammainv(string argList);
    public string ComputeGeomean(string range);
    public string ComputeGammaOdist(string argList);
    public string ComputeGammaOinv(string argList);
    public string ComputeGammaln0Precise(string argList);
    public string ComputeTOInv(string argList);
    private double TCumulativeDistributionInverse(double p, int k);
    private double TProbabilityDensity(double x, int k);
    private double TCumulativeDensity(double x, int k);
    public string ComputeFOinvORt(string argList);
    public string ComputeBinomOInv(string argList);
    public string ComputeLognormOinv(string argList);
    public string ComputeLognormOdist(string argList);
    public string ComputeConfidenceOnorm(string argList);
    public string ComputeChisqOdistORt(string argList);
    public string ComputeFOdist(string argList);
    private double FProbabilityDensity(double x, int k1, int k2);
    private double FCumulativeDensity(double x, int k1, int k2);
    private static double BetaFunction(double a, double b);
    private static double GammaFunction(double z);
    private double RIBetaFunction(double x, double a, double b);
    private double RIBetaFunction(double x, int a, int b);
    private double RIBetaFunction(double x, double a, int b);
    private double IBetaFunction(double x, double a, double b);
    private double PIBetaFunction(double xL, double xU, double a, double b);
    public string ComputeFOdistORt(string argList);
    public string ComputeChisqOdist(string argList);
    public string ComputeChisqOinv(string argList);
    public string ComputeChisqOTest(string range);
    public string ComputeChisqOinvORt(string argList);
    public string ComputeBinomOdist(string argList);
    public string ComputeZOtest(string range);
    public string ComputeRankOAvg(string range);
    public string ComputeRankOEq(string range);
    public string ComputeIHDIST(string range);
    public static double IHProbDens(double x, int n);
    public static double Combinations(int n, int k);
    internal static double LogCombin(int n, int k);
    private static double LogFactorial(int x);
    public static long Factorial(int n);
    public string ComputeUnidist(string argList);
    public static double UniProbDens(double x, double min, double max);
    public string ComputeQuartileOExc(string range);
    public string ComputeQuartileOInc(string range);
    public string ComputeNegbinomODist(string argList);
    public string ComputePoissonODist(string argList);
    public string ComputeDelta(string argList);
    public string ComputeGestep(string argList);
    public string ComputeDevsq(string range);
    public string ComputeAverageIF(string argList);
    public string ComputeConfidenceT(string argList);
    public string ComputeFOinv(string argList);
    public string ComputeModeOMult(string range);
    public string ComputeModeOsngl(string range);
    public string ComputeTOdist(string argList);
    public string ComputeBetaDist(string argList);
    public double BetaCumulativeDist(double x, double a, double b);
    private double BetaProbabilityDens(double x, double a, double b);
    public string ComputeGauss(string args);
    public string ComputeGamma(string args);
    private double CalculateGammaValue(string number);
    public string ComputeVarS(string args);
    public string ComputeFrequency(string args);
    private string GetFrequencyCounts(String[] argValues);
    private static string Spell(int number);
    public string TranslateText(string input, string languagePair);
    public string ComputeCode(string argList);
    public string ComputeFindB(string arg);
    public string ComputeLeftB(string range);
    public string ComputeJis(string arg);
    public string ComputeLenB(string range);
    public string ComputeMidB(string range);
    public string ComputeRightB(string range);
    public string ComputeNumberValue(string argList);
    public string ComputeProper(string argList);
    public string ComputeReplace(string argList);
    public string ComputeRept(string argList);
    public string ComputeSearchB(string argList);
    public string ComputeUniChar(string argList);
    public string ComputeUniCode(string argList);
    public string ComputeChar(string arg);
    public string ComputeClean(string arg);
    public string ComputeExact(string range);
    public string ComputeFind(string arg);
    public string ComputeIndex(string arg);
    private string FindArrayIndex(string r, String[] args);
    public string ComputeSearch(string argList);
    private List`1<String[0...,0...]> FindUniqueElement(String[0...,0...] arrayList, string byCol, string exactOnce);
    public string ComputeUnique(string args);
    private string CheckForErrorValue(string text, string delimiter, string instance_num, string match_mode, string match_end, string if_not_found, Boolean& check);
    public string ComputeTextAfter(string args);
    private void GetValueForArg(String[] args, String& text, String& delimiter, String& instance_num, String& match_mode, String& match_end, String& if_not_found);
    public string ComputeTextBefore(string args);
    private int FindIndexOfCharacterFromEnd(string text, string delimiter, string instance_num);
    private int FindIndexOfWordFromEnd(string text, string delimiter, string instance_num);
    private int FindIndexOfWord(string text, string delimiter, string instance_num);
    private int FindIndexOfCharacter(string text, string delimiter, string instance_num);
    public string ComputeValueToText(string args);
    private string ValueToTextCalculation(string value, string format);
    internal string ValueToTextArrayCalculation(String[] range);
    public string ComputeArrayToText(string args);
    private string ConvertArrayToTextValue(string range, string format);
    private List`1<List`1<string>> ConvertToStructuredData(List`1<string> result, int numberOfColumns);
    private string ArrayToTextCalculation(string value, string format);
    public string ComputeToCol(string args);
    private string CheckingErrorStringsOfArgument(String& ignore, String& scanByColumn, String& range, string args);
    private string ConvertValuesOfArray(string range, string ignore, string scanByColumn, bool isFormulaToRow);
    private void CheckConditionsForValue(string cellValue, string ignore, List`1<string> values);
    private void GetValuesOfArray(Int32& totalNumberOfColumns, Int32& totalNumberOfRows, List`1& arrayValues, string range);
    public string ComputeToRow(string args);
    public string ComputeChooseCols(string args);
    private string GetIndexes(String[] args, int totalNumberOfColumns, int totalNumberOfRows, bool isFormulaChooseColumn, Int32[]& columnIndexes);
    private string ChooseValuesFromArray(string range, Int32[] columnIndexes, int totalNumberOfColumns, int totalNumberOfRows, List`1<string> arrayValues, bool isFormulaChooseColumn);
    public string ComputeChooseRows(string args);
    private List`1<List`1<string>> ConvertToStructuredDataByColumns(List`1<string> cellData, int numberOfColumns);
    public string ComputeSequence(string args);
    private Int32[0...,0...] CreateSequence(int rows, int columns, int start, int step);
    public string ComputeTextSplit(string args);
    private String[] ComputeDelimiters(string args);
    private void SplitText(string text, string rowDelimiter, string colDelimiter, string ignoreEmpty, string match_mode, String[] columns, Int32& maxCol, List`1& result);
    private void ComputeColumnsDelimiter(string text, string colDelimiter, string ignoreEmpty, string match_mode, String[] columns, Int32& maxCol, List`1& result);
    public string ComputeTake(string args);
    private string RetrieveValuesFromRange(string range, string rows, string columns, String[] args);
    public string ComputeDrop(string args);
    private string DropValuesFromArray(string range, string rows, string columns, int totalNumberOfRows, int totalNumberOfColumns, List`1<string> arrayValues);
    public string ComputeExpand(string args);
    private string ExpandedArray(string array, string rows, string cols, string padWith);
    public string ComputeWrapRows(string args);
    private string WrapValuesOfArray(string vector, string wrapCount, string padWith, bool isFormulaWrapRows);
    public string ComputeWrapCols(string args);
    private string ArgumentErrorCheck(string args, String& vector, String& wrapCount, String& padWith);
    public string ComputeSort(string args);
    private string PerformSortingOfRange(List`1<string> result, string sortIndex, string sortOrder, string byColumn, int numberOfColumns);
    private List`1<List`1<string>> SortByRow(List`1<List`1<string>> data, int sortIndex, int sortOrder);
    private List`1<List`1<string>> SortByColumn(List`1<List`1<string>> data, int sortIndex, int sortOrder);
    private int CompareValues(string x, string y, int sortOrder);
    public string ComputeSortBy(string args);
    private string GetValuesOfArrays(String[] args);
    private string PerformSorting(List`1<string> valuesOfRangeOrArray, List`1<string> allByArrays, List`1<string> allSortOrders, int numberOfColumns, bool isByArrayRow);
    public string ComputeFilter(string args);
    private string CalculateCriteria(string includeValue, int totalCol, int totalRow, Boolean& isRangeOfIncludeHorizontal);
    private string GetFilterValuesOfArray(List`1<string> array, string includeValue, string if_empty, int totalNumberOfColumns, bool isRangeOfIncludeHorizontal);
    public string ComputeEncodeURL(string argList);
    public string ComputeFilterXml(string argList);
}
[ExtensionAttribute]
public static class Syncfusion.XlsIO.Calculate.CalcEngineHelper : object {
    public static DateTime FromOADate(double doubleOLEValue);
    [ExtensionAttribute]
public static double ToOADate(DateTime inDateTime);
    [ExtensionAttribute]
public static string ToUpper(string strValue, CultureInfo culture);
    [ExtensionAttribute]
public static string ToLower(string strValue, CultureInfo culture);
    [ExtensionAttribute]
public static T[] ToArray(IEnumerable`1<T> enumObject);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Calculate.CalcQuickBase : object {
    private int _calcQuickID;
    private Dictionary`2<object, object> _controlModifiedFlags;
    private FormulaInfoHashtable _dataStore;
    private CalcEngine _engine;
    private Dictionary`2<object, object> _keyToRowsMap;
    private Dictionary`2<object, object> _keyToVectors;
    private Dictionary`2<object, object> _nameToControlMap;
    private Dictionary`2<object, object> _rowsToKeyMap;
    private bool autoCalc;
    private string cellPrefix;
    private bool checkKeys;
    private bool disposeEngineResource;
    protected bool ignoreChanges;
    private static string LEFTBRACE;
    private string TIC;
    private static char LEFTBRACKET;
    private static char RIGHTBRACKET;
    private string VALIDLEFTCHARS;
    private string VALIDRIGHTCHARS;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ValueChanged;
    [CompilerGeneratedAttribute]
private QuickValueSetEventHandler ValueSet;
    public bool AutoCalc { get; public set; }
    private int calcQuickID { get; }
    public bool CheckKeys { get; public set; }
    protected Dictionary`2<object, object> ControlModifiedFlags { get; }
    protected FormulaInfoHashtable DataStore { get; }
    public bool DisposeEngineResource { get; public set; }
    public CalcEngine Engine { get; }
    public char FormulaCharacter { get; public set; }
    protected Dictionary`2<object, object> KeyToRowsMap { get; }
    protected Dictionary`2<object, object> KeyToVectors { get; }
    protected Dictionary`2<object, object> NameToControlMap { get; }
    protected Dictionary`2<object, object> RowsToKeyMap { get; }
    public string Item { get; public set; }
    public bool ThrowCircularException { get; public set; }
    public CalcQuickBase(bool resetStaticMembers);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ValueSet(QuickValueSetEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueSet(QuickValueSetEventHandler value);
    public bool get_AutoCalc();
    public void set_AutoCalc(bool value);
    private int get_calcQuickID();
    public bool get_CheckKeys();
    public void set_CheckKeys(bool value);
    protected Dictionary`2<object, object> get_ControlModifiedFlags();
    protected FormulaInfoHashtable get_DataStore();
    public bool get_DisposeEngineResource();
    public void set_DisposeEngineResource(bool value);
    public CalcEngine get_Engine();
    public char get_FormulaCharacter();
    public void set_FormulaCharacter(char value);
    protected Dictionary`2<object, object> get_KeyToRowsMap();
    protected Dictionary`2<object, object> get_KeyToVectors();
    protected Dictionary`2<object, object> get_NameToControlMap();
    protected Dictionary`2<object, object> get_RowsToKeyMap();
    public void ResetKeys();
    public string get_Item(string key);
    public void set_Item(string key, string value);
    public bool get_ThrowCircularException();
    public void set_ThrowCircularException(bool value);
    private bool CheckAdjacentPiece(string s, string validChars, bool first);
    public virtual CalcEngine CreateEngine();
    public sealed virtual void Dispose();
    public string TryParseAndCompute(string formulaText);
    public string GetFormula(string key);
    public sealed virtual object GetValueRowCol(int row, int col);
    protected void InitCalcQuick(bool resetStaticMembers);
    private string MarkKeys(string formula);
    public string ParseAndCompute(string formulaText);
    public void RefreshAllCalculations();
    public void SetDirty();
    public sealed virtual void SetValueRowCol(object value, int row, int col);
    public void UpdateDependencies(string key);
    public sealed virtual void WireParentObject();
    public sealed virtual int GetFirstRow();
    public sealed virtual int GetLastRow();
    public sealed virtual int GetRowCount();
    public sealed virtual int GetFirstColumn();
    public sealed virtual int GetLastColumn();
    public sealed virtual int GetColumnCount();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Calculate.CalcSheet : object {
    private bool calcSuspended;
    internal Object[0...,0...] data;
    [ThreadStaticAttribute]
private static char delimiter;
    internal CalcEngine engine;
    private bool inSerialization;
    private bool lockSheetChanges;
    private string name;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler CalculatedValueChanged;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ValueChanged;
    public bool CalculationsSuspended { get; public set; }
    public int ColCount { get; }
    public static char Delimter { get; public set; }
    public CalcEngine Engine { get; public set; }
    public bool LockSheetChanges { get; public set; }
    public string Name { get; public set; }
    public int RowCount { get; }
    public object Item { get; public set; }
    public CalcSheet(int rows, int cols);
    private static CalcSheet();
    [CompilerGeneratedAttribute]
public void add_CalculatedValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CalculatedValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(ValueChangedEventHandler value);
    public bool get_CalculationsSuspended();
    public void set_CalculationsSuspended(bool value);
    public int get_ColCount();
    public static char get_Delimter();
    public static void set_Delimter(char value);
    public CalcEngine get_Engine();
    public void set_Engine(CalcEngine value);
    public bool get_LockSheetChanges();
    public void set_LockSheetChanges(bool value);
    public string get_Name();
    public void set_Name(string value);
    public int get_RowCount();
    public object get_Item(int row, int col);
    public void set_Item(int row, int col, object value);
    public virtual object GetValueRowCol(int row, int col);
    protected virtual void OnCalculatedValueChanged(ValueChangedEventArgs e);
    protected virtual void OnValueChanged(ValueChangedEventArgs e);
    public static CalcSheet ReadSSS(StreamReader sr);
    public virtual void SetValue(int row, int col, string val);
    public virtual void SetValueRowCol(object value, int row, int col);
    public virtual void WireParentObject();
    public sealed virtual int GetFirstRow();
    public sealed virtual int GetLastRow();
    public sealed virtual int GetRowCount();
    public sealed virtual int GetFirstColumn();
    public sealed virtual int GetLastColumn();
    public sealed virtual int GetColumnCount();
    public void WriteSSS(StreamWriter sw, bool valuesOnly);
    public void WriteSSS(StreamWriter sw);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Calculate.CalcSheetList : List`1<object> {
    private static int nextCalcSheetNumber;
    private CalcWorkbook workBook;
    public CalcSheet Item { get; public set; }
    public CalcSheet Item { get; public set; }
    public CalcSheetList(CalcSheet[] list, CalcWorkbook parentWorkBook);
    private static CalcSheetList();
    public CalcSheet get_Item(int i);
    public void set_Item(int i, CalcSheet value);
    public CalcSheet get_Item(string sheetName);
    public void set_Item(string sheetName, CalcSheet value);
    public void Add(object o);
    public void Insert(int index, object o);
    public void InsertRange(int index, ICollection c);
    public int NameToIndex(string sheetName);
    public void Remove(object o);
    public void RemoveAt(int index);
    public CalcSheet[] ToArray();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Calculate.CalcWorkbook : object {
    private CalcSheetList calcSheetList;
    private CalcEngine engine;
    internal Dictionary`2<object, object> idLookUp;
    internal int sheetfamilyID;
    [ObsoleteAttribute("This field will be removed in a future version. Please use the CalcSheetList property instead.", "False")]
public List`1<object> sheetNames;
    public CalcSheetList CalcSheetList { get; public set; }
    [ObsoleteAttribute("This property will be removed in a future version. Please use the CalcSheetList property instead.", "False")]
public CalcSheet[] calcSheets { get; }
    public CalcEngine Engine { get; public set; }
    public int SheetCount { get; }
    public CalcSheet Item { get; public set; }
    public CalcSheet Item { get; public set; }
    public CalcWorkbook(CalcSheet[] calcSheets, Dictionary`2<object, object> namedRanges);
    public CalcSheetList get_CalcSheetList();
    public void set_CalcSheetList(CalcSheetList value);
    public CalcSheet[] get_calcSheets();
    public CalcEngine get_Engine();
    public void set_Engine(CalcEngine value);
    public int get_SheetCount();
    public CalcSheet get_Item(string sheetName);
    public void set_Item(string sheetName, CalcSheet value);
    public CalcSheet get_Item(int sheetIndex);
    public void set_Item(int sheetIndex, CalcSheet value);
    public virtual void CalculateAll();
    public void ClearFormulas(CalcSheet sheet);
    public int GetSheetID(string sheetName);
    private void GetSheetRowCol(string key, Int32& sheet, Int32& row, Int32& col);
    private void InitCalcWorkbook(int sheetCount);
}
internal class Syncfusion.XlsIO.Calculate.CustomComparer : object {
    private Comparison`1<string> stringComparison;
    internal CustomComparer(Comparison`1<string> comparison);
    public sealed virtual int Compare(string x, string y);
}
internal class Syncfusion.XlsIO.Calculate.FormulaComputedEventArgs : EventArgs {
    private string formula;
    private string computedValue;
    private string cell;
    private bool isInnerFormula;
    private bool handled;
    internal string Formula { get; }
    internal string ComputedValue { get; internal set; }
    internal string Cell { get; }
    internal bool IsInnerFormula { get; }
    internal bool Handled { get; internal set; }
    internal FormulaComputedEventArgs(string formula, string computedValue, string cell, bool isInnerFormula);
    internal string get_Formula();
    internal string get_ComputedValue();
    internal void set_ComputedValue(string value);
    internal string get_Cell();
    internal bool get_IsInnerFormula();
    internal bool get_Handled();
    internal void set_Handled(bool value);
}
internal class Syncfusion.XlsIO.Calculate.FormulaComputedEventHandler : MulticastDelegate {
    public FormulaComputedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormulaComputedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormulaComputedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.Calculate.FormulaInfo : object {
    private string _formulaText;
    private string _formulaValue;
    private string _parsedFormula;
    internal int calcID;
    public string FormulaText { get; public set; }
    public string FormulaValue { get; public set; }
    public string ParsedFormula { get; public set; }
    public string get_FormulaText();
    public void set_FormulaText(string value);
    public string get_FormulaValue();
    public void set_FormulaValue(string value);
    public string get_ParsedFormula();
    public void set_ParsedFormula(string value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Calculate.FormulaInfoHashtable : Dictionary`2<object, object> {
    public FormulaInfo Item { get; public set; }
    public FormulaInfo get_Item(object obj);
    public void set_Item(object obj, FormulaInfo value);
}
public enum Syncfusion.XlsIO.Calculate.FormulaInfoSetAction : Enum {
    public int value__;
    public static FormulaInfoSetAction FormulaSet;
    public static FormulaInfoSetAction NonFormulaSet;
    public static FormulaInfoSetAction CalculatedValueSet;
}
public class Syncfusion.XlsIO.Calculate.FormulaParsingEventArgs : EventArgs {
    private string text;
    public string Text { get; public set; }
    public FormulaParsingEventArgs(string text);
    public string get_Text();
    public void set_Text(string value);
}
public class Syncfusion.XlsIO.Calculate.FormulaParsingEventHandler : MulticastDelegate {
    public FormulaParsingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormulaParsingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormulaParsingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XlsIO.Calculate.GetExternalNamedRangeEventArgs : EventArgs {
    internal string formula;
    internal string Addres;
    internal bool IsFormulaUpdated;
    internal GetExternalNamedRangeEventArgs(string formula);
}
internal class Syncfusion.XlsIO.Calculate.GetExternalNamedRangeEventHandler : MulticastDelegate {
    public GetExternalNamedRangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GetExternalNamedRangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GetExternalNamedRangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XlsIO.Calculate.GetExternalWorksheetEventHandler : MulticastDelegate {
    public GetExternalWorksheetEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QueryExternalWorksheetEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryExternalWorksheetEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.Calculate.GridSheetFamilyItem : object {
    internal bool isSheeted;
    internal Dictionary`2<object, object> sheetDependentCells;
    public Dictionary`2<object, object> ParentObjectToToken;
    internal Dictionary`2<object, object> sheetFormulaInfoTable;
    internal Dictionary`2<object, object> sheetDependentFormulaCells;
    public Dictionary`2<object, object> TokenToParentObject;
    public Dictionary`2<object, object> SheetNameToToken;
    public Dictionary`2<object, object> SheetNameToParentObject;
}
public interface Syncfusion.XlsIO.Calculate.ICalcData {
    public abstract virtual object GetValueRowCol(int row, int col);
    public abstract virtual void SetValueRowCol(object value, int row, int col);
    public abstract virtual void WireParentObject();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueChanged(ValueChangedEventHandler value);
}
public interface Syncfusion.XlsIO.Calculate.ISheetData {
    public abstract virtual int GetFirstRow();
    public abstract virtual int GetLastRow();
    public abstract virtual int GetRowCount();
    public abstract virtual int GetFirstColumn();
    public abstract virtual int GetLastColumn();
    public abstract virtual int GetColumnCount();
}
internal class Syncfusion.XlsIO.Calculate.LinearRegression : object {
    internal CalcEngine Engine;
    private static char BMARKER;
    private string TIC;
    internal LinearRegression(CalcEngine engine);
    internal void ComputeLinest(Double[] y, Double[] x, Double& m, Double& b, String& errorValue);
    internal void SplitRange(string range, String& rangeValue, String& logicalValue);
    internal void PerfromArrayMultiplication(Double[0...,0...] a, Double[0...,0...] b, Double[0...,0...]& mult);
    internal void ComputeMultipleRegression(Double[] y, Double[0...,0...] X, int row, int col, Double& b, String& errorValue, Double[]& coefficients);
    internal string ComputeXArg(Double[] y, Double[] x, string arg, double b, double m, bool padXValues, string errorValue, Double[]& coefficients);
    internal string ComputeXArithmetic(Double[] y, Double[] x, string arg, double b, double m, bool padXValues, string errorValue, Double[]& coefficients);
    public sealed virtual void Dispose();
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.Calculate.LookupCachingMode : Enum {
    public int value__;
    public static LookupCachingMode None;
    public static LookupCachingMode VLOOKUP;
    public static LookupCachingMode HLOOKUP;
    public static LookupCachingMode Both;
    public static LookupCachingMode OptimizeForMatches;
}
internal class Syncfusion.XlsIO.Calculate.QueryExternalWorksheetEventArgs : EventArgs {
    internal string formula;
    internal ICalcData worksheet;
    internal string worksheetName;
    internal bool IsWorksheetUpdated;
    internal QueryExternalWorksheetEventArgs(string formula);
}
public class Syncfusion.XlsIO.Calculate.QuickValueSetEventArgs : EventArgs {
    private FormulaInfoSetAction action;
    private string id;
    private string val;
    public FormulaInfoSetAction Action { get; public set; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    public QuickValueSetEventArgs(string key, string value, FormulaInfoSetAction action);
    public FormulaInfoSetAction get_Action();
    public void set_Action(FormulaInfoSetAction value);
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class Syncfusion.XlsIO.Calculate.QuickValueSetEventHandler : MulticastDelegate {
    public QuickValueSetEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QuickValueSetEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QuickValueSetEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.Calculate.RangeInfo : object {
    private int top;
    private int left;
    private int right;
    private int bottom;
    public int Bottom { get; public set; }
    public int Left { get; public set; }
    public int Right { get; public set; }
    public int Top { get; public set; }
    public RangeInfo(int top, int left, int bottom, int right);
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public static RangeInfo Cells(int top, int left, int bottom, int right);
    public static string GetAlphaLabel(int col);
}
public class Syncfusion.XlsIO.Calculate.UnknownFunctionEventArgs : EventArgs {
    private string m_missingFunctionName;
    private string m_cellLocation;
    public string MissingFunctionName { get; internal set; }
    public string CellLocation { get; internal set; }
    public string get_MissingFunctionName();
    internal void set_MissingFunctionName(string value);
    public string get_CellLocation();
    internal void set_CellLocation(string value);
}
public class Syncfusion.XlsIO.Calculate.UnknownFunctionEventHandler : MulticastDelegate {
    public UnknownFunctionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UnknownFunctionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UnknownFunctionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XlsIO.Calculate.UpdateExternalFormulaEventArgs : EventArgs {
    internal string formula;
    internal string parsedFormula;
    internal bool IsFormulaUpdated;
    internal UpdateExternalFormulaEventArgs(string formula);
}
internal class Syncfusion.XlsIO.Calculate.UpdateExternalFormulaEventHandler : MulticastDelegate {
    public UpdateExternalFormulaEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UpdateExternalFormulaEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UpdateExternalFormulaEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XlsIO.Calculate.UpdateNamedRangeEventArgs : EventArgs {
    internal string Name;
    internal string Address;
    internal bool IsFormulaUpdated;
    internal UpdateNamedRangeEventArgs(string Name);
}
internal class Syncfusion.XlsIO.Calculate.UpdateNamedRangeEventHandler : MulticastDelegate {
    public UpdateNamedRangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UpdateNamedRangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UpdateNamedRangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.Calculate.ValueChangedEventArgs : EventArgs {
    private int col;
    private int row;
    private string val;
    public int ColIndex { get; public set; }
    public int RowIndex { get; public set; }
    public string Value { get; public set; }
    public ValueChangedEventArgs(int row, int col, string value);
    public int get_ColIndex();
    public void set_ColIndex(int value);
    public int get_RowIndex();
    public void set_RowIndex(int value);
    public string get_Value();
    public void set_Value(string value);
}
public class Syncfusion.XlsIO.Calculate.ValueChangedEventHandler : MulticastDelegate {
    public ValueChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValueChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValueChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Syncfusion.XlsIO.CellPropertyExtensionType : Enum {
    public int value__;
    public static CellPropertyExtensionType ForeColor;
    public static CellPropertyExtensionType BackColor;
    public static CellPropertyExtensionType GradientFill;
    public static CellPropertyExtensionType TopBorderColor;
    public static CellPropertyExtensionType BottomBorderColor;
    public static CellPropertyExtensionType LeftBorderColor;
    public static CellPropertyExtensionType RightBorderColor;
    public static CellPropertyExtensionType DiagonalCellBorder;
    public static CellPropertyExtensionType TextColor;
    public static CellPropertyExtensionType FontScheme;
    public static CellPropertyExtensionType TextIndentationLevel;
}
public enum Syncfusion.XlsIO.CFTextRuleType : Enum {
    public int value__;
    public static CFTextRuleType TextContains;
    public static CFTextRuleType TextNotContains;
    public static CFTextRuleType TextBeginsWith;
    public static CFTextRuleType TextEndsWith;
}
public enum Syncfusion.XlsIO.CFTimePeriods : Enum {
    public int value__;
    public static CFTimePeriods Today;
    public static CFTimePeriods Yesterday;
    public static CFTimePeriods Tomorrow;
    public static CFTimePeriods Last7Days;
    public static CFTimePeriods ThisMonth;
    public static CFTimePeriods LastMonth;
    public static CFTimePeriods NextMonth;
    public static CFTimePeriods ThisWeek;
    public static CFTimePeriods LastWeek;
    public static CFTimePeriods NextWeek;
}
internal enum Syncfusion.XlsIO.ChartAxisPos : Enum {
    public int value__;
    public static ChartAxisPos l;
    public static ChartAxisPos r;
    public static ChartAxisPos b;
    public static ChartAxisPos t;
}
internal enum Syncfusion.XlsIO.ChartExDataDimensionType : Enum {
    public int value__;
    public static ChartExDataDimensionType val;
    public static ChartExDataDimensionType x;
    public static ChartExDataDimensionType y;
    public static ChartExDataDimensionType size;
    public static ChartExDataDimensionType cat;
}
internal enum Syncfusion.XlsIO.ChartExPositionAlignment : Enum {
    public int value__;
    public static ChartExPositionAlignment min;
    public static ChartExPositionAlignment max;
    public static ChartExPositionAlignment ctr;
}
internal enum Syncfusion.XlsIO.ChartExSidePosition : Enum {
    public int value__;
    public static ChartExSidePosition l;
    public static ChartExSidePosition t;
    public static ChartExSidePosition r;
    public static ChartExSidePosition b;
}
public enum Syncfusion.XlsIO.ChartParagraphType : Enum {
    public int value__;
    public static ChartParagraphType Default;
    public static ChartParagraphType CustomDefault;
    public static ChartParagraphType Custom;
}
internal enum Syncfusion.XlsIO.ChartStyleElements : Enum {
    public int value__;
    public static ChartStyleElements axisTitle;
    public static ChartStyleElements categoryAxis;
    public static ChartStyleElements chartArea;
    public static ChartStyleElements dataLabel;
    public static ChartStyleElements dataLabelCallout;
    public static ChartStyleElements dataPoint;
    public static ChartStyleElements dataPoint3D;
    public static ChartStyleElements dataPointLine;
    public static ChartStyleElements dataPointMarker;
    public static ChartStyleElements dataPointMarkerLayout;
    public static ChartStyleElements dataPointWireframe;
    public static ChartStyleElements dataTable;
    public static ChartStyleElements downBar;
    public static ChartStyleElements dropLine;
    public static ChartStyleElements errorBar;
    public static ChartStyleElements floor;
    public static ChartStyleElements gridlineMajor;
    public static ChartStyleElements gridlineMinor;
    public static ChartStyleElements hiLoLine;
    public static ChartStyleElements leaderLine;
    public static ChartStyleElements legend;
    public static ChartStyleElements plotArea;
    public static ChartStyleElements plotArea3D;
    public static ChartStyleElements seriesAxis;
    public static ChartStyleElements seriesLine;
    public static ChartStyleElements title;
    public static ChartStyleElements trendline;
    public static ChartStyleElements trendlineLabel;
    public static ChartStyleElements upBar;
    public static ChartStyleElements valueAxis;
    public static ChartStyleElements wall;
    public static ChartStyleElements extLst;
}
internal enum Syncfusion.XlsIO.ColorModel : Enum {
    public byte value__;
    public static ColorModel none;
    public static ColorModel scrgbClr;
    public static ColorModel srgbClr;
    public static ColorModel hslClr;
    public static ColorModel sysClr;
    public static ColorModel schemeClr;
    public static ColorModel prstClr;
    public static ColorModel styleClr;
}
public enum Syncfusion.XlsIO.ConditionalFormatOperator : Enum {
    public int value__;
    public static ConditionalFormatOperator GreaterThan;
    public static ConditionalFormatOperator GreaterThanorEqualTo;
}
public enum Syncfusion.XlsIO.ConditionalFormatScope : Enum {
    public int value__;
    public static ConditionalFormatScope DataFields;
    public static ConditionalFormatScope FieldIntersections;
    public static ConditionalFormatScope Selections;
}
public enum Syncfusion.XlsIO.ConditionalFormatTemplate : Enum {
    public int value__;
    public static ConditionalFormatTemplate CellValue;
    public static ConditionalFormatTemplate Formula;
    public static ConditionalFormatTemplate ColorScale;
    public static ConditionalFormatTemplate DataBar;
    public static ConditionalFormatTemplate IconSet;
    public static ConditionalFormatTemplate Filter;
    public static ConditionalFormatTemplate UniqueValues;
    public static ConditionalFormatTemplate ContainsText;
    public static ConditionalFormatTemplate ContainsBlanks;
    public static ConditionalFormatTemplate ContainsNoBlanks;
    public static ConditionalFormatTemplate ContainsErrors;
    public static ConditionalFormatTemplate ContainsNoErrors;
    public static ConditionalFormatTemplate Today;
    public static ConditionalFormatTemplate Tomorrow;
    public static ConditionalFormatTemplate Yesterday;
    public static ConditionalFormatTemplate Last7Days;
    public static ConditionalFormatTemplate LastMonth;
    public static ConditionalFormatTemplate NextMonth;
    public static ConditionalFormatTemplate ThisWeek;
    public static ConditionalFormatTemplate NextWeek;
    public static ConditionalFormatTemplate LastWeek;
    public static ConditionalFormatTemplate ThisMonth;
    public static ConditionalFormatTemplate AboveAverage;
    public static ConditionalFormatTemplate BelowAverage;
    public static ConditionalFormatTemplate DuplicateValues;
    public static ConditionalFormatTemplate AboveOrEqualToAverage;
    public static ConditionalFormatTemplate BelowOrEqualToAverage;
}
public enum Syncfusion.XlsIO.ConditionalTopNType : Enum {
    public int value__;
    public static ConditionalTopNType All;
    public static ConditionalTopNType Column;
    public static ConditionalTopNType None;
    public static ConditionalTopNType Row;
}
public class Syncfusion.XlsIO.ConditionValue : object {
    private ConditionValueType m_type;
    private string m_value;
    private ConditionalFormatOperator m_condition;
    internal Ptg[] ref3Dptg;
    public ConditionValueType Type { get; public set; }
    public string Value { get; public set; }
    public ConditionalFormatOperator Operator { get; public set; }
    internal Ptg[] RefPtg { get; internal set; }
    public ConditionValue(ConditionValueType type, string value);
    public sealed virtual ConditionValueType get_Type();
    public sealed virtual void set_Type(ConditionValueType value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual ConditionalFormatOperator get_Operator();
    public sealed virtual void set_Operator(ConditionalFormatOperator value);
    internal Ptg[] get_RefPtg();
    internal void set_RefPtg(Ptg[] value);
    public static bool op_Equality(ConditionValue first, ConditionValue second);
    public static bool op_Inequality(ConditionValue first, ConditionValue second);
    internal ConditionValue Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Syncfusion.XlsIO.ConditionValueType : Enum {
    public int value__;
    public static ConditionValueType None;
    public static ConditionValueType Number;
    public static ConditionValueType LowestValue;
    public static ConditionValueType HighestValue;
    public static ConditionValueType Percent;
    public static ConditionValueType Formula;
    public static ConditionValueType Percentile;
    public static ConditionValueType Automatic;
}
public class Syncfusion.XlsIO.ConnectionPassword : EventArgs {
    private string m_connectionPassword;
    public string PasswordToConnectDB { get; public set; }
    public string get_PasswordToConnectDB();
    public void set_PasswordToConnectDB(string value);
}
public class Syncfusion.XlsIO.ConnectionPasswordEventHandler : MulticastDelegate {
    public ConnectionPasswordEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectionPassword e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectionPassword e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Syncfusion.XlsIO.ConsolidationFunction : Enum {
    public int value__;
    public static ConsolidationFunction Sum;
    public static ConsolidationFunction Count;
    public static ConsolidationFunction Average;
    public static ConsolidationFunction Max;
    public static ConsolidationFunction Min;
    public static ConsolidationFunction Product;
    public static ConsolidationFunction CountNums;
    public static ConsolidationFunction StdDev;
    public static ConsolidationFunction StdDevp;
    public static ConsolidationFunction Var;
    public static ConsolidationFunction Varp;
}
public enum Syncfusion.XlsIO.DataBarAxisPosition : Enum {
    public int value__;
    public static DataBarAxisPosition none;
    public static DataBarAxisPosition automatic;
    public static DataBarAxisPosition middle;
}
public enum Syncfusion.XlsIO.DataBarDirection : Enum {
    public int value__;
    public static DataBarDirection context;
    public static DataBarDirection leftToRight;
    public static DataBarDirection rightToLeft;
}
public enum Syncfusion.XlsIO.DateTimeGroupingType : Enum {
    public byte value__;
    public static DateTimeGroupingType year;
    public static DateTimeGroupingType month;
    public static DateTimeGroupingType day;
    public static DateTimeGroupingType hour;
    public static DateTimeGroupingType minute;
    public static DateTimeGroupingType second;
}
[AttributeUsageAttribute("128")]
public class Syncfusion.XlsIO.DisplayFormatAttribute : Attribute {
    private string m_displayFormat;
    public string DataFormatString { get; public set; }
    public string get_DataFormatString();
    public void set_DataFormatString(string value);
}
public enum Syncfusion.XlsIO.DVAspect : Enum {
    public int value__;
    public static DVAspect DVASPECT_CONTENT;
    public static DVAspect DVASPECT_ICON;
}
public enum Syncfusion.XlsIO.DynamicFilterType : Enum {
    public int value__;
    public static DynamicFilterType None;
    public static DynamicFilterType Tomorrow;
    public static DynamicFilterType Today;
    public static DynamicFilterType Yesterday;
    public static DynamicFilterType NextWeek;
    public static DynamicFilterType ThisWeek;
    public static DynamicFilterType LastWeek;
    public static DynamicFilterType NextMonth;
    public static DynamicFilterType ThisMonth;
    public static DynamicFilterType LastMonth;
    public static DynamicFilterType NextQuarter;
    public static DynamicFilterType ThisQuarter;
    public static DynamicFilterType LastQuarter;
    public static DynamicFilterType NextYear;
    public static DynamicFilterType ThisYear;
    public static DynamicFilterType LastYear;
    public static DynamicFilterType Quarter1;
    public static DynamicFilterType Quarter2;
    public static DynamicFilterType Quarter3;
    public static DynamicFilterType Quarter4;
    public static DynamicFilterType January;
    public static DynamicFilterType February;
    public static DynamicFilterType March;
    public static DynamicFilterType April;
    public static DynamicFilterType May;
    public static DynamicFilterType June;
    public static DynamicFilterType July;
    public static DynamicFilterType August;
    public static DynamicFilterType September;
    public static DynamicFilterType October;
    public static DynamicFilterType November;
    public static DynamicFilterType December;
    public static DynamicFilterType YearToDate;
}
internal enum Syncfusion.XlsIO.EndLineCap : Enum {
    public byte value__;
    public static EndLineCap flat;
    public static EndLineCap rnd;
    public static EndLineCap sq;
}
internal enum Syncfusion.XlsIO.Excel2007BorderIndex : Enum {
    public int value__;
    public static Excel2007BorderIndex left;
    public static Excel2007BorderIndex right;
    public static Excel2007BorderIndex top;
    public static Excel2007BorderIndex bottom;
    public static Excel2007BorderIndex diagonal;
    public static Excel2007BorderIndex none;
    public static Excel2007BorderIndex vertical;
    public static Excel2007BorderIndex horizontal;
}
public enum Syncfusion.XlsIO.Excel2007BorderJoinType : Enum {
    public int value__;
    public static Excel2007BorderJoinType Round;
    public static Excel2007BorderJoinType Bevel;
    public static Excel2007BorderJoinType Mitter;
}
internal enum Syncfusion.XlsIO.Excel2007BorderLineStyle : Enum {
    public int value__;
    public static Excel2007BorderLineStyle DashDot;
    public static Excel2007BorderLineStyle DashDotDot;
    public static Excel2007BorderLineStyle Dashed;
    public static Excel2007BorderLineStyle Dotted;
    public static Excel2007BorderLineStyle Double;
    public static Excel2007BorderLineStyle Hair;
    public static Excel2007BorderLineStyle Medium;
    public static Excel2007BorderLineStyle MediumDashDot;
    public static Excel2007BorderLineStyle MediumDashDotDot;
    public static Excel2007BorderLineStyle MediumDashed;
    public static Excel2007BorderLineStyle None;
    public static Excel2007BorderLineStyle SlantDashDot;
    public static Excel2007BorderLineStyle Thick;
    public static Excel2007BorderLineStyle Thin;
}
public enum Syncfusion.XlsIO.Excel2007ChartBevelProperties : Enum {
    public int value__;
    public static Excel2007ChartBevelProperties NoAngle;
    public static Excel2007ChartBevelProperties Angle;
    public static Excel2007ChartBevelProperties ArtDeco;
    public static Excel2007ChartBevelProperties Circle;
    public static Excel2007ChartBevelProperties Convex;
    public static Excel2007ChartBevelProperties CoolSlant;
    public static Excel2007ChartBevelProperties Cross;
    public static Excel2007ChartBevelProperties Divot;
    public static Excel2007ChartBevelProperties HardEdge;
    public static Excel2007ChartBevelProperties RelaxedInset;
    public static Excel2007ChartBevelProperties Riblet;
    public static Excel2007ChartBevelProperties Slope;
    public static Excel2007ChartBevelProperties SoftRound;
}
internal enum Syncfusion.XlsIO.Excel2007ChartDisplayUnit : Enum {
    public int value__;
    public static Excel2007ChartDisplayUnit hundreds;
    public static Excel2007ChartDisplayUnit thousands;
    public static Excel2007ChartDisplayUnit tenThousands;
    public static Excel2007ChartDisplayUnit hundredThousands;
    public static Excel2007ChartDisplayUnit millions;
    public static Excel2007ChartDisplayUnit tenMillions;
    public static Excel2007ChartDisplayUnit hundredMillions;
    public static Excel2007ChartDisplayUnit billions;
    public static Excel2007ChartDisplayUnit trillions;
    public static Excel2007ChartDisplayUnit percentage;
}
public enum Syncfusion.XlsIO.Excel2007ChartLightingProperties : Enum {
    public int value__;
    public static Excel2007ChartLightingProperties ThreePoint;
    public static Excel2007ChartLightingProperties Balance;
    public static Excel2007ChartLightingProperties BrightRoom;
    public static Excel2007ChartLightingProperties Chilly;
    public static Excel2007ChartLightingProperties Contrasting;
    public static Excel2007ChartLightingProperties Flat;
    public static Excel2007ChartLightingProperties Flood;
    public static Excel2007ChartLightingProperties Freezing;
    public static Excel2007ChartLightingProperties Glow;
    public static Excel2007ChartLightingProperties Harsh;
    public static Excel2007ChartLightingProperties Morning;
    public static Excel2007ChartLightingProperties Soft;
    public static Excel2007ChartLightingProperties Sunrise;
    public static Excel2007ChartLightingProperties SunSet;
    public static Excel2007ChartLightingProperties TwoPoint;
}
internal enum Syncfusion.XlsIO.Excel2007ChartMarkerType : Enum {
    public int value__;
    public static Excel2007ChartMarkerType none;
    public static Excel2007ChartMarkerType square;
    public static Excel2007ChartMarkerType diamond;
    public static Excel2007ChartMarkerType triangle;
    public static Excel2007ChartMarkerType x;
    public static Excel2007ChartMarkerType star;
    public static Excel2007ChartMarkerType dot;
    public static Excel2007ChartMarkerType dash;
    public static Excel2007ChartMarkerType circle;
    public static Excel2007ChartMarkerType plus;
    public static Excel2007ChartMarkerType auto;
}
public enum Syncfusion.XlsIO.Excel2007ChartMaterialProperties : Enum {
    public int value__;
    public static Excel2007ChartMaterialProperties NoEffect;
    public static Excel2007ChartMaterialProperties Matte;
    public static Excel2007ChartMaterialProperties WarmMatte;
    public static Excel2007ChartMaterialProperties Plastic;
    public static Excel2007ChartMaterialProperties Metal;
    public static Excel2007ChartMaterialProperties DarkEdge;
    public static Excel2007ChartMaterialProperties SoftEdge;
    public static Excel2007ChartMaterialProperties Flat;
    public static Excel2007ChartMaterialProperties WireFrame;
    public static Excel2007ChartMaterialProperties Powder;
    public static Excel2007ChartMaterialProperties TranslucentPowder;
    public static Excel2007ChartMaterialProperties Clear;
}
internal enum Syncfusion.XlsIO.Excel2007ChartPlotEmpty : Enum {
    public int value__;
    public static Excel2007ChartPlotEmpty gap;
    public static Excel2007ChartPlotEmpty zero;
    public static Excel2007ChartPlotEmpty span;
}
public enum Syncfusion.XlsIO.Excel2007ChartPresetsInner : Enum {
    public int value__;
    public static Excel2007ChartPresetsInner NoShadow;
    public static Excel2007ChartPresetsInner InsideDiagonalBottomLeft;
    public static Excel2007ChartPresetsInner InsideTop;
    public static Excel2007ChartPresetsInner InsideRight;
    public static Excel2007ChartPresetsInner InsideLeft;
    public static Excel2007ChartPresetsInner InsideDiagonalTopRight;
    public static Excel2007ChartPresetsInner InsideDiagonalBottomRight;
    public static Excel2007ChartPresetsInner InsideCenter;
    public static Excel2007ChartPresetsInner InsideBottom;
    public static Excel2007ChartPresetsInner InsideDiagonalTopLeft;
}
public enum Syncfusion.XlsIO.Excel2007ChartPresetsOuter : Enum {
    public int value__;
    public static Excel2007ChartPresetsOuter NoShadow;
    public static Excel2007ChartPresetsOuter OffsetRight;
    public static Excel2007ChartPresetsOuter OffsetDiagonalBottomRight;
    public static Excel2007ChartPresetsOuter OffsetBottom;
    public static Excel2007ChartPresetsOuter OffsetDiagonalTopLeft;
    public static Excel2007ChartPresetsOuter OffsetCenter;
    public static Excel2007ChartPresetsOuter OffsetTop;
    public static Excel2007ChartPresetsOuter OffsetLeft;
    public static Excel2007ChartPresetsOuter OffsetDiagonalTopRight;
    public static Excel2007ChartPresetsOuter OffsetDiagonalBottomLeft;
}
public enum Syncfusion.XlsIO.Excel2007ChartPresetsPrespective : Enum {
    public int value__;
    public static Excel2007ChartPresetsPrespective NoShadow;
    public static Excel2007ChartPresetsPrespective PrespectiveDiagonalUpperRight;
    public static Excel2007ChartPresetsPrespective PrespectiveDiagonalLowerRight;
    public static Excel2007ChartPresetsPrespective PrespectiveDiagonalUpperLeft;
    public static Excel2007ChartPresetsPrespective PrespectiveDiagonalLowerLeft;
    public static Excel2007ChartPresetsPrespective Below;
}
public enum Syncfusion.XlsIO.Excel2007CommentHAlign : Enum {
    public int value__;
    public static Excel2007CommentHAlign l;
    public static Excel2007CommentHAlign ctr;
    public static Excel2007CommentHAlign r;
    public static Excel2007CommentHAlign just;
    public static Excel2007CommentHAlign dist;
}
public enum Syncfusion.XlsIO.Excel2007CommentVAlign : Enum {
    public int value__;
    public static Excel2007CommentVAlign t;
    public static Excel2007CommentVAlign ctr;
    public static Excel2007CommentVAlign b;
    public static Excel2007CommentVAlign just;
    public static Excel2007CommentVAlign dist;
}
internal enum Syncfusion.XlsIO.Excel2007DataLabelPos : Enum {
    public int value__;
    public static Excel2007DataLabelPos b;
    public static Excel2007DataLabelPos bestFit;
    public static Excel2007DataLabelPos ctr;
    public static Excel2007DataLabelPos inBase;
    public static Excel2007DataLabelPos inEnd;
    public static Excel2007DataLabelPos l;
    public static Excel2007DataLabelPos outEnd;
    public static Excel2007DataLabelPos r;
    public static Excel2007DataLabelPos t;
}
internal enum Syncfusion.XlsIO.Excel2007ErrorBarType : Enum {
    public int value__;
    public static Excel2007ErrorBarType percentage;
    public static Excel2007ErrorBarType fixedVal;
    public static Excel2007ErrorBarType stdDev;
    public static Excel2007ErrorBarType cust;
    public static Excel2007ErrorBarType stdErr;
}
public enum Syncfusion.XlsIO.Excel2007Function : Enum {
    public int value__;
    public static Excel2007Function CUBEKPIMEMBER;
    public static Excel2007Function CUBEMEMBER;
    public static Excel2007Function CUBEMEMBERPROPERTY;
    public static Excel2007Function CUBERANKEDMEMBER;
    public static Excel2007Function CUBESET;
    public static Excel2007Function CUBESETCOUNT;
    public static Excel2007Function CUBEVALUE;
    public static Excel2007Function BESSELI;
    public static Excel2007Function BESSELJ;
    public static Excel2007Function BESSELK;
    public static Excel2007Function BESSELY;
    public static Excel2007Function BIN2DEC;
    public static Excel2007Function BIN2HEX;
    public static Excel2007Function BIN2OCT;
    public static Excel2007Function COMPLEX;
    public static Excel2007Function CONVERT;
    public static Excel2007Function DEC2BIN;
    public static Excel2007Function DEC2HEX;
    public static Excel2007Function DEC2OCT;
    public static Excel2007Function DELTA;
    public static Excel2007Function ERF;
    public static Excel2007Function ERFC;
    public static Excel2007Function GESTEP;
    public static Excel2007Function HEX2BIN;
    public static Excel2007Function HEX2DEC;
    public static Excel2007Function HEX2OCT;
    public static Excel2007Function IMABS;
    public static Excel2007Function IMAGINARY;
    public static Excel2007Function IMARGUMENT;
    public static Excel2007Function IMCONJUGATE;
    public static Excel2007Function IMCOS;
    public static Excel2007Function IMDIV;
    public static Excel2007Function IMEXP;
    public static Excel2007Function IMLN;
    public static Excel2007Function IMLOG10;
    public static Excel2007Function IMLOG2;
    public static Excel2007Function IMPOWER;
    public static Excel2007Function IMPRODUCT;
    public static Excel2007Function IMREAL;
    public static Excel2007Function IMSIN;
    public static Excel2007Function IMSQRT;
    public static Excel2007Function IMSUB;
    public static Excel2007Function IMSUM;
    public static Excel2007Function OCT2BIN;
    public static Excel2007Function OCT2DEC;
    public static Excel2007Function OCT2HEX;
    public static Excel2007Function SUMIFS;
    public static Excel2007Function AVERAGEIF;
    public static Excel2007Function AVERAGEIFS;
}
internal enum Syncfusion.XlsIO.Excel2007GradientPattern : Enum {
    public int value__;
    public static Excel2007GradientPattern pct5;
    public static Excel2007GradientPattern pct10;
    public static Excel2007GradientPattern pct20;
    public static Excel2007GradientPattern pct25;
    public static Excel2007GradientPattern pct30;
    public static Excel2007GradientPattern pct40;
    public static Excel2007GradientPattern pct50;
    public static Excel2007GradientPattern pct60;
    public static Excel2007GradientPattern pct70;
    public static Excel2007GradientPattern pct75;
    public static Excel2007GradientPattern pct80;
    public static Excel2007GradientPattern pct90;
    public static Excel2007GradientPattern dkDnDiag;
    public static Excel2007GradientPattern dkHorz;
    public static Excel2007GradientPattern dkUpDiag;
    public static Excel2007GradientPattern dkVert;
    public static Excel2007GradientPattern dashDnDiag;
    public static Excel2007GradientPattern dashHorz;
    public static Excel2007GradientPattern dashUpDiag;
    public static Excel2007GradientPattern dashVert;
    public static Excel2007GradientPattern diagBrick;
    public static Excel2007GradientPattern divot;
    public static Excel2007GradientPattern dotDmnd;
    public static Excel2007GradientPattern dotGrid;
    public static Excel2007GradientPattern horzBrick;
    public static Excel2007GradientPattern lgCheck;
    public static Excel2007GradientPattern lgConfetti;
    public static Excel2007GradientPattern lgGrid;
    public static Excel2007GradientPattern ltDnDiag;
    public static Excel2007GradientPattern ltHorz;
    public static Excel2007GradientPattern ltUpDiag;
    public static Excel2007GradientPattern ltVert;
    public static Excel2007GradientPattern narHorz;
    public static Excel2007GradientPattern narVert;
    public static Excel2007GradientPattern openDmnd;
    public static Excel2007GradientPattern plaid;
    public static Excel2007GradientPattern shingle;
    public static Excel2007GradientPattern smCheck;
    public static Excel2007GradientPattern smConfetti;
    public static Excel2007GradientPattern smGrid;
    public static Excel2007GradientPattern solidDmnd;
    public static Excel2007GradientPattern sphere;
    public static Excel2007GradientPattern trellis;
    public static Excel2007GradientPattern wave;
    public static Excel2007GradientPattern weave;
    public static Excel2007GradientPattern wdDnDiag;
    public static Excel2007GradientPattern wdUpDiag;
    public static Excel2007GradientPattern zigZag;
    public static Excel2007GradientPattern horz;
    public static Excel2007GradientPattern vert;
    public static Excel2007GradientPattern diagCross;
    public static Excel2007GradientPattern cross;
    public static Excel2007GradientPattern upDiag;
    public static Excel2007GradientPattern dnDiag;
}
internal enum Syncfusion.XlsIO.Excel2007HAlign : Enum {
    public int value__;
    public static Excel2007HAlign center;
    public static Excel2007HAlign centerContinuous;
    public static Excel2007HAlign distributed;
    public static Excel2007HAlign fill;
    public static Excel2007HAlign general;
    public static Excel2007HAlign justify;
    public static Excel2007HAlign left;
    public static Excel2007HAlign right;
}
internal enum Syncfusion.XlsIO.Excel2007LegendPosition : Enum {
    public int value__;
    public static Excel2007LegendPosition b;
    public static Excel2007LegendPosition tr;
    public static Excel2007LegendPosition t;
    public static Excel2007LegendPosition r;
    public static Excel2007LegendPosition l;
}
internal enum Syncfusion.XlsIO.Excel2007Pattern : Enum {
    public int value__;
    public static Excel2007Pattern none;
    public static Excel2007Pattern solid;
    public static Excel2007Pattern mediumGray;
    public static Excel2007Pattern darkGray;
    public static Excel2007Pattern lightGray;
    public static Excel2007Pattern darkHorizontal;
    public static Excel2007Pattern darkVertical;
    public static Excel2007Pattern darkDown;
    public static Excel2007Pattern darkUp;
    public static Excel2007Pattern darkGrid;
    public static Excel2007Pattern darkTrellis;
    public static Excel2007Pattern lightHorizontal;
    public static Excel2007Pattern lightVertical;
    public static Excel2007Pattern lightDown;
    public static Excel2007Pattern lightUp;
    public static Excel2007Pattern lightGrid;
    public static Excel2007Pattern lightTrellis;
    public static Excel2007Pattern gray125;
    public static Excel2007Pattern gray0625;
}
internal enum Syncfusion.XlsIO.Excel2007RadarStyle : Enum {
    public int value__;
    public static Excel2007RadarStyle standard;
    public static Excel2007RadarStyle marker;
    public static Excel2007RadarStyle filled;
}
internal enum Syncfusion.XlsIO.Excel2007ScatterStyle : Enum {
    public int value__;
    public static Excel2007ScatterStyle marker;
    public static Excel2007ScatterStyle smoothMarker;
    public static Excel2007ScatterStyle smooth;
    public static Excel2007ScatterStyle lineMarker;
    public static Excel2007ScatterStyle line;
}
public enum Syncfusion.XlsIO.Excel2007ShapeLineStyle : Enum {
    public int value__;
    public static Excel2007ShapeLineStyle sng;
    public static Excel2007ShapeLineStyle dbl;
    public static Excel2007ShapeLineStyle thinThick;
    public static Excel2007ShapeLineStyle thickThin;
    public static Excel2007ShapeLineStyle tri;
}
internal enum Syncfusion.XlsIO.Excel2007SplitType : Enum {
    public int value__;
    public static Excel2007SplitType pos;
    public static Excel2007SplitType val;
    public static Excel2007SplitType percent;
    public static Excel2007SplitType cust;
}
public enum Syncfusion.XlsIO.Excel2007TextAlign : Enum {
    public int value__;
    public static Excel2007TextAlign l;
    public static Excel2007TextAlign ctr;
    public static Excel2007TextAlign r;
    public static Excel2007TextAlign just;
    public static Excel2007TextAlign justLow;
    public static Excel2007TextAlign thaiDist;
    public static Excel2007TextAlign dist;
}
public enum Syncfusion.XlsIO.Excel2007TextRotation : Enum {
    public int value__;
    public static Excel2007TextRotation horz;
    public static Excel2007TextRotation wordArtVert;
    public static Excel2007TextRotation vert;
    public static Excel2007TextRotation vert270;
    public static Excel2007TextRotation eaVert;
    public static Excel2007TextRotation mongolianVert;
    public static Excel2007TextRotation wordArtVertRtl;
}
internal enum Syncfusion.XlsIO.Excel2007TrendlineType : Enum {
    public int value__;
    public static Excel2007TrendlineType exp;
    public static Excel2007TrendlineType linear;
    public static Excel2007TrendlineType log;
    public static Excel2007TrendlineType movingAvg;
    public static Excel2007TrendlineType poly;
    public static Excel2007TrendlineType power;
}
internal enum Syncfusion.XlsIO.Excel2007VAlign : Enum {
    public int value__;
    public static Excel2007VAlign bottom;
    public static Excel2007VAlign center;
    public static Excel2007VAlign distributed;
    public static Excel2007VAlign justify;
    public static Excel2007VAlign top;
}
internal enum Syncfusion.XlsIO.Excel2016Charttype : Enum {
    public int value__;
    public static Excel2016Charttype funnel;
    public static Excel2016Charttype boxWhisker;
    public static Excel2016Charttype clusteredColumn;
    public static Excel2016Charttype paretoLine;
    public static Excel2016Charttype sunburst;
    public static Excel2016Charttype treemap;
    public static Excel2016Charttype waterfall;
}
public enum Syncfusion.XlsIO.ExcelAutoFormat : Enum {
    public int value__;
    public static ExcelAutoFormat Simple;
    public static ExcelAutoFormat Classic_1;
    public static ExcelAutoFormat Classic_2;
    public static ExcelAutoFormat Classic_3;
    public static ExcelAutoFormat Accounting_1;
    public static ExcelAutoFormat Accounting_2;
    public static ExcelAutoFormat Accounting_3;
    public static ExcelAutoFormat Accounting_4;
    public static ExcelAutoFormat Colorful_1;
    public static ExcelAutoFormat Colorful_2;
    public static ExcelAutoFormat Colorful_3;
    public static ExcelAutoFormat List_1;
    public static ExcelAutoFormat List_2;
    public static ExcelAutoFormat List_3;
    public static ExcelAutoFormat Effect3D_1;
    public static ExcelAutoFormat Effect3D_2;
    public static ExcelAutoFormat None;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelAutoFormatOptions : Enum {
    public int value__;
    public static ExcelAutoFormatOptions Number;
    public static ExcelAutoFormatOptions Border;
    public static ExcelAutoFormatOptions Font;
    public static ExcelAutoFormatOptions Patterns;
    public static ExcelAutoFormatOptions Alignment;
    public static ExcelAutoFormatOptions Width_Height;
    public static ExcelAutoFormatOptions None;
    public static ExcelAutoFormatOptions All;
}
internal enum Syncfusion.XlsIO.ExcelAutoShapeType : Enum {
    public int value__;
    public static ExcelAutoShapeType sp;
    public static ExcelAutoShapeType grpSp;
    public static ExcelAutoShapeType graphicFrame;
    public static ExcelAutoShapeType cxnSp;
    public static ExcelAutoShapeType pic;
    public static ExcelAutoShapeType contentPart;
}
public enum Syncfusion.XlsIO.ExcelAutoType : Enum {
    public int value__;
    public static ExcelAutoType Auto;
    public static ExcelAutoType None;
    public static ExcelAutoType Custom;
}
public enum Syncfusion.XlsIO.ExcelAxisLineIdentifier : Enum {
    public int value__;
    public static ExcelAxisLineIdentifier AxisLineItself;
    public static ExcelAxisLineIdentifier MajorGridLine;
    public static ExcelAxisLineIdentifier MinorGridLine;
    public static ExcelAxisLineIdentifier WallsOrFloor;
}
public enum Syncfusion.XlsIO.ExcelAxisTextDirection : Enum {
    public int value__;
    public static ExcelAxisTextDirection Context;
    public static ExcelAxisTextDirection LeftToRight;
    public static ExcelAxisTextDirection RightToLeft;
}
public enum Syncfusion.XlsIO.ExcelAxisType : Enum {
    public int value__;
    public static ExcelAxisType Category;
    public static ExcelAxisType Value;
    public static ExcelAxisType Serie;
}
public enum Syncfusion.XlsIO.ExcelAxisUsed : Enum {
    public int value__;
    public static ExcelAxisUsed Primary;
    public static ExcelAxisUsed PrimaryAndSecondary;
}
public enum Syncfusion.XlsIO.ExcelBaseFormat : Enum {
    public int value__;
    public static ExcelBaseFormat Rectangle;
    public static ExcelBaseFormat Circle;
}
public enum Syncfusion.XlsIO.ExcelBordersIndex : Enum {
    public int value__;
    public static ExcelBordersIndex DiagonalDown;
    public static ExcelBordersIndex DiagonalUp;
    public static ExcelBordersIndex EdgeBottom;
    public static ExcelBordersIndex EdgeLeft;
    public static ExcelBordersIndex EdgeRight;
    public static ExcelBordersIndex EdgeTop;
    public static ExcelBordersIndex InsideHorizontal;
    public static ExcelBordersIndex InsideVertical;
}
public enum Syncfusion.XlsIO.ExcelBorderWeight : Enum {
    public int value__;
    public static ExcelBorderWeight Hairline;
    public static ExcelBorderWeight Medium;
    public static ExcelBorderWeight Thick;
    public static ExcelBorderWeight Thin;
    public static ExcelBorderWeight None;
}
public enum Syncfusion.XlsIO.ExcelBubbleSize : Enum {
    public int value__;
    public static ExcelBubbleSize Area;
    public static ExcelBubbleSize Width;
}
public enum Syncfusion.XlsIO.ExcelBuiltInProperty : Enum {
    public int value__;
    public static ExcelBuiltInProperty Title;
    public static ExcelBuiltInProperty Subject;
    public static ExcelBuiltInProperty Author;
    public static ExcelBuiltInProperty Keywords;
    public static ExcelBuiltInProperty Comments;
    public static ExcelBuiltInProperty Template;
    public static ExcelBuiltInProperty LastAuthor;
    public static ExcelBuiltInProperty RevisionNumber;
    public static ExcelBuiltInProperty EditTime;
    public static ExcelBuiltInProperty LastPrinted;
    public static ExcelBuiltInProperty CreationDate;
    public static ExcelBuiltInProperty LastSaveDate;
    public static ExcelBuiltInProperty PageCount;
    public static ExcelBuiltInProperty WordCount;
    public static ExcelBuiltInProperty CharCount;
    public static ExcelBuiltInProperty Thumbnail;
    public static ExcelBuiltInProperty ApplicationName;
    public static ExcelBuiltInProperty Security;
    public static ExcelBuiltInProperty Category;
    public static ExcelBuiltInProperty PresentationTarget;
    public static ExcelBuiltInProperty ByteCount;
    public static ExcelBuiltInProperty LineCount;
    public static ExcelBuiltInProperty ParagraphCount;
    public static ExcelBuiltInProperty SlideCount;
    public static ExcelBuiltInProperty NoteCount;
    public static ExcelBuiltInProperty HiddenCount;
    public static ExcelBuiltInProperty MultimediaClipCount;
    public static ExcelBuiltInProperty ScaleCrop;
    public static ExcelBuiltInProperty HeadingPair;
    public static ExcelBuiltInProperty DocParts;
    public static ExcelBuiltInProperty Manager;
    public static ExcelBuiltInProperty Company;
    public static ExcelBuiltInProperty LinksDirty;
}
public enum Syncfusion.XlsIO.ExcelCalculationMode : Enum {
    public int value__;
    public static ExcelCalculationMode Manual;
    public static ExcelCalculationMode Automatic;
    public static ExcelCalculationMode AutomaticExceptTables;
}
public enum Syncfusion.XlsIO.ExcelCategoriesLabelLevel : Enum {
    public int value__;
    public static ExcelCategoriesLabelLevel CategoriesLabelLevelAll;
    public static ExcelCategoriesLabelLevel CategoriesLabelLevelNone;
}
public enum Syncfusion.XlsIO.ExcelCategoryType : Enum {
    public int value__;
    public static ExcelCategoryType Category;
    public static ExcelCategoryType Time;
    public static ExcelCategoryType Automatic;
}
public enum Syncfusion.XlsIO.ExcelCellType : Enum {
    public int value__;
    public static ExcelCellType AllFormatConditions;
    public static ExcelCellType AllValidation;
    public static ExcelCellType Blanks;
    public static ExcelCellType Comments;
    public static ExcelCellType Constants;
    public static ExcelCellType Formulas;
    public static ExcelCellType LastCell;
    public static ExcelCellType SameFormatConditions;
    public static ExcelCellType SameValidation;
    public static ExcelCellType Visible;
}
public enum Syncfusion.XlsIO.ExcelCFAverageType : Enum {
    public int value__;
    public static ExcelCFAverageType Above;
    public static ExcelCFAverageType Below;
    public static ExcelCFAverageType EqualOrAbove;
    public static ExcelCFAverageType EqualOrBelow;
    public static ExcelCFAverageType AboveStdDev;
    public static ExcelCFAverageType BelowStdDev;
}
public enum Syncfusion.XlsIO.ExcelCFTopBottomType : Enum {
    public int value__;
    public static ExcelCFTopBottomType Top;
    public static ExcelCFTopBottomType Bottom;
}
public enum Syncfusion.XlsIO.ExcelCFType : Enum {
    public int value__;
    public static ExcelCFType CellValue;
    public static ExcelCFType Formula;
    public static ExcelCFType ColorScale;
    public static ExcelCFType DataBar;
    public static ExcelCFType IconSet;
    public static ExcelCFType Blank;
    public static ExcelCFType NoBlank;
    public static ExcelCFType SpecificText;
    public static ExcelCFType ContainsErrors;
    public static ExcelCFType NotContainsErrors;
    public static ExcelCFType TimePeriod;
    public static ExcelCFType Duplicate;
    public static ExcelCFType Unique;
    public static ExcelCFType TopBottom;
    public static ExcelCFType AboveBelowAverage;
}
public enum Syncfusion.XlsIO.ExcelChartBackgroundMode : Enum {
    public int value__;
    public static ExcelChartBackgroundMode Transparent;
    public static ExcelChartBackgroundMode Opaque;
}
public enum Syncfusion.XlsIO.ExcelChartBaseUnit : Enum {
    public int value__;
    public static ExcelChartBaseUnit Day;
    public static ExcelChartBaseUnit Month;
    public static ExcelChartBaseUnit Year;
}
public enum Syncfusion.XlsIO.ExcelChartDisplayUnit : Enum {
    public int value__;
    public static ExcelChartDisplayUnit None;
    public static ExcelChartDisplayUnit Hundreds;
    public static ExcelChartDisplayUnit Thousands;
    public static ExcelChartDisplayUnit TenThousands;
    public static ExcelChartDisplayUnit HundredThousands;
    public static ExcelChartDisplayUnit Millions;
    public static ExcelChartDisplayUnit TenMillions;
    public static ExcelChartDisplayUnit HundredMillions;
    public static ExcelChartDisplayUnit ThousandMillions;
    public static ExcelChartDisplayUnit MillionMillions;
    public static ExcelChartDisplayUnit Custom;
}
public enum Syncfusion.XlsIO.ExcelChartHorzAlignment : Enum {
    public int value__;
    public static ExcelChartHorzAlignment Left;
    public static ExcelChartHorzAlignment Center;
    public static ExcelChartHorzAlignment Right;
    public static ExcelChartHorzAlignment Justify;
}
public enum Syncfusion.XlsIO.ExcelChartLinePattern : Enum {
    public int value__;
    public static ExcelChartLinePattern Solid;
    public static ExcelChartLinePattern Dash;
    public static ExcelChartLinePattern Dot;
    public static ExcelChartLinePattern DashDot;
    public static ExcelChartLinePattern DashDotDot;
    public static ExcelChartLinePattern None;
    public static ExcelChartLinePattern DarkGray;
    public static ExcelChartLinePattern MediumGray;
    public static ExcelChartLinePattern LightGray;
    public static ExcelChartLinePattern CircleDot;
    public static ExcelChartLinePattern LongDash;
    public static ExcelChartLinePattern LongDashDot;
    public static ExcelChartLinePattern LongDashDotDot;
}
public enum Syncfusion.XlsIO.ExcelChartLineWeight : Enum {
    public int value__;
    public static ExcelChartLineWeight Hairline;
    public static ExcelChartLineWeight Narrow;
    public static ExcelChartLineWeight Medium;
    public static ExcelChartLineWeight Wide;
}
public enum Syncfusion.XlsIO.ExcelChartMarkerType : Enum {
    public int value__;
    public static ExcelChartMarkerType None;
    public static ExcelChartMarkerType Square;
    public static ExcelChartMarkerType Diamond;
    public static ExcelChartMarkerType Triangle;
    public static ExcelChartMarkerType X;
    public static ExcelChartMarkerType Star;
    public static ExcelChartMarkerType DowJones;
    public static ExcelChartMarkerType StandardDeviation;
    public static ExcelChartMarkerType Circle;
    public static ExcelChartMarkerType PlusSign;
}
public enum Syncfusion.XlsIO.ExcelChartPictureType : Enum {
    public int value__;
    public static ExcelChartPictureType stack;
    public static ExcelChartPictureType stackScale;
    public static ExcelChartPictureType stretch;
}
public enum Syncfusion.XlsIO.ExcelChartPlotEmpty : Enum {
    public int value__;
    public static ExcelChartPlotEmpty NotPlotted;
    public static ExcelChartPlotEmpty Zero;
    public static ExcelChartPlotEmpty Interpolated;
}
public enum Syncfusion.XlsIO.ExcelChartType : Enum {
    public int value__;
    public static ExcelChartType Column_Clustered;
    public static ExcelChartType Column_Stacked;
    public static ExcelChartType Column_Stacked_100;
    public static ExcelChartType Column_Clustered_3D;
    public static ExcelChartType Column_Stacked_3D;
    public static ExcelChartType Column_Stacked_100_3D;
    public static ExcelChartType Column_3D;
    public static ExcelChartType Bar_Clustered;
    public static ExcelChartType Bar_Stacked;
    public static ExcelChartType Bar_Stacked_100;
    public static ExcelChartType Bar_Clustered_3D;
    public static ExcelChartType Bar_Stacked_3D;
    public static ExcelChartType Bar_Stacked_100_3D;
    public static ExcelChartType Line;
    public static ExcelChartType Line_Stacked;
    public static ExcelChartType Line_Stacked_100;
    public static ExcelChartType Line_Markers;
    public static ExcelChartType Line_Markers_Stacked;
    public static ExcelChartType Line_Markers_Stacked_100;
    public static ExcelChartType Line_3D;
    public static ExcelChartType Pie;
    public static ExcelChartType Pie_3D;
    public static ExcelChartType PieOfPie;
    public static ExcelChartType Pie_Exploded;
    public static ExcelChartType Pie_Exploded_3D;
    public static ExcelChartType Pie_Bar;
    public static ExcelChartType Scatter_Markers;
    public static ExcelChartType Scatter_SmoothedLine_Markers;
    public static ExcelChartType Scatter_SmoothedLine;
    public static ExcelChartType Scatter_Line_Markers;
    public static ExcelChartType Scatter_Line;
    public static ExcelChartType Area;
    public static ExcelChartType Area_Stacked;
    public static ExcelChartType Area_Stacked_100;
    public static ExcelChartType Area_3D;
    public static ExcelChartType Area_Stacked_3D;
    public static ExcelChartType Area_Stacked_100_3D;
    public static ExcelChartType Doughnut;
    public static ExcelChartType Doughnut_Exploded;
    public static ExcelChartType Radar;
    public static ExcelChartType Radar_Markers;
    public static ExcelChartType Radar_Filled;
    public static ExcelChartType Surface_3D;
    public static ExcelChartType Surface_NoColor_3D;
    public static ExcelChartType Surface_Contour;
    public static ExcelChartType Surface_NoColor_Contour;
    public static ExcelChartType Bubble;
    public static ExcelChartType Bubble_3D;
    public static ExcelChartType Stock_HighLowClose;
    public static ExcelChartType Stock_OpenHighLowClose;
    public static ExcelChartType Stock_VolumeHighLowClose;
    public static ExcelChartType Stock_VolumeOpenHighLowClose;
    public static ExcelChartType Cylinder_Clustered;
    public static ExcelChartType Cylinder_Stacked;
    public static ExcelChartType Cylinder_Stacked_100;
    public static ExcelChartType Cylinder_Bar_Clustered;
    public static ExcelChartType Cylinder_Bar_Stacked;
    public static ExcelChartType Cylinder_Bar_Stacked_100;
    public static ExcelChartType Cylinder_Clustered_3D;
    public static ExcelChartType Cone_Clustered;
    public static ExcelChartType Cone_Stacked;
    public static ExcelChartType Cone_Stacked_100;
    public static ExcelChartType Cone_Bar_Clustered;
    public static ExcelChartType Cone_Bar_Stacked;
    public static ExcelChartType Cone_Bar_Stacked_100;
    public static ExcelChartType Cone_Clustered_3D;
    public static ExcelChartType Pyramid_Clustered;
    public static ExcelChartType Pyramid_Stacked;
    public static ExcelChartType Pyramid_Stacked_100;
    public static ExcelChartType Pyramid_Bar_Clustered;
    public static ExcelChartType Pyramid_Bar_Stacked;
    public static ExcelChartType Pyramid_Bar_Stacked_100;
    public static ExcelChartType Pyramid_Clustered_3D;
    public static ExcelChartType Combination_Chart;
    public static ExcelChartType Funnel;
    public static ExcelChartType WaterFall;
    public static ExcelChartType BoxAndWhisker;
    public static ExcelChartType Histogram;
    public static ExcelChartType Pareto;
    public static ExcelChartType TreeMap;
    public static ExcelChartType SunBurst;
}
public enum Syncfusion.XlsIO.ExcelChartVertAlignment : Enum {
    public int value__;
    public static ExcelChartVertAlignment Top;
    public static ExcelChartVertAlignment Center;
    public static ExcelChartVertAlignment Bottom;
    public static ExcelChartVertAlignment Justify;
}
public enum Syncfusion.XlsIO.ExcelCheckState : Enum {
    public int value__;
    public static ExcelCheckState Unchecked;
    public static ExcelCheckState Checked;
    public static ExcelCheckState Mixed;
}
public enum Syncfusion.XlsIO.ExcelClearOptions : Enum {
    public int value__;
    public static ExcelClearOptions ClearFormat;
    public static ExcelClearOptions ClearContent;
    public static ExcelClearOptions ClearComment;
    public static ExcelClearOptions ClearAll;
    public static ExcelClearOptions ClearConditionalFormats;
    public static ExcelClearOptions ClearDataValidations;
}
public enum Syncfusion.XlsIO.ExcelColorFilterType : Enum {
    public byte value__;
    public static ExcelColorFilterType CellColor;
    public static ExcelColorFilterType FontColor;
}
public enum Syncfusion.XlsIO.ExcelColorIndex : Enum {
    public int value__;
    public static ExcelColorIndex ColorIndexAutomatic;
    public static ExcelColorIndex ColorIndexNone;
}
public enum Syncfusion.XlsIO.ExcelCombinationFilterType : Enum {
    public byte value__;
    public static ExcelCombinationFilterType TextFilter;
    public static ExcelCombinationFilterType DateTimeFilter;
}
public enum Syncfusion.XlsIO.ExcelComboType : Enum {
    public int value__;
    public static ExcelComboType Regular;
    public static ExcelComboType PivotTablePageField;
    public static ExcelComboType AutoFilter;
    public static ExcelComboType AutoComplete;
    public static ExcelComboType DataValidation;
    public static ExcelComboType PivotTableRowOrColumn;
    public static ExcelComboType TableTotalRow;
}
public enum Syncfusion.XlsIO.ExcelCommandType : Enum {
    public int value__;
    public static ExcelCommandType Default;
    public static ExcelCommandType Sql;
    public static ExcelCommandType Table;
    public static ExcelCommandType List;
}
public enum Syncfusion.XlsIO.ExcelCommentHAlign : Enum {
    public int value__;
    public static ExcelCommentHAlign Left;
    public static ExcelCommentHAlign Center;
    public static ExcelCommentHAlign Right;
    public static ExcelCommentHAlign Justified;
    public static ExcelCommentHAlign Justify;
    public static ExcelCommentHAlign Distributed;
}
public enum Syncfusion.XlsIO.ExcelCommentVAlign : Enum {
    public int value__;
    public static ExcelCommentVAlign Top;
    public static ExcelCommentVAlign Center;
    public static ExcelCommentVAlign Bottom;
    public static ExcelCommentVAlign Justify;
    public static ExcelCommentVAlign Distributed;
}
public enum Syncfusion.XlsIO.ExcelComparisonOperator : Enum {
    public int value__;
    public static ExcelComparisonOperator None;
    public static ExcelComparisonOperator Between;
    public static ExcelComparisonOperator NotBetween;
    public static ExcelComparisonOperator Equal;
    public static ExcelComparisonOperator NotEqual;
    public static ExcelComparisonOperator Greater;
    public static ExcelComparisonOperator Less;
    public static ExcelComparisonOperator GreaterOrEqual;
    public static ExcelComparisonOperator LessOrEqual;
    public static ExcelComparisonOperator BeginsWith;
    public static ExcelComparisonOperator ContainsText;
    public static ExcelComparisonOperator EndsWith;
    public static ExcelComparisonOperator NotContainsText;
}
public enum Syncfusion.XlsIO.ExcelConnectionsType : Enum {
    public int value__;
    public static ExcelConnectionsType ConnectionTypeODBC;
    public static ExcelConnectionsType ConnectionTypeOLEDB;
    public static ExcelConnectionsType ConnectionTypeTEXT;
    public static ExcelConnectionsType ConnectionTypeWEB;
}
public class Syncfusion.XlsIO.ExcelConstants : object {
    public static int MinimumIndex;
    public static int MaximumIndex;
    public static int MaximumUsedIndex;
    public static int MinimumUsedIndex;
    internal static int IntSize;
    internal static int ShortSize;
    internal static int LongSize;
    internal static int BitsInShort;
    internal static int BitsInByte;
    internal static int DoubleSize;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelCopyRangeOptions : Enum {
    public int value__;
    public static ExcelCopyRangeOptions None;
    public static ExcelCopyRangeOptions UpdateFormulas;
    public static ExcelCopyRangeOptions UpdateMerges;
    public static ExcelCopyRangeOptions CopyStyles;
    public static ExcelCopyRangeOptions CopyShapes;
    public static ExcelCopyRangeOptions CopyErrorIndicators;
    public static ExcelCopyRangeOptions CopyConditionalFormats;
    public static ExcelCopyRangeOptions CopyDataValidations;
    public static ExcelCopyRangeOptions All;
    public static ExcelCopyRangeOptions CopyValueAndSourceFormatting;
}
public enum Syncfusion.XlsIO.ExcelCredentialsMethod : Enum {
    public int value__;
    public static ExcelCredentialsMethod integrated;
    public static ExcelCredentialsMethod none;
    public static ExcelCredentialsMethod stored;
}
public enum Syncfusion.XlsIO.ExcelDataLabelPosition : Enum {
    public int value__;
    public static ExcelDataLabelPosition Automatic;
    public static ExcelDataLabelPosition Outside;
    public static ExcelDataLabelPosition Inside;
    public static ExcelDataLabelPosition Center;
    public static ExcelDataLabelPosition OutsideBase;
    public static ExcelDataLabelPosition Above;
    public static ExcelDataLabelPosition Below;
    public static ExcelDataLabelPosition Left;
    public static ExcelDataLabelPosition Right;
    public static ExcelDataLabelPosition BestFit;
    public static ExcelDataLabelPosition Moved;
}
public enum Syncfusion.XlsIO.ExcelDataProviderType : Enum {
    public int value__;
    public static ExcelDataProviderType Native;
    public static ExcelDataProviderType Unsafe;
    public static ExcelDataProviderType ByteArray;
}
public enum Syncfusion.XlsIO.ExcelDataSourceType : Enum {
    public int value__;
    public static ExcelDataSourceType Worksheet;
    public static ExcelDataSourceType ExternalData;
    public static ExcelDataSourceType Consolidation;
    public static ExcelDataSourceType ScenarioPivotTable;
}
public enum Syncfusion.XlsIO.ExcelDataType : Enum {
    public int value__;
    public static ExcelDataType Any;
    public static ExcelDataType Integer;
    public static ExcelDataType Decimal;
    public static ExcelDataType User;
    public static ExcelDataType Date;
    public static ExcelDataType Time;
    public static ExcelDataType TextLength;
    public static ExcelDataType Formula;
}
public enum Syncfusion.XlsIO.ExcelDataValidationComparisonOperator : Enum {
    public int value__;
    public static ExcelDataValidationComparisonOperator Between;
    public static ExcelDataValidationComparisonOperator NotBetween;
    public static ExcelDataValidationComparisonOperator Equal;
    public static ExcelDataValidationComparisonOperator NotEqual;
    public static ExcelDataValidationComparisonOperator Greater;
    public static ExcelDataValidationComparisonOperator Less;
    public static ExcelDataValidationComparisonOperator GreaterOrEqual;
    public static ExcelDataValidationComparisonOperator LessOrEqual;
}
public enum Syncfusion.XlsIO.ExcelDownloadType : Enum {
    public int value__;
    public static ExcelDownloadType Open;
    public static ExcelDownloadType PromptDialog;
}
public enum Syncfusion.XlsIO.ExcelDropLineStyle : Enum {
    public int value__;
    public static ExcelDropLineStyle Drop;
    public static ExcelDropLineStyle HiLow;
    public static ExcelDropLineStyle Series;
}
public enum Syncfusion.XlsIO.ExcelEncryptionType : Enum {
    public int value__;
    public static ExcelEncryptionType None;
    public static ExcelEncryptionType Standard;
    public static ExcelEncryptionType Strong;
}
public class Syncfusion.XlsIO.ExcelEngine : object {
    private ApplicationImpl m_appl;
    private bool m_bDisposed;
    private bool m_bAskSaveOnDestroy;
    public IApplication Excel { get; }
    public bool ThrowNotSavedOnDestroy { get; public set; }
    internal static bool IsSecurityGranted { get; }
    [DebuggerStepThroughAttribute]
public IApplication get_Excel();
    public bool get_ThrowNotSavedOnDestroy();
    public void set_ThrowNotSavedOnDestroy(bool value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    internal static bool get_IsSecurityGranted();
    internal static bool ValidateLicense();
}
public enum Syncfusion.XlsIO.ExcelErrorBarInclude : Enum {
    public int value__;
    public static ExcelErrorBarInclude Both;
    public static ExcelErrorBarInclude Plus;
    public static ExcelErrorBarInclude Minus;
}
public enum Syncfusion.XlsIO.ExcelErrorBarType : Enum {
    public int value__;
    public static ExcelErrorBarType Percentage;
    public static ExcelErrorBarType Fixed;
    public static ExcelErrorBarType StandardDeviation;
    public static ExcelErrorBarType Custom;
    public static ExcelErrorBarType StandardError;
}
public enum Syncfusion.XlsIO.ExcelErrorStyle : Enum {
    public int value__;
    public static ExcelErrorStyle Stop;
    public static ExcelErrorStyle Warning;
    public static ExcelErrorStyle Info;
}
public class Syncfusion.XlsIO.ExcelExportDataOptions : object {
    private int m_columnTypeDetectionRow;
    public int ColumnTypeDetectionRow { get; public set; }
    public int get_ColumnTypeDetectionRow();
    public void set_ColumnTypeDetectionRow(int value);
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelExportDataTableOptions : Enum {
    public int value__;
    public static ExcelExportDataTableOptions None;
    public static ExcelExportDataTableOptions ColumnNames;
    public static ExcelExportDataTableOptions ComputedFormulaValues;
    public static ExcelExportDataTableOptions DetectColumnTypes;
    public static ExcelExportDataTableOptions DefaultStyleColumnTypes;
    public static ExcelExportDataTableOptions PreserveOleDate;
    public static ExcelExportDataTableOptions ExportHiddenColumns;
    public static ExcelExportDataTableOptions ExportHiddenRows;
    public static ExcelExportDataTableOptions DetectMixedValueType;
    public static ExcelExportDataTableOptions TrimColumnNames;
}
public enum Syncfusion.XlsIO.ExcelExportType : Enum {
    public int value__;
    public static ExcelExportType Bool;
    public static ExcelExportType Number;
    public static ExcelExportType Text;
    public static ExcelExportType DateTime;
    public static ExcelExportType TimeSpan;
    public static ExcelExportType Error;
    public static ExcelExportType Formula;
}
public enum Syncfusion.XlsIO.ExcelFillType : Enum {
    public int value__;
    public static ExcelFillType SolidColor;
    public static ExcelFillType Pattern;
    public static ExcelFillType Texture;
    public static ExcelFillType Picture;
    public static ExcelFillType UnknownGradient;
    public static ExcelFillType Gradient;
}
public enum Syncfusion.XlsIO.ExcelFilterAction : Enum {
    public int value__;
    public static ExcelFilterAction FilterInPlace;
    public static ExcelFilterAction FilterCopy;
}
public enum Syncfusion.XlsIO.ExcelFilterCondition : Enum {
    public int value__;
    public static ExcelFilterCondition Less;
    public static ExcelFilterCondition Equal;
    public static ExcelFilterCondition LessOrEqual;
    public static ExcelFilterCondition Greater;
    public static ExcelFilterCondition NotEqual;
    public static ExcelFilterCondition GreaterOrEqual;
    public static ExcelFilterCondition Contains;
    public static ExcelFilterCondition DoesNotContain;
    public static ExcelFilterCondition BeginsWith;
    public static ExcelFilterCondition DoesNotBeginWith;
    public static ExcelFilterCondition EndsWith;
    public static ExcelFilterCondition DoesNotEndWith;
}
public enum Syncfusion.XlsIO.ExcelFilterDataType : Enum {
    public int value__;
    public static ExcelFilterDataType NotUsed;
    public static ExcelFilterDataType FloatingPoint;
    public static ExcelFilterDataType String;
    public static ExcelFilterDataType Boolean;
    public static ExcelFilterDataType ErrorCode;
    public static ExcelFilterDataType MatchAllBlanks;
    public static ExcelFilterDataType MatchAllNonBlanks;
}
public enum Syncfusion.XlsIO.ExcelFilterType : Enum {
    public byte value__;
    public static ExcelFilterType CustomFilter;
    public static ExcelFilterType CombinationFilter;
    public static ExcelFilterType DynamicFilter;
    public static ExcelFilterType ColorFilter;
    public static ExcelFilterType IconFilter;
}
public enum Syncfusion.XlsIO.ExcelFindOptions : Enum {
    public int value__;
    public static ExcelFindOptions None;
    public static ExcelFindOptions MatchCase;
    public static ExcelFindOptions MatchEntireCellContent;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelFindType : Enum {
    public int value__;
    public static ExcelFindType Text;
    public static ExcelFindType Formula;
    public static ExcelFindType FormulaStringValue;
    public static ExcelFindType Error;
    public static ExcelFindType Number;
    public static ExcelFindType FormulaValue;
    public static ExcelFindType Values;
    public static ExcelFindType Comments;
}
public enum Syncfusion.XlsIO.ExcelFontVertialAlignment : Enum {
    public int value__;
    public static ExcelFontVertialAlignment Baseline;
    public static ExcelFontVertialAlignment Superscript;
    public static ExcelFontVertialAlignment Subscript;
}
public enum Syncfusion.XlsIO.ExcelFormatType : Enum {
    public int value__;
    public static ExcelFormatType Unknown;
    public static ExcelFormatType General;
    public static ExcelFormatType Text;
    public static ExcelFormatType Number;
    public static ExcelFormatType DateTime;
    public static ExcelFormatType Percentage;
    public static ExcelFormatType Currency;
    public static ExcelFormatType DecimalPercentage;
    public static ExcelFormatType Exponential;
}
public enum Syncfusion.XlsIO.ExcelFormulaLabel : Enum {
    public int value__;
    public static ExcelFormulaLabel ColumnLabels;
    public static ExcelFormulaLabel MixedLabels;
    public static ExcelFormulaLabel NoLabels;
    public static ExcelFormulaLabel RowLabels;
}
[CLSCompliantAttribute("False")]
public enum Syncfusion.XlsIO.ExcelFunction : Enum {
    public int value__;
    public static ExcelFunction NONE;
    public static ExcelFunction CustomFunction;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ABS;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ACOS;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ACOSH;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction ADDRESS;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction AND;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction AREAS;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ASIN;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ASINH;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ATAN;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ATAN2;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ATANH;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction AVEDEV;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction AVERAGE;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction AVERAGEA;
    public static ExcelFunction HEX2BIN;
    public static ExcelFunction HEX2DEC;
    public static ExcelFunction HEX2OCT;
    public static ExcelFunction COUNTIFS;
    public static ExcelFunction BIN2DEC;
    public static ExcelFunction BIN2HEX;
    public static ExcelFunction BIN2OCT;
    public static ExcelFunction DEC2BIN;
    public static ExcelFunction DEC2HEX;
    public static ExcelFunction DEC2OCT;
    public static ExcelFunction OCT2BIN;
    public static ExcelFunction OCT2DEC;
    public static ExcelFunction OCT2HEX;
    public static ExcelFunction ODDFPRICE;
    public static ExcelFunction ODDFYIELD;
    public static ExcelFunction ODDLPRICE;
    public static ExcelFunction ODDLYIELD;
    public static ExcelFunction ISODD;
    public static ExcelFunction ISEVEN;
    public static ExcelFunction LCM;
    public static ExcelFunction GCD;
    public static ExcelFunction SUMIFS;
    public static ExcelFunction AVERAGEIF;
    public static ExcelFunction AVERAGEIFS;
    public static ExcelFunction CONVERT;
    public static ExcelFunction COMPLEX;
    public static ExcelFunction COUPDAYBS;
    public static ExcelFunction COUPDAYS;
    public static ExcelFunction COUPDAYSNC;
    public static ExcelFunction COUPNCD;
    public static ExcelFunction COUPNUM;
    public static ExcelFunction COUPPCD;
    public static ExcelFunction DELTA;
    public static ExcelFunction DISC;
    public static ExcelFunction DOLLARDE;
    public static ExcelFunction DOLLARFR;
    public static ExcelFunction DURATION;
    public static ExcelFunction EDATE;
    public static ExcelFunction EFFECT;
    public static ExcelFunction EOMONTH;
    public static ExcelFunction ERF;
    public static ExcelFunction ERFC;
    public static ExcelFunction FACTDOUBLE;
    public static ExcelFunction GESTEP;
    public static ExcelFunction IFERROR;
    public static ExcelFunction IMABS;
    public static ExcelFunction IMAGINARY;
    public static ExcelFunction IMARGUMENT;
    public static ExcelFunction IMCONJUGATE;
    public static ExcelFunction IMCOS;
    public static ExcelFunction IMEXP;
    public static ExcelFunction IMLN;
    public static ExcelFunction IMLOG10;
    public static ExcelFunction IMLOG2;
    public static ExcelFunction IMREAL;
    public static ExcelFunction IMSIN;
    public static ExcelFunction IMSQRT;
    public static ExcelFunction IMSUB;
    public static ExcelFunction IMSUM;
    public static ExcelFunction IMDIV;
    public static ExcelFunction IMPOWER;
    public static ExcelFunction IMPRODUCT;
    public static ExcelFunction ACCRINT;
    public static ExcelFunction ACCRINTM;
    public static ExcelFunction AGGREGATE;
    public static ExcelFunction AMORDEGRC;
    public static ExcelFunction AMORLINC;
    public static ExcelFunction BAHTTEXT;
    public static ExcelFunction BESSELI;
    public static ExcelFunction BESSELJ;
    public static ExcelFunction BESSELK;
    public static ExcelFunction BESSELY;
    public static ExcelFunction CUBEKPIMEMBER;
    public static ExcelFunction CUBEMEMBER;
    public static ExcelFunction CUBERANKEDMEMBER;
    public static ExcelFunction CUBESET;
    public static ExcelFunction CUBESETCOUNT;
    public static ExcelFunction CUBEMEMBERPROPERTY;
    public static ExcelFunction CUMIPMT;
    public static ExcelFunction CUMPRINC;
    public static ExcelFunction FVSCHEDULE;
    public static ExcelFunction INTRATE;
    public static ExcelFunction LINTEST;
    public static ExcelFunction CUBEVALUE;
    public static ExcelFunction MDURATION;
    public static ExcelFunction MROUND;
    public static ExcelFunction MULTINOMIAL;
    public static ExcelFunction NETWORKDAYS;
    public static ExcelFunction NOMINAL;
    public static ExcelFunction PRICE;
    public static ExcelFunction PRICEDISC;
    public static ExcelFunction PRICEMAT;
    public static ExcelFunction QUOTIENT;
    public static ExcelFunction RANDBETWEEN;
    public static ExcelFunction RECEIVED;
    public static ExcelFunction SERIESSUM;
    public static ExcelFunction SQRTPI;
    public static ExcelFunction TBILLEQ;
    public static ExcelFunction TBILLPRICE;
    public static ExcelFunction TBILLYIELD;
    public static ExcelFunction WEEKNUM;
    public static ExcelFunction WORKDAY;
    public static ExcelFunction XIRR;
    public static ExcelFunction XNPV;
    public static ExcelFunction YEARFRAC;
    public static ExcelFunction YIELD;
    public static ExcelFunction YIELDDISC;
    public static ExcelFunction YIELDMAT;
    public static ExcelFunction WORKDAYINTL;
    public static ExcelFunction BETA_INV;
    public static ExcelFunction BINOM_DIST;
    public static ExcelFunction BINOM_INV;
    public static ExcelFunction CEILING_PRECISE;
    public static ExcelFunction CHISQ_DIST;
    public static ExcelFunction CHISQ_DIST_RT;
    public static ExcelFunction CHISQ_INV;
    public static ExcelFunction CHISQ_INV_RT;
    public static ExcelFunction CHISQ_TEST;
    public static ExcelFunction CONFIDENCE_NORM;
    public static ExcelFunction CONFIDENCE_T;
    public static ExcelFunction COVARIANCE_P;
    public static ExcelFunction COVARIANCE_S;
    public static ExcelFunction ERF_PRECISE;
    public static ExcelFunction ERFC_PRECISE;
    public static ExcelFunction F_DIST;
    public static ExcelFunction F_DIST_RT;
    public static ExcelFunction F_INV;
    public static ExcelFunction F_INV_RT;
    public static ExcelFunction F_TEST;
    public static ExcelFunction FLOOR_PRECISE;
    public static ExcelFunction GAMMA_DIST;
    public static ExcelFunction GAMMA_INV;
    public static ExcelFunction GAMMALN_PRECISE;
    public static ExcelFunction HYPGEOM_DIST;
    public static ExcelFunction LOGNORM_DIST;
    public static ExcelFunction LOGNORM_INV;
    public static ExcelFunction MODE_MULT;
    public static ExcelFunction MODE_SNGL;
    public static ExcelFunction NEGBINOM_DIST;
    public static ExcelFunction NETWORKDAYS_INTL;
    public static ExcelFunction NORM_DIST;
    public static ExcelFunction NORM_INV;
    public static ExcelFunction NORM_S_DIST;
    public static ExcelFunction PERCENTILE_EXC;
    public static ExcelFunction PERCENTILE_INC;
    public static ExcelFunction PERCENTRANK_EXC;
    public static ExcelFunction PERCENTRANK_INC;
    public static ExcelFunction POISSON_DIST;
    public static ExcelFunction QUARTILE_EXC;
    public static ExcelFunction QUARTILE_INC;
    public static ExcelFunction RANK_AVG;
    public static ExcelFunction RANK_EQ;
    public static ExcelFunction STDEV_P;
    public static ExcelFunction STDEV_S;
    public static ExcelFunction T_DIST;
    public static ExcelFunction T_DIST_2T;
    public static ExcelFunction T_DIST_RT;
    public static ExcelFunction T_INV;
    public static ExcelFunction T_INV_2T;
    public static ExcelFunction T_TEST;
    public static ExcelFunction VAR_P;
    public static ExcelFunction VAR_S;
    public static ExcelFunction WEIBULL_DIST;
    public static ExcelFunction WORKDAY_INTL;
    public static ExcelFunction Z_TEST;
    public static ExcelFunction BETA_DIST;
    public static ExcelFunction EUROCONVERT;
    public static ExcelFunction PHONETIC;
    public static ExcelFunction REGISTER_ID;
    public static ExcelFunction SQL_REQUEST;
    public static ExcelFunction JIS;
    public static ExcelFunction EXPON_DIST;
    public static ExcelFunction DAYS;
    public static ExcelFunction ISOWEEKNUM;
    public static ExcelFunction BITAND;
    public static ExcelFunction BITLSHIFT;
    public static ExcelFunction BITOR;
    public static ExcelFunction BITRSHIFT;
    public static ExcelFunction BITXOR;
    public static ExcelFunction IMCOSH;
    public static ExcelFunction IMCOT;
    public static ExcelFunction IMCSC;
    public static ExcelFunction IMCSCH;
    public static ExcelFunction IMSEC;
    public static ExcelFunction IMSECH;
    public static ExcelFunction IMSINH;
    public static ExcelFunction IMTAN;
    public static ExcelFunction PDURATION;
    public static ExcelFunction RRI;
    public static ExcelFunction ISFORMULA;
    public static ExcelFunction SHEET;
    public static ExcelFunction SHEETS;
    public static ExcelFunction IFNA;
    public static ExcelFunction XOR;
    public static ExcelFunction FORMULATEXT;
    public static ExcelFunction ACOT;
    public static ExcelFunction ACOTH;
    public static ExcelFunction ARABIC;
    public static ExcelFunction BASE;
    public static ExcelFunction CEILING_MATH;
    public static ExcelFunction COMBINA;
    public static ExcelFunction COT;
    public static ExcelFunction COTH;
    public static ExcelFunction CSC;
    public static ExcelFunction CSCH;
    public static ExcelFunction DECIMAL;
    public static ExcelFunction FLOOR_MATH;
    public static ExcelFunction ISO_CEILING;
    public static ExcelFunction MUNIT;
    public static ExcelFunction SEC;
    public static ExcelFunction SECH;
    public static ExcelFunction BINOM_DIST_RANGE;
    public static ExcelFunction GAMMA;
    public static ExcelFunction GAUSS;
    public static ExcelFunction PERMUTATIONA;
    public static ExcelFunction PHI;
    public static ExcelFunction SKEW_P;
    public static ExcelFunction NUMBERVALUE;
    public static ExcelFunction UNICHAR;
    public static ExcelFunction UNICODE;
    public static ExcelFunction ENCODEURL;
    public static ExcelFunction FILTERXML;
    public static ExcelFunction WEBSERVICE;
    public static ExcelFunction TEXTJOIN;
    public static ExcelFunction CONCAT;
    public static ExcelFunction IFS;
    public static ExcelFunction SWITCH;
    public static ExcelFunction MINIFS;
    public static ExcelFunction MAXIFS;
    public static ExcelFunction FORECAST_ETS;
    public static ExcelFunction FORECAST_ETS_SEASONALITY;
    public static ExcelFunction FORECAST_LINEAR;
    public static ExcelFunction FORECAST_ETS_CONFINT;
    public static ExcelFunction FORECAST_ETS_STAT;
    public static ExcelFunction UNIQUE;
    public static ExcelFunction XLOOKUP;
    public static ExcelFunction LET;
    public static ExcelFunction XMATCH;
    public static ExcelFunction ARRAYTOTEXT;
    public static ExcelFunction VALUETOTEXT;
    public static ExcelFunction FILTER;
    public static ExcelFunction ANCHORARRAY;
    public static ExcelFunction TEXTAFTER;
    public static ExcelFunction CHOOSEROWS;
    public static ExcelFunction CHOOSECOLS;
    public static ExcelFunction TEXTBEFORE;
    public static ExcelFunction TEXTSPLIT;
    public static ExcelFunction TOROW;
    public static ExcelFunction TOCOL;
    public static ExcelFunction SORT;
    public static ExcelFunction LAMBDA;
    public static ExcelFunction BYROW;
    public static ExcelFunction BYCOL;
    public static ExcelFunction SORTBY;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction BETADIST;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction BETAINV;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction BINOMDIST;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction CEILING;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction CELL;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction CHAR;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction CHIDIST;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction CHIINV;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction CHITEST;
    public static ExcelFunction CHOOSE;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction CLEAN;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction CODE;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction COLUMN;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction COLUMNS;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction COMBIN;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction CONCATENATE;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction CONFIDENCE;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction CORREL;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction COS;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction COSH;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction COUNT;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction COUNTA;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction COUNTBLANK;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction COUNTIF;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction COVAR;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction CRITBINOM;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction DATE;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction DATEVALUE;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DAVERAGE;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction DAY;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction DAYS360;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction DB;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DCOUNT;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DCOUNTA;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction DDB;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction DEGREES;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction DEVSQ;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DMAX;
    [ReferenceIndexAttribute("1")]
[DefaultValueAttribute("3")]
public static ExcelFunction DMIN;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction DOLLAR;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DPRODUCT;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DSTDEV;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DSTDEVP;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DSUM;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DVAR;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DVARP;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction ERROR;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ERRORTYPE;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction EVEN;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction EXACT;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction EXP;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction EXPONDIST;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction FACT;
    [DefaultValueAttribute("0")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction FALSE;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction FDIST;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction FIND;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction FINDB;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction FINV;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction FISHER;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction FISHERINV;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction FIXED;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction FLOOR;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction FORECAST;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction FREQUENCY;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction FTEST;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction FV;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction GAMMADIST;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction GAMMAINV;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction GAMMALN;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction GEOMEAN;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction GETPIVOTDATA;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction GROWTH;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction HARMEAN;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction HLOOKUP;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction HOUR;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction HYPERLINK;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction HYPGEOMDIST;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction IF;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction INDEX;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction INDIRECT;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction INFO;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction INT;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction INTERCEPT;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction IPMT;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction IRR;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISBLANK;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISERR;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISERROR;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISLOGICAL;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISNA;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISNONTEXT;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISNUMBER;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISPMT;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction ISREF;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ISTEXT;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction KURT;
    [ReferenceIndexAttribute("1")]
[DefaultValueAttribute("2")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction LARGE;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction LEFT;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction LEFTB;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction LEN;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction LENB;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction LINEST;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction LN;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction LOG;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction LOG10;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction LOGEST;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction LOGINV;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction LOGNORMDIST;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction LOOKUP;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction LOWER;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction MATCH;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction MAX;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction MAXA;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction MDETERM;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction MEDIAN;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction MID;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction MIDB;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction MIN;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction MINA;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction MINUTE;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction MINVERSE;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction MIRR;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction MMULT;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction MOD;
    [ReferenceIndexAttribute("3")]
public static ExcelFunction MODE;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction MONTH;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction N;
    [DefaultValueAttribute("0")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction NA;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction NEGBINOMDIST;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction NORMDIST;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction NORMINV;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction NORMSDIST;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction NORMSINV;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction NOT;
    [DefaultValueAttribute("0")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction NOW;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction NPER;
    [ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.AreaPtg", "Mono.Cecil.CustomAttributeArgument[]")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction NPV;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ODD;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction OFFSET;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction OR;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction PEARSON;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction PERCENTILE;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction PERCENTRANK;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction PERMUT;
    [DefaultValueAttribute("0")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction PI;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction PMT;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction POISSON;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction POWER;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction PPMT;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction PROB;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction PRODUCT;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction PROPER;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction PV;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction QUARTILE;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction RADIANS;
    [DefaultValueAttribute("0")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction RAND;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction RANK;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction RATE;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction REPLACE;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction REPLACEB;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction RIGHT;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction RIGHTB;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction ROMAN;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ROUND;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ROUNDDOWN;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction ROUNDUP;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction ROW;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction ROWS;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction RSQ;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction SEARCH;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction SEARCHB;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction SECOND;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction SIGN;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction SIN;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction SINH;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction SKEW;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction SLN;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction SLOPE;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction SMALL;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction SQRT;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction STANDARDIZE;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction STDEV;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction STDEVA;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction STDEVP;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction STDEVPA;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction STEYX;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction SUBSTITUTE;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction SUBTOTAL;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction SUM;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction SUMIF;
    [ReferenceIndexAttribute("3")]
public static ExcelFunction SUMPRODUCT;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction SUMSQ;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction SUMX2MY2;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction SUMX2PY2;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction SUMXMY2;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction SYD;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction T;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction TAN;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction TANH;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction TDIST;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction TEXT;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction TIME;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction TIMEVALUE;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction TINV;
    [DefaultValueAttribute("0")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction TODAY;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction TRANSPOSE;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction TREND;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction TRIM;
    [DefaultValueAttribute("2")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction TRIMMEAN;
    [DefaultValueAttribute("0")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction TRUE;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction TRUNC;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("3")]
public static ExcelFunction TTEST;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction TYPE;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction UPPER;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction VALUE;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction VAR;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction VARA;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction VARP;
    [ReferenceIndexAttribute("1")]
public static ExcelFunction VARPA;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction VDB;
    [ReferenceIndexAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExcelFunction VLOOKUP;
    [ReferenceIndexAttribute("2")]
public static ExcelFunction WEEKDAY;
    [DefaultValueAttribute("4")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction WEIBULL;
    [DefaultValueAttribute("1")]
[ReferenceIndexAttribute("2")]
public static ExcelFunction YEAR;
    [ReferenceIndexAttribute("1")]
[ReferenceIndexAttribute("Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg", "3")]
public static ExcelFunction ZTEST;
    [DefaultValueAttribute("0")]
public static ExcelFunction ABSREF;
    [DefaultValueAttribute("0")]
public static ExcelFunction ACTIVECELL;
    [DefaultValueAttribute("1")]
public static ExcelFunction ADDBAR;
    [DefaultValueAttribute("1")]
public static ExcelFunction ADDCOMMAND;
    [DefaultValueAttribute("1")]
public static ExcelFunction ADDMENU;
    [DefaultValueAttribute("1")]
public static ExcelFunction ADDTOOLBAR;
    [DefaultValueAttribute("0")]
public static ExcelFunction APPTITLE;
    [DefaultValueAttribute("1")]
public static ExcelFunction ARGUMENT;
    [DefaultValueAttribute("1")]
public static ExcelFunction ASC;
    [DefaultValueAttribute("1")]
public static ExcelFunction CALL;
    [DefaultValueAttribute("0")]
public static ExcelFunction CALLER;
    [DefaultValueAttribute("0")]
public static ExcelFunction CANCELKEY;
    [DefaultValueAttribute("1")]
public static ExcelFunction CHECKCOMMAND;
    [DefaultValueAttribute("1")]
public static ExcelFunction CREATEOBJECT;
    [DefaultValueAttribute("1")]
public static ExcelFunction CUSTOMREPEAT;
    [DefaultValueAttribute("1")]
public static ExcelFunction CUSTOMUNDO;
    [DefaultValueAttribute("3")]
public static ExcelFunction DATEDIF;
    [DefaultValueAttribute("1")]
public static ExcelFunction DATESTRING;
    [DefaultValueAttribute("1")]
public static ExcelFunction DBCS;
    [DefaultValueAttribute("1")]
public static ExcelFunction DELETEBAR;
    [DefaultValueAttribute("1")]
public static ExcelFunction DELETECOMMAND;
    [DefaultValueAttribute("1")]
public static ExcelFunction DELETEMENU;
    [DefaultValueAttribute("1")]
public static ExcelFunction DELETETOOLBAR;
    [DefaultValueAttribute("1")]
public static ExcelFunction DEREF;
    [DefaultValueAttribute("3")]
[ReferenceIndexAttribute("1")]
public static ExcelFunction DGET;
    [DefaultValueAttribute("1")]
public static ExcelFunction DIALOGBOX;
    [DefaultValueAttribute("1")]
public static ExcelFunction DIRECTORY;
    [DefaultValueAttribute("1")]
public static ExcelFunction DOCUMENTS;
    [DefaultValueAttribute("1")]
public static ExcelFunction ECHO;
    [DefaultValueAttribute("1")]
public static ExcelFunction ENABLECOMMAND;
    [DefaultValueAttribute("1")]
public static ExcelFunction ENABLETOOL;
    [DefaultValueAttribute("1")]
public static ExcelFunction EVALUATE;
    [DefaultValueAttribute("1")]
public static ExcelFunction EXEC;
    [DefaultValueAttribute("1")]
public static ExcelFunction EXECUTE;
    [DefaultValueAttribute("1")]
public static ExcelFunction FILES;
    [DefaultValueAttribute("1")]
public static ExcelFunction FOPEN;
    [DefaultValueAttribute("1")]
public static ExcelFunction FORMULACONVERT;
    [DefaultValueAttribute("1")]
public static ExcelFunction FPOS;
    [DefaultValueAttribute("1")]
public static ExcelFunction FREAD;
    [DefaultValueAttribute("1")]
public static ExcelFunction FREADLN;
    [DefaultValueAttribute("1")]
public static ExcelFunction FSIZE;
    [DefaultValueAttribute("1")]
public static ExcelFunction FWRITE;
    [DefaultValueAttribute("1")]
public static ExcelFunction FWRITELN;
    [DefaultValueAttribute("1")]
public static ExcelFunction FCLOSE;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETBAR;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETCELL;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETCHARTITEM;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETDEF;
    [DefaultValueAttribute("0")]
public static ExcelFunction GETDOCUMENT;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETFORMULA;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETLINKINFO;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETMOVIE;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETNAME;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETNOTE;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETOBJECT;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETPIVOTFIELD;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETPIVOTITEM;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETPIVOTTABLE;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETTOOL;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETTOOLBAR;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETWINDOW;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETWORKBOOK;
    [DefaultValueAttribute("1")]
public static ExcelFunction GETWORKSPACE;
    [DefaultValueAttribute("1")]
public static ExcelFunction GOTO;
    [DefaultValueAttribute("1")]
public static ExcelFunction GROUP;
    [DefaultValueAttribute("1")]
public static ExcelFunction HALT;
    [DefaultValueAttribute("1")]
public static ExcelFunction HELP;
    [DefaultValueAttribute("0")]
public static ExcelFunction INITIATE;
    [DefaultValueAttribute("0")]
public static ExcelFunction INPUT;
    [DefaultValueAttribute("0")]
public static ExcelFunction LASTERROR;
    [DefaultValueAttribute("0")]
public static ExcelFunction LINKS;
    [DefaultValueAttribute("1")]
public static ExcelFunction MOVIECOMMAND;
    [DefaultValueAttribute("1")]
public static ExcelFunction NAMES;
    [DefaultValueAttribute("1")]
public static ExcelFunction NOTE;
    [DefaultValueAttribute("1")]
public static ExcelFunction NUMBERSTRING;
    [DefaultValueAttribute("1")]
public static ExcelFunction OPENDIALOG;
    [DefaultValueAttribute("1")]
public static ExcelFunction OPTIONSLISTSGET;
    [DefaultValueAttribute("0")]
public static ExcelFunction PAUSE;
    [DefaultValueAttribute("1")]
public static ExcelFunction PIVOTADDDATA;
    [DefaultValueAttribute("1")]
public static ExcelFunction POKE;
    [DefaultValueAttribute("1")]
public static ExcelFunction PRESSTOOL;
    [DefaultValueAttribute("1")]
public static ExcelFunction REFTEXT;
    [DefaultValueAttribute("1")]
public static ExcelFunction REGISTER;
    [DefaultValueAttribute("1")]
public static ExcelFunction REGISTERID;
    [DefaultValueAttribute("1")]
public static ExcelFunction RELREF;
    [DefaultValueAttribute("2")]
public static ExcelFunction RENAMECOMMAND;
    [DefaultValueAttribute("2")]
public static ExcelFunction REPT;
    [DefaultValueAttribute("1")]
public static ExcelFunction REQUEST;
    [DefaultValueAttribute("1")]
public static ExcelFunction RESETTOOLBAR;
    [DefaultValueAttribute("0")]
public static ExcelFunction RESTART;
    [DefaultValueAttribute("0")]
public static ExcelFunction RESULT;
    [DefaultValueAttribute("0")]
public static ExcelFunction RESUME;
    [DefaultValueAttribute("0")]
public static ExcelFunction SAVEDIALOG;
    [DefaultValueAttribute("0")]
public static ExcelFunction SAVETOOLBAR;
    [DefaultValueAttribute("0")]
public static ExcelFunction SCENARIOGET;
    [DefaultValueAttribute("0")]
public static ExcelFunction SELECTION;
    [DefaultValueAttribute("1")]
public static ExcelFunction SERIES;
    [DefaultValueAttribute("1")]
public static ExcelFunction SETNAME;
    [DefaultValueAttribute("1")]
public static ExcelFunction SETVALUE;
    [DefaultValueAttribute("0")]
public static ExcelFunction SHOWBAR;
    [DefaultValueAttribute("1")]
public static ExcelFunction SPELLINGCHECK;
    [DefaultValueAttribute("1")]
public static ExcelFunction STEP;
    [DefaultValueAttribute("1")]
public static ExcelFunction TERMINATE;
    [DefaultValueAttribute("1")]
public static ExcelFunction TEXTBOX;
    [DefaultValueAttribute("1")]
public static ExcelFunction TEXTREF;
    [DefaultValueAttribute("1")]
public static ExcelFunction UNREGISTER;
    [DefaultValueAttribute("1")]
public static ExcelFunction USDOLLAR;
    [DefaultValueAttribute("1")]
public static ExcelFunction VOLATILE;
    [DefaultValueAttribute("1")]
public static ExcelFunction WINDOWS;
    [DefaultValueAttribute("1")]
public static ExcelFunction WINDOWTITLE;
}
public enum Syncfusion.XlsIO.ExcelGradientColor : Enum {
    public int value__;
    public static ExcelGradientColor OneColor;
    public static ExcelGradientColor TwoColor;
    public static ExcelGradientColor Preset;
    public static ExcelGradientColor MultiColor;
}
public enum Syncfusion.XlsIO.ExcelGradientPattern : Enum {
    public int value__;
    public static ExcelGradientPattern Pat_5_Percent;
    public static ExcelGradientPattern Pat_10_Percent;
    public static ExcelGradientPattern Pat_20_Percent;
    public static ExcelGradientPattern Pat_25_Percent;
    public static ExcelGradientPattern Pat_30_Percent;
    public static ExcelGradientPattern Pat_40_Percent;
    public static ExcelGradientPattern Pat_50_Percent;
    public static ExcelGradientPattern Pat_60_Percent;
    public static ExcelGradientPattern Pat_70_Percent;
    public static ExcelGradientPattern Pat_75_Percent;
    public static ExcelGradientPattern Pat_80_Percent;
    public static ExcelGradientPattern Pat_90_Percent;
    public static ExcelGradientPattern Pat_Dark_Downward_Diagonal;
    public static ExcelGradientPattern Pat_Dark_Horizontal;
    public static ExcelGradientPattern Pat_Dark_Upward_Diagonal;
    public static ExcelGradientPattern Pat_Dark_Vertical;
    public static ExcelGradientPattern Pat_Dashed_Downward_Diagonal;
    public static ExcelGradientPattern Pat_Dashed_Horizontal;
    public static ExcelGradientPattern Pat_Dashed_Upward_Diagonal;
    public static ExcelGradientPattern Pat_Dashed_Vertical;
    public static ExcelGradientPattern Pat_Diagonal_Brick;
    public static ExcelGradientPattern Pat_Divot;
    public static ExcelGradientPattern Pat_Dotted_Diamond;
    public static ExcelGradientPattern Pat_Dotted_Grid;
    public static ExcelGradientPattern Pat_Horizontal_Brick;
    public static ExcelGradientPattern Pat_Large_Checker_Board;
    public static ExcelGradientPattern Pat_Large_Confetti;
    public static ExcelGradientPattern Pat_Large_Grid;
    public static ExcelGradientPattern Pat_Light_Downward_Diagonal;
    public static ExcelGradientPattern Pat_Light_Horizontal;
    public static ExcelGradientPattern Pat_Light_Upward_Diagonal;
    public static ExcelGradientPattern Pat_Light_Vertical;
    public static ExcelGradientPattern Pat_Mixed;
    public static ExcelGradientPattern Pat_Narrow_Horizontal;
    public static ExcelGradientPattern Pat_Narrow_Vertical;
    public static ExcelGradientPattern Pat_Outlined_Diamond;
    public static ExcelGradientPattern Pat_Plaid;
    public static ExcelGradientPattern Pat_Shingle;
    public static ExcelGradientPattern Pat_Small_Checker_Board;
    public static ExcelGradientPattern Pat_Small_Confetti;
    public static ExcelGradientPattern Pat_Small_Grid;
    public static ExcelGradientPattern Pat_Solid_Diamond;
    public static ExcelGradientPattern Pat_Sphere;
    public static ExcelGradientPattern Pat_Trellis;
    public static ExcelGradientPattern Pat_Wave;
    public static ExcelGradientPattern Pat_Weave;
    public static ExcelGradientPattern Pat_Wide_Downward_Diagonal;
    public static ExcelGradientPattern Pat_Wide_Upward_Diagonal;
    public static ExcelGradientPattern Pat_Zig_Zag;
}
public enum Syncfusion.XlsIO.ExcelGradientPreset : Enum {
    public int value__;
    public static ExcelGradientPreset Grad_Early_Sunset;
    public static ExcelGradientPreset Grad_Late_Sunset;
    public static ExcelGradientPreset Grad_Nightfall;
    public static ExcelGradientPreset Grad_Daybreak;
    public static ExcelGradientPreset Grad_Horizon;
    public static ExcelGradientPreset Grad_Desert;
    public static ExcelGradientPreset Grad_Ocean;
    public static ExcelGradientPreset Grad_Calm_Water;
    public static ExcelGradientPreset Grad_Fire;
    public static ExcelGradientPreset Grad_Fog;
    public static ExcelGradientPreset Grad_Moss;
    public static ExcelGradientPreset Grad_Peacock;
    public static ExcelGradientPreset Grad_Wheat;
    public static ExcelGradientPreset Grad_Parchment;
    public static ExcelGradientPreset Grad_Mahogany;
    public static ExcelGradientPreset Grad_Rainbow;
    public static ExcelGradientPreset Grad_RainbowII;
    public static ExcelGradientPreset Grad_Gold;
    public static ExcelGradientPreset Grad_GoldII;
    public static ExcelGradientPreset Grad_Brass;
    public static ExcelGradientPreset Grad_Chrome;
    public static ExcelGradientPreset Grad_ChromeII;
    public static ExcelGradientPreset Grad_Silver;
    public static ExcelGradientPreset Grad_Sapphire;
}
public enum Syncfusion.XlsIO.ExcelGradientStyle : Enum {
    public int value__;
    public static ExcelGradientStyle Horizontal;
    public static ExcelGradientStyle Vertical;
    public static ExcelGradientStyle Diagonl_Up;
    public static ExcelGradientStyle Diagonl_Down;
    public static ExcelGradientStyle From_Corner;
    public static ExcelGradientStyle From_Center;
}
public enum Syncfusion.XlsIO.ExcelGradientVariants : Enum {
    public int value__;
    public static ExcelGradientVariants ShadingVariants_1;
    public static ExcelGradientVariants ShadingVariants_2;
    public static ExcelGradientVariants ShadingVariants_3;
    public static ExcelGradientVariants ShadingVariants_4;
}
public enum Syncfusion.XlsIO.ExcelGroupBy : Enum {
    public int value__;
    public static ExcelGroupBy ByRows;
    public static ExcelGroupBy ByColumns;
}
public enum Syncfusion.XlsIO.ExcelHAlign : Enum {
    public int value__;
    public static ExcelHAlign HAlignGeneral;
    public static ExcelHAlign HAlignLeft;
    public static ExcelHAlign HAlignCenter;
    public static ExcelHAlign HAlignRight;
    public static ExcelHAlign HAlignFill;
    public static ExcelHAlign HAlignJustify;
    public static ExcelHAlign HAlignCenterAcrossSelection;
    public static ExcelHAlign HAlignDistributed;
}
public enum Syncfusion.XlsIO.ExcelHorizontalAlignment : Enum {
    public int value__;
    public static ExcelHorizontalAlignment Left;
    public static ExcelHorizontalAlignment Center;
    public static ExcelHorizontalAlignment Right;
    public static ExcelHorizontalAlignment LeftMiddle;
    public static ExcelHorizontalAlignment CenterMiddle;
    public static ExcelHorizontalAlignment RightMiddle;
}
public enum Syncfusion.XlsIO.ExcelHttpContentType : Enum {
    public int value__;
    public static ExcelHttpContentType Excel97;
    public static ExcelHttpContentType Excel2000;
    public static ExcelHttpContentType Excel2007;
    public static ExcelHttpContentType Excel2010;
    public static ExcelHttpContentType Excel2013;
    public static ExcelHttpContentType Excel2016;
    public static ExcelHttpContentType Xlsx;
    public static ExcelHttpContentType CSV;
    public static ExcelHttpContentType ODS;
}
public enum Syncfusion.XlsIO.ExcelHyperlinkAttachedType : Enum {
    public int value__;
    public static ExcelHyperlinkAttachedType Range;
    public static ExcelHyperlinkAttachedType Shape;
}
public enum Syncfusion.XlsIO.ExcelHyperLinkType : Enum {
    public int value__;
    public static ExcelHyperLinkType None;
    public static ExcelHyperLinkType Url;
    public static ExcelHyperLinkType File;
    public static ExcelHyperLinkType Unc;
    public static ExcelHyperLinkType Workbook;
}
public enum Syncfusion.XlsIO.ExcelIconSetType : Enum {
    public int value__;
    public static ExcelIconSetType ThreeArrows;
    public static ExcelIconSetType ThreeArrowsGray;
    public static ExcelIconSetType ThreeFlags;
    public static ExcelIconSetType ThreeTrafficLights1;
    public static ExcelIconSetType ThreeTrafficLights2;
    public static ExcelIconSetType ThreeSigns;
    public static ExcelIconSetType ThreeSymbols;
    public static ExcelIconSetType ThreeSymbols2;
    public static ExcelIconSetType FourArrows;
    public static ExcelIconSetType FourArrowsGray;
    public static ExcelIconSetType FourRedToBlack;
    public static ExcelIconSetType FourRating;
    public static ExcelIconSetType FourTrafficLights;
    public static ExcelIconSetType FiveArrows;
    public static ExcelIconSetType FiveArrowsGray;
    public static ExcelIconSetType FiveRating;
    public static ExcelIconSetType FiveQuarters;
    public static ExcelIconSetType ThreeStars;
    public static ExcelIconSetType ThreeTriangles;
    public static ExcelIconSetType FiveBoxes;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelIgnoreError : Enum {
    public int value__;
    public static ExcelIgnoreError None;
    public static ExcelIgnoreError EvaluateToError;
    public static ExcelIgnoreError EmptyCellReferences;
    public static ExcelIgnoreError NumberAsText;
    public static ExcelIgnoreError OmittedCells;
    public static ExcelIgnoreError InconsistentFormula;
    public static ExcelIgnoreError TextDate;
    public static ExcelIgnoreError UnlockedFormulaCells;
    public static ExcelIgnoreError All;
}
public enum Syncfusion.XlsIO.ExcelImageFormat : Enum {
    public int value__;
    public static ExcelImageFormat Original;
    public static ExcelImageFormat Png;
    public static ExcelImageFormat Jpeg;
}
public class Syncfusion.XlsIO.ExcelImportDataOptions : object {
    private int m_firstRow;
    private int m_firstColumn;
    private bool m_includeHeader;
    private bool m_includeHeaderParent;
    private ExcelNestedDataLayoutOptions m_nestedDataLayoutOptions;
    private ExcelNestedDataGroupOptions m_nestedDataGroupOptions;
    private int m_collapseLevel;
    private bool m_preserveTypes;
    public int FirstRow { get; public set; }
    public int FirstColumn { get; public set; }
    public bool IncludeHeader { get; public set; }
    public bool IncludeHeaderParent { get; public set; }
    public ExcelNestedDataLayoutOptions NestedDataLayoutOptions { get; public set; }
    public ExcelNestedDataGroupOptions NestedDataGroupOptions { get; public set; }
    public int CollapseLevel { get; public set; }
    public bool PreserveTypes { get; public set; }
    public int get_FirstRow();
    public void set_FirstRow(int value);
    public int get_FirstColumn();
    public void set_FirstColumn(int value);
    public bool get_IncludeHeader();
    public void set_IncludeHeader(bool value);
    public bool get_IncludeHeaderParent();
    public void set_IncludeHeaderParent(bool value);
    public ExcelNestedDataLayoutOptions get_NestedDataLayoutOptions();
    public void set_NestedDataLayoutOptions(ExcelNestedDataLayoutOptions value);
    public ExcelNestedDataGroupOptions get_NestedDataGroupOptions();
    public void set_NestedDataGroupOptions(ExcelNestedDataGroupOptions value);
    public int get_CollapseLevel();
    public void set_CollapseLevel(int value);
    public bool get_PreserveTypes();
    public void set_PreserveTypes(bool value);
}
public enum Syncfusion.XlsIO.ExcelInsertOptions : Enum {
    public int value__;
    public static ExcelInsertOptions FormatAsBefore;
    public static ExcelInsertOptions FormatAsAfter;
    public static ExcelInsertOptions FormatDefault;
}
public enum Syncfusion.XlsIO.ExcelKnownColors : Enum {
    public int value__;
    public static ExcelKnownColors Black;
    public static ExcelKnownColors White;
    public static ExcelKnownColors Red;
    public static ExcelKnownColors LightGreen;
    public static ExcelKnownColors Blue;
    public static ExcelKnownColors Yellow;
    public static ExcelKnownColors Magenta;
    public static ExcelKnownColors Cyan;
    public static ExcelKnownColors Aqua;
    public static ExcelKnownColors BlackCustom;
    public static ExcelKnownColors BlueCustom;
    public static ExcelKnownColors Blue_grey;
    public static ExcelKnownColors Bright_green;
    public static ExcelKnownColors Brown;
    public static ExcelKnownColors Dark_blue;
    public static ExcelKnownColors Dark_green;
    public static ExcelKnownColors Dark_red;
    public static ExcelKnownColors Dark_teal;
    public static ExcelKnownColors Dark_yellow;
    public static ExcelKnownColors Gold;
    public static ExcelKnownColors Green;
    public static ExcelKnownColors Grey_25_percent;
    public static ExcelKnownColors Grey_40_percent;
    public static ExcelKnownColors Grey_50_percent;
    public static ExcelKnownColors Grey_80_percent;
    public static ExcelKnownColors Indigo;
    public static ExcelKnownColors Lavender;
    public static ExcelKnownColors Light_blue;
    public static ExcelKnownColors Light_green;
    public static ExcelKnownColors Light_orange;
    public static ExcelKnownColors Light_turquoise;
    public static ExcelKnownColors Light_yellow;
    public static ExcelKnownColors Lime;
    public static ExcelKnownColors Olive_green;
    public static ExcelKnownColors Orange;
    public static ExcelKnownColors Pale_blue;
    public static ExcelKnownColors Pink;
    public static ExcelKnownColors Plum;
    public static ExcelKnownColors Red2;
    public static ExcelKnownColors Rose;
    public static ExcelKnownColors Sea_green;
    public static ExcelKnownColors Sky_blue;
    public static ExcelKnownColors Tan;
    public static ExcelKnownColors Teal;
    public static ExcelKnownColors Turquoise;
    public static ExcelKnownColors Violet;
    public static ExcelKnownColors WhiteCustom;
    public static ExcelKnownColors YellowCustom;
    public static ExcelKnownColors Custom0;
    public static ExcelKnownColors Custom1;
    public static ExcelKnownColors Custom2;
    public static ExcelKnownColors Custom3;
    public static ExcelKnownColors Custom4;
    public static ExcelKnownColors Custom5;
    public static ExcelKnownColors Custom6;
    public static ExcelKnownColors Custom7;
    public static ExcelKnownColors Custom8;
    public static ExcelKnownColors Custom9;
    public static ExcelKnownColors Custom10;
    public static ExcelKnownColors Custom11;
    public static ExcelKnownColors Custom12;
    public static ExcelKnownColors Custom13;
    public static ExcelKnownColors Custom14;
    public static ExcelKnownColors Custom15;
    public static ExcelKnownColors Custom16;
    public static ExcelKnownColors Custom17;
    public static ExcelKnownColors Custom18;
    public static ExcelKnownColors Custom19;
    public static ExcelKnownColors Custom20;
    public static ExcelKnownColors Custom21;
    public static ExcelKnownColors Custom22;
    public static ExcelKnownColors Custom23;
    public static ExcelKnownColors Custom24;
    public static ExcelKnownColors Custom25;
    public static ExcelKnownColors Custom26;
    public static ExcelKnownColors Custom27;
    public static ExcelKnownColors Custom28;
    public static ExcelKnownColors Custom29;
    public static ExcelKnownColors Custom30;
    public static ExcelKnownColors Custom31;
    public static ExcelKnownColors Custom32;
    public static ExcelKnownColors Custom33;
    public static ExcelKnownColors Custom34;
    public static ExcelKnownColors Custom35;
    public static ExcelKnownColors Custom36;
    public static ExcelKnownColors Custom37;
    public static ExcelKnownColors Custom38;
    public static ExcelKnownColors Custom39;
    public static ExcelKnownColors Custom40;
    public static ExcelKnownColors Custom41;
    public static ExcelKnownColors Custom42;
    public static ExcelKnownColors Custom43;
    public static ExcelKnownColors Custom44;
    public static ExcelKnownColors Custom45;
    public static ExcelKnownColors Custom46;
    public static ExcelKnownColors Custom47;
    public static ExcelKnownColors Custom48;
    public static ExcelKnownColors Custom49;
    public static ExcelKnownColors Custom50;
    public static ExcelKnownColors Custom51;
    public static ExcelKnownColors Custom52;
    public static ExcelKnownColors Custom53;
    public static ExcelKnownColors Custom54;
    public static ExcelKnownColors Custom55;
    public static ExcelKnownColors Custom56;
    public static ExcelKnownColors None;
}
public enum Syncfusion.XlsIO.ExcelLegendPosition : Enum {
    public int value__;
    public static ExcelLegendPosition Bottom;
    public static ExcelLegendPosition Corner;
    public static ExcelLegendPosition Top;
    public static ExcelLegendPosition Right;
    public static ExcelLegendPosition Left;
    public static ExcelLegendPosition NotDocked;
}
public enum Syncfusion.XlsIO.ExcelLegendSpacing : Enum {
    public int value__;
    public static ExcelLegendSpacing Close;
    public static ExcelLegendSpacing Medium;
    public static ExcelLegendSpacing Open;
}
public enum Syncfusion.XlsIO.ExcelLineStyle : Enum {
    public int value__;
    public static ExcelLineStyle None;
    public static ExcelLineStyle Thin;
    public static ExcelLineStyle Medium;
    public static ExcelLineStyle Dashed;
    public static ExcelLineStyle Dotted;
    public static ExcelLineStyle Thick;
    public static ExcelLineStyle Double;
    public static ExcelLineStyle Hair;
    public static ExcelLineStyle Medium_dashed;
    public static ExcelLineStyle Dash_dot;
    public static ExcelLineStyle Medium_dash_dot;
    public static ExcelLineStyle Dash_dot_dot;
    public static ExcelLineStyle Medium_dash_dot_dot;
    public static ExcelLineStyle Slanted_dash_dot;
}
public enum Syncfusion.XlsIO.ExcelListObjectSourceType : Enum {
    public int value__;
    public static ExcelListObjectSourceType SrcQuery;
}
public enum Syncfusion.XlsIO.ExcelMergeOperation : Enum {
    public int value__;
    public static ExcelMergeOperation Leave;
    public static ExcelMergeOperation Delete;
}
public enum Syncfusion.XlsIO.ExcelMoveDirection : Enum {
    public int value__;
    public static ExcelMoveDirection MoveLeft;
    public static ExcelMoveDirection MoveUp;
    public static ExcelMoveDirection None;
}
public enum Syncfusion.XlsIO.ExcelNamesMergeOptions : Enum {
    public int value__;
    public static ExcelNamesMergeOptions Leave;
    public static ExcelNamesMergeOptions Replace;
    public static ExcelNamesMergeOptions Rename;
    public static ExcelNamesMergeOptions MakeLocal;
}
public enum Syncfusion.XlsIO.ExcelNestedDataGroupOptions : Enum {
    public int value__;
    public static ExcelNestedDataGroupOptions Expand;
    public static ExcelNestedDataGroupOptions Collapse;
}
public enum Syncfusion.XlsIO.ExcelNestedDataLayoutOptions : Enum {
    public int value__;
    public static ExcelNestedDataLayoutOptions Default;
    public static ExcelNestedDataLayoutOptions Merge;
    public static ExcelNestedDataLayoutOptions Repeat;
}
public enum Syncfusion.XlsIO.ExcelObjectTextLink : Enum {
    public int value__;
    public static ExcelObjectTextLink Chart;
    public static ExcelObjectTextLink YAxis;
    public static ExcelObjectTextLink XAxis;
    public static ExcelObjectTextLink DataLabel;
    public static ExcelObjectTextLink ZAxis;
    public static ExcelObjectTextLink DisplayUnit;
}
public enum Syncfusion.XlsIO.ExcelOpenType : Enum {
    public int value__;
    public static ExcelOpenType CSV;
    public static ExcelOpenType TSV;
    public static ExcelOpenType SpreadsheetML;
    public static ExcelOpenType BIFF;
    public static ExcelOpenType SpreadsheetML2007;
    public static ExcelOpenType SpreadsheetML2010;
    public static ExcelOpenType Automatic;
}
public enum Syncfusion.XlsIO.ExcelOrder : Enum {
    public int value__;
    public static ExcelOrder DownThenOver;
    public static ExcelOrder OverThenDown;
}
public enum Syncfusion.XlsIO.ExcelPageBreak : Enum {
    public int value__;
    public static ExcelPageBreak PageBreakAutomatic;
    public static ExcelPageBreak PageBreakManual;
    public static ExcelPageBreak PageBreakNone;
}
public enum Syncfusion.XlsIO.ExcelPageBreakExtent : Enum {
    public int value__;
    public static ExcelPageBreakExtent PageBreakFull;
    public static ExcelPageBreakExtent PageBreakPartial;
}
public enum Syncfusion.XlsIO.ExcelPageOrientation : Enum {
    public int value__;
    public static ExcelPageOrientation Landscape;
    public static ExcelPageOrientation Portrait;
}
public enum Syncfusion.XlsIO.ExcelPagesOrder : Enum {
    public int value__;
    public static ExcelPagesOrder DownThenOver;
    public static ExcelPagesOrder OverThenDown;
}
public enum Syncfusion.XlsIO.ExcelPaperSize : Enum {
    public int value__;
    public static ExcelPaperSize Paper10x14;
    public static ExcelPaperSize Paper11x17;
    public static ExcelPaperSize PaperA3;
    public static ExcelPaperSize PaperA4;
    public static ExcelPaperSize PaperA4Small;
    public static ExcelPaperSize PaperA5;
    public static ExcelPaperSize PaperB4;
    public static ExcelPaperSize PaperB5;
    public static ExcelPaperSize PaperCsheet;
    public static ExcelPaperSize PaperDsheet;
    public static ExcelPaperSize PaperEnvelope10;
    public static ExcelPaperSize PaperEnvelope11;
    public static ExcelPaperSize PaperEnvelope12;
    public static ExcelPaperSize PaperEnvelope14;
    public static ExcelPaperSize PaperEnvelope9;
    public static ExcelPaperSize PaperEnvelopeB4;
    public static ExcelPaperSize PaperEnvelopeB5;
    public static ExcelPaperSize PaperEnvelopeB6;
    public static ExcelPaperSize PaperEnvelopeC3;
    public static ExcelPaperSize PaperEnvelopeC4;
    public static ExcelPaperSize PaperEnvelopeC5;
    public static ExcelPaperSize PaperEnvelopeC6;
    public static ExcelPaperSize PaperEnvelopeC65;
    public static ExcelPaperSize PaperEnvelopeDL;
    public static ExcelPaperSize PaperEnvelopeItaly;
    public static ExcelPaperSize PaperEnvelopeMonarch;
    public static ExcelPaperSize PaperEnvelopePersonal;
    public static ExcelPaperSize PaperEsheet;
    public static ExcelPaperSize PaperExecutive;
    public static ExcelPaperSize PaperFanfoldLegalGerman;
    public static ExcelPaperSize PaperFanfoldStdGerman;
    public static ExcelPaperSize PaperFanfoldUS;
    public static ExcelPaperSize PaperFolio;
    public static ExcelPaperSize PaperLedger;
    public static ExcelPaperSize PaperLegal;
    public static ExcelPaperSize PaperLetter;
    public static ExcelPaperSize PaperLetterSmall;
    public static ExcelPaperSize PaperNote;
    public static ExcelPaperSize PaperQuarto;
    public static ExcelPaperSize PaperStatement;
    public static ExcelPaperSize PaperTabloid;
    public static ExcelPaperSize PaperUser;
    public static ExcelPaperSize ISOB4;
    public static ExcelPaperSize JapaneseDoublePostcard;
    public static ExcelPaperSize StandardPaper9By11;
    public static ExcelPaperSize StandardPaper10By11;
    public static ExcelPaperSize StandardPaper15By11;
    public static ExcelPaperSize InviteEnvelope;
    public static ExcelPaperSize LetterExtraPaper9275By12;
    public static ExcelPaperSize LegalExtraPaper9275By15;
    public static ExcelPaperSize TabloidExtraPaper;
    public static ExcelPaperSize A4ExtraPaper;
    public static ExcelPaperSize LetterTransversePaper;
    public static ExcelPaperSize A4TransversePaper;
    public static ExcelPaperSize LetterExtraTransversePaper;
    public static ExcelPaperSize SuperASuperAA4Paper;
    public static ExcelPaperSize SuperBSuperBA3Paper;
    public static ExcelPaperSize LetterPlusPaper;
    public static ExcelPaperSize A4PlusPaper;
    public static ExcelPaperSize A5TransversePaper;
    public static ExcelPaperSize JISB5TransversePaper;
    public static ExcelPaperSize A3ExtraPaper;
    public static ExcelPaperSize A5ExtraPpaper;
    public static ExcelPaperSize ISOB5ExtraPaper;
    public static ExcelPaperSize A2Paper;
    public static ExcelPaperSize A3TransversePaper;
    public static ExcelPaperSize A3ExtraTransversePaper;
}
public enum Syncfusion.XlsIO.ExcelParameterDataType : Enum {
    public int value__;
    public static ExcelParameterDataType ParamTypeWChar;
    public static ExcelParameterDataType ParamTypeBit;
    public static ExcelParameterDataType ParamTypeTinyInt;
    public static ExcelParameterDataType ParamTypeBigInt;
    public static ExcelParameterDataType ParamTypeLongVarBinary;
    public static ExcelParameterDataType ParamTypeVarBinary;
    public static ExcelParameterDataType ParamTypeBinary;
    public static ExcelParameterDataType ParamTypeLongVarChar;
    public static ExcelParameterDataType ParamTypeUnknown;
    public static ExcelParameterDataType ParamTypeChar;
    public static ExcelParameterDataType ParamTypeNumeric;
    public static ExcelParameterDataType ParamTypeDecimal;
    public static ExcelParameterDataType ParamTypeInteger;
    public static ExcelParameterDataType ParamTypeSmallInt;
    public static ExcelParameterDataType ParamTypeFloat;
    public static ExcelParameterDataType ParamTypeReal;
    public static ExcelParameterDataType ParamTypeDouble;
    public static ExcelParameterDataType ParamTypeDate;
    public static ExcelParameterDataType ParamTypeTime;
    public static ExcelParameterDataType ParamTypeTimestamp;
    public static ExcelParameterDataType ParamTypeVarChar;
}
public enum Syncfusion.XlsIO.ExcelParameterType : Enum {
    public int value__;
    public static ExcelParameterType Prompt;
    public static ExcelParameterType Constant;
    public static ExcelParameterType Range;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelParseFormulaOptions : Enum {
    public int value__;
    public static ExcelParseFormulaOptions None;
    public static ExcelParseFormulaOptions RootLevel;
    public static ExcelParseFormulaOptions InArray;
    public static ExcelParseFormulaOptions InName;
    public static ExcelParseFormulaOptions ParseOperand;
    public static ExcelParseFormulaOptions ParseComplexOperand;
    public static ExcelParseFormulaOptions UseR1C1;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelParseOptions : Enum {
    public int value__;
    public static ExcelParseOptions Default;
    [ObsoleteAttribute("This value is obsolete and won't affect on the XlsIO. It will be removed in next release. Sorry for inconvenience.")]
public static ExcelParseOptions SkipStyles;
    public static ExcelParseOptions DoNotParseCharts;
    [ObsoleteAttribute("This value is obsolete and won't affect on the XlsIO performance. It will be removed in next release. Sorry for inconvenience.")]
public static ExcelParseOptions StringsReadOnly;
    public static ExcelParseOptions DoNotParsePivotTable;
    public static ExcelParseOptions ParseWorksheetsOnDemand;
}
public enum Syncfusion.XlsIO.ExcelPattern : Enum {
    public int value__;
    public static ExcelPattern None;
    public static ExcelPattern Solid;
    public static ExcelPattern Percent50;
    public static ExcelPattern Percent70;
    public static ExcelPattern Percent25;
    public static ExcelPattern DarkHorizontal;
    public static ExcelPattern DarkVertical;
    public static ExcelPattern DarkDownwardDiagonal;
    public static ExcelPattern DarkUpwardDiagonal;
    public static ExcelPattern ForwardDiagonal;
    public static ExcelPattern Percent75;
    public static ExcelPattern Horizontal;
    public static ExcelPattern Vertical;
    public static ExcelPattern LightDownwardDiagonal;
    public static ExcelPattern LightUpwardDiagonal;
    public static ExcelPattern Angle;
    public static ExcelPattern Percent60;
    public static ExcelPattern Percent10;
    public static ExcelPattern Percent05;
    public static ExcelPattern Percent50Gray;
    public static ExcelPattern Percent75Gray;
    public static ExcelPattern Percent25Gray;
    public static ExcelPattern HorizontalStripe;
    public static ExcelPattern VerticalStripe;
    public static ExcelPattern ReverseDiagonalStripe;
    public static ExcelPattern DiagonalStripe;
    public static ExcelPattern DiagonalCrosshatch;
    public static ExcelPattern ThickDiagonalCrosshatch;
    public static ExcelPattern ThinHorizontalStripe;
    public static ExcelPattern ThinVerticalStripe;
    public static ExcelPattern ThinReverseDeagonalStripe;
    public static ExcelPattern ThinDiagonalStripe;
    public static ExcelPattern ThinHorizontalCrosshatch;
    public static ExcelPattern ThinDiagonalCrosshatch;
    public static ExcelPattern Percent125Gray;
    public static ExcelPattern Percent625Gray;
    public static ExcelPattern Gradient;
}
public enum Syncfusion.XlsIO.ExcelPieType : Enum {
    public int value__;
    public static ExcelPieType Normal;
    public static ExcelPieType Pie;
    public static ExcelPieType Bar;
}
public enum Syncfusion.XlsIO.ExcelPrintedChartSize : Enum {
    public int value__;
    public static ExcelPrintedChartSize Custom;
    public static ExcelPrintedChartSize ScaleToFitPage;
    public static ExcelPrintedChartSize UseFullPage;
}
public enum Syncfusion.XlsIO.ExcelPrintErrors : Enum {
    public int value__;
    public static ExcelPrintErrors PrintErrorsBlank;
    public static ExcelPrintErrors PrintErrorsDash;
    public static ExcelPrintErrors PrintErrorsDisplayed;
    public static ExcelPrintErrors PrintErrorsNA;
}
public enum Syncfusion.XlsIO.ExcelPrintLocation : Enum {
    public int value__;
    public static ExcelPrintLocation PrintInPlace;
    public static ExcelPrintLocation PrintNoComments;
    public static ExcelPrintLocation PrintSheetEnd;
}
public enum Syncfusion.XlsIO.ExcelQuartileCalculation : Enum {
    public byte value__;
    public static ExcelQuartileCalculation InclusiveMedian;
    public static ExcelQuartileCalculation ExclusiveMedian;
}
public enum Syncfusion.XlsIO.ExcelRangeIndexerMode : Enum {
    public int value__;
    public static ExcelRangeIndexerMode Worksheet;
    public static ExcelRangeIndexerMode Relative;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelReadingOrderType : Enum {
    public int value__;
    public static ExcelReadingOrderType Context;
    public static ExcelReadingOrderType LeftToRight;
    public static ExcelReadingOrderType RightToLeft;
}
public enum Syncfusion.XlsIO.ExcelRectangleStyle : Enum {
    public int value__;
    public static ExcelRectangleStyle Regular;
    public static ExcelRectangleStyle Shadowed;
}
public enum Syncfusion.XlsIO.ExcelSaveAsAccessMode : Enum {
    public int value__;
    public static ExcelSaveAsAccessMode Exclusive;
    public static ExcelSaveAsAccessMode NoChange;
    public static ExcelSaveAsAccessMode Shared;
}
public enum Syncfusion.XlsIO.ExcelSaveType : Enum {
    public int value__;
    public static ExcelSaveType SaveAsXLS;
    public static ExcelSaveType SaveAsTemplate;
    public static ExcelSaveType SaveAsODS;
    public static ExcelSaveType SaveAsMacro;
    public static ExcelSaveType SaveAsMacroTemplate;
    public static ExcelSaveType SaveAsXLSB;
}
public enum Syncfusion.XlsIO.ExcelSeriesNameLevel : Enum {
    public int value__;
    public static ExcelSeriesNameLevel SeriesNameLevelAll;
    public static ExcelSeriesNameLevel SeriesNameLevelNone;
}
public enum Syncfusion.XlsIO.ExcelShapeArrowLength : Enum {
    public int value__;
    public static ExcelShapeArrowLength ArrowHeadShort;
    public static ExcelShapeArrowLength ArrowHeadMedium;
    public static ExcelShapeArrowLength ArrowHeadLong;
}
public enum Syncfusion.XlsIO.ExcelShapeArrowStyle : Enum {
    public int value__;
    public static ExcelShapeArrowStyle LineNoArrow;
    public static ExcelShapeArrowStyle LineArrow;
    public static ExcelShapeArrowStyle LineArrowStealth;
    public static ExcelShapeArrowStyle LineArrowDiamond;
    public static ExcelShapeArrowStyle LineArrowOval;
    public static ExcelShapeArrowStyle LineArrowOpen;
}
public enum Syncfusion.XlsIO.ExcelShapeArrowWidth : Enum {
    public int value__;
    public static ExcelShapeArrowWidth ArrowHeadNarrow;
    public static ExcelShapeArrowWidth ArrowHeadMedium;
    public static ExcelShapeArrowWidth ArrowHeadWide;
}
public enum Syncfusion.XlsIO.ExcelShapeArrowWidthLength : Enum {
    public int value__;
    public static ExcelShapeArrowWidthLength ArrowNarrowShort;
    public static ExcelShapeArrowWidthLength ArrowNarrowMedium;
    public static ExcelShapeArrowWidthLength ArrowNarrowLong;
    public static ExcelShapeArrowWidthLength ArrowMediumShort;
    public static ExcelShapeArrowWidthLength ArrowMediumMedium;
    public static ExcelShapeArrowWidthLength ArrowMediumLong;
    public static ExcelShapeArrowWidthLength ArrowWideShort;
    public static ExcelShapeArrowWidthLength ArrowWideMedium;
    public static ExcelShapeArrowWidthLength ArrowWideLong;
}
public enum Syncfusion.XlsIO.ExcelShapeDashLineStyle : Enum {
    public int value__;
    public static ExcelShapeDashLineStyle Solid;
    public static ExcelShapeDashLineStyle Dotted;
    public static ExcelShapeDashLineStyle Dotted_Round;
    public static ExcelShapeDashLineStyle Dashed;
    public static ExcelShapeDashLineStyle Medium_Dashed;
    public static ExcelShapeDashLineStyle Dash_Dot;
    public static ExcelShapeDashLineStyle Medium_Dash_Dot;
    public static ExcelShapeDashLineStyle Dash_Dot_Dot;
}
public enum Syncfusion.XlsIO.ExcelShapeLineStyle : Enum {
    public int value__;
    public static ExcelShapeLineStyle Line_Single;
    public static ExcelShapeLineStyle Line_Thin_Thin;
    public static ExcelShapeLineStyle Line_Thin_Thick;
    public static ExcelShapeLineStyle Line_Thick_Thin;
    public static ExcelShapeLineStyle Line_Thick_Between_Thin;
}
public enum Syncfusion.XlsIO.ExcelShapeType : Enum {
    public int value__;
    public static ExcelShapeType AutoShape;
    public static ExcelShapeType Callout;
    public static ExcelShapeType Canvas;
    public static ExcelShapeType Chart;
    public static ExcelShapeType Comment;
    public static ExcelShapeType Diagram;
    public static ExcelShapeType EmbeddedOLEObject;
    public static ExcelShapeType FormControl;
    public static ExcelShapeType Freeform;
    public static ExcelShapeType Group;
    public static ExcelShapeType Line;
    public static ExcelShapeType LinkedOLEObject;
    public static ExcelShapeType LinkedPicture;
    public static ExcelShapeType Media;
    public static ExcelShapeType OLEControlObject;
    public static ExcelShapeType Picture;
    public static ExcelShapeType Placeholder;
    public static ExcelShapeType ScriptAnchor;
    public static ExcelShapeType ShapeTypeMixed;
    public static ExcelShapeType Table;
    public static ExcelShapeType TextBox;
    public static ExcelShapeType TextEffect;
    public static ExcelShapeType Unknown;
    public static ExcelShapeType CheckBox;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelSheetProtection : Enum {
    public int value__;
    public static ExcelSheetProtection None;
    public static ExcelSheetProtection Objects;
    public static ExcelSheetProtection Scenarios;
    public static ExcelSheetProtection FormattingCells;
    public static ExcelSheetProtection FormattingColumns;
    public static ExcelSheetProtection FormattingRows;
    public static ExcelSheetProtection InsertingColumns;
    public static ExcelSheetProtection InsertingRows;
    public static ExcelSheetProtection InsertingHyperlinks;
    public static ExcelSheetProtection DeletingColumns;
    public static ExcelSheetProtection DeletingRows;
    public static ExcelSheetProtection LockedCells;
    public static ExcelSheetProtection Sorting;
    public static ExcelSheetProtection Filtering;
    public static ExcelSheetProtection UsingPivotTables;
    public static ExcelSheetProtection UnLockedCells;
    public static ExcelSheetProtection Content;
    public static ExcelSheetProtection All;
}
public enum Syncfusion.XlsIO.ExcelSheetType : Enum {
    public int value__;
    public static ExcelSheetType Chart;
    public static ExcelSheetType DialogSheet;
    public static ExcelSheetType Excel4IntlMacroSheet;
    public static ExcelSheetType Excel4MacroSheet;
    public static ExcelSheetType Worksheet;
}
public enum Syncfusion.XlsIO.ExcelSlicerStyle : Enum {
    public int value__;
    public static ExcelSlicerStyle SlicerStyleLight1;
    public static ExcelSlicerStyle SlicerStyleLight2;
    public static ExcelSlicerStyle SlicerStyleLight3;
    public static ExcelSlicerStyle SlicerStyleLight4;
    public static ExcelSlicerStyle SlicerStyleLight5;
    public static ExcelSlicerStyle SlicerStyleLight6;
    public static ExcelSlicerStyle SlicerStyleOther1;
    public static ExcelSlicerStyle SlicerStyleOther2;
    public static ExcelSlicerStyle SlicerStyleDark1;
    public static ExcelSlicerStyle SlicerStyleDark2;
    public static ExcelSlicerStyle SlicerStyleDark3;
    public static ExcelSlicerStyle SlicerStyleDark4;
    public static ExcelSlicerStyle SlicerStyleDark5;
    public static ExcelSlicerStyle SlicerStyleDark6;
}
public enum Syncfusion.XlsIO.ExcelSplitType : Enum {
    public int value__;
    public static ExcelSplitType Position;
    public static ExcelSplitType Value;
    public static ExcelSplitType Percent;
    public static ExcelSplitType Custom;
}
public enum Syncfusion.XlsIO.ExcelStyleMergeOptions : Enum {
    public int value__;
    public static ExcelStyleMergeOptions Leave;
    public static ExcelStyleMergeOptions Replace;
    public static ExcelStyleMergeOptions CreateDiffName;
}
public enum Syncfusion.XlsIO.ExcelTableStyleElementType : Enum {
    public int value__;
    public static ExcelTableStyleElementType WholeTable;
    public static ExcelTableStyleElementType FirstColumnStripe;
    public static ExcelTableStyleElementType SecondColumnStripe;
    public static ExcelTableStyleElementType FirstRowStripe;
    public static ExcelTableStyleElementType SecondRowStripe;
    public static ExcelTableStyleElementType FirstColumn;
    public static ExcelTableStyleElementType LastColumn;
    public static ExcelTableStyleElementType HeaderRow;
    public static ExcelTableStyleElementType TotalRow;
    public static ExcelTableStyleElementType FirstHeaderCell;
    public static ExcelTableStyleElementType LastHeaderCell;
    public static ExcelTableStyleElementType FirstTotalCell;
    public static ExcelTableStyleElementType LastTotalCell;
}
public enum Syncfusion.XlsIO.ExcelTableType : Enum {
    public int value__;
    public static ExcelTableType queryTable;
    public static ExcelTableType worksheet;
    public static ExcelTableType xml;
}
public enum Syncfusion.XlsIO.ExcelTextRotation : Enum {
    public int value__;
    public static ExcelTextRotation LeftToRight;
    public static ExcelTextRotation TopToBottom;
    public static ExcelTextRotation CounterClockwise;
    public static ExcelTextRotation Clockwise;
}
public enum Syncfusion.XlsIO.ExcelTexture : Enum {
    public int value__;
    public static ExcelTexture Newsprint;
    public static ExcelTexture Recycled_Paper;
    public static ExcelTexture Parchment;
    public static ExcelTexture Stationery;
    public static ExcelTexture Green_Marble;
    public static ExcelTexture White_Marble;
    public static ExcelTexture Brown_Marble;
    public static ExcelTexture Granite;
    public static ExcelTexture Blue_Tissue_Paper;
    public static ExcelTexture Pink_Tissue_Paper;
    public static ExcelTexture Purple_Mesh;
    public static ExcelTexture Bouquet;
    public static ExcelTexture Papyrus;
    public static ExcelTexture Canvas;
    public static ExcelTexture Denim;
    public static ExcelTexture Woven_Mat;
    public static ExcelTexture Water_Droplets;
    public static ExcelTexture Paper_Bag;
    public static ExcelTexture Fish_Fossil;
    public static ExcelTexture Sand;
    public static ExcelTexture Cork;
    public static ExcelTexture Walnut;
    public static ExcelTexture Oak;
    public static ExcelTexture Medium_Wood;
    public static ExcelTexture User_Defined;
}
public enum Syncfusion.XlsIO.ExcelTickLabelPosition : Enum {
    public int value__;
    public static ExcelTickLabelPosition TickLabelPosition_None;
    public static ExcelTickLabelPosition TickLabelPosition_Low;
    public static ExcelTickLabelPosition TickLabelPosition_High;
    public static ExcelTickLabelPosition TickLabelPosition_NextToAxis;
}
public enum Syncfusion.XlsIO.ExcelTickMark : Enum {
    public int value__;
    public static ExcelTickMark TickMark_None;
    public static ExcelTickMark TickMark_Inside;
    public static ExcelTickMark TickMark_Outside;
    public static ExcelTickMark TickMark_Cross;
}
public enum Syncfusion.XlsIO.ExcelTopFormat : Enum {
    public int value__;
    public static ExcelTopFormat Straight;
    public static ExcelTopFormat Sharp;
    public static ExcelTopFormat Trunc;
}
public enum Syncfusion.XlsIO.ExcelTotalsCalculation : Enum {
    public int value__;
    public static ExcelTotalsCalculation None;
    public static ExcelTotalsCalculation Sum;
    public static ExcelTotalsCalculation Average;
    public static ExcelTotalsCalculation Count;
    public static ExcelTotalsCalculation CountNums;
    public static ExcelTotalsCalculation Min;
    public static ExcelTotalsCalculation StdDev;
    public static ExcelTotalsCalculation Var;
    public static ExcelTotalsCalculation Max;
    public static ExcelTotalsCalculation Custom;
}
public enum Syncfusion.XlsIO.ExcelTreeMapLabelOption : Enum {
    public int value__;
    public static ExcelTreeMapLabelOption None;
    public static ExcelTreeMapLabelOption Banner;
    public static ExcelTreeMapLabelOption Overlapping;
}
public enum Syncfusion.XlsIO.ExcelTrendLineType : Enum {
    public int value__;
    public static ExcelTrendLineType Exponential;
    public static ExcelTrendLineType Linear;
    public static ExcelTrendLineType Logarithmic;
    public static ExcelTrendLineType Moving_Average;
    public static ExcelTrendLineType Polynomial;
    public static ExcelTrendLineType Power;
}
public enum Syncfusion.XlsIO.ExcelUnderline : Enum {
    public int value__;
    public static ExcelUnderline None;
    public static ExcelUnderline Single;
    public static ExcelUnderline Double;
    public static ExcelUnderline SingleAccounting;
    public static ExcelUnderline DoubleAccounting;
}
public enum Syncfusion.XlsIO.ExcelVAlign : Enum {
    public int value__;
    public static ExcelVAlign VAlignTop;
    public static ExcelVAlign VAlignCenter;
    public static ExcelVAlign VAlignBottom;
    public static ExcelVAlign VAlignJustify;
    public static ExcelVAlign VAlignDistributed;
}
public enum Syncfusion.XlsIO.ExcelVersion : Enum {
    public int value__;
    public static ExcelVersion Excel97to2003;
    public static ExcelVersion Excel2007;
    public static ExcelVersion Excel2010;
    public static ExcelVersion Excel2013;
    public static ExcelVersion Excel2016;
    public static ExcelVersion Xlsx;
}
public enum Syncfusion.XlsIO.ExcelVerticalAlignment : Enum {
    public int value__;
    public static ExcelVerticalAlignment Top;
    public static ExcelVerticalAlignment Middle;
    public static ExcelVerticalAlignment Bottom;
    public static ExcelVerticalAlignment TopCentered;
    public static ExcelVerticalAlignment MiddleCentered;
    public static ExcelVerticalAlignment BottomCentered;
}
public class Syncfusion.XlsIO.ExcelWorkbookNotSavedException : ApplicationException {
    public ExcelWorkbookNotSavedException(string message);
    public ExcelWorkbookNotSavedException(string message, Exception innerException);
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExcelWorksheetCopyFlags : Enum {
    public int value__;
    public static ExcelWorksheetCopyFlags None;
    public static ExcelWorksheetCopyFlags ClearBefore;
    public static ExcelWorksheetCopyFlags CopyNames;
    public static ExcelWorksheetCopyFlags CopyCells;
    public static ExcelWorksheetCopyFlags CopyRowHeight;
    public static ExcelWorksheetCopyFlags CopyColumnHeight;
    public static ExcelWorksheetCopyFlags CopyOptions;
    public static ExcelWorksheetCopyFlags CopyMerges;
    public static ExcelWorksheetCopyFlags CopyShapes;
    public static ExcelWorksheetCopyFlags CopyConditionlFormats;
    public static ExcelWorksheetCopyFlags CopyAutoFilters;
    public static ExcelWorksheetCopyFlags CopyDataValidations;
    public static ExcelWorksheetCopyFlags CopyPageSetup;
    public static ExcelWorksheetCopyFlags CopyTables;
    public static ExcelWorksheetCopyFlags CopyPivotTables;
    public static ExcelWorksheetCopyFlags CopyPalette;
    public static ExcelWorksheetCopyFlags CopyAll;
    public static ExcelWorksheetCopyFlags CopyWithoutNames;
}
public enum Syncfusion.XlsIO.ExcelXmlOpenType : Enum {
    public int value__;
    public static ExcelXmlOpenType MSExcel;
}
public enum Syncfusion.XlsIO.ExcelXmlSaveType : Enum {
    public int value__;
    public static ExcelXmlSaveType MSExcel;
    public static ExcelXmlSaveType DLS;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.ExpandCollapseFlags : Enum {
    public int value__;
    public static ExpandCollapseFlags Default;
    public static ExpandCollapseFlags IncludeSubgroups;
    public static ExpandCollapseFlags ExpandParent;
}
public enum Syncfusion.XlsIO.ExportDataTableActions : Enum {
    public int value__;
    public static ExportDataTableActions Default;
    public static ExportDataTableActions StopExporting;
    public static ExportDataTableActions SkipRow;
}
public class Syncfusion.XlsIO.ExportEventArgs : EventArgs {
    private IRange m_Range;
    private string m_errorMessage;
    private string m_Property;
    private object m_newValue;
    private object m_currentValue;
    private Type m_propertyType;
    private string m_cellValueType;
    private int m_index;
    public IRange Range { get; }
    public string ErrorMessage { get; }
    public string Property { get; }
    public object NewValue { get; public set; }
    public object CurrentValue { get; }
    public Type PropertyType { get; }
    public string CellValueType { get; }
    public int Index { get; }
    public ExportEventArgs(IRange range, string error, string errorProp, object cellValue, Type propertyType, string cellValueType, int rowRecordIndex);
    public IRange get_Range();
    public string get_ErrorMessage();
    public string get_Property();
    public object get_NewValue();
    public void set_NewValue(object value);
    public object get_CurrentValue();
    public Type get_PropertyType();
    public string get_CellValueType();
    public int get_Index();
}
public class Syncfusion.XlsIO.ExportEventHandler : MulticastDelegate {
    public ExportEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ExportEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ExportEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Syncfusion.XlsIO.ExportImageFormat : Enum {
    public int value__;
    public static ExportImageFormat Jpeg;
    public static ExportImageFormat Png;
}
public class Syncfusion.XlsIO.ExportImageOptions : object {
    private ExportImageFormat m_imageFormat;
    private ScalingMode m_scalingMode;
    private static ExportImageOptions m_default;
    public ExportImageFormat ImageFormat { get; public set; }
    public ScalingMode ScalingMode { get; public set; }
    internal static ExportImageOptions Default { get; }
    public ExportImageFormat get_ImageFormat();
    public void set_ImageFormat(ExportImageFormat value);
    public ScalingMode get_ScalingMode();
    public void set_ScalingMode(ScalingMode value);
    internal static ExportImageOptions get_Default();
}
public enum Syncfusion.XlsIO.FilterOperator : Enum {
    public int value__;
    public static FilterOperator equal;
    public static FilterOperator greaterThan;
    public static FilterOperator greaterThanOrEqual;
    public static FilterOperator lessThan;
    public static FilterOperator lessThanOrEqual;
    public static FilterOperator notEqual;
}
public enum Syncfusion.XlsIO.FilterOperator2007 : Enum {
    public int value__;
    public static FilterOperator2007 Equal;
    public static FilterOperator2007 GreaterThan;
    public static FilterOperator2007 GreaterThanOrEqual;
    public static FilterOperator2007 LessThan;
    public static FilterOperator2007 LessThanOrEqual;
    public static FilterOperator2007 NotEqual;
}
internal enum Syncfusion.XlsIO.FontCollectionIndex : Enum {
    public byte value__;
    public static FontCollectionIndex none;
    public static FontCollectionIndex minor;
    public static FontCollectionIndex major;
}
public enum Syncfusion.XlsIO.FontScheme : Enum {
    public int value__;
    public static FontScheme None;
    public static FontScheme MajorScheme;
    public static FontScheme MinorScheme;
    public static FontScheme Niched;
}
public class Syncfusion.XlsIO.FormatParser.FormatParserImpl : CommonObject {
    private List`1<FormatTokenBase> m_arrFormatTokens;
    internal static Regex NumberFormatRegex;
    internal static string DEF_EXPONENTIAL;
    private static string DEF_HASH;
    public FormatParserImpl(IApplication application, object parent);
    private static FormatParserImpl();
    public FormatSectionCollection Parse(string strFormat);
    internal void Clear();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.FormatParser.FormatSection : CommonObject {
    private static Object[] DEF_POSSIBLE_TOKENS;
    private static TokenType[] DEF_BREAK_HOUR;
    private static TokenType[] DEF_BREAK_SECOND;
    private static int DEF_NOTFOUND_INDEX;
    private static TokenType[] DEF_MILLISECONDTOKENS;
    private static string DEF_THOUSAND_SEPARATOR;
    private static string DEF_MINUS;
    private static int DEF_ROUNDOFF_DIGIT;
    private static char DEF_FRACTION_TOKEN;
    private static int DEF_MONTHTOKEN_LENGTH;
    private static TokenType[] NotTimeTokens;
    private static TokenType[] NotDateTokens;
    private List`1<FormatTokenBase> m_arrTokens;
    private bool m_bFormatPrepared;
    private int m_iDecimalPointPos;
    private int m_iScientificPos;
    private int m_iLastDigit;
    private bool m_bLastGroups;
    private int m_iNumberOfFractionDigits;
    private int m_iNumberOfIntegerDigits;
    private int m_significantDigits;
    private int m_exponentDigits;
    private int m_iFractionPos;
    private bool m_bFraction;
    private int m_iFractionStart;
    private int m_iFractionEnd;
    private int m_iDenumaratorLen;
    private int m_iNumneratorLen;
    private int m_fractionBase;
    private int m_iIntegerEnd;
    private int m_iDecimalEnd;
    private ConditionToken m_condition;
    private CultureToken m_culture;
    private ExcelFormatType m_formatType;
    private bool m_bGroupDigits;
    private bool m_bMultiplePoints;
    private bool m_bUseSystemDateFormat;
    private bool m_bUseSystemTimeFormat;
    private bool m_isMilliSecondFormatValue;
    internal bool IsTimeFormat { get; }
    internal bool IsDateFormat { get; }
    public FormatTokenBase Item { get; }
    public int Count { get; }
    public bool HasCondition { get; }
    public ExcelFormatType FormatType { get; }
    public CultureInfo Culture { get; }
    public bool IsFraction { get; }
    public bool IsScientific { get; }
    internal bool IsMilliSecondFormatValue { get; internal set; }
    public bool IsThousandSeparator { get; }
    public int DecimalNumber { get; }
    internal int NumeratorLen { get; internal set; }
    internal int DenumaratorLen { get; }
    internal int FractionBase { get; }
    internal int SignificantDigits { get; }
    internal int ExponentDigits { get; }
    private FormatSection(IApplication application, object parent);
    public FormatSection(IApplication application, object parent, List`1<FormatTokenBase> arrTokens);
    private static FormatSection();
    public void PrepareFormat();
    private bool CheckGroupDigits();
    private void PreparePositions();
    private void PrepareInsignificantDigits();
    public HourToken FindCorrespondingHourSection(int index);
    public string ApplyFormat(double value);
    public string ApplyFormat(string value);
    private string UpdateDayofWeek(double value);
    public string ApplyFormat(double value, bool bShowReservedSymbols);
    internal string ApplyFormat(double value, bool bShowReservedSymbols, RangeImpl cell);
    internal string ApplyRoundOffNumber(string strResult, RangeImpl cell);
    private string GetFractionBase();
    private string UpdateFormat(string strResult);
    private string FillFractionFormat(string strResult);
    private double Round(double value, double dValue, double fractionSize);
    private void PrepareDigits(int startPos, int count, bool IsCenterDigit);
    public string ApplyFormat(string value, bool bShowReservedSymbols);
    private void AssignPosition(Int32& iToAssign, int iCurrentPos);
    private string ApplyFormat(double value, bool bShowReservedSymbols, int iStartToken, int iEndToken, bool bForward);
    private string ApplyFormat(double value, bool bShowReservedSymbols, int iStartToken, int iEndToken, bool bForward, bool bGroupDigits, bool bAddNegativeSign);
    private StringBuilder UpdateThousandSeparator(StringBuilder builder);
    private int ApplyDigit(DigitToken digit, int iIndex, int iStart, Double& value, int iDigitCounter, StringBuilder builder, bool bForward, bool bShowHiddenSymbols, bool bGroupDigits, Int32& iSplitDigit);
    private int ApplySingleDigit(int iIndex, int iStart, int iDigitCounter, string strTokenResult, StringBuilder builder, bool bForward, bool bGroupDigits, Int32& iSplitDigit);
    private void AddToBuilder(StringBuilder builder, bool bForward, string strValue);
    private bool CheckCondition(int iEndToken, bool bForward, int iPos);
    private int LocateLastFractionDigit();
    private bool LocateLastGroups(int iStartIndex);
    private void ApplyLastGroups(Double& value, bool bShowReservedSymbols);
    private void PrepareValue(Double& value, bool bShowReservedSymbols);
    private int CalculateFractionDigits();
    private int CalculateIntegerDigits();
    private int CalculateODSIntegers();
    private int CalculateSignificantDigits(int iStartIndex, int iEndIndex);
    private int CalculateDigits(int iStartIndex, int iEndIndex);
    private void LocateFractionParts();
    private int GetDigitGroupStart(int iStartPos, bool bForward);
    private bool IsAnyDigit(int iStartIndex, int iEndIndex);
    private bool IsSignificantDigit(int iStartIndex, int iEndIndex);
    public bool CheckCondition(double value);
    private void DetectFormatType();
    private bool CheckTokenTypes(TokenType[] arrPossibleTokens);
    private void CheckMinuteToken(int iTokenIndex);
    private int FindTimeToken(int iTokenIndex, TokenType[] arrBreakTypes, bool bForward, TokenType[] arrTypes);
    private void SetRoundSeconds();
    internal bool get_IsTimeFormat();
    private string ToLongDateString(double value);
    internal bool get_IsDateFormat();
    public FormatTokenBase get_Item(int index);
    public int get_Count();
    public bool get_HasCondition();
    public ExcelFormatType get_FormatType();
    public CultureInfo get_Culture();
    public bool get_IsFraction();
    public bool get_IsScientific();
    internal bool get_IsMilliSecondFormatValue();
    internal void set_IsMilliSecondFormatValue(bool value);
    public bool get_IsThousandSeparator();
    public int get_DecimalNumber();
    internal int get_NumeratorLen();
    internal void set_NumeratorLen(int value);
    internal int get_DenumaratorLen();
    internal int get_FractionBase();
    internal int get_SignificantDigits();
    internal int get_ExponentDigits();
    private static bool ContainsIn(TokenType[] arrPossibleTokens, TokenType token);
    private static double SplitValue(double value, Double& dFraction);
    internal static double Round(double value);
    public object Clone(object parent);
    internal void Clear();
}
public class Syncfusion.XlsIO.FormatParser.FormatSectionCollection : CollectionBaseEx`1<FormatSection> {
    private static string DEF_TWO_MANY_SECTIONS_MESSAGE;
    private static int DEF_CONDITION_MAX_COUNT;
    private static int DEF_NONCONDITION_MAX_COUNT;
    private static int DEF_POSITIVE_SECTION;
    private static int DEF_NEGATIVE_SECTION;
    private static int DEF_ZERO_SECTION;
    private static int DEF_TEXT_SECTION;
    private bool m_bConditionalFormat;
    private FormatSectionCollection(IApplication application, object parent);
    public FormatSectionCollection(IApplication application, object parent, List`1<FormatTokenBase> arrTokens);
    public ExcelFormatType GetFormatType(double value);
    public ExcelFormatType GetFormatType(string value);
    private void Parse(List`1<FormatTokenBase> arrTokens);
    public string ApplyFormat(double value, bool bShowReservedSymbols);
    internal string ApplyFormat(double value, bool bShowReservedSymbols, RangeImpl cell);
    public string ApplyFormat(string value, bool bShowReservedSymbols);
    private FormatSection GetSection(int iSectionIndex);
    private FormatSection GetSection(double value);
    private FormatSection GetZeroSection();
    private FormatSection GetTextSection();
    internal bool IsTimeFormat(double value);
    internal bool IsDateFormat(double value);
    private bool HasDateTimeFormat();
    public virtual object Clone(object parent);
    internal void Dispose();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.AmPmToken : FormatTokenBase {
    private static string DefaultStart2;
    private static string DEF_START;
    private static int DEF_LENGTH;
    private static int DEF_AMPM_EDGE;
    private static string DEF_AM;
    private static string DEF_PM;
    public TokenType TokenType { get; }
    private static AmPmToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    internal static string CheckAndApplyAMPM(string format);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.AsterixToken : FormatTokenBase {
    private static char DEF_START;
    public TokenType TokenType { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.CharacterToken : FormatTokenBase {
    private static char DEF_START;
    private static char DEF_FORMAT_CHAR;
    public TokenType TokenType { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.ColorToken : InBracketToken {
    private static Regex ColorRegex;
    private static String[] DEF_KNOWN_COLORS;
    private static string DEF_COLOR;
    private static int DEF_MIN_COLOR_INDEX;
    private static int DEF_MAX_COLOR_INDEX;
    private static int DEF_COLOR_INCREMENT;
    private int m_iColorIndex;
    public TokenType TokenType { get; }
    private static ColorToken();
    public virtual int TryParse(string strFormat, int iStartIndex, int iIndex, int iEndIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    private int FindColor(string strFormat, int iIndex);
    private int TryDetectColorNumber(string strFormat, int iIndex, int iEndIndex);
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.ConditionToken : InBracketToken {
    private static String[] CompareOperationStrings;
    private double m_dCompareNumber;
    private CompareOperation m_operation;
    public TokenType TokenType { get; }
    private static ConditionToken();
    public virtual int TryParse(string strFormat, int iStartIndex, int iIndex, int iEndIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    public bool CheckCondition(double value);
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.CultureToken : FormatTokenBase {
    private static string DEF_LOCALE_GROUP;
    private static string DEF_CHAR_GROUP;
    private static int SystemSettingsLocaleId;
    private static int SystemSettingsTimeLocaleId;
    internal static Regex CultureRegex;
    private int m_iLocaleId;
    private string m_strCharacter;
    public TokenType TokenType { get; }
    public CultureInfo Culture { get; }
    public bool UseSystemSettings { get; }
    internal bool UseSystemTimeSettings { get; }
    private static CultureToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    public CultureInfo get_Culture();
    public bool get_UseSystemSettings();
    internal bool get_UseSystemTimeSettings();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.DayToken : FormatTokenBase {
    private static Regex DayRegex;
    private string m_strFormatLower;
    public TokenType TokenType { get; }
    private static DayToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.DecimalPointToken : SingleCharToken {
    private static char DEF_FORMAT;
    public char FormatChar { get; }
    public TokenType TokenType { get; }
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual char get_FormatChar();
    public virtual TokenType get_TokenType();
}
public abstract class Syncfusion.XlsIO.FormatParser.FormatTokens.DigitToken : SingleCharToken {
    private bool m_bLastDigit;
    private bool m_bCenterDigit;
    private double m_originalValue;
    private static int DEF_MAX_NUMBER_DIGIT;
    public bool IsLastDigit { get; public set; }
    public bool IsCenterDigit { get; internal set; }
    internal double OriginalValue { get; internal set; }
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    private void GetIndexOfZero(double value, int iDigit);
    private bool CheckIsZeroes(int startIndex, int lastIndex, string p);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public bool get_IsLastDigit();
    public void set_IsLastDigit(bool value);
    public bool get_IsCenterDigit();
    internal void set_IsCenterDigit(bool value);
    internal double get_OriginalValue();
    internal void set_OriginalValue(double value);
    protected internal int GetDigit(Double& value);
    internal int GetExponentialString(double value);
    protected internal virtual string GetDigitString(double value, int iDigit, bool bShowHiddenSymbols);
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.DollarToken : FormatTokenBase {
    private static char DEF_START;
    private static char DEF_END;
    private static char DEF_DOLLAR;
    private static char DEF_HYPEN;
    public TokenType TokenType { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.FormatConstants : object {
    public static int HoursInDay;
    public static int MinutesInHour;
    public static int MinutesInDay;
    public static int SecondsInMinute;
    public static int SecondsInDay;
}
public abstract class Syncfusion.XlsIO.FormatParser.FormatTokens.FormatTokenBase : object {
    protected static RegexOptions DEF_OPTIONS;
    protected string m_strFormat;
    public string Format { get; public set; }
    public TokenType TokenType { get; }
    public abstract virtual int TryParse(string strFormat, int iIndex);
    protected int TryParseRegex(Regex regex, string strFormat, int iIndex);
    protected int TryParseRegex(Regex regex, string strFormat, int iIndex, Match& m);
    public virtual string ApplyFormat(Double& value);
    public abstract virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual string ApplyFormat(string value);
    public sealed virtual object Clone();
    public abstract virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public string get_Format();
    public void set_Format(string value);
    public abstract virtual TokenType get_TokenType();
    public int FindString(String[] arrStrings, string strFormat, int iIndex, bool bIgnoreCase);
    protected virtual void OnFormatChange();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.FractionToken : SingleCharToken {
    private static char DEF_FORMAT_CHAR;
    public char FormatChar { get; }
    public TokenType TokenType { get; }
    public virtual char get_FormatChar();
    public virtual TokenType get_TokenType();
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.GeneralToken : FormatTokenBase {
    private static string DEF_FORMAT;
    public TokenType TokenType { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.Hour24Token : FormatTokenBase {
    private static Regex HourRegex;
    public TokenType TokenType { get; }
    private static Hour24Token();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.HourToken : FormatTokenBase {
    private static Regex HourRegex;
    private static string DEF_FORMAT;
    private static string DEF_FORMAT_LONG;
    private bool m_bAmPm;
    public TokenType TokenType { get; }
    public bool IsAmPm { get; public set; }
    private static HourToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    public bool get_IsAmPm();
    public void set_IsAmPm(bool value);
}
public abstract class Syncfusion.XlsIO.FormatParser.FormatTokens.InBracketToken : FormatTokenBase {
    private static char DEF_START;
    private static char DEF_END;
    public virtual int TryParse(string strFormat, int iIndex);
    public abstract virtual int TryParse(string strFormat, int iStartIndex, int iIndex, int iEndIndex);
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.InsignificantDigitToken : DigitToken {
    private static char DEF_FORMAT_CHAR;
    private bool m_bHideIfZero;
    public TokenType TokenType { get; }
    public char FormatChar { get; }
    public bool HideIfZero { get; public set; }
    protected internal virtual string GetDigitString(double value, int iDigit, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    public virtual char get_FormatChar();
    public bool get_HideIfZero();
    public void set_HideIfZero(bool value);
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.MilliSecondToken : FormatTokenBase {
    private static string DEF_FORMAT_LONG;
    private static int DEF_MAX_LEN;
    private static string DEF_DOT;
    private static double DEF_OLE_DOUBLE;
    private static double DEF_MAX_DOUBLE;
    public TokenType TokenType { get; }
    private static MilliSecondToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.MinuteToken : FormatTokenBase {
    private static Regex MinuteRegex;
    private static string DEF_FORMAT_LONG;
    private static double DEF_OLE_DOUBLE;
    private static double DEF_MAX_DOUBLE;
    public TokenType TokenType { get; }
    private static MinuteToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    protected virtual void OnFormatChange();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.MinuteTotalToken : FormatTokenBase {
    private static Regex HourRegex;
    public TokenType TokenType { get; }
    private static MinuteTotalToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.MonthToken : FormatTokenBase {
    private static Regex MonthRegex;
    private static string DEF_FORMAT_SHORT;
    private static int DEF_FULL_NAME_LENGTH;
    private static int DEF_SHORT_NAME_LENGTH;
    private static int DEF_LONG_NUMBER_LENGTH;
    private static string DEF_LONG_NUMBER_FORMAT;
    public TokenType TokenType { get; }
    private static MonthToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    protected virtual void OnFormatChange();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.PercentToken : SingleCharToken {
    private static char DEF_FORMAT_CHAR;
    public TokenType TokenType { get; }
    public char FormatChar { get; }
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    public virtual char get_FormatChar();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.PlaceReservedDigitToken : DigitToken {
    private static char DEF_FORMAT_CHAR;
    private static string DEF_EMPTY_DIGIT;
    public TokenType TokenType { get; }
    public char FormatChar { get; }
    protected internal virtual string GetDigitString(double value, int iDigit, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    public virtual char get_FormatChar();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.ReservedPlaceToken : FormatTokenBase {
    private static char DEF_START;
    private static string DEF_SPACE;
    private static string DEF_EN_QUAD_SPACE;
    public TokenType TokenType { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.ScientificToken : FormatTokenBase {
    private static String[] PossibleFormats;
    private static string DEF_SHORT_FORM;
    private int m_iFormatIndex;
    public TokenType TokenType { get; }
    private static ScientificToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.SecondToken : FormatTokenBase {
    private static Regex SecondRegex;
    internal static string DEF_FORMAT_LONG;
    internal static int DEF_MILLISECOND_HALF;
    private static double DEF_OLE_DOUBLE;
    private static double DEF_MAX_DOUBLE;
    private bool m_bRound;
    public TokenType TokenType { get; }
    public bool RoundValue { get; public set; }
    private static SecondToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    public bool get_RoundValue();
    public void set_RoundValue(bool value);
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.SecondTotalToken : FormatTokenBase {
    private static Regex HourRegex;
    public TokenType TokenType { get; }
    private static SecondTotalToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.SectionSeparatorToken : FormatTokenBase {
    private static string DEF_SEPARATOR;
    public TokenType TokenType { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.SignificantDigitToken : DigitToken {
    private static char DEF_FORMAT_CHAR;
    public TokenType TokenType { get; }
    public char FormatChar { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual TokenType get_TokenType();
    public virtual char get_FormatChar();
}
public abstract class Syncfusion.XlsIO.FormatParser.FormatTokens.SingleCharToken : FormatTokenBase {
    public char FormatChar { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public abstract virtual char get_FormatChar();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.StringToken : FormatTokenBase {
    private static Regex DayRegex;
    public TokenType TokenType { get; }
    private static StringToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.TextToken : SingleCharToken {
    private static char DEF_FORMAT_CHAR;
    public TokenType TokenType { get; }
    public char FormatChar { get; }
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
    public virtual char get_FormatChar();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.ThousandsSeparatorToken : SingleCharToken {
    private static char DEF_FORMAT;
    private bool m_bAfterDigits;
    public char FormatChar { get; }
    public TokenType TokenType { get; }
    public bool IsAfterDigits { get; public set; }
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual char get_FormatChar();
    public virtual TokenType get_TokenType();
    public bool get_IsAfterDigits();
    public void set_IsAfterDigits(bool value);
    public double PreprocessValue(double value);
}
public enum Syncfusion.XlsIO.FormatParser.FormatTokens.TokenType : Enum {
    public int value__;
    public static TokenType Unknown;
    public static TokenType Section;
    public static TokenType Hour;
    public static TokenType Hour24;
    public static TokenType Minute;
    public static TokenType MinuteTotal;
    public static TokenType Second;
    public static TokenType SecondTotal;
    public static TokenType Year;
    public static TokenType Month;
    public static TokenType Day;
    public static TokenType String;
    public static TokenType ReservedPlace;
    public static TokenType Character;
    public static TokenType AmPm;
    public static TokenType Color;
    public static TokenType Condition;
    public static TokenType Text;
    public static TokenType SignificantDigit;
    public static TokenType InsignificantDigit;
    public static TokenType PlaceReservedDigit;
    public static TokenType Percent;
    public static TokenType Scientific;
    public static TokenType General;
    public static TokenType ThousandsSeparator;
    public static TokenType DecimalPoint;
    public static TokenType Asterix;
    public static TokenType Fraction;
    public static TokenType MilliSecond;
    public static TokenType Culture;
    public static TokenType Dollar;
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.UnknownToken : FormatTokenBase {
    public TokenType TokenType { get; }
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.FormatTokens.YearToken : FormatTokenBase {
    private static Regex YearRegex;
    private static string DEF_FORMAT_SHORT;
    public TokenType TokenType { get; }
    private static YearToken();
    public virtual int TryParse(string strFormat, int iIndex);
    public virtual string ApplyFormat(Double& value, bool bShowHiddenSymbols, CultureInfo culture, FormatSection section);
    public virtual string ApplyFormat(string value, bool bShowHiddenSymbols);
    public virtual TokenType get_TokenType();
}
public class Syncfusion.XlsIO.FormatParser.Fraction : object {
    private static int DEF_MAX_DIGITS;
    private static double DEF_EPS;
    private double m_dNumerator;
    private double m_dDenumerator;
    public double Numerator { get; public set; }
    public double Denumerator { get; public set; }
    public int DenumeratorLen { get; }
    public Fraction(double dNumerator, double dDenumerator);
    public Fraction(double dNumerator);
    public double get_Numerator();
    public void set_Numerator(double value);
    public double get_Denumerator();
    public void set_Denumerator(double value);
    public int get_DenumeratorLen();
    public static Fraction op_Addition(Fraction term1, Fraction term2);
    public static double op_Explicit(Fraction fraction);
    public static Fraction op_Explicit(List`1<double> arrFraction);
    public static Fraction op_Explicit(double dValue);
    public Fraction Reverse();
    public static Fraction ConvertToFraction(double value, int iDigitsNumber);
    private static double GetMaximumCommonDevisor(double dNumerator, double dDenumerator);
    private static double GetDelta(Fraction fraction, double value);
    private static double AddNextNumber(List`1<double> arrFraction, double dLeft);
    public virtual string ToString();
}
internal enum Syncfusion.XlsIO.GrowShrinkType : Enum {
    public int value__;
    public static GrowShrinkType insertDelete;
    public static GrowShrinkType insertClear;
    public static GrowShrinkType overwriteClear;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.HtmlImportOptions : Enum {
    public int value__;
    public static HtmlImportOptions Default;
    public static HtmlImportOptions DetectFormulas;
}
public interface Syncfusion.XlsIO.IAboveBelowAverage {
    public ExcelCFAverageType AverageType { get; public set; }
    public int StdDevValue { get; public set; }
    public abstract virtual ExcelCFAverageType get_AverageType();
    public abstract virtual void set_AverageType(ExcelCFAverageType value);
    public abstract virtual int get_StdDevValue();
    public abstract virtual void set_StdDevValue(int value);
}
public interface Syncfusion.XlsIO.IAddInFunction {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IAddInFunctions {
    public IAddInFunction Item { get; }
    public int Count { get; }
    public abstract virtual IAddInFunction get_Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual int Add(string strFunctionName);
}
public interface Syncfusion.XlsIO.IApplication {
    public bool UseStringDelimiter { get; public set; }
    public IRange ActiveCell { get; }
    public IWorksheet ActiveSheet { get; }
    public IWorkbook ActiveWorkbook { get; }
    public IWorkbooks Workbooks { get; }
    public IWorksheets Worksheets { get; }
    public IRange Range { get; }
    public bool FixedDecimal { get; public set; }
    public bool IgnoreSheetNameException { get; public set; }
    public bool UseSystemSeparators { get; public set; }
    public int Build { get; }
    public int FixedDecimalPlaces { get; public set; }
    public int SheetsInNewWorkbook { get; public set; }
    public string DecimalSeparator { get; public set; }
    public string ThousandsSeparator { get; public set; }
    public string UserName { get; public set; }
    public string Value { get; }
    public bool ChangeStyleOnCellEdit { get; public set; }
    public SkipExtRecords SkipOnSave { get; public set; }
    public double StandardHeight { get; public set; }
    public bool StandardHeightFlag { get; public set; }
    public double StandardWidth { get; public set; }
    public bool OptimizeFonts { get; public set; }
    public bool OptimizeImport { get; public set; }
    public char RowSeparator { get; public set; }
    public char ArgumentsSeparator { get; public set; }
    public string CSVSeparator { get; public set; }
    public string CsvQualifier { get; public set; }
    public string CsvRecordDelimiter { get; public set; }
    public string StandardFont { get; public set; }
    public double StandardFontSize { get; public set; }
    [ObsoleteAttribute("Use DataProviderType property instead")]
public bool UseNativeOptimization { get; public set; }
    public bool UseFastRecordParsing { get; public set; }
    public int RowStorageAllocationBlockSize { get; public set; }
    public bool DeleteDestinationFile { get; public set; }
    public ExcelVersion DefaultVersion { get; public set; }
    public bool UseNativeStorage { get; public set; }
    public ExcelDataProviderType DataProviderType { get; public set; }
    public Nullable`1<CompressionLevel> CompressionLevel { get; public set; }
    public bool PreserveCSVDataTypes { get; public set; }
    public IXlsIORenderer XlsIORenderer { get; public set; }
    public bool IsChartCacheEnabled { get; public set; }
    public bool EnableIncrementalFormula { get; public set; }
    public bool UpdateSheetFormulaReference { get; public set; }
    public bool EnablePartialTrustCode { get; public set; }
    public ExcelRangeIndexerMode RangeIndexerMode { get; public set; }
    public bool SkipAutoFitRow { get; public set; }
    public bool ExcludeAdditionalCharacters { get; public set; }
    public int MaximumRowsForCsv { get; public set; }
    public int MaximumColumnsForCsv { get; public set; }
    public FallbackFonts FallbackFonts { get; }
    public abstract virtual bool get_UseStringDelimiter();
    public abstract virtual void set_UseStringDelimiter(bool value);
    public abstract virtual IRange get_ActiveCell();
    public abstract virtual IWorksheet get_ActiveSheet();
    public abstract virtual IWorkbook get_ActiveWorkbook();
    public abstract virtual IWorkbooks get_Workbooks();
    public abstract virtual IWorksheets get_Worksheets();
    public abstract virtual IRange get_Range();
    public abstract virtual bool get_FixedDecimal();
    public abstract virtual void set_FixedDecimal(bool value);
    public abstract virtual bool get_IgnoreSheetNameException();
    public abstract virtual void set_IgnoreSheetNameException(bool value);
    public abstract virtual bool get_UseSystemSeparators();
    public abstract virtual void set_UseSystemSeparators(bool value);
    public abstract virtual int get_Build();
    public abstract virtual int get_FixedDecimalPlaces();
    public abstract virtual void set_FixedDecimalPlaces(int value);
    public abstract virtual int get_SheetsInNewWorkbook();
    public abstract virtual void set_SheetsInNewWorkbook(int value);
    public abstract virtual string get_DecimalSeparator();
    public abstract virtual void set_DecimalSeparator(string value);
    public abstract virtual string get_ThousandsSeparator();
    public abstract virtual void set_ThousandsSeparator(string value);
    public abstract virtual string get_UserName();
    public abstract virtual void set_UserName(string value);
    public abstract virtual string get_Value();
    public abstract virtual bool get_ChangeStyleOnCellEdit();
    public abstract virtual void set_ChangeStyleOnCellEdit(bool value);
    public abstract virtual SkipExtRecords get_SkipOnSave();
    public abstract virtual void set_SkipOnSave(SkipExtRecords value);
    public abstract virtual double get_StandardHeight();
    public abstract virtual void set_StandardHeight(double value);
    public abstract virtual bool get_StandardHeightFlag();
    public abstract virtual void set_StandardHeightFlag(bool value);
    public abstract virtual double get_StandardWidth();
    public abstract virtual void set_StandardWidth(double value);
    public abstract virtual bool get_OptimizeFonts();
    public abstract virtual void set_OptimizeFonts(bool value);
    public abstract virtual bool get_OptimizeImport();
    public abstract virtual void set_OptimizeImport(bool value);
    public abstract virtual char get_RowSeparator();
    public abstract virtual void set_RowSeparator(char value);
    public abstract virtual char get_ArgumentsSeparator();
    public abstract virtual void set_ArgumentsSeparator(char value);
    public abstract virtual string get_CSVSeparator();
    public abstract virtual void set_CSVSeparator(string value);
    public abstract virtual string get_CsvQualifier();
    public abstract virtual void set_CsvQualifier(string value);
    public abstract virtual string get_CsvRecordDelimiter();
    public abstract virtual void set_CsvRecordDelimiter(string value);
    public abstract virtual string get_StandardFont();
    public abstract virtual void set_StandardFont(string value);
    public abstract virtual double get_StandardFontSize();
    public abstract virtual void set_StandardFontSize(double value);
    public abstract virtual bool get_UseNativeOptimization();
    public abstract virtual void set_UseNativeOptimization(bool value);
    public abstract virtual bool get_UseFastRecordParsing();
    public abstract virtual void set_UseFastRecordParsing(bool value);
    public abstract virtual int get_RowStorageAllocationBlockSize();
    public abstract virtual void set_RowStorageAllocationBlockSize(int value);
    public abstract virtual bool get_DeleteDestinationFile();
    public abstract virtual void set_DeleteDestinationFile(bool value);
    public abstract virtual ExcelVersion get_DefaultVersion();
    public abstract virtual void set_DefaultVersion(ExcelVersion value);
    public abstract virtual bool get_UseNativeStorage();
    public abstract virtual void set_UseNativeStorage(bool value);
    public abstract virtual ExcelDataProviderType get_DataProviderType();
    public abstract virtual void set_DataProviderType(ExcelDataProviderType value);
    public abstract virtual Nullable`1<CompressionLevel> get_CompressionLevel();
    public abstract virtual void set_CompressionLevel(Nullable`1<CompressionLevel> value);
    public abstract virtual bool get_PreserveCSVDataTypes();
    public abstract virtual void set_PreserveCSVDataTypes(bool value);
    public abstract virtual IXlsIORenderer get_XlsIORenderer();
    public abstract virtual void set_XlsIORenderer(IXlsIORenderer value);
    public abstract virtual bool get_IsChartCacheEnabled();
    public abstract virtual void set_IsChartCacheEnabled(bool value);
    public abstract virtual bool get_EnableIncrementalFormula();
    public abstract virtual void set_EnableIncrementalFormula(bool value);
    public abstract virtual bool get_UpdateSheetFormulaReference();
    public abstract virtual void set_UpdateSheetFormulaReference(bool value);
    public abstract virtual bool get_EnablePartialTrustCode();
    public abstract virtual void set_EnablePartialTrustCode(bool value);
    public abstract virtual ExcelRangeIndexerMode get_RangeIndexerMode();
    public abstract virtual void set_RangeIndexerMode(ExcelRangeIndexerMode value);
    public abstract virtual bool get_SkipAutoFitRow();
    public abstract virtual void set_SkipAutoFitRow(bool value);
    public abstract virtual bool get_ExcludeAdditionalCharacters();
    public abstract virtual void set_ExcludeAdditionalCharacters(bool value);
    public abstract virtual int get_MaximumRowsForCsv();
    public abstract virtual void set_MaximumRowsForCsv(int value);
    public abstract virtual int get_MaximumColumnsForCsv();
    public abstract virtual void set_MaximumColumnsForCsv(int value);
    public abstract virtual double CentimetersToPoints(double Centimeters);
    public abstract virtual double InchesToPoints(double Inches);
    public abstract virtual bool IsSupported(Stream Stream);
    public abstract virtual bool IsExcelFile(Stream stream);
    public abstract virtual double ConvertUnits(double value, MeasureUnits from, MeasureUnits to);
    public abstract virtual FallbackFonts get_FallbackFonts();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProgressEvent(ProgressEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProgressEvent(ProgressEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnPasswordRequired(PasswordRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnPasswordRequired(PasswordRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnWrongPassword(PasswordRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnWrongPassword(PasswordRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SubstituteFont(SubstituteFontEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SubstituteFont(SubstituteFontEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TypeMismatchOnExport(ExportEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TypeMismatchOnExport(ExportEventHandler value);
}
public interface Syncfusion.XlsIO.IAutoFilter {
    public IAutoFilterCondition FirstCondition { get; }
    public IAutoFilterCondition SecondCondition { get; }
    public bool IsFiltered { get; }
    public bool IsAnd { get; public set; }
    public bool IsPercent { get; }
    public bool IsSimple1 { get; }
    public bool IsSimple2 { get; }
    public bool IsTop { get; public set; }
    public bool IsTop10 { get; public set; }
    public int Top10Number { get; public set; }
    public IFilter FilteredItems { get; }
    public ExcelFilterType FilterType { get; public set; }
    public abstract virtual IAutoFilterCondition get_FirstCondition();
    public abstract virtual IAutoFilterCondition get_SecondCondition();
    public abstract virtual bool get_IsFiltered();
    public abstract virtual bool get_IsAnd();
    public abstract virtual void set_IsAnd(bool value);
    public abstract virtual bool get_IsPercent();
    public abstract virtual bool get_IsSimple1();
    public abstract virtual bool get_IsSimple2();
    public abstract virtual bool get_IsTop();
    public abstract virtual void set_IsTop(bool value);
    public abstract virtual bool get_IsTop10();
    public abstract virtual void set_IsTop10(bool value);
    public abstract virtual int get_Top10Number();
    public abstract virtual void set_Top10Number(int value);
    public abstract virtual IFilter get_FilteredItems();
    public abstract virtual ExcelFilterType get_FilterType();
    public abstract virtual void set_FilterType(ExcelFilterType value);
    public abstract virtual void AddColorFilter(Color color, ExcelColorFilterType colorFilterType);
    public abstract virtual void AddIconFilter(ExcelIconSetType iconSetType, int iconId);
    public abstract virtual void AddTextFilter(IEnumerable`1<string> filterCollection);
    public abstract virtual void AddTextFilter(string filter);
    public abstract virtual bool RemoveText(IEnumerable`1<string> filterCollection);
    public abstract virtual bool RemoveText(string filter);
    public abstract virtual void AddDateFilter(int year, int month, int day, int hour, int mintue, int second, DateTimeGroupingType groupingType);
    public abstract virtual void AddDateFilter(DateTime dateTime, DateTimeGroupingType groupingType);
    public abstract virtual bool RemoveDate(int year, int month, int day, int hour, int mintue, int second, DateTimeGroupingType groupingType);
    public abstract virtual bool RemoveDate(DateTime dateTime, DateTimeGroupingType groupingType);
    public abstract virtual void AddDynamicFilter(DynamicFilterType dynamicFilterType);
    public abstract virtual bool RemoveDynamicFilter();
    public abstract virtual void RemoveColorFilter();
    public abstract virtual void RemoveIconFilter();
}
public interface Syncfusion.XlsIO.IAutoFilterCondition {
    public ExcelFilterDataType DataType { get; public set; }
    public ExcelFilterCondition ConditionOperator { get; public set; }
    public string String { get; public set; }
    public bool Boolean { get; }
    public byte ErrorCode { get; }
    public double Double { get; public set; }
    public abstract virtual ExcelFilterDataType get_DataType();
    public abstract virtual void set_DataType(ExcelFilterDataType value);
    public abstract virtual ExcelFilterCondition get_ConditionOperator();
    public abstract virtual void set_ConditionOperator(ExcelFilterCondition value);
    public abstract virtual string get_String();
    public abstract virtual void set_String(string value);
    public abstract virtual bool get_Boolean();
    public abstract virtual byte get_ErrorCode();
    public abstract virtual double get_Double();
    public abstract virtual void set_Double(double value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IAutoFilters {
    public IRange FilterRange { get; public set; }
    public int Count { get; }
    public IDataSort DataSorter { get; }
    public IAutoFilter Item { get; }
    public abstract virtual IRange get_FilterRange();
    public abstract virtual void set_FilterRange(IRange value);
    public abstract virtual int get_Count();
    public abstract virtual IDataSort get_DataSorter();
    public abstract virtual IAutoFilter get_Item(int columnIndex);
}
public interface Syncfusion.XlsIO.IBorder {
    public ExcelKnownColors Color { get; public set; }
    public ColorObject ColorObject { get; }
    public Color ColorRGB { get; public set; }
    public ExcelLineStyle LineStyle { get; public set; }
    public bool ShowDiagonalLine { get; public set; }
    public abstract virtual ExcelKnownColors get_Color();
    public abstract virtual void set_Color(ExcelKnownColors value);
    public abstract virtual ColorObject get_ColorObject();
    public abstract virtual Color get_ColorRGB();
    public abstract virtual void set_ColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_LineStyle();
    public abstract virtual void set_LineStyle(ExcelLineStyle value);
    public abstract virtual bool get_ShowDiagonalLine();
    public abstract virtual void set_ShowDiagonalLine(bool value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IBorders {
    public ExcelKnownColors Color { get; public set; }
    public Color ColorRGB { get; public set; }
    public int Count { get; }
    public IBorder Item { get; }
    public ExcelLineStyle LineStyle { get; public set; }
    public ExcelLineStyle Value { get; public set; }
    public abstract virtual ExcelKnownColors get_Color();
    public abstract virtual void set_Color(ExcelKnownColors value);
    public abstract virtual Color get_ColorRGB();
    public abstract virtual void set_ColorRGB(Color value);
    public abstract virtual int get_Count();
    public abstract virtual IBorder get_Item(ExcelBordersIndex Index);
    public abstract virtual ExcelLineStyle get_LineStyle();
    public abstract virtual void set_LineStyle(ExcelLineStyle value);
    public abstract virtual ExcelLineStyle get_Value();
    public abstract virtual void set_Value(ExcelLineStyle value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IBuiltInDocumentProperties {
    public IDocumentProperty Item { get; }
    public IDocumentProperty Item { get; }
    public int Count { get; }
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public string Author { get; public set; }
    public string Keywords { get; public set; }
    public string Comments { get; public set; }
    public string Template { get; public set; }
    public string LastAuthor { get; public set; }
    public string RevisionNumber { get; public set; }
    public TimeSpan EditTime { get; public set; }
    public DateTime LastPrinted { get; public set; }
    public DateTime CreationDate { get; public set; }
    public DateTime LastSaveDate { get; public set; }
    public int PageCount { get; public set; }
    public int WordCount { get; public set; }
    public int CharCount { get; public set; }
    public string ApplicationName { get; public set; }
    public string Category { get; public set; }
    public string PresentationTarget { get; public set; }
    public int ByteCount { get; public set; }
    public int LineCount { get; public set; }
    public int ParagraphCount { get; public set; }
    public int SlideCount { get; public set; }
    public int NoteCount { get; public set; }
    public int HiddenCount { get; public set; }
    public int MultimediaClipCount { get; public set; }
    public string Manager { get; public set; }
    public string Company { get; public set; }
    public bool LinksDirty { get; public set; }
    public abstract virtual IDocumentProperty get_Item(ExcelBuiltInProperty index);
    public abstract virtual IDocumentProperty get_Item(int iIndex);
    public abstract virtual int get_Count();
    public abstract virtual void Clear();
    public abstract virtual bool Contains(ExcelBuiltInProperty index);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Subject();
    public abstract virtual void set_Subject(string value);
    public abstract virtual string get_Author();
    public abstract virtual void set_Author(string value);
    public abstract virtual string get_Keywords();
    public abstract virtual void set_Keywords(string value);
    public abstract virtual string get_Comments();
    public abstract virtual void set_Comments(string value);
    public abstract virtual string get_Template();
    public abstract virtual void set_Template(string value);
    public abstract virtual string get_LastAuthor();
    public abstract virtual void set_LastAuthor(string value);
    public abstract virtual string get_RevisionNumber();
    public abstract virtual void set_RevisionNumber(string value);
    public abstract virtual TimeSpan get_EditTime();
    public abstract virtual void set_EditTime(TimeSpan value);
    public abstract virtual DateTime get_LastPrinted();
    public abstract virtual void set_LastPrinted(DateTime value);
    public abstract virtual DateTime get_CreationDate();
    public abstract virtual void set_CreationDate(DateTime value);
    public abstract virtual DateTime get_LastSaveDate();
    public abstract virtual void set_LastSaveDate(DateTime value);
    public abstract virtual int get_PageCount();
    public abstract virtual void set_PageCount(int value);
    public abstract virtual int get_WordCount();
    public abstract virtual void set_WordCount(int value);
    public abstract virtual int get_CharCount();
    public abstract virtual void set_CharCount(int value);
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual string get_Category();
    public abstract virtual void set_Category(string value);
    public abstract virtual string get_PresentationTarget();
    public abstract virtual void set_PresentationTarget(string value);
    public abstract virtual int get_ByteCount();
    public abstract virtual void set_ByteCount(int value);
    public abstract virtual int get_LineCount();
    public abstract virtual void set_LineCount(int value);
    public abstract virtual int get_ParagraphCount();
    public abstract virtual void set_ParagraphCount(int value);
    public abstract virtual int get_SlideCount();
    public abstract virtual void set_SlideCount(int value);
    public abstract virtual int get_NoteCount();
    public abstract virtual void set_NoteCount(int value);
    public abstract virtual int get_HiddenCount();
    public abstract virtual void set_HiddenCount(int value);
    public abstract virtual int get_MultimediaClipCount();
    public abstract virtual void set_MultimediaClipCount(int value);
    public abstract virtual string get_Manager();
    public abstract virtual void set_Manager(string value);
    public abstract virtual string get_Company();
    public abstract virtual void set_Company(string value);
    public abstract virtual bool get_LinksDirty();
    public abstract virtual void set_LinksDirty(bool value);
}
public interface Syncfusion.XlsIO.ICalculationOptions {
    public int MaximumIteration { get; public set; }
    public bool RecalcOnSave { get; public set; }
    public double MaximumChange { get; public set; }
    public bool IsIterationEnabled { get; public set; }
    public bool R1C1ReferenceMode { get; public set; }
    public ExcelCalculationMode CalculationMode { get; public set; }
    public abstract virtual int get_MaximumIteration();
    public abstract virtual void set_MaximumIteration(int value);
    public abstract virtual bool get_RecalcOnSave();
    public abstract virtual void set_RecalcOnSave(bool value);
    public abstract virtual double get_MaximumChange();
    public abstract virtual void set_MaximumChange(double value);
    public abstract virtual bool get_IsIterationEnabled();
    public abstract virtual void set_IsIterationEnabled(bool value);
    public abstract virtual bool get_R1C1ReferenceMode();
    public abstract virtual void set_R1C1ReferenceMode(bool value);
    public abstract virtual ExcelCalculationMode get_CalculationMode();
    public abstract virtual void set_CalculationMode(ExcelCalculationMode value);
}
public interface Syncfusion.XlsIO.IChart {
    public ExcelChartType ChartType { get; public set; }
    public IRange DataRange { get; public set; }
    public bool IsSeriesInRows { get; public set; }
    public string ChartTitle { get; public set; }
    public IChartTextArea ChartTitleArea { get; }
    public IChartPageSetup PageSetup { get; }
    public double XPos { get; public set; }
    public double YPos { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public IChartSeries Series { get; }
    public IChartCategoryAxis PrimaryCategoryAxis { get; }
    public IChartValueAxis PrimaryValueAxis { get; }
    public IChartSeriesAxis PrimarySerieAxis { get; }
    public IChartCategoryAxis SecondaryCategoryAxis { get; }
    public IChartValueAxis SecondaryValueAxis { get; }
    public IChartFrameFormat ChartArea { get; }
    public IChartFrameFormat PlotArea { get; }
    public IChartWallOrFloor Walls { get; }
    public IChartWallOrFloor SideWall { get; }
    public IChartWallOrFloor BackWall { get; }
    public IChartWallOrFloor Floor { get; }
    public IChartDataTable DataTable { get; }
    public bool HasDataTable { get; public set; }
    public IChartLegend Legend { get; }
    public bool HasTitle { get; public set; }
    public bool HasLegend { get; public set; }
    public int Rotation { get; public set; }
    public int Elevation { get; public set; }
    public int Perspective { get; public set; }
    public int HeightPercent { get; public set; }
    public int DepthPercent { get; public set; }
    public int GapDepth { get; public set; }
    public bool RightAngleAxes { get; public set; }
    public bool AutoScaling { get; public set; }
    public bool WallsAndGridlines2D { get; public set; }
    public bool HasPlotArea { get; public set; }
    public ExcelChartPlotEmpty DisplayBlanksAs { get; public set; }
    public bool PlotVisibleOnly { get; public set; }
    public bool SizeWithWindow { get; public set; }
    public IPivotTable PivotSource { get; public set; }
    public ExcelChartType PivotChartType { get; public set; }
    public bool ShowAllFieldButtons { get; public set; }
    public bool ShowValueFieldButtons { get; public set; }
    public bool ShowAxisFieldButtons { get; public set; }
    public bool ShowLegendFieldButtons { get; public set; }
    public bool ShowReportFilterFieldButtons { get; public set; }
    public IChartCategories Categories { get; }
    public ExcelSeriesNameLevel SeriesNameLevel { get; public set; }
    public ExcelCategoriesLabelLevel CategoryLabelLevel { get; public set; }
    public int Style { get; public set; }
    public abstract virtual ExcelChartType get_ChartType();
    public abstract virtual void set_ChartType(ExcelChartType value);
    public abstract virtual IRange get_DataRange();
    public abstract virtual void set_DataRange(IRange value);
    public abstract virtual bool get_IsSeriesInRows();
    public abstract virtual void set_IsSeriesInRows(bool value);
    public abstract virtual string get_ChartTitle();
    public abstract virtual void set_ChartTitle(string value);
    public abstract virtual IChartTextArea get_ChartTitleArea();
    public abstract virtual IChartPageSetup get_PageSetup();
    public abstract virtual double get_XPos();
    public abstract virtual void set_XPos(double value);
    public abstract virtual double get_YPos();
    public abstract virtual void set_YPos(double value);
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual double get_Height();
    public abstract virtual void set_Height(double value);
    public abstract virtual IChartSeries get_Series();
    public abstract virtual IChartCategoryAxis get_PrimaryCategoryAxis();
    public abstract virtual IChartValueAxis get_PrimaryValueAxis();
    public abstract virtual IChartSeriesAxis get_PrimarySerieAxis();
    public abstract virtual IChartCategoryAxis get_SecondaryCategoryAxis();
    public abstract virtual IChartValueAxis get_SecondaryValueAxis();
    public abstract virtual IChartFrameFormat get_ChartArea();
    public abstract virtual IChartFrameFormat get_PlotArea();
    public abstract virtual IChartWallOrFloor get_Walls();
    public abstract virtual IChartWallOrFloor get_SideWall();
    public abstract virtual IChartWallOrFloor get_BackWall();
    public abstract virtual IChartWallOrFloor get_Floor();
    public abstract virtual IChartDataTable get_DataTable();
    public abstract virtual bool get_HasDataTable();
    public abstract virtual void set_HasDataTable(bool value);
    public abstract virtual IChartLegend get_Legend();
    public abstract virtual bool get_HasTitle();
    public abstract virtual void set_HasTitle(bool value);
    public abstract virtual bool get_HasLegend();
    public abstract virtual void set_HasLegend(bool value);
    public abstract virtual int get_Rotation();
    public abstract virtual void set_Rotation(int value);
    public abstract virtual int get_Elevation();
    public abstract virtual void set_Elevation(int value);
    public abstract virtual int get_Perspective();
    public abstract virtual void set_Perspective(int value);
    public abstract virtual int get_HeightPercent();
    public abstract virtual void set_HeightPercent(int value);
    public abstract virtual int get_DepthPercent();
    public abstract virtual void set_DepthPercent(int value);
    public abstract virtual int get_GapDepth();
    public abstract virtual void set_GapDepth(int value);
    public abstract virtual bool get_RightAngleAxes();
    public abstract virtual void set_RightAngleAxes(bool value);
    public abstract virtual bool get_AutoScaling();
    public abstract virtual void set_AutoScaling(bool value);
    public abstract virtual bool get_WallsAndGridlines2D();
    public abstract virtual void set_WallsAndGridlines2D(bool value);
    public abstract virtual bool get_HasPlotArea();
    public abstract virtual void set_HasPlotArea(bool value);
    public abstract virtual ExcelChartPlotEmpty get_DisplayBlanksAs();
    public abstract virtual void set_DisplayBlanksAs(ExcelChartPlotEmpty value);
    public abstract virtual bool get_PlotVisibleOnly();
    public abstract virtual void set_PlotVisibleOnly(bool value);
    public abstract virtual bool get_SizeWithWindow();
    public abstract virtual void set_SizeWithWindow(bool value);
    public abstract virtual IPivotTable get_PivotSource();
    public abstract virtual void set_PivotSource(IPivotTable value);
    public abstract virtual ExcelChartType get_PivotChartType();
    public abstract virtual void set_PivotChartType(ExcelChartType value);
    public abstract virtual bool get_ShowAllFieldButtons();
    public abstract virtual void set_ShowAllFieldButtons(bool value);
    public abstract virtual bool get_ShowValueFieldButtons();
    public abstract virtual void set_ShowValueFieldButtons(bool value);
    public abstract virtual bool get_ShowAxisFieldButtons();
    public abstract virtual void set_ShowAxisFieldButtons(bool value);
    public abstract virtual bool get_ShowLegendFieldButtons();
    public abstract virtual void set_ShowLegendFieldButtons(bool value);
    public abstract virtual bool get_ShowReportFilterFieldButtons();
    public abstract virtual void set_ShowReportFilterFieldButtons(bool value);
    public abstract virtual IChartCategories get_Categories();
    public abstract virtual ExcelSeriesNameLevel get_SeriesNameLevel();
    public abstract virtual void set_SeriesNameLevel(ExcelSeriesNameLevel value);
    public abstract virtual ExcelCategoriesLabelLevel get_CategoryLabelLevel();
    public abstract virtual void set_CategoryLabelLevel(ExcelCategoriesLabelLevel value);
    public abstract virtual int get_Style();
    public abstract virtual void set_Style(int value);
    public abstract virtual void SaveAsImage(Stream imageAsStream);
}
public interface Syncfusion.XlsIO.IChartAxis {
    public string NumberFormat { get; public set; }
    public ExcelAxisType AxisType { get; }
    public string Title { get; public set; }
    public int TextRotationAngle { get; public set; }
    public IChartTextArea TitleArea { get; }
    public IFont Font { get; }
    public IChartGridLine MajorGridLines { get; }
    public IChartGridLine MinorGridLines { get; }
    public bool HasMinorGridLines { get; public set; }
    public bool HasMajorGridLines { get; public set; }
    public ExcelTickMark MinorTickMark { get; public set; }
    public ExcelTickMark MajorTickMark { get; public set; }
    public IChartBorder Border { get; }
    public bool AutoTickLabelSpacing { get; public set; }
    public ExcelTickLabelPosition TickLabelPosition { get; public set; }
    public bool Visible { get; public set; }
    public ExcelAxisTextDirection Alignment { get; public set; }
    [ObsoleteAttribute("Please use ReversePlotOrder property instead of this one.")]
public bool IsReversed { get; public set; }
    public bool ReversePlotOrder { get; public set; }
    public IShadow Shadow { get; }
    public IThreeDFormat Chart3DOptions { get; }
    public abstract virtual string get_NumberFormat();
    public abstract virtual void set_NumberFormat(string value);
    public abstract virtual ExcelAxisType get_AxisType();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual int get_TextRotationAngle();
    public abstract virtual void set_TextRotationAngle(int value);
    public abstract virtual IChartTextArea get_TitleArea();
    public abstract virtual IFont get_Font();
    public abstract virtual IChartGridLine get_MajorGridLines();
    public abstract virtual IChartGridLine get_MinorGridLines();
    public abstract virtual bool get_HasMinorGridLines();
    public abstract virtual void set_HasMinorGridLines(bool value);
    public abstract virtual bool get_HasMajorGridLines();
    public abstract virtual void set_HasMajorGridLines(bool value);
    public abstract virtual ExcelTickMark get_MinorTickMark();
    public abstract virtual void set_MinorTickMark(ExcelTickMark value);
    public abstract virtual ExcelTickMark get_MajorTickMark();
    public abstract virtual void set_MajorTickMark(ExcelTickMark value);
    public abstract virtual IChartBorder get_Border();
    public abstract virtual bool get_AutoTickLabelSpacing();
    public abstract virtual void set_AutoTickLabelSpacing(bool value);
    public abstract virtual ExcelTickLabelPosition get_TickLabelPosition();
    public abstract virtual void set_TickLabelPosition(ExcelTickLabelPosition value);
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual ExcelAxisTextDirection get_Alignment();
    public abstract virtual void set_Alignment(ExcelAxisTextDirection value);
    public abstract virtual bool get_IsReversed();
    public abstract virtual void set_IsReversed(bool value);
    public abstract virtual bool get_ReversePlotOrder();
    public abstract virtual void set_ReversePlotOrder(bool value);
    public abstract virtual IShadow get_Shadow();
    public abstract virtual IThreeDFormat get_Chart3DOptions();
}
public interface Syncfusion.XlsIO.IChartBorder {
    public Color LineColor { get; public set; }
    public ExcelChartLinePattern LinePattern { get; public set; }
    public ExcelChartLineWeight LineWeight { get; public set; }
    public bool AutoFormat { get; public set; }
    public bool IsAutoLineColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public bool DrawTickLabels { get; public set; }
    public double Transparency { get; public set; }
    public double Weight { get; public set; }
    public abstract virtual Color get_LineColor();
    public abstract virtual void set_LineColor(Color value);
    public abstract virtual ExcelChartLinePattern get_LinePattern();
    public abstract virtual void set_LinePattern(ExcelChartLinePattern value);
    public abstract virtual ExcelChartLineWeight get_LineWeight();
    public abstract virtual void set_LineWeight(ExcelChartLineWeight value);
    public abstract virtual bool get_AutoFormat();
    public abstract virtual void set_AutoFormat(bool value);
    public abstract virtual bool get_IsAutoLineColor();
    public abstract virtual void set_IsAutoLineColor(bool value);
    public abstract virtual ExcelKnownColors get_ColorIndex();
    public abstract virtual void set_ColorIndex(ExcelKnownColors value);
    public abstract virtual bool get_DrawTickLabels();
    public abstract virtual void set_DrawTickLabels(bool value);
    public abstract virtual double get_Transparency();
    public abstract virtual void set_Transparency(double value);
    public abstract virtual double get_Weight();
    public abstract virtual void set_Weight(double value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IChartCategories {
    public int Count { get; }
    public IChartCategory Item { get; }
    public IChartCategory Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IChartCategory get_Item(int index);
    public abstract virtual IChartCategory get_Item(string name);
}
public interface Syncfusion.XlsIO.IChartCategory {
    public bool IsFiltered { get; public set; }
    public string Name { get; }
    public IRange CategoryLabel { get; }
    public IRange Values { get; }
    public abstract virtual bool get_IsFiltered();
    public abstract virtual void set_IsFiltered(bool value);
    public abstract virtual string get_Name();
    public abstract virtual IRange get_CategoryLabel();
    public abstract virtual IRange get_Values();
}
public interface Syncfusion.XlsIO.IChartCategoryAxis {
    [ObsoleteAttribute("Please, use TickLabelSpacing instead of it")]
public int LabelFrequency { get; public set; }
    public int TickLabelSpacing { get; public set; }
    public bool AutoTickLabelSpacing { get; public set; }
    [ObsoleteAttribute("Please, use TickMarkSpacing instead of it")]
public int TickMarksFrequency { get; public set; }
    public int TickMarkSpacing { get; public set; }
    public bool IsBetween { get; public set; }
    public IRange CategoryLabels { get; public set; }
    public Object[] EnteredDirectlyCategoryLabels { get; public set; }
    public ExcelCategoryType CategoryType { get; public set; }
    public int Offset { get; public set; }
    public ExcelChartBaseUnit BaseUnit { get; public set; }
    public bool BaseUnitIsAuto { get; public set; }
    public ExcelChartBaseUnit MajorUnitScale { get; public set; }
    public ExcelChartBaseUnit MinorUnitScale { get; public set; }
    public bool NoMultiLevelLabel { get; public set; }
    public bool IsBinningByCategory { get; public set; }
    public bool HasAutomaticBins { get; public set; }
    public int NumberOfBins { get; public set; }
    public double BinWidth { get; public set; }
    public double UnderflowBinValue { get; public set; }
    public double OverflowBinValue { get; public set; }
    public abstract virtual int get_LabelFrequency();
    public abstract virtual void set_LabelFrequency(int value);
    public abstract virtual int get_TickLabelSpacing();
    public abstract virtual void set_TickLabelSpacing(int value);
    public abstract virtual bool get_AutoTickLabelSpacing();
    public abstract virtual void set_AutoTickLabelSpacing(bool value);
    public abstract virtual int get_TickMarksFrequency();
    public abstract virtual void set_TickMarksFrequency(int value);
    public abstract virtual int get_TickMarkSpacing();
    public abstract virtual void set_TickMarkSpacing(int value);
    public abstract virtual bool get_IsBetween();
    public abstract virtual void set_IsBetween(bool value);
    public abstract virtual IRange get_CategoryLabels();
    public abstract virtual void set_CategoryLabels(IRange value);
    public abstract virtual Object[] get_EnteredDirectlyCategoryLabels();
    public abstract virtual void set_EnteredDirectlyCategoryLabels(Object[] value);
    public abstract virtual ExcelCategoryType get_CategoryType();
    public abstract virtual void set_CategoryType(ExcelCategoryType value);
    public abstract virtual int get_Offset();
    public abstract virtual void set_Offset(int value);
    public abstract virtual ExcelChartBaseUnit get_BaseUnit();
    public abstract virtual void set_BaseUnit(ExcelChartBaseUnit value);
    public abstract virtual bool get_BaseUnitIsAuto();
    public abstract virtual void set_BaseUnitIsAuto(bool value);
    public abstract virtual ExcelChartBaseUnit get_MajorUnitScale();
    public abstract virtual void set_MajorUnitScale(ExcelChartBaseUnit value);
    public abstract virtual ExcelChartBaseUnit get_MinorUnitScale();
    public abstract virtual void set_MinorUnitScale(ExcelChartBaseUnit value);
    public abstract virtual bool get_NoMultiLevelLabel();
    public abstract virtual void set_NoMultiLevelLabel(bool value);
    public abstract virtual bool get_IsBinningByCategory();
    public abstract virtual void set_IsBinningByCategory(bool value);
    public abstract virtual bool get_HasAutomaticBins();
    public abstract virtual void set_HasAutomaticBins(bool value);
    public abstract virtual int get_NumberOfBins();
    public abstract virtual void set_NumberOfBins(int value);
    public abstract virtual double get_BinWidth();
    public abstract virtual void set_BinWidth(double value);
    public abstract virtual double get_UnderflowBinValue();
    public abstract virtual void set_UnderflowBinValue(double value);
    public abstract virtual double get_OverflowBinValue();
    public abstract virtual void set_OverflowBinValue(double value);
}
public interface Syncfusion.XlsIO.IChartDataLabels {
    public bool IsSeriesName { get; public set; }
    public bool IsCategoryName { get; public set; }
    public bool IsValue { get; public set; }
    public bool IsPercentage { get; public set; }
    public bool IsBubbleSize { get; public set; }
    public string Delimiter { get; public set; }
    public bool IsLegendKey { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public ExcelDataLabelPosition Position { get; public set; }
    public bool IsFormula { get; public set; }
    public bool IsValueFromCells { get; public set; }
    public IRange ValueFromCellsRange { get; public set; }
    public abstract virtual bool get_IsSeriesName();
    public abstract virtual void set_IsSeriesName(bool value);
    public abstract virtual bool get_IsCategoryName();
    public abstract virtual void set_IsCategoryName(bool value);
    public abstract virtual bool get_IsValue();
    public abstract virtual void set_IsValue(bool value);
    public abstract virtual bool get_IsPercentage();
    public abstract virtual void set_IsPercentage(bool value);
    public abstract virtual bool get_IsBubbleSize();
    public abstract virtual void set_IsBubbleSize(bool value);
    public abstract virtual string get_Delimiter();
    public abstract virtual void set_Delimiter(string value);
    public abstract virtual bool get_IsLegendKey();
    public abstract virtual void set_IsLegendKey(bool value);
    public abstract virtual bool get_ShowLeaderLines();
    public abstract virtual void set_ShowLeaderLines(bool value);
    public abstract virtual ExcelDataLabelPosition get_Position();
    public abstract virtual void set_Position(ExcelDataLabelPosition value);
    public abstract virtual bool get_IsFormula();
    public abstract virtual void set_IsFormula(bool value);
    public abstract virtual bool get_IsValueFromCells();
    public abstract virtual void set_IsValueFromCells(bool value);
    public abstract virtual IRange get_ValueFromCellsRange();
    public abstract virtual void set_ValueFromCellsRange(IRange value);
}
public interface Syncfusion.XlsIO.IChartDataPoint {
    public IChartDataLabels DataLabels { get; }
    public int Index { get; }
    public IChartSerieDataFormat DataFormat { get; }
    public bool IsDefault { get; }
    public bool IsDefaultmarkertype { get; public set; }
    public bool SetAsTotal { get; public set; }
    public abstract virtual IChartDataLabels get_DataLabels();
    public abstract virtual int get_Index();
    public abstract virtual IChartSerieDataFormat get_DataFormat();
    public abstract virtual bool get_IsDefault();
    public abstract virtual bool get_IsDefaultmarkertype();
    public abstract virtual void set_IsDefaultmarkertype(bool value);
    public abstract virtual bool get_SetAsTotal();
    public abstract virtual void set_SetAsTotal(bool value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IChartDataPoints {
    public IChartDataPoint DefaultDataPoint { get; }
    public IChartDataPoint Item { get; }
    public abstract virtual IChartDataPoint get_DefaultDataPoint();
    public abstract virtual IChartDataPoint get_Item(int index);
}
public interface Syncfusion.XlsIO.IChartDataTable {
    public bool HasHorzBorder { get; public set; }
    public bool HasVertBorder { get; public set; }
    public bool HasBorders { get; public set; }
    public bool ShowSeriesKeys { get; public set; }
    public IChartTextArea TextArea { get; }
    public abstract virtual bool get_HasHorzBorder();
    public abstract virtual void set_HasHorzBorder(bool value);
    public abstract virtual bool get_HasVertBorder();
    public abstract virtual void set_HasVertBorder(bool value);
    public abstract virtual bool get_HasBorders();
    public abstract virtual void set_HasBorders(bool value);
    public abstract virtual bool get_ShowSeriesKeys();
    public abstract virtual void set_ShowSeriesKeys(bool value);
    public abstract virtual IChartTextArea get_TextArea();
}
public interface Syncfusion.XlsIO.IChartDropBar {
    public int Gap { get; public set; }
    public abstract virtual int get_Gap();
    public abstract virtual void set_Gap(int value);
}
public interface Syncfusion.XlsIO.IChartErrorBars {
    public IChartBorder Border { get; }
    public ExcelErrorBarInclude Include { get; public set; }
    public bool HasCap { get; public set; }
    public ExcelErrorBarType Type { get; public set; }
    public double NumberValue { get; public set; }
    public IRange PlusRange { get; public set; }
    public IRange MinusRange { get; public set; }
    public IShadow Shadow { get; }
    public IThreeDFormat Chart3DOptions { get; }
    public abstract virtual IChartBorder get_Border();
    public abstract virtual ExcelErrorBarInclude get_Include();
    public abstract virtual void set_Include(ExcelErrorBarInclude value);
    public abstract virtual bool get_HasCap();
    public abstract virtual void set_HasCap(bool value);
    public abstract virtual ExcelErrorBarType get_Type();
    public abstract virtual void set_Type(ExcelErrorBarType value);
    public abstract virtual double get_NumberValue();
    public abstract virtual void set_NumberValue(double value);
    public abstract virtual IRange get_PlusRange();
    public abstract virtual void set_PlusRange(IRange value);
    public abstract virtual IRange get_MinusRange();
    public abstract virtual void set_MinusRange(IRange value);
    public abstract virtual IShadow get_Shadow();
    public abstract virtual IThreeDFormat get_Chart3DOptions();
    public abstract virtual void ClearFormats();
    public abstract virtual void Delete();
}
public interface Syncfusion.XlsIO.IChartFillBorder {
    public bool HasInterior { get; }
    public bool HasLineProperties { get; }
    public bool Has3dProperties { get; }
    public bool HasShadowProperties { get; }
    public IChartBorder LineProperties { get; }
    public IChartInterior Interior { get; }
    public IFill Fill { get; }
    public IThreeDFormat ThreeD { get; }
    public IShadow Shadow { get; }
    public abstract virtual bool get_HasInterior();
    public abstract virtual bool get_HasLineProperties();
    public abstract virtual bool get_Has3dProperties();
    public abstract virtual bool get_HasShadowProperties();
    public abstract virtual IChartBorder get_LineProperties();
    public abstract virtual IChartInterior get_Interior();
    public abstract virtual IFill get_Fill();
    public abstract virtual IThreeDFormat get_ThreeD();
    public abstract virtual IShadow get_Shadow();
}
public interface Syncfusion.XlsIO.IChartFormat {
    [ObsoleteAttribute("Please, use IsVaryColor instead of this property. Sorry for inconvenience.")]
public bool IsVeryColor { get; public set; }
    public bool IsVaryColor { get; public set; }
    public int Overlap { get; public set; }
    public int GapWidth { get; public set; }
    public int FirstSliceAngle { get; public set; }
    public int DoughnutHoleSize { get; public set; }
    public int BubbleScale { get; public set; }
    public ExcelBubbleSize SizeRepresents { get; public set; }
    public bool ShowNegativeBubbles { get; public set; }
    public bool HasRadarAxisLabels { get; public set; }
    public ExcelSplitType SplitType { get; public set; }
    public int SplitValue { get; public set; }
    public int PieSecondSize { get; public set; }
    public IChartDropBar FirstDropBar { get; }
    public IChartDropBar SecondDropBar { get; }
    public IChartBorder PieSeriesLine { get; }
    public ExcelDropLineStyle DropLineStyle { get; public set; }
    public IChartBorder HighLowLines { get; }
    public IChartBorder DropLines { get; }
    public bool HasDropLines { get; public set; }
    public bool HasHighLowLines { get; public set; }
    public bool HasSeriesLines { get; public set; }
    public abstract virtual bool get_IsVeryColor();
    public abstract virtual void set_IsVeryColor(bool value);
    public abstract virtual bool get_IsVaryColor();
    public abstract virtual void set_IsVaryColor(bool value);
    public abstract virtual int get_Overlap();
    public abstract virtual void set_Overlap(int value);
    public abstract virtual int get_GapWidth();
    public abstract virtual void set_GapWidth(int value);
    public abstract virtual int get_FirstSliceAngle();
    public abstract virtual void set_FirstSliceAngle(int value);
    public abstract virtual int get_DoughnutHoleSize();
    public abstract virtual void set_DoughnutHoleSize(int value);
    public abstract virtual int get_BubbleScale();
    public abstract virtual void set_BubbleScale(int value);
    public abstract virtual ExcelBubbleSize get_SizeRepresents();
    public abstract virtual void set_SizeRepresents(ExcelBubbleSize value);
    public abstract virtual bool get_ShowNegativeBubbles();
    public abstract virtual void set_ShowNegativeBubbles(bool value);
    public abstract virtual bool get_HasRadarAxisLabels();
    public abstract virtual void set_HasRadarAxisLabels(bool value);
    public abstract virtual ExcelSplitType get_SplitType();
    public abstract virtual void set_SplitType(ExcelSplitType value);
    public abstract virtual int get_SplitValue();
    public abstract virtual void set_SplitValue(int value);
    public abstract virtual int get_PieSecondSize();
    public abstract virtual void set_PieSecondSize(int value);
    public abstract virtual IChartDropBar get_FirstDropBar();
    public abstract virtual IChartDropBar get_SecondDropBar();
    public abstract virtual IChartBorder get_PieSeriesLine();
    public abstract virtual ExcelDropLineStyle get_DropLineStyle();
    public abstract virtual void set_DropLineStyle(ExcelDropLineStyle value);
    public abstract virtual IChartBorder get_HighLowLines();
    public abstract virtual IChartBorder get_DropLines();
    public abstract virtual bool get_HasDropLines();
    public abstract virtual void set_HasDropLines(bool value);
    public abstract virtual bool get_HasHighLowLines();
    public abstract virtual void set_HasHighLowLines(bool value);
    public abstract virtual bool get_HasSeriesLines();
    public abstract virtual void set_HasSeriesLines(bool value);
}
public interface Syncfusion.XlsIO.IChartFrameFormat {
    public ExcelRectangleStyle RectangleStyle { get; public set; }
    public bool IsBorderCornersRound { get; public set; }
    public IChartBorder Border { get; }
    public IChartLayout Layout { get; public set; }
    public abstract virtual ExcelRectangleStyle get_RectangleStyle();
    public abstract virtual void set_RectangleStyle(ExcelRectangleStyle value);
    public abstract virtual bool get_IsBorderCornersRound();
    public abstract virtual void set_IsBorderCornersRound(bool value);
    public abstract virtual IChartBorder get_Border();
    public abstract virtual IChartLayout get_Layout();
    public abstract virtual void set_Layout(IChartLayout value);
    public abstract virtual void Clear();
}
public interface Syncfusion.XlsIO.IChartGridLine {
    public IChartBorder Border { get; }
    public abstract virtual IChartBorder get_Border();
    public abstract virtual void Delete();
}
public interface Syncfusion.XlsIO.IChartInterior {
    public Color ForegroundColor { get; public set; }
    public Color BackgroundColor { get; public set; }
    public ExcelPattern Pattern { get; public set; }
    public ExcelKnownColors ForegroundColorIndex { get; public set; }
    public ExcelKnownColors BackgroundColorIndex { get; public set; }
    public bool UseAutomaticFormat { get; public set; }
    public bool SwapColorsOnNegative { get; public set; }
    public abstract virtual Color get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(Color value);
    public abstract virtual Color get_BackgroundColor();
    public abstract virtual void set_BackgroundColor(Color value);
    public abstract virtual ExcelPattern get_Pattern();
    public abstract virtual void set_Pattern(ExcelPattern value);
    public abstract virtual ExcelKnownColors get_ForegroundColorIndex();
    public abstract virtual void set_ForegroundColorIndex(ExcelKnownColors value);
    public abstract virtual ExcelKnownColors get_BackgroundColorIndex();
    public abstract virtual void set_BackgroundColorIndex(ExcelKnownColors value);
    public abstract virtual bool get_UseAutomaticFormat();
    public abstract virtual void set_UseAutomaticFormat(bool value);
    public abstract virtual bool get_SwapColorsOnNegative();
    public abstract virtual void set_SwapColorsOnNegative(bool value);
}
public interface Syncfusion.XlsIO.IChartLayout {
    public IChartManualLayout ManualLayout { get; public set; }
    public LayoutTargets LayoutTarget { get; public set; }
    public LayoutModes LeftMode { get; public set; }
    public LayoutModes TopMode { get; public set; }
    public double Left { get; public set; }
    public double Top { get; public set; }
    public LayoutModes WidthMode { get; public set; }
    public LayoutModes HeightMode { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public abstract virtual IChartManualLayout get_ManualLayout();
    public abstract virtual void set_ManualLayout(IChartManualLayout value);
    public abstract virtual LayoutTargets get_LayoutTarget();
    public abstract virtual void set_LayoutTarget(LayoutTargets value);
    public abstract virtual LayoutModes get_LeftMode();
    public abstract virtual void set_LeftMode(LayoutModes value);
    public abstract virtual LayoutModes get_TopMode();
    public abstract virtual void set_TopMode(LayoutModes value);
    public abstract virtual double get_Left();
    public abstract virtual void set_Left(double value);
    public abstract virtual double get_Top();
    public abstract virtual void set_Top(double value);
    public abstract virtual LayoutModes get_WidthMode();
    public abstract virtual void set_WidthMode(LayoutModes value);
    public abstract virtual LayoutModes get_HeightMode();
    public abstract virtual void set_HeightMode(LayoutModes value);
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual double get_Height();
    public abstract virtual void set_Height(double value);
}
public interface Syncfusion.XlsIO.IChartLegend {
    public IChartFrameFormat FrameFormat { get; }
    public IChartTextArea TextArea { get; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public ExcelLegendPosition Position { get; public set; }
    public bool IsVerticalLegend { get; public set; }
    public IChartLegendEntries LegendEntries { get; }
    public bool IncludeInLayout { get; public set; }
    public IChartLayout Layout { get; public set; }
    public abstract virtual IChartFrameFormat get_FrameFormat();
    public abstract virtual IChartTextArea get_TextArea();
    public abstract virtual int get_X();
    public abstract virtual void set_X(int value);
    public abstract virtual int get_Y();
    public abstract virtual void set_Y(int value);
    public abstract virtual ExcelLegendPosition get_Position();
    public abstract virtual void set_Position(ExcelLegendPosition value);
    public abstract virtual bool get_IsVerticalLegend();
    public abstract virtual void set_IsVerticalLegend(bool value);
    public abstract virtual IChartLegendEntries get_LegendEntries();
    public abstract virtual bool get_IncludeInLayout();
    public abstract virtual void set_IncludeInLayout(bool value);
    public abstract virtual IChartLayout get_Layout();
    public abstract virtual void set_Layout(IChartLayout value);
    public abstract virtual void Clear();
    public abstract virtual void Delete();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IChartLegendEntries {
    public int Count { get; }
    public IChartLegendEntry Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IChartLegendEntry get_Item(int iIndex);
}
public interface Syncfusion.XlsIO.IChartLegendEntry {
    public bool IsDeleted { get; public set; }
    public bool IsFormatted { get; public set; }
    public IChartTextArea TextArea { get; }
    public abstract virtual bool get_IsDeleted();
    public abstract virtual void set_IsDeleted(bool value);
    public abstract virtual bool get_IsFormatted();
    public abstract virtual void set_IsFormatted(bool value);
    public abstract virtual IChartTextArea get_TextArea();
    public abstract virtual void Clear();
    public abstract virtual void Delete();
}
public interface Syncfusion.XlsIO.IChartManualLayout {
    public LayoutTargets LayoutTarget { get; public set; }
    public LayoutModes LeftMode { get; public set; }
    public LayoutModes TopMode { get; public set; }
    public double Left { get; public set; }
    public double Top { get; public set; }
    public LayoutModes WidthMode { get; public set; }
    public LayoutModes HeightMode { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public abstract virtual LayoutTargets get_LayoutTarget();
    public abstract virtual void set_LayoutTarget(LayoutTargets value);
    public abstract virtual LayoutModes get_LeftMode();
    public abstract virtual void set_LeftMode(LayoutModes value);
    public abstract virtual LayoutModes get_TopMode();
    public abstract virtual void set_TopMode(LayoutModes value);
    public abstract virtual double get_Left();
    public abstract virtual void set_Left(double value);
    public abstract virtual double get_Top();
    public abstract virtual void set_Top(double value);
    public abstract virtual LayoutModes get_WidthMode();
    public abstract virtual void set_WidthMode(LayoutModes value);
    public abstract virtual LayoutModes get_HeightMode();
    public abstract virtual void set_HeightMode(LayoutModes value);
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual double get_Height();
    public abstract virtual void set_Height(double value);
}
public interface Syncfusion.XlsIO.IChartPageSetup {
    public bool FitToPagesTall { get; public set; }
    public bool FitToPagesWide { get; public set; }
    public abstract virtual bool get_FitToPagesTall();
    public abstract virtual void set_FitToPagesTall(bool value);
    public abstract virtual bool get_FitToPagesWide();
    public abstract virtual void set_FitToPagesWide(bool value);
}
public interface Syncfusion.XlsIO.IChartPlotArea {
}
public interface Syncfusion.XlsIO.IChartRichTextString {
    public string Text { get; }
    public TRuns[] FormattingRuns { get; }
    public abstract virtual string get_Text();
    public abstract virtual TRuns[] get_FormattingRuns();
    public abstract virtual void SetFont(int iStartPos, int iEndPos, IFont font);
    public abstract virtual IFont GetFont(TRuns tRuns);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ICharts {
    public int Count { get; }
    public IChart Item { get; }
    public IChart Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IChart get_Item(int index);
    public abstract virtual IChart get_Item(string name);
    public abstract virtual IChart Add();
    public abstract virtual IChart Add(string name);
    public abstract virtual IChart Remove(string name);
    public abstract virtual void AddCopy(IChart chartToCopy);
}
public interface Syncfusion.XlsIO.IChartSerie {
    public Nullable`1<bool> InvertIfNegative { get; public set; }
    public ColorObject InvertIfNegativeColor { get; public set; }
    public IRange Values { get; public set; }
    public IRange CategoryLabels { get; public set; }
    public IRange Bubbles { get; public set; }
    public string Name { get; public set; }
    public IRange NameRange { get; }
    public bool UsePrimaryAxis { get; public set; }
    public IChartDataPoints DataPoints { get; }
    public IChartSerieDataFormat SerieFormat { get; }
    public ExcelChartType SerieType { get; public set; }
    public Object[] EnteredDirectlyValues { get; public set; }
    public Object[] EnteredDirectlyCategoryLabels { get; public set; }
    public Object[] EnteredDirectlyBubbles { get; public set; }
    public IChartErrorBars ErrorBarsY { get; }
    public bool HasErrorBarsY { get; public set; }
    public IChartErrorBars ErrorBarsX { get; }
    public bool HasErrorBarsX { get; public set; }
    public IChartTrendLines TrendLines { get; }
    public bool IsFiltered { get; public set; }
    public IChartFrameFormat ParetoLineFormat { get; }
    public bool HasLeaderLines { get; public set; }
    public IChartBorder LeaderLines { get; }
    public abstract virtual Nullable`1<bool> get_InvertIfNegative();
    public abstract virtual void set_InvertIfNegative(Nullable`1<bool> value);
    public abstract virtual ColorObject get_InvertIfNegativeColor();
    public abstract virtual void set_InvertIfNegativeColor(ColorObject value);
    public abstract virtual IRange get_Values();
    public abstract virtual void set_Values(IRange value);
    public abstract virtual IRange get_CategoryLabels();
    public abstract virtual void set_CategoryLabels(IRange value);
    public abstract virtual IRange get_Bubbles();
    public abstract virtual void set_Bubbles(IRange value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IRange get_NameRange();
    public abstract virtual bool get_UsePrimaryAxis();
    public abstract virtual void set_UsePrimaryAxis(bool value);
    public abstract virtual IChartDataPoints get_DataPoints();
    public abstract virtual IChartSerieDataFormat get_SerieFormat();
    public abstract virtual ExcelChartType get_SerieType();
    public abstract virtual void set_SerieType(ExcelChartType value);
    public abstract virtual Object[] get_EnteredDirectlyValues();
    public abstract virtual void set_EnteredDirectlyValues(Object[] value);
    public abstract virtual Object[] get_EnteredDirectlyCategoryLabels();
    public abstract virtual void set_EnteredDirectlyCategoryLabels(Object[] value);
    public abstract virtual Object[] get_EnteredDirectlyBubbles();
    public abstract virtual void set_EnteredDirectlyBubbles(Object[] value);
    public abstract virtual IChartErrorBars get_ErrorBarsY();
    public abstract virtual bool get_HasErrorBarsY();
    public abstract virtual void set_HasErrorBarsY(bool value);
    public abstract virtual IChartErrorBars get_ErrorBarsX();
    public abstract virtual bool get_HasErrorBarsX();
    public abstract virtual void set_HasErrorBarsX(bool value);
    public abstract virtual IChartTrendLines get_TrendLines();
    public abstract virtual bool get_IsFiltered();
    public abstract virtual void set_IsFiltered(bool value);
    public abstract virtual IChartFrameFormat get_ParetoLineFormat();
    public abstract virtual bool get_HasLeaderLines();
    public abstract virtual void set_HasLeaderLines(bool value);
    public abstract virtual IChartBorder get_LeaderLines();
    public abstract virtual IChartErrorBars ErrorBar(bool bIsY);
    public abstract virtual IChartErrorBars ErrorBar(bool bIsY, ExcelErrorBarInclude include);
    public abstract virtual IChartErrorBars ErrorBar(bool bIsY, ExcelErrorBarInclude include, ExcelErrorBarType type);
    public abstract virtual IChartErrorBars ErrorBar(bool bIsY, ExcelErrorBarInclude include, ExcelErrorBarType type, double numberValue);
    public abstract virtual IChartErrorBars ErrorBar(bool bIsY, IRange plusRange, IRange minusRange);
}
public interface Syncfusion.XlsIO.IChartSerieDataFormat {
    public IChartInterior AreaProperties { get; }
    public ExcelBaseFormat BarShapeBase { get; public set; }
    public ExcelTopFormat BarShapeTop { get; public set; }
    public Color MarkerBackgroundColor { get; public set; }
    public Color MarkerForegroundColor { get; public set; }
    public ExcelChartMarkerType MarkerStyle { get; public set; }
    public ExcelKnownColors MarkerForegroundColorIndex { get; public set; }
    public ExcelKnownColors MarkerBackgroundColorIndex { get; public set; }
    public int MarkerSize { get; public set; }
    public bool IsAutoMarker { get; public set; }
    public int Percent { get; public set; }
    public bool Is3DBubbles { get; public set; }
    public IChartFormat CommonSerieOptions { get; }
    public bool IsMarkerSupported { get; }
    public ExcelTreeMapLabelOption TreeMapLabelOption { get; public set; }
    public bool ShowConnectorLines { get; public set; }
    public bool ShowMeanLine { get; public set; }
    public bool ShowMeanMarkers { get; public set; }
    public bool ShowInnerPoints { get; public set; }
    public bool ShowOutlierPoints { get; public set; }
    public ExcelQuartileCalculation QuartileCalculationType { get; public set; }
    public abstract virtual IChartInterior get_AreaProperties();
    public abstract virtual ExcelBaseFormat get_BarShapeBase();
    public abstract virtual void set_BarShapeBase(ExcelBaseFormat value);
    public abstract virtual ExcelTopFormat get_BarShapeTop();
    public abstract virtual void set_BarShapeTop(ExcelTopFormat value);
    public abstract virtual Color get_MarkerBackgroundColor();
    public abstract virtual void set_MarkerBackgroundColor(Color value);
    public abstract virtual Color get_MarkerForegroundColor();
    public abstract virtual void set_MarkerForegroundColor(Color value);
    public abstract virtual ExcelChartMarkerType get_MarkerStyle();
    public abstract virtual void set_MarkerStyle(ExcelChartMarkerType value);
    public abstract virtual ExcelKnownColors get_MarkerForegroundColorIndex();
    public abstract virtual void set_MarkerForegroundColorIndex(ExcelKnownColors value);
    public abstract virtual ExcelKnownColors get_MarkerBackgroundColorIndex();
    public abstract virtual void set_MarkerBackgroundColorIndex(ExcelKnownColors value);
    public abstract virtual int get_MarkerSize();
    public abstract virtual void set_MarkerSize(int value);
    public abstract virtual bool get_IsAutoMarker();
    public abstract virtual void set_IsAutoMarker(bool value);
    public abstract virtual int get_Percent();
    public abstract virtual void set_Percent(int value);
    public abstract virtual bool get_Is3DBubbles();
    public abstract virtual void set_Is3DBubbles(bool value);
    public abstract virtual IChartFormat get_CommonSerieOptions();
    public abstract virtual bool get_IsMarkerSupported();
    public abstract virtual ExcelTreeMapLabelOption get_TreeMapLabelOption();
    public abstract virtual void set_TreeMapLabelOption(ExcelTreeMapLabelOption value);
    public abstract virtual bool get_ShowConnectorLines();
    public abstract virtual void set_ShowConnectorLines(bool value);
    public abstract virtual bool get_ShowMeanLine();
    public abstract virtual void set_ShowMeanLine(bool value);
    public abstract virtual bool get_ShowMeanMarkers();
    public abstract virtual void set_ShowMeanMarkers(bool value);
    public abstract virtual bool get_ShowInnerPoints();
    public abstract virtual void set_ShowInnerPoints(bool value);
    public abstract virtual bool get_ShowOutlierPoints();
    public abstract virtual void set_ShowOutlierPoints(bool value);
    public abstract virtual ExcelQuartileCalculation get_QuartileCalculationType();
    public abstract virtual void set_QuartileCalculationType(ExcelQuartileCalculation value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IChartSeries {
    public int Count { get; }
    public IChartSerie Item { get; }
    public IChartSerie Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IChartSerie get_Item(int index);
    public abstract virtual IChartSerie get_Item(string name);
    public abstract virtual IChartSerie Add();
    public abstract virtual IChartSerie Add(ExcelChartType serieType);
    public abstract virtual IChartSerie Add(string name);
    public abstract virtual IChartSerie Add(string name, ExcelChartType type);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void Remove(string serieName);
}
public interface Syncfusion.XlsIO.IChartSeriesAxis {
    [ObsoleteAttribute("Please, use TickLabelSpacing instead of it")]
public int LabelFrequency { get; public set; }
    public int TickLabelSpacing { get; public set; }
    [ObsoleteAttribute("Please, use TickMarkSpacing instead of it")]
public int TickMarksFrequency { get; public set; }
    public int TickMarkSpacing { get; public set; }
    public abstract virtual int get_LabelFrequency();
    public abstract virtual void set_LabelFrequency(int value);
    public abstract virtual int get_TickLabelSpacing();
    public abstract virtual void set_TickLabelSpacing(int value);
    public abstract virtual int get_TickMarksFrequency();
    public abstract virtual void set_TickMarksFrequency(int value);
    public abstract virtual int get_TickMarkSpacing();
    public abstract virtual void set_TickMarkSpacing(int value);
}
public interface Syncfusion.XlsIO.IChartShape {
    public int TopRow { get; public set; }
    public int BottomRow { get; public set; }
    public int LeftColumn { get; public set; }
    public int RightColumn { get; public set; }
    public string Name { get; public set; }
    public abstract virtual int get_TopRow();
    public abstract virtual void set_TopRow(int value);
    public abstract virtual int get_BottomRow();
    public abstract virtual void set_BottomRow(int value);
    public abstract virtual int get_LeftColumn();
    public abstract virtual void set_LeftColumn(int value);
    public abstract virtual int get_RightColumn();
    public abstract virtual void set_RightColumn(int value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IChartShapes {
    public int Count { get; }
    public IChartShape Item { get; }
    public IChartShape Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IChartShape get_Item(int index);
    public abstract virtual IChartShape get_Item(string name);
    public abstract virtual IChartShape Add();
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.XlsIO.IChartTextArea {
    public string Text { get; public set; }
    public IChartRichTextString RichText { get; }
    public int TextRotationAngle { get; public set; }
    public IChartFrameFormat FrameFormat { get; }
    public ExcelChartBackgroundMode BackgroundMode { get; public set; }
    public bool IsAutoMode { get; public set; }
    public IChartLayout Layout { get; public set; }
    public bool IsFormula { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual IChartRichTextString get_RichText();
    public abstract virtual int get_TextRotationAngle();
    public abstract virtual void set_TextRotationAngle(int value);
    public abstract virtual IChartFrameFormat get_FrameFormat();
    public abstract virtual ExcelChartBackgroundMode get_BackgroundMode();
    public abstract virtual void set_BackgroundMode(ExcelChartBackgroundMode value);
    public abstract virtual bool get_IsAutoMode();
    public abstract virtual void set_IsAutoMode(bool value);
    public abstract virtual IChartLayout get_Layout();
    public abstract virtual void set_Layout(IChartLayout value);
    public abstract virtual bool get_IsFormula();
    public abstract virtual void set_IsFormula(bool value);
}
public interface Syncfusion.XlsIO.IChartTrendLine {
    public IChartBorder Border { get; }
    public double Backward { get; public set; }
    public double Forward { get; public set; }
    public bool DisplayEquation { get; public set; }
    public bool DisplayRSquared { get; public set; }
    public double Intercept { get; public set; }
    public bool InterceptIsAuto { get; public set; }
    public ExcelTrendLineType Type { get; public set; }
    public int Order { get; public set; }
    public bool NameIsAuto { get; public set; }
    public string Name { get; public set; }
    public IChartTextArea DataLabel { get; }
    public IShadow Shadow { get; }
    public IThreeDFormat Chart3DOptions { get; }
    public abstract virtual IChartBorder get_Border();
    public abstract virtual double get_Backward();
    public abstract virtual void set_Backward(double value);
    public abstract virtual double get_Forward();
    public abstract virtual void set_Forward(double value);
    public abstract virtual bool get_DisplayEquation();
    public abstract virtual void set_DisplayEquation(bool value);
    public abstract virtual bool get_DisplayRSquared();
    public abstract virtual void set_DisplayRSquared(bool value);
    public abstract virtual double get_Intercept();
    public abstract virtual void set_Intercept(double value);
    public abstract virtual bool get_InterceptIsAuto();
    public abstract virtual void set_InterceptIsAuto(bool value);
    public abstract virtual ExcelTrendLineType get_Type();
    public abstract virtual void set_Type(ExcelTrendLineType value);
    public abstract virtual int get_Order();
    public abstract virtual void set_Order(int value);
    public abstract virtual bool get_NameIsAuto();
    public abstract virtual void set_NameIsAuto(bool value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IChartTextArea get_DataLabel();
    public abstract virtual IShadow get_Shadow();
    public abstract virtual IThreeDFormat get_Chart3DOptions();
    public abstract virtual void ClearFormats();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IChartTrendLines {
    public IChartTrendLine Item { get; }
    public int Count { get; }
    public abstract virtual IChartTrendLine get_Item(int iIndex);
    public abstract virtual IChartTrendLine Add();
    public abstract virtual IChartTrendLine Add(ExcelTrendLineType type);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void Clear();
    public abstract virtual int get_Count();
}
public interface Syncfusion.XlsIO.IChartValueAxis {
    public double MinimumValue { get; public set; }
    public double MaximumValue { get; public set; }
    public double MajorUnit { get; public set; }
    public double MinorUnit { get; public set; }
    [ObsoleteAttribute("This property is obsolete. Please use CrossesAt instead of it")]
public double CrossValue { get; public set; }
    public double CrossesAt { get; public set; }
    public bool IsAutoMin { get; public set; }
    public bool IsAutoMax { get; public set; }
    public bool IsAutoMajor { get; public set; }
    public bool IsAutoMinor { get; public set; }
    public bool IsAutoCross { get; public set; }
    public bool IsLogScale { get; public set; }
    public double LogBase { get; public set; }
    public bool IsMaxCross { get; public set; }
    public double DisplayUnitCustom { get; public set; }
    public ExcelChartDisplayUnit DisplayUnit { get; public set; }
    public bool HasDisplayUnitLabel { get; public set; }
    public IChartTextArea DisplayUnitLabel { get; }
    public abstract virtual double get_MinimumValue();
    public abstract virtual void set_MinimumValue(double value);
    public abstract virtual double get_MaximumValue();
    public abstract virtual void set_MaximumValue(double value);
    public abstract virtual double get_MajorUnit();
    public abstract virtual void set_MajorUnit(double value);
    public abstract virtual double get_MinorUnit();
    public abstract virtual void set_MinorUnit(double value);
    public abstract virtual double get_CrossValue();
    public abstract virtual void set_CrossValue(double value);
    public abstract virtual double get_CrossesAt();
    public abstract virtual void set_CrossesAt(double value);
    public abstract virtual bool get_IsAutoMin();
    public abstract virtual void set_IsAutoMin(bool value);
    public abstract virtual bool get_IsAutoMax();
    public abstract virtual void set_IsAutoMax(bool value);
    public abstract virtual bool get_IsAutoMajor();
    public abstract virtual void set_IsAutoMajor(bool value);
    public abstract virtual bool get_IsAutoMinor();
    public abstract virtual void set_IsAutoMinor(bool value);
    public abstract virtual bool get_IsAutoCross();
    public abstract virtual void set_IsAutoCross(bool value);
    public abstract virtual bool get_IsLogScale();
    public abstract virtual void set_IsLogScale(bool value);
    public abstract virtual double get_LogBase();
    public abstract virtual void set_LogBase(double value);
    public abstract virtual bool get_IsMaxCross();
    public abstract virtual void set_IsMaxCross(bool value);
    public abstract virtual double get_DisplayUnitCustom();
    public abstract virtual void set_DisplayUnitCustom(double value);
    public abstract virtual ExcelChartDisplayUnit get_DisplayUnit();
    public abstract virtual void set_DisplayUnit(ExcelChartDisplayUnit value);
    public abstract virtual bool get_HasDisplayUnitLabel();
    public abstract virtual void set_HasDisplayUnitLabel(bool value);
    public abstract virtual IChartTextArea get_DisplayUnitLabel();
}
public interface Syncfusion.XlsIO.IChartWallOrFloor {
    public UInt32 Thickness { get; public set; }
    public ExcelChartPictureType PictureUnit { get; public set; }
    public abstract virtual UInt32 get_Thickness();
    public abstract virtual void set_Thickness(UInt32 value);
    public abstract virtual ExcelChartPictureType get_PictureUnit();
    public abstract virtual void set_PictureUnit(ExcelChartPictureType value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ICheckBoxes {
    public int Count { get; }
    public ICheckBoxShape Item { get; }
    public ICheckBoxShape Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICheckBoxShape get_Item(int index);
    public abstract virtual ICheckBoxShape get_Item(string name);
    public abstract virtual ICheckBoxShape AddCheckBox(int row, int column, int height, int width);
}
public interface Syncfusion.XlsIO.ICheckBoxShape {
    public ExcelCheckState CheckState { get; public set; }
    public IRange LinkedCell { get; public set; }
    public abstract virtual ExcelCheckState get_CheckState();
    public abstract virtual void set_CheckState(ExcelCheckState value);
    public abstract virtual IRange get_LinkedCell();
    public abstract virtual void set_LinkedCell(IRange value);
}
public interface Syncfusion.XlsIO.IColorConditionValue {
    public Color FormatColorRGB { get; public set; }
    public ConditionValueType Type { get; public set; }
    public string Value { get; public set; }
    public ConditionalFormatOperator Operator { get; public set; }
    public abstract virtual Color get_FormatColorRGB();
    public abstract virtual void set_FormatColorRGB(Color value);
    public abstract virtual ConditionValueType get_Type();
    public abstract virtual void set_Type(ConditionValueType value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual ConditionalFormatOperator get_Operator();
    public abstract virtual void set_Operator(ConditionalFormatOperator value);
}
public interface Syncfusion.XlsIO.IColorScale {
    public IList`1<IColorConditionValue> Criteria { get; }
    public abstract virtual IList`1<IColorConditionValue> get_Criteria();
    public abstract virtual void SetConditionCount(int count);
}
public interface Syncfusion.XlsIO.ICombinedRange {
    public int CellsCount { get; }
    public string AddressGlobal2007 { get; }
    public string WorksheetName { get; }
    public abstract virtual string GetNewAddress(Dictionary`2<string, string> names, String& strSheetName);
    public abstract virtual IRange Clone(object parent, Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
    public abstract virtual void ClearConditionalFormats();
    public abstract virtual Rectangle[] GetRectangles();
    public abstract virtual int GetRectanglesCount();
    public abstract virtual int get_CellsCount();
    public abstract virtual string get_AddressGlobal2007();
    public abstract virtual string get_WorksheetName();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IComboBoxes {
    public int Count { get; }
    public IComboBoxShape Item { get; }
    public IComboBoxShape Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IComboBoxShape get_Item(int index);
    public abstract virtual IComboBoxShape get_Item(string name);
    public abstract virtual IComboBoxShape AddComboBox(int row, int column, int height, int width);
}
public interface Syncfusion.XlsIO.IComboBoxShape {
    public IRange ListFillRange { get; public set; }
    public IRange LinkedCell { get; public set; }
    public int SelectedIndex { get; public set; }
    public int DropDownLines { get; public set; }
    public bool Display3DShading { get; public set; }
    public string SelectedValue { get; }
    public abstract virtual IRange get_ListFillRange();
    public abstract virtual void set_ListFillRange(IRange value);
    public abstract virtual IRange get_LinkedCell();
    public abstract virtual void set_LinkedCell(IRange value);
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
    public abstract virtual int get_DropDownLines();
    public abstract virtual void set_DropDownLines(int value);
    public abstract virtual bool get_Display3DShading();
    public abstract virtual void set_Display3DShading(bool value);
    public abstract virtual string get_SelectedValue();
}
public interface Syncfusion.XlsIO.IComment {
    public string Author { get; }
    public bool IsVisible { get; public set; }
    public int Row { get; }
    public int Column { get; }
    public bool AutoSize { get; public set; }
    public abstract virtual string get_Author();
    public abstract virtual bool get_IsVisible();
    public abstract virtual void set_IsVisible(bool value);
    public abstract virtual int get_Row();
    public abstract virtual int get_Column();
    public abstract virtual bool get_AutoSize();
    public abstract virtual void set_AutoSize(bool value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IComments {
    public IApplication Application { get; }
    public int Count { get; }
    public object Parent { get; }
    public ICommentShape Item { get; }
    public ICommentShape Item { get; }
    public ICommentShape Item { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual int get_Count();
    public abstract virtual object get_Parent();
    public abstract virtual ICommentShape get_Item(int Index);
    public abstract virtual ICommentShape get_Item(int iRow, int iColumn);
    public abstract virtual ICommentShape get_Item(string name);
    public abstract virtual void Clear();
}
public interface Syncfusion.XlsIO.ICommentShape {
}
public class Syncfusion.XlsIO.IconConditionValue : ConditionValue {
    private ExcelIconSetType m_iconSet;
    private int m_index;
    public ExcelIconSetType IconSet { get; public set; }
    public int Index { get; public set; }
    public IconConditionValue(ExcelIconSetType icon, int index, ConditionValueType type, string value);
    public IconConditionValue(ExcelIconSetType icon, int index);
    public sealed virtual ExcelIconSetType get_IconSet();
    public sealed virtual void set_IconSet(ExcelIconSetType value);
    public sealed virtual int get_Index();
    public sealed virtual void set_Index(int value);
}
public interface Syncfusion.XlsIO.IConditionalFormat {
    public ExcelCFType FormatType { get; public set; }
    public CFTimePeriods TimePeriodType { get; public set; }
    public ExcelComparisonOperator Operator { get; public set; }
    public bool IsBold { get; public set; }
    public bool IsItalic { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool IsStrikeThrough { get; public set; }
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public string FirstFormula { get; public set; }
    public string FirstFormulaR1C1 { get; public set; }
    public string SecondFormula { get; public set; }
    public string SecondFormulaR1C1 { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public Color ColorRGB { get; public set; }
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern FillPattern { get; public set; }
    public bool IsSuperScript { get; public set; }
    public bool IsSubScript { get; public set; }
    public bool IsFontFormatPresent { get; public set; }
    public bool IsBorderFormatPresent { get; public set; }
    public bool IsPatternFormatPresent { get; public set; }
    public bool IsFontColorPresent { get; public set; }
    public bool IsPatternColorPresent { get; public set; }
    public bool IsBackgroundColorPresent { get; public set; }
    public bool IsLeftBorderModified { get; public set; }
    public bool IsRightBorderModified { get; public set; }
    public bool IsTopBorderModified { get; public set; }
    public bool IsBottomBorderModified { get; public set; }
    public IDataBar DataBar { get; }
    public IIconSet IconSet { get; }
    public IColorScale ColorScale { get; }
    public string NumberFormat { get; public set; }
    public bool StopIfTrue { get; public set; }
    public string Text { get; public set; }
    public ITopBottom TopBottom { get; }
    public IAboveBelowAverage AboveBelowAverage { get; }
    public abstract virtual ExcelCFType get_FormatType();
    public abstract virtual void set_FormatType(ExcelCFType value);
    public abstract virtual CFTimePeriods get_TimePeriodType();
    public abstract virtual void set_TimePeriodType(CFTimePeriods value);
    public abstract virtual ExcelComparisonOperator get_Operator();
    public abstract virtual void set_Operator(ExcelComparisonOperator value);
    public abstract virtual bool get_IsBold();
    public abstract virtual void set_IsBold(bool value);
    public abstract virtual bool get_IsItalic();
    public abstract virtual void set_IsItalic(bool value);
    public abstract virtual ExcelKnownColors get_FontColor();
    public abstract virtual void set_FontColor(ExcelKnownColors value);
    public abstract virtual Color get_FontColorRGB();
    public abstract virtual void set_FontColorRGB(Color value);
    public abstract virtual ExcelUnderline get_Underline();
    public abstract virtual void set_Underline(ExcelUnderline value);
    public abstract virtual bool get_IsStrikeThrough();
    public abstract virtual void set_IsStrikeThrough(bool value);
    public abstract virtual ExcelKnownColors get_LeftBorderColor();
    public abstract virtual void set_LeftBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_LeftBorderColorRGB();
    public abstract virtual void set_LeftBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_LeftBorderStyle();
    public abstract virtual void set_LeftBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_RightBorderColor();
    public abstract virtual void set_RightBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_RightBorderColorRGB();
    public abstract virtual void set_RightBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_RightBorderStyle();
    public abstract virtual void set_RightBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_TopBorderColor();
    public abstract virtual void set_TopBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_TopBorderColorRGB();
    public abstract virtual void set_TopBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_TopBorderStyle();
    public abstract virtual void set_TopBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_BottomBorderColor();
    public abstract virtual void set_BottomBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_BottomBorderColorRGB();
    public abstract virtual void set_BottomBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_BottomBorderStyle();
    public abstract virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public abstract virtual string get_FirstFormula();
    public abstract virtual void set_FirstFormula(string value);
    public abstract virtual string get_FirstFormulaR1C1();
    public abstract virtual void set_FirstFormulaR1C1(string value);
    public abstract virtual string get_SecondFormula();
    public abstract virtual void set_SecondFormula(string value);
    public abstract virtual string get_SecondFormulaR1C1();
    public abstract virtual void set_SecondFormulaR1C1(string value);
    public abstract virtual ExcelKnownColors get_Color();
    public abstract virtual void set_Color(ExcelKnownColors value);
    public abstract virtual ExcelGradientStyle get_GradientStyle();
    public abstract virtual void set_GradientStyle(ExcelGradientStyle value);
    public abstract virtual ExcelGradientVariants get_GradientVariant();
    public abstract virtual void set_GradientVariant(ExcelGradientVariants value);
    public abstract virtual Color get_ColorRGB();
    public abstract virtual void set_ColorRGB(Color value);
    public abstract virtual ExcelKnownColors get_BackColor();
    public abstract virtual void set_BackColor(ExcelKnownColors value);
    public abstract virtual Color get_BackColorRGB();
    public abstract virtual void set_BackColorRGB(Color value);
    public abstract virtual ExcelPattern get_FillPattern();
    public abstract virtual void set_FillPattern(ExcelPattern value);
    public abstract virtual bool get_IsSuperScript();
    public abstract virtual void set_IsSuperScript(bool value);
    public abstract virtual bool get_IsSubScript();
    public abstract virtual void set_IsSubScript(bool value);
    public abstract virtual bool get_IsFontFormatPresent();
    public abstract virtual void set_IsFontFormatPresent(bool value);
    public abstract virtual bool get_IsBorderFormatPresent();
    public abstract virtual void set_IsBorderFormatPresent(bool value);
    public abstract virtual bool get_IsPatternFormatPresent();
    public abstract virtual void set_IsPatternFormatPresent(bool value);
    public abstract virtual bool get_IsFontColorPresent();
    public abstract virtual void set_IsFontColorPresent(bool value);
    public abstract virtual bool get_IsPatternColorPresent();
    public abstract virtual void set_IsPatternColorPresent(bool value);
    public abstract virtual bool get_IsBackgroundColorPresent();
    public abstract virtual void set_IsBackgroundColorPresent(bool value);
    public abstract virtual bool get_IsLeftBorderModified();
    public abstract virtual void set_IsLeftBorderModified(bool value);
    public abstract virtual bool get_IsRightBorderModified();
    public abstract virtual void set_IsRightBorderModified(bool value);
    public abstract virtual bool get_IsTopBorderModified();
    public abstract virtual void set_IsTopBorderModified(bool value);
    public abstract virtual bool get_IsBottomBorderModified();
    public abstract virtual void set_IsBottomBorderModified(bool value);
    public abstract virtual IDataBar get_DataBar();
    public abstract virtual IIconSet get_IconSet();
    public abstract virtual IColorScale get_ColorScale();
    public abstract virtual string get_NumberFormat();
    public abstract virtual void set_NumberFormat(string value);
    public abstract virtual bool get_StopIfTrue();
    public abstract virtual void set_StopIfTrue(bool value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual ITopBottom get_TopBottom();
    public abstract virtual IAboveBelowAverage get_AboveBelowAverage();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IConditionalFormats {
    public int Count { get; }
    public IConditionalFormat Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IConditionalFormat get_Item(int index);
    public abstract virtual IConditionalFormat AddCondition();
    public abstract virtual void Remove();
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.XlsIO.IConditionValue {
    public ConditionValueType Type { get; public set; }
    public string Value { get; public set; }
    public ConditionalFormatOperator Operator { get; public set; }
    public abstract virtual ConditionValueType get_Type();
    public abstract virtual void set_Type(ConditionValueType value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual ConditionalFormatOperator get_Operator();
    public abstract virtual void set_Operator(ConditionalFormatOperator value);
}
public interface Syncfusion.XlsIO.IConnection {
    public string Name { get; public set; }
    public string Description { get; public set; }
    public IRange Range { get; }
    public OLEDBConnection OLEDBConnection { get; }
    public ODBCConnection ODBCConnection { get; }
    public UInt32 ConncetionId { get; }
    public UInt32 ConnectionId { get; }
    public ExcelConnectionsType DataBaseType { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual IRange get_Range();
    public abstract virtual OLEDBConnection get_OLEDBConnection();
    public abstract virtual ODBCConnection get_ODBCConnection();
    public abstract virtual void Delete();
    public abstract virtual UInt32 get_ConncetionId();
    public abstract virtual UInt32 get_ConnectionId();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnConnectionPassword(ConnectionPasswordEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnConnectionPassword(ConnectionPasswordEventHandler value);
    public abstract virtual ExcelConnectionsType get_DataBaseType();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IConnections {
    public IConnection Item { get; }
    public abstract virtual IConnection Add(string ConnectionName, string Description, object ConnectionString, object CommandText, ExcelCommandType CommandType);
    public abstract virtual IConnection get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ICustomDocumentProperties {
    public IDocumentProperty Item { get; }
    public IDocumentProperty Item { get; }
    public int Count { get; }
    public abstract virtual IDocumentProperty get_Item(string strName);
    public abstract virtual IDocumentProperty get_Item(int iIndex);
    public abstract virtual int get_Count();
    public abstract virtual void Remove(string strName);
    public abstract virtual bool Contains(string strName);
    public abstract virtual void Clear();
}
public interface Syncfusion.XlsIO.ICustomProperty {
    public string Name { get; }
    public string Value { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
public interface Syncfusion.XlsIO.ICustomXmlPart {
    public Byte[] Data { get; public set; }
    public string Id { get; public set; }
    public ICustomXmlSchemaCollection Schemas { get; }
    public abstract virtual Byte[] get_Data();
    public abstract virtual void set_Data(Byte[] value);
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual ICustomXmlSchemaCollection get_Schemas();
    public abstract virtual ICustomXmlPart Clone();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ICustomXmlPartCollection {
    public int Count { get; }
    public ICustomXmlPart Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ICustomXmlPart get_Item(int index);
    public abstract virtual ICustomXmlPart Add(ICustomXmlPart customXmlPart);
    public abstract virtual ICustomXmlPart Add(string ID);
    public abstract virtual ICustomXmlPart Add(string ID, Byte[] XmlData);
    public abstract virtual void Clear();
    public abstract virtual void RemoveAt(int index);
    public abstract virtual ICustomXmlPartCollection Clone();
    public abstract virtual ICustomXmlPart GetById(string id);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ICustomXmlSchemaCollection {
    public int Count { get; }
    public string Item { get; public set; }
    public abstract virtual int get_Count();
    public abstract virtual string get_Item(int index);
    public abstract virtual void set_Item(int index, string value);
    public abstract virtual void Add(string name);
    public abstract virtual void Clear();
    public abstract virtual ICustomXmlSchemaCollection Clone();
    public abstract virtual int IndexOf(string value);
    public abstract virtual void Remove(string name);
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.XlsIO.IDataBar {
    public IConditionValue MinPoint { get; }
    public IConditionValue MaxPoint { get; }
    public Color BarColor { get; public set; }
    public int PercentMax { get; public set; }
    public int PercentMin { get; public set; }
    public bool ShowValue { get; public set; }
    public Color BarAxisColor { get; public set; }
    public Color BorderColor { get; public set; }
    public bool HasBorder { get; }
    public bool HasGradientFill { get; public set; }
    public DataBarDirection DataBarDirection { get; public set; }
    public Color NegativeBorderColor { get; public set; }
    public Color NegativeFillColor { get; public set; }
    public DataBarAxisPosition DataBarAxisPosition { get; public set; }
    public abstract virtual IConditionValue get_MinPoint();
    public abstract virtual IConditionValue get_MaxPoint();
    public abstract virtual Color get_BarColor();
    public abstract virtual void set_BarColor(Color value);
    public abstract virtual int get_PercentMax();
    public abstract virtual void set_PercentMax(int value);
    public abstract virtual int get_PercentMin();
    public abstract virtual void set_PercentMin(int value);
    public abstract virtual bool get_ShowValue();
    public abstract virtual void set_ShowValue(bool value);
    public abstract virtual Color get_BarAxisColor();
    public abstract virtual void set_BarAxisColor(Color value);
    public abstract virtual Color get_BorderColor();
    public abstract virtual void set_BorderColor(Color value);
    public abstract virtual bool get_HasBorder();
    public abstract virtual bool get_HasGradientFill();
    public abstract virtual void set_HasGradientFill(bool value);
    public abstract virtual DataBarDirection get_DataBarDirection();
    public abstract virtual void set_DataBarDirection(DataBarDirection value);
    public abstract virtual Color get_NegativeBorderColor();
    public abstract virtual void set_NegativeBorderColor(Color value);
    public abstract virtual Color get_NegativeFillColor();
    public abstract virtual void set_NegativeFillColor(Color value);
    public abstract virtual DataBarAxisPosition get_DataBarAxisPosition();
    public abstract virtual void set_DataBarAxisPosition(DataBarAxisPosition value);
}
public interface Syncfusion.XlsIO.IDataSort {
    public bool IsCaseSensitive { get; public set; }
    public bool HasHeader { get; public set; }
    public SortOrientation Orientation { get; public set; }
    public ISortFields SortFields { get; public set; }
    public IRange SortRange { get; public set; }
    public SortingAlgorithms Algorithm { get; public set; }
    public abstract virtual bool get_IsCaseSensitive();
    public abstract virtual void set_IsCaseSensitive(bool value);
    public abstract virtual bool get_HasHeader();
    public abstract virtual void set_HasHeader(bool value);
    public abstract virtual SortOrientation get_Orientation();
    public abstract virtual void set_Orientation(SortOrientation value);
    public abstract virtual ISortFields get_SortFields();
    public abstract virtual void set_SortFields(ISortFields value);
    public abstract virtual IRange get_SortRange();
    public abstract virtual void set_SortRange(IRange value);
    public abstract virtual SortingAlgorithms get_Algorithm();
    public abstract virtual void set_Algorithm(SortingAlgorithms value);
    public abstract virtual void Sort();
}
public interface Syncfusion.XlsIO.IDataValidation {
    public string PromptBoxTitle { get; public set; }
    public string PromptBoxText { get; public set; }
    public string ErrorBoxTitle { get; public set; }
    public string ErrorBoxText { get; public set; }
    public string FirstFormula { get; public set; }
    public DateTime FirstDateTime { get; public set; }
    public string SecondFormula { get; public set; }
    public DateTime SecondDateTime { get; public set; }
    public ExcelDataType AllowType { get; public set; }
    public ExcelDataValidationComparisonOperator CompareOperator { get; public set; }
    public bool IsListInFormula { get; public set; }
    public bool IsEmptyCellAllowed { get; public set; }
    public bool IsSuppressDropDownArrow { get; public set; }
    public bool ShowPromptBox { get; public set; }
    public bool ShowErrorBox { get; public set; }
    public int PromptBoxHPosition { get; public set; }
    public int PromptBoxVPosition { get; public set; }
    public bool IsPromptBoxVisible { get; public set; }
    public bool IsPromptBoxPositionFixed { get; public set; }
    public ExcelErrorStyle ErrorStyle { get; public set; }
    public String[] ListOfValues { get; public set; }
    public IRange DataRange { get; public set; }
    public abstract virtual string get_PromptBoxTitle();
    public abstract virtual void set_PromptBoxTitle(string value);
    public abstract virtual string get_PromptBoxText();
    public abstract virtual void set_PromptBoxText(string value);
    public abstract virtual string get_ErrorBoxTitle();
    public abstract virtual void set_ErrorBoxTitle(string value);
    public abstract virtual string get_ErrorBoxText();
    public abstract virtual void set_ErrorBoxText(string value);
    public abstract virtual string get_FirstFormula();
    public abstract virtual void set_FirstFormula(string value);
    public abstract virtual DateTime get_FirstDateTime();
    public abstract virtual void set_FirstDateTime(DateTime value);
    public abstract virtual string get_SecondFormula();
    public abstract virtual void set_SecondFormula(string value);
    public abstract virtual DateTime get_SecondDateTime();
    public abstract virtual void set_SecondDateTime(DateTime value);
    public abstract virtual ExcelDataType get_AllowType();
    public abstract virtual void set_AllowType(ExcelDataType value);
    public abstract virtual ExcelDataValidationComparisonOperator get_CompareOperator();
    public abstract virtual void set_CompareOperator(ExcelDataValidationComparisonOperator value);
    public abstract virtual bool get_IsListInFormula();
    public abstract virtual void set_IsListInFormula(bool value);
    public abstract virtual bool get_IsEmptyCellAllowed();
    public abstract virtual void set_IsEmptyCellAllowed(bool value);
    public abstract virtual bool get_IsSuppressDropDownArrow();
    public abstract virtual void set_IsSuppressDropDownArrow(bool value);
    public abstract virtual bool get_ShowPromptBox();
    public abstract virtual void set_ShowPromptBox(bool value);
    public abstract virtual bool get_ShowErrorBox();
    public abstract virtual void set_ShowErrorBox(bool value);
    public abstract virtual int get_PromptBoxHPosition();
    public abstract virtual void set_PromptBoxHPosition(int value);
    public abstract virtual int get_PromptBoxVPosition();
    public abstract virtual void set_PromptBoxVPosition(int value);
    public abstract virtual bool get_IsPromptBoxVisible();
    public abstract virtual void set_IsPromptBoxVisible(bool value);
    public abstract virtual bool get_IsPromptBoxPositionFixed();
    public abstract virtual void set_IsPromptBoxPositionFixed(bool value);
    public abstract virtual ExcelErrorStyle get_ErrorStyle();
    public abstract virtual void set_ErrorStyle(ExcelErrorStyle value);
    public abstract virtual String[] get_ListOfValues();
    public abstract virtual void set_ListOfValues(String[] value);
    public abstract virtual IRange get_DataRange();
    public abstract virtual void set_DataRange(IRange value);
}
public interface Syncfusion.XlsIO.IErrorIndicator {
    public ExcelIgnoreError IgnoreOptions { get; public set; }
    public abstract virtual ExcelIgnoreError get_IgnoreOptions();
    public abstract virtual void set_IgnoreOptions(ExcelIgnoreError value);
}
public interface Syncfusion.XlsIO.IExtendedFormat {
    public IBorders Borders { get; }
    [ObsoleteAttribute("Use ColorIndex instead of this property.")]
public ExcelKnownColors FillBackground { get; public set; }
    [ObsoleteAttribute("Use Color instead of this property.")]
public Color FillBackgroundRGB { get; public set; }
    [ObsoleteAttribute("Use PatternColorIndex instead of this property.")]
public ExcelKnownColors FillForeground { get; public set; }
    [ObsoleteAttribute("Use PatternColor instead of this property.")]
public Color FillForegroundRGB { get; public set; }
    public ExcelPattern FillPattern { get; public set; }
    public IFont Font { get; }
    public bool FormulaHidden { get; public set; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public bool IncludeAlignment { get; public set; }
    public bool IncludeBorder { get; public set; }
    public bool IncludeFont { get; public set; }
    public bool IncludeNumberFormat { get; public set; }
    public bool IncludePatterns { get; public set; }
    public bool IncludeProtection { get; public set; }
    public int IndentLevel { get; public set; }
    public bool IsFirstSymbolApostrophe { get; public set; }
    public bool Locked { get; public set; }
    public bool JustifyLast { get; public set; }
    public string NumberFormat { get; public set; }
    public int NumberFormatIndex { get; public set; }
    public string NumberFormatLocal { get; public set; }
    public INumberFormat NumberFormatSettings { get; }
    public ExcelReadingOrderType ReadingOrder { get; public set; }
    public int Rotation { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public bool WrapText { get; public set; }
    public ExcelKnownColors PatternColorIndex { get; public set; }
    public Color PatternColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public bool IsModified { get; }
    public bool HasBorder { get; }
    public abstract virtual IBorders get_Borders();
    public abstract virtual ExcelKnownColors get_FillBackground();
    public abstract virtual void set_FillBackground(ExcelKnownColors value);
    public abstract virtual Color get_FillBackgroundRGB();
    public abstract virtual void set_FillBackgroundRGB(Color value);
    public abstract virtual ExcelKnownColors get_FillForeground();
    public abstract virtual void set_FillForeground(ExcelKnownColors value);
    public abstract virtual Color get_FillForegroundRGB();
    public abstract virtual void set_FillForegroundRGB(Color value);
    public abstract virtual ExcelPattern get_FillPattern();
    public abstract virtual void set_FillPattern(ExcelPattern value);
    public abstract virtual IFont get_Font();
    public abstract virtual bool get_FormulaHidden();
    public abstract virtual void set_FormulaHidden(bool value);
    public abstract virtual ExcelHAlign get_HorizontalAlignment();
    public abstract virtual void set_HorizontalAlignment(ExcelHAlign value);
    public abstract virtual bool get_IncludeAlignment();
    public abstract virtual void set_IncludeAlignment(bool value);
    public abstract virtual bool get_IncludeBorder();
    public abstract virtual void set_IncludeBorder(bool value);
    public abstract virtual bool get_IncludeFont();
    public abstract virtual void set_IncludeFont(bool value);
    public abstract virtual bool get_IncludeNumberFormat();
    public abstract virtual void set_IncludeNumberFormat(bool value);
    public abstract virtual bool get_IncludePatterns();
    public abstract virtual void set_IncludePatterns(bool value);
    public abstract virtual bool get_IncludeProtection();
    public abstract virtual void set_IncludeProtection(bool value);
    public abstract virtual int get_IndentLevel();
    public abstract virtual void set_IndentLevel(int value);
    public abstract virtual bool get_IsFirstSymbolApostrophe();
    public abstract virtual void set_IsFirstSymbolApostrophe(bool value);
    public abstract virtual bool get_Locked();
    public abstract virtual void set_Locked(bool value);
    public abstract virtual bool get_JustifyLast();
    public abstract virtual void set_JustifyLast(bool value);
    public abstract virtual string get_NumberFormat();
    public abstract virtual void set_NumberFormat(string value);
    public abstract virtual int get_NumberFormatIndex();
    public abstract virtual void set_NumberFormatIndex(int value);
    public abstract virtual string get_NumberFormatLocal();
    public abstract virtual void set_NumberFormatLocal(string value);
    public abstract virtual INumberFormat get_NumberFormatSettings();
    public abstract virtual ExcelReadingOrderType get_ReadingOrder();
    public abstract virtual void set_ReadingOrder(ExcelReadingOrderType value);
    public abstract virtual int get_Rotation();
    public abstract virtual void set_Rotation(int value);
    public abstract virtual bool get_ShrinkToFit();
    public abstract virtual void set_ShrinkToFit(bool value);
    public abstract virtual ExcelVAlign get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(ExcelVAlign value);
    public abstract virtual bool get_WrapText();
    public abstract virtual void set_WrapText(bool value);
    public abstract virtual ExcelKnownColors get_PatternColorIndex();
    public abstract virtual void set_PatternColorIndex(ExcelKnownColors value);
    public abstract virtual Color get_PatternColor();
    public abstract virtual void set_PatternColor(Color value);
    public abstract virtual ExcelKnownColors get_ColorIndex();
    public abstract virtual void set_ColorIndex(ExcelKnownColors value);
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual bool get_IsModified();
    public abstract virtual bool get_HasBorder();
}
public interface Syncfusion.XlsIO.IFill {
    public ExcelFillType FillType { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public double TransparencyTo { get; public set; }
    public double TransparencyFrom { get; public set; }
    public ExcelGradientColor GradientColorType { get; public set; }
    public ExcelGradientPattern Pattern { get; public set; }
    public ExcelTexture Texture { get; public set; }
    public ExcelKnownColors BackColorIndex { get; public set; }
    public ExcelKnownColors ForeColorIndex { get; public set; }
    public Color BackColor { get; public set; }
    public Color ForeColor { get; public set; }
    public ExcelGradientPreset PresetGradientType { get; public set; }
    public float TransparencyColor { get; public set; }
    public Image Picture { get; }
    public string PictureName { get; }
    public bool Visible { get; public set; }
    public double GradientDegree { get; public set; }
    public double Transparency { get; public set; }
    public float TextureVerticalScale { get; public set; }
    public float TextureHorizontalScale { get; public set; }
    public float TextureOffsetX { get; public set; }
    public float TextureOffsetY { get; public set; }
    public abstract virtual ExcelFillType get_FillType();
    public abstract virtual void set_FillType(ExcelFillType value);
    public abstract virtual ExcelGradientStyle get_GradientStyle();
    public abstract virtual void set_GradientStyle(ExcelGradientStyle value);
    public abstract virtual ExcelGradientVariants get_GradientVariant();
    public abstract virtual void set_GradientVariant(ExcelGradientVariants value);
    public abstract virtual double get_TransparencyTo();
    public abstract virtual void set_TransparencyTo(double value);
    public abstract virtual double get_TransparencyFrom();
    public abstract virtual void set_TransparencyFrom(double value);
    public abstract virtual ExcelGradientColor get_GradientColorType();
    public abstract virtual void set_GradientColorType(ExcelGradientColor value);
    public abstract virtual ExcelGradientPattern get_Pattern();
    public abstract virtual void set_Pattern(ExcelGradientPattern value);
    public abstract virtual ExcelTexture get_Texture();
    public abstract virtual void set_Texture(ExcelTexture value);
    public abstract virtual ExcelKnownColors get_BackColorIndex();
    public abstract virtual void set_BackColorIndex(ExcelKnownColors value);
    public abstract virtual ExcelKnownColors get_ForeColorIndex();
    public abstract virtual void set_ForeColorIndex(ExcelKnownColors value);
    public abstract virtual Color get_BackColor();
    public abstract virtual void set_BackColor(Color value);
    public abstract virtual Color get_ForeColor();
    public abstract virtual void set_ForeColor(Color value);
    public abstract virtual ExcelGradientPreset get_PresetGradientType();
    public abstract virtual void set_PresetGradientType(ExcelGradientPreset value);
    public abstract virtual float get_TransparencyColor();
    public abstract virtual void set_TransparencyColor(float value);
    public abstract virtual Image get_Picture();
    public abstract virtual string get_PictureName();
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual double get_GradientDegree();
    public abstract virtual void set_GradientDegree(double value);
    public abstract virtual double get_Transparency();
    public abstract virtual void set_Transparency(double value);
    public abstract virtual float get_TextureVerticalScale();
    public abstract virtual void set_TextureVerticalScale(float value);
    public abstract virtual float get_TextureHorizontalScale();
    public abstract virtual void set_TextureHorizontalScale(float value);
    public abstract virtual float get_TextureOffsetX();
    public abstract virtual void set_TextureOffsetX(float value);
    public abstract virtual float get_TextureOffsetY();
    public abstract virtual void set_TextureOffsetY(float value);
    public abstract virtual void UserPicture(Image im, string name);
    public abstract virtual void UserTexture(Image im, string name);
    public abstract virtual void Patterned(ExcelGradientPattern pattern);
    public abstract virtual void PresetGradient(ExcelGradientPreset grad);
    public abstract virtual void PresetGradient(ExcelGradientPreset grad, ExcelGradientStyle shadStyle);
    public abstract virtual void PresetGradient(ExcelGradientPreset grad, ExcelGradientStyle shadStyle, ExcelGradientVariants shadVar);
    public abstract virtual void PresetTextured(ExcelTexture texture);
    public abstract virtual void TwoColorGradient();
    public abstract virtual void TwoColorGradient(ExcelGradientStyle style);
    public abstract virtual void TwoColorGradient(ExcelGradientStyle style, ExcelGradientVariants variant);
    public abstract virtual void OneColorGradient();
    public abstract virtual void OneColorGradient(ExcelGradientStyle style);
    public abstract virtual void OneColorGradient(ExcelGradientStyle style, ExcelGradientVariants variant);
    public abstract virtual void Solid();
}
internal interface Syncfusion.XlsIO.IFillColor {
    public ColorObject ForeGroundColorObject { get; }
    public ColorObject BackGroundColorObject { get; }
    public ExcelPattern Pattern { get; public set; }
    public bool IsAutomaticFormat { get; public set; }
    public IFill Fill { get; }
    public bool Visible { get; public set; }
    public abstract virtual ColorObject get_ForeGroundColorObject();
    public abstract virtual ColorObject get_BackGroundColorObject();
    public abstract virtual ExcelPattern get_Pattern();
    public abstract virtual void set_Pattern(ExcelPattern value);
    public abstract virtual bool get_IsAutomaticFormat();
    public abstract virtual void set_IsAutomaticFormat(bool value);
    public abstract virtual IFill get_Fill();
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
}
public interface Syncfusion.XlsIO.IFont {
    public bool Bold { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color RGBColor { get; public set; }
    public bool Italic { get; public set; }
    public bool MacOSOutlineFont { get; public set; }
    public bool MacOSShadow { get; public set; }
    public double Size { get; public set; }
    public bool Strikethrough { get; public set; }
    public bool Subscript { get; public set; }
    public bool Superscript { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public string FontName { get; public set; }
    public ExcelFontVertialAlignment VerticalAlignment { get; public set; }
    public bool IsAutoColor { get; }
    public abstract virtual bool get_Bold();
    public abstract virtual void set_Bold(bool value);
    public abstract virtual ExcelKnownColors get_Color();
    public abstract virtual void set_Color(ExcelKnownColors value);
    public abstract virtual Color get_RGBColor();
    public abstract virtual void set_RGBColor(Color value);
    public abstract virtual bool get_Italic();
    public abstract virtual void set_Italic(bool value);
    public abstract virtual bool get_MacOSOutlineFont();
    public abstract virtual void set_MacOSOutlineFont(bool value);
    public abstract virtual bool get_MacOSShadow();
    public abstract virtual void set_MacOSShadow(bool value);
    public abstract virtual double get_Size();
    public abstract virtual void set_Size(double value);
    public abstract virtual bool get_Strikethrough();
    public abstract virtual void set_Strikethrough(bool value);
    public abstract virtual bool get_Subscript();
    public abstract virtual void set_Subscript(bool value);
    public abstract virtual bool get_Superscript();
    public abstract virtual void set_Superscript(bool value);
    public abstract virtual ExcelUnderline get_Underline();
    public abstract virtual void set_Underline(ExcelUnderline value);
    public abstract virtual string get_FontName();
    public abstract virtual void set_FontName(string value);
    public abstract virtual ExcelFontVertialAlignment get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(ExcelFontVertialAlignment value);
    public abstract virtual bool get_IsAutoColor();
    public abstract virtual Font GenerateNativeFont();
}
public interface Syncfusion.XlsIO.IGroupShape {
    public IShape[] Items { get; }
    public abstract virtual IShape[] get_Items();
}
public interface Syncfusion.XlsIO.IHFEngine {
    public abstract virtual void Parse(string strText);
    public abstract virtual string GetHeaderFooterString();
}
public interface Syncfusion.XlsIO.IHPageBreak {
    public IApplication Application { get; }
    public IRange Location { get; public set; }
    public object Parent { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual IRange get_Location();
    public abstract virtual void set_Location(IRange value);
    public abstract virtual object get_Parent();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IHPageBreaks {
    public IApplication Application { get; }
    public int Count { get; }
    public IHPageBreak Item { get; }
    public IHPageBreak Item { get; }
    public object Parent { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual int get_Count();
    public abstract virtual IHPageBreak get_Item(int Index);
    public abstract virtual IHPageBreak get_Item(IRange location);
    public abstract virtual object get_Parent();
    public abstract virtual IHPageBreak Add(IRange location);
    public abstract virtual IHPageBreak Remove(IRange location);
    public abstract virtual IHPageBreak GetPageBreak(int iRow);
    public abstract virtual void Clear();
}
public interface Syncfusion.XlsIO.IHyperLink {
    public string Address { get; public set; }
    public string Name { get; }
    public IRange Range { get; }
    public string ScreenTip { get; public set; }
    public string SubAddress { get; public set; }
    public string TextToDisplay { get; public set; }
    public ExcelHyperLinkType Type { get; public set; }
    public IShape Shape { get; }
    public ExcelHyperlinkAttachedType AttachedType { get; }
    public abstract virtual string get_Address();
    public abstract virtual void set_Address(string value);
    public abstract virtual string get_Name();
    public abstract virtual IRange get_Range();
    public abstract virtual string get_ScreenTip();
    public abstract virtual void set_ScreenTip(string value);
    public abstract virtual string get_SubAddress();
    public abstract virtual void set_SubAddress(string value);
    public abstract virtual string get_TextToDisplay();
    public abstract virtual void set_TextToDisplay(string value);
    public abstract virtual ExcelHyperLinkType get_Type();
    public abstract virtual void set_Type(ExcelHyperLinkType value);
    public abstract virtual IShape get_Shape();
    public abstract virtual ExcelHyperlinkAttachedType get_AttachedType();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IHyperLinks {
    public int Count { get; }
    public IHyperLink Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IHyperLink get_Item(int index);
    public abstract virtual IHyperLink Add(IRange range);
    public abstract virtual IHyperLink Add(IRange range, ExcelHyperLinkType hyperlinkType, string address, string screenTip);
    public abstract virtual IHyperLink Add(IShape shape);
    public abstract virtual IHyperLink Add(IShape shape, ExcelHyperLinkType hyperlinkType, string address, string screenTip);
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.XlsIO.IIconConditionValue {
    public ExcelIconSetType IconSet { get; public set; }
    public int Index { get; public set; }
    public abstract virtual ExcelIconSetType get_IconSet();
    public abstract virtual void set_IconSet(ExcelIconSetType value);
    public abstract virtual int get_Index();
    public abstract virtual void set_Index(int value);
}
public interface Syncfusion.XlsIO.IIconSet {
    public IList`1<IConditionValue> IconCriteria { get; }
    public ExcelIconSetType IconSet { get; public set; }
    public bool PercentileValues { get; public set; }
    public bool ReverseOrder { get; public set; }
    public bool ShowIconOnly { get; public set; }
    public abstract virtual IList`1<IConditionValue> get_IconCriteria();
    public abstract virtual ExcelIconSetType get_IconSet();
    public abstract virtual void set_IconSet(ExcelIconSetType value);
    public abstract virtual bool get_PercentileValues();
    public abstract virtual void set_PercentileValues(bool value);
    public abstract virtual bool get_ReverseOrder();
    public abstract virtual void set_ReverseOrder(bool value);
    public abstract virtual bool get_ShowIconOnly();
    public abstract virtual void set_ShowIconOnly(bool value);
}
internal interface Syncfusion.XlsIO.IInternalPivotCellFormat {
    public ColorObject ColorObject { get; }
    public ColorObject BackColorObject { get; }
    public ColorObject TopBorderColorObject { get; }
    public ColorObject BottomBorderColorObject { get; }
    public ColorObject LeftBorderColorObject { get; }
    public ColorObject RightBorderColorObject { get; }
    public ColorObject HorizontalBorderColorObject { get; }
    public ColorObject VerticalBorderColorObject { get; }
    public ColorObject DiagonalBorderColorObject { get; }
    public ColorObject FontColorObject { get; }
    public bool IsNumberFormatPresent { get; public set; }
    public bool IncludeAlignment { get; public set; }
    public bool IncludeProtection { get; public set; }
    public bool IsBackgroundColorPresent { get; public set; }
    public bool IsBorderFormatPresent { get; public set; }
    public bool IsFontColorPresent { get; public set; }
    public bool IsTopBorderModified { get; public set; }
    public bool IsBottomBorderModified { get; public set; }
    public bool IsRightBorderModified { get; public set; }
    public bool IsLeftBorderModified { get; public set; }
    public bool IsVerticalBorderModified { get; public set; }
    public bool IsHorizontalBorderModified { get; public set; }
    public bool IsDiagonalBorderModified { get; public set; }
    public bool IsFontFormatPresent { get; public set; }
    public bool IsPatternColorModified { get; public set; }
    public bool IsPatternFormatPresent { get; public set; }
    public abstract virtual ColorObject get_ColorObject();
    public abstract virtual ColorObject get_BackColorObject();
    public abstract virtual ColorObject get_TopBorderColorObject();
    public abstract virtual ColorObject get_BottomBorderColorObject();
    public abstract virtual ColorObject get_LeftBorderColorObject();
    public abstract virtual ColorObject get_RightBorderColorObject();
    public abstract virtual ColorObject get_HorizontalBorderColorObject();
    public abstract virtual ColorObject get_VerticalBorderColorObject();
    public abstract virtual ColorObject get_DiagonalBorderColorObject();
    public abstract virtual ColorObject get_FontColorObject();
    public abstract virtual bool get_IsNumberFormatPresent();
    public abstract virtual void set_IsNumberFormatPresent(bool value);
    public abstract virtual bool get_IncludeAlignment();
    public abstract virtual void set_IncludeAlignment(bool value);
    public abstract virtual bool get_IncludeProtection();
    public abstract virtual void set_IncludeProtection(bool value);
    public abstract virtual bool get_IsBackgroundColorPresent();
    public abstract virtual void set_IsBackgroundColorPresent(bool value);
    public abstract virtual bool get_IsBorderFormatPresent();
    public abstract virtual void set_IsBorderFormatPresent(bool value);
    public abstract virtual bool get_IsFontColorPresent();
    public abstract virtual void set_IsFontColorPresent(bool value);
    public abstract virtual bool get_IsTopBorderModified();
    public abstract virtual void set_IsTopBorderModified(bool value);
    public abstract virtual bool get_IsBottomBorderModified();
    public abstract virtual void set_IsBottomBorderModified(bool value);
    public abstract virtual bool get_IsRightBorderModified();
    public abstract virtual void set_IsRightBorderModified(bool value);
    public abstract virtual bool get_IsLeftBorderModified();
    public abstract virtual void set_IsLeftBorderModified(bool value);
    public abstract virtual bool get_IsVerticalBorderModified();
    public abstract virtual void set_IsVerticalBorderModified(bool value);
    public abstract virtual bool get_IsHorizontalBorderModified();
    public abstract virtual void set_IsHorizontalBorderModified(bool value);
    public abstract virtual bool get_IsDiagonalBorderModified();
    public abstract virtual void set_IsDiagonalBorderModified(bool value);
    public abstract virtual bool get_IsFontFormatPresent();
    public abstract virtual void set_IsFontFormatPresent(bool value);
    public abstract virtual bool get_IsPatternColorModified();
    public abstract virtual void set_IsPatternColorModified(bool value);
    public abstract virtual bool get_IsPatternFormatPresent();
    public abstract virtual void set_IsPatternFormatPresent(bool value);
}
public interface Syncfusion.XlsIO.IListObject {
    public string TableStyleName { get; public set; }
    public string Name { get; public set; }
    public IRange Location { get; public set; }
    public IList`1<IListObjectColumn> Columns { get; }
    public int Index { get; }
    public TableBuiltInStyles BuiltInTableStyle { get; public set; }
    public IWorksheet Worksheet { get; }
    public string DisplayName { get; public set; }
    public int TotalsRowCount { get; }
    public bool ShowTotals { get; public set; }
    public bool ShowTableStyleRowStripes { get; public set; }
    public bool ShowTableStyleColumnStripes { get; public set; }
    public bool ShowLastColumn { get; public set; }
    public bool ShowFirstColumn { get; public set; }
    public bool ShowHeaderRow { get; public set; }
    public string AlternativeText { get; public set; }
    public string Summary { get; public set; }
    public QueryTableImpl QueryTable { get; }
    public ExcelTableType TableType { get; }
    public IAutoFilters AutoFilters { get; }
    public bool ShowAutoFilter { get; public set; }
    public abstract virtual string get_TableStyleName();
    public abstract virtual void set_TableStyleName(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IRange get_Location();
    public abstract virtual void set_Location(IRange value);
    public abstract virtual IList`1<IListObjectColumn> get_Columns();
    public abstract virtual int get_Index();
    public abstract virtual TableBuiltInStyles get_BuiltInTableStyle();
    public abstract virtual void set_BuiltInTableStyle(TableBuiltInStyles value);
    public abstract virtual IWorksheet get_Worksheet();
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual int get_TotalsRowCount();
    public abstract virtual bool get_ShowTotals();
    public abstract virtual void set_ShowTotals(bool value);
    public abstract virtual bool get_ShowTableStyleRowStripes();
    public abstract virtual void set_ShowTableStyleRowStripes(bool value);
    public abstract virtual bool get_ShowTableStyleColumnStripes();
    public abstract virtual void set_ShowTableStyleColumnStripes(bool value);
    public abstract virtual bool get_ShowLastColumn();
    public abstract virtual void set_ShowLastColumn(bool value);
    public abstract virtual bool get_ShowFirstColumn();
    public abstract virtual void set_ShowFirstColumn(bool value);
    public abstract virtual bool get_ShowHeaderRow();
    public abstract virtual void set_ShowHeaderRow(bool value);
    public abstract virtual string get_AlternativeText();
    public abstract virtual void set_AlternativeText(string value);
    public abstract virtual string get_Summary();
    public abstract virtual void set_Summary(string value);
    public abstract virtual QueryTableImpl get_QueryTable();
    public abstract virtual ExcelTableType get_TableType();
    public abstract virtual IAutoFilters get_AutoFilters();
    public abstract virtual bool get_ShowAutoFilter();
    public abstract virtual void set_ShowAutoFilter(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnRefreshConnection(RefreshConnectionEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnRefreshConnection(RefreshConnectionEventHandler value);
    public abstract virtual void Refresh();
}
public interface Syncfusion.XlsIO.IListObjectColumn {
    public string Name { get; public set; }
    public int Index { get; }
    public int Id { get; }
    public ExcelTotalsCalculation TotalsCalculation { get; public set; }
    public string TotalsRowLabel { get; public set; }
    public string CalculatedFormula { get; public set; }
    public int QueryTableFieldId { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_Index();
    public abstract virtual int get_Id();
    public abstract virtual ExcelTotalsCalculation get_TotalsCalculation();
    public abstract virtual void set_TotalsCalculation(ExcelTotalsCalculation value);
    public abstract virtual string get_TotalsRowLabel();
    public abstract virtual void set_TotalsRowLabel(string value);
    public abstract virtual string get_CalculatedFormula();
    public abstract virtual void set_CalculatedFormula(string value);
    public abstract virtual int get_QueryTableFieldId();
}
public interface Syncfusion.XlsIO.IListObjects {
    public abstract virtual IListObject Create(string name, IRange range);
    public abstract virtual IListObject AddEx(ExcelListObjectSourceType type, IConnection connection, IRange Destination);
    public abstract virtual bool Remove(IListObject listObject);
    public abstract virtual void RemoveAt(int index);
}
public enum Syncfusion.XlsIO.ImageType : Enum {
    public int value__;
    public static ImageType Bitmap;
    public static ImageType Metafile;
}
public interface Syncfusion.XlsIO.IMergeCells {
    public abstract virtual void AddMerge(int RowFrom, int RowTo, int ColFrom, int ColTo, ExcelMergeOperation operation);
    public abstract virtual void DeleteMerge(int CellIndex);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IMetaProperties {
    public IMetaProperty Item { get; }
    public int Count { get; }
    public string SchemaXml { get; }
    public IApplication Application { get; }
    public object Parent { get; }
    public abstract virtual IMetaProperty get_Item(int iIndex);
    public abstract virtual int get_Count();
    public abstract virtual string get_SchemaXml();
    public abstract virtual IApplication get_Application();
    public abstract virtual object get_Parent();
    public abstract virtual IMetaProperty GetItemByInternalName(string InternalName);
}
public interface Syncfusion.XlsIO.IMetaProperty {
    public string Value { get; public set; }
    public string Name { get; }
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual string get_Name();
}
public interface Syncfusion.XlsIO.IMigrantRange {
    public abstract virtual void ResetRowColumn(int iRow, int iColumn);
    public abstract virtual void SetValue(int value);
    public abstract virtual void SetValue(double value);
    public abstract virtual void SetValue(DateTime value);
    public abstract virtual void SetValue(bool value);
    public abstract virtual void SetValue(string value);
}
internal class Syncfusion.XlsIO.Implementation.AboveBelowAverageImpl : object {
    private ExcelCFAverageType m_averageType;
    private int m_stdDevValue;
    public ExcelCFAverageType AverageType { get; public set; }
    public int StdDevValue { get; public set; }
    public AboveBelowAverageImpl Clone();
    public static bool op_Equality(AboveBelowAverageImpl first, AboveBelowAverageImpl second);
    public static bool op_Inequality(AboveBelowAverageImpl first, AboveBelowAverageImpl second);
    public sealed virtual ExcelCFAverageType get_AverageType();
    public sealed virtual void set_AverageType(ExcelCFAverageType value);
    public sealed virtual int get_StdDevValue();
    public sealed virtual void set_StdDevValue(int value);
}
internal class Syncfusion.XlsIO.Implementation.AboveBelowAverageWrapper : object {
    private AboveBelowAverageImpl m_wrapped;
    private ConditionalFormatWrapper m_format;
    public ExcelCFAverageType AverageType { get; public set; }
    public int StdDevValue { get; public set; }
    public AboveBelowAverageWrapper(AboveBelowAverageImpl aboveAverage, ConditionalFormatWrapper format);
    public sealed virtual ExcelCFAverageType get_AverageType();
    public sealed virtual void set_AverageType(ExcelCFAverageType value);
    public sealed virtual int get_StdDevValue();
    public sealed virtual void set_StdDevValue(int value);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
}
public class Syncfusion.XlsIO.Implementation.AddInFunctionImpl : CommonObject {
    private int m_iBookIndex;
    private int m_iNameIndex;
    private WorkbookImpl m_book;
    public int BookIndex { get; public set; }
    public int NameIndex { get; public set; }
    public string Name { get; }
    public AddInFunctionImpl(IApplication application, object parent, int iBookIndex, int iNameIndex);
    private void SetParents();
    public int get_BookIndex();
    public void set_BookIndex(int value);
    public int get_NameIndex();
    public void set_NameIndex(int value);
    public sealed virtual string get_Name();
    public sealed virtual object Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.API : object {
}
public class Syncfusion.XlsIO.Implementation.ApplicationImpl : object {
    private static double DEF_ZERO_CHAR_WIDTH;
    private static int DEF_BUILD_NUMBER;
    private static double DEF_STANDARD_FONT_SIZE;
    private static int DEF_FIXED_DECIMAL_PLACES;
    private static int DEF_SHEETS_IN_NEW_WORKBOOK;
    private static string DEF_DEFAULT_FONT;
    private static string DEF_VALUE;
    private static string DEF_SWITCH_NAME;
    private static string DEF_SWITCH_DESCRIPTION;
    public static char DEF_ARGUMENT_SEPARATOR;
    public static char DEF_ROW_SEPARATOR;
    private static Byte[] DEF_XLS_FILE_HEADER;
    private static byte DEF_BIFF_HEADER_SIZE;
    private static string DEF_XML_HEADER;
    private static string DEF_HTML_HEADER;
    private static int DEF_BUFFER_SIZE;
    internal static int DEF_COLUMN_MAX_WIDTH;
    internal static string DEF_TSV_SEPARATOR;
    internal static string DEF_CSV_SEPARATOR;
    internal List`1<List`1<string>> CustomLists;
    private static Double[] s_arrProportions;
    internal static SizeF MinCellSize;
    private static bool m_bDebugMessage;
    internal static Type[] AssemblyTypes;
    private object m_parent;
    private static bool m_bIsDebugInfoEnabled;
    private StringEnumerations m_stringEnum;
    private static ExcelDataProviderType m_dataType;
    private static Dictionary`2<string, Dictionary`2<double, float>> m_fontsHeight;
    private bool m_isChangeSeparator;
    private bool m_useStringDelimiter;
    private Char[] _numberFormatChar;
    private String[] m_defaultStyleNames;
    private Dictionary`2<int, PaperSizeEntry> m_dicPaperSizeTable;
    private IRange m_ActiveCell;
    private WorksheetBaseImpl m_ActiveSheet;
    private ITabSheet m_ActiveTabSheet;
    private IWorkbook m_ActiveBook;
    private WorkbooksCollection m_workbooks;
    private bool m_bFixedDecimal;
    private bool m_bIgnoreSheetNameException;
    private bool m_bUseSystemSep;
    private double m_dbStandardFontSize;
    private int m_iFixedDecimalPlaces;
    private int m_iSheetsInNewWorkbook;
    private string m_strDecimalSeparator;
    private string m_strStandardFont;
    private string m_strThousandsSeparator;
    private string m_strUserName;
    private bool m_bChangeStyle;
    private SkipExtRecords m_enSkipExtRecords;
    private int m_iStandardRowHeight;
    private bool m_bStandartRowHeightFlag;
    private double m_dStandardColWidth;
    private bool m_bOptimizeFonts;
    private bool m_bOptimizeImport;
    private char m_chRowSeparator;
    private char m_chArgumentSeparator;
    private string m_strCSVSeparator;
    private string m_strCSVQualifier;
    private string m_strCSVRecordDelimiter;
    private bool m_bUseFastRecordParsing;
    private int m_iRowStorageBlock;
    private bool m_bDeleteDestinationFile;
    private CultureInfo m_standredCulture;
    private CultureInfo m_currentCulture;
    private FallbackFonts _fallbackFonts;
    private ExcelVersion m_defaultVersion;
    private bool m_bNetStorage;
    private bool m_bEvalExpired;
    private bool m_bIsDefaultFontChanged;
    private Nullable`1<CompressionLevel> m_compressionLevel;
    private bool m_preserveTypes;
    private bool m_isFormulaparsed;
    private StyleSettings[] m_builtInStyleInfo;
    internal static int DefaultRowHeightXlsx;
    private bool m_bIncrementalFormulaEnable;
    private bool m_bUpdateSheetFormulaReference;
    private IXlsIORenderer m_xlsIORenderer;
    private IXlsIOHelper m_xlsIOHelper;
    private bool m_isChartCacheEnabled;
    private Dictionary`2<string, FontMetrics> m_fontMetricsCollection;
    internal static string NewLineConstant;
    private static bool m_isPartialTrustEnabled;
    private ExcelRangeIndexerMode m_rangeIndexerMode;
    private bool m_isExternBookParsing;
    private static object m_lock;
    private bool m_skipAutoFitRow;
    private bool m_excludeAdditionalCharacters;
    internal bool m_isExplicitlySet;
    private int m_maxRowCountCsv;
    private int m_maxColumnCountCsv;
    private bool m_isCSVDocument;
    [CompilerGeneratedAttribute]
private ProgressEventHandler ProgressEvent;
    [CompilerGeneratedAttribute]
private PasswordRequiredEventHandler OnPasswordRequired;
    [CompilerGeneratedAttribute]
private PasswordRequiredEventHandler OnWrongPassword;
    [CompilerGeneratedAttribute]
private SubstituteFontEventHandler SubstituteFont;
    [CompilerGeneratedAttribute]
private ExportEventHandler TypeMismatchOnExport;
    private int dpiX;
    private int dpiY;
    internal static Int32[] ArialWidthTable;
    internal static Int32[] ArialBoldWidthTable;
    internal static int CourierWidth;
    internal static Int32[] TimesRomanWidthTable;
    internal static Int32[] TimesRomanBoldWidthTable;
    internal static Int32[] TimesRomanItalicWidthTable;
    internal static Int32[] TimesRomanBoldItalicWidthTable;
    internal static Int32[] TahomaWidthTable;
    internal static Int32[] TahomaBoldWidthTable;
    internal static Int32[] CalibriWidthTable;
    internal static Int32[] CalibriBoldWidthTable;
    internal static Int32[] CalibriItalicWidthTable;
    internal static Int32[] CalibriBoldItalicWidthTable;
    internal static Int32[] VerdanaWidthTable;
    internal static Int32[] VerdanaItalicWidthTable;
    internal static Int32[] VerdanaBoldWidthTable;
    internal static Int32[] VerdanaBoldItalicWidthTable;
    internal Dictionary`2<string, FontMetrics> FontMetricsCollection { get; }
    public String[] DefaultStyleNames { get; }
    internal StyleSettings[] BuiltInStyleInfo { get; }
    internal Dictionary`2<int, PaperSizeEntry> DicPaperSizeTable { get; }
    public FallbackFonts FallbackFonts { get; }
    public static bool IsDebugInfoEnabled { get; public set; }
    [ObsoleteAttribute]
public static bool UseUnsafeCodeStatic { get; public set; }
    public static ExcelDataProviderType DataProviderTypeStatic { get; public set; }
    public bool IsSaved { get; }
    public bool IsFormulaParsed { get; public set; }
    public int StandardHeightInRowUnits { get; }
    internal bool EvalExpired { get; internal set; }
    public bool UseStringDelimiter { get; public set; }
    public IRange ActiveCell { get; }
    public IWorksheet ActiveSheet { get; }
    internal ITabSheet ActiveTabSheet { get; }
    public IWorkbook ActiveWorkbook { get; }
    public IApplication Application { get; }
    public IWorkbooks Workbooks { get; }
    public IWorksheets Worksheets { get; }
    public object Parent { get; }
    public IRange Range { get; }
    public bool FixedDecimal { get; public set; }
    public bool IgnoreSheetNameException { get; public set; }
    public bool UseSystemSeparators { get; public set; }
    public double StandardFontSize { get; public set; }
    public int Build { get; }
    public int FixedDecimalPlaces { get; public set; }
    public int SheetsInNewWorkbook { get; public set; }
    public string DecimalSeparator { get; public set; }
    public string StandardFont { get; public set; }
    public string ThousandsSeparator { get; public set; }
    public string UserName { get; public set; }
    public string Value { get; }
    public bool ChangeStyleOnCellEdit { get; public set; }
    public SkipExtRecords SkipOnSave { get; public set; }
    public double StandardHeight { get; public set; }
    public bool StandardHeightFlag { get; public set; }
    public double StandardWidth { get; public set; }
    public bool OptimizeFonts { get; public set; }
    public bool OptimizeImport { get; public set; }
    public char RowSeparator { get; public set; }
    public char ArgumentsSeparator { get; public set; }
    public string CSVSeparator { get; public set; }
    public string CsvQualifier { get; public set; }
    public string CsvRecordDelimiter { get; public set; }
    [ObsoleteAttribute]
public bool UseNativeOptimization { get; public set; }
    public bool UseFastRecordParsing { get; public set; }
    public int RowStorageAllocationBlockSize { get; public set; }
    public bool DeleteDestinationFile { get; public set; }
    public ExcelVersion DefaultVersion { get; public set; }
    public bool UseNativeStorage { get; public set; }
    public ExcelDataProviderType DataProviderType { get; public set; }
    public Nullable`1<CompressionLevel> CompressionLevel { get; public set; }
    public bool PreserveCSVDataTypes { get; public set; }
    public bool EnableIncrementalFormula { get; public set; }
    internal StringEnumerations StringEnum { get; }
    public IXlsIORenderer XlsIORenderer { get; public set; }
    internal IXlsIOHelper XlsIOHelper { get; internal set; }
    public bool IsChartCacheEnabled { get; public set; }
    internal static bool EnablePartialTrustCodeStatic { get; internal set; }
    public bool EnablePartialTrustCode { get; public set; }
    public ExcelRangeIndexerMode RangeIndexerMode { get; public set; }
    public bool UpdateSheetFormulaReference { get; public set; }
    internal bool IsExternBookParsing { get; internal set; }
    public bool SkipAutoFitRow { get; public set; }
    internal static Dictionary`2<string, Dictionary`2<double, float>> FontsHeight { get; }
    public bool ExcludeAdditionalCharacters { get; public set; }
    public int MaximumRowsForCsv { get; public set; }
    public int MaximumColumnsForCsv { get; public set; }
    internal bool IsCSVDocument { get; internal set; }
    private static ApplicationImpl();
    public ApplicationImpl(ExcelEngine excelEngine);
    internal Dictionary`2<string, FontMetrics> get_FontMetricsCollection();
    public String[] get_DefaultStyleNames();
    internal StyleSettings[] get_BuiltInStyleInfo();
    internal Dictionary`2<int, PaperSizeEntry> get_DicPaperSizeTable();
    public sealed virtual FallbackFonts get_FallbackFonts();
    public static bool get_IsDebugInfoEnabled();
    public static void set_IsDebugInfoEnabled(bool value);
    public static bool get_UseUnsafeCodeStatic();
    public static void set_UseUnsafeCodeStatic(bool value);
    public static ExcelDataProviderType get_DataProviderTypeStatic();
    public static void set_DataProviderTypeStatic(ExcelDataProviderType value);
    public bool get_IsSaved();
    public bool get_IsFormulaParsed();
    public void set_IsFormulaParsed(bool value);
    public int get_StandardHeightInRowUnits();
    internal bool get_EvalExpired();
    internal void set_EvalExpired(bool value);
    public sealed virtual bool get_UseStringDelimiter();
    public sealed virtual void set_UseStringDelimiter(bool value);
    public sealed virtual IRange get_ActiveCell();
    public sealed virtual IWorksheet get_ActiveSheet();
    internal ITabSheet get_ActiveTabSheet();
    public sealed virtual IWorkbook get_ActiveWorkbook();
    public sealed virtual IApplication get_Application();
    [DebuggerStepThroughAttribute]
public sealed virtual IWorkbooks get_Workbooks();
    public sealed virtual IWorksheets get_Worksheets();
    [DebuggerStepThroughAttribute]
public sealed virtual object get_Parent();
    public sealed virtual IRange get_Range();
    public sealed virtual bool get_FixedDecimal();
    public sealed virtual void set_FixedDecimal(bool value);
    public sealed virtual bool get_IgnoreSheetNameException();
    public sealed virtual void set_IgnoreSheetNameException(bool value);
    public sealed virtual bool get_UseSystemSeparators();
    public sealed virtual void set_UseSystemSeparators(bool value);
    public sealed virtual double get_StandardFontSize();
    public sealed virtual void set_StandardFontSize(double value);
    [DebuggerStepThroughAttribute]
public sealed virtual int get_Build();
    public sealed virtual int get_FixedDecimalPlaces();
    public sealed virtual void set_FixedDecimalPlaces(int value);
    public sealed virtual int get_SheetsInNewWorkbook();
    public sealed virtual void set_SheetsInNewWorkbook(int value);
    public sealed virtual string get_DecimalSeparator();
    public sealed virtual void set_DecimalSeparator(string value);
    public sealed virtual string get_StandardFont();
    public sealed virtual void set_StandardFont(string value);
    public sealed virtual string get_ThousandsSeparator();
    public sealed virtual void set_ThousandsSeparator(string value);
    public sealed virtual string get_UserName();
    public sealed virtual void set_UserName(string value);
    [DebuggerStepThroughAttribute]
public sealed virtual string get_Value();
    public sealed virtual bool get_ChangeStyleOnCellEdit();
    public sealed virtual void set_ChangeStyleOnCellEdit(bool value);
    public sealed virtual SkipExtRecords get_SkipOnSave();
    public sealed virtual void set_SkipOnSave(SkipExtRecords value);
    public sealed virtual double get_StandardHeight();
    public sealed virtual void set_StandardHeight(double value);
    public sealed virtual bool get_StandardHeightFlag();
    public sealed virtual void set_StandardHeightFlag(bool value);
    public sealed virtual double get_StandardWidth();
    public sealed virtual void set_StandardWidth(double value);
    public sealed virtual bool get_OptimizeFonts();
    public sealed virtual void set_OptimizeFonts(bool value);
    public sealed virtual bool get_OptimizeImport();
    public sealed virtual void set_OptimizeImport(bool value);
    public sealed virtual char get_RowSeparator();
    public sealed virtual void set_RowSeparator(char value);
    public sealed virtual char get_ArgumentsSeparator();
    public sealed virtual void set_ArgumentsSeparator(char value);
    public sealed virtual string get_CSVSeparator();
    public sealed virtual void set_CSVSeparator(string value);
    public sealed virtual string get_CsvQualifier();
    public sealed virtual void set_CsvQualifier(string value);
    public sealed virtual string get_CsvRecordDelimiter();
    public sealed virtual void set_CsvRecordDelimiter(string value);
    public sealed virtual bool get_UseNativeOptimization();
    public sealed virtual void set_UseNativeOptimization(bool value);
    public sealed virtual bool get_UseFastRecordParsing();
    public sealed virtual void set_UseFastRecordParsing(bool value);
    public sealed virtual int get_RowStorageAllocationBlockSize();
    public sealed virtual void set_RowStorageAllocationBlockSize(int value);
    public sealed virtual bool get_DeleteDestinationFile();
    public sealed virtual void set_DeleteDestinationFile(bool value);
    public sealed virtual ExcelVersion get_DefaultVersion();
    public sealed virtual void set_DefaultVersion(ExcelVersion value);
    public sealed virtual bool get_UseNativeStorage();
    public sealed virtual void set_UseNativeStorage(bool value);
    public sealed virtual ExcelDataProviderType get_DataProviderType();
    public sealed virtual void set_DataProviderType(ExcelDataProviderType value);
    public sealed virtual Nullable`1<CompressionLevel> get_CompressionLevel();
    public sealed virtual void set_CompressionLevel(Nullable`1<CompressionLevel> value);
    public sealed virtual bool get_PreserveCSVDataTypes();
    public sealed virtual void set_PreserveCSVDataTypes(bool value);
    public sealed virtual bool get_EnableIncrementalFormula();
    public sealed virtual void set_EnableIncrementalFormula(bool value);
    internal StringEnumerations get_StringEnum();
    public sealed virtual IXlsIORenderer get_XlsIORenderer();
    public sealed virtual void set_XlsIORenderer(IXlsIORenderer value);
    internal IXlsIOHelper get_XlsIOHelper();
    internal void set_XlsIOHelper(IXlsIOHelper value);
    public sealed virtual bool get_IsChartCacheEnabled();
    public sealed virtual void set_IsChartCacheEnabled(bool value);
    internal static bool get_EnablePartialTrustCodeStatic();
    internal static void set_EnablePartialTrustCodeStatic(bool value);
    public sealed virtual bool get_EnablePartialTrustCode();
    public sealed virtual void set_EnablePartialTrustCode(bool value);
    public sealed virtual ExcelRangeIndexerMode get_RangeIndexerMode();
    public sealed virtual void set_RangeIndexerMode(ExcelRangeIndexerMode value);
    public sealed virtual bool get_UpdateSheetFormulaReference();
    public sealed virtual void set_UpdateSheetFormulaReference(bool value);
    internal bool get_IsExternBookParsing();
    internal void set_IsExternBookParsing(bool value);
    public sealed virtual bool get_SkipAutoFitRow();
    public sealed virtual void set_SkipAutoFitRow(bool value);
    internal static Dictionary`2<string, Dictionary`2<double, float>> get_FontsHeight();
    public sealed virtual bool get_ExcludeAdditionalCharacters();
    public sealed virtual void set_ExcludeAdditionalCharacters(bool value);
    public sealed virtual int get_MaximumRowsForCsv();
    public sealed virtual void set_MaximumRowsForCsv(int value);
    public sealed virtual int get_MaximumColumnsForCsv();
    public sealed virtual void set_MaximumColumnsForCsv(int value);
    internal bool get_IsCSVDocument();
    internal void set_IsCSVDocument(bool value);
    internal static void InitAssemblyTypes();
    private void InitFontMetricsCollection();
    internal RectangleF GetMeasuredRectangle(string text, Font font, RectangleF bounds);
    internal SizeF GetTextSizeFromFont(string text, Font font);
    private int GetLengthOfLines(float sizeOfText, float widthBound, string text, Font font);
    private SizeF GetVerdanaTextSize(string text, Font font);
    private SizeF GetCalibriTextSize(string text, Font font);
    private SizeF GetTahomaTextSize(string text, Font font);
    private SizeF GetCourierTextSize(string text, Font font);
    private SizeF GetTimesNewRomanTextSize(string text, Font font);
    private SizeF GetArialTextSize(string text, Font font);
    internal bool CheckUnicode(string unicodeText);
    private float GetTotalWidthOfText(string text, Int32[] table, bool isStandard);
    private void InitializeCustomListCollections();
    private void InitializePageSetup();
    private void InitializeStyleCollections();
    protected void InitializeCollection();
    private static void InitializeFontHeight();
    public sealed virtual double CentimetersToPoints(double Centimeters);
    public sealed virtual bool IsSupported(Stream stream);
    public sealed virtual bool IsExcelFile(Stream stream);
    public ExcelOpenType DetectFileFromStream(Stream stream);
    private string FindStreamCaseInsensitive(ICompoundStorage storage, string streamName);
    private ExcelOpenType DetectIsTSVOrCSVOrXML(Stream stream, MemoryStream memoryStream, long lPosition);
    private bool IsContainSurrogate(string strValue, string strSeparator, bool bIsCompare);
    public sealed virtual double InchesToPoints(double Inches);
    public virtual WorkbookImpl CreateWorkbook(object parent, ExcelVersion version);
    public virtual WorkbookImpl CreateWorkbook(object parent, Stream stream, string separator, int row, int column, ExcelVersion version, string fileName, Encoding encoding);
    public virtual WorkbookImpl CreateWorkbook(object parent, Stream stream, ExcelVersion version, ExcelParseOptions options);
    public virtual WorkbookImpl CreateWorkbook(object parent, Stream stream, ExcelParseOptions options, ExcelVersion version);
    public virtual WorkbookImpl CreateWorkbook(object parent, Stream stream, ExcelParseOptions options, bool bReadOnly, string password, ExcelVersion version);
    public virtual WorkbookImpl CreateWorkbook(object parent, int sheetsQuantity, ExcelVersion version);
    public virtual WorksheetImpl CreateWorksheet(object parent);
    [CLSCompliantAttribute("False")]
public virtual WorksheetImpl CreateWorksheet(object parent, BiffReader reader, ExcelParseOptions options, bool bSkipParsing, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    public virtual RangeImpl CreateRange(object parent);
    public virtual RangeImpl CreateRange(object parent, int col, int row);
    [CLSCompliantAttribute("False")]
public virtual RangeImpl CreateRange(object parent, BiffRecordRaw[] data, Int32& i);
    [CLSCompliantAttribute("False")]
public virtual RangeImpl CreateRange(object parent, BiffRecordRaw[] data, Int32& i, bool ignoreStyles);
    public virtual RangeImpl CreateRange(object parent, List`1<BiffRecordRaw> data, Int32& i, bool ignoreStyles);
    public virtual RangeImpl CreateRange(object parent, int firstCol, int firstRow, int lastCol, int lastRow);
    [CLSCompliantAttribute("False")]
public virtual RangeImpl CreateRange(object parent, BiffRecordRaw record, bool bIgnoreStyles);
    public virtual StyleImpl CreateStyle(WorkbookImpl parent, string name);
    public virtual StyleImpl CreateStyle(WorkbookImpl parent, string name, StyleImpl basedOn);
    [CLSCompliantAttribute("False")]
public virtual StyleImpl CreateStyle(WorkbookImpl parent, StyleRecord style);
    public virtual StyleImpl CreateStyle(WorkbookImpl parent, string name, bool bIsBuildIn);
    public virtual FontImpl CreateFont(object parent);
    public virtual FontImpl CreateFont(object parent, Font nativeFont);
    public virtual FontImpl CreateFont(IFont basedOn);
    [CLSCompliantAttribute("False")]
public virtual FontImpl CreateFont(object parent, FontRecord font);
    [CLSCompliantAttribute("False")]
public virtual FontImpl CreateFont(object parent, FontImpl font);
    public void CheckDefaultFont();
    public virtual ChartImpl CreateChart(object parent);
    public virtual ChartSerieImpl CreateSerie(object parent);
    public RangesCollection CreateRangesCollection(object parent);
    public virtual HyperLinkImpl CreateHyperLink(object parent);
    public virtual HyperLinkImpl CreateHyperLink(object parent, IRange range);
    internal virtual HyperLinkImpl CreateHyperLink(object parent, IShape shape);
    public virtual CommentsRange CreateCommentsRange(IRange parentRange);
    public virtual CommentShapeImpl CreateCommentShapeImpl(object parent);
    public virtual CommentShapeImpl CreateCommentShapeImpl(object parent, bool bIsParseOptions);
    [CLSCompliantAttribute("False")]
public virtual CommentShapeImpl CreateCommentShapeImpl(object parent, MsofbtSpContainer container);
    [CLSCompliantAttribute("False")]
public virtual CommentShapeImpl CreateCommentShapeImpl(object parent, MsofbtSpContainer container, ExcelParseOptions options);
    public virtual DataValidationArray CreateDataValidationArrayImpl(IRange parent);
    public virtual DataValidationWrapper CreateDataValidationWrapper(RangeImpl range, DataValidationImpl wrap);
    public virtual DataValidationImpl CreateDataValidationImpl(DataValidationCollection parent);
    [CLSCompliantAttribute("False")]
public virtual DataValidationImpl CreateDataValidationImpl(DataValidationCollection parent, DVRecord dv);
    public virtual CondFormatCollectionWrapper CreateCondFormatCollectionWrapper(ICombinedRange range);
    [CLSCompliantAttribute("False")]
public virtual ConditionalFormats CreateConditionalFormats(object parent, CondFMTRecord format, IList formats, IList CFExRecords);
    [CLSCompliantAttribute("False")]
public virtual ConditionalFormats CreateConditionalFormats(object parent, CondFmt12Record format, IList formats);
    public TemplateMarkersImpl CreateTemplateMarkers(object parent);
    public static DataProvider CreateDataProvider(IntPtr heapHandle);
    internal static DataProvider CreateDataProvider();
    internal ICompoundFile CreateCompoundFile(Stream stream);
    internal ICompoundFile CreateCompoundFile();
    public static Image CreateImage(Stream stream);
    internal TextBoxShapeImpl CreateTextBoxShapeImpl(ShapesCollection shapesCollection, WorksheetImpl sheet);
    public CheckBoxShapeImpl CreateCheckBoxShapeImpl(object shapesCollection);
    public OptionButtonShapeImpl CreateOptionButtonShapeImpl(object shapesCollection);
    public ComboBoxShapeImpl CreateComboBoxShapeImpl(object shapesCollection);
    public virtual Stream CreateCompressor(Stream outputStream);
    internal CultureInfo CheckAndApplySeperators();
    internal CultureInfo GetCultureInfo(CultureInfo oldCulture, CultureInfo newCulture);
    internal void SetNumberDecimalSeparator(NumberFormatInfo numberFormat, string numberDecimalSeparator);
    internal void SetThousandsSeparator(NumberFormatInfo numberFormat, string thousandsSeparator);
    public void SetActiveWorkbook(IWorkbook book);
    public void SetActiveWorksheet(WorksheetBaseImpl sheet);
    public void SetActiveCell(IRange cell);
    internal static void UpdateDpiScales(float dpiValue);
    internal static double ConvertToPixels(double value, MeasureUnits from);
    internal static double ConvertFromPixel(double value, MeasureUnits to);
    public static double ConvertUnitsStatic(double value, MeasureUnits from, MeasureUnits to);
    public sealed virtual double ConvertUnits(double value, MeasureUnits from, MeasureUnits to);
    public void RaiseProgressEvent(long curPos, long fullSize);
    internal void RaiseTypeMismatchOnExportEvent(object sender, ExportEventArgs args);
    public SizeF MeasureString(string strToMeasure, FontImpl font, SizeF rectSize);
    internal bool RaiseOnPasswordRequired(object sender, PasswordRequiredEventArgs e);
    internal bool RaiseOnWrongPassword(object sender, PasswordRequiredEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProgressEvent(ProgressEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProgressEvent(ProgressEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnPasswordRequired(PasswordRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnPasswordRequired(PasswordRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnWrongPassword(PasswordRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnWrongPassword(PasswordRequiredEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SubstituteFont(SubstituteFontEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SubstituteFont(SubstituteFontEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TypeMismatchOnExport(ExportEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TypeMismatchOnExport(ExportEventHandler value);
    internal void Dispose();
    internal void RemoveStylesCollection();
    internal object GetParent();
    internal void RemovePageSetupCollection();
    internal int GetFontCalc1();
    internal int GetFontCalc2();
    internal int GetFontCalc3();
    internal int GetdpiX();
    internal int GetdpiY();
    internal bool IsValidImage(Byte[] bytes);
    internal bool CheckImageHeader(Byte[] header, Byte[] imageBytes);
    internal string TryGetFontStream(string fontName, float fontSize, FontStyle fontStyle, Stream& stream);
}
public class Syncfusion.XlsIO.Implementation.AutoFilterConditionImpl : object {
    private ExcelFilterDataType m_dataType;
    private ExcelFilterCondition m_conditionOperator;
    private string m_strValue;
    private bool m_bValue;
    private byte m_btErrorCode;
    private double m_dValue;
    private AutoFiltersCollection m_autofilters;
    private AutoFilterImpl m_autoFilter;
    public ExcelFilterDataType DataType { get; public set; }
    public ExcelFilterCondition ConditionOperator { get; public set; }
    public string String { get; public set; }
    public bool Boolean { get; public set; }
    public byte ErrorCode { get; public set; }
    public double Double { get; public set; }
    public AutoFilterConditionImpl(AutoFiltersCollection autofilters);
    internal AutoFilterConditionImpl(AutoFiltersCollection autofilters, AutoFilterImpl autofilter);
    internal void Dispose();
    public sealed virtual ExcelFilterDataType get_DataType();
    public sealed virtual void set_DataType(ExcelFilterDataType value);
    public sealed virtual ExcelFilterCondition get_ConditionOperator();
    public sealed virtual void set_ConditionOperator(ExcelFilterCondition value);
    public sealed virtual string get_String();
    public sealed virtual void set_String(string value);
    public sealed virtual bool get_Boolean();
    public void set_Boolean(bool value);
    public sealed virtual byte get_ErrorCode();
    public void set_ErrorCode(byte value);
    public sealed virtual double get_Double();
    public sealed virtual void set_Double(double value);
    [CLSCompliantAttribute("False")]
public void Parse(DOPER condition);
    [CLSCompliantAttribute("False")]
public void Serialize(DOPER condition);
    public AutoFilterConditionImpl Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.AutoFilterImpl : object {
    private AutoFilterConditionImpl m_firstCondition;
    private AutoFilterConditionImpl m_secondCondition;
    private AutoFilterRecord m_record;
    private FormControlShapeImpl m_shape;
    private AutoFiltersCollection m_autofilters;
    private ExcelFilterType m_filterType;
    private CombinationFilter m_combinationFilter;
    private ColorFilter m_colorFilter;
    private IconFilter m_iconFilter;
    private DynamicFilter m_dateFilter;
    internal int m_colIndex;
    internal double m_filterValue;
    internal bool m_showButton;
    private List`1<KeyValuePair`2<IRange, double>> m_rangeList;
    public IAutoFilterCondition FirstCondition { get; }
    public IAutoFilterCondition SecondCondition { get; }
    internal AutoFilterRecord Record { get; }
    public bool IsFiltered { get; }
    public bool IsAnd { get; public set; }
    internal bool IsColorFilter { get; }
    internal bool IsIconFilter { get; }
    public bool IsPercent { get; public set; }
    public bool IsSimple1 { get; public set; }
    public bool IsSimple2 { get; public set; }
    public bool IsTop { get; public set; }
    public bool IsTop10 { get; public set; }
    public int Top10Number { get; public set; }
    public ExcelFilterType FilterType { get; public set; }
    public IFilter FilteredItems { get; }
    public WorksheetImpl Worksheet { get; }
    public ShapesCollection WorksheetShapes { get; }
    public int Index { get; public set; }
    public bool IsFirstCondition { get; }
    public bool IsSecondCondition { get; }
    public bool IsBlanks { get; }
    public bool IsNonBlanks { get; }
    public AutoFilterImpl(AutoFiltersCollection parent);
    public AutoFilterImpl(AutoFiltersCollection parent, int iColumnIndex, int iLastColumn, int iRowIndex);
    [CLSCompliantAttribute("False")]
public AutoFilterImpl(AutoFiltersCollection parent, AutoFilterRecord record, int iColumnIndex, int iTopRow);
    private void InitializeConditions(AutoFiltersCollection parent);
    internal void Dispose();
    public sealed virtual IAutoFilterCondition get_FirstCondition();
    public sealed virtual IAutoFilterCondition get_SecondCondition();
    internal AutoFilterRecord get_Record();
    public sealed virtual bool get_IsFiltered();
    public sealed virtual bool get_IsAnd();
    public sealed virtual void set_IsAnd(bool value);
    internal bool get_IsColorFilter();
    internal bool get_IsIconFilter();
    public sealed virtual bool get_IsPercent();
    public void set_IsPercent(bool value);
    public sealed virtual bool get_IsSimple1();
    public void set_IsSimple1(bool value);
    public sealed virtual bool get_IsSimple2();
    public void set_IsSimple2(bool value);
    public sealed virtual bool get_IsTop();
    public sealed virtual void set_IsTop(bool value);
    public sealed virtual bool get_IsTop10();
    public sealed virtual void set_IsTop10(bool value);
    public sealed virtual int get_Top10Number();
    public sealed virtual void set_Top10Number(int value);
    public sealed virtual ExcelFilterType get_FilterType();
    public sealed virtual void set_FilterType(ExcelFilterType value);
    public sealed virtual IFilter get_FilteredItems();
    public WorksheetImpl get_Worksheet();
    public ShapesCollection get_WorksheetShapes();
    public int get_Index();
    public void set_Index(int value);
    public bool get_IsFirstCondition();
    public bool get_IsSecondCondition();
    public bool get_IsBlanks();
    public bool get_IsNonBlanks();
    public void Clear();
    public sealed virtual object Clone(object parent);
    internal void SelectRangesToFilter();
    internal void SetTop10();
    internal void SetCondition(ExcelFilterCondition conditionOperator, ExcelFilterDataType datatype, object conditionValue, int currentAutoFilter, bool isFirstCondition);
    private void SetCondition(ExcelFilterCondition conditionOperator, object conditionValue, WorksheetImpl worksheet, KeyValuePair`2<IRange, double> range, bool isFirstCondition, Type type);
    private bool GetComparerResult(object a, object b, ExcelFilterCondition conditionOperator);
    private int GetComparerResult(object a, object b, StringComparison comparisonType);
    private void SetMatchAllBlanks(bool isFirstCondition);
    private void SetMatchAllNonBlanks(bool isFirstCondition);
    public sealed virtual void AddTextFilter(IEnumerable`1<string> filterCollection);
    public sealed virtual void AddColorFilter(Color color, ExcelColorFilterType colorFilterType);
    public sealed virtual void RemoveColorFilter();
    public sealed virtual void AddIconFilter(ExcelIconSetType iconSetType, int iconId);
    public sealed virtual void RemoveIconFilter();
    private void RemoveFilter();
    public sealed virtual void AddTextFilter(string filter);
    public sealed virtual bool RemoveText(string filter);
    public sealed virtual bool RemoveText(IEnumerable`1<string> filterCollection);
    public sealed virtual void AddDateFilter(int year, int month, int day, int hour, int mintue, int second, DateTimeGroupingType groupingType);
    public sealed virtual void AddDateFilter(DateTime dateTime, DateTimeGroupingType groupingType);
    public sealed virtual bool RemoveDate(int year, int month, int day, int hour, int mintue, int second, DateTimeGroupingType groupingType);
    public sealed virtual bool RemoveDate(DateTime dateTime, DateTimeGroupingType groupingType);
    public sealed virtual void AddDynamicFilter(DynamicFilterType dateFilterType);
    public sealed virtual bool RemoveDynamicFilter();
    private void ApplyTextFilter();
    private void InitializeCalcEngine(Boolean& disableCalEngine);
    private void ApplyDateTimeFilter();
    private void ApplyDynamicFilter();
    [CLSCompliantAttribute("False")]
public void Parse(AutoFilterRecord record, int iColumnIndex, int iRowIndex);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
}
internal class Syncfusion.XlsIO.Implementation.AutoFitManager : object {
    private static int DEF_AUTO_FILTER_WIDTH;
    private static double DEF_AUTO_FILTER_FONT_SIZE;
    private static string DROPDOWNSYMBOL;
    private RangeImpl m_rangeImpl;
    private WorksheetImpl m_worksheet;
    private WorkbookImpl m_book;
    private int m_row;
    private int m_column;
    private int m_lastRow;
    private int m_lastColumn;
    private ApplicationImpl m_application;
    internal IWorksheet Worksheet { get; }
    internal AutoFitManager(int row, int column, int lastRow, int lastColumn, RangeImpl rangeImpl);
    internal AutoFitManager(ApplicationImpl appImpl);
    internal AutoFitManager(WorksheetImpl worksheet);
    internal IWorksheet get_Worksheet();
    internal void MeasureToFitColumn();
    private int MeasureSpaces(string word, int rotation);
    private Font CreateFont(string fontName, float size, FontStyle fontStyle);
    private int MeasureCharacterRanges(StyleWithText styleWithText, int paramNum, RectangleF rectF, int column);
    private double GetIndentLevel(int column);
    internal RectangleF MeasureString(string text, Font font, RectangleF rectF, bool isAutoFitRow);
    internal SizeF Measure(string strValue, string fontName, bool bold, bool italic, float fontSize);
    private int MeasureCharacterRanges(IStyle style, string strText, int num, RectangleF rectF);
    private static void SortTextToFit(IList`1<object> list, FontImpl fontImpl, string strText, bool AutoFilter, ExcelHAlign alignment);
    internal int CalculateWrappedCell(ExtendedFormatImpl format, string stringValue, int columnWidth, ApplicationImpl applicationImpl);
    private int MeasureCell(ExtendedFormatImpl format, string stringValue, float columnWidth, int num, bool isString);
    private int CalculateFontHeightFromGraphics(IFont font);
    private int CalculateFontHeight(IFont font);
    private float GetFontHeight(Font font);
    private int MeasureFontSize(ExtendedFormatImpl extendedFromat, string stringValue, float columnWidth);
    private string ModifySepicalChar(string stringValue);
    public sealed virtual void Dispose();
}
internal enum Syncfusion.XlsIO.Implementation.BindingFlags : Enum {
    public int value__;
    public static BindingFlags NonPublic;
    public static BindingFlags Instance;
}
public class Syncfusion.XlsIO.Implementation.BitConverterGeneral : object {
    public static long DoubleToInt64Bits(double value);
    public static double Int64BitsToDouble(long value);
}
public class Syncfusion.XlsIO.Implementation.BorderImpl : CommonObject {
    public static int DEF_MAXBADCOLOR;
    public static int DEF_BADCOLOR_INCREMENT;
    private ExcelBordersIndex m_border;
    private IInternalExtendedFormat m_format;
    public ExcelKnownColors Color { get; public set; }
    public ColorObject ColorObject { get; }
    public Color ColorRGB { get; public set; }
    public ExcelLineStyle LineStyle { get; public set; }
    public bool ShowDiagonalLine { get; public set; }
    internal ExcelBordersIndex BorderIndex { get; internal set; }
    private WorkbookImpl Workbook { get; }
    private BorderImpl(IApplication application, object parent);
    private BorderImpl(IApplication application, object parent, ExcelBordersIndex borderIndex);
    public BorderImpl(IApplication application, object parent, IInternalExtendedFormat impl, ExcelBordersIndex borderIndex);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LineStyle();
    public sealed virtual void set_LineStyle(ExcelLineStyle value);
    public sealed virtual bool get_ShowDiagonalLine();
    public sealed virtual void set_ShowDiagonalLine(bool value);
    internal ExcelBordersIndex get_BorderIndex();
    internal void set_BorderIndex(ExcelBordersIndex value);
    private WorkbookImpl get_Workbook();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void CopyFrom(IBorder baseBorder);
    private void NormalizeColor();
    public static ExcelKnownColors NormalizeColor(ExcelKnownColors color);
    public BorderImpl Clone(StyleImpl newFormat);
    private sealed virtual override void System.IDisposable.Dispose();
    internal void Clear();
}
public class Syncfusion.XlsIO.Implementation.BorderImplArrayWrapper : CommonObject {
    private List`1<IRange> m_arrCells;
    private ExcelBordersIndex m_border;
    private WorkbookImpl m_book;
    public ExcelKnownColors Color { get; public set; }
    public ColorObject ColorObject { get; }
    public Color ColorRGB { get; public set; }
    public ExcelLineStyle LineStyle { get; public set; }
    public bool ShowDiagonalLine { get; public set; }
    public BorderImplArrayWrapper(IRange range, ExcelBordersIndex index);
    public BorderImplArrayWrapper(List`1<IRange> lstRange, ExcelBordersIndex index, IApplication application);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LineStyle();
    public sealed virtual void set_LineStyle(ExcelLineStyle value);
    public sealed virtual bool get_ShowDiagonalLine();
    public sealed virtual void set_ShowDiagonalLine(bool value);
}
public class Syncfusion.XlsIO.Implementation.CalculationOptionsImpl : CommonObject {
    public static TBIFFRecord[] DEF_CORRECT_CODES;
    private CalcModeRecord m_calcMode;
    private CalcCountRecord m_calcCount;
    private RefModeRecord m_refMode;
    private IterationRecord m_iteration;
    private DeltaRecord m_delta;
    private SaveRecalcRecord m_saveRecalc;
    public int MaximumIteration { get; public set; }
    public ExcelCalculationMode CalculationMode { get; public set; }
    public bool RecalcOnSave { get; public set; }
    public double MaximumChange { get; public set; }
    public bool IsIterationEnabled { get; public set; }
    public bool R1C1ReferenceMode { get; public set; }
    public CalculationOptionsImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public CalculationOptionsImpl(IApplication application, object parent, BiffRecordRaw[] data, int iPos);
    private static CalculationOptionsImpl();
    public int Parse(IList data, int iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public sealed virtual int get_MaximumIteration();
    public sealed virtual void set_MaximumIteration(int value);
    public sealed virtual ExcelCalculationMode get_CalculationMode();
    public sealed virtual void set_CalculationMode(ExcelCalculationMode value);
    public sealed virtual bool get_RecalcOnSave();
    public sealed virtual void set_RecalcOnSave(bool value);
    public sealed virtual double get_MaximumChange();
    public sealed virtual void set_MaximumChange(double value);
    public sealed virtual bool get_IsIterationEnabled();
    public sealed virtual void set_IsIterationEnabled(bool value);
    public sealed virtual bool get_R1C1ReferenceMode();
    public sealed virtual void set_R1C1ReferenceMode(bool value);
    public sealed virtual object Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.CellDataImpl : object {
    private RangeImpl m_range;
    private ICellPositionFormat m_record;
    public RangeImpl Range { get; public set; }
    [CLSCompliantAttribute("False")]
public ICellPositionFormat Record { get; public set; }
    public RangeImpl get_Range();
    public void set_Range(RangeImpl value);
    public ICellPositionFormat get_Record();
    public void set_Record(ICellPositionFormat value);
}
internal class Syncfusion.XlsIO.Implementation.CellFormula : object {
    private bool m_calculateCell;
    private bool m_dataTable2D;
    private bool m_dataTableRow;
    private FormulaType m_formulaType;
    private string m_reference;
    private string m_firstDataTableCell;
    private string m_secondDataTableCell;
    private int m_sharedIndex;
    private string m_text;
    internal bool CalculateCell { get; internal set; }
    internal bool DataTable2D { get; internal set; }
    internal bool DataTableRow { get; internal set; }
    internal FormulaType FormulaType { get; internal set; }
    internal string Reference { get; internal set; }
    internal string FirstDataTableCell { get; internal set; }
    internal string SecondDataTableCell { get; internal set; }
    internal int SharedIndex { get; internal set; }
    internal string Text { get; internal set; }
    internal CellFormula(string text);
    internal bool get_CalculateCell();
    internal void set_CalculateCell(bool value);
    internal bool get_DataTable2D();
    internal void set_DataTable2D(bool value);
    internal bool get_DataTableRow();
    internal void set_DataTableRow(bool value);
    internal FormulaType get_FormulaType();
    internal void set_FormulaType(FormulaType value);
    internal string get_Reference();
    internal void set_Reference(string value);
    internal string get_FirstDataTableCell();
    internal void set_FirstDataTableCell(string value);
    internal string get_SecondDataTableCell();
    internal void set_SecondDataTableCell(string value);
    internal int get_SharedIndex();
    internal void set_SharedIndex(int value);
    internal string get_Text();
    internal void set_Text(string value);
}
public class Syncfusion.XlsIO.Implementation.CellStyle : ExtendedFormatWrapper {
    private RangeImpl m_range;
    private bool m_bAskAdjacent;
    public ColorObject LeftBorderColor { get; }
    public ColorObject RightBorderColor { get; }
    public ColorObject TopBorderColor { get; }
    public ColorObject BottomBorderColor { get; }
    public ExcelLineStyle LeftBorderLineStyle { get; public set; }
    public ExcelLineStyle RightBorderLineStyle { get; public set; }
    public ExcelLineStyle TopBorderLineStyle { get; public set; }
    public ExcelLineStyle BottomBorderLineStyle { get; public set; }
    internal bool AskAdjacent { get; internal set; }
    public CellStyle(RangeImpl range);
    public CellStyle(RangeImpl range, int iXFIndex);
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    protected virtual void SetParents(object parent);
    protected virtual void BeforeRead();
    public virtual ColorObject get_LeftBorderColor();
    public virtual ColorObject get_RightBorderColor();
    public virtual ColorObject get_TopBorderColor();
    public virtual ColorObject get_BottomBorderColor();
    public virtual ExcelLineStyle get_LeftBorderLineStyle();
    public virtual void set_LeftBorderLineStyle(ExcelLineStyle value);
    public virtual ExcelLineStyle get_RightBorderLineStyle();
    public virtual void set_RightBorderLineStyle(ExcelLineStyle value);
    public virtual ExcelLineStyle get_TopBorderLineStyle();
    public virtual void set_TopBorderLineStyle(ExcelLineStyle value);
    public virtual ExcelLineStyle get_BottomBorderLineStyle();
    public virtual void set_BottomBorderLineStyle(ExcelLineStyle value);
    internal bool get_AskAdjacent();
    internal void set_AskAdjacent(bool value);
    protected ExcelLineStyle GetLeftLineStyle(bool askAdjecent);
    internal void SetBaseLineStyle(ExcelBordersIndex border, ExcelLineStyle lineStyle);
    protected ExcelLineStyle GetRightLineStyle(bool askAdjecent);
    protected ExcelLineStyle GetTopLineStyle(bool askAdjecent);
    protected ExcelLineStyle GetBottomLineStyle(bool askAdjecent);
    private float GetBorderWidth(ExcelLineStyle lineStyle);
    protected ColorObject GetLeftBorderColor(bool askAdjacent);
    protected ColorObject GetRightBorderColor(bool askAdjacent);
    protected ColorObject GetTopBorderColor(bool askAdjecent);
    protected ColorObject GetBottomBorderColor(bool askAdjecent);
    private IRange GetLeftCell();
    private IRange GetRightCell();
    private IRange GetTopCell();
    private IRange GetBottomCell();
    private IRange GetCell(int rowDelta, int colDelta);
}
public class Syncfusion.XlsIO.Implementation.CellValueChangedEventArgs : EventArgs {
    private object m_oldValue;
    private object m_newValue;
    private IRange m_range;
    public object OldValue { get; public set; }
    public object NewValue { get; public set; }
    public IRange Range { get; public set; }
    public object get_OldValue();
    public void set_OldValue(object value);
    public object get_NewValue();
    public void set_NewValue(object value);
    public IRange get_Range();
    public void set_Range(IRange value);
}
internal class Syncfusion.XlsIO.Implementation.CFApplier : object {
    private FormulaEvaluator m_evaluator;
    private StringComparer m_comparer;
    private static string m_trueString;
    private Rectangle m_range;
    private List`1<Rectangle> m_ranges;
    private UInt32 m_cfApplied;
    private bool m_calculationEnabled;
    private int m_columnDifference;
    private int m_rowDifference;
    private Rectangle m_firstRange;
    private int m_firstRowDifference;
    private Dictionary`2<string, string> m_calcValues;
    private Dictionary`2<IConditionalFormat, string> m_Formulas;
    private Dictionary`2<TopBottomImpl, List`1<long>> m_top10Cells;
    private Dictionary`2<long, double> m_cellValues;
    private Dictionary`2<IConditionalFormats, List`1<double>> m_aboveAverageValues;
    private double m_minValue;
    private double m_maxValue;
    private bool m_isNegative;
    private bool m_isColorApplied;
    internal bool IsColorApplied { get; internal set; }
    internal bool IsNegative { get; internal set; }
    internal double MinValue { get; internal set; }
    internal double MaxValue { get; internal set; }
    internal Dictionary`2<string, string> CalcValues { get; internal set; }
    internal bool CalculationEnabled { get; internal set; }
    internal int FirstRowDifference { get; internal set; }
    internal Rectangle FirstRange { get; internal set; }
    internal int ColumnDifference { get; internal set; }
    internal int RowDifference { get; internal set; }
    internal Dictionary`2<TopBottomImpl, List`1<long>> Top10Cells { get; internal set; }
    internal Dictionary`2<long, double> CellValues { get; internal set; }
    internal Dictionary`2<IConditionalFormats, List`1<double>> AboveAverageValues { get; internal set; }
    internal bool get_IsColorApplied();
    internal void set_IsColorApplied(bool value);
    internal bool get_IsNegative();
    internal void set_IsNegative(bool value);
    internal double get_MinValue();
    internal void set_MinValue(double value);
    internal double get_MaxValue();
    internal void set_MaxValue(double value);
    internal Dictionary`2<string, string> get_CalcValues();
    internal void set_CalcValues(Dictionary`2<string, string> value);
    internal bool get_CalculationEnabled();
    internal void set_CalculationEnabled(bool value);
    internal int get_FirstRowDifference();
    internal void set_FirstRowDifference(int value);
    internal Rectangle get_FirstRange();
    internal void set_FirstRange(Rectangle value);
    internal int get_ColumnDifference();
    internal void set_ColumnDifference(int value);
    internal int get_RowDifference();
    internal void set_RowDifference(int value);
    internal Dictionary`2<TopBottomImpl, List`1<long>> get_Top10Cells();
    internal void set_Top10Cells(Dictionary`2<TopBottomImpl, List`1<long>> value);
    internal Dictionary`2<long, double> get_CellValues();
    internal void set_CellValues(Dictionary`2<long, double> value);
    internal Dictionary`2<IConditionalFormats, List`1<double>> get_AboveAverageValues();
    internal void set_AboveAverageValues(Dictionary`2<IConditionalFormats, List`1<double>> value);
    internal void SetRange(Rectangle range);
    internal void SetRanges(List`1<Rectangle> ranges);
    public ExtendedFormatImpl ApplyCF(IRange cell, ExtendedFormatImpl xf);
    internal ExtendedFormatImpl ApplyCFNumberFormats(IRange cell, ExtendedFormatImpl xf);
    internal ExtendedFormatImpl MergeCF(ConditionalFormats format, ExtendedFormatImpl xf, IRange cell, int usedRangeRow, int usedRangeColumn);
    private ExtendedFormatImpl CheckAndApplyCondition(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf, int usedRangeRow, int usedRangeColumn);
    private void UpdateConditionalFormatRange(int top, int left, int bottom, int right, int usedRangeLastRow, int usedRangeLastColumn, Int32& lastRow, Int32& lastColumn);
    private ExtendedFormatImpl ConditionalFormatUniqueDuplicateValue(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf);
    private bool HasDuplicate(ConditionalFormats parentCF, IRange cell);
    private ExtendedFormatImpl CheckAndApplyConditionValue(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf);
    private bool CheckBetween(IRange cell, object value1, object value2);
    private bool CheckEqual(IRange cell, object value);
    private bool CheckGreater(IRange cell, object value);
    private bool CheckGreaterOrEqual(IRange cell, object value);
    private bool CheckLess(IRange cell, object value);
    private bool CheckLessOrEqual(IRange cell, object value);
    private bool CheckNotBetween(IRange cell, object value1, object value2);
    private bool CheckNotEqual(IRange cell, object value);
    private int Compare(IRange cell, object value);
    private int CompareDouble(double number, object value);
    private int CompareString(string text, object value);
    private int CompareBoolean(bool boolean, object value);
    private ExtendedFormatImpl CheckAndApplyConditionFormula(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf);
    private ExtendedFormatImpl CheckAndApplyConditionFormula(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf, string formatFirstFormula);
    internal string UpdateConditionFormula(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf, string formatFirstFormula, Boolean& bResult);
    private bool HasErrorPtg(Ptg[] Ptgs);
    private ExtendedFormatImpl CheckAndApplySpecificText(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf);
    private bool CheckContains(IRange cell, object value);
    private bool CheckNotContains(IRange cell, string value);
    private bool CheckBeginsWith(IRange cell, string value);
    private bool CheckEndsWith(IRange cell, string value);
    private ExtendedFormatImpl ConditionalFormatTopBottom(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf);
    private ExtendedFormatImpl ConditionalFormatAboveAverage(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf);
    internal ExtendedFormatImpl CheckAndApplyTimePeriodCondition(IConditionalFormat format, IRange cell, ExtendedFormatImpl xf);
    private void GetCellValues(IConditionalFormat format, IRange cell);
    private void ExtractTop10Cells(IConditionalFormat format, IRange cell);
    private double GetStandardDeviation(Double[] values);
    private double GetAverage(Double[] values);
    private double GetVariance(Double[] values, double mean);
    private ExtendedFormatImpl ApplyCondition(IConditionalFormat condition, ExtendedFormatImpl xf);
    private ExtendedFormatStandAlone ApplyCondition(string iconName, ExcelIconSetType iconSet, int iconId, ExtendedFormatImpl xf, bool showIcon);
    private void UpdateFont(IConditionalFormat condition, ExtendedFormatImpl xf);
    private void UpdateNumberFormat(IConditionalFormat condition, ExtendedFormatImpl xf);
    private void UpdateFill(IConditionalFormat condition, ExtendedFormatImpl xf);
    private void UpdatePatternColor(IConditionalFormat condition, ExtendedFormatImpl xf);
    private void UpdateBackgroundColor(IConditionalFormat condition, ExtendedFormatImpl xf);
    private void UpdateFontColor(IConditionalFormat condition, ExtendedFormatImpl xf);
    private void UpdatePatternFormat(IConditionalFormat condition, ExtendedFormatImpl xf);
    private void UpdateFontFormat(IConditionalFormat condition, ExtendedFormatImpl xf);
    private void UpdateBorders(IConditionalFormat condition, ExtendedFormatImpl xf);
    internal ExtendedFormatStandAlone ApplyIconSet(IRange cell, IIconSet iconSet, string formatRange, ExtendedFormatImpl xf);
    private bool CompareValues(bool operatorValue, IRange cell, double value);
    private string MapIconIdToImage(IconConditionValue iconConditionValue);
    private bool CheckCriteria(IConditionValue conditionValue);
    private double GetIconSetConditionValue(IRange cell, IConditionValue condition, string formatRange, Boolean& isGreaterThan);
    private bool TryGetPointValue(IRange cell, IConditionValue condition, string range, Double& result);
    private void TryGetMinValue(IRange cell, string range, Double& result);
    private void TryGetMaxValue(IRange cell, string range, Double& result);
    private Image GetBitMap(string iconName);
    internal ExtendedFormatImpl ConditionalFormatColorScale(IColorScale colorScale, IRange cell, string formatRange, ExtendedFormatImpl xf);
    private double GetColorConditionValue(IRange cell, IConditionValue condition, string formatRange, Boolean& isGreaterThan);
    private bool TryGetValue(IRange cell, IConditionValue condition, string range, Double& result);
    private ExtendedFormatImpl ApplyCondition(Color color, ExtendedFormatImpl xf);
    private Color GetBlendedTwoColor(double increasePercent, Color color1, Color color2);
    private Color Interpolate(Color color1, Color color2, double fraction);
    private double Interpolate(double d1, double d2, double fraction);
    internal ExtendedFormatStandAlone ApplyDataBar(IRange cell, IDataBar dataBar, string formatRange, ExtendedFormatImpl xf);
    private double DataBarLength(double cellValue, double min, double max, IConditionValue condition, bool isNegativeBar, IDataBar dataBar);
    private ExtendedFormatStandAlone ApplyCondition(Color barColor, ExtendedFormatImpl xf, double _dataBarPercent, bool hasBorder, DataBarDirection dataBarDirection, Color borderColor, bool showValue, bool isNegativeBar, double negativeBarPoint, Color barAxisColor, Color negativeFillColor, Color negativeBorderColor, double cellValue, double minValue, double maxValue, DataBarAxisPosition dataBarAxisPosition, bool hasGradientFill);
    private double GetDataBarConditionValue(IRange cell, IConditionValue condition, string formatRange, Boolean& isGreaterThan, int flag);
    private bool TryGetPointValue(IRange cell, IConditionValue condition, string range, Double& result, int flag);
}
public class Syncfusion.XlsIO.Implementation.ChartPageSetupImpl : PageSetupBaseImpl {
    private PrintedChartSizeRecord m_chartSize;
    public bool FitToPagesTall { get; public set; }
    public bool FitToPagesWide { get; public set; }
    public ChartPageSetupImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartPageSetupImpl(IApplication application, object parent, BiffReader reader);
    [CLSCompliantAttribute("False")]
public ChartPageSetupImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& position);
    public ChartPageSetupImpl(IApplication application, object parent, List`1<BiffRecordRaw> data, Int32& position);
    public sealed virtual bool get_FitToPagesTall();
    public sealed virtual void set_FitToPagesTall(bool value);
    public sealed virtual bool get_FitToPagesWide();
    public sealed virtual void set_FitToPagesWide(bool value);
    [CLSCompliantAttribute("False")]
protected virtual bool ParseRecord(BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
public void Parse(BiffReader reader);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeEndRecords(OffsetArrayList records);
    public ChartPageSetupImpl Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.ChartRichTextString : CommonWrapper {
    private string m_text;
    protected WorkbookImpl m_book;
    private bool m_bIsReadOnly;
    private object m_parent;
    private ChartTextAreaImpl m_textArea;
    public TRuns[] FormattingRuns { get; }
    private ChartTextAreaImpl TextArea { get; private set; }
    public string Text { get; }
    public object Parent { get; }
    public IApplication Application { get; }
    public ChartRichTextString(IApplication application, object parent);
    public ChartRichTextString(IApplication application, object parent, bool isReadOnly);
    public ChartRichTextString(IApplication application, object parent, bool isReadOnly, bool bCreateText);
    public ChartRichTextString(IApplication application, object parent, TextWithFormat text);
    public sealed virtual TRuns[] get_FormattingRuns();
    private ChartTextAreaImpl get_TextArea();
    private void set_TextArea(ChartTextAreaImpl value);
    public sealed virtual string get_Text();
    public sealed virtual object get_Parent();
    public sealed virtual IApplication get_Application();
    protected virtual void SetParents();
    public sealed virtual void SetFont(int iStartPos, int iEndPos, IFont font);
    public sealed virtual IFont GetFont(TRuns tRuns);
    protected virtual int AddFont(IFont font);
}
internal class Syncfusion.XlsIO.Implementation.Charts.BoxAndWhiskerSerieFormat : ValueType {
    private byte m_options;
    internal bool ShowMeanLine { get; internal set; }
    internal bool ShowMeanMarkers { get; internal set; }
    internal bool ShowInnerPoints { get; internal set; }
    internal bool ShowOutlierPoints { get; internal set; }
    internal ExcelQuartileCalculation QuartileCalculationType { get; internal set; }
    internal byte Options { get; internal set; }
    internal bool get_ShowMeanLine();
    internal void set_ShowMeanLine(bool value);
    internal bool get_ShowMeanMarkers();
    internal void set_ShowMeanMarkers(bool value);
    internal bool get_ShowInnerPoints();
    internal void set_ShowInnerPoints(bool value);
    internal bool get_ShowOutlierPoints();
    internal void set_ShowOutlierPoints(bool value);
    internal ExcelQuartileCalculation get_QuartileCalculationType();
    internal void set_QuartileCalculationType(ExcelQuartileCalculation value);
    internal byte get_Options();
    internal void set_Options(byte value);
}
public abstract class Syncfusion.XlsIO.Implementation.Charts.ChartAxisImpl : CommonObject {
    protected static int DEF_NUMBER_FORMAT_INDEX;
    private static int DEF_GENERAL_FORMAT;
    private bool m_isWrapText;
    private ExcelAxisType m_axisType;
    private bool m_bPrimary;
    private ChartTextAreaImpl m_titleArea;
    private ChartTickRecord m_chartTick;
    private ShadowImpl m_shadow;
    private bool m_bLineFormat;
    internal UnknownRecord m_startBlock;
    internal IList`1<UnknownRecord> m_shapePropsStreams;
    internal UnknownRecord m_endBlock;
    private FontWrapper m_font;
    private FontWrapper old_Font;
    private ChartGridLineImpl m_majorGrid;
    private ChartGridLineImpl m_minorGrid;
    private bool m_bHasMajor;
    private bool m_bHasMinor;
    private ChartParentAxisImpl m_parentAxis;
    private int m_iNumberFormat;
    private ChartBorderImpl m_border;
    private ExcelAxisTextDirection m_textDirection;
    internal Excel2007TextRotation m_textRotation;
    private int m_iAxisId;
    private bool m_bDeleted;
    private bool m_bAutoTickLabelSpacing;
    private bool m_bAutoTickMarkSpacing;
    internal AxisLabelAlignment LabelAlign;
    private ThreeDFormatImpl m_3D;
    private Nullable`1<ChartAxisPos> m_axisPos;
    private bool m_sourceLinked;
    private Stream m_textStream;
    private ChartParagraphType m_paraType;
    private ChartFrameFormatImpl m_axisFormat;
    private bool m_IsDefaultTextSettings;
    private bool m_isChartFont;
    private string m_cross;
    internal bool IsWrapText { get; internal set; }
    public ExcelAxisType AxisType { get; public set; }
    public bool IsPrimary { get; public set; }
    internal string Cross { get; internal set; }
    public string Title { get; public set; }
    public int TextRotationAngle { get; public set; }
    public bool IsAutoTextRotation { get; }
    public IChartTextArea TitleArea { get; }
    public IFont Font { get; public set; }
    internal bool IsChartFont { get; internal set; }
    public IChartGridLine MajorGridLines { get; }
    public IChartGridLine MinorGridLines { get; }
    public bool HasMinorGridLines { get; public set; }
    public bool HasMajorGridLines { get; public set; }
    public bool isNumber { get; }
    protected ChartParentAxisImpl ParentAxis { get; }
    public int NumberFormatIndex { get; public set; }
    public string NumberFormat { get; public set; }
    public ExcelTickMark MinorTickMark { get; public set; }
    public ExcelTickMark MajorTickMark { get; public set; }
    public IChartBorder Border { get; }
    public ExcelTickLabelPosition TickLabelPosition { get; public set; }
    public bool Visible { get; public set; }
    public ExcelAxisTextDirection Alignment { get; public set; }
    [ObsoleteAttribute("Please use ReversePlotOrder property instead of this one.")]
public bool IsReversed { get; public set; }
    public bool ReversePlotOrder { get; public set; }
    public int AxisId { get; internal set; }
    public ChartImpl ParentChart { get; }
    public bool Deleted { get; public set; }
    public bool AutoTickLabelSpacing { get; public set; }
    public bool AutoTickMarkSpacing { get; public set; }
    public IShadow Shadow { get; }
    public IShadow ShadowProperties { get; }
    public bool HasShadowProperties { get; internal set; }
    public IThreeDFormat Chart3DOptions { get; }
    public IThreeDFormat Chart3DProperties { get; }
    public bool Has3dProperties { get; internal set; }
    internal Nullable`1<ChartAxisPos> AxisPosition { get; internal set; }
    internal bool IsSourceLinked { get; internal set; }
    internal Stream TextStream { get; internal set; }
    public IChartFrameFormat FrameFormat { get; }
    public bool HasAxisTitle { get; }
    public ChartParagraphType ParagraphType { get; public set; }
    internal bool IsDefaultTextSettings { get; internal set; }
    protected ExcelObjectTextLink TextLinkType { get; }
    protected WorkbookImpl ParentWorkbook { get; }
    public ChartAxisImpl(IApplication application, object parent);
    public ChartAxisImpl(IApplication application, object parent, ExcelAxisType axisType);
    public ChartAxisImpl(IApplication application, object parent, ExcelAxisType axisType, bool bIsPrimary);
    [CLSCompliantAttribute("False")]
public ChartAxisImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public ChartAxisImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos, bool isPrimary);
    private void SetParents();
    internal bool get_IsWrapText();
    internal void set_IsWrapText(bool value);
    public sealed virtual ExcelAxisType get_AxisType();
    public void set_AxisType(ExcelAxisType value);
    public bool get_IsPrimary();
    public void set_IsPrimary(bool value);
    internal string get_Cross();
    internal void set_Cross(string value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public sealed virtual int get_TextRotationAngle();
    public sealed virtual void set_TextRotationAngle(int value);
    public bool get_IsAutoTextRotation();
    public sealed virtual IChartTextArea get_TitleArea();
    public sealed virtual IFont get_Font();
    public void set_Font(IFont value);
    internal bool get_IsChartFont();
    internal void set_IsChartFont(bool value);
    public sealed virtual IChartGridLine get_MajorGridLines();
    public sealed virtual IChartGridLine get_MinorGridLines();
    public sealed virtual bool get_HasMinorGridLines();
    public sealed virtual void set_HasMinorGridLines(bool value);
    public sealed virtual bool get_HasMajorGridLines();
    public sealed virtual void set_HasMajorGridLines(bool value);
    public bool get_isNumber();
    protected ChartParentAxisImpl get_ParentAxis();
    public int get_NumberFormatIndex();
    public void set_NumberFormatIndex(int value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual ExcelTickMark get_MinorTickMark();
    public sealed virtual void set_MinorTickMark(ExcelTickMark value);
    public sealed virtual ExcelTickMark get_MajorTickMark();
    public sealed virtual void set_MajorTickMark(ExcelTickMark value);
    public sealed virtual IChartBorder get_Border();
    public sealed virtual ExcelTickLabelPosition get_TickLabelPosition();
    public sealed virtual void set_TickLabelPosition(ExcelTickLabelPosition value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual ExcelAxisTextDirection get_Alignment();
    public sealed virtual void set_Alignment(ExcelAxisTextDirection value);
    public sealed virtual bool get_IsReversed();
    public sealed virtual void set_IsReversed(bool value);
    public abstract virtual bool get_ReversePlotOrder();
    public abstract virtual void set_ReversePlotOrder(bool value);
    public int get_AxisId();
    internal void set_AxisId(int value);
    public ChartImpl get_ParentChart();
    public bool get_Deleted();
    public void set_Deleted(bool value);
    public sealed virtual bool get_AutoTickLabelSpacing();
    public sealed virtual void set_AutoTickLabelSpacing(bool value);
    public bool get_AutoTickMarkSpacing();
    public void set_AutoTickMarkSpacing(bool value);
    public sealed virtual IShadow get_Shadow();
    public IShadow get_ShadowProperties();
    public bool get_HasShadowProperties();
    internal void set_HasShadowProperties(bool value);
    public sealed virtual IThreeDFormat get_Chart3DOptions();
    public IThreeDFormat get_Chart3DProperties();
    public bool get_Has3dProperties();
    internal void set_Has3dProperties(bool value);
    internal Nullable`1<ChartAxisPos> get_AxisPosition();
    internal void set_AxisPosition(Nullable`1<ChartAxisPos> value);
    internal bool get_IsSourceLinked();
    internal void set_IsSourceLinked(bool value);
    internal Stream get_TextStream();
    internal void set_TextStream(Stream value);
    public IChartFrameFormat get_FrameFormat();
    public bool get_HasAxisTitle();
    public ChartParagraphType get_ParagraphType();
    public void set_ParagraphType(ChartParagraphType value);
    internal bool get_IsDefaultTextSettings();
    internal void set_IsDefaultTextSettings(bool value);
    protected abstract virtual ExcelObjectTextLink get_TextLinkType();
    protected WorkbookImpl get_ParentWorkbook();
    [CLSCompliantAttribute("False")]
protected void Parse(IList`1<BiffRecordRaw> data, Int32& iPos, bool isPrimary);
    private void ParseChartAxisLineFormat(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
protected void ParseFontXRecord(ChartFontxRecord fontx);
    protected abstract virtual void ParseWallsOrFloor(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
protected void ParseIfmt(ChartIfmtRecord record);
    [CLSCompliantAttribute("False")]
protected virtual void ParseData(BiffRecordRaw record, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseTickRecord(ChartTickRecord chartTick);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializeAxisTitle(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeFont(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeGridLines(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeNumberFormat(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeAxisBorder(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeTickRecord(OffsetArrayList records);
    protected virtual void InitializeVariables();
    private void InitializeTickRecord();
    private void ColorChangeEventHandler(object sender, EventArgs e);
    protected internal void SetTitleArea(ChartTextAreaImpl titleArea);
    public virtual ChartAxisImpl Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    public ChartAxisImpl Clone(FontWrapper font);
    public void SetTitle(ChartTextAreaImpl text);
    public void UpdateTickRecord(ExcelTickLabelPosition value);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    protected void InitFrameFormat();
    protected virtual ChartFrameFormatImpl CreateFrameFormat();
    internal void AssignReference(IChartBorder border);
    internal void SetDefaultFont(string defaultFont, float defaultFontSize);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartBorderImpl : CommonObject {
    private static ExcelKnownColors DEF_COLOR_INEDX;
    private ChartLineFormatRecord m_lineFormat;
    private WorkbookImpl m_parentBook;
    private ChartSerieDataFormatImpl m_serieFormat;
    private ColorObject m_color;
    private LineCap m_lineCap;
    private double m_solidTransparency;
    private IInternalFill m_fill;
    private Excel2007BorderJoinType m_joinType;
    private string m_lineWeightString;
    private bool m_lineProperties;
    private bool m_isBorderColorInverted;
    private double m_lineWeight;
    private bool m_isColorModified;
    private ExcelShapeArrowStyle m_beginArrowType;
    private ExcelShapeArrowStyle m_endArrowType;
    private ExcelShapeArrowWidthLength m_beginArrowSize;
    private ExcelShapeArrowWidthLength m_endArrowSize;
    internal string m_beginArrowLg;
    internal string m_endArrowLg;
    internal string m_beginArrowwidth;
    internal string m_endArrowWidth;
    internal LineCap CapStyle { get; internal set; }
    public Color LineColor { get; public set; }
    public ExcelChartLinePattern LinePattern { get; public set; }
    public ExcelChartLineWeight LineWeight { get; public set; }
    public double Weight { get; public set; }
    internal IInternalFill Fill { get; internal set; }
    internal bool HasGradientFill { get; }
    internal bool HasLineProperties { get; internal set; }
    internal bool IsBorderColorInverted { get; internal set; }
    internal bool IsColorModified { get; internal set; }
    internal Excel2007BorderJoinType JoinType { get; internal set; }
    public bool AutoFormat { get; public set; }
    public bool DrawTickLabels { get; public set; }
    public bool IsAutoLineColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public ColorObject Color { get; }
    public double Transparency { get; public set; }
    internal string LineWeightString { get; internal set; }
    internal ExcelShapeArrowStyle BeginArrowType { get; internal set; }
    internal ExcelShapeArrowStyle EndArrowType { get; internal set; }
    internal ExcelShapeArrowWidthLength BeginArrowSize { get; internal set; }
    internal ExcelShapeArrowWidthLength EndArrowSize { get; internal set; }
    public ChartBorderImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartBorderImpl(IApplication application, object parent, ChartLineFormatRecord line);
    public ChartBorderImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    public void Serialize(IList`1<IBiffStorage> records);
    private void SetParents();
    internal void UpdateColor();
    internal void set_CapStyle(LineCap value);
    internal LineCap get_CapStyle();
    public sealed virtual Color get_LineColor();
    public sealed virtual void set_LineColor(Color value);
    public sealed virtual ExcelChartLinePattern get_LinePattern();
    public sealed virtual void set_LinePattern(ExcelChartLinePattern value);
    public sealed virtual ExcelChartLineWeight get_LineWeight();
    public sealed virtual void set_LineWeight(ExcelChartLineWeight value);
    public sealed virtual double get_Weight();
    public sealed virtual void set_Weight(double value);
    internal IInternalFill get_Fill();
    internal void set_Fill(IInternalFill value);
    internal bool get_HasGradientFill();
    internal bool get_HasLineProperties();
    internal void set_HasLineProperties(bool value);
    internal bool get_IsBorderColorInverted();
    internal void set_IsBorderColorInverted(bool value);
    internal bool get_IsColorModified();
    internal void set_IsColorModified(bool value);
    internal Excel2007BorderJoinType get_JoinType();
    internal void set_JoinType(Excel2007BorderJoinType value);
    public sealed virtual bool get_AutoFormat();
    public sealed virtual void set_AutoFormat(bool value);
    public sealed virtual bool get_DrawTickLabels();
    public sealed virtual void set_DrawTickLabels(bool value);
    public sealed virtual bool get_IsAutoLineColor();
    public sealed virtual void set_IsAutoLineColor(bool value);
    public sealed virtual ExcelKnownColors get_ColorIndex();
    public sealed virtual void set_ColorIndex(ExcelKnownColors value);
    public ColorObject get_Color();
    public sealed virtual double get_Transparency();
    public sealed virtual void set_Transparency(double value);
    internal string get_LineWeightString();
    internal void set_LineWeightString(string value);
    internal ExcelShapeArrowStyle get_BeginArrowType();
    internal void set_BeginArrowType(ExcelShapeArrowStyle value);
    internal ExcelShapeArrowStyle get_EndArrowType();
    internal void set_EndArrowType(ExcelShapeArrowStyle value);
    internal ExcelShapeArrowWidthLength get_BeginArrowSize();
    internal void set_BeginArrowSize(ExcelShapeArrowWidthLength value);
    internal ExcelShapeArrowWidthLength get_EndArrowSize();
    internal void set_EndArrowSize(ExcelShapeArrowWidthLength value);
    public ChartBorderImpl Clone(object parent);
    internal void ClearAutoColor();
    internal void TryAndClearAutoColor();
    private sealed virtual override object Syncfusion.XlsIO.Interfaces.ICloneParent.Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartCategory : CommonObject {
    private ChartSeriesCollection m_series;
    private bool m_isfiltered;
    private IRange m_categoryLabel;
    private IRange m_Value;
    private WorkbookImpl m_book;
    private ChartImpl m_chart;
    private ChartSeriesCollection series;
    private ChartCategoryCollection m_categoryColl;
    public bool Filter_customize;
    private string m_categoryName;
    public bool IsFiltered { get; public set; }
    public IRange CategoryLabel { get; public set; }
    public IRange Values { get; public set; }
    public string Name { get; public set; }
    public ChartCategory(IApplication application, object parent);
    private void InitializeCollections();
    private void SetParents();
    public sealed virtual bool get_IsFiltered();
    public sealed virtual void set_IsFiltered(bool value);
    public sealed virtual IRange get_CategoryLabel();
    public void set_CategoryLabel(IRange value);
    public sealed virtual IRange get_Values();
    public void set_Values(IRange value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    internal object Clone();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartCategoryAxisImpl : ChartValueAxisImpl {
    private static string DEF_NOTSUPPORTED_PROPERTY;
    private static int DEF_AXIS_OFFSET;
    private static int DEF_MONTH_COUNT;
    private static DateTime DEF_MIN_DATE;
    private static ushort DEF_NOMULTILVLLBL_TAG;
    private static ushort DEF_TICKLBLSKIP_TAG;
    private ChartCatserRangeRecord m_chartCatser;
    private UnknownRecord m_chartMlFrt;
    private ChartAxcextRecord m_axcetRecord;
    private ExcelCategoryType m_categoryType;
    private int m_iOffset;
    private bool m_bAutoTickLabelSpacing;
    private bool m_bnoMultiLvlLbl;
    internal bool m_showNoMultiLvlLbl;
    private bool m_majorUnitIsAuto;
    private bool m_minorUnitIsAuto;
    internal bool m_xmlTKLabelSkipFrt;
    private bool m_isChartAxisOffsetRecord;
    internal HistogramAxisFormat m_histogramAxisFormat;
    private bool m_changeDateTimeAxisValue;
    public bool IsMaxCross { get; public set; }
    public double CrossesAt { get; public set; }
    internal bool ChangeDateTimeAxisValue { get; internal set; }
    internal bool HasAutoTickLabelSpacing { get; }
    public bool AutoTickLabelSpacing { get; public set; }
    public int LabelFrequency { get; public set; }
    public int TickLabelSpacing { get; public set; }
    public int TickMarksFrequency { get; public set; }
    public int TickMarkSpacing { get; public set; }
    [CLSCompliantAttribute("False")]
protected ExcelObjectTextLink TextLinkType { get; }
    public bool IsBetween { get; public set; }
    public bool ReversePlotOrder { get; public set; }
    public IRange CategoryLabels { get; public set; }
    public Object[] EnteredDirectlyCategoryLabels { get; public set; }
    public ExcelCategoryType CategoryType { get; public set; }
    public int Offset { get; public set; }
    public ExcelChartBaseUnit BaseUnit { get; public set; }
    public bool BaseUnitIsAuto { get; public set; }
    internal bool MajorUnitScaleIsAuto { get; internal set; }
    internal bool MinorUnitScaleIsAuto { get; internal set; }
    public bool IsAutoMajor { get; public set; }
    public bool IsAutoMinor { get; public set; }
    public bool IsAutoCross { get; public set; }
    public bool IsAutoMax { get; public set; }
    public bool IsAutoMin { get; public set; }
    public double MajorUnit { get; public set; }
    public double MinorUnit { get; public set; }
    public ExcelChartBaseUnit MajorUnitScale { get; public set; }
    public ExcelChartBaseUnit MinorUnitScale { get; public set; }
    public bool NoMultiLevelLabel { get; public set; }
    public bool IsBinningByCategory { get; public set; }
    public bool HasAutomaticBins { get; public set; }
    public int NumberOfBins { get; public set; }
    public double BinWidth { get; public set; }
    public double UnderflowBinValue { get; public set; }
    public double OverflowBinValue { get; public set; }
    internal HistogramAxisFormat HistogramAxisFormatProperty { get; }
    private ChartCatserRangeRecord CatserRecord { get; }
    internal bool IsChartBubbleOrScatter { get; }
    private bool IsCategoryType { get; }
    public ChartCategoryAxisImpl(IApplication application, object parent);
    public ChartCategoryAxisImpl(IApplication application, object parent, ExcelAxisType axisType);
    public ChartCategoryAxisImpl(IApplication application, object parent, ExcelAxisType axisType, bool bIsPrimary);
    [CLSCompliantAttribute("False")]
public ChartCategoryAxisImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public ChartCategoryAxisImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos, bool isPrimary);
    private static ChartCategoryAxisImpl();
    public virtual bool get_IsMaxCross();
    public virtual void set_IsMaxCross(bool value);
    public virtual double get_CrossesAt();
    public virtual void set_CrossesAt(double value);
    internal bool get_ChangeDateTimeAxisValue();
    internal void set_ChangeDateTimeAxisValue(bool value);
    internal bool get_HasAutoTickLabelSpacing();
    public sealed virtual bool get_AutoTickLabelSpacing();
    public sealed virtual void set_AutoTickLabelSpacing(bool value);
    public sealed virtual int get_LabelFrequency();
    public sealed virtual void set_LabelFrequency(int value);
    public sealed virtual int get_TickLabelSpacing();
    public sealed virtual void set_TickLabelSpacing(int value);
    public sealed virtual int get_TickMarksFrequency();
    public sealed virtual void set_TickMarksFrequency(int value);
    public sealed virtual int get_TickMarkSpacing();
    public sealed virtual void set_TickMarkSpacing(int value);
    protected virtual ExcelObjectTextLink get_TextLinkType();
    public sealed virtual bool get_IsBetween();
    public sealed virtual void set_IsBetween(bool value);
    public virtual bool get_ReversePlotOrder();
    public virtual void set_ReversePlotOrder(bool value);
    public sealed virtual IRange get_CategoryLabels();
    public sealed virtual void set_CategoryLabels(IRange value);
    public sealed virtual Object[] get_EnteredDirectlyCategoryLabels();
    public sealed virtual void set_EnteredDirectlyCategoryLabels(Object[] value);
    public sealed virtual ExcelCategoryType get_CategoryType();
    public sealed virtual void set_CategoryType(ExcelCategoryType value);
    public sealed virtual int get_Offset();
    public sealed virtual void set_Offset(int value);
    public sealed virtual ExcelChartBaseUnit get_BaseUnit();
    public sealed virtual void set_BaseUnit(ExcelChartBaseUnit value);
    public sealed virtual bool get_BaseUnitIsAuto();
    public sealed virtual void set_BaseUnitIsAuto(bool value);
    internal bool get_MajorUnitScaleIsAuto();
    internal void set_MajorUnitScaleIsAuto(bool value);
    internal bool get_MinorUnitScaleIsAuto();
    internal void set_MinorUnitScaleIsAuto(bool value);
    public virtual bool get_IsAutoMajor();
    public virtual void set_IsAutoMajor(bool value);
    public virtual bool get_IsAutoMinor();
    public virtual void set_IsAutoMinor(bool value);
    public virtual bool get_IsAutoCross();
    public virtual void set_IsAutoCross(bool value);
    public virtual bool get_IsAutoMax();
    public virtual void set_IsAutoMax(bool value);
    public virtual bool get_IsAutoMin();
    public virtual void set_IsAutoMin(bool value);
    public virtual double get_MajorUnit();
    public virtual void set_MajorUnit(double value);
    public virtual double get_MinorUnit();
    public virtual void set_MinorUnit(double value);
    public sealed virtual ExcelChartBaseUnit get_MajorUnitScale();
    public sealed virtual void set_MajorUnitScale(ExcelChartBaseUnit value);
    public sealed virtual ExcelChartBaseUnit get_MinorUnitScale();
    public sealed virtual void set_MinorUnitScale(ExcelChartBaseUnit value);
    public sealed virtual bool get_NoMultiLevelLabel();
    public sealed virtual void set_NoMultiLevelLabel(bool value);
    public sealed virtual bool get_IsBinningByCategory();
    public sealed virtual void set_IsBinningByCategory(bool value);
    public sealed virtual bool get_HasAutomaticBins();
    public sealed virtual void set_HasAutomaticBins(bool value);
    public sealed virtual int get_NumberOfBins();
    public sealed virtual void set_NumberOfBins(int value);
    public sealed virtual double get_BinWidth();
    public sealed virtual void set_BinWidth(double value);
    public sealed virtual double get_UnderflowBinValue();
    public sealed virtual void set_UnderflowBinValue(double value);
    public sealed virtual double get_OverflowBinValue();
    public sealed virtual void set_OverflowBinValue(double value);
    internal HistogramAxisFormat get_HistogramAxisFormatProperty();
    [CLSCompliantAttribute("False")]
protected virtual void ParseData(BiffRecordRaw record, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
protected virtual void ParseMaxCross(BiffRecordRaw record);
    protected virtual void ParseWallsOrFloor(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseCategoryType(ChartAxcextRecord record);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    private void SerializeCategory(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeWallsOrFloor(OffsetArrayList records);
    private void SerializeAxcetRecord(OffsetArrayList records);
    protected virtual void InitializeVariables();
    protected virtual bool CheckValueRangeRecord(bool throwException);
    public virtual ChartAxisImpl Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    private string GetStartChartType();
    private void CheckTimeScaleProperties();
    private ChartCatserRangeRecord get_CatserRecord();
    internal bool get_IsChartBubbleOrScatter();
    private bool get_IsCategoryType();
    internal bool CheckForXmlTKOptions(BiffRecordRaw record);
    internal void SwapAxisValues();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Charts.ChartCategoryCollection : CollectionBaseEx`1<IChartCategory> {
    private ChartImpl m_chart;
    public ChartCategory Item { get; public set; }
    public IChartCategory Item { get; }
    public ChartCategoryCollection(IApplication application, object parent);
    public ChartCategory get_Item(int index);
    public void set_Item(int index, ChartCategory value);
    public sealed virtual IChartCategory get_Item(string name);
    public IChartCategory Add(ChartSerieImpl serieToAdd);
    public void Remove(string serieName);
    public IChartCategory Add(string name, ExcelChartType serieType);
    public IChartCategory Add(ExcelChartType serieType);
    public IChartCategory Add();
    protected virtual void OnClear();
    public virtual object Clone(object parent);
    public List`1<BiffRecordRaw> GetEnteredRecords(int siIndex);
    public IChartCategory Add(string name);
    private List`1<List`1<BiffRecordRaw>> GetArrays(int siIndex);
    public IChartCategory Add(IRange Categorylabel, IRange Values);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartDataLabelsImpl : CommonObject {
    private bool m_conditionCheck;
    private ChartImpl m_chart;
    private ChartSerieImpl m_serie;
    private ChartTextAreaImpl m_textArea;
    private ChartDataPointImpl m_dataPoint;
    private IChartLayout m_layout;
    private bool m_isDelete;
    internal static string DEFAULT_FONTNAME;
    internal static string DEFAULT_LANGUAGE;
    internal static double DEFAULT_FONTSIZE;
    private bool m_bShowTextProperties;
    private bool m_bShowSizeProperties;
    private bool m_bShowBoldProperties;
    internal bool m_bHasValueOption;
    internal bool m_bHasSeriesOption;
    internal bool m_bHasCategoryOption;
    internal bool m_bHasPercentageOption;
    internal bool m_bHasLegendKeyOption;
    internal bool m_bHasBubbleSizeOption;
    private bool m_isSourceLinked;
    private string m_numberFormat;
    private bool m_bShowLeaderLines;
    private bool m_isAutoEnableDataLabels;
    private String[] m_stringCache;
    internal bool m_bFontChanged;
    public bool IsSeriesName { get; public set; }
    public bool IsCategoryName { get; public set; }
    public bool IsValueFromCells { get; public set; }
    public IRange ValueFromCellsRange { get; public set; }
    public bool IsValue { get; public set; }
    public bool IsPercentage { get; public set; }
    internal bool IsSourceLinked { get; internal set; }
    public bool IsBubbleSize { get; public set; }
    public string Delimiter { get; public set; }
    public bool IsLegendKey { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public ExcelDataLabelPosition Position { get; public set; }
    internal ChartSerieImpl Serie { get; internal set; }
    public ExcelChartBackgroundMode BackgroundMode { get; public set; }
    public bool IsAutoMode { get; public set; }
    public string Text { get; public set; }
    public IChartRichTextString RichText { get; }
    public int TextRotationAngle { get; public set; }
    public IChartFrameFormat FrameFormat { get; }
    public bool Bold { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color RGBColor { get; public set; }
    public bool Italic { get; public set; }
    public bool MacOSOutlineFont { get; public set; }
    public bool MacOSShadow { get; public set; }
    public double Size { get; public set; }
    public bool Strikethrough { get; public set; }
    public bool Subscript { get; public set; }
    public bool Superscript { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public string FontName { get; public set; }
    public ExcelFontVertialAlignment VerticalAlignment { get; public set; }
    public bool IsAutoColor { get; }
    public ChartTextAreaImpl TextArea { get; public set; }
    public ChartSerieDataFormatImpl Format { get; }
    public IChartLayout Layout { get; public set; }
    internal bool IsDelete { get; internal set; }
    public bool HasTextRotation { get; }
    public ChartParagraphType ParagraphType { get; public set; }
    public string NumberFormat { get; public set; }
    public bool IsFormula { get; public set; }
    internal bool ShowTextProperties { get; internal set; }
    internal bool ShowSizeProperties { get; internal set; }
    internal bool ShowBoldProperties { get; internal set; }
    public Excel2007TextRotation TextRotation { get; public set; }
    public ColorObject ColorObject { get; }
    public int Index { get; }
    public FontImpl Font { get; }
    internal bool CheckSerieIsPie { get; }
    internal bool IsEnableDataLabels { get; internal set; }
    private WorkbookImpl ParentBook { get; }
    internal String[] StringCache { get; internal set; }
    internal bool IsFontChanged { get; internal set; }
    public ChartDataLabelsImpl(IApplication application, object parent, int index);
    private void SetParents(bool isChart);
    public sealed virtual bool get_IsSeriesName();
    public sealed virtual void set_IsSeriesName(bool value);
    public sealed virtual bool get_IsCategoryName();
    public sealed virtual void set_IsCategoryName(bool value);
    public sealed virtual bool get_IsValueFromCells();
    public sealed virtual void set_IsValueFromCells(bool value);
    public sealed virtual IRange get_ValueFromCellsRange();
    public sealed virtual void set_ValueFromCellsRange(IRange value);
    public sealed virtual bool get_IsValue();
    public sealed virtual void set_IsValue(bool value);
    public sealed virtual bool get_IsPercentage();
    public sealed virtual void set_IsPercentage(bool value);
    internal bool get_IsSourceLinked();
    internal void set_IsSourceLinked(bool value);
    public sealed virtual bool get_IsBubbleSize();
    public sealed virtual void set_IsBubbleSize(bool value);
    public sealed virtual string get_Delimiter();
    public sealed virtual void set_Delimiter(string value);
    public sealed virtual bool get_IsLegendKey();
    public sealed virtual void set_IsLegendKey(bool value);
    public sealed virtual bool get_ShowLeaderLines();
    public sealed virtual void set_ShowLeaderLines(bool value);
    public sealed virtual ExcelDataLabelPosition get_Position();
    public sealed virtual void set_Position(ExcelDataLabelPosition value);
    internal ChartSerieImpl get_Serie();
    internal void set_Serie(ChartSerieImpl value);
    public sealed virtual ExcelChartBackgroundMode get_BackgroundMode();
    public sealed virtual void set_BackgroundMode(ExcelChartBackgroundMode value);
    public sealed virtual bool get_IsAutoMode();
    public sealed virtual void set_IsAutoMode(bool value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual IChartRichTextString get_RichText();
    public sealed virtual int get_TextRotationAngle();
    public sealed virtual void set_TextRotationAngle(int value);
    public sealed virtual IChartFrameFormat get_FrameFormat();
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_RGBColor();
    public sealed virtual void set_RGBColor(Color value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual bool get_MacOSOutlineFont();
    public sealed virtual void set_MacOSOutlineFont(bool value);
    public sealed virtual bool get_MacOSShadow();
    public sealed virtual void set_MacOSShadow(bool value);
    public sealed virtual double get_Size();
    public sealed virtual void set_Size(double value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual bool get_Subscript();
    public sealed virtual void set_Subscript(bool value);
    public sealed virtual bool get_Superscript();
    public sealed virtual void set_Superscript(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual ExcelFontVertialAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelFontVertialAlignment value);
    public sealed virtual Font GenerateNativeFont();
    public sealed virtual bool get_IsAutoColor();
    [CLSCompliantAttribute("False")]
public sealed virtual void Serialize(IList`1<IBiffStorage> records);
    private void SetObjectLink();
    public ChartTextAreaImpl get_TextArea();
    public void set_TextArea(ChartTextAreaImpl value);
    public ChartSerieDataFormatImpl get_Format();
    public sealed virtual IChartLayout get_Layout();
    public sealed virtual void set_Layout(IChartLayout value);
    internal bool get_IsDelete();
    internal void set_IsDelete(bool value);
    public sealed virtual bool get_HasTextRotation();
    public sealed virtual ChartParagraphType get_ParagraphType();
    public sealed virtual void set_ParagraphType(ChartParagraphType value);
    public string get_NumberFormat();
    public void set_NumberFormat(string value);
    public sealed virtual bool get_IsFormula();
    public sealed virtual void set_IsFormula(bool value);
    internal bool get_ShowTextProperties();
    internal void set_ShowTextProperties(bool value);
    internal bool get_ShowSizeProperties();
    internal void set_ShowSizeProperties(bool value);
    internal bool get_ShowBoldProperties();
    internal void set_ShowBoldProperties(bool value);
    public Excel2007TextRotation get_TextRotation();
    public void set_TextRotation(Excel2007TextRotation value);
    internal void UpdateDataLabelText(ChartDataLabelsImpl dataLabelsImpl, bool isValueFromCells);
    public void UpdateSerieIndex();
    public object Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual int get_Index();
    public sealed virtual FontImpl get_Font();
    internal bool get_CheckSerieIsPie();
    internal bool get_IsEnableDataLabels();
    internal void set_IsEnableDataLabels(bool value);
    private WorkbookImpl get_ParentBook();
    internal String[] get_StringCache();
    internal void set_StringCache(String[] value);
    internal bool get_IsFontChanged();
    internal void set_IsFontChanged(bool value);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartDataPointImpl : CommonObject {
    private ChartDataLabelsImpl m_dataLabels;
    private int m_iIndex;
    private ChartSerieDataFormatImpl m_dataFormat;
    private ChartImpl m_parentChart;
    private bool m_bHasDataPoint;
    private bool m_defaultMarker;
    private bool m_bBubble3D;
    private int m_explosion;
    private bool m_bHasExplosion;
    private bool m_setAsTotal;
    public IChartDataLabels DataLabels { get; internal set; }
    public IChartSerieDataFormat DataFormat { get; }
    public ChartSerieDataFormatImpl InnerDataFormat { get; public set; }
    public int Index { get; public set; }
    public ChartSerieDataFormatImpl DataFormatOrNull { get; }
    public bool IsDefault { get; }
    public bool HasDataLabels { get; }
    internal bool HasDataPoint { get; internal set; }
    public bool IsDefaultmarkertype { get; public set; }
    internal bool Bubble3D { get; internal set; }
    internal int Explosion { get; internal set; }
    internal bool HasExplosion { get; }
    public bool SetAsTotal { get; public set; }
    public ChartDataPointImpl(IApplication application, object parent, int index);
    public sealed virtual IChartDataLabels get_DataLabels();
    internal void set_DataLabels(IChartDataLabels value);
    public sealed virtual IChartSerieDataFormat get_DataFormat();
    public ChartSerieDataFormatImpl get_InnerDataFormat();
    public void set_InnerDataFormat(ChartSerieDataFormatImpl value);
    public sealed virtual int get_Index();
    public void set_Index(int value);
    public ChartSerieDataFormatImpl get_DataFormatOrNull();
    public sealed virtual bool get_IsDefault();
    public bool get_HasDataLabels();
    internal bool get_HasDataPoint();
    internal void set_HasDataPoint(bool value);
    public sealed virtual bool get_IsDefaultmarkertype();
    public sealed virtual void set_IsDefaultmarkertype(bool value);
    internal bool get_Bubble3D();
    internal void set_Bubble3D(bool value);
    internal int get_Explosion();
    internal void set_Explosion(int value);
    internal bool get_HasExplosion();
    public sealed virtual bool get_SetAsTotal();
    public sealed virtual void set_SetAsTotal(bool value);
    [CLSCompliantAttribute("False")]
public void SerializeDataLabels(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializeDataFormat(OffsetArrayList records);
    public void SetDataLabels(ChartTextAreaImpl textArea);
    private void CreateDataLabels();
    public object Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    public void UpdateSerieIndex();
    public void ChangeChartStockHigh_Low_CloseType();
    public void ChangeChartStockVolume_High_Low_CloseType();
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use ChangeIntimateBubble(ExcelChartType typeToChange) method. Sorry for inconvenience.")]
public void ChangeIntimateBuble(ExcelChartType typeToChange);
    public void ChangeIntimateBubble(ExcelChartType typeToChange);
    public void CloneDataFormat(ChartSerieDataFormatImpl serieFormat);
    internal void CloneDataLabels(ChartDataLabelsImpl dataLabels);
    public void ClearDataFormats(ChartSerieDataFormatImpl format);
    protected virtual void OnDispose();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Charts.ChartDataPointsCollection : CommonObject {
    private ChartDataPointImpl m_dataPointDefault;
    internal Dictionary`2<int, ChartDataPointImpl> m_hashDataPoints;
    private ChartSerieImpl m_series;
    private ChartImpl m_chart;
    public IChartDataPoint Item { get; }
    public IChartDataPoint DefaultDataPoint { get; }
    public bool IsLoading { get; }
    public ChartSerieDataFormatImpl DefPointFormatOrNull { get; }
    public int DeninedDPCount { get; }
    public ChartDataPointsCollection(IApplication application, object parent);
    private void SetParents();
    private void SetParentChart();
    public sealed virtual IChartDataPoint get_Item(int index);
    public sealed virtual IChartDataPoint get_DefaultDataPoint();
    public bool get_IsLoading();
    public ChartSerieDataFormatImpl get_DefPointFormatOrNull();
    [CLSCompliantAttribute("False")]
public void SerializeDataLabels(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializeDataFormats(OffsetArrayList records);
    public object Clone(object parent, WorkbookImpl book, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    public void Add(ChartDataPointImpl point);
    public void Clear();
    internal void ClearWithExistingFormats(ExcelChartType destinationType);
    public void UpdateSerieIndex();
    public void ClearDataFormats(ChartSerieDataFormatImpl format);
    public int get_DeninedDPCount();
    public sealed virtual IEnumerator GetEnumerator();
    internal bool CheckDPDataLabels();
    protected virtual void OnDispose();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartDataTableImpl : CommonObject {
    private ChartDatRecord m_chartDat;
    private List`1<BiffRecordRaw> m_arrRecords;
    private ChartTextAreaImpl m_text;
    internal bool hasDefaultFontName;
    internal bool isdefault;
    internal bool HasShapeProperties;
    internal MemoryStream shapeStream;
    public bool HasHorzBorder { get; public set; }
    public bool HasVertBorder { get; public set; }
    public bool HasBorders { get; public set; }
    public bool ShowSeriesKeys { get; public set; }
    internal bool HasTextArea { get; }
    public IChartTextArea TextArea { get; }
    public ChartDataTableImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartDataTableImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public ChartDataTableImpl Clone(object parent);
    public sealed virtual bool get_HasHorzBorder();
    public sealed virtual void set_HasHorzBorder(bool value);
    public sealed virtual bool get_HasVertBorder();
    public sealed virtual void set_HasVertBorder(bool value);
    public sealed virtual bool get_HasBorders();
    public sealed virtual void set_HasBorders(bool value);
    public sealed virtual bool get_ShowSeriesKeys();
    public sealed virtual void set_ShowSeriesKeys(bool value);
    internal bool get_HasTextArea();
    public sealed virtual IChartTextArea get_TextArea();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartDropBarImpl : CommonObject {
    private ChartDropBarRecord m_dropBar;
    private ChartBorderImpl m_lineFormat;
    private ChartInteriorImpl m_interior;
    private WorkbookImpl m_parentBook;
    private ChartFillImpl m_fill;
    private ThreeDFormatImpl m_3D;
    private ShadowImpl m_shadow;
    public bool HasInterior { get; }
    public IShadow Shadow { get; }
    public bool HasShadowProperties { get; internal set; }
    public IThreeDFormat ThreeD { get; }
    public bool Has3dProperties { get; internal set; }
    public bool HasLineProperties { get; }
    public int Gap { get; public set; }
    public IChartInterior Interior { get; }
    public IChartBorder LineProperties { get; }
    public IFill Fill { get; }
    public ColorObject ForeGroundColorObject { get; }
    public ColorObject BackGroundColorObject { get; }
    public ExcelPattern Pattern { get; public set; }
    public bool IsAutomaticFormat { get; public set; }
    public bool Visible { get; public set; }
    public ChartDropBarImpl(IApplication application, object parent);
    private void SetParents();
    [CLSCompliantAttribute("False")]
public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public sealed virtual bool get_HasInterior();
    public sealed virtual IShadow get_Shadow();
    public sealed virtual bool get_HasShadowProperties();
    internal void set_HasShadowProperties(bool value);
    public sealed virtual IThreeDFormat get_ThreeD();
    public sealed virtual bool get_Has3dProperties();
    internal void set_Has3dProperties(bool value);
    public sealed virtual bool get_HasLineProperties();
    public sealed virtual int get_Gap();
    public sealed virtual void set_Gap(int value);
    public sealed virtual IChartInterior get_Interior();
    public sealed virtual IChartBorder get_LineProperties();
    public sealed virtual IFill get_Fill();
    public sealed virtual ColorObject get_ForeGroundColorObject();
    public sealed virtual ColorObject get_BackGroundColorObject();
    public sealed virtual ExcelPattern get_Pattern();
    public sealed virtual void set_Pattern(ExcelPattern value);
    public sealed virtual bool get_IsAutomaticFormat();
    public sealed virtual void set_IsAutomaticFormat(bool value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public ChartDropBarImpl Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartErrorBarsImpl : CommonObject {
    public static int DEF_NUMBER_X_VALUE;
    public static int DEF_NUMBER_Y_VALUE;
    private ChartBorderImpl m_border;
    private ChartSerAuxErrBarRecord m_errorBarRecord;
    private ShadowImpl m_shadow;
    private ExcelErrorBarInclude m_include;
    private ChartSerieImpl m_serie;
    private IRange m_plusRange;
    private IRange m_minusRange;
    private bool m_bIsY;
    private ChartAIRecord m_chartAi;
    private ChartMarkerFormatRecord m_markerFormat;
    private bool m_bChanged;
    private ThreeDFormatImpl m_3D;
    private Object[] m_plusRangeValues;
    private Object[] m_minusRangeValues;
    private bool m_isPlusNumberLiteral;
    private bool m_isMinusNumberLiteral;
    private string m_formatCode;
    public IChartBorder Border { get; }
    public ExcelErrorBarInclude Include { get; public set; }
    public bool HasCap { get; public set; }
    public ExcelErrorBarType Type { get; public set; }
    public double NumberValue { get; public set; }
    internal bool IsPlusNumberLiteral { get; internal set; }
    internal bool IsMinusNumberLiteral { get; internal set; }
    public IRange PlusRange { get; public set; }
    public IRange MinusRange { get; public set; }
    public IShadow Shadow { get; }
    public bool HasShadowProperties { get; internal set; }
    public IThreeDFormat Chart3DOptions { get; }
    public bool Has3dProperties { get; internal set; }
    public bool IsY { get; }
    internal Object[] PlusRangeValues { get; internal set; }
    internal Object[] MinusRangeValues { get; internal set; }
    public ChartErrorBarsImpl(IApplication application, object parent, bool bIsY);
    public ChartErrorBarsImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data);
    public static void SerializeSerieRecord(IList`1<IBiffStorage> records, int count);
    public static void SerializeDataFormatRecords(IList`1<IBiffStorage> records, ChartBorderImpl border, int iSerieIndex, int iIndex, ChartMarkerFormatRecord marker);
    private void FindParents();
    public sealed virtual IChartBorder get_Border();
    public sealed virtual ExcelErrorBarInclude get_Include();
    public sealed virtual void set_Include(ExcelErrorBarInclude value);
    public sealed virtual bool get_HasCap();
    public sealed virtual void set_HasCap(bool value);
    public sealed virtual ExcelErrorBarType get_Type();
    public sealed virtual void set_Type(ExcelErrorBarType value);
    public sealed virtual double get_NumberValue();
    public sealed virtual void set_NumberValue(double value);
    internal bool get_IsPlusNumberLiteral();
    internal void set_IsPlusNumberLiteral(bool value);
    internal bool get_IsMinusNumberLiteral();
    internal void set_IsMinusNumberLiteral(bool value);
    public sealed virtual IRange get_PlusRange();
    public sealed virtual void set_PlusRange(IRange value);
    public sealed virtual IRange get_MinusRange();
    public sealed virtual void set_MinusRange(IRange value);
    public sealed virtual IShadow get_Shadow();
    public bool get_HasShadowProperties();
    internal void set_HasShadowProperties(bool value);
    public sealed virtual IThreeDFormat get_Chart3DOptions();
    public bool get_Has3dProperties();
    internal void set_Has3dProperties(bool value);
    public sealed virtual void ClearFormats();
    public sealed virtual void Delete();
    private void Parse(IList`1<BiffRecordRaw> data);
    public void Serialize(IList`1<IBiffStorage> records);
    private void SerializeAiRecords(IList`1<IBiffStorage> records, bool bIsPlus);
    private int GetCount(IRange range);
    private void SerializeErrorBar(IList`1<IBiffStorage> records, bool bIsYAxis, bool bIsPlus, int iSerieIndex);
    private Ptg[] GetPtg(bool bIsPlus);
    public bool get_IsY();
    internal Object[] get_PlusRangeValues();
    internal void set_PlusRangeValues(Object[] value);
    internal Object[] get_MinusRangeValues();
    internal void set_MinusRangeValues(Object[] value);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    private bool CheckInclude(ExcelErrorBarInclude value);
    public ChartErrorBarsImpl Clone(object parent, Dictionary`2<string, string> hashNewNames);
}
internal class Syncfusion.XlsIO.Implementation.Charts.ChartExDataCache : object {
    private string m_categoryFormula;
    private string m_seriesFormula;
    private Object[] m_seriesValues;
    private Object[] m_categoryValues;
    private bool m_isRowWiseCategory;
    private bool m_isRowWiseSeries;
    private string m_seriesFormatCode;
    private string m_categoryFormatCode;
    internal string CategoryFormula { get; internal set; }
    internal string SeriesFormula { get; internal set; }
    internal Object[] SeriesValues { get; internal set; }
    internal Object[] CategoryValues { get; internal set; }
    internal bool IsRowWiseCategory { get; internal set; }
    internal bool IsRowWiseSeries { get; internal set; }
    internal string SeriesFormatCode { get; internal set; }
    internal string CategoriesFormatCode { get; internal set; }
    internal string get_CategoryFormula();
    internal void set_CategoryFormula(string value);
    internal string get_SeriesFormula();
    internal void set_SeriesFormula(string value);
    internal Object[] get_SeriesValues();
    internal void set_SeriesValues(Object[] value);
    internal Object[] get_CategoryValues();
    internal void set_CategoryValues(Object[] value);
    internal bool get_IsRowWiseCategory();
    internal void set_IsRowWiseCategory(bool value);
    internal bool get_IsRowWiseSeries();
    internal void set_IsRowWiseSeries(bool value);
    internal string get_SeriesFormatCode();
    internal void set_SeriesFormatCode(string value);
    internal string get_CategoriesFormatCode();
    internal void set_CategoriesFormatCode(string value);
    internal void CopyProperties(ChartSerieImpl serie, WorkbookImpl workbook);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartFillImpl : ShapeFillImpl {
    private ChartGelFrameRecord m_gel;
    private bool m_invertIfNegative;
    public double TransparencyFrom { get; public set; }
    public double TransparencyTo { get; public set; }
    public ColorObject ForeColorObject { get; }
    public ColorObject BackColorObject { get; }
    public bool Visible { get; public set; }
    public bool InvertIfNegative { get; public set; }
    public ChartFillImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartFillImpl(IApplication application, object parent, ChartGelFrameRecord gel);
    private void Parse();
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records);
    public virtual double get_TransparencyFrom();
    public virtual void set_TransparencyFrom(double value);
    public virtual double get_TransparencyTo();
    public virtual void set_TransparencyTo(double value);
    public virtual ColorObject get_ForeColorObject();
    public virtual ColorObject get_BackColorObject();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public bool get_InvertIfNegative();
    public void set_InvertIfNegative(bool value);
    [CLSCompliantAttribute("False")]
protected virtual IFopteOptionWrapper SetPicture(IFopteOptionWrapper opt);
    protected virtual int SetPictureToBse(Image im, string strName);
    [CLSCompliantAttribute("False")]
protected virtual IFopteOptionWrapper SerializeTransparency(IFopteOptionWrapper opt);
    internal virtual void ChangeVisible();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Charts.ChartFormatCollection : CollectionBaseEx`1<ChartFormatImpl> {
    private static int DEF_ARRAY_VALUE;
    public static int DEF_ARRAY_CAPACITY;
    private static TBIFFRecord[] DEF_NEED_SECONDARY_AXIS;
    private Int32[] m_arrOrder;
    private ChartParentAxisImpl m_parentAxis;
    private bool m_isParetoFormat;
    public ChartFormatImpl Item { get; }
    public bool IsPrimary { get; }
    public bool NeedSecondaryAxis { get; }
    internal bool IsParetoFormat { get; internal set; }
    internal bool IsBarChartAxes { get; }
    internal bool IsPercentStackedAxis { get; }
    public ChartFormatCollection(IApplication application, object parent);
    private static ChartFormatCollection();
    public void SetParents();
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public ChartFormatImpl get_Item(int index);
    public bool get_IsPrimary();
    public bool get_NeedSecondaryAxis();
    internal bool get_IsParetoFormat();
    internal void set_IsParetoFormat(bool value);
    internal bool get_IsBarChartAxes();
    internal bool get_IsPercentStackedAxis();
    public ChartFormatImpl Add(ChartFormatImpl formatToAdd);
    public ChartFormatImpl Add(ChartFormatImpl formatToAdd, bool bCanReplace);
    public ChartFormatImpl FindOrAdd(ChartFormatImpl formatToAdd);
    public bool ContainsIndex(int index);
    public void Remove(ChartFormatImpl toRemove);
    public void UpdateIndexesAfterRemove(int removeIndex);
    public void UpdateSeriesByChartGroup(int newIndex, int OldIndex);
    public void Clear();
    public virtual object Clone(object parent);
    public void SetIndex(int index, int Value);
    public void UpdateFormatsOnAdding(int index);
    public void UpdateFormatsOnRemoving(int index);
    public ChartFormatImpl GetFormat(int iOrder, bool bDelete);
    public void AddFormat(ChartFormatImpl format);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartFormatImpl : CommonObject {
    public static int DEF_BAR_STACKED;
    private static int DEF_SERIES_NUMBER;
    private ChartChartFormatRecord m_chartChartFormat;
    private BiffRecordRaw m_serieFormat;
    private Chart3DRecord m_chart3D;
    private ChartFormatLinkRecord m_formatLink;
    private ChartDataLabelsRecord m_dataLabels;
    private ChartChartLineRecord m_chartChartLine;
    private ChartSerieDataFormatImpl m_dataFormat;
    private Stream m_markerEffectList;
    private ChartDropBarImpl m_firstDropBar;
    private ChartDropBarImpl m_secondDropBar;
    private ChartSeriesListRecord m_seriesList;
    private ChartImpl m_chart;
    private ChartParentAxisImpl m_parentAxis;
    private ChartBorderImpl m_serieLine;
    private ChartBorderImpl m_highlowLine;
    private ChartBorderImpl m_dropLine;
    private bool m_isChartExType;
    public bool IsVeryColor { get; public set; }
    public bool IsVaryColor { get; public set; }
    public IChartSerieDataFormat SerieDataFormat { get; }
    public int Overlap { get; public set; }
    public int GapWidth { get; public set; }
    public bool IsHorizontalBar { get; public set; }
    public bool StackValuesBar { get; public set; }
    public bool ShowAsPercentsBar { get; public set; }
    public bool HasShadowBar { get; public set; }
    public bool StackValuesLine { get; public set; }
    public bool ShowAsPercentsLine { get; public set; }
    public bool HasShadowLine { get; public set; }
    public int FirstSliceAngle { get; public set; }
    public int DoughnutHoleSize { get; public set; }
    public bool HasShadowPie { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public int BubbleScale { get; public set; }
    public ExcelBubbleSize SizeRepresents { get; public set; }
    public bool IsBubbles { get; public set; }
    public bool ShowNegativeBubbles { get; public set; }
    public bool HasShadowScatter { get; public set; }
    public bool IsStacked { get; public set; }
    public bool IsCategoryBrokenDown { get; public set; }
    public bool IsAreaShadowed { get; public set; }
    public bool IsFillSurface { get; public set; }
    public bool Is3DPhongShade { get; public set; }
    public bool HasShadowRadar { get; public set; }
    public bool HasRadarAxisLabels { get; public set; }
    public ExcelPieType PieChartType { get; public set; }
    public bool UseDefaultSplitValue { get; public set; }
    public ExcelSplitType SplitType { get; public set; }
    public int SplitValue { get; public set; }
    public int SplitPercent { get; public set; }
    public int PieSecondSize { get; public set; }
    public int Gap { get; public set; }
    public int NumSplitValue { get; public set; }
    public bool HasShadowBoppop { get; public set; }
    public bool IsSeriesName { get; public set; }
    public bool IsCategoryName { get; public set; }
    public bool IsValue { get; public set; }
    public bool IsPercentage { get; public set; }
    public bool IsBubbleSize { get; public set; }
    public int DelimiterLength { get; }
    public string Delimiter { get; public set; }
    public ExcelDropLineStyle LineStyle { get; public set; }
    public ExcelDropLineStyle DropLineStyle { get; public set; }
    public IChartDropBar FirstDropBar { get; }
    public IChartDropBar SecondDropBar { get; }
    public IChartBorder PieSeriesLine { get; internal set; }
    public int Rotation { get; public set; }
    public bool IsDefaultRotation { get; }
    public int Elevation { get; public set; }
    public bool IsDefaultElevation { get; }
    public int Perspective { get; public set; }
    public int HeightPercent { get; public set; }
    public int DepthPercent { get; public set; }
    public int GapDepth { get; public set; }
    public bool RightAngleAxes { get; public set; }
    public bool IsClustered { get; public set; }
    internal bool IsChartExType { get; internal set; }
    public bool AutoScaling { get; public set; }
    public bool WallsAndGridlines2D { get; public set; }
    private ChartBarRecord BarRecord { get; }
    private ChartLineRecord LineRecord { get; }
    private ChartPieRecord PieRecord { get; }
    private ChartScatterRecord ScatterRecord { get; }
    private ChartAreaRecord AreaRecord { get; }
    private ChartSurfaceRecord SurfaceRecord { get; }
    private ChartRadarRecord RadarRecord { get; }
    private ChartRadarAreaRecord RadarAreaRecord { get; }
    private ChartBoppopRecord BoppopRecord { get; }
    private ChartDataLabelsRecord DataLabelsRecord { get; }
    private ChartSerieDataFormatImpl DataFormat { get; }
    private ChartChartFormatRecord ChartChartFormatRecord { get; }
    private Chart3DRecord Chart3DRecord { get; }
    public bool IsPrimaryAxis { get; }
    public bool IsChartChartLine { get; }
    public bool IsChartLineFormat { get; }
    public bool IsDropBar { get; }
    [CLSCompliantAttribute("False")]
public BiffRecordRaw SerieFormat { get; }
    public int DrawingZOrder { get; public set; }
    public TBIFFRecord FormatRecordType { get; }
    public bool Is3D { get; }
    public ChartSerieDataFormatImpl DataFormatOrNull { get; }
    public bool IsMarker { get; }
    public bool IsLine { get; }
    public bool IsSmoothed { get; }
    internal IChartBorder HighLowLineProperties { get; internal set; }
    public IChartBorder HighLowLines { get; internal set; }
    public IChartBorder DropLines { get; internal set; }
    public bool HasDropLines { get; public set; }
    public bool HasHighLowLines { get; public set; }
    public bool HasSeriesLines { get; public set; }
    internal Stream EffectListStream { get; internal set; }
    public ChartFormatImpl(IApplication application, object parent);
    public sealed virtual bool get_IsVeryColor();
    public sealed virtual void set_IsVeryColor(bool value);
    public sealed virtual bool get_IsVaryColor();
    public sealed virtual void set_IsVaryColor(bool value);
    public IChartSerieDataFormat get_SerieDataFormat();
    public sealed virtual int get_Overlap();
    public sealed virtual void set_Overlap(int value);
    public sealed virtual int get_GapWidth();
    public sealed virtual void set_GapWidth(int value);
    public bool get_IsHorizontalBar();
    public void set_IsHorizontalBar(bool value);
    public bool get_StackValuesBar();
    public void set_StackValuesBar(bool value);
    public bool get_ShowAsPercentsBar();
    public void set_ShowAsPercentsBar(bool value);
    public bool get_HasShadowBar();
    public void set_HasShadowBar(bool value);
    public bool get_StackValuesLine();
    public void set_StackValuesLine(bool value);
    public bool get_ShowAsPercentsLine();
    public void set_ShowAsPercentsLine(bool value);
    public bool get_HasShadowLine();
    public void set_HasShadowLine(bool value);
    public sealed virtual int get_FirstSliceAngle();
    public sealed virtual void set_FirstSliceAngle(int value);
    public sealed virtual int get_DoughnutHoleSize();
    public sealed virtual void set_DoughnutHoleSize(int value);
    public bool get_HasShadowPie();
    public void set_HasShadowPie(bool value);
    public bool get_ShowLeaderLines();
    public void set_ShowLeaderLines(bool value);
    public sealed virtual int get_BubbleScale();
    public sealed virtual void set_BubbleScale(int value);
    public sealed virtual ExcelBubbleSize get_SizeRepresents();
    public sealed virtual void set_SizeRepresents(ExcelBubbleSize value);
    public bool get_IsBubbles();
    public void set_IsBubbles(bool value);
    public sealed virtual bool get_ShowNegativeBubbles();
    public sealed virtual void set_ShowNegativeBubbles(bool value);
    public bool get_HasShadowScatter();
    public void set_HasShadowScatter(bool value);
    public bool get_IsStacked();
    public void set_IsStacked(bool value);
    public bool get_IsCategoryBrokenDown();
    public void set_IsCategoryBrokenDown(bool value);
    public bool get_IsAreaShadowed();
    public void set_IsAreaShadowed(bool value);
    public bool get_IsFillSurface();
    public void set_IsFillSurface(bool value);
    public bool get_Is3DPhongShade();
    public void set_Is3DPhongShade(bool value);
    public bool get_HasShadowRadar();
    public void set_HasShadowRadar(bool value);
    public sealed virtual bool get_HasRadarAxisLabels();
    public sealed virtual void set_HasRadarAxisLabels(bool value);
    public ExcelPieType get_PieChartType();
    public void set_PieChartType(ExcelPieType value);
    public bool get_UseDefaultSplitValue();
    public void set_UseDefaultSplitValue(bool value);
    public sealed virtual ExcelSplitType get_SplitType();
    public sealed virtual void set_SplitType(ExcelSplitType value);
    public sealed virtual int get_SplitValue();
    public sealed virtual void set_SplitValue(int value);
    public int get_SplitPercent();
    public void set_SplitPercent(int value);
    public sealed virtual int get_PieSecondSize();
    public sealed virtual void set_PieSecondSize(int value);
    public int get_Gap();
    public void set_Gap(int value);
    public int get_NumSplitValue();
    public void set_NumSplitValue(int value);
    public bool get_HasShadowBoppop();
    public void set_HasShadowBoppop(bool value);
    public bool get_IsSeriesName();
    public void set_IsSeriesName(bool value);
    public bool get_IsCategoryName();
    public void set_IsCategoryName(bool value);
    public bool get_IsValue();
    public void set_IsValue(bool value);
    public bool get_IsPercentage();
    public void set_IsPercentage(bool value);
    public bool get_IsBubbleSize();
    public void set_IsBubbleSize(bool value);
    public int get_DelimiterLength();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public ExcelDropLineStyle get_LineStyle();
    public void set_LineStyle(ExcelDropLineStyle value);
    public sealed virtual ExcelDropLineStyle get_DropLineStyle();
    public sealed virtual void set_DropLineStyle(ExcelDropLineStyle value);
    public sealed virtual IChartDropBar get_FirstDropBar();
    public sealed virtual IChartDropBar get_SecondDropBar();
    public sealed virtual IChartBorder get_PieSeriesLine();
    internal void set_PieSeriesLine(IChartBorder value);
    public int get_Rotation();
    public void set_Rotation(int value);
    public bool get_IsDefaultRotation();
    public int get_Elevation();
    public void set_Elevation(int value);
    public bool get_IsDefaultElevation();
    public int get_Perspective();
    public void set_Perspective(int value);
    public int get_HeightPercent();
    public void set_HeightPercent(int value);
    public int get_DepthPercent();
    public void set_DepthPercent(int value);
    public int get_GapDepth();
    public void set_GapDepth(int value);
    public bool get_RightAngleAxes();
    public void set_RightAngleAxes(bool value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    internal bool get_IsChartExType();
    internal void set_IsChartExType(bool value);
    public bool get_AutoScaling();
    public void set_AutoScaling(bool value);
    public bool get_WallsAndGridlines2D();
    public void set_WallsAndGridlines2D(bool value);
    private ChartBarRecord get_BarRecord();
    private ChartLineRecord get_LineRecord();
    private ChartPieRecord get_PieRecord();
    private ChartScatterRecord get_ScatterRecord();
    private ChartAreaRecord get_AreaRecord();
    private ChartSurfaceRecord get_SurfaceRecord();
    private ChartRadarRecord get_RadarRecord();
    private ChartRadarAreaRecord get_RadarAreaRecord();
    private ChartBoppopRecord get_BoppopRecord();
    private ChartDataLabelsRecord get_DataLabelsRecord();
    private ChartSerieDataFormatImpl get_DataFormat();
    private ChartChartFormatRecord get_ChartChartFormatRecord();
    private Chart3DRecord get_Chart3DRecord();
    public bool get_IsPrimaryAxis();
    public bool get_IsChartChartLine();
    public bool get_IsChartLineFormat();
    public bool get_IsDropBar();
    public BiffRecordRaw get_SerieFormat();
    public int get_DrawingZOrder();
    public void set_DrawingZOrder(int value);
    public TBIFFRecord get_FormatRecordType();
    public bool get_Is3D();
    public ChartSerieDataFormatImpl get_DataFormatOrNull();
    public bool get_IsMarker();
    public bool get_IsLine();
    public bool get_IsSmoothed();
    internal IChartBorder get_HighLowLineProperties();
    internal void set_HighLowLineProperties(IChartBorder value);
    public sealed virtual IChartBorder get_HighLowLines();
    internal void set_HighLowLines(IChartBorder value);
    public sealed virtual IChartBorder get_DropLines();
    internal void set_DropLines(IChartBorder value);
    public sealed virtual bool get_HasDropLines();
    public sealed virtual void set_HasDropLines(bool value);
    public sealed virtual bool get_HasHighLowLines();
    public sealed virtual void set_HasHighLowLines(bool value);
    public sealed virtual bool get_HasSeriesLines();
    public sealed virtual void set_HasSeriesLines(bool value);
    internal Stream get_EffectListStream();
    internal void set_EffectListStream(Stream value);
    public void SetParents();
    [CLSCompliantAttribute("False")]
public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public static string GetStartSerieType(ExcelChartType type);
    public void ChangeChartType(ExcelChartType type, bool isSeriesCreation);
    private void SetDropLineStyle(ExcelDropLineStyle value);
    private void SetNullForAllRecords();
    private void ChangeChartStockLine();
    public void ChangeChartStockHigh_Low_CloseType();
    public void ChangeChartStockOpen_High_Low_CloseType();
    public void ChangeChartStockVolume_High_Low_CloseTypeFirst();
    public void ChangeChartStockVolume_High_Low_CloseTypeSecond();
    public void ChangeChartStockVolume_Open_High_Low_CloseType();
    public void ChangeSerieType(ExcelChartType type, bool isSeriesCreation);
    private void ChangeSerieDoughnut(ExcelChartType type);
    private void ChangeSerieBuble(ExcelChartType type, bool isSeriesCreation);
    private void UpdateBubbleSeries(IChartSeries series);
    private void ChangeSerieSurface(ExcelChartType type, bool isSeriesCreation);
    private void ChangeSerieRadar(ExcelChartType type);
    private void ChangeSerieBarClustered(ExcelChartType type);
    private void ChangeSerieBarStacked(ExcelChartType type);
    private void ChangeSerieLine(ExcelChartType type);
    private void ChangeSeriePie(ExcelChartType type);
    private void ChangeSerieArea(ExcelChartType type);
    private void ChangeTickLabelPosition(bool value);
    private void ChangeSerieScatter(ExcelChartType type);
    private void ChangeSerieConeCylinderPyramyd(ExcelChartType type);
    public sealed virtual object Clone(object parent);
    public static bool op_Equality(ChartFormatImpl format1, ChartFormatImpl format2);
    public static bool op_Inequality(ChartFormatImpl format1, ChartFormatImpl format2);
    internal void InitializeStockFormat();
    internal void CloneDeletedFormat(object parent, ChartFormatImpl& format, bool cloneDataFormat);
    internal ExcelChartType CheckAndApplyChartType();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartFrameFormatImpl : CommonObject {
    private ChartFrameRecord m_chartFrame;
    private ChartBorderImpl m_border;
    private ThreeDFormatImpl m_3D;
    private ChartInteriorImpl m_interior;
    private UnknownRecord m_startBlock;
    private UnknownRecord m_shapePropsStream;
    private UnknownRecord m_endBlock;
    private ShadowImpl m_shadow;
    private ChartFillImpl m_fill;
    protected ChartImpl m_chart;
    private IChartLayout m_layout;
    protected ChartPlotAreaLayoutRecord m_plotAreaLayout;
    [CLSCompliantAttribute("False")]
public ChartFrameRecord FrameRecord { get; }
    public WorkbookImpl Workbook { get; }
    public IChartLayout Layout { get; public set; }
    public bool HasInterior { get; }
    public bool HasLineProperties { get; internal set; }
    public IChartBorder Border { get; }
    public IChartInterior Interior { get; }
    public IThreeDFormat ThreeD { get; }
    public IFill Fill { get; }
    public bool HasShadowProperties { get; internal set; }
    public bool Has3dProperties { get; internal set; }
    public IShadow Shadow { get; }
    public ExcelRectangleStyle RectangleStyle { get; public set; }
    public bool IsAutoSize { get; public set; }
    public bool IsAutoPosition { get; public set; }
    public bool IsBorderCornersRound { get; public set; }
    public IChartBorder LineProperties { get; }
    public ColorObject ForeGroundColorObject { get; }
    public ColorObject BackGroundColorObject { get; }
    public ExcelPattern Pattern { get; public set; }
    public bool IsAutomaticFormat { get; public set; }
    public bool Visible { get; public set; }
    public ChartFrameFormatImpl(IApplication application, object parent);
    public ChartFrameFormatImpl(IApplication application, object parent, bool bSetDefaults);
    public ChartFrameFormatImpl(IApplication application, object parent, bool bAutoSize, bool bIsInteriorGrey, bool bSetDefaults);
    public ChartFrameFormatImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void SetParents();
    [CLSCompliantAttribute("False")]
public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
internal void Parse(IList`1<BiffRecordRaw> data, Int32& iPos, bool isPlotArea);
    [CLSCompliantAttribute("False")]
protected virtual bool CheckBegin(BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
protected virtual void ParseRecord(BiffRecordRaw record, Int32& iBeginCounter, bool isPlotArea);
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeRecord(IList`1<IBiffStorage> list, BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
protected virtual BiffRecordRaw UnwrapRecord(BiffRecordRaw record);
    public void SetDefaultValues(bool bAutoSize, bool bIsInteriorGray);
    public ChartFrameRecord get_FrameRecord();
    public WorkbookImpl get_Workbook();
    public sealed virtual IChartLayout get_Layout();
    public sealed virtual void set_Layout(IChartLayout value);
    public sealed virtual bool get_HasInterior();
    public sealed virtual bool get_HasLineProperties();
    internal void set_HasLineProperties(bool value);
    public sealed virtual IChartBorder get_Border();
    public sealed virtual IChartInterior get_Interior();
    public sealed virtual IThreeDFormat get_ThreeD();
    public sealed virtual IFill get_Fill();
    public sealed virtual bool get_HasShadowProperties();
    internal void set_HasShadowProperties(bool value);
    public sealed virtual bool get_Has3dProperties();
    internal void set_Has3dProperties(bool value);
    public sealed virtual IShadow get_Shadow();
    public sealed virtual ExcelRectangleStyle get_RectangleStyle();
    public sealed virtual void set_RectangleStyle(ExcelRectangleStyle value);
    public bool get_IsAutoSize();
    public void set_IsAutoSize(bool value);
    public bool get_IsAutoPosition();
    public void set_IsAutoPosition(bool value);
    public sealed virtual bool get_IsBorderCornersRound();
    public sealed virtual void set_IsBorderCornersRound(bool value);
    public sealed virtual IChartBorder get_LineProperties();
    public static ExcelKnownColors UpdateLineColor(ExcelKnownColors color);
    public sealed virtual void Clear();
    public sealed virtual ColorObject get_ForeGroundColorObject();
    public sealed virtual ColorObject get_BackGroundColorObject();
    public sealed virtual ExcelPattern get_Pattern();
    public sealed virtual void set_Pattern(ExcelPattern value);
    public sealed virtual bool get_IsAutomaticFormat();
    public sealed virtual void set_IsAutomaticFormat(bool value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public ChartFrameFormatImpl Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartGlobalFormatsCollection : object {
    public static ExcelChartType[] DEF_MABY_COMBINATION_TYPES;
    public static String[] DEF_MABY_COMBINATION_TYPES_START;
    private ChartFormatCollection m_primary;
    private ChartFormatCollection m_secondary;
    public ChartFormatCollection PrimaryFormats { get; }
    public ChartFormatCollection SecondaryFormats { get; }
    public ChartGlobalFormatsCollection(IApplication application, ChartParentAxisImpl primaryParent, ChartParentAxisImpl secondaryParent);
    private static ChartGlobalFormatsCollection();
    public void Parse(IList data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public ChartFormatCollection get_PrimaryFormats();
    public ChartFormatCollection get_SecondaryFormats();
    public void Remove(ChartFormatImpl format);
    public void CreateCollection(IApplication application, object parent, bool bIsPrimary);
    public void ChangeCollections();
    public ChartFormatImpl AddFormat(ChartFormatImpl formatToAdd, int order, int index, bool isPrimary);
    public void RemoveFormat(int indexToRemove, int iOrder, bool isPrimary);
    private ChartFormatCollection GetCurrentCollection(bool isPrimary);
    public ChartGlobalFormatsCollection CloneForPrimary(object parent);
    public void CloneForSecondary(ChartGlobalFormatsCollection result, object parent);
    public ExcelChartType DetectChartType(ChartSeriesCollection series);
    private ExcelChartType DetectTypeForPrimaryCollOnly(ChartSeriesCollection series);
    public void Clear();
    public ChartFormatImpl ChangeNotIntimateSerieType(ExcelChartType typeToChange, ExcelChartType serieType, IApplication application, ChartImpl chart, ChartSerieImpl serieToChange);
    public void ChangeShallowAxis(bool bToPrimary, int iOrder, bool bAdd, int iNewOrder);
    private void ChangeInAxis(ChartFormatCollection from, ChartFormatCollection to, int iOrder, int iNewOrder, bool bAdd);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartGridLineImpl : CommonObject {
    private static ExcelKnownColors DEF_COLOR_INEDX;
    private ChartAxisLineFormatRecord m_axisLine;
    private ChartAxisImpl m_parentAxis;
    private ShadowImpl m_shadow;
    protected WorkbookImpl m_parentBook;
    private ChartBorderImpl m_border;
    private ThreeDFormatImpl m_3D;
    public IChartBorder Border { get; }
    public IChartBorder LineProperties { get; }
    public bool HasLineProperties { get; }
    public IShadow Shadow { get; }
    public bool HasShadowProperties { get; internal set; }
    public IThreeDFormat ThreeD { get; }
    public bool Has3dProperties { get; internal set; }
    public bool HasInterior { get; }
    public IChartInterior Interior { get; }
    public IFill Fill { get; }
    public ExcelAxisLineIdentifier AxisLineType { get; public set; }
    protected ChartAxisImpl ParentAxis { get; }
    public ChartGridLineImpl(IApplication application, object parent, ExcelAxisLineIdentifier axisType);
    public ChartGridLineImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void SetParents();
    [CLSCompliantAttribute("False")]
public virtual void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    public sealed virtual IChartBorder get_Border();
    public sealed virtual IChartBorder get_LineProperties();
    public sealed virtual bool get_HasLineProperties();
    public sealed virtual IShadow get_Shadow();
    public sealed virtual bool get_HasShadowProperties();
    internal void set_HasShadowProperties(bool value);
    public sealed virtual IThreeDFormat get_ThreeD();
    public sealed virtual bool get_Has3dProperties();
    internal void set_Has3dProperties(bool value);
    public sealed virtual bool get_HasInterior();
    public sealed virtual IChartInterior get_Interior();
    public sealed virtual IFill get_Fill();
    public virtual void Delete();
    public ExcelAxisLineIdentifier get_AxisLineType();
    public void set_AxisLineType(ExcelAxisLineIdentifier value);
    protected ChartAxisImpl get_ParentAxis();
    public virtual object Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartImpl : WorksheetBaseImpl {
    internal static string DefaultChartTitle;
    public static string DEF_FIRST_SERIE_NAME;
    public static ExcelChartType DEFAULT_CHART_TYPE;
    public static string PREFIX_3D;
    public static string PREFIX_BAR;
    public static string PREFIX_CLUSTERED;
    public static string PREFIX_CONTOUR;
    public static string PREFIX_EXPLODED;
    public static string PREFIX_LINE;
    public static string PREFIX_MARKERS;
    public static string PREFIX_NOCOLOR;
    public static string PREFIX_SHOW_PERCENT;
    public static string PREFIX_SMOOTHEDLINE;
    public static string PREFIX_STACKED;
    public static string START_AREA;
    public static string START_BAR;
    public static string START_BUBBLE;
    public static string START_COLUMN;
    public static string START_CONE;
    public static string START_CYLINDER;
    public static string START_DOUGHNUT;
    public static string START_LINE;
    public static string START_PIE;
    public static string START_PYRAMID;
    public static string START_RADAR;
    public static string START_SCATTER;
    public static string START_SURFACE;
    private static int DEF_PRIMARY_INDEX;
    public static int DEF_SI_VALUE;
    public static int DEF_SI_CATEGORY;
    public static int DEF_SI_BUBBLE;
    private static int DEF_SECONDARY_INDEX;
    private static int MaximumFontCount;
    internal static int DefaultPlotAreaX;
    internal static int DefaultPlotAreaY;
    internal static int DefaultPlotAreaXLength;
    internal static int DefaultPlotAreaYLength;
    public static String[] DEF_LEGEND_NEED_DATA_POINT;
    public static ExcelChartType[] DEF_SUPPORT_SERIES_AXIS;
    public static ExcelChartType[] DEF_UNSUPPORT_PIVOT_CHART;
    public static String[] DEF_SUPPORT_DATA_TABLE;
    public static String[] DEF_SUPPORT_ERROR_BARS;
    public static ExcelChartType[] DEF_SUPPORT_TREND_LINES;
    public static ExcelChartType[] DEF_WALLS_OR_FLOOR_TYPES;
    private static ExcelAxisType[] DEF_SECONDARY_AXES_TYPES;
    public static ExcelChartType[] DEF_NOT_3D;
    public static ExcelChartType[] DEF_CHANGE_SERIE;
    public static ExcelChartType[] DEF_NOT_SUPPORT_GRIDLINES;
    public static ExcelChartType[] DEF_NEED_SECONDARY_AXIS;
    internal static ExcelChartType[] DEF_PRIMARY_AXIS;
    public static ExcelChartType[] DEF_COMBINATION_CHART;
    public static String[] DEF_PRIORITY_START_TYPES;
    public static ExcelChartType[] DEF_CHANGE_INTIMATE;
    public static ExcelChartType[] DEF_DONT_NEED_PLOT;
    public static ExcelChartType[] DEF_NEED_VIEW_3D;
    public static ExcelChartType[] CHARTS_100;
    public static ExcelChartType[] STACKEDCHARTS;
    public static ExcelChartType[] CHARTS3D;
    public static ExcelChartType[] CHARTS_LINE;
    public static ExcelChartType[] CHARTS_BUBBLE;
    public static ExcelChartType[] NO_CATEGORY_AXIS;
    public static ExcelChartType[] CHARTS_VARYCOLOR;
    public static ExcelChartType[] CHARTS_EXPLODED;
    private static ExcelChartType[] CHART_SERIES_LINES;
    public static ExcelChartType[] CHARTS_SCATTER;
    public static ExcelChartType[] CHARTS_SMOOTHED_LINE;
    public static ExcelChartType[] CHARTS_STOCK;
    public static ExcelChartType[] CHARTS_PERSPECTIVE;
    public static ExcelChartType[] CHARTS_CLUSTERED;
    public static ExcelChartType[] CHARTS_WITH_PLOT_AREA;
    public static ExcelLegendPosition[] LEGEND_VERTICAL;
    private static Byte[][] DEF_UNKNOWN_SERIE_LABEL;
    public static ExcelChartType[] DEF_SPECIAL_DATA_LABELS;
    public static ExcelChartType[] DEF_CHART_PERCENTAGE;
    private bool m_bParseDataOnDemand;
    private int m_iOverlap;
    private int m_gapWidth;
    private bool m_isStringRef;
    private bool m_bShowGapWidth;
    private bool m_bIsSecondaryAxis;
    private bool m_bInWorksheet;
    internal ExcelChartType m_chartType;
    private ExcelChartType m_pivotChartType;
    private IRange m_dataRange;
    private bool m_bSeriesInRows;
    private bool m_bHasDataTable;
    private ChartPageSetupImpl m_pageSetup;
    private double m_dXPos;
    private double m_dYPos;
    private double m_dWidth;
    private double m_dHeight;
    private List`1<ChartFbiRecord> m_arrFonts;
    private ChartSeriesCollection m_series;
    private ChartCategoryCollection m_categories;
    private ChartDataTableImpl m_dataTable;
    private ChartShtpropsRecord m_chartProperties;
    private ChartPlotGrowthRecord m_plotGrowth;
    private ChartPosRecord m_plotAreaBoundingBox;
    private ChartFrameFormatImpl m_chartArea;
    private ChartFrameFormatImpl m_plotAreaFrame;
    private TypedSortedListEx`2<int, List`1<BiffRecordRaw>> m_lstDefaultText;
    private ChartTextAreaImpl m_title;
    private ChartParentAxisImpl m_primaryParentAxis;
    private ChartParentAxisImpl m_secondaryParentAxis;
    private ChartLegendImpl m_legend;
    private bool m_bHasLegend;
    private ChartWallOrFloorImpl m_walls;
    private ChartWallOrFloorImpl m_sidewall;
    private ChartWallOrFloorImpl m_floor;
    private ChartPlotAreaImpl m_plotArea;
    private bool m_bTypeChanging;
    private bool m_isDefaultTitle;
    private ExcelChartType m_destinationType;
    private List`1<BiffRecordRaw> m_trendList;
    private List`1<BiffRecordRaw> m_pivotList;
    private WindowZoomRecord m_chartChartZoom;
    private RelationCollection m_relations;
    private int m_iStyle2007;
    private Stream m_pivotFormatsStream;
    private bool m_bZoomToFit;
    private Dictionary`2<int, List`1<BiffRecordRaw>> m_dictReparseErrorBars;
    private Stream m_bandFormats;
    private IPivotTable m_pivotSource;
    private string m_preservedPivotSource;
    private int m_formatId;
    private bool m_showAllFieldButtons;
    private bool m_showAxisFieldButtons;
    private bool m_showValueFieldButtons;
    private bool m_showLegendFieldButtons;
    private bool m_showExpandCollapseFieldButtons;
    private bool m_showReportFilterFieldButtons;
    private Stream m_alternateContent;
    private Stream m_defaultTextProperty;
    private FontWrapper m_font;
    private Nullable`1<bool> m_hasAutoTitle;
    private List`1<int> m_axisIds;
    private ChartPlotAreaLayoutRecord m_plotAreaLayout;
    private Boolean[] category;
    private Boolean[] series;
    private ExcelSeriesNameLevel m_seriesNameLevel;
    private ExcelCategoriesLabelLevel m_categoriesLabelLevel;
    private string m_radarStyle;
    internal bool IsAddCopied;
    internal Dictionary`2<int, ChartDataPointsCollection> CommonDataPointsCollection;
    private Object[] m_categoryLabelValues;
    private string m_formula;
    internal bool IsStock;
    internal bool m_bIsRadarTypeChanged;
    internal string m_lang;
    internal MemoryStream m_themeOverrideStream;
    private Dictionary`2<string, Color> m_themeColors;
    internal bool m_isChartColorStyleSkipped;
    internal bool m_isChartStyleSkipped;
    internal MemoryStream m_colorMapOverrideStream;
    private IEnumerable`1<IGrouping`2<int, IChartSerie>> m_chartSerieGroupsBeforesorting;
    private bool m_isChartParsed;
    internal string m_showDlbSOverMax;
    private bool m_isDisplayNaAsBlank;
    private ushort m_chartExTitlePosition;
    private bool m_chartTitleIncludeInLayout;
    private Nullable`1<bool> m_isAutoUpdate;
    private string m_chartExRelationId;
    internal bool IsStringRef { get; internal set; }
    internal int OverLap { get; internal set; }
    internal int GapWidth { get; internal set; }
    internal bool ShowGapWidth { get; internal set; }
    public int Rotation { get; public set; }
    public int Elevation { get; public set; }
    public int Perspective { get; public set; }
    public ExcelChartType PivotChartType { get; public set; }
    public IPivotTable PivotSource { get; public set; }
    public string PreservedPivotSource { get; public set; }
    public int FormatId { get; public set; }
    public bool HasPivotSource { get; }
    public bool ShowAllFieldButtons { get; public set; }
    public bool ShowValueFieldButtons { get; public set; }
    public bool ShowAxisFieldButtons { get; public set; }
    public bool ShowLegendFieldButtons { get; public set; }
    internal bool ShowExpandCollapseFieldButtons { get; internal set; }
    public bool ShowReportFilterFieldButtons { get; public set; }
    public int HeightPercent { get; public set; }
    public int DepthPercent { get; public set; }
    public int GapDepth { get; public set; }
    public bool RightAngleAxes { get; public set; }
    public bool AutoScaling { get; public set; }
    public bool WallsAndGridlines2D { get; public set; }
    public ExcelChartType ChartType { get; public set; }
    public ExcelSeriesNameLevel SeriesNameLevel { get; public set; }
    public ExcelCategoriesLabelLevel CategoryLabelLevel { get; public set; }
    public IRange DataRange { get; public set; }
    public bool IsSeriesInRows { get; public set; }
    public string ChartTitle { get; public set; }
    public IChartTextArea ChartTitleArea { get; }
    public IFont ChartTitleFont { get; }
    public string CategoryAxisTitle { get; public set; }
    public string ValueAxisTitle { get; public set; }
    public string SecondaryCategoryAxisTitle { get; public set; }
    public string SecondaryValueAxisTitle { get; public set; }
    public string SeriesAxisTitle { get; public set; }
    public IChartCategoryAxis PrimaryCategoryAxis { get; }
    public IChartValueAxis PrimaryValueAxis { get; }
    public IChartSeriesAxis PrimarySerieAxis { get; }
    public IChartCategoryAxis SecondaryCategoryAxis { get; }
    public IChartValueAxis SecondaryValueAxis { get; }
    public IChartPageSetup PageSetup { get; }
    public double XPos { get; public set; }
    public double YPos { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    internal double EMUHeight { get; internal set; }
    internal double EMUWidth { get; internal set; }
    public IChartSeries Series { get; }
    public IChartCategories Categories { get; }
    public ChartFormatCollection PrimaryFormats { get; }
    public ChartFormatCollection SecondaryFormats { get; }
    public IChartFrameFormat ChartArea { get; }
    public bool HasChartArea { get; public set; }
    public bool HasPlotArea { get; public set; }
    public IChartFrameFormat PlotArea { get; public set; }
    public ChartParentAxisImpl PrimaryParentAxis { get; }
    public ChartParentAxisImpl SecondaryParentAxis { get; }
    public IChartWallOrFloor Walls { get; public set; }
    public IChartWallOrFloor SideWall { get; public set; }
    public IChartWallOrFloor BackWall { get; public set; }
    public IChartWallOrFloor Floor { get; public set; }
    public IChartDataTable DataTable { get; }
    public bool HasDataTable { get; public set; }
    public IChartLegend Legend { get; }
    public bool HasLegend { get; public set; }
    public ExcelChartPlotEmpty DisplayBlanksAs { get; public set; }
    internal bool IsDisplayNaAsBlank { get; internal set; }
    public bool PlotVisibleOnly { get; public set; }
    public bool ShowPlotVisible { get; public set; }
    public bool SizeWithWindow { get; public set; }
    public bool SupportWallsAndFloor { get; }
    public bool ProtectDrawingObjects { get; }
    public bool ProtectScenarios { get; }
    public ExcelSheetProtection Protection { get; }
    public ChartPlotAreaLayoutRecord PlotAreaLayout { get; }
    public Object[] CategoryLabelValues { get; public set; }
    public string CategoryFormula { get; public set; }
    internal bool IsChartParsed { get; internal set; }
    internal Dictionary`2<string, Color> ThemeColors { get; internal set; }
    public ExcelKnownColors TabColor { get; public set; }
    public bool IsCategoryAxisAvail { get; }
    public bool IsValueAxisAvail { get; }
    public bool IsSeriesAxisAvail { get; }
    public bool IsStacked { get; }
    public bool IsChart_100 { get; }
    public bool IsChart3D { get; }
    public bool IsPivotChart3D { get; }
    public bool IsChartLine { get; }
    public bool NeedDataFormat { get; }
    public bool NeedMarkerFormat { get; }
    public bool IsChartBar { get; }
    public bool IsChartPyramid { get; }
    public bool IsChartCone { get; }
    public bool IsChartCylinder { get; }
    public bool IsChartBubble { get; }
    public bool IsChartDoughnut { get; }
    public bool IsChartVaryColor { get; }
    public bool IsChartExploded { get; }
    public bool IsSeriesLines { get; }
    public bool CanChartHaveSeriesLines { get; }
    public bool IsChartScatter { get; }
    public ExcelChartLinePattern DefaultLinePattern { get; }
    public bool IsChartSmoothedLine { get; }
    public bool IsChartStock { get; }
    public bool NeedDropBar { get; }
    public bool IsChartVolume { get; }
    public bool IsPerspective { get; }
    public bool IsClustered { get; }
    public bool NoPlotArea { get; }
    public bool IsChartRadar { get; }
    public bool IsChartPie { get; }
    public bool IsChartWalls { get; }
    public bool IsChartFloor { get; }
    internal List`1<int> SerializedAxisIds { get; }
    public bool IsSecondaryCategoryAxisAvail { get; }
    public bool IsSecondaryValueAxisAvail { get; }
    public bool IsSecondaryAxes { get; public set; }
    public bool IsSpecialDataLabels { get; }
    public bool CanChartPercentageLabel { get; }
    public bool CanChartBubbleLabel { get; }
    public bool IsManuallyFormatted { get; public set; }
    private ChartPlotGrowthRecord PlotGrowth { get; }
    private ChartPosRecord PlotAreaBoundingBox { get; }
    public WorkbookImpl InnerWorkbook { get; }
    public ChartFrameFormatImpl InnerChartArea { get; }
    public ChartFrameFormatImpl InnerPlotArea { get; }
    public string ChartStartType { get; }
    public PageSetupBaseImpl PageSetupBase { get; }
    [CLSCompliantAttribute("False")]
public ChartShtpropsRecord ChartProperties { get; }
    public bool Loading { get; }
    internal ChartFormatImpl ChartFormat { get; }
    public bool TypeChanging { get; public set; }
    public ExcelChartType DestinationType { get; public set; }
    public RelationCollection Relations { get; }
    public int Style { get; public set; }
    public bool HasFloor { get; }
    public bool HasWalls { get; }
    public Stream PivotFormatsStream { get; public set; }
    public bool ZoomToFit { get; public set; }
    protected ExcelSheetProtection DefaultProtectionOptions { get; }
    public bool IsEmbeded { get; }
    public int DefaultTextIndex { get; }
    public Stream PreservedBandFormats { get; public set; }
    public bool HasTitle { get; public set; }
    internal Stream AlternateContent { get; internal set; }
    public bool HasChartTitle { get; }
    internal Stream DefaultTextProperty { get; internal set; }
    public IFont Font { get; }
    internal bool IsChartFontAvail { get; }
    internal Nullable`1<bool> HasAutoTitle { get; internal set; }
    internal bool IsTitleAreaInitialized { get; }
    internal bool ParseDataOnDemand { get; internal set; }
    internal string RadarStyle { get; internal set; }
    internal bool IsWorkSheetDataholder { get; }
    internal IEnumerable`1<IGrouping`2<int, IChartSerie>> ChartSerieGroupsBeforesorting { get; internal set; }
    internal ushort ChartExTitlePosition { get; internal set; }
    internal bool ChartTitleIncludeInLayout { get; internal set; }
    internal Nullable`1<bool> AutoUpdate { get; internal set; }
    internal string ChartExRelationId { get; internal set; }
    internal bool IsTreeMapOrSunBurst { get; }
    internal bool IsHistogramOrPareto { get; }
    public ChartImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartImpl(IApplication application, object parent, BiffReader reader, ExcelParseOptions options, bool bSkipParsing, Dictionary`2<int, int> hashXFormatIndexes, IDecryptor decryptor);
    [CLSCompliantAttribute("False")]
public ChartImpl(IApplication application, object parent, IList data, Int32& iPos, ExcelParseOptions options);
    private static ChartImpl();
    private void SetParents();
    private void CreateChartTitle();
    public virtual void Parse();
    private void Parse(IList data, Int32& iPos, ExcelParseOptions options);
    internal virtual void ParseBinaryData(Dictionary`2<int, int> dictUpdatedSSTIndexes, XlsbDataHolder holder);
    protected internal virtual void ParseData(Dictionary`2<int, int> dictUpdatedSSTIndexes);
    private void ReparseErrorBars(Dictionary`2<int, int> newSeriesIndex);
    private void ParseOrdinaryRecord(BiffRecordRaw record, Int32& iPos, Dictionary`2<int, int> newSeriesIndex);
    private void GetChartRecords(IList data, Int32& iPos, List`1<BiffRecordRaw> records, ExcelParseOptions options);
    private void ParseFonts(IList data, Int32& iPos);
    private void ParseChart(IList`1<BiffRecordRaw> data, Int32& iPos, Dictionary`2<int, int> newSeriesIndex);
    private void FillDataFromChartRecord(ChartChartRecord chart);
    private void ParsePlotGrowth(ChartPlotGrowthRecord plotGrowth);
    private void ParseSiIndex(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseSeriesOrErrorBars(IList`1<BiffRecordRaw> data, Int32& iPos, Dictionary`2<int, int> newSeriesIndexes);
    private void ParseSheetProperties(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseDefaultText(IList`1<BiffRecordRaw> data, Int32& iPos);
    private List`1<BiffRecordRaw> GetTextData(IList`1<BiffRecordRaw> data, Int32& iPos);
    private ChartTextAreaImpl ParseText(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseAxesUsed(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseAxisParent(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseDataTable(IList`1<BiffRecordRaw> data, Int32& iPos);
    private List`1<ChartTextAreaImpl> AssignTextArea(ChartTextAreaImpl textArea, Dictionary`2<int, int> newSeriesIndexes);
    private void ParsePlotArea(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseChartFrame(IList`1<BiffRecordRaw> data, Int32& iPos);
    public void DetectChartType();
    private void SetDefaultValues();
    private IFont ParseFontx(ChartFontxRecord fontx);
    public void ParseLegend(IList`1<BiffRecordRaw> data, Int32& iPos);
    private bool AddRecords(IList`1<BiffRecordRaw> list, IList`1<BiffRecordRaw> holder, Int32& iPos, Int32& serieIndex, Boolean& bIsErrorBars);
    private void ReparseTrendLegends();
    private int FindSeriesIndex(List`1<BiffRecordRaw> m_trendList, int i);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    private void SerializeFonts(OffsetArrayList records);
    private void SerializeChart(OffsetArrayList records, bool isChartEx);
    private void SerializeDefaultText(OffsetArrayList records);
    private void SerializeAxes(OffsetArrayList records);
    private void SerializeSheetProperties(OffsetArrayList records);
    private void SerializeChartSiIndexes(OffsetArrayList records);
    private void InsertSeriesLabels(OffsetArrayList records);
    private void InsertSeriesValues(OffsetArrayList records);
    private void SerializeDataTable(OffsetArrayList records);
    private void SerializeDataLabels(OffsetArrayList records);
    private void SerializeSeriesList(OffsetArrayList records);
    private void SerializeChartSiMembers(OffsetArrayList records, int siIndex);
    [CLSCompliantAttribute("False")]
public void SerializeLegend(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializeWalls(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializeFloor(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializePlotArea(OffsetArrayList records);
    internal bool get_IsStringRef();
    internal void set_IsStringRef(bool value);
    internal int get_OverLap();
    internal void set_OverLap(int value);
    internal int get_GapWidth();
    internal void set_GapWidth(int value);
    internal bool get_ShowGapWidth();
    internal void set_ShowGapWidth(bool value);
    public sealed virtual int get_Rotation();
    public sealed virtual void set_Rotation(int value);
    public sealed virtual int get_Elevation();
    public sealed virtual void set_Elevation(int value);
    public sealed virtual int get_Perspective();
    public sealed virtual void set_Perspective(int value);
    public sealed virtual ExcelChartType get_PivotChartType();
    public sealed virtual void set_PivotChartType(ExcelChartType value);
    public sealed virtual IPivotTable get_PivotSource();
    public sealed virtual void set_PivotSource(IPivotTable value);
    public string get_PreservedPivotSource();
    public void set_PreservedPivotSource(string value);
    public int get_FormatId();
    public void set_FormatId(int value);
    public bool get_HasPivotSource();
    public sealed virtual bool get_ShowAllFieldButtons();
    public sealed virtual void set_ShowAllFieldButtons(bool value);
    public sealed virtual bool get_ShowValueFieldButtons();
    public sealed virtual void set_ShowValueFieldButtons(bool value);
    public sealed virtual bool get_ShowAxisFieldButtons();
    public sealed virtual void set_ShowAxisFieldButtons(bool value);
    public sealed virtual bool get_ShowLegendFieldButtons();
    public sealed virtual void set_ShowLegendFieldButtons(bool value);
    internal bool get_ShowExpandCollapseFieldButtons();
    internal void set_ShowExpandCollapseFieldButtons(bool value);
    public sealed virtual bool get_ShowReportFilterFieldButtons();
    public sealed virtual void set_ShowReportFilterFieldButtons(bool value);
    public sealed virtual int get_HeightPercent();
    public sealed virtual void set_HeightPercent(int value);
    public sealed virtual int get_DepthPercent();
    public sealed virtual void set_DepthPercent(int value);
    public sealed virtual int get_GapDepth();
    public sealed virtual void set_GapDepth(int value);
    public sealed virtual bool get_RightAngleAxes();
    public sealed virtual void set_RightAngleAxes(bool value);
    public sealed virtual bool get_AutoScaling();
    public sealed virtual void set_AutoScaling(bool value);
    public sealed virtual bool get_WallsAndGridlines2D();
    public sealed virtual void set_WallsAndGridlines2D(bool value);
    public sealed virtual ExcelChartType get_ChartType();
    public sealed virtual void set_ChartType(ExcelChartType value);
    public sealed virtual ExcelSeriesNameLevel get_SeriesNameLevel();
    public sealed virtual void set_SeriesNameLevel(ExcelSeriesNameLevel value);
    public sealed virtual ExcelCategoriesLabelLevel get_CategoryLabelLevel();
    public sealed virtual void set_CategoryLabelLevel(ExcelCategoriesLabelLevel value);
    public sealed virtual IRange get_DataRange();
    public sealed virtual void set_DataRange(IRange value);
    private void DetectAndUpdateDataRangeForChartEx(ExcelChartType type);
    private bool GetSeriesRangesForChartEx(int reqRowsCount, int reqColsCount, bool isAnySpace, IRange inputSerieValue, IRange inputSerieNameRange, IRange& outputSerieValue, IRange& outputSerieNameRange, IRange& outputAxisRange);
    private int GetRangeForChartEx(MigrantRangeImpl tempRange, int lastIndex, int index, int constantValue, bool isChangeRow);
    public void UpdateCategory(ChartSeriesCollection series, bool fromDataRange);
    public void UpdateSeries(ChartSeriesCollection series);
    public static IRange GetCategoryRange(IRange Chartvalues, IRange& values, int count, bool bIsInRow);
    public sealed virtual bool get_IsSeriesInRows();
    public sealed virtual void set_IsSeriesInRows(bool value);
    private void GetFilter();
    private void Setfilter();
    public sealed virtual string get_ChartTitle();
    public sealed virtual void set_ChartTitle(string value);
    internal string GetChartTitle();
    public sealed virtual IChartTextArea get_ChartTitleArea();
    public IFont get_ChartTitleFont();
    public string get_CategoryAxisTitle();
    public void set_CategoryAxisTitle(string value);
    public string get_ValueAxisTitle();
    public void set_ValueAxisTitle(string value);
    public string get_SecondaryCategoryAxisTitle();
    public void set_SecondaryCategoryAxisTitle(string value);
    public string get_SecondaryValueAxisTitle();
    public void set_SecondaryValueAxisTitle(string value);
    public string get_SeriesAxisTitle();
    public void set_SeriesAxisTitle(string value);
    public sealed virtual IChartCategoryAxis get_PrimaryCategoryAxis();
    public sealed virtual IChartValueAxis get_PrimaryValueAxis();
    public sealed virtual IChartSeriesAxis get_PrimarySerieAxis();
    public sealed virtual IChartCategoryAxis get_SecondaryCategoryAxis();
    public sealed virtual IChartValueAxis get_SecondaryValueAxis();
    public sealed virtual IChartPageSetup get_PageSetup();
    public sealed virtual double get_XPos();
    public sealed virtual void set_XPos(double value);
    public sealed virtual double get_YPos();
    public sealed virtual void set_YPos(double value);
    public sealed virtual double get_Width();
    public sealed virtual void set_Width(double value);
    public sealed virtual double get_Height();
    public sealed virtual void set_Height(double value);
    internal double get_EMUHeight();
    internal void set_EMUHeight(double value);
    internal double get_EMUWidth();
    internal void set_EMUWidth(double value);
    public sealed virtual IChartSeries get_Series();
    public sealed virtual IChartCategories get_Categories();
    public ChartFormatCollection get_PrimaryFormats();
    public ChartFormatCollection get_SecondaryFormats();
    public sealed virtual IChartFrameFormat get_ChartArea();
    public bool get_HasChartArea();
    public void set_HasChartArea(bool value);
    public sealed virtual bool get_HasPlotArea();
    public sealed virtual void set_HasPlotArea(bool value);
    public sealed virtual IChartFrameFormat get_PlotArea();
    public void set_PlotArea(IChartFrameFormat value);
    public ChartParentAxisImpl get_PrimaryParentAxis();
    public ChartParentAxisImpl get_SecondaryParentAxis();
    public sealed virtual IChartWallOrFloor get_Walls();
    public void set_Walls(IChartWallOrFloor value);
    public sealed virtual IChartWallOrFloor get_SideWall();
    public void set_SideWall(IChartWallOrFloor value);
    public sealed virtual IChartWallOrFloor get_BackWall();
    public void set_BackWall(IChartWallOrFloor value);
    public sealed virtual IChartWallOrFloor get_Floor();
    public void set_Floor(IChartWallOrFloor value);
    public sealed virtual IChartDataTable get_DataTable();
    public sealed virtual bool get_HasDataTable();
    public sealed virtual void set_HasDataTable(bool value);
    public sealed virtual IChartLegend get_Legend();
    public sealed virtual bool get_HasLegend();
    public sealed virtual void set_HasLegend(bool value);
    public sealed virtual ExcelChartPlotEmpty get_DisplayBlanksAs();
    public sealed virtual void set_DisplayBlanksAs(ExcelChartPlotEmpty value);
    internal bool get_IsDisplayNaAsBlank();
    internal void set_IsDisplayNaAsBlank(bool value);
    public sealed virtual bool get_PlotVisibleOnly();
    public sealed virtual void set_PlotVisibleOnly(bool value);
    public bool get_ShowPlotVisible();
    public void set_ShowPlotVisible(bool value);
    public sealed virtual bool get_SizeWithWindow();
    public sealed virtual void set_SizeWithWindow(bool value);
    public bool get_SupportWallsAndFloor();
    public virtual bool get_ProtectDrawingObjects();
    public virtual bool get_ProtectScenarios();
    public virtual ExcelSheetProtection get_Protection();
    public ChartPlotAreaLayoutRecord get_PlotAreaLayout();
    public Object[] get_CategoryLabelValues();
    public void set_CategoryLabelValues(Object[] value);
    public string get_CategoryFormula();
    public void set_CategoryFormula(string value);
    internal bool get_IsChartParsed();
    internal void set_IsChartParsed(bool value);
    internal Dictionary`2<string, Color> get_ThemeColors();
    internal void set_ThemeColors(Dictionary`2<string, Color> value);
    public virtual ExcelKnownColors get_TabColor();
    public virtual void set_TabColor(ExcelKnownColors value);
    public bool get_IsCategoryAxisAvail();
    public bool get_IsValueAxisAvail();
    public bool get_IsSeriesAxisAvail();
    public bool get_IsStacked();
    public bool get_IsChart_100();
    public bool get_IsChart3D();
    public bool get_IsPivotChart3D();
    public bool get_IsChartLine();
    public bool get_NeedDataFormat();
    public bool get_NeedMarkerFormat();
    public bool get_IsChartBar();
    public bool get_IsChartPyramid();
    public bool get_IsChartCone();
    public bool get_IsChartCylinder();
    public bool get_IsChartBubble();
    public bool get_IsChartDoughnut();
    public bool get_IsChartVaryColor();
    public bool get_IsChartExploded();
    public bool get_IsSeriesLines();
    public bool get_CanChartHaveSeriesLines();
    public bool get_IsChartScatter();
    public ExcelChartLinePattern get_DefaultLinePattern();
    public bool get_IsChartSmoothedLine();
    public bool get_IsChartStock();
    public bool get_NeedDropBar();
    public bool get_IsChartVolume();
    public bool get_IsPerspective();
    public bool get_IsClustered();
    public bool get_NoPlotArea();
    public bool get_IsChartRadar();
    public bool get_IsChartPie();
    public bool get_IsChartWalls();
    public bool get_IsChartFloor();
    internal List`1<int> get_SerializedAxisIds();
    public bool get_IsSecondaryCategoryAxisAvail();
    public bool get_IsSecondaryValueAxisAvail();
    public bool get_IsSecondaryAxes();
    public void set_IsSecondaryAxes(bool value);
    public bool get_IsSpecialDataLabels();
    public bool get_CanChartPercentageLabel();
    public bool get_CanChartBubbleLabel();
    public bool get_IsManuallyFormatted();
    public void set_IsManuallyFormatted(bool value);
    private ChartPlotGrowthRecord get_PlotGrowth();
    private ChartPosRecord get_PlotAreaBoundingBox();
    public WorkbookImpl get_InnerWorkbook();
    public ChartFrameFormatImpl get_InnerChartArea();
    public ChartFrameFormatImpl get_InnerPlotArea();
    public string get_ChartStartType();
    public virtual PageSetupBaseImpl get_PageSetupBase();
    public ChartShtpropsRecord get_ChartProperties();
    public bool get_Loading();
    internal ChartFormatImpl get_ChartFormat();
    public bool get_TypeChanging();
    public void set_TypeChanging(bool value);
    public ExcelChartType get_DestinationType();
    public void set_DestinationType(ExcelChartType value);
    public RelationCollection get_Relations();
    public sealed virtual int get_Style();
    public sealed virtual void set_Style(int value);
    public bool get_HasFloor();
    public bool get_HasWalls();
    public Stream get_PivotFormatsStream();
    public void set_PivotFormatsStream(Stream value);
    public bool get_ZoomToFit();
    public void set_ZoomToFit(bool value);
    protected virtual ExcelSheetProtection get_DefaultProtectionOptions();
    public bool get_IsEmbeded();
    public int get_DefaultTextIndex();
    public Stream get_PreservedBandFormats();
    public void set_PreservedBandFormats(Stream value);
    public sealed virtual bool get_HasTitle();
    public sealed virtual void set_HasTitle(bool value);
    internal Stream get_AlternateContent();
    internal void set_AlternateContent(Stream value);
    public bool get_HasChartTitle();
    internal Stream get_DefaultTextProperty();
    internal void set_DefaultTextProperty(Stream value);
    public IFont get_Font();
    internal bool get_IsChartFontAvail();
    internal Nullable`1<bool> get_HasAutoTitle();
    internal void set_HasAutoTitle(Nullable`1<bool> value);
    internal bool get_IsTitleAreaInitialized();
    internal virtual bool get_ParseDataOnDemand();
    internal virtual void set_ParseDataOnDemand(bool value);
    internal string get_RadarStyle();
    internal void set_RadarStyle(string value);
    internal bool get_IsWorkSheetDataholder();
    internal IEnumerable`1<IGrouping`2<int, IChartSerie>> get_ChartSerieGroupsBeforesorting();
    internal void set_ChartSerieGroupsBeforesorting(IEnumerable`1<IGrouping`2<int, IChartSerie>> value);
    internal ushort get_ChartExTitlePosition();
    internal void set_ChartExTitlePosition(ushort value);
    internal bool get_ChartTitleIncludeInLayout();
    internal void set_ChartTitleIncludeInLayout(bool value);
    internal Nullable`1<bool> get_AutoUpdate();
    internal void set_AutoUpdate(Nullable`1<bool> value);
    internal string get_ChartExRelationId();
    internal void set_ChartExRelationId(string value);
    internal bool get_IsTreeMapOrSunBurst();
    internal bool get_IsHistogramOrPareto();
    public static bool GetIsClustered(ExcelChartType chartType);
    public static bool GetIs100(ExcelChartType chartType);
    public static bool GetIsStacked(ExcelChartType chartType);
    public static bool GetIsChartPie(ExcelChartType chartType);
    public void CreateNecessaryAxes(bool bPrimary);
    protected virtual void InitializeCollections();
    private void CheckSupportDataTable();
    public static bool CheckDataTablePossibility(string startType, bool bThrowException);
    private void InitializeDefaultText();
    private void OnDataRangeChanged(ExcelChartType type);
    private void AddDefaultRowSerie();
    private void AddDefaultColumnSerie();
    private void AddBubbleRowSerie();
    private void AddBubbleColumnSerie();
    private void AddScatterRowSerie();
    private void AddScatterColumnSerie();
    private void AddStockHLCRowSerie(int count);
    private void AddStockHLCColumnSerie(int count);
    private void AddStockVolumeRowSerie(int count);
    private void AddStockVolumeColumnSerie(int count);
    private void SetVolumeSecondaryAxisFormat();
    private void SetStockSerieFormat(ChartSerieImpl serie);
    private void OnSeriesInRowsChanged();
    private void UpdateSeriesInBubleChart();
    private void OnChartTypeChanged(ExcelChartType type, bool isSeriesCreation);
    private void UpdateSurfaceTickRecord();
    private void UpdateRadarTickRecord();
    private void UpdateChartMembersOnTypeChanging(ExcelChartType type, bool isChartExChanges);
    internal static bool IsChartExSerieType(ExcelChartType type);
    internal void ChangeToChartExType(ExcelChartType oldChartType, ExcelChartType type, bool isSeriesCreation);
    private void ChangeChartStockType(ExcelChartType type);
    private Chart3DRecord GetChart3D();
    private void serie_ValueRangeChanged(object sender, ValueChangedEventArgs e);
    private void InitializeFrames();
    public void RemoveFormat(IChartFormat formatToRemove);
    public void UpdateChartTitle();
    private string GetChartTypeStart();
    internal IRange DetectDataRange();
    internal bool GetCategoryRange(IRange& serieNameRange, IRange& categoryRange);
    private bool DetectIsInRow(IRange range);
    public IRange GetSerieOrAxisRange(IRange range, bool bIsInRow, IRange& serieRange);
    internal IRange GetSerieOrAxisRange(IRange range, bool bIsInRow, bool isSkipFirstForScatter, IRange& serieRange);
    private bool ValidateSerieRangeForChartType(IRange serieValue, ExcelChartType type, bool isSeriesInRows);
    private void UpdateSeriesByDataRange(IRange serieValue, IRange serieNameRange, IRange axisRange, string strType, int iIndex, bool isSeriesInRows);
    private bool CompareSeriesValues(Rectangle rec, IRange range, int i, string strSheetName);
    internal IRange GetSeriesValuesRange(IRange lastRange, IRange buble, IWorksheet sheet, string strSheetName);
    private bool GetSerieNameValuesRange(IRange lastRange, IRange bubles, IWorksheet sheet, string strSheetName, IRange& result);
    private bool GetDataRangeRec(IRange range, Rectangle& rec, bool inRow);
    public void DetectIsInRowOnParsing();
    internal void ChangeChartType(ExcelChartType newChartType, bool isSeriesCreation);
    private void UpdateChartType(ExcelChartType oldChartType, ExcelChartType newChartType, bool isSeriesCreation);
    private void ClearDependentStreams();
    protected virtual ExcelSheetProtection PrepareProtectionOptions(ExcelSheetProtection options);
    private IRange GetSerieRangeByBlank(IRange range, IRange& serieRange, bool isChartEx);
    private IRange CheckForBlankAndAssignAxis(IRange dataRange, IRange nameRangeInput, IRange& nameRangeOutput, bool isSeriesInRows);
    private IRange GetSerieRanges(IRange inputRange, IRange serieNameRange, IRange axisRange, int columnCount, int rowCount, bool isSeriesInRows);
    internal void UpdateChartCategoriesByRange();
    public virtual object Clone(object parent);
    public ChartImpl Clone(Dictionary`2<string, string> hashNewNames, object parent, Dictionary`2<int, int> dicFontIndexes);
    public void ChangePrimaryAxis(bool isParsing);
    public void UpdateChartFbiIndexes(IDictionary dicFontIndexes);
    public void UpdateChartFontXIndexes(IDictionary dicFontIndexes);
    public bool CheckForSupportGridLine();
    public void SetToDefaultGridlines(ExcelChartType type);
    public virtual void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public virtual void MarkUsedReferences(Boolean[] usedItems);
    public virtual void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    internal void RemoveSecondaryAxes();
    internal bool IsSheetParsing();
    public sealed virtual void SaveAsImage(Stream imageAsstream);
    public static int DoubleToFixedPoint(double value);
    public static double FixedPointToDouble(int value);
    internal ChartSeriesAxisImpl CreatePrimarySeriesAxis();
    internal void CheckIsBubble3D();
    internal Color GetChartColor(int index, int totalCount, bool isBinary, bool isColorPalette);
    internal Color GetChartThemeColorByColorIndex(int index);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartInteriorImpl : CommonObject {
    private ChartAreaFormatRecord m_area;
    private WorkbookImpl m_book;
    private ChartSerieDataFormatImpl m_serieFormat;
    private ColorObject m_foreColor;
    private ColorObject m_backColor;
    internal static Dictionary`2<ExcelPattern, ExcelGradientPattern> m_hashPat;
    public ColorObject ForegroundColorObject { get; }
    public ColorObject BackgroundColorObject { get; }
    public Color ForegroundColor { get; public set; }
    public Color BackgroundColor { get; public set; }
    public ExcelPattern Pattern { get; public set; }
    public ExcelKnownColors ForegroundColorIndex { get; public set; }
    public ExcelKnownColors BackgroundColorIndex { get; public set; }
    public bool UseAutomaticFormat { get; public set; }
    public bool SwapColorsOnNegative { get; public set; }
    private static ChartInteriorImpl();
    public ChartInteriorImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartInteriorImpl(IApplication application, object parent, ChartAreaFormatRecord area);
    public ChartInteriorImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void SetParents();
    private void SetParents(ChartInteriorImpl result);
    public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records);
    public ColorObject get_ForegroundColorObject();
    public ColorObject get_BackgroundColorObject();
    public sealed virtual Color get_ForegroundColor();
    public sealed virtual void set_ForegroundColor(Color value);
    public sealed virtual Color get_BackgroundColor();
    public sealed virtual void set_BackgroundColor(Color value);
    public sealed virtual ExcelPattern get_Pattern();
    public sealed virtual void set_Pattern(ExcelPattern value);
    public sealed virtual ExcelKnownColors get_ForegroundColorIndex();
    public sealed virtual void set_ForegroundColorIndex(ExcelKnownColors value);
    public sealed virtual ExcelKnownColors get_BackgroundColorIndex();
    public sealed virtual void set_BackgroundColorIndex(ExcelKnownColors value);
    public sealed virtual bool get_UseAutomaticFormat();
    public sealed virtual void set_UseAutomaticFormat(bool value);
    public sealed virtual bool get_SwapColorsOnNegative();
    public sealed virtual void set_SwapColorsOnNegative(bool value);
    internal void UpdateForeColor();
    internal void UpdateBackColor();
    public void InitForFrameFormat(bool bIsAutoSize, bool bIs3DChart, bool bIsInteriorGray);
    public void InitForFrameFormat(bool bIsAutoSize, bool bIs3DChart, bool bIsInteriorGray, bool bIsGray50);
    public ChartInteriorImpl Clone(object parent);
    private sealed virtual override object Syncfusion.XlsIO.Interfaces.ICloneParent.Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartLayoutImpl : CommonObject {
    protected ChartImpl m_book;
    protected object m_Parent;
    protected IChart m_chart;
    protected IShape m_chartShape;
    protected IChartManualLayout m_manualLayout;
    public WorkbookImpl Workbook { get; }
    public object Parent { get; }
    public IChartManualLayout ManualLayout { get; public set; }
    public LayoutTargets LayoutTarget { get; public set; }
    public LayoutModes LeftMode { get; public set; }
    public LayoutModes TopMode { get; public set; }
    public double Left { get; public set; }
    public double Top { get; public set; }
    public LayoutModes WidthMode { get; public set; }
    public LayoutModes HeightMode { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    internal bool IsManualLayout { get; }
    public ChartLayoutImpl(IApplication application, object parent, object chartObject);
    public ChartLayoutImpl(IApplication application, object parent, bool bSetDefaults);
    public ChartLayoutImpl(IApplication application, object parent, bool bAutoSize, bool bIsInteriorGrey, bool bSetDefaults);
    public ChartLayoutImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void SetParents(object parent);
    public WorkbookImpl get_Workbook();
    public sealed virtual object get_Parent();
    public sealed virtual IChartManualLayout get_ManualLayout();
    public sealed virtual void set_ManualLayout(IChartManualLayout value);
    public sealed virtual LayoutTargets get_LayoutTarget();
    public sealed virtual void set_LayoutTarget(LayoutTargets value);
    public sealed virtual LayoutModes get_LeftMode();
    public sealed virtual void set_LeftMode(LayoutModes value);
    public sealed virtual LayoutModes get_TopMode();
    public sealed virtual void set_TopMode(LayoutModes value);
    public sealed virtual double get_Left();
    public sealed virtual void set_Left(double value);
    public sealed virtual double get_Top();
    public sealed virtual void set_Top(double value);
    public sealed virtual LayoutModes get_WidthMode();
    public sealed virtual void set_WidthMode(LayoutModes value);
    public sealed virtual LayoutModes get_HeightMode();
    public sealed virtual void set_HeightMode(LayoutModes value);
    public sealed virtual double get_Width();
    public sealed virtual void set_Width(double value);
    public sealed virtual double get_Height();
    public sealed virtual void set_Height(double value);
    [CLSCompliantAttribute("False")]
public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
protected virtual bool CheckBegin(BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
protected virtual void ParseRecord(BiffRecordRaw record, Int32& iBeginCounter);
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeRecord(IList`1<IBiffStorage> list, BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
protected virtual BiffRecordRaw UnwrapRecord(BiffRecordRaw record);
    public void SetDefaultValues();
    internal bool get_IsManualLayout();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Charts.ChartLegendEntriesColl : CommonObject {
    private Dictionary`2<int, ChartLegendEntryImpl> m_hashEntries;
    private ChartImpl m_parentChart;
    public int Count { get; }
    public IChartLegendEntry Item { get; }
    internal Dictionary`2<int, ChartLegendEntryImpl> HashEntries { get; }
    public ChartLegendEntriesColl(IApplication application, object parent);
    public sealed virtual int get_Count();
    public sealed virtual IChartLegendEntry get_Item(int iIndex);
    internal Dictionary`2<int, ChartLegendEntryImpl> get_HashEntries();
    private void SetParents();
    public ChartLegendEntryImpl Add(int iIndex);
    public ChartLegendEntryImpl Add(int iIndex, ChartLegendEntryImpl entry);
    public bool Contains(int iIndex);
    public bool CanDelete(int iIndex);
    public void Remove(int iIndex);
    public ChartLegendEntriesColl Clone(object parent, Dictionary`2<int, int> dicIndexes, Dictionary`2<string, string> dicNewSheetNames);
    public void Clear();
    public void UpdateEntries(int entryIndex, int value);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartLegendEntryImpl : CommonObject {
    private ChartLegendxnRecord m_legendXN;
    private ChartTextAreaImpl m_text;
    private ChartLegendEntriesColl m_legendEnties;
    private int m_index;
    public bool IsDeleted { get; public set; }
    public bool IsFormatted { get; public set; }
    public IChartTextArea TextArea { get; }
    public int LegendEntityIndex { get; public set; }
    public int Index { get; public set; }
    public ChartLegendEntryImpl(IApplication application, object parent, int iIndex);
    public ChartLegendEntryImpl(IApplication application, object parent, int iIndex, IList`1<BiffRecordRaw> data, Int32& iPos);
    public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    public void SetParents();
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records);
    public sealed virtual bool get_IsDeleted();
    public sealed virtual void set_IsDeleted(bool value);
    public sealed virtual bool get_IsFormatted();
    public sealed virtual void set_IsFormatted(bool value);
    public sealed virtual IChartTextArea get_TextArea();
    public int get_LegendEntityIndex();
    public void set_LegendEntityIndex(int value);
    public int get_Index();
    public void set_Index(int value);
    public sealed virtual void Clear();
    public sealed virtual void Delete();
    public ChartLegendEntryImpl Clone(object parent, Dictionary`2<int, int> dicIndexes, Dictionary`2<string, string> dicNewSheetNames);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Implementation.Charts.ChartLegendImpl : CommonObject {
    private static int DEF_POSITION;
    private static double DEF_SPRC;
    private ChartLegendRecord m_serieLegend;
    private ChartPosRecord m_pos;
    private ChartAttachedLabelLayoutRecord m_attachedLabelLayout;
    private ChartTextAreaImpl m_text;
    private ChartFrameFormatImpl m_frame;
    private bool m_includeInLayout;
    private ChartImpl m_parentChart;
    private ChartLegendEntriesColl m_collEntries;
    private IChartLayout m_layout;
    private ChartParagraphType m_paraType;
    private UnknownRecord m_legendTextPropsStream;
    private bool m_IsDefaultTextSettings;
    private bool m_IsChartTextArea;
    private ushort m_chartExPosition;
    public IChartFrameFormat FrameFormat { get; }
    public IChartTextArea TextArea { get; }
    public bool IncludeInLayout { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public ExcelLegendPosition Position { get; public set; }
    public bool IsVerticalLegend { get; public set; }
    public IChartLegendEntries LegendEntries { get; }
    internal bool IsDefaultTextSettings { get; internal set; }
    internal bool IsChartTextArea { get; internal set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public bool ContainsDataTable { get; public set; }
    public ExcelLegendSpacing Spacing { get; public set; }
    public bool AutoPosition { get; public set; }
    public bool AutoSeries { get; public set; }
    public bool AutoPositionX { get; public set; }
    public bool AutoPositionY { get; public set; }
    public IChartLayout Layout { get; public set; }
    public ChartParagraphType ParagraphType { get; public set; }
    public ChartAttachedLabelLayoutRecord AttachedLabelLayout { get; }
    internal ushort ChartExPosition { get; internal set; }
    private ChartLegendRecord LegendRecord { get; }
    private ChartPosRecord PositionRecord { get; }
    public ChartLegendImpl(IApplication application, object parent);
    private void SetParents();
    public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    internal void LegendStyleProperty(int index, object value);
    public void Serialize(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeRecord(IList`1<IBiffStorage> records, BiffRecordRaw record);
    public sealed virtual IChartFrameFormat get_FrameFormat();
    public sealed virtual IChartTextArea get_TextArea();
    public sealed virtual bool get_IncludeInLayout();
    public sealed virtual void set_IncludeInLayout(bool value);
    public sealed virtual int get_X();
    public sealed virtual void set_X(int value);
    public sealed virtual int get_Y();
    public sealed virtual void set_Y(int value);
    public sealed virtual ExcelLegendPosition get_Position();
    public sealed virtual void set_Position(ExcelLegendPosition value);
    public sealed virtual bool get_IsVerticalLegend();
    public sealed virtual void set_IsVerticalLegend(bool value);
    public sealed virtual IChartLegendEntries get_LegendEntries();
    internal bool get_IsDefaultTextSettings();
    internal void set_IsDefaultTextSettings(bool value);
    internal bool get_IsChartTextArea();
    internal void set_IsChartTextArea(bool value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public bool get_ContainsDataTable();
    public void set_ContainsDataTable(bool value);
    public ExcelLegendSpacing get_Spacing();
    public void set_Spacing(ExcelLegendSpacing value);
    public bool get_AutoPosition();
    public void set_AutoPosition(bool value);
    public bool get_AutoSeries();
    public void set_AutoSeries(bool value);
    public bool get_AutoPositionX();
    public void set_AutoPositionX(bool value);
    public bool get_AutoPositionY();
    public void set_AutoPositionY(bool value);
    public sealed virtual IChartLayout get_Layout();
    public sealed virtual void set_Layout(IChartLayout value);
    public ChartParagraphType get_ParagraphType();
    public void set_ParagraphType(ChartParagraphType value);
    public ChartAttachedLabelLayoutRecord get_AttachedLabelLayout();
    internal ushort get_ChartExPosition();
    internal void set_ChartExPosition(ushort value);
    private ChartLegendRecord get_LegendRecord();
    private ChartPosRecord get_PositionRecord();
    public ChartLegendImpl Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    public sealed virtual void Clear();
    public sealed virtual void Delete();
    private void SetDefPosition();
    private void SetCustomPosition();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartManualLayoutImpl : CommonObject {
    protected ChartLayoutImpl m_layout;
    protected object m_Parent;
    private ChartAttachedLabelLayoutRecord m_atachedLabelLayout;
    private ChartPlotAreaLayoutRecord m_plotAreaLayout;
    protected LayoutTargets m_layoutTarget;
    protected LayoutModes m_leftMode;
    protected LayoutModes m_topMode;
    protected double m_left;
    protected double m_top;
    protected double m_dX;
    protected double m_dY;
    protected LayoutModes m_widthMode;
    protected LayoutModes m_heightMode;
    protected double m_width;
    protected double m_height;
    protected int m_xTL;
    protected int m_yTL;
    protected int m_xBR;
    protected int m_yBR;
    private byte m_flagOptions;
    public object Parent { get; }
    public ChartAttachedLabelLayoutRecord AttachedLabelLayout { get; public set; }
    public ChartPlotAreaLayoutRecord PlotAreaLayout { get; public set; }
    public LayoutTargets LayoutTarget { get; public set; }
    public LayoutModes LeftMode { get; public set; }
    public LayoutModes TopMode { get; public set; }
    public double Left { get; public set; }
    public double Top { get; public set; }
    public double dX { get; public set; }
    public double dY { get; public set; }
    public LayoutModes WidthMode { get; public set; }
    public LayoutModes HeightMode { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public int xTL { get; public set; }
    public int yTL { get; public set; }
    public int xBR { get; public set; }
    public int yBR { get; public set; }
    internal byte FlagOptions { get; internal set; }
    public ChartManualLayoutImpl(IApplication application, object parent);
    public ChartManualLayoutImpl(IApplication application, object parent, bool bSetDefaults);
    public ChartManualLayoutImpl(IApplication application, object parent, bool bAutoSize, bool bIsInteriorGrey, bool bSetDefaults);
    public ChartManualLayoutImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void SetParents(object parent);
    public sealed virtual object get_Parent();
    public ChartAttachedLabelLayoutRecord get_AttachedLabelLayout();
    public void set_AttachedLabelLayout(ChartAttachedLabelLayoutRecord value);
    public ChartPlotAreaLayoutRecord get_PlotAreaLayout();
    public void set_PlotAreaLayout(ChartPlotAreaLayoutRecord value);
    public sealed virtual LayoutTargets get_LayoutTarget();
    public sealed virtual void set_LayoutTarget(LayoutTargets value);
    public sealed virtual LayoutModes get_LeftMode();
    public sealed virtual void set_LeftMode(LayoutModes value);
    public sealed virtual LayoutModes get_TopMode();
    public sealed virtual void set_TopMode(LayoutModes value);
    public sealed virtual double get_Left();
    public sealed virtual void set_Left(double value);
    public sealed virtual double get_Top();
    public sealed virtual void set_Top(double value);
    public double get_dX();
    public void set_dX(double value);
    public double get_dY();
    public void set_dY(double value);
    public sealed virtual LayoutModes get_WidthMode();
    public sealed virtual void set_WidthMode(LayoutModes value);
    public sealed virtual LayoutModes get_HeightMode();
    public sealed virtual void set_HeightMode(LayoutModes value);
    public sealed virtual double get_Width();
    public sealed virtual void set_Width(double value);
    public sealed virtual double get_Height();
    public sealed virtual void set_Height(double value);
    public int get_xTL();
    public void set_xTL(int value);
    public int get_yTL();
    public void set_yTL(int value);
    public int get_xBR();
    public void set_xBR(int value);
    public int get_yBR();
    public void set_yBR(int value);
    internal byte get_FlagOptions();
    internal void set_FlagOptions(byte value);
    public void SetDefaultValues();
    internal ChartAttachedLabelLayoutRecord GetAttachedLabelLayoutRecord();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartParentAxisImpl : CommonObject {
    private ChartAxisParentRecord m_parentAxis;
    private ChartPosRecord m_position;
    private ChartCategoryAxisImpl m_categoryAxis;
    private ChartValueAxisImpl m_valueAxis;
    private ChartSeriesAxisImpl m_seriesAxis;
    internal ChartImpl m_parentChart;
    private ChartGlobalFormatsCollection m_globalFormats;
    internal ChartAxisParentRecord ParentAxisRecord { get; }
    public ChartFormatCollection ChartFormats { get; }
    public bool IsPrimary { get; }
    public ChartCategoryAxisImpl CategoryAxis { get; public set; }
    public ChartValueAxisImpl ValueAxis { get; public set; }
    public ChartSeriesAxisImpl SeriesAxis { get; public set; }
    public ChartImpl ParentChart { get; }
    public ChartGlobalFormatsCollection Formats { get; }
    public ChartParentAxisImpl(IApplication application, object parent);
    public ChartParentAxisImpl(IApplication application, object parent, bool isPrimary);
    private void SetParents();
    [CLSCompliantAttribute("False")]
public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseAxes(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseChartText(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseChartFormat(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    internal ChartAxisParentRecord get_ParentAxisRecord();
    public ChartFormatCollection get_ChartFormats();
    public bool get_IsPrimary();
    public ChartCategoryAxisImpl get_CategoryAxis();
    public void set_CategoryAxis(ChartCategoryAxisImpl value);
    public ChartValueAxisImpl get_ValueAxis();
    public void set_ValueAxis(ChartValueAxisImpl value);
    public ChartSeriesAxisImpl get_SeriesAxis();
    public void set_SeriesAxis(ChartSeriesAxisImpl value);
    public ChartImpl get_ParentChart();
    public ChartGlobalFormatsCollection get_Formats();
    public void CreatePrimaryFormats();
    public void UpdateSecondaryAxis(bool bCreateAxis);
    public ChartParentAxisImpl Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    public void ClearGridLines();
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    internal void RemoveAxis(bool isCategory);
    protected virtual void OnDispose();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartPlotAreaImpl : ChartFrameFormatImpl {
    private ChartPlotAreaRecord m_plotArea;
    private IChartLayout m_layout;
    public IChartLayout Layout { get; public set; }
    public ChartPlotAreaLayoutRecord PlotAreaLayout { get; }
    public ChartPlotAreaImpl(IApplication application, object parent);
    public ChartPlotAreaImpl(IApplication application, object parent, ExcelChartType type);
    public ChartPlotAreaImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    public sealed virtual IChartLayout get_Layout();
    public sealed virtual void set_Layout(IChartLayout value);
    public ChartPlotAreaLayoutRecord get_PlotAreaLayout();
    public void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartSerieDataFormatImpl : CommonObject {
    private static ushort DEF_NONE_COLOR;
    private static int DEF_MARKER_SIZE_MUL;
    public static int DEF_MARKER_START_COLOR;
    private static string DEF_PIE_START_TYPE;
    private static string DEF_DOUGHNUT_START_TYPE;
    private static string DEF_SURFACE_START_TYPE;
    public static string DEF_LINE_START_TYPE;
    public static string DEF_SCATTER_START_TYPE;
    private static int DEF_MARKER_LINE_SIZE;
    private static int DEF_LINE_SIZE;
    private static int DEF_LINE_COLOR;
    private static int DEF_MARKER_INDEX;
    private static ExcelKnownColors DEF_MARKER_COLOR_INDEX;
    public static ExcelChartType[] DEF_SUPPORT_DATAFORMAT_PROPERTIES;
    private ChartDataFormatRecord m_dataFormat;
    private Chart3DDataFormatRecord m_3DDataFormat;
    private ChartPieFormatRecord m_pieFormat;
    private ThreeDFormatImpl m_3D;
    private ShadowImpl m_shadow;
    private ChartMarkerFormatRecord m_markerFormat;
    private ChartAttachedLabelRecord m_attachedLabel;
    private UnknownRecord m_startBlock;
    private UnknownRecord m_shapePropsStream;
    private UnknownRecord m_endBlock;
    private ChartAttachedLabelLayoutRecord m_attachedLabelLayout;
    private ChartSerFmtRecord m_seriesFormat;
    private ChartDataPointImpl m_dataPoint;
    private ChartSerieImpl m_serie;
    private ChartFormatImpl m_format;
    private ChartImpl m_chart;
    private ChartBorderImpl m_border;
    private ChartInteriorImpl m_interior;
    private bool m_bFormatted;
    private ChartFillImpl m_fill;
    private ColorObject m_markerBackColor;
    private ColorObject m_markerForeColor;
    private GradientStops m_markerGradient;
    private double m_markerTransparency;
    private double m_markerFillTransparency;
    private Stream m_markerLineStream;
    private Stream m_markerEffectList;
    private bool m_HasMarkerProperties;
    private bool m_HasBarShape;
    private bool m_bIsParsed;
    private bool m_markerChanged;
    private bool m_isMarkerSolid;
    private bool m_showConnectorLines;
    private ExcelTreeMapLabelOption m_treeMapLabelOption;
    private BoxAndWhiskerSerieFormat m_boxAndWhsikerFormat;
    private HistogramAxisFormat m_histogramAxisFormat;
    private double m_markerLineWidth;
    private bool m_isAutoMarkerColor;
    private bool m_isMarkerColorInverted;
    public bool HasLineProperties { get; internal set; }
    public bool HasShadowProperties { get; internal set; }
    public IThreeDFormat ThreeD { get; }
    public bool Has3dProperties { get; internal set; }
    public bool HasInterior { get; internal set; }
    public IShadow Shadow { get; }
    public IChartBorder LineProperties { get; }
    public IChartInterior AreaProperties { get; }
    public ExcelBaseFormat BarShapeBase { get; public set; }
    public ExcelTopFormat BarShapeTop { get; public set; }
    public Color MarkerBackgroundColor { get; public set; }
    public Color MarkerForegroundColor { get; public set; }
    public ExcelChartMarkerType MarkerStyle { get; public set; }
    public ExcelKnownColors MarkerForegroundColorIndex { get; public set; }
    public ExcelKnownColors MarkerBackgroundColorIndex { get; public set; }
    public int MarkerSize { get; public set; }
    public bool IsAutoMarker { get; public set; }
    internal bool IsAutoMarkerFill { get; internal set; }
    internal bool IsAutoMarkerBorder { get; internal set; }
    public bool IsNotShowInt { get; public set; }
    public bool IsNotShowBrd { get; public set; }
    public int Percent { get; public set; }
    public bool IsSmoothedLine { get; public set; }
    public bool Is3DBubbles { get; public set; }
    public bool IsArShadow { get; public set; }
    public bool ShowActiveValue { get; public set; }
    public bool ShowPieInPercents { get; public set; }
    public bool ShowPieCategoryLabel { get; public set; }
    public bool SmoothLine { get; public set; }
    public bool ShowCategoryLabel { get; public set; }
    public bool ShowBubble { get; public set; }
    public IFill Fill { get; }
    public bool IsSupportFill { get; }
    public IChartFormat CommonSerieOptions { get; }
    public bool IsMarkerSupported { get; }
    public IChartInterior Interior { get; }
    public bool IsInteriorSupported { get; }
    public bool IsBorderSupported { get; }
    internal bool HasMarkerProperties { get; internal set; }
    internal bool HasBarShape { get; internal set; }
    internal HistogramAxisFormat HistogramAxisFormatProperty { get; internal set; }
    public bool ShowConnectorLines { get; public set; }
    public ExcelTreeMapLabelOption TreeMapLabelOption { get; public set; }
    public bool ShowMeanLine { get; public set; }
    public bool ShowMeanMarkers { get; public set; }
    public bool ShowInnerPoints { get; public set; }
    public bool ShowOutlierPoints { get; public set; }
    public ExcelQuartileCalculation QuartileCalculationType { get; public set; }
    internal bool IsBinningByCategory { get; internal set; }
    internal bool HasAutomaticBins { get; internal set; }
    internal int NumberOfBins { get; internal set; }
    internal double BinWidth { get; internal set; }
    internal double OverflowBinValue { get; internal set; }
    internal double UnderflowBinValue { get; internal set; }
    internal bool IsIntervalClosedinLeft { get; internal set; }
    public ChartSerieImpl ParentSerie { get; }
    [CLSCompliantAttribute("False")]
public ChartDataFormatRecord DataFormat { get; public set; }
    [CLSCompliantAttribute("False")]
public ChartPieFormatRecord PieFormat { get; }
    [CLSCompliantAttribute("False")]
public ChartMarkerFormatRecord MarkerFormat { get; }
    [CLSCompliantAttribute("False")]
public Chart3DDataFormatRecord Serie3DDataFormat { get; }
    [CLSCompliantAttribute("False")]
public ChartSerFmtRecord SerieFormat { get; }
    [CLSCompliantAttribute("False")]
public ChartAttachedLabelRecord AttachedLabel { get; }
    [CLSCompliantAttribute("False")]
public ChartAttachedLabelLayoutRecord AttachedLabelLayout { get; }
    public bool ContainsLineProperties { get; }
    [CLSCompliantAttribute("False")]
public ChartMarkerFormatRecord MarkerFormatOrNull { get; }
    [CLSCompliantAttribute("False")]
public Chart3DDataFormatRecord Serie3DdDataFormatOrNull { get; }
    [CLSCompliantAttribute("False")]
public ChartSerFmtRecord SerieFormatOrNull { get; }
    [CLSCompliantAttribute("False")]
public ChartPieFormatRecord PieFormatOrNull { get; }
    public int SeriesNumber { get; public set; }
    public bool IsMarker { get; }
    public bool IsLine { get; }
    public bool IsSmoothed { get; }
    private ExcelChartType SerieType { get; }
    public bool IsFormatted { get; internal set; }
    public ChartImpl ParentChart { get; }
    public ColorObject MarkerBackColorObject { get; }
    public ColorObject MarkerForeColorObject { get; }
    internal GradientStops MarkerGradient { get; internal set; }
    public double MarkerTransparency { get; public set; }
    internal double MarkerFillTransparency { get; internal set; }
    public Stream MarkerLineStream { get; public set; }
    internal Stream EffectListStream { get; internal set; }
    internal bool IsParsed { get; internal set; }
    internal bool IsMarkerChanged { get; internal set; }
    internal bool IsMarkerSolid { get; internal set; }
    internal double MarkerLineWidth { get; internal set; }
    internal bool IsAutoMarkerColor { get; internal set; }
    internal bool IsDefault { get; }
    internal bool IsMarkerColorInverted { get; internal set; }
    public ColorObject ForeGroundColorObject { get; }
    public ColorObject BackGroundColorObject { get; }
    public ExcelPattern Pattern { get; public set; }
    public bool IsAutomaticFormat { get; public set; }
    public bool Visible { get; public set; }
    public ChartSerieDataFormatImpl(IApplication application, object parent);
    private static ChartSerieDataFormatImpl();
    private void InitializeColors();
    internal void SetParents();
    [CLSCompliantAttribute("False")]
public int Parse(IList`1<BiffRecordRaw> arrData, int iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void SetDefaultValues();
    private void SetDefault3DDataFormat();
    private void SetFieldsToNull();
    public ChartSerieDataFormatImpl Clone(object parent);
    internal void CopyFillBackForeGroundColorObjects(ChartSerieDataFormatImpl result);
    internal void SetDefaultValuesForSerieRecords();
    public void UpdateSerieIndex();
    public void UpdateDataFormatInDataPoint();
    public void ChangeRadarDataFormat(ExcelChartType type);
    public void ChangeScatterDataFormat(ExcelChartType type);
    public void ChangeLineDataFormat(ExcelChartType type);
    internal void UpdateBarFormat(bool bIsDataTop);
    public int UpdateLineColor();
    public static int UpdateColor(ChartSerieImpl serie, ChartDataPointImpl dataPoint);
    public void UpdateSerieFormat();
    private bool ChackDataRecord(Chart3DDataFormatRecord record);
    public void ClearOnPropertyChange();
    private bool ValidateMarkerProprties();
    internal static bool GetIsInteriorSupported(ExcelChartType chartType);
    private static bool GetIsBorderSupported(ExcelChartType chartType);
    internal void MarkerForeColorChanged();
    internal void MarkerBackColorChanged();
    public sealed virtual bool get_HasLineProperties();
    internal void set_HasLineProperties(bool value);
    public sealed virtual bool get_HasShadowProperties();
    internal void set_HasShadowProperties(bool value);
    public sealed virtual IThreeDFormat get_ThreeD();
    public sealed virtual bool get_Has3dProperties();
    internal void set_Has3dProperties(bool value);
    public sealed virtual bool get_HasInterior();
    internal void set_HasInterior(bool value);
    public sealed virtual IShadow get_Shadow();
    public sealed virtual IChartBorder get_LineProperties();
    public sealed virtual IChartInterior get_AreaProperties();
    public sealed virtual ExcelBaseFormat get_BarShapeBase();
    public sealed virtual void set_BarShapeBase(ExcelBaseFormat value);
    public sealed virtual ExcelTopFormat get_BarShapeTop();
    public sealed virtual void set_BarShapeTop(ExcelTopFormat value);
    public sealed virtual Color get_MarkerBackgroundColor();
    public sealed virtual void set_MarkerBackgroundColor(Color value);
    public sealed virtual Color get_MarkerForegroundColor();
    public sealed virtual void set_MarkerForegroundColor(Color value);
    public sealed virtual ExcelChartMarkerType get_MarkerStyle();
    public sealed virtual void set_MarkerStyle(ExcelChartMarkerType value);
    public sealed virtual ExcelKnownColors get_MarkerForegroundColorIndex();
    public sealed virtual void set_MarkerForegroundColorIndex(ExcelKnownColors value);
    public sealed virtual ExcelKnownColors get_MarkerBackgroundColorIndex();
    public sealed virtual void set_MarkerBackgroundColorIndex(ExcelKnownColors value);
    public sealed virtual int get_MarkerSize();
    public sealed virtual void set_MarkerSize(int value);
    public sealed virtual bool get_IsAutoMarker();
    public sealed virtual void set_IsAutoMarker(bool value);
    internal bool get_IsAutoMarkerFill();
    internal void set_IsAutoMarkerFill(bool value);
    internal bool get_IsAutoMarkerBorder();
    internal void set_IsAutoMarkerBorder(bool value);
    public bool get_IsNotShowInt();
    public void set_IsNotShowInt(bool value);
    public bool get_IsNotShowBrd();
    public void set_IsNotShowBrd(bool value);
    public sealed virtual int get_Percent();
    public sealed virtual void set_Percent(int value);
    public bool get_IsSmoothedLine();
    public void set_IsSmoothedLine(bool value);
    public sealed virtual bool get_Is3DBubbles();
    public sealed virtual void set_Is3DBubbles(bool value);
    public bool get_IsArShadow();
    public void set_IsArShadow(bool value);
    public bool get_ShowActiveValue();
    public void set_ShowActiveValue(bool value);
    public bool get_ShowPieInPercents();
    public void set_ShowPieInPercents(bool value);
    public bool get_ShowPieCategoryLabel();
    public void set_ShowPieCategoryLabel(bool value);
    public bool get_SmoothLine();
    public void set_SmoothLine(bool value);
    public bool get_ShowCategoryLabel();
    public void set_ShowCategoryLabel(bool value);
    public bool get_ShowBubble();
    public void set_ShowBubble(bool value);
    public sealed virtual IFill get_Fill();
    public bool get_IsSupportFill();
    public sealed virtual IChartFormat get_CommonSerieOptions();
    public sealed virtual bool get_IsMarkerSupported();
    public sealed virtual IChartInterior get_Interior();
    public bool get_IsInteriorSupported();
    public bool get_IsBorderSupported();
    internal bool get_HasMarkerProperties();
    internal void set_HasMarkerProperties(bool value);
    internal bool get_HasBarShape();
    internal void set_HasBarShape(bool value);
    internal HistogramAxisFormat get_HistogramAxisFormatProperty();
    internal void set_HistogramAxisFormatProperty(HistogramAxisFormat value);
    public sealed virtual bool get_ShowConnectorLines();
    public sealed virtual void set_ShowConnectorLines(bool value);
    public sealed virtual ExcelTreeMapLabelOption get_TreeMapLabelOption();
    public sealed virtual void set_TreeMapLabelOption(ExcelTreeMapLabelOption value);
    public sealed virtual bool get_ShowMeanLine();
    public sealed virtual void set_ShowMeanLine(bool value);
    public sealed virtual bool get_ShowMeanMarkers();
    public sealed virtual void set_ShowMeanMarkers(bool value);
    public sealed virtual bool get_ShowInnerPoints();
    public sealed virtual void set_ShowInnerPoints(bool value);
    public sealed virtual bool get_ShowOutlierPoints();
    public sealed virtual void set_ShowOutlierPoints(bool value);
    public sealed virtual ExcelQuartileCalculation get_QuartileCalculationType();
    public sealed virtual void set_QuartileCalculationType(ExcelQuartileCalculation value);
    internal bool get_IsBinningByCategory();
    internal void set_IsBinningByCategory(bool value);
    internal bool get_HasAutomaticBins();
    internal void set_HasAutomaticBins(bool value);
    internal int get_NumberOfBins();
    internal void set_NumberOfBins(int value);
    internal double get_BinWidth();
    internal void set_BinWidth(double value);
    internal double get_OverflowBinValue();
    internal void set_OverflowBinValue(double value);
    internal double get_UnderflowBinValue();
    internal void set_UnderflowBinValue(double value);
    internal bool get_IsIntervalClosedinLeft();
    internal void set_IsIntervalClosedinLeft(bool value);
    public ChartSerieImpl get_ParentSerie();
    public ChartDataFormatRecord get_DataFormat();
    public void set_DataFormat(ChartDataFormatRecord value);
    public ChartPieFormatRecord get_PieFormat();
    public ChartMarkerFormatRecord get_MarkerFormat();
    public Chart3DDataFormatRecord get_Serie3DDataFormat();
    public ChartSerFmtRecord get_SerieFormat();
    public ChartAttachedLabelRecord get_AttachedLabel();
    public ChartAttachedLabelLayoutRecord get_AttachedLabelLayout();
    public bool get_ContainsLineProperties();
    public ChartMarkerFormatRecord get_MarkerFormatOrNull();
    public Chart3DDataFormatRecord get_Serie3DdDataFormatOrNull();
    public ChartSerFmtRecord get_SerieFormatOrNull();
    public ChartPieFormatRecord get_PieFormatOrNull();
    public int get_SeriesNumber();
    public void set_SeriesNumber(int value);
    public bool get_IsMarker();
    public bool get_IsLine();
    public bool get_IsSmoothed();
    private ExcelChartType get_SerieType();
    public bool get_IsFormatted();
    internal void set_IsFormatted(bool value);
    public ChartImpl get_ParentChart();
    public ColorObject get_MarkerBackColorObject();
    public ColorObject get_MarkerForeColorObject();
    internal GradientStops get_MarkerGradient();
    internal void set_MarkerGradient(GradientStops value);
    public double get_MarkerTransparency();
    public void set_MarkerTransparency(double value);
    internal double get_MarkerFillTransparency();
    internal void set_MarkerFillTransparency(double value);
    public Stream get_MarkerLineStream();
    public void set_MarkerLineStream(Stream value);
    internal Stream get_EffectListStream();
    internal void set_EffectListStream(Stream value);
    internal bool get_IsParsed();
    internal void set_IsParsed(bool value);
    internal bool get_IsMarkerChanged();
    internal void set_IsMarkerChanged(bool value);
    internal bool get_IsMarkerSolid();
    internal void set_IsMarkerSolid(bool value);
    internal double get_MarkerLineWidth();
    internal void set_MarkerLineWidth(double value);
    internal bool get_IsAutoMarkerColor();
    internal void set_IsAutoMarkerColor(bool value);
    internal bool get_IsDefault();
    internal bool get_IsMarkerColorInverted();
    internal void set_IsMarkerColorInverted(bool value);
    public sealed virtual ColorObject get_ForeGroundColorObject();
    public sealed virtual ColorObject get_BackGroundColorObject();
    public sealed virtual ExcelPattern get_Pattern();
    public sealed virtual void set_Pattern(ExcelPattern value);
    public sealed virtual bool get_IsAutomaticFormat();
    public sealed virtual void set_IsAutomaticFormat(bool value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    internal bool CompareFormat(IChartSerieDataFormat format);
    protected virtual void OnDispose();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartSerieImpl : CommonObject {
    public static int DEF_FORMAT_ALLPOINTS_INDEX;
    private static int DEF_SURFACE_POINT_NUMBER;
    public static int DEF_CHART_GROUP;
    private static string DEF_RADAR_START_TYPE;
    public static string DEF_TRUE;
    public static string DEF_FALSE;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ValueRangeChanged;
    private Dictionary`2<int, object> m_dataLabelCellsValues;
    private IRange m_ValueRange;
    private IRange m_CategoryRange;
    private IRange m_BubbleRange;
    private string m_strName;
    private Ptg[] m_nameTokens;
    private Dictionary`2<LinkIndex, ChartAIRecord> m_hashAi;
    private int m_iChartGroup;
    private WorkbookImpl m_book;
    private ChartSeriesRecord m_series;
    private ChartImpl m_chart;
    private ChartSeriesCollection m_seriesColl;
    private int m_iIndex;
    private int m_iOrder;
    private bool m_bDefaultName;
    private ChartDataPointsCollection m_dataPoints;
    private ExcelChartType m_serieType;
    private List`1<BiffRecordRaw> m_valueEnteredDirectly;
    private List`1<BiffRecordRaw> m_categoryEnteredDirectly;
    private List`1<BiffRecordRaw> m_bubbleEnteredDirectly;
    private Object[] m_enteredDirectlyValue;
    private Object[] m_enteredDirectlyCategory;
    private Object[] m_enteredDirectlyBubble;
    private IRange m_nameRange;
    private string m_seriesText;
    private ChartErrorBarsImpl m_errorBarY;
    private ChartErrorBarsImpl m_errorBarX;
    private ChartTrendLineCollection m_trendLines;
    private Nullable`1<bool> m_bInvertIfNegative;
    private string m_nameCache;
    private string m_strRefFormula;
    private string m_numRefFormula;
    private string m_MulLvlStrRefFormula;
    private Stream m_dropLinesStream;
    private bool m_IsFiltered;
    private string m_categoryFilteredRange;
    private string m_categoryValue;
    private string m_grouping;
    private int m_gapWidth;
    private int m_overlap;
    private bool m_bShowGapWidth;
    internal Stream m_invertFillFormatStream;
    private ColorObject m_invertIfNegativeColor;
    private Dictionary`2<int, Object[]> m_multiLevelStringCache;
    private int m_pointCount;
    private bool m_isReversed;
    private int m_paretoLineFormatIndex;
    private bool m_isParetoLineHidden;
    private ChartFrameFormatImpl m_paretoLineFormat;
    private bool m_isRowWiseCategory;
    private bool m_isRowWiseSeries;
    private string m_formatCode;
    private string m_categoryFormatCode;
    private bool m_hasLeaderLines;
    private ChartBorderImpl m_leaderLines;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler NameChanged;
    private bool m_bIsLegendEntryParsed;
    public string Name { get; public set; }
    public IRange NameRange { get; }
    public IRange Values { get; public set; }
    public IRange CategoryLabels { get; public set; }
    public IRange Bubbles { get; public set; }
    public int RealIndex { get; public set; }
    public IChartDataPoints DataPoints { get; }
    public IChartSerieDataFormat SerieFormat { get; }
    public ExcelChartType SerieType { get; public set; }
    public bool UsePrimaryAxis { get; public set; }
    public Object[] EnteredDirectlyValues { get; public set; }
    public Object[] EnteredDirectlyCategoryLabels { get; public set; }
    public Object[] EnteredDirectlyBubbles { get; public set; }
    internal Dictionary`2<int, object> DataLabelCellsValues { get; internal set; }
    public IChartErrorBars ErrorBarsY { get; }
    public bool HasErrorBarsY { get; public set; }
    public IChartErrorBars ErrorBarsX { get; }
    public bool HasErrorBarsX { get; public set; }
    public IChartTrendLines TrendLines { get; }
    internal string Grouping { get; internal set; }
    internal int GapWidth { get; internal set; }
    internal int Overlap { get; internal set; }
    internal bool ShowGapWidth { get; internal set; }
    public IChartFrameFormat ParetoLineFormat { get; internal set; }
    public bool HasLeaderLines { get; public set; }
    public IChartBorder LeaderLines { get; }
    internal Dictionary`2<int, Object[]> MultiLevelStrCache { get; internal set; }
    internal int PointCount { get; internal set; }
    internal bool Reversed { get; internal set; }
    public ColorObject InvertIfNegativeColor { get; public set; }
    public int Index { get; public set; }
    public bool IsFiltered { get; public set; }
    public int Number { get; public set; }
    public int ChartGroup { get; public set; }
    public ChartImpl InnerChart { get; }
    public bool IsDefaultName { get; public set; }
    public int PointNumber { get; }
    public WorkbookImpl InnerWorkbook { get; }
    public string FilteredCategory { get; public set; }
    public string FilteredValue { get; public set; }
    public string StartType { get; }
    public string ParseSerieNotDefaultText { get; }
    public ChartSeriesCollection ParentSeries { get; }
    public ChartImpl ParentChart { get; }
    internal WorkbookImpl ParentBook { get; }
    public bool IsPie { get; }
    public string NameOrFormula { get; }
    public Nullable`1<bool> InvertIfNegative { get; public set; }
    public string StrRefFormula { get; public set; }
    internal string NumRefFormula { get; internal set; }
    internal string MulLvlStrRefFormula { get; internal set; }
    internal Stream DropLinesStream { get; internal set; }
    internal string NameCache { get; internal set; }
    internal bool IsParetoLineHidden { get; internal set; }
    internal bool IsSeriesHidden { get; internal set; }
    internal int ParetoLineFormatIndex { get; internal set; }
    internal bool IsRowWiseCategory { get; internal set; }
    internal bool IsRowWiseSeries { get; internal set; }
    internal string FormatCode { get; internal set; }
    internal string CategoriesFormatCode { get; internal set; }
    public ChartSerieImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartSerieImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CompilerGeneratedAttribute]
public void add_ValueRangeChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueRangeChanged(ValueChangedEventHandler value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IRange get_NameRange();
    public sealed virtual IRange get_Values();
    public sealed virtual void set_Values(IRange value);
    public sealed virtual IRange get_CategoryLabels();
    public sealed virtual void set_CategoryLabels(IRange value);
    public sealed virtual IRange get_Bubbles();
    public sealed virtual void set_Bubbles(IRange value);
    public sealed virtual int get_RealIndex();
    public sealed virtual void set_RealIndex(int value);
    public sealed virtual IChartDataPoints get_DataPoints();
    public sealed virtual IChartSerieDataFormat get_SerieFormat();
    public sealed virtual ExcelChartType get_SerieType();
    public sealed virtual void set_SerieType(ExcelChartType value);
    public sealed virtual bool get_UsePrimaryAxis();
    public sealed virtual void set_UsePrimaryAxis(bool value);
    public sealed virtual Object[] get_EnteredDirectlyValues();
    public sealed virtual void set_EnteredDirectlyValues(Object[] value);
    public sealed virtual Object[] get_EnteredDirectlyCategoryLabels();
    public sealed virtual void set_EnteredDirectlyCategoryLabels(Object[] value);
    public sealed virtual Object[] get_EnteredDirectlyBubbles();
    public sealed virtual void set_EnteredDirectlyBubbles(Object[] value);
    internal Dictionary`2<int, object> get_DataLabelCellsValues();
    internal void set_DataLabelCellsValues(Dictionary`2<int, object> value);
    public sealed virtual IChartErrorBars get_ErrorBarsY();
    public sealed virtual bool get_HasErrorBarsY();
    public sealed virtual void set_HasErrorBarsY(bool value);
    public sealed virtual IChartErrorBars get_ErrorBarsX();
    public sealed virtual bool get_HasErrorBarsX();
    public sealed virtual void set_HasErrorBarsX(bool value);
    public sealed virtual IChartTrendLines get_TrendLines();
    internal string get_Grouping();
    internal void set_Grouping(string value);
    internal int get_GapWidth();
    internal void set_GapWidth(int value);
    internal int get_Overlap();
    internal void set_Overlap(int value);
    internal bool get_ShowGapWidth();
    internal void set_ShowGapWidth(bool value);
    public sealed virtual IChartFrameFormat get_ParetoLineFormat();
    internal void set_ParetoLineFormat(IChartFrameFormat value);
    public sealed virtual bool get_HasLeaderLines();
    public sealed virtual void set_HasLeaderLines(bool value);
    public sealed virtual IChartBorder get_LeaderLines();
    internal Dictionary`2<int, Object[]> get_MultiLevelStrCache();
    internal void set_MultiLevelStrCache(Dictionary`2<int, Object[]> value);
    internal int get_PointCount();
    internal void set_PointCount(int value);
    internal bool get_Reversed();
    internal void set_Reversed(bool value);
    public sealed virtual IChartErrorBars ErrorBar(bool bIsY);
    public sealed virtual IChartErrorBars ErrorBar(bool bIsY, ExcelErrorBarInclude include);
    public sealed virtual IChartErrorBars ErrorBar(bool bIsY, ExcelErrorBarInclude include, ExcelErrorBarType type);
    public sealed virtual IChartErrorBars ErrorBar(bool bIsY, ExcelErrorBarInclude include, ExcelErrorBarType type, double numberValue);
    public sealed virtual IChartErrorBars ErrorBar(bool bIsY, IRange plusRange, IRange minusRange);
    private void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseSeriesRecord(ChartSeriesRecord series);
    private void ParseAIRecord(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseSertoCrt(IList`1<BiffRecordRaw> data, Int32& iPos);
    private void GetTitle(ChartAIRecord recordAi, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseLegendEntries(IList`1<BiffRecordRaw> data, Int32& iPos);
    public void ParseErrorBars(IList`1<BiffRecordRaw> data);
    public sealed virtual ColorObject get_InvertIfNegativeColor();
    public sealed virtual void set_InvertIfNegativeColor(ColorObject value);
    internal void SetLeaderLines(bool value);
    private void SetParents();
    private void InitializeHashAIMember();
    private void InitializeCollections();
    private void SetDataFormat(ChartSerieDataFormatImpl dataFormat);
    [CLSCompliantAttribute("False")]
public Chart3DDataFormatRecord Get3DDataFormat();
    private void OnNameChanged(string value);
    private void OnValueRangeChanged(ValueChangedEventArgs e);
    private void OnCategoryRangeChanged();
    private void OnBubbleRangeChanged();
    public ChartSerieImpl Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes);
    private void UpdateNameIndexes(WorkbookImpl workbook, NameImpl namedRange);
    private string GetWorkSheetNameByAddress(string strAddress);
    private void ChangeAxis(bool bToPrimary);
    private int GetNewOrder(bool bToPrimary);
    [CLSCompliantAttribute("False")]
public void AddEnteredRecord(int siIndex, ICellPositionFormat record);
    public List`1<BiffRecordRaw> GetArray(int siIndex);
    public Object[] GetEnteredDirectlyValues(List`1<BiffRecordRaw> array);
    private bool GetEnteredDirectlyType(Object[] array);
    private List`1<BiffRecordRaw> GetArrayRecordsByValues(bool bIsNumber, Object[] values);
    private void UpdateSerieIndexesInEnteredDirectlyValues(List`1<BiffRecordRaw> arrayToUpdate);
    private string DetectSerieName();
    internal string GetSeriesValueFromRange(RangeImpl range);
    private IRange GetCell(int rowDelta, int colDelta, RangeImpl range);
    private IRange GetLeftCell(RangeImpl range);
    private string GetTextRangeValue(IRange range);
    public void SetDefaultName(string strName, bool isClearNameRange);
    public IRange GetSerieNameRange();
    public ExcelChartType DetectSerieType();
    public string DetectSerieTypeString();
    public string DetectSerieTypeStart();
    private string DetectBarSerie(ChartFormatImpl format);
    private string GetBarStartString(ChartFormatImpl format);
    private string GetBarShapeString(ChartFormatImpl format, string result, ChartSerieDataFormatImpl dataFormat);
    private string DetectPieSerie(ChartFormatImpl format);
    private string DetectAreaSerie(ChartFormatImpl format);
    private string DetectSurfaceSerie(ChartFormatImpl format);
    private string DetectBoppopSerie(ChartFormatImpl format);
    private string DetectRadarSerie(ChartFormatImpl format);
    private string DetectLineSerie(ChartFormatImpl format);
    private string DetectScatterSerie(ChartFormatImpl format);
    internal void ChangeSeriesType(ExcelChartType seriesType, bool isSeriesCreation);
    internal void ChangeSeriesType(ExcelChartType seriesType, bool isSeriesCreation, bool forceChange);
    private void OnSerieTypeChange(ExcelChartType type, ExcelChartType oldType, bool isSeriesCreation, bool forceChange);
    private void ChangeNotIntimateType(ExcelChartType type);
    private bool ChangeIntimateType(ChartFormatImpl format, ExcelChartType TypeToChange);
    private void ChangeIntimateLine(ChartFormatImpl format, ExcelChartType TypeToChange, string strTypeToChange);
    private void InitalizeChangeLineTypeHash(Dictionary`2<ExcelChartType, ExcelChartType> hashToInit);
    private void ChangeCombinationType(ExcelChartType type);
    public ChartFormatImpl FindIntimateFormatByType(ExcelChartType type, bool bPrimaryAxis, bool bPreferSameAxis);
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    private IRange UpdateRange(ChartAIRecord chartAI, int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    private Ptg[] UpdateToken(Ptg token, int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    private Ptg PartialTokenMove(Ptg token, int iSourceIndex, Rectangle rectRange, Rectangle sourceRect, Rectangle destRect);
    private bool IsRectangleContains(Rectangle rect, int x, int y);
    private Ptg PartialRemove(Ptg token, int iSheetIndex, Rectangle rectRange, Rectangle sourceRect, Rectangle destRect);
    private void UpdateErrorBar(ChartErrorBarsImpl bar, ChartErrorBarsImpl& barToUpdate);
    public ChartFormatImpl GetCommonSerieFormat();
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    private bool GetIsCommonDoughnutExplosion();
    internal void UpdateChartExSerieRangesMembers(bool isValues);
    [CLSCompliantAttribute("False")]
public sealed virtual void Serialize(OffsetArrayList records);
    private void SerializeChartAi(OffsetArrayList records);
    private void SetAIRange(ChartAIRecord record, IRange range, ReferenceType onNull);
    private void SerializeSerie(OffsetArrayList records);
    public void CheckLimits();
    [CLSCompliantAttribute("False")]
public void SerializeDataLabels(OffsetArrayList records);
    private void SerializeLegendEntries(OffsetArrayList records);
    private void SeriealizeSerieName(OffsetArrayList records);
    private Ptg[] GetNameTokens();
    [CompilerGeneratedAttribute]
public sealed virtual void add_NameChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NameChanged(ValueChangedEventHandler value);
    public int get_Index();
    public void set_Index(int value);
    public sealed virtual bool get_IsFiltered();
    public sealed virtual void set_IsFiltered(bool value);
    public int get_Number();
    public void set_Number(int value);
    public int get_ChartGroup();
    public void set_ChartGroup(int value);
    public ChartImpl get_InnerChart();
    public bool get_IsDefaultName();
    public void set_IsDefaultName(bool value);
    public int get_PointNumber();
    public WorkbookImpl get_InnerWorkbook();
    public string get_FilteredCategory();
    public void set_FilteredCategory(string value);
    public string get_FilteredValue();
    public void set_FilteredValue(string value);
    public string get_StartType();
    public string get_ParseSerieNotDefaultText();
    public ChartSeriesCollection get_ParentSeries();
    public ChartImpl get_ParentChart();
    internal WorkbookImpl get_ParentBook();
    public bool get_IsPie();
    public string get_NameOrFormula();
    public sealed virtual Nullable`1<bool> get_InvertIfNegative();
    public sealed virtual void set_InvertIfNegative(Nullable`1<bool> value);
    public string get_StrRefFormula();
    public void set_StrRefFormula(string value);
    internal string get_NumRefFormula();
    internal void set_NumRefFormula(string value);
    internal string get_MulLvlStrRefFormula();
    internal void set_MulLvlStrRefFormula(string value);
    internal Stream get_DropLinesStream();
    internal void set_DropLinesStream(Stream value);
    internal string get_NameCache();
    internal void set_NameCache(string value);
    internal bool get_IsParetoLineHidden();
    internal void set_IsParetoLineHidden(bool value);
    internal bool get_IsSeriesHidden();
    internal void set_IsSeriesHidden(bool value);
    internal int get_ParetoLineFormatIndex();
    internal void set_ParetoLineFormatIndex(int value);
    internal bool get_IsRowWiseCategory();
    internal void set_IsRowWiseCategory(bool value);
    internal bool get_IsRowWiseSeries();
    internal void set_IsRowWiseSeries(bool value);
    internal string get_FormatCode();
    internal void set_FormatCode(string value);
    internal string get_CategoriesFormatCode();
    internal void set_CategoriesFormatCode(string value);
    public sealed virtual void Reparse();
    [CLSCompliantAttribute("False")]
public IRange GetRange(ChartAIRecord chartAi);
    private IRange GetRangeFromOnePTG(Ptg currentPtg);
    protected virtual void OnDispose();
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartSeriesAxisImpl : ChartAxisImpl {
    private static int DEF_MAX_SPACING_VALUE;
    private static ushort DEF_NOMULTILVLLBL_TAG;
    private static ushort DEF_TICKLBLSKIP_TAG;
    private ChartCatserRangeRecord m_chartCatserRange;
    private bool m_bAutoTickLabelSpacing;
    private UnknownRecord m_chartMlFrt;
    internal bool m_xmlTKLabelSkipFrt;
    public bool AutoTickLabelSpacing { get; public set; }
    public int LabelFrequency { get; public set; }
    public int TickLabelSpacing { get; public set; }
    public int TickMarksFrequency { get; public set; }
    public int TickMarkSpacing { get; public set; }
    public bool ReversePlotOrder { get; public set; }
    [CLSCompliantAttribute("False")]
protected ExcelObjectTextLink TextLinkType { get; }
    public int CrossesAt { get; public set; }
    public bool IsBetween { get; public set; }
    public bool IsLogScale { get; public set; }
    public double LogBase { get; public set; }
    public double MaximumValue { get; public set; }
    public double MinimumValue { get; public set; }
    public ChartSeriesAxisImpl(IApplication application, object parent);
    public ChartSeriesAxisImpl(IApplication application, object parent, ExcelAxisType axisType);
    public ChartSeriesAxisImpl(IApplication application, object parent, ExcelAxisType axisType, bool bIsPrimary);
    [CLSCompliantAttribute("False")]
public ChartSeriesAxisImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public ChartSeriesAxisImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos, bool isPrimary);
    public sealed virtual bool get_AutoTickLabelSpacing();
    public sealed virtual void set_AutoTickLabelSpacing(bool value);
    public sealed virtual int get_LabelFrequency();
    public sealed virtual void set_LabelFrequency(int value);
    public sealed virtual int get_TickLabelSpacing();
    public sealed virtual void set_TickLabelSpacing(int value);
    public sealed virtual int get_TickMarksFrequency();
    public sealed virtual void set_TickMarksFrequency(int value);
    public sealed virtual int get_TickMarkSpacing();
    public sealed virtual void set_TickMarkSpacing(int value);
    public virtual bool get_ReversePlotOrder();
    public virtual void set_ReversePlotOrder(bool value);
    protected virtual ExcelObjectTextLink get_TextLinkType();
    public int get_CrossesAt();
    public void set_CrossesAt(int value);
    public bool get_IsBetween();
    public void set_IsBetween(bool value);
    private void ParseMaxCross(BiffRecordRaw record);
    protected virtual void ParseWallsOrFloor(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
protected virtual void ParseData(BiffRecordRaw record, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    protected virtual void InitializeVariables();
    public virtual ChartAxisImpl Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    internal bool CheckForXmlTKOptions(BiffRecordRaw record);
    public sealed virtual bool get_IsLogScale();
    public sealed virtual void set_IsLogScale(bool value);
    public sealed virtual double get_LogBase();
    public sealed virtual void set_LogBase(double value);
    public sealed virtual double get_MaximumValue();
    public sealed virtual void set_MaximumValue(double value);
    public sealed virtual double get_MinimumValue();
    public sealed virtual void set_MinimumValue(double value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Charts.ChartSeriesCollection : CollectionBaseEx`1<IChartSerie> {
    public static string DEF_START_SERIE_NAME;
    private ChartImpl m_chart;
    private IList`1<IBiffStorage> m_arrTrendError;
    private IList`1<IBiffStorage> m_arrTrendLabels;
    private int m_trendErrorBarsIndex;
    private int m_trendsIndex;
    private List`1<IChartSerie> m_additionOrder;
    public IChartSerie Item { get; public set; }
    public IChartSerie Item { get; }
    internal List`1<IChartSerie> AdditionOrder { get; }
    internal IList`1<IBiffStorage> TrendErrorList { get; }
    internal int TrendErrorBarIndex { get; internal set; }
    internal IList`1<IBiffStorage> TrendLabels { get; }
    internal int TrendIndex { get; internal set; }
    public ChartSeriesCollection(IApplication application, object parent);
    public sealed virtual IChartSerie get_Item(int index);
    public sealed virtual void set_Item(int index, IChartSerie value);
    public sealed virtual IChartSerie get_Item(string name);
    public sealed virtual IChartSerie Add();
    public sealed virtual IChartSerie Add(string name);
    public sealed virtual IChartSerie Add(ExcelChartType serieType);
    public sealed virtual IChartSerie Add(string name, ExcelChartType serieType);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Remove(string serieName);
    public void ParseSiIndex(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializeDataLabels(OffsetArrayList records);
    public IChartSerie Add(ChartSerieImpl serieToAdd);
    protected virtual void OnClear();
    public ChartSeriesCollection Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes);
    public virtual object Clone(object parent);
    public int GetCountOfSeriesWithSameDrawingOrder(int order);
    public List`1<ChartSerieImpl> GetSeriesWithDrawingOrder(int order);
    public int GetCountOfSeriesWithSameType(ExcelChartType type, bool usePrimaryAxis);
    public int GetCountOfSeriesWithSameStartType(ExcelChartType type);
    internal void ClearSeriesForChangeChartType(bool preserveFormats);
    public void ClearSeriesForChangeChartType();
    public int FindOrderByType(ExcelChartType type);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use UpdateDataPointForCylConePyrChartType(ExcelBaseFormat baseFormat, ExcelTopFormat topFormat) method. Sorry for inconvenience.")]
public void UpdateDataPointForCylConePurChartType(ExcelBaseFormat baseFormat, ExcelTopFormat topFormat);
    public void UpdateDataPointForCylConePyrChartType(ExcelBaseFormat baseFormat, ExcelTopFormat topFormat);
    private void AddEnteredRecord(int siIndex, ICellPositionFormat record);
    public List`1<BiffRecordRaw> GetEnteredRecords(int siIndex);
    private List`1<List`1<BiffRecordRaw>> GetArrays(int siIndex);
    public void UpdateSerieIndexAfterRemove(int iRemoveIndex);
    public ExcelChartType GetTypeByOrder(int iOrder);
    public void ClearDataFormats(ChartSerieDataFormatImpl format);
    public string GetDefSerieName();
    public string GetDefSerieName(int iSerieIndex);
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public int GetLegendEntryOffset(int iSerIndex);
    public void AssignTrendDataLabel(ChartTextAreaImpl area);
    internal void ClearErrorBarsAndTrends();
    internal void ResortSeries(Dictionary`2<int, int> dictSeriesAxis, List`1<int> markerSeriesList);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    internal List`1<IChartSerie> get_AdditionOrder();
    internal bool HasSecondary();
    internal IList`1<IBiffStorage> get_TrendErrorList();
    internal int get_TrendErrorBarIndex();
    internal void set_TrendErrorBarIndex(int value);
    internal IList`1<IBiffStorage> get_TrendLabels();
    internal int get_TrendIndex();
    internal void set_TrendIndex(int value);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartTextAreaImpl : CommonObject {
    private bool m_isTitleElement;
    private bool m_isValueFromCells;
    private IRange m_valueFromCellsRange;
    private FontWrapper m_font;
    internal ChartTextRecord m_chartText;
    private WorkbookImpl m_book;
    private ChartFrameFormatImpl m_frame;
    private string m_strText;
    private ChartObjectLinkRecord m_link;
    private ChartDataLabelsRecord m_dataLabels;
    private ChartAIRecord m_chartAi;
    private ChartAlrunsRecord m_chartAlRuns;
    private ChartPosRecord m_pos;
    private ChartAttachedLabelLayoutRecord m_attachedLabelLayout;
    private bool m_bIsTrend;
    private IChartLayout m_layout;
    private ChartParagraphType m_paraType;
    private bool m_bShowTextProperties;
    private bool m_bShowSizeProperties;
    private bool m_bShowBoldProperties;
    private bool m_bIsFormula;
    protected IChartRichTextString m_rtfString;
    private Excel2007TextRotation m_TextRotation;
    internal UnknownRecord m_titleRichTextStream;
    internal bool isEmptyDefPara;
    internal bool isEmptyTextPara;
    internal bool isFontChanged;
    private bool m_bIsTextParsed;
    private String[] m_stringCache;
    private bool m_bOverlay;
    internal IList`1<IInternalChartTextArea> DefaultParagarphProperties;
    internal Nullable`1<bool> IsNormalizeHeights;
    internal TextCapsType CapitalizationType;
    internal bool IsCapsUsed;
    public bool Bold { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color RGBColor { get; public set; }
    public bool Italic { get; public set; }
    public bool MacOSOutlineFont { get; public set; }
    public bool MacOSShadow { get; public set; }
    public double Size { get; public set; }
    public bool Strikethrough { get; public set; }
    internal int Baseline { get; internal set; }
    public bool Subscript { get; public set; }
    public bool Superscript { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public string FontName { get; public set; }
    public ExcelFontVertialAlignment VerticalAlignment { get; public set; }
    internal bool IsTitleElement { get; internal set; }
    public string Text { get; public set; }
    public IChartRichTextString RichText { get; }
    public IChartFrameFormat FrameFormat { get; }
    [CLSCompliantAttribute("False")]
public ChartObjectLinkRecord ObjectLink { get; }
    public int TextRotationAngle { get; public set; }
    public bool HasTextRotation { get; }
    internal Excel2007TextRotation TextRotation { get; internal set; }
    [CLSCompliantAttribute("False")]
public ChartTextRecord TextRecord { get; }
    public string NumberFormat { get; public set; }
    public int NumberFormatIndex { get; }
    [CLSCompliantAttribute("False")]
public ChartAIRecord ChartAI { get; }
    [CLSCompliantAttribute("False")]
public ChartAlrunsRecord ChartAlRuns { get; }
    public bool ContainDataLabels { get; }
    public ExcelChartBackgroundMode BackgroundMode { get; public set; }
    public bool IsAutoMode { get; public set; }
    public bool IsTrend { get; public set; }
    public bool IsAutoColor { get; }
    public IChartLayout Layout { get; public set; }
    public WorkbookImpl ParentWorkbook { get; }
    public ChartParagraphType ParagraphType { get; public set; }
    internal bool ShowTextProperties { get; internal set; }
    internal bool ShowSizeProperties { get; internal set; }
    internal bool ShowBoldProperties { get; internal set; }
    internal String[] StringCache { get; internal set; }
    internal bool Overlay { get; internal set; }
    protected bool ShouldSerialize { get; }
    public bool HasText { get; }
    public bool IsFormula { get; public set; }
    internal bool IsTextParsed { get; internal set; }
    public int FontIndex { get; }
    public bool IsValueFromCells { get; public set; }
    public IRange ValueFromCellsRange { get; public set; }
    public bool IsSeriesName { get; public set; }
    public bool IsCategoryName { get; public set; }
    public bool IsValue { get; public set; }
    public bool IsPercentage { get; public set; }
    public bool IsBubbleSize { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public string Delimiter { get; public set; }
    public bool IsLegendKey { get; public set; }
    public ExcelDataLabelPosition Position { get; public set; }
    public ChartAttachedLabelLayoutRecord AttachedLabelLayout { get; }
    public bool IsShowLabelPercent { get; public set; }
    public ColorObject ColorObject { get; }
    public int Index { get; }
    public FontImpl Font { get; }
    public ChartTextAreaImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartTextAreaImpl(IApplication application, object parent, ExcelObjectTextLink textLink);
    public ChartTextAreaImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public static BiffRecordRaw UnwrapRecord(BiffRecordRaw record);
    private void SetParents();
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_RGBColor();
    public sealed virtual void set_RGBColor(Color value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual bool get_MacOSOutlineFont();
    public sealed virtual void set_MacOSOutlineFont(bool value);
    public sealed virtual bool get_MacOSShadow();
    public sealed virtual void set_MacOSShadow(bool value);
    public sealed virtual double get_Size();
    public sealed virtual void set_Size(double value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    internal int get_Baseline();
    internal void set_Baseline(int value);
    public sealed virtual bool get_Subscript();
    public sealed virtual void set_Subscript(bool value);
    public sealed virtual bool get_Superscript();
    public sealed virtual void set_Superscript(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual ExcelFontVertialAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelFontVertialAlignment value);
    public sealed virtual Font GenerateNativeFont();
    internal bool get_IsTitleElement();
    internal void set_IsTitleElement(bool value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual IChartRichTextString get_RichText();
    public sealed virtual IChartFrameFormat get_FrameFormat();
    public ChartObjectLinkRecord get_ObjectLink();
    public sealed virtual int get_TextRotationAngle();
    public sealed virtual void set_TextRotationAngle(int value);
    public sealed virtual bool get_HasTextRotation();
    internal Excel2007TextRotation get_TextRotation();
    internal void set_TextRotation(Excel2007TextRotation value);
    public ChartTextRecord get_TextRecord();
    public string get_NumberFormat();
    public void set_NumberFormat(string value);
    public int get_NumberFormatIndex();
    public ChartAIRecord get_ChartAI();
    public ChartAlrunsRecord get_ChartAlRuns();
    public bool get_ContainDataLabels();
    public sealed virtual ExcelChartBackgroundMode get_BackgroundMode();
    public sealed virtual void set_BackgroundMode(ExcelChartBackgroundMode value);
    public sealed virtual bool get_IsAutoMode();
    public sealed virtual void set_IsAutoMode(bool value);
    public bool get_IsTrend();
    public void set_IsTrend(bool value);
    public sealed virtual bool get_IsAutoColor();
    public sealed virtual IChartLayout get_Layout();
    public sealed virtual void set_Layout(IChartLayout value);
    public WorkbookImpl get_ParentWorkbook();
    public sealed virtual ChartParagraphType get_ParagraphType();
    public sealed virtual void set_ParagraphType(ChartParagraphType value);
    internal bool get_ShowTextProperties();
    internal void set_ShowTextProperties(bool value);
    internal bool get_ShowSizeProperties();
    internal void set_ShowSizeProperties(bool value);
    internal bool get_ShowBoldProperties();
    internal void set_ShowBoldProperties(bool value);
    internal String[] get_StringCache();
    internal void set_StringCache(String[] value);
    internal bool get_Overlay();
    internal void set_Overlay(bool value);
    [CLSCompliantAttribute("False")]
public int Parse(IList`1<BiffRecordRaw> data, int iPos);
    private void ParseFontx(ChartFontxRecord fontx);
    [CLSCompliantAttribute("False")]
protected int ParseRecord(BiffRecordRaw record, IList`1<BiffRecordRaw> data, int iPos);
    private void ExtractRichTextStreamRecord(BiffRecordRaw& record, Int32& length);
    private void ParseRichTextXMLStream(XmlReader reader, ChartTextAreaImpl textArea);
    protected virtual bool get_ShouldSerialize();
    public bool get_HasText();
    public sealed virtual bool get_IsFormula();
    public sealed virtual void set_IsFormula(bool value);
    internal bool get_IsTextParsed();
    internal void set_IsTextParsed(bool value);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(IList`1<IBiffStorage> records);
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records, bool bIsLegendEntry);
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records, bool bIsLegendEntry, bool bSerializeFontX);
    private void SerializeFontx(IList`1<IBiffStorage> records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeRecord(IList`1<IBiffStorage> records, BiffRecordRaw record);
    internal void UpdateChartText();
    protected virtual ChartFrameFormatImpl CreateFrameFormat();
    protected void InitFrameFormat();
    internal void SetFontIndex(int index);
    private void CreateDataLabels();
    public object Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    public object Clone(object parent);
    public void UpdateSerieIndex(int iNewIndex);
    public void UpdateAsTrend();
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    private void AttachEvents();
    internal void DetachEvents();
    private void ColorChangeEventHandler();
    public int get_FontIndex();
    private Ptg[] GetNameTokens();
    public sealed virtual bool get_IsValueFromCells();
    public sealed virtual void set_IsValueFromCells(bool value);
    public sealed virtual IRange get_ValueFromCellsRange();
    public sealed virtual void set_ValueFromCellsRange(IRange value);
    public sealed virtual bool get_IsSeriesName();
    public sealed virtual void set_IsSeriesName(bool value);
    public sealed virtual bool get_IsCategoryName();
    public sealed virtual void set_IsCategoryName(bool value);
    public sealed virtual bool get_IsValue();
    public sealed virtual void set_IsValue(bool value);
    public sealed virtual bool get_IsPercentage();
    public sealed virtual void set_IsPercentage(bool value);
    public sealed virtual bool get_IsBubbleSize();
    public sealed virtual void set_IsBubbleSize(bool value);
    public sealed virtual bool get_ShowLeaderLines();
    public sealed virtual void set_ShowLeaderLines(bool value);
    public sealed virtual string get_Delimiter();
    public sealed virtual void set_Delimiter(string value);
    public sealed virtual bool get_IsLegendKey();
    public sealed virtual void set_IsLegendKey(bool value);
    public sealed virtual ExcelDataLabelPosition get_Position();
    public sealed virtual void set_Position(ExcelDataLabelPosition value);
    public ChartAttachedLabelLayoutRecord get_AttachedLabelLayout();
    public bool get_IsShowLabelPercent();
    public void set_IsShowLabelPercent(bool value);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual int get_Index();
    public sealed virtual FontImpl get_Font();
    protected void CreateRichTextString();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Charts.ChartTrendLineCollection : CollectionBaseEx`1<IChartTrendLine> {
    private ChartSerieImpl m_parentSerie;
    public IChartTrendLine Item { get; }
    private bool IsParsed { get; }
    public ChartTrendLineCollection(IApplication application, object parent);
    public sealed virtual IChartTrendLine get_Item(int iIndex);
    public sealed virtual IChartTrendLine Add();
    public sealed virtual IChartTrendLine Add(ExcelTrendLineType type);
    public sealed virtual void RemoveAt(int index);
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records);
    private void CheckNegativeValues(ExcelTrendLineType type);
    public void Add(ChartTrendLineImpl trend);
    public void CheckSeriesType();
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    private bool get_IsParsed();
    public ChartTrendLineCollection Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartTrendLineImpl : CommonObject {
    private static int DEF_ORDER_MAX_VALUE;
    private static Dictionary`2<ExcelTrendLineType, string> m_hashNames;
    private ChartLegendEntryImpl chartLegendEntry;
    private ChartSerAuxTrendRecord m_record;
    private ShadowImpl m_shadow;
    private ChartBorderImpl m_border;
    private ChartBorderImpl m_trendLineBorder;
    internal ChartSerieImpl m_serie;
    private ExcelTrendLineType m_type;
    private bool m_isAutoName;
    private string m_strName;
    private ChartTextAreaImpl m_textArea;
    private ChartTextAreaImpl m_trendLineTextArea;
    private int m_iIndex;
    private ThreeDFormatImpl m_3D;
    internal ChartLegendEntryImpl LegendEntry { get; internal set; }
    public IChartBorder Border { get; }
    internal IChartBorder TrendLineBorder { get; }
    public IShadow Shadow { get; }
    public bool HasShadowProperties { get; internal set; }
    public IThreeDFormat Chart3DOptions { get; }
    public bool Has3dProperties { get; internal set; }
    public double Backward { get; public set; }
    public double Forward { get; public set; }
    public bool DisplayEquation { get; public set; }
    public bool DisplayRSquared { get; public set; }
    public double Intercept { get; public set; }
    public bool InterceptIsAuto { get; public set; }
    public ExcelTrendLineType Type { get; public set; }
    public int Order { get; public set; }
    public bool NameIsAuto { get; public set; }
    public string Name { get; public set; }
    public IChartTextArea DataLabel { get; }
    internal IChartTextArea TrendLineTextArea { get; }
    public int Index { get; public set; }
    private static ChartTrendLineImpl();
    public ChartTrendLineImpl(IApplication application, object parent);
    public ChartTrendLineImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos, ChartLegendEntryImpl& entry);
    private void FindParents();
    internal ChartLegendEntryImpl get_LegendEntry();
    internal void set_LegendEntry(ChartLegendEntryImpl value);
    public sealed virtual IChartBorder get_Border();
    internal IChartBorder get_TrendLineBorder();
    public sealed virtual IShadow get_Shadow();
    public bool get_HasShadowProperties();
    internal void set_HasShadowProperties(bool value);
    public sealed virtual IThreeDFormat get_Chart3DOptions();
    public bool get_Has3dProperties();
    internal void set_Has3dProperties(bool value);
    public sealed virtual double get_Backward();
    public sealed virtual void set_Backward(double value);
    public sealed virtual double get_Forward();
    public sealed virtual void set_Forward(double value);
    public sealed virtual bool get_DisplayEquation();
    public sealed virtual void set_DisplayEquation(bool value);
    public sealed virtual bool get_DisplayRSquared();
    public sealed virtual void set_DisplayRSquared(bool value);
    public sealed virtual double get_Intercept();
    public sealed virtual void set_Intercept(double value);
    public sealed virtual bool get_InterceptIsAuto();
    public sealed virtual void set_InterceptIsAuto(bool value);
    public sealed virtual ExcelTrendLineType get_Type();
    public sealed virtual void set_Type(ExcelTrendLineType value);
    public sealed virtual int get_Order();
    public sealed virtual void set_Order(int value);
    public sealed virtual bool get_NameIsAuto();
    public sealed virtual void set_NameIsAuto(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IChartTextArea get_DataLabel();
    internal IChartTextArea get_TrendLineTextArea();
    public sealed virtual void ClearFormats();
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    private void Parse(IList`1<BiffRecordRaw> data, Int32& iPos, ChartLegendEntryImpl& entry);
    [CLSCompliantAttribute("False")]
public void Serialize(IList`1<IBiffStorage> records);
    private void SerializeChartAi(IList`1<IBiffStorage> records);
    private void SerializeLegendEntry(IList`1<IBiffStorage> records);
    private void SerializeDataLabels(IList`1<IBiffStorage> records);
    private void CheckRecordProprties();
    private void CheckIntercept();
    private void CheckBackward(double value);
    private void OnTypeChanging(ExcelTrendLineType type);
    private void CheckOrder(int value);
    private void UpdateDataLabels(bool value);
    private void UpdateType();
    public void SetDataLabel(ChartTextAreaImpl area);
    public int get_Index();
    public void set_Index(int value);
    public ChartTrendLineImpl Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartValueAxisImpl : ChartAxisImpl {
    public static Double[] DEF_DISPLAY_UNIT_VALUES;
    private bool m_bHasDisplayUnitLabel;
    private ChartValueRangeRecord m_chartValueRange;
    private double m_logBase;
    private double m_displayUnitCustom;
    private ExcelChartDisplayUnit m_displayUnit;
    private ChartWrappedTextAreaImpl m_displayUnitLabel;
    private bool m_bAutoTickLabelSpacing;
    private bool m_isChangeAutoCross;
    private bool m_isChangeAutoCrossInLoading;
    public double MinimumValue { get; public set; }
    public double MaximumValue { get; public set; }
    public double MajorUnit { get; public set; }
    public double MinorUnit { get; public set; }
    public double CrossValue { get; public set; }
    public double CrossesAt { get; public set; }
    public bool IsAutoMin { get; public set; }
    public bool IsAutoMax { get; public set; }
    public bool AutoTickLabelSpacing { get; public set; }
    public bool IsAutoMajor { get; public set; }
    public bool IsAutoMinor { get; public set; }
    public bool IsAutoCross { get; public set; }
    internal bool IsChangeAutoCross { get; internal set; }
    internal bool IsChangeAutoCrossInLoading { get; internal set; }
    public bool IsLogScale { get; public set; }
    public double LogBase { get; public set; }
    public bool ReversePlotOrder { get; public set; }
    public bool IsMaxCross { get; public set; }
    [CLSCompliantAttribute("False")]
protected internal ChartValueRangeRecord ChartValueRange { get; protected internal set; }
    public double DisplayUnitCustom { get; public set; }
    public ExcelChartDisplayUnit DisplayUnit { get; public set; }
    public bool HasDisplayUnitLabel { get; public set; }
    public IChartTextArea DisplayUnitLabel { get; }
    [CLSCompliantAttribute("False")]
protected ExcelObjectTextLink TextLinkType { get; }
    public ChartValueAxisImpl(IApplication application, object parent);
    public ChartValueAxisImpl(IApplication application, object parent, ExcelAxisType axisType);
    public ChartValueAxisImpl(IApplication application, object parent, ExcelAxisType axisType, bool bIsPrimary);
    [CLSCompliantAttribute("False")]
public ChartValueAxisImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public ChartValueAxisImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos, bool isPrimary);
    private static ChartValueAxisImpl();
    public sealed virtual double get_MinimumValue();
    public sealed virtual void set_MinimumValue(double value);
    public sealed virtual double get_MaximumValue();
    public sealed virtual void set_MaximumValue(double value);
    public virtual double get_MajorUnit();
    public virtual void set_MajorUnit(double value);
    public virtual double get_MinorUnit();
    public virtual void set_MinorUnit(double value);
    public sealed virtual double get_CrossValue();
    public sealed virtual void set_CrossValue(double value);
    public virtual double get_CrossesAt();
    public virtual void set_CrossesAt(double value);
    public virtual bool get_IsAutoMin();
    public virtual void set_IsAutoMin(bool value);
    protected void SetAutoMin(bool check, bool value);
    public virtual bool get_IsAutoMax();
    public virtual void set_IsAutoMax(bool value);
    protected void SetAutoMax(bool check, bool value);
    public sealed virtual bool get_AutoTickLabelSpacing();
    public sealed virtual void set_AutoTickLabelSpacing(bool value);
    public virtual bool get_IsAutoMajor();
    public virtual void set_IsAutoMajor(bool value);
    public virtual bool get_IsAutoMinor();
    public virtual void set_IsAutoMinor(bool value);
    public virtual bool get_IsAutoCross();
    public virtual void set_IsAutoCross(bool value);
    internal bool get_IsChangeAutoCross();
    internal void set_IsChangeAutoCross(bool value);
    internal bool get_IsChangeAutoCrossInLoading();
    internal void set_IsChangeAutoCrossInLoading(bool value);
    public sealed virtual bool get_IsLogScale();
    public sealed virtual void set_IsLogScale(bool value);
    public sealed virtual double get_LogBase();
    public sealed virtual void set_LogBase(double value);
    public virtual bool get_ReversePlotOrder();
    public virtual void set_ReversePlotOrder(bool value);
    public virtual bool get_IsMaxCross();
    public virtual void set_IsMaxCross(bool value);
    protected internal ChartValueRangeRecord get_ChartValueRange();
    protected internal void set_ChartValueRange(ChartValueRangeRecord value);
    public sealed virtual double get_DisplayUnitCustom();
    public sealed virtual void set_DisplayUnitCustom(double value);
    public sealed virtual ExcelChartDisplayUnit get_DisplayUnit();
    public sealed virtual void set_DisplayUnit(ExcelChartDisplayUnit value);
    public sealed virtual bool get_HasDisplayUnitLabel();
    public sealed virtual void set_HasDisplayUnitLabel(bool value);
    public sealed virtual IChartTextArea get_DisplayUnitLabel();
    [CLSCompliantAttribute("False")]
protected virtual void ParseMaxCross(BiffRecordRaw record);
    protected virtual void ParseWallsOrFloor(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
protected virtual void ParseData(BiffRecordRaw record, IList`1<BiffRecordRaw> data, Int32& iPos);
    private void ParseDisplayUnits(ChartAxisDisplayUnitsRecord record);
    private void ParseDisplayUnitLabel(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void Serialize(OffsetArrayList records, ChartAxisType axisType);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeWallsOrFloor(OffsetArrayList records);
    private void SerializeDisplayUnits(OffsetArrayList records);
    protected virtual void InitializeVariables();
    protected bool CheckValueRangeRecord();
    protected virtual bool CheckValueRangeRecord(bool throwException);
    protected virtual ExcelObjectTextLink get_TextLinkType();
    public virtual ChartAxisImpl Clone(object parent, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<string, string> dicNewSheetNames);
    private void CreateDispalayUnitLabel();
    public void SetMajorUnit(double value);
    public void SetMinorUnit(double value);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartWallOrFloorImpl : ChartGridLineImpl {
    public static int DEF_CATEGORY_LINE_COLOR;
    public static ExcelKnownColors DEF_CATEGORY_COLOR_INDEX;
    private static int DEF_VALUE_LINE_COLOR;
    public static int DEF_CATEGORY_FOREGROUND_COLOR;
    public static ExcelKnownColors DEF_CATEGORY_BACKGROUND_COLOR_INDEX;
    public static ExcelKnownColors DEF_VALUE_BACKGROUND_COLOR_INDEX;
    private static ExcelKnownColors DEF_VALUE_FOREGROUND_COLOR_INDEX;
    private bool m_bWalls;
    private ChartInteriorImpl m_interior;
    private ChartImpl m_parentChart;
    private ShadowImpl m_shadow;
    private ThreeDFormatImpl m_3D;
    private ChartFillImpl m_fill;
    private bool m_shapeProperties;
    private UInt32 m_thickness;
    private ExcelChartPictureType m_PictureUnit;
    private double m_pictureStackUnit;
    public IChartInterior Interior { get; }
    public IShadow Shadow { get; }
    public bool HasShadowProperties { get; internal set; }
    internal bool HasShapeProperties { get; internal set; }
    public UInt32 Thickness { get; public set; }
    public ExcelChartPictureType PictureUnit { get; public set; }
    internal double PictureStackUnit { get; internal set; }
    public IThreeDFormat ThreeD { get; }
    public bool Has3dProperties { get; internal set; }
    public IFill Fill { get; }
    public bool HasInterior { get; }
    private bool IsWall { get; }
    public ColorObject ForeGroundColorObject { get; }
    public ColorObject BackGroundColorObject { get; }
    public ExcelPattern Pattern { get; public set; }
    public bool IsAutomaticFormat { get; public set; }
    public bool Visible { get; public set; }
    public ChartWallOrFloorImpl(IApplication application, object parent, bool bWalls);
    public ChartWallOrFloorImpl(IApplication application, object parent, bool bWalls, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public virtual void Parse(IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    public sealed virtual IChartInterior get_Interior();
    public sealed virtual IShadow get_Shadow();
    public sealed virtual bool get_HasShadowProperties();
    internal void set_HasShadowProperties(bool value);
    internal bool get_HasShapeProperties();
    internal void set_HasShapeProperties(bool value);
    public sealed virtual UInt32 get_Thickness();
    public sealed virtual void set_Thickness(UInt32 value);
    public sealed virtual ExcelChartPictureType get_PictureUnit();
    public sealed virtual void set_PictureUnit(ExcelChartPictureType value);
    internal double get_PictureStackUnit();
    internal void set_PictureStackUnit(double value);
    public sealed virtual IThreeDFormat get_ThreeD();
    public sealed virtual bool get_Has3dProperties();
    internal void set_Has3dProperties(bool value);
    public sealed virtual IFill get_Fill();
    public sealed virtual bool get_HasInterior();
    private bool get_IsWall();
    public virtual void Delete();
    public void SetToDefault();
    private void SetToDefaultCategoryLine();
    private void SetToDefaultValueLine();
    private void SetToDefaultCategoryArea();
    private void SetToDefaultValueArea();
    public virtual object Clone(object parent);
    public sealed virtual ColorObject get_ForeGroundColorObject();
    public sealed virtual ColorObject get_BackGroundColorObject();
    public sealed virtual ExcelPattern get_Pattern();
    public sealed virtual void set_Pattern(ExcelPattern value);
    public sealed virtual bool get_IsAutomaticFormat();
    public sealed virtual void set_IsAutomaticFormat(bool value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartWrappedFrameFormatImpl : ChartFrameFormatImpl {
    public ChartWrappedFrameFormatImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
protected virtual bool CheckBegin(BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
protected virtual void ParseRecord(BiffRecordRaw record, Int32& iBeginCounter, bool isPlotArea);
    [CLSCompliantAttribute("False")]
protected virtual BiffRecordRaw UnwrapRecord(BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeRecord(IList`1<IBiffStorage> list, BiffRecordRaw record);
}
public class Syncfusion.XlsIO.Implementation.Charts.ChartWrappedTextAreaImpl : ChartTextAreaImpl {
    private static Byte[][] DEF_UNKNOWN_START;
    private static Byte[][] DEF_UNKNOWN_END;
    protected bool ShouldSerialize { get; }
    public ChartWrappedTextAreaImpl(IApplication application, object parent);
    public ChartWrappedTextAreaImpl(IApplication application, object parent, IList`1<BiffRecordRaw> data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public ChartWrappedTextAreaImpl(IApplication application, object parent, ExcelObjectTextLink textLink);
    private static ChartWrappedTextAreaImpl();
    protected virtual ChartFrameFormatImpl CreateFrameFormat();
    [CLSCompliantAttribute("False")]
protected virtual void SerializeRecord(IList`1<IBiffStorage> records, BiffRecordRaw record);
    protected virtual bool get_ShouldSerialize();
    private void SerializeUnknown(OffsetArrayList records, Byte[][] arrUnknown);
}
internal class Syncfusion.XlsIO.Implementation.Charts.HistogramAxisFormat : object {
    private byte m_flagOptions;
    private int m_numberOfBins;
    private double m_binWidth;
    private double m_overflowBinValue;
    private double m_underflowBinValue;
    private bool m_isNotAutomaticUnderFlowValue;
    internal bool HasAutomaticBins { get; internal set; }
    internal bool IsBinningByCategory { get; internal set; }
    internal double BinWidth { get; internal set; }
    internal int NumberOfBins { get; internal set; }
    internal double OverflowBinValue { get; internal set; }
    internal double UnderflowBinValue { get; internal set; }
    internal bool IsIntervalClosedinLeft { get; internal set; }
    internal byte FlagOptions { get; }
    internal bool IsNotAutomaticOverFlowValue { get; internal set; }
    internal bool IsNotAutomaticUnderFlowValue { get; internal set; }
    internal bool get_HasAutomaticBins();
    internal void set_HasAutomaticBins(bool value);
    internal bool get_IsBinningByCategory();
    internal void set_IsBinningByCategory(bool value);
    internal double get_BinWidth();
    internal void set_BinWidth(double value);
    internal int get_NumberOfBins();
    internal void set_NumberOfBins(int value);
    internal double get_OverflowBinValue();
    internal void set_OverflowBinValue(double value);
    internal double get_UnderflowBinValue();
    internal void set_UnderflowBinValue(double value);
    internal bool get_IsIntervalClosedinLeft();
    internal void set_IsIntervalClosedinLeft(bool value);
    internal byte get_FlagOptions();
    internal bool get_IsNotAutomaticOverFlowValue();
    internal void set_IsNotAutomaticOverFlowValue(bool value);
    internal bool get_IsNotAutomaticUnderFlowValue();
    internal void set_IsNotAutomaticUnderFlowValue(bool value);
    private void ResetValues(byte bitPosition);
    internal void Clone(HistogramAxisFormat inputFormat);
    public virtual bool Equals(object obj);
}
internal interface Syncfusion.XlsIO.Implementation.Charts.IScalable {
    public bool IsLogScale { get; public set; }
    public bool IsReversed { get; public set; }
    public double MaximumValue { get; public set; }
    public double MinimumValue { get; public set; }
    public double LogBase { get; public set; }
    public abstract virtual bool get_IsLogScale();
    public abstract virtual void set_IsLogScale(bool value);
    public abstract virtual bool get_IsReversed();
    public abstract virtual void set_IsReversed(bool value);
    public abstract virtual double get_MaximumValue();
    public abstract virtual void set_MaximumValue(double value);
    public abstract virtual double get_MinimumValue();
    public abstract virtual void set_MinimumValue(double value);
    public abstract virtual double get_LogBase();
    public abstract virtual void set_LogBase(double value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.AddInFunctionsCollection : CollectionBaseEx`1<AddInFunctionImpl> {
    private static string DEF_FILE_NAME_START;
    public static int DEF_LOCAL_BOOK_INDEX;
    private Dictionary`2<string, int> m_hashFileNames;
    private WorkbookImpl m_book;
    private ExternWorkbookImpl m_unknownBook;
    public IAddInFunction Item { get; }
    public AddInFunctionsCollection(IApplication application, object parent);
    private void SetParents();
    public sealed virtual IAddInFunction get_Item(int index);
    public sealed virtual int Add(string strFunctionName);
    public void Add(int iExternBookIndex, int iNameIndex);
    public void RemoveAt(int index);
    public bool Contains(string strBookName);
    public void CopyFrom(AddInFunctionsCollection addinFunctions);
    private void ExternWorkbooks_Inserted(object sender, CollectionChangeEventArgs`1<ExternWorkbookImpl> args);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.ArrayListEx : object {
    private RowStorage[] m_items;
    private int m_iCount;
    public RowStorage Item { get; public set; }
    public ArrayListEx(int iCount);
    public RowStorage get_Item(int index);
    public void set_Item(int index, RowStorage value);
    public void UpdateSize(int iCount);
    public void ReduceSizeIfNecessary(int iCount);
    public void Insert(int index, int count, int length);
    internal int GetCount();
    internal bool GetRowIndex(int row, Int32& arrIndex);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.AutoFiltersCollection : CollectionBaseEx`1<object> {
    public static string DEF_AUTOFILTER_NAMEDRANGE;
    public static string DEF_EXCEL07_AUTOFILTER_NAMEDRANGE;
    private IRange m_range;
    private WorksheetImpl m_worksheet;
    private IListObject m_listObject;
    private int m_topRow;
    private int m_leftColumn;
    private int m_bottomRow;
    private int m_rightColumn;
    private bool m_hasAdjacents;
    private IDataSort m_dataSorter;
    public IRange FilterRange { get; public set; }
    public IAutoFilter Item { get; }
    public string AddressR1C1 { get; }
    public IDataSort DataSorter { get; internal set; }
    public WorksheetImpl Worksheet { get; }
    public bool IsFiltered { get; }
    public string DefaultNamedRangeName { get; }
    public AutoFiltersCollection(IApplication application, object parent);
    private void SetParents();
    public sealed virtual IRange get_FilterRange();
    public sealed virtual void set_FilterRange(IRange value);
    public sealed virtual IAutoFilter get_Item(int columnIndex);
    public string get_AddressR1C1();
    public sealed virtual IDataSort get_DataSorter();
    internal void set_DataSorter(IDataSort value);
    public WorksheetImpl get_Worksheet();
    public bool get_IsFiltered();
    public string get_DefaultNamedRangeName();
    public void Parse(List`1<BiffRecordRaw> records);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private void AutoFiltersCollection_Cleared();
    public AutoFiltersCollection Clone(WorksheetImpl parent);
    internal AutoFiltersCollection Clone(IListObject parent);
    public void ChangeVersions(int iLastRow, int iLastColumn, ExcelVersion version);
    public void UpdateFilterRange();
    internal void UpdateRange(IRange value);
    private IRange UpdateFilterRange(IRange filterRange);
    internal IRange IncludeAdjacents(int topRow, int leftColumn, int bottomRow, int rightColumn, IRange filterRange, bool isEnd);
    internal IRange IncludeBottomAdjacents(int topRow, int leftColumn, int bottomRow, int rightColumn, IRange filterRange);
    private void InitializeFilterRange(int topRow, int leftColumn, int bottomRow, int rightColumn);
    private void GetTopAdjacents(int topRow, int leftColumn, int bottomRow, int rightColumn, IRange filterRange);
    private void GetLeftAdjacents(int topRow, int leftColumn, int bottomRow, int rightColumn, IRange filterRange);
    private void GetBottomAdjacents(int topRow, int leftColumn, int bottomRow, int rightColumn, IRange filterRange);
    private void GetRightAdjacents(int topRow, int leftColumn, int bottomRow, int rightColumn, IRange filterRange);
    private bool HasAdjacent(int row, int column, IRange filterRange);
    private bool IsRowNotEmpty(int row, int left, int right, IRange filterRange);
    private bool IsColumnNotEmpty(int column, int top, int bottom, IRange filterRange);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.BordersCollection : CollectionBaseEx`1<IBorder> {
    private WorkbookImpl m_book;
    private bool m_bIsEmptyBorder;
    public ExcelKnownColors Color { get; public set; }
    public Color ColorRGB { get; public set; }
    public IBorder Item { get; }
    public ExcelLineStyle LineStyle { get; public set; }
    public ExcelLineStyle Value { get; public set; }
    internal bool IsEmptyBorder { get; internal set; }
    internal BordersCollection(IApplication application, object parent, bool bAddEmpty);
    public BordersCollection(IApplication application, object parent);
    public BordersCollection(IApplication application, object parent, IInternalExtendedFormat wrap);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual IBorder get_Item(ExcelBordersIndex index);
    public sealed virtual ExcelLineStyle get_LineStyle();
    public sealed virtual void set_LineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_Value();
    public sealed virtual void set_Value(ExcelLineStyle value);
    internal bool get_IsEmptyBorder();
    internal void set_IsEmptyBorder(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void SetParents();
    internal void SetBorder(ExcelBordersIndex index, IBorder border);
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.BordersCollectionArrayWrapper : CollectionBaseEx`1<object> {
    private List`1<IRange> m_arrCells;
    private WorkbookImpl m_book;
    private IApplication m_application;
    private static int DEF_BORDERS_COUNT;
    public ExcelKnownColors Color { get; public set; }
    public Color ColorRGB { get; public set; }
    public IBorder Item { get; }
    public ExcelLineStyle LineStyle { get; public set; }
    public int Count { get; }
    public ExcelLineStyle Value { get; public set; }
    public BordersCollectionArrayWrapper(IRange range);
    public BordersCollectionArrayWrapper(List`1<IRange> lstRange, IApplication application);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual IBorder get_Item(ExcelBordersIndex Index);
    public sealed virtual ExcelLineStyle get_LineStyle();
    public sealed virtual void set_LineStyle(ExcelLineStyle value);
    public sealed virtual int get_Count();
    public sealed virtual ExcelLineStyle get_Value();
    public sealed virtual void set_Value(ExcelLineStyle value);
    private void SetParents();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.BuiltInDocumentProperties : CollectionBaseEx`1<DocumentPropertyImpl> {
    private static STGM DEF_PROPERTY_STORAGE_OPTIONS;
    public static Guid GuidSummary;
    public static Guid GuidDocument;
    private Dictionary`2<int, DocumentPropertyImpl> m_documentHash;
    private Dictionary`2<int, DocumentPropertyImpl> m_summaryHash;
    public IDocumentProperty Item { get; }
    public IDocumentProperty Item { get; }
    public string Title { get; public set; }
    public string Subject { get; public set; }
    public string Author { get; public set; }
    public string Keywords { get; public set; }
    public string Comments { get; public set; }
    public string Template { get; public set; }
    public string LastAuthor { get; public set; }
    public string RevisionNumber { get; public set; }
    public TimeSpan EditTime { get; public set; }
    public DateTime LastPrinted { get; public set; }
    public DateTime CreationDate { get; public set; }
    public DateTime LastSaveDate { get; public set; }
    public int PageCount { get; public set; }
    public int WordCount { get; public set; }
    public int CharCount { get; public set; }
    public string ApplicationName { get; public set; }
    internal bool HasHeadingPair { get; internal set; }
    public int Security { get; public set; }
    public string Category { get; public set; }
    public string PresentationTarget { get; public set; }
    public int ByteCount { get; public set; }
    public int LineCount { get; public set; }
    public int ParagraphCount { get; public set; }
    public int SlideCount { get; public set; }
    public int NoteCount { get; public set; }
    public int HiddenCount { get; public set; }
    public int MultimediaClipCount { get; public set; }
    public bool ScaleCrop { get; public set; }
    public string Manager { get; public set; }
    public string Company { get; public set; }
    public bool LinksDirty { get; public set; }
    public BuiltInDocumentProperties(IApplication application, object parent);
    private static BuiltInDocumentProperties();
    public sealed virtual IDocumentProperty get_Item(ExcelBuiltInProperty index);
    public sealed virtual IDocumentProperty get_Item(int iIndex);
    public sealed virtual bool Contains(ExcelBuiltInProperty index);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public sealed virtual string get_Subject();
    public sealed virtual void set_Subject(string value);
    public sealed virtual string get_Author();
    public sealed virtual void set_Author(string value);
    public sealed virtual string get_Keywords();
    public sealed virtual void set_Keywords(string value);
    public sealed virtual string get_Comments();
    public sealed virtual void set_Comments(string value);
    public sealed virtual string get_Template();
    public sealed virtual void set_Template(string value);
    public sealed virtual string get_LastAuthor();
    public sealed virtual void set_LastAuthor(string value);
    public sealed virtual string get_RevisionNumber();
    public sealed virtual void set_RevisionNumber(string value);
    public sealed virtual TimeSpan get_EditTime();
    public sealed virtual void set_EditTime(TimeSpan value);
    public sealed virtual DateTime get_LastPrinted();
    public sealed virtual void set_LastPrinted(DateTime value);
    public sealed virtual DateTime get_CreationDate();
    public sealed virtual void set_CreationDate(DateTime value);
    public sealed virtual DateTime get_LastSaveDate();
    public sealed virtual void set_LastSaveDate(DateTime value);
    public sealed virtual int get_PageCount();
    public sealed virtual void set_PageCount(int value);
    public sealed virtual int get_WordCount();
    public sealed virtual void set_WordCount(int value);
    public sealed virtual int get_CharCount();
    public sealed virtual void set_CharCount(int value);
    public sealed virtual string get_ApplicationName();
    public sealed virtual void set_ApplicationName(string value);
    internal bool get_HasHeadingPair();
    internal void set_HasHeadingPair(bool value);
    public int get_Security();
    public void set_Security(int value);
    public sealed virtual string get_Category();
    public sealed virtual void set_Category(string value);
    public sealed virtual string get_PresentationTarget();
    public sealed virtual void set_PresentationTarget(string value);
    public sealed virtual int get_ByteCount();
    public sealed virtual void set_ByteCount(int value);
    public sealed virtual int get_LineCount();
    public sealed virtual void set_LineCount(int value);
    public sealed virtual int get_ParagraphCount();
    public sealed virtual void set_ParagraphCount(int value);
    public sealed virtual int get_SlideCount();
    public sealed virtual void set_SlideCount(int value);
    public sealed virtual int get_NoteCount();
    public sealed virtual void set_NoteCount(int value);
    public sealed virtual int get_HiddenCount();
    public sealed virtual void set_HiddenCount(int value);
    public sealed virtual int get_MultimediaClipCount();
    public sealed virtual void set_MultimediaClipCount(int value);
    public bool get_ScaleCrop();
    public void set_ScaleCrop(bool value);
    public sealed virtual string get_Manager();
    public sealed virtual void set_Manager(string value);
    public sealed virtual string get_Company();
    public sealed virtual void set_Company(string value);
    public sealed virtual bool get_LinksDirty();
    public sealed virtual void set_LinksDirty(bool value);
    private IDictionary GetDictionary(ExcelBuiltInProperty propertyId);
    protected virtual void OnClearComplete();
    [CLSCompliantAttribute("False")]
public void Parse(DocumentPropertyCollection properties);
    public static void ReadProperties(PropertySection section, IDictionary dicProperties, List`1<DocumentPropertyImpl> lstProperties, bool bSummary, bool bBuiltIn);
    public static void WriteProperties(PropertySection section, ICollection values);
    private static PropertyData ConvertToPropertyData(DocumentPropertyImpl property, int iPropertyId);
    protected virtual void OnInsertComplete(int index, DocumentPropertyImpl value);
    public void Serialize(PropertySection summarySection, PropertySection documentSection);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.CellRecordCollection : CommonObject {
    private RecordTable m_dicRecords;
    private SFTable m_colRanges;
    private IInternalWorksheet m_worksheet;
    private WorkbookImpl m_book;
    private bool m_bUseCache;
    private RecordExtractor m_recordExtractor;
    public int FirstRow { get; }
    public int LastRow { get; }
    public int FirstColumn { get; }
    public int LastColumn { get; }
    internal IInternalWorksheet Sheet { get; }
    public RecordTable Table { get; public set; }
    public bool UseCache { get; public set; }
    public ExcelVersion Version { get; public set; }
    public RecordExtractor RecordExtractor { get; }
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    [CLSCompliantAttribute("False")]
public ICellPositionFormat Item { get; public set; }
    [CLSCompliantAttribute("False")]
public ICellPositionFormat Item { get; public set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public CellRecordCollection(IApplication application, object parent);
    private void SetParents();
    public int get_FirstRow();
    public int get_LastRow();
    public int get_FirstColumn();
    public int get_LastColumn();
    internal IInternalWorksheet get_Sheet();
    [DebuggerStepThroughAttribute]
public RecordTable get_Table();
    [DebuggerStepThroughAttribute]
public void set_Table(RecordTable value);
    public bool get_UseCache();
    public void set_UseCache(bool value);
    public ExcelVersion get_Version();
    public void set_Version(ExcelVersion value);
    public RecordExtractor get_RecordExtractor();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection get_Keys();
    public sealed virtual ICollection get_Values();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public ICellPositionFormat get_Item(long key);
    public void set_Item(long key, ICellPositionFormat value);
    public ICellPositionFormat get_Item(int iRow, int iColumn);
    public void set_Item(int iRow, int iColumn, ICellPositionFormat value);
    public sealed virtual void Clear();
    public sealed virtual void Add(object key, object value);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual void Remove(object key);
    public sealed virtual bool Contains(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CLSCompliantAttribute("False")]
public void Add(long key, ICellPositionFormat value);
    [CLSCompliantAttribute("False")]
public void Add(ICellPositionFormat value);
    public void Remove(long key);
    public void Remove(int iRow, int iColumn);
    public bool ContainsRow(int iRowIndex);
    public bool Contains(long key);
    public bool Contains(int iRow, int iColumn);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    [CLSCompliantAttribute("False")]
public int Serialize(OffsetArrayList records, List`1<DBCellRecord> arrDBCells);
    private int PrepareNextRowsBlock(OffsetArrayList records, List`1<RowStorage> ranges, int i, Int32& iRowRecSize, Int32& iFirstRowOffset, int iLastRow, int iFirstSheetCol, int iLastSheetCol, ExcelVersion version);
    [CLSCompliantAttribute("False")]
protected RowStorage GetRowData(int index, int iFirstColumn, int iLastColumn, Int32& min, Int32& max, ExcelVersion version);
    [CLSCompliantAttribute("False")]
public void ExtractRanges(BiffReader reader, bool bIgnoreStyles, Dictionary`2<int, int> hashNewXFIndexes, IDecryptor decryptor);
    [CLSCompliantAttribute("False")]
public bool ExtractRangesFast(IndexRecord index, BiffReader reader, bool bIgnoreStyles, Dictionary`2<int, int> hashNewXFIndexes);
    [CLSCompliantAttribute("False")]
public void AddRecord(BiffRecordRaw recordToAdd, bool bIgnoreStyles);
    [CLSCompliantAttribute("False")]
public void AddRecord(ICellPositionFormat cell, bool bIgnoreStyles);
    private void AddRecord(MulRKRecord mulRK, bool bIgnoreStyles);
    private void AddRecord(MulBlankRecord mulBlank, bool bIgnoreStyles);
    private void AddRecord(FormulaRecord formula, StringRecord stringRecord, bool bIgnoreStyles);
    internal bool IsRequireRange(FormulaRecord formula);
    internal void UpdateRows(int rowCount);
    public CellRecordCollection Clone(object parent);
    [CLSCompliantAttribute("False")]
public void SetRange(long key, RangeImpl range);
    [CLSCompliantAttribute("False")]
public void SetRange(int iRow, int iColumn, RangeImpl range);
    public RangeImpl GetRange(long key);
    public RangeImpl GetRange(int iRow, int iColumn);
    [CLSCompliantAttribute("False")]
public void SetCellRecord(long key, ICellPositionFormat cell);
    [CLSCompliantAttribute("False")]
public void SetCellRecord(int iRow, int iColumn, ICellPositionFormat cell);
    [CLSCompliantAttribute("False")]
public ICellPositionFormat GetCellRecord(long key);
    [CLSCompliantAttribute("False")]
public ICellPositionFormat GetCellRecord(int iRow, int iColumn);
    public void ClearRange(Rectangle rect);
    public void CopyCells(CellRecordCollection sourceCells, Dictionary`2<string, string> hashStyleNames, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> hashExtFormatIndexes, Dictionary`2<int, int> dicNewNameIndexes, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<int, int> dictExternSheet);
    public RichTextString GetRTFString(long cellIndex, bool bAutofitRows);
    public void FillRTFString(long cellIndex, bool bAutofitRows, RichTextString richText);
    public RichTextString GetLabelSSTRTFString(long cellIndex, bool bAutofitRows);
    [CLSCompliantAttribute("False")]
public void FillLabelSSTRTFString(LabelSSTRecord labelSST, bool bAutofitRows, RichTextString richText);
    public string GetText(long cellIndex);
    public string GetError(long cellIndex);
    public bool GetBool(long cellIndex, Boolean& value);
    public bool ContainNumber(long cellIndex);
    public bool ContainBoolOrError(long cellIndex);
    public bool ContainFormulaNumber(long cellIndex);
    public bool ContainFormulaBoolOrError(long cellIndex);
    public double GetNumber(long cellIndex);
    public double GetNumberWithoutFormula(long cellIndex);
    public double GetFormulaNumberValue(long cellIndex);
    public void SetStringValue(long cellIndex, string strValue);
    public string GetFormulaStringValue(long cellIndex);
    public DateTime GetDateTime(long cellIndex);
    [CLSCompliantAttribute("False")]
public bool CopyCell(ICellPositionFormat cell, string strFormulaValue, IDictionary dicXFIndexes, long lNewIndex, WorkbookImpl book, Dictionary`2<int, int> dicFontIndexes, ExcelCopyRangeOptions options, int destXFIndex);
    internal static void ChangeReferenceIndex(WorkbookImpl sourceBook, WorkbookImpl destBook, WorksheetImpl destSheet, Ptg[] formulaPtg);
    internal static void ChangeNameReferenceIndex(WorkbookImpl sourceBook, WorkbookImpl destBook, WorksheetImpl destSheet, Ptg ptg);
    internal static ExternWorkbookImpl GetExternBook(WorkbookImpl sourceBook, WorkbookImpl destBook, int bookIndex);
    internal static int GetNameIndex(string name, WorkbookImpl workbook, WorksheetImpl worksheet);
    public RecordTable CacheIntersection(IRange destination, IRange source, Rectangle& rectIntersection);
    public int GetMinimumRowIndex(int iStartColumn, int iEndColumn);
    public int GetMaximumRowIndex(int iStartColumn, int iEndColumn);
    public int GetMinimumColumnIndex(int iStartRow, int iEndRow);
    public int GetMaximumColumnIndex(int iStartRow, int iEndRow);
    public string GetFormula(long cellIndex);
    public string GetFormula(long cellIndex, bool isR1C1);
    public string GetFormula(long cellIndex, bool isR1C1, NumberFormatInfo numberInfo);
    public string GetValue(long cellIndex, int row, int column, IRange range, string seperator);
    public int GetExtendedFormatIndex(long cellIndex);
    public int GetExtendedFormatIndex(int row, int column);
    public int GetExtendedFormatIndexByRow(int row);
    public int GetExtendedFormatIndexByColumn(int column);
    public IFont GetCellFont(long cellIndex);
    public void CopyStyle(int iSourceRow, int iSourceColumn, int iDestRow, int iDestColumn);
    [CLSCompliantAttribute("False")]
public ICellPositionFormat CreateCellNoAdd(int iRow, int iColumn, TBIFFRecord recordType);
    [CLSCompliantAttribute("False")]
public ICellPositionFormat CreateCell(int iRow, int iColumn, TBIFFRecord recordType);
    public IStyle GetCellStyle(long cellIndex);
    public IExtendedFormat GetCellFormatting(long cellIndex);
    public void SetNumberValue(int iRow, int iCol, double dValue);
    public void SetNumberValue(long cellIndex, double dValue);
    public void SetNumberValue(int iRow, int iCol, double dValue, int iXFIndex);
    public void SetBooleanValue(int iRow, int iCol, bool bValue);
    public void SetBooleanValue(long cellIndex, bool bValue);
    public void SetBooleanValue(int iRow, int iCol, bool bValue, int iXFIndex);
    public void SetErrorValue(int iRow, int iCol, string strValue);
    public void SetErrorValue(long cellIndex, string strValue);
    public void SetErrorValue(int iRow, int iCol, string strValue, int iXFIndex);
    public void SetErrorValue(int iRow, int iCol, byte errorCode, int iXFIndex);
    public void SetFormula(int iRow, int iCol, string strValue, int iXFIndex);
    public void SetFormula(int iRow, int iCol, string strValue, int iXFIndex, bool isR1C1, NumberFormatInfo formatInfo);
    public void SetFormula(int iRow, int iCol, string strValue, int iXFIndex, bool isR1C1);
    public void SetFormula(int iRow, int iCol, string strValue, int iXFIndex, bool isR1C1, bool bParse, NumberFormatInfo formatInfo);
    public void SetBlank(int iRow, int iCol, int iXFIndex);
    public void SetRTF(int iRow, int iCol, int iXFIndex, TextWithFormat rtf);
    public void SetSingleStringValue(int iRow, int iCol, int iXFIndex, int iSSTIndex);
    internal void SetNonSSTString(int row, int column, int iXFIndex, string strValue);
    public void FreeRange(int iRow, int iColumn);
    public void ClearData();
    [CLSCompliantAttribute("False")]
public void SetArrayFormula(ArrayRecord record);
    [CLSCompliantAttribute("False")]
public ArrayRecord GetArrayRecord(int iRow, int iColumn);
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public void RemoveLastColumn(int iColumnIndex);
    public void RemoveRow(int iRowIndex);
    public void UpdateNameIndexes(WorkbookImpl book, Int32[] arrNewIndex);
    public void UpdateNameIndexes(WorkbookImpl book, IDictionary`2<int, int> dicNewIndex);
    [CLSCompliantAttribute("False")]
public void ReplaceSharedFormula();
    public void UpdateStringIndexes(List`1<int> arrNewIndexes);
    public List`1<long> Find(IRange range, string findValue, ExcelFindType flags, bool bIsFindFirst);
    public List`1<long> Find(IRange range, string findValue, ExcelFindType flags, ExcelFindOptions findOptions, bool bIsFindFirst);
    public List`1<long> Find(IRange range, double findValue, ExcelFindType flags, bool bIsFindFirst);
    public List`1<long> Find(IRange range, byte findValue, bool bIsError, bool bIsFindFirst);
    public List`1<long> Find(Dictionary`2<int, object> dictIndexes);
    public RecordTable CacheAndRemove(RangeImpl sourceRange, int iDeltaRow, int iDeltaColumn, Int32& iMaxRow, Int32& iMaxColumn, bool bInsert);
    public void UpdateExtendedFormatIndex(Dictionary`2<int, int> dictFormats);
    public void UpdateExtendedFormatIndex(Int32[] arrFormats);
    public void UpdateExtendedFormatIndex(int maxCount);
    public void SetCellStyle(int iRow, int iColumn, int iXFIndex);
    public void SetCellStyle(int iRow, int index);
    public void ReAddAllStrings();
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    private void InsertIntoDefaultRows(int iRowIndex, int iRowCount);
    private string GetFormulaErrorBoolText(FormulaRecord formula);
    private void CreateRangesCollection();
    private void UpdateSheetReferences(FormulaRecord formula, IDictionary dicSheetNames, WorkbookImpl book);
    private void CopyStrings(IDictionary dicSourceStrings);
    private FormatImpl GetFormat(long cellIndex);
    private IFont GetFont(long cellIndex);
    private int GetXFIndex(int iOldIndex, IDictionary dicXFIndexes, ExcelCopyRangeOptions options);
    internal void UpdateLabelSSTIndexes(Dictionary`2<int, int> dictUpdatedIndexes, IncreaseIndex method);
    private void FillRichText(RichTextString richText, int sstIndex);
    internal TRangeValueType GetCellType(int row, int column);
    protected virtual void OnDispose();
    public int FindRecord(TBIFFRecord recordType, int iRow, int iCol, int iLastCol);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.ChartsCollection : CollectionBaseEx`1<IChart> {
    public static string DEF_CHART_NAME_START;
    private Dictionary`2<string, IChart> m_hashNames;
    private WorkbookImpl m_book;
    public IChart Item { get; }
    public ChartsCollection(IApplication application, object parent);
    public sealed virtual IChart get_Item(string name);
    public sealed virtual IChart Add();
    public sealed virtual IChart Add(string name);
    public sealed virtual IChart Remove(string name);
    public IChart Add(IChart chartToAdd);
    [CLSCompliantAttribute("False")]
public IChart Add(BiffReader reader);
    [CLSCompliantAttribute("False")]
public IChart Add(BiffReader reader, ExcelParseOptions options, bool bSkip, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    private void SetParents();
    public void Move(int iOldIndex, int iNewIndex);
    private void ChartsCollection_NameChanged(object sender, ValueChangedEventArgs e);
    protected virtual void OnClear();
    private void UpdateSheetIndex(ChartImpl chart, int iOldRealIndex);
    private void MoveInternal(int iOldSheetIndex, int iNewSheetIndex);
    public void AddInternal(IChart chartToAdd);
    private void Objects_TabSheetMoved(object sender, TabSheetMovedEventArgs args);
    public sealed virtual void AddCopy(IChart chartToCopy);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.CheckBoxCollection : CollectionBaseEx`1<object> {
    private WorksheetBaseImpl m_sheet;
    public ICheckBoxShape Item { get; }
    public ICheckBoxShape Item { get; }
    public CheckBoxCollection(IApplication application, object parent);
    public void AddCheckBox(ICheckBoxShape checkbox);
    public sealed virtual ICheckBoxShape get_Item(int index);
    public sealed virtual ICheckBoxShape get_Item(string name);
    public sealed virtual ICheckBoxShape AddCheckBox(int row, int column, int height, int width);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.CollectionBase`1 : object {
    private List`1<T> m_arrItems;
    public int Capacity { get; public set; }
    public int Count { get; }
    protected internal List`1<T> InnerList { get; }
    protected IList`1<T> List { get; }
    public T Item { get; public set; }
    public bool IsReadOnly { get; }
    public CollectionBase`1(int capacity);
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    protected internal List`1<T> get_InnerList();
    protected IList`1<T> get_List();
    public sealed virtual T get_Item(int i);
    public sealed virtual void set_Item(int i, T value);
    public sealed virtual void Clear();
    public sealed virtual void Insert(int index, T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnInsert(int index, T value);
    protected virtual void OnInsertComplete(int index, T value);
    protected virtual void OnRemove(int index, T value);
    protected virtual void OnRemoveComplete(int index, T value);
    protected virtual void OnSet(int index, T oldValue, T newValue);
    protected virtual void OnSetComplete(int index, T oldValue, T newValue);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual int IndexOf(T item);
    public virtual void Add(T item);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Syncfusion.XlsIO.Implementation.Collections.CollectionBaseEx`1 : CollectionBase`1<T> {
    private IApplication m_appl;
    private object m_parent;
    private bool m_bSkipEvents;
    [ThreadStaticAttribute]
private static Dictionary`2<string, int> m_dictCollectionsMaxValues;
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    [CompilerGeneratedAttribute]
private CollectionClear<T> Clearing;
    [CompilerGeneratedAttribute]
private CollectionClear<T> Cleared;
    [CompilerGeneratedAttribute]
private CollectionChange<T> Inserting;
    [CompilerGeneratedAttribute]
private CollectionChange<T> Inserted;
    [CompilerGeneratedAttribute]
private CollectionChange<T> Removing;
    [CompilerGeneratedAttribute]
private CollectionChange<T> Removed;
    [CompilerGeneratedAttribute]
private CollectionSet<T> Setting;
    [CompilerGeneratedAttribute]
private CollectionSet<T> Set;
    public IApplication Application { get; }
    public object Parent { get; }
    public bool QuietMode { get; public set; }
    protected ApplicationImpl AppImplementation { get; }
    internal static Dictionary`2<string, int> DictCollectionsMaxValues { get; }
    public CollectionBaseEx`1(IApplication application, object parent);
    [DebuggerStepThroughAttribute]
public sealed virtual IApplication get_Application();
    [DebuggerStepThroughAttribute]
public sealed virtual object get_Parent();
    public bool get_QuietMode();
    public void set_QuietMode(bool value);
    [DebuggerStepThroughAttribute]
protected ApplicationImpl get_AppImplementation();
    internal static Dictionary`2<string, int> get_DictCollectionsMaxValues();
    [CompilerGeneratedAttribute]
public void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Clearing(CollectionClear<T> value);
    [CompilerGeneratedAttribute]
public void remove_Clearing(CollectionClear<T> value);
    [CompilerGeneratedAttribute]
public void add_Cleared(CollectionClear<T> value);
    [CompilerGeneratedAttribute]
public void remove_Cleared(CollectionClear<T> value);
    [CompilerGeneratedAttribute]
public void add_Inserting(CollectionChange<T> value);
    [CompilerGeneratedAttribute]
public void remove_Inserting(CollectionChange<T> value);
    [CompilerGeneratedAttribute]
public void add_Inserted(CollectionChange<T> value);
    [CompilerGeneratedAttribute]
public void remove_Inserted(CollectionChange<T> value);
    [CompilerGeneratedAttribute]
public void add_Removing(CollectionChange<T> value);
    [CompilerGeneratedAttribute]
public void remove_Removing(CollectionChange<T> value);
    [CompilerGeneratedAttribute]
public void add_Removed(CollectionChange<T> value);
    [CompilerGeneratedAttribute]
public void remove_Removed(CollectionChange<T> value);
    [CompilerGeneratedAttribute]
public void add_Setting(CollectionSet<T> value);
    [CompilerGeneratedAttribute]
public void remove_Setting(CollectionSet<T> value);
    [CompilerGeneratedAttribute]
public void add_Set(CollectionSet<T> value);
    [CompilerGeneratedAttribute]
public void remove_Set(CollectionSet<T> value);
    private void RaiseChangedEvent();
    protected virtual void OnClear();
    protected virtual void OnClearComplete();
    protected virtual void OnInsert(int index, T value);
    protected virtual void OnInsertComplete(int index, T value);
    protected virtual void OnRemove(int index, T value);
    protected virtual void OnRemoveComplete(int index, T value);
    protected virtual void OnSet(int index, T oldValue, T newValue);
    protected virtual void OnSetComplete(int index, T oldValue, T newValue);
    public object FindParent(Type parentType);
    public object FindParent(Type parentType, bool bCheckSubclasses);
    public void SetParent(object parent);
    public virtual object Clone(object parent);
    public void EnsureCapacity(int size);
    protected void ClearMaxValues();
    public static string GenerateDefaultName(ICollection`1<T> namesCollection, string strStart);
    public static string GenerateDefaultName(ICollection namesCollection, string strStart);
    internal static int GenerateID(ICollection`1<T> shapeCollection);
    public static string GenerateDefaultName(string strStart, ICollection[] arrCollections);
    public static void ChangeName(IDictionary hashNames, ValueChangedEventArgs e);
}
public class Syncfusion.XlsIO.Implementation.Collections.CollectionChangeEventArgs`1 : EventArgs {
    private int m_iIndex;
    private T m_value;
    public int Index { get; }
    public T Value { get; }
    public CollectionChangeEventArgs`1(int index, T value);
    public int get_Index();
    public T get_Value();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.ComboBoxCollection : CollectionBaseEx`1<IComboBoxShape> {
    private WorksheetBaseImpl m_sheet;
    public IComboBoxShape Item { get; }
    public ComboBoxCollection(IApplication application, object parent);
    public sealed virtual IComboBoxShape AddComboBox(int row, int column, int height, int width);
    public sealed virtual IComboBoxShape get_Item(string name);
    public void AddComboBox(IComboBoxShape combobox);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.CommentsCollection : CollectionBaseEx`1<CommentShapeImpl> {
    private static int DEFAULT_WIDTH;
    private static int DEFAULT_HEIGHT;
    private static int DEF_COLUMNS_COUNT;
    private static int DEF_ROWS_COUNT;
    private WorksheetImpl m_sheet;
    private Dictionary`2<long, ICommentShape> m_hashComments;
    private bool m_bReRegister;
    public int Count { get; }
    public ICommentShape Item { get; }
    public ICommentShape Item { get; }
    public ICommentShape Item { get; }
    public bool ReRegisterOnAccess { get; public set; }
    private Dictionary`2<long, ICommentShape> HashComments { get; }
    public CommentsCollection(IApplication application, object parent);
    public sealed virtual int get_Count();
    public sealed virtual ICommentShape get_Item(int index);
    public sealed virtual ICommentShape get_Item(int iRow, int iColumn);
    public sealed virtual ICommentShape get_Item(string name);
    public bool get_ReRegisterOnAccess();
    public void set_ReRegisterOnAccess(bool value);
    private Dictionary`2<long, ICommentShape> get_HashComments();
    public sealed virtual void Clear();
    public ICommentShape AddComment(IRange parentRange);
    public ICommentShape AddComment(int iRow, int iColumn);
    public ICommentShape AddComment(int iRow, int iColumn, bool bIsParseOptions);
    internal void AddComment(ICommentShape comment);
    private void SetParents();
    public void Remove(ICommentShape comment);
    internal void InnerRemove(ICommentShape comment);
    internal void ReRegisterComments();
    protected virtual void OnClear();
    protected virtual void OnInsertComplete(int index, CommentShapeImpl value);
    protected virtual void OnRemoveComplete(int index, CommentShapeImpl value);
    protected virtual void OnClearComplete();
    protected virtual void OnSetComplete(int index, CommentShapeImpl oldValue, CommentShapeImpl newValue);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.CondFormatCollectionWrapper : CommonWrapper {
    private ICombinedRange m_range;
    private ConditionalFormats m_condFormats;
    private List`1<IConditionalFormat> m_arrConditions;
    private bool m_isGetCF;
    public int Count { get; }
    public IConditionalFormat Item { get; }
    public IApplication Application { get; }
    public object Parent { get; }
    private WorksheetConditionalFormats SheetFormats { get; }
    internal ConditionalFormats ConditionalFormats { get; }
    internal IRange Range { get; }
    public CondFormatCollectionWrapper(ICombinedRange range);
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    public sealed virtual int get_Count();
    public sealed virtual IConditionalFormat get_Item(int index);
    public sealed virtual IConditionalFormat AddCondition();
    public sealed virtual void Remove();
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    private void CreateReadOnlyFormats(bool IsGetCF);
    private void CreateWriteableFormats();
    private void CreateConditionWrappers();
    public ConditionalFormatImpl GetCondition(int iCondition);
    private WorksheetConditionalFormats get_SheetFormats();
    internal ConditionalFormats get_ConditionalFormats();
    internal IRange get_Range();
}
public class Syncfusion.XlsIO.Implementation.Collections.ConditionalFormats : CollectionBaseEx`1<IConditionalFormat> {
    public static int MAXIMUM_CF_NUMBER;
    private CondFMTRecord m_format;
    private CondFmt12Record m_condFMT12;
    private WorksheetImpl m_sheet;
    private RangesOperations m_rangesOperations;
    private int m_cfCount;
    private int m_acfCount;
    private int m_totalCFCount;
    private int m_cfIndex;
    private bool m_futureRecord;
    private bool m_pivot;
    private bool m_isCopying;
    public WorksheetImpl sheet { get; }
    private int MaxCFNumber { get; }
    public bool IsEmpty { get; }
    internal bool Pivot { get; internal set; }
    internal bool IsCopying { get; internal set; }
    public string Address { get; }
    public string AddressR1C1 { get; }
    [CLSCompliantAttribute("False")]
public TAddr EnclosedRange { get; public set; }
    internal List`1<Rectangle> CellsRectangleList { get; }
    public String[] CellsList { get; }
    public List`1<Rectangle> CellRectangles { get; }
    public CondFMTRecord CondFMTRecord { get; public set; }
    public CondFmt12Record CondFMT12Record { get; public set; }
    public bool IsFutureRecord { get; public set; }
    public ConditionalFormats(IApplication application, object parent);
    public ConditionalFormats(IApplication application, object parent, ConditionalFormats toClone);
    public ConditionalFormats(IApplication application, object parent, ConditionalFormats toClone, bool bCopy);
    [CLSCompliantAttribute("False")]
public ConditionalFormats(IApplication application, object parent, CondFMTRecord format, IList formats, IList CFExRecords);
    [CLSCompliantAttribute("False")]
public ConditionalFormats(IApplication application, object parent, CondFmt12Record format, IList formats);
    public WorksheetImpl get_sheet();
    private void FindParent();
    private int get_MaxCFNumber();
    public sealed virtual IConditionalFormat AddCondition();
    public sealed virtual void Remove();
    public void RemoveAt();
    private void CopyAdvancedConditionalFormatting(ConditionalFormatImpl format);
    [CLSCompliantAttribute("False")]
public int Serialize(OffsetArrayList records, ushort index, int priority);
    private bool CheckIfValidRange(Rectangle rect);
    private CondFmt12Record SerializeACF(ConditionalFormatImpl condFormat, CondFmt12Record temp_condfmt12, int priority, OffsetArrayList records, ushort index, int ruleCount);
    private CondFMTRecord SerializeCF(ConditionalFormatImpl condFormat, CondFMTRecord temp_condfmt, int priority, OffsetArrayList records, ushort index, int CFIndex);
    [CLSCompliantAttribute("False")]
public void AddFromRecord(CFRecord cf);
    [CLSCompliantAttribute("False")]
public void AddFromCF12Record(CF12Record cf12);
    [CLSCompliantAttribute("False")]
public void AddFromCFEXRecord(CFExRecord cfEx);
    public bool CompareTo(ConditionalFormats formats);
    public bool CompareFormats(IConditionalFormat firstFormat, IConditionalFormat secondFormat);
    public void AddCells(ConditionalFormats formats);
    public void AddCellsCondFMT12(ConditionalFormats formats);
    public bool Contains(Rectangle[] arrRanges);
    internal bool EqualConditionalFormat(Rectangle[] arrRanges);
    public int ContainsCount(Rectangle range);
    public void AddCells(IList`1<Rectangle> arrCells);
    public void AddRange(IRange range);
    public void AddRange(Rectangle rect);
    public void Remove(Rectangle[] arrRanges);
    internal void Remove(Rectangle[] arrRanges, bool isCF);
    public void ClearCells();
    public void ConvertToExcel97to03Version();
    public ConditionalFormats GetPart(int row, int column, int rowCount, int columnCount, bool remove, int rowIncrement, int columnIncrement, object newParent);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    internal void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect, WorkbookImpl workbook, List`1<string> namedRangeNames);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual object Clone(object parent);
    public bool get_IsEmpty();
    internal bool get_Pivot();
    internal void set_Pivot(bool value);
    internal bool get_IsCopying();
    internal void set_IsCopying(bool value);
    public string get_Address();
    internal string GetEnclosedRangeAddress(bool isFirstCell);
    public string get_AddressR1C1();
    public TAddr get_EnclosedRange();
    public void set_EnclosedRange(TAddr value);
    internal List`1<Rectangle> get_CellsRectangleList();
    public String[] get_CellsList();
    public List`1<Rectangle> get_CellRectangles();
    public CondFMTRecord get_CondFMTRecord();
    public void set_CondFMTRecord(CondFMTRecord value);
    public CondFmt12Record get_CondFMT12Record();
    public void set_CondFMT12Record(CondFmt12Record value);
    public bool get_IsFutureRecord();
    public void set_IsFutureRecord(bool value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.CustomDocumentProperties : CollectionBaseEx`1<DocumentPropertyImpl> {
    public static string CustomGuidString;
    public static Guid GuidCustom;
    internal Dictionary`2<string, DocumentPropertyImpl> m_propertiesHash;
    public IDocumentProperty Item { get; }
    private IDocumentProperty Syncfusion.XlsIO.ICustomDocumentProperties.Item { get; }
    public CustomDocumentProperties(IApplication application, object parent);
    private static CustomDocumentProperties();
    public sealed virtual IDocumentProperty get_Item(string strName);
    private sealed virtual override IDocumentProperty Syncfusion.XlsIO.ICustomDocumentProperties.get_Item(int iIndex);
    public IDocumentProperty GetProperty(string strName);
    public sealed virtual void Remove(string strName);
    public IDocumentProperty Add(string strName);
    public sealed virtual bool Contains(string strName);
    [CLSCompliantAttribute("False")]
public void Serialize(PropertySection section);
    [CLSCompliantAttribute("False")]
public void Parse(DocumentPropertyCollection properties);
    protected virtual void OnClearComplete();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.CustomXmlPartCollection : CollectionBaseEx`1<ICustomXmlPart> {
    private Dictionary`2<string, ICustomXmlPart> m_propertiesHash;
    private WorkbookImpl m_book;
    private object m_parent;
    private int Syncfusion.XlsIO.ICustomXmlPartCollection.Count { get; }
    public ICustomXmlPart Item { get; }
    public int Count { get; }
    public CustomXmlPartCollection(IApplication application, object parent);
    private sealed virtual override int Syncfusion.XlsIO.ICustomXmlPartCollection.get_Count();
    public sealed virtual ICustomXmlPart get_Item(int index);
    public int get_Count();
    public sealed virtual ICustomXmlPartCollection Clone();
    public sealed virtual ICustomXmlPart GetById(string id);
    private sealed virtual override void Syncfusion.XlsIO.ICustomXmlPartCollection.RemoveAt(int index);
    private sealed virtual override void Syncfusion.XlsIO.ICustomXmlPartCollection.Clear();
    public sealed virtual ICustomXmlPart Add(ICustomXmlPart customXmlPart);
    public sealed virtual ICustomXmlPart Add(string id, Byte[] XmlData);
    public sealed virtual ICustomXmlPart Add(string id);
    public void AddLocal(ICustomXmlPart name, bool bAddInGlobalNamesHash);
    protected virtual void OnInsertComplete(int index, ICustomXmlPart customXmlPart);
    private void SetParent();
    public void Remove(string id);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.DataValidationCollection : CollectionBaseEx`1<DataValidationImpl> {
    private DValRecord m_dvalRecord;
    private DataValidationTable m_parentTable;
    private Dictionary`2<DVRecord, DataValidationImpl> m_hashRecords;
    private List`1<BiffRecordRaw> m_arrStorage;
    private bool m_bIsDelay;
    public List`1<BiffRecordRaw> DataValidations { get; }
    public int PromptBoxHPosition { get; public set; }
    public int PromptBoxVPosition { get; public set; }
    public bool IsPromptBoxVisible { get; public set; }
    public bool IsPromptBoxPositionFixed { get; public set; }
    public WorkbookImpl Workbook { get; }
    public WorksheetImpl Worksheet { get; }
    public DataValidationTable ParentTable { get; }
    [CLSCompliantAttribute("False")]
public DValRecord Record { get; }
    public DataValidationImpl Item { get; }
    public int ShapesCount { get; }
    internal Dictionary`2<DVRecord, DataValidationImpl> HashRecords { get; }
    public DataValidationCollection(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public DataValidationCollection(IApplication application, object parent, DValRecord dval);
    public DataValidationCollection(IApplication application, object parent, List`1<BiffRecordRaw> arrRecords, Int32& iOffset);
    private void SetParents();
    public DataValidationImpl Add(DataValidationImpl dv);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private void Parse(List`1<BiffRecordRaw> arrRecords, Int32& iOffset, bool bIsParse);
    public void Remove(DataValidationImpl dv);
    public void Remove(Rectangle[] rectangles);
    public virtual object Clone(object parent);
    public DataValidationImpl FindByCellIndex(long cellIndex);
    public void UpdateNamedRangeIndexes(Int32[] arrNewIndex);
    public void UpdateNamedRangeIndexes(IDictionary`2<int, int> dicNewIndex);
    [CLSCompliantAttribute("False")]
public DataValidationImpl AddDVRecord(DVRecord dv);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    internal void UpdateRecords(List`1<BiffRecordRaw> arrRecords, Int32& iOffset, int iCount);
    private DataValidationImpl AddLocalRecord(DVRecord dv);
    public List`1<BiffRecordRaw> get_DataValidations();
    public int get_PromptBoxHPosition();
    public void set_PromptBoxHPosition(int value);
    public int get_PromptBoxVPosition();
    public void set_PromptBoxVPosition(int value);
    public bool get_IsPromptBoxVisible();
    public void set_IsPromptBoxVisible(bool value);
    public bool get_IsPromptBoxPositionFixed();
    public void set_IsPromptBoxPositionFixed(bool value);
    public WorkbookImpl get_Workbook();
    public WorksheetImpl get_Worksheet();
    public DataValidationTable get_ParentTable();
    public DValRecord get_Record();
    public DataValidationImpl get_Item(int index);
    public int get_ShapesCount();
    internal Dictionary`2<DVRecord, DataValidationImpl> get_HashRecords();
    internal void AddFrom(DataValidationCollection dvCollection, int iSourceRow, int iSourceColumn, int iDestRow, int iDestColumn, int iRowCount, int iColumnCount);
    private void DelayedParse();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.DataValidationTable : CollectionBaseEx`1<DataValidationCollection> {
    private WorksheetImpl m_worksheet;
    private Dictionary`2<DValRecord, DataValidationCollection> m_hashDVals;
    public WorksheetImpl Worksheet { get; }
    public WorkbookImpl Workbook { get; }
    public DataValidationCollection Item { get; }
    public int ShapesCount { get; }
    public DataValidationTable(IApplication application, object parent);
    public DataValidationTable(IApplication application, object parent, List`1<BiffRecordRaw> arrRecords, Int32& iOffset);
    private void SetParents();
    public void Parse(List`1<BiffRecordRaw> arrRecords, Int32& iOffset);
    public DataValidationCollection Add(DataValidationCollection dval);
    [CLSCompliantAttribute("False")]
public DataValidationCollection Add(DValRecord dval);
    public virtual object Clone(object parent);
    public DataValidationImpl FindDataValidation(long cellIndex);
    public DataValidationImpl FindDataValidation(int row, int column);
    public void UpdateNamedRangeIndexes(Int32[] arrNewIndex);
    public void UpdateNamedRangeIndexes(IDictionary`2<int, int> dicNewIndex);
    public void Remove(Rectangle[] rectangles);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    internal void CopyMoveTo(DataValidationTable destDataValidation, int iSourceRow, int iSourceColumn, int iDestRow, int iDestColumn, int iRowCount, int iColumnCount, bool isMove);
    private void Add(DataValidationCollection dvCollection, int iSourceRow, int iSourceColumn, int iDestRow, int iDestColumn, int iRowCount, int iColumnCount);
    private KeyValuePair`2<DValRecord, DataValidationCollection> GetFirstKeyValuePair(Dictionary`2<DValRecord, DataValidationCollection> collection);
    protected virtual void OnClearComplete();
    public WorksheetImpl get_Worksheet();
    public WorkbookImpl get_Workbook();
    public DataValidationCollection get_Item(int index);
    public int get_ShapesCount();
}
public class Syncfusion.XlsIO.Implementation.Collections.ErrorIndicatorsCollection : CollectionBaseEx`1<ErrorIndicatorImpl> {
    private Dictionary`2<ExcelIgnoreError, ErrorIndicatorImpl> m_dicErrorIndicators;
    public ErrorIndicatorsCollection(IApplication application, object parent);
    public ErrorIndicatorImpl Add(ErrorIndicatorImpl errorIndicator);
    public ErrorIndicatorImpl Find(Rectangle[] arrRanges);
    public void Remove(Rectangle[] rect);
    public virtual object Clone(object parent);
    internal Dictionary`2<long, ErrorIndicatorImpl> GetErrorIndicators(Rectangle fromRect);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.ExtendedFormatsCollection : CollectionBaseEx`1<ExtendedFormatImpl> {
    private static int DEF_DEFAULT_COUNT;
    private Dictionary`2<ExtendedFormatImpl, ExtendedFormatImpl> m_hashFormats;
    public ExtendedFormatImpl Item { get; }
    public WorkbookImpl ParentWorkbook { get; }
    public ExtendedFormatsCollection(IApplication application, object parent);
    public ExtendedFormatImpl get_Item(int index);
    public WorkbookImpl get_ParentWorkbook();
    public ExtendedFormatImpl Add(ExtendedFormatImpl format);
    internal ExtendedFormatImpl Add(ExtendedFormatImpl format, int count);
    public ExtendedFormatImpl ForceAdd(ExtendedFormatImpl format);
    public int Import(ExtendedFormatImpl format, Dictionary`2<int, int> hashExtFormatIndexes);
    public Dictionary`2<int, int> Merge(IList`1<ExtendedFormatImpl> arrXFormats, Dictionary`2& dicFontIndexes);
    public Dictionary`2<int, int> Merge(IList`1<ExtendedFormatImpl> arrXFormats);
    public void AddIndex(Dictionary`2<int, object> hashToAdd, IList`1<ExtendedFormatImpl> arrXFormats, int index);
    public ExtendedFormatImpl GatherTwoFormats(int iFirstXF, int iEndXF);
    public Dictionary`2<int, int> RemoveAt(int xfIndex);
    public virtual object Clone(object parent);
    public void SetMaxCount(int maxCount);
    internal void SetXF(int iXFIndex, ExtendedFormatImpl format);
    private Dictionary`2<int, int> Merge(IList`1<ExtendedFormatImpl> arrXFormats, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<int, int> dicFormatIndexes);
    private void Merge(ExtendedFormatImpl format, Dictionary`2<int, int> hashResult, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<int, int> dicFormatIndexes);
    private void MarkUsedFormats(IList`1<ExtendedFormatImpl> allFormats, WorkbookImpl sourceBook);
    private Dictionary`2<int, int> GetFontIndexes(IList`1<ExtendedFormatImpl> arrXFormats);
    private Dictionary`2<int, int> GetFormatIndexes(IList`1<ExtendedFormatImpl> arrXFormats);
    protected virtual void OnClearComplete();
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.ExternBookCollection : CollectionBaseEx`1<ExternWorkbookImpl> {
    private static int StdDocumentOptions;
    private static int DEF_NO_SHEET_INDEX;
    internal static string DEF_WRONG_URL_NAME;
    private WorkbookImpl m_book;
    internal Dictionary`2<string, ExternWorkbookImpl> m_hashUrlToBook;
    private Dictionary`2<string, ExternWorkbookImpl> m_hashShortNameToBook;
    public ExternWorkbookImpl Item { get; }
    public ExternWorkbookImpl Item { get; }
    public WorkbookImpl ParentWorkbook { get; }
    public ExternBookCollection(IApplication application, object parent);
    public ExternWorkbookImpl get_Item(int index);
    public ExternWorkbookImpl get_Item(string strUrl);
    public WorkbookImpl get_ParentWorkbook();
    [CLSCompliantAttribute("False")]
public int Parse(BiffRecordRaw[] arrData, int iOffset);
    [CLSCompliantAttribute("False")]
public void Parse(BiffReader reader, IDecryptor decryptor);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public int Add(ExternWorkbookImpl book);
    public int Add(string fileName);
    public int Add(string fileName, bool bAddInFunctions);
    public int Add(string filePath, string fileName, List`1<string> sheets, String[] names);
    public int AddDDEFile(string fileName);
    public int InsertSelfSupbook();
    public bool ContainsExternName(string strName);
    public bool ContainsExternName(string strName, Int32& iBookIndex, Int32& iNameIndex);
    public int GetNameIndexes(string strName, Int32& iRefIndex);
    public ExternWorkbookImpl GetBookByShortName(string strShortName);
    private void SetParents();
    public int GetFirstInternalIndex();
    protected virtual void OnInsertComplete(int index, ExternWorkbookImpl value);
    public Dictionary`2<int, int> AddCopy(ExternBookCollection subBooks);
    internal ExternWorkbookImpl FindOrAdd(string strBook, string strBookPath);
    internal void Dispose();
    internal int Add(string fileName, WorkbookImpl book, IRange sourceRange);
    internal bool Contains(ExternWorkbookImpl externBook);
    internal int IndexOf(ExternWorkbookImpl externBook);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.ExternNamesCollection : CollectionBaseEx`1<ExternNameImpl> {
    private ExternWorkbookImpl m_externBook;
    private List`1<ExternNameImpl> m_hashNames;
    private SortedList`2<int, object> m_lstToRemove;
    public ExternNameImpl Item { get; }
    public ExternNameImpl Item { get; }
    public ExternWorkbookImpl ParentWorkbook { get; }
    public ExternNamesCollection(IApplication application, object parent);
    private void SetParents();
    public ExternNameImpl get_Item(int index);
    public ExternNameImpl get_Item(string name);
    public ExternWorkbookImpl get_ParentWorkbook();
    [CLSCompliantAttribute("False")]
public int Add(ExternNameRecord name);
    public int Add(string name);
    public int Add(string name, bool isAddIn);
    public bool Contains(string name);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public int GetNameIndex(string strName);
    public int GetNewIndex(int iNameIndex);
    public virtual object Clone(object parent);
    private int Add(ExternNameImpl name);
    private void ExternNamesCollection_Removed(object sender, CollectionChangeEventArgs`1<ExternNameImpl> args);
    private void ExternNamesCollection_Inserted(object sender, CollectionChangeEventArgs`1<ExternNameImpl> args);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.FontsCollection : CollectionBaseEx`1<FontImpl> {
    private WorkbookImpl m_book;
    private Dictionary`2<FontImpl, FontImpl> m_hashFonts;
    public IFont Item { get; }
    public FontsCollection(IApplication application, object parent);
    public IFont get_Item(int index);
    [CLSCompliantAttribute("False")]
public FontImpl Add(FontImpl font, FontRecord record);
    public IFont Add(IFont font);
    public void InsertDefaultFonts();
    private void SetParents();
    public void ForceAdd(FontImpl font);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public bool Contains(FontImpl font);
    public Dictionary`2<int, int> AddRange(FontsCollection arrFonts);
    public Dictionary`2<int, int> AddRange(ICollection`1<int> colFonts, FontsCollection sourceFonts);
    private int AddCopy(FontImpl font);
    protected virtual void OnClearComplete();
    public FontsCollection Clone(WorkbookImpl parent);
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.FormatsCollection : CommonObject {
    public static string DecimalSeparator;
    public static string ThousandSeparator;
    public static string Percentage;
    public static string Fraction;
    public static string Date;
    public static string Time;
    public static string Exponent;
    public static string Minus;
    public static string Currency;
    public static string DEFAULT_EXPONENTAIL;
    private String[] AdditionalDateFormats;
    internal static int DEF_FIRST_CUSTOM_INDEX;
    internal String[] DEF_FORMAT_STRING;
    private String[] DEF_CURRENCY_FORMAT_STRING;
    private String[] DEF_CURRENCY_SYMBOL;
    private static int CountryJapan;
    internal static int MAX_FORMATS_COUNT;
    private TypedSortedListEx`2<int, FormatImpl> m_rawFormats;
    private Dictionary`2<string, FormatImpl> m_hashFormatStrings;
    private FormatParserImpl m_parser;
    private Dictionary`2<string, Int32[]> m_formatIndexes;
    private bool m_hasNumFormats;
    private Dictionary`2<string, string> m_currencyFormatStrings;
    [CLSCompliantAttribute("False")]
public FormatImpl Item { get; }
    internal bool HasNumberFormats { get; internal set; }
    [CLSCompliantAttribute("False")]
public FormatImpl Item { get; }
    public FormatParserImpl Parser { get; }
    internal Dictionary`2<string, string> CurrencyFormatStrings { get; }
    public bool IsReadOnly { get; }
    public ICollection Values { get; }
    public ICollection Keys { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public FormatsCollection(IApplication application, object parent);
    public FormatImpl get_Item(int iIndex);
    internal bool get_HasNumberFormats();
    internal void set_HasNumberFormats(bool value);
    public FormatImpl get_Item(string strFormat);
    public FormatParserImpl get_Parser();
    internal Dictionary`2<string, string> get_CurrencyFormatStrings();
    public int Parse(IList data, int iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void Add(FormatRecord format);
    internal void Add(int formatId, string formatString);
    private void Register(FormatImpl format);
    public FormatsCollection Clone(object parent);
    public int CreateFormat(string formatString);
    internal string GetCustomizedString(string formatString);
    private bool CheckValidateDataTimeNumberFormat(int index, List`1<char> formatStringCharArray);
    private string CheckForCulturePattern(string formatString);
    private List`1<string> CheckforColorPattern(string formatString);
    private string GetFormattedStringFormats(string stringFormats);
    private string ReplaceStringFormats(string stringFormats);
    public bool ContainsFormat(string formatString);
    public int FindOrCreateFormat(string formatString);
    public void InsertDefaultFormats();
    public List`1<FormatRecord> GetUsedFormats(ExcelVersion version);
    public Dictionary`2<int, int> Merge(FormatsCollection source);
    public Dictionary`2<int, int> AddRange(IDictionary dicIndexes, FormatsCollection source);
    private int AddCopy(FormatImpl format);
    private int AddCopy(FormatRecord format);
    private void AddJapaneseFormats();
    internal void AddDefaultFormats(int country);
    internal void FillFormatIndexes();
    internal string GetDateFormat(string strValue);
    private string GetTimeFormat(string strValue);
    private bool HasSecond(string strValue);
    private bool IsStandardTimeFormat(string strValue);
    internal string GetNumberFormat(string strValue);
    private string ParseNumberFormat(string strValue);
    private bool CheckIsBetweenDate(int index, List`1<char> formatStringCharArray);
    public bool get_IsReadOnly();
    public IEnumerator`1<KeyValuePair`2<int, FormatImpl>> GetEnumerator();
    public void Remove(int key);
    public bool Contains(int key);
    public void Clear();
    public ICollection get_Values();
    public ICollection get_Keys();
    public bool get_IsFixedSize();
    public bool get_IsSynchronized();
    public int get_Count();
    public void CopyTo(Array array, int index);
    public object get_SyncRoot();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.BorderGroup : CommonObject {
    private ExcelBordersIndex m_index;
    private BordersGroup m_bordersGroup;
    public IBorder Item { get; }
    public int Count { get; }
    public ExcelKnownColors Color { get; public set; }
    public ColorObject ColorObject { get; }
    public Color ColorRGB { get; public set; }
    public ExcelLineStyle LineStyle { get; public set; }
    public bool ShowDiagonalLine { get; public set; }
    public BorderGroup(IApplication application, object parent, ExcelBordersIndex index);
    private void FindParents();
    public IBorder get_Item(int index);
    public int get_Count();
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LineStyle();
    public sealed virtual void set_LineStyle(ExcelLineStyle value);
    public sealed virtual bool get_ShowDiagonalLine();
    public sealed virtual void set_ShowDiagonalLine(bool value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.BordersGroup : CollectionBaseEx`1<object> {
    private StyleGroup m_style;
    public IBorders Item { get; }
    public int GroupCount { get; }
    public ExcelKnownColors Color { get; public set; }
    public Color ColorRGB { get; public set; }
    private int Syncfusion.XlsIO.IBorders.Count { get; }
    public IBorder Item { get; }
    public ExcelLineStyle LineStyle { get; public set; }
    public ExcelLineStyle Value { get; public set; }
    public BordersGroup(IApplication application, object parent);
    private void FindParents();
    public IBorders get_Item(int index);
    public int get_GroupCount();
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    private sealed virtual override int Syncfusion.XlsIO.IBorders.get_Count();
    public sealed virtual IBorder get_Item(ExcelBordersIndex Index);
    public sealed virtual ExcelLineStyle get_LineStyle();
    public sealed virtual void set_LineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_Value();
    public sealed virtual void set_Value(ExcelLineStyle value);
}
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.ConditionalFormatGroup : CommonObject {
    private int m_iIndex;
    private ConditionalFormatsGroup m_formats;
    public ExcelCFType FormatType { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public ExcelComparisonOperator Operator { get; public set; }
    public CFTimePeriods TimePeriodType { get; public set; }
    public string Text { get; public set; }
    public bool IsBold { get; public set; }
    public bool IsItalic { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool IsStrikeThrough { get; public set; }
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public string FirstFormula { get; public set; }
    public string FirstFormulaR1C1 { get; public set; }
    public string SecondFormula { get; public set; }
    public string SecondFormulaR1C1 { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color ColorRGB { get; public set; }
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern FillPattern { get; public set; }
    public bool IsSuperScript { get; public set; }
    public bool IsSubScript { get; public set; }
    public bool IsFontFormatPresent { get; public set; }
    public bool IsBorderFormatPresent { get; public set; }
    public bool IsPatternFormatPresent { get; public set; }
    public bool IsFontColorPresent { get; public set; }
    public bool IsPatternColorPresent { get; public set; }
    public bool IsBackgroundColorPresent { get; public set; }
    public bool IsLeftBorderModified { get; public set; }
    public bool IsRightBorderModified { get; public set; }
    public bool IsTopBorderModified { get; public set; }
    public bool IsBottomBorderModified { get; public set; }
    public IDataBar DataBar { get; }
    public IIconSet IconSet { get; }
    public IColorScale ColorScale { get; }
    public string NumberFormat { get; public set; }
    public bool StopIfTrue { get; public set; }
    public ITopBottom TopBottom { get; }
    public IAboveBelowAverage AboveBelowAverage { get; }
    public ConditionalFormatGroup(IApplication application, object parent, int index);
    private void FindParents();
    private void SynchronizeParentCollection();
    public sealed virtual ExcelCFType get_FormatType();
    public sealed virtual void set_FormatType(ExcelCFType value);
    public sealed virtual ExcelGradientStyle get_GradientStyle();
    public sealed virtual void set_GradientStyle(ExcelGradientStyle value);
    public sealed virtual ExcelGradientVariants get_GradientVariant();
    public sealed virtual void set_GradientVariant(ExcelGradientVariants value);
    public sealed virtual ExcelComparisonOperator get_Operator();
    public sealed virtual void set_Operator(ExcelComparisonOperator value);
    public sealed virtual CFTimePeriods get_TimePeriodType();
    public sealed virtual void set_TimePeriodType(CFTimePeriods value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual bool get_IsBold();
    public sealed virtual void set_IsBold(bool value);
    public sealed virtual bool get_IsItalic();
    public sealed virtual void set_IsItalic(bool value);
    public sealed virtual ExcelKnownColors get_FontColor();
    public sealed virtual void set_FontColor(ExcelKnownColors value);
    public sealed virtual Color get_FontColorRGB();
    public sealed virtual void set_FontColorRGB(Color value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual bool get_IsStrikeThrough();
    public sealed virtual void set_IsStrikeThrough(bool value);
    public sealed virtual ExcelKnownColors get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_LeftBorderColorRGB();
    public sealed virtual void set_LeftBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LeftBorderStyle();
    public sealed virtual void set_LeftBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_RightBorderColorRGB();
    public sealed virtual void set_RightBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_RightBorderStyle();
    public sealed virtual void set_RightBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_TopBorderColorRGB();
    public sealed virtual void set_TopBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_TopBorderStyle();
    public sealed virtual void set_TopBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_BottomBorderColorRGB();
    public sealed virtual void set_BottomBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_BottomBorderStyle();
    public sealed virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public sealed virtual string get_FirstFormula();
    public sealed virtual void set_FirstFormula(string value);
    public sealed virtual string get_FirstFormulaR1C1();
    public sealed virtual void set_FirstFormulaR1C1(string value);
    public sealed virtual string get_SecondFormula();
    public sealed virtual void set_SecondFormula(string value);
    public sealed virtual string get_SecondFormulaR1C1();
    public sealed virtual void set_SecondFormulaR1C1(string value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual ExcelKnownColors get_BackColor();
    public sealed virtual void set_BackColor(ExcelKnownColors value);
    public sealed virtual Color get_BackColorRGB();
    public sealed virtual void set_BackColorRGB(Color value);
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    public sealed virtual bool get_IsSuperScript();
    public sealed virtual void set_IsSuperScript(bool value);
    public sealed virtual bool get_IsSubScript();
    public sealed virtual void set_IsSubScript(bool value);
    public sealed virtual bool get_IsFontFormatPresent();
    public sealed virtual void set_IsFontFormatPresent(bool value);
    public sealed virtual bool get_IsBorderFormatPresent();
    public sealed virtual void set_IsBorderFormatPresent(bool value);
    public sealed virtual bool get_IsPatternFormatPresent();
    public sealed virtual void set_IsPatternFormatPresent(bool value);
    public sealed virtual bool get_IsFontColorPresent();
    public sealed virtual void set_IsFontColorPresent(bool value);
    public sealed virtual bool get_IsPatternColorPresent();
    public sealed virtual void set_IsPatternColorPresent(bool value);
    public sealed virtual bool get_IsBackgroundColorPresent();
    public sealed virtual void set_IsBackgroundColorPresent(bool value);
    public sealed virtual bool get_IsLeftBorderModified();
    public sealed virtual void set_IsLeftBorderModified(bool value);
    public sealed virtual bool get_IsRightBorderModified();
    public sealed virtual void set_IsRightBorderModified(bool value);
    public sealed virtual bool get_IsTopBorderModified();
    public sealed virtual void set_IsTopBorderModified(bool value);
    public sealed virtual bool get_IsBottomBorderModified();
    public sealed virtual void set_IsBottomBorderModified(bool value);
    public sealed virtual IDataBar get_DataBar();
    public sealed virtual IIconSet get_IconSet();
    public sealed virtual IColorScale get_ColorScale();
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual bool get_StopIfTrue();
    public sealed virtual void set_StopIfTrue(bool value);
    public sealed virtual ITopBottom get_TopBottom();
    public sealed virtual IAboveBelowAverage get_AboveBelowAverage();
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.ConditionalFormatsGroup : CommonObject {
    private RangeGroup m_range;
    public IConditionalFormats Item { get; }
    public int Count { get; }
    private int Syncfusion.XlsIO.IConditionalFormats.Count { get; }
    private IConditionalFormat Syncfusion.XlsIO.IConditionalFormats.Item { get; }
    public ConditionalFormatsGroup(IApplication application, object parent);
    private void FindParents();
    private void SynchronizeCollection();
    public IConditionalFormats get_Item(int index);
    public int get_Count();
    private sealed virtual override int Syncfusion.XlsIO.IConditionalFormats.get_Count();
    private sealed virtual override IConditionalFormat Syncfusion.XlsIO.IConditionalFormats.get_Item(int index);
    public sealed virtual IConditionalFormat AddCondition();
    public sealed virtual void Remove();
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.FontGroup : CommonObject {
    private StyleGroup m_styleGroup;
    public IFont Item { get; }
    public int Count { get; }
    public bool Bold { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color RGBColor { get; public set; }
    public bool Italic { get; public set; }
    public bool MacOSOutlineFont { get; public set; }
    public bool MacOSShadow { get; public set; }
    public double Size { get; public set; }
    public bool Strikethrough { get; public set; }
    public bool Subscript { get; public set; }
    public bool Superscript { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public string FontName { get; public set; }
    public ExcelFontVertialAlignment VerticalAlignment { get; public set; }
    public bool IsAutoColor { get; }
    public FontGroup(IApplication application, object parent);
    private void FindParents();
    public IFont get_Item(int index);
    public int get_Count();
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_RGBColor();
    public sealed virtual void set_RGBColor(Color value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual bool get_MacOSOutlineFont();
    public sealed virtual void set_MacOSOutlineFont(bool value);
    public sealed virtual bool get_MacOSShadow();
    public sealed virtual void set_MacOSShadow(bool value);
    public sealed virtual double get_Size();
    public sealed virtual void set_Size(double value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual bool get_Subscript();
    public sealed virtual void set_Subscript(bool value);
    public sealed virtual bool get_Superscript();
    public sealed virtual void set_Superscript(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual ExcelFontVertialAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelFontVertialAlignment value);
    public sealed virtual bool get_IsAutoColor();
    public sealed virtual Font GenerateNativeFont();
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
}
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.MigrantRangeGroup : RangeGroup {
    private IWorksheet sheet;
    public MigrantRangeGroup(IApplication application, object parent);
    public sealed virtual IRange Offset(int row, int column);
    public sealed virtual IRange Resize(int row, int column);
    public sealed virtual IEnumerator`1<IRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void ResetRowColumn(int iRow, int iColumn);
    public sealed virtual void SetValue(int value);
    public sealed virtual void SetValue(double value);
    public sealed virtual void SetValue(DateTime value);
    public sealed virtual void SetValue(bool value);
    public sealed virtual void SetValue(string value);
}
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.PageSetupGroup : CommonObject {
    private WorksheetGroup m_sheetGroup;
    public bool AutoFirstPageNumber { get; public set; }
    public int FitToPagesTall { get; public set; }
    public int FitToPagesWide { get; public set; }
    public bool PrintGridlines { get; public set; }
    public bool PrintHeadings { get; public set; }
    public string PrintArea { get; public set; }
    public string PrintTitleColumns { get; public set; }
    public string PrintTitleRows { get; public set; }
    public bool IsSummaryRowBelow { get; public set; }
    public bool IsSummaryColumnRight { get; public set; }
    public bool IsFitToPage { get; public set; }
    public bool BlackAndWhite { get; public set; }
    public double BottomMargin { get; public set; }
    public string CenterFooter { get; public set; }
    public Image CenterFooterImage { get; public set; }
    public string CenterHeader { get; public set; }
    public Image CenterHeaderImage { get; public set; }
    public bool CenterHorizontally { get; public set; }
    public bool CenterVertically { get; public set; }
    public int Copies { get; public set; }
    public bool Draft { get; public set; }
    public short FirstPageNumber { get; public set; }
    public double FooterMargin { get; public set; }
    public double HeaderMargin { get; public set; }
    public string LeftFooter { get; public set; }
    public Image LeftFooterImage { get; public set; }
    public string LeftHeader { get; public set; }
    public Image LeftHeaderImage { get; public set; }
    public double LeftMargin { get; public set; }
    public ExcelOrder Order { get; public set; }
    public ExcelPageOrientation Orientation { get; public set; }
    public ExcelPaperSize PaperSize { get; public set; }
    public ExcelPrintLocation PrintComments { get; public set; }
    public ExcelPrintErrors PrintErrors { get; public set; }
    public bool PrintNotes { get; public set; }
    public int PrintQuality { get; public set; }
    public string RightFooter { get; public set; }
    public string RightHeader { get; public set; }
    public Image RightFooterImage { get; public set; }
    public Image RightHeaderImage { get; public set; }
    public double RightMargin { get; public set; }
    public double TopMargin { get; public set; }
    public int Zoom { get; public set; }
    public bool AlignHFWithPageMargins { get; public set; }
    public bool DifferentFirstPageHF { get; public set; }
    public bool DifferentOddAndEvenPagesHF { get; public set; }
    public bool HFScaleWithDoc { get; public set; }
    public IPage EvenPage { get; }
    public IPage FirstPage { get; }
    public Image BackgoundImage { get; public set; }
    public PageSetupGroup(IApplication application, object parent);
    private void FindParents();
    public sealed virtual bool get_AutoFirstPageNumber();
    public sealed virtual void set_AutoFirstPageNumber(bool value);
    public sealed virtual int get_FitToPagesTall();
    public sealed virtual void set_FitToPagesTall(int value);
    public sealed virtual int get_FitToPagesWide();
    public sealed virtual void set_FitToPagesWide(int value);
    public sealed virtual bool get_PrintGridlines();
    public sealed virtual void set_PrintGridlines(bool value);
    public sealed virtual bool get_PrintHeadings();
    public sealed virtual void set_PrintHeadings(bool value);
    public sealed virtual string get_PrintArea();
    public sealed virtual void set_PrintArea(string value);
    public sealed virtual string get_PrintTitleColumns();
    public sealed virtual void set_PrintTitleColumns(string value);
    public sealed virtual string get_PrintTitleRows();
    public sealed virtual void set_PrintTitleRows(string value);
    public sealed virtual bool get_IsSummaryRowBelow();
    public sealed virtual void set_IsSummaryRowBelow(bool value);
    public sealed virtual bool get_IsSummaryColumnRight();
    public sealed virtual void set_IsSummaryColumnRight(bool value);
    public sealed virtual bool get_IsFitToPage();
    public sealed virtual void set_IsFitToPage(bool value);
    public sealed virtual bool get_BlackAndWhite();
    public sealed virtual void set_BlackAndWhite(bool value);
    public sealed virtual double get_BottomMargin();
    public sealed virtual void set_BottomMargin(double value);
    public sealed virtual string get_CenterFooter();
    public sealed virtual void set_CenterFooter(string value);
    public sealed virtual Image get_CenterFooterImage();
    public sealed virtual void set_CenterFooterImage(Image value);
    public sealed virtual string get_CenterHeader();
    public sealed virtual void set_CenterHeader(string value);
    public sealed virtual Image get_CenterHeaderImage();
    public sealed virtual void set_CenterHeaderImage(Image value);
    public sealed virtual bool get_CenterHorizontally();
    public sealed virtual void set_CenterHorizontally(bool value);
    public sealed virtual bool get_CenterVertically();
    public sealed virtual void set_CenterVertically(bool value);
    public sealed virtual int get_Copies();
    public sealed virtual void set_Copies(int value);
    public sealed virtual bool get_Draft();
    public sealed virtual void set_Draft(bool value);
    public sealed virtual short get_FirstPageNumber();
    public sealed virtual void set_FirstPageNumber(short value);
    public sealed virtual double get_FooterMargin();
    public sealed virtual void set_FooterMargin(double value);
    public sealed virtual double get_HeaderMargin();
    public sealed virtual void set_HeaderMargin(double value);
    public sealed virtual string get_LeftFooter();
    public sealed virtual void set_LeftFooter(string value);
    public sealed virtual Image get_LeftFooterImage();
    public sealed virtual void set_LeftFooterImage(Image value);
    public sealed virtual string get_LeftHeader();
    public sealed virtual void set_LeftHeader(string value);
    public sealed virtual Image get_LeftHeaderImage();
    public sealed virtual void set_LeftHeaderImage(Image value);
    public sealed virtual double get_LeftMargin();
    public sealed virtual void set_LeftMargin(double value);
    public sealed virtual ExcelOrder get_Order();
    public sealed virtual void set_Order(ExcelOrder value);
    public sealed virtual ExcelPageOrientation get_Orientation();
    public sealed virtual void set_Orientation(ExcelPageOrientation value);
    public sealed virtual ExcelPaperSize get_PaperSize();
    public sealed virtual void set_PaperSize(ExcelPaperSize value);
    public sealed virtual ExcelPrintLocation get_PrintComments();
    public sealed virtual void set_PrintComments(ExcelPrintLocation value);
    public sealed virtual ExcelPrintErrors get_PrintErrors();
    public sealed virtual void set_PrintErrors(ExcelPrintErrors value);
    public sealed virtual bool get_PrintNotes();
    public sealed virtual void set_PrintNotes(bool value);
    public sealed virtual int get_PrintQuality();
    public sealed virtual void set_PrintQuality(int value);
    public sealed virtual string get_RightFooter();
    public sealed virtual void set_RightFooter(string value);
    public sealed virtual string get_RightHeader();
    public sealed virtual void set_RightHeader(string value);
    public sealed virtual Image get_RightFooterImage();
    public sealed virtual void set_RightFooterImage(Image value);
    public sealed virtual Image get_RightHeaderImage();
    public sealed virtual void set_RightHeaderImage(Image value);
    public sealed virtual double get_RightMargin();
    public sealed virtual void set_RightMargin(double value);
    public sealed virtual double get_TopMargin();
    public sealed virtual void set_TopMargin(double value);
    public sealed virtual int get_Zoom();
    public sealed virtual void set_Zoom(int value);
    public sealed virtual bool get_AlignHFWithPageMargins();
    public sealed virtual void set_AlignHFWithPageMargins(bool value);
    public sealed virtual bool get_DifferentFirstPageHF();
    public sealed virtual void set_DifferentFirstPageHF(bool value);
    public sealed virtual bool get_DifferentOddAndEvenPagesHF();
    public sealed virtual void set_DifferentOddAndEvenPagesHF(bool value);
    public sealed virtual bool get_HFScaleWithDoc();
    public sealed virtual void set_HFScaleWithDoc(bool value);
    public sealed virtual IPage get_EvenPage();
    public sealed virtual IPage get_FirstPage();
    public sealed virtual Image get_BackgoundImage();
    public sealed virtual void set_BackgoundImage(Image value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.RangeGroup : CommonObject {
    protected int m_iFirstRow;
    protected int m_iFirstColumn;
    protected int m_iLastRow;
    protected int m_iLastColumn;
    private WorksheetGroup m_sheetGroup;
    private RichTextStringGroup m_richText;
    private RangeGroup m_rangeEnd;
    protected StyleGroup m_style;
    public int Count { get; }
    public IRange Item { get; }
    public WorkbookImpl Workbook { get; }
    public string HtmlString { get; public set; }
    public IHyperLinks Hyperlinks { get; }
    public string Address { get; }
    public string AddressLocal { get; }
    public string AddressGlobal { get; }
    public string AddressR1C1 { get; }
    public string AddressR1C1Local { get; }
    public bool Boolean { get; public set; }
    public IBorders Borders { get; }
    public IRange[] Cells { get; }
    public int Column { get; }
    public int ColumnGroupLevel { get; }
    public double ColumnWidth { get; public set; }
    private int Syncfusion.XlsIO.IRange.Count { get; }
    public DateTime DateTime { get; public set; }
    public string DisplayText { get; }
    public IRange End { get; }
    public IRange EntireColumn { get; }
    public IRange EntireRow { get; }
    public string Error { get; public set; }
    public string Formula { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public string FormulaArray { get; public set; }
    public string FormulaArrayR1C1 { get; public set; }
    public bool FormulaHidden { get; public set; }
    public DateTime FormulaDateTime { get; public set; }
    public bool HasDataValidation { get; }
    public bool HasBoolean { get; }
    public bool HasDateTime { get; }
    public bool HasFormulaBoolValue { get; }
    public bool HasFormulaErrorValue { get; }
    public bool HasFormulaDateTime { get; }
    public bool HasFormulaNumberValue { get; }
    public bool HasFormulaStringValue { get; }
    public bool HasFormula { get; }
    public bool HasFormulaArray { get; }
    public bool HasNumber { get; }
    public bool HasRichText { get; }
    public bool HasString { get; }
    public bool HasStyle { get; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public int IndentLevel { get; public set; }
    public bool IsBlank { get; }
    public bool IsBoolean { get; }
    public bool IsError { get; }
    public bool IsGroupedByColumn { get; }
    public bool IsGroupedByRow { get; }
    public bool IsInitialized { get; }
    public int LastColumn { get; }
    public int LastRow { get; }
    public double Number { get; public set; }
    public string NumberFormat { get; public set; }
    public int Row { get; }
    public int RowGroupLevel { get; }
    public double RowHeight { get; public set; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public IStyle CellStyle { get; public set; }
    public string CellStyleName { get; public set; }
    public string Text { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public string Value { get; public set; }
    public string CalculatedValue { get; }
    public object Value2 { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public IWorksheet Worksheet { get; }
    public IRange Item { get; public set; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IConditionalFormats ConditionalFormats { get; }
    public IDataValidation DataValidation { get; }
    public string FormulaStringValue { get; public set; }
    public double FormulaNumberValue { get; public set; }
    public bool FormulaBoolValue { get; public set; }
    public string FormulaErrorValue { get; public set; }
    public ICommentShape Comment { get; }
    public IThreadedComment ThreadedComment { get; }
    public IRichTextString RichText { get; }
    public bool IsMerged { get; }
    public IRange MergeArea { get; }
    public bool WrapText { get; public set; }
    public bool HasExternalFormula { get; }
    public ExcelIgnoreError IgnoreErrorOptions { get; public set; }
    public Nullable`1<bool> IsStringsPreserved { get; public set; }
    public Nullable`1<BuiltInStyles> BuiltInStyle { get; public set; }
    protected RangeGroup(IApplication application, object parent);
    public RangeGroup(IApplication application, object parent, int iFirstRow, int iFirstColumn);
    public RangeGroup(IApplication application, object parent, int iFirstRow, int iFirstColumn, int iLastRow, int iLastColumn);
    public RangeGroup(IApplication application, object parent, string name);
    public RangeGroup(IApplication application, object parent, string name, bool IsR1C1Notation);
    private void FindParents();
    private IRange GetRange(int iSheetIndex);
    public int get_Count();
    public IRange get_Item(int index);
    public WorkbookImpl get_Workbook();
    public sealed virtual string get_HtmlString();
    public sealed virtual void set_HtmlString(string value);
    public sealed virtual IHyperLinks get_Hyperlinks();
    public sealed virtual string get_Address();
    public sealed virtual string get_AddressLocal();
    public sealed virtual string get_AddressGlobal();
    public sealed virtual string get_AddressR1C1();
    public sealed virtual string get_AddressR1C1Local();
    public sealed virtual bool get_Boolean();
    public sealed virtual void set_Boolean(bool value);
    public sealed virtual IBorders get_Borders();
    public sealed virtual IRange[] get_Cells();
    public sealed virtual int get_Column();
    public sealed virtual int get_ColumnGroupLevel();
    public sealed virtual double get_ColumnWidth();
    public sealed virtual void set_ColumnWidth(double value);
    private sealed virtual override int Syncfusion.XlsIO.IRange.get_Count();
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    public sealed virtual string get_DisplayText();
    public sealed virtual IRange get_End();
    public sealed virtual IRange get_EntireColumn();
    public sealed virtual IRange Offset(int row, int column);
    public sealed virtual IRange Resize(int row, int colummn);
    public sealed virtual IRange get_EntireRow();
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual string get_Formula();
    public sealed virtual void set_Formula(string value);
    public sealed virtual string get_FormulaR1C1();
    public sealed virtual void set_FormulaR1C1(string value);
    public sealed virtual string get_FormulaArray();
    public sealed virtual void set_FormulaArray(string value);
    public sealed virtual string get_FormulaArrayR1C1();
    public sealed virtual void set_FormulaArrayR1C1(string value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual DateTime get_FormulaDateTime();
    public sealed virtual void set_FormulaDateTime(DateTime value);
    public sealed virtual bool get_HasDataValidation();
    public sealed virtual bool get_HasBoolean();
    public sealed virtual bool get_HasDateTime();
    public sealed virtual bool get_HasFormulaBoolValue();
    public sealed virtual bool get_HasFormulaErrorValue();
    public sealed virtual bool get_HasFormulaDateTime();
    public sealed virtual bool get_HasFormulaNumberValue();
    public sealed virtual bool get_HasFormulaStringValue();
    public sealed virtual bool get_HasFormula();
    public sealed virtual bool get_HasFormulaArray();
    public sealed virtual bool get_HasNumber();
    public sealed virtual bool get_HasRichText();
    public sealed virtual bool get_HasString();
    public sealed virtual bool get_HasStyle();
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_IsBlank();
    public sealed virtual bool get_IsBoolean();
    public sealed virtual bool get_IsError();
    public sealed virtual bool get_IsGroupedByColumn();
    public sealed virtual bool get_IsGroupedByRow();
    public sealed virtual bool get_IsInitialized();
    public sealed virtual int get_LastColumn();
    public sealed virtual int get_LastRow();
    public sealed virtual double get_Number();
    public sealed virtual void set_Number(double value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual int get_Row();
    public sealed virtual int get_RowGroupLevel();
    public sealed virtual double get_RowHeight();
    public sealed virtual void set_RowHeight(double value);
    public sealed virtual IRange[] get_Rows();
    public sealed virtual IRange[] get_Columns();
    public sealed virtual IStyle get_CellStyle();
    public sealed virtual void set_CellStyle(IStyle value);
    public sealed virtual string get_CellStyleName();
    public sealed virtual void set_CellStyleName(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual TimeSpan get_TimeSpan();
    public sealed virtual void set_TimeSpan(TimeSpan value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_CalculatedValue();
    public sealed virtual object get_Value2();
    public sealed virtual void set_Value2(object value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual IWorksheet get_Worksheet();
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual void set_Item(int row, int column, IRange value);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual IConditionalFormats get_ConditionalFormats();
    public sealed virtual IDataValidation get_DataValidation();
    public sealed virtual string get_FormulaStringValue();
    public sealed virtual void set_FormulaStringValue(string value);
    public sealed virtual double get_FormulaNumberValue();
    public sealed virtual void set_FormulaNumberValue(double value);
    public sealed virtual bool get_FormulaBoolValue();
    public sealed virtual void set_FormulaBoolValue(bool value);
    public sealed virtual string get_FormulaErrorValue();
    public sealed virtual void set_FormulaErrorValue(string value);
    public sealed virtual ICommentShape get_Comment();
    public sealed virtual IThreadedComment get_ThreadedComment();
    public sealed virtual IRichTextString get_RichText();
    public sealed virtual bool get_IsMerged();
    public sealed virtual IRange get_MergeArea();
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual bool get_HasExternalFormula();
    public sealed virtual ExcelIgnoreError get_IgnoreErrorOptions();
    public sealed virtual void set_IgnoreErrorOptions(ExcelIgnoreError value);
    public sealed virtual Nullable`1<bool> get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(Nullable`1<bool> value);
    public sealed virtual Nullable`1<BuiltInStyles> get_BuiltInStyle();
    public sealed virtual void set_BuiltInStyle(Nullable`1<BuiltInStyles> value);
    public sealed virtual IRange Activate();
    public sealed virtual IRange Activate(bool scroll);
    public sealed virtual IRange Group(ExcelGroupBy groupBy);
    public sealed virtual IRange Group(ExcelGroupBy groupBy, bool bCollapsed);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual void SubTotal(Int32[] groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual double Sum();
    public sealed virtual double Sum(bool considerDateAsNumber);
    public sealed virtual double Average();
    public sealed virtual double Average(bool considerDateAsNumber);
    public sealed virtual double Min();
    public sealed virtual double Min(bool considerDateAsNumber);
    public sealed virtual double Max();
    public sealed virtual double Max(bool considerDateAsNumber);
    public sealed virtual IRange Trim();
    public sealed virtual void Merge();
    public sealed virtual void Merge(bool clearCells);
    public sealed virtual IRange Ungroup(ExcelGroupBy groupBy);
    public sealed virtual void UnMerge();
    public sealed virtual void FreezePanes();
    public sealed virtual void Clear();
    public sealed virtual void Clear(bool isClearFormat);
    public sealed virtual void Clear(ExcelMoveDirection direction);
    public sealed virtual void Clear(ExcelClearOptions option);
    public sealed virtual void Clear(ExcelMoveDirection direction, ExcelCopyRangeOptions options);
    public sealed virtual void MoveTo(IRange destination);
    public void MoveTo(IRange destination, bool bUpdateFormula);
    public sealed virtual IRange CopyTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination, bool bUpdateFormula);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options, bool skipBlank);
    public sealed virtual IRange IntersectWith(IRange range);
    public sealed virtual IRange MergeWith(IRange range);
    public sealed virtual void AutofitRows();
    public sealed virtual void AutofitColumns();
    public sealed virtual ICommentShape AddComment();
    public sealed virtual IThreadedComment AddThreadedComment(string text, DateTime creationTime);
    public sealed virtual IThreadedComment AddThreadedComment(string text, string author, DateTime creationTime);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    private sealed virtual override IRange Syncfusion.XlsIO.IRange.FindFirst(double findValue, ExcelFindType flags);
    private sealed virtual override IRange Syncfusion.XlsIO.IRange.FindFirst(bool findValue);
    private sealed virtual override IRange Syncfusion.XlsIO.IRange.FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public void CopyToClipboard();
    public sealed virtual void BorderAround();
    public sealed virtual void BorderAround(ExcelLineStyle borderLine);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderInside();
    public sealed virtual void BorderInside(ExcelLineStyle borderLine);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderNone();
    public sealed virtual void CollapseGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy, ExpandCollapseFlags flags);
    public sealed virtual IRange[] GetDependents();
    public sealed virtual IRange[] GetDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetPrecedents();
    public sealed virtual IRange[] GetPrecedents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectDependents();
    public sealed virtual IRange[] GetDirectDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectPrecedents();
    public sealed virtual IRange[] GetDirectPrecedents(bool isEntireWorkbook);
    public sealed virtual IEnumerator`1<IRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.RichTextStringGroup : CommonObject {
    private RangeGroup m_rangeGroup;
    private string m_rtfText;
    public IRichTextString Item { get; }
    public int Count { get; }
    public string Text { get; public set; }
    public string RtfText { get; public set; }
    public bool IsFormatted { get; }
    public RichTextStringGroup(IApplication application, object parent);
    private void FindParents();
    public IRichTextString get_Item(int index);
    public int get_Count();
    public sealed virtual IFont GetFont(int iPosition);
    public sealed virtual void SetFont(int iStartPos, int iEndPos, IFont font);
    public sealed virtual void ClearFormatting();
    public sealed virtual void Append(string text, IFont font);
    public sealed virtual void Clear();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual string get_RtfText();
    public sealed virtual void set_RtfText(string value);
    public sealed virtual bool get_IsFormatted();
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.StyleGroup : CommonObject {
    private RangeGroup m_rangeGroup;
    private FontGroup m_font;
    private BordersGroup m_borders;
    public IStyle Item { get; }
    public int Count { get; }
    public WorkbookImpl Workbook { get; }
    public IBorders Borders { get; }
    public bool BuiltIn { get; }
    public ExcelPattern FillPattern { get; public set; }
    public ExcelKnownColors FillBackground { get; public set; }
    public Color FillBackgroundRGB { get; public set; }
    public ExcelKnownColors FillForeground { get; public set; }
    public Color FillForegroundRGB { get; public set; }
    public IFont Font { get; }
    public IInterior Interior { get; }
    public bool FormulaHidden { get; public set; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public bool IncludeAlignment { get; public set; }
    public bool IncludeBorder { get; public set; }
    public bool IncludeFont { get; public set; }
    public bool IncludeNumberFormat { get; public set; }
    public bool IncludePatterns { get; public set; }
    public bool IncludeProtection { get; public set; }
    public int IndentLevel { get; public set; }
    public bool Locked { get; public set; }
    public string Name { get; }
    public string NumberFormat { get; public set; }
    public string NumberFormatLocal { get; public set; }
    public int NumberFormatIndex { get; public set; }
    public INumberFormat NumberFormatSettings { get; }
    public int Rotation { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public bool WrapText { get; public set; }
    public bool IsInitialized { get; }
    public ExcelReadingOrderType ReadingOrder { get; public set; }
    public bool IsFirstSymbolApostrophe { get; public set; }
    public bool JustifyLast { get; public set; }
    public ExcelKnownColors PatternColorIndex { get; public set; }
    public Color PatternColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public bool IsModified { get; }
    public bool HasBorder { get; }
    public int XFormatIndex { get; }
    public StyleGroup(IApplication application, object parent);
    private void FindParents();
    public IStyle get_Item(int index);
    public int get_Count();
    public WorkbookImpl get_Workbook();
    public sealed virtual IBorders get_Borders();
    public sealed virtual bool get_BuiltIn();
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    public sealed virtual ExcelKnownColors get_FillBackground();
    public sealed virtual void set_FillBackground(ExcelKnownColors value);
    public sealed virtual Color get_FillBackgroundRGB();
    public sealed virtual void set_FillBackgroundRGB(Color value);
    public sealed virtual ExcelKnownColors get_FillForeground();
    public sealed virtual void set_FillForeground(ExcelKnownColors value);
    public sealed virtual Color get_FillForegroundRGB();
    public sealed virtual void set_FillForegroundRGB(Color value);
    public sealed virtual IFont get_Font();
    public sealed virtual IInterior get_Interior();
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual bool get_IncludeAlignment();
    public sealed virtual void set_IncludeAlignment(bool value);
    public sealed virtual bool get_IncludeBorder();
    public sealed virtual void set_IncludeBorder(bool value);
    public sealed virtual bool get_IncludeFont();
    public sealed virtual void set_IncludeFont(bool value);
    public sealed virtual bool get_IncludeNumberFormat();
    public sealed virtual void set_IncludeNumberFormat(bool value);
    public sealed virtual bool get_IncludePatterns();
    public sealed virtual void set_IncludePatterns(bool value);
    public sealed virtual bool get_IncludeProtection();
    public sealed virtual void set_IncludeProtection(bool value);
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_Locked();
    public sealed virtual void set_Locked(bool value);
    public sealed virtual string get_Name();
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual string get_NumberFormatLocal();
    public sealed virtual void set_NumberFormatLocal(string value);
    public sealed virtual int get_NumberFormatIndex();
    public sealed virtual void set_NumberFormatIndex(int value);
    public sealed virtual INumberFormat get_NumberFormatSettings();
    public sealed virtual int get_Rotation();
    public sealed virtual void set_Rotation(int value);
    public sealed virtual bool get_ShrinkToFit();
    public sealed virtual void set_ShrinkToFit(bool value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual bool get_IsInitialized();
    public sealed virtual ExcelReadingOrderType get_ReadingOrder();
    public sealed virtual void set_ReadingOrder(ExcelReadingOrderType value);
    public sealed virtual bool get_IsFirstSymbolApostrophe();
    public sealed virtual void set_IsFirstSymbolApostrophe(bool value);
    public sealed virtual bool get_JustifyLast();
    public sealed virtual void set_JustifyLast(bool value);
    public sealed virtual ExcelKnownColors get_PatternColorIndex();
    public sealed virtual void set_PatternColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_PatternColor();
    public sealed virtual void set_PatternColor(Color value);
    public sealed virtual ExcelKnownColors get_ColorIndex();
    public sealed virtual void set_ColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual bool get_IsModified();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    public sealed virtual bool get_HasBorder();
    public sealed virtual int get_XFormatIndex();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.Grouping.WorksheetGroup : CollectionBaseEx`1<IWorksheet> {
    private WorkbookImpl m_book;
    private PageSetupGroup m_pageSetup;
    private IRange m_usedRange;
    private IMigrantRange m_migrantRange;
    private SheetView m_view;
    internal int unknown_formula_name;
    private CalcEngine m_calcEngine;
    [CompilerGeneratedAttribute]
private CellValueChangedEventHandler CellValueChanged;
    [CompilerGeneratedAttribute]
private ExportDataTableEventHandler ExportDataTableEvent;
    private ISlicers m_slicers;
    private IScenarios m_scenarios;
    private IThreadedComments m_threadedComments;
    [CompilerGeneratedAttribute]
private MissingFunctionEventHandler MissingFunction;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ValueChanged;
    public bool IsEmpty { get; }
    public WorkbookImpl ParentWorkbook { get; }
    public ISlicers Slicers { get; }
    public IScenarios Scenarios { get; }
    public IThreadedComments ThreadedComments { get; }
    public CalcEngine CalcEngine { get; public set; }
    public IAutoFilters AutoFilters { get; }
    public IWorkbook Workbook { get; }
    public IRange[] Cells { get; }
    public SheetView View { get; public set; }
    public ISparklineGroups SparklineGroups { get; }
    public bool DisplayPageBreaks { get; public set; }
    public bool HasOleObject { get; public set; }
    public int Index { get; }
    public int TabIndex { get; }
    public bool ProtectDrawingObjects { get; }
    public bool ProtectScenarios { get; }
    public IRange[] MergedCells { get; }
    public string Name { get; public set; }
    public INames Names { get; }
    public string CodeName { get; public set; }
    public IDataSort DataSorter { get; }
    public IPageSetup PageSetup { get; }
    public IRange Range { get; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public double StandardHeight { get; public set; }
    public bool StandardHeightFlag { get; public set; }
    public double StandardWidth { get; public set; }
    public ExcelSheetType Type { get; }
    public IRange UsedRange { get; }
    public int Zoom { get; public set; }
    public WorksheetVisibility Visibility { get; public set; }
    public int VerticalSplit { get; public set; }
    public int HorizontalSplit { get; public set; }
    public int FirstVisibleRow { get; public set; }
    public int FirstVisibleColumn { get; public set; }
    public int ActivePane { get; public set; }
    public bool IsDisplayZeros { get; public set; }
    public bool IsGridLinesVisible { get; public set; }
    public ExcelKnownColors GridLineColor { get; public set; }
    public bool IsRowColumnHeadersVisible { get; public set; }
    public IVPageBreaks VPageBreaks { get; }
    public IHPageBreaks HPageBreaks { get; }
    public bool IsStringsPreserved { get; public set; }
    public bool IsPasswordProtected { get; }
    public IComments Comments { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IHyperLinks HyperLinks { get; }
    public IRange[] UsedCells { get; }
    public IWorksheetCustomProperties CustomProperties { get; }
    public IMigrantRange MigrantRange { get; }
    public bool UseRangesCache { get; public set; }
    public ExcelSheetProtection Protection { get; }
    public bool ProtectContents { get; }
    public int TopVisibleRow { get; public set; }
    public int LeftVisibleColumn { get; public set; }
    public bool UsedRangeIncludesFormatting { get; public set; }
    public IPivotTables PivotTables { get; }
    public IListObjects ListObjects { get; }
    public IOleObjects OleObjects { get; }
    public bool IsFreezePanes { get; }
    public IRange SplitCell { get; }
    public ExcelKnownColors TabColor { get; public set; }
    public Color TabColorRGB { get; public set; }
    public IChartShapes Charts { get; }
    public IPictures Pictures { get; }
    public IShapes Shapes { get; }
    public bool IsRightToLeft { get; public set; }
    public bool IsSelected { get; }
    public ITextBoxes TextBoxes { get; }
    public ICheckBoxes CheckBoxes { get; }
    public IOptionButtons OptionButtons { get; }
    public IComboBoxes ComboBoxes { get; }
    public WorksheetGroup(IApplication application, object parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CellValueChanged(CellValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CellValueChanged(CellValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExportDataTableEvent(ExportDataTableEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExportDataTableEvent(ExportDataTableEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MissingFunction(MissingFunctionEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MissingFunction(MissingFunctionEventHandler value);
    private void FindParents();
    public sealed virtual int Add(ITabSheet sheet);
    public sealed virtual void SaveAsHtml(Stream stream);
    public sealed virtual void SaveAsHtml(Stream stream, HtmlSaveOptions saveOptions);
    public void Remove(ITabSheet sheet);
    public void Select(ITabSheet sheet);
    private void CreateMigrantRange();
    public sealed virtual bool get_IsEmpty();
    public WorkbookImpl get_ParentWorkbook();
    public sealed virtual ISlicers get_Slicers();
    public sealed virtual IScenarios get_Scenarios();
    public sealed virtual IThreadedComments get_ThreadedComments();
    public sealed virtual CalcEngine get_CalcEngine();
    public sealed virtual void set_CalcEngine(CalcEngine value);
    public sealed virtual void EnableSheetCalculations();
    public sealed virtual void DisableSheetCalculations();
    private void CalcEngine_UnknownFunction(object sender, UnknownFunctionEventArgs args);
    public sealed virtual object GetValueRowCol(int row, int col);
    public sealed virtual void SetValueRowCol(object value, int row, int col);
    public sealed virtual void WireParentObject();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(ValueChangedEventHandler value);
    public void OnValueChanged(int row, int col, string value);
    public sealed virtual IAutoFilters get_AutoFilters();
    public sealed virtual IWorkbook get_Workbook();
    public sealed virtual IRange[] get_Cells();
    public sealed virtual SheetView get_View();
    public sealed virtual void set_View(SheetView value);
    public sealed virtual ISparklineGroups get_SparklineGroups();
    public sealed virtual bool get_DisplayPageBreaks();
    public sealed virtual void set_DisplayPageBreaks(bool value);
    public sealed virtual bool get_HasOleObject();
    public void set_HasOleObject(bool value);
    public sealed virtual int get_Index();
    public sealed virtual int get_TabIndex();
    public sealed virtual bool get_ProtectDrawingObjects();
    public sealed virtual bool get_ProtectScenarios();
    public sealed virtual IRange[] get_MergedCells();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual INames get_Names();
    public sealed virtual string get_CodeName();
    public void set_CodeName(string value);
    public sealed virtual IDataSort get_DataSorter();
    public sealed virtual IPageSetup get_PageSetup();
    public sealed virtual IRange get_Range();
    public sealed virtual IRange[] get_Rows();
    public sealed virtual IRange[] get_Columns();
    public sealed virtual double get_StandardHeight();
    public sealed virtual void set_StandardHeight(double value);
    public sealed virtual bool get_StandardHeightFlag();
    public sealed virtual void set_StandardHeightFlag(bool value);
    public sealed virtual double get_StandardWidth();
    public sealed virtual void set_StandardWidth(double value);
    public sealed virtual ExcelSheetType get_Type();
    public sealed virtual IRange get_UsedRange();
    public sealed virtual int get_Zoom();
    public sealed virtual void set_Zoom(int value);
    public sealed virtual WorksheetVisibility get_Visibility();
    public sealed virtual void set_Visibility(WorksheetVisibility value);
    public sealed virtual int get_VerticalSplit();
    public sealed virtual void set_VerticalSplit(int value);
    public sealed virtual int get_HorizontalSplit();
    public sealed virtual void set_HorizontalSplit(int value);
    public sealed virtual int get_FirstVisibleRow();
    public sealed virtual void set_FirstVisibleRow(int value);
    public sealed virtual int get_FirstVisibleColumn();
    public sealed virtual void set_FirstVisibleColumn(int value);
    public sealed virtual int get_ActivePane();
    public sealed virtual void set_ActivePane(int value);
    public sealed virtual bool get_IsDisplayZeros();
    public sealed virtual void set_IsDisplayZeros(bool value);
    public sealed virtual bool get_IsGridLinesVisible();
    public sealed virtual void set_IsGridLinesVisible(bool value);
    public sealed virtual ExcelKnownColors get_GridLineColor();
    public sealed virtual void set_GridLineColor(ExcelKnownColors value);
    public sealed virtual bool get_IsRowColumnHeadersVisible();
    public sealed virtual void set_IsRowColumnHeadersVisible(bool value);
    public sealed virtual IVPageBreaks get_VPageBreaks();
    public sealed virtual IHPageBreaks get_HPageBreaks();
    public sealed virtual bool get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(bool value);
    public sealed virtual bool get_IsPasswordProtected();
    public sealed virtual IComments get_Comments();
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual IHyperLinks get_HyperLinks();
    public sealed virtual IRange[] get_UsedCells();
    public sealed virtual IWorksheetCustomProperties get_CustomProperties();
    public sealed virtual IMigrantRange get_MigrantRange();
    public sealed virtual bool get_UseRangesCache();
    public sealed virtual void set_UseRangesCache(bool value);
    public sealed virtual ExcelSheetProtection get_Protection();
    public sealed virtual bool get_ProtectContents();
    public sealed virtual int get_TopVisibleRow();
    public sealed virtual void set_TopVisibleRow(int value);
    public sealed virtual int get_LeftVisibleColumn();
    public sealed virtual void set_LeftVisibleColumn(int value);
    public sealed virtual bool get_UsedRangeIncludesFormatting();
    public sealed virtual void set_UsedRangeIncludesFormatting(bool value);
    public sealed virtual IPivotTables get_PivotTables();
    public sealed virtual IListObjects get_ListObjects();
    public sealed virtual IOleObjects get_OleObjects();
    public sealed virtual void Activate();
    public void CopyToClipboard();
    public sealed virtual void ImportXml(Stream stream, int row, int column);
    private sealed virtual override void Syncfusion.XlsIO.IWorksheet.Clear();
    public sealed virtual void ClearData();
    public sealed virtual bool Contains(int iRow, int iColumn);
    public sealed virtual void AdvancedFilter(ExcelFilterAction filterInPlace, IRange filterRange, IRange criteriaRange, IRange copyToRange, bool isUnique);
    public sealed virtual IRanges CreateRangesCollection();
    public sealed virtual void CreateNamedRanges(string namedRange, string referRange, bool vertical);
    public sealed virtual ITemplateMarkersProcessor CreateTemplateMarkersProcessor();
    public sealed virtual bool IsColumnVisible(int columnIndex);
    public sealed virtual void ShowColumn(int columnIndex, bool isVisible);
    public sealed virtual void HideColumn(int columnIndex);
    public sealed virtual void HideRow(int rowIndex);
    public sealed virtual bool IsRowVisible(int rowIndex);
    public sealed virtual void ShowRow(int rowIndex, bool isVisible);
    public sealed virtual void ShowRange(IRange range, bool isVisible);
    public sealed virtual void ShowRange(RangesCollection ranges, bool isVisible);
    public sealed virtual void ShowRange(IRange[] ranges, bool isVisible);
    public sealed virtual void InsertRow(int index);
    public sealed virtual void InsertRow(int iRowIndex, int iRowCount);
    public sealed virtual void InsertRow(int iRowIndex, int iRowCount, ExcelInsertOptions insertOptions);
    public sealed virtual void InsertColumn(int index);
    public sealed virtual void InsertColumn(int iColumnIndex, int iColumnCount);
    public sealed virtual void InsertColumn(int iColumnIndex, int iColumnCount, ExcelInsertOptions options);
    public sealed virtual void DeleteRow(int index);
    public sealed virtual void DeleteRow(int index, int count);
    public sealed virtual void DeleteColumn(int index);
    public sealed virtual void DeleteColumn(int index, int count);
    public sealed virtual int ImportArray(Object[] arrObject, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(String[] arrString, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Int32[] arrInt, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Double[] arrDouble, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(DateTime[] arrDateTime, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Object[0...,0...] arrObject, int firstRow, int firstColumn);
    public sealed virtual int ImportData(IEnumerable arrObject, int firstRow, int firstColumn, bool includeHeader);
    public sealed virtual int ImportData(IEnumerable arrObject, ExcelImportDataOptions importDataOptions);
    internal int ImportData(IEnumerable arrObject, int firstRow, int firstColumn, bool includeHeader, bool includeHeaderParent, ExcelNestedDataLayoutOptions nestedLayoutOptions, ExcelNestedDataGroupOptions nestedGroupOptions, int collapseLevel, bool preserveTypes);
    public sealed virtual int ImportDataReader(IDataReader dataReader, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataReader(IDataReader dataReader, int firstRow, int firstColumn, bool importOnSave);
    public sealed virtual int ImportDataReader(IDataReader dataReader, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataReader(IDataReader dataReader, IName namedRange, bool isFieldNameShown);
    public sealed virtual int ImportDataColumn(DataColumn dataColumn, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataColumn(DataColumn dataColumn, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataTable(DataTable dataTable, int firtRow, int firstColumn, bool importOnSave);
    public sealed virtual int ImportDataTable(DataTable dataTable, int firtRow, int firstColumn, bool importOnSave, bool includeHeader);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, bool preserveTypes);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset, int iMaxRow, int iMaxCol);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset, int iMaxRow, int iMaxCol, bool bPreserveTypes);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, bool bPreserveTypes);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, bool bPreserveTypes);
    public sealed virtual void RemovePanes();
    public sealed virtual DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options);
    public sealed virtual DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options, ExcelExportDataOptions exportDataOptions);
    public sealed virtual DataTable ExportDataTable(IRange dataRange, ExcelExportDataTableOptions options);
    public sealed virtual DataTable ExportDataTable(IRange dataRange, ExcelExportDataTableOptions options, ExcelExportDataOptions exportDataOptions);
    public DataTable PEExportDataTable(IRange dataRange, ExcelExportDataTableOptions options, PivotTableImpl pivotTable);
    public sealed virtual List`1<T> ExportData(int firstRow, int firstColumn, int lastRow, int lastColumn);
    public sealed virtual List`1<T> ExportData(int firstRow, int firstColumn, int lastRow, int lastColumn, Dictionary`2<string, string> mappingProperties);
    public sealed virtual void Protect(string password);
    public sealed virtual void Protect(string password, ExcelSheetProtection options);
    public sealed virtual void Unprotect(string password);
    public sealed virtual IRange IntersectRanges(IRange range1, IRange range2);
    public sealed virtual IRange MergeRanges(IRange range1, IRange range2);
    public sealed virtual void AutofitRow(int rowIndex);
    public sealed virtual void AutofitColumn(int colIndex);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public sealed virtual void Remove();
    public sealed virtual void Move(int iNewIndex);
    public sealed virtual int ColumnWidthToPixels(double widthInChars);
    public sealed virtual double PixelsToColumnWidth(int pixels);
    public sealed virtual void SetColumnWidth(int iColumnIndex, double value);
    public sealed virtual void SetColumnWidthInPixels(int iColumnIndex, int value);
    public sealed virtual void SetColumnWidthInPixels(int iStartColumnIndex, int iCount, int value);
    public sealed virtual void SetRowHeight(int iRow, double value);
    public sealed virtual void SetRowHeightInPixels(int iRowIndex, double value);
    public sealed virtual void SetRowHeightInPixels(int iStartRowIndex, int iCount, double value);
    public sealed virtual double GetColumnWidth(int iColumnIndex);
    public sealed virtual int GetColumnWidthInPixels(int iColumnIndex);
    public sealed virtual double GetRowHeight(int iRowIndex);
    public sealed virtual int GetRowHeightInPixels(int iRowIndex);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public sealed virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public void SaveAs(string fileName, string separator);
    public void SaveAs(string fileName, string separator, Encoding encoding);
    public sealed virtual void SaveAs(Stream stream, string separator);
    public sealed virtual void SaveAs(Stream stream, string separator, Encoding encoding);
    public sealed virtual void SetDefaultColumnStyle(int iColumnIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultColumnStyle(int iStartColumnIndex, int iEndColumnIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultRowStyle(int iRowIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultRowStyle(int iStartRowIndex, int iEndRowIndex, IStyle defaultStyle);
    public sealed virtual IStyle GetDefaultRowStyle(int iRowIndex);
    public sealed virtual IStyle GetDefaultColumnStyle(int iColumnIndex);
    public sealed virtual void FreeRange(IRange range);
    public sealed virtual void FreeRange(int iRow, int iColumn);
    public sealed virtual void SetValue(int iRow, int iColumn, string value);
    public sealed virtual void SetNumber(int iRow, int iColumn, double value);
    public sealed virtual void SetBoolean(int iRow, int iColumn, bool value);
    public sealed virtual void SetText(int iRow, int iColumn, string value);
    public sealed virtual void SetFormula(int iRow, int iColumn, string value);
    public sealed virtual void SetError(int iRow, int iColumn, string value);
    public sealed virtual void SetBlank(int iRow, int iColumn);
    public sealed virtual void SetFormulaNumberValue(int iRow, int iColumn, double value);
    public sealed virtual void SetFormulaErrorValue(int iRow, int iColumn, string value);
    public sealed virtual void SetFormulaBoolValue(int iRow, int iColumn, bool value);
    public sealed virtual void SetFormulaStringValue(int iRow, int iColumn, string value);
    public sealed virtual string GetText(int row, int column);
    public sealed virtual double GetNumber(int row, int column);
    public sealed virtual string GetFormula(int row, int column, bool bR1C1);
    public sealed virtual string GetError(int row, int column);
    public sealed virtual bool GetBoolean(int row, int column);
    public sealed virtual string GetFormulaStringValue(int row, int column);
    public sealed virtual double GetFormulaNumberValue(int row, int column);
    public sealed virtual string GetFormulaErrorValue(int row, int column);
    public sealed virtual bool GetFormulaBoolValue(int row, int column);
    public sealed virtual bool get_IsFreezePanes();
    public sealed virtual IRange get_SplitCell();
    public sealed virtual void Calculate();
    public sealed virtual ExcelKnownColors get_TabColor();
    public sealed virtual void set_TabColor(ExcelKnownColors value);
    public sealed virtual Color get_TabColorRGB();
    public sealed virtual void set_TabColorRGB(Color value);
    public sealed virtual IChartShapes get_Charts();
    public sealed virtual IPictures get_Pictures();
    public sealed virtual IShapes get_Shapes();
    public sealed virtual void Select();
    public sealed virtual void Unselect();
    public sealed virtual bool get_IsRightToLeft();
    public sealed virtual void set_IsRightToLeft(bool value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual ITextBoxes get_TextBoxes();
    public sealed virtual ICheckBoxes get_CheckBoxes();
    public sealed virtual IOptionButtons get_OptionButtons();
    public sealed virtual IComboBoxes get_ComboBoxes();
    private void WorksheetGroup_Inserted(object sender, CollectionChangeEventArgs`1<IWorksheet> args);
    private void WorksheetGroup_Removing(object sender, CollectionChangeEventArgs`1<IWorksheet> args);
    private void WorksheetGroup_Clearing();
    public virtual object Clone(object parent);
    internal Nullable`1<bool> GetStringPreservedValue(RangeGroup rangeGroup);
    internal void SetStringPreservedValue(RangeGroup rangeGroup, Nullable`1<bool> value);
    protected virtual void OnClear();
    public sealed virtual void ImportHtmlTable(string fileName, int row, int column);
    public sealed virtual void ImportHtmlTable(Stream fileStream, int row, int column);
    public sealed virtual void ImportHtmlTable(string fileName, int row, int column, HtmlImportOptions htmlImportOptions);
    public sealed virtual void ImportHtmlTable(Stream fileStream, int row, int column, HtmlImportOptions htmlImportOptions);
    public sealed virtual void ConvertToImage(int firstRow, int firstColumn, int lastRow, int lastColum, Stream outputStream);
    public sealed virtual void ConvertToImage(IRange range, Stream outputStream);
    public sealed virtual void ConvertToImage(IRange range, ExportImageOptions imageOptions, Stream outputStream);
    public sealed virtual void ConvertToImage(int firstRow, int firstColumn, int lastRow, int lastColumn, ExportImageOptions imageOptions, Stream outputStream);
}
public class Syncfusion.XlsIO.Implementation.Collections.HeaderFooterShapeCollection : ShapeCollectionBase {
    public TBIFFRecord RecordCode { get; }
    public WorkbookShapeDataImpl ShapeData { get; }
    public HeaderFooterShapeCollection(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public HeaderFooterShapeCollection(IApplication application, object parent, MsofbtSpgrContainer container, ExcelParseOptions options);
    public virtual TBIFFRecord get_RecordCode();
    [CLSCompliantAttribute("False")]
protected virtual ShapeImpl CreateShape(TObjType objType, MsofbtSpContainer shapeContainer, ExcelParseOptions options, List`1<ObjSubRecord> subRecords, int cmoIndex);
    [CLSCompliantAttribute("False")]
protected virtual void CreateData(Stream stream, MsofbtDgContainer dgContainer, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    [CLSCompliantAttribute("False")]
protected virtual ShapeImpl AddShape(MsofbtSpContainer shapeContainer, ExcelParseOptions options);
    public virtual WorkbookShapeDataImpl get_ShapeData();
    protected virtual void RegisterInWorksheet();
    [CLSCompliantAttribute("False")]
public void Parse(HeaderFooterImageRecord record, ExcelParseOptions options);
    public ShapeImpl SetPicture(string strShapeName, Image image);
    public ShapeImpl SetPicture(string strShapeName, Image image, int iIndex);
    public ShapeImpl SetPicture(string strShapeName, Image image, int iIndex, bool bIncludeOptions, string preservedStyles);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.HPageBreaksCollection : CollectionBaseEx`1<IHPageBreak> {
    private WorkbookImpl m_book;
    public IHPageBreak Item { get; }
    public int ManualBreakCount { get; }
    public TBIFFRecord TypeCode { get; }
    public int RecordCode { get; }
    public bool NeedDataArray { get; }
    public long StreamPos { get; public set; }
    public HPageBreaksCollection(IApplication application, object parent);
    public sealed virtual IHPageBreak get_Item(IRange location);
    public sealed virtual IHPageBreak Add(IRange location);
    public sealed virtual IHPageBreak Remove(IRange location);
    public sealed virtual IHPageBreak GetPageBreak(int iRow);
    internal int GetPageBreakIndex(IRange location);
    internal void InsertRows(int rowIndex, int totalRows);
    internal void DeleteRows(int rowIndex, int totalRow);
    public sealed virtual void Clear();
    public int get_ManualBreakCount();
    private void FindParents();
    [CLSCompliantAttribute("False")]
public void Parse(HorizontalPageBreaksRecord record);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private HorizontalPageBreaksRecord PrepareRecord();
    public virtual object Clone(object parent);
    public void Add(HPageBreakImpl pageBreak);
    public void ChangeToExcel97to03Version();
    public sealed virtual TBIFFRecord get_TypeCode();
    public sealed virtual int get_RecordCode();
    public sealed virtual bool get_NeedDataArray();
    public sealed virtual long get_StreamPos();
    public sealed virtual void set_StreamPos(long value);
    public sealed virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.HyperLinksCollection : CollectionBaseEx`1<HyperLinkImpl> {
    private WorkbookImpl m_book;
    private bool m_bReadOnly;
    internal Dictionary`2<long, List`1<HyperLinkImpl>> m_dicCellToList;
    private List`1<IHyperLink> m_listHyperlinks;
    public IHyperLink Item { get; }
    public bool IsReadOnly { get; }
    public HyperLinksCollection(IApplication application, object parent);
    public HyperLinksCollection(IApplication application, object parent, bool isReadOnly);
    private void SetParents();
    public sealed virtual IHyperLink get_Item(int index);
    public bool get_IsReadOnly();
    public sealed virtual IHyperLink Add(IRange range);
    public sealed virtual IHyperLink Add(IRange range, ExcelHyperLinkType hyperlinkType, string address, string screenTip);
    public sealed virtual IHyperLink Add(IShape shape);
    public sealed virtual IHyperLink Add(IShape shape, ExcelHyperLinkType hyperlinkType, string address, string screenTip);
    public sealed virtual void RemoveAt(int index);
    internal void RemoveHyperlinksWithoutClearingFormat(int index);
    public int Add(IHyperLink link);
    public int Parse(IList data, int iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void CreateHyperlinkStyles();
    public HyperLinksCollection GetRangeHyperlinks(IRange range);
    public void AddToHash(HyperLinkImpl link);
    public void AddRange(IList`1<HyperLinkImpl> collection);
    public IHyperLink GetHyperlinkByCellIndex(long lCellIndex);
    public virtual object Clone(object parent);
    internal void ClearAll();
    internal void Remove(IHyperLink link);
    private void HyperLinksCollection_Removed(object sender, CollectionChangeEventArgs`1<HyperLinkImpl> args);
}
public class Syncfusion.XlsIO.Implementation.Collections.MetaPropertiesImpl : CollectionBaseEx`1<IMetaProperty> {
    private Dictionary`2<string, IMetaProperty> m_hashNameToIMetaProperty;
    private Dictionary`2<string, IMetaProperty> m_displayNameToIMetaProperty;
    private WorkbookImpl m_book;
    private WorksheetImpl m_worksheet;
    private string m_SchemaXml;
    private string m_ItemName;
    private bool m_isValid;
    internal string ItemName { get; internal set; }
    internal bool IsValid { get; internal set; }
    public string SchemaXml { get; public set; }
    public MetaPropertiesImpl(IApplication application, object parent);
    internal string get_ItemName();
    internal void set_ItemName(string value);
    internal bool get_IsValid();
    internal void set_IsValid(bool value);
    public sealed virtual string get_SchemaXml();
    public void set_SchemaXml(string value);
    protected virtual void OnInsertComplete(int index, IMetaProperty value);
    public sealed virtual IMetaProperty GetItemByInternalName(string name);
    internal IMetaProperty GetItemByDisplayName(string name);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.OptionButtonCollection : CollectionBaseEx`1<object> {
    public static int AverageWidth;
    public static int AverageHeight;
    private WorksheetBaseImpl m_worksheet;
    public IOptionButtonShape Item { get; }
    public IOptionButtonShape Item { get; }
    public OptionButtonCollection(IApplication application, object parent);
    public void AddOptionButton(IOptionButtonShape optionButton);
    internal void AddDefaultEvents(IOptionButtonShape optionButton);
    private void OptionButtonCheckStateChanged(object obj, ValueChangedEventArgs valueChangedEventArgs);
    private void OptionButtonLinkedCellChanged(object obj, ValueChangedEventArgs valueChangedEventArgs);
    internal void PrepareForSerialization();
    internal List`1<OptionButtonCollection> GetOptionGroups();
    public sealed virtual IOptionButtonShape get_Item(int index);
    public sealed virtual IOptionButtonShape get_Item(string name);
    public sealed virtual IOptionButtonShape AddOptionButton(int row, int column, int height, int width);
    public sealed virtual IOptionButtonShape AddOptionButton();
    public sealed virtual IOptionButtonShape AddOptionButton(int row, int column);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.PicturesCollection : CollectionBaseEx`1<IPictureShape> {
    private string DEF_PICTURE_NAME;
    private String[] m_indexedpixel_notsupport;
    private WorksheetBaseImpl m_sheet;
    public IPictureShape Item { get; }
    public PicturesCollection(IApplication application, object parent);
    public sealed virtual IPictureShape get_Item(string name);
    public IPictureShape AddPicture(Image image, string pictureName);
    public IPictureShape AddPicture(Image image, string pictureName, ExcelImageFormat imageFormat);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Image image);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Image image, ExcelImageFormat imageFormat);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream stream);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream svgStream, Stream imageStream);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream svgStream, Stream imageStream, int scaleWidth, int scaleHeight);
    public sealed virtual IPictureShape AddPictureAsLink(int topRow, int leftColumn, int bottomRow, int rightColumn, string url);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream stream, ExcelImageFormat imageFormat);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, int bottomRow, int rightColumn, Image image);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, int bottomRow, int rightColumn, Image image, ExcelImageFormat imageFormat);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, int bottomRow, int rightColumn, Stream stream);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, int bottomRow, int rightColumn, Stream stream, ExcelImageFormat imageFormat);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Image image, int scaleWidth, int scaleHeight);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Image image, int scaleWidth, int scaleHeight, ExcelImageFormat imageFormat);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream stream, int scaleWidth, int scaleHeight);
    public sealed virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream stream, int scaleWidth, int scaleHeight, ExcelImageFormat imageFormat);
    internal void RemovePicture(IPictureShape picture);
    internal void AddPicture(IPictureShape picture);
    private void SetParents();
    private string GeneratePictureName();
}
internal class Syncfusion.XlsIO.Implementation.Collections.PivotAreaCollection : List`1<PivotArea> {
    public void AddPivotArea(PivotArea pivotArea);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.Collections.PivotAreaReferences : object {
    private List`1<PivotAreaReference> m_pivotAreaReferences;
    internal List`1<PivotAreaReference> AreaReferences { get; }
    internal int Count { get; }
    internal PivotAreaReference Item { get; }
    internal List`1<PivotAreaReference> get_AreaReferences();
    internal int get_Count();
    internal PivotAreaReference get_Item(int index);
    internal void AddReference(PivotAreaReference reference);
    internal void Add(PivotAreaReference reference);
    internal void SetReferences(List`1<PivotAreaReference> references);
    internal bool Equals(object obj);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.PivotCacheFieldsCollection : CollectionBase`1<PivotCacheFieldImpl> {
    public PivotCacheFieldImpl Item { get; }
    public PivotCacheFieldImpl get_Item(string name);
    [CLSCompliantAttribute("False")]
public void Parse(BiffReader reader, int iFieldsNumber);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public int Add(PivotCacheFieldImpl field);
    public PivotCacheFieldImpl AddNewField(string strName);
    public PivotCacheFieldImpl AddNewField(string strName, string formula);
    public int GetOrdinaryFieldCount();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.RangesCollection : CollectionBaseEx`1<IRange> {
    private static string DEF_WRONG_WORKSHEET;
    private HtmlStringParser htmlStringParser;
    private IWorksheet m_worksheet;
    private int m_iFirstRow;
    private int m_iFirstColumn;
    private int m_iLastRow;
    private int m_iLastColumn;
    private RTFStringArray m_rtfString;
    public string HtmlString { get; public set; }
    public string Address { get; }
    public string AddressLocal { get; }
    public string AddressGlobal { get; }
    public string AddressR1C1 { get; }
    public string AddressR1C1Local { get; }
    public bool Boolean { get; public set; }
    public IBorders Borders { get; }
    public IRange[] Cells { get; }
    public int Column { get; }
    public int ColumnGroupLevel { get; }
    public double ColumnWidth { get; public set; }
    private int Syncfusion.XlsIO.IRange.Count { get; }
    public DateTime DateTime { get; public set; }
    public string DisplayText { get; }
    public IRange End { get; }
    public IRange EntireColumn { get; }
    public IRange EntireRow { get; }
    public string Error { get; public set; }
    public string Formula { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public string FormulaArray { get; public set; }
    public string FormulaArrayR1C1 { get; public set; }
    public bool FormulaHidden { get; public set; }
    public DateTime FormulaDateTime { get; public set; }
    public bool HasDataValidation { get; }
    public bool HasBoolean { get; }
    public bool HasDateTime { get; }
    public bool HasFormulaBoolValue { get; }
    public bool HasFormulaErrorValue { get; }
    public bool HasFormulaDateTime { get; }
    public bool HasFormulaNumberValue { get; }
    public bool HasFormulaStringValue { get; }
    public bool HasFormula { get; }
    public bool HasFormulaArray { get; }
    public bool HasNumber { get; }
    public bool HasRichText { get; }
    public bool HasString { get; }
    public bool HasStyle { get; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public IHyperLinks Hyperlinks { get; }
    public int IndentLevel { get; public set; }
    public bool IsBlank { get; }
    public bool IsBoolean { get; }
    public bool IsError { get; }
    public bool IsGroupedByColumn { get; }
    public bool IsGroupedByRow { get; }
    public bool IsInitialized { get; }
    public int LastColumn { get; }
    public int LastRow { get; }
    public double Number { get; public set; }
    public string NumberFormat { get; public set; }
    public int Row { get; }
    public int RowGroupLevel { get; }
    public double RowHeight { get; public set; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public IStyle CellStyle { get; public set; }
    public string CellStyleName { get; public set; }
    public string Text { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public string Value { get; public set; }
    public string CalculatedValue { get; }
    public object Value2 { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public IWorksheet Worksheet { get; }
    public IRange Item { get; public set; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IConditionalFormats ConditionalFormats { get; }
    public IDataValidation DataValidation { get; }
    public string FormulaStringValue { get; public set; }
    public double FormulaNumberValue { get; public set; }
    public bool FormulaBoolValue { get; public set; }
    public string FormulaErrorValue { get; public set; }
    public ICommentShape Comment { get; }
    public IThreadedComment ThreadedComment { get; }
    public IRichTextString RichText { get; }
    public bool IsMerged { get; }
    public IRange MergeArea { get; }
    public bool WrapText { get; public set; }
    public bool HasExternalFormula { get; }
    public ExcelIgnoreError IgnoreErrorOptions { get; public set; }
    public Nullable`1<bool> IsStringsPreserved { get; public set; }
    public Nullable`1<BuiltInStyles> BuiltInStyle { get; public set; }
    public string AddressGlobal2007 { get; }
    public int CellsCount { get; }
    public string WorksheetName { get; }
    public IRange Item { get; public set; }
    public RangesCollection(IApplication application, object parent);
    private void SetParents();
    public sealed virtual string get_HtmlString();
    public sealed virtual void set_HtmlString(string value);
    public sealed virtual string get_Address();
    public sealed virtual string get_AddressLocal();
    public sealed virtual string get_AddressGlobal();
    public sealed virtual string get_AddressR1C1();
    public sealed virtual string get_AddressR1C1Local();
    public sealed virtual bool get_Boolean();
    public sealed virtual void set_Boolean(bool value);
    public sealed virtual IBorders get_Borders();
    public sealed virtual IRange[] get_Cells();
    public sealed virtual int get_Column();
    public sealed virtual int get_ColumnGroupLevel();
    public sealed virtual double get_ColumnWidth();
    public sealed virtual void set_ColumnWidth(double value);
    private sealed virtual override int Syncfusion.XlsIO.IRange.get_Count();
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    public sealed virtual string get_DisplayText();
    public sealed virtual IRange get_End();
    public sealed virtual IRange get_EntireColumn();
    public sealed virtual IRange get_EntireRow();
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual string get_Formula();
    public sealed virtual void set_Formula(string value);
    public sealed virtual string get_FormulaR1C1();
    public sealed virtual void set_FormulaR1C1(string value);
    public sealed virtual string get_FormulaArray();
    public sealed virtual void set_FormulaArray(string value);
    public sealed virtual string get_FormulaArrayR1C1();
    public sealed virtual void set_FormulaArrayR1C1(string value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual DateTime get_FormulaDateTime();
    public sealed virtual void set_FormulaDateTime(DateTime value);
    public sealed virtual bool get_HasDataValidation();
    public sealed virtual bool get_HasBoolean();
    public sealed virtual bool get_HasDateTime();
    public sealed virtual bool get_HasFormulaBoolValue();
    public sealed virtual bool get_HasFormulaErrorValue();
    public sealed virtual bool get_HasFormulaDateTime();
    public sealed virtual bool get_HasFormulaNumberValue();
    public sealed virtual bool get_HasFormulaStringValue();
    public sealed virtual bool get_HasFormula();
    public sealed virtual bool get_HasFormulaArray();
    public sealed virtual bool get_HasNumber();
    public sealed virtual bool get_HasRichText();
    public sealed virtual bool get_HasString();
    public sealed virtual bool get_HasStyle();
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual IHyperLinks get_Hyperlinks();
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_IsBlank();
    public sealed virtual bool get_IsBoolean();
    public sealed virtual bool get_IsError();
    public sealed virtual bool get_IsGroupedByColumn();
    public sealed virtual bool get_IsGroupedByRow();
    public sealed virtual bool get_IsInitialized();
    public sealed virtual int get_LastColumn();
    public sealed virtual int get_LastRow();
    public sealed virtual double get_Number();
    public sealed virtual void set_Number(double value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual int get_Row();
    public sealed virtual int get_RowGroupLevel();
    public sealed virtual double get_RowHeight();
    public sealed virtual void set_RowHeight(double value);
    public sealed virtual IRange[] get_Rows();
    public sealed virtual IRange[] get_Columns();
    public sealed virtual IStyle get_CellStyle();
    public sealed virtual void set_CellStyle(IStyle value);
    public sealed virtual string get_CellStyleName();
    public sealed virtual void set_CellStyleName(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual TimeSpan get_TimeSpan();
    public sealed virtual void set_TimeSpan(TimeSpan value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_CalculatedValue();
    public sealed virtual object get_Value2();
    public sealed virtual void set_Value2(object value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual IWorksheet get_Worksheet();
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual void set_Item(int row, int column, IRange value);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual IConditionalFormats get_ConditionalFormats();
    public sealed virtual IDataValidation get_DataValidation();
    public sealed virtual string get_FormulaStringValue();
    public sealed virtual void set_FormulaStringValue(string value);
    public sealed virtual double get_FormulaNumberValue();
    public sealed virtual void set_FormulaNumberValue(double value);
    public sealed virtual bool get_FormulaBoolValue();
    public sealed virtual void set_FormulaBoolValue(bool value);
    public sealed virtual string get_FormulaErrorValue();
    public sealed virtual void set_FormulaErrorValue(string value);
    public sealed virtual ICommentShape get_Comment();
    public sealed virtual IThreadedComment get_ThreadedComment();
    public sealed virtual IRichTextString get_RichText();
    public sealed virtual bool get_IsMerged();
    public sealed virtual IRange get_MergeArea();
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual bool get_HasExternalFormula();
    public sealed virtual ExcelIgnoreError get_IgnoreErrorOptions();
    public sealed virtual void set_IgnoreErrorOptions(ExcelIgnoreError value);
    public sealed virtual Nullable`1<bool> get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(Nullable`1<bool> value);
    public sealed virtual Nullable`1<BuiltInStyles> get_BuiltInStyle();
    public sealed virtual void set_BuiltInStyle(Nullable`1<BuiltInStyles> value);
    public sealed virtual string get_AddressGlobal2007();
    public sealed virtual IRange Activate();
    public sealed virtual IRange Activate(bool scroll);
    public sealed virtual IRange Group(ExcelGroupBy groupBy);
    public sealed virtual IRange Group(ExcelGroupBy groupBy, bool bCollapsed);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual void SubTotal(Int32[] groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual double Sum();
    public sealed virtual double Sum(bool considerDateAsNumber);
    public sealed virtual double Average();
    public sealed virtual double Average(bool considerDateAsNumber);
    public sealed virtual double Min();
    public sealed virtual double Min(bool considerDateAsNumber);
    public sealed virtual double Max();
    public sealed virtual double Max(bool considerDateAsNumber);
    public sealed virtual IRange Trim();
    public sealed virtual void Merge();
    public sealed virtual void Merge(bool clearCells);
    public sealed virtual IRange Ungroup(ExcelGroupBy groupBy);
    public sealed virtual void UnMerge();
    public sealed virtual void FreezePanes();
    private sealed virtual override void Syncfusion.XlsIO.IRange.Clear();
    private sealed virtual override void Syncfusion.XlsIO.IRange.Clear(bool isClearFormat);
    private sealed virtual override void Syncfusion.XlsIO.IRange.Clear(ExcelClearOptions option);
    private sealed virtual override void Syncfusion.XlsIO.IRange.Clear(ExcelMoveDirection direction);
    private sealed virtual override void Syncfusion.XlsIO.IRange.Clear(ExcelMoveDirection direction, ExcelCopyRangeOptions options);
    public sealed virtual void MoveTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options);
    public sealed virtual IRange CopyTo(IRange destination, bool pasteLink);
    internal IRange CheckAndCopyRanges(IRange destination, bool pasteLink, ExcelCopyRangeOptions options, bool skipBlank);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options, bool skipBlank);
    public sealed virtual IRange IntersectWith(IRange range);
    public sealed virtual IRange MergeWith(IRange range);
    public sealed virtual IRange Offset(int row, int column);
    public sealed virtual IRange Resize(int row, int column);
    public sealed virtual void AutofitRows();
    public sealed virtual void AutofitColumns();
    public sealed virtual ICommentShape AddComment();
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public void CopyToClipboard();
    public sealed virtual void BorderAround();
    public sealed virtual void BorderAround(ExcelLineStyle borderLine);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderInside();
    public sealed virtual void BorderInside(ExcelLineStyle borderLine);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderNone();
    public sealed virtual void CollapseGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy, ExpandCollapseFlags flags);
    public sealed virtual IRange[] GetDependents();
    public sealed virtual IRange[] GetDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetPrecedents();
    public sealed virtual IRange[] GetPrecedents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectDependents();
    public sealed virtual IRange[] GetDirectDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectPrecedents();
    public sealed virtual IRange[] GetDirectPrecedents(bool isEntireWorkbook);
    private IRange[] GetDependentRanges(bool isEntireWorkbook, bool isDirect);
    private IRange[] GetPrecedentRanges(bool isEntireWorkbook, bool isDirect);
    private void AddToDictionary(Dictionary`2<string, IRange> resultCells, IRange[] ranges);
    public sealed virtual IThreadedComment AddThreadedComment(string text, DateTime creationTime);
    public sealed virtual IThreadedComment AddThreadedComment(string text, string author, DateTime creationTime);
    private void SetCellStyleName(string cellStyleName);
    public sealed virtual string GetNewAddress(Dictionary`2<string, string> names, String& strSheetName);
    public sealed virtual IRange Clone(object parent, Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
    public sealed virtual int get_CellsCount();
    public sealed virtual void ClearConditionalFormats();
    internal void ClearConditionalFormats(bool isCF);
    public sealed virtual Rectangle[] GetRectangles();
    public sealed virtual int GetRectanglesCount();
    public sealed virtual string get_WorksheetName();
    public sealed virtual void Add(IRange range);
    public void AddRange(IRange range);
    public sealed virtual void Remove(IRange range);
    public sealed virtual IRange get_Item(int index);
    public void set_Item(int index, IRange value);
    private void EvaluateDimensions();
    private SortedList`2<int, KeyValuePair`2<int, int>> GetColumnRowIndexes(bool bIsColumn);
    private void AddRowColumnIndex(SortedList`2<int, KeyValuePair`2<int, int>> list, int iIndex, KeyValuePair`2<int, int> entry);
    private void AddRowColumnIndex(SortedList`2<int, KeyValuePair`2<int, int>> list, int iIndex, int iSecondaryStart, int iSecondaryEnd);
    private IRange GetEntireColumnRow(bool bIsColumn);
    private IRange[] GetColumnRows(bool bIsColumn);
    private void CheckDisposed();
    private string GetAddressSeparator();
    public sealed virtual Ptg[] GetNativePtg();
    public sealed virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.RecordTable : object {
    private int m_iRowCount;
    internal ArrayListEx m_arrRows;
    private int m_iFirstRow;
    private int m_iLastRow;
    private bool m_bIsDisposed;
    private Dictionary`2<long, SharedFormulaRecord> m_arrShared;
    private WorkbookImpl m_book;
    internal IInternalWorksheet m_sheet;
    public IApplication Application { get; }
    public ApplicationImpl AppImplementation { get; }
    public ArrayListEx Rows { get; }
    public int RowCount { get; public set; }
    public int FirstRow { get; }
    public int LastRow { get; }
    public object Item { get; public set; }
    [CLSCompliantAttribute("False")]
public Dictionary`2<long, SharedFormulaRecord> SharedFormulas { get; }
    private int SharedCount { get; }
    public WorkbookImpl Workbook { get; }
    public RecordTable(int iRowCount, IInternalWorksheet sheet);
    protected RecordTable(RecordTable data, bool clone, IInternalWorksheet sheet);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public virtual object Clone();
    public virtual object Clone(IInternalWorksheet parentWorksheet);
    [DebuggerStepThroughAttribute]
public IApplication get_Application();
    public ApplicationImpl get_AppImplementation();
    public ArrayListEx get_Rows();
    public int get_RowCount();
    public void set_RowCount(int value);
    public int get_FirstRow();
    public int get_LastRow();
    public object get_Item(int rowIndex, int colIndex);
    public void set_Item(int rowIndex, int colIndex, object value);
    public Dictionary`2<long, SharedFormulaRecord> get_SharedFormulas();
    private int get_SharedCount();
    public WorkbookImpl get_Workbook();
    public void Clear();
    internal void UpdateRows(int rowCount);
    public virtual RowStorage CreateCellCollection(int iRowIndex, int height, ExcelVersion version);
    public bool Contains(int rowIndex, int colIndex);
    [CLSCompliantAttribute("False")]
public ArrayRecord GetArrayRecord(ICellPositionFormat cell);
    public void AccessRow(int iRowIndex);
    public void SetRow(int iRowIndex, RowStorage row);
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public void RemoveLastColumn(int iColumnIndex);
    public void RemoveRow(int iRowIndex);
    public void UpdateNameIndexes(WorkbookImpl book, Int32[] arrNewIndex);
    public void UpdateNameIndexes(WorkbookImpl book, IDictionary`2<int, int> dicNewIndex);
    public void ReplaceSharedFormula(WorkbookImpl book);
    [CLSCompliantAttribute("False")]
public void ReplaceSharedFormula(WorkbookImpl book, int row, int column, SharedFormulaRecord shared);
    public void UpdateStringIndexes(List`1<int> arrNewIndexes);
    public void CopyCells(RecordTable sourceCells, SSTDictionary sourceSST, SSTDictionary destSST, Dictionary`2<int, int> hashExtFormatIndexes, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> dicNameIndexes, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<int, int> dictExternSheet);
    public List`1<long> Find(IRange range, string findValue, ExcelFindType flags, bool bIsFindFirst, WorkbookImpl book);
    public List`1<long> Find(IRange range, string findValue, ExcelFindType flags, ExcelFindOptions findOptions, bool bIsFindFirst, WorkbookImpl book);
    public List`1<long> Find(IRange range, double findValue, ExcelFindType flags, bool bIsFindFirst, WorkbookImpl book);
    public List`1<long> Find(IRange range, byte findValue, bool bErrorCode, bool bIsFindFirst, WorkbookImpl book);
    public int GetMinimumColumnIndex(int iStartRow, int iEndRow);
    public int GetMaximumColumnIndex(int iStartRow, int iEndRow);
    public bool ContainsRow(int iRowIndex);
    public List`1<long> Find(Dictionary`2<int, object> dictIndexes);
    public RecordTable CacheAndRemove(Rectangle rectSource, int iDeltaRow, int iDeltaColumn, Int32& iMaxRow, Int32& iMaxColumn, bool bInsert);
    public void UpdateExtendedFormatIndex(Dictionary`2<int, int> dictFormats);
    public void UpdateExtendedFormatIndex(Int32[] arrFormats);
    public void UpdateExtendedFormatIndex(int maxCount);
    internal void UpdateLabelSSTIndexes(Dictionary`2<int, int> dictUpdatedIndexes, IncreaseIndex method);
    [CLSCompliantAttribute("False")]
public void ExtractRanges(BiffReader reader, bool bIgnoreStyles, SSTDictionary sst, WorksheetImpl sheet, IDecryptor decryptor);
    public void AddSharedFormula(int row, int column, SharedFormulaRecord shared);
    [CLSCompliantAttribute("False")]
public bool ExtractRangesFast(IndexRecord index, BiffReader reader, bool bIgnoreStyles, SSTDictionary sst, WorksheetImpl sheet);
    public RowStorage GetOrCreateRow(int rowIndex, int height, bool bCreate, ExcelVersion version);
    public void EnsureSize(int iSize);
    public void InsertIntoDefaultRows(int iRowIndex, int iRowCount);
    private bool ParseDBCellRecord(DBCellRecord dbCell, BiffReader reader, bool bIgnoreStyles, SSTDictionary sst, WorksheetImpl sheet);
    private int FillRowRecord(RowRecord row, Stream stream, Byte[] arrBuffer, DataProvider provider);
    private bool ReadStorageData(RowRecord row, Stream stream, int iDataSize, Byte[] arrBuffer, SSTDictionary sst);
    public void UpdateFormulaFlags();
    public int GetBoolValue(int iRow, int iCol);
    public int GetFormulaBoolValue(int iRow, int iCol);
    public string GetErrorValue(int iRow, int iCol);
    internal string GetErrorValue(byte value, int iRow);
    public string GetFormulaErrorValue(int iRow, int iCol);
    public double GetNumberValue(int iRow, int iCol);
    public double GetFormulaNumberValue(int iRow, int iCol);
    public string GetStringValue(int iRow, int iCol, SSTDictionary sst);
    public string GetFormulaStringValue(int iRow, int iCol, SSTDictionary sst);
    public Ptg[] GetFormulaValue(int iRow, int iCol);
    public bool HasFormulaRecord(int iRow, int iCol);
    public bool HasFormulaArrayRecord(int iRow, int iCol);
    public TRangeValueType GetCellType(int row, int column, bool bNeedFormulaSubType);
    [CLSCompliantAttribute("False")]
public void SetFormulaValue(int iRow, int iColumn, double value, StringRecord strRecord);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
}
public class Syncfusion.XlsIO.Implementation.Collections.RecordTableEnumerator : object {
    private CellRecordCollection m_table;
    private int m_iRow;
    private RecordTable m_sfTable;
    private int m_iOffset;
    public object Current { get; }
    public object Key { get; }
    public object Value { get; }
    public DictionaryEntry Entry { get; }
    public RecordTableEnumerator(CellRecordCollection table);
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    private bool MoveNextRow();
    public sealed virtual object get_Key();
    public sealed virtual object get_Value();
    public sealed virtual DictionaryEntry get_Entry();
}
public class Syncfusion.XlsIO.Implementation.Collections.RowStorage : object {
    private static int DEF_MEMORY_DELTA;
    private static int DEF_MULRK_PERIOD;
    private static int DEF_MULBLANK_PERIOD;
    private static Int16[] DEF_MULTIRECORDS;
    private static TBIFFRecord[] DEF_MULTIRECORDS_SUBTYPES;
    private int m_iFirstColumn;
    private int m_iLastColumn;
    private int m_iUsedSize;
    private DataProvider m_dataProvider;
    private StorageOptions m_options;
    private int m_iCurrentColumn;
    private int m_iCurrentOffset;
    private ExcelVersion m_version;
    private WorkbookImpl m_book;
    private int m_row;
    private bool m_isWrapText;
    private String[] dateFormats;
    private bool m_hasRowHeight;
    private ushort m_usHeight;
    private OptionFlags m_optionFlags;
    private ushort m_usXFIndex;
    private static string DEF_DOT;
    internal TableRecord m_tableRecord;
    internal bool m_isFilteredRow;
    internal List`1<int> m_columnFilterHideRow;
    private bool m_autoHeight;
    private bool m_customStyle;
    private double m_dyDescent;
    internal int Row { get; internal set; }
    public int FirstColumn { get; public set; }
    public int LastColumn { get; public set; }
    public int UsedSize { get; }
    public int DataSize { get; }
    public bool HasRkBlank { get; public set; }
    public bool HasMultiRkBlank { get; public set; }
    private bool Disposed { get; private set; }
    public bool IsWrapText { get; public set; }
    public DataProvider Provider { get; }
    public int CellPositionSize { get; }
    public ExcelVersion Version { get; }
    internal double DyDescent { get; internal set; }
    internal bool HasRowHeight { get; internal set; }
    internal bool AutoHeight { get; internal set; }
    internal bool CustomStyle { get; internal set; }
    public TBIFFRecord TypeCode { get; }
    public int RecordCode { get; }
    public bool NeedDataArray { get; }
    public long StreamPos { get; public set; }
    [CLSCompliantAttribute("False")]
public ushort Height { get; public set; }
    [CLSCompliantAttribute("False")]
public ushort ExtendedFormatIndex { get; public set; }
    [CLSCompliantAttribute("False")]
public ushort OutlineLevel { get; public set; }
    public bool IsCollapsed { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsBadFontHeight { get; public set; }
    public bool IsFormatted { get; public set; }
    public bool IsSpaceAboveRow { get; public set; }
    public bool IsSpaceBelowRow { get; public set; }
    public bool IsGroupShown { get; public set; }
    private ushort Syncfusion.XlsIO.Parser.Biff_Records.IOutline.Index { get; private set; }
    internal bool IsFilteredRow { get; internal set; }
    internal List`1<int> ColumnFilterHideRow { get; }
    public RowStorage(int iRowNumber, int height, int xfIndex);
    private static RowStorage();
    public void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    internal int get_Row();
    internal void set_Row(int value);
    public int get_FirstColumn();
    public void set_FirstColumn(int value);
    public int get_LastColumn();
    public void set_LastColumn(int value);
    public int get_UsedSize();
    public int get_DataSize();
    public bool get_HasRkBlank();
    public void set_HasRkBlank(bool value);
    public bool get_HasMultiRkBlank();
    public void set_HasMultiRkBlank(bool value);
    private bool get_Disposed();
    private void set_Disposed(bool value);
    public bool get_IsWrapText();
    public void set_IsWrapText(bool value);
    public DataProvider get_Provider();
    public int get_CellPositionSize();
    public ExcelVersion get_Version();
    internal double get_DyDescent();
    internal void set_DyDescent(double value);
    internal bool get_HasRowHeight();
    internal void set_HasRowHeight(bool value);
    internal bool get_AutoHeight();
    internal void set_AutoHeight(bool value);
    internal bool get_CustomStyle();
    internal void set_CustomStyle(bool value);
    public IEnumerator GetEnumerator(RecordExtractor recordExtractor);
    public void SetCellStyle(int iRow, int iColumn, int iXFIndex, int iBlockSize);
    [CLSCompliantAttribute("False")]
public BiffRecordRaw GetRecordAtOffset(int iOffset);
    [CLSCompliantAttribute("False")]
public ICellPositionFormat GetRecord(int iColumnIndex, int iBlockSize);
    [CLSCompliantAttribute("False")]
public ICellPositionFormat GetRecord(int iColumnIndex, int iBlockSize, RecordExtractor recordExtractor);
    [CLSCompliantAttribute("False")]
public void SetRecord(int iColumnIndex, ICellPositionFormat cell, int iBlockSize);
    public void ClearData();
    public void SetFormulaStringValue(int iColumnIndex, string strValue, int iBlockSize);
    [CLSCompliantAttribute("False")]
public void SetArrayRecord(int iColumnIndex, ArrayRecord array, int iBlockSize);
    [CLSCompliantAttribute("False")]
public ArrayRecord GetArrayRecordByOffset(int iOffset);
    [CLSCompliantAttribute("False")]
public ArrayRecord GetArrayRecord(int iColumnIndex);
    public sealed virtual object Clone();
    private IntPtr GetHeapHandle();
    public object Clone(IntPtr heapHandle);
    public RowStorage Clone(int iStartColumn, int iEndColumn, int iBlockSize);
    public RowStorage Clone(SSTDictionary sourceSST, SSTDictionary destSST, Dictionary`2<int, int> hashExtFormatIndexes, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> dicNameIndexes, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<int, int> dictExternSheets);
    public void Remove(int iStartColumn, int iEndColumn, int blockSize);
    public void SetArrayFormulaIndex(int iColumn, int iArrayRow, int iArrayColumn, int iBlockSize);
    public bool Contains(int iColumn);
    public void InsertRowData(RowStorage sourceRow, int iBlockSize, IntPtr heapHandle);
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect, int iBlockSize, WorkbookImpl book);
    internal void UpdateSubTotalFormula(List`1<int> insertedRows, int iCurIndex, int iSourceIndex, int iDestIndex, WorkbookImpl book);
    public void RowColumnOffset(int iDeltaRow, int iDeltaCol, int iBlockSize);
    public void UpdateNameIndexes(WorkbookImpl book, Int32[] arrNewIndex, int iBlockSize);
    public void UpdateNameIndexes(WorkbookImpl book, IDictionary`2<int, int> dicNewIndex, int iBlockSize);
    [CLSCompliantAttribute("False")]
public void ReplaceSharedFormula(WorkbookImpl book, int row, int column, SharedFormulaRecord shared);
    public void UpdateStringIndexes(List`1<int> arrNewIndexes);
    public List`1<long> Find(int iFirstColumn, int iLastColumn, string findValue, ExcelFindType flags, int iErrorCode, bool bIsFindFirst, WorkbookImpl book);
    public List`1<long> Find(int iFirstColumn, int iLastColumn, string findValue, ExcelFindType flags, ExcelFindOptions findOptions, int iErrorCode, bool bIsFindFirst, WorkbookImpl book);
    internal List`1<long> Find(int iFirstColumn, int iLastColumn, string findValue, ExcelFindType flags, ExcelFindOptions findOptions, int iErrorCode, bool bIsFindFirst, WorkbookImpl book, int sheetIndex);
    internal List`1<long> Find(int iFirstColumn, int iLastColumn, string findValue, ExcelFindType flags, ExcelFindOptions findOptions, int iErrorCode, bool bIsFindFirst, WorkbookImpl book, int sheetIndex, Regex wildCardRegex);
    internal static bool CheckStringValue(string first, string second, ExcelFindOptions options, WorkbookImpl book, Regex wildcardRegex);
    public List`1<long> Find(int iFirstColumn, int iLastColumn, double findValue, ExcelFindType flags, bool bIsFindFirst, WorkbookImpl book);
    public List`1<long> Find(int iFirstColumn, int iLastColumn, byte findValue, bool bError, bool bIsFindFirst, WorkbookImpl book);
    public void Find(Dictionary`2<int, object> dictIndexes, List`1<long> arrRanges);
    public int MoveNextCell(int iOffset);
    public void UpdateExtendedFormatIndex(Dictionary`2<int, int> dictFormats, int iBlockSize);
    public void UpdateExtendedFormatIndex(Int32[] arrFormats, int iBlockSize);
    public void UpdateExtendedFormatIndex(int maxCount, int defaultXF);
    public void UpdateLabelSSTIndexes(Dictionary`2<int, int> dictUpdatedIndexes, IncreaseIndex method);
    public void AppendRecordData(short type, short length, BiffRecordRaw data, int iBlockSize);
    [CLSCompliantAttribute("False")]
public void AppendRecordData(short type, short length, Byte[] data, int iBlockSize);
    public void AppendRecordData(int length, Byte[] data, int iBlockSize);
    public void InsertRecordData(int columnIndex, int length, Byte[] data, int iBlockSize);
    [CLSCompliantAttribute("False")]
public void AppendRecordData(BiffRecordRaw[] records, Byte[] arrBuffer, bool bIgnoreStyles, int iBlockSize);
    public void Decompress(bool bIgnoreStyles, int iBlockSize);
    public void Compress();
    public bool PrepareRowData(SSTDictionary sst, Dictionary`2& arrShared);
    [CLSCompliantAttribute("False")]
public void UpdateRowInfo(RowRecord row, bool useFastParsing);
    [CLSCompliantAttribute("False")]
public RowRecord CreateRowRecord(WorkbookImpl book);
    public void CopyRowRecordFrom(RowStorage sourceRow);
    public void SetDefaultRowOptions();
    public void UpdateColumnIndexes(int iColumnIndex, int iLastColumnIndex);
    public void SetCellPositionSize(int newSize, int iBlockSize, ExcelVersion version);
    public int GetXFIndexByColumn(int column);
    public void ReAddAllStrings(SSTDictionary sst);
    public void SetVersion(ExcelVersion version, int iBlockSize);
    private void UpdateColumns();
    public void IterateCells(CellMethod method, object data);
    public void MarkCellUsedReferences(TBIFFRecord recordType, int offset, object data);
    public void UpdateReferenceIndexes(TBIFFRecord recordType, int offset, object data);
    internal void CreateDataProvider(IntPtr heapHandle);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    public int FindRecord(TBIFFRecord recordType, int startColumn, int endColumn);
    public int FindFirstCell(int startColumn, int endColumn);
    internal void GetUsedNames(Dictionary`2<int, object> result);
    private void AddNamedRangeTokens(Dictionary`2<int, object> result, Ptg[] tokens);
    private void InsertRecordData(int iOffset, BiffRecordRaw[] records);
    private void ShrinkDataStorage();
    private void ExtendDataStorage(int iBlockSize);
    private void EnlargeCellRecord(DataProvider result, Int32& iWriteOffset, int iReadOffset, TBIFFRecord code, int iLength, int iRow, int iColumn);
    private void EnlargeFormulaRecord(DataProvider result, Int32& iWriteOffset, FormulaRecord formula);
    private int GetEnlargedDataSize(List`1<FormulaRecord> arrFormulas);
    private int GetRecordCount();
    private void UpdateRecordsAfterCopy(SSTDictionary sourceSST, SSTDictionary destSST, Dictionary`2<int, int> hashExtFormatIndexes, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> dicNameIndexes, Dictionary`2<int, int> dicFontIndexes, Dictionary`2<int, int> dictExternSheets);
    private void UpdateMulReference(Dictionary`2<int, int> hashXFIndexes, int iOffset, int iLength, bool bIsMulRK);
    private void UpdateLabelSST(SSTDictionary sourceSST, SSTDictionary destSST, int iOffset, bool bIsLocal, Dictionary`2<int, int> dicFontIndexes);
    private void UpdateFormulaRefs(SSTDictionary sourceSST, SSTDictionary destSST, int iOffset, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> dicNameIndexes, int iLength, Dictionary`2<int, int> dictExternSheets);
    private bool UpdateSheetReferences(FormulaRecord formula, IDictionary dicSheetNames, WorkbookImpl sourceBook, WorkbookImpl destBook);
    private bool UpdateNameReferences(FormulaRecord formula, Dictionary`2<int, int> dicNameIndexes);
    private bool UpdateNameSheetReferences(FormulaRecord formula, Dictionary`2<string, string> dicSheetNames, WorkbookImpl sourceBook, WorkbookImpl destBook, Dictionary`2<int, int> dicNameIndexes, Dictionary`2<int, int> dictExternSheets);
    internal static int ChangeExternSheet(WorkbookImpl sourceBook, WorkbookImpl destBook, int iSheetIndex, int iNewRefIndex);
    private static ExternWorkbookImpl GetExternBook(WorkbookImpl sourceBook, WorkbookImpl destBook, int bookIndex);
    private void UpdateNameIndex(Ptg token, Dictionary`2<int, int> dicNameIndexes);
    private bool IsSameSubType(ICellPositionFormat cell, int iOffset);
    private int SplitRecord(int iOffset, int iColumnIndex, int iBlockSize);
    private void InsertIntoRecord(int iOffset, ICellPositionFormat cell);
    private void InsertRecordData(int iOffset, int iPreparedSize, int iRequiredSize, BiffRecordRaw record, int iBlockSize);
    private void InsertRecordData(int iOffset, int iPreparedSize, IList arrRecords, int iBlockSize);
    private int LocateRecord(int iColumnIndex, Boolean& bFound);
    private int LocateRecord(int iColumnIndex, Boolean& bFound, Boolean& bMul, bool bGetRkOffset);
    private bool GetOffsetToSubRecord(Int32& iOffset, int iLength, int iCurrentColumn, int iColumnIndex, Boolean& bMul, TBIFFRecord biffCode, bool bGetRkOffset);
    private void EnsureSize(int iRequiredSize, int iBlockSize);
    private void AccessColumn(int iColumnIndex);
    private void AccessColumn(int iColumnIndex, ICellPositionFormat cell);
    private int RemoveFormulaStringValue(int iColumnIndex);
    private int RemoveFormulaStringValue(int iColumnIndex, Int32& iFormulaRecordOffset);
    private void RemoveRecord(int iOffset);
    private int MoveNext(int iOffset);
    private Point GetOffsets(int iStartColumn, int iEndColumn, Int32& iRealStartColumn, Int32& iRealEndColumn);
    private int MoveAfterRecord(int iOffset);
    private IMultiCellRecord CreateMultiRecord(TBIFFRecord subCode);
    private ICellPositionFormat GetNextColumnRecord(int iColumnIndex, ICellPositionFormat prevRecord, Int32& iOffset, bool bMulti);
    private int GetLastColumnFromMultiRecord(int iOffset);
    private void SetOrdinaryRecord(int iColumnIndex, ICellPositionFormat cell, int iBlockSize);
    private int DefragmentDataStorage(DefragmentHelper rkRecordHelper, DefragmentHelper blankRecordHelper, DefragmentHelper ordinaryHelper, object userData);
    private int SkipRecord(object userData);
    private int SkipRKRecords(object userData);
    private int SkipBlankRecords(object userData);
    private int CompressRecord(object userData);
    private int CompressRKRecords(object userData);
    private int CompressBlankRecords(object userData);
    private MulRKRecord CreateMulRKRecord(WriteData writeData, int iRecordsCount);
    private MulRKRecord CreateMulRKRecord(int iOffset, int iRecordsCount);
    private MulBlankRecord CreateMulBlankRecord(int iOffset, int iRecordsCount);
    private List`1<int> GetMultiRecordsOffsets(MulBlankRecord mulBlank, MulRKRecord mulRK, Int32& iSizeDelta);
    private void DecompressStorage(List`1<int> arrOffsets, int iSizeDelta, MulBlankRecord mulBlank, MulRKRecord mulRK, bool bIgnoreStyles);
    private IMultiCellRecord CreateMultiCellRecord(int iOffset, MulBlankRecord mulBlank, MulRKRecord mulRK, Int32& iLength);
    private void DecompressRecord(int iOffset, IMultiCellRecord multi, bool bIgnoreStyles);
    public int GetRow(int recordStart);
    private void SetRow(int recordStart, int rowIndex);
    public int GetColumn(int recordStart);
    private void SetColumn(int recordStart, int columnIndex);
    private int GetLastColumn(int recordStart, int iLength);
    [CLSCompliantAttribute("False")]
public ushort GetXFIndex(int recordStart, bool bMulti);
    private void SetXFIndex(int recordStart, ushort xfIndex);
    private void SetXFIndexMulti(int recordStart, ushort xfIndex, int iColumnIndex, int subRecordSize);
    internal void UpdateFormulaFlags();
    public sealed virtual TBIFFRecord get_TypeCode();
    public sealed virtual int get_RecordCode();
    public sealed virtual bool get_NeedDataArray();
    public sealed virtual long get_StreamPos();
    public sealed virtual void set_StreamPos(long value);
    public sealed virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    public int GetBoolValue(int iCol);
    public int GetFormulaBoolValue(int iCol);
    public string GetErrorValue(int iCol);
    public string GetFormulaErrorValue(int iCol);
    public double GetNumberValue(int iCol, int sheetIndex);
    private bool CheckFormat(string format);
    public double GetFormulaNumberValue(int iCol);
    public string GetStringValue(int iColumn, SSTDictionary sst);
    public string GetFormulaStringValue(int iColumnIndex);
    public string GetFormulaStringValueByOffset(int iOffset);
    public Ptg[] GetFormulaValue(int iCol);
    public TRangeValueType GetCellType(int iCol, bool bNeedFormulaSubType);
    private TRangeValueType GetSubFormulaType(int iOffset);
    public bool HasFormulaRecord(int iColumn);
    public bool HasFormulaArrayRecord(int iCol);
    internal string GetErrorString(int value);
    internal void SetWorkbook(WorkbookImpl book, int iRow);
    [CLSCompliantAttribute("False")]
public void SetFormulaValue(int iColumn, double value, StringRecord strRecord, int iBlockSize);
    public ushort get_Height();
    public void set_Height(ushort value);
    public sealed virtual ushort get_ExtendedFormatIndex();
    public sealed virtual void set_ExtendedFormatIndex(ushort value);
    public sealed virtual ushort get_OutlineLevel();
    public sealed virtual void set_OutlineLevel(ushort value);
    public sealed virtual bool get_IsCollapsed();
    public sealed virtual void set_IsCollapsed(bool value);
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    public bool get_IsBadFontHeight();
    public void set_IsBadFontHeight(bool value);
    public bool get_IsFormatted();
    public void set_IsFormatted(bool value);
    public bool get_IsSpaceAboveRow();
    public void set_IsSpaceAboveRow(bool value);
    public bool get_IsSpaceBelowRow();
    public void set_IsSpaceBelowRow(bool value);
    public bool get_IsGroupShown();
    public void set_IsGroupShown(bool value);
    private sealed virtual override ushort Syncfusion.XlsIO.Parser.Biff_Records.IOutline.get_Index();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IOutline.set_Index(ushort value);
    internal bool get_IsFilteredRow();
    internal void set_IsFilteredRow(bool value);
    internal List`1<int> get_ColumnFilterHideRow();
}
public class Syncfusion.XlsIO.Implementation.Collections.RowStorageEnumerator : object {
    private RowStorage m_rowStorage;
    private int m_iOffset;
    private RecordExtractor m_recordExtractor;
    public object Current { get; }
    public int RowIndex { get; }
    public int ColumnIndex { get; }
    public int XFIndex { get; }
    public RowStorageEnumerator(RowStorage row, RecordExtractor recordExtractor);
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
    [CLSCompliantAttribute("False")]
public ArrayRecord GetArrayRecord();
    public string GetFormulaStringValue();
    public int get_RowIndex();
    public int get_ColumnIndex();
    public int get_XFIndex();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.SFArrayList`1 : List`1<T> {
    public T Item { get; public set; }
    public SFArrayList`1(ICollection`1<T> c);
    public sealed virtual object Clone();
    public object Clone(object parent);
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public void EnsureCount(int value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.SFTable : object {
    private int m_iRowCount;
    private int m_iColumnCount;
    private SFArrayList`1<object> m_arrRows;
    private int m_iCellCount;
    public SFArrayList`1<object> Rows { get; }
    public int RowCount { get; }
    public int ColCount { get; }
    public int CellCount { get; }
    public object Item { get; public set; }
    public SFTable(int iRowCount, int iColumnCount);
    protected SFTable(SFTable data, bool clone);
    protected SFTable(SFTable data, bool clone, object parent);
    public virtual object Clone();
    public virtual object Clone(object parent);
    public SFArrayList`1<object> get_Rows();
    public int get_RowCount();
    public int get_ColCount();
    public int get_CellCount();
    public void Clear();
    public virtual SFArrayList`1<object> CreateCellCollection();
    public bool Contains(int rowIndex, int colIndex);
    public object get_Item(int rowIndex, int colIndex);
    public void set_Item(int rowIndex, int colIndex, object value);
}
[DefaultMemberAttribute("Item")]
public abstract class Syncfusion.XlsIO.Implementation.Collections.ShapeCollectionBase : CollectionBaseEx`1<IShape> {
    public static int DEF_ID_PER_GROUP;
    public static int DEF_SHAPES_ROUND_VALUE;
    private MsofbtSpContainer m_groupInfo;
    protected WorksheetBaseImpl m_sheet;
    private int m_iCollectionIndex;
    private int m_iLastId;
    private int m_iStartId;
    private List`1<MsofbtRegroupItems> m_arrRegroundItems;
    private Stream m_layoutStream;
    public int ShapesCount { get; }
    public int ShapesTotalCount { get; }
    public WorksheetBaseImpl WorksheetBase { get; }
    public WorksheetImpl Worksheet { get; }
    public WorkbookImpl Workbook { get; }
    public IShape Item { get; }
    public IShape Item { get; }
    internal Stream ShapeLayoutStream { get; internal set; }
    public TBIFFRecord RecordCode { get; }
    public WorkbookShapeDataImpl ShapeData { get; }
    internal int CollectionIndex { get; internal set; }
    internal int LastId { get; internal set; }
    internal int StartId { get; internal set; }
    public ShapeCollectionBase(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ShapeCollectionBase(IApplication application, object parent, MsofbtSpgrContainer container, ExcelParseOptions options);
    protected virtual void InitializeCollection();
    protected void SetParents();
    public int get_ShapesCount();
    public int get_ShapesTotalCount();
    public WorksheetBaseImpl get_WorksheetBase();
    public WorksheetImpl get_Worksheet();
    public WorkbookImpl get_Workbook();
    public sealed virtual IShape get_Item(int index);
    public sealed virtual IShape get_Item(string strShapeName);
    internal Stream get_ShapeLayoutStream();
    internal void set_ShapeLayoutStream(Stream value);
    public abstract virtual TBIFFRecord get_RecordCode();
    public abstract virtual WorkbookShapeDataImpl get_ShapeData();
    internal int get_CollectionIndex();
    internal void set_CollectionIndex(int value);
    internal int get_LastId();
    internal void set_LastId(int value);
    internal int get_StartId();
    internal void set_StartId(int value);
    private void Parse(MsofbtSpgrContainer container, ExcelParseOptions options);
    private void ParseGroupDescription(MsofbtSpContainer groupDescription);
    public void ParseMsoStructures(List`1<MsoBase> arrStructures, ExcelParseOptions options);
    private void ParseMsoDgContainer(MsofbtDgContainer dgContainer, ExcelParseOptions options);
    private void ParseMsoDg(MsofbtDg dgRecord);
    public IShape AddCopy(ShapeImpl sourceShape);
    public IShape AddCopy(ShapeImpl sourceShape, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes);
    internal string UpdateMacro(ShapeImpl sourceShape, ShapeImpl destShape, string onAction);
    public sealed virtual IShape AddCopy(IShape sourceShape);
    public sealed virtual IShape AddCopy(IShape sourceShape, Dictionary`2<string, string> hashNewNames, List`1<int> arrFontIndexes);
    public ShapeImpl AddShape(ShapeImpl newShape);
    [CLSCompliantAttribute("False")]
protected ShapeImpl AddShape(MsoBase shape, ExcelParseOptions options);
    protected ShapeImpl AddGroupShape(MsofbtSpgrContainer shapes, ExcelParseOptions options);
    protected ShapeImpl CreateGroupShape(MsofbtSpgrContainer shapes, ExcelParseOptions options);
    [CLSCompliantAttribute("False")]
protected ShapeImpl AddChildShapes(MsofbtSpContainer shapeContainer, ExcelParseOptions options);
    [CLSCompliantAttribute("False")]
protected virtual ShapeImpl AddShape(MsofbtSpContainer shapeContainer, ExcelParseOptions options);
    [CLSCompliantAttribute("False")]
protected virtual ShapeImpl CreateShape(TObjType objType, MsofbtSpContainer shapeContainer, ExcelParseOptions options, List`1<ObjSubRecord> subRecords, int cmoIndex);
    public void Remove(IShape shape);
    public virtual object Clone(object parent);
    protected virtual void RegisterInWorksheet();
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private List`1<int> GetChartExIndexesList();
    private void WriteData(BiffRecordRaw record, MemoryStream buffer, int iCurPos, int size);
    [CLSCompliantAttribute("False")]
protected virtual void CreateData(Stream stream, MsofbtDgContainer dgContainer, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
}
public class Syncfusion.XlsIO.Implementation.Collections.ShapesCollection : ShapeCollectionBase {
    public static string DefaultChartNameStart;
    public static string DefaultTextBoxNameStart;
    public static string DefaultCheckBoxNameStart;
    public static string DefaultOptionButtonNameStart;
    public static string DefaultComboBoxNameStart;
    public static string DefaultPictureNameStart;
    internal static string DefaultOleObjectNameStart;
    internal static string DefaultGroupShapeNameStart;
    internal CommentsCollection m_comments;
    public IComments Comments { get; }
    public CommentsCollection InnerComments { get; }
    public TBIFFRecord RecordCode { get; }
    public WorkbookShapeDataImpl ShapeData { get; }
    public ShapesCollection(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ShapesCollection(IApplication application, object parent, MsofbtSpgrContainer container, ExcelParseOptions options);
    protected virtual void InitializeCollection();
    public IComments get_Comments();
    public CommentsCollection get_InnerComments();
    public virtual TBIFFRecord get_RecordCode();
    public virtual WorkbookShapeDataImpl get_ShapeData();
    public sealed virtual IPictureShape AddPicture(Image image, string pictureName, ExcelImageFormat imageFormat);
    internal BitmapShapeImpl AddPictureAsLink(string strPictureName);
    public sealed virtual ICommentShape AddComment(string commentText);
    public sealed virtual ICommentShape AddComment(string commentText, bool bIsParseOptions);
    public sealed virtual ICommentShape AddComment();
    public sealed virtual IChartShape AddChart();
    public sealed virtual ITextBoxShapeEx AddTextBox();
    public sealed virtual ICheckBoxShape AddCheckBox();
    public sealed virtual IOptionButtonShape AddOptionButton();
    public sealed virtual IComboBoxShape AddComboBox();
    public void RegenerateComboBoxNames();
    [CLSCompliantAttribute("False")]
protected virtual ShapeImpl CreateShape(TObjType objType, MsofbtSpContainer shapeContainer, ExcelParseOptions options, List`1<ObjSubRecord> subRecords, int cmoIndex);
    private ShapeImpl ChoosePictureShape(MsofbtSpContainer shapeContainer, ExcelParseOptions options, List`1<ObjSubRecord> subRecords, int cmoIndex);
    public FormControlShapeImpl AddFormControlShape();
    public void InnerRemoveComment(ICommentShape comment);
    public bool CanInsertRowColumn(int iIndex, int iCount, bool bRow, int iMaxIndex);
    public void InsertRemoveRowColumn(int iIndex, int iCount, bool bRow, bool bRemove);
    public BitmapShapeImpl AddPicture(int iBlipId, string strPictureName);
    public void AddPicture(BitmapShapeImpl shape);
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public virtual object Clone(object parent);
    public void CopyMoveShapeOnRangeCopy(WorksheetImpl destSheet, Rectangle rec, Rectangle recDest, bool bIsCopy);
    public void SetVersion(ExcelVersion version);
    internal void UpdateNamedRangeIndexes(Int32[] arrNewIndex);
    internal void UpdateNamedRangeIndexes(IDictionary`2<int, int> dicNewIndex);
    private IList`1<IShape> SortingTList(IList`1<IShape> list);
    private IList`1<IShape> SortingBList(IList`1<IShape> list);
    private IList`1<IShape> SortingLList(IList`1<IShape> list);
    private IList`1<IShape> SortingRList(IList`1<IShape> list);
    public IShape GetShapeById(int id);
    internal IShape GetOLEShapeById(int id);
    private ShapeImpl GetShapeFromGroupShape(GroupShapeImpl groupShape, int id);
    public sealed virtual IShape AddAutoShapes(AutoShapeType autoShapeType, int topRow, int leftColumn, int height, int width);
    public sealed virtual IGroupShape Group(IShape[] groupItems);
    internal GroupShapeImpl Group(GroupShapeImpl groupShape, IShape[] groupItems, bool isRemove);
    public sealed virtual void Ungroup(IGroupShape groupShape);
    public sealed virtual void Ungroup(IGroupShape groupShape, bool isAll);
    private void UngroupShapes(IGroupShape groupShape, bool isAll, bool IsRemove);
    internal GroupShapeImpl AddGroupShape(GroupShapeImpl groupShape, ShapeImpl[] shapes);
    internal void Remove(IShape shape);
    internal IShape AddAutoShapes(AutoShapeType autoShapeType, int topRow, int topRowOffset, int leftColumn, int leftColumnOffset, int height, int width);
    private static string GenerateDefaultAutoShapeName(string strStart, int autoShapeCount);
    private static string GetAutoShapeName(AutoShapeType autoShapeType);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.StylesCollection : CollectionBaseEx`1<IStyle> {
    private Dictionary`2<StyleImpl, StyleImpl> m_map;
    private Dictionary`2<string, StyleImpl> m_dictStyles;
    private Dictionary`2<int, StyleImpl> m_hashIndexToStyle;
    private WorkbookImpl m_holder;
    private EventHandler m_beforeChange;
    private EventHandler m_afterChange;
    public IStyle Item { get; }
    public Dictionary`2<StyleImpl, StyleImpl> Map { get; }
    public StylesCollection(IApplication application, object parent);
    public sealed virtual IStyle get_Item(string name);
    public sealed virtual IStyle Add(string name, object BasedOn);
    public sealed virtual IStyle Add(string name);
    public sealed virtual IStyles Merge(object Workbook);
    public sealed virtual IStyles Merge(object Workbook, bool overwrite);
    public sealed virtual void Remove(string styleName);
    public void Add(IStyle style);
    public void Add(IStyle style, bool bReplace);
    public sealed virtual bool Contains(string name);
    public IStyle ContainsSameStyle(IStyle style);
    public static bool CompareStyles(IStyle source, IStyle destination);
    public static bool CompareBorders(IBorders source, IBorders destination);
    public static bool CompareBorder(IBorder source, IBorder destination);
    public Dictionary`2<string, string> Merge(IWorkbook workbook, ExcelStyleMergeOptions option);
    public Dictionary`2<string, string> Merge(IWorkbook workbook, ExcelStyleMergeOptions option, Dictionary`2& dicFontIndexes, Dictionary`2& hashExtFormatIndexes);
    internal Dictionary`2<string, string> MergeStyles(IWorkbook workbook, ExcelStyleMergeOptions option, Dictionary`2<int, int> hashExtFormatIndexes);
    public string GenerateDefaultName(string strStart);
    public string GenerateDefaultName(string strStart, Dictionary`2<string, StyleRecord> hashNamesInFile);
    public StyleImpl CreateBuiltInStyle(string strName);
    public StyleImpl GetByXFIndex(int index);
    public void UpdateStyleRecords();
    internal IStyle Find(string styleName);
    internal bool ContainsName(string styleName);
    [CLSCompliantAttribute("False")]
public StyleImpl Add(StyleRecord style);
    public virtual object Clone(object parent);
    public Dictionary`2<StyleImpl, StyleImpl> get_Map();
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, IStyle value);
    protected virtual void OnRemoveComplete(int index, IStyle value);
    protected virtual void OnSetComplete(int index, IStyle oldValue, IStyle newValue);
    private void OnStyleBeforeChange(object sender, EventArgs args);
    private void OnStyleAfterChange(object sender, EventArgs args);
    internal void ClearStylesHash();
    internal void Dispose();
    internal IStyle GetStyleIgnoringCase(string styleName);
}
public class Syncfusion.XlsIO.Implementation.Collections.TabSheetMovedEventArgs : EventArgs {
    private int m_iOldIndex;
    private int m_iNewIndex;
    public int OldIndex { get; }
    public int NewIndex { get; }
    public TabSheetMovedEventArgs(int oldIndex, int newIndex);
    public int get_OldIndex();
    public int get_NewIndex();
}
public class Syncfusion.XlsIO.Implementation.Collections.TabSheetMovedEventHandler : MulticastDelegate {
    public TabSheetMovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TabSheetMovedEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, TabSheetMovedEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.TextBoxCollection : CollectionBaseEx`1<ITextBoxShape> {
    private WorksheetBaseImpl m_sheet;
    public ITextBoxShape Item { get; }
    public ITextBoxShape Item { get; }
    public TextBoxCollection(IApplication application, object parent);
    public void AddTextBox(ITextBoxShape textbox);
    public sealed virtual ITextBoxShape get_Item(int index);
    public sealed virtual ITextBoxShape get_Item(string name);
    public sealed virtual ITextBoxShape AddTextBox(int row, int column, int height, int width);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.VPageBreaksCollection : CollectionBaseEx`1<IVPageBreak> {
    private WorkbookImpl m_book;
    public IVPageBreak Item { get; }
    public int ManualBreakCount { get; }
    public TBIFFRecord TypeCode { get; }
    public int RecordCode { get; }
    public bool NeedDataArray { get; }
    public long StreamPos { get; public set; }
    public VPageBreaksCollection(IApplication application, object parent);
    public IVPageBreak get_Item(IRange location);
    public sealed virtual IVPageBreak Add(IRange location);
    public sealed virtual IVPageBreak Remove(IRange location);
    public sealed virtual IVPageBreak GetPageBreak(int iColumn);
    private int GetPageBreakIndex(IRange location);
    public sealed virtual void Clear();
    public int get_ManualBreakCount();
    internal void InsertColumns(int columnIndex, int iColumnCount);
    internal void DeleteColumns(int columnIndex, int columnCount);
    private void FindParents();
    [CLSCompliantAttribute("False")]
public void Parse(VerticalPageBreaksRecord record);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private VerticalPageBreaksRecord PrepareRecord();
    public virtual object Clone(object parent);
    public void Add(VPageBreakImpl pageBreak);
    public void ChangeToExcel97to03Version();
    public sealed virtual TBIFFRecord get_TypeCode();
    public sealed virtual int get_RecordCode();
    public sealed virtual bool get_NeedDataArray();
    public sealed virtual long get_StreamPos();
    public sealed virtual void set_StreamPos(long value);
    public sealed virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.WorkbookNamesCollection : CollectionBaseEx`1<IName> {
    private Char[] SpecialChars;
    internal Dictionary`2<string, IName> m_hashNameToIName;
    private WorkbookImpl m_book;
    private bool m_bWorkNamesChanged;
    public IName Item { get; }
    public IName Item { get; }
    private IName Syncfusion.XlsIO.INames.Item { get; }
    private IName Syncfusion.XlsIO.INames.Item { get; }
    public IWorksheet ParentWorksheet { get; }
    private int Syncfusion.XlsIO.INames.Count { get; }
    public int Count { get; }
    public bool IsWorkbookNamesChanged { get; public set; }
    public WorkbookNamesCollection(IApplication application, object parent);
    public IName get_Item(int index);
    public IName get_Item(string name);
    private sealed virtual override IName Syncfusion.XlsIO.INames.get_Item(int index);
    private sealed virtual override IName Syncfusion.XlsIO.INames.get_Item(string name);
    public sealed virtual IWorksheet get_ParentWorksheet();
    private sealed virtual override int Syncfusion.XlsIO.INames.get_Count();
    public int get_Count();
    public sealed virtual IName Add(string name);
    private void CheckInvalidCharacters(string name);
    protected virtual void OnClearComplete();
    public sealed virtual IName Add(string name, IRange namedRange);
    internal static bool IsValidName(string name, WorkbookImpl book);
    internal void Validate();
    public sealed virtual IName Add(IName name);
    public sealed virtual void Remove(string name);
    public sealed virtual void RemoveAt(int index);
    public void Remove(Int32[] arrIndexes);
    public sealed virtual bool Contains(string name);
    internal bool Contains(string name, bool isFormulaNamedrange);
    public void InsertRow(int iRowIndex, int iRowCount, string strSheetName);
    public void RemoveRow(int iRowIndex, string strSheetName);
    public void RemoveRow(int iRowIndex, string strSheetName, int count);
    public void InsertColumn(int iColumnIndex, int iCount, string strSheetName);
    public void RemoveColumn(int iColumnIndex, string strSheetName);
    public void RemoveColumn(int iColumnIndex, string strSheetName, int count);
    [CLSCompliantAttribute("False")]
public IName Add(NameRecord name);
    [CLSCompliantAttribute("False")]
public void AddRange(NameRecord[] names);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void AddLocal(IName name);
    public void AddLocal(IName name, bool bAddInGlobalNamesHash);
    internal void SortForSerialization();
    private SortedList`2<string, object> GetSortedWorksheets();
    private Int32[] GetNewIndexes(SortedList`2<string, object> list);
    private SortedList`2<string, NameImpl> FindSameNames(NameImpl name, string strGlobalName);
    private void AddNameToList(SortedList`2<string, NameImpl> list, INames names, string strName, string strSheetName);
    private void UpdateIndexes(Int32[] arrNewIndex);
    private void SetIndexesWithoutEvent();
    public void ParseNames();
    public int AddFunctions(string strFunctionName);
    [CLSCompliantAttribute("False")]
public NameRecord GetNameRecordByIndex(int index);
    public IName AddCopy(IName nameToCopy, IWorksheet destSheet, Dictionary`2<int, int> hashExternSheetIndexes, IDictionary hashNewWorksheetNames);
    private void SetReferenceIndex(NameRecord name, int iRefIndex);
    public virtual object Clone(object parent);
    protected virtual void OnInsertComplete(int index, IName value);
    public void ConvertFullRowColumnNames(ExcelVersion version);
    internal IName GetNameByIndex(int index);
    public bool get_IsWorkbookNamesChanged();
    public void set_IsWorkbookNamesChanged(bool value);
    private void SetParent();
    private void InsertRemoveRowColumn(string strSheetName, int index, bool bIsRemove, bool bIsRow, int iCount);
    private Ptg InsertRemoveRow(IRangeGetterToken token, string strSheetName, int index, bool bIsRemove, bool bIsRow, int iCount, IWorksheet sheet);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    private int GetKnownNamedCount();
    internal void MoveNamedRanges(RangeImpl destination, RangeImpl source, ExcelCopyRangeOptions options);
    internal bool IsNameExist(string name);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.WorkbookObjectsCollection : CollectionBaseEx`1<object> {
    private Dictionary`2<string, int> m_hashNameToValue;
    private WorkbookImpl m_book;
    [CompilerGeneratedAttribute]
private TabSheetMovedEventHandler TabSheetMoved;
    [CLSCompliantAttribute("False")]
public ISerializableNamedObject Item { get; }
    public INamedObject Item { get; }
    public IWorkbook Workbook { get; }
    private ITabSheet Syncfusion.XlsIO.ITabSheets.Item { get; }
    public WorkbookObjectsCollection(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public void Add(ISerializableNamedObject namedObject);
    public sealed virtual void Move(int iOldIndex, int iNewIndex);
    public sealed virtual void MoveBefore(ITabSheet sheetToMove, ITabSheet sheetForPlacement);
    public sealed virtual void MoveAfter(ITabSheet sheetToMove, ITabSheet sheetForPlacement);
    public void DisposeInternalData();
    public ISerializableNamedObject get_Item(int index);
    public INamedObject get_Item(string name);
    public IWorkbook get_Workbook();
    public virtual object Clone(object parent);
    private sealed virtual override ITabSheet Syncfusion.XlsIO.ITabSheets.get_Item(int index);
    private void SetParents();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnRemoveComplete(int index, object value);
    private void FindVisibleWorksheet(int proposedIndex);
    protected virtual void OnClearComplete();
    private void object_NameChanged(object sender, ValueChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_TabSheetMoved(TabSheetMovedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TabSheetMoved(TabSheetMovedEventHandler value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.WorkbooksCollection : CollectionBaseEx`1<IWorkbook> {
    private static string UTF16Encoding;
    private static RegexOptions DEF_REGEX;
    public IWorkbook Item { get; }
    public WorkbooksCollection(IApplication application, object parent);
    public sealed virtual IWorkbook get_Item(int Index);
    public sealed virtual IWorkbook Create(String[] names);
    public sealed virtual IWorkbook Create(int sheetsQuantity);
    public sealed virtual IWorkbook Create();
    private void SetAplicatioName(IWorkbook book);
    public sealed virtual IWorkbook Open(Stream stream, string separator, int row, int column);
    public sealed virtual IWorkbook Open(Stream stream, string separator, int row, int column, Encoding encoding);
    private IWorkbook Open(Stream stream, string separator, int row, int column, string fileName, Encoding encoding, ExcelVersion version);
    private IWorkbook OpenInternal(Stream stream, string separator, int row, int column, string fileName, Encoding encoding, ExcelVersion version);
    public sealed virtual IWorkbook Open(Stream stream, string separator);
    public IWorkbook Open(Stream stream, string separator, ExcelVersion version);
    public sealed virtual IWorkbook Open(Stream stream, string separator, Encoding encoding);
    public sealed virtual IWorkbook Open(Stream stream, Encoding encoding);
    public sealed virtual IWorkbook Open(Stream stream, ExcelParseOptions options, bool isReadOnly, string password);
    public sealed virtual IWorkbook Open(Stream stream, ExcelParseOptions options, bool isReadOnly, string password, ExcelVersion excelVersion);
    public sealed virtual IWorkbook Open(Stream stream, ExcelParseOptions options, bool isReadOnly, string password, ExcelOpenType openType);
    public sealed virtual IWorkbook Open(Stream stream);
    public sealed virtual IWorkbook Open(Stream stream, ExcelVersion version);
    public IWorkbook Open(Stream stream, ExcelVersion version, ExcelParseOptions options);
    public sealed virtual IWorkbook Open(Stream stream, ExcelParseOptions options);
    public sealed virtual IWorkbook Open(Stream stream, ExcelOpenType openType, ExcelVersion version);
    public sealed virtual IWorkbook Open(Stream stream, ExcelOpenType openType);
    public sealed virtual IWorkbook Open(Stream stream, ExcelOpenType openType, ExcelParseOptions options);
    private IWorkbook Open(Stream stream, ExcelOpenType openType, string fileName, ExcelVersion version);
    private IWorkbook Open(Stream stream, ExcelOpenType openType, string fileName, ExcelVersion version, ExcelParseOptions options);
    public sealed virtual IWorkbook OpenFromXml(Stream stream, ExcelXmlOpenType openType);
    internal Stream ReplaceValidXmlStream(Stream stream);
    public sealed virtual IWorkbook OpenFromXml(XmlReader reader, ExcelXmlOpenType openType);
    private IWorkbook OpenFromXmlInternal(XmlReader reader, ExcelXmlOpenType openType);
    public sealed virtual void Close();
    private ExcelVersion DetectVersion(string strTemplateFile);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.WorksheetChartsCollection : CollectionBaseEx`1<object> {
    private WorksheetBaseImpl m_sheet;
    public IChartShape Item { get; }
    public IChartShape Item { get; }
    public WorksheetChartsCollection(IApplication application, object parent);
    public IChart AddChart();
    protected internal IChartShape InnerAddChart(IChartShape chart);
    protected internal IChartShape AddChart(IChartShape chart);
    private void SetParents();
    public sealed virtual IChartShape get_Item(int index);
    public sealed virtual IChartShape get_Item(string name);
    public sealed virtual IChartShape Add();
    public sealed virtual void RemoveAt(int index);
}
public class Syncfusion.XlsIO.Implementation.Collections.WorksheetConditionalFormats : CollectionBaseEx`1<ConditionalFormats> {
    private Dictionary`2<ConditionalFormats, ConditionalFormats> m_hash;
    internal Dictionary`2<int, CFExRecord> m_arrCFExRecords;
    internal List`1<int> m_removeConditionalFormat;
    private bool m_isGetCF;
    internal List`1<int> RemoveConditionalFormat { get; internal set; }
    internal bool IsGetCF { get; internal set; }
    public WorksheetConditionalFormats(IApplication application, object parent);
    internal List`1<int> get_RemoveConditionalFormat();
    internal void set_RemoveConditionalFormat(List`1<int> value);
    internal bool get_IsGetCF();
    internal void set_IsGetCF(bool value);
    public ConditionalFormats Find(Rectangle[] arrRanges);
    private ConditionalFormats AddCF(ConditionalFormats outputCF, ConditionalFormats AddCf, bool isNotEqual);
    public ConditionalFormats Contains(ConditionalFormats formats);
    public ConditionalFormats Add(ConditionalFormats formats);
    public void Remove(Rectangle[] arrRanges);
    internal void Remove(Rectangle[] arrRanges, bool isCF);
    public void CopyFrom(WorksheetConditionalFormats arrSourceFormats);
    public virtual object Clone(object parent);
    public void RemoveItem(ConditionalFormats formats);
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    public void Dispose();
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    internal void UpdateCFExProperties(ConditionalFormats conditionalFormats, CFExRecord extRecord);
    private Color ConvertRGBToColor(UInt32 rgb);
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.WorksheetCustomProperties : TypedSortedListEx`2<string, ICustomProperty> {
    public ICustomProperty Item { get; }
    public ICustomProperty Item { get; }
    public WorksheetCustomProperties(IList m_arrRecords, int iCustomPropertyPos);
    public sealed virtual ICustomProperty get_Item(int index);
    public sealed virtual ICustomProperty get_Item(string strName);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public sealed virtual ICustomProperty Add(string strName);
    public ICustomProperty Add(ICustomProperty property);
    [CLSCompliantAttribute("False")]
public void Add(CustomPropertyRecord property);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.WorksheetNamesCollection : CollectionBaseEx`1<IName> {
    internal Dictionary`2<string, IName> m_hashNameToIName;
    private WorkbookImpl m_book;
    private WorksheetImpl m_worksheet;
    public IName Item { get; }
    public IWorksheet ParentWorksheet { get; }
    private int Syncfusion.XlsIO.INames.Count { get; }
    public IName Item { get; }
    public WorksheetNamesCollection(IApplication application, object parent);
    public sealed virtual IName get_Item(string name);
    public sealed virtual IWorksheet get_ParentWorksheet();
    public void Rename(IName name, string strOldName);
    public sealed virtual IName Add(string name);
    public sealed virtual IName Add(string name, IRange namedRange);
    internal IName GetIName(string name);
    public sealed virtual IName Add(IName name);
    public IName Add(IName name, bool bAddInGlobalNamesHash);
    public sealed virtual void Remove(string name);
    public sealed virtual void RemoveAt(int index);
    public void Clear();
    public sealed virtual bool Contains(string name);
    internal bool Contains(string name, bool isFormulaNamedrange);
    private sealed virtual override int Syncfusion.XlsIO.INames.get_Count();
    private int GetKnownNamedCount();
    public sealed virtual IName get_Item(int index);
    public IName AddLocal(IName name);
    [CLSCompliantAttribute("False")]
public IName Add(NameRecord name);
    [CLSCompliantAttribute("False")]
public IName Add(NameRecord name, bool bAddInGlobalNamesHash);
    [CLSCompliantAttribute("False")]
public void AddRange(NameRecord[] names);
    internal void FillFrom(WorksheetNamesCollection sourceNames, IDictionary hashNewWorksheetNames, Dictionary`2<int, int> dicNewNameIndexes, ExcelNamesMergeOptions option, Dictionary`2<int, int> hashExternSheetIndexes);
    internal static void UpdateReferenceIndexes(NameRecord name, WorkbookImpl oldBook, IDictionary hashNewWorksheetNames, Dictionary`2<int, int> hashExternSheetIndexes, WorkbookImpl newBook);
    public void SetSheetIndex(int iSheetIndex);
    public NameImpl GetOrCreateName(string strName);
    public void ConvertFullRowColumnNames(ExcelVersion version);
    internal IName GetNameByIndex(int index);
    private void SetParents();
    protected virtual void OnInsertComplete(int index, IName value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.WorksheetsCollection : CollectionBaseEx`1<IWorksheet> {
    private static int MaxSheetNameLength;
    private Dictionary`2<string, IWorksheet> m_list;
    private WorkbookImpl m_book;
    private bool m_bUseHash;
    internal static String[] sheetNameValidators;
    public IWorksheet Item { get; }
    public IWorksheet Item { get; }
    public bool UseRangesCache { get; public set; }
    public bool UseHashForWorksheetLookup { get; public set; }
    public bool IsRightToLeft { get; public set; }
    public WorksheetsCollection(IApplication application, object parent);
    private static WorksheetsCollection();
    public sealed virtual IWorksheet get_Item(int Index);
    public sealed virtual IWorksheet get_Item(string sheetName);
    public sealed virtual bool get_UseRangesCache();
    public sealed virtual void set_UseRangesCache(bool value);
    public bool get_UseHashForWorksheetLookup();
    public void set_UseHashForWorksheetLookup(bool value);
    internal IWorksheet Add(IWorksheet sheet);
    protected internal void RemoveLocal(string name);
    public void Move(int iOldIndex, int iNewIndex);
    public void UpdateSheetIndex(WorksheetImpl sheet, int iOldRealIndex);
    private void MoveInternal(int iOldSheetIndex, int iNewSheetIndex);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    [CLSCompliantAttribute("False")]
public IWorksheet Add(BiffReader reader, ExcelParseOptions options, bool bSkipParsing, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    public IWorksheet Add(string sheetName);
    public sealed virtual IWorksheet AddCopy(int sheetIndex);
    public sealed virtual IWorksheet AddCopy(int sheetIndex, ExcelWorksheetCopyFlags flags);
    public sealed virtual IWorksheet AddCopy(IWorksheet sheet);
    public sealed virtual IWorksheet AddCopy(IWorksheet sheet, ExcelWorksheetCopyFlags flags);
    internal string GenerateDefaultName(string sheetName);
    private IWorksheet AddCopy(IWorksheet sheet, ExcelWorksheetCopyFlags flags, bool isLocal);
    private void CopyControlsData(WorksheetImpl oldSheet, ExcelWorksheetCopyFlags flags);
    private bool ContainsActiveX(IWorksheet sheet);
    public sealed virtual void AddCopy(IWorksheets worksheets);
    public sealed virtual void AddCopy(IWorksheets worksheets, ExcelWorksheetCopyFlags flags);
    private void CopyConnections(WorkbookImpl sourceBook, WorkbookImpl destBook);
    private WorksheetImpl AddWorksheet(string strSuggestedName, Dictionary`2<string, string> hashWorksheetNames);
    public sealed virtual IWorksheet AddCopyBefore(IWorksheet toCopy);
    public sealed virtual IWorksheet AddCopyBefore(IWorksheet toCopy, IWorksheet sheetAfter);
    public sealed virtual IWorksheet AddCopyAfter(IWorksheet toCopy);
    public sealed virtual IWorksheet AddCopyAfter(IWorksheet toCopy, IWorksheet sheetBefore);
    protected virtual void OnInsertComplete(int index, IWorksheet value);
    protected virtual void OnSetComplete(int index, IWorksheet oldValue, IWorksheet newValue);
    protected virtual void OnRemoveComplete(int index, IWorksheet value);
    protected virtual void OnClearComplete();
    private void sheet_NameChanged(object sender, ValueChangedEventArgs e);
    public sealed virtual IWorksheet Create(string name);
    public sealed virtual IWorksheet Create();
    public sealed virtual void Remove(IWorksheet sheet);
    public sealed virtual void Remove(string sheetName);
    public sealed virtual void Remove(int index);
    public void UpdateStringIndexes(List`1<int> arrNewIndexes);
    public void InnerRemove(int index);
    public void InnerAdd(IWorksheet sheet);
    private static bool ValidateSheetName(string sheetName);
    public bool get_IsRightToLeft();
    public void set_IsRightToLeft(bool value);
    private void Objects_TabSheetMoved(object sender, TabSheetMovedEventArgs args);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Collections.XmlMapCollection : object {
    private IList`1<XmlMap> m_xmlMaps;
    private WorkbookImpl m_parent;
    internal static string MapInfoElement;
    internal static string SelectionNamespacesAttribute;
    public XmlMap Item { get; }
    public int Count { get; }
    public XmlMapCollection(WorkbookImpl parent);
    public XmlMap get_Item(int index);
    public int get_Count();
    public bool Add(Stream stream);
    internal bool Add(Stream stream, IWorksheet sheet, int row, int column);
    internal bool Contains(string rootElement);
    internal bool ContainsName(string name);
    internal void Parse(XmlReader reader);
    internal XmlMap GetXmlMap(string schemaId);
    internal void Serialize(XmlWriter writer);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.ColorConditionValue : ConditionValue {
    private Color m_color;
    public Color FormatColorRGB { get; public set; }
    public ColorConditionValue(ConditionValueType type, string value, Color color);
    public sealed virtual Color get_FormatColorRGB();
    public sealed virtual void set_FormatColorRGB(Color value);
}
internal class Syncfusion.XlsIO.Implementation.ColorConditionValueWrapper : ConditionValueWrapper {
    public Color FormatColorRGB { get; public set; }
    public ConditionValueType Type { get; public set; }
    public string Value { get; public set; }
    public ConditionalFormatOperator Operator { get; public set; }
    private ColorConditionValue Wrapped { get; }
    public ColorConditionValueWrapper(IConditionValue value, IOptimizedUpdate parent);
    public sealed virtual Color get_FormatColorRGB();
    public sealed virtual void set_FormatColorRGB(Color value);
    public sealed virtual ConditionValueType get_Type();
    public sealed virtual void set_Type(ConditionValueType value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual ConditionalFormatOperator get_Operator();
    public sealed virtual void set_Operator(ConditionalFormatOperator value);
    private ColorConditionValue get_Wrapped();
}
[ExtensionAttribute]
internal static class Syncfusion.XlsIO.Implementation.ColorExtension : object {
    internal static Color Black;
    internal static Color White;
    internal static Color Empty;
    internal static Color Red;
    internal static Color Blue;
    internal static Color DarkGray;
    internal static Color Yellow;
    internal static Color Cyan;
    internal static Color Magenta;
    internal static Color Gray;
    internal static Color ChartForeground;
    internal static Color ChartBackground;
    internal static Color ChartNeutral;
    private static object m_lock;
    private static Dictionary`2<string, Color> m_dictSystemColors;
    private static ColorExtension();
    [ExtensionAttribute]
internal static int ToArgb(Color color);
    internal static Color FromArgb(int value);
    internal static Color FromName(string name);
    internal static void AddColors();
}
public class Syncfusion.XlsIO.Implementation.ColorFilter : object {
    private ExcelColorFilterType m_colorFilterType;
    private Color m_color;
    public ExcelFilterType FilterType { get; }
    public ExcelColorFilterType ColorFilterType { get; internal set; }
    public Color Color { get; internal set; }
    public sealed virtual ExcelFilterType get_FilterType();
    public ExcelColorFilterType get_ColorFilterType();
    internal void set_ColorFilterType(ExcelColorFilterType value);
    public Color get_Color();
    internal void set_Color(Color value);
    internal ColorFilter Clone();
}
public class Syncfusion.XlsIO.Implementation.ColorObject : object {
    private ColorType m_colorType;
    internal int m_color;
    private double m_tintAndShade;
    private double m_satMod;
    private double m_lumOff;
    private double m_sat;
    private double m_lumMod;
    private bool m_bIsSchemeColor;
    private string m_schemaName;
    private string m_hexColor;
    [CompilerGeneratedAttribute]
private AfterChangeHandler AfterChange;
    public int Value { get; }
    public double Tint { get; public set; }
    internal double Saturation { get; internal set; }
    internal double Luminance { get; internal set; }
    internal double LuminanceOffSet { get; internal set; }
    internal bool IsSchemeColor { get; internal set; }
    internal string SchemaName { get; internal set; }
    internal string HexColor { get; internal set; }
    public ColorType ColorType { get; public set; }
    public ColorObject(Color color);
    public ColorObject(ExcelKnownColors color);
    public ColorObject(ColorType colorType, int colorValue);
    public ColorObject(ColorType colorType, int colorValue, double tint);
    [CompilerGeneratedAttribute]
public void add_AfterChange(AfterChangeHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterChange(AfterChangeHandler value);
    public int get_Value();
    public double get_Tint();
    public void set_Tint(double value);
    internal double get_Saturation();
    internal void set_Saturation(double value);
    internal double get_Luminance();
    internal void set_Luminance(double value);
    internal double get_LuminanceOffSet();
    internal void set_LuminanceOffSet(double value);
    internal bool get_IsSchemeColor();
    internal void set_IsSchemeColor(bool value);
    internal string get_SchemaName();
    internal void set_SchemaName(string value);
    internal string get_HexColor();
    internal void set_HexColor(string value);
    public ColorType get_ColorType();
    public void set_ColorType(ColorType value);
    public ExcelKnownColors GetIndexed(IWorkbook book);
    public void SetIndexed(ExcelKnownColors value);
    public void SetIndexed(ExcelKnownColors value, bool raiseEvent);
    internal void SetIndexed(Color color, WorkbookImpl workbook, ExcelKnownColors value, bool raiseEvent);
    public void SetIndexed(ExcelKnownColors value, bool raiseEvent, WorkbookImpl book);
    public Color GetRGB(IWorkbook book);
    public void SetRGB(Color value, IWorkbook book);
    internal void SetRGB(Color value);
    public static ColorObject op_Implicit(Color color);
    public static bool op_Equality(ColorObject first, ColorObject second);
    public static bool op_Inequality(ColorObject first, ColorObject second);
    internal void CopyFrom(ColorObject colorObject, bool callEvent);
    internal void ConvertToIndexed(IWorkbook book);
    public virtual int GetHashCode();
    public void SetIndexedNoEvent(ExcelKnownColors value);
    internal ColorObject Clone();
    internal void Normalize();
    internal void Normalize(bool raiseEvent, bool bskip);
    internal void Normalize(bool raiseEvent, WorkbookImpl book);
    public virtual bool Equals(object obj);
    public void SetTheme(int themeIndex, IWorkbook book);
    public void SetTheme(int themeIndex, IWorkbook book, double dTintValue);
    public void SetRGB(Color rgb, IWorkbook book, double dTintValue);
    public sealed virtual void Dispose();
    private void DetachEvents();
}
internal class Syncfusion.XlsIO.Implementation.ColorScaleImpl : object {
    private static Color[] DefaultColors2;
    private static Color[] DefaultColors3;
    private IList`1<IColorConditionValue> m_arrCriteria;
    public IList`1<IColorConditionValue> Criteria { get; }
    private static ColorScaleImpl();
    public sealed virtual IList`1<IColorConditionValue> get_Criteria();
    public sealed virtual void SetConditionCount(int count);
    private void UpdateCount(int count);
}
internal class Syncfusion.XlsIO.Implementation.ColorScaleWrapper : object {
    private ConditionalFormatWrapper m_format;
    private List`1<IColorConditionValue> m_arrConditions;
    private IList`1<IColorConditionValue> m_readOnly;
    public IList`1<IColorConditionValue> Criteria { get; }
    public ColorScaleWrapper(ConditionalFormatWrapper format);
    public sealed virtual IList`1<IColorConditionValue> get_Criteria();
    public sealed virtual void SetConditionCount(int count);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    private void UpdateCollection(IList`1<IColorConditionValue> arrSource, IOptimizedUpdate parent);
    private void Add(int count, IList`1<IColorConditionValue> arrSource);
    private void Update(int count);
    private void Remove(int count);
    private ColorScaleImpl GetWrapped();
}
public enum Syncfusion.XlsIO.Implementation.ColorType : Enum {
    public int value__;
    public static ColorType Automatic;
    public static ColorType Indexed;
    public static ColorType RGB;
    public static ColorType Theme;
    public static ColorType None;
}
internal class Syncfusion.XlsIO.Implementation.Column : object {
    private byte binrayInfo;
    public double defaultWidth;
    private int styleIndex;
    private short minCol;
    private WorksheetImpl worksheet;
    public int Index { get; }
    public bool IsHidden { get; public set; }
    public double Width { get; public set; }
    internal Column(int minCol, WorksheetImpl worksheet, double defaultWidth);
    public int get_Index();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public double get_Width();
    public void set_Width(double value);
    internal void SetMinColumnIndex(int minCol);
    internal void SetCollapsedInfo(bool isCollapsed);
    internal void SetBestFitInfo(bool isBestFit);
    internal void SetWidth(int width);
    internal void SetOutLineLevel(byte outLineLevel);
    internal void SetStyleIndex(int styleIndex);
    internal bool GetHiddenInfo();
    internal void SetHiddenInfo(bool isHidden);
}
internal class Syncfusion.XlsIO.Implementation.ColumnCollection : List`1<Column> {
    internal Column column;
    private double defaultWidth;
    private WorksheetImpl workSheet;
    internal double Width { get; internal set; }
    internal ColumnCollection(WorksheetImpl workSheet, double defaultWidth);
    internal double get_Width();
    internal void set_Width(double value);
    public Column GetColumnByIndex(int index);
    internal Column GetOrCreateColumn();
    public double GetWidth(int colIndex, bool isDefaultWidth);
    public int GetWidth(int minCol, int maxCol, bool isDefaultWidth, bool isLayout);
    internal Column AddColumn(int index);
    public bool GetColumnIndex(int columnIndex, Int32& arrIndex);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.CombinationFilter : object {
    internal List`1<IMultipleFilter> m_filterCollection;
    private bool m_isBlank;
    private IAutoFilter m_parent;
    internal List`1<string> TextFiltersCollection { get; }
    public bool IsBlank { get; internal set; }
    public ExcelFilterType FilterType { get; }
    public IMultipleFilter Item { get; }
    public int Count { get; }
    public CombinationFilter(IAutoFilter filter);
    internal List`1<string> get_TextFiltersCollection();
    public bool get_IsBlank();
    internal void set_IsBlank(bool value);
    public sealed virtual ExcelFilterType get_FilterType();
    public IMultipleFilter get_Item(int Index);
    public int get_Count();
    internal void Dispose();
    private List`1<string> TextCollection();
}
public class Syncfusion.XlsIO.Implementation.CommonObject : object {
    private IApplication m_appl;
    private object m_parent;
    private int m_iReferenceCount;
    protected bool m_bIsDisposed;
    public IApplication Application { get; }
    public object Parent { get; }
    public ApplicationImpl AppImplementation { get; }
    public int ReferenceCount { get; }
    public CommonObject(IApplication application, object parent);
    [DebuggerStepThroughAttribute]
public sealed virtual IApplication get_Application();
    [DebuggerStepThroughAttribute]
public sealed virtual object get_Parent();
    public ApplicationImpl get_AppImplementation();
    protected virtual override void Finalize();
    public object FindParent(Type parentType);
    public object FindParent(Type parentType, bool bSubTypes);
    public static object FindParent(object parentStart, Type parentType);
    public static object FindParent(object parentStart, Type parentType, bool bSubTypes);
    public Object[] FindParents(Type[] arrTypes);
    public object FindParent(Type[] arrTypes);
    protected internal void SetParent(object parent);
    internal void SetParent(object parent, IApplication application);
    protected void CheckDisposed();
    [DebuggerStepThroughAttribute]
public virtual int AddReference();
    [DebuggerStepThroughAttribute]
public virtual int ReleaseReference();
    [DebuggerStepThroughAttribute]
public int get_ReferenceCount();
    public virtual void Dispose();
    protected virtual void OnDispose();
}
public class Syncfusion.XlsIO.Implementation.CommonWrapper : object {
    private int m_iBeginCount;
    protected internal int BeginCallsCount { get; }
    protected internal int get_BeginCallsCount();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    public virtual object Clone(object parent);
}
internal class Syncfusion.XlsIO.Implementation.CompObjectStream : DataStructure {
    private static int DEF_STREAM_SIZE;
    private static int DEF_MARKER_OR_LENGTH4;
    private static int DEF_MARKER_OR_LENGTH5;
    private static UInt32 DEF_UNICODE_MARKER;
    private int m_streamLength;
    private CompObjHeader m_header;
    private string m_ansiUserTypeData;
    private string m_ansiClipboardFormatData;
    private string m_reserved1Data;
    private UInt32 m_unicodeMarker;
    private string m_unicodeUserTypeData;
    private string m_unicodeClipboardFormatData;
    private string m_reserved2Data;
    internal int Length { get; }
    internal string ObjectType { get; }
    internal string ObjectTypeReserved { get; }
    internal CompObjectStream(Stream stream);
    internal CompObjectStream(OleObjectType oleType);
    internal virtual int get_Length();
    internal string get_ObjectType();
    internal string get_ObjectTypeReserved();
    internal virtual void Parse(Byte[] arrData, int iOffset);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal void SaveTo(Stream stream);
    private void WriteZeroByteArr(Stream stream, int byteLength);
    private void WriteLengthPrefixedString(Stream stream, string data);
}
public class Syncfusion.XlsIO.Implementation.ConditionalFormatImpl : CommonObject {
    private static UInt32 DEF_NOT_CONTAIN_FONT_COLOR;
    private static string DefaultBlankFormula;
    private static string DefaultNoBlankFormula;
    private static string DefaultErrorFormula;
    private static string DefaultNotErrorFormula;
    private static string DefaultBeginsWithFormula;
    private static string DefaultEndsWithFormula;
    private static string DefaultContainsTextFormula;
    private static string DefaultNotContainsTextFormula;
    private static string DefaultYesterdayTimePeriodFormula;
    private static string DefaultTodayTimePeriodFormula;
    private static string DefaultTomorrowTimePeriodFormula;
    private static string DefaultLastSevenDaysTimePeriodFormula;
    private static string DefaultLastWeekTimePeriodFormula;
    private static string DefaultThisWeekTimePeriodFormula;
    private static string DefaultNextWeekTimePeriodFormula;
    private static string DefaultLastMonthTimePeriodFormula;
    private static string DefaultThisMonthTimePeriodFormula;
    private static string DefaultNextMonthTimePeriodFormula;
    private bool m_isFormula;
    private CFRecord m_formatRecord;
    private CFExRecord m_cfExRecord;
    private int m_startdxf;
    private CF12Record m_cf12Record;
    private WorkbookImpl m_book;
    private ColorObject m_color;
    private ColorObject m_backColor;
    private ColorObject m_topBorderColor;
    private ColorObject m_bottomBorderColor;
    private ColorObject m_leftBorderColor;
    private ColorObject m_rightBorderColor;
    private ColorObject m_fontColor;
    private ExcelGradientStyle m_style;
    private ExcelGradientVariants m_variant;
    private DataBarImpl m_dataBar;
    private IconSetImpl m_iconSet;
    private ColorScaleImpl m_colorScale;
    private string m_asteriskRange;
    private IRange m_range;
    private string m_text;
    private string m_rangeReference;
    internal string m_customFunction;
    private bool m_cfHasExtensionList;
    private bool m_IsDxfPatternNone;
    internal string ST_GUID;
    private CFTimePeriods m_CFTimePeriod;
    private string m_CFRuleID;
    private TopBottomImpl m_topBottom;
    private AboveBelowAverageImpl m_aboveBelowAverage;
    private bool m_isNegativePriority;
    private bool m_isConditionalFormatCopying;
    private bool m_isCFPriorityParsed;
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public string FirstFormula { get; public set; }
    internal bool IsFormula { get; internal set; }
    public string FirstFormulaR1C1 { get; public set; }
    public string SecondFormula { get; public set; }
    public string SecondFormulaR1C1 { get; public set; }
    public ExcelCFType FormatType { get; public set; }
    public CFTimePeriods TimePeriodType { get; public set; }
    internal string CFRuleID { get; internal set; }
    public ExcelComparisonOperator Operator { get; public set; }
    public bool IsBold { get; public set; }
    public bool IsItalic { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool IsStrikeThrough { get; public set; }
    public bool IsSuperScript { get; public set; }
    public bool IsSubScript { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color ColorRGB { get; public set; }
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern FillPattern { get; public set; }
    public bool IsFontFormatPresent { get; public set; }
    public bool IsBorderFormatPresent { get; public set; }
    public bool IsPatternFormatPresent { get; public set; }
    public bool IsFontColorPresent { get; public set; }
    public bool IsPatternColorPresent { get; public set; }
    public bool IsBackgroundColorPresent { get; public set; }
    public bool HasNumberFormatPresent { get; public set; }
    internal bool CFHasExtensionList { get; internal set; }
    public bool IsLeftBorderModified { get; public set; }
    public bool IsRightBorderModified { get; public set; }
    public bool IsTopBorderModified { get; public set; }
    public bool IsBottomBorderModified { get; public set; }
    public ushort NumberFormatIndex { get; public set; }
    public string NumberFormat { get; public set; }
    public string Text { get; public set; }
    internal string AsteriskRange { get; internal set; }
    public bool StopIfTrue { get; public set; }
    internal int StartDxf { get; internal set; }
    internal bool IsNegativePriority { get; }
    internal bool IsConditionalFormatCopying { get; internal set; }
    internal int Priority { get; internal set; }
    internal bool IsCFPriorityParsed { get; internal set; }
    public ConditionalFormatTemplate Template { get; public set; }
    public IDataBar DataBar { get; }
    public IIconSet IconSet { get; }
    public IColorScale ColorScale { get; }
    public ITopBottom TopBottom { get; }
    public IAboveBelowAverage AboveBelowAverage { get; }
    [CLSCompliantAttribute("False")]
public CFRecord Record { get; }
    [CLSCompliantAttribute("False")]
public CF12Record CF12Record { get; }
    [CLSCompliantAttribute("False")]
public CFExRecord CFExRecord { get; }
    public WorkbookImpl Workbook { get; }
    internal DataBarImpl InnerDataBar { get; }
    internal string RangeRefernce { get; internal set; }
    internal IRange Range { get; internal set; }
    internal bool IsDxfPatternNone { get; internal set; }
    public ColorObject ColorObject { get; }
    public ColorObject BackColorObject { get; }
    public ColorObject TopBorderColorObject { get; }
    public ColorObject BottomBorderColorObject { get; }
    public ColorObject LeftBorderColorObject { get; }
    public ColorObject RightBorderColorObject { get; }
    public ColorObject FontColorObject { get; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public bool IsPatternStyleModified { get; public set; }
    private Ptg[] Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat.FirstFormulaPtgs { get; }
    private Ptg[] Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat.SecondFormulaPtgs { get; }
    public ConditionalFormatImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ConditionalFormatImpl(IApplication application, object parent, BiffRecordRaw[] data, Int32& iPos);
    [CLSCompliantAttribute("False")]
public ConditionalFormatImpl(IApplication application, object parent, CFRecord cf);
    [CLSCompliantAttribute("False")]
public ConditionalFormatImpl(IApplication application, object parent, CF12Record cf12);
    [CLSCompliantAttribute("False")]
public ConditionalFormatImpl(IApplication application, object parent, CFExRecord cfEx);
    [CLSCompliantAttribute("False")]
public void Parse(BiffRecordRaw[] data, Int32& iPos);
    private void InitializeColors();
    private void UpdateColorObjects();
    private void ZeroRecordColors();
    private void ParseRecord();
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializeCF12(OffsetArrayList records);
    internal void UpdateFontColor();
    internal void UpdateColor();
    internal void UpdateBackColor();
    internal void UpdateLeftBorderColor();
    internal void UpdateRightBorderColor();
    internal void UpdateTopBorderColor();
    internal void UpdateBottomBorderColor();
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    private void SetParents();
    internal void SetCFExRecord(CFExRecord cfEx);
    internal void UpdateCFRecordProperties(List`1<ExtendedProperty> properties, ConditionalFormatImpl format);
    public sealed virtual ExcelKnownColors get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_LeftBorderColorRGB();
    public sealed virtual void set_LeftBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LeftBorderStyle();
    public sealed virtual void set_LeftBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_RightBorderColorRGB();
    public sealed virtual void set_RightBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_RightBorderStyle();
    public sealed virtual void set_RightBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_TopBorderColorRGB();
    public sealed virtual void set_TopBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_TopBorderStyle();
    public sealed virtual void set_TopBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_BottomBorderColorRGB();
    public sealed virtual void set_BottomBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_BottomBorderStyle();
    public sealed virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public sealed virtual string get_FirstFormula();
    public sealed virtual void set_FirstFormula(string value);
    internal bool get_IsFormula();
    internal void set_IsFormula(bool value);
    internal Ptg[] ConvertPtgToNPtg(Ptg[] ptgs, bool bAbsoluteCellReference);
    private string GetCondtionalFormatForumula(bool isFirstOrSecond);
    public sealed virtual string get_FirstFormulaR1C1();
    public sealed virtual void set_FirstFormulaR1C1(string value);
    public sealed virtual string get_SecondFormula();
    public sealed virtual void set_SecondFormula(string value);
    public sealed virtual string get_SecondFormulaR1C1();
    public sealed virtual void set_SecondFormulaR1C1(string value);
    public sealed virtual ExcelCFType get_FormatType();
    public sealed virtual void set_FormatType(ExcelCFType value);
    public sealed virtual CFTimePeriods get_TimePeriodType();
    public sealed virtual void set_TimePeriodType(CFTimePeriods value);
    internal string get_CFRuleID();
    internal void set_CFRuleID(string value);
    public sealed virtual ExcelComparisonOperator get_Operator();
    public sealed virtual void set_Operator(ExcelComparisonOperator value);
    public sealed virtual bool get_IsBold();
    public sealed virtual void set_IsBold(bool value);
    public sealed virtual bool get_IsItalic();
    public sealed virtual void set_IsItalic(bool value);
    public sealed virtual ExcelKnownColors get_FontColor();
    public sealed virtual void set_FontColor(ExcelKnownColors value);
    public sealed virtual Color get_FontColorRGB();
    public sealed virtual void set_FontColorRGB(Color value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual bool get_IsStrikeThrough();
    public sealed virtual void set_IsStrikeThrough(bool value);
    public sealed virtual bool get_IsSuperScript();
    public sealed virtual void set_IsSuperScript(bool value);
    public sealed virtual bool get_IsSubScript();
    public sealed virtual void set_IsSubScript(bool value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual ExcelKnownColors get_BackColor();
    public sealed virtual void set_BackColor(ExcelKnownColors value);
    public sealed virtual Color get_BackColorRGB();
    public sealed virtual void set_BackColorRGB(Color value);
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    public sealed virtual bool get_IsFontFormatPresent();
    public sealed virtual void set_IsFontFormatPresent(bool value);
    public sealed virtual bool get_IsBorderFormatPresent();
    public sealed virtual void set_IsBorderFormatPresent(bool value);
    public sealed virtual bool get_IsPatternFormatPresent();
    public sealed virtual void set_IsPatternFormatPresent(bool value);
    public sealed virtual bool get_IsFontColorPresent();
    public sealed virtual void set_IsFontColorPresent(bool value);
    public sealed virtual bool get_IsPatternColorPresent();
    public sealed virtual void set_IsPatternColorPresent(bool value);
    public sealed virtual bool get_IsBackgroundColorPresent();
    public sealed virtual void set_IsBackgroundColorPresent(bool value);
    public bool get_HasNumberFormatPresent();
    public void set_HasNumberFormatPresent(bool value);
    internal bool get_CFHasExtensionList();
    internal void set_CFHasExtensionList(bool value);
    public sealed virtual bool get_IsLeftBorderModified();
    public sealed virtual void set_IsLeftBorderModified(bool value);
    public sealed virtual bool get_IsRightBorderModified();
    public sealed virtual void set_IsRightBorderModified(bool value);
    public sealed virtual bool get_IsTopBorderModified();
    public sealed virtual void set_IsTopBorderModified(bool value);
    public sealed virtual bool get_IsBottomBorderModified();
    public sealed virtual void set_IsBottomBorderModified(bool value);
    public ushort get_NumberFormatIndex();
    public void set_NumberFormatIndex(ushort value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    internal string get_AsteriskRange();
    internal void set_AsteriskRange(string value);
    public sealed virtual bool get_StopIfTrue();
    public sealed virtual void set_StopIfTrue(bool value);
    internal int get_StartDxf();
    internal void set_StartDxf(int value);
    internal bool get_IsNegativePriority();
    internal bool get_IsConditionalFormatCopying();
    internal void set_IsConditionalFormatCopying(bool value);
    internal int get_Priority();
    internal void set_Priority(int value);
    internal bool get_IsCFPriorityParsed();
    internal void set_IsCFPriorityParsed(bool value);
    public ConditionalFormatTemplate get_Template();
    public void set_Template(ConditionalFormatTemplate value);
    public sealed virtual IDataBar get_DataBar();
    public sealed virtual IIconSet get_IconSet();
    public sealed virtual IColorScale get_ColorScale();
    public sealed virtual ITopBottom get_TopBottom();
    public sealed virtual IAboveBelowAverage get_AboveBelowAverage();
    public CFRecord get_Record();
    public CF12Record get_CF12Record();
    public CFExRecord get_CFExRecord();
    public WorkbookImpl get_Workbook();
    internal DataBarImpl get_InnerDataBar();
    internal string get_RangeRefernce();
    internal void set_RangeRefernce(string value);
    internal IRange get_Range();
    internal void set_Range(IRange value);
    internal bool get_IsDxfPatternNone();
    internal void set_IsDxfPatternNone(bool value);
    public void SetSpecificTextString(ExcelComparisonOperator compOperator, string value);
    public string SetSpecificTextFormula(ExcelComparisonOperator compOperator, RangeImpl range);
    private string SetTimePeriodFormula(CFTimePeriods cfTimePeriods);
    public void SetFirstSecondFormula(FormulaUtil formulaUtil, string strFormula, bool bIsFirstFormula);
    public string GetFirstSecondFormula(FormulaUtil formulaUtil, bool bIsFirstFormula);
    internal string GetFirstSecondFormula(FormulaUtil formulaUtil, bool bIsFirstFormula, bool isForserialization);
    private Rectangle GetCellRectangle(ConditionalFormats parentFormats);
    private string GetMinimumRange(String[] sortedList);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    private void UpdateColors();
    public void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect, int row, int column);
    internal void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect, int row, int column, WorkbookImpl workbook, List`1<string> namedRangeNames);
    private bool IsRelativeFormula(Ptg[] formula);
    private void UpdateNamedRange(Ptg[] formula, WorkbookImpl workbook, List`1<string> namedRangeNames);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual object Clone(object parent);
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual ColorObject get_BackColorObject();
    public sealed virtual ColorObject get_TopBorderColorObject();
    public sealed virtual ColorObject get_BottomBorderColorObject();
    public sealed virtual ColorObject get_LeftBorderColorObject();
    public sealed virtual ColorObject get_RightBorderColorObject();
    public sealed virtual ColorObject get_FontColorObject();
    public sealed virtual ExcelGradientStyle get_GradientStyle();
    public sealed virtual void set_GradientStyle(ExcelGradientStyle value);
    public sealed virtual ExcelGradientVariants get_GradientVariant();
    public sealed virtual void set_GradientVariant(ExcelGradientVariants value);
    public sealed virtual bool get_IsPatternStyleModified();
    public sealed virtual void set_IsPatternStyleModified(bool value);
    private sealed virtual override Ptg[] Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat.get_FirstFormulaPtgs();
    private sealed virtual override Ptg[] Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat.get_SecondFormulaPtgs();
    internal void ClearAll();
}
public class Syncfusion.XlsIO.Implementation.ConditionalFormatWrapper : CommonWrapper {
    private CondFormatCollectionWrapper m_formats;
    private int m_iIndex;
    private DataBarWrapper m_dataBar;
    private IconSetWrapper m_iconSet;
    private ColorScaleWrapper m_colorScale;
    private IRange m_range;
    private TopBottomWrapper m_topBottom;
    private AboveBelowAverageWrapper m_aboveBelowAverage;
    public ExcelCFType FormatType { get; public set; }
    public CFTimePeriods TimePeriodType { get; public set; }
    public ExcelComparisonOperator Operator { get; public set; }
    public bool IsBold { get; public set; }
    public bool IsItalic { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool IsStrikeThrough { get; public set; }
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public string FirstFormula { get; public set; }
    public string FirstFormulaR1C1 { get; public set; }
    public string SecondFormula { get; public set; }
    public string SecondFormulaR1C1 { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color ColorRGB { get; public set; }
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern FillPattern { get; public set; }
    public bool IsSuperScript { get; public set; }
    public bool IsSubScript { get; public set; }
    public bool IsFontFormatPresent { get; public set; }
    public bool IsBorderFormatPresent { get; public set; }
    public bool IsPatternFormatPresent { get; public set; }
    public bool IsFontColorPresent { get; public set; }
    public bool IsPatternColorPresent { get; public set; }
    public bool IsBackgroundColorPresent { get; public set; }
    public bool HasNumberFormatPresent { get; public set; }
    public bool IsLeftBorderModified { get; public set; }
    public bool IsRightBorderModified { get; public set; }
    public bool IsTopBorderModified { get; public set; }
    public bool IsBottomBorderModified { get; public set; }
    public ushort NumberFormatIndex { get; public set; }
    public string NumberFormat { get; public set; }
    public string Text { get; public set; }
    public bool StopIfTrue { get; public set; }
    public ConditionalFormatTemplate Template { get; public set; }
    public IDataBar DataBar { get; }
    public IIconSet IconSet { get; }
    public IColorScale ColorScale { get; }
    internal IRange Range { get; internal set; }
    public ITopBottom TopBottom { get; }
    public IAboveBelowAverage AboveBelowAverage { get; }
    public IApplication Application { get; }
    public object Parent { get; }
    public ColorObject ColorObject { get; }
    public ColorObject BackColorObject { get; }
    public ColorObject TopBorderColorObject { get; }
    public ColorObject BottomBorderColorObject { get; }
    public ColorObject LeftBorderColorObject { get; }
    public ColorObject RightBorderColorObject { get; }
    public ColorObject FontColorObject { get; }
    public bool IsPatternStyleModified { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    private Ptg[] Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat.FirstFormulaPtgs { get; }
    private Ptg[] Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat.SecondFormulaPtgs { get; }
    public ConditionalFormatWrapper(CondFormatCollectionWrapper formats, int iIndex);
    public sealed virtual ExcelCFType get_FormatType();
    public sealed virtual void set_FormatType(ExcelCFType value);
    public sealed virtual CFTimePeriods get_TimePeriodType();
    public sealed virtual void set_TimePeriodType(CFTimePeriods value);
    public sealed virtual ExcelComparisonOperator get_Operator();
    public sealed virtual void set_Operator(ExcelComparisonOperator value);
    public sealed virtual bool get_IsBold();
    public sealed virtual void set_IsBold(bool value);
    public sealed virtual bool get_IsItalic();
    public sealed virtual void set_IsItalic(bool value);
    public sealed virtual ExcelKnownColors get_FontColor();
    public sealed virtual void set_FontColor(ExcelKnownColors value);
    public sealed virtual Color get_FontColorRGB();
    public sealed virtual void set_FontColorRGB(Color value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual bool get_IsStrikeThrough();
    public sealed virtual void set_IsStrikeThrough(bool value);
    public sealed virtual ExcelKnownColors get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_LeftBorderColorRGB();
    public sealed virtual void set_LeftBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LeftBorderStyle();
    public sealed virtual void set_LeftBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_RightBorderColorRGB();
    public sealed virtual void set_RightBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_RightBorderStyle();
    public sealed virtual void set_RightBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_TopBorderColorRGB();
    public sealed virtual void set_TopBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_TopBorderStyle();
    public sealed virtual void set_TopBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_BottomBorderColorRGB();
    public sealed virtual void set_BottomBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_BottomBorderStyle();
    public sealed virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public sealed virtual string get_FirstFormula();
    public sealed virtual void set_FirstFormula(string value);
    public sealed virtual string get_FirstFormulaR1C1();
    public sealed virtual void set_FirstFormulaR1C1(string value);
    public sealed virtual string get_SecondFormula();
    public sealed virtual void set_SecondFormula(string value);
    public sealed virtual string get_SecondFormulaR1C1();
    public sealed virtual void set_SecondFormulaR1C1(string value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual ExcelKnownColors get_BackColor();
    public sealed virtual void set_BackColor(ExcelKnownColors value);
    public sealed virtual Color get_BackColorRGB();
    public sealed virtual void set_BackColorRGB(Color value);
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    public sealed virtual bool get_IsSuperScript();
    public sealed virtual void set_IsSuperScript(bool value);
    public sealed virtual bool get_IsSubScript();
    public sealed virtual void set_IsSubScript(bool value);
    public sealed virtual bool get_IsFontFormatPresent();
    public sealed virtual void set_IsFontFormatPresent(bool value);
    public sealed virtual bool get_IsBorderFormatPresent();
    public sealed virtual void set_IsBorderFormatPresent(bool value);
    public sealed virtual bool get_IsPatternFormatPresent();
    public sealed virtual void set_IsPatternFormatPresent(bool value);
    public sealed virtual bool get_IsFontColorPresent();
    public sealed virtual void set_IsFontColorPresent(bool value);
    public sealed virtual bool get_IsPatternColorPresent();
    public sealed virtual void set_IsPatternColorPresent(bool value);
    public sealed virtual bool get_IsBackgroundColorPresent();
    public sealed virtual void set_IsBackgroundColorPresent(bool value);
    public bool get_HasNumberFormatPresent();
    public void set_HasNumberFormatPresent(bool value);
    public sealed virtual bool get_IsLeftBorderModified();
    public sealed virtual void set_IsLeftBorderModified(bool value);
    public sealed virtual bool get_IsRightBorderModified();
    public sealed virtual void set_IsRightBorderModified(bool value);
    public sealed virtual bool get_IsTopBorderModified();
    public sealed virtual void set_IsTopBorderModified(bool value);
    public sealed virtual bool get_IsBottomBorderModified();
    public sealed virtual void set_IsBottomBorderModified(bool value);
    public ushort get_NumberFormatIndex();
    public void set_NumberFormatIndex(ushort value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual bool get_StopIfTrue();
    public sealed virtual void set_StopIfTrue(bool value);
    public ConditionalFormatTemplate get_Template();
    public void set_Template(ConditionalFormatTemplate value);
    public sealed virtual IDataBar get_DataBar();
    public sealed virtual IIconSet get_IconSet();
    public sealed virtual IColorScale get_ColorScale();
    internal IRange get_Range();
    internal void set_Range(IRange value);
    public sealed virtual ITopBottom get_TopBottom();
    public sealed virtual IAboveBelowAverage get_AboveBelowAverage();
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    internal ConditionalFormatImpl GetCondition();
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual ColorObject get_BackColorObject();
    public sealed virtual ColorObject get_TopBorderColorObject();
    public sealed virtual ColorObject get_BottomBorderColorObject();
    public sealed virtual ColorObject get_LeftBorderColorObject();
    public sealed virtual ColorObject get_RightBorderColorObject();
    public sealed virtual ColorObject get_FontColorObject();
    public sealed virtual bool get_IsPatternStyleModified();
    public sealed virtual void set_IsPatternStyleModified(bool value);
    public sealed virtual ExcelGradientStyle get_GradientStyle();
    public sealed virtual void set_GradientStyle(ExcelGradientStyle value);
    public sealed virtual ExcelGradientVariants get_GradientVariant();
    public sealed virtual void set_GradientVariant(ExcelGradientVariants value);
    private sealed virtual override Ptg[] Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat.get_FirstFormulaPtgs();
    private sealed virtual override Ptg[] Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat.get_SecondFormulaPtgs();
}
public class Syncfusion.XlsIO.Implementation.ConditionValueWrapper : object {
    private IConditionValue m_wrapped;
    private IOptimizedUpdate m_parent;
    public ConditionValueType Type { get; public set; }
    public string Value { get; public set; }
    public ConditionalFormatOperator Operator { get; public set; }
    internal IConditionValue Wrapped { get; internal set; }
    public ConditionValueWrapper(IConditionValue value, IOptimizedUpdate parent);
    public sealed virtual ConditionValueType get_Type();
    public sealed virtual void set_Type(ConditionValueType value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual ConditionalFormatOperator get_Operator();
    public sealed virtual void set_Operator(ConditionalFormatOperator value);
    public void BeginUpdate();
    public void EndUpdate();
    internal IConditionValue get_Wrapped();
    internal void set_Wrapped(IConditionValue value);
}
internal class Syncfusion.XlsIO.Implementation.CssStyle : object {
    private string m_color;
    private string m_borderCollapse;
    private string m_fontFamily;
    private string m_fontSize;
    private string m_bgColor;
    private string m_border;
    private string m_topBorder;
    private string m_bottomBorder;
    private string m_rightBorder;
    private string m_leftBorder;
    private string m_textAlign;
    private string m_width;
    internal string Color { get; internal set; }
    internal string BgColor { get; internal set; }
    internal string FontFamily { get; internal set; }
    internal string FontSize { get; internal set; }
    internal string Border { get; internal set; }
    internal string TopBorder { get; internal set; }
    internal string BottomBorder { get; internal set; }
    internal string LeftBorder { get; internal set; }
    internal string RightBorder { get; internal set; }
    internal string BorderCollapse { get; internal set; }
    internal string TextAlign { get; internal set; }
    internal string Width { get; internal set; }
    internal string get_Color();
    internal void set_Color(string value);
    internal string get_BgColor();
    internal void set_BgColor(string value);
    internal string get_FontFamily();
    internal void set_FontFamily(string value);
    internal string get_FontSize();
    internal void set_FontSize(string value);
    internal string get_Border();
    internal void set_Border(string value);
    internal string get_TopBorder();
    internal void set_TopBorder(string value);
    internal string get_BottomBorder();
    internal void set_BottomBorder(string value);
    internal string get_LeftBorder();
    internal void set_LeftBorder(string value);
    internal string get_RightBorder();
    internal void set_RightBorder(string value);
    internal string get_BorderCollapse();
    internal void set_BorderCollapse(string value);
    internal string get_TextAlign();
    internal void set_TextAlign(string value);
    internal string get_Width();
    internal void set_Width(string value);
}
public class Syncfusion.XlsIO.Implementation.CustomXmlPart : CommonObject {
    private CustomXmlSchemaCollection m_schemacollection;
    private string m_Id;
    private Byte[] m_data;
    private WorkbookImpl m_book;
    private WorksheetImpl m_worksheet;
    private int m_index;
    public Byte[] Data { get; public set; }
    public string Id { get; public set; }
    public ICustomXmlSchemaCollection Schemas { get; public set; }
    public CustomXmlPart(IApplication application, object parent, string id, int index);
    public CustomXmlPart(IApplication application, object parent, string id, int index, bool bIsLocal);
    public CustomXmlPart(IApplication application, object parent);
    public CustomXmlPart(IApplication application, object parent, string id, ICustomXmlSchemaCollection schemas, int index);
    public CustomXmlPart(IApplication application, object parent, string id, Byte[] data, int index);
    public CustomXmlPart(IApplication application, object parent, string id, ICustomXmlSchemaCollection customXmlSchemaCollection, int index, bool bIsLocal);
    public CustomXmlPart(IApplication application, object parent, string id, Byte[] data, int index, bool bIsLocal);
    public virtual void Dispose();
    public sealed virtual Byte[] get_Data();
    public sealed virtual void set_Data(Byte[] value);
    public sealed virtual string get_Id();
    public sealed virtual void set_Id(string value);
    public sealed virtual ICustomXmlSchemaCollection get_Schemas();
    public void set_Schemas(ICustomXmlSchemaCollection value);
    public sealed virtual ICustomXmlPart Clone();
    public void SetIndex(int index);
    public void SetIndex(int index, bool bRaiseEvent);
    private void SetParents();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.CustomXmlSchemaCollection : object {
    private List`1<string> m_Items;
    public int Count { get; }
    public string Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public sealed virtual void Add(string name);
    public sealed virtual void Clear();
    public sealed virtual ICustomXmlSchemaCollection Clone();
    public sealed virtual int IndexOf(string value);
    public sealed virtual void Remove(string name);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class Syncfusion.XlsIO.Implementation.DataBarImpl : object {
    private static Color DefaultColor;
    private static DataBarAxisPosition DefaultAxisPosition;
    private static DataBarDirection DefaultDataBarDirection;
    private static Color DefaultNegativeFillColor;
    private static Color DefaultAxisColor;
    private IConditionValue m_minPoint;
    private IConditionValue m_maxPoint;
    private Color m_barColor;
    private bool m_extList;
    private int m_iPercentMax;
    private int m_iPercentMin;
    private bool m_bShowValue;
    private Color m_axisColor;
    private Color m_borderColor;
    private Color m_negativeBorderColor;
    private Color m_negativeFillColor;
    private bool m_bHasBorder;
    private DataBarDirection m_direction;
    private bool m_bHasGradientFill;
    private bool m_bHasDiffNegativeBarColor;
    private bool m_bHasDiffNegativeBarBorderColor;
    private DataBarAxisPosition m_axisPosition;
    private bool m_hasExtensionList;
    internal string ST_GUID;
    public IConditionValue MinPoint { get; public set; }
    public IConditionValue MaxPoint { get; public set; }
    internal bool IsExtList { get; internal set; }
    public Color BarColor { get; public set; }
    public int PercentMax { get; public set; }
    public int PercentMin { get; public set; }
    public bool ShowValue { get; public set; }
    public Color BarAxisColor { get; public set; }
    public Color BorderColor { get; public set; }
    public Color NegativeBorderColor { get; public set; }
    public Color NegativeFillColor { get; public set; }
    public bool HasBorder { get; internal set; }
    public DataBarDirection DataBarDirection { get; public set; }
    public bool HasGradientFill { get; public set; }
    internal bool HasDiffNegativeBarColor { get; internal set; }
    internal bool HasDiffNegativeBarBorderColor { get; internal set; }
    public DataBarAxisPosition DataBarAxisPosition { get; public set; }
    internal bool HasExtensionList { get; internal set; }
    private static DataBarImpl();
    public sealed virtual IConditionValue get_MinPoint();
    public void set_MinPoint(IConditionValue value);
    public sealed virtual IConditionValue get_MaxPoint();
    public void set_MaxPoint(IConditionValue value);
    internal bool get_IsExtList();
    internal void set_IsExtList(bool value);
    public sealed virtual Color get_BarColor();
    public sealed virtual void set_BarColor(Color value);
    public sealed virtual int get_PercentMax();
    public sealed virtual void set_PercentMax(int value);
    public sealed virtual int get_PercentMin();
    public sealed virtual void set_PercentMin(int value);
    public sealed virtual bool get_ShowValue();
    public sealed virtual void set_ShowValue(bool value);
    public sealed virtual Color get_BarAxisColor();
    public sealed virtual void set_BarAxisColor(Color value);
    public sealed virtual Color get_BorderColor();
    public sealed virtual void set_BorderColor(Color value);
    public sealed virtual Color get_NegativeBorderColor();
    public sealed virtual void set_NegativeBorderColor(Color value);
    public sealed virtual Color get_NegativeFillColor();
    public sealed virtual void set_NegativeFillColor(Color value);
    public sealed virtual bool get_HasBorder();
    internal void set_HasBorder(bool value);
    public sealed virtual DataBarDirection get_DataBarDirection();
    public sealed virtual void set_DataBarDirection(DataBarDirection value);
    public sealed virtual bool get_HasGradientFill();
    public sealed virtual void set_HasGradientFill(bool value);
    internal bool get_HasDiffNegativeBarColor();
    internal void set_HasDiffNegativeBarColor(bool value);
    internal bool get_HasDiffNegativeBarBorderColor();
    internal void set_HasDiffNegativeBarBorderColor(bool value);
    public sealed virtual DataBarAxisPosition get_DataBarAxisPosition();
    public sealed virtual void set_DataBarAxisPosition(DataBarAxisPosition value);
    internal bool get_HasExtensionList();
    internal void set_HasExtensionList(bool value);
    internal DataBarImpl Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(DataBarImpl first, DataBarImpl second);
    public static bool op_Inequality(DataBarImpl first, DataBarImpl second);
}
internal class Syncfusion.XlsIO.Implementation.DataBarWrapper : object {
    private DataBarImpl m_wrapped;
    private ConditionalFormatWrapper m_format;
    private ConditionValueWrapper m_minPoint;
    private ConditionValueWrapper m_maxPoint;
    public IConditionValue MinPoint { get; }
    public IConditionValue MaxPoint { get; }
    public Color BarColor { get; public set; }
    public int PercentMax { get; public set; }
    public int PercentMin { get; public set; }
    public bool ShowValue { get; public set; }
    public Color BarAxisColor { get; public set; }
    public Color BorderColor { get; public set; }
    public bool HasBorder { get; }
    public bool HasGradientFill { get; public set; }
    public DataBarDirection DataBarDirection { get; public set; }
    public Color NegativeBorderColor { get; public set; }
    public Color NegativeFillColor { get; public set; }
    public DataBarAxisPosition DataBarAxisPosition { get; public set; }
    public DataBarWrapper(DataBarImpl dataBar, ConditionalFormatWrapper format);
    public sealed virtual IConditionValue get_MinPoint();
    public sealed virtual IConditionValue get_MaxPoint();
    public sealed virtual Color get_BarColor();
    public sealed virtual void set_BarColor(Color value);
    public sealed virtual int get_PercentMax();
    public sealed virtual void set_PercentMax(int value);
    public sealed virtual int get_PercentMin();
    public sealed virtual void set_PercentMin(int value);
    public sealed virtual bool get_ShowValue();
    public sealed virtual void set_ShowValue(bool value);
    public sealed virtual Color get_BarAxisColor();
    public sealed virtual void set_BarAxisColor(Color value);
    public sealed virtual Color get_BorderColor();
    public sealed virtual void set_BorderColor(Color value);
    public sealed virtual bool get_HasBorder();
    public sealed virtual bool get_HasGradientFill();
    public sealed virtual void set_HasGradientFill(bool value);
    public sealed virtual DataBarDirection get_DataBarDirection();
    public sealed virtual void set_DataBarDirection(DataBarDirection value);
    public sealed virtual Color get_NegativeBorderColor();
    public sealed virtual void set_NegativeBorderColor(Color value);
    public sealed virtual Color get_NegativeFillColor();
    public sealed virtual void set_NegativeFillColor(Color value);
    public sealed virtual DataBarAxisPosition get_DataBarAxisPosition();
    public sealed virtual void set_DataBarAxisPosition(DataBarAxisPosition value);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
}
public class Syncfusion.XlsIO.Implementation.DataBaseProperty : object {
    private string m_sourceDataFile;
    private bool m_refreshOnFileOpen;
    private ExcelCommandType m_commandType;
    private object m_commandText;
    private object m_connectionString;
    private bool m_backgroundQuery;
    private int m_refreshPeriod;
    private bool m_savePassword;
    private bool m_alwaysUseConnectionFile;
    private bool m_enableRefresh;
    private ExcelCredentialsMethod m_serverCredentialsMethod;
    public string SourceDataFile { get; }
    public bool RefreshOnFileOpen { get; public set; }
    public ExcelCommandType CommandType { get; public set; }
    public object CommandText { get; public set; }
    public object ConnectionString { get; public set; }
    public bool BackgroundQuery { get; public set; }
    public int RefreshPeriod { get; public set; }
    public bool SavePassword { get; public set; }
    public bool AlwaysUseConnectionFile { get; public set; }
    public bool EnableRefresh { get; public set; }
    public ExcelCredentialsMethod ServerCredentialsMethod { get; public set; }
    public string get_SourceDataFile();
    public bool get_RefreshOnFileOpen();
    public void set_RefreshOnFileOpen(bool value);
    public ExcelCommandType get_CommandType();
    public void set_CommandType(ExcelCommandType value);
    public object get_CommandText();
    public void set_CommandText(object value);
    public virtual object get_ConnectionString();
    public virtual void set_ConnectionString(object value);
    public bool get_BackgroundQuery();
    public void set_BackgroundQuery(bool value);
    public int get_RefreshPeriod();
    public void set_RefreshPeriod(int value);
    public bool get_SavePassword();
    public void set_SavePassword(bool value);
    public bool get_AlwaysUseConnectionFile();
    public void set_AlwaysUseConnectionFile(bool value);
    public bool get_EnableRefresh();
    public void set_EnableRefresh(bool value);
    public ExcelCredentialsMethod get_ServerCredentialsMethod();
    public void set_ServerCredentialsMethod(ExcelCredentialsMethod value);
    internal void FindDataSource();
}
internal abstract class Syncfusion.XlsIO.Implementation.DataStructure : object {
    public static int FileCharPosSize;
    public static int DiskPageSize;
    internal int Length { get; }
    internal abstract virtual void Parse(Byte[] arrData, int iOffset);
    internal abstract virtual int Save(Byte[] arrData, int iOffset);
    internal abstract virtual int get_Length();
    internal static short ReadInt16(Byte[] arrData, Int32& iOffset);
    internal static int ReadInt32(Byte[] arrData, Int32& iOffset);
    internal static long ReadInt64(Byte[] arrData, Int32& iOffset);
    internal static ushort ReadUInt16(Byte[] arrData, Int32& iOffset);
    internal static UInt32 ReadUInt32(Byte[] arrData, Int32& iOffset);
    internal static Byte[] ReadBytes(Byte[] arrData, int length, Int32& iOffset);
    internal static void WriteInt16(Byte[] destination, Int32& iOffset, short val);
    internal static void WriteUInt16(Byte[] destination, Int32& iOffset, ushort val);
    internal static void WriteInt32(Byte[] destination, Int32& iOffset, int val);
    internal static void WriteInt64(Byte[] destination, Int32& iOffset, long val);
    internal static void WriteUInt32(Byte[] destination, Int32& iOffset, UInt32 val);
    internal static void WriteBytes(Byte[] destination, Int32& iOffset, Byte[] bytes);
}
public class Syncfusion.XlsIO.Implementation.DataValidationArray : CommonWrapper {
    private IRange m_range;
    private List`1<IDataValidation> m_arrValidationList;
    internal IRange EntireDVRange;
    public string PromptBoxTitle { get; public set; }
    public string PromptBoxText { get; public set; }
    public string ErrorBoxTitle { get; public set; }
    public string ErrorBoxText { get; public set; }
    public string FirstFormula { get; public set; }
    public DateTime FirstDateTime { get; public set; }
    public string SecondFormula { get; public set; }
    public DateTime SecondDateTime { get; public set; }
    public ExcelDataType AllowType { get; public set; }
    public ExcelDataValidationComparisonOperator CompareOperator { get; public set; }
    public bool IsListInFormula { get; public set; }
    public bool IsEmptyCellAllowed { get; public set; }
    public bool IsSuppressDropDownArrow { get; public set; }
    public bool ShowPromptBox { get; public set; }
    public bool ShowErrorBox { get; public set; }
    public int PromptBoxHPosition { get; public set; }
    public int PromptBoxVPosition { get; public set; }
    public bool IsPromptBoxVisible { get; public set; }
    public bool IsPromptBoxPositionFixed { get; public set; }
    public ExcelErrorStyle ErrorStyle { get; public set; }
    public String[] ListOfValues { get; public set; }
    public IRange DataRange { get; public set; }
    public IApplication Application { get; }
    public object Parent { get; }
    public Ptg[] FirstFormulaTokens { get; public set; }
    public Ptg[] SecondFormulaTokens { get; public set; }
    public DataValidationArray(IRange parent);
    public sealed virtual string get_PromptBoxTitle();
    public sealed virtual void set_PromptBoxTitle(string value);
    public sealed virtual string get_PromptBoxText();
    public sealed virtual void set_PromptBoxText(string value);
    public sealed virtual string get_ErrorBoxTitle();
    public sealed virtual void set_ErrorBoxTitle(string value);
    public sealed virtual string get_ErrorBoxText();
    public sealed virtual void set_ErrorBoxText(string value);
    public sealed virtual string get_FirstFormula();
    public sealed virtual void set_FirstFormula(string value);
    public sealed virtual DateTime get_FirstDateTime();
    public sealed virtual void set_FirstDateTime(DateTime value);
    public sealed virtual string get_SecondFormula();
    public sealed virtual void set_SecondFormula(string value);
    public sealed virtual DateTime get_SecondDateTime();
    public sealed virtual void set_SecondDateTime(DateTime value);
    public sealed virtual ExcelDataType get_AllowType();
    public sealed virtual void set_AllowType(ExcelDataType value);
    public sealed virtual ExcelDataValidationComparisonOperator get_CompareOperator();
    public sealed virtual void set_CompareOperator(ExcelDataValidationComparisonOperator value);
    public sealed virtual bool get_IsListInFormula();
    public sealed virtual void set_IsListInFormula(bool value);
    public sealed virtual bool get_IsEmptyCellAllowed();
    public sealed virtual void set_IsEmptyCellAllowed(bool value);
    public sealed virtual bool get_IsSuppressDropDownArrow();
    public sealed virtual void set_IsSuppressDropDownArrow(bool value);
    public sealed virtual bool get_ShowPromptBox();
    public sealed virtual void set_ShowPromptBox(bool value);
    public sealed virtual bool get_ShowErrorBox();
    public sealed virtual void set_ShowErrorBox(bool value);
    public sealed virtual int get_PromptBoxHPosition();
    public sealed virtual void set_PromptBoxHPosition(int value);
    public sealed virtual int get_PromptBoxVPosition();
    public sealed virtual void set_PromptBoxVPosition(int value);
    public sealed virtual bool get_IsPromptBoxVisible();
    public sealed virtual void set_IsPromptBoxVisible(bool value);
    public sealed virtual bool get_IsPromptBoxPositionFixed();
    public sealed virtual void set_IsPromptBoxPositionFixed(bool value);
    public sealed virtual ExcelErrorStyle get_ErrorStyle();
    public sealed virtual void set_ErrorStyle(ExcelErrorStyle value);
    public sealed virtual String[] get_ListOfValues();
    public sealed virtual void set_ListOfValues(String[] value);
    public sealed virtual IRange get_DataRange();
    public sealed virtual void set_DataRange(IRange value);
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public sealed virtual Ptg[] get_FirstFormulaTokens();
    public sealed virtual void set_FirstFormulaTokens(Ptg[] value);
    public sealed virtual Ptg[] get_SecondFormulaTokens();
    public sealed virtual void set_SecondFormulaTokens(Ptg[] value);
    private void CopyFromFirstCell();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    private void IterateCells(CellMethod method);
    private void IterateRectangle(Rectangle rect, CellMethod method);
    private void BeginUpdate(int row, int column);
    private void EndUpdate(int row, int column);
    private void IterateCells(DVMethod method, object value);
    private void IterateDVs(DVMethod method, object value);
    private void SetPromptBoxTitle(IDataValidation dv, object value);
    private void SetPromptBoxText(IDataValidation dv, object value);
    private void SetErrorBoxTitle(IDataValidation dv, object value);
    private void SetErrorBoxText(IDataValidation dv, object value);
    private void SetFirstFormula(IDataValidation dv, object value);
    private void SetFirstDateTime(IDataValidation dv, object value);
    private void SetSecondFormula(IDataValidation dv, object value);
    private void SetSecondDateTime(IDataValidation dv, object value);
    private void SetAllowType(IDataValidation dv, object value);
    private void SetCompareOperator(IDataValidation dv, object value);
    private void SetIsListInFormula(IDataValidation dv, object value);
    private void SetIsEmptyCellAllowed(IDataValidation dv, object value);
    private void SetIsSuppressDropDownArrow(IDataValidation dv, object value);
    private void SetShowPromptBox(IDataValidation dv, object value);
    private void SetShowErrorBox(IDataValidation dv, object value);
    private void SetPromptBoxHPosition(IDataValidation dv, object value);
    private void SetPromptBoxVPosition(IDataValidation dv, object value);
    private void SetIsPromptBoxVisible(IDataValidation dv, object value);
    private void SetIsPromptBoxPositionFixed(IDataValidation dv, object value);
    private void SetErrorStyle(IDataValidation dv, object value);
    private void SetListOfValues(IDataValidation dv, object value);
    private void SetDataRange(IDataValidation dv, object value);
    private void SetFirstFormulaTokens(IDataValidation dv, object value);
    private void SetSecondFormulaTokens(IDataValidation dv, object value);
}
public class Syncfusion.XlsIO.Implementation.DataValidationImpl : object {
    private Type[] DATARANGETYPES;
    private static int DEF_MAX_LIST_LENGTH;
    private static int TitleLimit;
    private static int TextLimit;
    private static int InputTextLimit;
    private static int DEF_WRONG_DATE;
    private static object m_lock;
    internal IRange EntireDVRange;
    private DVRecord m_dvRecord;
    private string m_strFirstFormula;
    private string m_strSecondFormula;
    private DataValidationCollection m_DVCollection;
    private RangesOperations m_cells;
    private FormulaUtil m_formulaUtil;
    public WorkbookImpl Workbook { get; }
    public WorksheetImpl Worksheet { get; }
    [CLSCompliantAttribute("False")]
public DVRecord DVRecord { get; }
    public DataValidationCollection ParentCollection { get; public set; }
    public String[] DVRanges { get; }
    public int ShapesCount { get; }
    public IApplication Application { get; }
    public object Parent { get; }
    public string PromptBoxTitle { get; public set; }
    public string PromptBoxText { get; public set; }
    public string ErrorBoxTitle { get; public set; }
    public string ErrorBoxText { get; public set; }
    public string FirstFormula { get; public set; }
    public DateTime FirstDateTime { get; public set; }
    public string SecondFormula { get; public set; }
    internal bool IsFormulaOrChoice { get; internal set; }
    public DateTime SecondDateTime { get; public set; }
    public ExcelDataType AllowType { get; public set; }
    public ExcelDataValidationComparisonOperator CompareOperator { get; public set; }
    public bool IsListInFormula { get; public set; }
    public bool IsEmptyCellAllowed { get; public set; }
    public bool IsSuppressDropDownArrow { get; public set; }
    public bool ShowPromptBox { get; public set; }
    public bool ShowErrorBox { get; public set; }
    public int PromptBoxHPosition { get; public set; }
    public int PromptBoxVPosition { get; public set; }
    public bool IsPromptBoxVisible { get; public set; }
    public bool IsPromptBoxPositionFixed { get; public set; }
    public ExcelErrorStyle ErrorStyle { get; public set; }
    public String[] ListOfValues { get; public set; }
    public IRange DataRange { get; public set; }
    public Ptg[] FirstFormulaTokens { get; public set; }
    public Ptg[] SecondFormulaTokens { get; public set; }
    internal string ChoiceTokens { get; internal set; }
    public DataValidationImpl(DataValidationCollection parent);
    [CLSCompliantAttribute("False")]
public DataValidationImpl(DataValidationCollection parent, DVRecord dv);
    private static DataValidationImpl();
    public void AddRange(DataValidationImpl dv);
    public void AddRange(RangeImpl range);
    [CLSCompliantAttribute("False")]
public void AddRange(TAddr tAddr);
    [CLSCompliantAttribute("False")]
internal void AddRanges(TAddr tAddr);
    [CLSCompliantAttribute("False")]
public void AddRange(ICombinedRange range);
    public void RemoveRange(RangeImpl range);
    public void RemoveRange(Rectangle[] rectangles);
    private void FillFromCells();
    private void FillCells(DVRecord dv);
    private Ptg[] ConvertFromDateTime(DateTime value);
    private DateTime ConvertToDateTime(Ptg[] arrPtgs);
    public static Ptg[] GetFormulaPtg(String& value, FormulaUtil formulaUtil, WorksheetImpl sheet, int row, int column);
    public static Ptg[] ParseFormula(string strFormula, WorksheetImpl sheet, FormulaUtil formulaUtil, int row, int column);
    public static void RegisterFunctions(bool isRefNPtg);
    public void SetFormulaOneTwoValue(string value, FormulaUtil formulaUtil, bool isFormulaOne);
    public void SetFormulaValue(string value, FormulaUtil formulaUtil, TAddr taddr, bool isFormulaOne);
    private static bool IsZeroValuePtg(Ptg[] parsedFormula);
    public WorkbookImpl get_Workbook();
    public WorksheetImpl get_Worksheet();
    public DVRecord get_DVRecord();
    public DataValidationCollection get_ParentCollection();
    public void set_ParentCollection(DataValidationCollection value);
    public String[] get_DVRanges();
    public int get_ShapesCount();
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public sealed virtual string get_PromptBoxTitle();
    public sealed virtual void set_PromptBoxTitle(string value);
    public sealed virtual string get_PromptBoxText();
    public sealed virtual void set_PromptBoxText(string value);
    public sealed virtual string get_ErrorBoxTitle();
    public sealed virtual void set_ErrorBoxTitle(string value);
    public sealed virtual string get_ErrorBoxText();
    public sealed virtual void set_ErrorBoxText(string value);
    public sealed virtual string get_FirstFormula();
    public sealed virtual void set_FirstFormula(string value);
    public sealed virtual DateTime get_FirstDateTime();
    public sealed virtual void set_FirstDateTime(DateTime value);
    public sealed virtual string get_SecondFormula();
    public sealed virtual void set_SecondFormula(string value);
    internal bool get_IsFormulaOrChoice();
    internal void set_IsFormulaOrChoice(bool value);
    public sealed virtual DateTime get_SecondDateTime();
    public sealed virtual void set_SecondDateTime(DateTime value);
    public sealed virtual ExcelDataType get_AllowType();
    public sealed virtual void set_AllowType(ExcelDataType value);
    public sealed virtual ExcelDataValidationComparisonOperator get_CompareOperator();
    public sealed virtual void set_CompareOperator(ExcelDataValidationComparisonOperator value);
    public sealed virtual bool get_IsListInFormula();
    public sealed virtual void set_IsListInFormula(bool value);
    public sealed virtual bool get_IsEmptyCellAllowed();
    public sealed virtual void set_IsEmptyCellAllowed(bool value);
    public sealed virtual bool get_IsSuppressDropDownArrow();
    public sealed virtual void set_IsSuppressDropDownArrow(bool value);
    public sealed virtual bool get_ShowPromptBox();
    public sealed virtual void set_ShowPromptBox(bool value);
    public sealed virtual bool get_ShowErrorBox();
    public sealed virtual void set_ShowErrorBox(bool value);
    public sealed virtual int get_PromptBoxHPosition();
    public sealed virtual void set_PromptBoxHPosition(int value);
    public sealed virtual int get_PromptBoxVPosition();
    public sealed virtual void set_PromptBoxVPosition(int value);
    public sealed virtual bool get_IsPromptBoxVisible();
    public sealed virtual void set_IsPromptBoxVisible(bool value);
    public sealed virtual bool get_IsPromptBoxPositionFixed();
    public sealed virtual void set_IsPromptBoxPositionFixed(bool value);
    public sealed virtual ExcelErrorStyle get_ErrorStyle();
    public sealed virtual void set_ErrorStyle(ExcelErrorStyle value);
    public sealed virtual String[] get_ListOfValues();
    public sealed virtual void set_ListOfValues(String[] value);
    public sealed virtual IRange get_DataRange();
    public sealed virtual void set_DataRange(IRange value);
    public sealed virtual Ptg[] get_FirstFormulaTokens();
    public sealed virtual void set_FirstFormulaTokens(Ptg[] value);
    public sealed virtual Ptg[] get_SecondFormulaTokens();
    public sealed virtual void set_SecondFormulaTokens(Ptg[] value);
    internal string get_ChoiceTokens();
    internal void set_ChoiceTokens(string value);
    private void UpdateFirstFormulaString();
    private void UpdateSecondFormulaString();
    private void GetRowColumn(Int32& iRow, Int32& iColumn);
    public sealed virtual void Reparse();
    public string GetFirstSecondFormula(FormulaUtil formulaUtil, bool bIsFirstFormula);
    public string GetR1C1FirstSecondFormula(FormulaUtil formulaUtil, bool bIsFirstFormula);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public sealed virtual object Clone(object parent);
    private void SetParent(DataValidationCollection dataValidationCollection);
    public bool ContainsCell(long lCellIndex);
    public void UpdateNamedRangeIndexes(Int32[] arrNewIndex);
    public void UpdateNamedRangeIndexes(IDictionary`2<int, int> dicNewIndex);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    public void MarkUsedReferences(Boolean[] usedItems);
    public void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    internal DataValidationImpl Clone(DataValidationCollection dataValidationCollection, int iSourceRow, int iSourceColumn, int iRowDelta, int iColumnDelta, int iRowCount, int iColumnCount);
    private void CheckLimit(string propertyName, string value, int limit);
}
public class Syncfusion.XlsIO.Implementation.DataValidationWrapper : CommonWrapper {
    private DataValidationImpl m_dataValidation;
    private RangeImpl m_range;
    private DataValidationImpl m_dvOld;
    internal IRange EntireDVRange;
    private double m_Number;
    internal DataValidationImpl Wrapped { get; internal set; }
    public string PromptBoxTitle { get; public set; }
    public string PromptBoxText { get; public set; }
    public string ErrorBoxTitle { get; public set; }
    public string ErrorBoxText { get; public set; }
    public string FirstFormula { get; public set; }
    public DateTime FirstDateTime { get; public set; }
    public string SecondFormula { get; public set; }
    public DateTime SecondDateTime { get; public set; }
    public ExcelDataType AllowType { get; public set; }
    public ExcelDataValidationComparisonOperator CompareOperator { get; public set; }
    public bool IsListInFormula { get; public set; }
    public bool IsEmptyCellAllowed { get; public set; }
    public bool IsSuppressDropDownArrow { get; public set; }
    public bool ShowPromptBox { get; public set; }
    public bool ShowErrorBox { get; public set; }
    public int PromptBoxHPosition { get; public set; }
    public int PromptBoxVPosition { get; public set; }
    public bool IsPromptBoxVisible { get; public set; }
    public bool IsPromptBoxPositionFixed { get; public set; }
    public ExcelErrorStyle ErrorStyle { get; public set; }
    public String[] ListOfValues { get; public set; }
    public IRange DataRange { get; public set; }
    public Ptg[] FirstFormulaTokens { get; public set; }
    public Ptg[] SecondFormulaTokens { get; public set; }
    public IApplication Application { get; }
    public object Parent { get; }
    public DataValidationWrapper(RangeImpl range, DataValidationImpl wrap);
    internal DataValidationImpl get_Wrapped();
    internal void set_Wrapped(DataValidationImpl value);
    public sealed virtual string get_PromptBoxTitle();
    public sealed virtual void set_PromptBoxTitle(string value);
    public sealed virtual string get_PromptBoxText();
    public sealed virtual void set_PromptBoxText(string value);
    public sealed virtual string get_ErrorBoxTitle();
    public sealed virtual void set_ErrorBoxTitle(string value);
    public sealed virtual string get_ErrorBoxText();
    public sealed virtual void set_ErrorBoxText(string value);
    public sealed virtual string get_FirstFormula();
    public sealed virtual void set_FirstFormula(string value);
    public sealed virtual DateTime get_FirstDateTime();
    public sealed virtual void set_FirstDateTime(DateTime value);
    public sealed virtual string get_SecondFormula();
    public sealed virtual void set_SecondFormula(string value);
    public sealed virtual DateTime get_SecondDateTime();
    public sealed virtual void set_SecondDateTime(DateTime value);
    public sealed virtual ExcelDataType get_AllowType();
    public sealed virtual void set_AllowType(ExcelDataType value);
    public sealed virtual ExcelDataValidationComparisonOperator get_CompareOperator();
    public sealed virtual void set_CompareOperator(ExcelDataValidationComparisonOperator value);
    public sealed virtual bool get_IsListInFormula();
    public sealed virtual void set_IsListInFormula(bool value);
    public sealed virtual bool get_IsEmptyCellAllowed();
    public sealed virtual void set_IsEmptyCellAllowed(bool value);
    public sealed virtual bool get_IsSuppressDropDownArrow();
    public sealed virtual void set_IsSuppressDropDownArrow(bool value);
    public sealed virtual bool get_ShowPromptBox();
    public sealed virtual void set_ShowPromptBox(bool value);
    public sealed virtual bool get_ShowErrorBox();
    public sealed virtual void set_ShowErrorBox(bool value);
    public sealed virtual int get_PromptBoxHPosition();
    public sealed virtual void set_PromptBoxHPosition(int value);
    public sealed virtual int get_PromptBoxVPosition();
    public sealed virtual void set_PromptBoxVPosition(int value);
    public sealed virtual bool get_IsPromptBoxVisible();
    public sealed virtual void set_IsPromptBoxVisible(bool value);
    public sealed virtual bool get_IsPromptBoxPositionFixed();
    public sealed virtual void set_IsPromptBoxPositionFixed(bool value);
    public sealed virtual ExcelErrorStyle get_ErrorStyle();
    public sealed virtual void set_ErrorStyle(ExcelErrorStyle value);
    public sealed virtual String[] get_ListOfValues();
    public sealed virtual void set_ListOfValues(String[] value);
    public sealed virtual IRange get_DataRange();
    public sealed virtual void set_DataRange(IRange value);
    public sealed virtual Ptg[] get_FirstFormulaTokens();
    public sealed virtual void set_FirstFormulaTokens(Ptg[] value);
    public sealed virtual Ptg[] get_SecondFormulaTokens();
    public sealed virtual void set_SecondFormulaTokens(Ptg[] value);
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    private void OnBeforeCollectionChange();
    private void OnAfterCollectionChange();
}
[ExtensionAttribute]
internal static class Syncfusion.XlsIO.Implementation.DateTimeExtension : object {
    internal static DateTime FromOADate(double doubleOLEValue);
    [ExtensionAttribute]
internal static double ToOADate(DateTime inDateTime);
}
public class Syncfusion.XlsIO.Implementation.DateTimeFilter : object {
    private DateTime m_dateTime;
    private DateTimeGroupingType m_groupingType;
    public DateTime DateTimeValue { get; internal set; }
    public DateTimeGroupingType GroupingType { get; internal set; }
    public ExcelCombinationFilterType CombinationFilterType { get; }
    public DateTime get_DateTimeValue();
    internal void set_DateTimeValue(DateTime value);
    public DateTimeGroupingType get_GroupingType();
    internal void set_GroupingType(DateTimeGroupingType value);
    public sealed virtual ExcelCombinationFilterType get_CombinationFilterType();
}
internal class Syncfusion.XlsIO.Implementation.DialogSheet : object {
    private Stream m_preservedStream;
    private string m_sheetName;
    private WorksheetDataHolder holder;
    internal Stream PreservedStream { get; internal set; }
    internal string SheetName { get; }
    internal WorksheetDataHolder DataHolder { get; internal set; }
    public DialogSheet(string sheetName);
    internal Stream get_PreservedStream();
    internal void set_PreservedStream(Stream value);
    internal string get_SheetName();
    internal WorksheetDataHolder get_DataHolder();
    internal void set_DataHolder(WorksheetDataHolder value);
}
public class Syncfusion.XlsIO.Implementation.DynamicFilter : object {
    private DynamicFilterType m_dateFilterType;
    public ExcelFilterType FilterType { get; }
    public DynamicFilterType DateFilterType { get; internal set; }
    public sealed virtual ExcelFilterType get_FilterType();
    public DynamicFilterType get_DateFilterType();
    internal void set_DateFilterType(DynamicFilterType value);
}
public class Syncfusion.XlsIO.Implementation.EnumFontFamExProc : MulticastDelegate {
    public EnumFontFamExProc(object object, IntPtr method);
    public virtual int Invoke(ENUMLOGFONTEX lpelf, IntPtr lpntm, int FontType, Object& objData);
    public virtual IAsyncResult BeginInvoke(ENUMLOGFONTEX lpelf, IntPtr lpntm, int FontType, Object& objData, AsyncCallback callback, object object);
    public virtual int EndInvoke(Object& objData, IAsyncResult result);
}
public class Syncfusion.XlsIO.Implementation.ENUMLOGFONTEX : object {
    public LOGFONT m_logFont;
    private Byte[] m_arrFullName;
    private Byte[] m_arrStyle;
    public Byte[] m_arrScript;
    public string FullName { get; }
    public string Style { get; }
    public LOGFONT LogFont { get; }
    public string get_FullName();
    public string get_Style();
    public LOGFONT get_LogFont();
    private string GetZeroTerminatedString(Byte[] arrData);
}
public class Syncfusion.XlsIO.Implementation.ErrorIndicatorImpl : RangesOperations {
    public static int MaximumIndicatorsInRecord;
    private ExcelIgnoreError m_options;
    public ExcelIgnoreError IgnoreOptions { get; public set; }
    public ErrorIndicatorImpl(Rectangle rect, ExcelIgnoreError options);
    public ErrorIndicatorImpl(ExcelIgnoreError option);
    public sealed virtual ExcelIgnoreError get_IgnoreOptions();
    public sealed virtual void set_IgnoreOptions(ExcelIgnoreError value);
    public ErrorIndicatorImpl Clone();
    public void AddCells(ErrorIndicatorImpl errorIndicator);
}
[PreserveAttribute]
public class Syncfusion.XlsIO.Implementation.EvaluateEventArgs : EventArgs {
    private IRange m_range;
    private Ptg[] m_FormulaTokens;
    public IRange Range { get; }
    public Ptg[] PtgArray { get; }
    public static EvaluateEventArgs Empty { get; }
    public EvaluateEventArgs(IRange range, Ptg[] array);
    public IRange get_Range();
    public Ptg[] get_PtgArray();
    public static EvaluateEventArgs get_Empty();
}
[PreserveAttribute]
public class Syncfusion.XlsIO.Implementation.EvaluateEventHandler : MulticastDelegate {
    public EvaluateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EvaluateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EvaluateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.Implementation.ExcelToHtmlConverter : object {
    private static string Pt;
    private static string Px;
    private static string Em;
    private static string TabPart;
    private static string HyperlinkStyleName;
    private static string ConditionFormatsClass;
    private static string Sheet;
    private static string ExtendedFormatClass;
    private static string MergedRangeClass;
    private static string BlackColorHexName;
    private XmlWriter m_writer;
    private Dictionary`2<string, string> m_cssStyles;
    private Dictionary`2<string, string> m_commonStyles;
    private StringBuilder builder;
    private List`1<MergedRegion> lstRegions;
    private string m_keyNoPosition;
    private ConversionMode m_conversionMode;
    private Dictionary`2<string, Dictionary`2<string, LinkedList`1<string>>> m_worksheetStyleCollections;
    private int increment;
    private ItemSizeHelper m_columnWidthGetter;
    private IWorksheet workSheet;
    private Dictionary`2<long, List`1<ShapeInfo>> shapeCollection;
    private CFApplier conditionalFormatApplier;
    private bool m_isLastCellNotEmpty;
    private SortedList`2<long, ExtendedFormatImpl> m_sortedList;
    private TableStyleRenderer tableStyle;
    private Dictionary`2<long, Dictionary`2<ExcelBordersIndex, Color>> tableBorderColorList;
    private Dictionary`2<IRange, Color> fontTableColors;
    private XmlWriterSettings XmlSettings { get; }
    private XmlWriter Writer { get; }
    internal ItemSizeHelper ColumnWidthGetter { get; }
    private XmlWriterSettings get_XmlSettings();
    private XmlWriter get_Writer();
    internal ItemSizeHelper get_ColumnWidthGetter();
    public void ConvertToHtml(Stream stream, WorkbookImpl book, string outputDirectoryPath, HtmlSaveOptions saveOption);
    internal void ConvertToHtml(Stream stream, WorkbookImpl book, HtmlSaveOptions saveOption);
    public void ConvertToHtml(Stream stream, WorksheetImpl sheet, string outputDirectoryPath, HtmlSaveOptions saveOption);
    private void BuildMainPage(WorkbookImpl book, string outputDirectoryPath, HtmlSaveOptions saveOption);
    private void BuildScripts(WorkbookImpl book);
    private void BuildTabPage(WorkbookImpl book);
    private void BuildTabPage(WorkbookImpl book, string outputDirectoryPath);
    private void BuildStyles(WorksheetImpl sheet, HtmlSaveOptions saveOption, XmlWriter writer, String& style);
    private void BuildCommonStyles(string styleSheet, WorkbookImpl book, String& styles);
    private string GetCommonStyles(WorkbookImpl book);
    private void BuildStyles(WorkbookImpl book, HtmlSaveOptions saveOption, XmlWriter m_writer, String& styles);
    private void WriteDocumentStart();
    private void WriteDocumentEnd();
    private string GetStreamStyles(WorksheetImpl sheet, HtmlSaveOptions saveOption);
    private string GetScript(WorkbookImpl book);
    private string GetTabScript(WorkbookImpl book);
    private string GetStyles(WorksheetImpl sheet, HtmlSaveOptions saveOption);
    private void GetStyle(ExtendedFormatImpl format, IRange cell, bool conditionalFormats);
    private string SwitchFont(string fontFamily);
    private Color NormalizeColor(Color color);
    private string GetBorderStyles(IRange result, string keyNoPosition);
    private string CanDrawBorder(IBorder border, ExcelBordersIndex index, IRange result);
    private string CheckCellBorderStyle(IBorders borders, ExcelBordersIndex index);
    private float GetBorderWidth(string border);
    private string GetDashStyle(string border);
    private Dictionary`2<string, string> BuildBorders(IRange result);
    private void GetImageStyles(WorksheetImpl sheet, StringBuilder builder);
    private string GetShapeStyle(IShape shape, string uniqueId);
    private float GetColumnWidth(WorksheetImpl sheetImpl, int columnIndex);
    private float GetMaxWidth(List`1<float> maxList);
    private void WriteSheetContent(WorksheetImpl sheet, string outputDirectoryPath, HtmlSaveOptions saveOption, XmlWriter Writer, string style, bool addWarning);
    private void DrawIconSet(string imageValue, int width, int height, ExcelHAlign hAlign, String& className);
    private string GetCssClassName(MigrantRangeImpl result, ExtendedFormatImpl xf, bool isCellMerged);
    private string GetHorizontalAlignmentGeneral(MigrantRangeImpl result);
    private void WriteCellStyle(MigrantRangeImpl result);
    private void SerializeHyperLink(IRange cell, Boolean& addTrailWatermark);
    private string GetAddress(string address);
    private void NormalizeString(string value, IRange result, ExtendedFormatImpl xf, int count, List`1<int> columnsWidth, int columnNo, WorksheetImpl sheet, HtmlSaveOptions saveOption, bool isCellMerged);
    internal static string GetUnicode(string unicodeText);
    private int WriteCellWidth(IRange result, XmlWriter Writer, List`1<int> columnsWidth, int columnNo, string row, WorksheetImpl sheet, HtmlSaveOptions saveOption, string cellText);
    private void WriteImage(WorksheetBaseImpl sheet, XmlWriter Writer, string outputDirectoryPath, HtmlSaveOptions saveOption, IPictureShape pictureShape, int index, long startCellIndex);
    private Stream ConvertChartToImageStream(IChart chart);
    private void WriteChart(WorksheetBaseImpl sheet, XmlWriter Writer, string outputDirectoryPath, HtmlSaveOptions saveOption, Stream chart, string imageName, int index, long startCellIndex);
    private string ImageToBase64(Image img, ImageFormat imageFormat);
    private string GetExtension(ImageFormat format);
    private void WriteBackGroundImage(WorksheetBaseImpl sheet, XmlWriter Writer, string outputDirectoryPath, HtmlSaveOptions saveOption, Image pictureShape);
    private string GetColumnName(int iColumn);
    private void BuildHtmlFiles(WorkbookImpl book, string outputDirectoryPath, HtmlSaveOptions saveOption);
    private void InitiateShapeCollection();
    private string GetShapeStyleInline(IShape shape, long startCellIndex);
    private int GetShapeOffsetInPixels(ShapeImpl shapeImpl, int position, int offSetValue, int fullConstValue);
    private void CheckandUpdateUnUsedRangeImages(WorksheetImpl sheet, bool isRow, int rowPosition, int colPosition, Int32& returnValuerow, Int32& returnValuecol);
    private void WriteShapesOnWorksheet(long cellIndex, WorksheetBaseImpl sheet, string outputDirectoryPath, HtmlSaveOptions saveOption, long startCellIndex);
    private void GetUnUsedRowColumnOnShapes(WorksheetImpl sheet, Int32& moreNoOfRows, Int32& moreNoOfColumns);
    private long CheckAndGetLocationOnMerged(WorksheetImpl sheet, MergedCellInfo mergedCellInfo, int row, int column, string outputDirectoryPath, HtmlSaveOptions saveOption);
    private int GetMergedRegionOffset(IWorksheet sheet, long startCellIndex, int row, int column, bool isTopOffset);
    public sealed virtual void Dispose();
}
public class Syncfusion.XlsIO.Implementation.Exceptions.InvalidRangeException : ApplicationException {
    private static string DEF_MESSAGE;
    public InvalidRangeException(string message);
    public InvalidRangeException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.LargeBiffRecordDataException : ApplicationException {
    public LargeBiffRecordDataException(string message);
    public LargeBiffRecordDataException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.LockShareViolationException : ApplicationException {
    private static string DEF_MESSAGE;
    private static string DEF_MESSAGE_CODE;
    public LockShareViolationException(string message);
    public LockShareViolationException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.ParseException : ArgumentException {
    private static string DEF_MESSAGE_FORMAT;
    public ParseException(string message);
    public ParseException(string message, Exception innerException);
    public ParseException(string message, string formula, int position, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.ReadOnlyException : ApplicationException {
    private static string DEF_MESSAGE;
    public ReadOnlyException(string message);
    public ReadOnlyException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.SmallBiffRecordDataException : ApplicationException {
    public SmallBiffRecordDataException(string message);
    public SmallBiffRecordDataException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.UnexpectedRecordException : ApplicationException {
    private static string DEF_MESSAGE;
    private static string DEF_MESSAGE_CODE;
    public UnexpectedRecordException(TBIFFRecord recordCode);
    public UnexpectedRecordException(string message);
    public UnexpectedRecordException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.WrongBiffRecordDataException : ApplicationException {
    public WrongBiffRecordDataException(string message);
    public WrongBiffRecordDataException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.WrongBiffStreamFormatException : ApplicationException {
    public WrongBiffStreamFormatException(string message);
    public WrongBiffStreamFormatException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.WrongBiffStreamPartException : ApplicationException {
    public WrongBiffStreamPartException(string message);
    public WrongBiffStreamPartException(string message, Exception innerException);
}
public class Syncfusion.XlsIO.Implementation.Exceptions.XmlReadingException : ApplicationException {
    private static string DEF_ERROR;
    public XmlReadingException(string message);
    public XmlReadingException(string strBlock, string strDescription);
}
public class Syncfusion.XlsIO.Implementation.ExportDataTableEventArgs : EventArgs {
    private int m_excelRowIndex;
    private int m_excelColumnIndex;
    private int m_DataTableColumnIndex;
    private object m_excelValue;
    private ExportDataTableActions m_exportDataTableAction;
    private IRange m_cellRange;
    private Type m_columnType;
    private object m_dataTableValue;
    public int DataTableColumnIndex { get; internal set; }
    public Type ColumnType { get; internal set; }
    public IRange CellRange { get; internal set; }
    public int ExcelRowIndex { get; internal set; }
    public int ExcelColumnIndex { get; internal set; }
    public object ExcelValue { get; internal set; }
    public object DataTableValue { get; public set; }
    public ExportDataTableActions ExportDataTableAction { get; public set; }
    public int get_DataTableColumnIndex();
    internal void set_DataTableColumnIndex(int value);
    public Type get_ColumnType();
    internal void set_ColumnType(Type value);
    public IRange get_CellRange();
    internal void set_CellRange(IRange value);
    public int get_ExcelRowIndex();
    internal void set_ExcelRowIndex(int value);
    public int get_ExcelColumnIndex();
    internal void set_ExcelColumnIndex(int value);
    public object get_ExcelValue();
    internal void set_ExcelValue(object value);
    public object get_DataTableValue();
    public void set_DataTableValue(object value);
    public ExportDataTableActions get_ExportDataTableAction();
    public void set_ExportDataTableAction(ExportDataTableActions value);
}
public class Syncfusion.XlsIO.Implementation.ExtendedFormatImpl : CommonObject {
    internal ushort FONTBOLD;
    internal ushort FONTNORMAL;
    public static int DEF_NO_PARENT_INDEX;
    public static int TopToBottomRotation;
    public static int MaxTintValue;
    private UInt32 m_cfApplied;
    private ExtendedFormatRecord m_extFormat;
    private ExtendedXFRecord m_xfExt;
    private WorkbookImpl m_book;
    private int m_iXFIndex;
    private ShapeFillImpl m_gradient;
    private ColorObject m_color;
    private ColorObject m_patternColor;
    private ColorObject m_topBorderColor;
    private ColorObject m_bottomBorderColor;
    private ColorObject m_leftBorderColor;
    private ColorObject m_rightBorderColor;
    private ColorObject m_diagonalBorderColor;
    private bool m_hasBorder;
    private bool m_pivotButton;
    private bool isVerticalText;
    internal bool m_bisValid;
    private int m_cfPriority;
    private bool m_bIsPivotFormat;
    private Color m_dataBarColor;
    private int m_dataBarPriority;
    public int FontIndex { get; public set; }
    public int XFormatIndex { get; }
    public int NumberFormatIndex { get; public set; }
    public ExcelPattern FillPattern { get; public set; }
    public ExcelKnownColors FillBackground { get; public set; }
    public Color FillBackgroundRGB { get; public set; }
    public ExcelKnownColors FillForeground { get; public set; }
    public Color FillForegroundRGB { get; public set; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public int IndentLevel { get; public set; }
    public bool FormulaHidden { get; public set; }
    public bool Locked { get; public set; }
    public bool JustifyLast { get; public set; }
    public string NumberFormat { get; public set; }
    public string NumberFormatLocal { get; public set; }
    public INumberFormat NumberFormatSettings { get; }
    public bool ShrinkToFit { get; public set; }
    public bool WrapText { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public bool IncludeAlignment { get; public set; }
    public bool IncludeBorder { get; public set; }
    public bool IncludeFont { get; public set; }
    public bool IncludeNumberFormat { get; public set; }
    public bool IncludePatterns { get; public set; }
    public bool IncludeProtection { get; public set; }
    public IFont Font { get; }
    public IBorders Borders { get; }
    public bool IsFirstSymbolApostrophe { get; public set; }
    public ExcelKnownColors PatternColorIndex { get; public set; }
    public Color PatternColor { get; public set; }
    public ColorObject PatternColorObject { get; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public ColorObject ColorObject { get; }
    public bool IsModified { get; }
    public List`1<ExtendedProperty> Properties { get; public set; }
    public ExcelReadingOrderType ReadingOrder { get; public set; }
    public int Rotation { get; public set; }
    internal bool IsVerticalText { get; }
    [CLSCompliantAttribute("False")]
public TXFType XFType { get; public set; }
    internal int CFPriority { get; internal set; }
    internal Color DataBarColor { get; internal set; }
    internal int DataBarPriority { get; internal set; }
    internal UInt32 CFApplied { get; internal set; }
    public IGradient Gradient { get; public set; }
    internal int Index { get; internal set; }
    [CLSCompliantAttribute("False")]
public ExtendedFormatRecord Record { get; protected set; }
    [CLSCompliantAttribute("False")]
public ExtendedXFRecord XFRecord { get; protected set; }
    internal int ParentIndex { get; internal set; }
    public WorkbookImpl Workbook { get; }
    protected internal ExtendedFormatsCollection ParentCollection { get; }
    public ColorObject BottomBorderColor { get; }
    public ColorObject TopBorderColor { get; }
    public ColorObject LeftBorderColor { get; }
    public ColorObject RightBorderColor { get; }
    public ColorObject DiagonalBorderColor { get; }
    public ExcelLineStyle LeftBorderLineStyle { get; public set; }
    public ExcelLineStyle RightBorderLineStyle { get; public set; }
    public ExcelLineStyle TopBorderLineStyle { get; public set; }
    public ExcelLineStyle BottomBorderLineStyle { get; public set; }
    public ExcelLineStyle DiagonalUpBorderLineStyle { get; public set; }
    public ExcelLineStyle DiagonalDownBorderLineStyle { get; public set; }
    public bool DiagonalUpVisible { get; public set; }
    public bool DiagonalDownVisible { get; public set; }
    public bool HasParent { get; }
    public bool IsDefaultColor { get; }
    public bool IsDefaultPatternColor { get; }
    private ExtendedFormatRecord ParentRecord { get; }
    private ExtendedFormatImpl ParentFormat { get; }
    public FormatImpl NumberFormatObject { get; }
    public bool HasBorder { get; public set; }
    internal bool PivotButton { get; internal set; }
    internal bool IsPivotFormat { get; internal set; }
    protected ColorObject InnerColor { get; }
    protected ColorObject InnerPatternColor { get; }
    protected ColorObject InnerTopBorderColor { get; }
    protected ColorObject InnerBottomBorderColor { get; }
    protected ColorObject InnerLeftBorderColor { get; }
    protected ColorObject InnerRightBorderColor { get; }
    protected ColorObject InnerDiagonalBorderColor { get; }
    public ExtendedFormatImpl(IApplication application, object parent);
    private ExtendedFormatImpl(IApplication application, object parent, BiffReader reader);
    [CLSCompliantAttribute("False")]
public ExtendedFormatImpl(IApplication application, object parent, BiffRecordRaw[] data, int position);
    public ExtendedFormatImpl(IApplication application, object parent, List`1<BiffRecordRaw> data, int position);
    [CLSCompliantAttribute("False")]
public ExtendedFormatImpl(IApplication application, object parent, ExtendedFormatRecord format, ExtendedXFRecord xfExt);
    [CLSCompliantAttribute("False")]
public ExtendedFormatImpl(IApplication application, object parent, ExtendedFormatRecord format, ExtendedXFRecord xfext, bool bInitializeColors);
    public int get_FontIndex();
    public void set_FontIndex(int value);
    public sealed virtual int get_XFormatIndex();
    public sealed virtual int get_NumberFormatIndex();
    public sealed virtual void set_NumberFormatIndex(int value);
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    public sealed virtual ExcelKnownColors get_FillBackground();
    public sealed virtual void set_FillBackground(ExcelKnownColors value);
    public sealed virtual Color get_FillBackgroundRGB();
    public sealed virtual void set_FillBackgroundRGB(Color value);
    public sealed virtual ExcelKnownColors get_FillForeground();
    public sealed virtual void set_FillForeground(ExcelKnownColors value);
    public sealed virtual Color get_FillForegroundRGB();
    public sealed virtual void set_FillForegroundRGB(Color value);
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual bool get_Locked();
    public sealed virtual void set_Locked(bool value);
    public sealed virtual bool get_JustifyLast();
    public sealed virtual void set_JustifyLast(bool value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual string get_NumberFormatLocal();
    public sealed virtual void set_NumberFormatLocal(string value);
    public sealed virtual INumberFormat get_NumberFormatSettings();
    public sealed virtual bool get_ShrinkToFit();
    public sealed virtual void set_ShrinkToFit(bool value);
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual bool get_IncludeAlignment();
    public sealed virtual void set_IncludeAlignment(bool value);
    public sealed virtual bool get_IncludeBorder();
    public sealed virtual void set_IncludeBorder(bool value);
    public sealed virtual bool get_IncludeFont();
    public sealed virtual void set_IncludeFont(bool value);
    public sealed virtual bool get_IncludeNumberFormat();
    public sealed virtual void set_IncludeNumberFormat(bool value);
    public sealed virtual bool get_IncludePatterns();
    public sealed virtual void set_IncludePatterns(bool value);
    public sealed virtual bool get_IncludeProtection();
    public sealed virtual void set_IncludeProtection(bool value);
    public virtual IFont get_Font();
    public sealed virtual IBorders get_Borders();
    public sealed virtual bool get_IsFirstSymbolApostrophe();
    public sealed virtual void set_IsFirstSymbolApostrophe(bool value);
    public sealed virtual ExcelKnownColors get_PatternColorIndex();
    public sealed virtual void set_PatternColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_PatternColor();
    public sealed virtual void set_PatternColor(Color value);
    public ColorObject get_PatternColorObject();
    public sealed virtual ExcelKnownColors get_ColorIndex();
    public sealed virtual void set_ColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public ColorObject get_ColorObject();
    public sealed virtual bool get_IsModified();
    private bool CompareProperties(ExtendedFormatImpl parent);
    public List`1<ExtendedProperty> get_Properties();
    public void set_Properties(List`1<ExtendedProperty> value);
    public sealed virtual ExcelReadingOrderType get_ReadingOrder();
    public sealed virtual void set_ReadingOrder(ExcelReadingOrderType value);
    public sealed virtual int get_Rotation();
    public sealed virtual void set_Rotation(int value);
    internal bool get_IsVerticalText();
    public TXFType get_XFType();
    public void set_XFType(TXFType value);
    internal int get_CFPriority();
    internal void set_CFPriority(int value);
    internal Color get_DataBarColor();
    internal void set_DataBarColor(Color value);
    internal int get_DataBarPriority();
    internal void set_DataBarPriority(int value);
    internal UInt32 get_CFApplied();
    internal void set_CFApplied(UInt32 value);
    public IGradient get_Gradient();
    public void set_Gradient(IGradient value);
    internal int get_Index();
    internal void set_Index(int value);
    public ExtendedFormatRecord get_Record();
    protected void set_Record(ExtendedFormatRecord value);
    public ExtendedXFRecord get_XFRecord();
    protected void set_XFRecord(ExtendedXFRecord value);
    internal int get_ParentIndex();
    internal void set_ParentIndex(int value);
    public sealed virtual WorkbookImpl get_Workbook();
    protected internal ExtendedFormatsCollection get_ParentCollection();
    public sealed virtual ColorObject get_BottomBorderColor();
    public sealed virtual ColorObject get_TopBorderColor();
    public sealed virtual ColorObject get_LeftBorderColor();
    public sealed virtual ColorObject get_RightBorderColor();
    public sealed virtual ColorObject get_DiagonalBorderColor();
    public sealed virtual ExcelLineStyle get_LeftBorderLineStyle();
    public sealed virtual void set_LeftBorderLineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_RightBorderLineStyle();
    public sealed virtual void set_RightBorderLineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_TopBorderLineStyle();
    public sealed virtual void set_TopBorderLineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_BottomBorderLineStyle();
    public sealed virtual void set_BottomBorderLineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_DiagonalUpBorderLineStyle();
    public sealed virtual void set_DiagonalUpBorderLineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_DiagonalDownBorderLineStyle();
    public sealed virtual void set_DiagonalDownBorderLineStyle(ExcelLineStyle value);
    public sealed virtual bool get_DiagonalUpVisible();
    public sealed virtual void set_DiagonalUpVisible(bool value);
    public sealed virtual bool get_DiagonalDownVisible();
    public sealed virtual void set_DiagonalDownVisible(bool value);
    public bool get_HasParent();
    public bool get_IsDefaultColor();
    public bool get_IsDefaultPatternColor();
    private ExtendedFormatRecord get_ParentRecord();
    private ExtendedFormatImpl get_ParentFormat();
    public FormatImpl get_NumberFormatObject();
    public sealed virtual bool get_HasBorder();
    public void set_HasBorder(bool value);
    internal bool get_PivotButton();
    internal void set_PivotButton(bool value);
    internal bool get_IsPivotFormat();
    internal void set_IsPivotFormat(bool value);
    protected ColorObject get_InnerColor();
    protected ColorObject get_InnerPatternColor();
    protected ColorObject get_InnerTopBorderColor();
    protected ColorObject get_InnerBottomBorderColor();
    protected ColorObject get_InnerLeftBorderColor();
    protected ColorObject get_InnerRightBorderColor();
    protected ColorObject get_InnerDiagonalBorderColor();
    internal void SetChanged();
    public void CopyTo(ExtendedFormatImpl twin);
    public ExtendedFormatImpl CreateChildFormat();
    public ExtendedFormatImpl CreateChildFormat(bool bRegister);
    private ExtendedFormatImpl UpdateIncludeProperties(int index, ExtendedFormatImpl format);
    public ExtendedFormatImpl CreateChildFormat(ExtendedFormatImpl oldFormat);
    public void SynchronizeWithParent();
    private void CopyBorders(ExtendedFormatImpl source);
    private void CopyPatterns(ExtendedFormatImpl source);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    private void FindParents();
    [CLSCompliantAttribute("False")]
protected void Parse(BiffReader reader);
    [CLSCompliantAttribute("False")]
protected void Parse(IList`1<BiffRecordRaw> data, int position);
    [CLSCompliantAttribute("False")]
protected void Parse(ExtendedFormatRecord format, ExtendedXFRecord xfExt);
    [CLSCompliantAttribute("False")]
protected void Parse(ExtendedFormatRecord format, ExtendedXFRecord xfExt, bool isInitializeColors);
    public void UpdateFromParent();
    public void UpdateFromCurrentExtendedFormat(ExtendedFormatImpl CurrXF);
    public void UpdateFromCurrentExtendedFormatNew(ExtendedFormatImpl CurrXF, bool isCellStyle);
    protected void InitializeColors();
    internal void UpdateColor();
    internal void UpdatePatternColor();
    internal void UpdateTopBorderColor();
    internal void UpdateBottomBorderColor();
    internal void UpdateLeftBorderColor();
    internal void UpdateRightBorderColor();
    internal void UpdateDiagonalBorderColor();
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records, UInt32[] crcCache);
    [CLSCompliantAttribute("False")]
protected void CheckAndCorrectFormatRecord(ExtendedFormatRecord record);
    [CLSCompliantAttribute("False")]
public void SerializeXFormat(OffsetArrayList records);
    private void CopyColors(ExtendedXFRecord xfExt);
    public sealed virtual int CompareTo(object obj);
    public int CompareTo(ExtendedFormatImpl twin);
    public int CompareToWithoutIndex(ExtendedFormatImpl twin);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static void CopyFromTo(ExtendedFormatImpl childFormat, ExtendedFormatImpl parentFormat, bool bSetFlag);
    private static void CopyAlignment(ExtendedFormatImpl childFormat, ExtendedFormatImpl parentFormat, bool bSetFlag);
    private static void CopyBorders(ExtendedFormatImpl childFormat, ExtendedFormatImpl parentFormat, bool bSetFlag);
    private static void CopyFont(ExtendedFormatImpl childFormat, ExtendedFormatImpl parentFormat, bool bSetFlag);
    private static void CopyFormat(ExtendedFormatImpl childFormat, ExtendedFormatImpl parentFormat, bool bSetFlag);
    private static void CopyPatterns(ExtendedFormatImpl childFormat, ExtendedFormatImpl parentFormat, bool bSetFlag);
    private static void CopyProtection(ExtendedFormatImpl childFormat, ExtendedFormatImpl parentFormat, bool bSetFlag);
    protected internal void CopyColorsFrom(ExtendedFormatImpl format);
    public sealed virtual object Clone();
    public ExtendedFormatImpl TypedClone(object parent);
    private sealed virtual override object Syncfusion.XlsIO.Interfaces.ICloneParent.Clone(object parent);
    public void Clear();
    private sealed virtual override void System.IDisposable.Dispose();
    internal void ClearAll();
    private void CheckAndUpdateHasBorder(ExtendedFormatRecord record);
}
internal class Syncfusion.XlsIO.Implementation.ExtendedFormatStandAlone : ExtendedFormatImpl {
    private static DataBarDirection DefaultDataBarDirection;
    private static Color DefaultColor;
    private FontImpl font;
    private ExcelIconSetType m_iconSetType;
    private int m_iconId;
    private string m_iconName;
    private Image m_advancedCFIcon;
    private bool m_showIconOnly;
    private double m_dataBarPercent;
    private bool m_hasGradientFill;
    private double m_cellvalue;
    private DataBarDirection m_direction;
    private bool m_hasExtensionList;
    internal string ST_GUID;
    private Color m_dataBarBorderColor;
    private bool m_hasDataBarBorder;
    private bool m_bShowValue;
    private bool m_bNegativeBar;
    private double m_nagativeBarPoint;
    private Color m_axisColor;
    private Color m_negativeDataBarBorderColor;
    private Color m_negativeFillColor;
    private bool m_bHasDiffNegativeBarColor;
    private bool m_bHasDiffNegativeBarBorderColor;
    private Color m_barColor;
    private bool m_hasDataBar;
    private bool m_hasIconSet;
    private double m_minValue;
    private double m_maxValue;
    public IFont Font { get; }
    internal int IconId { get; internal set; }
    internal ExcelIconSetType IconSet { get; internal set; }
    internal string IconName { get; internal set; }
    internal Image AdvancedCFIcon { get; internal set; }
    internal DataBarDirection DataBarDirection { get; internal set; }
    internal Color BarAxisColor { get; internal set; }
    internal double MinValue { get; internal set; }
    internal bool HasDataBar { get; internal set; }
    internal bool HasIconSet { get; internal set; }
    internal double MaxValue { get; internal set; }
    internal Color NegativeDataBarBorderColor { get; internal set; }
    internal bool HasDiffNegativeBarColor { get; internal set; }
    internal bool HasDiffNegativeBarBorderColor { get; internal set; }
    internal Color NegativeFillColor { get; internal set; }
    internal bool ShowValue { get; internal set; }
    internal bool IsNegativeBar { get; internal set; }
    internal Color DataBarBorderColor { get; internal set; }
    internal bool HasDataBarBorder { get; internal set; }
    internal double DataBarPercent { get; internal set; }
    internal bool HasGradientFill { get; internal set; }
    internal double CellValue { get; internal set; }
    internal double NegativeBarPoint { get; internal set; }
    internal bool ShowIconOnly { get; internal set; }
    public ExtendedFormatStandAlone(ExtendedFormatImpl format);
    private static ExtendedFormatStandAlone();
    public virtual IFont get_Font();
    internal int get_IconId();
    internal void set_IconId(int value);
    internal ExcelIconSetType get_IconSet();
    internal void set_IconSet(ExcelIconSetType value);
    internal string get_IconName();
    internal void set_IconName(string value);
    internal Image get_AdvancedCFIcon();
    internal void set_AdvancedCFIcon(Image value);
    internal DataBarDirection get_DataBarDirection();
    internal void set_DataBarDirection(DataBarDirection value);
    internal Color get_BarAxisColor();
    internal void set_BarAxisColor(Color value);
    internal double get_MinValue();
    internal void set_MinValue(double value);
    internal bool get_HasDataBar();
    internal void set_HasDataBar(bool value);
    internal bool get_HasIconSet();
    internal void set_HasIconSet(bool value);
    internal double get_MaxValue();
    internal void set_MaxValue(double value);
    internal Color get_NegativeDataBarBorderColor();
    internal void set_NegativeDataBarBorderColor(Color value);
    internal bool get_HasDiffNegativeBarColor();
    internal void set_HasDiffNegativeBarColor(bool value);
    internal bool get_HasDiffNegativeBarBorderColor();
    internal void set_HasDiffNegativeBarBorderColor(bool value);
    internal Color get_NegativeFillColor();
    internal void set_NegativeFillColor(Color value);
    internal bool get_ShowValue();
    internal void set_ShowValue(bool value);
    internal bool get_IsNegativeBar();
    internal void set_IsNegativeBar(bool value);
    internal Color get_DataBarBorderColor();
    internal void set_DataBarBorderColor(Color value);
    internal bool get_HasDataBarBorder();
    internal void set_HasDataBarBorder(bool value);
    internal double get_DataBarPercent();
    internal void set_DataBarPercent(double value);
    internal bool get_HasGradientFill();
    internal void set_HasGradientFill(bool value);
    internal double get_CellValue();
    internal void set_CellValue(double value);
    internal double get_NegativeBarPoint();
    internal void set_NegativeBarPoint(double value);
    internal bool get_ShowIconOnly();
    internal void set_ShowIconOnly(bool value);
    private void UpdateIconSetValues(ExtendedFormatImpl format);
}
public class Syncfusion.XlsIO.Implementation.ExtendedFormatWrapper : CommonWrapper {
    protected internal ExtendedFormatImpl m_xFormat;
    protected WorkbookImpl m_book;
    protected FontWrapper m_font;
    private BordersCollection m_borders;
    private InteriorWrapper m_interior;
    [CompilerGeneratedAttribute]
private EventHandler NumberFormatChanged;
    public WorkbookImpl Workbook { get; }
    public ExcelPattern FillPattern { get; public set; }
    public int XFormatIndex { get; }
    public ExcelKnownColors FillBackground { get; public set; }
    public Color FillBackgroundRGB { get; public set; }
    public ExcelKnownColors FillForeground { get; public set; }
    public Color FillForegroundRGB { get; public set; }
    public int NumberFormatIndex { get; public set; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public bool IncludeAlignment { get; public set; }
    public bool IncludeBorder { get; public set; }
    public bool IncludeFont { get; public set; }
    public bool IncludeNumberFormat { get; public set; }
    public bool IncludePatterns { get; public set; }
    public bool IncludeProtection { get; public set; }
    public int IndentLevel { get; public set; }
    public bool FormulaHidden { get; public set; }
    public bool Locked { get; public set; }
    public bool JustifyLast { get; public set; }
    public string NumberFormat { get; public set; }
    public string NumberFormatLocal { get; public set; }
    public INumberFormat NumberFormatSettings { get; }
    public ExcelReadingOrderType ReadingOrder { get; public set; }
    public int Rotation { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public bool WrapText { get; public set; }
    public IFont Font { get; }
    public IBorders Borders { get; }
    public bool IsFirstSymbolApostrophe { get; public set; }
    public ExcelKnownColors PatternColorIndex { get; public set; }
    public Color PatternColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public IInterior Interior { get; }
    public bool IsModified { get; }
    public int FontIndex { get; public set; }
    public ExtendedFormatImpl Wrapped { get; }
    public bool HasBorder { get; }
    public ColorObject BottomBorderColor { get; }
    public ColorObject TopBorderColor { get; }
    public ColorObject LeftBorderColor { get; }
    public ColorObject RightBorderColor { get; }
    public ColorObject DiagonalBorderColor { get; }
    public ExcelLineStyle LeftBorderLineStyle { get; public set; }
    public ExcelLineStyle RightBorderLineStyle { get; public set; }
    public ExcelLineStyle TopBorderLineStyle { get; public set; }
    public ExcelLineStyle BottomBorderLineStyle { get; public set; }
    public ExcelLineStyle DiagonalUpBorderLineStyle { get; public set; }
    public ExcelLineStyle DiagonalDownBorderLineStyle { get; public set; }
    public bool DiagonalUpVisible { get; public set; }
    public bool DiagonalDownVisible { get; public set; }
    public IApplication Application { get; }
    public object Parent { get; }
    public bool BuiltIn { get; }
    public string Name { get; }
    public bool IsInitialized { get; }
    public ExtendedFormatWrapper(WorkbookImpl book);
    public ExtendedFormatWrapper(WorkbookImpl book, int iXFIndex);
    public void ChangeFillPattern();
    public void SetFormatIndex(int index);
    public void UpdateFont();
    protected virtual void SetParents(object parent);
    protected void SetChanged();
    private void WrappedFontAfterChangeEvent(object sender, EventArgs e);
    private void WrappedInteriorAfterChangeEvent(object sender, EventArgs e);
    protected void OnNumberFormatChange();
    public virtual object Clone(object parent);
    protected virtual void BeforeRead();
    private IStyle GetStyle();
    public sealed virtual WorkbookImpl get_Workbook();
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    public sealed virtual int get_XFormatIndex();
    public sealed virtual ExcelKnownColors get_FillBackground();
    public sealed virtual void set_FillBackground(ExcelKnownColors value);
    public sealed virtual Color get_FillBackgroundRGB();
    public sealed virtual void set_FillBackgroundRGB(Color value);
    public sealed virtual ExcelKnownColors get_FillForeground();
    public sealed virtual void set_FillForeground(ExcelKnownColors value);
    public sealed virtual Color get_FillForegroundRGB();
    public sealed virtual void set_FillForegroundRGB(Color value);
    public sealed virtual int get_NumberFormatIndex();
    public sealed virtual void set_NumberFormatIndex(int value);
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual bool get_IncludeAlignment();
    public sealed virtual void set_IncludeAlignment(bool value);
    public sealed virtual bool get_IncludeBorder();
    public sealed virtual void set_IncludeBorder(bool value);
    public sealed virtual bool get_IncludeFont();
    public sealed virtual void set_IncludeFont(bool value);
    public sealed virtual bool get_IncludeNumberFormat();
    public sealed virtual void set_IncludeNumberFormat(bool value);
    public sealed virtual bool get_IncludePatterns();
    public sealed virtual void set_IncludePatterns(bool value);
    public sealed virtual bool get_IncludeProtection();
    public sealed virtual void set_IncludeProtection(bool value);
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual bool get_Locked();
    public sealed virtual void set_Locked(bool value);
    public sealed virtual bool get_JustifyLast();
    public sealed virtual void set_JustifyLast(bool value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual string get_NumberFormatLocal();
    public sealed virtual void set_NumberFormatLocal(string value);
    public sealed virtual INumberFormat get_NumberFormatSettings();
    public sealed virtual ExcelReadingOrderType get_ReadingOrder();
    public sealed virtual void set_ReadingOrder(ExcelReadingOrderType value);
    public sealed virtual int get_Rotation();
    public sealed virtual void set_Rotation(int value);
    public sealed virtual bool get_ShrinkToFit();
    public sealed virtual void set_ShrinkToFit(bool value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual IFont get_Font();
    public sealed virtual IBorders get_Borders();
    public sealed virtual bool get_IsFirstSymbolApostrophe();
    public sealed virtual void set_IsFirstSymbolApostrophe(bool value);
    public sealed virtual ExcelKnownColors get_PatternColorIndex();
    public sealed virtual void set_PatternColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_PatternColor();
    public sealed virtual void set_PatternColor(Color value);
    public sealed virtual ExcelKnownColors get_ColorIndex();
    public sealed virtual void set_ColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual IInterior get_Interior();
    public sealed virtual bool get_IsModified();
    public int get_FontIndex();
    public void set_FontIndex(int value);
    public ExtendedFormatImpl get_Wrapped();
    public sealed virtual bool get_HasBorder();
    public virtual ColorObject get_BottomBorderColor();
    public virtual ColorObject get_TopBorderColor();
    public virtual ColorObject get_LeftBorderColor();
    public virtual ColorObject get_RightBorderColor();
    public sealed virtual ColorObject get_DiagonalBorderColor();
    public virtual ExcelLineStyle get_LeftBorderLineStyle();
    public virtual void set_LeftBorderLineStyle(ExcelLineStyle value);
    public virtual ExcelLineStyle get_RightBorderLineStyle();
    public virtual void set_RightBorderLineStyle(ExcelLineStyle value);
    public virtual ExcelLineStyle get_TopBorderLineStyle();
    public virtual void set_TopBorderLineStyle(ExcelLineStyle value);
    public virtual ExcelLineStyle get_BottomBorderLineStyle();
    public virtual void set_BottomBorderLineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_DiagonalUpBorderLineStyle();
    public sealed virtual void set_DiagonalUpBorderLineStyle(ExcelLineStyle value);
    public sealed virtual ExcelLineStyle get_DiagonalDownBorderLineStyle();
    public sealed virtual void set_DiagonalDownBorderLineStyle(ExcelLineStyle value);
    public sealed virtual bool get_DiagonalUpVisible();
    public sealed virtual void set_DiagonalUpVisible(bool value);
    public sealed virtual bool get_DiagonalDownVisible();
    public sealed virtual void set_DiagonalDownVisible(bool value);
    [CompilerGeneratedAttribute]
public void add_NumberFormatChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NumberFormatChanged(EventHandler value);
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public sealed virtual bool get_BuiltIn();
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsInitialized();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    internal void Dispose();
}
[ExtensionAttribute]
internal static class Syncfusion.XlsIO.Implementation.ExtensionMethods : object {
    [ExtensionAttribute]
internal static void CustomAdd(Dictionary`2<int, List`1<GroupPoint>> dictionary, int level, List`1<GroupPoint> value);
}
public class Syncfusion.XlsIO.Implementation.ExternalConnection : CommonObject {
    private string m_name;
    private string m_description;
    private UInt32 m_connectionId;
    private string m_connectionFile;
    private string m_sourceFile;
    private ExcelConnectionsType m_dataBaseType;
    private OLEDBConnection m_oledbConnection;
    private ODBCConnection m_odbcConnection;
    private UInt32 m_refershedVersion;
    private bool m_deleted;
    private bool m_backgroundQuery;
    private object m_connectionstring;
    private bool m_isexist;
    private string m_dbConnectionString;
    private IRange m_range;
    private string m_password;
    [CompilerGeneratedAttribute]
private ConnectionPasswordEventHandler OnConnectionPassword;
    private bool m_isXml;
    private string m_connectionURL;
    private Stream m_olapProperty;
    private Stream m_extLst;
    internal Stream m_textPr;
    internal ParametersCollection m_parameters;
    public string Description { get; public set; }
    public UInt32 ConncetionId { get; public set; }
    public UInt32 ConnectionId { get; public set; }
    public string ConnectionFile { get; public set; }
    public string SourceFile { get; public set; }
    public ExcelConnectionsType DataBaseType { get; public set; }
    public string Name { get; public set; }
    public OLEDBConnection OLEDBConnection { get; public set; }
    public ODBCConnection ODBCConnection { get; public set; }
    public UInt32 RefershedVersion { get; public set; }
    public UInt32 RefreshedVersion { get; public set; }
    public bool Deleted { get; public set; }
    public bool BackgroundQuery { get; public set; }
    internal object ConnectionString { get; internal set; }
    public bool IsExist { get; public set; }
    public string DBConnectionString { get; public set; }
    public IRange Range { get; public set; }
    internal bool IsXml { get; internal set; }
    internal string ConnectionURL { get; internal set; }
    public string password { get; public set; }
    public string Password { get; public set; }
    public Stream OlapProperty { get; public set; }
    public Stream ExtLstProperty { get; public set; }
    internal IParameters Parameters { get; }
    public ExternalConnection(IApplication application, object parent);
    private void initialize();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnConnectionPassword(ConnectionPasswordEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnConnectionPassword(ConnectionPasswordEventHandler value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual UInt32 get_ConncetionId();
    public void set_ConncetionId(UInt32 value);
    public sealed virtual UInt32 get_ConnectionId();
    public void set_ConnectionId(UInt32 value);
    public string get_ConnectionFile();
    public void set_ConnectionFile(string value);
    public string get_SourceFile();
    public void set_SourceFile(string value);
    public sealed virtual ExcelConnectionsType get_DataBaseType();
    public void set_DataBaseType(ExcelConnectionsType value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual OLEDBConnection get_OLEDBConnection();
    public void set_OLEDBConnection(OLEDBConnection value);
    public sealed virtual ODBCConnection get_ODBCConnection();
    public void set_ODBCConnection(ODBCConnection value);
    public UInt32 get_RefershedVersion();
    public void set_RefershedVersion(UInt32 value);
    public UInt32 get_RefreshedVersion();
    public void set_RefreshedVersion(UInt32 value);
    public bool get_Deleted();
    public void set_Deleted(bool value);
    public bool get_BackgroundQuery();
    public void set_BackgroundQuery(bool value);
    public sealed virtual void Delete();
    internal void set_ConnectionString(object value);
    internal object get_ConnectionString();
    public bool get_IsExist();
    public void set_IsExist(bool value);
    public string get_DBConnectionString();
    public void set_DBConnectionString(string value);
    public sealed virtual IRange get_Range();
    public void set_Range(IRange value);
    internal bool get_IsXml();
    internal void set_IsXml(bool value);
    internal string get_ConnectionURL();
    internal void set_ConnectionURL(string value);
    public string get_password();
    public void set_password(string value);
    public string get_Password();
    public void set_Password(string value);
    public Stream get_OlapProperty();
    public void set_OlapProperty(Stream value);
    public Stream get_ExtLstProperty();
    public void set_ExtLstProperty(Stream value);
    internal IParameters get_Parameters();
    public void RaiseEvent(object sender, ConnectionPassword args);
    internal ExternalConnection Clone(WorkbookImpl book, string ConnectionName);
    public void Disposeall();
    protected virtual override void Finalize();
}
public class Syncfusion.XlsIO.Implementation.ExternalConnectionCollection : CollectionBaseEx`1<IConnection> {
    private static string Default_Oledb_Provider;
    public ExternalConnectionCollection(IApplication application, object parent);
    public sealed virtual IConnection Add(string connectionName, string description, object connectionString, object commandText, ExcelCommandType commandType);
    public IConnection Add(ExcelConnectionsType Type);
    private void checkname(string name);
    private void CreateOledbConnection(ExternalConnection connection, object connectionSting, object commandText, ExcelCommandType commandType);
    private void CreateObdcConnection(ExternalConnection Connection, object ConnectionSting, object CommandText, ExcelCommandType CommandType);
    private string FindDataSource(string connectionString);
    internal static string Checkconnection(string connection);
    internal int GetConnectionId();
    private bool Checkconnections(IConnections connections, int Id);
    public void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.ExternalRange : object {
    private ExternWorksheetImpl m_sheet;
    private int m_iFirstRow;
    private int m_iFirstColumn;
    private int m_iLastRow;
    private int m_iLastColumn;
    private bool m_bIsNumReference;
    private bool m_bIsMultiReference;
    private bool m_bIsStringReference;
    public string Address { get; }
    public string AddressLocal { get; }
    public string AddressGlobal { get; }
    public string AddressR1C1 { get; }
    public string AddressR1C1Local { get; }
    public bool Boolean { get; public set; }
    public IBorders Borders { get; }
    public IRange[] Cells { get; }
    public int Column { get; }
    public int ColumnGroupLevel { get; }
    public double ColumnWidth { get; public set; }
    public int Count { get; }
    public DateTime DateTime { get; public set; }
    public string DisplayText { get; }
    public IRange End { get; }
    public IRange EntireColumn { get; }
    public IRange EntireRow { get; }
    public string Error { get; public set; }
    public string Formula { get; public set; }
    public string FormulaArray { get; public set; }
    public string FormulaArrayR1C1 { get; public set; }
    public bool FormulaHidden { get; public set; }
    public DateTime FormulaDateTime { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public bool FormulaBoolValue { get; public set; }
    public string FormulaErrorValue { get; public set; }
    public bool HasDataValidation { get; }
    public bool HasBoolean { get; }
    public bool HasDateTime { get; }
    public bool HasFormula { get; }
    public bool HasFormulaArray { get; }
    public bool HasNumber { get; }
    public bool HasRichText { get; }
    public bool HasString { get; }
    public bool HasStyle { get; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public IHyperLinks Hyperlinks { get; }
    public int IndentLevel { get; public set; }
    public bool IsBlank { get; }
    public bool IsBoolean { get; }
    public bool IsError { get; }
    public bool IsGroupedByColumn { get; }
    public bool IsGroupedByRow { get; }
    public bool IsInitialized { get; }
    public int LastColumn { get; }
    public int LastRow { get; }
    public double Number { get; public set; }
    public string NumberFormat { get; public set; }
    public int Row { get; }
    public int RowGroupLevel { get; }
    public double RowHeight { get; public set; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public IStyle CellStyle { get; public set; }
    public string CellStyleName { get; public set; }
    public string Text { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public string Value { get; public set; }
    public string CalculatedValue { get; }
    public object Value2 { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public IWorksheet Worksheet { get; }
    public IRange Item { get; public set; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IConditionalFormats ConditionalFormats { get; }
    public IDataValidation DataValidation { get; }
    public string FormulaStringValue { get; public set; }
    public double FormulaNumberValue { get; public set; }
    public bool HasFormulaBoolValue { get; }
    public bool HasFormulaErrorValue { get; }
    public bool HasFormulaDateTime { get; }
    public bool HasFormulaNumberValue { get; }
    public bool HasFormulaStringValue { get; }
    public ICommentShape Comment { get; }
    public IThreadedComment ThreadedComment { get; }
    public IRichTextString RichText { get; }
    public bool IsMerged { get; }
    public IRange MergeArea { get; }
    public bool WrapText { get; public set; }
    public bool HasExternalFormula { get; }
    public ExcelIgnoreError IgnoreErrorOptions { get; public set; }
    public Nullable`1<bool> IsStringsPreserved { get; public set; }
    public Nullable`1<BuiltInStyles> BuiltInStyle { get; public set; }
    public string AddressGlobal2007 { get; }
    public IApplication Application { get; }
    public object Parent { get; }
    public bool IsSingleCell { get; }
    public int CellsCount { get; }
    public string WorksheetName { get; }
    public string HtmlString { get; public set; }
    public ExternWorksheetImpl ExternSheet { get; }
    internal bool IsNumReference { get; internal set; }
    internal bool IsStringReference { get; internal set; }
    internal bool IsMultiReference { get; internal set; }
    public ExternalRange(ExternWorksheetImpl sheet, int row, int column);
    public ExternalRange(ExternWorksheetImpl sheet, int row, int column, int lastRow, int lastColumn);
    public sealed virtual string get_Address();
    public sealed virtual string get_AddressLocal();
    public sealed virtual string get_AddressGlobal();
    public sealed virtual string get_AddressR1C1();
    public sealed virtual string get_AddressR1C1Local();
    public sealed virtual bool get_Boolean();
    public sealed virtual void set_Boolean(bool value);
    public sealed virtual IBorders get_Borders();
    public sealed virtual IRange[] get_Cells();
    public sealed virtual int get_Column();
    public sealed virtual int get_ColumnGroupLevel();
    public sealed virtual double get_ColumnWidth();
    public sealed virtual void set_ColumnWidth(double value);
    public sealed virtual int get_Count();
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    public sealed virtual string get_DisplayText();
    public sealed virtual IRange get_End();
    public sealed virtual IRange get_EntireColumn();
    public sealed virtual IRange get_EntireRow();
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual string get_Formula();
    public sealed virtual void set_Formula(string value);
    public sealed virtual string get_FormulaArray();
    public sealed virtual void set_FormulaArray(string value);
    public sealed virtual string get_FormulaArrayR1C1();
    public sealed virtual void set_FormulaArrayR1C1(string value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual DateTime get_FormulaDateTime();
    public sealed virtual void set_FormulaDateTime(DateTime value);
    public sealed virtual string get_FormulaR1C1();
    public sealed virtual void set_FormulaR1C1(string value);
    public sealed virtual bool get_FormulaBoolValue();
    public sealed virtual void set_FormulaBoolValue(bool value);
    public sealed virtual string get_FormulaErrorValue();
    public sealed virtual void set_FormulaErrorValue(string value);
    public sealed virtual bool get_HasDataValidation();
    public sealed virtual bool get_HasBoolean();
    public sealed virtual bool get_HasDateTime();
    public sealed virtual bool get_HasFormula();
    public sealed virtual bool get_HasFormulaArray();
    public sealed virtual bool get_HasNumber();
    public sealed virtual bool get_HasRichText();
    public sealed virtual bool get_HasString();
    public sealed virtual bool get_HasStyle();
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual IHyperLinks get_Hyperlinks();
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_IsBlank();
    public sealed virtual bool get_IsBoolean();
    public sealed virtual bool get_IsError();
    public sealed virtual bool get_IsGroupedByColumn();
    public sealed virtual bool get_IsGroupedByRow();
    public sealed virtual bool get_IsInitialized();
    public sealed virtual int get_LastColumn();
    public sealed virtual int get_LastRow();
    public sealed virtual double get_Number();
    public sealed virtual void set_Number(double value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual int get_Row();
    public sealed virtual int get_RowGroupLevel();
    public sealed virtual double get_RowHeight();
    public sealed virtual void set_RowHeight(double value);
    public sealed virtual IRange[] get_Rows();
    public sealed virtual IRange[] get_Columns();
    public sealed virtual IStyle get_CellStyle();
    public sealed virtual void set_CellStyle(IStyle value);
    public sealed virtual string get_CellStyleName();
    public sealed virtual void set_CellStyleName(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual TimeSpan get_TimeSpan();
    public sealed virtual void set_TimeSpan(TimeSpan value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_CalculatedValue();
    public sealed virtual object get_Value2();
    public sealed virtual void set_Value2(object value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual IWorksheet get_Worksheet();
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual void set_Item(int row, int column, IRange value);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual IConditionalFormats get_ConditionalFormats();
    public sealed virtual IDataValidation get_DataValidation();
    public sealed virtual string get_FormulaStringValue();
    public sealed virtual void set_FormulaStringValue(string value);
    public sealed virtual double get_FormulaNumberValue();
    public sealed virtual void set_FormulaNumberValue(double value);
    public sealed virtual bool get_HasFormulaBoolValue();
    public sealed virtual bool get_HasFormulaErrorValue();
    public sealed virtual bool get_HasFormulaDateTime();
    public sealed virtual bool get_HasFormulaNumberValue();
    public sealed virtual bool get_HasFormulaStringValue();
    public sealed virtual ICommentShape get_Comment();
    public sealed virtual IThreadedComment get_ThreadedComment();
    public sealed virtual IRichTextString get_RichText();
    public sealed virtual bool get_IsMerged();
    public sealed virtual IRange get_MergeArea();
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual bool get_HasExternalFormula();
    public sealed virtual ExcelIgnoreError get_IgnoreErrorOptions();
    public sealed virtual void set_IgnoreErrorOptions(ExcelIgnoreError value);
    public sealed virtual Nullable`1<bool> get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(Nullable`1<bool> value);
    public sealed virtual Nullable`1<BuiltInStyles> get_BuiltInStyle();
    public sealed virtual void set_BuiltInStyle(Nullable`1<BuiltInStyles> value);
    public sealed virtual IRange Activate();
    public sealed virtual IRange Activate(bool scroll);
    public sealed virtual IRange Group(ExcelGroupBy groupBy);
    public sealed virtual IRange Group(ExcelGroupBy groupBy, bool bCollapsed);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual void SubTotal(Int32[] groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual double Sum();
    public sealed virtual double Sum(bool considerDateAsNumber);
    public sealed virtual double Average();
    public sealed virtual double Average(bool considerDateAsNumber);
    public sealed virtual double Min();
    public sealed virtual double Min(bool considerDateAsNumber);
    public sealed virtual double Max();
    public sealed virtual double Max(bool considerDateAsNumber);
    public sealed virtual IRange Trim();
    public sealed virtual void Merge();
    public sealed virtual void Merge(bool clearCells);
    public sealed virtual IRange Ungroup(ExcelGroupBy groupBy);
    public sealed virtual void UnMerge();
    public sealed virtual void FreezePanes();
    public sealed virtual void Clear(ExcelClearOptions option);
    public sealed virtual void Clear();
    public sealed virtual void Clear(bool isClearFormat);
    public sealed virtual void Clear(ExcelMoveDirection direction);
    public sealed virtual void Clear(ExcelMoveDirection direction, ExcelCopyRangeOptions options);
    public sealed virtual void MoveTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options, bool skipBlank);
    public sealed virtual IRange IntersectWith(IRange range);
    public sealed virtual IRange CopyTo(IRange destination, bool pasteLink);
    public sealed virtual IRange MergeWith(IRange range);
    public sealed virtual void AutofitRows();
    public sealed virtual void AutofitColumns();
    public sealed virtual ICommentShape AddComment();
    public sealed virtual IThreadedComment AddThreadedComment(string text, DateTime creationTime);
    public sealed virtual IThreadedComment AddThreadedComment(string text, string author, DateTime creationTime);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public sealed virtual void BorderAround();
    public sealed virtual void BorderAround(ExcelLineStyle borderLine);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderInside();
    public sealed virtual void BorderInside(ExcelLineStyle borderLine);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderNone();
    public sealed virtual void CollapseGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy, ExpandCollapseFlags flags);
    public sealed virtual string get_AddressGlobal2007();
    public sealed virtual IRange[] GetDependents();
    public sealed virtual IRange[] GetDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetPrecedents();
    public sealed virtual IRange[] GetPrecedents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectDependents();
    public sealed virtual IRange[] GetDirectDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectPrecedents();
    public sealed virtual IRange[] GetDirectPrecedents(bool isEntireWorkbook);
    public sealed virtual IRange Offset(int row, int column);
    public sealed virtual IRange Resize(int row, int column);
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public sealed virtual Ptg[] GetNativePtg();
    public bool get_IsSingleCell();
    public sealed virtual string GetNewAddress(Dictionary`2<string, string> names, String& strSheetName);
    public sealed virtual IRange Clone(object parent, Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
    public sealed virtual void ClearConditionalFormats();
    public sealed virtual Rectangle[] GetRectangles();
    public sealed virtual int GetRectanglesCount();
    public sealed virtual int get_CellsCount();
    public sealed virtual string get_WorksheetName();
    public sealed virtual IEnumerator`1<IRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual string get_HtmlString();
    public sealed virtual void set_HtmlString(string value);
    public ExternWorksheetImpl get_ExternSheet();
    internal bool get_IsNumReference();
    internal void set_IsNumReference(bool value);
    internal bool get_IsStringReference();
    internal void set_IsStringReference(bool value);
    internal bool get_IsMultiReference();
    internal void set_IsMultiReference(bool value);
}
public class Syncfusion.XlsIO.Implementation.ExternNameImpl : CommonObject {
    private ExternNameRecord m_name;
    private int m_iIndex;
    private ExternWorkbookImpl m_externBook;
    private string m_refersTo;
    public int sheetId;
    internal bool isAdvise;
    internal bool isOle;
    [CompilerGeneratedAttribute]
private NameIndexChangedEventHandler NameIndexChanged;
    public int Index { get; public set; }
    public string Name { get; }
    public int BookIndex { get; }
    internal ExternNameRecord Record { get; }
    internal string RefersTo { get; internal set; }
    [CLSCompliantAttribute("False")]
public ExternNameImpl(IApplication application, object parent, ExternNameRecord name, int index);
    private void SetParents();
    public int get_Index();
    public void set_Index(int value);
    public string get_Name();
    public int get_BookIndex();
    internal ExternNameRecord get_Record();
    internal string get_RefersTo();
    internal void set_RefersTo(string value);
    private void RaiseIndexChangedEvent(NameIndexChangedEventArgs args);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public sealed virtual object Clone(object parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NameIndexChanged(NameIndexChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NameIndexChanged(NameIndexChangedEventHandler value);
}
public class Syncfusion.XlsIO.Implementation.ExternWorkbookImpl : CommonObject {
    private SortedList`2<int, ExternWorksheetImpl> m_arrSheets;
    private Dictionary`2<string, ExternWorksheetImpl> m_hashNameToSheet;
    private ExternNamesCollection m_externNames;
    private SupBookRecord m_supBook;
    private int m_iIndex;
    private bool m_isDdeLink;
    private WorkbookImpl m_book;
    private string m_strShortName;
    private string m_strProgramId;
    private bool m_isParsed;
    public ExternNamesCollection ExternNames { get; }
    public bool IsInternalReference { get; public set; }
    public bool IsOleLink { get; }
    public int SheetNumber { get; public set; }
    public string URL { get; public set; }
    public int Index { get; public set; }
    public WorkbookImpl Workbook { get; }
    internal bool IsDdeLink { get; internal set; }
    public string ShortName { get; }
    public bool IsAddInFunctions { get; public set; }
    internal SortedList`2<int, ExternWorksheetImpl> Worksheets { get; }
    public string ProgramId { get; public set; }
    internal bool IsParsed { get; internal set; }
    public ExternWorkbookImpl(IApplication application, object parent);
    private void InitializeVariables();
    public void InsertDefaultWorksheet();
    private void FindParents();
    [CLSCompliantAttribute("False")]
public int Parse(BiffRecordRaw[] arrData, int iOffset);
    [CLSCompliantAttribute("False")]
public void Parse(BiffReader reader, IDecryptor decryptor);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private void AddExternSheet(ExternWorksheetImpl sheet);
    public ExternNamesCollection get_ExternNames();
    public bool get_IsInternalReference();
    public void set_IsInternalReference(bool value);
    public bool get_IsOleLink();
    public int get_SheetNumber();
    public void set_SheetNumber(int value);
    public string get_URL();
    public void set_URL(string value);
    public int get_Index();
    public void set_Index(int value);
    public WorkbookImpl get_Workbook();
    internal bool get_IsDdeLink();
    internal void set_IsDdeLink(bool value);
    public string get_ShortName();
    public bool get_IsAddInFunctions();
    public void set_IsAddInFunctions(bool value);
    internal SortedList`2<int, ExternWorksheetImpl> get_Worksheets();
    public string get_ProgramId();
    public void set_ProgramId(string value);
    internal bool get_IsParsed();
    internal void set_IsParsed(bool value);
    public int IndexOf(string strSheetName);
    public void saveAsHtml(string FileName);
    public int GetNewIndex(int iNameIndex);
    public sealed virtual object Clone(object parent);
    public string GetSheetName(int index);
    private void InitShortName();
    private static string GetFileName(string strUrl);
    private static string GetFileNameWithoutExtension(string strUrl);
    public void AddWorksheets(List`1<string> sheets);
    public void AddWorksheets(String[] sheets);
    public ExternWorksheetImpl AddWorksheet(string sheetName);
    public void AddNames(String[] names);
    public void AddName(string name);
    internal int FindOrAddSheet(string sheetName);
    protected virtual void OnDispose();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.ExternWorksheetImpl : CommonObject {
    private XCTRecord m_xct;
    private List`1<BiffRecordRaw> m_arrRecords;
    private ExternWorkbookImpl m_book;
    private string m_strName;
    private CellRecordCollection m_dicRecordsCells;
    private int m_iFirstRow;
    private int m_iFirstColumn;
    private int m_iLastRow;
    private int m_iLastColumn;
    private Dictionary`2<string, string> m_dicAdditionalAttributes;
    internal int unknown_formula_name;
    private CalcEngine m_calcEngine;
    [CompilerGeneratedAttribute]
private CellValueChangedEventHandler CellValueChanged;
    [CompilerGeneratedAttribute]
private ExportDataTableEventHandler ExportDataTableEvent;
    private ISlicers m_slicers;
    private IScenarios m_scenarios;
    private IThreadedComments m_threadedComments;
    [CompilerGeneratedAttribute]
private MissingFunctionEventHandler MissingFunction;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ValueChanged;
    public int Index { get; public set; }
    public ExternWorkbookImpl Workbook { get; }
    public int ReferenceIndex { get; }
    public Dictionary`2<string, string> AdditionalAttributes { get; public set; }
    public ISlicers Slicers { get; }
    public IScenarios Scenarios { get; }
    public IThreadedComments ThreadedComments { get; }
    public CalcEngine CalcEngine { get; public set; }
    public IAutoFilters AutoFilters { get; }
    public IRange[] Cells { get; }
    public bool DisplayPageBreaks { get; public set; }
    public ISparklineGroups SparklineGroups { get; }
    public ExcelSheetProtection Protection { get; }
    public bool ProtectContents { get; }
    public SheetView View { get; public set; }
    public bool ProtectDrawingObjects { get; }
    public bool ProtectScenarios { get; }
    public bool HasOleObject { get; public set; }
    public IRange[] MergedCells { get; }
    public INames Names { get; }
    public string CodeName { get; }
    public IPageSetup PageSetup { get; }
    public IRange Range { get; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public double StandardHeight { get; public set; }
    public bool StandardHeightFlag { get; public set; }
    public double StandardWidth { get; public set; }
    public ExcelSheetType Type { get; }
    public IRange UsedRange { get; }
    public int Zoom { get; public set; }
    public int VerticalSplit { get; public set; }
    public int HorizontalSplit { get; public set; }
    public int FirstVisibleRow { get; public set; }
    public IOleObjects OleObjects { get; }
    public int FirstVisibleColumn { get; public set; }
    public int ActivePane { get; public set; }
    public bool IsDisplayZeros { get; public set; }
    public bool IsGridLinesVisible { get; public set; }
    public ExcelKnownColors GridLineColor { get; public set; }
    public bool IsRowColumnHeadersVisible { get; public set; }
    public IVPageBreaks VPageBreaks { get; }
    public IHPageBreaks HPageBreaks { get; }
    public bool IsStringsPreserved { get; public set; }
    public bool IsPasswordProtected { get; }
    public IComments Comments { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IHyperLinks HyperLinks { get; }
    public IRange[] UsedCells { get; }
    public IWorksheetCustomProperties CustomProperties { get; }
    public bool UseRangesCache { get; public set; }
    public bool IsFreezePanes { get; }
    public IRange SplitCell { get; }
    public int TopVisibleRow { get; public set; }
    public int LeftVisibleColumn { get; public set; }
    public bool UsedRangeIncludesFormatting { get; public set; }
    public IPivotTables PivotTables { get; }
    public IListObjects ListObjects { get; }
    public IDataSort DataSorter { get; }
    public IMigrantRange MigrantRange { get; }
    public ExcelKnownColors TabColor { get; public set; }
    public Color TabColorRGB { get; public set; }
    public IChartShapes Charts { get; }
    public IPictures Pictures { get; }
    private IWorkbook Syncfusion.XlsIO.ITabSheet.Workbook { get; }
    public IShapes Shapes { get; }
    public bool IsRightToLeft { get; public set; }
    public bool IsSelected { get; }
    public int TabIndex { get; }
    public string Name { get; public set; }
    public WorksheetVisibility Visibility { get; public set; }
    public ITextBoxes TextBoxes { get; }
    public ICheckBoxes CheckBoxes { get; }
    public IOptionButtons OptionButtons { get; }
    public IComboBoxes ComboBoxes { get; }
    public int DefaultRowHeight { get; }
    public int FirstRow { get; public set; }
    public int FirstColumn { get; public set; }
    public int LastRow { get; public set; }
    public int LastColumn { get; public set; }
    public CellRecordCollection CellRecords { get; }
    public WorkbookImpl ParentWorkbook { get; }
    public ExcelVersion Version { get; }
    public ExternWorksheetImpl(IApplication application, ExternWorkbookImpl parent);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CellValueChanged(CellValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CellValueChanged(CellValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExportDataTableEvent(ExportDataTableEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExportDataTableEvent(ExportDataTableEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MissingFunction(MissingFunctionEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MissingFunction(MissingFunctionEventHandler value);
    [CLSCompliantAttribute("False")]
public int Parse(BiffRecordRaw[] arrData, int iOffset);
    private void ParseCRN(CRNRecord crn);
    [CLSCompliantAttribute("False")]
public void Parse(BiffReader reader, IDecryptor decryptor);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private void SerializeRows(OffsetArrayList records);
    private void SerializeRow(int i, OffsetArrayList records);
    public sealed virtual int get_Index();
    public void set_Index(int value);
    public ExternWorkbookImpl get_Workbook();
    public int get_ReferenceIndex();
    public Dictionary`2<string, string> get_AdditionalAttributes();
    public void set_AdditionalAttributes(Dictionary`2<string, string> value);
    public sealed virtual ISlicers get_Slicers();
    public sealed virtual IScenarios get_Scenarios();
    public sealed virtual IThreadedComments get_ThreadedComments();
    public ExternWorksheetImpl Clone(object parent);
    protected virtual void OnDispose();
    internal void CacheValues(IRange sourceRange);
    internal void SetCellRecords(CellRecordCollection cellRecords);
    public sealed virtual CalcEngine get_CalcEngine();
    public sealed virtual void set_CalcEngine(CalcEngine value);
    public sealed virtual void EnableSheetCalculations();
    public sealed virtual void DisableSheetCalculations();
    private void CalcEngine_UnknownFunction(object sender, UnknownFunctionEventArgs args);
    public sealed virtual object GetValueRowCol(int row, int col);
    public sealed virtual void SetValueRowCol(object value, int row, int col);
    private TRangeValueType GetCellType(int row, int column, bool bNeedFormulaSubType);
    public sealed virtual void WireParentObject();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(ValueChangedEventHandler value);
    public void OnValueChanged(int row, int col, string value);
    public sealed virtual IAutoFilters get_AutoFilters();
    public sealed virtual void ImportXml(Stream stream, int row, int column);
    public sealed virtual void SaveAsHtml(Stream stream);
    private void SaveAsHtml(Stream stream, HtmlSaveOptions saveOptions);
    public sealed virtual IRange[] get_Cells();
    public sealed virtual bool get_DisplayPageBreaks();
    public sealed virtual void set_DisplayPageBreaks(bool value);
    public sealed virtual ISparklineGroups get_SparklineGroups();
    public sealed virtual ExcelSheetProtection get_Protection();
    public sealed virtual bool get_ProtectContents();
    public sealed virtual SheetView get_View();
    public sealed virtual void set_View(SheetView value);
    public sealed virtual bool get_ProtectDrawingObjects();
    public sealed virtual bool get_ProtectScenarios();
    public void set_HasOleObject(bool value);
    public sealed virtual bool get_HasOleObject();
    public sealed virtual IRange[] get_MergedCells();
    public sealed virtual INames get_Names();
    public sealed virtual string get_CodeName();
    public sealed virtual IPageSetup get_PageSetup();
    public sealed virtual IRange get_Range();
    public sealed virtual IRange[] get_Rows();
    public sealed virtual IRange[] get_Columns();
    public sealed virtual double get_StandardHeight();
    public sealed virtual void set_StandardHeight(double value);
    public sealed virtual bool get_StandardHeightFlag();
    public sealed virtual void set_StandardHeightFlag(bool value);
    public sealed virtual double get_StandardWidth();
    public sealed virtual void set_StandardWidth(double value);
    public sealed virtual ExcelSheetType get_Type();
    public sealed virtual IRange get_UsedRange();
    public sealed virtual int get_Zoom();
    public sealed virtual void set_Zoom(int value);
    public sealed virtual int get_VerticalSplit();
    public sealed virtual void set_VerticalSplit(int value);
    public sealed virtual int get_HorizontalSplit();
    public sealed virtual void set_HorizontalSplit(int value);
    public sealed virtual int get_FirstVisibleRow();
    public sealed virtual void set_FirstVisibleRow(int value);
    public sealed virtual IOleObjects get_OleObjects();
    public sealed virtual int get_FirstVisibleColumn();
    public sealed virtual void set_FirstVisibleColumn(int value);
    public sealed virtual int get_ActivePane();
    public sealed virtual void set_ActivePane(int value);
    public sealed virtual bool get_IsDisplayZeros();
    public sealed virtual void set_IsDisplayZeros(bool value);
    public sealed virtual bool get_IsGridLinesVisible();
    public sealed virtual void set_IsGridLinesVisible(bool value);
    public sealed virtual ExcelKnownColors get_GridLineColor();
    public sealed virtual void set_GridLineColor(ExcelKnownColors value);
    public sealed virtual bool get_IsRowColumnHeadersVisible();
    public sealed virtual void set_IsRowColumnHeadersVisible(bool value);
    public sealed virtual IVPageBreaks get_VPageBreaks();
    public sealed virtual IHPageBreaks get_HPageBreaks();
    public sealed virtual bool get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(bool value);
    public sealed virtual bool get_IsPasswordProtected();
    public sealed virtual IComments get_Comments();
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual IHyperLinks get_HyperLinks();
    public sealed virtual IRange[] get_UsedCells();
    public sealed virtual IWorksheetCustomProperties get_CustomProperties();
    public sealed virtual bool get_UseRangesCache();
    public sealed virtual void set_UseRangesCache(bool value);
    public sealed virtual bool get_IsFreezePanes();
    public sealed virtual IRange get_SplitCell();
    public sealed virtual int get_TopVisibleRow();
    public sealed virtual void set_TopVisibleRow(int value);
    public sealed virtual int get_LeftVisibleColumn();
    public sealed virtual void set_LeftVisibleColumn(int value);
    public sealed virtual bool get_UsedRangeIncludesFormatting();
    public sealed virtual void set_UsedRangeIncludesFormatting(bool value);
    public sealed virtual IPivotTables get_PivotTables();
    public sealed virtual IListObjects get_ListObjects();
    public sealed virtual IDataSort get_DataSorter();
    public void CopyToClipboard();
    public sealed virtual void Clear();
    public sealed virtual void ClearData();
    public sealed virtual bool Contains(int iRow, int iColumn);
    public sealed virtual IRanges CreateRangesCollection();
    public sealed virtual void CreateNamedRanges(string namedRange, string referRange, bool vertical);
    public sealed virtual ITemplateMarkersProcessor CreateTemplateMarkersProcessor();
    public sealed virtual bool IsColumnVisible(int columnIndex);
    public sealed virtual void ShowColumn(int columnIndex, bool isVisible);
    public sealed virtual void HideColumn(int columnIndex);
    public sealed virtual void HideRow(int rowIndex);
    public sealed virtual bool IsRowVisible(int rowIndex);
    public sealed virtual void ShowRow(int rowIndex, bool isVisible);
    public sealed virtual void ShowRange(IRange range, bool isVisible);
    public sealed virtual void ShowRange(RangesCollection ranges, bool isVisible);
    public sealed virtual void ShowRange(IRange[] ranges, bool isVisible);
    public sealed virtual void InsertRow(int index);
    public sealed virtual void InsertRow(int iRowIndex, int iRowCount);
    public sealed virtual void InsertRow(int iRowIndex, int iRowCount, ExcelInsertOptions insertOptions);
    public sealed virtual void InsertColumn(int index);
    public sealed virtual void InsertColumn(int iColumnIndex, int iColumnCount);
    public sealed virtual void InsertColumn(int iColumnIndex, int iColumnCount, ExcelInsertOptions insertOptions);
    public sealed virtual void DeleteRow(int index);
    public sealed virtual void DeleteRow(int index, int count);
    public sealed virtual void DeleteColumn(int index);
    public sealed virtual void DeleteColumn(int index, int count);
    public sealed virtual int ImportArray(Object[] arrObject, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(String[] arrString, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Int32[] arrInt, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Double[] arrDouble, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(DateTime[] arrDateTime, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Object[0...,0...] arrObject, int firstRow, int firstColumn);
    public sealed virtual int ImportData(IEnumerable arrObject, int firstRow, int firstColumn, bool includeHeader);
    public sealed virtual int ImportData(IEnumerable arrObject, ExcelImportDataOptions importDataOptions);
    public sealed virtual int ImportDataColumn(DataColumn dataColumn, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataColumn(DataColumn dataColumn, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataTable(DataTable dataTable, int firstRow, int firstColumn, bool importOnSave);
    public sealed virtual int ImportDataTable(DataTable dataTable, int firstRow, int firstColumn, bool importOnSave, bool includeHeader);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, bool preserveTypes);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset, int iMaxRow, int iMaxCol);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset, int iMaxRow, int iMaxCol, bool bPreserveTypes);
    public sealed virtual int ImportDataReader(IDataReader dataReader, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataReader(IDataReader dataReader, int firstRow, int firstColumn, bool importOnSave);
    public sealed virtual int ImportDataReader(IDataReader dataReader, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataReader(IDataReader dataReader, IName namedRange, bool isFieldNameShown);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, bool bPreserveTypes);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, bool bPreserveTypes);
    public sealed virtual void RemovePanes();
    public sealed virtual DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options);
    public sealed virtual DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options, ExcelExportDataOptions exportDataOptions);
    public sealed virtual DataTable ExportDataTable(IRange dataRange, ExcelExportDataTableOptions options);
    public sealed virtual DataTable ExportDataTable(IRange dataRange, ExcelExportDataTableOptions options, ExcelExportDataOptions exportDataOptions);
    public DataTable PEExportDataTable(IRange dataRange, ExcelExportDataTableOptions options, PivotTableImpl pivotTable);
    public sealed virtual List`1<T> ExportData(int firstRow, int firstColumn, int lastRow, int lastColumn);
    public sealed virtual List`1<T> ExportData(int firstRow, int firstColumn, int lastRow, int lastColumn, Dictionary`2<string, string> mappingProperties);
    public sealed virtual void Protect(string password);
    public sealed virtual void Protect(string password, ExcelSheetProtection options);
    public sealed virtual void Unprotect(string password);
    public sealed virtual IRange IntersectRanges(IRange range1, IRange range2);
    public sealed virtual IRange MergeRanges(IRange range1, IRange range2);
    public sealed virtual void AutofitRow(int rowIndex);
    public sealed virtual void AutofitColumn(int colIndex);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public sealed virtual void Remove();
    public sealed virtual void Move(int iNewIndex);
    public sealed virtual int ColumnWidthToPixels(double widthInChars);
    public sealed virtual double PixelsToColumnWidth(int pixels);
    public sealed virtual void SetColumnWidth(int iColumnIndex, double value);
    public sealed virtual void SetColumnWidthInPixels(int iColumnIndex, int value);
    public sealed virtual void SetColumnWidthInPixels(int iStartColumnIndex, int iCount, int value);
    public sealed virtual void SetRowHeight(int iRow, double value);
    public sealed virtual void SetRowHeightInPixels(int iRowIndex, double value);
    public sealed virtual void SetRowHeightInPixels(int iStartRowIndex, int iCount, double value);
    public sealed virtual double GetColumnWidth(int iColumnIndex);
    public sealed virtual int GetColumnWidthInPixels(int iColumnIndex);
    public sealed virtual double GetRowHeight(int iRow);
    public sealed virtual int GetRowHeightInPixels(int iRowIndex);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public sealed virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public void SaveAs(string fileName, string separator);
    public void SaveAs(string fileName, string separator, Encoding encoding);
    public sealed virtual void SaveAs(Stream stream, string separator);
    public sealed virtual void SaveAs(Stream stream, string separator, Encoding encoding);
    public sealed virtual void SetDefaultColumnStyle(int iColumnIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultColumnStyle(int iStartColumnIndex, int iEndColumnIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultRowStyle(int iRowIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultRowStyle(int iStartRowIndex, int iEndRowIndex, IStyle defaultStyle);
    public sealed virtual IStyle GetDefaultColumnStyle(int iColumnIndex);
    public sealed virtual IStyle GetDefaultRowStyle(int iRowIndex);
    public sealed virtual void FreeRange(IRange range);
    public sealed virtual void FreeRange(int iRow, int iColumn);
    public sealed virtual void SetValue(int iRow, int iColumn, string value);
    public sealed virtual void SetNumber(int iRow, int iColumn, double value);
    public sealed virtual void SetBoolean(int iRow, int iColumn, bool value);
    public sealed virtual void SetText(int iRow, int iColumn, string value);
    public sealed virtual void SetFormula(int iRow, int iColumn, string value);
    public sealed virtual void SetError(int iRow, int iColumn, string value);
    public sealed virtual void SetBlank(int iRow, int iColumn);
    public sealed virtual void SetFormulaNumberValue(int iRow, int iColumn, double value);
    public sealed virtual void SetFormulaErrorValue(int iRow, int iColumn, string value);
    public sealed virtual void SetFormulaBoolValue(int iRow, int iColumn, bool value);
    public sealed virtual void SetFormulaStringValue(int iRow, int iColumn, string value);
    public sealed virtual IMigrantRange get_MigrantRange();
    public sealed virtual string GetText(int row, int column);
    public sealed virtual double GetNumber(int row, int column);
    public sealed virtual string GetFormula(int row, int column, bool bR1C1);
    public sealed virtual string GetError(int row, int column);
    public sealed virtual bool GetBoolean(int row, int column);
    public sealed virtual bool GetFormulaBoolValue(int row, int column);
    public sealed virtual string GetFormulaErrorValue(int row, int column);
    public sealed virtual double GetFormulaNumberValue(int row, int column);
    public sealed virtual string GetFormulaStringValue(int row, int column);
    public sealed virtual void AdvancedFilter(ExcelFilterAction filterInPlace, IRange filterRange, IRange criteriaRange, IRange copyToRange, bool isUnique);
    public sealed virtual void Calculate();
    public sealed virtual ExcelKnownColors get_TabColor();
    public sealed virtual void set_TabColor(ExcelKnownColors value);
    public sealed virtual Color get_TabColorRGB();
    public sealed virtual void set_TabColorRGB(Color value);
    public sealed virtual IChartShapes get_Charts();
    public sealed virtual IPictures get_Pictures();
    private sealed virtual override IWorkbook Syncfusion.XlsIO.ITabSheet.get_Workbook();
    public sealed virtual IShapes get_Shapes();
    public sealed virtual bool get_IsRightToLeft();
    public sealed virtual void set_IsRightToLeft(bool value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual int get_TabIndex();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual WorksheetVisibility get_Visibility();
    public sealed virtual void set_Visibility(WorksheetVisibility value);
    public sealed virtual ITextBoxes get_TextBoxes();
    public sealed virtual ICheckBoxes get_CheckBoxes();
    public sealed virtual IOptionButtons get_OptionButtons();
    public sealed virtual IComboBoxes get_ComboBoxes();
    public sealed virtual void Activate();
    public sealed virtual void Select();
    public sealed virtual void Unselect();
    public sealed virtual int get_DefaultRowHeight();
    public sealed virtual int get_FirstRow();
    public sealed virtual void set_FirstRow(int value);
    public sealed virtual int get_FirstColumn();
    public sealed virtual void set_FirstColumn(int value);
    public sealed virtual int get_LastRow();
    public sealed virtual void set_LastRow(int value);
    public sealed virtual int get_LastColumn();
    public sealed virtual void set_LastColumn(int value);
    [DebuggerStepThroughAttribute]
public sealed virtual CellRecordCollection get_CellRecords();
    public sealed virtual WorkbookImpl get_ParentWorkbook();
    public sealed virtual bool IsArrayFormula(long index);
    public sealed virtual ExcelVersion get_Version();
    public sealed virtual IInternalWorksheet GetClonedObject(Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
    private sealed virtual override object Syncfusion.XlsIO.Interfaces.ICloneParent.Clone(object parent);
    public sealed virtual void ConvertToImage(int firstRow, int firstColumn, int lastRow, int lastColum, Stream outputStream);
    public sealed virtual void ConvertToImage(IRange range, Stream outputStream);
    public sealed virtual void ConvertToImage(IRange range, ExportImageOptions imageOptions, Stream outputStream);
    public sealed virtual void ConvertToImage(int firstRow, int firstColumn, int lastRow, int lastColumn, ExportImageOptions imageOptions, Stream outputStream);
    private sealed virtual override void Syncfusion.XlsIO.IWorksheet.SaveAsHtml(Stream stream, HtmlSaveOptions saveOptions);
    public sealed virtual void ImportHtmlTable(string fileName, int row, int column);
    public sealed virtual void ImportHtmlTable(Stream fileStream, int row, int column);
    public sealed virtual void ImportHtmlTable(string fileName, int row, int column, HtmlImportOptions htmlImportOptions);
    public sealed virtual void ImportHtmlTable(Stream fileStream, int row, int column, HtmlImportOptions htmlImportOptions);
}
public class Syncfusion.XlsIO.Implementation.FillImpl : object {
    private ColorObject m_color;
    private ColorObject m_patternColor;
    private ExcelPattern m_pattern;
    private ExcelGradientStyle m_gradientStyle;
    private ExcelGradientVariants m_gradientVariant;
    private ExcelFillType m_fillType;
    private bool m_IsDxfPatternNone;
    public ColorObject ColorObject { get; }
    public ColorObject PatternColorObject { get; }
    public ExcelPattern Pattern { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public ExcelFillType FillType { get; public set; }
    internal bool IsDxfPatternNone { get; internal set; }
    public FillImpl(ExtendedFormatImpl format);
    public FillImpl(ExcelPattern pattern, Color color, Color patternColor);
    public FillImpl(ExcelPattern pattern, ColorObject color, ColorObject patternColor);
    public ColorObject get_ColorObject();
    public ColorObject get_PatternColorObject();
    public ExcelPattern get_Pattern();
    public void set_Pattern(ExcelPattern value);
    public ExcelGradientStyle get_GradientStyle();
    public void set_GradientStyle(ExcelGradientStyle value);
    public ExcelGradientVariants get_GradientVariant();
    public void set_GradientVariant(ExcelGradientVariants value);
    public ExcelFillType get_FillType();
    public void set_FillType(ExcelFillType value);
    internal bool get_IsDxfPatternNone();
    internal void set_IsDxfPatternNone(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public FillImpl Clone();
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.FontArrayWrapper : CommonObject {
    private List`1<IRange> m_arrCells;
    public bool Italic { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color RGBColor { get; public set; }
    public bool Bold { get; public set; }
    public bool MacOSOutlineFont { get; public set; }
    public bool MacOSShadow { get; public set; }
    public double Size { get; public set; }
    public bool Strikethrough { get; public set; }
    public bool Subscript { get; public set; }
    public bool Superscript { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public string FontName { get; public set; }
    public ExcelFontVertialAlignment VerticalAlignment { get; public set; }
    public bool IsAutoColor { get; }
    public FontArrayWrapper(IRange range);
    public FontArrayWrapper(List`1<IRange> lstRange, IApplication application);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_RGBColor();
    public sealed virtual void set_RGBColor(Color value);
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual bool get_MacOSOutlineFont();
    public sealed virtual void set_MacOSOutlineFont(bool value);
    public sealed virtual bool get_MacOSShadow();
    public sealed virtual void set_MacOSShadow(bool value);
    public sealed virtual double get_Size();
    public sealed virtual void set_Size(double value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual bool get_Subscript();
    public sealed virtual void set_Subscript(bool value);
    public sealed virtual bool get_Superscript();
    public sealed virtual void set_Superscript(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual ExcelFontVertialAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelFontVertialAlignment value);
    public sealed virtual Font GenerateNativeFont();
    public sealed virtual bool get_IsAutoColor();
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    private bool CanApplyStyle(IRange range);
}
public class Syncfusion.XlsIO.Implementation.FontImpl : CommonObject {
    internal static ushort FONTBOLD;
    internal static ushort FONTNORMAL;
    internal double MIN_FONT_SIZE;
    internal double MAX_FONT_SIZE;
    private static int DEF_INCORRECT_INDEX;
    internal static int DEF_BAD_INDEX;
    private static float DEF_SMALL_BOLD_FONT_MULTIPLIER;
    private static float DEF_BOLD_FONT_MULTIPLIER;
    private static int DEF_INDEX;
    private FontRecord m_font;
    private WorkbookImpl m_book;
    private int m_index;
    private byte m_btCharSet;
    private Font m_fontNative;
    private ColorObject m_color;
    private string m_strLanguage;
    private string m_scheme;
    private int m_family;
    private bool m_hasLatin;
    private bool m_hasComplexScripts;
    private bool m_hasEastAsianFont;
    private string m_actualFont;
    private String[] m_arrItalicFonts;
    internal TextSettings m_textSettings;
    private Excel2007CommentHAlign m_paraAlign;
    private bool m_bHasParaAlign;
    internal bool showFontName;
    private bool m_canDispose;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler IndexChanged;
    public bool Bold { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color RGBColor { get; public set; }
    internal string Scheme { get; internal set; }
    public bool Italic { get; public set; }
    public bool MacOSOutlineFont { get; public set; }
    public bool MacOSShadow { get; public set; }
    public double Size { get; public set; }
    public bool Strikethrough { get; public set; }
    public bool Subscript { get; public set; }
    public bool Superscript { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public string FontName { get; public set; }
    public ExcelFontVertialAlignment VerticalAlignment { get; public set; }
    public bool IsAutoColor { get; }
    internal int BaseLine { get; internal set; }
    [CLSCompliantAttribute("False")]
public FontRecord Record { get; }
    internal WorkbookImpl ParentWorkbook { get; }
    internal int Index { get; internal set; }
    public byte CharSet { get; public set; }
    internal byte Family { get; internal set; }
    public ColorObject ColorObject { get; }
    public string Language { get; public set; }
    internal bool HasLatin { get; internal set; }
    internal bool HasComplexScripts { get; internal set; }
    internal bool HasEastAsianFont { get; internal set; }
    internal Excel2007CommentHAlign ParaAlign { get; internal set; }
    internal bool HasParagrapAlign { get; internal set; }
    internal bool CanDispose { get; internal set; }
    private int Syncfusion.XlsIO.Interfaces.IInternalFont.Index { get; }
    public FontImpl Font { get; }
    internal string ActualFontName { get; internal set; }
    public FontImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public FontImpl(IApplication application, object parent, BiffReader reader);
    [CLSCompliantAttribute("False")]
public FontImpl(IApplication application, object parent, FontRecord record);
    [CLSCompliantAttribute("False")]
public FontImpl(IApplication application, object parent, FontImpl font);
    public FontImpl(IFont baseFont);
    public FontImpl(IApplication application, object parent, Font nativeFont);
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_RGBColor();
    public sealed virtual void set_RGBColor(Color value);
    internal string get_Scheme();
    internal void set_Scheme(string value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual bool get_MacOSOutlineFont();
    public sealed virtual void set_MacOSOutlineFont(bool value);
    public sealed virtual bool get_MacOSShadow();
    public sealed virtual void set_MacOSShadow(bool value);
    public sealed virtual double get_Size();
    public sealed virtual void set_Size(double value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    public sealed virtual bool get_Subscript();
    public sealed virtual void set_Subscript(bool value);
    public sealed virtual bool get_Superscript();
    public sealed virtual void set_Superscript(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual ExcelFontVertialAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelFontVertialAlignment value);
    public sealed virtual bool get_IsAutoColor();
    internal int get_BaseLine();
    internal void set_BaseLine(int value);
    public FontRecord get_Record();
    internal WorkbookImpl get_ParentWorkbook();
    internal int get_Index();
    internal void set_Index(int value);
    public byte get_CharSet();
    public void set_CharSet(byte value);
    internal byte get_Family();
    internal void set_Family(byte value);
    public ColorObject get_ColorObject();
    public string get_Language();
    public void set_Language(string value);
    internal bool get_HasLatin();
    internal void set_HasLatin(bool value);
    internal bool get_HasComplexScripts();
    internal void set_HasComplexScripts(bool value);
    internal bool get_HasEastAsianFont();
    internal void set_HasEastAsianFont(bool value);
    internal Excel2007CommentHAlign get_ParaAlign();
    internal void set_ParaAlign(Excel2007CommentHAlign value);
    internal bool get_HasParagrapAlign();
    internal void set_HasParagrapAlign(bool value);
    internal bool get_CanDispose();
    internal void set_CanDispose(bool value);
    private void InitializeColor();
    internal void UpdateRecord();
    private void UpdateColor();
    private void UpdateColor(ColorObject obj);
    private void InitializeParent();
    private void Parse(BiffReader reader);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void CopyTo(FontImpl twin);
    public void SetChanged();
    public sealed virtual Font GenerateNativeFont();
    public Font GenerateNativeFont(float size);
    public void Parse(Font nativeFont);
    public SizeF MeasureString(string strValue);
    public SizeF MeasureStringSpecial(string strValue);
    public SizeF MeasureCharacter(char value);
    private void RaiseIndexChangedEvent(ValueChangedEventArgs args);
    public FontImpl TypedClone();
    public sealed virtual object Clone();
    public FontImpl Clone(object parent);
    public static int SizeInTwips(double fontSize);
    public static double SizeInPoints(int twipsSize);
    public static int UpdateFontIndexes(int iOldIndex, Dictionary`2<int, int> dicNewIndexes, ExcelParseOptions options);
    public FontStyle GetSupportedFontStyle(string fontName);
    [CompilerGeneratedAttribute]
internal void add_IndexChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_IndexChanged(ValueChangedEventHandler value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object obj);
    private sealed virtual override int Syncfusion.XlsIO.Interfaces.IInternalFont.get_Index();
    public sealed virtual FontImpl get_Font();
    internal string get_ActualFontName();
    internal void set_ActualFontName(string value);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    private sealed virtual override object Syncfusion.XlsIO.Interfaces.ICloneParent.Clone(object parent);
    private sealed virtual override void System.IDisposable.Dispose();
    internal void Clear();
}
internal class Syncfusion.XlsIO.Implementation.FontMetrics : object {
    private float m_ascent;
    private float m_descent;
    private float m_height;
    private int m_lineGap;
    private float m_subScriptSizeFactor;
    private float m_superscriptSizeFactor;
    internal static float CharSizeMultiplier;
    internal FontMetrics(float ascent, float descent, int linegap, float height, float superscriptfactor, float subscriptfactor);
    internal float GetAscent(Font format);
    internal float GetDescent(Font format);
    internal float GetLineGap(Font format);
    internal float GetHeight(Font format);
    internal float GetSize(Font format);
    internal object Clone();
}
public class Syncfusion.XlsIO.Implementation.FontWrapper : CommonWrapper {
    private FontImpl m_font;
    private int m_charSet;
    private bool m_bReadOnly;
    private bool m_bRaiseEvents;
    private bool m_bDirectAccess;
    private ColorObject m_fontColor;
    private bool m_bIsAutoColor;
    private IRange m_range;
    [CompilerGeneratedAttribute]
private EventHandler AfterChangeEvent;
    public bool Bold { get; public set; }
    public ExcelKnownColors Color { get; public set; }
    public Color RGBColor { get; public set; }
    public bool Italic { get; public set; }
    public bool MacOSOutlineFont { get; public set; }
    public bool MacOSShadow { get; public set; }
    public double Size { get; public set; }
    public bool Strikethrough { get; public set; }
    public int Baseline { get; public set; }
    public bool Subscript { get; public set; }
    public bool Superscript { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public string FontName { get; public set; }
    internal int CharSet { get; internal set; }
    public ExcelFontVertialAlignment VerticalAlignment { get; public set; }
    public bool IsAutoColor { get; public set; }
    public IApplication Application { get; }
    public object Parent { get; }
    public int FontIndex { get; }
    public FontImpl Wrapped { get; public set; }
    public bool IsReadOnly { get; public set; }
    public WorkbookImpl Workbook { get; }
    public bool IsDirectAccess { get; public set; }
    public ColorObject ColorObject { get; }
    internal IRange Range { get; internal set; }
    public int Index { get; }
    public FontImpl Font { get; }
    public FontWrapper(FontImpl font);
    public FontWrapper(FontImpl font, bool bReadOnly, bool bRaiseEvents);
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual Color get_RGBColor();
    public sealed virtual void set_RGBColor(Color value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual bool get_MacOSOutlineFont();
    public sealed virtual void set_MacOSOutlineFont(bool value);
    public sealed virtual bool get_MacOSShadow();
    public sealed virtual void set_MacOSShadow(bool value);
    public sealed virtual double get_Size();
    public sealed virtual void set_Size(double value);
    public sealed virtual bool get_Strikethrough();
    public sealed virtual void set_Strikethrough(bool value);
    public int get_Baseline();
    public void set_Baseline(int value);
    public sealed virtual bool get_Subscript();
    public sealed virtual void set_Subscript(bool value);
    public sealed virtual bool get_Superscript();
    public sealed virtual void set_Superscript(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    internal int get_CharSet();
    internal void set_CharSet(int value);
    public sealed virtual ExcelFontVertialAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelFontVertialAlignment value);
    public sealed virtual Font GenerateNativeFont();
    public sealed virtual bool get_IsAutoColor();
    public void set_IsAutoColor(bool value);
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public void ColorObjectUpdate();
    public FontWrapper Clone(WorkbookImpl book, object parent, IDictionary dicFontIndexes);
    [CompilerGeneratedAttribute]
public void add_AfterChangeEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterChangeEvent(EventHandler value);
    public int get_FontIndex();
    public FontImpl get_Wrapped();
    public void set_Wrapped(FontImpl value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public WorkbookImpl get_Workbook();
    public bool get_IsDirectAccess();
    public void set_IsDirectAccess(bool value);
    public ColorObject get_ColorObject();
    internal IRange get_Range();
    internal void set_Range(IRange value);
    public sealed virtual int get_Index();
    public sealed virtual FontImpl get_Font();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    internal void InvokeAfterChange();
    internal void Dispose();
    public virtual bool Equals(object obj);
}
public class Syncfusion.XlsIO.Implementation.FormatImpl : CommonObject {
    private FormatRecord m_format;
    private FormatSectionCollection m_parsedFormat;
    private FormatParserImpl m_parser;
    private CFApplier formatApplier;
    private Dictionary`2<string, string> m_alternateFormats;
    private bool m_isUsed;
    internal Dictionary`2<string, string> AlternateFomrats { get; }
    public int Index { get; }
    public string FormatString { get; }
    [CLSCompliantAttribute("False")]
public FormatRecord Record { get; }
    public ExcelFormatType FormatType { get; }
    public bool IsFraction { get; }
    public bool IsScientific { get; }
    public bool IsThousandSeparator { get; }
    public int DecimalPlaces { get; }
    internal int NumeratorLen { get; }
    internal int FractionBase { get; }
    internal int DenumaratorLen { get; }
    internal int NoOfSignificantDigits { get; }
    internal int MinExponentDigits { get; }
    internal bool isUsed { get; internal set; }
    protected FormatImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public FormatImpl(IApplication application, object parent, FormatRecord format);
    public FormatImpl(IApplication application, object parent, int index, string strFormat);
    internal Dictionary`2<string, string> get_AlternateFomrats();
    private void SetParents();
    public sealed virtual int get_Index();
    public sealed virtual string get_FormatString();
    public FormatRecord get_Record();
    public sealed virtual ExcelFormatType get_FormatType();
    public sealed virtual bool get_IsFraction();
    public sealed virtual bool get_IsScientific();
    public sealed virtual bool get_IsThousandSeparator();
    public sealed virtual int get_DecimalPlaces();
    internal int get_NumeratorLen();
    internal int get_FractionBase();
    internal int get_DenumaratorLen();
    internal int get_NoOfSignificantDigits();
    internal int get_MinExponentDigits();
    internal bool get_isUsed();
    internal void set_isUsed(bool value);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private void PrepareFormat();
    private Dictionary`2<string, string> GetAlternateFormats();
    public ExcelFormatType GetFormatType(double value);
    public ExcelFormatType GetFormatType(string value);
    public string ApplyFormat(double value);
    public string ApplyFormat(double value, bool bShowHiddenSymbols);
    internal string ApplyFormat(double value, bool bShowHiddenSymbols, RangeImpl cell);
    internal string ApplyCFFormat(double value, RangeImpl cell, FormatImpl formatImpl, ExtendedFormatImpl& result);
    public string ApplyFormat(string value);
    public string ApplyFormat(string value, bool bShowHiddenSymbols);
    internal bool IsTimeFormat(double value);
    internal bool IsDateFormat(double value);
    public sealed virtual object Clone(object parent);
    internal void Clear();
}
internal class Syncfusion.XlsIO.Implementation.FormulaEvaluator : object {
    public object TryGetValue(Ptg[] formula, IWorksheet sheet);
    internal object TryGetValue(Ptg[] formula, IWorksheet sheet, string formulaString);
    private object GetSingleTokenResult(Ptg token, IWorksheet sheet);
    internal bool CheckFomula(Ptg[] tokens);
}
public class Syncfusion.XlsIO.Implementation.FormulaParser : object {
    private static string DEF_IF_FUNCTION;
    private static int DEF_SPACE_OPTIONS;
    private static int DEF_SPACE_DATA;
    private static int DDELinkNameOptions;
    private static char AbsoluteCellReference;
    private static string Pattern;
    private static string Replacement;
    private static RegexOptions DEF_REGEX;
    private FormulaTokenizer m_tokenizer;
    private List`1<Ptg> m_arrTokens;
    private Stack`1<AttrPtg> m_tokenSpaces;
    private Stack`1<AttrPtg> m_operandTokenSpaces;
    private WorkbookImpl m_book;
    private int m_LambdaLastArgumentCount;
    private List`1<ExcelFunction> m_ExcelFunctionsCount;
    internal int LambdaLastArgumentCount { get; internal set; }
    public List`1<Ptg> Tokens { get; }
    public NumberFormatInfo NumberFormat { get; public set; }
    public FormulaParser(WorkbookImpl book);
    internal int get_LambdaLastArgumentCount();
    internal void set_LambdaLastArgumentCount(int value);
    public void SetSeparators(char operandsSeparator, char arrayRowsSeparator);
    public void Parse(string formula, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private Ptg ParseExpression(Priority priority, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private Ptg CreateBinaryOperation(FormulaToken tokenType, AttrPtg& tokenSpace);
    private AttrPtg ParseSpaces(Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private AttrPtg CreateSpaceToken(int spaceCount);
    private Ptg ParseFirstOperand(Priority priority, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions& options, ParseParameters arguments);
    private void UpdateOptions(ExcelParseFormulaOptions& options);
    private Ptg ParseDDELink(Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private Ptg CreateDDELink(string strDDELink, string strParamName, string strName, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private Ptg ParseIdentifier(string identifier, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private Ptg ParseTName(string strToken, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private bool TryGetNamedRange(string strToken, ParseParameters arguments, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, int iRefIndex, Ptg& result);
    private int ConvertLocationIntoReference(string location, ParseParameters arguments);
    private Ptg ParseFunction(Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private bool IsFunctionSupported(ExcelFunction functionId, ExcelVersion excelVersion);
    private bool TryCreateFunction2007(Ptg& result, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private bool TryCreateRange(string strFormula, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments, Ptg& resultToken, int iRefIndex);
    private bool GetRowColumn(string name, bool bR1C1, String& row, String& col);
    private bool HasChar(string str);
    private bool HasDigit(string str);
    private Ptg CreateNamedRange(string strToken, ParseParameters arguments, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, int iRefIndex);
    private Ptg CreateExternalName(int iRefIndex, string strToken, ParseParameters arguments, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options);
    private Ptg CreateLocalName(int iRefIndex, string strToken, ParseParameters arguments, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options);
    internal static bool IsTableRange(String& strToken, WorkbookImpl book, int row, int column);
    private Ptg CreateNameToken(int iRefIndex, int iNameIndex, ParseParameters arguments, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options);
    private Ptg CreateLocalName(string strNameLocation, string strToken, ParseParameters arguments, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options);
    private bool IsExternLocation(IWorkbook book, string strLocation);
    private Ptg CreateFunction(ExcelFunction functionId, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments);
    private Ptg CreateIFFunction(Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments, AttrPtg spaceBeforeIf);
    private Ptg CreateCustomFunction(Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, ParseParameters arguments, bool registerFunction);
    private int GetTokensSize(int iStartToken, int iEndToken, ParseParameters arguments);
    private List`1<int> ExtractOperands(ExcelParseFormulaOptions options, ParseParameters arguments, ExcelFunction functionId);
    private Ptg ParseArray(FormulaToken tokenId, ParseParameters arguments);
    private Ptg ParseError(Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options, IWorksheet sheet);
    public List`1<Ptg> get_Tokens();
    public NumberFormatInfo get_NumberFormat();
    public void set_NumberFormat(NumberFormatInfo value);
}
public class Syncfusion.XlsIO.Implementation.FormulaTokenizer : object {
    private static char FormulaEnd;
    private static char Whitespace;
    private static char Colon;
    private char m_chCurrent;
    private int m_iFormulaLength;
    private int m_iPos;
    private string m_strFormula;
    private int m_iStartPos;
    public FormulaToken TokenType;
    public FormulaToken PreviousTokenType;
    private int m_iPrevPos;
    private StringBuilder m_value;
    private WorkbookImpl m_book;
    private char m_chArgumentSeparator;
    private NumberFormatInfo m_numberFormat;
    private int m_lastIndexQuote;
    private bool m_hasSubtract;
    internal bool m_hasLambdaLastArgument;
    internal bool m_hasByrow;
    internal bool HasSubtract { get; internal set; }
    public string TokenString { get; }
    public char ArgumentSeparator { get; public set; }
    public NumberFormatInfo NumberFormat { get; public set; }
    public FormulaTokenizer(WorkbookImpl book);
    public void Prepare(string formula);
    internal bool HasLETFunction(string formulaFunction);
    private void NextChar();
    private void MoveBack(char charToMoveTo);
    internal bool get_HasSubtract();
    internal void set_HasSubtract(bool value);
    public void NextToken();
    private int GetCountInsideQuoted(string formula, char symbol);
    private int CharOccurs(string stringToSearch, char charToFind);
    private int CharOccurs(string stringToSearch, char charToFind, char previousChar);
    public void SaveState();
    public void RestoreState();
    private void ParseNumber();
    private void ProcessGreater();
    private void ProcessLess();
    private void AppendNumbers();
    private void ParseIdentifier();
    private string ProcessPtg(string text);
    private void ParseSpace();
    private void ParseString(bool InQuote);
    private bool CheckQuote();
    private void ParseError();
    private void ParseArray();
    private void SkipString();
    public void RaiseException(string msg, Exception ex);
    public void RaiseUnexpectedToken(string msg);
    private int CharOccurs(string stringToSearch, char charToFind, char previousChar, char nextChar);
    public string get_TokenString();
    public char get_ArgumentSeparator();
    public void set_ArgumentSeparator(char value);
    public NumberFormatInfo get_NumberFormat();
    public void set_NumberFormat(NumberFormatInfo value);
}
[PreserveAttribute]
public class Syncfusion.XlsIO.Implementation.FormulaUtil : CommonObject {
    internal static int DEF_TYPE_REF;
    internal static int DEF_TYPE_VALUE;
    private static int DEF_TYPE_ARRAY;
    private static int DEF_INDEX_DEFAULT;
    private static int DEF_INDEX_ARRAY;
    private static int DEF_INDEX_NAME;
    private static int DEF_INDEX_ROOT_LEVEL;
    private static RegexOptions DEF_REGEX;
    public static int DEF_NAME_INDEX;
    public static int DEF_REFERENCE_INDEX;
    public static int DEF_ARRAY_INDEX;
    internal static int DEF_OPTIONS_OPT_GOTO;
    internal static int DEF_OPTIONS_NOT_OPT_GOTO;
    private static char DEF_BOOKNAME_OPENBRACKET;
    private static char DEF_BOOKNAME_CLOSEBRACKET;
    public static string DEF_GROUP_COLUMN1;
    public static string DEF_GROUP_COLUMN2;
    public static string DEF_GROUP_ROW1;
    public static string DEF_GROUP_ROW2;
    private static char DEF_SHEET_NAME_DELIM;
    internal static char AbsoluteCellReference;
    private static Int32[][][] DEF_INDEXES_CONVERTION;
    public static string Excel2010FunctionPrefix;
    internal static string LETFunctionPrefix;
    internal static string FilterFunctionPrefix;
    public static Char[] OpenBrackets;
    public static Char[] CloseBrackets;
    public static Char[] StringBrackets;
    public static String[] UnaryOperations;
    public static String[] PlusMinusArray;
    private static SortedList m_listPlusMinus;
    public static Dictionary`2<ExcelFunction, string> FunctionIdToAlias;
    public static Dictionary`2<ExcelFunction, int> FunctionIdToParamCount;
    internal static Dictionary`2<ExcelFunction, int> MissingArgumentsCount;
    internal static List`1<ExcelFunction> InfiniteParamCountFunctionId;
    public static Dictionary`2<string, ExcelFunction> FunctionAliasToId;
    public static Dictionary`2<ExcelFunction, Dictionary`2<Type, ReferenceIndexAttribute>> FunctionIdToIndex;
    public static Dictionary`2<string, ConstructorInfo> ErrorNameToConstructor;
    private static Dictionary`2<int, string> s_hashErrorCodeToName;
    private static Dictionary`2<string, int> s_hashNameToErrorCode;
    private static Dictionary`2<FormulaToken, TokenConstructor> TokenCodeToConstructor;
    internal static Dictionary`2<FormulaToken, Ptg> s_hashTokenCodeToPtg;
    public static Regex CellReferenceRegex;
    public static Regex CellRegex;
    public static Regex CellR1C1Regex;
    public static Regex CellRangeRegex;
    private static Regex CellMultipleRangeRegex;
    public static Regex FullRowRangeRegex;
    public static Regex FullColumnRangeRegex;
    public static Regex FullRowRangeR1C1Regex;
    public static Regex FullColumnRangeR1C1Regex;
    public static Regex Full3DRowRangeRegex;
    public static Regex Full3DColumnRangeRegex;
    public static Regex CellRangeR1C1Regex;
    public static Regex CellRangeR1C1ShortRegex;
    public static Regex CellRangeR1C13DShortRegex;
    public static string DEF_SHEETNAME_GROUP;
    public static string DEF_BOOKNAME_GROUP;
    public static string DEF_RANGENAME_GROUP;
    public static string DEF_ROW_GROUP;
    public static string DEF_COLUMN_GROUP;
    public static string DEF_PATH_GROUP;
    private static string DEF_SHEET_NAME;
    private static string DEF_SHEET_NAME_REG_EXPR;
    public static Regex Cell3DRegex;
    public static Regex CellR1C13DRegex;
    public static Regex CellRange3DRegex;
    public static Regex CellRange3DRegex2;
    public static Regex CellRangeR1C13DRegex;
    public static Regex CellRangeR1C13DRegex2;
    private static Regex AddInFunctionRegEx;
    internal static ExcelFunction[] SemiVolatileFunctions;
    public static FormulaToken[] NameXCodes;
    public static FormulaToken[] NameCodes;
    private static ExcelFunction[] m_excel2007Supported;
    private static ExcelFunction[] m_excel2010Supported;
    private static ExcelFunction[] m_excel2013Supported;
    private static ExcelFunction[] m_excel2016Supported;
    private static ExcelFunction[] m_excelOffice365Supported;
    private NumberFormatInfo m_numberFormat;
    private WorkbookImpl m_book;
    private static String[] m_arrAllOperationsDefault;
    private String[][] m_arrOperationGroups;
    private SortedList m_arrAllOperations;
    private SortedList[] m_arrOperationsWithPriority;
    private string m_strArrayRowSeparator;
    private string m_strOperandsSeparator;
    private FormulaParser m_parser;
    private int m_lambdaFormulaArgumentCount;
    [CompilerGeneratedAttribute]
private static EvaluateEventHandler FormulaEvaluator;
    internal int LambdaFormulaArgumentCount { get; internal set; }
    internal FormulaParser FormulaParser { get; }
    public static Dictionary`2<int, string> ErrorCodeToName { get; }
    public static Dictionary`2<string, int> ErrorNameToCode { get; }
    public string ArrayRowSeparator { get; }
    public string OperandsSeparator { get; }
    public NumberFormatInfo NumberFormat { get; public set; }
    public IWorkbook ParentWorkbook { get; }
    private static FormulaUtil();
    public FormulaUtil(IApplication application, object parent);
    public FormulaUtil(IApplication application, object parent, NumberFormatInfo numberFormat, char chArgumentsSeparator, char chRowSeparator);
    internal int get_LambdaFormulaArgumentCount();
    internal void set_LambdaFormulaArgumentCount(int value);
    internal FormulaParser get_FormulaParser();
    [CompilerGeneratedAttribute]
public static void add_FormulaEvaluator(EvaluateEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_FormulaEvaluator(EvaluateEventHandler value);
    private void FindParents();
    private void FillDefaultOperations();
    private static void FillTokenConstructors();
    private static void FillMissArgumentsExcelFunction();
    private static void FillExcelFunctions();
    private static void FillErrorNames();
    private static void AddErrorNames(Type type);
    private void FillPriorities();
    private static SortedList GetSortedList(String[] arrStrings);
    public Ptg[] ParseSharedString(string strFormula, int iFirstRow, int iFirstColumn, IWorksheet sheet);
    public Ptg[] ConvertTokensToShared(Ptg[] tokens, int row, int column, IWorkbook book);
    public Ptg[] ParseString(string strFormula);
    public Ptg[] ParseString(string strFormula, IWorksheet sheet, Dictionary`2<string, string> hashWorksheetNames);
    public Ptg[] ParseString(string strFormula, IWorksheet sheet, Dictionary`2<string, string> hashWorksheetNames, int iCellRow, int iCellColumn, bool bR1C1);
    public Ptg[] ParseString(string strFormula, IWorksheet sheet, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, Dictionary`2<string, string> hashWorksheetNames, ExcelParseFormulaOptions options, int iCellRow, int iCellColumn);
    public string GetLeftUnaryOperand(string strFormula, int OpIndex);
    public string GetRightUnaryOperand(string strFormula, int OpIndex);
    public string GetRightBinaryOperand(string strFormula, int iFirstChar, string operation);
    public string GetFunctionOperand(string strFormula, int iFirstChar);
    [CLSCompliantAttribute("False")]
public string ParseFormulaRecord(FormulaRecord formula);
    [CLSCompliantAttribute("False")]
public string ParseFormulaRecord(FormulaRecord formula, bool bR1C1);
    [CLSCompliantAttribute("False")]
public string ParseSharedFormula(ISharedFormula sharedFormula);
    [CLSCompliantAttribute("False")]
public string ParseSharedFormula(ISharedFormula sharedFormula, int row, int col);
    [CLSCompliantAttribute("False")]
public string ParseSharedFormula(ISharedFormula sharedFormula, int row, int col, bool bR1C1, bool isForSerialization);
    public string ParsePtgArray(Ptg[] ptgs);
    public string ParsePtgArray(Ptg[] ptgs, int row, int col, bool bR1C1, bool isForSerialization);
    public string ParsePtgArray(Ptg[] ptgs, int row, int col, bool bR1C1, NumberFormatInfo numberInfo, bool isForSerialization);
    public string ParsePtgArray(Ptg[] ptgs, int row, int col, bool bR1C1, NumberFormatInfo numberInfo, bool bRemoveSheetNames, bool isForSerialization, IWorksheet sheet);
    public void CheckFormulaVersion(Ptg[] ptgs);
    public List`1<string> SplitArray(string strFormula, string strSeparator);
    public bool UpdateNameIndex(Ptg ptg, Int32[] arrNewIndex);
    public bool UpdateNameIndex(Ptg ptg, IDictionary`2<int, int> dicNewIndex);
    public bool UpdateNameIndex(Ptg[] arrExpression, IDictionary`2<int, int> dicNewIndex);
    public bool UpdateNameIndex(Ptg[] arrExpression, Int32[] arrNewIndex);
    public void SetSeparators(char operandsSeparator, char arrayRowsSeparator);
    private void ReplaceInDictionary(IDictionary list, String[] arrOldKey, String[] arrNewKey);
    public static void MarkUsedReferences(Ptg[] tokens, Boolean[] usedItems);
    public static bool UpdateReferenceIndexes(Ptg[] tokens, Int32[] arrUpdatedIndexes);
    private Ptg CreateConstantPtg(string strFormula, IWorksheet sheet, Dictionary`2<string, string> hashWorksheetNames, ExcelParseFormulaOptions options);
    private Ptg CreateConstantPtg(string strFormula, IWorksheet sheet, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, Dictionary`2<string, string> hashWorksheetNames, ExcelParseFormulaOptions options, int iCellRow, int iCellColumn);
    private static string NormalizeSheetName(string strSheetName);
    public static Ptg[] ParseExpression(DataProvider provider, int iLength, ExcelVersion version);
    internal static bool IsValid(DataProvider provider, int iLength);
    public static Ptg[] ParseExpression(DataProvider provider, int offset, int iExpressionLength, Int32& finalOffset, ExcelVersion version);
    public static Byte[] PtgArrayToByteArray(Ptg[] tokens, ExcelVersion version);
    public static Byte[] PtgArrayToByteArray(Ptg[] arrTokens, Int32& formulaLen, ExcelVersion version);
    public static string GetLeftBinaryOperand(string strFormula, int OpIndex);
    public static int FindCorrespondingBracket(string strFormula, int BracketPos);
    public static string GetOperand(string strFormula, int OpIndex, SortedList arrBreakStrings, bool IsLeft);
    [CLSCompliantAttribute("False")]
public static void RegisterFunction(string functionName, ExcelFunction index, ReferenceIndexAttribute[] paramIndexes);
    [CLSCompliantAttribute("False")]
public static void RegisterFunction(string functionName, ExcelFunction index, ReferenceIndexAttribute[] paramIndexes, int paramCount);
    [CLSCompliantAttribute("False")]
public static void RegisterFunction(string functionName, ExcelFunction index, int paramCount);
    [CLSCompliantAttribute("False")]
public static void RegisterFunction(string functionName, ExcelFunction index);
    public static void RaiseFormulaEvaluation(object sender, EvaluateEventArgs e);
    public static void RegisterTokenClass(Type type);
    [CLSCompliantAttribute("False")]
public static void RegisterAdditionalAlias(string aliasName, ExcelFunction functionIndex);
    public static void UpdateNameIndex(Ptg ptg, int iOldIndex, int iNewIndex);
    public static int IndexOf(FormulaToken[] array, FormulaToken value);
    public static int IndexOf(String[] array, string value);
    [CLSCompliantAttribute("False")]
public static int IndexOf(ExcelFunction[] array, ExcelFunction value);
    private static int IndexOf(Char[] array, char value);
    private static int IndexOf(string strFormula, int index, String[] arrBreakStrings);
    private static int IndexOf(string strFormula, int index, SortedList arrBreakStrings);
    private static int GetLowerBound(String[] arrStringValues, char chFirst);
    private static int GetLowerBound(SortedList arrStringValues, char chFirst);
    private static int GetUpperBound(SortedList arrStringValues, char chFirst);
    [CLSCompliantAttribute("False")]
public static Ptg[] ConvertSharedFormulaTokens(SharedFormulaRecord shared, IWorkbook book, int iRow, int iColumn);
    public Ptg[] UpdateFormula(Ptg[] arrPtgs, int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect, int iRow, int iColumn);
    public Ptg[] UpdateFormula(Ptg[] arrPtgs, int iRowDelta, int iColumnDelta, WorkbookImpl sourceBook, WorkbookImpl destBook, WorksheetImpl destSheet);
    internal Ptg ChangeNameReferenceIndex(WorkbookImpl sourceBook, WorkbookImpl destBook, WorksheetImpl destSheet, Ptg ptg);
    public static void PushOperandToStack(Stack`1<object> operands, string operand);
    private Ptg[] CreateFunction(string strFormula, int bracketIndex, IWorkbook parent, IWorksheet sheet, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int index, Dictionary`2<string, string> hashWorksheetNames, ExcelParseFormulaOptions options, int iCellRow, int iCellColumn);
    internal static bool IsCustomFunction(string strFunctionName, IWorkbook book, Int32& iBookIndex, Int32& iNameIndex);
    private static bool IsLocalCustomFunction(WorkbookImpl book, string strFunctionName, Int32& iNameIndex);
    private static bool IsCustomFunction(WorkbookImpl workbook, Match m, Int32& iBookIndex, Int32& iNameIndex);
    private Ptg[] CreateIfFunction(int iRefIndex, string strFormula, int bracketIndex, IWorkbook parent, IWorksheet sheet, Dictionary`2<string, string> hashWorksheetNames, ExcelParseFormulaOptions options, int iCellRow, int iCellColumn);
    private Ptg[] CreateCustomFunction(int iRefIndex, string strFormula, int bracketIndex, IWorkbook parent, IWorksheet sheet, Dictionary`2<string, string> hashWorksheetNames, ExcelParseFormulaOptions options, int iCellRow, int iCellColumn);
    private Ptg[] CreateCustomFunction(int iRefIndex, string strFormula, int bracketIndex, int iBookIndex, int iNameIndex, IWorkbook parent, IWorksheet sheet, Dictionary`2<string, string> hashWorksheetNames, ExcelParseFormulaOptions options, int iCellRow, int iCellColumn);
    public static Ptg CreateError(string strFormula, int errorIndex);
    private Ptg[] ParseOperandString(string operand, IWorkbook parent, IWorksheet sheet, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, Dictionary`2<string, string> hashWorksheetNames, ExcelParseFormulaOptions options, int iCellRow, int iCellColumn);
    private static OperationPtg CreateUnaryOperation(char OperationSymbol);
    private OperationPtg CreateOperation(string strFormula);
    public static bool IsCell(string strFormula, bool bR1C1, String& strRow, String& strColumn);
    internal bool HasCellReference(string strFormula);
    internal static bool IsR1C1(string strFormula);
    public bool IsCellRange(string strFormula, bool bR1C1, String& strRow1, String& strColumn1, String& strRow2, String& strColumn2);
    private static bool IsSuccess(Match m, string strFormula);
    public static bool IsCell3D(string strFormula, bool bR1C1, String& strSheetName, String& strRow, String& strColumn);
    public bool IsCellRange3D(string strFormula, bool bR1C1, String& strSheetName, String& strRow1, String& strColumn1, String& strRow2, String& strColumn2);
    private static bool IsErrorString(string strFormula, int errorIndex);
    private static bool IsNamedRange(string strFormula, IWorkbook parent, IWorksheet sheet);
    private static int FindCorrespondingBracket(string strFormula, int BracketPos, Char[] StartBrackets, int delta);
    private static bool IsUnaryOperation(string strFormula, int OpIndex);
    private bool IsOperation(string strFormula, int index, Int32& iOperationIndex);
    private static bool IsFunction(string strOperand, Int32& iBracketPos);
    private static string GetErrorOperand(string strFormula, int errorIndex);
    private static int GetExpectedIndex(Type targetType, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i);
    public static int GetIndex(Type targetType, int valueType, Dictionary`2<Type, ReferenceIndexAttribute> indexes, int i, ExcelParseFormulaOptions options);
    public static Ptg CreatePtg(DataProvider provider, Int32& offset, ExcelVersion version);
    public static Ptg CreatePtg(FormulaToken token);
    public static Ptg CreatePtgByType(FormulaToken token);
    public static Ptg CreatePtg(FormulaToken token, string tokenString);
    public static Ptg CreatePtg(FormulaToken token, string tokenString, IWorkbook parent);
    public static Ptg CreatePtg(FormulaToken token, Object[] arrParams);
    [CLSCompliantAttribute("False")]
public static Ptg CreatePtg(FormulaToken token, ushort iParam1, ushort iParam2);
    [CLSCompliantAttribute("False")]
public static Ptg CreatePtg(FormulaToken token, ExcelFunction functionIndex);
    public static Ptg CreatePtg(FormulaToken token, int iCellRow, int iCellColumn, string strParam1, string strParam2, bool bR1C1);
    public static Ptg CreatePtg(FormulaToken token, int iCellRow, int iCellColumn, string strParam1, string strParam2, string strParam3, string strParam4, bool bR1C1, IWorkbook book);
    public static Ptg CreatePtg(FormulaToken token, int iCellRow, int iCellColumn, int iRefIndex, string strParam1, string strParam2, string strParam3, string strParam4, bool bR1C1, IWorkbook book);
    private static Ptg[] SkipUnnecessaryTokens(Ptg[] ptgs);
    private string PutUnaryOperationsAhead(string strFormula);
    [CLSCompliantAttribute("False")]
public static void EditRegisteredFunction(string functionName, ExcelFunction index, ReferenceIndexAttribute[] paramIndexes, int paramCount);
    public static Dictionary`2<int, string> get_ErrorCodeToName();
    public static Dictionary`2<string, int> get_ErrorNameToCode();
    public string get_ArrayRowSeparator();
    public string get_OperandsSeparator();
    public NumberFormatInfo get_NumberFormat();
    public void set_NumberFormat(NumberFormatInfo value);
    public IWorkbook get_ParentWorkbook();
    internal static bool IsExcelOffice365Function(ExcelFunction functionIndex);
    public static bool IsExcel2016Function(ExcelFunction functionIndex);
    public static bool IsExcel2013Function(ExcelFunction functionIndex);
    public static bool IsExcel2010Function(ExcelFunction functionIndex);
    public static bool IsExcel2007Function(ExcelFunction functionIndex);
    internal bool HasExternalReference(Ptg[] ptg);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Implementation.GetNextMsoDrawingData : MulticastDelegate {
    public GetNextMsoDrawingData(object object, IntPtr method);
    public virtual BiffRecordRaw[] Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual BiffRecordRaw[] EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.Implementation.GradientArrayWrapper : CommonObject {
    private List`1<IRange> m_arrCells;
    public ColorObject BackColorObject { get; }
    public Color BackColor { get; public set; }
    public ExcelKnownColors BackColorIndex { get; public set; }
    public ColorObject ForeColorObject { get; }
    public Color ForeColor { get; public set; }
    public ExcelKnownColors ForeColorIndex { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public GradientArrayWrapper(IRange range);
    public sealed virtual ColorObject get_BackColorObject();
    public sealed virtual Color get_BackColor();
    public sealed virtual void set_BackColor(Color value);
    public sealed virtual ExcelKnownColors get_BackColorIndex();
    public sealed virtual void set_BackColorIndex(ExcelKnownColors value);
    public sealed virtual ColorObject get_ForeColorObject();
    public sealed virtual Color get_ForeColor();
    public sealed virtual void set_ForeColor(Color value);
    public sealed virtual ExcelKnownColors get_ForeColorIndex();
    public sealed virtual void set_ForeColorIndex(ExcelKnownColors value);
    public sealed virtual ExcelGradientStyle get_GradientStyle();
    public sealed virtual void set_GradientStyle(ExcelGradientStyle value);
    public sealed virtual ExcelGradientVariants get_GradientVariant();
    public sealed virtual void set_GradientVariant(ExcelGradientVariants value);
    public sealed virtual int CompareTo(IGradient gradient);
    public sealed virtual void TwoColorGradient();
    public sealed virtual void TwoColorGradient(ExcelGradientStyle style, ExcelGradientVariants variant);
    public void BeginUpdate();
    public void EndUpdate();
}
public class Syncfusion.XlsIO.Implementation.GradientWrapper : CommonWrapper {
    private ShapeFillImpl m_gradient;
    [CompilerGeneratedAttribute]
private EventHandler AfterChangeEvent;
    public ColorObject BackColorObject { get; }
    public Color BackColor { get; public set; }
    public ExcelKnownColors BackColorIndex { get; public set; }
    public ColorObject ForeColorObject { get; }
    public Color ForeColor { get; public set; }
    public ExcelKnownColors ForeColorIndex { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public ShapeFillImpl Wrapped { get; }
    public GradientWrapper(ShapeFillImpl gradient);
    public sealed virtual ColorObject get_BackColorObject();
    public sealed virtual Color get_BackColor();
    public sealed virtual void set_BackColor(Color value);
    public sealed virtual ExcelKnownColors get_BackColorIndex();
    public sealed virtual void set_BackColorIndex(ExcelKnownColors value);
    public sealed virtual ColorObject get_ForeColorObject();
    public sealed virtual Color get_ForeColor();
    public sealed virtual void set_ForeColor(Color value);
    public sealed virtual ExcelKnownColors get_ForeColorIndex();
    public sealed virtual void set_ForeColorIndex(ExcelKnownColors value);
    public sealed virtual ExcelGradientStyle get_GradientStyle();
    public sealed virtual void set_GradientStyle(ExcelGradientStyle value);
    public sealed virtual ExcelGradientVariants get_GradientVariant();
    public sealed virtual void set_GradientVariant(ExcelGradientVariants value);
    public sealed virtual int CompareTo(IGradient gradient);
    public sealed virtual void TwoColorGradient();
    public sealed virtual void TwoColorGradient(ExcelGradientStyle style, ExcelGradientVariants variant);
    public ShapeFillImpl get_Wrapped();
    [CompilerGeneratedAttribute]
public void add_AfterChangeEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterChangeEvent(EventHandler value);
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    private void ValidateGradientVariant(ExcelGradientVariants gradientVariant);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.Implementation.GroupPoint : ValueType {
    private int m_x;
    private int m_y;
    private bool m_bIsparse;
    internal int X { get; internal set; }
    internal int Y { get; internal set; }
    internal bool IsParse { get; internal set; }
    internal GroupPoint(int x, int y);
    internal int get_X();
    internal void set_X(int value);
    internal int get_Y();
    internal void set_Y(int value);
    internal bool get_IsParse();
    internal void set_IsParse(bool value);
}
public class Syncfusion.XlsIO.Implementation.HashCalculate : object {
    private static int m_level;
    private static HashCalculate();
    public static int CalculateHash(object value, String[] skipProps);
    private static void ObjectToString(StringBuilder builder, object value, List`1<string> toSkip);
}
public class Syncfusion.XlsIO.Implementation.HeaderImageGetter : object {
    public sealed virtual ShapeCollectionBase GetShapes(WorksheetBaseImpl sheet);
    public sealed virtual object Clone();
}
public class Syncfusion.XlsIO.Implementation.Heap : object {
}
public class Syncfusion.XlsIO.Implementation.HFEngine : RichTextString {
    private static string DEF_AMP;
    private static char DEF_UNDERLINE;
    private static char DEF_DOUBLE_UNDERLINE;
    private static char DEF_STRIKEOUT;
    private static char DEF_SUBSCRIPT;
    private static char DEF_SUPERSCRIPT;
    private static char DEF_FONT_NAME_EDGE;
    private static char DEF_FONT_STYLE_SEPARATOR;
    private static string DEF_BOLD_VALUE;
    private static string DEF_ITALIC_VALUE;
    private static string DEF_REGULAR_STYLE;
    private static char DEF_SPACE;
    private List`1<FontImpl> m_arrFonts;
    public HFEngine(IApplication application, object parent);
    public sealed virtual void Parse(string strText);
    public sealed virtual string GetHeaderFooterString();
    private void ProcessCharacter(string strText, StringBuilder builder, Int32& iPos, FontImpl& font);
    private void AddTextBlock(StringBuilder builder, FontImpl font);
    protected virtual int AddFont(IFont fontToAdd);
    private void SetFont(FontImpl font, string strFontName);
    public ENUMLOGFONTEX FindFont(string strFontName, string strFontStyle);
    private static int FontEnumProc(ENUMLOGFONTEX lpelf, IntPtr lpntm, int FontType, Object& objData);
    private static void CopyFontSettings(Font sourceFont, FontImpl destFont);
    private void WritePrevTextBlock(StringBuilder builder, int iPrevPos, int iCurPos);
    private void WriteFontDifference(StringBuilder builder, FontImpl prevFont, FontImpl curFont);
    private void WriteFontName(StringBuilder builder, FontImpl prevFont, FontImpl curFont);
    private void WriteFontUnderline(StringBuilder builder, FontImpl prevFont, FontImpl curFont);
    private void WriteFontSupSub(StringBuilder builder, FontImpl prevFont, FontImpl curFont);
    private void WriteFontStrikeout(StringBuilder builder, FontImpl prevFont, FontImpl curFont);
    private void WriteFontSize(StringBuilder builder, FontImpl prevFont, FontImpl curFont);
    protected internal virtual FontImpl GetFontByIndex(int iFontIndex);
    public virtual void Clear();
    public virtual void EndUpdate();
}
public class Syncfusion.XlsIO.Implementation.HPageBreakImpl : CommonObject {
    private ExcelPageBreakExtent m_extent;
    private ExcelPageBreak m_type;
    private THPageBreak m_HPageBreak;
    private WorksheetImpl m_sheet;
    public ExcelPageBreakExtent Extent { get; }
    public IRange Location { get; public set; }
    public ExcelPageBreak Type { get; public set; }
    [CLSCompliantAttribute("False")]
public THPageBreak HPageBreak { get; public set; }
    public int Row { get; internal set; }
    private HPageBreakImpl(IApplication application, object parent);
    private HPageBreakImpl(IApplication application, object parent, BiffReader reader);
    [CLSCompliantAttribute("False")]
public HPageBreakImpl(IApplication application, object parent, THPageBreak pagebreak);
    public HPageBreakImpl(IApplication application, object parent, IRange location);
    public ExcelPageBreakExtent get_Extent();
    public sealed virtual IRange get_Location();
    public sealed virtual void set_Location(IRange value);
    public ExcelPageBreak get_Type();
    public void set_Type(ExcelPageBreak value);
    public THPageBreak get_HPageBreak();
    public void set_HPageBreak(THPageBreak value);
    public int get_Row();
    internal void set_Row(int value);
    private void FindParents();
    public HPageBreakImpl Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.HtmlSaveOptions : object {
    public static HtmlSaveOptions Default;
    private string m_imagePath;
    private GetText m_getText;
    internal string ImagePath { get; internal set; }
    public GetText TextMode { get; public set; }
    private static HtmlSaveOptions();
    internal string get_ImagePath();
    internal void set_ImagePath(string value);
    public GetText get_TextMode();
    public void set_TextMode(GetText value);
}
internal class Syncfusion.XlsIO.Implementation.HtmlStringParser : object {
    private Stack`1<TextFormat> styleStack;
    private static TextFormat m_formatText;
    private bool isPreserveBreakForInvalidStyles;
    private bool m_isSpanTag;
    protected TextFormat CurrentFormat { get; }
    internal bool IsSpanTag { get; internal set; }
    protected TextFormat get_CurrentFormat();
    internal bool get_IsSpanTag();
    internal void set_IsSpanTag(bool value);
    private string LoadXHtml(string html);
    internal string RemoveunWantedQuotes(string html);
    private string ReplaceUnwantedQuotes(string html, Regex regex);
    internal string PrepareHtml(string html);
    private string ReplaceHtmlConstantByUnicodeChar(string html);
    private string ReplaceHtmlTags(string html);
    private string ReplaceHtmlBreakTags(string html);
    private string ReplaceHtmlSpecialCharacters(string html);
    internal string ReplaceHtmlSymbols(string html);
    private string ReplaceHtmlCharacters(string html);
    private string ReplaceHtmlMathSymbols(string html);
    private string ReplaceHtmlGreekLetters(string html);
    private string ReplaceHtmlOtherEntities(string html);
    internal string InsertHtmlElement(string html);
    internal void ParseHtml(string html, IRichTextString range);
    internal void TraverseChildNodes(XmlNodeList nodes, IRichTextString range);
    internal void ParseTags(XmlNode node, IRichTextString range);
    private void ParseFormattingTags(XmlNode tag, IRichTextString range);
    private bool IsEmptyNode(XmlNode node);
    private void ParseHeadingTag(XmlNode tag, IRichTextString range);
    internal Color GetColor(string attValue);
    private string GetFontName(string paramValue);
    internal string GetAttributeValue(XmlNode node, string attrName);
    private void TraverseTextWithinTag(XmlNode node, IRichTextString rtfRange);
    internal IFont ApplyTextFormatting(IFont font, TextFormat format);
    private void ParseHyperLinkTag(XmlNode tag, IRichTextString range);
    private TextFormat EnsureStyle(XmlNode node);
    private TextFormat AddStyle();
    private bool ParseStyle(XmlNode node);
    internal void GetFormat(TextFormat format, string paramName, string paramValue, XmlNode node);
    private void LeaveStyle(bool stylePresent);
}
internal class Syncfusion.XlsIO.Implementation.HtmlToExcelConverter : object {
    private HtmlStringParser m_parser;
    private bool m_bHtmlImportDetectFormula;
    internal void ParseHTMLTable(string htmlText, WorksheetImpl worksheetImpl, int row, int col, HtmlImportOptions htmlImportOptions);
    private void ParseTableContent(XmlNode tmpNode, Dictionary`2<string, CssStyle> cssStyles, WorksheetImpl worksheetImpl, Int32& row, int col, List`1<int> columnWidths, List`1<int> rowsToDelete);
    private void ConvertCssStyle(CssStyle css, IStyle format, IRange range);
    private void ConvertTextFormat(TextFormat textFormat, IRange cellRange);
    internal ExcelHAlign GetHorizontalAlign(string htmlAlign);
    internal ExcelVAlign GetVerticalAlign(string htmlAlign);
    private IBorder ParseBorder(IBorder border, string borderPr);
    private Dictionary`2<string, CssStyle> ParseCssStyle(XmlNode style);
    private void ParseTableRow(XmlNode rowNode, WorksheetImpl worksheetImpl, Int32& maxMergedRow, int row, int col, Dictionary`2<string, CssStyle> styles, int tableRow, TextFormat format, Boolean& isColumnDisplay);
    private void ParseTableColumn(XmlNode colNode, WorksheetImpl worksheetImpl, int row, int col);
    private TextFormat ParseStyle(XmlNode node, TextFormat format);
    private void ApplyTextFormatToStyle(TextFormat format, CellStyle style);
}
public class Syncfusion.XlsIO.Implementation.HyperLinkImpl : CommonObject {
    public static string DEF_STYLE_NAME;
    private HLinkRecord m_link;
    private string m_strToolTip;
    private WorksheetImpl m_sheet;
    private IRange m_range;
    private IShape m_shape;
    private ExcelHyperlinkAttachedType m_attachedType;
    public string Address { get; public set; }
    public string Name { get; }
    public IRange Range { get; public set; }
    public string ScreenTip { get; public set; }
    public string SubAddress { get; public set; }
    public string TextToDisplay { get; public set; }
    public ExcelHyperLinkType Type { get; public set; }
    public int FirstRow { get; }
    public int FirstColumn { get; }
    public int LastRow { get; }
    public int LastColumn { get; }
    public IShape Shape { get; internal set; }
    public ExcelHyperlinkAttachedType AttachedType { get; internal set; }
    protected IRange TopLeftCell { get; }
    public HyperLinkImpl(IApplication application, object parent);
    public HyperLinkImpl(IApplication application, object parent, IList data, Int32& iPos);
    public HyperLinkImpl(IApplication application, object parent, IRange range);
    public HyperLinkImpl(IApplication application, object parent, IShape shape);
    private void SetParents();
    public sealed virtual string get_Address();
    public sealed virtual void set_Address(string value);
    public sealed virtual string get_Name();
    public sealed virtual IRange get_Range();
    public void set_Range(IRange value);
    public sealed virtual string get_ScreenTip();
    public sealed virtual void set_ScreenTip(string value);
    public sealed virtual string get_SubAddress();
    public sealed virtual void set_SubAddress(string value);
    public sealed virtual string get_TextToDisplay();
    public sealed virtual void set_TextToDisplay(string value);
    public sealed virtual ExcelHyperLinkType get_Type();
    public sealed virtual void set_Type(ExcelHyperLinkType value);
    public int get_FirstRow();
    public int get_FirstColumn();
    public int get_LastRow();
    public int get_LastColumn();
    public sealed virtual IShape get_Shape();
    internal void set_Shape(IShape value);
    public sealed virtual ExcelHyperlinkAttachedType get_AttachedType();
    internal void set_AttachedType(ExcelHyperlinkAttachedType value);
    private int Parse(IList data, int iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void SetSubAddress(string strSubAddress);
    public void SetAddress(string strAddress, bool bSetText);
    public void Clear();
    protected IRange get_TopLeftCell();
    public sealed virtual object Clone(object parent);
}
internal class Syncfusion.XlsIO.Implementation.IconConditionValueWrapper : ConditionValueWrapper {
    public ExcelIconSetType IconSet { get; public set; }
    public int Index { get; public set; }
    private IconConditionValue Wrapped { get; }
    public IconConditionValueWrapper(IConditionValue value, IOptimizedUpdate parent);
    public sealed virtual ExcelIconSetType get_IconSet();
    public sealed virtual void set_IconSet(ExcelIconSetType value);
    public sealed virtual int get_Index();
    public sealed virtual void set_Index(int value);
    private IconConditionValue get_Wrapped();
}
public class Syncfusion.XlsIO.Implementation.IconFilter : object {
    private ExcelIconSetType m_iconSetType;
    private int m_iconId;
    public ExcelFilterType FilterType { get; }
    public ExcelIconSetType IconSetType { get; internal set; }
    public int IconId { get; internal set; }
    public sealed virtual ExcelFilterType get_FilterType();
    public ExcelIconSetType get_IconSetType();
    internal void set_IconSetType(ExcelIconSetType value);
    public int get_IconId();
    internal void set_IconId(int value);
    public IconFilter Clone();
}
internal class Syncfusion.XlsIO.Implementation.IconSetImpl : object {
    private Stream m_iconSetStream;
    private IConditionValue[] m_arrCriteria;
    private ExcelIconSetType m_iconSet;
    private bool m_bPercentileValues;
    private bool m_bReverseOrder;
    private bool m_hasCustomIconSet;
    private bool m_bShowIconOnly;
    public IList`1<IConditionValue> IconCriteria { get; }
    public ExcelIconSetType IconSet { get; public set; }
    public bool PercentileValues { get; public set; }
    public bool ReverseOrder { get; public set; }
    public bool ShowIconOnly { get; public set; }
    internal bool IsCustom { get; }
    internal Stream IconSetStream { get; internal set; }
    public IconSetImpl Clone();
    public static bool op_Equality(IconSetImpl first, IconSetImpl second);
    public static bool op_Inequality(IconSetImpl first, IconSetImpl second);
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual IList`1<IConditionValue> get_IconCriteria();
    public sealed virtual ExcelIconSetType get_IconSet();
    public sealed virtual void set_IconSet(ExcelIconSetType value);
    public sealed virtual bool get_PercentileValues();
    public sealed virtual void set_PercentileValues(bool value);
    public sealed virtual bool get_ReverseOrder();
    public sealed virtual void set_ReverseOrder(bool value);
    public sealed virtual bool get_ShowIconOnly();
    public sealed virtual void set_ShowIconOnly(bool value);
    private void UpdateCriteria();
    internal bool get_IsCustom();
    internal Stream get_IconSetStream();
    internal void set_IconSetStream(Stream value);
    internal void SetCustomIcon(bool value);
    internal void ClearAll();
}
internal class Syncfusion.XlsIO.Implementation.IconSetWrapper : object {
    private ConditionalFormatWrapper m_format;
    private List`1<IConditionValue> m_arrConditions;
    private IList`1<IConditionValue> m_readOnly;
    public IList`1<IConditionValue> IconCriteria { get; }
    public ExcelIconSetType IconSet { get; public set; }
    public bool PercentileValues { get; public set; }
    public bool ReverseOrder { get; public set; }
    public bool ShowIconOnly { get; public set; }
    public IconSetWrapper(ConditionalFormatWrapper format);
    public sealed virtual IList`1<IConditionValue> get_IconCriteria();
    public sealed virtual ExcelIconSetType get_IconSet();
    public sealed virtual void set_IconSet(ExcelIconSetType value);
    public sealed virtual bool get_PercentileValues();
    public sealed virtual void set_PercentileValues(bool value);
    public sealed virtual bool get_ReverseOrder();
    public sealed virtual void set_ReverseOrder(bool value);
    public sealed virtual bool get_ShowIconOnly();
    public sealed virtual void set_ShowIconOnly(bool value);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    private void UpdateCollection(IList`1<IConditionValue> arrSource);
    private void Add(int count, IList`1<IConditionValue> arrSource);
    private void Update(int count);
    private void Remove(int count);
    private IconSetImpl GetIconSet();
}
public class Syncfusion.XlsIO.Implementation.IdReserver : object {
    public static int SegmentSize;
    internal Dictionary`2<int, int> m_id;
    private Dictionary`2<int, int> m_idCount;
    private Dictionary`2<int, KeyValuePair`2<int, int>> m_collectionCount;
    private int m_iMaximumId;
    private Dictionary`2<int, int> m_dictAdditionalShapes;
    public int MaximumId { get; }
    public int get_MaximumId();
    public static int GetSegmentStart(int id);
    public bool CheckReserved(int id);
    public bool CheckFree(int id, int count);
    public int ReservedBy(int id);
    public bool TryReserve(int id, int lastId, int collectionId);
    private void IncreaseCount(int id);
    private bool IsReservedBy(int id, int lastId, int collectionId);
    private void FreeSegment(int id);
    public void FreeSegmentsSequence(int id, int collectionId);
    public void FreeSequence(int collectionId);
    public int Allocate(int idNumber, int collectionId, ShapeCollectionBase shapes);
    public int GetReservedCount(int collectionId);
    public int ReservedCount(int id);
    public void AddAdditionalShapes(int collectionIndex, int shapesNumber);
    public int GetAdditionalShapesNumber(int collectionIndex);
}
internal class Syncfusion.XlsIO.Implementation.ImportDTHelper : object {
    private bool m_isFieldNameShown;
    private DataTable m_dataTable;
    private int m_firstColumn;
    private int m_firstRow;
    private int m_dateStyleIndex;
    private bool m_isLoading;
    internal bool IsLoading { get; internal set; }
    internal int FirstColumn { get; }
    internal DataTable DataTable { get; }
    internal int FirstRow { get; }
    internal int DateStyleIndex { get; }
    internal bool IsFieldNameShown { get; }
    internal ImportDTHelper(DataTable dt, int firstRow, int firstColumn, int dateStyleIndex, bool isFieldNameShown);
    internal bool get_IsLoading();
    internal void set_IsLoading(bool value);
    internal int get_FirstColumn();
    internal DataTable get_DataTable();
    internal int get_FirstRow();
    internal int get_DateStyleIndex();
    internal bool get_IsFieldNameShown();
}
public class Syncfusion.XlsIO.Implementation.IncreaseIndex : MulticastDelegate {
    public IncreaseIndex(object object, IntPtr method);
    public virtual void Invoke(int index);
    public virtual IAsyncResult BeginInvoke(int index, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.Implementation.InteriorArrayWrapper : CommonObject {
    private List`1<IRange> m_arrCells;
    public ExcelKnownColors PatternColorIndex { get; public set; }
    public Color PatternColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public IGradient Gradient { get; }
    public ExcelPattern FillPattern { get; public set; }
    public InteriorArrayWrapper(IRange range);
    public sealed virtual ExcelKnownColors get_PatternColorIndex();
    public sealed virtual void set_PatternColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_PatternColor();
    public sealed virtual void set_PatternColor(Color value);
    public sealed virtual ExcelKnownColors get_ColorIndex();
    public sealed virtual void set_ColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual IGradient get_Gradient();
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    public void BeginUpdate();
    public void EndUpdate();
}
public class Syncfusion.XlsIO.Implementation.InteriorWrapper : CommonWrapper {
    private ExtendedFormatImpl m_xFormat;
    private GradientWrapper m_gradient;
    [CompilerGeneratedAttribute]
private EventHandler AfterChangeEvent;
    public ExcelKnownColors PatternColorIndex { get; public set; }
    public Color PatternColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public IGradient Gradient { get; }
    public ExcelPattern FillPattern { get; public set; }
    public ExtendedFormatImpl Wrapped { get; }
    public InteriorWrapper(ExtendedFormatImpl format);
    public sealed virtual ExcelKnownColors get_PatternColorIndex();
    public sealed virtual void set_PatternColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_PatternColor();
    public sealed virtual void set_PatternColor(Color value);
    public sealed virtual ExcelKnownColors get_ColorIndex();
    public sealed virtual void set_ColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual IGradient get_Gradient();
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    [CompilerGeneratedAttribute]
public void add_AfterChangeEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterChangeEvent(EventHandler value);
    private void WrappedGradientAfterChangeEvent(object sender, EventArgs e);
    private void CreateGradientWrapper();
    public ExtendedFormatImpl get_Wrapped();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.InvalidRange : object {
    private object m_parent;
    private IApplication m_application;
    private int m_iFirstRow;
    private int m_iLastRow;
    private int m_iFirstColumn;
    private int m_iLastColumn;
    public int CellsCount { get; }
    public string AddressGlobal2007 { get; }
    public string HtmlString { get; public set; }
    public string Address { get; }
    public string AddressLocal { get; }
    public string AddressGlobal { get; }
    public string AddressR1C1 { get; }
    public string AddressR1C1Local { get; }
    public bool Boolean { get; public set; }
    public IBorders Borders { get; }
    public IRange[] Cells { get; }
    public int Column { get; }
    public int ColumnGroupLevel { get; }
    public double ColumnWidth { get; public set; }
    public int Count { get; }
    public DateTime DateTime { get; public set; }
    public string DisplayText { get; }
    public IRange End { get; }
    public IRange EntireColumn { get; }
    public IRange EntireRow { get; }
    public string Error { get; public set; }
    public string Formula { get; public set; }
    public string FormulaArray { get; public set; }
    public string FormulaArrayR1C1 { get; public set; }
    public bool FormulaHidden { get; public set; }
    public DateTime FormulaDateTime { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public bool FormulaBoolValue { get; public set; }
    public string FormulaErrorValue { get; public set; }
    public bool HasDataValidation { get; }
    public bool HasBoolean { get; }
    public bool HasDateTime { get; }
    public bool HasFormula { get; }
    public bool HasFormulaArray { get; }
    public bool HasNumber { get; }
    public bool HasRichText { get; }
    public bool HasString { get; }
    public bool HasStyle { get; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public IHyperLinks Hyperlinks { get; }
    public int IndentLevel { get; public set; }
    public bool IsBlank { get; }
    public bool IsBoolean { get; }
    public bool IsError { get; }
    public bool IsGroupedByColumn { get; }
    public bool IsGroupedByRow { get; }
    public bool IsInitialized { get; }
    public int LastColumn { get; }
    public int LastRow { get; }
    public double Number { get; public set; }
    public string NumberFormat { get; public set; }
    public int Row { get; }
    public int RowGroupLevel { get; }
    public double RowHeight { get; public set; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public IStyle CellStyle { get; public set; }
    public string CellStyleName { get; public set; }
    public string Text { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public string Value { get; public set; }
    public string CalculatedValue { get; }
    public object Value2 { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public IWorksheet Worksheet { get; }
    public IRange Item { get; public set; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IConditionalFormats ConditionalFormats { get; }
    public IDataValidation DataValidation { get; }
    public string FormulaStringValue { get; public set; }
    public double FormulaNumberValue { get; public set; }
    public bool HasFormulaBoolValue { get; }
    public bool HasFormulaErrorValue { get; }
    public bool HasFormulaDateTime { get; }
    public bool HasFormulaNumberValue { get; }
    public bool HasFormulaStringValue { get; }
    public ICommentShape Comment { get; }
    public IThreadedComment ThreadedComment { get; }
    public IRichTextString RichText { get; }
    public bool IsMerged { get; }
    public IRange MergeArea { get; }
    public bool WrapText { get; public set; }
    public bool HasExternalFormula { get; }
    public ExcelIgnoreError IgnoreErrorOptions { get; public set; }
    public Nullable`1<bool> IsStringsPreserved { get; public set; }
    public Nullable`1<BuiltInStyles> BuiltInStyle { get; public set; }
    public string WorksheetName { get; }
    public IApplication Application { get; }
    public object Parent { get; }
    public InvalidRange(object parent, IRange range);
    public sealed virtual string GetNewAddress(Dictionary`2<string, string> names, String& strSheetName);
    public sealed virtual IRange Clone(object parent, Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
    public sealed virtual void ClearConditionalFormats();
    public sealed virtual Rectangle[] GetRectangles();
    public sealed virtual int GetRectanglesCount();
    public sealed virtual IRange Offset(int row, int column);
    public sealed virtual IRange Resize(int row, int column);
    public sealed virtual int get_CellsCount();
    public sealed virtual string get_AddressGlobal2007();
    public sealed virtual string get_HtmlString();
    public sealed virtual void set_HtmlString(string value);
    public sealed virtual string get_Address();
    public sealed virtual string get_AddressLocal();
    public sealed virtual string get_AddressGlobal();
    public sealed virtual string get_AddressR1C1();
    public sealed virtual string get_AddressR1C1Local();
    public sealed virtual bool get_Boolean();
    public sealed virtual void set_Boolean(bool value);
    public sealed virtual IBorders get_Borders();
    public sealed virtual IRange[] get_Cells();
    public sealed virtual int get_Column();
    public sealed virtual int get_ColumnGroupLevel();
    public sealed virtual double get_ColumnWidth();
    public sealed virtual void set_ColumnWidth(double value);
    public sealed virtual int get_Count();
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    public sealed virtual string get_DisplayText();
    public sealed virtual IRange get_End();
    public sealed virtual IRange get_EntireColumn();
    public sealed virtual IRange get_EntireRow();
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual string get_Formula();
    public sealed virtual void set_Formula(string value);
    public sealed virtual string get_FormulaArray();
    public sealed virtual void set_FormulaArray(string value);
    public sealed virtual string get_FormulaArrayR1C1();
    public sealed virtual void set_FormulaArrayR1C1(string value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual DateTime get_FormulaDateTime();
    public sealed virtual void set_FormulaDateTime(DateTime value);
    public sealed virtual string get_FormulaR1C1();
    public sealed virtual void set_FormulaR1C1(string value);
    public sealed virtual bool get_FormulaBoolValue();
    public sealed virtual void set_FormulaBoolValue(bool value);
    public sealed virtual string get_FormulaErrorValue();
    public sealed virtual void set_FormulaErrorValue(string value);
    public sealed virtual bool get_HasDataValidation();
    public sealed virtual bool get_HasBoolean();
    public sealed virtual bool get_HasDateTime();
    public sealed virtual bool get_HasFormula();
    public sealed virtual bool get_HasFormulaArray();
    public sealed virtual bool get_HasNumber();
    public sealed virtual bool get_HasRichText();
    public sealed virtual bool get_HasString();
    public sealed virtual bool get_HasStyle();
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual IHyperLinks get_Hyperlinks();
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_IsBlank();
    public sealed virtual bool get_IsBoolean();
    public sealed virtual bool get_IsError();
    public sealed virtual bool get_IsGroupedByColumn();
    public sealed virtual bool get_IsGroupedByRow();
    public sealed virtual bool get_IsInitialized();
    public sealed virtual int get_LastColumn();
    public sealed virtual int get_LastRow();
    public sealed virtual double get_Number();
    public sealed virtual void set_Number(double value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual int get_Row();
    public sealed virtual int get_RowGroupLevel();
    public sealed virtual double get_RowHeight();
    public sealed virtual void set_RowHeight(double value);
    public sealed virtual IRange[] get_Rows();
    public sealed virtual IRange[] get_Columns();
    public sealed virtual IStyle get_CellStyle();
    public sealed virtual void set_CellStyle(IStyle value);
    public sealed virtual string get_CellStyleName();
    public sealed virtual void set_CellStyleName(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual TimeSpan get_TimeSpan();
    public sealed virtual void set_TimeSpan(TimeSpan value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_CalculatedValue();
    public sealed virtual object get_Value2();
    public sealed virtual void set_Value2(object value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual IWorksheet get_Worksheet();
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual void set_Item(int row, int column, IRange value);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual IConditionalFormats get_ConditionalFormats();
    public sealed virtual IDataValidation get_DataValidation();
    public sealed virtual string get_FormulaStringValue();
    public sealed virtual void set_FormulaStringValue(string value);
    public sealed virtual double get_FormulaNumberValue();
    public sealed virtual void set_FormulaNumberValue(double value);
    public sealed virtual bool get_HasFormulaBoolValue();
    public sealed virtual bool get_HasFormulaErrorValue();
    public sealed virtual bool get_HasFormulaDateTime();
    public sealed virtual bool get_HasFormulaNumberValue();
    public sealed virtual bool get_HasFormulaStringValue();
    public sealed virtual ICommentShape get_Comment();
    public sealed virtual IThreadedComment get_ThreadedComment();
    public sealed virtual IRichTextString get_RichText();
    public sealed virtual bool get_IsMerged();
    public sealed virtual IRange get_MergeArea();
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual bool get_HasExternalFormula();
    public sealed virtual ExcelIgnoreError get_IgnoreErrorOptions();
    public sealed virtual void set_IgnoreErrorOptions(ExcelIgnoreError value);
    public sealed virtual Nullable`1<bool> get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(Nullable`1<bool> value);
    public sealed virtual Nullable`1<BuiltInStyles> get_BuiltInStyle();
    public sealed virtual void set_BuiltInStyle(Nullable`1<BuiltInStyles> value);
    public sealed virtual string get_WorksheetName();
    public sealed virtual IRange Activate();
    public sealed virtual IRange Activate(bool scroll);
    public sealed virtual IRange Group(ExcelGroupBy groupBy);
    public sealed virtual IRange Group(ExcelGroupBy groupBy, bool bCollapsed);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual void SubTotal(Int32[] groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual double Sum();
    public sealed virtual double Sum(bool considerDateAsNumber);
    public sealed virtual double Average();
    public sealed virtual double Average(bool considerDateAsNumber);
    public sealed virtual double Min();
    public sealed virtual double Min(bool considerDateAsNumber);
    public sealed virtual double Max();
    public sealed virtual double Max(bool considerDateAsNumber);
    public sealed virtual IRange Trim();
    public sealed virtual void Merge();
    public sealed virtual void Merge(bool clearCells);
    public sealed virtual IRange Ungroup(ExcelGroupBy groupBy);
    public sealed virtual void UnMerge();
    public sealed virtual void FreezePanes();
    public sealed virtual void Clear();
    public sealed virtual void Clear(bool isClearFormat);
    public sealed virtual void Clear(ExcelClearOptions option);
    public sealed virtual void Clear(ExcelMoveDirection direction);
    public sealed virtual void Clear(ExcelMoveDirection direction, ExcelCopyRangeOptions options);
    public sealed virtual void MoveTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options, bool skipBlank);
    public sealed virtual IRange CopyTo(IRange destination, bool pasteLink);
    public sealed virtual IRange IntersectWith(IRange range);
    public sealed virtual IRange MergeWith(IRange range);
    public sealed virtual void AutofitRows();
    public sealed virtual void AutofitColumns();
    public sealed virtual ICommentShape AddComment();
    public sealed virtual IThreadedComment AddThreadedComment(string text, DateTime creationTime);
    public sealed virtual IThreadedComment AddThreadedComment(string text, string author, DateTime creationTime);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public sealed virtual void BorderAround();
    public sealed virtual void BorderAround(ExcelLineStyle borderLine);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderInside();
    public sealed virtual void BorderInside(ExcelLineStyle borderLine);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderNone();
    public sealed virtual void CollapseGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy, ExpandCollapseFlags flags);
    public sealed virtual IRange[] GetDependents();
    public sealed virtual IRange[] GetDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetPrecedents();
    public sealed virtual IRange[] GetPrecedents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectDependents();
    public sealed virtual IRange[] GetDirectDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectPrecedents();
    public sealed virtual IRange[] GetDirectPrecedents(bool isEntireWorkbook);
    public sealed virtual IEnumerator`1<IRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
}
public interface Syncfusion.XlsIO.Implementation.IRTFWrapper {
}
public class Syncfusion.XlsIO.Implementation.ItemSizeHelper : object {
    internal List`1<double> m_arrSizeSum;
    internal SizeGetter m_getter;
    internal double ScaledCellHeight;
    internal double ScaledCellWidth;
    public ItemSizeHelper(SizeGetter sizeGetter);
    public float GetTotal(int rowIndex);
    internal double GetTotalInDouble(int rowIndex);
    internal void UpdateColumnIndexValue(int columnIndex, float value);
    internal void UpdateRowIndexValue(int rowIndex, float value);
    public float GetTotal(int rowStart, int rowEnd);
    public float GetSize(int itemIndex);
    internal double GetSizeInDouble(int itemIndex);
}
internal class Syncfusion.XlsIO.Implementation.JsonSerialization.JsonWriter : object {
    private static string OpenCurlyBraces;
    private static string CloseCurlyBraces;
    private static string OpenSquareBracket;
    private static string CloseSquareBracket;
    private static string NewLine;
    private static string Comma;
    private static string DoubleQuote;
    private static string Colon;
    private TextWriter m_textWriter;
    private StreamWriter m_streamWriter;
    private int m_spaces;
    private int m_index;
    private bool m_isValueWritten;
    private bool m_isArrayWritten;
    private bool m_isObjectWritten;
    private int m_arrayOpenCount;
    private int m_objectOpenCount;
    private JsonFormatting m_formatting;
    private bool m_bIsNonSchema;
    private int m_indentation;
    private char m_indentChar;
    internal JsonFormatting Formatting { get; internal set; }
    internal bool IsNonSchema { get; internal set; }
    internal int Indentation { get; internal set; }
    internal char IndentChar { get; internal set; }
    internal JsonWriter(StreamWriter streamWriter);
    internal JsonWriter(Stream stream);
    internal JsonFormatting get_Formatting();
    internal void set_Formatting(JsonFormatting value);
    internal bool get_IsNonSchema();
    internal void set_IsNonSchema(bool value);
    internal int get_Indentation();
    internal void set_Indentation(int value);
    internal char get_IndentChar();
    internal void set_IndentChar(char value);
    internal void WriteStartObject();
    internal void WriteEndObject();
    internal void WriteStartArray();
    internal void WriteEndArray();
    internal void WritePropertyName(string Name);
    internal void WriteValue(string Value);
    private string GetSpaces();
    public sealed virtual void Dispose();
}
public class Syncfusion.XlsIO.Implementation.LatinEncoding : Encoding {
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
}
internal class Syncfusion.XlsIO.Implementation.LinkInfoStream : DataStructure {
    private static int DEF_STRUCT_SIZE;
    private static int DEF_UNICODE_MARKER;
    private static int DEF_UNICODE_MARKER_SIZE;
    private Byte[] m_filePathDataASCII;
    private Byte[] m_filePathDataUNICOD;
    private string m_filePath;
    internal int Length { get; }
    internal LinkInfoStream(Stream stream);
    internal LinkInfoStream(string filePath);
    internal virtual int get_Length();
    internal virtual void Parse(Byte[] arrData, int iOffset);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal void SaveTo(Stream stream);
}
public class Syncfusion.XlsIO.Implementation.LOGFONT : object {
    public int lfHeight;
    public int lfWidth;
    public int lfEscapement;
    public int lfOrientation;
    public int lfWeight;
    public byte lfItalic;
    public byte lfUnderline;
    public byte lfStrikeOut;
    public byte lfCharSet;
    public byte lfOutPrecision;
    public byte lfClipPrecision;
    public byte lfQuality;
    public byte lfPitchAndFamily;
    public Byte[] lfFaceName;
}
internal class Syncfusion.XlsIO.Implementation.MacroSheet : object {
    private bool m_value;
    private Stream m_preservedStream;
    private string m_sheetName;
    private WorksheetDataHolder holder;
    internal bool Value { get; }
    internal Stream PreservedStream { get; internal set; }
    internal string SheetName { get; }
    internal WorksheetDataHolder DataHolder { get; internal set; }
    internal MacroSheet(string sheetName, bool value);
    internal bool get_Value();
    internal Stream get_PreservedStream();
    internal void set_PreservedStream(Stream value);
    internal string get_SheetName();
    internal WorksheetDataHolder get_DataHolder();
    internal void set_DataHolder(WorksheetDataHolder value);
}
public class Syncfusion.XlsIO.Implementation.MathGeneral : object {
    public static double Truncate(double value);
}
public class Syncfusion.XlsIO.Implementation.Memory : object {
}
internal class Syncfusion.XlsIO.Implementation.Mention : object {
    private string m_mentionPersonId;
    private string m_mentionId;
    private int m_startIndex;
    private int m_length;
    private IThreadedComment m_threadedComment;
    internal string MentionPersonId { get; internal set; }
    internal string MentionId { get; internal set; }
    internal int StartIndex { get; internal set; }
    internal int Length { get; internal set; }
    internal Mention(IThreadedComment threadedComment);
    internal string get_MentionPersonId();
    internal void set_MentionPersonId(string value);
    internal string get_MentionId();
    internal void set_MentionId(string value);
    internal int get_StartIndex();
    internal void set_StartIndex(int value);
    internal int get_Length();
    internal void set_Length(int value);
    internal Mention Clone(IThreadedComment threadedCommentClone);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.MergeCellsImpl : CommonObject {
    private WorksheetImpl m_sheet;
    private List`1<MergeCellsRecord> m_arrRecordsToParse;
    private bool m_bParsed;
    private HashSet`1<Rectangle> m_arrCells;
    internal int MergeCount { get; }
    internal HashSet`1<Rectangle> MergedRegions { get; }
    internal MergedRegion Item { get; }
    public MergeCellsImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    internal int get_MergeCount();
    internal HashSet`1<Rectangle> get_MergedRegions();
    private void FindParents();
    internal MergedRegion get_Item(Rectangle rect);
    public IList`1<ExtendedFormatImpl> GetMergedExtendedFormats();
    [CLSCompliantAttribute("False")]
public ExtendedFormatImpl GetFormat(MergedRegion region);
    public void AddMerge(RangeImpl range, ExcelMergeOperation operation);
    private void AddMerge(MergedRegion region, ExcelMergeOperation operation);
    public void AddMerge(int RowFrom, int RowTo, int ColFrom, int ColTo, ExcelMergeOperation operation);
    private void CombineMerge(Rectangle range);
    public void DeleteMerge(Rectangle range);
    internal void RemoveMergedRegionInMergedRegionCollection(Rectangle rectangle);
    internal void AddMergedRegionToMergedRegionCollection(Rectangle rectangle);
    public void Clear();
    [CLSCompliantAttribute("False")]
public void AddMerge(MergeCellsRecord mergeRecord);
    public void Parse();
    public void RemoveRow(int iRowIndex);
    public void RemoveRow(int rowIndex, int count);
    public void InsertRow(int iRowIndex, int iRowCount);
    public void RemoveColumn(int iColumnIndex);
    public void RemoveColumn(int index, int count);
    public void InsertColumn(int iColumnIndex);
    public void InsertColumn(int iColumnIndex, int iColumnCount);
    protected void InsertRemoveRow(int iRowIndex, bool isRemove, int iRowCount);
    protected void InsertRemoveColumn(int iColumnIndex, bool isRemove, int iCount);
    public void CopyMoveMerges(IRange destination, IRange source, bool bIsMove);
    internal void CopyMerges(IRange destination, IRange source, List`1<MergedRegion> lstRegions, int iRowDelta, int iColumnDelta);
    [CLSCompliantAttribute("False")]
public List`1<MergedRegion> FindMergesToCopyMove(IRange range, bool bIsMove);
    [CLSCompliantAttribute("False")]
public void CacheMerges(IRange range, List`1<MergedRegion> lstRegions);
    [CLSCompliantAttribute("False")]
internal void CacheMerges(Rectangle range, List`1<MergedRegion> lstRegions);
    private static void CheckRegion(MergedRegion region, IRange range);
    private void RemoveCache(List`1<MergedRegion> lstRegions);
    [CLSCompliantAttribute("False")]
public void AddCache(List`1<MergedRegion> lstRegions, int iRowDelta, int iColDelta);
    public void AddMerges(IDictionary dictMerges, int iRowDelta, int iColumnDelta);
    public Rectangle GetLeftTopCell(Rectangle rect);
    public sealed virtual object Clone(object parent);
    private HashSet`1<Rectangle> CloneList(HashSet`1<Rectangle> list);
    public void SetNewDimensions(int newRowCount, int newColumnCount);
    [CLSCompliantAttribute("False")]
public MergedRegion FindMergedRegion(Rectangle rectangle);
    [CLSCompliantAttribute("False")]
public MergedRegion RectangleToMergeRegion(Rectangle rect);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveRowLower(MergedRegion region, bool isRemove, int iRowIndex, int iRowCount, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveRowStart(MergedRegion region, bool isRemove, int iRowCount, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveRowMiddleEnd(MergedRegion region, bool isRemove, int iRowIndex, int iRowCount, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveRowAbove(MergedRegion region, bool isRemove, int iRowCount);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveRow(MergedRegion region, int iRowIndex, bool isRemove, int iRowCount, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveColumnLower(MergedRegion region, bool isRemove, int iColumnIndex, int iCount, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveColumnStart(MergedRegion region, bool isRemove, int iCount, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveColumnMiddleEnd(MergedRegion region, bool isRemove, int iColumnIndex, int iCount, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveColumnAbove(MergedRegion region, bool isRemove, int iCount);
    [CLSCompliantAttribute("False")]
public static MergedRegion InsertRemoveColumn(MergedRegion region, int iColumnIndex, bool isRemove, int iCount, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static int NormalizeRow(int iRowIndex, IWorkbook book);
    [CLSCompliantAttribute("False")]
public static int NormalizeColumn(int iColumnIndex, IWorkbook book);
}
internal class Syncfusion.XlsIO.Implementation.MergedCellInfo : ValueType {
    private TableSpan m_tableSpan;
    private int m_rowSpan;
    private int m_colspan;
    private bool m_isFirst;
    private long m_firstCellIndex;
    internal TableSpan TableSpan { get; internal set; }
    internal int RowSpan { get; internal set; }
    internal int ColSpan { get; internal set; }
    internal bool IsFirst { get; internal set; }
    internal long FirstCellIndex { get; internal set; }
    internal TableSpan get_TableSpan();
    internal void set_TableSpan(TableSpan value);
    internal int get_RowSpan();
    internal void set_RowSpan(int value);
    internal int get_ColSpan();
    internal void set_ColSpan(int value);
    internal bool get_IsFirst();
    internal void set_IsFirst(bool value);
    internal long get_FirstCellIndex();
    internal void set_FirstCellIndex(long value);
    internal MergedCellInfo Clone();
}
public class Syncfusion.XlsIO.Implementation.MetaPropertyImpl : object {
    private string m_value;
    private string m_elementName;
    private string m_displayName;
    private string m_internalName;
    private string m_nameSpaceURI;
    public string Value { get; public set; }
    public string Name { get; public set; }
    internal string ElementName { get; internal set; }
    internal string InternalName { get; internal set; }
    internal string NameSpaceURI { get; internal set; }
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    internal string get_ElementName();
    internal void set_ElementName(string value);
    internal string get_InternalName();
    internal void set_InternalName(string value);
    internal string get_NameSpaceURI();
    internal void set_NameSpaceURI(string value);
}
public class Syncfusion.XlsIO.Implementation.MigrantRangeImpl : RangeImpl {
    private IWorksheet sheet;
    public MigrantRangeImpl(IApplication application, IWorksheet parent);
    public sealed virtual void ResetRowColumn(int iRow, int iColumn);
    public sealed virtual void SetValue(int value);
    public sealed virtual void SetValue(double value);
    public sealed virtual void SetValue(DateTime value);
    public sealed virtual void SetValue(bool value);
    public sealed virtual void SetValue(string value);
}
public class Syncfusion.XlsIO.Implementation.MissingFunctionEventArgs : EventArgs {
    private string m_missingFunctionName;
    private string m_cellLocation;
    public string MissingFunctionName { get; internal set; }
    public string CellLocation { get; internal set; }
    public string get_MissingFunctionName();
    internal void set_MissingFunctionName(string value);
    public string get_CellLocation();
    internal void set_CellLocation(string value);
}
public class Syncfusion.XlsIO.Implementation.MissingFunctionEventHandler : MulticastDelegate {
    public MissingFunctionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MissingFunctionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MissingFunctionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.NameImpl : CommonObject {
    private static string DEF_SHEETNAME_SEPARATER;
    private static string DEF_RANGE_FORMAT;
    public static int DEF_NAME_SHEET_INDEX;
    private static Char[] DEF_VALID_SYMBOL;
    private static string WorkbookScope;
    private NameRecord m_name;
    private WorkbookImpl m_book;
    private WorksheetImpl m_worksheet;
    private int m_index;
    private bool m_bIsDeleted;
    private bool m_bIsNumReference;
    private bool m_bIsMultiReference;
    private bool m_bIsStringReference;
    private bool m_isQueryRange;
    private int m_sheetindex;
    private bool m_isCommon;
    private string m_description;
    internal bool m_isTableNamedRange;
    internal bool m_isTableNamedRangeDeleted;
    internal bool m_isFormulaNamedRange;
    [CompilerGeneratedAttribute]
private NameIndexChangedEventHandler NameIndexChanged;
    internal NameRecord NameRecord { get; }
    internal bool IsDeleted { get; internal set; }
    public int Index { get; }
    private int Syncfusion.XlsIO.IName.Index { get; }
    public string Name { get; public set; }
    public string NameLocal { get; public set; }
    public IRange RefersToRange { get; public set; }
    public string Value { get; public set; }
    public string Description { get; public set; }
    public string ValueR1C1 { get; public set; }
    public string RefersTo { get; public set; }
    public string RefersToR1C1 { get; public set; }
    public bool Visible { get; public set; }
    public bool IsLocal { get; }
    private IWorksheet Syncfusion.XlsIO.IName.Worksheet { get; }
    public bool IsQueryTableRange { get; public set; }
    public int SheetIndex { get; public set; }
    public string Scope { get; }
    public string HtmlString { get; public set; }
    public string Address { get; }
    public string AddressLocal { get; }
    public string AddressGlobal { get; }
    public string AddressGlobalWithoutSheetName { get; }
    public string AddressR1C1 { get; }
    public string AddressR1C1Local { get; }
    public bool Boolean { get; public set; }
    public IBorders Borders { get; }
    public IRange[] Cells { get; }
    public int Column { get; }
    public int ColumnGroupLevel { get; }
    public double ColumnWidth { get; public set; }
    public int Count { get; }
    public DateTime DateTime { get; public set; }
    public string DisplayText { get; }
    public IRange End { get; }
    public IRange EntireColumn { get; }
    public IRange EntireRow { get; }
    public string Error { get; public set; }
    public string Formula { get; public set; }
    public string FormulaArray { get; public set; }
    public string FormulaArrayR1C1 { get; public set; }
    public bool FormulaHidden { get; public set; }
    public DateTime FormulaDateTime { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public bool HasDataValidation { get; }
    public bool HasBoolean { get; }
    public bool HasDateTime { get; }
    public bool HasFormulaBoolValue { get; }
    public bool HasFormulaErrorValue { get; }
    public bool HasFormulaDateTime { get; }
    public bool HasFormulaNumberValue { get; }
    public bool HasFormulaStringValue { get; }
    public bool HasFormula { get; }
    public bool HasFormulaArray { get; }
    public bool HasNumber { get; }
    public bool HasRichText { get; }
    public bool HasString { get; }
    public bool HasStyle { get; }
    public IHyperLinks Hyperlinks { get; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public int IndentLevel { get; public set; }
    public bool IsBlank { get; }
    public bool IsBoolean { get; }
    public bool IsError { get; }
    public bool IsGroupedByColumn { get; }
    public bool IsGroupedByRow { get; }
    public bool IsInitialized { get; }
    public int LastColumn { get; }
    public int LastRow { get; }
    public double Number { get; public set; }
    public string NumberFormat { get; public set; }
    public int Row { get; }
    public int RowGroupLevel { get; }
    public double RowHeight { get; public set; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public IStyle CellStyle { get; public set; }
    public string CellStyleName { get; public set; }
    public string Text { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    private string Syncfusion.XlsIO.IRange.Value { get; private set; }
    public string CalculatedValue { get; }
    public object Value2 { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    private IWorksheet Syncfusion.XlsIO.IRange.Worksheet { get; }
    public IConditionalFormats ConditionalFormats { get; }
    public IDataValidation DataValidation { get; }
    public string FormulaStringValue { get; public set; }
    public double FormulaNumberValue { get; public set; }
    public bool FormulaBoolValue { get; public set; }
    public string FormulaErrorValue { get; public set; }
    public ICommentShape Comment { get; }
    public IThreadedComment ThreadedComment { get; }
    public IRichTextString RichText { get; }
    public bool IsMerged { get; }
    public IRange MergeArea { get; }
    public bool WrapText { get; public set; }
    public IRange Item { get; public set; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public bool HasExternalFormula { get; }
    public ExcelIgnoreError IgnoreErrorOptions { get; public set; }
    public Nullable`1<bool> IsStringsPreserved { get; public set; }
    public Nullable`1<BuiltInStyles> BuiltInStyle { get; public set; }
    [CLSCompliantAttribute("False")]
public NameRecord Record { get; }
    public WorksheetImpl Worksheet { get; }
    public WorkbookImpl Workbook { get; }
    public bool IsExternName { get; }
    [CLSCompliantAttribute("False")]
public MergedRegion Region { get; public set; }
    public bool IsBuiltIn { get; public set; }
    public int NameIndexChangedHandlersCount { get; }
    public bool IsFunction { get; public set; }
    internal bool IsNumReference { get; internal set; }
    internal bool IsStringReference { get; internal set; }
    internal bool IsMultiReference { get; internal set; }
    internal bool IsCommon { get; internal set; }
    public int CellsCount { get; }
    public string AddressGlobal2007 { get; }
    public string WorksheetName { get; }
    public NameImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public NameImpl(IApplication application, object parent, NameRecord name, int index);
    [CLSCompliantAttribute("False")]
public NameImpl(IApplication application, object parent, NameRecord name);
    public NameImpl(IApplication application, object parent, string name, IRange range, int index);
    public NameImpl(IApplication application, object parent, string name, int index);
    public NameImpl(IApplication application, object parent, string name, int index, bool bIsLocal);
    public NameImpl(IApplication application, object parent, string name, IRange range, int index, bool bIsLocal);
    private static NameImpl();
    private void SetIndexOrGlobal(bool bIsLocal);
    internal NameRecord get_NameRecord();
    internal bool get_IsDeleted();
    internal void set_IsDeleted(bool value);
    public int get_Index();
    private sealed virtual override int Syncfusion.XlsIO.IName.get_Index();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_NameLocal();
    public sealed virtual void set_NameLocal(string value);
    public sealed virtual IRange get_RefersToRange();
    public sealed virtual void set_RefersToRange(IRange value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual string get_ValueR1C1();
    public void set_ValueR1C1(string value);
    public sealed virtual string get_RefersTo();
    public void set_RefersTo(string value);
    public sealed virtual string get_RefersToR1C1();
    public void set_RefersToR1C1(string value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual bool get_IsLocal();
    private sealed virtual override IWorksheet Syncfusion.XlsIO.IName.get_Worksheet();
    public bool get_IsQueryTableRange();
    public void set_IsQueryTableRange(bool value);
    public int get_SheetIndex();
    public void set_SheetIndex(int value);
    public sealed virtual string get_Scope();
    public sealed virtual string get_HtmlString();
    public sealed virtual void set_HtmlString(string value);
    public sealed virtual string get_Address();
    public sealed virtual string get_AddressLocal();
    public sealed virtual string get_AddressGlobal();
    public string get_AddressGlobalWithoutSheetName();
    public sealed virtual string get_AddressR1C1();
    public sealed virtual string get_AddressR1C1Local();
    public sealed virtual bool get_Boolean();
    public sealed virtual void set_Boolean(bool value);
    public sealed virtual IBorders get_Borders();
    public sealed virtual IRange[] get_Cells();
    public sealed virtual int get_Column();
    public sealed virtual int get_ColumnGroupLevel();
    public sealed virtual double get_ColumnWidth();
    public sealed virtual void set_ColumnWidth(double value);
    public sealed virtual int get_Count();
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    public sealed virtual string get_DisplayText();
    public sealed virtual IRange get_End();
    public sealed virtual IRange get_EntireColumn();
    public sealed virtual IRange get_EntireRow();
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual string get_Formula();
    public sealed virtual void set_Formula(string value);
    public sealed virtual string get_FormulaArray();
    public sealed virtual void set_FormulaArray(string value);
    public sealed virtual string get_FormulaArrayR1C1();
    public sealed virtual void set_FormulaArrayR1C1(string value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual DateTime get_FormulaDateTime();
    public sealed virtual void set_FormulaDateTime(DateTime value);
    public sealed virtual string get_FormulaR1C1();
    public sealed virtual void set_FormulaR1C1(string value);
    public sealed virtual bool get_HasDataValidation();
    public sealed virtual bool get_HasBoolean();
    public sealed virtual bool get_HasDateTime();
    public sealed virtual bool get_HasFormulaBoolValue();
    public sealed virtual bool get_HasFormulaErrorValue();
    public sealed virtual bool get_HasFormulaDateTime();
    public sealed virtual bool get_HasFormulaNumberValue();
    public sealed virtual bool get_HasFormulaStringValue();
    public sealed virtual bool get_HasFormula();
    public sealed virtual bool get_HasFormulaArray();
    public sealed virtual bool get_HasNumber();
    public sealed virtual bool get_HasRichText();
    public sealed virtual bool get_HasString();
    public sealed virtual bool get_HasStyle();
    public sealed virtual IHyperLinks get_Hyperlinks();
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_IsBlank();
    public sealed virtual bool get_IsBoolean();
    public sealed virtual bool get_IsError();
    public sealed virtual bool get_IsGroupedByColumn();
    public sealed virtual bool get_IsGroupedByRow();
    public sealed virtual bool get_IsInitialized();
    public sealed virtual int get_LastColumn();
    public sealed virtual int get_LastRow();
    public sealed virtual double get_Number();
    public sealed virtual void set_Number(double value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual int get_Row();
    public sealed virtual int get_RowGroupLevel();
    public sealed virtual double get_RowHeight();
    public sealed virtual void set_RowHeight(double value);
    public sealed virtual IRange[] get_Rows();
    public sealed virtual IRange[] get_Columns();
    public sealed virtual IStyle get_CellStyle();
    public sealed virtual void set_CellStyle(IStyle value);
    public sealed virtual string get_CellStyleName();
    public sealed virtual void set_CellStyleName(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual TimeSpan get_TimeSpan();
    public sealed virtual void set_TimeSpan(TimeSpan value);
    private sealed virtual override string Syncfusion.XlsIO.IRange.get_Value();
    private sealed virtual override void Syncfusion.XlsIO.IRange.set_Value(string value);
    public sealed virtual string get_CalculatedValue();
    public sealed virtual object get_Value2();
    public sealed virtual void set_Value2(object value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    private sealed virtual override IWorksheet Syncfusion.XlsIO.IRange.get_Worksheet();
    public sealed virtual IConditionalFormats get_ConditionalFormats();
    public sealed virtual IDataValidation get_DataValidation();
    public sealed virtual string get_FormulaStringValue();
    public sealed virtual void set_FormulaStringValue(string value);
    public sealed virtual double get_FormulaNumberValue();
    public sealed virtual void set_FormulaNumberValue(double value);
    public sealed virtual bool get_FormulaBoolValue();
    public sealed virtual void set_FormulaBoolValue(bool value);
    public sealed virtual string get_FormulaErrorValue();
    public sealed virtual void set_FormulaErrorValue(string value);
    public sealed virtual ICommentShape get_Comment();
    public sealed virtual IThreadedComment get_ThreadedComment();
    public sealed virtual IRichTextString get_RichText();
    public sealed virtual bool get_IsMerged();
    public sealed virtual IRange get_MergeArea();
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual void set_Item(int row, int column, IRange value);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual bool get_HasExternalFormula();
    public sealed virtual ExcelIgnoreError get_IgnoreErrorOptions();
    public sealed virtual void set_IgnoreErrorOptions(ExcelIgnoreError value);
    public sealed virtual Nullable`1<bool> get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(Nullable`1<bool> value);
    public sealed virtual Nullable`1<BuiltInStyles> get_BuiltInStyle();
    public sealed virtual void set_BuiltInStyle(Nullable`1<BuiltInStyles> value);
    public void CopyToClipboard();
    public sealed virtual IRange Offset(int row, int column);
    public sealed virtual IRange Resize(int row, int column);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public sealed virtual ICommentShape AddComment();
    public sealed virtual IThreadedComment AddThreadedComment(string text, DateTime creationTime);
    public sealed virtual IThreadedComment AddThreadedComment(string text, string author, DateTime creationTime);
    public sealed virtual void AutofitColumns();
    public sealed virtual void AutofitRows();
    public sealed virtual IRange MergeWith(IRange range);
    public sealed virtual IRange IntersectWith(IRange range);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options);
    public sealed virtual IRange CopyTo(IRange destination, bool pasteLink);
    public sealed virtual IRange CopyTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options, bool skipBlank);
    public sealed virtual void MoveTo(IRange destination);
    public sealed virtual void Clear(ExcelMoveDirection direction, ExcelCopyRangeOptions options);
    public sealed virtual void Clear(ExcelClearOptions option);
    public sealed virtual void Clear(ExcelMoveDirection direction);
    public sealed virtual void Clear(bool isClearFormat);
    public sealed virtual void Clear();
    public sealed virtual void FreezePanes();
    public sealed virtual void UnMerge();
    public sealed virtual IRange Ungroup(ExcelGroupBy groupBy);
    public sealed virtual double Sum();
    public sealed virtual double Sum(bool considerDateAsNumber);
    public sealed virtual double Average();
    public sealed virtual double Average(bool considerDateAsNumber);
    public sealed virtual double Min();
    public sealed virtual double Min(bool considerDateAsNumber);
    public sealed virtual double Max();
    public sealed virtual double Max(bool considerDateAsNumber);
    public sealed virtual IRange Trim();
    public sealed virtual void Merge();
    public sealed virtual void Merge(bool clearCells);
    public sealed virtual IRange Group(ExcelGroupBy groupBy, bool bCollapsed);
    public sealed virtual IRange Group(ExcelGroupBy groupBy);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual void SubTotal(Int32[] groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual IRange Activate();
    public sealed virtual IRange Activate(bool scroll);
    public sealed virtual void BorderAround();
    public sealed virtual void BorderAround(ExcelLineStyle borderLine);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderInside();
    public sealed virtual void BorderInside(ExcelLineStyle borderLine);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderNone();
    public sealed virtual void CollapseGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy, ExpandCollapseFlags flags);
    public sealed virtual IRange[] GetDependents();
    public sealed virtual IRange[] GetDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetPrecedents();
    public sealed virtual IRange[] GetPrecedents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectDependents();
    public sealed virtual IRange[] GetDirectDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectPrecedents();
    public sealed virtual IRange[] GetDirectPrecedents(bool isEntireWorkbook);
    public NameRecord get_Record();
    public WorksheetImpl get_Worksheet();
    public WorkbookImpl get_Workbook();
    public bool get_IsExternName();
    public MergedRegion get_Region();
    public void set_Region(MergedRegion value);
    public bool get_IsBuiltIn();
    public void set_IsBuiltIn(bool value);
    public int get_NameIndexChangedHandlersCount();
    public bool get_IsFunction();
    public void set_IsFunction(bool value);
    internal bool get_IsNumReference();
    internal void set_IsNumReference(bool value);
    internal bool get_IsStringReference();
    internal void set_IsStringReference(bool value);
    internal bool get_IsMultiReference();
    internal void set_IsMultiReference(bool value);
    internal bool get_IsCommon();
    internal void set_IsCommon(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NameIndexChanged(NameIndexChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NameIndexChanged(NameIndexChangedEventHandler value);
    public sealed virtual void Delete();
    private void SetParents();
    [CLSCompliantAttribute("False")]
public void Parse(NameRecord name);
    private void OnValueChanged(string oldValue, string newValue, bool useR1C1, bool isFormula);
    public void SetValue(Ptg[] parsedExpression);
    private void RaiseNameIndexChangedEvent(NameIndexChangedEventArgs e);
    private bool IsValidName(string str);
    private void SetValue(string strValue, bool useR1C1);
    public void ConvertFullRowColumnName(ExcelVersion version);
    public string GetValue(FormulaUtil formulaUtil);
    public void SetIndex(int index);
    public void SetIndex(int index, bool bRaiseEvent);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void SetSheetIndex(int iSheetIndex);
    private void ReplaceName(Dictionary`2<string, IName> namesCollection, string oldName, string newName);
    private sealed virtual override void Syncfusion.XlsIO.Interfaces.IParseable.Parse();
    public sealed virtual Ptg[] GetNativePtg();
    public sealed virtual object Clone(object parent);
    public sealed virtual IEnumerator`1<IRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual string GetNewAddress(Dictionary`2<string, string> names, String& strSheetName);
    public sealed virtual IRange Clone(object parent, Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
    public sealed virtual void ClearConditionalFormats();
    public sealed virtual Rectangle[] GetRectangles();
    public sealed virtual int GetRectanglesCount();
    public sealed virtual int get_CellsCount();
    public sealed virtual string get_AddressGlobal2007();
    public sealed virtual string get_WorksheetName();
    internal void ClearAll();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class Syncfusion.XlsIO.Implementation.NameIndexChangedEventArgs : EventArgs {
    private int m_OldIndex;
    private int m_NewIndex;
    public int NewIndex { get; }
    public int OldIndex { get; }
    public NameIndexChangedEventArgs(int oldIndex, int newIndex);
    public int get_NewIndex();
    public int get_OldIndex();
}
internal class Syncfusion.XlsIO.Implementation.ObjectInfoStream : DataStructure {
    private static int DEF_STRUCT_SIZE;
    private Byte[] m_dataBytes;
    internal int Length { get; }
    internal ObjectInfoStream(Stream stream);
    internal virtual int get_Length();
    internal virtual void Parse(Byte[] arrData, int iOffset);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal void SaveTo(Stream stream, OleLinkType linkType, OleObjectType oleType);
}
public class Syncfusion.XlsIO.Implementation.ODBCConnection : DataBaseProperty {
    private ExternalConnection m_connection;
    public ODBCConnection(ExternalConnection connection);
}
public class Syncfusion.XlsIO.Implementation.OLEDBConnection : DataBaseProperty {
    private ExternalConnection m_connection;
    public object ConnectionString { get; public set; }
    public OLEDBConnection(ExternalConnection connection);
    public virtual object get_ConnectionString();
    public virtual void set_ConnectionString(object value);
}
public class Syncfusion.XlsIO.Implementation.OleObject : object {
    private static string DEF_OBJECT_POOL_NAME;
    private static string DEF_OLE_STREAM_NAME;
    private static string DEF_INFO_STREAM_NAME;
    private static string DEF_COMP_STREAM_NAME;
    private static string DEF_NATIVE_STREAM_NAME;
    private static string DEF_CONTENT_STREAM_NAME;
    private static string DEF_WP_STREAM_NAME;
    private static string DEF_LINK_INFO_STREAM_NAME;
    private static string DEF_PRINT_STREAM_NAME;
    private static string DEF_OLE_PRES000_NAME;
    private static string DEF_END_INFO_MARKER;
    private static string DEF_EQUATION_STREAM_NAME;
    private static string DEF_WORKBOOK_STREAM_NAME;
    private static string DEF_PACKAGE_STREAM_NAME;
    private static string DEF_PPT_STREAM_NAME;
    private static string DEF_WORD_STREAM_NAME;
    private static string DEF_VISIO_STREAM_NAME;
    private static string DEF_ODP_STREAM_NAME;
    private static string DEF_OOPACKAGE_STREAM_NAME;
    private static string DEF_SUMMARY_STREAM_NAME;
    private static string DEF_DOC_SUMMARY_STREAM_NAME;
    private static int DEF_STRUCT_SIZE;
    private bool m_isIcon;
    private DVAspect m_dvAspect;
    private ShapeImpl m_shape;
    private string m_shapeRId;
    private string m_fallbackShapeId;
    private string m_defaultSizeValue;
    private string m_moveWithCellsValue;
    private string m_sizeWithCellsValue;
    private string m_objectPrRelationId;
    private OleLinkType m_oleLinkType;
    private bool m_isStream;
    private WorksheetImpl m_sheet;
    private string m_strContentType;
    private string m_strRelationType;
    private OleObjectType m_oleObjectType;
    private string m_storageName;
    private string m_objectType;
    private string m_oleFileName;
    private string m_fileName;
    private static Random m_oleRandomIdGen;
    private Storage m_storage;
    private Guid m_guid;
    internal string FallbackShapeId { get; internal set; }
    internal string DefaultSizeValue { get; internal set; }
    internal string MoveWithCellsValue { get; internal set; }
    internal string SizeWithCellsValue { get; internal set; }
    internal string ObjectPrRelationId { get; internal set; }
    public IRange Location { get; public set; }
    public Size Size { get; public set; }
    public Image Picture { get; public set; }
    public bool DisplayAsIcon { get; public set; }
    internal OleLinkType OleType { get; internal set; }
    internal bool IsStream { get; internal set; }
    public WorksheetImpl OleSheet { get; }
    internal Guid Guid { get; internal set; }
    internal Storage Storage { get; }
    internal static int NextOleObjId { get; }
    internal string FileName { get; internal set; }
    internal string StorageName { get; internal set; }
    internal OleObjectType OleObjectType { get; internal set; }
    internal DVAspect DvAspect { get; internal set; }
    internal int ShapeID { get; internal set; }
    internal string ShapeRId { get; internal set; }
    public IPictureShape Shape { get; public set; }
    public string Name { get; }
    internal string ContentType { get; internal set; }
    internal string RelationType { get; internal set; }
    public OleObject(WorksheetImpl sheet);
    internal OleObject(string filePath, WorksheetImpl sheet, OleLinkType oleLinkType);
    internal string get_FallbackShapeId();
    internal void set_FallbackShapeId(string value);
    internal string get_DefaultSizeValue();
    internal void set_DefaultSizeValue(string value);
    internal string get_MoveWithCellsValue();
    internal void set_MoveWithCellsValue(string value);
    internal string get_SizeWithCellsValue();
    internal void set_SizeWithCellsValue(string value);
    internal string get_ObjectPrRelationId();
    internal void set_ObjectPrRelationId(string value);
    public sealed virtual IRange get_Location();
    public sealed virtual void set_Location(IRange value);
    public sealed virtual Size get_Size();
    public sealed virtual void set_Size(Size value);
    public sealed virtual Image get_Picture();
    public void set_Picture(Image value);
    public sealed virtual bool get_DisplayAsIcon();
    public sealed virtual void set_DisplayAsIcon(bool value);
    internal OleLinkType get_OleType();
    internal void set_OleType(OleLinkType value);
    internal bool get_IsStream();
    internal void set_IsStream(bool value);
    public WorksheetImpl get_OleSheet();
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal Storage get_Storage();
    internal static int get_NextOleObjId();
    internal string get_FileName();
    internal void set_FileName(string value);
    internal string get_StorageName();
    internal void set_StorageName(string value);
    internal OleObjectType get_OleObjectType();
    internal void set_OleObjectType(OleObjectType value);
    internal DVAspect get_DvAspect();
    internal void set_DvAspect(DVAspect value);
    internal int get_ShapeID();
    internal void set_ShapeID(int value);
    internal string get_ShapeRId();
    internal void set_ShapeRId(string value);
    public sealed virtual IPictureShape get_Shape();
    public void set_Shape(IPictureShape value);
    public sealed virtual string get_Name();
    internal string get_ContentType();
    internal void set_ContentType(string value);
    internal string get_RelationType();
    internal void set_RelationType(string value);
    internal void Save(Stream stream, OleObject oleObject);
    internal void Save(Byte[] nativeData, string dataPath, OleObject oleObject);
    private void WriteNativeData(Byte[] nativeData, string dataPath, OleObjectType objType);
    private void WriteNativeData(Byte[] nativeData, string streamName);
    private void WritePBrush(Byte[] nativeData);
    private void WriteNativeStreams(Stream stream);
    private void WriteCompObjStream(OleObjectType objType);
    private void WriteLinkInfoStream(OleObjectType objType, string dataPath);
    private void WriteOleStream(OleLinkType linkType, OleObjectType objType, string dataPath);
    private void WriteObjInfoStream(OleLinkType linkType, OleObjectType objType);
    private void WritePackage(Byte[] nativeData, string dataPath);
    internal void UpdateOleContentType(string type);
    internal void ParseOlePartStream(Stream stream);
    private void ParseStreams(ICompoundStorage storage);
    internal void ParseOleStream(Stream stream);
    private void CheckObjectInfoStream();
    internal void CreateOleObjContainer(Byte[] nativeData, string dataPath);
    public sealed virtual Stream GetEmbeddedOleStream();
    private bool IsNativeItem();
    internal void UpdateGuid(CompoundFile cmpFile, int index);
    internal void SetOlePicture(IShape picture);
    internal void SetLinkType(OleLinkType type);
    private void UpdateOleObjInfoStream();
    private Byte[] UpdateObjInfoBytes();
    public int GetWorkbookIndex();
}
public class Syncfusion.XlsIO.Implementation.OleObjects : List`1<IOleObject> {
    private string m_choiceRequries;
    private WorksheetImpl m_sheet;
    internal string Requries { get; internal set; }
    public OleObjects(WorksheetImpl sheet);
    internal string get_Requries();
    internal void set_Requries(string value);
    public sealed virtual IOleObject Add(Stream oleStream, Image image, OleObjectType type);
    public sealed virtual IOleObject Add(Stream oleStream, Image image, string fileExtension);
    public sealed virtual IOleObject AddLink(string filePath, Image image);
    private ExternWorkbookImpl CreateExternalLink(string fileName);
    internal static void SetOleObject(OleObject ole);
}
internal class Syncfusion.XlsIO.Implementation.OleStream : DataStructure {
    private static int DEF_VERSION_CONSTANT;
    private static int DEF_RESERVED_VALUE;
    private static int DEF_EMBEDDED_SIZE;
    private static int DEF_CLSID_INDICATOR;
    private static int DEF_EMBED_FLAG;
    private static int DEF_LINK_FLAG;
    private int m_streamLeng;
    private int m_oleVersion;
    private int m_flags;
    private int m_linkUpdateOption;
    private int m_reserved1;
    private int m_reservedMonikerStreamSize;
    private MonokerStream m_reservedMonikerStream;
    private int m_relativeSourceMonikerStreamSize;
    private MonokerStream m_relativeSourceMonikerStream;
    private int m_absoluteSourceMonikerStreamSize;
    private MonokerStream m_absoluteSourceMonikerStream;
    private int m_clsidIndicator;
    private CLSID m_clsid;
    private int m_reservedDisplayName;
    private int m_reserved2;
    private int m_localUpdateTime;
    private int m_localCheckUpdateTime;
    private int m_remoteUpdateTime;
    private OleLinkType m_linkType;
    private string m_filePath;
    internal int Length { get; }
    internal OleStream(Stream stream);
    internal OleStream(OleLinkType type, string filePath);
    internal virtual int get_Length();
    internal virtual void Parse(Byte[] arrData, int iOffset);
    internal virtual int Save(Byte[] arrData, int iOffset);
    internal void SaveTo(Stream stream);
}
internal class Syncfusion.XlsIO.Implementation.OleTypeConvertor : object {
    internal static string OleType;
    private static int m_fileid;
    internal static List`1<string> files;
    private static OleTypeConvertor();
    internal static OleObjectType ToOleType(string oleTypeStr);
    internal static string ToOleString(OleObjectType oleType);
    internal static Guid GetGUID();
    internal static Guid GetGUID(OleObjectType type);
    internal static string GetOleFileName();
    internal static int GetNextFileId();
    internal static void Add(string fileName);
}
public class Syncfusion.XlsIO.Implementation.OutlineWrapper : CommonWrapper {
    private int m_firstIndex;
    private int m_lastIndex;
    private IOutline m_outline;
    private IRange m_outlineRange;
    private ExcelGroupBy m_groupBy;
    private ushort m_outlineLevel;
    private bool m_bIsCollapsed;
    private bool m_bIsHidden;
    private ushort m_formatIndex;
    private ushort m_index;
    public int FirstIndex { get; public set; }
    public int LastIndex { get; public set; }
    public IOutline Outline { get; public set; }
    public ushort Index { get; public set; }
    public IRange OutlineRange { get; public set; }
    public ExcelGroupBy GroupBy { get; public set; }
    public ushort ExtendedFormatIndex { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsCollapsed { get; public set; }
    public ushort OutlineLevel { get; public set; }
    public sealed virtual int get_FirstIndex();
    public sealed virtual void set_FirstIndex(int value);
    public sealed virtual int get_LastIndex();
    public sealed virtual void set_LastIndex(int value);
    public sealed virtual IOutline get_Outline();
    public sealed virtual void set_Outline(IOutline value);
    public sealed virtual ushort get_Index();
    public sealed virtual void set_Index(ushort value);
    public sealed virtual IRange get_OutlineRange();
    public sealed virtual void set_OutlineRange(IRange value);
    public sealed virtual ExcelGroupBy get_GroupBy();
    public sealed virtual void set_GroupBy(ExcelGroupBy value);
    public sealed virtual ushort get_ExtendedFormatIndex();
    public sealed virtual void set_ExtendedFormatIndex(ushort value);
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    public sealed virtual bool get_IsCollapsed();
    public sealed virtual void set_IsCollapsed(bool value);
    public sealed virtual ushort get_OutlineLevel();
    public sealed virtual void set_OutlineLevel(ushort value);
}
public class Syncfusion.XlsIO.Implementation.OutlineWrapperUtility : object {
    private Dictionary`2<int, List`1<Point>> m_outlineLevels;
    private bool m_bIsLevelInOrder;
    public Dictionary`2<int, List`1<Point>> OutlineLevels { get; public set; }
    public Dictionary`2<int, List`1<Point>> get_OutlineLevels();
    public void set_OutlineLevels(Dictionary`2<int, List`1<Point>> value);
    public void AddRowLevel(WorksheetImpl sheet, int firstRow, int lastRow, int rowlevel, bool isParse);
    internal void AddRowLevel(WorksheetImpl sheet, int firstRow, int lastRow, int rowlevel, bool isParse, bool isImport);
    public void SubRowLevel(WorksheetImpl sheet, int firstRow, int lastRow, int rowLevel);
    public void SubColumnLevel(WorksheetImpl sheet, int firstRow, int lastRow, int columnLevel);
    public void AddColumnLevel(WorksheetImpl sheet, int columnLevel, int firstColumn, int lastColumn, bool isParse);
    internal void AddColumnLevel(WorksheetImpl sheet, int columnLevel, int firstColumn, int lastColumn, bool isParse, bool isImport);
    internal void InsertGroup(List`1<GroupPoint> outlineLevel, int first, GroupPoint newLevel, bool isImport);
}
internal class Syncfusion.XlsIO.Implementation.Page : object {
    private bool m_bIsEvenPage;
    private bool m_bIsFirstPage;
    private WorksheetBaseImpl m_sheet;
    private PageSetupBaseImpl m_pageSetupBase;
    private int m_headerStringLimit;
    private int m_footerStringLimit;
    [CLSCompliantAttribute("False")]
private String[] m_arrHeaders;
    [CLSCompliantAttribute("False")]
private String[] m_arrFooters;
    private String[] DEF_HEADER_NAMES;
    private String[] DEF_FOOTER_NAMES;
    private Regex m_regex;
    internal bool IsEvenPage { get; internal set; }
    internal bool IsFirstPage { get; internal set; }
    public string LeftHeader { get; public set; }
    public string LeftFooter { get; public set; }
    public string CenterHeader { get; public set; }
    public string CenterFooter { get; public set; }
    public string RightHeader { get; public set; }
    public string RightFooter { get; public set; }
    public Image LeftHeaderImage { get; public set; }
    public Image LeftFooterImage { get; public set; }
    public Image CenterHeaderImage { get; public set; }
    public Image CenterFooterImage { get; public set; }
    public Image RightHeaderImage { get; public set; }
    public Image RightFooterImage { get; public set; }
    internal string FullHeaderString { get; internal set; }
    internal string FullFooterString { get; internal set; }
    internal Page(PageSetupBaseImpl pageSetupBase);
    private void SetChanged();
    internal bool get_IsEvenPage();
    internal void set_IsEvenPage(bool value);
    internal bool get_IsFirstPage();
    internal void set_IsFirstPage(bool value);
    public sealed virtual string get_LeftHeader();
    public sealed virtual void set_LeftHeader(string value);
    public sealed virtual string get_LeftFooter();
    public sealed virtual void set_LeftFooter(string value);
    public sealed virtual string get_CenterHeader();
    public sealed virtual void set_CenterHeader(string value);
    public sealed virtual string get_CenterFooter();
    public sealed virtual void set_CenterFooter(string value);
    public sealed virtual string get_RightHeader();
    public sealed virtual void set_RightHeader(string value);
    public sealed virtual string get_RightFooter();
    public sealed virtual void set_RightFooter(string value);
    public sealed virtual Image get_LeftHeaderImage();
    public sealed virtual void set_LeftHeaderImage(Image value);
    public sealed virtual Image get_LeftFooterImage();
    public sealed virtual void set_LeftFooterImage(Image value);
    public sealed virtual Image get_CenterHeaderImage();
    public sealed virtual void set_CenterHeaderImage(Image value);
    public sealed virtual Image get_CenterFooterImage();
    public sealed virtual void set_CenterFooterImage(Image value);
    public sealed virtual Image get_RightHeaderImage();
    public sealed virtual void set_RightHeaderImage(Image value);
    public sealed virtual Image get_RightFooterImage();
    public sealed virtual void set_RightFooterImage(Image value);
    internal string get_FullHeaderString();
    internal void set_FullHeaderString(string value);
    internal string get_FullFooterString();
    internal void set_FullFooterString(string value);
    internal Page Clone(PageSetupBaseImpl pageSetupBase);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.PageSetupBaseImpl : CommonObject {
    public static double DEFAULT_TOPMARGIN;
    public static double DEFAULT_BOTTOMMARGIN;
    public static double DEFAULT_LEFTMARGIN;
    public static double DEFAULT_RIGHTMARGIN;
    private static double DEFAULT_TOPMARGIN_XML;
    private static double DEFAULT_BOTTOMMARGIN_XML;
    private static double DEFAULT_LEFTMARGIN_XML;
    private static double DEFAULT_RIGHTMARGIN_XML;
    private static double DEFAULT_HEADERMARGIN_XML;
    private static double DEFAULT_FOOTERMARGIN_XML;
    protected bool m_bHCenter;
    protected bool m_bVCenter;
    [CLSCompliantAttribute("False")]
protected PrinterSettingsRecord m_unknown;
    [CLSCompliantAttribute("False")]
protected PrintSetupRecord m_setup;
    [CLSCompliantAttribute("False")]
protected double m_dBottomMargin;
    [CLSCompliantAttribute("False")]
protected double m_dLeftMargin;
    [CLSCompliantAttribute("False")]
protected double m_dRightMargin;
    [CLSCompliantAttribute("False")]
protected double m_dTopMargin;
    [CLSCompliantAttribute("False")]
protected String[] m_arrHeaders;
    [CLSCompliantAttribute("False")]
protected String[] m_arrFooters;
    private WorksheetBaseImpl m_sheet;
    [CLSCompliantAttribute("False")]
protected BitmapRecord m_backgroundImage;
    private bool m_bFitToPage;
    internal Dictionary`2<ExcelPaperSize, double> dictPaperWidth;
    internal Dictionary`2<ExcelPaperSize, double> dictPaperHeight;
    [CLSCompliantAttribute("False")]
protected HeaderAndFooterRecord m_headerFooter;
    private Page m_evenPage;
    private Page m_oddPage;
    private Page m_firstPage;
    public bool IsFitToPage { get; public set; }
    public int FitToPagesTall { get; public set; }
    public int FitToPagesWide { get; public set; }
    public bool IsNotValidSettings { get; internal set; }
    public bool AutoFirstPageNumber { get; public set; }
    public bool BlackAndWhite { get; public set; }
    public double BottomMargin { get; public set; }
    public string CenterFooter { get; public set; }
    public Image CenterFooterImage { get; public set; }
    public Image CenterHeaderImage { get; public set; }
    public string CenterHeader { get; public set; }
    public bool CenterHorizontally { get; public set; }
    public bool CenterVertically { get; public set; }
    public int Copies { get; public set; }
    public bool Draft { get; public set; }
    public short FirstPageNumber { get; public set; }
    public double FooterMargin { get; public set; }
    public double HeaderMargin { get; public set; }
    public string LeftFooter { get; public set; }
    public string LeftHeader { get; public set; }
    public Image LeftFooterImage { get; public set; }
    public Image LeftHeaderImage { get; public set; }
    public double LeftMargin { get; public set; }
    public ExcelOrder Order { get; public set; }
    public ExcelPageOrientation Orientation { get; public set; }
    public ExcelPaperSize PaperSize { get; public set; }
    public ExcelPrintLocation PrintComments { get; public set; }
    public ExcelPrintErrors PrintErrors { get; public set; }
    public bool PrintNotes { get; public set; }
    public int PrintQuality { get; public set; }
    public string RightFooter { get; public set; }
    public Image RightFooterImage { get; public set; }
    public string RightHeader { get; public set; }
    public Image RightHeaderImage { get; public set; }
    public double RightMargin { get; public set; }
    public double TopMargin { get; public set; }
    public int Zoom { get; public set; }
    public Image BackgoundImage { get; public set; }
    public double PageWidth { get; }
    public double PageHeight { get; }
    public int HResolution { get; public set; }
    public int VResolution { get; public set; }
    public IPage EvenPage { get; }
    internal IPage OddPage { get; }
    public IPage FirstPage { get; }
    public string FullHeaderString { get; public set; }
    public string FullFooterString { get; public set; }
    public bool AlignHFWithPageMargins { get; public set; }
    public bool DifferentFirstPageHF { get; public set; }
    public bool DifferentOddAndEvenPagesHF { get; public set; }
    public bool HFScaleWithDoc { get; public set; }
    internal string FullEvenHeaderString { get; internal set; }
    internal string FullEvenFooterString { get; internal set; }
    internal string FullFirstHeaderString { get; internal set; }
    internal string FullFirstFooterString { get; internal set; }
    public TBIFFRecord TypeCode { get; }
    public int RecordCode { get; }
    public bool NeedDataArray { get; }
    public long StreamPos { get; public set; }
    public PageSetupBaseImpl(IApplication application, object parent);
    public virtual bool get_IsFitToPage();
    public virtual void set_IsFitToPage(bool value);
    public sealed virtual int get_FitToPagesTall();
    public sealed virtual void set_FitToPagesTall(int value);
    public sealed virtual int get_FitToPagesWide();
    public sealed virtual void set_FitToPagesWide(int value);
    public bool get_IsNotValidSettings();
    internal void set_IsNotValidSettings(bool value);
    public sealed virtual bool get_AutoFirstPageNumber();
    public sealed virtual void set_AutoFirstPageNumber(bool value);
    public sealed virtual bool get_BlackAndWhite();
    public sealed virtual void set_BlackAndWhite(bool value);
    public sealed virtual double get_BottomMargin();
    public sealed virtual void set_BottomMargin(double value);
    public sealed virtual string get_CenterFooter();
    public sealed virtual void set_CenterFooter(string value);
    public sealed virtual Image get_CenterFooterImage();
    public sealed virtual void set_CenterFooterImage(Image value);
    public sealed virtual Image get_CenterHeaderImage();
    public sealed virtual void set_CenterHeaderImage(Image value);
    public sealed virtual string get_CenterHeader();
    public sealed virtual void set_CenterHeader(string value);
    public sealed virtual bool get_CenterHorizontally();
    public sealed virtual void set_CenterHorizontally(bool value);
    public sealed virtual bool get_CenterVertically();
    public sealed virtual void set_CenterVertically(bool value);
    public sealed virtual int get_Copies();
    public sealed virtual void set_Copies(int value);
    public sealed virtual bool get_Draft();
    public sealed virtual void set_Draft(bool value);
    public sealed virtual short get_FirstPageNumber();
    public sealed virtual void set_FirstPageNumber(short value);
    public sealed virtual double get_FooterMargin();
    public sealed virtual void set_FooterMargin(double value);
    public sealed virtual double get_HeaderMargin();
    public sealed virtual void set_HeaderMargin(double value);
    public sealed virtual string get_LeftFooter();
    public sealed virtual void set_LeftFooter(string value);
    public sealed virtual string get_LeftHeader();
    public sealed virtual void set_LeftHeader(string value);
    public sealed virtual Image get_LeftFooterImage();
    public sealed virtual void set_LeftFooterImage(Image value);
    public sealed virtual Image get_LeftHeaderImage();
    public sealed virtual void set_LeftHeaderImage(Image value);
    public sealed virtual double get_LeftMargin();
    public sealed virtual void set_LeftMargin(double value);
    public sealed virtual ExcelOrder get_Order();
    public sealed virtual void set_Order(ExcelOrder value);
    public sealed virtual ExcelPageOrientation get_Orientation();
    public sealed virtual void set_Orientation(ExcelPageOrientation value);
    public sealed virtual ExcelPaperSize get_PaperSize();
    public sealed virtual void set_PaperSize(ExcelPaperSize value);
    public sealed virtual ExcelPrintLocation get_PrintComments();
    public sealed virtual void set_PrintComments(ExcelPrintLocation value);
    public sealed virtual ExcelPrintErrors get_PrintErrors();
    public sealed virtual void set_PrintErrors(ExcelPrintErrors value);
    public sealed virtual bool get_PrintNotes();
    public sealed virtual void set_PrintNotes(bool value);
    public sealed virtual int get_PrintQuality();
    public sealed virtual void set_PrintQuality(int value);
    public sealed virtual string get_RightFooter();
    public sealed virtual void set_RightFooter(string value);
    public sealed virtual Image get_RightFooterImage();
    public sealed virtual void set_RightFooterImage(Image value);
    public sealed virtual string get_RightHeader();
    public sealed virtual void set_RightHeader(string value);
    public sealed virtual Image get_RightHeaderImage();
    public sealed virtual void set_RightHeaderImage(Image value);
    public sealed virtual double get_RightMargin();
    public sealed virtual void set_RightMargin(double value);
    public sealed virtual double get_TopMargin();
    public sealed virtual void set_TopMargin(double value);
    public sealed virtual int get_Zoom();
    public sealed virtual void set_Zoom(int value);
    public sealed virtual Image get_BackgoundImage();
    public sealed virtual void set_BackgoundImage(Image value);
    public double get_PageWidth();
    public double get_PageHeight();
    public int get_HResolution();
    public void set_HResolution(int value);
    public int get_VResolution();
    public void set_VResolution(int value);
    public sealed virtual IPage get_EvenPage();
    internal IPage get_OddPage();
    public sealed virtual IPage get_FirstPage();
    public string get_FullHeaderString();
    public void set_FullHeaderString(string value);
    public string get_FullFooterString();
    public void set_FullFooterString(string value);
    public sealed virtual bool get_AlignHFWithPageMargins();
    public sealed virtual void set_AlignHFWithPageMargins(bool value);
    public sealed virtual bool get_DifferentFirstPageHF();
    public sealed virtual void set_DifferentFirstPageHF(bool value);
    public sealed virtual bool get_DifferentOddAndEvenPagesHF();
    public sealed virtual void set_DifferentOddAndEvenPagesHF(bool value);
    public sealed virtual bool get_HFScaleWithDoc();
    public sealed virtual void set_HFScaleWithDoc(bool value);
    internal string get_FullEvenHeaderString();
    internal void set_FullEvenHeaderString(string value);
    internal string get_FullEvenFooterString();
    internal void set_FullEvenFooterString(string value);
    internal string get_FullFirstHeaderString();
    internal void set_FullFirstHeaderString(string value);
    internal string get_FullFirstFooterString();
    internal void set_FullFirstFooterString(string value);
    private void FillMaxPaperSize(ApplicationImpl application);
    protected virtual void FindParents();
    protected internal String[] ParseHeaderFooterString(string strToSplit);
    protected internal string CreateHeaderFooterString(String[] parts);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeStartRecords(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeEndRecords(OffsetArrayList records);
    public virtual int Parse(IList`1<BiffRecordRaw> data, int position);
    [CLSCompliantAttribute("False")]
protected virtual bool ParseRecord(BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
protected BiffRecordRaw GetOrCreateRecord(IList data, Int32& pos, TBIFFRecord type);
    [CLSCompliantAttribute("False")]
protected BiffRecordRaw GetRecordUpdatePos(IList data, Int32& pos);
    [CLSCompliantAttribute("False")]
protected BiffRecordRaw GetRecordUpdatePos(IList data, Int32& pos, TBIFFRecord type);
    private void SerializeMargin(OffsetArrayList records, TBIFFRecord code, double marginValue, double defaultValue);
    protected void SetChanged();
    internal PageSetupBaseImpl Clone(object parent);
    public sealed virtual TBIFFRecord get_TypeCode();
    public sealed virtual int get_RecordCode();
    public sealed virtual bool get_NeedDataArray();
    public sealed virtual long get_StreamPos();
    public sealed virtual void set_StreamPos(long value);
    public virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    private int SerializeHeaderFooterString(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, TBIFFRecord code, string value, int streamPosition);
    [CLSCompliantAttribute("False")]
protected int WriteUShortRecord(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, TBIFFRecord code, ushort value, int streamPosition);
    private int FillStreamWithMargin(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, TBIFFRecord code, double value, double defaultValue, int streamPosition);
    protected virtual int FillStreamStart(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    protected virtual int FillStreamEnd(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    public virtual void Dispose();
}
public class Syncfusion.XlsIO.Implementation.PageSetupImpl : PageSetupBaseImpl {
    internal static string DEF_AREA_XlS;
    internal static string DEF_AREA_XlSX;
    internal static string DEF_TITLE_XLS;
    internal static string DEF_TITLE_XLSX;
    private static FormulaToken[] DEF_PRINT_AREA_TOKENS;
    private ushort m_usPrintHeaders;
    private ushort m_usPrintGridlines;
    private ushort m_usGridset;
    private GutsRecord m_Guts;
    private DefaultRowHeightRecord m_DefRowHeight;
    private WSBoolRecord m_WSBool;
    private WorksheetImpl m_worksheet;
    private HPageBreaksCollection m_hPageBreaks;
    private VPageBreaksCollection m_vPageBreaks;
    private string m_strRelationId;
    public bool PrintGridlines { get; public set; }
    public bool PrintHeadings { get; public set; }
    public HPageBreaksCollection HPageBreaks { get; }
    public VPageBreaksCollection VPageBreaks { get; }
    public string PrintArea { get; public set; }
    public string PrintTitleColumns { get; public set; }
    public string PrintTitleRows { get; public set; }
    public bool IsFitToPage { get; public set; }
    public bool IsSummaryRowBelow { get; public set; }
    public bool IsSummaryColumnRight { get; public set; }
    public int DefaultRowHeight { get; public set; }
    public bool DefaultRowHeightFlag { get; public set; }
    public string RelationId { get; public set; }
    public WorksheetImpl Worksheet { get; }
    public PageSetupImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public PageSetupImpl(IApplication application, object parent, BiffReader reader);
    [CLSCompliantAttribute("False")]
public PageSetupImpl(IApplication application, object parent, BiffRecordRaw[] data, int position);
    public PageSetupImpl(IApplication application, object parent, List`1<BiffRecordRaw> data, int position);
    private static PageSetupImpl();
    public sealed virtual bool get_PrintGridlines();
    public sealed virtual void set_PrintGridlines(bool value);
    public sealed virtual bool get_PrintHeadings();
    public sealed virtual void set_PrintHeadings(bool value);
    public HPageBreaksCollection get_HPageBreaks();
    public VPageBreaksCollection get_VPageBreaks();
    public sealed virtual string get_PrintArea();
    public sealed virtual void set_PrintArea(string value);
    public sealed virtual string get_PrintTitleColumns();
    public sealed virtual void set_PrintTitleColumns(string value);
    public sealed virtual string get_PrintTitleRows();
    public sealed virtual void set_PrintTitleRows(string value);
    public virtual bool get_IsFitToPage();
    public virtual void set_IsFitToPage(bool value);
    public sealed virtual bool get_IsSummaryRowBelow();
    public sealed virtual void set_IsSummaryRowBelow(bool value);
    public sealed virtual bool get_IsSummaryColumnRight();
    public sealed virtual void set_IsSummaryColumnRight(bool value);
    public int get_DefaultRowHeight();
    public void set_DefaultRowHeight(int value);
    public bool get_DefaultRowHeightFlag();
    public void set_DefaultRowHeightFlag(bool value);
    private string ConvertNametoRange(string value);
    public virtual int GetStoreSize(ExcelVersion version);
    public string get_RelationId();
    public void set_RelationId(string value);
    public WorksheetImpl get_Worksheet();
    protected virtual void FindParents();
    private void CreateNecessaryRecords();
    [CLSCompliantAttribute("False")]
protected virtual bool ParseRecord(BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
public void Parse(BiffReader reader);
    private void SkipUnknownRecords(IList data, Int32& pos);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeStartRecords(OffsetArrayList records);
    protected virtual int FillStreamStart(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    protected void FillGutsRecord();
    private void InitializeCollections();
    protected string ConvertTo3dRangeName(string value);
    private string ConvertToRangeName(string value, bool isRowRange);
    protected void ParsePrintAreaExpression(string value);
    protected void ParsePrintTitleColumns(string value);
    protected void ParsePrintTitleRows(string value);
    protected string ExtractPrintArea();
    protected string ExtractPrintTitleRowColumn(bool bRowExtract);
    protected string GetAddressGlobalWithoutName(Ptg[] token);
    public PageSetupImpl Clone(object parent);
    public virtual void Dispose();
}
internal class Syncfusion.XlsIO.Implementation.ParameterImpl : CommonObject {
    private ExcelParameterDataType m_dataType;
    private ExcelParameterType m_type;
    private string m_promptString;
    private object m_value;
    private IRange m_sourceRange;
    private string m_name;
    private bool m_refreshOnChange;
    private string m_cellRange;
    private byte m_flag;
    [CompilerGeneratedAttribute]
private PromptEventHandler Prompt;
    public ExcelParameterDataType DataType { get; public set; }
    public ExcelParameterType Type { get; internal set; }
    public string PromptString { get; internal set; }
    public object Value { get; internal set; }
    public IRange SourceRange { get; internal set; }
    public string Name { get; public set; }
    public bool RefreshOnChange { get; public set; }
    internal string CellRange { get; internal set; }
    internal byte Flag { get; internal set; }
    public ParameterImpl(IApplication application, object parent);
    public ParameterImpl(IApplication application, object parent, string name, ExcelParameterDataType dataType);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Prompt(PromptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Prompt(PromptEventHandler value);
    public sealed virtual void SetParam(ExcelParameterType type, object value);
    public sealed virtual ExcelParameterDataType get_DataType();
    public sealed virtual void set_DataType(ExcelParameterDataType value);
    public sealed virtual ExcelParameterType get_Type();
    internal void set_Type(ExcelParameterType value);
    public sealed virtual string get_PromptString();
    internal void set_PromptString(string value);
    public sealed virtual object get_Value();
    internal void set_Value(object value);
    public sealed virtual IRange get_SourceRange();
    internal void set_SourceRange(IRange value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_RefreshOnChange();
    public sealed virtual void set_RefreshOnChange(bool value);
    internal string get_CellRange();
    internal void set_CellRange(string value);
    internal byte get_Flag();
    internal void set_Flag(byte value);
    internal bool RaiseEvent(Object& value);
    internal ParameterImpl Clone(object parent);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.Implementation.ParametersCollection : CollectionBaseEx`1<IParameter> {
    public ParametersCollection(IApplication application, object parent);
    public sealed virtual IParameter Add(string name, ExcelParameterDataType dataType);
    private ParameterImpl CreateParameter(string name, ExcelParameterDataType dataType);
    internal ParametersCollection Clone(object parent);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.ParseParameters : object {
    public FormulaUtil FormulaUtility;
    public IWorksheet Worksheet;
    public Dictionary`2<string, string> WorksheetNames;
    public bool IsR1C1;
    public int CellRow;
    public int CellColumn;
    public IWorkbook Workbook;
    public ExcelVersion Version;
    public ParseParameters(IWorksheet sheet, Dictionary`2<string, string> worksheetNames, bool r1C1, int cellRow, int cellColumn, FormulaUtil formulaUtility, IWorkbook book);
}
internal class Syncfusion.XlsIO.Implementation.Person : object {
    private string m_displayName;
    private string m_id;
    private string m_userId;
    private string m_providerId;
    private int m_threadedCommentAuthoredCount;
    private WorkbookImpl m_book;
    internal string DisplayName { get; internal set; }
    internal string Id { get; internal set; }
    internal string UserId { get; internal set; }
    internal string ProviderId { get; internal set; }
    internal int ThreadedCommentAuthoredCount { get; internal set; }
    internal Person(string displayName, string id, string userId, string providerId);
    internal Person(WorkbookImpl workbook);
    internal string get_DisplayName();
    internal void set_DisplayName(string value);
    internal string get_Id();
    internal void set_Id(string value);
    internal string get_UserId();
    internal void set_UserId(string value);
    internal string get_ProviderId();
    internal void set_ProviderId(string value);
    internal int get_ThreadedCommentAuthoredCount();
    internal void set_ThreadedCommentAuthoredCount(int value);
    internal Person Clone(WorkbookImpl clonedBook);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.Average : SummaryBase {
    internal Nullable`1<int> intTotal;
    internal Nullable`1<double> doubleTotal;
    internal Nullable`1<decimal> decimalTotal;
    internal Nullable`1<int> count;
    internal Type type;
    internal Nullable`1<float> singleTotal;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.BinaryList : List`1<IComparable> {
    public int AddIfUnique(IComparable o);
    internal int AddIfUnique(IComparable o, bool ShouldRefreshKeys);
}
[ExtensionAttribute]
internal static class Syncfusion.XlsIO.Implementation.PivotAnalysis.CalculationExtensions : object {
    internal static string ErrorString;
    private static char stringMarker;
    private static char compiledExpressionMarker;
    private static char geMarker;
    private static char leMarker;
    private static char neMarker;
    private static char andMarker;
    private static char orMarker;
    private static char startsWithMarker;
    private static char endsWithMarker;
    private static char containsMarker;
    private static char dayMarker;
    private static char weekMarker;
    private static char monthMarker;
    private static char quarterMarker;
    private static char yearMarker;
    private static char inMarker;
    private static char plusMarker;
    private static char minusMarker;
    private static char multMarker;
    private static char divideMarker;
    private static char powerMarker;
    private static char modMarker;
    private static char greaterMarker;
    private static char lesserMarker;
    private static char equalMarker;
    private static char toStringMarker;
    private static char formatMarker;
    private static char maxMarker;
    private static char minMarker;
    private static char quoteMarker;
    private static char leftBracket;
    private static char rightBracket;
    private static char leftParen;
    private static char rightParen;
    private static Dictionary`2<string, string> strings;
    private static Dictionary`2<string, Expression> expressions;
    private static Char[] allOperations;
    private static Char[] unaryOperations;
    private static Char[] mathOperations;
    private static Char[] conditionalOperations;
    private static char listSeparator;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, Type> <DynamicPropertyTypeTable>k__BackingField;
    [CompilerGeneratedAttribute]
private static PivotEngine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <FieldName>k__BackingField;
    public static Dictionary`2<string, Type> DynamicPropertyTypeTable { get; public set; }
    public static char ListSeparator { get; public set; }
    internal static PivotEngine Engine { get; internal set; }
    internal static string FieldName { get; internal set; }
    private static CalculationExtensions();
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, Type> get_DynamicPropertyTypeTable();
    [CompilerGeneratedAttribute]
public static void set_DynamicPropertyTypeTable(Dictionary`2<string, Type> value);
    public static char get_ListSeparator();
    public static void set_ListSeparator(char value);
    [CompilerGeneratedAttribute]
internal static PivotEngine get_Engine();
    [CompilerGeneratedAttribute]
internal static void set_Engine(PivotEngine value);
    [CompilerGeneratedAttribute]
internal static string get_FieldName();
    [CompilerGeneratedAttribute]
internal static void set_FieldName(string value);
    [ExtensionAttribute]
public static Delegate GetCompiledExpression(object source, bool caseSensitive, string formula, ExpressionError& error);
    public static object GetDynamicValue(object o, string property);
    public static double GetDictionaryDoubleValue(IDictionary o, string property);
    public static bool CheckInList(object s, BinaryList list);
    internal static void Dispose();
    [ExtensionAttribute]
internal static Delegate GetCompiledExpression(object source, bool caseSensitive, string formula, ExpressionError& error, string fieldName);
    [ExtensionAttribute]
private static string GetSimpleExpression(object source, bool caseSensitive, string formula, ParameterExpression paramExp, ExpressionError& error);
    [ExtensionAttribute]
private static bool CompileToExpression(object source, ParameterExpression paramExp, bool caseSensitive, String& formula, Char[] operations, Char[] allOperations, ExpressionError& error);
    [ExtensionAttribute]
private static Expression GetExpression(object source, bool caseSensitive, ParameterExpression paramExp, string left, string right, char operand, ExpressionError& error);
    private static StringBuilder GetMultiFunctionalExpression(StringBuilder stringBuilder, string formula, Char[] delimiterChars);
    private static BinaryList GetLookUpList(string item);
    private static string GetFunctionName(char c);
    private static void CoerceType(Expression& leftExp, Expression& rightExp, ExpressionError& error);
    [ExtensionAttribute]
private static Expression GetExpressionPiece(object source, bool caseSensitive, ParameterExpression paramExp, string piece, ExpressionError& error, object leftExpType);
    private static Expression GetDictionaryLookUpExpression(ParameterExpression paramExp, string piece);
    private static string TokenizeStrings(string formula, ExpressionError& error);
}
internal class Syncfusion.XlsIO.Implementation.PivotAnalysis.CalculationExtensionsBackground : object {
    internal static string ErrorString;
    private static char stringMarker;
    private static char compiledExpressionMarker;
    private static char geMarker;
    private static char leMarker;
    private static char neMarker;
    private static char andMarker;
    private static char orMarker;
    private static char startsWithMarker;
    private static char endsWithMarker;
    private static char containsMarker;
    private static char dayMarker;
    private static char weekMarker;
    private static char monthMarker;
    private static char quarterMarker;
    private static char yearMarker;
    private static char inMarker;
    private static char plusMarker;
    private static char minusMarker;
    private static char multMarker;
    private static char divideMarker;
    private static char powerMarker;
    private static char modMarker;
    private static char greaterMarker;
    private static char lesserMarker;
    private static char equalMarker;
    private static char toStringMarker;
    private static char formatMarker;
    private static char maxMarker;
    private static char minMarker;
    private static char quoteMarker;
    private static char leftBracket;
    private static char rightBracket;
    private static char leftParen;
    private static char rightParen;
    private Dictionary`2<string, string> strings;
    private Dictionary`2<string, Expression> expressions;
    private Char[] allOperations;
    private Char[] unaryOperations;
    private char listSeparator;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <DynamicPropertyTypeTable>k__BackingField;
    [CompilerGeneratedAttribute]
private PivotEngine <Engine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    public Dictionary`2<string, Type> DynamicPropertyTypeTable { get; public set; }
    public char ListSeparator { get; public set; }
    internal PivotEngine Engine { get; internal set; }
    internal string FieldName { get; internal set; }
    private static CalculationExtensionsBackground();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Type> get_DynamicPropertyTypeTable();
    [CompilerGeneratedAttribute]
public void set_DynamicPropertyTypeTable(Dictionary`2<string, Type> value);
    public char get_ListSeparator();
    public void set_ListSeparator(char value);
    [CompilerGeneratedAttribute]
internal PivotEngine get_Engine();
    [CompilerGeneratedAttribute]
internal void set_Engine(PivotEngine value);
    [CompilerGeneratedAttribute]
internal string get_FieldName();
    [CompilerGeneratedAttribute]
internal void set_FieldName(string value);
    public Delegate GetCompiledExpression(object source, bool caseSensitive, string formula, ExpressionError& error);
    public object GetDynamicValue(object o, string property);
    public double GetDictionaryDoubleValue(IDictionary o, string property);
    public bool CheckInList(object s, BinaryList list);
    internal Delegate GetCompiledExpression(object source, bool caseSensitive, string formula, ExpressionError& error, string fieldName);
    private string GetSimpleExpression(object source, bool caseSensitive, string formula, ParameterExpression paramExp, ExpressionError& error);
    private bool CompileToExpression(object source, ParameterExpression paramExp, bool caseSensitive, String& formula, Char[] operations, Char[] allOperations, ExpressionError& error);
    private Expression GetExpression(object source, bool caseSensitive, ParameterExpression paramExp, string left, string right, char operand, ExpressionError& error);
    private BinaryList GetLookUpList(string item);
    private string GetFunctionName(char c);
    private void CoerceType(Expression& leftExp, Expression& rightExp, ExpressionError& error);
    private Expression GetExpressionPiece(object source, bool caseSensitive, ParameterExpression paramExp, string piece, ExpressionError& error, object leftExpType);
    private Expression GetDictionaryLookUpExpression(ParameterExpression paramExp, string piece);
    private string TokenizeStrings(string formula, ExpressionError& error);
    [CompilerGeneratedAttribute]
private bool <GetExpressionPiece>b__66_0(PivotComputationInfo i);
}
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.CalculationType : Enum {
    public int value__;
    public static CalculationType NoCalculation;
    public static CalculationType PercentageOfGrandTotal;
    public static CalculationType PercentageOfColumnTotal;
    public static CalculationType PercentageOfRowTotal;
    public static CalculationType PercentageOfParentColumnTotal;
    public static CalculationType PercentageOfParentRowTotal;
    public static CalculationType PercentageOfParentTotal;
    public static CalculationType Index;
    public static CalculationType Formula;
    public static CalculationType PercentageOf;
    public static CalculationType DifferenceFrom;
    public static CalculationType PercentageOfDifferenceFrom;
    public static CalculationType RunningTotalIn;
    public static CalculationType PercentageOfRunningTotalIn;
    public static CalculationType RankSmallestToLargest;
    public static CalculationType RankLargestToSmallest;
    public static CalculationType Distinct;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.CountSummary : SummaryBase {
    internal Nullable`1<int> count;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
    public sealed virtual void AdjustForNewContribution(object newContribution);
    public sealed virtual void AdjustForOldContribution(object oldContribution);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.CoveredCellRange : object {
    [CompilerGeneratedAttribute]
private int <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Right>k__BackingField;
    public int Top { get; public set; }
    public int Left { get; public set; }
    public int Bottom { get; public set; }
    public int Right { get; public set; }
    public CoveredCellRange(int top, int left, int bottom, int right);
    [CompilerGeneratedAttribute]
public int get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(int value);
    [CompilerGeneratedAttribute]
public int get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(int value);
    [CompilerGeneratedAttribute]
public int get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(int value);
    [CompilerGeneratedAttribute]
public int get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(int value);
    public virtual string ToString();
}
internal class Syncfusion.XlsIO.Implementation.PivotAnalysis.DateComparer : object {
    private String[] formats;
    public sealed virtual int Compare(object x, object y);
}
internal class Syncfusion.XlsIO.Implementation.PivotAnalysis.DecimalComparer : object {
    public sealed virtual int Compare(object x, object y);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DecimalTotalSummary : SummaryBase {
    internal Nullable`1<decimal> total;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
    public sealed virtual void AdjustForNewContribution(object newContribution);
    public sealed virtual void AdjustForOldContribution(object oldContribution);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DisplayIfDiscreteValuesEqual : SummaryBase {
    private object commonValue;
    private bool isCommon;
    private string padString;
    public string PadString { get; public set; }
    public string get_PadString();
    public void set_PadString(string value);
    public virtual void Combine(object other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
    public virtual void CombineSummary(SummaryBase other);
}
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.DisplayOption : Enum {
    public int value__;
    public static DisplayOption None;
    public static DisplayOption Calculations;
    public static DisplayOption Summary;
    public static DisplayOption GrandTotals;
    public static DisplayOption All;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DoubleAverageSummary : SummaryBase {
    internal Nullable`1<double> total;
    internal Nullable`1<int> count;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
    public sealed virtual void AdjustForNewContribution(object newContribution);
    public sealed virtual void AdjustForOldContribution(object oldContribution);
}
internal class Syncfusion.XlsIO.Implementation.PivotAnalysis.DoubleComparer : object {
    public sealed virtual int Compare(object x, object y);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DoubleMaxSummary : SummaryBase {
    internal Nullable`1<double> max;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DoubleMinSummary : SummaryBase {
    internal Nullable`1<double> min;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DoubleStDevSummary : SummaryBase {
    internal Nullable`1<double> sumX2;
    internal Nullable`1<double> sumX;
    internal Nullable`1<int> n;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DoubleTotalSummary : SummaryBase {
    internal Nullable`1<double> total;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
    public sealed virtual void AdjustForNewContribution(object newContribution);
    public sealed virtual void AdjustForOldContribution(object oldContribution);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DoubleVarianceSummary : SummaryBase {
    internal Nullable`1<double> sumX2;
    internal Nullable`1<double> sumX;
    internal Nullable`1<int> n;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.DynamicPropertyDescriptor : PropertyDescriptor {
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public DynamicPropertyDescriptor(string name, Attribute[] attributes);
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.ExpressionError : Enum {
    public int value__;
    public static ExpressionError None;
    public static ExpressionError MissingRightQuote;
    public static ExpressionError MismatchedParentheses;
    public static ExpressionError CannotCompareDifferentTypes;
    public static ExpressionError UnknownOperator;
    public static ExpressionError NotAValidFormula;
    public static ExpressionError ExceptionRaised;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.ExpressionPropertyDescriptor : PropertyDescriptor {
    private string expression;
    private string name;
    private FilterExpression exp;
    private string format;
    public string Expression { get; public set; }
    public FilterExpression Exp { get; public set; }
    public string Format { get; public set; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public Type ComponentType { get; }
    public ExpressionPropertyDescriptor(string name, Attribute[] attributes, string expression, string format, FilterHelper helper);
    public string get_Expression();
    public void set_Expression(string value);
    public FilterExpression get_Exp();
    public void set_Exp(FilterExpression value);
    public string get_Format();
    public void set_Format(string value);
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual Type get_ComponentType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[ExtensionAttribute]
public static class Syncfusion.XlsIO.Implementation.PivotAnalysis.ExtensionClass : object {
    [ExtensionAttribute]
public static bool Has(List`1<HiddenGroup> t, HiddenGroup hiddenGroup);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.FieldInfo : object {
    [CompilerGeneratedAttribute]
private FieldTypes <FieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public FieldTypes FieldType { get; public set; }
    public string Name { get; public set; }
    public string Expression { get; public set; }
    public string Format { get; public set; }
    [CompilerGeneratedAttribute]
public FieldTypes get_FieldType();
    [CompilerGeneratedAttribute]
public void set_FieldType(FieldTypes value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object obj);
}
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.FieldTypes : Enum {
    public int value__;
    public static FieldTypes Property;
    public static FieldTypes Expression;
    public static FieldTypes Unbound;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.FilterExpression : object {
    private ExpressionError error;
    private string name;
    private string expression;
    private string dimensionName;
    private string format;
    private string fieldCaption;
    private Delegate evaluator;
    private bool caseSensitive;
    [CompilerGeneratedAttribute]
private string <DimensionHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    public string DimensionName { get; public set; }
    public string Format { get; public set; }
    public string DimensionHeader { get; public set; }
    public string FieldCaption { get; public set; }
    [XmlIgnoreAttribute]
public Delegate Evaluator { get; public set; }
    public ExpressionError Error { get; }
    public string ErrorString { get; }
    public string Name { get; public set; }
    public string Expression { get; public set; }
    [XmlIgnoreAttribute]
public object Tag { get; public set; }
    public bool CaseSensitive { get; public set; }
    public FilterExpression(string dimensionName);
    public FilterExpression(string dimensionName, string dimensionHeader, string expression);
    public FilterExpression(string dimensionName, string dimensionHeader, string expression, string format);
    public FilterExpression(string name, string expression);
    public string get_DimensionName();
    public void set_DimensionName(string value);
    public string get_Format();
    public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_DimensionHeader();
    [CompilerGeneratedAttribute]
public void set_DimensionHeader(string value);
    public string get_FieldCaption();
    public void set_FieldCaption(string value);
    public Delegate get_Evaluator();
    public void set_Evaluator(Delegate value);
    public ExpressionError get_Error();
    public string get_ErrorString();
    public string get_Name();
    public void set_Name(string value);
    public string get_Expression();
    public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public object ComputedValue(object component, bool loadInBackground, PivotEngine engine);
    public object ComputedValue(object component);
    [CompilerGeneratedAttribute]
private bool <ComputedValue>b__47_0(PropertyInfo x);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.FilterHelper : object {
    private bool caseSensitive;
    [CompilerGeneratedAttribute]
private List`1<FilterExpression> <filterExpressions>k__BackingField;
    public bool CaseSensitive { get; public set; }
    public int Count { get; }
    internal List`1<FilterExpression> filterExpressions { get; internal set; }
    public FilterExpression Item { get; }
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public int get_Count();
    [CompilerGeneratedAttribute]
internal List`1<FilterExpression> get_filterExpressions();
    [CompilerGeneratedAttribute]
internal void set_filterExpressions(List`1<FilterExpression> value);
    public FilterExpression get_Item(int i);
    public void AddFilterExpression(string name, string expression);
    public bool RemoveFilterExpression(FilterExpression exp);
    public void Clear();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.FilterItemElement : object {
    private bool suspendPropertyChangedTrigger;
    private Nullable`1<bool> isSelected;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAllFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SelectedState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsChanged>k__BackingField;
    public string Key { get; public set; }
    public Nullable`1<bool> IsSelected { get; public set; }
    public bool IsAllFilter { get; public set; }
    public Nullable`1<bool> SelectedState { get; public set; }
    public Nullable`1<bool> IsChanged { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    public Nullable`1<bool> get_IsSelected();
    public void set_IsSelected(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IsAllFilter();
    [CompilerGeneratedAttribute]
public void set_IsAllFilter(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_SelectedState();
    [CompilerGeneratedAttribute]
public void set_SelectedState(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsChanged();
    [CompilerGeneratedAttribute]
public void set_IsChanged(Nullable`1<bool> value);
    public void AcceptChanges();
    public void RejectChanges();
    public sealed virtual int CompareTo(object obj);
    public virtual string ToString();
    private void OnPropertyChanged(Expression`1<Func`2<FilterItemElement, R>> expr);
    private void OnPropertyChanged(string propertyName);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.FilterItemsCollection : List`1<FilterItemElement> {
    private static char formatMarker;
    private bool isSuspendUpdate;
    private string m_Name;
    private bool showSubTotal;
    private bool allowRunTimeGroupByField;
    [CompilerGeneratedAttribute]
private PropertyDescriptor <FilterProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterItemElement <AllFilterItem>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldCaption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <FilteredValues>k__BackingField;
    public PropertyDescriptor FilterProperty { get; public set; }
    public FilterItemElement AllFilterItem { get; public set; }
    public IComparer Comparer { get; public set; }
    public string Name { get; public set; }
    public string DisplayHeader { get; public set; }
    public string FieldCaption { get; public set; }
    public string Format { get; public set; }
    public bool ShowSubTotal { get; public set; }
    public bool AllowRunTimeGroupByField { get; public set; }
    public List`1<string> FilteredValues { get; public set; }
    [CompilerGeneratedAttribute]
public PropertyDescriptor get_FilterProperty();
    [CompilerGeneratedAttribute]
public void set_FilterProperty(PropertyDescriptor value);
    [CompilerGeneratedAttribute]
public FilterItemElement get_AllFilterItem();
    [CompilerGeneratedAttribute]
public void set_AllFilterItem(FilterItemElement value);
    [CompilerGeneratedAttribute]
public IComparer get_Comparer();
    [CompilerGeneratedAttribute]
public void set_Comparer(IComparer value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayHeader();
    [CompilerGeneratedAttribute]
public void set_DisplayHeader(string value);
    [CompilerGeneratedAttribute]
public string get_FieldCaption();
    [CompilerGeneratedAttribute]
public void set_FieldCaption(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    public bool get_ShowSubTotal();
    public void set_ShowSubTotal(bool value);
    public bool get_AllowRunTimeGroupByField();
    public void set_AllowRunTimeGroupByField(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_FilteredValues();
    [CompilerGeneratedAttribute]
public void set_FilteredValues(List`1<string> value);
    public int AddIfUnique(FilterItemElement filterItemElement);
    public void AcceptChanges();
    public void RejectChanges();
    public void SetName(string name);
    public void AddWireEvent(FilterItemElement element);
    public string GetFilterExpressionForDataView();
    public string GetFilterExpression(bool IEnumerableSource);
    public string GetFilterItem();
    public string GetFilterExpression(bool IEnumerableSource, FilterItemsCollection filterItemsCollection, string format);
    internal string GetExpressionForVisibleRecords(bool IEnumerableSource);
    internal void Dispose();
    private string HandleBracketsInColumnNamesInFilters(string name);
    private void PropertyChanged(object sender, PropertyChangedEventArgs e);
    private Nullable`1<bool> SeletedState();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.GetValueDelegate : MulticastDelegate {
    public GetValueDelegate(object object, IntPtr method);
    public virtual IComparable Invoke(object o, string name);
    public virtual IAsyncResult BeginInvoke(object o, string name, AsyncCallback callback, object object);
    public virtual IComparable EndInvoke(IAsyncResult result);
}
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.GridLayout : Enum {
    public int value__;
    public static GridLayout Normal;
    public static GridLayout TopSummary;
    public static GridLayout ExcelLikeLayout;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.HiddenGroup : object {
    [CompilerGeneratedAttribute]
private int <From>k__BackingField;
    [CompilerGeneratedAttribute]
private int <To>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemTotalHeader>k__BackingField;
    public int From { get; public set; }
    public int To { get; public set; }
    public int Level { get; public set; }
    public string GroupName { get; public set; }
    public string ItemTotalHeader { get; public set; }
    public HiddenGroup(int from, int to, int level, string groupName);
    public HiddenGroup(int from, int to, int level, string groupName, string totalHeader);
    [CompilerGeneratedAttribute]
public int get_From();
    [CompilerGeneratedAttribute]
public void set_From(int value);
    [CompilerGeneratedAttribute]
public int get_To();
    [CompilerGeneratedAttribute]
public void set_To(int value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public string get_ItemTotalHeader();
    [CompilerGeneratedAttribute]
public void set_ItemTotalHeader(string value);
    public virtual string ToString();
    public HiddenGroup Clone(HiddenGroup ParentGroup);
}
public interface Syncfusion.XlsIO.Implementation.PivotAnalysis.IAdjustable {
    public abstract virtual void AdjustForNewContribution(object newContribution);
    public abstract virtual void AdjustForOldContribution(object oldContribution);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.IndexEngine : object {
    public List`1<ListIndexInfo> allIndexesRowFirst;
    public List`1<IComparer> allComparersRowFirst;
    internal int highRowLevel;
    internal List`1<CoveredCellRange> coveredRanges;
    internal int valColStart;
    internal int valRowStart;
    internal List`1<object> baseItems;
    internal List`1<string> names;
    internal Dictionary`2<int, object> baseItemCollection;
    internal int count;
    internal int key;
    internal int key1;
    internal IEnumerable dataSourceList;
    internal int rowCount;
    internal int columnCount;
    internal bool CalculationRender;
    internal PivotCellInfos CellInfo;
    internal PivotCellInfos RowInfo;
    internal PivotCellInfos ColInfo;
    internal PivotCellInfos pivotInfoCache;
    internal int headerColsCount;
    internal int headerRowsCount;
    internal List`1<ListIndexInfo> rowIndexes;
    internal List`1<ListIndexInfo> columnIndexes;
    private int initialRowLoadAmount;
    private Int32[] parentRowLocation;
    private Int32[] parentColumnLocation;
    private List`1<SortKey> sortKeys;
    private ListSortDirection calcSortDirection;
    private Dictionary`2<string, PropertyInfo> lookUp;
    private GetValueDelegate getValue;
    private List`1<PivotItem> pivotRows;
    private List`1<PivotItem> pivotColumns;
    private List`1<PivotComputationInfo> pivotCalculations;
    private FilterHelper filters;
    private object dataSource;
    private bool usePercentageFormat;
    private int rowOffset;
    private int columnOffset;
    private int levelPopulateHeaders;
    private int levelGetListFrom;
    private List`1<IComparable> calcList;
    private PivotCellInfo lastExpander;
    private PivotEngine pivotEngine;
    [CompilerGeneratedAttribute]
private List`1<object> <PivotBaseRowItems>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <PivotBaseColumnItems>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <UsedRowColumnPivots>k__BackingField;
    internal Dictionary`2<string, PropertyInfo> LookUp { get; internal set; }
    public int HighRowLevel { get; }
    public int InitialRowLoadAmount { get; public set; }
    public GetValueDelegate GetValue { get; public set; }
    public List`1<PivotItem> PivotRows { get; }
    public List`1<PivotItem> PivotColumns { get; }
    public List`1<PivotComputationInfo> PivotCalculations { get; }
    public List`1<FilterExpression> Filters { get; }
    public object DataSource { get; public set; }
    public List`1<CoveredCellRange> CoveredRanges { get; }
    public bool UsePercentageFormat { get; public set; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    public int ColumnOffSetToValues { get; }
    public int RowOffSetToValues { get; }
    public ListSortDirection SortDirection { get; }
    internal List`1<object> PivotBaseRowItems { get; internal set; }
    internal List`1<object> PivotBaseColumnItems { get; internal set; }
    internal List`1<string> UsedRowColumnPivots { get; internal set; }
    internal IEnumerable DataSourceList { get; internal set; }
    public PivotCellInfo Item { get; }
    public IndexEngine(PivotEngine pivotEngine);
    public IndexEngine(PivotEngine pivotEngine, GetValueDelegate del);
    internal Dictionary`2<string, PropertyInfo> get_LookUp();
    internal void set_LookUp(Dictionary`2<string, PropertyInfo> value);
    public int get_HighRowLevel();
    public int get_InitialRowLoadAmount();
    public void set_InitialRowLoadAmount(int value);
    public GetValueDelegate get_GetValue();
    public void set_GetValue(GetValueDelegate value);
    public List`1<PivotItem> get_PivotRows();
    public List`1<PivotItem> get_PivotColumns();
    public List`1<PivotComputationInfo> get_PivotCalculations();
    public List`1<FilterExpression> get_Filters();
    public object get_DataSource();
    public void set_DataSource(object value);
    public List`1<CoveredCellRange> get_CoveredRanges();
    public bool get_UsePercentageFormat();
    public void set_UsePercentageFormat(bool value);
    public int get_RowCount();
    public int get_ColumnCount();
    public int get_ColumnOffSetToValues();
    public int get_RowOffSetToValues();
    public ListSortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
internal List`1<object> get_PivotBaseRowItems();
    [CompilerGeneratedAttribute]
internal void set_PivotBaseRowItems(List`1<object> value);
    [CompilerGeneratedAttribute]
internal List`1<object> get_PivotBaseColumnItems();
    [CompilerGeneratedAttribute]
internal void set_PivotBaseColumnItems(List`1<object> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_UsedRowColumnPivots();
    [CompilerGeneratedAttribute]
internal void set_UsedRowColumnPivots(List`1<string> value);
    internal IEnumerable get_DataSourceList();
    internal void set_DataSourceList(IEnumerable value);
    public PivotCellInfo get_Item(int row, int col);
    public bool IndexData();
    public bool IndexData(bool onDemand);
    public void SortByCalculation(int colIndex);
    internal IComparable GetReflectedValue(object component, string property);
    internal List`1<ListIndexInfo> IndexTheList(IList list, List`1<string> properties, List`1<string> formats, List`1<IComparer> comparers, bool generateCalcs);
    internal List`1<ListIndexInfo> GetListFrom(IList list, int propertyIndex, List`1<string> properties, List`1<string> formats, List`1<IComparer> comparers, int start, int count, ListIndexInfo parentInfo, IComparable parentDisplay);
    internal int GetCount(ListIndexInfo info);
    internal int GetCount(List`1<ListIndexInfo> list);
    internal int GetRowDimension();
    internal int GetColumnDimension();
    private List`1<SummaryBase> FindCalcFromKeys(List`1<IComparable> keys, List`1<ListIndexInfo> list, bool isColSummary);
    private void ProcessCalcs(List`1<object> allListCopy, List`1<string> allPivotsUsed, List`1<ListIndexInfo> indexes);
    private void ProcessCalcsOnList(List`1<ListIndexInfo> indexes, List`1<SummaryBase> summaries);
    private void ProcessCalcsOnIndexInfo(List`1<object> allListCopy, List`1<string> allPivotsUsed, ListIndexInfo info);
    private bool HasNoPivots();
    private void PopulateCache();
    private void ApplyFormat(int i, int j);
    private void PopulateCalculations();
    private int GetRowIndentLevel(int row);
    private int GetColIndentLevel(int col);
    private void ProcessCalculations();
    private void ProcessIJ(int i);
    private object CalculateValuesToRenderer(object v, int row, int column, int Offset, bool IsSummaryRow, bool IsSummaryColumn, PivotComputationInfo compInfo, List`1<PivotItem> rowList, List`1<PivotItem> columnList);
    private int GetParentRowIndex(int currentRow, int column, bool isSummaryRow);
    private Int32[] GetNextParentRowIndex(int currentRowIndex, int parentColumnIndex);
    private int GetParentColumnIndex(int row, int currentColumn, bool isSummaryColumn);
    private Int32[] GetNextParentColumnIndex(int parentRowIndex, int currentColumnIndex);
    private void FindRowColumnItems(List`1<PivotItem> rowList, List`1<PivotItem> columnList);
    private object CalculateFormula(int row1, int col1, int col, PivotComputationInfo compInfo);
    private void HandleNoPivots();
    private List`1<SummaryBase> InitSummaries();
    private void PopulateHeaders(bool isRowHeaders, List`1<ListIndexInfo> list, int depth, Int32& row, Int32& col, PivotCellInfo parent);
    private PivotCellInfo SetCellInfo(bool isRowHeaders, int count, Int32& row, Int32& col, int depth, int index, IComparable display, bool isLast, bool isExpander, PivotCellInfo parent);
}
internal class Syncfusion.XlsIO.Implementation.PivotAnalysis.IntComparer : object {
    public sealed virtual int Compare(object x, object y);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.IntTotalSummary : SummaryBase {
    internal Nullable`1<int> total;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
    public sealed virtual void AdjustForNewContribution(object newContribution);
    public sealed virtual void AdjustForOldContribution(object oldContribution);
}
internal class Syncfusion.XlsIO.Implementation.PivotAnalysis.KeysCalculationValues : object {
    private List`1<object> rawValues;
    [CompilerGeneratedAttribute]
private List`1<IComparable> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SummaryBase> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer[] <Comparers>k__BackingField;
    public List`1<object> RawValues { get; }
    public List`1<IComparable> Keys { get; public set; }
    public List`1<SummaryBase> Values { get; public set; }
    public IComparer[] Comparers { get; public set; }
    public List`1<object> get_RawValues();
    [CompilerGeneratedAttribute]
public List`1<IComparable> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(List`1<IComparable> value);
    [CompilerGeneratedAttribute]
public List`1<SummaryBase> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<SummaryBase> value);
    [CompilerGeneratedAttribute]
public IComparer[] get_Comparers();
    [CompilerGeneratedAttribute]
public void set_Comparers(IComparer[] value);
    public sealed virtual int CompareTo(object obj);
    public virtual string ToString();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.ListIndexInfo : object {
    private int lastIndex;
    [CompilerGeneratedAttribute]
private RowType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ListIndexInfo <ParentInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparable <Display>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ListIndexInfo> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SummaryBase> <Summaries>k__BackingField;
    public RowType Type { get; public set; }
    public ListIndexInfo ParentInfo { get; public set; }
    internal int StartIndex { get; internal set; }
    internal int LastIndex { get; internal set; }
    internal IComparable Display { get; internal set; }
    internal List`1<ListIndexInfo> Children { get; internal set; }
    internal List`1<SummaryBase> Summaries { get; internal set; }
    [CompilerGeneratedAttribute]
public RowType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RowType value);
    [CompilerGeneratedAttribute]
public ListIndexInfo get_ParentInfo();
    [CompilerGeneratedAttribute]
public void set_ParentInfo(ListIndexInfo value);
    [CompilerGeneratedAttribute]
internal int get_StartIndex();
    [CompilerGeneratedAttribute]
internal void set_StartIndex(int value);
    internal int get_LastIndex();
    internal void set_LastIndex(int value);
    [CompilerGeneratedAttribute]
internal IComparable get_Display();
    [CompilerGeneratedAttribute]
internal void set_Display(IComparable value);
    [CompilerGeneratedAttribute]
internal List`1<ListIndexInfo> get_Children();
    [CompilerGeneratedAttribute]
internal void set_Children(List`1<ListIndexInfo> value);
    [CompilerGeneratedAttribute]
internal List`1<SummaryBase> get_Summaries();
    [CompilerGeneratedAttribute]
internal void set_Summaries(List`1<SummaryBase> value);
    public virtual string ToString();
    public sealed virtual int CompareTo(ListIndexInfo other);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.Max : SummaryBase {
    internal Nullable`1<double> doubleMax;
    internal Nullable`1<int> intMax;
    internal Nullable`1<decimal> decimalMax;
    internal Nullable`1<float> singleMax;
    internal Type type;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.Min : SummaryBase {
    internal Nullable`1<double> doubleMin;
    internal Nullable`1<int> intMin;
    internal Nullable`1<decimal> decimalMin;
    internal Nullable`1<float> singleMin;
    internal Type type;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotCellInfo : object {
    public int RowIndex;
    public int ColumnIndex;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private CoveredCellRange <CellRange>k__BackingField;
    [CompilerGeneratedAttribute]
private PivotCellType <CellType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormattedText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private SummaryBase <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private PivotCellInfo <ParentCell>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueText>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <RawValues>k__BackingField;
    public double DoubleValue { get; }
    public object Value { get; public set; }
    public CoveredCellRange CellRange { get; public set; }
    public PivotCellType CellType { get; public set; }
    public string Key { get; public set; }
    public string FormattedText { get; public set; }
    public string Format { get; public set; }
    public object Tag { get; public set; }
    public SummaryBase Summary { get; public set; }
    public PivotCellInfo ParentCell { get; public set; }
    public string UniqueText { get; public set; }
    [XmlIgnoreAttribute]
public List`1<object> RawValues { get; internal set; }
    public double get_DoubleValue();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public CoveredCellRange get_CellRange();
    [CompilerGeneratedAttribute]
public void set_CellRange(CoveredCellRange value);
    [CompilerGeneratedAttribute]
public PivotCellType get_CellType();
    [CompilerGeneratedAttribute]
public void set_CellType(PivotCellType value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_FormattedText();
    [CompilerGeneratedAttribute]
public void set_FormattedText(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public SummaryBase get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(SummaryBase value);
    [CompilerGeneratedAttribute]
public PivotCellInfo get_ParentCell();
    [CompilerGeneratedAttribute]
public void set_ParentCell(PivotCellInfo value);
    [CompilerGeneratedAttribute]
public string get_UniqueText();
    [CompilerGeneratedAttribute]
public void set_UniqueText(string value);
    [CompilerGeneratedAttribute]
public List`1<object> get_RawValues();
    [CompilerGeneratedAttribute]
internal void set_RawValues(List`1<object> value);
    public virtual string ToString();
    public void Dispose();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotCellInfos : List`1<List`1<PivotCellInfo>> {
    public PivotCellInfo Item { get; public set; }
    public PivotCellInfos(int rowCount, int colCount);
    public PivotCellInfo get_Item(int rowIndex, int colIndex);
    public void set_Item(int rowIndex, int colIndex, PivotCellInfo value);
    public int GetLength(int index);
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotCellType : Enum {
    public int value__;
    public static PivotCellType ValueCell;
    public static PivotCellType ExpanderCell;
    public static PivotCellType HeaderCell;
    public static PivotCellType TopLeftCell;
    public static PivotCellType TotalCell;
    public static PivotCellType CalculationHeaderCell;
    public static PivotCellType RowHeaderCell;
    public static PivotCellType ColumnHeaderCell;
    public static PivotCellType GrandTotalCell;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotComputationInfo : object {
    private bool allowSort;
    private bool allowFilter;
    private bool enableHyperLinks;
    private string fieldName;
    private string fieldHeader;
    private string fieldCaption;
    private string description;
    private SummaryDisplayLevel innerMostComputationsOnly;
    private string padString;
    private string calculationName;
    private bool allowRunTimeGroupByField;
    private SummaryBase summary;
    private SummaryType summaryType;
    private string baseField;
    private DisplayOption displayOption;
    private CalculationType calculationType;
    private string formula;
    private FilterExpression expression;
    private string format;
    private object defaultValue;
    private string baseItem;
    private bool isTopColumnSummary;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <FieldType>k__BackingField;
    public bool AllowSort { get; public set; }
    public bool AllowFilter { get; public set; }
    public bool IsTopColumnSummary { get; public set; }
    public bool EnableHyperlinks { get; public set; }
    public string FieldName { get; public set; }
    public string FieldHeader { get; public set; }
    public string FieldCaption { get; public set; }
    public string Description { get; public set; }
    public SummaryDisplayLevel InnerMostComputationsOnly { get; public set; }
    public string PadString { get; public set; }
    public string CalculationName { get; public set; }
    public bool AllowRunTimeGroupByField { get; public set; }
    [XmlIgnoreAttribute]
public SummaryBase Summary { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SummaryType SummaryType { get; public set; }
    public DisplayOption DisplayOption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CalculationType CalculationType { get; public set; }
    public string BaseField { get; public set; }
    public string BaseItem { get; public set; }
    public string Formula { get; public set; }
    [XmlIgnoreAttribute]
public FilterExpression Expression { get; public set; }
    public string FieldType { get; public set; }
    public string Format { get; public set; }
    public object DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public bool get_AllowSort();
    public void set_AllowSort(bool value);
    public bool get_AllowFilter();
    public void set_AllowFilter(bool value);
    public bool get_IsTopColumnSummary();
    public void set_IsTopColumnSummary(bool value);
    public bool get_EnableHyperlinks();
    public void set_EnableHyperlinks(bool value);
    public string get_FieldName();
    public void set_FieldName(string value);
    public string get_FieldHeader();
    public void set_FieldHeader(string value);
    public string get_FieldCaption();
    public void set_FieldCaption(string value);
    public string get_Description();
    public void set_Description(string value);
    public SummaryDisplayLevel get_InnerMostComputationsOnly();
    public void set_InnerMostComputationsOnly(SummaryDisplayLevel value);
    public string get_PadString();
    public void set_PadString(string value);
    public string get_CalculationName();
    public void set_CalculationName(string value);
    public bool get_AllowRunTimeGroupByField();
    public void set_AllowRunTimeGroupByField(bool value);
    public SummaryBase get_Summary();
    public void set_Summary(SummaryBase value);
    public SummaryType get_SummaryType();
    public void set_SummaryType(SummaryType value);
    public DisplayOption get_DisplayOption();
    public void set_DisplayOption(DisplayOption value);
    public CalculationType get_CalculationType();
    public void set_CalculationType(CalculationType value);
    public string get_BaseField();
    public void set_BaseField(string value);
    public string get_BaseItem();
    public void set_BaseItem(string value);
    public string get_Formula();
    public void set_Formula(string value);
    public FilterExpression get_Expression();
    public void set_Expression(FilterExpression value);
    [CompilerGeneratedAttribute]
public string get_FieldType();
    [CompilerGeneratedAttribute]
public void set_FieldType(string value);
    public string get_Format();
    public void set_Format(string value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public static SummaryBase GetSummaryInstance(SummaryType st);
    public virtual string ToString();
    public static List`1<string> GetComputationTypes();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
    internal void Dispose();
    private void OnPropertyChanged(Expression`1<Func`2<PivotComputationInfo, R>> expr);
    private void OnPropertyChanged(string propertyName);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotEngine : object {
    public List`1<int> sortColIndexes;
    public List`1<int> columnIndexes;
    public int highWaterRowIndex;
    internal Nullable`1<bool> notPopulated;
    internal double populationStatus;
    private IndexEngine indexEngine;
    private GetValueDelegate getValue;
    private bool useIndexedEngine;
    private bool enableDataOptimization;
    private bool applyFormattedSummary;
    private Dictionary`2<string, Array> editCellsInfo;
    private bool showGrandTotals;
    private bool isDataDynamic;
    private GridLayout gridLayout;
    private bool showSingleCalculationHeader;
    private bool populationCompleted;
    private bool enableOnDemandCalculations;
    private bool enableLazyLoadOnDemandCalculations;
    private bool showNullAsBlank;
    private bool enableSubTotalHiding;
    private bool showSubTotalsForChildren;
    private int rowCount;
    private int columnCount;
    private int grandRowIndex;
    private int grandColumnIndex;
    private List`1<CoveredCellRange> coveredRanges;
    private FilterHelper filters;
    private Dictionary`2<string, SummaryBase> summaryLibrary;
    private PivotCellInfos pivotValues;
    private HashSet`1<PivotCellInfo> hiddenRowIndexes;
    private bool rowPivotsOnly;
    private int initialRowLoadAmount;
    private int highRowLevel;
    private List`1<ListSortDirection> sortDirs;
    private List`1<SortKeys> sortKeys;
    private bool isColumnSorting;
    private ListSortDirection calcSortDirection;
    private ListSortDirection sortDirection;
    private bool ignoreRefresh;
    private List`1<PivotItem> pivotRows;
    private List`1<PivotItem> pivotColumns;
    private List`1<PivotComputationInfo> pivotCalculations;
    private bool useDescriptionInCalculationHeader;
    private bool emptyPivot;
    private string emptyPivotString;
    private string grandString;
    private bool usePercentageFormat;
    private bool loadInBackground;
    private bool cacheRawValues;
    private bool showCalculationsAsColumns;
    private bool showEmptyCell;
    private object dataSource;
    private IEnumerable dataSourceList;
    private PropertyDescriptorCollection itemProperties;
    private List`1<FieldInfo> allowedFields;
    private int highWaterColumnIndex;
    private FilterItemsCollection itemCollection;
    private List`1<object> visibleRecords;
    private bool isForRawItem;
    private bool lockComputations;
    private static double defaultSummaryValue;
    private bool ignoreWhitespace;
    private Dictionary`2<int, List`1<int>> colSummands;
    private Dictionary`2<int, List`1<int>> rowSummands;
    private string delimiter;
    private SummaryBase[0...,0...] valuesArea;
    private IComparable[0...,0...] rowHeaders;
    private IComparable[0...,0...] columnHeaders;
    private String[0...,0...] rowHeaderUniqueValues;
    private String[0...,0...] columnHeaderUniqueValues;
    private Boolean[] rowSummary;
    private Boolean[] columnSummary;
    private Int32[] parentRowLocation;
    private Int32[] parentColLocation;
    private BinaryList columnKeysCalcValues;
    private BinaryList rowKeysCalcValues;
    private BinaryList tableKeysCalcValues;
    private Dictionary`2<string, PropertyInfo> lookUp;
    private int rowOffSet;
    private int colOffSet;
    [CompilerGeneratedAttribute]
private PivotSchemaChangedEventHandler PivotSchemaChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, List`1<HiddenGroup>> <HiddenPivotRowGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, List`1<HiddenGroup>> <HiddenPivotColumnGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <PivotBaseRowItems>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <PivotBaseColumnItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsItemPropertiesFilled>k__BackingField;
    internal Dictionary`2<string, PropertyInfo> LookUp { get; internal set; }
    public IndexEngine IndexEngine { get; public set; }
    public GetValueDelegate GetValue { get; public set; }
    public bool EnableDataOptimization { get; public set; }
    public bool UseIndexedEngine { get; public set; }
    public bool ApplyFormattedSummary { get; public set; }
    public Dictionary`2<string, Array> EditCellsInfo { get; public set; }
    public bool IsDataDynamic { get; public set; }
    public bool ShowGrandTotals { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public GridLayout GridLayout { get; public set; }
    public bool ShowSingleCalculationHeader { get; public set; }
    public bool EnableLazyLoadOnDemandCalculations { get; public set; }
    public bool EnableOnDemandCalculations { get; public set; }
    public bool EnableSubTotalHiding { get; public set; }
    public bool ShowSubTotalsForChildren { get; public set; }
    public bool ShowNullAsBlank { get; public set; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    public List`1<CoveredCellRange> CoveredRanges { get; }
    public List`1<FilterExpression> Filters { get; public set; }
    public Dictionary`2<string, SummaryBase> SummaryLibrary { get; }
    public PivotCellInfos PivotValues { get; }
    public HashSet`1<PivotCellInfo> HiddenRowIndexes { get; public set; }
    public Dictionary`2<int, List`1<HiddenGroup>> HiddenPivotRowGroups { get; public set; }
    public Dictionary`2<int, List`1<HiddenGroup>> HiddenPivotColumnGroups { get; public set; }
    public bool RowPivotsOnly { get; public set; }
    public List`1<PivotItem> PivotRows { get; public set; }
    public List`1<PivotItem> PivotColumns { get; public set; }
    public List`1<PivotComputationInfo> PivotCalculations { get; public set; }
    [DefaultValueAttribute("False")]
public bool UseDescriptionInCalculationHeader { get; public set; }
    public bool EmptyPivot { get; internal set; }
    [DefaultValueAttribute("No items in result.")]
public string EmptyPivotString { get; public set; }
    [DefaultValueAttribute("Grand")]
public string GrandString { get; public set; }
    public bool UsePercentageFormat { get; public set; }
    public bool IgnoreWhitespace { get; public set; }
    public bool LoadInBackground { get; public set; }
    public bool CacheRawValues { get; public set; }
    public bool ShowCalculationsAsColumns { get; public set; }
    [DefaultValueAttribute("True")]
public bool ShowEmptyCells { get; public set; }
    public object DataSource { get; public set; }
    public IEnumerable DataSourceList { get; public set; }
    public Type ItemType { get; public set; }
    public PropertyDescriptorCollection ItemProperties { get; public set; }
    public List`1<FieldInfo> AllowedFields { get; }
    public Nullable`1<bool> NotPopulated { get; public set; }
    public double PopulationStatus { get; public set; }
    public FilterItemsCollection ItemCollection { get; public set; }
    public List`1<object> VisibleRecords { get; public set; }
    public bool LockComputations { get; public set; }
    public ListSortDirection SortDirection { get; }
    internal List`1<object> PivotBaseRowItems { get; internal set; }
    internal List`1<object> PivotBaseColumnItems { get; internal set; }
    internal bool IsItemPropertiesFilled { get; internal set; }
    internal Dictionary`2<int, List`1<int>> ColSummands { get; }
    internal Dictionary`2<int, List`1<int>> RowSummands { get; }
    private bool IsCalculationHeaderVisible { get; }
    private bool okToPopulate { get; }
    public PivotCellInfo Item { get; }
    [CompilerGeneratedAttribute]
public void add_PivotSchemaChanged(PivotSchemaChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PivotSchemaChanged(PivotSchemaChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal Dictionary`2<string, PropertyInfo> get_LookUp();
    internal void set_LookUp(Dictionary`2<string, PropertyInfo> value);
    public IndexEngine get_IndexEngine();
    public void set_IndexEngine(IndexEngine value);
    public GetValueDelegate get_GetValue();
    public void set_GetValue(GetValueDelegate value);
    public bool get_EnableDataOptimization();
    public void set_EnableDataOptimization(bool value);
    public bool get_UseIndexedEngine();
    public void set_UseIndexedEngine(bool value);
    public bool get_ApplyFormattedSummary();
    public void set_ApplyFormattedSummary(bool value);
    public Dictionary`2<string, Array> get_EditCellsInfo();
    public void set_EditCellsInfo(Dictionary`2<string, Array> value);
    public bool get_IsDataDynamic();
    public void set_IsDataDynamic(bool value);
    public bool get_ShowGrandTotals();
    public void set_ShowGrandTotals(bool value);
    public GridLayout get_GridLayout();
    public void set_GridLayout(GridLayout value);
    public bool get_ShowSingleCalculationHeader();
    public void set_ShowSingleCalculationHeader(bool value);
    public bool get_EnableLazyLoadOnDemandCalculations();
    public void set_EnableLazyLoadOnDemandCalculations(bool value);
    public bool get_EnableOnDemandCalculations();
    public void set_EnableOnDemandCalculations(bool value);
    public bool get_EnableSubTotalHiding();
    public void set_EnableSubTotalHiding(bool value);
    public bool get_ShowSubTotalsForChildren();
    public void set_ShowSubTotalsForChildren(bool value);
    public bool get_ShowNullAsBlank();
    public void set_ShowNullAsBlank(bool value);
    public int get_RowCount();
    public int get_ColumnCount();
    public List`1<CoveredCellRange> get_CoveredRanges();
    public List`1<FilterExpression> get_Filters();
    public void set_Filters(List`1<FilterExpression> value);
    public Dictionary`2<string, SummaryBase> get_SummaryLibrary();
    public PivotCellInfos get_PivotValues();
    public HashSet`1<PivotCellInfo> get_HiddenRowIndexes();
    public void set_HiddenRowIndexes(HashSet`1<PivotCellInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<int, List`1<HiddenGroup>> get_HiddenPivotRowGroups();
    [CompilerGeneratedAttribute]
public void set_HiddenPivotRowGroups(Dictionary`2<int, List`1<HiddenGroup>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<int, List`1<HiddenGroup>> get_HiddenPivotColumnGroups();
    [CompilerGeneratedAttribute]
public void set_HiddenPivotColumnGroups(Dictionary`2<int, List`1<HiddenGroup>> value);
    public bool get_RowPivotsOnly();
    public void set_RowPivotsOnly(bool value);
    public List`1<PivotItem> get_PivotRows();
    public void set_PivotRows(List`1<PivotItem> value);
    public List`1<PivotItem> get_PivotColumns();
    public void set_PivotColumns(List`1<PivotItem> value);
    public List`1<PivotComputationInfo> get_PivotCalculations();
    public void set_PivotCalculations(List`1<PivotComputationInfo> value);
    public bool get_UseDescriptionInCalculationHeader();
    public void set_UseDescriptionInCalculationHeader(bool value);
    public bool get_EmptyPivot();
    internal void set_EmptyPivot(bool value);
    public string get_EmptyPivotString();
    public void set_EmptyPivotString(string value);
    public string get_GrandString();
    public void set_GrandString(string value);
    public bool get_UsePercentageFormat();
    public void set_UsePercentageFormat(bool value);
    public bool get_IgnoreWhitespace();
    public void set_IgnoreWhitespace(bool value);
    public bool get_LoadInBackground();
    public void set_LoadInBackground(bool value);
    public bool get_CacheRawValues();
    public void set_CacheRawValues(bool value);
    public bool get_ShowCalculationsAsColumns();
    public void set_ShowCalculationsAsColumns(bool value);
    public bool get_ShowEmptyCells();
    public void set_ShowEmptyCells(bool value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public virtual IEnumerable get_DataSourceList();
    public virtual void set_DataSourceList(IEnumerable value);
    [CompilerGeneratedAttribute]
public Type get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(Type value);
    public PropertyDescriptorCollection get_ItemProperties();
    public void set_ItemProperties(PropertyDescriptorCollection value);
    public List`1<FieldInfo> get_AllowedFields();
    public Nullable`1<bool> get_NotPopulated();
    public void set_NotPopulated(Nullable`1<bool> value);
    public double get_PopulationStatus();
    public void set_PopulationStatus(double value);
    public FilterItemsCollection get_ItemCollection();
    public void set_ItemCollection(FilterItemsCollection value);
    public List`1<object> get_VisibleRecords();
    public void set_VisibleRecords(List`1<object> value);
    public bool get_LockComputations();
    public void set_LockComputations(bool value);
    public ListSortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
internal List`1<object> get_PivotBaseRowItems();
    [CompilerGeneratedAttribute]
internal void set_PivotBaseRowItems(List`1<object> value);
    [CompilerGeneratedAttribute]
internal List`1<object> get_PivotBaseColumnItems();
    [CompilerGeneratedAttribute]
internal void set_PivotBaseColumnItems(List`1<object> value);
    [CompilerGeneratedAttribute]
internal bool get_IsItemPropertiesFilled();
    [CompilerGeneratedAttribute]
internal void set_IsItemPropertiesFilled(bool value);
    internal Dictionary`2<int, List`1<int>> get_ColSummands();
    internal Dictionary`2<int, List`1<int>> get_RowSummands();
    private bool get_IsCalculationHeaderVisible();
    private bool get_okToPopulate();
    public PivotCellInfo get_Item(int rowIndex, int columnIndex1);
    public void RefreshItemProperties();
    public void AddFilter(FilterExpression item);
    public void InsertFilter(int index, FilterExpression exp);
    public void RemoveFilter(FilterExpression exp);
    public void ClearFilters();
    public FilterExpression FindFilterByName(string filterName);
    public PivotCellInfo GetPivotEngineValueFor(int rowIndex, int columnIndex1, bool shouldCalculateTotal);
    public void EnsureCalculationsLoaded();
    public bool DoLazyCalculation();
    public void AddAllowedField(FieldInfo fi);
    public List`1<object> GetVisibleRecords(List`1<FilterExpression> Filters);
    public List`1<IComparable> GetRowColumnPivotValuesAt(int row, int column, String& calcFieldName);
    public List`1<object> GetRawItemsForEach(int row, int col);
    public void RemoveAllowedField(FieldInfo fi);
    public void PopulateDefaultPropertyFields();
    public void ClearAllowedFields();
    public void SuspendComputations();
    public void ResumeComputations();
    public void ResumeComputations(bool resetPivotCollections);
    public void ResumeComputations(bool resetPivotCollections, bool shouldRefresh);
    public void Populate();
    public void Reset();
    public void Dispose();
    public void AddPivotCalculation(PivotComputationInfo info);
    public void InsertPivotCalculation(int index, PivotComputationInfo info);
    public void RemovePivotCalculation(PivotComputationInfo info);
    public void AddRowPivot(PivotItem pivotItem);
    public void InsertRowPivot(int index, PivotItem pivotItem);
    public void RemoveRowPivot(PivotItem pivotItem);
    public void AddColumnPivot(PivotItem pivotItem);
    public void InsertColumnPivot(int index, PivotItem pivotItem);
    public void RemoveColumnPivot(PivotItem pivotItem);
    public List`1<object> GetRawItemsFor(int row, int col);
    public void PopulateValueCells();
    public string UpdateCalculatedValue(int row, int col, object v, string fieldName);
    public void CalculateFormula(int row1, int col1, int col, PivotComputationInfo compInfo);
    public void CoverColumnHeaders();
    public void CoverGrandTotalRanges();
    public void CoverRowHeaders();
    public void ReArrangePivotValuesForColumn();
    public void ReArrangePivotValuesForRows();
    public bool IsSummaryColumn(int colIndex);
    public bool IsSummaryColumn(int colIndex, Int32& k);
    public bool IsSummaryColumnWhileOnDemand(int colIndex, Int32& k);
    public bool IsSummaryColumnWhileTopSummary(int colIndex);
    public bool IsSummaryRowWhileTopSummary(int rowIndex);
    public bool IsSummaryRow(int rowIndex, Int32& k);
    public bool IsSummaryRowWhileOnDemand(int rowIndex, Int32& k);
    public bool IsRowSummary(int rowIndex);
    public IComparer AddComparers(Type type);
    public ListSortDirection GetSortDirection(int col);
    public void ClearSorts();
    public void ClearSortAt(int index);
    public bool AnyValueColumnsSorted();
    public int ResolveColumnIndex(int columnIndex);
    public bool IsColumnSorted(int columnIndex);
    public bool CanFilterColumn(int columnIndex);
    public bool CanSortColumn(int columnIndex);
    public string GetFieldNameAtIndex(int columnIndex);
    public void AdjustColumnIndexes(int from, int to);
    public void SortByCalculation(int colIndex);
    public void SortByCalculation(int colIndex, bool isMultiColumn);
    public void SortByCalculation(int colIndex, bool isMultiColumn, ListSortDirection dir);
    public void SortColumnHeader(int colHeaderIndex);
    public void UpdateAllSummariesRespectingHiddenRowIndexes();
    public int GetHiddenRowKeyValueColumnIndex();
    public PivotCellInfo GetUnindexedPivotCellInfo(int row, int col);
    public void RaisePivotSchemaChangedEvent(PivotSchemaChangedArgs e);
    internal object GetReflectedValue(object component, string property);
    protected virtual void OnPivotSchemaChanged(PivotSchemaChangedArgs e);
    private void UpdateSummariesForNextLevel(int levelCol, SummaryBase[] parentSummaries, Int32& startRow);
    private void CombineSummaries(SummaryBase[] levelSummaries, SummaryBase[] parentSummaries);
    private SummaryBase[] GetEmptySummaries();
    private void EnsureCalculationAt(int rowIndex, int columnIndex, bool shouldCalculateTotal);
    private void PopulateDefaultSummaryLibrary();
    private SummaryBase GetOnDemandTotal(int row, int col);
    private SummaryBase GetOnDemandValue(int row, int col);
    private void InitSummary(int row, int col, SummaryBase sb);
    private void ResetForSwapRowsColumns(bool reset);
    private string GetCalculationNameFromGridRowColumnIndex(int index);
    private List`1<object> GetRawItemsFor(int row, int col, string rowName, string colName, int row1, int col1);
    private List`1<object> GetRawItemsList(IList data, PropertyDescriptorCollection pdc);
    private void UpdateRowHeaderForExcelLayout();
    private List`1<object> GetCachedRawValues(int row, int col);
    private PropertyDescriptorCollection GetPropertyDescriptorCollection(IList data);
    private void CalculateValues();
    private void SetSummands();
    private void ProcessRowSums();
    private void ProcessColSums();
    private void RemoveDelimeter();
    private void PopulateRowHeaders();
    private void SetRowSummary(int rowIndex);
    private void SetColumnSummary(int columnIndex);
    private void PopulateColumnHeaders();
    private void TransposePivotTable();
    private void SwapRowsColumns(bool reset);
    private int GetRowCountInValuesArea();
    private List`1<IComparable> GetKeyForRawItem(int i, int j);
    private int GetColumnCountInValuesArea();
    private void PopulatePivotGridControl();
    private void FindRowColumnItems(List`1<PivotItem> rowList, List`1<PivotItem> columnList);
    private object CalculateValuesForDateTime(PivotComputationInfo compInfo, Dictionary`2<string, double> component);
    private string DoCalculatedValue(int row, int col, object v, string field);
    private void MarkGrandTotalCellType();
    private bool OkToAddRange(CoveredCellRange range);
    private bool OkToAddRange(CoveredCellRange range, List`1<CoveredCellRange> ranges);
    private void PopulatePivotTable();
    private void DoCalculationTable();
    internal void InitializeSummary(int i, int j);
    private void CellEditing();
    private void CoverRowHeader(int row);
    private void PopulateRow(int row);
    private void DoCalculationTable(int i);
    private void PopulateValueCell(bool isSummaryRow, int row, int col, int valueColStart, int valueRowStart, int k, int key, int key1, int count);
    private void ProcessTotals3();
    private int GetParentRowIndex(int currentRow, int column, bool isSummaryRow);
    private int GetParentColumnIndex(int row, int currentColumn, bool isSummaryColumn);
    private int GetImmediateNextParentRowIndex(int currentRow, int column);
    private int GetImmediateNextParentColumnIndex(int row, int currentColumn);
    private Int32[] GetNextParentRowIndex(int currentRowIndex, int parentColumnIndex);
    private Int32[] GetNextParentColumnIndex(int parentRowIndex, int currentColumnIndex);
    private bool IsSummaryColumnWhileOnDemand(int colIndex);
    private bool IsRowSummaryWhileOnDemand(int rowIndex);
    private bool IsGrandTotalCell(int rowIndex, int colIndex);
    private List`1<IComparable> GetKeyAt(int i, int j);
    private List`1<IComparable> GetKeyAt(int i, int j, bool isForGetRawItem);
    private int GetValueStartColumn();
    private int GetValueStartRow();
    private void DoUniqueValuesCount(List`1<PivotItem> list, BinaryList bList, int insertCount);
    private bool AnyPreviousLevelNotEqual(BinaryList bList, int i, int prevCount, int level);
    private IComparer[] GetComparers(List`1<PivotItem> pivotItems);
    private PropertyDescriptor[] ProcessList(List`1<PivotItem> pivotItems);
    private PropertyDescriptor[] GetCalcValuesPDs();
    private PropertyDescriptor GetComplexPropertyDescriptor(PropertyDescriptorCollection pdc, string columnName);
    private void OnPropertyChanged(Expression`1<Func`2<FilterItemElement, R>> expr);
    private void OnPropertyChanged(string propertyName);
    private void AdjustSortKeysForMoving(int from, int to);
    private ListSortDirection GetCalcSortDirection(ListSortDirection calcSortDirection);
    private int SwapPivotColumns(int colHeaderIndex, Dictionary`2<int, string> dictionColumnHeaders, Dictionary`2<int, List`1<PivotCellInfo>> tempDictionary, List`1<string> uniqueHeader, int col);
    private void SortRowPivotColumnAsValue(int colIndex);
    [CompilerGeneratedAttribute]
private bool <RemoveFilter>b__257_0(FilterExpression q);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotGridConstants : object {
    public static string AllString;
    public static string TotalString;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotItem : object {
    private bool allowSort;
    private bool showSubTotal;
    private double width;
    private bool allowFilter;
    private bool enableHyperLinks;
    private string fieldCaption;
    private bool allowRunTimeGroupByField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private SummaryType <SummaryType>k__BackingField;
    [CompilerGeneratedAttribute]
private SummaryBase <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldMappingName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private IComparer <Comparer>k__BackingField;
    public SummaryType SummaryType { get; public set; }
    public SummaryBase Summary { get; public set; }
    public bool ShowSubTotal { get; public set; }
    public bool AllowSort { get; public set; }
    public double Width { get; public set; }
    public bool AllowFilter { get; public set; }
    public bool EnableHyperlinks { get; public set; }
    public string FieldMappingName { get; public set; }
    public string FieldHeader { get; public set; }
    public string FieldCaption { get; public set; }
    public string TotalHeader { get; public set; }
    public string Format { get; public set; }
    [XmlIgnoreAttribute]
public IComparer Comparer { get; public set; }
    public bool AllowRunTimeGroupByField { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public SummaryType get_SummaryType();
    [CompilerGeneratedAttribute]
public void set_SummaryType(SummaryType value);
    [CompilerGeneratedAttribute]
public SummaryBase get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(SummaryBase value);
    public bool get_ShowSubTotal();
    public void set_ShowSubTotal(bool value);
    public bool get_AllowSort();
    public void set_AllowSort(bool value);
    public double get_Width();
    public void set_Width(double value);
    public bool get_AllowFilter();
    public void set_AllowFilter(bool value);
    public bool get_EnableHyperlinks();
    public void set_EnableHyperlinks(bool value);
    [CompilerGeneratedAttribute]
public string get_FieldMappingName();
    [CompilerGeneratedAttribute]
public void set_FieldMappingName(string value);
    [CompilerGeneratedAttribute]
public string get_FieldHeader();
    [CompilerGeneratedAttribute]
public void set_FieldHeader(string value);
    public string get_FieldCaption();
    public void set_FieldCaption(string value);
    [CompilerGeneratedAttribute]
public string get_TotalHeader();
    [CompilerGeneratedAttribute]
public void set_TotalHeader(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public IComparer get_Comparer();
    [CompilerGeneratedAttribute]
public void set_Comparer(IComparer value);
    public bool get_AllowRunTimeGroupByField();
    public void set_AllowRunTimeGroupByField(bool value);
    internal void Dispose();
    private void OnPropertyChanged(string propertyName);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotSchemaChangedArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SchemaChangeHints <ChangeHints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideDeferLayoutUpdate>k__BackingField;
    public SchemaChangeHints ChangeHints { get; public set; }
    public bool OverrideDeferLayoutUpdate { get; public set; }
    [CompilerGeneratedAttribute]
public SchemaChangeHints get_ChangeHints();
    [CompilerGeneratedAttribute]
public void set_ChangeHints(SchemaChangeHints value);
    [CompilerGeneratedAttribute]
public bool get_OverrideDeferLayoutUpdate();
    [CompilerGeneratedAttribute]
public void set_OverrideDeferLayoutUpdate(bool value);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.PivotSchemaChangedEventHandler : MulticastDelegate {
    public PivotSchemaChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PivotSchemaChangedArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PivotSchemaChangedArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.RowType : Enum {
    public int value__;
    public static RowType None;
    public static RowType Summary;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.SchemaChangeHints : Enum {
    public int value__;
    public static SchemaChangeHints None;
    public static SchemaChangeHints GrandTotalVisibility;
    public static SchemaChangeHints RowAdded;
    public static SchemaChangeHints CalculationChanged;
    public static SchemaChangeHints HeadersChanged;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.SortComparer : object {
    private List`1<string> propertyNames;
    private GetValueDelegate GetValue;
    private List`1<string> formats;
    private List`1<IComparer> comparers;
    public SortComparer(List`1<string> propertyNames, List`1<string> formats, List`1<IComparer> comparers, GetValueDelegate GetValue);
    public sealed virtual int Compare(object x, object y);
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.StdDev : SummaryBase {
    internal Type type;
    internal Nullable`1<double> doubelSumX2;
    internal Nullable`1<double> doubleSumX;
    internal Nullable`1<int> intSumX2;
    internal Nullable`1<int> intSumX;
    internal Nullable`1<decimal> decimalSumX2;
    internal Nullable`1<decimal> decimalSumX;
    internal Nullable`1<float> singleSumX2;
    internal Nullable`1<float> singleSumX;
    internal Nullable`1<int> count;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.StdDevP : SummaryBase {
    internal Type type;
    internal Nullable`1<double> doubelSumX2;
    internal Nullable`1<double> doubleSumX;
    internal Nullable`1<int> intSumX2;
    internal Nullable`1<int> intSumX;
    internal Nullable`1<decimal> decimalSumX2;
    internal Nullable`1<decimal> decimalSumX;
    internal Nullable`1<int> count;
    internal Nullable`1<float> singleSumX2;
    internal Nullable`1<float> singleSumX;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.Sum : SummaryBase {
    internal Nullable`1<int> intTotal;
    internal Nullable`1<double> doubleTotal;
    internal Nullable`1<decimal> decimalTotal;
    internal Nullable`1<float> singleTotal;
    internal Type type;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public abstract class Syncfusion.XlsIO.Implementation.PivotAnalysis.SummaryBase : object {
    private bool showNullAsBlank;
    public bool ShowNullAsBlank { get; public set; }
    public bool get_ShowNullAsBlank();
    public void set_ShowNullAsBlank(bool value);
    public abstract virtual void Combine(object other);
    public abstract virtual void Reset();
    public abstract virtual object GetResult();
    public abstract virtual SummaryBase GetInstance();
    public abstract virtual void CombineSummary(SummaryBase other);
}
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.SummaryDisplayLevel : Enum {
    public int value__;
    public static SummaryDisplayLevel All;
    public static SummaryDisplayLevel InnerMostOnly;
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.SummaryPivotItem : object {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SummaryBase> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IComparable> <Keys>k__BackingField;
    public int RowIndex { get; public set; }
    public int ColIndex { get; public set; }
    public List`1<SummaryBase> Values { get; public set; }
    public List`1<IComparable> Keys { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public int get_ColIndex();
    [CompilerGeneratedAttribute]
public void set_ColIndex(int value);
    [CompilerGeneratedAttribute]
public List`1<SummaryBase> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(List`1<SummaryBase> value);
    [CompilerGeneratedAttribute]
public List`1<IComparable> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(List`1<IComparable> value);
    public sealed virtual int CompareTo(object obj);
}
public enum Syncfusion.XlsIO.Implementation.PivotAnalysis.SummaryType : Enum {
    public int value__;
    public static SummaryType DoubleTotalSum;
    public static SummaryType DoubleAverage;
    public static SummaryType DoubleMaximum;
    public static SummaryType DoubleMinimum;
    public static SummaryType DoubleStandardDeviation;
    public static SummaryType DoubleVariance;
    public static SummaryType Count;
    public static SummaryType DecimalTotalSum;
    public static SummaryType IntTotalSum;
    public static SummaryType Custom;
    public static SummaryType DisplayIfDiscreteValuesEqual;
    public static SummaryType Sum;
    public static SummaryType Average;
    public static SummaryType Max;
    public static SummaryType Min;
    public static SummaryType CountNumbers;
    public static SummaryType StdDev;
    public static SummaryType StdDevP;
    public static SummaryType Var;
    public static SummaryType VarP;
}
internal class Syncfusion.XlsIO.Implementation.PivotAnalysis.TextSummary : SummaryBase {
    internal string text;
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.Variance : SummaryBase {
    internal Type type;
    internal Nullable`1<double> doubelSumX2;
    internal Nullable`1<double> doubleSumX;
    internal Nullable`1<int> intSumX2;
    internal Nullable`1<int> intSumX;
    internal Nullable`1<decimal> decimalSumX2;
    internal Nullable`1<decimal> decimalSumX;
    internal Nullable`1<float> singleSumX2;
    internal Nullable`1<float> singleSumX;
    internal Nullable`1<int> count;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotAnalysis.VarianceP : SummaryBase {
    internal Type type;
    internal Nullable`1<double> doubelSumX2;
    internal Nullable`1<double> doubleSumX;
    internal Nullable`1<int> intSumX2;
    internal Nullable`1<int> intSumX;
    internal Nullable`1<decimal> decimalSumX2;
    internal Nullable`1<decimal> decimalSumX;
    internal Nullable`1<float> singleSumX2;
    internal Nullable`1<float> singleSumX;
    internal Nullable`1<int> count;
    public virtual string ToString();
    public virtual void Combine(object other);
    public virtual void CombineSummary(SummaryBase other);
    public virtual void Reset();
    public virtual object GetResult();
    public virtual SummaryBase GetInstance();
}
public class Syncfusion.XlsIO.Implementation.PivotCellFormat : object {
    private PivotFormat m_pivotFormat;
    private ColorObject m_backColor;
    private ExcelPattern m_pattern;
    private ColorObject m_color;
    private ColorObject m_fontColor;
    private double m_fontSize;
    private string m_fontName;
    private bool m_bold;
    private bool m_italic;
    private ExcelUnderline m_underline;
    private bool m_strikeThrough;
    private ColorObject m_topBorderColor;
    private ExcelLineStyle m_topBorderLineStyle;
    private ColorObject m_bottomBorderColor;
    private ExcelLineStyle m_bottomBorderLineStyle;
    private ColorObject m_rightBorderColor;
    private ExcelLineStyle m_rightBorderLineStyle;
    private ColorObject m_leftBorderColor;
    private ExcelLineStyle m_leftBorderLineStyle;
    private ColorObject m_diagonalBorderColor;
    private ExcelLineStyle m_diagonalBorderStyle;
    private bool m_isTopBorderModified;
    private bool m_isBottomBorderModified;
    private bool m_isLeftBorderModified;
    private bool m_isRightBorderModified;
    private bool m_isDiagonalBorderModified;
    private bool m_isBorderFormatPresent;
    private bool m_isFontColorPresent;
    private bool m_isFontFormatPresent;
    private bool m_isBackColorModified;
    private bool m_isPatternFormatPresent;
    private bool m_isPatternColorModified;
    private bool m_isVerticalBorderModified;
    private bool m_isHorizontalBorderModified;
    private ColorObject m_verticalBorderColor;
    private ColorObject m_horizontalBorderColor;
    private ExcelLineStyle m_verticalBorderLineStyle;
    private ExcelLineStyle m_horizontalBorderLineStyle;
    private ExcelHAlign m_horizontalAlignment;
    private int m_indent;
    private ExcelVAlign m_verticalAlignment;
    private int m_rotation;
    private ExcelReadingOrderType m_readingOrder;
    private bool m_bWrapText;
    private bool m_bShrinkToFit;
    private bool m_bLocked;
    private bool m_bFormulaHidden;
    private WorksheetImpl m_worksheet;
    private ushort m_numberFormatIndex;
    private bool m_bNumberFormatPresent;
    private bool m_bIncludeAlignment;
    private bool m_bIncludeProtection;
    internal PivotFormat PivotFormat { get; internal set; }
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern PatternStyle { get; public set; }
    public ExcelKnownColors PatternColor { get; public set; }
    public Color PatternColorRGB { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public double FontSize { get; public set; }
    public string FontName { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool StrikeThrough { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors VerticalBorderColor { get; public set; }
    public Color VerticalBorderColorRGB { get; public set; }
    public ExcelLineStyle VerticalBorderStyle { get; public set; }
    public ExcelKnownColors HorizontalBorderColor { get; public set; }
    public Color HorizontalBorderColorRGB { get; public set; }
    public ExcelLineStyle HorizontalBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public bool IsTopBorderModified { get; public set; }
    public bool IsBottomBorderModified { get; public set; }
    public bool IsRightBorderModified { get; public set; }
    public bool IsLeftBorderModified { get; public set; }
    public bool IsDiagonalBorderModified { get; public set; }
    public bool IsFontFormatPresent { get; public set; }
    public bool IsPatternColorModified { get; public set; }
    public bool IsPatternFormatPresent { get; public set; }
    public bool IsBackgroundColorPresent { get; public set; }
    public bool IsBorderFormatPresent { get; public set; }
    public bool IsFontColorPresent { get; public set; }
    public ColorObject FontColorObject { get; }
    public ColorObject ColorObject { get; }
    public ColorObject BackColorObject { get; }
    public ColorObject TopBorderColorObject { get; }
    public ColorObject BottomBorderColorObject { get; }
    public ColorObject HorizontalBorderColorObject { get; public set; }
    public ColorObject VerticalBorderColorObject { get; public set; }
    public ColorObject RightBorderColorObject { get; }
    public ColorObject LeftBorderColorObject { get; }
    public bool IsVerticalBorderModified { get; public set; }
    public bool IsHorizontalBorderModified { get; public set; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public int IndentLevel { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public ColorObject DiagonalBorderColorObject { get; }
    public ExcelKnownColors DiagonalBorderColor { get; public set; }
    public Color DiagonalBorderColorRGB { get; public set; }
    public ExcelLineStyle DiagonalBorderStyle { get; public set; }
    public ExcelReadingOrderType ReadingOrder { get; public set; }
    public bool WrapText { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public bool Locked { get; public set; }
    public bool FormulaHidden { get; public set; }
    public int Rotation { get; public set; }
    public ushort NumberFormatIndex { get; public set; }
    public string NumberFormat { get; public set; }
    public bool IsNumberFormatPresent { get; public set; }
    public bool IncludeAlignment { get; public set; }
    public bool IncludeProtection { get; public set; }
    internal PivotCellFormat(PivotFormat pivotFormat);
    internal PivotFormat get_PivotFormat();
    internal void set_PivotFormat(PivotFormat value);
    public sealed virtual ExcelKnownColors get_BackColor();
    public sealed virtual void set_BackColor(ExcelKnownColors value);
    public sealed virtual Color get_BackColorRGB();
    public sealed virtual void set_BackColorRGB(Color value);
    public sealed virtual ExcelPattern get_PatternStyle();
    public sealed virtual void set_PatternStyle(ExcelPattern value);
    public sealed virtual ExcelKnownColors get_PatternColor();
    public sealed virtual void set_PatternColor(ExcelKnownColors value);
    public sealed virtual Color get_PatternColorRGB();
    public sealed virtual void set_PatternColorRGB(Color value);
    public sealed virtual ExcelKnownColors get_FontColor();
    public sealed virtual void set_FontColor(ExcelKnownColors value);
    public sealed virtual Color get_FontColorRGB();
    public sealed virtual void set_FontColorRGB(Color value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual bool get_StrikeThrough();
    public sealed virtual void set_StrikeThrough(bool value);
    public sealed virtual ExcelKnownColors get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_TopBorderColorRGB();
    public sealed virtual void set_TopBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_TopBorderStyle();
    public sealed virtual void set_TopBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_VerticalBorderColor();
    public sealed virtual void set_VerticalBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_VerticalBorderColorRGB();
    public sealed virtual void set_VerticalBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_VerticalBorderStyle();
    public sealed virtual void set_VerticalBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_HorizontalBorderColor();
    public sealed virtual void set_HorizontalBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_HorizontalBorderColorRGB();
    public sealed virtual void set_HorizontalBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_HorizontalBorderStyle();
    public sealed virtual void set_HorizontalBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_BottomBorderColorRGB();
    public sealed virtual void set_BottomBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_BottomBorderStyle();
    public sealed virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_RightBorderColorRGB();
    public sealed virtual void set_RightBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_RightBorderStyle();
    public sealed virtual void set_RightBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_LeftBorderColorRGB();
    public sealed virtual void set_LeftBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LeftBorderStyle();
    public sealed virtual void set_LeftBorderStyle(ExcelLineStyle value);
    public sealed virtual bool get_IsTopBorderModified();
    public sealed virtual void set_IsTopBorderModified(bool value);
    public sealed virtual bool get_IsBottomBorderModified();
    public sealed virtual void set_IsBottomBorderModified(bool value);
    public sealed virtual bool get_IsRightBorderModified();
    public sealed virtual void set_IsRightBorderModified(bool value);
    public sealed virtual bool get_IsLeftBorderModified();
    public sealed virtual void set_IsLeftBorderModified(bool value);
    public sealed virtual bool get_IsDiagonalBorderModified();
    public sealed virtual void set_IsDiagonalBorderModified(bool value);
    public sealed virtual bool get_IsFontFormatPresent();
    public sealed virtual void set_IsFontFormatPresent(bool value);
    public sealed virtual bool get_IsPatternColorModified();
    public sealed virtual void set_IsPatternColorModified(bool value);
    public sealed virtual bool get_IsPatternFormatPresent();
    public sealed virtual void set_IsPatternFormatPresent(bool value);
    public sealed virtual bool get_IsBackgroundColorPresent();
    public sealed virtual void set_IsBackgroundColorPresent(bool value);
    public sealed virtual bool get_IsBorderFormatPresent();
    public sealed virtual void set_IsBorderFormatPresent(bool value);
    public sealed virtual bool get_IsFontColorPresent();
    public sealed virtual void set_IsFontColorPresent(bool value);
    public sealed virtual ColorObject get_FontColorObject();
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual ColorObject get_BackColorObject();
    public sealed virtual ColorObject get_TopBorderColorObject();
    public sealed virtual ColorObject get_BottomBorderColorObject();
    public sealed virtual ColorObject get_HorizontalBorderColorObject();
    public void set_HorizontalBorderColorObject(ColorObject value);
    public sealed virtual ColorObject get_VerticalBorderColorObject();
    public void set_VerticalBorderColorObject(ColorObject value);
    public sealed virtual ColorObject get_RightBorderColorObject();
    public sealed virtual ColorObject get_LeftBorderColorObject();
    public sealed virtual bool get_IsVerticalBorderModified();
    public sealed virtual void set_IsVerticalBorderModified(bool value);
    public sealed virtual bool get_IsHorizontalBorderModified();
    public sealed virtual void set_IsHorizontalBorderModified(bool value);
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual ColorObject get_DiagonalBorderColorObject();
    public sealed virtual ExcelKnownColors get_DiagonalBorderColor();
    public sealed virtual void set_DiagonalBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_DiagonalBorderColorRGB();
    public sealed virtual void set_DiagonalBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_DiagonalBorderStyle();
    public sealed virtual void set_DiagonalBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelReadingOrderType get_ReadingOrder();
    public sealed virtual void set_ReadingOrder(ExcelReadingOrderType value);
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual bool get_ShrinkToFit();
    public sealed virtual void set_ShrinkToFit(bool value);
    public sealed virtual bool get_Locked();
    public sealed virtual void set_Locked(bool value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual int get_Rotation();
    public sealed virtual void set_Rotation(int value);
    public sealed virtual ushort get_NumberFormatIndex();
    public sealed virtual void set_NumberFormatIndex(ushort value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual bool get_IsNumberFormatPresent();
    public sealed virtual void set_IsNumberFormatPresent(bool value);
    public sealed virtual bool get_IncludeAlignment();
    public sealed virtual void set_IncludeAlignment(bool value);
    public sealed virtual bool get_IncludeProtection();
    public sealed virtual void set_IncludeProtection(bool value);
    public void Clear();
    internal object Clone(PivotFormat pivotFormat);
    internal void Dispose();
    public virtual bool Equals(object obj);
    internal void SetChanged();
    private void InitializeColors();
    internal void UpdateTopBorderFormat();
    internal void UpdateBottomBorderFormat();
    internal void UpdateBackColor();
    internal void UpdateColor();
    internal void UpdateLeftBorderFormat();
    internal void UpdateRightBorderFormat();
    internal void UpdateDiagonalBorderFormat();
    internal void UpdateFontColor();
    internal void UpdateBorderStyle();
    internal void UpdateFontFormat();
    internal void UpdatePatternFormat();
    internal void UpdateVerticalBorderFormat();
    internal void UpdateHorizontalBorderFormat();
}
public class Syncfusion.XlsIO.Implementation.PivotCellFormatWrapper : object {
    private List`1<PivotFormat> m_arrPivotFormats;
    private List`1<PivotCellFormat> m_arrPivotCellFormats;
    private WorksheetImpl m_worksheet;
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern PatternStyle { get; public set; }
    public ExcelKnownColors PatternColor { get; public set; }
    public Color PatternColorRGB { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public double FontSize { get; public set; }
    public string FontName { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool StrikeThrough { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors VerticalBorderColor { get; public set; }
    public Color VerticalBorderColorRGB { get; public set; }
    public ExcelLineStyle VerticalBorderStyle { get; public set; }
    public ExcelKnownColors HorizontalBorderColor { get; public set; }
    public Color HorizontalBorderColorRGB { get; public set; }
    public ExcelLineStyle HorizontalBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public bool IsTopBorderModified { get; public set; }
    public bool IsBottomBorderModified { get; public set; }
    public bool IsRightBorderModified { get; public set; }
    public bool IsLeftBorderModified { get; public set; }
    public bool IsDiagonalBorderModified { get; public set; }
    public bool IsFontFormatPresent { get; public set; }
    public bool IsPatternColorModified { get; public set; }
    public bool IsPatternFormatPresent { get; public set; }
    public bool IsBackgroundColorPresent { get; public set; }
    public bool IsBorderFormatPresent { get; public set; }
    public bool IsFontColorPresent { get; public set; }
    public ColorObject FontColorObject { get; }
    public ColorObject ColorObject { get; }
    public ColorObject BackColorObject { get; }
    public ColorObject TopBorderColorObject { get; }
    public ColorObject BottomBorderColorObject { get; }
    public ColorObject HorizontalBorderColorObject { get; }
    public ColorObject VerticalBorderColorObject { get; }
    public ColorObject RightBorderColorObject { get; }
    public ColorObject LeftBorderColorObject { get; }
    public bool IsVerticalBorderModified { get; public set; }
    public bool IsHorizontalBorderModified { get; public set; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public int IndentLevel { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public ColorObject DiagonalBorderColorObject { get; }
    public ExcelKnownColors DiagonalBorderColor { get; public set; }
    public Color DiagonalBorderColorRGB { get; public set; }
    public ExcelLineStyle DiagonalBorderStyle { get; public set; }
    public ExcelReadingOrderType ReadingOrder { get; public set; }
    public bool WrapText { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public bool Locked { get; public set; }
    public bool FormulaHidden { get; public set; }
    public int Rotation { get; public set; }
    public ushort NumberFormatIndex { get; public set; }
    public string NumberFormat { get; public set; }
    public bool IsNumberFormatPresent { get; public set; }
    public bool IncludeAlignment { get; public set; }
    public bool IncludeProtection { get; public set; }
    internal PivotCellFormatWrapper(List`1<PivotFormat> pivotFormats, List`1<PivotCellFormat> pivotCellFormats);
    public sealed virtual ExcelKnownColors get_BackColor();
    public sealed virtual void set_BackColor(ExcelKnownColors value);
    public sealed virtual Color get_BackColorRGB();
    public sealed virtual void set_BackColorRGB(Color value);
    public sealed virtual ExcelPattern get_PatternStyle();
    public sealed virtual void set_PatternStyle(ExcelPattern value);
    public sealed virtual ExcelKnownColors get_PatternColor();
    public sealed virtual void set_PatternColor(ExcelKnownColors value);
    public sealed virtual Color get_PatternColorRGB();
    public sealed virtual void set_PatternColorRGB(Color value);
    public sealed virtual ExcelKnownColors get_FontColor();
    public sealed virtual void set_FontColor(ExcelKnownColors value);
    public sealed virtual Color get_FontColorRGB();
    public sealed virtual void set_FontColorRGB(Color value);
    public sealed virtual double get_FontSize();
    public sealed virtual void set_FontSize(double value);
    public sealed virtual string get_FontName();
    public sealed virtual void set_FontName(string value);
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual bool get_StrikeThrough();
    public sealed virtual void set_StrikeThrough(bool value);
    public sealed virtual ExcelKnownColors get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_TopBorderColorRGB();
    public sealed virtual void set_TopBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_TopBorderStyle();
    public sealed virtual void set_TopBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_VerticalBorderColor();
    public sealed virtual void set_VerticalBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_VerticalBorderColorRGB();
    public sealed virtual void set_VerticalBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_VerticalBorderStyle();
    public sealed virtual void set_VerticalBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_HorizontalBorderColor();
    public sealed virtual void set_HorizontalBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_HorizontalBorderColorRGB();
    public sealed virtual void set_HorizontalBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_HorizontalBorderStyle();
    public sealed virtual void set_HorizontalBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_BottomBorderColorRGB();
    public sealed virtual void set_BottomBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_BottomBorderStyle();
    public sealed virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_RightBorderColorRGB();
    public sealed virtual void set_RightBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_RightBorderStyle();
    public sealed virtual void set_RightBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_LeftBorderColorRGB();
    public sealed virtual void set_LeftBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LeftBorderStyle();
    public sealed virtual void set_LeftBorderStyle(ExcelLineStyle value);
    public sealed virtual bool get_IsTopBorderModified();
    public sealed virtual void set_IsTopBorderModified(bool value);
    public sealed virtual bool get_IsBottomBorderModified();
    public sealed virtual void set_IsBottomBorderModified(bool value);
    public sealed virtual bool get_IsRightBorderModified();
    public sealed virtual void set_IsRightBorderModified(bool value);
    public sealed virtual bool get_IsLeftBorderModified();
    public sealed virtual void set_IsLeftBorderModified(bool value);
    public sealed virtual bool get_IsDiagonalBorderModified();
    public sealed virtual void set_IsDiagonalBorderModified(bool value);
    public sealed virtual bool get_IsFontFormatPresent();
    public sealed virtual void set_IsFontFormatPresent(bool value);
    public sealed virtual bool get_IsPatternColorModified();
    public sealed virtual void set_IsPatternColorModified(bool value);
    public sealed virtual bool get_IsPatternFormatPresent();
    public sealed virtual void set_IsPatternFormatPresent(bool value);
    public sealed virtual bool get_IsBackgroundColorPresent();
    public sealed virtual void set_IsBackgroundColorPresent(bool value);
    public sealed virtual bool get_IsBorderFormatPresent();
    public sealed virtual void set_IsBorderFormatPresent(bool value);
    public sealed virtual bool get_IsFontColorPresent();
    public sealed virtual void set_IsFontColorPresent(bool value);
    public sealed virtual ColorObject get_FontColorObject();
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual ColorObject get_BackColorObject();
    public sealed virtual ColorObject get_TopBorderColorObject();
    public sealed virtual ColorObject get_BottomBorderColorObject();
    public sealed virtual ColorObject get_HorizontalBorderColorObject();
    public sealed virtual ColorObject get_VerticalBorderColorObject();
    public sealed virtual ColorObject get_RightBorderColorObject();
    public sealed virtual ColorObject get_LeftBorderColorObject();
    public sealed virtual bool get_IsVerticalBorderModified();
    public sealed virtual void set_IsVerticalBorderModified(bool value);
    public sealed virtual bool get_IsHorizontalBorderModified();
    public sealed virtual void set_IsHorizontalBorderModified(bool value);
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual ColorObject get_DiagonalBorderColorObject();
    public sealed virtual ExcelKnownColors get_DiagonalBorderColor();
    public sealed virtual void set_DiagonalBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_DiagonalBorderColorRGB();
    public sealed virtual void set_DiagonalBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_DiagonalBorderStyle();
    public sealed virtual void set_DiagonalBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelReadingOrderType get_ReadingOrder();
    public sealed virtual void set_ReadingOrder(ExcelReadingOrderType value);
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual bool get_ShrinkToFit();
    public sealed virtual void set_ShrinkToFit(bool value);
    public sealed virtual bool get_Locked();
    public sealed virtual void set_Locked(bool value);
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual int get_Rotation();
    public sealed virtual void set_Rotation(int value);
    public sealed virtual ushort get_NumberFormatIndex();
    public sealed virtual void set_NumberFormatIndex(ushort value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual bool get_IsNumberFormatPresent();
    public sealed virtual void set_IsNumberFormatPresent(bool value);
    public sealed virtual bool get_IncludeAlignment();
    public sealed virtual void set_IncludeAlignment(bool value);
    public sealed virtual bool get_IncludeProtection();
    public sealed virtual void set_IncludeProtection(bool value);
    public void Clear();
    internal void Dispose();
    public virtual bool Equals(object obj);
    internal void SetChanged();
}
public enum Syncfusion.XlsIO.Implementation.PivotTables.CellType : Enum {
    public int value__;
    public static CellType None;
    public static CellType RowHeader;
    public static CellType ColumnHeader;
    public static CellType RowGrandTotal;
    public static CellType RowSubTotal;
    public static CellType ColumnSubTotal;
    public static CellType ColumnGrandTotal;
    public static CellType ValueCell;
}
public class Syncfusion.XlsIO.Implementation.PivotTables.FieldGroupImpl : object {
    private PivotCacheFieldImpl m_pivotCacheField;
    private FieldRangeGroup m_rangeGroup;
    private FieldDiscreteRangeGroup m_discreteGroup;
    private bool m_bHasDateTime;
    private bool m_bHasNumber;
    private int m_iParentFieldIndex;
    private bool m_bHasMissingAttribute;
    private bool m_isGrouping;
    internal bool IsGrouping { get; internal set; }
    public int ParentFieldIndex { get; internal set; }
    public int PivotCacheFieldIndex { get; }
    public PivotCacheFieldImpl PivotCacheField { get; }
    internal FieldRangeGroup RangeGroup { get; }
    public DateTime StartDate { get; public set; }
    public DateTime EndDate { get; public set; }
    public double StartNumber { get; public set; }
    public double EndNumber { get; public set; }
    public PivotFieldGroupType GroupBy { get; public set; }
    public double GroupInterval { get; public set; }
    internal bool HasGroupInterval { get; internal set; }
    public List`1<string> PivotRangeGroupNames { get; }
    public List`1<string> PivotDiscreteGroupNames { get; }
    public Byte[] DiscreteGroupIndexes { get; public set; }
    public bool IsDiscrete { get; }
    public bool AutoStartRange { get; public set; }
    public bool AutoEndRange { get; public set; }
    public bool HasDateTime { get; public set; }
    public bool HasNumber { get; public set; }
    internal bool HasMissingAttribute { get; internal set; }
    public FieldGroupImpl(PivotCacheFieldImpl baseField, int parentFieldIndex);
    public FieldGroupImpl(PivotCacheFieldImpl baseField);
    internal bool get_IsGrouping();
    internal void set_IsGrouping(bool value);
    public int get_ParentFieldIndex();
    internal void set_ParentFieldIndex(int value);
    public int get_PivotCacheFieldIndex();
    public PivotCacheFieldImpl get_PivotCacheField();
    internal FieldRangeGroup get_RangeGroup();
    public sealed virtual DateTime get_StartDate();
    public sealed virtual void set_StartDate(DateTime value);
    public sealed virtual DateTime get_EndDate();
    public sealed virtual void set_EndDate(DateTime value);
    public double get_StartNumber();
    public void set_StartNumber(double value);
    public double get_EndNumber();
    public void set_EndNumber(double value);
    public sealed virtual PivotFieldGroupType get_GroupBy();
    public sealed virtual void set_GroupBy(PivotFieldGroupType value);
    public sealed virtual double get_GroupInterval();
    public sealed virtual void set_GroupInterval(double value);
    internal bool get_HasGroupInterval();
    internal void set_HasGroupInterval(bool value);
    public List`1<string> get_PivotRangeGroupNames();
    public List`1<string> get_PivotDiscreteGroupNames();
    public Byte[] get_DiscreteGroupIndexes();
    public void set_DiscreteGroupIndexes(Byte[] value);
    public bool get_IsDiscrete();
    public bool get_AutoStartRange();
    public void set_AutoStartRange(bool value);
    public bool get_AutoEndRange();
    public void set_AutoEndRange(bool value);
    public bool get_HasDateTime();
    public void set_HasDateTime(bool value);
    public bool get_HasNumber();
    public void set_HasNumber(bool value);
    internal bool get_HasMissingAttribute();
    internal void set_HasMissingAttribute(bool value);
    public void FillRangeGroup(String[] values);
    public void FillDiscreteGroup(Int32[] indexes, String[] groupNames);
    internal void AddFieldGroup(PivotFieldGroupType groupType);
    internal PivotCacheFieldImpl AddCacheField(PivotCacheImpl cache, PivotCacheFieldImpl cacheField, PivotCacheFieldImpl pivotCacheField, PivotFieldGroupType type, IList`1<object> items);
    internal void AddPivotField(PivotTableImpl pivotTable, PivotCacheFieldImpl pivotCacheField, PivotFieldGroupType type, IList`1<string> items, PivotItemOptions options);
    internal void AddField(PivotTableImpl pivotTable, PivotCacheFieldImpl cacheField, PivotItemOptions item, List`1<PivotFieldGroupType> fieldList, int index, int itemCount);
    internal void AxisOrder(PivotTableImpl pivotTable, int cacheFieldIndex);
    internal bool CanAddField(IList`1<PivotFieldGroupType> fieldList, PivotFieldGroupType groupType);
    internal void RemoveFieldGroup(PivotFieldGroupType fieldGroupType);
    internal void RemoveGroup(PivotTableImpl pivotTable, Dictionary`2<int, PivotFieldGroupType> fieldList, PivotFieldGroupType fieldType, int cacheFieldIndex, int index, bool order);
    internal void RemoveField(PivotTableImpl pivotTable, PivotFieldGroupType type, Dictionary`2<int, PivotFieldGroupType> fieldList, int cacheFieldIndex, int LastIndex);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.PivotTables.FilterColumnFilters : object {
    private List`1<string> Values;
    public string Item { get; }
    public string get_Item(int index);
    public int Count();
    public void Add(string Value);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.InternalReference : object {
    private PivotAreaReference m_pivotAreaReference;
    private List`1<InternalReference> m_innerItems;
    private int m_index;
    private int m_childCurrentIndex;
    internal PivotAreaReference PivotAreaReference { get; internal set; }
    internal List`1<InternalReference> Items { get; internal set; }
    internal int Index { get; internal set; }
    internal int ChildCurrentIndex { get; internal set; }
    internal InternalReference(int index, PivotAreaReference pivotAreaReference);
    internal PivotAreaReference get_PivotAreaReference();
    internal void set_PivotAreaReference(PivotAreaReference value);
    internal List`1<InternalReference> get_Items();
    internal void set_Items(List`1<InternalReference> value);
    internal int get_Index();
    internal void set_Index(int value);
    internal int get_ChildCurrentIndex();
    internal void set_ChildCurrentIndex(int value);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotArea : object {
    private PivotAxisTypes m_axis;
    private bool m_iIsCacheIndex;
    private bool m_bIsSubtotal;
    private bool m_bIsDataOnly;
    private int m_iFieldIndex;
    private int m_iFieldPosition;
    private bool m_bHasColumnGrand;
    private bool m_bHasRowGrand;
    private bool m_bIsLableOnly;
    private IRange m_range;
    private bool m_bIsOutline;
    private PivotAreaType m_areaType;
    private PivotAreaReferences m_references;
    private bool m_isAutoSort;
    private bool m_bIsCollapsedLevelsAreSubtotals;
    private string m_offset;
    private List`1<List`1<InternalReference>> m_internalReferences;
    private PivotTableImpl m_pivotTable;
    public PivotAxisTypes Axis { get; public set; }
    public bool IsCacheIndex { get; public set; }
    public bool IsSubtotal { get; public set; }
    public bool IsDataOnly { get; public set; }
    public int FieldIndex { get; public set; }
    public int FieldPosition { get; public set; }
    public bool HasColumnGrand { get; public set; }
    public bool HasRowGrand { get; public set; }
    public bool IsLableOnly { get; public set; }
    public IRange Range { get; public set; }
    public bool IsOutline { get; public set; }
    public PivotAreaType AreaType { get; public set; }
    internal PivotAreaReferences References { get; }
    internal int FirstIndexReference { get; }
    internal bool IsAutoSort { get; internal set; }
    internal bool CollapsedLevelsAreSubtotals { get; internal set; }
    internal string Offset { get; internal set; }
    internal List`1<List`1<InternalReference>> InternalReferences { get; internal set; }
    internal PivotTableImpl PivotTable { get; }
    public PivotArea(PivotCacheFieldImpl cacheField);
    internal PivotArea(PivotTableImpl pivotTable);
    public PivotAxisTypes get_Axis();
    public void set_Axis(PivotAxisTypes value);
    public bool get_IsCacheIndex();
    public void set_IsCacheIndex(bool value);
    public bool get_IsSubtotal();
    public void set_IsSubtotal(bool value);
    public bool get_IsDataOnly();
    public void set_IsDataOnly(bool value);
    public int get_FieldIndex();
    public void set_FieldIndex(int value);
    public int get_FieldPosition();
    public void set_FieldPosition(int value);
    public bool get_HasColumnGrand();
    public void set_HasColumnGrand(bool value);
    public bool get_HasRowGrand();
    public void set_HasRowGrand(bool value);
    public bool get_IsLableOnly();
    public void set_IsLableOnly(bool value);
    public IRange get_Range();
    public void set_Range(IRange value);
    public bool get_IsOutline();
    public void set_IsOutline(bool value);
    public PivotAreaType get_AreaType();
    public void set_AreaType(PivotAreaType value);
    internal PivotAreaReferences get_References();
    internal int get_FirstIndexReference();
    internal bool get_IsAutoSort();
    internal void set_IsAutoSort(bool value);
    internal bool get_CollapsedLevelsAreSubtotals();
    internal void set_CollapsedLevelsAreSubtotals(bool value);
    internal string get_Offset();
    internal void set_Offset(string value);
    internal List`1<List`1<InternalReference>> get_InternalReferences();
    internal void set_InternalReferences(List`1<List`1<InternalReference>> value);
    internal PivotTableImpl get_PivotTable();
    internal object Clone(object parent);
    internal bool Equals(object obj);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotAreaReference : object {
    private PivotSubtotalTypes m_subtotal;
    private bool m_bIsReferByPosition;
    private int m_iCount;
    private int m_iFieldIndex;
    private bool m_bIsRelativeReference;
    private bool m_bIsSelected;
    private List`1<int> m_iIndexes;
    private bool m_bIsDefaultSubtotal;
    public PivotSubtotalTypes Subtotal { get; public set; }
    public bool IsReferByPosition { get; public set; }
    public int Count { get; public set; }
    public int FieldIndex { get; public set; }
    public bool IsRelativeReference { get; public set; }
    public bool IsSelected { get; public set; }
    public List`1<int> Indexes { get; }
    public int FirstIndex { get; }
    internal bool IsDefaultSubTotal { get; internal set; }
    public PivotSubtotalTypes get_Subtotal();
    public void set_Subtotal(PivotSubtotalTypes value);
    public bool get_IsReferByPosition();
    public void set_IsReferByPosition(bool value);
    public int get_Count();
    public void set_Count(int value);
    public int get_FieldIndex();
    public void set_FieldIndex(int value);
    public bool get_IsRelativeReference();
    public void set_IsRelativeReference(bool value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public List`1<int> get_Indexes();
    public int get_FirstIndex();
    internal bool get_IsDefaultSubTotal();
    internal void set_IsDefaultSubTotal(bool value);
    internal object Clone();
    internal bool Equals(object obj);
    private bool CheckOrderedEqual(ICollection`1<T> first, ICollection`1<T> second);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotAutoFilter : object {
    private string str_filterRange;
    private List`1<PivotFilterColumn> m_pivotFilterColumn;
    public string FilterRange { get; public set; }
    public PivotFilterColumn Item { get; }
    public int Count { get; }
    public string get_FilterRange();
    public void set_FilterRange(string value);
    public PivotFilterColumn get_Item(int index);
    public int get_Count();
    public void Add(PivotFilterColumn filterColumn);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotCacheCollection : object {
    public static string DEF_PIVOT_CACHE_STORAGE;
    private WorkbookImpl m_book;
    private Dictionary`2<int, PivotCacheImpl> m_dictCaches;
    private List`1<int> m_arrOrder;
    private IPivotCache Syncfusion.XlsIO.IPivotCaches.Item { get; }
    public PivotCacheImpl Item { get; }
    public int Count { get; }
    public IApplication Application { get; }
    public object Parent { get; }
    public List`1<int> Order { get; }
    public PivotCacheCollection(IApplication application, object parent);
    public PivotCacheCollection(IApplication application, object parent, ICompoundStorage storage, IDecryptor decryptor);
    private sealed virtual override IPivotCache Syncfusion.XlsIO.IPivotCaches.get_Item(int id);
    public PivotCacheImpl get_Item(int id);
    public sealed virtual int get_Count();
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public List`1<int> get_Order();
    public void Parse(ICompoundStorage storage, IDecryptor decryptor);
    public void Clear();
    public void Serialize(ICompoundStorage storage, IEncryptor encryptor);
    public void Add(PivotCacheImpl cache);
    public void Add(int index, PivotCacheImpl cache);
    private int GetFreeIndex(PivotCacheImpl cache);
    public sealed virtual IPivotCache Add(IRange range);
    private void Add(string streamName, PivotCacheImpl cache);
    internal int CheckAndAddCache(PivotCacheImpl cache, Dictionary`2<string, string> hashWorksheetNames);
    public void RemoveAt(int index);
    public Int32[] GetIndexes();
    public sealed virtual object Clone(object parent);
    private WorkbookImpl FindParent(object parent);
    [IteratorStateMachineAttribute("Syncfusion.XlsIO.Implementation.PivotTables.PivotCacheCollection/<GetEnumerator>d__31")]
public sealed virtual IEnumerator`1<PivotCacheImpl> GetEnumerator();
    [IteratorStateMachineAttribute("Syncfusion.XlsIO.Implementation.PivotTables.PivotCacheCollection/<System-Collections-IEnumerable-GetEnumerator>d__32")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotCacheFieldImpl : object {
    internal static int MaxStringLength;
    private PivotFieldRecord m_field;
    private SQLDataTypeIdRecord m_typeId;
    private List`1<IValueHolder> m_arrFieldsData;
    private PivotCalculatedItems m_calculatedItems;
    private int m_iIndex;
    private PivotDataType m_fieldType;
    private Nullable`1<bool> m_bIsDataBaseField;
    private string m_formula;
    private FieldGroupImpl m_fieldGroup;
    private string m_caption;
    private int m_iNumFormatIndex;
    private int m_iParentFieldGroupIndex;
    private int m_iHierarchy;
    private int m_iLevel;
    private Nullable`1<bool> m_bIsParsed;
    private IRange m_range;
    private IList`1<object> m_items;
    private Nullable`1<bool> m_bIsMemberPropertyField;
    private bool m_bIsMixedType;
    private PivotFieldImpl m_parentField;
    public string Formula { get; public set; }
    public Nullable`1<bool> IsDataBaseField { get; public set; }
    public bool IsInIndexList { get; public set; }
    public bool IsDouble { get; public set; }
    public bool IsDoubleInt { get; public set; }
    public bool IsString { get; public set; }
    public bool IsUnknown { get; public set; }
    public bool IsLongIndex { get; public set; }
    public bool IsUnknown2 { get; public set; }
    public bool IsDate { get; }
    public int ItemCount { get; }
    public string Name { get; public set; }
    public int Index { get; public set; }
    public PivotDataType DataType { get; internal set; }
    public bool IsFormulaField { get; }
    internal FieldGroupImpl FieldGroup { get; internal set; }
    internal FieldGroupImpl InternalFieldGroup { get; }
    public string Caption { get; public set; }
    public int NumFormatIndex { get; public set; }
    public PivotCalculatedItems CalculatedItems { get; }
    public int ParentFeildGroupIndex { get; public set; }
    public bool IsFieldGroup { get; }
    internal int Hierarchy { get; internal set; }
    internal int Level { get; internal set; }
    public Nullable`1<bool> IsParsed { get; public set; }
    internal IRange ItemRange { get; internal set; }
    internal IList`1<object> Items { get; internal set; }
    internal Nullable`1<bool> IsMemberPropertyField { get; internal set; }
    internal bool IsMixedType { get; internal set; }
    internal PivotFieldImpl ParentField { get; internal set; }
    [CLSCompliantAttribute("False")]
public PivotCacheFieldImpl(BiffReader reader);
    public string get_Formula();
    public void set_Formula(string value);
    public Nullable`1<bool> get_IsDataBaseField();
    public void set_IsDataBaseField(Nullable`1<bool> value);
    public bool get_IsInIndexList();
    public void set_IsInIndexList(bool value);
    public bool get_IsDouble();
    public void set_IsDouble(bool value);
    public bool get_IsDoubleInt();
    public void set_IsDoubleInt(bool value);
    public bool get_IsString();
    public void set_IsString(bool value);
    public bool get_IsUnknown();
    public void set_IsUnknown(bool value);
    public bool get_IsLongIndex();
    public void set_IsLongIndex(bool value);
    public bool get_IsUnknown2();
    public void set_IsUnknown2(bool value);
    public bool get_IsDate();
    public int get_ItemCount();
    public string get_Name();
    public void set_Name(string value);
    public int get_Index();
    public void set_Index(int value);
    public PivotDataType get_DataType();
    internal void set_DataType(PivotDataType value);
    public bool get_IsFormulaField();
    internal FieldGroupImpl get_FieldGroup();
    internal void set_FieldGroup(FieldGroupImpl value);
    internal FieldGroupImpl get_InternalFieldGroup();
    public string get_Caption();
    public void set_Caption(string value);
    public int get_NumFormatIndex();
    public void set_NumFormatIndex(int value);
    public PivotCalculatedItems get_CalculatedItems();
    public int get_ParentFeildGroupIndex();
    public void set_ParentFeildGroupIndex(int value);
    public bool get_IsFieldGroup();
    internal int get_Hierarchy();
    internal void set_Hierarchy(int value);
    internal int get_Level();
    internal void set_Level(int value);
    public Nullable`1<bool> get_IsParsed();
    public void set_IsParsed(Nullable`1<bool> value);
    internal IRange get_ItemRange();
    internal void set_ItemRange(IRange value);
    internal IList`1<object> get_Items();
    internal void set_Items(IList`1<object> value);
    internal Nullable`1<bool> get_IsMemberPropertyField();
    internal void set_IsMemberPropertyField(Nullable`1<bool> value);
    internal bool get_IsMixedType();
    internal void set_IsMixedType(bool value);
    internal PivotFieldImpl get_ParentField();
    internal void set_ParentField(PivotFieldImpl value);
    public object GetValue(int index);
    internal void Fill(IWorksheet sheet, int row, int lastRow, int column);
    internal int AddValue(object value);
    [CLSCompliantAttribute("False")]
public void Parse(BiffReader reader);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private BiffRecordRaw CreateRecordForValue(object value);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotCacheImpl : CommonObject {
    private CacheDataRecord m_cacheData;
    private CacheDataExRecord m_cacheDataEx;
    private List`1<BiffRecordRaw> m_arrRecords;
    private MemoryStream m_preservedData;
    private PivotCacheFieldsCollection m_lstCacheFields;
    private List`1<PivotIndexListRecord> m_lstPivotIndexes;
    private IRange m_sourceRange;
    private string m_rangeName;
    private int m_iIndex;
    private PivotCacheInfo m_info;
    private bool m_bsupportAdvancedDrill;
    private int m_iCreatedVersion;
    private int m_iMinRefreshableVersion;
    private int m_iRefreshedVersion;
    private bool m_bSupportSubQuery;
    private bool m_bUpgradeOnRefresh;
    private Dictionary`2<string, Stream> m_preservedElements;
    private Relation m_preservedExtenalRelation;
    private string m_relationId;
    private bool m_bHasCacheRecords;
    public RelationCollection preservedCacheRelations;
    private Stream m_consolidation;
    private double m_bMissingItemsLimit;
    private bool m_bTupleCache;
    private bool m_isSerializePivotCache;
    private bool m_hasSlicer;
    public bool IsSerializePivotCache { get; public set; }
    internal bool HasSlicer { get; internal set; }
    [CLSCompliantAttribute("False")]
public ushort StreamId { get; public set; }
    public ExcelDataSourceType SourceType { get; public set; }
    public bool IsUpgradeOnRefresh { get; public set; }
    public string RefreshedBy { get; public set; }
    public bool IsSupportSubQuery { get; public set; }
    public bool IsSaveData { get; public set; }
    public bool IsOptimizedCache { get; public set; }
    public bool EnableRefresh { get; public set; }
    public bool IsBackgroundQuery { get; public set; }
    public int CreatedVersion { get; public set; }
    public int MinRefreshableVersion { get; public set; }
    public int RefreshedVersion { get; public set; }
    public bool IsInvalidData { get; public set; }
    public bool SupportAdvancedDrill { get; public set; }
    public bool IsRefreshOnLoad { get; public set; }
    public DateTime RefreshDate { get; public set; }
    public int RecordCount { get; }
    public Stream Consolidation { get; public set; }
    public IRange SourceRange { get; public set; }
    public PivotCacheFieldsCollection CacheFields { get; }
    public int Index { get; public set; }
    internal PivotCacheInfo Info { get; internal set; }
    internal Dictionary`2<string, Stream> PreservedElements { get; }
    public string RangeName { get; public set; }
    public bool HasNamedRange { get; }
    public int CalculatedItemIndex { get; }
    internal Relation PreservedExtenalRelation { get; internal set; }
    internal string RelationId { get; internal set; }
    internal bool HasCacheRecords { get; internal set; }
    internal double MissingItemsLimit { get; internal set; }
    internal bool TupleCache { get; internal set; }
    public TBIFFRecord TypeCode { get; }
    public int RecordCode { get; }
    public bool NeedDataArray { get; }
    public long StreamPos { get; public set; }
    public PivotCacheImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public PivotCacheImpl(IApplication application, object parent, BiffReader reader, IDecryptor decryptor, string streamName);
    public PivotCacheImpl(IApplication application, object parent, IRange dataRange);
    private void CreateField(IWorksheet sheet, int row, int lastRow, int column);
    public int AddIndexes(Byte[] indexes);
    public object GetValue(int fieldIndex, int row);
    public byte PutValue(int fieldIndex, object value);
    private int Parse(BiffRecordRaw[] data, int iPos);
    private void Parse(BiffReader reader, IDecryptor decryptor, string streamCode);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void Serialize(Stream stream, IEncryptor encryptor);
    public void UpdateAfterInsertRemove(WorksheetImpl worksheet, int index, int count, bool isRow, bool isRemove);
    private void RemoveRowColumn(WorksheetImpl worksheet, int index, int count, bool isRow);
    private void InsertRowColumn(WorksheetImpl worksheet, int index, int count, bool isRow);
    private static bool InRange(IRange sourceRange, WorksheetImpl worksheet, int index, int count, bool isRow);
    public sealed virtual bool get_IsSerializePivotCache();
    public sealed virtual void set_IsSerializePivotCache(bool value);
    internal bool get_HasSlicer();
    internal void set_HasSlicer(bool value);
    public ushort get_StreamId();
    public void set_StreamId(ushort value);
    public sealed virtual ExcelDataSourceType get_SourceType();
    public void set_SourceType(ExcelDataSourceType value);
    public bool get_IsUpgradeOnRefresh();
    public void set_IsUpgradeOnRefresh(bool value);
    public string get_RefreshedBy();
    public void set_RefreshedBy(string value);
    public bool get_IsSupportSubQuery();
    public void set_IsSupportSubQuery(bool value);
    public bool get_IsSaveData();
    public void set_IsSaveData(bool value);
    public bool get_IsOptimizedCache();
    public void set_IsOptimizedCache(bool value);
    public bool get_EnableRefresh();
    public void set_EnableRefresh(bool value);
    public bool get_IsBackgroundQuery();
    public void set_IsBackgroundQuery(bool value);
    public int get_CreatedVersion();
    public void set_CreatedVersion(int value);
    public int get_MinRefreshableVersion();
    public void set_MinRefreshableVersion(int value);
    public int get_RefreshedVersion();
    public void set_RefreshedVersion(int value);
    public bool get_IsInvalidData();
    public void set_IsInvalidData(bool value);
    public bool get_SupportAdvancedDrill();
    public void set_SupportAdvancedDrill(bool value);
    public bool get_IsRefreshOnLoad();
    public void set_IsRefreshOnLoad(bool value);
    public DateTime get_RefreshDate();
    public void set_RefreshDate(DateTime value);
    public int get_RecordCount();
    public Stream get_Consolidation();
    public void set_Consolidation(Stream value);
    public sealed virtual IRange get_SourceRange();
    public sealed virtual void set_SourceRange(IRange value);
    public PivotCacheFieldsCollection get_CacheFields();
    public sealed virtual int get_Index();
    public void set_Index(int value);
    internal PivotCacheInfo get_Info();
    internal void set_Info(PivotCacheInfo value);
    internal Dictionary`2<string, Stream> get_PreservedElements();
    public string get_RangeName();
    public void set_RangeName(string value);
    public bool get_HasNamedRange();
    public int get_CalculatedItemIndex();
    internal Relation get_PreservedExtenalRelation();
    internal void set_PreservedExtenalRelation(Relation value);
    internal string get_RelationId();
    internal void set_RelationId(string value);
    internal bool get_HasCacheRecords();
    internal void set_HasCacheRecords(bool value);
    internal double get_MissingItemsLimit();
    internal void set_MissingItemsLimit(double value);
    internal bool get_TupleCache();
    internal void set_TupleCache(bool value);
    public sealed virtual object Clone(object parent);
    public object Clone(object parent, Dictionary`2<string, string> hashNewNames);
    private IRange CreateExternalRange(object parent, WorkbookImpl book, IRange sourceRange);
    private IRange CreateInvalidRange(object parent, WorkbookImpl book, IRange sourceRange);
    public bool ComparePreservedData(PivotCacheImpl cache);
    public sealed virtual TBIFFRecord get_TypeCode();
    public sealed virtual int get_RecordCode();
    public sealed virtual bool get_NeedDataArray();
    public sealed virtual long get_StreamPos();
    public sealed virtual void set_StreamPos(long value);
    public sealed virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotCacheInfo : object {
    private List`1<BiffRecordRaw> m_records;
    private StreamIdRecord StreamIdRecord { get; }
    public int StreamId { get; public set; }
    public PivotCacheInfo(IList`1<BiffRecordRaw> data, int startIndex);
    private StreamIdRecord get_StreamIdRecord();
    public int get_StreamId();
    public void set_StreamId(int value);
    public int Parse(IList`1<BiffRecordRaw> data, int startIndex);
    public void Serialize(OffsetArrayList records);
    public sealed virtual object Clone();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotCalculatedFields : List`1<PivotFieldImpl> {
    private PivotTableImpl m_pivotTable;
    public IPivotField Item { get; }
    private IPivotField Syncfusion.XlsIO.IPivotCalculatedFields.Item { get; }
    public PivotCalculatedFields(PivotTableImpl pivotTable);
    private sealed virtual override IPivotField Syncfusion.XlsIO.IPivotCalculatedFields.Add(string name, string formula);
    private void UpdatePivotFields(PivotTableImpl table, PivotCacheFieldImpl cacheField, PivotFieldImpl field);
    public sealed virtual IPivotField get_Item(int index);
    private sealed virtual override IPivotField Syncfusion.XlsIO.IPivotCalculatedFields.get_Item(string name);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotCalculatedItemImpl : object {
    private string m_formula;
    private PivotCacheFieldImpl fieldImpl;
    private int m_iFieldIndex;
    private PivotArea m_pivotArea;
    public string Formula { get; public set; }
    public PivotArea PivotArea { get; }
    internal PivotCacheFieldImpl cacheField { get; internal set; }
    internal int FieldIndex { get; internal set; }
    public PivotCalculatedItemImpl(PivotCacheFieldImpl cacheField);
    public sealed virtual string get_Formula();
    public void set_Formula(string value);
    public PivotArea get_PivotArea();
    internal PivotCacheFieldImpl get_cacheField();
    internal void set_cacheField(PivotCacheFieldImpl value);
    internal int get_FieldIndex();
    internal void set_FieldIndex(int value);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotCalculatedItems : List`1<PivotCalculatedItemImpl> {
    public void Add(PivotCalculatedItemImpl item);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotConditionalFormat : object {
    private int m_iPriority;
    private ConditionalFormatScope scope;
    private ConditionalTopNType m_formatType;
    private PivotAreaCollection m_pivotAreas;
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotCustomFilter : object {
    private FilterOperator2007 m_filterOperator;
    private string m_strValue;
    public FilterOperator2007 FilterOperator { get; public set; }
    public string Value { get; public set; }
    public FilterOperator2007 get_FilterOperator();
    public void set_FilterOperator(FilterOperator2007 value);
    public string get_Value();
    public void set_Value(string value);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotCustomFilters : object {
    private bool m_bHasAnd;
    private List`1<PivotCustomFilter> m_pivotCustomFilter;
    public bool HasAnd { get; public set; }
    public PivotCustomFilter Item { get; }
    public int Count { get; }
    public bool get_HasAnd();
    public void set_HasAnd(bool value);
    public PivotCustomFilter get_Item(int index);
    public int get_Count();
    public void Add(PivotCustomFilter customFilter);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotDataField : object {
    private static int BaseItemPrevious;
    private static int BaseItemNext;
    private string m_strName;
    private PivotSubtotalTypes m_subtotal;
    private PivotFieldImpl m_field;
    private PivotFieldDataFormat m_showDataAs;
    private Dictionary`2<PivotFieldDataFormat, string> m_showDataCollections;
    private List`1<PivotFieldDataFormat> m_excel2010Data;
    private int m_baseItem;
    private int m_baseField;
    private PivotViewFieldsExRecord m_viewFieldsEx;
    public string Name { get; public set; }
    public PivotSubtotalTypes Subtotal { get; public set; }
    public PivotFieldImpl Field { get; }
    internal int NumberFormatIndex { get; internal set; }
    public string NumberFormat { get; public set; }
    public PivotFieldDataFormat ShowDataAs { get; public set; }
    public int BaseItem { get; public set; }
    public int BaseField { get; public set; }
    public PivotDataField(string name, PivotSubtotalTypes subtotal, PivotFieldImpl parentField);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual PivotSubtotalTypes get_Subtotal();
    public sealed virtual void set_Subtotal(PivotSubtotalTypes value);
    public PivotFieldImpl get_Field();
    internal int get_NumberFormatIndex();
    internal void set_NumberFormatIndex(int value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual PivotFieldDataFormat get_ShowDataAs();
    public sealed virtual void set_ShowDataAs(PivotFieldDataFormat value);
    public sealed virtual int get_BaseItem();
    public sealed virtual void set_BaseItem(int value);
    public sealed virtual int get_BaseField();
    public sealed virtual void set_BaseField(int value);
    public sealed virtual void SetPreviousBaseItem();
    public sealed virtual void SetNextBaseItem();
    private void InitializeShowData();
    private void InitializeExcel2010Data();
    internal PivotFieldDataFormat SetShowData(string value);
    internal string GetShowData(PivotFieldDataFormat value);
    internal bool IsExcel2010Data();
    public sealed virtual object Clone(object parent);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotDataFields : CollectionBaseEx`1<PivotDataField> {
    private IPivotDataField Syncfusion.XlsIO.IPivotDataFields.Item { get; }
    public IPivotDataField Item { get; }
    public PivotDataFields(IApplication application, object parent);
    private sealed virtual override IPivotDataField Syncfusion.XlsIO.IPivotDataFields.get_Item(int index);
    public sealed virtual IPivotDataField get_Item(string name);
    public sealed virtual IPivotDataField Add(IPivotField field, string name, PivotSubtotalTypes subtotal);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotDynamicFilter : object {
    private DynamicFilterType m_dateFilterType;
    public DynamicFilterType DateFilterType { get; internal set; }
    public DynamicFilterType get_DateFilterType();
    internal void set_DateFilterType(DynamicFilterType value);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotFieldImpl : object {
    private PivotViewFieldsRecord m_viewFields;
    private PivotViewFieldsExRecord m_viewFieldsEx;
    private List`1<PivotViewItemRecord> m_arrItems;
    private PivotCacheFieldImpl m_cacheField;
    private bool m_bDataField;
    public PivotTableImpl m_table;
    private bool m_bCompact;
    private bool m_bIsDragOff;
    private bool m_bIsDragToData;
    private bool m_bShowNewItemsInFilter;
    private bool m_bShowNewItemsOnRefresh;
    private bool m_bShowBlankRow;
    private bool m_bShowPageBreak;
    private int m_iItemsPerPage;
    private int m_iItemIndex;
    private bool m_bMeasureField;
    private bool m_bIsMultiSelected;
    private bool m_bShowOutline;
    private bool m_bShowDropDown;
    private bool m_bShowPropAsCaption;
    private bool m_bShowItemPropAsCaption;
    private bool m_bShowToolTip;
    private Nullable`1<PivotFieldSortType> m_sortType;
    private bool m_bIsAutoFiltersByRank;
    private string m_uniqueName;
    private Dictionary`2<int, PivotItemOptions> m_fieldItemOptions;
    private Stream m_preservedAutoSort;
    private bool m_bIsAllDrilled;
    private bool m_bIsDataSourceSorted;
    private bool m_bIsDefaultDrill;
    private Stream m_futureDataStorage;
    private string m_FilterValue;
    private PivotFilterCollections m_pivotFilters;
    private PivotFieldItemsCollections m_PivotFieldItems;
    public int m_iItemInvisibleCount;
    private string m_pageFieldName;
    private string m_pageFieldCaption;
    private int m_pageFieldHierarchyIndex;
    internal bool m_bItemOptionSorted;
    private bool m_bCacheFieldUpdated;
    private bool m_bIgnore;
    private bool m_bRepeatLabels;
    private PivotInnerItem m_autoSortItem;
    private PivotArea m_pivotArea;
    private Dictionary`2<string, int> m_sortedFieldItems;
    private bool m_enableQuartersAndYears;
    public IPivotFieldGroup FieldGroup { get; }
    internal Stream FutureDataStorageStream { get; internal set; }
    public int Position { get; public set; }
    public PivotAxisTypes Axis { get; public set; }
    public string FilterValue { get; public set; }
    internal bool ItemOptionSorted { get; internal set; }
    internal bool CacheFieldUpdated { get; internal set; }
    public string Name { get; public set; }
    public PivotCacheFieldImpl CacheField { get; }
    public bool IsDataField { get; public set; }
    public int NumberFormatIndex { get; public set; }
    public string NumberFormat { get; public set; }
    public PivotSubtotalTypes Subtotals { get; public set; }
    public bool ShowSubtotalAtTop { get; public set; }
    internal string SubTotalName { get; internal set; }
    public bool IsAutoShow { get; public set; }
    public bool CanDragToRow { get; public set; }
    public bool CanDragToColumn { get; public set; }
    public bool CanDragToPage { get; public set; }
    public bool IsDragToHide { get; public set; }
    public bool CanDragOff { get; public set; }
    public bool IncludeNewItemsInFilter { get; public set; }
    public bool ShowNewItemsInFilter { get; public set; }
    public bool ShowNewItemsOnRefresh { get; public set; }
    public bool ShowBlankRow { get; public set; }
    public bool ShowPageBreak { get; public set; }
    public int ItemsPerPage { get; public set; }
    internal int ItemIndex { get; internal set; }
    public bool IsMeasureField { get; public set; }
    public bool IsMultiSelected { get; public set; }
    public bool IsShowAllItems { get; public set; }
    public bool ShowOutline { get; public set; }
    public bool ShowDropDown { get; public set; }
    public bool ShowPropAsCaption { get; public set; }
    public bool ShowItemPropAsCaption { get; public set; }
    public bool ShowToolTip { get; public set; }
    public Nullable`1<PivotFieldSortType> SortType { get; public set; }
    public bool IsAutoFiltersByRank { get; public set; }
    public string Caption { get; public set; }
    internal Dictionary`2<int, PivotItemOptions> ItemOptions { get; }
    public bool Compact { get; public set; }
    public bool CanDragToData { get; public set; }
    public string Formula { get; public set; }
    public bool IsFormulaField { get; }
    public Stream PreservedAutoSort { get; public set; }
    internal bool IsAllDrilled { get; internal set; }
    internal bool IsDataSourceSorted { get; internal set; }
    internal bool IsDefaultDrill { get; internal set; }
    public IPivotFilters PivotFilters { get; }
    public IPivotFieldItems Items { get; }
    internal string PageFieldName { get; internal set; }
    internal string PageFieldCaption { get; internal set; }
    internal int PageFieldHierarchyIndex { get; internal set; }
    internal PivotTableImpl PivotTable { get; }
    internal bool Ignore { get; internal set; }
    public bool RepeatLabels { get; public set; }
    internal PivotInnerItem AutoSortItem { get; internal set; }
    internal PivotArea PivotArea { get; internal set; }
    internal Dictionary`2<string, int> SortedFieldItems { get; internal set; }
    public bool EnableQuartersAndYears { get; public set; }
    internal PivotFieldImpl(PivotTableImpl table);
    public PivotFieldImpl(PivotCacheFieldImpl cacheField, PivotTableImpl table);
    public sealed virtual IPivotFieldGroup get_FieldGroup();
    internal Stream get_FutureDataStorageStream();
    internal void set_FutureDataStorageStream(Stream value);
    public sealed virtual int get_Position();
    public sealed virtual void set_Position(int value);
    public sealed virtual PivotAxisTypes get_Axis();
    public sealed virtual void set_Axis(PivotAxisTypes value);
    public sealed virtual string get_FilterValue();
    public sealed virtual void set_FilterValue(string value);
    internal bool get_ItemOptionSorted();
    internal void set_ItemOptionSorted(bool value);
    internal bool get_CacheFieldUpdated();
    internal void set_CacheFieldUpdated(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public PivotCacheFieldImpl get_CacheField();
    public bool get_IsDataField();
    public void set_IsDataField(bool value);
    public int get_NumberFormatIndex();
    public void set_NumberFormatIndex(int value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual PivotSubtotalTypes get_Subtotals();
    public sealed virtual void set_Subtotals(PivotSubtotalTypes value);
    public sealed virtual bool get_ShowSubtotalAtTop();
    public sealed virtual void set_ShowSubtotalAtTop(bool value);
    internal string get_SubTotalName();
    internal void set_SubTotalName(string value);
    public bool get_IsAutoShow();
    public void set_IsAutoShow(bool value);
    public sealed virtual bool get_CanDragToRow();
    public sealed virtual void set_CanDragToRow(bool value);
    public sealed virtual bool get_CanDragToColumn();
    public sealed virtual void set_CanDragToColumn(bool value);
    public sealed virtual bool get_CanDragToPage();
    public sealed virtual void set_CanDragToPage(bool value);
    public bool get_IsDragToHide();
    public void set_IsDragToHide(bool value);
    public sealed virtual bool get_CanDragOff();
    public sealed virtual void set_CanDragOff(bool value);
    public sealed virtual bool get_IncludeNewItemsInFilter();
    public sealed virtual void set_IncludeNewItemsInFilter(bool value);
    public bool get_ShowNewItemsInFilter();
    public void set_ShowNewItemsInFilter(bool value);
    public bool get_ShowNewItemsOnRefresh();
    public void set_ShowNewItemsOnRefresh(bool value);
    public sealed virtual bool get_ShowBlankRow();
    public sealed virtual void set_ShowBlankRow(bool value);
    public bool get_ShowPageBreak();
    public void set_ShowPageBreak(bool value);
    public int get_ItemsPerPage();
    public void set_ItemsPerPage(int value);
    internal int get_ItemIndex();
    internal void set_ItemIndex(int value);
    public bool get_IsMeasureField();
    public void set_IsMeasureField(bool value);
    public bool get_IsMultiSelected();
    public void set_IsMultiSelected(bool value);
    public bool get_IsShowAllItems();
    public void set_IsShowAllItems(bool value);
    public bool get_ShowOutline();
    public void set_ShowOutline(bool value);
    public bool get_ShowDropDown();
    public void set_ShowDropDown(bool value);
    public bool get_ShowPropAsCaption();
    public void set_ShowPropAsCaption(bool value);
    public bool get_ShowItemPropAsCaption();
    public void set_ShowItemPropAsCaption(bool value);
    public bool get_ShowToolTip();
    public void set_ShowToolTip(bool value);
    public Nullable`1<PivotFieldSortType> get_SortType();
    public void set_SortType(Nullable`1<PivotFieldSortType> value);
    public bool get_IsAutoFiltersByRank();
    public void set_IsAutoFiltersByRank(bool value);
    public string get_Caption();
    public void set_Caption(string value);
    internal Dictionary`2<int, PivotItemOptions> get_ItemOptions();
    public bool get_Compact();
    public void set_Compact(bool value);
    public sealed virtual bool get_CanDragToData();
    public sealed virtual void set_CanDragToData(bool value);
    public sealed virtual string get_Formula();
    public sealed virtual void set_Formula(string value);
    public sealed virtual bool get_IsFormulaField();
    public Stream get_PreservedAutoSort();
    public void set_PreservedAutoSort(Stream value);
    internal bool get_IsAllDrilled();
    internal void set_IsAllDrilled(bool value);
    internal bool get_IsDataSourceSorted();
    internal void set_IsDataSourceSorted(bool value);
    internal bool get_IsDefaultDrill();
    internal void set_IsDefaultDrill(bool value);
    public sealed virtual IPivotFilters get_PivotFilters();
    public sealed virtual IPivotFieldItems get_Items();
    internal string get_PageFieldName();
    internal void set_PageFieldName(string value);
    internal string get_PageFieldCaption();
    internal void set_PageFieldCaption(string value);
    internal int get_PageFieldHierarchyIndex();
    internal void set_PageFieldHierarchyIndex(int value);
    internal PivotTableImpl get_PivotTable();
    internal bool get_Ignore();
    internal void set_Ignore(bool value);
    public sealed virtual bool get_RepeatLabels();
    public sealed virtual void set_RepeatLabels(bool value);
    internal PivotInnerItem get_AutoSortItem();
    internal void set_AutoSortItem(PivotInnerItem value);
    internal PivotArea get_PivotArea();
    internal void set_PivotArea(PivotArea value);
    internal Dictionary`2<string, int> get_SortedFieldItems();
    internal void set_SortedFieldItems(Dictionary`2<string, int> value);
    public sealed virtual bool get_EnableQuartersAndYears();
    public sealed virtual void set_EnableQuartersAndYears(bool value);
    public int Parse(IList data, int iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void AddItemOption(int index, PivotItemOptions item);
    public void AddItemOption(int index);
    internal int GetPosition(PivotFieldItem item);
    internal void SetPosition(PivotFieldItem item, int index);
    private void MovePivotRowsFields(int newIndex);
    private void MovePivotColumnFields(int newIndex);
    private void MovePivotDataFields(int newIndex);
    private void MovePivotPageFields(int newIndex);
    public sealed virtual void Sort(String[] orderByArray);
    public sealed virtual void AutoSort(PivotFieldSortType sortType, int lineNumber);
    internal void PreSort();
    internal void LoadPivotItems(PivotCacheFieldImpl cacheField);
    public sealed virtual object Clone(object parent);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotFieldItem : object {
    private bool b_Visible;
    private PivotFieldImpl m_Parent;
    private string m_name;
    private PivotItemOptions m_itemOptions;
    public string Text { get; public set; }
    internal string Name { get; internal set; }
    public PivotFieldImpl Parent { get; public set; }
    public bool Visible { get; public set; }
    public int Position { get; public set; }
    internal PivotItemOptions ItemOptions { get; internal set; }
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    internal string get_Name();
    internal void set_Name(string value);
    public PivotFieldImpl get_Parent();
    public void set_Parent(PivotFieldImpl value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual int get_Position();
    public sealed virtual void set_Position(int value);
    internal PivotItemOptions get_ItemOptions();
    internal void set_ItemOptions(PivotItemOptions value);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotFieldItemsCollections : object {
    private List`1<PivotFieldItem> m_pivotFilterItem;
    public IPivotFieldItem Item { get; }
    public int Count { get; }
    public IPivotFieldItem Item { get; }
    public sealed virtual IPivotFieldItem get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IPivotFieldItem get_Item(string FilterText);
    public void Add(object Parent, string ItemValue, string text);
    internal void Add(object Parent, string ItemValue, PivotItemOptions itemOption);
    internal int GetPosition(PivotFieldItem item);
    internal void SetPosition(PivotFieldItem item, int index);
    internal void Clear();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotFilterCollections : object {
    private List`1<PivotFilterImpl> m_pivotFilterImpl;
    private IPivotValueLableFilter m_valueFilter;
    private IPivotField m_parent;
    public IPivotValueLableFilter ValueFilter { get; public set; }
    public IPivotField Parent { get; public set; }
    public IPivotFilter Item { get; }
    public PivotFilterCollections(IPivotField field);
    public IPivotValueLableFilter get_ValueFilter();
    public void set_ValueFilter(IPivotValueLableFilter value);
    public sealed virtual IPivotField get_Parent();
    public void set_Parent(IPivotField value);
    public sealed virtual IPivotValueLableFilter Add(PivotFilterType filterType, IPivotField dataField, string Value1, string Value2);
    internal bool IsIntValue(string Value);
    public FilterOperator2007 GetOperator(PivotFilterType filterType);
    public string GetValue(string Value, PivotFilterType filterType);
    internal static DynamicFilterType GetDynamicFilter(PivotFilterType filterType);
    public sealed virtual IPivotFilter Add();
    public sealed virtual IPivotFilter get_Item(int index);
    public void Remove(int index);
    public sealed virtual void Remove();
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotFilterColumn : object {
    private int m_iColumnId;
    private bool m_bHiddenButton;
    private bool m_bShowButton;
    private PivotCustomFilters m_customFilters;
    private FilterColumnFilters m_filterColumnFiltes;
    private PivotTop10Filter m_top10Filter;
    private PivotDynamicFilter m_dynamicFilter;
    public int ColumnId { get; public set; }
    public bool HiddenButton { get; public set; }
    public bool ShowButton { get; public set; }
    public PivotCustomFilters CustomFilters { get; public set; }
    public FilterColumnFilters FilterColumnFilter { get; public set; }
    public PivotTop10Filter Top10Filters { get; public set; }
    public PivotDynamicFilter DynamicFilter { get; public set; }
    public int get_ColumnId();
    public void set_ColumnId(int value);
    public bool get_HiddenButton();
    public void set_HiddenButton(bool value);
    public bool get_ShowButton();
    public void set_ShowButton(bool value);
    public PivotCustomFilters get_CustomFilters();
    public void set_CustomFilters(PivotCustomFilters value);
    public FilterColumnFilters get_FilterColumnFilter();
    public void set_FilterColumnFilter(FilterColumnFilters value);
    public PivotTop10Filter get_Top10Filters();
    public void set_Top10Filters(PivotTop10Filter value);
    public PivotDynamicFilter get_DynamicFilter();
    public void set_DynamicFilter(PivotDynamicFilter value);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotFilterImpl : object {
    private string str_value;
    private PivotFilterCollections m_parent;
    public string Value1 { get; public set; }
    internal PivotFilterImpl(PivotFilterCollections pivotFilterCollections);
    public sealed virtual string get_Value1();
    public sealed virtual void set_Value1(string value);
    private void UpdateFields(PivotFieldImpl pivotField, PivotTableImpl table, string value);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotFormat : object {
    private PivotArea m_pivotArea;
    private IPivotCellFormat m_pivotCellFormat;
    private PivotFormats m_parent;
    private PivotTableImpl m_pivotTable;
    internal PivotArea PivotArea { get; internal set; }
    internal IPivotCellFormat PivotCellFormat { get; internal set; }
    internal PivotTableImpl PivotTable { get; }
    internal PivotFormat(PivotTableImpl pivotTable);
    internal PivotArea get_PivotArea();
    internal void set_PivotArea(PivotArea value);
    internal IPivotCellFormat get_PivotCellFormat();
    internal void set_PivotCellFormat(IPivotCellFormat value);
    internal PivotTableImpl get_PivotTable();
    internal object Clone(PivotFormats parent);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotFormats : object {
    private PivotTableImpl m_parent;
    private List`1<PivotFormat> m_pivotFormats;
    internal PivotTableImpl Parent { get; }
    internal PivotFormat Item { get; }
    internal int Count { get; }
    internal List`1<PivotFormat> Formats { get; }
    public PivotFormats(PivotTableImpl parent);
    internal PivotTableImpl get_Parent();
    internal PivotFormat get_Item(int index);
    internal int get_Count();
    internal List`1<PivotFormat> get_Formats();
    internal void Add(PivotFormat pivotFormat);
    internal void AddRange(List`1<PivotFormat> pivotFormats);
    internal bool Contains(PivotFormat pivotFormat);
    internal int IndexOf(PivotFormat pivotFormat);
    internal object Clone(PivotTableImpl parent);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotInnerItem : object {
    private object m_parent;
    private string m_name;
    private int m_fieldIndex;
    private int m_valueIndex;
    private List`1<PivotInnerItem> m_items;
    private bool m_bSubtotal;
    internal object Parent { get; }
    internal string Name { get; internal set; }
    internal int FieldIndex { get; internal set; }
    internal int ValueIndex { get; internal set; }
    internal List`1<PivotInnerItem> Items { get; internal set; }
    internal bool IsSubtotal { get; internal set; }
    internal PivotInnerItem(string name, object parent);
    internal object get_Parent();
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_FieldIndex();
    internal void set_FieldIndex(int value);
    internal int get_ValueIndex();
    internal void set_ValueIndex(int value);
    internal List`1<PivotInnerItem> get_Items();
    internal void set_Items(List`1<PivotInnerItem> value);
    internal bool get_IsSubtotal();
    internal void set_IsSubtotal(bool value);
    internal static int GetIndex(List`1<PivotInnerItem> pivotInnerItems, string name);
    internal object Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotItemOptions : object {
    private bool m_hasItemProperties;
    private bool m_bHasChildItems;
    private bool m_bIsExpaned;
    private bool m_bDrillAcross;
    private bool m_bIsCalculatedItem;
    private bool m_bIsHidden;
    private bool m_bIsMissing;
    private string m_userCaption;
    private bool m_bIsChar;
    private bool m_bIsHiddenDetails;
    private PivotItemType m_itemType;
    internal bool HasItemProperties { get; internal set; }
    public bool HasChildItems { get; public set; }
    public bool IsExpaned { get; public set; }
    public bool DrillAcross { get; public set; }
    public bool IsCalculatedItem { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsMissing { get; public set; }
    public string UserCaption { get; public set; }
    public bool IsChar { get; public set; }
    public bool IsHiddenDetails { get; public set; }
    public PivotItemType ItemType { get; public set; }
    internal bool get_HasItemProperties();
    internal void set_HasItemProperties(bool value);
    public bool get_HasChildItems();
    public void set_HasChildItems(bool value);
    public bool get_IsExpaned();
    public void set_IsExpaned(bool value);
    public bool get_DrillAcross();
    public void set_DrillAcross(bool value);
    public bool get_IsCalculatedItem();
    public void set_IsCalculatedItem(bool value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsMissing();
    public void set_IsMissing(bool value);
    public string get_UserCaption();
    public void set_UserCaption(string value);
    public bool get_IsChar();
    public void set_IsChar(bool value);
    public bool get_IsHiddenDetails();
    public void set_IsHiddenDetails(bool value);
    public PivotItemType get_ItemType();
    public void set_ItemType(PivotItemType value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotTableCollection : CollectionBaseEx`1<object> {
    public IPivotTable Item { get; }
    public IPivotTable Item { get; }
    public WorksheetImpl ParentWorksheet { get; }
    public PivotTableCollection(IApplication application, object parent);
    public sealed virtual IPivotTable get_Item(int index);
    public sealed virtual IPivotTable get_Item(string name);
    public WorksheetImpl get_ParentWorksheet();
    public int Parse(IList data, int iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void Add(PivotTableImpl table);
    public sealed virtual IPivotTable Add(string name, IRange location, IPivotCache cache);
    public sealed virtual object Clone(object parent);
    public PivotTableCollection Clone(WorksheetImpl worksheet, Dictionary`2<string, string> hashWorksheetNames);
    public sealed virtual void Remove(string name);
    public sealed virtual void RemoveAt(int index);
    private void CleanAfterRemove(PivotTableImpl pivotTable);
    internal void ClearWithoutCheck();
    [IteratorStateMachineAttribute("Syncfusion.XlsIO.Implementation.PivotTables.PivotTableCollection/<GetEnumerator>d__17")]
public sealed virtual IEnumerator`1<PivotTableImpl> GetEnumerator();
    [IteratorStateMachineAttribute("Syncfusion.XlsIO.Implementation.PivotTables.PivotTableCollection/<System-Collections-IEnumerable-GetEnumerator>d__18")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotTableFields : CollectionBaseEx`1<PivotFieldImpl> {
    private PivotTableImpl m_table;
    private IPivotField Syncfusion.XlsIO.IPivotFields.Item { get; }
    public IPivotField Item { get; }
    public PivotTableFields(IApplication application, object parent);
    public PivotTableFields(PivotTableImpl table);
    private sealed virtual override IPivotField Syncfusion.XlsIO.IPivotFields.get_Item(int index);
    public sealed virtual IPivotField get_Item(string name);
    internal void Add(PivotCacheFieldImpl cacheField, WorkbookImpl book);
    public virtual object Clone(object parent);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotTableFilter : object {
    private string m_DescriptionAttribute;
    private int i_EvalOrder;
    private int i_Field;
    private int i_FilterId;
    private string str_Value1;
    private string str_Value2;
    private PivotFilterType type;
    private int m_iMeasureFld;
    private int m_iMeasureHier;
    private List`1<PivotAutoFilter> m_pivotAutoFilter;
    public string DescriptionAttribute { get; public set; }
    public int EvalOrder { get; public set; }
    public int Field { get; public set; }
    public int MeasureFld { get; public set; }
    internal int MeasureHier { get; internal set; }
    public int FilterId { get; public set; }
    public string Value1 { get; public set; }
    public string Value2 { get; public set; }
    public PivotFilterType Type { get; public set; }
    public PivotAutoFilter Item { get; }
    public int Count { get; }
    public string get_DescriptionAttribute();
    public void set_DescriptionAttribute(string value);
    public int get_EvalOrder();
    public void set_EvalOrder(int value);
    public int get_Field();
    public void set_Field(int value);
    public int get_MeasureFld();
    public void set_MeasureFld(int value);
    internal int get_MeasureHier();
    internal void set_MeasureHier(int value);
    public int get_FilterId();
    public void set_FilterId(int value);
    public string get_Value1();
    public void set_Value1(string value);
    public string get_Value2();
    public void set_Value2(string value);
    public PivotFilterType get_Type();
    public void set_Type(PivotFilterType value);
    public PivotAutoFilter get_Item(int index);
    public int get_Count();
    public void Add(PivotAutoFilter AutoFilter);
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotTableFilters : object {
    private List`1<PivotTableFilter> m_pivotFilter;
    public PivotTableFilter Item { get; }
    public int Count { get; }
    public PivotTableFilter get_Item(int index);
    public int get_Count();
    public void Remove(PivotTableFilter filter);
    public void Add(PivotTableFilter pivotTableFilter);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotTableImpl : CommonObject {
    public static string DefaultDataFieldStart;
    public static TBIFFRecord DEF_FIRSTRECORD_CODE;
    private static TBIFFRecord[] DEF_UNKNOWN_PIVOTRECORDS;
    public static byte Excel2007Version;
    private static byte Excel2010Version;
    private static byte Excel2013Version;
    private static byte Excel2016Version;
    private PivotViewDefinitionRecord m_viewDefinition;
    private List`1<PivotFieldImpl> m_arrFields;
    private RowColumnFiledIdRecord[] m_arrRowColumnFiledId;
    private List`1<LineItemArrayRecord> m_arrLineItems;
    private ViewExtendedInfoRecord m_viewExInfo;
    private PageItemRecord m_pageItem;
    private List`1<DataItemRecord> m_arrDataItems;
    private List`1<BiffRecordRaw> m_arrUnknown;
    private WorkbookImpl m_book;
    private PivotTableFields m_arrPivotFields;
    internal IRange m_location;
    private IRange m_endLocation;
    private PivotDataFields m_dataFields;
    private bool m_bItemPrintTitles;
    private Nullable`1<PivotBuiltInStyles> m_builtInStyle;
    private string customStyleName;
    private WorksheetImpl m_worksheet;
    private List`1<PivotFieldImpl> m_lstRowFields;
    private List`1<PivotFieldImpl> m_lstColumnFields;
    private List`1<PivotFieldImpl> m_lstPageFields;
    private PivotTableOptions m_options;
    private int m_iFirstDataCol;
    private int m_iFirstDataRow;
    private int m_iFirstHeaderRow;
    private int m_iColumnsPerPage;
    private int m_iRowsPerPage;
    private bool m_bShowColHeaderStyle;
    private bool m_bShowColStripes;
    private bool m_bShowLastCol;
    private bool m_bShowRowHeaderStyle;
    private bool m_bShowRowStripes;
    private Stream m_colItemsStream;
    private Stream m_rowItemsStream;
    private bool m_bShowDataFieldInRow;
    private Dictionary`2<string, Stream> m_preservedElements;
    private PivotCalculatedFields m_calculatedFields;
    private bool m_bIsChanged;
    private List`1<IPivotField> m_rowFields;
    private List`1<IPivotField> m_pageFields;
    private List`1<int> m_colFieldsOrder;
    private List`1<int> m_rowFieldsOrder;
    private PivotEngine m_PivotEngine;
    private PivotTableFilters m_filters;
    private PivotTableLayout m_PivotTableLayout;
    private PivotFormats m_pivotFormats;
    private Stream m_pivotFormatsStream;
    private List`1<PivotInnerItem> m_rowFieldsInnerItems;
    private List`1<PivotInnerItem> m_colFieldsInnerItems;
    internal PivotTableLayout PivotLayout { get; internal set; }
    internal PivotTableFilters Filters { get; internal set; }
    public PivotEngine PivotEngineValues { get; public set; }
    public int CacheIndex { get; public set; }
    public bool DisplayErrorString { get; public set; }
    public bool DisplayNullString { get; public set; }
    public bool ColumnGrand { get; public set; }
    public bool EnableDrilldown { get; public set; }
    public bool EnableFieldDialog { get; public set; }
    public bool EnableWizard { get; public set; }
    public string ErrorString { get; public set; }
    public bool ManualUpdate { get; public set; }
    public bool MergeLabels { get; public set; }
    public string Name { get; public set; }
    public string NullString { get; public set; }
    public ExcelPagesOrder PageFieldOrder { get; public set; }
    public string PageFieldStyle { get; public set; }
    public int PageFieldWrapCount { get; public set; }
    public bool RowGrand { get; public set; }
    public PivotCacheImpl Cache { get; }
    public IRange Location { get; public set; }
    public IRange EndLocation { get; public set; }
    internal PivotTableFields InternalFields { get; }
    public PivotTableFields Fields { get; }
    private IPivotFields Syncfusion.XlsIO.IPivotTable.Fields { get; }
    public PivotDataFields DataFields { get; }
    private IPivotDataFields Syncfusion.XlsIO.IPivotTable.DataFields { get; }
    public WorkbookImpl Workbook { get; }
    public WorksheetImpl Worksheet { get; }
    public bool ShowDrillIndicators { get; public set; }
    public bool DisplayFieldCaptions { get; public set; }
    public bool RepeatItemsOnEachPrintedPage { get; public set; }
    public Nullable`1<PivotBuiltInStyles> BuiltInStyle { get; public set; }
    public string CustomStyleName { get; public set; }
    public bool ShowRowGrand { get; public set; }
    public bool ShowColumnGrand { get; public set; }
    public IPivotTableOptions Options { get; }
    public int FirstDataCol { get; public set; }
    public int FirstDataRow { get; public set; }
    public int FirstHeaderRow { get; public set; }
    public int ColumnsPerPage { get; public set; }
    public int RowsPerPage { get; public set; }
    public bool ShowColHeaderStyle { get; public set; }
    public bool ShowColStripes { get; public set; }
    public bool ShowLastCol { get; public set; }
    public bool ShowRowHeaderStyle { get; public set; }
    public bool ShowRowStripes { get; public set; }
    internal Stream ColumnItemsStream { get; internal set; }
    internal Stream RowItemsStream { get; internal set; }
    public bool ShowDataFieldInRow { get; public set; }
    public IApplication Application { get; }
    internal Dictionary`2<string, Stream> PreservedElements { get; }
    public IPivotCalculatedFields CalculatedFields { get; }
    public IPivotFields PageFields { get; }
    internal List`1<IPivotField> PivotRowFields { get; }
    internal List`1<IPivotField> PivotPageFields { get; }
    public IPivotFields RowFields { get; }
    public IPivotFields ColumnFields { get; }
    public bool IsChanged { get; public set; }
    internal List`1<int> ColFieldsOrder { get; }
    internal List`1<int> RowFieldsOrder { get; }
    internal PivotFormats PivotFormats { get; }
    internal Stream PivotFormatsStream { get; internal set; }
    internal List`1<PivotInnerItem> RowFieldsInnerItems { get; }
    internal List`1<PivotInnerItem> ColumnFieldsInnerItems { get; }
    public PivotTableImpl(IApplication application, object parent);
    public PivotTableImpl(IApplication application, object parent, int cacheIndex, IRange location);
    private static PivotTableImpl();
    private void SetWorkbook();
    internal PivotTableLayout get_PivotLayout();
    internal void set_PivotLayout(PivotTableLayout value);
    internal PivotTableFilters get_Filters();
    internal void set_Filters(PivotTableFilters value);
    public sealed virtual PivotEngine get_PivotEngineValues();
    public sealed virtual void set_PivotEngineValues(PivotEngine value);
    public sealed virtual int get_CacheIndex();
    public void set_CacheIndex(int value);
    public bool get_DisplayErrorString();
    public void set_DisplayErrorString(bool value);
    public bool get_DisplayNullString();
    public void set_DisplayNullString(bool value);
    public sealed virtual bool get_ColumnGrand();
    public sealed virtual void set_ColumnGrand(bool value);
    public bool get_EnableDrilldown();
    public void set_EnableDrilldown(bool value);
    public bool get_EnableFieldDialog();
    public void set_EnableFieldDialog(bool value);
    public bool get_EnableWizard();
    public void set_EnableWizard(bool value);
    public string get_ErrorString();
    public void set_ErrorString(string value);
    public bool get_ManualUpdate();
    public void set_ManualUpdate(bool value);
    public bool get_MergeLabels();
    public void set_MergeLabels(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public string get_NullString();
    public void set_NullString(string value);
    public ExcelPagesOrder get_PageFieldOrder();
    public void set_PageFieldOrder(ExcelPagesOrder value);
    public string get_PageFieldStyle();
    public void set_PageFieldStyle(string value);
    public int get_PageFieldWrapCount();
    public void set_PageFieldWrapCount(int value);
    public sealed virtual bool get_RowGrand();
    public sealed virtual void set_RowGrand(bool value);
    public PivotCacheImpl get_Cache();
    public sealed virtual IRange get_Location();
    public sealed virtual void set_Location(IRange value);
    public IRange get_EndLocation();
    public void set_EndLocation(IRange value);
    internal PivotTableFields get_InternalFields();
    public PivotTableFields get_Fields();
    private sealed virtual override IPivotFields Syncfusion.XlsIO.IPivotTable.get_Fields();
    public PivotDataFields get_DataFields();
    private sealed virtual override IPivotDataFields Syncfusion.XlsIO.IPivotTable.get_DataFields();
    public WorkbookImpl get_Workbook();
    public WorksheetImpl get_Worksheet();
    public sealed virtual bool get_ShowDrillIndicators();
    public sealed virtual void set_ShowDrillIndicators(bool value);
    public sealed virtual bool get_DisplayFieldCaptions();
    public sealed virtual void set_DisplayFieldCaptions(bool value);
    public sealed virtual bool get_RepeatItemsOnEachPrintedPage();
    public sealed virtual void set_RepeatItemsOnEachPrintedPage(bool value);
    public sealed virtual Nullable`1<PivotBuiltInStyles> get_BuiltInStyle();
    public sealed virtual void set_BuiltInStyle(Nullable`1<PivotBuiltInStyles> value);
    public string get_CustomStyleName();
    public void set_CustomStyleName(string value);
    public sealed virtual bool get_ShowRowGrand();
    public sealed virtual void set_ShowRowGrand(bool value);
    public sealed virtual bool get_ShowColumnGrand();
    public sealed virtual void set_ShowColumnGrand(bool value);
    public sealed virtual IPivotTableOptions get_Options();
    public int get_FirstDataCol();
    public void set_FirstDataCol(int value);
    public int get_FirstDataRow();
    public void set_FirstDataRow(int value);
    public int get_FirstHeaderRow();
    public void set_FirstHeaderRow(int value);
    public sealed virtual int get_ColumnsPerPage();
    public void set_ColumnsPerPage(int value);
    public sealed virtual int get_RowsPerPage();
    public void set_RowsPerPage(int value);
    public bool get_ShowColHeaderStyle();
    public void set_ShowColHeaderStyle(bool value);
    public bool get_ShowColStripes();
    public void set_ShowColStripes(bool value);
    public bool get_ShowLastCol();
    public void set_ShowLastCol(bool value);
    public bool get_ShowRowHeaderStyle();
    public void set_ShowRowHeaderStyle(bool value);
    public bool get_ShowRowStripes();
    public void set_ShowRowStripes(bool value);
    internal Stream get_ColumnItemsStream();
    internal void set_ColumnItemsStream(Stream value);
    internal Stream get_RowItemsStream();
    internal void set_RowItemsStream(Stream value);
    public sealed virtual bool get_ShowDataFieldInRow();
    public sealed virtual void set_ShowDataFieldInRow(bool value);
    public IApplication get_Application();
    internal Dictionary`2<string, Stream> get_PreservedElements();
    public sealed virtual IPivotCalculatedFields get_CalculatedFields();
    public sealed virtual IPivotFields get_PageFields();
    internal List`1<IPivotField> get_PivotRowFields();
    internal List`1<IPivotField> get_PivotPageFields();
    public sealed virtual IPivotFields get_RowFields();
    public sealed virtual IPivotFields get_ColumnFields();
    public bool get_IsChanged();
    public void set_IsChanged(bool value);
    internal List`1<int> get_ColFieldsOrder();
    internal List`1<int> get_RowFieldsOrder();
    internal PivotFormats get_PivotFormats();
    internal Stream get_PivotFormatsStream();
    internal void set_PivotFormatsStream(Stream value);
    internal List`1<PivotInnerItem> get_RowFieldsInnerItems();
    internal List`1<PivotInnerItem> get_ColumnFieldsInnerItems();
    public sealed virtual void Layout();
    public sealed virtual IPivotCellFormat GetCellFormat(string range);
    public int Parse(IList data, int iPos);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    private void ClearCollections();
    internal void RemovePivotField(PivotAxisTypes pivotAxisTypes, PivotFieldImpl field);
    internal void AddPivotField(PivotAxisTypes pivotAxisTypes, PivotFieldImpl field, bool isData);
    internal List`1<PivotFieldImpl> GetFields(PivotAxisTypes pivotAxisTypes);
    internal PivotTableFields GetPivotFields(PivotAxisTypes pivotAxisTypes);
    internal byte GetPivotVersion();
    private IPivotCellFormat GetPivotCellFormat(IRange pivotRange);
    private PivotFormat GetPivotFormat(IRange pivotCell);
    private bool UpdatePivotArea(PivotArea pivotArea, int column, int row, PivotTableRowLayout layout);
    private PivotInnerItem UpdateInnerItem(PivotArea pivotArea, int column, int row, PivotInnerItem innerItem, bool isColumn, PivotTableRowLayout layout);
    private static int GetParentCount(PivotInnerItem tempInnerItem);
    private int GetCurrentIndex(List`1<PivotInnerItem> innerItems, PivotInnerItem innerItem, Int32& index);
    internal PivotInnerItem SortByFields(List`1<PivotInnerItem> pivotInnerItems, int lineNumber, bool isColumnSort);
    private List`1<PivotInnerItem> GetPivotInnerItems(List`1<PivotFieldImpl> fields);
    private PivotInnerItem GetPivotInnerItem(List`1<PivotInnerItem> innerItems, Int32& index, int lineNumber, PivotInnerItem pivotInnerItem, bool isColumnSort);
    private void AddInnerItems(List`1<PivotInnerItem> items, List`1<PivotFieldImpl> fields, int index);
    private void AddPivotItems(PivotFieldImpl field, PivotInnerItem pivotItem, int parentFieldIndex);
    private bool CheckItem(IRange sourceRange, MigrantRangeImpl range, PivotInnerItem pivotItem, int row);
    internal void AddReferences(PivotInnerItem pivotInnerItem, PivotArea pivotArea);
    internal Dictionary`2<long, ExtendedFormatImpl> ApplyPivotFormats(PivotTableLayout layout);
    private void UpdatePivotCells(PivotTableLayout layout, Dictionary`2<long, ExtendedFormatImpl> pivotFormats, PivotFormat format, int rowIndex, int colIndex, int rowCount);
    internal ExtendedFormatImpl GetExtendedFormat(ExtendedFormatImpl EX, int row, int column, IInternalPivotCellFormat pivotCellFormat);
    private int GetLineNumber(List`1<PivotAreaReference> references, List`1<PivotInnerItem> innerItems, IRange offsetRange, bool isColumn, PivotTableRowLayout rowLayout, Boolean& isSubTotal);
    private int GetTotalInnerCount(List`1<PivotInnerItem> innerItems);
    internal void UpdatePivotFields();
    public sealed virtual object Clone(object parent);
    public object Clone(object parent, int cacheIndex, Dictionary`2<string, string> hashWorksheetNames);
    internal PivotTableImpl ClonePivotFields(PivotTableImpl result);
    internal PivotTableImpl Clone(PivotTableCollection tables, Dictionary`2<string, string> hashWorksheetNames);
    public void AutoFitPivotTable(PivotTableImpl m_pivotTable);
    internal void MoveLocation(int delta);
    private int GetPageFieldsCount();
    internal void SetChanged(bool isClearPivot);
    internal void ClearPivotRange();
    internal PivotCalculatedFields GetCalculatedFields();
    public sealed virtual void ClearTable();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotTableLayout : List`1<List`1<PivotValueCollections>> {
    private List`1<List`1<PivotValueCollections>> pivotValueCollections;
    public int maxRowCount;
    public int maxColumnCount;
    public PivotValueCollections Item { get; public set; }
    public List`1<PivotValueCollections> Item { get; }
    public PivotValueCollections get_Item(int rowIndex, int colIndex);
    public void set_Item(int rowIndex, int colIndex, PivotValueCollections value);
    public List`1<PivotValueCollections> get_Item(int rowIndex);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotTableOptions : object {
    private PivotTableRowLayout m_rowLayout;
    private PivotTableImpl m_pivotTable;
    private ViewExtendedInfoRecord m_extInfo;
    private PivotViewDefinitionRecord m_DefinitionInfo;
    private bool m_bShowAsteriskTotals;
    private string m_columnHeaderCaption;
    private string m_rowHeaderCaption;
    private bool m_bIsCompactNewField;
    private bool m_bIsCompactData;
    private byte m_btCreatedVersion;
    private byte m_btUpdatedVersion;
    private byte m_btMiniRefreshVersion;
    private bool m_bShowCustomSortList;
    private string m_dataCaption;
    private bool m_bIsDataEditable;
    private bool m_bIsDefaultSortOrder;
    private bool m_bEnableFieldProperties;
    private bool m_bIsDefaultAutoSort;
    private bool m_bShowCalcMembers;
    private UInt32 m_iIndent;
    private bool m_bOutline;
    private bool m_bOutlineData;
    private bool m_bMultiFieldFilter;
    private bool m_bShowGridDropZone;
    private PivotPageAreaFieldsOrder m_pageFieldsOrder;
    private bool m_bPreserveFormatting;
    private bool m_bShowTooltips;
    private bool m_bShowDrill;
    private bool m_bShowHeaders;
    private bool m_bPrintTitles;
    private static UInt32 DEF_MAX_INDENT;
    private string m_grandTotalCaption;
    private bool m_showValuesRow;
    private bool m_IsValuesRowAdded;
    public bool IsAlignAutoFormat { get; public set; }
    internal bool IsValuesRowAdded { get; internal set; }
    public bool IsBorderAutoFormat { get; public set; }
    public bool IsNumberAutoFormat { get; public set; }
    public bool IsPatternAutoFormat { get; public set; }
    public bool IsWHAutoFormat { get; public set; }
    public bool IsAutoFormat { get; public set; }
    public bool IsFontAutoFormat { get; public set; }
    public bool ShowValuesRow { get; public set; }
    public bool ShowAsteriskTotals { get; public set; }
    public string ColumnHeaderCaption { get; public set; }
    public string RowHeaderCaption { get; public set; }
    public PivotTableRowLayout RowLayout { get; public set; }
    public byte CreatedVersion { get; public set; }
    public byte UpdatedVersion { get; public set; }
    public byte MiniRefreshVersion { get; public set; }
    public bool ShowCustomSortList { get; public set; }
    public string DataCaption { get; public set; }
    public ushort DataPosition { get; public set; }
    public bool ShowFieldList { get; public set; }
    public bool IsDataEditable { get; public set; }
    public bool EnableFieldProperties { get; public set; }
    public bool IsDefaultAutoSort { get; public set; }
    public bool ShowCalcMembers { get; public set; }
    public UInt32 Indent { get; public set; }
    public bool Outline { get; public set; }
    public bool OutlineData { get; public set; }
    public bool IsMultiFieldFilter { get; public set; }
    public bool ShowGridDropZone { get; public set; }
    public string ErrorString { get; public set; }
    public bool DisplayErrorString { get; public set; }
    public bool DisplayNullString { get; public set; }
    public bool MergeLabels { get; public set; }
    public int PageFieldWrapCount { get; public set; }
    public PivotPageAreaFieldsOrder PageFieldsOrder { get; public set; }
    public string NullString { get; public set; }
    public bool PreserveFormatting { get; public set; }
    public bool ShowTooltips { get; public set; }
    public bool ShowDrillIndicators { get; public set; }
    public bool DisplayFieldCaptions { get; public set; }
    public bool PrintTitles { get; public set; }
    public bool IsSaveData { get; public set; }
    internal UInt32 MaxIndent { get; }
    public string GrandTotalCaption { get; public set; }
    public PivotTableOptions(PivotTableImpl pivotTable, ViewExtendedInfoRecord extInfo, PivotViewDefinitionRecord definitionInfo);
    internal void InitDefault();
    public bool get_IsAlignAutoFormat();
    public void set_IsAlignAutoFormat(bool value);
    internal bool get_IsValuesRowAdded();
    internal void set_IsValuesRowAdded(bool value);
    public bool get_IsBorderAutoFormat();
    public void set_IsBorderAutoFormat(bool value);
    public bool get_IsNumberAutoFormat();
    public void set_IsNumberAutoFormat(bool value);
    public bool get_IsPatternAutoFormat();
    public void set_IsPatternAutoFormat(bool value);
    public bool get_IsWHAutoFormat();
    public void set_IsWHAutoFormat(bool value);
    public bool get_IsAutoFormat();
    public void set_IsAutoFormat(bool value);
    public bool get_IsFontAutoFormat();
    public void set_IsFontAutoFormat(bool value);
    public sealed virtual bool get_ShowValuesRow();
    public sealed virtual void set_ShowValuesRow(bool value);
    public sealed virtual bool get_ShowAsteriskTotals();
    public sealed virtual void set_ShowAsteriskTotals(bool value);
    public sealed virtual string get_ColumnHeaderCaption();
    public sealed virtual void set_ColumnHeaderCaption(string value);
    public sealed virtual string get_RowHeaderCaption();
    public sealed virtual void set_RowHeaderCaption(string value);
    public sealed virtual PivotTableRowLayout get_RowLayout();
    public sealed virtual void set_RowLayout(PivotTableRowLayout value);
    public byte get_CreatedVersion();
    public void set_CreatedVersion(byte value);
    public byte get_UpdatedVersion();
    public void set_UpdatedVersion(byte value);
    public byte get_MiniRefreshVersion();
    public void set_MiniRefreshVersion(byte value);
    public sealed virtual bool get_ShowCustomSortList();
    public sealed virtual void set_ShowCustomSortList(bool value);
    public string get_DataCaption();
    public void set_DataCaption(string value);
    public ushort get_DataPosition();
    public void set_DataPosition(ushort value);
    public sealed virtual bool get_ShowFieldList();
    public sealed virtual void set_ShowFieldList(bool value);
    public sealed virtual bool get_IsDataEditable();
    public sealed virtual void set_IsDataEditable(bool value);
    public sealed virtual bool get_EnableFieldProperties();
    public sealed virtual void set_EnableFieldProperties(bool value);
    public bool get_IsDefaultAutoSort();
    public void set_IsDefaultAutoSort(bool value);
    public bool get_ShowCalcMembers();
    public void set_ShowCalcMembers(bool value);
    public sealed virtual UInt32 get_Indent();
    public sealed virtual void set_Indent(UInt32 value);
    public bool get_Outline();
    public void set_Outline(bool value);
    public bool get_OutlineData();
    public void set_OutlineData(bool value);
    public bool get_IsMultiFieldFilter();
    public void set_IsMultiFieldFilter(bool value);
    public bool get_ShowGridDropZone();
    public void set_ShowGridDropZone(bool value);
    public sealed virtual string get_ErrorString();
    public sealed virtual void set_ErrorString(string value);
    public sealed virtual bool get_DisplayErrorString();
    public sealed virtual void set_DisplayErrorString(bool value);
    public sealed virtual bool get_DisplayNullString();
    public sealed virtual void set_DisplayNullString(bool value);
    public sealed virtual bool get_MergeLabels();
    public sealed virtual void set_MergeLabels(bool value);
    public sealed virtual int get_PageFieldWrapCount();
    public sealed virtual void set_PageFieldWrapCount(int value);
    public sealed virtual PivotPageAreaFieldsOrder get_PageFieldsOrder();
    public sealed virtual void set_PageFieldsOrder(PivotPageAreaFieldsOrder value);
    public sealed virtual string get_NullString();
    public sealed virtual void set_NullString(string value);
    public sealed virtual bool get_PreserveFormatting();
    public sealed virtual void set_PreserveFormatting(bool value);
    public sealed virtual bool get_ShowTooltips();
    public sealed virtual void set_ShowTooltips(bool value);
    public sealed virtual bool get_ShowDrillIndicators();
    public sealed virtual void set_ShowDrillIndicators(bool value);
    public sealed virtual bool get_DisplayFieldCaptions();
    public sealed virtual void set_DisplayFieldCaptions(bool value);
    public sealed virtual bool get_PrintTitles();
    public sealed virtual void set_PrintTitles(bool value);
    public sealed virtual bool get_IsSaveData();
    public sealed virtual void set_IsSaveData(bool value);
    internal UInt32 get_MaxIndent();
    public string get_GrandTotalCaption();
    public void set_GrandTotalCaption(string value);
    public sealed virtual void RepeatAllLabels(bool repeat);
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.Implementation.PivotTables.PivotTableParts : Enum {
    public int value__;
    public static PivotTableParts WholeTable;
    public static PivotTableParts PageFieldsLabels;
    public static PivotTableParts PageFieldsValues;
    public static PivotTableParts FirstColumnStripe;
    public static PivotTableParts SecondColumnStripe;
    public static PivotTableParts FirstRowStripe;
    public static PivotTableParts SecondRowStripe;
    public static PivotTableParts FirstColumn;
    public static PivotTableParts HeaderRow;
    public static PivotTableParts FirstHeaderCell;
    public static PivotTableParts SubtotalColumn1;
    public static PivotTableParts SubtotalColumn2;
    public static PivotTableParts SubtotalColumn3;
    public static PivotTableParts BlankRow;
    public static PivotTableParts SubtotalRow1;
    public static PivotTableParts SubtotalRow2;
    public static PivotTableParts SubtotalRow3;
    public static PivotTableParts ColumnSubHeading1;
    public static PivotTableParts ColumnSubHeading2;
    public static PivotTableParts ColumnSubHeading3;
    public static PivotTableParts RowSubHeading1;
    public static PivotTableParts RowSubHeading2;
    public static PivotTableParts RowSubHeading3;
    public static PivotTableParts GrandTotalColumn;
    public static PivotTableParts GrandTotalRow;
    public static PivotTableParts None;
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotTableStyleRenderer : object {
    private IWorksheet wkSheet;
    internal PivotTableStyleRenderer(IWorksheet worksheet);
    internal ExtendedFormatImpl ApplyStyles(Nullable`1<PivotBuiltInStyles> BuildinStyle, PivotTableParts tableParts);
    internal void DrawPivotBorder(PivotTableLayout layout, Nullable`1<PivotBuiltInStyles> buildInStyles);
    internal ExtendedFormatImpl GetPageFilterLabel(Nullable`1<PivotBuiltInStyles> buildInStyles);
    internal ExtendedFormatImpl GetPageFilterValue(Nullable`1<PivotBuiltInStyles> buildInStyles);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotTop10Filter : object {
    private double m_dFilterValue;
    private double m_dValue;
    private bool m_bPercent;
    private bool m_bTop;
    public double FilterValue { get; public set; }
    public double Value { get; public set; }
    public bool IsPercent { get; public set; }
    public bool IsTop { get; public set; }
    public double get_FilterValue();
    public void set_FilterValue(double value);
    public double get_Value();
    public void set_Value(double value);
    public bool get_IsPercent();
    public void set_IsPercent(bool value);
    public bool get_IsTop();
    public void set_IsTop(bool value);
}
public class Syncfusion.XlsIO.Implementation.PivotTables.PivotValueCollections : object {
    private IRange m_strImmediateRowHeader;
    private IRange m_strImmediateColumnHeader;
    private CellType m_pivotCellType;
    private string m_strValue;
    private PivotTableParts m_PivotTablePartStyle;
    private ExtendedFormatImpl m_XF;
    public PivotTableParts PivotTablePartStyle { get; public set; }
    public IRange ImmediateRowHeader { get; public set; }
    public IRange ImmediateColumnHeader { get; public set; }
    public CellType PivotCellType { get; public set; }
    public string Value { get; public set; }
    public ExtendedFormatImpl XF { get; public set; }
    public PivotTableParts get_PivotTablePartStyle();
    public void set_PivotTablePartStyle(PivotTableParts value);
    public IRange get_ImmediateRowHeader();
    public void set_ImmediateRowHeader(IRange value);
    public IRange get_ImmediateColumnHeader();
    public void set_ImmediateColumnHeader(IRange value);
    public CellType get_PivotCellType();
    public void set_PivotCellType(CellType value);
    public string get_Value();
    public void set_Value(string value);
    public ExtendedFormatImpl get_XF();
    public void set_XF(ExtendedFormatImpl value);
}
internal class Syncfusion.XlsIO.Implementation.PivotTables.PivotValueLableFilter : object {
    private string m_strValue1;
    private string m_strValue2;
    private PivotFilterType m_type;
    private IPivotField m_field;
    public string Value1 { get; public set; }
    public string Value2 { get; public set; }
    public PivotFilterType Type { get; public set; }
    public IPivotField DataField { get; public set; }
    public sealed virtual string get_Value1();
    public void set_Value1(string value);
    public sealed virtual string get_Value2();
    public void set_Value2(string value);
    public sealed virtual PivotFilterType get_Type();
    public void set_Type(PivotFilterType value);
    public sealed virtual IPivotField get_DataField();
    public void set_DataField(IPivotField value);
}
public class Syncfusion.XlsIO.Implementation.PromptEventArgs : EventArgs {
    private object m_value;
    public object Value { get; public set; }
    public object get_Value();
    public void set_Value(object value);
}
public class Syncfusion.XlsIO.Implementation.PromptEventHandler : MulticastDelegate {
    public PromptEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PromptEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PromptEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Syncfusion.XlsIO.Implementation.PropertyInfoExtension : object {
    internal static Object[] GetCustomAttributes(IEnumerable`1<Attribute> attributes);
}
internal class Syncfusion.XlsIO.Implementation.QueryTableField : object {
    private int m_fieldId;
    private string m_name;
    private int m_tableColumnId;
    private bool m_dataBound;
    private QueryTableRefresh m_parent;
    internal int FieldId { get; internal set; }
    internal string Name { get; internal set; }
    internal int TableColumnId { get; internal set; }
    internal bool DataBound { get; internal set; }
    internal QueryTableField(int id, int columnId, QueryTableRefresh parent);
    internal int get_FieldId();
    internal void set_FieldId(int value);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_TableColumnId();
    internal void set_TableColumnId(int value);
    internal bool get_DataBound();
    internal void set_DataBound(bool value);
}
public class Syncfusion.XlsIO.Implementation.QueryTableImpl : object {
    private ExternalConnection m_externalConnection;
    private DataBaseProperty m_dataBaseProperty;
    private bool m_adjustColumnWidth;
    private bool m_isDeleted;
    private string m_name;
    private QueryTableRefresh m_queryTableRefresh;
    private GrowShrinkType m_growShrinkType;
    public ExternalConnection ExternalConnection { get; }
    public bool RefreshOnFileOpen { get; public set; }
    internal GrowShrinkType GrowShrinkType { get; internal set; }
    public ExcelCommandType CommandType { get; public set; }
    public object CommandText { get; public set; }
    public object ConnectionString { get; public set; }
    public bool BackgroundQuery { get; public set; }
    public string Name { get; public set; }
    public UInt32 ConncetionId { get; }
    public UInt32 ConnectionId { get; }
    public bool AdjustColumnWidth { get; public set; }
    internal bool ConnectionDeleted { get; }
    internal bool IsDeleted { get; }
    internal QueryTableRefresh QueryTableRefresh { get; internal set; }
    public IParameters Parameters { get; }
    public QueryTableImpl(IApplication application, object parent, ExternalConnection ExternalConnection);
    public ExternalConnection get_ExternalConnection();
    public bool get_RefreshOnFileOpen();
    public void set_RefreshOnFileOpen(bool value);
    internal GrowShrinkType get_GrowShrinkType();
    internal void set_GrowShrinkType(GrowShrinkType value);
    public ExcelCommandType get_CommandType();
    public void set_CommandType(ExcelCommandType value);
    public object get_CommandText();
    public void set_CommandText(object value);
    public object get_ConnectionString();
    public void set_ConnectionString(object value);
    public bool get_BackgroundQuery();
    public void set_BackgroundQuery(bool value);
    public string get_Name();
    public void set_Name(string value);
    public UInt32 get_ConncetionId();
    public UInt32 get_ConnectionId();
    public bool get_AdjustColumnWidth();
    public void set_AdjustColumnWidth(bool value);
    internal bool get_ConnectionDeleted();
    internal bool get_IsDeleted();
    internal QueryTableRefresh get_QueryTableRefresh();
    internal void set_QueryTableRefresh(QueryTableRefresh value);
    public IParameters get_Parameters();
    internal QueryTableImpl Clone(ListObject Obj, WorkbookImpl book, string ConnectionName);
    public void Delete();
    private object ConvertToASCII(object value);
}
internal class Syncfusion.XlsIO.Implementation.QueryTableRefresh : object {
    private int m_unboundColumnLeft;
    private int m_unboundColumnRight;
    private int m_nextId;
    private List`1<QueryTableField> m_queryTableFields;
    private QueryTableImpl m_parentQueryTable;
    private bool m_preserveSortFilterLayout;
    internal int UnboundColumnsLeft { get; internal set; }
    internal int UnboundColumnsRight { get; internal set; }
    internal List`1<QueryTableField> QueryFields { get; internal set; }
    internal bool PreserveSortFilterLayout { get; internal set; }
    internal int NextId { get; internal set; }
    internal QueryTableRefresh(QueryTableImpl parent);
    internal int get_UnboundColumnsLeft();
    internal void set_UnboundColumnsLeft(int value);
    internal int get_UnboundColumnsRight();
    internal void set_UnboundColumnsRight(int value);
    internal List`1<QueryTableField> get_QueryFields();
    internal void set_QueryFields(List`1<QueryTableField> value);
    internal bool get_PreserveSortFilterLayout();
    internal void set_PreserveSortFilterLayout(bool value);
    internal int get_NextId();
    internal void set_NextId(int value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.RangeImpl : object {
    public static string DEF_DATE_FORMAT;
    public static string DEF_TIME_FORMAT;
    public static string DEF_UK_DATETIME_FORMAT;
    public static int DEF_DATETIME_INDEX;
    private static double DEF_OLE_DOUBLE;
    private static double DEF_MAX_DOUBLE;
    public static string DEF_NUMBER_FORMAT;
    public static string DEF_TEXT_FORMAT;
    public static string DEF_GENERAL_FORMAT;
    internal static string DEF_FORMULAARRAY_FORMAT;
    private static string DEF_SINGLECELL_ERROR;
    public static string DEF_DEFAULT_STYLE;
    internal static int DEF_NORMAL_STYLE_INDEX;
    private static bool DEF_WRAPTEXT_VALUE;
    private static string DEF_EMPTY_DIGIT;
    private static string DEF_OPEN_BRACE;
    internal static string DEF_EQUIVALENT;
    internal static string DEF_AMPERSAND;
    private static TCellType[] DEF_DATETIMECELLTYPES;
    private static ExcelAutoFormat[] DEF_AUTOFORMAT_RIGHT;
    private static ExcelAutoFormat[] DEF_AUTOFORMAT_NUMBER;
    private static char DEF_CELL_NAME_SEPARATER;
    private static char DEF_R1C1_COLUMN;
    private static char DEF_R1C1_ROW;
    private static char DEF_R1C1_OPENBRACKET;
    private static char DEF_R1C1_CLOSEBRACKET;
    private static string DEF_R1C1_FORMAT;
    private static long DEF_MIN_OADATE;
    internal static DateTime DEF_MIN_DATETIME;
    private static long MinAllowedDateTicks;
    private static int DEF_AUTOFORMAT_NUMBER_INDEX;
    private static int DEF_AUTOFORMAT_NUMBER_INDEX_1;
    private static int DEF_AUTOFORMAT_NUMBER_INDEX_2;
    private static int ColumnBitsInCellIndex;
    private static int ArrayFormulaXFFlag;
    private static ExcelLineStyle[] ThinBorders;
    private static int FormulaLengthXls;
    private static int FormulaLengthXlsX;
    internal static char SingleQuote;
    private static string NEW_LINE;
    private static string DEF_PERCENTAGE_FORMAT;
    private static string DEF_DECIMAL_PERCENTAGE_FORMAT;
    private static string DEF_EXPONENTIAL_FORMAT;
    private static string DEF_CULTUREINFO_TIMETOKEN;
    private static string DEF_TIMETOKEN_FORMAT;
    private String[] DEF_DATETIME_FORMULA;
    private static String[] DEF_DATE_SEPARATOR;
    protected static RegexOptions DEF_OPTIONS;
    private static Regex MonthRegex;
    private static Regex DayRegex;
    private static Regex YearRegex;
    private HtmlStringParser m_htmlStringParser;
    private WorksheetImpl m_worksheet;
    private WorkbookImpl m_book;
    protected int m_iLeftColumn;
    protected int m_iRightColumn;
    protected int m_iTopRow;
    protected int m_iBottomRow;
    private bool m_bIsNumReference;
    private bool m_bIsMultiReference;
    private bool m_bIsStringReference;
    private List`1<IRange> m_cells;
    protected CellStyle m_style;
    private bool m_bCells;
    protected DataValidationWrapper m_dataValidation;
    [ThreadStaticAttribute]
private static string m_dateSeperator;
    [ThreadStaticAttribute]
private static string m_timeSeparator;
    protected IRTFWrapper m_rtfString;
    private Char[] unnecessaryChar;
    private String[] osCultureSpecficFormats;
    private String[] floatNumberStyleCultures;
    internal static string UKCultureName;
    private bool m_isEntireRow;
    private bool m_isEntireColumn;
    private bool m_hasDefaultFormat;
    internal bool updateCellValue;
    private OutlineWrapperUtility m_outlineWrapperUtility;
    private int m_noOfSubtotals;
    private bool m_bIsAbsolute;
    internal bool m_bAutofitText;
    internal bool m_isCSVSeparator;
    public string HtmlString { get; public set; }
    internal String[] DefaultStyleNames { get; }
    public string Address { get; }
    public string AddressLocal { get; }
    public string AddressR1C1 { get; }
    public string AddressR1C1Local { get; }
    public bool Boolean { get; public set; }
    public IBorders Borders { get; }
    public IRange[] Cells { get; }
    public int Column { get; }
    public int ColumnGroupLevel { get; }
    public double ColumnWidth { get; public set; }
    public int Count { get; }
    public bool HasDataValidation { get; }
    public bool HasConditionFormats { get; }
    public DateTime DateTime { get; public set; }
    public string DisplayText { get; }
    public IRange End { get; }
    public bool IsEntireRow { get; public set; }
    public bool IsEntireColumn { get; public set; }
    public IRange EntireColumn { get; }
    public IRange EntireRow { get; }
    public string Error { get; public set; }
    public string Formula { get; public set; }
    public string FormulaArray { get; public set; }
    public string FormulaStringValue { get; public set; }
    public double FormulaNumberValue { get; public set; }
    public bool FormulaBoolValue { get; public set; }
    public string FormulaErrorValue { get; public set; }
    public object FormulaValue { get; }
    public bool FormulaHidden { get; public set; }
    public DateTime FormulaDateTime { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public string FormulaArrayR1C1 { get; public set; }
    public bool HasFormula { get; }
    public bool HasFormulaArray { get; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public IHyperLinks Hyperlinks { get; }
    public int IndentLevel { get; public set; }
    public bool IsBoolean { get; }
    public bool IsError { get; }
    public bool IsGroupedByColumn { get; }
    public bool IsGroupedByRow { get; }
    public int LastColumn { get; public set; }
    public int LastRow { get; public set; }
    public double Number { get; public set; }
    public string NumberFormat { get; public set; }
    public int Row { get; }
    public int RowGroupLevel { get; }
    public double RowHeight { get; public set; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public IStyle CellStyle { get; public set; }
    public string CellStyleName { get; public set; }
    public Nullable`1<BuiltInStyles> BuiltInStyle { get; public set; }
    public string Text { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public string Value { get; public set; }
    public string CalculatedValue { get; }
    public object Value2 { get; public set; }
    internal bool IsNumReference { get; internal set; }
    internal bool IsStringReference { get; internal set; }
    internal bool IsMultiReference { get; internal set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public IWorksheet Worksheet { get; }
    public IRange Item { get; public set; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IConditionalFormats ConditionalFormats { get; }
    public IDataValidation DataValidation { get; }
    public bool HasFormulaBoolValue { get; }
    public bool HasFormulaErrorValue { get; }
    public bool HasFormulaDateTime { get; }
    public bool HasFormulaNumberValue { get; }
    public bool HasFormulaStringValue { get; }
    public bool IsBlank { get; }
    public bool IsBlankorHasStyle { get; }
    public bool HasBoolean { get; }
    public bool HasDateTime { get; }
    public bool HasNumber { get; }
    public bool HasString { get; }
    public ICommentShape Comment { get; }
    public IThreadedComment ThreadedComment { get; }
    public IRichTextString RichText { get; }
    public bool HasRichText { get; }
    public bool IsMerged { get; }
    public IRange MergeArea { get; }
    public bool IsInitialized { get; }
    public bool HasStyle { get; }
    public bool WrapText { get; public set; }
    public ExcelIgnoreError IgnoreErrorOptions { get; public set; }
    public bool HasExternalFormula { get; }
    public Nullable`1<bool> IsStringsPreserved { get; public set; }
    internal bool IsAbsolute { get; internal set; }
    public IApplication Application { get; }
    public object Parent { get; }
    private ApplicationImpl AppImplementation { get; }
    public string AddressGlobal { get; }
    public string AddressGlobalWithoutSheetName { get; }
    internal List`1<IRange> CellsList { get; }
    protected internal bool IsSingleCell { get; }
    protected internal int FirstRow { get; protected internal set; }
    protected internal int FirstColumn { get; protected internal set; }
    protected internal string CellName { get; }
    protected internal long CellIndex { get; }
    protected internal TCellType CellType { get; }
    [CLSCompliantAttribute("False")]
protected internal ushort StyleXFIndex { get; }
    [CLSCompliantAttribute("False")]
public ushort ExtendedFormatIndex { get; public set; }
    [CLSCompliantAttribute("False")]
protected internal RkRec RKSubRecord { get; }
    protected internal WorkbookImpl Workbook { get; }
    private MergedRegion ParentMergeRegion { get; }
    protected internal WorksheetImpl InnerWorksheet { get; }
    [CLSCompliantAttribute("False")]
protected internal BiffRecordRaw Record { get; protected internal set; }
    public Dictionary`2<ArrayRecord, object> FormulaArrays { get; }
    public bool AreFormulaArraysNotSeparated { get; }
    public int CellsCount { get; }
    public FormatImpl InnerNumberFormat { get; }
    public string AddressGlobal2007 { get; }
    internal RowStorage RowStorage { get; }
    internal static string DateSeperator { get; }
    internal static string TimeSeparator { get; }
    [CLSCompliantAttribute("False")]
internal ExcelFormatType FormatType { get; internal set; }
    [CLSCompliantAttribute("False")]
protected FormatRecord Format { get; }
    public bool ContainsNumber { get; }
    public string WorksheetName { get; }
    internal ExtendedFormatImpl ExtendedFormat { get; }
    private TBIFFRecord Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat.TypeCode { get; }
    private int Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat.Column { get; private set; }
    private int Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat.Row { get; private set; }
    public RangeImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public RangeImpl(IApplication application, object parent, BiffReader reader);
    [CLSCompliantAttribute("False")]
public RangeImpl(IApplication application, object parent, BiffRecordRaw[] data, int position);
    [CLSCompliantAttribute("False")]
public RangeImpl(IApplication application, object parent, BiffRecordRaw[] data, Int32& position);
    [CLSCompliantAttribute("False")]
public RangeImpl(IApplication application, object parent, BiffRecordRaw[] data, Int32& position, bool ignoreStyles);
    public RangeImpl(IApplication application, object parent, List`1<BiffRecordRaw> data, Int32& position, bool ignoreStyles);
    public RangeImpl(IApplication application, object parent, int firstCol, int firstRow, int lastCol, int lastRow);
    public RangeImpl(IApplication application, object parent, int column, int row);
    [CLSCompliantAttribute("False")]
public RangeImpl(IApplication application, object parent, BiffRecordRaw record, bool bIgnoreStyles);
    private static RangeImpl();
    public sealed virtual string get_HtmlString();
    public sealed virtual void set_HtmlString(string value);
    internal String[] get_DefaultStyleNames();
    public sealed virtual string get_Address();
    public sealed virtual string get_AddressLocal();
    public sealed virtual string get_AddressR1C1();
    public sealed virtual string get_AddressR1C1Local();
    public sealed virtual bool get_Boolean();
    public sealed virtual void set_Boolean(bool value);
    public sealed virtual IBorders get_Borders();
    public sealed virtual IRange[] get_Cells();
    public sealed virtual int get_Column();
    public sealed virtual int get_ColumnGroupLevel();
    public sealed virtual double get_ColumnWidth();
    public sealed virtual void set_ColumnWidth(double value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_HasDataValidation();
    public bool get_HasConditionFormats();
    public sealed virtual DateTime get_DateTime();
    public sealed virtual void set_DateTime(DateTime value);
    public sealed virtual string get_DisplayText();
    private string GetCultureFormat(string result, double dNumber, FormatImpl numberFormat);
    private string GetCultureDateTime(CultureInfo culture, DateTime dt);
    private bool CheckOSSpecificDateFormats(FormatImpl InnerNumberFormat);
    public sealed virtual IRange get_End();
    public bool get_IsEntireRow();
    public void set_IsEntireRow(bool value);
    public bool get_IsEntireColumn();
    public void set_IsEntireColumn(bool value);
    public sealed virtual IRange get_EntireColumn();
    public sealed virtual IRange get_EntireRow();
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual string get_Formula();
    public sealed virtual void set_Formula(string value);
    public sealed virtual string get_FormulaArray();
    public sealed virtual void set_FormulaArray(string value);
    public sealed virtual string get_FormulaStringValue();
    public sealed virtual void set_FormulaStringValue(string value);
    public sealed virtual double get_FormulaNumberValue();
    public sealed virtual void set_FormulaNumberValue(double value);
    public sealed virtual bool get_FormulaBoolValue();
    public sealed virtual void set_FormulaBoolValue(bool value);
    public sealed virtual string get_FormulaErrorValue();
    public sealed virtual void set_FormulaErrorValue(string value);
    public object get_FormulaValue();
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual DateTime get_FormulaDateTime();
    public sealed virtual void set_FormulaDateTime(DateTime value);
    public sealed virtual string get_FormulaR1C1();
    public sealed virtual void set_FormulaR1C1(string value);
    public sealed virtual string get_FormulaArrayR1C1();
    public sealed virtual void set_FormulaArrayR1C1(string value);
    public sealed virtual bool get_HasFormula();
    public sealed virtual bool get_HasFormulaArray();
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual IHyperLinks get_Hyperlinks();
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_IsBoolean();
    public sealed virtual bool get_IsError();
    public sealed virtual bool get_IsGroupedByColumn();
    public sealed virtual bool get_IsGroupedByRow();
    [DebuggerStepThroughAttribute]
public sealed virtual int get_LastColumn();
    public void set_LastColumn(int value);
    [DebuggerStepThroughAttribute]
public sealed virtual int get_LastRow();
    public void set_LastRow(int value);
    public sealed virtual double get_Number();
    public sealed virtual void set_Number(double value);
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual int get_Row();
    public sealed virtual int get_RowGroupLevel();
    public sealed virtual double get_RowHeight();
    public sealed virtual void set_RowHeight(double value);
    public sealed virtual IRange[] get_Rows();
    public sealed virtual IRange[] get_Columns();
    private IStyle CreateStyleForEntireRowEntireColumn();
    public sealed virtual IStyle get_CellStyle();
    public sealed virtual void set_CellStyle(IStyle value);
    public sealed virtual string get_CellStyleName();
    public sealed virtual void set_CellStyleName(string value);
    public sealed virtual Nullable`1<BuiltInStyles> get_BuiltInStyle();
    public sealed virtual void set_BuiltInStyle(Nullable`1<BuiltInStyles> value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual TimeSpan get_TimeSpan();
    public sealed virtual void set_TimeSpan(TimeSpan value);
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_CalculatedValue();
    public sealed virtual object get_Value2();
    public sealed virtual void set_Value2(object value);
    internal bool get_IsNumReference();
    internal void set_IsNumReference(bool value);
    internal bool get_IsStringReference();
    internal void set_IsStringReference(bool value);
    internal bool get_IsMultiReference();
    internal void set_IsMultiReference(bool value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual IWorksheet get_Worksheet();
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual void set_Item(int row, int column, IRange value);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual IConditionalFormats get_ConditionalFormats();
    public sealed virtual IDataValidation get_DataValidation();
    public sealed virtual bool get_HasFormulaBoolValue();
    public sealed virtual bool get_HasFormulaErrorValue();
    public sealed virtual bool get_HasFormulaDateTime();
    public sealed virtual bool get_HasFormulaNumberValue();
    public sealed virtual bool get_HasFormulaStringValue();
    public sealed virtual bool get_IsBlank();
    public bool get_IsBlankorHasStyle();
    public sealed virtual bool get_HasBoolean();
    public sealed virtual bool get_HasDateTime();
    public sealed virtual bool get_HasNumber();
    public sealed virtual bool get_HasString();
    public sealed virtual ICommentShape get_Comment();
    public sealed virtual IThreadedComment get_ThreadedComment();
    public sealed virtual IRichTextString get_RichText();
    public sealed virtual bool get_HasRichText();
    public sealed virtual bool get_IsMerged();
    public sealed virtual IRange get_MergeArea();
    public sealed virtual bool get_IsInitialized();
    public sealed virtual bool get_HasStyle();
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual ExcelIgnoreError get_IgnoreErrorOptions();
    public sealed virtual void set_IgnoreErrorOptions(ExcelIgnoreError value);
    public sealed virtual bool get_HasExternalFormula();
    public sealed virtual Nullable`1<bool> get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(Nullable`1<bool> value);
    internal bool get_IsAbsolute();
    internal void set_IsAbsolute(bool value);
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    private ApplicationImpl get_AppImplementation();
    public sealed virtual string get_AddressGlobal();
    public string get_AddressGlobalWithoutSheetName();
    internal List`1<IRange> get_CellsList();
    protected internal bool get_IsSingleCell();
    [DebuggerStepThroughAttribute]
protected internal int get_FirstRow();
    protected internal void set_FirstRow(int value);
    [DebuggerStepThroughAttribute]
protected internal int get_FirstColumn();
    protected internal void set_FirstColumn(int value);
    protected internal string get_CellName();
    protected internal long get_CellIndex();
    protected internal TCellType get_CellType();
    protected internal ushort get_StyleXFIndex();
    public sealed virtual ushort get_ExtendedFormatIndex();
    public sealed virtual void set_ExtendedFormatIndex(ushort value);
    protected internal RkRec get_RKSubRecord();
    protected internal WorkbookImpl get_Workbook();
    private MergedRegion get_ParentMergeRegion();
    protected internal WorksheetImpl get_InnerWorksheet();
    protected internal BiffRecordRaw get_Record();
    protected internal void set_Record(BiffRecordRaw value);
    public Dictionary`2<ArrayRecord, object> get_FormulaArrays();
    public bool get_AreFormulaArraysNotSeparated();
    protected internal bool CheckFormulaArraysNotSeparated(ICollection`1<ArrayRecord> colFormulas);
    public sealed virtual int get_CellsCount();
    public FormatImpl get_InnerNumberFormat();
    public sealed virtual string get_AddressGlobal2007();
    internal RowStorage get_RowStorage();
    internal static string get_DateSeperator();
    internal static string get_TimeSeparator();
    private string ConvertExcelSerialDate(double dNumber, FormatImpl format, bool isDate1904);
    private string GetFormattedResult(double dNumber, DateTime dt, FormatImpl format, bool isTime, bool isDate);
    protected int CurrentStyleNumber(string pre);
    protected void OnLastColumnChanged();
    protected void OnFirstColumnChanged();
    protected void OnLastRowChanged();
    protected void OnFirstRowChanged();
    protected internal void OnStyleChanged(TCellType oldType);
    protected internal void OnValueChanged(string old, string value);
    private double GetSerialDateTimeFromDate(DateTime dt);
    private bool DetectAndSetFractionValue(string value);
    private void SetTimeFormat(string value);
    internal string CheckApostrophe(string value);
    protected double ObjectToDouble(object value);
    protected RangeImpl ToggleGroup(ExcelGroupBy groupBy, bool isGroup, bool bCollapsed);
    internal RangeImpl ToggleGroup(ExcelGroupBy groupBy, bool isGroup, bool bCollapsed, bool isImport);
    private void UpdateRowColumn(int start, int end, int previousOutlineLevel, ExcelGroupBy groupBy, bool addGroup, bool isGroup, bool isImport);
    private void GroupRowColumn(int start, int end, int previousOutlineLevel, ExcelGroupBy groupBy, bool isImport);
    private void UngroupRowColumn(int start, int end, int previousOutlineLevel, ExcelGroupBy groupBy);
    public IOutline GetRowOutline(int iRowIndex);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList);
    public sealed virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public sealed virtual void SubTotal(Int32[] groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    internal void UpdateRowOffSet();
    internal void UpdateFormulas();
    public IOutline GetColumnOutline(int iColumnIndex);
    private void SetWorksheetSize();
    internal void SetWorkbook(WorkbookImpl book);
    private IOutline GetOrCreateOutline(ExcelGroupBy groupBy, IDictionary information, int iIndex, bool bThrowExceptions);
    protected string GetDisplayString();
    private string ParseNumberFormat();
    private bool CheckUnnecessaryChar(string splitFormat);
    protected DateTime GetDateTime();
    internal void SetDifferedColumnWidth(RangeImpl sourceRange, RangeImpl destinationRange);
    internal void SetDifferedRowHeight(RangeImpl sourceRange, RangeImpl destinationRange);
    protected void SetDateTime(DateTime value);
    protected void SetTimeSpan(TimeSpan time);
    protected double GetNumber();
    protected void SetNumber(double value);
    private void SetNumberAndFormat(double value, bool isPreserveFormat);
    private BiffRecordRaw CreateNumberRecord(double value);
    protected void SetBoolean(bool value);
    protected void SetError(string strError);
    private int GetErrorCodeByString(string strError);
    protected internal void SetFormula(string value);
    protected internal void SetFormula(string value, Dictionary`2<string, string> hashWorksheetNames, bool bR1C1);
    [CLSCompliantAttribute("False")]
protected internal void SetFormula(FormulaRecord record);
    internal ExcelFormatType get_FormatType();
    internal void set_FormatType(ExcelFormatType value);
    protected FormatRecord get_Format();
    protected void SetChanged();
    protected void CheckRange(int row, int column);
    protected IWorksheet FindWorksheet(string sheetName);
    public void ReparseFormulaString();
    private void MoveCellsUp(ExcelCopyRangeOptions options);
    private void MoveCellsLeft(ExcelCopyRangeOptions options);
    private string ParseLabelSST(LabelSSTRecord label);
    private string ParseFormula(FormulaRecord formula);
    private string ParseFormula(FormulaRecord formula, bool bR1C1ReferenceStyle);
    public void SetRowHeight(double value, bool bIsBadFontHeight);
    internal void SetRowHeight(double value, bool bIsBadFontHeight, bool raiseEvent);
    protected void CreateRichTextString();
    private object TryCreateValue2();
    private bool DetectAndSetBoolErrValue(string strValue);
    protected internal void SetLabelSSTIndex(int index);
    private void TryRemoveFormulaArrays();
    public void SetDataValidation(DataValidationImpl dv);
    private void BlankCell();
    public void AddComment(ICommentShape comment);
    public sealed virtual IThreadedComment AddThreadedComment(string text, DateTime creationTime);
    public sealed virtual IThreadedComment AddThreadedComment(string text, string author, DateTime creationTime);
    protected internal void SetParent(WorksheetImpl parent);
    public void UpdateNamedRangeIndexes(Int32[] arrNewIndex);
    private BiffRecordRaw CreateRecord(TBIFFRecord recordType);
    private BiffRecordRaw CreateRecordWithoutAdd(TBIFFRecord recordType);
    public void UpdateRange(int iFirstRow, int iFirstColumn, int iLastRow, int iLastColumn);
    public bool get_ContainsNumber();
    internal static string GetDateSeperator();
    private static string GetTimeSeperator();
    private IRange ParseR1C1Reference(string strReference);
    private Rectangle ParseR1C1Expression(string strName, Rectangle rec, bool bIsFirst);
    private int GetIndexFromR1C1(string strValue, bool bRow);
    private string GetFormulaArray(bool bR1C1);
    private void SetFormulaArray(string value, bool bR1C1);
    [CLSCompliantAttribute("False")]
public void SetFormulaArrayRecord(ArrayRecord record);
    [CLSCompliantAttribute("False")]
public void SetFormulaArrayRecord(ArrayRecord record, int iXFIndex);
    private void UpdateRecord(ICellPositionFormat record, RangeImpl cell, int iXFIndex);
    private int NormalizeRowIndex(int iRow, int iStartCol, int iEndCol);
    private int NormalizeColumnIndex(int iColumn, int iStartRow, int iEndRow);
    private DataValidationImpl FindDataValidation();
    public void PartialClear();
    protected void SetBorderToSingleCell(ExcelBordersIndex borderIndex, ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    private void CollapseExpand(ExcelGroupBy groupBy, bool isCollapsed, ExpandCollapseFlags flags);
    private void CollapseExpand(bool isCollapsed, int iStartIndex, int iEndIndex, int iMaxIndex, bool bLastIndex, OutlineGetter outlineGetter, ExpandCollapseFlags flags);
    private void SetHiddenState(int iStartIndex, int iEndIndex, OutlineGetter outlineGetter, bool state);
    private void ExpandOutlines(int iStartIndex, int iEndIndex, OutlineGetter outlineGetter, bool includeSubgroups, bool bLastIndex);
    private void SwapValues(Int32& iStartIndex, Int32& iEndIndex);
    private bool IsParentGroupVisible(Int32& iStartIndex, Int32& iEndIndex, int iMaxIndex, OutlineGetter outlineGetter);
    private int FindFirstWithLowerLevel(int startIndex, int delta, int maximum, OutlineGetter outlineGetter);
    private int FindGroupEdge(int startIndex, int delta, int maximum, OutlineGetter outlineGetter, int parentGroupLevel);
    private int FindVisibleOutline(int startIndex, int endIndex, OutlineGetter outlineGetter, int outlineLevel);
    internal IList`1<object> GetUniqueValues(PivotDataType& fieldType);
    internal object GetFormulaValue(PivotDataType& fieldType, int row, int column, Boolean& isString);
    private string GetFormulaValue(int row, int column, FormatImpl formatImpl);
    internal static HatchStyle GetHatchStyle(ExcelPattern pattern);
    private void SetAutoFormatPattern(ExcelKnownColors color, int iRow, int iLastRow, int iCol, int iLastCol);
    private void SetAutoFormatPattern(ExcelKnownColors color, int iRow, int iLastRow, int iCol, int iLastCol, ExcelKnownColors patCol, ExcelPattern pat);
    private void SetAutoFormatPatterns(ExcelAutoFormat type);
    private void SetListAutoFormatPattern(bool bIsList_1, ExcelKnownColors foreCol, ExcelKnownColors backColor);
    private void SetAutoFormatAlignments(ExcelAutoFormat type);
    private void SetAutoFormatAlignment(ExcelHAlign align, int iRow, int iLastRow, int iCol, int iLastCol);
    private void SetAutoFormatWidthHeight(ExcelAutoFormat type);
    private void SetAutoFormatNumbers(ExcelAutoFormat type);
    private void SetAutoFormatFontBorder(ExcelAutoFormat type, bool bIsFont, bool bIsBorder);
    private void SetAutoFormatSimpleFontBorder(bool bIsFont, bool bIsBorder);
    private void SetAutoFormatFontBorderClassic_1(bool bIsFont, bool bIsBorder);
    private void SetAutoFormatFontBorderClassic_2(bool bIsFont, bool bIsBorder);
    private void SetAutoFormatFontBorderClassic_3(bool bIsFont, bool bIsBorder);
    private void SetAutoFormatFontBorderAccounting_1(bool bIsFont, bool bIsBorder);
    private void SetAutoFormatFontBorderAccounting_2(bool bIsFont, bool bIsBorder);
    private void SetAutoFormatFontBorderAccounting_3(bool bIsFont, bool bIsBorder);
    private void SetAutoFormatFontBorderAccounting_4(bool bIsFont, bool bIsBorder);
    private void SetAutoFormatFont(IFont font, int iRow, int iLastRow, int iCol, int iLastCol);
    protected internal void InfillCells();
    protected internal void ResetCells();
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void SetParents(object parent);
    [CLSCompliantAttribute("False")]
public void Parse(BiffReader reader);
    [CLSCompliantAttribute("False")]
public void Parse(BiffRecordRaw[] data, Int32& position);
    public void Parse(IList data, Int32& position, bool ignoreStyles);
    protected string ParseDouble(IDoubleValue value);
    [CLSCompliantAttribute("False")]
protected string ParseBlank(BlankRecord blank);
    [CLSCompliantAttribute("False")]
protected void ReParseFormula(FormulaRecord formula);
    [CLSCompliantAttribute("False")]
protected void ParseFormula(FormulaRecord formula, IList data, Int32& pos);
    [CLSCompliantAttribute("False")]
public static string ParseBoolError(BoolErrRecord error);
    [CLSCompliantAttribute("False")]
protected string ParseRString(RStringRecord rstring);
    private void AddRemoveEventListenersForNameX(Ptg[] parsedFormula, int iBookIndex, int iNameIndex, bool bAdd);
    public static void AttachDetachNameIndexChangedEvent(WorkbookImpl book, NameIndexChangedEventHandler handler, Ptg[] parsedFormula, int iBookIndex, int iNewIndex, bool bAdd);
    private static void AttachDetachExternNameEvent(WorkbookImpl book, NameXPtg namex, int iBookIndex, int iNewIndex, NameIndexChangedEventHandler handler, Dictionary`2<long, object> indexes, bool bAdd);
    private static void AttachDetachLocalNameEvent(WorkbookImpl book, NamePtg name, int iBookIndex, int iNewIndex, NameIndexChangedEventHandler handler, Dictionary`2<long, object> indexes, bool bAdd);
    private static long GetIndex(int iBookIndex, int iNameIndex);
    private void OnNameXIndexChanged(object sender, NameIndexChangedEventArgs e);
    private void LocalIndexChanged(NameImpl sender, NameIndexChangedEventArgs e);
    private void ExternIndexChanged(ExternNameImpl sender, NameIndexChangedEventArgs e);
    internal string GetFormula(int row, int column);
    public sealed virtual IRange Activate();
    public virtual IRange Activate(bool scroll);
    public sealed virtual IRange Group(ExcelGroupBy groupBy, bool bCollapsed);
    internal IRange Group(ExcelGroupBy groupBy, bool bCollapsed, bool isImport);
    public sealed virtual IRange Group(ExcelGroupBy groupBy);
    internal List`1<double> GetNumberList(bool considerDateAsNumber);
    public sealed virtual double Sum();
    public sealed virtual double Sum(bool considerDateAsNumber);
    public sealed virtual double Average();
    public sealed virtual double Average(bool considerDateAsNumber);
    public sealed virtual double Min();
    public sealed virtual double Min(bool considerDateAsNumber);
    public sealed virtual double Max();
    public sealed virtual double Max(bool considerDateAsNumber);
    public sealed virtual IRange Trim();
    public sealed virtual void Merge();
    public sealed virtual void Merge(bool clearCells);
    internal void MergeWithoutCheck();
    internal void UpdateMergedRegion(RangeImpl cells, bool clearCells);
    private void ApplyFirstCellFormats();
    public sealed virtual IRange Ungroup(ExcelGroupBy groupBy);
    public sealed virtual void UnMerge();
    public sealed virtual void FreezePanes();
    public sealed virtual void Clear();
    public sealed virtual void Clear(bool isClearFormat);
    public void FullClear();
    public sealed virtual void Clear(ExcelMoveDirection direction);
    public sealed virtual void Clear(ExcelMoveDirection direction, ExcelCopyRangeOptions options);
    internal void ClearOption(ExcelClearOptions option);
    public sealed virtual void Clear(ExcelClearOptions option);
    internal void Comments();
    public sealed virtual void MoveTo(IRange destination);
    public void MoveTo(IRange destination, ExcelCopyRangeOptions options);
    public sealed virtual IRange CopyTo(IRange destination);
    public sealed virtual IRange CopyTo(IRange destination, bool pasteLink);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options);
    public sealed virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options, bool skipBlank);
    public sealed virtual IRange IntersectWith(IRange range);
    public sealed virtual IRange MergeWith(IRange range);
    public sealed virtual ICommentShape AddComment();
    public ICommentShape AddComment(bool bIsParseOptions);
    public SizeF MeasureString(string strMeasure);
    public sealed virtual void AutofitRows();
    public sealed virtual void AutofitColumns();
    public void AutoFitToColumn(int firstColumn, int lastColumn);
    internal static bool IsMergedCell(MergeCellsImpl mergedCells, int iRow, int iColumn, bool isRow, Int32& num4);
    internal string GetDisplayText(int row, int column);
    internal static string GetFormula(string formula);
    private bool UpdateNumberFormat();
    private string GetNumberOrDateTime(FormatImpl formatImpl, double dValue, int row, int column);
    private double GetCalculateOnOpen(double dValue);
    public sealed virtual IRange Offset(int row, int column);
    public sealed virtual IRange Resize(int row, int column);
    internal string UpdateText(string displayText, double dValue, FormatImpl formatImpl, ExtendedFormatImpl result);
    internal double GetTextWidth(string displayText, Font font);
    private string GetSectionFormat(double dValue, string formatString);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public sealed virtual void BorderAround();
    public sealed virtual void BorderAround(ExcelLineStyle borderLine);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderAround(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    internal RangeImpl GetRange(int row, int column, RangeImpl migrantRange, IStyle cellStyle);
    public sealed virtual void BorderInside();
    public sealed virtual void BorderInside(ExcelLineStyle borderLine);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, Color borderColor);
    public sealed virtual void BorderInside(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public sealed virtual void BorderNone();
    public void SetAutoFormat(ExcelAutoFormat format);
    public void SetAutoFormat(ExcelAutoFormat format, ExcelAutoFormatOptions options);
    private void SetSingleCellValue2(object value);
    public sealed virtual void CollapseGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy);
    public sealed virtual void ExpandGroup(ExcelGroupBy groupBy, ExpandCollapseFlags flags);
    private string CheckAndGetDateUncustomizedString(string inputFormat);
    private string CheckForAccountingString(string inputFormat);
    public sealed virtual IRange[] GetDependents();
    public sealed virtual IRange[] GetDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectDependents();
    public sealed virtual IRange[] GetDirectDependents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetPrecedents();
    public sealed virtual IRange[] GetPrecedents(bool isEntireWorkbook);
    public sealed virtual IRange[] GetDirectPrecedents();
    public sealed virtual IRange[] GetDirectPrecedents(bool isEntireWorkbook);
    private void GetDependentsBySheet(IWorksheet worksheet, bool isEntireWorkbook);
    private Dictionary`2<string, IRange> GetReferenceCells(IRange range, Dictionary`2<string, List`1<string>> precedentsCache, bool isEntireWorkbook, bool isDirect);
    private IRange[] GetDependentRanges(bool isEntireWorkbook, bool isDirect);
    private IRange[] GetPrecedentsRange(bool isEntireWorkbook, bool isDirect);
    private void AddNamedRangeCells(IRange sourceRange, IRange refersToRange, Dictionary`2<string, IRange> resultCells, Dictionary`2<string, List`1<string>> precedentsCache, List`1<string> sourceList, bool isEntireWorkbook);
    private void GetPrecedentsFromCache(string sourceCellsAddress, Dictionary`2<string, List`1<string>> precedentsCache, Dictionary`2<string, IRange> resultCells, bool isDirect);
    public sealed virtual string GetNewAddress(Dictionary`2<string, string> names, String& strSheetName);
    public sealed virtual IRange Clone(object parent, Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
    public sealed virtual void ClearConditionalFormats();
    internal void ClearConditionalFormats(bool isCF);
    public void ClearDataValidations();
    public sealed virtual Rectangle[] GetRectangles();
    public sealed virtual int GetRectanglesCount();
    public sealed virtual string get_WorksheetName();
    internal static void UpdateCellValue(object Parent, int Column, int Row, bool updateCellVaue);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use GetR1C1AddressFromCellIndex(long cellIndex) method. Sorry for inconvenience.")]
public static string GetR1C1AddresFromCellIndex(long cellIndex);
    public static string GetR1C1AddressFromCellIndex(long cellIndex);
    public static long CellNameToIndex(string name);
    public static void CellNameToRowColumn(string name, Int32& iRow, Int32& iColumn);
    public static int GetColumnIndex(string columnName);
    public static string GetColumnName(int iColumn);
    public static string GetCellName(int firstColumn, int firstRow);
    public static string GetCellName(int firstColumn, int firstRow, bool bR1C1);
    public static string GetCellName(int firstColumn, int firstRow, bool bR1C1, bool bUseSeparater);
    public static string GetAddressLocal(int iFirstRow, int iFirstColumn, int iLastRow, int iLastColumn);
    public static string GetAddressLocal(int iFirstRow, int iFirstColumn, int iLastRow, int iLastColumn, bool bR1C1);
    public static string GetCellNameWithDollars(int firstColumn, int firstRow);
    public static long GetCellIndex(int firstColumn, int firstRow);
    [DebuggerStepThroughAttribute]
public static int GetRowFromCellIndex(long index);
    [DebuggerStepThroughAttribute]
public static int GetColumnFromCellIndex(long index);
    public static string GetWorksheetName(String& rangeName);
    public static bool GetWrapText(IList rangeColection);
    public static void SetWrapText(IList rangeColection, bool wrapText);
    public static string GetNumberFormat(IList rangeColection);
    public static string GetCellStyleName(IList`1<IRange> rangeColection);
    public static int ParseRangeString(string range, IWorkbook book, Int32& iFirstRow, Int32& iFirstColumn, Int32& iLastRow, Int32& iLastColumn);
    internal static void GetMinMaxRowColFromCellNames(String[] cells, Int32& iFirstRow, Int32& iFirstColumn, Int32& iLastRow, Int32& iLastColumn);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use GetRectangleOfRange(IRange range, bool bThrowExcONNullRange) method. Sorry for inconvenience.")]
public static Rectangle GetRectangeOfRange(IRange range, bool bThrowExcONNullRange);
    public static Rectangle GetRectangleOfRange(IRange range, bool bThrowExcONNullRange);
    internal Color GetNumberFormatColor(ExtendedFormatImpl extendedFormatImpl);
    internal static Dictionary`2<char, Color> GetColorsFromNumberFormat(string numberFormat, Color defaultColor);
    private static Color GetColor(string colorName);
    protected internal void wrapStyle_OnNumberFormatChanged(object sender, EventArgs e);
    private void AttachEventToStyle();
    private void AttachEventToCellStyle();
    private void AttachEvent(ExtendedFormatWrapper wrapper, EventHandler handler);
    protected void CreateStyle();
    protected void CreateStyleWrapper(int value);
    internal static IStyle CreateTempStyleWrapperWithoutRange(RangeImpl rangeImpl, int value);
    public void SetXFormatIndex(int index);
    private StyleImpl ChangeStyleName(string strNewName);
    private void UpdateCellStyleIndex();
    private string GetStyleName();
    private bool GetWrapText();
    private string GetNumberFormat();
    internal bool TryGetDateTimeByCulture(string strDateTime, bool isUKCulture, DateTime& dtValue);
    internal ExtendedFormatImpl get_ExtendedFormat();
    public void UpdateRecord();
    public bool GetAreArrayFormulasNotSeparated(Dictionary`2<ArrayRecord, object> hashToSkip);
    private string GetCustomizedFormat(string format);
    public sealed virtual void Reparse();
    private sealed virtual override TBIFFRecord Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat.get_TypeCode();
    private sealed virtual override int Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat.get_Column();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat.set_Column(int value);
    private sealed virtual override int Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat.get_Row();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat.set_Row(int value);
    public sealed virtual Ptg[] GetNativePtg();
    public sealed virtual IEnumerator`1<IRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void OnCellValueChanged(object oldValue, object newValue, IRange range);
}
public class Syncfusion.XlsIO.Implementation.RangeRichTextString : RichTextString {
    private WorksheetImpl m_worksheet;
    public FontImpl DefaultFont { get; internal set; }
    public int Index { get; }
    internal WorksheetImpl Worksheet { get; internal set; }
    public RangeRichTextString(IApplication application, object parent, int row, int column);
    public RangeRichTextString(IApplication application, object parent, long cellIndex);
    public RangeRichTextString(IApplication application, object parent, long cellIndex, TextWithFormat text);
    public virtual FontImpl get_DefaultFont();
    internal virtual void set_DefaultFont(FontImpl value);
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    public int get_Index();
    internal WorksheetImpl get_Worksheet();
    internal void set_Worksheet(WorksheetImpl value);
    public sealed virtual void Dispose();
}
public class Syncfusion.XlsIO.Implementation.RangesOperations : object {
    private static int DEF_MAXIMUM_SPLIT_COUNT;
    private List`1<Rectangle> m_arrCells;
    public List`1<Rectangle> CellList { get; public set; }
    public RangesOperations(List`1<Rectangle> arrCells);
    public virtual List`1<Rectangle> get_CellList();
    public virtual void set_CellList(List`1<Rectangle> value);
    public bool Contains(Rectangle[] arrRanges);
    public bool Contains(Rectangle[] arrRanges, int iStartIndex);
    public bool Contains(IList`1<Rectangle> arrRanges);
    public bool Contains(IList`1<Rectangle> arrRanges, int iStartIndex);
    internal bool ContainsConditionalFormatRange(Rectangle[] arrRanges);
    internal bool ContainsConditionalFormatRange(Rectangle[] arrRanges, int iStartIndex);
    internal bool ContainsConditionalFormatRange(IList`1<Rectangle> arrRanges, int iStartIndex);
    internal bool ContainsConditionalFormatRange(Rectangle range, int iStartIndex);
    public bool Contains(Rectangle range);
    public bool Contains(Rectangle range, int iStartIndex);
    public int ContainsCount(Rectangle range);
    public void AddCells(IList`1<Rectangle> arrCells);
    public void AddRectangles(IList`1<Rectangle> arrCells);
    public void AddRange(IRange range);
    public void AddRange(Rectangle rect);
    internal void AddRanges(Rectangle rect);
    public void Clear();
    public RangesOperations GetPart(Rectangle rect, bool remove, int rowIncrement, int columnIncrement);
    private bool CheckAndAddRange(Rectangle& curRange, Rectangle rangeToAdd);
    public void Remove(Rectangle[] arrRanges);
    internal void Remove(Rectangle[] arrRanges, bool isCF);
    public RangesOperations Clone();
    private int Remove(Rectangle rect, bool isCF);
    private IList`1<Rectangle> SplitRectangle(Rectangle rectSource, Rectangle rectRemove);
    public void OptimizeStorage();
    private void SortAndTryAdd(SortKeyGetter topLevelKeyGetter, SortKeyGetter lowLevelKeyGetter, CombineRectangles combine);
    private void OptimizeAndAdd(Dictionary`2<int, SortedList`2<int, Rectangle>> dictionary, CombineRectangles combine);
    private int TopValueGetter(Rectangle rect);
    private int LeftValueGetter(Rectangle rect);
    private Dictionary`2<int, SortedList`2<int, Rectangle>> SortBy(SortKeyGetter keyGetter, SortKeyGetter secondLevelKeyGetter);
    private IList`1<Rectangle> CombineSameRowRectangles(IList`1<Rectangle> lstRects);
    private IList`1<Rectangle> CombineSameColumnRectangles(IList`1<Rectangle> lstRects);
    internal void Offset(int iRowDelta, int iColumnDelta, WorkbookImpl book);
    public void SetLength(int maxLength);
}
internal class Syncfusion.XlsIO.Implementation.RangeTrueFalse : object {
    private RangesOperations m_trueValues;
    private RangesOperations m_falseValues;
    public Nullable`1<bool> GetRangeValue(ICombinedRange range);
    public void SetRange(ICombinedRange range, Nullable`1<bool> value);
    public void Clear();
}
public class Syncfusion.XlsIO.Implementation.RecordExtractor : object {
    private Dictionary`2<int, BiffRecordRaw> m_dictRecords;
    public BiffRecordRaw GetRecord(DataProvider provider, int iOffset, ExcelVersion version);
    public BiffRecordRaw GetRecord(int recordType);
}
internal class Syncfusion.XlsIO.Implementation.ResourceHandler : object {
    internal Dictionary`2<string, Byte[]> PatternArray;
    internal Dictionary`2<string, Byte[]> TexturePresetGradient;
    internal Dictionary`2<string, Byte[]> TextureArray;
    internal Dictionary`2<string, Byte[]> Gradients;
}
public class Syncfusion.XlsIO.Implementation.RichTextString : CommonWrapper {
    protected TextWithFormat m_text;
    private string m_rtfText;
    protected WorkbookImpl m_book;
    private bool m_bIsReadOnly;
    protected object m_rtfParent;
    private static Char[] DEF_DIGITS;
    private static char DEF_ZERO;
    private object m_parent;
    internal int m_iFontIndex;
    private string m_imageRTF;
    private PreservationLogger m_logger;
    protected long m_lCellIndex;
    internal ExcelFormatType m_formatType;
    private Stream m_lstStream;
    private IList`1<LevelProperties> m_levelProperties;
    private int m_styleLevel;
    private BulletImpl m_bullet;
    private int hyperlinkCount;
    internal Nullable`1<bool> IsNormalizeHeights;
    internal TextCapsType CapitalizationType;
    internal bool IsCapsUsed;
    internal bool IsDoubleStrike;
    public string Text { get; public set; }
    public string RtfText { get; public set; }
    public bool IsFormatted { get; }
    public object Parent { get; }
    public IApplication Application { get; }
    internal int StyleLevel { get; internal set; }
    internal Stream LevelStyleStream { get; internal set; }
    internal IList`1<LevelProperties> LevelStyles { get; internal set; }
    internal long RtfCellIndex { get; internal set; }
    public SizeF StringSize { get; }
    public FontImpl DefaultFont { get; internal set; }
    public TextWithFormat TextObject { get; }
    public WorkbookImpl Workbook { get; }
    public int DefaultFontIndex { get; public set; }
    internal string ImageRTF { get; internal set; }
    internal long CellIndex { get; internal set; }
    internal BulletImpl Bullet { get; internal set; }
    public RichTextString(IApplication application, object parent);
    public RichTextString(IApplication application, object parent, bool isReadOnly);
    public RichTextString(IApplication application, object parent, object rtfParent, bool isReadOnly, bool bCreateText);
    public RichTextString(IApplication application, object parent, bool isReadOnly, bool bCreateText);
    internal RichTextString(IApplication application, object parent, bool isReadOnly, bool bCreateText, PreservationLogger logger);
    public RichTextString(IApplication application, object parent, TextWithFormat text);
    private static RichTextString();
    protected virtual void SetParents();
    public sealed virtual IFont GetFont(int iPosition);
    public IFont GetFont(int iPosition, bool isCopy);
    public sealed virtual void SetFont(int iStartPos, int iEndPos, IFont font);
    public sealed virtual void ClearFormatting();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual string get_RtfText();
    public sealed virtual void set_RtfText(string value);
    public sealed virtual bool get_IsFormatted();
    public sealed virtual void Append(string text, IFont font);
    public void Substring(int startIndex, int length);
    internal void SetText(string text);
    internal void UpdateRTF(IRange range, FontImpl font);
    public sealed virtual object get_Parent();
    public sealed virtual IApplication get_Application();
    internal int get_StyleLevel();
    internal void set_StyleLevel(int value);
    internal Stream get_LevelStyleStream();
    internal void set_LevelStyleStream(Stream value);
    internal IList`1<LevelProperties> get_LevelStyles();
    internal void set_LevelStyles(IList`1<LevelProperties> value);
    internal long get_RtfCellIndex();
    internal void set_RtfCellIndex(long value);
    public SizeF get_StringSize();
    public virtual FontImpl get_DefaultFont();
    internal virtual void set_DefaultFont(FontImpl value);
    public TextWithFormat get_TextObject();
    public WorkbookImpl get_Workbook();
    public int get_DefaultFontIndex();
    public void set_DefaultFontIndex(int value);
    internal string get_ImageRTF();
    internal void set_ImageRTF(string value);
    internal long get_CellIndex();
    internal void set_CellIndex(long value);
    internal BulletImpl get_Bullet();
    internal void set_Bullet(BulletImpl value);
    protected virtual int GetFontIndex(int iPosition);
    protected internal virtual FontImpl GetFontByIndex(int iFontIndex);
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    public virtual void CopyFrom(RichTextString source, Dictionary`2<int, int> dicFontIndexes);
    public virtual void Parse(TextWithFormat text, Dictionary`2<int, int> dicFontIndexes, ExcelParseOptions options);
    public virtual object Clone(object parent);
    public virtual void Clear();
    protected virtual int AddFont(IFont font);
    internal void SetTextObject(TextWithFormat commentText);
    internal FontImpl GetFontObject(int iPosition);
    private SizeF GetSizePart(int iStartPos, int iEndPos);
    internal string GenerateRtfText();
    internal string GenerateRtfText(string alignment);
    private int WriteFormattingRun(RtfTextWriter writer, int iRunIndex, int iStartPos);
    private int WriteFormattingRun(RtfTextWriter writer, int iRunIndex, int iStartPos, string alignment);
    private void AddFonts(RtfTextWriter writer);
    private void AddFonts(RtfTextWriter writer, string alignment);
    private void AddFont(FontImpl fontToAdd, RtfTextWriter writer);
    private void WriteText(RtfTextWriter writer, int iFontIndex, string strText);
    private void WriteText(RtfTextWriter writer, int iFontIndex, string strText, string alignment);
    internal void AddText(string text, IFont font);
    internal string PrepareHtml(IFont font, IRange range);
    private string CreateHtmlStyle(int startPos, int next, IFont font, IRange range);
    private string CreateHtmlStyle(string cellSubText, IFont font, IRange range);
    private string UpdateSpecialChars(string displayText);
}
internal class Syncfusion.XlsIO.Implementation.RowsClearer : object {
    private WorksheetImpl m_sheet;
    private int m_iIndex;
    private int m_iCount;
    public RowsClearer(WorksheetImpl sheet, int index, int count);
    public sealed virtual void Do();
}
public class Syncfusion.XlsIO.Implementation.RTFCommentArray : CommonObject {
    private IRange m_range;
    private string m_rtfText;
    public string Text { get; public set; }
    public string RtfText { get; public set; }
    public bool IsFormatted { get; }
    public RTFCommentArray(IApplication application, object parent);
    public sealed virtual IFont GetFont(int iPosition);
    public sealed virtual void SetFont(int iStartPos, int iEndPos, IFont font);
    public sealed virtual void ClearFormatting();
    public sealed virtual void Append(string text, IFont font);
    public sealed virtual void Clear();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual string get_RtfText();
    public sealed virtual void set_RtfText(string value);
    public sealed virtual bool get_IsFormatted();
    private void SetParents();
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
}
public class Syncfusion.XlsIO.Implementation.RTFStringArray : object {
    private IRange m_range;
    private string m_rtfText;
    internal IRange RtfRange { get; internal set; }
    public string Text { get; public set; }
    public string RtfText { get; public set; }
    public bool IsFormatted { get; }
    public IApplication Application { get; }
    public object Parent { get; }
    public RTFStringArray(IRange range);
    public sealed virtual IFont GetFont(int iPosition);
    public sealed virtual void SetFont(int iStartPos, int iEndPos, IFont font);
    public sealed virtual void ClearFormatting();
    public sealed virtual void Append(string text, IFont font);
    internal IRange get_RtfRange();
    internal void set_RtfRange(IRange value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual string get_RtfText();
    public sealed virtual void set_RtfText(string value);
    public sealed virtual bool get_IsFormatted();
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
    public sealed virtual void Dispose();
    public sealed virtual void Clear();
}
public enum Syncfusion.XlsIO.Implementation.RtfTags : Enum {
    public int value__;
    public static RtfTags FontTableBegin;
    public static RtfTags FontTableEnd;
    public static RtfTags ColorTableStart;
    public static RtfTags ColorTableEnd;
    public static RtfTags BoldOn;
    public static RtfTags BoldOff;
    public static RtfTags ItalicOn;
    public static RtfTags ItalicOff;
    public static RtfTags RtfBegin;
    public static RtfTags RtfEnd;
    public static RtfTags GroupStart;
    public static RtfTags GroupEnd;
    public static RtfTags EndLine;
    public static RtfTags ForeColor;
    public static RtfTags BackColor;
    public static RtfTags SubScript;
    public static RtfTags SuperScript;
    public static RtfTags SubSuperOff;
}
public class Syncfusion.XlsIO.Implementation.RtfTextWriter : TextWriter {
    private static string DEF_FONT;
    private static string DEF_FONT_ATTRIBUTE;
    private static string DEF_COLOR_FORMAT;
    private static String[] UnderlineTags;
    private static String[] StrikeThroughTags;
    internal static String[] DEF_TAGS;
    private List`1<Color> m_arrColors;
    private Dictionary`2<Font, int> m_hashFonts;
    private Dictionary`2<Color, int> m_hashColorTable;
    private bool m_bEnableFormatting;
    private TextWriter m_innerWriter;
    private bool m_bTabsPending;
    private bool m_bEscape;
    private static Char[] newLine;
    public bool Escape { get; public set; }
    public Encoding Encoding { get; }
    public RtfTextWriter(bool enableFormatting);
    public RtfTextWriter(TextWriter underlyingWriter);
    public RtfTextWriter(TextWriter underlyingWriter, bool enableFormatting);
    private static RtfTextWriter();
    protected virtual void OutputTabs();
    protected string GetImageRTF(string rtf);
    private void WriteFontInTable(Font font);
    private void WriteFontAttribute(int iFontId, int iFontSize);
    private void WriteColorInTable(Color value);
    private void WriteChar(char value);
    private void WriteString(string value);
    private void WriteImageString(string value);
    private void WriteString(string value, string image, string align);
    private void WriteNewLine();
    private void WriteNewLine(string value);
    public virtual string ToString();
    public virtual void Write(bool value);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer);
    public virtual void Write(double value);
    public virtual void Write(int value);
    public virtual void Write(long value);
    public virtual void Write(object value);
    public virtual void Write(float value);
    public virtual void Write(string s);
    internal void Write(string value, string image, string align);
    [CLSCompliantAttribute("False")]
public virtual void Write(UInt32 value);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void WriteLine();
    public virtual void WriteLine(bool value);
    public virtual void WriteLine(char value);
    public virtual void WriteLine(Char[] buffer);
    public virtual void WriteLine(double value);
    public virtual void WriteLine(int value);
    public virtual void WriteLine(long value);
    public virtual void WriteLine(object value);
    public virtual void WriteLine(float value);
    public virtual void WriteLine(string s);
    [CLSCompliantAttribute("False")]
public virtual void WriteLine(UInt32 value);
    public virtual void WriteLine(string format, Object[] arg);
    public virtual void WriteLine(Char[] buffer, int index, int count);
    public int AddFont(Font font);
    public int AddColor(Color color);
    public void WriteFontTable();
    public void WriteColorTable();
    public void WriteText(Font font, string strText);
    public void WriteText(Font font, Color foreColor, string strText);
    public void WriteText(Font font, Color foreColor, Color backColor, string strText);
    public void WriteText(IFont font, string strText);
    internal void WriteImageText(IFont font, string strText, string image, string align);
    public void WriteFontAttribute(Font font);
    public void WriteFont(Font font);
    public void WriteFont(IFont font);
    public void WriteSubSuperScript(FontImpl font);
    public void WriteFontItalicBoldStriked(Font font);
    public void WriteUnderline(FontImpl font);
    public void WriteUnderlineAttribute();
    public void WriteUnderlineAttribute(UnderlineStyle style);
    public void WriteStrikeThrough(StrikeThroughStyle style);
    public void WriteBackColorAttribute(Color color);
    public void WriteForeColorAttribute(Color color);
    public void WriteLineNoTabs(string s);
    public void WriteTag(RtfTags tag);
    public void WriteTag(RtfTags tag, Object[] arrParams);
    public bool get_Escape();
    public void set_Escape(bool value);
    public virtual Encoding get_Encoding();
    internal void WriteAlignment(string alignment);
    private void WriteEndFont(IFont font);
    private void WriteEndFontItalicBoldStriked(Font font);
    private void WriteEndUnderline(FontImpl font);
    private void WriteEndSubSuperScript(FontImpl font);
}
internal class Syncfusion.XlsIO.Implementation.ScenarioManager.Scenario : object {
    private IRange m_changingCells;
    private Scenarios m_parent;
    private List`1<object> m_values;
    private string m_comment;
    private bool m_locked;
    private int m_index;
    private bool m_hidden;
    private string m_names;
    internal Scenarios Parent { get; internal set; }
    public IRange ChangingCells { get; internal set; }
    public string Comment { get; public set; }
    public bool Hidden { get; public set; }
    public int Index { get; }
    public bool Locked { get; public set; }
    public string Name { get; public set; }
    public List`1<object> Values { get; internal set; }
    internal Scenario(Scenarios scenarios);
    internal Scenario(Scenarios scenarios, string name, IRange changingCell, List`1<object> value, string comment, bool locked, bool hidden);
    internal Scenarios get_Parent();
    internal void set_Parent(Scenarios value);
    public sealed virtual IRange get_ChangingCells();
    internal void set_ChangingCells(IRange value);
    public sealed virtual string get_Comment();
    public sealed virtual void set_Comment(string value);
    public sealed virtual bool get_Hidden();
    public sealed virtual void set_Hidden(bool value);
    public sealed virtual int get_Index();
    public sealed virtual bool get_Locked();
    public sealed virtual void set_Locked(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual List`1<object> get_Values();
    internal void set_Values(List`1<object> value);
    public sealed virtual IScenario ModifyScenario(IRange changingCells, List`1<object> values);
    public sealed virtual void Delete();
    public sealed virtual void Show();
    internal Scenario Clone(Scenarios scenarios);
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.ScenarioManager.Scenarios : CollectionBaseEx`1<IScenario> {
    private WorksheetImpl m_worksheet;
    private string m_lastchangingscenario;
    private bool m_isShow;
    private int m_lastChaningIndexValues;
    private IRange m_resultantCells;
    public int Count { get; }
    public IScenario Item { get; }
    public IScenario Item { get; }
    public IRange ResultCells { get; internal set; }
    internal WorksheetImpl Worksheet { get; internal set; }
    internal bool ShowValue { get; internal set; }
    internal string LastChangingScenario { get; internal set; }
    internal int LastChangingIndexValues { get; internal set; }
    internal Scenarios(WorksheetImpl worksheet, IApplication application);
    public sealed virtual int get_Count();
    public sealed virtual IScenario get_Item(int index);
    public sealed virtual IScenario get_Item(string name);
    public sealed virtual IRange get_ResultCells();
    internal void set_ResultCells(IRange value);
    internal WorksheetImpl get_Worksheet();
    internal void set_Worksheet(WorksheetImpl value);
    internal bool get_ShowValue();
    internal void set_ShowValue(bool value);
    internal string get_LastChangingScenario();
    internal void set_LastChangingScenario(string value);
    internal int get_LastChangingIndexValues();
    internal void set_LastChangingIndexValues(int value);
    public sealed virtual IScenario Add(string name, IRange changingCell, object value);
    public sealed virtual IScenario Add(string name, IRange changingCells, List`1<object> values);
    public sealed virtual void CreateSummary(IRange resultantcells);
    private void AddChangingCells(IWorksheet summaryWorksheet, int startRow, int scenariostartRow, int scenariostartColumn, int startColumn);
    private void AddChangingcellValues(IWorksheet worksheet, IScenario scenario, int startRow, int startColumn, string range);
    private void AddResultCells(IWorksheet summaryWorksheet, int scenariostartRow, int scenariostartColumn, int startColumn, IRange resultancells);
    private void AddResultantCellValues(IWorksheet worksheet, IScenario scenario, int startRow, int startColumn, IRange resultantcells);
    private void SaveChangingCellIntoNameManager(IWorksheet worksheet, int startRow, int startColumn);
    private void AddResultantCellNameManager(IWorksheet worksheet, int startRow, int startColumn, IRange resultantCells);
    public sealed virtual IScenarios Merge(IWorksheet sheet);
    internal Scenarios Clone(IWorksheet worksheet, IApplication application);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.Security.Aes : object {
    private int Nb;
    private int Nk;
    private int Nr;
    private Byte[] key;
    private Byte[0...,0...] Sbox;
    private Byte[0...,0...] iSbox;
    private Byte[0...,0...] w;
    private Byte[0...,0...] Rcon;
    private Byte[0...,0...] State;
    private KeySize mKeySize;
    public Aes(KeySize keySize, Byte[] keyBytes);
    private void Initialize();
    public void Cipher(Byte[] input, Byte[] output);
    public void InvCipher(Byte[] input, Byte[] output);
    private void SetNbNkNr(KeySize keySize);
    private void BuildSbox();
    private void BuildInvSbox();
    private void BuildRcon();
    private void AddRoundKey(int round);
    private void SubBytes();
    private void InvSubBytes();
    private void ShiftRows();
    private void InvShiftRows();
    private void MixColumns();
    private void InvMixColumns();
    private static byte gfmultby01(byte b);
    private static byte gfmultby02(byte b);
    private static byte gfmultby03(byte b);
    private static byte gfmultby09(byte b);
    private static byte gfmultby0b(byte b);
    private static byte gfmultby0d(byte b);
    private static byte gfmultby0e(byte b);
    private void KeyExpansion();
    private Byte[] SubWord(Byte[] word);
    private Byte[] RotWord(Byte[] word);
    public string DumpKey();
    public string DumpTwoByTwo(Byte[0...,0...] a);
}
internal enum Syncfusion.XlsIO.Implementation.Security.Algorithm : Enum {
    public int value__;
    public static Algorithm SHA1;
    public static Algorithm SHA256;
    public static Algorithm SHA512;
}
public class Syncfusion.XlsIO.Implementation.Security.DataEncryptionInfo : object {
    private int m_saltSize;
    private int m_blockSize;
    private int m_keyBits;
    private int m_hashSize;
    private string m_cipherAlgorithm;
    private string m_cipherChaining;
    private string m_hashAlgorithm;
    private Byte[] m_saltValue;
    internal Byte[] SaltValue { get; internal set; }
    internal Byte[] get_SaltValue();
    internal void set_SaltValue(Byte[] value);
    internal void Parse(XmlReader reader);
    internal void Serialize(XmlWriter writer);
}
public class Syncfusion.XlsIO.Implementation.Security.DataIntegrityInfo : object {
    private Byte[] m_HMacKey;
    private Byte[] m_HmacValue;
    internal Byte[] HMacKey { get; internal set; }
    internal Byte[] HMacValue { get; internal set; }
    internal Byte[] get_HMacKey();
    internal void set_HMacKey(Byte[] value);
    internal Byte[] get_HMacValue();
    internal void set_HMacValue(Byte[] value);
    internal void Parse(XmlReader reader);
    internal void Serialize(XmlWriter writer);
}
internal class Syncfusion.XlsIO.Implementation.Security.DataSpaceDefinition : object {
    private static int DefaultHeaderLength;
    private int m_iHeaderLength;
    private List`1<string> m_lstTransformRefs;
    public List`1<string> TransformRefs { get; }
    public DataSpaceDefinition(Stream stream);
    public List`1<string> get_TransformRefs();
    public void Serialize(Stream stream);
}
internal class Syncfusion.XlsIO.Implementation.Security.DataSpaceMap : object {
    private static int DefaultHeaderSize;
    private int m_iHeaderSize;
    private List`1<DataSpaceMapEntry> m_lstMapEntries;
    public List`1<DataSpaceMapEntry> MapEntries { get; }
    public DataSpaceMap(Stream stream);
    public List`1<DataSpaceMapEntry> get_MapEntries();
    public void Serialize(Stream stream);
}
internal class Syncfusion.XlsIO.Implementation.Security.DataSpaceMapEntry : object {
    private List`1<DataSpaceReferenceComponent> m_lstComponents;
    private string m_strDataSpaceName;
    public List`1<DataSpaceReferenceComponent> Components { get; }
    public string DataSpaceName { get; public set; }
    public DataSpaceMapEntry(Stream stream);
    public List`1<DataSpaceReferenceComponent> get_Components();
    public string get_DataSpaceName();
    public void set_DataSpaceName(string value);
    public void Serialize(Stream stream);
}
internal class Syncfusion.XlsIO.Implementation.Security.DataSpaceReferenceComponent : object {
    private int m_iComponentType;
    private string m_strName;
    public int ComponentType { get; }
    public string Name { get; }
    public DataSpaceReferenceComponent(int type, string name);
    public DataSpaceReferenceComponent(Stream stream);
    public int get_ComponentType();
    public string get_Name();
    public void Serialize(Stream stream);
}
public class Syncfusion.XlsIO.Implementation.Security.EncryptedKeyInfo : object {
    internal static int DefaultSpinCount;
    internal static int DefaultHashSize;
    internal static string DefaultCipherAlgorithm;
    internal static string DefaultCipherChaining;
    internal static string DefaultHashAlgorithm;
    internal static int DefaultKeyBits;
    internal static string AdvancedHashAlgorithm;
    private int m_spintCount;
    private int m_saltSize;
    private int m_blockSize;
    private int m_keyBits;
    private int m_hasSize;
    private string m_cipherAlgorithm;
    private string m_cipherChaining;
    private string m_hashAlgorithm;
    private Byte[] m_saltValue;
    private Byte[] m_verifierHashInput;
    private Byte[] m_verifierHashValue;
    private Byte[] m_encryptedKeyValue;
    internal int HashSize { get; internal set; }
    internal int SpinCount { get; internal set; }
    internal int BlockSize { get; internal set; }
    internal int KeyBits { get; internal set; }
    internal Byte[] SaltValue { get; internal set; }
    internal Byte[] VerifierHashValue { get; internal set; }
    internal Byte[] VerifierHashInput { get; internal set; }
    internal Byte[] KeyValue { get; internal set; }
    internal string HashAlgorithm { get; internal set; }
    internal int get_HashSize();
    internal void set_HashSize(int value);
    internal int get_SpinCount();
    internal void set_SpinCount(int value);
    internal int get_BlockSize();
    internal void set_BlockSize(int value);
    internal int get_KeyBits();
    internal void set_KeyBits(int value);
    internal Byte[] get_SaltValue();
    internal void set_SaltValue(Byte[] value);
    internal Byte[] get_VerifierHashValue();
    internal void set_VerifierHashValue(Byte[] value);
    internal Byte[] get_VerifierHashInput();
    internal void set_VerifierHashInput(Byte[] value);
    internal Byte[] get_KeyValue();
    internal void set_KeyValue(Byte[] value);
    internal string get_HashAlgorithm();
    internal void set_HashAlgorithm(string value);
    internal void Parse(XmlReader reader);
    internal void Serialize(XmlWriter writer);
}
internal class Syncfusion.XlsIO.Implementation.Security.EncryptionConstants : object {
    public static string SaltSize;
    public static string SaltValue;
    public static string BlockSize;
    public static string KeyBits;
    public static string HashSize;
    public static string CipherAlgorithm;
    public static string CipherChaining;
    public static string HashAlgorithm;
    public static string EncryptedHmacKey;
    public static string EncryptedHmacValue;
    public static string SpinCount;
    public static string EncryptedVerifierHashInput;
    public static string EncryptedVerifierHashValue;
    public static string EncryptedKeyValue;
    public static string EncryptionNameSpace;
    public static string PasswordNameSpace;
    public static string EncryptionTag;
    public static string KeyDataTag;
    public static string DataIntegrityTag;
    public static string KeyEncryptorTag;
    public static string KeyEncryptorsTag;
    public static string EncryptedKeyTag;
    public static string PPrefix;
    public static string Xmlns;
    public static string Uri;
}
public class Syncfusion.XlsIO.Implementation.Security.EncryptionHeader : object {
    private int m_iFlags;
    private int m_iSizeExtra;
    private int m_iAlgorithmId;
    private int m_iAlgorithmIdHash;
    private int m_iKeySize;
    private int m_iProviderType;
    private int m_iReserved1;
    private int m_iReserved2;
    private string m_strCSPName;
    public int Flags { get; public set; }
    public int SizeExtra { get; public set; }
    public int AlgorithmId { get; public set; }
    public int AlgorithmIdHash { get; public set; }
    public int KeySize { get; public set; }
    public int ProviderType { get; public set; }
    public int Reserved1 { get; public set; }
    public int Reserved2 { get; public set; }
    public string CSPName { get; public set; }
    public EncryptionHeader(Stream stream);
    public int get_Flags();
    public void set_Flags(int value);
    public int get_SizeExtra();
    public void set_SizeExtra(int value);
    public int get_AlgorithmId();
    public void set_AlgorithmId(int value);
    public int get_AlgorithmIdHash();
    public void set_AlgorithmIdHash(int value);
    public int get_KeySize();
    public void set_KeySize(int value);
    public int get_ProviderType();
    public void set_ProviderType(int value);
    public int get_Reserved1();
    public void set_Reserved1(int value);
    public int get_Reserved2();
    public void set_Reserved2(int value);
    public string get_CSPName();
    public void set_CSPName(string value);
    public void Parse(Stream stream);
    public void Serialize(Stream stream);
}
public class Syncfusion.XlsIO.Implementation.Security.EncryptionInfo : object {
    private int m_iVersionInfo;
    private int m_iFlags;
    private EncryptionHeader m_header;
    private EncryptionVerifier m_verifier;
    private EncryptedKeyInfo m_keyInfo;
    private DataIntegrityInfo m_dataIntegrity;
    private DataEncryptionInfo m_dataEncryption;
    internal EncryptedKeyInfo KeyInfo { get; internal set; }
    internal DataIntegrityInfo DataIntegrity { get; internal set; }
    internal DataEncryptionInfo DataEncryption { get; internal set; }
    public int VersionInfo { get; public set; }
    public int Flags { get; public set; }
    public EncryptionHeader Header { get; }
    public EncryptionVerifier Verifier { get; }
    public EncryptionInfo(Stream stream);
    internal EncryptedKeyInfo get_KeyInfo();
    internal void set_KeyInfo(EncryptedKeyInfo value);
    internal DataIntegrityInfo get_DataIntegrity();
    internal void set_DataIntegrity(DataIntegrityInfo value);
    internal DataEncryptionInfo get_DataEncryption();
    internal void set_DataEncryption(DataEncryptionInfo value);
    public int get_VersionInfo();
    public void set_VersionInfo(int value);
    public int get_Flags();
    public void set_Flags(int value);
    public EncryptionHeader get_Header();
    public EncryptionVerifier get_Verifier();
    public void Serialize(Stream stream);
}
internal class Syncfusion.XlsIO.Implementation.Security.EncryptionTransformInfo : object {
    private string m_strName;
    private int m_iBlockSize;
    private int m_iCipherMode;
    private int m_iReserved;
    public string Name { get; public set; }
    public int BlockSize { get; public set; }
    public int CipherMode { get; }
    public int Reserved { get; }
    public EncryptionTransformInfo(Stream stream);
    public string get_Name();
    public void set_Name(string value);
    public int get_BlockSize();
    public void set_BlockSize(int value);
    public int get_CipherMode();
    public int get_Reserved();
    public void Serialize(Stream stream);
}
public class Syncfusion.XlsIO.Implementation.Security.EncryptionVerifier : object {
    private Byte[] m_arrSalt;
    private Byte[] m_arrEncryptedVerifier;
    private Byte[] m_arrEncryptedVerifierHash;
    private int m_iVerifierHashSize;
    public Byte[] Salt { get; public set; }
    public Byte[] EncryptedVerifier { get; public set; }
    public Byte[] EncryptedVerifierHash { get; public set; }
    public int VerifierHashSize { get; public set; }
    public EncryptionVerifier(Stream stream);
    public Byte[] get_Salt();
    public void set_Salt(Byte[] value);
    public Byte[] get_EncryptedVerifier();
    public void set_EncryptedVerifier(Byte[] value);
    public Byte[] get_EncryptedVerifierHash();
    public void set_EncryptedVerifierHash(Byte[] value);
    public int get_VerifierHashSize();
    public void set_VerifierHashSize(int value);
    public void Parse(Stream stream);
    public void Serialize(Stream stream);
}
public class Syncfusion.XlsIO.Implementation.Security.Excel2007Decryptor : object {
    private int BlockSize;
    private DataSpaceMap m_dataSpaceMap;
    protected EncryptionInfo m_info;
    private ICompoundStorage m_storage;
    protected Byte[] m_arrKey;
    protected ICompoundStorage Storage { get; }
    protected ICompoundStorage get_Storage();
    public virtual Stream Decrypt();
    public void Initialize(ICompoundStorage storage);
    public static bool CheckEncrypted(ICompoundStorage storage);
    public virtual bool CheckPassword(string password);
    private Byte[] VerifyPassword(string password, EncryptionVerifier verifier);
    private static Byte[] Decrypt(Byte[] data, Byte[] key);
    private void ParseTransfrom(ICompoundStorage dataSpaces);
    private void ParseDataSpaceMap(ICompoundStorage dataSpaces);
    private void ParseTransformInfo(ICompoundStorage transformStorage);
}
internal class Syncfusion.XlsIO.Implementation.Security.Excel2007Encryptor : object {
    internal static int KeyLength;
    private static int DefaultVersion;
    private static int DefaultFlags;
    private static int AES128AlgorithmId;
    private static int SHA1AlgorithmHash;
    private static int DefaultProviderType;
    private static string DefaultCSPName;
    public virtual void Encrypt(Stream data, string password, ICompoundStorage root);
    private void PrepareDataSpaces(ICompoundStorage root);
    protected void SerializeVersion(ICompoundStorage dataSpaces);
    protected void SerializeTransformInfo(ICompoundStorage dataSpaces);
    protected void SerializeDataSpaceInfo(ICompoundStorage dataSpaces);
    protected void SerializeDataSpaceMap(ICompoundStorage dataSpaces);
    protected virtual Byte[] PrepareEncryptionInfo(ICompoundStorage root, string password);
    protected Byte[] CreateSalt(int length);
    private Byte[] Encrypt(Byte[] data, Byte[] key);
    private void Encrypt(Stream stream, Byte[] key, Stream output);
}
internal class Syncfusion.XlsIO.Implementation.Security.Excel2010Decryptor : Excel2007Decryptor {
    public virtual Stream Decrypt();
    public virtual bool CheckPassword(string password);
    private Byte[] VerifyPassword(string password, EncryptedKeyInfo verifier);
    internal Byte[] GetIntermediateKey(Byte[] arrEncryptedKeyValue, Byte[] arrPassword, Byte[] arrSalt, int spinCount, int keySize);
    private Byte[] GetVerifierHashInput(Byte[] arrVerifierHashInput, Byte[] arrPassword, Byte[] arrSalt, int spinCount, int keySize, int blockSize);
    internal Byte[] GetVerifierHashValue(Byte[] arrVerifierHashValue, Byte[] arrPassword, Byte[] arrSalt, int spinCount, int keySize);
    internal Byte[] GetHMacKey(Byte[] arrEncryptedHmacKey, Byte[] arrKey, Byte[] arrSalt, int hashSize);
    internal Byte[] GetHmacValue(Byte[] arrEncryptedHmacValue, Byte[] arrKey, Byte[] arrSalt);
    internal bool CheckDataIntegrity(Stream EncryptedPackage, Byte[] arrKey, Byte[] arrSalt, Byte[] arrEncryptedHmacKey, Byte[] arrEncryptedHmacValue, string hashAlgorithm);
}
internal class Syncfusion.XlsIO.Implementation.Security.Excel2010Encryptor : Excel2007Encryptor {
    internal static int DefaultSegmentSize;
    internal static int Excel2010Version;
    internal static int DefaultFlag;
    private Byte[] m_arrKey;
    public virtual void Encrypt(Stream data, string password, ICompoundStorage root);
    internal Stream Encrypt(Stream stream, Byte[] arrIntermediateKey, Byte[] arrKeyData_SaltValue, string hashAlgorithm);
    protected void PrepareDataSpaces(ICompoundStorage root);
    internal Byte[] CreateIntermediateKey(Byte[] arrPassword, Byte[] arrSalt, int spinCount, string hashAlgorithm);
    internal Byte[] CreateVerifierHashInput(Byte[] random, Byte[] arrPassword, Byte[] arrSalt, int spinCount, string hashAlgorithm);
    internal Byte[] CreateVerifierHashValue(Byte[] random, Byte[] arrPassword, Byte[] arrSalt, int spinCount, string hashAlgorithm);
    internal Byte[] CreateKey(Byte[] arrPassword, Byte[] arrSalt, Byte[] arrBlock_Key, int spinCount, int keySize, string algorithm);
    protected EncryptionInfo PrepareEncryptionInfo2010(ICompoundStorage root, string password);
    internal void PrepareDataIntegrity(Stream encryptedPackage, Byte[] arrKey, Byte[] arrSalt, int hashSize, EncryptionInfo info);
}
public interface Syncfusion.XlsIO.Implementation.Security.IDecryptor {
    public abstract virtual void Decrypt(DataProvider provider, int offset, int length, long streamPosition);
    public abstract virtual void Decrypt(Byte[] buffer, int offset, int length);
    public abstract virtual bool SetDecryptionInfo(Byte[] docId, Byte[] encryptedDocId, Byte[] digest, string password);
}
public interface Syncfusion.XlsIO.Implementation.Security.IEncryptor {
    public abstract virtual void SetEncryptionInfo(Byte[] docId, string password);
    public abstract virtual void Encrypt(DataProvider provider, int offset, int length, long streamPosition);
    public abstract virtual void Encrypt(Byte[] data, int offset, int length, long streamPosition);
    public abstract virtual FilePassRecord GetFilePassRecord();
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Implementation.Security.MD5Context : object {
    private static Byte[] PADDING;
    private static UInt32 DEF_MAGIC_1;
    private static UInt32 DEF_MAGIC_2;
    private static UInt32 DEF_MAGIC_3;
    private static UInt32 DEF_MAGIC_4;
    private UInt32[] m_uiI;
    private UInt32[] m_buf;
    private Byte[] m_in;
    private Byte[] m_digest;
    public UInt32[] I { get; public set; }
    public UInt32[] Buffer { get; public set; }
    public Byte[] InBuffer { get; public set; }
    public Byte[] Digest { get; public set; }
    private static MD5Context();
    public UInt32[] get_I();
    public void set_I(UInt32[] value);
    public UInt32[] get_Buffer();
    public void set_Buffer(UInt32[] value);
    public Byte[] get_InBuffer();
    public void set_InBuffer(Byte[] value);
    public Byte[] get_Digest();
    public void set_Digest(Byte[] value);
    public void Update(Byte[] inBuf, UInt32 inLen);
    public void Final();
    public void StoreDigest();
    private UInt32 F(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 G(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 H(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 III(UInt32 x, UInt32 y, UInt32 z);
    private UInt32 ROTATE_LEFT(UInt32 x, byte n);
    private void FF(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s, UInt32 ac);
    private void GG(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s, UInt32 ac);
    private void HH(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s, UInt32 ac);
    private void II(UInt32& a, UInt32 b, UInt32 c, UInt32 d, UInt32 x, byte s, UInt32 ac);
    private void Transform(UInt32[] inn);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Implementation.Security.MD5Decryptor : object {
    private static int DEF_READ_LENGTH;
    private static int DEF_PAS_LEN;
    private static int DEF_BLOCK_SIZE;
    private static int DEF_START_POS;
    private static int DEF_INC_BYTE_MAXVAL;
    private Byte[] m_baDocumentID;
    private Byte[] m_baPoint;
    private Byte[] m_baHash;
    private Byte[] m_baPassword;
    private MD5Context m_valContext;
    private long m_lLastStreamPosition;
    private ByteArrayDataProvider m_provider;
    public bool CheckPassword(string password);
    public MemoryStream Decrypt(Stream stream);
    public sealed virtual void Decrypt(DataProvider provider, int offset, int length, long streamPos);
    public sealed virtual void Decrypt(Byte[] buffer, int offset, int length);
    private void PreparePassword(string password);
    private void Swap(Byte& a, Byte& b);
    private void PrepareKey(WordKey key, Byte[] data, byte length);
    private void MakeKey(WordKey key, UInt32 block, MD5Context valContext);
    private bool CompareMemory(Byte[] block1, Byte[] block2, int length);
    private bool VerifyPassword();
    private void PrepareValContext();
    private static void SetByte(Byte[] arrData, int iOffset, int iLength, byte btValue);
    private void DecryptBuffer(DataProvider provider, int startOffset, int length, WordKey key);
    private void CheckPrepared();
    private WordKey PrepareKey(long position);
    public sealed virtual bool SetDecryptionInfo(Byte[] docId, Byte[] encryptedDocId, Byte[] digest, string password);
    public sealed virtual void SetEncryptionInfo(Byte[] docId, string password);
    public sealed virtual void Encrypt(DataProvider provider, int offset, int length, long streamPosition);
    public sealed virtual void Encrypt(Byte[] data, int offset, int length, long streamPosition);
    public sealed virtual FilePassRecord GetFilePassRecord();
}
internal class Syncfusion.XlsIO.Implementation.Security.RC4Decryptor : object {
    private static int DEF_READ_LENGTH;
    private static int DEF_PASS_LEN;
    private static int DEF_BLOCK_SIZE;
    private static int DEF_START_POS;
    private static int DEF_INC_BYTE_MAXVAL;
    private Byte[] m_verifierHash;
    private Byte[] m_verifier;
    private Byte[] m_salt;
    private string m_password;
    private Byte[] m_stateVector;
    private int m_xPos;
    private int m_yPos;
    private int blockNumber;
    private Byte[] m_key;
    private bool m_writeBytes;
    private bool m_usePreviousValue;
    internal Byte[] StateVector { get; internal set; }
    internal Byte[] Key { get; internal set; }
    internal bool WriteBytes { get; internal set; }
    internal bool UsePreviousValue { get; internal set; }
    internal void set_StateVector(Byte[] value);
    internal Byte[] get_StateVector();
    internal void set_Key(Byte[] value);
    internal Byte[] get_Key();
    internal void set_WriteBytes(bool value);
    internal bool get_WriteBytes();
    internal void set_UsePreviousValue(bool value);
    internal bool get_UsePreviousValue();
    internal static Byte[] GenerateRC4Key(string password, Byte[] salt, int blockNumber);
    internal bool VerifyPassword(string password, EncryptionVerifier verifierDetails);
    private static Byte[] Combine(Byte[][] arrays);
    internal Byte[] Decrypt(Byte[] data, Byte[] key);
    private sealed virtual override void Syncfusion.XlsIO.Implementation.Security.IDecryptor.Decrypt(DataProvider provider, int offset, int length, long streamPosition);
    private Byte[] DecryptBuffer(DataProvider provider, int startOffset, int length, Byte[] key);
    private void InitializeSValue(Byte[] key);
    private sealed virtual override void Syncfusion.XlsIO.Implementation.Security.IDecryptor.Decrypt(Byte[] buffer, int offset, int length);
    private sealed virtual override bool Syncfusion.XlsIO.Implementation.Security.IDecryptor.SetDecryptionInfo(Byte[] salt, Byte[] verifier, Byte[] verifierHash, string password);
}
internal class Syncfusion.XlsIO.Implementation.Security.SecurityHelper : object {
    internal static int Excel2010Version;
    private static int PasswordIterationCount;
    internal static string EncryptionInfoStream;
    internal static string DataSpacesStorage;
    internal static string DataSpaceMapStream;
    internal static string TransformPrimaryStream;
    internal static string DataSpaceInfoStorage;
    internal static string TransformInfoStorage;
    internal static string EncryptedPackageStream;
    internal static string StrongEncryptionDataSpaceStream;
    internal static string StrongEncryptionTransformStream;
    internal static string VersionStream;
    public static int ReadInt32(Stream stream, Byte[] buffer);
    public static string ReadUnicodeStringP4(Stream stream);
    public static string ReadUnicodeStringZero(Stream stream);
    public static void WriteInt32(Stream stream, int value);
    public static void WriteUnicodeStringP4(Stream stream, string value);
    public static void WriteUnicodeStringZero(Stream stream, string value);
    internal static Byte[] CreateKey(string password, Byte[] salt, int keyLength);
    internal static Byte[] EncryptDecrypt(Byte[] data, EncryptionMethod method, int blockSize);
    public static Byte[] CombineArray(Byte[] buffer1, Byte[] buffer2);
}
internal class Syncfusion.XlsIO.Implementation.Security.SecurityHelper2010 : object {
    internal static string SHA1Algorithm;
    internal static string SHA256Alogrithm;
    internal static string SHA512Alogrithm;
    internal static Byte[] Encrypt(Byte[] arrPlainData, Byte[] arrKey, Byte[] arrIV, int blockSize);
    internal static Byte[] Decrypt(Byte[] arrCipherData, Byte[] arrKey, Byte[] arrIV, int keySize, int actualLength);
    internal static Byte[] CreateKey(Byte[] arrPassword, Byte[] arrSalt, Byte[] arrBlock_Key, int spinCount, int keySize, string hashAlgorithm);
    internal static Byte[] GenerateVector(Byte[] arrSalt, UInt32 segmentNumber, string hashAlgorithm);
    internal static Byte[] GenerateVector(Byte[] arrSalt, Byte[] blockKey, string hashAlgorithm);
    internal static Byte[] Hash(Byte[] input, string hashAlgorithm);
    internal static Byte[] XOR(Byte[] fByte, Byte[] sByte);
    internal static Byte[] TryPadOrTruncate(Byte[] arrData, int length, byte padValue);
    internal static HashAlgorithm GetAlgorithm(string algorithmName);
    internal static bool VerifyPassword(string password, string algorithmName, Byte[] saltValue, Byte[] hashValue, UInt32 spinCount);
}
internal class Syncfusion.XlsIO.Implementation.Security.TransformInfo : object {
    public TransformInfo(ICompoundStorage storage);
}
internal class Syncfusion.XlsIO.Implementation.Security.TransformInfoHeader : object {
    private int m_iTransformType;
    private string m_strTransformId;
    private string m_strTransformName;
    private int m_iReaderVersion;
    private int m_iUpdaterVersion;
    private int m_iWriterVersion;
    public int TransformType { get; public set; }
    public string TransformId { get; public set; }
    public string TransformName { get; public set; }
    public int ReaderVersion { get; public set; }
    public int UpdaterVersion { get; public set; }
    public int WriterVersion { get; public set; }
    public TransformInfoHeader(Stream stream);
    public int get_TransformType();
    public void set_TransformType(int value);
    public string get_TransformId();
    public void set_TransformId(string value);
    public string get_TransformName();
    public void set_TransformName(string value);
    public int get_ReaderVersion();
    public void set_ReaderVersion(int value);
    public int get_UpdaterVersion();
    public void set_UpdaterVersion(int value);
    public int get_WriterVersion();
    public void set_WriterVersion(int value);
    public void Serialize(Stream stream);
}
internal class Syncfusion.XlsIO.Implementation.Security.VersionInfo : object {
    private string m_strFeatureId;
    private int m_iReaderVersion;
    private int m_iUpdaterVersion;
    private int m_iWriterVersion;
    public string FeatureId { get; public set; }
    public int ReaderVersion { get; public set; }
    public int UpdaterVersion { get; public set; }
    public int WriterVersion { get; public set; }
    public string get_FeatureId();
    public void set_FeatureId(string value);
    public int get_ReaderVersion();
    public void set_ReaderVersion(int value);
    public int get_UpdaterVersion();
    public void set_UpdaterVersion(int value);
    public int get_WriterVersion();
    public void set_WriterVersion(int value);
    public void Serialize(Stream stream);
}
public class Syncfusion.XlsIO.Implementation.Security.WordKey : object {
    private Byte[] m_baState;
    private byte m_bX;
    private byte m_bY;
    public Byte[] Status { get; public set; }
    public byte X { get; public set; }
    public byte Y { get; public set; }
    public Byte[] get_Status();
    public void set_Status(Byte[] value);
    public byte get_X();
    public void set_X(byte value);
    public byte get_Y();
    public void set_Y(byte value);
}
public class Syncfusion.XlsIO.Implementation.ShadowImpl : CommonObject {
    private ShadowData m_chartShadowFormat;
    private WorkbookImpl m_parentBook;
    private bool m_HasCustomShadowStyle;
    private int m_Transparency;
    private int m_Size;
    private int m_Blur;
    private ChartMarkerFormatRecord m_Shadow;
    private int m_Angle;
    private int m_Distance;
    private ColorObject m_shadowColor;
    private bool m_isShadowPropertiesChanged;
    private Stream m_glowStream;
    private int m_softEdgeRadius;
    [CLSCompliantAttribute("False")]
public ChartMarkerFormatRecord ShadowFormat { get; }
    internal bool IsShadowPropertiesChanged { get; internal set; }
    public Excel2007ChartPresetsOuter ShadowOuterPresets { get; public set; }
    public Excel2007ChartPresetsInner ShadowInnerPresets { get; public set; }
    public bool HasCustomShadowStyle { get; public set; }
    public Excel2007ChartPresetsPrespective ShadowPrespectivePresets { get; public set; }
    public int Transparency { get; public set; }
    public int Size { get; public set; }
    public int Blur { get; public set; }
    public int Angle { get; public set; }
    public Color ShadowColor { get; public set; }
    public int Distance { get; public set; }
    internal Stream GlowStream { get; internal set; }
    internal int SoftEdgeRadius { get; internal set; }
    public ShadowImpl(IApplication application, object parent);
    private void InitializeColors();
    internal void ShadowColorChanged();
    public ChartMarkerFormatRecord get_ShadowFormat();
    private void SetParents();
    internal bool get_IsShadowPropertiesChanged();
    internal void set_IsShadowPropertiesChanged(bool value);
    public sealed virtual Excel2007ChartPresetsOuter get_ShadowOuterPresets();
    public sealed virtual void set_ShadowOuterPresets(Excel2007ChartPresetsOuter value);
    public sealed virtual Excel2007ChartPresetsInner get_ShadowInnerPresets();
    public sealed virtual void set_ShadowInnerPresets(Excel2007ChartPresetsInner value);
    public sealed virtual bool get_HasCustomShadowStyle();
    public sealed virtual void set_HasCustomShadowStyle(bool value);
    public sealed virtual Excel2007ChartPresetsPrespective get_ShadowPrespectivePresets();
    public sealed virtual void set_ShadowPrespectivePresets(Excel2007ChartPresetsPrespective value);
    public sealed virtual int get_Transparency();
    public sealed virtual void set_Transparency(int value);
    public sealed virtual int get_Size();
    public sealed virtual void set_Size(int value);
    public sealed virtual int get_Blur();
    public sealed virtual void set_Blur(int value);
    public sealed virtual int get_Angle();
    public sealed virtual void set_Angle(int value);
    public sealed virtual Color get_ShadowColor();
    public sealed virtual void set_ShadowColor(Color value);
    public sealed virtual int get_Distance();
    public sealed virtual void set_Distance(int value);
    private void SetFormat();
    internal void SetInnerShapes(object value, string property);
    private sealed virtual override object Syncfusion.XlsIO.Interfaces.ICloneParent.Clone(object parent);
    public ShadowImpl Clone(object parent);
    public sealed virtual void CustomShadowStyles(Excel2007ChartPresetsOuter iOuter, int iTransparency, int iSize, int iBlur, int iAngle, int iDistance, bool CustomShadowStyle);
    public sealed virtual void CustomShadowStyles(Excel2007ChartPresetsInner iInner, int iTransparency, int iBlur, int iAngle, int iDistance, bool CustomShadowStyle);
    public sealed virtual void CustomShadowStyles(Excel2007ChartPresetsPrespective iPerspective, int iTransparency, int iSize, int iBlur, int iAngle, int iDistance, bool CustomShadowStyle);
    internal Stream get_GlowStream();
    internal void set_GlowStream(Stream value);
    internal int get_SoftEdgeRadius();
    internal void set_SoftEdgeRadius(int value);
}
public class Syncfusion.XlsIO.Implementation.Shapes.AutoShapeImpl : ShapeImpl {
    private ShapeImplExt m_shapeExt;
    private bool m_isMoveWithCell;
    private bool m_isSizeWithCell;
    private bool m_isFill;
    private bool m_isNoFill;
    private bool m_isGroupFill;
    internal bool IsGroupFill { get; internal set; }
    internal bool IsFill { get; internal set; }
    internal bool IsNoFill { get; internal set; }
    internal ShapeImplExt ShapeExt { get; internal set; }
    public bool FlipVertical { get; public set; }
    public bool FlipHorizontal { get; public set; }
    public ITextFrame TextFrame { get; }
    internal TextFrame TextFrameInternal { get; }
    public string AlternativeText { get; public set; }
    public int Id { get; }
    public string Name { get; public set; }
    public int ShapeRotation { get; public set; }
    public IFill Fill { get; }
    public IShapeLineFormat Line { get; }
    public bool IsHidden { get; public set; }
    public string Title { get; public set; }
    public bool IsMoveWithCell { get; public set; }
    public bool IsSizeWithCell { get; public set; }
    internal AutoShapeImpl(IApplication application, object parent);
    internal bool get_IsGroupFill();
    internal void set_IsGroupFill(bool value);
    internal bool get_IsFill();
    internal void set_IsFill(bool value);
    internal bool get_IsNoFill();
    internal void set_IsNoFill(bool value);
    internal ShapeImplExt get_ShapeExt();
    internal void set_ShapeExt(ShapeImplExt value);
    public bool get_FlipVertical();
    public void set_FlipVertical(bool value);
    public bool get_FlipHorizontal();
    public void set_FlipHorizontal(bool value);
    public virtual ITextFrame get_TextFrame();
    internal TextFrame get_TextFrameInternal();
    public virtual string get_AlternativeText();
    public virtual void set_AlternativeText(string value);
    public virtual int get_Id();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual int get_ShapeRotation();
    public virtual void set_ShapeRotation(int value);
    public virtual IFill get_Fill();
    public virtual IShapeLineFormat get_Line();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public string get_Title();
    public void set_Title(string value);
    public virtual bool get_IsMoveWithCell();
    public virtual void set_IsMoveWithCell(bool value);
    public virtual bool get_IsSizeWithCell();
    public virtual void set_IsSizeWithCell(bool value);
    internal void CreateShape(AutoShapeType type, WorksheetBaseImpl sheetImpl);
    internal void SetShapeID(int shapeId);
    private void SetPlacementValue();
}
public class Syncfusion.XlsIO.Implementation.Shapes.BitmapShapeImpl : ShapeImpl {
    public static int ShapeInstance;
    private UInt32 m_uiBlipId;
    private string m_strBlipFileName;
    private MsofbtBSE m_picture;
    private Image m_bitmap;
    private Stream m_bitmapStream;
    private Stream m_streamBlipSubNodes;
    private Stream m_streamShapeProperties;
    private Stream m_svgData;
    private string m_svgRelId;
    private string m_svgPicturePath;
    private bool m_isSVGUpdated;
    private Stream m_srcRectStream;
    private string m_strMacro;
    private bool m_bDDE;
    private bool m_bCamera;
    private long m_offsetX;
    private long m_offsetY;
    private long m_extentsX;
    private long m_extentsY;
    private bool m_flipVertical;
    private bool m_flipHorizontal;
    private string m_externalLink;
    private bool m_isSvgExternalLink;
    internal Dictionary`2<string, Stream> m_preservedElements;
    protected MsoOptions[] cropOptions;
    private int m_cropLeftOffset;
    private int m_cropRightOffset;
    private int m_cropBottomOffset;
    private int m_cropTopOffset;
    private bool m_hasTransparentDetails;
    private int m_amount;
    private int m_threshold;
    private bool m_grayScale;
    private bool m_isUseAlpha;
    private List`1<ColorObject> m_duoTone;
    private List`1<ColorObject> m_colorChange;
    private CameraTool m_camera;
    public bool HasTransparency { get; public set; }
    public string FileName { get; public set; }
    internal string ExternalLink { get; internal set; }
    internal bool IsSvgExternalLink { get; internal set; }
    [CLSCompliantAttribute("False")]
public UInt32 BlipId { get; public set; }
    internal int CropLeftOffset { get; internal set; }
    internal int CropRightOffset { get; internal set; }
    internal int CropBottomOffset { get; internal set; }
    internal int CropTopOffset { get; internal set; }
    public Image Picture { get; public set; }
    public Stream BlipSubNodesStream { get; public set; }
    [ObsoleteAttribute]
public Stream ShapePropertiesStream { get; public set; }
    public Stream SvgData { get; public set; }
    internal string SvgRelId { get; internal set; }
    internal bool IsSvgUpdated { get; internal set; }
    internal string SvgPicturePath { get; internal set; }
    internal Dictionary`2<string, Stream> PreservedElements { get; }
    public Stream SourceRectStream { get; public set; }
    public int Instance { get; }
    public string Macro { get; public set; }
    public bool IsDDE { get; public set; }
    public bool IsCamera { get; public set; }
    internal long OffsetX { get; internal set; }
    internal long OffsetY { get; internal set; }
    internal long ExtentsX { get; internal set; }
    internal long ExtentsY { get; internal set; }
    internal bool FlipVertical { get; internal set; }
    internal bool FlipHorizontal { get; internal set; }
    public IHyperLink Hyperlink { get; internal set; }
    internal bool IsUseAlpha { get; internal set; }
    internal List`1<ColorObject> DuoTone { get; }
    internal List`1<ColorObject> ColorChange { get; }
    internal int Amount { get; internal set; }
    internal int Threshold { get; internal set; }
    internal bool GrayScale { get; internal set; }
    internal CameraTool Camera { get; internal set; }
    public BitmapShapeImpl(IApplication application, object parent);
    public BitmapShapeImpl(IApplication application, object parent, bool IncludeShapeOptions);
    [CLSCompliantAttribute("False")]
public BitmapShapeImpl(IApplication application, object parent, MsoBase[] records, int index);
    [CLSCompliantAttribute("False")]
public BitmapShapeImpl(IApplication application, object parent, MsofbtSpContainer container);
    public bool get_HasTransparency();
    public void set_HasTransparency(bool value);
    public sealed virtual string get_FileName();
    public void set_FileName(string value);
    internal string get_ExternalLink();
    internal void set_ExternalLink(string value);
    internal bool get_IsSvgExternalLink();
    internal void set_IsSvgExternalLink(bool value);
    public UInt32 get_BlipId();
    public void set_BlipId(UInt32 value);
    internal int get_CropLeftOffset();
    internal void set_CropLeftOffset(int value);
    internal int get_CropRightOffset();
    internal void set_CropRightOffset(int value);
    internal int get_CropBottomOffset();
    internal void set_CropBottomOffset(int value);
    internal int get_CropTopOffset();
    internal void set_CropTopOffset(int value);
    public sealed virtual Image get_Picture();
    public sealed virtual void set_Picture(Image value);
    public Stream get_BlipSubNodesStream();
    public void set_BlipSubNodesStream(Stream value);
    public Stream get_ShapePropertiesStream();
    public void set_ShapePropertiesStream(Stream value);
    public sealed virtual Stream get_SvgData();
    public sealed virtual void set_SvgData(Stream value);
    internal string get_SvgRelId();
    internal void set_SvgRelId(string value);
    internal bool get_IsSvgUpdated();
    internal void set_IsSvgUpdated(bool value);
    internal string get_SvgPicturePath();
    internal void set_SvgPicturePath(string value);
    internal Dictionary`2<string, Stream> get_PreservedElements();
    public Stream get_SourceRectStream();
    public void set_SourceRectStream(Stream value);
    public virtual int get_Instance();
    public string get_Macro();
    public void set_Macro(string value);
    public bool get_IsDDE();
    public void set_IsDDE(bool value);
    public bool get_IsCamera();
    public void set_IsCamera(bool value);
    internal long get_OffsetX();
    internal void set_OffsetX(long value);
    internal long get_OffsetY();
    internal void set_OffsetY(long value);
    internal long get_ExtentsX();
    internal void set_ExtentsX(long value);
    internal long get_ExtentsY();
    internal void set_ExtentsY(long value);
    internal bool get_FlipVertical();
    internal void set_FlipVertical(bool value);
    internal bool get_FlipHorizontal();
    internal void set_FlipHorizontal(bool value);
    public sealed virtual IHyperLink get_Hyperlink();
    internal void set_Hyperlink(IHyperLink value);
    internal bool get_IsUseAlpha();
    internal void set_IsUseAlpha(bool value);
    internal List`1<ColorObject> get_DuoTone();
    internal List`1<ColorObject> get_ColorChange();
    internal int get_Amount();
    internal void set_Amount(int value);
    internal int get_Threshold();
    internal void set_Threshold(int value);
    internal bool get_GrayScale();
    internal void set_GrayScale(bool value);
    internal CameraTool get_Camera();
    internal void set_Camera(CameraTool value);
    [CLSCompliantAttribute("False")]
protected virtual bool ParseOption(FOPTE option);
    protected void ParseCropRectangle(FOPTE option);
    [CLSCompliantAttribute("False")]
protected virtual void ParseBlipId(FOPTE option);
    [CLSCompliantAttribute("False")]
protected virtual void ParseBlipName(FOPTE option);
    [CLSCompliantAttribute("False")]
protected virtual bool ExtractNecessaryOption(FOPTE option);
    public sealed virtual void Dispose();
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    protected virtual void OnPrepareForSerialization();
    private void SerializeOptions(MsofbtSpContainer spContainer);
    private void SerializeClientAnchor(MsofbtSpContainer spContainer);
    private void SerializeClientData(MsofbtSpContainer spContainer);
    public virtual void RegisterInSubCollection();
    protected virtual void OnDelete();
    protected void OnDelete(bool removeImage);
    public sealed virtual void Remove(bool removeImage);
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollection);
    [CLSCompliantAttribute("False")]
protected virtual bool UpdateMso(MsoBase mso);
    public virtual void GenerateDefaultName();
    [CLSCompliantAttribute("False")]
public void SetBlipId(UInt32 newId);
}
internal class Syncfusion.XlsIO.Implementation.Shapes.BulletImpl : object {
    private string m_typeFace;
    private string m_panose;
    private int m_pitchFamily;
    private int m_charSet;
    private string m_bulletChar;
    private static string m_bulletStatic;
    internal string TypeFace { get; internal set; }
    internal string Panose { get; internal set; }
    internal int PitchFamily { get; internal set; }
    internal int CharSet { get; internal set; }
    internal string BulletChar { get; internal set; }
    internal BulletType Type { get; internal set; }
    private static BulletImpl();
    internal string get_TypeFace();
    internal void set_TypeFace(string value);
    internal string get_Panose();
    internal void set_Panose(string value);
    internal int get_PitchFamily();
    internal void set_PitchFamily(int value);
    internal int get_CharSet();
    internal void set_CharSet(int value);
    internal string get_BulletChar();
    internal void set_BulletChar(string value);
    internal BulletType get_Type();
    internal void set_Type(BulletType value);
    private void SetDefaults(BulletType type);
    internal static BulletType GetBulletType(string value);
    internal string GetBulletChar(BulletType type);
}
internal enum Syncfusion.XlsIO.Implementation.Shapes.BulletType : Enum {
    public int value__;
    public static BulletType None;
    public static BulletType FilledRound;
    public static BulletType HollowRound;
    public static BulletType FilledSquare;
    public static BulletType HollowSquare;
    public static BulletType Star;
    public static BulletType Arrow;
    public static BulletType CheckMark;
    public static BulletType Custom;
}
internal class Syncfusion.XlsIO.Implementation.Shapes.CameraTool : object {
    private int m_shapeId;
    private string m_localName;
    private string m_cellRange;
    internal int ShapeID { get; internal set; }
    internal string LocalName { get; internal set; }
    internal string CellRange { get; internal set; }
    internal int get_ShapeID();
    internal void set_ShapeID(int value);
    internal string get_LocalName();
    internal void set_LocalName(string value);
    internal string get_CellRange();
    internal void set_CellRange(string value);
    internal CameraTool Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.Shapes.ChartShapeImpl : ShapeImpl {
    private static int DEF_SHAPE_INSTANCE;
    private static int DEF_SHAPE_VERSION;
    private static int DEF_OPTIONS_VERSION;
    private static int DEF_OPTIONS_INSTANCE;
    private static UInt32 DEF_LOCK_GROUPING_VALUE;
    private static UInt32 DEF_LINECOLOR;
    private static UInt32 DEF_NOLINEDRAWDASH;
    private static UInt32 DEF_SHADOWOBSCURED;
    private static UInt32 DEF_FORECOLOR;
    private static UInt32 DEF_BACKCOLOR;
    private ChartImpl m_chart;
    private int m_iTopRow;
    private int m_iBottomRow;
    private int m_iLeftColumn;
    private int m_iRightColumn;
    private WorksheetBaseImpl m_worksheet;
    private int m_offsetX;
    private int m_offsetY;
    private int m_extentsX;
    private int m_extentsY;
    private ChartCategoryCollection m_categories;
    public ChartImpl ChartObject { get; }
    internal int OffsetX { get; internal set; }
    internal int OffsetY { get; internal set; }
    internal int ExtentsX { get; internal set; }
    internal int ExtentsY { get; internal set; }
    public IHyperLink Hyperlink { get; }
    public int Rotation { get; public set; }
    public ExcelSeriesNameLevel SeriesNameLevel { get; public set; }
    public ExcelCategoriesLabelLevel CategoryLabelLevel { get; public set; }
    public IChartCategories Categories { get; }
    public int Elevation { get; public set; }
    public int Perspective { get; public set; }
    public int HeightPercent { get; public set; }
    public int DepthPercent { get; public set; }
    public int GapDepth { get; public set; }
    public bool RightAngleAxes { get; public set; }
    public bool AutoScaling { get; public set; }
    public bool WallsAndGridlines2D { get; public set; }
    public IShapes Shapes { get; }
    public ExcelChartType PivotChartType { get; public set; }
    public IPivotTable PivotSource { get; public set; }
    public bool ShowAllFieldButtons { get; public set; }
    public bool ShowValueFieldButtons { get; public set; }
    public bool ShowAxisFieldButtons { get; public set; }
    public bool ShowLegendFieldButtons { get; public set; }
    public bool ShowReportFilterFieldButtons { get; public set; }
    public ExcelChartType ChartType { get; public set; }
    public IRange DataRange { get; public set; }
    public bool IsSeriesInRows { get; public set; }
    public string ChartTitle { get; public set; }
    public bool HasTitle { get; public set; }
    public IChartTextArea ChartTitleArea { get; }
    public string CategoryAxisTitle { get; public set; }
    public string ValueAxisTitle { get; public set; }
    public string SecondaryCategoryAxisTitle { get; public set; }
    public string SecondaryValueAxisTitle { get; public set; }
    public string SeriesAxisTitle { get; public set; }
    public IChartPageSetup PageSetup { get; }
    public double XPos { get; public set; }
    public double YPos { get; public set; }
    private double Syncfusion.XlsIO.IChart.Width { get; private set; }
    private double Syncfusion.XlsIO.IChart.Height { get; private set; }
    public IChartSeries Series { get; }
    public IChartCategoryAxis PrimaryCategoryAxis { get; }
    public IChartValueAxis PrimaryValueAxis { get; }
    public IChartSeriesAxis PrimarySerieAxis { get; }
    public IChartCategoryAxis SecondaryCategoryAxis { get; }
    public IChartValueAxis SecondaryValueAxis { get; }
    public IChartFrameFormat ChartArea { get; }
    public IChartFrameFormat PlotArea { get; }
    public ChartFormatCollection PrimaryFormats { get; }
    public ChartFormatCollection SecondaryFormats { get; }
    public IPictures Pictures { get; }
    public IChartShapes Charts { get; }
    public ExcelKnownColors TabColor { get; public set; }
    public bool IsRightToLeft { get; public set; }
    public Color TabColorRGB { get; public set; }
    public IChartWallOrFloor Walls { get; }
    public IChartWallOrFloor SideWall { get; }
    public IChartWallOrFloor BackWall { get; }
    public IChartWallOrFloor Floor { get; }
    public IChartDataTable DataTable { get; }
    public bool IsSelected { get; }
    public bool HasDataTable { get; public set; }
    public bool HasLegend { get; public set; }
    public IChartLegend Legend { get; }
    public bool HasPlotArea { get; public set; }
    public int TabIndex { get; }
    public WorksheetVisibility Visibility { get; public set; }
    public ExcelChartPlotEmpty DisplayBlanksAs { get; public set; }
    public bool PlotVisibleOnly { get; public set; }
    public bool SizeWithWindow { get; public set; }
    public ITextBoxes TextBoxes { get; }
    public ICheckBoxes CheckBoxes { get; }
    public IOptionButtons OptionButtons { get; }
    public IComboBoxes ComboBoxes { get; }
    public string CodeName { get; }
    public bool ProtectContents { get; }
    public bool ProtectDrawingObjects { get; }
    public bool ProtectScenarios { get; }
    public ExcelSheetProtection Protection { get; }
    public bool IsPasswordProtected { get; }
    public int Zoom { get; public set; }
    public int Style { get; public set; }
    public ChartShapeImpl(IApplication application, object parent, ChartShapeImpl instance, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes);
    public ChartShapeImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public ChartShapeImpl(IApplication application, object parent, MsofbtSpContainer container, ExcelParseOptions options);
    public ChartImpl get_ChartObject();
    internal int get_OffsetX();
    internal void set_OffsetX(int value);
    internal int get_OffsetY();
    internal void set_OffsetY(int value);
    internal int get_ExtentsX();
    internal void set_ExtentsX(int value);
    internal int get_ExtentsY();
    internal void set_ExtentsY(int value);
    public sealed virtual IHyperLink get_Hyperlink();
    public sealed virtual int get_Rotation();
    public sealed virtual void set_Rotation(int value);
    public sealed virtual ExcelSeriesNameLevel get_SeriesNameLevel();
    public sealed virtual void set_SeriesNameLevel(ExcelSeriesNameLevel value);
    public sealed virtual ExcelCategoriesLabelLevel get_CategoryLabelLevel();
    public sealed virtual void set_CategoryLabelLevel(ExcelCategoriesLabelLevel value);
    public sealed virtual IChartCategories get_Categories();
    public sealed virtual int get_Elevation();
    public sealed virtual void set_Elevation(int value);
    public sealed virtual int get_Perspective();
    public sealed virtual void set_Perspective(int value);
    public sealed virtual int get_HeightPercent();
    public sealed virtual void set_HeightPercent(int value);
    public sealed virtual int get_DepthPercent();
    public sealed virtual void set_DepthPercent(int value);
    public sealed virtual int get_GapDepth();
    public sealed virtual void set_GapDepth(int value);
    public sealed virtual bool get_RightAngleAxes();
    public sealed virtual void set_RightAngleAxes(bool value);
    public sealed virtual bool get_AutoScaling();
    public sealed virtual void set_AutoScaling(bool value);
    public sealed virtual bool get_WallsAndGridlines2D();
    public sealed virtual void set_WallsAndGridlines2D(bool value);
    public sealed virtual IShapes get_Shapes();
    public sealed virtual ExcelChartType get_PivotChartType();
    public sealed virtual void set_PivotChartType(ExcelChartType value);
    public sealed virtual IPivotTable get_PivotSource();
    public sealed virtual void set_PivotSource(IPivotTable value);
    public sealed virtual bool get_ShowAllFieldButtons();
    public sealed virtual void set_ShowAllFieldButtons(bool value);
    public sealed virtual bool get_ShowValueFieldButtons();
    public sealed virtual void set_ShowValueFieldButtons(bool value);
    public sealed virtual bool get_ShowAxisFieldButtons();
    public sealed virtual void set_ShowAxisFieldButtons(bool value);
    public sealed virtual bool get_ShowLegendFieldButtons();
    public sealed virtual void set_ShowLegendFieldButtons(bool value);
    public sealed virtual bool get_ShowReportFilterFieldButtons();
    public sealed virtual void set_ShowReportFilterFieldButtons(bool value);
    public sealed virtual ExcelChartType get_ChartType();
    public sealed virtual void set_ChartType(ExcelChartType value);
    public sealed virtual IRange get_DataRange();
    public sealed virtual void set_DataRange(IRange value);
    public sealed virtual bool get_IsSeriesInRows();
    public sealed virtual void set_IsSeriesInRows(bool value);
    public sealed virtual string get_ChartTitle();
    public sealed virtual void set_ChartTitle(string value);
    public sealed virtual bool get_HasTitle();
    public sealed virtual void set_HasTitle(bool value);
    public sealed virtual IChartTextArea get_ChartTitleArea();
    public string get_CategoryAxisTitle();
    public void set_CategoryAxisTitle(string value);
    public string get_ValueAxisTitle();
    public void set_ValueAxisTitle(string value);
    public string get_SecondaryCategoryAxisTitle();
    public void set_SecondaryCategoryAxisTitle(string value);
    public string get_SecondaryValueAxisTitle();
    public void set_SecondaryValueAxisTitle(string value);
    public string get_SeriesAxisTitle();
    public void set_SeriesAxisTitle(string value);
    public sealed virtual IChartPageSetup get_PageSetup();
    public sealed virtual double get_XPos();
    public sealed virtual void set_XPos(double value);
    public sealed virtual double get_YPos();
    public sealed virtual void set_YPos(double value);
    private sealed virtual override double Syncfusion.XlsIO.IChart.get_Width();
    private sealed virtual override void Syncfusion.XlsIO.IChart.set_Width(double value);
    private sealed virtual override double Syncfusion.XlsIO.IChart.get_Height();
    private sealed virtual override void Syncfusion.XlsIO.IChart.set_Height(double value);
    public sealed virtual IChartSeries get_Series();
    public sealed virtual IChartCategoryAxis get_PrimaryCategoryAxis();
    public sealed virtual IChartValueAxis get_PrimaryValueAxis();
    public sealed virtual IChartSeriesAxis get_PrimarySerieAxis();
    public sealed virtual IChartCategoryAxis get_SecondaryCategoryAxis();
    public sealed virtual IChartValueAxis get_SecondaryValueAxis();
    public sealed virtual IChartFrameFormat get_ChartArea();
    public sealed virtual IChartFrameFormat get_PlotArea();
    public ChartFormatCollection get_PrimaryFormats();
    public ChartFormatCollection get_SecondaryFormats();
    public sealed virtual IPictures get_Pictures();
    public sealed virtual IChartShapes get_Charts();
    public sealed virtual ExcelKnownColors get_TabColor();
    public sealed virtual void set_TabColor(ExcelKnownColors value);
    public sealed virtual bool get_IsRightToLeft();
    public sealed virtual void set_IsRightToLeft(bool value);
    public sealed virtual Color get_TabColorRGB();
    public sealed virtual void set_TabColorRGB(Color value);
    public sealed virtual IChartWallOrFloor get_Walls();
    public sealed virtual IChartWallOrFloor get_SideWall();
    public sealed virtual IChartWallOrFloor get_BackWall();
    public sealed virtual IChartWallOrFloor get_Floor();
    public sealed virtual IChartDataTable get_DataTable();
    public sealed virtual bool get_IsSelected();
    public sealed virtual bool get_HasDataTable();
    public sealed virtual void set_HasDataTable(bool value);
    public sealed virtual bool get_HasLegend();
    public sealed virtual void set_HasLegend(bool value);
    public sealed virtual IChartLegend get_Legend();
    public sealed virtual bool get_HasPlotArea();
    public sealed virtual void set_HasPlotArea(bool value);
    public sealed virtual int get_TabIndex();
    public sealed virtual WorksheetVisibility get_Visibility();
    public sealed virtual void set_Visibility(WorksheetVisibility value);
    public sealed virtual void Activate();
    public sealed virtual void Select();
    public sealed virtual void Unselect();
    public sealed virtual ExcelChartPlotEmpty get_DisplayBlanksAs();
    public sealed virtual void set_DisplayBlanksAs(ExcelChartPlotEmpty value);
    public sealed virtual bool get_PlotVisibleOnly();
    public sealed virtual void set_PlotVisibleOnly(bool value);
    public sealed virtual bool get_SizeWithWindow();
    public sealed virtual void set_SizeWithWindow(bool value);
    public sealed virtual ITextBoxes get_TextBoxes();
    public sealed virtual ICheckBoxes get_CheckBoxes();
    public sealed virtual IOptionButtons get_OptionButtons();
    public sealed virtual IComboBoxes get_ComboBoxes();
    public sealed virtual string get_CodeName();
    public sealed virtual bool get_ProtectContents();
    public sealed virtual bool get_ProtectDrawingObjects();
    public sealed virtual bool get_ProtectScenarios();
    public sealed virtual ExcelSheetProtection get_Protection();
    public sealed virtual bool get_IsPasswordProtected();
    public sealed virtual void Protect(string password);
    public sealed virtual void Protect(string password, ExcelSheetProtection options);
    public sealed virtual void Unprotect(string password);
    public sealed virtual void SaveAsImage(Stream imageAsStream);
    public sealed virtual int get_Zoom();
    public sealed virtual void set_Zoom(int value);
    public sealed virtual int get_Style();
    public sealed virtual void set_Style(int value);
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
    public virtual void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public virtual void RegisterInSubCollection();
    protected virtual void OnPrepareForSerialization();
    [CLSCompliantAttribute("False")]
protected virtual void ParseClientData(MsofbtClientData clientData, ExcelParseOptions options);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    [CLSCompliantAttribute("False")]
public virtual void ParseClientAnchor(MsofbtClientAnchor clientAnchor);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT SerializeOptions(MsoBase parent);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT CreateDefaultOptions();
    protected virtual void SetParents();
    public static WorksheetBaseImpl op_Implicit(ChartShapeImpl chartShape);
    protected virtual void OnDispose();
}
public class Syncfusion.XlsIO.Implementation.Shapes.CheckBoxShapeImpl : TextBoxShapeBase {
    public static int ShapeInstance;
    private static int ShapeVersion;
    private ExcelCheckState m_checkState;
    private IRange m_cellLinkRange;
    private bool m_display3DShading;
    public ExcelCommentHAlign HAlignment { get; public set; }
    public ExcelCommentVAlign VAlignment { get; public set; }
    public ExcelTextRotation TextRotation { get; public set; }
    public IHyperLink Hyperlink { get; }
    public ExcelCheckState CheckState { get; public set; }
    public IRange LinkedCell { get; public set; }
    public bool Display3DShading { get; public set; }
    public CheckBoxShapeImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public CheckBoxShapeImpl(IApplication application, object parent, MsofbtSpContainer shapeContainer, ExcelParseOptions options);
    private void InitializeShape();
    protected virtual void OnPrepareForSerialization();
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    private ObjSubRecord FindSubRecord(List`1<ObjSubRecord> records, TObjSubRecordType recordType);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT SerializeOptions(MsoBase parent);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT CreateDefaultOptions();
    [CLSCompliantAttribute("False")]
protected virtual void ParseClientData(MsofbtClientData clientData, ExcelParseOptions options);
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
    public sealed virtual ExcelCommentHAlign get_HAlignment();
    public sealed virtual void set_HAlignment(ExcelCommentHAlign value);
    public sealed virtual ExcelCommentVAlign get_VAlignment();
    public sealed virtual void set_VAlignment(ExcelCommentVAlign value);
    public sealed virtual ExcelTextRotation get_TextRotation();
    public sealed virtual void set_TextRotation(ExcelTextRotation value);
    public sealed virtual IHyperLink get_Hyperlink();
    public sealed virtual ExcelCheckState get_CheckState();
    public sealed virtual void set_CheckState(ExcelCheckState value);
    public sealed virtual IRange get_LinkedCell();
    public sealed virtual void set_LinkedCell(IRange value);
    public bool get_Display3DShading();
    public void set_Display3DShading(bool value);
    private string GetCheckState(ExcelCheckState excelCheckState);
}
public class Syncfusion.XlsIO.Implementation.Shapes.ComboBoxShapeImpl : ShapeImpl {
    public static int ShapeInstance;
    public static int ShapeVersion;
    private static int DefaultDropLinesCount;
    private IRange m_inputRange;
    private IRange m_cellLinkRange;
    private int m_iSelectedIndex;
    private int m_iDropLines;
    private ExcelComboType m_comboType;
    private bool m_bThreeD;
    private string m_formulaMacro;
    public IRange ListFillRange { get; public set; }
    public IRange LinkedCell { get; public set; }
    public int SelectedIndex { get; public set; }
    public int DropDownLines { get; public set; }
    public ExcelComboType ComboType { get; }
    public bool Display3DShading { get; public set; }
    public string SelectedValue { get; }
    internal string FormulaMacro { get; internal set; }
    public IHyperLink Hyperlink { get; }
    public ComboBoxShapeImpl(IApplication application, object parent);
    public ComboBoxShapeImpl(IApplication application, object parent, MsofbtSpContainer shapeContainer, ExcelParseOptions options, List`1<ObjSubRecord> subRecords);
    public sealed virtual IRange get_ListFillRange();
    public sealed virtual void set_ListFillRange(IRange value);
    public sealed virtual IRange get_LinkedCell();
    public sealed virtual void set_LinkedCell(IRange value);
    public sealed virtual int get_SelectedIndex();
    public sealed virtual void set_SelectedIndex(int value);
    public sealed virtual int get_DropDownLines();
    public sealed virtual void set_DropDownLines(int value);
    public ExcelComboType get_ComboType();
    public sealed virtual bool get_Display3DShading();
    public sealed virtual void set_Display3DShading(bool value);
    public sealed virtual string get_SelectedValue();
    internal string get_FormulaMacro();
    internal void set_FormulaMacro(string value);
    public sealed virtual IHyperLink get_Hyperlink();
    private void ParseSubRecords(List`1<ObjSubRecord> subRecords);
    private void ParseSbsFormula(ftSbsFormula ftSbsFormula);
    private void ParseLbsData(ftLbsData ftLbsData);
    private void ParseSbsRecord(ftSbs ftSbs);
    protected virtual void OnPrepareForSerialization();
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    private void UpdateLbsData(OBJRecord obj, bool bObjExist);
    private void UpdateSbsFormula(OBJRecord obj, bool bObjExist);
    private void UpdateSbs(OBJRecord obj, bool bObjExist);
    private void UpdateCmo(OBJRecord& obj, bool bObjExist, MsofbtClientData clientData);
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
}
public class Syncfusion.XlsIO.Implementation.Shapes.CommentShapeImpl : TextBoxShapeBase {
    internal static int ShapeInstance;
    private static int DEF_SHAPE_VERSION;
    private static int DEF_OPTIONS_VERSION;
    private static int DEF_OPTIONS_INSTANCE;
    public static int DEF_OFFSET;
    private static int DEF_COMMENT_SHADOWED;
    private static int DEF_COMMENT_SHOW_ALWAYS;
    private static int DEF_COMMENT_NOT_SHOW_ALWAYS;
    private int m_iRow;
    private int m_iColumn;
    private bool m_bVisible;
    private string m_strAuthor;
    private TextBodyPropertiesHolder textBodyPropertiesHolder;
    private bool m_isThreadedComment;
    public int Row { get; public set; }
    public int Column { get; public set; }
    public bool IsVisible { get; public set; }
    public string Author { get; public set; }
    public int Instance { get; }
    public IHyperLink Hyperlink { get; }
    internal TextBodyPropertiesHolder TextBodyPropertiesHolder { get; }
    internal bool IsThreadedComment { get; internal set; }
    public CommentShapeImpl(IApplication application, object parent);
    public CommentShapeImpl(IApplication application, object parent, bool bIsParseOptions);
    public CommentShapeImpl(IApplication application, object parent, string commentText);
    [CLSCompliantAttribute("False")]
public CommentShapeImpl(IApplication application, object parent, MsofbtSpContainer container);
    [CLSCompliantAttribute("False")]
public CommentShapeImpl(IApplication application, object parent, MsofbtSpContainer container, ExcelParseOptions options);
    protected virtual void InitializeVariables();
    private void FillClientAnchor();
    public virtual void Dispose();
    public sealed virtual int get_Row();
    public void set_Row(int value);
    public sealed virtual int get_Column();
    public void set_Column(int value);
    public sealed virtual bool get_IsVisible();
    public sealed virtual void set_IsVisible(bool value);
    public sealed virtual string get_Author();
    public void set_Author(string value);
    public virtual int get_Instance();
    public sealed virtual IHyperLink get_Hyperlink();
    internal TextBodyPropertiesHolder get_TextBodyPropertiesHolder();
    internal bool get_IsThreadedComment();
    internal void set_IsThreadedComment(bool value);
    public virtual void RegisterInSubCollection();
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    private void SerializeNoteRecord(ushort objId);
    [CLSCompliantAttribute("False")]
protected void SerializeTextId(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected void SerializeOption344(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT CreateDefaultOptions();
    [CLSCompliantAttribute("False")]
protected virtual void SerializeCommentShadow(MsofbtOPT option);
    public virtual bool CanCopyShapesOnRangeCopy(Rectangle sourceRec, Rectangle destRec, Rectangle& newPosition);
    public virtual ShapeImpl CopyMoveShapeOnRangeCopyMove(WorksheetImpl sheet, Rectangle destRec, bool bIsCopy);
    protected virtual void UpdateNotSizeNotMoveShape(bool bRow, int index, int iCount);
    protected virtual void OnDelete();
    protected virtual void CreateDefaultFillLineFormats();
    public void CopyCommentOptions(CommentShapeImpl sourceComment, Dictionary`2<int, int> dicFontIndexes);
    protected virtual void OnPrepareForSerialization();
    private void ParseNoteRecord(int iObjectId);
}
public class Syncfusion.XlsIO.Implementation.Shapes.CommentsRange : CommonObject {
    private IRange m_range;
    private IRichTextString m_richTextString;
    public string Author { get; }
    public bool IsVisible { get; public set; }
    public int Row { get; }
    public int Column { get; }
    public IRichTextString RichText { get; public set; }
    public string Text { get; public set; }
    public bool IsMoveWithCell { get; public set; }
    public bool IsSizeWithCell { get; public set; }
    public bool AutoSize { get; public set; }
    public bool IsShapeVisible { get; public set; }
    public int Height { get; public set; }
    public double HeightDouble { get; public set; }
    public int Id { get; }
    public int Left { get; public set; }
    public double LeftDouble { get; public set; }
    public string Name { get; public set; }
    public int Top { get; public set; }
    public double TopDouble { get; public set; }
    public int Width { get; public set; }
    public double WidthDouble { get; public set; }
    public ExcelShapeType ShapeType { get; }
    public string AlternativeText { get; public set; }
    public IFill Fill { get; }
    public IShapeLineFormat Line { get; }
    public string OnAction { get; public set; }
    public IThreeDFormat ThreeD { get; }
    public IShadow Shadow { get; }
    public int ShapeRotation { get; public set; }
    public ITextFrame TextFrame { get; }
    public IHyperLink Hyperlink { get; }
    public ExcelCommentHAlign HAlignment { get; public set; }
    public ExcelCommentVAlign VAlignment { get; public set; }
    public ExcelTextRotation TextRotation { get; public set; }
    public bool IsTextLocked { get; public set; }
    public CommentsRange(IApplication application, IRange parentRange);
    public sealed virtual string get_Author();
    public sealed virtual bool get_IsVisible();
    public sealed virtual void set_IsVisible(bool value);
    public sealed virtual int get_Row();
    public sealed virtual int get_Column();
    public sealed virtual IRichTextString get_RichText();
    public sealed virtual void set_RichText(IRichTextString value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual bool get_IsMoveWithCell();
    public sealed virtual void set_IsMoveWithCell(bool value);
    public sealed virtual bool get_IsSizeWithCell();
    public sealed virtual void set_IsSizeWithCell(bool value);
    public sealed virtual bool get_AutoSize();
    public sealed virtual void set_AutoSize(bool value);
    public sealed virtual void Remove();
    public sealed virtual void Scale(int scaleWidth, int scaleHeight);
    public sealed virtual bool get_IsShapeVisible();
    public sealed virtual void set_IsShapeVisible(bool value);
    public sealed virtual int get_Height();
    public sealed virtual void set_Height(int value);
    public sealed virtual double get_HeightDouble();
    public sealed virtual void set_HeightDouble(double value);
    public sealed virtual int get_Id();
    public sealed virtual int get_Left();
    public sealed virtual void set_Left(int value);
    public sealed virtual double get_LeftDouble();
    public sealed virtual void set_LeftDouble(double value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual int get_Top();
    public sealed virtual void set_Top(int value);
    public sealed virtual double get_TopDouble();
    public sealed virtual void set_TopDouble(double value);
    public sealed virtual int get_Width();
    public sealed virtual void set_Width(int value);
    public sealed virtual double get_WidthDouble();
    public sealed virtual void set_WidthDouble(double value);
    public sealed virtual ExcelShapeType get_ShapeType();
    public sealed virtual string get_AlternativeText();
    public sealed virtual void set_AlternativeText(string value);
    public sealed virtual IFill get_Fill();
    public sealed virtual IShapeLineFormat get_Line();
    public sealed virtual string get_OnAction();
    public sealed virtual void set_OnAction(string value);
    public sealed virtual IThreeDFormat get_ThreeD();
    public sealed virtual IShadow get_Shadow();
    public sealed virtual int get_ShapeRotation();
    public sealed virtual void set_ShapeRotation(int value);
    public sealed virtual ITextFrame get_TextFrame();
    public sealed virtual IHyperLink get_Hyperlink();
    public sealed virtual ExcelCommentHAlign get_HAlignment();
    public sealed virtual void set_HAlignment(ExcelCommentHAlign value);
    public sealed virtual ExcelCommentVAlign get_VAlignment();
    public sealed virtual void set_VAlignment(ExcelCommentVAlign value);
    public sealed virtual ExcelTextRotation get_TextRotation();
    public sealed virtual void set_TextRotation(ExcelTextRotation value);
    public sealed virtual bool get_IsTextLocked();
    public sealed virtual void set_IsTextLocked(bool value);
}
internal class Syncfusion.XlsIO.Implementation.Shapes.DefaultRunProperties : object {
    private bool m_isBold;
    private bool m_isItalic;
    private UnderlineStyle m_isUnderline;
    private int m_fontSize;
    private StrikeType m_strikeType;
    internal bool IsBold { get; internal set; }
    internal UnderlineStyle UnderlineStyle { get; internal set; }
    internal bool IsItalic { get; internal set; }
    internal int FontSize { get; internal set; }
    internal StrikeType StrikeType { get; internal set; }
    internal bool get_IsBold();
    internal void set_IsBold(bool value);
    internal UnderlineStyle get_UnderlineStyle();
    internal void set_UnderlineStyle(UnderlineStyle value);
    internal bool get_IsItalic();
    internal void set_IsItalic(bool value);
    internal int get_FontSize();
    internal void set_FontSize(int value);
    internal StrikeType get_StrikeType();
    internal void set_StrikeType(StrikeType value);
}
internal enum Syncfusion.XlsIO.Implementation.Shapes.FontAlignmentType : Enum {
    public int value__;
    public static FontAlignmentType Automatic;
    public static FontAlignmentType Bottom;
    public static FontAlignmentType Baseline;
    public static FontAlignmentType Center;
    public static FontAlignmentType Top;
}
public class Syncfusion.XlsIO.Implementation.Shapes.FormControlShapeImpl : ShapeImpl {
    private static int DEF_LOCKAGAINSGROUPDING_VALUE;
    internal static int DEF_SIZETEXT_VALUE;
    private static int DEF_NOLINE_VALUE;
    private static int DEF_959_VALUE;
    private static Byte[] DEF_CMO_DATA;
    private ftLbsData m_lbsData;
    public bool IsArrowSelectedColor { get; public set; }
    public IHyperLink HyperLink { get; }
    public FormControlShapeImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public FormControlShapeImpl(IApplication application, object parent, MsoBase[] records, int index);
    [CLSCompliantAttribute("False")]
public FormControlShapeImpl(IApplication application, object parent, MsofbtSpContainer container);
    [CLSCompliantAttribute("False")]
public FormControlShapeImpl(IApplication application, object parent, MsoBase shapeRecord);
    private static FormControlShapeImpl();
    private void Initialize();
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollection);
    protected virtual void OnPrepareForSerialization();
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT SerializeOptions(MsoBase parent);
    [CLSCompliantAttribute("False")]
protected virtual void ParseClientData(MsofbtClientData clientData, ExcelParseOptions options);
    public bool get_IsArrowSelectedColor();
    public void set_IsArrowSelectedColor(bool value);
    public IHyperLink get_HyperLink();
}
public class Syncfusion.XlsIO.Implementation.Shapes.GradientStopImpl : object {
    internal static int Size;
    private ColorObject m_color;
    private int m_iPosiiton;
    private int m_iTransparency;
    private int m_iTint;
    private int m_iShade;
    private ShapeFillImpl m_parentFill;
    internal ShapeFillImpl ParentFill { get; internal set; }
    public ColorObject ColorObject { get; }
    public int Position { get; public set; }
    public int Transparency { get; public set; }
    public int Tint { get; public set; }
    public int Shade { get; public set; }
    public GradientStopImpl(ColorObject color, int position, int transparency);
    public GradientStopImpl(ColorObject color, int position, int transparency, int tint, int shade);
    public GradientStopImpl(Byte[] data, int offset);
    internal ShapeFillImpl get_ParentFill();
    internal void set_ParentFill(ShapeFillImpl value);
    public ColorObject get_ColorObject();
    public int get_Position();
    public void set_Position(int value);
    public int get_Transparency();
    public void set_Transparency(int value);
    public int get_Tint();
    public void set_Tint(int value);
    public int get_Shade();
    public void set_Shade(int value);
    internal void Serialize(Stream stream);
    internal GradientStopImpl Clone();
    internal bool EqualsWithoutTransparency(GradientStopImpl stop);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.Shapes.GradientStops : List`1<GradientStopImpl> {
    internal static int MaxPosition;
    private int m_iAngle;
    private GradientType m_gradientType;
    private Rectangle m_fillToRect;
    private Rectangle m_tileRect;
    public int Angle { get; public set; }
    public GradientType GradientType { get; public set; }
    public Rectangle FillToRect { get; public set; }
    public Rectangle TileRect { get; public set; }
    public bool IsDoubled { get; }
    public GradientStops(Byte[] data);
    public int get_Angle();
    public void set_Angle(int value);
    public GradientType get_GradientType();
    public void set_GradientType(GradientType value);
    public Rectangle get_FillToRect();
    public void set_FillToRect(Rectangle value);
    public Rectangle get_TileRect();
    public void set_TileRect(Rectangle value);
    public bool get_IsDoubled();
    public void Serialize(Stream stream);
    private void Parse(Byte[] data);
    public void DoubleGradientStops();
    public void InvertGradientStops();
    public GradientStops ShrinkGradientStops();
    public GradientStops Clone();
    internal bool EqualColors(GradientStops gradientStops);
    internal void Dispose();
}
public enum Syncfusion.XlsIO.Implementation.Shapes.GradientType : Enum {
    public int value__;
    public static GradientType Liniar;
    public static GradientType Circle;
    public static GradientType Rect;
    public static GradientType Shape;
}
public class Syncfusion.XlsIO.Implementation.Shapes.GroupShapeImpl : ShapeImpl {
    private IShape[] m_items;
    private bool m_flipVertical;
    private bool m_flipHorizontal;
    private Dictionary`2<string, Stream> m_preservedElements;
    public IShape[] Items { get; internal set; }
    internal bool FlipVertical { get; internal set; }
    internal bool FlipHorizontal { get; internal set; }
    internal Dictionary`2<string, Stream> PreservedElements { get; }
    internal GroupShapeImpl(IApplication application, object parent);
    public sealed virtual IShape[] get_Items();
    internal void set_Items(IShape[] value);
    internal bool get_FlipVertical();
    internal void set_FlipVertical(bool value);
    internal bool get_FlipHorizontal();
    internal void set_FlipHorizontal(bool value);
    internal Dictionary`2<string, Stream> get_PreservedElements();
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
    internal void LayoutGroupShape(bool isAll);
    internal void LayoutGroupShape();
    internal void SetUpdatedChildOffset();
    internal bool RemoveGroupShapeItem(IShape shape);
}
internal class Syncfusion.XlsIO.Implementation.Shapes.LevelProperties : object {
    private DefaultRunProperties m_runProperties;
    private TextAlignType m_textAlignment;
    private int m_defaultTab;
    private bool m_IsEaBreak;
    private FontAlignmentType m_fontAlignment;
    private int m_indent;
    private bool m_isLatinBreak;
    private int m_leftMargin;
    private int m_rightMargin;
    private bool m_IsRightToLeft;
    internal DefaultRunProperties RunProperties { get; internal set; }
    internal TextAlignType TextAlignment { get; internal set; }
    internal int TabSize { get; internal set; }
    internal bool EastAsianBreak { get; internal set; }
    internal FontAlignmentType FontAlignment { get; internal set; }
    internal int Indent { get; internal set; }
    internal bool IsLatinBreak { get; internal set; }
    internal int LeftMargin { get; internal set; }
    internal int RightMargin { get; internal set; }
    internal bool IsRightToLeft { get; internal set; }
    internal DefaultRunProperties get_RunProperties();
    internal void set_RunProperties(DefaultRunProperties value);
    internal TextAlignType get_TextAlignment();
    internal void set_TextAlignment(TextAlignType value);
    internal int get_TabSize();
    internal void set_TabSize(int value);
    internal bool get_EastAsianBreak();
    internal void set_EastAsianBreak(bool value);
    internal FontAlignmentType get_FontAlignment();
    internal void set_FontAlignment(FontAlignmentType value);
    internal int get_Indent();
    internal void set_Indent(int value);
    internal bool get_IsLatinBreak();
    internal void set_IsLatinBreak(bool value);
    internal int get_LeftMargin();
    internal void set_LeftMargin(int value);
    internal int get_RightMargin();
    internal void set_RightMargin(int value);
    internal bool get_IsRightToLeft();
    internal void set_IsRightToLeft(bool value);
}
public class Syncfusion.XlsIO.Implementation.Shapes.OptionButtonShapeImpl : TextBoxShapeBase {
    internal static int ShapeInstance;
    private static int ShapeVersion;
    private static double m_linkedCellValue;
    private static int m_objIndex;
    private ExcelCheckState m_checkState;
    private IRange m_cellLinkRange;
    private bool m_isFirstButton;
    private bool m_display3DShading;
    private byte m_nextButton;
    private bool m_invokeEvent;
    private int m_iIndex;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler CheckStateChanged;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler LinkedCellValueChanged;
    public bool InvokeEvent { get; public set; }
    internal int Index { get; internal set; }
    internal int NextButtonId { get; }
    public IHyperLink Hyperlink { get; }
    public ExcelCommentHAlign HAlignment { get; public set; }
    public ExcelCommentVAlign VAlignment { get; public set; }
    public ExcelTextRotation TextRotation { get; public set; }
    unknown RichTextString RichText {public set; }
    public ExcelCheckState CheckState { get; public set; }
    public IRange LinkedCell { get; public set; }
    public bool IsFirstButton { get; public set; }
    public bool Display3DShading { get; public set; }
    public OptionButtonShapeImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public OptionButtonShapeImpl(IApplication application, object parent, MsofbtSpContainer shapeContainer, ExcelParseOptions options);
    [CLSCompliantAttribute("False")]
public OptionButtonShapeImpl(IApplication application, object parent, MsofbtSpContainer shapeContainer, ExcelParseOptions options, int optionButtonId);
    private static OptionButtonShapeImpl();
    [CompilerGeneratedAttribute]
internal void add_CheckStateChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CheckStateChanged(ValueChangedEventHandler value);
    public bool get_InvokeEvent();
    public void set_InvokeEvent(bool value);
    internal int get_Index();
    internal void set_Index(int value);
    internal int get_NextButtonId();
    public sealed virtual IHyperLink get_Hyperlink();
    private void InitializeShape();
    protected virtual void OnPrepareForSerialization();
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    private ObjSubRecord FindSubRecord(List`1<ObjSubRecord> records, TObjSubRecordType recordType);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT SerializeOptions(MsoBase parent);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT CreateDefaultOptions();
    [CLSCompliantAttribute("False")]
protected virtual void ParseClientData(MsofbtClientData clientData, ExcelParseOptions options);
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
    public sealed virtual ExcelCommentHAlign get_HAlignment();
    public sealed virtual void set_HAlignment(ExcelCommentHAlign value);
    public sealed virtual ExcelCommentVAlign get_VAlignment();
    public sealed virtual void set_VAlignment(ExcelCommentVAlign value);
    public sealed virtual ExcelTextRotation get_TextRotation();
    public sealed virtual void set_TextRotation(ExcelTextRotation value);
    public void set_RichText(RichTextString value);
    public sealed virtual ExcelCheckState get_CheckState();
    public sealed virtual void set_CheckState(ExcelCheckState value);
    public sealed virtual IRange get_LinkedCell();
    public sealed virtual void set_LinkedCell(IRange value);
    public sealed virtual bool get_IsFirstButton();
    public void set_IsFirstButton(bool value);
    public sealed virtual bool get_Display3DShading();
    public sealed virtual void set_Display3DShading(bool value);
    [CompilerGeneratedAttribute]
internal void add_LinkedCellValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_LinkedCellValueChanged(ValueChangedEventHandler value);
}
public class Syncfusion.XlsIO.Implementation.Shapes.ShapeFillImpl : CommonObject {
    private static int DEF_SHAD_STYLE_VERTICAL;
    private static int DEF_SHAD_STYLE_VERTICAL2007;
    private static int DEF_SHAD_STYLE_DIAGONAL_UP;
    private static int DEF_SHAD_STYLE_DIAGONAL_DOWN;
    internal static int DEF_COLOR_CONSTANT;
    private static Byte[] DEF_VARIANT_FIRST_ARR;
    private static Byte[] DEF_VARIANT_THIRD_ARR;
    private static Byte[] DEF_VARIANT_FOURTH_ARR;
    private static int DEF_ONE_COLOR_STYLE_VALUE;
    private static Byte[] DEF_VARIANT_CENTER_ADD_DATA;
    private static Byte[] DEF_VARIANT_CORNER_ADD_DATA;
    public static string DEF_PATTERN_PREFIX;
    internal static string DEF_TEXTURE_PREFIX;
    private static string DEF_GRAD_PREFIX;
    private static string DEF_PATTERN_ENUM_PREFIX;
    private static byte DEF_NOT_VISIBLE_VALUE;
    private static Byte[] DEF_BITMAP_INDEX;
    public static Color DEF_COMENT_PARSE_COLOR;
    public static int DEF_COMMENT_COLOR_INDEX;
    private static int DEF_CORNER_STYLE;
    private static int DEF_CENTER_STYLE;
    private static int DEF_OFFSET;
    internal static int MaxValue;
    internal static int HorizontalAngle;
    internal static int VerticalAngle;
    internal static int DiagonalUpAngle;
    internal static int DiagonalDownAngle;
    internal static Rectangle RectangleFromCenter;
    internal static Rectangle[] RectanglesCorner;
    private static Dictionary`2<string, Byte[]> m_dicResources;
    internal ExcelFillType m_fillType;
    private ExcelGradientStyle m_gradStyle;
    private bool m_isChangeGradStyle;
    private ExcelGradientVariants m_gradVariant;
    private double m_transparencyTo;
    private double m_transparencyFrom;
    private ExcelGradientColor m_gradientColor;
    private ExcelGradientPattern m_gradPattern;
    private ExcelTexture m_gradTexture;
    private WorkbookImpl m_book;
    private ColorObject m_backColor;
    private ColorObject m_foreColor;
    private ExcelGradientPreset m_presetGrad;
    private bool m_isChangePresetGradStyle;
    protected Image m_picture;
    private string m_strPictureName;
    private bool m_bVisible;
    private int m_imageIndex;
    private double m_gradDegree;
    private FOPTE m_parsePictureData;
    protected bool m_bIsShapeFill;
    private bool m_bTile;
    private Rectangle m_fillrect;
    private Rectangle m_srcRect;
    private float m_amt;
    private GradientStops m_preseredGradient;
    private bool m_bSupportedGradient;
    private float m_textureVerticalScale;
    private float m_textureHorizontalScale;
    private float m_textureOffsetX;
    private float m_textureOffsetY;
    private string m_alignment;
    private string m_tileFlipping;
    internal static bool m_isTexture;
    private GradientStops m_multiGradientStop;
    private GradientStops m_twoGradientStop;
    private GradientStops m_oneGraidentStop;
    private GradientStops m_presetGradientStop;
    private static Assembly s_asem;
    private static Byte[] m_arrPreset;
    private static Dictionary`2<ExcelGradientPreset, Byte[]> s_dicPresetStops;
    private PreservationLogger m_logger;
    public GradientStops GradientStops { get; }
    public bool Tile { get; public set; }
    public GradientStops PreservedGradient { get; public set; }
    public Rectangle FillRect { get; public set; }
    public Rectangle SourceRect { get; public set; }
    internal FOPTE ParsePictureData { get; }
    public bool IsGradientSupported { get; public set; }
    public ExcelFillType FillType { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public double TransparencyTo { get; public set; }
    public double TransparencyFrom { get; public set; }
    public float TransparencyColor { get; public set; }
    public double Transparency { get; public set; }
    public ExcelGradientColor GradientColorType { get; public set; }
    public ExcelGradientPattern Pattern { get; public set; }
    public ExcelTexture Texture { get; public set; }
    public ExcelKnownColors BackColorIndex { get; public set; }
    public ExcelKnownColors ForeColorIndex { get; public set; }
    public Color BackColor { get; public set; }
    public Color ForeColor { get; public set; }
    public ColorObject BackColorObject { get; }
    public ColorObject ForeColorObject { get; }
    public ExcelGradientPreset PresetGradientType { get; public set; }
    public Image Picture { get; }
    public string PictureName { get; }
    public bool Visible { get; public set; }
    public double GradientDegree { get; public set; }
    public float TextureVerticalScale { get; public set; }
    public float TextureHorizontalScale { get; public set; }
    public float TextureOffsetX { get; public set; }
    public float TextureOffsetY { get; public set; }
    public string Alignment { get; public set; }
    public string TileFlipping { get; public set; }
    private static ShapeFillImpl();
    public ShapeFillImpl(IApplication application, object parent);
    public ShapeFillImpl(IApplication application, object parent, ExcelFillType fillType);
    internal ShapeFillImpl(IApplication application, object parent, ExcelFillType fillType, PreservationLogger logger);
    public static Byte[] GetResData(string strID);
    internal static Color ParseColor(WorkbookImpl book, Byte[] value);
    internal static void ParseColor(WorkbookImpl book, Byte[] value, ColorObject color);
    public static GradientStops GetPresetGradientStops(ExcelGradientPreset preset);
    public static Byte[] GetPresetGradientStopsData(ExcelGradientPreset preset);
    private void FindParents();
    public GradientStops get_GradientStops();
    public sealed virtual bool get_Tile();
    public sealed virtual void set_Tile(bool value);
    public sealed virtual GradientStops get_PreservedGradient();
    public sealed virtual void set_PreservedGradient(GradientStops value);
    public Rectangle get_FillRect();
    public void set_FillRect(Rectangle value);
    public Rectangle get_SourceRect();
    public void set_SourceRect(Rectangle value);
    internal FOPTE get_ParsePictureData();
    public sealed virtual bool get_IsGradientSupported();
    public sealed virtual void set_IsGradientSupported(bool value);
    public sealed virtual ExcelFillType get_FillType();
    public sealed virtual void set_FillType(ExcelFillType value);
    public sealed virtual ExcelGradientStyle get_GradientStyle();
    public sealed virtual void set_GradientStyle(ExcelGradientStyle value);
    public sealed virtual ExcelGradientVariants get_GradientVariant();
    public sealed virtual void set_GradientVariant(ExcelGradientVariants value);
    public virtual double get_TransparencyTo();
    public virtual void set_TransparencyTo(double value);
    public virtual double get_TransparencyFrom();
    public virtual void set_TransparencyFrom(double value);
    public sealed virtual float get_TransparencyColor();
    public sealed virtual void set_TransparencyColor(float value);
    public sealed virtual double get_Transparency();
    public sealed virtual void set_Transparency(double value);
    public sealed virtual ExcelGradientColor get_GradientColorType();
    public sealed virtual void set_GradientColorType(ExcelGradientColor value);
    public sealed virtual ExcelGradientPattern get_Pattern();
    public sealed virtual void set_Pattern(ExcelGradientPattern value);
    public sealed virtual ExcelTexture get_Texture();
    public sealed virtual void set_Texture(ExcelTexture value);
    public sealed virtual ExcelKnownColors get_BackColorIndex();
    public sealed virtual void set_BackColorIndex(ExcelKnownColors value);
    public sealed virtual ExcelKnownColors get_ForeColorIndex();
    public sealed virtual void set_ForeColorIndex(ExcelKnownColors value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    internal bool GetColor(Color& foreColor);
    public virtual ColorObject get_BackColorObject();
    public virtual ColorObject get_ForeColorObject();
    public sealed virtual ExcelGradientPreset get_PresetGradientType();
    public sealed virtual void set_PresetGradientType(ExcelGradientPreset value);
    public sealed virtual Image get_Picture();
    public sealed virtual string get_PictureName();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public sealed virtual double get_GradientDegree();
    public sealed virtual void set_GradientDegree(double value);
    private static ExcelGradientColor DetectGradientColor(GradientStops gradientStops);
    public sealed virtual float get_TextureVerticalScale();
    public sealed virtual void set_TextureVerticalScale(float value);
    public sealed virtual float get_TextureHorizontalScale();
    public sealed virtual void set_TextureHorizontalScale(float value);
    public sealed virtual float get_TextureOffsetX();
    public sealed virtual void set_TextureOffsetX(float value);
    public sealed virtual float get_TextureOffsetY();
    public sealed virtual void set_TextureOffsetY(float value);
    public sealed virtual string get_Alignment();
    public sealed virtual void set_Alignment(string value);
    public sealed virtual string get_TileFlipping();
    public sealed virtual void set_TileFlipping(string value);
    public sealed virtual void UserPicture(Image im, string name);
    public sealed virtual void UserTexture(Image im, string name);
    public sealed virtual void Patterned(ExcelGradientPattern pattern);
    public sealed virtual void PresetGradient(ExcelGradientPreset grad);
    public sealed virtual void PresetGradient(ExcelGradientPreset grad, ExcelGradientStyle shadStyle);
    public sealed virtual void PresetGradient(ExcelGradientPreset grad, ExcelGradientStyle shadStyle, ExcelGradientVariants shadVar);
    public sealed virtual void PresetTextured(ExcelTexture texture);
    public sealed virtual void TwoColorGradient();
    public sealed virtual void TwoColorGradient(ExcelGradientStyle style);
    public sealed virtual void TwoColorGradient(ExcelGradientStyle style, ExcelGradientVariants variant);
    public sealed virtual void OneColorGradient();
    public sealed virtual void OneColorGradient(ExcelGradientStyle style);
    public sealed virtual void OneColorGradient(ExcelGradientStyle style, ExcelGradientVariants variant);
    public sealed virtual void Solid();
    public sealed virtual int CompareTo(IGradient twin);
    [CLSCompliantAttribute("False")]
public bool ParseOption(FOPTE option);
    private void ParseFillType(UInt32 value);
    private void ParseShadingStyle(Byte[] arr);
    private void ParseShadingVariant(byte value);
    private void ParsePattTextName(Byte[] addData);
    private void ParseGradientColor(UInt32 value);
    private void ParsePresetGradient(Byte[] value);
    private void ParsePictureOrUserDefinedTexture(string strName, bool bIsPicture);
    protected void ParsePictureOrUserDefinedTexture(bool bIsPicture);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use UpdateBitmapHeaderToStream(MemoryStream ms, byte[] arr) method. Sorry for inconvenience.")]
public static void UpdateBitMapHederToStream(MemoryStream ms, Byte[] arr);
    public static void UpdateBitmapHeaderToStream(MemoryStream ms, Byte[] arr);
    private void ParseVisible(Byte[] data);
    [CLSCompliantAttribute("False")]
public IFopteOptionWrapper Serialize(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeGradient(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializePatternTexture(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializePicture(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeSolidColor(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeFillType(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeShadStyle(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeShadVariant(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeShadVariantCenter(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeShadVariantCorner(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeGradientStyle(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeGradientPreset(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeVisible(IFopteOptionWrapper opt);
    private IFopteOptionWrapper SerializeGradientDegree(IFopteOptionWrapper opt);
    private void ValidateGradientType();
    private void ValidatePictureProperties();
    private void ValidatePatternType();
    private void ValidateTextureType();
    private void ValidateSolidType();
    private Byte[] ConvertNameToByteArray(string strName);
    private double ParseGradientDegree(Byte[] value);
    private void ParseCornerVariants(byte value);
    private static void FillPresetsGradientStops();
    [CLSCompliantAttribute("False")]
protected virtual IFopteOptionWrapper SetPicture(IFopteOptionWrapper opt);
    protected virtual int SetPictureToBse(Image im, string strName);
    [CLSCompliantAttribute("False")]
protected virtual IFopteOptionWrapper SerializeTransparency(IFopteOptionWrapper opt);
    internal virtual void ChangeVisible();
    public virtual ShapeFillImpl Clone(object parent);
    public void CopyFrom(ShapeFillImpl fill);
    public static bool IsInverted(ExcelGradientStyle gradientStyle, ExcelGradientVariants variant);
    private static bool DiagonalDownInverted(ExcelGradientVariants variant);
    private static bool StandardInverted(ExcelGradientVariants variant);
    public static bool IsDoubled(ExcelGradientStyle gradientStyle, ExcelGradientVariants variant);
    private static bool StandardDoubled(ExcelGradientVariants variant);
    private static int GradientAngle(ExcelGradientStyle gradientStyle);
    private static Rectangle GradientFillToRect(ExcelGradientStyle gradientStyle, ExcelGradientVariants variant);
    private static GradientType GetGradientType(ExcelGradientStyle gradStyle);
    internal void SetInnerShapes(object value, string property);
    internal void SetInnerShapesFillVisible();
    private void SetBackColorObject(ColorObject value);
    private void SetForeColorObject(ColorObject value);
    internal void Clear();
}
internal class Syncfusion.XlsIO.Implementation.Shapes.ShapeFrame : object {
    private long m_offsetX;
    private long m_offsetY;
    private long m_offsetCX;
    private long m_offsetCY;
    private int m_rotation;
    private long m_chOffsetX;
    private long m_chOffsetY;
    private long m_chOffsetCX;
    private long m_chOffsetCY;
    private ShapeImpl m_baseShape;
    internal long OffsetX { get; internal set; }
    internal long OffsetY { get; internal set; }
    internal long OffsetCX { get; internal set; }
    internal long OffsetCY { get; internal set; }
    internal long ChOffsetX { get; internal set; }
    internal long ChOffsetY { get; internal set; }
    internal long ChOffsetCX { get; internal set; }
    internal long ChOffsetCY { get; internal set; }
    internal int Rotation { get; internal set; }
    internal ShapeFrame(ShapeImpl shape);
    internal long get_OffsetX();
    internal void set_OffsetX(long value);
    internal long get_OffsetY();
    internal void set_OffsetY(long value);
    internal long get_OffsetCX();
    internal void set_OffsetCX(long value);
    internal long get_OffsetCY();
    internal void set_OffsetCY(long value);
    internal long get_ChOffsetX();
    internal void set_ChOffsetX(long value);
    internal long get_ChOffsetY();
    internal void set_ChOffsetY(long value);
    internal long get_ChOffsetCX();
    internal void set_ChOffsetCX(long value);
    internal long get_ChOffsetCY();
    internal void set_ChOffsetCY(long value);
    internal int get_Rotation();
    internal void set_Rotation(int value);
    internal void SetAnchor(int rotation, long offsetX, long offsetY, long offsetCx, long offsetCy);
    internal void SetChildAnchor(long childOffsetX, long childOffsetY, long childOffsetCx, long childOffsetCy);
    internal ShapeFrame Clone(object parent);
    internal void SetParent(ShapeImpl shape);
    internal void Close();
}
public class Syncfusion.XlsIO.Implementation.Shapes.ShapeImpl : CommonObject {
    protected static Color DEF_FORE_COLOR;
    protected static Color DEF_BACK_COLOR;
    private static int DEF_APLPHA_KNOWN_COLORS;
    protected static int DEF_SIZETEXTTOFITSHAPE_FALSE_VALUE;
    protected static int DEF_SIZETEXTTOFITSHAPE_TRUE_VALUE;
    protected static int DEF_NOFILLHITTEST_VALUE;
    public static int DEF_FULL_COLUMN_OFFSET;
    public static int DEF_FULL_ROW_OFFSET;
    private static int DEF_LINE_WEIGHT;
    public static double DEF_TRANSPARENCY_MULL;
    public static double DEF_TRANSPARENCY_MULL_100;
    internal static double LineWieghtMultiplier;
    internal static double MAX_SHAPE_WIDTH_HEIGHT;
    internal static double MIN_SHAPE_WIDTH_HEIGHT;
    private static Type[] DEF_PARENT_TYPES;
    private static MsoOptions[] FillOptions;
    private static MsoOptions[] LineOptions;
    private double m_startX;
    private double m_startY;
    private double m_toX;
    private double m_toY;
    private double m_chartShapeX;
    private double m_chartShapeY;
    private double m_chartShapeWidth;
    private double m_chartShapeHeight;
    protected bool m_bSupportOptions;
    private bool m_validComment;
    private bool m_isLeftValueSet;
    private string m_strName;
    private string m_onAction;
    private string m_strAlternativeText;
    private MsoBase m_record;
    private WorkbookImpl m_book;
    private ExcelShapeType m_shapeType;
    [CLSCompliantAttribute("False")]
protected MsofbtSp m_shape;
    private MsofbtClientAnchor m_clientAnchor;
    private string m_presetGeometry;
    protected ShapeCollectionBase m_shapes;
    private OBJRecord m_object;
    [CLSCompliantAttribute("False")]
protected MsofbtOPT m_options;
    private RectangleF m_rectAbsolute;
    private ShapeFillImpl m_fill;
    private ShapeLineFormatImpl m_lineFormat;
    protected bool m_bUpdateLineFill;
    private Stream m_xmlDataStream;
    private Stream m_xmlTypeStream;
    private Relation m_imageRelation;
    private string m_strImageRelationId;
    private bool m_bUpdatePositions;
    private bool m_bVmlShape;
    private int m_iShapeId;
    private string m_macroName;
    private Ptg[] m_macroTokens;
    private bool m_shapeVisibility;
    private ShadowImpl m_shadow;
    private ThreeDFormatImpl m_3D;
    private bool m_enableAlternateContent;
    private List`1<ShapeImpl> m_childShapes;
    private MsofbtChildAnchor m_childAnchor;
    private MsoUnknown m_unknown;
    private Dictionary`2<string, string> m_styleProperties;
    private string m_preserveStyleString;
    private bool m_isHyperlink;
    private int m_shapeRotation;
    private Stream m_formulaMacroStream;
    private bool m_bHasBorder;
    internal List`1<Stream> preservedShapeStreams;
    internal List`1<Stream> preservedCnxnShapeStreams;
    internal List`1<Stream> preservedInnerCnxnShapeStreams;
    internal List`1<Stream> preservedPictureStreams;
    internal Stream m_graphicFrame;
    private bool m_bIsAbsoluteAnchor;
    private bool m_lockWithSheet;
    private bool m_printWithSheet;
    private Stream m_streamExtLst;
    private IHyperLink m_hyperLink;
    internal Dictionary`2<string, Stream> m_preservedElements;
    private bool m_isCustomGeom;
    private Stream m_styleStream;
    private ShapeFrame m_shapeFrame;
    private ShapeFrame m_groupFrame;
    private bool m_isGroupFill;
    private bool m_isGroupLine;
    private bool m_isSlicer;
    private bool m_hasExtent;
    private bool m_bAutoSize;
    internal bool IsEquationShape;
    internal List`1<string> preserveStreamOrder;
    public int Height { get; public set; }
    public double HeightDouble { get; public set; }
    public int Id { get; }
    public IThreeDFormat ThreeD { get; }
    internal bool ValidComment { get; internal set; }
    public IShadow Shadow { get; }
    internal bool IsLeftValueSet { get; internal set; }
    internal bool HasExtent { get; internal set; }
    public int Left { get; public set; }
    public double LeftDouble { get; public set; }
    internal bool EnableAlternateContent { get; internal set; }
    public string Name { get; public set; }
    public int Top { get; public set; }
    public double TopDouble { get; public set; }
    public int Width { get; public set; }
    public double WidthDouble { get; public set; }
    public ExcelShapeType ShapeType { get; public set; }
    public bool IsShapeVisible { get; public set; }
    public string AlternativeText { get; public set; }
    public bool IsMoveWithCell { get; public set; }
    public bool IsSizeWithCell { get; public set; }
    public IFill Fill { get; }
    public IShapeLineFormat Line { get; }
    internal string PresetGeometry { get; internal set; }
    internal string MacroName { get; internal set; }
    public bool AutoSize { get; public set; }
    public Stream XmlDataStream { get; public set; }
    public Stream XmlTypeStream { get; public set; }
    public bool VmlShape { get; public set; }
    public string OnAction { get; public set; }
    public string ImageRelationId { get; public set; }
    public Relation ImageRelation { get; public set; }
    public int ShapeRotation { get; public set; }
    public ITextFrame TextFrame { get; }
    internal Stream FormulaMacroStream { get; internal set; }
    public IHyperLink Hyperlink { get; internal set; }
    internal Stream StyleStream { get; internal set; }
    internal double ChartShapeX { get; internal set; }
    internal double ChartShapeY { get; internal set; }
    internal double ChartShapeWidth { get; internal set; }
    internal double ChartShapeHeight { get; internal set; }
    internal double StartX { get; internal set; }
    internal double StartY { get; internal set; }
    internal double ToX { get; internal set; }
    internal double ToY { get; internal set; }
    internal bool LockWithSheet { get; internal set; }
    internal bool PrintWithSheet { get; internal set; }
    internal Stream GraphicFrameStream { get; internal set; }
    internal bool HasBorder { get; internal set; }
    public IWorkbook Workbook { get; }
    public WorkbookImpl ParentWorkbook { get; }
    public ShapeCollectionBase ParentShapes { get; }
    public WorksheetBaseImpl Worksheet { get; }
    [CLSCompliantAttribute("False")]
public OBJRecord Obj { get; }
    [CLSCompliantAttribute("False")]
public MsofbtClientAnchor ClientAnchor { get; }
    public int TopRow { get; public set; }
    public int LeftColumn { get; public set; }
    public int BottomRow { get; public set; }
    public int RightColumn { get; public set; }
    public int TopRowOffset { get; public set; }
    public int LeftColumnOffset { get; public set; }
    public int BottomRowOffset { get; public set; }
    public int RightColumnOffset { get; public set; }
    [CLSCompliantAttribute("False")]
public UInt32 OldObjId { get; public set; }
    [CLSCompliantAttribute("False")]
public MsoBase Record { get; }
    [CLSCompliantAttribute("False")]
public MsofbtSp InnerSpRecord { get; }
    public bool IsShortVersion { get; public set; }
    public int ShapeCount { get; }
    public bool UpdatePositions { get; public set; }
    public int Instance { get; }
    public bool HasFill { get; internal set; }
    internal bool IsGroupFill { get; internal set; }
    internal bool IsGroupLine { get; internal set; }
    public bool HasLineFormat { get; internal set; }
    public int ShapeId { get; public set; }
    [CLSCompliantAttribute("False")]
public MsofbtSp ShapeRecord { get; }
    internal bool IsActiveX { get; }
    internal Dictionary`2<string, string> StyleProperties { get; internal set; }
    internal string PreserveStyleString { get; internal set; }
    internal bool IsHyperlink { get; internal set; }
    internal bool IsAbsoluteAnchor { get; internal set; }
    internal Stream NvPrExtLstStream { get; internal set; }
    internal bool IsSlicer { get; internal set; }
    internal GroupShapeImpl Group { get; }
    internal bool IsGroup { get; }
    internal Dictionary`2<string, Stream> PreservedElements { get; }
    internal bool IsCustomGeometry { get; internal set; }
    internal ShapeFrame ShapeFrame { get; internal set; }
    internal ShapeFrame GroupFrame { get; internal set; }
    private MsofbtOPT ShapeOptions { get; }
    internal List`1<ShapeImpl> ChildShapes { get; }
    internal MsofbtChildAnchor ChildAnchor { get; }
    internal MsoUnknown UnKnown { get; }
    public ShapeImpl(IApplication application, object parent);
    public ShapeImpl(IApplication application, object parent, ShapeImpl instance);
    [CLSCompliantAttribute("False")]
public ShapeImpl(IApplication application, object parent, MsoBase[] records, int index);
    [CLSCompliantAttribute("False")]
public ShapeImpl(IApplication application, object parent, MsofbtSpContainer container);
    [CLSCompliantAttribute("False")]
public ShapeImpl(IApplication application, object parent, MsofbtSpContainer container, ExcelParseOptions options);
    [CLSCompliantAttribute("False")]
public ShapeImpl(IApplication application, object parent, MsoBase shapeRecord);
    [CLSCompliantAttribute("False")]
public ShapeImpl(IApplication application, object parent, MsoBase shapeRecord, ExcelParseOptions options);
    private static ShapeImpl();
    [CLSCompliantAttribute("False")]
public static void SerializeForte(IFopteOptionWrapper options, MsoOptions id, Byte[] arr);
    [CLSCompliantAttribute("False")]
public static void SerializeForte(IFopteOptionWrapper options, MsoOptions id, Byte[] arr, Byte[] addData, bool isValid);
    [CLSCompliantAttribute("False")]
public static void SerializeForte(IFopteOptionWrapper options, MsoOptions id, int value);
    [CLSCompliantAttribute("False")]
public static void SerializeForte(IFopteOptionWrapper options, MsoOptions id, int value, Byte[] addData, bool isValid);
    protected virtual void CreateDefaultFillLineFormats();
    private void ParseRecord();
    private void ParseRecord(ExcelParseOptions options);
    [CLSCompliantAttribute("False")]
protected virtual void ParseClientData(MsofbtClientData clientData, ExcelParseOptions options);
    [CLSCompliantAttribute("False")]
protected virtual void ParseOtherRecords(MsoBase subRecord, ExcelParseOptions options);
    private void ParseOptions(MsofbtOPT options);
    private bool ParseFill(FOPTE option);
    private bool ParseLineFormat(FOPTE option);
    [CLSCompliantAttribute("False")]
protected virtual bool ParseOption(FOPTE option);
    [CLSCompliantAttribute("False")]
protected virtual void ParseShape(MsofbtSp shapeRecord);
    [CLSCompliantAttribute("False")]
public virtual void ParseClientAnchor(MsofbtClientAnchor clientAnchor);
    protected virtual void SetParents();
    internal void ChangeParent(object parent);
    protected void AttachEvents();
    protected void DetachEvents();
    [CLSCompliantAttribute("False")]
protected virtual void ParseShapeGroup(MsofbtSpgr shapeGroup);
    [CLSCompliantAttribute("False")]
protected virtual void ParseShapeGroupContainer(MsofbtSpgrContainer subRecord);
    [CLSCompliantAttribute("False")]
protected virtual void ParseChildAnchor(MsofbtChildAnchor childAnchor);
    protected virtual void ParseUnKnown(MsoUnknown UnKnown);
    [CLSCompliantAttribute("False")]
protected Color GetColorValue(FOPTE option);
    private byte GetByte(FOPTE option, int iByteIndex);
    [CLSCompliantAttribute("False")]
protected string ParseName(FOPTE option);
    private void ExtractNecessaryOptions(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected virtual bool ExtractNecessaryOption(FOPTE option);
    public virtual int get_Height();
    public virtual void set_Height(int value);
    public sealed virtual double get_HeightDouble();
    public sealed virtual void set_HeightDouble(double value);
    public virtual int get_Id();
    public sealed virtual IThreeDFormat get_ThreeD();
    internal bool get_ValidComment();
    internal void set_ValidComment(bool value);
    public sealed virtual IShadow get_Shadow();
    internal bool get_IsLeftValueSet();
    internal void set_IsLeftValueSet(bool value);
    internal bool get_HasExtent();
    internal void set_HasExtent(bool value);
    public virtual int get_Left();
    public virtual void set_Left(int value);
    public sealed virtual double get_LeftDouble();
    public sealed virtual void set_LeftDouble(double value);
    internal bool get_EnableAlternateContent();
    internal void set_EnableAlternateContent(bool value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual int get_Top();
    public virtual void set_Top(int value);
    public sealed virtual double get_TopDouble();
    public sealed virtual void set_TopDouble(double value);
    public virtual int get_Width();
    public virtual void set_Width(int value);
    public sealed virtual double get_WidthDouble();
    public sealed virtual void set_WidthDouble(double value);
    public sealed virtual ExcelShapeType get_ShapeType();
    public void set_ShapeType(ExcelShapeType value);
    public sealed virtual bool get_IsShapeVisible();
    public sealed virtual void set_IsShapeVisible(bool value);
    public virtual string get_AlternativeText();
    public virtual void set_AlternativeText(string value);
    public virtual bool get_IsMoveWithCell();
    public virtual void set_IsMoveWithCell(bool value);
    public virtual bool get_IsSizeWithCell();
    public virtual void set_IsSizeWithCell(bool value);
    public virtual IFill get_Fill();
    public virtual IShapeLineFormat get_Line();
    internal string get_PresetGeometry();
    internal void set_PresetGeometry(string value);
    internal string get_MacroName();
    internal void set_MacroName(string value);
    public sealed virtual bool get_AutoSize();
    public sealed virtual void set_AutoSize(bool value);
    public Stream get_XmlDataStream();
    public void set_XmlDataStream(Stream value);
    public Stream get_XmlTypeStream();
    public void set_XmlTypeStream(Stream value);
    public bool get_VmlShape();
    public void set_VmlShape(bool value);
    public sealed virtual string get_OnAction();
    public sealed virtual void set_OnAction(string value);
    public string get_ImageRelationId();
    public void set_ImageRelationId(string value);
    public Relation get_ImageRelation();
    public void set_ImageRelation(Relation value);
    public virtual int get_ShapeRotation();
    public virtual void set_ShapeRotation(int value);
    public virtual ITextFrame get_TextFrame();
    internal Stream get_FormulaMacroStream();
    internal void set_FormulaMacroStream(Stream value);
    public sealed virtual IHyperLink get_Hyperlink();
    internal void set_Hyperlink(IHyperLink value);
    internal Stream get_StyleStream();
    internal void set_StyleStream(Stream value);
    public sealed virtual void Remove();
    public sealed virtual void Scale(int scaleWidth, int scaleHeight);
    protected virtual void OnDispose();
    [CLSCompliantAttribute("False")]
public void Serialize(MsofbtSpgrContainer spgrContainer);
    [CLSCompliantAttribute("False")]
public void Serialize(MsofbtSpgrContainer spgrContainer, bool isGroupShape);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer, bool isGroupShape);
    private void SerializeMsoOptions(MsofbtSpContainer container);
    [CLSCompliantAttribute("False")]
protected MsofbtOPT SerializeMsoOptions(MsofbtOPT opt);
    private void SerializeTransparency(MsofbtOPT opt, int value);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT SerializeOptions(MsoBase parent);
    [CLSCompliantAttribute("False")]
protected void SerializeSizeTextToFit(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected void SerializeHitTest(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected void SerializeOption(MsofbtOPT options, MsoOptions id, UInt32 value);
    [CLSCompliantAttribute("False")]
protected FOPTE SerializeOption(MsofbtOPT options, MsoOptions id, int value);
    [CLSCompliantAttribute("False")]
protected void SerializeOptionSorted(MsofbtOPT options, MsoOptions id, UInt32 value);
    [CLSCompliantAttribute("False")]
protected void SerializeShapeVisibility(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected void SerializeShapeName(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected void SerializeName(MsofbtOPT options, MsoOptions optionId, string name);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT CreateDefaultOptions();
    private void UpdateFillFopte(MsofbtOPT option);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeCommentShadow(MsofbtOPT option);
    internal double get_ChartShapeX();
    internal void set_ChartShapeX(double value);
    internal double get_ChartShapeY();
    internal void set_ChartShapeY(double value);
    internal double get_ChartShapeWidth();
    internal void set_ChartShapeWidth(double value);
    internal double get_ChartShapeHeight();
    internal void set_ChartShapeHeight(double value);
    internal double get_StartX();
    internal void set_StartX(double value);
    internal double get_StartY();
    internal void set_StartY(double value);
    internal double get_ToX();
    internal void set_ToX(double value);
    internal double get_ToY();
    internal void set_ToY(double value);
    internal bool get_LockWithSheet();
    internal void set_LockWithSheet(bool value);
    internal bool get_PrintWithSheet();
    internal void set_PrintWithSheet(bool value);
    internal Stream get_GraphicFrameStream();
    internal void set_GraphicFrameStream(Stream value);
    internal bool get_HasBorder();
    internal void set_HasBorder(bool value);
    public sealed virtual IWorkbook get_Workbook();
    public WorkbookImpl get_ParentWorkbook();
    public ShapeCollectionBase get_ParentShapes();
    public WorksheetBaseImpl get_Worksheet();
    public OBJRecord get_Obj();
    public MsofbtClientAnchor get_ClientAnchor();
    public virtual int get_TopRow();
    public virtual void set_TopRow(int value);
    public virtual int get_LeftColumn();
    public virtual void set_LeftColumn(int value);
    public virtual int get_BottomRow();
    public virtual void set_BottomRow(int value);
    public virtual int get_RightColumn();
    public virtual void set_RightColumn(int value);
    public virtual int get_TopRowOffset();
    public virtual void set_TopRowOffset(int value);
    public virtual int get_LeftColumnOffset();
    public virtual void set_LeftColumnOffset(int value);
    public virtual int get_BottomRowOffset();
    public virtual void set_BottomRowOffset(int value);
    public virtual int get_RightColumnOffset();
    public virtual void set_RightColumnOffset(int value);
    public UInt32 get_OldObjId();
    public void set_OldObjId(UInt32 value);
    public MsoBase get_Record();
    public MsofbtSp get_InnerSpRecord();
    public bool get_IsShortVersion();
    public void set_IsShortVersion(bool value);
    public int get_ShapeCount();
    public bool get_UpdatePositions();
    public void set_UpdatePositions(bool value);
    public virtual int get_Instance();
    public bool get_HasFill();
    internal void set_HasFill(bool value);
    internal bool get_IsGroupFill();
    internal void set_IsGroupFill(bool value);
    internal bool get_IsGroupLine();
    internal void set_IsGroupLine(bool value);
    public bool get_HasLineFormat();
    internal void set_HasLineFormat(bool value);
    public int get_ShapeId();
    public void set_ShapeId(int value);
    public MsofbtSp get_ShapeRecord();
    internal bool get_IsActiveX();
    internal Dictionary`2<string, string> get_StyleProperties();
    internal void set_StyleProperties(Dictionary`2<string, string> value);
    internal string get_PreserveStyleString();
    internal void set_PreserveStyleString(string value);
    internal bool get_IsHyperlink();
    internal void set_IsHyperlink(bool value);
    internal bool get_IsAbsoluteAnchor();
    internal void set_IsAbsoluteAnchor(bool value);
    internal Stream get_NvPrExtLstStream();
    internal void set_NvPrExtLstStream(Stream value);
    internal bool get_IsSlicer();
    internal void set_IsSlicer(bool value);
    internal GroupShapeImpl get_Group();
    internal bool get_IsGroup();
    internal Dictionary`2<string, Stream> get_PreservedElements();
    internal bool get_IsCustomGeometry();
    internal void set_IsCustomGeometry(bool value);
    internal ShapeFrame get_ShapeFrame();
    internal void set_ShapeFrame(ShapeFrame value);
    internal ShapeFrame get_GroupFrame();
    internal void set_GroupFrame(ShapeFrame value);
    internal double GetBorderThickness();
    internal Color GetBorderColor();
    internal Color GetFillColor();
    internal Color GetDefaultColor(PreservedFlag flag, string elementTag);
    internal void GetStyleColor(AutoShapeImpl autoShape, PreservedFlag flag, string streamTag, string elementTag, Color& color);
    private bool CheckIfColorEmpty(Color color);
    public virtual void GenerateDefaultName();
    protected virtual void OnDelete();
    [CLSCompliantAttribute("False")]
protected void SetObject(OBJRecord value);
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
    public sealed virtual object Clone(object parent);
    public virtual void CopyFrom(ShapeImpl shape, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes);
    public bool CanInsertRowColumn(int iIndex, int iCount, bool bRow, int iMaxIndex);
    private int GetLowerBound(bool bRow);
    private int GetUpperBound(bool bRow);
    public void RemoveRowColumn(int iIndex, int iCount, bool bRow);
    public void InsertRowColumn(int iIndex, int iCount, bool bRow);
    public virtual void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public void SetName(string strShapeName);
    public virtual void RegisterInSubCollection();
    public virtual bool CanCopyShapesOnRangeCopy(Rectangle sourceRec, Rectangle destRec, Rectangle& newPosition);
    public virtual ShapeImpl CopyMoveShapeOnRangeCopyMove(WorksheetImpl sheet, Rectangle destRec, bool bIsCopy);
    public void CopyFillOptions(ShapeImpl sourceShape, IDictionary dicFontIndexes);
    public void PrepareForSerialization();
    protected virtual void OnPrepareForSerialization();
    private void UpdateMacroInfo();
    internal void SetInstance(int instance);
    public void SetOption(MsoOptions option, int value);
    private MsofbtOPT get_ShapeOptions();
    internal List`1<ShapeImpl> get_ChildShapes();
    internal MsofbtChildAnchor get_ChildAnchor();
    internal MsoUnknown get_UnKnown();
    public void UpdateNamedRangeIndexes(Int32[] arrNewIndex);
    public void UpdateNamedRangeIndexes(IDictionary`2<int, int> dicNewIndex);
    private void UpdateLeftColumn();
    internal void ClearShapeOffset(bool clear);
    protected internal void UpdateRightColumn(int iCount);
    protected internal void UpdateRightColumn();
    private void UpdateTopRow();
    protected internal void UpdateBottomRow();
    internal void UpdateAnchorPoints();
    protected internal void UpdateWidth();
    protected internal void UpdateHeight();
    internal int OffsetInPixels(int iRowColumn, int iOffset, bool isXOffset);
    internal int OffsetInPixels(double iWidthHeight, int iOffset, bool isXOffset);
    internal int PixelsInOffset(int iCurRowColumn, int iPixels, bool isXSize);
    internal double PixelsInOffset(double iWidthHeight, double iPixels, bool isXSize);
    internal int PixelsInOffset(double iWidthHeight, int iPixels, bool isXSize);
    internal float GetWidth(int iColumn1, int iOffset1, int iColumn2, int iOffset2, bool bIsOffsetInPixels);
    internal float GetHeight(int iRow1, int iOffset1, int iRow2, int iOffset2, bool bIsOffsetInPixels);
    internal static double ConvertWidthOffsetIntoPixels(double iColWidth, int iOffset, bool bIsInPixels);
    internal static double ConvertHeightOffsetIntoPixels(double iRowHeight, int iOffset, bool bIsOffsetInPixels);
    internal static int ConvertPixelsIntoWidthOffset(int iPixels, int iColWidth);
    internal static int ConvertPixelsIntoHeightOffset(int iPixels, int iRowHeight);
    internal static double ConvertPixelsIntoHeightOffset(double iPixels, double iRowHeight);
    public void EvaluateTopLeftPosition();
    private void EvaluateLeftPosition();
    private void EvaluateRightPosition();
    private void EvaluateTopPosition();
    [CLSCompliantAttribute("False")]
protected void SetClientAnchor(MsofbtClientAnchor anchor);
    private void OnLeftColumnChange();
    private void OnTopRowChanged();
    private bool IsIndexLess(int iRowColumnIndex, bool bIsRow);
    private bool IsIndexMiddle(int iRowColumnIndex, bool bIsRow);
    private bool IsIndexLast(int iRowColumnIndex, bool bIsRow);
    private void IncreaseAndUpdateAll(int iCount, bool bIsRow);
    private void IncreaseAndUpdateEnd(int iCount, bool bIsRow);
    private int GetCountAbove(int iIndex, int iCount, bool bIsRow);
    private int GetCountInside(int iIndex, int iCount, bool bIsRow);
    private bool IndicatesFirst(int iIndex, int iCount, bool bIsRow);
    private void UpdateAboveRowColumnIndexes(int iCount, bool bIsRow);
    private void UpdateFirstRowColumnIndexes(bool bIsRow, int iCount);
    protected virtual void UpdateNotSizeNotMoveShape(bool bRow, int iIndex, int iCount);
    private void UpdateInsideRowColumnIndexes(int iCount, bool bRow);
    private void UpdateLastRowColumnIndex(bool bRow);
    private void UpdateRecord(MsofbtClientAnchor anchor);
    private void ParseLineFill(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected virtual bool UpdateMso(MsoBase mso);
    protected void CloneLineFill(ShapeImpl sourceShape);
    private void CodeName_Changed(object sender, ValueChangedEventArgs e);
    private void Worksheet_ColumnWidthChanged(object sender, ValueChangedEventArgs e);
    private void LeaveRelativeBottomRightCorner();
    private void NormalFont_OnAfterChange(object sender, EventArgs e);
    private void Worksheet_RowHeightChanged(object sender, ValueChangedEventArgs e);
    internal void CheckLeftOffset();
    internal void UpdateGroupFrame(bool isAll);
    internal void UpdateGroupFrame();
    private void UpdateGroupPositions(Int64& left, Int64& top, Int64& width, Int64& height);
    private RectangleF GetChildShapePositionToDraw(RectangleF groupShapeBounds, float groupShapeRotation, RectangleF childShapeBounds);
    internal int GetShapeRotation();
    private RectangleF GetUpdatedRectangle(ShapeImpl shape, RectangleF shapeRect);
    private static RectangleF CreateRect(PointF[] points);
    private Matrix GetTransformMatrix(RectangleF bounds, bool flipV, bool flipH);
    private void MatrixTranslate(Matrix matrix, float x, float y, MatrixOrder matrixOrder);
    private void MatrixMultiply(Matrix matrix, Matrix target, MatrixOrder matrixOrder);
    private Matrix GetTransformMatrix(RectangleF bounds, float ang, bool flipV, bool flipH);
    internal RectangleF UpdateShapeBounds(RectangleF rect, int rotation);
    internal void SetPostion(long offsetX, long offsetY, long offsetCX, long offsetCY);
    private void SetLeftPosition(double value);
    private void SetTopPosition(double value);
    private void SetWidth(double value);
    private void SetHeight(double value);
    internal void SetInnerShapes(object value, string property);
}
public class Syncfusion.XlsIO.Implementation.Shapes.ShapeLineFormatImpl : CommonObject {
    private static double DEF_LINE_WEIGHT_MULL;
    private static int DEF_LINE_MAX_WEIGHT;
    private static int DEF_PARSE_ARR_LENGTH;
    private static Byte[] m_parsePattArray;
    private bool m_hasBorderJoin;
    private Excel2007BorderJoinType m_joinType;
    private int m_miterlim;
    private int m_DefaultLineStyleIndex;
    private bool m_isWidthExist;
    private double m_weight;
    private Color m_foreColor;
    private Color m_backColor;
    private WorkbookImpl m_book;
    private ExcelShapeArrowStyle m_beginArrowStyle;
    private ExcelShapeArrowStyle m_endArrowStyle;
    private ExcelShapeArrowLength m_beginArrowLength;
    private ExcelShapeArrowLength m_endArrowLength;
    private ExcelShapeArrowWidth m_beginArrowWidth;
    private ExcelShapeArrowWidth m_endArrowWidth;
    private ExcelShapeDashLineStyle m_dashStyle;
    private ExcelShapeLineStyle m_style;
    private double m_transparency;
    private bool m_visible;
    private ExcelGradientPattern m_pattern;
    private bool m_bContainPattern;
    private bool m_bRound;
    private PreservationLogger m_logger;
    internal Dictionary`2<string, Stream> m_schemeColorPreservedElements;
    private bool m_isNoFill;
    private bool m_isSolidFill;
    private string m_endCapType;
    public double Weight { get; public set; }
    public Color ForeColor { get; public set; }
    public Color BackColor { get; public set; }
    public ExcelKnownColors ForeColorIndex { get; public set; }
    public ExcelKnownColors BackColorIndex { get; public set; }
    public ExcelShapeArrowStyle BeginArrowHeadStyle { get; public set; }
    public ExcelShapeArrowStyle EndArrowHeadStyle { get; public set; }
    public ExcelShapeArrowLength BeginArrowheadLength { get; public set; }
    public ExcelShapeArrowLength EndArrowheadLength { get; public set; }
    public ExcelShapeArrowWidth BeginArrowheadWidth { get; public set; }
    public ExcelShapeArrowWidth EndArrowheadWidth { get; public set; }
    public ExcelShapeDashLineStyle DashStyle { get; public set; }
    public ExcelShapeLineStyle Style { get; public set; }
    public double Transparency { get; public set; }
    public bool Visible { get; public set; }
    public ExcelGradientPattern Pattern { get; public set; }
    public bool HasPattern { get; public set; }
    internal string EndCapType { get; internal set; }
    internal bool IsNoFill { get; internal set; }
    internal bool IsSolidFill { get; internal set; }
    internal bool HasBorderJoin { get; internal set; }
    internal Excel2007BorderJoinType JoinType { get; internal set; }
    internal int MiterLim { get; internal set; }
    internal int DefaultLineStyleIndex { get; internal set; }
    internal bool IsWidthExist { get; internal set; }
    public WorkbookImpl Workbook { get; }
    public bool IsRound { get; public set; }
    internal Dictionary`2<string, Stream> SchemeColorPreservedElements { get; }
    private static ShapeLineFormatImpl();
    public ShapeLineFormatImpl(IApplication application, object parent);
    internal ShapeLineFormatImpl(IApplication application, object parent, PreservationLogger logger);
    private void FindParents();
    internal static double ParseTransparency(UInt32 value);
    internal static void SerializeTransparency(IFopteOptionWrapper opt, MsoOptions id, double value);
    internal static void SerializeColor(IFopteOptionWrapper opt, ColorObject color, WorkbookImpl book, MsoOptions id);
    public sealed virtual double get_Weight();
    public sealed virtual void set_Weight(double value);
    public sealed virtual Color get_ForeColor();
    public sealed virtual void set_ForeColor(Color value);
    public sealed virtual Color get_BackColor();
    public sealed virtual void set_BackColor(Color value);
    public sealed virtual ExcelKnownColors get_ForeColorIndex();
    public sealed virtual void set_ForeColorIndex(ExcelKnownColors value);
    public sealed virtual ExcelKnownColors get_BackColorIndex();
    public sealed virtual void set_BackColorIndex(ExcelKnownColors value);
    public sealed virtual ExcelShapeArrowStyle get_BeginArrowHeadStyle();
    public sealed virtual void set_BeginArrowHeadStyle(ExcelShapeArrowStyle value);
    public sealed virtual ExcelShapeArrowStyle get_EndArrowHeadStyle();
    public sealed virtual void set_EndArrowHeadStyle(ExcelShapeArrowStyle value);
    public sealed virtual ExcelShapeArrowLength get_BeginArrowheadLength();
    public sealed virtual void set_BeginArrowheadLength(ExcelShapeArrowLength value);
    public sealed virtual ExcelShapeArrowLength get_EndArrowheadLength();
    public sealed virtual void set_EndArrowheadLength(ExcelShapeArrowLength value);
    public sealed virtual ExcelShapeArrowWidth get_BeginArrowheadWidth();
    public sealed virtual void set_BeginArrowheadWidth(ExcelShapeArrowWidth value);
    public sealed virtual ExcelShapeArrowWidth get_EndArrowheadWidth();
    public sealed virtual void set_EndArrowheadWidth(ExcelShapeArrowWidth value);
    public sealed virtual ExcelShapeDashLineStyle get_DashStyle();
    public sealed virtual void set_DashStyle(ExcelShapeDashLineStyle value);
    public sealed virtual ExcelShapeLineStyle get_Style();
    public sealed virtual void set_Style(ExcelShapeLineStyle value);
    public sealed virtual double get_Transparency();
    public sealed virtual void set_Transparency(double value);
    public sealed virtual bool get_Visible();
    public sealed virtual void set_Visible(bool value);
    public sealed virtual ExcelGradientPattern get_Pattern();
    public sealed virtual void set_Pattern(ExcelGradientPattern value);
    public sealed virtual bool get_HasPattern();
    public sealed virtual void set_HasPattern(bool value);
    internal string get_EndCapType();
    internal void set_EndCapType(string value);
    internal bool get_IsNoFill();
    internal void set_IsNoFill(bool value);
    internal bool get_IsSolidFill();
    internal void set_IsSolidFill(bool value);
    internal bool get_HasBorderJoin();
    internal void set_HasBorderJoin(bool value);
    internal Excel2007BorderJoinType get_JoinType();
    internal void set_JoinType(Excel2007BorderJoinType value);
    internal int get_MiterLim();
    internal void set_MiterLim(int value);
    internal int get_DefaultLineStyleIndex();
    internal void set_DefaultLineStyleIndex(int value);
    internal bool get_IsWidthExist();
    internal void set_IsWidthExist(bool value);
    public WorkbookImpl get_Workbook();
    public bool get_IsRound();
    public void set_IsRound(bool value);
    internal Dictionary`2<string, Stream> get_SchemeColorPreservedElements();
    [CLSCompliantAttribute("False")]
public bool ParseOption(FOPTE option);
    private bool ParseArrowsPropertys(FOPTE option);
    private ExcelGradientPattern ParsePattern(FOPTE option);
    private void ParseVisible(Byte[] data);
    [CLSCompliantAttribute("False")]
public void Serialize(MsofbtOPT opt);
    private void SerializeArrowProperties(MsofbtOPT opt);
    private void SerializeDashStyle(MsofbtOPT opt);
    private void SerializeLineStyle(MsofbtOPT opt);
    private void SerializeVisible(MsofbtOPT opt);
    private void SerializePattern(MsofbtOPT opt);
    private ExcelGradientPattern GetPattern(Byte[] arr);
    internal void SetInnerShapes(object value, string property);
    public ShapeLineFormatImpl Clone(object parent);
}
internal enum Syncfusion.XlsIO.Implementation.Shapes.StrikeType : Enum {
    public int value__;
    public static StrikeType None;
    public static StrikeType Single;
    public static StrikeType Double;
}
internal enum Syncfusion.XlsIO.Implementation.Shapes.TextAlignType : Enum {
    public int value__;
    public static TextAlignType Left;
    public static TextAlignType Right;
    public static TextAlignType Center;
    public static TextAlignType Justified;
    public static TextAlignType Distributed;
}
public class Syncfusion.XlsIO.Implementation.Shapes.TextBoxShapeBase : ShapeImpl {
    private static int DEF_CONTINUE_FR_SIZE;
    private static UInt32 DEF_TEXTDIRECTION;
    private ExcelCommentHAlign m_hAlign;
    private ExcelCommentVAlign m_vAlign;
    private ExcelTextRotation m_textRotation;
    private bool m_bTextLocked;
    private RichTextString m_strText;
    private int m_iTextLen;
    private int m_iFormattingLen;
    private Color m_fillColor;
    private Dictionary`2<string, string> m_unknownBodyProperties;
    private RichTextReader m_richTextReader;
    protected WorksheetImpl m_sheet;
    private ColorObject m_colorObject;
    private bool isDefaultAlign;
    public ExcelCommentHAlign HAlignment { get; public set; }
    internal bool IsDefaultAlign { get; internal set; }
    public ExcelCommentVAlign VAlignment { get; public set; }
    public ExcelTextRotation TextRotation { get; public set; }
    public bool IsTextLocked { get; public set; }
    public IRichTextString RichText { get; public set; }
    internal RichTextReader RichTextReader { get; }
    public string Text { get; public set; }
    internal RichTextString InnerRichText { get; }
    public Color FillColor { get; public set; }
    public Dictionary`2<string, string> UnknownBodyProperties { get; public set; }
    public ColorObject ColorObject { get; public set; }
    public TextBoxShapeBase(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public TextBoxShapeBase(IApplication application, object parent, MsofbtSpContainer container, ExcelParseOptions options);
    public sealed virtual ExcelCommentHAlign get_HAlignment();
    public sealed virtual void set_HAlignment(ExcelCommentHAlign value);
    internal bool get_IsDefaultAlign();
    internal void set_IsDefaultAlign(bool value);
    public sealed virtual ExcelCommentVAlign get_VAlignment();
    public sealed virtual void set_VAlignment(ExcelCommentVAlign value);
    public sealed virtual ExcelTextRotation get_TextRotation();
    public sealed virtual void set_TextRotation(ExcelTextRotation value);
    public sealed virtual bool get_IsTextLocked();
    public sealed virtual void set_IsTextLocked(bool value);
    public sealed virtual IRichTextString get_RichText();
    public sealed virtual void set_RichText(IRichTextString value);
    internal RichTextReader get_RichTextReader();
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    internal RichTextString get_InnerRichText();
    public Color get_FillColor();
    public void set_FillColor(Color value);
    public Dictionary`2<string, string> get_UnknownBodyProperties();
    public void set_UnknownBodyProperties(Dictionary`2<string, string> value);
    public ColorObject get_ColorObject();
    public void set_ColorObject(ColorObject value);
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
    internal void SetText(TextWithFormat text);
    [CLSCompliantAttribute("False")]
protected MsofbtClientTextBox GetClientTextBoxRecord(MsoBase parent);
    [CLSCompliantAttribute("False")]
protected MsofbtClientTextBox GetClientTextBoxRecord(MsoBase parent, ExcelCommentVAlign vAlign);
    private void AddFormattingContinueRecords(MsofbtClientTextBox result, TextObjectRecord textObject);
    private void AddTextContinueRecords(MsofbtClientTextBox result);
    private void ParseTextObject(TextObjectRecord textObject);
    private void ParseContinueRecords(string strText, Byte[] formattingRuns, ExcelParseOptions options);
    private Byte[] SerializeFormattingRuns();
    private Byte[] ConvertFromShortToLongFR(Byte[] arrShortFR);
    protected virtual void InitializeVariables();
    [CLSCompliantAttribute("False")]
protected virtual void ParseClientTextBoxRecord(MsofbtClientTextBox textBox, ExcelParseOptions options);
    public void CopyFrom(TextBoxShapeBase source, Dictionary`2<int, int> dicFontIndexes);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT CreateDefaultOptions();
    [CLSCompliantAttribute("False")]
protected void SerializeTextDirection(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT SerializeOptions(MsoBase parent);
    [CLSCompliantAttribute("False")]
protected virtual void ParseOtherRecords(MsoBase subRecord, ExcelParseOptions options);
    public virtual void Dispose();
}
public class Syncfusion.XlsIO.Implementation.Shapes.TextBoxShapeImpl : TextBoxShapeBase {
    private static int ShapeInstance;
    private static int ShapeVersion;
    internal static string EmbedString;
    private bool m_isFldText;
    private Rectangle m_2007Coordinates;
    private string m_id;
    private string m_type;
    private string m_textLink;
    internal bool IsAutoSize;
    private bool m_locksText;
    private bool m_noChangeAspect;
    private TextBodyPropertiesHolder textBodyPropertiesHolder;
    private bool m_bFlipVertical;
    private bool m_bFlipHorizontal;
    private Stream m_fldElementStream;
    private bool m_isLineProperties;
    private bool m_isCreated;
    private bool m_isFill;
    private bool m_isNoFill;
    private bool m_isGroupFill;
    private bool m_isSlicer;
    private int m_slicerID;
    private double m_textTransparencyAlpha;
    internal bool IsFldText { get; internal set; }
    internal bool IsCreated { get; internal set; }
    internal bool IsSlicer { get; internal set; }
    internal int SlicerID { get; internal set; }
    internal bool IsLineProperties { get; internal set; }
    internal bool IsFill { get; internal set; }
    internal bool IsNoFill { get; internal set; }
    internal bool IsGroupFill { get; internal set; }
    public Rectangle Coordinates2007 { get; public set; }
    public string FieldId { get; public set; }
    public string FieldType { get; public set; }
    public string TextLink { get; public set; }
    internal bool LocksText { get; internal set; }
    internal bool NoChangeAspect { get; internal set; }
    public string Text { get; public set; }
    public IHyperLink Hyperlink { get; internal set; }
    internal TextBodyPropertiesHolder TextBodyPropertiesHolder { get; }
    internal bool FlipVertical { get; internal set; }
    internal bool FlipHorizontal { get; internal set; }
    internal Stream FldElementStream { get; internal set; }
    internal double TextTransparencyAlpha { get; internal set; }
    public TextBoxShapeImpl(IApplication application, object parent, WorksheetImpl sheet);
    [CLSCompliantAttribute("False")]
public TextBoxShapeImpl(IApplication application, object parent, MsofbtSpContainer shapeContainer, ExcelParseOptions options);
    internal bool get_IsFldText();
    internal void set_IsFldText(bool value);
    internal bool get_IsCreated();
    internal void set_IsCreated(bool value);
    internal bool get_IsSlicer();
    internal void set_IsSlicer(bool value);
    internal int get_SlicerID();
    internal void set_SlicerID(int value);
    internal bool get_IsLineProperties();
    internal void set_IsLineProperties(bool value);
    internal bool get_IsFill();
    internal void set_IsFill(bool value);
    internal bool get_IsNoFill();
    internal void set_IsNoFill(bool value);
    internal bool get_IsGroupFill();
    internal void set_IsGroupFill(bool value);
    public Rectangle get_Coordinates2007();
    public void set_Coordinates2007(Rectangle value);
    public string get_FieldId();
    public void set_FieldId(string value);
    public string get_FieldType();
    public void set_FieldType(string value);
    public sealed virtual string get_TextLink();
    public sealed virtual void set_TextLink(string value);
    internal bool get_LocksText();
    internal void set_LocksText(bool value);
    internal bool get_NoChangeAspect();
    internal void set_NoChangeAspect(bool value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual IHyperLink get_Hyperlink();
    internal void set_Hyperlink(IHyperLink value);
    internal TextBodyPropertiesHolder get_TextBodyPropertiesHolder();
    internal bool get_FlipVertical();
    internal void set_FlipVertical(bool value);
    internal bool get_FlipHorizontal();
    internal void set_FlipHorizontal(bool value);
    internal Stream get_FldElementStream();
    internal void set_FldElementStream(Stream value);
    internal double get_TextTransparencyAlpha();
    internal void set_TextTransparencyAlpha(double value);
    private void InitializeShape();
    protected virtual void OnPrepareForSerialization();
    [CLSCompliantAttribute("False")]
protected virtual void SerializeShape(MsofbtSpgrContainer spgrContainer);
    [CLSCompliantAttribute("False")]
protected virtual MsofbtOPT CreateDefaultOptions();
    public virtual IShape Clone(object parent, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes, bool addToCollections);
}
public class Syncfusion.XlsIO.Implementation.ShapesGetter : object {
    public sealed virtual ShapeCollectionBase GetShapes(WorksheetBaseImpl sheet);
    public sealed virtual object Clone();
}
internal class Syncfusion.XlsIO.Implementation.Slicer : object {
    private string m_slicerName;
    private string m_columnName;
    private string m_slicerCaption;
    private double m_top;
    private double m_left;
    private double m_height;
    private double m_width;
    private int m_heightInPixels;
    private int m_widthInPixels;
    private double m_slicerItemWidth;
    private double m_slicerItemHeight;
    private int m_slicerItemWidthInPixels;
    private int m_slicerItemHeightInPixels;
    private int m_numberOfColumns;
    private int m_level;
    private bool m_displayHeader;
    private ExcelSlicerStyle m_slicerStyle;
    private IListObject m_sourceTable;
    private IPivotTable m_sourcePivotTable;
    internal ISlicerCache m_slicerCache;
    private IWorksheet m_worksheet;
    private SlicerCollection m_slicerCollection;
    private bool m_isPivottableSlicer;
    private int m_columnIndex;
    private string m_slicerCahceName;
    private Stream m_slicerStream;
    public string Name { get; public set; }
    internal string ColumnName { get; }
    public ISlicerCache SlicerCache { get; }
    public string Caption { get; public set; }
    public double Top { get; public set; }
    public double Left { get; public set; }
    public double Height { get; public set; }
    public double Width { get; public set; }
    public int HeightInPixels { get; public set; }
    public int WidthInPixels { get; public set; }
    public double SlicerItemWidth { get; public set; }
    public double SlicerItemHeight { get; public set; }
    public int SlicerItemWidthInPixels { get; public set; }
    public int SlicerItemHeightInPixels { get; public set; }
    public int NumberOfColumns { get; public set; }
    public bool DisplayHeader { get; public set; }
    public ExcelSlicerStyle SlicerStyle { get; public set; }
    public IListObject SourceTable { get; public set; }
    internal IPivotTable SourcePivotTable { get; internal set; }
    internal IWorksheet Worksheet { get; }
    internal bool IsPivottableSlicer { get; internal set; }
    internal int ColumnIndex { get; internal set; }
    internal SlicerCollection SlicerCollection { get; internal set; }
    internal string SlicerCahceName { get; }
    internal int Level { get; internal set; }
    internal Stream SlicerStream { get; internal set; }
    internal Slicer(string cache, IWorksheet sheet);
    internal Slicer(IListObject table, int columnIndex, int row, int column, SlicerCollection slicers, IPivotTable pivottable);
    internal Slicer(string name, string cache, string caption, string columnCount, string level, string style, string rowHeight, IWorksheet sheet);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal string get_ColumnName();
    public sealed virtual ISlicerCache get_SlicerCache();
    public sealed virtual string get_Caption();
    public sealed virtual void set_Caption(string value);
    public sealed virtual double get_Top();
    public sealed virtual void set_Top(double value);
    public sealed virtual double get_Left();
    public sealed virtual void set_Left(double value);
    public sealed virtual double get_Height();
    public sealed virtual void set_Height(double value);
    public sealed virtual double get_Width();
    public sealed virtual void set_Width(double value);
    public sealed virtual int get_HeightInPixels();
    public sealed virtual void set_HeightInPixels(int value);
    public sealed virtual int get_WidthInPixels();
    public sealed virtual void set_WidthInPixels(int value);
    public sealed virtual double get_SlicerItemWidth();
    public sealed virtual void set_SlicerItemWidth(double value);
    public sealed virtual double get_SlicerItemHeight();
    public sealed virtual void set_SlicerItemHeight(double value);
    public sealed virtual int get_SlicerItemWidthInPixels();
    public sealed virtual void set_SlicerItemWidthInPixels(int value);
    public sealed virtual int get_SlicerItemHeightInPixels();
    public sealed virtual void set_SlicerItemHeightInPixels(int value);
    public sealed virtual int get_NumberOfColumns();
    public sealed virtual void set_NumberOfColumns(int value);
    public sealed virtual bool get_DisplayHeader();
    public sealed virtual void set_DisplayHeader(bool value);
    public sealed virtual ExcelSlicerStyle get_SlicerStyle();
    public sealed virtual void set_SlicerStyle(ExcelSlicerStyle value);
    public sealed virtual IListObject get_SourceTable();
    public void set_SourceTable(IListObject value);
    internal IPivotTable get_SourcePivotTable();
    internal void set_SourcePivotTable(IPivotTable value);
    internal IWorksheet get_Worksheet();
    internal bool get_IsPivottableSlicer();
    internal void set_IsPivottableSlicer(bool value);
    internal int get_ColumnIndex();
    internal void set_ColumnIndex(int value);
    internal SlicerCollection get_SlicerCollection();
    internal void set_SlicerCollection(SlicerCollection value);
    internal string get_SlicerCahceName();
    internal int get_Level();
    internal void set_Level(int value);
    internal Stream get_SlicerStream();
    internal void set_SlicerStream(Stream value);
    internal ISlicer Clone(SlicerCollection slicers);
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.SlicerCollection : CollectionBaseEx`1<ISlicer> {
    internal static string Slicers;
    internal static string Slicer;
    internal static string NameAttribute;
    internal static string CacheNameAttribute;
    internal static string Caption;
    internal static string RowHeight;
    internal static string ColumnCount;
    internal static string Level;
    internal static string Style;
    internal static string ShowCaption;
    private WorksheetImpl m_worksheet;
    public int Count { get; }
    public ISlicer Item { get; }
    internal SlicerCollection(WorksheetImpl worksheet, IApplication application);
    public sealed virtual int get_Count();
    public sealed virtual ISlicer get_Item(int index);
    public sealed virtual int Add(IListObject table, int columnIndex, int row, int column);
    internal int Add(ISlicer slicer);
    public sealed virtual void Remove(ISlicer slicer);
    public sealed virtual void RemoveAt(int index);
    internal SlicerCollection Clone(WorksheetImpl worksheet, IApplication application);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.Implementation.Slicers.SlicerCache : object {
    private SlicerCrossFilterType m_crossFilterType;
    private bool m_useCustomListSorting;
    private string m_sourceName;
    private bool m_isAscending;
    private ISlicerCacheItems m_slicerCacheItems;
    private Slicer m_slicer;
    private int m_tableIndex;
    private int m_pivotTableIndex;
    private int m_columnIndex;
    private string m_name;
    private bool m_isPivotSlicer;
    private string m_pivotTableName;
    private List`1<string> m_items;
    private List`1<string> m_itemSelected;
    private List`1<string> m_itemFilter;
    private Stream m_pivotStream;
    private Stream m_slicerCacheStream;
    public ISlicerCacheItems SlicerCacheItems { get; }
    public SlicerCrossFilterType CrossFilterType { get; public set; }
    public bool UseCustomListSorting { get; public set; }
    public string SourceName { get; internal set; }
    internal string Name { get; internal set; }
    internal string PivotTableName { get; internal set; }
    public bool IsAscending { get; public set; }
    internal int TableIndex { get; }
    internal int PivotTableIndex { get; }
    internal int ColumnIndex { get; }
    internal bool IsPivotSlicer { get; internal set; }
    internal List`1<string> Items { get; internal set; }
    internal List`1<string> ItemSelected { get; internal set; }
    internal List`1<string> ItemFilter { get; internal set; }
    internal Stream PivotStream { get; internal set; }
    internal Stream SlicerCacheStream { get; internal set; }
    internal SlicerCache(IListObject table, int columnIndex);
    internal SlicerCache(IListObject table, int columnIndex, IPivotTable pivottable);
    internal SlicerCache(string name, string sourceName, string tableId, string column, string sortOrder, string crossFilter);
    internal SlicerCache(int tabId, string piovttablename, string name, string sourceName, string sortOrder, string crossFilter, XmlReader reader);
    public sealed virtual ISlicerCacheItems get_SlicerCacheItems();
    public sealed virtual SlicerCrossFilterType get_CrossFilterType();
    public sealed virtual void set_CrossFilterType(SlicerCrossFilterType value);
    public sealed virtual bool get_UseCustomListSorting();
    public sealed virtual void set_UseCustomListSorting(bool value);
    public sealed virtual string get_SourceName();
    internal void set_SourceName(string value);
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_PivotTableName();
    internal void set_PivotTableName(string value);
    public sealed virtual bool get_IsAscending();
    public sealed virtual void set_IsAscending(bool value);
    internal int get_TableIndex();
    internal int get_PivotTableIndex();
    internal int get_ColumnIndex();
    internal bool get_IsPivotSlicer();
    internal void set_IsPivotSlicer(bool value);
    internal List`1<string> get_Items();
    internal void set_Items(List`1<string> value);
    internal List`1<string> get_ItemSelected();
    internal void set_ItemSelected(List`1<string> value);
    internal List`1<string> get_ItemFilter();
    internal void set_ItemFilter(List`1<string> value);
    internal Stream get_PivotStream();
    internal void set_PivotStream(Stream value);
    internal Stream get_SlicerCacheStream();
    internal void set_SlicerCacheStream(Stream value);
    internal void AddSlicerCacheItems(SlicerCacheItemCollection slicercacheitems);
    internal ISlicerCache Clone(Slicer slicer);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.Implementation.Slicers.SlicerCacheItem : object {
    private bool m_isSelected;
    private string m_value;
    private int m_row;
    private int m_column;
    private IListObject m_table;
    private IPivotTable m_pivotTable;
    private string m_pivotitem;
    private SlicerCacheItemCollection m_slicerCacheItems;
    public bool IsSelected { get; public set; }
    public string Value { get; }
    internal string Pivotitem { get; internal set; }
    internal int Row { get; internal set; }
    internal SlicerCacheItem(string value, string itemindex, bool isSelected, int row, int column, IListObject table, IPivotTable pivottable);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual string get_Value();
    internal string get_Pivotitem();
    internal void set_Pivotitem(string value);
    internal int get_Row();
    internal void set_Row(int value);
    internal object Clone(SlicerCacheItemCollection slicerCacheItems);
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.Slicers.SlicerCacheItemCollection : CollectionBaseEx`1<ISlicerCacheItem> {
    private IWorksheet m_worksheet;
    private SlicerCache m_slicerCache;
    private SlicerCacheItemCollection m_slicerCacheItems;
    public int Count { get; }
    public ISlicerCacheItem Item { get; }
    internal SlicerCacheItemCollection(SlicerCache slicerCache, IApplication application);
    internal SlicerCacheItemCollection(IWorksheet worksheet, IApplication application);
    public sealed virtual int get_Count();
    public sealed virtual ISlicerCacheItem get_Item(int index);
    internal void Add(IListObject table, int columnIndex, IPivotTable pivottable, string columnName);
    internal void Sort();
    internal object Clone(SlicerCache slicerCache);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.Implementation.SortByColumn : object {
    public sealed virtual int Compare(object x, object y);
}
internal class Syncfusion.XlsIO.Implementation.SortByRow : object {
    public sealed virtual int Compare(object x, object y);
}
internal class Syncfusion.XlsIO.Implementation.Sorting.DataSorter : object {
    private bool m_bIsCaseSensitive;
    private bool m_bHasHeader;
    private SortOrientation m_orientation;
    private ISortFields m_sortFields;
    private IRange m_sortRange;
    private SortingAlgorithms m_algorithm;
    private IWorkbook m_workBook;
    private IWorksheet m_worksheet;
    private ISortingAlgorithm m_customAlgorithm;
    private object m_parent;
    private ISortingAlgorithm CustomAlgorithm { get; private set; }
    public bool IsCaseSensitive { get; public set; }
    public bool HasHeader { get; public set; }
    public SortOrientation Orientation { get; public set; }
    public ISortFields SortFields { get; public set; }
    public IRange SortRange { get; public set; }
    public SortingAlgorithms Algorithm { get; public set; }
    internal IWorksheet Worksheet { get; }
    internal DataSorter(object parentObject);
    private ISortingAlgorithm get_CustomAlgorithm();
    private void set_CustomAlgorithm(ISortingAlgorithm value);
    public sealed virtual bool get_IsCaseSensitive();
    public sealed virtual void set_IsCaseSensitive(bool value);
    public sealed virtual bool get_HasHeader();
    public sealed virtual void set_HasHeader(bool value);
    public sealed virtual SortOrientation get_Orientation();
    public sealed virtual void set_Orientation(SortOrientation value);
    public sealed virtual ISortFields get_SortFields();
    public sealed virtual void set_SortFields(ISortFields value);
    public sealed virtual IRange get_SortRange();
    public sealed virtual void set_SortRange(IRange value);
    public sealed virtual SortingAlgorithms get_Algorithm();
    public sealed virtual void set_Algorithm(SortingAlgorithms value);
    internal IWorksheet get_Worksheet();
    public sealed virtual void Sort();
    public void SortBy(Int32[] iColumns, OrderBy[] orderBy, Color[] colors);
    private void ArrangeSimilarData(Object[][] data, OrderBy order);
    internal Object[][] SortableData(IRange range, Type[] columnTypes, Int32[] iColumns, OrderBy[] orderBy);
    private object CheckMaxValue(object value, OrderBy order);
    internal Object[][] SortableDataColumn(IRange range, Type[] rowTypes, Int32[] iRows);
    internal object GetValue(IRange range, int type);
    internal void SwapManager(IRange range, Object[][] sortedResult);
    internal void SwapManagerColumnWise(IRange range, Object[][] sortedResult);
    internal void SwapManagerColumnWise(IRange range, Object[][] sortedResult, int startRow);
    internal void SwapManager(IRange range, Object[][] sortedResult, int startRow);
    internal Type GetColumnType(IRange range, Int32& iType);
    internal void UpdateRange(IRange value);
}
internal class Syncfusion.XlsIO.Implementation.Sorting.HeapSortImpl : SortingAlgorithm {
    public IRange Range { get; public set; }
    public HeapSortImpl(Object[][] data, Type[] types, OrderBy[] orderBy, Color[] m_colors);
    public virtual void Sort(int left, int right, int columnIndex);
    public void SortOnTypes(int left, int right, int columnIndex);
    private void CreateIntHeap(int position, int length, int columnIndex);
    public void SortInt(int root, int length, int columnIndex);
    private void CreateFloatHeap(int position, int length, int columnIndex);
    public void SortFloat(int root, int length, int columnIndex);
    private void CreateDateHeap(int position, int length, int columnIndex);
    public void SortDate(int root, int length, int columnIndex);
    private void CreateStringHeap(int position, int length, int columnIndex);
    public void SortString(int root, int length, int columnIndex);
    private void CreateDescIntHeap(int position, int length, int columnIndex);
    public void SortIntDesc(int root, int length, int columnIndex);
    private void CreateDescFloatHeap(int position, int length, int columnIndex);
    public void SortFloatDesc(int root, int length, int columnIndex);
    private void CreateDescDateHeap(int position, int length, int columnIndex);
    public void SortDateDesc(int root, int length, int columnIndex);
    private void CreateDescStringHeap(int position, int length, int columnIndex);
    public void SortStringDesc(int root, int length, int columnIndex);
    public IRange get_Range();
    public void set_Range(IRange value);
}
internal class Syncfusion.XlsIO.Implementation.Sorting.InsertionSortImpl : SortingAlgorithm {
    public IRange Range { get; public set; }
    public InsertionSortImpl(Object[][] data, Type[] types, OrderBy[] orderBy, Color[] colors);
    public void SortInt(int left, int right, int columnIndex);
    public void SortFloat(int left, int right, int columnIndex);
    public void SortDate(int left, int right, int columnIndex);
    public void SortString(int left, int right, int columnIndex);
    public void SortOnTypes(int left, int right, int columnIndex);
    public void SortIntDesc(int left, int right, int columnIndex);
    public void SortFloatDesc(int left, int right, int columnIndex);
    public void SortDateDesc(int left, int right, int columnIndex);
    public void SortStringDesc(int left, int right, int columnIndex);
    public virtual void Sort(int left, int right, int columnIndex);
    public IRange get_Range();
    public void set_Range(IRange value);
}
internal class Syncfusion.XlsIO.Implementation.Sorting.MergeSortImpl : SortingAlgorithm {
    public IRange Range { get; public set; }
    public MergeSortImpl(Object[][] data, Type[] types, OrderBy[] orderBy, Color[] colors);
    public Object[][] SortOnTypes(Object[][] arrValues, int columnIndex);
    public Object[][] GetRange(Object[][] arrData, int startIndex, int endIndex);
    public void AddRange(Object[][] destArray, Object[][] srcArray, int startIndex);
    public Object[][] SortInt(Object[][] arrData, int columnIndex);
    public Object[][] SortString(Object[][] arrData, int columnIndex);
    public Object[][] SortFloat(Object[][] arrData, int columnIndex);
    public Object[][] SortDate(Object[][] arrData, int columnIndex);
    public Object[][] SortIntDesc(Object[][] arrData, int columnIndex);
    public Object[][] SortStringDesc(Object[][] arrData, int columnIndex);
    public Object[][] SortFloatDesc(Object[][] arrData, int columnIndex);
    public Object[][] SortDateDesc(Object[][] arrData, int columnIndex);
    public virtual void Sort(int left, int right, int columnIndex);
    public void SortInt(int left, int right, int columnIndex);
    public void SortFloat(int left, int right, int columnIndex);
    public void SortDate(int left, int right, int columnIndex);
    public void SortString(int left, int right, int columnIndex);
    public void SortOnTypes(int left, int right, int columnIndex);
    public void SortIntDesc(int left, int right, int columnIndex);
    public void SortFloatDesc(int left, int right, int columnIndex);
    public void SortDateDesc(int left, int right, int columnIndex);
    public void SortStringDesc(int left, int right, int columnIndex);
    public IRange get_Range();
    public void set_Range(IRange value);
}
internal class Syncfusion.XlsIO.Implementation.Sorting.QuickSort3Impl : SortingAlgorithm {
    private static int CUTOFF;
    public IRange Range { get; public set; }
    public QuickSort3Impl(Object[][] data, Type[] types, OrderBy[] orderBy, Color[] colors);
    public void SortInt(int left, int right, int iColumn);
    public void SortFloat(int left, int right, int iColumn);
    public void SortDate(int left, int right, int iColumn);
    public void SortString(int left, int right, int iColumn);
    public void SortIntDesc(int left, int right, int iColumn);
    public void SortFloatDesc(int left, int right, int iColumn);
    public void SortDateDesc(int left, int right, int iColumn);
    public void SortStringDesc(int left, int right, int iColumn);
    public virtual void Sort(int left, int right, int columnIndex);
    public void SortOnTypes(int left, int right, int columnIndex);
    public IRange get_Range();
    public void set_Range(IRange value);
    private void QuickSort(Object[][] data, int low, int high);
    public void SwapReferences(Object[][] data, int firstIndex, int secondIndex);
    private void InsertionSort(Object[][] data, int low, int high);
    private bool CompareNumberInStringFormat(Object[] currentValue, Object[] compareValue);
    private int CompareRows(T[] firstObject, T[] secondObject);
}
internal class Syncfusion.XlsIO.Implementation.Sorting.SortField : object {
    private int m_iKey;
    private SortOn m_sortOn;
    private OrderBy m_Order;
    private Color m_color;
    private SortFields m_parent;
    public int Key { get; public set; }
    public SortOn SortOn { get; public set; }
    public OrderBy Order { get; public set; }
    public Color Color { get; public set; }
    public SortField(SortFields parent);
    public sealed virtual int get_Key();
    public sealed virtual void set_Key(int value);
    public sealed virtual SortOn get_SortOn();
    public sealed virtual void set_SortOn(SortOn value);
    public sealed virtual OrderBy get_Order();
    public sealed virtual void set_Order(OrderBy value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual void SetPriority(int priority);
}
internal class Syncfusion.XlsIO.Implementation.Sorting.SortFields : CollectionBaseEx`1<ISortField> {
    public SortFields(IApplication application, object parent);
    internal SortFields(IApplication application, IWorksheet parent);
    public sealed virtual ISortField Add(int key, SortOn sortBasedOn, OrderBy orderBy);
    public sealed virtual void Remove(ISortField sortField);
    public sealed virtual void Remove(int key);
    internal void RemoveLast(int key);
    internal void SetPriority(SortField sortField, int priority);
    internal int FindByKey(int key);
    internal int FindLastByKey(int key);
}
internal abstract class Syncfusion.XlsIO.Implementation.Sorting.SortingAlgorithm : object {
    protected Object[][] m_data;
    protected int count;
    protected Type[] types;
    protected OrderBy[] orderBy;
    protected int m_iTopPosition;
    protected int m_iBottomPosition;
    protected Color[] m_colors;
    public Object[][] Data { get; }
    public IRange Range { get; public set; }
    public SortingAlgorithm(Object[][] data, Type[] types, OrderBy[] orderBy, Color[] colors);
    public Object[][] get_Data();
    public sealed virtual IRange get_Range();
    public sealed virtual void set_Range(IRange value);
    public abstract virtual void Sort(int left, int right, int columnIndex);
    protected Object[] ExtractSingleRow(int rowIndex);
    protected Object[] ExtractSingleColumn(int rowIndex);
    protected void SwapRow(int left, int right);
    private void Swap(Object[] left, Object[] right);
    protected void SwapColumn(int left, int right);
    private void SwapColumn(Object[] left, Object[] right);
    public virtual void SortInt(int left, int right, int columnIndex);
    public virtual void SortFloat(int left, int right, int columnIndex);
    public virtual void SortDate(int left, int right, int columnIndex);
    public virtual void SortString(int left, int right, int columnIndex);
    public virtual void SortOnTypes(int left, int right, int columnIndex);
    public virtual void SortIntDesc(int left, int right, int columnIndex);
    public virtual void SortFloatDesc(int left, int right, int columnIndex);
    public virtual void SortDateDesc(int left, int right, int columnIndex);
    public virtual void SortStringDesc(int left, int right, int columnIndex);
}
internal class Syncfusion.XlsIO.Implementation.Sorting.StyleSorting : SortingAlgorithm {
    public StyleSorting(Object[][] data, Type[] types, OrderBy[] orderBy, Color[] colors);
    public virtual void Sort(int left, int right, int columnIndex);
    private void SortByAlign(int left, int right, int columnIndex);
    private void SortTopByCellColor(int left, int right, int columnIndex);
    private bool Compare(Color color1, Color color2);
    private void SortBottomByCellColor(int left, int right, int columnIndex);
    internal void MoveDown(int srcIndex, int destIndex);
    internal void MoveUp(int srcIndex, int destIndex);
    public void SortInt(int left, int right, int columnIndex);
    public void SortFloat(int left, int right, int columnIndex);
    public void SortDate(int left, int right, int columnIndex);
    public void SortString(int left, int right, int columnIndex);
    public void SortOnTypes(int left, int right, int columnIndex);
    public void SortIntDesc(int left, int right, int columnIndex);
    public void SortFloatDesc(int left, int right, int columnIndex);
    public void SortDateDesc(int left, int right, int columnIndex);
    public void SortStringDesc(int left, int right, int columnIndex);
}
internal class Syncfusion.XlsIO.Implementation.SortRangeByColumn : object {
    public sealed virtual int Compare(object x, object y);
}
internal class Syncfusion.XlsIO.Implementation.SortRangeByRow : object {
    public sealed virtual int Compare(object x, object y);
}
public class Syncfusion.XlsIO.Implementation.SparkConstants : object {
    public static string UriAttribute;
    public static string SparklineGroupsTag;
    public static string SparklineGroupTag;
    public static string SparklinesTag;
    public static string SparklineTag;
    public static string ColorSeriesTag;
    public static string ColorNegativeTag;
    public static string ColorAxisTag;
    public static string ColorMarkersTag;
    public static string ColorFirstTag;
    public static string ColorLastTag;
    public static string ColorHighTag;
    public static string ColorLowTag;
    public static string VerticalMaxAttribute;
    public static string VerticalMinAttribute;
    public static string LineWeightAttribute;
    public static string SparklineTypeAttribute;
    public static string DateAxisAttribute;
    public static string DisplayEmptyCellsAttribute;
    public static string MarkersAttribute;
    public static string HighAttribute;
    public static string LowAttribute;
    public static string FirstAttribute;
    public static string LastAttribute;
    public static string NegativeAttribute;
    public static string DisplayAxisAttribute;
    public static string DisplayHiddenAttribute;
    public static string VerticalMaxAxisTypeAttr;
    public static string VerticalMinAxisTypeAttr;
    public static string PlotRighttoLeftAttribute;
}
public class Syncfusion.XlsIO.Implementation.SparklineGroup : List`1<ISparklines> {
    private bool m_displayAxis;
    private bool m_displayHiddenRC;
    private bool m_plotRightToLeft;
    private bool m_showFirstPoint;
    private bool m_showLastPoint;
    private bool m_showLowPoint;
    private bool m_showHighPoint;
    private bool m_showNegativePoint;
    private bool m_showMarkers;
    private bool m_horizontalDateAxis;
    private Color m_axisColor;
    private Color m_firstPointColor;
    private Color m_highPointColor;
    private Color m_lastPointColor;
    private double m_lineWeight;
    private Color m_lowPointColor;
    private Color m_markersColor;
    private Color m_negativePointColor;
    private Color m_sparklineColor;
    private ISparklineVerticalAxis m_verticalMaximum;
    private ISparklineVerticalAxis m_verticalMinimum;
    private SparklineType m_sparklineType;
    private SparklineEmptyCells m_displayEmptyCellsAs;
    private IRange m_horizontalDateAxisRange;
    private WorkbookImpl m_book;
    public bool DisplayAxis { get; public set; }
    public bool DisplayHiddenRC { get; public set; }
    public bool PlotRightToLeft { get; public set; }
    public bool ShowFirstPoint { get; public set; }
    public bool ShowLastPoint { get; public set; }
    public bool ShowLowPoint { get; public set; }
    public bool ShowHighPoint { get; public set; }
    public bool ShowNegativePoint { get; public set; }
    public bool ShowMarkers { get; public set; }
    public ISparklineVerticalAxis VerticalAxisMaximum { get; public set; }
    public ISparklineVerticalAxis VerticalAxisMinimum { get; public set; }
    public SparklineType SparklineType { get; public set; }
    public bool HorizontalDateAxis { get; public set; }
    public SparklineEmptyCells DisplayEmptyCellsAs { get; public set; }
    public IRange HorizontalDateAxisRange { get; public set; }
    public Color AxisColor { get; public set; }
    public Color FirstPointColor { get; public set; }
    public Color HighPointColor { get; public set; }
    public Color LastPointColor { get; public set; }
    public double LineWeight { get; public set; }
    public Color LowPointColor { get; public set; }
    public Color MarkersColor { get; public set; }
    public Color NegativePointColor { get; public set; }
    public Color SparklineColor { get; public set; }
    public SparklineGroup(WorkbookImpl book);
    public sealed virtual bool get_DisplayAxis();
    public sealed virtual void set_DisplayAxis(bool value);
    public sealed virtual bool get_DisplayHiddenRC();
    public sealed virtual void set_DisplayHiddenRC(bool value);
    public sealed virtual bool get_PlotRightToLeft();
    public sealed virtual void set_PlotRightToLeft(bool value);
    public sealed virtual bool get_ShowFirstPoint();
    public sealed virtual void set_ShowFirstPoint(bool value);
    public sealed virtual bool get_ShowLastPoint();
    public sealed virtual void set_ShowLastPoint(bool value);
    public sealed virtual bool get_ShowLowPoint();
    public sealed virtual void set_ShowLowPoint(bool value);
    public sealed virtual bool get_ShowHighPoint();
    public sealed virtual void set_ShowHighPoint(bool value);
    public sealed virtual bool get_ShowNegativePoint();
    public sealed virtual void set_ShowNegativePoint(bool value);
    public sealed virtual bool get_ShowMarkers();
    public sealed virtual void set_ShowMarkers(bool value);
    public sealed virtual ISparklineVerticalAxis get_VerticalAxisMaximum();
    public sealed virtual void set_VerticalAxisMaximum(ISparklineVerticalAxis value);
    public sealed virtual ISparklineVerticalAxis get_VerticalAxisMinimum();
    public sealed virtual void set_VerticalAxisMinimum(ISparklineVerticalAxis value);
    public sealed virtual SparklineType get_SparklineType();
    public sealed virtual void set_SparklineType(SparklineType value);
    public sealed virtual bool get_HorizontalDateAxis();
    public sealed virtual void set_HorizontalDateAxis(bool value);
    public sealed virtual SparklineEmptyCells get_DisplayEmptyCellsAs();
    public sealed virtual void set_DisplayEmptyCellsAs(SparklineEmptyCells value);
    public sealed virtual IRange get_HorizontalDateAxisRange();
    public sealed virtual void set_HorizontalDateAxisRange(IRange value);
    public sealed virtual Color get_AxisColor();
    public sealed virtual void set_AxisColor(Color value);
    public sealed virtual Color get_FirstPointColor();
    public sealed virtual void set_FirstPointColor(Color value);
    public sealed virtual Color get_HighPointColor();
    public sealed virtual void set_HighPointColor(Color value);
    public sealed virtual Color get_LastPointColor();
    public sealed virtual void set_LastPointColor(Color value);
    public sealed virtual double get_LineWeight();
    public sealed virtual void set_LineWeight(double value);
    public sealed virtual Color get_LowPointColor();
    public sealed virtual void set_LowPointColor(Color value);
    public sealed virtual Color get_MarkersColor();
    public sealed virtual void set_MarkersColor(Color value);
    public sealed virtual Color get_NegativePointColor();
    public sealed virtual void set_NegativePointColor(Color value);
    public sealed virtual Color get_SparklineColor();
    public sealed virtual void set_SparklineColor(Color value);
    public sealed virtual ISparklines Add();
}
public class Syncfusion.XlsIO.Implementation.SparklineGroups : List`1<ISparklineGroup> {
    private WorkbookImpl m_book;
    public SparklineGroups(WorkbookImpl book);
    public sealed virtual void Clear(ISparklineGroup sparklineGroup);
    public sealed virtual ISparklineGroup Add();
}
public class Syncfusion.XlsIO.Implementation.Sparklines : List`1<ISparkline> {
    internal SparklineGroup ParentGroup;
    public sealed virtual Sparkline Add();
    public sealed virtual void Add(IRange dataRange, IRange referenceRange);
    public sealed virtual void RefreshRanges(IRange dataRange, IRange referenceRange);
    public sealed virtual void Add(IRange dataRange, IRange referenceRange, bool isVertical);
    public sealed virtual void RefreshRanges(IRange dataRange, IRange referenceRange, bool isVertical);
    public sealed virtual void Clear(Sparkline sparkline);
    internal void UpdateSparklines(IRange dataRange, IRange referenceRange, bool isVertical);
}
public class Syncfusion.XlsIO.Implementation.SparklineVerticalAxis : object {
    private double m_customValue;
    private SparklineVerticalAxisOptions m_verticalAxisOptions;
    public double CustomValue { get; public set; }
    public SparklineVerticalAxisOptions VerticalAxisOptions { get; public set; }
    public sealed virtual double get_CustomValue();
    public sealed virtual void set_CustomValue(double value);
    public sealed virtual SparklineVerticalAxisOptions get_VerticalAxisOptions();
    public sealed virtual void set_VerticalAxisOptions(SparklineVerticalAxisOptions value);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.SSTDictionary : object {
    private static int DEF_RESERVE_SPACE;
    public static int DEF_EMPTY_STRING_INDEX;
    private static int DEF_EMPTY_COUNT;
    private static int MaxCellLength;
    private Dictionary`2<object, int> m_hashKeyToIndex;
    internal List`1<object> m_arrStrings;
    private SortedList`2<int, int> m_arrFreeIndexes;
    private WorkbookImpl m_book;
    private SSTRecord m_sstOriginal;
    private bool m_bParsed;
    private TextWithFormat m_tempString;
    private List`1<int> newRefCount;
    private bool m_bUseHash;
    public int Item { get; }
    public TextWithFormat Item { get; }
    public Object[] Keys { get; }
    public int Count { get; }
    public WorkbookImpl Workbook { get; }
    [CLSCompliantAttribute("False")]
public SSTRecord OriginalSST { get; public set; }
    public bool UseHashForSearching { get; public set; }
    public int ActiveCount { get; }
    internal Dictionary`2<object, int> HashKeyToIndex { get; internal set; }
    public SSTDictionary(WorkbookImpl book);
    public int get_Item(TextWithFormat key);
    public TextWithFormat get_Item(int index);
    public Object[] get_Keys();
    public int get_Count();
    public WorkbookImpl get_Workbook();
    public SSTRecord get_OriginalSST();
    public void set_OriginalSST(SSTRecord value);
    public bool get_UseHashForSearching();
    public void set_UseHashForSearching(bool value);
    public int get_ActiveCount();
    internal Dictionary`2<object, int> get_HashKeyToIndex();
    internal void set_HashKeyToIndex(Dictionary`2<object, int> value);
    public object GetSSTContentByIndex(int index);
    public void Clear();
    public Dictionary`2<int, object> GetStringIndexes(string value);
    public void AddIncrease(int index);
    public int AddIncrease(object key);
    public int AddIncrease(object key, bool bIncrease);
    private void CheckLength(object key);
    public void RemoveDecrease(object key);
    public void RemoveDecrease(int iIndex);
    public void DecreaseOnly(int index);
    public bool Contains(object key);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public int GetStringCount(int index);
    public TextWithFormat GetStringByIndex(int index);
    public int AddCopy(int index, SSTDictionary sourceSST, Dictionary`2<int, int> dicFontIndexes);
    public List`1<int> StartWith(string strStart);
    public object Clone(WorkbookImpl book);
    public void UpdateRefCounts();
    public void RemoveUnnecessaryStrings();
    private void MoveStrings(int iStartIndex, int iEndIndex, int iDecreaseValue, List`1<int> arrNewIndexes);
    private void Defragment();
    private void SaveIntoRecords(OffsetArrayList records);
    private void SetRefCount(int index, int count);
    private int GetRefCount(int index);
    private int Find(TextWithFormat key);
    private int Find(object key);
    private void FillHash();
    public sealed virtual void Parse();
    internal void UpdateLabelSSTIndexes(Dictionary`2<int, int> dictUpdatedIndexes);
    internal int GetLabelSSTCount();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
internal class Syncfusion.XlsIO.Implementation.Storage : object {
    private Dictionary`2<string, Stream> m_streams;
    private List`1<Storage> m_storages;
    private string m_storageName;
    private int m_occurenceCount;
    private Guid m_guid;
    internal string StorageName { get; internal set; }
    internal Guid Guid { get; internal set; }
    internal Dictionary`2<string, Stream> Streams { get; }
    internal List`1<Storage> Storages { get; }
    internal int OccurrenceCount { get; internal set; }
    internal Storage(string storageName);
    internal string get_StorageName();
    internal void set_StorageName(string value);
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal Dictionary`2<string, Stream> get_Streams();
    internal List`1<Storage> get_Storages();
    internal int get_OccurrenceCount();
    internal void set_OccurrenceCount(int value);
    internal void ParseStorages(ICompoundStorage storage);
    internal void ParseStreams(ICompoundStorage storage);
    internal void WriteToStorage(ICompoundStorage storage);
    private Byte[] GetByteArray(Stream stream);
    internal string CompareStorage(Dictionary`2<string, Storage> oleObjectCollection);
    internal void UpdateGuid(CompoundFile cmpFile, int storageIndex, string storageName);
    internal bool CompareArray(Byte[] buffer1, Byte[] buffer2);
    internal Storage Clone();
    internal void Close();
}
public enum Syncfusion.XlsIO.Implementation.StrikeThroughStyle : Enum {
    public int value__;
    public static StrikeThroughStyle SingleOn;
    public static StrikeThroughStyle SingleOff;
    public static StrikeThroughStyle DoubleOn;
    public static StrikeThroughStyle DoubleOff;
}
public class Syncfusion.XlsIO.Implementation.StyleArrayWrapper : CommonObject {
    private List`1<IRange> m_arrRanges;
    private WorkbookImpl m_book;
    private IApplication m_application;
    public bool JustifyLast { get; public set; }
    public string NumberFormatLocal { get; public set; }
    public int XFormatIndex { get; }
    public bool HasBorder { get; }
    public IBorders Borders { get; }
    public bool BuiltIn { get; }
    public ExcelPattern FillPattern { get; public set; }
    public ExcelKnownColors FillBackground { get; public set; }
    public Color FillBackgroundRGB { get; public set; }
    public ExcelKnownColors FillForeground { get; public set; }
    public Color FillForegroundRGB { get; public set; }
    public IFont Font { get; }
    public bool FormulaHidden { get; public set; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public bool IncludeAlignment { get; public set; }
    public bool IncludeBorder { get; public set; }
    public bool IncludeFont { get; public set; }
    public bool IncludeNumberFormat { get; public set; }
    public bool IncludePatterns { get; public set; }
    public bool IncludeProtection { get; public set; }
    public int IndentLevel { get; public set; }
    public bool IsInitialized { get; }
    public bool Locked { get; public set; }
    public string Name { get; }
    public string NumberFormat { get; public set; }
    public int NumberFormatIndex { get; public set; }
    public INumberFormat NumberFormatSettings { get; }
    public int Rotation { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public bool WrapText { get; public set; }
    public ExcelReadingOrderType ReadingOrder { get; public set; }
    public bool IsFirstSymbolApostrophe { get; public set; }
    public ExcelKnownColors PatternColorIndex { get; public set; }
    public Color PatternColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public IInterior Interior { get; }
    public bool IsModified { get; }
    internal int BeginCallsCount { get; }
    internal List`1<IRange> Ranges { get; }
    public StyleArrayWrapper(IRange range);
    public StyleArrayWrapper(IApplication application, List`1<IRange> LstRange, IWorksheet worksheet);
    public sealed virtual bool get_JustifyLast();
    public sealed virtual void set_JustifyLast(bool value);
    public sealed virtual string get_NumberFormatLocal();
    public sealed virtual void set_NumberFormatLocal(string value);
    public sealed virtual int get_XFormatIndex();
    public sealed virtual bool get_HasBorder();
    public sealed virtual IBorders get_Borders();
    public sealed virtual bool get_BuiltIn();
    public sealed virtual ExcelPattern get_FillPattern();
    public sealed virtual void set_FillPattern(ExcelPattern value);
    public sealed virtual ExcelKnownColors get_FillBackground();
    public sealed virtual void set_FillBackground(ExcelKnownColors value);
    public sealed virtual Color get_FillBackgroundRGB();
    public sealed virtual void set_FillBackgroundRGB(Color value);
    public sealed virtual ExcelKnownColors get_FillForeground();
    public sealed virtual void set_FillForeground(ExcelKnownColors value);
    public sealed virtual Color get_FillForegroundRGB();
    public sealed virtual void set_FillForegroundRGB(Color value);
    public sealed virtual IFont get_Font();
    public sealed virtual bool get_FormulaHidden();
    public sealed virtual void set_FormulaHidden(bool value);
    public sealed virtual ExcelHAlign get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHAlign value);
    public sealed virtual bool get_IncludeAlignment();
    public sealed virtual void set_IncludeAlignment(bool value);
    public sealed virtual bool get_IncludeBorder();
    public sealed virtual void set_IncludeBorder(bool value);
    public sealed virtual bool get_IncludeFont();
    public sealed virtual void set_IncludeFont(bool value);
    public sealed virtual bool get_IncludeNumberFormat();
    public sealed virtual void set_IncludeNumberFormat(bool value);
    public sealed virtual bool get_IncludePatterns();
    public sealed virtual void set_IncludePatterns(bool value);
    public sealed virtual bool get_IncludeProtection();
    public sealed virtual void set_IncludeProtection(bool value);
    public sealed virtual int get_IndentLevel();
    public sealed virtual void set_IndentLevel(int value);
    public sealed virtual bool get_IsInitialized();
    public sealed virtual bool get_Locked();
    public sealed virtual void set_Locked(bool value);
    public sealed virtual string get_Name();
    public sealed virtual string get_NumberFormat();
    public sealed virtual void set_NumberFormat(string value);
    public sealed virtual int get_NumberFormatIndex();
    public sealed virtual void set_NumberFormatIndex(int value);
    public sealed virtual INumberFormat get_NumberFormatSettings();
    public sealed virtual int get_Rotation();
    public sealed virtual void set_Rotation(int value);
    public sealed virtual bool get_ShrinkToFit();
    public sealed virtual void set_ShrinkToFit(bool value);
    public sealed virtual ExcelVAlign get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVAlign value);
    public sealed virtual bool get_WrapText();
    public sealed virtual void set_WrapText(bool value);
    public sealed virtual ExcelReadingOrderType get_ReadingOrder();
    public sealed virtual void set_ReadingOrder(ExcelReadingOrderType value);
    public sealed virtual bool get_IsFirstSymbolApostrophe();
    public sealed virtual void set_IsFirstSymbolApostrophe(bool value);
    public sealed virtual ExcelKnownColors get_PatternColorIndex();
    public sealed virtual void set_PatternColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_PatternColor();
    public sealed virtual void set_PatternColor(Color value);
    public sealed virtual ExcelKnownColors get_ColorIndex();
    public sealed virtual void set_ColorIndex(ExcelKnownColors value);
    public sealed virtual Color get_Color();
    public sealed virtual void set_Color(Color value);
    public sealed virtual IInterior get_Interior();
    public sealed virtual bool get_IsModified();
    public virtual void BeginUpdate();
    public virtual void EndUpdate();
    private bool CanApplyStyle(IRange range);
    internal int get_BeginCallsCount();
    internal List`1<IRange> get_Ranges();
}
public class Syncfusion.XlsIO.Implementation.StyleImpl : ExtendedFormatWrapper {
    private static int Excel2007StylesStart;
    public static int DEF_LESS;
    public static int DEF_EQUAL;
    public static int DEF_LARGER;
    private static int RowLevelStyleIndex;
    private static int ColumnLevelStyleIndex;
    private StyleRecord m_style;
    private StyleExtRecord m_styleExt;
    private bool m_bNotCompareName;
    internal bool m_bisUsed;
    [CompilerGeneratedAttribute]
private EventHandler BeforeChange;
    [CompilerGeneratedAttribute]
private EventHandler AfterChange;
    public bool HasBorder { get; }
    private String[] DefaultStyleNames { get; }
    public bool BuiltIn { get; }
    public string Name { get; }
    internal string StyleNameCache { get; }
    public bool IsInitialized { get; }
    public int Index { get; }
    public bool NotCompareNames { get; public set; }
    [CLSCompliantAttribute("False")]
public StyleRecord Record { get; }
    public bool IsBuiltInCustomized { get; public set; }
    internal bool IsAsciiConverted { get; internal set; }
    internal StyleExtRecord StyleExt { get; internal set; }
    public StyleImpl(WorkbookImpl book);
    [CLSCompliantAttribute("False")]
public StyleImpl(WorkbookImpl book, StyleRecord style);
    public StyleImpl(WorkbookImpl book, string strName);
    public StyleImpl(WorkbookImpl book, string strName, StyleImpl baseStyle);
    public StyleImpl(WorkbookImpl book, string strName, StyleImpl baseStyle, bool bIsBuiltIn);
    public sealed virtual bool get_HasBorder();
    private void CopyDefaultStyleSettings(int index);
    private void CopyBordersSettings(BorderSettings borders, ExtendedFormatImpl m_xFormat);
    private void CopyFontSettings(FontSettings font, FontWrapper m_font);
    private String[] get_DefaultStyleNames();
    public sealed virtual bool get_BuiltIn();
    public sealed virtual string get_Name();
    internal string get_StyleNameCache();
    public sealed virtual bool get_IsInitialized();
    public int get_Index();
    public bool get_NotCompareNames();
    public void set_NotCompareNames(bool value);
    public StyleRecord get_Record();
    public bool get_IsBuiltInCustomized();
    public void set_IsBuiltInCustomized(bool value);
    internal bool get_IsAsciiConverted();
    internal void set_IsAsciiConverted(bool value);
    internal StyleExtRecord get_StyleExt();
    internal void set_StyleExt(StyleExtRecord value);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public void UpdateStyleRecord();
    public virtual void EndUpdate();
    public virtual void BeginUpdate();
    public virtual object Clone(object parent);
    private List`1<int> FindChildXFs();
    public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public void add_BeforeChange(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_BeforeChange(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_AfterChange(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AfterChange(EventHandler value);
    public sealed virtual int CompareTo(object obj);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.SubstituteFontEventArgs : EventArgs {
    private string m_originalFontName;
    private string m_alternateFontName;
    private Stream m_alternateFontStream;
    public string OriginalFontName { get; }
    public string AlternateFontName { get; public set; }
    public Stream AlternateFontStream { get; public set; }
    internal SubstituteFontEventArgs(string orginaleFontName, string alternateFontName);
    public string get_OriginalFontName();
    public string get_AlternateFontName();
    public void set_AlternateFontName(string value);
    public Stream get_AlternateFontStream();
    public void set_AlternateFontStream(Stream value);
}
public class Syncfusion.XlsIO.Implementation.SubstituteFontEventHandler : MulticastDelegate {
    public SubstituteFontEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SubstituteFontEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, SubstituteFontEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XlsIO.Implementation.SubTotalImpl : object {
    private bool m_isGrandTotalRow;
    private bool m_replace;
    private bool m_pageBreaks;
    private bool m_summaryBelowData;
    private bool m_groupRows;
    private ConsolidationFunction m_consolidationFunction;
    private Int32[] m_totalList;
    private int m_iRow;
    private int m_groupBy;
    private int m_columnCount;
    private RecordTable m_recordTable;
    private String[] m_columnName;
    private string m_total;
    private string m_grandTotal;
    private int m_height;
    private ExcelVersion m_version;
    private int m_blockSize;
    private WorksheetImpl m_worksheet;
    private HPageBreaksCollection m_hPageBreaks;
    private int m_firstRow;
    private int m_firstColumn;
    private int m_lastRow;
    private int m_lastColumn;
    private int m_noOfsubTotals;
    internal SubTotalImpl(WorksheetImpl worksheet);
    public void GetSheetFormulas(IWorksheet sheet);
    internal int CalculateSubTotal(int firstRow, int firstColumn, int lastRow, int lastColumn, int groupBy, ConsolidationFunction function, int noOfSubtotal, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData, int groupLength);
    private int SubTotalColumnIndex(RowStorage rowStorage);
    private bool HasSubTotal(int irow);
    private bool HasSubTotal(RowStorage rowStorage);
    public void UpdateRowValue(int row);
    private void CreateTotalBelowData(bool bUpdateNumberFormat);
    private void CreateTotalAboveData(bool bUpdateNumberFormat);
}
internal class Syncfusion.XlsIO.Implementation.Tables.ListObject : object {
    private string m_strName;
    private IRange m_location;
    private IRange m_localRange;
    private IList`1<IListObjectColumn> m_columns;
    private int m_iIndex;
    private TableBuiltInStyles m_builtInStyle;
    private string m_strDisplayName;
    private WorksheetImpl m_worksheet;
    private int m_iTotalsRowCount;
    private bool m_bRowStripes;
    private bool m_bColumnStripes;
    private bool m_bTotalsRowShown;
    private int m_iInsertRowShift;
    private string m_TableStyleName;
    private bool m_bFirstColumn;
    private bool m_bLastColumn;
    private bool m_bHeaderRow;
    private QueryTableImpl m_queryTable;
    private ExcelTableType m_tableType;
    private int m_iDataDxfId;
    private int m_iHeaderRowBorderDxfId;
    private int m_iHeaderRowDxfId;
    private int m_iTableBorderDxfId;
    private int m_iTotalsRowBorderDxfId;
    private int m_iTotalsRowDxfId;
    private bool m_isTableModified;
    private AutoFiltersCollection m_filters;
    private string m_alternativeText;
    private string m_summary;
    private List`1<ISlicer> m_tableSlicers;
    [CompilerGeneratedAttribute]
private RefreshConnectionEventHandler OnRefreshConnection;
    internal List`1<ISlicer> TableSlicers { get; }
    public string Name { get; public set; }
    public IRange Location { get; public set; }
    internal IRange LocalRange { get; internal set; }
    public IList`1<IListObjectColumn> Columns { get; }
    public int Index { get; internal set; }
    public TableBuiltInStyles BuiltInTableStyle { get; public set; }
    public IWorksheet Worksheet { get; }
    public string DisplayName { get; public set; }
    public int TotalsRowCount { get; internal set; }
    public bool TotalsRowShown { get; public set; }
    public QueryTableImpl QueryTable { get; public set; }
    public string AlternativeText { get; public set; }
    public string Summary { get; public set; }
    public bool ShowTableStyleRowStripes { get; public set; }
    public bool ShowTableStyleColumnStripes { get; public set; }
    public int InsertRowShift { get; public set; }
    public string TableStyleName { get; public set; }
    internal bool TableModified { get; internal set; }
    public bool ShowFirstColumn { get; public set; }
    public bool ShowLastColumn { get; public set; }
    public bool ShowHeaderRow { get; public set; }
    public bool ShowTotals { get; public set; }
    public ExcelTableType TableType { get; public set; }
    internal int DataAreaFormatId { get; internal set; }
    internal int HeaderRowBorderFormatId { get; internal set; }
    internal int HeaderRowFormatId { get; internal set; }
    internal int TableBorderFormatId { get; internal set; }
    internal int TotalsRowBorderFormatId { get; internal set; }
    internal int TotalsRowFormatId { get; internal set; }
    public IAutoFilters AutoFilters { get; }
    public bool ShowAutoFilter { get; public set; }
    public ListObject(string name, IRange location, int index);
    [CompilerGeneratedAttribute]
private void add_OnRefreshConnection(RefreshConnectionEventHandler value);
    [CompilerGeneratedAttribute]
private void remove_OnRefreshConnection(RefreshConnectionEventHandler value);
    private sealed virtual override void Syncfusion.XlsIO.IListObject.add_OnRefreshConnection(RefreshConnectionEventHandler value);
    private sealed virtual override void Syncfusion.XlsIO.IListObject.remove_OnRefreshConnection(RefreshConnectionEventHandler value);
    internal List`1<ISlicer> get_TableSlicers();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IRange get_Location();
    public sealed virtual void set_Location(IRange value);
    internal IRange get_LocalRange();
    internal void set_LocalRange(IRange value);
    public sealed virtual IList`1<IListObjectColumn> get_Columns();
    public sealed virtual int get_Index();
    internal void set_Index(int value);
    public sealed virtual TableBuiltInStyles get_BuiltInTableStyle();
    public sealed virtual void set_BuiltInTableStyle(TableBuiltInStyles value);
    public sealed virtual IWorksheet get_Worksheet();
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual int get_TotalsRowCount();
    internal void set_TotalsRowCount(int value);
    public bool get_TotalsRowShown();
    public void set_TotalsRowShown(bool value);
    public sealed virtual QueryTableImpl get_QueryTable();
    public void set_QueryTable(QueryTableImpl value);
    public sealed virtual string get_AlternativeText();
    public sealed virtual void set_AlternativeText(string value);
    public sealed virtual string get_Summary();
    public sealed virtual void set_Summary(string value);
    public sealed virtual bool get_ShowTableStyleRowStripes();
    public sealed virtual void set_ShowTableStyleRowStripes(bool value);
    public sealed virtual bool get_ShowTableStyleColumnStripes();
    public sealed virtual void set_ShowTableStyleColumnStripes(bool value);
    public int get_InsertRowShift();
    public void set_InsertRowShift(int value);
    public sealed virtual string get_TableStyleName();
    public sealed virtual void set_TableStyleName(string value);
    internal bool get_TableModified();
    internal void set_TableModified(bool value);
    public sealed virtual bool get_ShowFirstColumn();
    public sealed virtual void set_ShowFirstColumn(bool value);
    public sealed virtual bool get_ShowLastColumn();
    public sealed virtual void set_ShowLastColumn(bool value);
    public sealed virtual bool get_ShowHeaderRow();
    public sealed virtual void set_ShowHeaderRow(bool value);
    public sealed virtual bool get_ShowTotals();
    public sealed virtual void set_ShowTotals(bool value);
    public sealed virtual ExcelTableType get_TableType();
    public void set_TableType(ExcelTableType value);
    internal int get_DataAreaFormatId();
    internal void set_DataAreaFormatId(int value);
    internal int get_HeaderRowBorderFormatId();
    internal void set_HeaderRowBorderFormatId(int value);
    internal int get_HeaderRowFormatId();
    internal void set_HeaderRowFormatId(int value);
    internal int get_TableBorderFormatId();
    internal void set_TableBorderFormatId(int value);
    internal int get_TotalsRowBorderFormatId();
    internal void set_TotalsRowBorderFormatId(int value);
    internal int get_TotalsRowFormatId();
    internal void set_TotalsRowFormatId(int value);
    public sealed virtual IAutoFilters get_AutoFilters();
    public sealed virtual bool get_ShowAutoFilter();
    public sealed virtual void set_ShowAutoFilter(bool value);
    public sealed virtual void Refresh();
    private void GetConnectionDetails(ExcelConnectionsType connectionType, bool isRefresh, String& query, String& connectString);
    private string UpdateQuery(ExternalConnection connection, string query, bool isRefresh);
    internal ListObject Clone(WorksheetImpl worksheet, Dictionary`2<string, string> hashWorksheetNames);
    private bool Checkconn_name(IConnections connections, string Name);
    private string GenerateUniqueName(WorkbookImpl book, string proposedName);
    internal void SplitName(string proposedName, String& stringPart, Int32& numberPart);
    internal bool ListObjectNameExist(WorkbookImpl book, string name);
    private bool checkCommandText(string Query);
    private void UpdateSqlProperties(DataTable Table);
    private void FillTableData(DataTable Table);
    internal void Dispose();
    private void AddToNamedRange(int startRow, int startColumn, int endRow, int endColumn, string name);
    internal void checkAndCloneNameRange(string name, WorkbookImpl book);
    internal void UpdateColumnNames(List`1<string> columnNames);
    private void CheckValidName(string name);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.Tables.ListObjectCollection : List`1<IListObject> {
    private int sheetindex;
    public IListObject Item { get; }
    public ListObjectCollection(WorksheetImpl sheet);
    public sealed virtual IListObject Create(string name, IRange range);
    internal static void CheckOverLab(IRange range);
    private IRange CheckRange(IRange range);
    internal ListObjectCollection Clone(WorksheetImpl worksheet, Dictionary`2<string, string> hashWorksheetNames);
    public IListObject get_Item(string name);
    public sealed virtual IListObject AddEx(ExcelListObjectSourceType type, IConnection connection, IRange Destinaion);
    public void AddDefineName(IListObject list);
    internal void Dispose();
    public sealed virtual bool Remove(IListObject listObject);
    public sealed virtual void RemoveAt(int index);
}
internal class Syncfusion.XlsIO.Implementation.Tables.ListObjectColumn : object {
    private static string SubTotalFormat;
    private static string CalcualtedFormulaRangeFormat;
    private static RegexOptions DEF_REGEX;
    private string m_strName;
    private int m_iIndex;
    private ExcelTotalsCalculation m_totals;
    private string m_strTotalsLabel;
    private ListObject m_parentTable;
    private int m_iId;
    private Ptg[] m_calculatedFormulaPtgs;
    private int m_queryTableFieldId;
    private bool m_IsColumnNameModified;
    internal bool m_IsArrayFormula;
    private int m_mapId;
    private string m_xPath;
    private string m_uniqueName;
    private string m_dataType;
    internal bool IsColumnNameModified { get; internal set; }
    public string Name { get; public set; }
    public int Index { get; }
    public ExcelTotalsCalculation TotalsCalculation { get; public set; }
    public string TotalsRowLabel { get; public set; }
    internal IRange TotalCell { get; }
    internal IRange HeaderCell { get; }
    public int Id { get; public set; }
    public string CalculatedFormula { get; public set; }
    internal Ptg[] CalculatedFormulaPtgs { get; internal set; }
    private WorkbookImpl Workbook { get; }
    public int QueryTableFieldId { get; public set; }
    internal int MapId { get; internal set; }
    internal string XPath { get; internal set; }
    internal string XmlDataType { get; internal set; }
    internal string UniqueName { get; internal set; }
    internal bool IsArrayFormula { get; internal set; }
    public ListObjectColumn(string name, int index, ListObject parentTable, int id);
    internal bool get_IsColumnNameModified();
    internal void set_IsColumnNameModified(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual int get_Index();
    public sealed virtual ExcelTotalsCalculation get_TotalsCalculation();
    public sealed virtual void set_TotalsCalculation(ExcelTotalsCalculation value);
    public sealed virtual string get_TotalsRowLabel();
    public sealed virtual void set_TotalsRowLabel(string value);
    internal IRange get_TotalCell();
    internal IRange get_HeaderCell();
    public sealed virtual int get_Id();
    public void set_Id(int value);
    public sealed virtual string get_CalculatedFormula();
    public sealed virtual void set_CalculatedFormula(string value);
    internal Ptg[] get_CalculatedFormulaPtgs();
    internal void set_CalculatedFormulaPtgs(Ptg[] value);
    private WorkbookImpl get_Workbook();
    public sealed virtual int get_QueryTableFieldId();
    public void set_QueryTableFieldId(int value);
    internal int get_MapId();
    internal void set_MapId(int value);
    internal string get_XPath();
    internal void set_XPath(string value);
    internal string get_XmlDataType();
    internal void set_XmlDataType(string value);
    internal string get_UniqueName();
    internal void set_UniqueName(string value);
    internal bool get_IsArrayFormula();
    internal void set_IsArrayFormula(bool value);
    private int GetColumnIndex(IRange range);
    internal void SetName(string value);
    internal void SetTotalsCalculation(ExcelTotalsCalculation totalsCalculation);
    internal void SetTotalsLabel(string totalsLabel);
    internal void SetCalculatedFormula(string calculatedFormula);
    private void UpdateTableFormulaCells(string oldValue, string newValue);
    public ListObjectColumn Clone(ListObject parentTable);
    private void AddToNamedRange();
}
internal enum Syncfusion.XlsIO.Implementation.TableSpan : Enum {
    public byte value__;
    public static TableSpan Default;
    public static TableSpan Row;
    public static TableSpan Column;
}
internal class Syncfusion.XlsIO.Implementation.TableStyle : object {
    private string m_tableStyleName;
    private TableStyleElements m_tableStyleElements;
    private TableStyles m_tableStyles;
    public string Name { get; public set; }
    public ITableStyleElements TableStyleElements { get; }
    internal TableStyles TableStyles { get; internal set; }
    public TableStyle(string tableStyleName, TableStyles tableStyles);
    public TableStyle(TableStyles tableStyles);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public sealed virtual ITableStyleElements get_TableStyleElements();
    internal TableStyles get_TableStyles();
    internal void set_TableStyles(TableStyles value);
    public virtual bool Equals(object obj);
    internal bool Equals(string tableStyleName);
    public sealed virtual void Delete();
    public sealed virtual ITableStyle Duplicate();
    public sealed virtual ITableStyle Duplicate(string tableStyleName);
    public sealed virtual ITableStyle Clone();
    internal ITableStyle Clone(TableStyles tableStyles);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.Implementation.TableStyleElement : object {
    internal static string WholeTable;
    internal static string HeaderRow;
    internal static string TotalRow;
    internal static string FirstColumn;
    internal static string LastColumn;
    internal static string FirstRowStrip;
    internal static string SecondRowStripe;
    internal static string FirstColumnStripe;
    internal static string SecondColumnStripe;
    internal static string FirstHeaderCell;
    internal static string LastHeaderCell;
    internal static string FirstTotalCell;
    internal static string LastTotalCell;
    private int m_stripeSize;
    private ExcelTableStyleElementType m_tableStyleElementType;
    private TableStyleElements m_tableStyleElements;
    private ColorObject m_backColor;
    private ExcelPattern m_pattern;
    private ColorObject m_color;
    private ColorObject m_fontColor;
    private bool m_bold;
    private bool m_italic;
    private ExcelUnderline m_underline;
    private bool m_strikeThrough;
    private ColorObject m_topBorderColor;
    private ExcelLineStyle m_topBorderLineStyle;
    private ColorObject m_bottomBorderColor;
    private ExcelLineStyle m_bottomBorderLineStyle;
    private ColorObject m_rightBorderColor;
    private ExcelLineStyle m_rightBorderLineStyle;
    private ColorObject m_leftBorderColor;
    private ExcelLineStyle m_leftBorderLineStyle;
    private bool m_isTopBorderModified;
    private bool m_isBottomBorderModified;
    private bool m_isLeftBorderModified;
    private bool m_isRightBorderModified;
    private bool m_isBorderFormatPresent;
    private bool m_isFontColorPresent;
    private bool m_isFontFormatPresent;
    private bool m_isPatternBackColorModified;
    private bool m_isPatternFormatPresent;
    private bool m_isPatternColorModified;
    private string m_tableStyleElementName;
    private bool m_isVerticalBorderModified;
    private bool m_isHorizontalBorderModified;
    private ColorObject m_verticalBorderColor;
    private ColorObject m_horizontalBorderColor;
    private ExcelLineStyle m_verticalBorderLineStyle;
    private ExcelLineStyle m_horizontalBorderLineStyle;
    public string TableStyleElementName { get; public set; }
    public int StripeSize { get; public set; }
    public TableStyleElements TableStyleElements { get; public set; }
    public ExcelTableStyleElementType TableStyleElementType { get; public set; }
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern PatternStyle { get; public set; }
    public Color PatternColorRGB { get; public set; }
    public ExcelKnownColors PatternColor { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool StrikeThrough { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors VerticalBorderColor { get; public set; }
    public Color VerticalBorderColorRGB { get; public set; }
    public ExcelLineStyle VerticalBorderStyle { get; public set; }
    public ExcelKnownColors HorizontalBorderColor { get; public set; }
    public Color HorizontalBorderColorRGB { get; public set; }
    public ExcelLineStyle HorizontalBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    internal bool IsTopBorderModified { get; internal set; }
    internal bool IsBottomBorderModified { get; internal set; }
    internal bool IsRightBorderModified { get; internal set; }
    internal bool IsLeftBorderModified { get; internal set; }
    internal bool IsFontFormatPresent { get; internal set; }
    internal bool IsPatternColorModified { get; internal set; }
    internal bool IsPatternFormatPresent { get; internal set; }
    internal bool IsBackgroundColorPresent { get; internal set; }
    internal bool IsBorderFormatPresent { get; internal set; }
    internal bool IsFontColorPresent { get; internal set; }
    internal ColorObject FontColorObject { get; }
    internal ColorObject ColorObject { get; }
    internal ColorObject BackColorObject { get; }
    internal ColorObject TopBorderColorObject { get; }
    internal ColorObject BottomBorderColorObject { get; }
    internal ColorObject HorizontalBorderColorObject { get; internal set; }
    internal ColorObject VerticalBorderColorObject { get; internal set; }
    internal ColorObject RightBorderColorObject { get; }
    internal ColorObject LeftBorderColorObject { get; }
    internal bool IsVerticalBorderModified { get; internal set; }
    internal bool IsHorizontalBorderModified { get; internal set; }
    public TableStyleElement(ExcelTableStyleElementType tableStyleElementType, TableStyleElements tableStyleElements);
    public TableStyleElement(string tableStyleElementName, TableStyleElements tableStyleElements);
    public TableStyleElement(TableStyleElements tableStyleElements);
    public string get_TableStyleElementName();
    public void set_TableStyleElementName(string value);
    public sealed virtual int get_StripeSize();
    public sealed virtual void set_StripeSize(int value);
    public TableStyleElements get_TableStyleElements();
    public void set_TableStyleElements(TableStyleElements value);
    public sealed virtual ExcelTableStyleElementType get_TableStyleElementType();
    public void set_TableStyleElementType(ExcelTableStyleElementType value);
    public sealed virtual ExcelKnownColors get_BackColor();
    public sealed virtual void set_BackColor(ExcelKnownColors value);
    public sealed virtual Color get_BackColorRGB();
    public sealed virtual void set_BackColorRGB(Color value);
    public sealed virtual ExcelPattern get_PatternStyle();
    public sealed virtual void set_PatternStyle(ExcelPattern value);
    public sealed virtual Color get_PatternColorRGB();
    public sealed virtual void set_PatternColorRGB(Color value);
    public sealed virtual ExcelKnownColors get_PatternColor();
    public sealed virtual void set_PatternColor(ExcelKnownColors value);
    public sealed virtual ExcelKnownColors get_FontColor();
    public sealed virtual void set_FontColor(ExcelKnownColors value);
    public sealed virtual Color get_FontColorRGB();
    public sealed virtual void set_FontColorRGB(Color value);
    public sealed virtual bool get_Bold();
    public sealed virtual void set_Bold(bool value);
    public sealed virtual bool get_Italic();
    public sealed virtual void set_Italic(bool value);
    public sealed virtual ExcelUnderline get_Underline();
    public sealed virtual void set_Underline(ExcelUnderline value);
    public sealed virtual bool get_StrikeThrough();
    public sealed virtual void set_StrikeThrough(bool value);
    public sealed virtual ExcelKnownColors get_TopBorderColor();
    public sealed virtual void set_TopBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_TopBorderColorRGB();
    public sealed virtual void set_TopBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_TopBorderStyle();
    public sealed virtual void set_TopBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_VerticalBorderColor();
    public sealed virtual void set_VerticalBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_VerticalBorderColorRGB();
    public sealed virtual void set_VerticalBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_VerticalBorderStyle();
    public sealed virtual void set_VerticalBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_HorizontalBorderColor();
    public sealed virtual void set_HorizontalBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_HorizontalBorderColorRGB();
    public sealed virtual void set_HorizontalBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_HorizontalBorderStyle();
    public sealed virtual void set_HorizontalBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_BottomBorderColor();
    public sealed virtual void set_BottomBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_BottomBorderColorRGB();
    public sealed virtual void set_BottomBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_BottomBorderStyle();
    public sealed virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_RightBorderColor();
    public sealed virtual void set_RightBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_RightBorderColorRGB();
    public sealed virtual void set_RightBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_RightBorderStyle();
    public sealed virtual void set_RightBorderStyle(ExcelLineStyle value);
    public sealed virtual ExcelKnownColors get_LeftBorderColor();
    public sealed virtual void set_LeftBorderColor(ExcelKnownColors value);
    public sealed virtual Color get_LeftBorderColorRGB();
    public sealed virtual void set_LeftBorderColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LeftBorderStyle();
    public sealed virtual void set_LeftBorderStyle(ExcelLineStyle value);
    internal bool get_IsTopBorderModified();
    internal void set_IsTopBorderModified(bool value);
    internal bool get_IsBottomBorderModified();
    internal void set_IsBottomBorderModified(bool value);
    internal bool get_IsRightBorderModified();
    internal void set_IsRightBorderModified(bool value);
    internal bool get_IsLeftBorderModified();
    internal void set_IsLeftBorderModified(bool value);
    internal bool get_IsFontFormatPresent();
    internal void set_IsFontFormatPresent(bool value);
    internal bool get_IsPatternColorModified();
    internal void set_IsPatternColorModified(bool value);
    internal bool get_IsPatternFormatPresent();
    internal void set_IsPatternFormatPresent(bool value);
    internal bool get_IsBackgroundColorPresent();
    internal void set_IsBackgroundColorPresent(bool value);
    internal bool get_IsBorderFormatPresent();
    internal void set_IsBorderFormatPresent(bool value);
    internal bool get_IsFontColorPresent();
    internal void set_IsFontColorPresent(bool value);
    internal ColorObject get_FontColorObject();
    internal ColorObject get_ColorObject();
    internal ColorObject get_BackColorObject();
    internal ColorObject get_TopBorderColorObject();
    internal ColorObject get_BottomBorderColorObject();
    internal ColorObject get_HorizontalBorderColorObject();
    internal void set_HorizontalBorderColorObject(ColorObject value);
    internal ColorObject get_VerticalBorderColorObject();
    internal void set_VerticalBorderColorObject(ColorObject value);
    internal ColorObject get_RightBorderColorObject();
    internal ColorObject get_LeftBorderColorObject();
    internal bool get_IsVerticalBorderModified();
    internal void set_IsVerticalBorderModified(bool value);
    internal bool get_IsHorizontalBorderModified();
    internal void set_IsHorizontalBorderModified(bool value);
    public sealed virtual void Clear();
    internal object Clone(TableStyleElements tableStyleElements);
    public sealed virtual ITableStyleElement Clone();
    internal void Dispose();
    public virtual bool Equals(object obj);
    internal bool Equals(ExcelTableStyleElementType tableStyleElementType);
    private void InitializeColors();
    internal void UpdateTopBorderFormat();
    internal void UpdateBottomBorderFormat();
    internal void UpdateBackColor();
    internal void UpdateColor();
    internal void UpdateLeftBorderFormat();
    internal void UpdateRightBorderFormat();
    internal void UpdateFontColor();
    internal void UpdateBorderStyle();
    internal void UpdateFontFormat();
    internal void UpdatePatternFormat();
    internal void UpdateVerticalBorderFormat();
    internal void UpdateHorizontalBorderFormat();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.TableStyleElements : CollectionBaseEx`1<ITableStyleElement> {
    private TableStyle m_tableStyle;
    internal TableStyle TableStyle { get; }
    public int Count { get; }
    public ITableStyleElement Item { get; }
    public ITableStyleElement Item { get; }
    public TableStyleElements(TableStyle tableStyle, IApplication application);
    internal TableStyle get_TableStyle();
    public sealed virtual int get_Count();
    public sealed virtual ITableStyleElement get_Item(ExcelTableStyleElementType tableStyleElementType);
    public sealed virtual ITableStyleElement get_Item(int index);
    public sealed virtual ITableStyleElement Add(ExcelTableStyleElementType tableStyleElementType);
    public virtual bool Equals(object obj);
    public sealed virtual ITableStyleElement Add(ITableStyleElement tableStyleElement);
    public sealed virtual void Remove(ITableStyleElement tableStyleElement);
    public sealed virtual void RemoveAt(int index);
    internal object Clone(TableStyle tableStyle);
    internal void Dispose();
    public sealed virtual bool Contains(ITableStyleElement tableStyleElement);
    public sealed virtual bool Contains(ExcelTableStyleElementType tableStyleElementType);
    internal void Add(string tableStyleElementName);
}
internal class Syncfusion.XlsIO.Implementation.TableStyleRenderer : object {
    private Dictionary`2<long, Dictionary`2<ExcelBordersIndex, Color>> _borderColorList;
    private Dictionary`2<TableBuiltInStyles, Color> _borderList;
    private List`1<TableBuiltInStyles> _colorFonts;
    private List`1<TableBuiltInStyles> _darkStyles;
    private Dictionary`2<TableBuiltInStyles, Color> _doubleBorderList;
    private Dictionary`2<IRange, Color> _fontColorCollections;
    private List`1<TableBuiltInStyles> _lightStyleBorder;
    private IListObjects _listObjects;
    private List`1<TableBuiltInStyles> _mediumStyleBorder;
    private List`1<TableBuiltInStyles> _mediumStyleWithBorder;
    private List`1<TableBuiltInStyles> _mediumStyleWithoutBorder;
    private Dictionary`2<TableBuiltInStyles, Color> _topSolidList;
    private TableBuiltInStyles _builtInStyle;
    private bool _columnStripes;
    private bool _firstColumn;
    private Color _headerColor;
    private bool _headerRow;
    private bool _lastColumn;
    private bool _rowStripes;
    public TableStyleRenderer(IListObjects sheetListObjects);
    internal Dictionary`2<long, Dictionary`2<ExcelBordersIndex, Color>> ApplyStyles(IWorksheet sheet, Dictionary`2& fontColorCollection);
    private void InitializeLightStyle();
    private void InitializeBorders(bool isTabelStyleNewVersion);
    private void InitializeColorFonts();
    private void InitializeDoubleBorders(bool isTabelStyleNewVersion);
    private void InitializeTopSolid(bool isTabelStyleNewVersion);
    private void InitializeColumnSettings();
    private void InitializeMediumStyle();
    private void DrawLocationAndCustomTableStyle(IWorksheet sheet, TableStyleElement tableStyleElement, IRange objectLocation, bool showTotals, int firstColumnStripeSize, int secondColumnStripeSize, int firstRowStripeSize, int secondRowStripeSize);
    private void WholeTableStyle(IWorksheet sheet, IRange range, TableStyleElement tableStyleElement);
    private void TableStyleElementStyle(IWorksheet sheet, string elementRange, TableStyleElement tableStyleElement);
    private void FirstColumnStripeStyle(IWorksheet sheet, IRange headerRange, TableStyleElement tableStyleElement, bool showTotals, int secondColumnStripeSize);
    private void SecondColumnStripeStyle(IWorksheet sheet, IRange headerRange, TableStyleElement tableStyleElement, bool showTotals, int firstColumnStripeSize);
    private void FirstRowStripeStyle(IWorksheet sheet, IRange headerRange, TableStyleElement tableStyleElement, bool showTotals, int secondRowStripeSize);
    private void SecondRowStripeStyle(IWorksheet sheet, IRange headerRange, TableStyleElement tableStyleElement, bool showTotals, int firstRowStripeSize);
    private void DrawLocationAndStyle(IWorksheet sheet, TableBuiltInStyles listObjectBuiltInStyle, IRange objectLocation, bool showTotals);
    private void TotalStyle(IWorksheet sheet, IRange objectLocation, BorderStyle borderStyle, Color borderColor, bool entireRow, Color backgroundColor, SolidStyle solidStyle, bool showTotals, Color fontColor, bool boldFont);
    private void ApplyFontColor(Color fontColor, IRange range);
    private void ApplyBorderFormatAndLineStyle(IRange range, TableStyleElement tableStyleElement);
    private void ApplyWholeTableStyleBorder(IWorksheet sheet, IRange range, TableStyleElement tableStyleElement);
    private void ApplyFontFormatAndColor(IRange range, TableStyleElement tableStyleElement);
    private void ApplyBGColorAndFormat(IRange range, TableStyleElement tableStyleElement);
    private void HeaderStyle(IWorksheet sheet, string headerRange, BorderStyle headerBorderStyle, Color borderColor, bool entireRow, Color backgroundColor, SolidStyle solidLineStyle, Color fontColor);
    private void ContentStyle(IWorksheet sheet, IRange headerRange, BorderStyle contentBorderStyle, Color borderColor, bool entireRow, Color backgroundFirstColor, Color backgroundSecondColor, SolidStyle solidLineStyle, Color fontColor, bool showTotals);
    private void ApplyBGColor(Color backgroundColor, IRange entireRange);
    private void ApplyBorder(IWorksheet sheet, IRange borderRange, SolidStyle solidStyle, BorderStyle borderStyle, Color borderColor, bool entireRow);
    private void ApplySingleBorder(IRange borderRange, ExcelBordersIndex borderIndex, SolidStyle solidStyle, SolidStyle firstStyle, SolidStyle secondStyle, Color borderColor);
    private void ApplyFirstLastColumnBorder(IWorksheet sheet, IRange borderRange, SolidStyle solidStyle, BorderStyle borderStyle, Color borderColor, bool entireRow);
    private void ApplyFirstLastColumnTopBorder(IWorksheet sheet, IRange borderRange, SolidStyle solidStyle, Color borderColor);
    private IRange ApplyFirstLastColumnStyle(IWorksheet sheet, IRange contentRange, Color fontColor, Color backgroundFirstColor, bool showTotals);
    private bool CheckStyle();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.TableStyles : CollectionBaseEx`1<ITableStyle> {
    private WorkbookImpl m_workbook;
    private string m_defaultTableStyle;
    private string m_defaultPivotTableStyle;
    public ITableStyle Item { get; }
    public ITableStyle Item { get; }
    internal WorkbookImpl Workbook { get; }
    internal string DefaultTablesStyle { get; internal set; }
    internal string DefaultPivotTableStyle { get; internal set; }
    public int Count { get; }
    public TableStyles(WorkbookImpl workbook, IApplication application);
    public sealed virtual ITableStyle get_Item(string tableStyleName);
    public sealed virtual ITableStyle get_Item(int index);
    internal WorkbookImpl get_Workbook();
    internal string get_DefaultTablesStyle();
    internal void set_DefaultTablesStyle(string value);
    internal string get_DefaultPivotTableStyle();
    internal void set_DefaultPivotTableStyle(string value);
    public sealed virtual int get_Count();
    public sealed virtual ITableStyle Add(string tableStyleName);
    public sealed virtual void Remove(ITableStyle tableStyle);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ITableStyle Add(ITableStyle tableStyle);
    public sealed virtual bool Contains(ITableStyle tableStyle);
    public sealed virtual bool Contains(string tableStyleName);
    internal void Dispose();
    internal TableStyles Clone(WorkbookImpl workbook, IApplication application);
}
[TemplateMarkerAttribute]
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.CopyRangeArgument : JumpArgument {
    private static string DEF_COPYRANGE;
    private static ExcelCopyRangeOptions DEF_DEFAULT_COPY_OPTIONS;
    private Rectangle m_copyRangeRect;
    private int m_iSecondRow;
    private int m_iSecondColumn;
    private bool m_bSecondRowRelative;
    private bool m_bSecondColumnRelative;
    public int Priority { get; }
    public bool IsAllowMultiple { get; }
    public virtual MarkerArgument TryParse(string strArgument);
    public virtual void ApplyArgument(IWorksheet sheet, Point pOldPosition, Int32& iRow, Int32& iColumn, IList`1<long> arrMarkerCells, MarkerOptionsImpl options, int count);
    public virtual int get_Priority();
    public virtual bool get_IsAllowMultiple();
    internal void TryAndApplyCopy(IWorksheet sheet, MarkerOptionsImpl options, Point startPoint);
}
[TemplateMarkerAttribute]
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.DirectionArgument : MarkerArgument {
    private static SortedList`2<string, MarkerDirection> s_lstStringToDirection;
    private MarkerDirection m_direction;
    public bool IsPreparing { get; }
    private static DirectionArgument();
    public virtual MarkerArgument TryParse(string strArgument);
    public virtual void PrepareOptions(MarkerOptionsImpl options);
    public virtual bool get_IsPreparing();
    internal string TryGetDirection(string argument);
}
[TemplateMarkerAttribute]
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.FitToCellArgument : MarkerArgument {
    private static int DEF_PRIORITY;
    private static string DEF_MARKER_VALUE;
    private bool m_isFitToCell;
    public int Priority { get; }
    public bool IsApplyable { get; }
    public bool IsFitToCell { get; }
    public virtual int get_Priority();
    public virtual bool get_IsApplyable();
    public bool get_IsFitToCell();
    public virtual MarkerArgument TryParse(string strArgument);
}
public enum Syncfusion.XlsIO.Implementation.TemplateMarkers.ImageHorizontalPosition : Enum {
    public int value__;
    public static ImageHorizontalPosition Left;
    public static ImageHorizontalPosition Center;
    public static ImageHorizontalPosition Right;
}
[TemplateMarkerAttribute]
internal class Syncfusion.XlsIO.Implementation.TemplateMarkers.ImagePositionArgument : MarkerArgument {
    private static string DEF_IMAGE_POSITION_STRING;
    private static ImageVerticalPosition DEF_IMAGE_VPOSITION;
    private static ImageHorizontalPosition DEF_IMAGE_HPOSITION;
    private static int DEF_PRIORITY;
    private ImageHorizontalPosition m_hPosition;
    private ImageVerticalPosition m_vPosition;
    private bool m_isVPositionApplied;
    private bool m_isHPositionApplied;
    public ImageVerticalPosition VPosition { get; }
    public ImageHorizontalPosition HPosition { get; }
    internal bool IsVPositionApplied { get; internal set; }
    internal bool IsHPositionApplied { get; internal set; }
    public bool IsApplyable { get; }
    public int Priority { get; }
    public ImageVerticalPosition get_VPosition();
    public ImageHorizontalPosition get_HPosition();
    internal bool get_IsVPositionApplied();
    internal void set_IsVPositionApplied(bool value);
    internal bool get_IsHPositionApplied();
    internal void set_IsHPositionApplied(bool value);
    public virtual bool get_IsApplyable();
    public virtual int get_Priority();
    public virtual MarkerArgument TryParse(string strArgument);
    private int GetPositionFromEnum(object enumObject, string value);
}
[TemplateMarkerAttribute]
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.ImageSizeArgument : MarkerArgument {
    private static string DEF_IMAGE_SIZE_STRING;
    private static int DEF_IMAGE_WIDTH;
    private static int DEF_IMAGE_HEIGHT;
    private static int DEF_PRIORITY;
    private int m_imageWidth;
    private int m_imageHeight;
    private bool m_isAutoWidth;
    private bool m_isAutoHeight;
    public int Width { get; }
    public int Height { get; }
    public bool IsApplyable { get; }
    public int Priority { get; }
    internal bool IsAutoWidth { get; }
    internal bool IsAutoHeight { get; }
    public int get_Width();
    public int get_Height();
    public virtual bool get_IsApplyable();
    public virtual int get_Priority();
    internal bool get_IsAutoWidth();
    internal bool get_IsAutoHeight();
    public virtual MarkerArgument TryParse(string strArgument);
}
public enum Syncfusion.XlsIO.Implementation.TemplateMarkers.ImageVerticalPosition : Enum {
    public int value__;
    public static ImageVerticalPosition Top;
    public static ImageVerticalPosition Middle;
    public static ImageVerticalPosition Bottom;
}
[TemplateMarkerAttribute]
internal class Syncfusion.XlsIO.Implementation.TemplateMarkers.ImportGroupOptionsArgument : MarkerArgument {
    private static int DEF_PRIORITY;
    private static string DEF_EXPAND_GROUP_MARKER_VALUE;
    private static string DEF_COLLAPSE_GROUP_MARKER_VALUE;
    private bool m_isCollapse;
    private bool m_isExpand;
    public int Priority { get; }
    public bool IsApplyable { get; }
    public bool IsCollapse { get; }
    public bool IsExpand { get; }
    public virtual int get_Priority();
    public virtual bool get_IsApplyable();
    public bool get_IsCollapse();
    public bool get_IsExpand();
    public virtual MarkerArgument TryParse(string strArgument);
}
[TemplateMarkerAttribute]
internal class Syncfusion.XlsIO.Implementation.TemplateMarkers.ImportOptionsArgument : MarkerArgument {
    private static int DEF_PRIORITY;
    private static string DEF_DEFAULT_MARKER_VALUE;
    private static string DEF_MERGE_MARKER_VALUE;
    private static string DEF_REPEAT_MARKER_VALUE;
    private static string DEF_MERGE_MARKER_VALUE_WITH_PRESERVESTYLE;
    private bool m_isMerge;
    private bool m_isRepeat;
    private bool m_isPreserveStyle;
    public int Priority { get; }
    public bool IsApplyable { get; }
    public bool IsMerge { get; }
    public bool IsRepeat { get; }
    internal bool IsPreserveStyle { get; }
    public virtual int get_Priority();
    public virtual bool get_IsApplyable();
    public bool get_IsMerge();
    public bool get_IsRepeat();
    internal bool get_IsPreserveStyle();
    public virtual MarkerArgument TryParse(string strArgument);
}
internal class Syncfusion.XlsIO.Implementation.TemplateMarkers.InsertCopiedCellsInfo : ValueType {
    private bool isStyleCopied;
    private int insertedCellsCount;
    internal bool IsStyleCopied { get; }
    internal int InsertedCellsCount { get; }
    internal InsertCopiedCellsInfo(bool isStyleCopied, int cellsCount);
    internal bool get_IsStyleCopied();
    internal int get_InsertedCellsCount();
}
[TemplateMarkerAttribute]
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.JumpArgument : MarkerArgument {
    protected static string DEF_ROW_INDEX_GROUP;
    protected static string DEF_COLUMN_INDEX_GROUP;
    protected static string DEF_COPY_STYLES_GROUP;
    private static string DEF_JUMP;
    protected static string DEF_COPY_STYLES;
    protected static int DEF_ROW_RELATIVE_GROUP;
    protected static int DEF_COLUMN_RELATIVE_GROUP;
    protected static int DEF_PRIORITY;
    protected static string DEF_R1C1_CELL_REGEX;
    private static Regex s_cellRegex;
    protected int m_iRow;
    protected int m_iColumn;
    protected bool m_bRowRelative;
    protected bool m_bColumnRelative;
    protected bool m_bCopyStyles;
    public int Priority { get; }
    public bool IsApplyable { get; }
    public JumpArgument(int iRow, int iColumn, bool bRowRelative, bool bColumnRelative);
    private static JumpArgument();
    public virtual MarkerArgument TryParse(string strArgument);
    public virtual void ApplyArgument(IWorksheet sheet, Point pOldPosition, Int32& iRow, Int32& iColumn, IList`1<long> arrMarkerCells, MarkerOptionsImpl options, int count);
    protected Point GetCellLocation(Point pointStart, IWorkbook book);
    private static bool TryParseInt(string strToParse, Int32& iResult);
    protected static bool TryParseCell(string strToParse, Int32& iRow, Int32& iColumn, Boolean& bRowRelative, Boolean& bColumnRelative);
    protected static Point GetCellLocation(Point pointStart, int iRow, int iColumn, bool bRowRelative, bool bColumnRelative, IWorkbook book);
    public virtual int get_Priority();
    public virtual bool get_IsApplyable();
    internal void UpdateRowColumn(Point mergedPoint);
}
public abstract class Syncfusion.XlsIO.Implementation.TemplateMarkers.MarkerArgument : object {
    protected static char DEF_PARTS_SEPARATOR;
    private static int m_maxRowIndex;
    internal static int MaxRowIndex { get; internal set; }
    protected Regex ArgumentChecker { get; }
    public int Priority { get; }
    public bool IsPreparing { get; }
    public bool IsApplyable { get; }
    public bool IsAllowMultiple { get; }
    private static MarkerArgument();
    internal static int get_MaxRowIndex();
    internal static void set_MaxRowIndex(int value);
    public virtual MarkerArgument TryParse(string strArgument);
    protected virtual MarkerArgument Parse(Match m);
    public virtual void ApplyArgument(IWorksheet sheet, Point pOldPosition, Int32& iRow, Int32& iColumn, IList`1<long> arrMarkerCells, MarkerOptionsImpl options, int count);
    public virtual void PrepareOptions(MarkerOptionsImpl options);
    public virtual object Clone();
    protected virtual Regex get_ArgumentChecker();
    public virtual int get_Priority();
    public virtual bool get_IsPreparing();
    public virtual bool get_IsApplyable();
    public virtual bool get_IsAllowMultiple();
    protected static void InsertRow(IList`1<long> arrCells, int i, int iRowIndex, int count);
    protected static void InsertColumn(IList`1<long> arrCells, int i, int iColumnIndex, int count);
}
public enum Syncfusion.XlsIO.Implementation.TemplateMarkers.MarkerDirection : Enum {
    public int value__;
    public static MarkerDirection Vertical;
    public static MarkerDirection Horizontal;
}
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.MarkerOptionsImpl : object {
    private MarkerDirection m_direction;
    private int m_iMarkerIndex;
    private IWorkbook m_book;
    private string m_strOriginalMarker;
    private bool m_isMergeApplied;
    public MarkerDirection Direction { get; public set; }
    public int MarkerIndex { get; public set; }
    public IWorkbook Workbook { get; }
    public string OriginalMarker { get; public set; }
    internal bool IsMergeApplied { get; internal set; }
    public MarkerOptionsImpl(IWorkbook book);
    public MarkerDirection get_Direction();
    public void set_Direction(MarkerDirection value);
    public int get_MarkerIndex();
    public void set_MarkerIndex(int value);
    public IWorkbook get_Workbook();
    public string get_OriginalMarker();
    public void set_OriginalMarker(string value);
    internal bool get_IsMergeApplied();
    internal void set_IsMergeApplied(bool value);
}
[TemplateMarkerAttribute]
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.NewSpaceArgument : MarkerArgument {
    private bool m_bInsertRow;
    private static int DEF_PRIORITY;
    private static string DEF_MARKER_VALUE;
    private static int DEF_COPY_STYLES_GROUP;
    private static Regex s_newSpaceRegex;
    private bool m_bCopyStyles;
    private bool m_bCopyMerges;
    public int Priority { get; }
    public bool IsApplyable { get; }
    protected Regex ArgumentChecker { get; }
    internal bool IsMergeEnabled { get; }
    internal bool CopyStyles { get; }
    internal bool IsInsertRow { get; }
    private static NewSpaceArgument();
    protected virtual MarkerArgument Parse(Match m);
    public virtual void ApplyArgument(IWorksheet sheet, Point pOldPosition, Int32& iRow, Int32& iColumn, IList`1<long> arrMarkerCells, MarkerOptionsImpl options, int count);
    public virtual int get_Priority();
    public virtual bool get_IsApplyable();
    protected virtual Regex get_ArgumentChecker();
    internal bool get_IsMergeEnabled();
    internal bool get_CopyStyles();
    internal bool get_IsInsertRow();
    internal Point ApplyArgumentWithMerge(IWorksheet sheet, Point pOldPosition, Int32& iRow, Int32& iColumn, IList`1<long> arrMarkerCells, MarkerOptionsImpl options, int count);
    internal static Point GetMergeCount(int row, int column, IWorksheet sheet);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.RangeBuilder : object {
    private List`1<Rectangle> m_arrRanges;
    public Rectangle Item { get; }
    public int Count { get; }
    public Rectangle get_Item(int index);
    public int get_Count();
    public void Add(int iRow, int iColumn);
    public void Clear();
    public IRange ToRange(IWorksheet parentWorksheet);
    public static Rectangle GetRectangle(int iRow, int iColumn);
}
[AttributeUsageAttribute("4")]
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.TemplateMarkerAttribute : Attribute {
}
public class Syncfusion.XlsIO.Implementation.TemplateMarkers.TemplateMarkersImpl : CommonObject {
    private int m_insertCount;
    private static string DEF_MARKER_PREFIX;
    private static string DEF_PARTS_SEPARATOR;
    private static string DEF_NULL_VALUE;
    private static char DEF_STANDARD_SEPARATOR;
    private static int DEF_IMAGE_SIZE_ARG_INDEX;
    private static int DEF_IMAGE_POSITION_ARG_INDEX;
    private int DEF_FIT_TO_CELL_ARG_INDEX;
    private bool isNestobjectFirstrow;
    private static List`1<MarkerArgument> s_arrArguments;
    private static Type[] DEF_PARENT_TYPES;
    private Dictionary`2<long, string> dictMarkers;
    private Dictionary`2<string, object> m_dicVariables;
    private string m_strMarkerPrefix;
    private char m_chSeparator;
    private WorkbookImpl m_book;
    private Dictionary`2<string, VariableTypeAction> m_variableTypeActions;
    private Dictionary`2<string, CondFormatCollectionWrapper> m_conditionalFormats;
    private Dictionary`2<int, InsertCopiedCellsInfo> InsertCopiedCellsList;
    private IList`1<object> m_textVerticalPositionList;
    public string MarkerPrefix { get; public set; }
    public char ArgumentSeparator { get; public set; }
    private static TemplateMarkersImpl();
    public TemplateMarkersImpl(IApplication application, object parent);
    public sealed virtual void ApplyMarkers();
    public sealed virtual void ApplyMarkers(UnknownVariableAction action);
    public sealed virtual void AddVariable(string strName, object variable);
    public sealed virtual void AddVariable(string strName, object variable, VariableTypeAction makerType);
    public sealed virtual void RemoveVariable(string strName);
    public void ApplyMarkers(IWorksheet sheet);
    public void ApplyMarkers(IWorksheet sheet, UnknownVariableAction action);
    public void ApplyMarkers(IWorkbook book);
    public void ApplyMarkers(IWorkbook book, UnknownVariableAction action);
    public sealed virtual bool ContainsVariable(string strName);
    public sealed virtual IConditionalFormats CreateConditionalFormats(IRange range);
    private void ApplyMarkers(IWorksheet sheet, List`1<int> arrLabels, UnknownVariableAction action);
    public bool CheckClassMarker(IWorksheet sheet, UnknownVariableAction action, IList`1<long> arrCells, IMigrantRange migrantRange);
    public bool CheckAndApplyHeaders(object obj, IWorksheet sheet, UnknownVariableAction action, IList`1<long> arrCells, IMigrantRange migrantRange);
    private bool TrySetHeaders(object obj, string className, bool isDynamic, IWorksheet sheet, UnknownVariableAction action, IList`1<long> arrCells, IMigrantRange migrantRange);
    private bool SetObjectHeader(object obj, string strMarkerText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, UnknownVariableAction action, bool isDynamic);
    private bool ArrangeRowsOrColumns(IWorksheet sheet, IMigrantRange migrantRange, MarkerOptionsImpl options, int insertCount);
    private IList GetObjectMembersInfo(object obj, IList& columnNames);
    private void ApplyConditionalFormats(List`1<RangeBuilder> ranges, IWorksheet sheet);
    private void UpdateChartRanges(IWorkbook book, IWorksheet sheet, IList`1<long> arrCells, IList`1<RangeBuilder> arrResultRanges);
    private void UpdateChartRanges(IWorkbook book, IWorksheet sheet, long cellIndex, RangeBuilder builder);
    private void UpdateSheetCharts(IWorksheet sheet, IWorksheet sheetCell, long cellIndex, RangeBuilder builder);
    private void UpdateTableRange(IWorksheet sheet, IList`1<RangeBuilder> arrResultRanges);
    private void UpdateChartRanges(IChart chart, IWorksheet sheet, long cellIndex, RangeBuilder builder);
    private bool CompareRange(IRange range, IWorksheet sheet, long cellIndex);
    private IList`1<long> PrepareCellIndexes(IWorksheet sheet, List`1<int> arrLabels);
    private RangeBuilder ApplyMarker(IWorksheet sheet, IList`1<long> arrCells, int i, IMigrantRange migrantRange, UnknownVariableAction action, Boolean& isMergeEnabled);
    private void ApplyTextPosition(IWorksheet sheet, IList lstArguments, RangeBuilder builder);
    private void ApplyTextVerticalPosition(IWorksheet sheet, IList`1<RangeBuilder> rangeBuilderList);
    private string GetVariableName(String& strText, String& strArguments);
    private string GetParentName(string strText);
    private void SetVariable(string strVariable, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action);
    private void SetUnknownVariable(object value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, VariableTypeAction variableTypeAction);
    private void SetUnknownVariable(object value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, VariableTypeAction variableTypeAction, string numberFormat, Type type, IHyperLink imageHyperlink);
    private void SetSimpleValue(object value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, string numberFormat, Type valueType, IHyperLink imageHyperlink);
    private void SetValueOnRange(object value, IWorksheet sheet, IMigrantRange migrantRange, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, VariableTypeAction variableTypeAction, string numberFormat, Type valueType, IHyperLink imageHyperlink);
    private bool IsMergeOnArgumentList(IList lstArguments);
    public void GetColumnType(String[] values, List`1& numberFormats, List`1& valueTypes, VariableTypeAction variableTypeAction);
    public object GetValue(string value, Type valueType);
    public object GetValue(string value, String& numberFormat, Type& valueType, bool detectNumberFormat);
    private object GetNextValue(object value, IWorksheet sheet, String& strText, String& newNumberFormat, Type& newType, UnknownVariableAction action);
    private void GetNewTypeAndNumberFormat(object value, Object[] arrAtt, Type& newType, String& newNumberFormat);
    private object GetPropertyFromUnknownObject(object value, string strProperty, Boolean& isExpando, Boolean& isCustomDynamic);
    private bool IsDynamic(object dynamicValue);
    private void SetArrayValue(IList value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, VariableTypeAction variableTypeAction);
    private void GetNestedObject(string strText, IWorksheet sheet, MarkerOptionsImpl options, UnknownVariableAction action, object parentObject, int dotIndex, IList`1<string> arrMarkers, Boolean& isNestedObject, Int32& collectionCount, Boolean& isClassObject);
    private void SetCollectionValue(ICollection value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, VariableTypeAction variableTypeAction);
    private bool TryAndSetStringValue(int startIndex, IMigrantRange migrantRange, object item, MarkerOptionsImpl options, bool isStringSourceFormat, RangeBuilder builder);
    internal bool CheckIfNestedObject(object value, String[] arrProperty, Int32& collectionCount);
    private void SetDataSetValue(DataSet value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, VariableTypeAction variableTypeAction);
    private void SetDataView(DataView value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, VariableTypeAction variableTypeAction);
    private void SetDataTable(DataTable value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, VariableTypeAction variableTypeAction);
    private void UnknownProperty(string strProperty, UnknownVariableAction action, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, VariableTypeAction variableTypeAction);
    private void SetDataColumn(DataColumn value, string strText, IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, RangeBuilder builder, UnknownVariableAction action, VariableTypeAction variableTypeAction);
    private void TryAndSetCopyRangeArguments(IWorksheet sheet, IList lstArguments, MarkerOptionsImpl options, Point startPoint);
    private bool PrepareNextCell(IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options);
    private bool PrepareNextCell(IWorksheet sheet, IMigrantRange migrantRange, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, bool isNestedObject, int collectionCount, bool isClassObject, bool isFirstRowInsert, int columnCount);
    private bool IsArray(object value);
    private bool IsCollection(object value);
    private bool IsDataSet(object value);
    private bool IsDataTable(object value);
    private bool IsDataView(object value);
    private bool IsDataColumn(object value);
    private bool IsProperty(object value, string strPropName, PropertyInfo& prop);
    private string GetNextPropertyName(String& strText);
    private string PeekNextPropertyName(string strText);
    private IList ParseArguments(string strArguments, MarkerOptionsImpl& options);
    private IList ConvertToList(SortedList`2<int, List`1<MarkerArgument>> lstArguments, MarkerOptionsImpl options);
    private void InsertJumpAttribute(SortedList`2<int, List`1<MarkerArgument>> lstMarkers, MarkerOptionsImpl options);
    private MarkerArgument ParseArgument(string strArgument);
    private void ApplyArguments(IWorksheet sheet, Int32& iRow, Int32& iColumn, IList`1<long> arrMarkerCells, IList lstArguments, MarkerOptionsImpl options, bool isNestedObject, bool isClassObject, bool isFirstRowInsert, bool isLastRowInsert, int columnCount);
    private bool IsFitToCell(Image image, IWorksheet sheet, IMigrantRange migrantRange, IList lstArguments, bool isMergeApplied);
    private void SetImageValueWithArguments(Image image, IWorksheet sheet, IMigrantRange migrantRange, IList lstArguments, bool isMergeApplied, IHyperLink imageHyperlink);
    private void CheckAndApplyPositionOfImage(IPictureShape pictureShape, Size sizeOfMigrantRange, IList lstArguments);
    private Size CheckAndGetSizeOfImage(IList lstArguments, IWorksheet sheet, IMigrantRange migrantRange, Image image);
    public sealed virtual string get_MarkerPrefix();
    public sealed virtual void set_MarkerPrefix(string value);
    public sealed virtual char get_ArgumentSeparator();
    public sealed virtual void set_ArgumentSeparator(char value);
}
public class Syncfusion.XlsIO.Implementation.TextFilter : object {
    private string m_text;
    public string Text { get; internal set; }
    public ExcelCombinationFilterType CombinationFilterType { get; }
    public string get_Text();
    internal void set_Text(string value);
    public sealed virtual ExcelCombinationFilterType get_CombinationFilterType();
}
internal class Syncfusion.XlsIO.Implementation.TextFormat : object {
    internal static short FontSizeKey;
    internal static short FontFamilyKey;
    internal static short BoldKey;
    internal static short UnderlineKey;
    internal static short ItalicKey;
    internal static short StrikeKey;
    internal static short FontColorKey;
    internal static short SuperScriptKey;
    internal static short SubScriptKey;
    internal static short BackColorKey;
    internal static short DisplayKey;
    internal static short TextAlignKey;
    internal static short HorizontalAlignKey;
    internal static short VerticalAlignKey;
    internal Dictionary`2<int, object> formattingProperty;
    internal string TextAlignment { get; internal set; }
    internal string HorizantalAlignment { get; internal set; }
    internal string VerticalAlignment { get; internal set; }
    internal bool Display { get; internal set; }
    internal bool SuperScript { get; internal set; }
    internal bool SubScript { get; internal set; }
    internal bool Bold { get; internal set; }
    internal bool Italic { get; internal set; }
    internal bool Underline { get; internal set; }
    internal bool Strike { get; internal set; }
    internal Color FontColor { get; internal set; }
    internal float FontSize { get; internal set; }
    internal string FontFamily { get; internal set; }
    internal Color BackColor { get; internal set; }
    internal TextFormat Clone();
    internal bool HasKey(int Key);
    internal bool HasValue(int key);
    private void SetPropertyValue(int Key, bool value);
    private void SetPropertyValue(int Key, object value);
    internal string get_TextAlignment();
    internal void set_TextAlignment(string value);
    internal string get_HorizantalAlignment();
    internal void set_HorizantalAlignment(string value);
    internal string get_VerticalAlignment();
    internal void set_VerticalAlignment(string value);
    internal bool get_Display();
    internal void set_Display(bool value);
    internal bool get_SuperScript();
    internal void set_SuperScript(bool value);
    internal bool get_SubScript();
    internal void set_SubScript(bool value);
    internal bool get_Bold();
    internal void set_Bold(bool value);
    internal bool get_Italic();
    internal void set_Italic(bool value);
    internal bool get_Underline();
    internal void set_Underline(bool value);
    internal bool get_Strike();
    internal void set_Strike(bool value);
    internal Color get_FontColor();
    internal void set_FontColor(Color value);
    internal float get_FontSize();
    internal void set_FontSize(float value);
    internal string get_FontFamily();
    internal void set_FontFamily(string value);
    internal Color get_BackColor();
    internal void set_BackColor(Color value);
}
internal class Syncfusion.XlsIO.Implementation.ThreadedComment : object {
    private string m_author;
    private string m_text;
    private DateTime m_createdTime;
    private bool m_isResolved;
    private int m_rowIndex;
    private int m_columnIndex;
    private string m_threadedCommentId;
    private string m_parentId;
    private WorksheetImpl m_sheet;
    private CommentShapeImpl m_comment;
    private IThreadedComments m_threadedCommentCollection;
    private IThreadedComments m_threadedCommentreplies;
    private List`1<Mention> m_mentionsList;
    private Stream m_extLstElementStream;
    private string m_personId;
    public string Author { get; internal set; }
    public string Text { get; public set; }
    public DateTime CreatedTime { get; internal set; }
    internal string PersonId { get; internal set; }
    public bool IsResolved { get; public set; }
    public IThreadedComments Replies { get; internal set; }
    public int RowIndex { get; internal set; }
    public int ColumnIndex { get; internal set; }
    internal string ThreadedCommentId { get; internal set; }
    internal string ParentId { get; internal set; }
    internal CommentShapeImpl Comment { get; internal set; }
    internal List`1<Mention> MentionsList { get; }
    internal IThreadedComments ThreadedCommentCollection { get; internal set; }
    internal Stream ExtLstElementStream { get; internal set; }
    internal ThreadedComment(string author, string text, DateTime createdTime, int rowIndex, int columnIndex, string threadedCommentId, string parentId, IThreadedComments threadedCommentCollection, CommentShapeImpl comment, WorksheetImpl worksheet);
    internal ThreadedComment(WorksheetImpl worksheet);
    public sealed virtual string get_Author();
    internal void set_Author(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual DateTime get_CreatedTime();
    internal void set_CreatedTime(DateTime value);
    internal string get_PersonId();
    internal void set_PersonId(string value);
    public sealed virtual bool get_IsResolved();
    public sealed virtual void set_IsResolved(bool value);
    public sealed virtual IThreadedComments get_Replies();
    internal void set_Replies(IThreadedComments value);
    public sealed virtual int get_RowIndex();
    internal void set_RowIndex(int value);
    public sealed virtual int get_ColumnIndex();
    internal void set_ColumnIndex(int value);
    internal string get_ThreadedCommentId();
    internal void set_ThreadedCommentId(string value);
    internal string get_ParentId();
    internal void set_ParentId(string value);
    internal CommentShapeImpl get_Comment();
    internal void set_Comment(CommentShapeImpl value);
    internal List`1<Mention> get_MentionsList();
    internal IThreadedComments get_ThreadedCommentCollection();
    internal void set_ThreadedCommentCollection(IThreadedComments value);
    internal Stream get_ExtLstElementStream();
    internal void set_ExtLstElementStream(Stream value);
    public sealed virtual IThreadedComment AddReply(string text, DateTime creationTime);
    public sealed virtual IThreadedComment AddReply(string text, string author, DateTime creationTime);
    public sealed virtual void Delete();
    internal void RemoveMentionPersons(Dictionary`2<string, Person> personDictionary);
    internal IThreadedComment Clone(WorksheetImpl clonedSheet, IThreadedComments threadedCommentsClone);
    internal void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class Syncfusion.XlsIO.Implementation.ThreadedComments : CollectionBaseEx`1<IThreadedComment> {
    private WorksheetImpl m_worksheet;
    public IThreadedComment Item { get; }
    public IThreadedComment Item { get; }
    internal IThreadedComment Item { get; }
    public int Count { get; }
    internal ThreadedComments(WorksheetImpl worksheet, IApplication application);
    public sealed virtual IThreadedComment get_Item(int index);
    public sealed virtual IThreadedComment get_Item(int row, int column);
    internal IThreadedComment get_Item(string id);
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    internal IThreadedComments Clone(WorksheetImpl worksheet, IApplication application);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.ThreeDFormatImpl : CommonObject {
    private ShadowData m_chartShadowFormat;
    private WorkbookImpl m_parentBook;
    private int m_bevelTopHeight;
    private int m_bevelTopWidth;
    private int m_bevelBottomHeight;
    private int m_bevelBottomWidth;
    private byte m_flagOptions;
    private bool m_isShapePropertiesChanged;
    internal bool IsShapePropertiesChanged { get; internal set; }
    public Excel2007ChartBevelProperties BevelTop { get; public set; }
    public Excel2007ChartBevelProperties BevelBottom { get; public set; }
    public Excel2007ChartMaterialProperties Material { get; public set; }
    public Excel2007ChartLightingProperties Lighting { get; public set; }
    public int BevelTopHeight { get; public set; }
    public int BevelBottomHeight { get; public set; }
    public int BevelTopWidth { get; public set; }
    public int BevelBottomWidth { get; public set; }
    internal bool IsDefault { get; }
    internal bool IsBevelTopWidthSet { get; }
    internal bool IsBevelTopHeightSet { get; }
    internal bool IsBevelBottomWidthSet { get; }
    internal bool IsBevelBottomHeightSet { get; }
    internal bool IsBevelBottomSet { get; }
    internal bool IsBevelTopSet { get; }
    internal bool IsMaterialSet { get; }
    public ThreeDFormatImpl(IApplication application, object parent);
    private void SetParents();
    internal bool get_IsShapePropertiesChanged();
    internal void set_IsShapePropertiesChanged(bool value);
    public sealed virtual Excel2007ChartBevelProperties get_BevelTop();
    public sealed virtual void set_BevelTop(Excel2007ChartBevelProperties value);
    public sealed virtual Excel2007ChartBevelProperties get_BevelBottom();
    public sealed virtual void set_BevelBottom(Excel2007ChartBevelProperties value);
    public sealed virtual Excel2007ChartMaterialProperties get_Material();
    public sealed virtual void set_Material(Excel2007ChartMaterialProperties value);
    public sealed virtual Excel2007ChartLightingProperties get_Lighting();
    public sealed virtual void set_Lighting(Excel2007ChartLightingProperties value);
    public sealed virtual int get_BevelTopHeight();
    public sealed virtual void set_BevelTopHeight(int value);
    public sealed virtual int get_BevelBottomHeight();
    public sealed virtual void set_BevelBottomHeight(int value);
    public sealed virtual int get_BevelTopWidth();
    public sealed virtual void set_BevelTopWidth(int value);
    public sealed virtual int get_BevelBottomWidth();
    public sealed virtual void set_BevelBottomWidth(int value);
    internal bool get_IsDefault();
    internal Excel2007ChartMaterialProperties GetMaterial();
    private void SetFormat();
    internal void SetInnerShapes(object value, string property);
    private sealed virtual override object Syncfusion.XlsIO.Interfaces.ICloneParent.Clone(object parent);
    public ThreeDFormatImpl Clone(object parent);
    internal bool get_IsBevelTopWidthSet();
    internal bool get_IsBevelTopHeightSet();
    internal bool get_IsBevelBottomWidthSet();
    internal bool get_IsBevelBottomHeightSet();
    internal bool get_IsBevelBottomSet();
    internal bool get_IsBevelTopSet();
    internal bool get_IsMaterialSet();
}
internal class Syncfusion.XlsIO.Implementation.TopBottomImpl : object {
    private ExcelCFTopBottomType m_type;
    private bool m_bPercent;
    private int m_rank;
    public ExcelCFTopBottomType Type { get; public set; }
    public bool Percent { get; public set; }
    public int Rank { get; public set; }
    public TopBottomImpl Clone();
    public static bool op_Equality(TopBottomImpl first, TopBottomImpl second);
    public static bool op_Inequality(TopBottomImpl first, TopBottomImpl second);
    public sealed virtual ExcelCFTopBottomType get_Type();
    public sealed virtual void set_Type(ExcelCFTopBottomType value);
    public sealed virtual bool get_Percent();
    public sealed virtual void set_Percent(bool value);
    public sealed virtual int get_Rank();
    public sealed virtual void set_Rank(int value);
}
internal class Syncfusion.XlsIO.Implementation.TopBottomWrapper : object {
    private TopBottomImpl m_wrapped;
    private ConditionalFormatWrapper m_format;
    public ExcelCFTopBottomType Type { get; public set; }
    public bool Percent { get; public set; }
    public int Rank { get; public set; }
    public TopBottomWrapper(TopBottomImpl top10, ConditionalFormatWrapper format);
    public sealed virtual ExcelCFTopBottomType get_Type();
    public sealed virtual void set_Type(ExcelCFTopBottomType value);
    public sealed virtual bool get_Percent();
    public sealed virtual void set_Percent(bool value);
    public sealed virtual int get_Rank();
    public sealed virtual void set_Rank(int value);
    public sealed virtual void BeginUpdate();
    public sealed virtual void EndUpdate();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.TypedSortedListEx`2 : object {
    private static int DefaultCapacity;
    private TKey[] m_arrKeys;
    private Dictionary`2<TKey, TValue> m_dicValues;
    private int m_iSize;
    private int m_iVersion;
    private IComparer`1<TKey> m_comparer;
    private KeyList<TKey, TValue> m_listKeys;
    private ValueList<TKey, TValue> m_lstValues;
    public int Capacity { get; public set; }
    public int Count { get; }
    public IList`1<TKey> Keys { get; }
    public IList`1<TValue> Values { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public TValue Item { get; public set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public object Item { get; public set; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    public TypedSortedListEx`2(int initialCapacity);
    public TypedSortedListEx`2(IComparer`1<TKey> comparer);
    public TypedSortedListEx`2(IComparer`1<TKey> comparer, int capacity);
    public TypedSortedListEx`2(IDictionary`2<TKey, TValue> d);
    public TypedSortedListEx`2(IDictionary`2<TKey, TValue> d, IComparer`1<TKey> comparer);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual IList`1<TKey> get_Keys();
    public virtual IList`1<TValue> get_Values();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual TValue get_Item(TKey key);
    public virtual void set_Item(TKey key, TValue value);
    public static TypedSortedListEx`2<TKey, TValue> Synchronized(TypedSortedListEx`2<TKey, TValue> list);
    public virtual void Add(TKey key, TValue value);
    public virtual void Clear();
    public virtual object Clone();
    public TypedSortedListEx`2<TKey, TValue> CloneAll();
    public virtual bool Contains(TKey key);
    public virtual bool ContainsKey(TKey key);
    public virtual bool ContainsValue(TValue value);
    public virtual void CopyTo(Array array, int arrayIndex);
    public virtual TValue GetByIndex(int index);
    public virtual TValue GetByName(string name);
    public virtual TKey GetKey(int index);
    public virtual IList`1<TKey> GetKeyList();
    public virtual IList`1<TValue> GetValueList();
    public virtual int IndexOfKey(TKey key);
    public virtual int IndexOfValue(TValue value);
    public virtual void RemoveAt(int index);
    public virtual bool Remove(TKey key);
    public virtual void SetByIndex(int index, TValue value);
    public virtual void TrimToSize();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private void Insert(int index, TKey key, TValue value);
    private void EnsureCapacity(int min);
    public sealed virtual void Add(object key, object value);
    public sealed virtual bool Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
}
[ExtensionAttribute]
internal static class Syncfusion.XlsIO.Implementation.TypeExtension : object {
    [ExtensionAttribute]
internal static ConstructorInfo GetConstructor(Type type, Type[] types);
    internal static bool IsSupportedType(Type type1, Type type2);
    internal static int GetSizeOfType(string typeName);
    [ExtensionAttribute]
internal static Object[] GetCustomAttributes(Type type, Type attributeType, bool inherit);
    [ExtensionAttribute]
internal static FieldInfo[] GetFields(Type type, BindingFlags flags);
    [ExtensionAttribute]
internal static bool IsSubclassOf(Type type, Type parentType);
    [ExtensionAttribute]
internal static Type GetInterface(Type type, string interfaceName, bool ignoreCase);
    [ExtensionAttribute]
internal static PropertyInfo[] GetProperties(Type type);
    [ExtensionAttribute]
internal static PropertyInfo GetProperty(Type type, string propertyName);
    [ExtensionAttribute]
internal static PropertyInfo GetProperty(Type type, string propertyName, BindingFlags flags);
}
public enum Syncfusion.XlsIO.Implementation.UnderlineStyle : Enum {
    public int value__;
    public static UnderlineStyle Continuous;
    public static UnderlineStyle TurnOff;
    public static UnderlineStyle Dotted;
    public static UnderlineStyle Dash;
    public static UnderlineStyle DashDot;
    public static UnderlineStyle DashDotDot;
    public static UnderlineStyle Double;
    public static UnderlineStyle HeavyWave;
    public static UnderlineStyle LongDash;
    public static UnderlineStyle None;
    public static UnderlineStyle Thick;
    public static UnderlineStyle ThickDotted;
    public static UnderlineStyle ThickDash;
    public static UnderlineStyle ThickDashDot;
    public static UnderlineStyle ThickDashDotDot;
    public static UnderlineStyle ThickLongDash;
    public static UnderlineStyle DoubleWave;
    public static UnderlineStyle Word;
    public static UnderlineStyle Wave;
}
public class Syncfusion.XlsIO.Implementation.UtilityMethods : object {
    private static int DEF_WRONG_DATE;
    private static int DEF_EXCEL2007_MAX_ROW_COUNT;
    private static int DEF_EXCEL2007_MAX_COLUMN_COUNT;
    private static int DEF_EXCEL97TO03_MAX_ROW_COUNT;
    private static int DEF_EXCEL97TO03_MAX_COLUMN_COUNT;
    public static bool Intersects(Rectangle rect1, Rectangle rect2);
    public static bool Contains(Rectangle rect, int x, int y);
    public static int IndexOf(TBIFFRecord[] array, TBIFFRecord value);
    public static int IndexOf(Int32[] array, int value);
    public static int IndexOf(Int16[] array, short value);
    public static double ConvertDateTimeToNumber(DateTime dateTime);
    public static DateTime ConvertNumberToDateTime(double dNumber, bool is1904DateSystem);
    [CLSCompliantAttribute("False")]
public static ICellPositionFormat CreateCell(int iRow, int iColumn, TBIFFRecord recordType);
    public static string RemoveFirstCharUnsafe(string value);
    public static string Join(string separator, List`1<string> value);
    public static void GetMaxRowColumnCount(Int32& iRows, Int32& iColumns, ExcelVersion version);
    public static void CopyStreamTo(Stream source, Stream destination);
    public static MemoryStream CloneStream(MemoryStream source);
    public static XmlReader CreateReader(Stream data, bool skipToElement);
    internal static XmlReader CreateReader(Stream data, string tag);
    internal static List`1<double> CloneList(List`1<double> list);
    public static XmlReader CreateReaderFromStreamPosition(Stream data);
    public static XmlReader CreateReader(Stream data);
    public static XmlWriter CreateWriter(Stream data, Encoding encoding);
    public static XmlWriter CreateWriter(TextWriter data);
    public static XmlWriter CreateWriter(TextWriter data, bool indent);
}
[DebuggerStepThroughAttribute]
public class Syncfusion.XlsIO.Implementation.ValueChangedEventArgs : EventArgs {
    private static ValueChangedEventArgs _empty;
    private object m_old;
    private object m_new;
    private string m_strName;
    private ValueChangedEventArgs m_next;
    public object newValue { get; }
    public object oldValue { get; }
    public string Name { get; }
    public ValueChangedEventArgs Next { get; public set; }
    public static ValueChangedEventArgs Empty { get; }
    public ValueChangedEventArgs(object old, object newValue, string objectName);
    public ValueChangedEventArgs(object old, object newValue, string objectName, ValueChangedEventArgs next);
    private static ValueChangedEventArgs();
    [DebuggerStepThroughAttribute]
public object get_newValue();
    [DebuggerStepThroughAttribute]
public object get_oldValue();
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public ValueChangedEventArgs get_Next();
    public void set_Next(ValueChangedEventArgs value);
    [DebuggerStepThroughAttribute]
public static ValueChangedEventArgs get_Empty();
}
public class Syncfusion.XlsIO.Implementation.ValueChangedEventHandler : MulticastDelegate {
    public ValueChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValueChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValueChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XlsIO.Implementation.Vba.VbaProjectImpl : VbaProject {
    internal WorkbookImpl Workbook { get; }
    internal VbaProjectImpl(WorkbookImpl book);
    internal VbaProjectImpl(WorkbookImpl book, ICompoundStorage rootStorage);
    internal WorkbookImpl get_Workbook();
    private void ParseMacroStream(ICompoundStorage rootStorage);
    private void ParseDirStream(ICompoundStorage storage);
    private void ParseModuleStream(ICompoundStorage storage);
    private void ParseProjectStream(ICompoundStorage rootStorage);
    private void ParseDesignerStream(ICompoundStorage rootStorage);
    internal void Save(ICompoundStorage vbaRootStorage);
    private void SerializeVbaProject(ICompoundStorage vbaRootStorage);
    private void SerializeVbaStream(ICompoundStorage vbaStorage);
    private void SerializeDirStream(ICompoundStorage vbaStorage);
    private void SerializeModuleStream(ICompoundStorage vbaStorage);
    private void SerializeProjectStream(ICompoundStorage vbaRootStorage);
    private void SerializeProjectWmStream(ICompoundStorage vbaRootStorage);
    private void SerializeDesignerStream(ICompoundStorage vbaRootStorage);
    internal VbaProjectImpl Clone(WorkbookImpl workbook);
}
public class Syncfusion.XlsIO.Implementation.VPageBreakImpl : CommonObject {
    private TVPageBreak m_vPageBreak;
    private ExcelPageBreak m_type;
    private WorksheetImpl m_sheet;
    public IRange Location { get; public set; }
    public ExcelPageBreak Type { get; public set; }
    [CLSCompliantAttribute("False")]
public TVPageBreak VPageBreak { get; public set; }
    public int Column { get; internal set; }
    public VPageBreakImpl(IApplication application, object parent);
    private VPageBreakImpl(IApplication application, object parent, BiffReader reader);
    [CLSCompliantAttribute("False")]
public VPageBreakImpl(IApplication application, object parent, TVPageBreak pagebreak);
    public VPageBreakImpl(IApplication application, object parent, IRange location);
    public sealed virtual IRange get_Location();
    public sealed virtual void set_Location(IRange value);
    public ExcelPageBreak get_Type();
    public void set_Type(ExcelPageBreak value);
    public TVPageBreak get_VPageBreak();
    public void set_VPageBreak(TVPageBreak value);
    public int get_Column();
    internal void set_Column(int value);
    private void FindParents();
    public VPageBreakImpl Clone(object parent);
}
public class Syncfusion.XlsIO.Implementation.WorkbookImpl : CommonObject {
    private static string DEF_SUMMARY_INFO;
    private static string DEF_DOCUMENT_SUMMARY_INFO;
    internal static string DEF_STREAM_NAME1;
    internal static string DEF_STREAM_NAME2;
    private static string DEF_VBA_MACROS;
    private static string DEF_VBA_SUB_STORAGE;
    private static char DEF_CHAR_SELF;
    private static char DEF_CHAR_CODED;
    private static char DEF_CHAR_EMPTY;
    private static char DEF_CHAR_VOLUME;
    private static char DEF_CHAR_SAMEVOLUME;
    private static char DEF_CHAR_DOWNDIR;
    private static char DEF_CHAR_UPDIR;
    private static char DEF_CHAR_LONGVOLUME;
    private static char DEF_CHAR_STARTUPDIR;
    private static char DEF_CHAR_ALTSTARTUPDIR;
    private static char DEF_CHAR_LIBDIR;
    private static char DEF_CHAR_NETWORKPATH;
    private static string DEF_NETWORKPATH_START;
    private static int DEF_NOT_PASSWORD_PROTECTION;
    internal static int DEF_REMOVED_SHEET_INDEX;
    private static string HttpStart;
    private static string NEW_LINE;
    internal static Color[] DEF_PALETTE;
    internal static Double[] DefaultTints;
    internal static Color[][] ThemeColorPalette;
    private Single[] DEF_FONT_HEIGHT_SINGLE_INCR;
    private Single[] DEF_FONT_HEIGHT_DOUBLE_INCR;
    private Single[] DEF_FONT_WIDTH_SINGLE_INCR;
    public static int DEF_FIRST_USER_COLOR;
    public static string DEF_BAD_SHEET_NAME;
    private static int DEF_FIRST_DEFINED_FONT;
    private static string DEF_RESPONSE_OPEN;
    private static string DEF_RESPONSE_DIALOG;
    private static ushort DEF_REMOVED_INDEX;
    private static string DEF_EXCEL97_CONTENT_TYPE;
    private static string DEF_EXCEL2000_CONTENT_TYPE;
    private static string DEF_EXCEL2007_CONTENT_TYPE;
    private static string DEF_CSV_CONTENT_TYPE;
    private static string DEF_ODS_CONTENT_TYPE;
    internal static string StandardPassword;
    internal static char TextQualifier;
    private static TBIFFRecord[] DEF_PIVOTRECORDS;
    private static RegexOptions DEF_REGEX;
    private static Regex ExternSheetRegEx;
    private static Regex ExternSheetRegExComplete;
    private static string DEF_DIRECTORY_GROUP;
    private static string DEF_BOOK_GROUP;
    private static string DEF_SHEET_GROUP;
    internal static int DEF_BOOK_SHEET_INDEX;
    private static string DEF_FORMAT_STYLE_NAME_START;
    internal static string DEF_EXCEL_2016_THEME_VERSION;
    internal static string DEF_EXCEL_2013_THEME_VERSION;
    internal static string DEF_EXCEL_2007_THEME_VERSION;
    internal static string DEF_EXCEL_Xlsx_THEME_VERSION;
    private static String[] DEF_STREAM_SKIP_COPYING;
    private static Char[] DEF_RESERVED_BOOK_CHARS;
    private static Int32[] PredefinedStyleOutlines;
    private static Int32[] PredefinedXFs;
    internal static string EvaluationWarning;
    internal static string EvaluationWarningWithLink;
    private static string EvaluationSheetName;
    internal static Color[] DefaultThemeColors;
    internal static Color[] DefaultThemeColors2013;
    private static int FirstChartColor;
    private static int LastChartColor;
    private static Color[] m_chartColors;
    private static string XLS;
    private static string XLSX;
    private static string XLT;
    private static string XLTX;
    private static string XLTM;
    private static string XLSM;
    private static string ODS;
    private static string XLSB;
    private static char SheetRangeSeparator;
    internal static int Date1904SystemDifference;
    private static float ScriptFactor;
    private int m_pivotTableCount;
    private XlsbDataHolder m_xlsbDataHolder;
    private bool m_xlsbFormat;
    [CompilerGeneratedAttribute]
private WarningEventHandler WarningCallBack;
    private TableStyles m_tableStyles;
    private SlicerCache m_slicerCache;
    private List`1<ISlicerCache> m_slicerCacheCollection;
    private Dictionary`2<string, List`1<int>> m_workbookFormulas;
    private Dictionary`2<string, Person> m_personDictionary;
    private bool m_enabledCalcEngine;
    private List`1<BiffRecordRaw> m_records;
    private WorksheetBaseImpl m_ActiveSheet;
    private bool m_showSheetTabs;
    private ITabSheet m_ActiveTabSheet;
    private WorksheetsCollection m_worksheets;
    private StylesCollection m_styles;
    private FontsCollection m_fonts;
    private ExtendedFormatsCollection m_extFormats;
    private List`1<NameRecord> m_arrNames;
    private Dictionary`2<int, int> m_modifiedFormatRecord;
    private FormatsCollection m_rawFormats;
    private List`1<BoundSheetRecord> m_arrBound;
    private SSTDictionary m_SSTDictionary;
    private ExternSheetRecord m_externSheet;
    private List`1<ContinueRecord> m_continue;
    private List`1<IReparse> m_arrReparse;
    private string m_strFullName;
    private bool m_bDate1904;
    private bool m_bPrecisionAsDisplayed;
    private bool m_bReadOnly;
    private bool m_bSaved;
    private bool m_bSelFSUsed;
    internal bool m_bLoading;
    private bool m_bSaving;
    private bool m_bCellProtect;
    private bool m_bWindowProtect;
    private string m_strCodeName;
    private bool m_bHidePivotFieldList;
    private string m_defaultThemeVersion;
    private bool m_bHasMacros;
    private bool m_bHasSummaryInformation;
    private bool m_bHasDocumentSummaryInformation;
    private bool m_bMacrosDisable;
    private List`1<Color> m_colors;
    private bool m_hasStandardFont;
    private bool m_bOwnPalette;
    private WindowOneRecord m_windowOne;
    private WorkbookNamesCollection m_names;
    private ChartsCollection m_charts;
    private List`1<DialogSheet> m_dialogs;
    private List`1<MacroSheet> m_macros;
    private WorkbookObjectsCollection m_arrObjects;
    private PasswordRecord m_password;
    private PasswordRev4Record m_passwordRev4;
    private ProtectionRev4Record m_protectionRev4;
    private bool m_bThrowInFormula;
    internal WorkbookShapeDataImpl m_shapesData;
    private int m_iFirstUnusedColor;
    private int m_iCurrentObjectId;
    private int m_iCurrentHeaderId;
    private List`1<ExtendedFormatRecord> m_arrExtFormatRecords;
    private List`1<ExtendedXFRecord> m_arrXFExtRecords;
    private List`1<StyleExtRecord> m_arrStyleExtRecords;
    private ICompoundFile m_workbookFile;
    private bool m_bOptimization;
    private bool m_b3dRangesInDV;
    private ExternBookCollection m_externBooks;
    private AddInFunctionsCollection m_addinFunctions;
    private WorkbookShapeDataImpl m_headerFooterPictures;
    private CalculationOptionsImpl m_calcution;
    private PivotCacheCollection m_pivotCaches;
    private Int32[] pivotCacheIndexes;
    private int m_dxfPriority;
    private FormulaUtil m_formulaUtil;
    private WorksheetGroup m_sheetGroup;
    private bool m_bDuplicatedNames;
    private BuiltInDocumentProperties m_builtInDocumentProperties;
    private CustomDocumentProperties m_customDocumentProperties;
    private MetaPropertiesImpl m_contentTypeProperties;
    private CustomXmlPartCollection m_customXmlPartCollection;
    internal bool m_bWriteProtection;
    private FileSharingRecord m_fileSharing;
    private bool m_bDetectDateTimeInValue;
    private int m_iFirstCharSize;
    private int m_iSecondCharSize;
    private string m_strEncryptionPassword;
    internal ExcelEncryptionType m_encryptionType;
    private Byte[] m_arrDocId;
    private int m_iMaxRowCount;
    private int m_iMaxColumnCount;
    private int m_iMaxXFCount;
    private int m_iMaxIndent;
    private int m_maxImportColumns;
    private ExcelVersion m_version;
    private int m_iDefaultXFIndex;
    private FileDataHolder m_fileDataHolder;
    private double m_dMaxDigitWidth;
    private IntPtr m_ptrHeapHandle;
    private BiffRecordRaw m_bookExt;
    private BiffRecordRaw m_theme;
    internal List`1<Color> m_themeColors;
    private Stream m_controlsStream;
    private int m_iMaxTableIndex;
    private int m_iCountry;
    private Stream m_CustomTableStylesStream;
    private bool m_bIsLoaded;
    private bool m_bIsCreated;
    private Dictionary`2<string, FontImpl> m_majorFonts;
    private Dictionary`2<string, FontImpl> m_minorFonts;
    private bool isEqualColor;
    internal bool m_hasApostrophe;
    private Nullable`1<bool> m_isStartsOrEndsWith;
    private bool m_isOleObjectCopied;
    private bool m_hasOleObjects;
    private MSODrawingGroupRecord m_drawGroup;
    private bool m_checkFirst;
    private int m_versioncheck;
    internal bool m_isThemeColorsParsed;
    private CompatibilityRecord m_compatibility;
    private Stream m_sstStream;
    private bool m_hasInlineString;
    private DataSorter m_dataSorter;
    private bool m_strict;
    private bool m_isConverted;
    private List`1<Stream> m_preservesPivotCache;
    private List`1<int> m_arrFontIndexes;
    private ExcelParseOptions m_options;
    internal Dictionary`2<int, int> m_xfCellCount;
    private int m_xfStyleArrayCount;
    internal bool IsCRCSucceed;
    internal UInt32 crcValue;
    private int beginversion;
    private int m_iLastPivotTableIndex;
    internal Dictionary`2<string, List`1<Stream>> m_childElements;
    internal Dictionary`2<string, List`1<Stream>> m_childElementValues;
    internal int XmlInvalidCharCount;
    private bool m_IsDisposed;
    private ExternalConnectionCollection m_connections;
    private ExternalConnectionCollection m_deletedConnections;
    private List`1<BiffRecordRaw> m_externalConnection;
    private bool m_bParseOnDemand;
    private RecalcIdRecord m_reCalcId;
    private UInt32 m_uCalcIdentifier;
    private bool m_isCellModified;
    internal ExcelVersion originalVersion;
    private List`1<string> m_preservedExternalLinks;
    private string m_algorithmName;
    private Byte[] m_hashValue;
    private Byte[] m_saltValue;
    private UInt32 m_spinCount;
    private String[] m_customPatterns;
    private String[] m_DateTimePatterns;
    private bool m_isConverting;
    internal Dictionary`2<int, int> m_usedCellStyleIndex;
    internal int m_XFRemovedCount;
    internal int m_XFstartIndex;
    internal bool m_bisXFStartIndexFound;
    internal bool m_bisUnusedXFRemoved;
    internal bool m_bisXml;
    internal bool m_bisStylesCopied;
    internal bool m_bisCopy;
    internal bool m_bisVersionSet;
    private XmlMapCollection m_xmlMaps;
    private Dictionary`2<string, List`1<string>> m_precedentsCache;
    private Dictionary`2<int, int> m_arrNewNumberFormatIndexes;
    private bool m_calcEngineEnabledOnReadWrite;
    private IVbaProject m_vbaProject;
    private ICompoundStorage m_macroStorage;
    private Dictionary`2<int, ShapeLineFormatImpl> m_lineStyles;
    private string m_substituteFontName;
    private bool m_isColorPalette;
    private List`1<string> m_slicerCacheID;
    private string m_slicerCacheUri;
    private List`1<Tuple`2<int, string>> m_pivotSlicerCacheCollection;
    private List`1<Tuple`2<int, string>> m_pivotSlicerCacheIds;
    private bool m_isSlicerParsed;
    private Stream m_extStream;
    private List`1<string> m_slicerNames;
    private Dictionary`2<string, int> m_lambdaFormulaArgument;
    private static Dictionary`2<ExcelSheetType, string> SheetTypeToName;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler MacroNameChanged;
    [CompilerGeneratedAttribute]
private EventHandler OnFileSaved;
    [CompilerGeneratedAttribute]
private ReadOnlyFileEventHandler OnReadOnlyFile;
    private Byte[] m_calcEnginePreviousValues;
    internal VbaModule VbaModule { get; }
    internal ICompoundStorage MacroStorage { get; internal set; }
    public IVbaProject VbaProject { get; internal set; }
    internal bool HasVbaProject { get; }
    internal List`1<Tuple`2<int, string>> PivotSlicerCacheCollection { get; }
    internal List`1<Tuple`2<int, string>> PivotSlicerCacheIds { get; }
    public IWorksheet ActiveSheet { get; }
    internal ITabSheet ActiveTabSheet { get; }
    internal List`1<string> PreservedExternalLinks { get; }
    public int ActiveSheetIndex { get; public set; }
    internal bool ShowSheetTabs { get; internal set; }
    public string Author { get; public set; }
    public IBuiltInDocumentProperties BuiltInDocumentProperties { get; }
    public string CodeName { get; public set; }
    public bool HidePivotFieldList { get; public set; }
    public string DefaultThemeVersion { get; public set; }
    public ICustomDocumentProperties CustomDocumentProperties { get; }
    public IMetaProperties ContentTypeProperties { get; }
    public ICustomXmlPartCollection CustomXmlparts { get; }
    public bool Date1904 { get; public set; }
    public bool PrecisionAsDisplayed { get; public set; }
    public bool IsCellProtection { get; }
    public bool IsWindowProtection { get; }
    public INames Names { get; }
    internal List`1<BiffRecordRaw> PreserveExternalConnectionDetails { get; }
    public bool ReadOnly { get; internal set; }
    public bool Saved { get; public set; }
    public IStyles Styles { get; }
    public IWorksheets Worksheets { get; }
    public IConnections Connections { get; }
    public bool HasMacros { get; internal set; }
    public IConnections DeletedConnections { get; }
    public Color[] Palettte { get; }
    public Color[] Palette { get; }
    public int DisplayedTab { get; public set; }
    public ICharts Charts { get; }
    public bool ThrowOnUnknownNames { get; public set; }
    public bool IsHScrollBarVisible { get; public set; }
    public bool IsVScrollBarVisible { get; public set; }
    public bool DisableMacrosStart { get; public set; }
    public double StandardFontSize { get; public set; }
    internal bool HasStandardFont { get; }
    public string StandardFont { get; public set; }
    public bool Allow3DRangesInDataValidation { get; public set; }
    public IAddInFunctions AddInFunctions { get; }
    public ICalculationOptions CalculationOptions { get; }
    public string RowSeparator { get; }
    public string ArgumentsSeparator { get; }
    public IWorksheetGroup WorksheetGroup { get; }
    public bool IsRightToLeft { get; public set; }
    public bool DisplayWorkbookTabs { get; public set; }
    public ITabSheets TabSheets { get; }
    public bool DetectDateTimeInValue { get; public set; }
    public bool UseFastStringSearching { get; public set; }
    public bool ReadOnlyRecommended { get; public set; }
    public string PasswordToOpen { get; public set; }
    public int MaxRowCount { get; }
    public int MaxColumnCount { get; }
    public int MaxXFCount { get; }
    public int MaxIndent { get; }
    public int MaxImportColumns { get; public set; }
    internal int StyleArrayCount { get; internal set; }
    internal bool IsSlicerParsed { get; internal set; }
    internal Stream ExtStream { get; internal set; }
    internal Dictionary`2<string, int> LambdaFormulaArgument { get; }
    internal bool IsColorPalette { get; internal set; }
    internal Dictionary`2<string, Person> PersonDictionary { get; }
    internal List`1<string> SlicerCacheID { get; internal set; }
    internal string SlicerCacheUri { get; internal set; }
    internal bool HasThreadedComment { get; }
    internal int PivotTableCount { get; internal set; }
    internal bool IsUnusedXFRemoved { get; }
    public ITableStyles TableStyles { get; }
    internal List`1<ISlicerCache> SlicerCacheCollection { get; internal set; }
    internal Dictionary`2<string, List`1<int>> WorkbookFormulas { get; internal set; }
    internal int BookCFPriorityCount { get; internal set; }
    internal bool OwnPalette { get; internal set; }
    internal bool EnabledCalcEngine { get; internal set; }
    internal ExcelParseOptions Options { get; internal set; }
    internal int LastPivotTableIndex { get; internal set; }
    internal List`1<Stream> PreservesPivotCache { get; }
    internal List`1<int> ArrayFontIndex { get; internal set; }
    public FileDataHolder DataHolder { get; }
    public WorkbookNamesCollection InnerNamesColection { get; }
    public MetaPropertiesImpl InnerContentTypeProperties { get; }
    public CustomXmlPartCollection InnerCustomXmlParts { get; }
    public AddInFunctionsCollection InnerAddInFunctions { get; }
    public string FullFileName { get; internal set; }
    public FontsCollection InnerFonts { get; }
    public ExtendedFormatsCollection InnerExtFormats { get; }
    public FormatsCollection InnerFormats { get; }
    public SSTDictionary InnerSST { get; }
    public bool Loading { get; public set; }
    public bool Saving { get; internal set; }
    [CLSCompliantAttribute("False")]
public WindowOneRecord WindowOne { get; }
    public int ObjectCount { get; }
    public double MaxDigitWidth { get; internal set; }
    internal Stream SSTStream { get; internal set; }
    internal bool HasInlineStrings { get; internal set; }
    internal PasswordRecord Password { get; internal set; }
    [CLSCompliantAttribute("False")]
protected PasswordRev4Record PasswordRev4 { get; protected set; }
    [CLSCompliantAttribute("False")]
protected ProtectionRev4Record ProtectionRev4 { get; protected set; }
    public int CurrentObjectId { get; public set; }
    public int CurrentHeaderId { get; public set; }
    protected internal List`1<ExtendedFormatRecord> InnerExtFormatRecords { get; }
    protected internal List`1<ExtendedXFRecord> InnerXFExtRecords { get; }
    protected internal WorkbookObjectsCollection Objects { get; internal set; }
    protected internal StylesCollection InnerStyles { get; }
    protected internal WorksheetsCollection InnerWorksheets { get; }
    protected internal ChartsCollection InnerCharts { get; }
    internal List`1<DialogSheet> InnerDialogs { get; }
    internal List`1<MacroSheet> InnerMacros { get; }
    public ExternBookCollection ExternWorkbooks { get; }
    public CalculationOptionsImpl InnerCalculation { get; }
    [CLSCompliantAttribute("False")]
public FormulaUtil FormulaUtil { get; }
    public WorksheetGroup InnerWorksheetGroup { get; }
    internal Nullable`1<bool> IsStartsOrEndsWith { get; internal set; }
    public bool HasDuplicatedNames { get; public set; }
    public WorkbookShapeDataImpl ShapesData { get; }
    public WorkbookShapeDataImpl HeaderFooterData { get; }
    internal ExternSheetRecord ExternSheet { get; }
    protected internal bool InternalSaved { get; protected internal set; }
    public int FirstCharSize { get; public set; }
    public int SecondCharSize { get; public set; }
    internal bool IsConverted { get; }
    public int BeginVersion { get; public set; }
    internal DataSorter DataSorter { get; internal set; }
    internal bool IsStrict { get; internal set; }
    public ExcelVersion Version { get; public set; }
    public int DefaultXFIndex { get; public set; }
    public List`1<Color> InnerPalette { get; }
    public IntPtr HeapHandle { get; }
    public PivotCacheCollection PivotCaches { get; }
    private IPivotCaches Syncfusion.XlsIO.IWorkbook.PivotCaches { get; }
    public Stream ControlsStream { get; internal set; }
    internal Stream CustomTableStylesStream { get; internal set; }
    public int MaxTableIndex { get; public set; }
    internal bool IsCreated { get; }
    internal bool IsConverting { get; internal set; }
    public bool IsLoaded { get; }
    internal Dictionary`2<string, FontImpl> MajorFonts { get; internal set; }
    internal Dictionary`2<string, FontImpl> MinorFonts { get; internal set; }
    internal Dictionary`2<int, ShapeLineFormatImpl> LineStyles { get; internal set; }
    public bool CheckCompability { get; public set; }
    internal bool HasApostrophe { get; internal set; }
    internal bool ParseOnDemand { get; internal set; }
    internal bool IsCellModified { get; internal set; }
    public string AlgorithmName { get; public set; }
    public Byte[] HashValue { get; public set; }
    public Byte[] SaltValue { get; public set; }
    public UInt32 SpinCount { get; public set; }
    internal String[] DateTimePatterns { get; }
    public XmlMapCollection XmlMaps { get; internal set; }
    internal bool HasFileSharing { get; }
    internal Dictionary`2<string, List`1<string>> PrecedentsCache { get; internal set; }
    internal Dictionary`2<int, int> ArrNewNumberFormatIndexes { get; internal set; }
    internal bool CalcEngineEnabledOnReadWrite { get; internal set; }
    internal string SubstituteFontName { get; internal set; }
    internal List`1<string> SlicerNames { get; internal set; }
    internal bool IsEqualColor { get; }
    public double StandardRowHeight { get; public set; }
    public int StandardRowHeightInPixels { get; public set; }
    private static WorkbookImpl();
    public WorkbookImpl(IApplication application, object parent, ExcelVersion version);
    public WorkbookImpl(IApplication application, object parent, int sheetQuantity, ExcelVersion version);
    public WorkbookImpl(IApplication application, object parent, Stream stream, ExcelParseOptions options, bool bReadOnly, string password, ExcelVersion version);
    public WorkbookImpl(IApplication application, object parent, Stream stream, string separator, int row, int column, ExcelVersion version, string fileName, Encoding encoding);
    public WorkbookImpl(IApplication application, object parent, Stream stream, ExcelVersion version);
    public WorkbookImpl(IApplication application, object parent, Stream stream, ExcelParseOptions options, ExcelVersion version);
    public WorkbookImpl(IApplication application, object parent, XmlReader reader, ExcelXmlOpenType openType);
    [CompilerGeneratedAttribute]
internal void add_WarningCallBack(WarningEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_WarningCallBack(WarningEventHandler value);
    internal VbaModule get_VbaModule();
    internal ICompoundStorage get_MacroStorage();
    internal void set_MacroStorage(ICompoundStorage value);
    public sealed virtual IVbaProject get_VbaProject();
    internal void set_VbaProject(IVbaProject value);
    internal bool get_HasVbaProject();
    internal List`1<Tuple`2<int, string>> get_PivotSlicerCacheCollection();
    internal List`1<Tuple`2<int, string>> get_PivotSlicerCacheIds();
    public sealed virtual IWorksheet get_ActiveSheet();
    internal ITabSheet get_ActiveTabSheet();
    internal List`1<string> get_PreservedExternalLinks();
    public sealed virtual int get_ActiveSheetIndex();
    public sealed virtual void set_ActiveSheetIndex(int value);
    internal bool get_ShowSheetTabs();
    internal void set_ShowSheetTabs(bool value);
    public sealed virtual string get_Author();
    public sealed virtual void set_Author(string value);
    public sealed virtual IBuiltInDocumentProperties get_BuiltInDocumentProperties();
    [CompilerGeneratedAttribute]
internal void add_MacroNameChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_MacroNameChanged(ValueChangedEventHandler value);
    public sealed virtual string get_CodeName();
    public sealed virtual void set_CodeName(string value);
    public bool get_HidePivotFieldList();
    public void set_HidePivotFieldList(bool value);
    public string get_DefaultThemeVersion();
    public void set_DefaultThemeVersion(string value);
    public sealed virtual ICustomDocumentProperties get_CustomDocumentProperties();
    public sealed virtual IMetaProperties get_ContentTypeProperties();
    public sealed virtual ICustomXmlPartCollection get_CustomXmlparts();
    public sealed virtual bool get_Date1904();
    public sealed virtual void set_Date1904(bool value);
    public sealed virtual bool get_PrecisionAsDisplayed();
    public sealed virtual void set_PrecisionAsDisplayed(bool value);
    public sealed virtual bool get_IsCellProtection();
    public sealed virtual bool get_IsWindowProtection();
    [DebuggerStepThroughAttribute]
public sealed virtual INames get_Names();
    internal List`1<BiffRecordRaw> get_PreserveExternalConnectionDetails();
    public sealed virtual bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    public sealed virtual bool get_Saved();
    public sealed virtual void set_Saved(bool value);
    internal IRange TryParseTableOrNamedRange(string value, WorksheetImpl workSheet);
    private IRange GetTableRangeFromValues(string tableName, bool isAll, bool isHeaders, bool isFirstRow, String[] columnsFromTo, WorksheetImpl workSheet);
    private IListObject GetTable(WorksheetImpl workSheet, string tableName);
    [DebuggerStepThroughAttribute]
public sealed virtual IStyles get_Styles();
    [DebuggerStepThroughAttribute]
public sealed virtual IWorksheets get_Worksheets();
    [DebuggerStepThroughAttribute]
public sealed virtual IConnections get_Connections();
    public sealed virtual bool get_HasMacros();
    internal void set_HasMacros(bool value);
    public IConnections get_DeletedConnections();
    public sealed virtual Color[] get_Palettte();
    public sealed virtual Color[] get_Palette();
    public sealed virtual int get_DisplayedTab();
    public sealed virtual void set_DisplayedTab(int value);
    public sealed virtual ICharts get_Charts();
    public sealed virtual bool get_ThrowOnUnknownNames();
    public sealed virtual void set_ThrowOnUnknownNames(bool value);
    public sealed virtual bool get_IsHScrollBarVisible();
    public sealed virtual void set_IsHScrollBarVisible(bool value);
    public sealed virtual bool get_IsVScrollBarVisible();
    public sealed virtual void set_IsVScrollBarVisible(bool value);
    public sealed virtual bool get_DisableMacrosStart();
    public sealed virtual void set_DisableMacrosStart(bool value);
    public sealed virtual double get_StandardFontSize();
    public sealed virtual void set_StandardFontSize(double value);
    internal bool get_HasStandardFont();
    public sealed virtual string get_StandardFont();
    public sealed virtual void set_StandardFont(string value);
    public sealed virtual bool get_Allow3DRangesInDataValidation();
    public sealed virtual void set_Allow3DRangesInDataValidation(bool value);
    public sealed virtual IAddInFunctions get_AddInFunctions();
    public sealed virtual ICalculationOptions get_CalculationOptions();
    public sealed virtual string get_RowSeparator();
    public sealed virtual string get_ArgumentsSeparator();
    public sealed virtual IWorksheetGroup get_WorksheetGroup();
    public sealed virtual bool get_IsRightToLeft();
    public sealed virtual void set_IsRightToLeft(bool value);
    public sealed virtual bool get_DisplayWorkbookTabs();
    public sealed virtual void set_DisplayWorkbookTabs(bool value);
    public sealed virtual ITabSheets get_TabSheets();
    public sealed virtual bool get_DetectDateTimeInValue();
    public sealed virtual void set_DetectDateTimeInValue(bool value);
    public sealed virtual bool get_UseFastStringSearching();
    public sealed virtual void set_UseFastStringSearching(bool value);
    public sealed virtual bool get_ReadOnlyRecommended();
    public sealed virtual void set_ReadOnlyRecommended(bool value);
    public sealed virtual string get_PasswordToOpen();
    public sealed virtual void set_PasswordToOpen(string value);
    public sealed virtual int get_MaxRowCount();
    public sealed virtual int get_MaxColumnCount();
    public int get_MaxXFCount();
    public int get_MaxIndent();
    public int get_MaxImportColumns();
    public void set_MaxImportColumns(int value);
    internal int get_StyleArrayCount();
    internal void set_StyleArrayCount(int value);
    internal bool get_IsSlicerParsed();
    internal void set_IsSlicerParsed(bool value);
    internal Stream get_ExtStream();
    internal void set_ExtStream(Stream value);
    internal Dictionary`2<string, int> get_LambdaFormulaArgument();
    internal bool get_IsColorPalette();
    internal void set_IsColorPalette(bool value);
    internal Dictionary`2<string, Person> get_PersonDictionary();
    internal List`1<string> get_SlicerCacheID();
    internal void set_SlicerCacheID(List`1<string> value);
    internal string get_SlicerCacheUri();
    internal void set_SlicerCacheUri(string value);
    internal bool get_HasThreadedComment();
    internal int get_PivotTableCount();
    internal void set_PivotTableCount(int value);
    internal bool get_IsUnusedXFRemoved();
    public sealed virtual ITableStyles get_TableStyles();
    internal List`1<ISlicerCache> get_SlicerCacheCollection();
    internal void set_SlicerCacheCollection(List`1<ISlicerCache> value);
    internal Dictionary`2<string, List`1<int>> get_WorkbookFormulas();
    internal void set_WorkbookFormulas(Dictionary`2<string, List`1<int>> value);
    internal int get_BookCFPriorityCount();
    internal void set_BookCFPriorityCount(int value);
    internal bool get_OwnPalette();
    internal void set_OwnPalette(bool value);
    internal bool get_EnabledCalcEngine();
    internal void set_EnabledCalcEngine(bool value);
    internal ExcelParseOptions get_Options();
    internal void set_Options(ExcelParseOptions value);
    internal int get_LastPivotTableIndex();
    internal void set_LastPivotTableIndex(int value);
    internal List`1<Stream> get_PreservesPivotCache();
    internal List`1<int> get_ArrayFontIndex();
    internal void set_ArrayFontIndex(List`1<int> value);
    public FileDataHolder get_DataHolder();
    [DebuggerStepThroughAttribute]
public WorkbookNamesCollection get_InnerNamesColection();
    [DebuggerStepThroughAttribute]
public MetaPropertiesImpl get_InnerContentTypeProperties();
    [DebuggerStepThroughAttribute]
public CustomXmlPartCollection get_InnerCustomXmlParts();
    [DebuggerStepThroughAttribute]
public AddInFunctionsCollection get_InnerAddInFunctions();
    [DebuggerStepThroughAttribute]
public string get_FullFileName();
    [DebuggerStepThroughAttribute]
internal void set_FullFileName(string value);
    [DebuggerStepThroughAttribute]
public FontsCollection get_InnerFonts();
    [DebuggerStepThroughAttribute]
public ExtendedFormatsCollection get_InnerExtFormats();
    [DebuggerStepThroughAttribute]
public FormatsCollection get_InnerFormats();
    [DebuggerStepThroughAttribute]
public SSTDictionary get_InnerSST();
    [DebuggerStepThroughAttribute]
public bool get_Loading();
    [DebuggerStepThroughAttribute]
public void set_Loading(bool value);
    [DebuggerStepThroughAttribute]
public bool get_Saving();
    [DebuggerStepThroughAttribute]
internal void set_Saving(bool value);
    public WindowOneRecord get_WindowOne();
    public int get_ObjectCount();
    public double get_MaxDigitWidth();
    internal void set_MaxDigitWidth(double value);
    internal Stream get_SSTStream();
    internal void set_SSTStream(Stream value);
    internal bool get_HasInlineStrings();
    internal void set_HasInlineStrings(bool value);
    internal PasswordRecord get_Password();
    internal void set_Password(PasswordRecord value);
    protected PasswordRev4Record get_PasswordRev4();
    protected void set_PasswordRev4(PasswordRev4Record value);
    protected ProtectionRev4Record get_ProtectionRev4();
    protected void set_ProtectionRev4(ProtectionRev4Record value);
    public int get_CurrentObjectId();
    public void set_CurrentObjectId(int value);
    public int get_CurrentHeaderId();
    public void set_CurrentHeaderId(int value);
    protected internal List`1<ExtendedFormatRecord> get_InnerExtFormatRecords();
    protected internal List`1<ExtendedXFRecord> get_InnerXFExtRecords();
    protected internal WorkbookObjectsCollection get_Objects();
    internal void set_Objects(WorkbookObjectsCollection value);
    protected internal StylesCollection get_InnerStyles();
    protected internal WorksheetsCollection get_InnerWorksheets();
    protected internal ChartsCollection get_InnerCharts();
    internal List`1<DialogSheet> get_InnerDialogs();
    internal List`1<MacroSheet> get_InnerMacros();
    public ExternBookCollection get_ExternWorkbooks();
    public CalculationOptionsImpl get_InnerCalculation();
    public FormulaUtil get_FormulaUtil();
    public WorksheetGroup get_InnerWorksheetGroup();
    internal Nullable`1<bool> get_IsStartsOrEndsWith();
    internal void set_IsStartsOrEndsWith(Nullable`1<bool> value);
    public bool get_HasDuplicatedNames();
    public void set_HasDuplicatedNames(bool value);
    public WorkbookShapeDataImpl get_ShapesData();
    public WorkbookShapeDataImpl get_HeaderFooterData();
    internal ExternSheetRecord get_ExternSheet();
    protected internal bool get_InternalSaved();
    protected internal void set_InternalSaved(bool value);
    public int get_FirstCharSize();
    public void set_FirstCharSize(int value);
    public int get_SecondCharSize();
    public void set_SecondCharSize(int value);
    internal bool get_IsConverted();
    public int get_BeginVersion();
    public void set_BeginVersion(int value);
    internal DataSorter get_DataSorter();
    internal void set_DataSorter(DataSorter value);
    internal bool get_IsStrict();
    internal void set_IsStrict(bool value);
    public sealed virtual ExcelVersion get_Version();
    public sealed virtual void set_Version(ExcelVersion value);
    private void ClearPivotCaches();
    public int get_DefaultXFIndex();
    public void set_DefaultXFIndex(int value);
    public List`1<Color> get_InnerPalette();
    public IntPtr get_HeapHandle();
    public PivotCacheCollection get_PivotCaches();
    private sealed virtual override IPivotCaches Syncfusion.XlsIO.IWorkbook.get_PivotCaches();
    public Stream get_ControlsStream();
    internal void set_ControlsStream(Stream value);
    internal Stream get_CustomTableStylesStream();
    internal void set_CustomTableStylesStream(Stream value);
    public int get_MaxTableIndex();
    public void set_MaxTableIndex(int value);
    internal bool get_IsCreated();
    internal bool get_IsConverting();
    internal void set_IsConverting(bool value);
    public bool get_IsLoaded();
    internal Dictionary`2<string, FontImpl> get_MajorFonts();
    internal void set_MajorFonts(Dictionary`2<string, FontImpl> value);
    internal Dictionary`2<string, FontImpl> get_MinorFonts();
    internal void set_MinorFonts(Dictionary`2<string, FontImpl> value);
    internal Dictionary`2<int, ShapeLineFormatImpl> get_LineStyles();
    internal void set_LineStyles(Dictionary`2<int, ShapeLineFormatImpl> value);
    public bool get_CheckCompability();
    public void set_CheckCompability(bool value);
    internal bool get_HasApostrophe();
    internal void set_HasApostrophe(bool value);
    internal bool get_ParseOnDemand();
    internal void set_ParseOnDemand(bool value);
    internal bool get_IsCellModified();
    internal void set_IsCellModified(bool value);
    public string get_AlgorithmName();
    public void set_AlgorithmName(string value);
    public Byte[] get_HashValue();
    public void set_HashValue(Byte[] value);
    public Byte[] get_SaltValue();
    public void set_SaltValue(Byte[] value);
    public UInt32 get_SpinCount();
    public void set_SpinCount(UInt32 value);
    internal String[] get_DateTimePatterns();
    public sealed virtual XmlMapCollection get_XmlMaps();
    internal void set_XmlMaps(XmlMapCollection value);
    internal bool get_HasFileSharing();
    internal Dictionary`2<string, List`1<string>> get_PrecedentsCache();
    internal void set_PrecedentsCache(Dictionary`2<string, List`1<string>> value);
    internal Dictionary`2<int, int> get_ArrNewNumberFormatIndexes();
    internal void set_ArrNewNumberFormatIndexes(Dictionary`2<int, int> value);
    internal bool get_CalcEngineEnabledOnReadWrite();
    internal void set_CalcEngineEnabledOnReadWrite(bool value);
    internal string get_SubstituteFontName();
    internal void set_SubstituteFontName(string value);
    internal List`1<string> get_SlicerNames();
    internal void set_SlicerNames(List`1<string> value);
    internal string GenerateGUID();
    internal void RaiseWarning(string description, WarningType type);
    public Color GetThemeColor(int color);
    internal Color GetThemeColor2013(int color);
    protected internal IExtendedFormat CreateExtFormat(bool bForceAdd);
    protected internal IExtendedFormat CreateExtFormat(IExtendedFormat baseFormat, bool bForceAdd);
    internal bool get_IsEqualColor();
    protected internal ExtendedFormatImpl CreateExtFormatWithoutRegister(IExtendedFormat baseFormat);
    protected internal ExtendedFormatImpl RegisterExtFormat(ExtendedFormatImpl format);
    protected internal ExtendedFormatImpl RegisterExtFormat(ExtendedFormatImpl format, bool forceAdd);
    internal int InsertSelfSupbook();
    protected internal int AddSheetReference(string inputSheetName);
    internal string GetFilePath(string strUrl);
    internal string GetWorkbookName(WorkbookImpl workbook);
    internal string GetFileName(string url);
    private int AddExternSheetReference(string strBookName, string strSheetName);
    protected internal int AddSheetReference(IWorksheet sheet);
    protected internal int AddSheetReference(IWorksheet sheet, IWorksheet lastSheet);
    protected internal int AddSheetReference(ITabSheet sheet);
    protected internal int AddSheetReference(int supIndex, int firstSheetIndex, int lastSheetIndex);
    protected internal int AddBrokenSheetReference();
    internal int AddBrokenBookReference();
    protected internal void DecreaseSheetIndex(int index);
    protected internal void IncreaseSheetIndex(int index);
    protected internal void MoveSheetIndex(int iOldIndex, int iNewIndex);
    protected internal void UpdateActiveSheetAfterMove(int iOldIndex, int iNewIndex);
    private int GetMovedSheetIndex(int iCurIndex, int iOldIndex, int iNewIndex);
    protected internal string GetSheetNameByReference(int reference);
    protected internal string GetSheetNameByReference(int reference, bool completePath);
    internal string GetSheetNameByReference(int reference, bool throwArgumentOutOfRange, bool completePath);
    private string GetExternalSheetNameByReference(ExternWorkbookImpl book, TREF reference, int iSupBook, bool completePath);
    private string GetInternalSheetNameByReference(TREF reference);
    private string GetDirectoryName(string url);
    protected internal IWorksheet GetSheetByReference(int reference);
    protected internal IWorksheet GetSheetByReference(int reference, bool bThrowExceptions);
    protected internal void CheckForInternalReference(int iRef);
    protected internal bool IsLocalReference(int reference);
    public bool IsExternalReference(int reference);
    internal void AddForReparse(IReparse reparse);
    protected internal int CurrentStyleNumber(string pre);
    protected double Sqr(double value);
    protected internal double ColorDistance(Color color1, Color color2);
    public void ClearInternalReferences();
    private void RaiseSavedEvent();
    public IExtendedFormat GetExtFormat(int index);
    public void UpdateFormula(IRange sourceRange, IRange destRange);
    public void UpdateFormula(int iSourceIndex, Rectangle rectSource, int iDestIndex, Rectangle rectDest);
    public int GetReferenceIndex(int iNameBookIndex);
    public int GetBookIndex(int iReferenceIndex);
    public ExternWorksheetImpl GetExternSheet(int referenceIndex);
    public string DecodeName(string strName);
    private static char GetDriveName();
    public string EncodeName(string strName);
    [CLSCompliantAttribute("False")]
public bool ModifyRecordToSkipStyle(BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
public void ModifyRecordToSkipStyle(BiffRecordRaw[] arrRecords);
    private bool CompareColors(Color color1, Color color2);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use RemoveExtendedFormatIndex(int xfIndex) method. Sorry for inconvenience.")]
public void RemoveExtenededFormatIndex(int xfIndex);
    public void RemoveExtendedFormatIndex(int xfIndex);
    private bool CheckProtectionContent(IWorksheet sheet);
    private void OptimizeReferences();
    private void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    public void UpdatePivotCachesAfterInsertRemove(WorksheetImpl worksheet, int index, int count, bool isRow, bool isRemove);
    internal Stack`1<object> GetStackOfRange(Ptg[] arrPtgs, WorksheetImpl sheet);
    internal void InitializePrecedentsCache();
    internal bool StartsWith(string mainString, string startString);
    internal bool EndsWith(string mainString, string endString);
    internal bool EndsWith(string str1, char character);
    protected void InitializeCollections();
    internal void InsertDefaultValues();
    protected void InsertDefaultExtFormats();
    protected void InsertDefaultStyles();
    protected void InsertDefaultStyles(List`1<StyleRecord> arrStyles);
    private void AddDefaultStyle(StyleImpl stout);
    [CLSCompliantAttribute("False")]
protected ExtendedFormatRecord GetDefaultXF(int index);
    [CLSCompliantAttribute("False")]
protected ExtendedXFRecord GetDefaultXFExt();
    private StyleRecord FindStyle(List`1<StyleRecord> arrStyles, StyleRecord style);
    private bool CompareDefaultStyleRecords(StyleRecord style1, StyleRecord style2);
    internal void InsertDefaultFonts();
    internal void DisposeAll();
    protected void ClearAll();
    internal void ClearExtendedFormats();
    private void CreatePivotCache(ICompoundStorage storage, IDecryptor decryptor);
    private void ParseStgStream(ICompoundStorage storage, ExcelParseOptions options, string password);
    private void ReadControlsData(ICompoundStorage storage);
    private void ExtractControlProperties(ICompoundStorage storage);
    private static string FindStreamCaseInsensitive(ICompoundStorage storage, string streamName);
    private void ParseExcel2007Stream(Stream stream, string password, bool parseOnDemand);
    private void ParseStream(Stream stream, string password, ExcelVersion version, ExcelParseOptions options);
    protected virtual override void Finalize();
    private void Parse(BiffReader reader);
    private IDecryptor Parse(BiffReader reader, ExcelParseOptions options, string password);
    private void ParsePivotRecords(List`1<BiffRecordRaw> arrPivotRecords);
    private IDecryptor CreateDecryption(BiffReader reader, ExcelParseOptions options, string password);
    private ExtendedFormatRecord RecheckExtendedFormatRecord(ExtendedFormatRecord xf);
    private FormatRecord RecheckFormatRecord(FormatRecord format, Int32& m_newValue);
    private List`1<PivotCacheInfo> CreatePivotCacheInfos(List`1<BiffRecordRaw> arrPivotRecords);
    private void NormalizeBorders(ExtendedFormatRecord xf);
    private IDecryptor CreateDecryptor(string password, FilePassRecord filePass);
    private IDecryptor CreateDecryptionForRc4(string password, FilePassRecord filePass);
    private void CheckPasswordFirstTime(String& password, IDecryptor& decryptor, FilePassStandardBlock standardBlock);
    private bool CheckStandardPassword(IDecryptor& result, FilePassStandardBlock standardBlock);
    private bool CheckStrongPassword(string password, FilePassStrongBlock strongBlock);
    private IEncryptor CreateEncryptor();
    private void ParseSSTRecord(SSTRecord sst, ExcelParseOptions options);
    internal void PrepareStyles(bool bIgnoreStyles, List`1<StyleRecord> arrStyles, Dictionary`2<int, int> hashNewXFormatIndexes);
    private void PrepareExtendedFormats(bool bIgnoreStyle, List`1<StyleRecord> arrStyles);
    private void ParseAutoFilters();
    private void ExtractWorksheetsFromStream(BiffReader reader, ExcelParseOptions options, int iFirstSheet, int iLastSheet, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    private void ReadWorksheetsData(BiffReader reader, ExcelParseOptions options, int iFirstSheet, int iLastSheet, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    private void PrepareNames();
    private void ParseNames();
    private void ParseWorksheets();
    internal void ParseWorksheetsOnDemand();
    private void Reparse();
    private void CreateAllStyles(List`1<StyleRecord> arrStyles);
    private StyleRecord FindStyleRecord(List`1<StyleRecord> arrStyles, int formatIndex, Int32& iStyleIndex);
    private StyleRecord[] GetDefaultStyles();
    private void CreateStyleForEachFormat(Dictionary`2<int, int> hashNewXFormatIndexes);
    private void ReadDocumentProperties(ICompoundStorage storage);
    private void ReadDocumentPropertiesManaged(ICompoundStorage storage);
    internal void ParseSlicers();
    public sealed virtual IDataSort CreateDataSorter();
    public sealed virtual void Activate();
    public void Close(string Filename);
    public sealed virtual void Close(bool SaveChanges, string Filename);
    public sealed virtual void Close(bool saveChanges);
    public sealed virtual void Close();
    public sealed virtual ITemplateMarkersProcessor CreateTemplateMarkersProcessor();
    public sealed virtual void MarkAsFinal();
    public sealed virtual void SaveAsHtml(Stream stream, HtmlSaveOptions saveOption);
    public sealed virtual void SaveAsHtml(Stream stream);
    private IdReserver PrepareShapes(ShapesGetterMethod shapesGetter);
    private void RegisterNewShapes(IdReserver shapeIdReserver, ShapesGetterMethod shapesGetter);
    private void UpdateAddedShapes(IdReserver shapeIdReserver, ShapesGetterMethod shapesGetter);
    private void AssignNewIndexes(IdReserver shapeIdReserver, ShapeCollectionBase shapes);
    private int GetShapesFreeIndexes(IdReserver shapeIdReserver, ShapeCollectionBase shapes);
    private int GetShapesWithoutId(ShapeCollectionBase shapes);
    private void RegisterNewShapeCollections(IdReserver shapeIdReserver, ShapesGetterMethod shapesGetter);
    private void AssignIndexes(IdReserver shapeIdReserver, ShapeCollectionBase shapes);
    private IdReserver FillReserverFromShapes(ShapesGetterMethod shapesGetter, Boolean& bChanged);
    private bool ReIndexShapeCollections(ShapesGetterMethod shapesGetter);
    private int GetMaxCollectionIndex(ShapesGetterMethod shapesGetter);
    [IteratorStateMachineAttribute("Syncfusion.XlsIO.Implementation.WorkbookImpl/<EnumerateShapes>d__825")]
internal IEnumerable`1<ShapeCollectionBase> EnumerateShapes(ShapesGetterMethod shapesGetter);
    private ShapeCollectionBase GetWorksheetShapes(ITabSheet sheet);
    private ShapeCollectionBase GetHeaderFooterShapes(ITabSheet sheet);
    private void PrepareShapes();
    public sealed virtual void SaveAs(Stream stream, string separator);
    public sealed virtual void SaveAs(Stream stream, string separator, Encoding encoding);
    private void SaveAsInternal(Stream stream, string separator, Encoding encoding);
    public void SaveAsXmlInternal(XmlWriter writer, ExcelXmlSaveType saveType);
    public void SaveAsXml(XmlWriter writer, ExcelXmlSaveType saveType);
    public void SaveAsXml(string strFileName, ExcelXmlSaveType saveType);
    public sealed virtual void SaveAsXml(Stream stream, ExcelXmlSaveType saveType);
    private string GetContentTypeString(ExcelHttpContentType contentType);
    public sealed virtual void SaveAs(Stream stream);
    public sealed virtual void SaveAs(Stream stream, ExcelSaveType saveType);
    private void SaveAsInternal(Stream stream, ExcelSaveType saveType);
    internal void SaveAsODS(Stream stream);
    public sealed virtual void SaveAsJson(string fileName);
    public sealed virtual void SaveAsJson(string fileName, bool isSchema);
    public sealed virtual void SaveAsJson(string fileName, IWorksheet worksheet);
    public sealed virtual void SaveAsJson(string fileName, IWorksheet worksheet, bool isSchema);
    public sealed virtual void SaveAsJson(string fileName, IRange range);
    public sealed virtual void SaveAsJson(string fileName, IRange range, bool isSchema);
    public sealed virtual void SaveAsJson(Stream stream);
    public sealed virtual void SaveAsJson(Stream stream, bool isSchema);
    public sealed virtual void SaveAsJson(Stream stream, IWorksheet worksheet);
    public sealed virtual void SaveAsJson(Stream stream, IWorksheet worksheet, bool isSchema);
    public sealed virtual void SaveAsJson(Stream stream, IRange range);
    public sealed virtual void SaveAsJson(Stream stream, IRange range, bool isSchema);
    private static void SerializeJsonWithSchema(JsonWriter writer, IWorksheet worksheet);
    private static void SerializeJsonWithSchema(JsonWriter writer, IRange range);
    private static void SerializeJsonWithoutSchema(JsonWriter writer, IRange range);
    private String[] GetDocParts();
    private Object[] GetHeadingPairs();
    private Dictionary`2<ExcelSheetType, int> GetHashHeadingPairs();
    public sealed virtual void SetPaletteColor(int index, Color color);
    public void CopyPaletteColorTo(WorkbookImpl destinationWorkbook);
    public sealed virtual void ResetPalette();
    public sealed virtual Color GetPaletteColor(ExcelKnownColors color);
    public sealed virtual ExcelKnownColors GetNearestColor(Color color);
    public ExcelKnownColors GetNearestColor(Color color, int iStartIndex);
    public sealed virtual ExcelKnownColors GetNearestColor(int r, int g, int b);
    public sealed virtual ExcelKnownColors SetColorOrGetNearest(Color color);
    public sealed virtual ExcelKnownColors SetColorOrGetNearest(int r, int g, int b);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public sealed virtual IFont CreateFont();
    public sealed virtual IFont CreateFont(Font nativeFont);
    public sealed virtual IFont AddFont(IFont fontToAdd);
    public sealed virtual IFont CreateFont(IFont baseFont);
    public IFont CreateFont(IFont baseFont, bool bAddToCollection);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public sealed virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public sealed virtual void SetSeparators(char argumentsSeparator, char arrayRowsSeparator);
    public sealed virtual IHFEngine CreateHFEngine();
    public sealed virtual void Protect(bool bIsProtectWindow, bool bIsProtectContent);
    public sealed virtual void Protect(bool bIsProtectWindow, bool bIsProtectContent, string password);
    public sealed virtual void Unprotect();
    public sealed virtual void Unprotect(string password);
    public sealed virtual IWorkbook Clone();
    internal List`1<string> GetDrawString(string cellText, RichTextString RTF, List`1& richTextFonts, IFont excelFont);
    private void UpdateRTFText(IFont excelFont, List`1<IFont> pdfFonts, List`1<string> drawString, string rtfText);
    public sealed virtual void SetWriteProtectionPassword(string password);
    private void AdvancedWorkbookProtection(string password);
    protected Byte[] CreateSalt(int length);
    private List`1<Color> ClonePalette();
    private void SaveInExcel2007(Stream stream, ExcelSaveType saveType);
    private IWorkbookSerializator CreateSerializator(ExcelVersion version, IdReserver shapeIds);
    private void ChangeStylesTo97();
    private void UpdateStyleIndexes(Int32[] styleIndexes);
    private List`1<int> PredefidedStylesPositions();
    private bool CheckIfStyleChangeNeeded();
    private Int32[] FixStyles97(List`1<int> defaultStyleIndexes);
    private void ConvertColors(ExtendedFormatImpl format, List`1<int> fontIndexes);
    private List`1<int> ConvertFonts();
    private bool IsValidDocument(Stream stream, Encoding encoding, string separator);
    private ExcelVersion GetExcelVersion(string fileName);
    private ExcelSaveType GetExcelSaveType(string fileName, ExcelSaveType savetype);
    private ExcelVersion GetExcelVersion(Stream stream);
    [CLSCompliantAttribute("False")]
protected internal void SerializeForClipboard(OffsetArrayList records, WorksheetImpl sheet);
    internal void SerializeForClipboard(OffsetArrayList records, WorksheetImpl sheet, IRange range);
    public void SetActiveWorksheet(WorksheetBaseImpl sheet);
    public bool ContainsFont(FontImpl font);
    public void UpdateNamedRangeIndexes(Int32[] arrNewIndex);
    public void UpdateNamedRangeIndexes(IDictionary`2<int, int> dicNewIndex);
    public void SetChanged();
    public void UpdateStringIndexes(List`1<int> arrNewIndexes);
    [CLSCompliantAttribute("False")]
public Dictionary`2<int, int> CopyExternSheets(ExternSheetRecord externSheet, Dictionary`2<int, int> hashSubBooks);
    public void ReAddAllStrings();
    public void UpdateXFIndexes(int maxCount);
    public bool IsFormatted(int xfIndex);
    public double GetMaxDigitWidth();
    public double GetMaxDigitHeight();
    public double WidthToFileWidth(double width);
    public double FileWidthToPixels(double fileWidth);
    private static double Truncate(double d);
    public double PixelsToWidth(double pixels);
    internal void RemoveUnusedCaches();
    internal void RemoveCache(int index);
    public void DeleteConnection(IConnection Connection);
    internal void RemoveUnusedXFRecord();
    internal void AddUsedStyleIndex(int iStyleIndex);
    internal void UpdateUsedStyleIndex(int iStyleIndex, int count);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnFileSaved(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnFileSaved(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnReadOnlyFile(ReadOnlyFileEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnReadOnlyFile(ReadOnlyFileEventHandler value);
    private void WorkbookImpl_AfterChangeEvent(object sender, EventArgs e);
    public double get_StandardRowHeight();
    public void set_StandardRowHeight(double value);
    public int get_StandardRowHeightInPixels();
    public void set_StandardRowHeightInPixels(int value);
    internal void CalcEngineMemberValuesOnSheet(bool isClear);
    internal void ExtractControlProperties();
    internal UInt32 CalculateCRC(UInt32 crcValue, Byte[] arrData, UInt32[] crcCache);
    internal static UInt32[] InitCRC();
    internal string ReplaceStringToSymbolInFormula(string formula, WorkbookImpl book, Boolean& throwOnUnkownNames);
    internal string ReplaceSymbolToStringInFormula(string formula, WorkbookImpl book);
    private IVbaProject ParseVbaProject();
    private void CodeNameChanged(object sender, string name);
    private VbaModule AddVbaModule();
    private void CreateVbaProject();
    internal void SaveMacroStorage(ICompoundStorage rootStorage, bool isBinary);
    internal ExtendedFormatImpl AddExtendedProperties(ExtendedFormatImpl m_xFormat);
    internal void AddExtendedProperty(CellPropertyExtensionType type, Color ColorValue, ExtendedFormatImpl m_xFormat);
    internal ExtendedProperty CreateExtendedProperty(CellPropertyExtensionType type, Color colorValue, ColorType colorType);
    internal CellPropertyExtensionType GetPropertyType(CellPropertyExtensionType type);
    internal Color ConvertARGBToRGBA(Color colorValue);
    internal Color ConvertRGBAToARGB(Color colorValue);
    internal UInt32 ColorToUInt(Color color);
    internal Color UIntToColor(UInt32 color);
    private bool IsLegalXmlChar(int character);
    internal string RemoveInvalidXmlCharacters(string nameValue);
    private void UpdateStandardRowHeight();
    public sealed virtual void ImportXml(Stream stream);
    internal void ParseXmlMaps(XmlReader reader);
    internal Double[] GetCellScaledWidthHeight(IWorksheet sheet);
    internal double GetScaledHeight(string fontName, double fontSize, IWorksheet sheet);
    internal void AddWatermark(IWorkbook workbook, bool isAllPage, bool isXlsb, bool isOds, bool isXml, ExcelVersion version);
    internal Font GetSystemFont(IFont font, string fontName);
    internal FontStyle GetFontStyle(IFont font);
    internal FontStyle GetFontStyle(Font font);
    internal float GetFontSize(IFont font);
    internal Font GetFont(IFont font);
    internal bool IsNullOrWhiteSpace(string text);
}
public class Syncfusion.XlsIO.Implementation.WorkbookShapeDataImpl : CommonObject {
    private static MsoBlipType[] METAFILEBLIPS;
    private List`1<MsofbtBSE> m_arrPictures;
    private List`1<MsoBase> m_arrDGRecords;
    private WorkbookImpl m_book;
    private Dictionary`2<ArrayWrapper, MsofbtBSE> m_dicImageIdToImage;
    private ShapesGetterMethod m_shapeGetter;
    private int m_iLastCollectionId;
    private static Dictionary`2<MsoBlipType, BlipParams> s_hashBlipTypeToParams;
    private string m_imageItemPath;
    private MsofbtDgg m_preservedDgg;
    private String[] m_indexedpixel_notsupport;
    private static object m_lockObj;
    internal string ImageItemPath { get; internal set; }
    public List`1<MsofbtBSE> Pictures { get; }
    protected bool NeedMsoDrawingGroup { get; }
    internal MsofbtDgg PreservedClusters { get; }
    private static WorkbookShapeDataImpl();
    public WorkbookShapeDataImpl(IApplication application, object parent, ShapesGetterMethod shapeGetter);
    internal string get_ImageItemPath();
    internal void set_ImageItemPath(string value);
    private void SetParents();
    [CLSCompliantAttribute("False")]
public void ParseDrawGroup(MSODrawingGroupRecord drawGroup);
    private void ParsePictures(MsofbtBstoreContainer bStore);
    protected virtual void OnDispose();
    [CLSCompliantAttribute("False")]
public void SerializeMsoDrawingGroup(OffsetArrayList records, TBIFFRecord recordCode, IdReserver shapeIds);
    private void SerializeDrawingGroupOptions(MsofbtDggContainer dggContainer);
    private void SerializeDefaultOptions(MsofbtOPT options);
    [CLSCompliantAttribute("False")]
protected void FillMsoDgg(MsofbtDgg dgg, ShapesGetterMethod shapeGetter, IdReserver shapeIds);
    private void CopyData(MsofbtDgg source, MsofbtDgg destination);
    public int AddPicture(Image image, ExcelImageFormat imageFormat, string strPictureName);
    [CLSCompliantAttribute("False")]
public int AddPicture(MsofbtBSE picture);
    [CLSCompliantAttribute("False")]
public MsofbtBSE GetPicture(int iPictureId);
    [CLSCompliantAttribute("False")]
public void RemovePicture(UInt32 id, bool removeImage);
    public void Clear();
    public sealed virtual object Clone(object parent);
    public int RegisterShapes();
    public List`1<MsofbtBSE> get_Pictures();
    protected bool get_NeedMsoDrawingGroup();
    internal MsofbtDgg get_PreservedClusters();
    public void ClearPreservedClusters();
    public static MsoBlipType ImageFormatToBlipType(ImageFormat format);
    public static MsoBlipType ImageFormatToBlipType(ImageFormat format, ExcelImageFormat imageFormat);
    public static bool IsBitmapBlip(MsoBlipType blipType);
    [CLSCompliantAttribute("False")]
protected static BlipParams GetBlipParams(MsofbtBSE bse);
}
public abstract class Syncfusion.XlsIO.Implementation.WorksheetBaseImpl : CommonObject {
    private static TBIFFRecord[] DEF_NOTMSORECORDS;
    public static int DEF_MAX_PASSWORDLEN;
    private static ushort DEF_PASSWORD_CONST;
    [CLSCompliantAttribute("False")]
public static int DEF_MIN_COLUMN_INDEX;
    public static int DEF_MIN_ROW_INDEX;
    public static ExcelKnownColors DEF_DEFAULT_TAB_COLOR;
    private static Color DEF_DEFAULT_TAB_COLOR_RGB;
    [ObsoleteAttribute("This constant is obsolete and will be removed soon. Please, use MaxRowCount property of the IWorkbook interface. Sorry for inconvenience.")]
public static int DEF_MAX_ROW_ONE_INDEX;
    [ObsoleteAttribute("This constant is obsolete and will be removed soon. Please, use MaxColumnCount property of the IWorkbook interface. Sorry for inconvenience.")]
public static int DEF_MAX_COLUMN_ONE_INDEX;
    private static int MaxSheetNameLength;
    private static int ProtectionAllOptions;
    private bool m_bParseOnDemand;
    private bool m_bParseDataOnDemand;
    protected WorkbookImpl m_book;
    private string m_strName;
    private bool m_bChanged;
    private int m_iRealIndex;
    protected int m_iMsoStartIndex;
    private int m_iCurMsoIndex;
    protected ExcelParseOptions m_parseOptions;
    private List`1<BiffRecordRaw> m_arrMSODrawings;
    protected List`1<BiffRecordRaw> m_arrRecords;
    internal ShapesCollection m_shapes;
    internal WorksheetChartsCollection m_charts;
    internal PicturesCollection m_pictures;
    private bool m_bIsSupported;
    private int m_iZoom;
    internal SheetProtectionRecord m_sheetProtection;
    protected RangeProtectionRecord m_rangeProtectionRecord;
    private PasswordRecord m_password;
    protected string m_strCodeName;
    private bool m_bParsed;
    private bool m_bParsing;
    private bool m_bSkipParsing;
    private WindowTwoRecord m_windowTwo;
    private PageLayoutView m_layout;
    [CLSCompliantAttribute("False")]
protected int m_iFirstColumn;
    protected int m_iLastColumn;
    protected int m_iFirstRow;
    protected int m_iLastRow;
    internal ColorObject m_tabColor;
    internal HeaderFooterShapeCollection m_headerFooterShapes;
    private int m_iIndex;
    private ExcelSheetProtection m_parseProtection;
    internal BOFRecord m_bof;
    protected bool KeepRecord;
    private WorksheetVisibility m_visiblity;
    protected internal WorksheetDataHolder m_dataHolder;
    private bool m_bUnknownVmlShapes;
    internal TextBoxCollection m_textBoxes;
    internal CheckBoxCollection m_checkBoxes;
    internal OptionButtonCollection m_optionButtons;
    internal ComboBoxCollection m_comboBoxes;
    private bool m_bTransitionEvaluation;
    protected bool m_isCustomHeight;
    private BiffRecordRaw m_previousRecord;
    protected ErrorIndicatorsCollection m_errorIndicators;
    private string m_algorithmName;
    private Byte[] m_hashValue;
    private Byte[] m_saltValue;
    private UInt32 m_spinCount;
    internal string sharedBgImageName;
    internal short m_sheetLayoutOptions;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler MacroNameChanged;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler NameChanged;
    internal VbaModule VbaModule { get; }
    public string Name { get; public set; }
    public bool IsSaved { get; public set; }
    protected internal CommentsCollection InnerComments { get; }
    protected internal PicturesCollection InnerPictures { get; }
    protected internal WorksheetChartsCollection InnerCharts { get; }
    protected internal ShapesCollection InnerShapes { get; }
    public IShapes Shapes { get; }
    public ShapeCollectionBase InnerShapesBase { get; internal set; }
    public HeaderFooterShapeCollection HeaderFooterShapes { get; }
    public HeaderFooterShapeCollection InnerHeaderFooterShapes { get; internal set; }
    public IComments Comments { get; }
    public IChartShapes Charts { get; }
    public IPictures Pictures { get; }
    public string CodeName { get; internal set; }
    internal bool HasCodeName { get; }
    [CLSCompliantAttribute("False")]
public WindowTwoRecord WindowTwo { get; }
    public bool ProtectContents { get; internal set; }
    public bool ProtectDrawingObjects { get; }
    public bool ProtectScenarios { get; }
    public bool IsPasswordProtected { get; }
    public bool IsParsed { get; public set; }
    public bool IsParsing { get; public set; }
    public bool IsSkipParsing { get; }
    public bool IsSupported { get; protected set; }
    public WorkbookImpl ParentWorkbook { get; }
    public int FirstRow { get; public set; }
    [CLSCompliantAttribute("False")]
public int FirstColumn { get; public set; }
    public int LastRow { get; public set; }
    public int LastColumn { get; public set; }
    public int Zoom { get; public set; }
    public ColorObject TabColorObject { get; }
    public ExcelKnownColors TabColor { get; public set; }
    public Color TabColorRGB { get; public set; }
    public ExcelKnownColors GridLineColor { get; public set; }
    public bool DefaultGridlineColor { get; public set; }
    public IWorkbook Workbook { get; }
    public bool IsRightToLeft { get; public set; }
    public PageSetupBaseImpl PageSetupBase { get; }
    public bool IsSelected { get; }
    public int Index { get; public set; }
    public ExcelSheetProtection Protection { get; }
    protected internal ExcelSheetProtection InnerProtection { get; internal set; }
    protected ExcelSheetProtection UnprotectedOptions { get; }
    internal BOFRecord BOF { get; }
    public WorksheetVisibility Visibility { get; public set; }
    internal WorksheetDataHolder DataHolder { get; internal set; }
    public int TopVisibleRow { get; public set; }
    public int LeftVisibleColumn { get; public set; }
    internal PasswordRecord Password { get; }
    public bool UnknownVmlShapes { get; public set; }
    public TextBoxCollection TypedTextBoxes { get; }
    internal TextBoxCollection InnerTextBoxes { get; }
    public ITextBoxes TextBoxes { get; }
    public CheckBoxCollection TypedCheckBoxes { get; }
    public OptionButtonCollection TypedOptionButtons { get; }
    public ComboBoxCollection TypedComboBoxes { get; }
    protected internal CheckBoxCollection InnerCheckBoxes { get; }
    public ICheckBoxes CheckBoxes { get; }
    public IOptionButtons OptionButtons { get; }
    public IComboBoxes ComboBoxes { get; }
    public bool HasPictures { get; }
    public bool HasCharts { get; }
    public bool HasVmlShapes { get; }
    public int VmlShapesCount { get; }
    protected ExcelSheetProtection DefaultProtectionOptions { get; }
    private bool ProtectionMeaningDirect { get; }
    protected bool ContainsProtection { get; }
    protected SheetProtectionRecord SheetProtection { get; }
    public bool IsTransitionEvaluation { get; public set; }
    public bool ParseOnDemand { get; public set; }
    internal bool ParseDataOnDemand { get; internal set; }
    public string AlgorithmName { get; public set; }
    public Byte[] HashValue { get; public set; }
    public Byte[] SaltValue { get; public set; }
    public UInt32 SpinCount { get; public set; }
    public int RealIndex { get; public set; }
    private int Syncfusion.XlsIO.ITabSheet.TabIndex { get; }
    public WorksheetBaseImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public WorksheetBaseImpl(IApplication application, object parent, BiffReader reader, ExcelParseOptions options, bool bSkipParsing, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    private static WorksheetBaseImpl();
    internal VbaModule get_VbaModule();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public bool get_IsSaved();
    public void set_IsSaved(bool value);
    protected internal CommentsCollection get_InnerComments();
    protected internal PicturesCollection get_InnerPictures();
    protected internal WorksheetChartsCollection get_InnerCharts();
    [DebuggerStepThroughAttribute]
protected internal ShapesCollection get_InnerShapes();
    public sealed virtual IShapes get_Shapes();
    public ShapeCollectionBase get_InnerShapesBase();
    internal void set_InnerShapesBase(ShapeCollectionBase value);
    public HeaderFooterShapeCollection get_HeaderFooterShapes();
    public HeaderFooterShapeCollection get_InnerHeaderFooterShapes();
    internal void set_InnerHeaderFooterShapes(HeaderFooterShapeCollection value);
    public sealed virtual IComments get_Comments();
    public sealed virtual IChartShapes get_Charts();
    public sealed virtual IPictures get_Pictures();
    [CompilerGeneratedAttribute]
internal void add_MacroNameChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_MacroNameChanged(ValueChangedEventHandler value);
    public sealed virtual string get_CodeName();
    internal void set_CodeName(string value);
    internal bool get_HasCodeName();
    public WindowTwoRecord get_WindowTwo();
    public virtual bool get_ProtectContents();
    internal virtual void set_ProtectContents(bool value);
    public virtual bool get_ProtectDrawingObjects();
    public virtual bool get_ProtectScenarios();
    public sealed virtual bool get_IsPasswordProtected();
    public bool get_IsParsed();
    public void set_IsParsed(bool value);
    public bool get_IsParsing();
    public void set_IsParsing(bool value);
    public bool get_IsSkipParsing();
    public bool get_IsSupported();
    protected void set_IsSupported(bool value);
    public sealed virtual WorkbookImpl get_ParentWorkbook();
    public virtual int get_FirstRow();
    public virtual void set_FirstRow(int value);
    public virtual int get_FirstColumn();
    public virtual void set_FirstColumn(int value);
    public virtual int get_LastRow();
    public virtual void set_LastRow(int value);
    public virtual int get_LastColumn();
    public virtual void set_LastColumn(int value);
    public sealed virtual int get_Zoom();
    public sealed virtual void set_Zoom(int value);
    public virtual ColorObject get_TabColorObject();
    public virtual ExcelKnownColors get_TabColor();
    public virtual void set_TabColor(ExcelKnownColors value);
    public virtual Color get_TabColorRGB();
    public virtual void set_TabColorRGB(Color value);
    public sealed virtual ExcelKnownColors get_GridLineColor();
    public sealed virtual void set_GridLineColor(ExcelKnownColors value);
    public bool get_DefaultGridlineColor();
    public void set_DefaultGridlineColor(bool value);
    public sealed virtual IWorkbook get_Workbook();
    public sealed virtual bool get_IsRightToLeft();
    public sealed virtual void set_IsRightToLeft(bool value);
    public abstract virtual PageSetupBaseImpl get_PageSetupBase();
    public sealed virtual bool get_IsSelected();
    public sealed virtual int get_Index();
    public void set_Index(int value);
    public virtual ExcelSheetProtection get_Protection();
    protected internal virtual ExcelSheetProtection get_InnerProtection();
    internal virtual void set_InnerProtection(ExcelSheetProtection value);
    protected virtual ExcelSheetProtection get_UnprotectedOptions();
    internal BOFRecord get_BOF();
    public sealed virtual WorksheetVisibility get_Visibility();
    public sealed virtual void set_Visibility(WorksheetVisibility value);
    internal WorksheetDataHolder get_DataHolder();
    internal void set_DataHolder(WorksheetDataHolder value);
    public sealed virtual int get_TopVisibleRow();
    public sealed virtual void set_TopVisibleRow(int value);
    public sealed virtual int get_LeftVisibleColumn();
    public sealed virtual void set_LeftVisibleColumn(int value);
    internal PasswordRecord get_Password();
    public bool get_UnknownVmlShapes();
    public void set_UnknownVmlShapes(bool value);
    public TextBoxCollection get_TypedTextBoxes();
    internal TextBoxCollection get_InnerTextBoxes();
    public sealed virtual ITextBoxes get_TextBoxes();
    public CheckBoxCollection get_TypedCheckBoxes();
    public OptionButtonCollection get_TypedOptionButtons();
    public ComboBoxCollection get_TypedComboBoxes();
    protected internal CheckBoxCollection get_InnerCheckBoxes();
    public sealed virtual ICheckBoxes get_CheckBoxes();
    public sealed virtual IOptionButtons get_OptionButtons();
    public sealed virtual IComboBoxes get_ComboBoxes();
    public bool get_HasPictures();
    public bool get_HasCharts();
    public bool get_HasVmlShapes();
    private bool FindVmlShape();
    public int get_VmlShapesCount();
    protected abstract virtual ExcelSheetProtection get_DefaultProtectionOptions();
    private bool get_ProtectionMeaningDirect();
    protected virtual bool get_ContainsProtection();
    protected SheetProtectionRecord get_SheetProtection();
    public bool get_IsTransitionEvaluation();
    public void set_IsTransitionEvaluation(bool value);
    public bool get_ParseOnDemand();
    public void set_ParseOnDemand(bool value);
    internal virtual bool get_ParseDataOnDemand();
    internal virtual void set_ParseDataOnDemand(bool value);
    public string get_AlgorithmName();
    public void set_AlgorithmName(string value);
    public Byte[] get_HashValue();
    public void set_HashValue(Byte[] value);
    public Byte[] get_SaltValue();
    public void set_SaltValue(Byte[] value);
    public UInt32 get_SpinCount();
    public void set_SpinCount(UInt32 value);
    internal VbaModule AddVbaModule();
    internal void CodeNameChanged(object sender, string name);
    internal void ClearEvents();
    private bool FindUnhided(WorkbookObjectsCollection objects, int iIndex);
    protected virtual void FindParents();
    protected virtual void OnNameChanged(ValueChangedEventArgs args);
    protected void RaiseNameChangedEvent(ValueChangedEventArgs args);
    public void SetChanged();
    protected virtual void InitializeCollections();
    protected virtual void ClearAll(ExcelWorksheetCopyFlags flags);
    public virtual void Activate();
    public virtual void Select();
    public sealed virtual void Unselect();
    public void Unselect(bool bCheckNumber);
    public sealed virtual void Protect(string password);
    public sealed virtual void Protect(string password, ExcelSheetProtection options);
    protected virtual ExcelSheetProtection PrepareProtectionOptions(ExcelSheetProtection options);
    public void Unprotect();
    public sealed virtual void Unprotect(string password);
    protected virtual void OnRealIndexChanged(int iOldIndex);
    public void SelectTab();
    public virtual void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public virtual void UpdateExtendedFormatIndex(Dictionary`2<int, int> dictFormats);
    public virtual object Clone(object parent);
    public virtual object Clone(object parent, bool cloneShapes);
    public void CloneShapes(WorksheetBaseImpl result);
    protected internal virtual void UpdateStyleIndexes(Int32[] styleIndexes);
    internal void Protect(ushort password, ExcelSheetProtection options);
    public abstract virtual void MarkUsedReferences(Boolean[] usedItems);
    public abstract virtual void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    [CLSCompliantAttribute("False")]
protected internal void Parse(BiffReader reader, ExcelParseOptions options, bool bSkipParsing, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    protected void PrepareProtection();
    [CLSCompliantAttribute("False")]
protected virtual int ParseNextRecord(BiffReader reader, int iBOFCounter, ExcelParseOptions options, bool bSkipStyles, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    [CLSCompliantAttribute("False")]
protected void ParseProtect(ProtectRecord protectRecord);
    [CLSCompliantAttribute("False")]
protected void ParsePassword(PasswordRecord passwordRecord);
    [CLSCompliantAttribute("False")]
protected void ParseObjectProtect(ObjectProtectRecord objectProtect);
    [CLSCompliantAttribute("False")]
protected void ParseScenProtect(ScenProtectRecord scenProtect);
    protected virtual void PrepareVariables(ExcelParseOptions options, bool bSkipParsing);
    [CLSCompliantAttribute("False")]
private void ParsePageLayoutView(PageLayoutView layout);
    [CLSCompliantAttribute("False")]
protected virtual void ParseWindowTwo(WindowTwoRecord windowTwo);
    [CLSCompliantAttribute("False")]
protected virtual void ParseRecord(BiffRecordRaw raw, bool bIgnoreStyles, Dictionary`2<int, int> hashNewXFormatIndexes);
    [CLSCompliantAttribute("False")]
protected virtual void ParseDimensions(DimensionsRecord dimensions);
    [CLSCompliantAttribute("False")]
protected virtual void ParseWindowZoom(WindowZoomRecord windowZoom);
    [CLSCompliantAttribute("False")]
protected void ParseSheetLayout(SheetLayoutRecord sheetLayout);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeMsoDrawings(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeProtection(OffsetArrayList records, bool bContentNotNecessary);
    [CLSCompliantAttribute("False")]
protected void SerializeSheetProtection(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeHeaderFooterPictures(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeWindowTwo(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializePageLayoutView(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeMacrosSupport(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeWindowZoom(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeSheetLayout(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public static ushort GetPasswordHash(string password);
    private static Boolean[] GetCharBits15(char charToConvert);
    private static ushort GetUInt16FromBits(Boolean[] bits);
    private static Boolean[] RotateBits(Boolean[] bits, int count);
    public static int Round(int value, int degree);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NameChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NameChanged(ValueChangedEventHandler value);
    public sealed virtual int get_RealIndex();
    public sealed virtual void set_RealIndex(int value);
    private sealed virtual override int Syncfusion.XlsIO.ITabSheet.get_TabIndex();
    public virtual void Parse();
    protected internal void ParseData();
    protected internal abstract virtual void ParseData(Dictionary`2<int, int> dictUpdatedSSTIndexes);
    internal abstract virtual void ParseBinaryData(Dictionary`2<int, int> dictUpdatedSSTIndexes, XlsbDataHolder holder);
    protected void ExtractMSODrawing(int startIndex, ExcelParseOptions options);
    private List`1<MsoBase> CombineMsoDrawings();
    private BiffRecordRaw[] GetNextMsoData();
    public static Byte[] CombineArrays(int iCombinedLength, List`1<Byte[]> arrCombined);
    public void CopyFrom(WorksheetBaseImpl worksheet, Dictionary`2<string, string> hashStyleNames, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> dicFontIndexes, ExcelWorksheetCopyFlags flags, Dictionary`2<int, int> hashExtFormatIndexes);
    protected void CopyHeaderFooterImages(WorksheetBaseImpl sourceSheet, Dictionary`2<string, string> hashNewNames, IDictionary dicFontIndexes);
    protected void CopyShapes(WorksheetBaseImpl sourceSheet, Dictionary`2<string, string> hashNewNames, Dictionary`2<int, int> dicFontIndexes);
    protected virtual void CopyOptions(WorksheetBaseImpl sourceSheet);
    private bool IsNameExist(NameGetter getName, string sourceCodeName);
    private string GenerateUniqueName(NameGetter getName, string sourceCodeName);
    private string GetCodeName(ITabSheet tabSheet);
    private string GetName(ITabSheet tabSheet);
    private void CopyTabColor(WorksheetBaseImpl sourceSheet);
    private void CheckParseOnDemand();
    public virtual void Dispose();
    private void AdvancedSheetProtection(string password);
    protected Byte[] CreateSalt(int length);
    internal void ChartDispose();
}
public class Syncfusion.XlsIO.Implementation.WorksheetCustomProperty : object {
    private CustomPropertyRecord m_record;
    public string Name { get; }
    public string Value { get; public set; }
    public WorksheetCustomProperty(string strName);
    [CLSCompliantAttribute("False")]
public WorksheetCustomProperty(CustomPropertyRecord property);
    public sealed virtual string get_Name();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    [CLSCompliantAttribute("False")]
public void Serialize(OffsetArrayList records);
    public sealed virtual object Clone();
}
public class Syncfusion.XlsIO.Implementation.WorksheetHelper : object {
    public static bool HasFormulaRecord(IInternalWorksheet sheet, int row, int column);
    public static RowStorage GetOrCreateRow(IInternalWorksheet sheet, int rowIndex, bool bCreate);
    [CLSCompliantAttribute("False")]
public static IOutline GetRowOutline(IInternalWorksheet sheet, int iRowIndex);
    public static void AccessColumn(IInternalWorksheet sheet, int iColumnIndex);
    public static void AccessRow(IInternalWorksheet sheet, int iRowIndex);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.WorksheetImpl : WorksheetBaseImpl {
    internal bool m_isAddcopy;
    private CalcEngine m_calcEngine;
    internal bool m_hasSheetCalculation;
    private bool m_hasAlternateContent;
    private RichTextReader m_richTextReader;
    private IThreadedComments m_threadedComments;
    internal int unknown_formula_name;
    private Dictionary`2<long, MergedCellInfo> mergedCellPositions;
    private bool m_isCopyToCF;
    internal List`1<string> namedRangeNames;
    [CompilerGeneratedAttribute]
private MissingFunctionEventHandler MissingFunction;
    [CompilerGeneratedAttribute]
private CellValueChangedEventHandler CellValueChanged;
    [CompilerGeneratedAttribute]
private ExportDataTableEventHandler ExportDataTableEvent;
    private int m_slicerCount;
    private bool m_copyshapesForSorting;
    private HashSet`1<long> m_mergedRegionCollection;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ValueChanged;
    private static string CalcualtedFormulaRangeFormat;
    private static RegexOptions DEF_REGEX;
    internal static char DEF_STANDARD_CHAR;
    private static float DEF_AXE_IN_RADIANS;
    private static int DEF_MAX_COLUMN_WIDTH;
    private static double DEF_ZERO_CHAR_WIDTH;
    private static int DEF_ARRAY_SIZE;
    private static int DEF_AUTO_FILTER_WIDTH;
    private static int DEF_INDENT_WIDTH;
    private static double DEF_OLE_DOUBLE;
    private static double DEF_MAX_DOUBLE;
    internal static char CarriageReturn;
    internal static char NewLine;
    private static char Comma;
    private static string MSExcel;
    private static int DEFAULT_DATE_NUMBER_FORMAT_INDEX;
    private static TBIFFRecord[] s_arrAutofilterRecord;
    private static string m_linkPattern;
    private static string m_mailPattern;
    private static List`1<Regex> m_hyperlinkPatterns;
    private ISlicers m_slicers;
    private IScenarios m_scenarios;
    private List`1<Tuple`2<int, int>> m_slicerCacheCollection;
    private List`1<Tuple`2<int, int>> m_slicerCacheIds;
    private List`1<Tuple`2<int, string>> m_pivotSlicerCacheIds;
    private bool m_isExportDataTable;
    private List`1<int> m_insertedRows;
    private SortedDictionary`2<int, int> m_movedRows;
    private Dictionary`2<long, string> m_formulaValues;
    private Dictionary`2<int, int> m_indexAndLevels;
    private bool m_bParseDataOnDemand;
    private RangeImpl m_rngUsed;
    private CellRecordCollection m_dicRecordsCells;
    private ColumnInfoRecord[] m_arrColumnInfo;
    private bool m_bDisplayPageBreaks;
    private PageSetupImpl m_pageSetup;
    private double m_dStandardColWidth;
    private MergeCellsImpl m_mergedCells;
    private List`1<SelectionRecord> m_arrSelections;
    private PaneRecord m_pane;
    private WorksheetNamesCollection m_names;
    private ExcelSheetType m_sheetType;
    private bool m_bStringsPreserved;
    private List`1<BiffRecordRaw> m_arrAutoFilter;
    private SortedList`2<int, NoteRecord> m_arrNotes;
    private SortedList`2<long, NoteRecord> m_arrNotesByCellIndex;
    private NameIndexChangedEventHandler m_nameIndexChanged;
    private DataValidationTable m_dataValidation;
    private AutoFiltersCollection m_autofilters;
    private PivotTableCollection m_pivotTables;
    private HyperLinksCollection m_hyperlinks;
    private List`1<BiffRecordRaw> m_arrSortRecords;
    private int m_iPivotStartIndex;
    private int m_iHyperlinksStartIndex;
    private int m_iCondFmtPos;
    private int m_iDValPos;
    private int m_iCustomPropertyStartIndex;
    private List`1<BiffRecordRaw> m_arrDConRecords;
    private WorksheetConditionalFormats m_arrConditionalFormats;
    private WorksheetCustomProperties m_arrCustomProperties;
    private IMigrantRange m_migrantRange;
    private IndexRecord m_index;
    private bool m_bUsedRangeIncludesFormatting;
    private bool m_busedRangeIncludesCF;
    private RangeTrueFalse m_stringPreservedRanges;
    private ItemSizeHelper m_rowHeightHelper;
    private ListObjectCollection m_listObjects;
    private List`1<BiffRecordRaw> m_tableRecords;
    private bool m_isRowHeightSet;
    private bool m_isZeroHeight;
    private int m_baseColumnWidth;
    private bool m_isThickBottom;
    private bool m_isThickTop;
    private byte m_outlineLevelColumn;
    private double m_defaultColWidth;
    private byte m_outlineLevelRow;
    private ColumnInfoRecord m_rawColRecord;
    private bool m_bOptimizeImport;
    private SheetView m_view;
    internal List`1<Stream> preservedStreams;
    internal Dictionary`2<int, CondFMTRecord> m_dictCondFMT;
    internal Dictionary`2<int, CFExRecord> m_dictCFExRecords;
    private AutoFitManager m_autoFitManager;
    internal List`1<IOutlineWrapper> m_outlineWrappers;
    private Dictionary`2<int, List`1<GroupPoint>> m_columnOutlineLevels;
    private Dictionary`2<int, List`1<GroupPoint>> m_rowOutlineLevels;
    internal bool hasWrapMerge;
    private OleObjects m_oleObjects;
    private SparklineGroups m_sparklineGroups;
    private Dictionary`2<string, string> m_inlineStrings;
    private List`1<BiffRecordRaw> m_preserveExternalConnection;
    private List`1<Stream> m_preservePivotTables;
    internal Stream m_worksheetSlicer;
    private bool m_bIsExportDataTable;
    private ColumnCollection columnCollection;
    private bool m_isInsertingColumn;
    private bool m_isInsertingRow;
    private int insertRowCount;
    private int insertRowIndex;
    private int m_deleteRowIndex;
    private int m_deleteRowCount;
    private bool m_isDeletingRow;
    private bool m_isDeletingColumn;
    private ImportDTHelper m_importDTHelper;
    private bool m_bIsImporting;
    private ExtendedFormatImpl format;
    private int dateTimeStyleIndex;
    private RangeImpl m_CopyToRange;
    internal bool m_bisCFCopied;
    private IRange m_sourceRange;
    private int m_destXFIndex;
    private string m_destCell;
    private Dictionary`2<long, string> m_destRange;
    private bool m_bcheckCF;
    internal UInt32 m_sharedFormulaGroupIndex;
    private bool m_bIsSubtotal;
    private IDataSort m_dataSorter;
    private bool m_bIsUnsupportedFormula;
    private bool m_isInsertingSubTotal;
    private bool m_isRemovingSubTotal;
    private bool m_isArrayFormulaSeparated;
    private int m_iDefaultXFIndex;
    private List`1<Rectangle> m_importMergeRanges;
    private IRanges m_importMergeRangeCollection;
    private bool m_hasBaseColWidth;
    internal Dictionary`2<long, CellFormula> m_cellFormulas;
    internal Dictionary`2<string, string> m_autoFilterDisplayTexts;
    private Stream m_extStream;
    private bool m_isAutoFitPivotTable;
    internal bool m_isXmlMapping;
    private PivotTableImpl _pivotImpl;
    private IRange _pivotTableRange;
    internal bool m_parseCondtionalFormats;
    internal bool m_parseCF;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler ColumnWidthChanged;
    [CompilerGeneratedAttribute]
private ValueChangedEventHandler RowHeightChanged;
    private static Dictionary`2<Type, TypeCode> _typeCodeTable;
    internal HashSet`1<long> MergedRegionCollection { get; internal set; }
    public CalcEngine CalcEngine { get; public set; }
    internal bool CopyShapesForSorting { get; internal set; }
    internal bool IsCopyToCF { get; internal set; }
    internal bool HasSheetCalculation { get; }
    internal bool IsAddcopy { get; internal set; }
    internal bool HasAlternateContent { get; internal set; }
    internal Stream ExtStream { get; internal set; }
    internal bool IsAutoFitPivotTable { get; internal set; }
    public ISlicers Slicers { get; }
    public IScenarios Scenarios { get; }
    public IThreadedComments ThreadedComments { get; internal set; }
    internal List`1<Tuple`2<int, int>> SlicerCacheCollection { get; }
    internal List`1<Tuple`2<int, int>> SlicerCacheIds { get; }
    internal bool IsInsertingSubTotal { get; internal set; }
    internal bool IsRemovingSubTotal { get; internal set; }
    internal bool IsArrayFormulaSeparated { get; internal set; }
    internal CellRecordCollection RecordsCells { get; }
    internal List`1<int> InsertedRows { get; internal set; }
    internal SortedDictionary`2<int, int> MovedRows { get; internal set; }
    internal Dictionary`2<long, string> FormulaValues { get; }
    internal Dictionary`2<int, int> IndexAndLevels { get; internal set; }
    internal Stream WorksheetSlicerStream { get; internal set; }
    internal bool HasHyperlinks { get; }
    internal double DefaultColumnWidth { get; internal set; }
    public MergeCellsImpl MergeCells { get; }
    internal RichTextReader RichTextReader { get; }
    [CLSCompliantAttribute("False")]
public ColumnInfoRecord[] ColumnInformation { get; }
    public int VerticalSplit { get; public set; }
    public int HorizontalSplit { get; public set; }
    public int FirstVisibleRow { get; public set; }
    internal int MaxColumnWidth { get; }
    public int FirstVisibleColumn { get; public set; }
    public IRange PrintArea { get; }
    public int SelectionCount { get; }
    public DataValidationTable DVTable { get; }
    public IAutoFilters AutoFilters { get; }
    public HyperLinksCollection InnerHyperLinks { get; }
    public HyperLinksCollection InnerHyperLinksOrNull { get; }
    public SheetView View { get; public set; }
    public int DefaultRowHeight { get; public set; }
    public WorksheetNamesCollection InnerNames { get; }
    public DataValidationTable InnerDVTable { get; }
    public CellRecordCollection CellRecords { get; }
    public PageSetupBaseImpl PageSetupBase { get; }
    public WorksheetConditionalFormats ConditionalFormats { get; }
    [CLSCompliantAttribute("False")]
public PaneRecord Pane { get; }
    [CLSCompliantAttribute("False")]
public List`1<SelectionRecord> Selections { get; }
    public WorksheetCustomProperties InnerCustomProperties { get; }
    public bool UseRangesCache { get; public set; }
    private List`1<BiffRecordRaw> AutoFilterRecords { get; }
    private List`1<BiffRecordRaw> DConRecords { get; }
    private List`1<BiffRecordRaw> SortRecords { get; }
    public ErrorIndicatorsCollection ErrorIndicators { get; }
    public string QuotedName { get; }
    public ExcelVersion Version { get; public set; }
    public RecordExtractor RecordExtractor { get; }
    internal ItemSizeHelper RowHeightHelper { get; }
    internal bool IsVisible { get; internal set; }
    internal bool IsZeroHeight { get; internal set; }
    internal int BaseColumnWidth { get; internal set; }
    internal bool IsThickBottom { get; internal set; }
    internal bool IsThickTop { get; internal set; }
    internal byte OutlineLevelColumn { get; internal set; }
    internal byte OutlineLevelRow { get; internal set; }
    internal bool CustomHeight { get; internal set; }
    public int RowsOutlineLevel { get; }
    public int ColumnsOutlineLevel { get; }
    public List`1<IOutlineWrapper> OutlineWrappers { get; public set; }
    internal bool IsInsertingRow { get; }
    internal bool IsDeletingRow { get; }
    internal Dictionary`2<long, CellFormula> CellFormulas { get; internal set; }
    public bool HasMergedCells { get; }
    public ListObjectCollection InnerListObjects { get; }
    protected ExcelSheetProtection DefaultProtectionOptions { get; }
    protected ExcelSheetProtection UnprotectedOptions { get; }
    internal Dictionary`2<string, string> InlineStrings { get; }
    internal List`1<BiffRecordRaw> PreserveExternalConnection { get; }
    internal List`1<Stream> PreservePivotTables { get; }
    internal bool ParseDataOnDemand { get; internal set; }
    internal Dictionary`2<int, List`1<GroupPoint>> ColumnOutlineLevels { get; internal set; }
    internal Dictionary`2<int, List`1<GroupPoint>> RowOutlineLevels { get; internal set; }
    internal List`1<Rectangle> ImportMergeRanges { get; internal set; }
    internal IRanges ImportMergeRangeCollection { get; internal set; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public int ActivePane { get; public set; }
    public IRange[] Cells { get; }
    internal ColumnCollection Columnss { get; }
    public IRange[] Columns { get; }
    public bool DisplayPageBreaks { get; public set; }
    internal AutoFitManager AutoFitManagerImpl { get; internal set; }
    public IOleObjects OleObjects { get; }
    public bool HasOleObject { get; }
    public ISparklineGroups SparklineGroups { get; }
    public IHPageBreaks HPageBreaks { get; }
    public IHyperLinks HyperLinks { get; }
    public bool IsDisplayZeros { get; public set; }
    public bool IsGridLinesVisible { get; public set; }
    public bool IsRowColumnHeadersVisible { get; public set; }
    public bool IsStringsPreserved { get; public set; }
    public IRange[] MergedCells { get; }
    public INames Names { get; }
    public IPageSetup PageSetup { get; }
    public IRange PaneFirstVisible { get; public set; }
    public IRange Range { get; }
    public IRange[] Rows { get; }
    public bool IsFreezePanes { get; }
    public IRange SplitCell { get; public set; }
    public double StandardHeight { get; public set; }
    public bool StandardHeightFlag { get; public set; }
    public double StandardWidth { get; public set; }
    public ExcelSheetType Type { get; public set; }
    public IRange UsedRange { get; }
    public IRange[] UsedCells { get; }
    public IVPageBreaks VPageBreaks { get; }
    public bool IsEmpty { get; }
    public IWorksheetCustomProperties CustomProperties { get; }
    public IMigrantRange MigrantRange { get; }
    public bool UsedRangeIncludesFormatting { get; public set; }
    internal bool UsedRangeIncludesCF { get; internal set; }
    public IPivotTables PivotTables { get; }
    public PivotTableCollection InnerPivotTables { get; }
    public IListObjects ListObjects { get; }
    public bool ProtectContents { get; internal set; }
    internal ImportDTHelper ImportDTHelper { get; internal set; }
    internal bool IsImporting { get; internal set; }
    internal bool IsSubtotal { get; internal set; }
    public IDataSort DataSorter { get; internal set; }
    internal RangeImpl CopyToRange { get; internal set; }
    internal int CondFmtPos { get; }
    internal int DefaultXFIndex { get; internal set; }
    internal bool HasBaseColWidth { get; internal set; }
    public IRange TopLeftCell { get; public set; }
    protected bool ContainsProtection { get; }
    internal bool IsValueChanged { get; }
    private static WorksheetImpl();
    public WorksheetImpl(IApplication application, object parent);
    [CLSCompliantAttribute("False")]
public WorksheetImpl(IApplication application, object parent, BiffReader reader, ExcelParseOptions options, bool bSkipParsing, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MissingFunction(MissingFunctionEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MissingFunction(MissingFunctionEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CellValueChanged(CellValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CellValueChanged(CellValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ExportDataTableEvent(ExportDataTableEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ExportDataTableEvent(ExportDataTableEventHandler value);
    internal HashSet`1<long> get_MergedRegionCollection();
    internal void set_MergedRegionCollection(HashSet`1<long> value);
    public sealed virtual CalcEngine get_CalcEngine();
    public sealed virtual void set_CalcEngine(CalcEngine value);
    internal bool get_CopyShapesForSorting();
    internal void set_CopyShapesForSorting(bool value);
    internal bool get_IsCopyToCF();
    internal void set_IsCopyToCF(bool value);
    internal bool get_HasSheetCalculation();
    internal bool get_IsAddcopy();
    internal void set_IsAddcopy(bool value);
    internal bool get_HasAlternateContent();
    internal void set_HasAlternateContent(bool value);
    public sealed virtual void EnableSheetCalculations();
    private void CalcEngine_UnknownFunction(object sender, UnknownFunctionEventArgs args);
    private void UpdateNamedRange(object sender, UpdateNamedRangeEventArgs args);
    private void UpdateExternalFormula(object sender, UpdateExternalFormulaEventArgs args);
    private bool TryGetIdentifier(ExternWorkbookImpl externBook, String& identifier, Int32& sheetIndex);
    private bool TryGetExternRangeAddress(WorkbookImpl workbook, String& formula);
    private bool IsCellRange(WorkbookImpl workbook, string idendifier);
    private int GetExternSheetIndex(string sheetName, ExternWorkbookImpl externBook);
    private void GetExternWorksheet(object sender, QueryExternalWorksheetEventArgs args);
    public sealed virtual void DisableSheetCalculations();
    public sealed virtual object GetValueRowCol(int row, int col);
    internal int GetArrayRecordPosition(int row, int col, Int32& height, Int32& width);
    internal int GetArrayRecordPosition(int row, int col, Int32& height, Int32& width, ICalcData calcData);
    internal string GetFormulaFromWorksheet(int row, int col, bool isReturnArrayFormula);
    internal string GetArrayFormula(int row, int col, bool isReturnArrayFormula, Ptg[]& arrayFormulaPtg);
    public sealed virtual void SetValueRowCol(object value, int row, int col);
    public sealed virtual void WireParentObject();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(ValueChangedEventHandler value);
    public void OnValueChanged(int row, int col, string value);
    protected virtual void InitializeCollections();
    protected void ClearAll();
    protected virtual void ClearAll(ExcelWorksheetCopyFlags flags);
    internal void CopyStyles(IWorksheet worksheet, Dictionary`2<int, int> hashExtFormatIndexes);
    protected void CopyNames(WorksheetImpl basedOn, Dictionary`2<string, string> hashNewSheetNames, Dictionary`2<int, int> hashNewNameIndexes, Dictionary`2<int, int> hashExternSheetIndexes);
    private Dictionary`2<int, object> GetUsedNames();
    private void ChangeReferenceIndex(WorkbookImpl sourceBook, WorkbookImpl destBook, NameRecord oldName, NameRecord newName);
    protected void CopyRowHeight(WorksheetImpl sourceSheet, Dictionary`2<int, int> hashExtFormatIndexes);
    protected void CopyConditionalFormats(WorksheetImpl sourceSheet);
    protected void CopyAutoFilters(WorksheetImpl sourceSheet);
    protected void CopyDataValidations(WorksheetImpl sourceSheet);
    protected void CopyColumnWidth(WorksheetImpl sourceSheet, Dictionary`2<int, int> hashExtFormatIndexes);
    private bool IsDefaultColumnWidth(List`1<int> arrIsDefaultColumnWidth, Int32& startIndex, int columnIndex);
    private void UpdateIndexes(ICollection collection, WorksheetImpl sourceSheet, Dictionary`2<int, int> hashExtFormatIndexes);
    private void UpdateIndexes(ICollection collection, WorksheetImpl sourceSheet, Dictionary`2<int, int> hashExtFormatIndexes, bool bUpdateDefault);
    private void UpdateOutlineIndexes(ICollection collection, Int32[] extFormatIndexes);
    private List`1<int> CreateColumnsOnUpdate(ColumnInfoRecord[] columns, int iXFIndex);
    protected void CopyMerges(WorksheetImpl sourceSheet);
    protected void AttachEvents();
    protected void DetachEvents();
    protected virtual void OnDispose();
    protected void CopyPageSetup(WorksheetImpl sourceSheet);
    protected int ImportExtendedFormat(int iXFIndex, WorkbookImpl basedOn, Dictionary`2<int, int> hashExtFormatIndexes);
    protected internal virtual void UpdateStyleIndexes(Int32[] styleIndexes);
    internal Stream get_ExtStream();
    internal void set_ExtStream(Stream value);
    internal bool get_IsAutoFitPivotTable();
    internal void set_IsAutoFitPivotTable(bool value);
    public sealed virtual ISlicers get_Slicers();
    public sealed virtual IScenarios get_Scenarios();
    public sealed virtual IThreadedComments get_ThreadedComments();
    internal void set_ThreadedComments(IThreadedComments value);
    internal List`1<Tuple`2<int, int>> get_SlicerCacheCollection();
    internal List`1<Tuple`2<int, int>> get_SlicerCacheIds();
    internal bool get_IsInsertingSubTotal();
    internal void set_IsInsertingSubTotal(bool value);
    internal bool get_IsRemovingSubTotal();
    internal void set_IsRemovingSubTotal(bool value);
    internal bool get_IsArrayFormulaSeparated();
    internal void set_IsArrayFormulaSeparated(bool value);
    internal CellRecordCollection get_RecordsCells();
    internal List`1<int> get_InsertedRows();
    internal void set_InsertedRows(List`1<int> value);
    internal SortedDictionary`2<int, int> get_MovedRows();
    internal void set_MovedRows(SortedDictionary`2<int, int> value);
    internal Dictionary`2<long, string> get_FormulaValues();
    internal Dictionary`2<int, int> get_IndexAndLevels();
    internal void set_IndexAndLevels(Dictionary`2<int, int> value);
    internal Stream get_WorksheetSlicerStream();
    internal void set_WorksheetSlicerStream(Stream value);
    internal bool get_HasHyperlinks();
    internal void set_DefaultColumnWidth(double value);
    internal double get_DefaultColumnWidth();
    public MergeCellsImpl get_MergeCells();
    internal RichTextReader get_RichTextReader();
    public ColumnInfoRecord[] get_ColumnInformation();
    public sealed virtual int get_VerticalSplit();
    public sealed virtual void set_VerticalSplit(int value);
    public sealed virtual int get_HorizontalSplit();
    public sealed virtual void set_HorizontalSplit(int value);
    public sealed virtual int get_FirstVisibleRow();
    public sealed virtual void set_FirstVisibleRow(int value);
    internal int get_MaxColumnWidth();
    public sealed virtual int get_FirstVisibleColumn();
    public sealed virtual void set_FirstVisibleColumn(int value);
    public IRange get_PrintArea();
    public int get_SelectionCount();
    public DataValidationTable get_DVTable();
    public sealed virtual IAutoFilters get_AutoFilters();
    public HyperLinksCollection get_InnerHyperLinks();
    public HyperLinksCollection get_InnerHyperLinksOrNull();
    public sealed virtual SheetView get_View();
    public sealed virtual void set_View(SheetView value);
    public sealed virtual int get_DefaultRowHeight();
    public void set_DefaultRowHeight(int value);
    public WorksheetNamesCollection get_InnerNames();
    public DataValidationTable get_InnerDVTable();
    [DebuggerStepThroughAttribute]
public sealed virtual CellRecordCollection get_CellRecords();
    public virtual PageSetupBaseImpl get_PageSetupBase();
    public WorksheetConditionalFormats get_ConditionalFormats();
    public PaneRecord get_Pane();
    public List`1<SelectionRecord> get_Selections();
    public WorksheetCustomProperties get_InnerCustomProperties();
    public sealed virtual bool get_UseRangesCache();
    public sealed virtual void set_UseRangesCache(bool value);
    private List`1<BiffRecordRaw> get_AutoFilterRecords();
    private List`1<BiffRecordRaw> get_DConRecords();
    private List`1<BiffRecordRaw> get_SortRecords();
    public ErrorIndicatorsCollection get_ErrorIndicators();
    public string get_QuotedName();
    public sealed virtual ExcelVersion get_Version();
    public void set_Version(ExcelVersion value);
    private void ClearPivotTables();
    public RecordExtractor get_RecordExtractor();
    internal ItemSizeHelper get_RowHeightHelper();
    internal bool get_IsVisible();
    internal void set_IsVisible(bool value);
    internal bool get_IsZeroHeight();
    internal void set_IsZeroHeight(bool value);
    internal int get_BaseColumnWidth();
    internal void set_BaseColumnWidth(int value);
    internal bool get_IsThickBottom();
    internal void set_IsThickBottom(bool value);
    internal bool get_IsThickTop();
    internal void set_IsThickTop(bool value);
    internal byte get_OutlineLevelColumn();
    internal void set_OutlineLevelColumn(byte value);
    internal byte get_OutlineLevelRow();
    internal void set_OutlineLevelRow(byte value);
    internal bool get_CustomHeight();
    internal void set_CustomHeight(bool value);
    public int get_RowsOutlineLevel();
    public int get_ColumnsOutlineLevel();
    public List`1<IOutlineWrapper> get_OutlineWrappers();
    public void set_OutlineWrappers(List`1<IOutlineWrapper> value);
    internal bool get_IsInsertingRow();
    internal bool get_IsDeletingRow();
    internal Dictionary`2<long, CellFormula> get_CellFormulas();
    internal void set_CellFormulas(Dictionary`2<long, CellFormula> value);
    internal void SortGroups(Dictionary`2<int, List`1<GroupPoint>> OutlineLevels);
    internal void AddGroupsinLevel(Dictionary`2<int, List`1<GroupPoint>> OutlineLevels);
    private void ArrangeGroups(List`1<GroupPoint> OutlineLevels);
    internal void UpdateOutlineRowStorage();
    internal void UpdateColumnOutline();
    internal void UpdateOutline(int index, int level, Dictionary`2<int, List`1<GroupPoint>> outlines);
    internal void UpdateInAllLevels(int level, int index, Dictionary`2<int, List`1<GroupPoint>> outlines);
    public bool get_HasMergedCells();
    public ListObjectCollection get_InnerListObjects();
    protected virtual ExcelSheetProtection get_DefaultProtectionOptions();
    protected virtual ExcelSheetProtection get_UnprotectedOptions();
    internal Dictionary`2<string, string> get_InlineStrings();
    internal List`1<BiffRecordRaw> get_PreserveExternalConnection();
    internal List`1<Stream> get_PreservePivotTables();
    internal virtual bool get_ParseDataOnDemand();
    internal virtual void set_ParseDataOnDemand(bool value);
    internal Dictionary`2<int, List`1<GroupPoint>> get_ColumnOutlineLevels();
    internal void set_ColumnOutlineLevels(Dictionary`2<int, List`1<GroupPoint>> value);
    internal Dictionary`2<int, List`1<GroupPoint>> get_RowOutlineLevels();
    internal void set_RowOutlineLevels(Dictionary`2<int, List`1<GroupPoint>> value);
    internal List`1<Rectangle> get_ImportMergeRanges();
    internal void set_ImportMergeRanges(List`1<Rectangle> value);
    internal IRanges get_ImportMergeRangeCollection();
    internal void set_ImportMergeRangeCollection(IRanges value);
    public sealed virtual IRange get_Item(int row, int column);
    public sealed virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public sealed virtual IRange get_Item(string name);
    public sealed virtual IRange get_Item(string name, bool IsR1C1Notation);
    public sealed virtual int get_ActivePane();
    public sealed virtual void set_ActivePane(int value);
    public sealed virtual IRange[] get_Cells();
    internal ColumnCollection get_Columnss();
    public sealed virtual IRange[] get_Columns();
    public sealed virtual bool get_DisplayPageBreaks();
    public sealed virtual void set_DisplayPageBreaks(bool value);
    internal AutoFitManager get_AutoFitManagerImpl();
    internal void set_AutoFitManagerImpl(AutoFitManager value);
    public sealed virtual IOleObjects get_OleObjects();
    public sealed virtual bool get_HasOleObject();
    public sealed virtual ISparklineGroups get_SparklineGroups();
    public sealed virtual IHPageBreaks get_HPageBreaks();
    public sealed virtual IHyperLinks get_HyperLinks();
    public sealed virtual bool get_IsDisplayZeros();
    public sealed virtual void set_IsDisplayZeros(bool value);
    public sealed virtual bool get_IsGridLinesVisible();
    public sealed virtual void set_IsGridLinesVisible(bool value);
    public sealed virtual bool get_IsRowColumnHeadersVisible();
    public sealed virtual void set_IsRowColumnHeadersVisible(bool value);
    public sealed virtual bool get_IsStringsPreserved();
    public sealed virtual void set_IsStringsPreserved(bool value);
    public sealed virtual IRange[] get_MergedCells();
    public sealed virtual INames get_Names();
    public sealed virtual IPageSetup get_PageSetup();
    public IRange get_PaneFirstVisible();
    public void set_PaneFirstVisible(IRange value);
    [DebuggerStepThroughAttribute]
public sealed virtual IRange get_Range();
    public sealed virtual IRange[] get_Rows();
    public sealed virtual bool get_IsFreezePanes();
    public sealed virtual IRange get_SplitCell();
    public void set_SplitCell(IRange value);
    public sealed virtual double get_StandardHeight();
    public sealed virtual void set_StandardHeight(double value);
    public sealed virtual bool get_StandardHeightFlag();
    public sealed virtual void set_StandardHeightFlag(bool value);
    public sealed virtual double get_StandardWidth();
    public sealed virtual void set_StandardWidth(double value);
    public sealed virtual ExcelSheetType get_Type();
    public void set_Type(ExcelSheetType value);
    public sealed virtual IRange get_UsedRange();
    private IRange GetUsedRange(bool isUsedRange);
    public sealed virtual IRange[] get_UsedCells();
    public sealed virtual IVPageBreaks get_VPageBreaks();
    public bool get_IsEmpty();
    public sealed virtual IWorksheetCustomProperties get_CustomProperties();
    public sealed virtual IMigrantRange get_MigrantRange();
    public sealed virtual bool get_UsedRangeIncludesFormatting();
    public sealed virtual void set_UsedRangeIncludesFormatting(bool value);
    internal bool get_UsedRangeIncludesCF();
    internal void set_UsedRangeIncludesCF(bool value);
    public sealed virtual IPivotTables get_PivotTables();
    public PivotTableCollection get_InnerPivotTables();
    public sealed virtual IListObjects get_ListObjects();
    public virtual bool get_ProtectContents();
    internal virtual void set_ProtectContents(bool value);
    internal ImportDTHelper get_ImportDTHelper();
    internal void set_ImportDTHelper(ImportDTHelper value);
    internal bool get_IsImporting();
    internal void set_IsImporting(bool value);
    internal bool get_IsSubtotal();
    internal void set_IsSubtotal(bool value);
    public sealed virtual IDataSort get_DataSorter();
    internal void set_DataSorter(IDataSort value);
    internal RangeImpl get_CopyToRange();
    internal void set_CopyToRange(RangeImpl value);
    internal int get_CondFmtPos();
    internal int get_DefaultXFIndex();
    internal void set_DefaultXFIndex(int value);
    internal bool get_HasBaseColWidth();
    internal void set_HasBaseColWidth(bool value);
    [CompilerGeneratedAttribute]
public void add_ColumnWidthChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ColumnWidthChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowHeightChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowHeightChanged(ValueChangedEventHandler value);
    internal void SetStandardWidth(double width);
    private void CreateOutlineWrappers(Dictionary`2<int, List`1<GroupPoint>> outlineLevels, ExcelGroupBy groupBy);
    public sealed virtual IInternalWorksheet GetClonedObject(Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
    public void ParseCFFromExcel2007(FileDataHolder dataHolder);
    public void ParseSheetCF();
    public virtual void UpdateExtendedFormatIndex(Dictionary`2<int, int> dictFormats);
    public void UpdateExtendedFormatIndex(int maxCount);
    public RangeRichTextString CreateLabelSSTRTFString(long cellIndex);
    public IRange[] Find(IRange range, byte findValue, bool bIsError, bool bIsFindFirst);
    public IRange[] Find(IRange range, double findValue, ExcelFindType flags, bool bIsFindFirst);
    internal IRange[] FindEmpty(IRange range, string findValue, bool bFindFirst, ExcelFindType findType);
    public IRange[] Find(IRange range, string findValue, ExcelFindType flags, bool bIsFindFirst);
    public IRange[] Find(IRange range, string findValue, ExcelFindType flags, ExcelFindOptions findOptions, bool bIsFindFirst);
    private IRange[] FindInComments(string findValue, ExcelFindOptions findOptions);
    public void MoveRange(IRange destination, IRange source, ExcelCopyRangeOptions options, bool bUpdateRowRecords);
    private void MoveRange(IRange destination, IRange source, ExcelCopyRangeOptions options, bool bUpdateRowRecords, IOperation beforeMove, IRange cFDestination, IRange cFSource);
    private void MoveRange(IRange destination, IRange source, ExcelCopyRangeOptions options, bool bUpdateRowRecords, IOperation beforeMove);
    private void MoveTables(IRange destination, IRange source, ExcelCopyRangeOptions options);
    private bool HasPivotTableRange(WorksheetImpl sheet, int index, IRange destPivotTableRange);
    private bool HasTableRange(WorksheetImpl sheet, int index, IRange destTableRange);
    private bool CheckOverLap(IRange range, int index, T obj);
    private IRange GetDestTableRange(IRange srcRange, IRange destRange, IRange tableRange);
    public IRange CopyRange(IRange destination, IRange source);
    internal IRange CopyRange(IRange destination, IRange source, bool pasteLink);
    internal void CopyRangeFormulaValue(int destRow, int destColumn, int srcRow, int srcColumn, IMigrantRange destination, IMigrantRange source);
    internal void CopyRangeValues(WorksheetImpl source, WorksheetImpl destination, int srcRow, int srcColumn, int destRow, int destColumn);
    public IRange CopyRange(IRange destination, IRange source, ExcelCopyRangeOptions options);
    internal IRange CopyRange(IRange destination, IRange source, ExcelCopyRangeOptions options, bool skipBlank);
    internal void SetEntireRowAndColumnRange(RangeImpl source, RangeImpl destination, bool isEntireColumn);
    private IListObject CheckTableRange(IRange destRange);
    internal IListObject IsTableRange(IRange destRange);
    internal IListObject IsAdjacentTable(IRange range);
    internal IListObject IsAdjacentTableRow(IRange range);
    internal IListObject IsEntireTableRange(IRange range);
    public void CopyRangeWithoutCheck(RangeImpl source, RangeImpl destination, ExcelCopyRangeOptions options);
    internal bool IsValidNameExist(IRange range, string name);
    private void CopyRangeWithoutCheck(RangeImpl source, RangeImpl destination, ExcelCopyRangeOptions options, bool copying, bool skipBlank);
    private void UpdateTableColumn(IListObject table, int updateCount);
    private void UpdateTableRow(IListObject table, int updateCount);
    internal List`1<string> GetNamesFromFormula(int firstRow, int firstCol, int lastRow, int lastCol, IWorksheet sheet);
    private void CopyMoveSparkLines(IRange source, IRange destination, WorksheetImpl destSheet, bool isMove);
    internal List`1<ISparkline> GetSparkLines(IRange source, ISparklines sparkLines);
    private void RemoveComments(IWorksheet destSheets, Rectangle destRect);
    internal IRange GetRangeFromMergedRegion(IRange range);
    private void CopyMoveDataValidations(int iSourceRow, int iSourceColumn, int iRowCount, int iColumnCount, int iDestRow, int iDestColumn, WorksheetImpl destSheet, bool bIsMove);
    private void CopyMoveConditionalFormatting(int iSourceRow, int iSourceColumn, int iRowCount, int iColumnCount, int iDestRow, int iDestColumn, WorksheetImpl destSheet, bool bIsMove, bool copying);
    private void UpdatePriority(WorksheetImpl destSheet, ConditionalFormats destFormats, bool copying);
    internal void UpdateMulticellCF(ConditionalFormats destFormats, IRange copyToRange, int destSheetCFCount, WorksheetImpl destSheet, WorksheetConditionalFormats destSheetCondFormats, bool copying);
    private void CopyMoveHyperlinks(int iSourceRow, int iSourceColumn, int iRowCount, int iColumnCount, int iDestRow, int iDestColumn, WorksheetImpl destSheet, bool bIsMove);
    private void CopyMoveHyperlinks(int iSourceRow, int iSourceColumn, int iDestRow, int iDestColumn, WorksheetImpl destSheet, IRange srcUsedRange, IRange destUsedRange, MigrantRangeImpl destRange, bool bIsMove, int row, int column);
    private void RemoveHyperlink(IWorksheet worksheet, int row, int col);
    private void CopyMoveErrorIndicators(int iSourceRow, int iSourceColumn, int iRowCount, int iColumnCount, int iDestRow, int iDestColumn, WorksheetImpl destSheet, bool bIsMove);
    private void CopyCell(ICellPositionFormat cell, string strFormulaValue, IDictionary dicXFIndexes, long lNewIndex, WorkbookImpl book, Dictionary`2<int, int> dicFontIndexes, ExcelCopyRangeOptions options, IRange sourceRange, bool skipBlank);
    [CLSCompliantAttribute("False")]
public void CopyCell(ICellPositionFormat cell, string strFormulaValue, IDictionary dicXFIndexes, long lNewIndex, WorkbookImpl book, Dictionary`2<int, int> dicFontIndexes, ExcelCopyRangeOptions options);
    [CLSCompliantAttribute("False")]
internal void CopyCell(ICellPositionFormat cell, string strFormulaValue, IDictionary dicXFIndexes, long lNewIndex, WorkbookImpl book, Dictionary`2<int, int> dicFontIndexes, ExcelCopyRangeOptions options, WorksheetImpl sourceSheet, bool skipBlank);
    internal bool CheckOverLab(IRange range);
    public void CopyRange(int iSourceRow, int iSourceColumn, int iRowCount, int iColumnCount, int iDestRow, int iDestColumn, WorksheetImpl destSheet, RecordTable intersection, Rectangle rectIntersection, ExcelCopyRangeOptions options);
    private void CopyRange(int iSourceRow, int iSourceColumn, int iRowCount, int iColumnCount, int iDestRow, int iDestColumn, WorksheetImpl destSheet, RecordTable intersection, Rectangle rectIntersection, ExcelCopyRangeOptions options, bool copying, bool skipBlank, bool isEntireRowOrColumn);
    public void RemoveArrayFormulas(ICollection`1<ArrayRecord> colRemove, bool bClearRange);
    public Ptg[] UpdateFormula(Ptg[] arrFormula, int iRowOffset, int iColOffset);
    public virtual void UpdateFormula(int iCurIndex, int iSourceIndex, Rectangle sourceRect, int iDestIndex, Rectangle destRect);
    public sealed virtual void AutofitRow(int rowIndex);
    public sealed virtual void AutofitColumn(int colIndex);
    public void AutofitColumn(int colIndex, int firstRow, int lastRow);
    public void CopyFrom(WorksheetImpl worksheet, Dictionary`2<string, string> hashStyleNames, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> dicFontIndexes, ExcelWorksheetCopyFlags flags);
    public void CopyFrom(WorksheetImpl worksheet, Dictionary`2<string, string> hashStyleNames, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> dicFontIndexes, ExcelWorksheetCopyFlags flags, Dictionary`2<int, int> hashExtFormatIndexes, Dictionary`2<int, int> hashNameIndexes);
    public void CopyFrom(WorksheetImpl worksheet, Dictionary`2<string, string> hashStyleNames, Dictionary`2<string, string> hashWorksheetNames, Dictionary`2<int, int> dicFontIndexes, ExcelWorksheetCopyFlags flags, Dictionary`2<int, int> hashExtFormatIndexes, Dictionary`2<int, int> hashNameIndexes, Dictionary`2<int, int> hashExternSheets);
    private void CopyPivotTables(WorksheetImpl worksheet, Dictionary`2<string, string> hashWorksheetNames);
    private void CopyTables(WorksheetImpl worksheet, Dictionary`2<string, string> hashWorksheetNames);
    private ListObjectCollection UpdateCalculatedColumnAndTotalFormulas(ListObjectCollection copiedListObjects, ListObjectCollection sourceListObjects);
    internal void UpdateTableFormulaInCells(Dictionary`2<string, string> hashTableNames);
    private Ptg[] ChangeTablePtgArray(WorkbookImpl sourceBook, WorkbookImpl destBook, Ptg[] arrPtg, Dictionary`2<string, string> hashTableNames, Dictionary`2<int, string> hashTableNameRanges);
    private Ptg ChangeTablePtg(WorkbookImpl sourceBook, WorkbookImpl destBook, NameImpl name, Ptg ptg);
    private void ChangeReferenceIndex(WorkbookImpl sourceBook, WorkbookImpl destBook, IWorksheet destSheet, Ptg[] formulaPtg);
    private void CopyErrorIndicators(ErrorIndicatorsCollection sourceErrors);
    private void CopyHyperlinks(HyperLinksCollection source);
    public bool CanMove(IRange& destination, IRange source);
    public bool CanInsertRow(int iRowIndex, int iRowCount, ExcelInsertOptions options);
    public bool CanInsertColumn(int iColumnIndex, int iColumnCount, ExcelInsertOptions options);
    public IRange GetRangeByString(string strRangeValue, bool hasFormula);
    private bool IsErrorStringsContains(string computedValue, List`1<object> errorStrings, String[] formulaErrorStrings);
    private string GetOverloadedOffsetFunction(FormulaUtil formulaUtil, Ptg[] arrPtgs, string formula);
    public void UpdateNamedRangeIndexes(Int32[] arrNewIndex);
    public void UpdateNamedRangeIndexes(IDictionary`2<int, int> dicNewIndex);
    public int GetStringIndex(long cellIndex);
    public TextWithFormat GetTextWithFormat(long cellIndex);
    public object GetTextObject(long cellIndex);
    public ExtendedFormatImpl GetExtendedFormat(long cellIndex);
    internal ExtendedFormatImpl GetExtendedFormatImpl(MigrantRangeImpl cell);
    public void SetLabelSSTIndex(long cellIndex, int iSSTIndex);
    public void UpdateStringIndexes(List`1<int> arrNewIndexes);
    public void RemoveMergedCells(IRange range);
    public void SetActiveCell(IRange range);
    public void SetActiveCell(IRange range, bool updateApplication);
    private void ActivatePane(IRange range);
    internal SelectionRecord GetActiveSelection();
    public IRange GetActiveCell();
    [CLSCompliantAttribute("False")]
public bool IsArrayFormula(FormulaRecord formula);
    public sealed virtual bool IsArrayFormula(long cellIndex);
    public double InnerGetRowHeight(int iRow, bool bRaiseEvents);
    internal double InnerGetRowHeight(int iRow, bool bRaiseEvents, bool isUpdateTopRow);
    public virtual object Clone(object parent, bool cloneShapes);
    public void ReAddAllStrings();
    public Nullable`1<bool> GetStringPreservedValue(ICombinedRange range);
    public void SetStringPreservedValue(ICombinedRange range, Nullable`1<bool> value);
    public virtual void MarkUsedReferences(Boolean[] usedItems);
    public virtual void UpdateReferenceIndexes(Int32[] arrUpdatedIndexes);
    protected void CreateEmptyPane();
    protected void CopyCell(IRange destCell, IRange sourceCell);
    protected void CopyCell(IRange destCell, IRange sourceCell, ExcelCopyRangeOptions options);
    private void UpdateHyperlinks(RangeImpl source, RangeImpl dest);
    private int GetColumnCount(RangeImpl source, RangeImpl dest);
    private int GetRowCount(RangeImpl source, RangeImpl dest);
    private void CopyComment(RangeImpl source, RangeImpl dest);
    private void RemoveLastRow(bool bUpdateFormula);
    internal void RemoveLastRow(bool bUpdateFormula, int count, int index);
    private void RemoveLastColumn(bool bUpdateFormula);
    internal void RemoveLastColumn(bool bUpdateFormula, int count, int index);
    private void PartialClearRange(Rectangle rect);
    private RecordTable CacheAndRemoveFromParent(IRange source, IRange destination, Int32& iMaxRow, Int32& iMaxColumn, CellRecordCollection tableSource, bool bInsert);
    private void CopyCacheInto(RecordTable source, RecordTable destination, bool bUpdateRowRecords);
    private static void ClearRange(IDictionary dictionary, Rectangle rect);
    private void UpdateArrayFormula(ArrayRecord array, IWorksheet destSheet, int iDeltaRow, int iDeltaColumn);
    private RecordTable GetRecordTable(int iRow, int iColumn, Rectangle rectIntersection, RecordTable intersection, RecordTable rectSource);
    private Dictionary`2<int, int> GetUpdatedXFIndexes(int iRow, int iColumn, int iRowCount, int iColCount, WorksheetImpl destSheet, Dictionary`2& dicFontIndexes);
    private void ClearCell(long cellIndex);
    private void SetArrayFormulaRanges(ArrayRecord array);
    [CLSCompliantAttribute("False")]
protected void RemoveArrayFormula(ArrayRecord record, bool bClearRange);
    private ArrayRecord CreateArrayFormula(ArrayRecord arraySource, IRange destination, IRange source, int iRow, int iColumn, bool bUpdateFormula);
    protected void CheckRangesSizes(IRange destination, IRange source);
    private void CopyRangeMerges(IRange destination, IRange source);
    private static void CopyRangeMerges(IRange destination, IRange source, bool bDeleteSource);
    [CLSCompliantAttribute("False")]
protected internal NoteRecord GetNoteByObjectIndex(int index);
    [CLSCompliantAttribute("False")]
protected internal void AddNote(NoteRecord note);
    public void AutofitRow(int rowIndex, int firstColumn, int lastColumn, bool bRaiseEvents);
    internal void InnerSetRowHeight(int iRowIndex, double value, bool bIsBadFontHeight, MeasureUnits units, bool bRaiseEvents);
    private bool IsRowEmpty(int iRowIndex);
    private bool IsRowEmpty(int iRowIndex, bool bCheckStyle);
    private bool IsColumnEmpty(int iColumnIndex);
    private bool IsColumnEmpty(int iColumnIndex, bool bIgnoreStyles);
    private int ParseRange(IMigrantRange range, string strRowString, string separator, int i);
    internal SizeF MeasureCell(IRange cell, bool bAutoFitRows, bool ignoreRotation);
    internal SizeF MeasureCell(long cellIndex, bool bAutoFitRows, bool ignoreRotation);
    private SizeF MeasureCell(long cellIndex, bool bAutoFitRows, RichTextString richText, bool ignoreRotation, Boolean& bIsMergedAndWrapped);
    private Size WrapLine(IWorksheet sheet, IRichTextString rtf, int columnIndex);
    private Size WrapSingleLine(string line, int availableWidth, RichTextString stringPart);
    private Size FitByWords(RichTextString stringPart, int availableWidth);
    private SizeF SplitByChars(RichTextString originalString, int startIndex, Int32& currentIndex, int availableWidth);
    private RichTextString AddNextWord(RichTextString originalString, int startIndex, Int32& currentIndex);
    private SizeF UpdateAutofitByIndent(SizeF curSize, ExtendedFormatImpl format);
    private float UpdateTextWidthOrHeightByRotation(SizeF size, int rotation, bool bUpdateHeight);
    private FontImpl GetFontByExtendedFormatIndex(ICellPositionFormat cellFormat, Int32& rotation);
    protected virtual void CopyOptions(WorksheetBaseImpl sourceSheet);
    protected virtual void OnRealIndexChanged(int iOldIndex);
    private void OnInsertRowColumnComplete(int iRowIndex, int iRowCount, bool bRow);
    private SizeF UpdateAutoFitByAutoFilter(SizeF size, ExtendedFormatImpl format, CellRecordCollection col, long cellIndex);
    private SizeF UpdateAutoFilterForGeneralAllignment(SizeF size, int iRot, CellRecordCollection col, long cellIndex);
    private void CreateMigrantRange();
    private IStyle GetDefaultOutlineStyle(IDictionary dicOutlines, int iIndex);
    private int ssSetDefaultRowColumnStyle(int iIndex, int iEndIndex, IStyle defaultStyle, IDictionary dicOutlines, OutlineDelegate createOutline, bool bIsRow);
    private int SetDefaultRowColumnStyle(int iIndex, int iEndIndex, IStyle defaultStyle, IList outlines, OutlineDelegate createOutline, bool bIsRow);
    private int ConvertStyleToCorrectIndex(IStyle style);
    private IOutline CreateColumnOutline(int iColumnIndex);
    private void CopyConditionalFormatsAfterInsert(int iIndex, int iCount, ExcelInsertOptions options, bool bIsRow);
    private void CopyStylesAfterInsert(int iIndex, int iCount, ExcelInsertOptions options, bool bRow);
    private void CopyRowColumnSettings(RowStorage sourceRow, ColumnInfoRecord sourceColumn, bool bRow, int iSourceIndex, int iCurIndex, ExcelInsertOptions options);
    private int GetIndexForStyleCopy(int iIndex, int iCount, ExcelInsertOptions options);
    internal ExcelFormatType GetFormatType(int iRow, int iColumn, bool bUseDefaultStyle);
    internal ExcelExportType GetExportType(ExcelFormatType formatType, int row, int column, int maxRows, ExcelExportDataTableOptions options, Type& formulaDataType);
    internal Type GetType(ExcelExportType exportType, bool preserveOLEDate);
    internal object GetValue(int iRow, int iColumn, ExcelExportType formatType, bool bExportFormulaValues, bool preserveOLEDate);
    internal object GetFormulaValue(int iRow, int iColumn);
    internal string GetValue(ICellPositionFormat cell, bool preserveOLEDate);
    private void UpdateOutlineAfterXFRemove(ICollection dictOutline, IDictionary dictFormats);
    internal string ConvertSecMinToHours(string value, double dNumber);
    internal static string ConvertSecondsMinutesToHours(string value, double dNumber);
    private IRange[] ConvertCellListIntoRange(List`1<long> arrIndexes);
    private IRange FindValueForNumber(BiffRecordRaw record, double findValue, bool bIsNumber, bool bIsFormulaValue);
    private IRange FindValueForByteOrError(BoolErrRecord boolError, byte findValue, bool bIsError);
    protected internal IRange InnerGetCell(int column, int row);
    protected internal IRange InnerGetCell(int column, int row, int iXFIndex);
    protected internal IStyle InnerGetCellStyle(int column, int row, int iXFIndex, RangeImpl rangeImpl);
    private IRange ConvertRecordToRange(BiffRecordRaw record);
    protected void UpdateFirstLast(int iRowIndex, int iColumnIndex);
    protected internal void InnerSetCell(int column, int row, RangeImpl range);
    [CLSCompliantAttribute("False")]
protected internal void InnerSetCell(long cellIndex, BiffRecordRaw record);
    [CLSCompliantAttribute("False")]
protected internal void InnerSetCell(int iColumn, int iRow, BiffRecordRaw record);
    protected internal void InnerGetDimensions(Int32& left, Int32& top, Int32& right, Int32& bottom);
    protected internal void InnerGetColumnDimensions(int column, Int32& top, Int32& bottom);
    internal void UpdateLabelSSTIndexes(Dictionary`2<int, int> dictUpdatedIndexes, IncreaseIndex method);
    private void InsertIntoDefaultColumns(int iColumnIndex, int iColumnCount, ExcelInsertOptions insertOptions);
    private void RemoveFromDefaultColumns(int iColumnIndex, int iColumnCount, ExcelInsertOptions insertOptions);
    private void GetRangeCoordinates(Int32& firstRow, Int32& firstColumn, Int32& lastRow, Int32& lastColumn, bool isUsedRange);
    private bool IsRowBlankOnly(int rowIndex);
    private bool IsColumnBlankOnly(int columnIndex);
    private void CreateUsedRange(int firstRow, int firstColumn, int lastRow, int lastColumn);
    protected virtual ExcelSheetProtection PrepareProtectionOptions(ExcelSheetProtection options);
    internal void ShowFilteredRows(int rowIndex, int columnIndex, bool isVisible, bool isAnd, bool isFirstCondition);
    private bool CheckItRefersToSingleCell(int iRow, int iColumn);
    [CLSCompliantAttribute("False")]
protected internal void Parse(BiffReader reader, IDecryptor decryptor);
    protected virtual void PrepareVariables(ExcelParseOptions options, bool bSkipParsing);
    [CLSCompliantAttribute("False")]
protected virtual void ParseRecord(BiffRecordRaw raw, bool bIgnoreStyles, Dictionary`2<int, int> hashNewXFormatIndexes);
    private void ParseErrorIndicators(RangeProtectionRecord record);
    private void UpdateDuplicatedNameIndexes(FormulaRecord formula);
    private int GetNewXFormatIndex(int iXFIndex, Dictionary`2<int, int> hashNewXFormatIndexes);
    public void Parse(TextReader streamToRead, string separator, int row, int column, bool isValid);
    private string ReadCellValue(TextReader reader, string separator, StringBuilder builder, bool isValid);
    private static bool EndsWith(StringBuilder builder, string separator);
    private static void ReadToChar(TextReader reader, char endChar, StringBuilder builder, string separator, bool isValid);
    private static void RemoveJunkChar(TextReader reader, char endChar, StringBuilder builder, string separator);
    private static void ReadToChar(TextReader reader, char endChar, StringBuilder builder);
    private static int CharCount(string value, char ch);
    internal virtual void ParseBinaryData(Dictionary`2<int, int> dictUpdatedSSTIndexes, XlsbDataHolder holder);
    protected internal virtual void ParseData(Dictionary`2<int, int> dictUpdatedSSTIndexes);
    private void ReplaceSharedFormula();
    internal void ParseColumnInfo(ColumnInfoRecord columnInfo, bool bIgnoreStyles);
    internal void ParseRowRecord(RowRecord row, bool bIgnoreStyles);
    internal void ParseDefaultColWidth(BiffRecordRaw raw);
    protected void ExtractHyperLinks(int iLinkIndex);
    protected int ExtractCalculationOptions();
    protected void ExtractPageSetup(int iStartIndex);
    protected void ExtractConditionalFormats(int iCondFmtPos);
    protected void ExtractDataValidation(int iDValPos);
    protected void ExtractCustomProperties(int iCustomPropertyPos);
    private void CreateFormatsCollection(CondFMTRecord format, IList lstConditions, IList CFExRecords, bool isFutureRecord);
    private void CreateCF12RecordCollection(CondFmt12Record format, IList conditions);
    public double InnerGetColumnWidth(int iColumn);
    public sealed virtual int ColumnWidthToPixels(double widthInChars);
    internal double ColumnWidthToPixelsWithDoubleValue(double widthInChars);
    public sealed virtual double PixelsToColumnWidth(int pixels);
    public sealed virtual void AdvancedFilter(ExcelFilterAction action, IRange filterRange, IRange criteriaRange, IRange copyToRange, bool isUnique);
    private Ptg[] CloneArrayPtg(Ptg[] arrPtg);
    private bool TryGetValidFormula(Ptg[] arrPtg, IRange filterRange, bool isReplace, Ptg[]& outputPtg, int currentRow);
    private bool IsConditionSatisfied(double criteriaCellValD, string condition, double filterCellValue);
    internal Regex GetWildCardRegex(string criteriaCelllVal, string condition);
    private bool IsConditionSatisfied(string criteriaValue, string condition, string filterValue, TRangeValueType criteriaValueType, TRangeValueType filterValueType);
    private string GetComparisionOperator(string inputValue, String& outputValue);
    internal object GetTextFromCellType(int row, int column, TRangeValueType& type);
    internal bool TryGetIntersectRange(string name, IRange& intersect);
    private bool IsEntireRange(string nameRange);
    internal bool TryGetExternalIntersectRange(string name, String& intersect);
    private string AddSheetName(string address);
    private IRange GetIntersectionRange(INames names, String[] nameRanges);
    internal int EvaluateRealColumnWidth(int fileWidth);
    internal int EvaluateFileColumnWidth(int realWidth);
    private void OnNameIndexChanged(object sender, NameIndexChangedEventArgs args);
    internal void AttachNameIndexChangedEvent();
    internal void AttachNameIndexChangedEvent(int iStartIndex);
    public void ParseAutoFilters();
    protected void ExtractPivotTables(int iStartIndex);
    [CLSCompliantAttribute("False")]
protected internal ICellPositionFormat GetRecord(long cellIndex);
    [CLSCompliantAttribute("False")]
protected internal ICellPositionFormat GetRecord(int iRow, int iColumn);
    [CLSCompliantAttribute("False")]
protected virtual int ParseNextRecord(BiffReader reader, int iBOFCounter, ExcelParseOptions options, bool bSkipStyles, Dictionary`2<int, int> hashNewXFormatIndexes, IDecryptor decryptor);
    [CLSCompliantAttribute("False")]
protected virtual void ParseDimensions(DimensionsRecord dimensions);
    public void SetPaneCell(IRange range);
    private void CreateAllSelections();
    private void ReIndexSelections(Dictionary`2<int, object> usedIndexes);
    private void TryAdd(Dictionary`2<int, object> mustPresent, List`1<int> panes, Dictionary`2<int, object> usedIndexes, int paneIndex);
    private int GetFreeIndex(int currentIndex, Dictionary`2<int, object> usedIndexes);
    public sealed virtual void Clear();
    internal void ClearAllData();
    public sealed virtual void ClearData();
    public sealed virtual bool Contains(int iRow, int iColumn);
    public sealed virtual IRanges CreateRangesCollection();
    public sealed virtual void CreateNamedRanges(string namedRange, string referRange, bool vertical);
    internal SortedList`2<long, ExtendedFormatImpl> ApplyCF(IRange cfRange);
    internal SortedList`2<long, ExtendedFormatImpl> ApplyCF();
    internal Rectangle GetRectangleFromRangeString(string name);
    public sealed virtual ITemplateMarkersProcessor CreateTemplateMarkersProcessor();
    public sealed virtual void ShowColumn(int columnIndex, bool isVisible);
    public sealed virtual void HideColumn(int columnIndex);
    public sealed virtual void HideRow(int rowIndex);
    public sealed virtual void ShowRow(int rowIndex, bool isVisible);
    internal void ShowFilteredRows(int rowIndex, int columnIndex, bool isVisible);
    private void UpdateShapes();
    public sealed virtual void ShowRange(IRange range, bool isVisible);
    public sealed virtual void ShowRange(RangesCollection ranges, bool isVisible);
    public sealed virtual void ShowRange(IRange[] ranges, bool isVisible);
    public sealed virtual bool IsColumnVisible(int columnIndex);
    public sealed virtual bool IsRowVisible(int rowIndex);
    public sealed virtual void InsertRow(int iRowIndex);
    public sealed virtual void InsertRow(int iRowIndex, int iRowCount);
    public sealed virtual void InsertRow(int iRowIndex, int iRowCount, ExcelInsertOptions insertOptions);
    private void UpdateCalculatedFormula(int iRowIndex, IListObject listObject);
    private string GetCalculatedFormula(string calculatedFormula, string name);
    private void UpdateRowOutlineLevel(int iRowIndex, int iRowCount);
    public sealed virtual void InsertColumn(int iColumnIndex);
    public sealed virtual void InsertColumn(int iColumnIndex, int iColumnCount);
    public sealed virtual void InsertColumn(int iColumnIndex, int iColumnCount, ExcelInsertOptions insertOptions);
    private void UpdateColumnOutlineLevel(int index, int count);
    private void CopyDataValidationAfterInsert(int iIndex, int iCount, ExcelInsertOptions insertOptions, bool bIsRow);
    private void UpdateDataValidationOnInsertOption(int iIndex, int iCount, ExcelInsertOptions insertOptions, bool bIsRow);
    public sealed virtual void DeleteRow(int index);
    public sealed virtual void DeleteRow(int index, int count);
    private void CopyRowRecord(int iDestRowIndex, int iSourceRowIndex);
    public sealed virtual void DeleteColumn(int index);
    public sealed virtual void DeleteColumn(int index, int count);
    private void GetCfUsedLimit(Int32& iFirstRow, Int32& iFirstCol, Int32& iLastRow, Int32& iLastCol);
    public sealed virtual double GetColumnWidth(int iColumnIndex);
    public sealed virtual int GetColumnWidthInPixels(int iColumnIndex);
    internal double GetColumnWidthInPixelsWithDoubleValue(int iColumnIndex);
    public int GetHiddenColumnWidthInPixels(int iColumnIndex);
    public int GetHiddenRowHeightInPixels(int iRowIndex);
    public sealed virtual double GetRowHeight(int iRow);
    internal double GetInnerRowHeight(int iRow);
    public sealed virtual int GetRowHeightInPixels(int iRowIndex);
    internal double GetRowHeightInPixelsWithDoubleValue(int iRowIndex);
    internal int GetInnerRowHeightInPixels(int iRowIndex);
    internal int GetColumnWidthInPixels(int firstColumn, int lastColumn);
    internal int GetRowHeightInPixels(int firstRow, int lastRow);
    private int ImportArray(T[] arrObject, int firstRow, int firstColumn, bool isVertical);
    private bool CheckIsFormula(object value);
    public sealed virtual int ImportArray(Object[] arrObject, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(String[] arrString, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Int32[] arrInt, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Double[] arrDouble, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(DateTime[] arrDateTime, int firstRow, int firstColumn, bool isVertical);
    public sealed virtual int ImportArray(Object[0...,0...] arrObject, int firstRow, int firstColumn);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataTable(DataTable dataTable, int firstRow, int firstColumn, bool importOnSave);
    public sealed virtual int ImportDataTable(DataTable dataTable, int firstRow, int firstColumn, bool importOnSave, bool includeheader);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns);
    public sealed virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, bool preserveTypes);
    public int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, DataColumn[] arrDataColumns, bool bPreserveTypes);
    public int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, DataColumn[] arrDataColumns, bool bPreserveTypes, bool bImportOnSave);
    internal int ReplaceDataTable(DataTable dataTable, SSTDictionary sst, bool isFieldNameShown);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset, int iMaxRow, int iMaxCol);
    public sealed virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset, int iMaxRow, int iMaxCol, bool bPreserveTypes);
    public sealed virtual int ImportDataColumn(DataColumn dataColumn, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataColumn(DataColumn dataColumn, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataReader(IDataReader dataReader, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataReader(IDataReader dataReader, int firstRow, int firstColumn, bool importOnSave);
    public sealed virtual int ImportDataReader(IDataReader dataReader, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataReader(IDataReader dataReader, IName namedRange, bool isFieldNameShown);
    public int ImportDataColumns(DataColumn[] arrDataColumns, bool isFieldNameShown, int firstRow, int firstColumn);
    internal int ImportDataColumns(DataColumn[] arrDataColumns, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, bool bPreserveTypes);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns);
    public sealed virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, bool bPreserveTypes);
    public sealed virtual DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options);
    internal ExportDataTableEventArgs OnExportDataTableInfo(int excelRowIndex, int excelColumnIndex, int dataTableColumnIndex, IRange cellRange, Type dataTableColumnType, object excelCellValue);
    public DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options, PivotTableImpl pivotTable);
    internal ExcelExportType GetNextExportType(int iFirstDataRow, int firstColumn, bool bUseDefaultStyles, ExcelExportType exportType, int maxRows, ExcelExportDataTableOptions options);
    public sealed virtual DataTable ExportDataTable(IRange range, ExcelExportDataTableOptions options);
    public sealed virtual DataTable ExportDataTable(IRange range, ExcelExportDataTableOptions options, ExcelExportDataOptions exportDataOptions);
    public sealed virtual DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options, ExcelExportDataOptions exportDataOptions);
    public DataTable PEExportDataTable(IRange range, ExcelExportDataTableOptions options, PivotTableImpl pivotTable);
    public sealed virtual List`1<T> ExportData(int firstRow, int firstColumn, int lastRow, int lastColumn);
    public sealed virtual List`1<T> ExportData(int firstRow, int firstColumn, int lastRow, int lastColumn, Dictionary`2<string, string> mappingProperties);
    private void ExtractPropertyNames(Type classType, int firstRow, int firstColumn, int lastColumn, Dictionary`2<int, string> exportColumns, MigrantRangeImpl exportDataMigrant, Dictionary`2<string, string> mappingProperties, string parentName);
    private object GetPropertyValue(Type classType, int currentRow, int currentColumn, Dictionary`2<int, string> exportColumns, MigrantRangeImpl exportDataMigrant, string parentName, int mismatchRecordIndex, Int32& columnCount);
    private object NotifyAndSetUserValue(Type typeCode, IRange errorRange, string errorProperty, string cellType, int mismatchRecordIndex);
    public sealed virtual int ImportData(IEnumerable arrObject, int firstRow, int firstColumn, bool includeHeader);
    public sealed virtual int ImportData(IEnumerable arrObject, ExcelImportDataOptions importDataOptions);
    internal int ImportData(IEnumerable arrObject, int firstRow, int firstColumn, bool includeHeader, bool includeHeaderParent, ExcelNestedDataLayoutOptions nestedLayoutOptions, ExcelNestedDataGroupOptions nestedGroupOptions, int collapseLevel, bool preserveTypes);
    private int AddHeaders(int firstRow, int firstColumn, bool isDynamic, IList`1<string> dynamicPropertyNames, List`1<TypeCode> propertyTypeCodeCollection, List`1<PropertyInfo> propertyInfoCollection, object obj, bool includeHeaderParent, string parentName);
    private int FillData(int firstRow, int firstColumn, IEnumerator valueEnum, object obj, List`1<PropertyInfo> propertyInfoCollection, List`1<TypeCode> propertyTypeCodeCollection, bool isDynamic, IList`1<string> dynamicPropertyNames, List`1<int> indexesOfNullableTypes, Int32& i, ExcelNestedDataLayoutOptions nestedLayoutOptions, ExcelNestedDataGroupOptions nestedGroupOptions, int currentLevel, int collapseLevel, bool bPreserveTypes, Int32& rowCount);
    private object GetPropertyValue(Type elementType, String& name, object propertyValue, int i, object obj);
    private TypeCode GetElementType(Type objType);
    internal void SetRepeatRangeValues(int firstRow, int firstColumn, int lastRow, int lastColumn);
    private object GetPropertyValue(object obj, bool isDynamic, PropertyInfo propertyInfo, string dynamicPropertyName);
    private bool CheckIfDynamic(object obj, IDictionary`2& dictProperties);
    private static void SetPropertyType(List`1<PropertyInfo> propertyInfoCollection, List`1<TypeCode> propertyTypeCodeCollection, bool isDynamic);
    private static void ImportDataWithoutCheckPreserve(TypeCode propertyTypeCode, object propertyValue, IMigrantRange migrantRange, bool isDynamic, bool isSameTypeCode);
    private static void ImportDataWithoutCheck(TypeCode propertyTypeCode, object propertyValue, IMigrantRange migrantRange);
    private bool GetChildObjectMembersInfo(object propertyValue, IEnumerator& enumValue, Object& enumObj, Boolean& bIsDynamic, List`1& typeCodeCollection, List`1& infoCollection, IDictionary`2& dictProperties, IList`1& childDynamicPropertyNames, List`1& childIndexesOfNullableTypes);
    private bool ExtractObjectMemberInfo(object obj, Boolean& bIsDynamic, List`1& typeCodeCollection, List`1& infoCollection, IDictionary`2& dictProperties, IList`1& childDynamicPropertyNames, List`1& childIndexesOfNullableTypes);
    private List`1<TypeCode> GetDynamicObjectMembersInfo(IEnumerator valueEnum, object obj, IDictionary`2<string, object> dictProperties, IList`1& dynamicPropertyNames, List`1& indexesOfNullableTypes);
    internal bool GetCollectionCount(object value, Int32& collectionCount);
    private List`1<TypeCode> GetPropertyInfosFromDictionary(IDictionary`2<string, object> objects, List`1& nullableList);
    private List`1<TypeCode> GetObjectMembersInfo(object obj, List`1& propertyInfo);
    private List`1<TypeCode> GetObjectMembersInfo(Type type, List`1& propertyInfo);
    private object GetValueFromProperty(object value, PropertyInfo strProperty);
    internal static TypeCode GetTypeCode(Type type);
    public sealed virtual void RemovePanes();
    public sealed virtual IRange IntersectRanges(IRange range1, IRange range2);
    public sealed virtual IRange MergeRanges(IRange range1, IRange range2);
    private IRange[] Find(string value);
    internal IRange[] FindRangesWithValues(string oldValue, ExcelFindOptions findOptions, IRange ranges);
    public sealed virtual void Replace(string oldValue, string newValue);
    public sealed virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    internal void ReplaceWithValues(string oldValue, string newValue, IRange[] arrRange, ExcelFindOptions findOptions);
    public sealed virtual void Replace(string oldValue, DateTime newValue);
    public sealed virtual void Replace(string oldValue, double newValue);
    public sealed virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public sealed virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public sealed virtual void Replace(string oldValue, DataColumn column, bool isFieldNamesShown);
    public sealed virtual void Remove();
    public sealed virtual void Move(int iNewIndex);
    private int FindWorksheetNotBefore(int iNewIndex);
    public sealed virtual void SetColumnWidth(int iColumn, double value);
    public sealed virtual void SetColumnWidthInPixels(int iColumn, int value);
    internal void SetColumnWidthInPixels(int iColumn, int value, bool isBestFit);
    internal void SetColumnWidth(int iColumn, double value, bool isBestFit);
    public sealed virtual void SetColumnWidthInPixels(int iStartColumnIndex, int iCount, int value);
    public sealed virtual void SetRowHeight(int iRow, double value);
    public sealed virtual void SetRowHeightInPixels(int iRowIndex, double value);
    public sealed virtual void SetRowHeightInPixels(int iStartRowIndex, int iCount, double value);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public sealed virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags);
    public sealed virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public sealed virtual IRange FindFirst(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public sealed virtual IRange FindFirst(bool findValue);
    public sealed virtual IRange FindFirst(DateTime findValue);
    public sealed virtual IRange FindFirst(TimeSpan findValue);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public sealed virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public sealed virtual IRange[] FindAll(bool findValue);
    public sealed virtual IRange[] FindAll(DateTime findValue);
    public sealed virtual IRange[] FindAll(TimeSpan findValue);
    public sealed virtual void SaveAs(Stream stream, string separator);
    public void SaveAsInternal(Stream stream, string separator, Encoding encoding);
    public sealed virtual void SaveAs(Stream stream, string separator, Encoding encoding);
    public sealed virtual void SaveAsHtml(Stream stream);
    public sealed virtual void SaveAsHtml(Stream stream, HtmlSaveOptions saveOption);
    public sealed virtual void SetDefaultColumnStyle(int iColumnIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultColumnStyle(int iStartColumnIndex, int iEndColumnIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultRowStyle(int iRowIndex, IStyle defaultStyle);
    public sealed virtual void SetDefaultRowStyle(int iStartRowIndex, int iEndRowIndex, IStyle defaultStyle);
    private void SetCellStyle(int iColIndex, ushort XFindex);
    public sealed virtual IStyle GetDefaultColumnStyle(int iColumnIndex);
    public sealed virtual IStyle GetDefaultRowStyle(int iRowIndex);
    public sealed virtual void FreeRange(IRange range);
    public sealed virtual void FreeRange(int iRow, int iColumn);
    public IRange get_TopLeftCell();
    public void set_TopLeftCell(IRange value);
    public sealed virtual void ImportXml(Stream stream, int row, int column);
    private void ImportDataTableWithoutCheck(DataTable dataTable, int firstRow, int firstColumn, int maxRows, int maxColumns, DataColumn[] arrColumns, bool isOptimized);
    private void ImportDataTableWithoutCheckPreserve(DataTable dataTable, int firstRow, int firstColumn, int maxRows, int maxColumns, DataColumn[] arrColumns);
    private void ImportDataViewWithoutCheck(DataView dataView, int firstRow, int firstColumn, int maxRows, int maxColumns);
    private void ImportDataViewWithoutCheckPreserve(DataView dataView, int firstRow, int firstColumn, int maxRows, int maxColumns);
    private RangeProperty GetValueType(object value, int iColumnIndex, Dictionary`2<int, RangeProperty> hashColumnTypes);
    internal bool CheckAndAddHyperlink(string stringValue, RangeImpl range);
    internal bool CheckHyperlink(string stringValue);
    [CLSCompliantAttribute("False")]
public virtual void Serialize(OffsetArrayList records);
    protected virtual bool get_ContainsProtection();
    private void SerializeErrorIndicators(OffsetArrayList records);
    private void SerializeNotParsedWorksheet(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
public void SerializeForClipboard(OffsetArrayList records);
    internal void SerializeForClipboard(OffsetArrayList records, bool bClipboard, IRange range);
    [CLSCompliantAttribute("False")]
protected void SerializeColumnInfo(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected int SerializeGroupColumnInfo(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeConditionalFormatting(OffsetArrayList records);
    [CLSCompliantAttribute("False")]
protected void SerializeDataValidation(OffsetArrayList records);
    private bool CompareDVWithoutRanges(DVRecord curDV, DVRecord dvToAdd);
    private void MergeDVRanges(DVRecord curDv, DVRecord dvToAdd);
    [CLSCompliantAttribute("False")]
protected virtual void SerializeMsoDrawings(OffsetArrayList records);
    private void Serialize(OffsetArrayList records, bool bClipboard, IRange range);
    protected void RaiseColumnWidthChangedEvent(int iColumn, double dNewValue);
    protected void RaiseRowHeightChangedEvent(int iRow, double dNewValue);
    private void NormalFont_OnAfterChange(object sender, EventArgs e);
    public void SetFormulaValue(int iRow, int iColumn, string value);
    internal bool TryParseDateTime(string value, DateTime& dateValue);
    internal bool TryParseExactDateTime(string value, DateTime& result);
    internal RangeImpl GetFormulaRange(string formula);
    public sealed virtual void SetValue(int iRow, int iColumn, string value);
    internal bool checkIsNumber(string value, CultureInfo cultureInfo);
    private bool checkGroupSeparatorPosition(string value, CultureInfo cultureInfo);
    public sealed virtual void SetNumber(int iRow, int iColumn, double value);
    public sealed virtual void SetBoolean(int iRow, int iColumn, bool value);
    public sealed virtual void SetText(int iRow, int iColumn, string value);
    public sealed virtual void SetFormula(int iRow, int iColumn, string value);
    public void SetFormula(int iRow, int iColumn, string value, bool bIsR1C1);
    public sealed virtual void SetError(int iRow, int iColumn, string value);
    public sealed virtual void SetBlank(int iRow, int iColumn);
    private void SetBlankRecord(int iRow, int iColumn);
    private void SetNumberRecord(int iRow, int iColumn, double value, int iXFIndex);
    private void SetRKRecord(int iRow, int iColumn, double value);
    private void SetFormulaValue(int iRow, int iColumn, string value, bool bIsR1C1);
    public sealed virtual void SetFormulaNumberValue(int iRow, int iColumn, double value);
    public sealed virtual void SetFormulaErrorValue(int iRow, int iColumn, string value);
    public sealed virtual void SetFormulaBoolValue(int iRow, int iColumn, bool value);
    public sealed virtual void SetFormulaStringValue(int iRow, int iColumn, string value);
    public void SetError(int iRow, int iColumn, string value, bool isSetText);
    private void SetString(int iRow, int iColumn, string value);
    private int RemoveString(int iRow, int iColumn);
    internal int GetXFIndex(int iRow, int iColumn);
    internal int GetXFIndex(int iRow);
    internal int GetColumnXFIndex(int firstColumn);
    [CLSCompliantAttribute("False")]
protected internal RKRecord TryCreateRkRecord(int iRow, int iColumn, double value);
    [CLSCompliantAttribute("False")]
protected internal RKRecord TryCreateRkRecord(int iRow, int iColumn, double value, int iXFIndex);
    [CLSCompliantAttribute("False")]
public BiffRecordRaw GetRecord(TBIFFRecord recordCode, int iRow, int iColumn);
    private BiffRecordRaw GetRecord(TBIFFRecord recordCode, int iRow, int iColumn, int iXFIndex);
    private void SetFormulaValue(int iRow, int iColumn, double value);
    private void SetFormulaValue(int iRow, int iColumn, double value, StringRecord strRecord);
    public sealed virtual string GetFormula(int row, int column, bool bR1C1);
    public string GetFormula(int row, int column, bool bR1C1, bool isForSerialization);
    public string GetFormula(int row, int column, bool bR1C1, FormulaUtil formulaUtil, bool isForSerialization);
    internal string GetFormula(int row, int column, Ptg[] arrTokens, bool bR1C1, FormulaUtil formulaUtil, bool isForSerialization);
    private string GetFormulaArray(FormulaRecord formula);
    public string GetStringValue(long cellIndex);
    public sealed virtual string GetText(int row, int column);
    public sealed virtual string GetFormulaStringValue(int row, int column);
    public sealed virtual double GetNumber(int row, int column);
    public sealed virtual double GetFormulaNumberValue(int row, int column);
    public sealed virtual string GetError(int row, int column);
    internal string GetErrorValueToString(byte value, int row);
    public sealed virtual string GetFormulaErrorValue(int row, int column);
    public sealed virtual bool GetBoolean(int row, int column);
    public sealed virtual bool GetFormulaBoolValue(int row, int column);
    public bool HasArrayFormulaRecord(int row, int column);
    public bool HasArrayFormula(Ptg[] arrTokens);
    public TRangeValueType GetCellType(int row, int column, bool bNeedFormulaSubType);
    public bool IsExternalFormula(int row, int column);
    internal void OnCellValueChanged(object oldValue, object newValue, IRange range);
    public sealed virtual int GetFirstRow();
    public sealed virtual int GetLastRow();
    public sealed virtual int GetRowCount();
    public sealed virtual int GetFirstColumn();
    public sealed virtual int GetLastColumn();
    public sealed virtual int GetColumnCount();
    internal ApplicationImpl GetAppImpl();
    internal int GetViewColumnWidthPixel(int column);
    internal double CharacterWidth(double width);
    internal static int CharacterWidth(double width, ApplicationImpl application);
    internal static void CheckColumnIndex(int columnIndex);
    internal static void CheckRowIndex(int rowIndex);
    internal Dictionary`2<long, MergedCellInfo> BuildMergedRegions();
    public sealed virtual void ConvertToImage(int firstRow, int firstColumn, int lastRow, int lastColumn, Stream outputStream);
    public sealed virtual void ConvertToImage(int firstRow, int firstColumn, int lastRow, int lastColumn, ExportImageOptions imageOptions, Stream outputStream);
    public sealed virtual void ConvertToImage(IRange range, Stream outputStream);
    public sealed virtual void ConvertToImage(IRange range, ExportImageOptions imageOptions, Stream outputStream);
    internal bool get_IsValueChanged();
    public sealed virtual void Calculate();
    public sealed virtual void ImportHtmlTable(string fileName, int row, int column);
    public sealed virtual void ImportHtmlTable(Stream fileStream, int row, int column);
    public sealed virtual void ImportHtmlTable(string fileName, int row, int column, HtmlImportOptions htmlImportOptions);
    public sealed virtual void ImportHtmlTable(Stream fileStream, int row, int column, HtmlImportOptions htmlImportOptions);
}
internal class Syncfusion.XlsIO.Implementation.Xlsb.XlsbDataHolder : object {
    private Int32[] DEF_NUMBERFORMAT_INDEXES;
    private static string ContentTypesItemName;
    internal static string RelationsDirectory;
    internal static string RelationExtension;
    private static string TopRelationsPath;
    private static string XmlExtension;
    private static string RelsExtension;
    internal static string BinaryExtension;
    private static string WorkbookPartName;
    private static string CustomXmlPartName;
    private static string SSTPartName;
    private static string StylesPartName;
    private static string ThemesPartName;
    private static string DefaultWorksheetPathFormat;
    internal static string ExtendedPropertiesPartName;
    internal static string CorePropertiesPartName;
    internal static string CustomPropertiesPartName;
    private static string RelationIdFormat;
    private WorkbookImpl m_book;
    private RelationCollection m_topRelations;
    private RelationCollection m_workbookRelations;
    private string m_strStylesRelationId;
    private string m_strSSTRelationId;
    private ZipArchive m_Archive;
    private IDictionary`2<string, string> m_dicDefaultTypes;
    private IDictionary`2<string, string> m_dicOverriddenTypes;
    private Dictionary`2<string, object> m_dictItemsToRemove;
    private Excel2007Parser m_parser;
    private string m_strSSTPartName;
    private string m_strStylesPartName;
    private List`1<int> m_arrCellFormats;
    internal Dictionary`2<string, object> ItemsToRemove { get; }
    internal List`1<int> XFIndexes { get; }
    internal Excel2007Parser Parser { get; }
    internal WorkbookImpl Workbook { get; }
    internal XlsbDataHolder(WorkbookImpl workbookImpl, ZipArchive archive);
    internal Dictionary`2<string, object> get_ItemsToRemove();
    internal List`1<int> get_XFIndexes();
    internal Excel2007Parser get_Parser();
    internal WorkbookImpl get_Workbook();
    internal void ParseDocument(List`1& themeColors, Stream stream);
    internal void ParseSheet(Stream stream, WorksheetImpl sheet, string strParentPath, List`1<int> xFIndexes, Dictionary`2<string, object> itemsToRemove, Dictionary`2<int, int> dictUpdateSSTIndexes);
    private void ParseSheetViews(WorksheetImpl sheet, Stream stream);
    private void ParseSheetFormat(Stream stream, WorksheetImpl sheet);
    private void ParseSheetData(Stream stream, WorksheetImpl sheet, List`1<int> xFIndexes);
    private void ParseRows(Stream stream, WorksheetImpl sheet, List`1<int> arrStyles);
    private void ParseCells(Stream stream, WorksheetImpl sheet, int rowIndex, List`1<int> xFIndexes);
    private void ParseColumns(Stream stream, WorksheetImpl sheet, List`1<int> xFIndexes);
    private void ParseColumn(Stream stream, WorksheetImpl worksheet, List`1<int> xFIndexes);
    private void ParseWorkbook(List`1<Color> themeColors);
    private void ParseWorksheets(Dictionary`2<int, int> dictUpdatedSSTIndexes);
    internal Dictionary`2<int, int> ParseSST(Stream stream, bool parseOnDemand);
    internal int ParseStringItem(Stream stream);
    private int TryGetRecordLength(Stream stream);
    internal ZipArchiveItem GetItem(Relation relation, string parentItemPath, String& strItemPath);
    private List`1<int> ParseStyles(Stream styleStream);
    private List`1<int> ParseStyles(Stream styleStream, List`1<int> arrNamedStyleIndexes);
    private void ParseStyle(Stream stream, List`1<int> arrNamedStyleIndexes, List`1& validate);
    private List`1<int> ParseCellFormats(Stream stream, List`1<int> arrNewFontIndexes, List`1<FillImpl> arrFills, List`1<BordersCollection> arrBorders, List`1<int> namedStyleIndexes, Dictionary`2<int, int> arrNumberFormatIndexes);
    private List`1<int> ParseNamedStyles(Stream stream, List`1<int> arrFontIndexes, List`1<FillImpl> arrFills, List`1<BordersCollection> arrBorders, Dictionary`2<int, int> arrNumberFormatIndexes);
    private ExtendedFormatImpl ParseExtendedFormat(Stream stream, List`1<int> arrFontIndexes, List`1<FillImpl> arrFills, List`1<BordersCollection> arrBorders, List`1<int> namedStyleIndexes, Nullable`1<bool> includeDefault, Dictionary`2<int, int> arrNumberFormatIndexes, bool isCellStyleXfs);
    private List`1<BordersCollection> ParseBorders(Stream styleStream);
    private void ParseBorder(Stream styleStream, List`1<BordersCollection> result);
    private List`1<FillImpl> ParseFills(Stream styleStream);
    private void ParseFill(Stream styleStream, List`1<FillImpl> result);
    private List`1<int> ParseFonts(Stream styleStream);
    private int ParseFont(Stream stream, List`1<int> fontIndexes);
    private Dictionary`2<int, int> ParseNumberFormats(Stream styleStream);
    private void ParseNumberFormat(Stream stream, Dictionary`2<int, int> result);
    private void ParseWorkbookPart(Stream stream, RelationCollection relations, XlsbDataHolder xlsbDataHolder, string strWorkbookPath);
    private void ParseNamedRange(Stream stream);
    private void ParseExternalReferences(Stream stream);
    private void ParseSheetsOptions(Stream stream, RelationCollection relations, FileDataHolder holder, string bookPath);
    private void ParseWorkbookSheetEntry(Stream stream, RelationCollection relations, FileDataHolder holder, string bookPath, int sheetRelationIdCount);
    internal void ParseDocumentProperties();
    internal void ParseArchiveItemByContentType(string strContentType);
    internal XmlReader GetXmlReaderByContentType(string strContentType, String& strItemName);
    private string FindItemByContent(string contentType);
    private string FindItemByContentInDefault(string contentType);
    private string FindItemByContentInOverride(string contentType);
    private RelationCollection ParseRelations(string topRelationsPath);
    private void ParseContentType();
    private void ParseColor(Stream stream, ColorObject color);
    private void SerializeColor(Stream stream, ColorObject color);
    private void EmptyArchive();
    private void SaveDocument(Stream stream);
    private void SaveDocument();
    private void SaveTopLevelRelations();
    private void SaveContentTypes();
    private void SaveDocumentProperties();
    private void SaveArchiveItemRelationContentType(string partName, string contentType, string relationType);
    private void SaveArchiveItem(string strItemPartName);
    private void FillDefaultContentTypes();
    private void SaveWorkbook();
    internal void SaveRelations(string parentPartName, RelationCollection relations);
    private void SaveSharedStrings();
    private void SerializeStringItem(Stream stream, object objTextOrString);
    private Dictionary`2<int, int> SaveStyles();
    private void SerializeStyles(MemoryStream stream, Dictionary`2<int, int> hashNamedStyleIndexes);
    private void SerializeStyle(Stream stream, StyleImpl style, Dictionary`2<int, int> hashNewParentIndexes);
    private Dictionary`2<int, int> SerializeNotNamedXFs(MemoryStream stream, Int32[] arrFillIndexes, Int32[] arrBorderIndexes, Dictionary`2<int, int> hashNewParentIndexes);
    private Dictionary`2<int, int> SerializeNamedStyleXFs(MemoryStream stream, Int32[] fills, Int32[] borders);
    private void SerializeExtendedFormat(MemoryStream stream, Int32[] arrFillIndexes, Int32[] arrBorderIndexes, ExtendedFormatImpl format, bool isCellStyleXf);
    private Int32[] SerializeBorders(MemoryStream stream);
    private void SerializeBordersCollection(MemoryStream stream, BordersCollection bordersCollection);
    private void SerializeBorder(Stream stream, IBorder border);
    private Int32[] SerializeFills(MemoryStream stream);
    private void SerializeFill(MemoryStream stream, FillImpl fillImpl);
    private void SerializeFonts(MemoryStream stream);
    private void SerializeNumberFormats(Stream stream);
    private void SerializeNumberFormat(Stream stream, FormatRecord formatRecord);
    private void SerializeFont(MemoryStream stream, IFont font);
    private void SaveSheets(Dictionary`2<int, int> xfIndexes, RelationCollection relations);
    private void SaveSheet(WorksheetImpl sheet, string strItemName, Dictionary`2<int, int> xfIndexes, RelationCollection relations);
    private void SerializeColumns(Stream stream, WorksheetImpl sheet, Dictionary`2<int, int> dicStyles);
    private int SerializeColumn(Stream stream, ColumnInfoRecord columnInfo, Dictionary`2<int, int> dicStyles, double defaultWidth, WorksheetImpl sheet);
    private void UpdateArchiveItem(WorksheetImpl sheet, string itemName);
    private void SerializeSheetData(Stream stream, WorksheetImpl sheet, Dictionary`2<int, int> xfIndexes);
    private void SerializeRow(Stream stream, RowStorage row, CellRecordCollection cells, int rowIndex, Dictionary`2<int, int> xfIndexes);
    internal static bool ReadBit(byte btValue, int iBit);
    internal static byte ReadBits(byte btValue, int startBit, int endBit);
    internal byte WriteBits(byte actualValue, byte writeVal, int startBit, int endBit);
    internal byte WriteBit(byte val, bool value, int bitPos);
    private void SerializeCell(Stream stream, BiffRecordRaw record, RowStorageEnumerator rowStorageEnumerator, CellRecordCollection cells, Dictionary`2<int, int> xfIndexes);
    private void SerializeSimpleFormula(Stream stream, FormulaRecord formulaRecord, CellType cellType, RowStorageEnumerator rowStorageEnumerator, int row, int col, int xfIndex);
    private void SerializeArrayFormula(Stream stream, ArrayRecord arrayRecord);
    private void SaveWorkbookPart();
    private void SerializeNamedRanges(Stream stream);
    private void SerializeNamedRange(Stream stream, NameImpl name);
    private int GetLocalSheetIndex(WorksheetImpl sheet);
    internal void Serialize(Stream filestream, WorkbookImpl book);
    private string GenerateSheetId();
}
internal enum Syncfusion.XlsIO.Implementation.Xlsb.XlsbRecords : Enum {
    public int value__;
    public static XlsbRecords BeginWorkbook;
    public static XlsbRecords SheetsColBegin;
    public static XlsbRecords SheetRecord;
    public static XlsbRecords SheetsColEnd;
    public static XlsbRecords Name;
    public static XlsbRecords EndWorkbook;
    public static XlsbRecords BeginSheetFormat;
    public static XlsbRecords BeginWorksheet;
    public static XlsbRecords SheetPr;
    public static XlsbRecords SheetDimension;
    public static XlsbRecords SheetViewsBegin;
    public static XlsbRecords SheetViewBegin;
    public static XlsbRecords SheetSelect;
    public static XlsbRecords SheetViewEnd;
    public static XlsbRecords SheetViewsEnd;
    public static XlsbRecords ColumnsBegin;
    public static XlsbRecords Column;
    public static XlsbRecords ColumnsEnd;
    public static XlsbRecords BeginSheetData;
    public static XlsbRecords Row;
    public static XlsbRecords Blank;
    public static XlsbRecords Number;
    public static XlsbRecords Error;
    public static XlsbRecords Boolean;
    public static XlsbRecords Double;
    public static XlsbRecords LabelText;
    public static XlsbRecords SSTItem;
    public static XlsbRecords FormulaNum;
    public static XlsbRecords FormulaStr;
    public static XlsbRecords FormulaBool;
    public static XlsbRecords FormulaErr;
    public static XlsbRecords EndSheetData;
    public static XlsbRecords EndWorksheet;
    public static XlsbRecords BeginSST;
    public static XlsbRecords EndSST;
    public static XlsbRecords StrRecord;
    public static XlsbRecords BeginStyleSheet;
    public static XlsbRecords BeginNumFmtCol;
    public static XlsbRecords NumberFmt;
    public static XlsbRecords EndNumFmtCol;
    public static XlsbRecords BeginFontsCol;
    public static XlsbRecords Font;
    public static XlsbRecords EndFontsCol;
    public static XlsbRecords BeginFillCol;
    public static XlsbRecords Fill;
    public static XlsbRecords EndFillCol;
    public static XlsbRecords BeginBorderCol;
    public static XlsbRecords Border;
    public static XlsbRecords EndBorderCol;
    public static XlsbRecords BeginCellStyleXfs;
    public static XlsbRecords CellStyleXf;
    public static XlsbRecords EndCellStyleXfs;
    public static XlsbRecords BeginCellXfs;
    public static XlsbRecords EndCellXfs;
    public static XlsbRecords BeginCellStyles;
    public static XlsbRecords CellStyle;
    public static XlsbRecords EndCellStyle;
    public static XlsbRecords EndStyleSheet;
    public static XlsbRecords Drawings;
}
public class Syncfusion.XlsIO.Implementation.XmlMap : object {
    private IWorksheet m_sheet;
    private string m_name;
    private string m_schemaId;
    private string m_rootElement;
    private Stream m_xmlSchema;
    private int m_mapId;
    internal int m_connectionID;
    internal static string SchemaElement;
    internal static string IDAttribute;
    internal static string MapElement;
    internal static string NameAttribute;
    internal static string RootElementAttribute;
    internal static string SchemaIDAttribute;
    internal static string ShowImportExportValidationErrorsAttribute;
    internal static string AutoFitAttribute;
    internal static string AppendAttribute;
    internal static string PreserveSortAFLayoutAttribute;
    internal static string PreserveFormatAttribute;
    internal static string DataBinding;
    internal static string FileBinding;
    internal static string DataBindingLoadMode;
    public string Name { get; public set; }
    internal IWorksheet Worksheet { get; internal set; }
    internal string SchemaId { get; internal set; }
    internal string RootElement { get; internal set; }
    internal Stream XmlSchemaData { get; internal set; }
    internal int MapId { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    internal IWorksheet get_Worksheet();
    internal void set_Worksheet(IWorksheet value);
    internal string get_SchemaId();
    internal void set_SchemaId(string value);
    internal string get_RootElement();
    internal void set_RootElement(string value);
    internal Stream get_XmlSchemaData();
    internal void set_XmlSchemaData(Stream value);
    internal int get_MapId();
    internal void set_MapId(int value);
    internal bool BindXml(Stream stream, WorkbookImpl workbook, IWorksheet sheet, int row, int column, int count);
    internal bool GetColumnInformation(ListObjectColumn tableColumn, XmlSchema xmlSchema, DataColumn column);
    internal void FindElement(string xpath, ListObjectColumn tableColumn, ICollection collection, DataColumn column);
    internal XmlSchema ReadSchema(Stream stream);
    internal void ParseSchema(XmlReader reader);
    internal void SerializeSchema(XmlWriter writer);
    internal void SerializeMapInformation(XmlWriter writer);
    internal void Dispose();
}
public class Syncfusion.XlsIO.Implementation.XmlReaders.DxfImpl : object {
    private BordersCollection m_borders;
    private FillImpl m_fill;
    private FontImpl m_font;
    private FormatImpl m_format;
    private ColorObject m_verticalColorObject;
    private ColorObject m_horizontalColorObject;
    private ExcelLineStyle m_verticalBorderStyle;
    private ExcelLineStyle m_horizontalBorderStyle;
    private bool m_isVerticalBorderModified;
    private bool m_isHorizontalBorderModified;
    private byte m_btIndent;
    private ushort m_readingOrder;
    private ushort m_rotation;
    private bool m_bShrinkToFit;
    private bool m_bWrapText;
    private ExcelHAlign m_hAlignment;
    private ExcelVAlign m_vAlignment;
    private bool m_bLocked;
    private bool m_bHidden;
    private bool m_bHasAlignment;
    private bool m_bHasProtection;
    public FormatImpl FormatRecord { get; public set; }
    public FillImpl Fill { get; public set; }
    public FontImpl Font { get; public set; }
    public BordersCollection Borders { get; public set; }
    internal ColorObject VerticalColorObject { get; internal set; }
    internal ColorObject HorizontalColorObject { get; internal set; }
    internal ExcelLineStyle VerticalBorderStyle { get; internal set; }
    internal ExcelLineStyle HorizontalBorderStyle { get; internal set; }
    internal bool IsHorizontalBorderModified { get; internal set; }
    internal bool IsVerticalBorderModified { get; internal set; }
    internal ExcelHAlign HAlignmentType { get; internal set; }
    internal ExcelVAlign VAlignmentType { get; internal set; }
    internal bool WrapText { get; internal set; }
    internal byte Indent { get; internal set; }
    internal bool ShrinkToFit { get; internal set; }
    internal ushort ReadingOrder { get; internal set; }
    internal ushort Rotation { get; internal set; }
    internal bool IsLocked { get; internal set; }
    internal bool IsHidden { get; internal set; }
    internal bool HasAlignment { get; internal set; }
    internal bool HasProtection { get; internal set; }
    public FormatImpl get_FormatRecord();
    public void set_FormatRecord(FormatImpl value);
    public FillImpl get_Fill();
    public void set_Fill(FillImpl value);
    public FontImpl get_Font();
    public void set_Font(FontImpl value);
    public BordersCollection get_Borders();
    public void set_Borders(BordersCollection value);
    internal ColorObject get_VerticalColorObject();
    internal void set_VerticalColorObject(ColorObject value);
    internal ColorObject get_HorizontalColorObject();
    internal void set_HorizontalColorObject(ColorObject value);
    internal ExcelLineStyle get_VerticalBorderStyle();
    internal void set_VerticalBorderStyle(ExcelLineStyle value);
    internal ExcelLineStyle get_HorizontalBorderStyle();
    internal void set_HorizontalBorderStyle(ExcelLineStyle value);
    internal bool get_IsHorizontalBorderModified();
    internal void set_IsHorizontalBorderModified(bool value);
    internal bool get_IsVerticalBorderModified();
    internal void set_IsVerticalBorderModified(bool value);
    internal ExcelHAlign get_HAlignmentType();
    internal void set_HAlignmentType(ExcelHAlign value);
    internal ExcelVAlign get_VAlignmentType();
    internal void set_VAlignmentType(ExcelVAlign value);
    internal bool get_WrapText();
    internal void set_WrapText(bool value);
    internal byte get_Indent();
    internal void set_Indent(byte value);
    internal bool get_ShrinkToFit();
    internal void set_ShrinkToFit(bool value);
    internal ushort get_ReadingOrder();
    internal void set_ReadingOrder(ushort value);
    internal ushort get_Rotation();
    internal void set_Rotation(ushort value);
    internal bool get_IsLocked();
    internal void set_IsLocked(bool value);
    internal bool get_IsHidden();
    internal void set_IsHidden(bool value);
    internal bool get_HasAlignment();
    internal void set_HasAlignment(bool value);
    internal bool get_HasProtection();
    internal void set_HasProtection(bool value);
    internal void FillCondition(IInternalConditionalFormat conFormat);
    internal void FillTableStyle(TableStyleElement tableStyleElement);
    internal void FillPivotCellFormat(IInternalPivotCellFormat pivotCellFormat);
    internal void FillSorting(ISortField sortField);
    public DxfImpl Clone(WorkbookImpl book);
}
public class Syncfusion.XlsIO.Implementation.XmlReaders.Excel2007Parser : object {
    internal static byte HLSMax;
    private static byte RGBMax;
    private static double Undefined;
    public static int AdditionalProgressItems;
    private static string CarriageReturn;
    private static string LineFeed;
    private static string NullChar;
    private static string BackSpace;
    private static string Tab;
    private static string ContentTypeSchema;
    private static string ContentTypeNameSpace;
    private static string XmlSchemaNameSpace;
    private static string ElementName;
    private static string Name;
    private static string DisplayName;
    private static string InternalName;
    private static string Reference;
    private static string ComplexContent;
    private static string DEF_IMAGEPATH;
    private int startRow;
    private int endRow;
    private int previousOutlineLevel;
    private int previousRow;
    private static string DoubleEqualent;
    private static string ThreeStars;
    private static string ThreeTriangles;
    private static string FiveBoxes;
    private WorkbookImpl m_book;
    private FormulaUtil m_formulaUtil;
    private Dictionary`2<int, ShapeParser> m_dictShapeParsers;
    private List`1<Color> m_lstThemeColors;
    internal Dictionary`2<string, Color> m_dicThemeColors;
    private Dictionary`2<string, FontImpl> m_dicMajorFonts;
    private Dictionary`2<string, FontImpl> m_dicMinorFonts;
    private Dictionary`2<int, ShapeLineFormatImpl> m_dicLineStyles;
    private List`1<string> m_values;
    private List`1<ZipArchiveItem> m_bgImages;
    private string parentElement;
    private bool m_enableAlternateContent;
    private WorksheetImpl m_workSheet;
    private DrawingParser m_drawingParser;
    private OutlineWrapperUtility m_outlineWrapperUtility;
    private int dpiX;
    private int dpiY;
    private int minRow;
    private int maxRow;
    private int minColumn;
    private int maxColumn;
    private Int32[] DEF_NUMBERFORMAT_INDEXES;
    private bool m_hasDVExtlst;
    private bool m_hasCFExtlst;
    private ExcelCFType m_cfType;
    private Dictionary`2<string, Color> m_currentChartThemeColors;
    private Regex m_decodePattern;
    public FormulaUtil FormulaUtil { get; internal set; }
    internal WorksheetImpl Worksheet { get; }
    internal Dictionary`2<string, Color> CurrentChartThemeColors { get; internal set; }
    public Excel2007Parser(WorkbookImpl book);
    public FormulaUtil get_FormulaUtil();
    internal void set_FormulaUtil(FormulaUtil value);
    internal WorksheetImpl get_Worksheet();
    internal Dictionary`2<string, Color> get_CurrentChartThemeColors();
    internal void set_CurrentChartThemeColors(Dictionary`2<string, Color> value);
    public Color GetThemeColor(string colorName);
    public static Color GetThemeColor(string colorName, Dictionary`2<string, Color> themeColors);
    public void ParseContentTypes(XmlReader reader, IDictionary`2<string, string> contentDefaults, IDictionary`2<string, string> contentOverrides);
    internal void ParseSlicerCacheItem(WorkbookImpl book, XmlReader reader, Stream dataStream);
    internal void ParsePivotSlicerCacheItem(WorkbookImpl book, XmlReader reader, string sourceName, string name);
    public void ParseWorkbook(XmlReader reader, RelationCollection relations, FileDataHolder holder, string bookPath, Stream streamStart, Stream streamEnd, List`1& lstBookViews, Stream functionGroups, List`1& lstCustomBookViews);
    internal void ParseMetaProperties(XmlReader reader, FileDataHolder fileDataHolder, Stream stream, string itemName);
    private static void ParseDocumentManagmentSchema(XmlReader reader, List`1& m_values);
    private void ParseChildElements(XmlReader reader);
    private void ParseDocumentManagementPropties(XmlReader reader);
    private MetaPropertyImpl GetPropertyByName(string name);
    private void ReadManagementProperties(XmlReader reader, string internalName, int childCount);
    public void ParsePivotTables();
    public void ParseWorksheets(Dictionary`2<int, int> dictUpdatedSSTIndexes, bool parseOnDemand);
    private void ParsePivotCaches(XmlReader reader);
    private void ParsePivotCache(XmlReader reader);
    private void ParseFileVersion(XmlReader reader, FileVersion fileVersion);
    private void ParseFileSharing(XmlReader reader);
    private void ParseWorkbookPr(XmlReader reader);
    private void ParseCalcProperties(XmlReader reader);
    private void ParseWorkbookProtection(XmlReader reader);
    private List`1<Dictionary`2<string, string>> ParseBookViews(XmlReader reader, Int32& iActiveSheetIndex, Int32& iDisplayedTab);
    private Dictionary`2<string, string> ParseWorkbookView(XmlReader reader);
    public void ParseSheet(XmlReader reader, WorksheetImpl sheet, string strParentPath, MemoryStream& streamStart, MemoryStream& streamCF, List`1<int> arrStyles, Dictionary`2<string, object> dictItemsToRemove, Dictionary`2<int, int> dictUpdatedSSTIndexes);
    private void ParseSheetBeforeData(XmlReader reader, WorksheetImpl sheet, Stream streamStart, List`1<int> arrStyles);
    private void ParseSheetViews(XmlReader reader, WorksheetBaseImpl sheet);
    private void ParseSheetView(XmlReader reader, WorksheetBaseImpl sheetBase);
    private void ParseSelection(XmlReader reader, WorksheetImpl sheet);
    private ActivePane GetPaneType(string value);
    private void ParsePane(XmlReader reader, WorksheetImpl sheet);
    private void ParsePaneState(WindowTwoRecord windowTwo, string state);
    public void ParseChartsheet(XmlReader reader, ChartImpl chart);
    private void ParseChartDrawing(XmlReader reader, ChartImpl chart);
    private void TryRemoveChartSheetFallBackRelations(XmlReader reader, ChartImpl chart, string drawingItemName, FileDataHolder holder, RelationCollection relations);
    private Size ParseAbsoluteAnchorExtent(XmlReader reader);
    private void ParseChartTag(XmlReader reader, ChartImpl chart, RelationCollection relations, FileDataHolder dataHolder, string itemName, bool isChartEx);
    private void ExtractDefaultRowHeight(XmlReader reader, WorksheetImpl sheet);
    private void SetDefaultColumnWidth(double defaultWidth, bool bool_2, WorksheetImpl worksheet);
    private void ExtractZeroHeight(XmlReader reader, WorksheetImpl sheet);
    private void ParseScenarios(XmlReader reader, WorksheetImpl sheet, IScenarios scenarios);
    public void ParseMergedCells(XmlReader reader, WorksheetImpl sheet);
    public void ParseNamedRanges(XmlReader reader);
    public List`1<int> ParseStyles(XmlReader reader, Stream& streamDxfs);
    private void ParseBookExtensions(XmlReader reader);
    public Dictionary`2<int, int> ParseSST(XmlReader reader, bool parseOnDemand);
    public int ParseStringItem(XmlReader reader);
    public int ParseStringItem(XmlReader reader, String& text);
    public void ParseVmlShapes(XmlReader reader, ShapeCollectionBase shapes, RelationCollection relations, string parentItemPath);
    public RelationCollection ParseRelations(XmlReader reader);
    public Dictionary`2<string, string> ParseSheetData(XmlReader reader, IInternalWorksheet sheet, List`1<int> arrStyles, string cellTag);
    public void ParseComments(XmlReader reader, WorksheetImpl sheet);
    internal void ParseThreadedComments(XmlReader reader, WorksheetImpl sheet);
    internal void ParseThreadedComment(XmlReader reader, WorksheetImpl sheet, IThreadedComment threadedComment);
    internal void ParseMentions(XmlReader reader, ThreadedComment threadedCommentImpl);
    internal void ParseMention(XmlReader reader, Mention mention);
    public void ParseDrawings(XmlReader reader, WorksheetBaseImpl sheet, string drawingsPath, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    internal void ParseDrawings(XmlReader reader, WorksheetBaseImpl sheet, string drawingsPath, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove, bool isChartShape);
    private void ParseAlternateContent(XmlReader reader, WorksheetBaseImpl sheet, string drawingsPath, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    private void ParseAlternateContent(XmlReader reader, WorksheetImpl sheet);
    private void ParseChoice(XmlReader reader, WorksheetBaseImpl sheet, string drawingsPath, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    private void ParseChoice(XmlReader reader, WorksheetImpl sheet);
    private void ParseAfterSheetData(XmlReader reader, WorksheetImpl sheet, MemoryStream& streamCF, string strParentPath, Dictionary`2<string, object> dictItemsToRemove);
    private void ParseExtensionlist(XmlReader reader, WorksheetImpl sheet);
    private void ParseExt(WorksheetImpl sheet, XmlReader reader);
    internal static void ParseSlicerList(Stream slicerStream, WorksheetImpl sheet);
    private void ParseSparklineGroups(WorksheetImpl sheet, XmlReader reader);
    private SparklineGroup ParseSparklineGroup(XmlReader reader, WorksheetImpl sheet);
    private Sparklines ParseSparklines(XmlReader reader, WorksheetImpl sheet);
    private Sparkline ParseSparkline(XmlReader reader, WorksheetImpl sheet);
    private void ParseOleObjects(XmlReader reader, WorksheetBaseImpl sheet);
    private void ParseFallback(XmlReader reader, WorksheetImpl sheet);
    private void ParseFallbackOleObject(XmlReader reader, WorksheetImpl sheet);
    private OleObject ParseOleObject(XmlReader reader, WorksheetImpl sheet);
    private void ParseObjectPr(XmlReader reader, WorksheetImpl sheet, OleObject oleObject);
    private void ParseAnchor(XmlReader reader, WorksheetImpl sheet, OleObject oleObject);
    private string ParseExternName(string link, OleObject oleObject);
    private void ParseTableParts(XmlReader reader, WorksheetImpl sheet, string sheetPath);
    private string ParseTablePart(XmlReader reader, WorksheetImpl sheet, string sheetPath);
    private void ParseControls(XmlReader reader, WorksheetImpl sheet);
    private void ParseControlsAlternateContent(XmlReader reader, WorksheetImpl sheet);
    private void ParseControlsChoice(XmlReader reader, WorksheetImpl sheet);
    private void ParseControl(XmlReader reader, WorksheetImpl sheet);
    private void ParseControlPr(XmlReader reader, ShapeImpl shape);
    private void ParseAnchor(XmlReader reader, ShapeImpl shape);
    private void ParseSheetProtection(XmlReader reader, WorksheetBaseImpl sheet, string protectContentTag);
    private ExcelSheetProtection CheckChartProtectionAttribute(XmlReader reader, string attributeName, ExcelSheetProtection flag, bool defaultValue, ExcelSheetProtection protection);
    private ExcelSheetProtection CheckProtectionAttribute(XmlReader reader, string attributeName, ExcelSheetProtection flag, bool defaultValue, ExcelSheetProtection protection);
    private void ParseIgnoreError(XmlReader reader, WorksheetImpl sheet);
    private void ExtractIgnoredError(XmlReader reader, WorksheetImpl sheet);
    private void AddErrorIndicator(string strRange, ExcelIgnoreError options, WorksheetImpl sheet);
    private void ParseCustomWorksheetProperties(XmlReader reader, WorksheetImpl sheet);
    private void ParseCustomProperty(XmlReader reader, WorksheetImpl sheet);
    private static int GetParsedXmlValue(string xmlValue);
    private string GetPropertyData(string id, WorksheetDataHolder dataHolder);
    public static void ParseLegacyDrawingHF(XmlReader reader, WorksheetBaseImpl sheet, RelationCollection relations);
    private void ParseDrawings(XmlReader reader, WorksheetBaseImpl sheet, Dictionary`2<string, object> dictItemsToRemove);
    private void ParseLegacyDrawing(XmlReader reader, WorksheetBaseImpl sheet);
    private void ParseTwoCellAnchor(XmlReader reader, WorksheetBaseImpl sheet, string drawingsPath, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove, bool isChartShape);
    internal void CalculateShapesPosition(ChartImpl chartImpl, double width, double height);
    internal GroupShapeImpl ParseGroupShape(XmlReader reader, WorksheetBaseImpl sheet, string drawingsPath, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    private ShapeImpl CreateShape(XmlReader reader, WorksheetBaseImpl sheet, MemoryStream& data, string drawingsPath, List`1<string> lstRelationIds);
    private AutoShapeImpl CheckShapeIsFreeForm(Stream custGeomStream, WorksheetBaseImpl sheet, XmlReader reader, List`1<string> lstRelationIds);
    private bool IsChartExChoice(XmlReader reader);
    public void ParseAutoShape(AutoShapeImpl autoShape, XmlReader reader);
    private void ParseAutoShape(AutoShapeImpl autoShape, XmlReader reader, List`1<string> lstRelationIds);
    private void ParseProperties(XmlReader reader, AutoShapeImpl autoShape, List`1<string> lstRelationIds);
    private static void ParseCustomGeometry(XmlReader reader, AutoShapeImpl shape);
    internal static void SetReaderPosition(XmlReader reader);
    private static void ParsePresetGeomentry(XmlReader reader, AutoShapeImpl shape);
    internal static void SkipWhitespaces(XmlReader reader);
    private static void ParseGeomGuideList(XmlReader reader, AutoShapeImpl shape);
    private void ParseGroupShapeProperties(XmlReader reader, GroupShapeImpl groupShape);
    private static void ParseRichText(XmlReader reader, AutoShapeImpl autoShape, Excel2007Parser parser);
    internal static void ParseBodyProperties(XmlReader reader, TextBodyPropertiesHolder TextBodyProperties);
    private static void ParseParagraphs(XmlReader reader, AutoShapeImpl autoShape, Excel2007Parser parser, RichTextString textArea);
    private static void ParseParagraphProperites(XmlReader reader, AutoShapeImpl autoShape, RichTextString textString, BulletImpl& bullet);
    private static void ParseParagraphRun(XmlReader reader, AutoShapeImpl autoShape);
    private void ParseForm(XmlReader reader);
    private void ParseForm(XmlReader reader, BitmapShapeImpl picture);
    private void ParseForm(XmlReader reader, GroupShapeImpl groupShape);
    private ShapeImpl TryParseChart(MemoryStream data, WorksheetBaseImpl sheet, string drawingPath, bool isChartEx);
    private ShapeImpl TryParseShape(MemoryStream data, WorksheetBaseImpl sheet, string drawingPath, List`1<string> lstRelationIds);
    private void RemoveRelations(string childName, Stream stream, List`1<string> lstRelationIds);
    private void AddRelations(WorksheetBaseImpl sheet, string drawingPath, string strRelation);
    internal MemoryStream ReadSingleNodeIntoStream(XmlReader reader);
    private Size ParseExtent(XmlReader reader);
    private void ParseEditAsValue(ShapeImpl shape, string editAs);
    private void SetAnchor(ShapeImpl shape, Rectangle fromRect, Rectangle toRect, Size shapeExtent, bool bRelative, bool bOneCellAnchor);
    private MsofbtClientAnchor SetAnchor(ShapeImpl shape, Rectangle fromRect, Rectangle toRect);
    private Rectangle NormalizeAnchor(Rectangle anchorPoint, IWorksheet sheet);
    private Rectangle ParseAnchorPoint(XmlReader reader, bool isChartShape, Double& posX, Double& posY);
    private Rectangle ParseAnchorValue(XmlReader reader, bool isChartShape, Double& posX, Double& posY);
    private ShapeImpl ParsePicture(XmlReader reader, WorksheetBaseImpl sheet, string drawingsPath, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    private void ParseShapeProperties(XmlReader reader, ShapeImpl shape);
    private void ParseBlipFill(XmlReader reader, BitmapShapeImpl shape, RelationCollection relations, string parentPath, FileDataHolder holder, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    private void ParseBlipTag(XmlReader reader, BitmapShapeImpl shape, RelationCollection relations, string strParentPath, FileDataHolder holder, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    private void ParseBlipImage(XmlReader reader, BitmapShapeImpl picture, RelationCollection relations, string strParentPath, FileDataHolder holder, List`1<string> lstRelationIds);
    private void ParseColorChangeEffect(XmlReader reader, BitmapShapeImpl picture);
    private void ParseBlipExtensionList(XmlReader reader, BitmapShapeImpl picture, RelationCollection relations, string strParentPath, FileDataHolder holder, List`1<string> lstRelationIds);
    private void ParseImageProperties(XmlReader reader, BitmapShapeImpl picture, RelationCollection relations, string strParentPath, FileDataHolder holder, List`1<string> lstRelationIds);
    private void ReadSvgData(XmlReader reader, BitmapShapeImpl picture, RelationCollection relations, string strParentPath, FileDataHolder holder, List`1<string> lstRelationIds);
    private void ParsePictureProperties(XmlReader reader, ShapeImpl shape, RelationCollection relations, string strParentPath, FileDataHolder holder, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    private void ParseNVPictureCanvas(XmlReader reader, ShapeImpl shape);
    private void ParseNVPictureCanvasExtension(XmlReader reader, ShapeImpl shape);
    private int GetShapeId(string shapeId);
    public static void ParseNVCanvasProperties(XmlReader reader, IShape shape);
    internal static void ParseNVCanvasProperties(XmlReader reader, ShapeImpl shape, RelationCollection relations, string strParentPath, FileDataHolder holder, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove);
    private static void ParseClickHyperlink(XmlReader reader, ShapeImpl shape, RelationCollection relations, string strParentPath, FileDataHolder holder, List`1<string> lstRelationIds, Dictionary`2<string, object> dictItemsToRemove, IHyperLinks hyperLinks);
    private void ParseCommentList(XmlReader reader, List`1<string> arrAuthors, WorksheetImpl sheet);
    private void ParseComment(XmlReader reader, IList`1<string> authors, WorksheetImpl sheet);
    private List`1<string> ParseAuthors(XmlReader reader);
    private void ParseShape(XmlReader reader, Dictionary`2<string, ShapeImpl> dictShapeIdToShape, RelationCollection relations, string parentItemPath, ShapeCollectionBase shapes, bool isShapeTypePresent);
    private void ParseShapeType(XmlReader reader, ShapeCollectionBase shapes, Dictionary`2<string, ShapeImpl> dictShapeIdToShape, Stream layoutStream);
    private void ParseShapeWithoutType(XmlReader reader, ShapeCollectionBase shapes, RelationCollection relations, string parentItemPath);
    private int ParseRichTextRun(XmlReader reader);
    private TextWithFormat ParseTextWithFormat(XmlReader reader, string closingTagName);
    private void ParseFormattingRun(XmlReader reader, TextWithFormat textWithFormat);
    private int ParseText(XmlReader reader, bool setCount);
    private int ParseText(XmlReader reader, bool setCount, String& text);
    private int ParseRichTextRun(XmlReader reader, String& text);
    private List`1<int> ParseNamedStyles(XmlReader reader, List`1<int> arrFontIndexes, List`1<FillImpl> arrFills, List`1<BordersCollection> arrBorders, Dictionary`2<int, int> arrNumberFormatIndexes);
    private List`1<int> ParseCellFormats(XmlReader reader, List`1<int> arrNewFontIndexes, List`1<FillImpl> arrFills, List`1<BordersCollection> arrBorders, List`1<int> namedStyleIndexes, Dictionary`2<int, int> arrNumberFormatIndexes);
    private void ParseStyles(XmlReader reader, List`1<int> arrNamedStyleIndexes);
    private static string GetASCIIString(string plainText);
    private static string ConvertHextoAscii(string HexString);
    private void ParseStyle(XmlReader reader, List`1<int> arrNamedStyleIndexes, List`1& validate);
    private ExtendedFormatImpl ParseExtendedFormat(XmlReader reader, List`1<int> arrFontIndexes, List`1<FillImpl> arrFills, List`1<BordersCollection> arrBorders, List`1<int> namedStyleIndexes, Nullable`1<bool> includeDefault, Dictionary`2<int, int> arrNumberFormatIndexes, bool isCellStyleXfs);
    private void ParseAlignmentAndProtection(XmlReader reader, ExtendedFormatImpl format, bool hasAlignment);
    private void ParseAlignment(XmlReader reader, ExtendedFormatRecord record);
    private void ParseProtection(XmlReader reader, ExtendedFormatRecord record);
    private void ParseIncludeAttributes(XmlReader reader, ExtendedFormatImpl format, Nullable`1<bool> defaultValue, Boolean& hasAlignment, Dictionary`2<int, int> arrNumberFormatIndexes);
    private void ParseFontFillBorder(XmlReader reader, ExtendedFormatImpl extendedFormat, List`1<int> arrFontIndexes, List`1<FillImpl> arrFills, List`1<BordersCollection> arrBorders);
    internal static void CopyBorderSettings(BordersCollection borders, ExtendedFormatImpl format);
    private static bool BordersDifferent(IBorder border, ColorObject color, ExcelLineStyle lineStyle);
    private static void ParseRelation(XmlReader reader, RelationCollection relations);
    private void ParseSheetsOptions(XmlReader reader, RelationCollection relations, FileDataHolder holder, string bookPath);
    internal static void ParseExtensionList(Stream slicerStream, RelationCollection relations, FileDataHolder holder, WorkbookImpl workbook);
    internal static bool CheckSlicerCache(Stream slicerStream, RelationCollection relations, FileDataHolder holder, WorkbookImpl workbook);
    private void ParseWorkbookSheetEntry(XmlReader reader, RelationCollection relations, FileDataHolder holder, string bookPath, int sheetRelationIdCount);
    internal void SetVisibilityState(WorksheetBaseImpl sheet, string strVisibility);
    private void ParseDictionaryEntry(XmlReader reader, IDictionary`2<string, string> dictionary, string keyAttribute, string valueAttribute);
    private void ParseScenario(XmlReader reader, WorksheetImpl sheet, Scenario scenario);
    private void ParseInputCells(XmlReader reader, WorksheetImpl sheet, IScenario scenario, RangesCollection ranges);
    private void ParseMergeRegion(XmlReader reader, WorksheetImpl sheet);
    private string ParseNamedRange(XmlReader reader, Int32& index);
    private FormatImpl ParseDxfNumberFormat(XmlReader reader);
    private List`1<int> ParseFonts(XmlReader reader);
    private int ParseFont(XmlReader reader, List`1<int> fontIndexes);
    private FontImpl ParseFont(XmlReader reader);
    private void ParseFontSettings(XmlReader reader, FontImpl font);
    private byte ParseFamily(XmlReader reader);
    private byte ParseCharSet(XmlReader reader);
    private Dictionary`2<int, int> ParseNumberFormats(XmlReader reader);
    private void ParseNumberFormat(XmlReader reader, Dictionary`2<int, int> result);
    private ColorObject ParseColor(XmlReader reader);
    private void ParseColor(XmlReader reader, ColorObject color);
    private void ParseFillColor(XmlReader reader, ColorObject color);
    public static Color ConvertColorByTint(Color color, double dTint);
    internal static Color ConvertColorByTint(Color color, double dTint, bool updateParsedColor);
    internal static Color ConvertColorByTintBlip(Color color, double dTint);
    internal static double CalcDouble(int integer);
    internal static int CalcInt(double doubleValue);
    public static void ConvertRGBtoHLS(Color color, Double& dHue, Double& dLuminance, Double& dSaturation);
    internal static void ConvertRGBtoHLSBlip(Color color, Double& dHue, Double& dLuminance, Double& dSaturation);
    public static Color ConvertHLSToRGB(double dHue, double dLuminance, double dSaturation);
    internal static Color ConvertHLSToRGBBlip(double dHue, double dLuminance, double dSaturation);
    public static double HueToRGB(double dN1, double dN2, double dHue);
    private bool ParseBoolean(XmlReader reader, string valueAttribute, bool defaultValue);
    private string ParseValue(XmlReader reader, string valueAttribute);
    private List`1<FillImpl> ParseFills(XmlReader reader);
    private FillImpl ParseFill(XmlReader reader, bool swapColors);
    private FillImpl ParseGradientFill(XmlReader reader);
    private FillImpl ParsePathGradientType(XmlReader reader);
    private List`1<ColorObject> ParseStopColors(XmlReader reader);
    private FillImpl ParseLinearGradientType(XmlReader reader);
    private void SetGradientStyleVariant(FillImpl fill, double dDegree);
    private double ParseAttributeValue(XmlReader reader, string strAttributeName);
    private FillImpl ParsePatternFill(XmlReader reader, bool swapColors);
    private static ExcelPattern ConvertStringToPattern(string value);
    private List`1<BordersCollection> ParseBorders(XmlReader reader);
    private BordersCollection ParseBordersCollection(XmlReader reader);
    private BordersCollection ParseBordersCollection(XmlReader reader, DxfImpl dxfImpl);
    private BorderSettingsHolder ParseBorder(XmlReader reader, Excel2007BorderIndex& borderIndex);
    private void ParseAlignment(XmlReader reader, DxfImpl dxfImpl);
    private void ParseProtection(XmlReader reader, DxfImpl dxfImpl);
    private int ParseRow(XmlReader reader, IInternalWorksheet sheet, List`1<int> arrStyles, string cellTag, int generatedRowIndex);
    private int ParseCell(XmlReader reader, IInternalWorksheet sheet, List`1<int> arrStyles, int rowIndex, int columnIndex, List`1<int> cellStyleIndex, RowStorage rowStorage);
    internal static void CellNameToRowColumn(string name, Int32& iColumn);
    private static CellType GetCellType(string cellType);
    private void ParseFormula(XmlReader reader, IInternalWorksheet sheet, int iRow, int iCol, int iXFIndex, CellType cellType, Boolean& isArrayFormula);
    private FormulaType GetFormulaType(string value);
    private void ParsePalette(XmlReader reader);
    private void ParseColors(XmlReader reader);
    private void ParseColumns(XmlReader reader, WorksheetImpl sheet, List`1<int> arrStyles);
    private void ParseColumn(XmlReader reader, WorksheetImpl sheet, List`1<int> arrStyles);
    private int ParseColumnInfoRecord(XmlReader xmlTextReader, WorksheetImpl worksheet, int index);
    private void SwitchStreams(Boolean& bAdd, XmlWriter& writer, StreamWriter& textWriter, Stream streamEnd);
    public void ParseDataValidations(XmlReader reader, WorksheetImpl sheet);
    private void ParseDataValidation(XmlReader reader, DataValidationCollection dvCollection);
    private void ParseAlternateContent(XmlReader reader, DataValidationImpl dataValidation);
    private void DetectIsStringList(DataValidationImpl dataValidation);
    private void ParseSorting(XmlReader reader, WorksheetImpl sheet);
    private void ParseSortData(XmlReader reader, IDataSort dataSorter);
    private void ParseSortCondition(XmlReader reader, DataSorter sortState, List`1<DxfImpl> lstDxfs);
    private void ParseFormulaOneTwoValues(XmlReader reader, DataValidationImpl dataValidation);
    public void ParseAutoFilters(XmlReader reader, WorksheetImpl sheet);
    internal void ParseAutoFilters(XmlReader reader, AutoFiltersCollection filters);
    private void ParseFilterColumn(XmlReader reader, AutoFiltersCollection autoFilters);
    private void ParseFilters(XmlReader reader, AutoFilterImpl autoFilter);
    private void ParseColorFilter(XmlReader reader, AutoFilterImpl autoFilter);
    private void ParseIconFilter(XmlReader reader, AutoFilterImpl autoFilter);
    private void ParseAutoFilterTopTen(XmlReader reader, AutoFilterImpl autoFilter);
    private void ParseCustomFilters(XmlReader reader, AutoFilterImpl autoFilter);
    private void ParseCustomFilter(XmlReader reader, AutoFilterImpl autoFilter);
    private void ChangeConditionOperator(AutoFilterConditionImpl condition, string CondtionValue);
    internal void ParsePersons(XmlReader reader, WorkbookImpl workbook);
    internal void ParsePerson(XmlReader reader, WorkbookImpl workbook);
    public List`1<Color> ParseThemes(XmlReader reader);
    public List`1<Color> ParseThemeElements(XmlReader reader);
    private void ParseFormatScheme(XmlReader reader);
    private void ParseLineStyles(XmlReader reader, Dictionary`2& m_dicLineStyles);
    private void ParseFontScheme(XmlReader reader);
    private void ParseMinorFont(XmlReader reader, Dictionary`2& dicMinorFonts);
    private void ParseMajorFont(XmlReader reader, Dictionary`2& dicMajorFonts);
    public FontImpl GetFont(XmlReader reader);
    public static void SkipWhiteSpaces(XmlReader reader);
    public List`1<Color> ParseThemeColors(XmlReader reader, Dictionary`2& dicThemeColors);
    public List`1<DxfImpl> ParseDxfCollection(XmlReader reader);
    private DxfImpl ParseDxfStyle(XmlReader reader);
    public void ParseSheetConditionalFormatting(XmlReader reader, WorksheetConditionalFormats sheetConditionalFormats, List`1<DxfImpl> lstDxfs);
    internal void ParseCustomTableStyles(XmlReader reader);
    internal void ParseTableStylesFromExcel2007(XmlReader reader, FileDataHolder dataHolder);
    internal void ParseTableStyles(XmlReader reader, List`1<DxfImpl> dxfStyles);
    internal void ParseTableStyle(XmlReader reader, TableStyle tableStyle, List`1<DxfImpl> dxfStyles);
    internal void ParseTableStyleElement(XmlReader reader, TableStyleElement tableStyleElement, List`1<DxfImpl> dxfStyles);
    private void UpdateUsedRange(ConditionalFormats conditionalFormats);
    public bool ParseConditionalFormatting(XmlReader reader, ConditionalFormats conditionalFormats, List`1<DxfImpl> lstDxfs);
    private void UpdateCFRange(string address, WorksheetImpl worksheet);
    private string ParseRangeReference(XmlReader reader, IConditionalFormat format);
    public void ParseCFRuleTag(XmlReader reader, ConditionalFormats conditionalFormats, List`1<DxfImpl> lstDxfs, bool hasExLst);
    private void ParseCFRuleTag(XmlReader reader, ConditionalFormats conditionalFormats, List`1<DxfImpl> lstDxfs, bool hasExLst, String& refRange);
    private void ParseConditionFormatRule(XmlReader reader, IInternalConditionalFormat conFormat, List`1<DxfImpl> lstDxfs, String& conditionalFormatFirstFormula, String& conditionalFormatSecondFormula);
    private void ParseColorScale(XmlReader reader, IColorScale colorScale, WorkbookImpl book);
    private void ParseDataBar(XmlReader reader, DataBarImpl dataBar, IWorkbook book);
    private void ParseIconSet(XmlReader reader, IIconSet iconSet, IWorkbook book);
    private void ParseCFValueObject(XmlReader reader, IWorkbook book, ConditionValue condition);
    private ConditionValueType GetValueType(string strType);
    private void ParseCFFormulas(XmlReader reader, ConditionalFormatImpl cFormat, String& conditionalFormatFirstFormula, String& conditionalFormatSecondFormula);
    public static void ParsePrintOptions(XmlReader reader, IPageSetupBase pageSetup);
    public static void ParsePageMargins(XmlReader reader, IPageSetupBase pageSetup, IPageSetupConstantsProvider constants);
    public static void ParsePageSetup(XmlReader reader, PageSetupBaseImpl pageSetup);
    public static void ParseHeaderFooter(XmlReader reader, PageSetupBaseImpl pageSetup);
    private static ExcelPrintLocation StringToPrintComments(string printLocation);
    private static ExcelPrintErrors StringToPrintErrors(string printErrors);
    private void ParseHyperlinks(XmlReader reader, WorksheetImpl sheet);
    private string ParseHyperlink(XmlReader reader, WorksheetImpl sheet, HyperLinksCollection hyperlinks, RelationCollection relations);
    private void ParseSheetLevelProperties(XmlReader reader, WorksheetBaseImpl sheet);
    private void ParsePageSetupProperties(XmlReader reader, IPageSetup pageSetup);
    private void ParseOutlineProperites(XmlReader reader, IPageSetup pageSetup);
    private void ParseBackgroundImage(XmlReader reader, WorksheetBaseImpl worksheetBase, string strParentPath);
    public string ParseItemProperties(XmlReader reader, List`1& schemas);
    private void ParseschemaReference(XmlReader reader, List`1& schemas);
    private void ParseSchemaRef(XmlReader reader, List`1& schemas);
    public void ParseDocumentCoreProperties(XmlReader reader);
    public void ParseExtendedProperties(XmlReader reader);
    public void ParseCustomProperties(XmlReader reader);
    public void ParseCustomProperty(XmlReader reader, CustomDocumentProperties customProperties);
    internal bool ParseExternalLink(XmlReader reader, RelationCollection relations);
    private void ParseDDELink(XmlReader reader, RelationCollection relaions);
    private void ParseOleObjectLink(XmlReader reader, RelationCollection relations);
    private void ParseExternalWorkbook(XmlReader reader, RelationCollection relations);
    private ExternWorkbookImpl UpdateDefaultSheet(ExternWorkbookImpl externBook, RelationCollection relations, string strUrlId);
    private void ParseExternalDefinedNames(XmlReader reader, ExternWorkbookImpl externBook);
    private void ParseExternalName(XmlReader reader, ExternWorkbookImpl externBook);
    private void ParseSheetDataSet(XmlReader reader, ExternWorkbookImpl externBook);
    private void ParseExternalSheetData(XmlReader reader, ExternWorkbookImpl externBook);
    private ExternWorkbookImpl CreateExternBook(RelationCollection relations, string strUrlId, List`1<string> arrSheetNames);
    private List`1<string> ParseSheetNames(XmlReader reader);
    private void ParseHorizontalPagebreaks(XmlReader reader, WorksheetImpl sheet);
    private void ParseVerticalPagebreaks(XmlReader reader, WorksheetImpl sheet);
    private void ParseExternalLinksWorkbookPart(XmlReader reader);
    private void ParseExternalLinkWorkbookPart(XmlReader reader);
    public void ParseConnections(XmlReader reader);
    public void ParseConnection(XmlReader reader);
    private void ParseParameters(XmlReader reader, IParameters parameters);
    private void ParseParameter(XmlReader reader, IParameters parameters);
    private List`1<Dictionary`2<string, string>> ParseCustomWorkbookViews(XmlReader reader);
    private void ParseDynamicFilter(XmlReader reader, AutoFilterImpl autoFilter);
    public void ParseDataBaseProperty(XmlReader reader, DataBaseProperty DataBase);
    public void ParseWebProperties(XmlReader reader, ExternalConnection Connection);
    private string checkconnection(string connection);
    public void Dispose();
    private void SetCellRecord(CellType type, string strValue, CellRecordCollection cells, int iRow, int iColumn, int iXFIndex, bool isExternParsing);
    private void SetFormulaValue(IInternalWorksheet sheet, CellType cellType, string strValue, int iRowIndex, int iColumnIndex);
    private void SetArrayFormula(WorksheetImpl sheet, string strFormulaString, string strCellsRange, int iXFIndex);
    internal void SetSharedFormula(WorksheetImpl sheet, string strFormulaString, string strCellsRange, UInt32 uiSharedGroupIndex, int iRow, int iCol, int iXFIndex, bool bCalculateOnOpen);
    private ExcelDataType ConvertDataValidationType(string dataValidationType);
    private ExcelErrorStyle ConvertDataValidationErrorStyle(string strErrorStyle);
    private ExcelDataValidationComparisonOperator ConvertDataValidationOperator(string strOperator);
    private TAddr[] GetRangesForDataValidation(string strRange);
    private TAddr GetRangeForDVOrAF(string strRange);
    private ExcelFilterCondition ConvertAutoFormatFilterCondition(string strCondition);
    private ExcelCFType ConvertCFType(string strType, Boolean& bIsSupportedType);
    private ExcelComparisonOperator ConvertCFOperator(string strOperator, Boolean& bIsSupportedOperator);
    private CFTimePeriods ConvertCFTimePeriods(string timePeriod, Boolean& bIsSupportedTimePeriod);
    private string GetReaderElementValue(XmlReader reader);
    internal Color ConvertColorByShade(Color result, double shade);
    internal Color ConvertColorByShadeBlip(Color result, double shade);
    private string ConvertToASCII(string value);
    private void ParseExtention(XmlReader reader, ConditionalFormatImpl conditionalFormat);
    private void ParseExtCFRules(XmlReader reader, ConditionalFormats conditionalFormats);
    private ConditionalFormatImpl CheckCFId(string id, WorksheetImpl sheet, ConditionalFormats ConditionalFormat);
    private void ParseExtnDataBar(XmlReader reader, DataBarImpl dataBar, IWorkbook book);
    private void ParseCustomCFIcons(XmlReader reader, IIconConditionValue iconSet);
    public static void CopyFillSettings(FillImpl fill, ExtendedFormatImpl extendedFormat);
    internal Dictionary`2<string, Color> ParseThemeOverideColors(ChartImpl chart);
    internal void ParseXmlMaps(XmlReader reader);
    private string GetDirectoryName(string itemPath);
}
public class Syncfusion.XlsIO.Implementation.XmlReaders.MSXmlReader : CommonObject {
    private static string DEF_VERSION_STRING;
    private static string DEF_XML_STRING;
    private static string DEF_APPLICATION_STRING;
    private static string DEF_APPLICATION_STRING_SINGLE;
    private static string DEF_APPLICATION_NAME_STRING;
    private static string DEF_O_NAMESPACE;
    private static string DEF_X_NAMESPACE;
    private static string DEF_SS_NAMESPACE;
    private static string DEF_HTML_NAMESPACE;
    private static string DEF_SUBSCRIPT;
    private static string DEF_SUPERSCRIPT;
    private static string DEF_RTF_BOLD;
    private static string DEF_RTF_ITALIC;
    private static string DEF_RTF_UNDERLINE;
    private static string DEF_RTF_STRIKETHROUGH;
    private static string DEF_RTF_SPAN;
    private static string DEF_RTF_SUB;
    private static string DEF_RTF_SUP;
    private static string DEF_RTF_FONT;
    private static int DEF_SIZE_FONT;
    private static string DEF_NONE;
    private static string DefaultFontName;
    private static string VersionAttribute;
    private static string DefaultVersion;
    private Dictionary`2<string, int> m_hashStyle;
    private WorkbookImpl m_parentBook;
    private List`1<string> m_arrNames;
    private Dictionary`2<long, FormulaData> m_hashFormula;
    private FormulaUtil m_formulaUtil;
    private static Dictionary`2<string, ExcelHAlign> m_hashHorizontalAll;
    private static Dictionary`2<string, ExcelVAlign> m_hashVerticalAll;
    private static Dictionary`2<string, string> m_hashNumberFormat;
    private static MSXmlReader();
    public MSXmlReader(IApplication application, object parent);
    private void ReadWorksheet(XmlReader reader, WorkbookImpl book);
    private void ReadTable(XmlReader reader, WorksheetImpl sheet);
    private int ReadRow(XmlReader reader, WorksheetImpl sheet, int iRowIndex);
    private int ReadColumn(XmlReader reader, WorksheetImpl sheet, int iColumnIndex);
    private int ReadCell(XmlReader reader, WorksheetImpl sheet, int iRowIndex, int iIndex);
    private void ParseHyperlink(XmlReader reader, WorksheetImpl sheet, int row, int column);
    private string ReadData(XmlReader reader, CellRecordCollection cells, int iXFIndex, XmlSerializationCellType& type, TextWithFormat& rtf, UInt16& xfIndex);
    private int ReadMerge(XmlReader reader, WorksheetImpl sheet, int iRow, int iCol, int iXFIndex);
    private void ReadStyles(XmlReader reader, WorkbookImpl book);
    private void ReadStyle(XmlReader reader, WorkbookImpl book);
    private void ReadAlignment(XmlReader reader, ExtendedFormatImpl format);
    private void ReadFont(XmlReader reader, ExtendedFormatImpl format, string strIndex);
    private void ReadInterior(XmlReader reader, ExtendedFormatImpl format);
    private void ReadNumberFormat(XmlReader reader, ExtendedFormatImpl format);
    private void ReadProtection(XmlReader reader, ExtendedFormatImpl format);
    private void ReadBorders(XmlReader reader, ExtendedFormatImpl format);
    private void ReadBorder(XmlReader reader, ExtendedFormatImpl format);
    private void ReadWorksheetOptions(XmlReader reader, WorksheetImpl sheet);
    private void ReadDataValidation(XmlReader reader, WorksheetImpl sheet);
    private void ParseDataValidations(XmlReader reader, DataValidationCollection dvCollection, WorksheetImpl sheet);
    private ExcelDataType ConvertDataValidationType(string dataValidationType);
    private ExcelErrorStyle ConvertDataValidationErrorStyle(string strErrorStyle);
    private TAddr[] GetRangesForDataValidation(string strRange, WorksheetImpl sheet);
    private TAddr GetRangeForDVOrAF(string strRange, WorksheetImpl sheet);
    private static TAddr[] ConvertToSelectionTAddr(TAddr[] tAddrArray);
    private void ReadConditionalFormats(XmlReader reader, WorksheetImpl sheet);
    private bool ParseConditionalFormatting(XmlReader reader, ConditionalFormats conditionalFormats, WorksheetImpl sheet);
    private void ParseConditionalFormat(XmlReader reader, ConditionalFormats formats);
    private void ParseCondition(XmlReader reader, ConditionalFormatImpl conditionalFormat);
    private void ParseConditionalFormatString(string formattingValues, ConditionalFormatImpl conditionalFormat);
    private String[] GetBorderSetting(string borderSetting);
    private ExcelLineStyle GetBroderLineStyle(String[] style);
    private ExcelComparisonOperator ConvertCFOperator(string strOperator);
    private void ParseVisibility(XmlReader reader, WorksheetImpl sheet);
    private void ReadPageSetup(XmlReader reader, WorksheetImpl sheet);
    private void ReadHeaderFooter(XmlReader reader, WorksheetImpl sheet);
    private void ReadLayout(XmlReader reader, WorksheetImpl sheet);
    private void ReadPageMargins(XmlReader reader, WorksheetImpl sheet);
    private void ReadPanes(XmlReader reader, WorksheetImpl sheet);
    private void ReadSelectionPane(XmlReader reader, WorksheetImpl sheet);
    private void ReadPrint(XmlReader reader, WorksheetImpl sheet);
    private void ReadNames(XmlReader reader, INames namesColl, int iSheetIndex);
    private void ReadName(XmlReader reader, INames namesColl, int sheetIndex);
    private void ReadComment(XmlReader reader, CommentShapeImpl comment, int iStyleIndex, UInt16& xfIndex);
    private void ReadCommentData(XmlReader reader, int iXFIndex, TextWithFormat rtf, UInt16& xfIndex);
    public void FillWorkbook(XmlReader reader, WorkbookImpl book);
    private void ReadWorkbook(XmlReader reader, WorkbookImpl book);
    private ExtendedFormatImpl GetExtendedFormat(ExtendedFormatsCollection coll, string strIndex, string strName, string strParent);
    private void AddXFToCollection(WorkbookImpl book, ExtendedFormatsCollection coll, ExtendedFormatImpl format, string strID, string strName);
    private Color GetColor(string strColor);
    private IFont SetFontAllign(IFont font, string strAlling);
    private void SetCellRecord(XmlSerializationCellType type, string strValue, CellRecordCollection cells, int iRow, int iColumn, int iXFIndex, TextWithFormat rtf);
    private int GetXFIndex(WorksheetImpl sheet, string strValue);
    private ExcelLineStyle GetLineStyle(string style, string weight);
    private void ReparseNames(WorkbookImpl book);
    private string ReadRTF(XmlReader reader, int iXFIndex, TextWithFormat rtf, UInt16& xfIndex, bool isCommentRTF);
    private FontImpl UpdateFont(XmlReader reader, FontImpl fontImpl, string strNodeName, bool bEndElement, Boolean& isUpdated);
    private FontImpl ReadRTFFont(XmlReader reader, FontImpl font, Boolean& isUpdated);
    private void ParseFormula(WorksheetImpl sheet, int iRowIndex, int iCol, string strFormula, int iXFIndex, string cellValue, XmlSerializationCellType cellType);
    private void SetFormula(WorksheetImpl sheet, int row, int column, string strFormula, string cellValue, XmlSerializationCellType cellType, int iXFIndex);
    private void SetFormulaValue(WorksheetImpl sheet, int row, int column, string cellValue, XmlSerializationCellType cellType);
    private void ReparseFormula(WorkbookImpl book);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.PivotTables.PivotCacheParser : object {
    private static RegexOptions DEF_REGEX;
    public static void ParsePivotCacheDefinition(XmlReader reader, PivotCacheImpl cache, IWorkbook book, string path, RelationCollection relations, String& cacheRecordRelationID);
    private static XmlReader CreateCacheRecordReader(string relationID, string path, WorkbookImpl book, RelationCollection relations, String& itemName);
    private static void ParseCacheSource(XmlReader reader, PivotCacheImpl cache, IWorkbook book, RelationCollection relations);
    private static void ParseConsolidation(XmlReader reader, PivotCacheImpl cache, IWorkbook book, RelationCollection relations);
    private static void ParseWorksheetSource(XmlReader reader, PivotCacheImpl cache, IWorkbook book, RelationCollection relations);
    private static IName GetTableNamedRange(string tableNamedRange, IListObject listObject, WorkbookImpl book);
    private static void ParseExternalSource(XmlReader reader, PivotCacheImpl cache, IWorkbook book, RelationCollection relations);
    private static void ParseCacheFields(XmlReader reader, PivotCacheImpl cache, WorkbookImpl bookImpl);
    private static void ParseCacheField(XmlReader reader, PivotCacheFieldImpl field, PivotCacheImpl cache, WorkbookImpl bookImpl);
    private static void ParseSharedItems(XmlReader reader, PivotCacheFieldImpl field);
    public static void ParseFieldGroup(XmlReader reader, PivotCacheFieldImpl field, PivotCacheImpl cache);
    public static Int32[] ParseDiscretePropeties(XmlReader reader, PivotCacheFieldImpl field);
    public static String[] ParseGroupItems(XmlReader reader, PivotCacheFieldImpl field);
    public static void ParseRangeProperties(XmlReader reader, PivotCacheFieldImpl field);
    public static void ParsePivotCacheRecords(XmlReader reader, PivotCacheImpl cache);
    public static void ParseCacheRecordRows(XmlReader reader, PivotCacheImpl cache, int rowCount);
    public static Byte[] ParseCacheRecordRow(XmlReader reader, PivotCacheImpl cache, int currentRow, int iFieldsCount);
    private static void ParseCalculatedItems(XmlReader reader, PivotCacheFieldsCollection cacheFields);
    internal static void ParsePivotArea(XmlReader reader, PivotArea area);
    private static void ParsePivotAreaRefereces(XmlReader reader, PivotArea pivotArea);
    private static List`1<List`1<InternalReference>> GetInternalReferences(InternalReference parent, int refCount);
    private static List`1<InternalReference> GetInternalReferences(InternalReference parent);
    private static void ParsePivotAreaReference(XmlReader reader, PivotAreaReference reference);
    private static void ParseCacheExtension(XmlReader reader, PivotCacheImpl cache);
    private static void ParseCacheHierarchies(XmlReader reader, PivotCacheImpl cache);
    private static void ParseOLAPKPIs(XmlReader reader, PivotCacheImpl cache);
    private static void ParseOLAPDimensions(XmlReader reader, PivotCacheImpl cache);
    private static void ParseOLAPMeasureGroups(XmlReader reader, PivotCacheImpl cache);
    private static void ParseOLAPMaps(XmlReader reader, PivotCacheImpl cache);
    internal static ExcelDataSourceType GetSourceType(string strSourceType);
    private static int ParseIntAttribute(XmlReader reader, string attributeName);
    private static int ParseIntAttribute(XmlReader reader, string attributeName, int defaultValue);
    private static bool ParseBoolAttribute(XmlReader reader, string attributeName);
    private static bool ParseBoolAttribute(XmlReader reader, string attributeName, bool defaultValue);
    private static string ParseStringAttribute(XmlReader reader, string attributeName);
    private static string GetFieldName(string formula);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.PivotTables.PivotTableParser : object {
    private static int DataFieldsIndex;
    public static void ParsePivotTable(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseTableDefinitionExtensionList(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseTableDefinitionExtension(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseChartFormats(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseCustomPivotFormats(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseCustomPivotFormatsFromExcel2007(XmlReader reader, PivotTableImpl pivotTable, FileDataHolder dataHolder);
    private static void ParseCustomFormats(XmlReader reader, PivotTableImpl pivotTable, List`1<DxfImpl> lstDxfs);
    private static void ParseCustomFormat(XmlReader reader, PivotFormat pivotFormat, Int32& iDxfIndex);
    private static void ParseFilters(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseFilter(XmlReader reader, PivotTableFilter pivotFilter, PivotValueLableFilter valueFilter);
    private static void ParseAutoFilter(XmlReader reader, PivotAutoFilter autoFilter, PivotValueLableFilter valueFilter);
    private static void ParseFilterColumn(XmlReader reader, PivotFilterColumn filterColumn, PivotValueLableFilter valueFilter);
    private static void ParseCustomFilters(XmlReader reader, PivotCustomFilters customFilters, PivotValueLableFilter valueFilter);
    private static void ParseCustomFilter(XmlReader reader, PivotCustomFilter customFilter, PivotValueLableFilter valueFilter);
    private static void ParseFilterColumnFilters(XmlReader reader, FilterColumnFilters columnFilters, PivotValueLableFilter valueFilter);
    private static void ParseTop10Filter(XmlReader reader, PivotTop10Filter top10Filter, PivotValueLableFilter valueFilter);
    private static void ParseDynamicFilter(XmlReader reader, PivotDynamicFilter dynamicFilter, PivotValueLableFilter valueFilter);
    private static void ParseLocation(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParsePivotFields(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParsePivotField(XmlReader reader, PivotFieldImpl pivotField, PivotTableImpl pivotTable);
    private static void ParsePivotFieldExtensionList(XmlReader reader, PivotFieldImpl pivotField);
    private static void ParsePivotFieldExtension(XmlReader reader, PivotFieldImpl pivotField);
    private static void ParsePivotFieldExtensionAttributes(XmlReader reader, PivotFieldImpl pivotField);
    private static bool ParseAutoSortScope(XmlReader reader, PivotFieldImpl pivotField);
    private static bool ParseFieldItems(XmlReader reader, PivotFieldImpl field);
    private static void ParseFieldItem(XmlReader reader, PivotFieldImpl field);
    public static PivotSubtotalTypes ParseSubtotalFlags(XmlReader reader);
    private static void ParseRowFields(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseRowItems(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseColumnFields(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseColumnItems(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParsePageFields(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParsePageField(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseDataFields(XmlReader reader, PivotTableImpl pivotTable);
    private static PivotDataField ParseDataField(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseExtensionListCollection(XmlReader reader, PivotDataField dataField);
    private static void ParseExtensionList(XmlReader reader, PivotDataField dataField);
    private static void ParseConditionalFormats(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParsePivotHierarchies(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParsePivotStyle(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseRowHierarchies(XmlReader reader, PivotTableImpl pivotTable);
    private static void ParseColumnHierarchies(XmlReader reader, PivotTableImpl pivotTable);
    public static PivotSubtotalTypes GetSubTotalTypes(PivotSubtotalTypes subtotalTypes, string isEnabled);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.CheckBoxShapeParser : VmlTextBoxBaseParser {
    public virtual ShapeImpl ParseShapeType(XmlReader reader, ShapeCollectionBase shapes);
    protected virtual void ParseUnknownClientDataTag(XmlReader reader, TextBoxShapeBase textBox);
    protected virtual void RegisterShape(TextBoxShapeBase textBox);
    internal virtual ShapeImpl CreateShape(ShapeCollectionBase shapes);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.ComboBoxShapeParser : ShapeParser {
    private static string REF_ERROR;
    public virtual ShapeImpl ParseShapeType(XmlReader reader, ShapeCollectionBase shapes);
    public virtual bool ParseShape(XmlReader reader, ShapeImpl defaultShape, RelationCollection relations, string parentItemPath);
    private void ParseStyle(string strStyle, ShapeImpl shape);
    private double GetValue(Dictionary`2<string, string> dictStyles, string tagName);
    private bool ParseClientData(XmlReader reader, ComboBoxShapeImpl comboBox);
    protected virtual void RegisterShape(ComboBoxShapeImpl comboBox);
    internal virtual ShapeImpl CreateShape(ShapeCollectionBase shapes);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.CommentShapeParser : VmlTextBoxBaseParser {
    public virtual ShapeImpl ParseShapeType(XmlReader reader, ShapeCollectionBase shapes);
    protected virtual void ParseUnknownClientDataTag(XmlReader reader, TextBoxShapeBase textBox);
    protected virtual void ParseStyle(TextBoxShapeBase textBox, Dictionary`2<string, string> styleProperties);
    private void ParseVisibility(CommentShapeImpl comment, Dictionary`2<string, string> dictProperties);
    private void ParseAutoSize(CommentShapeImpl comment, Dictionary`2<string, string> dictProperties);
    protected virtual void RegisterShape(TextBoxShapeBase textBox);
    internal virtual ShapeImpl CreateShape(ShapeCollectionBase shapes);
}
public class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.HFImageParser : ShapeParser {
    internal static int MaxCropValue;
    private Regex m_cropPattern;
    public virtual ShapeImpl ParseShapeType(XmlReader reader, ShapeCollectionBase shapes);
    public virtual bool ParseShape(XmlReader reader, ShapeImpl defaultShape, RelationCollection relations, string parentItemPath);
    private void ParseStyle(XmlReader reader, BitmapShapeImpl result);
    protected virtual void ParseStyle(BitmapShapeImpl result, Dictionary`2<string, string> styleProperties);
    private int ParseShapeId(string shapeId);
    private void ParseClientData(XmlReader reader, BitmapShapeImpl shape);
    private void ParseImageData(XmlReader reader, string shapeName, BitmapShapeImpl shape, RelationCollection relations, string parentItemPath);
    internal virtual ShapeImpl CreateShape(ShapeCollectionBase shapes);
    private int GetCropValue(string value);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.OptionButtonShapeParser : VmlTextBoxBaseParser {
    public virtual ShapeImpl ParseShapeType(XmlReader reader, ShapeCollectionBase shapes);
    protected virtual void ParseUnknownClientDataTag(XmlReader reader, TextBoxShapeBase textBox);
    protected virtual void RegisterShape(TextBoxShapeBase textBox);
    internal virtual ShapeImpl CreateShape(ShapeCollectionBase shapes);
}
public abstract class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.ShapeParser : object {
    public abstract virtual ShapeImpl ParseShapeType(XmlReader reader, ShapeCollectionBase shapes);
    public abstract virtual bool ParseShape(XmlReader reader, ShapeImpl defaultShape, RelationCollection relations, string parentItemPath);
    public static Stream ReadNodeAsStream(XmlReader reader);
    public static Stream ReadNodeAsStream(XmlReader reader, bool writeNamespaces);
    public static void WriteNodeFromStream(XmlWriter writer, Stream stream);
    public static void WriteNodeFromStream(XmlWriter writer, Stream stream, bool writeNamespaces);
    protected void ParseAnchor(XmlReader reader, ShapeImpl shape);
    protected Dictionary`2<string, string> SplitStyle(string styleValue);
    internal abstract virtual ShapeImpl CreateShape(ShapeCollectionBase shapes);
    internal static bool ParsePath2D(XmlReader reader, List`1<Path2D> pathList);
    private static bool Parse2DElements(XmlReader reader, Path2D path);
    private static bool ParsePath2DPoint(XmlReader reader, List`1<double> pathElements);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.TextBoxShapeParser : object {
    public static void ParseTextBox(ITextBox textBox, XmlReader reader, Excel2007Parser parser);
    internal static void ParseTextBox(ITextBox textBox, XmlReader reader, Excel2007Parser parser, List`1<string> lstRelationIds);
    private static void ParseNonVisualShapeProperties(IShape shape, XmlReader reader, Excel2007Parser parser);
    private static void ParseShapeProperties(ITextBox textBox, XmlReader reader, Excel2007Parser parser, List`1<string> lstRelationIds);
    private static Rectangle ParseForm(XmlReader reader);
    private static void ParseRichText(XmlReader reader, Excel2007Parser parser, ITextBox textBox);
    private static void ParseBodyProperties(XmlReader reader, RichTextString textArea, ITextBox textBox);
    private static void ParseTextRotation(string rotationValue, ITextBox textBox);
    private static void ParseAnchor(string anchorValue, ITextBox textBox);
    internal static void ParseListStyles(XmlReader reader, RichTextString textArea);
    private static void ParseLevelProperties(XmlReader reader, RichTextString textArea);
    private static void ParseDefaultRunProperties(XmlReader reader, LevelProperties levelProperties);
    private static void ParseParagraphs(XmlReader reader, ITextBox textBox, Excel2007Parser parser);
    internal static void ParseTextField(XmlReader reader, ITextBox textBox, RichTextString textArea, Excel2007Parser parser);
    internal static void ParseParagraphEnd(XmlReader reader, RichTextString textArea, Excel2007Parser parser);
    private static void ParseParagraphProperites(XmlReader reader, RichTextString textString, ITextBox textBox, BulletImpl& bullet);
    internal static void ParseBulletFont(XmlReader reader, BulletImpl bullet);
    internal static void ParseParagraphRun(XmlReader reader, RichTextString textArea, Excel2007Parser parser, ITextBox textBox, BulletImpl bullet);
    private static FontImpl ParseParagraphRunProperites(XmlReader reader, RichTextString textArea, Excel2007Parser parser);
    internal static void ParseLineProperties(XmlReader reader, ShapeLineFormatImpl border, bool bRoundCorners, Excel2007Parser parser);
    internal static void ParseLineProperties(XmlReader reader, ShapeLineFormatImpl border, Excel2007Parser parser);
    private static void ParseArrowSettings(XmlReader reader, ShapeLineFormatImpl border, bool isHead);
    private static ExcelShapeArrowWidth GetHeadWidth(string value);
    private static ExcelShapeArrowStyle GetHeadStyle(string value);
    private static ExcelShapeArrowLength GetHeadLength(string value);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.UnknownVmlShapeParser : ShapeParser {
    public virtual ShapeImpl ParseShapeType(XmlReader reader, ShapeCollectionBase shapes);
    public virtual bool ParseShape(XmlReader reader, ShapeImpl defaultShape, RelationCollection relations, string parentItemPath);
    private void AddNewSerializator(int shapeInstance, XmlReader reader, ShapeCollectionBase shapes);
    internal virtual ShapeImpl CreateShape(ShapeCollectionBase shapes);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.VmlFormControlParser : ShapeParser {
    private Dictionary`2<string, Stream> m_dictShapeTypes;
    private static Dictionary`2<string, ShapeParser> m_dictShapeParser;
    private static VmlFormControlParser();
    public virtual ShapeImpl ParseShapeType(XmlReader reader, ShapeCollectionBase shapes);
    public virtual bool ParseShape(XmlReader reader, ShapeImpl defaultShape, RelationCollection relations, string parentItemPath);
    internal virtual ShapeImpl CreateShape(ShapeCollectionBase shapes);
}
internal abstract class Syncfusion.XlsIO.Implementation.XmlReaders.Shapes.VmlTextBoxBaseParser : ShapeParser {
    internal static int GradientHorizontal;
    internal static int GradientVertical;
    internal static int GradientDiagonalUp;
    internal static int GradientDiagonalDownCornerCenter;
    private static byte IndexedColor;
    private static byte NamedColor;
    private static byte HexColor;
    internal static int GradientVariant_1;
    internal static int GradientVariant_3;
    internal static int GradientVariant_4;
    internal static string PatternPrefix;
    private static string LineStylePrefix;
    private static string ResourcePatternPrefix;
    private static string DefaultFillStyle;
    public static Dictionary`2<string, ExcelShapeLineStyle> m_excelShapeLineStyle;
    public static Dictionary`2<string, ExcelShapeDashLineStyle> m_excelDashLineStyle;
    private bool m_isGradientShadingRadial;
    private bool IsGradientShadingRadial { get; private set; }
    public static void InitShapeLineStyle();
    public static void InitDashLineStyle();
    private bool get_IsGradientShadingRadial();
    private void set_IsGradientShadingRadial(bool value);
    public virtual bool ParseShape(XmlReader reader, ShapeImpl defaultShape, RelationCollection relations, string parentItemPath);
    public static void ParseShapeId(XmlReader reader, ShapeImpl shape);
    private void ParseTextBox(XmlReader reader, TextBoxShapeBase textBox);
    private void ParseDiv(XmlReader reader, TextBoxShapeBase textBox);
    private void ParseFormattingRun(XmlReader reader, TextBoxShapeBase textBox);
    private string ParseSpanTag(XmlReader reader, TextBoxShapeBase textBox);
    private bool CheckFontElement(XmlReader fontReader);
    protected virtual void RegisterShape(TextBoxShapeBase textBox);
    private bool ParseClientData(XmlReader reader, TextBoxShapeBase textBox, String& shapeType, Boolean& hasRowColumn);
    protected virtual void ParseUnknownClientDataTag(XmlReader reader, TextBoxShapeBase textBox);
    public static bool ParseBoolOrEmpty(XmlReader reader, bool defaultValue);
    private void ParseFillStyle(XmlReader reader, TextBoxShapeBase textBox, RelationCollection relations, string parentItemPath);
    private void ParseSolidFill(XmlReader reader, TextBoxShapeBase textBox);
    private void ParseGradientFill(XmlReader reader, TextBoxShapeBase textBox);
    private void ParseTextureFill(XmlReader reader, TextBoxShapeBase textBox, RelationCollection relations);
    private void ParsePatternFill(XmlReader reader, TextBoxShapeBase textBox, RelationCollection relations);
    private void ParsePictureFill(XmlReader reader, TextBoxShapeBase textBox, RelationCollection relations);
    private void ParseGradientCommon(XmlReader reader, TextBoxShapeBase textBox);
    private void ParseLine(XmlReader reader, TextBoxShapeBase textBox, RelationCollection relations, string parentItemPath);
    private void ParsePatternLine(XmlReader reader, TextBoxShapeBase textBox, RelationCollection relations, string parentItemPath);
    private void ParseStyle(XmlReader reader, TextBoxShapeBase textBox);
    protected virtual void ParseStyle(TextBoxShapeBase textBox, Dictionary`2<string, string> styleProperties);
    private void ParseTextDirection(TextBoxShapeBase textBox, Dictionary`2<string, string> dictProperties);
    private ExcelFillType GetExcelFillType(string excelFillType);
    private byte GetColorType(string color);
    private ColorObject ExtractColor(string color);
    private bool IsHexString(string color);
    private double ExtractOpacity(string opacity);
    private string RemoveCharUnSafeAt(string source, bool isLast);
    private ExcelGradientColor ExtractGradientColorType(XmlReader reader, String& color);
    private double ExtractDegree(string degree);
    private ExcelGradientPreset ExtractPreset(string preset);
    private ExcelPattern ExtractLinePattern(long length);
    private ExcelGradientVariants ExtractShadingVariant(string focus);
    private ExcelTexture ExtractTexture(string title);
    private ExcelGradientPattern ExtractPattern(string title);
    private ExcelShapeDashLineStyle ExtractDashStyle(string dashStyle);
    private ExcelShapeLineStyle ExtractLineStyle(string lineStyle);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.SlicerParser : object {
    internal void Parse(XmlReader reader, IWorksheet sheet, Stream slicerStream);
}
internal class Syncfusion.XlsIO.Implementation.XmlReaders.TableParser : object {
    public IListObject Parse(XmlReader reader, IWorksheet sheet);
    private void ParseExtensionList(XmlReader reader, IListObject table);
    private void ParseExtension(XmlReader reader, IListObject table);
    private void ParseAutoFilter(XmlReader reader, IListObject table);
    private void ParseStyle(XmlReader reader, IListObject table);
    private void ParseColumns(XmlReader reader, IList`1<IListObjectColumn> columns);
    private void ParseColumn(XmlReader reader, IList`1<IListObjectColumn> columns, int columnIndex);
    internal void ParseXmlColumnProperties(XmlReader reader, ListObjectColumn column);
    public void ParseQueryTable(XmlReader reader, IListObject Table);
    public QueryTableField ParseQueryTableField(XmlReader reader, IListObjectColumn TableColumn, QueryTableImpl queryTable);
    private ExternalConnection FindConnection(ExternalConnectionCollection Connections, int QuertTableId);
}
public class Syncfusion.XlsIO.Implementation.XmlReaders.TextSettings : object {
    public string FontName;
    public string Underline;
    public Nullable`1<float> FontSize;
    public Nullable`1<bool> Bold;
    public Nullable`1<bool> Italic;
    public Nullable`1<bool> Striked;
    public string Language;
    public Nullable`1<Color> FontColor;
    public int Baseline;
    public Nullable`1<bool> HasLatin;
    public Nullable`1<bool> HasComplexScripts;
    public Nullable`1<bool> HasEastAsianFont;
    public string ActualFontName;
    internal Nullable`1<bool> ShowSizeProperties;
    internal Nullable`1<bool> ShowBoldProperties;
    internal float KerningValue;
    internal int SpacingValue;
    internal bool IsNormalizeHeights;
    internal TextCapsType CapitalizationType;
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.AddSlashPreprocessor : object {
    public sealed virtual string PreprocessName(string fullName);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.AF : object {
    public static string AutoFilterSettingsTagName;
    public static string CellOrRangeReferenceAttributeName;
    public static string AutoFilterColumnTagName;
    public static string FilterColumnDataAttributeName;
    internal static string IconFilterTagName;
    internal static string ColorFilterTagName;
    internal static string CellColorAttributeName;
    public static string AutoFilterTopTenTagName;
    public static string TopOrBottomValueAttributeName;
    public static string TopAttributeAttributeName;
    public static string FilterValAttributeName;
    public static string FilterByPercentAttributeName;
    public static string FilterCriteriaTagName;
    public static string FilterBlankAttributeName;
    public static string FilterTagName;
    public static string FilterValueAttributeName;
    public static string CustomFiltersCriteriaTagName;
    public static string AndCriteriaAttributeName;
    public static string CustomFilterCriteriaTagName;
    public static string FilterComparisonOperatorAttributeName;
    internal static string ShowButtonAttributeName;
    internal static string HiddenButtonAttributeName;
    internal static string DateGroupItemTagName;
    internal static string DateTimeGroupingAttributeName;
    internal static string YearAttributeName;
    internal static string MonthAttributeName;
    internal static string DayAttributeName;
    internal static string HourAttributeName;
    internal static string MinuteAttributeName;
    internal static string SecondAttributeName;
    internal static string DynamicFilterTagName;
    internal static string DynamicFilterTypeAttributeName;
    public static string OperatorEqual;
    public static string OperatorGreaterThan;
    public static string OperatorGreaterThanOrEqual;
    public static string OperatorLessThan;
    public static string OperatorLessThanOrEqual;
    public static string OperatorNotEqual;
    internal static DynamicFilterType ConvertToDateFilterType(string filterType);
    internal static string ConvertDateFilterTypeToString(DynamicFilterType filterType);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.BorderSettingsHolder : object {
    private ColorObject m_color;
    private ExcelLineStyle m_lineStyle;
    private bool m_bShowDiagonalLine;
    private bool m_bIsEmptyBorder;
    public ExcelKnownColors Color { get; public set; }
    public ColorObject ColorObject { get; }
    public Color ColorRGB { get; public set; }
    public ExcelLineStyle LineStyle { get; public set; }
    public bool ShowDiagonalLine { get; public set; }
    internal bool IsEmptyBorder { get; internal set; }
    public IApplication Application { get; }
    public object Parent { get; }
    public sealed virtual ExcelKnownColors get_Color();
    public sealed virtual void set_Color(ExcelKnownColors value);
    public sealed virtual ColorObject get_ColorObject();
    public sealed virtual Color get_ColorRGB();
    public sealed virtual void set_ColorRGB(Color value);
    public sealed virtual ExcelLineStyle get_LineStyle();
    public sealed virtual void set_LineStyle(ExcelLineStyle value);
    public sealed virtual bool get_ShowDiagonalLine();
    public sealed virtual void set_ShowDiagonalLine(bool value);
    internal bool get_IsEmptyBorder();
    internal void set_IsEmptyBorder(bool value);
    public sealed virtual IApplication get_Application();
    public sealed virtual object get_Parent();
    public sealed virtual object Clone();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.CF : object {
    public static string ConditionalFormattingsTagName;
    public static string ConditionalFormattingTagName;
    public static string RuleTagName;
    public static string EndsWith;
    public static string BeginsWith;
    public static string ContainsText;
    public static string NotContainsText;
    public static string TypeContainsError;
    public static string TypeNotContainsError;
    public static string TextAttributeName;
    public static string TypeAttributeName;
    public static string TimePeriodTypeName;
    public static string TimePeriodAttributeName;
    public static string DifferentialFormattingIdAttributeName;
    public static string OperatorAttributeName;
    public static string BorderColorTagName;
    public static string NegativeFillColorTagName;
    public static string NegativeBorderColorTagName;
    public static string AxisColorTagName;
    public static string BorderAttributeName;
    public static string GradientAttributeName;
    public static string DirectionAttributeName;
    public static string NegativeBarColorSameAsPositiveAttributeName;
    public static string NegativeBarBorderColorSameAsPositiveAttributeName;
    public static string AxisPositionAttributeName;
    public static string ExtentionList;
    public static string Extenstion;
    internal static string Percent;
    internal static string Bottom;
    internal static string Rank;
    internal static string EqualAverage;
    internal static string StandardDeviation;
    public static string TimePeriodToday;
    public static string TimePeriodYesterday;
    public static string TimePeriodTomorrow;
    public static string TimePeriodLastsevenDays;
    public static string TimePeriodLastWeek;
    public static string TimePeriodThisWeek;
    public static string TimePeriodNextWeek;
    public static string TimePeriodLastMonth;
    public static string TimePeriodThisMonth;
    public static string TimePeriodNextMonth;
    public static string OperatorBeginsWith;
    public static string OperatorBetween;
    public static string OperatorContains;
    public static string OperatorEndsWith;
    public static string OperatorEqual;
    public static string OperatorGreaterThan;
    public static string OperatorGreaterThanOrEqual;
    public static string OperatorLessThan;
    public static string OperatorLessThanOrEqual;
    public static string OperatorNotBetween;
    public static string OperatorDoesNotContain;
    public static string OperatorNotEqual;
    public static string StopIfTrueAttributeName;
    public static string PriorityAttributeName;
    public static string FormulaTagName;
    public static string TypeCellIs;
    public static string TypeExpression;
    public static string TypeDataBar;
    public static string Pivot;
    public static string TypeIconSet;
    public static string TypeColorScale;
    public static string TypeContainsBlank;
    public static string TypeNotContainsBlank;
    public static string DataBarTag;
    public static string ValueObjectTag;
    internal static string ValueObjectFormulaTag;
    internal static string CFRuleID;
    internal static string IconObjectTag;
    public static int DefaultDataBarMinLength;
    public static int DefaultDataBarMaxLength;
    public static string MaxLengthTag;
    public static string MinLengthTag;
    public static string ShowValueAttribute;
    public static string IconSetTag;
    public static string IconSetAttribute;
    internal static string IconIdAttribute;
    internal static string CustomAttribute;
    public static string ColorScaleTag;
    internal static string Unique;
    internal static string Duplicate;
    public static string PercentAttribute;
    public static string ReverseAttribute;
    public static string GreaterAttribute;
    internal static int RightAndLeftFormulaLength;
    public static String[] ValueTypes;
    public static String[] IconSetTypeNames;
    internal static string Top10;
    internal static string AboveAverage;
    private static CF();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartAxisParser : object {
    public static string DefaultFont;
    public static float DefaultFontSize;
    private Dictionary`2<string, ExcelTickLabelPosition> s_dictTickLabelToAttributeValue;
    internal Dictionary`2<string, ExcelTickMark> s_dictTickMarkToAttributeValue;
    private WorkbookImpl m_book;
    internal string m_BarAxisId;
    internal bool m_isBarchart;
    public ChartAxisParser(WorkbookImpl book);
    public void ParseDateAxis(XmlReader reader, ChartCategoryAxisImpl axis, RelationCollection relations, ExcelChartType chartType, Excel2007Parser parser);
    public void ParseCategoryAxis(XmlReader reader, ChartCategoryAxisImpl axis, RelationCollection relations, ExcelChartType chartType, Excel2007Parser parser);
    public void ParseValueAxis(XmlReader reader, ChartValueAxisImpl valueAxis, RelationCollection relations, ExcelChartType chartType, Excel2007Parser parser);
    public void ParseSeriesAxis(XmlReader reader, ChartSeriesAxisImpl seriesAxis, RelationCollection relations, ExcelChartType chartType, Excel2007Parser parser);
    private void ParseAxisCommon(XmlReader reader, ChartAxisImpl axis, RelationCollection chartItemRelations, ExcelChartType chartType, Excel2007Parser parser, AxisTagsParser unknownTagParser, bool isBarChart, string axisId);
    internal void ParseTextSettings(XmlReader reader, ChartAxisImpl axis, Excel2007Parser parser);
    private void ParseAxisParagraphs(XmlReader reader, ChartAxisImpl axis, Excel2007Parser parser);
    private void ParseBodyProperties(XmlReader reader, ChartAxisImpl axis);
    private Excel2007TextRotation ParseTextRotation(XmlReader reader);
    private void ParseCrossesTag(XmlReader reader, ChartAxisImpl axis);
    private void ParseCrossAxis(XmlReader reader, ChartAxisImpl axis);
    private ExcelTickMark ParseTickMark(XmlReader reader);
    private void ParseTickLabel(XmlReader reader, ChartAxisImpl axis);
    internal void ParseNumberFormat(XmlReader reader, ChartAxisImpl axis);
    internal void ParseGridlines(XmlReader reader, IChartGridLine gridLines, FileDataHolder dataHolder, RelationCollection relations);
    private string ParseAxisPosition(XmlReader reader, ChartAxisImpl axis);
    private ChartAxisScale ParseScaling(XmlReader reader);
    private void ParseDisplayUnit(XmlReader reader, ChartValueAxisImpl valueAxis, RelationCollection relations);
    private void ParseBuiltInDisplayUnit(XmlReader reader, ChartValueAxisImpl valueAxis);
    private void CategoryAxisTagParsing(XmlReader reader, ChartAxisImpl axis, RelationCollection relations);
    private void DateAxisTagParsing(XmlReader reader, ChartAxisImpl axis, RelationCollection relations);
    private void ValueAxisTagParsing(XmlReader reader, ChartAxisImpl axis, RelationCollection relations);
    private void SeriesAxisTagParsing(XmlReader reader, ChartAxisImpl axis, RelationCollection relations);
    private ExcelChartBaseUnit GetChartBaseUnitFromString(string baseUnitScale);
    private string PrepareBaseUnitScale(string baseUnitScale);
    private string RemoveCharUnSafeAtLast(string baseUnitScale);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartAxisScale : object {
    public Nullable`1<bool> LogScale;
    public Nullable`1<bool> Reversed;
    public Nullable`1<double> MaximumValue;
    public Nullable`1<double> MinimumValue;
    internal Nullable`1<double> LogBase;
    public void CopyTo(IScalable axis);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartAxisSerializator : object {
    public static int TextRotationMultiplier;
    private static Dictionary`2<ExcelTickLabelPosition, string> s_dictTickLabelToAttributeValue;
    private static Dictionary`2<ExcelTickMark, string> s_dictTickMarkToAttributeValue;
    private static ChartAxisSerializator();
    public void SerializeAxis(XmlWriter writer, IChartAxis axis, RelationCollection relations);
    private void SerializeDateAxis(XmlWriter writer, ChartCategoryAxisImpl axis);
    private string ConvertDateUnitToString(ExcelChartBaseUnit baseUnit);
    private void SerializeCategoryAxis(XmlWriter writer, ChartCategoryAxisImpl axis);
    private void SerializeValueAxis(XmlWriter writer, ChartValueAxisImpl valueAxis, RelationCollection relations);
    private void SerializeSeriesAxis(XmlWriter writer, ChartSeriesAxisImpl seriesAxis);
    private void SerializeAxisCommon(XmlWriter writer, ChartAxisImpl axis);
    public static IChartAxis GetPairAxis(ChartAxisImpl axis);
    private void SerializeCrossAxis(XmlWriter writer, ChartAxisImpl axis);
    private void SerializeTickMark(XmlWriter writer, string tagName, ExcelTickMark tickMark);
    private void SerializeTickLabel(XmlWriter writer, ChartAxisImpl axis);
    private void SerializeNumberFormat(XmlWriter writer, ChartAxisImpl axis);
    private void SerializeGridlines(XmlWriter writer, ChartAxisImpl axis);
    private void SerializeGridlines(XmlWriter writer, IChartGridLine gridLines, string tagName, IWorkbook book);
    private void SerializeAxisPosition(XmlWriter writer, ChartAxisImpl axis);
    private void SerializeScaling(XmlWriter writer, ChartAxisImpl axis);
    private void SerializeDisplayUnit(XmlWriter writer, ChartValueAxisImpl axis, RelationCollection relations);
    private void SerializeTextSettings(XmlWriter writer, ChartAxisImpl axis);
    private void SerializeTextSettings(XmlWriter writer, IWorkbook book, IFont font, bool isAutoTextRotation, int rotationAngle, Excel2007TextRotation textRotation);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartExAxisParser : ChartAxisParser {
    public ChartExAxisParser(WorkbookImpl book);
    internal void ParseChartExAxis(XmlReader reader, ChartAxisImpl axis, ChartImpl chart, RelationCollection relations, Excel2007Parser parser, FileDataHolder dataHolder);
    private void ParseDisplayUnits(XmlReader reader, ChartValueAxisImpl valueAxis, RelationCollection relations);
    internal void ParseAxisCommonAttributes(XmlReader reader, Nullable`1& axisIsHidden, Nullable`1& axisId);
    internal void ParseAxisAttributes(XmlReader reader, ChartAxisImpl axis, bool isValueAxis);
    private ExcelTickMark ParseTickMark(XmlReader reader);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartExParser : ChartParser {
    public ChartExParser(WorkbookImpl book);
    internal void ParseChartEx(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private Dictionary`2<int, ChartExDataCache> ParseChartExData(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private void ParseExternalDataAttributes(XmlReader reader, ChartImpl chart);
    private KeyValuePair`2<int, ChartExDataCache> TryParseChartExDataCache(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private void ParseDimensionData(XmlReader reader, ChartExDataCache cache);
    private void ParseChartExLevelElement(XmlReader reader, ChartExDataCache cache, bool isCategoryValues);
    private Dictionary`2<int, int> ParseChartExElement(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private Dictionary`2<int, int> ParseChartExPlotArea(XmlReader reader, ChartImpl chart, RelationCollection relations, Excel2007Parser excel2007Parser);
    private Dictionary`2<int, int> ParsePlotAreaRegion(XmlReader reader, ChartImpl chart, RelationCollection relations, Excel2007Parser excel2007Parser, Int32& secondaryAxisId);
    private int ParseChartExSeries(XmlReader reader, ChartImpl chart, RelationCollection relations, Excel2007Parser excel2007Parser, Int32& secondaryAxisId);
    private int ParseParetoLineFormat(XmlReader reader, ChartFrameFormatImpl paretoLineFormat, FileDataHolder fileDataHolder, RelationCollection relations);
    private ChartSerieImpl TryParseSeriesFromAttributes(XmlReader reader, ChartImpl chart, ChartFrameFormatImpl& paretoLineFormat);
    private void ParseChartExSeriesLayoutProperties(XmlReader reader, ChartSerieImpl series, RelationCollection relations);
    private void ParseSeriesBinningProperties(XmlReader reader, ChartSerieDataFormatImpl dataFormat);
    private void ParseChartSeriesVisibility(XmlReader reader, ChartSerieDataFormatImpl dataFormat);
    private void ParsePlotSurface(XmlReader reader, ChartImpl chart, RelationCollection relations, Excel2007Parser excel2007Parser);
    private int ParseChartExAxes(XmlReader reader, int secondaryAxisId, List`1<int> hashCodeList, ChartExAxisParser axisParser, ChartImpl chart, FileDataHolder dataHolder, Excel2007Parser excel2007parser, RelationCollection relations);
    private ChartAxisImpl TryParseAxisFromReader(XmlReader axisReader, ChartExAxisParser axisParser, ChartImpl chart, Nullable`1<int> currentAxisId, int secondaryAxisId);
    internal virtual void ParseChartDataLabelVisibility(XmlReader reader, ChartDataLabelsImpl dataLabels);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartExSerializator : object {
    protected Dictionary`2<ExcelTickMark, string> s_dictTickMarkToAttributeValue;
    internal void SerializeChartEx(XmlWriter writer, ChartImpl chart);
    private void SerializeChartElement(XmlWriter writer, ChartImpl chart, RelationCollection relations);
    private void SerializePlotArea(XmlWriter writer, ChartImpl chart, RelationCollection relations);
    private void SerializeAxes(XmlWriter writer, ChartImpl chart, ExcelChartType chartType, RelationCollection relations);
    private void SerializeAxis(XmlWriter writer, ChartValueAxisImpl axis, ChartImpl chart, RelationCollection relations, int axisId);
    private void SerializeAxisCommon(XmlWriter writer, ChartValueAxisImpl axis, ChartImpl chart, RelationCollection relations, int axisId);
    private void SerializeAxisShapeAndTextProperties(XmlWriter writer, ChartValueAxisImpl axis, ChartImpl chart, RelationCollection relations);
    private void SerializeDisplayUnit(XmlWriter writer, ChartValueAxisImpl axis, ChartImpl chart, RelationCollection relations, int axisId);
    private void SerializeParetoSeries(XmlWriter writer, ChartImpl chart, ExcelChartType chartType);
    private void SerializeChartExSeries(XmlWriter writer, ChartSerieImpl serie, int serieDataIndex, ExcelChartType chartType, ChartImpl chart, RelationCollection relations);
    private void SerializeLayoutProperties(XmlWriter writer, ChartSerieImpl serie, ChartImpl chart, RelationCollection relations);
    private void SerializeSubTotalIndexes(XmlWriter writer, ChartSerieImpl serie);
    private void SerializeBinningProperties(XmlWriter writer, ChartSerieDataFormatImpl dataFormat, ChartImpl chart);
    private void SerializeDataLabels(XmlWriter writer, ChartSerieImpl serie, ChartImpl chart, RelationCollection relations);
    private void SerializeDataLabelSettings(XmlWriter writer, ChartDataLabelsImpl dataLabels, ChartImpl parentChart, RelationCollection relations);
    private bool IsFrameFormatChanged(ChartFrameFormatImpl format);
    private void SerializeNumFormat(XmlWriter writer, ChartDataLabelsImpl dataLabels);
    private void SerializeDataPointsSettings(XmlWriter writer, ChartSerieImpl serie);
    private void SerializeSeriesName(XmlWriter writer, ChartSerieImpl serie);
    private void SerializeSerieAttributes(XmlWriter writer, ChartSerieImpl serie, ExcelChartType chartType, int serieIndex, bool isPareto);
    private void SerializeLegend(XmlWriter writer, ChartLegendImpl chartLegend, ChartImpl chart);
    private void SeriliazeChartTextArea(XmlWriter writer, ChartTextAreaImpl chartTextArea, ChartImpl chart, RelationCollection relations, double defaultFontSize, string parentElement, bool isNotAuto, bool isChartTitle);
    private void SerializeTextElementAttributes(XmlWriter writer, ushort position, bool isLayout);
    private bool SerializeTextAreaText(XmlWriter writer, ChartTextAreaImpl chartTextArea, ChartImpl chart, double defaultFontSize);
    private void SerializeChartExData(XmlWriter writer, ChartImpl chart);
    private void SerializeIndividualChartSerieData(XmlWriter writer, ChartSerieImpl serie, int index, ExcelChartType chartType);
    private void SerializeDimensionData(XmlWriter writer, IRange range, Object[] directValues, bool isInRow, string formatCode, bool isCategoryRange);
    private void SerializePrinterSettings(XmlWriter writer, ChartImpl chart, RelationCollection relations);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartFillObjectGetter : object {
    private ChartSerieDataFormatImpl m_parentFormat;
    public ChartBorderImpl Border { get; }
    public ChartInteriorImpl Interior { get; }
    public IInternalFill Fill { get; }
    public ShadowImpl Shadow { get; }
    public ThreeDFormatImpl ThreeD { get; }
    public ChartFillObjectGetter(ChartSerieDataFormatImpl dataFormat);
    public sealed virtual ChartBorderImpl get_Border();
    public sealed virtual ChartInteriorImpl get_Interior();
    public sealed virtual IInternalFill get_Fill();
    public sealed virtual ShadowImpl get_Shadow();
    public sealed virtual ThreeDFormatImpl get_ThreeD();
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartFillObjectGetterAny : object {
    private ChartBorderImpl m_border;
    private ChartInteriorImpl m_interior;
    private IInternalFill m_fill;
    private ShadowImpl m_shadow;
    private ThreeDFormatImpl m_threeD;
    public ChartBorderImpl Border { get; }
    public ChartInteriorImpl Interior { get; }
    public IInternalFill Fill { get; }
    public ShadowImpl Shadow { get; }
    public ThreeDFormatImpl ThreeD { get; }
    public ChartFillObjectGetterAny(ChartBorderImpl border, ChartInteriorImpl interior, IInternalFill fill, ShadowImpl shadow, ThreeDFormatImpl three_d);
    public sealed virtual ChartBorderImpl get_Border();
    public sealed virtual ChartInteriorImpl get_Interior();
    public sealed virtual IInternalFill get_Fill();
    public sealed virtual ShadowImpl get_Shadow();
    public sealed virtual ThreeDFormatImpl get_ThreeD();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartParser : object {
    internal static float DefaultTitleSize;
    internal static string EndParaTag;
    internal List`1<string> ownerIndexCount;
    private WorkbookImpl m_book;
    public ChartParser(WorkbookImpl book);
    public void ParseChart(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private void ParseStyleIdFromAlternateContent(Stream stream, ChartImpl chart);
    internal void ParseDefaultTextProperties(XmlReader reader, ChartImpl chart);
    private void ParseChartBodyProperties(XmlReader reader, ChartImpl chart);
    private void ParserChartParagraphs(XmlReader reader, ChartImpl chart);
    private void CheckDefaultTextSettings(ChartImpl chart);
    private void ParseExtensionList(XmlReader reader, ChartImpl chart);
    private void ParseExtension(XmlReader reader, ChartImpl chart);
    private void ParsePivotOptions(XmlReader reader, ChartImpl chart);
    private void ParsePivotOptions16(XmlReader reader, ChartImpl chart);
    internal void ParsePrintSettings(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private void ParsePivotSource(XmlReader reader, ChartImpl chart);
    private IPivotTable GetPivotTable(IWorkbook book, string pivotSourceName);
    private void ParseUserShapes(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private void ParseChartElement(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private void ParseExtList(XmlReader reader, ChartImpl chart);
    private void ParseExtElement(XmlReader reader, ChartImpl chart);
    private void ParseDataDisplayOptions16(XmlReader reader, ChartImpl chart);
    internal void TryParsePositioningValues(XmlReader reader, Nullable`1& isOverlay, UInt16& position);
    private bool ParseAutoTitleDeleted(XmlReader reader, ChartImpl chart);
    private void ParsePivotFormats(XmlReader reader, ChartImpl chart);
    private void Set3DSettings(ChartImpl chart, Chart3DRecord chart3D);
    internal void ParseLegend(XmlReader reader, ChartLegendImpl legend, ChartImpl chart, RelationCollection relations);
    private ExcelLegendPosition GetChartLegendPosition(ushort position);
    private void ParseLegendEntry(XmlReader reader, IChartLegend legend, Excel2007Parser parser);
    private Chart3DRecord ParseView3D(XmlReader reader, ChartImpl chart);
    private void ParseErrorBars(XmlReader reader, ChartSerieImpl series, RelationCollection relations);
    private void CheckCustomErrorBarType(IChartErrorBars errorBars);
    private IRange ParseErrorBarRange(XmlReader reader, IWorkbook book, Object[]& values, IChartErrorBars errorBars);
    private void ParseTrendlines(XmlReader reader, ChartSerieImpl series, RelationCollection relations, Excel2007Parser parser);
    private void ParseTrendline(XmlReader reader, ChartSerieImpl series, RelationCollection relations, Excel2007Parser parser);
    private void ParseTrendlineLabel(XmlReader reader, IChartTrendLine trendline, Excel2007Parser parser, FileDataHolder dataHolder, RelationCollection relations);
    private void ParseSurface(XmlReader reader, IChartWallOrFloor surface, FileDataHolder dataHolder, RelationCollection relations);
    private void ParsePlotArea(XmlReader reader, ChartImpl chart, RelationCollection relations, Excel2007Parser parser);
    private void ParsePlotAreaGeneral(XmlReader reader, ChartImpl chart, RelationCollection relations, Excel2007Parser parser);
    private void ParsePlotAreaAxes(XmlReader reader, ChartImpl chart, RelationCollection relations, Excel2007Parser parser);
    private bool ParseBarDir(XmlReader reader, String& axisId);
    private void ParseBarChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private IChartSerie ParseFilteredSeries(XmlReader reader, ChartImpl chart, RelationCollection relations, bool is3D, ExcelChartType SeriesType, bool secondary);
    private bool ParseAxisId(XmlReader reader, List`1<ChartSerieImpl> lstSeries, Dictionary`2<int, int> dictSeriesAxis);
    internal void ParseBar3DChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private void ParseBarShape(XmlReader reader, ChartSerieImpl firstSeries);
    private void ParseBarShape(string value, IChartSerieDataFormat dataFormat);
    private ChartSerieImpl ParseBarChartShared(XmlReader reader, ChartImpl chart, RelationCollection relations, bool is3D, List`1<ChartSerieImpl> lstSeries, String& shape, ExcelChartType& chartType);
    private ChartSerieImpl ParseFilterSecondaryAxis(XmlReader reader, ExcelChartType seriesType, bool is3D, List`1<ChartSerieImpl> lstSeries, ChartImpl chart, RelationCollection relations, ChartSerieImpl& series);
    private void ParseSeries(XmlReader reader, string strDirection, string strGrouping, string shape, bool is3D, List`1<ChartSerieImpl> lstSeries, ChartImpl chart, RelationCollection relations, ChartSerieImpl& series);
    private void FindFilter(IChartCategories categories, string filteredcategory, string fullreference, IChartSerie series1, bool isseries);
    private void FilterCategories(int start, int end, Int32[] categories_length, IChartCategories categories, Int32& catLenIndex, Int32& catIndex);
    private IRange FindRange(IChartSerie series1, string strValue);
    public IRange GetSerieOrAxisRange(IRange range, bool bIsInRow, IRange& serieRange, int CategoryLabelCount);
    private bool DetectIsInRow(IRange range);
    private ExcelChartType GetBarSeriesType(string direction, string grouping, bool is3D, string shape);
    private ExcelChartType GetPivotBarSeriesType(string direction, string grouping, string shape, bool is3D);
    private ExcelChartType GetAreaSeriesType(string grouping, bool is3D);
    private ExcelChartType GetLineSeriesType(string grouping, bool is3D);
    private void ParseArea3DChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private void ParseAreaChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private bool GetAxisType(ChartImpl chart, XmlReader& reader);
    private void ParseAreaChartCommon(XmlReader reader, ChartImpl chart, bool b3D, RelationCollection relations, List`1<ChartSerieImpl> lstSeries, bool isPrimary, ExcelChartType& chartType);
    private ChartSerieImpl ParseLineChartCommon(XmlReader reader, ChartImpl chart, bool is3D, RelationCollection relations, List`1<ChartSerieImpl> lstSeries, Excel2007Parser parser, ExcelChartType& chartType);
    private void ParseLine3DChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, Excel2007Parser parser, ExcelChartType& chartType);
    private void ParseLineChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, Excel2007Parser parser, ExcelChartType& chartType, List`1<int> markerArray);
    private void ParseBubbleChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private void ParseSurfaceChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private void ParseSurfaceCommon(XmlReader reader, ChartImpl chart, bool is3D, RelationCollection relations, List`1<ChartSerieImpl> lstSeries, ExcelChartType& chartType);
    private void ParseBandFormats(XmlReader reader, ChartImpl chart);
    private ExcelChartType GetSurfaceSeriesType(bool bWireframe, bool is3D);
    private void ParseRadarChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, Excel2007Parser parser, ExcelChartType& chartType);
    private void ParseScatterChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, Excel2007Parser parser, ExcelChartType& chartType);
    private void ParsePieChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private void ParsePie3DChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private void ParseOfPieChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private void ParseStockChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, Excel2007Parser parser);
    private void ParseLines(XmlReader reader, ChartImpl chart, ChartSerieImpl series, string lineStyle);
    private void ParseDoughnutChart(XmlReader reader, ChartImpl chart, RelationCollection relations, Dictionary`2<int, int> dictSeriesAxis, ExcelChartType& chartType);
    private ChartSerieImpl ParsePieCommon(XmlReader reader, ChartImpl chart, ExcelChartType seriesType, RelationCollection relations, List`1<ChartSerieImpl> lstSeries);
    internal void ParseDataLabels(XmlReader reader, ChartSerieImpl series, RelationCollection relations, bool isChartExSeries);
    private void ParseDataLabel(XmlReader reader, ChartSerieImpl series, RelationCollection relations, bool isChartExSeries);
    private void ParseDataLabelSettings(XmlReader reader, IChartDataLabels dataLabels, Excel2007Parser parser, FileDataHolder holder, RelationCollection relations, bool isChartExSeries);
    internal void ParseDataLabelsExtensionList(XmlReader reader, ChartDataLabelsImpl dataLabels, FileDataHolder holder, RelationCollection relations);
    private void ParseDataLabelsExtension(XmlReader reader, ChartDataLabelsImpl dataLabels, FileDataHolder holder, RelationCollection relations);
    private void ParseLeaderLines(XmlReader reader, ChartDataLabelsImpl dataLabels, FileDataHolder holder, RelationCollection relations);
    internal virtual void ParseChartDataLabelVisibility(XmlReader reader, ChartDataLabelsImpl dataLabels);
    private ChartSerieImpl ParseBarSeries(XmlReader reader, ChartImpl chart, ExcelChartType seriesType, RelationCollection relations);
    private void ParseFilteredSeriesOrCategoryName(XmlReader reader, ChartSerieImpl series);
    private void ParseExtension(XmlReader reader, ChartSerieImpl series);
    private void ParseDatalabelsRange(XmlReader reader, ChartSerieImpl series);
    private void ParseDatalabelRangeCache(XmlReader reader, ChartSerieImpl series);
    private ChartSerieImpl ParseSurfaceSeries(XmlReader reader, ChartImpl chart, ExcelChartType seriesType, RelationCollection relations);
    private ChartSerieImpl ParsePieSeries(XmlReader reader, ChartImpl chart, ExcelChartType seriesType, RelationCollection relations);
    private ChartSerieImpl ParseLineSeries(XmlReader reader, ChartImpl chart, ExcelChartType seriesType, RelationCollection relations, Excel2007Parser parser);
    private ChartSerieImpl ParseScatterSeries(XmlReader reader, ChartImpl chart, ExcelChartType seriesType, RelationCollection relations, Excel2007Parser parser);
    private ChartSerieImpl ParseRadarSeries(XmlReader reader, ChartImpl chart, ExcelChartType seriesType, RelationCollection relations, Excel2007Parser parser);
    private ChartSerieImpl ParseBubbleSeries(XmlReader reader, ChartImpl chart, RelationCollection relations);
    private ChartSerieImpl ParseAreaSeries(XmlReader reader, ChartImpl chart, ExcelChartType seriesType, RelationCollection relations, bool isPrimary);
    private void ParseSeriesCommonWithoutEnd(XmlReader reader, ChartSerieImpl series, RelationCollection relations);
    private void ParseSeriesText(XmlReader reader, ChartSerieImpl series);
    internal bool IsNullOrWhiteSpace(string text);
    internal void ParseDataPoint(XmlReader reader, ChartSerieImpl series, RelationCollection relations);
    private IRange ParseSeriesValues(XmlReader reader, ChartSerieImpl series, Object[]& values, bool isValueAxis);
    internal static IRange GetRange(WorkbookImpl workbook, string formula);
    internal static IRange GetRange(WorkbookImpl workbook, string formula, IWorksheet worksheet);
    private string ParseNumReference(XmlReader reader, Object[]& values);
    private string ParseNumReference(XmlReader reader, Object[]& values, String& filteredvalue, String& formatCode);
    private string ParseStringReference(XmlReader reader, String& nameCache);
    private string ParseStringReference(XmlReader reader, String& Filteredcategory, Object[]& values, ChartImpl chart);
    private string ParseMultiLevelStringReference(XmlReader reader, ChartSerieImpl series);
    private Dictionary`2<int, Object[]> ParseMultiLevelStringCache(XmlReader reader, ChartSerieImpl series, string tagName);
    private void ParseMarker(XmlReader reader, ChartSerieImpl series, Excel2007Parser parser);
    private void ParseMarker(XmlReader reader, IChartSerieDataFormat dataFormat, Excel2007Parser parser);
    private void ParseMarkerFill(XmlReader reader, IChartSerieDataFormat serieDataFormat, Excel2007Parser parser);
    private bool ParseMarkerLine(XmlReader reader, ColorObject color, Excel2007Parser parser, ChartSerieDataFormatImpl format);
    private void ParseUpDownBars(XmlReader reader, ChartImpl chart, ChartSerieImpl series, RelationCollection relations);
    private void ParseDropBar(XmlReader reader, IChartDropBar dropBar, FileDataHolder dataHolder, RelationCollection relations);
    private void ParseDataTable(XmlReader reader, ChartImpl chart);
    internal void ParseSeriesProperties(XmlReader reader, ChartSerieImpl series, RelationCollection relations);
    private void ParseDefaultTextFormatting(XmlReader reader, IInternalChartTextArea textFormatting, Excel2007Parser parser);
    private Object[] ParseDirectlyEnteredValues(XmlReader reader, String& formatCode);
    internal int AddNumericPoint(XmlReader reader, List`1<object> list);
    internal int AddNumericPoint(XmlReader reader, Dictionary`2<int, object> list);
    private object ReadXmlValue(XmlReader reader);
    private void ChangeKeyToChartGroup(ChartImpl chart);
    private void ParseDataLabels(XmlReader reader, ChartImpl chart, RelationCollection relations, int index);
    private void ParseDataLabel(XmlReader reader, ChartImpl chart, RelationCollection relations, int index);
    internal static ColorObject ParseInvertSolidFillFormat(Stream stream, ChartSerieImpl serie);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartParserCommon : object {
    private static string NullString;
    private static int DefaultShadowSize;
    private static int DefaultBlurValue;
    private static int DefaultAngleValue;
    private static int DefaultDistanceValue;
    private static Dictionary`2<KeyValuePair`2<string, string>, ExcelChartLinePattern> s_dicLinePatterns;
    private static WorkbookImpl m_book;
    private static ChartParserCommon();
    public static void SetWorkbook(WorkbookImpl book);
    public static void ParseTextArea(XmlReader reader, IInternalChartTextArea textArea, FileDataHolder holder, RelationCollection relations);
    public static void ParseTextArea(XmlReader reader, IInternalChartTextArea textArea, FileDataHolder holder, RelationCollection relations, Nullable`1<float> defaultFontSize);
    public static void ParseTextAreaTag(XmlReader reader, IInternalChartTextArea textArea, RelationCollection relations, FileDataHolder holder, Nullable`1<float> defaultFontSize);
    internal static void ParseDefaultTextFormatting(XmlReader reader, IInternalChartTextArea textFormatting, Excel2007Parser parser, Nullable`1<double> defaultFontSize);
    public static string ParseValueTag(XmlReader reader);
    private static string AssignValTag(string localName);
    public static bool ParseBoolValueTag(XmlReader reader);
    public static int ParseIntValueTag(XmlReader reader);
    public static double ParseDoubleValueTag(XmlReader reader);
    public static void ParseLineProperties(XmlReader reader, ChartBorderImpl border, Excel2007Parser parser);
    public static void ParsePatternFill(XmlReader reader, IFill fill, Excel2007Parser parser);
    internal static void ParseSolidFill(IInternalFill fill, XmlReader reader, Excel2007Parser parser, ColorObject color);
    public static void ParseSolidFill(XmlReader reader, ChartInteriorImpl interior, Excel2007Parser parser, Int32& Alpha);
    public static void ParseSolidFill(XmlReader reader, ChartInteriorImpl interior, Excel2007Parser parser);
    public static void ParseSolidFill(XmlReader reader, Excel2007Parser parser, ColorObject color);
    internal static void ParseSolidFill(XmlReader reader, Excel2007Parser parser, ColorObject color, ChartSerieDataFormatImpl dataFormat);
    internal static void ParseSolidFill(XmlReader reader, Excel2007Parser parser, ColorObject color, ShapeLineFormatImpl shape);
    public static void ParseSolidFill(XmlReader reader, Excel2007Parser parser, IInternalFill fill);
    public static void ParseSolidFill(XmlReader reader, Excel2007Parser parser, ColorObject color, Int32& Alpha);
    internal static void ParseColorObject(XmlReader reader, Excel2007Parser parser, ColorObject color, Int32& Alpha);
    internal static void ParseSolidFill(XmlReader reader, Excel2007Parser parser, ShapeLineFormatImpl shape, ColorObject color);
    internal static Color ParseSchemeColor(XmlReader reader, Excel2007Parser parser, ShapeLineFormatImpl shape);
    public static Color ParseSRgbColor(XmlReader reader, Excel2007Parser parser);
    public static Color ParseSRgbColor(XmlReader reader, Int32& alpha, Int32& tint, Int32& shade, Excel2007Parser parser);
    private static Color ParseSRgbColor(XmlReader reader, Int32& alpha, Int32& tint, Int32& shade, Excel2007Parser parser, bool isBlipImage);
    public static Color ParseSchemeColor(XmlReader reader, Excel2007Parser parser);
    public static Color ParseSchemeColor(XmlReader reader, Int32& alpha, Excel2007Parser parser);
    private static Color ParseSchemeColor(XmlReader reader, Int32& alpha, Excel2007Parser parser, bool isBlipImage);
    private static Color GetStandardThemeColors(string strColorName);
    public static Color ParsePresetColor(XmlReader reader, Int32& alpha, Excel2007Parser parser);
    private static Color ParsePresetColor(XmlReader reader, Int32& alpha, Excel2007Parser parser, bool isBlipImage);
    public static Color ParseSystemColor(XmlReader reader, Int32& alpha, Excel2007Parser parser);
    private static Color ParseSystemColor(XmlReader reader, Int32& alpha, Excel2007Parser parser, bool isBlipImage);
    private static Color ParseColorUpdater(XmlReader reader, Color result, Excel2007Parser parser, Int32& alpha);
    private static Color ParseColorUpdater(XmlReader reader, Color result, Excel2007Parser parser, Int32& alpha, bool isBlipImage);
    internal static double RoundOffLuminance(double dLuminance);
    internal static double RoundOffSaturation(double dSaturation);
    private static void ParseLineProperties(XmlReader reader, ChartBorderImpl border, bool bRoundCorners, Excel2007Parser parser);
    private static void ParseArrowSettings(XmlReader reader, ChartBorderImpl border, bool isHead);
    private static ExcelShapeArrowStyle GetHeadStyle(string value);
    private static ExcelShapeArrowWidthLength GetArrowSize(string length, string width);
    public static void ParsePictureFill(XmlReader reader, IFill fill, RelationCollection relations, FileDataHolder holder, WorkbookImpl workbookImpl);
    internal static void ParsePictureFill(XmlReader reader, IFill fill, RelationCollection relations, FileDataHolder holder, WorkbookImpl workbookImpl, List`1<string> lstRelationIds);
    internal static void ParseTextAreaText(XmlReader reader, IInternalChartTextArea textArea, Excel2007Parser parser, Nullable`1<float> defaultFontSize);
    internal static string ParseFormulaOrValue(XmlReader reader, String& formula);
    public static void ParseChartLayout(XmlReader reader, IChartLayout layout);
    private static void ParseManualLayout(XmlReader reader, IChartManualLayout manualLayout);
    private static void ParseStringReference(XmlReader reader, IInternalChartTextArea textArea);
    private static String[] ParseDirectlyEnteredValues(XmlReader reader);
    internal static void ParseRichText(XmlReader reader, IInternalChartTextArea textArea, Excel2007Parser parser, Nullable`1<float> defaultFontSize, List`1<TRuns> tRuns, bool isRichTextStreamRecord);
    private static void ParseBodyProperties(XmlReader reader, IChartTextArea textArea);
    private static void ParseListStyles(XmlReader reader, IChartTextArea textArea);
    private static List`1<TRuns> ParseParagraphs(XmlReader reader, IInternalChartTextArea textArea, Excel2007Parser parser, Nullable`1<float> defaultFontSize, List`1<TRuns> tRuns, IInternalChartTextArea defaultTextArea);
    private static List`1<TRuns> ParseFldElement(XmlReader reader, IInternalChartTextArea textArea, Excel2007Parser parser, TextSettings defaultSettings, List`1<TRuns> tRuns, Nullable`1<float> defaultFontSize);
    private static TextSettings ParseParagraphProperties(XmlReader reader, IInternalChartTextArea textarea, Excel2007Parser parser, Nullable`1<float> defaultFontSize);
    internal static TextSettings ParseDefaultParagraphProperties(XmlReader reader, Excel2007Parser parser);
    internal static TextSettings ParseDefaultParagraphProperties(XmlReader reader, Excel2007Parser parser, Nullable`1<float> defaultFontSize);
    public static string CheckValue(string strValue);
    private static void ParseDefaultFontColor(XmlReader reader, TextSettings result, Excel2007Parser parser);
    private static List`1<TRuns> ParseParagraphRun(XmlReader reader, IInternalChartTextArea textArea, Excel2007Parser parser, TextSettings defaultSettings, List`1<TRuns> tRuns);
    public static void ParseParagraphRunProperites(XmlReader reader, IInternalChartTextArea textArea, Excel2007Parser parser, TextSettings defaultSettings);
    private static void CopyDefaultTextAreaSettings(IInternalChartTextArea textArea, IInternalChartTextArea defaultTextArea);
    public static void CopyDefaultSettings(IInternalFont textArea, TextSettings defaultSettings);
    internal static void CopyChartTitleDefaultSettings(ChartTextAreaImpl textArea, TextSettings defaultSettings);
    public static GradientStops ParseGradientFill(XmlReader reader, Excel2007Parser parser);
    internal static GradientStops ParseGradientFill(XmlReader reader, Excel2007Parser parser, ShapeFillImpl fill);
    public static int ParseIntPercentageValue(XmlReader reader, int multiplyValue);
    private static void ParseGradientPath(XmlReader reader, GradientStops result);
    private static GradientStops ParseGradientStops(XmlReader reader, Excel2007Parser parser, ShapeFillImpl fill);
    private static GradientStopImpl ParseGradientStop(XmlReader reader, Excel2007Parser parser);
    private static void ParseSchemeColor(XmlReader reader, Excel2007Parser parser, GradientStopImpl stop);
    internal static Color ReadColor(XmlReader reader, Int32& transparecy, Int32& tint, Int32& shade, Excel2007Parser parser);
    internal static Color ReadColor(XmlReader reader, Int32& transparecy, Int32& tint, Int32& shade, Excel2007Parser parser, bool isBlipImage);
    private static void ConvertGradientStopsToProperties(GradientStops gradientStops, IInternalFill fill);
    internal static void CheckDefaultSettings(ChartTextAreaImpl textArea);
    private static void CopyGradientColor(ColorObject colorObject, GradientStopImpl gradientStop);
    public static void ParseShapeProperties(XmlReader reader, IChartFillObjectGetter objectGetter, FileDataHolder dataHolder, RelationCollection relations);
    private static void ParseLighting(XmlReader reader, ThreeDFormatImpl Three_D, RelationCollection relations, FileDataHolder holder);
    public static Excel2007ChartLightingProperties Check(string lighttype);
    public static Excel2007ChartBevelProperties Check(string LineWidth, string LineHeight, string PresetShape, XmlReader reader);
    public static Excel2007ChartMaterialProperties Check(string material, XmlReader reader);
    internal static void ParseShadowproperties(XmlReader reader, ShadowImpl shadow, RelationCollection relations, FileDataHolder holder, Excel2007Parser parser);
    public static Excel2007ChartPresetsOuter Check(string blurval, string sizex, string sizey, string disttag, string dirtag, string align, string rot, ShadowImpl Shadow, XmlReader reader, Excel2007Parser parser);
    public static Excel2007ChartPresetsOuter Check(string blurval, string sizex, string disttag, string dirtag, string align, string rot, ShadowImpl Shadow, XmlReader reader, Excel2007Parser parser);
    public static void ParseShadowAlpha(XmlReader reader, ShadowImpl Shadow);
    public static void ParseNumberFormat(XmlReader reader, IChartDataLabels dataLabels);
    public static Excel2007ChartPresetsPrespective Check(string blurval, string sizex, string sizey, string kxtag, string disttag, string dirtag, string align, string rot);
    public static Excel2007ChartPresetsInner Check(string blurval, string disttag, string dirtag, XmlReader reader, ShadowImpl Shadow, Excel2007Parser parser);
    public static Excel2007ChartPresetsInner Check(string blurval, string disttag, string dirtag, ShadowImpl Shadow, XmlReader reader, bool m_HasShadowStyle, Excel2007Parser parser);
    private static ExcelGradientColor DetectGradientColor(GradientStops gradientStops);
    private static ExcelGradientVariants DetectGradientVariant(GradientStops gradientStops, ExcelGradientStyle gradientStyle, ExcelGradientColor gradientColor, bool isPresetInverted);
    private static ExcelGradientVariants DetectDiagonalDownVariant(bool bInverted, bool bDoubled);
    private static ExcelGradientVariants DetectStandardVariant(bool bInverted, bool bDoubled);
    private static ExcelGradientVariants DetectGradientVariantCorner(Rectangle rectangle);
    private static bool IsInverted(GradientStops gradientStops, ExcelGradientColor gradientColor, bool isPresetInverted);
    private static ExcelGradientStyle DetectGradientStyle(GradientStops gradientStops);
    private static ExcelGradientStyle GetRectGradientStyle(GradientStops gradientStops);
    private static ExcelGradientStyle GetLiniarGradientStyle(GradientStops gradientStops);
    private static ExcelGradientPreset FindPreset(GradientStops gradientStops, Boolean& isInverted);
    private static void SetGradientDegree(GradientStops gradientStops, ExcelGradientColor gradientColor, IFill fill);
    internal static void ParseChartTitleElement(Stream titleAreaStream, IInternalChartTextArea textArea, FileDataHolder holder, RelationCollection relations, float fontSize);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartSerializator : object {
    public static int DefaultExtentX;
    public static int DefaultExtentY;
    public int categoryFilter;
    public bool findFilter;
    private bool m_isChartExFallBack;
    private ChartImpl _chart;
    internal ChartSerializator(bool value);
    public void SerializeChart(XmlWriter writer, ChartImpl chart, string chartItemName);
    private void SerializeDefaultTextProperties(XmlWriter writer, ChartImpl chart);
    private void SerializePivotOptions(XmlWriter writer, ChartImpl chart);
    private void SerializePivotOptions16(XmlWriter writer, ChartImpl chart);
    private void SerializePivotFormats(XmlWriter writer, ChartImpl chart);
    private void SerializePivotSource(XmlWriter writer, ChartImpl chart);
    private static string GetPivotSource(IPivotTable pivotTable);
    private void SerializeShapes(XmlWriter writer, ChartImpl chart, string chartItemName);
    private void SerializePrinterSettings(XmlWriter writer, ChartImpl chart, RelationCollection relations);
    private void SerializeLegend(XmlWriter writer, IChartLegend legend, ChartImpl chart);
    private void SerializeLegendEntry(XmlWriter writer, IChartLegendEntry legendEntry, int index, IWorkbook book);
    private void SerializePivotView3D(XmlWriter writer, ChartImpl chart);
    private void SerializeView3D(XmlWriter writer, ChartImpl chart);
    private void SerializeErrorBars(XmlWriter writer, IChartErrorBars errorBars, string direction, IWorkbook book, ChartSerieImpl series);
    private void SerializeTrendlines(XmlWriter writer, IChartTrendLines trendlines, IWorkbook book);
    private void SerializeTrendline(XmlWriter writer, IChartTrendLine trendline, IWorkbook book);
    private void SerializeTrendlineLabel(XmlWriter writer, IChartTextArea dataLabelFormat, WorkbookImpl book, IChartTextArea trendlineTextArea, ChartTrendLineImpl trendline);
    private void SerializeSurface(XmlWriter writer, IChartWallOrFloor surface, string mainTagName, ChartImpl chart);
    private void SerializePlotArea(XmlWriter writer, ChartImpl chart, RelationCollection relations);
    private void SerializeEmptyChart(XmlWriter writer, ChartImpl chart);
    private void SerializeEmptyChartDataLabels(XmlWriter writer);
    private void SerializePivotPlotArea(XmlWriter writer, ChartImpl chart, RelationCollection relations);
    private void SerializeBarChart(XmlWriter writer, ChartImpl chart);
    private int SerializeBarChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeBarAxisId(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeBar3DChart(XmlWriter writer, ChartImpl chart);
    private void SerializeBarShapeFromType(XmlWriter writer, ExcelChartType type);
    private int SerializeBar3DChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeGapDepth(XmlWriter writer, ChartImpl chart);
    private void SerializeBarShape(XmlWriter writer, ExcelBaseFormat baseFormat, ExcelTopFormat topFormat);
    private void SerializeBarShape(XmlWriter writer, IChartSerieDataFormat dataFormat);
    private int SerializeBarChartShared(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private int SerializeChartSeries(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries, SerializeSeriesDelegate serializator);
    private void SerializeFilteredSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeFilterSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeFilteredText(XmlWriter writer, ChartSerieImpl series);
    private void SerializeFiltedStringReference(XmlWriter writer, string range, ChartSerieImpl series);
    private void SerializeFilteredCategory(XmlWriter writer, ChartSerieImpl series, bool categoryfilter);
    private void SerializeFilteredValues(XmlWriter writer, ChartSerieImpl series, bool categoryfilter);
    public string GetSeriesType(string Series);
    private int GetSeriesIndex(ChartSerieImpl firstSeries, IList`1<IChartSerie> arrOrderedSeries, IChartSeries arrSeries);
    private void SerializeFilteredFullReference(XmlWriter writer, ChartSerieImpl series, bool catorval);
    private void SerializeChartGrouping(XmlWriter writer, ExcelChartType seriesType);
    private void SerializeChartGrouping(XmlWriter writer, ChartImpl chart);
    private void SerializeArea3DChart(XmlWriter writer, ChartImpl chart);
    private int SerializeArea3DChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeAreaChart(XmlWriter writer, ChartImpl chart);
    private int SerializeAreaChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private int SerializeAreaChartCommon(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private int SerializeLineChartCommon(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeLine3DChart(XmlWriter writer, ChartImpl chart);
    private int SerializeLine3DChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeLineChart(XmlWriter writer, ChartImpl chart);
    private int SerializeLineChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private int SerializeBubbleChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeSurfaceChart(XmlWriter writer, ChartImpl chart);
    private int SerializeSurfaceChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeSurface3DChart(XmlWriter writer, ChartImpl chart);
    private int SerializeSurface3DChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private int SerializeSurfaceCommon(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeBandFormats(XmlWriter writer, ChartImpl chart);
    private int SerializeMainChartTypeTag(XmlWriter writer, ChartImpl chart, int groupIndex);
    private void SerializeMainChartTypeTag(XmlWriter writer, ChartImpl chart);
    private void SerializeRadarChart(XmlWriter writer, ChartImpl chart);
    private int SerializeRadarChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private int SerializeScatterChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializePieChart(XmlWriter writer, ChartImpl chart);
    private int SerializePieChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializePie3DChart(XmlWriter writer, ChartImpl chart);
    private int SerializePie3DChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeOfPieChart(XmlWriter writer, ChartImpl chart);
    private int SerializeOfPieChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private int SerializeStockChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeDoughnutChart(XmlWriter writer, ChartImpl chart);
    private int SerializeDoughnutChart(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private int SerializePieCommon(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeDataLabels(XmlWriter writer, IChartDataLabels dataLabels, ChartSerieImpl series);
    private void SerializeNumFormat(XmlWriter writer, ChartDataLabelsImpl dataLabels);
    private void SerializeDataLabel(XmlWriter writer, IChartDataLabels dataLabels, int index, ChartImpl chart);
    private void SerializeDataLabelSettings(XmlWriter writer, IChartDataLabels dataLabels, ChartImpl chart, bool serializeLeaderLines);
    private void SerializeDefaultTextFormatting(XmlWriter writer, IChartTextArea textFormatting, IWorkbook book, double defaultFontSize);
    private void SerializeVaryColors(XmlWriter writer, ChartSerieImpl firstSeries);
    private void SerializeBarSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeInvertIfNegativeColor(XmlWriter writer, ChartSerieImpl series);
    private bool FindFiltered(ChartSerieImpl series);
    private void UpdateFilteredValuesRange(ChartSerieImpl series);
    private bool HasCategoryFilters(ChartImpl chart);
    private void UpdateCategoryLabel(ChartSerieImpl series);
    private void SerializeFilteredSeriesOrCategoryName(XmlWriter writer, ChartSerieImpl series, bool seriesOrcategory);
    private void SeriealizeValuesFromCellsRange(XmlWriter writer, ChartSerieImpl series);
    private void serializeDataLabelRangeCache(XmlWriter writer, Dictionary`2<int, object> values);
    private void SerializeFilteredCategoryName(XmlWriter writer, ChartSerieImpl series);
    private void SerializePieSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeErrorBars(XmlWriter writer, ChartSerieImpl series);
    private void SerializeLineSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeScatterSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeRadarSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeBubbleSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeAreaSeries(XmlWriter writer, ChartSerieImpl series);
    private void SerializeSeriesCommonWithoutEnd(XmlWriter writer, ChartSerieImpl series, bool isFiltered);
    private void SerializeDataPoint(XmlWriter writer, ChartDataPointImpl dataPoint, ChartSerieImpl series);
    private void SerializeSeriesCategory(XmlWriter writer, ChartSerieImpl series, string tagName);
    private void SerializeSeriesCategory(XmlWriter writer, ChartSerieImpl series);
    private void SerializeSeriesValues(XmlWriter writer, ChartSerieImpl series);
    private void SerializeSeriesValues(XmlWriter writer, ChartSerieImpl series, string tagName);
    private void SerializeSeriesValues(XmlWriter writer, IRange range, Object[] values, string tagName, ChartSerieImpl series);
    private void SerializeNormalReference(XmlWriter writer, IRange range, Object[] values, string tagName, ChartSerieImpl series);
    private void SerializeReference(XmlWriter writer, IRange range, Object[] rangeValues, ChartSerieImpl series, string tagName);
    private bool GetStringReference(IRange range);
    private void SerializeNumReference(XmlWriter writer, IRange range, Object[] rangeValues, ChartSerieImpl series, string tagName);
    private void SerializeNumCacheValues(XmlWriter writer, ChartSerieImpl series);
    private void SerializeStringReference(XmlWriter writer, IRange range, ChartSerieImpl series, string tagName);
    private void SerializeStringReference(XmlWriter writer, string range, ChartSerieImpl series, bool hasSeriesName, string tagName);
    private void SerializeTextTagCacheValues(XmlWriter writer, ChartSerieImpl series);
    private void SerializeCategoryTagCacheValues(XmlWriter writer, ChartSerieImpl series);
    private void SerializeMultiLevelStringReference(XmlWriter writer, IRange range, Object[] rangeValues, ChartSerieImpl series, string tagName);
    private void SerializeMultiLevelStringCache(XmlWriter writer, ChartSerieImpl series);
    private void SerializeFormula(XmlWriter writer, string tag, string formula);
    private void SerializeAxes(XmlWriter writer, ChartImpl chart, RelationCollection relations);
    private void SerializePivotAxes(XmlWriter writer, ChartImpl chart, RelationCollection relations);
    private void SerializeMarker(XmlWriter writer, ChartSerieImpl series);
    private void SerializeMarker(XmlWriter writer, ChartSerieDataFormatImpl serieFormat);
    internal static void SerializeLineSettings(XmlWriter writer, Color color, IWorkbook book);
    internal static void SerializeLineSettings(XmlWriter writer, Color color, IWorkbook book, bool bNoFill);
    internal static void SerializeLineSettings(XmlWriter writer, Color color, IWorkbook book, bool bNoFill, double transparency);
    private void SerializeUpDownBars(XmlWriter writer, ChartImpl chart, ChartSerieImpl firstSeries);
    private void SerializeDropBar(XmlWriter writer, IChartDropBar dropBar, string tagName, ChartImpl chart);
    internal void SerializeChartsheet(XmlWriter writer, ChartImpl chart, string drawingRelation);
    public void SerializeChartsheetDrawing(XmlWriter writer, ChartImpl chart, string strRelationId);
    internal static void SerializeAbsoluteAnchorChart(XmlWriter writer, ChartImpl chart, string strRelationId, bool isForChartSheet);
    private static void SerializeChartExFallBackContentForChartSheet(XmlWriter writer, string relationId);
    private void SerializeDataTable(XmlWriter writer, ChartImpl chart);
    private void SerializeDirectlyEntered(XmlWriter writer, Object[] values, bool isCache, string formatCode);
    private void SerializeDirectlyEntered(XmlWriter writer, Object[] values, bool isCache, string tagName, string formatCode);
    internal static string ToXmlString(object value);
    private void SerializeDataLabels(XmlWriter writer, ChartImpl parentChart, ChartDataPointsCollection chartDataPointsCollection);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.ChartSerializatorCommon : object {
    private static Dictionary`2<ExcelChartLinePattern, KeyValuePair`2<string, string>> s_dicLinePatterns;
    public static String[][] OuterAttributeArray;
    public static String[][] InnerAttributeArray;
    public static String[][] PerspectiveAttributeArray;
    public static String[][] BevelProperties;
    public static String[][] MaterialProperties;
    public static String[][] LightingProperties;
    private static ChartSerializatorCommon();
    public static void SerializeFrameFormat(XmlWriter writer, IChartFillBorder format, ChartImpl chart, bool isRoundCorners);
    public static void SerializeFrameFormat(XmlWriter writer, IChartFillBorder format, ChartImpl chart, bool isRoundCorners, bool serializeLineAutoValues);
    public static void SerializeFrameFormat(XmlWriter writer, IChartFillBorder format, FileDataHolder holder, RelationCollection relations, bool isRoundCorners, bool serilaizeLineAutoValues);
    public static void SerializeShadow(XmlWriter writer, IShadow shadow, bool CustomShadow);
    internal static void SerializeOtherEffectLstProperties(XmlWriter writer, IShadow shadow);
    public static void SerializeInner(XmlWriter writer, int inner, bool CustomShadow, IShadow Shadow);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use SerializeOuter(XmlWriter writer, int outer, bool CustomShadow, IShadow Shadow) method. Sorry for inconvenience.")]
public static void SerailizeOuter(XmlWriter writer, int outer, bool CustomShadow, IShadow Shadow);
    public static void SerializeOuter(XmlWriter writer, int outer, bool CustomShadow, IShadow Shadow);
    public static void SerializePerspective(XmlWriter writer, int perspective, bool CustomShadow, IShadow Shadow);
    public static void Serialize3D(XmlWriter writer, IThreeDFormat Three_D);
    public static void SerializeLight(XmlWriter writer, int light);
    public static void SerializeMaterial(XmlWriter writer, int material);
    public static void SerializeTopBevel(XmlWriter writer, int bevel);
    public static void SerializeTopBevel(XmlWriter writer, int bevel, int lineHeight, int lineWidth);
    public static void SerializeBottomBevel(XmlWriter writer, int bevel);
    public static void SerializeBottomBevel(XmlWriter writer, int bevel, int lineHeight, int lineWidth);
    internal static void SerializeFill(XmlWriter writer, IInternalFill fill, FileDataHolder holder, RelationCollection relations);
    public static void SerializeTextArea(XmlWriter writer, IChartTextArea textArea, WorkbookImpl book, RelationCollection relations, double defaultFontSize);
    public static void SerializeValueTag(XmlWriter writer, string tagName, string value);
    public static void SerializeDoubleValueTag(XmlWriter writer, string tagName, double value);
    public static void SerializeValueTag(XmlWriter writer, string tagName, string tagNamespace, string value);
    public static void SerializeDoubleValueTag(XmlWriter writer, string tagName, string tagNamespace, double value);
    public static void SerializeBoolValueTag(XmlWriter writer, string tagName, bool value);
    public static void SerializeLineProperties(XmlWriter writer, IChartBorder border, IWorkbook book);
    public static void SerializePatternFill(XmlWriter writer, ColorObject color, bool bAutoColor, string strDash2007, string strPreset, IWorkbook book, double Alphavalue);
    public static void SerializePatternFill(XmlWriter writer, ColorObject foreColor, bool isAutoFore, ColorObject backColor, bool isAutoBack, string strPreset, IWorkbook book, double Alphavalue);
    public static void SerializePatternFill(XmlWriter writer, ColorObject foreColor, bool isAutoFore, ColorObject backColor, bool isAutoBack, ExcelGradientPattern pattern, IWorkbook book);
    public static void SerializeSolidFill(XmlWriter writer, ColorObject color, bool isAutoColor, IWorkbook book, double alphavalue);
    internal static void SerializeSolidFill(XmlWriter writer, ColorObject color, bool isAutoColor, IWorkbook book, double alphavalue, ShapeLineFormatImpl shape);
    private static void SerializePreservedNode(XmlWriter xmlTextWriter, ShapeLineFormatImpl shape, string node);
    public static void SerializeRgbColor(XmlWriter writer, Color color);
    public static void SerializeRgbColor(XmlWriter writer, ExcelKnownColors colorIndex, IWorkbook book);
    public static void SerializeRgbColor(XmlWriter writer, Color color, double alphaValue);
    public static void SerializeRgbColor(XmlWriter writer, Color color, int alpha, int tint, int shade);
    private static void SerializeLineProperties(XmlWriter writer, IChartBorder border, bool bRoundCorners, IWorkbook book, bool serializeAutoFormat);
    private static void SerializeJoinType(XmlWriter writer, Excel2007BorderJoinType joinType);
    private static void SerializePictureFill(XmlWriter writer, Image image, FileDataHolder holder, RelationCollection relations, bool tile);
    private static void SerializePictureFill(XmlWriter writer, Image image, FileDataHolder holder, RelationCollection relations, IInternalFill fill);
    private static void SerializeTextureFill(XmlWriter writer, IFill fill, FileDataHolder holder, RelationCollection relations);
    internal static Image GetTexturePicture(ExcelTexture texture);
    private static void SerializeGradientFill(XmlWriter writer, IFill fill, IWorkbook book);
    private static bool HasSchemaColor(GradientStops stops);
    private void SerializeTextProperties(XmlWriter writer, IChartTextArea textArea);
    internal static void SerializeDefaultTextFormatting(XmlWriter writer, IFont textFormatting, IWorkbook book, double defaultFontSize, bool isAutoTextRotation, int rotationAngle, Excel2007TextRotation textRotation, string nameSpace, bool isChartExText, bool isEndParagraph);
    public static void SerializeTextAreaText(XmlWriter writer, IChartTextArea textArea, IWorkbook book, double defaultFontSize);
    public static void SerializeRichText(XmlWriter writer, IChartTextArea textArea, IWorkbook book, string tagName, double defaultFontSize);
    private static void SerializeBodyProperties(XmlWriter writer, IChartTextArea textArea);
    private static void SerializeListStyles(XmlWriter writer, IChartTextArea textArea);
    private static void SerializeParagraphs(XmlWriter writer, IChartTextArea textArea, IWorkbook book, double defaultFontSize);
    private static void Serialize_TextArea_RichTextParagraph(XmlWriter writer, IChartTextArea textArea, IWorkbook book, double defaultFontSize);
    private static void Serialize_TextArea_RichTextSeparateParagraph(XmlWriter writer, IChartTextArea textArea, IWorkbook book, double defaultFontSize, IInternalChartTextArea defaultParagaphProperties, int startRunProperty);
    private static void Serialize_DataLabel_RichTextParagraph(XmlWriter writer, IChartTextArea chartTextArea, IWorkbook book, double defaultFontSize);
    private static bool CheckSerializeFldElement(ChartDataLabelsImpl chartDataLabelsImpl, string text, String& fldElementType);
    private static void SerializeSingleParagraph(XmlWriter writer, IChartTextArea textArea, string paragraphText, IWorkbook book, double defaultFontSize);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use SerializeParagraphRunProperties(XmlWriter writer, IFont textArea, string mainTagName, IWorkbook book, double defaultFontSize) method. Sorry for inconvenience.")]
public static void SerializeParagraphRunProperites(XmlWriter writer, IFont textArea, string mainTagName, IWorkbook book, double defaultFontSize);
    public static void SerializeParagraphRunProperties(XmlWriter writer, IFont textArea, string mainTagName, IWorkbook book, double defaultFontSize);
    private static void SerializeStringReference(XmlWriter writer, IChartTextArea textArea, String[] strCache);
    public static void SerializeLayout(XmlWriter writer, object textArea);
    private static bool IsAutoManualLayout(IChartManualLayout manualLayout);
    public static void SerializeManualLayout(XmlWriter writer, IChartManualLayout manualLayout);
    public static void SerializeBottomBevel(XmlWriter writer, int lineHeight, int lineWidth);
    public static void SerializeTopBevel(XmlWriter writer, int lineHeight, int lineWidth);
    internal static MemoryStream SerializeRichTextStream(ChartTextAreaImpl textArea, IWorkbook book, double defaultFontSize);
}
internal interface Syncfusion.XlsIO.Implementation.XmlSerialization.Charts.IChartFillObjectGetter {
    public ChartBorderImpl Border { get; }
    public ChartInteriorImpl Interior { get; }
    public IInternalFill Fill { get; }
    public ShadowImpl Shadow { get; }
    public ThreeDFormatImpl ThreeD { get; }
    public abstract virtual ChartBorderImpl get_Border();
    public abstract virtual ChartInteriorImpl get_Interior();
    public abstract virtual IInternalFill get_Fill();
    public abstract virtual ShadowImpl get_Shadow();
    public abstract virtual ThreeDFormatImpl get_ThreeD();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.ChartConstants : object {
    public static string CNamespace;
    public static string SlicerNamespace;
    public static string CNamespace2007;
    public static string CNamespace2016;
    public static string CColorNamespace2013;
    public static string CStyleNamespace2013;
    internal static string ChartStyleNamespace;
    public static string Pivoturi;
    public static string Pivoturi16;
    public static string ChartPrefix2010;
    public static string ChartPrefix2016;
    public static string CategoryAxisTag;
    public static string ValueAxisTag;
    public static string SeriesAxisTag;
    public static string DateAxisTag;
    public static string ValueAttribute;
    public static int DefaultValueAxisId;
    public static int DefaultCategoryAxisId;
    public static int DefaultSeriesAxisId;
    public static int DefaultSecondaryCategoryAxisId;
    public static int DefaultSecondaryValueAxisId;
    public static string ScalingTag;
    public static string LogarithmicBaseTag;
    public static string MaximumTag;
    public static string MinimumTag;
    public static string AxisOrientationTag;
    public static string AxisIdTag;
    public static string MaxMinOrientation;
    public static string MinMaxOrientation;
    public static string AxisPositionTag;
    public static string AxisPosLeft;
    public static string AxisPosRight;
    public static string AxisPosTop;
    public static string AxisPosBottom;
    public static string MajorGridlinesTag;
    public static string MinorGridlinesTag;
    public static string NumberFormatTag;
    public static string FormatCodeAttribute;
    public static string SourceLinkedAttribute;
    public static string TickLabelPositionTag;
    public static string TickLabelHigh;
    public static string TickLabelLow;
    public static string TickLabelNextTo;
    public static string TickLabelNone;
    public static string MajorTickMarkTag;
    public static string MinorTickMarkTag;
    public static string TickMarkNone;
    public static string TickMarkInside;
    public static string TickMarkOutside;
    public static string TickMarkCross;
    public static string CrossAxisTag;
    public static string CrossBetweenTag;
    public static string BetweenValue;
    public static string CategoryMidpoint;
    public static string MajorUnitTag;
    public static string MinorUnitTag;
    public static string LabelOffsetTag;
    public static string TickLabelSkip;
    public static string TickMarkSkip;
    public static string NoMultiLvlLblTag;
    public static string BaseTimeUnitTag;
    public static string MajorTimeUnit;
    public static string MinorTimeUnit;
    public static string ChartTag;
    public static string PlotAreaTag;
    public static string BarDirectionTag;
    public static string BarDirectionBar;
    public static string BarDirectionColumn;
    public static string BarGroupingTag;
    public static string Clustered;
    public static string PercentStacked;
    public static string Stacked;
    public static string Standard;
    public static string VaryColorsTag;
    public static string SeriesTag;
    public static string IndexTag;
    public static string SeriesOrderTag;
    public static string SeriesValuesTag;
    public static string CategoryValuesTag;
    public static string NumberReferenceTag;
    public static string StringReferenceTag;
    public static string MultiLevelStringReferenceTag;
    public static string NumberCacheTag;
    public static string StringCacheTag;
    public static string MultiLevelStringCacheTag;
    public static string Formula;
    public static string ChartSpaceTag;
    public static string Area3DChartTag;
    public static string AreaChartTag;
    public static string BarChartTag;
    public static string Bar3DChartTag;
    public static string Line3DChartTag;
    public static string LineChartTag;
    public static string GapWidthTag;
    public static string GapDepthTag;
    public static string OverlapTag;
    public static string BarShapeCone;
    public static string BarShapeConeToMax;
    public static string BarShapePyramid;
    public static string BarShapePyramidToMax;
    public static string BarShapeCylinder;
    public static string BarShapeBox;
    public static string BarShapeTag;
    public static string BubbleChartTag;
    public static string Bubble3DTag;
    public static int BubbleScaleDefault;
    public static string BubbleScaleTag;
    public static string ShowNegativeBubbles;
    public static string BubbleSizeArea;
    public static string BubbleSizeWidth;
    public static string BubbleSizeRepresents;
    public static string SurfaceChartTag;
    public static string Surface3DChartTag;
    public static string WireframeTag;
    public static string BandFormats;
    public static string RadarChartTag;
    public static string RadarStyleTag;
    public static string ScatterChartTag;
    public static string ScatterStyleTag;
    public static string PieChartTag;
    public static string Pie3DChartTag;
    public static string FirstSliceAngleTag;
    public static string DoughnutChartTag;
    public static string DoughnutHoleSizeTag;
    public static string OfPieChartTag;
    public static string OfPieTypePie;
    public static string OfPieTypeBar;
    public static string OfPieTypeTag;
    public static string SplitPosTag;
    public static string SecondPieSizeTag;
    public static string SplitTypeTag;
    public static string StockChartTag;
    public static string DataLabelsTag;
    public static string DataLabelPosTag;
    public static string ShowValueTag;
    public static string ShowCategoryTag;
    public static string ShowPercentageTag;
    public static string ShowBubbleSizeTag;
    public static string ShowSeriesNameTag;
    public static string ShowLegendKeyTag;
    public static string ShowLeaderLineTag;
    internal static string ShowDataLabelsRangeTag;
    internal static string DataLabelsRangeTag;
    internal static string DataLabelRangeCacheTag;
    internal static string CellRangeTag;
    internal static string IntervallocelleTag;
    internal static string SeriesNameTag;
    internal static string ValueTag;
    internal static string WertTag;
    internal static string CategoryNameTag;
    internal static string PercentageTag;
    internal static string CatetoryXaxisTag;
    internal static string ValueYaxisTag;
    public static string DataLabelsSeparatorTag;
    public static string MarkerTag;
    public static string MarkerStyleTag;
    public static string MarkerSizeTag;
    public static string FloorTag;
    public static string BackWallTag;
    public static string SideWallTag;
    public static string TitleTag;
    public static string TrendlineTag;
    public static string TrendlineNameTag;
    public static string TrendlineTypeTag;
    public static string TrendlineOrderTag;
    public static string TrendlinePeriodTag;
    public static string TrendlineForwardTag;
    public static string TrendlineBackwardTag;
    public static string TrendlineIntercept;
    public static string DisplayRSquared;
    public static string DisplayEquation;
    public static string ErrorBarsTag;
    public static string ErrorBarTypeTag;
    public static string ErrorBarValueType;
    public static string ErrorBarsNoCap;
    public static string ErrorBarValueTag;
    public static string ErrorBarPlusTag;
    public static string ErrorBarMinusTag;
    public static string ErrorBarX;
    public static string ErrorBarY;
    public static string ErrorBarDirection;
    public static string View3DTag;
    public static string RotationXTag;
    public static string HeightPercentTag;
    public static string RotationYTag;
    public static string RightAngleAxesTag;
    public static string PerspectiveTag;
    public static string DepthPercentTag;
    public static string LegendTag;
    public static string LegendPositionTag;
    public static string OverlayTag;
    public static string LegendEntryTag;
    public static string DeleteTag;
    public static string DisplayBlanksAsTag;
    public static string PlotVisibleOnlyTag;
    public static string PageMarginsTag;
    public static string LeftMargin;
    public static string RightMargin;
    public static string TopMargin;
    public static string BottomMargin;
    public static string HeaderMargin;
    public static string FooterMargin;
    public static string UpDownBarsTag;
    public static string UpBarsTag;
    public static string DownBarsTag;
    public static string ChartTextTag;
    public static string RichTextTag;
    public static string ChartsheetTag;
    public static string CPrefix;
    public static string UnderlineSingle;
    public static string UnderlineDouble;
    public static string StrikeThroughSingle;
    public static string StrikeThroughDouble;
    public static string StrikeThroughNone;
    public static string CrossesTag;
    public static string CrossesAtTag;
    public static string CrossesAutoZero;
    public static string CrossesMaximum;
    public static string XValues;
    public static string YValues;
    public static string BubbleSize;
    public static string PieExplosionTag;
    public static string SeriesLinesTag;
    public static string SmoothTag;
    public static string TrendlineLabelTag;
    public static string SeriesTextTag;
    public static string TextValueTag;
    public static string HiLowLinesTag;
    public static string LayoutTag;
    public static string ManualLayoutTag;
    public static string LayoutTargetTag;
    public static string LeftModeTag;
    public static string TopModeTag;
    public static string LeftTag;
    public static string TopTag;
    public static string dXTag;
    public static string dYTag;
    public static string WidthModeTag;
    public static string HeightModeTag;
    public static string WidthTag;
    public static string HeightTag;
    public static string DataPointTag;
    public static string DataLabelTag;
    public static string LogBaseTag;
    public static int LogBaseDefault;
    public static string DisplayUnitsTag;
    public static string BuiltInUnitTag;
    public static string CustomUnitTag;
    public static string DataTableTag;
    public static string ShowHorizontalBorder;
    public static string ShowVerticalBorder;
    public static string ShowOutline;
    public static string ShowSeriesKeys;
    public static string DropLinesTag;
    public static string TextPropertiesTag;
    public static string AutoCategoryAxis;
    public static string RoundedCornersTag;
    public static string ChartStyleTag;
    public static string UserShapesTag;
    public static string RelativeSizeAnchorTag;
    public static string XTagName;
    public static string YTagName;
    public static double CoordinatesMultiplyer;
    public static string NumberLiteral;
    public static string StringLiteral;
    public static string PointCount;
    public static string NumericPoint;
    public static string InvertIfNegative;
    public static string NumbericValue;
    public static string PivotSourceTag;
    public static string PivotFormats;
    public static string DisplayUnitsLabel;
    public static string ZoomToFit;
    public static string LabelAlignment;
    public static string PrintSettings;
    public static int TransparencyValue;
    public static int SizeValue;
    public static int BlurValue;
    public static int Anglevalue;
    public static int DistanceValue;
    public static int BevelValue;
    public static string PivotOptionsTag;
    public static string PivotOptionsTag16;
    public static string ShowZoneFilterTag;
    public static string ShowZoneCategoryTag;
    public static string ShowExpandCollapseTag16;
    public static string ShowZoneDataTag;
    public static string ShowZoneSeriesTag;
    public static string ShowZoneVisibleTag;
    public static string PivotSourceNameTag;
    public static string ChartFormatId;
    public static string AlternateContentTag;
    public static string AutoTitleDeletedTag;
    public static string StandardFormatAttribute;
    public static string formulareference;
    public static string SqureReference;
    public static string fullReference;
    public static string c15tag;
    public static string c14tag;
    public static string xml15web;
    public static string xml14web;
    public static string Filterseriesuri;
    public static string InvertSolidFillFmtUri;
    public static string FilteredAreaSeries;
    public static string Filterbarseries;
    public static string FilteredLineSeries;
    public static string FilteredPieSeries;
    public static string FilteredRadarSeries;
    public static string FilteredScatterSeries;
    public static string FilteredSurfaceSeries;
    public static string FilteredBubbleSeries;
    public static string FilteredSeriesTitle;
    public static string FilteredCategoryTitle;
    public static string InvertSolidFillFmt;
    internal static string ColorMapOverrideTag;
    internal static string ExtentionList;
    internal static string Extenstion;
    internal static string LeaderLines;
    internal static string ShowDataLablesOverMax;
    internal static string DataDisplayOptions16;
    internal static string DisplayNaAsBlank;
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.ChartExConstants : object {
    internal static string CXNamespace;
    internal static string CXPrefix;
    internal static string CX1Prefix;
    internal static string SampleChartEx1NameSpace;
    internal static string ChartDataTag;
    internal static string DataTag;
    internal static string TextDataTag;
    internal static string ValueTag;
    internal static string PositionTag;
    internal static string AlignTag;
    internal static string PlotAreaRegionTag;
    internal static string AxisTag;
    internal static string SeriesTag;
    internal static string PlotSurfaceTag;
    internal static string DataPointTag;
    internal static string DataLabelsTag;
    internal static string DataLabelTag;
    internal static string DataIdTag;
    internal static string LayoutPropertiesTag;
    internal static string AxisIdTag;
    internal static string DataLabelPositionTag;
    internal static string DataLabelHiddenTag;
    internal static string VisibilityTag;
    internal static string SeriesNameAttributeTag;
    internal static string CategoryNameAttributeTag;
    internal static string ValueAttributeTag;
    internal static string LayoutIdAttribute;
    internal static string HiddenAttribute;
    internal static string OwnerIndexAttribute;
    internal static string UniqueIdAttribute;
    internal static string FormatIndexAttribute;
    internal static string ParentLabelLayoutTag;
    internal static string AggregationTag;
    internal static string BinningTag;
    internal static string StatisticsTag;
    internal static string SubtotalsTag;
    internal static string ConnectorLinesAttribute;
    internal static string MeanLineAttribute;
    internal static string MeanMarkersAttribute;
    internal static string NonOutliersAttribute;
    internal static string OutliersAttribute;
    internal static string IntervalClosedAttribute;
    internal static string UnderFlowBinAttribute;
    internal static string OverflowBinAttribute;
    internal static string BinSizeElement;
    internal static string BinCountElement;
    internal static string QuartileMethodAttribute;
    internal static string ExclusiveValue;
    internal static string InclusiveValue;
    internal static string CategoryAxisScalingTag;
    internal static string ValueAxisScalingTag;
    internal static string IndexAttribute;
    internal static string AutomaticValueString;
    internal static string DisplayUnitsTag;
    internal static string MajorTickMarksTag;
    internal static string MinorTickMarksTag;
    internal static string TickLabelsTag;
    internal static string TypeAttribute;
    internal static string DisplayUnitLabelTag;
    internal static string DisplayUnitAttributeTag;
    internal static string ExternalDataTag;
    internal static string AutoUpdateAttributeTag;
    internal static string NumericDimensionElement;
    internal static string StringDimensionElement;
    internal static string LevelElement;
    internal static string DirectionAttribute;
    internal static string ColumnDirectionValue;
    internal static string RowDirectionValue;
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.ChartPageSetupConstants : object {
    private bool m_isChartEx;
    public string PageMarginsTag { get; }
    public string LeftMargin { get; }
    public string RightMargin { get; }
    public string TopMargin { get; }
    public string BottomMargin { get; }
    public string HeaderMargin { get; }
    public string FooterMargin { get; }
    public string Namespace { get; }
    internal ChartPageSetupConstants(bool value);
    public sealed virtual string get_PageMarginsTag();
    public sealed virtual string get_LeftMargin();
    public sealed virtual string get_RightMargin();
    public sealed virtual string get_TopMargin();
    public sealed virtual string get_BottomMargin();
    public sealed virtual string get_HeaderMargin();
    public sealed virtual string get_FooterMargin();
    public sealed virtual string get_Namespace();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.DocProp : object {
    public static string CorePropertiesTagName;
    public static string CategoryTagName;
    public static string CreatedTagName;
    public static string CreatorTagName;
    public static string DescriptionTagName;
    public static string KeywordsTagName;
    public static string LastModifiedByTagName;
    public static string LastPrintedTagName;
    public static string ModifiedTagName;
    public static string SubjectTagName;
    public static string TitleTagName;
    public static string XsiTypeAttributeName;
    public static string XsiTypeAttributeValue;
    public static string DateTimeFormatStructure;
    public static string ApplicationSpecificFilePropertiesTagName;
    public static string ApplicationNameTagName;
    public static string TotalNumberOfCharacters;
    public static string NameOfCompanyTagName;
    public static string HeadingPairsTagName;
    public static string EssentialXlsIO;
    public static string NumberOfLinesTagName;
    public static string NameOfManagerTagName;
    public static string TotalNumberOfMultimediaClipsTagName;
    public static string NumberOfSlidesContainingNotesTagName;
    public static string TotalNumberOfPagesTagName;
    public static string TotalNumberOfParagraphsTagName;
    public static string IntendedFormatOfPresentationTagName;
    public static string SlidesMetadataElementTagName;
    public static string NameOfDocumentTemplateTagName;
    public static string TotalEditTimeMetadataElementTagName;
    public static string WordCountTagName;
    public static string RelativeHyperlinkBaseTagName;
    public static string RelativeHyperlinkExcel97Name;
    public static string HyperlinksPropertyExcel97Name;
    public static string CustomFilePropertiesTagName;
    public static string CustomFilePropertyTagName;
    public static string FormatIDAttributeName;
    public static string PropertyIDAttributeName;
    public static string NameAttributeName;
    public static string BooleanVarianYype;
    public static string LPWSTRVariantType;
    public static string LPSTRVariantType;
    public static string DateAndTimeVariantType;
    public static string FourByteSignedIntegerVariantType;
    public static string EightByteRealNumberVariantType;
    public static string IntegerVariantType;
    public static string FileTimeVariantType;
    public static string AppVersion;
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.ExternalLinks : object {
    public static string Namespace;
    public static string ExternalLinkTag;
    public static string ExternalBookTag;
    public static string SheetNamesTag;
    public static string SheetNameTag;
    public static string ExternalReferencesTag;
    public static string ExternalReferenceTag;
    public static string ExternalSheetNameAttribute;
    public static string SheetDataSetTag;
    public static string DefinedNamesTag;
    public static string DefinedNameTag;
    public static string NameAttribute;
    public static string DdeService;
    public static string DdeTopic;
    public static string RefersToAttribute;
    public static string SheetIdAttribute;
    public static string CellTag;
    public static string OleLink;
    public static string DdeLink;
    public static string OleItems;
    public static string OleItem;
    public static string DdeItems;
    public static string DdeItem;
    public static string IconAttribute;
    public static string AdviseAttribute;
    public static string OleAttribute;
    public static string PreferPictureAttribute;
}
public interface Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.IPageSetupConstantsProvider {
    public string PageMarginsTag { get; }
    public string LeftMargin { get; }
    public string RightMargin { get; }
    public string TopMargin { get; }
    public string BottomMargin { get; }
    public string HeaderMargin { get; }
    public string FooterMargin { get; }
    public string Namespace { get; }
    public abstract virtual string get_PageMarginsTag();
    public abstract virtual string get_LeftMargin();
    public abstract virtual string get_RightMargin();
    public abstract virtual string get_TopMargin();
    public abstract virtual string get_BottomMargin();
    public abstract virtual string get_HeaderMargin();
    public abstract virtual string get_FooterMargin();
    public abstract virtual string get_Namespace();
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.ListObjects : object {
    public static string TableParts;
    public static string TablePart;
    public static string Table;
    public static string IdAttribute;
    public static string NameAttribute;
    public static string DisplayName;
    public static string Reference;
    public static string AutoFilter;
    public static string TableStyleInfo;
    public static string TableColumns;
    public static string TableColumn;
    public static string TotalsRowCount;
    public static string TotalsRowLabel;
    public static string TotalsRowFunction;
    public static string ShowRowStripes;
    public static string ShowColumnStripes;
    public static string TotalsRowShown;
    internal static string DataDxfId;
    internal static string HeaderRowBorderDxfId;
    internal static string HeaderRowDxfId;
    internal static string TableBorderDxfId;
    internal static string TotalsRowBorderDxfId;
    internal static string TotalsRowDxfId;
    internal static string InsertRowShift;
    public static string ShowFirstColumn;
    public static string ShowLastColumn;
    public static string ShowHeaderRow;
    public static string UniqueName;
    public static string QueryTableFieldId;
    public static string TableType;
    public static string QueryTable;
    public static string QueryTableRefresh;
    public static string NextId;
    public static string UnboundColumnsLeft;
    public static string UnboundColumnsRight;
    public static string QueryTableFields;
    public static string Count;
    public static string TableColumnId;
    public static string QueryTableField;
    public static string DataBound;
    public static string ConnectionId;
    public static string RefreshOnLoad;
    public static string InsertRow;
    public static string DisableRefresh;
    public static string AdjustColumnWidth;
    internal static string XmlColumnPr;
    internal static string MapId;
    internal static string Xpath;
    internal static string XmlDataType;
    internal static string arrayFormula;
    internal static string CarriageReturn;
    internal static string LineFeed;
    internal static string AlternativeText;
    internal static string AlternativeTextSummary;
    internal static string TableExtensionUri;
    internal static string preserveSortFilterLayout;
    internal static string GrowShrinkType;
    internal static string TabUnicode;
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.PageSetup : object {
    public static string PrintOptionsTag;
    public static string GridLines;
    public static string GridLinesSet;
    public static string Headings;
    public static string HorizontalCentered;
    public static string VerticalCentered;
    public static string PageMarginsTag;
    public static string BottomMargin;
    public static string FooterMargin;
    public static string HeaderMargin;
    public static string LeftMargin;
    public static string RightMargin;
    public static string TopMargin;
    public static string PageSetupTag;
    public static string BlackAndWhite;
    public static string CellComments;
    public static string Copies;
    public static string Draft;
    public static string Errors;
    public static string FirstPageNumber;
    public static string FitToHeight;
    public static string FitToWidth;
    public static string HorizontalDpi;
    public static string Id;
    public static string Orientation;
    public static string PageOrder;
    public static string PaperSize;
    public static string Scale;
    public static string UseFirstPageNumber;
    public static string UsePrinterDefaults;
    public static string VerticalDpi;
    public static string CommentAsDisplayed;
    public static string CommentNone;
    public static string CommentAtEnd;
    public static string ErrorsBlank;
    public static string ErrorsDash;
    public static string ErrorsDisplayed;
    public static string ErrorsNA;
    public static string HeaderFooterTag;
    public static string OddHeaderTag;
    public static string OddFooterTag;
    public static string ScaleWithDocTag;
    public static string AlignWithMarginsTag;
    public static string DifferentOddEvenTag;
    public static string DifferentFirst;
    internal static string EvenHeaderTag;
    internal static string EvenFooterTag;
    internal static string FirstHeaderTag;
    internal static string FirstFooterTag;
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.Pane : object {
    public static string TagName;
    public static string XSplit;
    public static string YSplit;
    public static string TopLeftCell;
    public static string Active;
    public static string State;
    public static string StateFrozen;
    public static string StateFrozenSplit;
    public static string StateSplit;
    public static string Selection;
    public static string ActiveCell;
    public static string Sqref;
    public static Dictionary`2<string, ActivePane> PaneStrings;
    private static Pane();
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.PivotTable : object {
    public static string RefreshOnLoad;
    public static string RefreshedBy;
    public static string RefreshedDate;
    public static string CreatedVersion;
    public static string RefreshedVersion;
    public static string MinRefreshableVersion;
    public static string RecordCount;
    public static string CacheSource;
    public static string TypeAttribute;
    public static string ConsolidationTypeValue;
    public static string ExternalTypeValue;
    public static string ScenarioTypeValue;
    public static string WorksheetSourceType;
    public static string WorksheetSource;
    public static string ReferenceAddress;
    public static string SheetAttribute;
    public static string CacheFields;
    public static string CountAttribute;
    public static string CacheField;
    public static string NameAttribute;
    public static string PivotTableDefinition;
    public static string PivotCachesTag;
    public static string PivotCacheTag;
    public static string PivotCacheId;
    internal static string CachePivotId;
    public static string ApplyNumberFormats;
    public static string ApplyBorderFormats;
    public static string ApplyFontFormats;
    public static string ApplyPatternFormats;
    public static string ApplyAlignmentFormats;
    public static string ApplyWidthHeightFormats;
    public static string DataCaption;
    public static string UpdatedVersion;
    public static string ShowCalcMbrs;
    public static string UseAutoFormatting;
    public static string ItemPrintTitles;
    public static string Indent;
    public static string Outline;
    public static string OutlineData;
    public static string MultipleFieldFilters;
    public static string PivotFields;
    public static string PivotField;
    internal static string FillDownLabelsTag;
    internal static string IgnoreTag;
    public static string ShowAllAttribute;
    public static string Location;
    public static string FirstHeaderRow;
    public static string FirstDataRow;
    public static string FirstDataColumn;
    public static string PivotCacheDefinition;
    public static string RowFields;
    public static string RowItems;
    public static string ColumnFields;
    public static string ColumnItems;
    public static string NumberFormatAttribute;
    public static string StyleInfo;
    public static string ShowRowHeaders;
    public static string ShowColumnHeaders;
    public static string ShowRowStripes;
    public static string ShowColumnStripes;
    public static string ShowLastColumn;
    public static string ColumnGrandTotal;
    public static string RowGrandTotal;
    public static string ShowDrill;
    public static string SharedItems;
    public static string ContainsMixedTypes;
    public static string ContainsSemiMixedTypes;
    public static string ContainsString;
    public static string ContainsNumber;
    public static string ContainsInteger;
    public static string ContainsDate;
    public static string ContainsNonDate;
    public static string ContainsBlank;
    public static string LongText;
    public static string ShowHeaders;
    public static string Field;
    public static string IndexAttribute;
    public static string Item;
    public static string GrandTotalAttribute;
    public static string RowLabels;
    public static string RepeatItemsCount;
    public static string DefaultConst;
    public static string ValueItem;
    public static string DataFields;
    public static string DataField;
    public static string CacheFieldIndex;
    public static string BaseField;
    public static string BaseItem;
    public static string Subtotal;
    public static string ShowDataAs;
    public static string PivotShowAs;
    public static string SubTotalCaption;
    public static string AxisAttribute;
    public static string DataFieldAttribute;
    public static string FieldItems;
    public static string FieldItem;
    public static string FieldSummaryTypeAttibute;
    public static string FieldSummaryDefault;
    public static string PivotCacheRecords;
    public static string PivotCacheRecord;
    public static string NumberTag;
    public static string StringTag;
    public static string EmptyTag;
    public static string DateTag;
    public static string BooleanTag;
    public static string DateTimeFormat;
    public static string ValueAttribute;
    public static string AverageSubtotal;
    public static string CountASubtotal;
    public static string CountSubtotal;
    public static string MaxSubtotal;
    public static string MinSubtotal;
    public static string ProductSubtotal;
    public static string StdDevPSubtotal;
    public static string StdDevSubtotal;
    public static string SumSubtotal;
    public static string VarPSubtotal;
    public static string VarSubtotal;
    public static string DefaultSubtotal;
    public static string PageFields;
    public static string PageField;
    public static string FieldAttribute;
    internal static string SubtotalTop;
    public static string BackgroundQueryAttribute;
    public static string EnableRefreshAttribute;
    public static string InvalidAttribute;
    public static string OptimizeMemoryAttribute;
    public static string SaveDataAttribute;
    public static string SupportAdvancedDrillAttribute;
    public static string SupportSubQueryAttribute;
    public static string UpgradeOnRefreshAttribute;
    public static string DatabaseFieldAttribute;
    public static string FormulaAttribute;
    public static string FieldGroupElement;
    public static string AsteriskTotalAttribute;
    public static string ColumnHeaderCaption;
    public static string Compact;
    public static string CompactData;
    public static string CustomListSort;
    public static string DataOnRows;
    public static string DataPosition;
    public static string DisableFieldList;
    public static string AllowEditData;
    public static string EnableDrillDown;
    public static string EnableFieldProerties;
    public static string EnableWizard;
    public static string ErrorCaption;
    public static string DefaultAutoSort;
    public static string Caption;
    public static string ColumnsPerPage;
    public static string RowsPerPage;
    public static string ChildItemsAttribute;
    public static string ExpandAttribute;
    public static string DrillAcrossAtribute;
    public static string CalculatedMemberAttribute;
    public static string HiddenAttribute;
    public static string ItemCaptionAttribute;
    public static string CharAttribute;
    public static string HideDetailAttribute;
    public static string MissingAttribute;
    public static string ItemTypeAttribute;
    public static string BaseFieldAttribute;
    public static string ParentFieldAttribute;
    public static string DiscretePrElement;
    public static string GroupItemsElement;
    public static string RangePrElement;
    public static string AutoEndAttribute;
    public static string AutoStartAttribute;
    public static string EndDateAttribute;
    public static string EndNumberAttribute;
    public static string GroupByAttribute;
    public static string GroupIntervalAttribute;
    public static string StartDateAttribute;
    public static string StartNumAttribute;
    public static string AutoShowAttribute;
    public static string DragOffAttribute;
    public static string DragToColAttribute;
    public static string DragToData;
    public static string DragToPage;
    public static string DragToRow;
    public static string HideNewItemAttribute;
    public static string IncludeNewItemFilter;
    public static string InsertBlankRow;
    public static string InsertPageBreak;
    public static string ItemsPerPage;
    public static string MeasureFilterAttribute;
    public static string MultiItemSelction;
    public static string ShowDropDownAttribute;
    public static string ShowPropAsCaption;
    public static string ShowPropToolTip;
    public static string SortTypeAttribute;
    public static string UniqueMemberProperty;
    public static string CalculatedItems;
    public static string CalculatedItem;
    public static string References;
    public static string Reference;
    public static string CacheIndex;
    public static string ColumnGrand;
    public static string DataOnly;
    public static string FieldPosition;
    public static string RowGrand;
    public static string LableOnly;
    internal static string CollapsedLevelsAreSubtotals;
    public static string Offset;
    public static string ReferByPosition;
    public static string ReferByRelative;
    public static string Selected;
    public static string PivotAreaTag;
    public static string PivotAreaTypeAttribute;
    public static string ConditionalFormats;
    public static string ConditionalFormat;
    public static string ShowGridDropZone;
    public static string PageOverThenDown;
    public static string ShowError;
    public static string MissingCapiton;
    public static string ShowMissing;
    public static string PreserveFormatting;
    public static string ShowDataTips;
    public static string FieldPrintTitles;
    public static string MergeItem;
    public static string PageWrap;
    public static string Filters;
    public static string Description;
    public static string EvalOrderAttribute;
    public static string MeasureFldAttribute;
    public static string MeasureHierAttribute;
    public static string HiddenButtonAttribute;
    public static string ShowButtonAttribute;
    public static string AutoFilterElement;
    public static string FilterColumnElement;
    public static string OperatorAttribute;
    public static string Value1;
    public static string ColumnIdAttribute;
    public static string Value2;
    public static string PivotFilterId;
    public static string CustomFiltersElement;
    public static string CustomFilterElement;
    public static string AndAttributeName;
    public static string ValAttibuteName;
    public static string BlankAttributeName;
    public static string FilterValueAttributeName;
    public static string PercentAttributeName;
    public static string TopAttributeName;
    public static string Top10FilterElement;
    internal static string DynamicFilterElement;
    public static string Filter;
    public static string CustomFormats;
    internal static string CustomFormat;
    public static string ChartFormats;
    public static string RowHeaderCaption;
    public static string AutoSortScope;
    public static string ErrorTag;
    public static string CacheHierarchies;
    public static string PivotOLAPKPIs;
    public static string OLAPDimensions;
    public static string OLAPMeasureGroups;
    public static string OLAPMaps;
    public static string PivotHierarchies;
    public static string RowHierarchiesUsage;
    internal static string ColHierarchiesUsage;
    public static string FieldItemCaption;
    public static string HierarchyAttribute;
    public static string HierarchyLevel;
    public static string FieldCaption;
    public static string DataSourceSort;
    public static string DefaultAttributeDrillState;
    public static string AllDrilled;
    public static string MissingItemsLimit;
    public static string PageFieldHierarchyLevel;
    public static string MemberPropertyFieldAttribute;
    public static string GrandTotalCaption;
    public static string TupleCacheAttribute;
    internal static string SelectedAttribute;
    internal static string pivotslicercacheAttribute;
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.Protection : object {
    public static string SheetProtectionTag;
    public static string PasswordAttribute;
    public static string ContentAttribute;
    public static string ObjectsAttribute;
    public static string ScenariosAttribute;
    public static string FormatCellsAttribute;
    public static string FormatColumnsAttribute;
    public static string FormatRowsAttribute;
    public static string InsertColumnsAttribute;
    public static string InsertRowsAttribute;
    public static string InsertHyperlinksAttribute;
    public static string DeleteColumnsAttribute;
    public static string DeleteRowsAttribute;
    public static string SelectLockedCells;
    public static string SortAttribute;
    public static string AutoFilterAttribute;
    public static string SelectUnlockedCells;
    public static string PivotTablesAttribute;
    public static string SheetAttribute;
    public static string AlgorithmName;
    public static string HashValue;
    public static string SpinCount;
    public static string SaltValue;
    public static string WorkbookAlgorithmName;
    public static string WorkbookHashValue;
    public static string WorkbookSpinCount;
    public static string WorkbookSaltValue;
    internal static string UserName;
    public static String[] ChartProtectionAttributes;
    public static Boolean[] ChartDefaultValues;
    public static String[] ProtectionAttributes;
    public static ExcelSheetProtection[] ProtectionFlags;
    public static Boolean[] DefaultValues;
    public static string WorkbookProtectionTag;
    public static string LockStructureTag;
    public static string LockWindowsTag;
    public static string WorkbookPassword;
    private static Protection();
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.StyleConstants : object {
    internal static string ChartStyleTag;
    internal static string ColorStyleTag;
    internal static string LineReferenceTag;
    internal static string LineWidthScaleTag;
    internal static string FillReferenceTag;
    internal static string EffectReferenceTag;
    internal static string FontReferenceTag;
    internal static string ShapePropertiesTag;
    internal static string DefaultRunPropertiesTag;
    internal static string BodyPropertiesTag;
    internal static string IndexAttribute;
    internal static string ModsAttribute;
    internal static string Accent1String;
    internal static string Accent2String;
    internal static string Accent3String;
    internal static string Accent4String;
    internal static string Accent5String;
    internal static string Accent6String;
    internal static string Bg1String;
    internal static string Bg2String;
    internal static string Dk1String;
    internal static string Dk2String;
    internal static string folHlinkString;
    internal static string hLinkString;
    internal static string Lt1String;
    internal static string Lt2String;
    internal static string PhClrString;
    internal static string Tx1String;
    internal static string Tx2String;
    internal static string ColorStyleVariationTag;
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Constants.WorksheetPageSetupConstants : object {
    public string PageMarginsTag { get; }
    public string LeftMargin { get; }
    public string RightMargin { get; }
    public string TopMargin { get; }
    public string BottomMargin { get; }
    public string HeaderMargin { get; }
    public string FooterMargin { get; }
    public string Namespace { get; }
    public sealed virtual string get_PageMarginsTag();
    public sealed virtual string get_LeftMargin();
    public sealed virtual string get_RightMargin();
    public sealed virtual string get_TopMargin();
    public sealed virtual string get_BottomMargin();
    public sealed virtual string get_HeaderMargin();
    public sealed virtual string get_FooterMargin();
    public sealed virtual string get_Namespace();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.ContentTypes : object {
    public static string Bitmap;
    public static string Jpeg;
    public static string Png;
    public static string Emf;
    public static string Gif;
    internal static string Svg;
    public static string Xml;
    public static string Relations;
    public static string Workbook;
    public static string MacroWorkbook;
    public static string MacroTemplate;
    public static string Template;
    public static string CalcChain;
    public static string Worksheet;
    public static string Chartsheet;
    public static string Dialogsheet;
    internal static string Macrosheet;
    internal static string IntlMacrosheet;
    internal static string Person;
    internal static string MetaData;
    public static string SharedStrings;
    public static string Styles;
    public static string Vml;
    public static string Comments;
    internal static string ThreadedComments;
    public static string Drawings;
    public static string ChartDrawings;
    public static string CoreProperties;
    public static string ExtendedProperties;
    public static string CustomProperties;
    public static string ExternLink;
    public static string Chart;
    internal static string ChartEx;
    public static string WorksheeetCustomProperty;
    public static string PivotTable;
    public static string PivotCacheDefinition;
    public static string PivotCacheRecords;
    public static string Table;
    internal static string Slicer;
    internal static string SlicerCache;
    public static string CustomXmlProperties;
    public static string Connections;
    public static string QueryTable;
    public static string Tiff;
    internal static string ChartStyles;
    internal static string ChartColorStyles;
    internal static string VbaProject;
    internal static string BinWorksheet;
    internal static string BinStyles;
    internal static string BinSST;
    internal static string Bin;
}
[XmlSerializatorAttribute("1")]
public class Syncfusion.XlsIO.Implementation.XmlSerialization.DLSXmlSerializator : object {
    private static string DEF_DLS_START;
    private static string DEF_PROTECTION_ATTRIBUTE;
    private static string DEF_PROTECTION_VALUE;
    private static string DEF_STYLES_START;
    private static string DEF_STYLE_START;
    private static string DEF_ID_ATTRIBUTE;
    private static string DEF_NAME_ATTRIBUTE;
    private static string DEF_TYPE_ATTRIBUTE;
    private static string DEF_SECTIONS_START;
    private static string DEF_SECTION_START;
    private static string DEF_BREAK_CODE_ATTRIBUTE;
    private static string DEF_PARAGRAPHS_START;
    private static string DEF_PARAGRAPH_START;
    private static string DEF_ITEMS_START;
    private static string DEF_ITEM_START;
    private static string DEF_ROWS_START;
    private static string DEF_ROW_START;
    private static string DEF_CELLS_START;
    private static string DEF_CELL_START;
    private static string DEF_WIDTH_ATTRIBUTE;
    private static string DEF_TEXT_RANGE_ATTRIBUTE;
    private static string DEF_TEXT_START;
    private static string DEF_COLUMNS_COUNT_ATTRIBUTE;
    private static string DEF_FORMAT_START;
    private static string DEF_FONT_NAME_ATTRIBUTE;
    private static string DEF_FONT_SIZE_ATTRIBUTE;
    private static string DEF_BOLD_ATTRIBUTE;
    private static string DEF_ITALIC_ATTRIBUTE;
    private static string DEF_UNDERLINE_ATTRIBUTE;
    private static string DEF_TEXT_COLOR_ATTRIBUTE;
    private static string DEF_COLOR_PREFIX;
    private static string DEF_UNDERLINE_NONE;
    private static string DEF_UNDERLINE_SINGLE;
    private static string DEF_UNDERLINE_DOUBLE;
    private static string DEF_SUBCRIPT;
    private static string DEF_SUPSCRIPT;
    private static string DEF_NO_SUBSUPERSCIRPT;
    private static string DEF_SUBSUPERSCRIPT_ATTRIBUTE;
    private static string DEF_STRIKEOUT_ATTRIBUTE;
    private static string DEF_TRUE_STRING;
    private static string DEF_TABLE_FORMAT_START;
    private static string DEF_CHARACTER_FORMAT_START;
    private static string DEF_BORDERS_START;
    private static string DEF_BORDER_START;
    private static string DEF_COLOR_ATTRIBUTE;
    private static string DEF_LINE_WIDTH_ATTRIBUTE;
    private static string DEF_BORDER_TYPE_ATTRIBUTE;
    private static string DEF_BORDER_WIDTH_NONE;
    private static string DEF_BORDER_TYPE_SIGNLE;
    private static string DEF_BORDER_TYPE_DOUBLE;
    private static string DEF_BORDER_TYPE_DOT;
    private static string DEF_BORDER_TYPE_DASH_SMALL;
    private static string DEF_BORDER_TYPE_DOT_DASH;
    private static string DEF_BORDER_TYPE_DOT_DOT_DASH;
    private static string DEF_BORDER_TYPE_THICK;
    private static string DEF_BORDER_TYPE_NONE;
    private static string DEF_PAGE_SETTINGS_START;
    private static string DEF_PAGE_HEIGHT_ATTRIBUTE;
    private static string DEF_PAGE_WIDTH_ATTRIBUTE;
    private static string DEF_FOOTER_DISTANCE_ATTRIBUTE;
    private static string DEF_HEADER_DISTANCE_ATTRIBUTE;
    private static string DEF_TOP_MARGIN_ATTRIBUTE;
    private static string DEF_BOTTOM_MARGIN_ATTRIBUTE;
    private static string DEF_LEFT_MARGIN_ATTRIBUTE;
    private static string DEF_RIGHT_MARGIN_ATTRIBUTE;
    private static string DEF_PAGE_BREAK_AFTER_ATTRIBUTE;
    private static string DEF_ORIENTATION_ATTRIBUTE;
    private static string DEF_PARAGRAPH_FORMAT_START;
    private static string DEF_HEADERS_FOOTERS_START;
    private static string DEF_ITEM_TYPE_TABLE;
    private static string DEF_EVEN_FOOTER_START;
    private static string DEF_ODD_FOOTER_START;
    private static string DEF_EVEN_HEADER_START;
    private static string DEF_ODD_HEADER_START;
    private static string DEF_ROW_HEIGHT_ATTRIBUTE;
    private static string DEF_TABLE_SHADOW_COLOR_ATTRIBUTE;
    private static int DEF_BORDER_WIDTH;
    private static string DEF_HALIGNMENT_ATTRIBUTE;
    private static string DEF_VALIGNMENT_ATTRIBUTE;
    private static string DEF_ALIGN_CENTER;
    private static string DEF_ALIGN_TOP;
    private static string DEF_ALIGN_BOTTOM;
    private static string DEF_ALIGN_MIDDLE;
    private static string DEF_ALIGN_LEFT;
    private static string DEF_ALIGN_RIGHT;
    private static string DEF_ALIGN_JUSTIFY;
    private static string DEF_FIRST_HEADER_START;
    private static string DEF_FIRST_FOOTER_START;
    private static ExcelBordersIndex[] DEF_DLS_BORDERS;
    private static String[] DEF_DLS_BORDER_NAMES;
    private static CultureInfo DLSCulture;
    private static string DEF_BORDER_WIDTH_HAIR;
    private static string DEF_BORDER_WIDTH_THIN;
    private static string DEF_BORDER_WIDTH_MEDIUM;
    private static string DEF_BORDER_WIDTH_THICK;
    private static DLSXmlSerializator();
    public sealed virtual void Serialize(XmlWriter writer, IWorkbook book);
    private void SerializeStyles(XmlWriter writer, IWorkbook book);
    private void SerializeDocumentProperties(XmlWriter writer, IWorkbook book);
    private void SerializeSections(XmlWriter writer, IWorkbook book);
    private void SerializeWorksheet(XmlWriter writer, IWorksheet sheet);
    private void SerializePageSettings(XmlWriter writer, PageSetupImpl pageSetup);
    private double SerializeParagraphs(XmlWriter writer, IWorksheet sheet);
    private void MeasurePageArea(IRange printArea, SizeF& pageSize, SizeF& headingsSize);
    private void SerializeRange(XmlWriter writer, IRange range, SizeF pageSize, SizeF headingsSize, ExcelOrder pageOrder);
    private void WriteEmptyBorders(XmlWriter writer);
    private void WriteHeadingsBorders(XmlWriter writer);
    private bool FillNextPage(IRange range, Int32& iFirstRow, Int32& iFirstCol, Int32& iLastRow, Int32& iLastCol, SizeF pageSize, ExcelOrder pageOrder);
    private int GetMaxColumn(IWorksheet sheet, int iFirstColumn, double dPageWidth);
    private int GetMaxRow(IWorksheet sheet, int iFirstRow, double dPageHeight);
    private int SerializeRow(XmlWriter writer, IWorksheet sheet, int iRow, int iFirstCol, int iLastCol, int iRowId, SizeF headingsSize);
    private int SerializeHeadingsRow(XmlWriter writer, IWorksheet sheet, SizeF headingsSize, int iFirstColumn, int iLastColumn, int iRowId);
    private void SerializeCell(XmlWriter writer, IWorksheet sheet, int iRow, int iColumn, int iCellId);
    private void SerializeCell(XmlWriter writer, double dWidth, string strCellValue, int iCellId);
    private void SerializeTableFormat(XmlWriter writer, ExtendedFormatImpl xFormat);
    private void SerializeBorders(XmlWriter writer, ExtendedFormatImpl xFormat);
    private string GetVAlignment(ExcelVAlign align);
    private string GetHAlignment(ExcelHAlign align);
    private string GetLineWidth(IBorder border);
    private string GetBorderType(IBorder border);
    private void SerializeRichTextString(XmlWriter writer, RichTextString rtfString, ExtendedFormatImpl xFormat);
    private void WriteText(XmlWriter writer, string strText, IFont font, int id);
    private void WriteFont(XmlWriter writer, IFont font);
    private void SerializeBoolAttribute(XmlWriter writer, string strAttributeName, bool bValue);
    private string GetColorString(Color color);
    private string GetUnderlineString(ExcelUnderline underline);
    private string GetSubSuperScript(IFont font);
    private void WriteAttribute(XmlWriter writer, string strAttributeName, double value, MeasureUnits units);
    private void WriteAttribute(XmlWriter writer, string strAttributeName, string strValue);
    private void WriteAttribute(XmlWriter writer, string strAttributeName, double value);
    private void SerializeHeaderFooter(XmlWriter writer, IWorksheet sheet, double dPageWidth);
    private void SerializeHeaderFooter(XmlWriter writer, String[] arrValues, double dPageWidth);
    private double GetColumnWidth(IWorksheet sheet, int iColumn);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.DV : object {
    public static string DataValidationsTagName;
    public static string ItemCountAttributeName;
    public static string DisablePromptsAttributeName;
    public static string XCoodrinateAttributeName;
    public static string YCoodrinateAttributeName;
    public static string DataValidationTagName;
    internal static string ListTagName;
    public static string ErrorAttributeName;
    public static string CFSequenceOfReferencesAttributeName;
    public static string TypeAttributeName;
    public static string TypeCustom;
    public static string TypeDate;
    public static string TypeDecimal;
    public static string TypeList;
    public static string TypeNone;
    public static string TypeTextLength;
    public static string TypeTime;
    public static string TypeWhole;
    public static string AllowBlankAttributeName;
    public static string ErrorMessageAttributeName;
    public static string ErrorStyleAttributeName;
    public static string ErrorStyleInformationIcon;
    public static string ErrorStyleStopIcon;
    public static string ErrorStyleWarningIcon;
    public static string ErrorAlertTextAttributeName;
    public static string OperatorAttributeName;
    public static string OperatorBetween;
    public static string OperatorEqual;
    public static string OperatorGreaterThan;
    public static string OperatorGreaterThanOrEqual;
    public static string OperatorLessThan;
    public static string OperatorLessThanOrEqual;
    public static string OperatorNotBetween;
    public static string OperatorNotEqual;
    public static string InputPromptAttributeName;
    public static string PromptTitleAttributeName;
    public static string ShowDropDownAttributeName;
    public static string ShowErrorMessageAttributeName;
    public static string ShowInputMessageAttributeName;
    public static string FormulaOneTagName;
    public static string FormulaTwoTagName;
    public static string DEF_RANGE_PREF;
    public static string DEF_TYPE_PREF;
    public static string DEF_MIN_PREF;
    public static string DEF_MAX_PREF;
    public static string DEF_INPUTTITLE_PREF;
    public static string DEF_INPUTMESSAGE_PREF;
    public static string DEF_ERRORSTYLE_PREF;
    public static string DEF_ERRORMESSAGE_PREF;
    public static string DEF_ERRORTITLE_PREF;
    public static string DEF_CELLRANGELIST_PREF;
    public static string DEF_VALUE_PREF;
    public static string DEF_QUALIFIER_PREF;
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Excel2007Serializator : object {
    private static int MaximumFormulaLength;
    public static string XmlFileHeading;
    public static string ContentTypesNamespace;
    public static string HyperlinkNamespace;
    public static string RelationNamespace;
    internal static string StrictOpenXmlRelationNamespace;
    public static string XmlNamespaceMain;
    internal static string DynamicArrayNameSpace;
    internal static string ThreadedCommentNameSpace;
    public static string WorksheetPartType;
    internal static string MacrosheetPerType;
    internal static string IntlMacrosheetPerType;
    public static string ChartSheetPartType;
    public static string DialogSheetPartType;
    public static string ExtendedPropertiesPartType;
    public static string CorePropertiesPartType;
    public static string X14Namespace;
    internal static string X15Namespace;
    internal static string X12Namespace;
    internal static string C15Namespace;
    public static string PivotFieldUri;
    internal static string PivotCacheUri;
    internal static string ChartExtensionUri;
    public static string ExternListUri;
    internal static string PivotFieldExternListUri;
    internal static string SlicerCacheWorkbookExtensionUri;
    internal static string SlicerWorksheetExtensionUri;
    internal static string SlicerCacheExtensionUri;
    internal static string SlicerCacheFilterUri;
    internal static string SlicerDrawingExtensionUri;
    internal static string MetaDataExtensionUri;
    internal static string SlicerUri;
    public static string SlicerExtensionUri;
    public static string X14NameSpaceAttribute;
    public static string HideValuesRowAttribute;
    public static string MSNamespaceMain;
    public static string MSNamespaceMainAttribute;
    public static string XMNamespaceMain;
    public static string XMNamespaceMainAttribute;
    public static string x14PivotTableDefinitionAttributes;
    public static string SparklineUri;
    public static string MCPrefix;
    public static string MCNamespace;
    public static string CorePropertiesPrefix;
    public static string DublinCorePartType;
    public static string DublinCorePrefix;
    public static string DublinCoreTermsPartType;
    public static string DublinCoreTermsPrefix;
    public static string DCMITypePartType;
    public static string DCMITypePrefix;
    public static string XSIPartType;
    public static string XSIPrefix;
    public static string CustomPropertiesPartType;
    public static string DocPropsVTypesPartType;
    public static string OleObjectContentType;
    public static string OleObjectFileExtension;
    public static string DocPropsVTypesPrefix;
    public static string RelationPrefix;
    public static string X14Prefix;
    internal static string X15Prefix;
    internal static string XPrefix;
    internal static string XdaPrefix;
    internal static string X12Prefix;
    internal static string C15Prefix;
    public static string MSPrefix;
    public static string TypesTagName;
    public static string ExtensionAttributeName;
    public static string DefaultTagName;
    public static string ContentTypeAttributeName;
    public static string OverrideTagName;
    public static string PartNameAttributeName;
    public static string WorkbookTagName;
    public static string SheetsTagName;
    internal static string FileSharingTagName;
    internal static string ReadOnlyRecommendedAttribute;
    public static string SheetTagName;
    public static string SheetNameAttribute;
    public static string DefaultWorksheetPathFormat;
    public static string RelationIdFormat;
    public static string SheetIdAttribute;
    public static string RelationAttribute;
    public static string RelationIdAttribute;
    public static string SheetStateAttributeName;
    public static string CalcProperties;
    public static string CalculationId;
    public static string CalculationMode;
    public static string TabSelected;
    public static string ManualCalcModeValue;
    public static string AutoNoTableCalcModeValue;
    public static string DEF_DEFAULT_ROW_DELIMITER;
    internal static string LineFeed;
    public static string StateHidden;
    public static string StateVeryHidden;
    public static string StateVisible;
    public static string RelationsTagName;
    public static string RelationTagName;
    public static string RelationTypeAttribute;
    public static string RelationTargetAttribute;
    public static string RelationTargetModeAttribute;
    public static string RelationExternalTargetMode;
    public static string MergeCellsXmlTagName;
    public static string CountAttributeName;
    internal static string DefaultTableStyleTagName;
    internal static string DefaultPivotStyleTagName;
    public static string MergeCellXmlTagName;
    public static string RefAttributeName;
    public static string DefinedNamesXmlTagName;
    public static string DefinedNameXmlTagName;
    public static string NameAttributeName;
    internal static string SourceNameAttributeName;
    public static string CommentAttributeName;
    public static string NameSheetIdAttribute;
    public static string StyleSheetTagName;
    internal static string SlicerList;
    internal static string Slicer;
    internal static string SlicerCaches;
    internal static string SlicerCache;
    public static string FontsTagName;
    public static string FontTagName;
    public static string FontBoldTagName;
    public static string FontItalicTagName;
    public static string FontUnderlineTagName;
    public static string ValueAttributeName;
    public static string FontSizeTagName;
    public static string FontStrikeTagName;
    public static string FontNameTagName;
    public static string ColorTagName;
    public static string ColorIndexedAttributeName;
    public static string ColorThemeAttributeName;
    public static string ColorTintAttributeName;
    public static string ColorRgbAttribute;
    public static string Auto;
    public static string IndexedColorsTagName;
    public static string ColorsTagName;
    public static string RgbColorTagName;
    public static string MacOSShadowTagName;
    public static string FontVerticalAlignmentTagName;
    public static string FontFamilyTagName;
    public static string FontCharsetTagName;
    public static string NumberFormatsTagName;
    public static string NumberFormatTagName;
    public static string NumberFormatIdAttributeName;
    public static string NumberFormatStringAttributeName;
    public static string FillsTagName;
    public static string FillTagName;
    public static string PatternFillTagName;
    public static string GradientFillTagName;
    public static string GradientFillTypeAttributeName;
    public static string GradientFillTypeLinear;
    public static string GradientFillTypePath;
    public static string LinearGradientDegreeAttributeName;
    public static string BottomConvergenceAttributeName;
    public static string LeftConvergenceAttributeName;
    public static string RightConvergenceAttributeName;
    public static string TopConvergenceAttributeName;
    public static string GradientStopTagName;
    public static string GradientStopPositionAttributeName;
    public static string PatternAttributeName;
    public static string BackgroundColorTagName;
    public static string ForegroundColorTagName;
    public static string BordersTagName;
    public static string BordersCollectionTagName;
    public static string BorderStyleAttributeName;
    public static string BorderColorTagName;
    public static string WorksheetTagName;
    public static string DimensionTagName;
    public static string SheetDataTagName;
    internal static string ScenariosTagName;
    internal static string ScenarioTagName;
    internal static string CurrentAttributeName;
    internal static string ShowAttributeName;
    internal static string SqRefAttributeName;
    internal static string ScenarioNameAttribute;
    internal static string ScenarioLockedAttribute;
    internal static string ScenarioHiddenAttribute;
    internal static string ScenarioCountAttribute;
    internal static string ScenarioUserAttribute;
    internal static string InputCellTagName;
    internal static string ScenarioValueAttriute;
    public static string CellTagName;
    public static string CellMetadataIndexAttributeName;
    public static string ShowPhoneticAttributeName;
    public static string ReferenceAttributeName;
    public static string StyleIndexAttributeName;
    public static string CellDataTypeAttributeName;
    public static string ValueMetadataIndexAttributeName;
    public static string FormulaTagName;
    public static string CellValueTagName;
    public static string RichTextInlineTagName;
    public static string RichTextRunPropertiesTagName;
    public static string RichTextRunFontTagName;
    public static string ColsTagName;
    public static string ColTagName;
    public static string ColumnMinAttribute;
    public static string ColumnMaxAttribute;
    public static string ColumnWidthAttribute;
    public static string ColumnStyleAttribute;
    public static string ColumnCustomWidthAttribute;
    public static string BestFitAttribute;
    public static string RowTagName;
    public static string RowIndexAttributeName;
    public static string RowHeightAttributeName;
    public static string RowHiddenAttributeName;
    public static string RowCustomFormatAttributeName;
    public static string RowCustomHeightAttributeName;
    public static string RowColumnCollapsedAttribute;
    public static string DyDescent;
    public static string RowColumnOutlineLevelAttribute;
    public static string RowThickBottomAttributeName;
    public static string RowThickTopAttributeName;
    public static string FormulaTypeAttributeName;
    public static string AlwaysCalculateArray;
    public static string SharedGroupIndexAttributeName;
    public static string RangeOfCellsAttributeName;
    public static string CommentAuthorsTagName;
    public static string CommentAuthorTagName;
    public static string CommentListTagName;
    public static string CommentTagName;
    public static string CommentTextTagName;
    public static string CommentsTagName;
    internal static string ThreadedCommentsTagName;
    internal static string ThreadedCommentTagName;
    internal static string MentionsTagName;
    internal static string MentionTagName;
    internal static string PersonIdAttributeName;
    internal static string DateTimeAttributeName;
    internal static string ParentIdAttributeName;
    internal static string DoneAttributeName;
    internal static string MentionPersonIdAttributeName;
    internal static string MentionIdAttributeName;
    internal static string StartIndexAttributeName;
    internal static string LengthAttributeName;
    public static string AuthorIdAttributeName;
    public static string DefaultCellDataType;
    public static string NamedStyleXFsTagName;
    public static string CellFormatXFsTagName;
    public static string DiffXFsTagName;
    public static string TableStylesTagName;
    internal static string TableStyleTagName;
    internal static string TableStyleElementTagName;
    internal static string TableStyleNameTagName;
    internal static string TypeAttributeName;
    internal static string SizeTagName;
    internal static string PivotTagName;
    internal static string DifferentialFormattingIdAttributeName;
    public static string ExtendedFormatTagName;
    public static string FontIdAttributeName;
    public static string FillIdAttributeName;
    public static string BorderIdAttributeName;
    public static string XFIdAttributeName;
    public static string CellStylesTagName;
    public static string CellStyleTagName;
    public static string StyleBuiltinIdAttributeName;
    public static string StyleCustomizedAttributeName;
    public static string OutlineLevelAttribute;
    public static string IncludeAlignmentAttributeName;
    public static string IncludeBorderAttributeName;
    public static string IncludeFontAttributeName;
    public static string IncludeNumberFormatAttributeName;
    public static string IncludePatternsAttributeName;
    public static string IncludeProtectionAttributeName;
    public static string AlignmentTagName;
    public static string ProtectionTagName;
    public static string IndentAttributeName;
    public static string HAlignAttributeName;
    public static string JustifyLastLineAttributeName;
    public static string ReadingOrderAttributeName;
    public static string ShrinkToFitAttributeName;
    public static string TextRotationAttributeName;
    public static string WrapTextAttributeName;
    public static string VerticalAttributeName;
    public static string HiddenAttributeName;
    public static string LockedAttributeName;
    public static bool HiddenDefaultValue;
    public static bool LockedDefaultValue;
    public static string QuotePreffixAttributeName;
    public static string DiagonalDownAttributeName;
    public static string DiagonalUpAttributeName;
    internal static string PersonListTagName;
    internal static string PersonTagName;
    internal static string MetadataTagName;
    internal static string MetadataTypesTagName;
    internal static string MetadataTypeTagName;
    internal static string FutureMetadataTagName;
    internal static string BkTagName;
    internal static string DynamicArrayPropertiesTagName;
    internal static string CellMetadataTagName;
    internal static string DisplayNameAttributeName;
    internal static string ProviderIdAttributeName;
    internal static string UserIdAttributeName;
    public static string SharedStringTableTagName;
    public static string UniqueStringCountAttributeName;
    public static string StringItemTagName;
    public static string TextTagName;
    public static string RichTextRunTagName;
    public static string TemporaryRoot;
    public static string SpaceAttributeName;
    public static string XmlPrefix;
    public static string PreserveValue;
    private static string CellTypeNumber;
    private static string CellTypeString;
    private static string CellTypeBool;
    private static string CellTypeError;
    private static string CellTypeFormulaString;
    private static string CellTypeInlineString;
    internal static string SchemeTagName;
    internal static string SortState;
    internal static string CaseSensitive;
    internal static string SortCondition;
    internal static string Descending;
    internal static string SortBy;
    internal static string CellColor;
    internal static string FontColor;
    public static string ThemeTagName;
    internal static string ThemeOverrideTagName;
    public static string ThemeElementsTagName;
    public static string ColorSchemeTagName;
    public static string RGBHexColorValueAttributeName;
    public static string SystemColorTagName;
    public static string SystemColorValueAttributeName;
    public static string SystemColorLastColorAttributeName;
    public static string DxfFormattingTagName;
    public static string PhoneticPr;
    public static string Phonetic;
    public static string HyperlinksTagName;
    public static string HyperlinkTagName;
    public static string DisplayStringAttributeName;
    public static string RelationshipIdAttributeName;
    public static string LocationAttributeName;
    public static string HyperlinkReferenceAttributeName;
    public static string ToolTipAttributeName;
    public static string SheetLevelPropertiesTagName;
    public static string PageSetupPropertiesTag;
    public static string FitToPageAttribute;
    public static string SheetTabColorTagName;
    public static string SheetOutlinePropertiesTagName;
    public static string SummaryRowBelow;
    public static string SummaryColumnRight;
    public static string BackgroundImageTagName;
    public static string FileHyperlinkStartString;
    public static string HttpStartString;
    public static string SheetFormatPropertiesTag;
    public static string ZeroHeightAttribute;
    public static string DefaultRowHeightAttribute;
    public static string DefaultColumWidthAttribute;
    public static string BaseColWidthAttribute;
    public static string ThickBottomAttribute;
    public static string ThickTopAttribute;
    public static string OutlineLevelColAttribute;
    public static string OutlineLevelRowAttribute;
    public static string WorkbookViewsTagName;
    public static string WorkbookViewTagName;
    public static string ActiveSheetIndexAttributeName;
    public static string AutoFilterDateGroupingAttributeName;
    public static string FirstSheetAttributeName;
    public static string MinimizedAttributeName;
    public static string ShowHorizontalScrollAttributeName;
    public static string ShowSheetTabsAttributeName;
    public static string ShowVerticalScrollAttributeName;
    public static string SheetTabRatioAttributeName;
    public static string VisibilityAttributeName;
    public static string WindowHeightAttributeName;
    public static string WindowWidthAttributeName;
    public static string UpperLeftCornerXAttributeName;
    public static string UpperLeftCornerYAttributeName;
    public static string HorizontalPageBreaksTagName;
    public static string VerticalPageBreaksTagName;
    public static string PageBreakCountAttributeName;
    public static string ManualBreakCountAttributeName;
    public static string BreakTagName;
    public static string IdAttributeName;
    public static string ManualPageBreakAttributeName;
    public static string MaximumAttributeName;
    public static string MinimumAttributeName;
    public static string SheetViewsTag;
    public static string SheetViewTag;
    public static string ShowZeros;
    public static string WorkbookViewIdAttribute;
    public static string SheetZoomScale;
    public static string ViewTag;
    public static string Layout;
    public static string PageBreakPreview;
    public static string Normal;
    public static string TrueValue;
    public static string FalseValue;
    public static string SparklineColumnValue;
    public static string SparklineWinLossValue;
    public static string EmptyCellsGapValue;
    public static string EmptyCellsZeroValue;
    public static string EmptyCellsLineValue;
    public static string VerticalCustomTypeValue;
    public static string VerticalSameTypeValue;
    public static string ShowGridLines;
    public static string RightToLeft;
    public static string SheetGridColor;
    public static string ColorID;
    public static string CustomPropertiesTagName;
    public static string CustomPropertyTagName;
    public static string IgnoredErrorsTag;
    public static string IgnoredErrorTag;
    public static string OnCall;
    public static string Always;
    public static ExcelIgnoreError[] ErrorsSequence;
    private static String[] s_arrFormulas;
    private static string s_color;
    public static String[] ErrorTagsSequence;
    public static string RangeReferenceAttribute;
    public static string FileVersionTag;
    public static string RupBuild;
    public static string LastEdited;
    public static string LowestEdited;
    public static string WorkbookPr;
    public static string WorkbookDate1904;
    public static string WorkbookPrecision;
    public static string ApplicationNameAttribute;
    public static string ApplicationNameValue;
    private static string WindowProtection;
    public static string FunctionGroups;
    public static string CodeName;
    public static string HidePivotFieldList;
    private static string SpansTag;
    public static string Extensionlist;
    public static string Extension;
    public static string CalculateOnOpen;
    public static string dataTable2DTag;
    public static string dataTableRowTag;
    public static string dataTableCellTag;
    internal static string SecondDataTableCellTag;
    private static Char[] allowedChars;
    private static int FirstVisibleChar;
    public static string TransitionEvaluation;
    public static string ShowRowColHeaders;
    private static string VersionValue;
    public static string Properties;
    public static string DocumentManagement;
    public static string PCPrefix;
    public static string PPrefix;
    public static string PropertiesNameSpace;
    public static string PartnerControlsNameSpace;
    public static string DefaultThemeVersion;
    public static string ConnectionsTag;
    public static string ConnectionTag;
    public static string OdbcFileAttribute;
    public static string DataBaseNameAttribute;
    public static string DataBaseTypeAttribute;
    public static string RefreshedVersionAttribute;
    public static string BackGroundAttribute;
    public static string SaveData;
    public static string DataBasePrTag;
    public static string CommandTextAttribute;
    public static string CommandTypeAttribute;
    public static string ConnectionIdAttribute;
    public static string SourceFile;
    public static string DescriptionTag;
    public static string Interval;
    public static string SavePassword;
    public static string OnlyUseConnectionFile;
    public static string BackgroundRefresh;
    public static string Credentials;
    public static string Deleted;
    public static string TextPr;
    public static string WebPrTag;
    public static string Xml;
    public static string URL;
    public static string OlapPrTag;
    public static string PivotButton;
    public static string CustomWorkbookViews;
    public static string CustomWorkbookView;
    internal static string ParamertersTag;
    internal static string ParamerterTag;
    internal static string ParamerterTypeAttribute;
    internal static string SqlTypeAttribute;
    internal static string PromptAttribute;
    internal static string BooleanAttribute;
    internal static string CellAttribute;
    internal static string DoubleAttribute;
    internal static string IntegerAttribute;
    internal static string StringAttribute;
    internal static string RefreshOnChangeAttribute;
    internal static string SlicerCacheDefinition;
    internal static string TableSlicerCache;
    internal static string TableId;
    internal static string Column;
    internal static string SortOrder;
    internal static string HideItemswithNoData;
    internal static string CrossFilter;
    internal static string PivotTableAttribute;
    internal static string TabId;
    internal static string DataAttribute;
    public static string CustomXmlPartName;
    public static string CustomXmlName;
    public static string CustomXmlPropertiesName;
    public static string CustomXmlRelation;
    public static string DataStoreItem;
    public static string ItemIdAttribute;
    public static string CustomXmlSchemaReferences;
    public static string CustomXmlSchemaReference;
    public static string CustomXmlUriAttribute;
    public static string XmlItemName;
    public static string XmlPropertiesName;
    public static string CustomXmlNameSpace;
    public static string ItemPropertiesPrefix;
    public static string CustomXmlItemID;
    public static string ItemPrpertiesUri;
    public static string CustomXmlItemPropertiesRelation;
    internal WorkbookImpl m_book;
    internal FormulaUtil m_formulaUtil;
    private RecordExtractor m_recordExtractor;
    private Dictionary`2<int, ShapeSerializator> m_shapesVmlSerializators;
    private static object m_object;
    private Dictionary`2<int, ShapeSerializator> m_shapesHFVmlSerializators;
    private Dictionary`2<Type, ShapeSerializator> m_shapesSerializators;
    private List`1<Stream> m_streamsSheetsCF;
    private List`1<Stream> m_streamsTableStyles;
    private List`1<Stream> m_streamsSheetsSort;
    private List`1<Stream> m_colorFilterStreamList;
    private int m_colorFilterStreamListIndex;
    private List`1<Stream> m_streamsFiltersSort;
    private List`1<Dictionary`2<int, Stream>> m_streamsTableFiltersSort;
    private List`1<string> m_sheetNames;
    private WorksheetImpl m_worksheetImpl;
    private bool hasTextRotation;
    private Char[] SpecialChars;
    private int m_sheetPropertyIndex;
    private int m_id;
    public Dictionary`2<int, ShapeSerializator> HFVmlSerializators { get; }
    public Dictionary`2<int, ShapeSerializator> VmlSerializators { get; }
    public ExcelVersion Version { get; }
    internal WorksheetImpl Worksheet { get; internal set; }
    public Excel2007Serializator(WorkbookImpl book);
    private static Excel2007Serializator();
    public sealed virtual void Dispose();
    public Dictionary`2<int, ShapeSerializator> get_HFVmlSerializators();
    public Dictionary`2<int, ShapeSerializator> get_VmlSerializators();
    public virtual ExcelVersion get_Version();
    internal WorksheetImpl get_Worksheet();
    internal void set_Worksheet(WorksheetImpl value);
    public void SerializeContentTypes(XmlWriter writer, IDictionary`2<string, string> contentDefaults, IDictionary`2<string, string> contentOverrides);
    public void SerializeWorkbook(XmlWriter writer, Stream streamStart, Stream streamEnd, List`1<Dictionary`2<string, string>> lstBookViews, RelationCollection relations, Dictionary`2<PivotCacheImpl, string> cacheFiles, Stream functionGroups, List`1<Dictionary`2<string, string>> lstCustomBookViews);
    private void SerializeCalculation(XmlWriter writer);
    private void SerializeWorkbookPr(XmlWriter writer);
    private void SerializePivotCaches(XmlWriter writer, Dictionary`2<PivotCacheImpl, string> cacheFiles, RelationCollection relations);
    private void SerializePivotCache(XmlWriter writer, string cacheId, string relationId);
    private void SerializeFileVersion(XmlWriter writer, FileVersion fileVersion);
    private void SerializeFileSharing(XmlWriter writer);
    private void SerializeWorkbookProtection(XmlWriter writer);
    public void SerializeMerges(XmlWriter writer, MergeCellsImpl mergedCells);
    public void SerializeNamedRanges(XmlWriter writer);
    public void SerializeCustomXmlPartProperty(XmlWriter writer, ICustomXmlPart customXmlPart);
    public Dictionary`2<int, int> SerializeStyles(XmlWriter writer, Stream& streamDxfs);
    private void ColorFilterStream(AutoFiltersCollection autoFiltersCollection, Stream& tempStreamDxfx, Int32& iDxfIndex);
    public void SerializeRelations(XmlWriter writer, RelationCollection relations, WorksheetDataHolder holder);
    public void SerializeWorksheet(XmlWriter writer, WorksheetImpl sheet, Stream streamStart, Stream streamConFormats, Dictionary`2<int, int> hashXFIndexes, Stream streamExtCondFormats);
    internal void SerializeDataTable(XmlWriter writer, WorksheetImpl sheet);
    internal void SerializeCells(XmlWriter writer, WorksheetImpl sheet, DataTable dataTable, int firstRow, int firstColumn, int lastRow, int lastColumn, Dictionary`2<object, int> sstDictionary, DataRow curRow, int row, bool isFieldNameShown);
    protected virtual void SerilaizeExtensions(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeControls(XmlWriter writer, WorksheetImpl sheet);
    private void UpdateNodeAnchors(XmlNode node, bool isFrom, ShapeImpl shapeImpl, WorksheetImpl sheet);
    private ShapeImpl GetShapeImplFromControlNode(XmlNode child, IShapes shapes, WorksheetImpl sheet);
    private XmlNode GetChildNodeByName(XmlNode child, string name);
    public static void WriteAlternateContentFooter(XmlWriter writer);
    public static void WriteAlternateContentHeader(XmlWriter writer);
    public static void WriteAlternateContentControlsHeader(XmlWriter writer);
    public void SerializeSheetProtection(XmlWriter writer, WorksheetBaseImpl sheet);
    private void SerializeProtectionAttribute(XmlWriter writer, string attributeName, ExcelSheetProtection flag, bool defaultValue, ExcelSheetProtection protection);
    private void SerializeChartProtectionAttribute(XmlWriter writer, string attributeName, ExcelSheetProtection flag, bool defaultValue, ExcelSheetProtection protection);
    private void SerializeIgnoreErrors(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeErrorIndicator(XmlWriter writer, ErrorIndicatorImpl indicator);
    private void SerializeErrorType(XmlWriter writer, ExcelIgnoreError excelIgnoreError);
    private string GetCellList(ErrorIndicatorImpl indicator);
    private void SerializeCustomProperties(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeWorksheetProperty(XmlWriter writer, WorksheetImpl sheet, ICustomProperty property, int counter);
    private void WritePropertyValue(WorksheetImpl sheet, ZipArchiveItem item, ICustomProperty property);
    private Stream GetWorksheetCFStream(int iSheetIndex);
    private Stream GetWorksheetSortStream(int iSheetIndex);
    private Stream GetFiltersSortStream(int iSheetIndex);
    private Stream GetColorFilterStream(int listIndex);
    private Stream GetTableFiltersSortStream(int iSheetIndex, int iFilterIndex);
    public void SerializeCommentNotes(XmlWriter writer, WorksheetImpl sheet);
    internal void SerializeThreadedComments(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeThreadedComment(XmlWriter writer, ThreadedComments threadedComments, Dictionary`2<string, Person> personDictionary);
    private void SerializeThreadedCommentMentions(XmlWriter writer, List`1<Mention> mentionList);
    public void SerializeVmlShapes(XmlWriter writer, ShapeCollectionBase shapes, WorksheetDataHolder holder, Dictionary`2<int, ShapeSerializator> dictSerializators, RelationCollection vmlRelations);
    public void SerializeDrawings(XmlWriter writer, ShapesCollection shapes, WorksheetDataHolder holder);
    public void SerializeShape(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations, int index);
    internal void SerializeGroupShape(XmlWriter writer, GroupShapeImpl groupShape, WorksheetDataHolder holder);
    internal void SerializeGroupShapeProperties(XmlWriter writer, GroupShapeImpl groupShape, WorksheetDataHolder holder, GroupShapeSerializator groupShapeSerializator);
    public static bool HasAlternateContent(IShapes shapes);
    public RelationCollection SerializeLinkItem(XmlWriter writer, ExternWorkbookImpl book);
    public RelationCollection SerializeExternalLink(XmlWriter writer, ExternWorkbookImpl book);
    public RelationCollection SerializeDdeObjectLink(XmlWriter writer, ExternWorkbookImpl book);
    public RelationCollection SerializeOleObjectLink(XmlWriter writer, ExternWorkbookImpl book);
    private void SerializeSheetDataSet(XmlWriter writer, ExternWorkbookImpl book);
    private void SerializeSheetNames(XmlWriter writer, ExternWorkbookImpl book);
    private void SerializeExternNames(XmlWriter writer, ExternWorkbookImpl book);
    private void SerializeExternName(XmlWriter writer, ExternNameImpl externName);
    private void SerializeDrawingsWorksheetPart(XmlWriter writer, WorksheetImpl sheet);
    public void SerializeVmlShapesWorksheetPart(XmlWriter writer, WorksheetBaseImpl sheet);
    private void SerializeOle(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeOleObject(XmlWriter writer, WorksheetImpl sheet, OleObject oleObject, bool isFallback);
    private void SerializeObjectPr(XmlWriter writer, WorksheetImpl sheet, OleObject oleObject);
    private void SerializeOleObjectAnchor(XmlWriter writer, WorksheetImpl sheet, OleObject oleObject);
    internal string GetOleFileName(OleObjectType objectType);
    internal string GetOleRelType(OleObjectType objectType);
    private int GetNextID();
    public static void SerializeVmlHFShapesWorksheetPart(XmlWriter writer, WorksheetBaseImpl sheet, IPageSetupConstantsProvider constants, RelationCollection relations);
    private void SerializeCommentsList(XmlWriter writer, WorksheetImpl sheet, IDictionary`2<string, int> dicAuthors);
    private void SerializeComment(XmlWriter writer, ICommentShape comment, IDictionary`2<string, int> dicAuthors);
    private IDictionary`2<string, int> SerializeAuthors(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeDimensions(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeSheetViews(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeSelection(XmlWriter writer, WorksheetImpl sheet);
    private void SerializePane(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeStream(XmlWriter writer, Stream data);
    public static void SerializeStream(XmlWriter writer, Stream data, string strRootName);
    internal void SerializeDialogMacroStream(XmlWriter writer, Stream data);
    private void SerializeRelation(XmlWriter writer, string key, Relation relation);
    private void SerializeSheets(XmlWriter writer);
    private void SerializeExtensions(XmlWriter writer);
    private void SerializeSheetTag(XmlWriter writer, ITabSheet sheet);
    private void SerializeDialogSheetTag(XmlWriter writer, DialogSheet sheet);
    private void SerializeMacroSheetTag(XmlWriter writer, MacroSheet sheet);
    private string GenerateSheetId();
    private string GetRangeName(MergedRegion region);
    private void SerializeNamedRange(XmlWriter writer, IName name);
    private int GetLocalSheetIndex(WorksheetImpl sheet);
    private bool CheckSheetName(string strNameValue);
    private void SerializeFonts(XmlWriter writer);
    private void SerializeFont(XmlWriter writer, IFont font, string strElement);
    private void SerializeFontColor(XmlWriter writer, string tagName, ColorObject color);
    private void SerializeNumberFormats(XmlWriter writer);
    private void SerializeNumberFormat(XmlWriter writer, FormatRecord format);
    internal string GetCustomizedString(string numberFormatString);
    private Int32[] SerializeFills(XmlWriter writer);
    internal void SerializeFill(XmlWriter writer, FillImpl fill);
    private void SerializePatternFill(XmlWriter writer, FillImpl fill);
    private void SerializeGradientFill(XmlWriter writer, FillImpl fill);
    private void SerializeCFGradientFill(XmlWriter writer, IInternalConditionalFormat condition);
    private void SerializeDegreeGradientFill(XmlWriter writer, FillImpl fill);
    private void SerializeDegreeCFGradientFill(XmlWriter writer, IInternalConditionalFormat conformat);
    private void SerializeFromCenterCornerGradientFill(XmlWriter writer, FillImpl fill);
    private void SerializeFromCenterCornerCFGradientFill(XmlWriter writer, IInternalConditionalFormat conformat);
    private void SerializeStopColorElements(XmlWriter writer, double dPosition, ColorObject color);
    private string ConvertPatternToString(ExcelPattern pattern);
    private Int32[] SerializeBorders(XmlWriter writer);
    private void SerializeIndexedColor(XmlWriter writer, string tagName, ExcelKnownColors color);
    public void SerializeRgbColor(XmlWriter writer, string tagName, ColorObject color);
    private void SerializeThemeColor(XmlWriter writer, string tagName, ColorObject color);
    private void SerializeColorObject(XmlWriter writer, string tagName, ColorObject color);
    private void SerializeBordersCollection(XmlWriter writer, BordersCollection borders);
    private void SerializeBorder(XmlWriter writer, BorderImpl border);
    private static string GetBorderTag(ExcelBordersIndex borderIndex);
    private string GetBorderLineStyle(BorderImpl border);
    private Dictionary`2<int, int> SerializeNamedStyleXFs(XmlWriter writer, Int32[] arrFillIndexes, Int32[] arrBorderIndexes);
    private Dictionary`2<int, int> SerializeNotNamedXFs(XmlWriter writer, Int32[] arrFillIndexes, Int32[] arrBorderIndexes, Dictionary`2<int, int> hashNewParentIndexes);
    private void SerializeExtendedFormat(XmlWriter writer, Int32[] arrFillIndexes, Int32[] arrBorderIndexes, ExtendedFormatImpl format, Dictionary`2<int, int> newParentIndexes, bool defaultApplyValue);
    private void SerializeAlignment(XmlWriter writer, ExtendedFormatImpl format);
    private bool IsDefaultAlignment(ExtendedFormatImpl format);
    private bool IsDefaultAlignment(IPivotCellFormat format);
    private void SerializeProtection(XmlWriter writer, ExtendedFormatImpl format);
    private void SerializeStyles(XmlWriter writer, Dictionary`2<int, int> hashNewParentIndexes);
    private void SerializeStyle(XmlWriter writer, StyleImpl style, Dictionary`2<int, int> hashNewParentIndexes);
    private void SerializeDictionary(XmlWriter writer, IDictionary`2<string, string> toSerialize, string tagName, string keyAttributeName, string valueAttributeName, IFileNamePreprocessor keyPreprocessor);
    public static string LowerFirstLetter(string value);
    public static string CapitalizeFirstLetter(string value);
    internal static void SerializeAttribute(XmlWriter writer, string attributeName, bool value, bool defaultValue);
    internal static void SerializeBool(XmlWriter writer, string attributeName, bool value);
    internal static void SerializeAttribute(XmlWriter writer, string attributeName, int value, int defaultValue);
    internal static void SerializeAttribute(XmlWriter writer, string attributeName, double value, double defaultValue);
    internal static void SerializeAttribute(XmlWriter writer, string attributeName, double value, double defaultValue, string attributeNamespace);
    internal static void SerializeAttribute(XmlWriter writer, string attributeName, string value, string defaultValue);
    internal static void SerializeAttribute(XmlWriter writer, string attributeName, Enum value, Enum defaultValue);
    protected static void SerializeElementString(XmlWriter writer, string elementName, string value, string defaultValue);
    private static void SerializeElementString(XmlWriter writer, string elementName, string value, string defaultValue, string prefix);
    private static void SerializeElementString(XmlWriter writer, string elementName, int value, int defaultValue);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use SerializeSheet(XmlWriter writer, WorksheetBaseImpl sheet) method. Sorry for inconvenience.")]
public void SeiralizeSheet(XmlWriter writer, WorksheetBaseImpl sheet);
    public void SerializeSheet(XmlWriter writer, WorksheetBaseImpl sheet);
    public void SerializeSheetData(XmlWriter writer, CellRecordCollection cells, Dictionary`2<int, int> hashNewParentIndexes, string cellTag, Dictionary`2<string, string> additionalAttributes, bool isSpansNeeded);
    private void SerializeScenarios(XmlWriter writer, IScenarios scenarios, WorksheetImpl sheet);
    private void SerializeScenario(XmlWriter writer, IScenario scenario, WorksheetImpl sheet);
    private void SerializeAttributes(XmlWriter writer, Dictionary`2<string, string> additionalAttributes);
    private void SerializeRow(XmlWriter writer, RowStorage row, CellRecordCollection cells, int iRowIndex, Dictionary`2<int, int> hashNewParentIndexes, string cellTag, bool isSpansNeeded);
    private void SerializeCells(XmlWriter writer, RowStorage row, CellRecordCollection cells, Dictionary`2<int, int> hashNewParentIndexes, string cellTag);
    private void SerializeCell(XmlWriter writer, BiffRecordRaw record, RowStorageEnumerator rowStorageEnumerator, CellRecordCollection cells, Dictionary`2<int, int> hashNewParentIndexes, string cellTag);
    private void SerializeBlankCell(XmlWriter writer, int iRowIndex, int iColumnIndex, int iXFIndex, Dictionary`2<int, int> hashNewParentIndexes);
    private void SerializeMulBlankRecord(XmlWriter writer, MulBlankRecord mulBlankRecord, Dictionary`2<int, int> hashNewParentIndexes);
    private void SerializeMulRKRecordValues(XmlWriter writer, MulRKRecord mulRKRecord, Dictionary`2<int, int> hashNewParentIndexes);
    private void SerializeArrayFormula(XmlWriter writer, ArrayRecord arrayRecord, string cellName);
    private void SerializeSimpleFormula(XmlWriter writer, FormulaRecord formulaRecord, CellRecordCollection cells, int row, int column);
    private void SerializeDataTableFormula(XmlWriter writer, CellFormula cellFormula);
    private void SerializeCellValue(XmlWriter writer, BiffRecordRaw record, CellType cellType, string inlineValue);
    private void SerializeFormulaValue(XmlWriter writer, FormulaRecord record, CellType cellType, RowStorageEnumerator rowStorageEnumerator);
    internal static CellType GetCellDataType(BiffRecordRaw record, String& strCellType);
    internal void SerializePerson(XmlWriter writer, Dictionary`2<string, Person> personDictionary);
    internal void SerializeMetadata(XmlWriter writer);
    public void SerializeSST(XmlWriter writer);
    internal void SerializeSlicerCache(XmlWriter writer, ISlicer slicer, IWorksheet sheet);
    internal void SerializePivottableSlicerCache(XmlWriter writer, ISlicer slicer, IWorksheet sheet);
    private void SerializeStringItem(XmlWriter writer, object objTextOrString);
    internal static string ReplaceWrongChars(string strText);
    private string PrepareString(string text);
    private static bool IsHexa(string value);
    private void SerializeRichTextRun(XmlWriter writer, TextWithFormat text);
    private void SerializeRichTextRunSingleEntry(XmlWriter writer, FontsCollection fonts, string strString, int iFontIndex);
    private void SerializeColors(XmlWriter writer);
    private void SerializePalette(XmlWriter writer);
    private bool IsPaletteDefault();
    private void SerializeColumns(XmlWriter writer, WorksheetImpl sheet, Dictionary`2<int, int> dicStyles);
    private int SerializeColumn(XmlWriter writer, ColumnInfoRecord columnInfo, Dictionary`2<int, int> dicStyles, double defaultWidth, WorksheetImpl sheet);
    internal static int FindSameColumns(WorksheetImpl sheet, int iColumnIndex, WorkbookImpl workbook);
    private void SerializeDataValidations(XmlWriter writer, DataValidationTable dataValidationTable);
    private void SerializeDataValidationCollection(XmlWriter writer, DataValidationCollection dataValidationCollection);
    private void SerializeDataValidation(XmlWriter writer, DataValidationImpl dataValidation);
    private void SerializeAlternateContent(XmlWriter writer, DataValidationImpl dataValidation);
    private string GetDVTypeName(ExcelDataType dataType);
    private string GetDVErrorStyleType(ExcelErrorStyle errorStyle);
    private string GetDVCompareOperatorType(ExcelDataValidationComparisonOperator compareOperator);
    public void SerializeAutoFilters(XmlWriter writer, IAutoFilters autoFilters);
    internal void SerializeAutoFilters(XmlWriter writer, IAutoFilters autoFilters, IListObject table);
    private void SerializeFilterColumn(XmlWriter writer, AutoFilterImpl autoFilter, Dictionary`2<int, int> mergedIndices);
    private void SerializeColorFilter(XmlWriter writer);
    private void SerializeIconFilter(XmlWriter writer, IconFilter iconFilter);
    private void SerializeAlternateIconFilter(XmlWriter writer, IconFilter iconFilter);
    private void SerializeFilters(XmlWriter writer, AutoFilterImpl autoFilter);
    private void SerializeFilter(XmlWriter writer, string strFilterValue);
    private void SerializeAutoFilterTopTen(XmlWriter writer, AutoFilterImpl autoFilter);
    private void SerializeCustomFilters(XmlWriter writer, AutoFilterImpl autoFilter);
    private void SerializeCustomFilter(XmlWriter writer, IAutoFilterCondition autoFilterCondition);
    private string GetAFConditionOperatorName(ExcelFilterCondition filterCondition);
    private ushort GetActivePane(PaneRecord paneRecord);
    private string GetAFFilterValue(IAutoFilterCondition autoFilterCondition);
    private void SerializeCondionalFormats(XmlWriter writer, XmlWriter writerDxf, ConditionalFormats conditionalFormats, Int32& iDxfIndex, Int32& iPriority, Int32& iPriorityCount);
    internal void SerializeCondition(XmlWriter writer, XmlWriter writerDxf, IInternalConditionalFormat condition, Int32& iDxfIndex, Int32& iPriority, Int32& iPriorityCount);
    private void SerializeColorScale(XmlWriter writer, IColorScale colorScale);
    private void SerializeIconSet(XmlWriter writer, IIconSet iconSet, bool cfHasExtensionList, bool isCustom);
    private void SerializeDataBar(XmlWriter writer, IDataBar dataBar);
    public void SerializeConditionValueObject(XmlWriter writer, IConditionValue conditionValue, bool isIconSet);
    internal void SerializeConditionValueObject(XmlWriter writer, IConditionValue conditionValue, bool isIconSet, bool cfHasExtensionList, bool isCustom);
    private void SerializeCustomCFIcon(XmlWriter writer, IIconConditionValue conditionValue, bool isIconSet);
    internal string GetCFComparisonOperatorName(ExcelComparisonOperator comparisonOperator);
    internal string GetCFTimePeriodType(CFTimePeriods timePeriod);
    internal string GetCFType(ExcelCFType typeCF, ExcelComparisonOperator compOperator);
    public Stream SerializeDxfs(Stream& streamDxfs, WorksheetConditionalFormats conditionalFormats, Int32& iDxfIndex);
    internal Stream SerializeDxfsTableStyles(Stream& streamDxfs, ITableStyles tableStyles, Int32& iDxfIndex);
    internal Stream SerializeDxfsPivotCellFormats(Stream& streamDxfs, PivotTableImpl pivotTable, Int32& iDxfIndex);
    private void SerializeCustomFormat(XmlWriter writer, PivotFormat pivotformat, XmlWriter WriterDxfs, Int32& iDxfIndex);
    private Stream SerializeDxfsColorFilterAndSorting(Stream& streamDxfs, IDataSort sortState, AutoFilterImpl autoFilter, Int32& iDxfIndex);
    private void SerializeDxf(XmlWriter writer, ConditionalFormatImpl condition);
    private void SerializeDxf(XmlWriter writer, TableStyleElement tableStyleElement);
    private void SerializeDxf(XmlWriter writer, ISortField sortField);
    private void SerializeDxf(XmlWriter writer, IInternalPivotCellFormat pivotCellFormat);
    private void SerializeDxfNumberFormat(XmlWriter writer, ConditionalFormatImpl condition);
    private void SerializeDxfNumberFormat(XmlWriter writer, IInternalPivotCellFormat pivotCellFormat);
    internal void SerializeDxfBorders(XmlWriter writer, IInternalConditionalFormat condition);
    internal void SerializeDxfBorders(XmlWriter writer, TableStyleElement tableStyleElement);
    internal void SerializeDxfBorders(XmlWriter writer, IInternalPivotCellFormat pivotCellFormat);
    private void SerializeDxfBorder(XmlWriter writer, Excel2007BorderIndex borderIndex, ExcelLineStyle lineStyle, ColorObject color, bool isBorderModified);
    internal void SerializeDxfFill(XmlWriter writer, IInternalConditionalFormat condition);
    internal void SerializeDxfFill(XmlWriter writer, TableStyleElement tableStyleElement);
    internal void SerializeDxfFill(XmlWriter writer, Color Color);
    internal void SerializeDxfFill(XmlWriter writer, IInternalPivotCellFormat pivotCellFormat);
    internal void SerializeDxfFont(XmlWriter writer, IInternalConditionalFormat condition);
    internal void SerializeDxfFont(XmlWriter writer, TableStyleElement tableStyleElement);
    internal void SerializeDxfFont(XmlWriter writer, ISortField sortField);
    private void SerializeDxfAlignment(XmlWriter writer, IInternalPivotCellFormat pivotCellFormat);
    private void SerializeDxfProtection(XmlWriter writer, IInternalPivotCellFormat pivotCellFormat);
    internal void SerializeDxfFont(XmlWriter writer, IInternalPivotCellFormat pivotCellFormat);
    internal void SerializeTableStylesAttributes(XmlWriter writer, int count, TableStyles tableStyles);
    internal void SerializeTableStyle(XmlWriter writer, ITableStyle tableStyle, XmlWriter WriterDxfs, Int32& iDxfIndex);
    internal void SerializeTableStyleAttributes(XmlWriter writer, int Count, string tableStyleName);
    internal void SerializeTableStyleElement(XmlWriter writer, TableStyleElement tableStyleElement, XmlWriter WriterDxfs, Int32& iDxfIndex);
    internal void SerializeTableStyleElementAttributes(XmlWriter writer, string tableStyleElementType);
    internal void SerializeTableStyleElementAttributes(XmlWriter writer, int stripeSize);
    internal void SerializableTableStyleElementAttribute(XmlWriter writer, Int32& iDxfIndex);
    private void SerializeHyperlinks(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeHyperlink(XmlWriter writer, HyperLinkImpl hyperlink, RelationCollection relations);
    public static void SerializePrintSettings(XmlWriter writer, IPageSetupBase pageSetup, IPageSetupConstantsProvider constants, bool isChartSettings);
    private static void SerializePrintOptions(XmlWriter writer, IPageSetupBase pageSetup, IPageSetupConstantsProvider constants);
    public static void SerializePageMargins(XmlWriter writer, IPageSetupBase pageSetup, IPageSetupConstantsProvider constants);
    private static void ValidatePageMargins(PageSetupBaseImpl pageSetup);
    public static void SerializePageSetup(XmlWriter writer, IPageSetupBase pageSetup, IPageSetupConstantsProvider constants);
    internal static void SerializeHeaderFooter(XmlWriter writer, IPageSetupBase pageSetup, IPageSetupConstantsProvider constants);
    private static string PrintCommentsToString(ExcelPrintLocation printLocation);
    private static string PrintErrorsToString(ExcelPrintErrors printErrors);
    private string ConvertAddressString(string strAdress);
    private void SerializeSheetlevelProperties(XmlWriter writer, WorksheetImpl sheet);
    internal void SerilizeBackgroundImage(XmlWriter writer, WorksheetBaseImpl workSheetBase);
    public void SerializeExtendedProperties(XmlWriter writer);
    protected virtual void SerializeAppVersion(XmlWriter writer);
    public void SerializeCoreProperties(XmlWriter writer);
    private void SerializeCreatedModifiedTimeElement(XmlWriter writer, string tagName, DateTime dateTime);
    public void SerializeCustomProperties(XmlWriter writer);
    public void SerializeContentTypeProperties(XmlWriter writer);
    private void SerializeCustomProperty(XmlWriter writer, DocumentPropertyImpl property, int iPropertyId);
    private void SerializeBookViews(XmlWriter writer, List`1<Dictionary`2<string, string>> lstBookViews);
    private void SerializeWorkbookView(XmlWriter writer, Dictionary`2<string, string> dicView);
    private void ChangeCreateAttributeValue(Dictionary`2<string, string> dicBookView, string strAttributeName, int iNewValue);
    private void SerializeBookExternalLinks(XmlWriter writer, RelationCollection relations);
    private void SerializeLink(ExternWorkbookImpl externBook, XmlWriter writer, RelationCollection relations);
    private void SerializePagebreaks(XmlWriter writer, IWorksheet sheet);
    private void SerializeFilterColorStream(XmlWriter writer, XmlWriter writerdxf, ColorFilter colorFilter, Int32& iDxfIndex);
    private void SerializeSortData(XmlWriter writer, XmlWriter xmlWriterDxfs, IDataSort dataSorter, Int32& iDxfIndex);
    private void SerializeSortCondition(XmlWriter writer, XmlWriter writerDxf, DataSorter sortState, ISortField sortConditions, Int32& iDxfIndex);
    private void SerializeHorizontalPageBreaks(XmlWriter writer, HPageBreaksCollection hPagebreaks);
    private void SerializeVerticalPageBreaks(XmlWriter writer, VPageBreaksCollection vPagebreaks);
    private void SerializeSinglePagebreak(XmlWriter writer, int iRowColumn, int iStart, int iEnd, ExcelPageBreak type);
    public static void SerializeExtent(XmlWriter writer, Size extent);
    public void SerializeConnections(XmlWriter writer);
    public void SerializeConnection(XmlWriter writer, ExternalConnection connection);
    private void SerializeParameters(XmlWriter writer, IParameters parameters);
    private void SerializeParameter(XmlWriter writer, IParameter parameter);
    [ObsoleteAttribute("This method is obsolete and will be removed soon. Please use SerializeDatabaseProperty(XmlWriter writer, DataBaseProperty dbProperty) method. Sorry for inconvenience.")]
public void SerializeDataBaseProerty(XmlWriter writer, DataBaseProperty dbProperty);
    public void SerializeDatabaseProperty(XmlWriter writer, DataBaseProperty dbProperty);
    public void SerializeWebProperty(XmlWriter writer, ExternalConnection Connection);
    private bool CheckSpecialCharacters(string sheetName);
    private void SerializeCustomBookViews(XmlWriter writer, List`1<Dictionary`2<string, string>> lstCustomBookViews);
    private void SerializeCustomWorkbookView(XmlWriter writer, Dictionary`2<string, string> dicView);
    public void SerializeConditionValueObject(XmlWriter writer, IConditionValue conditionValue, bool isIconSet, bool isMinPoint);
    private void SerializeCombinationFilters(XmlWriter writer, CombinationFilter combinationFilter);
    private void SerializeDateTimeFilter(XmlWriter writer, DateTimeFilter filter);
    private void SerializeDateFilter(XmlWriter writer, DynamicFilter filter);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Excel2010Serializator : Excel2007Serializator {
    private static string VersionValue;
    public static string DataBarUri;
    public static string DataBarExtUri;
    public ExcelVersion Version { get; }
    public Excel2010Serializator(WorkbookImpl book);
    public virtual ExcelVersion get_Version();
    protected virtual void SerilaizeExtensions(XmlWriter writer, WorksheetImpl sheet);
    public void SerializeSparklineGroups(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeSparklineGroup(XmlWriter writer, WorksheetImpl sheet, SparklineGroup sparklineGroup);
    private void SerializeSparklines(XmlWriter writer, WorksheetImpl sheet, Sparklines sparklines);
    private void SerializeSparkline(XmlWriter writer, WorksheetImpl sheet, Sparkline sparkline);
    protected virtual void SerializeAppVersion(XmlWriter writer);
    internal bool HasExtensionListOnCF(WorksheetImpl sheet, Boolean& isStreamPreserved);
    public void SerializeConditionalFormattings(XmlWriter writer, WorksheetImpl sheet);
    public void SerializeConditionValueObject(XmlWriter writer, IConditionValue conditionValue, bool isIconSet);
    public void SerializeRgbColor(XmlWriter writer, string tagName, ColorObject color);
    public void SerializeConditionValueObject(XmlWriter writer, IConditionValue conditionValue, bool isIconSet, bool isMinPoint);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Excel2013Serializator : Excel2010Serializator {
    private static string VersionValue;
    public ExcelVersion Version { get; }
    public Excel2013Serializator(WorkbookImpl book);
    public virtual ExcelVersion get_Version();
    protected virtual void SerializeAppVersion(XmlWriter writer);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Excel2016Serializator : Excel2013Serializator {
    private static string VersionValue;
    public ExcelVersion Version { get; }
    public Excel2016Serializator(WorkbookImpl book);
    public virtual ExcelVersion get_Version();
    protected virtual void SerializeAppVersion(XmlWriter writer);
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.XmlSerialization.FileDataHolder : object {
    private static string ContentTypesItemName;
    internal static string RelationsDirectory;
    internal static string RelationExtension;
    private static string TopRelationsPath;
    private static string XmlExtension;
    private static string RelsExtension;
    public static string BinaryExtension;
    private static string WorkbookPartName;
    private static string CustomXmlPartName;
    private static string PersonPartName;
    private static string MetadataName;
    private static string SSTPartName;
    private static string StylesPartName;
    private static string ThemesPartName;
    private static string DefaultWorksheetPathFormat;
    private static string DefaultChartsheetPathFormat;
    private static string DefaultDialogsheetPathFormat;
    private static string DefaultMacrosheetPathFormat;
    private static string DefaultIntlMacrosheetPathFormat;
    public static string DefaultPicturePathFormat;
    public static string ExtendedPropertiesPartName;
    public static string CorePropertiesPartName;
    public static string CustomPropertiesPartName;
    private static string RelationIdFormat;
    public static string ExternLinksPathFormat;
    private static string ExtenalLinksPathStart;
    public static string CustomPropertyPathStart;
    public static string PivotCacheDefinitionPathFormat;
    public static string PivotCacheRecordsPathFormat;
    public static string PivotTablePathFormat;
    private static string TablePathFormat;
    private static string SlicerPathFormat;
    private static string SlicerCachePathFormat;
    private static string ConnectionPathFormat;
    private static string QueryTablePathFormat;
    private static string XmlMapsPathName;
    private static string XmlMapsPartName;
    private static string VbaProjectPath;
    private List`1<string> m_chartAndTableItemsToRemove;
    private List`1<string> m_sheetItems;
    private Dictionary`2<string, MemoryStream> m_metafileStream;
    private ZipArchive m_archive;
    private WorkbookImpl m_book;
    private Excel2007Parser m_parser;
    private IDictionary`2<string, string> m_dicDefaultTypes;
    private IDictionary`2<string, string> m_dicOverriddenTypes;
    private RelationCollection m_topRelations;
    private string m_strWorkbookPartName;
    private string m_strPersonPartName;
    private string m_strMetadataPartName;
    private string m_strSSTPartName;
    private string m_strStylesPartName;
    private string m_connectionPartName;
    private string m_queryTablePartName;
    private string m_strThemesPartName;
    private Excel2007Serializator m_serializator;
    private List`1<int> m_arrCellFormats;
    private RelationCollection m_workbookRelations;
    private string m_strStylesRelationId;
    private string m_strPersonRelationId;
    private string m_strMetadataRelationId;
    private string m_strSlicerCacheRelationId;
    private string m_strSSTRelationId;
    private string m_strThemeRelationId;
    private string m_strWorkbookContentType;
    private Stream m_streamEnd;
    private Stream m_streamStart;
    private Stream m_streamDxfs;
    private int m_iCommentIndex;
    private int m_iThreadedCommentIndex;
    private int m_iVmlIndex;
    private int m_iDrawingIndex;
    private int m_iImageIndex;
    private int m_iImageId;
    private int m_iLastChartIndex;
    private int m_iLastChartExIndex;
    private int m_iLastPivotCacheIndex;
    private RelationCollection m_relations;
    private int m_iLastPivotCacheRecordsIndex;
    private int m_iExternLinkIndex;
    private String[] m_arrImageItemNames;
    private List`1<DxfImpl> m_lstParsedDxfs;
    private List`1<Dictionary`2<string, string>> m_lstBookViews;
    private Dictionary`2<string, object> m_dictItemsToRemove;
    private Stream m_functionGroups;
    private FileVersion m_fileVersion;
    private string m_strCalculationId;
    private List`1<string> m_slicerCacheId;
    private Dictionary`2<string, string> m_preservedCaches;
    private Stream m_extensions;
    private string m_strConnectionId;
    private int m_queryTableCount;
    private List`1<Dictionary`2<string, string>> m_lstCustomBookViews;
    private List`1<string> m_drawingsItemPath;
    public WorkbookImpl Workbook { get; }
    public Excel2007Parser Parser { get; }
    public ZipArchiveItem Item { get; }
    public Excel2007Serializator Serializator { get; }
    public List`1<int> XFIndexes { get; }
    public ZipArchive Archive { get; }
    public int LastCommentIndex { get; public set; }
    internal int LastThreadedCommentIndex { get; internal set; }
    public int LastVmlIndex { get; public set; }
    public int LastDrawingIndex { get; public set; }
    public int LastImageIndex { get; public set; }
    public int LastImageId { get; public set; }
    public int LastChartIndex { get; public set; }
    internal int LastChartExIndex { get; internal set; }
    internal int LastPivotCacheIndex { get; internal set; }
    internal int LastPivotCacheRecordsIndex { get; internal set; }
    public IDictionary`2<string, string> DefaultContentTypes { get; }
    public IDictionary`2<string, string> OverriddenContentTypes { get; }
    public int ParsedDxfsCount { get; }
    public Dictionary`2<string, object> ItemsToRemove { get; }
    public string CalculationId { get; public set; }
    internal List`1<string> SlicerCacheId { get; internal set; }
    public FileVersion FileVersion { get; }
    public Dictionary`2<string, string> PreservedCaches { get; }
    public Stream ExtensionStream { get; public set; }
    internal List`1<string> ChartAndTableItemsToRemove { get; }
    internal List`1<string> DrawingsItemPath { get; internal set; }
    internal RelationCollection Relations { get; }
    internal RelationCollection WorkbookRelations { get; }
    public FileDataHolder(WorkbookImpl book);
    public FileDataHolder(WorkbookImpl book, Stream stream, string password);
    private ExcelVersion CheckVersion(ICompoundStorage storage);
    private void RerequestPassword(String& password, ApplicationImpl excel);
    private void RequestPassword(String& password, ApplicationImpl excel);
    public WorkbookImpl get_Workbook();
    public Excel2007Parser get_Parser();
    public ZipArchiveItem get_Item(Relation relation, string parentPath);
    public Excel2007Serializator get_Serializator();
    public List`1<int> get_XFIndexes();
    public ZipArchive get_Archive();
    public int get_LastCommentIndex();
    public void set_LastCommentIndex(int value);
    internal int get_LastThreadedCommentIndex();
    internal void set_LastThreadedCommentIndex(int value);
    public int get_LastVmlIndex();
    public void set_LastVmlIndex(int value);
    public int get_LastDrawingIndex();
    public void set_LastDrawingIndex(int value);
    public int get_LastImageIndex();
    public void set_LastImageIndex(int value);
    public int get_LastImageId();
    public void set_LastImageId(int value);
    public int get_LastChartIndex();
    public void set_LastChartIndex(int value);
    internal int get_LastChartExIndex();
    internal void set_LastChartExIndex(int value);
    internal int get_LastPivotCacheIndex();
    internal void set_LastPivotCacheIndex(int value);
    internal int get_LastPivotCacheRecordsIndex();
    internal void set_LastPivotCacheRecordsIndex(int value);
    public IDictionary`2<string, string> get_DefaultContentTypes();
    public IDictionary`2<string, string> get_OverriddenContentTypes();
    public int get_ParsedDxfsCount();
    public Dictionary`2<string, object> get_ItemsToRemove();
    public string get_CalculationId();
    public void set_CalculationId(string value);
    internal List`1<string> get_SlicerCacheId();
    internal void set_SlicerCacheId(List`1<string> value);
    public FileVersion get_FileVersion();
    public Dictionary`2<string, string> get_PreservedCaches();
    public Stream get_ExtensionStream();
    public void set_ExtensionStream(Stream value);
    internal List`1<string> get_ChartAndTableItemsToRemove();
    internal List`1<string> get_DrawingsItemPath();
    internal void set_DrawingsItemPath(List`1<string> value);
    internal RelationCollection get_Relations();
    internal RelationCollection get_WorkbookRelations();
    public void AddOverriddenContentType(string fileName, string contentType);
    public List`1<DxfImpl> ParseDxfsCollection();
    public WorksheetDataHolder GetSheetData(string sheetPath);
    public WorksheetBaseImpl GetSheet(string sheetName);
    public void ParseDocument(List`1& themeColors, bool parseOnDemand);
    private bool FindWorkbookPartName(string strContentType);
    internal ExcelSaveType GetWorkbookPartType();
    public void ParseContentType();
    internal void ParseSlicerCache(WorkbookImpl book, Relation relation);
    public void ParseDocumentProperties();
    public void ParseArchiveItemByContentType(string strContentType);
    public XmlReader GetXmlReaderByContentType(string strContentType, String& strItemName);
    public void SaveDocument(Stream stream, ExcelSaveType saveType);
    public void SaveDocument(ExcelSaveType saveType);
    public string RegisterContentTypes(ImageFormat imageFormat);
    internal string RegisterSvgContentType();
    public static string GetPictureContentType(ImageFormat format, String& strExtension);
    public string SaveImage(Image image, string proposedPath);
    public string SaveImage(Image image, ImageFormat imageFormat, string proposedPath);
    private ImageFormat GetImageFormat(string extension);
    public string GetImageItemName(int i);
    public string PrepareNewItem(string itemNameStart, string extension, string contentType, RelationCollection relations, string relationType, Int32& itemsCounter, ZipArchiveItem& item);
    private string GetExtension(ImageFormat format);
    private void ParseWorkbook(List`1& themeColors, bool parseOnDemand);
    private void ParseMetaProperties();
    private void ParseCustomXmlParts();
    private void ParseCustomXmlParts(string xmlName, ICustomXmlPartCollection customXmlParts, string xmlId, List`1<string> schemas);
    private string ParseCustomXmlItemProperties(string propertyName, List`1& schemas);
    internal void ParsePivotCaches(string strWorkbookPath);
    internal PivotCacheImpl ParsePivotCache(string strWorkbookPath, string relationID, String& strItemName);
    internal RelationCollection ParseRelations(string itemPath);
    private string FindItemByContent(string contentType);
    private string FindItemByContentInDefault(string contentType);
    private string FindItemByContentInOverride(string contentType);
    internal static string GetCorrespondingRelations(string itemName);
    internal static string SeparateItemName(string itemName, String& path);
    internal Image GetImage(string strFullPath);
    internal static XmlReader CreateReader(ZipArchiveItem item);
    internal XmlReader CreateReader(Relation relation, string parentItemPath);
    public XmlReader CreateReaderAndFixBr(Relation relation, string parentItemPath, String& strItemPath);
    internal XmlReader CreateReader(Relation relation, string parentItemPath, String& strItemPath);
    internal ZipArchiveItem GetItem(Relation relation, string parentItemPath, String& strItemPath);
    internal Byte[] GetData(Relation relation, string parentItemPath, bool removeItem);
    internal void ParseExternalLink(string relationId);
    internal static string CombinePath(string startPath, string endPath);
    private void SaveContentTypes();
    private void SaveDocumentProperties();
    private void SaveContentTypeProperties();
    private void SaveArchiveItemRelationContentType(string partName, string contentType, string relationType);
    private void SaveArchiveItem(string strItemPartName);
    private void FillDefaultContentTypes();
    private void SaveTopLevelRelations();
    internal static string GetRelationId(int relationIndex);
    private void SaveWorkbook(ExcelSaveType saveAsType);
    private string SelectWorkbookContentType(ExcelSaveType saveType);
    private Dictionary`2<PivotCacheImpl, string> SavePivotCaches();
    private string SavePivotCache(PivotCacheImpl cache);
    private string SavePivotCacheDefinition(PivotCacheImpl cache, string cacheRecordFileName);
    private string SavePivotCacheRecords(PivotCacheImpl cache);
    private string GeneratePivotCacheRecordsFileName(PivotCacheImpl cache);
    private string GeneratePivotCacheFileName(PivotCacheImpl cache);
    private String[] SaveWorkbookImages();
    private string SerializeBSE(MsofbtBSE bse);
    private void CustomXmlParts();
    private void SerializeCustomXmlRelation(string xmlpartname, string propertyname);
    private void SerializeCustomXmlPart(string xmlpartname, Byte[] data);
    private void SerializeCustomXmlItemProperty(string xmlpartname, string propertyname, ICustomXmlPart customXmlPart);
    private Dictionary`2<int, int> SaveStyles();
    private void SavePerson();
    internal void SaveMetadata();
    private void SaveSST();
    private void SaveSlicerCache();
    private void SaveWorkbookPart(Dictionary`2<int, int> hashNewXFIndexes, Dictionary`2<PivotCacheImpl, string> cacheFiles);
    private void SaveMacros();
    internal static string AddRelation(RelationCollection relations, string target, string parentPath, string type, string relationId);
    public void SaveRelations(string parentPartName, RelationCollection relations);
    private void SaveSheets(RelationCollection relations, string workbookItemName, Dictionary`2<int, int> hashNewXFIndexes, Dictionary`2<PivotCacheImpl, string> cacheFiles);
    private void ReserveSheetRelations(WorkbookObjectsCollection sheets, RelationCollection relations);
    private void SaveSheet(WorksheetBaseImpl sheet, string itemName, RelationCollection relations, string workbookPath, Dictionary`2<int, int> hashNewXFIndexes, Dictionary`2<PivotCacheImpl, string> cacheFiles);
    private void SaveDialogSheet(DialogSheet dialogSheet, string itemName, RelationCollection relations, string workbookPath, Dictionary`2<int, int> hashNewXFIndexes, Dictionary`2<PivotCacheImpl, string> cacheFiles);
    private void SaveMacroSheet(MacroSheet macroSheet, string itemName, RelationCollection relations, string workbookPath, Dictionary`2<int, int> hashNewXFIndexes, Dictionary`2<PivotCacheImpl, string> cacheFiles);
    private void SaveWorksheet(WorksheetImpl sheet, string itemName, Dictionary`2<int, int> hashNewXFIndexes, Dictionary`2<PivotCacheImpl, string> cacheFiles);
    private void UpdateArchiveItem(WorksheetImpl sheet, string itemName);
    private void SaveChartsheet(ChartImpl chart, string itemName);
    private void SerializeExistingData(WorksheetBaseImpl sheet, string itemName);
    private void RemoveCalcChain();
    internal void RemoveRelation(string strItemName, string relationID);
    public string SerializeExternalLink(ExternWorkbookImpl externBook);
    private string GenerateExternalLinkName();
    private string GenerateItemName(Int32& itemsCount, string pathStart, string extension);
    private string GenerateItemName(Int32& itemsCount, string pathFormat);
    private string GenerateQueryItemName(Int32& itemsCount, string pathFormat);
    internal string GeneratePivotTableName(int lastIndex);
    internal void CreateDataHolder(WorksheetBaseImpl tabSheet, string fileName);
    internal string SerializeTable(IListObject listObject);
    internal string SerializeSlicer(ISlicers slicers);
    private bool checkconnection(UInt32 id);
    private string GenerateTableFileName();
    private string GenerateSlicerFileName();
    private string GenerateSlicerCacheFileName();
    private string GenerateQueryTableFileName();
    public string GetContentType(string strTarget);
    public void Connections();
    public void SerializeQueryTable(IListObject listobject, string itemName, string tablerels);
    public void SerializeTableRelation(string ItemName, string queryTable);
    private void SaveXmlMaps();
    public sealed virtual void Serialize(Stream stream, WorkbookImpl book, ExcelSaveType saveType);
    internal FileDataHolder Clone(WorkbookImpl newParent);
    private List`1<Dictionary`2<string, string>> CloneViews();
    private List`1<DxfImpl> CloneDxfs();
    internal void RegisterCache(string cacheId, string relationId);
    public sealed virtual void Dispose();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.FileVersion : object {
    public string ApplicationName;
    public string BuildVersion;
    public string LastEdited;
    public string LowestEdited;
    public string CodeName;
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.GradientSerializator : object {
    public void Serialize(XmlWriter writer, GradientStops gradientStops, IWorkbook book);
    private void SerializeGradientStops(XmlWriter writer, GradientStops gradientStops, IWorkbook book);
    private void SerializeGradientStop(XmlWriter writer, GradientStopImpl gradientStop, IWorkbook book);
    private void SerializeSchemeColor(XmlWriter writer, GradientStopImpl gradienstop, IWorkbook book);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.MyXmlNamespaceManager : XmlNamespaceManager {
    private string m_missingNamespacePrefix;
    private int m_missingNamespaceIndex;
    private Dictionary`2<string, string> m_missingNamespaces;
    private string DefaultMissingNamespacePrefix;
    internal string MissingNamespacePrefix { get; internal set; }
    internal int NextMissingNamespaceIndex { get; internal set; }
    internal Dictionary`2<string, string> MissingNamespaces { get; internal set; }
    internal MyXmlNamespaceManager(XmlNameTable nameTable);
    internal MyXmlNamespaceManager(XmlNameTable nameTable, string missingNamespacePrefix);
    internal string get_MissingNamespacePrefix();
    internal void set_MissingNamespacePrefix(string value);
    internal int get_NextMissingNamespaceIndex();
    internal void set_NextMissingNamespaceIndex(int value);
    internal Dictionary`2<string, string> get_MissingNamespaces();
    internal void set_MissingNamespaces(Dictionary`2<string, string> value);
    internal void AddMissingNamespace(string prefix);
    public virtual bool HasNamespace(string prefix);
    public virtual string LookupNamespace(string prefix);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.PivotTables.PivotCacheSerializator : object {
    private static int ApplicationVersion;
    public static void SerializePivotCacheDefinition(XmlWriter writer, PivotCacheImpl cache, IWorkbook book, string relationId, RelationCollection relations);
    private static void RegisterStrings(WorkbookImpl workbookImpl, ExternalRange range);
    private static void SerializeCacheFields(XmlWriter writer, PivotCacheFieldsCollection fieldsCollection, bool hasNamedRange);
    private static void SerializeCacheField(XmlWriter writer, PivotCacheFieldImpl field, bool hasNamedRange);
    private static void SerializeSharedItems(XmlWriter writer, PivotCacheFieldImpl field, bool HasNamedRange);
    private static void SerializeCacheSource(XmlWriter writer, PivotCacheImpl cache, RelationCollection relations);
    private static void SerializeScenarioSource(XmlWriter writer, PivotCacheImpl cache);
    private static void SerializeWorksheetSource(XmlWriter writer, PivotCacheImpl cache, RelationCollection relations);
    private static string SerializeExternalRelation(ExternalRange externalRange, RelationCollection relations);
    public static void SerializeExternalSource(XmlWriter writer, PivotCacheImpl cache);
    public static void SerializeConsolidation(XmlWriter writer, PivotCacheImpl cache);
    public static void SerializePivotCacheRecords(XmlWriter writer, PivotCacheImpl cache, MemoryStream memory);
    private static void SerializePivotCacheValue(XmlWriter writer, object value, bool isCalculated);
    private static void SerializeCalculatdItems(XmlWriter writer, PivotCacheFieldsCollection fields);
    private static void SerializeCalculatedItems(XmlWriter writer, PivotCalculatedItems items);
    private static void SerializeCalculatedItem(XmlWriter writer, PivotCalculatedItemImpl item);
    internal static void SerializePivotArea(XmlWriter writer, PivotArea area, bool isAutoSort);
    internal static void SerializePivotAreaReferences(XmlWriter writer, PivotAreaReferences references, bool isAutoSort);
    internal static void SerializePivotAreaReference(XmlWriter writer, PivotAreaReference reference);
    private static void SerializeFieldGroupParent(XmlWriter writer, PivotCacheFieldImpl field, int parentIndex);
    private static void SerializeFieldGroup(XmlWriter writer, PivotCacheFieldImpl field);
    private static void SerializeGroupItems(XmlWriter writer, FieldGroupImpl fieldGroup);
    private static void SerializeRangeProperties(XmlWriter writer, FieldGroupImpl fieldGroup);
    private static void SerializeDiscreteProperties(XmlWriter writer, FieldGroupImpl fieldGroup);
    private static void SerializeCacheHierarchies(XmlWriter writer, PivotCacheImpl cache);
    private static void SerializeCacheExtensions(XmlWriter writer, PivotCacheImpl cache, IWorkbook book);
    private static void SerializeOLAPKPIs(XmlWriter writer, PivotCacheImpl cache);
    private static void SerializeOLAPDimesions(XmlWriter writer, PivotCacheImpl cache);
    private static void SerializeOLAPMeasureGroups(XmlWriter writer, PivotCacheImpl cache);
    private static void SerializeOLAPMaps(XmlWriter writer, PivotCacheImpl cache);
    private static List`1<int> PrepareCalculatedItemOption(PivotCacheFieldImpl field);
    internal static void SerializeAttribute(XmlWriter writer, string attributeName, Enum value, Enum defaultValue);
    private static string GetErrorString(ushort value);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.PivotTables.PivotEngineSerialization : object {
    private ExtendedFormatImpl extendedFormat;
    private PivotTableImpl pivotTableImple;
    public PivotEngine PopulatePivotEngine(IWorksheet sheet, PivotTableImpl pivotTable);
    internal string UpdateColumnName(string columnName);
    private void SetPivotTableOptions(PivotEngine pivotEngine, PivotTableImpl pivotTable);
    public void RenderPivotTable(PivotEngine pivotEngine, IWorksheet pivotSheet, PivotTableImpl pivotTable);
    private void RenderOutlineLayout(PivotEngine pivotEngine, IWorksheet pivotSheet, PivotTableImpl pivotTable);
    private void AddValuesRow(bool isValuePresent, int columnPosition, int maxRow, int maxColumn, IWorksheet pivotSheet, PivotTableImpl pivotTable, Int32& valuesRow);
    private void SetOutline(PivotTableImpl pivotTable, PivotEngine pivotEngine);
    private void RenderTabularLayout(PivotEngine pivotEngine, IWorksheet pivotSheet, PivotTableImpl pivotTable);
    private void SetTabularSpecificStyles(PivotTableLayout layOut);
    private void SetSubTotalRow(PivotTableLayout layout);
    private void RenderCompactLayout(PivotEngine pivotEngine, IWorksheet pivotSheet, PivotTableImpl pivotTable);
    public object ReplaceDelimiter(object replacableValue, string delimiter, string newValue);
    public void AutoFitPivotTable(IRange range, IPivotTable pivotTable);
    private void FillPivotValue(int rowIndex, int columnIndex, object value, PivotCellType cellType, PivotTableLayout layOut, PivotTableParts partStyle);
    private void SetSubtotalColumn(PivotTableLayout layout);
    private void SetExtendedFormat(PivotTableLayout layout);
    private void SetPivotFormat(PivotTableLayout layout, PivotTableImpl pivotTable);
    private void ApplyPivotFormatToCell(RangeImpl range, ExtendedFormatImpl extendedFormat);
    private PivotTableParts GetRowHeading(int expanderCount);
    private PivotTableParts GetColumnHeading(int expanderCount);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.PivotTables.PivotTableSerializator : object {
    private static int DataFieldsIndex;
    private static string PercentageIndexFormat;
    public static void SerializePivotTable(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeRowItems(XmlWriter writer, PivotTableImpl pivotTable, PivotEngine pivotEngine);
    private static void SerializeColumnItems(XmlWriter writer, PivotTableImpl pivotTable, PivotEngine pivotEngine);
    private static void SerializeTableDefinitionExtensionList(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeChartFormats(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeCustomFormats(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeFilters(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializePivotFilter(XmlWriter writer, PivotTableFilter filter);
    private static void SerializeAutoFilter(XmlWriter writer, PivotAutoFilter autoFilters);
    private static void SerializeFilterColumn(XmlWriter writer, PivotFilterColumn filterColumn);
    private static void SerializeCustomFilters(XmlWriter writer, PivotCustomFilters customFilters);
    private static void SerializeCustomFilter(XmlWriter writer, PivotCustomFilter customFilter);
    private static void SerializeFilterColumnFilters(XmlWriter writer, FilterColumnFilters filters);
    private static void SerializeTop10Filter(XmlWriter writer, PivotTop10Filter top10Filter);
    private static void SerializeDynamicFilter(XmlWriter writer, PivotDynamicFilter dynamicFilter);
    private static void SerializeConditionalFormats(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializePageFields(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeStyle(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeRowFields(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeColumnFields(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeFields(XmlWriter writer, PivotTableImpl pivotTable, PivotAxisTypes axis, string tagName, string itemsTagName, bool bAddDataFields);
    private static void CheckIsEqual(List`1<int> lstFields, Int32[] copyIndexs);
    private static void SerializeColumnItems(XmlWriter writer, List`1<int> lstFields, string itemsTagName, PivotTableImpl table);
    private static void SerializeDataFields(XmlWriter writer, PivotTableImpl pivotTable);
    internal static string GetFieldNumberFormatIndex(PivotFieldDataFormat dataFormat, string FieldIndex);
    internal static void SerializeSubtotal(XmlWriter writer, PivotSubtotalTypes pivotSubtotalTypes);
    private static List`1<PivotFieldImpl> SerializePivotFields(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializePivotField(XmlWriter writer, PivotFieldImpl pivotField, PivotTableImpl table, List`1<string> fieldName);
    private static void SerializePivotFieldExtensionList(XmlWriter writer, PivotFieldImpl pivotField);
    private static void SerializeSubtotalFlags(XmlWriter writer, PivotSubtotalTypes subtotal);
    private static void SerializeSubtotalFlags(XmlWriter writer, PivotSubtotalTypes subtotal, PivotSubtotalTypes subtotalItem, bool defaultValue, string attributeName);
    private static void SerializeDataField(XmlWriter writer, PivotFieldImpl field);
    private static void SerializeOrdinaryField(XmlWriter writer, PivotFieldImpl field);
    internal static object GetValue(PivotDataType type, string value);
    private static void SerializeAutoSortScope(XmlWriter writer, PivotFieldImpl field);
    private static void SerializeFieldItem(XmlWriter writer, int index, PivotItemOptions item);
    private static void SerializeSubtotalItems(XmlWriter writer, PivotItemType subtotal);
    private static void SerializeSubtotalItems(XmlWriter writer, PivotSubtotalTypes subtotal);
    internal static SortedList`2<ComparisonPair, object> SortFieldValues(PivotCacheFieldImpl field);
    internal static List`1<ComparisonPair> SortFieldValues(PivotCacheFieldImpl field, List`1<string> orderBy);
    internal static List`1<ComparisonPair> SortFieldValues(PivotFieldImpl field, List`1<string> orderBy, bool bBuiltInSort);
    internal static List`1<ComparisonPair> SortFieldValues(PivotFieldImpl field);
    internal static List`1<ComparisonPair> SortPivotInnerItems(List`1<PivotInnerItem> innerItems, PivotTableImpl pivotTable);
    private static void SerializeLocation(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializePivotHierarchies(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeRowHierarchies(XmlWriter writer, PivotTableImpl pivotTable);
    private static void SerializeColumnHierarchies(XmlWriter writer, PivotTableImpl pivotTable);
    internal static void SerializeAttributeString(XmlWriter writer, string attributeName, bool value, bool defaultValue);
    internal static void SerializeAttributeString(XmlWriter writer, string attributeName, byte value);
    internal static void SerializeAttributeString(XmlWriter writer, string attributeName, ushort value);
    internal static void SerializeAttributeString(XmlWriter writer, string attributeName, UInt32 value);
    internal static void SerializeAttributeString(XmlWriter writer, string attributeName, int value);
    internal static bool IsDataFieldsInRow(PivotTableImpl table);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Relation : object {
    private string m_strTarget;
    private string m_strType;
    private bool m_bIsExternal;
    public string Target { get; }
    public string Type { get; }
    public bool IsExternal { get; }
    public Relation(string target, string type);
    public Relation(string target, string type, bool isExternal);
    public string get_Target();
    public string get_Type();
    public bool get_IsExternal();
    public sealed virtual object Clone();
}
[DefaultMemberAttribute("Item")]
public class Syncfusion.XlsIO.Implementation.XmlSerialization.RelationCollection : object {
    private static string RelationIdStart;
    private static int RelationIdStartLen;
    private Dictionary`2<string, Relation> m_dicRelations;
    private string m_strItemPath;
    private int m_hyperlinkCount;
    public Relation Item { get; public set; }
    public int Count { get; }
    public string ItemPath { get; public set; }
    internal Dictionary`2<string, Relation> DicRelations { get; }
    private static RelationCollection();
    public Relation get_Item(string id);
    public void set_Item(string id, Relation value);
    public int get_Count();
    public string get_ItemPath();
    public void set_ItemPath(string value);
    internal Dictionary`2<string, Relation> get_DicRelations();
    public void Remove(string id);
    public void RemoveByContentType(string contentType);
    internal void RemoveRelationByTarget(string targetName);
    public Relation FindRelationByContentType(string contentType, String& relationId);
    internal int CalculatePivotTableRelationInWorkbook(string contentType);
    public string FindRelationByTarget(string itemName);
    public string GenerateRelationId();
    internal string GenerateHyperlinkRelationId();
    public string Add(Relation relation);
    internal string Add(Relation relation, int index);
    internal string Add(Relation relation, string strId);
    public void Clear();
    public RelationCollection Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public void Dispose();
    public sealed virtual IEnumerator GetEnumerator();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.RelationTypes : object {
    public static string Workbook;
    public static string Styles;
    internal static string Person;
    internal static string Metadata;
    public static string SST;
    public static string CalcChain;
    public static string VmlDrawings;
    public static string WorksheetComments;
    internal static string WorksheetThreadedComments;
    public static string Drawings;
    public static string ChartDrawings;
    public static string PackageNamespace;
    public static string Themes;
    public static string Image;
    public static string CoreProperties;
    public static string ExtendedProperties;
    public static string CustomProperties;
    public static string ExternLinkPath;
    public static string ExternalLink;
    public static string Chart;
    public static string WorksheetCustomProperty;
    public static string MissingPath;
    public static string PivotCacheDefinition;
    public static string PivotCacheRecords;
    public static string PivotTable;
    public static string Table;
    internal static string Slicer;
    internal static string SlicerCache;
    public static string OleObject;
    public static string DdeObject;
    public static string Connection;
    public static string QueryTable;
    internal static string ThemeOverride;
    internal static string XmlMaps;
    internal static string ChartEx;
    internal static string VbaProject;
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.BitmapShapeSerializator : DrawingShapeSerializator {
    private Dictionary`2<string, Stream> m_svgDataCollection;
    private Dictionary`2<string, Stream> SvgDataCollection { get; }
    private Dictionary`2<string, Stream> get_SvgDataCollection();
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    internal void SerializePicture(XmlWriter writer, BitmapShapeImpl picture, string relationId, WorksheetDataHolder holder, string mainNamespace);
    internal void AddSvg(BitmapShapeImpl picture, WorksheetDataHolder holder, RelationCollection relations);
    private void SerializeShapeProperties(XmlWriter writer, BitmapShapeImpl picture, string mainNamespace);
    private void SerializeEffectProperties(XmlWriter xmlTextWriter, BitmapShapeImpl picture, string node);
    private void SerializeNonVisualProperties(XmlWriter writer, BitmapShapeImpl picture, WorksheetDataHolder holder, string mainNamespace);
    private void SerializeNVPictureCanvasProperties(XmlWriter writer, BitmapShapeImpl picture, string mainNamespace);
    private void SerializeBlipFill(XmlWriter writer, BitmapShapeImpl picture, string relationId, string mainNamespace);
    private static void SerializeDuoTone(XmlWriter xmlWriter, BitmapShapeImpl picture);
    private static void SerializeColorChange(XmlWriter xmlWriter, BitmapShapeImpl picture);
    public virtual void SerializeShapeType(XmlWriter writer, Type shapeType);
    public string SerializePictureFile(WorksheetDataHolder holder, BitmapShapeImpl picture, RelationCollection vmlRelations);
    internal string GetSvgPicturePath(Stream svgStream, WorksheetDataHolder holder);
    private void SerializeExtensionList(XmlWriter xmlWriter, BitmapShapeImpl picture);
    private void SerializePreservedNode(XmlWriter xmlTextWriter, BitmapShapeImpl picture, string node);
    private void SerializeFillProperties(XmlWriter xmlTextWriter, BitmapShapeImpl picture, string node);
    internal virtual void Clear();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.ChartShapeSerializator : DrawingShapeSerializator {
    public static string ChartItemPath;
    internal static string ChartExItemPath;
    internal static string ColorsItemPath;
    internal static string StyleItemPath;
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    internal string SerializeChartFile(WorksheetDataHolder holder, ChartImpl chart, String& chartFileName);
    public static string GetChartFileName(WorksheetDataHolder holder, ChartImpl chart);
    internal static string GetChartExFileName(WorksheetDataHolder holder, ChartImpl chart);
    internal void SerializeChartProperties(XmlWriter writer, ChartShapeImpl chart, string strRelationId, WorksheetDataHolder holder, bool isGroupShape);
    private void SerializeGraphics(XmlWriter writer, ChartShapeImpl chart, string strRelationId, bool isChartEx);
    internal void SerializeSlicerGraphics(XmlWriter writer, ChartShapeImpl shape);
    internal void SerializeNonVisualGraphicFrameProperties(XmlWriter writer, ChartShapeImpl chart, WorksheetDataHolder holder);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.CheckBoxShapeSerializator : VmlTextBoxBaseSerializator {
    protected int ShapeInstance { get; }
    protected string ShapeType { get; }
    protected virtual int get_ShapeInstance();
    protected virtual string get_ShapeType();
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    protected virtual void SerializeClientDataAdditional(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeDiv(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeShapeTypeSubNodes(XmlWriter writer);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.ComboBoxShapeSerializator : ShapeSerializator {
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    public virtual void SerializeShapeType(XmlWriter writer, Type shapeType);
    private void SerializeClientData(XmlWriter writer, ComboBoxShapeImpl comboBox);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.CommentShapeSerializator : VmlTextBoxBaseSerializator {
    protected int ShapeInstance { get; }
    protected string ShapeType { get; }
    protected virtual int get_ShapeInstance();
    protected virtual string get_ShapeType();
    protected virtual void PrepareStyleProperties(List`1<string> properties, ShapeImpl shape);
    protected virtual void SerializeClientDataAdditional(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeShapeNodes(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeShapeTypeSubNodes(XmlWriter writer);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.Drawings : object {
    internal static string ObjectprTag;
    internal static string MoveWithCellsTag;
    internal static string SizeWithCellsTag;
    internal static string DefaultSizeTag;
    public static string XdrNamespace;
    public static string ANamespace;
    internal static string A16Namespace;
    internal static string SvgNamespace;
    public static string CdrNamespace;
    internal static string A14Namespace;
    public static string XdrPreffix;
    public static string CdrPreffix;
    public static string APreffix;
    internal static string A14Preffix;
    internal static string A16Preffix;
    internal static string CreationId;
    internal static string Sle;
    internal static string Sle15;
    internal static string CameraTool;
    internal static string CellRange;
    internal static string CameraToolUri;
    internal static string ASvgPreffix;
    public static string AlternateContentTag;
    public static string ChoiceTag;
    internal static string RequiresAttribute;
    internal static string FallbackTag;
    public static string TwoCellAnchorTagName;
    public static string OneCellAnchorTagName;
    internal static string ControlTagName;
    internal static string ControlPrTag;
    public static string EditAsAttribute;
    public static string FromTagName;
    public static string ToTagName;
    public static string ColumnTagName;
    public static string ColumnOffsetTagName;
    public static string RowTagName;
    public static string RowOffsetTagName;
    public static string NVPicturePropertiesTag;
    public static string NVCanvasPropertiesTag;
    public static string NVGroupShapePropertiesTag;
    public static string GroupShapePropertiesTag;
    public static string NVConnectorShapeProperties;
    public static string NVPictureCanvasPropertiesTag;
    public static string ClickHyperlinkTag;
    public static string BlipFillTagName;
    public static string BlipTagName;
    public static string AlphaModFixTag;
    public static string AlphaModFixattribute;
    public static string EmbeddedPicture;
    internal static string LinkPicture;
    public static string PositionSizeAbsolute;
    public static string PositionRelative;
    public static string PositionSizeRelative;
    public static string StretchTagName;
    public static string TileTagName;
    public static string SourceRectangleTagName;
    public static string FillRectTagName;
    public static string PictureTagName;
    public static string IdAttributeName;
    public static string NameAttributeName;
    public static string DescriptionAttributeName;
    public static string PictureLocksTag;
    public static string NoChangeAspectAttribute;
    public static string ShapePropertiesTag;
    public static string ThicknessTag;
    public static string PictureoptionTag;
    public static string PictureformatTag;
    internal static string PictureStackUnitTag;
    public static string Valueattribite;
    public static string Transform2DTag;
    public static string Offset;
    public static string Extents;
    internal static string ChildOffset;
    internal static string ChildExtents;
    public static string XAttributeName;
    public static string YAttributeName;
    public static string CXAttributeName;
    public static string CYAttributeName;
    public static string PresetGeometryTag;
    public static string CustomGeometryTag;
    public static string EffectTag;
    public static string ShapePropertiesExtensionList;
    public static string InvertSolidFillFormat;
    public static string PresetShapeAttribute;
    public static string DrawingTagName;
    public static string WorksheetDrawings;
    public static string AdjustValuesList;
    public static string ClientDataTagName;
    public static string LocksWithSheet;
    public static string PrintsWithSheet;
    public static string GraphicFrame;
    public static string Slicer;
    public static string Shape;
    public static string ConnectionShape;
    public static string GroupShape;
    public static string MacroAttribute;
    public static string GraphicTag;
    public static string GraphicDataTag;
    public static string UriAttribute;
    public static string NonVisualGraphicFramePr;
    public static string TextBodyPropertiesTag;
    public static string ListStylesTag;
    public static string Paragraphs;
    public static string ParagraphProperties;
    public static string DefaultParagraphProperites;
    public static string ParagraphRun;
    public static string breakTag;
    public static string ParagraphEndProperties;
    public static string RotationAttribute;
    public static string ParagraphText;
    public static string TextRunProperites;
    public static string FontBoldAttribute;
    public static string FontItalicAttribute;
    public static string FontStrikeAttribute;
    public static string FontSizeAttribute;
    public static string FontUnderlineAttribute;
    public static string AbsoluteAnchorTag;
    public static string PositionTag;
    public static string NoShapeGrouping;
    public static string GraphicFrameLocksTag;
    public static string CNVGraphicFramePr;
    public static string LineTag;
    public static string LineWidthAttribute;
    internal static string CapAttribute;
    public static string CompoundLineTypeAttribute;
    public static string NoFillTag;
    public static string blipFillTag;
    public static string SolidFillTag;
    public static string MiterJoinTag;
    public static string BevelJoinTag;
    public static string SRGBColorTag;
    public static string SchemeColorTag;
    public static string SystemColorTag;
    public static string SystemColorHexAttribute;
    public static string PresetDashTag;
    public static string BackgroundColorTag;
    public static string ForegroundColorTag;
    public static string PatternFillTag;
    public static string PresetPattern;
    public static string RoundTag;
    public static string GradientFillTag;
    public static string GroupFillTag;
    public static string HeadEnd;
    public static string TailEnd;
    public static string GradientStopsTag;
    public static string GradientLiniarTag;
    public static string GradientTailTag;
    public static string GradientAngleAttribute;
    public static string GradientScaledAttribute;
    public static string GradientPathTag;
    public static string GradientPathAttribute;
    public static string GradientStopTag;
    public static string GradientPositionAttribute;
    public static string AlphaTag;
    public static string FillToRectTag;
    public static string ColorChangeTag;
    internal static string UseAlphaTag;
    internal static string ColorFromTag;
    internal static string ColorToTag;
    public static string LeftAttribute;
    public static string TopAttribute;
    public static string RightAttribute;
    public static string BottomAttribute;
    public static string CropLeft;
    public static string CropTop;
    public static string CropRight;
    public static string CropBottom;
    public static string TintTag;
    public static string ShadeTag;
    public static string GammaTag;
    public static string InverseGammaTag;
    public static string LuminanceModulation;
    public static string HueModulation;
    public static string Luminance;
    public static string LuminanceOffset;
    public static string SaturationModulation;
    public static string Saturation;
    public static string SaturationOffset;
    public static string Shade;
    public static string TextRotationAttribute;
    public static string Baseline;
    public static string LatinTag;
    public static string EaTag;
    public static string CsTag;
    public static string TypefaceTag;
    public static string ControlsTag;
    public static string ControlTag;
    public static string NonVisualDrawingProperties;
    public static string ShapeLocksProperties;
    public static string TextBoxAttribute;
    public static string NonVisualShapeProperties;
    public static string TextBody;
    internal static int SubscriptBaseline;
    internal static int SuperscriptBaseline;
    public static string AnchorAttribute;
    internal static string AnchorCenterAttribute;
    public static string TextBoxRotationAttribute;
    public static string LockTextAttribute;
    public static string HorizontalAlignment;
    public static string FontLanguage;
    public static string EffectListTag;
    public static string OuterShadowTag;
    public static string PresetcolorTag;
    public static string BlurRadiusTag;
    public static string DistanceTag;
    public static string DirectionTag;
    public static string AlignmentTag;
    public static string RotationwithShapeTag;
    public static string SizeX;
    public static string SizeY;
    public static string OuterAlphaTag;
    public static string InnerShadowTag;
    public static string InnerAlphaTag;
    public static string KXTag;
    public static string PerspectiveAlphaTag;
    public static string BelowAlphaTag;
    public static string Special3DTag;
    public static string BevelTopTag;
    public static string BevelBottomTag;
    public static string LineHeightAttribute;
    public static string Scene3DTag;
    public static string CameraTag;
    public static string ViewTag;
    public static string LightingTag;
    public static string LightingRightTag;
    public static string HiddenAttribute;
    public static string HorizontalOffsetTag;
    public static string VerticalOffsetTag;
    public static string HorizontalRatioTag;
    public static string VerticalRatioTag;
    public static string TileFlippingTag;
    public static string CapitalizationTag;
    public static string NormalizationHeightTag;
    public static string ShapeAutoFitTag;
    public static string TextCapsAllString;
    public static string TextCapsSmallString;
    public static string TextCapsNoneString;
    internal static string VerticalOverFlowAttribute;
    internal static string HorizontalOverFlowAttribute;
    internal static string LeftInsetAttribute;
    internal static string BottomInsetAttribute;
    internal static string TopInsetAttribute;
    internal static string RightInsetAttribute;
    internal static string KerningAttribute;
    internal static string SpacingAttribute;
    internal static string HLinkClickTag;
    internal static string GlowTag;
    internal static string SoftEdgeTag;
    internal static string RadiusAttributeTag;
    internal static string SvgGUID;
    internal static string LocalDpiURI;
    internal static string ImagePropsURI;
    internal static string AlphaBiLevelTag;
    internal static string AlphaCeilingTag;
    internal static string AlphaFloorTag;
    internal static string GrayScaleTag;
    internal static string FillOverlayTag;
    internal static string AlphaModTag;
    internal static string AlphaInvTag;
    internal static string AlphaReplTag;
    internal static string BiLevelTag;
    internal static string ThreshTag;
    internal static string BlurTag;
    internal static string HslTag;
    internal static string DuotoneTag;
    internal static string ImagePropsTag;
    internal static string LocalDpiTag;
    internal static string SvgBlipTag;
    internal static string FillRefTag;
    internal static int SimpleTypeRotationAngle;
    internal static string VerticalFlipAttribute;
    internal static string HorizontalFlipAttribute;
    internal static string TextField;
    internal static string BulletFont;
    internal static string BulletChar;
    internal static string PresetTextWarp;
    internal static string CSNamespace;
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.DrawingShapeSerializator : ShapeSerializator {
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    internal void SerializeXmlDataStream(XmlWriter writer, Stream dataStream);
    public virtual void SerializeShapeType(XmlWriter writer, Type shapeType);
    public static string GetEditAsValue(ShapeImpl shape);
    internal void SerializeAnchorPoint(XmlWriter writer, string tagName, int column, int columnOffset, int row, int rowOffset, WorksheetBaseImpl sheet, string drawingsNamespace);
    internal void SerializeColRowAnchor(XmlWriter writer, string tagName, int column, int columnOffset, int row, int rowOffset, WorksheetBaseImpl sheet, string drawingsNamespace, bool isNameSpace);
    private void SerializeXYAnchor(XmlWriter writer, string tagName, int column, int row, string drawingsNamespace);
    private string GetCoordinateValue(int coordinate);
    public static void SerializeForm(XmlWriter writer, string xmlOuterNamespace, string xmlInnerNamespace, int x, int y, int cx, int cy);
    public static void SerializeForm(XmlWriter writer, string xmlOuterNamespace, string xmlInnerNamespace, int x, int y, int cx, int cy, IShape shape);
    internal static void SerializeForm(XmlWriter writer, string xmlOuterNamespace, string xmlInnerNamespace, BitmapShapeImpl picture);
    protected void SerializeNVCanvasProperties(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, string drawingsNamespace);
    private void SerializeNonVisualDrawingShapeProps(XmlWriter writer, string drawingsNamespace);
    protected void SerializePresetGeometry(XmlWriter writer, string type);
    internal void SerializeCustomGeometry(XmlWriter writer, ShapeImpl shape);
    protected void SerializeFill(XmlWriter writer, ShapeImpl shape, FileDataHolder holder, RelationCollection relations);
    internal static void SerializeLineSettings(XmlWriter writer, IShapeLineFormat line, IWorkbook book);
    private static void SerializeBorderJoinType(XmlWriter writer, ShapeLineFormatImpl lineFormat);
    private static void SerializeArrowProperties(XmlWriter writer, ShapeLineFormatImpl line, bool isHead);
    private static string GetArrowLength(ExcelShapeArrowLength obj4);
    private static string GetArrowWidth(ExcelShapeArrowWidth obj3);
    private static string GetArrowStyle(ExcelShapeArrowStyle obj2);
    internal void SerializeChildShape(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection relations, string drawingsNamespace, string prefix);
    internal void SerializeShapeProperties(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection relations, string drawingsNamespace);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.GroupShapeSerializator : DrawingShapeSerializator {
    private string attribute;
    private string chartNameSpace;
    private GroupShapeImpl shape;
    private int resolution;
    private string nameSpace;
    internal GroupShapeSerializator(GroupShapeImpl shape);
    internal void SerializeAncor(XmlWriter writer);
    internal void SerializeTransformation(XmlWriter xmlTextWriter);
    internal void SerializeGroupShapeNVProps(XmlWriter writer);
    internal void SerializeNonVisualDrawingProps(XmlWriter writer);
    internal void SerializeNonVisualDrawingShapeProps(XmlWriter writer);
    private void SerializePreserveStream(XmlWriter xmlTextWriter, Dictionary`2<string, Stream> PreservedElements, string elementName);
    internal void SerializeGroupShapeProperties(XmlWriter xmlTextWriter, GroupShapeImpl groupShape, FileDataHolder holder, RelationCollection relations);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.HFImageSerializator : ShapeSerializator {
    private Dictionary`2<int, string> m_pictureItems;
    private static String[] s_arrFormulas;
    private static HFImageSerializator();
    internal void Clear();
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    protected virtual int GetWidth(BitmapShapeImpl bitmap);
    protected virtual int GetHeight(BitmapShapeImpl bitmap);
    public virtual void SerializeShapeType(XmlWriter writer, Type shapeType);
    protected void SerializeImageData(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, string title, bool useRawFormat, RelationCollection relations);
    protected virtual string SerializePicture(ShapeImpl shape, WorksheetDataHolder holder, bool useRawFormat, RelationCollection relations);
    private string SerializePicture(ShapeImpl shape, WorksheetDataHolder holder);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.OptionButtonShapeSerializator : VmlTextBoxBaseSerializator {
    protected int ShapeInstance { get; }
    protected string ShapeType { get; }
    protected virtual int get_ShapeInstance();
    protected virtual string get_ShapeType();
    protected virtual void SerializeClientDataAdditional(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeDiv(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeShapeTypeSubNodes(XmlWriter writer);
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
}
public abstract class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.ShapeSerializator : object {
    public static string FalseAttributeValue;
    public static string TrueAttributeValue;
    private static object m_lockObject;
    private static ShapeSerializator();
    public abstract virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection relations);
    public abstract virtual void SerializeShapeType(XmlWriter writer, Type shapeType);
    protected static string GetAnchorValue(ShapeImpl shape);
    protected void SerializeClientData(XmlWriter writer, ShapeImpl shape, string shapeType);
    protected virtual void SerializeClientDataAdditional(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeFill(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    protected virtual void SerializeSolidFill(XmlWriter writer, TextBoxShapeBase textBox);
    protected virtual void SerializeGradientFill(XmlWriter writer, TextBoxShapeBase textBox);
    protected virtual void SerializeTextureFill(XmlWriter writer, TextBoxShapeBase textBox, FileDataHolder holder, RelationCollection vmlRelations);
    protected virtual void SerializePatternFill(XmlWriter writer, TextBoxShapeBase textBox, FileDataHolder holder, RelationCollection vmlRelations);
    protected virtual void SerializePictureFill(XmlWriter writer, TextBoxShapeBase textBox, FileDataHolder holder, RelationCollection relations);
    protected virtual void SerializeUserPicture(XmlWriter writer, TextBoxShapeBase textBox, FileDataHolder holder, RelationCollection relations);
    protected virtual void SerializeGradientFillCommon(XmlWriter writer, TextBoxShapeBase textBox);
    protected virtual void SerializeFillCommon(XmlWriter writer, TextBoxShapeBase textBox);
    protected virtual void SerializeLine(XmlWriter writer, TextBoxShapeBase textBox, FileDataHolder holder, RelationCollection relations);
    protected virtual void SerializePatternLine(XmlWriter writer, TextBoxShapeBase textBox, FileDataHolder holder, RelationCollection relations);
    protected string PrepareGradientDegree(double degree);
    protected string GenerateHexColor(Color color);
    protected string GetPresetString(ExcelGradientPreset excelGradientPreset);
    protected string GeneratePatternName(ExcelGradientPattern pattern);
    protected string GetOpacityFormat(double opacity);
    protected string RemovePrecedingZeroes(string color);
    protected string GetDashStyle(ExcelShapeDashLineStyle dashStyle);
    protected string GetLineStyle(ExcelShapeLineStyle lineStyle);
    public static bool IsEmptyColor(Color color);
    internal virtual void Clear();
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.TextBoxSerializator : DrawingShapeSerializator {
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    internal void SerializeSlicer(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    internal void SerializeTextBox(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, string DrawingsNamespace);
    private void SerializeShapeProperites(XmlWriter writer, TextBoxShapeImpl textBox, FileDataHolder holder, RelationCollection relations, string drawingsNamespace);
    private void SerializeEffectProperties(XmlWriter writer, TextBoxShapeImpl textBox);
    private void Serialize3DShapeProperties(XmlWriter writer, TextBoxShapeImpl textBox);
    private void SerializeNonVisualProperties(XmlWriter writer, TextBoxShapeImpl textBox, WorksheetDataHolder holder, string drawingsNamespace);
    private void SerializeExtent(XmlWriter writer, ShapeImpl shape);
    public static void SerializeRichText(XmlWriter writer, string drawingsNamespace, TextBoxShapeBase textBox);
    private static void SerializeBodyProperties(XmlWriter writer, RichTextString textArea, TextBoxShapeBase textBox);
    private static void SerializeAnchor(XmlWriter writer, TextBoxShapeBase textBox);
    private static void SerializeTextRotation(XmlWriter writer, TextBoxShapeBase textBox);
    private static void SerializeListStyles(XmlWriter writer, RichTextString textArea);
    private static void SerializeParagraphs(XmlWriter writer, RichTextString textArea, TextBoxShapeBase textBox);
    private static void SerializeBulletFormat(XmlWriter writer, BulletImpl bulletImpl);
    internal static ExcelCommentVAlign GetVerticalAnchorPosition(ExcelTextRotation textDirection, ExcelCommentVAlign verticalAlignment, ExcelCommentHAlign horizontalAlignment);
    internal static ExcelCommentHAlign GetHorizontalAnchorPostion(ExcelTextRotation textDirection, ExcelCommentVAlign verticalAlignment, ExcelCommentHAlign horizontalAlignment);
    private static void SerializeTextFeildElement(XmlWriter writer, TextBoxShapeBase textBox);
    internal static void SerializeParagraphProperties(XmlWriter writer, TextFrame textFrame);
    private static void SerializeFormattingRunProperty(XmlWriter writer, IWorkbook book, TextBoxShapeBase textBox);
    private static void SerializeFormattingRunProperty(XmlWriter writer, IWorkbook book, IFont font, RichTextString textArea);
    private static void SerializeFormattingRun(XmlWriter writer, IFont font, string tagName, IWorkbook book, string text, TextBoxShapeBase textBox);
    public static void SerializeParagraphRunProperites(XmlWriter writer, IFont font, string mainTagName, IWorkbook book, bool isTextLink, RichTextString rtfStringArea);
    internal static void SerializeParagraphRunProperites(XmlWriter writer, IFont font, string mainTagName, IWorkbook book, bool isTextLink, RichTextString rtfStringArea, TextBoxShapeBase textBoxShape);
    internal static void SerializeParagraphsAutoShapes(XmlWriter writer, RichTextString textArea, WorkbookImpl book, TextFrame textFrame);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.UnknownShapeSerializator : ShapeSerializator {
    private Stream m_shapeTypeStream;
    public UnknownShapeSerializator(Stream shapeTypeStream);
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    public virtual void SerializeShapeType(XmlWriter writer, Type shapeType);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.VmlBitmapSerializator : HFImageSerializator {
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    protected virtual void SerializeClientDataAdditional(XmlWriter writer, ShapeImpl shape);
    private void PrepareStyleProperties(List`1<string> styleProperties, ShapeImpl shape);
    private void AddMeasurement(List`1<string> styleProperties, string tagName, double size);
    protected virtual string SerializePicture(ShapeImpl shape, WorksheetDataHolder holder, bool useRawFormat, RelationCollection relations);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.VmlFormControlsSerializator : ShapeSerializator {
    private Dictionary`2<Type, ShapeSerializator> m_dictShapeSerializators;
    internal void ClearAll();
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    public virtual void SerializeShapeType(XmlWriter writer, Type shapeType);
}
internal abstract class Syncfusion.XlsIO.Implementation.XmlSerialization.Shapes.VmlTextBoxBaseSerializator : ShapeSerializator {
    internal static string DEF_SHAPE_STYLE;
    protected int ShapeInstance { get; }
    protected string ShapeType { get; }
    protected abstract virtual int get_ShapeInstance();
    protected abstract virtual string get_ShapeType();
    public virtual void SerializeShapeType(XmlWriter writer, Type shapeType);
    protected virtual void SerializeShapeTypeSubNodes(XmlWriter writer);
    public virtual void Serialize(XmlWriter writer, ShapeImpl shape, WorksheetDataHolder holder, RelationCollection vmlRelations);
    protected virtual void SerializeShapeTagAttribute(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeShapeNodes(XmlWriter writer, ShapeImpl shape);
    protected void SerializeShadow(XmlWriter writer, ShapeImpl shape);
    protected virtual void SerializeDiv(XmlWriter writer, ShapeImpl shape);
    protected void SerializeTextBoxStyle(XmlWriter writer, ShapeImpl shape);
    protected void SerializeShapeStyle(XmlWriter writer, ShapeImpl shape);
    public static void SerializeStyle(XmlWriter writer, List`1<string> styleProperties);
    protected virtual void PrepareStyleProperties(List`1<string> properties, ShapeImpl shape);
    protected virtual void SerializeClientDataAdditional(XmlWriter writer, ShapeImpl shape);
    protected void SerializeShapeNameAndType(XmlWriter writer, ShapeImpl shape);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.SlicerSerializator : object {
    public void Serialize(XmlWriter writer, ISlicers slicers);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.TableSerializator : object {
    public void Serialize(XmlWriter writer, IListObject table);
    private void SerializeTableExtensionList(XmlWriter writer, IListObject table);
    private void SerializeAutoFilter(XmlWriter writer, IListObject table);
    private void SerializeStyle(XmlWriter writer, IListObject table);
    private void SerializeColumns(XmlWriter writer, IList`1<IListObjectColumn> columns, ExcelTableType Type);
    private void SerializeColumn(XmlWriter writer, IListObjectColumn column, ExcelTableType type);
    public void SerializeQueryTable(IListObject Table, XmlWriter writer);
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.UniqueInstanceTypeList : object {
    private Dictionary`2<int, Dictionary`2<Type, object>> m_dictItems;
    public void AddShape(ShapeImpl shape);
    [IteratorStateMachineAttribute("Syncfusion.XlsIO.Implementation.XmlSerialization.UniqueInstanceTypeList/<UniquePairs>d__2")]
public IEnumerable UniquePairs();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.Vml : object {
    public static string VNamespace;
    public static string ONamespace;
    public static string XNamespace;
    public static string VPreffix;
    public static string OPreffix;
    public static string XPreffix;
    public static string XmlTagName;
    public static string ShapeTypeTagName;
    public static string ShapeTypeIdFormat;
    public static string ShapeIdFormat;
    public static string ShapeIdAttributeName;
    public static string SpIdAttributeName;
    public static string CoordSizeAttributeName;
    public static string CommentCoordSize;
    public static string SptAttriubteName;
    public static string PathAttributeName;
    public static string CommentPathValue;
    public static string BitmapPathValue;
    public static string ClientDataTagName;
    public static string ObjectTypeAttribute;
    public static string MoveWithCellsTagName;
    public static string SizeWithCellsTagName;
    public static string AnchorTagName;
    public static string ShapeTagName;
    public static string ShapeLayoutTagName;
    public static string TypeAttributeName;
    public static string LegacyDrawing;
    public static string LegacyDrawingHF;
    public static string RowTagName;
    public static string ColumnTagName;
    public static string StyleAttribute;
    public static string FillColorAttribute;
    public static string ShadowTagName;
    public static string ShadowOnAttribute;
    public static string ShadowObscuredAttribute;
    public static string ShadowColorAttribute;
    public static string CommentAlignment;
    public static string InsetModeAttribute;
    public static string TextBoxTagName;
    public static string DivTagName;
    public static string VisibilityAttribute;
    internal static string Visible;
    public static string VisibilityHiddenValue;
    public static string VisibilityVisibleValue;
    public static string LockText;
    public static string TextHAlign;
    public static string TextVAlign;
    public static string ImageDataTag;
    public static string RelationId;
    public static string LayoutFlow;
    public static string LayoutFlowVertical;
    public static string MsoLayoutFlow;
    public static string MsoLayoutFlowTopToBottom;
    public static string MsoLayoutFlowBottomToTop;
    public static string MsoFitShapeToText;
    public static string TrueExpression;
    public static string FalseExpression;
    public static string FormulasTagName;
    public static string SingleFormulaTagName;
    public static string EquationTagName;
    public static string ShapePathTagName;
    public static string Extrusionok;
    public static string GradientShapeOk;
    public static string ConnectType;
    public static string PreferRelative;
    public static string FilledAttribute;
    public static string StrokedAttribute;
    public static string Stroke;
    public static string JoinStyle;
    public static string Lock;
    public static string Ext;
    public static string AspectRatio;
    public static string Checked;
    public static string FontTag;
    public static string Face;
    public static string Size;
    public static string Color;
    public static string ColorAttribute;
    internal static string SpanTag;
    public static string Checkbox;
    public static string OptionButton;
    public static string Drop;
    public static string AutoLineTag;
    public static string AutoFillTag;
    public static string FormulaLink;
    public static string FirstButton;
    public static string ScrollPosition;
    public static string ScrollMinimum;
    public static string FocusPositionAttribute;
    public static string FocusSizeAttribute;
    public static string GradientOneColorAttributeValueStart;
    public static string ColorsAttribute;
    public static string ScrollMaximum;
    public static string ScrollIncrement;
    public static string ScrollPageIncrement;
    public static string ScrollBarWidth;
    public static string NoThreeD;
    public static string NoThreeD2;
    public static string ListSourceRange;
    public static string SelectedItem;
    public static string SelectionType;
    public static string CallbackType;
    public static string NormalLCT;
    public static string DropStyle;
    public static string DropLines;
    public static string MarginLeft;
    public static string MarginTop;
    public static string Width;
    public static string Height;
    public static string Millimeters;
    public static string AutoPicture;
    public static string CF;
    public static string OleObjects;
    public static string OleObject;
    public static string ProgramID;
    public static string DevAspect;
    public static string ShapeID;
    public static string FormulaMacro;
    public static string StrokeColorAttribute;
    public static string MethodAttribute;
    public static string MethodNoneValue;
    public static string FillTag;
    public static string Color2Attribute;
    public static string LinkAttribute;
    public static string SolidFillTag;
    public static string TextureAttributeValue;
    public static string PictureAttributeValue;
    public static string PatternAttributeValue;
    public static string GradientTypeTagValue;
    public static string GradientRadialTypeTagValue;
    public static string GradientCenterTypeTagValue;
    public static string GradientDarkFillValue;
    public static string GradientLightFillValue;
    internal static string GradientUnscaled;
    public static string OpacityAttribute;
    public static string Opacity2Attribute;
    public static string AngleAttribute;
    public static string RotateAttribute;
    public static string StrokeWeightAttribute;
    public static string FocusAttribute;
    public static string RelationIDAttribute;
    public static string TitleAttibute;
    public static string FillTypeAttribute;
    public static string DashStyleAttribute;
    public static string LineStyleAttribute;
    internal static string EndCapAttribute;
    public static string SolidFillTypeAttributeValue;
    public static string AlternateTextAttribute;
    public static string PictureObjectTypeAttributeValue;
    public static string LinkAttributeValue;
    public static string ReColorAttribute;
    public static string PathAttribute;
    public static string ExtrusionOkAttribute;
    public static string StrokeOkAttribute;
    public static string FillOkAttribute;
    public static string ConnectTypeAttribute;
    public static string LockTypeAttribute;
    public static string ExtAttribute;
    public static string ShapeTypeAttribute;
    public static string ShadowOkAttribute;
    public static string OleUpdateAttribute;
    public static char RGBColorPrefixChar;
    public static char IndexedColorPrefix;
    public static char SizeInPointsPrefix;
    public static string SizeInPoints;
    public static int OpacityDegree;
    public static int DegreeDivider;
    public static double DarkLimit;
    internal static string PrintObject;
}
[XmlSerializatorAttribute("0")]
public class Syncfusion.XlsIO.Implementation.XmlSerialization.WorkbookXmlSerializator : object {
    public static string DEF_VERSION_STRING;
    public static string DEF_APPLICATION_STRING;
    private static string DEF_O_NAMESPACE;
    private static string DEF_X_NAMESPACE;
    private static string DEF_SS_NAMESPACE;
    private static string DEF_HTML_NAMESPACE;
    private static string DEF_SS_PREF;
    private static string DEF_HTML_PREF;
    private static string DEF_O_PREF;
    internal static string DEF_X_PREF;
    internal static string DEF_NAMESPACE_PREF;
    internal static string DEF_XMLNS_PREF;
    public static string DEF_WORKBOOK_PREF;
    public static string DEF_WORKSHEET_PREF;
    public static string DEF_NAME_PREF;
    public static string DEF_TABLE_PREF;
    public static string DEF_ROW_PREF;
    public static string DEF_CELL_PREF;
    public static string DEF_DATA_PREF;
    public static string DEF_NAMES_PREF;
    public static string DEF_NAMEDRANGE_PREF;
    public static string DEF_STYLES_PREF;
    public static string DEF_STYLE_PREF;
    public static string DEF_FONT_PREF;
    public static string DEF_PROTECTION_PREF;
    public static string DEF_ALIGNMENT_PREF;
    public static string DEF_NUMBERFORMAT_PREF;
    public static string DEF_INTERIOR_PREF;
    public static string DEF_BORDERS_PREF;
    public static string DEF_BORDER_PREF;
    private static string DEF_AUTOFILTER_PREF;
    private static string DEF_AUTOFILTERCOLUMN_PREF;
    private static string DEF_AUTOFILTERAND_PREF;
    private static string DEF_AUTOFILTERCONDITION_PREF;
    private static string DEF_AUTOFILTEROR_PREF;
    public static string DEF_COMMENT_PREF;
    private static string DEF_B_TAG;
    private static string DEF_B_END_TAG;
    private static string DEF_I_TAG;
    private static string DEF_I_END_TAG;
    private static string DEF_U_TAG;
    private static string DEF_U_END_TAG;
    private static string DEF_S_TAG;
    private static string DEF_S_END_TAG;
    private static string DEF_SUB_TAG;
    private static string DEF_SUB_END_TAG;
    private static string DEF_SUP_TAG;
    private static string DEF_SUP_END_TAG;
    private static string DEF_FONT_END_TAG;
    private static string DEF_FONT_TAG;
    public static string DEF_SPAN_PREF;
    public static string DEF_COLUMN_PREF;
    public static string DEF_CONDITIONAL_FORMATTING_PREF;
    public static string DEF_CONDITIONAL_PREF;
    public static string DEF_QUALIFIER_PREF;
    public static string DEF_VALUE1_PREF;
    public static string DEF_VALUE2_PREF;
    public static string DEF_WORKSHEET_OPTIONS_PREF;
    public static string DEF_PAGE_SETUP_PREF;
    public static string DEF_FOOTER_PREF;
    public static string DEF_HEADER_PREF;
    public static string DEF_LAYOUT_PREF;
    public static string DEF_PAGE_MARGINS_PREF;
    public static string DEF_PRINT_PREF;
    public static string DEF_COMMENTS_LAYOUT_PREF;
    public static string DEF_PRINT_ERRORS_PREF;
    private static string DEF_FIT_TO_PAGE_PREF;
    public static string DEF_LEFT_TO_RIGHT_PREF;
    public static string DEF_ACTIVE_PANE_PREF;
    public static string DEF_FIRST_VISIBLE_ROW_PREF;
    public static string DEF_SPLIT_HORIZONTAL_PANE_PREF;
    public static string DEF_SPLIT_VERTICAL_PANE_PREF;
    public static string DEF_TOPROW_BOTTOM_PANE_PREF;
    public static string DEF_LEFTCOLUMN_RIGHT_PANE_PREF;
    public static string DEF_FREEZE_PANES_PREF;
    public static string DEF_FROZEN_NOSPLIT_PANES_PREF;
    public static string DEF_PANES_PREF;
    public static string DEF_PANE_PREF;
    public static string DEF_NUMBER_PANE_PREF;
    public static string DEF_ACTIVECOL_PANE_PREF;
    public static string DEF_ACTIVEROW_PANE_PREF;
    internal static string DEF_RANGESELECTION_PANE_PREF;
    public static string DEF_TABCOLOR_INDEX_PREF;
    public static string DEF_ZOOM_PREF;
    public static string DEF_DISPLAY_GRIDLINES_PREF;
    public static string DEF_VISIBLE_PREF;
    private static string DEF_DISPLAY_HEADINGS_PREF;
    public static string DEF_EXCELWORKBOOK_PREF;
    public static string DEF_ACTIVE_SHEET_PREF;
    private static string DEF_SELECTED_PREF;
    private static string DEF_SELECTED_SHEETS_PREF;
    public static string DEF_FIRST_VISIBLE_SHEET_PREF;
    public static string DEF_DATAVALIDATION_PREF;
    internal static string DEF_HIDE_WORKBOOK_TABS;
    public static string DEF_RIGHTTOLEFT_PREF;
    public static string DEF_INDEX_PREF;
    public static string DEF_TYPE_PREF;
    private static string DEF_TICKED_PREF;
    public static string DEF_FORMULA_PREF;
    public static string DEF_REFERSTO_PREF;
    public static string DEF_ID_PREF;
    public static string DEF_PARENT_PREF;
    public static string DEF_BOLD_PREF;
    public static string DEF_FONTNAME_PREF;
    public static string DEF_COLOR_PREF;
    public static string DEF_ITALIC_PREF;
    public static string DEF_OUTLINE_PREF;
    public static string DEF_SHADOW_PREF;
    public static string DEF_SIZE_PREF;
    public static string DEF_STRIKETHROUGH_PREF;
    public static string DEF_UNDERLINE_PREF;
    public static string DEF_PROTECTED_PREF;
    public static string DEF_HIDEFORMULA_PREF;
    public static string DEF_HORIZONTAL_PREF;
    public static string DEF_INDENT_PREF;
    public static string DEF_READINGORDER_PREF;
    public static string DEF_ROTATE_PREF;
    public static string DEF_SHRINKTOFIT_PREF;
    public static string DEF_VERTICAL_PREF;
    public static string DEF_VERTICALTEXT_PREF;
    public static string DEF_WRAPTEXT_PREF;
    public static string DEF_FORMAT_PREF;
    public static string DEF_PATTERNCOLOR_PREF;
    public static string DEF_PATTERN_PREF;
    public static string DEF_POSITION_PREF;
    public static string DEF_RANGE_PREF;
    private static string DEF_OPERATOR_PREF;
    private static string DEF_VALUE_PREF;
    public static string DEF_AUTHOR_PREF;
    public static string DEF_SHOWALWAYS_PREF;
    public static string DEF_DEFAULTCOLUMNWIDTH_PREF;
    public static string DEF_DEFAULTROWHEIGHT_PREF;
    public static string DEF_WIDTH_PREF;
    public static string DEF_HIDDEN_PREF;
    public static string DEF_STYLEID_PREF;
    public static string DEF_AUTOFIT_WIDTH_PREF;
    public static string DEF_AUTOFIT_HEIGHT_PREF;
    public static string DEF_HEIGHT_PREF;
    public static string DEF_FACE_PREF;
    public static string DEF_LINE_STYLE_PREF;
    public static string DEF_WEIGHT_PREF;
    public static string DEF_VERTICAL_ALIGN_PREF;
    public static string DEF_MERGE_ACROSS_PREF;
    public static string DEF_MERGE_DOWN_PREF;
    public static string DEF_HYPRER_TIP_PREF;
    public static string DEF_HREF_PREF;
    public static string DEF_MARGIN_PREF;
    public static string DEF_MARGIN_TOP_PREF;
    public static string DEF_MARGIN_RIGHT_PREF;
    public static string DEF_MARGIN_LEFT_PREF;
    public static string DEF_MARGIN_BOTTOM_PREF;
    public static string DEF_CENTER_HORIZONTAL_PREF;
    public static string DEF_CENTER_VERTICAL_PREF;
    public static string DEF_ORIENTATION_PREF;
    public static string DEF_START_PAGE_NUMBER_PREF;
    public static string DEF_NUMBER_OF_COPIES_PREF;
    public static int DEF_NUMBER_OF_COPIES;
    public static string DEF_HORIZONTAL_RESOLUTION_PREF;
    public static string DEF_PAPER_SIZE_INDEX_PREF;
    public static string DEF_SCALE_PREF;
    public static string DEF_FIT_WIDTH_PREF;
    public static string DEF_FIT_HEIGHT_PREF;
    public static string DEF_GRIDLINES_PREF;
    public static string DEF_BLACK_AND_WHITE_PREF;
    public static string DEF_DRAFT_QUALITY_PREF;
    public static string DEF_ROWCOL_HEADINGS_PREF;
    public static string DEF_COLON;
    public static string DEF_SEMICOLON;
    public static string DEF_FONT_COLOR_CF;
    public static string DEF_FONT_STYLE_CF;
    public static string DEF_FONT_WEIGHT_CF;
    public static string DEF_FONT_BOLD_CF;
    public static string DEF_FONT_REGULAR_CF;
    private static string DEF_FONT_ITALIC_CF;
    private static string DEF_FONT_STRIKE_CF;
    public static string DEF_FONT_STRIKETHROUGH_CF;
    public static string DEF_FONT_STRIKETHROUGH_SINGLE_CF;
    public static string DEF_FONT_UNDERLINE_CF;
    public static string DEF_PATTERN_BACKGROUND_CF;
    public static string DEF_PATTERN_FILL_CF;
    private static string DEF_BORDER_CF;
    public static string DEF_BORDERTOP_CF;
    public static string DEF_BORDERBOTTOM_CF;
    public static string DEF_BORDERLEFT_CF;
    public static string DEF_BORDERRIGHT_CF;
    public static String[] DEF_PATTERN_STRING_CF;
    public static String[] DEF_BORDER_LINE_CF;
    public static String[] DEF_COMPARISION_OPERATORS_PREF;
    private static string DEF_FONT_NAME;
    private static string DEF_STYLE_NONE;
    public static int DEF_FONT_SIZE;
    private static int DEF_LEFT_DIAGONAL_BORDER;
    private static int DEF_RIGHT_DIAGONAL_BORDER;
    public static int DEF_STYLE_ZERO;
    public static int DEF_STYLE_ROTATION;
    private static int DEF_STYLE_FONT_SIZE;
    public static int DEF_ROTATION_TEXT;
    private static int DEF_BORDER_INCR;
    public static string DEF_STYLE_NAME;
    private static string DEF_UNIQUE_STRING;
    private static string DEF_STYLE_ALIGN_NONE;
    private static string DEF_STYLE_ALIGN_SUBSCRIPT;
    private static string DEF_STYLE_ALIGN_SUPERSCRIPT;
    public static String[] DEF_BORDER_POSITION_STRING;
    public static String[] DEF_BORDER_LINE_TYPE_STRING;
    internal static String[] DEF_BORDER_LINE_TYPES;
    private static double DEF_MARGIN;
    private static int DEF_SCALE;
    private static int DEF_FIT;
    private static int DEF_ZOOM;
    public static String[] DEF_PRINT_LOCATION_STRING;
    public static String[] DEF_PRINT_ERROR_STRING;
    public static String[] DEF_VISIBLE_STRING;
    private static string DEF_XML_TRUE;
    private static string DEF_XML_FALSE;
    private static string DEF_AUTOFILTER_ALL_TYPE;
    public static string DEF_COLOR_STRING;
    private static string DEF_AUTOFILTER_BOTTOM_TYPE;
    private static string DEF_AUTOFILTER_TOP_TYPE;
    private static string DEF_AUTOFILTER_PERCENT_TYPE;
    private static string DEF_AUTOFILTER_BLANKS_TYPE;
    private static string DEF_AUTOFILTER_CUSTOM_TYPE;
    private static string DEF_AUTOFILTER_NON_BLANKS_TYPE;
    private static double DEF_COLUMN_WIDTH;
    public static double DEF_ROW_HEIGHT;
    public static double DEF_COLUMN_DIV;
    public static double DEF_ROW_DIV;
    private static string DEF_DATATIME_MASK;
    private static int DEF_MERGED_STYLE;
    public static String[] DEF_PATTERN_STRING;
    private String[] DEF_AUTOFILTER_OPERATION_STRING;
    public static String[] DEF_ERRORSTYLE;
    public static String[] DEF_ALLOWTYPE_STRING;
    private static string DEF_10_CHAR;
    public static string DEF_BAD_REF;
    public static string DEF_BAD_REF_UPDATE;
    public static string DEF_BAD_FORMULA;
    public static int DEF_MAX_COLUMN;
    public static int DEF_MIN_COLUMN;
    [CLSCompliantAttribute("False")]
public static long DEF_MERGE_COD;
    private Dictionary`2<long, int> m_mergeStyles;
    private StringBuilder m_builderStart;
    private StringBuilder m_builderEnd;
    private FormulaUtil m_formulaUtil;
    private static WorkbookXmlSerializator();
    public static long GetUniqueID(int iSheetIndex, long lCellIndex);
    public static int GetSheetIndexByUniqueId(long lUniqueId);
    public static long GetCellIndexByUniqueId(long lUniqueId);
    private void SerializeNames(XmlWriter writer, INames names, bool isLocal);
    private void SerializeName(XmlWriter writer, IName name);
    private void SerializeStyles(XmlWriter writer, ExtendedFormatsCollection extends, List`1<ExtendedFormatImpl> listToReparse);
    private void SerializeStyle(XmlWriter writer, ExtendedFormatImpl format);
    private void SerializeStyleElements(XmlWriter writer, ExtendedFormatImpl format);
    private void SerializeFont(XmlWriter writer, IFont font);
    private void SerializeProtection(XmlWriter writer, ExtendedFormatImpl format);
    private void SerializeAlignment(XmlWriter writer, ExtendedFormatImpl format);
    private void SerializeNumberFormat(XmlWriter writer, string strNumber);
    private void SerializeInterior(XmlWriter writer, ExtendedFormatImpl format);
    private void SerializeBorders(XmlWriter writer, IBorders borders);
    private void SerializeBorder(XmlWriter writer, IBorder border, int iBorderIndex);
    private void SerializeAutoFilters(XmlWriter writer, IAutoFilters autofilters);
    private void SerializeAutoFilter(XmlWriter writer, IAutoFilter autofilter);
    private void SerializeAFCondition(XmlWriter writer, IAutoFilterCondition condition);
    private void SerializeCell(XmlWriter writer, WorksheetImpl sheet, int iRowIndex);
    private void SerializeMerge(XmlWriter writer, int iRowIndex, int i, MergeCellsImpl mergeCells, bool bMerge);
    private void SerializeHyperlink(XmlWriter writer, long index, HyperLinksCollection hyperLinks);
    private void SerializeCellStyle(XmlWriter writer, long index, bool bMerge, CellRecordCollection cells, WorksheetImpl sheet);
    private void EnableFormatting(XmlWriter writer, bool bFormatted);
    private bool DisableFormatting(XmlWriter writer);
    private void SerializeData(XmlWriter writer, CellRecordCollection cells, long index);
    private XmlSerializationCellType GetFormulaType(IWorksheet sheet, long index, String& value);
    private void SerializeData(XmlWriter writer, XmlSerializationCellType cellType, string value, IStyle style, TextWithFormat rtf, CellRecordCollection cells, long cellIndex);
    private void SerializeWorksheets(XmlWriter writer, IWorksheets worksheets);
    private void SerializeWorksheet(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeTable(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeColumns(XmlWriter writer, WorksheetImpl worksheet);
    private void SerializeRows(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeRowColumnCommonAttributes(XmlWriter writer, IOutline record, int iLastIndex, WorkbookImpl book);
    private void SerializeMergedRange(XmlWriter writer, MergedRegion region);
    private void SerializeComment(XmlWriter writer, IComment comment, FontsCollection fonts, IFont defFont);
    private void SerializeRichText(XmlWriter writer, TextWithFormat rtf, string text, FontsCollection fonts, IFont defFont);
    private void SerializeRtfFont(XmlWriter writer, IFont RTFFont, string strValue);
    private void SerializeDataValidations(XmlWriter writer, DataValidationTable dvTable);
    private void SerializeDataValidation(XmlWriter writer, IDataValidation dv);
    private void SerializeRanges(XmlWriter writer, DataValidationImpl dataValidation);
    private void SerializeFormulas(XmlWriter writer, DataValidationImpl dataValidation);
    private void SerializeConditionFormats(XmlWriter writer, WorksheetConditionalFormats conditions);
    private void SerializeConditionFormat(XmlWriter writer, IConditionalFormats format);
    private void SerializeCondition(XmlWriter writer, IConditionalFormat condition);
    private void SerializeWorksheetOption(XmlWriter writer, WorksheetImpl sheet);
    private void SerializePageSetup(XmlWriter writer, IPageSetup pageSetup);
    private void SerializeHeaderFooter(XmlWriter writer, PageSetupImpl pageSetup, bool isFooter);
    private void SerializeLayout(XmlWriter writer, PageSetupImpl pageSetup);
    private void SerializePageMargins(XmlWriter writer, PageSetupImpl pageSetup);
    private void SerializePanes(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeSelectionPane(XmlWriter writer, List`1<SelectionRecord> arrSelection);
    private void SerializePrint(XmlWriter writer, IPageSetup pageSetup);
    private void SerializeWindowTwoProperties(XmlWriter writer, WorksheetImpl sheet);
    private void SerializeExcelWorkbook(XmlWriter writer, WorkbookImpl book);
    private void SerializeDocumentProperties(XmlWriter writer, IWorkbook book);
    private void SerializeWorkbook(XmlWriter writer, IWorkbook book);
    public sealed virtual void Serialize(XmlWriter writer, IWorkbook book);
    private StringBuilder GetStartBuilder();
    private StringBuilder GetEndBuilder();
    private StringBuilder InitializeBuilder(StringBuilder& builder);
    private string GetColorString(Color col);
    private void AddTagToString(string strOpenTag, string strCloseTag, StringBuilder builderStart, StringBuilder builderEnd);
    private void AddAttributeToString(string name, string value, StringBuilder builderStart, StringBuilder builderEnd);
    private string GetConditionaFormatString(IConditionalFormat cond);
    private string GetBorderString(string strBorder, Color borderCol, ExcelLineStyle style);
    private string GetStyleHAlignString(ExcelHAlign hAlign);
    private string GetStyleVAlignString(ExcelVAlign vAlign);
    private string GetStyleFontAlign(IFont font);
    private string GetAutoFilterConditionValue(IAutoFilterCondition cond);
    private string GetCellTypeValue(CellRecordCollection cells, long index, XmlSerializationCellType& type);
    private void WriteElement(XmlWriter writer, string strPrefix, string strName);
    private void WriteElement(XmlWriter writer, string strPrefix, string strName, string strValue);
    private void ReSerializeStyle(XmlWriter writer, List`1<ExtendedFormatImpl> list);
    private List`1<ExtendedFormatImpl> GetMergedList(IWorksheets sheets);
    private string UpdateFormulaError(string strFormula);
    private string ConvertDataValidationType(ExcelDataType dataValidationType);
    private string ConvertDataValidationErrorStyle(ExcelErrorStyle strErrorStyle);
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.WorksheetDataHolder : object {
    private static string VmlDrawingItemFormat;
    private static string CommentItemFormat;
    private static string ThreadedCommentItemFormat;
    private static string DrawingItemFormat;
    private static string VmlExtension;
    private List`1<string> m_chartRelationsToRemove;
    private ZipArchiveItem m_archiveItem;
    private FileDataHolder m_parentHolder;
    private MemoryStream m_startStream;
    internal MemoryStream m_cfStream;
    internal Stream m_cfsStream;
    private string m_strBookRelationId;
    private string m_strSheetId;
    private RelationCollection m_relations;
    private RelationCollection m_drawingsRelation;
    private RelationCollection m_hfDrawingsRelation;
    private string m_strVmlDrawingsId;
    private string m_strVmlHFDrawingsId;
    private string m_strCommentsId;
    private string m_strThreadedCommentsId;
    private string m_strDrawingsId;
    private string m_slicersId;
    private Stream m_streamControls;
    private Stream m_pivotSlicerStream;
    private Dictionary`2<string, RelationCollection> m_preservedPivotTable;
    private Dictionary`2<ChartStyleElements, ShapeStyle> m_defaultChartStyleElements;
    private Double[][] m_defaultColorVariations;
    public FileDataHolder ParentHolder { get; }
    public ZipArchiveItem ArchiveItem { get; public set; }
    public string RelationId { get; public set; }
    public string SheetId { get; public set; }
    public RelationCollection Relations { get; }
    public RelationCollection DrawingsRelations { get; }
    public RelationCollection HFDrawingsRelations { get; }
    public string VmlDrawingsId { get; public set; }
    public string VmlHFDrawingsId { get; public set; }
    public string CommentNotesId { get; public set; }
    internal string ThreadedCommentId { get; internal set; }
    public string DrawingsId { get; public set; }
    internal string SlicersId { get; internal set; }
    public Stream ControlsStream { get; public set; }
    internal Stream PivotSlicerStream { get; internal set; }
    internal Dictionary`2<ChartStyleElements, ShapeStyle> DefaultChartStyleElements { get; }
    internal Double[][] DefaultColorVariationArray { get; }
    internal List`1<string> ChartRelationsToRemove { get; }
    public WorksheetDataHolder(FileDataHolder holder, Relation relation, string parentPath);
    public WorksheetDataHolder(FileDataHolder holder, ZipArchiveItem item);
    public FileDataHolder get_ParentHolder();
    public ZipArchiveItem get_ArchiveItem();
    public void set_ArchiveItem(ZipArchiveItem value);
    public string get_RelationId();
    public void set_RelationId(string value);
    public string get_SheetId();
    public void set_SheetId(string value);
    public RelationCollection get_Relations();
    public RelationCollection get_DrawingsRelations();
    public RelationCollection get_HFDrawingsRelations();
    public string get_VmlDrawingsId();
    public void set_VmlDrawingsId(string value);
    public string get_VmlHFDrawingsId();
    public void set_VmlHFDrawingsId(string value);
    public string get_CommentNotesId();
    public void set_CommentNotesId(string value);
    internal string get_ThreadedCommentId();
    internal void set_ThreadedCommentId(string value);
    public string get_DrawingsId();
    public void set_DrawingsId(string value);
    internal string get_SlicersId();
    internal void set_SlicersId(string value);
    public Stream get_ControlsStream();
    public void set_ControlsStream(Stream value);
    internal Stream get_PivotSlicerStream();
    internal void set_PivotSlicerStream(Stream value);
    internal Dictionary`2<ChartStyleElements, ShapeStyle> get_DefaultChartStyleElements();
    internal Double[][] get_DefaultColorVariationArray();
    internal List`1<string> get_ChartRelationsToRemove();
    internal void ParseBinaryWorksheetData(WorksheetImpl sheet, Dictionary`2<int, int> dictUpdateSSTIndexes, bool parseOnDemand, XlsbDataHolder dataHolder);
    public void ParseConditionalFormatting(List`1<DxfImpl> dxfStyles, WorksheetImpl sheet);
    public void ParseWorksheetData(WorksheetImpl sheet, Dictionary`2<int, int> dictUpdateSSTIndexes, bool parseOnDemand);
    public void CollectPivotRelations(string itemName);
    public void ParsePivotTable(IWorksheet sheet);
    public void ParseChartsheetData(ChartImpl chart);
    internal Stream ParseDialogMacrosheetData();
    public void SerializeWorksheet(WorksheetImpl sheet, Dictionary`2<int, int> hashNewXFIndexes, Dictionary`2<PivotCacheImpl, string> cacheFiles);
    private void SerializeOleStreamFile(WorksheetImpl sheet);
    private void SerializeOle(WorksheetImpl sheet, OleObject oleObject);
    public void SerializeChartsheet(ChartImpl chart);
    internal void SerializeDialogsheet(Stream DialogStream, WorkbookImpl book);
    internal void SerializeMacrosheet(Stream MacroStream, WorkbookImpl book);
    public RelationCollection ParseVmlShapes(ShapeCollectionBase shapes, string relationId, RelationCollection relations);
    internal void ParseOleData(WorksheetBaseImpl sheet, string relationId, OleObject oleObject);
    private bool GetOleObjectType(string oleType);
    public void ParseDrawings(WorksheetBaseImpl sheet, string relationId, Dictionary`2<string, object> dictItemsToRemove);
    public void ParseDrawings(WorksheetBaseImpl sheet, Relation drawingRelation, Dictionary`2<string, object> dictItemsToRemove);
    internal void ParseDrawings(WorksheetBaseImpl sheet, Relation drawingRelation, Dictionary`2<string, object> dictItemsToRemove, bool isChartShape);
    private void SerializeWorksheetPart(WorksheetImpl sheet, Dictionary`2<int, int> hashNewXFIndexes);
    private void SerializeChartsheetPart(ChartImpl chart);
    private void SerializeChartObject(ChartImpl chart, RelationCollection drawingRelations, string chartSheetDrawingId, string dummyChartRelationId);
    private void SerializeDummyChartForChartEx(WorkbookImpl workbook, FileDataHolder holder, string chartName, string chartRelationId);
    private string SerializeChartSheetDrawing(ChartImpl chart, string drawingItemName, RelationCollection drawingRelations, String& dummyChartRelation);
    private void SerializePivotTables(WorksheetImpl sheet, Dictionary`2<PivotCacheImpl, string> dictCacheFiles);
    private void SerializePivotTable(PivotTableImpl table, Dictionary`2<PivotCacheImpl, string> dictCacheFiles);
    internal void SerializeWorksheetRelations();
    private void SerializeWorksheetDrawings(WorksheetBaseImpl sheet);
    public bool SerializeDrawings(WorksheetBaseImpl sheet);
    public bool SerializeDrawings(WorksheetBaseImpl sheet, RelationCollection relations, String& id, string contentType, string relationType);
    internal void SerializeChartExFallbackShape(WorksheetBaseImpl sheet, RelationCollection relations, String& id, string chartItemName, string contentType, string relationType);
    internal void SerializeChartExFallBackShapeContent(XmlWriter writer, bool isChartSheet);
    private void SerializeVmlDrawings(WorksheetBaseImpl sheet);
    public void SerializeHeaderFooterImages(WorksheetBaseImpl sheet, RelationCollection relations);
    public void SerializeRelations(string strParentItemName);
    public void SerializeRelations(RelationCollection relations, string strParentItemName, WorksheetDataHolder holder);
    internal void SerializeRelations(RelationCollection relations, string strParentItemName, WorksheetDataHolder holder, WorksheetBaseImpl chart);
    private RelationCollection SerializeChartExStyles(RelationCollection relations, string strParentItemName, WorksheetDataHolder holder, WorksheetBaseImpl chart);
    private string TryAndGetFileName(string itemFormatName, ZipArchive zipArchive);
    private void SerializeDefaultChartColorStyles(XmlWriter writer, ApplicationImpl applicationImpl);
    private void SerializeDefaultChartStyles(XmlWriter writer, ChartImpl chart, ApplicationImpl applicationImpl);
    private void SerializeComments(WorksheetImpl sheet);
    private void SerializeThreadedCommentItems(WorksheetImpl sheet);
    private string GenerateDrawingsName(IWorkbook workbook);
    private string GenerateVmlDrawingsName();
    private string GenerateCommentsName();
    private string GenerateThreadedCommentsName();
    public void SerializeTables(XmlWriter writer, WorksheetImpl sheet);
    private string SerializeTable(IListObject listObject, int index);
    internal void SerializeSlicers(XmlWriter writer, WorksheetImpl sheet);
    private string SerializeSlicer(ISlicers slicers);
    internal void ParseTablePart(IWorksheet sheet, string strRelation, string sheetPath);
    internal void ParseSlicer(IWorksheet sheet, string strRelation);
    internal void ParsePivotTables(IWorksheet sheet, string strParentPath, RelationCollection relations);
    internal void AssignDrawingrelation(RelationCollection relation);
    private void InitializeChartStyleElements();
    private void InitializeChartColorElements();
    public WorksheetDataHolder Clone(FileDataHolder dataHolder);
    public sealed virtual void Dispose();
}
internal class Syncfusion.XlsIO.Implementation.XmlSerialization.XlsxSerializator : Excel2016Serializator {
    private static string VersionValue;
    public ExcelVersion Version { get; }
    internal XlsxSerializator(WorkbookImpl book);
    public virtual ExcelVersion get_Version();
    protected virtual void SerializeAppVersion(XmlWriter writer);
}
[AttributeUsageAttribute("4")]
public class Syncfusion.XlsIO.Implementation.XmlSerialization.XmlSerializatorAttribute : Attribute {
    private ExcelXmlSaveType m_saveType;
    public ExcelXmlSaveType SaveType { get; }
    public XmlSerializatorAttribute(ExcelXmlSaveType saveType);
    public ExcelXmlSaveType get_SaveType();
}
public class Syncfusion.XlsIO.Implementation.XmlSerialization.XmlSerializatorFactory : object {
    private static Dictionary`2<int, IXmlSerializator> s_dicSerializators;
    private static XmlSerializatorFactory();
    public static void RegisterXmlSerializator(ExcelXmlSaveType saveType, Type type);
    public static IXmlSerializator GetSerializator(ExcelXmlSaveType saveType);
}
public interface Syncfusion.XlsIO.IName {
    public int Index { get; }
    public string Name { get; public set; }
    public string NameLocal { get; public set; }
    public IRange RefersToRange { get; public set; }
    public string Value { get; public set; }
    public bool Visible { get; public set; }
    public bool IsLocal { get; }
    public string ValueR1C1 { get; }
    public string RefersTo { get; }
    public string RefersToR1C1 { get; }
    public IWorksheet Worksheet { get; }
    public string Scope { get; }
    public string Description { get; public set; }
    public abstract virtual int get_Index();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_NameLocal();
    public abstract virtual void set_NameLocal(string value);
    public abstract virtual IRange get_RefersToRange();
    public abstract virtual void set_RefersToRange(IRange value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual bool get_IsLocal();
    public abstract virtual string get_ValueR1C1();
    public abstract virtual string get_RefersTo();
    public abstract virtual string get_RefersToR1C1();
    public abstract virtual IWorksheet get_Worksheet();
    public abstract virtual string get_Scope();
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual void Delete();
}
public interface Syncfusion.XlsIO.INameIndexChangedEventProvider {
    [CompilerGeneratedAttribute]
public abstract virtual void add_NameIndexChanged(NameIndexChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NameIndexChanged(NameIndexChangedEventHandler value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.INames {
    public IApplication Application { get; }
    public int Count { get; }
    public object Parent { get; }
    public IName Item { get; }
    public IName Item { get; }
    public IWorksheet ParentWorksheet { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual int get_Count();
    public abstract virtual object get_Parent();
    public abstract virtual IName get_Item(int index);
    public abstract virtual IName get_Item(string name);
    public abstract virtual IWorksheet get_ParentWorksheet();
    public abstract virtual IName Add(string name);
    public abstract virtual IName Add(string name, IRange namedObject);
    public abstract virtual IName Add(IName name);
    public abstract virtual void Remove(string name);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual bool Contains(string name);
}
internal interface Syncfusion.XlsIO.Interfaces.Charts.IInternalChartTextArea {
    public ColorObject ColorObject { get; }
    public bool HasTextRotation { get; }
    public ChartParagraphType ParagraphType { get; public set; }
    public abstract virtual ColorObject get_ColorObject();
    public abstract virtual bool get_HasTextRotation();
    public abstract virtual ChartParagraphType get_ParagraphType();
    public abstract virtual void set_ParagraphType(ChartParagraphType value);
}
public interface Syncfusion.XlsIO.Interfaces.ICloneParent {
    public abstract virtual object Clone(object parent);
}
public interface Syncfusion.XlsIO.Interfaces.IFilter {
    public ExcelFilterType FilterType { get; }
    public abstract virtual ExcelFilterType get_FilterType();
}
public interface Syncfusion.XlsIO.Interfaces.IGradient {
    public ColorObject BackColorObject { get; }
    public Color BackColor { get; public set; }
    public ExcelKnownColors BackColorIndex { get; public set; }
    public ColorObject ForeColorObject { get; }
    public Color ForeColor { get; public set; }
    public ExcelKnownColors ForeColorIndex { get; public set; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public abstract virtual ColorObject get_BackColorObject();
    public abstract virtual Color get_BackColor();
    public abstract virtual void set_BackColor(Color value);
    public abstract virtual ExcelKnownColors get_BackColorIndex();
    public abstract virtual void set_BackColorIndex(ExcelKnownColors value);
    public abstract virtual ColorObject get_ForeColorObject();
    public abstract virtual Color get_ForeColor();
    public abstract virtual void set_ForeColor(Color value);
    public abstract virtual ExcelKnownColors get_ForeColorIndex();
    public abstract virtual void set_ForeColorIndex(ExcelKnownColors value);
    public abstract virtual ExcelGradientStyle get_GradientStyle();
    public abstract virtual void set_GradientStyle(ExcelGradientStyle value);
    public abstract virtual ExcelGradientVariants get_GradientVariant();
    public abstract virtual void set_GradientVariant(ExcelGradientVariants value);
    public abstract virtual int CompareTo(IGradient gradient);
    public abstract virtual void TwoColorGradient();
    public abstract virtual void TwoColorGradient(ExcelGradientStyle style, ExcelGradientVariants variant);
}
public interface Syncfusion.XlsIO.Interfaces.IInterior {
    public ExcelKnownColors PatternColorIndex { get; public set; }
    public Color PatternColor { get; public set; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public Color Color { get; public set; }
    public IGradient Gradient { get; }
    public ExcelPattern FillPattern { get; public set; }
    public abstract virtual ExcelKnownColors get_PatternColorIndex();
    public abstract virtual void set_PatternColorIndex(ExcelKnownColors value);
    public abstract virtual Color get_PatternColor();
    public abstract virtual void set_PatternColor(Color value);
    public abstract virtual ExcelKnownColors get_ColorIndex();
    public abstract virtual void set_ColorIndex(ExcelKnownColors value);
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual IGradient get_Gradient();
    public abstract virtual ExcelPattern get_FillPattern();
    public abstract virtual void set_FillPattern(ExcelPattern value);
}
internal interface Syncfusion.XlsIO.Interfaces.IInternalConditionalFormat {
    public ColorObject ColorObject { get; }
    public ColorObject BackColorObject { get; }
    public ColorObject TopBorderColorObject { get; }
    public ColorObject BottomBorderColorObject { get; }
    public ColorObject LeftBorderColorObject { get; }
    public ColorObject RightBorderColorObject { get; }
    public ColorObject FontColorObject { get; }
    public ExcelGradientStyle GradientStyle { get; public set; }
    public ExcelGradientVariants GradientVariant { get; public set; }
    public bool IsPatternStyleModified { get; public set; }
    public Ptg[] FirstFormulaPtgs { get; }
    public Ptg[] SecondFormulaPtgs { get; }
    public abstract virtual ColorObject get_ColorObject();
    public abstract virtual ColorObject get_BackColorObject();
    public abstract virtual ColorObject get_TopBorderColorObject();
    public abstract virtual ColorObject get_BottomBorderColorObject();
    public abstract virtual ColorObject get_LeftBorderColorObject();
    public abstract virtual ColorObject get_RightBorderColorObject();
    public abstract virtual ColorObject get_FontColorObject();
    public abstract virtual ExcelGradientStyle get_GradientStyle();
    public abstract virtual void set_GradientStyle(ExcelGradientStyle value);
    public abstract virtual ExcelGradientVariants get_GradientVariant();
    public abstract virtual void set_GradientVariant(ExcelGradientVariants value);
    public abstract virtual bool get_IsPatternStyleModified();
    public abstract virtual void set_IsPatternStyleModified(bool value);
    public abstract virtual Ptg[] get_FirstFormulaPtgs();
    public abstract virtual Ptg[] get_SecondFormulaPtgs();
}
internal interface Syncfusion.XlsIO.Interfaces.IInternalDataValidation {
    public Ptg[] FirstFormulaTokens { get; public set; }
    public Ptg[] SecondFormulaTokens { get; public set; }
    public abstract virtual Ptg[] get_FirstFormulaTokens();
    public abstract virtual void set_FirstFormulaTokens(Ptg[] value);
    public abstract virtual Ptg[] get_SecondFormulaTokens();
    public abstract virtual void set_SecondFormulaTokens(Ptg[] value);
}
public interface Syncfusion.XlsIO.Interfaces.IInternalExtendedFormat {
    public ColorObject BottomBorderColor { get; }
    public ColorObject TopBorderColor { get; }
    public ColorObject LeftBorderColor { get; }
    public ColorObject RightBorderColor { get; }
    public ColorObject DiagonalBorderColor { get; }
    public ExcelLineStyle LeftBorderLineStyle { get; public set; }
    public ExcelLineStyle RightBorderLineStyle { get; public set; }
    public ExcelLineStyle TopBorderLineStyle { get; public set; }
    public ExcelLineStyle BottomBorderLineStyle { get; public set; }
    public ExcelLineStyle DiagonalUpBorderLineStyle { get; public set; }
    public ExcelLineStyle DiagonalDownBorderLineStyle { get; public set; }
    public bool DiagonalUpVisible { get; public set; }
    public bool DiagonalDownVisible { get; public set; }
    public WorkbookImpl Workbook { get; }
    public abstract virtual ColorObject get_BottomBorderColor();
    public abstract virtual ColorObject get_TopBorderColor();
    public abstract virtual ColorObject get_LeftBorderColor();
    public abstract virtual ColorObject get_RightBorderColor();
    public abstract virtual ColorObject get_DiagonalBorderColor();
    public abstract virtual ExcelLineStyle get_LeftBorderLineStyle();
    public abstract virtual void set_LeftBorderLineStyle(ExcelLineStyle value);
    public abstract virtual ExcelLineStyle get_RightBorderLineStyle();
    public abstract virtual void set_RightBorderLineStyle(ExcelLineStyle value);
    public abstract virtual ExcelLineStyle get_TopBorderLineStyle();
    public abstract virtual void set_TopBorderLineStyle(ExcelLineStyle value);
    public abstract virtual ExcelLineStyle get_BottomBorderLineStyle();
    public abstract virtual void set_BottomBorderLineStyle(ExcelLineStyle value);
    public abstract virtual ExcelLineStyle get_DiagonalUpBorderLineStyle();
    public abstract virtual void set_DiagonalUpBorderLineStyle(ExcelLineStyle value);
    public abstract virtual ExcelLineStyle get_DiagonalDownBorderLineStyle();
    public abstract virtual void set_DiagonalDownBorderLineStyle(ExcelLineStyle value);
    public abstract virtual bool get_DiagonalUpVisible();
    public abstract virtual void set_DiagonalUpVisible(bool value);
    public abstract virtual bool get_DiagonalDownVisible();
    public abstract virtual void set_DiagonalDownVisible(bool value);
    public abstract virtual WorkbookImpl get_Workbook();
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
}
public interface Syncfusion.XlsIO.Interfaces.IInternalFill {
    public ColorObject BackColorObject { get; }
    public ColorObject ForeColorObject { get; }
    public bool Tile { get; public set; }
    public GradientStops PreservedGradient { get; public set; }
    public bool IsGradientSupported { get; public set; }
    public float TransparencyColor { get; public set; }
    public float TextureVerticalScale { get; public set; }
    public float TextureHorizontalScale { get; public set; }
    public float TextureOffsetX { get; public set; }
    public float TextureOffsetY { get; public set; }
    public string Alignment { get; public set; }
    public string TileFlipping { get; public set; }
    public abstract virtual ColorObject get_BackColorObject();
    public abstract virtual ColorObject get_ForeColorObject();
    public abstract virtual bool get_Tile();
    public abstract virtual void set_Tile(bool value);
    public abstract virtual GradientStops get_PreservedGradient();
    public abstract virtual void set_PreservedGradient(GradientStops value);
    public abstract virtual bool get_IsGradientSupported();
    public abstract virtual void set_IsGradientSupported(bool value);
    public abstract virtual float get_TransparencyColor();
    public abstract virtual void set_TransparencyColor(float value);
    public abstract virtual float get_TextureVerticalScale();
    public abstract virtual void set_TextureVerticalScale(float value);
    public abstract virtual float get_TextureHorizontalScale();
    public abstract virtual void set_TextureHorizontalScale(float value);
    public abstract virtual float get_TextureOffsetX();
    public abstract virtual void set_TextureOffsetX(float value);
    public abstract virtual float get_TextureOffsetY();
    public abstract virtual void set_TextureOffsetY(float value);
    public abstract virtual string get_Alignment();
    public abstract virtual void set_Alignment(string value);
    public abstract virtual string get_TileFlipping();
    public abstract virtual void set_TileFlipping(string value);
}
public interface Syncfusion.XlsIO.Interfaces.IInternalFont {
    public int Index { get; }
    public FontImpl Font { get; }
    public abstract virtual int get_Index();
    public abstract virtual FontImpl get_Font();
}
public interface Syncfusion.XlsIO.Interfaces.IInternalWorksheet {
    public int DefaultRowHeight { get; }
    public int FirstRow { get; public set; }
    public int FirstColumn { get; public set; }
    public int LastRow { get; public set; }
    public int LastColumn { get; public set; }
    public CellRecordCollection CellRecords { get; }
    public WorkbookImpl ParentWorkbook { get; }
    public ExcelVersion Version { get; }
    public abstract virtual int get_DefaultRowHeight();
    public abstract virtual int get_FirstRow();
    public abstract virtual void set_FirstRow(int value);
    public abstract virtual int get_FirstColumn();
    public abstract virtual void set_FirstColumn(int value);
    public abstract virtual int get_LastRow();
    public abstract virtual void set_LastRow(int value);
    public abstract virtual int get_LastColumn();
    public abstract virtual void set_LastColumn(int value);
    public abstract virtual CellRecordCollection get_CellRecords();
    public abstract virtual WorkbookImpl get_ParentWorkbook();
    public abstract virtual ExcelVersion get_Version();
    public abstract virtual bool IsArrayFormula(long index);
    public abstract virtual IInternalWorksheet GetClonedObject(Dictionary`2<string, string> hashNewNames, WorkbookImpl book);
}
public interface Syncfusion.XlsIO.Interfaces.IMultipleFilter {
    public ExcelCombinationFilterType CombinationFilterType { get; }
    public abstract virtual ExcelCombinationFilterType get_CombinationFilterType();
}
public interface Syncfusion.XlsIO.Interfaces.INamedObject {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Syncfusion.XlsIO.Interfaces.INativePTG {
    public abstract virtual Ptg[] GetNativePtg();
}
internal interface Syncfusion.XlsIO.Interfaces.IOperation {
    public abstract virtual void Do();
}
public interface Syncfusion.XlsIO.Interfaces.IOptimizedUpdate {
    public abstract virtual void BeginUpdate();
    public abstract virtual void EndUpdate();
}
public interface Syncfusion.XlsIO.Interfaces.IPage {
    public string LeftHeader { get; public set; }
    public string CenterHeader { get; public set; }
    public string RightHeader { get; public set; }
    public string LeftFooter { get; public set; }
    public string CenterFooter { get; public set; }
    public string RightFooter { get; public set; }
    public Image LeftHeaderImage { get; public set; }
    public Image CenterHeaderImage { get; public set; }
    public Image RightHeaderImage { get; public set; }
    public Image LeftFooterImage { get; public set; }
    public Image CenterFooterImage { get; public set; }
    public Image RightFooterImage { get; public set; }
    public abstract virtual string get_LeftHeader();
    public abstract virtual void set_LeftHeader(string value);
    public abstract virtual string get_CenterHeader();
    public abstract virtual void set_CenterHeader(string value);
    public abstract virtual string get_RightHeader();
    public abstract virtual void set_RightHeader(string value);
    public abstract virtual string get_LeftFooter();
    public abstract virtual void set_LeftFooter(string value);
    public abstract virtual string get_CenterFooter();
    public abstract virtual void set_CenterFooter(string value);
    public abstract virtual string get_RightFooter();
    public abstract virtual void set_RightFooter(string value);
    public abstract virtual Image get_LeftHeaderImage();
    public abstract virtual void set_LeftHeaderImage(Image value);
    public abstract virtual Image get_CenterHeaderImage();
    public abstract virtual void set_CenterHeaderImage(Image value);
    public abstract virtual Image get_RightHeaderImage();
    public abstract virtual void set_RightHeaderImage(Image value);
    public abstract virtual Image get_LeftFooterImage();
    public abstract virtual void set_LeftFooterImage(Image value);
    public abstract virtual Image get_CenterFooterImage();
    public abstract virtual void set_CenterFooterImage(Image value);
    public abstract virtual Image get_RightFooterImage();
    public abstract virtual void set_RightFooterImage(Image value);
}
public interface Syncfusion.XlsIO.Interfaces.IPageSetupBase {
    public bool AutoFirstPageNumber { get; public set; }
    public bool BlackAndWhite { get; public set; }
    public double BottomMargin { get; public set; }
    public string CenterFooter { get; public set; }
    public Image CenterFooterImage { get; public set; }
    public Image CenterHeaderImage { get; public set; }
    public string CenterHeader { get; public set; }
    public bool CenterHorizontally { get; public set; }
    public bool CenterVertically { get; public set; }
    public int Copies { get; public set; }
    public bool Draft { get; public set; }
    public short FirstPageNumber { get; public set; }
    public double FooterMargin { get; public set; }
    public double HeaderMargin { get; public set; }
    public string LeftFooter { get; public set; }
    public Image LeftFooterImage { get; public set; }
    public Image LeftHeaderImage { get; public set; }
    public string LeftHeader { get; public set; }
    public double LeftMargin { get; public set; }
    public ExcelOrder Order { get; public set; }
    public ExcelPageOrientation Orientation { get; public set; }
    public ExcelPaperSize PaperSize { get; public set; }
    public ExcelPrintLocation PrintComments { get; public set; }
    public ExcelPrintErrors PrintErrors { get; public set; }
    public bool PrintNotes { get; public set; }
    public int PrintQuality { get; public set; }
    public string RightFooter { get; public set; }
    public Image RightFooterImage { get; public set; }
    public Image RightHeaderImage { get; public set; }
    public string RightHeader { get; public set; }
    public double RightMargin { get; public set; }
    public double TopMargin { get; public set; }
    public int Zoom { get; public set; }
    public bool AlignHFWithPageMargins { get; public set; }
    public bool DifferentFirstPageHF { get; public set; }
    public bool DifferentOddAndEvenPagesHF { get; public set; }
    public bool HFScaleWithDoc { get; public set; }
    public IPage EvenPage { get; }
    public IPage FirstPage { get; }
    public Image BackgoundImage { get; public set; }
    public abstract virtual bool get_AutoFirstPageNumber();
    public abstract virtual void set_AutoFirstPageNumber(bool value);
    public abstract virtual bool get_BlackAndWhite();
    public abstract virtual void set_BlackAndWhite(bool value);
    public abstract virtual double get_BottomMargin();
    public abstract virtual void set_BottomMargin(double value);
    public abstract virtual string get_CenterFooter();
    public abstract virtual void set_CenterFooter(string value);
    public abstract virtual Image get_CenterFooterImage();
    public abstract virtual void set_CenterFooterImage(Image value);
    public abstract virtual Image get_CenterHeaderImage();
    public abstract virtual void set_CenterHeaderImage(Image value);
    public abstract virtual string get_CenterHeader();
    public abstract virtual void set_CenterHeader(string value);
    public abstract virtual bool get_CenterHorizontally();
    public abstract virtual void set_CenterHorizontally(bool value);
    public abstract virtual bool get_CenterVertically();
    public abstract virtual void set_CenterVertically(bool value);
    public abstract virtual int get_Copies();
    public abstract virtual void set_Copies(int value);
    public abstract virtual bool get_Draft();
    public abstract virtual void set_Draft(bool value);
    public abstract virtual short get_FirstPageNumber();
    public abstract virtual void set_FirstPageNumber(short value);
    public abstract virtual double get_FooterMargin();
    public abstract virtual void set_FooterMargin(double value);
    public abstract virtual double get_HeaderMargin();
    public abstract virtual void set_HeaderMargin(double value);
    public abstract virtual string get_LeftFooter();
    public abstract virtual void set_LeftFooter(string value);
    public abstract virtual Image get_LeftFooterImage();
    public abstract virtual void set_LeftFooterImage(Image value);
    public abstract virtual Image get_LeftHeaderImage();
    public abstract virtual void set_LeftHeaderImage(Image value);
    public abstract virtual string get_LeftHeader();
    public abstract virtual void set_LeftHeader(string value);
    public abstract virtual double get_LeftMargin();
    public abstract virtual void set_LeftMargin(double value);
    public abstract virtual ExcelOrder get_Order();
    public abstract virtual void set_Order(ExcelOrder value);
    public abstract virtual ExcelPageOrientation get_Orientation();
    public abstract virtual void set_Orientation(ExcelPageOrientation value);
    public abstract virtual ExcelPaperSize get_PaperSize();
    public abstract virtual void set_PaperSize(ExcelPaperSize value);
    public abstract virtual ExcelPrintLocation get_PrintComments();
    public abstract virtual void set_PrintComments(ExcelPrintLocation value);
    public abstract virtual ExcelPrintErrors get_PrintErrors();
    public abstract virtual void set_PrintErrors(ExcelPrintErrors value);
    public abstract virtual bool get_PrintNotes();
    public abstract virtual void set_PrintNotes(bool value);
    public abstract virtual int get_PrintQuality();
    public abstract virtual void set_PrintQuality(int value);
    public abstract virtual string get_RightFooter();
    public abstract virtual void set_RightFooter(string value);
    public abstract virtual Image get_RightFooterImage();
    public abstract virtual void set_RightFooterImage(Image value);
    public abstract virtual Image get_RightHeaderImage();
    public abstract virtual void set_RightHeaderImage(Image value);
    public abstract virtual string get_RightHeader();
    public abstract virtual void set_RightHeader(string value);
    public abstract virtual double get_RightMargin();
    public abstract virtual void set_RightMargin(double value);
    public abstract virtual double get_TopMargin();
    public abstract virtual void set_TopMargin(double value);
    public abstract virtual int get_Zoom();
    public abstract virtual void set_Zoom(int value);
    public abstract virtual bool get_AlignHFWithPageMargins();
    public abstract virtual void set_AlignHFWithPageMargins(bool value);
    public abstract virtual bool get_DifferentFirstPageHF();
    public abstract virtual void set_DifferentFirstPageHF(bool value);
    public abstract virtual bool get_DifferentOddAndEvenPagesHF();
    public abstract virtual void set_DifferentOddAndEvenPagesHF(bool value);
    public abstract virtual bool get_HFScaleWithDoc();
    public abstract virtual void set_HFScaleWithDoc(bool value);
    public abstract virtual IPage get_EvenPage();
    public abstract virtual IPage get_FirstPage();
    public abstract virtual Image get_BackgoundImage();
    public abstract virtual void set_BackgoundImage(Image value);
}
public interface Syncfusion.XlsIO.Interfaces.IParseable {
    public abstract virtual void Parse();
}
internal interface Syncfusion.XlsIO.Interfaces.IQueryTable {
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Interfaces.ISerializable {
    public abstract virtual void Serialize(IList`1<IBiffStorage> records);
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Interfaces.ISerializableNamedObject {
    public string Name { get; public set; }
    public int RealIndex { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_RealIndex();
    public abstract virtual void set_RealIndex(int value);
    public abstract virtual void Serialize(OffsetArrayList records);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NameChanged(ValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NameChanged(ValueChangedEventHandler value);
}
public interface Syncfusion.XlsIO.Interfaces.IShapeGetter {
    public abstract virtual ShapeCollectionBase GetShapes(WorksheetBaseImpl sheet);
}
public interface Syncfusion.XlsIO.Interfaces.IWorkbookSerializator {
    public abstract virtual void Serialize(Stream stream, WorkbookImpl book, ExcelSaveType saveType);
}
public interface Syncfusion.XlsIO.Interfaces.IXFIndex {
    public int XFormatIndex { get; }
    public abstract virtual int get_XFormatIndex();
}
internal interface Syncfusion.XlsIO.Interfaces.PivotTables.IPivotCalculatedItem {
    public string Formula { get; }
    public abstract virtual string get_Formula();
}
public interface Syncfusion.XlsIO.Interfaces.Shapes.IGradientStop {
    public Color Color { get; public set; }
    public int Position { get; public set; }
    public int Transparency { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public abstract virtual int get_Transparency();
    public abstract virtual void set_Transparency(int value);
}
public interface Syncfusion.XlsIO.Interfaces.XmlSerialization.IXmlSerializator {
    public abstract virtual void Serialize(XmlWriter writer, IWorkbook book);
}
public interface Syncfusion.XlsIO.INumberFormat {
    public int Index { get; }
    public string FormatString { get; }
    public ExcelFormatType FormatType { get; }
    public bool IsFraction { get; }
    public bool IsScientific { get; }
    public bool IsThousandSeparator { get; }
    public int DecimalPlaces { get; }
    public abstract virtual int get_Index();
    public abstract virtual string get_FormatString();
    public abstract virtual ExcelFormatType get_FormatType();
    public abstract virtual bool get_IsFraction();
    public abstract virtual bool get_IsScientific();
    public abstract virtual bool get_IsThousandSeparator();
    public abstract virtual int get_DecimalPlaces();
}
public interface Syncfusion.XlsIO.IOleObject {
    public IRange Location { get; public set; }
    public Size Size { get; public set; }
    public Image Picture { get; }
    public IPictureShape Shape { get; }
    public string Name { get; }
    public bool DisplayAsIcon { get; public set; }
    public abstract virtual IRange get_Location();
    public abstract virtual void set_Location(IRange value);
    public abstract virtual Size get_Size();
    public abstract virtual void set_Size(Size value);
    public abstract virtual Image get_Picture();
    public abstract virtual IPictureShape get_Shape();
    public abstract virtual string get_Name();
    public abstract virtual bool get_DisplayAsIcon();
    public abstract virtual void set_DisplayAsIcon(bool value);
    public abstract virtual Stream GetEmbeddedOleStream();
}
public interface Syncfusion.XlsIO.IOleObjects {
    public abstract virtual IOleObject Add(Stream oleStream, Image image, OleObjectType type);
    public abstract virtual IOleObject Add(Stream oleStream, Image image, string fileExtension);
    public abstract virtual IOleObject AddLink(string filePath, Image image);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IOptionButtons {
    public int Count { get; }
    public IOptionButtonShape Item { get; }
    public IOptionButtonShape Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IOptionButtonShape get_Item(int index);
    public abstract virtual IOptionButtonShape get_Item(string name);
    public abstract virtual IOptionButtonShape AddOptionButton(int row, int column, int height, int width);
    public abstract virtual IOptionButtonShape AddOptionButton();
    public abstract virtual IOptionButtonShape AddOptionButton(int row, int column);
}
public interface Syncfusion.XlsIO.IOptionButtonShape {
    public ExcelCheckState CheckState { get; public set; }
    public bool IsFirstButton { get; }
    public bool Display3DShading { get; public set; }
    public IRange LinkedCell { get; public set; }
    public abstract virtual ExcelCheckState get_CheckState();
    public abstract virtual void set_CheckState(ExcelCheckState value);
    public abstract virtual bool get_IsFirstButton();
    public abstract virtual bool get_Display3DShading();
    public abstract virtual void set_Display3DShading(bool value);
    public abstract virtual IRange get_LinkedCell();
    public abstract virtual void set_LinkedCell(IRange value);
}
public interface Syncfusion.XlsIO.IPageSetup {
    public int FitToPagesTall { get; public set; }
    public int FitToPagesWide { get; public set; }
    public bool PrintGridlines { get; public set; }
    public bool PrintHeadings { get; public set; }
    public string PrintArea { get; public set; }
    public string PrintTitleColumns { get; public set; }
    public string PrintTitleRows { get; public set; }
    public bool IsSummaryRowBelow { get; public set; }
    public bool IsSummaryColumnRight { get; public set; }
    public bool IsFitToPage { get; public set; }
    public abstract virtual int get_FitToPagesTall();
    public abstract virtual void set_FitToPagesTall(int value);
    public abstract virtual int get_FitToPagesWide();
    public abstract virtual void set_FitToPagesWide(int value);
    public abstract virtual bool get_PrintGridlines();
    public abstract virtual void set_PrintGridlines(bool value);
    public abstract virtual bool get_PrintHeadings();
    public abstract virtual void set_PrintHeadings(bool value);
    public abstract virtual string get_PrintArea();
    public abstract virtual void set_PrintArea(string value);
    public abstract virtual string get_PrintTitleColumns();
    public abstract virtual void set_PrintTitleColumns(string value);
    public abstract virtual string get_PrintTitleRows();
    public abstract virtual void set_PrintTitleRows(string value);
    public abstract virtual bool get_IsSummaryRowBelow();
    public abstract virtual void set_IsSummaryRowBelow(bool value);
    public abstract virtual bool get_IsSummaryColumnRight();
    public abstract virtual void set_IsSummaryColumnRight(bool value);
    public abstract virtual bool get_IsFitToPage();
    public abstract virtual void set_IsFitToPage(bool value);
}
public interface Syncfusion.XlsIO.IParameter {
    public ExcelParameterDataType DataType { get; public set; }
    public ExcelParameterType Type { get; }
    public string PromptString { get; }
    public object Value { get; }
    public IRange SourceRange { get; }
    public string Name { get; public set; }
    public bool RefreshOnChange { get; public set; }
    public abstract virtual void SetParam(ExcelParameterType Type, object Value);
    public abstract virtual ExcelParameterDataType get_DataType();
    public abstract virtual void set_DataType(ExcelParameterDataType value);
    public abstract virtual ExcelParameterType get_Type();
    public abstract virtual string get_PromptString();
    public abstract virtual object get_Value();
    public abstract virtual IRange get_SourceRange();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_RefreshOnChange();
    public abstract virtual void set_RefreshOnChange(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Prompt(PromptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Prompt(PromptEventHandler value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IParameters {
    public int Count { get; }
    public IParameter Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IParameter get_Item(int index);
    public abstract virtual IParameter Add(string name, ExcelParameterDataType dataType);
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.XlsIO.IParentApplication {
    public IApplication Application { get; }
    public object Parent { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual object get_Parent();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IPictures {
    public int Count { get; }
    public IPictureShape Item { get; }
    public IPictureShape Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IPictureShape get_Item(int Index);
    public abstract virtual IPictureShape get_Item(string name);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Image image);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Image image, ExcelImageFormat imageFormat);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream stream);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream svgStream, Stream imageStream);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream svgStream, Stream imageStream, int scaleWidth, int scaleHeight);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream stream, ExcelImageFormat imageFormat);
    public abstract virtual IPictureShape AddPictureAsLink(int topRow, int leftColumn, int bottomRow, int rightColumn, string url);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, int bottomRow, int rightColumn, Image image);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, int bottomRow, int rightColumn, Image image, ExcelImageFormat imageFormat);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, int bottomRow, int rightColumn, Stream stream);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, int bottomRow, int rightColumn, Stream stream, ExcelImageFormat imageFormat);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Image image, int scaleWidth, int scaleHeight);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Image image, int scaleWidth, int scaleHeight, ExcelImageFormat imageFormat);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream stream, int scaleWidth, int scaleHeight);
    public abstract virtual IPictureShape AddPicture(int topRow, int leftColumn, Stream stream, int scaleWidth, int scaleHeight, ExcelImageFormat imageFormat);
}
public interface Syncfusion.XlsIO.IPictureShape {
    public string FileName { get; }
    public Image Picture { get; public set; }
    public Stream SvgData { get; public set; }
    public abstract virtual string get_FileName();
    public abstract virtual Image get_Picture();
    public abstract virtual void set_Picture(Image value);
    public abstract virtual Stream get_SvgData();
    public abstract virtual void set_SvgData(Stream value);
    public abstract virtual void Remove(bool removeImage);
}
public interface Syncfusion.XlsIO.IPivotCache {
    public int Index { get; }
    public ExcelDataSourceType SourceType { get; }
    public IRange SourceRange { get; public set; }
    public bool IsSerializePivotCache { get; public set; }
    public abstract virtual int get_Index();
    public abstract virtual ExcelDataSourceType get_SourceType();
    public abstract virtual IRange get_SourceRange();
    public abstract virtual void set_SourceRange(IRange value);
    public abstract virtual bool get_IsSerializePivotCache();
    public abstract virtual void set_IsSerializePivotCache(bool value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IPivotCaches {
    public int Count { get; }
    public IPivotCache Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IPivotCache get_Item(int index);
    public abstract virtual IPivotCache Add(IRange range);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IPivotCalculatedFields {
    public int Count { get; }
    public IPivotField Item { get; }
    public IPivotField Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IPivotField get_Item(int index);
    public abstract virtual IPivotField get_Item(string name);
    public abstract virtual IPivotField Add(string name, string formula);
}
public interface Syncfusion.XlsIO.IPivotCellFormat {
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern PatternStyle { get; public set; }
    public Color PatternColorRGB { get; public set; }
    public ExcelKnownColors PatternColor { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public double FontSize { get; public set; }
    public string FontName { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool StrikeThrough { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors HorizontalBorderColor { get; public set; }
    public Color HorizontalBorderColorRGB { get; public set; }
    public ExcelLineStyle HorizontalBorderStyle { get; public set; }
    public ExcelKnownColors VerticalBorderColor { get; public set; }
    public Color VerticalBorderColorRGB { get; public set; }
    public ExcelLineStyle VerticalBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public int IndentLevel { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public ExcelKnownColors DiagonalBorderColor { get; public set; }
    public Color DiagonalBorderColorRGB { get; public set; }
    public ExcelLineStyle DiagonalBorderStyle { get; public set; }
    public ExcelReadingOrderType ReadingOrder { get; public set; }
    public bool WrapText { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public bool Locked { get; public set; }
    public bool FormulaHidden { get; public set; }
    public int Rotation { get; public set; }
    public ushort NumberFormatIndex { get; public set; }
    public string NumberFormat { get; public set; }
    public abstract virtual ExcelKnownColors get_BackColor();
    public abstract virtual void set_BackColor(ExcelKnownColors value);
    public abstract virtual Color get_BackColorRGB();
    public abstract virtual void set_BackColorRGB(Color value);
    public abstract virtual ExcelPattern get_PatternStyle();
    public abstract virtual void set_PatternStyle(ExcelPattern value);
    public abstract virtual Color get_PatternColorRGB();
    public abstract virtual void set_PatternColorRGB(Color value);
    public abstract virtual ExcelKnownColors get_PatternColor();
    public abstract virtual void set_PatternColor(ExcelKnownColors value);
    public abstract virtual ExcelKnownColors get_FontColor();
    public abstract virtual void set_FontColor(ExcelKnownColors value);
    public abstract virtual Color get_FontColorRGB();
    public abstract virtual void set_FontColorRGB(Color value);
    public abstract virtual double get_FontSize();
    public abstract virtual void set_FontSize(double value);
    public abstract virtual string get_FontName();
    public abstract virtual void set_FontName(string value);
    public abstract virtual bool get_Bold();
    public abstract virtual void set_Bold(bool value);
    public abstract virtual bool get_Italic();
    public abstract virtual void set_Italic(bool value);
    public abstract virtual ExcelUnderline get_Underline();
    public abstract virtual void set_Underline(ExcelUnderline value);
    public abstract virtual bool get_StrikeThrough();
    public abstract virtual void set_StrikeThrough(bool value);
    public abstract virtual ExcelKnownColors get_TopBorderColor();
    public abstract virtual void set_TopBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_TopBorderColorRGB();
    public abstract virtual void set_TopBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_TopBorderStyle();
    public abstract virtual void set_TopBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_HorizontalBorderColor();
    public abstract virtual void set_HorizontalBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_HorizontalBorderColorRGB();
    public abstract virtual void set_HorizontalBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_HorizontalBorderStyle();
    public abstract virtual void set_HorizontalBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_VerticalBorderColor();
    public abstract virtual void set_VerticalBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_VerticalBorderColorRGB();
    public abstract virtual void set_VerticalBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_VerticalBorderStyle();
    public abstract virtual void set_VerticalBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_BottomBorderColor();
    public abstract virtual void set_BottomBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_BottomBorderColorRGB();
    public abstract virtual void set_BottomBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_BottomBorderStyle();
    public abstract virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_RightBorderColor();
    public abstract virtual void set_RightBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_RightBorderColorRGB();
    public abstract virtual void set_RightBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_RightBorderStyle();
    public abstract virtual void set_RightBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_LeftBorderColor();
    public abstract virtual void set_LeftBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_LeftBorderColorRGB();
    public abstract virtual void set_LeftBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_LeftBorderStyle();
    public abstract virtual void set_LeftBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelHAlign get_HorizontalAlignment();
    public abstract virtual void set_HorizontalAlignment(ExcelHAlign value);
    public abstract virtual int get_IndentLevel();
    public abstract virtual void set_IndentLevel(int value);
    public abstract virtual ExcelVAlign get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(ExcelVAlign value);
    public abstract virtual ExcelKnownColors get_DiagonalBorderColor();
    public abstract virtual void set_DiagonalBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_DiagonalBorderColorRGB();
    public abstract virtual void set_DiagonalBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_DiagonalBorderStyle();
    public abstract virtual void set_DiagonalBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelReadingOrderType get_ReadingOrder();
    public abstract virtual void set_ReadingOrder(ExcelReadingOrderType value);
    public abstract virtual bool get_WrapText();
    public abstract virtual void set_WrapText(bool value);
    public abstract virtual bool get_ShrinkToFit();
    public abstract virtual void set_ShrinkToFit(bool value);
    public abstract virtual bool get_Locked();
    public abstract virtual void set_Locked(bool value);
    public abstract virtual bool get_FormulaHidden();
    public abstract virtual void set_FormulaHidden(bool value);
    public abstract virtual int get_Rotation();
    public abstract virtual void set_Rotation(int value);
    public abstract virtual ushort get_NumberFormatIndex();
    public abstract virtual void set_NumberFormatIndex(ushort value);
    public abstract virtual string get_NumberFormat();
    public abstract virtual void set_NumberFormat(string value);
}
public interface Syncfusion.XlsIO.IPivotDataField {
    public string Name { get; public set; }
    public PivotSubtotalTypes Subtotal { get; public set; }
    public PivotFieldDataFormat ShowDataAs { get; public set; }
    public int BaseItem { get; public set; }
    public int BaseField { get; public set; }
    public string NumberFormat { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual PivotSubtotalTypes get_Subtotal();
    public abstract virtual void set_Subtotal(PivotSubtotalTypes value);
    public abstract virtual PivotFieldDataFormat get_ShowDataAs();
    public abstract virtual void set_ShowDataAs(PivotFieldDataFormat value);
    public abstract virtual int get_BaseItem();
    public abstract virtual void set_BaseItem(int value);
    public abstract virtual int get_BaseField();
    public abstract virtual void set_BaseField(int value);
    public abstract virtual void SetPreviousBaseItem();
    public abstract virtual void SetNextBaseItem();
    public abstract virtual string get_NumberFormat();
    public abstract virtual void set_NumberFormat(string value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IPivotDataFields {
    public IPivotDataField Item { get; }
    public IPivotDataField Item { get; }
    public int Count { get; }
    public abstract virtual IPivotDataField get_Item(int index);
    public abstract virtual IPivotDataField get_Item(string name);
    public abstract virtual IPivotDataField Add(IPivotField field, string name, PivotSubtotalTypes subtotal);
    public abstract virtual int get_Count();
}
public interface Syncfusion.XlsIO.IPivotField {
    public string Name { get; public set; }
    public PivotAxisTypes Axis { get; public set; }
    public IPivotFieldGroup FieldGroup { get; }
    [ObsoleteAttribute("Use IPivotValueLableFilter's Value1 property instead of this property")]
public string FilterValue { get; public set; }
    public string NumberFormat { get; public set; }
    public PivotSubtotalTypes Subtotals { get; public set; }
    public bool ShowSubtotalAtTop { get; public set; }
    public bool CanDragToRow { get; public set; }
    public bool CanDragToColumn { get; public set; }
    public bool CanDragToPage { get; public set; }
    public bool CanDragOff { get; public set; }
    public bool ShowBlankRow { get; public set; }
    public bool CanDragToData { get; public set; }
    public bool IsFormulaField { get; }
    public string Formula { get; public set; }
    public IPivotFilters PivotFilters { get; }
    public IPivotFieldItems Items { get; }
    public int Position { get; public set; }
    public bool IncludeNewItemsInFilter { get; public set; }
    public bool RepeatLabels { get; public set; }
    public bool EnableQuartersAndYears { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual PivotAxisTypes get_Axis();
    public abstract virtual void set_Axis(PivotAxisTypes value);
    public abstract virtual IPivotFieldGroup get_FieldGroup();
    public abstract virtual string get_FilterValue();
    public abstract virtual void set_FilterValue(string value);
    public abstract virtual string get_NumberFormat();
    public abstract virtual void set_NumberFormat(string value);
    public abstract virtual PivotSubtotalTypes get_Subtotals();
    public abstract virtual void set_Subtotals(PivotSubtotalTypes value);
    public abstract virtual bool get_ShowSubtotalAtTop();
    public abstract virtual void set_ShowSubtotalAtTop(bool value);
    public abstract virtual bool get_CanDragToRow();
    public abstract virtual void set_CanDragToRow(bool value);
    public abstract virtual bool get_CanDragToColumn();
    public abstract virtual void set_CanDragToColumn(bool value);
    public abstract virtual bool get_CanDragToPage();
    public abstract virtual void set_CanDragToPage(bool value);
    public abstract virtual bool get_CanDragOff();
    public abstract virtual void set_CanDragOff(bool value);
    public abstract virtual bool get_ShowBlankRow();
    public abstract virtual void set_ShowBlankRow(bool value);
    public abstract virtual bool get_CanDragToData();
    public abstract virtual void set_CanDragToData(bool value);
    public abstract virtual bool get_IsFormulaField();
    public abstract virtual string get_Formula();
    public abstract virtual void set_Formula(string value);
    public abstract virtual IPivotFilters get_PivotFilters();
    public abstract virtual IPivotFieldItems get_Items();
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public abstract virtual bool get_IncludeNewItemsInFilter();
    public abstract virtual void set_IncludeNewItemsInFilter(bool value);
    public abstract virtual bool get_RepeatLabels();
    public abstract virtual void set_RepeatLabels(bool value);
    public abstract virtual void Sort(String[] orderByArray);
    public abstract virtual void AutoSort(PivotFieldSortType sortType, int lineNumber);
    public abstract virtual bool get_EnableQuartersAndYears();
    public abstract virtual void set_EnableQuartersAndYears(bool value);
}
public interface Syncfusion.XlsIO.IPivotFieldGroup {
    public PivotFieldGroupType GroupBy { get; public set; }
    public DateTime StartDate { get; public set; }
    public DateTime EndDate { get; public set; }
    public double GroupInterval { get; public set; }
    public abstract virtual PivotFieldGroupType get_GroupBy();
    public abstract virtual void set_GroupBy(PivotFieldGroupType value);
    public abstract virtual DateTime get_StartDate();
    public abstract virtual void set_StartDate(DateTime value);
    public abstract virtual DateTime get_EndDate();
    public abstract virtual void set_EndDate(DateTime value);
    public abstract virtual double get_GroupInterval();
    public abstract virtual void set_GroupInterval(double value);
}
public interface Syncfusion.XlsIO.IPivotFieldItem {
    public bool Visible { get; public set; }
    public int Position { get; public set; }
    public string Text { get; public set; }
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IPivotFieldItems {
    public IPivotFieldItem Item { get; }
    public IPivotFieldItem Item { get; }
    public int Count { get; }
    public abstract virtual IPivotFieldItem get_Item(int index);
    public abstract virtual IPivotFieldItem get_Item(string FilterText);
    public abstract virtual int get_Count();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IPivotFields {
    public int Count { get; }
    public IPivotField Item { get; }
    public IPivotField Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IPivotField get_Item(int index);
    public abstract virtual IPivotField get_Item(string name);
}
public interface Syncfusion.XlsIO.IPivotFilter {
    public string Value1 { get; public set; }
    public abstract virtual string get_Value1();
    public abstract virtual void set_Value1(string value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IPivotFilters {
    public IPivotFilter Item { get; }
    public IPivotField Parent { get; }
    public abstract virtual IPivotFilter Add();
    public abstract virtual IPivotFilter get_Item(int index);
    public abstract virtual IPivotField get_Parent();
    public abstract virtual IPivotValueLableFilter Add(PivotFilterType filterType, IPivotField dataField, string Value1, string Value2);
    public abstract virtual void Remove();
}
public interface Syncfusion.XlsIO.IPivotTable {
    public string Name { get; public set; }
    public IPivotFields Fields { get; }
    public IPivotDataFields DataFields { get; }
    public bool RowGrand { get; public set; }
    public bool ColumnGrand { get; public set; }
    public bool ShowDrillIndicators { get; public set; }
    public bool DisplayFieldCaptions { get; public set; }
    public bool RepeatItemsOnEachPrintedPage { get; public set; }
    public Nullable`1<PivotBuiltInStyles> BuiltInStyle { get; public set; }
    public bool ShowRowGrand { get; public set; }
    public bool ShowColumnGrand { get; public set; }
    public int CacheIndex { get; }
    public IRange Location { get; public set; }
    public IPivotTableOptions Options { get; }
    public int RowsPerPage { get; }
    public int ColumnsPerPage { get; }
    public IPivotCalculatedFields CalculatedFields { get; }
    public IPivotFields PageFields { get; }
    public IPivotFields RowFields { get; }
    public IPivotFields ColumnFields { get; }
    public bool ShowDataFieldInRow { get; public set; }
    public PivotEngine PivotEngineValues { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IPivotFields get_Fields();
    public abstract virtual IPivotDataFields get_DataFields();
    public abstract virtual bool get_RowGrand();
    public abstract virtual void set_RowGrand(bool value);
    public abstract virtual bool get_ColumnGrand();
    public abstract virtual void set_ColumnGrand(bool value);
    public abstract virtual bool get_ShowDrillIndicators();
    public abstract virtual void set_ShowDrillIndicators(bool value);
    public abstract virtual bool get_DisplayFieldCaptions();
    public abstract virtual void set_DisplayFieldCaptions(bool value);
    public abstract virtual bool get_RepeatItemsOnEachPrintedPage();
    public abstract virtual void set_RepeatItemsOnEachPrintedPage(bool value);
    public abstract virtual Nullable`1<PivotBuiltInStyles> get_BuiltInStyle();
    public abstract virtual void set_BuiltInStyle(Nullable`1<PivotBuiltInStyles> value);
    public abstract virtual bool get_ShowRowGrand();
    public abstract virtual void set_ShowRowGrand(bool value);
    public abstract virtual bool get_ShowColumnGrand();
    public abstract virtual void set_ShowColumnGrand(bool value);
    public abstract virtual int get_CacheIndex();
    public abstract virtual IRange get_Location();
    public abstract virtual void set_Location(IRange value);
    public abstract virtual IPivotTableOptions get_Options();
    public abstract virtual int get_RowsPerPage();
    public abstract virtual int get_ColumnsPerPage();
    public abstract virtual IPivotCalculatedFields get_CalculatedFields();
    public abstract virtual IPivotFields get_PageFields();
    public abstract virtual IPivotFields get_RowFields();
    public abstract virtual IPivotFields get_ColumnFields();
    public abstract virtual bool get_ShowDataFieldInRow();
    public abstract virtual void set_ShowDataFieldInRow(bool value);
    public abstract virtual void ClearTable();
    public abstract virtual IPivotCellFormat GetCellFormat(string range);
    public abstract virtual void Layout();
    public abstract virtual PivotEngine get_PivotEngineValues();
    public abstract virtual void set_PivotEngineValues(PivotEngine value);
}
public interface Syncfusion.XlsIO.IPivotTableOptions {
    public bool ShowAsteriskTotals { get; public set; }
    public string ColumnHeaderCaption { get; public set; }
    public string RowHeaderCaption { get; public set; }
    public bool ShowCustomSortList { get; public set; }
    public bool ShowFieldList { get; public set; }
    public bool IsDataEditable { get; public set; }
    public bool EnableFieldProperties { get; public set; }
    public UInt32 Indent { get; public set; }
    public string ErrorString { get; public set; }
    public bool DisplayErrorString { get; public set; }
    public bool MergeLabels { get; public set; }
    public int PageFieldWrapCount { get; public set; }
    public PivotPageAreaFieldsOrder PageFieldsOrder { get; public set; }
    public bool DisplayNullString { get; public set; }
    public string NullString { get; public set; }
    public bool PreserveFormatting { get; public set; }
    public bool ShowTooltips { get; public set; }
    public bool DisplayFieldCaptions { get; public set; }
    public bool PrintTitles { get; public set; }
    public bool IsSaveData { get; public set; }
    public PivotTableRowLayout RowLayout { get; public set; }
    public bool ShowDrillIndicators { get; public set; }
    public bool ShowValuesRow { get; public set; }
    public abstract virtual bool get_ShowAsteriskTotals();
    public abstract virtual void set_ShowAsteriskTotals(bool value);
    public abstract virtual string get_ColumnHeaderCaption();
    public abstract virtual void set_ColumnHeaderCaption(string value);
    public abstract virtual string get_RowHeaderCaption();
    public abstract virtual void set_RowHeaderCaption(string value);
    public abstract virtual bool get_ShowCustomSortList();
    public abstract virtual void set_ShowCustomSortList(bool value);
    public abstract virtual bool get_ShowFieldList();
    public abstract virtual void set_ShowFieldList(bool value);
    public abstract virtual bool get_IsDataEditable();
    public abstract virtual void set_IsDataEditable(bool value);
    public abstract virtual bool get_EnableFieldProperties();
    public abstract virtual void set_EnableFieldProperties(bool value);
    public abstract virtual UInt32 get_Indent();
    public abstract virtual void set_Indent(UInt32 value);
    public abstract virtual string get_ErrorString();
    public abstract virtual void set_ErrorString(string value);
    public abstract virtual bool get_DisplayErrorString();
    public abstract virtual void set_DisplayErrorString(bool value);
    public abstract virtual bool get_MergeLabels();
    public abstract virtual void set_MergeLabels(bool value);
    public abstract virtual int get_PageFieldWrapCount();
    public abstract virtual void set_PageFieldWrapCount(int value);
    public abstract virtual PivotPageAreaFieldsOrder get_PageFieldsOrder();
    public abstract virtual void set_PageFieldsOrder(PivotPageAreaFieldsOrder value);
    public abstract virtual bool get_DisplayNullString();
    public abstract virtual void set_DisplayNullString(bool value);
    public abstract virtual string get_NullString();
    public abstract virtual void set_NullString(string value);
    public abstract virtual bool get_PreserveFormatting();
    public abstract virtual void set_PreserveFormatting(bool value);
    public abstract virtual bool get_ShowTooltips();
    public abstract virtual void set_ShowTooltips(bool value);
    public abstract virtual bool get_DisplayFieldCaptions();
    public abstract virtual void set_DisplayFieldCaptions(bool value);
    public abstract virtual bool get_PrintTitles();
    public abstract virtual void set_PrintTitles(bool value);
    public abstract virtual bool get_IsSaveData();
    public abstract virtual void set_IsSaveData(bool value);
    public abstract virtual PivotTableRowLayout get_RowLayout();
    public abstract virtual void set_RowLayout(PivotTableRowLayout value);
    public abstract virtual bool get_ShowDrillIndicators();
    public abstract virtual void set_ShowDrillIndicators(bool value);
    public abstract virtual void RepeatAllLabels(bool repeat);
    public abstract virtual bool get_ShowValuesRow();
    public abstract virtual void set_ShowValuesRow(bool value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IPivotTables {
    public int Count { get; }
    public IPivotTable Item { get; }
    public IPivotTable Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IPivotTable get_Item(int index);
    public abstract virtual IPivotTable get_Item(string name);
    public abstract virtual IPivotTable Add(string name, IRange location, IPivotCache cache);
    public abstract virtual void Remove(string name);
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.XlsIO.IPivotValueLableFilter {
    public string Value1 { get; }
    public string Value2 { get; }
    public IPivotField DataField { get; }
    public PivotFilterType Type { get; }
    public abstract virtual string get_Value1();
    public abstract virtual string get_Value2();
    public abstract virtual IPivotField get_DataField();
    public abstract virtual PivotFilterType get_Type();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IRange {
    public string Address { get; }
    public string AddressLocal { get; }
    public string AddressGlobal { get; }
    public string AddressR1C1 { get; }
    public string AddressR1C1Local { get; }
    public bool Boolean { get; public set; }
    public IBorders Borders { get; }
    public IRange[] Cells { get; }
    public int Column { get; }
    public int ColumnGroupLevel { get; }
    public double ColumnWidth { get; public set; }
    public int Count { get; }
    public DateTime DateTime { get; public set; }
    public string DisplayText { get; }
    public IRange End { get; }
    public IRange EntireColumn { get; }
    public IRange EntireRow { get; }
    public string Error { get; public set; }
    public string Formula { get; public set; }
    public string FormulaArray { get; public set; }
    public string FormulaArrayR1C1 { get; public set; }
    public bool FormulaHidden { get; public set; }
    public DateTime FormulaDateTime { get; public set; }
    public string FormulaR1C1 { get; public set; }
    public bool FormulaBoolValue { get; public set; }
    public string FormulaErrorValue { get; public set; }
    public bool HasDataValidation { get; }
    public bool HasBoolean { get; }
    public bool HasDateTime { get; }
    public bool HasFormula { get; }
    public bool HasFormulaArray { get; }
    public bool HasNumber { get; }
    public bool HasRichText { get; }
    public bool HasString { get; }
    public bool HasStyle { get; }
    public ExcelHAlign HorizontalAlignment { get; public set; }
    public IHyperLinks Hyperlinks { get; }
    public int IndentLevel { get; public set; }
    public bool IsBlank { get; }
    public bool IsBoolean { get; }
    public bool IsError { get; }
    public bool IsGroupedByColumn { get; }
    public bool IsGroupedByRow { get; }
    public bool IsInitialized { get; }
    public int LastColumn { get; }
    public int LastRow { get; }
    public double Number { get; public set; }
    public string NumberFormat { get; public set; }
    public int Row { get; }
    public int RowGroupLevel { get; }
    public double RowHeight { get; public set; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public IStyle CellStyle { get; public set; }
    public string CellStyleName { get; public set; }
    public string Text { get; public set; }
    public TimeSpan TimeSpan { get; public set; }
    public string Value { get; public set; }
    public string CalculatedValue { get; }
    public object Value2 { get; public set; }
    public ExcelVAlign VerticalAlignment { get; public set; }
    public IWorksheet Worksheet { get; }
    public IRange Item { get; public set; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IConditionalFormats ConditionalFormats { get; }
    public IDataValidation DataValidation { get; }
    public string FormulaStringValue { get; public set; }
    public double FormulaNumberValue { get; public set; }
    public bool HasFormulaBoolValue { get; }
    public bool HasFormulaErrorValue { get; }
    public bool HasFormulaDateTime { get; }
    public bool HasFormulaNumberValue { get; }
    public bool HasFormulaStringValue { get; }
    public ICommentShape Comment { get; }
    public IThreadedComment ThreadedComment { get; }
    public IRichTextString RichText { get; }
    public bool IsMerged { get; }
    public IRange MergeArea { get; }
    public bool WrapText { get; public set; }
    public bool HasExternalFormula { get; }
    public ExcelIgnoreError IgnoreErrorOptions { get; public set; }
    public Nullable`1<bool> IsStringsPreserved { get; public set; }
    public Nullable`1<BuiltInStyles> BuiltInStyle { get; public set; }
    public string HtmlString { get; public set; }
    public abstract virtual string get_Address();
    public abstract virtual string get_AddressLocal();
    public abstract virtual string get_AddressGlobal();
    public abstract virtual string get_AddressR1C1();
    public abstract virtual string get_AddressR1C1Local();
    public abstract virtual bool get_Boolean();
    public abstract virtual void set_Boolean(bool value);
    public abstract virtual IBorders get_Borders();
    public abstract virtual IRange[] get_Cells();
    public abstract virtual int get_Column();
    public abstract virtual int get_ColumnGroupLevel();
    public abstract virtual double get_ColumnWidth();
    public abstract virtual void set_ColumnWidth(double value);
    public abstract virtual int get_Count();
    public abstract virtual DateTime get_DateTime();
    public abstract virtual void set_DateTime(DateTime value);
    public abstract virtual string get_DisplayText();
    public abstract virtual IRange get_End();
    public abstract virtual IRange get_EntireColumn();
    public abstract virtual IRange get_EntireRow();
    public abstract virtual string get_Error();
    public abstract virtual void set_Error(string value);
    public abstract virtual string get_Formula();
    public abstract virtual void set_Formula(string value);
    public abstract virtual string get_FormulaArray();
    public abstract virtual void set_FormulaArray(string value);
    public abstract virtual string get_FormulaArrayR1C1();
    public abstract virtual void set_FormulaArrayR1C1(string value);
    public abstract virtual bool get_FormulaHidden();
    public abstract virtual void set_FormulaHidden(bool value);
    public abstract virtual DateTime get_FormulaDateTime();
    public abstract virtual void set_FormulaDateTime(DateTime value);
    public abstract virtual string get_FormulaR1C1();
    public abstract virtual void set_FormulaR1C1(string value);
    public abstract virtual bool get_FormulaBoolValue();
    public abstract virtual void set_FormulaBoolValue(bool value);
    public abstract virtual string get_FormulaErrorValue();
    public abstract virtual void set_FormulaErrorValue(string value);
    public abstract virtual bool get_HasDataValidation();
    public abstract virtual bool get_HasBoolean();
    public abstract virtual bool get_HasDateTime();
    public abstract virtual bool get_HasFormula();
    public abstract virtual bool get_HasFormulaArray();
    public abstract virtual bool get_HasNumber();
    public abstract virtual bool get_HasRichText();
    public abstract virtual bool get_HasString();
    public abstract virtual bool get_HasStyle();
    public abstract virtual ExcelHAlign get_HorizontalAlignment();
    public abstract virtual void set_HorizontalAlignment(ExcelHAlign value);
    public abstract virtual IHyperLinks get_Hyperlinks();
    public abstract virtual int get_IndentLevel();
    public abstract virtual void set_IndentLevel(int value);
    public abstract virtual bool get_IsBlank();
    public abstract virtual bool get_IsBoolean();
    public abstract virtual bool get_IsError();
    public abstract virtual bool get_IsGroupedByColumn();
    public abstract virtual bool get_IsGroupedByRow();
    public abstract virtual bool get_IsInitialized();
    public abstract virtual int get_LastColumn();
    public abstract virtual int get_LastRow();
    public abstract virtual double get_Number();
    public abstract virtual void set_Number(double value);
    public abstract virtual string get_NumberFormat();
    public abstract virtual void set_NumberFormat(string value);
    public abstract virtual int get_Row();
    public abstract virtual int get_RowGroupLevel();
    public abstract virtual double get_RowHeight();
    public abstract virtual void set_RowHeight(double value);
    public abstract virtual IRange[] get_Rows();
    public abstract virtual IRange[] get_Columns();
    public abstract virtual IStyle get_CellStyle();
    public abstract virtual void set_CellStyle(IStyle value);
    public abstract virtual string get_CellStyleName();
    public abstract virtual void set_CellStyleName(string value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual TimeSpan get_TimeSpan();
    public abstract virtual void set_TimeSpan(TimeSpan value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual string get_CalculatedValue();
    public abstract virtual object get_Value2();
    public abstract virtual void set_Value2(object value);
    public abstract virtual ExcelVAlign get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(ExcelVAlign value);
    public abstract virtual IWorksheet get_Worksheet();
    public abstract virtual IRange get_Item(int row, int column);
    public abstract virtual void set_Item(int row, int column, IRange value);
    public abstract virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public abstract virtual IRange get_Item(string name);
    public abstract virtual IRange get_Item(string name, bool IsR1C1Notation);
    public abstract virtual IConditionalFormats get_ConditionalFormats();
    public abstract virtual IDataValidation get_DataValidation();
    public abstract virtual string get_FormulaStringValue();
    public abstract virtual void set_FormulaStringValue(string value);
    public abstract virtual double get_FormulaNumberValue();
    public abstract virtual void set_FormulaNumberValue(double value);
    public abstract virtual bool get_HasFormulaBoolValue();
    public abstract virtual bool get_HasFormulaErrorValue();
    public abstract virtual bool get_HasFormulaDateTime();
    public abstract virtual bool get_HasFormulaNumberValue();
    public abstract virtual bool get_HasFormulaStringValue();
    public abstract virtual ICommentShape get_Comment();
    public abstract virtual IThreadedComment get_ThreadedComment();
    public abstract virtual IRichTextString get_RichText();
    public abstract virtual bool get_IsMerged();
    public abstract virtual IRange get_MergeArea();
    public abstract virtual bool get_WrapText();
    public abstract virtual void set_WrapText(bool value);
    public abstract virtual bool get_HasExternalFormula();
    public abstract virtual ExcelIgnoreError get_IgnoreErrorOptions();
    public abstract virtual void set_IgnoreErrorOptions(ExcelIgnoreError value);
    public abstract virtual Nullable`1<bool> get_IsStringsPreserved();
    public abstract virtual void set_IsStringsPreserved(Nullable`1<bool> value);
    public abstract virtual Nullable`1<BuiltInStyles> get_BuiltInStyle();
    public abstract virtual void set_BuiltInStyle(Nullable`1<BuiltInStyles> value);
    public abstract virtual string get_HtmlString();
    public abstract virtual void set_HtmlString(string value);
    public abstract virtual IRange Activate();
    public abstract virtual IRange Activate(bool scroll);
    public abstract virtual IRange Group(ExcelGroupBy groupBy);
    public abstract virtual IRange Group(ExcelGroupBy groupBy, bool bCollapsed);
    public abstract virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList);
    public abstract virtual void SubTotal(int groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public abstract virtual void SubTotal(Int32[] groupBy, ConsolidationFunction function, Int32[] totalList, bool replace, bool pageBreaks, bool summaryBelowData);
    public abstract virtual double Sum();
    public abstract virtual double Sum(bool considerDateAsNumber);
    public abstract virtual double Average();
    public abstract virtual double Average(bool considerDateAsNumber);
    public abstract virtual double Min();
    public abstract virtual double Min(bool considerDateAsNumber);
    public abstract virtual double Max();
    public abstract virtual double Max(bool considerDateAsNumber);
    public abstract virtual IRange Trim();
    public abstract virtual void Merge();
    public abstract virtual void Merge(bool clearCells);
    public abstract virtual IRange Ungroup(ExcelGroupBy groupBy);
    public abstract virtual void UnMerge();
    public abstract virtual void FreezePanes();
    public abstract virtual void Clear();
    public abstract virtual void Clear(bool isClearFormat);
    public abstract virtual void Clear(ExcelClearOptions option);
    public abstract virtual void Clear(ExcelMoveDirection direction);
    public abstract virtual void Clear(ExcelMoveDirection direction, ExcelCopyRangeOptions options);
    public abstract virtual void MoveTo(IRange destination);
    public abstract virtual IRange CopyTo(IRange destination);
    public abstract virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options);
    public abstract virtual IRange CopyTo(IRange destination, bool pasteLink);
    public abstract virtual IRange CopyTo(IRange destination, ExcelCopyRangeOptions options, bool skipBlanks);
    public abstract virtual IRange IntersectWith(IRange range);
    public abstract virtual IRange MergeWith(IRange range);
    public abstract virtual void AutofitRows();
    public abstract virtual void AutofitColumns();
    public abstract virtual ICommentShape AddComment();
    public abstract virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public abstract virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public abstract virtual IRange FindFirst(bool findValue);
    public abstract virtual IRange FindFirst(DateTime findValue);
    public abstract virtual IRange FindFirst(TimeSpan findValue);
    public abstract virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public abstract virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public abstract virtual IRange[] FindAll(bool findValue);
    public abstract virtual IRange[] FindAll(DateTime findValue);
    public abstract virtual IRange[] FindAll(TimeSpan findValue);
    public abstract virtual void Replace(string oldValue, string newValue);
    public abstract virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public abstract virtual void Replace(string oldValue, double newValue);
    public abstract virtual void Replace(string oldValue, DateTime newValue);
    public abstract virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public abstract virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public abstract virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public abstract virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public abstract virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public abstract virtual void BorderAround();
    public abstract virtual void BorderAround(ExcelLineStyle borderLine);
    public abstract virtual void BorderAround(ExcelLineStyle borderLine, Color borderColor);
    public abstract virtual void BorderAround(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public abstract virtual void BorderInside();
    public abstract virtual void BorderInside(ExcelLineStyle borderLine);
    public abstract virtual void BorderInside(ExcelLineStyle borderLine, Color borderColor);
    public abstract virtual void BorderInside(ExcelLineStyle borderLine, ExcelKnownColors borderColor);
    public abstract virtual void BorderNone();
    public abstract virtual void CollapseGroup(ExcelGroupBy groupBy);
    public abstract virtual void ExpandGroup(ExcelGroupBy groupBy);
    public abstract virtual void ExpandGroup(ExcelGroupBy groupBy, ExpandCollapseFlags flags);
    public abstract virtual IRange[] GetDependents();
    public abstract virtual IRange[] GetDependents(bool isEntireWorkbook);
    public abstract virtual IRange[] GetDirectDependents();
    public abstract virtual IRange[] GetDirectDependents(bool isEntireWorkbook);
    public abstract virtual IRange[] GetPrecedents();
    public abstract virtual IRange[] GetPrecedents(bool isEntireWorkbook);
    public abstract virtual IRange[] GetDirectPrecedents();
    public abstract virtual IRange[] GetDirectPrecedents(bool isEntireWorkbook);
    public abstract virtual IRange Offset(int rowOffset, int columnOffset);
    public abstract virtual IRange Resize(int rowSize, int columnSize);
    public abstract virtual IThreadedComment AddThreadedComment(string text, DateTime creationTime);
    public abstract virtual IThreadedComment AddThreadedComment(string text, string author, DateTime creationTime);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IRanges {
    public IRange Item { get; }
    public abstract virtual void Add(IRange range);
    public abstract virtual void Remove(IRange range);
    public abstract virtual IRange get_Item(int index);
}
internal interface Syncfusion.XlsIO.IReparse {
    public abstract virtual void Reparse();
}
public interface Syncfusion.XlsIO.IRichTextString {
    public string Text { get; public set; }
    public string RtfText { get; public set; }
    public bool IsFormatted { get; }
    public abstract virtual IFont GetFont(int iPosition);
    public abstract virtual void SetFont(int iStartPos, int iEndPos, IFont font);
    public abstract virtual void ClearFormatting();
    public abstract virtual void Clear();
    public abstract virtual void Append(string text, IFont font);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual string get_RtfText();
    public abstract virtual void set_RtfText(string value);
    public abstract virtual bool get_IsFormatted();
}
public interface Syncfusion.XlsIO.IScenario {
    public IRange ChangingCells { get; }
    public string Comment { get; public set; }
    public bool Hidden { get; public set; }
    public int Index { get; }
    public bool Locked { get; public set; }
    public string Name { get; public set; }
    public List`1<object> Values { get; }
    public abstract virtual IRange get_ChangingCells();
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
    public abstract virtual bool get_Hidden();
    public abstract virtual void set_Hidden(bool value);
    public abstract virtual int get_Index();
    public abstract virtual bool get_Locked();
    public abstract virtual void set_Locked(bool value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual List`1<object> get_Values();
    public abstract virtual IScenario ModifyScenario(IRange changingCells, List`1<object> values);
    public abstract virtual void Delete();
    public abstract virtual void Show();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IScenarios {
    public IScenario Item { get; }
    public IScenario Item { get; }
    public IRange ResultCells { get; }
    public int Count { get; }
    public abstract virtual IScenario get_Item(int index);
    public abstract virtual IScenario get_Item(string name);
    public abstract virtual IRange get_ResultCells();
    public abstract virtual int get_Count();
    public abstract virtual IScenario Add(string name, IRange changingCells, object values);
    public abstract virtual IScenario Add(string name, IRange changingCells, List`1<object> values);
    public abstract virtual void CreateSummary(IRange resultantCell);
    public abstract virtual IScenarios Merge(IWorksheet sheet);
}
public interface Syncfusion.XlsIO.IShadow {
    public Excel2007ChartPresetsOuter ShadowOuterPresets { get; public set; }
    public Excel2007ChartPresetsInner ShadowInnerPresets { get; public set; }
    public Excel2007ChartPresetsPrespective ShadowPrespectivePresets { get; public set; }
    public bool HasCustomShadowStyle { get; public set; }
    public int Transparency { get; public set; }
    public int Size { get; public set; }
    public int Blur { get; public set; }
    public int Angle { get; public set; }
    public int Distance { get; public set; }
    public Color ShadowColor { get; public set; }
    public abstract virtual Excel2007ChartPresetsOuter get_ShadowOuterPresets();
    public abstract virtual void set_ShadowOuterPresets(Excel2007ChartPresetsOuter value);
    public abstract virtual Excel2007ChartPresetsInner get_ShadowInnerPresets();
    public abstract virtual void set_ShadowInnerPresets(Excel2007ChartPresetsInner value);
    public abstract virtual Excel2007ChartPresetsPrespective get_ShadowPrespectivePresets();
    public abstract virtual void set_ShadowPrespectivePresets(Excel2007ChartPresetsPrespective value);
    public abstract virtual bool get_HasCustomShadowStyle();
    public abstract virtual void set_HasCustomShadowStyle(bool value);
    public abstract virtual int get_Transparency();
    public abstract virtual void set_Transparency(int value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual int get_Blur();
    public abstract virtual void set_Blur(int value);
    public abstract virtual int get_Angle();
    public abstract virtual void set_Angle(int value);
    public abstract virtual int get_Distance();
    public abstract virtual void set_Distance(int value);
    public abstract virtual Color get_ShadowColor();
    public abstract virtual void set_ShadowColor(Color value);
    public abstract virtual void CustomShadowStyles(Excel2007ChartPresetsOuter iOuter, int iTransparency, int iSize, int iBlur, int iAngle, int iDistance, bool iCustomShadowStyle);
    public abstract virtual void CustomShadowStyles(Excel2007ChartPresetsInner iInner, int iTransparency, int iBlur, int iAngle, int iDistance, bool iCustomShadowStyle);
    public abstract virtual void CustomShadowStyles(Excel2007ChartPresetsPrespective iPerspective, int iTransparency, int iSize, int iBlur, int iAngle, int iDistance, bool iCustomShadowStyle);
}
public interface Syncfusion.XlsIO.IShape {
    public int Height { get; public set; }
    public double HeightDouble { get; public set; }
    public int Id { get; }
    public int Left { get; public set; }
    public double LeftDouble { get; public set; }
    public string Name { get; public set; }
    public int Top { get; public set; }
    public double TopDouble { get; public set; }
    public int Width { get; public set; }
    public double WidthDouble { get; public set; }
    public ExcelShapeType ShapeType { get; }
    public bool IsShapeVisible { get; public set; }
    public string AlternativeText { get; public set; }
    public bool IsMoveWithCell { get; public set; }
    public bool IsSizeWithCell { get; public set; }
    public IFill Fill { get; }
    public IShapeLineFormat Line { get; }
    public string OnAction { get; public set; }
    public IShadow Shadow { get; }
    public IThreeDFormat ThreeD { get; }
    public int ShapeRotation { get; public set; }
    public ITextFrame TextFrame { get; }
    public IHyperLink Hyperlink { get; }
    public abstract virtual int get_Height();
    public abstract virtual void set_Height(int value);
    public abstract virtual double get_HeightDouble();
    public abstract virtual void set_HeightDouble(double value);
    public abstract virtual int get_Id();
    public abstract virtual int get_Left();
    public abstract virtual void set_Left(int value);
    public abstract virtual double get_LeftDouble();
    public abstract virtual void set_LeftDouble(double value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_Top();
    public abstract virtual void set_Top(int value);
    public abstract virtual double get_TopDouble();
    public abstract virtual void set_TopDouble(double value);
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
    public abstract virtual double get_WidthDouble();
    public abstract virtual void set_WidthDouble(double value);
    public abstract virtual ExcelShapeType get_ShapeType();
    public abstract virtual bool get_IsShapeVisible();
    public abstract virtual void set_IsShapeVisible(bool value);
    public abstract virtual string get_AlternativeText();
    public abstract virtual void set_AlternativeText(string value);
    public abstract virtual bool get_IsMoveWithCell();
    public abstract virtual void set_IsMoveWithCell(bool value);
    public abstract virtual bool get_IsSizeWithCell();
    public abstract virtual void set_IsSizeWithCell(bool value);
    public abstract virtual IFill get_Fill();
    public abstract virtual IShapeLineFormat get_Line();
    public abstract virtual string get_OnAction();
    public abstract virtual void set_OnAction(string value);
    public abstract virtual IShadow get_Shadow();
    public abstract virtual IThreeDFormat get_ThreeD();
    public abstract virtual int get_ShapeRotation();
    public abstract virtual void set_ShapeRotation(int value);
    public abstract virtual ITextFrame get_TextFrame();
    public abstract virtual IHyperLink get_Hyperlink();
    public abstract virtual void Remove();
    public abstract virtual void Scale(int scaleWidth, int scaleHeight);
}
public interface Syncfusion.XlsIO.IShapeLineFormat {
    public double Weight { get; public set; }
    public Color ForeColor { get; public set; }
    public Color BackColor { get; public set; }
    public ExcelKnownColors ForeColorIndex { get; public set; }
    public ExcelKnownColors BackColorIndex { get; public set; }
    public ExcelShapeArrowStyle BeginArrowHeadStyle { get; public set; }
    public ExcelShapeArrowStyle EndArrowHeadStyle { get; public set; }
    public ExcelShapeArrowLength BeginArrowheadLength { get; public set; }
    public ExcelShapeArrowLength EndArrowheadLength { get; public set; }
    public ExcelShapeArrowWidth BeginArrowheadWidth { get; public set; }
    public ExcelShapeArrowWidth EndArrowheadWidth { get; public set; }
    public ExcelShapeDashLineStyle DashStyle { get; public set; }
    public ExcelShapeLineStyle Style { get; public set; }
    public double Transparency { get; public set; }
    public bool Visible { get; public set; }
    public ExcelGradientPattern Pattern { get; public set; }
    public bool HasPattern { get; public set; }
    public abstract virtual double get_Weight();
    public abstract virtual void set_Weight(double value);
    public abstract virtual Color get_ForeColor();
    public abstract virtual void set_ForeColor(Color value);
    public abstract virtual Color get_BackColor();
    public abstract virtual void set_BackColor(Color value);
    public abstract virtual ExcelKnownColors get_ForeColorIndex();
    public abstract virtual void set_ForeColorIndex(ExcelKnownColors value);
    public abstract virtual ExcelKnownColors get_BackColorIndex();
    public abstract virtual void set_BackColorIndex(ExcelKnownColors value);
    public abstract virtual ExcelShapeArrowStyle get_BeginArrowHeadStyle();
    public abstract virtual void set_BeginArrowHeadStyle(ExcelShapeArrowStyle value);
    public abstract virtual ExcelShapeArrowStyle get_EndArrowHeadStyle();
    public abstract virtual void set_EndArrowHeadStyle(ExcelShapeArrowStyle value);
    public abstract virtual ExcelShapeArrowLength get_BeginArrowheadLength();
    public abstract virtual void set_BeginArrowheadLength(ExcelShapeArrowLength value);
    public abstract virtual ExcelShapeArrowLength get_EndArrowheadLength();
    public abstract virtual void set_EndArrowheadLength(ExcelShapeArrowLength value);
    public abstract virtual ExcelShapeArrowWidth get_BeginArrowheadWidth();
    public abstract virtual void set_BeginArrowheadWidth(ExcelShapeArrowWidth value);
    public abstract virtual ExcelShapeArrowWidth get_EndArrowheadWidth();
    public abstract virtual void set_EndArrowheadWidth(ExcelShapeArrowWidth value);
    public abstract virtual ExcelShapeDashLineStyle get_DashStyle();
    public abstract virtual void set_DashStyle(ExcelShapeDashLineStyle value);
    public abstract virtual ExcelShapeLineStyle get_Style();
    public abstract virtual void set_Style(ExcelShapeLineStyle value);
    public abstract virtual double get_Transparency();
    public abstract virtual void set_Transparency(double value);
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    public abstract virtual ExcelGradientPattern get_Pattern();
    public abstract virtual void set_Pattern(ExcelGradientPattern value);
    public abstract virtual bool get_HasPattern();
    public abstract virtual void set_HasPattern(bool value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IShapes {
    public int Count { get; }
    public IShape Item { get; }
    public IShape Item { get; }
    public abstract virtual IPictureShape AddPicture(Image image, string pictureName, ExcelImageFormat imageFormat);
    public abstract virtual ICommentShape AddComment(string commentText, bool bIsParseOptions);
    public abstract virtual ICommentShape AddComment(string commentText);
    public abstract virtual ICommentShape AddComment();
    public abstract virtual IChartShape AddChart();
    public abstract virtual IShape AddCopy(IShape sourceShape);
    public abstract virtual IShape AddCopy(IShape sourceShape, Dictionary`2<string, string> hashNewNames, List`1<int> arrFontIndexes);
    public abstract virtual ITextBoxShapeEx AddTextBox();
    public abstract virtual ICheckBoxShape AddCheckBox();
    public abstract virtual IOptionButtonShape AddOptionButton();
    public abstract virtual IComboBoxShape AddComboBox();
    public abstract virtual IShape AddAutoShapes(AutoShapeType autoShapeType, int topRow, int leftColumn, int height, int width);
    public abstract virtual IGroupShape Group(IShape[] groupItems);
    public abstract virtual void Ungroup(IGroupShape groupShape);
    public abstract virtual void Ungroup(IGroupShape groupShape, bool isAll);
    public abstract virtual int get_Count();
    public abstract virtual IShape get_Item(int index);
    public abstract virtual IShape get_Item(string strShapeName);
}
public interface Syncfusion.XlsIO.ISlicer {
    public string Name { get; public set; }
    public string Caption { get; public set; }
    public double Top { get; public set; }
    public double Left { get; public set; }
    public double Height { get; public set; }
    public double Width { get; public set; }
    public int HeightInPixels { get; public set; }
    public int WidthInPixels { get; public set; }
    public double SlicerItemWidth { get; public set; }
    public double SlicerItemHeight { get; public set; }
    public int SlicerItemWidthInPixels { get; public set; }
    public int SlicerItemHeightInPixels { get; public set; }
    public int NumberOfColumns { get; public set; }
    public bool DisplayHeader { get; public set; }
    public ExcelSlicerStyle SlicerStyle { get; public set; }
    public IListObject SourceTable { get; }
    public ISlicerCache SlicerCache { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Caption();
    public abstract virtual void set_Caption(string value);
    public abstract virtual double get_Top();
    public abstract virtual void set_Top(double value);
    public abstract virtual double get_Left();
    public abstract virtual void set_Left(double value);
    public abstract virtual double get_Height();
    public abstract virtual void set_Height(double value);
    public abstract virtual double get_Width();
    public abstract virtual void set_Width(double value);
    public abstract virtual int get_HeightInPixels();
    public abstract virtual void set_HeightInPixels(int value);
    public abstract virtual int get_WidthInPixels();
    public abstract virtual void set_WidthInPixels(int value);
    public abstract virtual double get_SlicerItemWidth();
    public abstract virtual void set_SlicerItemWidth(double value);
    public abstract virtual double get_SlicerItemHeight();
    public abstract virtual void set_SlicerItemHeight(double value);
    public abstract virtual int get_SlicerItemWidthInPixels();
    public abstract virtual void set_SlicerItemWidthInPixels(int value);
    public abstract virtual int get_SlicerItemHeightInPixels();
    public abstract virtual void set_SlicerItemHeightInPixels(int value);
    public abstract virtual int get_NumberOfColumns();
    public abstract virtual void set_NumberOfColumns(int value);
    public abstract virtual bool get_DisplayHeader();
    public abstract virtual void set_DisplayHeader(bool value);
    public abstract virtual ExcelSlicerStyle get_SlicerStyle();
    public abstract virtual void set_SlicerStyle(ExcelSlicerStyle value);
    public abstract virtual IListObject get_SourceTable();
    public abstract virtual ISlicerCache get_SlicerCache();
}
public interface Syncfusion.XlsIO.ISlicerCache {
    public SlicerCrossFilterType CrossFilterType { get; public set; }
    public bool UseCustomListSorting { get; public set; }
    public string SourceName { get; }
    public bool IsAscending { get; public set; }
    public ISlicerCacheItems SlicerCacheItems { get; }
    public abstract virtual SlicerCrossFilterType get_CrossFilterType();
    public abstract virtual void set_CrossFilterType(SlicerCrossFilterType value);
    public abstract virtual bool get_UseCustomListSorting();
    public abstract virtual void set_UseCustomListSorting(bool value);
    public abstract virtual string get_SourceName();
    public abstract virtual bool get_IsAscending();
    public abstract virtual void set_IsAscending(bool value);
    public abstract virtual ISlicerCacheItems get_SlicerCacheItems();
}
public interface Syncfusion.XlsIO.ISlicerCacheItem {
    public bool IsSelected { get; public set; }
    public string Value { get; }
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
    public abstract virtual string get_Value();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ISlicerCacheItems {
    public int Count { get; }
    public ISlicerCacheItem Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ISlicerCacheItem get_Item(int index);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ISlicers {
    public int Count { get; }
    public ISlicer Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ISlicer get_Item(int index);
    public abstract virtual int Add(IListObject table, int index, int row, int column);
    public abstract virtual void Remove(ISlicer slicer);
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.XlsIO.ISortField {
    public int Key { get; public set; }
    public SortOn SortOn { get; public set; }
    public OrderBy Order { get; public set; }
    public Color Color { get; public set; }
    public abstract virtual int get_Key();
    public abstract virtual void set_Key(int value);
    public abstract virtual SortOn get_SortOn();
    public abstract virtual void set_SortOn(SortOn value);
    public abstract virtual OrderBy get_Order();
    public abstract virtual void set_Order(OrderBy value);
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual void SetPriority(int priority);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ISortFields {
    public int Count { get; }
    public ISortField Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ISortField Add(int key, SortOn sortBasedOn, OrderBy orderBy);
    public abstract virtual void Remove(int key);
    public abstract virtual void Remove(ISortField sortField);
    public abstract virtual ISortField get_Item(int index);
}
public interface Syncfusion.XlsIO.ISortingAlgorithm {
    public IRange Range { get; public set; }
    public abstract virtual IRange get_Range();
    public abstract virtual void set_Range(IRange value);
    public abstract virtual void SortInt(int left, int right, int columnIndex);
    public abstract virtual void SortFloat(int left, int right, int columnIndex);
    public abstract virtual void SortDate(int left, int right, int columnIndex);
    public abstract virtual void SortString(int left, int right, int columnIndex);
    public abstract virtual void SortOnTypes(int left, int right, int columnIndex);
    public abstract virtual void SortIntDesc(int left, int right, int columnIndex);
    public abstract virtual void SortFloatDesc(int left, int right, int columnIndex);
    public abstract virtual void SortDateDesc(int left, int right, int columnIndex);
    public abstract virtual void SortStringDesc(int left, int right, int columnIndex);
}
public interface Syncfusion.XlsIO.ISparkline {
    public IRange DataRange { get; public set; }
    public IRange ReferenceRange { get; public set; }
    public int Column { get; }
    public int Row { get; }
    public abstract virtual IRange get_DataRange();
    public abstract virtual void set_DataRange(IRange value);
    public abstract virtual IRange get_ReferenceRange();
    public abstract virtual void set_ReferenceRange(IRange value);
    public abstract virtual int get_Column();
    public abstract virtual int get_Row();
}
public interface Syncfusion.XlsIO.ISparklineGroup {
    public bool DisplayAxis { get; public set; }
    public bool DisplayHiddenRC { get; public set; }
    public bool PlotRightToLeft { get; public set; }
    public bool ShowFirstPoint { get; public set; }
    public bool ShowLastPoint { get; public set; }
    public bool ShowLowPoint { get; public set; }
    public bool ShowHighPoint { get; public set; }
    public bool ShowNegativePoint { get; public set; }
    public bool ShowMarkers { get; public set; }
    public ISparklineVerticalAxis VerticalAxisMaximum { get; public set; }
    public ISparklineVerticalAxis VerticalAxisMinimum { get; public set; }
    public SparklineType SparklineType { get; public set; }
    public bool HorizontalDateAxis { get; public set; }
    public SparklineEmptyCells DisplayEmptyCellsAs { get; public set; }
    public IRange HorizontalDateAxisRange { get; public set; }
    public Color AxisColor { get; public set; }
    public Color FirstPointColor { get; public set; }
    public Color HighPointColor { get; public set; }
    public Color LastPointColor { get; public set; }
    public double LineWeight { get; public set; }
    public Color LowPointColor { get; public set; }
    public Color MarkersColor { get; public set; }
    public Color NegativePointColor { get; public set; }
    public Color SparklineColor { get; public set; }
    public abstract virtual bool get_DisplayAxis();
    public abstract virtual void set_DisplayAxis(bool value);
    public abstract virtual bool get_DisplayHiddenRC();
    public abstract virtual void set_DisplayHiddenRC(bool value);
    public abstract virtual bool get_PlotRightToLeft();
    public abstract virtual void set_PlotRightToLeft(bool value);
    public abstract virtual bool get_ShowFirstPoint();
    public abstract virtual void set_ShowFirstPoint(bool value);
    public abstract virtual bool get_ShowLastPoint();
    public abstract virtual void set_ShowLastPoint(bool value);
    public abstract virtual bool get_ShowLowPoint();
    public abstract virtual void set_ShowLowPoint(bool value);
    public abstract virtual bool get_ShowHighPoint();
    public abstract virtual void set_ShowHighPoint(bool value);
    public abstract virtual bool get_ShowNegativePoint();
    public abstract virtual void set_ShowNegativePoint(bool value);
    public abstract virtual bool get_ShowMarkers();
    public abstract virtual void set_ShowMarkers(bool value);
    public abstract virtual ISparklineVerticalAxis get_VerticalAxisMaximum();
    public abstract virtual void set_VerticalAxisMaximum(ISparklineVerticalAxis value);
    public abstract virtual ISparklineVerticalAxis get_VerticalAxisMinimum();
    public abstract virtual void set_VerticalAxisMinimum(ISparklineVerticalAxis value);
    public abstract virtual SparklineType get_SparklineType();
    public abstract virtual void set_SparklineType(SparklineType value);
    public abstract virtual bool get_HorizontalDateAxis();
    public abstract virtual void set_HorizontalDateAxis(bool value);
    public abstract virtual SparklineEmptyCells get_DisplayEmptyCellsAs();
    public abstract virtual void set_DisplayEmptyCellsAs(SparklineEmptyCells value);
    public abstract virtual IRange get_HorizontalDateAxisRange();
    public abstract virtual void set_HorizontalDateAxisRange(IRange value);
    public abstract virtual Color get_AxisColor();
    public abstract virtual void set_AxisColor(Color value);
    public abstract virtual Color get_FirstPointColor();
    public abstract virtual void set_FirstPointColor(Color value);
    public abstract virtual Color get_HighPointColor();
    public abstract virtual void set_HighPointColor(Color value);
    public abstract virtual Color get_LastPointColor();
    public abstract virtual void set_LastPointColor(Color value);
    public abstract virtual double get_LineWeight();
    public abstract virtual void set_LineWeight(double value);
    public abstract virtual Color get_LowPointColor();
    public abstract virtual void set_LowPointColor(Color value);
    public abstract virtual Color get_MarkersColor();
    public abstract virtual void set_MarkersColor(Color value);
    public abstract virtual Color get_NegativePointColor();
    public abstract virtual void set_NegativePointColor(Color value);
    public abstract virtual Color get_SparklineColor();
    public abstract virtual void set_SparklineColor(Color value);
    public abstract virtual ISparklines Add();
}
public interface Syncfusion.XlsIO.ISparklineGroups {
    public abstract virtual void Clear(ISparklineGroup sparklineGroup);
    public abstract virtual ISparklineGroup Add();
}
public interface Syncfusion.XlsIO.ISparklines {
    public abstract virtual Sparkline Add();
    public abstract virtual void Add(IRange dataRange, IRange referenceRange);
    public abstract virtual void RefreshRanges(IRange dataRange, IRange referenceRange);
    public abstract virtual void Add(IRange dataRange, IRange referenceRange, bool isVertical);
    public abstract virtual void RefreshRanges(IRange dataRange, IRange referenceRange, bool isVertical);
    public abstract virtual void Clear(Sparkline sparkline);
}
public interface Syncfusion.XlsIO.ISparklineVerticalAxis {
    public double CustomValue { get; public set; }
    public SparklineVerticalAxisOptions VerticalAxisOptions { get; public set; }
    public abstract virtual double get_CustomValue();
    public abstract virtual void set_CustomValue(double value);
    public abstract virtual SparklineVerticalAxisOptions get_VerticalAxisOptions();
    public abstract virtual void set_VerticalAxisOptions(SparklineVerticalAxisOptions value);
}
public interface Syncfusion.XlsIO.IStyle {
    public bool BuiltIn { get; }
    public string Name { get; }
    public bool IsInitialized { get; }
    public IInterior Interior { get; }
    public abstract virtual bool get_BuiltIn();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsInitialized();
    public abstract virtual IInterior get_Interior();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IStyles {
    public IApplication Application { get; }
    public int Count { get; }
    public IStyle Item { get; }
    public IStyle Item { get; }
    public object Parent { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual int get_Count();
    public abstract virtual IStyle get_Item(int Index);
    public abstract virtual IStyle get_Item(string name);
    public abstract virtual object get_Parent();
    public abstract virtual IStyle Add(string Name, object BasedOn);
    public abstract virtual IStyle Add(string Name);
    public abstract virtual IStyles Merge(object Workbook, bool overwrite);
    public abstract virtual IStyles Merge(object Workbook);
    public abstract virtual bool Contains(string name);
    public abstract virtual void Remove(string styleName);
}
public interface Syncfusion.XlsIO.ITableStyle {
    public string Name { get; }
    public ITableStyleElements TableStyleElements { get; }
    public abstract virtual string get_Name();
    public abstract virtual ITableStyleElements get_TableStyleElements();
    public abstract virtual void Delete();
    public abstract virtual ITableStyle Clone();
    public abstract virtual ITableStyle Duplicate();
    public abstract virtual ITableStyle Duplicate(string tableStyleName);
}
public interface Syncfusion.XlsIO.ITableStyleElement {
    public ExcelTableStyleElementType TableStyleElementType { get; }
    public int StripeSize { get; public set; }
    public ExcelKnownColors BackColor { get; public set; }
    public Color BackColorRGB { get; public set; }
    public ExcelPattern PatternStyle { get; public set; }
    public Color PatternColorRGB { get; public set; }
    public ExcelKnownColors PatternColor { get; public set; }
    public ExcelKnownColors FontColor { get; public set; }
    public Color FontColorRGB { get; public set; }
    public bool Bold { get; public set; }
    public bool Italic { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public bool StrikeThrough { get; public set; }
    public ExcelKnownColors TopBorderColor { get; public set; }
    public Color TopBorderColorRGB { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelKnownColors HorizontalBorderColor { get; public set; }
    public Color HorizontalBorderColorRGB { get; public set; }
    public ExcelLineStyle HorizontalBorderStyle { get; public set; }
    public ExcelKnownColors VerticalBorderColor { get; public set; }
    public Color VerticalBorderColorRGB { get; public set; }
    public ExcelLineStyle VerticalBorderStyle { get; public set; }
    public ExcelKnownColors BottomBorderColor { get; public set; }
    public Color BottomBorderColorRGB { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public ExcelKnownColors RightBorderColor { get; public set; }
    public Color RightBorderColorRGB { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelKnownColors LeftBorderColor { get; public set; }
    public Color LeftBorderColorRGB { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public abstract virtual ExcelTableStyleElementType get_TableStyleElementType();
    public abstract virtual int get_StripeSize();
    public abstract virtual void set_StripeSize(int value);
    public abstract virtual ExcelKnownColors get_BackColor();
    public abstract virtual void set_BackColor(ExcelKnownColors value);
    public abstract virtual Color get_BackColorRGB();
    public abstract virtual void set_BackColorRGB(Color value);
    public abstract virtual ExcelPattern get_PatternStyle();
    public abstract virtual void set_PatternStyle(ExcelPattern value);
    public abstract virtual Color get_PatternColorRGB();
    public abstract virtual void set_PatternColorRGB(Color value);
    public abstract virtual ExcelKnownColors get_PatternColor();
    public abstract virtual void set_PatternColor(ExcelKnownColors value);
    public abstract virtual ExcelKnownColors get_FontColor();
    public abstract virtual void set_FontColor(ExcelKnownColors value);
    public abstract virtual Color get_FontColorRGB();
    public abstract virtual void set_FontColorRGB(Color value);
    public abstract virtual bool get_Bold();
    public abstract virtual void set_Bold(bool value);
    public abstract virtual bool get_Italic();
    public abstract virtual void set_Italic(bool value);
    public abstract virtual ExcelUnderline get_Underline();
    public abstract virtual void set_Underline(ExcelUnderline value);
    public abstract virtual bool get_StrikeThrough();
    public abstract virtual void set_StrikeThrough(bool value);
    public abstract virtual ExcelKnownColors get_TopBorderColor();
    public abstract virtual void set_TopBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_TopBorderColorRGB();
    public abstract virtual void set_TopBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_TopBorderStyle();
    public abstract virtual void set_TopBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_HorizontalBorderColor();
    public abstract virtual void set_HorizontalBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_HorizontalBorderColorRGB();
    public abstract virtual void set_HorizontalBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_HorizontalBorderStyle();
    public abstract virtual void set_HorizontalBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_VerticalBorderColor();
    public abstract virtual void set_VerticalBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_VerticalBorderColorRGB();
    public abstract virtual void set_VerticalBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_VerticalBorderStyle();
    public abstract virtual void set_VerticalBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_BottomBorderColor();
    public abstract virtual void set_BottomBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_BottomBorderColorRGB();
    public abstract virtual void set_BottomBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_BottomBorderStyle();
    public abstract virtual void set_BottomBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_RightBorderColor();
    public abstract virtual void set_RightBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_RightBorderColorRGB();
    public abstract virtual void set_RightBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_RightBorderStyle();
    public abstract virtual void set_RightBorderStyle(ExcelLineStyle value);
    public abstract virtual ExcelKnownColors get_LeftBorderColor();
    public abstract virtual void set_LeftBorderColor(ExcelKnownColors value);
    public abstract virtual Color get_LeftBorderColorRGB();
    public abstract virtual void set_LeftBorderColorRGB(Color value);
    public abstract virtual ExcelLineStyle get_LeftBorderStyle();
    public abstract virtual void set_LeftBorderStyle(ExcelLineStyle value);
    public abstract virtual void Clear();
    public abstract virtual ITableStyleElement Clone();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ITableStyleElements {
    public ITableStyleElement Item { get; }
    public ITableStyleElement Item { get; }
    public int Count { get; }
    public abstract virtual ITableStyleElement get_Item(ExcelTableStyleElementType tableStyleElementType);
    public abstract virtual ITableStyleElement get_Item(int index);
    public abstract virtual ITableStyleElement Add(ExcelTableStyleElementType tableStyleElementType);
    public abstract virtual ITableStyleElement Add(ITableStyleElement tableStyleElement);
    public abstract virtual int get_Count();
    public abstract virtual bool Contains(ITableStyleElement tableStyleElement);
    public abstract virtual bool Contains(ExcelTableStyleElementType tableStyleElementType);
    public abstract virtual void Remove(ITableStyleElement tableStyleElement);
    public abstract virtual void RemoveAt(int index);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ITableStyles {
    public ITableStyle Item { get; }
    public ITableStyle Item { get; }
    public int Count { get; }
    public abstract virtual ITableStyle get_Item(string tableStyleName);
    public abstract virtual ITableStyle get_Item(int index);
    public abstract virtual ITableStyle Add(string tableStyleName);
    public abstract virtual ITableStyle Add(ITableStyle tableStyle);
    public abstract virtual int get_Count();
    public abstract virtual bool Contains(ITableStyle tableStyle);
    public abstract virtual bool Contains(string tableStyleName);
    public abstract virtual void Remove(ITableStyle tableStyle);
    public abstract virtual void RemoveAt(int index);
}
public interface Syncfusion.XlsIO.ITabSheet {
    public ExcelKnownColors TabColor { get; public set; }
    public Color TabColorRGB { get; public set; }
    public IChartShapes Charts { get; }
    public IPictures Pictures { get; }
    public IWorkbook Workbook { get; }
    public IShapes Shapes { get; }
    public bool IsRightToLeft { get; public set; }
    public bool IsSelected { get; }
    public int TabIndex { get; }
    public string Name { get; public set; }
    public WorksheetVisibility Visibility { get; public set; }
    public ITextBoxes TextBoxes { get; }
    public ICheckBoxes CheckBoxes { get; }
    public IOptionButtons OptionButtons { get; }
    public IComboBoxes ComboBoxes { get; }
    public string CodeName { get; }
    public bool ProtectContents { get; }
    public bool ProtectDrawingObjects { get; }
    public bool ProtectScenarios { get; }
    public ExcelSheetProtection Protection { get; }
    public bool IsPasswordProtected { get; }
    public int Zoom { get; public set; }
    public abstract virtual ExcelKnownColors get_TabColor();
    public abstract virtual void set_TabColor(ExcelKnownColors value);
    public abstract virtual Color get_TabColorRGB();
    public abstract virtual void set_TabColorRGB(Color value);
    public abstract virtual IChartShapes get_Charts();
    public abstract virtual IPictures get_Pictures();
    public abstract virtual IWorkbook get_Workbook();
    public abstract virtual IShapes get_Shapes();
    public abstract virtual bool get_IsRightToLeft();
    public abstract virtual void set_IsRightToLeft(bool value);
    public abstract virtual bool get_IsSelected();
    public abstract virtual int get_TabIndex();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual WorksheetVisibility get_Visibility();
    public abstract virtual void set_Visibility(WorksheetVisibility value);
    public abstract virtual ITextBoxes get_TextBoxes();
    public abstract virtual ICheckBoxes get_CheckBoxes();
    public abstract virtual IOptionButtons get_OptionButtons();
    public abstract virtual IComboBoxes get_ComboBoxes();
    public abstract virtual string get_CodeName();
    public abstract virtual bool get_ProtectContents();
    public abstract virtual bool get_ProtectDrawingObjects();
    public abstract virtual bool get_ProtectScenarios();
    public abstract virtual ExcelSheetProtection get_Protection();
    public abstract virtual bool get_IsPasswordProtected();
    public abstract virtual int get_Zoom();
    public abstract virtual void set_Zoom(int value);
    public abstract virtual void Activate();
    public abstract virtual void Select();
    public abstract virtual void Unselect();
    public abstract virtual void Protect(string password);
    public abstract virtual void Protect(string password, ExcelSheetProtection options);
    public abstract virtual void Unprotect(string password);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ITabSheets {
    public int Count { get; }
    public ITabSheet Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ITabSheet get_Item(int index);
    public abstract virtual void Move(int iOldIndex, int iNewIndex);
    public abstract virtual void MoveBefore(ITabSheet sheetToMove, ITabSheet sheetForPlacement);
    public abstract virtual void MoveAfter(ITabSheet sheetToCopy, ITabSheet sheetForPlacement);
}
public interface Syncfusion.XlsIO.ITemplateMarkers {
    public string MarkerPrefix { get; public set; }
    public char ArgumentSeparator { get; public set; }
    public abstract virtual void ApplyMarkers();
    public abstract virtual void AddVariable(string strName, object variable);
    public abstract virtual void RemoveVariable(string strName);
    public abstract virtual bool ContainsVariable(string strName);
    public abstract virtual string get_MarkerPrefix();
    public abstract virtual void set_MarkerPrefix(string value);
    public abstract virtual char get_ArgumentSeparator();
    public abstract virtual void set_ArgumentSeparator(char value);
}
public interface Syncfusion.XlsIO.ITemplateMarkersProcessor {
    public string MarkerPrefix { get; public set; }
    public char ArgumentSeparator { get; public set; }
    public abstract virtual void ApplyMarkers();
    public abstract virtual void ApplyMarkers(UnknownVariableAction action);
    public abstract virtual void AddVariable(string strName, object variable);
    public abstract virtual void AddVariable(string strName, object variable, VariableTypeAction variableTypeAction);
    public abstract virtual void RemoveVariable(string strName);
    public abstract virtual bool ContainsVariable(string strName);
    public abstract virtual IConditionalFormats CreateConditionalFormats(IRange range);
    public abstract virtual string get_MarkerPrefix();
    public abstract virtual void set_MarkerPrefix(string value);
    public abstract virtual char get_ArgumentSeparator();
    public abstract virtual void set_ArgumentSeparator(char value);
}
public interface Syncfusion.XlsIO.ITextBox {
    public ExcelCommentHAlign HAlignment { get; public set; }
    public ExcelCommentVAlign VAlignment { get; public set; }
    public ExcelTextRotation TextRotation { get; public set; }
    public bool IsTextLocked { get; public set; }
    public IRichTextString RichText { get; public set; }
    public string Text { get; public set; }
    public abstract virtual ExcelCommentHAlign get_HAlignment();
    public abstract virtual void set_HAlignment(ExcelCommentHAlign value);
    public abstract virtual ExcelCommentVAlign get_VAlignment();
    public abstract virtual void set_VAlignment(ExcelCommentVAlign value);
    public abstract virtual ExcelTextRotation get_TextRotation();
    public abstract virtual void set_TextRotation(ExcelTextRotation value);
    public abstract virtual bool get_IsTextLocked();
    public abstract virtual void set_IsTextLocked(bool value);
    public abstract virtual IRichTextString get_RichText();
    public abstract virtual void set_RichText(IRichTextString value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.ITextBoxes {
    public int Count { get; }
    public ITextBoxShape Item { get; }
    public ITextBoxShape Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual ITextBoxShape get_Item(int index);
    public abstract virtual ITextBoxShape get_Item(string name);
    public abstract virtual ITextBoxShape AddTextBox(int row, int column, int height, int width);
}
public interface Syncfusion.XlsIO.ITextBoxShape {
}
public interface Syncfusion.XlsIO.ITextBoxShapeEx {
    public string TextLink { get; public set; }
    public abstract virtual string get_TextLink();
    public abstract virtual void set_TextLink(string value);
}
public interface Syncfusion.XlsIO.ITextFrame {
    public bool IsTextOverFlow { get; public set; }
    public bool WrapTextInShape { get; public set; }
    public bool IsAutoSize { get; public set; }
    public int MarginLeftPt { get; public set; }
    public int TopMarginPt { get; public set; }
    public int RightMarginPt { get; public set; }
    public int BottomMarginPt { get; public set; }
    public bool IsAutoMargins { get; public set; }
    public TextVertOverflowType TextVertOverflowType { get; public set; }
    public TextHorzOverflowType TextHorzOverflowType { get; public set; }
    public ExcelHorizontalAlignment HorizontalAlignment { get; public set; }
    public ExcelVerticalAlignment VerticalAlignment { get; public set; }
    public TextDirection TextDirection { get; public set; }
    public ITextRange TextRange { get; }
    public abstract virtual bool get_IsTextOverFlow();
    public abstract virtual void set_IsTextOverFlow(bool value);
    public abstract virtual bool get_WrapTextInShape();
    public abstract virtual void set_WrapTextInShape(bool value);
    public abstract virtual bool get_IsAutoSize();
    public abstract virtual void set_IsAutoSize(bool value);
    public abstract virtual int get_MarginLeftPt();
    public abstract virtual void set_MarginLeftPt(int value);
    public abstract virtual int get_TopMarginPt();
    public abstract virtual void set_TopMarginPt(int value);
    public abstract virtual int get_RightMarginPt();
    public abstract virtual void set_RightMarginPt(int value);
    public abstract virtual int get_BottomMarginPt();
    public abstract virtual void set_BottomMarginPt(int value);
    public abstract virtual bool get_IsAutoMargins();
    public abstract virtual void set_IsAutoMargins(bool value);
    public abstract virtual TextVertOverflowType get_TextVertOverflowType();
    public abstract virtual void set_TextVertOverflowType(TextVertOverflowType value);
    public abstract virtual TextHorzOverflowType get_TextHorzOverflowType();
    public abstract virtual void set_TextHorzOverflowType(TextHorzOverflowType value);
    public abstract virtual ExcelHorizontalAlignment get_HorizontalAlignment();
    public abstract virtual void set_HorizontalAlignment(ExcelHorizontalAlignment value);
    public abstract virtual ExcelVerticalAlignment get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(ExcelVerticalAlignment value);
    public abstract virtual TextDirection get_TextDirection();
    public abstract virtual void set_TextDirection(TextDirection value);
    public abstract virtual ITextRange get_TextRange();
}
public interface Syncfusion.XlsIO.ITextRange {
    public string Text { get; public set; }
    public IRichTextString RichText { get; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual IRichTextString get_RichText();
}
public interface Syncfusion.XlsIO.IThreadedComment {
    public string Author { get; }
    public string Text { get; public set; }
    public DateTime CreatedTime { get; }
    public bool IsResolved { get; public set; }
    public IThreadedComments Replies { get; }
    public int RowIndex { get; }
    public int ColumnIndex { get; }
    public abstract virtual string get_Author();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual DateTime get_CreatedTime();
    public abstract virtual bool get_IsResolved();
    public abstract virtual void set_IsResolved(bool value);
    public abstract virtual IThreadedComments get_Replies();
    public abstract virtual int get_RowIndex();
    public abstract virtual int get_ColumnIndex();
    public abstract virtual IThreadedComment AddReply(string text, DateTime creationTime);
    public abstract virtual IThreadedComment AddReply(string text, string author, DateTime creationTime);
    public abstract virtual void Delete();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IThreadedComments {
    public IThreadedComment Item { get; }
    public IThreadedComment Item { get; }
    public int Count { get; }
    public abstract virtual IThreadedComment get_Item(int index);
    public abstract virtual IThreadedComment get_Item(int row, int column);
    public abstract virtual int get_Count();
    public abstract virtual void Clear();
}
public interface Syncfusion.XlsIO.IThreeDFormat {
    public Excel2007ChartBevelProperties BevelTop { get; public set; }
    public Excel2007ChartBevelProperties BevelBottom { get; public set; }
    public Excel2007ChartMaterialProperties Material { get; public set; }
    public Excel2007ChartLightingProperties Lighting { get; public set; }
    public int BevelTopHeight { get; public set; }
    public int BevelTopWidth { get; public set; }
    public int BevelBottomHeight { get; public set; }
    public int BevelBottomWidth { get; public set; }
    public abstract virtual Excel2007ChartBevelProperties get_BevelTop();
    public abstract virtual void set_BevelTop(Excel2007ChartBevelProperties value);
    public abstract virtual Excel2007ChartBevelProperties get_BevelBottom();
    public abstract virtual void set_BevelBottom(Excel2007ChartBevelProperties value);
    public abstract virtual Excel2007ChartMaterialProperties get_Material();
    public abstract virtual void set_Material(Excel2007ChartMaterialProperties value);
    public abstract virtual Excel2007ChartLightingProperties get_Lighting();
    public abstract virtual void set_Lighting(Excel2007ChartLightingProperties value);
    public abstract virtual int get_BevelTopHeight();
    public abstract virtual void set_BevelTopHeight(int value);
    public abstract virtual int get_BevelTopWidth();
    public abstract virtual void set_BevelTopWidth(int value);
    public abstract virtual int get_BevelBottomHeight();
    public abstract virtual void set_BevelBottomHeight(int value);
    public abstract virtual int get_BevelBottomWidth();
    public abstract virtual void set_BevelBottomWidth(int value);
}
public interface Syncfusion.XlsIO.ITopBottom {
    public ExcelCFTopBottomType Type { get; public set; }
    public bool Percent { get; public set; }
    public int Rank { get; public set; }
    public abstract virtual ExcelCFTopBottomType get_Type();
    public abstract virtual void set_Type(ExcelCFTopBottomType value);
    public abstract virtual bool get_Percent();
    public abstract virtual void set_Percent(bool value);
    public abstract virtual int get_Rank();
    public abstract virtual void set_Rank(int value);
}
public interface Syncfusion.XlsIO.IVPageBreak {
    public IApplication Application { get; }
    public IRange Location { get; public set; }
    public object Parent { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual IRange get_Location();
    public abstract virtual void set_Location(IRange value);
    public abstract virtual object get_Parent();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IVPageBreaks {
    public IApplication Application { get; }
    public int Count { get; }
    public IVPageBreak Item { get; }
    public object Parent { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual int get_Count();
    public abstract virtual IVPageBreak get_Item(int Index);
    public abstract virtual object get_Parent();
    public abstract virtual IVPageBreak Add(IRange location);
    public abstract virtual IVPageBreak Remove(IRange location);
    public abstract virtual IVPageBreak GetPageBreak(int iColumn);
    public abstract virtual void Clear();
}
public interface Syncfusion.XlsIO.IWarning {
    public bool Cancel { get; public set; }
    public abstract virtual void ShowWarning(WarningInfo warning);
    public abstract virtual bool get_Cancel();
    public abstract virtual void set_Cancel(bool value);
}
public interface Syncfusion.XlsIO.IWorkbook {
    public IVbaProject VbaProject { get; }
    public ITableStyles TableStyles { get; }
    public IWorksheet ActiveSheet { get; }
    public int ActiveSheetIndex { get; public set; }
    public IAddInFunctions AddInFunctions { get; }
    public string Author { get; public set; }
    public bool IsHScrollBarVisible { get; public set; }
    public bool IsVScrollBarVisible { get; public set; }
    public IBuiltInDocumentProperties BuiltInDocumentProperties { get; }
    public string CodeName { get; public set; }
    public ICustomDocumentProperties CustomDocumentProperties { get; }
    public IMetaProperties ContentTypeProperties { get; }
    public ICustomXmlPartCollection CustomXmlparts { get; }
    public bool Date1904 { get; public set; }
    public bool PrecisionAsDisplayed { get; public set; }
    public bool IsCellProtection { get; }
    public bool IsWindowProtection { get; }
    public INames Names { get; }
    public bool ReadOnly { get; }
    public bool Saved { get; public set; }
    public IStyles Styles { get; }
    public IWorksheets Worksheets { get; }
    public bool HasMacros { get; }
    [ObsoleteAttribute("IWorkbook.Palettte property is obsolete so please use the IWorkbook.Palette property instead. IWorkbook.Palettte will be removed in July 2006. Sorry for the inconvenience")]
public Color[] Palettte { get; }
    public Color[] Palette { get; }
    public int DisplayedTab { get; public set; }
    public ICharts Charts { get; }
    public bool ThrowOnUnknownNames { get; public set; }
    public bool DisableMacrosStart { get; public set; }
    public double StandardFontSize { get; public set; }
    public string StandardFont { get; public set; }
    public bool Allow3DRangesInDataValidation { get; public set; }
    public ICalculationOptions CalculationOptions { get; }
    public string RowSeparator { get; }
    public string ArgumentsSeparator { get; }
    public IWorksheetGroup WorksheetGroup { get; }
    public bool IsRightToLeft { get; public set; }
    public bool DisplayWorkbookTabs { get; public set; }
    public ITabSheets TabSheets { get; }
    public bool DetectDateTimeInValue { get; public set; }
    public bool UseFastStringSearching { get; public set; }
    public bool ReadOnlyRecommended { get; public set; }
    public string PasswordToOpen { get; public set; }
    public int MaxRowCount { get; }
    public int MaxColumnCount { get; }
    public ExcelVersion Version { get; public set; }
    public IPivotCaches PivotCaches { get; }
    public IConnections Connections { get; }
    public XmlMapCollection XmlMaps { get; }
    public abstract virtual IVbaProject get_VbaProject();
    public abstract virtual ITableStyles get_TableStyles();
    public abstract virtual IWorksheet get_ActiveSheet();
    public abstract virtual int get_ActiveSheetIndex();
    public abstract virtual void set_ActiveSheetIndex(int value);
    public abstract virtual IAddInFunctions get_AddInFunctions();
    public abstract virtual string get_Author();
    public abstract virtual void set_Author(string value);
    public abstract virtual bool get_IsHScrollBarVisible();
    public abstract virtual void set_IsHScrollBarVisible(bool value);
    public abstract virtual bool get_IsVScrollBarVisible();
    public abstract virtual void set_IsVScrollBarVisible(bool value);
    public abstract virtual IBuiltInDocumentProperties get_BuiltInDocumentProperties();
    public abstract virtual string get_CodeName();
    public abstract virtual void set_CodeName(string value);
    public abstract virtual ICustomDocumentProperties get_CustomDocumentProperties();
    public abstract virtual IMetaProperties get_ContentTypeProperties();
    public abstract virtual ICustomXmlPartCollection get_CustomXmlparts();
    public abstract virtual bool get_Date1904();
    public abstract virtual void set_Date1904(bool value);
    public abstract virtual bool get_PrecisionAsDisplayed();
    public abstract virtual void set_PrecisionAsDisplayed(bool value);
    public abstract virtual bool get_IsCellProtection();
    public abstract virtual bool get_IsWindowProtection();
    public abstract virtual INames get_Names();
    public abstract virtual bool get_ReadOnly();
    public abstract virtual bool get_Saved();
    public abstract virtual void set_Saved(bool value);
    public abstract virtual IStyles get_Styles();
    public abstract virtual IWorksheets get_Worksheets();
    public abstract virtual bool get_HasMacros();
    public abstract virtual Color[] get_Palettte();
    public abstract virtual Color[] get_Palette();
    public abstract virtual int get_DisplayedTab();
    public abstract virtual void set_DisplayedTab(int value);
    public abstract virtual ICharts get_Charts();
    public abstract virtual bool get_ThrowOnUnknownNames();
    public abstract virtual void set_ThrowOnUnknownNames(bool value);
    public abstract virtual bool get_DisableMacrosStart();
    public abstract virtual void set_DisableMacrosStart(bool value);
    public abstract virtual double get_StandardFontSize();
    public abstract virtual void set_StandardFontSize(double value);
    public abstract virtual string get_StandardFont();
    public abstract virtual void set_StandardFont(string value);
    public abstract virtual bool get_Allow3DRangesInDataValidation();
    public abstract virtual void set_Allow3DRangesInDataValidation(bool value);
    public abstract virtual ICalculationOptions get_CalculationOptions();
    public abstract virtual string get_RowSeparator();
    public abstract virtual string get_ArgumentsSeparator();
    public abstract virtual IWorksheetGroup get_WorksheetGroup();
    public abstract virtual bool get_IsRightToLeft();
    public abstract virtual void set_IsRightToLeft(bool value);
    public abstract virtual bool get_DisplayWorkbookTabs();
    public abstract virtual void set_DisplayWorkbookTabs(bool value);
    public abstract virtual ITabSheets get_TabSheets();
    public abstract virtual bool get_DetectDateTimeInValue();
    public abstract virtual void set_DetectDateTimeInValue(bool value);
    public abstract virtual bool get_UseFastStringSearching();
    public abstract virtual void set_UseFastStringSearching(bool value);
    public abstract virtual bool get_ReadOnlyRecommended();
    public abstract virtual void set_ReadOnlyRecommended(bool value);
    public abstract virtual string get_PasswordToOpen();
    public abstract virtual void set_PasswordToOpen(string value);
    public abstract virtual int get_MaxRowCount();
    public abstract virtual int get_MaxColumnCount();
    public abstract virtual ExcelVersion get_Version();
    public abstract virtual void set_Version(ExcelVersion value);
    public abstract virtual IPivotCaches get_PivotCaches();
    public abstract virtual IConnections get_Connections();
    public abstract virtual IDataSort CreateDataSorter();
    public abstract virtual void Activate();
    public abstract virtual IFont AddFont(IFont fontToAdd);
    public abstract virtual void Close(bool SaveChanges, string Filename);
    public abstract virtual void Close(bool saveChanges);
    public abstract virtual void Close();
    public abstract virtual void SaveAsHtml(Stream stream);
    public abstract virtual void SaveAsHtml(Stream stream, HtmlSaveOptions saveOptions);
    public abstract virtual IFont CreateFont(Font nativeFont);
    public abstract virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public abstract virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public abstract virtual IHFEngine CreateHFEngine();
    public abstract virtual ITemplateMarkersProcessor CreateTemplateMarkersProcessor();
    public abstract virtual void MarkAsFinal();
    public abstract virtual void SaveAs(Stream stream);
    public abstract virtual void SaveAs(Stream stream, ExcelSaveType saveType);
    public abstract virtual void SaveAsXml(Stream stream, ExcelXmlSaveType saveType);
    public abstract virtual void SaveAs(Stream stream, string separator);
    public abstract virtual void SaveAs(Stream stream, string separator, Encoding encoding);
    public abstract virtual void SaveAsJson(string filename);
    public abstract virtual void SaveAsJson(string filename, bool isSchema);
    public abstract virtual void SaveAsJson(string filename, IWorksheet worksheet);
    public abstract virtual void SaveAsJson(string filename, IWorksheet worksheet, bool isSchema);
    public abstract virtual void SaveAsJson(string filename, IRange range);
    public abstract virtual void SaveAsJson(string filename, IRange range, bool isSchema);
    public abstract virtual void SaveAsJson(Stream stream);
    public abstract virtual void SaveAsJson(Stream stream, bool isSchema);
    public abstract virtual void SaveAsJson(Stream stream, IWorksheet worksheet);
    public abstract virtual void SaveAsJson(Stream stream, IWorksheet worksheet, bool isSchema);
    public abstract virtual void SaveAsJson(Stream stream, IRange range);
    public abstract virtual void SaveAsJson(Stream stream, IRange range, bool IsSchema);
    public abstract virtual void SetPaletteColor(int index, Color color);
    public abstract virtual void ResetPalette();
    public abstract virtual Color GetPaletteColor(ExcelKnownColors color);
    public abstract virtual ExcelKnownColors GetNearestColor(Color color);
    public abstract virtual ExcelKnownColors GetNearestColor(int r, int g, int b);
    public abstract virtual ExcelKnownColors SetColorOrGetNearest(Color color);
    public abstract virtual ExcelKnownColors SetColorOrGetNearest(int r, int g, int b);
    public abstract virtual IFont CreateFont();
    public abstract virtual IFont CreateFont(IFont baseFont);
    public abstract virtual void Replace(string oldValue, string newValue);
    public abstract virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public abstract virtual void Replace(string oldValue, double newValue);
    public abstract virtual void Replace(string oldValue, DateTime newValue);
    public abstract virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public abstract virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public abstract virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public abstract virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public abstract virtual IRange FindFirst(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public abstract virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags);
    public abstract virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public abstract virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags);
    public abstract virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public abstract virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public abstract virtual IRange FindFirst(bool findValue);
    public abstract virtual IRange FindFirst(DateTime findValue);
    public abstract virtual IRange FindFirst(TimeSpan findValue);
    public abstract virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public abstract virtual IRange[] FindAll(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public abstract virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public abstract virtual IRange[] FindAll(bool findValue);
    public abstract virtual IRange[] FindAll(DateTime findValue);
    public abstract virtual IRange[] FindAll(TimeSpan findValue);
    public abstract virtual void SetSeparators(char argumentsSeparator, char arrayRowsSeparator);
    public abstract virtual void Protect(bool bIsProtectWindow, bool bIsProtectContent);
    public abstract virtual void Protect(bool bIsProtectWindow, bool bIsProtectContent, string password);
    public abstract virtual void Unprotect();
    public abstract virtual void Unprotect(string password);
    public abstract virtual IWorkbook Clone();
    public abstract virtual void SetWriteProtectionPassword(string password);
    public abstract virtual void ImportXml(Stream stream);
    public abstract virtual XmlMapCollection get_XmlMaps();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnFileSaved(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnFileSaved(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnReadOnlyFile(ReadOnlyFileEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnReadOnlyFile(ReadOnlyFileEventHandler value);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IWorkbooks {
    public IApplication Application { get; }
    public int Count { get; }
    public IWorkbook Item { get; }
    public object Parent { get; }
    public abstract virtual IApplication get_Application();
    public abstract virtual int get_Count();
    public abstract virtual IWorkbook get_Item(int Index);
    public abstract virtual object get_Parent();
    public abstract virtual IWorkbook Create();
    public abstract virtual IWorkbook Create(int worksheetsQuantity);
    public abstract virtual IWorkbook Create(String[] names);
    public abstract virtual IWorkbook Open(Stream stream);
    public abstract virtual IWorkbook Open(Stream stream, ExcelVersion version);
    public abstract virtual IWorkbook Open(Stream stream, ExcelParseOptions options);
    public abstract virtual IWorkbook Open(Stream stream, string separator, int row, int column);
    public abstract virtual IWorkbook Open(Stream stream, string separator, int row, int column, Encoding encoding);
    public abstract virtual IWorkbook Open(Stream stream, string separator);
    public abstract virtual IWorkbook Open(Stream stream, string separator, Encoding encoding);
    public abstract virtual IWorkbook Open(Stream stream, Encoding encoding);
    public abstract virtual IWorkbook Open(Stream stream, ExcelParseOptions options, bool bReadOnly, string password);
    public abstract virtual IWorkbook Open(Stream stream, ExcelParseOptions options, bool isReadOnly, string password, ExcelVersion version);
    public abstract virtual IWorkbook Open(Stream stream, ExcelParseOptions options, bool isReadOnly, string password, ExcelOpenType openType);
    public abstract virtual IWorkbook Open(Stream stream, ExcelOpenType openType);
    public abstract virtual IWorkbook Open(Stream stream, ExcelOpenType openType, ExcelParseOptions options);
    public abstract virtual IWorkbook Open(Stream stream, ExcelOpenType openType, ExcelVersion version);
    public abstract virtual IWorkbook OpenFromXml(Stream stream, ExcelXmlOpenType openType);
    public abstract virtual IWorkbook OpenFromXml(XmlReader reader, ExcelXmlOpenType openType);
    public abstract virtual void Close();
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IWorksheet {
    public CalcEngine CalcEngine { get; public set; }
    public ISlicers Slicers { get; }
    public IScenarios Scenarios { get; }
    public IAutoFilters AutoFilters { get; }
    public IRange[] Cells { get; }
    public bool DisplayPageBreaks { get; public set; }
    public int Index { get; }
    public IRange[] MergedCells { get; }
    public INames Names { get; }
    public IPageSetup PageSetup { get; }
    public IRange Range { get; }
    public IRange[] Rows { get; }
    public IRange[] Columns { get; }
    public double StandardHeight { get; public set; }
    public bool StandardHeightFlag { get; public set; }
    public double StandardWidth { get; public set; }
    public ExcelSheetType Type { get; }
    public IRange UsedRange { get; }
    public int Zoom { get; public set; }
    public int VerticalSplit { get; public set; }
    public int HorizontalSplit { get; public set; }
    public int FirstVisibleRow { get; public set; }
    public int FirstVisibleColumn { get; public set; }
    public int ActivePane { get; public set; }
    public bool IsDisplayZeros { get; public set; }
    public bool IsGridLinesVisible { get; public set; }
    public ExcelKnownColors GridLineColor { get; public set; }
    public bool IsRowColumnHeadersVisible { get; public set; }
    public IVPageBreaks VPageBreaks { get; }
    public IHPageBreaks HPageBreaks { get; }
    public bool IsStringsPreserved { get; public set; }
    public IComments Comments { get; }
    public IThreadedComments ThreadedComments { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IRange Item { get; }
    public IHyperLinks HyperLinks { get; }
    public IRange[] UsedCells { get; }
    public IWorksheetCustomProperties CustomProperties { get; }
    public bool UseRangesCache { get; public set; }
    public bool IsFreezePanes { get; }
    public IRange SplitCell { get; }
    public int TopVisibleRow { get; public set; }
    public int LeftVisibleColumn { get; public set; }
    public bool UsedRangeIncludesFormatting { get; public set; }
    public IPivotTables PivotTables { get; }
    public IListObjects ListObjects { get; }
    public SheetView View { get; public set; }
    public IOleObjects OleObjects { get; }
    public bool HasOleObject { get; }
    public ISparklineGroups SparklineGroups { get; }
    public IDataSort DataSorter { get; }
    public IMigrantRange MigrantRange { get; }
    public abstract virtual CalcEngine get_CalcEngine();
    public abstract virtual void set_CalcEngine(CalcEngine value);
    public abstract virtual void EnableSheetCalculations();
    public abstract virtual void DisableSheetCalculations();
    [CompilerGeneratedAttribute]
public abstract virtual void add_MissingFunction(MissingFunctionEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MissingFunction(MissingFunctionEventHandler value);
    public abstract virtual ISlicers get_Slicers();
    public abstract virtual IScenarios get_Scenarios();
    public abstract virtual IAutoFilters get_AutoFilters();
    public abstract virtual IRange[] get_Cells();
    public abstract virtual bool get_DisplayPageBreaks();
    public abstract virtual void set_DisplayPageBreaks(bool value);
    public abstract virtual int get_Index();
    public abstract virtual IRange[] get_MergedCells();
    public abstract virtual INames get_Names();
    public abstract virtual IPageSetup get_PageSetup();
    public abstract virtual IRange get_Range();
    public abstract virtual IRange[] get_Rows();
    public abstract virtual IRange[] get_Columns();
    public abstract virtual double get_StandardHeight();
    public abstract virtual void set_StandardHeight(double value);
    public abstract virtual bool get_StandardHeightFlag();
    public abstract virtual void set_StandardHeightFlag(bool value);
    public abstract virtual double get_StandardWidth();
    public abstract virtual void set_StandardWidth(double value);
    public abstract virtual ExcelSheetType get_Type();
    public abstract virtual IRange get_UsedRange();
    public abstract virtual int get_Zoom();
    public abstract virtual void set_Zoom(int value);
    public abstract virtual int get_VerticalSplit();
    public abstract virtual void set_VerticalSplit(int value);
    public abstract virtual int get_HorizontalSplit();
    public abstract virtual void set_HorizontalSplit(int value);
    public abstract virtual int get_FirstVisibleRow();
    public abstract virtual void set_FirstVisibleRow(int value);
    public abstract virtual int get_FirstVisibleColumn();
    public abstract virtual void set_FirstVisibleColumn(int value);
    public abstract virtual int get_ActivePane();
    public abstract virtual void set_ActivePane(int value);
    public abstract virtual bool get_IsDisplayZeros();
    public abstract virtual void set_IsDisplayZeros(bool value);
    public abstract virtual bool get_IsGridLinesVisible();
    public abstract virtual void set_IsGridLinesVisible(bool value);
    public abstract virtual ExcelKnownColors get_GridLineColor();
    public abstract virtual void set_GridLineColor(ExcelKnownColors value);
    public abstract virtual bool get_IsRowColumnHeadersVisible();
    public abstract virtual void set_IsRowColumnHeadersVisible(bool value);
    public abstract virtual IVPageBreaks get_VPageBreaks();
    public abstract virtual IHPageBreaks get_HPageBreaks();
    public abstract virtual bool get_IsStringsPreserved();
    public abstract virtual void set_IsStringsPreserved(bool value);
    public abstract virtual IComments get_Comments();
    public abstract virtual IThreadedComments get_ThreadedComments();
    public abstract virtual IRange get_Item(int row, int column);
    public abstract virtual IRange get_Item(int row, int column, int lastRow, int lastColumn);
    public abstract virtual IRange get_Item(string name);
    public abstract virtual IRange get_Item(string name, bool IsR1C1Notation);
    public abstract virtual IHyperLinks get_HyperLinks();
    public abstract virtual IRange[] get_UsedCells();
    public abstract virtual IWorksheetCustomProperties get_CustomProperties();
    public abstract virtual bool get_UseRangesCache();
    public abstract virtual void set_UseRangesCache(bool value);
    public abstract virtual bool get_IsFreezePanes();
    public abstract virtual IRange get_SplitCell();
    public abstract virtual int get_TopVisibleRow();
    public abstract virtual void set_TopVisibleRow(int value);
    public abstract virtual int get_LeftVisibleColumn();
    public abstract virtual void set_LeftVisibleColumn(int value);
    public abstract virtual bool get_UsedRangeIncludesFormatting();
    public abstract virtual void set_UsedRangeIncludesFormatting(bool value);
    public abstract virtual IPivotTables get_PivotTables();
    public abstract virtual IListObjects get_ListObjects();
    public abstract virtual SheetView get_View();
    public abstract virtual void set_View(SheetView value);
    public abstract virtual IOleObjects get_OleObjects();
    public abstract virtual bool get_HasOleObject();
    public abstract virtual ISparklineGroups get_SparklineGroups();
    public abstract virtual IDataSort get_DataSorter();
    public abstract virtual void Clear();
    public abstract virtual void ClearData();
    public abstract virtual bool Contains(int iRow, int iColumn);
    public abstract virtual IRanges CreateRangesCollection();
    public abstract virtual void CreateNamedRanges(string namedRange, string referRange, bool vertical);
    public abstract virtual ITemplateMarkersProcessor CreateTemplateMarkersProcessor();
    public abstract virtual bool IsColumnVisible(int columnIndex);
    public abstract virtual void ShowColumn(int columnIndex, bool isVisible);
    public abstract virtual void HideColumn(int columnIndex);
    public abstract virtual void HideRow(int rowIndex);
    public abstract virtual bool IsRowVisible(int rowIndex);
    public abstract virtual void ShowRow(int rowIndex, bool isVisible);
    public abstract virtual void ShowRange(IRange range, bool isVisible);
    public abstract virtual void ShowRange(RangesCollection ranges, bool isVisible);
    public abstract virtual void ShowRange(IRange[] ranges, bool isVisible);
    public abstract virtual void InsertRow(int index);
    public abstract virtual void InsertRow(int iRowIndex, int iRowCount);
    public abstract virtual void InsertRow(int iRowIndex, int iRowCount, ExcelInsertOptions insertOptions);
    public abstract virtual void InsertColumn(int index);
    public abstract virtual void InsertColumn(int iColumnIndex, int iColumnCount);
    public abstract virtual void InsertColumn(int iColumnIndex, int iColumnCount, ExcelInsertOptions insertOptions);
    public abstract virtual void DeleteRow(int index);
    public abstract virtual void DeleteRow(int index, int count);
    public abstract virtual void DeleteColumn(int index);
    public abstract virtual void DeleteColumn(int index, int count);
    public abstract virtual int ImportArray(Object[] arrObject, int firstRow, int firstColumn, bool isVertical);
    public abstract virtual int ImportArray(String[] arrString, int firstRow, int firstColumn, bool isVertical);
    public abstract virtual int ImportArray(Int32[] arrInt, int firstRow, int firstColumn, bool isVertical);
    public abstract virtual int ImportArray(Double[] arrDouble, int firstRow, int firstColumn, bool isVertical);
    public abstract virtual int ImportArray(DateTime[] arrDateTime, int firstRow, int firstColumn, bool isVertical);
    public abstract virtual int ImportArray(Object[0...,0...] arrObject, int firstRow, int firstColumn);
    public abstract virtual int ImportData(IEnumerable arrObject, int firstRow, int firstColumn, bool includeHeader);
    public abstract virtual int ImportData(IEnumerable arrObject, ExcelImportDataOptions importOptions);
    public abstract virtual int ImportDataColumn(DataColumn dataColumn, bool isFieldNameShown, int firstRow, int firstColumn);
    public abstract virtual int ImportDataColumn(DataColumn dataColumn, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public abstract virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn);
    public abstract virtual int ImportDataTable(DataTable dataTable, int firstRow, int firstColumn, bool importOnSave);
    public abstract virtual int ImportDataTable(DataTable dataTable, int firstRow, int firstColumn, bool importOnSave, bool includeHeader);
    public abstract virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public abstract virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns);
    public abstract virtual int ImportDataTable(DataTable dataTable, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, bool preserveTypes);
    public abstract virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown);
    public abstract virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset);
    public abstract virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset, int iMaxRow, int iMaxCol);
    public abstract virtual int ImportDataTable(DataTable dataTable, IName namedRange, bool isFieldNameShown, int rowOffset, int columnOffset, int iMaxRow, int iMaxCol, bool bPreserveTypes);
    public abstract virtual int ImportDataReader(IDataReader dataReader, bool isFieldNameShown, int firstRow, int firstColumn);
    public abstract virtual int ImportDataReader(IDataReader dataReader, int firstRow, int firstColumn, bool importOnSave);
    public abstract virtual int ImportDataReader(IDataReader dataReader, bool isFieldNameShown, int firstRow, int firstColumn, bool preserveTypes);
    public abstract virtual int ImportDataReader(IDataReader dataReader, IName namedRange, bool isFieldNameShown);
    public abstract virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn);
    public abstract virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, bool bPreserveTypes);
    public abstract virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns);
    public abstract virtual int ImportDataView(DataView dataView, bool isFieldNameShown, int firstRow, int firstColumn, int maxRows, int maxColumns, bool bPreserveTypes);
    public abstract virtual void ImportXml(Stream stream, int row, int column);
    public abstract virtual void RemovePanes();
    public abstract virtual DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options);
    public abstract virtual DataTable ExportDataTable(int firstRow, int firstColumn, int maxRows, int maxColumns, ExcelExportDataTableOptions options, ExcelExportDataOptions exportDataOptions);
    public abstract virtual DataTable ExportDataTable(IRange dataRange, ExcelExportDataTableOptions options);
    public abstract virtual DataTable ExportDataTable(IRange dataRange, ExcelExportDataTableOptions options, ExcelExportDataOptions exportDataOptions);
    public abstract virtual List`1<T> ExportData(int firstRow, int firstColumn, int lastRow, int lastColumn);
    public abstract virtual List`1<T> ExportData(int firstRow, int firstColumn, int lastRow, int lastColumn, Dictionary`2<string, string> mappingProperties);
    public abstract virtual IRange IntersectRanges(IRange range1, IRange range2);
    public abstract virtual IRange MergeRanges(IRange range1, IRange range2);
    public abstract virtual void AutofitRow(int rowIndex);
    public abstract virtual void AutofitColumn(int colIndex);
    public abstract virtual void Replace(string oldValue, string newValue);
    public abstract virtual void Replace(string oldValue, string newValue, ExcelFindOptions findOptions);
    public abstract virtual void Replace(string oldValue, double newValue);
    public abstract virtual void Replace(string oldValue, DateTime newValue);
    public abstract virtual void Replace(string oldValue, String[] newValues, bool isVertical);
    public abstract virtual void Replace(string oldValue, Int32[] newValues, bool isVertical);
    public abstract virtual void Replace(string oldValue, Double[] newValues, bool isVertical);
    public abstract virtual void Replace(string oldValue, DataTable newValues, bool isFieldNamesShown);
    public abstract virtual void Replace(string oldValue, DataColumn newValues, bool isFieldNamesShown);
    public abstract virtual void Remove();
    public abstract virtual void Move(int iNewIndex);
    public abstract virtual int ColumnWidthToPixels(double Width);
    public abstract virtual double PixelsToColumnWidth(int pixels);
    public abstract virtual void SetColumnWidth(int iColumnIndex, double value);
    public abstract virtual void SetColumnWidthInPixels(int iColumnIndex, int value);
    public abstract virtual void SetColumnWidthInPixels(int iStartColumnIndex, int iCount, int value);
    public abstract virtual void SetRowHeight(int iRow, double value);
    public abstract virtual void SetRowHeightInPixels(int iRowIndex, double value);
    public abstract virtual void SetRowHeightInPixels(int iStartRowIndex, int iCount, double value);
    public abstract virtual double GetColumnWidth(int iColumnIndex);
    public abstract virtual int GetColumnWidthInPixels(int iColumnIndex);
    public abstract virtual double GetRowHeight(int iRow);
    public abstract virtual int GetRowHeightInPixels(int iRowIndex);
    public abstract virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public abstract virtual IRange FindFirst(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public abstract virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags);
    public abstract virtual IRange FindStringStartsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public abstract virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags);
    public abstract virtual IRange FindStringEndsWith(string findValue, ExcelFindType flags, bool ignoreCase);
    public abstract virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public abstract virtual IRange FindFirst(bool findValue);
    public abstract virtual IRange FindFirst(DateTime findValue);
    public abstract virtual IRange FindFirst(TimeSpan findValue);
    public abstract virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public abstract virtual IRange[] FindAll(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public abstract virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public abstract virtual IRange[] FindAll(bool findValue);
    public abstract virtual IRange[] FindAll(DateTime findValue);
    public abstract virtual IRange[] FindAll(TimeSpan findValue);
    public abstract virtual void SaveAs(Stream stream, string separator);
    public abstract virtual void SaveAs(Stream stream, string separator, Encoding encoding);
    public abstract virtual void SetDefaultColumnStyle(int iColumnIndex, IStyle defaultStyle);
    public abstract virtual void SetDefaultColumnStyle(int iStartColumnIndex, int iEndColumnIndex, IStyle defaultStyle);
    public abstract virtual void SetDefaultRowStyle(int iRowIndex, IStyle defaultStyle);
    public abstract virtual void SetDefaultRowStyle(int iStartRowIndex, int iEndRowIndex, IStyle defaultStyle);
    public abstract virtual IStyle GetDefaultColumnStyle(int iColumnIndex);
    public abstract virtual IStyle GetDefaultRowStyle(int iRowIndex);
    public abstract virtual void FreeRange(IRange range);
    public abstract virtual void FreeRange(int iRow, int iColumn);
    public abstract virtual void SetValue(int iRow, int iColumn, string value);
    public abstract virtual void SetNumber(int iRow, int iColumn, double value);
    public abstract virtual void SetBoolean(int iRow, int iColumn, bool value);
    public abstract virtual void SetText(int iRow, int iColumn, string value);
    public abstract virtual void SetFormula(int iRow, int iColumn, string value);
    public abstract virtual void SetError(int iRow, int iColumn, string value);
    public abstract virtual void SetBlank(int iRow, int iColumn);
    public abstract virtual void SetFormulaNumberValue(int iRow, int iColumn, double value);
    public abstract virtual void SetFormulaErrorValue(int iRow, int iColumn, string value);
    public abstract virtual void SetFormulaBoolValue(int iRow, int iColumn, bool value);
    public abstract virtual void SetFormulaStringValue(int iRow, int iColumn, string value);
    public abstract virtual IMigrantRange get_MigrantRange();
    public abstract virtual string GetText(int row, int column);
    public abstract virtual double GetNumber(int row, int column);
    public abstract virtual string GetFormula(int row, int column, bool bR1C1);
    public abstract virtual string GetError(int row, int column);
    public abstract virtual bool GetBoolean(int row, int column);
    public abstract virtual bool GetFormulaBoolValue(int row, int column);
    public abstract virtual string GetFormulaErrorValue(int row, int column);
    public abstract virtual double GetFormulaNumberValue(int row, int column);
    public abstract virtual string GetFormulaStringValue(int row, int column);
    public abstract virtual void ConvertToImage(int firstRow, int firstColumn, int lastRow, int lastColum, Stream outputStream);
    public abstract virtual void ConvertToImage(IRange range, Stream outputStream);
    public abstract virtual void ConvertToImage(IRange range, ExportImageOptions imageOptions, Stream outputStream);
    public abstract virtual void ConvertToImage(int firstRow, int firstColumn, int lastRow, int lastColumn, ExportImageOptions imageOptions, Stream outputStream);
    public abstract virtual void SaveAsHtml(Stream stream);
    public abstract virtual void SaveAsHtml(Stream stream, HtmlSaveOptions saveOptions);
    public abstract virtual void Calculate();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExportDataTableEvent(ExportDataTableEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExportDataTableEvent(ExportDataTableEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CellValueChanged(CellValueChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CellValueChanged(CellValueChangedEventHandler value);
    public abstract virtual void AdvancedFilter(ExcelFilterAction filterInPlace, IRange filterRange, IRange criteriaRange, IRange copyToRange, bool isUnique);
    public abstract virtual void ImportHtmlTable(string fileName, int row, int column);
    public abstract virtual void ImportHtmlTable(Stream fileStream, int row, int column);
    public abstract virtual void ImportHtmlTable(string fileName, int row, int column, HtmlImportOptions htmlImportOptions);
    public abstract virtual void ImportHtmlTable(Stream fileStream, int row, int column, HtmlImportOptions htmlImportOptions);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IWorksheetCustomProperties {
    public ICustomProperty Item { get; }
    public ICustomProperty Item { get; }
    public int Count { get; }
    public abstract virtual ICustomProperty get_Item(int index);
    public abstract virtual ICustomProperty get_Item(string strName);
    public abstract virtual int get_Count();
    public abstract virtual ICustomProperty Add(string strName);
    public abstract virtual bool Contains(string strName);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IWorksheetGroup {
    public IWorksheet Item { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    public abstract virtual IWorksheet get_Item(int index);
    public abstract virtual bool get_IsEmpty();
    public abstract virtual int get_Count();
    public abstract virtual int Add(ITabSheet sheet);
}
[DefaultMemberAttribute("Item")]
public interface Syncfusion.XlsIO.IWorksheets {
    public IApplication Application { get; }
    public int Count { get; }
    public IWorksheet Item { get; }
    public IWorksheet Item { get; }
    public object Parent { get; }
    public bool UseRangesCache { get; public set; }
    public abstract virtual IApplication get_Application();
    public abstract virtual int get_Count();
    public abstract virtual IWorksheet get_Item(int Index);
    public abstract virtual IWorksheet get_Item(string sheetName);
    public abstract virtual object get_Parent();
    public abstract virtual bool get_UseRangesCache();
    public abstract virtual void set_UseRangesCache(bool value);
    public abstract virtual IWorksheet AddCopy(int sheetIndex);
    public abstract virtual IWorksheet AddCopy(int sheetIndex, ExcelWorksheetCopyFlags flags);
    public abstract virtual IWorksheet AddCopy(IWorksheet sourceSheet);
    public abstract virtual IWorksheet AddCopy(IWorksheet sheet, ExcelWorksheetCopyFlags flags);
    public abstract virtual void AddCopy(IWorksheets worksheets);
    public abstract virtual void AddCopy(IWorksheets worksheets, ExcelWorksheetCopyFlags flags);
    public abstract virtual IWorksheet Create(string name);
    public abstract virtual IWorksheet Create();
    public abstract virtual void Remove(IWorksheet sheet);
    public abstract virtual void Remove(string sheetName);
    public abstract virtual void Remove(int index);
    public abstract virtual IRange FindFirst(string findValue, ExcelFindType flags);
    public abstract virtual IRange FindFirst(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public abstract virtual IRange FindFirst(double findValue, ExcelFindType flags);
    public abstract virtual IRange FindFirst(bool findValue);
    public abstract virtual IRange FindFirst(DateTime findValue);
    public abstract virtual IRange FindFirst(TimeSpan findValue);
    public abstract virtual IRange[] FindAll(string findValue, ExcelFindType flags);
    public abstract virtual IRange[] FindAll(string findValue, ExcelFindType flags, ExcelFindOptions findOptions);
    public abstract virtual IRange[] FindAll(double findValue, ExcelFindType flags);
    public abstract virtual IRange[] FindAll(bool findValue);
    public abstract virtual IRange[] FindAll(DateTime findValue);
    public abstract virtual IRange[] FindAll(TimeSpan findValue);
    public abstract virtual IWorksheet AddCopyBefore(IWorksheet toCopy);
    public abstract virtual IWorksheet AddCopyBefore(IWorksheet toCopy, IWorksheet sheetAfter);
    public abstract virtual IWorksheet AddCopyAfter(IWorksheet toCopy);
    public abstract virtual IWorksheet AddCopyAfter(IWorksheet toCopy, IWorksheet sheetBefore);
}
internal abstract class Syncfusion.XlsIO.IXlsIOHelper : object {
    internal abstract virtual SizeF MeasureStringPDF(Font font, string strValue);
    internal abstract virtual void MatrixTranslate(Matrix matrix, float x, float y, MatrixOrder matrixOrder);
    internal abstract virtual void MatrixMultiply(Matrix matrix, Matrix target, MatrixOrder matrixOrder);
    internal abstract virtual void MatrixRotate(Matrix matrix, float ang, PointF point, MatrixOrder matrixOrder);
    internal abstract virtual string GetSystemFontName(string fontName, float fontSize, FontStyle fontStyle);
    internal abstract virtual string SwitchFonts(string testString, byte charSet, string fontName);
    internal abstract virtual bool CheckUnicode(string testString);
}
public interface Syncfusion.XlsIO.IXlsIORenderer {
    public ExportImageOptions ChartRenderingOptions { get; }
    public abstract virtual void ConvertToImage(IWorksheet worksheet, int firstRow, int firstColumn, int lastRow, int lastColum, Stream outputStream);
    public abstract virtual void ConvertToImage(IRange range, Stream outputStream);
    public abstract virtual void ConvertToImage(IRange range, ExportImageOptions imageOptions, Stream outputStream);
    public abstract virtual void ConvertToImage(IWorksheet worksheet, int firstRow, int firstColumn, int lastRow, int lastColumn, ExportImageOptions imageOptions, Stream outputStream);
    public abstract virtual ExportImageOptions get_ChartRenderingOptions();
    public abstract virtual void ConvertToImage(IChart chart, Stream outputStream);
}
internal enum Syncfusion.XlsIO.JsonFormatting : Enum {
    public int value__;
    public static JsonFormatting None;
    public static JsonFormatting Indented;
}
public enum Syncfusion.XlsIO.LayoutModes : Enum {
    public int value__;
    public static LayoutModes auto;
    public static LayoutModes factor;
    public static LayoutModes edge;
}
public enum Syncfusion.XlsIO.LayoutTargets : Enum {
    public int value__;
    public static LayoutTargets auto;
    public static LayoutTargets outer;
    public static LayoutTargets inner;
}
internal enum Syncfusion.XlsIO.LineCap : Enum {
    public int value__;
    public static LineCap None;
    public static LineCap Flat;
    public static LineCap Square;
    public static LineCap Round;
}
internal class Syncfusion.XlsIO.LinkerSafeAttribute : Attribute {
}
public enum Syncfusion.XlsIO.MeasureUnits : Enum {
    public int value__;
    public static MeasureUnits Display;
    public static MeasureUnits Document;
    public static MeasureUnits Inch;
    public static MeasureUnits Millimeter;
    public static MeasureUnits Centimeter;
    public static MeasureUnits Pixel;
    public static MeasureUnits Point;
    public static MeasureUnits EMU;
}
internal class Syncfusion.XlsIO.NamespaceDoc : object {
}
internal enum Syncfusion.XlsIO.ODF.Base.AfterBreak : Enum {
    public int value__;
    public static AfterBreak auto;
    public static AfterBreak column;
    public static AfterBreak page;
}
internal enum Syncfusion.XlsIO.ODF.Base.BeforeBreak : Enum {
    public int value__;
    public static BeforeBreak auto;
    public static BeforeBreak column;
    public static BeforeBreak page;
}
internal enum Syncfusion.XlsIO.ODF.Base.BorderLineStyle : Enum {
    public int value__;
    public static BorderLineStyle none;
    public static BorderLineStyle solid;
    public static BorderLineStyle Double;
    public static BorderLineStyle dotted;
    public static BorderLineStyle dashed;
    public static BorderLineStyle longdash;
    public static BorderLineStyle dotdash;
    public static BorderLineStyle dotdotdash;
    public static BorderLineStyle wave;
}
internal enum Syncfusion.XlsIO.ODF.Base.Calender : Enum {
    public int value__;
    public static Calender gregorian;
    public static Calender gengou;
    public static Calender ROC;
    public static Calender hanja_yoil;
    public static Calender hanja;
    public static Calender hijri;
    public static Calender jewish;
    public static Calender buddhist;
}
internal enum Syncfusion.XlsIO.ODF.Base.CaptionAngleType : Enum {
    public int value__;
    public static CaptionAngleType Fixed;
    public static CaptionAngleType Free;
}
internal enum Syncfusion.XlsIO.ODF.Base.CaptionEscapeDirection : Enum {
    public int value__;
    public static CaptionEscapeDirection Horizontal;
    public static CaptionEscapeDirection Vertical;
    public static CaptionEscapeDirection Auto;
}
internal enum Syncfusion.XlsIO.ODF.Base.CaptionType : Enum {
    public int value__;
    public static CaptionType StraightLine;
    public static CaptionType AngledLine;
    public static CaptionType AngledConnectorLine;
}
internal enum Syncfusion.XlsIO.ODF.Base.CellValueType : Enum {
    public int value__;
    public static CellValueType Float;
    public static CellValueType Percentage;
    public static CellValueType Currency;
    public static CellValueType Date;
    public static CellValueType Time;
    public static CellValueType Boolean;
    public static CellValueType String;
}
internal enum Syncfusion.XlsIO.ODF.Base.ColorMode : Enum {
    public int value__;
    public static ColorMode Greyscale;
    public static ColorMode Mono;
    public static ColorMode Watermark;
}
internal enum Syncfusion.XlsIO.ODF.Base.Combine : Enum {
    public int value__;
    public static Combine none;
    public static Combine letters;
    public static Combine lines;
}
internal enum Syncfusion.XlsIO.ODF.Base.DrawAspect : Enum {
    public int value__;
    public static DrawAspect Content;
    public static DrawAspect Thumbnail;
    public static DrawAspect Icon;
    public static DrawAspect Printview;
}
internal enum Syncfusion.XlsIO.ODF.Base.Emphasize : Enum {
    public int value__;
    public static Emphasize none;
    public static Emphasize accent;
    public static Emphasize dot;
    public static Emphasize circle;
    public static Emphasize disc;
    public static Emphasize above;
    public static Emphasize below;
}
internal enum Syncfusion.XlsIO.ODF.Base.FillRule : Enum {
    public int value__;
    public static FillRule NonZero;
    public static FillRule EvenOdd;
}
internal enum Syncfusion.XlsIO.ODF.Base.FillType : Enum {
    public int value__;
    public static FillType None;
    public static FillType Solid;
    public static FillType Bitmap;
    public static FillType Gradient;
    public static FillType Hatch;
}
internal enum Syncfusion.XlsIO.ODF.Base.FontFamilyGeneric : Enum {
    public int value__;
    public static FontFamilyGeneric System;
    public static FontFamilyGeneric Roman;
    public static FontFamilyGeneric Swiss;
    public static FontFamilyGeneric Modern;
    public static FontFamilyGeneric Script;
    public static FontFamilyGeneric Decorative;
}
internal enum Syncfusion.XlsIO.ODF.Base.FontPitch : Enum {
    public int value__;
    public static FontPitch none;
    public static FontPitch Fixed;
    public static FontPitch Variable;
}
internal enum Syncfusion.XlsIO.ODF.Base.FontRelief : Enum {
    public int value__;
    public static FontRelief none;
    public static FontRelief embossed;
    public static FontRelief engraved;
}
internal enum Syncfusion.XlsIO.ODF.Base.FontStretch : Enum {
    public int value__;
    public static FontStretch Normal;
    public static FontStretch UltraCondensed;
    public static FontStretch ExtraCondensed;
    public static FontStretch Condensed;
    public static FontStretch SemiCondensed;
    public static FontStretch SemiExpanded;
    public static FontStretch Expanded;
    public static FontStretch ExtraExpanded;
    public static FontStretch UltraExpanded;
}
internal enum Syncfusion.XlsIO.ODF.Base.FontVariant : Enum {
    public int value__;
    public static FontVariant normal;
    public static FontVariant smallcaps;
}
internal enum Syncfusion.XlsIO.ODF.Base.FontWeight : Enum {
    public int value__;
    public static FontWeight normal;
    public static FontWeight bold;
}
internal enum Syncfusion.XlsIO.ODF.Base.HoriAlignment : Enum {
    public byte value__;
    public static HoriAlignment Left;
    public static HoriAlignment Center;
    public static HoriAlignment Right;
    public static HoriAlignment Justify;
    public static HoriAlignment Distribute;
    public static HoriAlignment JustifyMedium;
    public static HoriAlignment JustifyHigh;
    public static HoriAlignment JustifyLow;
    public static HoriAlignment ThaiJustify;
}
internal enum Syncfusion.XlsIO.ODF.Base.HorizontalAlign : Enum {
    public int value__;
    public static HorizontalAlign Left;
    public static HorizontalAlign Center;
    public static HorizontalAlign Right;
    public static HorizontalAlign Margin;
}
internal enum Syncfusion.XlsIO.ODF.Base.HyphenationKeep : Enum {
    public int value__;
    public static HyphenationKeep auto;
    public static HyphenationKeep page;
}
internal enum Syncfusion.XlsIO.ODF.Base.KeepTogether : Enum {
    public int value__;
    public static KeepTogether auto;
    public static KeepTogether always;
}
internal enum Syncfusion.XlsIO.ODF.Base.LineBreak : Enum {
    public int value__;
    public static LineBreak normal;
    public static LineBreak strict;
}
internal enum Syncfusion.XlsIO.ODF.Base.LineMode : Enum {
    public int value__;
    public static LineMode continuous;
    public static LineMode skipwhitespace;
}
internal enum Syncfusion.XlsIO.ODF.Base.LineType : Enum {
    public int value__;
    public static LineType none;
    public static LineType single;
    public static LineType Double;
}
internal enum Syncfusion.XlsIO.ODF.Base.LineWidth : Enum {
    public int value__;
    public static LineWidth auto;
    public static LineWidth normal;
    public static LineWidth bold;
    public static LineWidth thin;
    public static LineWidth dash;
    public static LineWidth medium;
    public static LineWidth thick;
}
internal enum Syncfusion.XlsIO.ODF.Base.ListNumberFormat : Enum {
    public int value__;
    public static ListNumberFormat Decimal;
    public static ListNumberFormat LowerLetter;
    public static ListNumberFormat UpperLetter;
    public static ListNumberFormat LowerRoman;
    public static ListNumberFormat UpperRoman;
    public static ListNumberFormat Bullet;
}
internal enum Syncfusion.XlsIO.ODF.Base.MeasureAlign : Enum {
    public int value__;
    public static MeasureAlign Automatic;
    public static MeasureAlign LeftOutside;
    public static MeasureAlign Inside;
    public static MeasureAlign RightOutside;
}
internal enum Syncfusion.XlsIO.ODF.Base.MeasureVerticalAlign : Enum {
    public int value__;
    public static MeasureVerticalAlign Automatic;
    public static MeasureVerticalAlign Above;
    public static MeasureVerticalAlign Below;
    public static MeasureVerticalAlign Center;
}
internal enum Syncfusion.XlsIO.ODF.Base.OBreakType : Enum {
    public int value__;
    public static OBreakType PageBreak;
    public static OBreakType ColumnBreak;
    public static OBreakType LineBreak;
}
internal enum Syncfusion.XlsIO.ODF.Base.ODFFontFamily : Enum {
    public int value__;
    public static ODFFontFamily Paragraph;
    public static ODFFontFamily Text;
    public static ODFFontFamily Table;
    public static ODFFontFamily Table_Column;
    public static ODFFontFamily Table_Row;
    public static ODFFontFamily Table_Cell;
    public static ODFFontFamily Section;
    public static ODFFontFamily Ruby;
    public static ODFFontFamily Graphic;
    public static ODFFontFamily Presentation;
    public static ODFFontFamily DrawingPage;
    public static ODFFontFamily Chart;
}
internal enum Syncfusion.XlsIO.ODF.Base.ODFFontStyle : Enum {
    public int value__;
    public static ODFFontStyle normal;
    public static ODFFontStyle italic;
    public static ODFFontStyle oblique;
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.Anchor : Xlink {
    private string m_name;
    private string m_title;
    private string m_styleName;
    internal string Name { get; internal set; }
    internal string Title { get; internal set; }
    internal string StyleName { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Title();
    internal void set_Title(string value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.Annotation : object {
    private string m_captionPointX;
    private string m_captionPointY;
    private string m_classNames;
    private int m_cornerRadius;
    private int m_drawId;
    private string m_layer;
    private string m_drawName;
    private string m_styleName;
    private string m_textStyleName;
    private string m_transform;
    private string m_zIndex;
    private bool m_display;
    private string m_name;
    private float m_height;
    private float m_width;
    private float m_x;
    private float m_y;
    private string m_endCellAddr;
    private string m_endX;
    private string m_endY;
    private int m_anchorPageNumber;
    private string m_anchorType;
    private int m_id;
    private string m_creator;
    private DateTime m_date;
    private string m_dateString;
    private string m_list;
    private List`1<OParagraph> m_paras;
    internal string CaptionPointX { get; internal set; }
    internal string CaptionPointY { get; internal set; }
    internal string ClassNames { get; internal set; }
    internal int CornerRadius { get; internal set; }
    internal int DrawId { get; internal set; }
    internal string Layer { get; internal set; }
    internal string DrawName { get; internal set; }
    internal string StyleName { get; internal set; }
    internal string TextStyleName { get; internal set; }
    internal string Transform { get; internal set; }
    internal string ZIndex { get; internal set; }
    internal bool Display { get; internal set; }
    internal string Name { get; internal set; }
    internal float Height { get; internal set; }
    internal float Width { get; internal set; }
    internal float X { get; internal set; }
    internal float Y { get; internal set; }
    internal string EndCellAddr { get; internal set; }
    internal string EndX { get; internal set; }
    internal string EndY { get; internal set; }
    internal int AnchorPageNumber { get; internal set; }
    internal string AnchorType { get; internal set; }
    internal int Id { get; internal set; }
    public string Creator { get; public set; }
    public DateTime Date { get; public set; }
    public string DateString { get; public set; }
    public string List { get; public set; }
    internal List`1<OParagraph> Paras { get; internal set; }
    internal string get_CaptionPointX();
    internal void set_CaptionPointX(string value);
    internal string get_CaptionPointY();
    internal void set_CaptionPointY(string value);
    internal string get_ClassNames();
    internal void set_ClassNames(string value);
    internal int get_CornerRadius();
    internal void set_CornerRadius(int value);
    internal int get_DrawId();
    internal void set_DrawId(int value);
    internal string get_Layer();
    internal void set_Layer(string value);
    internal string get_DrawName();
    internal void set_DrawName(string value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal string get_TextStyleName();
    internal void set_TextStyleName(string value);
    internal string get_Transform();
    internal void set_Transform(string value);
    internal string get_ZIndex();
    internal void set_ZIndex(string value);
    internal bool get_Display();
    internal void set_Display(bool value);
    internal string get_Name();
    internal void set_Name(string value);
    internal float get_Height();
    internal void set_Height(float value);
    internal float get_Width();
    internal void set_Width(float value);
    internal float get_X();
    internal void set_X(float value);
    internal float get_Y();
    internal void set_Y(float value);
    internal string get_EndCellAddr();
    internal void set_EndCellAddr(string value);
    internal string get_EndX();
    internal void set_EndX(string value);
    internal string get_EndY();
    internal void set_EndY(string value);
    internal int get_AnchorPageNumber();
    internal void set_AnchorPageNumber(int value);
    internal string get_AnchorType();
    internal void set_AnchorType(string value);
    internal int get_Id();
    internal void set_Id(int value);
    public string get_Creator();
    public void set_Creator(string value);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public string get_DateString();
    public void set_DateString(string value);
    public string get_List();
    public void set_List(string value);
    internal List`1<OParagraph> get_Paras();
    internal void set_Paras(List`1<OParagraph> value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.AutomaticStyles : CommonStyles {
    private PageLayoutCollection m_pageLayout;
    internal PageLayoutCollection PageLayoutCollection { get; internal set; }
    internal PageLayoutCollection get_PageLayoutCollection();
    internal void set_PageLayoutCollection(PageLayoutCollection value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.BooleanStyle : DataStyle {
    private bool m_boolean;
    internal bool Boolean { get; internal set; }
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.BorderProperties : object {
    private ODFBorder m_border;
    private ODFBorder m_borderTop;
    private ODFBorder m_borderBottom;
    private ODFBorder m_borderLeft;
    private ODFBorder m_borderRight;
    private ODFBorder m_diagonalLeft;
    private ODFBorder m_diagonalRight;
    internal byte borderFlags;
    internal static ushort BorderKey;
    internal static ushort BorderTopKey;
    internal static ushort BorderBottomKey;
    internal static ushort BorderLeftKey;
    internal static ushort BorderRightKey;
    internal ODFBorder Border { get; internal set; }
    internal ODFBorder BorderTop { get; internal set; }
    internal ODFBorder BorderBottom { get; internal set; }
    internal ODFBorder BorderLeft { get; internal set; }
    internal ODFBorder BorderRight { get; internal set; }
    internal ODFBorder DiagonalLeft { get; internal set; }
    internal ODFBorder DiagonalRight { get; internal set; }
    internal ODFBorder get_Border();
    internal void set_Border(ODFBorder value);
    internal ODFBorder get_BorderTop();
    internal void set_BorderTop(ODFBorder value);
    internal ODFBorder get_BorderBottom();
    internal void set_BorderBottom(ODFBorder value);
    internal ODFBorder get_BorderLeft();
    internal void set_BorderLeft(ODFBorder value);
    internal ODFBorder get_BorderRight();
    internal void set_BorderRight(ODFBorder value);
    internal ODFBorder get_DiagonalLeft();
    internal void set_DiagonalLeft(ODFBorder value);
    internal ODFBorder get_DiagonalRight();
    internal void set_DiagonalRight(ODFBorder value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.CalculationSettings : object {
    private bool m_useRegularExpressions;
    internal bool UseRegularExpressions { get; internal set; }
    internal bool get_UseRegularExpressions();
    internal void set_UseRegularExpressions(bool value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.CenterHeader : HeaderSection {
    internal List`1<string> MappedValues;
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.CollectionBase`1 : object {
    internal static string GenerateDefaultName(string strStart, ICollection[] arrCollections);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.CommonStyles : object {
    private List`1<NumberStyle> m_numbeStyles;
    private List`1<CurrencyStyle> m_currencyStyles;
    private List`1<PercentageStyle> m_percentageStyles;
    private List`1<DateStyle> m_dateStyles;
    private List`1<TimeStyle> m_timeStyles;
    private List`1<BooleanStyle> m_booleanStyles;
    private List`1<TextStyle> m_textStyles;
    private List`1<DefaultStyle> m_defaultStyles;
    private ODFStyleCollection m_odfStyles;
    internal List`1<NumberStyle> NumbeStyles { get; internal set; }
    internal List`1<CurrencyStyle> CurrencyStyles { get; internal set; }
    internal List`1<PercentageStyle> PercentageStyles { get; internal set; }
    internal List`1<DateStyle> DateStyles { get; internal set; }
    internal List`1<TimeStyle> TimeStyles { get; internal set; }
    internal List`1<BooleanStyle> BooleanStyles { get; internal set; }
    internal List`1<TextStyle> TextStyles { get; internal set; }
    internal List`1<DefaultStyle> DefaultStyles { get; internal set; }
    internal ODFStyleCollection OdfStyles { get; internal set; }
    internal List`1<NumberStyle> get_NumbeStyles();
    internal void set_NumbeStyles(List`1<NumberStyle> value);
    internal List`1<CurrencyStyle> get_CurrencyStyles();
    internal void set_CurrencyStyles(List`1<CurrencyStyle> value);
    internal List`1<PercentageStyle> get_PercentageStyles();
    internal void set_PercentageStyles(List`1<PercentageStyle> value);
    internal List`1<DateStyle> get_DateStyles();
    internal void set_DateStyles(List`1<DateStyle> value);
    internal List`1<TimeStyle> get_TimeStyles();
    internal void set_TimeStyles(List`1<TimeStyle> value);
    internal List`1<BooleanStyle> get_BooleanStyles();
    internal void set_BooleanStyles(List`1<BooleanStyle> value);
    internal List`1<TextStyle> get_TextStyles();
    internal void set_TextStyles(List`1<TextStyle> value);
    internal List`1<DefaultStyle> get_DefaultStyles();
    internal void set_DefaultStyles(List`1<DefaultStyle> value);
    internal ODFStyleCollection get_OdfStyles();
    internal void set_OdfStyles(ODFStyleCollection value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.CommonTableParaProperties : MarginBorderProperties {
    private string m_backgroundColor;
    private KeepTogether m_keepWithNext;
    private int m_pageNumber;
    private AfterBreak m_afterBreak;
    private BeforeBreak m_beforeBreak;
    private string m_shadowType;
    private WritingMode m_writingMode;
    internal byte m_CommonstyleFlags;
    private static byte WritingModeKey;
    private static byte BeforeBreakKey;
    private static byte AfterBreakKey;
    private static byte KeepWithNextKey;
    private static byte ShadowTypeKey;
    private static byte PageNumberKey;
    private static byte BackgroundColorKey;
    internal WritingMode WritingMode { get; internal set; }
    internal BeforeBreak BeforeBreak { get; internal set; }
    internal AfterBreak AfterBreak { get; internal set; }
    internal KeepTogether KeepWithNext { get; internal set; }
    internal string ShadowType { get; internal set; }
    internal int PageNumber { get; internal set; }
    internal string BackgroundColor { get; internal set; }
    internal WritingMode get_WritingMode();
    internal void set_WritingMode(WritingMode value);
    internal BeforeBreak get_BeforeBreak();
    internal void set_BeforeBreak(BeforeBreak value);
    internal AfterBreak get_AfterBreak();
    internal void set_AfterBreak(AfterBreak value);
    internal KeepTogether get_KeepWithNext();
    internal void set_KeepWithNext(KeepTogether value);
    internal string get_ShadowType();
    internal void set_ShadowType(string value);
    internal int get_PageNumber();
    internal void set_PageNumber(int value);
    internal string get_BackgroundColor();
    internal void set_BackgroundColor(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.CommonType : object {
    private int m_decimalPlaces;
    private bool m_grouping;
    private int m_minIntegerDigits;
    internal byte nFormatFlags;
    internal static byte DecimalPlacesKey;
    internal static byte GroupingKey;
    internal static byte MinIntegerDigitsKey;
    internal int DecimalPlaces { get; internal set; }
    internal bool Grouping { get; internal set; }
    internal int MinIntegerDigits { get; internal set; }
    internal int get_DecimalPlaces();
    internal void set_DecimalPlaces(int value);
    internal bool get_Grouping();
    internal void set_Grouping(bool value);
    internal int get_MinIntegerDigits();
    internal void set_MinIntegerDigits(int value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.CurrencyStyle : DataStyle {
    private CurrencySymbol m_currencySymbol;
    private NumberType m_number;
    private bool m_automaticOrder;
    internal CurrencySymbol CurrencySymbol { get; internal set; }
    internal NumberType Number { get; internal set; }
    internal bool AutomaticOrder { get; internal set; }
    internal CurrencySymbol get_CurrencySymbol();
    internal void set_CurrencySymbol(CurrencySymbol value);
    internal NumberType get_Number();
    internal void set_Number(NumberType value);
    internal bool get_AutomaticOrder();
    internal void set_AutomaticOrder(bool value);
    public virtual bool Equals(object obj);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.CurrencySymbol : LanguageStyle {
    private string m_data;
    internal string Data { get; internal set; }
    internal string get_Data();
    internal void set_Data(string value);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DataStyle : NumberFormat {
    private string m_name;
    private string m_displayName;
    private bool m_volatile;
    private List`1<string> m_text;
    private List`1<MapStyle> m_map;
    private TextProperties m_textProperties;
    private bool m_hasSections;
    internal string Name { get; internal set; }
    internal string DisplayName { get; internal set; }
    internal bool Volatile { get; internal set; }
    internal List`1<string> Text { get; internal set; }
    internal List`1<MapStyle> Map { get; internal set; }
    internal TextProperties TextProperties { get; internal set; }
    internal bool HasSections { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_DisplayName();
    internal void set_DisplayName(string value);
    internal bool get_Volatile();
    internal void set_Volatile(bool value);
    internal List`1<string> get_Text();
    internal void set_Text(List`1<string> value);
    internal List`1<MapStyle> get_Map();
    internal void set_Map(List`1<MapStyle> value);
    internal TextProperties get_TextProperties();
    internal void set_TextProperties(TextProperties value);
    internal bool get_HasSections();
    internal void set_HasSections(bool value);
    internal void Dispose1();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DataStyleCollection : object {
    internal List`1<string> FillImage;
    internal List`1<string> Gradient;
    internal List`1<string> Hatch;
    internal List`1<string> Marker;
    internal List`1<string> Opacity;
    internal List`1<string> StrokeDash;
    internal List`1<BooleanStyle> BooleanStyles;
    internal List`1<NumberStyle> NumberStyles;
    internal List`1<PercentageStyle> PercentageStyles;
    internal List`1<CurrencyStyle> CurrencyStyles;
    internal List`1<DateStyle> DateStyles;
    internal List`1<TimeStyle> TimeStyles;
    internal List`1<TextStyle> ListStyles;
    internal List`1<string> DefaultSyles;
    internal List`1<string> DefaultPageLayout;
    internal List`1<string> Styles;
    internal List`1<string> LinearGradients;
    internal List`1<string> RadialGradients;
    internal List`1<string> TableTemplate;
    internal List`1<string> BibiliographyConfiguration;
    internal List`1<string> LineNumberingConfiguration;
    internal List`1<string> ListStyles1;
    internal List`1<string> Notes;
    internal List`1<string> OutlineStyles;
    internal void LoadStyles();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DateBase : TimeBase {
    private string m_calender;
    internal string Calender { get; internal set; }
    internal string get_Calender();
    internal void set_Calender(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DateStyle : TimeStyle {
    private bool m_automaticOrder;
    private DateBase m_day;
    private DateBase m_dayOfWeek;
    private DateBase m_era;
    private Month m_month;
    private DateBase m_quarter;
    private DateBase m_weekOfYear;
    private DateBase m_year;
    internal bool AutomaticOrder { get; internal set; }
    internal DateBase Day { get; internal set; }
    internal DateBase DayOfWeek { get; internal set; }
    internal DateBase Era { get; internal set; }
    internal Month Month { get; internal set; }
    internal DateBase Quarter { get; internal set; }
    internal DateBase WeekOfYear { get; internal set; }
    internal DateBase Year { get; internal set; }
    internal bool get_AutomaticOrder();
    internal void set_AutomaticOrder(bool value);
    internal DateBase get_Day();
    internal void set_Day(DateBase value);
    internal DateBase get_DayOfWeek();
    internal void set_DayOfWeek(DateBase value);
    internal DateBase get_Era();
    internal void set_Era(DateBase value);
    internal Month get_Month();
    internal void set_Month(Month value);
    internal DateBase get_Quarter();
    internal void set_Quarter(DateBase value);
    internal DateBase get_WeekOfYear();
    internal void set_WeekOfYear(DateBase value);
    internal DateBase get_Year();
    internal void set_Year(DateBase value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DefaultPageLayout : object {
    private HeaderFooterStyle m_headerStyle;
    private HeaderFooterStyle m_footerStyle;
    private PageLayoutProperties m_pageLayoutProperties;
    internal HeaderFooterStyle HeaderStyle { get; internal set; }
    internal HeaderFooterStyle FooterStyle { get; internal set; }
    internal PageLayoutProperties PageLayoutProperties { get; internal set; }
    internal HeaderFooterStyle get_HeaderStyle();
    internal void set_HeaderStyle(HeaderFooterStyle value);
    internal HeaderFooterStyle get_FooterStyle();
    internal void set_FooterStyle(HeaderFooterStyle value);
    internal PageLayoutProperties get_PageLayoutProperties();
    internal void set_PageLayoutProperties(PageLayoutProperties value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DefaultStyle : object {
    private ODFFontFamily m_family;
    private MapStyle m_map;
    private ODFParagraphProperties m_paragraphProperties;
    private OTableCellProperties m_tableCellProperties;
    private OTableColumnProperties m_tableColumnProperties;
    private OTableProperties m_tableProperties;
    private OTableRowProperties m_tableRowProperties;
    private TextProperties m_textProperties;
    private SectionProperties m_sectionProperties;
    private GraphicProperties m_graphicProperties;
    private string m_name;
    internal byte StylePropFlag;
    internal static byte MapKey;
    internal static byte ParagraphPropertiesKey;
    internal static byte TableCellPropertiesKey;
    internal static byte TableColumnPropertiesKey;
    internal static byte TablePropertiesKey;
    internal static byte TableRowPropertiesKey;
    internal static byte TextPropertiesKey;
    internal static byte SectionPropertykey;
    internal string Name { get; internal set; }
    internal ODFFontFamily Family { get; internal set; }
    internal MapStyle Map { get; internal set; }
    internal ODFParagraphProperties ParagraphProperties { get; internal set; }
    internal SectionProperties ODFSectionProperties { get; internal set; }
    internal OTableCellProperties TableCellProperties { get; internal set; }
    internal OTableColumnProperties TableColumnProperties { get; internal set; }
    internal OTableProperties TableProperties { get; internal set; }
    internal OTableRowProperties TableRowProperties { get; internal set; }
    internal TextProperties Textproperties { get; internal set; }
    internal GraphicProperties GraphicProperties { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal ODFFontFamily get_Family();
    internal void set_Family(ODFFontFamily value);
    internal MapStyle get_Map();
    internal void set_Map(MapStyle value);
    internal ODFParagraphProperties get_ParagraphProperties();
    internal void set_ParagraphProperties(ODFParagraphProperties value);
    internal SectionProperties get_ODFSectionProperties();
    internal void set_ODFSectionProperties(SectionProperties value);
    internal OTableCellProperties get_TableCellProperties();
    internal void set_TableCellProperties(OTableCellProperties value);
    internal OTableColumnProperties get_TableColumnProperties();
    internal void set_TableColumnProperties(OTableColumnProperties value);
    internal OTableProperties get_TableProperties();
    internal void set_TableProperties(OTableProperties value);
    internal OTableRowProperties get_TableRowProperties();
    internal void set_TableRowProperties(OTableRowProperties value);
    internal TextProperties get_Textproperties();
    internal void set_Textproperties(TextProperties value);
    internal GraphicProperties get_GraphicProperties();
    internal void set_GraphicProperties(GraphicProperties value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DefaultStyleCollection : CollectionBase`1<PageLayout> {
    private Dictionary`2<string, DefaultStyle> m_defaultStyles;
    internal Dictionary`2<string, DefaultStyle> DefaultStyles { get; internal set; }
    internal Dictionary`2<string, DefaultStyle> get_DefaultStyles();
    internal void set_DefaultStyles(Dictionary`2<string, DefaultStyle> value);
    internal string Add(DefaultStyle style);
    private string ContainsValue(DefaultStyle style);
    private string MapName(DefaultStyle style);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DocumentContent : object {
    private List`1<FontFace> m_fontFaceDecls;
    private AutomaticStyles m_automaticStyles;
    private OBody m_body;
    internal List`1<FontFace> FontFaceDecls { get; internal set; }
    internal AutomaticStyles AutomaticStyles { get; internal set; }
    internal OBody Body { get; internal set; }
    internal List`1<FontFace> get_FontFaceDecls();
    internal void set_FontFaceDecls(List`1<FontFace> value);
    internal AutomaticStyles get_AutomaticStyles();
    internal void set_AutomaticStyles(AutomaticStyles value);
    internal OBody get_Body();
    internal void set_Body(OBody value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.DocumentStyles : object {
    private List`1<FontFace> m_fontFaceDecls;
    private CommonStyles m_commmonStyles;
    private AutomaticStyles m_autoStyles;
    private MasterPageCollection m_masterStyles;
    internal List`1<FontFace> FontFaceDecls { get; internal set; }
    internal CommonStyles CommmonStyles { get; internal set; }
    internal AutomaticStyles AutoStyles { get; internal set; }
    internal MasterPageCollection MasterStyles { get; internal set; }
    internal List`1<FontFace> get_FontFaceDecls();
    internal void set_FontFaceDecls(List`1<FontFace> value);
    internal CommonStyles get_CommmonStyles();
    internal void set_CommmonStyles(CommonStyles value);
    internal AutomaticStyles get_AutoStyles();
    internal void set_AutoStyles(AutomaticStyles value);
    internal MasterPageCollection get_MasterStyles();
    internal void set_MasterStyles(MasterPageCollection value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.EmbeddedTextType : object {
    private int m_position;
    private string m_content;
    internal int Position { get; internal set; }
    internal string Content { get; internal set; }
    internal int get_Position();
    internal void set_Position(int value);
    internal string get_Content();
    internal void set_Content(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.FontFace : object {
    private FontFamilyGeneric m_fontfamilyGeneric;
    private FontPitch m_fontPitch;
    private string m_name;
    internal FontFamilyGeneric FontFamilyGeneric { get; internal set; }
    internal FontPitch FontPitch { get; internal set; }
    internal string Name { get; internal set; }
    internal FontFace(string name);
    internal FontFamilyGeneric get_FontFamilyGeneric();
    internal void set_FontFamilyGeneric(FontFamilyGeneric value);
    internal FontPitch get_FontPitch();
    internal void set_FontPitch(FontPitch value);
    internal string get_Name();
    internal void set_Name(string value);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.FractionType : CommonType {
    private int m_minDenominatorDigits;
    private int m_minNumeratorDigits;
    private int m_denominatorValue;
    internal int MinDenominatorDigits { get; internal set; }
    internal int MinNumeratorDigits { get; internal set; }
    internal int DenominatorValue { get; internal set; }
    internal int get_MinDenominatorDigits();
    internal void set_MinDenominatorDigits(int value);
    internal int get_MinNumeratorDigits();
    internal void set_MinNumeratorDigits(int value);
    internal int get_DenominatorValue();
    internal void set_DenominatorValue(int value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.GraphicProperties : object {
    private bool m_autoGrowHeight;
    private bool m_autoGrowWidth;
    private string m_blue;
    private UInt32 m_captionAngle;
    private CaptionAngleType m_captionAngleType;
    private string m_captionEscape;
    private CaptionEscapeDirection m_captionEscapeDirection;
    private bool m_captionFitLineLength;
    private string m_captionGap;
    private string m_captionLineLength;
    private CaptionType m_captionType;
    private bool m_colorInversion;
    private ColorMode m_colorMode;
    private string m_costrast;
    private UInt32 m_decimalPlaces;
    private DrawAspect m_drawAspect;
    private string m_endGuide;
    private string m_endLineSpacingHorizontal;
    private string m_endLineSpacingVertical;
    private FillType m_fill;
    private Color m_fillColor;
    private string m_fillGradientName;
    private string m_fillHatchName;
    private bool m_fillHatchSolid;
    private string m_fillImageHeight;
    private string m_fillImageName;
    private RefPoint m_fillImageRefPoint;
    private string m_fillImageRefPointX;
    private string m_fillImageRefPointY;
    private string m_fillImageWidth;
    private bool m_fitToContour;
    private bool m_fitToSize;
    private bool m_frameDisplayBorder;
    private bool m_frameDisplayScrollbar;
    private string m_frameMarginHorizontal;
    private string m_frameMarginVertical;
    private string m_gamma;
    private int m_gradientStepCount;
    private string m_green;
    private string m_guideDistance;
    private string m_guideOverhang;
    private int m_imageOpacity;
    private int m_lineDistance;
    private int m_luminance;
    private string m_markerEnd;
    private bool m_markerEndCenter;
    private string m_markerEndWidth;
    private string m_markerStart;
    private bool m_markerStartCenter;
    private string m_markerStartWidth;
    private string m_measureAlign;
    private string m_measureVerticalAlign;
    private UInt32 m_oleDrawAspect;
    private string m_opacity;
    private string m_opacityName;
    private bool m_parallel;
    private bool m_placing;
    private string m_red;
    private string m_secondaryFillColor;
    private Shadow m_drawShadow;
    private string m_shadowColor;
    private string m_shadowOffsetX;
    private string m_shadowOffsetY;
    private string m_shadowOpacity;
    private bool m_showUnit;
    private string m_startGuide;
    private string m_startLineSpacingHorizontal;
    private string m_startLineSpacingVertical;
    private Stroke m_stroke;
    private string m_strokeDash;
    private string m_strokeDashNames;
    private StrokeLineJoin m_strokeLineJoin;
    private string m_symbolColor;
    private string m_textAreaHorizontalAlign;
    private string m_textAreaVerticalAlign;
    private string m_tileRepeatOffset;
    private Unit m_unit;
    private string m_visibleAreaHeight;
    private string m_visibleAreaWidth;
    private string m_visibleAreaTop;
    private string m_visibleAreaLeft;
    private string m_wrapInfluenceOnPosition;
    private FillRule m_fillRule;
    private string m_height;
    private Color m_strokeColor;
    private StrokeLineCap m_strokeLineCap;
    private string m_strokeOpacity;
    private string m_strokeWidth;
    private string m_width;
    private int m_x;
    private int m_y;
    internal bool AutoGrowHeight { get; internal set; }
    internal bool AutoGrowWidth { get; internal set; }
    internal string Blue { get; internal set; }
    internal UInt32 CaptionAngle { get; internal set; }
    internal CaptionAngleType CaptionAngleType { get; internal set; }
    internal string CaptionEscape { get; internal set; }
    internal CaptionEscapeDirection CaptionEscapeDirection { get; internal set; }
    internal bool CaptionFitLineLength { get; internal set; }
    internal string CaptionGap { get; internal set; }
    internal string CaptionLineLength { get; internal set; }
    internal CaptionType CaptionType { get; internal set; }
    internal bool ColorInversion { get; internal set; }
    internal ColorMode ColorMode { get; internal set; }
    internal string Costrast { get; internal set; }
    internal UInt32 DecimalPlaces { get; internal set; }
    internal DrawAspect DrawAspect { get; internal set; }
    internal string EndGuide { get; internal set; }
    internal string EndLineSpacingHorizontal { get; internal set; }
    internal string EndLineSpacingVertical { get; internal set; }
    internal FillType Fill { get; internal set; }
    internal Color FillColor { get; internal set; }
    internal string FillGradientName { get; internal set; }
    internal string FillHatchName { get; internal set; }
    internal bool FillHatchSolid { get; internal set; }
    internal string FillImageHeight { get; internal set; }
    internal string FillImageName { get; internal set; }
    internal RefPoint FillImageRefPoint { get; internal set; }
    internal string FillImageRefPointX { get; internal set; }
    internal string FillImageRefPointY { get; internal set; }
    internal string FillImageWidth { get; internal set; }
    internal bool FitToContour { get; internal set; }
    internal bool FitToSize { get; internal set; }
    internal bool FrameDisplayBorder { get; internal set; }
    internal bool FrameDisplayScrollbar { get; internal set; }
    internal string FrameMarginHorizontal { get; internal set; }
    internal string FrameMarginVertical { get; internal set; }
    internal string Gamma { get; internal set; }
    internal int GradientStepCount { get; internal set; }
    internal string Green { get; internal set; }
    internal string GuideDistance { get; internal set; }
    internal string GuideOverhang { get; internal set; }
    internal int ImageOpacity { get; internal set; }
    internal int LineDistance { get; internal set; }
    internal int Luminance { get; internal set; }
    internal string MarkerEnd { get; internal set; }
    internal bool MarkerEndCenter { get; internal set; }
    internal string MarkerEndWidth { get; internal set; }
    internal string MarkerStart { get; internal set; }
    internal bool MarkerStartCenter { get; internal set; }
    internal string MarkerStartWidth { get; internal set; }
    internal string MeasureAlign { get; internal set; }
    internal string MeasureVerticalAlign { get; internal set; }
    internal UInt32 OleDrawAspect { get; internal set; }
    internal string Opacity { get; internal set; }
    internal string OpacityName { get; internal set; }
    internal bool Parallel { get; internal set; }
    internal bool Placing { get; internal set; }
    internal string Red { get; internal set; }
    internal string SecondaryFillCOlor { get; internal set; }
    internal Shadow DrawShadow { get; internal set; }
    internal string ShadowColor { get; internal set; }
    internal string ShadowOffsetX { get; internal set; }
    internal string ShadowOffsetY { get; internal set; }
    internal string ShadowOpacity { get; internal set; }
    internal bool ShowUnit { get; internal set; }
    internal string StartGuide { get; internal set; }
    internal string StartLineSpacingHorizontal { get; internal set; }
    internal string StartLineSpacingVertical { get; internal set; }
    internal Stroke Stroke { get; internal set; }
    internal string StrokeDash { get; internal set; }
    internal string StrokeDashNames { get; internal set; }
    internal StrokeLineJoin StrokeLineJoin { get; internal set; }
    internal string SymbolColor { get; internal set; }
    internal string TextAreaHorizontalAlign { get; internal set; }
    internal string TextAreaVerticalAlign { get; internal set; }
    internal string TitleRepeatOffset { get; internal set; }
    internal Unit Unit { get; internal set; }
    internal string VisibleAreaHeight { get; internal set; }
    internal string VisibleAreaWidth { get; internal set; }
    internal string VisibleAreaTop { get; internal set; }
    internal string VisibleAreaLeft { get; internal set; }
    internal string WrapInfluenceOnPosition { get; internal set; }
    internal FillRule FillRule { get; internal set; }
    internal string Height { get; internal set; }
    internal Color StrokeColor { get; internal set; }
    internal StrokeLineCap StrokeLineCap { get; internal set; }
    internal string StrokeOpacity { get; internal set; }
    internal string StrokeWidth { get; internal set; }
    internal string Width { get; internal set; }
    internal int X { get; internal set; }
    internal int Y { get; internal set; }
    internal bool get_AutoGrowHeight();
    internal void set_AutoGrowHeight(bool value);
    internal bool get_AutoGrowWidth();
    internal void set_AutoGrowWidth(bool value);
    internal string get_Blue();
    internal void set_Blue(string value);
    internal UInt32 get_CaptionAngle();
    internal void set_CaptionAngle(UInt32 value);
    internal CaptionAngleType get_CaptionAngleType();
    internal void set_CaptionAngleType(CaptionAngleType value);
    internal string get_CaptionEscape();
    internal void set_CaptionEscape(string value);
    internal CaptionEscapeDirection get_CaptionEscapeDirection();
    internal void set_CaptionEscapeDirection(CaptionEscapeDirection value);
    internal bool get_CaptionFitLineLength();
    internal void set_CaptionFitLineLength(bool value);
    internal string get_CaptionGap();
    internal void set_CaptionGap(string value);
    internal string get_CaptionLineLength();
    internal void set_CaptionLineLength(string value);
    internal CaptionType get_CaptionType();
    internal void set_CaptionType(CaptionType value);
    internal bool get_ColorInversion();
    internal void set_ColorInversion(bool value);
    internal ColorMode get_ColorMode();
    internal void set_ColorMode(ColorMode value);
    internal string get_Costrast();
    internal void set_Costrast(string value);
    internal UInt32 get_DecimalPlaces();
    internal void set_DecimalPlaces(UInt32 value);
    internal DrawAspect get_DrawAspect();
    internal void set_DrawAspect(DrawAspect value);
    internal string get_EndGuide();
    internal void set_EndGuide(string value);
    internal string get_EndLineSpacingHorizontal();
    internal void set_EndLineSpacingHorizontal(string value);
    internal string get_EndLineSpacingVertical();
    internal void set_EndLineSpacingVertical(string value);
    internal FillType get_Fill();
    internal void set_Fill(FillType value);
    internal Color get_FillColor();
    internal void set_FillColor(Color value);
    internal string get_FillGradientName();
    internal void set_FillGradientName(string value);
    internal string get_FillHatchName();
    internal void set_FillHatchName(string value);
    internal bool get_FillHatchSolid();
    internal void set_FillHatchSolid(bool value);
    internal string get_FillImageHeight();
    internal void set_FillImageHeight(string value);
    internal string get_FillImageName();
    internal void set_FillImageName(string value);
    internal RefPoint get_FillImageRefPoint();
    internal void set_FillImageRefPoint(RefPoint value);
    internal string get_FillImageRefPointX();
    internal void set_FillImageRefPointX(string value);
    internal string get_FillImageRefPointY();
    internal void set_FillImageRefPointY(string value);
    internal string get_FillImageWidth();
    internal void set_FillImageWidth(string value);
    internal bool get_FitToContour();
    internal void set_FitToContour(bool value);
    internal bool get_FitToSize();
    internal void set_FitToSize(bool value);
    internal bool get_FrameDisplayBorder();
    internal void set_FrameDisplayBorder(bool value);
    internal bool get_FrameDisplayScrollbar();
    internal void set_FrameDisplayScrollbar(bool value);
    internal string get_FrameMarginHorizontal();
    internal void set_FrameMarginHorizontal(string value);
    internal string get_FrameMarginVertical();
    internal void set_FrameMarginVertical(string value);
    internal string get_Gamma();
    internal void set_Gamma(string value);
    internal int get_GradientStepCount();
    internal void set_GradientStepCount(int value);
    internal string get_Green();
    internal void set_Green(string value);
    internal string get_GuideDistance();
    internal void set_GuideDistance(string value);
    internal string get_GuideOverhang();
    internal void set_GuideOverhang(string value);
    internal int get_ImageOpacity();
    internal void set_ImageOpacity(int value);
    internal int get_LineDistance();
    internal void set_LineDistance(int value);
    internal int get_Luminance();
    internal void set_Luminance(int value);
    internal string get_MarkerEnd();
    internal void set_MarkerEnd(string value);
    internal bool get_MarkerEndCenter();
    internal void set_MarkerEndCenter(bool value);
    internal string get_MarkerEndWidth();
    internal void set_MarkerEndWidth(string value);
    internal string get_MarkerStart();
    internal void set_MarkerStart(string value);
    internal bool get_MarkerStartCenter();
    internal void set_MarkerStartCenter(bool value);
    internal string get_MarkerStartWidth();
    internal void set_MarkerStartWidth(string value);
    internal string get_MeasureAlign();
    internal void set_MeasureAlign(string value);
    internal string get_MeasureVerticalAlign();
    internal void set_MeasureVerticalAlign(string value);
    internal UInt32 get_OleDrawAspect();
    internal void set_OleDrawAspect(UInt32 value);
    internal string get_Opacity();
    internal void set_Opacity(string value);
    internal string get_OpacityName();
    internal void set_OpacityName(string value);
    internal bool get_Parallel();
    internal void set_Parallel(bool value);
    internal bool get_Placing();
    internal void set_Placing(bool value);
    internal string get_Red();
    internal void set_Red(string value);
    internal string get_SecondaryFillCOlor();
    internal void set_SecondaryFillCOlor(string value);
    internal Shadow get_DrawShadow();
    internal void set_DrawShadow(Shadow value);
    internal string get_ShadowColor();
    internal void set_ShadowColor(string value);
    internal string get_ShadowOffsetX();
    internal void set_ShadowOffsetX(string value);
    internal string get_ShadowOffsetY();
    internal void set_ShadowOffsetY(string value);
    internal string get_ShadowOpacity();
    internal void set_ShadowOpacity(string value);
    internal bool get_ShowUnit();
    internal void set_ShowUnit(bool value);
    internal string get_StartGuide();
    internal void set_StartGuide(string value);
    internal string get_StartLineSpacingHorizontal();
    internal void set_StartLineSpacingHorizontal(string value);
    internal string get_StartLineSpacingVertical();
    internal void set_StartLineSpacingVertical(string value);
    internal Stroke get_Stroke();
    internal void set_Stroke(Stroke value);
    internal string get_StrokeDash();
    internal void set_StrokeDash(string value);
    internal string get_StrokeDashNames();
    internal void set_StrokeDashNames(string value);
    internal StrokeLineJoin get_StrokeLineJoin();
    internal void set_StrokeLineJoin(StrokeLineJoin value);
    internal string get_SymbolColor();
    internal void set_SymbolColor(string value);
    internal string get_TextAreaHorizontalAlign();
    internal void set_TextAreaHorizontalAlign(string value);
    internal string get_TextAreaVerticalAlign();
    internal void set_TextAreaVerticalAlign(string value);
    internal string get_TitleRepeatOffset();
    internal void set_TitleRepeatOffset(string value);
    internal Unit get_Unit();
    internal void set_Unit(Unit value);
    internal string get_VisibleAreaHeight();
    internal void set_VisibleAreaHeight(string value);
    internal string get_VisibleAreaWidth();
    internal void set_VisibleAreaWidth(string value);
    internal string get_VisibleAreaTop();
    internal void set_VisibleAreaTop(string value);
    internal string get_VisibleAreaLeft();
    internal void set_VisibleAreaLeft(string value);
    internal string get_WrapInfluenceOnPosition();
    internal void set_WrapInfluenceOnPosition(string value);
    internal FillRule get_FillRule();
    internal void set_FillRule(FillRule value);
    internal string get_Height();
    internal void set_Height(string value);
    internal Color get_StrokeColor();
    internal void set_StrokeColor(Color value);
    internal StrokeLineCap get_StrokeLineCap();
    internal void set_StrokeLineCap(StrokeLineCap value);
    internal string get_StrokeOpacity();
    internal void set_StrokeOpacity(string value);
    internal string get_StrokeWidth();
    internal void set_StrokeWidth(string value);
    internal string get_Width();
    internal void set_Width(string value);
    internal int get_X();
    internal void set_X(int value);
    internal int get_Y();
    internal void set_Y(int value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.HeaderFooterContent : object {
    private bool m_display;
    private HeaderSection m_regionCenter;
    private HeaderSection m_regionLeft;
    private HeaderSection m_regionRight;
    private OTable m_table;
    private string m_alphabeticalIndex;
    private string m_alphabeticalIndexAutoMarkFile;
    private string m_bibiliography;
    private string m_change;
    private string m_changeEnd;
    private string m_changeStart;
    private string m_DDEConnectionDecls;
    private string m_heading;
    private string m_illustrationIndex;
    private string m_list;
    private string m_objectIndex;
    private string m_Para;
    private string m_section;
    private string m_sequenceDecls;
    private int m_tableindex;
    private string m_TableOfContent;
    private string m_trackedChanges;
    private string m_userFileds;
    private string m_userIndex;
    private string m_variableDecls;
    private List`1<OTextBodyItem> m_bodyItems;
    internal List`1<OTextBodyItem> ChildItems { get; }
    internal bool Display { get; internal set; }
    internal HeaderSection RegionCenter { get; internal set; }
    internal HeaderSection RegionLeft { get; internal set; }
    internal HeaderSection RegionRight { get; internal set; }
    internal OTable Table { get; internal set; }
    internal string AlphabeticalIndex { get; internal set; }
    internal string AlphabeticalIndexAutoMarkFile { get; internal set; }
    internal string Bibiliography { get; internal set; }
    internal string Change { get; internal set; }
    internal string ChangeEnd { get; internal set; }
    internal string ChangeStart { get; internal set; }
    internal string DDEConnectionDecls { get; internal set; }
    internal string Heading { get; internal set; }
    internal string IllustrationIndex { get; internal set; }
    internal string List { get; internal set; }
    internal string ObjectIndex { get; internal set; }
    internal string Para { get; internal set; }
    internal string Section { get; internal set; }
    internal string SequenceDecls { get; internal set; }
    internal int Tableindex { get; internal set; }
    internal string TableOfContent { get; internal set; }
    internal string TrackedChanges { get; internal set; }
    internal string UserFileds { get; internal set; }
    internal string UserIndex { get; internal set; }
    internal string VariableDecls { get; internal set; }
    internal List`1<OTextBodyItem> get_ChildItems();
    internal bool get_Display();
    internal void set_Display(bool value);
    internal HeaderSection get_RegionCenter();
    internal void set_RegionCenter(HeaderSection value);
    internal HeaderSection get_RegionLeft();
    internal void set_RegionLeft(HeaderSection value);
    internal HeaderSection get_RegionRight();
    internal void set_RegionRight(HeaderSection value);
    internal OTable get_Table();
    internal void set_Table(OTable value);
    internal string get_AlphabeticalIndex();
    internal void set_AlphabeticalIndex(string value);
    internal string get_AlphabeticalIndexAutoMarkFile();
    internal void set_AlphabeticalIndexAutoMarkFile(string value);
    internal string get_Bibiliography();
    internal void set_Bibiliography(string value);
    internal string get_Change();
    internal void set_Change(string value);
    internal string get_ChangeEnd();
    internal void set_ChangeEnd(string value);
    internal string get_ChangeStart();
    internal void set_ChangeStart(string value);
    internal string get_DDEConnectionDecls();
    internal void set_DDEConnectionDecls(string value);
    internal string get_Heading();
    internal void set_Heading(string value);
    internal string get_IllustrationIndex();
    internal void set_IllustrationIndex(string value);
    internal string get_List();
    internal void set_List(string value);
    internal string get_ObjectIndex();
    internal void set_ObjectIndex(string value);
    internal string get_Para();
    internal void set_Para(string value);
    internal string get_Section();
    internal void set_Section(string value);
    internal string get_SequenceDecls();
    internal void set_SequenceDecls(string value);
    internal int get_Tableindex();
    internal void set_Tableindex(int value);
    internal string get_TableOfContent();
    internal void set_TableOfContent(string value);
    internal string get_TrackedChanges();
    internal void set_TrackedChanges(string value);
    internal string get_UserFileds();
    internal void set_UserFileds(string value);
    internal string get_UserIndex();
    internal void set_UserIndex(string value);
    internal string get_VariableDecls();
    internal void set_VariableDecls(string value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.HeaderFooterProperties : MarginBorderProperties {
    private double m_minHeight;
    private List`1<OTextBodyItem> m_textBodyItem;
    internal List`1<OTextBodyItem> TextBodyItems { get; internal set; }
    internal double MinHeight { get; internal set; }
    internal List`1<OTextBodyItem> get_TextBodyItems();
    internal void set_TextBodyItems(List`1<OTextBodyItem> value);
    internal double get_MinHeight();
    internal void set_MinHeight(double value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.HeaderFooterStyle : object {
    private HeaderFooterProperties m_headerFooterProperties;
    private bool m_isHeader;
    internal bool IsHeader { get; internal set; }
    internal HeaderFooterProperties HeaderFooterproperties { get; internal set; }
    internal bool get_IsHeader();
    internal void set_IsHeader(bool value);
    internal HeaderFooterProperties get_HeaderFooterproperties();
    internal void set_HeaderFooterproperties(HeaderFooterProperties value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.HeaderSection : object {
    private OParagraph m_paragraph;
    internal OParagraph Paragraph { get; internal set; }
    internal OParagraph get_Paragraph();
    internal void set_Paragraph(OParagraph value);
    internal void Dispose();
}
internal interface Syncfusion.XlsIO.ODF.Base.ODFImplementation.INamedObject {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.LanguageStyle : object {
    private string m_country;
    private string m_language;
    private string m_rFCLanguageTag;
    private string m_script;
    internal string Country { get; internal set; }
    internal string Language { get; internal set; }
    internal string RFCLanguageTag { get; internal set; }
    internal string Script { get; internal set; }
    internal string get_Country();
    internal void set_Country(string value);
    internal string get_Language();
    internal void set_Language(string value);
    internal string get_RFCLanguageTag();
    internal void set_RFCLanguageTag(string value);
    internal string get_Script();
    internal void set_Script(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.LeftHeader : HeaderSection {
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.MapStyle : object {
    private string m_applyStyleName;
    private string m_condition;
    private string m_baseCellAddress;
    internal string ApplyStyleName { get; internal set; }
    internal string Condition { get; internal set; }
    internal string BaseCellAddress { get; internal set; }
    internal string get_ApplyStyleName();
    internal void set_ApplyStyleName(string value);
    internal string get_Condition();
    internal void set_Condition(string value);
    internal string get_BaseCellAddress();
    internal void set_BaseCellAddress(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.MarginBorderProperties : BorderProperties {
    private double m_marginLeft;
    private double m_marginRight;
    private double m_marginTop;
    private double m_marginBottom;
    internal byte m_marginFlag;
    private static byte MarginLeftKey;
    private static byte MarginRightKey;
    private static byte MarginTopKey;
    private static byte MarginBottomKey;
    internal double MarginLeft { get; internal set; }
    internal double MarginRight { get; internal set; }
    internal double MarginTop { get; internal set; }
    internal double MarginBottom { get; internal set; }
    internal double get_MarginLeft();
    internal void set_MarginLeft(double value);
    internal double get_MarginRight();
    internal void set_MarginRight(double value);
    internal double get_MarginTop();
    internal void set_MarginTop(double value);
    internal double get_MarginBottom();
    internal void set_MarginBottom(double value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.MasterPage : object {
    private string m_name;
    private string m_pageLayoutName;
    private HeaderFooterContent m_header;
    private HeaderFooterContent m_headerLeft;
    private HeaderFooterContent m_footer;
    private HeaderFooterContent m_footerLeft;
    private HeaderFooterContent m_firstPageHeader;
    private HeaderFooterContent m_firstPageFooter;
    public string Name { get; public set; }
    internal string PageLayoutName { get; internal set; }
    internal HeaderFooterContent Header { get; internal set; }
    internal HeaderFooterContent HeaderLeft { get; internal set; }
    internal HeaderFooterContent Footer { get; internal set; }
    internal HeaderFooterContent FooterLeft { get; internal set; }
    internal HeaderFooterContent FirstPageHeader { get; internal set; }
    internal HeaderFooterContent FirstPageFooter { get; internal set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal string get_PageLayoutName();
    internal void set_PageLayoutName(string value);
    internal HeaderFooterContent get_Header();
    internal void set_Header(HeaderFooterContent value);
    internal HeaderFooterContent get_HeaderLeft();
    internal void set_HeaderLeft(HeaderFooterContent value);
    internal HeaderFooterContent get_Footer();
    internal void set_Footer(HeaderFooterContent value);
    internal HeaderFooterContent get_FooterLeft();
    internal void set_FooterLeft(HeaderFooterContent value);
    internal HeaderFooterContent get_FirstPageHeader();
    internal void set_FirstPageHeader(HeaderFooterContent value);
    internal HeaderFooterContent get_FirstPageFooter();
    internal void set_FirstPageFooter(HeaderFooterContent value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.MasterPageCollection : CollectionBase`1<MasterPage> {
    private Dictionary`2<string, MasterPage> m_dictMasterPages;
    internal Dictionary`2<string, MasterPage> DictMasterPages { get; internal set; }
    internal Dictionary`2<string, MasterPage> get_DictMasterPages();
    internal void set_DictMasterPages(Dictionary`2<string, MasterPage> value);
    internal string Add(MasterPage page);
    private string ContainsValue(MasterPage page);
    internal void Remove(string key);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.Month : DateBase {
    private string m_possesiveForm;
    private string m_textual;
    internal string PossesiveForm { get; internal set; }
    internal string Textual { get; internal set; }
    internal string get_PossesiveForm();
    internal void set_PossesiveForm(string value);
    internal string get_Textual();
    internal void set_Textual(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.NamedExp : object {
    private string m_name;
    private string m_baseCellAddress;
    internal string Name { get; internal set; }
    internal string BaseCellAddress { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_BaseCellAddress();
    internal void set_BaseCellAddress(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.NamedExpression : NamedExp {
    private string m_expression;
    internal string Expression { get; internal set; }
    internal string get_Expression();
    internal void set_Expression(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.NamedExpressions : object {
    private List`1<NamedExpression> m_namedExps;
    private List`1<NamedRange> m_namedRanges;
    internal List`1<NamedExpression> NamedExps { get; internal set; }
    internal List`1<NamedRange> NamedRanges { get; internal set; }
    internal List`1<NamedExpression> get_NamedExps();
    internal void set_NamedExps(List`1<NamedExpression> value);
    internal List`1<NamedRange> get_NamedRanges();
    internal void set_NamedRanges(List`1<NamedRange> value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.NamedObject : object {
    private string m_name;
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.NamedRange : NamedExp {
    private string m_cellRangeAddress;
    internal string CellRangeAddress { get; internal set; }
    internal NamedRange(string RangeName);
    internal string get_CellRangeAddress();
    internal void set_CellRangeAddress(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.NumberFormat : LanguageStyle {
    private string m_title;
    private string m_transliterationCountry;
    private string m_transliterationFormat;
    private string m_transliterationLanguage;
    private string m_transliterationStyle;
    internal string Title { get; internal set; }
    internal string TransliterationCountry { get; internal set; }
    internal string TransliterationFormat { get; internal set; }
    internal string TransliterationLanguage { get; internal set; }
    internal string TransliterationStyle { get; internal set; }
    internal string get_Title();
    internal void set_Title(string value);
    internal string get_TransliterationCountry();
    internal void set_TransliterationCountry(string value);
    internal string get_TransliterationFormat();
    internal void set_TransliterationFormat(string value);
    internal string get_TransliterationLanguage();
    internal void set_TransliterationLanguage(string value);
    internal string get_TransliterationStyle();
    internal void set_TransliterationStyle(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.NumberStyle : DataStyle {
    private NumberType m_number;
    private FractionType m_fraction;
    private ScientificNumberType m_scientificNumber;
    internal NumberType Number { get; internal set; }
    internal FractionType Fraction { get; internal set; }
    internal ScientificNumberType ScientificNumber { get; internal set; }
    internal NumberType get_Number();
    internal void set_Number(NumberType value);
    internal FractionType get_Fraction();
    internal void set_Fraction(FractionType value);
    internal ScientificNumberType get_ScientificNumber();
    internal void set_ScientificNumber(ScientificNumberType value);
    internal bool HasKey(int propertyKey, int flagname);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.NumberType : CommonType {
    private string m_decimalReplacement;
    private string m_displayFactor;
    private EmbeddedTextType m_embeddedText;
    internal string DecimalReplacement { get; internal set; }
    internal string DisplayFactor { get; internal set; }
    internal EmbeddedTextType EmbeddedText { get; internal set; }
    internal string get_DecimalReplacement();
    internal void set_DecimalReplacement(string value);
    internal string get_DisplayFactor();
    internal void set_DisplayFactor(string value);
    internal EmbeddedTextType get_EmbeddedText();
    internal void set_EmbeddedText(EmbeddedTextType value);
    public virtual bool Equals(object obj);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OBody : object {
    private Text m_text;
    private List`1<OTextBodyItem> m_textBodyItem;
    internal List`1<OTextBodyItem> TextBodyItems { get; internal set; }
    internal List`1<OTextBodyItem> get_TextBodyItems();
    internal void set_TextBodyItems(List`1<OTextBodyItem> value);
    internal void Close();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OBreak : OParagraphItem {
    private OBreakType m_breakType;
    internal OBreakType BreakType { get; internal set; }
    internal OBreakType get_BreakType();
    internal void set_BreakType(OBreakType value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.ODFBorder : object {
    private Color m_borderColor;
    private BorderLineStyle m_lineStyle;
    private string m_lineWidth;
    internal byte styleFlags;
    private static byte LineColorKey;
    private static byte LineStyleKey;
    private static byte LineWidthKey;
    internal Color LineColor { get; internal set; }
    internal BorderLineStyle LineStyle { get; internal set; }
    internal string LineWidth { get; internal set; }
    internal Color get_LineColor();
    internal void set_LineColor(Color value);
    internal BorderLineStyle get_LineStyle();
    internal void set_LineStyle(BorderLineStyle value);
    internal string get_LineWidth();
    internal void set_LineWidth(string value);
    internal bool HasKey(int propertyKey);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.ODFColumns : object {
    private int m_columnCount;
    private int m_columnGap;
    public int ColumnGap { get; public set; }
    internal int ColumnCount { get; internal set; }
    public int get_ColumnGap();
    public void set_ColumnGap(int value);
    internal int get_ColumnCount();
    internal void set_ColumnCount(int value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.ODFOffice : object {
    private DocumentContent m_docContent;
    private DocumentStyles m_docStyles;
    internal DocumentContent DocContent { get; internal set; }
    internal DocumentStyles DocStyles { get; internal set; }
    internal DocumentContent get_DocContent();
    internal void set_DocContent(DocumentContent value);
    internal DocumentStyles get_DocStyles();
    internal void set_DocStyles(DocumentStyles value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.ODFParagraphProperties : CommonTableParaProperties {
    private HyphenationKeep m_hyphenationKeep;
    private int m_hyphenationLadderCount;
    private KeepTogether m_keepTogether;
    private float m_lineHeight;
    private UInt32 m_orphans;
    private float m_padding;
    private float m_paddingBottom;
    private float m_paddingTop;
    private float m_paddingLeft;
    private float m_paddingRight;
    private TextAlign m_textAlign;
    private TextAlignLast m_textAlignLast;
    private float m_textIndent;
    private UInt32 m_windows;
    private UInt32 m_backgroundTransparancy;
    private float m_borderLineWidth;
    private float m_borderLineWidthTop;
    private float m_borderLineWidthBottom;
    private float m_borderLineWidthLeft;
    private float m_borderLineWidthRight;
    private bool m_fontIndependentLineSpacing;
    private bool m_justifySingleWord;
    private double m_lineHeightAtLeast;
    private double m_lineSpacing;
    private bool m_registerTrue;
    private bool m_snapToLayoutGrid;
    private UInt32 m_tapToDistance;
    private UInt32 m_lineNumber;
    private bool m_numberLines;
    private bool m_lineBreak;
    private PunctuationWrap m_punctuationWrap;
    private TextAutoSpace m_textAutoSpace;
    private Nullable`1<VerticalAlign> m_verticalAlign;
    private bool m_isTab;
    private double m_afterSpacing;
    private double m_beforeSpacing;
    private double m_leftIndent;
    private double m_rightIndent;
    internal int m_styleFlag1;
    internal byte m_styleFlag2;
    private static int VerticalAlignKey;
    private static int TextAutoSpaceKey;
    private static int PunctuationWrapKey;
    private static int LineBreakKey;
    private static int NumberLinesKey;
    private static int LineNumberKey;
    private static int TapToDistanceKey;
    private static int SnapToLayoutGridKey;
    private static int RegisterTrueKey;
    private static int LineSpacingKey;
    private static int LineHeightAtLeastKey;
    private static int JustifySingleWordKey;
    private static int BorderLineWidthRightKey;
    private static int BorderLineWidthLeftKey;
    private static int BorderLineWidthBottomKey;
    private static int BorderLineWidthTopKey;
    private static int BorderLineWidthKey;
    private static int BackgroundTransparancyKey;
    private static int WindowsKey;
    private static int TextIndentKey;
    private static int TextAlignLastKey;
    private static int TextAlignKey;
    private static int PaddingRightKey;
    private static int PaddingLeftKey;
    private static int PaddingTopKey;
    private static int PaddingBottomKey;
    private static int PaddingKey;
    private static int OrphansKey;
    private static int LineHeightKey;
    private static int KeepTogetherKey;
    private static int HyphenationLadderCountKey;
    private static int HyphenationKeepKey;
    private static byte BeforeSpacingKey;
    private static byte AfterSpacingKey;
    private static byte LeftIndentKey;
    private static byte RightIndentKey;
    internal Nullable`1<VerticalAlign> VerticalAlign { get; internal set; }
    internal TextAutoSpace TextAutoSpace { get; internal set; }
    internal PunctuationWrap PunctuationWrap { get; internal set; }
    internal bool LineBreak { get; internal set; }
    internal bool NumberLines { get; internal set; }
    internal UInt32 LineNumber { get; internal set; }
    internal UInt32 TapToDistance { get; internal set; }
    internal bool SnapToLayoutGrid { get; internal set; }
    internal bool RegisterTrue { get; internal set; }
    internal double LineSpacing { get; internal set; }
    internal double LineHeightAtLeast { get; internal set; }
    internal bool JustifySingleWord { get; internal set; }
    internal float BorderLineWidthRight { get; internal set; }
    internal float BorderLineWidthLeft { get; internal set; }
    internal float BorderLineWidthBottom { get; internal set; }
    internal float BorderLineWidthTop { get; internal set; }
    internal float BorderLineWidth { get; internal set; }
    internal UInt32 BackgroundTransparancy { get; internal set; }
    internal UInt32 Windows { get; internal set; }
    internal float TextIndent { get; internal set; }
    internal TextAlignLast TextAlignLast { get; internal set; }
    internal TextAlign TextAlign { get; internal set; }
    internal float PaddingRight { get; internal set; }
    internal float PaddingLeft { get; internal set; }
    internal float PaddingTop { get; internal set; }
    internal float PaddingBottom { get; internal set; }
    internal float Padding { get; internal set; }
    internal UInt32 Orphans { get; internal set; }
    internal float LineHeight { get; internal set; }
    internal KeepTogether KeepTogether { get; internal set; }
    internal int HyphenationLadderCount { get; internal set; }
    internal HyphenationKeep HyphenationKeep { get; internal set; }
    internal bool FontIndependentLineSpacing { get; internal set; }
    internal bool IsTab { get; internal set; }
    internal double BeforeSpacing { get; internal set; }
    internal double AfterSpacing { get; internal set; }
    internal double LeftIndent { get; internal set; }
    internal double RightIndent { get; internal set; }
    internal Nullable`1<VerticalAlign> get_VerticalAlign();
    internal void set_VerticalAlign(Nullable`1<VerticalAlign> value);
    internal TextAutoSpace get_TextAutoSpace();
    internal void set_TextAutoSpace(TextAutoSpace value);
    internal PunctuationWrap get_PunctuationWrap();
    internal void set_PunctuationWrap(PunctuationWrap value);
    internal bool get_LineBreak();
    internal void set_LineBreak(bool value);
    internal bool get_NumberLines();
    internal void set_NumberLines(bool value);
    internal UInt32 get_LineNumber();
    internal void set_LineNumber(UInt32 value);
    internal UInt32 get_TapToDistance();
    internal void set_TapToDistance(UInt32 value);
    internal bool get_SnapToLayoutGrid();
    internal void set_SnapToLayoutGrid(bool value);
    internal bool get_RegisterTrue();
    internal void set_RegisterTrue(bool value);
    internal double get_LineSpacing();
    internal void set_LineSpacing(double value);
    internal double get_LineHeightAtLeast();
    internal void set_LineHeightAtLeast(double value);
    internal bool get_JustifySingleWord();
    internal void set_JustifySingleWord(bool value);
    internal float get_BorderLineWidthRight();
    internal void set_BorderLineWidthRight(float value);
    internal float get_BorderLineWidthLeft();
    internal void set_BorderLineWidthLeft(float value);
    internal float get_BorderLineWidthBottom();
    internal void set_BorderLineWidthBottom(float value);
    internal float get_BorderLineWidthTop();
    internal void set_BorderLineWidthTop(float value);
    internal float get_BorderLineWidth();
    internal void set_BorderLineWidth(float value);
    internal UInt32 get_BackgroundTransparancy();
    internal void set_BackgroundTransparancy(UInt32 value);
    internal UInt32 get_Windows();
    internal void set_Windows(UInt32 value);
    internal float get_TextIndent();
    internal void set_TextIndent(float value);
    internal TextAlignLast get_TextAlignLast();
    internal void set_TextAlignLast(TextAlignLast value);
    internal TextAlign get_TextAlign();
    internal void set_TextAlign(TextAlign value);
    internal float get_PaddingRight();
    internal void set_PaddingRight(float value);
    internal float get_PaddingLeft();
    internal void set_PaddingLeft(float value);
    internal float get_PaddingTop();
    internal void set_PaddingTop(float value);
    internal float get_PaddingBottom();
    internal void set_PaddingBottom(float value);
    internal float get_Padding();
    internal void set_Padding(float value);
    internal UInt32 get_Orphans();
    internal void set_Orphans(UInt32 value);
    internal float get_LineHeight();
    internal void set_LineHeight(float value);
    internal KeepTogether get_KeepTogether();
    internal void set_KeepTogether(KeepTogether value);
    internal int get_HyphenationLadderCount();
    internal void set_HyphenationLadderCount(int value);
    internal HyphenationKeep get_HyphenationKeep();
    internal void set_HyphenationKeep(HyphenationKeep value);
    internal bool get_FontIndependentLineSpacing();
    internal void set_FontIndependentLineSpacing(bool value);
    internal bool get_IsTab();
    internal void set_IsTab(bool value);
    internal double get_BeforeSpacing();
    internal void set_BeforeSpacing(double value);
    internal double get_AfterSpacing();
    internal void set_AfterSpacing(double value);
    internal double get_LeftIndent();
    internal void set_LeftIndent(double value);
    internal double get_RightIndent();
    internal void set_RightIndent(double value);
    internal bool HasKey(int propertyKey, int flagName);
    public virtual bool Equals(object obj);
    internal void Close();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.ODFStyle : DefaultStyle {
    private string m_name;
    private string m_dataStyleName;
    private UInt32 m_defaultOutlineLevel;
    private string m_displayName;
    private UInt32 m_listLevel;
    private string m_listStyleName;
    private string m_masterPageName;
    private string m_nextStyleName;
    private string m_parentStyleName;
    private string m_percentageDataStyleName;
    private bool m_isInlineStyle;
    private bool m_hasParent;
    internal byte styleFlags;
    internal bool isDefault;
    public string Name { get; public set; }
    internal string DataStyleName { get; internal set; }
    internal UInt32 DefaultOutlineLevel { get; internal set; }
    internal string DisplayName { get; internal set; }
    internal string ListStyleName { get; internal set; }
    internal string MasterPageName { get; internal set; }
    internal string NextStyleName { get; internal set; }
    internal string ParentStyleName { get; internal set; }
    internal string PercentageDataStyleName { get; internal set; }
    internal UInt32 ListLevel { get; internal set; }
    internal bool IsInlineSTyle { get; internal set; }
    internal bool HasParent { get; internal set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal string get_DataStyleName();
    internal void set_DataStyleName(string value);
    internal UInt32 get_DefaultOutlineLevel();
    internal void set_DefaultOutlineLevel(UInt32 value);
    internal string get_DisplayName();
    internal void set_DisplayName(string value);
    internal string get_ListStyleName();
    internal void set_ListStyleName(string value);
    internal string get_MasterPageName();
    internal void set_MasterPageName(string value);
    internal string get_NextStyleName();
    internal void set_NextStyleName(string value);
    internal string get_ParentStyleName();
    internal void set_ParentStyleName(string value);
    internal string get_PercentageDataStyleName();
    internal void set_PercentageDataStyleName(string value);
    internal UInt32 get_ListLevel();
    internal void set_ListLevel(UInt32 value);
    internal bool get_IsInlineSTyle();
    internal void set_IsInlineSTyle(bool value);
    internal bool get_HasParent();
    internal void set_HasParent(bool value);
    internal bool HasKey(int propertyKey, int flagname);
    public virtual bool Equals(object obj);
    internal void Close();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.ODFStyleCollection : CollectionBase`1<ODFStyle> {
    private Dictionary`2<string, ODFStyle> m_dictStyles;
    internal Dictionary`2<string, ODFStyle> DictStyles { get; internal set; }
    internal Dictionary`2<string, ODFStyle> get_DictStyles();
    internal void set_DictStyles(Dictionary`2<string, ODFStyle> value);
    internal string Add(ODFStyle style);
    internal string Add(ODFStyle style, int index);
    private string ContainsValue(ODFStyle style);
    private string MapName(ODFStyle style);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OParagraph : OTextBodyItem {
    private string m_styleName;
    private string m_listStyleName;
    private int m_listLevelNumber;
    private string m_alphabeticalIndexMark;
    private string m_alphabeticalIndexMarkStart;
    private string m_alphabeticalIndexMarkEnd;
    private string m_authorInitals;
    private string m_authorName;
    private string m_bibliographyMark;
    private string m_bookMark;
    private string m_bookMarkStart;
    private string m_bookMarkEnd;
    private string m_bookMarkRef;
    private string m_change;
    private string m_changeStart;
    private string m_changeEnd;
    private string m_chapter;
    private string m_chapterCount;
    private string m_conditionalText;
    private DateTime m_creationDate;
    private DateTime m_creationTime;
    private string m_creator;
    private string m_databaseDisplay;
    private string m_databaseName;
    private string m_databaseNext;
    private string m_databaseRowNumber;
    private string m_databaseRowSelect;
    private DateTime m_date;
    private string m_ddeConnection;
    private string m_description;
    private string m_editingCycles;
    private string m_editingDuration;
    private string m_executeMacro;
    private string m_expression;
    private string m_fileName;
    private string m_hiddenParagraph;
    private string m_hiddenText;
    private int m_imageCount;
    private string m_initialCreator;
    private string m_keywords;
    private bool m_lineBreak;
    private DateTime m_modificationDate;
    private DateTime m_modificationTime;
    private string m_modificationNote;
    private string m_modificationNoteRef;
    private int m_objectCount;
    private string m_pageContinuation;
    private int m_pageCount;
    private PageNumber m_pageNumber;
    private string m_setvariable;
    private int m_paragraphCount;
    private string m_placeHolder;
    private DateTime m_printDate;
    private string m_printedBy;
    private DateTime m_printTime;
    private string m_referenceMark;
    private string m_referenceMarkStart;
    private string m_referenceMarkEnd;
    private string m_referenceRef;
    private string m_ruby;
    private string m_script;
    private string m_senderCity;
    private string m_senderCompany;
    private string m_senderCountry;
    private string m_senderEmail;
    private string m_senderFax;
    private string m_senderFirstName;
    private string m_senderinitials;
    private string m_senderLastName;
    private string m_senderPhonePrivate;
    private string m_senderPhoneWork;
    private string m_senderPosition;
    private string m_senderPostalCode;
    private string m_stateOrProvince;
    private string m_senderStreet;
    private string m_senderTitle;
    private string m_sequence;
    private string m_sequenceRef;
    private string m_sheetName;
    private string m_softPageBreak;
    private bool m_span;
    private string m_subject;
    private string m_tab;
    private int m_tableCount;
    private string m_tableFormula;
    private string m_templateName;
    private string m_textInput;
    private DateTime m_time;
    private string m_title;
    private string m_tocMark;
    private string m_tocMarkStart;
    private string m_tocMarkEnd;
    private string m_userDefined;
    private string m_userFieldGet;
    private string m_userFieldInput;
    private string m_userIndexMark;
    private string m_getVariable;
    private string m_setVariable;
    private string m_getVariableInput;
    private int m_wordCount;
    private Heading m_header;
    private Anchor m_anchor;
    private List`1<OParagraphItem> m_OParagraphItemCollection;
    internal Heading Header { get; internal set; }
    internal List`1<OParagraphItem> OParagraphItemCollection { get; internal set; }
    internal string ListStyleName { get; internal set; }
    internal int ListLevelNumber { get; internal set; }
    internal int WordCount { get; internal set; }
    internal string GetVariableInput { get; internal set; }
    internal string SetVariable { get; internal set; }
    internal string GetVariable1 { get; internal set; }
    internal string UserIndexMark { get; internal set; }
    internal string UserFieldInput { get; internal set; }
    internal string UserFieldGet { get; internal set; }
    internal string UserDefined { get; internal set; }
    internal string TocMarkEnd { get; internal set; }
    internal string TocMarkStart { get; internal set; }
    internal string TocMark { get; internal set; }
    internal string Title { get; internal set; }
    internal DateTime Time { get; internal set; }
    internal string TextInput { get; internal set; }
    internal string TemplateName { get; internal set; }
    internal string TableFormula { get; internal set; }
    internal int TableCount { get; internal set; }
    internal string Tab { get; internal set; }
    internal string Subject { get; internal set; }
    internal bool Span { get; internal set; }
    internal string SheetName { get; internal set; }
    internal string SoftPageBreak { get; internal set; }
    internal string SequenceRef { get; internal set; }
    internal string Sequence { get; internal set; }
    internal string SenderTitle { get; internal set; }
    internal string SenderStreet { get; internal set; }
    internal string StateOrProvince { get; internal set; }
    internal string SenderPosition { get; internal set; }
    internal string SenderPostalCode { get; internal set; }
    internal string SenderPhoneWork { get; internal set; }
    internal string SenderPhonePrivate { get; internal set; }
    internal string SenderLastName { get; internal set; }
    internal string Senderinitials { get; internal set; }
    internal string SenderFirstName { get; internal set; }
    internal string SenderFax { get; internal set; }
    internal string SenderEmail { get; internal set; }
    internal string SenderCountry { get; internal set; }
    internal string SenderCompany { get; internal set; }
    internal string SenderCity { get; internal set; }
    internal string Script { get; internal set; }
    internal string Ruby { get; internal set; }
    internal string ReferenceRef { get; internal set; }
    internal string ReferenceMarkEnd { get; internal set; }
    internal string ReferenceMarkStart { get; internal set; }
    internal string ReferenceMark { get; internal set; }
    internal DateTime PrintTime { get; internal set; }
    internal string PrintedBy { get; internal set; }
    internal DateTime PrintDate { get; internal set; }
    internal string PlaceHolder { get; internal set; }
    internal int ParagraphCount { get; internal set; }
    internal string Setvariable { get; internal set; }
    internal string GetVariable { get; internal set; }
    internal PageNumber PageNumber { get; internal set; }
    internal int PageCount { get; internal set; }
    internal string PageContinuation { get; internal set; }
    internal int ObjectCount { get; internal set; }
    internal string ModificationNoteRef { get; internal set; }
    internal string ModificationNote { get; internal set; }
    internal DateTime ModificationTime { get; internal set; }
    internal DateTime ModificationDate { get; internal set; }
    internal bool LineBreak { get; internal set; }
    internal string Keywords { get; internal set; }
    internal string InitialCreator { get; internal set; }
    internal int ImageCount { get; internal set; }
    internal string HiddenText { get; internal set; }
    internal string HiddenParagraph { get; internal set; }
    internal string FileName { get; internal set; }
    internal string Expression { get; internal set; }
    internal string ExecuteMacro { get; internal set; }
    internal string EditingDuration { get; internal set; }
    internal string EditingCycles { get; internal set; }
    internal string Description { get; internal set; }
    internal string DdeConnection { get; internal set; }
    internal DateTime Date { get; internal set; }
    internal string DatabaseRowSelect { get; internal set; }
    internal string DatabaseRowNumber { get; internal set; }
    internal string DatabaseNext { get; internal set; }
    internal string DatabaseDisplay { get; internal set; }
    internal string Creator { get; internal set; }
    internal DateTime CreationTime { get; internal set; }
    internal DateTime CreationDate { get; internal set; }
    internal string ConditionalText { get; internal set; }
    internal string ChapterCount { get; internal set; }
    internal string Chapter { get; internal set; }
    internal string ChangeEnd { get; internal set; }
    internal string ChangeStart { get; internal set; }
    internal string Change { get; internal set; }
    internal string BookMarkRef { get; internal set; }
    internal string BookMarkEnd { get; internal set; }
    internal string BookMarkStart { get; internal set; }
    internal string BookMark { get; internal set; }
    internal string BibliographyMark { get; internal set; }
    internal string AuthorName { get; internal set; }
    internal string AuthorInitals { get; internal set; }
    internal string AlphabeticalIndexMarkEnd { get; internal set; }
    internal string AlphabeticalIndexMarkStart { get; internal set; }
    internal string AlphabeticalIndexMark { get; internal set; }
    internal string StyleName { get; internal set; }
    internal Anchor Anchor { get; internal set; }
    internal Heading get_Header();
    internal void set_Header(Heading value);
    internal List`1<OParagraphItem> get_OParagraphItemCollection();
    internal void set_OParagraphItemCollection(List`1<OParagraphItem> value);
    internal string get_ListStyleName();
    internal void set_ListStyleName(string value);
    internal int get_ListLevelNumber();
    internal void set_ListLevelNumber(int value);
    internal int get_WordCount();
    internal void set_WordCount(int value);
    internal string get_GetVariableInput();
    internal void set_GetVariableInput(string value);
    internal string get_SetVariable();
    internal void set_SetVariable(string value);
    internal string get_GetVariable1();
    internal void set_GetVariable1(string value);
    internal string get_UserIndexMark();
    internal void set_UserIndexMark(string value);
    internal string get_UserFieldInput();
    internal void set_UserFieldInput(string value);
    internal string get_UserFieldGet();
    internal void set_UserFieldGet(string value);
    internal string get_UserDefined();
    internal void set_UserDefined(string value);
    internal string get_TocMarkEnd();
    internal void set_TocMarkEnd(string value);
    internal string get_TocMarkStart();
    internal void set_TocMarkStart(string value);
    internal string get_TocMark();
    internal void set_TocMark(string value);
    internal string get_Title();
    internal void set_Title(string value);
    internal DateTime get_Time();
    internal void set_Time(DateTime value);
    internal string get_TextInput();
    internal void set_TextInput(string value);
    internal string get_TemplateName();
    internal void set_TemplateName(string value);
    internal string get_TableFormula();
    internal void set_TableFormula(string value);
    internal int get_TableCount();
    internal void set_TableCount(int value);
    internal string get_Tab();
    internal void set_Tab(string value);
    internal string get_Subject();
    internal void set_Subject(string value);
    internal bool get_Span();
    internal void set_Span(bool value);
    internal string get_SheetName();
    internal void set_SheetName(string value);
    internal string get_SoftPageBreak();
    internal void set_SoftPageBreak(string value);
    internal string get_SequenceRef();
    internal void set_SequenceRef(string value);
    internal string get_Sequence();
    internal void set_Sequence(string value);
    internal string get_SenderTitle();
    internal void set_SenderTitle(string value);
    internal string get_SenderStreet();
    internal void set_SenderStreet(string value);
    internal string get_StateOrProvince();
    internal void set_StateOrProvince(string value);
    internal string get_SenderPosition();
    internal void set_SenderPosition(string value);
    internal string get_SenderPostalCode();
    internal void set_SenderPostalCode(string value);
    internal string get_SenderPhoneWork();
    internal void set_SenderPhoneWork(string value);
    internal string get_SenderPhonePrivate();
    internal void set_SenderPhonePrivate(string value);
    internal string get_SenderLastName();
    internal void set_SenderLastName(string value);
    internal string get_Senderinitials();
    internal void set_Senderinitials(string value);
    internal string get_SenderFirstName();
    internal void set_SenderFirstName(string value);
    internal string get_SenderFax();
    internal void set_SenderFax(string value);
    internal string get_SenderEmail();
    internal void set_SenderEmail(string value);
    internal string get_SenderCountry();
    internal void set_SenderCountry(string value);
    internal string get_SenderCompany();
    internal void set_SenderCompany(string value);
    internal string get_SenderCity();
    internal void set_SenderCity(string value);
    internal string get_Script();
    internal void set_Script(string value);
    internal string get_Ruby();
    internal void set_Ruby(string value);
    internal string get_ReferenceRef();
    internal void set_ReferenceRef(string value);
    internal string get_ReferenceMarkEnd();
    internal void set_ReferenceMarkEnd(string value);
    internal string get_ReferenceMarkStart();
    internal void set_ReferenceMarkStart(string value);
    internal string get_ReferenceMark();
    internal void set_ReferenceMark(string value);
    internal DateTime get_PrintTime();
    internal void set_PrintTime(DateTime value);
    internal string get_PrintedBy();
    internal void set_PrintedBy(string value);
    internal DateTime get_PrintDate();
    internal void set_PrintDate(DateTime value);
    internal string get_PlaceHolder();
    internal void set_PlaceHolder(string value);
    internal int get_ParagraphCount();
    internal void set_ParagraphCount(int value);
    internal string get_Setvariable();
    internal void set_Setvariable(string value);
    internal string get_GetVariable();
    internal void set_GetVariable(string value);
    internal PageNumber get_PageNumber();
    internal void set_PageNumber(PageNumber value);
    internal int get_PageCount();
    internal void set_PageCount(int value);
    internal string get_PageContinuation();
    internal void set_PageContinuation(string value);
    internal int get_ObjectCount();
    internal void set_ObjectCount(int value);
    internal string get_ModificationNoteRef();
    internal void set_ModificationNoteRef(string value);
    internal string get_ModificationNote();
    internal void set_ModificationNote(string value);
    internal DateTime get_ModificationTime();
    internal void set_ModificationTime(DateTime value);
    internal DateTime get_ModificationDate();
    internal void set_ModificationDate(DateTime value);
    internal bool get_LineBreak();
    internal void set_LineBreak(bool value);
    internal string get_Keywords();
    internal void set_Keywords(string value);
    internal string get_InitialCreator();
    internal void set_InitialCreator(string value);
    internal int get_ImageCount();
    internal void set_ImageCount(int value);
    internal string get_HiddenText();
    internal void set_HiddenText(string value);
    internal string get_HiddenParagraph();
    internal void set_HiddenParagraph(string value);
    internal string get_FileName();
    internal void set_FileName(string value);
    internal string get_Expression();
    internal void set_Expression(string value);
    internal string get_ExecuteMacro();
    internal void set_ExecuteMacro(string value);
    internal string get_EditingDuration();
    internal void set_EditingDuration(string value);
    internal string get_EditingCycles();
    internal void set_EditingCycles(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal string get_DdeConnection();
    internal void set_DdeConnection(string value);
    internal DateTime get_Date();
    internal void set_Date(DateTime value);
    internal string get_DatabaseRowSelect();
    internal void set_DatabaseRowSelect(string value);
    internal string get_DatabaseRowNumber();
    internal void set_DatabaseRowNumber(string value);
    internal string get_DatabaseNext();
    internal void set_DatabaseNext(string value);
    internal string get_DatabaseDisplay();
    internal void set_DatabaseDisplay(string value);
    internal string get_Creator();
    internal void set_Creator(string value);
    internal DateTime get_CreationTime();
    internal void set_CreationTime(DateTime value);
    internal DateTime get_CreationDate();
    internal void set_CreationDate(DateTime value);
    internal string get_ConditionalText();
    internal void set_ConditionalText(string value);
    internal string get_ChapterCount();
    internal void set_ChapterCount(string value);
    internal string get_Chapter();
    internal void set_Chapter(string value);
    internal string get_ChangeEnd();
    internal void set_ChangeEnd(string value);
    internal string get_ChangeStart();
    internal void set_ChangeStart(string value);
    internal string get_Change();
    internal void set_Change(string value);
    internal string get_BookMarkRef();
    internal void set_BookMarkRef(string value);
    internal string get_BookMarkEnd();
    internal void set_BookMarkEnd(string value);
    internal string get_BookMarkStart();
    internal void set_BookMarkStart(string value);
    internal string get_BookMark();
    internal void set_BookMark(string value);
    internal string get_BibliographyMark();
    internal void set_BibliographyMark(string value);
    internal string get_AuthorName();
    internal void set_AuthorName(string value);
    internal string get_AuthorInitals();
    internal void set_AuthorInitals(string value);
    internal string get_AlphabeticalIndexMarkEnd();
    internal void set_AlphabeticalIndexMarkEnd(string value);
    internal string get_AlphabeticalIndexMarkStart();
    internal void set_AlphabeticalIndexMarkStart(string value);
    internal string get_AlphabeticalIndexMark();
    internal void set_AlphabeticalIndexMark(string value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal Anchor get_Anchor();
    internal void set_Anchor(Anchor value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OParagraphCollection : object {
    private List`1<OParagraph> m_Paragraph;
    internal List`1<OParagraph> Paragraph { get; internal set; }
    internal List`1<OParagraph> get_Paragraph();
    internal void set_Paragraph(List`1<OParagraph> value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OParagraphItem : object {
    private TextProperties m_TextProperties;
    private ODFParagraphProperties m_ParagraphProperties;
    private string m_text;
    private bool m_span;
    private bool m_space;
    private string m_styleName;
    internal string StyleName { get; internal set; }
    internal bool Space { get; internal set; }
    internal bool Span { get; internal set; }
    internal string Text { get; internal set; }
    internal ODFParagraphProperties ParagraphProperties { get; internal set; }
    internal TextProperties TextProperties { get; internal set; }
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal bool get_Space();
    internal void set_Space(bool value);
    internal bool get_Span();
    internal void set_Span(bool value);
    internal string get_Text();
    internal void set_Text(string value);
    internal ODFParagraphProperties get_ParagraphProperties();
    internal void set_ParagraphProperties(ODFParagraphProperties value);
    internal TextProperties get_TextProperties();
    internal void set_TextProperties(TextProperties value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTable : OTextBodyItem {
    private string m_name;
    private string m_styleName;
    private bool m_softPageBreak;
    private List`1<OTableColumn> m_columns;
    private List`1<OTableRow> m_rows;
    private bool m_hasDefaultColumnStyle;
    private NamedExpressions m_expressions;
    internal static int MaxColumnCount;
    internal static int MaxRowCount;
    internal string Name { get; internal set; }
    internal string StyleName { get; internal set; }
    internal bool SoftPageBreak { get; internal set; }
    internal List`1<OTableColumn> Columns { get; internal set; }
    internal List`1<OTableRow> Rows { get; internal set; }
    internal NamedExpressions Expressions { get; internal set; }
    internal bool HasDefaultColumnStyle { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal bool get_SoftPageBreak();
    internal void set_SoftPageBreak(bool value);
    internal List`1<OTableColumn> get_Columns();
    internal void set_Columns(List`1<OTableColumn> value);
    internal List`1<OTableRow> get_Rows();
    internal void set_Rows(List`1<OTableRow> value);
    internal NamedExpressions get_Expressions();
    internal void set_Expressions(NamedExpressions value);
    internal bool get_HasDefaultColumnStyle();
    internal void set_HasDefaultColumnStyle(bool value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTableCell : object {
    private object m_value;
    private string m_value2;
    private bool m_booleanValue;
    private string m_currency;
    private DateTime m_dateValue;
    private TimeSpan m_timeValue;
    private string m_formula;
    private int m_columnsSpanned;
    private int m_rowsSpanned;
    private int m_matrixColunsSpanned;
    private int m_matrixRowsSpanned;
    private CellValueType m_type;
    private string m_styleName;
    private int m_columnsRepeated;
    private string m_tableFormula;
    private OParagraph m_paragraph;
    private bool m_isBlank;
    private List`1<OTextBodyItem> m_textBodyIetm;
    private float m_cellWidth;
    private Annotation m_comment;
    internal float CellWidth { get; internal set; }
    internal List`1<OTextBodyItem> TextBodyIetm { get; internal set; }
    internal object Value { get; internal set; }
    internal string Value2 { get; internal set; }
    internal CellValueType Type { get; internal set; }
    internal string StyleName { get; internal set; }
    internal int ColumnsRepeated { get; internal set; }
    internal string TableFormula { get; internal set; }
    internal OParagraph Paragraph { get; internal set; }
    internal bool BooleanValue { get; internal set; }
    internal string Currency { get; internal set; }
    internal DateTime DateValue { get; internal set; }
    internal TimeSpan TimeValue { get; internal set; }
    internal int ColumnsSpanned { get; internal set; }
    internal int RowsSpanned { get; internal set; }
    internal int MatrixColunsSpanned { get; internal set; }
    internal int MatrixRowsSpanned { get; internal set; }
    internal bool IsBlank { get; internal set; }
    internal Annotation Comment { get; internal set; }
    internal float get_CellWidth();
    internal void set_CellWidth(float value);
    internal List`1<OTextBodyItem> get_TextBodyIetm();
    internal void set_TextBodyIetm(List`1<OTextBodyItem> value);
    internal object get_Value();
    internal void set_Value(object value);
    internal string get_Value2();
    internal void set_Value2(string value);
    internal CellValueType get_Type();
    internal void set_Type(CellValueType value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal int get_ColumnsRepeated();
    internal void set_ColumnsRepeated(int value);
    internal string get_TableFormula();
    internal void set_TableFormula(string value);
    internal OParagraph get_Paragraph();
    internal void set_Paragraph(OParagraph value);
    internal bool get_BooleanValue();
    internal void set_BooleanValue(bool value);
    internal string get_Currency();
    internal void set_Currency(string value);
    internal DateTime get_DateValue();
    internal void set_DateValue(DateTime value);
    internal TimeSpan get_TimeValue();
    internal void set_TimeValue(TimeSpan value);
    internal int get_ColumnsSpanned();
    internal void set_ColumnsSpanned(int value);
    internal int get_RowsSpanned();
    internal void set_RowsSpanned(int value);
    internal int get_MatrixColunsSpanned();
    internal void set_MatrixColunsSpanned(int value);
    internal int get_MatrixRowsSpanned();
    internal void set_MatrixRowsSpanned(int value);
    internal bool get_IsBlank();
    internal void set_IsBlank(bool value);
    internal Annotation get_Comment();
    internal void set_Comment(Annotation value);
    public virtual bool Equals(object obj);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTableCellProperties : BorderProperties {
    private int m_rotationAngle;
    private bool m_wrap;
    private float m_borderLineWidth;
    private float m_borderLineWidthTop;
    private float m_borderLineWidthBottom;
    private float m_borderLineWidthLeft;
    private float m_borderLineWidthRight;
    private bool m_shrinkToFit;
    private Nullable`1<VerticalAlign> m_verticalAlign;
    private Color m_backColor;
    private float m_paddingTop;
    private float m_paddingBottom;
    private float m_paddingLeft;
    private float m_paddingRight;
    private bool m_repeatContent;
    private PageOrder m_direction;
    internal ushort tableCellFlags;
    internal static byte RotationAngleKey;
    internal static byte WrapKey;
    internal static byte BorderLineWidthKey;
    internal static byte BorderLineWidthTopKey;
    internal static byte BorderLineWidthBottomKey;
    internal static byte BorderLineWidthLeftKey;
    internal static byte BorderLineWidthRightKey;
    internal static byte ShrinkToFitKey;
    internal static byte BackColorKey;
    internal static byte VerticalAlignKey;
    internal static byte PaddingRightKey;
    internal static byte paddingLeftKey;
    internal static byte PaddingBottomKey;
    internal static byte PaddingTopKey;
    internal static byte RepeatContentKey;
    internal static byte DirectionKey;
    internal int RotationAngle { get; internal set; }
    internal bool Wrap { get; internal set; }
    internal float BorderLineWidth { get; internal set; }
    internal float BorderLineWidthTop { get; internal set; }
    internal float BorderLineWidthBottom { get; internal set; }
    internal float BorderLineWidthLeft { get; internal set; }
    internal float BorderLineWidthRight { get; internal set; }
    internal bool ShrinkToFit { get; internal set; }
    internal Color BackColor { get; internal set; }
    internal Nullable`1<VerticalAlign> VerticalAlign { get; internal set; }
    internal float PaddingRight { get; internal set; }
    internal float PaddingLeft { get; internal set; }
    internal float PaddingBottom { get; internal set; }
    internal float PaddingTop { get; internal set; }
    internal bool RepeatContent { get; internal set; }
    internal PageOrder Direction { get; internal set; }
    internal int get_RotationAngle();
    internal void set_RotationAngle(int value);
    internal bool get_Wrap();
    internal void set_Wrap(bool value);
    internal float get_BorderLineWidth();
    internal void set_BorderLineWidth(float value);
    internal float get_BorderLineWidthTop();
    internal void set_BorderLineWidthTop(float value);
    internal float get_BorderLineWidthBottom();
    internal void set_BorderLineWidthBottom(float value);
    internal float get_BorderLineWidthLeft();
    internal void set_BorderLineWidthLeft(float value);
    internal float get_BorderLineWidthRight();
    internal void set_BorderLineWidthRight(float value);
    internal bool get_ShrinkToFit();
    internal void set_ShrinkToFit(bool value);
    internal Color get_BackColor();
    internal void set_BackColor(Color value);
    internal Nullable`1<VerticalAlign> get_VerticalAlign();
    internal void set_VerticalAlign(Nullable`1<VerticalAlign> value);
    internal float get_PaddingRight();
    internal void set_PaddingRight(float value);
    internal float get_PaddingLeft();
    internal void set_PaddingLeft(float value);
    internal float get_PaddingBottom();
    internal void set_PaddingBottom(float value);
    internal float get_PaddingTop();
    internal void set_PaddingTop(float value);
    internal bool get_RepeatContent();
    internal void set_RepeatContent(bool value);
    internal PageOrder get_Direction();
    internal void set_Direction(PageOrder value);
    internal bool HasKey(int propertyKey, int flagname);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTableColumn : object {
    private string m_defaultCellStyleName;
    private int m_repeatedRowColumns;
    private string m_styleName;
    private bool m_visibility;
    private int m_outlineLevel;
    private bool m_isCollapsed;
    internal string DefaultCellStyleName { get; internal set; }
    internal int RepeatedRowColumns { get; internal set; }
    internal string StyleName { get; internal set; }
    internal bool Visibility { get; internal set; }
    internal int OutlineLevel { get; internal set; }
    internal bool IsCollapsed { get; internal set; }
    internal string get_DefaultCellStyleName();
    internal void set_DefaultCellStyleName(string value);
    internal int get_RepeatedRowColumns();
    internal void set_RepeatedRowColumns(int value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal bool get_Visibility();
    internal void set_Visibility(bool value);
    internal int get_OutlineLevel();
    internal void set_OutlineLevel(int value);
    internal bool get_IsCollapsed();
    internal void set_IsCollapsed(bool value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTableColumnProperties : object {
    private double m_columnWidth;
    private bool m_useOptimalColumnWidth;
    internal double ColumnWidth { get; internal set; }
    internal bool UseOptimalColumnWidth { get; internal set; }
    internal double get_ColumnWidth();
    internal void set_ColumnWidth(double value);
    internal bool get_UseOptimalColumnWidth();
    internal void set_UseOptimalColumnWidth(bool value);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTableProperties : CommonTableParaProperties {
    private bool m_hasColor;
    private bool m_mayBreakBetweenRows;
    private bool m_display;
    private float m_tableWidth;
    private HoriAlignment m_horizontalAlignment;
    internal float TableWidth { get; internal set; }
    internal bool HasColor { get; internal set; }
    internal bool Display { get; internal set; }
    internal HoriAlignment HoriAlignment { get; internal set; }
    internal float get_TableWidth();
    internal void set_TableWidth(float value);
    internal bool get_HasColor();
    internal void set_HasColor(bool value);
    internal bool get_Display();
    internal void set_Display(bool value);
    internal HoriAlignment get_HoriAlignment();
    internal void set_HoriAlignment(HoriAlignment value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTableRow : OTableColumn {
    private List`1<OTableCell> m_cells;
    internal List`1<OTableCell> Cells { get; internal set; }
    internal List`1<OTableCell> get_Cells();
    internal void set_Cells(List`1<OTableCell> value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTableRowProperties : object {
    private double m_rowHeight;
    private bool m_useOptimalRowHeight;
    internal double RowHeight { get; internal set; }
    internal bool UseOptimalRowHeight { get; internal set; }
    internal double get_RowHeight();
    internal void set_RowHeight(double value);
    internal bool get_UseOptimalRowHeight();
    internal void set_UseOptimalRowHeight(bool value);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTextBodyItem : object {
    private byte m_flag;
    private string m_sectionStyleName;
    internal bool IsFirstItemOfSection { get; internal set; }
    internal bool IsLastItemOfSection { get; internal set; }
    internal string SectionStyleName { get; internal set; }
    internal bool get_IsFirstItemOfSection();
    internal void set_IsFirstItemOfSection(bool value);
    internal bool get_IsLastItemOfSection();
    internal void set_IsLastItemOfSection(bool value);
    internal string get_SectionStyleName();
    internal void set_SectionStyleName(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.OTextRange : OParagraphItem {
    private string m_text;
    internal string Text { get; internal set; }
    internal string get_Text();
    internal void set_Text(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.PageLayout : DefaultPageLayout {
    private string m_name;
    private PageUsage m_pageUsage;
    private int m_columnsCount;
    private float m_columnsGap;
    public string Name { get; public set; }
    internal PageUsage PageUsage { get; internal set; }
    internal int ColumnsCount { get; internal set; }
    internal float ColumnsGap { get; internal set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    internal PageUsage get_PageUsage();
    internal void set_PageUsage(PageUsage value);
    internal int get_ColumnsCount();
    internal void set_ColumnsCount(int value);
    internal float get_ColumnsGap();
    internal void set_ColumnsGap(float value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.PageLayoutCollection : CollectionBase`1<PageLayout> {
    private Dictionary`2<string, PageLayout> m_dictStyles;
    internal Dictionary`2<string, PageLayout> DictStyles { get; internal set; }
    internal Dictionary`2<string, PageLayout> get_DictStyles();
    internal void set_DictStyles(Dictionary`2<string, PageLayout> value);
    internal string Add(PageLayout layout);
    internal void Remove(string key);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.PageLayoutProperties : MarginBorderProperties {
    private double m_pageWidth;
    private PrintOrientation m_pageOrientation;
    private double m_pageHeight;
    private PageOrder m_printPageOrder;
    private string m_scaleTo;
    private TableCentering m_tableCentering;
    private string m_printableObjects;
    private string m_firstPageNumber;
    private double m_paddingLeft;
    private double m_paddingRight;
    private double m_paddingTop;
    private double m_paddingBottom;
    internal double PaddingBottom { get; internal set; }
    internal double PaddingTop { get; internal set; }
    internal double PaddingRight { get; internal set; }
    internal double PaddingLeft { get; internal set; }
    internal double PageWidth { get; internal set; }
    internal double PageHeight { get; internal set; }
    internal PrintOrientation PageOrientation { get; internal set; }
    internal PageOrder PrintPageOrder { get; internal set; }
    internal string ScaleTo { get; internal set; }
    internal TableCentering TableCentering { get; internal set; }
    internal string PrintableObjects { get; internal set; }
    internal string FirstPageNumber { get; internal set; }
    internal double get_PaddingBottom();
    internal void set_PaddingBottom(double value);
    internal double get_PaddingTop();
    internal void set_PaddingTop(double value);
    internal double get_PaddingRight();
    internal void set_PaddingRight(double value);
    internal double get_PaddingLeft();
    internal void set_PaddingLeft(double value);
    internal double get_PageWidth();
    internal void set_PageWidth(double value);
    internal double get_PageHeight();
    internal void set_PageHeight(double value);
    internal PrintOrientation get_PageOrientation();
    internal void set_PageOrientation(PrintOrientation value);
    internal PageOrder get_PrintPageOrder();
    internal void set_PrintPageOrder(PageOrder value);
    internal string get_ScaleTo();
    internal void set_ScaleTo(string value);
    internal TableCentering get_TableCentering();
    internal void set_TableCentering(TableCentering value);
    internal string get_PrintableObjects();
    internal void set_PrintableObjects(string value);
    internal string get_FirstPageNumber();
    internal void set_FirstPageNumber(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.PageNumber : object {
    private PageNumberFormat m_pageNumber;
    private bool m_numberLetterSync;
    private bool m_pageFixed;
    private int m_pageAdjust;
    private SelectPage m_selectPage;
    private string m_content;
    internal SelectPage SelectPage { get; internal set; }
    internal int PageAdjust { get; internal set; }
    internal bool PageFixed { get; internal set; }
    internal bool NumberLetterSync { get; internal set; }
    internal PageNumberFormat PgNumber { get; internal set; }
    internal string Content { get; internal set; }
    internal SelectPage get_SelectPage();
    internal void set_SelectPage(SelectPage value);
    internal int get_PageAdjust();
    internal void set_PageAdjust(int value);
    internal bool get_PageFixed();
    internal void set_PageFixed(bool value);
    internal bool get_NumberLetterSync();
    internal void set_NumberLetterSync(bool value);
    internal PageNumberFormat get_PgNumber();
    internal void set_PgNumber(PageNumberFormat value);
    internal string get_Content();
    internal void set_Content(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.PercentageStyle : DataStyle {
    private NumberType m_number;
    internal NumberType Number { get; internal set; }
    internal NumberType get_Number();
    internal void set_Number(NumberType value);
    internal void Dispose();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.RightHeader : object {
    private OParagraph m_paragraph;
    internal OParagraph Paragraph { get; internal set; }
    internal OParagraph get_Paragraph();
    internal void set_Paragraph(OParagraph value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.ScientificNumberType : CommonType {
    private int m_minExponenDigits;
    internal int MinExponentDigits { get; internal set; }
    internal int get_MinExponentDigits();
    internal void set_MinExponentDigits(int value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.Seconds : TimeBase {
    private int m_decimalPlaces;
    internal int DecimalPlaces { get; internal set; }
    internal int get_DecimalPlaces();
    internal void set_DecimalPlaces(int value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.SectionProperties : object {
    private string m_backgroundColor;
    private int m_marginLeft;
    private int m_marginRight;
    private ODFColumns m_columns;
    internal ODFColumns Columns { get; internal set; }
    internal string BackgroundColor { get; internal set; }
    internal int MarginLeft { get; internal set; }
    internal int MarginRight { get; internal set; }
    internal ODFColumns get_Columns();
    internal void set_Columns(ODFColumns value);
    internal string get_BackgroundColor();
    internal void set_BackgroundColor(string value);
    internal int get_MarginLeft();
    internal void set_MarginLeft(int value);
    internal int get_MarginRight();
    internal void set_MarginRight(int value);
    internal void Close();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.TextProperties : object {
    private string m_fontFamily;
    private string m_fontName;
    private double m_fontSize;
    private FontWeight m_fontWeight;
    private int m_textRotationAngle;
    private float m_textScale;
    private Color m_backgroundColor;
    private Color m_color;
    private string m_countryCode;
    private string m_textPosition;
    private ODFFontStyle m_fontStyle;
    private FontVariant m_fontVariant;
    private bool m_hyphenate;
    private int m_hyphenation_push_char_count;
    private int m_hyphenation_remain_char_count;
    private string m_language;
    private float m_letterSpacing;
    private bool m_shadow;
    private Transform m_textTransform;
    private string m_countryAsian;
    private string m_countryComplex;
    private string m_font_charset;
    private string m_font_charset_asian;
    private string m_font_charset_complex;
    private string m_fontFamilyAsian;
    private string m_fontFamliyComplex;
    private FontFamilyGeneric m_fontFamilyGeneric;
    private FontFamilyGeneric m_fontFamilyGenericComplex;
    private FontFamilyGeneric m_fontFamilyGenericAsian;
    private string m_fontNameAsian;
    private string m_fontNameComplex;
    private FontPitch m_fontPitch;
    private FontPitch m_fontPitchAsian;
    private FontPitch m_fontPitchComplex;
    private int m_fontSizeRel;
    private int m_fontSizeRelAsian;
    private int m_fontSizeRelComplex;
    private bool m_fontStyleAsian;
    private bool m_fontStyleComplex;
    private string m_fontStyleName;
    private string m_fontStyleNameComplex;
    private string m_fontStyleNameAsian;
    private FontWeight m_fontWeightComplex;
    private FontWeight m_fontWeightAsian;
    private string m_languageAsian;
    private string m_languageComplex;
    private bool m_letterKerning;
    private string m_rfcLanguageTag;
    private string m_rfcLanguageTagAsian;
    private string m_rfcLanguageTagComplex;
    private bool m_textBlinking;
    private Combine m_textCombine;
    private char m_textCombineEndChar;
    private char m_textCombineStartChar;
    private Emphasize m_textEmphasize;
    private string m_linethroughColor;
    private LineMode m_linethroughMode;
    private BorderLineStyle m_linethroughStyle;
    private string m_linethroughText;
    private LineType m_linethroughTextStyle;
    private LineType m_linethroughType;
    private LineWidth m_linethroughWidth;
    private bool m_textOutline;
    private string m_textOverlineColor;
    private LineMode m_textOverlineMode;
    private BorderLineStyle m_textOverlineStyle;
    private LineType m_textOverlineType;
    private LineWidth m_textOverlineWidth;
    private TextRotationScale m_textRotationScale;
    private int m_textScaling;
    private string m_textUnderlineColor;
    private LineMode m_textUnderlineMode;
    private BorderLineStyle m_textUnderlineStyle;
    private LineType m_textUnderlineType;
    private LineWidth m_textUnderlineWidth;
    private bool m_useWindowFontColor;
    private string m_textCondition;
    private TextDisplay m_textDisplay;
    private bool m_isTextDisplay;
    private FontRelief m_fontRelief;
    private string m_charStyleName;
    internal int m_textFlag1;
    internal int m_textFlag2;
    internal int m_textFlag3;
    private static int FontReliefKey;
    private static int TextDisplayKey;
    private static int TextConditionKey;
    private static int UseWindowFontColorKey;
    private static int TextUnderlineWidthKey;
    private static int TextUnderlineTypeKey;
    private static int TextUnderlineStyleKey;
    private static int TextUnderlineModeKey;
    private static int TextUnderlineColorKey;
    private static int TextScalingKey;
    private static int TextRotationScaleKey;
    private static int TextOverlineWidthKey;
    private static int TextOverlineTypeKey;
    private static int TextOverlineStyleKey;
    private static int TextOverlineModeKey;
    private static int TextOverlineColorKey;
    private static int FontNameKey;
    private static int FontSizeKey;
    private static int TextRotationAngleKey;
    private static int TextScaleKey;
    private static int BackgroundColorKey;
    private static int TextPositionKey;
    private static int FontWeightKey;
    private static int ColorKey;
    private static int CountryCodeKey;
    private static int FontFamilyKey;
    private static int FontStyleKey;
    private static int IsTextDisplayKey;
    private static int FontVariantKey;
    private static int HyphenateKey;
    private static int HyphenationPushCharCountKey;
    private static int HyphenationRemainCharCountKey;
    private static int LanguageKey;
    private static int LetterSpacingKey;
    private static int ShadowKey;
    private static int TextTransformKey;
    private static int CountryAsianKey;
    private static int CountryComplexKey;
    private static int FontCharsetKey;
    private static int FontCharsetAsianKey;
    private static int FontCharsetComplexKey;
    private static int FontFamliyComplexKey;
    private static int FontFamilyAsianKey;
    private static int FontFamilyGenericKey;
    private static int FontFamilyGenericAsianKey;
    private static int FontFamilyGenericComplexKey;
    private static int FontNameComplexKey;
    private static int FontNameAsianKey;
    private static int FontPitchKey;
    private static int FontPitchComplexKey;
    private static int FontPitchAsianKey;
    private static int FontSizeRelComplexKey;
    private static int FontSizeRelAsianKey;
    private static int FontSizeRelKey;
    private static int FontStyleComplexKey;
    private static int FontStyleAsianKey;
    private static int FontStyleNameKey;
    private static int FontStyleNameAsianKey;
    private static int FontStyleNameComplexKey;
    private static int FontWeightAsianKey;
    private static int FontWeightComplexKey;
    private static int RfcLanguageTagComplexKey;
    private static int RfcLanguageTagAsianKey;
    private static int RfcLanguageTagKey;
    private static int LetterKerningKey;
    private static int LanguageComplexKey;
    private static int LanguageAsianKey;
    private static int TextCombineStartCharKey;
    private static int TextCombineEndCharKey;
    private static int TextCombineKey;
    private static int TextBlinkingKey;
    private static int TextOutlineKey;
    private static int LinethroughWidthKey;
    private static int LinethroughTypeKey;
    private static int LinethroughTextStyleKey;
    private static int LinethroughTextKey;
    private static byte LinethroughStyleKey;
    private static int LinethroughModeKey;
    private static int LinethroughColorKey;
    private static int TextEmphasizeKey;
    internal string CharStyleName { get; internal set; }
    internal FontRelief FontRelief { get; internal set; }
    public TextDisplay TextDisplay { get; public set; }
    internal string TextCondition { get; internal set; }
    internal bool UseWindowFontColor { get; internal set; }
    internal LineWidth TextUnderlineWidth { get; internal set; }
    internal LineType TextUnderlineType { get; internal set; }
    internal BorderLineStyle TextUnderlineStyle { get; internal set; }
    internal LineMode TextUnderlineMode { get; internal set; }
    internal string TextUnderlineColor { get; internal set; }
    internal int TextScaling { get; internal set; }
    internal TextRotationScale TextRotationScale { get; internal set; }
    internal LineWidth TextOverlineWidth { get; internal set; }
    internal LineType TextOverlineType { get; internal set; }
    internal BorderLineStyle TextOverlineStyle { get; internal set; }
    internal LineMode TextOverlineMode { get; internal set; }
    public string TextOverlineColor { get; public set; }
    internal string FontName { get; internal set; }
    internal double FontSize { get; internal set; }
    internal int TextRotationAngle { get; internal set; }
    internal float TextScale { get; internal set; }
    internal Color BackgroundColor { get; internal set; }
    internal string TextPosition { get; internal set; }
    internal FontWeight FontWeight { get; internal set; }
    internal Color Color { get; internal set; }
    internal string CountryCode { get; internal set; }
    internal string FontFamily { get; internal set; }
    internal ODFFontStyle FontStyle { get; internal set; }
    internal bool IsTextDisplay { get; internal set; }
    internal FontVariant FontVariant { get; internal set; }
    internal bool Hyphenate { get; internal set; }
    internal int HyphenationPushCharCount { get; internal set; }
    internal int HyphenationRemainCharCount { get; internal set; }
    internal string Language { get; internal set; }
    internal float LetterSpacing { get; internal set; }
    internal bool Shadow { get; internal set; }
    internal Transform TextTransform { get; internal set; }
    internal string CountryAsian { get; internal set; }
    internal string CountryComplex { get; internal set; }
    internal string FontCharset { get; internal set; }
    internal string FontCharsetAsian { get; internal set; }
    internal string FontCharsetComplex { get; internal set; }
    internal string FontFamliyComplex { get; internal set; }
    internal string FontFamilyAsian { get; internal set; }
    internal FontFamilyGeneric FontFamilyGeneric { get; internal set; }
    internal FontFamilyGeneric FontFamilyGenericAsian { get; internal set; }
    internal FontFamilyGeneric FontFamilyGenericComplex { get; internal set; }
    internal string FontNameComplex { get; internal set; }
    internal string FontNameAsian { get; internal set; }
    internal FontPitch FontPitch { get; internal set; }
    internal FontPitch FontPitchComplex { get; internal set; }
    internal FontPitch FontPitchAsian { get; internal set; }
    internal int FontSizeRelComplex { get; internal set; }
    internal int FontSizeRelAsian { get; internal set; }
    internal int FontSizeRel { get; internal set; }
    internal bool FontStyleComplex { get; internal set; }
    internal bool FontStyleAsian { get; internal set; }
    internal string FontStyleName { get; internal set; }
    internal string FontStyleNameAsian { get; internal set; }
    internal string FontStyleNameComplex { get; internal set; }
    internal FontWeight FontWeightAsian { get; internal set; }
    internal FontWeight FontWeightComplex { get; internal set; }
    internal string RfcLanguageTagComplex { get; internal set; }
    internal string RfcLanguageTagAsian { get; internal set; }
    internal string RfcLanguageTag { get; internal set; }
    internal bool LetterKerning { get; internal set; }
    internal string LanguageComplex { get; internal set; }
    internal string LanguageAsian { get; internal set; }
    internal char TextCombineStartChar { get; internal set; }
    internal char TextCombineEndChar { get; internal set; }
    internal Combine TextCombine { get; internal set; }
    internal bool TextBlinking { get; internal set; }
    internal bool TextOutline { get; internal set; }
    internal LineWidth LinethroughWidth { get; internal set; }
    internal LineType LinethroughType { get; internal set; }
    internal LineType LinethroughTextStyle { get; internal set; }
    internal string LinethroughText { get; internal set; }
    internal BorderLineStyle LinethroughStyle { get; internal set; }
    internal LineMode LinethroughMode { get; internal set; }
    internal string LinethroughColor { get; internal set; }
    internal Emphasize TextEmphasize { get; internal set; }
    internal string get_CharStyleName();
    internal void set_CharStyleName(string value);
    internal FontRelief get_FontRelief();
    internal void set_FontRelief(FontRelief value);
    public TextDisplay get_TextDisplay();
    public void set_TextDisplay(TextDisplay value);
    internal string get_TextCondition();
    internal void set_TextCondition(string value);
    internal bool get_UseWindowFontColor();
    internal void set_UseWindowFontColor(bool value);
    internal LineWidth get_TextUnderlineWidth();
    internal void set_TextUnderlineWidth(LineWidth value);
    internal LineType get_TextUnderlineType();
    internal void set_TextUnderlineType(LineType value);
    internal BorderLineStyle get_TextUnderlineStyle();
    internal void set_TextUnderlineStyle(BorderLineStyle value);
    internal LineMode get_TextUnderlineMode();
    internal void set_TextUnderlineMode(LineMode value);
    internal string get_TextUnderlineColor();
    internal void set_TextUnderlineColor(string value);
    internal int get_TextScaling();
    internal void set_TextScaling(int value);
    internal TextRotationScale get_TextRotationScale();
    internal void set_TextRotationScale(TextRotationScale value);
    internal LineWidth get_TextOverlineWidth();
    internal void set_TextOverlineWidth(LineWidth value);
    internal LineType get_TextOverlineType();
    internal void set_TextOverlineType(LineType value);
    internal BorderLineStyle get_TextOverlineStyle();
    internal void set_TextOverlineStyle(BorderLineStyle value);
    internal LineMode get_TextOverlineMode();
    internal void set_TextOverlineMode(LineMode value);
    public string get_TextOverlineColor();
    public void set_TextOverlineColor(string value);
    internal string get_FontName();
    internal void set_FontName(string value);
    internal double get_FontSize();
    internal void set_FontSize(double value);
    internal int get_TextRotationAngle();
    internal void set_TextRotationAngle(int value);
    internal float get_TextScale();
    internal void set_TextScale(float value);
    internal Color get_BackgroundColor();
    internal void set_BackgroundColor(Color value);
    internal string get_TextPosition();
    internal void set_TextPosition(string value);
    internal FontWeight get_FontWeight();
    internal void set_FontWeight(FontWeight value);
    internal Color get_Color();
    internal void set_Color(Color value);
    internal string get_CountryCode();
    internal void set_CountryCode(string value);
    internal string get_FontFamily();
    internal void set_FontFamily(string value);
    internal ODFFontStyle get_FontStyle();
    internal void set_FontStyle(ODFFontStyle value);
    internal bool get_IsTextDisplay();
    internal void set_IsTextDisplay(bool value);
    internal FontVariant get_FontVariant();
    internal void set_FontVariant(FontVariant value);
    internal bool get_Hyphenate();
    internal void set_Hyphenate(bool value);
    internal int get_HyphenationPushCharCount();
    internal void set_HyphenationPushCharCount(int value);
    internal int get_HyphenationRemainCharCount();
    internal void set_HyphenationRemainCharCount(int value);
    internal string get_Language();
    internal void set_Language(string value);
    internal float get_LetterSpacing();
    internal void set_LetterSpacing(float value);
    internal bool get_Shadow();
    internal void set_Shadow(bool value);
    internal Transform get_TextTransform();
    internal void set_TextTransform(Transform value);
    internal string get_CountryAsian();
    internal void set_CountryAsian(string value);
    internal string get_CountryComplex();
    internal void set_CountryComplex(string value);
    internal string get_FontCharset();
    internal void set_FontCharset(string value);
    internal string get_FontCharsetAsian();
    internal void set_FontCharsetAsian(string value);
    internal string get_FontCharsetComplex();
    internal void set_FontCharsetComplex(string value);
    internal string get_FontFamliyComplex();
    internal void set_FontFamliyComplex(string value);
    internal string get_FontFamilyAsian();
    internal void set_FontFamilyAsian(string value);
    internal FontFamilyGeneric get_FontFamilyGeneric();
    internal void set_FontFamilyGeneric(FontFamilyGeneric value);
    internal FontFamilyGeneric get_FontFamilyGenericAsian();
    internal void set_FontFamilyGenericAsian(FontFamilyGeneric value);
    internal FontFamilyGeneric get_FontFamilyGenericComplex();
    internal void set_FontFamilyGenericComplex(FontFamilyGeneric value);
    internal string get_FontNameComplex();
    internal void set_FontNameComplex(string value);
    internal string get_FontNameAsian();
    internal void set_FontNameAsian(string value);
    internal FontPitch get_FontPitch();
    internal void set_FontPitch(FontPitch value);
    internal FontPitch get_FontPitchComplex();
    internal void set_FontPitchComplex(FontPitch value);
    internal FontPitch get_FontPitchAsian();
    internal void set_FontPitchAsian(FontPitch value);
    internal int get_FontSizeRelComplex();
    internal void set_FontSizeRelComplex(int value);
    internal int get_FontSizeRelAsian();
    internal void set_FontSizeRelAsian(int value);
    internal int get_FontSizeRel();
    internal void set_FontSizeRel(int value);
    internal bool get_FontStyleComplex();
    internal void set_FontStyleComplex(bool value);
    internal bool get_FontStyleAsian();
    internal void set_FontStyleAsian(bool value);
    internal string get_FontStyleName();
    internal void set_FontStyleName(string value);
    internal string get_FontStyleNameAsian();
    internal void set_FontStyleNameAsian(string value);
    internal string get_FontStyleNameComplex();
    internal void set_FontStyleNameComplex(string value);
    internal FontWeight get_FontWeightAsian();
    internal void set_FontWeightAsian(FontWeight value);
    internal FontWeight get_FontWeightComplex();
    internal void set_FontWeightComplex(FontWeight value);
    internal string get_RfcLanguageTagComplex();
    internal void set_RfcLanguageTagComplex(string value);
    internal string get_RfcLanguageTagAsian();
    internal void set_RfcLanguageTagAsian(string value);
    internal string get_RfcLanguageTag();
    internal void set_RfcLanguageTag(string value);
    internal bool get_LetterKerning();
    internal void set_LetterKerning(bool value);
    internal string get_LanguageComplex();
    internal void set_LanguageComplex(string value);
    internal string get_LanguageAsian();
    internal void set_LanguageAsian(string value);
    internal char get_TextCombineStartChar();
    internal void set_TextCombineStartChar(char value);
    internal char get_TextCombineEndChar();
    internal void set_TextCombineEndChar(char value);
    internal Combine get_TextCombine();
    internal void set_TextCombine(Combine value);
    internal bool get_TextBlinking();
    internal void set_TextBlinking(bool value);
    internal bool get_TextOutline();
    internal void set_TextOutline(bool value);
    internal LineWidth get_LinethroughWidth();
    internal void set_LinethroughWidth(LineWidth value);
    internal LineType get_LinethroughType();
    internal void set_LinethroughType(LineType value);
    internal LineType get_LinethroughTextStyle();
    internal void set_LinethroughTextStyle(LineType value);
    internal string get_LinethroughText();
    internal void set_LinethroughText(string value);
    internal BorderLineStyle get_LinethroughStyle();
    internal void set_LinethroughStyle(BorderLineStyle value);
    internal LineMode get_LinethroughMode();
    internal void set_LinethroughMode(LineMode value);
    internal string get_LinethroughColor();
    internal void set_LinethroughColor(string value);
    internal Emphasize get_TextEmphasize();
    internal void set_TextEmphasize(Emphasize value);
    internal bool HasKey(int propertyKey, int flagname);
    public virtual bool Equals(object obj);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.TextStyle : DataStyle {
    private bool m_textContent;
    internal bool TextContent { get; internal set; }
    internal bool get_TextContent();
    internal void set_TextContent(bool value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.TimeBase : object {
    private string m_style;
    internal string Style { get; internal set; }
    internal string get_Style();
    internal void set_Style(string value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.TimeStyle : DataStyle {
    private string m_ampm;
    private TimeBase m_hours;
    private TimeBase m_minutes;
    private Seconds m_seconds;
    internal string AMPM { get; internal set; }
    internal TimeBase Hours { get; internal set; }
    internal TimeBase Minutes { get; internal set; }
    internal Seconds Seconds { get; internal set; }
    internal string get_AMPM();
    internal void set_AMPM(string value);
    internal TimeBase get_Hours();
    internal void set_Hours(TimeBase value);
    internal TimeBase get_Minutes();
    internal void set_Minutes(TimeBase value);
    internal Seconds get_Seconds();
    internal void set_Seconds(Seconds value);
}
internal class Syncfusion.XlsIO.ODF.Base.ODFImplementation.Xlink : object {
    public string actuate;
    public string href;
    public string type;
}
internal class Syncfusion.XlsIO.ODF.Base.ODFSerialization.ODFConstants : object {
    internal static int FirstVisibleChar;
    internal static Char[] allowedChars;
    internal static string OfficeNamespace;
    internal static string MetaNamespace;
    internal static string ConfigNamespace;
    internal static string TextNamespace;
    internal static string TableNamespace;
    internal static string DrawNamespace;
    internal static string PresentationNamespace;
    internal static string Drawing3DNamespace;
    internal static string ChartNamespace;
    internal static string FormNamespace;
    internal static string DBNamespace;
    internal static string ScriptNamespace;
    internal static string OFNamespace;
    internal static string StyleNamespace;
    internal static string NumberNamespace;
    internal static string AnimationNamespace;
    internal static string ManifestNamespace;
    internal static string FONamespace;
    internal static string SVGNamespace;
    internal static string SMILNamespace;
    internal static string XlinkNamespace;
    internal static string DCNamespace;
    internal static string MathNamespace;
    internal static string XHTMLNamespace;
    internal static string ExcelMimetypeValue;
    internal static string DocMimetypeValue;
    internal static string ManifestPartName;
    internal static string ContentPartName;
    internal static string MetaPartName;
    internal static string MimetypePartName;
    internal static string StylesPartName;
    internal static string SettingsPartName;
    internal static string DocContent;
    internal static string DocStyles;
    internal static string DocMeta;
    internal static string DocSettings;
    internal static string ManifestLocalName;
    internal static string EntryTagName;
    internal static string PathTagName;
    internal static string MediaTagName;
    internal static string MediaPath;
    internal static string XmlNamespacePrefix;
    internal static string TableLocalName;
    internal static string OfficeLocalName;
    internal static string CommonStylesLocalName;
    internal static string AutoStylesLocalName;
    internal static string MasterStylesLocalName;
    internal static string StyleLocalName;
    internal static string DrawLocalName;
    internal static string FOLocalName;
    internal static string XlinkLocalName;
    internal static string DCLocalName;
    internal static string NumberLocalName;
    internal static string SVGLocalName;
    internal static string OFLocalName;
    internal static string AnimationLocalName;
    internal static string ChartLocalName;
    internal static string Drawing3DLocalName;
    internal static string MetaLocalName;
    internal static string PresentationLocalName;
    internal static string TextLocalName;
    internal static string ConfigLocalName;
    internal static string DBLocalName;
    internal static string FormLocalName;
    internal static string ScriptLocalName;
    internal static string XHTMLLocalName;
    internal static string SMILLocalName;
    internal static string BodyLocalName;
    internal static string PageLayoutNameTag;
    internal static string BookmarkStartTag;
    internal static string BookmarkEndTag;
    internal static string FontFaceDeclsTag;
    internal static string FontFaceTag;
    internal static string NameTag;
    internal static string FontFamilyTag;
    internal static string FamilyGenericTag;
    internal static string FontPitchTag;
    internal static string FamilyTag;
    internal static string VAlign;
    internal static string BackColor;
    internal static string BorderTop;
    internal static string BorderBottom;
    internal static string BorderLeft;
    internal static string BorderRight;
    internal static string TxtPropertiesTag;
    internal static string FontNameTag;
    internal static string FontSizeTag;
    internal static string FontSizeAsianTag;
    internal static string FontSizeComplexTag;
    internal static string ColorTag;
    internal static string FontWeightTag;
    internal static string FontStyleTag;
    internal static string FontReliefTag;
    internal static string LetterKerningTag;
    internal static string LineThroughTypeTag;
    internal static string MasterPagTag;
    internal static string HeaderTag;
    internal static string HeaderLeftTag;
    internal static string FooterTag;
    internal static string FooterLeftTag;
    internal static string PageLayoutTag;
    internal static string PageLayoutPropertiesTag;
    internal static string PageWidthTag;
    internal static string PageHeightTag;
    internal static string PageOrientationTag;
    internal static string MarginTopTag;
    internal static string MarginLeftTag;
    internal static string MarginRightTag;
    internal static string MarginBottomTag;
    internal static string TableCenteringTag;
    internal static string PrintPageOrderTag;
    internal static string HeaderStyleTag;
    internal static string FooterStyleTag;
    internal static string HeaderFooterPropertiesTag;
    internal static string MinHeightTag;
    internal static string FirstPageNumberTag;
    internal static string ScaleToTag;
    internal static string TablePropTag;
    internal static string TableColumnProp;
    internal static string TableRowProp;
    internal static string DisplayTag;
    internal static string WritingModeTag;
    internal static string ColumnWidthTag;
    internal static string RowHeightTag;
    internal static string ParentStyleTag;
    internal static string DateStyle;
    internal static string SectionProps;
    internal static string DefCellStyle;
    internal static string HyperlinkPrefix;
    internal static string GraphicFillColor;
    internal static string GraphicStrokeColor;
    internal static string ParaTag;
    internal static string FrameTag;
    internal static string ImageTag;
    internal static string OrderIndex;
    internal static string WidthTag;
    internal static string HeightTag;
    internal static string RelativeHeightTag;
    internal static string RelativeWidthTag;
    internal static string HRefTag;
    private static ODFConstants();
}
internal class Syncfusion.XlsIO.ODF.Base.ODFSerialization.ODFWriter : object {
    private ZipArchive m_archieve;
    private XmlWriter m_writer;
    private XmlWriter CreateWriter(Stream data);
    internal void SaveDocument(string fileName);
    internal void SaveDocument(Stream stream);
    internal void SerializeDocumentManifest();
    internal void SerializeMimeType();
    internal void SerializeContent(MemoryStream stream);
    internal void SerializeMetaData();
    internal void SerializeSettings();
    internal MemoryStream SerializeContentNameSpace();
    internal void SerializeContentEnd(MemoryStream stream);
    internal void SerializeBodyStart();
    internal void SerializeDefaultStyles(DefaultStyleCollection defaultStyle);
    private void SerializeCalculationSettings();
    internal void SerializeTables(List`1<OTable> tables);
    private void WriteOutlineEnd(OTableColumn column, OTableColumn nxtColumn, Int32& level, Int32& colIncrement);
    private void WriteOutlineEndRow(OTableRow curRow, OTableRow nxtRow, Int32& outlineLevel, Int32& increment);
    private void SerilalizeNamedRanges(List`1<OTable> tables);
    private void WriteCellType(OTableCell curCell);
    private void WriteRepeatedCells(OTableRow row, OTableCell cell, int colsRepeated);
    private void SerializeParagraph(OParagraph para);
    private static string ReplaceHexadecimalSymbols(string txt);
    private static string ReplaceHexSymbols(string txt);
    private static bool IsHexa(string value);
    internal void SerializeExcelBody(List`1<OTable> tables);
    internal MemoryStream SerializeStyleStart();
    internal void SerializeStylesEnd(MemoryStream stream);
    public static string ToReadableString(TimeSpan span);
    internal void SerializeFontFaceDecls(List`1<FontFace> fonts);
    internal void SerializeFontface(FontFace font);
    internal void SerializeDataStyles(ODFStyleCollection styles);
    internal void SerializeDataStylesStart();
    internal void SerializeGeneralStyle(NumberStyle style);
    internal void SerializeNumberStyle(DataStyle nFormat);
    internal void SerializeNumberToken(CurrencyStyle style);
    internal void SerializeDateToken();
    internal void SerializeCommonStyles(ODFStyleCollection styles);
    internal void SerializeODFStyles(ODFStyleCollection ODFStyles);
    internal void SerializeGraphicProperties(GraphicProperties shapeProp);
    internal void SerializeTableDefaultStyle();
    internal void SerializeDefaultGraphicStyle();
    private void SerializeTableProperties(OTableProperties tableProp);
    private void SerializeColumnProprties(OTableColumnProperties tableColumnProp);
    private void SerializeRowProprties(OTableRowProperties tableRowProp);
    private void SerializeSectionProperties(SectionProperties sectionProps);
    private void SerializeParagraphProperties(ODFParagraphProperties paraProp);
    private void SerializeExcelTableCellProperties(OTableCellProperties cellProp);
    private void SerializeTableCellProperties(OTableCellProperties cellProp);
    internal void SerializeTextProperties(TextProperties txtProp);
    internal void SerializeTextToken(string text);
    internal void SerializeAutomaticStyles(PageLayoutCollection layouts);
    internal void SerializeAutoStyleStart();
    internal void SerializeContentAutoStyles(ODFStyleCollection styles);
    internal void SerializeMasterStyles(MasterPageCollection mPages);
    internal void SerializeHeaderLeftStart();
    internal void SerializeFooterLeftStart();
    internal void SerializeHeaderStart();
    internal void SerializeFooterStart();
    internal void SerializeMasterStylesStart();
    internal void SerializeEnd();
    private void SerializePageLayouts(PageLayoutCollection layouts);
    private void SerializeHeaderFooterStyles(PageLayout layout);
    private void SerializeHeaderFooterProperties(HeaderFooterStyle HFStyle);
    private static string HexConverter(Color c);
    internal void Dispose();
    internal void SerializeComments(Annotation comment);
}
internal enum Syncfusion.XlsIO.ODF.Base.OFieldType : Enum {
    public int value__;
    public static OFieldType FieldNone;
    public static OFieldType FieldAddin;
    public static OFieldType FieldAdvance;
    public static OFieldType FieldAsk;
    public static OFieldType FieldAuthor;
    public static OFieldType FieldAutoNum;
    public static OFieldType FieldAutoNumLegal;
    public static OFieldType FieldAutoNumOutline;
    public static OFieldType FieldAutoText;
    public static OFieldType FieldAutoTextList;
    public static OFieldType FieldBarCode;
    public static OFieldType FieldComments;
    public static OFieldType FieldCompare;
    public static OFieldType FieldCreateDate;
    public static OFieldType FieldData;
    public static OFieldType FieldDatabase;
    public static OFieldType FieldDate;
    public static OFieldType FieldDDE;
    public static OFieldType FieldDDEAuto;
    public static OFieldType FieldDocProperty;
    public static OFieldType FieldDocVariable;
    public static OFieldType FieldEditTime;
    public static OFieldType FieldEmbed;
    public static OFieldType FieldEmpty;
    public static OFieldType FieldExpression;
    public static OFieldType FieldFileName;
    public static OFieldType FieldFileSize;
    public static OFieldType FieldFillIn;
    public static OFieldType FieldFootnoteRef;
    public static OFieldType FieldFormCheckBox;
    public static OFieldType FieldFormDropDown;
    public static OFieldType FieldFormTextInput;
    public static OFieldType FieldFormula;
    public static OFieldType FieldGlossary;
    public static OFieldType FieldGoToButton;
    public static OFieldType FieldHTMLActiveX;
    public static OFieldType FieldHyperlink;
    public static OFieldType FieldIf;
    public static OFieldType FieldImport;
    public static OFieldType FieldInclude;
    public static OFieldType FieldIncludePicture;
    public static OFieldType FieldIncludeText;
    public static OFieldType FieldIndex;
    public static OFieldType FieldIndexEntry;
    public static OFieldType FieldInfo;
    public static OFieldType FieldKeyWord;
    public static OFieldType FieldLastSavedBy;
    public static OFieldType FieldLink;
    public static OFieldType FieldListNum;
    public static OFieldType FieldMacroButton;
    public static OFieldType FieldMergeField;
    public static OFieldType FieldMergeRec;
    public static OFieldType FieldMergeSeq;
    public static OFieldType FieldNext;
    public static OFieldType FieldNextIf;
    public static OFieldType FieldNoteRef;
    public static OFieldType FieldNumChars;
    public static OFieldType FieldNumPages;
    public static OFieldType FieldNumWords;
    public static OFieldType FieldOCX;
    public static OFieldType FieldPage;
    public static OFieldType FieldPageRef;
    public static OFieldType FieldPrint;
    public static OFieldType FieldPrintDate;
    public static OFieldType FieldPrivate;
    public static OFieldType FieldQuote;
    public static OFieldType FieldRef;
    public static OFieldType FieldRefDoc;
    public static OFieldType FieldRevisionNum;
    public static OFieldType FieldSaveDate;
    public static OFieldType FieldSection;
    public static OFieldType FieldSectionPages;
    public static OFieldType FieldSequence;
    public static OFieldType FieldSet;
    public static OFieldType FieldSkipIf;
    public static OFieldType FieldStyleRef;
    public static OFieldType FieldSubject;
    public static OFieldType FieldSubscriber;
    public static OFieldType FieldSymbol;
    public static OFieldType FieldTemplate;
    public static OFieldType FieldTime;
    public static OFieldType FieldTitle;
    public static OFieldType FieldTOA;
    public static OFieldType FieldTOAEntry;
    public static OFieldType FieldTOC;
    public static OFieldType FieldTOCEntry;
    public static OFieldType FieldUserAddress;
    public static OFieldType FieldUserInitials;
    public static OFieldType FieldUserName;
    public static OFieldType FieldShape;
    public static OFieldType FieldBidiOutline;
    public static OFieldType FieldAddressBlock;
    public static OFieldType FieldUnknown;
}
internal enum Syncfusion.XlsIO.ODF.Base.PageNumberFormat : Enum {
    public int value__;
    public static PageNumberFormat Numerical;
    public static PageNumberFormat LowerRoman;
    public static PageNumberFormat UpperRoman;
    public static PageNumberFormat LowerCase;
    public static PageNumberFormat UpperCase;
    public static PageNumberFormat UpperAlphabet;
    public static PageNumberFormat LowerAlphabet;
    public static PageNumberFormat Arabic;
    public static PageNumberFormat Ordinal;
    public static PageNumberFormat CardinalText;
    public static PageNumberFormat OrdinalText;
    public static PageNumberFormat Hexa;
    public static PageNumberFormat DollorText;
    public static PageNumberFormat ArabicDash;
}
internal enum Syncfusion.XlsIO.ODF.Base.PageOrder : Enum {
    public int value__;
    public static PageOrder ttb;
    public static PageOrder ltr;
}
internal enum Syncfusion.XlsIO.ODF.Base.PageUsage : Enum {
    public int value__;
    public static PageUsage all;
    public static PageUsage left;
    public static PageUsage mirrored;
    public static PageUsage right;
}
internal enum Syncfusion.XlsIO.ODF.Base.PrintOrientation : Enum {
    public int value__;
    public static PrintOrientation portrait;
    public static PrintOrientation landscape;
}
internal enum Syncfusion.XlsIO.ODF.Base.PunctuationWrap : Enum {
    public int value__;
    public static PunctuationWrap simple;
    public static PunctuationWrap hanging;
}
internal enum Syncfusion.XlsIO.ODF.Base.RefPoint : Enum {
    public int value__;
    public static RefPoint TopLeft;
    public static RefPoint Top;
    public static RefPoint TopRight;
    public static RefPoint Left;
    public static RefPoint Center;
    public static RefPoint Right;
    public static RefPoint BottomLeft;
    public static RefPoint Bottom;
    public static RefPoint BottomRight;
}
internal enum Syncfusion.XlsIO.ODF.Base.SelectPage : Enum {
    public int value__;
    public static SelectPage previous;
    public static SelectPage current;
    public static SelectPage next;
}
internal enum Syncfusion.XlsIO.ODF.Base.Shadow : Enum {
    public int value__;
    public static Shadow Visible;
    public static Shadow Hidden;
}
internal enum Syncfusion.XlsIO.ODF.Base.Stroke : Enum {
    public int value__;
    public static Stroke None;
    public static Stroke Dash;
    public static Stroke Solid;
}
internal enum Syncfusion.XlsIO.ODF.Base.StrokeLineCap : Enum {
    public int value__;
    public static StrokeLineCap Butt;
    public static StrokeLineCap Square;
    public static StrokeLineCap Round;
}
internal enum Syncfusion.XlsIO.ODF.Base.StrokeLineJoin : Enum {
    public int value__;
    public static StrokeLineJoin Miter;
    public static StrokeLineJoin Round;
    public static StrokeLineJoin Bevel;
    public static StrokeLineJoin Middle;
    public static StrokeLineJoin None;
    public static StrokeLineJoin Inherit;
}
internal enum Syncfusion.XlsIO.ODF.Base.TableCentering : Enum {
    public int value__;
    public static TableCentering None;
    public static TableCentering Horizontal;
    public static TableCentering Vertical;
    public static TableCentering Both;
}
internal enum Syncfusion.XlsIO.ODF.Base.TabStopLeader : Enum {
    public int value__;
    public static TabStopLeader NoLeader;
    public static TabStopLeader Dotted;
    public static TabStopLeader Hyphenated;
    public static TabStopLeader Single;
    public static TabStopLeader Heavy;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextAlign : Enum {
    public int value__;
    public static TextAlign start;
    public static TextAlign end;
    public static TextAlign left;
    public static TextAlign right;
    public static TextAlign center;
    public static TextAlign justify;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextAlignLast : Enum {
    public int value__;
    public static TextAlignLast start;
    public static TextAlignLast center;
    public static TextAlignLast justify;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextAreaHAlign : Enum {
    public int value__;
    public static TextAreaHAlign Left;
    public static TextAreaHAlign Center;
    public static TextAreaHAlign Right;
    public static TextAreaHAlign Justify;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextAreaVAlign : Enum {
    public int value__;
    public static TextAreaVAlign Top;
    public static TextAreaVAlign Middle;
    public static TextAreaVAlign Bottom;
    public static TextAreaVAlign Justify;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextAutoSpace : Enum {
    public int value__;
    public static TextAutoSpace none;
    public static TextAutoSpace ideographalpha;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextDisplay : Enum {
    public int value__;
    public static TextDisplay True;
    public static TextDisplay none;
    public static TextDisplay condition;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextPosition : Enum {
    public int value__;
    public static TextPosition Super;
    public static TextPosition Sub;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextRotationScale : Enum {
    public int value__;
    public static TextRotationScale Fixed;
    public static TextRotationScale lineheight;
}
internal enum Syncfusion.XlsIO.ODF.Base.TextWrappingStyle : Enum {
    public int value__;
    public static TextWrappingStyle Inline;
    public static TextWrappingStyle TopAndBottom;
    public static TextWrappingStyle Square;
    public static TextWrappingStyle InFrontOfText;
    public static TextWrappingStyle Tight;
    public static TextWrappingStyle Through;
    public static TextWrappingStyle Behind;
}
internal enum Syncfusion.XlsIO.ODF.Base.Transform : Enum {
    public int value__;
    public static Transform none;
    public static Transform lowercase;
    public static Transform uppercase;
    public static Transform capitalize;
}
internal enum Syncfusion.XlsIO.ODF.Base.Unit : Enum {
    public int value__;
    public static Unit Automatic;
    public static Unit MilliMeter;
    public static Unit CentiMeter;
    public static Unit Meter;
    public static Unit KiloMeter;
    public static Unit Point;
    public static Unit Pica;
    public static Unit Inch;
    public static Unit Feet;
    public static Unit Mile;
}
internal enum Syncfusion.XlsIO.ODF.Base.VerticalAlign : Enum {
    public int value__;
    public static VerticalAlign top;
    public static VerticalAlign middle;
    public static VerticalAlign bottom;
    public static VerticalAlign automatic;
    public static VerticalAlign baseline;
}
internal enum Syncfusion.XlsIO.ODF.Base.WritingMode : Enum {
    public int value__;
    public static WritingMode LRTB;
    public static WritingMode RLTB;
    public static WritingMode TBRL;
    public static WritingMode TBLR;
    public static WritingMode LR;
    public static WritingMode RL;
    public static WritingMode TB;
    public static WritingMode Page;
}
internal class Syncfusion.XlsIO.ODFConverter.Base.ODFImplementation.Heading : ODFParagraphProperties {
    private string m_classNames;
    private string m_condStyleName;
    private int m_id;
    private bool m_isListHeader;
    private int m_outlineLevel;
    private bool m_restartNumbering;
    private UInt32 m_startValue;
    private string m_styleName;
    internal string StyleName { get; internal set; }
    internal UInt32 StartValue { get; internal set; }
    internal bool RestartNumbering { get; internal set; }
    internal int OutlineLevel { get; internal set; }
    internal bool IsListHeader { get; internal set; }
    internal int Id { get; internal set; }
    internal string CondStyleName { get; internal set; }
    internal string ClassNames { get; internal set; }
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal UInt32 get_StartValue();
    internal void set_StartValue(UInt32 value);
    internal bool get_RestartNumbering();
    internal void set_RestartNumbering(bool value);
    internal int get_OutlineLevel();
    internal void set_OutlineLevel(int value);
    internal bool get_IsListHeader();
    internal void set_IsListHeader(bool value);
    internal int get_Id();
    internal void set_Id(int value);
    internal string get_CondStyleName();
    internal void set_CondStyleName(string value);
    internal string get_ClassNames();
    internal void set_ClassNames(string value);
}
internal class Syncfusion.XlsIO.ODFConverter.Base.ODFImplementation.ListHeader : object {
    private Heading m_heading;
    private List m_list;
    private ODFParagraphProperties m_paragraph;
    internal ODFParagraphProperties Paragraph { get; internal set; }
    internal List List { get; internal set; }
    internal Heading Heading { get; internal set; }
    internal ODFParagraphProperties get_Paragraph();
    internal void set_Paragraph(ODFParagraphProperties value);
    internal List get_List();
    internal void set_List(List value);
    internal Heading get_Heading();
    internal void set_Heading(Heading value);
}
internal class Syncfusion.XlsIO.ODFConverter.Base.ODFImplementation.ListItem : ListHeader {
}
internal class Syncfusion.XlsIO.ODFConverter.Base.ODFImplementation.NumberedParagraph : object {
    private bool m_isContinueNumbering;
    private int m_level;
    private int m_listId;
    private int m_startValue;
    private string m_styleName;
    private ODFParagraphProperties m_paragraphStyle;
    private Heading m_headingStyle;
    internal Heading HeadingStyle { get; internal set; }
    internal ODFParagraphProperties ParagraphStyle { get; internal set; }
    internal string StyleName { get; internal set; }
    internal int StartValue { get; internal set; }
    internal int ListId { get; internal set; }
    internal int Level { get; internal set; }
    internal bool IsContinueNumbering { get; internal set; }
    internal Heading get_HeadingStyle();
    internal void set_HeadingStyle(Heading value);
    internal ODFParagraphProperties get_ParagraphStyle();
    internal void set_ParagraphStyle(ODFParagraphProperties value);
    internal string get_StyleName();
    internal void set_StyleName(string value);
    internal int get_StartValue();
    internal void set_StartValue(int value);
    internal int get_ListId();
    internal void set_ListId(int value);
    internal int get_Level();
    internal void set_Level(int value);
    internal bool get_IsContinueNumbering();
    internal void set_IsContinueNumbering(bool value);
}
internal class Syncfusion.XlsIO.ODFConverter.Base.ODFImplementation.OTableOfContent : object {
    private string m_name;
    private bool m_isProtected;
    private string m_protectionKey;
    private string m_protectionKeyDigestAlgorithm;
    internal string ProtectionKeyDigestAlgorithm { get; internal set; }
    internal string ProtectionKey { get; internal set; }
    internal bool Isprotected { get; internal set; }
    internal string Name { get; internal set; }
    internal string get_ProtectionKeyDigestAlgorithm();
    internal void set_ProtectionKeyDigestAlgorithm(string value);
    internal string get_ProtectionKey();
    internal void set_ProtectionKey(string value);
    internal bool get_Isprotected();
    internal void set_Isprotected(bool value);
    internal string get_Name();
    internal void set_Name(string value);
}
internal class Syncfusion.XlsIO.ODFConverter.Base.ODFImplementation.Section : object {
    private string m_styleName;
    internal string StyleName { get; internal set; }
    internal string get_StyleName();
    internal void set_StyleName(string value);
}
internal class Syncfusion.XlsIO.ODFConverter.Base.ODFImplementation.Styles.List : object {
    private string m_continueList;
    private bool m_isContinueNumbering;
    private ListHeader m_listHeader;
    private ListItem m_listItem;
    internal ListItem ListItem { get; internal set; }
    internal ListHeader ListHeader { get; internal set; }
    internal bool IsContinueNumbering { get; internal set; }
    internal string ContinueList { get; internal set; }
    internal ListItem get_ListItem();
    internal void set_ListItem(ListItem value);
    internal ListHeader get_ListHeader();
    internal void set_ListHeader(ListHeader value);
    internal bool get_IsContinueNumbering();
    internal void set_IsContinueNumbering(bool value);
    internal string get_ContinueList();
    internal void set_ContinueList(string value);
}
internal class Syncfusion.XlsIO.ODFConverter.Base.ODFImplementation.Text : object {
    private OParagraph m_paragraph;
    private Heading m_heading;
    private List m_list;
    private NumberedParagraph m_numberedParagraph;
    private Section m_section;
    private OTableOfContent m_tableOfContent;
    private bool m_isSoftPageBreak;
    private OParagraphCollection m_paraItem;
    internal OParagraphCollection ParagraphItem { get; internal set; }
    internal bool IsSoftPageBreak { get; internal set; }
    internal OTableOfContent TableOfContent { get; internal set; }
    internal Section Section { get; internal set; }
    internal NumberedParagraph NumberedParagraph { get; internal set; }
    internal List List { get; internal set; }
    internal Heading Heading { get; internal set; }
    internal OParagraph Paragraph { get; internal set; }
    internal OParagraphCollection get_ParagraphItem();
    internal void set_ParagraphItem(OParagraphCollection value);
    internal bool get_IsSoftPageBreak();
    internal void set_IsSoftPageBreak(bool value);
    internal OTableOfContent get_TableOfContent();
    internal void set_TableOfContent(OTableOfContent value);
    internal Section get_Section();
    internal void set_Section(Section value);
    internal NumberedParagraph get_NumberedParagraph();
    internal void set_NumberedParagraph(NumberedParagraph value);
    internal List get_List();
    internal void set_List(List value);
    internal Heading get_Heading();
    internal void set_Heading(Heading value);
    internal OParagraph get_Paragraph();
    internal void set_Paragraph(OParagraph value);
}
internal class Syncfusion.XlsIO.ODSConversion.ExcelToODSConverter : object {
    private WorkbookImpl m_book;
    private ODFWriter m_writer;
    private List`1<string> pageNames;
    private static string DEF_RANGE_REF;
    private static string DefaultStyleName;
    private static int DEF_ROTATION_ANGLE;
    private RecordExtractor m_recordExtractor;
    public ExcelToODSConverter(WorkbookImpl book);
    internal void ConvertFonts();
    internal void ConvertToODF(Stream stream);
    internal void MapDocumentStyles();
    internal void ConvertDataStyles();
    internal void ConvertContentAutoStyles();
    private void ConvertTableProperties(WorksheetImpl sheet, OTableProperties tblProp);
    internal void MapContent();
    private void ConvertNumberStyles();
    private ODFStyleCollection ConvertCellStyles(ODFStyleCollection cellStyles);
    private ODFStyle ConvertCellStyle(IExtendedFormat curStyle, ODFStyle cellStyle);
    private void ConvertParagraphProperties(IExtendedFormat format, ODFStyle cellStyle);
    private TextAlign MapHAlign(ExcelHAlign halign);
    private TextAlign MapHAlign(ExcelCommentHAlign halign);
    private string ProcessName(string styleName);
    private OTableColumn ConvertColumnStyle(ColumnInfoRecord XlColumn, OTableColumn column, ODFStyleCollection styles);
    private OTableRow ConvertRowStyle(RowStorage row, OTableRow tableRow, ODFStyleCollection tableStyles);
    internal OTable ConvertTableStyle(WorksheetImpl sheet, OTable table, ODFStyleCollection styles);
    private OTableColumnProperties ConvertTableColumnProperties(ColumnInfoRecord column);
    private OTableRowProperties ConvertTableRowProperties(RowStorage row);
    private void ConvertTableCellProperties(IExtendedFormat format, ODFStyle cellStyle);
    private void ConvertTextPropeties(IExtendedFormat format, ODFStyle cellStyle);
    private void MapUnderlineStyle(TextProperties txtProp, ExcelUnderline underLine);
    private void ConvertAutomaticAndMasterStyles();
    private void ConvertPageLayouts(IPageSetup setup, PageLayout layout);
    private void GetColumns(WorksheetImpl sheet, OTable table, ODFStyleCollection tableStyles);
    private void ConvertTableData(ODFStyleCollection tableStyles);
    private void GetComment(WorksheetImpl sheet, IComment comment, OTableCell cell, ODFStyleCollection styles);
    private ODFStyle FillCommentShapeStyle(CommentShapeImpl commentShape);
    private void AddCommentText(string text, string styleName, OParagraph para);
    private FillType MapGraphicFillType(ExcelFillType type);
    private ODFStyle GetSpanTextProperties(int index, IFont defaultFont);
    private ODFStyle ConvertParagraphProperties(CommentShapeImpl shape);
    private void GetCellType(long cellIndex, OTableCell cell, WorksheetImpl sheet, CellRecordCollection cells, RowStorage row);
    private BiffRecordRaw GetRecord(RowStorage row, int colIndex);
    private void ConvertNamedRanges(OTable table);
    private string GenerateODFFormula(Ptg[] ptgs, string formula, FormulaUtil util, WorksheetImpl sheet);
    private StringBuilder ProcessFormula(String& formula, string orgString, string replacableString, StringBuilder builder);
    private string CheckForCulturePattern(string formatString);
    private void LoadDefaults(WorksheetImpl sheet, ODFStyleCollection styles, OTable table);
    private void LoadDefaultRowStyle(ODFStyleCollection tableStyles, WorksheetImpl sheet);
    private void LoadDefaultColumnStyle(ODFStyleCollection tableStyles, WorksheetImpl sheet);
    private void SerializeExcelBody(List`1<OTable> tables);
    private void MapCellName(ICellPositionFormat cellRecord, ODFStyleCollection inlineStyles, OTableCell cell, WorksheetImpl sheet);
    private void ConvertPageLayoutProperties(IPageSetup setup, PageLayout layout);
    private void ConvertHeaderFooterStyles(IPageSetup setup, PageLayout layout);
    private void LoadMasterPage(IPageSetup setup, MasterPage page);
    private void LoadHeaderFooter(IPageSetup setup, MasterPage page);
    internal BorderLineStyle MapBorders(ODFBorder border, ExcelLineStyle style);
    private int UpdateCommentRange(IWorksheet sheet);
    internal void Dispose();
}
public enum Syncfusion.XlsIO.OleLinkType : Enum {
    public int value__;
    public static OleLinkType Embed;
    public static OleLinkType Link;
}
public enum Syncfusion.XlsIO.OleObjectType : Enum {
    public int value__;
    public static OleObjectType Undefined;
    public static OleObjectType AdobeAcrobatDocument;
    public static OleObjectType BitmapImage;
    public static OleObjectType MediaClip;
    public static OleObjectType Equation;
    public static OleObjectType GraphChart;
    public static OleObjectType Excel_97_2003_Worksheet;
    public static OleObjectType ExcelBinaryWorksheet;
    public static OleObjectType ExcelChart;
    public static OleObjectType ExcelMacroWorksheet;
    public static OleObjectType ExcelWorksheet;
    public static OleObjectType PowerPoint_97_2003_Presentation;
    public static OleObjectType PowerPoint_97_2003_Slide;
    public static OleObjectType PowerPointMacroPresentation;
    public static OleObjectType PowerPointMacroSlide;
    public static OleObjectType PowerPointPresentation;
    public static OleObjectType PowerPointSlide;
    public static OleObjectType Word_97_2003_Document;
    public static OleObjectType WordDocument;
    public static OleObjectType WordMacroDocument;
    public static OleObjectType VisioDrawing;
    public static OleObjectType MIDISequence;
    public static OleObjectType OpenDocumentPresentation;
    public static OleObjectType OpenDocumentSpreadsheet;
    public static OleObjectType OpenDocumentText;
    public static OleObjectType OpenOfficeSpreadsheet1_1;
    public static OleObjectType OpenOfficeText_1_1;
    public static OleObjectType Package;
    public static OleObjectType VideoClip;
    public static OleObjectType WaveSound;
    public static OleObjectType WordPadDocument;
    public static OleObjectType OpenOfficeSpreadsheet;
    public static OleObjectType OpenOfficeText;
}
public enum Syncfusion.XlsIO.OrderBy : Enum {
    public int value__;
    public static OrderBy Ascending;
    public static OrderBy Descending;
    public static OrderBy OnTop;
    public static OrderBy OnBottom;
}
[BiffAttribute("545")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ArrayRecord : BiffRecordRaw {
    private static int DEF_RECORD_MIN_SIZE;
    private static int DEF_FORMULA_OFFSET;
    [BiffRecordPosAttribute("0", "2")]
private int m_iFirstRow;
    [BiffRecordPosAttribute("2", "2")]
private int m_iLastRow;
    [BiffRecordPosAttribute("4", "1")]
private int m_iFirstColumn;
    [BiffRecordPosAttribute("5", "1")]
private int m_iLastColumn;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("6", "0", "1")]
private bool m_bRecalculateAlways;
    [BiffRecordPosAttribute("6", "1", "1")]
private bool m_bRecalculateOnOpen;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iReserved;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usExpressionLength;
    private Byte[] m_arrExpression;
    private Ptg[] m_arrFormula;
    public int FirstRow { get; public set; }
    public int LastRow { get; public set; }
    public int FirstColumn { get; public set; }
    public int LastColumn { get; public set; }
    public ushort ExpressionLen { get; }
    public Byte[] Expression { get; public set; }
    public Ptg[] Formula { get; public set; }
    public int Reserved { get; }
    public int MinimumRecordSize { get; }
    public bool IsRecalculateAlways { get; public set; }
    public bool IsRecalculateOnOpen { get; public set; }
    public ushort Options { get; }
    public ArrayRecord(Stream stream, Int32& itemSize);
    public ArrayRecord(int iReserve);
    public sealed virtual int get_FirstRow();
    public sealed virtual void set_FirstRow(int value);
    public sealed virtual int get_LastRow();
    public sealed virtual void set_LastRow(int value);
    public sealed virtual int get_FirstColumn();
    public sealed virtual void set_FirstColumn(int value);
    public sealed virtual int get_LastColumn();
    public sealed virtual void set_LastColumn(int value);
    public ushort get_ExpressionLen();
    public Byte[] get_Expression();
    public void set_Expression(Byte[] value);
    public sealed virtual Ptg[] get_Formula();
    public sealed virtual void set_Formula(Ptg[] value);
    public int get_Reserved();
    public virtual int get_MinimumRecordSize();
    public bool get_IsRecalculateAlways();
    public void set_IsRecalculateAlways(bool value);
    public bool get_IsRecalculateOnOpen();
    public void set_IsRecalculateOnOpen(bool value);
    public ushort get_Options();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public static int SerializeDimensions(ISharedFormula shared, DataProvider provider, int iOffset, ExcelVersion version);
    public static int ParseDimensions(ISharedFormula shared, DataProvider provider, int iOffset, ExcelVersion version);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
}
[BiffAttribute("157")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.AutoFilterInfoRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usArrowsCount;
    public bool NeedDataArray { get; }
    public int MaximumRecordSize { get; }
    public int MinimumRecordSize { get; }
    public ushort ArrowsCount { get; public set; }
    public AutoFilterInfoRecord(Stream stream, Int32& itemSize);
    public AutoFilterInfoRecord(int iReserve);
    public virtual bool get_NeedDataArray();
    public virtual int get_MaximumRecordSize();
    public virtual int get_MinimumRecordSize();
    public ushort get_ArrowsCount();
    public void set_ArrowsCount(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("158")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.AutoFilterRecord : BiffRecordRaw {
    private static int DEF_RECORD_MIN_SIZE;
    private static int DEF_TOP10_BITMASK;
    private static int DEF_TOP10_FIRSTBIT;
    private static int DEF_FIRST_CONDITION_OFFSET;
    private static int DEF_SECOND_CONDITION_OFFSET;
    private static int DEF_ADDITIONAL_OFFSET;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usIndex;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("2", "0", "1")]
private bool m_bOr;
    [BiffRecordPosAttribute("2", "2", "1")]
private bool m_bSimple1;
    [BiffRecordPosAttribute("2", "3", "1")]
private bool m_bSimple2;
    [BiffRecordPosAttribute("2", "4", "1")]
private bool m_bTop10;
    [BiffRecordPosAttribute("2", "5", "1")]
private bool m_bTop;
    [BiffRecordPosAttribute("2", "6", "1")]
private bool m_bPercent;
    private DOPER m_firstCondition;
    private DOPER m_secondCondition;
    public bool NeedDataArray { get; }
    public int MinimumRecordSize { get; }
    public ushort Index { get; public set; }
    public ushort Options { get; }
    public bool IsSimple1 { get; public set; }
    public bool IsSimple2 { get; public set; }
    public bool IsTop10 { get; public set; }
    public bool IsTop { get; public set; }
    public bool IsPercent { get; public set; }
    public bool IsAnd { get; public set; }
    public int Top10Number { get; public set; }
    public DOPER FirstCondition { get; }
    public DOPER SecondCondition { get; }
    public bool IsBlank { get; }
    public bool IsNonBlank { get; }
    public AutoFilterRecord(Stream stream, Int32& itemSize);
    public AutoFilterRecord(int iReserve);
    public virtual bool get_NeedDataArray();
    public virtual int get_MinimumRecordSize();
    public ushort get_Index();
    public void set_Index(ushort value);
    public ushort get_Options();
    public bool get_IsSimple1();
    public void set_IsSimple1(bool value);
    public bool get_IsSimple2();
    public void set_IsSimple2(bool value);
    public bool get_IsTop10();
    public void set_IsTop10(bool value);
    public bool get_IsTop();
    public void set_IsTop(bool value);
    public bool get_IsPercent();
    public void set_IsPercent(bool value);
    public bool get_IsAnd();
    public void set_IsAnd(bool value);
    public int get_Top10Number();
    public void set_Top10Number(int value);
    public DOPER get_FirstCondition();
    public DOPER get_SecondCondition();
    public bool get_IsBlank();
    public bool get_IsNonBlank();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual object Clone();
}
[BiffAttribute("64")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BackupRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usBackup;
    public ushort Backup { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public BackupRecord(Stream stream, Int32& itemSize);
    public BackupRecord(int iReserve);
    public ushort get_Backup();
    public void set_Backup(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4147")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BeginRecord : BiffRecordRawWithArray {
    public int MaximumRecordSize { get; }
    public BeginRecord(Stream stream, Int32& itemSize);
    public BeginRecord(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[AttributeUsageAttribute("4")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BiffAttribute : Attribute {
    private TBIFFRecord m_code;
    public TBIFFRecord Code { get; }
    public BiffAttribute(TBIFFRecord code);
    public TBIFFRecord get_Code();
}
[CLSCompliantAttribute("False")]
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.BiffContinueRecordRaw : BiffRecordRawWithArray {
    protected ContinueRecordExtractor m_extractor;
    private ContinueRecordBuilder m_builder;
    protected internal List`1<int> m_arrContinuePos;
    private int m_iIntLen;
    protected ContinueRecordBuilder Builder { get; }
    protected BiffContinueRecordRaw(Stream stream, Int32& itemSize);
    protected BiffContinueRecordRaw(int iReserve);
    protected ContinueRecordBuilder get_Builder();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    protected virtual ContinueRecordBuilder CreateBuilder();
    public virtual int FillRecord(BinaryReader reader, DataProvider provider, IDecryptor decryptor, Byte[] arrBuffer);
    public virtual int FillStream(BinaryWriter writer, IEncryptor encryptor, int streamPosition);
    protected virtual bool ExtractContinueRecords();
    protected List`1<Byte[]> CollectRecordsData(Int32& iFullLength, Int32& iLastPos);
    protected virtual int AddRecordData(List`1<Byte[]> arrRecords, BiffRecordRaw record);
    protected virtual void builder_OnFirstContinue(object sender, EventArgs e);
    protected void AddContinueRecordType(TBIFFRecord recordType);
    public virtual object Clone();
}
[AttributeUsageAttribute("4")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BiffOffsetOrderAttribute : Attribute {
    private TBIFFRecord[] m_order;
    public TBIFFRecord[] OrderArray { get; }
    public BiffOffsetOrderAttribute(TBIFFRecord[] order);
    public TBIFFRecord[] get_OrderArray();
}
[AttributeUsageAttribute("4")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BiffOffsetsRecordsAttribute : Attribute {
    private TBIFFRecord m_type;
    public TBIFFRecord OffsetsRecordsType { get; }
    public BiffOffsetsRecordsAttribute(TBIFFRecord type);
    public TBIFFRecord get_OffsetsRecordsType();
}
[AttributeUsageAttribute("256")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BiffRecordPosAttribute : Attribute {
    private int m_iPos;
    private int m_iSize;
    private bool m_bIsBit;
    private bool m_bIsString;
    private bool m_bIsString16Bit;
    private bool m_bIsOEMString;
    private bool m_bIsOEMString16Bit;
    private bool m_bIsFloat;
    private bool m_bSigned;
    public int Position { get; }
    public int SizeOrBitPosition { get; }
    public bool IsBit { get; }
    public bool IsSigned { get; }
    public bool IsString { get; }
    public bool IsString16Bit { get; }
    public bool IsFloat { get; }
    public bool IsOEMString { get; }
    public bool IsOEMString16Bit { get; }
    public BiffRecordPosAttribute(int pos, int size, bool isSigned, TFieldType type);
    public BiffRecordPosAttribute(int pos, int size, bool isSigned);
    public BiffRecordPosAttribute(int pos, int size, TFieldType type);
    public BiffRecordPosAttribute(int pos, TFieldType type);
    public BiffRecordPosAttribute(int pos, int size);
    public int get_Position();
    public int get_SizeOrBitPosition();
    public bool get_IsBit();
    public bool get_IsSigned();
    public bool get_IsString();
    public bool get_IsString16Bit();
    public bool get_IsFloat();
    public bool get_IsOEMString();
    public bool get_IsOEMString16Bit();
    public sealed virtual int CompareTo(object obj);
}
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.BiffRecordRaw : object {
    private static int DEF_RESERVE_SIZE;
    public static int DEF_RECORD_MAX_SIZE;
    public static int DEF_RECORD_MAX_SIZE_WITH_HADER;
    public static int DEF_HEADER_SIZE;
    public static int DEF_BITS_IN_BYTE;
    private static int DEF_BITS_IN_SHORT;
    private static int DEF_BITS_IN_INT;
    internal static Dictionary`2<int, SortedList`2<BiffRecordPosAttribute, FieldInfo>> m_ReflectCache;
    private static Encoding s_latin1;
    protected int m_iCode;
    protected int m_iLength;
    private bool m_bNeedInfill;
    public TBIFFRecord TypeCode { get; }
    public int RecordCode { get; }
    public int Length { get; public set; }
    public Byte[] Data { get; public set; }
    public bool AutoGrowData { get; public set; }
    public long StreamPos { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public int MaximumMemorySize { get; }
    public bool NeedInfill { get; public set; }
    public bool NeedDataArray { get; }
    public bool IsAllowShortData { get; }
    public bool NeedDecoding { get; }
    public int StartDecodingOffset { get; }
    public static Encoding LatinEncoding { get; }
    protected BiffRecordRaw(Stream stream, Int32& itemSize);
    protected BiffRecordRaw(BinaryReader reader, Int32& itemSize);
    protected BiffRecordRaw(int iReserve);
    private static BiffRecordRaw();
    public static int SkipBeginEndBlock(IList`1<BiffRecordRaw> recordList, int iPos);
    public sealed virtual TBIFFRecord get_TypeCode();
    public sealed virtual int get_RecordCode();
    public int get_Length();
    public void set_Length(int value);
    public virtual Byte[] get_Data();
    public virtual void set_Data(Byte[] value);
    public virtual bool get_AutoGrowData();
    public virtual void set_AutoGrowData(bool value);
    public virtual long get_StreamPos();
    public virtual void set_StreamPos(long value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual int get_MaximumMemorySize();
    public bool get_NeedInfill();
    public void set_NeedInfill(bool value);
    public virtual bool get_NeedDataArray();
    public virtual bool get_IsAllowShortData();
    public virtual bool get_NeedDecoding();
    public virtual int get_StartDecodingOffset();
    internal static ushort GetUInt16BitsByMask(ushort value, ushort BitMask);
    internal static void SetUInt16BitsByMask(UInt16& destination, ushort BitMask, ushort value);
    internal static UInt32 GetUInt32BitsByMask(UInt32 value, UInt32 BitMask);
    internal static void SetUInt32BitsByMask(UInt32& destination, UInt32 BitMask, UInt32 value);
    public virtual int FillRecord(BinaryReader reader, DataProvider provider, IDecryptor decryptor, Byte[] arrBuffer);
    public virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    public virtual void UpdateOffsets(List`1<BiffRecordRaw> records);
    public virtual void ParseStructure(DataProvider arrData, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public static void CheckOffsetAndLength(Byte[] arrData, int offset, int length);
    public static Byte[] GetBytes(Byte[] arrData, int offset, int length);
    public static byte GetByte(Byte[] arrData, int offset);
    [CLSCompliantAttribute("False")]
public static ushort GetUInt16(Byte[] arrData, int offset);
    [CLSCompliantAttribute("False")]
public static short GetInt16(Byte[] arrData, int offset);
    public static int GetInt32(Byte[] arrData, int offset);
    [CLSCompliantAttribute("False")]
public static UInt32 GetUInt32(Byte[] arrData, int offset);
    public static long GetInt64(Byte[] arrData, int offset);
    [CLSCompliantAttribute("False")]
public static ulong GetUInt64(Byte[] arrData, int offset);
    public static float GetFloat(Byte[] arrData, int offset);
    public static double GetDouble(Byte[] arrData, int offset);
    public static bool GetBit(Byte[] arrData, int offset, int bitPos);
    public static string GetString16BitUpdateOffset(Byte[] arrData, Int32& offset);
    public static string GetStringUpdateOffset(Byte[] arrData, Int32& offset, int iStrLen);
    public static string GetStringByteLen(Byte[] arrData, int offset);
    public static string GetString(Byte[] arrData, int offset, int iStrLen);
    public static string GetString(Byte[] arrData, int offset, int iStrLen, Int32& iBytesInString, bool isByteCounted);
    public static string GetUnkTypeString(Byte[] arrData, int offset, Int32[] continuePos, Int32& length, Byte[]& rich, Byte[]& extended);
    [CLSCompliantAttribute("False")]
public static TAddr GetAddr(Byte[] arrData, int offset);
    public static Byte[] GetRPNData(Byte[] arrData, int offset, int length);
    protected static int FindNextBreak(IList`1<int> arrBreaks, int iCount, int curPos, Int32& iStartIndex);
    [CLSCompliantAttribute("False")]
public static void SetUInt16(Byte[] arrData, int offset, ushort value);
    public static void SetBit(Byte[] arrData, int offset, bool value, int bitPos);
    public static void SetInt16(Byte[] arrData, int offset, short value);
    public static void SetInt32(Byte[] arrData, int offset, int value);
    [CLSCompliantAttribute("False")]
public static void SetUInt32(Byte[] arrData, int offset, UInt32 value);
    public static void SetDouble(Byte[] arrData, int offset, double value);
    public static void SetStringNoLenUpdateOffset(Byte[] arrData, Int32& offset, string value);
    public static void SetStringByteLen(Byte[] arrData, int offset, string value);
    protected internal static void SetBytes(Byte[] arrBuffer, int offset, Byte[] value, int pos, int length);
    [CLSCompliantAttribute("False")]
protected internal void SetBitInVar(UInt16& variable, bool value, int bitPos);
    [CLSCompliantAttribute("False")]
protected internal void SetBitInVar(UInt32& variable, bool value, int bitPos);
    public int Get16BitStringSize(string strValue, bool isCompressed);
    public virtual void ClearData();
    public virtual bool IsEqual(BiffRecordRaw raw);
    public virtual void CopyTo(BiffRecordRaw raw);
    public void CheckTypeCode(TBIFFRecord typeCode);
    public static bool CompareArrays(Byte[] array1, int iStartIndex1, Byte[] array2, int iStartIndex2, int iLength);
    public static bool CompareArrays(Byte[] array1, Byte[] array2);
    internal void SetRecordCode(int code);
    public virtual object Clone();
    public static Encoding get_LatinEncoding();
    public static Byte[] CombineArrays(int iCombinedLength, List`1<Byte[]> arrCombined);
    public static string GetString(Byte[] arrData, int iOffset, int iLength, Int32& iReadBytes);
    public static int SetStringNoLen(Byte[] arrData, int iOffset, string strValue);
    public static void SetString16BitUpdateOffset(Byte[] arrData, Int32& offset, string value);
    public static bool GetBitFromVar(byte btOptions, int bitPos);
    public static bool GetBitFromVar(short sOptions, int bitPos);
    [CLSCompliantAttribute("False")]
public static bool GetBitFromVar(ushort usOptions, int bitPos);
    public static bool GetBitFromVar(int iOptions, int bitPos);
    [CLSCompliantAttribute("False")]
public static bool GetBitFromVar(UInt32 uiOptions, int bitPos);
    public static int SetBit(int iValue, int bitPos, bool value);
    public static int ReadArray(Byte[] arrSource, int iOffset, Byte[] arrDest);
}
[CLSCompliantAttribute("False")]
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.BiffRecordRawWithArray : BiffRecordRaw {
    protected internal Byte[] m_data;
    private bool m_bAutoGrow;
    public Byte[] Data { get; public set; }
    public bool AutoGrowData { get; public set; }
    protected BiffRecordRawWithArray(Stream stream, Int32& itemSize);
    protected BiffRecordRawWithArray(BinaryReader reader, Int32& itemSize);
    protected BiffRecordRawWithArray(int iReserve);
    protected virtual override void Finalize();
    public virtual Byte[] get_Data();
    public virtual void set_Data(Byte[] value);
    public virtual bool get_AutoGrowData();
    public virtual void set_AutoGrowData(bool value);
    public virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    public virtual int FillStream(BinaryWriter writer, IEncryptor encryptor, int streamPosition);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public abstract virtual void InfillInternalData(ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    protected void CheckOffsetAndLength(int offset, int length);
    protected Byte[] GetBytes(int offset, int length);
    protected byte GetByte(int offset);
    protected ushort GetUInt16(int offset);
    protected short GetInt16(int offset);
    protected int GetInt32(int offset);
    protected UInt32 GetUInt32(int offset);
    protected long GetInt64(int offset);
    protected ulong GetUInt64(int offset);
    protected float GetFloat(int offset);
    protected double GetDouble(int offset);
    protected bool GetBit(int offset, int bitPos);
    protected string GetString16BitUpdateOffset(Int32& offset, Boolean& asciiString);
    protected string GetString16BitUpdateOffset(Int32& offset);
    protected string GetStringUpdateOffset(Int32& offset, int iStrLen);
    protected string GetStringByteLen(int offset);
    protected string GetStringByteLen(int offset, Int32& iBytes);
    protected internal string GetString(int offset, int iStrLen);
    protected internal string GetString(int offset, int iStrLen, Int32& iBytesInString);
    protected internal string GetString(int offset, int iStrLen, Int32& iBytesInString, bool isByteCounted);
    protected string GetUnkTypeString(int offset, IList`1<int> continuePos, int continueCount, Int32& iBreakIndex, Int32& length, Byte[]& rich, Byte[]& extended);
    protected TAddr GetAddr(int offset);
    protected Rectangle GetAddrAsRectangle(int offset);
    protected void EnlargeDataStorageIfNeeded(int offset, int length);
    protected internal void Reserve(int length);
    protected internal void SetBytes(int offset, Byte[] value, int pos, int length);
    protected internal void SetBytes(int offset, Byte[] value);
    protected internal void SetByte(int offset, byte value);
    protected internal void SetByte(int offset, byte value, int count);
    protected internal void SetUInt16(int offset, ushort value);
    protected internal void SetInt16(int offset, short value);
    protected internal void SetInt32(int offset, int value);
    protected internal void SetUInt32(int offset, UInt32 value);
    protected internal void SetInt64(int offset, long value);
    protected internal void SetUInt64(int offset, ulong value);
    protected internal void SetFloat(int offset, float value);
    protected internal void SetDouble(int offset, double value);
    protected internal void SetBit(int offset, bool value, int bitPos);
    protected internal void SetStringNoLenUpdateOffset(Int32& offset, string value, bool isCompression);
    protected internal int SetStringNoLenDetectEncoding(int offset, string value);
    public static bool IsAsciiString(string strTextPart);
    protected internal int SetStringNoLen(int offset, string value);
    protected internal int SetStringNoLen(int offset, string value, bool bEmptyCompressed, bool bCompressed);
    protected internal int SetStringByteLen(int offset, string value);
    protected internal int SetString16BitLen(int offset, string value);
    protected internal int SetString16BitLen(int offset, string value, bool bEmptyCompressed, bool isCompressed);
    protected internal void SetString16BitUpdateOffset(Int32& offset, string value);
    protected internal void SetString16BitUpdateOffset(Int32& offset, string value, bool isCompressed);
    protected internal void SetAddr(int offset, TAddr addr);
    protected internal void SetAddr(int offset, Rectangle addr);
    internal SortedList`2<BiffRecordPosAttribute, FieldInfo> GetSortedFields();
    protected void AutoExtractFields();
    protected object GetValueByAttributeType(BiffRecordPosAttribute attr);
    protected int AutoInfillFromFields();
    protected int SetValueByAttributeType(BiffRecordPosAttribute attr, object data);
    public virtual void ClearData();
    public virtual bool IsEqual(BiffRecordRaw raw);
    public virtual void CopyTo(BiffRecordRaw raw);
    protected internal void SetInternalData(Byte[] arrData);
    protected void SetInternalData(Byte[] arrData, bool bNeedInfill);
    public abstract virtual void ParseStructure();
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual void Dispose();
    protected virtual void OnDispose();
}
[CLSCompliantAttribute("False")]
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.BiffRecordRawWithDataProvider : BiffRecordWithStreamPos {
    protected DataProvider m_provider;
    protected virtual override void Finalize();
    public abstract virtual void ParseStructure();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public abstract virtual void InfillInternalData(ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual object Clone();
    protected internal string GetString(int offset, int iStrLen);
    protected internal string GetString(int offset, int iStrLen, Int32& iBytesInString);
    protected internal string GetString(int offset, int iStrLen, Int32& iBytesInString, bool isByteCounted);
    protected string GetUnkTypeString(int offset, IList`1<int> continuePos, int continueCount, Int32& iBreakIndex, Int32& length, Byte[]& rich, Byte[]& extended);
    protected internal void SetByte(int offset, byte value);
    protected internal void SetUInt16(int offset, ushort value);
    protected internal void SetBytes(int offset, Byte[] value, int pos, int length);
    protected internal void SetBytes(int offset, Byte[] value);
    protected internal int SetStringNoLen(int offset, string value);
    protected internal int SetStringNoLen(int offset, string value, bool bEmptyCompressed);
    public sealed virtual void Dispose();
}
[CLSCompliantAttribute("False")]
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.BiffRecordWithContinue : BiffRecordRawWithDataProvider {
    private int DEF_WORD_MASK;
    internal List`1<int> m_arrContinuePos;
    protected int m_iFirstLength;
    public TBIFFRecord FirstContinueType { get; }
    protected bool AddHeaderToProvider { get; }
    public virtual TBIFFRecord get_FirstContinueType();
    protected virtual bool get_AddHeaderToProvider();
    public virtual int FillRecord(BinaryReader reader, DataProvider provider, IDecryptor decryptor, Byte[] arrBuffer);
    public virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    public virtual object Clone();
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BiffRecordWithStreamPos : BiffRecordRaw {
    protected long m_lStreamPosition;
    public long StreamPos { get; public set; }
    protected BiffRecordWithStreamPos(Stream stream, Int32& itemSize);
    protected BiffRecordWithStreamPos(BinaryReader reader, Int32& itemSize);
    protected BiffRecordWithStreamPos(int iReserve);
    public virtual long get_StreamPos();
    public virtual void set_StreamPos(long value);
}
[BiffAttribute("233")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BitmapRecord : BiffContinueRecordRaw {
    private static int DEF_ALIGN;
    private static int DEF_HEADER_START;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usUnknown;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usUnknown2;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iTotalSize;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iHeaderSize;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usWidth;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usHeight;
    [BiffRecordPosAttribute("16", "2")]
private ushort m_usPlanes;
    [BiffRecordPosAttribute("18", "2")]
private ushort m_usColorDepth;
    private Image m_bitmap;
    private IntPtr m_scan0;
    public ushort Unknown { get; public set; }
    public ushort Unknown2 { get; public set; }
    public int TotalSize { get; public set; }
    public int HeaderSize { get; public set; }
    public ushort Width { get; public set; }
    public ushort Height { get; public set; }
    public ushort Planes { get; public set; }
    public ushort ColorDepth { get; public set; }
    public Image Picture { get; public set; }
    public BitmapRecord(Stream stream, Int32& itemSize);
    public BitmapRecord(int iReserve);
    public ushort get_Unknown();
    public void set_Unknown(ushort value);
    public ushort get_Unknown2();
    public void set_Unknown2(ushort value);
    public int get_TotalSize();
    public void set_TotalSize(int value);
    public int get_HeaderSize();
    public void set_HeaderSize(int value);
    public ushort get_Width();
    public void set_Width(ushort value);
    public ushort get_Height();
    public void set_Height(ushort value);
    public ushort get_Planes();
    public void set_Planes(ushort value);
    public ushort get_ColorDepth();
    public void set_ColorDepth(ushort value);
    public Image get_Picture();
    public void set_Picture(Image value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    private Byte[] GetImageData();
    private int ManualHeaderInfill();
}
[BiffAttribute("513")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BlankRecord : CellPositionBase {
    private static int DEF_RECORD_SIZE;
    internal static int DEF_RECORD_SIZE_WITH_HEADER;
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2057")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BOFRecord : BiffRecordWithStreamPos {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usVersion;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usType;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usBuild;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usYear;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iHistory;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iRVersion;
    private bool m_bIsNested;
    public ushort Version { get; public set; }
    public TType Type { get; public set; }
    public ushort Build { get; public set; }
    public ushort Year { get; public set; }
    public int History { get; public set; }
    public int RequeredVersion { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public bool IsNested { get; public set; }
    public bool IsAllowShortData { get; }
    public bool NeedDecoding { get; }
    public BOFRecord(Stream stream, Int32& itemSize);
    public BOFRecord(int iReserve);
    public ushort get_Version();
    public void set_Version(ushort value);
    public TType get_Type();
    public void set_Type(TType value);
    public ushort get_Build();
    public void set_Build(ushort value);
    public ushort get_Year();
    public void set_Year(ushort value);
    public int get_History();
    public void set_History(int value);
    public int get_RequeredVersion();
    public void set_RequeredVersion(int value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public bool get_IsNested();
    public void set_IsNested(bool value);
    public virtual bool get_IsAllowShortData();
    public virtual bool get_NeedDecoding();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("218")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BookBoolRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usSaveLinkValue;
    public ushort SaveLinkValue { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public BookBoolRecord(Stream stream, Int32& itemSize);
    public BookBoolRecord(int iReserve);
    public ushort get_SaveLinkValue();
    public void set_SaveLinkValue(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("517")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BoolErrRecord : CellPositionBase {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("6", "1")]
private byte m_BoolOrError;
    [BiffRecordPosAttribute("7", "1")]
private byte m_IsErrorCode;
    public byte BoolOrError { get; public set; }
    public bool IsErrorCode { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public object Value { get; public set; }
    public byte get_BoolOrError();
    public void set_BoolOrError(byte value);
    public bool get_IsErrorCode();
    public void set_IsErrorCode(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public static int ReadValue(DataProvider provider, int recordStart, ExcelVersion version);
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
}
[BiffAttribute("133")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.BoundSheetRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iBOFPosition;
    [BiffRecordPosAttribute("4", "1", "True")]
private byte m_Visibility;
    [BiffRecordPosAttribute("5", "1", "True")]
private byte m_SheetType;
    [BiffRecordPosAttribute("6", "2")]
private string m_strSheetName;
    private int m_iSheetIndex;
    private BOFRecord m_bof;
    public int BOFPosition { get; public set; }
    public string SheetName { get; public set; }
    public int SheetIndex { get; public set; }
    public SheetType BoundSheetType { get; public set; }
    public WorksheetVisibility Visibility { get; public set; }
    public int MinimumRecordSize { get; }
    public BOFRecord BOF { get; public set; }
    public int StartDecodingOffset { get; }
    public BoundSheetRecord(Stream stream, Int32& itemSize);
    public BoundSheetRecord(int iReserve);
    public int get_BOFPosition();
    public void set_BOFPosition(int value);
    public string get_SheetName();
    public void set_SheetName(string value);
    public int get_SheetIndex();
    public void set_SheetIndex(int value);
    public SheetType get_BoundSheetType();
    public void set_BoundSheetType(SheetType value);
    public WorksheetVisibility get_Visibility();
    public void set_Visibility(WorksheetVisibility value);
    public virtual int get_MinimumRecordSize();
    public BOFRecord get_BOF();
    public void set_BOF(BOFRecord value);
    public virtual int get_StartDecodingOffset();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private void InternalDataIntegrityCheck();
    public virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    public virtual int GetStoreSize(ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.ByteArrayDataProvider : DataProvider {
    private Byte[] m_arrData;
    public Byte[] InternalBuffer { get; }
    public int Capacity { get; }
    public bool IsCleared { get; }
    public ByteArrayDataProvider(Byte[] arrData);
    public Byte[] get_InternalBuffer();
    public virtual int get_Capacity();
    public virtual bool get_IsCleared();
    public virtual byte ReadByte(int iOffset);
    public virtual short ReadInt16(int iOffset);
    public virtual int ReadInt32(int iOffset);
    public virtual long ReadInt64(int iOffset);
    public virtual void CopyTo(int iSourceOffset, Byte[] arrDestination, int iDestOffset, int iLength);
    public virtual void CopyTo(int iSourceOffset, DataProvider destination, int iDestOffset, int iLength);
    public virtual void Read(BinaryReader reader, int iOffset, int iLength, Byte[] arrBuffer);
    public virtual string ReadString(int offset, int stringLength, Encoding encoding, bool isUnicode);
    public virtual int EnsureCapacity(int size);
    public virtual int EnsureCapacity(int size, int forceAdd);
    public virtual void ZeroMemory();
    public virtual void WriteByte(int iOffset, byte value);
    public virtual void WriteInt16(int iOffset, short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteUInt16(int iOffset, ushort value);
    public virtual void WriteInt32(int iOffset, int value);
    public virtual void WriteInt64(int iOffset, long value);
    public virtual void WriteBit(int offset, bool value, int bitPos);
    public virtual void WriteDouble(int iOffset, double value);
    public virtual void WriteStringNoLenUpdateOffset(Int32& offset, string value, bool unicode);
    public virtual void WriteBytes(int offset, Byte[] value, int pos, int length);
    public virtual void WriteInto(BinaryWriter writer, int iOffset, int iSize, Byte[] arrBuffer);
    internal void SetBuffer(Byte[] arrNewBuffer);
    protected virtual void OnDispose();
    public virtual void Clear();
    public virtual void MoveMemory(int iDestOffset, int iSourceOffset, int iMemorySize);
    public virtual void CopyMemory(int iDestOffset, int iSourceOffset, int iMemorySize);
    public virtual DataProvider CreateProvider();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.BytesList : object {
    private static int DEF_CAPACITY_STEP;
    private static int DEF_DEFAULT_CAPACITY;
    private static int DEF_RECORD_SIZE;
    private Byte[] m_arrBuffer;
    private int m_iCurPos;
    private bool m_bExactSize;
    internal Byte[] InnerBuffer { get; }
    public int Count { get; }
    public BytesList(bool bExactSize);
    public BytesList(int iCapacity);
    public BytesList(Byte[] arrData);
    public void Add(byte bToAdd);
    public void AddRange(Byte[] arrToAdd);
    public void AddRange(BytesList list);
    public void CopyTo(int iStartIndex, Byte[] arrDest, int iDestIndex, int iCount);
    public void EnsureFreeSpace(int iSize);
    internal Byte[] get_InnerBuffer();
    public int get_Count();
}
[BiffAttribute("12")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CalcCountRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usIterations;
    public ushort Iterations { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public CalcCountRecord(Stream stream, Int32& itemSize);
    public CalcCountRecord(int iReserve);
    public ushort get_Iterations();
    public void set_Iterations(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("13")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CalcModeRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCalcMode;
    public ExcelCalculationMode CalculationMode { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public CalcModeRecord(Stream stream, Int32& itemSize);
    public CalcModeRecord(int iReserve);
    public ExcelCalculationMode get_CalculationMode();
    public void set_CalculationMode(ExcelCalculationMode value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.CellPositionBase : BiffRecordRaw {
    protected int m_iRow;
    protected int m_iColumn;
    [CLSCompliantAttribute("False")]
protected ushort m_usExtendedFormat;
    public int Row { get; public set; }
    public int Column { get; public set; }
    [CLSCompliantAttribute("False")]
public ushort ExtendedFormatIndex { get; public set; }
    [DebuggerStepThroughAttribute]
public sealed virtual int get_Row();
    [DebuggerStepThroughAttribute]
public sealed virtual void set_Row(int value);
    [DebuggerStepThroughAttribute]
public sealed virtual int get_Column();
    [DebuggerStepThroughAttribute]
public sealed virtual void set_Column(int value);
    public sealed virtual ushort get_ExtendedFormatIndex();
    public sealed virtual void set_ExtendedFormatIndex(ushort value);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    protected abstract virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected abstract virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2170")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CF12Record : BiffRecordRaw {
    private static int DEF_MINIMUM_RECORD_SIZE;
    private FutureHeader m_header;
    private bool m_isRange;
    private bool m_isFutureAlert;
    private TAddr m_addrEncloseRange;
    private byte m_typeOfCondition;
    private byte m_compareOperator;
    private ushort m_usFirstFormulaSize;
    private ushort m_usSecondFormulaSize;
    private Byte[] m_arrFirstFormula;
    private Byte[] m_arrSecondFormula;
    private Ptg[] m_arrFirstFormulaParsed;
    private Ptg[] m_arrSecondFormulaParsed;
    private ushort m_formulaLength;
    private Byte[] m_arrFormula;
    private Ptg[] m_arrFormulaParsed;
    private ushort m_sizeOfDXF;
    private ushort m_propertyCount;
    private List`1<ExtendedProperty> m_properties;
    private byte m_undefined;
    private ushort m_priority;
    private ushort m_template;
    private ushort m_templateParamCount;
    private long m_defaultParameter;
    private ushort m_reserved;
    private DXFN m_dxfn;
    private CFExFilterParameter m_cfExFilterParam;
    private CFExTextTemplateParameter m_cfExTextParam;
    private CFExDateTemplateParameter m_cfExDateParam;
    private CFExAverageTemplateParameter m_cfExAverageParam;
    private DataBar m_dataBar;
    private CFIconSet m_iconSet;
    private ColorScale m_colorScale;
    private IColorScale m_colorImpl;
    private IDataBar m_dataBarImpl;
    private IIconSet m_icondSetImpl;
    private bool m_isParsed;
    public ExcelCFType FormatType { get; public set; }
    public ExcelComparisonOperator ComparisonOperator { get; public set; }
    public ushort FirstFormulaSize { get; }
    public ushort SecondFormulaSize { get; }
    public Ptg[] FirstFormulaPtgs { get; public set; }
    public Ptg[] SecondFormulaPtgs { get; public set; }
    public Byte[] FirstFormulaBytes { get; }
    public Byte[] SecondFormulaBytes { get; }
    public Ptg[] FormulaPtgs { get; public set; }
    public Byte[] FormulaBytes { get; }
    public bool StopIfTrue { get; public set; }
    public ushort Priority { get; public set; }
    public ConditionalFormatTemplate Template { get; public set; }
    public IColorScale Criteria { get; public set; }
    public IDataBar DataBarImpl { get; public set; }
    public IIconSet IconSetImpl { get; public set; }
    public bool IsParsed { get; public set; }
    public ColorScale ColorScaleCF12 { get; public set; }
    public DataBar DataBarCF12 { get; public set; }
    public CFIconSet IconSetCF12 { get; public set; }
    internal CFExFilterParameter TopBottomCF12 { get; internal set; }
    internal CFExAverageTemplateParameter AboveBelowAverageCF12 { get; internal set; }
    internal List`1<ExtendedProperty> Properties { get; internal set; }
    public ExcelCFType get_FormatType();
    public void set_FormatType(ExcelCFType value);
    public ExcelComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(ExcelComparisonOperator value);
    public ushort get_FirstFormulaSize();
    public ushort get_SecondFormulaSize();
    public Ptg[] get_FirstFormulaPtgs();
    public void set_FirstFormulaPtgs(Ptg[] value);
    public Ptg[] get_SecondFormulaPtgs();
    public void set_SecondFormulaPtgs(Ptg[] value);
    public Byte[] get_FirstFormulaBytes();
    public Byte[] get_SecondFormulaBytes();
    public Ptg[] get_FormulaPtgs();
    public void set_FormulaPtgs(Ptg[] value);
    public Byte[] get_FormulaBytes();
    public bool get_StopIfTrue();
    public void set_StopIfTrue(bool value);
    public ushort get_Priority();
    public void set_Priority(ushort value);
    public ConditionalFormatTemplate get_Template();
    public void set_Template(ConditionalFormatTemplate value);
    public IColorScale get_Criteria();
    public void set_Criteria(IColorScale value);
    public IDataBar get_DataBarImpl();
    public void set_DataBarImpl(IDataBar value);
    public IIconSet get_IconSetImpl();
    public void set_IconSetImpl(IIconSet value);
    public bool get_IsParsed();
    public void set_IsParsed(bool value);
    public ColorScale get_ColorScaleCF12();
    public void set_ColorScaleCF12(ColorScale value);
    public DataBar get_DataBarCF12();
    public void set_DataBarCF12(DataBar value);
    public CFIconSet get_IconSetCF12();
    public void set_IconSetCF12(CFIconSet value);
    internal CFExFilterParameter get_TopBottomCF12();
    internal void set_TopBottomCF12(CFExFilterParameter value);
    internal CFExAverageTemplateParameter get_AboveBelowAverageCF12();
    internal void set_AboveBelowAverageCF12(CFExAverageTemplateParameter value);
    internal List`1<ExtendedProperty> get_Properties();
    internal void set_Properties(List`1<ExtendedProperty> value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public int ParseCFExTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeCFExTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal void ClearAll();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFExAverageTemplateParameter : object {
    private ushort m_numberOfStandardDeviation;
    private AboveBelowAverageImpl m_aboveBelowAverage;
    public ushort NumberOfDeviations { get; public set; }
    internal IAboveBelowAverage AboveBelowAverage { get; internal set; }
    public ushort get_NumberOfDeviations();
    public void set_NumberOfDeviations(ushort value);
    internal IAboveBelowAverage get_AboveBelowAverage();
    internal void set_AboveBelowAverage(IAboveBelowAverage value);
    internal void CopyAverageTemplaterParameter(ConditionalFormatTemplate template);
    internal object Clone();
    internal int GetHashCode();
    internal bool Equals(object obj);
    public void ParseAverageTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
    public void SerializeAverageTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFExDateTemplateParameter : object {
    private ushort m_dateComparisonType;
    public ushort DateComparisonOperator { get; public set; }
    public ushort get_DateComparisonOperator();
    public void set_DateComparisonOperator(ushort value);
    public void ParseDateTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
    public void SerializeDateTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFExFilterParameter : object {
    private bool m_isTopOrBottom;
    private bool m_isPercent;
    private ushort m_filterValue;
    private TopBottomImpl m_topBottom;
    public bool IsTopOrBottom { get; public set; }
    public bool IsPercent { get; public set; }
    public ushort FilterValue { get; public set; }
    internal ITopBottom TopBottom { get; internal set; }
    public bool get_IsTopOrBottom();
    public void set_IsTopOrBottom(bool value);
    public bool get_IsPercent();
    public void set_IsPercent(bool value);
    public ushort get_FilterValue();
    public void set_FilterValue(ushort value);
    internal ITopBottom get_TopBottom();
    internal void set_TopBottom(ITopBottom value);
    private void CopyFilterParameter();
    internal object Clone();
    internal int GetHashCode();
    internal bool Equals(object obj);
    public void ParseFilterTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
    public void SerializeFilterParameter(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("2171")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CFExRecord : CondFMTRecord {
    private static ushort DEF_MINIMUM_RECORD_SIZE;
    private static ushort DEF_ISCF12_RECORD_SIZE;
    private CF12Record m_cf12Record;
    private FutureHeader m_header;
    private bool m_isRefRange;
    private bool m_isFutureAlert;
    private byte m_headerAttribute;
    private TAddr m_addrEncloseRange;
    private byte m_isCF12;
    private ushort m_CondFMTIndex;
    private ushort m_CFIndex;
    private byte m_compareOperator;
    private ushort m_template;
    private ushort m_priority;
    private byte m_undefined;
    private bool m_cfExIsparsed;
    private byte m_hasDXF;
    private ushort m_sizeOfDXF;
    private ushort m_propertyCount;
    private List`1<ExtendedProperty> m_properties;
    private ushort m_templateParamCount;
    private ushort m_reserved;
    private ushort m_defaultParameter;
    private DXFN m_dxfn;
    private CFExFilterParameter m_cfExFilterParam;
    internal CFExTextTemplateParameter m_cfExTextParam;
    internal CFExDateTemplateParameter m_cfExDateParam;
    private CFExAverageTemplateParameter m_cfExAverageParam;
    public TAddr EncloseRange { get; public set; }
    public byte IsCF12Extends { get; public set; }
    public ushort CondFmtIndex { get; public set; }
    public ushort CFIndex { get; public set; }
    public ExcelComparisonOperator ComparisonOperator { get; public set; }
    public ConditionalFormatTemplate Template { get; public set; }
    public ushort Priority { get; public set; }
    public bool StopIfTrue { get; public set; }
    public byte HasDXF { get; public set; }
    public ushort SizeOfDXF { get; public set; }
    public ushort PropertyCount { get; public set; }
    public List`1<ExtendedProperty> Properties { get; public set; }
    public int MinimumRecordSize { get; }
    public bool IsCFExParsed { get; public set; }
    public CF12Record CF12RecordIfExtends { get; public set; }
    internal CFExFilterParameter TopBottomCFEx { get; internal set; }
    internal CFExAverageTemplateParameter AboveBelowAverageCFEx { get; internal set; }
    public CFExRecord(Stream stream, Int32& itemSize);
    public CFExRecord(int iReserve);
    public TAddr get_EncloseRange();
    public void set_EncloseRange(TAddr value);
    public byte get_IsCF12Extends();
    public void set_IsCF12Extends(byte value);
    public ushort get_CondFmtIndex();
    public void set_CondFmtIndex(ushort value);
    public ushort get_CFIndex();
    public void set_CFIndex(ushort value);
    public ExcelComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(ExcelComparisonOperator value);
    public ConditionalFormatTemplate get_Template();
    public void set_Template(ConditionalFormatTemplate value);
    public ushort get_Priority();
    public void set_Priority(ushort value);
    public bool get_StopIfTrue();
    public void set_StopIfTrue(bool value);
    public byte get_HasDXF();
    public void set_HasDXF(byte value);
    public ushort get_SizeOfDXF();
    public void set_SizeOfDXF(ushort value);
    public ushort get_PropertyCount();
    public void set_PropertyCount(ushort value);
    public List`1<ExtendedProperty> get_Properties();
    public void set_Properties(List`1<ExtendedProperty> value);
    public virtual int get_MinimumRecordSize();
    public bool get_IsCFExParsed();
    public void set_IsCFExParsed(bool value);
    public CF12Record get_CF12RecordIfExtends();
    public void set_CF12RecordIfExtends(CF12Record value);
    internal CFExFilterParameter get_TopBottomCFEx();
    internal void set_TopBottomCFEx(CFExFilterParameter value);
    internal CFExAverageTemplateParameter get_AboveBelowAverageCFEx();
    internal void set_AboveBelowAverageCFEx(CFExAverageTemplateParameter value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public int ParseCFExTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeCFExTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual object Clone();
    internal void ClearAll();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFExTextTemplateParameter : object {
    private ushort m_textRuleType;
    public CFTextRuleType TextRuleType { get; public set; }
    public CFTextRuleType get_TextRuleType();
    public void set_TextRuleType(CFTextRuleType value);
    public void ParseTextTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
    public void SerializeTextTemplateParameter(DataProvider provider, int iOffset, ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFGradientItem : object {
    private double m_numGradientRange;
    private UInt32 m_colorType;
    private UInt32 m_colorValue;
    private long m_tintShade;
    public double NumGradientRange { get; public set; }
    public ColorType ColorType { get; public set; }
    public UInt32 ColorValue { get; public set; }
    public long TintShade { get; public set; }
    public double get_NumGradientRange();
    public void set_NumGradientRange(double value);
    public ColorType get_ColorType();
    public void set_ColorType(ColorType value);
    public UInt32 get_ColorValue();
    public void set_ColorValue(UInt32 value);
    public long get_TintShade();
    public void set_TintShade(long value);
    public int ParseCFGradient(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeCFGradient(DataProvider provider, int iOffset, ExcelVersion version, double numValue, bool isParsed);
    public int GetStoreSize(ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFIconMultiState : object {
    private static ushort DEF_MINIMUM_SIZE;
    private CFVO m_cfvo;
    private byte m_isEqual;
    private UInt32 m_undefined;
    public CFVO CFVO { get; public set; }
    public byte IsEqulal { get; public set; }
    public CFVO get_CFVO();
    public void set_CFVO(CFVO value);
    public byte get_IsEqulal();
    public void set_IsEqulal(byte value);
    public int ParseCFIconMultistate(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeCFIconMultistate(DataProvider provider, int iOffset, ExcelVersion version);
    public int GetStoreSize(ExcelVersion version);
    internal void ClearAll();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFIconSet : object {
    private static ushort DEF_MINIMUM_SIZE;
    private ushort m_undefined;
    private byte m_iconStates;
    private byte m_iconSet;
    private bool m_isIconOnly;
    private bool m_iconIsReversed;
    private List`1<CFIconMultiState> m_arrMultistate;
    private IconSetImpl m_iconSetImpl;
    public ExcelIconSetType IconSetType { get; public set; }
    public List`1<CFIconMultiState> ListCFIconSet { get; public set; }
    public ushort DefaultRecordSize { get; }
    public IIconSet IconsetImpl { get; }
    public ExcelIconSetType get_IconSetType();
    public void set_IconSetType(ExcelIconSetType value);
    public List`1<CFIconMultiState> get_ListCFIconSet();
    public void set_ListCFIconSet(List`1<CFIconMultiState> value);
    public ushort get_DefaultRecordSize();
    public IIconSet get_IconsetImpl();
    private void CopyIconSet();
    public int ParseIconSet(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeIconSet(DataProvider provider, int iOffset, ExcelVersion version, IIconSet iIconSet);
    private byte CalculateIconOnlyAndReverseOrder();
    public int GetStoreSize(ExcelVersion version);
    private List`1<CFIconMultiState> UpdateIconSet(IIconSet updateIconset);
    public void UpdateIconSetColor(IList`1<IConditionValue> m_IconCriteria);
    internal void ClearAll();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFInterpolationCurve : object {
    private static ushort DEF_MINIMUM_SIZE;
    private double m_numDomain;
    private CFVO m_cfvo;
    public double NumDomain { get; public set; }
    public CFVO CFVO { get; public set; }
    public double get_NumDomain();
    public void set_NumDomain(double value);
    public CFVO get_CFVO();
    public void set_CFVO(CFVO value);
    public int ParseCFGradientInterp(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeCFGradientInterp(DataProvider provider, int iOffset, ExcelVersion version, double numValue, bool isParsed);
    public int GetStoreSize(ExcelVersion version);
    internal void ClearAll();
}
[BiffAttribute("433")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CFRecord : BiffRecordRaw {
    private static ushort DEF_MINIMUM_RECORD_SIZE;
    private static int DEF_FONT_FIRST_RESERVED_SIZE;
    private static int DEF_FONT_SECOND_RESERVED_SIZE;
    private static int DEF_FONT_THIRD_RESERVED_SIZE;
    private static UInt32 DEF_FONT_POSTURE_MASK;
    private static UInt32 DEF_FONT_CANCELLATION_MASK;
    private static UInt32 DEF_FONT_STYLE_MODIFIED_MASK;
    private static UInt32 DEF_FONT_CANCELLATION_MODIFIED_MASK;
    private static ushort DEF_BORDER_LEFT_MASK;
    private static ushort DEF_BORDER_RIGHT_MASK;
    private static ushort DEF_BORDER_TOP_MASK;
    private static ushort DEF_BORDER_BOTTOM_MASK;
    private static UInt32 DEF_BORDER_LEFT_COLOR_MASK;
    private static UInt32 DEF_BORDER_RIGHT_COLOR_MASK;
    private static UInt32 DEF_BORDER_TOP_COLOR_MASK;
    private static UInt32 DEF_BORDER_BOTTOM_COLOR_MASK;
    private static int DEF_BORDER_LEFT_COLOR_START;
    private static int DEF_BORDER_RIGHT_COLOR_START;
    private static int DEF_BORDER_TOP_COLOR_START;
    private static int DEF_BORDER_BOTTOM_COLOR_START;
    private static ushort DEF_PATTERN_MASK;
    private static ushort DEF_PATTERN_COLOR_MASK;
    private static ushort DEF_PATTERN_BACKCOLOR_MASK;
    private static int DEF_PATTERN_START;
    private static int DEF_PATTERN_BACKCOLOR_START;
    private static int DEF_FONT_BLOCK_SIZE;
    private static int DEF_BORDER_BLOCK_SIZE;
    private static int DEF_PATTERN_BLOCK_SIZE;
    private static int DEF_NUMBER_FORMAT_BLOCK_SIZE;
    public static UInt32 DefaultColorIndex;
    [BiffRecordPosAttribute("0", "1")]
private byte m_formatingType;
    [BiffRecordPosAttribute("1", "1")]
private byte m_compareOperator;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usFirstFormulaSize;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usSecondFormulaSize;
    [BiffRecordPosAttribute("6", "4")]
private UInt32 m_uiOptions;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("7", "2", "1")]
private bool m_bLeftBorder;
    [BiffRecordPosAttribute("7", "3", "1")]
private bool m_bRightBorder;
    [BiffRecordPosAttribute("7", "4", "1")]
private bool m_bTopBorder;
    [BiffRecordPosAttribute("7", "5", "1")]
private bool m_bBottomBorder;
    [BiffRecordPosAttribute("8", "0", "1")]
private bool m_bPatternStyle;
    [BiffRecordPosAttribute("8", "1", "1")]
private bool m_bPatternColor;
    [BiffRecordPosAttribute("8", "2", "1")]
private bool m_bPatternBackColor;
    [BiffRecordPosAttribute("8", "3", "1")]
private bool m_bNumberFormatModified;
    [BiffRecordPosAttribute("9", "1", "1")]
private bool m_bNumberFormatPresent;
    [BiffRecordPosAttribute("9", "2", "1")]
private bool m_bFontFormat;
    [BiffRecordPosAttribute("9", "4", "1")]
private bool m_bBorderFormat;
    [BiffRecordPosAttribute("9", "5", "1")]
private bool m_bPatternFormat;
    [BiffRecordPosAttribute("10", "0", "1")]
private bool m_numberFormatIsUserDefined;
    private UInt32 m_uiFontHeight;
    private UInt32 m_uiFontOptions;
    private ushort m_usFontWeight;
    private ushort m_usEscapmentType;
    private byte m_Underline;
    private UInt32 m_uiFontColorIndex;
    private UInt32 m_uiModifiedFlags;
    private UInt32 m_uiEscapmentModified;
    private UInt32 m_uiUnderlineModified;
    private ushort m_usBorderLineStyles;
    private UInt32 m_uiBorderColors;
    private ushort m_usPatternStyle;
    private ushort m_usPatternColors;
    private ushort m_unUsed;
    private ushort m_numFormatIndex;
    private Byte[] m_arrFirstFormula;
    private Byte[] m_arrSecondFormula;
    private Ptg[] m_arrFirstFormulaParsed;
    private Ptg[] m_arrSecondFormulaParsed;
    public ExcelCFType FormatType { get; public set; }
    public ExcelComparisonOperator ComparisonOperator { get; public set; }
    public ushort FirstFormulaSize { get; }
    public ushort SecondFormulaSize { get; }
    public UInt32 Options { get; internal set; }
    public ushort Reserved { get; internal set; }
    public bool IsLeftBorderModified { get; public set; }
    public bool IsRightBorderModified { get; public set; }
    public bool IsTopBorderModified { get; public set; }
    public bool IsBottomBorderModified { get; public set; }
    public bool IsPatternStyleModified { get; public set; }
    public bool IsPatternColorModified { get; public set; }
    public bool IsPatternBackColorModified { get; public set; }
    public bool IsNumberFormatModified { get; public set; }
    public bool IsFontFormatPresent { get; public set; }
    public bool IsBorderFormatPresent { get; public set; }
    public bool IsPatternFormatPresent { get; public set; }
    public bool IsNumberFormatPresent { get; public set; }
    public int MinimumRecordSize { get; }
    public UInt32 FontHeight { get; public set; }
    public bool FontPosture { get; public set; }
    public bool FontCancellation { get; public set; }
    public ushort FontWeight { get; public set; }
    public ExcelFontVertialAlignment FontEscapment { get; public set; }
    public ExcelUnderline FontUnderline { get; public set; }
    public UInt32 FontColorIndex { get; public set; }
    public bool IsFontStyleModified { get; public set; }
    public bool IsFontCancellationModified { get; public set; }
    public bool IsFontEscapmentModified { get; public set; }
    public bool IsFontUnderlineModified { get; public set; }
    public bool IsNumberFormatUserDefined { get; public set; }
    public ushort NumberFormatIndex { get; public set; }
    public ExcelLineStyle LeftBorderStyle { get; public set; }
    public ExcelLineStyle RightBorderStyle { get; public set; }
    public ExcelLineStyle TopBorderStyle { get; public set; }
    public ExcelLineStyle BottomBorderStyle { get; public set; }
    public UInt32 LeftBorderColorIndex { get; public set; }
    public UInt32 RightBorderColorIndex { get; public set; }
    public UInt32 TopBorderColorIndex { get; public set; }
    public UInt32 BottomBorderColorIndex { get; public set; }
    public ExcelPattern PatternStyle { get; public set; }
    public ushort PatternColorIndex { get; public set; }
    public ushort PatternBackColor { get; public set; }
    public Ptg[] FirstFormulaPtgs { get; public set; }
    public Ptg[] SecondFormulaPtgs { get; public set; }
    public Byte[] FirstFormulaBytes { get; }
    public Byte[] SecondFormulaBytes { get; }
    public CFRecord(Stream stream, Int32& itemSize);
    public CFRecord(int iReserve);
    public ExcelCFType get_FormatType();
    public void set_FormatType(ExcelCFType value);
    public ExcelComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(ExcelComparisonOperator value);
    public ushort get_FirstFormulaSize();
    public ushort get_SecondFormulaSize();
    public UInt32 get_Options();
    internal void set_Options(UInt32 value);
    public ushort get_Reserved();
    internal void set_Reserved(ushort value);
    public bool get_IsLeftBorderModified();
    public void set_IsLeftBorderModified(bool value);
    public bool get_IsRightBorderModified();
    public void set_IsRightBorderModified(bool value);
    public bool get_IsTopBorderModified();
    public void set_IsTopBorderModified(bool value);
    public bool get_IsBottomBorderModified();
    public void set_IsBottomBorderModified(bool value);
    public bool get_IsPatternStyleModified();
    public void set_IsPatternStyleModified(bool value);
    public bool get_IsPatternColorModified();
    public void set_IsPatternColorModified(bool value);
    public bool get_IsPatternBackColorModified();
    public void set_IsPatternBackColorModified(bool value);
    public bool get_IsNumberFormatModified();
    public void set_IsNumberFormatModified(bool value);
    public bool get_IsFontFormatPresent();
    public void set_IsFontFormatPresent(bool value);
    public bool get_IsBorderFormatPresent();
    public void set_IsBorderFormatPresent(bool value);
    public bool get_IsPatternFormatPresent();
    public void set_IsPatternFormatPresent(bool value);
    public bool get_IsNumberFormatPresent();
    public void set_IsNumberFormatPresent(bool value);
    public virtual int get_MinimumRecordSize();
    public UInt32 get_FontHeight();
    public void set_FontHeight(UInt32 value);
    public bool get_FontPosture();
    public void set_FontPosture(bool value);
    public bool get_FontCancellation();
    public void set_FontCancellation(bool value);
    public ushort get_FontWeight();
    public void set_FontWeight(ushort value);
    public ExcelFontVertialAlignment get_FontEscapment();
    public void set_FontEscapment(ExcelFontVertialAlignment value);
    public ExcelUnderline get_FontUnderline();
    public void set_FontUnderline(ExcelUnderline value);
    public UInt32 get_FontColorIndex();
    public void set_FontColorIndex(UInt32 value);
    public bool get_IsFontStyleModified();
    public void set_IsFontStyleModified(bool value);
    public bool get_IsFontCancellationModified();
    public void set_IsFontCancellationModified(bool value);
    public bool get_IsFontEscapmentModified();
    public void set_IsFontEscapmentModified(bool value);
    public bool get_IsFontUnderlineModified();
    public void set_IsFontUnderlineModified(bool value);
    public bool get_IsNumberFormatUserDefined();
    public void set_IsNumberFormatUserDefined(bool value);
    public ushort get_NumberFormatIndex();
    public void set_NumberFormatIndex(ushort value);
    public ExcelLineStyle get_LeftBorderStyle();
    public void set_LeftBorderStyle(ExcelLineStyle value);
    public ExcelLineStyle get_RightBorderStyle();
    public void set_RightBorderStyle(ExcelLineStyle value);
    public ExcelLineStyle get_TopBorderStyle();
    public void set_TopBorderStyle(ExcelLineStyle value);
    public ExcelLineStyle get_BottomBorderStyle();
    public void set_BottomBorderStyle(ExcelLineStyle value);
    public UInt32 get_LeftBorderColorIndex();
    public void set_LeftBorderColorIndex(UInt32 value);
    public UInt32 get_RightBorderColorIndex();
    public void set_RightBorderColorIndex(UInt32 value);
    public UInt32 get_TopBorderColorIndex();
    public void set_TopBorderColorIndex(UInt32 value);
    public UInt32 get_BottomBorderColorIndex();
    public void set_BottomBorderColorIndex(UInt32 value);
    public ExcelPattern get_PatternStyle();
    public void set_PatternStyle(ExcelPattern value);
    public ushort get_PatternColorIndex();
    public void set_PatternColorIndex(ushort value);
    public ushort get_PatternBackColor();
    public void set_PatternBackColor(ushort value);
    public Ptg[] get_FirstFormulaPtgs();
    public void set_FirstFormulaPtgs(Ptg[] value);
    public Ptg[] get_SecondFormulaPtgs();
    public void set_SecondFormulaPtgs(Ptg[] value);
    public Byte[] get_FirstFormulaBytes();
    public Byte[] get_SecondFormulaBytes();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public int ParseFontBlock(DataProvider provider, Int32& iOffset);
    public int ParseBorderBlock(DataProvider provider, Int32& iOffset);
    public int ParsePatternBlock(DataProvider provider, Int32& iOffset);
    public int ParseNumberFormatBlock(DataProvider provider, Int32& iOffset);
    public int SerializeFontBlock(DataProvider provider, Int32& iOffset);
    public int SerializeBorderBlock(DataProvider provider, Int32& iOffset);
    public int SerializePatternBlock(DataProvider provider, Int32& iOffset);
    public int SerializeNumberFormatBlock(DataProvider provider, Int32& iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual object Clone();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CFVO : object {
    private static ushort DEF_MINIMUM_SIZE;
    private byte m_cfvoType;
    private ushort m_formulaLength;
    private Byte[] m_arrFormula;
    private Ptg[] m_arrFormulaParsed;
    private double m_numValue;
    private string m_value;
    internal Ptg[] ref3DPtg;
    public ConditionValueType CFVOType { get; public set; }
    public ushort FormulaSize { get; }
    public Ptg[] FormulaPtgs { get; public set; }
    public Byte[] FormulaBytes { get; }
    public double NumValue { get; public set; }
    public string Value { get; public set; }
    internal Ptg[] RefPtg { get; internal set; }
    public ConditionValueType get_CFVOType();
    public void set_CFVOType(ConditionValueType value);
    public ushort get_FormulaSize();
    public Ptg[] get_FormulaPtgs();
    public void set_FormulaPtgs(Ptg[] value);
    public Byte[] get_FormulaBytes();
    public double get_NumValue();
    public void set_NumValue(double value);
    public string get_Value();
    public void set_Value(string value);
    internal Ptg[] get_RefPtg();
    internal void set_RefPtg(Ptg[] value);
    public int ParseCFVO(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeCFVO(DataProvider provider, int iOffset, ExcelVersion version);
    public int GetStoreSize(ExcelVersion version);
    internal void ClearAll();
}
[BiffAttribute("4191")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.Chart3DDataFormatRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "1")]
private byte m_DataFormatBase;
    [BiffRecordPosAttribute("1", "1")]
private byte m_DataFormatTop;
    public ExcelBaseFormat DataFormatBase { get; public set; }
    public ExcelTopFormat DataFormatTop { get; public set; }
    public Chart3DDataFormatRecord(Stream stream, Int32& itemSize);
    public Chart3DDataFormatRecord(int iReserve);
    public ExcelBaseFormat get_DataFormatBase();
    public void set_DataFormatBase(ExcelBaseFormat value);
    public ExcelTopFormat get_DataFormatTop();
    public void set_DataFormatTop(ExcelTopFormat value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4154")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.Chart3DRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRotationAngle;
    [BiffRecordPosAttribute("2", "2", "True")]
private short m_sElevationAngle;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usDistance;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usHeight;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usDepth;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usGap;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("12", "0", "1")]
private bool m_bPerspective;
    [BiffRecordPosAttribute("12", "1", "1")]
private bool m_bClustered;
    [BiffRecordPosAttribute("12", "2", "1")]
private bool m_bAutoScaling;
    [BiffRecordPosAttribute("12", "4", "1")]
private bool m_bReserved;
    [BiffRecordPosAttribute("12", "5", "1")]
private bool m_b2DWalls;
    private bool m_bDefaultElevation;
    private bool m_bDefaultRotation;
    public ushort RotationAngle { get; public set; }
    public short ElevationAngle { get; public set; }
    public bool IsDefaultRotation { get; public set; }
    public bool IsDefaultElevation { get; public set; }
    public ushort DistanceFromEye { get; public set; }
    public ushort Height { get; public set; }
    public ushort Depth { get; public set; }
    public ushort SeriesSpace { get; public set; }
    public ushort Options { get; }
    public bool IsPerspective { get; public set; }
    public bool IsClustered { get; public set; }
    public bool IsAutoScaled { get; public set; }
    public bool Is2DWalls { get; public set; }
    public Chart3DRecord(Stream stream, Int32& itemSize);
    public Chart3DRecord(int iReserve);
    public ushort get_RotationAngle();
    public void set_RotationAngle(ushort value);
    public short get_ElevationAngle();
    public void set_ElevationAngle(short value);
    public bool get_IsDefaultRotation();
    public void set_IsDefaultRotation(bool value);
    public bool get_IsDefaultElevation();
    public void set_IsDefaultElevation(bool value);
    public ushort get_DistanceFromEye();
    public void set_DistanceFromEye(ushort value);
    public ushort get_Height();
    public void set_Height(ushort value);
    public ushort get_Depth();
    public void set_Depth(ushort value);
    public ushort get_SeriesSpace();
    public void set_SeriesSpace(ushort value);
    public ushort get_Options();
    public bool get_IsPerspective();
    public void set_IsPerspective(bool value);
    public bool get_IsClustered();
    public void set_IsClustered(bool value);
    public bool get_IsAutoScaled();
    public void set_IsAutoScaled(bool value);
    public bool get_Is2DWalls();
    public void set_Is2DWalls(bool value);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public static bool op_Equality(Chart3DRecord chart3D, Chart3DRecord chart3D2);
    public static bool op_Inequality(Chart3DRecord chart3D, Chart3DRecord chart3D2);
}
[BiffAttribute("4177")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAIRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "1")]
private byte m_id;
    [BiffRecordPosAttribute("1", "1")]
private byte m_ReferenceType;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usNumIndex;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usFormulaSize;
    [BiffRecordPosAttribute("2", "1", "1")]
private bool m_bCustomNumberFormat;
    private Ptg[] m_arrExpression;
    public LinkIndex IndexIdentifier { get; public set; }
    public ReferenceType Reference { get; public set; }
    public ushort Options { get; }
    public ushort NumberFormatIndex { get; public set; }
    public ushort FormulaSize { get; public set; }
    public bool IsCustomNumberFormat { get; public set; }
    public Ptg[] ParsedExpression { get; public set; }
    public ChartAIRecord(Stream stream, Int32& itemSize);
    public ChartAIRecord(int iReserve);
    public LinkIndex get_IndexIdentifier();
    public void set_IndexIdentifier(LinkIndex value);
    public ReferenceType get_Reference();
    public void set_Reference(ReferenceType value);
    public ushort get_Options();
    public ushort get_NumberFormatIndex();
    public void set_NumberFormatIndex(ushort value);
    public ushort get_FormulaSize();
    public void set_FormulaSize(ushort value);
    public bool get_IsCustomNumberFormat();
    public void set_IsCustomNumberFormat(bool value);
    public Ptg[] get_ParsedExpression();
    public void set_ParsedExpression(Ptg[] value);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual object Clone();
}
[BiffAttribute("4176")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAlrunsRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usQuantity;
    private TRuns[] m_array;
    public ushort Quantity { get; public set; }
    public TRuns[] Runs { get; public set; }
    public ChartAlrunsRecord(Stream stream, Int32& itemSize);
    public ChartAlrunsRecord(int iReserve);
    public ushort get_Quantity();
    public void set_Quantity(ushort value);
    public TRuns[] get_Runs();
    public void set_Runs(TRuns[] value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual object Clone();
}
[BiffAttribute("4106")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAreaFormatRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iForeground;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iBackground;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usPattern;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("10", "0", "1")]
private bool m_bAutomaticFormat;
    [BiffRecordPosAttribute("10", "1", "1")]
private bool m_bSwapColorsOnNegative;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usForegroundIndex;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usBackgroundIndex;
    public int ForegroundColor { get; public set; }
    public Color BackgroundColor { get; public set; }
    public ExcelPattern Pattern { get; public set; }
    public ushort Options { get; }
    public ExcelKnownColors ForegroundColorIndex { get; public set; }
    public ExcelKnownColors BackgroundColorIndex { get; public set; }
    public bool UseAutomaticFormat { get; public set; }
    public bool SwapColorsOnNegative { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartAreaFormatRecord(Stream stream, Int32& itemSize);
    public ChartAreaFormatRecord(int iReserve);
    public int get_ForegroundColor();
    public void set_ForegroundColor(int value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public ExcelPattern get_Pattern();
    public void set_Pattern(ExcelPattern value);
    public ushort get_Options();
    public ExcelKnownColors get_ForegroundColorIndex();
    public void set_ForegroundColorIndex(ExcelKnownColors value);
    public ExcelKnownColors get_BackgroundColorIndex();
    public void set_BackgroundColorIndex(ExcelKnownColors value);
    public bool get_UseAutomaticFormat();
    public void set_UseAutomaticFormat(bool value);
    public bool get_SwapColorsOnNegative();
    public void set_SwapColorsOnNegative(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private int ReadColor(DataProvider provider, Int32& iOffset);
    private void WriteColor(DataProvider provider, Int32& iOffset, int iColor);
}
[BiffAttribute("4122")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAreaRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bStacked;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bCategoryPercentage;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bShadowArea;
    public ushort Options { get; }
    public bool IsStacked { get; public set; }
    public bool IsCategoryBrokenDown { get; public set; }
    public bool IsAreaShadowed { get; public set; }
    private bool Syncfusion.XlsIO.Parser.Biff_Records.IChartType.ShowAsPercents { get; private set; }
    private bool Syncfusion.XlsIO.Parser.Biff_Records.IChartType.StackValues { get; private set; }
    public ChartAreaRecord(Stream stream, Int32& itemSize);
    public ChartAreaRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsStacked();
    public void set_IsStacked(bool value);
    public bool get_IsCategoryBrokenDown();
    public void set_IsCategoryBrokenDown(bool value);
    public bool get_IsAreaShadowed();
    public void set_IsAreaShadowed(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private sealed virtual override bool Syncfusion.XlsIO.Parser.Biff_Records.IChartType.get_ShowAsPercents();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IChartType.set_ShowAsPercents(bool value);
    private sealed virtual override bool Syncfusion.XlsIO.Parser.Biff_Records.IChartType.get_StackValues();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IChartType.set_StackValues(bool value);
}
[BiffAttribute("2205")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAttachedLabelLayoutRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    private Byte[] DEF_HEADER;
    private Byte[] m_frtHeader;
    private int m_dwCheckSum;
    private int m_info;
    private bool m_unUsed;
    private byte m_autoLayoutType;
    private Byte[] m_reserved1;
    private LayoutModes m_wXMode;
    private LayoutModes m_wYMode;
    private LayoutModes m_wWidthMode;
    private LayoutModes m_wHeightMode;
    private double m_x;
    private double m_y;
    private double m_dx;
    private double m_dy;
    private Byte[] m_reserved2;
    private Byte[] FrtHeader { get; }
    private int dwCheckSum { get; private set; }
    public LayoutModes WXMode { get; public set; }
    public LayoutModes WYMode { get; public set; }
    public LayoutModes WWidthMode { get; public set; }
    public LayoutModes WHeightMode { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Dx { get; public set; }
    public double Dy { get; public set; }
    internal byte AutoLayoutType { get; internal set; }
    public ChartAttachedLabelLayoutRecord(Stream stream, Int32& itemSize);
    public ChartAttachedLabelLayoutRecord(int iReserve);
    private Byte[] get_FrtHeader();
    private int get_dwCheckSum();
    private void set_dwCheckSum(int value);
    public LayoutModes get_WXMode();
    public void set_WXMode(LayoutModes value);
    public LayoutModes get_WYMode();
    public void set_WYMode(LayoutModes value);
    public LayoutModes get_WWidthMode();
    public void set_WWidthMode(LayoutModes value);
    public LayoutModes get_WHeightMode();
    public void set_WHeightMode(LayoutModes value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Dx();
    public void set_Dx(double value);
    public double get_Dy();
    public void set_Dy(double value);
    internal byte get_AutoLayoutType();
    internal void set_AutoLayoutType(byte value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private int CheckSum();
}
[BiffAttribute("4108")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAttachedLabelRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private OptionFlags m_options;
    public ushort Options { get; }
    public bool ShowActiveValue { get; public set; }
    public bool ShowPieInPercents { get; public set; }
    public bool ShowPieCategoryLabel { get; public set; }
    public bool SmoothLine { get; public set; }
    public bool ShowCategoryLabel { get; public set; }
    public bool ShowBubble { get; public set; }
    public ChartAttachedLabelRecord(Stream stream, Int32& itemSize);
    public ChartAttachedLabelRecord(int iReserve);
    public ushort get_Options();
    public bool get_ShowActiveValue();
    public void set_ShowActiveValue(bool value);
    public bool get_ShowPieInPercents();
    public void set_ShowPieInPercents(bool value);
    public bool get_ShowPieCategoryLabel();
    public void set_ShowPieCategoryLabel(bool value);
    public bool get_SmoothLine();
    public void set_SmoothLine(bool value);
    public bool get_ShowCategoryLabel();
    public void set_ShowCategoryLabel(bool value);
    public bool get_ShowBubble();
    public void set_ShowBubble(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4194")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAxcextRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usMinCategoryAxis;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usMaxCategoryAxis;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usMajor;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usMajorUnits;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usMinor;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usMinorUnits;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usBaseUnits;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usCrossingPoint;
    [BiffRecordPosAttribute("16", "2")]
private OptionFlags m_options;
    public ushort MinCategoryOnAxis { get; public set; }
    public ushort MaxCategoryOnAxis { get; public set; }
    public ushort Major { get; public set; }
    public ExcelChartBaseUnit MajorUnits { get; public set; }
    public ushort Minor { get; public set; }
    public ExcelChartBaseUnit MinorUnits { get; public set; }
    public ExcelChartBaseUnit BaseUnits { get; public set; }
    public ushort CrossingPoint { get; public set; }
    public ushort Options { get; }
    public bool UseDefaultMinimum { get; public set; }
    public bool UseDefaultMaximum { get; public set; }
    public bool UseDefaultMajorUnits { get; public set; }
    public bool UseDefaultMinorUnits { get; public set; }
    public bool IsDateAxis { get; public set; }
    public bool UseDefaultBaseUnits { get; public set; }
    public bool UseDefaultCrossPoint { get; public set; }
    public bool UseDefaultDateSettings { get; public set; }
    public ChartAxcextRecord(Stream stream, Int32& itemSize);
    public ChartAxcextRecord(int iReserve);
    public ushort get_MinCategoryOnAxis();
    public void set_MinCategoryOnAxis(ushort value);
    public ushort get_MaxCategoryOnAxis();
    public void set_MaxCategoryOnAxis(ushort value);
    public ushort get_Major();
    public void set_Major(ushort value);
    public ExcelChartBaseUnit get_MajorUnits();
    public void set_MajorUnits(ExcelChartBaseUnit value);
    public ushort get_Minor();
    public void set_Minor(ushort value);
    public ExcelChartBaseUnit get_MinorUnits();
    public void set_MinorUnits(ExcelChartBaseUnit value);
    public ExcelChartBaseUnit get_BaseUnits();
    public void set_BaseUnits(ExcelChartBaseUnit value);
    public ushort get_CrossingPoint();
    public void set_CrossingPoint(ushort value);
    public ushort get_Options();
    public bool get_UseDefaultMinimum();
    public void set_UseDefaultMinimum(bool value);
    public bool get_UseDefaultMaximum();
    public void set_UseDefaultMaximum(bool value);
    public bool get_UseDefaultMajorUnits();
    public void set_UseDefaultMajorUnits(bool value);
    public bool get_UseDefaultMinorUnits();
    public void set_UseDefaultMinorUnits(bool value);
    public bool get_IsDateAxis();
    public void set_IsDateAxis(bool value);
    public bool get_UseDefaultBaseUnits();
    public void set_UseDefaultBaseUnits(bool value);
    public bool get_UseDefaultCrossPoint();
    public void set_UseDefaultCrossPoint(bool value);
    public bool get_UseDefaultDateSettings();
    public void set_UseDefaultDateSettings(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4166")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAxesUsedRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usAxes;
    public ushort NumberOfAxes { get; public set; }
    public ChartAxesUsedRecord(Stream stream, Int32& itemSize);
    public ChartAxesUsedRecord(int iReserve);
    public ushort get_NumberOfAxes();
    public void set_NumberOfAxes(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2135")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAxisDisplayUnitsRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_displayUnit;
    [BiffRecordPosAttribute("6", "8", "6")]
private double m_displayUnitValue;
    [BiffRecordPosAttribute("14", "1")]
private byte m_isShowLabels;
    [BiffRecordPosAttribute("15", "1")]
private byte m_reserved;
    public ExcelChartDisplayUnit DisplayUnit { get; public set; }
    public double DisplayUnitValue { get; public set; }
    public bool IsShowLabels { get; public set; }
    public byte Recerved { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartAxisDisplayUnitsRecord(Stream stream, Int32& itemSize);
    public ChartAxisDisplayUnitsRecord(int iReserve);
    public ExcelChartDisplayUnit get_DisplayUnit();
    public void set_DisplayUnit(ExcelChartDisplayUnit value);
    public double get_DisplayUnitValue();
    public void set_DisplayUnitValue(double value);
    public bool get_IsShowLabels();
    public void set_IsShowLabels(bool value);
    public byte get_Recerved();
    public void set_Recerved(byte value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4129")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAxisLineFormatRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usAxisLineId;
    public ExcelAxisLineIdentifier LineIdentifier { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartAxisLineFormatRecord(Stream stream, Int32& itemSize);
    public ChartAxisLineFormatRecord(int iReserve);
    public ExcelAxisLineIdentifier get_LineIdentifier();
    public void set_LineIdentifier(ExcelAxisLineIdentifier value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2134")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAxisOffsetRecord : BiffRecordRaw {
    public static int DEF_MIN_RECORD_SIZE;
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usOffset;
    public int Offset { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartAxisOffsetRecord(Stream stream, Int32& itemSize);
    public ChartAxisOffsetRecord(int iReserve);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4161")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAxisParentRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usAxisIndex;
    [BiffRecordPosAttribute("2", "4", "True")]
private int m_iTopLeftX;
    [BiffRecordPosAttribute("6", "4", "True")]
private int m_iTopLeftY;
    [BiffRecordPosAttribute("10", "4", "True")]
private int m_iXLength;
    [BiffRecordPosAttribute("14", "4", "True")]
private int m_iYLength;
    public ushort AxesIndex { get; public set; }
    public int TopLeftX { get; public set; }
    public int TopLeftY { get; public set; }
    public int XAxisLength { get; public set; }
    public int YAxisLength { get; public set; }
    public ChartAxisParentRecord(Stream stream, Int32& itemSize);
    public ChartAxisParentRecord(int iReserve);
    public ushort get_AxesIndex();
    public void set_AxesIndex(ushort value);
    public int get_TopLeftX();
    public void set_TopLeftX(int value);
    public int get_TopLeftY();
    public void set_TopLeftY(int value);
    public int get_XAxisLength();
    public void set_XAxisLength(int value);
    public int get_YAxisLength();
    public void set_YAxisLength(int value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4125")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartAxisRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usAxisType;
    [BiffRecordPosAttribute("2", "4", "True")]
private int m_Reserved0;
    [BiffRecordPosAttribute("6", "4", "True")]
private int m_Reserved1;
    [BiffRecordPosAttribute("10", "4", "True")]
private int m_Reserved2;
    [BiffRecordPosAttribute("14", "4", "True")]
private int m_Reserved3;
    public ChartAxisType AxisType { get; public set; }
    public int Reserved0 { get; }
    public int Reserved1 { get; }
    public int Reserved2 { get; }
    public int Reserved3 { get; }
    public ChartAxisRecord(Stream stream, Int32& itemSize);
    public ChartAxisRecord(int iReserve);
    public ChartAxisType get_AxisType();
    public void set_AxisType(ChartAxisType value);
    public int get_Reserved0();
    public int get_Reserved1();
    public int get_Reserved2();
    public int get_Reserved3();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4119")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartBarRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOverlap;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usCategoriesSpace;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("4", "0", "1")]
private bool m_bIsHorizontal;
    [BiffRecordPosAttribute("4", "1", "1")]
private bool m_bStackValues;
    [BiffRecordPosAttribute("4", "2", "1")]
private bool m_bAsPercents;
    [BiffRecordPosAttribute("4", "3", "1")]
private bool m_bHasShadow;
    public int Overlap { get; public set; }
    public ushort CategoriesSpace { get; public set; }
    public ushort Options { get; }
    public bool IsHorizontalBar { get; public set; }
    public bool StackValues { get; public set; }
    public bool ShowAsPercents { get; public set; }
    public bool HasShadow { get; public set; }
    public ChartBarRecord(Stream stream, Int32& itemSize);
    public ChartBarRecord(int iReserve);
    public int get_Overlap();
    public void set_Overlap(int value);
    public ushort get_CategoriesSpace();
    public void set_CategoriesSpace(ushort value);
    public ushort get_Options();
    public bool get_IsHorizontalBar();
    public void set_IsHorizontalBar(bool value);
    public sealed virtual bool get_StackValues();
    public sealed virtual void set_StackValues(bool value);
    public sealed virtual bool get_ShowAsPercents();
    public sealed virtual void set_ShowAsPercents(bool value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2132")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartBegDispUnitRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("4", "4", "1")]
private bool m_bIsShowLabel;
    public bool IsShowLabels { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartBegDispUnitRecord(Stream stream, Int32& itemSize);
    public ChartBegDispUnitRecord(int iReserve);
    public bool get_IsShowLabels();
    public void set_IsShowLabels(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4199")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartBoppCustomRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usQuantity;
    private Byte[] m_bits;
    public ushort Counter { get; }
    public Byte[] BitFields { get; public set; }
    public ChartBoppCustomRecord(Stream stream, Int32& itemSize);
    public ChartBoppCustomRecord(int iReserve);
    public ushort get_Counter();
    public Byte[] get_BitFields();
    public void set_BitFields(Byte[] value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual object Clone();
}
[BiffAttribute("4193")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartBoppopRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "1")]
private byte m_PieType;
    [BiffRecordPosAttribute("1", "1")]
private byte m_UseDefaultSplit;
    [BiffRecordPosAttribute("1", "0", "1")]
private bool m_bUseDefaultSplit;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usSplitType;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usSplitPos;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usSplitPercent;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usPie2Size;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usGap;
    [BiffRecordPosAttribute("12", "8", "True")]
private long m_uiNumSplitValue;
    [BiffRecordPosAttribute("20", "0", "1")]
private bool m_bHasShadow;
    private bool m_bShowLeaderLines;
    public ExcelPieType PieChartType { get; public set; }
    public bool UseDefaultSplitValue { get; public set; }
    public ExcelSplitType ChartSplitType { get; public set; }
    public ushort SplitPosition { get; public set; }
    public ushort SplitPercent { get; public set; }
    public ushort Pie2Size { get; public set; }
    public ushort Gap { get; public set; }
    public int NumSplitValue { get; public set; }
    public bool HasShadow { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public ChartBoppopRecord(Stream stream, Int32& itemSize);
    public ChartBoppopRecord(int iReserve);
    public ExcelPieType get_PieChartType();
    public void set_PieChartType(ExcelPieType value);
    public bool get_UseDefaultSplitValue();
    public void set_UseDefaultSplitValue(bool value);
    public ExcelSplitType get_ChartSplitType();
    public void set_ChartSplitType(ExcelSplitType value);
    public ushort get_SplitPosition();
    public void set_SplitPosition(ushort value);
    public ushort get_SplitPercent();
    public void set_SplitPercent(ushort value);
    public ushort get_Pie2Size();
    public void set_Pie2Size(ushort value);
    public ushort get_Gap();
    public void set_Gap(ushort value);
    public int get_NumSplitValue();
    public void set_NumSplitValue(int value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public bool get_ShowLeaderLines();
    public void set_ShowLeaderLines(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4128")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartCatserRangeRecord : BiffRecordRaw {
    private static int DEF_MIN_CROSSPOINT;
    private static int DEF_MAX_CROSSPOINT;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCrossingPoint;
    internal double m_usCrossingPointDouble;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usLabelsFrequency;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usTickMarksFrequency;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("6", "0", "1")]
private bool m_bValueAxisCrossing;
    [BiffRecordPosAttribute("6", "1", "1")]
private bool m_bMaxCross;
    [BiffRecordPosAttribute("6", "2", "1")]
private bool m_bReverse;
    public ushort CrossingPoint { get; public set; }
    internal double CrossingPointDouble { get; internal set; }
    public ushort LabelsFrequency { get; public set; }
    public ushort TickMarksFrequency { get; public set; }
    public ushort Options { get; }
    public bool IsBetween { get; public set; }
    public bool IsMaxCross { get; public set; }
    public bool IsReverse { get; public set; }
    public ChartCatserRangeRecord(Stream stream, Int32& itemSize);
    public ChartCatserRangeRecord(int iReserve);
    public ushort get_CrossingPoint();
    public void set_CrossingPoint(ushort value);
    internal double get_CrossingPointDouble();
    internal void set_CrossingPointDouble(double value);
    public ushort get_LabelsFrequency();
    public void set_LabelsFrequency(ushort value);
    public ushort get_TickMarksFrequency();
    public void set_TickMarksFrequency(ushort value);
    public ushort get_Options();
    public bool get_IsBetween();
    public void set_IsBetween(bool value);
    public sealed virtual bool get_IsMaxCross();
    public sealed virtual void set_IsMaxCross(bool value);
    public bool get_IsReverse();
    public void set_IsReverse(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4116")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartChartFormatRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iReserved0;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iReserved1;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iReserved2;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iReserved3;
    [BiffRecordPosAttribute("16", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("16", "0", "1")]
private bool m_bIsVaryColor;
    [BiffRecordPosAttribute("18", "2")]
private ushort m_usZOrder;
    public int Reserved0 { get; }
    public int Reserved1 { get; }
    public int Reserved2 { get; }
    public int Reserved3 { get; }
    public ushort Options { get; }
    public bool IsVaryColor { get; public set; }
    public ushort DrawingZOrder { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartChartFormatRecord(Stream stream, Int32& itemSize);
    public ChartChartFormatRecord(int iReserve);
    public int get_Reserved0();
    public int get_Reserved1();
    public int get_Reserved2();
    public int get_Reserved3();
    public ushort get_Options();
    public bool get_IsVaryColor();
    public void set_IsVaryColor(bool value);
    public ushort get_DrawingZOrder();
    public void set_DrawingZOrder(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    internal bool EqualsWithoutOrder(ChartChartFormatRecord chartFormatRecord);
}
[BiffAttribute("4124")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartChartLineRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usDropLines;
    private bool m_hasDropLine;
    private bool m_hasHighLowLine;
    private bool m_hasSeriesLine;
    public ExcelDropLineStyle LineStyle { get; public set; }
    public bool HasDropLine { get; public set; }
    public bool HasHighLowLine { get; public set; }
    public bool HasSeriesLine { get; public set; }
    public ChartChartLineRecord(Stream stream, Int32& itemSize);
    public ChartChartLineRecord(int iReserve);
    public ExcelDropLineStyle get_LineStyle();
    public void set_LineStyle(ExcelDropLineStyle value);
    public bool get_HasDropLine();
    public void set_HasDropLine(bool value);
    public bool get_HasHighLowLine();
    public void set_HasHighLowLine(bool value);
    public bool get_HasSeriesLine();
    public void set_HasSeriesLine(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public static bool op_Equality(ChartChartLineRecord record1, ChartChartLineRecord record2);
    public static bool op_Inequality(ChartChartLineRecord record1, ChartChartLineRecord record2);
}
[BiffAttribute("4098")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartChartRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iTopLeftX;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iTopLeftY;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iWidth;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iHeight;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartChartRecord(Stream stream, Int32& itemSize);
    public ChartChartRecord(int iReserve);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4102")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartDataFormatRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPointNumber;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usSeriesIndex;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usSeriesNumber;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("6", "0", "1")]
private bool m_bUseXL4Color;
    public ushort PointNumber { get; public set; }
    public ushort SeriesIndex { get; public set; }
    public ushort SeriesNumber { get; public set; }
    public ushort Options { get; }
    public bool UserExcel4Colors { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartDataFormatRecord(Stream stream, Int32& itemSize);
    public ChartDataFormatRecord(int iReserve);
    public ushort get_PointNumber();
    public void set_PointNumber(ushort value);
    public ushort get_SeriesIndex();
    public void set_SeriesIndex(ushort value);
    public ushort get_SeriesNumber();
    public void set_SeriesNumber(ushort value);
    public ushort get_Options();
    public bool get_UserExcel4Colors();
    public void set_UserExcel4Colors(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2155")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartDataLabelsRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("12", "1")]
private byte m_Options;
    [BiffRecordPosAttribute("12", "0", "1")]
private bool m_bSeriesName;
    [BiffRecordPosAttribute("12", "1", "1")]
private bool m_bCategoryName;
    [BiffRecordPosAttribute("12", "2", "1")]
private bool m_bValue;
    [BiffRecordPosAttribute("12", "3", "1")]
private bool m_bPercentage;
    [BiffRecordPosAttribute("12", "4", "1")]
private bool m_bBubbleSize;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usDelimLen;
    private string m_strDelimiter;
    public byte Options { get; }
    public bool IsSeriesName { get; public set; }
    public bool IsCategoryName { get; public set; }
    public bool IsValue { get; public set; }
    public bool IsPercentage { get; public set; }
    public bool IsBubbleSize { get; public set; }
    public int DelimiterLength { get; }
    public string Delimiter { get; public set; }
    public ChartDataLabelsRecord(Stream stream, Int32& itemSize);
    public ChartDataLabelsRecord(int iReserve);
    public byte get_Options();
    public bool get_IsSeriesName();
    public void set_IsSeriesName(bool value);
    public bool get_IsCategoryName();
    public void set_IsCategoryName(bool value);
    public bool get_IsValue();
    public void set_IsValue(bool value);
    public bool get_IsPercentage();
    public void set_IsPercentage(bool value);
    public bool get_IsBubbleSize();
    public void set_IsBubbleSize(bool value);
    public int get_DelimiterLength();
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public static bool op_Equality(ChartDataLabelsRecord record1, ChartDataLabelsRecord record2);
    public static bool op_Inequality(ChartDataLabelsRecord record1, ChartDataLabelsRecord record2);
}
[BiffAttribute("4195")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartDatRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bHasHorizontalBorders;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bHasVerticalBorders;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bHasBorders;
    [BiffRecordPosAttribute("0", "3", "1")]
private bool m_bShowSeriesKeys;
    public ushort Options { get; }
    public bool HasHorizontalBorders { get; public set; }
    public bool HasVerticalBorders { get; public set; }
    public bool HasBorders { get; public set; }
    public bool ShowSeriesKeys { get; public set; }
    public ChartDatRecord(Stream stream, Int32& itemSize);
    public ChartDatRecord(int iReserve);
    public ushort get_Options();
    public bool get_HasHorizontalBorders();
    public void set_HasHorizontalBorders(bool value);
    public bool get_HasVerticalBorders();
    public void set_HasVerticalBorders(bool value);
    public bool get_HasBorders();
    public void set_HasBorders(bool value);
    public bool get_ShowSeriesKeys();
    public void set_ShowSeriesKeys(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4132")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartDefaultTextRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usObjectIdentifier;
    public TextDefaults TextCharacteristics { get; public set; }
    public ChartDefaultTextRecord(Stream stream, Int32& itemSize);
    public ChartDefaultTextRecord(int iReserve);
    public TextDefaults get_TextCharacteristics();
    public void set_TextCharacteristics(TextDefaults value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4157")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartDropBarRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usGap;
    public ushort Gap { get; public set; }
    public ChartDropBarRecord(Stream stream, Int32& itemSize);
    public ChartDropBarRecord(int iReserve);
    public ushort get_Gap();
    public void set_Gap(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2133")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartEndDispUnitRecord : BiffRecordRaw {
    public static int DEF_MIN_RECORD_SIZE;
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("4", "4", "1")]
private bool m_bIsShowLabel;
    public bool IsShowLabels { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartEndDispUnitRecord(Stream stream, Int32& itemSize);
    public ChartEndDispUnitRecord(int iReserve);
    public bool get_IsShowLabels();
    public void set_IsShowLabels(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4192")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartFbiRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usBasisWidth;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usBasisHeight;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usAppliedFontHeight;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usScaleBasis;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usFontIndex;
    public ushort BasisWidth { get; public set; }
    public ushort BasisHeight { get; public set; }
    public ushort AppliedFontHeight { get; public set; }
    public ushort ScaleBasis { get; public set; }
    public ushort FontIndex { get; public set; }
    public ChartFbiRecord(Stream stream, Int32& itemSize);
    public ChartFbiRecord(int iReserve);
    public ushort get_BasisWidth();
    public void set_BasisWidth(ushort value);
    public ushort get_BasisHeight();
    public void set_BasisHeight(ushort value);
    public ushort get_AppliedFontHeight();
    public void set_AppliedFontHeight(ushort value);
    public ushort get_ScaleBasis();
    public void set_ScaleBasis(ushort value);
    public ushort get_FontIndex();
    public void set_FontIndex(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4134")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartFontxRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFontIndex;
    public ushort FontIndex { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartFontxRecord(Stream stream, Int32& itemSize);
    public ChartFontxRecord(int iReserve);
    public ushort get_FontIndex();
    public void set_FontIndex(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4130")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartFormatLinkRecord : BiffRecordRaw {
    public static Byte[] UNKNOWN_BYTES;
    public static int DefaultRecordSize;
    public ChartFormatLinkRecord(Stream stream, Int32& itemSize);
    public ChartFormatLinkRecord(int iReserve);
    private static ChartFormatLinkRecord();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4146")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartFrameRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRectStyle;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("2", "0", "1")]
private bool m_bAutoSize;
    [BiffRecordPosAttribute("2", "1", "1")]
private bool m_bAutoPosition;
    public ushort Options { get; }
    public ExcelRectangleStyle Rectangle { get; public set; }
    public bool AutoSize { get; public set; }
    public bool AutoPosition { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartFrameRecord(Stream stream, Int32& itemSize);
    public ChartFrameRecord(int iReserve);
    public ushort get_Options();
    public ExcelRectangleStyle get_Rectangle();
    public void set_Rectangle(ExcelRectangleStyle value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public bool get_AutoPosition();
    public void set_AutoPosition(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4198")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartGelFrameRecord : BiffContinueRecordRaw {
    private Byte[] DEF_FIRST_BYTES;
    private Byte[] DEF_LAST_BYTES;
    public static int DEF_START_MSO_INDEX;
    public static int DEF_LAST_MSO_INDEX;
    public static int DEF_OFFSET;
    private List`1<FOPTE> m_list;
    public bool NeedDataArray { get; }
    public List`1<FOPTE> OptionList { get; public set; }
    public ChartGelFrameRecord(Stream stream, Int32& itemSize);
    public ChartGelFrameRecord(int iReserve);
    public virtual bool get_NeedDataArray();
    public List`1<FOPTE> get_OptionList();
    public void set_OptionList(List`1<FOPTE> value);
    public virtual void ParseStructure();
    private void ParseData();
    public virtual void InfillInternalData(ExcelVersion version);
    private void FillDataList();
    public List`1<BiffRecordRaw> UpdatesToAddInStream();
    public virtual object Clone();
    public void UpdateToSerialize();
    private bool Contains(MsoOptions id, Int32& index);
}
[BiffAttribute("4174")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartIfmtRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usNumberIndex;
    public ushort FormatIndex { get; public set; }
    public ChartIfmtRecord(Stream stream, Int32& itemSize);
    public ChartIfmtRecord(int iReserve);
    public ushort get_FormatIndex();
    public void set_FormatIndex(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4117")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartLegendRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iTopLeftX;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iTopLeftY;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iWidth;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iHeight;
    [BiffRecordPosAttribute("16", "1")]
private byte m_wType;
    [BiffRecordPosAttribute("17", "1")]
private byte m_wSpacing;
    [BiffRecordPosAttribute("18", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("18", "0", "1")]
private bool m_bAutoPosition;
    [BiffRecordPosAttribute("18", "1", "1")]
private bool m_bAutoSeries;
    [BiffRecordPosAttribute("18", "2", "1")]
private bool m_bAutoPosX;
    [BiffRecordPosAttribute("18", "3", "1")]
private bool m_bAutoPosY;
    [BiffRecordPosAttribute("18", "4", "1")]
private bool m_bIsVerticalLegend;
    [BiffRecordPosAttribute("18", "5", "1")]
private bool m_bContainsDataTable;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public ExcelLegendPosition Position { get; public set; }
    public ExcelLegendSpacing Spacing { get; public set; }
    public bool AutoPosition { get; public set; }
    public bool AutoSeries { get; public set; }
    public bool AutoPositionX { get; public set; }
    public bool AutoPositionY { get; public set; }
    public bool IsVerticalLegend { get; public set; }
    public bool ContainsDataTable { get; public set; }
    public ChartLegendRecord(Stream stream, Int32& itemSize);
    public ChartLegendRecord(int iReserve);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public ExcelLegendPosition get_Position();
    public void set_Position(ExcelLegendPosition value);
    public ExcelLegendSpacing get_Spacing();
    public void set_Spacing(ExcelLegendSpacing value);
    public bool get_AutoPosition();
    public void set_AutoPosition(bool value);
    public bool get_AutoSeries();
    public void set_AutoSeries(bool value);
    public bool get_AutoPositionX();
    public void set_AutoPositionX(bool value);
    public bool get_AutoPositionY();
    public void set_AutoPositionY(bool value);
    public bool get_IsVerticalLegend();
    public void set_IsVerticalLegend(bool value);
    public bool get_ContainsDataTable();
    public void set_ContainsDataTable(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4163")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartLegendxnRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usLegendEntityIndex;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("2", "0", "1")]
private bool m_bIsDeleted;
    [BiffRecordPosAttribute("2", "1", "1")]
private bool m_bIsFormatted;
    public ushort LegendEntityIndex { get; public set; }
    public ushort Options { get; }
    public bool IsDeleted { get; public set; }
    public bool IsFormatted { get; public set; }
    public ChartLegendxnRecord(Stream stream, Int32& itemSize);
    public ChartLegendxnRecord(int iReserve);
    public ushort get_LegendEntityIndex();
    public void set_LegendEntityIndex(ushort value);
    public ushort get_Options();
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
    public bool get_IsFormatted();
    public void set_IsFormatted(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4103")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartLineFormatRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_rgbColor;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usLinePattern;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usLineWeight;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("8", "0", "1")]
private bool m_bAutoFormat;
    [BiffRecordPosAttribute("8", "2", "1")]
private bool m_bDrawTickLabels;
    [BiffRecordPosAttribute("8", "3", "1")]
private bool m_bIsAutoLineColor;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usColorIndex;
    public int LineColor { get; public set; }
    public ExcelChartLinePattern LinePattern { get; public set; }
    public ExcelChartLineWeight LineWeight { get; public set; }
    public ushort Options { get; }
    public bool AutoFormat { get; public set; }
    public bool DrawTickLabels { get; public set; }
    public bool IsAutoLineColor { get; public set; }
    public ushort ColorIndex { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartLineFormatRecord(Stream stream, Int32& itemSize);
    public ChartLineFormatRecord(int iReserve);
    public int get_LineColor();
    public void set_LineColor(int value);
    public ExcelChartLinePattern get_LinePattern();
    public void set_LinePattern(ExcelChartLinePattern value);
    public ExcelChartLineWeight get_LineWeight();
    public void set_LineWeight(ExcelChartLineWeight value);
    public ushort get_Options();
    public bool get_AutoFormat();
    public void set_AutoFormat(bool value);
    public bool get_DrawTickLabels();
    public void set_DrawTickLabels(bool value);
    public bool get_IsAutoLineColor();
    public void set_IsAutoLineColor(bool value);
    public ushort get_ColorIndex();
    public void set_ColorIndex(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4120")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartLineRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bStackValues;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bAsPercents;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bHasShadow;
    public ushort Options { get; }
    public bool StackValues { get; public set; }
    public bool ShowAsPercents { get; public set; }
    public bool HasShadow { get; public set; }
    public ChartLineRecord(Stream stream, Int32& itemSize);
    public ChartLineRecord(int iReserve);
    public ushort get_Options();
    public sealed virtual bool get_StackValues();
    public sealed virtual void set_StackValues(bool value);
    public sealed virtual bool get_ShowAsPercents();
    public sealed virtual void set_ShowAsPercents(bool value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4105")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartMarkerFormatRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iForeColor;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iBackColor;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usMarkerType;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usBorderColorIndex;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usFillColorIndex;
    [BiffRecordPosAttribute("16", "4", "True")]
private int m_iLineSize;
    [BiffRecordPosAttribute("10", "0", "1")]
private bool m_bAutoColor;
    private bool m_bAutoFillColor;
    private bool m_bAutoBorderColor;
    [BiffRecordPosAttribute("10", "4", "1")]
private bool m_bNotShowInt;
    private bool m_isXls;
    [BiffRecordPosAttribute("10", "5", "1")]
private bool m_bNotShowBrd;
    private byte m_flagOptions;
    public int ForeColor { get; public set; }
    public int BackColor { get; public set; }
    public ExcelChartMarkerType MarkerType { get; public set; }
    public ushort Options { get; }
    public ushort BorderColorIndex { get; public set; }
    public ushort FillColorIndex { get; public set; }
    public int LineSize { get; public set; }
    public bool IsAutoColor { get; public set; }
    internal bool IsAutoFillColor { get; internal set; }
    internal bool IsAutoBorderColor { get; internal set; }
    public bool IsNotShowInt { get; public set; }
    internal bool IsXls { get; internal set; }
    public bool IsNotShowBrd { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    internal bool HasLineProperties { get; }
    internal byte FlagOptions { get; internal set; }
    public ChartMarkerFormatRecord(Stream stream, Int32& itemSize);
    public ChartMarkerFormatRecord(int iReserve);
    public int get_ForeColor();
    public void set_ForeColor(int value);
    public int get_BackColor();
    public void set_BackColor(int value);
    public ExcelChartMarkerType get_MarkerType();
    public void set_MarkerType(ExcelChartMarkerType value);
    public ushort get_Options();
    public ushort get_BorderColorIndex();
    public void set_BorderColorIndex(ushort value);
    public ushort get_FillColorIndex();
    public void set_FillColorIndex(ushort value);
    public int get_LineSize();
    public void set_LineSize(int value);
    public bool get_IsAutoColor();
    public void set_IsAutoColor(bool value);
    internal bool get_IsAutoFillColor();
    internal void set_IsAutoFillColor(bool value);
    internal bool get_IsAutoBorderColor();
    internal void set_IsAutoBorderColor(bool value);
    public bool get_IsNotShowInt();
    public void set_IsNotShowInt(bool value);
    internal bool get_IsXls();
    internal void set_IsXls(bool value);
    public bool get_IsNotShowBrd();
    public void set_IsNotShowBrd(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    internal bool get_HasLineProperties();
    internal byte get_FlagOptions();
    internal void set_FlagOptions(byte value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4135")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartObjectLinkRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usLinkObject;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usLinkIndex1;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usLinkIndex2;
    public ExcelObjectTextLink LinkObject { get; public set; }
    public ushort SeriesNumber { get; public set; }
    public ushort DataPointNumber { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartObjectLinkRecord(Stream stream, Int32& itemSize);
    public ChartObjectLinkRecord(int iReserve);
    public ExcelObjectTextLink get_LinkObject();
    public void set_LinkObject(ExcelObjectTextLink value);
    public ushort get_SeriesNumber();
    public void set_SeriesNumber(ushort value);
    public ushort get_DataPointNumber();
    public void set_DataPointNumber(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4156")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartPicfRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPictureType;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usImageFormat;
    [BiffRecordPosAttribute("4", "1")]
private byte m_Environment;
    [BiffRecordPosAttribute("5", "1")]
private byte m_usOptions;
    [BiffRecordPosAttribute("5", "0", "1")]
private bool m_bFormatOnly;
    [BiffRecordPosAttribute("5", "1", "1")]
private bool m_bPictureTopBottom;
    [BiffRecordPosAttribute("5", "2", "1")]
private bool m_bPictureBackFront;
    [BiffRecordPosAttribute("5", "3", "1")]
private bool m_bPictureSides;
    [BiffRecordPosAttribute("6", "8", "6")]
private double m_numScale;
    public TPicture PictureType { get; public set; }
    public TImageFormat ImageFormat { get; public set; }
    public TEnvironment Environment { get; public set; }
    public byte Options { get; }
    public bool IsFormatOnly { get; public set; }
    public bool IsPictureTopBottom { get; public set; }
    public bool IsPictureBackFront { get; public set; }
    public bool IsPictureSides { get; public set; }
    public double Scale { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartPicfRecord(Stream stream, Int32& itemSize);
    public ChartPicfRecord(int iReserve);
    public TPicture get_PictureType();
    public void set_PictureType(TPicture value);
    public TImageFormat get_ImageFormat();
    public void set_ImageFormat(TImageFormat value);
    public TEnvironment get_Environment();
    public void set_Environment(TEnvironment value);
    public byte get_Options();
    public bool get_IsFormatOnly();
    public void set_IsFormatOnly(bool value);
    public bool get_IsPictureTopBottom();
    public void set_IsPictureTopBottom(bool value);
    public bool get_IsPictureBackFront();
    public void set_IsPictureBackFront(bool value);
    public bool get_IsPictureSides();
    public void set_IsPictureSides(bool value);
    public double get_Scale();
    public void set_Scale(double value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4107")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartPieFormatRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPercent;
    public ushort Percent { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartPieFormatRecord(Stream stream, Int32& itemSize);
    public ChartPieFormatRecord(int iReserve);
    public ushort get_Percent();
    public void set_Percent(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4121")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartPieRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usStartAngle;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usDonutHoleSize;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("4", "0", "1")]
private bool m_bHasShadow;
    [BiffRecordPosAttribute("4", "1", "1")]
private bool m_bShowLeaderLines;
    public ushort StartAngle { get; public set; }
    public ushort DonutHoleSize { get; public set; }
    public ushort Options { get; public set; }
    public bool HasShadow { get; public set; }
    public bool ShowLeaderLines { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartPieRecord(Stream stream, Int32& itemSize);
    public ChartPieRecord(int iReserve);
    public ushort get_StartAngle();
    public void set_StartAngle(ushort value);
    public ushort get_DonutHoleSize();
    public void set_DonutHoleSize(ushort value);
    public ushort get_Options();
    public void set_Options(ushort value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public bool get_ShowLeaderLines();
    public void set_ShowLeaderLines(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("2215")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartPlotAreaLayoutRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    private Byte[] DEF_HEADER;
    private Byte[] m_frtHeader;
    private int m_dwCheckSum;
    private int m_info;
    private bool m_layoutTargetInner;
    private Byte[] m_reserved1;
    private int m_xTL;
    private int m_yTL;
    private int m_xBR;
    private int m_yBR;
    private LayoutModes m_wXMode;
    private LayoutModes m_wYMode;
    private LayoutModes m_wWidthMode;
    private LayoutModes m_wHeightMode;
    private double m_x;
    private double m_y;
    private double m_dx;
    private double m_dy;
    private Byte[] m_reserved2;
    private Byte[] FrtHeader { get; }
    private int dwCheckSum { get; private set; }
    internal bool LayoutTargetInner { get; internal set; }
    public int xTL { get; public set; }
    public int yTL { get; public set; }
    public int xBR { get; public set; }
    public int yBR { get; public set; }
    public LayoutModes WXMode { get; public set; }
    public LayoutModes WYMode { get; public set; }
    public LayoutModes WWidthMode { get; public set; }
    public LayoutModes WHeightMode { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Dx { get; public set; }
    public double Dy { get; public set; }
    public ChartPlotAreaLayoutRecord(Stream stream, Int32& itemSize);
    public ChartPlotAreaLayoutRecord(int iReserve);
    private Byte[] get_FrtHeader();
    private int get_dwCheckSum();
    private void set_dwCheckSum(int value);
    internal bool get_LayoutTargetInner();
    internal void set_LayoutTargetInner(bool value);
    public int get_xTL();
    public void set_xTL(int value);
    public int get_yTL();
    public void set_yTL(int value);
    public int get_xBR();
    public void set_xBR(int value);
    public int get_yBR();
    public void set_yBR(int value);
    public LayoutModes get_WXMode();
    public void set_WXMode(LayoutModes value);
    public LayoutModes get_WYMode();
    public void set_WYMode(LayoutModes value);
    public LayoutModes get_WWidthMode();
    public void set_WWidthMode(LayoutModes value);
    public LayoutModes get_WHeightMode();
    public void set_WHeightMode(LayoutModes value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Dx();
    public void set_Dx(double value);
    public double get_Dy();
    public void set_Dy(double value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private int CheckSum();
}
[BiffAttribute("4149")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartPlotAreaRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartPlotAreaRecord(Stream stream, Int32& itemSize);
    public ChartPlotAreaRecord(int iReserve);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4196")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartPlotGrowthRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4")]
private UInt32 m_uiHorzGrowth;
    [BiffRecordPosAttribute("4", "4")]
private UInt32 m_uiVertGrowth;
    public UInt32 HorzGrowth { get; public set; }
    public UInt32 VertGrowth { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartPlotGrowthRecord(Stream stream, Int32& itemSize);
    public ChartPlotGrowthRecord(int iReserve);
    public UInt32 get_HorzGrowth();
    public void set_HorzGrowth(UInt32 value);
    public UInt32 get_VertGrowth();
    public void set_VertGrowth(UInt32 value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4175")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartPosRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usTopLeft;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usBottomRight;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iX1;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iY1;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iX2;
    [BiffRecordPosAttribute("16", "4", "True")]
private int m_iY2;
    public ushort TopLeft { get; public set; }
    public ushort BottomRight { get; public set; }
    public int X1 { get; public set; }
    public int Y1 { get; public set; }
    public int X2 { get; public set; }
    public int Y2 { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartPosRecord(Stream stream, Int32& itemSize);
    public ChartPosRecord(int iReserve);
    public ushort get_TopLeft();
    public void set_TopLeft(ushort value);
    public ushort get_BottomRight();
    public void set_BottomRight(ushort value);
    public int get_X1();
    public void set_X1(int value);
    public int get_Y1();
    public void set_Y1(int value);
    public int get_X2();
    public void set_X2(int value);
    public int get_Y2();
    public void set_Y2(int value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4160")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartRadarAreaRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bRadarAxisLabel;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usReserved;
    public ushort Options { get; }
    public bool IsRadarAxisLabel { get; public set; }
    public ushort Resereved { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartRadarAreaRecord(Stream stream, Int32& itemSize);
    public ChartRadarAreaRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsRadarAxisLabel();
    public void set_IsRadarAxisLabel(bool value);
    public ushort get_Resereved();
    public void set_Resereved(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4158")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartRadarRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bRadarAxisLabel;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bHasShadow;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usReserved;
    public ushort Options { get; }
    public bool IsRadarAxisLabel { get; public set; }
    public bool HasShadow { get; public set; }
    public ushort Reserved { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartRadarRecord(Stream stream, Int32& itemSize);
    public ChartRadarRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsRadarAxisLabel();
    public void set_IsRadarAxisLabel(bool value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public ushort get_Reserved();
    public void set_Reserved(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4168")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSbaserefRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFirstRow;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usLastRow;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usFirstColumn;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usLastColumn;
    public ushort FirstRow { get; public set; }
    public ushort LastRow { get; public set; }
    public ushort FirstColumn { get; public set; }
    public ushort LastColumn { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartSbaserefRecord(Stream stream, Int32& itemSize);
    public ChartSbaserefRecord(int iReserve);
    public ushort get_FirstRow();
    public void set_FirstRow(ushort value);
    public ushort get_LastRow();
    public void set_LastRow(ushort value);
    public ushort get_FirstColumn();
    public void set_FirstColumn(ushort value);
    public ushort get_LastColumn();
    public void set_LastColumn(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4123")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartScatterRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usBubleSizeRation;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usBubleSize;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("4", "0", "1")]
private bool m_bBubbles;
    [BiffRecordPosAttribute("4", "1", "1")]
private bool m_bShowNegBubbles;
    [BiffRecordPosAttribute("4", "2", "1")]
private bool m_bHasShadow;
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ushort BubleSizeRation { get; public set; }
    public ExcelBubbleSize BubleSize { get; public set; }
    public ushort Options { get; public set; }
    public bool IsBubbles { get; public set; }
    public bool IsShowNegBubbles { get; public set; }
    public bool HasShadow { get; public set; }
    public ChartScatterRecord(Stream stream, Int32& itemSize);
    public ChartScatterRecord(int iReserve);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public ushort get_BubleSizeRation();
    public void set_BubleSizeRation(ushort value);
    public ExcelBubbleSize get_BubleSize();
    public void set_BubleSize(ExcelBubbleSize value);
    public ushort get_Options();
    public void set_Options(ushort value);
    public bool get_IsBubbles();
    public void set_IsBubbles(bool value);
    public bool get_IsShowNegBubbles();
    public void set_IsShowNegBubbles(bool value);
    public bool get_HasShadow();
    public void set_HasShadow(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4187")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSerAuxErrBarRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "1")]
private byte m_ErrorBarValue;
    [BiffRecordPosAttribute("1", "1")]
private byte m_ErrorBarType;
    [BiffRecordPosAttribute("2", "1")]
private byte m_TeeTop;
    [BiffRecordPosAttribute("3", "1")]
private byte m_Reserved;
    [BiffRecordPosAttribute("4", "8", "6")]
private double m_NumValue;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usValuesNumber;
    public TErrorBarValue ErrorBarValue { get; public set; }
    public ExcelErrorBarType ErrorBarType { get; public set; }
    public bool TeeTop { get; public set; }
    public byte Reserved { get; }
    public double NumValue { get; public set; }
    public ushort ValuesNumber { get; public set; }
    public ChartSerAuxErrBarRecord(Stream stream, Int32& itemSize);
    public ChartSerAuxErrBarRecord(int iReserve);
    public TErrorBarValue get_ErrorBarValue();
    public void set_ErrorBarValue(TErrorBarValue value);
    public ExcelErrorBarType get_ErrorBarType();
    public void set_ErrorBarType(ExcelErrorBarType value);
    public bool get_TeeTop();
    public void set_TeeTop(bool value);
    public byte get_Reserved();
    public double get_NumValue();
    public void set_NumValue(double value);
    public ushort get_ValuesNumber();
    public void set_ValuesNumber(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4171")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSerAuxTrendRecord : BiffRecordRaw {
    public static Byte[] DEF_NAN_BYTE_ARRAY;
    public static double DEF_NAN_VALUE;
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "1")]
private byte m_RegType;
    [BiffRecordPosAttribute("1", "1")]
private byte m_Order;
    [BiffRecordPosAttribute("2", "8", "6")]
private double m_numIntercept;
    [BiffRecordPosAttribute("10", "1")]
private byte m_bEquation;
    [BiffRecordPosAttribute("11", "1")]
private byte m_bRSquared;
    [BiffRecordPosAttribute("12", "8", "6")]
private double m_NumForecast;
    [BiffRecordPosAttribute("20", "8", "6")]
private double m_NumBackcast;
    public TRegression RegressionType { get; public set; }
    public byte Order { get; public set; }
    public double NumIntercept { get; public set; }
    public bool IsEquation { get; public set; }
    public bool IsRSquared { get; public set; }
    public double NumForecast { get; public set; }
    public double NumBackcast { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartSerAuxTrendRecord(Stream stream, Int32& itemSize);
    public ChartSerAuxTrendRecord(int iReserve);
    private static ChartSerAuxTrendRecord();
    public TRegression get_RegressionType();
    public void set_RegressionType(TRegression value);
    public byte get_Order();
    public void set_Order(byte value);
    public double get_NumIntercept();
    public void set_NumIntercept(double value);
    public bool get_IsEquation();
    public void set_IsEquation(bool value);
    public bool get_IsRSquared();
    public void set_IsRSquared(bool value);
    public double get_NumForecast();
    public void set_NumForecast(double value);
    public double get_NumBackcast();
    public void set_NumBackcast(double value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public void UpdateType(ExcelTrendLineType type);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4189")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSerFmtRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bSmoothedLine;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_b3DBubbles;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bArShadow;
    public ushort Options { get; }
    public bool IsSmoothedLine { get; public set; }
    public bool Is3DBubbles { get; public set; }
    public bool IsArShadow { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartSerFmtRecord(Stream stream, Int32& itemSize);
    public ChartSerFmtRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsSmoothedLine();
    public void set_IsSmoothedLine(bool value);
    public bool get_Is3DBubbles();
    public void set_Is3DBubbles(bool value);
    public bool get_IsArShadow();
    public void set_IsArShadow(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4118")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSeriesListRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCount;
    private UInt16[] m_arrSeries;
    public ushort SeriesCount { get; }
    public UInt16[] Series { get; public set; }
    public int MinimumRecordSize { get; }
    public ChartSeriesListRecord(Stream stream, Int32& itemSize);
    public ChartSeriesListRecord(int iReserve);
    public ushort get_SeriesCount();
    public UInt16[] get_Series();
    public void set_Series(UInt16[] value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public static bool op_Equality(ChartSeriesListRecord record1, ChartSeriesListRecord record2);
    public static bool op_Inequality(ChartSeriesListRecord record1, ChartSeriesListRecord record2);
    public virtual object Clone();
}
[BiffAttribute("4099")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSeriesRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usStdX;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usStdY;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usCatCount;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usValCount;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usBubbleDataType;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usBubbleSeriesCount;
    public DataType StdX { get; public set; }
    public DataType StdY { get; public set; }
    public ushort CategoriesCount { get; public set; }
    public ushort ValuesCount { get; public set; }
    public DataType BubbleDataType { get; public set; }
    public ushort BubbleSeriesCount { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartSeriesRecord(Stream stream, Int32& itemSize);
    public ChartSeriesRecord(int iReserve);
    public DataType get_StdX();
    public void set_StdX(DataType value);
    public DataType get_StdY();
    public void set_StdY(DataType value);
    public ushort get_CategoriesCount();
    public void set_CategoriesCount(ushort value);
    public ushort get_ValuesCount();
    public void set_ValuesCount(ushort value);
    public DataType get_BubbleDataType();
    public void set_BubbleDataType(DataType value);
    public ushort get_BubbleSeriesCount();
    public void set_BubbleSeriesCount(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4109")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSeriesTextRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usTextId;
    [BiffRecordPosAttribute("2", "1", "2")]
private string m_strText;
    public ushort TextId { get; public set; }
    public string Text { get; public set; }
    public int MinimumRecordSize { get; }
    public ChartSeriesTextRecord(Stream stream, Int32& itemSize);
    public ChartSeriesTextRecord(int iReserve);
    public ushort get_TextId();
    public void set_TextId(ushort value);
    public string get_Text();
    public void set_Text(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4170")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSerParentRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usSeries;
    public ushort Series { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartSerParentRecord(Stream stream, Int32& itemSize);
    public ChartSerParentRecord(int iReserve);
    public ushort get_Series();
    public void set_Series(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4165")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSertocrtRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usChartGroup;
    public ushort ChartGroup { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartSertocrtRecord(Stream stream, Int32& itemSize);
    public ChartSertocrtRecord(int iReserve);
    public ushort get_ChartGroup();
    public void set_ChartGroup(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4164")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartShtpropsRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    public static int DEF_MIN_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFlags;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bManSerAlloc;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bPlotVisOnly;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bNotSizeWith;
    [BiffRecordPosAttribute("0", "3", "1")]
private bool m_bManPlotArea;
    [BiffRecordPosAttribute("0", "4", "1")]
private bool m_bAlwaysAutoPlotArea;
    [BiffRecordPosAttribute("2", "1")]
private byte m_plotBlank;
    [BiffRecordPosAttribute("3", "1")]
private byte m_notUsed;
    public ushort Flags { get; }
    public bool IsManSerAlloc { get; public set; }
    public bool IsPlotVisOnly { get; public set; }
    public bool IsNotSizeWith { get; public set; }
    public bool IsManPlotArea { get; public set; }
    public bool IsAlwaysAutoPlotArea { get; public set; }
    public ExcelChartPlotEmpty PlotBlank { get; public set; }
    public byte Reserved { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartShtpropsRecord(Stream stream, Int32& itemSize);
    public ChartShtpropsRecord(int iReserve);
    public ushort get_Flags();
    public bool get_IsManSerAlloc();
    public void set_IsManSerAlloc(bool value);
    public bool get_IsPlotVisOnly();
    public void set_IsPlotVisOnly(bool value);
    public bool get_IsNotSizeWith();
    public void set_IsNotSizeWith(bool value);
    public bool get_IsManPlotArea();
    public void set_IsManPlotArea(bool value);
    public bool get_IsAlwaysAutoPlotArea();
    public void set_IsAlwaysAutoPlotArea(bool value);
    public ExcelChartPlotEmpty get_PlotBlank();
    public void set_PlotBlank(ExcelChartPlotEmpty value);
    public byte get_Reserved();
    public void set_Reserved(byte value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4197")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSiIndexRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usNumIndex;
    public ushort NumIndex { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartSiIndexRecord(Stream stream, Int32& itemSize);
    public ChartSiIndexRecord(int iReserve);
    public ushort get_NumIndex();
    public void set_NumIndex(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4159")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartSurfaceRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bFillSurface;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_b3DPhongShade;
    public ushort Options { get; }
    public bool IsFillSurface { get; public set; }
    public bool Is3DPhongShade { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartSurfaceRecord(Stream stream, Int32& itemSize);
    public ChartSurfaceRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsFillSurface();
    public void set_IsFillSurface(bool value);
    public bool get_Is3DPhongShade();
    public void set_Is3DPhongShade(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4133")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartTextRecord : BiffRecordRaw {
    public static int DEF_ROTATION_MASK;
    public static int DEF_FIRST_ROTATION_BIT;
    public static int DEF_DATA_LABEL_MASK;
    public static int DEF_DATA_LABEL_FIRST_BIT;
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "1")]
private byte m_HorzAlign;
    [BiffRecordPosAttribute("1", "1")]
private byte m_VertAlign;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usBkgMode;
    [BiffRecordPosAttribute("4", "4")]
private UInt32 m_uiTextColor;
    [BiffRecordPosAttribute("8", "4")]
private UInt32 m_uiXPos;
    [BiffRecordPosAttribute("12", "4")]
private UInt32 m_uiYPos;
    [BiffRecordPosAttribute("16", "4")]
private UInt32 m_uiXSize;
    [BiffRecordPosAttribute("20", "4")]
private UInt32 m_uiYSize;
    [BiffRecordPosAttribute("24", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("26", "2")]
private ushort m_usColorIndex;
    [BiffRecordPosAttribute("28", "2")]
private ushort m_usOptions2;
    [BiffRecordPosAttribute("24", "0", "1")]
private bool m_bAutoColor;
    [BiffRecordPosAttribute("24", "1", "1")]
private bool m_bShowKey;
    [BiffRecordPosAttribute("24", "2", "1")]
private bool m_bShowValue;
    [BiffRecordPosAttribute("24", "3", "1")]
private bool m_bVertical;
    [BiffRecordPosAttribute("24", "4", "1")]
private bool m_bAutoText;
    [BiffRecordPosAttribute("24", "5", "1")]
private bool m_bGenerated;
    [BiffRecordPosAttribute("24", "6", "1")]
private bool m_bDeleted;
    [BiffRecordPosAttribute("24", "7", "1")]
private bool m_bAutoMode;
    [BiffRecordPosAttribute("25", "3", "1")]
private bool m_bShowLabelPercent;
    [BiffRecordPosAttribute("25", "4", "1")]
private bool m_bShowPercent;
    [BiffRecordPosAttribute("25", "5", "1")]
private bool m_bShowBubbleSizes;
    [BiffRecordPosAttribute("25", "6", "1")]
private bool m_bShowLabel;
    [BiffRecordPosAttribute("30", "2", "True")]
private Nullable`1<short> m_sRotation;
    public ExcelChartHorzAlignment HorzAlign { get; public set; }
    public ExcelChartVertAlignment VertAlign { get; public set; }
    public ExcelChartBackgroundMode BackgroundMode { get; public set; }
    public UInt32 TextColor { get; public set; }
    public UInt32 XPos { get; public set; }
    public UInt32 YPos { get; public set; }
    public UInt32 XSize { get; public set; }
    public UInt32 YSize { get; public set; }
    public ushort Options { get; }
    public ExcelKnownColors ColorIndex { get; public set; }
    public ushort Options2 { get; public set; }
    public bool IsAutoColor { get; public set; }
    public bool IsShowKey { get; public set; }
    public bool IsShowValue { get; public set; }
    public bool IsVertical { get; public set; }
    public bool IsAutoText { get; public set; }
    public bool IsGenerated { get; public set; }
    public bool IsDeleted { get; public set; }
    public bool IsAutoMode { get; public set; }
    public bool IsShowLabelPercent { get; public set; }
    public bool IsShowPercent { get; public set; }
    public bool IsShowBubbleSizes { get; public set; }
    public bool IsShowLabel { get; public set; }
    public TRotation Rotation { get; public set; }
    public ExcelDataLabelPosition DataLabelPlacement { get; public set; }
    public short TextRotation { get; public set; }
    public Nullable`1<short> TextRotationOrNull { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartTextRecord(Stream stream, Int32& itemSize);
    public ChartTextRecord(int iReserve);
    public ExcelChartHorzAlignment get_HorzAlign();
    public void set_HorzAlign(ExcelChartHorzAlignment value);
    public ExcelChartVertAlignment get_VertAlign();
    public void set_VertAlign(ExcelChartVertAlignment value);
    public ExcelChartBackgroundMode get_BackgroundMode();
    public void set_BackgroundMode(ExcelChartBackgroundMode value);
    public UInt32 get_TextColor();
    public void set_TextColor(UInt32 value);
    public UInt32 get_XPos();
    public void set_XPos(UInt32 value);
    public UInt32 get_YPos();
    public void set_YPos(UInt32 value);
    public UInt32 get_XSize();
    public void set_XSize(UInt32 value);
    public UInt32 get_YSize();
    public void set_YSize(UInt32 value);
    public ushort get_Options();
    public ExcelKnownColors get_ColorIndex();
    public void set_ColorIndex(ExcelKnownColors value);
    public ushort get_Options2();
    public void set_Options2(ushort value);
    public bool get_IsAutoColor();
    public void set_IsAutoColor(bool value);
    public bool get_IsShowKey();
    public void set_IsShowKey(bool value);
    public bool get_IsShowValue();
    public void set_IsShowValue(bool value);
    public bool get_IsVertical();
    public void set_IsVertical(bool value);
    public bool get_IsAutoText();
    public void set_IsAutoText(bool value);
    public bool get_IsGenerated();
    public void set_IsGenerated(bool value);
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
    public bool get_IsAutoMode();
    public void set_IsAutoMode(bool value);
    public bool get_IsShowLabelPercent();
    public void set_IsShowLabelPercent(bool value);
    public bool get_IsShowPercent();
    public void set_IsShowPercent(bool value);
    public bool get_IsShowBubbleSizes();
    public void set_IsShowBubbleSizes(bool value);
    public bool get_IsShowLabel();
    public void set_IsShowLabel(bool value);
    public TRotation get_Rotation();
    public void set_Rotation(TRotation value);
    public ExcelDataLabelPosition get_DataLabelPlacement();
    public void set_DataLabelPlacement(ExcelDataLabelPosition value);
    public short get_TextRotation();
    public void set_TextRotation(short value);
    public Nullable`1<short> get_TextRotationOrNull();
    public void set_TextRotationOrNull(Nullable`1<short> value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("4126")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartTickRecord : BiffRecordRaw {
    public static ushort DEF_ROTATION_MASK;
    public static ushort DEF_FIRST_ROTATION_BIT;
    public static int DEF_RECORD_SIZE;
    private static int DEF_MAX_ANGLE;
    private static int ReservedFieldSize;
    [BiffRecordPosAttribute("0", "1")]
private byte m_MajorMark;
    [BiffRecordPosAttribute("1", "1")]
private byte m_MinorMark;
    [BiffRecordPosAttribute("2", "1")]
private byte m_labelPos;
    [BiffRecordPosAttribute("3", "1")]
private byte m_BackgroundMode;
    [BiffRecordPosAttribute("4", "4")]
private UInt32 m_uiTextColor;
    [BiffRecordPosAttribute("4", "4")]
private int m_iTextColor;
    [BiffRecordPosAttribute("24", "0", "1")]
private bool m_bAutoTextColor;
    [BiffRecordPosAttribute("24", "2")]
private ushort m_usFlags;
    [BiffRecordPosAttribute("24", "1", "1")]
private bool m_bAutoTextBack;
    [BiffRecordPosAttribute("24", "5", "1")]
private bool m_bAutoRotation;
    [BiffRecordPosAttribute("26", "2")]
private ushort m_usTickColorIndex;
    [BiffRecordPosAttribute("28", "2", "True")]
private short m_sRotationAngle;
    [BiffRecordPosAttribute("25", "6", "1")]
private bool m_bIsLeftToRight;
    [BiffRecordPosAttribute("25", "7", "1")]
private bool m_bIsRightToLeft;
    public ExcelTickMark MajorMark { get; public set; }
    public ExcelTickMark MinorMark { get; public set; }
    public ExcelTickLabelPosition LabelPos { get; public set; }
    public ExcelChartBackgroundMode BackgroundMode { get; public set; }
    public UInt32 TextColor { get; public set; }
    internal int TextColorInInt { get; internal set; }
    public ushort Flags { get; }
    public ushort TickColorIndex { get; public set; }
    public short RotationAngle { get; public set; }
    public bool IsAutoTextColor { get; public set; }
    public bool IsAutoTextBack { get; public set; }
    public bool IsAutoRotation { get; public set; }
    public bool IsLeftToRight { get; public set; }
    public bool IsRightToLeft { get; public set; }
    public TRotation Rotation { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartTickRecord(Stream stream, Int32& itemSize);
    public ChartTickRecord(int iReserve);
    public ExcelTickMark get_MajorMark();
    public void set_MajorMark(ExcelTickMark value);
    public ExcelTickMark get_MinorMark();
    public void set_MinorMark(ExcelTickMark value);
    public ExcelTickLabelPosition get_LabelPos();
    public void set_LabelPos(ExcelTickLabelPosition value);
    public ExcelChartBackgroundMode get_BackgroundMode();
    public void set_BackgroundMode(ExcelChartBackgroundMode value);
    public UInt32 get_TextColor();
    public void set_TextColor(UInt32 value);
    internal int get_TextColorInInt();
    internal void set_TextColorInInt(int value);
    public ushort get_Flags();
    public ushort get_TickColorIndex();
    public void set_TickColorIndex(ushort value);
    public short get_RotationAngle();
    public void set_RotationAngle(short value);
    public bool get_IsAutoTextColor();
    public void set_IsAutoTextColor(bool value);
    public bool get_IsAutoTextBack();
    public void set_IsAutoTextBack(bool value);
    public bool get_IsAutoRotation();
    public void set_IsAutoRotation(bool value);
    public bool get_IsLeftToRight();
    public void set_IsLeftToRight(bool value);
    public bool get_IsRightToLeft();
    public void set_IsRightToLeft(bool value);
    public TRotation get_Rotation();
    public void set_Rotation(TRotation value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4127")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartValueRangeRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "8", "6")]
private double m_dNumMin;
    [BiffRecordPosAttribute("8", "8", "6")]
private double m_dNumMax;
    [BiffRecordPosAttribute("16", "8", "6")]
private double m_dNumMajor;
    [BiffRecordPosAttribute("24", "8", "6")]
private double m_dNumMinor;
    [BiffRecordPosAttribute("32", "8", "6")]
private double m_dNumCross;
    [BiffRecordPosAttribute("40", "2")]
private ushort m_usFormatFlags;
    [BiffRecordPosAttribute("40", "0", "1")]
private bool m_bAutoMin;
    [BiffRecordPosAttribute("40", "1", "1")]
private bool m_bAutoMax;
    [BiffRecordPosAttribute("40", "2", "1")]
private bool m_bAutoMajor;
    [BiffRecordPosAttribute("40", "3", "1")]
private bool m_bAutoMinor;
    [BiffRecordPosAttribute("40", "4", "1")]
private bool m_bAutoCross;
    [BiffRecordPosAttribute("40", "5", "1")]
private bool m_bLogScale;
    [BiffRecordPosAttribute("40", "6", "1")]
private bool m_bReverse;
    [BiffRecordPosAttribute("40", "7", "1")]
private bool m_bMaxCross;
    public double NumMin { get; public set; }
    public double NumMax { get; public set; }
    public double NumMajor { get; public set; }
    public double NumMinor { get; public set; }
    public double NumCross { get; public set; }
    public ushort FormatFlags { get; }
    public bool IsAutoMin { get; public set; }
    public bool IsAutoMax { get; public set; }
    public bool IsAutoMajor { get; public set; }
    public bool IsAutoMinor { get; public set; }
    public bool IsAutoCross { get; public set; }
    public bool IsLogScale { get; public set; }
    public bool IsReverse { get; public set; }
    public bool IsMaxCross { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartValueRangeRecord(Stream stream, Int32& itemSize);
    public ChartValueRangeRecord(int iReserve);
    public double get_NumMin();
    public void set_NumMin(double value);
    public double get_NumMax();
    public void set_NumMax(double value);
    public double get_NumMajor();
    public void set_NumMajor(double value);
    public double get_NumMinor();
    public void set_NumMinor(double value);
    public double get_NumCross();
    public void set_NumCross(double value);
    public ushort get_FormatFlags();
    public bool get_IsAutoMin();
    public void set_IsAutoMin(bool value);
    public bool get_IsAutoMax();
    public void set_IsAutoMax(bool value);
    public bool get_IsAutoMajor();
    public void set_IsAutoMajor(bool value);
    public bool get_IsAutoMinor();
    public void set_IsAutoMinor(bool value);
    public bool get_IsAutoCross();
    public void set_IsAutoCross(bool value);
    public bool get_IsLogScale();
    public void set_IsLogScale(bool value);
    public bool get_IsReverse();
    public void set_IsReverse(bool value);
    public sealed virtual bool get_IsMaxCross();
    public sealed virtual void set_IsMaxCross(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2129")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ChartWrapperRecord : BiffRecordRaw {
    private static int DEF_RECORD_OFFSET;
    private BiffRecordRaw m_record;
    public BiffRecordRaw Record { get; public set; }
    public ChartWrapperRecord(Stream stream, Int32& itemSize);
    public ChartWrapperRecord(int iReserve);
    public BiffRecordRaw get_Record();
    public void set_Record(BiffRecordRaw value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual object Clone();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.FopteOptionWrapper : object {
    private List`1<FOPTE> m_list;
    [CLSCompliantAttribute("False")]
public List`1<FOPTE> OptionList { get; }
    [CLSCompliantAttribute("False")]
public FopteOptionWrapper(List`1<FOPTE> list);
    public List`1<FOPTE> get_OptionList();
    [CLSCompliantAttribute("False")]
public sealed virtual void AddOptionSorted(FOPTE option);
    public sealed virtual void RemoveOption(int index);
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Parser.Biff_Records.Charts.IFopteOptionWrapper {
    public abstract virtual void AddOptionSorted(FOPTE option);
    public abstract virtual void RemoveOption(int index);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.Charts.IMaxCross {
    public bool IsMaxCross { get; public set; }
    public abstract virtual bool get_IsMaxCross();
    public abstract virtual void set_IsMaxCross(bool value);
}
[BiffAttribute("51")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.PrintedChartSizeRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_prnChartSize;
    public ExcelPrintedChartSize PrintedChartSize { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public PrintedChartSizeRecord(Stream stream, Int32& itemSize);
    public PrintedChartSizeRecord(int iReserve);
    public ExcelPrintedChartSize get_PrintedChartSize();
    public void set_PrintedChartSize(ExcelPrintedChartSize value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.Charts.ShadowData : object {
    private ExcelChartType[] WARMMATTE_CHARTS;
    private ushort m_ShadowOuterPresets;
    private ushort m_ShadowInnerPresets;
    private ushort m_ShadowPrespectivePresets;
    private ushort m_BevelTop;
    private ushort m_BevelBottom;
    private ushort m_Material;
    private ushort m_Lighting;
    private ChartImpl m_chartObject;
    public Excel2007ChartPresetsOuter ShadowOuterPresets { get; public set; }
    public Excel2007ChartPresetsInner ShadowInnerPresets { get; public set; }
    public Excel2007ChartPresetsPrespective ShadowPrespectivePresets { get; public set; }
    public Excel2007ChartMaterialProperties Material { get; public set; }
    public Excel2007ChartLightingProperties Lighting { get; public set; }
    public Excel2007ChartBevelProperties BevelTop { get; public set; }
    public Excel2007ChartBevelProperties BevelBottom { get; public set; }
    internal ChartImpl ChartObject { get; internal set; }
    internal ShadowData(ThreeDFormatImpl parent);
    public Excel2007ChartPresetsOuter get_ShadowOuterPresets();
    public void set_ShadowOuterPresets(Excel2007ChartPresetsOuter value);
    public Excel2007ChartPresetsInner get_ShadowInnerPresets();
    public void set_ShadowInnerPresets(Excel2007ChartPresetsInner value);
    public Excel2007ChartPresetsPrespective get_ShadowPrespectivePresets();
    public void set_ShadowPrespectivePresets(Excel2007ChartPresetsPrespective value);
    public Excel2007ChartMaterialProperties get_Material();
    public void set_Material(Excel2007ChartMaterialProperties value);
    public Excel2007ChartLightingProperties get_Lighting();
    public void set_Lighting(Excel2007ChartLightingProperties value);
    public Excel2007ChartBevelProperties get_BevelTop();
    public void set_BevelTop(Excel2007ChartBevelProperties value);
    public Excel2007ChartBevelProperties get_BevelBottom();
    public void set_BevelBottom(Excel2007ChartBevelProperties value);
    internal ChartImpl get_ChartObject();
    internal void set_ChartObject(ChartImpl value);
    internal Excel2007ChartMaterialProperties GetMaterial();
    public sealed virtual object Clone();
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.Charts.TRotation : Enum {
    public int value__;
    public static TRotation LeftToRight;
    public static TRotation TopToBottom;
    public static TRotation CounterClockwise;
    public static TRotation Clockwise;
}
[BiffAttribute("4097")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ChartUnitsRecord : BiffRecordRaw {
    public static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usUnits;
    public ushort Units { get; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ChartUnitsRecord(Stream stream, Int32& itemSize);
    public ChartUnitsRecord(int iReserve);
    public ushort get_Units();
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.CloneUtils : object {
    public static Int32[] CloneIntArray(Int32[] array);
    [CLSCompliantAttribute("False")]
public static UInt16[] CloneUshortArray(UInt16[] array);
    public static String[] CloneStringArray(String[] array);
    public static Object[] CloneArray(Object[] array);
    public static List`1<T> CloneCloneable(List`1<T> toClone);
    public static object CloneCloneable(ICloneable toClone);
    public static List`1<BiffRecordRaw> CloneCloneable(List`1<BiffRecordRaw> toClone);
    public static List`1<TextWithFormat> CloneCloneable(List`1<TextWithFormat> toClone);
    internal static SortedList`2<int, int> CloneSortedList(SortedList`2<int, int> toClone);
    internal static SortedList`2<TKey, TValue> CloneCloneable(SortedList`2<TKey, TValue> list);
    public static List`1<T> CloneCloneable(IList`1<T> toClone, object parent);
    public static object CloneCloneable(ICloneParent toClone, object parent);
    [CLSCompliantAttribute("False")]
public static object CloneMsoBase(MsoBase toClone, MsoBase parent);
    public static Byte[] CloneByteArray(Byte[] arr);
    public static Ptg[] ClonePtgArray(Ptg[] arrToClone);
    [CLSCompliantAttribute("False")]
public static ColumnInfoRecord[] CloneArray(ColumnInfoRecord[] arrToClone);
    public static Dictionary`2<TKey, TValue> CloneHash(Dictionary`2<TKey, TValue> hash);
    public static Dictionary`2<TextWithFormat, int> CloneHash(Dictionary`2<TextWithFormat, int> hash);
    public static Dictionary`2<object, int> CloneHash(Dictionary`2<object, int> hash);
    public static Dictionary`2<int, int> CloneHash(Dictionary`2<int, int> hash);
    public static Dictionary`2<TKey, TValue> CloneHash(Dictionary`2<TKey, TValue> hash, object parent);
    public static Stream CloneStream(Stream stream);
    public static Boolean[] CloneBoolArray(Boolean[] sourceArray);
}
[BiffAttribute("442")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CodeNameRecord : BiffRecordRawWithArray {
    private string m_strName;
    public string CodeName { get; public set; }
    public CodeNameRecord(Stream stream, Int32& itemSize);
    public CodeNameRecord(int iReserve);
    public string get_CodeName();
    public void set_CodeName(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("66")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CodepageRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCodepage;
    public ushort Codepage { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public CodepageRecord(Stream stream, Int32& itemSize);
    public CodepageRecord(int iReserve);
    public ushort get_Codepage();
    public void set_Codepage(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.ColorScale : object {
    private static ushort DEF_MINIMUM_SIZE;
    private ushort m_undefined;
    private byte m_interpCurve;
    private byte m_gradient;
    private bool m_clamp;
    private bool m_background;
    private byte m_clampAndBackground;
    private List`1<CFInterpolationCurve> m_arrCFInterp;
    private List`1<CFGradientItem> m_arrCFGradient;
    private ColorScaleImpl m_colorScale;
    public List`1<CFInterpolationCurve> ListCFInterpolationCurve { get; public set; }
    public List`1<CFGradientItem> ListCFGradientItem { get; public set; }
    public ushort DefaultRecordSize { get; }
    public IColorScale ColorScaleImpl { get; }
    public List`1<CFInterpolationCurve> get_ListCFInterpolationCurve();
    public void set_ListCFInterpolationCurve(List`1<CFInterpolationCurve> value);
    public List`1<CFGradientItem> get_ListCFGradientItem();
    public void set_ListCFGradientItem(List`1<CFGradientItem> value);
    public ushort get_DefaultRecordSize();
    public IColorScale get_ColorScaleImpl();
    private void CopyColorScale();
    public int ParseColorScale(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeColorScale(DataProvider provider, int iOffset, ExcelVersion version, IColorScale m_iColorScale);
    public int GetStoreSize(ExcelVersion version);
    private double CalculateNumValue(int position);
    public void UpdateColorScaleColor(IColorScale m_colorScale);
    private UInt32 ColorToUInt(Color color);
    private Color UIntToColor(UInt32 color);
    private Color ConvertARGBToRGBA(Color colorValue);
    private Color ConvertRGBAToARGB(Color colorValue);
    internal void ClearAll();
}
[BiffAttribute("125")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ColumnInfoRecord : BiffRecordRaw {
    private static ushort OutlevelBitMask;
    private static int DEF_MAX_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFirstCol;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usLastCol;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usColWidth;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usExtFormatIndex;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("8", "0", "1")]
private bool m_bHidden;
    [BiffRecordPosAttribute("8", "2", "1")]
private bool m_bBestFit;
    [BiffRecordPosAttribute("8", "1", "1")]
private bool m_bUserSet;
    [BiffRecordPosAttribute("8", "3", "1")]
private bool m_bPhonetic;
    [BiffRecordPosAttribute("9", "4", "1")]
private bool m_bCollapsed;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usReserved;
    public ushort Reserved { get; }
    public ushort FirstColumn { get; public set; }
    public ushort LastColumn { get; public set; }
    public ushort ColumnWidth { get; public set; }
    public ushort ExtendedFormatIndex { get; public set; }
    public bool IsHidden { get; public set; }
    internal bool IsBestFit { get; internal set; }
    internal bool IsUserSet { get; internal set; }
    internal bool IsPhenotic { get; internal set; }
    public ushort OutlineLevel { get; public set; }
    public bool IsCollapsed { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    private ushort Syncfusion.XlsIO.Parser.Biff_Records.IOutline.Index { get; private set; }
    public ColumnInfoRecord(Stream stream, Int32& itemSize);
    public ColumnInfoRecord(int iReserve);
    public ushort get_Reserved();
    public ushort get_FirstColumn();
    public void set_FirstColumn(ushort value);
    public ushort get_LastColumn();
    public void set_LastColumn(ushort value);
    public ushort get_ColumnWidth();
    public void set_ColumnWidth(ushort value);
    public sealed virtual ushort get_ExtendedFormatIndex();
    public sealed virtual void set_ExtendedFormatIndex(ushort value);
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    internal bool get_IsBestFit();
    internal void set_IsBestFit(bool value);
    internal bool get_IsUserSet();
    internal void set_IsUserSet(bool value);
    internal bool get_IsPhenotic();
    internal void set_IsPhenotic(bool value);
    public sealed virtual ushort get_OutlineLevel();
    public sealed virtual void set_OutlineLevel(ushort value);
    public sealed virtual bool get_IsCollapsed();
    public sealed virtual void set_IsCollapsed(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    private sealed virtual override ushort Syncfusion.XlsIO.Parser.Biff_Records.IOutline.get_Index();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IOutline.set_Index(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual int CompareTo(object obj);
    public void SetDefaultOptions();
}
[BiffAttribute("2188")]
[CLSCompliantAttribute("False")]
internal class Syncfusion.XlsIO.Parser.Biff_Records.CompatibilityRecord : BiffRecordRaw {
    private FutureHeader m_header;
    private UInt32 m_bNoCompCheck;
    public UInt32 NoComptabilityCheck { get; public set; }
    public UInt32 get_NoComptabilityCheck();
    public void set_NoComptabilityCheck(UInt32 value);
    public virtual void ParseStructure(DataProvider arrData, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2169")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CondFmt12Record : BiffRecordRaw {
    private static ushort DEF_MINIMUM_RECORD_SIZE;
    private static int DEF_SUB_ITEM_SIZE;
    private static ushort DEF_REDRAW_ON;
    private static ushort DEF_REDRAW_OFF;
    private FutureHeader m_header;
    private ushort m_attribute;
    private TAddr m_addrEncloseRange;
    private ushort m_CF12Count;
    private bool m_NeedRedraw;
    private ushort m_index;
    private ushort m_usCellsCount;
    private List`1<Rectangle> m_arrCells;
    private bool m_isparsed;
    public ushort CF12RecordCount { get; public set; }
    public bool NeedRedrawRule { get; public set; }
    public ushort Index { get; public set; }
    public TAddr EncloseRange { get; public set; }
    public ushort CellsCount { get; public set; }
    public List`1<Rectangle> CellList { get; internal set; }
    public bool IsParsed { get; public set; }
    public CondFmt12Record(Stream stream, Int32& itemSize);
    public CondFmt12Record(int iReserve);
    public ushort get_CF12RecordCount();
    public void set_CF12RecordCount(ushort value);
    public bool get_NeedRedrawRule();
    public void set_NeedRedrawRule(bool value);
    public ushort get_Index();
    public void set_Index(ushort value);
    public TAddr get_EncloseRange();
    public void set_EncloseRange(TAddr value);
    public ushort get_CellsCount();
    public void set_CellsCount(ushort value);
    public List`1<Rectangle> get_CellList();
    internal void set_CellList(List`1<Rectangle> value);
    public bool get_IsParsed();
    public void set_IsParsed(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private void ExtractCellsList(DataProvider provider, Int32& offset);
    public virtual int GetStoreSize(ExcelVersion version);
    public void AddCell(Rectangle addr);
    public virtual object Clone();
}
[BiffAttribute("432")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CondFMTRecord : BiffRecordRaw {
    private static ushort DEF_MINIMUM_RECORD_SIZE;
    private static int DEF_FIXED_SIZE;
    private static int DEF_SUB_ITEM_SIZE;
    private static ushort DEF_REDRAW_ON;
    private static ushort DEF_REDRAW_OFF;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCFNumber;
    [BiffRecordPosAttribute("2", "0", "1")]
private bool m_usNeedRecalc;
    private ushort m_index;
    private TAddr m_addrEncloseRange;
    private ushort m_usCellsCount;
    private List`1<Rectangle> m_arrCells;
    private bool m_isparsed;
    public ushort CFNumber { get; public set; }
    public bool NeedRecalc { get; public set; }
    public ushort Index { get; public set; }
    public TAddr EncloseRange { get; public set; }
    public ushort CellsCount { get; public set; }
    public List`1<Rectangle> CellList { get; internal set; }
    public int MinimumRecordSize { get; }
    public bool IsParsed { get; public set; }
    public CondFMTRecord(Stream stream, Int32& itemSize);
    public CondFMTRecord(int iReserve);
    public ushort get_CFNumber();
    public void set_CFNumber(ushort value);
    public bool get_NeedRecalc();
    public void set_NeedRecalc(bool value);
    public ushort get_Index();
    public void set_Index(ushort value);
    public TAddr get_EncloseRange();
    public void set_EncloseRange(TAddr value);
    public ushort get_CellsCount();
    public void set_CellsCount(ushort value);
    public List`1<Rectangle> get_CellList();
    internal void set_CellList(List`1<Rectangle> value);
    public virtual int get_MinimumRecordSize();
    public bool get_IsParsed();
    public void set_IsParsed(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private void ExtractCellsList(DataProvider provider, Int32& offset);
    public virtual int GetStoreSize(ExcelVersion version);
    public void AddCell(Rectangle addr);
    public virtual object Clone();
}
[BiffAttribute("60")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ContinueRecord : BiffRecordRawWithArray {
    public bool NeedDataArray { get; }
    public virtual bool get_NeedDataArray();
    public sealed virtual void SetLength(int len);
    public void SetData(Byte[] arrData);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ContinueRecordBuilder : object {
    protected BiffContinueRecordRaw m_parent;
    protected int m_iPos;
    private int m_iContinuePos;
    private int m_iContinueSize;
    private int m_iTotal;
    protected int m_iMax;
    private TBIFFRecord m_firstContinueType;
    private TBIFFRecord m_continueType;
    private int m_iContinueCount;
    [CompilerGeneratedAttribute]
private EventHandler OnFirstContinue;
    public int FreeSpace { get; }
    public int Total { get; public set; }
    public int Position { get; public set; }
    public int Max { get; }
    public TBIFFRecord FirstContinueType { get; public set; }
    public TBIFFRecord ContinueType { get; public set; }
    public int MaximumSize { get; }
    public ContinueRecordBuilder(BiffContinueRecordRaw parent);
    public int get_FreeSpace();
    public int get_Total();
    public void set_Total(int value);
    public int get_Position();
    public void set_Position(int value);
    public int get_Max();
    public TBIFFRecord get_FirstContinueType();
    public void set_FirstContinueType(TBIFFRecord value);
    public TBIFFRecord get_ContinueType();
    public void set_ContinueType(TBIFFRecord value);
    public virtual int get_MaximumSize();
    [CompilerGeneratedAttribute]
public void add_OnFirstContinue(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnFirstContinue(EventHandler value);
    public void AppendByte(byte value);
    public virtual int AppendBytes(Byte[] data, int start, int length);
    public void AppendUInt16(ushort value);
    public bool CheckIfSpaceNeeded(int length);
    public void StartContinueRecord();
    public void UpdateContinueRecordSize();
    protected void UpdateCounters(int iLen);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ContinueRecordExtractor : object {
    private static Int32[] DEF_RECORDS;
    private BinaryReader m_tmpReader;
    private long m_lStartPos;
    private BiffRecordRaw m_continue;
    private bool m_bReset;
    private List`1<int> m_arrAllowedRecords;
    private Byte[] arrBuffer;
    private DataProvider m_provider;
    private IDecryptor m_decryptor;
    protected bool IsStreamEOF { get; }
    public BiffRecordRaw Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ContinueRecordExtractor(BinaryReader reader, IDecryptor decryptor, DataProvider provider);
    private static ContinueRecordExtractor();
    protected bool get_IsStreamEOF();
    protected BiffRecordRaw PeekRecord();
    public BiffRecordRaw get_Current();
    public long StoreStreamPosition();
    public void AddRecordType(TBIFFRecord recordType);
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
}
internal class Syncfusion.XlsIO.Parser.Biff_Records.ContinueRecordPublisher : object {
    private BinaryWriter m_writer;
    public ContinueRecordPublisher(BinaryWriter writer);
    public int PublishContinue(Byte[] data, int start);
    public int PublishContinue(Byte[] data, int start, int length);
    public int PublishContinue(Byte[] data, int start, int length, int maxSize);
    public int PublishContinue(Byte[] data, int start, BiffRecordRawWithArray destination, int offset);
    public int PublishContinue(Byte[] data, int start, int length, BiffRecordRawWithArray destination, int offset);
    public int PublishContinue(Byte[] data, int start, int length, int maxSize, BiffRecordRawWithArray destination, int offset);
}
[BiffAttribute("140")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CountryRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usDefault;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usCurrent;
    public ushort DefaultCountry { get; public set; }
    public ushort CurrentCountry { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public CountryRecord(Stream stream, Int32& itemSize);
    public CountryRecord(int iReserve);
    public ushort get_DefaultCountry();
    public void set_DefaultCountry(ushort value);
    public ushort get_CurrentCountry();
    public void set_CurrentCountry(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("90")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CRNRecord : BiffRecordRaw {
    private static int DEF_VALUES_OFFSET;
    private static string DEF_ERROR_MESSAGE;
    private static Byte[] DEF_RESERVED_BYTES;
    private static int DefaultSize;
    [BiffRecordPosAttribute("0", "1")]
private byte m_btLastCol;
    [BiffRecordPosAttribute("1", "1")]
private byte m_btFirstCol;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usRow;
    private List`1<object> m_arrValues;
    public bool NeedDataArray { get; }
    public byte LastColumn { get; public set; }
    public byte FirstColumn { get; public set; }
    public ushort Row { get; public set; }
    public int MinimumRecordSize { get; }
    public List`1<object> Values { get; }
    public CRNRecord(Stream stream, Int32& itemSize);
    public CRNRecord(int iReserve);
    private static CRNRecord();
    public virtual bool get_NeedDataArray();
    public byte get_LastColumn();
    public void set_LastColumn(byte value);
    public byte get_FirstColumn();
    public void set_FirstColumn(byte value);
    public ushort get_Row();
    public void set_Row(ushort value);
    public virtual int get_MinimumRecordSize();
    public List`1<object> get_Values();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private object GetValue(DataProvider provider, Int32& iOffset);
    private int SetValue(DataProvider provider, int iOffset, object value);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual object Clone();
}
[BiffAttribute("1048")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.CustomPropertyRecord : BiffRecordRaw {
    private static int DEF_FIXED_SIZE;
    private static Byte[] DEF_HEADER;
    private static int DEF_MAX_NAME_LENGTH;
    private string m_strName;
    private string m_strValue;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public CustomPropertyRecord(Stream stream, Int32& itemSize);
    public CustomPropertyRecord(int iReserve);
    private static CustomPropertyRecord();
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.DataBar : object {
    private static ushort DEF_MINIMUM_SIZE;
    private ushort m_undefined;
    private bool m_isRightToLeft;
    private bool m_isShowValue;
    private byte m_minDatabarLen;
    private byte m_MaxDatabarLen;
    private UInt32 m_colorType;
    private UInt32 m_colorValue;
    private long m_tintShade;
    private CFVO m_cfvoMin;
    private CFVO m_cfvoMax;
    private DataBarImpl m_dataBar;
    public ColorType ColorType { get; public set; }
    public UInt32 ColorValue { get; public set; }
    public long TintShade { get; public set; }
    public CFVO MinCFVO { get; public set; }
    public CFVO MaxCFVO { get; public set; }
    public IDataBar DataBarImpl { get; }
    public ColorType get_ColorType();
    public void set_ColorType(ColorType value);
    public UInt32 get_ColorValue();
    public void set_ColorValue(UInt32 value);
    public long get_TintShade();
    public void set_TintShade(long value);
    public CFVO get_MinCFVO();
    public void set_MinCFVO(CFVO value);
    public CFVO get_MaxCFVO();
    public void set_MaxCFVO(CFVO value);
    public IDataBar get_DataBarImpl();
    private void CopyDataBar();
    private Color ConvertRGBAToARGB(Color colorValue);
    public int ParseDataBar(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeDataBar(DataProvider provider, int iOffset, ExcelVersion version, IDataBar m_iDatabar);
    public int GetStoreSize(ExcelVersion version);
    private UInt32 ColorToUInt(Color color);
    private Color UIntToColor(UInt32 color);
    private Color ConvertARGBToRGBA(Color colorValue);
    internal void ClearAll();
}
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.DataProvider : object {
    public int Capacity { get; }
    public bool IsCleared { get; }
    protected virtual override void Finalize();
    public bool ReadBit(int iOffset, int iBit);
    public abstract virtual byte ReadByte(int iOffset);
    public bool ReadBoolean(int iOffset);
    public abstract virtual short ReadInt16(int iOffset);
    [CLSCompliantAttribute("False")]
public ushort ReadUInt16(int iOffset);
    public abstract virtual int ReadInt32(int iOffset);
    [CLSCompliantAttribute("False")]
public UInt32 ReadUInt32(int iOffset);
    public abstract virtual long ReadInt64(int iOffset);
    public virtual double ReadDouble(int iOffset);
    public abstract virtual void CopyTo(int iSourceOffset, Byte[] arrDestination, int iDestOffset, int iLength);
    public virtual void CopyTo(int iSourceOffset, DataProvider destination, int iDestOffset, int iLength);
    public abstract virtual void Read(BinaryReader reader, int iOffset, int iLength, Byte[] arrBuffer);
    public void Read(BinaryReader reader, int iOffset, int iLength, Byte[] arrBuffer, IDecryptor decryptor);
    public virtual string ReadString16Bit(int iOffset, Int32& iFullLength);
    public virtual string ReadString16BitUpdateOffset(Int32& iOffset);
    public virtual string ReadString8Bit(int iOffset, Int32& iFullLength);
    public int ReadArray(int iOffset, Byte[] arrDest);
    public int ReadArray(int iOffset, Byte[] arrDest, int size);
    public string ReadString(int offset, int iStrLen, Int32& iBytesInString, bool isByteCounted);
    public string ReadStringUpdateOffset(Int32& offset, int iStrLen);
    public abstract virtual string ReadString(int offset, int stringLength, Encoding encoding, bool isUnicode);
    [CLSCompliantAttribute("False")]
public TAddr ReadAddr(int offset);
    public Rectangle ReadAddrAsRectangle(int offset);
    public virtual void WriteInto(BinaryWriter writer, int iOffset, int iSize, Byte[] arrBuffer);
    public abstract virtual void WriteByte(int iOffset, byte value);
    public abstract virtual void WriteInt16(int iOffset, short value);
    [CLSCompliantAttribute("False")]
public virtual void WriteUInt16(int iOffset, ushort value);
    public abstract virtual void WriteInt32(int iOffset, int value);
    public abstract virtual void WriteInt64(int iOffset, long value);
    [CLSCompliantAttribute("False")]
public void WriteUInt32(int iOffset, UInt32 value);
    public abstract virtual void WriteBit(int offset, bool value, int bitPos);
    public abstract virtual void WriteDouble(int iOffset, double value);
    public void WriteString8BitUpdateOffset(Int32& offset, string value);
    public void WriteString16BitUpdateOffset(Int32& offset, string value);
    public void WriteString16BitUpdateOffset(Int32& offset, string value, bool isUnicode);
    public int WriteString16Bit(int offset, string value);
    public int WriteString16Bit(int offset, string value, bool isUnicode);
    public virtual void WriteStringNoLenUpdateOffset(Int32& offset, string value);
    public abstract virtual void WriteStringNoLenUpdateOffset(Int32& offset, string value, bool bUnicode);
    public void WriteBytes(int offset, Byte[] data);
    public abstract virtual void WriteBytes(int offset, Byte[] value, int pos, int length);
    [CLSCompliantAttribute("False")]
protected internal void WriteAddr(int offset, TAddr addr);
    protected internal void WriteAddr(int offset, Rectangle addr);
    public abstract virtual int get_Capacity();
    public abstract virtual bool get_IsCleared();
    public abstract virtual void MoveMemory(int iDestOffset, int iSourceOffset, int iMemorySize);
    public abstract virtual void CopyMemory(int iDestOffset, int iSourceOffset, int iMemorySize);
    public abstract virtual int EnsureCapacity(int size);
    public abstract virtual int EnsureCapacity(int size, int forceAdd);
    public abstract virtual void ZeroMemory();
    public abstract virtual void Clear();
    public abstract virtual DataProvider CreateProvider();
    public void Dispose(bool isDisposing);
    public sealed virtual void Dispose();
    protected virtual void OnDispose();
}
[BiffAttribute("34")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DateWindow1904Record : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usWindow;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bIs1904Windowing;
    public ushort Windowing { get; public set; }
    public bool Is1904Windowing { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public DateWindow1904Record(Stream stream, Int32& itemSize);
    public DateWindow1904Record(int iReserve);
    public ushort get_Windowing();
    public void set_Windowing(ushort value);
    public bool get_Is1904Windowing();
    public void set_Is1904Windowing(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("215")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DBCellRecord : BiffRecordWithStreamPos {
    private static int DEF_FIXED_SIZE;
    private static int DEF_SUB_ITEM_SIZE;
    [BiffRecordPosAttribute("0", "4", "False")]
private int m_iRowOffset;
    private UInt16[] m_arrCellOffset;
    public int RowOffset { get; public set; }
    public UInt16[] CellOffsets { get; public set; }
    public int MinimumRecordSize { get; }
    public DBCellRecord(Stream stream, Int32& itemSize);
    public DBCellRecord(int iReserve);
    public int get_RowOffset();
    public void set_RowOffset(int value);
    public UInt16[] get_CellOffsets();
    public void set_CellOffsets(UInt16[] value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private void InternalDataIntegrityCheck();
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("437")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DConBinRecord : BiffRecordRawWithArray {
    [BiffRecordPosAttribute("0", "3")]
private string m_strName;
    private string m_strWorkbookName;
    private Byte[] arrdata;
    public string Name { get; public set; }
    public string WorkbookName { get; public set; }
    public DConBinRecord(Stream stream, Int32& itemSize);
    public DConBinRecord(int iReserve);
    public string get_Name();
    public void set_Name(string value);
    public string get_WorkbookName();
    public void set_WorkbookName(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("82")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DConNameRecord : DConBinRecord {
    public DConNameRecord(Stream stream, Int32& itemSize);
    public DConNameRecord(int iReserve);
}
[BiffAttribute("80")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DCONRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2", "True")]
private short m_sFuncIndex;
    [BiffRecordPosAttribute("2", "2", "True")]
private short m_sLeftColumn;
    [BiffRecordPosAttribute("4", "2", "True")]
private short m_sTopRow;
    [BiffRecordPosAttribute("6", "2", "True")]
private short m_sLinkSource;
    public short FuncIndex { get; public set; }
    public bool IsLeftColumn { get; public set; }
    public bool IsTopRow { get; public set; }
    public bool IsLinkSource { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public DCONRecord(Stream stream, Int32& itemSize);
    public DCONRecord(int iReserve);
    public short get_FuncIndex();
    public void set_FuncIndex(short value);
    public bool get_IsLeftColumn();
    public void set_IsLeftColumn(bool value);
    public bool get_IsTopRow();
    public void set_IsTopRow(bool value);
    public bool get_IsLinkSource();
    public void set_IsLinkSource(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("81")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DConRefRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFirstRow;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usLastRow;
    [BiffRecordPosAttribute("4", "1")]
private byte m_btFirstColumn;
    [BiffRecordPosAttribute("5", "1")]
private byte m_btLastColumn;
    [BiffRecordPosAttribute("6", "3")]
private string m_strWorkbookName;
    public ushort FirstRow { get; public set; }
    public ushort LastRow { get; public set; }
    public byte FirstColumn { get; public set; }
    public byte LastColumn { get; public set; }
    public string WorkbookName { get; public set; }
    public DConRefRecord(Stream stream, Int32& itemSize);
    public DConRefRecord(int iReserve);
    public ushort get_FirstRow();
    public void set_FirstRow(ushort value);
    public ushort get_LastRow();
    public void set_LastRow(ushort value);
    public byte get_FirstColumn();
    public void set_FirstColumn(byte value);
    public byte get_LastColumn();
    public void set_LastColumn(byte value);
    public string get_WorkbookName();
    public void set_WorkbookName(string value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("85")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DefaultColWidthRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usColWidth;
    public ushort Width { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public DefaultColWidthRecord(Stream stream, Int32& itemSize);
    public DefaultColWidthRecord(int iReserve);
    public ushort get_Width();
    public void set_Width(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("549")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DefaultRowHeightRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptionFlags;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usRowHeigth;
    private bool m_customHeight;
    public ushort OptionFlags { get; public set; }
    public ushort Height { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    internal bool CustomHeight { get; }
    public DefaultRowHeightRecord(Stream stream, Int32& itemSize);
    public DefaultRowHeightRecord(int iReserve);
    public ushort get_OptionFlags();
    public void set_OptionFlags(ushort value);
    public ushort get_Height();
    public void set_Height(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    internal bool get_CustomHeight();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("16")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DeltaRecord : BiffRecordRaw {
    public static double DEFAULT_VALUE;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "8", "6")]
private double m_dbMaxChange;
    public double MaxChange { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public DeltaRecord(Stream stream, Int32& itemSize);
    public DeltaRecord(int iReserve);
    public double get_MaxChange();
    public void set_MaxChange(double value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("512")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DimensionsRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iFirstRow;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iLastRow;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usFirstColumn;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usLastColumn;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usReserved;
    public ushort Reserved { get; }
    public int FirstRow { get; public set; }
    public int LastRow { get; public set; }
    public ushort FirstColumn { get; public set; }
    public ushort LastColumn { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public DimensionsRecord(Stream stream, Int32& itemSize);
    public DimensionsRecord(int iReserve);
    public ushort get_Reserved();
    public int get_FirstRow();
    public void set_FirstRow(int value);
    public int get_LastRow();
    public void set_LastRow(int value);
    public ushort get_FirstColumn();
    public void set_FirstColumn(ushort value);
    public ushort get_LastColumn();
    public void set_LastColumn(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("353")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DSFRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usDSF;
    public ushort IsDoubleStream { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public DSFRecord(Stream stream, Int32& itemSize);
    public DSFRecord(int iReserve);
    public ushort get_IsDoubleStream();
    public void set_IsDoubleStream(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("434")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DValRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bPromtBoxVisible;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bPromtBoxPosFixed;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bDataCached;
    [BiffRecordPosAttribute("2", "4", "True")]
private int m_iPromtBoxHPos;
    [BiffRecordPosAttribute("6", "4", "True")]
private int m_iPromtBoxVPos;
    [BiffRecordPosAttribute("10", "4")]
private UInt32 m_uiObjectId;
    [BiffRecordPosAttribute("14", "4")]
private UInt32 m_uiDVNumber;
    public ushort Options { get; }
    public bool IsPromtBoxVisible { get; public set; }
    public bool IsPromtBoxPosFixed { get; public set; }
    public bool IsDataCached { get; public set; }
    public int PromtBoxHPos { get; public set; }
    public int PromtBoxVPos { get; public set; }
    public UInt32 ObjectId { get; public set; }
    public UInt32 DVNumber { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public DValRecord(Stream stream, Int32& itemSize);
    public DValRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsPromtBoxVisible();
    public void set_IsPromtBoxVisible(bool value);
    public bool get_IsPromtBoxPosFixed();
    public void set_IsPromtBoxPosFixed(bool value);
    public bool get_IsDataCached();
    public void set_IsDataCached(bool value);
    public int get_PromtBoxHPos();
    public void set_PromtBoxHPos(int value);
    public int get_PromtBoxVPos();
    public void set_PromtBoxVPos(int value);
    public UInt32 get_ObjectId();
    public void set_ObjectId(UInt32 value);
    public UInt32 get_DVNumber();
    public void set_DVNumber(UInt32 value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[BiffAttribute("446")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DVRecord : BiffRecordRawWithArray {
    public static UInt32 DataTypeBitMask;
    public static UInt32 ErrorStyleBitMask;
    public static UInt32 ConditionBitMask;
    public static int ErrorStyleStartBit;
    public static int ConditionStartBit;
    public static string StringEmpty;
    private static int DEF_FIXED_PART_SIZE;
    [BiffRecordPosAttribute("0", "4")]
private UInt32 m_uiOptions;
    [BiffRecordPosAttribute("0", "7", "1")]
private bool m_bStrListExplicit;
    [BiffRecordPosAttribute("1", "0", "1")]
private bool m_bEmptyCell;
    [BiffRecordPosAttribute("1", "1", "1")]
private bool m_bSuppressArrow;
    [BiffRecordPosAttribute("2", "2", "1")]
private bool m_bShowPromptBox;
    [BiffRecordPosAttribute("2", "3", "1")]
private bool m_bShowErrorBox;
    private string m_strPromtBoxTitle;
    private bool m_bPromptBoxShort;
    private string m_strErrorBoxTitle;
    private bool m_bErrorBoxShort;
    private string m_strPromtBoxText;
    private bool m_bPromptBoxTextShort;
    private string m_strErrorBoxText;
    private bool m_bErrorBoxTextShort;
    private ushort m_usAddrListSize;
    private List`1<TAddr> m_arrAddrList;
    private Ptg[] m_arrFirstFormulaTokens;
    private string m_choiceTokens;
    private bool m_isFormulaOrChoice;
    private Ptg[] m_arrSecondFormulaTokens;
    public UInt32 Options { get; }
    public bool IsStrListExplicit { get; public set; }
    public bool IsEmptyCell { get; public set; }
    public bool IsSuppressArrow { get; public set; }
    public bool IsShowPromptBox { get; public set; }
    public bool IsShowErrorBox { get; public set; }
    public ExcelDataType DataType { get; public set; }
    public ExcelErrorStyle ErrorStyle { get; public set; }
    public ExcelDataValidationComparisonOperator Condition { get; public set; }
    public string PromtBoxTitle { get; public set; }
    public string ErrorBoxTitle { get; public set; }
    public string PromtBoxText { get; public set; }
    public string ErrorBoxText { get; public set; }
    public Ptg[] FirstFormulaTokens { get; public set; }
    public Ptg[] SecondFormulaTokens { get; public set; }
    internal string ChoiceTokens { get; internal set; }
    internal bool IsFormulaOrChoice { get; internal set; }
    public ushort AddrListSize { get; }
    public TAddr[] AddrList { get; public set; }
    public int MinimumRecordSize { get; }
    public DVRecord(Stream stream, Int32& itemSize);
    public DVRecord(int iReserve);
    public UInt32 get_Options();
    public bool get_IsStrListExplicit();
    public void set_IsStrListExplicit(bool value);
    public bool get_IsEmptyCell();
    public void set_IsEmptyCell(bool value);
    public bool get_IsSuppressArrow();
    public void set_IsSuppressArrow(bool value);
    public bool get_IsShowPromptBox();
    public void set_IsShowPromptBox(bool value);
    public bool get_IsShowErrorBox();
    public void set_IsShowErrorBox(bool value);
    public ExcelDataType get_DataType();
    public void set_DataType(ExcelDataType value);
    public ExcelErrorStyle get_ErrorStyle();
    public void set_ErrorStyle(ExcelErrorStyle value);
    public ExcelDataValidationComparisonOperator get_Condition();
    public void set_Condition(ExcelDataValidationComparisonOperator value);
    public string get_PromtBoxTitle();
    public void set_PromtBoxTitle(string value);
    public string get_ErrorBoxTitle();
    public void set_ErrorBoxTitle(string value);
    public string get_PromtBoxText();
    public void set_PromtBoxText(string value);
    public string get_ErrorBoxText();
    public void set_ErrorBoxText(string value);
    public Ptg[] get_FirstFormulaTokens();
    public void set_FirstFormulaTokens(Ptg[] value);
    public Ptg[] get_SecondFormulaTokens();
    public void set_SecondFormulaTokens(Ptg[] value);
    internal string get_ChoiceTokens();
    internal void set_ChoiceTokens(string value);
    internal bool get_IsFormulaOrChoice();
    internal void set_IsFormulaOrChoice(bool value);
    public ushort get_AddrListSize();
    public TAddr[] get_AddrList();
    public void set_AddrList(TAddr[] value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    private Byte[] ReplaceBytes(Byte[] src, string replace, string replacewith);
    private String[] splitString(string stringToSplit);
    private Byte[] StringArrayToByteArray(string value, Byte[] arrFstCondFormula1);
    public void Add(TAddr addrToAdd);
    public void AddRange(TAddr[] addrToAdd);
    public void AddRange(ICollection`1<TAddr> addrToAdd);
    public void ClearAddressList();
    public static int GetFormulaSize(Ptg[] arrTokens, ExcelVersion version, bool addAdditionalDataSize);
    public virtual int GetStoreSize(ExcelVersion version);
    private string CreateNotEmptyString(string strToModify);
    private string CreateEmptyString(string strToModify);
    public sealed virtual object Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.DXFN : object {
    private static int DEF_FONT_FIRST_RESERVED_SIZE;
    private static int DEF_FONT_SECOND_RESERVED_SIZE;
    private static int DEF_FONT_THIRD_RESERVED_SIZE;
    private static UInt32 DEF_FONT_POSTURE_MASK;
    private static UInt32 DEF_FONT_CANCELLATION_MASK;
    private static UInt32 DEF_FONT_STYLE_MODIFIED_MASK;
    private static UInt32 DEF_FONT_CANCELLATION_MODIFIED_MASK;
    private static ushort DEF_BORDER_LEFT_MASK;
    private static ushort DEF_BORDER_RIGHT_MASK;
    private static ushort DEF_BORDER_TOP_MASK;
    private static ushort DEF_BORDER_BOTTOM_MASK;
    private static UInt32 DEF_BORDER_LEFT_COLOR_MASK;
    private static UInt32 DEF_BORDER_RIGHT_COLOR_MASK;
    private static UInt32 DEF_BORDER_TOP_COLOR_MASK;
    private static UInt32 DEF_BORDER_BOTTOM_COLOR_MASK;
    private static int DEF_BORDER_LEFT_COLOR_START;
    private static int DEF_BORDER_RIGHT_COLOR_START;
    private static int DEF_BORDER_TOP_COLOR_START;
    private static int DEF_BORDER_BOTTOM_COLOR_START;
    private static ushort DEF_PATTERN_MASK;
    private static ushort DEF_PATTERN_COLOR_MASK;
    private static ushort DEF_PATTERN_BACKCOLOR_MASK;
    private static int DEF_PATTERN_START;
    private static int DEF_PATTERN_BACKCOLOR_START;
    private static int DEF_FONT_BLOCK_SIZE;
    private static int DEF_BORDER_BLOCK_SIZE;
    private static int DEF_PATTERN_BLOCK_SIZE;
    private static int DEF_NUMBER_FORMAT_BLOCK_SIZE;
    public static UInt32 DefaultColorIndex;
    private UInt32 m_uiOptions;
    private byte m_usReserved;
    private bool m_bLeftBorder;
    private bool m_bRightBorder;
    private bool m_bTopBorder;
    private bool m_bBottomBorder;
    private bool m_bPatternStyle;
    private bool m_bPatternColor;
    private bool m_bPatternBackColor;
    private bool m_bNumberFormatModified;
    private bool m_bNumberFormatPresent;
    private bool m_bFontFormat;
    private bool m_bBorderFormat;
    private bool m_bPatternFormat;
    private bool m_numberFormatIsUserDefined;
    private UInt32 m_uiFontHeight;
    private UInt32 m_uiFontOptions;
    private ushort m_usFontWeight;
    private ushort m_usEscapmentType;
    private byte m_Underline;
    private UInt32 m_uiFontColorIndex;
    private UInt32 m_uiModifiedFlags;
    private UInt32 m_uiEscapmentModified;
    private UInt32 m_uiUnderlineModified;
    private ushort m_usBorderLineStyles;
    private UInt32 m_uiBorderColors;
    private ushort m_usPatternStyle;
    private ushort m_usPatternColors;
    private ushort m_unUsed;
    private ushort m_numFormatIndex;
    private ushort m_userdefNumFormatSize;
    private ushort m_charCount;
    private bool m_isHighByte;
    private string m_strValue;
    public int ParseDXFN(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeDXFN(DataProvider provider, int iOffset, ExcelVersion version);
    public int ParseFontBlock(DataProvider provider, Int32& iOffset);
    public int ParseBorderBlock(DataProvider provider, Int32& iOffset);
    public int ParsePatternBlock(DataProvider provider, Int32& iOffset);
    public int ParseNumberFormatBlock(DataProvider provider, Int32& iOffset);
    public int ParseUserdefinedNumberFormatBlock(DataProvider provider, Int32& iOffset);
    public int SerializeFontBlock(DataProvider provider, Int32& iOffset);
    public int SerializeBorderBlock(DataProvider provider, Int32& iOffset);
    public int SerializePatternBlock(DataProvider provider, Int32& iOffset);
    public int SerializeNumberFormatBlock(DataProvider provider, Int32& iOffset);
    public int SerializeUserdefinedNumberFormatBlock(DataProvider provider, Int32& iOffset);
    public int GetStoreSize(ExcelVersion version);
    public int GetHashCode();
}
[BiffAttribute("153")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.DxGCol : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usColWidth;
    public ushort Width { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public DxGCol(Stream stream, Int32& itemSize);
    public DxGCol(int iReserve);
    public ushort get_Width();
    public void set_Width(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4148")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.EndRecord : BiffRecordRawWithArray {
    public int MaximumRecordSize { get; }
    public EndRecord(Stream stream, Int32& itemSize);
    public EndRecord(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("10")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.EOFRecord : BiffRecordRaw {
    public int MaximumRecordSize { get; }
    public EOFRecord(Stream stream, Int32& itemSize);
    public EOFRecord(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2172")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ExtendedFormatCRC : BiffRecordRaw {
    private FutureHeader m_header;
    private ushort m_usXFCount;
    private UInt32 m_uiCRC;
    private WorkbookImpl m_book;
    public ushort XFCount { get; public set; }
    public UInt32 CRCChecksum { get; public set; }
    public ushort get_XFCount();
    public void set_XFCount(ushort value);
    public UInt32 get_CRCChecksum();
    public void set_CRCChecksum(UInt32 value);
    public virtual void ParseStructure(DataProvider arrData, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual int GetHashCode();
    public virtual object Clone();
}
[BiffAttribute("224")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ExtendedFormatRecord : BiffRecordRaw {
    private static ushort DEF_INDENT_MASK;
    private static ushort DEF_READ_ORDER_MASK;
    private static ushort DEF_READ_ORDER_START_BIT;
    private static ushort DEF_PARENT_INDEX_MASK;
    private static ushort DEF_ROTATION_MASK;
    private static UInt32 DEF_TOP_BORDER_PALLETE_MASK;
    private static UInt32 DEF_BOTTOM_BORDER_PALLETE_MASK;
    private static UInt32 DEF_DIAGONAL_MASK;
    private static UInt32 DEF_DIAGONAL_LINE_MASK;
    private static UInt32 DEF_FILL_PATTERN_MASK;
    private static ushort DEF_BORDER_LEFT_MASK;
    private static ushort DEF_BORDER_RIGTH_MASK;
    private static ushort DEF_BORDER_TOP_MASK;
    private static ushort DEF_BORDER_BOTTOM_MASK;
    private static ushort DEF_HOR_ALIGNMENT_MASK;
    private static ushort DEF_VER_ALIGNMENT_MASK;
    private static ushort DEF_BACKGROUND_MASK;
    private static ushort DEF_FOREGROUND_MASK;
    private static ushort DEF_LEFT_BORDER_PALLETE_MASK;
    private static ushort DEF_RIGHT_BORDER_PALLETE_MASK;
    private static int DEF_RIGHT_BORDER_START_MASK;
    private static int DEF_RECORD_SIZE;
    private static int DEF_FILL_FOREGROUND_MASK;
    public static int DEF_DEFAULT_COLOR_INDEX;
    public static int DEF_DEFAULT_PATTERN_COLOR_INDEX;
    private static int DEF_XF_MAX_INDEX;
    private static int HALIGN_JUSTIFY;
    private static int VALIGN_JUSTIFY;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFontIndex;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usFormatIndex;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usCellOptions;
    [BiffRecordPosAttribute("4", "0", "1")]
private bool m_bLocked;
    [BiffRecordPosAttribute("4", "1", "1")]
private bool m_bHidden;
    [BiffRecordPosAttribute("4", "2", "1")]
private bool m_xfType;
    [BiffRecordPosAttribute("4", "3", "1")]
private bool m_b123Prefix;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usAlignmentOptions;
    [BiffRecordPosAttribute("6", "3", "1")]
private bool m_bWrapText;
    [BiffRecordPosAttribute("6", "7", "1")]
private bool m_bJustifyLast;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usIndentOptions;
    [BiffRecordPosAttribute("8", "4", "1")]
private bool m_bShrinkToFit;
    [BiffRecordPosAttribute("8", "5", "1")]
private bool m_bMergeCells;
    [BiffRecordPosAttribute("9", "2", "1")]
private bool m_bIndentNotParentFormat;
    [BiffRecordPosAttribute("9", "3", "1")]
private bool m_bIndentNotParentFont;
    [BiffRecordPosAttribute("9", "4", "1")]
private bool m_bIndentNotParentAlignment;
    [BiffRecordPosAttribute("9", "5", "1")]
private bool m_bIndentNotParentBorder;
    [BiffRecordPosAttribute("9", "6", "1")]
private bool m_bIndentNotParentPattern;
    [BiffRecordPosAttribute("9", "7", "1")]
private bool m_bIndentNotParentCellOptions;
    private byte m_btIndent;
    internal bool isWrappedFirst;
    internal bool isRotatedFirst;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usBorderOptions;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usPaletteOptions;
    [BiffRecordPosAttribute("13", "6", "1")]
private bool m_bDiagnalFromTopLeft;
    [BiffRecordPosAttribute("13", "7", "1")]
private bool m_bDiagnalFromBottomLeft;
    [BiffRecordPosAttribute("14", "4")]
private UInt32 m_uiAddPaletteOptions;
    [BiffRecordPosAttribute("18", "2")]
private ushort m_usFillPaletteOptions;
    private bool m_bHashValid;
    private int m_iHash;
    private ushort m_usParentXFIndex;
    private ushort m_usFillPattern;
    private WorkbookImpl m_book;
    private ushort m_fillIndex;
    private ushort m_borderIndex;
    public int CellOptions { get; }
    public int BorderOptions { get; }
    public int AlignmentOptions { get; }
    public ushort FontIndex { get; public set; }
    internal ushort FillIndex { get; internal set; }
    internal ushort BorderIndex { get; internal set; }
    public ushort FormatIndex { get; public set; }
    public bool IsLocked { get; public set; }
    public bool IsHidden { get; public set; }
    public TXFType XFType { get; public set; }
    public bool _123Prefix { get; public set; }
    public ushort ParentIndex { get; public set; }
    public bool WrapText { get; public set; }
    public bool JustifyLast { get; public set; }
    public byte Indent { get; public set; }
    public bool ShrinkToFit { get; public set; }
    public bool MergeCells { get; public set; }
    public ushort ReadingOrder { get; public set; }
    public ushort Rotation { get; public set; }
    public bool IsNotParentFormat { get; public set; }
    public bool IsNotParentFont { get; public set; }
    public bool IsNotParentAlignment { get; public set; }
    public bool IsNotParentBorder { get; public set; }
    public bool IsNotParentPattern { get; public set; }
    public bool IsNotParentCellOptions { get; public set; }
    public ushort TopBorderPaletteIndex { get; public set; }
    public ushort BottomBorderPaletteIndex { get; public set; }
    public ushort LeftBorderPaletteIndex { get; public set; }
    public ushort RightBorderPaletteIndex { get; public set; }
    public ushort DiagonalLineColor { get; public set; }
    public ushort DiagonalLineStyle { get; public set; }
    public bool DiagonalFromTopLeft { get; public set; }
    public bool DiagonalFromBottomLeft { get; public set; }
    public ushort AdtlFillPattern { get; public set; }
    public ExcelLineStyle BorderLeft { get; public set; }
    public ExcelLineStyle BorderRight { get; public set; }
    public ExcelLineStyle BorderTop { get; public set; }
    public ExcelLineStyle BorderBottom { get; public set; }
    public ExcelHAlign HAlignmentType { get; public set; }
    public ExcelVAlign VAlignmentType { get; public set; }
    public ushort FillBackground { get; public set; }
    public ushort FillForeground { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ExtendedFormatRecord(Stream stream, Int32& itemSize);
    public ExtendedFormatRecord(int iReserve);
    public int get_CellOptions();
    public int get_BorderOptions();
    public int get_AlignmentOptions();
    public ushort get_FontIndex();
    public void set_FontIndex(ushort value);
    internal ushort get_FillIndex();
    internal void set_FillIndex(ushort value);
    internal ushort get_BorderIndex();
    internal void set_BorderIndex(ushort value);
    public ushort get_FormatIndex();
    public void set_FormatIndex(ushort value);
    public bool get_IsLocked();
    public void set_IsLocked(bool value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public TXFType get_XFType();
    public void set_XFType(TXFType value);
    public bool get__123Prefix();
    public void set__123Prefix(bool value);
    public ushort get_ParentIndex();
    public void set_ParentIndex(ushort value);
    public bool get_WrapText();
    public void set_WrapText(bool value);
    public bool get_JustifyLast();
    public void set_JustifyLast(bool value);
    public byte get_Indent();
    public void set_Indent(byte value);
    public bool get_ShrinkToFit();
    public void set_ShrinkToFit(bool value);
    public bool get_MergeCells();
    public void set_MergeCells(bool value);
    public ushort get_ReadingOrder();
    public void set_ReadingOrder(ushort value);
    public ushort get_Rotation();
    public void set_Rotation(ushort value);
    public bool get_IsNotParentFormat();
    public void set_IsNotParentFormat(bool value);
    public bool get_IsNotParentFont();
    public void set_IsNotParentFont(bool value);
    public bool get_IsNotParentAlignment();
    public void set_IsNotParentAlignment(bool value);
    public bool get_IsNotParentBorder();
    public void set_IsNotParentBorder(bool value);
    public bool get_IsNotParentPattern();
    public void set_IsNotParentPattern(bool value);
    public bool get_IsNotParentCellOptions();
    public void set_IsNotParentCellOptions(bool value);
    public ushort get_TopBorderPaletteIndex();
    public void set_TopBorderPaletteIndex(ushort value);
    public ushort get_BottomBorderPaletteIndex();
    public void set_BottomBorderPaletteIndex(ushort value);
    public ushort get_LeftBorderPaletteIndex();
    public void set_LeftBorderPaletteIndex(ushort value);
    public ushort get_RightBorderPaletteIndex();
    public void set_RightBorderPaletteIndex(ushort value);
    public ushort get_DiagonalLineColor();
    public void set_DiagonalLineColor(ushort value);
    public ushort get_DiagonalLineStyle();
    public void set_DiagonalLineStyle(ushort value);
    public bool get_DiagonalFromTopLeft();
    public void set_DiagonalFromTopLeft(bool value);
    public bool get_DiagonalFromBottomLeft();
    public void set_DiagonalFromBottomLeft(bool value);
    public ushort get_AdtlFillPattern();
    public void set_AdtlFillPattern(ushort value);
    public ExcelLineStyle get_BorderLeft();
    public void set_BorderLeft(ExcelLineStyle value);
    public ExcelLineStyle get_BorderRight();
    public void set_BorderRight(ExcelLineStyle value);
    public ExcelLineStyle get_BorderTop();
    public void set_BorderTop(ExcelLineStyle value);
    public ExcelLineStyle get_BorderBottom();
    public void set_BorderBottom(ExcelLineStyle value);
    public ExcelHAlign get_HAlignmentType();
    public void set_HAlignmentType(ExcelHAlign value);
    public ExcelVAlign get_VAlignmentType();
    public void set_VAlignmentType(ExcelVAlign value);
    public ushort get_FillBackground();
    public void set_FillBackground(ushort value);
    public ushort get_FillForeground();
    public void set_FillForeground(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public int CompareTo(ExtendedFormatRecord twin);
    public virtual int GetHashCode();
    private void SwapColors();
    public void CopyBorders(ExtendedFormatRecord source);
    public void CopyAlignment(ExtendedFormatRecord source);
    public void CopyPatterns(ExtendedFormatRecord source);
    public void CopyProtection(ExtendedFormatRecord source);
    public void CopyTo(ExtendedFormatRecord twin);
    internal void SetWorkbook(WorkbookImpl book);
    public virtual void CopyTo(BiffRecordRaw raw);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.ExtendedProperty : object {
    public static int MaxTintValue;
    private ushort m_usType;
    private ushort m_propSize;
    private ushort m_colorType;
    private UInt32 m_colorValue;
    private double m_tintAndShade;
    private long reserved;
    private ushort m_fontScheme;
    private ushort m_textIndentationLevel;
    private UInt32 m_gradientType;
    private long m_iAngle;
    private long m_fillToRectLeft;
    private long m_fillToRectRight;
    private long m_fillToRectTop;
    private long m_fillToRectBottom;
    private UInt32 m_gradStopCount;
    private int m_gradColorValue;
    private long m_gradPostition;
    private long m_gradTint;
    private List`1<GradStops> m_gradstops;
    public CellPropertyExtensionType Type { get; public set; }
    public ushort Size { get; public set; }
    public ColorType ColorType { get; public set; }
    public UInt32 ColorValue { get; public set; }
    public double Tint { get; public set; }
    public long Reserved { get; public set; }
    public FontScheme FontScheme { get; public set; }
    public ushort Indent { get; public set; }
    public List`1<GradStops> GradStops { get; public set; }
    public CellPropertyExtensionType get_Type();
    public void set_Type(CellPropertyExtensionType value);
    public ushort get_Size();
    public void set_Size(ushort value);
    public ColorType get_ColorType();
    public void set_ColorType(ColorType value);
    public UInt32 get_ColorValue();
    public void set_ColorValue(UInt32 value);
    public double get_Tint();
    public void set_Tint(double value);
    public long get_Reserved();
    public void set_Reserved(long value);
    public FontScheme get_FontScheme();
    public void set_FontScheme(FontScheme value);
    public ushort get_Indent();
    public void set_Indent(ushort value);
    public List`1<GradStops> get_GradStops();
    public void set_GradStops(List`1<GradStops> value);
    public int ParseExtendedProperty(DataProvider provider, int iOffset, ExcelVersion version);
    public int InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public int ParseFullColor(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeFullColor(DataProvider provider, int iOffset, ExcelVersion version);
    public int ParseGradient(DataProvider provider, int iOffset, ExcelVersion version);
    public int SerializeGradient(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("2173")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ExtendedXFRecord : BiffRecordRaw {
    public static int StartLength;
    private FutureHeader m_header;
    private ushort m_usXFIndex;
    private ushort m_propertyCount;
    private List`1<ExtendedProperty> m_properties;
    public ushort XFIndex { get; public set; }
    public ushort PropertyCount { get; public set; }
    public List`1<ExtendedProperty> Properties { get; public set; }
    public ExtendedXFRecord(Stream stream, Int32& itemSize);
    public ExtendedXFRecord(int iReserve);
    public ushort get_XFIndex();
    public void set_XFIndex(ushort value);
    public ushort get_PropertyCount();
    public void set_PropertyCount(ushort value);
    public List`1<ExtendedProperty> get_Properties();
    public void set_Properties(List`1<ExtendedProperty> value);
    private void InitializeObjects();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual int GetHashCode();
    public int CompareTo(ExtendedXFRecord twin);
    public virtual void CopyTo(BiffRecordRaw raw);
    public void CopyTo(ExtendedXFRecord twin);
    public virtual object Clone();
    public ExtendedXFRecord CloneObject();
}
[BiffAttribute("22")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ExternCountRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usExternSheetNumber;
    public ushort ExternSheetNumber { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ExternCountRecord(Stream stream, Int32& itemSize);
    public ExternCountRecord(int iReserve);
    public ushort get_ExternSheetNumber();
    public void set_ExternSheetNumber(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("35")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ExternNameRecord : BiffRecordRawWithArray {
    [BiffRecordPosAttribute("0", "2")]
private OptionFlags m_options;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usSheetId;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usWord2;
    [BiffRecordPosAttribute("6", "2")]
private string m_strName;
    private ushort m_usFormulaSize;
    private Byte[] m_arrFormulaData;
    private bool m_isAddIn;
    public ushort Options { get; public set; }
    public ushort SheetId { get; }
    public ushort Word2 { get; }
    public Byte[] FormulaData { get; }
    public string Name { get; public set; }
    public int MinimumRecordSize { get; }
    public ushort FormulaSize { get; public set; }
    public bool NeedDataArray { get; }
    public bool BuiltIn { get; public set; }
    public bool WantAdvise { get; public set; }
    public bool WantPicture { get; public set; }
    public bool Ole { get; public set; }
    public bool OleLink { get; public set; }
    public bool IsAddIn { get; public set; }
    public ExternNameRecord(Stream stream, Int32& itemSize);
    public ExternNameRecord(int iReserve);
    public ushort get_Options();
    public void set_Options(ushort value);
    public ushort get_SheetId();
    public ushort get_Word2();
    public Byte[] get_FormulaData();
    public string get_Name();
    public void set_Name(string value);
    public virtual int get_MinimumRecordSize();
    public ushort get_FormulaSize();
    public void set_FormulaSize(ushort value);
    public virtual bool get_NeedDataArray();
    public bool get_BuiltIn();
    public void set_BuiltIn(bool value);
    public bool get_WantAdvise();
    public void set_WantAdvise(bool value);
    public bool get_WantPicture();
    public void set_WantPicture(bool value);
    public bool get_Ole();
    public void set_Ole(bool value);
    public bool get_OleLink();
    public void set_OleLink(bool value);
    public bool get_IsAddIn();
    public void set_IsAddIn(bool value);
    private void SetFlag(OptionFlags flag, bool value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    private void InfillDDELink();
}
[BiffAttribute("23")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ExternSheetRecord : BiffRecordRawWithArray {
    private static int DEF_FIXED_PART_SIZE;
    public static int MaximumRefsCount;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRefCount;
    private List`1<TREF> m_arrRef;
    private ushort m_cXTI;
    public ushort RefCount { get; public set; }
    public TREF[] Refs { get; public set; }
    public List`1<TREF> RefList { get; }
    public int MinimumRecordSize { get; }
    public ExternSheetRecord(Stream stream, Int32& itemSize);
    public ExternSheetRecord(int iReserve);
    public ushort get_RefCount();
    public void set_RefCount(ushort value);
    public TREF[] get_Refs();
    public void set_Refs(TREF[] value);
    public List`1<TREF> get_RefList();
    public virtual int get_MinimumRecordSize();
    public int AddReference(int supIndex, int firstSheet, int lastSheet);
    public int GetBookReference(int iBookIndex);
    public void AppendReference(TREF reference);
    public void AppendReferences(IList`1<TREF> refs);
    public void PrependReferences(IList`1<TREF> refs);
    public virtual object Clone();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("4095")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ExtSSTInfoSubRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iStreamPos;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usBucketSSTOffset;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usReserved;
    public int StreamPosition { get; public set; }
    public ushort BucketSSTOffset { get; public set; }
    public ushort Reserved { get; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ExtSSTInfoSubRecord(Stream stream, Int32& itemSize);
    public ExtSSTInfoSubRecord(int iReserve);
    public int get_StreamPosition();
    public void set_StreamPosition(int value);
    public ushort get_BucketSSTOffset();
    public void set_BucketSSTOffset(ushort value);
    public ushort get_Reserved();
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("255")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ExtSSTRecord : BiffRecordRawWithArray {
    private static int DEF_FIXED_SIZE;
    private static int DEF_SUB_ITEM_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usStringPerBucket;
    private ExtSSTInfoSubRecord[] m_arrSSTInfo;
    private bool m_bIsEnd;
    private SSTRecord m_sst;
    public ushort StringPerBucket { get; public set; }
    public ExtSSTInfoSubRecord[] SSTInfo { get; public set; }
    public int MinimumRecordSize { get; }
    public bool IsEnd { get; }
    public SSTRecord SST { get; public set; }
    public ExtSSTRecord(Stream stream, Int32& itemSize);
    public ExtSSTRecord(int iReserve);
    public ushort get_StringPerBucket();
    public void set_StringPerBucket(ushort value);
    public ExtSSTInfoSubRecord[] get_SSTInfo();
    public void set_SSTInfo(ExtSSTInfoSubRecord[] value);
    public virtual int get_MinimumRecordSize();
    public bool get_IsEnd();
    public SSTRecord get_SST();
    public void set_SST(SSTRecord value);
    public virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public void UpdateStringOffsets();
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("47")]
public class Syncfusion.XlsIO.Parser.Biff_Records.FilePassRecord : BiffRecordRaw {
    internal static int DEF_STANDARD_HASH;
    internal static int DEF_STRONG_HASH;
    private ushort m_usNotWeakEncryption;
    private ushort m_usKey;
    private ushort m_usHash;
    private FilePassStandardBlock m_standardBlock;
    private FilePassStrongBlock m_strongBlock;
    public bool IsWeakEncryption { get; public set; }
    [CLSCompliantAttribute("False")]
public ushort Key { get; public set; }
    [CLSCompliantAttribute("False")]
public ushort Hash { get; public set; }
    public FilePassStandardBlock StandardBlock { get; }
    internal FilePassStrongBlock StrongBlock { get; }
    public bool NeedDecoding { get; }
    public FilePassRecord(Stream stream, Int32& itemSize);
    public FilePassRecord(int iReserve);
    public bool get_IsWeakEncryption();
    public void set_IsWeakEncryption(bool value);
    public ushort get_Key();
    public void set_Key(ushort value);
    public ushort get_Hash();
    public void set_Hash(ushort value);
    public FilePassStandardBlock get_StandardBlock();
    internal FilePassStrongBlock get_StrongBlock();
    public void CreateStandardBlock();
    public virtual bool get_NeedDecoding();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.FilePassStandardBlock : object {
    private Byte[] m_arrDocumentID;
    private Byte[] m_arrEncyptedDocumentID;
    private Byte[] m_arrDigest;
    public static int StoreSize;
    public Byte[] DocumentID { get; }
    public Byte[] EncyptedDocumentID { get; }
    public Byte[] Digest { get; }
    public Byte[] get_DocumentID();
    public Byte[] get_EncyptedDocumentID();
    public Byte[] get_Digest();
    public void ParseStructure(DataProvider provider, int iOffset, int iLength);
    public void InfillInternalData(DataProvider provider, int iOffset, int iLength);
    public static int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.FilePassStrongBlock : object {
    private UInt32 m_uiOptions;
    private UInt32 m_uiReserved;
    private UInt32 m_uiStreamEncryption;
    private UInt32 m_uiPassword;
    private UInt32 m_uiHashKeyLength;
    private UInt32 m_uiCryptographicProvider;
    private Byte[] m_arrUnknown;
    private string m_strProviderName;
    private Byte[] m_arrEncryptedVerifier;
    private Byte[] m_arrEncryptedVerifierHash;
    private EncryptionVerifier m_verifier;
    private Byte[] m_arrDigest;
    public UInt32 Options { get; public set; }
    public UInt32 Reserved { get; public set; }
    internal EncryptionVerifier verifier { get; }
    public UInt32 StreamEncryption { get; public set; }
    public UInt32 Password { get; public set; }
    public UInt32 HashKeyLength { get; public set; }
    public UInt32 CryptographicProvider { get; public set; }
    public Byte[] UnknownData { get; }
    public string ProviderName { get; public set; }
    public Byte[] Digest { get; }
    public UInt32 get_Options();
    public void set_Options(UInt32 value);
    public UInt32 get_Reserved();
    public void set_Reserved(UInt32 value);
    internal EncryptionVerifier get_verifier();
    public UInt32 get_StreamEncryption();
    public void set_StreamEncryption(UInt32 value);
    public UInt32 get_Password();
    public void set_Password(UInt32 value);
    public UInt32 get_HashKeyLength();
    public void set_HashKeyLength(UInt32 value);
    public UInt32 get_CryptographicProvider();
    public void set_CryptographicProvider(UInt32 value);
    public Byte[] get_UnknownData();
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public Byte[] get_Digest();
    public void ParseStructure(DataProvider provider, int iOffset, int iLength);
}
[BiffAttribute("91")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.FileSharingRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRecommendReadOnly;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usHashPassword;
    [BiffRecordPosAttribute("4", "2", "3")]
private string m_strCreatorName;
    public ushort RecommendReadOnly { get; public set; }
    public ushort HashPassword { get; public set; }
    public string CreatorName { get; public set; }
    public int MinimumRecordSize { get; }
    public FileSharingRecord(Stream stream, Int32& itemSize);
    public FileSharingRecord(int iReserve);
    public ushort get_RecommendReadOnly();
    public void set_RecommendReadOnly(ushort value);
    public ushort get_HashPassword();
    public void set_HashPassword(ushort value);
    public string get_CreatorName();
    public void set_CreatorName(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("155")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.FilterModeRecord : BiffRecordRawWithArray {
    public int MaximumRecordSize { get; }
    public FilterModeRecord(Stream stream, Int32& itemSize);
    public FilterModeRecord(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("156")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.FnGroupCountRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCount;
    public ushort Count { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public FnGroupCountRecord(Stream stream, Int32& itemSize);
    public FnGroupCountRecord(int iReserve);
    public ushort get_Count();
    public void set_Count(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("49")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.FontRecord : BiffRecordRaw {
    private static int DEF_INCORRECT_HASH;
    private static int DEF_STRING_TYPE_OFFSET;
    public static int DefaultFontColor;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFontHeight;
    [BiffRecordPosAttribute("2", "2")]
private FontAttributes m_attributes;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usPaletteColorIndex;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usBoldWeight;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_SuperSubscript;
    [BiffRecordPosAttribute("10", "1")]
private byte m_Underline;
    [BiffRecordPosAttribute("11", "1")]
private byte m_Family;
    [BiffRecordPosAttribute("12", "1")]
private byte m_Charset;
    [BiffRecordPosAttribute("13", "1")]
private byte m_Reserved;
    [BiffRecordPosAttribute("14", "2")]
private string m_strFontName;
    private int m_iHashCode;
    private int m_baseLine;
    public ushort Attributes { get; }
    public ushort FontHeight { get; public set; }
    public ushort PaletteColorIndex { get; public set; }
    public ushort BoldWeight { get; public set; }
    public ExcelFontVertialAlignment SuperSubscript { get; public set; }
    public int Baseline { get; public set; }
    public ExcelUnderline Underline { get; public set; }
    public byte Family { get; public set; }
    public byte Charset { get; public set; }
    public string FontName { get; public set; }
    public bool IsItalic { get; public set; }
    public bool IsStrikeout { get; public set; }
    public bool IsMacOutline { get; public set; }
    public bool IsMacShadow { get; public set; }
    public byte Reserved { get; }
    public int MinimumRecordSize { get; }
    public FontRecord(Stream stream, Int32& itemSize);
    public FontRecord(int iReserve);
    public ushort get_Attributes();
    public ushort get_FontHeight();
    public void set_FontHeight(ushort value);
    public ushort get_PaletteColorIndex();
    public void set_PaletteColorIndex(ushort value);
    public ushort get_BoldWeight();
    public void set_BoldWeight(ushort value);
    public ExcelFontVertialAlignment get_SuperSubscript();
    public void set_SuperSubscript(ExcelFontVertialAlignment value);
    public int get_Baseline();
    public void set_Baseline(int value);
    public ExcelUnderline get_Underline();
    public void set_Underline(ExcelUnderline value);
    public byte get_Family();
    public void set_Family(byte value);
    public byte get_Charset();
    public void set_Charset(byte value);
    public string get_FontName();
    public void set_FontName(string value);
    public bool get_IsItalic();
    public void set_IsItalic(bool value);
    public bool get_IsStrikeout();
    public void set_IsStrikeout(bool value);
    public bool get_IsMacOutline();
    public void set_IsMacOutline(bool value);
    public bool get_IsMacShadow();
    public void set_IsMacShadow(bool value);
    public byte get_Reserved();
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void CopyTo(BiffRecordRaw raw);
    public int CompareTo(FontRecord record);
}
[BiffAttribute("1054")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.FormatRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usIndex;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usFormatStringLen;
    private string m_strFormatString;
    public int Index { get; public set; }
    public string FormatString { get; public set; }
    public int MinimumRecordSize { get; }
    public FormatRecord(Stream stream, Int32& itemSize);
    public FormatRecord(int iReserve);
    public int get_Index();
    public void set_Index(int value);
    public string get_FormatString();
    public void set_FormatString(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("59")]
[TokenAttribute("91")]
[TokenAttribute("123")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.Area3DPtg : AreaPtg {
    private ushort m_usRefIndex;
    public ushort RefIndex { get; public set; }
    [PreserveAttribute]
public Area3DPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public Area3DPtg(string strFormula, IWorkbook parent);
    [PreserveAttribute]
public Area3DPtg(Area3DPtg ptg);
    [PreserveAttribute]
public Area3DPtg(int iSheetIndex, int iFirstRow, int iFirstCol, int iLastRow, int iLastCol, byte firstOptions, byte lastOptions);
    [PreserveAttribute]
public Area3DPtg(int iCellRow, int iCellColumn, int iRefIndex, string strFirstRow, string strFirstColumn, string strLastRow, string strLastColumn, bool bR1C1, IWorkbook book);
    public sealed virtual ushort get_RefIndex();
    public sealed virtual void set_RefIndex(ushort value);
    public virtual int GetSize(ExcelVersion version);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public static bool ValidateSheetName(string value);
    public virtual Ptg ConvertPtgToNPtg(IWorkbook parent, int iRow, int iColumn);
    public virtual Ptg ConvertSharedToken(IWorkbook parent, int iRow, int iColumn);
    public virtual int CodeToIndex();
    public virtual FormulaToken GetCorrespondingErrorCode();
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public virtual AreaPtg ConvertToErrorPtg();
    public sealed virtual string BaseToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1);
    protected void SetSheetIndex(string sheetName, IWorkbook parent);
    protected void SetValues(Match m, IWorkbook parent);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
    public static FormulaToken IndexToCode(int index);
    public static int CodeToIndex(FormulaToken code);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
}
[PreserveAttribute]
[TokenAttribute("61")]
[TokenAttribute("93")]
[TokenAttribute("125")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.AreaError3DPtg : Area3DPtg {
    [PreserveAttribute]
public AreaError3DPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public AreaError3DPtg(Area3DPtg ptg);
    [PreserveAttribute]
public AreaError3DPtg(string value, IWorkbook book);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual int CodeToIndex();
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public static FormulaToken IndexToCode(int index);
    public static int CodeToIndex(FormulaToken code);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
}
[PreserveAttribute]
[TokenAttribute("43")]
[TokenAttribute("75")]
[TokenAttribute("107")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.AreaErrorPtg : AreaPtg {
    [PreserveAttribute]
public AreaErrorPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public AreaErrorPtg(AreaPtg area);
    [PreserveAttribute]
public AreaErrorPtg(string value, IWorkbook book);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual int CodeToIndex();
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public static FormulaToken IndexToCode(int index);
    public static int CodeToIndex(FormulaToken code);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
}
[PreserveAttribute]
[TokenAttribute("45")]
[TokenAttribute("77")]
[TokenAttribute("109")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.AreaNPtg : AreaPtg {
    public short FirstColumn { get; public set; }
    public short LastColumn { get; public set; }
    [PreserveAttribute]
public AreaNPtg(string strFormula, IWorkbook book);
    [PreserveAttribute]
public AreaNPtg(DataProvider provider, int offset, ExcelVersion version);
    public short get_FirstColumn();
    public void set_FirstColumn(short value);
    public short get_LastColumn();
    public void set_LastColumn(short value);
    public virtual Ptg ConvertSharedToken(IWorkbook parent, int iRow, int iColumn);
    public static int CodeToIndex(FormulaToken token);
    public static FormulaToken IndexToCode(int index);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    private int GetUpdatedRowIndex(int iRow, int row, WorkbookImpl book);
    private int GetUpdatedColumnIndex(int iColumn, int column, WorkbookImpl book);
    internal FormulaToken GetErrorCode();
}
[PreserveAttribute]
[TokenAttribute("37")]
[TokenAttribute("69")]
[TokenAttribute("101")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.AreaPtg : Ptg {
    private int m_iFirstRow;
    private int m_iLastRow;
    private int m_iFirstColumn;
    private byte m_firstOptions;
    private int m_iLastColumn;
    private byte m_lastOptions;
    public int FirstRow { get; public set; }
    public bool IsFirstRowRelative { get; public set; }
    public bool IsFirstColumnRelative { get; public set; }
    public int FirstColumn { get; public set; }
    public int LastRow { get; public set; }
    public bool IsLastRowRelative { get; public set; }
    public bool IsLastColumnRelative { get; public set; }
    public int LastColumn { get; public set; }
    protected internal byte FirstOptions { get; protected internal set; }
    protected internal byte LastOptions { get; protected internal set; }
    [PreserveAttribute]
public AreaPtg(string strFormula, IWorkbook book);
    [PreserveAttribute]
public AreaPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public AreaPtg(AreaPtg ptg);
    [PreserveAttribute]
public AreaPtg(int iFirstRow, int iFirstCol, int iLastRow, int iLastCol, byte firstOptions, byte lastOptions);
    [PreserveAttribute]
public AreaPtg(int iCellRow, int iCellColumn, string strFirstRow, string strFirstColumn, string strLastRow, string strLastColumn, bool bR1C1, IWorkbook book);
    public int get_FirstRow();
    public void set_FirstRow(int value);
    public bool get_IsFirstRowRelative();
    public void set_IsFirstRowRelative(bool value);
    public bool get_IsFirstColumnRelative();
    public void set_IsFirstColumnRelative(bool value);
    public int get_FirstColumn();
    public void set_FirstColumn(int value);
    public int get_LastRow();
    public void set_LastRow(int value);
    public bool get_IsLastRowRelative();
    public void set_IsLastRowRelative(bool value);
    public bool get_IsLastColumnRelative();
    public void set_IsLastColumnRelative(bool value);
    public int get_LastColumn();
    public void set_LastColumn(int value);
    protected internal byte get_FirstOptions();
    protected internal void set_FirstOptions(byte value);
    protected internal byte get_LastOptions();
    protected internal void set_LastOptions(byte value);
    protected void SetArea(int iCellRow, int iCellColumn, string row1, string column1, string row2, string column2, bool bR1C1, IWorkbook book);
    public virtual int CodeToIndex();
    public virtual FormulaToken GetCorrespondingErrorCode();
    protected bool IsWholeRow(IWorkbook book);
    protected internal bool IsWholeRows(IWorkbook book);
    protected internal bool IsWholeColumns(IWorkbook book);
    protected bool IsWholeColumn(IWorkbook book);
    public virtual AreaPtg ConvertToErrorPtg();
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
    public static FormulaToken IndexToCode(int index);
    public static int CodeToIndex(FormulaToken code);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual Ptg Offset(int iRowOffset, int iColumnOffset, WorkbookImpl book);
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public virtual Ptg ConvertPtgToNPtg(IWorkbook parent, int iRow, int iColumn);
    public AreaPtg ConvertFullRowColumnAreaPtgs(bool bFromExcel07To97);
    private Ptg MoveIntoDifferentSheet(AreaPtg result, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, int iRowOffset, int iColOffset);
    private bool ReferencedAreaMoved(Rectangle rectSource);
    private Ptg UpdateReferencedArea(int iCurSheetIndex, int iDestSheetIndex, int iRowOffset, int iColOffset, Boolean& bChanged, WorkbookImpl book);
    private Ptg UpdateFirstCell(int iCurSheetIndex, int iDestSheetIndex, int iRowOffset, int iColOffset, Boolean& bChanged, IWorkbook book);
    private Ptg UpdateLastCell(int iCurSheetIndex, int iDestSheetIndex, int iRowOffset, int iColOffset, Boolean& bChanged, IWorkbook book);
    private bool FullFirstRowMove(Rectangle rectSource);
    private bool FullLastRowMove(Rectangle rectSource);
    private bool FullFirstColMove(Rectangle rectSource);
    private bool FullLastColMove(Rectangle rectSource);
    private Ptg MoveReferencedArea(int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    private Ptg VerticalMove(int iSourceSheetIndex, Rectangle rectSource, int iRowOffset, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    private Ptg FirstRowVerticalMove(int iSourceSheetIndex, int iRowOffset, Rectangle rectSource, Rectangle rectDest, Boolean& bChanged, IWorkbook book);
    private Ptg LastRowVerticalMove(int iSourceSheetIndex, int iRowOffset, Rectangle rectSource, Rectangle rectDest, Boolean& bChanged, IWorkbook book);
    private Ptg HorizontalMove(int iSourceSheetIndex, Rectangle rectSource, int iColOffset, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    private bool OutsideRectangle(Rectangle owner, Rectangle toCheck);
    private bool InsideRectangle(Rectangle owner, Rectangle toCheck);
    private Ptg FirstColumnHorizontalMove(int iSourceSheetIndex, int iColOffset, Rectangle rectSource, Rectangle rectDest, Boolean& bChanged, IWorkbook book);
    private Ptg LastColumnHorizontalMove(int iSourceSheetIndex, int iColOffset, Rectangle rectSource, Rectangle rectDest, Boolean& bChanged, IWorkbook book);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
    public sealed virtual Rectangle GetRectangle();
    public sealed virtual Ptg UpdateRectangle(Rectangle rectangle);
    public virtual Ptg ConvertToError();
    public sealed virtual Ptg Get3DToken(int iSheetReference);
}
[PreserveAttribute]
[TokenAttribute("32")]
[TokenAttribute("64")]
[TokenAttribute("96")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.ArrayPtg : Ptg {
    public static byte DOUBLEVALUE;
    public static byte STRINGVALUE;
    public static byte BOOLEANVALUE;
    public static byte ERRORCODEVALUE;
    public static string RowSeparator;
    public static string ColSeparator;
    public static byte NilValue;
    private byte m_ColumnNumber;
    private ushort m_usRowNumber;
    private Object[0...,0...] m_arrCachedValue;
    public int AdditionalDataSize { get; }
    [PreserveAttribute]
public ArrayPtg(string strFormula, FormulaUtil formulaParser);
    [PreserveAttribute]
public ArrayPtg(DataProvider provider, int offset, ExcelVersion version);
    private static ArrayPtg();
    public sealed virtual int get_AdditionalDataSize();
    public sealed virtual int ReadArray(DataProvider provider, int offset);
    private int FillList(DataProvider provider, int offset, int ColumnNumber, int RowNumber);
    private int FillList(Byte[] data, int offset, int ColumnNumber, int RowNumber);
    private void FillList(List`1[] arrValues, FormulaUtil formulaParser);
    private object ParseConstant(string value, FormulaUtil formulaParser);
    public BytesList GetListBytes();
    private Byte[] GetBoolBytes(bool value);
    private Byte[] GetErrorCodeBytes(byte value);
    private Byte[] GetNilBytes();
    private Byte[] GetDoubleBytes(double value);
    private Byte[] GetStringBytes(string value);
    private void SetReferenceIndex(int referenceIndex);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public static FormulaToken IndexToCode(int index);
    public sealed virtual object Clone();
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("25")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.AttrPtg : FunctionVarPtg {
    public static int SIZE;
    private static int DEF_WORD_SIZE;
    private static string DEF_SUM;
    private static string DEF_IF;
    private static string DEF_GOTO;
    private static string DEF_CHOOSE;
    private static string DEF_NOT_IMPLEMENTED;
    private static ushort DEF_SPACE_AFTER_MASK;
    private byte m_Options;
    private ushort m_usData;
    private UInt16[] m_arrOffsets;
    public byte Options { get; }
    public ushort AttrData { get; public set; }
    public int AttrData1 { get; internal set; }
    public int SpaceCount { get; public set; }
    public bool SpaceAfterToken { get; public set; }
    public bool HasSemiVolatile { get; public set; }
    public bool HasOptimizedIf { get; public set; }
    public bool HasOptimizedChoose { get; public set; }
    public bool HasOptGoto { get; public set; }
    public bool HasSum { get; public set; }
    public bool HasBaxcel { get; public set; }
    public bool HasSpace { get; public set; }
    [PreserveAttribute]
public AttrPtg(DataProvider provider, int iOffset, ExcelVersion version);
    [PreserveAttribute]
public AttrPtg(byte options, ushort usData);
    [PreserveAttribute]
public AttrPtg(int options, int data);
    public byte get_Options();
    public ushort get_AttrData();
    public void set_AttrData(ushort value);
    public int get_AttrData1();
    internal void set_AttrData1(int value);
    public int get_SpaceCount();
    public void set_SpaceCount(int value);
    public bool get_SpaceAfterToken();
    public void set_SpaceAfterToken(bool value);
    public bool get_HasSemiVolatile();
    public void set_HasSemiVolatile(bool value);
    public bool get_HasOptimizedIf();
    public void set_HasOptimizedIf(bool value);
    public bool get_HasOptimizedChoose();
    public void set_HasOptimizedChoose(bool value);
    public bool get_HasOptGoto();
    public void set_HasOptGoto(bool value);
    public bool get_HasSum();
    public void set_HasSum(bool value);
    public bool get_HasBaxcel();
    public void set_HasBaxcel(bool value);
    public bool get_HasSpace();
    public void set_HasSpace(bool value);
    public virtual int GetSize(ExcelVersion version);
    public virtual void PushResultToStack(FormulaUtil formulaUtil, Stack`1<object> operands, bool isForSerialization);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("3", "+")]
[TokenAttribute("6", "/")]
[TokenAttribute("5", "*")]
[TokenAttribute("4", "-")]
[TokenAttribute("7", "^")]
[TokenAttribute("8", "&")]
[TokenAttribute("9", "<")]
[TokenAttribute("10", "<=")]
[TokenAttribute("11", "=")]
[TokenAttribute("14", "<>")]
[TokenAttribute("13", ">")]
[TokenAttribute("12", ">=")]
[TokenAttribute("15", " ")]
[TokenAttribute("17", ":")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.BinaryOperationPtg : OperationPtg {
    private static Dictionary`2<string, FormulaToken> NameToId;
    private static Dictionary`2<FormulaToken, string> IdToName;
    private static TokenAttribute[] s_arrAttributes;
    public int NumberOfOperands { get; }
    public TOperation OperationType { get; }
    protected TokenAttribute[] Attributes { get; }
    [PreserveAttribute]
private static BinaryOperationPtg();
    [PreserveAttribute]
public BinaryOperationPtg(string operation);
    [PreserveAttribute]
public BinaryOperationPtg(FormulaToken operation);
    [PreserveAttribute]
public BinaryOperationPtg(DataProvider provider, int offset, ExcelVersion version);
    public static FormulaToken GetTokenId(string operationSign);
    public static string GetTokenString(FormulaToken token);
    public virtual int get_NumberOfOperands();
    public virtual TOperation get_OperationType();
    protected virtual TokenAttribute[] get_Attributes();
    public virtual void PushResultToStack(FormulaUtil formulaUtil, Stack`1<object> operands, bool isForSerialization);
    public virtual String[] GetOperands(string strFormula, Int32& index, FormulaUtil formulaParser);
    public virtual int GetSize(ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("29")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.BooleanPtg : Ptg {
    private bool m_bValue;
    public bool Value { get; public set; }
    [PreserveAttribute]
public BooleanPtg(bool value);
    [PreserveAttribute]
public BooleanPtg(string value);
    [PreserveAttribute]
public BooleanPtg(DataProvider provider, int offset, ExcelVersion version);
    public bool get_Value();
    public void set_Value(bool value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.CellIntersectionPtg : Ptg {
    [PreserveAttribute]
public CellIntersectionPtg(string strFormula);
    [PreserveAttribute]
public CellIntersectionPtg(DataProvider provider, int offset, ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual int GetSize(ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("16", ",")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.CellRangeListPtg : BinaryOperationPtg {
    [PreserveAttribute]
public CellRangeListPtg(string operation);
    [PreserveAttribute]
public CellRangeListPtg(DataProvider provider, int offset, ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1);
}
[PreserveAttribute]
[TokenAttribute("2")]
[TokenAttribute("1")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.ControlPtg : RefPtg {
    public bool IsColumnIndexRelative { get; public set; }
    public bool IsRowIndexRelative { get; public set; }
    [PreserveAttribute]
public ControlPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public ControlPtg(int iRow, int iColumn);
    public virtual bool get_IsColumnIndexRelative();
    public virtual void set_IsColumnIndexRelative(bool value);
    public virtual bool get_IsRowIndexRelative();
    public virtual void set_IsRowIndexRelative(bool value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual FormulaToken GetCorrespondingErrorCode();
    protected virtual Ptg MoveIntoDifferentSheet(RefPtg result, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, int iRowOffset, int iColOffset, WorkbookImpl book);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("31")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.DoublePtg : Ptg {
    private double m_value;
    public double Value { get; public set; }
    [PreserveAttribute]
public DoublePtg(double value);
    [PreserveAttribute]
public DoublePtg(string value);
    [PreserveAttribute]
public DoublePtg(string value, NumberFormatInfo numberInfo);
    [PreserveAttribute]
public DoublePtg(DataProvider provider, int offset, ExcelVersion version);
    public double get_Value();
    public void set_Value(double value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberInfo);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[AttributeUsageAttribute("4")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.ErrorCodeAttribute : Attribute {
    private string m_StringValue;
    private int m_ErrorCode;
    public string StringValue { get; }
    public int ErrorCode { get; }
    public ErrorCodeAttribute(string stringValue, int errorCode);
    public string get_StringValue();
    public int get_ErrorCode();
}
[PreserveAttribute]
[ErrorCodeAttribute("#NULL!", "0")]
[ErrorCodeAttribute("#DIV/0!", "7")]
[ErrorCodeAttribute("#VALUE!", "15")]
[ErrorCodeAttribute("#NAME?", "29")]
[ErrorCodeAttribute("#NUM!", "36")]
[ErrorCodeAttribute("#N/A", "42")]
[TokenAttribute("28")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.ErrorPtg : Ptg {
    public static Dictionary`2<string, int> ErrorNameToCode;
    public static Dictionary`2<int, string> ErrorCodeToName;
    public static string DEF_ERROR_NAME;
    private byte m_errorCode;
    public byte ErrorCode { get; public set; }
    [PreserveAttribute]
private static ErrorPtg();
    [PreserveAttribute]
public ErrorPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public ErrorPtg(int errorCode);
    [PreserveAttribute]
public ErrorPtg(string errorName);
    public byte get_ErrorCode();
    public void set_ErrorCode(byte value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.Formula.FormulaToken : Enum {
    public int value__;
    public static FormulaToken None;
    public static FormulaToken tAdd;
    public static FormulaToken tSub;
    public static FormulaToken tMul;
    public static FormulaToken tDiv;
    public static FormulaToken tPower;
    public static FormulaToken tConcat;
    public static FormulaToken tLessThan;
    public static FormulaToken tLessEqual;
    public static FormulaToken tEqual;
    public static FormulaToken tGreaterEqual;
    public static FormulaToken tGreater;
    public static FormulaToken tNotEqual;
    public static FormulaToken tCellRangeIntersection;
    public static FormulaToken tCellRangeList;
    public static FormulaToken tCellRange;
    public static FormulaToken tUnaryPlus;
    public static FormulaToken tUnaryMinus;
    public static FormulaToken tPercent;
    public static FormulaToken tParentheses;
    public static FormulaToken tFunction1;
    public static FormulaToken tFunction2;
    public static FormulaToken tFunction3;
    public static FormulaToken tFunctionVar1;
    public static FormulaToken tFunctionVar2;
    public static FormulaToken tFunctionVar3;
    public static FormulaToken tFunctionCE1;
    public static FormulaToken tFunctionCE2;
    public static FormulaToken tFunctionCE3;
    public static FormulaToken tMissingArgument;
    public static FormulaToken tStringConstant;
    public static FormulaToken tError;
    public static FormulaToken tBoolean;
    public static FormulaToken tInteger;
    public static FormulaToken tNumber;
    public static FormulaToken tExp;
    public static FormulaToken tTbl;
    public static FormulaToken tExtended;
    public static FormulaToken tAttr;
    public static FormulaToken tSheet;
    public static FormulaToken tEndSheet;
    public static FormulaToken tArray1;
    public static FormulaToken tArray2;
    public static FormulaToken tArray3;
    public static FormulaToken tName1;
    public static FormulaToken tName2;
    public static FormulaToken tName3;
    public static FormulaToken tRef1;
    public static FormulaToken tRef2;
    public static FormulaToken tRef3;
    public static FormulaToken tArea1;
    public static FormulaToken tArea2;
    public static FormulaToken tArea3;
    public static FormulaToken tMemArea1;
    public static FormulaToken tMemArea2;
    public static FormulaToken tMemArea3;
    public static FormulaToken tMemErr1;
    public static FormulaToken tMemErr2;
    public static FormulaToken tMemErr3;
    public static FormulaToken tMemNoMem1;
    public static FormulaToken tMemNoMem2;
    public static FormulaToken tMemNoMem3;
    public static FormulaToken tMemFunc1;
    public static FormulaToken tMemFunc2;
    public static FormulaToken tMemFunc3;
    public static FormulaToken tRefErr1;
    public static FormulaToken tRefErr2;
    public static FormulaToken tRefErr3;
    public static FormulaToken tAreaErr1;
    public static FormulaToken tAreaErr2;
    public static FormulaToken tAreaErr3;
    public static FormulaToken tRefN1;
    public static FormulaToken tRefN2;
    public static FormulaToken tRefN3;
    public static FormulaToken tAreaN1;
    public static FormulaToken tAreaN2;
    public static FormulaToken tAreaN3;
    public static FormulaToken tMemAreaN1;
    public static FormulaToken tMemAreaN2;
    public static FormulaToken tMemAreaN3;
    public static FormulaToken tMemNoMemN1;
    public static FormulaToken tMemNoMemN2;
    public static FormulaToken tMemNoMemN3;
    public static FormulaToken tNameX1;
    public static FormulaToken tNameX2;
    public static FormulaToken tNameX3;
    public static FormulaToken tRef3d1;
    public static FormulaToken tRef3d2;
    public static FormulaToken tRef3d3;
    public static FormulaToken tArea3d1;
    public static FormulaToken tArea3d2;
    public static FormulaToken tArea3d3;
    public static FormulaToken tRefErr3d1;
    public static FormulaToken tRefErr3d2;
    public static FormulaToken tRefErr3d3;
    public static FormulaToken tAreaErr3d1;
    public static FormulaToken tAreaErr3d2;
    public static FormulaToken tAreaErr3d3;
    public static FormulaToken tRefN3d1;
    public static FormulaToken tRefN3d2;
    public static FormulaToken tRefN3d3;
    public static FormulaToken EndOfFormula;
    public static FormulaToken CloseParenthesis;
    public static FormulaToken Comma;
    public static FormulaToken OpenBracket;
    public static FormulaToken CloseBracket;
    public static FormulaToken ValueTrue;
    public static FormulaToken ValueFalse;
    public static FormulaToken Space;
    public static FormulaToken Identifier;
    public static FormulaToken DDELink;
    public static FormulaToken Identifier3D;
}
[PreserveAttribute]
[TokenAttribute("33")]
[TokenAttribute("65")]
[TokenAttribute("97")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.FunctionPtg : OperationPtg {
    private ExcelFunction m_FunctionIndex;
    private byte m_ArgumentsNumber;
    public static string OperandsDelimiter;
    public ExcelFunction FunctionIndex { get; public set; }
    public byte NumberOfArguments { get; public set; }
    public TOperation OperationType { get; }
    protected TokenAttribute[] Attributes { get; }
    [PreserveAttribute]
public FunctionPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public FunctionPtg(ExcelFunction index);
    [PreserveAttribute]
public FunctionPtg(string strFunctionName);
    public ExcelFunction get_FunctionIndex();
    public void set_FunctionIndex(ExcelFunction value);
    public byte get_NumberOfArguments();
    public void set_NumberOfArguments(byte value);
    public virtual TOperation get_OperationType();
    protected virtual TokenAttribute[] get_Attributes();
    protected String[] GetOperands(string strFormula, Int32& index, bool checkParamCount, FormulaUtil formulaParser);
    public static FormulaToken IndexToCode(int index);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual void PushResultToStack(FormulaUtil formulaUtil, Stack`1<object> operands, bool isForSerialization);
    private string GetLambdaExpression(Stack`1<object> operands, int count, string strDelimeter, FormulaUtil formulaUtil);
    public virtual String[] GetOperands(string strFormula, Int32& index, FormulaUtil formulaParser);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("34")]
[TokenAttribute("66")]
[TokenAttribute("98")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.FunctionVarPtg : FunctionPtg {
    [PreserveAttribute]
public FunctionVarPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public FunctionVarPtg(ExcelFunction funcIndex);
    [PreserveAttribute]
public FunctionVarPtg(string strFunctionName);
    public virtual int GetSize(ExcelVersion version);
    public virtual String[] GetOperands(string strFormula, Int32& index, FormulaUtil formulaParser);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void PushResultToStack(FormulaUtil formulaUtil, Stack`1<object> operands, bool isForSerialization);
    public static FormulaToken IndexToCode(int index);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.Formula.IAdditionalData {
    public int AdditionalDataSize { get; }
    public abstract virtual int ReadArray(DataProvider provider, int offset);
    public abstract virtual int get_AdditionalDataSize();
}
[PreserveAttribute]
[TokenAttribute("30")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.IntegerPtg : Ptg {
    public ushort m_usValue;
    public ushort Value { get; public set; }
    [PreserveAttribute]
public IntegerPtg(ushort value);
    [PreserveAttribute]
public IntegerPtg(string value);
    [PreserveAttribute]
public IntegerPtg(DataProvider provider, int offset, ExcelVersion version);
    public ushort get_Value();
    public void set_Value(ushort value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.Formula.IRangeGetter {
    public abstract virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.Formula.IRangeGetterToken {
    public abstract virtual Ptg UpdateRectangle(Rectangle rectangle);
    public abstract virtual Ptg ConvertToError();
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.Formula.IRectGetter {
    public abstract virtual Rectangle GetRectangle();
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Parser.Biff_Records.Formula.IReference {
    public ushort RefIndex { get; public set; }
    public abstract virtual ushort get_RefIndex();
    public abstract virtual void set_RefIndex(ushort value);
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Parser.Biff_Records.Formula.ISheetReference {
    public abstract virtual string BaseToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.Formula.IToken3D {
    public abstract virtual Ptg Get3DToken(int iSheetReference);
}
[PreserveAttribute]
[TokenAttribute("38")]
[TokenAttribute("70")]
[TokenAttribute("102")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.MemAreaPtg : Ptg {
    private static int DEF_RECT_SIZE;
    private static int DEF_HEADER_SIZE;
    private int m_iReserved;
    private ushort m_usSubExpressionLength;
    private Ptg[] m_arrSubexpression;
    private Rectangle[] m_arrRects;
    [CLSCompliantAttribute("False")]
public ushort SubExpressionLength { get; }
    public Ptg[] Subexpression { get; }
    public Rectangle[] Rectangles { get; }
    public int AdditionalDataSize { get; }
    [PreserveAttribute]
public MemAreaPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public MemAreaPtg(string strFormula);
    public ushort get_SubExpressionLength();
    public Ptg[] get_Subexpression();
    public Rectangle[] get_Rectangles();
    public virtual int GetSize(ExcelVersion version);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public sealed virtual int ReadArray(DataProvider provider, int offset);
    public sealed virtual int get_AdditionalDataSize();
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("39")]
[TokenAttribute("71")]
[TokenAttribute("103")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.MemErrPtg : Ptg {
    private static int SIZE;
    private Byte[] m_arrData;
    [PreserveAttribute]
public MemErrPtg(DataProvider provider, int offset, ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual int GetSize(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("41")]
[TokenAttribute("73")]
[TokenAttribute("105")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.MemFuncPtg : Ptg {
    private static int SIZE;
    private ushort m_usSize;
    private Byte[] m_arrData;
    public ushort SubExpressionLength { get; public set; }
    [PreserveAttribute]
public MemFuncPtg(int size);
    [PreserveAttribute]
public MemFuncPtg(DataProvider provider, int offset, ExcelVersion version);
    public ushort get_SubExpressionLength();
    public void set_SubExpressionLength(ushort value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("22")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.MissingArgumentPtg : Ptg {
    [PreserveAttribute]
public MissingArgumentPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public MissingArgumentPtg(string strFormula);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
}
[PreserveAttribute]
[TokenAttribute("35")]
[TokenAttribute("67")]
[TokenAttribute("99")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.NamePtg : Ptg {
    private int m_usIndex;
    public ushort ExternNameIndex { get; public set; }
    internal int ExternNameIndexInt { get; internal set; }
    [PreserveAttribute]
public NamePtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public NamePtg(string strFormula, IWorkbook parent);
    [PreserveAttribute]
public NamePtg(string strFormula, IWorkbook book, IWorksheet sheet);
    [PreserveAttribute]
public NamePtg(int iNameIndex);
    public virtual int GetSize(ExcelVersion version);
    public ushort get_ExternNameIndex();
    public void set_ExternNameIndex(ushort value);
    internal int get_ExternNameIndexInt();
    internal void set_ExternNameIndexInt(int value);
    public virtual string ToString();
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public static FormulaToken IndexToCode(int index);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
    public Rectangle GetRectangle();
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("57")]
[TokenAttribute("89")]
[TokenAttribute("121")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.NameXPtg : Ptg {
    private ushort m_usRefIndex;
    private ushort m_usNameIndex;
    public ushort NameIndex { get; public set; }
    public ushort RefIndex { get; public set; }
    [PreserveAttribute]
public NameXPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public NameXPtg(string strFormula, IWorkbook parent);
    [PreserveAttribute]
public NameXPtg(int iBookIndex, int iNameIndex);
    public ushort get_NameIndex();
    public void set_NameIndex(ushort value);
    public sealed virtual ushort get_RefIndex();
    public sealed virtual void set_RefIndex(ushort value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual string ToString(FormulaUtil formulaUtil, int row, int col, bool bR1C1, NumberFormatInfo numberInfo, bool isForSerialization, IWorksheet sheet);
    public sealed virtual string BaseToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public static FormulaToken IndexToCode(int index);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
    public Rectangle GetRectangle();
    public Ptg UpdateRectangle(Rectangle rectangle);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.Formula.OperationPtg : Ptg {
    private static string DEFAULT_ARGUMENTS_SEPARATOR;
    private string m_strOperationSymbol;
    private bool m_bPlaceAfter;
    public bool IsOperation { get; }
    public TOperation OperationType { get; }
    public int NumberOfOperands { get; }
    public string OperationSymbol { get; public set; }
    public bool IsPlaceAfter { get; public set; }
    protected TokenAttribute[] Attributes { get; }
    [PreserveAttribute]
protected OperationPtg(DataProvider provider, int offset, ExcelVersion version);
    public virtual bool get_IsOperation();
    public abstract virtual TOperation get_OperationType();
    public virtual int get_NumberOfOperands();
    public string get_OperationSymbol();
    public void set_OperationSymbol(string value);
    public bool get_IsPlaceAfter();
    public void set_IsPlaceAfter(bool value);
    protected abstract virtual TokenAttribute[] get_Attributes();
    public virtual void PushResultToStack(Stack`1<object> operands);
    public abstract virtual void PushResultToStack(FormulaUtil formulaUtil, Stack`1<object> operands, bool isForSerialization);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public abstract virtual String[] GetOperands(string strFormula, Int32& index, FormulaUtil formulaParser);
    public virtual ExcelParseFormulaOptions UpdateParseOptions(ExcelParseFormulaOptions options);
    protected string GetOperandsSeparator(FormulaUtil formulaUtil);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("21", "(")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.ParenthesesPtg : UnaryOperationPtg {
    private static TokenAttribute[] s_arrAttributes;
    protected TokenAttribute[] Attributes { get; }
    [PreserveAttribute]
private static ParenthesesPtg();
    [PreserveAttribute]
public ParenthesesPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public ParenthesesPtg(string strFormula);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual void PushResultToStack(FormulaUtil formulaUtil, Stack`1<object> operands, bool isForSerialization);
    public virtual String[] GetOperands(string strFormula, Int32& index, FormulaUtil formulaParser);
    public virtual ExcelParseFormulaOptions UpdateParseOptions(ExcelParseFormulaOptions options);
    protected virtual TokenAttribute[] get_Attributes();
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.Formula.Priority : Enum {
    public int value__;
    public static Priority None;
    public static Priority Equality;
    public static Priority Concat;
    public static Priority PlusMinus;
    public static Priority MulDiv;
    public static Priority Power;
    public static Priority UnaryMinus;
    public static Priority CellRange;
}
[PreserveAttribute]
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.Formula.Ptg : object {
    private static int DEF_PTG_INDEX_DELTA;
    private FormulaToken m_Code;
    public bool IsOperation { get; }
    public FormulaToken TokenCode { get; public set; }
    [PreserveAttribute]
protected Ptg(DataProvider provider, int offset, ExcelVersion version);
    public virtual bool get_IsOperation();
    public virtual FormulaToken get_TokenCode();
    public virtual void set_TokenCode(FormulaToken value);
    public static string GetString16Bit(Byte[] data, int offset);
    public static string GetString16Bit(Byte[] data, int offset, Int32& iFullLength);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
    public abstract virtual int GetSize(ExcelVersion version);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual string ToString();
    public virtual string ToString(FormulaUtil formulaUtil);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1);
    public virtual string ToString(int row, int col, bool bR1C1);
    public virtual string ToString(FormulaUtil formulaUtil, int row, int col, bool bR1C1, NumberFormatInfo numberFormat);
    public virtual string ToString(FormulaUtil formulaUtil, int row, int col, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Ptg Offset(int iRowOffset, int iColumnOffset, WorkbookImpl book);
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public static bool RectangleContains(Rectangle rect, int iRow, int iColumn);
    internal static bool RectangleIntersects(Rectangle rect, int iFirstRow, int iFirstColumn, int iLastRow, int iLastColumn);
    public virtual Ptg ConvertSharedToken(IWorkbook parent, int iRow, int iColumn);
    public virtual Ptg ConvertPtgToNPtg(IWorkbook parent, int iRow, int iColumn);
    public int CompareTo(Ptg token);
    protected int CompareContent(Ptg token);
    public static bool CompareArrays(Ptg[] arrTokens1, Ptg[] arrTokens2);
    public virtual string ToString(FormulaUtil formulaUtil, int row, int col, bool bR1C1, NumberFormatInfo numberInfo, bool isForSerialization, IWorksheet sheet);
    public sealed virtual object Clone();
    public static FormulaToken IndexToCode(FormulaToken baseToken, int index);
}
[PreserveAttribute]
[TokenAttribute("58")]
[TokenAttribute("90")]
[TokenAttribute("122")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.Ref3DPtg : RefPtg {
    private ushort m_usRefIndex;
    public ushort RefIndex { get; public set; }
    [PreserveAttribute]
public Ref3DPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public Ref3DPtg(string strFormula, IWorkbook parent);
    [PreserveAttribute]
public Ref3DPtg(int iCellRow, int iCellColumn, int iSheetIndex, string strRow, string strColumn, bool bR1C1);
    [PreserveAttribute]
public Ref3DPtg(int iSheetIndex, int iRowIndex, int iColIndex, byte options);
    [PreserveAttribute]
public Ref3DPtg(Ref3DPtg twin);
    public sealed virtual ushort get_RefIndex();
    public sealed virtual void set_RefIndex(ushort value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString();
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public sealed virtual string BaseToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1);
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public virtual Ptg ConvertSharedToken(IWorkbook parent, int iRow, int iColumn);
    public virtual Ptg ConvertPtgToNPtg(IWorkbook parent, int iRow, int iColumn);
    internal Ptg ConvertPtgToNPtg();
    public virtual int CodeToIndex();
    public virtual FormulaToken GetCorrespondingErrorCode();
    public static string GetSheetName(IWorkbook book, int refIndex);
    protected void SetSheetIndex(string sheetName, IWorkbook parent);
    public static FormulaToken IndexToCode(int index);
    public static int CodeToIndex(FormulaToken token);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[DefaultMemberAttribute("Item")]
[AttributeUsageAttribute("256")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.ReferenceIndexAttribute : Attribute {
    private int m_iIndex;
    private Int32[] m_arrIndex;
    private Type m_TargetType;
    public int Index { get; }
    public int Item { get; }
    public Type TargetType { get; }
    public int Count { get; }
    public ReferenceIndexAttribute(int index);
    public ReferenceIndexAttribute(Int32[] arrParams);
    public ReferenceIndexAttribute(Type targetType, Int32[] arrParams);
    public ReferenceIndexAttribute(Type targetType, int index);
    public int get_Index();
    public int get_Item(int index);
    public Type get_TargetType();
    public int get_Count();
}
[PreserveAttribute]
[TokenAttribute("60")]
[TokenAttribute("92")]
[TokenAttribute("124")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.RefError3dPtg : Ref3DPtg {
    [PreserveAttribute]
public RefError3dPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public RefError3dPtg(string strFormula, IWorkbook parent);
    [PreserveAttribute]
public RefError3dPtg(Ref3DPtg dataHolder);
    public virtual string ToString();
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public static FormulaToken IndexToCode(int index);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
}
[PreserveAttribute]
[ErrorCodeAttribute("#REF!", "23")]
[TokenAttribute("42")]
[TokenAttribute("74")]
[TokenAttribute("106")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.RefErrorPtg : RefPtg {
    public static string ReferenceError;
    [PreserveAttribute]
private static RefErrorPtg();
    [PreserveAttribute]
public RefErrorPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public RefErrorPtg(string errorName);
    [PreserveAttribute]
public RefErrorPtg(string errorName, IWorkbook book);
    [PreserveAttribute]
public RefErrorPtg(RefPtg dataHolder);
    public virtual string ToString();
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public static FormulaToken IndexToCode(int index);
    public virtual Ptg ConvertPtgToNPtg(IWorkbook parent, int iRow, int iColumn);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
}
[PreserveAttribute]
[TokenAttribute("62")]
[TokenAttribute("94")]
[TokenAttribute("126")]
[CLSCompliantAttribute("False")]
internal class Syncfusion.XlsIO.Parser.Biff_Records.Formula.RefN3DPtg : RefNPtg {
    private ushort m_usRefIndex;
    public ushort RefIndex { get; public set; }
    [PreserveAttribute]
public RefN3DPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public RefN3DPtg(string strFormula, IWorkbook parent);
    [PreserveAttribute]
public RefN3DPtg(int iCellRow, int iCellColumn, int iSheetIndex, string strRow, string strColumn, bool bR1C1);
    [PreserveAttribute]
public RefN3DPtg(int iSheetIndex, int iRowIndex, int iColIndex, byte options);
    public sealed virtual ushort get_RefIndex();
    public sealed virtual void set_RefIndex(ushort value);
    public virtual Ptg ConvertSharedToken(IWorkbook parent, int iRow, int iColumn);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString();
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public sealed virtual string BaseToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1);
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    public virtual int CodeToIndex();
    public virtual FormulaToken GetCorrespondingErrorCode();
    public static string GetSheetName(IWorkbook book, int refIndex);
    protected void SetSheetIndex(string sheetName, IWorkbook parent);
    public static FormulaToken IndexToCode(int index);
    public static int CodeToIndex(FormulaToken token);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[PreserveAttribute]
[TokenAttribute("44")]
[TokenAttribute("76")]
[TokenAttribute("108")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.RefNPtg : RefPtg {
    [PreserveAttribute]
public RefNPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public RefNPtg(int iCellRow, int iCellColumn, string strRow, string strColumn, bool bR1C1);
    public virtual Ptg ConvertSharedToken(IWorkbook parent, int iRow, int iColumn);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Ptg Get3DToken(int iSheetReference);
    internal FormulaToken GetErrorCode();
    public static int CodeToIndex(FormulaToken token);
    public static FormulaToken IndexToCode(int index);
}
[PreserveAttribute]
[TokenAttribute("36")]
[TokenAttribute("68")]
[TokenAttribute("100")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.RefPtg : Ptg {
    public static byte RowBitMask;
    public static byte ColumnBitMask;
    private static char DEF_R1C1_OPEN_BRACKET;
    private static char DEF_R1C1_CLOSE_BRACKET;
    public static string DEF_R1C1_ROW;
    public static string DEF_R1C1_COLUMN;
    public static char DEF_OPEN_BRACKET;
    public static char DEF_CLOSE_BRACKET;
    private int m_iRowIndex;
    private int m_iColumnIndex;
    private byte m_options;
    [CLSCompliantAttribute("False")]
public int RowIndex { get; public set; }
    public bool IsRowIndexRelative { get; public set; }
    public bool IsColumnIndexRelative { get; public set; }
    public int ColumnIndex { get; public set; }
    protected byte Options { get; protected set; }
    [PreserveAttribute]
public RefPtg(string strCell);
    [PreserveAttribute]
public RefPtg(DataProvider provider, int offset, ExcelVersion version);
    [PreserveAttribute]
public RefPtg(int iRowIndex, int iColIndex, byte options);
    [PreserveAttribute]
public RefPtg(int iCellRow, int iCellColumn, string strRow, string strColumn, bool bR1C1);
    [PreserveAttribute]
public RefPtg(RefPtg twin);
    public virtual int get_RowIndex();
    public virtual void set_RowIndex(int value);
    public virtual bool get_IsRowIndexRelative();
    public virtual void set_IsRowIndexRelative(bool value);
    public virtual bool get_IsColumnIndexRelative();
    public virtual void set_IsColumnIndexRelative(bool value);
    public virtual int get_ColumnIndex();
    public virtual void set_ColumnIndex(int value);
    protected byte get_Options();
    protected void set_Options(byte value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString();
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    protected void SetCell(int iCellRow, int iCellColumn, string strRow, string strColumn, bool bR1C1);
    protected void SetCellA1(string strColumn, string strRow);
    protected void SetCellR1C1(int iCellRow, int iCellColumn, string column, string row);
    public static int GetR1C1Index(int iIndex, string strValue, Boolean& bRelative);
    public virtual Ptg Offset(int iRowOffset, int iColumnOffset, WorkbookImpl book);
    public virtual Ptg Offset(int iCurSheetIndex, int iTokenRow, int iTokenColumn, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, Rectangle rectDest, Boolean& bChanged, WorkbookImpl book);
    protected virtual Ptg MoveIntoDifferentSheet(RefPtg result, int iSourceSheetIndex, Rectangle rectSource, int iDestSheetIndex, int iRowOffset, int iColOffset, WorkbookImpl book);
    private bool ReferencedCellMoved(Rectangle rectSource);
    public virtual int CodeToIndex();
    public virtual FormulaToken GetCorrespondingErrorCode();
    private Ptg UpdateReferencedCell(int iCurSheetIndex, int iDestSheetIndex, int iRowIndex, int iColIndex, Boolean& bChanged, WorkbookImpl book);
    public virtual Ptg ConvertPtgToNPtg(IWorkbook parent, int iRow, int iColumn);
    public static bool IsRelative(byte Options, byte mask);
    public static byte SetRelative(byte Options, byte mask, bool value);
    [CLSCompliantAttribute("False")]
public static string GetCellName(int iCurCellRow, int iCurCellColumn, int row, int column, bool bRowRelative, bool bColumnRelative, bool bR1C1);
    private static string GetA1CellName(int column, int row, bool isColumnRelative, bool isRowRelative);
    public static string GetRCCellName(int column, int row);
    public static int GetColumnIndex(int iCellColumn, string columnName, bool bR1C1, Boolean& bRelative);
    public static int GetA1ColumnIndex(string columnName, Boolean& bRelative);
    public static int GetRowIndex(int iCellRow, string strRowName, bool bR1C1, Boolean& bRelative);
    public static int GetA1RowIndex(string strRowName, Boolean& bRelative);
    public static FormulaToken IndexToCode(int index);
    public static int CodeToIndex(FormulaToken token);
    public static string GetR1C1CellName(int iCurRow, int iCurColumn, int row, int column, bool bRowRelative, bool bColumnRelative);
    public static string GetR1C1Name(int iCurIndex, string strStart, int iIndex, bool bIsRelative);
    public sealed virtual IRange GetRange(IWorkbook book, IWorksheet sheet);
    public sealed virtual Rectangle GetRectangle();
    public sealed virtual Ptg UpdateRectangle(Rectangle rectangle);
    public virtual Ptg Get3DToken(int iSheetReference);
    public virtual Ptg ConvertToError();
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
    internal void SetOptions(byte data);
}
[PreserveAttribute]
[TokenAttribute("23")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.StringConstantPtg : Ptg {
    public string m_strValue;
    public byte m_compressed;
    public string Value { get; public set; }
    [PreserveAttribute]
public StringConstantPtg(string value);
    [PreserveAttribute]
public StringConstantPtg(DataProvider provider, int offset, ExcelVersion version);
    public string get_Value();
    public void set_Value(string value);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual Byte[] ToByteArray(ExcelVersion version);
    public virtual void InfillPTG(DataProvider provider, Int32& offset, ExcelVersion version);
}
[AttributeUsageAttribute("4")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.TokenAttribute : Attribute {
    private FormulaToken m_Code;
    private string m_strOperationSymbol;
    private bool m_bPlaceAfter;
    public FormulaToken FormulaType { get; }
    public string OperationSymbol { get; }
    public bool IsPlaceAfter { get; }
    public TokenAttribute(FormulaToken Code);
    public TokenAttribute(FormulaToken Code, string OperationSymbol);
    public TokenAttribute(FormulaToken Code, string OperationSymbol, bool bPlaceAfter);
    public FormulaToken get_FormulaType();
    public string get_OperationSymbol();
    public bool get_IsPlaceAfter();
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.Formula.TOperation : Enum {
    public int value__;
    public static TOperation TYPE_UNARY;
    public static TOperation TYPE_BINARY;
    public static TOperation TYPE_FUNCTION;
}
[PreserveAttribute]
[TokenAttribute("19", "-")]
[TokenAttribute("18", "+")]
[TokenAttribute("20", "%", "True")]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.UnaryOperationPtg : OperationPtg {
    private static TokenAttribute[] s_arrAttributes;
    private static Dictionary`2<string, TokenAttribute> NameToAttribute;
    public TOperation OperationType { get; }
    protected TokenAttribute[] Attributes { get; }
    [PreserveAttribute]
private static UnaryOperationPtg();
    [PreserveAttribute]
public UnaryOperationPtg(string strOperationSymbol);
    [PreserveAttribute]
public UnaryOperationPtg(DataProvider provider, int offset, ExcelVersion version);
    public static FormulaToken GetTokenId(string operationSign);
    public virtual TOperation get_OperationType();
    protected virtual TokenAttribute[] get_Attributes();
    public virtual int GetSize(ExcelVersion version);
    public virtual void PushResultToStack(FormulaUtil formulaUtil, Stack`1<object> operands, bool isForSerialization);
    public virtual string ToString(FormulaUtil formulaUtil, int iRow, int iColumn, bool bR1C1, NumberFormatInfo numberFormat, bool isForSerialization);
    public virtual String[] GetOperands(string strFormula, Int32& index, FormulaUtil formulaParser);
}
[PreserveAttribute]
public class Syncfusion.XlsIO.Parser.Biff_Records.Formula.UnknownPtg : Ptg {
    [PreserveAttribute]
public UnknownPtg(DataProvider provider, int offset, ExcelVersion version);
    public virtual int GetSize(ExcelVersion version);
    public virtual string ToString();
}
[BiffAttribute("6")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.FormulaRecord : CellPositionBase {
    public static ulong DEF_FIRST_MASK;
    public static ulong DEF_BOOL_MASK;
    public static ulong DEF_ERROR_MASK;
    public static ulong DEF_BLANK_MASK;
    public static ulong DEF_STRING_MASK;
    public static ulong DEF_STRING_MASK_VALUE;
    private static int DEF_FIXED_SIZE;
    private static ulong DEF_STRING_VALUE_ULONG;
    private static ulong DEF_BLANK_VALUE_ULONG;
    public static long DEF_STRING_VALUE_LONG;
    public static long DEF_BLANK_VALUE_LONG;
    public static double DEF_STRING_VALUE;
    private static int FormulaValueOffset;
    private static int DataSizeBeforeExpression;
    [BiffRecordPosAttribute("6", "8", "6")]
private double m_dbValue;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("14", "0", "1")]
private bool m_bRecalculateAlways;
    [BiffRecordPosAttribute("14", "1", "1")]
private bool m_bCalculateOnOpen;
    [BiffRecordPosAttribute("14", "3", "1")]
private bool m_bPartOfSharedFormula;
    [BiffRecordPosAttribute("16", "4", "True")]
private int m_iReserved;
    [BiffRecordPosAttribute("20", "2")]
private ushort m_usExpressionLen;
    private Byte[] m_expression;
    private Ptg[] m_arrParsedExpression;
    private bool m_bFillFromExpression;
    internal Byte[] Expression { get; internal set; }
    public double Value { get; public set; }
    public ushort Options { get; public set; }
    public bool RecalculateAlways { get; public set; }
    public bool CalculateOnOpen { get; public set; }
    public bool PartOfSharedFormula { get; public set; }
    public Ptg[] ParsedExpression { get; public set; }
    public int Reserved { get; }
    public int MinimumRecordSize { get; }
    public bool IsFillFromExpression { get; public set; }
    public double DoubleValue { get; }
    public bool IsBool { get; }
    public bool IsError { get; }
    public bool IsBlank { get; }
    public bool HasString { get; public set; }
    public bool BooleanValue { get; public set; }
    public byte ErrorValue { get; public set; }
    public Ptg[] Formula { get; public set; }
    private static FormulaRecord();
    internal Byte[] get_Expression();
    internal void set_Expression(Byte[] value);
    public double get_Value();
    public void set_Value(double value);
    public ushort get_Options();
    public void set_Options(ushort value);
    public bool get_RecalculateAlways();
    public void set_RecalculateAlways(bool value);
    public bool get_CalculateOnOpen();
    public void set_CalculateOnOpen(bool value);
    public bool get_PartOfSharedFormula();
    public void set_PartOfSharedFormula(bool value);
    public Ptg[] get_ParsedExpression();
    public void set_ParsedExpression(Ptg[] value);
    public int get_Reserved();
    public virtual int get_MinimumRecordSize();
    public bool get_IsFillFromExpression();
    public void set_IsFillFromExpression(bool value);
    public sealed virtual double get_DoubleValue();
    public bool get_IsBool();
    public bool get_IsError();
    public bool get_IsBlank();
    public bool get_HasString();
    public void set_HasString(bool value);
    public bool get_BooleanValue();
    public void set_BooleanValue(bool value);
    public byte get_ErrorValue();
    public void set_ErrorValue(byte value);
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    private void ParseFormula(DataProvider provider, int iOffset, ExcelVersion version);
    private void PrepareExpression(ExcelVersion version);
    private void SetBoolErrorValue(byte value, bool bIsError);
    public virtual int GetStoreSize(ExcelVersion version);
    public static double GetBoolErrorValue(byte value, bool bIsError);
    public static void SetStringValue(DataProvider dataProvider, int iFormulaOffset, ExcelVersion version);
    public static void SetBlankValue(DataProvider dataProvider, int iFormulaOffset, ExcelVersion version);
    public static Ptg[] ReadValue(DataProvider provider, int recordStart, ExcelVersion version);
    public static long ReadInt64Value(DataProvider provider, int recordStart, ExcelVersion version);
    public static double ReadDoubleValue(DataProvider provider, int recordStart, ExcelVersion version);
    public static void WriteDoubleValue(DataProvider provider, int recordStart, ExcelVersion version, double value);
    public static void UpdateOptions(DataProvider provider, int iOffset);
    public sealed virtual object Clone();
    public sealed virtual Ptg[] get_Formula();
    public sealed virtual void set_Formula(Ptg[] value);
    public static void ConvertFormulaTokens(Ptg[] tokens, bool bFromExcel07To97);
    private static void ConvertFormulaGotoToken(Ptg[] formulaTokens, int iGotoTokenIndex, bool bFromExcel07To97);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.XlsIO.Parser.Biff_Records.FutureHeader : object {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usType;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usAttributes;
    public ushort Type { get; public set; }
    public ushort Attributes { get; public set; }
    public ushort get_Type();
    public void set_Type(ushort value);
    public ushort get_Attributes();
    public void set_Attributes(ushort value);
    public void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public int GetStoreSize();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.GradStops : object {
    private ushort m_colorType;
    private int m_gradColorValue;
    private long m_gradPostition;
    private long m_gradTint;
    public int ParseGradStops(DataProvider provider, int iOffset, ExcelVersion version);
    public int InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("130")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.GridsetRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usGridsetFlag;
    public ushort GridsetFlag { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public GridsetRecord(Stream stream, Int32& itemSize);
    public GridsetRecord(int iReserve);
    public ushort get_GridsetFlag();
    public void set_GridsetFlag(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("128")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.GutsRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usLeftRowGutter;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usTopColGutter;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usMaxRowLevel;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usMaxColLevel;
    public ushort LeftRowGutter { get; public set; }
    public ushort TopColumnGutter { get; public set; }
    public ushort MaxRowLevel { get; public set; }
    public ushort MaxColumnLevel { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public GutsRecord(Stream stream, Int32& itemSize);
    public GutsRecord(int iReserve);
    public ushort get_LeftRowGutter();
    public void set_LeftRowGutter(ushort value);
    public ushort get_TopColumnGutter();
    public void set_TopColumnGutter(ushort value);
    public ushort get_MaxRowLevel();
    public void set_MaxRowLevel(ushort value);
    public ushort get_MaxColumnLevel();
    public void set_MaxColumnLevel(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("211")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.HasBasicRecord : BiffRecordRaw {
    public int MaximumRecordSize { get; }
    public HasBasicRecord(Stream stream, Int32& itemSize);
    public HasBasicRecord(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("2204")]
public class Syncfusion.XlsIO.Parser.Biff_Records.HeaderAndFooterRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("28", "0", "1")]
private bool m_bfHFDiffOddEven;
    [BiffRecordPosAttribute("28", "1", "1")]
private bool m_bfHFDiffFirst;
    [BiffRecordPosAttribute("28", "2", "1")]
private bool m_bfHFScaleWithDoc;
    [BiffRecordPosAttribute("28", "3", "1")]
private bool m_bfHFAlignMargins;
    private string m_strHeaderEven;
    private string m_strFooterEven;
    private string m_strHeaderFirst;
    private string m_strFooterFirst;
    private Byte[] m_arrBytes;
    private int recordCode;
    private static int Record2003Length;
    private static int Record2010Length;
    public bool AlignHFWithPageMargins { get; public set; }
    public bool DifferentOddAndEvenPagesHF { get; public set; }
    public bool HFScaleWithDoc { get; public set; }
    public bool DifferentFirstPageHF { get; public set; }
    internal string EvenHeaderString { get; internal set; }
    internal string EvenFooterString { get; internal set; }
    internal string FirstHeaderString { get; internal set; }
    internal string FirstFooterString { get; internal set; }
    public int MinimumRecordSize { get; }
    public HeaderAndFooterRecord(Stream stream, Int32& itemSize);
    public HeaderAndFooterRecord(int iReserve);
    public bool get_AlignHFWithPageMargins();
    public void set_AlignHFWithPageMargins(bool value);
    public bool get_DifferentOddAndEvenPagesHF();
    public void set_DifferentOddAndEvenPagesHF(bool value);
    public bool get_HFScaleWithDoc();
    public void set_HFScaleWithDoc(bool value);
    public bool get_DifferentFirstPageHF();
    public void set_DifferentFirstPageHF(bool value);
    internal string get_EvenHeaderString();
    internal void set_EvenHeaderString(string value);
    internal string get_EvenFooterString();
    internal void set_EvenFooterString(string value);
    internal string get_FirstHeaderString();
    internal void set_FirstHeaderString(string value);
    internal string get_FirstFooterString();
    internal void set_FirstFooterString(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.HeaderContinueRecordBuilder : ContinueRecordBuilder {
    public int MaximumSize { get; }
    public HeaderContinueRecordBuilder(BiffContinueRecordRaw parent);
    public virtual int get_MaximumSize();
    public virtual int AppendBytes(Byte[] data, int start, int length);
}
[BiffAttribute("2150")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.HeaderFooterImageRecord : MSODrawingGroupRecord {
    internal static Byte[] DEF_RECORD_START;
    internal static Byte[] DEF_WORKSHEET_RECORD_START;
    internal static Byte[] DEF_CONTINUE_START;
    internal static int DEF_DATA_OFFSET;
    protected int StructuresOffset { get; }
    public HeaderFooterImageRecord(Stream stream, Int32& itemSize);
    public HeaderFooterImageRecord(int iReserve);
    private static HeaderFooterImageRecord();
    protected virtual int get_StructuresOffset();
    protected virtual Stream CreateDataList(Int32& iStartIndex);
    protected virtual int AddRecordData(List`1<Byte[]> arrRecords, BiffRecordRaw record);
    protected virtual ContinueRecordBuilder CreateBuilder();
    public sealed virtual void SetLength(int iLength);
}
[BiffAttribute("20")]
[BiffAttribute("21")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.HeaderFooterRecord : BiffRecordRaw {
    private string m_strValue;
    public string Value { get; public set; }
    public int MinimumRecordSize { get; }
    public HeaderFooterRecord(Stream stream, Int32& itemSize);
    public HeaderFooterRecord(int iReserve);
    public string get_Value();
    public void set_Value(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("141")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.HideObjRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usHideObj;
    public ushort HideObject { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public HideObjRecord(Stream stream, Int32& itemSize);
    public HideObjRecord(int iReserve);
    public ushort get_HideObject();
    public void set_HideObject(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("440")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.HLinkRecord : BiffRecordRawWithArray {
    public static Guid GUID_STDLINK;
    public static Guid GUID_URLMONIKER;
    public static Guid GUID_FILEMONIKER;
    public static Byte[] GUID_STDLINK_BYTES;
    public static Byte[] GUID_URLMONIKER_BYTES;
    public static Byte[] GUID_FILEMONIKER_BYTES;
    public static Byte[] FILE_UNKNOWN;
    public static Byte[] FILE_UNKNOWN2;
    public static int GUID_LENGTH;
    public static int STDLINK_START_BYTE;
    public static int URLMONIKER_START_BYTE;
    public static int FILEMONIKER_START_BYTE;
    private static string DEF_BACKSLASH;
    [BiffRecordPosAttribute("0", "2")]
private UInt32 m_usFirstRow;
    [BiffRecordPosAttribute("2", "2")]
private UInt32 m_usLastRow;
    [BiffRecordPosAttribute("4", "2")]
private UInt32 m_usFirstColumn;
    [BiffRecordPosAttribute("6", "2")]
private UInt32 m_usLastColumn;
    [BiffRecordPosAttribute("24", "4")]
private UInt32 m_uiUnknown;
    [BiffRecordPosAttribute("28", "4")]
private UInt32 m_uiOptions;
    [BiffRecordPosAttribute("28", "0", "1")]
private bool m_bFileOrUrl;
    [BiffRecordPosAttribute("28", "1", "1")]
private bool m_bAbsolutePathOrUrl;
    [BiffRecordPosAttribute("28", "2", "1")]
private bool m_bDescription1;
    [BiffRecordPosAttribute("28", "3", "1")]
private bool m_bTextMark;
    [BiffRecordPosAttribute("28", "4", "1")]
private bool m_bDescription2;
    [BiffRecordPosAttribute("28", "7", "1")]
private bool m_bTargetFrame;
    [BiffRecordPosAttribute("29", "0", "1")]
private bool m_bUncPath;
    private UInt32 m_uiDescriptionLen;
    private string m_strDescription;
    private UInt32 m_uiTargetFrameLen;
    private string m_strTargetFrame;
    private UInt32 m_uiTextMarkLen;
    private string m_strTextMark;
    private ExcelHyperLinkType m_LinkType;
    private UInt32 m_uiUrlLen;
    private string m_strUrl;
    private ushort m_usDirUpLevel;
    private UInt32 m_uiFileNameLen;
    private string m_strFileName;
    private UInt32 m_uiFollowSize;
    private UInt32 m_uiXFilePathLen;
    private string m_strXFilePath;
    private UInt32 m_uiUncLen;
    private string m_strUnc;
    public UInt32 FirstRow { get; public set; }
    public UInt32 FirstColumn { get; public set; }
    public UInt32 LastRow { get; public set; }
    public UInt32 LastColumn { get; public set; }
    public UInt32 Unknown { get; }
    public UInt32 Options { get; }
    public bool IsFileOrUrl { get; public set; }
    public bool IsAbsolutePathOrUrl { get; public set; }
    public bool IsDescription { get; public set; }
    public bool IsTextMark { get; public set; }
    public bool IsTargetFrame { get; public set; }
    public bool IsUncPath { get; public set; }
    public bool CanBeUrl { get; public set; }
    public bool CanBeFile { get; public set; }
    public bool CanBeUnc { get; public set; }
    public bool CanBeWorkbook { get; public set; }
    public UInt32 DescriptionLen { get; }
    public string Description { get; public set; }
    public UInt32 TargetFrameLen { get; }
    public string TargetFrame { get; public set; }
    public UInt32 TextMarkLen { get; }
    public string TextMark { get; public set; }
    public ExcelHyperLinkType LinkType { get; public set; }
    public bool IsUrl { get; public set; }
    public bool IsFileName { get; public set; }
    public UInt32 UrlLen { get; }
    public string Url { get; public set; }
    public ushort DirUpLevel { get; public set; }
    public UInt32 FileNameLen { get; }
    public string FileName { get; public set; }
    public UInt32 FollowSize { get; }
    public UInt32 XFilePathLen { get; }
    public string XFilePath { get; public set; }
    public UInt32 UncLen { get; }
    public string UncPath { get; public set; }
    public HLinkRecord(Stream stream, Int32& itemSize);
    public HLinkRecord(int iReserve);
    private static HLinkRecord();
    public UInt32 get_FirstRow();
    public void set_FirstRow(UInt32 value);
    public UInt32 get_FirstColumn();
    public void set_FirstColumn(UInt32 value);
    public UInt32 get_LastRow();
    public void set_LastRow(UInt32 value);
    public UInt32 get_LastColumn();
    public void set_LastColumn(UInt32 value);
    public UInt32 get_Unknown();
    public UInt32 get_Options();
    public bool get_IsFileOrUrl();
    public void set_IsFileOrUrl(bool value);
    public bool get_IsAbsolutePathOrUrl();
    public void set_IsAbsolutePathOrUrl(bool value);
    public bool get_IsDescription();
    public void set_IsDescription(bool value);
    public bool get_IsTextMark();
    public void set_IsTextMark(bool value);
    public bool get_IsTargetFrame();
    public void set_IsTargetFrame(bool value);
    public bool get_IsUncPath();
    public void set_IsUncPath(bool value);
    public bool get_CanBeUrl();
    public void set_CanBeUrl(bool value);
    public bool get_CanBeFile();
    public void set_CanBeFile(bool value);
    public bool get_CanBeUnc();
    public void set_CanBeUnc(bool value);
    public bool get_CanBeWorkbook();
    public void set_CanBeWorkbook(bool value);
    public UInt32 get_DescriptionLen();
    public string get_Description();
    public void set_Description(string value);
    public UInt32 get_TargetFrameLen();
    public string get_TargetFrame();
    public void set_TargetFrame(string value);
    public UInt32 get_TextMarkLen();
    public string get_TextMark();
    public void set_TextMark(string value);
    public ExcelHyperLinkType get_LinkType();
    public void set_LinkType(ExcelHyperLinkType value);
    public bool get_IsUrl();
    public void set_IsUrl(bool value);
    public bool get_IsFileName();
    public void set_IsFileName(bool value);
    public UInt32 get_UrlLen();
    public string get_Url();
    public void set_Url(string value);
    public ushort get_DirUpLevel();
    public void set_DirUpLevel(ushort value);
    public UInt32 get_FileNameLen();
    public string get_FileName();
    public void set_FileName(string value);
    public UInt32 get_FollowSize();
    public UInt32 get_XFilePathLen();
    public string get_XFilePath();
    public void set_XFilePath(string value);
    public UInt32 get_UncLen();
    public string get_UncPath();
    public void set_UncPath(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    private void ParseDescription(Int32& iOffset);
    private void ParseTargetFrame(Int32& iOffset);
    private void ParseSpecialData(Int32& iOffset);
    private void ParseTextMark(Int32& iOffset);
    private bool CheckUrl(Int32& iOffset);
    private bool CheckLocalFile(Int32& iOffset);
    private bool CheckUnc(Int32& iOffset);
    private void ParseUrl(Int32& iOffset);
    private void ParseFile(Int32& iOffset);
    private void ParseUnc(Int32& iOffset);
    private void ParseWorkbook(Int32& iOffset);
    private void InfillLenAndString(UInt32& uiLen, String& strValue, bool bBytesCount);
    private void InfillSpecialData();
    private void InfillFileSpecialData();
    private void InfillUncSpecialData();
    private void InfillUrlSpecialData();
    private void InfillWorkbookSpecialData();
    private void SetOptionFlags();
}
[BiffAttribute("27")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.HorizontalPageBreaksRecord : BiffRecordRawWithArray {
    private static int DEF_FIXED_PART_SIZE;
    internal static int DEF_SUBITEM_SIZE;
    internal static int FixedSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usBreaksCount;
    private THPageBreak[] m_arrPageBreaks;
    public THPageBreak[] PageBreaks { get; public set; }
    public int MinimumRecordSize { get; }
    public HorizontalPageBreaksRecord(Stream stream, Int32& itemSize);
    public HorizontalPageBreaksRecord(int iReserve);
    public THPageBreak[] get_PageBreaks();
    public void set_PageBreaks(THPageBreak[] value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.IBiffStorage {
    public TBIFFRecord TypeCode { get; }
    public int RecordCode { get; }
    public bool NeedDataArray { get; }
    public long StreamPos { get; public set; }
    public abstract virtual TBIFFRecord get_TypeCode();
    public abstract virtual int get_RecordCode();
    public abstract virtual bool get_NeedDataArray();
    public abstract virtual long get_StreamPos();
    public abstract virtual void set_StreamPos(long value);
    public abstract virtual int GetStoreSize(ExcelVersion version);
    public abstract virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Parser.Biff_Records.ICellPositionFormat {
    public int Row { get; public set; }
    public int Column { get; public set; }
    public ushort ExtendedFormatIndex { get; public set; }
    public TBIFFRecord TypeCode { get; }
    public abstract virtual int get_Row();
    public abstract virtual void set_Row(int value);
    public abstract virtual int get_Column();
    public abstract virtual void set_Column(int value);
    public abstract virtual ushort get_ExtendedFormatIndex();
    public abstract virtual void set_ExtendedFormatIndex(ushort value);
    public abstract virtual TBIFFRecord get_TypeCode();
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.IChartType {
    public bool StackValues { get; public set; }
    public bool ShowAsPercents { get; public set; }
    public abstract virtual bool get_StackValues();
    public abstract virtual void set_StackValues(bool value);
    public abstract virtual bool get_ShowAsPercents();
    public abstract virtual void set_ShowAsPercents(bool value);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.IDoubleValue {
    public double DoubleValue { get; }
    public TBIFFRecord TypeCode { get; }
    public abstract virtual double get_DoubleValue();
    public abstract virtual TBIFFRecord get_TypeCode();
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.IFormulaRecord {
    public Ptg[] Formula { get; public set; }
    public abstract virtual Ptg[] get_Formula();
    public abstract virtual void set_Formula(Ptg[] value);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.ILengthSetter {
    public abstract virtual void SetLength(int iLength);
}
[BiffAttribute("127")]
internal class Syncfusion.XlsIO.Parser.Biff_Records.ImageDataRecord : BiffRecordWithContinue {
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Parser.Biff_Records.IMultiCellRecord {
    public int FirstColumn { get; public set; }
    public int LastColumn { get; public set; }
    public int SubRecordSize { get; }
    public TBIFFRecord SubRecordType { get; }
    public abstract virtual int get_FirstColumn();
    public abstract virtual void set_FirstColumn(int value);
    public abstract virtual int get_LastColumn();
    public abstract virtual void set_LastColumn(int value);
    public abstract virtual int get_SubRecordSize();
    public abstract virtual int GetSeparateSubRecordSize(ExcelVersion version);
    public abstract virtual TBIFFRecord get_SubRecordType();
    public abstract virtual void Insert(ICellPositionFormat cell);
    public abstract virtual ICellPositionFormat[] Split(int iColumnIndex);
    public abstract virtual BiffRecordRaw[] Split(bool bIgnoreStyles);
}
[BiffAttribute("523")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.IndexRecord : BiffRecordRaw {
    private static int DEF_FIXED_SIZE;
    private static int DEF_SUB_ITEM_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iReserved0;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iFirstRow;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iLastRowAdd1;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iReserved1;
    private Int32[] m_arrDbCells;
    private List`1<DBCellRecord> m_arrDBCellRecords;
    public int FirstRow { get; public set; }
    public int LastRow { get; public set; }
    public Int32[] DbCells { get; public set; }
    public int Reserved0 { get; }
    public int Reserved1 { get; }
    public int MinimumRecordSize { get; }
    internal List`1<DBCellRecord> DbCellRecords { get; internal set; }
    public IndexRecord(Stream stream, Int32& itemSize);
    public IndexRecord(int iReserve);
    public int get_FirstRow();
    public void set_FirstRow(int value);
    public int get_LastRow();
    public void set_LastRow(int value);
    public Int32[] get_DbCells();
    public void set_DbCells(Int32[] value);
    public int get_Reserved0();
    public int get_Reserved1();
    public virtual int get_MinimumRecordSize();
    internal List`1<DBCellRecord> get_DbCellRecords();
    internal void set_DbCellRecords(List`1<DBCellRecord> value);
    public virtual int FillStream(BinaryWriter writer, DataProvider provider, IEncryptor encryptor, int streamPosition);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private void InternalDataIntegrityCheck();
    public void UpdateOffsets();
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("226")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.InterfaceEndRecord : BiffRecordRawWithArray {
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public InterfaceEndRecord(Stream stream, Int32& itemSize);
    public InterfaceEndRecord(int iReserve);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("225")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.InterfaceHdrRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCodepage;
    public ushort Codepage { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public InterfaceHdrRecord(Stream stream, Int32& itemSize);
    public InterfaceHdrRecord(int iReserve);
    public ushort get_Codepage();
    public void set_Codepage(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.IntPtrContinueRecordBuilder : object {
    protected BiffRecordWithContinue m_parent;
    protected int m_iPos;
    private int m_iContinuePos;
    private int m_iContinueSize;
    private int m_iTotal;
    protected int m_iMax;
    private TBIFFRecord m_continueType;
    private int m_iContinueCount;
    private int m_iFirstRecordLength;
    private int m_iContinueHeaderSize;
    [CompilerGeneratedAttribute]
private EventHandler OnFirstContinue;
    public int FreeSpace { get; }
    public int Total { get; public set; }
    public int Position { get; public set; }
    public int Offset { get; }
    public int Max { get; }
    public TBIFFRecord FirstContinueType { get; }
    public TBIFFRecord ContinueType { get; public set; }
    public int MaximumSize { get; }
    public int FirstRecordLength { get; }
    public IntPtrContinueRecordBuilder(BiffRecordWithContinue parent, int continueHeaderSize);
    public int get_FreeSpace();
    public int get_Total();
    public void set_Total(int value);
    public int get_Position();
    public void set_Position(int value);
    public int get_Offset();
    public int get_Max();
    public TBIFFRecord get_FirstContinueType();
    public TBIFFRecord get_ContinueType();
    public void set_ContinueType(TBIFFRecord value);
    public virtual int get_MaximumSize();
    public int get_FirstRecordLength();
    [CompilerGeneratedAttribute]
public void add_OnFirstContinue(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnFirstContinue(EventHandler value);
    public void AppendByte(byte value);
    public virtual int AppendBytes(Byte[] data, int start, int length);
    public void AppendUInt16(ushort value);
    public bool CheckIfSpaceNeeded(int length);
    public void StartContinueRecord();
    public void UpdateContinueRecordSize();
    protected void UpdateCounters(int iLen);
    public sealed virtual void Dispose();
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Parser.Biff_Records.IOutline {
    public ushort OutlineLevel { get; public set; }
    public bool IsCollapsed { get; public set; }
    public bool IsHidden { get; public set; }
    public ushort ExtendedFormatIndex { get; public set; }
    public ushort Index { get; public set; }
    public abstract virtual ushort get_OutlineLevel();
    public abstract virtual void set_OutlineLevel(ushort value);
    public abstract virtual bool get_IsCollapsed();
    public abstract virtual void set_IsCollapsed(bool value);
    public abstract virtual bool get_IsHidden();
    public abstract virtual void set_IsHidden(bool value);
    public abstract virtual ushort get_ExtendedFormatIndex();
    public abstract virtual void set_ExtendedFormatIndex(ushort value);
    public abstract virtual ushort get_Index();
    public abstract virtual void set_Index(ushort value);
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Parser.Biff_Records.IOutlineWrapper {
    public int FirstIndex { get; public set; }
    public int LastIndex { get; public set; }
    public IOutline Outline { get; public set; }
    public IRange OutlineRange { get; public set; }
    public ExcelGroupBy GroupBy { get; public set; }
    public abstract virtual int get_FirstIndex();
    public abstract virtual void set_FirstIndex(int value);
    public abstract virtual int get_LastIndex();
    public abstract virtual void set_LastIndex(int value);
    public abstract virtual IOutline get_Outline();
    public abstract virtual void set_Outline(IOutline value);
    public abstract virtual IRange get_OutlineRange();
    public abstract virtual void set_OutlineRange(IRange value);
    public abstract virtual ExcelGroupBy get_GroupBy();
    public abstract virtual void set_GroupBy(ExcelGroupBy value);
}
[CLSCompliantAttribute("False")]
public interface Syncfusion.XlsIO.Parser.Biff_Records.ISharedFormula {
    public int FirstRow { get; public set; }
    public int LastRow { get; public set; }
    public int FirstColumn { get; public set; }
    public int LastColumn { get; public set; }
    public Ptg[] Formula { get; }
    public abstract virtual int get_FirstRow();
    public abstract virtual void set_FirstRow(int value);
    public abstract virtual int get_LastRow();
    public abstract virtual void set_LastRow(int value);
    public abstract virtual int get_FirstColumn();
    public abstract virtual void set_FirstColumn(int value);
    public abstract virtual int get_LastColumn();
    public abstract virtual void set_LastColumn(int value);
    public abstract virtual Ptg[] get_Formula();
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.IStringValue {
    public string StringValue { get; }
    public abstract virtual string get_StringValue();
}
[BiffAttribute("17")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.IterationRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usIteration;
    public ushort IsIteration { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public IterationRecord(Stream stream, Int32& itemSize);
    public IterationRecord(int iReserve);
    public ushort get_IsIteration();
    public void set_IsIteration(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder {
    public object Value { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[BiffAttribute("351")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.LabelRangesRecord : BiffRecordRawWithArray {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRowRangesCount;
    private TAddr[] m_arrRowRanges;
    private ushort m_usColRangesCount;
    private TAddr[] m_arrColRanges;
    public ushort RowRangesCount { get; }
    public TAddr[] RowRanges { get; public set; }
    public ushort ColRangesCount { get; }
    public TAddr[] ColRanges { get; public set; }
    public int MinimumRecordSize { get; }
    public LabelRangesRecord(Stream stream, Int32& itemSize);
    public LabelRangesRecord(int iReserve);
    public ushort get_RowRangesCount();
    public TAddr[] get_RowRanges();
    public void set_RowRanges(TAddr[] value);
    public ushort get_ColRangesCount();
    public TAddr[] get_ColRanges();
    public void set_ColRanges(TAddr[] value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("516")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.LabelRecord : CellPositionBase {
    private static int DEF_FIXED_PART;
    private string m_strLabel;
    public string Label { get; public set; }
    public int MinimumRecordSize { get; }
    private string Syncfusion.XlsIO.Parser.Biff_Records.IStringValue.StringValue { get; }
    public object Value { get; public set; }
    public string get_Label();
    public void set_Label(string value);
    public virtual int get_MinimumRecordSize();
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private sealed virtual override string Syncfusion.XlsIO.Parser.Biff_Records.IStringValue.get_StringValue();
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
}
[BiffAttribute("253")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.LabelSSTRecord : CellPositionBase {
    private static int DEF_RECORD_SIZE;
    internal static int DEF_INDEX_OFFSET;
    [BiffRecordPosAttribute("6", "4", "True")]
private int m_iSSTIndex;
    public int SSTIndex { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public int MaximumMemorySize { get; }
    public int get_SSTIndex();
    public void set_SSTIndex(int value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual int get_MaximumMemorySize();
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public static void SetSSTIndex(DataProvider provider, int iOffset, int iNewIndex, ExcelVersion version);
    public static int GetSSTIndex(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("40")]
[BiffAttribute("38")]
[BiffAttribute("41")]
[BiffAttribute("39")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MarginRecord : BiffRecordRaw {
    public static double DEFAULT_VALUE;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "8", "6")]
private double m_dbMargin;
    public double Margin { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public MarginRecord(Stream stream, Int32& itemSize);
    public MarginRecord(int iReserve);
    public double get_Margin();
    public void set_Margin(double value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("229")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MergeCellsRecord : BiffRecordRaw {
    public static int DEF_MAXIMUM_REGIONS;
    private static int DEF_FIXED_SIZE;
    private static int DEF_SUB_ITEM_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usNumber;
    private MergedRegion[] m_arrRegions;
    public ushort RangesNumber { get; }
    public MergedRegion[] Regions { get; public set; }
    public int MinimumRecordSize { get; }
    public MergeCellsRecord(Stream stream, Int32& itemSize);
    public MergeCellsRecord(int iReserve);
    public ushort get_RangesNumber();
    public MergedRegion[] get_Regions();
    public void set_Regions(MergedRegion[] value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private void InternalDataIntegrityCheck();
    public virtual int GetStoreSize(ExcelVersion version);
    public void SetRegions(int iStartIndex, int iCount, MergedRegion[] arrRegions);
}
[BiffAttribute("193")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MMSRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "1")]
private byte m_AddMenuCount;
    [BiffRecordPosAttribute("1", "1")]
private byte m_DelMenuCount;
    public byte AddMenuCount { get; public set; }
    public byte DelMenuCount { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public MMSRecord(Stream stream, Int32& itemSize);
    public MMSRecord(int iReserve);
    public byte get_AddMenuCount();
    public void set_AddMenuCount(byte value);
    public byte get_DelMenuCount();
    public void set_DelMenuCount(byte value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
internal class Syncfusion.XlsIO.Parser.Biff_Records.MsoDataStore : object {
    private WorkbookImpl m_book;
    private IApplication m_application;
    private ICompoundStorage m_storage;
    private int m_Count;
    public MsoDataStore(ICompoundStorage compoundStorage, WorkbookImpl book);
    public void ParseMsoDataStore();
    private void ParseCustomXmlParts(Stream stream, ICustomXmlPartCollection customXmlParts, string XmlId, List`1<string> schemas);
    private string ParseCustomXmlItemProperties(Stream propertystream, List`1& schemas);
    private string ParseItemProperties(XmlReader reader, List`1& schemas);
    private void ParseschemaReference(XmlReader reader, List`1& schemas);
    private void ParseSchemaRef(XmlReader reader, List`1& schemas);
    internal void SerializeMetaStore();
    private void SerializeCustomXmlProperty(Stream itemsteam, ICustomXmlPart customXmlPart);
    public void SerializeCustomXmlPartProperty(XmlWriter writer, ICustomXmlPart customXmlPart);
    private void SerializeCustomXmlPart(Stream storage, Byte[] data);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.ArrayWrapper : object {
    private Byte[] m_arrBuffer;
    private int m_iHash;
    public ArrayWrapper(Byte[] arrBuffer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void EvaluateHash();
}
public interface Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.IPictureRecord {
    public Image Picture { get; public set; }
    public Stream PictureStream { get; public set; }
    public Byte[] RgbUid { get; }
    public abstract virtual Image get_Picture();
    public abstract virtual void set_Picture(Image value);
    public abstract virtual Stream get_PictureStream();
    public abstract virtual void set_PictureStream(Stream value);
    public abstract virtual Byte[] get_RgbUid();
}
[CLSCompliantAttribute("False")]
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoBase : BiffRecordRawWithArray {
    private static ushort DEF_VERSION_MASK;
    private static ushort DEF_INST_MASK;
    private static ushort DEF_INST_START_BIT;
    private static int DEF_MAXIMUM_RECORD_SIZE;
    protected ushort m_usVersionAndInst;
    private ushort m_usRecordType;
    private GetNextMsoDrawingData m_dataGetter;
    private MsoBase m_parent;
    private static Dictionary`2<Type, int> s_dicTypeToCode;
    public int Version { get; public set; }
    public int Instance { get; public set; }
    public MsoRecords MsoRecordType { get; public set; }
    public GetNextMsoDrawingData DataGetter { get; public set; }
    public MsoBase Parent { get; }
    public int MaximumRecordSize { get; }
    private static MsoBase();
    public MsoBase(MsoBase parent);
    public MsoBase(MsoBase parent, Byte[] data, int offset);
    public MsoBase(MsoBase parent, Byte[] data, int offset, GetNextMsoDrawingData dataGetter);
    public MsoBase(MsoBase parent, Stream stream, GetNextMsoDrawingData dataGetter);
    public int get_Version();
    public void set_Version(int value);
    public int get_Instance();
    public void set_Instance(int value);
    public MsoRecords get_MsoRecordType();
    public void set_MsoRecordType(MsoRecords value);
    public GetNextMsoDrawingData get_DataGetter();
    public void set_DataGetter(GetNextMsoDrawingData value);
    public MsoBase get_Parent();
    public virtual int FillRecord(Byte[] data, int iOffset);
    public virtual void FillArray(Stream stream);
    public virtual void FillArray(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual int get_MaximumRecordSize();
    public virtual void InfillInternalData(ExcelVersion version);
    public abstract virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public MsoBase Clone(MsoBase parent);
    protected virtual object InternalClone();
    public virtual object Clone();
    public virtual void UpdateNextMsoDrawingData();
    public abstract virtual void ParseStructure(Stream stream);
    public virtual void ParseStructure();
    public static double ConvertFromInt32(int value);
    public static void WriteInt32(Stream stream, int value);
    public static void WriteUInt32(Stream stream, UInt32 value);
    public static void WriteInt16(Stream stream, short value);
    public static void WriteUInt16(Stream stream, ushort value);
    public static int ReadInt32(Stream stream);
    public static UInt32 ReadUInt32(Stream stream);
    public static short ReadInt16(Stream stream);
    public static ushort ReadUInt16(Stream stream);
    internal void FillRecord(Stream stream);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoBitmapPicture : MsoBase {
    public static int DEF_DIB_HEADER_SIZE;
    private static Byte[] DEF_DIB_ID;
    private static Byte[] DEF_RESERVED;
    public static int DEF_COLOR_USED_OFFSET;
    private static UInt32 DEF_COLOR_SIZE;
    internal static UInt32 BlipDIBWithTwoUIDs;
    internal static UInt32 BlipPNGWithTwoUIDs;
    internal static UInt32 BlipJPEGWithTwoUIDs;
    private Byte[] m_arrRgbUid;
    private Byte[] m_arrRgbUidPrimary;
    private byte m_btTag;
    private int m_iPictureDataOffset;
    private Image m_picture;
    private Stream m_pictStream;
    private MemoryStream m_stream;
    public Image Picture { get; public set; }
    public Stream PictureStream { get; public set; }
    public Byte[] RgbUid { get; public set; }
    public byte Tag { get; public set; }
    public int PictureDataOffset { get; public set; }
    public bool IsDib { get; }
    public MsoBitmapPicture(MsoBase parent);
    public MsoBitmapPicture(MsoBase parent, Byte[] data, int iOffset);
    public MsoBitmapPicture(MsoBase parent, Stream stream);
    private static MsoBitmapPicture();
    public sealed virtual Image get_Picture();
    public sealed virtual void set_Picture(Image value);
    public sealed virtual Stream get_PictureStream();
    public sealed virtual void set_PictureStream(Stream value);
    public sealed virtual Byte[] get_RgbUid();
    public void set_RgbUid(Byte[] value);
    public byte get_Tag();
    public void set_Tag(byte value);
    public int get_PictureDataOffset();
    public void set_PictureDataOffset(int value);
    public bool get_IsDib();
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    private int LoadPrimaryUID(Stream stream);
    protected virtual object InternalClone();
    private void CreateImageStream(Stream stream, int iOffset);
    private bool HasTwoUIDs();
    private UInt32 GetDibColorsCount(Stream stream, int iOffset);
    private void EvaluateHash();
    public static void AddBitMapHeaderToStream(MemoryStream ms, int iFullSize, UInt32 uiSize, UInt32 dibColorCount);
    protected virtual void OnDispose();
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoBlipCompression : Enum {
    public int value__;
    public static MsoBlipCompression msoCompressionDeflate;
    public static MsoBlipCompression msoCompressionNone;
    public static MsoBlipCompression msoCompressionTest;
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoBlipFilter : Enum {
    public int value__;
    public static MsoBlipFilter msofilterAdaptive;
    public static MsoBlipFilter msofilterNone;
    public static MsoBlipFilter msofilterTest;
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoBlipType : Enum {
    public int value__;
    public static MsoBlipType msoblipERROR;
    public static MsoBlipType msoblipUNKNOWN;
    public static MsoBlipType msoblipEMF;
    public static MsoBlipType msoblipWMF;
    public static MsoBlipType msoblipPICT;
    public static MsoBlipType msoblipJPEG;
    public static MsoBlipType msoblipPNG;
    public static MsoBlipType msoblipDIB;
    public static MsoBlipType msoblipFirstClient;
    public static MsoBlipType msoblipLastClient;
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoBlipUsage : Enum {
    public int value__;
    public static MsoBlipUsage msoblipUsageDefault;
    public static MsoBlipUsage msoblipUsageTexture;
    public static MsoBlipUsage msoblipUsageMax;
}
[CLSCompliantAttribute("False")]
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoContainerBase : MsoBase {
    private List`1<MsoBase> m_arrItems;
    public MsoBase[] Items { get; }
    internal List`1<MsoBase> ItemsList { get; }
    public MsoContainerBase(MsoBase parent);
    public MsoContainerBase(MsoBase parent, Byte[] data, int iOffset);
    public MsoContainerBase(MsoBase parent, Byte[] data, int iOffset, GetNextMsoDrawingData dataGetter);
    private void ParseItems(Stream data, int iOffset);
    public void AddItem(MsoBase itemToAdd);
    public void AddItems(ICollection`1<MsoBase> items);
    public MsoBase[] get_Items();
    internal List`1<MsoBase> get_ItemsList();
    public virtual void ParseStructure(Stream stream);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    protected virtual object InternalClone();
}
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoDrawingAttribute : Attribute {
    private MsoRecords m_recordType;
    public MsoRecords RecordType { get; }
    public MsoDrawingAttribute(MsoRecords recordType);
    public MsoRecords get_RecordType();
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoFactory : object {
    private static Dictionary`2<int, MsoBase> m_hashCodeToMSORecord;
    private static MsoFactory();
    public static MsoBase CreateMsoRecord(MsoBase parent, MsoRecords recordType, Byte[] data, Int32& iOffset);
    public static MsoBase CreateMsoRecord(MsoBase parent, MsoRecords recordType, Byte[] data, Int32& iOffset, GetNextMsoDrawingData dataGetter);
    public static MsoBase CreateMsoRecord(MsoBase parent, Byte[] data, Int32& iOffset);
    public static MsoBase CreateMsoRecord(MsoBase parent, Byte[] data, Int32& iOffset, GetNextMsoDrawingData dataGetter);
    public static MsoBase CreateMsoRecord(MsoBase parent, Stream stream);
    public static MsoBase CreateMsoRecord(MsoBase parent, MsoRecords recordType, Stream stream);
    public static MsoBase CreateMsoRecord(MsoBase parent, Stream stream, GetNextMsoDrawingData dataGetter);
    public static MsoBase CreateMsoRecord(MsoBase parent, MsoRecords recordType, Stream stream, GetNextMsoDrawingData dataGetter);
    public static MsoBase GetRecord(MsoRecords type);
    private static void RegisterType(Type type, MsoDrawingAttribute[] attributes);
    private static void RegisterAllTypes();
}
[MsoDrawingAttribute("61454")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtAnchor : MsoBase {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iLeft;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iTop;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iRight;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iBottom;
    public int Left { get; public set; }
    public int Top { get; public set; }
    public int Right { get; public set; }
    public int Bottom { get; public set; }
    public MsofbtAnchor(MsoBase parent);
    public MsofbtAnchor(MsoBase parent, Byte[] data, int iOffset);
    public int get_Left();
    public void set_Left(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    public virtual int GetStoreSize(ExcelVersion version);
}
[MsoDrawingAttribute("61447")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtBSE : MsoBase {
    private static int DEF_NAME_OFFSET;
    private static MsoBlipType[] DEF_BITMAP_BLIPS;
    private static MsoBlipType[] DEF_PICT_BLIPS;
    [BiffRecordPosAttribute("0", "1")]
private byte m_btReqWin32;
    [BiffRecordPosAttribute("1", "1")]
private byte m_btReqMac;
    [BiffRecordPosAttribute("20", "4")]
private UInt32 m_uiSize;
    [BiffRecordPosAttribute("24", "4")]
private UInt32 m_uiRefCount;
    [BiffRecordPosAttribute("28", "4")]
private UInt32 m_uiFileOffset;
    [BiffRecordPosAttribute("32", "1")]
private byte m_btUsage;
    [BiffRecordPosAttribute("33", "1")]
private byte m_btNameLength;
    [BiffRecordPosAttribute("34", "1")]
private byte m_btUnused1;
    [BiffRecordPosAttribute("35", "1")]
private byte m_btUnused2;
    private string m_strBlipName;
    private MsoBase m_msoPicture;
    private int m_iIndex;
    private string m_strPicturePath;
    public byte RequiredWin32 { get; public set; }
    public byte RequiredMac { get; public set; }
    public string BlipName { get; public set; }
    public UInt32 SizeInStream { get; public set; }
    public UInt32 RefCount { get; public set; }
    public UInt32 FileOffset { get; public set; }
    public MsoBlipUsage BlipUsage { get; public set; }
    public byte NameLength { get; }
    public byte Unused1 { get; }
    public byte Unused2 { get; }
    public MsoBlipType BlipType { get; public set; }
    public IPictureRecord PictureRecord { get; public set; }
    public bool NeedDataArray { get; }
    public int Index { get; public set; }
    public string PicturePath { get; public set; }
    public MsofbtBSE(MsoBase parent);
    public MsofbtBSE(MsoBase parent, Byte[] data, int iOffset);
    private static MsofbtBSE();
    protected virtual void OnDispose();
    public void Dispose();
    public byte get_RequiredWin32();
    public void set_RequiredWin32(byte value);
    public byte get_RequiredMac();
    public void set_RequiredMac(byte value);
    public string get_BlipName();
    public void set_BlipName(string value);
    public UInt32 get_SizeInStream();
    public void set_SizeInStream(UInt32 value);
    public UInt32 get_RefCount();
    public void set_RefCount(UInt32 value);
    public UInt32 get_FileOffset();
    public void set_FileOffset(UInt32 value);
    public MsoBlipUsage get_BlipUsage();
    public void set_BlipUsage(MsoBlipUsage value);
    public byte get_NameLength();
    public byte get_Unused1();
    public byte get_Unused2();
    public MsoBlipType get_BlipType();
    public void set_BlipType(MsoBlipType value);
    public IPictureRecord get_PictureRecord();
    public void set_PictureRecord(IPictureRecord value);
    public virtual bool get_NeedDataArray();
    public int get_Index();
    public void set_Index(int value);
    public string get_PicturePath();
    public void set_PicturePath(string value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    protected virtual object InternalClone();
    public static ImageFormat ConvertToImageFormat(MsoBlipType blipType);
}
[MsoDrawingAttribute("61441")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtBstoreContainer : MsoContainerBase {
    private static int DEF_VERSION;
    private static int DEF_INSTANCE;
    public MsofbtBstoreContainer(MsoBase parent);
    public MsofbtBstoreContainer(MsoBase parent, Byte[] data, int iOffset);
    public MsofbtBstoreContainer(MsoBase parent, Byte[] data, int iOffset, GetNextMsoDrawingData dataGetter);
    protected virtual void OnDispose();
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
}
[MsoDrawingAttribute("61455")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtChildAnchor : MsoBase {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iLeft;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iTop;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iRight;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iBottom;
    public int Left { get; public set; }
    public int Top { get; public set; }
    public int Right { get; public set; }
    public int Bottom { get; public set; }
    public MsofbtChildAnchor(MsoBase parent);
    public MsofbtChildAnchor(MsoBase parent, Byte[] data, int iOffset);
    public int get_Left();
    public void set_Left(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
}
[MsoDrawingAttribute("61456")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtClientAnchor : MsoBase {
    private static UInt32 DEF_CELL_MASK;
    private static UInt32 DEF_OFFSET_MASK;
    private static int DEF_OFFSET_START_BIT;
    private static int DEF_SHORT_LENGTH;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bNotMoveWithCell;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bNotSizeWithCell;
    [BiffRecordPosAttribute("2", "4")]
private UInt32 m_uiLeft;
    [BiffRecordPosAttribute("10", "4")]
private UInt32 m_uiRight;
    private bool m_bShortVersion;
    private int m_iTopRow;
    private int m_iTopOffset;
    private int m_iBottomRow;
    private int m_iBottomOffset;
    private bool m_bOneCellAnchor;
    public ushort Options { get; public set; }
    public bool IsSizeWithCell { get; public set; }
    public bool IsMoveWithCell { get; public set; }
    public int LeftColumn { get; public set; }
    public int RightColumn { get; public set; }
    public int TopRow { get; public set; }
    public int BottomRow { get; public set; }
    public int LeftOffset { get; public set; }
    public int TopOffset { get; public set; }
    public int RightOffset { get; public set; }
    public int BottomOffset { get; public set; }
    public bool IsShortVersion { get; public set; }
    public bool OneCellAnchor { get; public set; }
    public MsofbtClientAnchor(MsoBase parent);
    public MsofbtClientAnchor(MsoBase parent, Byte[] data, int iOffset);
    public ushort get_Options();
    public void set_Options(ushort value);
    public bool get_IsSizeWithCell();
    public void set_IsSizeWithCell(bool value);
    public bool get_IsMoveWithCell();
    public void set_IsMoveWithCell(bool value);
    public int get_LeftColumn();
    public void set_LeftColumn(int value);
    public int get_RightColumn();
    public void set_RightColumn(int value);
    public int get_TopRow();
    public void set_TopRow(int value);
    public int get_BottomRow();
    public void set_BottomRow(int value);
    public int get_LeftOffset();
    public void set_LeftOffset(int value);
    public int get_TopOffset();
    public void set_TopOffset(int value);
    public int get_RightOffset();
    public void set_RightOffset(int value);
    public int get_BottomOffset();
    public void set_BottomOffset(int value);
    public bool get_IsShortVersion();
    public void set_IsShortVersion(bool value);
    public bool get_OneCellAnchor();
    public void set_OneCellAnchor(bool value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual bool Equals(object obj);
}
[MsoDrawingAttribute("61457")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtClientData : MsoBase {
    private List`1<BiffRecordRaw> m_arrAdditionalData;
    public OBJRecord ObjectRecord { get; public set; }
    public BiffRecordRaw[] AdditionalData { get; }
    public MsofbtClientData(MsoBase parent);
    public MsofbtClientData(MsoBase parent, Byte[] data, int iOffset);
    public MsofbtClientData(MsoBase parent, Byte[] data, int iOffset, GetNextMsoDrawingData dataGetter);
    public OBJRecord get_ObjectRecord();
    public void set_ObjectRecord(OBJRecord value);
    public BiffRecordRaw[] get_AdditionalData();
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    protected virtual object InternalClone();
    public virtual void UpdateNextMsoDrawingData();
    public void AddRecord(BiffRecordRaw record);
    public void AddRecordRange(ICollection`1<BiffRecordRaw> records);
    public void AddRecordRange(IList records);
}
[MsoDrawingAttribute("61453")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtClientTextBox : MsoBase {
    private List`1<BiffRecordRaw> m_arrAdditionalData;
    public TextObjectRecord TextObject { get; public set; }
    public string Text { get; }
    public Byte[] FormattingRuns { get; }
    public BiffRecordRaw[] AdditionalData { get; }
    public MsofbtClientTextBox(MsoBase parent);
    public MsofbtClientTextBox(MsoBase parent, Byte[] data, int iOffset);
    public MsofbtClientTextBox(MsoBase parent, Byte[] data, int iOffset, GetNextMsoDrawingData dataGetter);
    public TextObjectRecord get_TextObject();
    public void set_TextObject(TextObjectRecord value);
    public string get_Text();
    private string CombineAndExtractText(int startIndex, int afterEndIndex);
    public Byte[] get_FormattingRuns();
    public BiffRecordRaw[] get_AdditionalData();
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    protected virtual object InternalClone();
    public virtual void UpdateNextMsoDrawingData();
    public void AddRecord(BiffRecordRaw record);
}
[MsoDrawingAttribute("61448")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtDg : MsoBase {
    private static int DEF_INSTANCE;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4")]
private UInt32 m_uiShapesNumber;
    [BiffRecordPosAttribute("4", "4")]
private int m_iLastId;
    public UInt32 ShapesNumber { get; public set; }
    public int LastId { get; public set; }
    public MsofbtDg(MsoBase parent);
    public MsofbtDg(MsoBase parent, Byte[] data, int iOffset);
    public UInt32 get_ShapesNumber();
    public void set_ShapesNumber(UInt32 value);
    public int get_LastId();
    public void set_LastId(int value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    public virtual int GetStoreSize(ExcelVersion version);
}
[MsoDrawingAttribute("61442")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtDgContainer : MsoContainerBase {
    private static int DEF_VERSION;
    public MsofbtDgContainer(MsoBase parent);
    public MsofbtDgContainer(MsoBase parent, Byte[] data, int iOffset);
    public MsofbtDgContainer(MsoBase parent, Byte[] data, int iOffset, GetNextMsoDrawingData dataGetter);
}
[MsoDrawingAttribute("61446")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtDgg : MsoBase {
    private static int DEF_ARRAY_OFFSET;
    [BiffRecordPosAttribute("0", "4")]
private UInt32 m_uiIdMax;
    [BiffRecordPosAttribute("4", "4")]
private UInt32 m_uiNumberOfIdClus;
    [BiffRecordPosAttribute("8", "4")]
private UInt32 m_uiTotalShapes;
    [BiffRecordPosAttribute("12", "4")]
private UInt32 m_uiTotalDrawings;
    private List`1<ClusterID> m_arrClusters;
    public UInt32 IdMax { get; public set; }
    public UInt32 NumberOfIdClus { get; }
    public UInt32 TotalShapes { get; public set; }
    public UInt32 TotalDrawings { get; public set; }
    public ClusterID[] ClusterIDs { get; }
    public MsofbtDgg(MsoBase parent);
    public MsofbtDgg(MsoBase parent, Byte[] data, int iOffset);
    public UInt32 get_IdMax();
    public void set_IdMax(UInt32 value);
    public UInt32 get_NumberOfIdClus();
    public UInt32 get_TotalShapes();
    public void set_TotalShapes(UInt32 value);
    public UInt32 get_TotalDrawings();
    public void set_TotalDrawings(UInt32 value);
    public ClusterID[] get_ClusterIDs();
    public virtual void ParseStructure(Stream stream);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    protected virtual object InternalClone();
    public void AddCluster(UInt32 uiGroupId, UInt32 uiNumber);
}
[MsoDrawingAttribute("61440")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtDggContainer : MsoContainerBase {
    private static int DEF_VERSION;
    public MsofbtDggContainer(MsoBase parent);
    public MsofbtDggContainer(MsoBase parent, Byte[] data, int iOffset);
    public MsofbtDggContainer(MsoBase parent, Byte[] data, int iOffset, GetNextMsoDrawingData dataGetter);
    protected virtual void OnDispose();
}
[DefaultMemberAttribute("Item")]
[MsoDrawingAttribute("61451")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtOPT : MsoBase {
    private static int DEF_MINOPTION_INDEX;
    private List`1<FOPTE> m_arrProperties;
    public FOPTE[] Properties { get; }
    public FOPTE Item { get; }
    public IList`1<FOPTE> PropertyList { get; }
    public MsofbtOPT(MsoBase parent);
    public MsofbtOPT(MsoBase parent, Byte[] data, int iOffset);
    public virtual void ParseStructure(Stream stream);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual object Clone();
    protected virtual object InternalClone();
    public FOPTE[] get_Properties();
    public FOPTE get_Item(int index);
    public IList`1<FOPTE> get_PropertyList();
    public void AddOptions(FOPTE option);
    public void AddOptions(ICollection options);
    public void AddOptionsOrReplace(FOPTE option);
    public sealed virtual void AddOptionSorted(FOPTE option);
    private int IndexOf(FOPTE option);
    public sealed virtual void RemoveOption(int index);
    public int IndexOf(MsoOptions optionId);
}
[MsoDrawingAttribute("61720")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtRegroupItems : MsoBase {
    private Byte[] m_arrData;
    public MsofbtRegroupItems(MsoBase parent);
    public MsofbtRegroupItems(MsoBase parent, Byte[] data, int iOffset);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
}
[MsoDrawingAttribute("61450")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtSp : MsoBase {
    private static int DEF_VERSION;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iShapeId;
    [BiffRecordPosAttribute("4", "4")]
private UInt32 m_uiOptions;
    [BiffRecordPosAttribute("4", "0", "1")]
private bool m_bGroup;
    [BiffRecordPosAttribute("4", "1", "1")]
private bool m_bChild;
    [BiffRecordPosAttribute("4", "2", "1")]
private bool m_bPatriarch;
    [BiffRecordPosAttribute("4", "3", "1")]
private bool m_bDeleted;
    [BiffRecordPosAttribute("4", "4", "1")]
private bool m_bOleShape;
    [BiffRecordPosAttribute("4", "5", "1")]
private bool m_bHaveMaster;
    [BiffRecordPosAttribute("4", "6", "1")]
private bool m_bFlipH;
    [BiffRecordPosAttribute("4", "7", "1")]
private bool m_bFlipV;
    [BiffRecordPosAttribute("5", "0", "1")]
private bool m_bConnector;
    [BiffRecordPosAttribute("5", "1", "1")]
private bool m_bHaveAnchor;
    [BiffRecordPosAttribute("5", "2", "1")]
private bool m_bBackground;
    [BiffRecordPosAttribute("5", "3", "1")]
private bool m_bHaveSpt;
    public int ShapeId { get; public set; }
    public UInt32 Options { get; }
    public bool IsGroup { get; public set; }
    public bool IsChild { get; public set; }
    public bool IsPatriarch { get; public set; }
    public bool IsDeleted { get; public set; }
    public bool IsOleShape { get; public set; }
    public bool IsHaveMaster { get; public set; }
    public bool IsFlipH { get; public set; }
    public bool IsFlipV { get; public set; }
    public bool IsConnector { get; public set; }
    public bool IsHaveAnchor { get; public set; }
    public bool IsBackground { get; public set; }
    public bool IsHaveSpt { get; public set; }
    public MsofbtSp(MsoBase parent);
    public MsofbtSp(MsoBase parent, Byte[] data, int iOffset);
    public int get_ShapeId();
    public void set_ShapeId(int value);
    public UInt32 get_Options();
    public bool get_IsGroup();
    public void set_IsGroup(bool value);
    public bool get_IsChild();
    public void set_IsChild(bool value);
    public bool get_IsPatriarch();
    public void set_IsPatriarch(bool value);
    public bool get_IsDeleted();
    public void set_IsDeleted(bool value);
    public bool get_IsOleShape();
    public void set_IsOleShape(bool value);
    public bool get_IsHaveMaster();
    public void set_IsHaveMaster(bool value);
    public bool get_IsFlipH();
    public void set_IsFlipH(bool value);
    public bool get_IsFlipV();
    public void set_IsFlipV(bool value);
    public bool get_IsConnector();
    public void set_IsConnector(bool value);
    public bool get_IsHaveAnchor();
    public void set_IsHaveAnchor(bool value);
    public bool get_IsBackground();
    public void set_IsBackground(bool value);
    public bool get_IsHaveSpt();
    public void set_IsHaveSpt(bool value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    public virtual int GetStoreSize(ExcelVersion version);
}
[MsoDrawingAttribute("61444")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtSpContainer : MsoContainerBase {
    private static int DEF_VERSION;
    public MsofbtSpContainer(MsoBase parent);
    public MsofbtSpContainer(MsoBase parent, Byte[] data, int iOffset);
    public MsofbtSpContainer(MsoBase parent, Byte[] data, int iOffset, GetNextMsoDrawingData dataGetter);
}
[MsoDrawingAttribute("61449")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtSpgr : MsoBase {
    private static int DEF_VERSION;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iLeft;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iTop;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iRight;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_iBottom;
    public int Left { get; public set; }
    public int Top { get; public set; }
    public int Right { get; public set; }
    public int Bottom { get; public set; }
    public MsofbtSpgr(MsoBase parent);
    public MsofbtSpgr(MsoBase parent, Byte[] data, int iOffset);
    public int get_Left();
    public void set_Left(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
}
[MsoDrawingAttribute("61443")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtSpgrContainer : MsoContainerBase {
    private static int DEF_VERSION;
    public MsofbtSpgrContainer(MsoBase parent);
    public MsofbtSpgrContainer(MsoBase parent, Byte[] data, int iOffset);
    public MsofbtSpgrContainer(MsoBase parent, Byte[] data, int iOffset, GetNextMsoDrawingData dataGetter);
}
[MsoDrawingAttribute("61726")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsofbtSplitMenuColors : MsoBase {
    private static int RecordSize;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iFillColor;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iLineColor;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iShadowColor;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_i3DColor;
    public int FillColor { get; public set; }
    public int LineColor { get; public set; }
    public int ShadowColor { get; public set; }
    public int Color3D { get; public set; }
    public MsofbtSplitMenuColors(MsoBase parent);
    public MsofbtSplitMenuColors(MsoBase parent, Byte[] data, int iOffset);
    public int get_FillColor();
    public void set_FillColor(int value);
    public int get_LineColor();
    public void set_LineColor(int value);
    public int get_ShadowColor();
    public void set_ShadowColor(int value);
    public int get_Color3D();
    public void set_Color3D(int value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoMetafilePicture : MsoBase {
    private static int DEF_BUFFER_SIZE;
    private static int DEF_UID_OFFSET;
    private static int DEF_METAFILE_SIZE_OFFSET;
    private static int DEF_COMPRESSED_SIZE_OFFSET;
    internal static UInt32 BlipEMFWithTwoUIDs;
    internal static UInt32 BlipWMFWithTwoUIDs;
    internal static UInt32 BlipPICTWithTwoUIDs;
    internal static UInt32 BlipTIFFWithTwoUIDs;
    private MemoryStream m_stream;
    private Byte[] m_arrCompressedPicture;
    private Byte[] m_arrRgbUid;
    private Byte[] m_arrRgbUidPrimary;
    private int m_iMetafileSize;
    private Rectangle m_rcBounds;
    private Point m_ptSize;
    private int m_iSavedSize;
    private MsoBlipCompression m_compression;
    private MsoBlipFilter m_filter;
    private Image m_picture;
    private Stream m_pictStream;
    public Image Picture { get; public set; }
    public Stream PictureStream { get; public set; }
    public Byte[] RgbUid { get; public set; }
    public MsoMetafilePicture(MsoBase parent);
    public MsoMetafilePicture(MsoBase parent, Byte[] data, int iOffset);
    public MsoMetafilePicture(MsoBase parent, Stream stream);
    public sealed virtual Image get_Picture();
    public sealed virtual void set_Picture(Image value);
    public sealed virtual Stream get_PictureStream();
    public sealed virtual void set_PictureStream(Stream value);
    public sealed virtual Byte[] get_RgbUid();
    public void set_RgbUid(Byte[] value);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual void ParseStructure(Stream stream);
    private bool HasTwoUIDs();
    private int LoadPrimaryUID(Stream stream);
    public static MemoryStream SerializeMetafile(Image picture);
    private Byte[] CompressMetafile(Stream metaFile, int iDataOffset);
    protected virtual object InternalClone();
    protected virtual void OnDispose();
    protected virtual override void Finalize();
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoOptions : Enum {
    public int value__;
    public static MsoOptions LockAgainstGrouping;
    public static MsoOptions TextId;
    public static MsoOptions WrapText;
    public static MsoOptions TextDirection;
    public static MsoOptions SizeTextToFitShape;
    public static MsoOptions BlipId;
    public static MsoOptions BlipName;
    public static MsoOptions FillType;
    public static MsoOptions CropFromTop;
    public static MsoOptions CropFromBottom;
    public static MsoOptions CropFromLeft;
    public static MsoOptions CropFromRight;
    public static MsoOptions PictureId;
    public static MsoOptions ForeColor;
    public static MsoOptions Transparency;
    public static MsoOptions BackColor;
    public static MsoOptions GradientTransparency;
    public static MsoOptions PatternTexture;
    public static MsoOptions PattTextName;
    public static MsoOptions ShadStyle;
    public static MsoOptions ShadVariant;
    public static MsoOptions ShadingStyleCorner_1;
    public static MsoOptions ShadingStyleCorner_2;
    public static MsoOptions ShadingStyleCorner_3;
    public static MsoOptions ShadingStyleCorner_4;
    public static MsoOptions PresetGradientData;
    public static MsoOptions GradientColorType;
    public static MsoOptions NoFillHitTest;
    public static MsoOptions LineColor;
    public static MsoOptions LineTransparency;
    public static MsoOptions LineWeight;
    public static MsoOptions LineBackColor;
    public static MsoOptions ContainLinePattern;
    public static MsoOptions LinePattern;
    public static MsoOptions LineStyle;
    public static MsoOptions LineDashStyle;
    public static MsoOptions LineStartArrow;
    public static MsoOptions LineEndArrow;
    public static MsoOptions StartArrowWidth;
    public static MsoOptions StartArrowLength;
    public static MsoOptions EndArrowWidth;
    public static MsoOptions EndArrowLength;
    public static MsoOptions ContainRoundDot;
    public static MsoOptions NoLineDrawDash;
    public static MsoOptions ForeShadowColor;
    public static MsoOptions ShadowObscured;
    public static MsoOptions ShapeName;
    public static MsoOptions AlternativeText;
    public static MsoOptions CommentShowAlways;
}
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoRecordFactory : object {
    private static Dictionary`2<int, MsoBase> m_hashTypes;
    private static MsoRecordFactory();
    private static void TryRegisterType(Type type);
    [CLSCompliantAttribute("False")]
public static MsoBase GetRecord(MsoRecords type);
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoRecords : Enum {
    public int value__;
    public static MsoRecords msofbtDggContainer;
    public static MsoRecords msofbtDgg;
    public static MsoRecords msofbtCLSID;
    public static MsoRecords msofbtOPT;
    public static MsoRecords msofbtColorMRU;
    public static MsoRecords msofbtSplitMenuColors;
    public static MsoRecords msofbtBstoreContainer;
    public static MsoRecords msofbtBSE;
    public static MsoRecords msofbtDgContainer;
    public static MsoRecords msofbtDg;
    public static MsoRecords msofbtRegroupItems;
    public static MsoRecords msofbtColorScheme;
    public static MsoRecords msofbtSpgrContainer;
    public static MsoRecords msofbtSpContainer;
    public static MsoRecords msofbtSpgr;
    public static MsoRecords msofbtSp;
    public static MsoRecords msofbtTextbox;
    public static MsoRecords msofbtClientTextbox;
    public static MsoRecords msofbtAnchor;
    public static MsoRecords msofbtChildAnchor;
    public static MsoRecords msofbtClientAnchor;
    public static MsoRecords msofbtClientData;
    public static MsoRecords msofbtOleObject;
    public static MsoRecords msofbtDeletedPspl;
    public static MsoRecords msofbtSolverContainer;
    public static MsoRecords msofbtConnectorRule;
    public static MsoRecords msofbtAlignRule;
    public static MsoRecords msofbtArcRule;
    public static MsoRecords msofbtClientRule;
    public static MsoRecords msofbtCalloutRule;
    public static MsoRecords msofbtSelection;
    public static MsoRecords msoUnknown;
}
[MsoDrawingAttribute("65535")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MsoDrawing.MsoUnknown : MsoBase {
    public bool NeedDataArray { get; }
    public MsoUnknown(MsoBase parent);
    public MsoUnknown(MsoBase parent, Byte[] data, int iOffset);
    public virtual void ParseStructure(Stream stream);
    public virtual void InfillInternalData(Stream stream, int iOffset, List`1<int> arrBreaks, List`1<List`1<BiffRecordRaw>> arrRecords);
    public virtual bool get_NeedDataArray();
}
[BiffAttribute("235")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MSODrawingGroupRecord : BiffContinueRecordRaw {
    private static int DEF_DATA_OFFSET;
    protected Byte[] m_tempData;
    protected List`1<MsoBase> m_arrStructures;
    public MsoBase[] Structures { get; }
    public List`1<MsoBase> StructuresList { get; }
    public bool NeedDataArray { get; }
    protected int StructuresOffset { get; }
    public MSODrawingGroupRecord(Stream stream, Int32& itemSize);
    public MSODrawingGroupRecord(int iReserve);
    protected virtual void OnDispose();
    public MsoBase[] get_Structures();
    public List`1<MsoBase> get_StructuresList();
    public virtual bool get_NeedDataArray();
    protected virtual int get_StructuresOffset();
    public virtual void ParseStructure();
    protected virtual void ParseData();
    public virtual void InfillInternalData(ExcelVersion version);
    protected virtual Stream CreateDataList(Int32& iStartIndex);
    protected void FillDataList(Stream stream, int iStartIndex);
    public virtual int GetStoreSize(ExcelVersion version);
    public void AddStructure(MsoBase item);
    protected virtual ContinueRecordBuilder CreateBuilder();
    public sealed virtual object Clone();
}
[BiffAttribute("236")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MSODrawingRecord : BiffRecordRawWithArray {
    public int RecordLength { get; public set; }
    public bool NeedDataArray { get; }
    public MSODrawingRecord(Stream stream, Int32& itemSize);
    public MSODrawingRecord(int iReserve);
    public int get_RecordLength();
    public void set_RecordLength(int value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual bool get_NeedDataArray();
    public void SetData(int length, Byte[] data);
    public sealed virtual void SetLength(int iLength);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("190")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MulBlankRecord : CellPositionBase {
    public static int DEF_FIXED_SIZE;
    private static int DEF_MINIMUM_SIZE;
    public static int DEF_SUB_ITEM_SIZE;
    private List`1<ushort> m_arrExtFormatIndexes;
    private int m_iLastCol;
    public int FirstColumn { get; public set; }
    public List`1<ushort> ExtendedFormatIndexes { get; public set; }
    public int LastColumn { get; public set; }
    public int MinimumRecordSize { get; }
    public int SubRecordSize { get; }
    public TBIFFRecord SubRecordType { get; }
    public sealed virtual int get_FirstColumn();
    public sealed virtual void set_FirstColumn(int value);
    public List`1<ushort> get_ExtendedFormatIndexes();
    public void set_ExtendedFormatIndexes(List`1<ushort> value);
    public sealed virtual int get_LastColumn();
    public sealed virtual void set_LastColumn(int value);
    public virtual int get_MinimumRecordSize();
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    private void InternalDataIntegrityCheck();
    public BlankRecord GetBlankRecord(int iColumnIndex);
    public virtual int GetStoreSize(ExcelVersion version);
    public static void IncreaseLastColumn(DataProvider provider, int recordStart, int iLength, ExcelVersion version, int columnDelta);
    public sealed virtual int GetSeparateSubRecordSize(ExcelVersion version);
    public sealed virtual int get_SubRecordSize();
    public sealed virtual TBIFFRecord get_SubRecordType();
    public sealed virtual void Insert(ICellPositionFormat cell);
    public sealed virtual ICellPositionFormat[] Split(int iColumnIndex);
    private ICellPositionFormat CreateRecord(int iFirstCol, int iLastCol);
    private ICellPositionFormat CreateBlankRecord(int iColumnIndex);
    public sealed virtual BiffRecordRaw[] Split(bool bIgnoreStyles);
}
[BiffAttribute("189")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.MulRKRecord : CellPositionBase {
    public static int DEF_FIXED_SIZE;
    public static int DEF_SUB_ITEM_SIZE;
    private List`1<RkRec> m_arrRKs;
    private int m_iLastCol;
    public int FirstColumn { get; public set; }
    public int LastColumn { get; public set; }
    public List`1<RkRec> Records { get; public set; }
    public int MinimumRecordSize { get; }
    public int SubRecordSize { get; }
    public TBIFFRecord SubRecordType { get; }
    public sealed virtual int get_FirstColumn();
    public sealed virtual void set_FirstColumn(int value);
    public sealed virtual int get_LastColumn();
    public sealed virtual void set_LastColumn(int value);
    public List`1<RkRec> get_Records();
    public void set_Records(List`1<RkRec> value);
    public virtual int get_MinimumRecordSize();
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual int GetSeparateSubRecordSize(ExcelVersion version);
    public sealed virtual int get_SubRecordSize();
    public sealed virtual TBIFFRecord get_SubRecordType();
    public sealed virtual void Insert(ICellPositionFormat cell);
    private void MergeRecords(MulRKRecord mulRK);
    public void InsertSubRecord(ICellPositionFormat cell);
    private RkRec CreateSubRecord(RKRecord rk);
    public sealed virtual ICellPositionFormat[] Split(int iColumnIndex);
    private ICellPositionFormat CreateRecord(int iFirstCol, int iLastCol);
    private ICellPositionFormat CreateRkRecord(int iColumnIndex);
    public sealed virtual BiffRecordRaw[] Split(bool bIgnoreStyles);
}
[BiffAttribute("24")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.NameRecord : BiffRecordRaw {
    public static ushort FunctionGroupBitMask;
    public static String[] PREDEFINED_NAMES;
    private static int DEF_FIXED_PART_SIZE;
    private static string XLNM_ExtensionName;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bNameHidden;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bNameFunction;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bNameCommand;
    [BiffRecordPosAttribute("0", "3", "1")]
private bool m_bFCMacro;
    [BiffRecordPosAttribute("0", "4", "1")]
private bool m_bComplexFunction;
    [BiffRecordPosAttribute("0", "5", "1")]
private bool m_bBuinldInName;
    [BiffRecordPosAttribute("1", "4", "1")]
private bool m_bBinaryData;
    [BiffRecordPosAttribute("2", "1")]
private byte m_bKeyboardShortcut;
    [BiffRecordPosAttribute("3", "1")]
private byte m_bNameLength;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usFormulaDataSize;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usIndexOrGlobal;
    [BiffRecordPosAttribute("10", "1")]
private byte m_bMenuTextLength;
    [BiffRecordPosAttribute("11", "1")]
private byte m_bDescriptionLength;
    [BiffRecordPosAttribute("12", "1")]
private byte m_bHelpTextLength;
    [BiffRecordPosAttribute("13", "1")]
private byte m_bStatusTextLength;
    private string m_strName;
    private Byte[] m_arrFormulaData;
    private string m_strMenuText;
    private string m_strDescription;
    private string m_strHelpText;
    private string m_strStatusText;
    private Ptg[] m_arrToken;
    public bool IsNameHidden { get; public set; }
    public bool IsNameFunction { get; public set; }
    public bool IsNameCommand { get; public set; }
    public bool IsFunctionOrCommandMacro { get; public set; }
    public bool IsComplexFunction { get; public set; }
    public bool IsBuinldInName { get; public set; }
    public bool HasBinaryData { get; public set; }
    public ushort FunctionGroupIndex { get; public set; }
    public byte KeyboardShortcut { get; public set; }
    public byte NameLength { get; }
    public ushort FormulaDataSize { get; }
    public ushort IndexOrGlobal { get; public set; }
    public byte MenuTextLength { get; }
    public byte DescriptionLength { get; }
    public byte HelpTextLength { get; }
    public byte StatusTextLength { get; }
    public string Name { get; public set; }
    public Ptg[] FormulaTokens { get; public set; }
    public string MenuText { get; public set; }
    public string Description { get; public set; }
    public string HelpText { get; public set; }
    public string StatusText { get; public set; }
    public ushort Reserved { get; }
    public int MinimumRecordSize { get; }
    public NameRecord(Stream stream, Int32& itemSize);
    public NameRecord(int iReserve);
    private static NameRecord();
    public bool get_IsNameHidden();
    public void set_IsNameHidden(bool value);
    public bool get_IsNameFunction();
    public void set_IsNameFunction(bool value);
    public bool get_IsNameCommand();
    public void set_IsNameCommand(bool value);
    public bool get_IsFunctionOrCommandMacro();
    public void set_IsFunctionOrCommandMacro(bool value);
    public bool get_IsComplexFunction();
    public void set_IsComplexFunction(bool value);
    public bool get_IsBuinldInName();
    public void set_IsBuinldInName(bool value);
    public bool get_HasBinaryData();
    public void set_HasBinaryData(bool value);
    public ushort get_FunctionGroupIndex();
    public void set_FunctionGroupIndex(ushort value);
    public byte get_KeyboardShortcut();
    public void set_KeyboardShortcut(byte value);
    public byte get_NameLength();
    public ushort get_FormulaDataSize();
    public ushort get_IndexOrGlobal();
    public void set_IndexOrGlobal(ushort value);
    public byte get_MenuTextLength();
    public byte get_DescriptionLength();
    public byte get_HelpTextLength();
    public byte get_StatusTextLength();
    public string get_Name();
    public void set_Name(string value);
    public Ptg[] get_FormulaTokens();
    public void set_FormulaTokens(Ptg[] value);
    public string get_MenuText();
    public void set_MenuText(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_HelpText();
    public void set_HelpText(string value);
    public string get_StatusText();
    public void set_StatusText(string value);
    public ushort get_Reserved();
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private void InfillFixedPart(DataProvider provider, int iOffset);
    private void ParseFixedPart(DataProvider provider, int iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
    private int GetByteCount(string strValue);
    public static bool IsPredefinedName(string value);
    public static int PredefinedIndex(string value);
    public virtual object Clone();
    public virtual void ClearData();
    internal void Delete();
}
[BiffAttribute("28")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.NoteRecord : BiffRecordRaw {
    private static int DEF_FIXED_PART_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRow;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usColumn;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("4", "1", "1")]
private bool m_bShow;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usObjId;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usAuthorNameLen;
    private string m_strAuthorName;
    public ushort Row { get; public set; }
    public ushort Column { get; public set; }
    public string AuthorName { get; public set; }
    public ushort ObjId { get; public set; }
    public bool IsVisible { get; public set; }
    public ushort Reserved { get; }
    public int MinimumRecordSize { get; }
    public NoteRecord(Stream stream, Int32& itemSize);
    public NoteRecord(int iReserve);
    public ushort get_Row();
    public void set_Row(ushort value);
    public ushort get_Column();
    public void set_Column(ushort value);
    public string get_AuthorName();
    public void set_AuthorName(string value);
    public ushort get_ObjId();
    public void set_ObjId(ushort value);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public ushort get_Reserved();
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("515")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.NumberRecord : CellPositionBase {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("6", "8", "6")]
private double m_dbValue;
    public double Value { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public int MaximumMemorySize { get; }
    public double DoubleValue { get; }
    private object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.Value { get; private set; }
    public double get_Value();
    public void set_Value(double value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual int get_MaximumMemorySize();
    public sealed virtual double get_DoubleValue();
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public static double ReadValue(DataProvider provider, int recordStart, ExcelVersion version);
    private sealed virtual override object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.get_Value();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.set_Value(object value);
}
[BiffAttribute("99")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjectProtectRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usProtect;
    public bool IsProtected { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ObjectProtectRecord(Stream stream, Int32& itemSize);
    public ObjectProtectRecord(int iReserve);
    public bool get_IsProtected();
    public void set_IsProtected(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("93")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.OBJRecord : BiffRecordRaw {
    private List`1<ObjSubRecord> m_records;
    public ObjSubRecord[] Records { get; }
    public List`1<ObjSubRecord> RecordsList { get; }
    public bool NeedDataArray { get; }
    public OBJRecord(Stream stream, Int32& itemSize);
    public OBJRecord(int iReserve);
    public ObjSubRecord[] get_Records();
    public List`1<ObjSubRecord> get_RecordsList();
    public virtual bool get_NeedDataArray();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    protected ObjSubRecord GetSubRecord(DataProvider provider, int offset, int iStartOffset, TObjType objectType);
    public void AddSubRecord(ObjSubRecord record);
    public ObjSubRecord FindSubRecord(TObjSubRecordType recordType);
    public int FindSubRecordIndex(TObjSubRecordType recordType);
    public sealed virtual object Clone();
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftCbls : ObjSubRecord {
    private byte m_btChecked;
    public ExcelCheckState CheckState { get; public set; }
    public ftCbls(TObjSubRecordType type, ushort length, Byte[] buffer);
    public ExcelCheckState get_CheckState();
    public void set_CheckState(ExcelCheckState value);
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftCblsData : ObjSubRecord {
    private byte m_btCheckState;
    private bool m_threeD;
    public ExcelCheckState CheckState { get; public set; }
    public bool Display3DShading { get; public set; }
    public ftCblsData(TObjSubRecordType type, ushort length, Byte[] buffer);
    public ExcelCheckState get_CheckState();
    public void set_CheckState(ExcelCheckState value);
    public bool get_Display3DShading();
    public void set_Display3DShading(bool value);
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
}
internal class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftCblsFmla : ObjSubRecord {
    private Ptg[] m_formula;
    public Ptg[] Formula { get; public set; }
    public ftCblsFmla(TObjSubRecordType type, ushort length, Byte[] buffer);
    public sealed virtual Ptg[] get_Formula();
    public sealed virtual void set_Formula(Ptg[] value);
    protected virtual void Parse(Byte[] buffer);
    protected virtual void Serialize(DataProvider provider, int iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftCf : ObjSubRecord {
    internal static int DEF_RECORD_SIZE;
    private short m_clipboardFormat;
    private Byte[] m_data;
    public short ClipboardFormat { get; }
    [CLSCompliantAttribute("False")]
public ftCf(TObjSubRecordType type, ushort length, Byte[] buffer);
    public short get_ClipboardFormat();
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftCmo : ObjSubRecord {
    private static int DEF_CHANGE_COLOR_MASK;
    private TObjType m_ObjType;
    private ushort m_usId;
    private ushort m_usOptions;
    private Byte[] m_reserved;
    private bool m_bBadLength;
    public bool Locked { get; public set; }
    public bool Printable { get; public set; }
    public bool AutoFill { get; public set; }
    public bool AutoLine { get; public set; }
    public bool ChangeColor { get; public set; }
    public ushort ID { get; public set; }
    public TObjType ObjectType { get; public set; }
    public Byte[] Reserved { get; internal set; }
    public ushort Options { get; internal set; }
    public ftCmo(TObjSubRecordType type, ushort length, Byte[] buffer);
    public bool get_Locked();
    public void set_Locked(bool value);
    public bool get_Printable();
    public void set_Printable(bool value);
    public bool get_AutoFill();
    public void set_AutoFill(bool value);
    public bool get_AutoLine();
    public void set_AutoLine(bool value);
    public bool get_ChangeColor();
    public void set_ChangeColor(bool value);
    public ushort get_ID();
    public void set_ID(ushort value);
    public TObjType get_ObjectType();
    public void set_ObjectType(TObjType value);
    public Byte[] get_Reserved();
    internal void set_Reserved(Byte[] value);
    public ushort get_Options();
    internal void set_Options(ushort value);
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftEnd : ObjSubRecord {
    private static int DEF_RECORD_SIZE;
    public ftEnd(TObjSubRecordType type, ushort length, Byte[] buffer);
    protected virtual void Parse(Byte[] buffer);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftLbsData : ObjSubRecord {
    private static int DEF_RECORD_SIZE;
    private static int DEF_COLOR_BIT_INDEX;
    private static int DEF_COLOR_BYTE;
    private static Byte[] DEF_SAMPLE_RECORD_DATA;
    private static int TypeValidMask;
    private static int TypeMask;
    private static int TypeMaskStartBit;
    private static int ThreeDMask;
    private static int SelectionTypeMask;
    private static int SelectionTypeStartBit;
    private Byte[] m_data;
    private int m_iLinesNumber;
    private Ptg[] m_arrFormula;
    private int m_iSelectedIndex;
    private int m_iOptions;
    private int m_iEditId;
    private LbsDropData m_dropData;
    private Boolean[] m_arrSelections;
    private bool m_bShortVersion;
    private TObjType m_parentObjectType;
    public Byte[] Data1 { get; public set; }
    public bool IsSelectedColor { get; public set; }
    public int LinesNumber { get; public set; }
    public Ptg[] Formula { get; public set; }
    public int SelectedIndex { get; public set; }
    public int Options { get; public set; }
    public int EditId { get; public set; }
    public LbsDropData DropData { get; }
    public bool ComboTypeValid { get; public set; }
    public ExcelComboType ComboType { get; public set; }
    public bool NoThreeD { get; public set; }
    public ExcelListSelectionType SelectionType { get; public set; }
    public bool IsMultiSelection { get; }
    public ftLbsData(TObjSubRecordType type, ushort length, Byte[] buffer);
    public ftLbsData(TObjSubRecordType type, ushort length, Byte[] buffer, TObjType objectType);
    private static ftLbsData();
    public Byte[] get_Data1();
    public void set_Data1(Byte[] value);
    public bool get_IsSelectedColor();
    public void set_IsSelectedColor(bool value);
    public int get_LinesNumber();
    public void set_LinesNumber(int value);
    public Ptg[] get_Formula();
    public void set_Formula(Ptg[] value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public int get_Options();
    public void set_Options(int value);
    public int get_EditId();
    public void set_EditId(int value);
    public LbsDropData get_DropData();
    public bool get_ComboTypeValid();
    public void set_ComboTypeValid(bool value);
    public ExcelComboType get_ComboType();
    public void set_ComboType(ExcelComboType value);
    public bool get_NoThreeD();
    public void set_NoThreeD(bool value);
    public ExcelListSelectionType get_SelectionType();
    public void set_SelectionType(ExcelListSelectionType value);
    public bool get_IsMultiSelection();
    protected virtual void Parse(Byte[] buffer);
    private int ParseMultiSelection(Byte[] buffer, int iOffset);
    private void ParseLines(Byte[] buffer, int iOffset);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
    protected virtual void Serialize(DataProvider provider, int iOffset);
    private int SerializeMultiSelection(DataProvider provider, int iOffset);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftMacro : ObjSubRecord {
    private Ptg[] m_arrTokens;
    public Ptg[] Tokens { get; public set; }
    [CLSCompliantAttribute("False")]
public ftMacro(ushort length, Byte[] buffer);
    public Ptg[] get_Tokens();
    public void set_Tokens(Ptg[] value);
    protected virtual void Parse(Byte[] buffer);
    protected virtual void Serialize(DataProvider provider, int iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual object Clone();
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftNts : ObjSubRecord {
    private static int DEF_RECORD_SIZE;
    private Byte[] m_data;
    public Byte[] Data { get; }
    [CLSCompliantAttribute("False")]
public ftNts(TObjSubRecordType type, ushort length, Byte[] buffer);
    public Byte[] get_Data();
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftPictFmla : ObjSubRecord {
    private static int FormulaStart;
    private static Byte[] DefaultHeader;
    private static Byte[] DefaultFooter;
    private Byte[] m_arrHeader;
    private Byte[] m_arrFooter;
    private string m_strFormula;
    public string Formula { get; public set; }
    public ftPictFmla(TObjSubRecordType type, ushort length, Byte[] buffer);
    private static ftPictFmla();
    public string get_Formula();
    public void set_Formula(string value);
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
internal class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftPioGrbit : ObjSubRecord {
    private static int DEF_RECORD_SIZE;
    private bool m_bIsActiveX;
    private Byte[] m_data;
    public bool IsActiveX { get; }
    [CLSCompliantAttribute("False")]
public ftPioGrbit(TObjSubRecordType type, ushort length, Byte[] buffer);
    public bool get_IsActiveX();
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftRbo : ObjSubRecord {
    public ftRbo(ushort length, Byte[] buffer);
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftRboData : ObjSubRecord {
    private byte m_isFirstButton;
    private byte m_nextButton;
    private byte m_ft;
    private byte m_cb;
    public bool IsFirstButton { get; public set; }
    public byte NextButton { get; public set; }
    public ftRboData(ushort length, Byte[] buffer);
    public bool get_IsFirstButton();
    public void set_IsFirstButton(bool value);
    public byte get_NextButton();
    public void set_NextButton(byte value);
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftSbs : ObjSubRecord {
    private static int DEF_RECORD_SIZE;
    private static Byte[] DEF_SAMPLE_RECORD_DATA;
    private Byte[] m_data;
    private int m_iValue;
    private int m_iMinimum;
    private int m_iMaximum;
    private int m_iIncrement;
    private int m_iPage;
    private int m_iHorizontal;
    private int m_iScrollBarWidth;
    private short m_sOptions;
    public Byte[] Data { get; public set; }
    public int Value { get; public set; }
    public int Minimum { get; public set; }
    public int Maximum { get; public set; }
    public int Increment { get; public set; }
    public int Page { get; public set; }
    public int Horizontal { get; public set; }
    public int ScrollBarWidth { get; public set; }
    public ftSbs(TObjSubRecordType type, ushort length, Byte[] buffer);
    private static ftSbs();
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public int get_Value();
    public void set_Value(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Increment();
    public void set_Increment(int value);
    public int get_Page();
    public void set_Page(int value);
    public int get_Horizontal();
    public void set_Horizontal(int value);
    public int get_ScrollBarWidth();
    public void set_ScrollBarWidth(int value);
    protected virtual void Parse(Byte[] buffer);
    protected virtual void Serialize(DataProvider provider, int iOffset);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
}
internal class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftSbsFormula : ObjSubRecord {
    private static int RowIndexOffset;
    private static int ColumnIndexOffset;
    private Ptg[] m_formula;
    public Ptg[] Formula { get; public set; }
    public ftSbsFormula(TObjSubRecordType type, ushort length, Byte[] buffer);
    public sealed virtual Ptg[] get_Formula();
    public sealed virtual void set_Formula(Ptg[] value);
    protected virtual void Parse(Byte[] buffer);
    protected virtual void Serialize(DataProvider provider, int iOffset);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ftUnknown : ObjSubRecord {
    private Byte[] m_data;
    public Byte[] RecordData { get; }
    [CLSCompliantAttribute("False")]
public ftUnknown(TObjSubRecordType type, ushort length, Byte[] buffer);
    public Byte[] get_RecordData();
    protected virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.LbsDropData : object {
    private short m_sOptions;
    private short m_sLinesNumber;
    private short m_sMinimum;
    private string m_strValue;
    public short Options { get; public set; }
    public short LinesNumber { get; public set; }
    public short Minimum { get; public set; }
    public string Value { get; public set; }
    public short get_Options();
    public void set_Options(short value);
    public short get_LinesNumber();
    public void set_LinesNumber(short value);
    public short get_Minimum();
    public void set_Minimum(short value);
    public string get_Value();
    public void set_Value(string value);
    public void Serialize(DataProvider provider, int offset);
    public int Parse(DataProvider provider, int offset);
    public int GetStoreSize();
    public LbsDropData Clone();
}
public abstract class Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.ObjSubRecord : object {
    protected static int HeaderSize;
    private TObjSubRecordType m_Type;
    private ushort m_usLength;
    public TObjSubRecordType Type { get; }
    [CLSCompliantAttribute("False")]
public ushort Length { get; protected set; }
    protected ObjSubRecord(TObjSubRecordType type);
    [CLSCompliantAttribute("False")]
protected ObjSubRecord(TObjSubRecordType type, ushort length, Byte[] buffer);
    public TObjSubRecordType get_Type();
    public ushort get_Length();
    protected void set_Length(ushort value);
    protected abstract virtual void Parse(Byte[] buffer);
    public virtual void FillArray(DataProvider provider, int iOffset);
    protected virtual void Serialize(DataProvider provider, int iOffset);
    public abstract virtual int GetStoreSize(ExcelVersion version);
    public virtual object Clone();
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.TObjSubRecordType : Enum {
    public int value__;
    public static TObjSubRecordType ftEnd;
    public static TObjSubRecordType Reserved0;
    public static TObjSubRecordType Reserved1;
    public static TObjSubRecordType Reserved2;
    public static TObjSubRecordType ftMacro;
    public static TObjSubRecordType ftButton;
    public static TObjSubRecordType ftGmo;
    public static TObjSubRecordType ftCf;
    public static TObjSubRecordType ftPioGrbit;
    public static TObjSubRecordType ftPictFmla;
    public static TObjSubRecordType ftCbls;
    public static TObjSubRecordType ftRbo;
    public static TObjSubRecordType ftSbs;
    public static TObjSubRecordType ftNts;
    public static TObjSubRecordType ftSbsFormula;
    public static TObjSubRecordType ftGboData;
    public static TObjSubRecordType ftEdoData;
    public static TObjSubRecordType ftRboData;
    public static TObjSubRecordType ftCblsData;
    public static TObjSubRecordType ftLbsData;
    public static TObjSubRecordType ftCblsFmla;
    public static TObjSubRecordType ftCmo;
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.ObjRecords.TObjType : Enum {
    public int value__;
    public static TObjType otGroup;
    public static TObjType otLine;
    public static TObjType otRectangle;
    public static TObjType otOval;
    public static TObjType otArc;
    public static TObjType otChart;
    public static TObjType otText;
    public static TObjType otButton;
    public static TObjType otPicture;
    public static TObjType otPolygon;
    public static TObjType otReserved0;
    public static TObjType otCheckBox;
    public static TObjType otOptionBtn;
    public static TObjType otEditBox;
    public static TObjType otLabel;
    public static TObjType otDialogBox;
    public static TObjType otSpinner;
    public static TObjType otScrollBar;
    public static TObjType otListBox;
    public static TObjType otGroupBox;
    public static TObjType otComboBox;
    public static TObjType otReserved1;
    public static TObjType otReserved2;
    public static TObjType otReserved3;
    public static TObjType otReserved4;
    public static TObjType otComment;
    public static TObjType otReserved5;
    public static TObjType otReserved6;
    public static TObjType otReserved7;
    public static TObjType otReserved8;
    public static TObjType otMSODrawing;
}
[DefaultMemberAttribute("Item")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.OffsetArrayList : object {
    private List`1<IBiffStorage> m_list;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public IBiffStorage Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IBiffStorage get_Item(int index);
    public sealed virtual void set_Item(int index, IBiffStorage value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Insert(int index, IBiffStorage value);
    public sealed virtual bool Remove(IBiffStorage value);
    public sealed virtual bool Contains(IBiffStorage value);
    public sealed virtual void Clear();
    public sealed virtual int IndexOf(IBiffStorage value);
    public int Add(IBiffStorage value);
    private sealed virtual override void System.Collections.Generic.ICollection<Syncfusion.XlsIO.Parser.Biff_Records.IBiffStorage>.Add(IBiffStorage value);
    public void AddList(IList value);
    public void AddRange(ICollection value);
    public void AddRange(ICollection`1<IBiffStorage> value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual int Add(object value);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual int get_Count();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<IBiffStorage> System.Collections.Generic.IEnumerable<Syncfusion.XlsIO.Parser.Biff_Records.IBiffStorage>.GetEnumerator();
    public void UpdateBiffRecordsOffsets();
    protected void CalculateRecordsStreamPos();
    public sealed virtual void CopyTo(IBiffStorage[] array, int arrayIndex);
}
[BiffAttribute("222")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.OleSizeRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usFirstRow;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usLastRow;
    [BiffRecordPosAttribute("6", "1")]
private byte m_FirstColumn;
    [BiffRecordPosAttribute("7", "1")]
private byte m_LastColumn;
    public ushort Reserved { get; }
    public ushort FirstRow { get; public set; }
    public ushort LastRow { get; public set; }
    public byte FirstColumn { get; public set; }
    public byte LastColumn { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public OleSizeRecord(Stream stream, Int32& itemSize);
    public OleSizeRecord(int iReserve);
    public ushort get_Reserved();
    public ushort get_FirstRow();
    public void set_FirstRow(ushort value);
    public ushort get_LastRow();
    public void set_LastRow(ushort value);
    public byte get_FirstColumn();
    public void set_FirstColumn(byte value);
    public byte get_LastColumn();
    public void set_LastColumn(byte value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
[BiffAttribute("2187")]
internal class Syncfusion.XlsIO.Parser.Biff_Records.PageLayoutView : BiffRecordRaw {
    private static int DEF_FIXED_SIZE;
    private ushort m_futureRecord;
    private ushort m_iScale;
    [BiffRecordPosAttribute("14", "0", "1")]
private bool m_bPageLayoutView;
    [BiffRecordPosAttribute("14", "1", "1")]
private bool m_bRulerVisible;
    [BiffRecordPosAttribute("14", "2", "1")]
private bool m_bWhiteSpaceHidden;
    internal ushort Scaling { get; }
    internal bool LayoutView { get; internal set; }
    internal bool WhiteSpaceHidden { get; internal set; }
    internal bool RulerVisible { get; internal set; }
    internal ushort get_Scaling();
    internal bool get_LayoutView();
    internal void set_LayoutView(bool value);
    internal bool get_WhiteSpaceHidden();
    internal void set_WhiteSpaceHidden(bool value);
    internal bool get_RulerVisible();
    internal void set_RulerVisible(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("146")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PaletteRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usColorsCount;
    private TColor[] m_arrColor;
    public ushort ColorsCount { get; }
    public TColor[] Colors { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public PaletteRecord(Stream stream, Int32& itemSize);
    public PaletteRecord(int iReserve);
    public ushort get_ColorsCount();
    public TColor[] get_Colors();
    public void set_Colors(TColor[] value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("65")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PaneRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private int m_iVertSplit;
    [BiffRecordPosAttribute("2", "2")]
private int m_iHorizSplit;
    [BiffRecordPosAttribute("4", "2")]
private int m_iFirstRow;
    [BiffRecordPosAttribute("6", "2")]
private int m_iFirstColumn;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usActivePane;
    public int VerticalSplit { get; public set; }
    public int HorizontalSplit { get; public set; }
    public int FirstRow { get; public set; }
    public int FirstColumn { get; public set; }
    public ushort ActivePane { get; public set; }
    public int MaximumRecordSize { get; }
    public int MinimumRecordSize { get; }
    public PaneRecord(Stream stream, Int32& itemSize);
    public PaneRecord(int iReserve);
    public int get_VerticalSplit();
    public void set_VerticalSplit(int value);
    public int get_HorizontalSplit();
    public void set_HorizontalSplit(int value);
    public int get_FirstRow();
    public void set_FirstRow(int value);
    public int get_FirstColumn();
    public void set_FirstColumn(int value);
    public ushort get_ActivePane();
    public void set_ActivePane(ushort value);
    public virtual int get_MaximumRecordSize();
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("19")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PasswordRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPassword;
    public ushort IsPassword { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public PasswordRecord(Stream stream, Int32& itemSize);
    public PasswordRecord(int iReserve);
    public ushort get_IsPassword();
    public void set_IsPassword(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("444")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PasswordRev4Record : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPassword;
    public ushort IsPassword { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public PasswordRev4Record(Stream stream, Int32& itemSize);
    public PasswordRev4Record(int iReserve);
    public ushort get_IsPassword();
    public void set_IsPassword(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("290")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.CacheDataExRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "8", "6")]
private double m_dDate;
    [BiffRecordPosAttribute("8", "4")]
private UInt32 m_uiFormulaCount;
    public double RefreshDate { get; public set; }
    public UInt32 FormulaCount { get; public set; }
    public CacheDataExRecord(Stream stream, Int32& itemSize);
    public CacheDataExRecord(int iReserve);
    public double get_RefreshDate();
    public void set_RefreshDate(double value);
    public UInt32 get_FormulaCount();
    public void set_FormulaCount(UInt32 value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("198")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.CacheDataRecord : BiffRecordRaw {
    private static int DEF_USERNAME_OFFSET;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iRecordsNumber;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usStreamId;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("6", "0", "1")]
private bool m_bSaveData;
    [BiffRecordPosAttribute("6", "1", "1")]
private bool m_bInvalid;
    [BiffRecordPosAttribute("6", "2", "1")]
private bool m_bRefreshOnLoad;
    [BiffRecordPosAttribute("6", "3", "1")]
private bool m_bOptimizeCache;
    [BiffRecordPosAttribute("6", "4", "1")]
private bool m_bBackgroundQuery;
    [BiffRecordPosAttribute("6", "5", "1")]
private bool m_bEnableRefresh;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usRecordsInBlock;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usBaseFieldsCount;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usFieldsNumber;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("16", "2")]
private ushort m_usSourceType;
    [BiffRecordPosAttribute("18", "2")]
private ushort m_usUserNameSize;
    private string m_strUserName;
    private bool m_bUserName16Bit;
    public int RecordsNumber { get; public set; }
    public ushort StreamId { get; public set; }
    public ushort Options { get; }
    public bool IsSaveData { get; public set; }
    public bool IsInvalid { get; public set; }
    public bool IsRefreshOnLoad { get; public set; }
    public bool IsOptimizeCache { get; public set; }
    public bool IsBackgroundQuery { get; public set; }
    public bool IsEnableRefresh { get; public set; }
    public ushort RecordsInBlock { get; public set; }
    public ushort BaseFieldsCount { get; public set; }
    public ushort FieldsNumber { get; public set; }
    public ushort Reserved { get; }
    public ExcelDataSourceType SourceType { get; public set; }
    public ushort UserNameSize { get; }
    public string UserName { get; public set; }
    public CacheDataRecord(Stream stream, Int32& itemSize);
    public CacheDataRecord(int iReserve);
    public int get_RecordsNumber();
    public void set_RecordsNumber(int value);
    public ushort get_StreamId();
    public void set_StreamId(ushort value);
    public ushort get_Options();
    public bool get_IsSaveData();
    public void set_IsSaveData(bool value);
    public bool get_IsInvalid();
    public void set_IsInvalid(bool value);
    public bool get_IsRefreshOnLoad();
    public void set_IsRefreshOnLoad(bool value);
    public bool get_IsOptimizeCache();
    public void set_IsOptimizeCache(bool value);
    public bool get_IsBackgroundQuery();
    public void set_IsBackgroundQuery(bool value);
    public bool get_IsEnableRefresh();
    public void set_IsEnableRefresh(bool value);
    public ushort get_RecordsInBlock();
    public void set_RecordsInBlock(ushort value);
    public ushort get_BaseFieldsCount();
    public void set_BaseFieldsCount(ushort value);
    public ushort get_FieldsNumber();
    public void set_FieldsNumber(ushort value);
    public ushort get_Reserved();
    public ExcelDataSourceType get_SourceType();
    public void set_SourceType(ExcelDataSourceType value);
    public ushort get_UserNameSize();
    public string get_UserName();
    public void set_UserName(string value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public void FillCache(IRange dataRange);
}
[BiffAttribute("80")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.DataConsolidationInfoRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFunctionIndex;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usLeftCat;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usTopCat;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usLinkConsol;
    public FunctionTypes FunctionIndex { get; public set; }
    public bool IsLeftCat { get; public set; }
    public bool IsTopCat { get; public set; }
    public bool IsLinkConsol { get; public set; }
    public DataConsolidationInfoRecord(Stream stream, Int32& itemSize);
    public DataConsolidationInfoRecord(int iReserve);
    public FunctionTypes get_FunctionIndex();
    public void set_FunctionIndex(FunctionTypes value);
    public bool get_IsLeftCat();
    public void set_IsLeftCat(bool value);
    public bool get_IsTopCat();
    public void set_IsTopCat(bool value);
    public bool get_IsLinkConsol();
    public void set_IsLinkConsol(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("197")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.DataItemRecord : BiffRecordRawWithArray {
    internal static ushort DEF_NULL_NAME_LENGTH;
    private static int DEF_STRING_OFFSET;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usField;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usFunctionIndex;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usDisplayFormat;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usViewFieldIndex;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usViewItemIndex;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usFormatTableIndex;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usNameLength;
    private string m_strName;
    public ushort Field { get; public set; }
    public ushort FunctionIndex { get; public set; }
    public ushort DisplayFormat { get; public set; }
    public ushort ViewFieldIndex { get; public set; }
    public ushort ViewItemIndex { get; public set; }
    public ushort FormatTableIndex { get; public set; }
    public ushort NameLength { get; }
    public string Name { get; public set; }
    public DataItemRecord(Stream stream, Int32& itemSize);
    public DataItemRecord(int iReserve);
    public ushort get_Field();
    public void set_Field(ushort value);
    public ushort get_FunctionIndex();
    public void set_FunctionIndex(ushort value);
    public ushort get_DisplayFormat();
    public void set_DisplayFormat(ushort value);
    public ushort get_ViewFieldIndex();
    public void set_ViewFieldIndex(ushort value);
    public ushort get_ViewItemIndex();
    public void set_ViewItemIndex(ushort value);
    public ushort get_FormatTableIndex();
    public void set_FormatTableIndex(ushort value);
    public ushort get_NameLength();
    public string get_Name();
    public void set_Name(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("220")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.ExternalSourceInfoRecord : BiffRecordRaw {
    private static ushort DEF_DATASOURCETYPE_BITMASK;
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "3", "1")]
private bool m_bOdbcConnection;
    [BiffRecordPosAttribute("0", "4", "1")]
private bool m_bSql;
    [BiffRecordPosAttribute("0", "5", "1")]
private bool m_bSqlSav;
    [BiffRecordPosAttribute("0", "6", "1")]
private bool m_bWeb;
    [BiffRecordPosAttribute("0", "7", "1")]
private bool m_bSavePassword;
    [BiffRecordPosAttribute("1", "0", "1")]
private bool m_bTablesOnlyHtml;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usParamsCount;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usQueryCount;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usWebPostCount;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usSQLSavCount;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usOdbcConnectionCount;
    public ushort Options { get; }
    public ushort DataSourceType { get; public set; }
    public bool IsOdbcConnection { get; public set; }
    public bool IsSql { get; public set; }
    public bool IsSqlSav { get; public set; }
    public bool IsWeb { get; public set; }
    public bool IsSavePassword { get; public set; }
    public bool IsTablesOnlyHtml { get; public set; }
    public ushort ParamsCount { get; public set; }
    public ushort QueryCount { get; public set; }
    public ushort WebPostCount { get; public set; }
    public ushort SQLSavCount { get; public set; }
    public ushort OdbcConnectionCount { get; public set; }
    public ExternalSourceInfoRecord(Stream stream, Int32& itemSize);
    public ExternalSourceInfoRecord(int iReserve);
    public ushort get_Options();
    public ushort get_DataSourceType();
    public void set_DataSourceType(ushort value);
    public bool get_IsOdbcConnection();
    public void set_IsOdbcConnection(bool value);
    public bool get_IsSql();
    public void set_IsSql(bool value);
    public bool get_IsSqlSav();
    public void set_IsSqlSav(bool value);
    public bool get_IsWeb();
    public void set_IsWeb(bool value);
    public bool get_IsSavePassword();
    public void set_IsSavePassword(bool value);
    public bool get_IsTablesOnlyHtml();
    public void set_IsTablesOnlyHtml(bool value);
    public ushort get_ParamsCount();
    public void set_ParamsCount(ushort value);
    public ushort get_QueryCount();
    public void set_QueryCount(ushort value);
    public ushort get_WebPostCount();
    public void set_WebPostCount(ushort value);
    public ushort get_SQLSavCount();
    public void set_SQLSavCount(ushort value);
    public ushort get_OdbcConnectionCount();
    public void set_OdbcConnectionCount(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.LineItem : object {
    private static int DEF_FIXEDPART_SIZE;
    private static int DEF_BIT_MULTIDATANAME;
    private static int DEF_BIT_SUBTOTAL;
    private static int DEF_BIT_BLOCK;
    private static int DEF_BIT_GRAND;
    private static int DEF_BIT_MULTIDATAONAXIS;
    private ushort m_usIdenticalItemsCount;
    private ushort m_usItemType;
    private ushort m_usMaxIndex;
    private ushort m_usOptions;
    private UInt16[] m_arrIndexes;
    public ushort IdenticalItemsCount { get; public set; }
    public ushort ItemType { get; public set; }
    public ushort MaxIndex { get; }
    public ushort Options { get; }
    public UInt16[] Indexes { get; public set; }
    public bool IsMultiDataName { get; public set; }
    public bool IsSubtotal { get; public set; }
    public bool IsBlock { get; public set; }
    public bool IsGrand { get; public set; }
    public bool IsMultiDataOnAxis { get; public set; }
    public int Length { get; }
    public ushort get_IdenticalItemsCount();
    public void set_IdenticalItemsCount(ushort value);
    public ushort get_ItemType();
    public void set_ItemType(ushort value);
    public ushort get_MaxIndex();
    public ushort get_Options();
    public UInt16[] get_Indexes();
    public void set_Indexes(UInt16[] value);
    public bool get_IsMultiDataName();
    public void set_IsMultiDataName(bool value);
    public bool get_IsSubtotal();
    public void set_IsSubtotal(bool value);
    public bool get_IsBlock();
    public void set_IsBlock(bool value);
    public bool get_IsGrand();
    public void set_IsGrand(bool value);
    public bool get_IsMultiDataOnAxis();
    public void set_IsMultiDataOnAxis(bool value);
    public int get_Length();
    public int Parse(DataProvider provider, int iOffset, int iFieldsCount);
    public int Serialize(Byte[] arrData, int iOffset);
    public sealed virtual object Clone();
}
[BiffAttribute("181")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.LineItemArrayRecord : BiffRecordWithContinue {
    private List`1<LineItem> m_arrItems;
    private bool m_bNeedDataArray;
    public List`1<LineItem> Items { get; public set; }
    public bool NeedDataArray { get; }
    protected bool AddHeaderToProvider { get; }
    public List`1<LineItem> get_Items();
    public void set_Items(List`1<LineItem> value);
    public virtual bool get_NeedDataArray();
    protected virtual bool get_AddHeaderToProvider();
    public virtual void ParseStructure();
    public void ParseStructure(int iFieldsCount);
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual object Clone();
}
[BiffAttribute("210")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PageItemIndexesRecord : BiffRecordRawWithArray {
    private UInt16[] m_arrIndexes;
    public UInt16[] Indexes { get; public set; }
    public PageItemIndexesRecord(Stream stream, Int32& itemSize);
    public PageItemIndexesRecord(int iReserve);
    public UInt16[] get_Indexes();
    public void set_Indexes(UInt16[] value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("209")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PageItemNameCountRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCount;
    public ushort Count { get; public set; }
    public PageItemNameCountRecord(Stream stream, Int32& itemSize);
    public PageItemNameCountRecord(int iReserve);
    public ushort get_Count();
    public void set_Count(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("182")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PageItemRecord : BiffRecordRawWithArray {
    private List`1<FieldInfo> m_arrFieldItems;
    public List`1<FieldInfo> Items { get; }
    public PageItemRecord(Stream stream, Int32& itemSize);
    public PageItemRecord(int iReserve);
    public List`1<FieldInfo> get_Items();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual object Clone();
}
[BiffAttribute("249")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.ParsedExpressionRecord : BiffRecordRaw {
    private static int DEF_EXPRESSION_OFFSET;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usSize;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usNameCount;
    private Byte[] m_arrParsedExpression;
    public ushort Size { get; }
    public ushort NameCount { get; public set; }
    public Byte[] ParsedExpression { get; public set; }
    public ParsedExpressionRecord(Stream stream, Int32& itemSize);
    public ParsedExpressionRecord(int iReserve);
    public ushort get_Size();
    public ushort get_NameCount();
    public void set_NameCount(ushort value);
    public Byte[] get_ParsedExpression();
    public void set_ParsedExpression(Byte[] value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("202")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotBooleanRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usValue;
    public bool Value { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    private object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.Value { get; private set; }
    public PivotBooleanRecord(Stream stream, Int32& itemSize);
    public PivotBooleanRecord(int iReserve);
    public bool get_Value();
    public void set_Value(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private sealed virtual override object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.get_Value();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.set_Value(object value);
}
[BiffAttribute("206")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotDateTimeRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usYear;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usMonth;
    [BiffRecordPosAttribute("4", "1")]
private byte m_btDay;
    [BiffRecordPosAttribute("5", "1")]
private byte m_btHour;
    [BiffRecordPosAttribute("6", "1")]
private byte m_btMinute;
    [BiffRecordPosAttribute("7", "1")]
private byte m_btSecond;
    public ushort Year { get; public set; }
    public ushort Month { get; public set; }
    public byte Day { get; public set; }
    public byte Hour { get; public set; }
    public byte Minute { get; public set; }
    public byte Second { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    private object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.Value { get; private set; }
    public PivotDateTimeRecord(Stream stream, Int32& itemSize);
    public PivotDateTimeRecord(int iReserve);
    public ushort get_Year();
    public void set_Year(ushort value);
    public ushort get_Month();
    public void set_Month(ushort value);
    public byte get_Day();
    public void set_Day(byte value);
    public byte get_Hour();
    public void set_Hour(byte value);
    public byte get_Minute();
    public void set_Minute(byte value);
    public byte get_Second();
    public void set_Second(byte value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private sealed virtual override object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.get_Value();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.set_Value(object value);
}
[BiffAttribute("201")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotDoubleRecord : BiffRecordRaw {
    private int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "8", "6")]
private double m_dValue;
    public double Value { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    private object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.Value { get; private set; }
    public PivotDoubleRecord(Stream stream, Int32& itemSize);
    public PivotDoubleRecord(int iReserve);
    public double get_Value();
    public void set_Value(double value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private sealed virtual override object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.get_Value();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.set_Value(object value);
}
[BiffAttribute("207")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotEmptyRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    private object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.Value { get; private set; }
    public PivotEmptyRecord(Stream stream, Int32& itemSize);
    public PivotEmptyRecord(int iReserve);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private sealed virtual override object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.get_Value();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.set_Value(object value);
}
[BiffAttribute("203")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotErrorRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usValue;
    public ushort Value { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    private object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.Value { get; private set; }
    public PivotErrorRecord(Stream stream, Int32& itemSize);
    public PivotErrorRecord(int iReserve);
    public ushort get_Value();
    public void set_Value(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private sealed virtual override object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.get_Value();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.set_Value(object value);
}
[BiffAttribute("199")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotFieldRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bInIndexList;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bNotInList;
    [BiffRecordPosAttribute("0", "5", "1")]
private bool m_bDouble;
    [BiffRecordPosAttribute("0", "6", "1")]
private bool m_bDoubleInt;
    [BiffRecordPosAttribute("0", "7", "1")]
private bool m_bString;
    [BiffRecordPosAttribute("1", "0", "1")]
private bool m_bUnknown;
    [BiffRecordPosAttribute("1", "1", "1")]
private bool m_bLongIndex;
    [BiffRecordPosAttribute("1", "2", "1")]
private bool m_bUnknown2;
    [BiffRecordPosAttribute("1", "3", "1")]
private bool m_bDate;
    [BiffRecordPosAttribute("2", "4")]
private UInt32 m_usReserved1;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usItemCount1;
    [BiffRecordPosAttribute("8", "4")]
private UInt32 m_usReserved2;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usItemCount2;
    [BiffRecordPosAttribute("14", "3")]
private string m_strFieldName;
    private bool m_bFieldName16Bit;
    public ushort Options { get; }
    public bool IsInIndexList { get; public set; }
    public bool IsNotInList { get; public set; }
    public bool IsDouble { get; public set; }
    public bool IsDoubleInt { get; public set; }
    public bool IsString { get; public set; }
    public bool IsUnknown { get; public set; }
    public bool IsLongIndex { get; public set; }
    public bool IsUnknown2 { get; public set; }
    public bool IsDate { get; public set; }
    public UInt32 Reserved1 { get; public set; }
    public ushort ItemCount1 { get; public set; }
    public UInt32 Reserved2 { get; public set; }
    public ushort ItemCount2 { get; public set; }
    public string Name { get; public set; }
    public int MinimumRecordSize { get; }
    public PivotFieldRecord(Stream stream, Int32& itemSize);
    public PivotFieldRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsInIndexList();
    public void set_IsInIndexList(bool value);
    public bool get_IsNotInList();
    public void set_IsNotInList(bool value);
    public bool get_IsDouble();
    public void set_IsDouble(bool value);
    public bool get_IsDoubleInt();
    public void set_IsDoubleInt(bool value);
    public bool get_IsString();
    public void set_IsString(bool value);
    public bool get_IsUnknown();
    public void set_IsUnknown(bool value);
    public bool get_IsLongIndex();
    public void set_IsLongIndex(bool value);
    public bool get_IsUnknown2();
    public void set_IsUnknown2(bool value);
    public bool get_IsDate();
    public void set_IsDate(bool value);
    public UInt32 get_Reserved1();
    public void set_Reserved1(UInt32 value);
    public ushort get_ItemCount1();
    public void set_ItemCount1(ushort value);
    public UInt32 get_Reserved2();
    public void set_Reserved2(UInt32 value);
    public ushort get_ItemCount2();
    public void set_ItemCount2(ushort value);
    public string get_Name();
    public void set_Name(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("251")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotFormatRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usType;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usDataSize;
    public ushort Type { get; public set; }
    public ushort DataSize { get; public set; }
    public PivotFormatRecord(Stream stream, Int32& itemSize);
    public PivotFormatRecord(int iReserve);
    public ushort get_Type();
    public void set_Type(ushort value);
    public ushort get_DataSize();
    public void set_DataSize(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("259")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotFormulaRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("2", "2", "True")]
private short m_usAppliedField;
    public ushort Reserved { get; }
    public short AppliedField { get; public set; }
    public PivotFormulaRecord(Stream stream, Int32& itemSize);
    public PivotFormulaRecord(int iReserve);
    public ushort get_Reserved();
    public short get_AppliedField();
    public void set_AppliedField(short value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("200")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotIndexListRecord : BiffRecordRawWithArray {
    private Byte[] m_arrIndexes;
    public Byte[] Indexes { get; public set; }
    public PivotIndexListRecord(Stream stream, Int32& itemSize);
    public PivotIndexListRecord(int iReserve);
    public Byte[] get_Indexes();
    public void set_Indexes(Byte[] value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("248")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotNamePairRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usField;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usCache;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("6", "0", "1")]
private bool m_bCalculatedItem;
    [BiffRecordPosAttribute("6", "3", "1")]
private bool m_bPhysical;
    [BiffRecordPosAttribute("6", "4", "1")]
private bool m_bRelative;
    public ushort Field { get; public set; }
    public ushort Cache { get; public set; }
    public ushort Reserved { get; }
    public ushort Options { get; }
    public bool IsCalculatedItem { get; public set; }
    public bool IsPhysical { get; public set; }
    public bool IsRelative { get; public set; }
    public PivotNamePairRecord(Stream stream, Int32& itemSize);
    public PivotNamePairRecord(int iReserve);
    public ushort get_Field();
    public void set_Field(ushort value);
    public ushort get_Cache();
    public void set_Cache(ushort value);
    public ushort get_Reserved();
    public ushort get_Options();
    public bool get_IsCalculatedItem();
    public void set_IsCalculatedItem(bool value);
    public bool get_IsPhysical();
    public void set_IsPhysical(bool value);
    public bool get_IsRelative();
    public void set_IsRelative(bool value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("246")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotNameRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bErrorName;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usAggregateField;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usAggregateFunction;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usPairCount;
    public ushort Options { get; }
    public bool IsErrorName { get; public set; }
    public ushort AggregateField { get; public set; }
    public ushort AggregateFunction { get; public set; }
    public ushort PairCount { get; public set; }
    public PivotNameRecord(Stream stream, Int32& itemSize);
    public PivotNameRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsErrorName();
    public void set_IsErrorName(bool value);
    public ushort get_AggregateField();
    public void set_AggregateField(ushort value);
    public ushort get_AggregateFunction();
    public void set_AggregateFunction(ushort value);
    public ushort get_PairCount();
    public void set_PairCount(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("208")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotSourceInfoRecord : BiffRecordRaw {
    private static ushort DEF_BITMASK_PAGECOUNT;
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRefCount;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usPageItemCount;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("5", "7", "1")]
private bool m_bAutoPage;
    public ushort RefCount { get; public set; }
    public ushort PageItemCount { get; public set; }
    public ushort Options { get; }
    public bool IsAutoPage { get; public set; }
    public ushort PageCount { get; public set; }
    public PivotSourceInfoRecord(Stream stream, Int32& itemSize);
    public PivotSourceInfoRecord(int iReserve);
    public ushort get_RefCount();
    public void set_RefCount(ushort value);
    public ushort get_PageItemCount();
    public void set_PageItemCount(ushort value);
    public ushort get_Options();
    public bool get_IsAutoPage();
    public void set_IsAutoPage(bool value);
    public ushort get_PageCount();
    public void set_PageCount(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("205")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotStringRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "3")]
private string m_strString;
    private bool m_b8Bit;
    public string String { get; public set; }
    public bool NeedDataArray { get; }
    private object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.Value { get; private set; }
    public PivotStringRecord(Stream stream, Int32& itemSize);
    public PivotStringRecord(int iReserve);
    public string get_String();
    public void set_String(string value);
    public virtual bool get_NeedDataArray();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private sealed virtual override object Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.get_Value();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IValueHolder.set_Value(object value);
}
[BiffAttribute("176")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotViewDefinitionRecord : BiffRecordRawWithArray {
    private static int DEF_TABLE_NAME_OFFSET;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFirstRow;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usLastRow;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usFirstColumn;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usLastColumn;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usFirstHeadRow;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usFirstDataRow;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usFirstDataColumn;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usCacheIndex;
    [BiffRecordPosAttribute("16", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("18", "2")]
private ushort m_usDataAxis;
    [BiffRecordPosAttribute("20", "2")]
private ushort m_usDataPos;
    [BiffRecordPosAttribute("22", "2")]
private ushort m_usFieldsNumber;
    [BiffRecordPosAttribute("24", "2")]
private ushort m_usRowFieldsNumber;
    [BiffRecordPosAttribute("26", "2")]
private ushort m_usColumnFieldsNumber;
    [BiffRecordPosAttribute("28", "2")]
private ushort m_usPageFieldsNumber;
    [BiffRecordPosAttribute("30", "2")]
private ushort m_usDataFieldsNumber;
    [BiffRecordPosAttribute("32", "2")]
private ushort m_usDataRowsNumber;
    [BiffRecordPosAttribute("34", "2")]
private ushort m_usDataColumnsNumber;
    [BiffRecordPosAttribute("36", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("36", "0", "1")]
private bool m_bRowGrand;
    [BiffRecordPosAttribute("36", "1", "1")]
private bool m_bColumnGrand;
    [BiffRecordPosAttribute("36", "3", "1")]
private bool m_bAutoFormat;
    [BiffRecordPosAttribute("36", "4", "1")]
private bool m_bWHAutoFormat;
    [BiffRecordPosAttribute("36", "5", "1")]
private bool m_bFontAutoFormat;
    [BiffRecordPosAttribute("36", "6", "1")]
private bool m_bAlignAutoFormat;
    [BiffRecordPosAttribute("36", "7", "1")]
private bool m_bBorderAutoFormat;
    [BiffRecordPosAttribute("37", "0", "1")]
private bool m_bPatternAutoFormat;
    [BiffRecordPosAttribute("37", "1", "1")]
private bool m_bNumberAutoFormat;
    [BiffRecordPosAttribute("38", "2")]
private ushort m_usAutoFormatIndex;
    [BiffRecordPosAttribute("40", "2")]
private ushort m_usTableNameLength;
    [BiffRecordPosAttribute("42", "2")]
private ushort m_usDataFieldNameLength;
    private string m_strTableName;
    private string m_strDataFieldName;
    public ushort FirstRow { get; public set; }
    public ushort LastRow { get; public set; }
    public ushort FirstColumn { get; public set; }
    public ushort LastColumn { get; public set; }
    public ushort FirstHeadRow { get; public set; }
    public ushort FirstDataRow { get; public set; }
    public ushort FirstDataColumn { get; public set; }
    public ushort CacheIndex { get; public set; }
    public ushort Reserved { get; }
    public ushort DataAxis { get; public set; }
    public ushort DataPos { get; public set; }
    public ushort FieldsNumber { get; public set; }
    public ushort RowFieldsNumber { get; public set; }
    public ushort ColumnFieldsNumber { get; public set; }
    public ushort PageFieldsNumber { get; public set; }
    public ushort DataFieldsNumber { get; public set; }
    public ushort DataRowsNumber { get; public set; }
    public ushort DataColumnsNumber { get; public set; }
    public ushort Options { get; }
    public bool IsRowGrand { get; public set; }
    public bool IsColumnGrand { get; public set; }
    public bool IsAutoFormat { get; public set; }
    public bool IsWHAutoFormat { get; public set; }
    public bool IsFontAutoFormat { get; public set; }
    public bool IsAlignAutoFormat { get; public set; }
    public bool IsBorderAutoFormat { get; public set; }
    public bool IsPatternAutoFormat { get; public set; }
    public bool IsNumberAutoFormat { get; public set; }
    public ushort AutoFormatIndex { get; public set; }
    public ushort TableNameLength { get; }
    public ushort DataFieldNameLength { get; }
    public string TableName { get; public set; }
    public string DataFieldName { get; public set; }
    public PivotViewDefinitionRecord(Stream stream, Int32& itemSize);
    public PivotViewDefinitionRecord(int iReserve);
    public ushort get_FirstRow();
    public void set_FirstRow(ushort value);
    public ushort get_LastRow();
    public void set_LastRow(ushort value);
    public ushort get_FirstColumn();
    public void set_FirstColumn(ushort value);
    public ushort get_LastColumn();
    public void set_LastColumn(ushort value);
    public ushort get_FirstHeadRow();
    public void set_FirstHeadRow(ushort value);
    public ushort get_FirstDataRow();
    public void set_FirstDataRow(ushort value);
    public ushort get_FirstDataColumn();
    public void set_FirstDataColumn(ushort value);
    public ushort get_CacheIndex();
    public void set_CacheIndex(ushort value);
    public ushort get_Reserved();
    public ushort get_DataAxis();
    public void set_DataAxis(ushort value);
    public ushort get_DataPos();
    public void set_DataPos(ushort value);
    public ushort get_FieldsNumber();
    public void set_FieldsNumber(ushort value);
    public ushort get_RowFieldsNumber();
    public void set_RowFieldsNumber(ushort value);
    public ushort get_ColumnFieldsNumber();
    public void set_ColumnFieldsNumber(ushort value);
    public ushort get_PageFieldsNumber();
    public void set_PageFieldsNumber(ushort value);
    public ushort get_DataFieldsNumber();
    public void set_DataFieldsNumber(ushort value);
    public ushort get_DataRowsNumber();
    public void set_DataRowsNumber(ushort value);
    public ushort get_DataColumnsNumber();
    public void set_DataColumnsNumber(ushort value);
    public ushort get_Options();
    public bool get_IsRowGrand();
    public void set_IsRowGrand(bool value);
    public bool get_IsColumnGrand();
    public void set_IsColumnGrand(bool value);
    public bool get_IsAutoFormat();
    public void set_IsAutoFormat(bool value);
    public bool get_IsWHAutoFormat();
    public void set_IsWHAutoFormat(bool value);
    public bool get_IsFontAutoFormat();
    public void set_IsFontAutoFormat(bool value);
    public bool get_IsAlignAutoFormat();
    public void set_IsAlignAutoFormat(bool value);
    public bool get_IsBorderAutoFormat();
    public void set_IsBorderAutoFormat(bool value);
    public bool get_IsPatternAutoFormat();
    public void set_IsPatternAutoFormat(bool value);
    public bool get_IsNumberAutoFormat();
    public void set_IsNumberAutoFormat(bool value);
    public ushort get_AutoFormatIndex();
    public void set_AutoFormatIndex(ushort value);
    public ushort get_TableNameLength();
    public ushort get_DataFieldNameLength();
    public string get_TableName();
    public void set_TableName(string value);
    public string get_DataFieldName();
    public void set_DataFieldName(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("256")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotViewFieldsExRecord : BiffRecordRawWithArray {
    [BiffRecordPosAttribute("0", "4")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bShowAllItems;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bDragToRow;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bDragToColumn;
    [BiffRecordPosAttribute("0", "3", "1")]
private bool m_bDragToPage;
    [BiffRecordPosAttribute("0", "4", "1")]
private bool m_bDragToHide;
    [BiffRecordPosAttribute("0", "7", "1")]
private bool m_bServerBased;
    [BiffRecordPosAttribute("1", "1", "1")]
private bool m_bAutoSort;
    [BiffRecordPosAttribute("1", "2", "1")]
private bool m_bAscendSort;
    [BiffRecordPosAttribute("1", "3", "1")]
private bool m_bAutoShow;
    [BiffRecordPosAttribute("1", "4", "1")]
private bool m_bAscendShow;
    [BiffRecordPosAttribute("1", "5", "1")]
private bool m_bCalculateField;
    [BiffRecordPosAttribute("4", "1")]
private byte m_btReserved;
    [BiffRecordPosAttribute("5", "1")]
private byte m_btItemsNumber;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usSortIndex;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usShowIndex;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usFormat;
    private string m_strSubTotalName;
    public ushort Options { get; }
    public bool IsShowAllItems { get; public set; }
    public bool IsDragToRow { get; public set; }
    public bool IsDragToColumn { get; public set; }
    public bool IsDragToPage { get; public set; }
    public bool IsDragToHide { get; public set; }
    public bool IsServerBased { get; public set; }
    public bool IsAutoSort { get; public set; }
    public bool IsAscendSort { get; public set; }
    public bool IsAutoShow { get; public set; }
    public bool IsAscendShow { get; public set; }
    public bool IsCalculateField { get; public set; }
    public byte Reserved { get; }
    public byte ItemsNumber { get; public set; }
    public ushort SortIndex { get; public set; }
    public ushort ShowIndex { get; public set; }
    public ushort NumberFormat { get; public set; }
    public string SubTotalName { get; public set; }
    public PivotViewFieldsExRecord(Stream stream, Int32& itemSize);
    public PivotViewFieldsExRecord(int iReserve);
    public ushort get_Options();
    public bool get_IsShowAllItems();
    public void set_IsShowAllItems(bool value);
    public bool get_IsDragToRow();
    public void set_IsDragToRow(bool value);
    public bool get_IsDragToColumn();
    public void set_IsDragToColumn(bool value);
    public bool get_IsDragToPage();
    public void set_IsDragToPage(bool value);
    public bool get_IsDragToHide();
    public void set_IsDragToHide(bool value);
    public bool get_IsServerBased();
    public void set_IsServerBased(bool value);
    public bool get_IsAutoSort();
    public void set_IsAutoSort(bool value);
    public bool get_IsAscendSort();
    public void set_IsAscendSort(bool value);
    public bool get_IsAutoShow();
    public void set_IsAutoShow(bool value);
    public bool get_IsAscendShow();
    public void set_IsAscendShow(bool value);
    public bool get_IsCalculateField();
    public void set_IsCalculateField(bool value);
    public byte get_Reserved();
    public byte get_ItemsNumber();
    public void set_ItemsNumber(byte value);
    public ushort get_SortIndex();
    public void set_SortIndex(ushort value);
    public ushort get_ShowIndex();
    public void set_ShowIndex(ushort value);
    public ushort get_NumberFormat();
    public void set_NumberFormat(ushort value);
    public string get_SubTotalName();
    public void set_SubTotalName(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("177")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotViewFieldsRecord : BiffRecordRawWithArray {
    private static ushort DEF_NULL_LENGTH;
    private static int DEF_STRING_OFFSET;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usAxis;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usSubtotalCount;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usSubtotalType;
    private bool m_showSubtotalAtTop;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usNumberItems;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usNameLength;
    private string m_strName;
    public PivotAxisTypes Axis { get; public set; }
    public ushort SubtotalCount { get; public set; }
    public PivotSubtotalTypes SubtotalType { get; public set; }
    internal bool ShowSubtotalAtTop { get; internal set; }
    public ushort NumberItems { get; public set; }
    public ushort NameLength { get; }
    public string Name { get; public set; }
    public PivotViewFieldsRecord(Stream stream, Int32& itemSize);
    public PivotViewFieldsRecord(int iReserve);
    public PivotAxisTypes get_Axis();
    public void set_Axis(PivotAxisTypes value);
    public ushort get_SubtotalCount();
    public void set_SubtotalCount(ushort value);
    public PivotSubtotalTypes get_SubtotalType();
    public void set_SubtotalType(PivotSubtotalTypes value);
    internal bool get_ShowSubtotalAtTop();
    internal void set_ShowSubtotalAtTop(bool value);
    public ushort get_NumberItems();
    public void set_NumberItems(ushort value);
    public ushort get_NameLength();
    public string get_Name();
    public void set_Name(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("178")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotViewItemRecord : BiffRecordRawWithArray {
    private static int DEF_NAME_OFFSET;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usItemType;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("2", "0", "1")]
private bool m_bHidden;
    [BiffRecordPosAttribute("2", "1", "1")]
private bool m_bHideDetail;
    [BiffRecordPosAttribute("2", "2", "1")]
private bool m_bFormula;
    [BiffRecordPosAttribute("2", "3", "1")]
private bool m_bMissing;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usCache;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usNameLength;
    private string m_strName;
    public ItemTypes ItemType { get; public set; }
    public ushort Options { get; }
    public bool IsHidden { get; public set; }
    public bool IsHideDetail { get; public set; }
    public bool IsFormula { get; public set; }
    public bool IsMissing { get; public set; }
    public ushort Cache { get; public set; }
    public ushort NameLength { get; }
    public string Name { get; public set; }
    public PivotViewItemRecord(Stream stream, Int32& itemSize);
    public PivotViewItemRecord(int iReserve);
    public ItemTypes get_ItemType();
    public void set_ItemType(ItemTypes value);
    public ushort get_Options();
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsHideDetail();
    public void set_IsHideDetail(bool value);
    public bool get_IsFormula();
    public void set_IsFormula(bool value);
    public bool get_IsMissing();
    public void set_IsMissing(bool value);
    public ushort get_Cache();
    public void set_Cache(ushort value);
    public ushort get_NameLength();
    public string get_Name();
    public void set_Name(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("227")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.PivotViewSourceRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usDataSource;
    public DataSourceTypes DataSource { get; public set; }
    public PivotViewSourceRecord(Stream stream, Int32& itemSize);
    public PivotViewSourceRecord(int iReserve);
    public DataSourceTypes get_DataSource();
    public void set_DataSource(DataSourceTypes value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("180")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.RowColumnFiledIdRecord : BiffRecordRaw {
    private UInt16[] m_arrFieldId;
    public UInt16[] FieldIds { get; public set; }
    public RowColumnFiledIdRecord(Stream stream, Int32& itemSize);
    public RowColumnFiledIdRecord(int iReserve);
    public UInt16[] get_FieldIds();
    public void set_FieldIds(UInt16[] value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("240")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.RuleDataRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    private static ushort DEF_BITMASK_RULETYPE;
    private static ushort DEF_BIT_RULETYPE;
    [BiffRecordPosAttribute("0", "1")]
private byte m_btDim;
    [BiffRecordPosAttribute("1", "1")]
private byte m_btCurrentField;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("2", "0", "1")]
private bool m_bRowArea;
    [BiffRecordPosAttribute("2", "1", "1")]
private bool m_bColumnArea;
    [BiffRecordPosAttribute("2", "2", "1")]
private bool m_bPageArea;
    [BiffRecordPosAttribute("2", "3", "1")]
private bool m_bDataArea;
    [BiffRecordPosAttribute("3", "1", "1")]
private bool m_bNoHeader;
    [BiffRecordPosAttribute("3", "2", "1")]
private bool m_bNoData;
    [BiffRecordPosAttribute("3", "3", "1")]
private bool m_bGrandRow;
    [BiffRecordPosAttribute("3", "4", "1")]
private bool m_bGrandColumn;
    [BiffRecordPosAttribute("3", "5", "1")]
private bool m_bGrandRowSav;
    [BiffRecordPosAttribute("3", "6", "1")]
private bool m_bCacheBased;
    [BiffRecordPosAttribute("3", "7", "1")]
private bool m_bGrandColSav;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usFiltersCount;
    private Nullable`1<int> m_iReserved;
    public byte Dim { get; public set; }
    public byte CurrentField { get; public set; }
    public ushort Options { get; }
    public bool IsRowArea { get; public set; }
    public bool IsColumnArea { get; public set; }
    public bool IsPageArea { get; public set; }
    public bool IsDataArea { get; public set; }
    public ushort RuleType { get; public set; }
    public bool IsNoHeader { get; public set; }
    public bool IsNoData { get; public set; }
    public bool IsGrandRow { get; public set; }
    public bool IsGrandColumn { get; public set; }
    public bool IsGrandRowSav { get; public set; }
    public bool IsCacheBased { get; public set; }
    public bool IsGrandColSav { get; public set; }
    public ushort Reserved { get; public set; }
    public ushort FiltersCount { get; public set; }
    public RuleDataRecord(Stream stream, Int32& itemSize);
    public RuleDataRecord(int iReserve);
    public byte get_Dim();
    public void set_Dim(byte value);
    public byte get_CurrentField();
    public void set_CurrentField(byte value);
    public ushort get_Options();
    public bool get_IsRowArea();
    public void set_IsRowArea(bool value);
    public bool get_IsColumnArea();
    public void set_IsColumnArea(bool value);
    public bool get_IsPageArea();
    public void set_IsPageArea(bool value);
    public bool get_IsDataArea();
    public void set_IsDataArea(bool value);
    public ushort get_RuleType();
    public void set_RuleType(ushort value);
    public bool get_IsNoHeader();
    public void set_IsNoHeader(bool value);
    public bool get_IsNoData();
    public void set_IsNoData(bool value);
    public bool get_IsGrandRow();
    public void set_IsGrandRow(bool value);
    public bool get_IsGrandColumn();
    public void set_IsGrandColumn(bool value);
    public bool get_IsGrandRowSav();
    public void set_IsGrandRowSav(bool value);
    public bool get_IsCacheBased();
    public void set_IsCacheBased(bool value);
    public bool get_IsGrandColSav();
    public void set_IsGrandColSav(bool value);
    public ushort get_Reserved();
    public void set_Reserved(ushort value);
    public ushort get_FiltersCount();
    public void set_FiltersCount(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("242")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.RuleFilterRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    private static ushort DEF_DIM_BITMASK;
    private static ushort DEF_DIM_START_BIT;
    private static ushort DEF_SXVD_BITMASK;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions1;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bRowField;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bColumnField;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bPageField;
    [BiffRecordPosAttribute("0", "3", "1")]
private bool m_bDataField;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usOptions2;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usFunction;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usViewItemCount;
    public ushort Options1 { get; }
    public bool IsRowField { get; public set; }
    public bool IsColumnField { get; public set; }
    public bool IsPageField { get; public set; }
    public bool IsDataField { get; public set; }
    public ushort Dim { get; public set; }
    public ushort Options2 { get; }
    public ushort SXVD { get; public set; }
    public FunctionType Function { get; public set; }
    public ushort ViewItemCount { get; public set; }
    public RuleFilterRecord(Stream stream, Int32& itemSize);
    public RuleFilterRecord(int iReserve);
    public ushort get_Options1();
    public bool get_IsRowField();
    public void set_IsRowField(bool value);
    public bool get_IsColumnField();
    public void set_IsColumnField(bool value);
    public bool get_IsPageField();
    public void set_IsPageField(bool value);
    public bool get_IsDataField();
    public void set_IsDataField(bool value);
    public ushort get_Dim();
    public void set_Dim(ushort value);
    public ushort get_Options2();
    public ushort get_SXVD();
    public void set_SXVD(ushort value);
    public FunctionType get_Function();
    public void set_Function(FunctionType value);
    public ushort get_ViewItemCount();
    public void set_ViewItemCount(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("247")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.SelectionInfoRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usWindowIndex;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usPaneIndex;
    public ushort WindowIndex { get; public set; }
    public ushort PaneIndex { get; public set; }
    public int MaximumMemorySize { get; }
    public int MinimumRecordSize { get; }
    public SelectionInfoRecord(Stream stream, Int32& itemSize);
    public SelectionInfoRecord(int iReserve);
    public ushort get_WindowIndex();
    public void set_WindowIndex(ushort value);
    public ushort get_PaneIndex();
    public void set_PaneIndex(ushort value);
    public virtual int get_MaximumMemorySize();
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("443")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.SQLDataTypeIdRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usDataType;
    public SQLDataType DataType { get; public set; }
    public SQLDataTypeIdRecord(Stream stream, Int32& itemSize);
    public SQLDataTypeIdRecord(int iReserve);
    public SQLDataType get_DataType();
    public void set_DataType(SQLDataType value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("213")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.StreamIdRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usStreamId;
    public ushort StreamId { get; public set; }
    public StreamIdRecord(Stream stream, Int32& itemSize);
    public StreamIdRecord(int iReserve);
    public ushort get_StreamId();
    public void set_StreamId(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("241")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PivotTable.ViewExtendedInfoRecord : BiffRecordRawWithArray {
    private static ushort DEF_WRAP_PAGE_MASK;
    private static int DEF_WRAP_PAGE_START_BIT;
    public static int DEF_WRAPPAGE_MAXVALUE;
    private static int FirstStringOffset;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFormat;
    [BiffRecordPosAttribute("2", "2", "True")]
private short m_sErrorStringLength;
    [BiffRecordPosAttribute("4", "2", "True")]
private short m_sNullStringLength;
    [BiffRecordPosAttribute("6", "2", "True")]
private short m_sTagLength;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usSelectNumber;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usFieldPerRow;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usFieldPerColumn;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usOptions1;
    [BiffRecordPosAttribute("14", "0", "1")]
private bool m_bAcrossPageLay;
    [BiffRecordPosAttribute("14", "5", "1")]
private bool m_bPreserveFormattingNow;
    [BiffRecordPosAttribute("14", "6", "1")]
private bool m_bManualUpdate;
    [BiffRecordPosAttribute("16", "2")]
private ushort m_usOptions2;
    [BiffRecordPosAttribute("16", "0", "1")]
private bool m_bEnableWizard;
    [BiffRecordPosAttribute("16", "1", "1")]
private bool m_bEnableDrilldown;
    [BiffRecordPosAttribute("16", "2", "1")]
private bool m_bEnableFieldDialog;
    [BiffRecordPosAttribute("16", "3", "1")]
private bool m_bPreserveFormatting;
    [BiffRecordPosAttribute("16", "4", "1")]
private bool m_bMergeLabels;
    [BiffRecordPosAttribute("16", "5", "1")]
private bool m_bDisplayErrorString;
    [BiffRecordPosAttribute("16", "6", "1")]
private bool m_bDisplayNullString;
    [BiffRecordPosAttribute("16", "7", "1")]
private bool m_bSubtotalHiddenPageItems;
    [BiffRecordPosAttribute("18", "2", "True")]
private short m_sPageFieldStyleLength;
    [BiffRecordPosAttribute("20", "2", "True")]
private short m_sTableStyleLength;
    [BiffRecordPosAttribute("22", "2", "True")]
private short m_sVacateStyleLength;
    private string m_strErrorString;
    private string m_strNullString;
    private string m_strTag;
    private string m_strPageFieldStyle;
    private string m_strTableStyle;
    private string m_strVacateStyle;
    public ushort Format { get; public set; }
    public short ErrorStringLength { get; }
    public short NullStringLength { get; }
    public short TagLength { get; }
    public ushort SelectNumber { get; public set; }
    public ushort FieldPerRow { get; public set; }
    public ushort FieldPerColumn { get; public set; }
    public ushort Options1 { get; }
    public bool IsAcrossPageLay { get; public set; }
    public bool IsPreserveFormattingNow { get; public set; }
    public bool IsManualUpdate { get; public set; }
    public ushort WrapPage { get; public set; }
    public ushort Options2 { get; public set; }
    public bool IsEnableWizard { get; public set; }
    public bool IsEnableDrilldown { get; public set; }
    public bool IsEnableFieldDialog { get; public set; }
    public bool IsPreserveFormatting { get; public set; }
    public bool IsMergeLabels { get; public set; }
    public bool IsDisplayErrorString { get; public set; }
    public bool IsDisplayNullString { get; public set; }
    public bool IsSubtotalHiddenPageItems { get; public set; }
    public short PageFieldStyleLength { get; }
    public short TableStyleLength { get; }
    public short VacateStyleLength { get; }
    public string ErrorString { get; public set; }
    public string NullString { get; public set; }
    public string Tag { get; public set; }
    public string PageFieldStyle { get; public set; }
    public string TableStyle { get; public set; }
    public string VacateStyle { get; public set; }
    public ViewExtendedInfoRecord(Stream stream, Int32& itemSize);
    public ViewExtendedInfoRecord(int iReserve);
    public ushort get_Format();
    public void set_Format(ushort value);
    public short get_ErrorStringLength();
    public short get_NullStringLength();
    public short get_TagLength();
    public ushort get_SelectNumber();
    public void set_SelectNumber(ushort value);
    public ushort get_FieldPerRow();
    public void set_FieldPerRow(ushort value);
    public ushort get_FieldPerColumn();
    public void set_FieldPerColumn(ushort value);
    public ushort get_Options1();
    public bool get_IsAcrossPageLay();
    public void set_IsAcrossPageLay(bool value);
    public bool get_IsPreserveFormattingNow();
    public void set_IsPreserveFormattingNow(bool value);
    public bool get_IsManualUpdate();
    public void set_IsManualUpdate(bool value);
    public ushort get_WrapPage();
    public void set_WrapPage(ushort value);
    public ushort get_Options2();
    public void set_Options2(ushort value);
    public bool get_IsEnableWizard();
    public void set_IsEnableWizard(bool value);
    public bool get_IsEnableDrilldown();
    public void set_IsEnableDrilldown(bool value);
    public bool get_IsEnableFieldDialog();
    public void set_IsEnableFieldDialog(bool value);
    public bool get_IsPreserveFormatting();
    public void set_IsPreserveFormatting(bool value);
    public bool get_IsMergeLabels();
    public void set_IsMergeLabels(bool value);
    public bool get_IsDisplayErrorString();
    public void set_IsDisplayErrorString(bool value);
    public bool get_IsDisplayNullString();
    public void set_IsDisplayNullString(bool value);
    public bool get_IsSubtotalHiddenPageItems();
    public void set_IsSubtotalHiddenPageItems(bool value);
    public short get_PageFieldStyleLength();
    public short get_TableStyleLength();
    public short get_VacateStyleLength();
    public string get_ErrorString();
    public void set_ErrorString(string value);
    public string get_NullString();
    public void set_NullString(string value);
    public string get_Tag();
    public void set_Tag(string value);
    public string get_PageFieldStyle();
    public void set_PageFieldStyle(string value);
    public string get_TableStyle();
    public void set_TableStyle(string value);
    public string get_VacateStyle();
    public void set_VacateStyle(string value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
[BiffAttribute("14")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PrecisionRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPrecision;
    public ushort IsPrecision { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public PrecisionRecord(Stream stream, Int32& itemSize);
    public PrecisionRecord(int iReserve);
    public ushort get_IsPrecision();
    public void set_IsPrecision(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("77")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PrinterSettingsRecord : BiffRecordWithContinue {
    protected bool AddHeaderToProvider { get; }
    public bool NeedDataArray { get; }
    protected virtual bool get_AddHeaderToProvider();
    public virtual bool get_NeedDataArray();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual object Clone();
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("43")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PrintGridlinesRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPrintGridlines;
    public ushort IsPrintGridlines { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public PrintGridlinesRecord(Stream stream, Int32& itemSize);
    public PrintGridlinesRecord(int iReserve);
    public ushort get_IsPrintGridlines();
    public void set_IsPrintGridlines(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
[BiffAttribute("42")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PrintHeadersRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPrintHeaders;
    public ushort IsPrintHeaders { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public PrintHeadersRecord(Stream stream, Int32& itemSize);
    public PrintHeadersRecord(int iReserve);
    public ushort get_IsPrintHeaders();
    public void set_IsPrintHeaders(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[CLSCompliantAttribute("False")]
[BiffAttribute("161")]
public class Syncfusion.XlsIO.Parser.Biff_Records.PrintSetupRecord : BiffRecordRaw {
    public static ushort ErrorBitMask;
    public static int ErrorStartBit;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usPaperSize;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usScale;
    [BiffRecordPosAttribute("4", "2")]
private short m_sPageStart;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usFitWidth;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usFitHeight;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("10", "0", "1")]
private bool m_bLeftToRight;
    [BiffRecordPosAttribute("10", "1", "1")]
private bool m_bNotLandscape;
    [BiffRecordPosAttribute("10", "2", "1")]
private bool m_bNotValidSettings;
    [BiffRecordPosAttribute("10", "3", "1")]
private bool m_bNoColor;
    [BiffRecordPosAttribute("10", "4", "1")]
private bool m_bDraft;
    [BiffRecordPosAttribute("10", "5", "1")]
private bool m_bNotes;
    [BiffRecordPosAttribute("10", "6", "1")]
private bool m_bNoOrientation;
    [BiffRecordPosAttribute("10", "7", "1")]
private bool m_bUsePage;
    [BiffRecordPosAttribute("11", "1", "1")]
private bool m_bPrintNotes;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usHResolution;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usVResolution;
    [BiffRecordPosAttribute("16", "8", "6")]
private double m_dbHeaderMargin;
    [BiffRecordPosAttribute("24", "8", "6")]
private double m_dbFooterMargin;
    [BiffRecordPosAttribute("32", "2")]
private ushort m_usCopies;
    public ushort PaperSize { get; public set; }
    public ushort Scale { get; public set; }
    public short PageStart { get; public set; }
    public ushort FitWidth { get; public set; }
    public ushort FitHeight { get; public set; }
    public ushort HResolution { get; public set; }
    public ushort VResolution { get; public set; }
    public double HeaderMargin { get; public set; }
    public double FooterMargin { get; public set; }
    public ushort Copies { get; public set; }
    public bool IsLeftToRight { get; public set; }
    public bool IsNotLandscape { get; public set; }
    public bool IsNotValidSettings { get; public set; }
    public bool IsNoColor { get; public set; }
    public bool IsDraft { get; public set; }
    public bool IsNotes { get; public set; }
    public bool IsNoOrientation { get; public set; }
    public bool IsUsePage { get; public set; }
    public bool IsPrintNotesAsDisplayed { get; public set; }
    public ExcelPrintErrors PrintErrors { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public PrintSetupRecord(Stream stream, Int32& itemSize);
    public PrintSetupRecord(int iReserve);
    public ushort get_PaperSize();
    public void set_PaperSize(ushort value);
    public ushort get_Scale();
    public void set_Scale(ushort value);
    public short get_PageStart();
    public void set_PageStart(short value);
    public ushort get_FitWidth();
    public void set_FitWidth(ushort value);
    public ushort get_FitHeight();
    public void set_FitHeight(ushort value);
    public ushort get_HResolution();
    public void set_HResolution(ushort value);
    public ushort get_VResolution();
    public void set_VResolution(ushort value);
    public double get_HeaderMargin();
    public void set_HeaderMargin(double value);
    public double get_FooterMargin();
    public void set_FooterMargin(double value);
    public ushort get_Copies();
    public void set_Copies(ushort value);
    public bool get_IsLeftToRight();
    public void set_IsLeftToRight(bool value);
    public bool get_IsNotLandscape();
    public void set_IsNotLandscape(bool value);
    public bool get_IsNotValidSettings();
    public void set_IsNotValidSettings(bool value);
    public bool get_IsNoColor();
    public void set_IsNoColor(bool value);
    public bool get_IsDraft();
    public void set_IsDraft(bool value);
    public bool get_IsNotes();
    public void set_IsNotes(bool value);
    public bool get_IsNoOrientation();
    public void set_IsNoOrientation(bool value);
    public bool get_IsUsePage();
    public void set_IsUsePage(bool value);
    public bool get_IsPrintNotesAsDisplayed();
    public void set_IsPrintNotesAsDisplayed(bool value);
    public ExcelPrintErrors get_PrintErrors();
    public void set_PrintErrors(ExcelPrintErrors value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("431")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ProtectionRev4Record : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usProtection;
    public ushort IsProtected { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ProtectionRev4Record(Stream stream, Int32& itemSize);
    public ProtectionRev4Record(int iReserve);
    public ushort get_IsProtected();
    public void set_IsProtected(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("18")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ProtectRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usProtection;
    public bool IsProtected { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ProtectRecord(Stream stream, Int32& itemSize);
    public ProtectRecord(int iReserve);
    public bool get_IsProtected();
    public void set_IsProtected(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("2048")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.QuickTipRecord : BiffRecordRawWithArray {
    private static int DEF_FIXED_PART_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRecordId;
    private TAddr m_addrCellRange;
    private string m_strToolTip;
    public TAddr CellRange { get; public set; }
    public string ToolTip { get; public set; }
    public int MinimumRecordSize { get; }
    public QuickTipRecord(Stream stream, Int32& itemSize);
    public QuickTipRecord(int iReserve);
    public TAddr get_CellRange();
    public void set_CellRange(TAddr value);
    public string get_ToolTip();
    public void set_ToolTip(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("2152")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.RangeProtectionRecord : BiffRecordRaw {
    private static int DEF_LENGTH_OFFSET;
    private Byte[] DEF_FIRST_UNKNOWN_BYTES;
    private static int DEF_DATA_OFFSET;
    private Byte[] DEF_SECOND_UNKNOWN_BYTES;
    private static int DEF_SUBRECORD_SIZE;
    private static int DEF_FINISH_OFFSET;
    public static int DEF_MAX_SUBRECORDS_SIZE;
    private ExcelIgnoreError m_ignoreOpt;
    private ErrorIndicatorImpl m_errorIndicator;
    internal MemoryStream m_preservedData;
    internal List`1<UnknownRecord> m_continueRecords;
    public ExcelIgnoreError IgnoreOptions { get; public set; }
    public ErrorIndicatorImpl ErrorIndicator { get; public set; }
    public int MinimumRecordSize { get; }
    public RangeProtectionRecord(Stream stream, Int32& itemSize);
    public RangeProtectionRecord(int iReserve);
    public ExcelIgnoreError get_IgnoreOptions();
    public void set_IgnoreOptions(ExcelIgnoreError value);
    public ErrorIndicatorImpl get_ErrorIndicator();
    public void set_ErrorIndicator(ErrorIndicatorImpl value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    private void OptimizeStorage();
    private IList`1<Rectangle> CombineSameRowRectangles(IList`1<Rectangle> lstRects);
}
[BiffAttribute("449")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.RecalcIdRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "4")]
private UInt32 m_record;
    [BiffRecordPosAttribute("4", "8")]
private UInt32 m_dwBuild;
    public UInt32 RecordId { get; public set; }
    public UInt32 CalcIdentifier { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public RecalcIdRecord(Stream stream, Int32& itemSize);
    public RecalcIdRecord(int iReserve);
    public UInt32 get_RecordId();
    public void set_RecordId(UInt32 value);
    public UInt32 get_CalcIdentifier();
    public void set_CalcIdentifier(UInt32 value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
internal class Syncfusion.XlsIO.Parser.Biff_Records.RecordsPosComparer : object {
    public sealed virtual int Compare(object x, object y);
    public sealed virtual int Compare(BiffRecordPosAttribute x, BiffRecordPosAttribute y);
}
internal class Syncfusion.XlsIO.Parser.Biff_Records.ReflectionCachePair : object {
    private BiffRecordPosAttribute[] m_key;
    private FieldInfo[] m_tag;
    [CompilerGeneratedAttribute]
private EventHandler KeyChanged;
    [CompilerGeneratedAttribute]
private EventHandler TagChanged;
    public BiffRecordPosAttribute[] Key { get; public set; }
    public FieldInfo[] Tag { get; public set; }
    public ReflectionCachePair(BiffRecordPosAttribute[] key, FieldInfo[] tag);
    [CompilerGeneratedAttribute]
public void add_KeyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_KeyChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_TagChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TagChanged(EventHandler value);
    public BiffRecordPosAttribute[] get_Key();
    public void set_Key(BiffRecordPosAttribute[] value);
    public FieldInfo[] get_Tag();
    public void set_Tag(FieldInfo[] value);
    private void OnKeyChanged();
    private void OnTagChanged();
}
[BiffAttribute("15")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.RefModeRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRefMode;
    public ushort IsA1ReferenceMode { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public RefModeRecord(Stream stream, Int32& itemSize);
    public RefModeRecord(int iReserve);
    public ushort get_IsA1ReferenceMode();
    public void set_IsA1ReferenceMode(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("439")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.RefreshAllRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRefreshAll;
    public ushort IsRefreshAll { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public RefreshAllRecord(Stream stream, Int32& itemSize);
    public RefreshAllRecord(int iReserve);
    public ushort get_IsRefreshAll();
    public void set_IsRefreshAll(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("638")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.RKRecord : CellPositionBase {
    internal static int DEF_RECORD_SIZE;
    internal static int DEF_RECORD_SIZE_WITH_HEADER;
    internal static int DEF_NUMBER_OFFSET;
    internal static int DEF_HEADER_NUMBER_OFFSET;
    public static UInt32 DEF_RK_MASK;
    private static int MaxRkNumber;
    private static int MinRkNumber;
    [BiffRecordPosAttribute("6", "4", "True")]
private int m_iNumber;
    [BiffRecordPosAttribute("6", "0", "1")]
private bool m_bValueNotChanged;
    [BiffRecordPosAttribute("6", "1", "1")]
private bool m_bIEEEFloat;
    public int RKNumberInt { get; public set; }
    public double RKNumber { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public int MaximumMemorySize { get; }
    public bool IsNotFloat { get; public set; }
    public bool IsValueChanged { get; public set; }
    public double DoubleValue { get; }
    public object Value { get; public set; }
    public int get_RKNumberInt();
    public void set_RKNumberInt(int value);
    public double get_RKNumber();
    public void set_RKNumber(double value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual int get_MaximumMemorySize();
    public bool get_IsNotFloat();
    public void set_IsNotFloat(bool value);
    public bool get_IsValueChanged();
    public void set_IsValueChanged(bool value);
    protected virtual void ParseCellData(DataProvider provider, int iOffset, ExcelVersion version);
    protected virtual void InfillCellData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public void SetRKNumber(string value);
    public void SetRKNumber(double value);
    public void SetConvertedNumber(int rkNumber);
    public void SetRKRecord(RkRec rc);
    public RkRec GetAsRkRec();
    public static int ConvertToRKNumber(string value);
    public static int ConvertToRKNumber(double value);
    public static double ConvertToDouble(int rkNumber);
    private static int ConvertDouble(long value, bool bValueNotChanged);
    public static double EncodeRK(int value);
    private static double SafeGetDouble(int value);
    public static int ReadValue(DataProvider provider, int recordStart, ExcelVersion version);
    public sealed virtual double get_DoubleValue();
    public sealed virtual object get_Value();
    public sealed virtual void set_Value(object value);
}
[BiffAttribute("520")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.RowRecord : BiffRecordRaw {
    public static ushort DEF_OUTLINE_LEVEL_MASK;
    public static double DEF_MAX_HEIGHT;
    internal static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usRowNumber;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usFirstCol;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usLastCol;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usHeigth;
    [BiffRecordPosAttribute("8", "4", "True")]
private int m_iReserved;
    [BiffRecordPosAttribute("12", "4", "True")]
private OptionFlags m_optionFlags;
    private WorksheetImpl m_sheet;
    public int Options { get; public set; }
    public ushort RowNumber { get; public set; }
    public ushort FirstColumn { get; public set; }
    public ushort LastColumn { get; public set; }
    public ushort Height { get; public set; }
    public ushort ExtendedFormatIndex { get; public set; }
    public ushort OutlineLevel { get; public set; }
    public bool IsCollapsed { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsBadFontHeight { get; public set; }
    public bool IsFormatted { get; public set; }
    public bool IsSpaceAboveRow { get; public set; }
    public bool IsSpaceBelowRow { get; public set; }
    public bool IsGroupShown { get; public set; }
    public int Reserved { get; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public int MaximumMemorySize { get; }
    private ushort Syncfusion.XlsIO.Parser.Biff_Records.IOutline.Index { get; private set; }
    internal WorksheetImpl Worksheet { get; internal set; }
    public RowRecord(Stream stream, Int32& itemSize);
    public RowRecord(int iReserve);
    public int get_Options();
    public void set_Options(int value);
    public ushort get_RowNumber();
    public void set_RowNumber(ushort value);
    public ushort get_FirstColumn();
    public void set_FirstColumn(ushort value);
    public ushort get_LastColumn();
    public void set_LastColumn(ushort value);
    public ushort get_Height();
    public void set_Height(ushort value);
    public sealed virtual ushort get_ExtendedFormatIndex();
    public sealed virtual void set_ExtendedFormatIndex(ushort value);
    public sealed virtual ushort get_OutlineLevel();
    public sealed virtual void set_OutlineLevel(ushort value);
    public sealed virtual bool get_IsCollapsed();
    public sealed virtual void set_IsCollapsed(bool value);
    public sealed virtual bool get_IsHidden();
    public sealed virtual void set_IsHidden(bool value);
    public bool get_IsBadFontHeight();
    public void set_IsBadFontHeight(bool value);
    public bool get_IsFormatted();
    public void set_IsFormatted(bool value);
    public bool get_IsSpaceAboveRow();
    public void set_IsSpaceAboveRow(bool value);
    public bool get_IsSpaceBelowRow();
    public void set_IsSpaceBelowRow(bool value);
    public bool get_IsGroupShown();
    public void set_IsGroupShown(bool value);
    public int get_Reserved();
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual int get_MaximumMemorySize();
    private sealed virtual override ushort Syncfusion.XlsIO.Parser.Biff_Records.IOutline.get_Index();
    private sealed virtual override void Syncfusion.XlsIO.Parser.Biff_Records.IOutline.set_Index(ushort value);
    internal WorksheetImpl get_Worksheet();
    internal void set_Worksheet(WorksheetImpl value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("214")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.RStringRecord : BiffRecordRawWithArray {
    [BiffRecordPosAttribute("0", "2")]
private int m_iRow;
    [BiffRecordPosAttribute("2", "2")]
private int m_iColumn;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usExtFormat;
    private string m_strValue;
    private ushort m_usFRunsNumber;
    private TFormattingRun[] m_arrFormattingRuns;
    public int Row { get; public set; }
    public int Column { get; public set; }
    public ushort ExtendedFormatIndex { get; public set; }
    public string Value { get; public set; }
    public TFormattingRun[] FormattingRun { get; public set; }
    public int MinimumRecordSize { get; }
    private string Syncfusion.XlsIO.Parser.Biff_Records.IStringValue.StringValue { get; }
    public RStringRecord(Stream stream, Int32& itemSize);
    public RStringRecord(int iReserve);
    public sealed virtual int get_Row();
    public sealed virtual void set_Row(int value);
    public sealed virtual int get_Column();
    public sealed virtual void set_Column(int value);
    public sealed virtual ushort get_ExtendedFormatIndex();
    public sealed virtual void set_ExtendedFormatIndex(ushort value);
    public string get_Value();
    public void set_Value(string value);
    public TFormattingRun[] get_FormattingRun();
    public void set_FormattingRun(TFormattingRun[] value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    private sealed virtual override string Syncfusion.XlsIO.Parser.Biff_Records.IStringValue.get_StringValue();
}
[BiffAttribute("95")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SaveRecalcRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usSaveRecalc;
    public ushort RecalcOnSave { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public SaveRecalcRecord(Stream stream, Int32& itemSize);
    public SaveRecalcRecord(int iReserve);
    public ushort get_RecalcOnSave();
    public void set_RecalcOnSave(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("221")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.ScenProtectRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usProtect;
    public bool IsProtected { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public ScenProtectRecord(Stream stream, Int32& itemSize);
    public ScenProtectRecord(int iReserve);
    public bool get_IsProtected();
    public void set_IsProtected(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("29")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SelectionRecord : BiffRecordRaw {
    private static int DEF_FIXED_SIZE;
    private static int DEF_SUB_ITEM_SIZE;
    [BiffRecordPosAttribute("0", "1")]
private byte m_Pane;
    [BiffRecordPosAttribute("1", "2")]
private ushort m_usRowActiveCell;
    [BiffRecordPosAttribute("3", "2")]
private ushort m_usColActiveCell;
    [BiffRecordPosAttribute("5", "2")]
private ushort m_usRefActiveCell;
    [BiffRecordPosAttribute("7", "2")]
private ushort m_usNumRefs;
    private List`1<TAddr> m_arrAddr;
    public byte Pane { get; public set; }
    public ushort RowActiveCell { get; public set; }
    public ushort ColumnActiveCell { get; public set; }
    public ushort RefActiveCell { get; public set; }
    public ushort NumRefs { get; }
    public int MinimumRecordSize { get; }
    public TAddr[] Addr { get; public set; }
    public SelectionRecord(Stream stream, Int32& itemSize);
    public SelectionRecord(int iReserve);
    public byte get_Pane();
    public void set_Pane(byte value);
    public ushort get_RowActiveCell();
    public void set_RowActiveCell(ushort value);
    public ushort get_ColumnActiveCell();
    public void set_ColumnActiveCell(ushort value);
    public ushort get_RefActiveCell();
    public void set_RefActiveCell(ushort value);
    public ushort get_NumRefs();
    public virtual int get_MinimumRecordSize();
    public TAddr[] get_Addr();
    public void set_Addr(TAddr[] value);
    public void SetSelection(int iIndex, TAddr addr);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual object Clone();
}
[BiffAttribute("1212")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SharedFormulaRecord : BiffRecordRaw {
    private static int DEF_FIXED_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private int m_iFirstRow;
    [BiffRecordPosAttribute("2", "2")]
private int m_iLastRow;
    [BiffRecordPosAttribute("4", "1")]
private int m_iFirstColumn;
    [BiffRecordPosAttribute("5", "1")]
private int m_iLastColumn;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usReserved;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usExpressionLen;
    private Byte[] m_arrExpression;
    private Ptg[] m_arrFormula;
    public int FirstRow { get; public set; }
    public int LastRow { get; public set; }
    public int FirstColumn { get; public set; }
    public int LastColumn { get; public set; }
    public ushort ExpressionLen { get; }
    public Byte[] Expression { get; public set; }
    public Ptg[] Formula { get; public set; }
    public ushort Reserved { get; }
    public int MinimumRecordSize { get; }
    public SharedFormulaRecord(Stream stream, Int32& itemSize);
    public SharedFormulaRecord(int iReserve);
    public sealed virtual int get_FirstRow();
    public sealed virtual void set_FirstRow(int value);
    public sealed virtual int get_LastRow();
    public sealed virtual void set_LastRow(int value);
    public sealed virtual int get_FirstColumn();
    public sealed virtual void set_FirstColumn(int value);
    public sealed virtual int get_LastColumn();
    public sealed virtual void set_LastColumn(int value);
    public ushort get_ExpressionLen();
    public Byte[] get_Expression();
    public void set_Expression(Byte[] value);
    public sealed virtual Ptg[] get_Formula();
    public void set_Formula(Ptg[] value);
    public ushort get_Reserved();
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("131")]
[BiffAttribute("132")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SheetCenterRecord : BiffRecordRaw {
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCenter;
    public ushort IsCenter { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public SheetCenterRecord(Stream stream, Int32& itemSize);
    public SheetCenterRecord(int iReserve);
    public ushort get_IsCenter();
    public void set_IsCenter(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("2146")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SheetLayoutRecord : BiffRecordRaw {
    public static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2", "True")]
private short m_id;
    [BiffRecordPosAttribute("2", "4", "True")]
private int m_iReserved1;
    [BiffRecordPosAttribute("6", "4", "True")]
private int m_iReserved2;
    [BiffRecordPosAttribute("10", "2", "True")]
private short m_sReserved3;
    [BiffRecordPosAttribute("12", "4", "True")]
private int m_uSize;
    [BiffRecordPosAttribute("16", "4", "True")]
private int m_iColorIndex;
    private short m_usOptions;
    private int m_colorType;
    private int m_colorValue;
    private double m_tintShade;
    public short Id { get; public set; }
    public int Reserved1 { get; public set; }
    public int Reserved2 { get; public set; }
    public short Reserved3 { get; public set; }
    public int Unknown { get; public set; }
    public int ColorIndex { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public int MaximumMemorySize { get; }
    internal bool IsCondFmtCalc { get; }
    internal bool IsNotPublished { get; }
    internal ColorType ColorType { get; internal set; }
    internal int ColorValue { get; internal set; }
    internal double TintShade { get; internal set; }
    internal short Options { get; internal set; }
    public SheetLayoutRecord(Stream stream, Int32& itemSize);
    public SheetLayoutRecord(int iReserve);
    public short get_Id();
    public void set_Id(short value);
    public int get_Reserved1();
    public void set_Reserved1(int value);
    public int get_Reserved2();
    public void set_Reserved2(int value);
    public short get_Reserved3();
    public void set_Reserved3(short value);
    public int get_Unknown();
    public void set_Unknown(int value);
    public int get_ColorIndex();
    public void set_ColorIndex(int value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual int get_MaximumMemorySize();
    internal bool get_IsCondFmtCalc();
    internal bool get_IsNotPublished();
    internal ColorType get_ColorType();
    internal void set_ColorType(ColorType value);
    internal int get_ColorValue();
    internal void set_ColorValue(int value);
    internal double get_TintShade();
    internal void set_TintShade(double value);
    internal short get_Options();
    internal void set_Options(short value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    internal bool IsBitEnabled(long inputValue, int compareValue);
}
[BiffAttribute("2151")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SheetProtectionRecord : BiffRecordRaw {
    public static int ErrorIndicatorType;
    private static int DEF_OPTION_OFFSET;
    private static int DEF_STORE_SIZE;
    private Byte[] DEF_EMBEDED_DATA;
    [BiffRecordPosAttribute("19", "2")]
private ushort m_usOpt;
    private bool m_bIsContainProtection;
    private short m_sType;
    public int ProtectedOptions { get; public set; }
    public bool ContainProtection { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    internal short Type { get; internal set; }
    public SheetProtectionRecord(Stream stream, Int32& itemSize);
    public SheetProtectionRecord(int iReserve);
    public int get_ProtectedOptions();
    public void set_ProtectedOptions(int value);
    public bool get_ContainProtection();
    public void set_ContainProtection(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    internal short get_Type();
    internal void set_Type(short value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("144")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SortRecord : BiffRecordRaw {
    private static ushort TableIndexBitMask;
    private static int TableIndexStartBit;
    private static int DEF_FIXED_PART_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("0", "0", "1")]
private bool m_bSortColumns;
    [BiffRecordPosAttribute("0", "1", "1")]
private bool m_bFirstDesc;
    [BiffRecordPosAttribute("0", "2", "1")]
private bool m_bSecondDesc;
    [BiffRecordPosAttribute("0", "3", "1")]
private bool m_bThirdDesc;
    [BiffRecordPosAttribute("0", "4", "1")]
private bool m_bCaseSensitive;
    [BiffRecordPosAttribute("2", "1")]
private byte m_FirstKeyLen;
    [BiffRecordPosAttribute("3", "1")]
private byte m_SecondKeyLen;
    [BiffRecordPosAttribute("4", "1")]
private byte m_ThirdKeyLen;
    private string m_strFirstKey;
    private string m_strSecondKey;
    private string m_strThirdKey;
    public bool IsSortColumns { get; public set; }
    public bool IsFirstDesc { get; public set; }
    public bool IsSecondDesc { get; public set; }
    public bool IsThirdDesc { get; public set; }
    public bool IsCaseSensitive { get; public set; }
    public ushort TableIndex { get; public set; }
    public byte FirstKeyLen { get; }
    public byte SecondKeyLen { get; }
    public byte ThirdKeyLen { get; }
    public string FirstKey { get; public set; }
    public string SecondKey { get; public set; }
    public string ThirdKey { get; public set; }
    public int MinimumRecordSize { get; }
    public SortRecord(Stream stream, Int32& itemSize);
    public SortRecord(int iReserve);
    public bool get_IsSortColumns();
    public void set_IsSortColumns(bool value);
    public bool get_IsFirstDesc();
    public void set_IsFirstDesc(bool value);
    public bool get_IsSecondDesc();
    public void set_IsSecondDesc(bool value);
    public bool get_IsThirdDesc();
    public void set_IsThirdDesc(bool value);
    public bool get_IsCaseSensitive();
    public void set_IsCaseSensitive(bool value);
    public ushort get_TableIndex();
    public void set_TableIndex(ushort value);
    public byte get_FirstKeyLen();
    public byte get_SecondKeyLen();
    public byte get_ThirdKeyLen();
    public string get_FirstKey();
    public void set_FirstKey(string value);
    public string get_SecondKey();
    public void set_SecondKey(string value);
    public string get_ThirdKey();
    public void set_ThirdKey(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private int GetStringSize(string strValue);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("252")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SSTRecord : BiffRecordWithContinue {
    private static int DEF_OPTIONS_OFFET;
    [BiffRecordPosAttribute("0", "4")]
private UInt32 m_uiNumberOfStrings;
    [BiffRecordPosAttribute("4", "4")]
private UInt32 m_uiNumberOfUniqueStrings;
    private Object[] m_arrStrings;
    private Int32[] m_arrStringsPos;
    private Int32[] m_arrStringOffset;
    private bool m_bAutoAttach;
    public UInt32 NumberOfStrings { get; public set; }
    public UInt32 NumberOfUniqueStrings { get; }
    public Object[] Strings { get; public set; }
    public Int32[] StringsStreamPos { get; }
    public Int32[] StringsOffsets { get; }
    public bool AutoAttachContinue { get; public set; }
    public bool NeedDataArray { get; }
    public UInt32 get_NumberOfStrings();
    public void set_NumberOfStrings(UInt32 value);
    public UInt32 get_NumberOfUniqueStrings();
    public Object[] get_Strings();
    public void set_Strings(Object[] value);
    public Int32[] get_StringsStreamPos();
    public Int32[] get_StringsOffsets();
    public bool get_AutoAttachContinue();
    public void set_AutoAttachContinue(bool value);
    public virtual bool get_NeedDataArray();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    private void InfillText(IntPtrContinueRecordBuilder builder, StringType options, int iFormattingSize, int totalLen, Byte[] arrStringData);
    private void InfillFormatting(IntPtrContinueRecordBuilder builder, Byte[] arrFormattingData, int iFormattingSize);
    private void PrognoseRecordSize();
    public static void EnsureSize(Byte[]& arrBuffer, int iSize);
    private void InternalDataIntegrityCheck(int iCurPos);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("519")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.StringRecord : BiffRecordRaw {
    private static int DEF_FIXED_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usStringLength;
    private string m_strValue;
    private bool m_bIsUnicode;
    public string Value { get; public set; }
    public int MinimumRecordSize { get; }
    public StringRecord(Stream stream, Int32& itemSize);
    public StringRecord(int iReserve);
    public string get_Value();
    public void set_Value(string value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
internal class Syncfusion.XlsIO.Parser.Biff_Records.StyleExtRecord : BiffRecordRaw {
    private static int StartLength;
    private FutureHeader m_header;
    [BiffRecordPosAttribute("12", "0", "1")]
private bool m_bIsBuildIn;
    [BiffRecordPosAttribute("12", "1", "1")]
private bool m_bIsHidden;
    [BiffRecordPosAttribute("12", "2", "1")]
private bool m_bIsCustom;
    [BiffRecordPosAttribute("12", "8")]
private long m_reserved;
    private ushort m_category;
    private ushort m_builtInData;
    private string m_strName;
    private byte m_OutlineStyleLevel;
    [BiffRecordPosAttribute("2", "1")]
private ushort m_BuildInOrNameLen;
    private ushort m_xfPropCount;
    private Byte[] m_preservedProperties;
    public bool IsBuildInStyle { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsCustom { get; public set; }
    public string StyleName { get; public set; }
    public ushort Category { get; public set; }
    public bool get_IsBuildInStyle();
    public void set_IsBuildInStyle(bool value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsCustom();
    public void set_IsCustom(bool value);
    public string get_StyleName();
    public void set_StyleName(string value);
    public ushort get_Category();
    public void set_Category(ushort value);
    private void InitializeObjects();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("659")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.StyleRecord : BiffRecordRaw {
    private static ushort DEF_XF_INDEX_BIT_MASK;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usExtFormatIndex;
    [BiffRecordPosAttribute("1", "7", "1")]
private bool m_bIsBuildIn;
    [BiffRecordPosAttribute("2", "1")]
private byte m_BuildInOrNameLen;
    private byte m_OutlineStyleLevel;
    private string m_strName;
    private string m_strNameCache;
    private ushort m_DefXFIndex;
    private bool m_isBuiltInCustomized;
    private bool m_isAsciiConverted;
    public bool IsBuildInStyle { get; public set; }
    internal bool IsAsciiConverted { get; internal set; }
    public ushort ExtendedFormatIndex { get; public set; }
    public byte BuildInOrNameLen { get; public set; }
    public byte OutlineStyleLevel { get; public set; }
    public string StyleName { get; public set; }
    internal string StyleNameCache { get; internal set; }
    public bool IsBuiltIncustomized { get; public set; }
    public int MinimumRecordSize { get; }
    public string Name { get; }
    internal ushort DefXFIndex { get; internal set; }
    public StyleRecord(Stream stream, Int32& itemSize);
    public StyleRecord(int iReserve);
    public bool get_IsBuildInStyle();
    public void set_IsBuildInStyle(bool value);
    internal bool get_IsAsciiConverted();
    internal void set_IsAsciiConverted(bool value);
    public ushort get_ExtendedFormatIndex();
    public void set_ExtendedFormatIndex(ushort value);
    public byte get_BuildInOrNameLen();
    public void set_BuildInOrNameLen(byte value);
    public byte get_OutlineStyleLevel();
    public void set_OutlineStyleLevel(byte value);
    public string get_StyleName();
    public void set_StyleName(string value);
    internal string get_StyleNameCache();
    internal void set_StyleNameCache(string value);
    public bool get_IsBuiltIncustomized();
    public void set_IsBuiltIncustomized(bool value);
    public virtual int get_MinimumRecordSize();
    public sealed virtual string get_Name();
    internal ushort get_DefXFIndex();
    internal void set_DefXFIndex(ushort value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public virtual void CopyTo(BiffRecordRaw raw);
}
[BiffAttribute("430")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.SupBookRecord : BiffRecordWithContinue {
    public static ushort INTERNAL_REFERENCE;
    public static ushort ADDIN_FUNCTION;
    private bool m_bIsInternal;
    private bool m_bIsAddInFunction;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usSheetNumber;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usUrlLength;
    private string m_strUrl;
    private List`1<string> m_arrSheetNames;
    private string m_strOriginalURL;
    public bool IsInternalReference { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public string URL { get; public set; }
    public string OriginalURL { get; public set; }
    public List`1<string> SheetNames { get; public set; }
    public ushort SheetNumber { get; public set; }
    public bool IsAddInFunctions { get; public set; }
    public bool get_IsInternalReference();
    public void set_IsInternalReference(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public string get_URL();
    public void set_URL(string value);
    public string get_OriginalURL();
    public void set_OriginalURL(string value);
    public List`1<string> get_SheetNames();
    public void set_SheetNames(List`1<string> value);
    public ushort get_SheetNumber();
    public void set_SheetNumber(ushort value);
    public bool get_IsAddInFunctions();
    public void set_IsAddInFunctions(bool value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    private void PrognoseRecordSize();
    public virtual int GetStoreSize(ExcelVersion version);
    internal object Clone();
}
[BiffAttribute("317")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.TabIdRecord : BiffRecordRaw {
    private UInt16[] m_arrTabIds;
    public UInt16[] TabIds { get; public set; }
    public TabIdRecord(Stream stream, Int32& itemSize);
    public TabIdRecord(int iReserve);
    public UInt16[] get_TabIds();
    public void set_TabIds(UInt16[] value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    private void InternalDataIntegrityCheck();
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("566")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.TableRecord : BiffRecordRaw {
    public static ushort OperationModeBitMask;
    public static int OperationModeStartBit;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFirstRow;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usLastRow;
    [BiffRecordPosAttribute("4", "1")]
private byte m_FirstCol;
    [BiffRecordPosAttribute("5", "1")]
private byte m_LastCol;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("6", "0", "1")]
private bool m_bRecalculate;
    [BiffRecordPosAttribute("6", "1", "1")]
private bool m_bCalculateOnOpen;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usInputCellRow;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usInputCellCol;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usInputCellRowForCol;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usInputCellColForCol;
    public ushort FirstRow { get; public set; }
    public ushort LastRow { get; public set; }
    public byte FirstCol { get; public set; }
    public byte LastCol { get; public set; }
    public bool IsRecalculate { get; public set; }
    public bool IsCalculateOnOpen { get; public set; }
    public ushort OperationMode { get; public set; }
    public ushort InputCellRow { get; public set; }
    public ushort InputCellColumn { get; public set; }
    public ushort InputCellRowForColumn { get; public set; }
    public ushort InputCellColumnForColumn { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public TableRecord(Stream stream, Int32& itemSize);
    public TableRecord(int iReserve);
    public ushort get_FirstRow();
    public void set_FirstRow(ushort value);
    public ushort get_LastRow();
    public void set_LastRow(ushort value);
    public byte get_FirstCol();
    public void set_FirstCol(byte value);
    public byte get_LastCol();
    public void set_LastCol(byte value);
    public bool get_IsRecalculate();
    public void set_IsRecalculate(bool value);
    public bool get_IsCalculateOnOpen();
    public void set_IsCalculateOnOpen(bool value);
    public ushort get_OperationMode();
    public void set_OperationMode(ushort value);
    public ushort get_InputCellRow();
    public void set_InputCellRow(ushort value);
    public ushort get_InputCellColumn();
    public void set_InputCellColumn(ushort value);
    public ushort get_InputCellRowForColumn();
    public void set_InputCellRowForColumn(ushort value);
    public ushort get_InputCellColumnForColumn();
    public void set_InputCellColumnForColumn(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.TAddr : ValueType {
    private int m_iFirstRow;
    private int m_iLastRow;
    private int m_iFirstCol;
    private int m_iLastCol;
    public int FirstCol { get; public set; }
    public int FirstRow { get; public set; }
    public int LastCol { get; public set; }
    public int LastRow { get; public set; }
    public TAddr(int iFirstRow, int iFirstCol, int iLastRow, int iLastCol);
    public TAddr(int iTopLeftIndex, int iBottomRightIndex);
    public TAddr(Rectangle rect);
    public int get_FirstCol();
    public void set_FirstCol(int value);
    public int get_FirstRow();
    public void set_FirstRow(int value);
    public int get_LastCol();
    public void set_LastCol(int value);
    public int get_LastRow();
    public void set_LastRow(int value);
    public virtual string ToString();
    public Rectangle GetRectangle();
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.TBIFFRecord : Enum {
    public int value__;
    public static TBIFFRecord Array;
    public static TBIFFRecord AutoFilter;
    public static TBIFFRecord AutoFilterInfo;
    public static TBIFFRecord BOF;
    public static TBIFFRecord BOF2;
    public static TBIFFRecord Backup;
    public static TBIFFRecord Begin;
    public static TBIFFRecord Bitmap;
    public static TBIFFRecord Blank;
    public static TBIFFRecord BookBool;
    public static TBIFFRecord BoolErr;
    public static TBIFFRecord BottomMargin;
    public static TBIFFRecord BoundSheet;
    public static TBIFFRecord CF;
    public static TBIFFRecord CF12;
    public static TBIFFRecord CFEx;
    public static TBIFFRecord CRN;
    public static TBIFFRecord CalCount;
    public static TBIFFRecord CalcMode;
    public static TBIFFRecord CodeName;
    public static TBIFFRecord Codepage;
    public static TBIFFRecord ColumnInfo;
    public static TBIFFRecord CondFMT;
    public static TBIFFRecord CondFMT12;
    public static TBIFFRecord Continue;
    public static TBIFFRecord ContinueFrt;
    public static TBIFFRecord Country;
    public static TBIFFRecord CustomProperty;
    public static TBIFFRecord DBCell;
    public static TBIFFRecord DCON;
    public static TBIFFRecord DCONBIN;
    public static TBIFFRecord DCONNAME;
    public static TBIFFRecord DCONRef;
    public static TBIFFRecord DSF;
    public static TBIFFRecord DV;
    public static TBIFFRecord DVal;
    public static TBIFFRecord DateWindow1904;
    public static TBIFFRecord DefaultColWidth;
    public static TBIFFRecord DefaultRowHeight;
    public static TBIFFRecord Delta;
    public static TBIFFRecord Dimensions;
    public static TBIFFRecord EOF;
    public static TBIFFRecord End;
    public static TBIFFRecord ExtSST;
    public static TBIFFRecord ExtSSTInfoSub;
    public static TBIFFRecord ExtendedFormat;
    public static TBIFFRecord ExtendedFormatCRC;
    public static TBIFFRecord ExtendedXFRecord;
    public static TBIFFRecord ExternCount;
    public static TBIFFRecord ExternName;
    public static TBIFFRecord ExternSheet;
    public static TBIFFRecord FilePass;
    public static TBIFFRecord FileSharing;
    public static TBIFFRecord FilterMode;
    public static TBIFFRecord FnGroupCount;
    public static TBIFFRecord Font;
    public static TBIFFRecord Footer;
    public static TBIFFRecord Format;
    public static TBIFFRecord Formula;
    public static TBIFFRecord Gridset;
    public static TBIFFRecord Guts;
    public static TBIFFRecord HasBasic;
    public static TBIFFRecord HCenter;
    public static TBIFFRecord HLink;
    public static TBIFFRecord Header;
    public static TBIFFRecord HeaderFooterImage;
    public static TBIFFRecord HeaderFooter;
    public static TBIFFRecord HideObj;
    public static TBIFFRecord HorizontalPageBreaks;
    public static TBIFFRecord ImageData;
    public static TBIFFRecord Index;
    public static TBIFFRecord InterfaceEnd;
    public static TBIFFRecord InterfaceHdr;
    public static TBIFFRecord Iteration;
    public static TBIFFRecord Label;
    public static TBIFFRecord LabelRanges;
    public static TBIFFRecord LabelSST;
    public static TBIFFRecord LeftMargin;
    public static TBIFFRecord MMS;
    public static TBIFFRecord MergeCells;
    public static TBIFFRecord MSODrawing;
    public static TBIFFRecord MSODrawingGroup;
    public static TBIFFRecord MulBlank;
    public static TBIFFRecord MulRK;
    public static TBIFFRecord Name;
    public static TBIFFRecord Note;
    public static TBIFFRecord Number;
    public static TBIFFRecord OBJ;
    public static TBIFFRecord ObjectProtect;
    public static TBIFFRecord OleSize;
    public static TBIFFRecord Palette;
    public static TBIFFRecord Pane;
    public static TBIFFRecord Password;
    public static TBIFFRecord PasswordRev4;
    public static TBIFFRecord Precision;
    public static TBIFFRecord PrintedChartSize;
    public static TBIFFRecord PrinterSettings;
    public static TBIFFRecord PrintGridlines;
    public static TBIFFRecord PrintHeaders;
    public static TBIFFRecord PrintSetup;
    public static TBIFFRecord Protect;
    public static TBIFFRecord ProtectionRev4;
    public static TBIFFRecord QuickTip;
    public static TBIFFRecord RefMode;
    public static TBIFFRecord RefreshAll;
    public static TBIFFRecord RightMargin;
    public static TBIFFRecord RK;
    public static TBIFFRecord Row;
    public static TBIFFRecord RString;
    public static TBIFFRecord SaveRecalc;
    public static TBIFFRecord ScenProtect;
    public static TBIFFRecord Selection;
    public static TBIFFRecord DxGCol;
    public static TBIFFRecord Setup;
    public static TBIFFRecord StartBlock;
    public static TBIFFRecord ShapePropsStream;
    public static TBIFFRecord EndBlock;
    public static TBIFFRecord SharedFormula;
    public static TBIFFRecord SharedFormula2;
    public static TBIFFRecord SheetLayout;
    public static TBIFFRecord Sort;
    public static TBIFFRecord SST;
    public static TBIFFRecord String;
    public static TBIFFRecord Style;
    public static TBIFFRecord StyleExt;
    public static TBIFFRecord SupBook;
    public static TBIFFRecord TabId;
    public static TBIFFRecord Table;
    public static TBIFFRecord Template;
    public static TBIFFRecord TextObject;
    public static TBIFFRecord Theme;
    public static TBIFFRecord TopMargin;
    public static TBIFFRecord UseSelFS;
    public static TBIFFRecord VCenter;
    public static TBIFFRecord VerticalPageBreaks;
    public static TBIFFRecord WSBool;
    public static TBIFFRecord WindowOne;
    public static TBIFFRecord WindowProtect;
    public static TBIFFRecord WindowTwo;
    public static TBIFFRecord WindowZoom;
    public static TBIFFRecord WriteAccess;
    public static TBIFFRecord WriteProtection;
    public static TBIFFRecord XCT;
    public static TBIFFRecord Unknown;
    public static TBIFFRecord UnkBegin;
    public static TBIFFRecord RecalcId;
    public static TBIFFRecord UnkMarker;
    public static TBIFFRecord UnkMacrosDisable;
    public static TBIFFRecord BookExt;
    public static TBIFFRecord ChartDataLabels;
    public static TBIFFRecord ChartChart;
    public static TBIFFRecord ChartSeries;
    public static TBIFFRecord ChartDataFormat;
    public static TBIFFRecord ChartLineFormat;
    public static TBIFFRecord ChartMarkerFormat;
    public static TBIFFRecord ChartAreaFormat;
    public static TBIFFRecord ChartPieFormat;
    public static TBIFFRecord ChartAttachedLabel;
    public static TBIFFRecord ChartAttachedLabelLayout;
    public static TBIFFRecord PlotAreaLayout;
    public static TBIFFRecord ChartSeriesText;
    public static TBIFFRecord ChartChartFormat;
    public static TBIFFRecord ChartLegend;
    public static TBIFFRecord ChartSeriesList;
    public static TBIFFRecord ChartBar;
    public static TBIFFRecord ChartLine;
    public static TBIFFRecord ChartPie;
    public static TBIFFRecord ChartArea;
    public static TBIFFRecord ChartScatter;
    public static TBIFFRecord ChartChartLine;
    public static TBIFFRecord ChartAxis;
    public static TBIFFRecord ChartTick;
    public static TBIFFRecord ChartValueRange;
    public static TBIFFRecord ChartCatserRange;
    public static TBIFFRecord ChartAxisLineFormat;
    public static TBIFFRecord ChartFormatLink;
    public static TBIFFRecord ChartDefaultText;
    public static TBIFFRecord ChartText;
    public static TBIFFRecord ChartFontx;
    public static TBIFFRecord ChartObjectLink;
    public static TBIFFRecord ChartFrame;
    public static TBIFFRecord ChartPlotArea;
    public static TBIFFRecord Chart3D;
    public static TBIFFRecord ChartPicf;
    public static TBIFFRecord ChartDropBar;
    public static TBIFFRecord ChartRadar;
    public static TBIFFRecord ChartSurface;
    public static TBIFFRecord ChartRadarArea;
    public static TBIFFRecord ChartAxisParent;
    public static TBIFFRecord ChartLegendxn;
    public static TBIFFRecord ChartShtprops;
    public static TBIFFRecord ChartSertocrt;
    public static TBIFFRecord ChartAxesUsed;
    public static TBIFFRecord ChartSbaseref;
    public static TBIFFRecord ChartSerParent;
    public static TBIFFRecord ChartSerAuxTrend;
    public static TBIFFRecord ChartIfmt;
    public static TBIFFRecord ChartPos;
    public static TBIFFRecord ChartAlruns;
    public static TBIFFRecord ChartAI;
    public static TBIFFRecord ChartTextPropsStream;
    public static TBIFFRecord ChartSerAuxErrBar;
    public static TBIFFRecord ChartSerFmt;
    public static TBIFFRecord Chart3DDataFormat;
    public static TBIFFRecord ChartFbi;
    public static TBIFFRecord ChartBoppop;
    public static TBIFFRecord ChartAxcext;
    public static TBIFFRecord ChartDat;
    public static TBIFFRecord ChartPlotGrowth;
    public static TBIFFRecord ChartSiIndex;
    public static TBIFFRecord ChartGelFrame;
    public static TBIFFRecord ChartBoppCustom;
    public static TBIFFRecord ChartShadow;
    public static TBIFFRecord ChartUnits;
    public static TBIFFRecord ChartWrapper;
    public static TBIFFRecord ChartAxisDisplayUnits;
    public static TBIFFRecord ChartBegDispUnit;
    public static TBIFFRecord ChartEndDispUnit;
    public static TBIFFRecord ChartAxisOffset;
    public static TBIFFRecord CacheData;
    public static TBIFFRecord CacheDataEx;
    public static TBIFFRecord DataItem;
    public static TBIFFRecord ViewExtendedInfo;
    public static TBIFFRecord ExternalSourceInfo;
    public static TBIFFRecord SQLDataTypeId;
    public static TBIFFRecord RuleFilter;
    public static TBIFFRecord ParsedExpression;
    public static TBIFFRecord PivotFormat;
    public static TBIFFRecord PivotFormula;
    public static TBIFFRecord StreamId;
    public static TBIFFRecord RowColumnFieldId;
    public static TBIFFRecord LineItemArray;
    public static TBIFFRecord PivotName;
    public static TBIFFRecord PivotNamePair;
    public static TBIFFRecord PageItem;
    public static TBIFFRecord RuleData;
    public static TBIFFRecord SelectionInfo;
    public static TBIFFRecord SheetProtection;
    public static TBIFFRecord RangeProtection;
    public static TBIFFRecord PivotString;
    public static TBIFFRecord PivotSourceInfo;
    public static TBIFFRecord PageItemIndexes;
    public static TBIFFRecord PageItemNameCount;
    public static TBIFFRecord PivotViewFields;
    public static TBIFFRecord PivotViewFieldsEx;
    public static TBIFFRecord PivotViewItem;
    public static TBIFFRecord PivotViewDefinition;
    public static TBIFFRecord PivotViewSource;
    public static TBIFFRecord PivotDateTime;
    public static TBIFFRecord PivotDouble;
    public static TBIFFRecord PivotEmpty;
    public static TBIFFRecord PivotBoolean;
    public static TBIFFRecord PivotError;
    public static TBIFFRecord PivotField;
    public static TBIFFRecord PivotIndexList;
    public static TBIFFRecord PivotViewAdditionalInfo;
    public static TBIFFRecord Compatibility;
    public static TBIFFRecord DBQueryExt;
    public static TBIFFRecord Qsi;
    public static TBIFFRecord Qsif;
    public static TBIFFRecord DbOrParamQry;
    public static TBIFFRecord QsiSXTag;
    public static TBIFFRecord Feature12;
    public static TBIFFRecord Qsir;
    public static TBIFFRecord ChartMlFrt;
    public static TBIFFRecord DConn;
    public static TBIFFRecord OleDbConn;
    public static TBIFFRecord ExtString;
    public static TBIFFRecord TextQuery;
    public static TBIFFRecord PageLayoutView;
}
[BiffAttribute("96")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.TemplateRecord : BiffRecordRaw {
    public int MaximumRecordSize { get; }
    public TemplateRecord(Stream stream, Int32& itemSize);
    public TemplateRecord(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("438")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.TextObjectRecord : BiffRecordRawWithArray {
    public static ushort HAlignmentBitMask;
    public static ushort VAlignmentBitMask;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usOptions;
    [BiffRecordPosAttribute("1", "2", "1")]
private bool m_bLockText;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usRotation;
    [BiffRecordPosAttribute("4", "4")]
private UInt32 m_uiReserved1;
    [BiffRecordPosAttribute("8", "2")]
private ushort m_usReserved2;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usTextLen;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usFormattingRunsLen;
    [BiffRecordPosAttribute("14", "4")]
private UInt32 m_uiReserved3;
    public ExcelCommentHAlign HAlignment { get; public set; }
    public ExcelCommentVAlign VAlignment { get; public set; }
    public bool IsLockText { get; public set; }
    public ExcelTextRotation Rotation { get; public set; }
    public ushort TextLen { get; public set; }
    public ushort FormattingRunsLen { get; public set; }
    public UInt32 Reserved1 { get; }
    public ushort Reserved2 { get; }
    public UInt32 Reserved3 { get; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public TextObjectRecord(Stream stream, Int32& itemSize);
    public TextObjectRecord(int iReserve);
    public ExcelCommentHAlign get_HAlignment();
    public void set_HAlignment(ExcelCommentHAlign value);
    public ExcelCommentVAlign get_VAlignment();
    public void set_VAlignment(ExcelCommentVAlign value);
    public bool get_IsLockText();
    public void set_IsLockText(bool value);
    public ExcelTextRotation get_Rotation();
    public void set_Rotation(ExcelTextRotation value);
    public ushort get_TextLen();
    public void set_TextLen(ushort value);
    public ushort get_FormattingRunsLen();
    public void set_FormattingRunsLen(ushort value);
    public UInt32 get_Reserved1();
    public ushort get_Reserved2();
    public UInt32 get_Reserved3();
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
}
public class Syncfusion.XlsIO.Parser.Biff_Records.TextWithFormat : object {
    private static byte DEF_COMPRESSED_MASK;
    private static byte DEF_RICHTEXT_MASK;
    internal static int DEF_FR_SIZE;
    private static byte DEF_PLAIN_OPTIONS;
    private static byte DEF_RTF_OPTIONS;
    private SortedList`2<int, int> m_arrFormattingRuns;
    private string m_strValue;
    private int m_iDefaultIndex;
    private StringType m_options;
    private bool m_bNeedDefragment;
    public int RefCount;
    private string m_rtfText;
    private bool m_isPreserved;
    private bool m_isEncoded;
    internal string RtfText { get; internal set; }
    public string Text { get; public set; }
    internal SortedList`2<int, int> FormattingRuns { get; }
    internal SortedList`2<int, int> InnerFormattingRuns { get; }
    public int DefaultFontIndex { get; public set; }
    public int FormattingRunsCount { get; }
    public bool IsPreserved { get; public set; }
    internal bool IsEncoded { get; internal set; }
    public TextWithFormat(int fontIndex);
    public static string op_Implicit(TextWithFormat format);
    public static TextWithFormat op_Explicit(string value);
    internal string get_RtfText();
    internal void set_RtfText(string value);
    public string get_Text();
    public void set_Text(string value);
    internal SortedList`2<int, int> get_FormattingRuns();
    internal SortedList`2<int, int> get_InnerFormattingRuns();
    public int get_DefaultFontIndex();
    public void set_DefaultFontIndex(int value);
    public int get_FormattingRunsCount();
    public bool get_IsPreserved();
    public void set_IsPreserved(bool value);
    internal bool get_IsEncoded();
    internal void set_IsEncoded(bool value);
    public void SetTextFontIndex(int iStartPos, int iEndPos, int iFontIndex);
    public int GetTextFontIndex(int iPos);
    public int GetTextFontIndex(int iPos, bool iscopy);
    public int GetFontByIndex(int iIndex);
    public int GetPositionByIndex(int iIndex);
    public void SetFontByIndex(int index, int iFontIndex);
    public void ClearFormatting();
    public sealed virtual int CompareTo(object obj);
    internal static int CompareFormattingRuns(SortedList`2<int, int> fRuns1, SortedList`2<int, int> fRuns2);
    private void CreateFormattingRuns();
    private int GetPreviousPosition(int iPos);
    internal void RemoveAllInsideRange(int iStartPos, int iEndPos);
    public void Defragment();
    public static void CheckOffset(int len, int iOffset);
    public void CopyFormattingTo(TextWithFormat twin);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual int Parse(Byte[] data, int iOffset);
    public int GetTextSize();
    public int GetFormattingSize();
    public Byte[] SerializeFormatting();
    public int SerializeFormatting(Byte[] arrBuffer, int iOffset, bool bDefragment);
    public StringType GetOptions();
    private string GetText(Byte[] data, ushort usChartCount, bool bIsUnicode, Int32& iOffset);
    private void ParseFormattingRuns(Byte[] data, int iOffset, int iFRCount);
    internal void ParseFormattingRuns(Byte[] data);
    private void ParseFarEastData(Byte[] data, int iOffset, int iFarEastDataLen);
    private Byte[] SerializeFormattingRuns();
    private int SerializeFormattingRuns(Byte[] arrDestination, int iOffset, bool bDefragment);
    public sealed virtual object Clone();
    public TextWithFormat TypedClone();
    public TextWithFormat Clone(Dictionary`2<int, int> dicFontIndexes);
    private void UpdateFontIndexes(Dictionary`2<int, int> dicFontIndexes);
    internal void ReplaceFont(int oldFontIndex, int newFontIndex);
    internal void RemoveAtStart(int length);
    internal void RemoveAtEnd(int length);
}
public enum Syncfusion.XlsIO.Parser.Biff_Records.TFieldType : Enum {
    public int value__;
    public static TFieldType Integer;
    public static TFieldType Bit;
    public static TFieldType String;
    public static TFieldType String16Bit;
    public static TFieldType OEMString;
    public static TFieldType OEMString16Bit;
    public static TFieldType Float;
}
[BiffAttribute("445")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.UnkMacrosDisable : BiffRecordRaw {
    public int MaximumRecordSize { get; }
    public UnkMacrosDisable(Stream stream, Int32& itemSize);
    public UnkMacrosDisable(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("448")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.UnknownBeginRecord : BiffRecordRaw {
    public int MaximumRecordSize { get; }
    public UnknownBeginRecord(Stream stream, Int32& itemSize);
    public UnknownBeginRecord(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.UnknownEndRecord : BiffRecordRaw {
    private static int DEF_UNKNOWN1;
    private static int DEF_UNKNOWN2;
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "4", "True")]
private int m_iUnknown1;
    [BiffRecordPosAttribute("4", "4", "True")]
private int m_iUnknown2;
    public int Unknown1 { get; public set; }
    public int Unknown2 { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public UnknownEndRecord(Stream stream, Int32& itemSize);
    public UnknownEndRecord(int iReserve);
    public int get_Unknown1();
    public void set_Unknown1(int value);
    public int get_Unknown2();
    public void set_Unknown2(int value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("239")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.UnknownMarkerRecord : BiffRecordRaw {
    private static ushort DEF_RESERVED1;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usReserved0;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usReserved1;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usReserved2;
    public ushort Reserved0 { get; public set; }
    public ushort Reserved1 { get; public set; }
    public ushort Reserved2 { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public UnknownMarkerRecord(Stream stream, Int32& itemSize);
    public UnknownMarkerRecord(int iReserve);
    public ushort get_Reserved0();
    public void set_Reserved0(ushort value);
    public ushort get_Reserved1();
    public void set_Reserved1(ushort value);
    public ushort get_Reserved2();
    public void set_Reserved2(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("0")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.UnknownRecord : BiffRecordRawWithArray {
    private static UnknownRecord _empty;
    private Byte[] m_tempData;
    public static BiffRecordRaw Empty { get; }
    public bool NeedDataArray { get; }
    public int RecordCode { get; public set; }
    public int DataLen { get; public set; }
    public UnknownRecord(Stream stream, Int32& itemSize);
    public UnknownRecord(BinaryReader reader, Int32& itemSize);
    public UnknownRecord(int iReserve);
    private static UnknownRecord();
    public static BiffRecordRaw get_Empty();
    public virtual bool get_NeedDataArray();
    public int get_RecordCode();
    public void set_RecordCode(int value);
    public int get_DataLen();
    public void set_DataLen(int value);
    public virtual void ParseStructure();
    public virtual void InfillInternalData(ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
    public sealed virtual object Clone();
}
[BiffAttribute("352")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.UseSelFSRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usFlags;
    public bool Flags { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public UseSelFSRecord(Stream stream, Int32& itemSize);
    public UseSelFSRecord(int iReserve);
    public bool get_Flags();
    public void set_Flags(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("26")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.VerticalPageBreaksRecord : BiffRecordRaw {
    internal static int DEF_FIXED_PART_SIZE;
    internal static int DEF_SUBITEM_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usBreaksCount;
    private TVPageBreak[] m_arrPageBreaks;
    public TVPageBreak[] PageBreaks { get; public set; }
    public int MinimumRecordSize { get; }
    public VerticalPageBreaksRecord(Stream stream, Int32& itemSize);
    public VerticalPageBreaksRecord(int iReserve);
    public TVPageBreak[] get_PageBreaks();
    public void set_PageBreaks(TVPageBreak[] value);
    public virtual int get_MinimumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("61")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.WindowOneRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usHHold;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usVHold;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usWidth;
    [BiffRecordPosAttribute("6", "2")]
private ushort m_usHeight;
    [BiffRecordPosAttribute("8", "2")]
private OptionFlags m_options;
    [BiffRecordPosAttribute("10", "2")]
private ushort m_usSelectedTab;
    [BiffRecordPosAttribute("12", "2")]
private ushort m_usDisplayedTab;
    [BiffRecordPosAttribute("14", "2")]
private ushort m_usNumSelTabs;
    [BiffRecordPosAttribute("16", "2")]
private ushort m_usTabWidthRatio;
    public ushort HHold { get; public set; }
    public ushort VHold { get; public set; }
    public ushort Width { get; public set; }
    public ushort Height { get; public set; }
    public ushort SelectedTab { get; public set; }
    public ushort DisplayedTab { get; public set; }
    public ushort NumSelectedTabs { get; public set; }
    public ushort TabWidthRatio { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsIconic { get; public set; }
    public bool IsHScroll { get; public set; }
    public bool IsVScroll { get; public set; }
    public bool IsTabs { get; public set; }
    public bool Reserved { get; public set; }
    public ushort Options { get; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public WindowOneRecord(Stream stream, Int32& itemSize);
    public WindowOneRecord(int iReserve);
    public ushort get_HHold();
    public void set_HHold(ushort value);
    public ushort get_VHold();
    public void set_VHold(ushort value);
    public ushort get_Width();
    public void set_Width(ushort value);
    public ushort get_Height();
    public void set_Height(ushort value);
    public ushort get_SelectedTab();
    public void set_SelectedTab(ushort value);
    public ushort get_DisplayedTab();
    public void set_DisplayedTab(ushort value);
    public ushort get_NumSelectedTabs();
    public void set_NumSelectedTabs(ushort value);
    public ushort get_TabWidthRatio();
    public void set_TabWidthRatio(ushort value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsIconic();
    public void set_IsIconic(bool value);
    public bool get_IsHScroll();
    public void set_IsHScroll(bool value);
    public bool get_IsVScroll();
    public void set_IsVScroll(bool value);
    public bool get_IsTabs();
    public void set_IsTabs(bool value);
    public bool get_Reserved();
    public void set_Reserved(bool value);
    public ushort get_Options();
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("25")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.WindowProtectRecord : BiffRecordRaw {
    private static int DefaultRecordSize;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usProtection;
    public bool IsProtected { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public WindowProtectRecord(Stream stream, Int32& itemSize);
    public WindowProtectRecord(int iReserve);
    public bool get_IsProtected();
    public void set_IsProtected(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[BiffAttribute("574")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.WindowTwoRecord : BiffRecordRaw {
    private static int DEF_MAX_RECORD_SIZE;
    internal static int DEF_MAX_CHART_SHEET_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private OptionFlags m_options;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usTopRow;
    [BiffRecordPosAttribute("4", "2")]
private ushort m_usLeftCol;
    [BiffRecordPosAttribute("6", "4", "True")]
private int m_iHeaderColor;
    private ushort m_usPageBreakZoom;
    private ushort m_usNormalZoom;
    private int m_iReserved;
    private int m_iOriginalLength;
    public ushort TopRow { get; public set; }
    public ushort LeftColumn { get; public set; }
    public int HeaderColor { get; public set; }
    public bool IsDisplayFormulas { get; public set; }
    public bool IsDisplayGridlines { get; public set; }
    public bool IsDisplayRowColHeadings { get; public set; }
    public bool IsFreezePanes { get; public set; }
    public bool IsDisplayZeros { get; public set; }
    public bool IsDefaultHeader { get; public set; }
    public bool IsArabic { get; public set; }
    public bool IsDisplayGuts { get; public set; }
    public bool IsFreezePanesNoSplit { get; public set; }
    public bool IsSelected { get; public set; }
    public bool IsPaged { get; public set; }
    public bool IsSavedInPageBreakPreview { get; public set; }
    public ushort Options { get; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    internal int OriginalLength { get; internal set; }
    public WindowTwoRecord(Stream stream, Int32& itemSize);
    public WindowTwoRecord(int iReserve);
    public ushort get_TopRow();
    public void set_TopRow(ushort value);
    public ushort get_LeftColumn();
    public void set_LeftColumn(ushort value);
    public int get_HeaderColor();
    public void set_HeaderColor(int value);
    public bool get_IsDisplayFormulas();
    public void set_IsDisplayFormulas(bool value);
    public bool get_IsDisplayGridlines();
    public void set_IsDisplayGridlines(bool value);
    public bool get_IsDisplayRowColHeadings();
    public void set_IsDisplayRowColHeadings(bool value);
    public bool get_IsFreezePanes();
    public void set_IsFreezePanes(bool value);
    public bool get_IsDisplayZeros();
    public void set_IsDisplayZeros(bool value);
    public bool get_IsDefaultHeader();
    public void set_IsDefaultHeader(bool value);
    public bool get_IsArabic();
    public void set_IsArabic(bool value);
    public bool get_IsDisplayGuts();
    public void set_IsDisplayGuts(bool value);
    public bool get_IsFreezePanesNoSplit();
    public void set_IsFreezePanesNoSplit(bool value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_IsPaged();
    public void set_IsPaged(bool value);
    public bool get_IsSavedInPageBreakPreview();
    public void set_IsSavedInPageBreakPreview(bool value);
    public ushort get_Options();
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    internal int get_OriginalLength();
    internal void set_OriginalLength(int value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("160")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.WindowZoomRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usNscl;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usDscl;
    public ushort NumMagnification { get; public set; }
    public ushort DenumMagnification { get; public set; }
    public int Zoom { get; public set; }
    public WindowZoomRecord(Stream stream, Int32& itemSize);
    public WindowZoomRecord(int iReserve);
    public ushort get_NumMagnification();
    public void set_NumMagnification(ushort value);
    public ushort get_DenumMagnification();
    public void set_DenumMagnification(ushort value);
    public int get_Zoom();
    public void set_Zoom(int value);
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[BiffAttribute("92")]
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.Biff_Records.WriteAccessRecord : BiffRecordRaw {
    private static string DEF_USER_NAME;
    private static int DEF_MIN_SIZE;
    private static int DEF_MAX_SIZE;
    private static byte DEF_SPACE;
    private string m_strUserName;
    public string UserName { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public bool IsAllowShortData { get; }
    public WriteAccessRecord(Stream stream, Int32& itemSize);
    public WriteAccessRecord(int iReserve);
    public string get_UserName();
    public void set_UserName(string value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual bool get_IsAllowShortData();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[CLSCompliantAttribute("False")]
[BiffAttribute("134")]
public class Syncfusion.XlsIO.Parser.Biff_Records.WriteProtection : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    public int MaximumRecordSize { get; }
    public WriteProtection(Stream stream, Int32& itemSize);
    public WriteProtection(int iReserve);
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
    public virtual int GetStoreSize(ExcelVersion version);
}
[CLSCompliantAttribute("False")]
[BiffAttribute("129")]
public class Syncfusion.XlsIO.Parser.Biff_Records.WSBoolRecord : BiffRecordRaw {
    public static ushort DisplayGutsMask;
    public static int DisplayGutsStartBit;
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private OptionFlags m_options;
    public bool IsAutoBreaks { get; public set; }
    public bool IsDialog { get; public set; }
    public bool IsApplyStyles { get; public set; }
    public bool IsRowSumsBelow { get; public set; }
    public bool IsRowSumsRight { get; public set; }
    public bool IsFitToPage { get; public set; }
    public ushort DisplayGuts { get; public set; }
    public bool IsAlternateExpression { get; public set; }
    public bool IsAlternateFormula { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public int MaximumMemorySize { get; }
    public WSBoolRecord(Stream stream, Int32& itemSize);
    public WSBoolRecord(int iReserve);
    public bool get_IsAutoBreaks();
    public void set_IsAutoBreaks(bool value);
    public bool get_IsDialog();
    public void set_IsDialog(bool value);
    public bool get_IsApplyStyles();
    public void set_IsApplyStyles(bool value);
    public bool get_IsRowSumsBelow();
    public void set_IsRowSumsBelow(bool value);
    public bool get_IsRowSumsRight();
    public void set_IsRowSumsRight(bool value);
    public bool get_IsFitToPage();
    public void set_IsFitToPage(bool value);
    public ushort get_DisplayGuts();
    public void set_DisplayGuts(ushort value);
    public bool get_IsAlternateExpression();
    public void set_IsAlternateExpression(bool value);
    public bool get_IsAlternateFormula();
    public void set_IsAlternateFormula(bool value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual int get_MaximumMemorySize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[CLSCompliantAttribute("False")]
[BiffAttribute("89")]
public class Syncfusion.XlsIO.Parser.Biff_Records.XCTRecord : BiffRecordRaw {
    private static int DEF_RECORD_SIZE;
    [BiffRecordPosAttribute("0", "2")]
private ushort m_usCRNCount;
    [BiffRecordPosAttribute("2", "2")]
private ushort m_usSheetTableIndex;
    public ushort CRNCount { get; public set; }
    public ushort SheetTableIndex { get; public set; }
    public int MinimumRecordSize { get; }
    public int MaximumRecordSize { get; }
    public XCTRecord(Stream stream, Int32& itemSize);
    public XCTRecord(int iReserve);
    public ushort get_CRNCount();
    public void set_CRNCount(ushort value);
    public ushort get_SheetTableIndex();
    public void set_SheetTableIndex(ushort value);
    public virtual int get_MinimumRecordSize();
    public virtual int get_MaximumRecordSize();
    public virtual void ParseStructure(DataProvider provider, int iOffset, int iLength, ExcelVersion version);
    public virtual void InfillInternalData(DataProvider provider, int iOffset, ExcelVersion version);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.BiffReader : object {
    private static int DEF_BUFFER_SIZE;
    private static int BIFF8_VERSION;
    private Stream m_stream;
    private BinaryReader m_reader;
    private bool m_bDisposed;
    private bool m_bDestroyStream;
    private int m_iMinimalVersion;
    private Byte[] m_arrBuffer;
    private DataProvider m_dataProvider;
    public Stream BaseStream { get; }
    public BinaryReader BaseReader { get; }
    public int MinimalVersion { get; public set; }
    public Byte[] Buffer { get; }
    public DataProvider DataProvider { get; }
    public bool IsEOF { get; }
    public BiffReader(Stream stream);
    public BiffReader(Stream stream, bool bControlStream);
    public Stream get_BaseStream();
    public BinaryReader get_BaseReader();
    public int get_MinimalVersion();
    public void set_MinimalVersion(int value);
    public Byte[] get_Buffer();
    public DataProvider get_DataProvider();
    public sealed virtual void Dispose();
    public bool get_IsEOF();
    public BiffRecordRaw GetRecord();
    public BiffRecordRaw GetRecord(IDecryptor decryptor);
    public BiffRecordRaw PeekRecord();
    public TBIFFRecord PeekRecordType();
    public BiffRecordRaw SeekOnBOFRecord();
    public BiffRecordRaw SeekOnRecord(TBIFFRecord recordCode);
    protected BiffRecordRaw TestPeekRecord();
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.BiffRecordFactory : object {
    private static int DEF_RESERVE_SIZE;
    private static Dictionary`2<int, BiffRecordRaw> m_dict;
    private static BiffRecordFactory();
    private static void FillFactory();
    public static BiffRecordRaw GetRecord(TBIFFRecord type);
    public static BiffRecordRaw GetRecord(int type);
    public static BiffRecordRaw GetUntypedRecord(Stream stream);
    public static BiffRecordRaw GetUntypedRecord(BinaryReader reader);
    public static BiffRecordRaw GetRecord(int type, BinaryReader reader, DataProvider provider, IDecryptor decryptor, Byte[] arrBuffer);
    public static BiffRecordRaw GetRecord(TBIFFRecord type, BinaryReader reader, Byte[] arrBuffer);
    public static BiffRecordRaw GetRecord(int type, BinaryReader reader, Byte[] arrBuffer);
    public static BiffRecordRaw GetRecord(BinaryReader reader, DataProvider provider, Byte[] arrBuffer);
    public static BiffRecordRaw GetRecord(BinaryReader reader, DataProvider provider, IDecryptor decryptor, Byte[] arrBuffer);
    public static BiffRecordRaw GetRecord(DataProvider provider, int iOffset, ExcelVersion version);
    public static int ExtractRecordType(BinaryReader reader);
    public static int ExtractRecordType(Stream stream);
}
[CLSCompliantAttribute("False")]
public class Syncfusion.XlsIO.Parser.BiffWriter : object {
    private static int DEF_BUFFER_SIZE;
    private Stream m_stream;
    private bool m_bDisposed;
    private bool m_bDestroyStream;
    private BinaryWriter m_writer;
    private Byte[] m_arrBuffer;
    private ByteArrayDataProvider m_provider;
    public Stream BaseStream { get; }
    public Byte[] Buffer { get; }
    public BiffWriter(Stream stream);
    public BiffWriter(Stream stream, bool bControlsStream);
    public Stream get_BaseStream();
    public Byte[] get_Buffer();
    public sealed virtual void Dispose();
    public void WriteRecord(BiffRecordRaw raw, IEncryptor encryptor);
    [CLSCompliantAttribute("False")]
public void WriteRecord(OffsetArrayList records, IEncryptor encryptor);
    public void WriteRecord(ICollection collection, IEncryptor encryptor);
}
public class Syncfusion.XlsIO.PasswordRequiredEventArgs : EventArgs {
    private bool m_bStopParsing;
    private string m_strNewPassword;
    public bool StopParsing { get; public set; }
    public string NewPassword { get; public set; }
    public bool get_StopParsing();
    public void set_StopParsing(bool value);
    public string get_NewPassword();
    public void set_NewPassword(string value);
}
public class Syncfusion.XlsIO.PasswordRequiredEventHandler : MulticastDelegate {
    public PasswordRequiredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PasswordRequiredEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PasswordRequiredEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Syncfusion.XlsIO.PivotAreaType : Enum {
    public int value__;
    public static PivotAreaType All;
    public static PivotAreaType FieldButton;
    public static PivotAreaType Data;
    public static PivotAreaType None;
    public static PivotAreaType Normal;
    public static PivotAreaType Orgin;
    public static PivotAreaType TopEnd;
    public static PivotAreaType TopRight;
}
public enum Syncfusion.XlsIO.PivotAxisTypes : Enum {
    public int value__;
    public static PivotAxisTypes None;
    public static PivotAxisTypes Row;
    public static PivotAxisTypes Column;
    public static PivotAxisTypes Page;
    public static PivotAxisTypes Data;
}
public enum Syncfusion.XlsIO.PivotAxisTypes2007 : Enum {
    public int value__;
    public static PivotAxisTypes2007 axisRow;
    public static PivotAxisTypes2007 axisCol;
    public static PivotAxisTypes2007 axisPage;
    public static PivotAxisTypes2007 axisValues;
}
public enum Syncfusion.XlsIO.PivotBuiltInStyles : Enum {
    public int value__;
    public static PivotBuiltInStyles PivotStyleMedium28;
    public static PivotBuiltInStyles PivotStyleMedium27;
    public static PivotBuiltInStyles PivotStyleMedium26;
    public static PivotBuiltInStyles PivotStyleMedium25;
    public static PivotBuiltInStyles PivotStyleMedium24;
    public static PivotBuiltInStyles PivotStyleMedium23;
    public static PivotBuiltInStyles PivotStyleMedium22;
    public static PivotBuiltInStyles PivotStyleMedium21;
    public static PivotBuiltInStyles PivotStyleMedium20;
    public static PivotBuiltInStyles PivotStyleMedium19;
    public static PivotBuiltInStyles PivotStyleMedium18;
    public static PivotBuiltInStyles PivotStyleMedium17;
    public static PivotBuiltInStyles PivotStyleMedium16;
    public static PivotBuiltInStyles PivotStyleMedium15;
    public static PivotBuiltInStyles PivotStyleMedium14;
    public static PivotBuiltInStyles PivotStyleMedium13;
    public static PivotBuiltInStyles PivotStyleMedium12;
    public static PivotBuiltInStyles PivotStyleMedium11;
    public static PivotBuiltInStyles PivotStyleMedium10;
    public static PivotBuiltInStyles PivotStyleMedium9;
    public static PivotBuiltInStyles PivotStyleMedium8;
    public static PivotBuiltInStyles PivotStyleMedium7;
    public static PivotBuiltInStyles PivotStyleMedium6;
    public static PivotBuiltInStyles PivotStyleMedium5;
    public static PivotBuiltInStyles PivotStyleMedium4;
    public static PivotBuiltInStyles PivotStyleMedium3;
    public static PivotBuiltInStyles PivotStyleMedium2;
    public static PivotBuiltInStyles PivotStyleMedium1;
    public static PivotBuiltInStyles PivotStyleLight28;
    public static PivotBuiltInStyles PivotStyleLight27;
    public static PivotBuiltInStyles PivotStyleLight26;
    public static PivotBuiltInStyles PivotStyleLight25;
    public static PivotBuiltInStyles PivotStyleLight24;
    public static PivotBuiltInStyles PivotStyleLight23;
    public static PivotBuiltInStyles PivotStyleLight22;
    public static PivotBuiltInStyles PivotStyleLight21;
    public static PivotBuiltInStyles PivotStyleLight20;
    public static PivotBuiltInStyles PivotStyleLight19;
    public static PivotBuiltInStyles PivotStyleLight18;
    public static PivotBuiltInStyles PivotStyleLight17;
    public static PivotBuiltInStyles PivotStyleLight16;
    public static PivotBuiltInStyles PivotStyleLight15;
    public static PivotBuiltInStyles PivotStyleLight14;
    public static PivotBuiltInStyles PivotStyleLight13;
    public static PivotBuiltInStyles PivotStyleLight12;
    public static PivotBuiltInStyles PivotStyleLight11;
    public static PivotBuiltInStyles PivotStyleLight10;
    public static PivotBuiltInStyles PivotStyleLight9;
    public static PivotBuiltInStyles PivotStyleLight8;
    public static PivotBuiltInStyles PivotStyleLight7;
    public static PivotBuiltInStyles PivotStyleLight6;
    public static PivotBuiltInStyles PivotStyleLight5;
    public static PivotBuiltInStyles PivotStyleLight4;
    public static PivotBuiltInStyles PivotStyleLight3;
    public static PivotBuiltInStyles PivotStyleLight2;
    public static PivotBuiltInStyles PivotStyleLight1;
    public static PivotBuiltInStyles PivotStyleDark28;
    public static PivotBuiltInStyles PivotStyleDark27;
    public static PivotBuiltInStyles PivotStyleDark26;
    public static PivotBuiltInStyles PivotStyleDark25;
    public static PivotBuiltInStyles PivotStyleDark24;
    public static PivotBuiltInStyles PivotStyleDark23;
    public static PivotBuiltInStyles PivotStyleDark22;
    public static PivotBuiltInStyles PivotStyleDark21;
    public static PivotBuiltInStyles PivotStyleDark20;
    public static PivotBuiltInStyles PivotStyleDark19;
    public static PivotBuiltInStyles PivotStyleDark18;
    public static PivotBuiltInStyles PivotStyleDark17;
    public static PivotBuiltInStyles PivotStyleDark16;
    public static PivotBuiltInStyles PivotStyleDark15;
    public static PivotBuiltInStyles PivotStyleDark14;
    public static PivotBuiltInStyles PivotStyleDark13;
    public static PivotBuiltInStyles PivotStyleDark12;
    public static PivotBuiltInStyles PivotStyleDark11;
    public static PivotBuiltInStyles PivotStyleDark10;
    public static PivotBuiltInStyles PivotStyleDark9;
    public static PivotBuiltInStyles PivotStyleDark8;
    public static PivotBuiltInStyles PivotStyleDark7;
    public static PivotBuiltInStyles PivotStyleDark6;
    public static PivotBuiltInStyles PivotStyleDark5;
    public static PivotBuiltInStyles PivotStyleDark4;
    public static PivotBuiltInStyles PivotStyleDark3;
    public static PivotBuiltInStyles PivotStyleDark2;
    public static PivotBuiltInStyles PivotStyleDark1;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.PivotDataType : Enum {
    public int value__;
    public static PivotDataType Number;
    public static PivotDataType Integer;
    public static PivotDataType String;
    public static PivotDataType Blank;
    public static PivotDataType Date;
    public static PivotDataType Boolean;
    public static PivotDataType Float;
    public static PivotDataType LongText;
}
public enum Syncfusion.XlsIO.PivotFieldDataFormat : Enum {
    public int value__;
    public static PivotFieldDataFormat Difference;
    public static PivotFieldDataFormat Index;
    public static PivotFieldDataFormat Normal;
    public static PivotFieldDataFormat Percent;
    public static PivotFieldDataFormat PercentageOfDifference;
    public static PivotFieldDataFormat PercentageOfColumn;
    public static PivotFieldDataFormat PercentageOfRow;
    public static PivotFieldDataFormat PercentageOfTotal;
    public static PivotFieldDataFormat PercentageOfParent;
    public static PivotFieldDataFormat PercentageOfParentColumn;
    public static PivotFieldDataFormat PercentageOfParentRow;
    public static PivotFieldDataFormat RankDecending;
    public static PivotFieldDataFormat PercentageOfRunningTotal;
    public static PivotFieldDataFormat RunTotal;
    public static PivotFieldDataFormat RankAscending;
}
public enum Syncfusion.XlsIO.PivotFieldGroupType : Enum {
    public int value__;
    public static PivotFieldGroupType None;
    public static PivotFieldGroupType Hours;
    public static PivotFieldGroupType Minutes;
    public static PivotFieldGroupType Months;
    public static PivotFieldGroupType Quarters;
    public static PivotFieldGroupType Range;
    public static PivotFieldGroupType Seconds;
    public static PivotFieldGroupType Years;
    public static PivotFieldGroupType Days;
}
public enum Syncfusion.XlsIO.PivotFieldSortType : Enum {
    public int value__;
    public static PivotFieldSortType Ascending;
    public static PivotFieldSortType Descending;
    public static PivotFieldSortType Manual;
}
public enum Syncfusion.XlsIO.PivotFilterType : Enum {
    public int value__;
    public static PivotFilterType CaptionBeginsWith;
    public static PivotFilterType CaptionBetween;
    public static PivotFilterType CaptionContains;
    public static PivotFilterType CaptionEndsWith;
    public static PivotFilterType CaptionEqual;
    public static PivotFilterType CaptionGreaterThan;
    public static PivotFilterType CaptionGreaterThanOrEqual;
    public static PivotFilterType CaptionLessThan;
    public static PivotFilterType CaptionLessThanOrEqual;
    public static PivotFilterType CaptionNotBeginsWith;
    public static PivotFilterType CaptionNotBetween;
    public static PivotFilterType CaptionNotContains;
    public static PivotFilterType CaptionNotEndsWith;
    public static PivotFilterType CaptionNotEqual;
    public static PivotFilterType ValueBetween;
    public static PivotFilterType ValueEqual;
    public static PivotFilterType ValueGreaterThan;
    public static PivotFilterType ValueGreaterThanOrEqual;
    public static PivotFilterType ValueLessThan;
    public static PivotFilterType ValueLessThanOrEqual;
    public static PivotFilterType ValueNotBetween;
    public static PivotFilterType ValueNotEqual;
    public static PivotFilterType Count;
    public static PivotFilterType dateNewerThan;
    public static PivotFilterType yearToDate;
    public static PivotFilterType Unknown;
    public static PivotFilterType Sum;
    public static PivotFilterType Percent;
    public static PivotFilterType DateEqual;
    public static PivotFilterType DateNewerThanOrEqual;
    public static PivotFilterType DateBetween;
    public static PivotFilterType DateNotBetween;
    public static PivotFilterType DateNotEqual;
    public static PivotFilterType DateOlderThan;
    public static PivotFilterType DateOlderThanOrEqual;
    public static PivotFilterType NextMonth;
    public static PivotFilterType ThisMonth;
    public static PivotFilterType LastMonth;
    public static PivotFilterType NextYear;
    public static PivotFilterType ThisYear;
    public static PivotFilterType LastYear;
    public static PivotFilterType NexWeek;
    public static PivotFilterType ThisWeek;
    public static PivotFilterType LastWeek;
    public static PivotFilterType M1;
    public static PivotFilterType M2;
    public static PivotFilterType M3;
    public static PivotFilterType M4;
    public static PivotFilterType M5;
    public static PivotFilterType M6;
    public static PivotFilterType M7;
    public static PivotFilterType M8;
    public static PivotFilterType M9;
    public static PivotFilterType M10;
    public static PivotFilterType M11;
    public static PivotFilterType M12;
    public static PivotFilterType Q1;
    public static PivotFilterType Q2;
    public static PivotFilterType Q3;
    public static PivotFilterType Q4;
    public static PivotFilterType NextQuarter;
    public static PivotFilterType ThisQuarter;
    public static PivotFilterType LastQuarter;
    public static PivotFilterType Tomorrow;
    public static PivotFilterType Today;
    public static PivotFilterType Yesterday;
}
public enum Syncfusion.XlsIO.PivotFilterType2007 : Enum {
    public int value__;
    public static PivotFilterType2007 captionBeginsWith;
    public static PivotFilterType2007 captionBetween;
    public static PivotFilterType2007 captionContains;
    public static PivotFilterType2007 captionEndsWith;
    public static PivotFilterType2007 captionEqual;
    public static PivotFilterType2007 captionGreaterThan;
    public static PivotFilterType2007 captionGreaterThanOrEqual;
    public static PivotFilterType2007 captionLessThan;
    public static PivotFilterType2007 captionLessThanOrEqual;
    public static PivotFilterType2007 captionNotBeginsWith;
    public static PivotFilterType2007 captionNotBetween;
    public static PivotFilterType2007 captionNotContains;
    public static PivotFilterType2007 captionNotEndsWith;
    public static PivotFilterType2007 captionNotEqual;
    public static PivotFilterType2007 valueBetween;
    public static PivotFilterType2007 valueEqual;
    public static PivotFilterType2007 valueGreaterThan;
    public static PivotFilterType2007 valueGreaterThanOrEqual;
    public static PivotFilterType2007 valueLessThan;
    public static PivotFilterType2007 valueLessThanOrEqual;
    public static PivotFilterType2007 valueNotBetween;
    public static PivotFilterType2007 valueNotEqual;
    public static PivotFilterType2007 count;
    public static PivotFilterType2007 dateNewerThan;
    public static PivotFilterType2007 yearToDate;
    public static PivotFilterType2007 unknown;
    public static PivotFilterType2007 sum;
    public static PivotFilterType2007 percent;
    public static PivotFilterType2007 dateEqual;
    public static PivotFilterType2007 dateNewerThanOrEqual;
    public static PivotFilterType2007 dateNotBetween;
    public static PivotFilterType2007 dateBetween;
    public static PivotFilterType2007 dateNotEqual;
    public static PivotFilterType2007 dateOlderThan;
    public static PivotFilterType2007 dateOlderThanOrEqual;
    public static PivotFilterType2007 nextMonth;
    public static PivotFilterType2007 thisMonth;
    public static PivotFilterType2007 lastMonth;
    public static PivotFilterType2007 nextYear;
    public static PivotFilterType2007 thisYear;
    public static PivotFilterType2007 lastYear;
    public static PivotFilterType2007 nexWeek;
    public static PivotFilterType2007 thisWeek;
    public static PivotFilterType2007 lastWeek;
    public static PivotFilterType2007 M1;
    public static PivotFilterType2007 M2;
    public static PivotFilterType2007 M3;
    public static PivotFilterType2007 M4;
    public static PivotFilterType2007 M5;
    public static PivotFilterType2007 M6;
    public static PivotFilterType2007 M7;
    public static PivotFilterType2007 M8;
    public static PivotFilterType2007 M9;
    public static PivotFilterType2007 M10;
    public static PivotFilterType2007 M11;
    public static PivotFilterType2007 M12;
    public static PivotFilterType2007 Q1;
    public static PivotFilterType2007 Q2;
    public static PivotFilterType2007 Q3;
    public static PivotFilterType2007 Q4;
    public static PivotFilterType2007 nextQuarter;
    public static PivotFilterType2007 thisQuarter;
    public static PivotFilterType2007 lastQuarter;
    public static PivotFilterType2007 tomorrow;
    public static PivotFilterType2007 today;
    public static PivotFilterType2007 yesterday;
}
public enum Syncfusion.XlsIO.PivotItemType : Enum {
    public int value__;
    public static PivotItemType Average;
    public static PivotItemType Blank;
    public static PivotItemType Count;
    public static PivotItemType CountA;
    public static PivotItemType Data;
    public static PivotItemType Default;
    public static PivotItemType GrandTotal;
    public static PivotItemType Max;
    public static PivotItemType Min;
    public static PivotItemType Product;
    public static PivotItemType StdDev;
    public static PivotItemType StdDevP;
    public static PivotItemType Sum;
    public static PivotItemType Var;
    public static PivotItemType VarP;
}
public enum Syncfusion.XlsIO.PivotItemType2007 : Enum {
    public int value__;
    public static PivotItemType2007 avg;
    public static PivotItemType2007 blank;
    public static PivotItemType2007 count;
    public static PivotItemType2007 countA;
    public static PivotItemType2007 data;
    public static PivotItemType2007 defaults;
    public static PivotItemType2007 grand;
    public static PivotItemType2007 max;
    public static PivotItemType2007 min;
    public static PivotItemType2007 product;
    public static PivotItemType2007 stdDev;
    public static PivotItemType2007 stdDevP;
    public static PivotItemType2007 sum;
    public static PivotItemType2007 var;
    public static PivotItemType2007 varP;
}
public enum Syncfusion.XlsIO.PivotPageAreaFieldsOrder : Enum {
    public int value__;
    public static PivotPageAreaFieldsOrder DownThenOver;
    public static PivotPageAreaFieldsOrder OverThenDown;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.PivotSubtotalItems2007 : Enum {
    public int value__;
    public static PivotSubtotalItems2007 avg;
    public static PivotSubtotalItems2007 count;
    public static PivotSubtotalItems2007 countA;
    public static PivotSubtotalItems2007 max;
    public static PivotSubtotalItems2007 min;
    public static PivotSubtotalItems2007 product;
    public static PivotSubtotalItems2007 stdDev;
    public static PivotSubtotalItems2007 stdDevP;
    public static PivotSubtotalItems2007 sum;
    public static PivotSubtotalItems2007 var;
    public static PivotSubtotalItems2007 varP;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.PivotSubtotalTypes : Enum {
    public int value__;
    public static PivotSubtotalTypes None;
    public static PivotSubtotalTypes Default;
    public static PivotSubtotalTypes Sum;
    public static PivotSubtotalTypes Counta;
    public static PivotSubtotalTypes Average;
    public static PivotSubtotalTypes Max;
    public static PivotSubtotalTypes Min;
    public static PivotSubtotalTypes Product;
    public static PivotSubtotalTypes Count;
    public static PivotSubtotalTypes Stdev;
    public static PivotSubtotalTypes Stdevp;
    public static PivotSubtotalTypes Var;
    public static PivotSubtotalTypes Varp;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.PivotSubtotalTypes2007 : Enum {
    public int value__;
    public static PivotSubtotalTypes2007 average;
    public static PivotSubtotalTypes2007 count;
    public static PivotSubtotalTypes2007 countNums;
    public static PivotSubtotalTypes2007 max;
    public static PivotSubtotalTypes2007 min;
    public static PivotSubtotalTypes2007 product;
    public static PivotSubtotalTypes2007 stdDev;
    public static PivotSubtotalTypes2007 stdDevp;
    public static PivotSubtotalTypes2007 sum;
    public static PivotSubtotalTypes2007 var;
    public static PivotSubtotalTypes2007 varp;
}
public enum Syncfusion.XlsIO.PivotTableRowLayout : Enum {
    public int value__;
    public static PivotTableRowLayout Compact;
    public static PivotTableRowLayout Outline;
    public static PivotTableRowLayout Tabular;
}
internal enum Syncfusion.XlsIO.PlacementType : Enum {
    public int value__;
    public static PlacementType FreeFloating;
    public static PlacementType Move;
    public static PlacementType MoveAndSize;
}
[AttributeUsageAttribute("6141")]
internal class Syncfusion.XlsIO.PreserveAttribute : Attribute {
    public bool AllMembers;
    public bool Conditional;
}
public class Syncfusion.XlsIO.ProgressEventArgs : EventArgs {
    private long m_lPosition;
    private long m_lSize;
    public long Position { get; }
    public long FullSize { get; }
    public ProgressEventArgs(long curPos, long fullSize);
    public long get_Position();
    public long get_FullSize();
}
public class Syncfusion.XlsIO.ProgressEventHandler : MulticastDelegate {
    public ProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProgressEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, ProgressEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.ReadOnlyFileEventArgs : EventArgs {
    private bool m_bRewrite;
    public bool ShouldRewrite { get; public set; }
    public bool get_ShouldRewrite();
    public void set_ShouldRewrite(bool value);
}
public class Syncfusion.XlsIO.ReadOnlyFileEventHandler : MulticastDelegate {
    public ReadOnlyFileEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ReadOnlyFileEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ReadOnlyFileEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Syncfusion.XlsIO.RefreshConnectionEventArgs : EventArgs {
    private DataTable m_dataTable;
    private string m_connectionString;
    private string m_query;
    public string ConnectionString { get; internal set; }
    public string Query { get; internal set; }
    public DataTable Data { get; public set; }
    public string get_ConnectionString();
    internal void set_ConnectionString(string value);
    public string get_Query();
    internal void set_Query(string value);
    public DataTable get_Data();
    public void set_Data(DataTable value);
}
public class Syncfusion.XlsIO.RefreshConnectionEventHandler : MulticastDelegate {
    public RefreshConnectionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RefreshConnectionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RefreshConnectionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Syncfusion.XlsIO.RichTextReader : object {
    private static string GroupStart;
    private static string GroupEnd;
    private static string ControlStart;
    private static string Space;
    private static string CarriegeReturn;
    private static string NewLine;
    private static string SemiColon;
    public static string CrLf;
    internal static string Tab;
    internal static string WindowsCodePage;
    internal static char NonBreakingHyphen;
    internal static char SoftHyphen;
    internal static char NonBreakingSpace;
    private string m_rtfText;
    private WorksheetImpl m_sheet;
    private IRange m_range;
    private RichTextString m_rtf;
    private IApplication m_application;
    private WorkbookImpl m_book;
    private RtfLexer m_lexer;
    private RtfReader m_rtfReader;
    private string m_token;
    private string m_previousToken;
    private string m_previousTokenKey;
    private string m_previousTokenValue;
    private string m_previousControlString;
    private string m_fontName;
    private RtfTableType m_currentTableType;
    private Dictionary`2<string, IFont> m_fontTable;
    private Dictionary`2<int, RtfColor> m_colorTable;
    private Stack`1<string> m_stack;
    private Stack`1<string> m_pictureStack;
    private Stack`1<string> m_destStack;
    private Stack`1<string> m_headerFooterStack;
    private IFont m_rtfFont;
    private IFont m_baseFont;
    private int m_fontNumber;
    private int m_fontChar;
    private string m_fontID;
    private RtfTokenType m_tokenType;
    private RtfTokenType m_prevTokenType;
    private RtfColor m_rtfColorTable;
    private bool m_rtfBold;
    private bool m_rtfItalic;
    private ExcelUnderline m_rtfUnderline;
    private bool m_rtfStrikethrough;
    private bool m_rtfSubscript;
    private bool m_rtfSuperscript;
    private int m_emptyParaCount;
    private bool m_bIsPicture;
    private bool m_bIsDocumentInfo;
    private bool m_bIsShapePicture;
    private bool m_bIsListText;
    private bool m_bIsBookmarkStart;
    private bool m_bIsBookmarkEnd;
    private bool m_bIsHeader;
    private bool m_bIsFooter;
    private bool m_bIsCustomProperties;
    private string m_currStyleID;
    private Dictionary`2<int, TabFormat> m_tabCollection;
    private int m_tabCount;
    private bool m_bIsAccentChar;
    private Stack`1<string> m_backgroundCollectionStack;
    private bool m_bIsBackgroundCollection;
    private string m_styleName;
    private Stack`1<string> m_listLevelStack;
    private bool m_bIsListLevel;
    private Stack`1<int> m_unicodeCountStack;
    private int m_unicodeCount;
    private int m_currColorIndex;
    private Stack`1<Dictionary`2<int, TabFormat>> m_tabFormatStack;
    private Stack`1<string> m_rtfCollectionStack;
    private Stack`1<string> m_shapeInstructionStack;
    private bool m_bIsShapeInstruction;
    private Stack`1<string> m_objectStack;
    private bool m_bIsObject;
    private string m_drawingFieldName;
    private string m_drawingFieldValue;
    private Stack`1<int> m_fieldResultGroupStack;
    private Stack`1<int> m_fieldInstructionGroupStack;
    private Stack`1<int> m_fieldGroupStack;
    private Stack`1<string> m_formFieldDataStack;
    private string m_currentFieldGroupData;
    private string m_defaultCodePage;
    private bool isWrapPolygon;
    private bool m_isCommentRangeStart;
    private bool m_isCommentReference;
    private Stack`1<string> m_commentGroupCollection;
    private Tokens token;
    private Groups m_group;
    private List`1<Groups> m_groupOrder;
    internal bool IsDestinationControlWord { get; }
    internal bool IsFormFieldGroup { get; }
    internal bool IsFieldGroup { get; }
    internal string DefaultCodePage { get; internal set; }
    public RichTextReader(IWorksheet parentSheet);
    internal bool get_IsDestinationControlWord();
    internal bool get_IsFormFieldGroup();
    internal bool get_IsFieldGroup();
    internal string get_DefaultCodePage();
    internal void set_DefaultCodePage(string value);
    internal void ParseToken();
    private bool IsPnListStyleDefined(Groups group);
    internal void Close();
    private void AddFontTableEntry();
    private void AddColorTableEntry();
    private void ParseControlStart();
    private String[] SeparateAnnotationToken(String[] value);
    private bool IsNestedGroup();
    private void ParseGroupStart();
    private void ParseGroupEnd();
    private string RemoveDelimiterSpace(string token);
    private void ParseDocumentElement(string m_token);
    private void ParseControlWords(string token, string tokenKey, string tokenValue, string tokenValue2);
    private void SkipGroup();
    private void ParseFontTable(string token, string tokenKey, string tokenValue);
    private void ParseColorTable(string token, string tokenKey, string tokenValue);
    private void ParseFormattingToken(string token, string tokenKey, string tokenValue, string tokenValue2);
    private void ParseSpecialCharacters(string token);
    private bool IsAccentCharacterNeedToBeOmitted();
    private string GetAccentCharacter(string token);
    private string GetCodePage();
    private bool IsSingleByte();
    private int GetFontCharSet();
    private bool IsSupportedCodePage(int codePage);
    private string GetSupportedCodePage(int codePage);
    private void SortTabCollection();
    private String[] SeperateToken(string token);
    private void ApplyColorTable(Color rtfColor);
    private void SetParsedElementFlag(string token);
    private void Parse();
    private void AppendRTF(string rtfString);
    public void SetRTF(int row, int column, string text);
    public void SetRTF(object shape, string text);
    private void UpdateText(bool isRange);
    protected IRichTextString CreateRichTextString();
}
internal class Syncfusion.XlsIO.RtfLexer : object {
    private static char GroupStart;
    private static char GroupEnd;
    private static char ControlStart;
    private static char Space;
    private static char WhiteSpace;
    private static char NewLine;
    private static char SemiColon;
    private static char DoubleQuotes;
    private static char BackQuote;
    private static char OpenParenthesis;
    private static char CloseParenthesis;
    private static char Ambersion;
    private static char Percentage;
    private static char DollarSign;
    private static char Hash;
    private static char AtSymbol;
    private static char Exclamation;
    private static char Plus;
    private static char Caret;
    private static char OpenBracket;
    private static char CloseBracket;
    private static char ForwardSlash;
    private static char QuestionMark;
    private static char GreaterThan;
    private static char LesserThan;
    private static char Comma;
    private static char VerticalBar;
    private static char Colon;
    private RtfTableType m_currRtfTableType;
    private RtfReader m_rtfReader;
    private string m_token;
    internal char m_prevChar;
    private bool m_bIsImageBytes;
    private bool m_bIsReadNewChar;
    private RtfTokenType m_rtfTokenType;
    private char m_newChar;
    private List`1<string> m_commentStartRange;
    private int m_commentCount;
    private string m_prevToken;
    private string m_commStartRangeTokenKey;
    private bool m_hasCommentTagmark;
    internal Char[] m_delimeters;
    internal bool IsImageBytes { get; internal set; }
    internal List`1<string> CommentRangeStartId { get; internal set; }
    internal RtfTableType CurrRtfTableType { get; internal set; }
    internal RtfTokenType CurrRtfTokenType { get; internal set; }
    internal RtfLexer(RtfReader rtfReader);
    internal bool get_IsImageBytes();
    internal void set_IsImageBytes(bool value);
    internal List`1<string> get_CommentRangeStartId();
    internal void set_CommentRangeStartId(List`1<string> value);
    internal RtfTableType get_CurrRtfTableType();
    internal void set_CurrRtfTableType(RtfTableType value);
    internal RtfTokenType get_CurrRtfTokenType();
    internal void set_CurrRtfTokenType(RtfTokenType value);
    internal string ReadNextToken(string prevTokenKey);
    private string ReadControlWord(string token, string prevTokenKey);
    private string GenerateCommentInfo(string prevToken, string token);
    private string ReadDocumentElement(string token, string prevTokenKey);
    internal void Close();
}
internal class Syncfusion.XlsIO.RtfReader : object {
    private static byte m_endTag;
    private Byte[] m_rtfData;
    private Encoding m_encoding;
    private int m_position;
    private long m_length;
    internal Encoding Encoding { get; }
    internal int Position { get; internal set; }
    internal long Length { get; internal set; }
    internal RtfReader(Stream stream);
    internal Encoding get_Encoding();
    internal int get_Position();
    internal void set_Position(int value);
    internal long get_Length();
    internal void set_Length(long value);
    internal char ReadChar();
    internal string ReadImageBytes();
    internal void Close();
}
internal enum Syncfusion.XlsIO.RtfTableType : Enum {
    public int value__;
    public static RtfTableType FontTable;
    public static RtfTableType ListTable;
    public static RtfTableType ColorTable;
    public static RtfTableType ListOverrideTable;
    public static RtfTableType StyleSheet;
    public static RtfTableType None;
}
internal enum Syncfusion.XlsIO.RtfTokenType : Enum {
    public int value__;
    public static RtfTokenType GroupStart;
    public static RtfTokenType GroupEnd;
    public static RtfTokenType ControlWord;
    public static RtfTokenType Text;
    public static RtfTokenType TableEntry;
    public static RtfTokenType Unknown;
}
public enum Syncfusion.XlsIO.ScalingMode : Enum {
    public int value__;
    public static ScalingMode Normal;
    public static ScalingMode Best;
}
internal enum Syncfusion.XlsIO.ShapeDrawingType : Enum {
    public int value__;
    public static ShapeDrawingType Arc;
    public static ShapeDrawingType Button;
    public static ShapeDrawingType CellsDrawing;
    public static ShapeDrawingType Chart;
    public static ShapeDrawingType CheckBox;
    public static ShapeDrawingType ComboBox;
    public static ShapeDrawingType Comment;
    public static ShapeDrawingType DialogBox;
    public static ShapeDrawingType Group;
    public static ShapeDrawingType GroupBox;
    public static ShapeDrawingType Label;
    public static ShapeDrawingType Line;
    public static ShapeDrawingType ListBox;
    public static ShapeDrawingType OleObject;
    public static ShapeDrawingType Oval;
    public static ShapeDrawingType Picture;
    public static ShapeDrawingType Polygon;
    public static ShapeDrawingType RadioButton;
    public static ShapeDrawingType Rectangle;
    public static ShapeDrawingType ScrollBar;
    public static ShapeDrawingType Spinner;
    public static ShapeDrawingType TextBox;
    public static ShapeDrawingType Unknown;
}
public enum Syncfusion.XlsIO.SheetView : Enum {
    public int value__;
    public static SheetView Normal;
    public static SheetView PageBreakPreview;
    public static SheetView PageLayout;
}
[FlagsAttribute]
public enum Syncfusion.XlsIO.SkipExtRecords : Enum {
    public int value__;
    public static SkipExtRecords None;
    public static SkipExtRecords Macros;
    public static SkipExtRecords Drawings;
    public static SkipExtRecords SummaryInfo;
    public static SkipExtRecords CopySubstreams;
    public static SkipExtRecords All;
}
public enum Syncfusion.XlsIO.SlicerCrossFilterType : Enum {
    public int value__;
    public static SlicerCrossFilterType HideItemsWithNoData;
    public static SlicerCrossFilterType ShowItemsWithNoData;
    public static SlicerCrossFilterType ShowItemsWithDataAtTop;
    public static SlicerCrossFilterType None;
}
public enum Syncfusion.XlsIO.SortingAlgorithms : Enum {
    public int value__;
    public static SortingAlgorithms QuickSort;
    public static SortingAlgorithms HeapSort;
    public static SortingAlgorithms MergeSort;
    public static SortingAlgorithms InsertionSort;
}
public enum Syncfusion.XlsIO.SortOn : Enum {
    public int value__;
    public static SortOn Values;
    public static SortOn CellColor;
    public static SortOn FontColor;
}
public enum Syncfusion.XlsIO.SortOrientation : Enum {
    public int value__;
    public static SortOrientation TopToBottom;
    public static SortOrientation LeftToRight;
}
public class Syncfusion.XlsIO.Sparkline : object {
    private IRange m_dataRange;
    private IRange m_referenceRange;
    private ISparklines m_parent;
    public IRange DataRange { get; public set; }
    public IRange ReferenceRange { get; public set; }
    public int Column { get; }
    public int Row { get; }
    internal ISparklines Parent { get; internal set; }
    public sealed virtual IRange get_DataRange();
    public sealed virtual void set_DataRange(IRange value);
    public sealed virtual IRange get_ReferenceRange();
    public sealed virtual void set_ReferenceRange(IRange value);
    public sealed virtual int get_Column();
    public sealed virtual int get_Row();
    internal ISparklines get_Parent();
    internal void set_Parent(ISparklines value);
}
public enum Syncfusion.XlsIO.SparklineEmptyCells : Enum {
    public int value__;
    public static SparklineEmptyCells Gaps;
    public static SparklineEmptyCells Zero;
    public static SparklineEmptyCells Line;
}
public enum Syncfusion.XlsIO.SparklineType : Enum {
    public int value__;
    public static SparklineType ColumnStacked100;
    public static SparklineType Column;
    public static SparklineType Line;
}
public enum Syncfusion.XlsIO.SparklineVerticalAxisOptions : Enum {
    public int value__;
    public static SparklineVerticalAxisOptions Automatic;
    public static SparklineVerticalAxisOptions Same;
    public static SparklineVerticalAxisOptions Custom;
}
public class Syncfusion.XlsIO.StringEnumerations : object {
    private static string Solid;
    private static string Dash;
    private static string DashDot;
    private static string LongDash;
    private static string SystemDash;
    private static string SystemDot;
    private static string LongDashDot;
    private static string LongDashDotDot;
    private Dictionary`2<string, ExcelShapeDashLineStyle> s_dicLineStyleXmlToEnum;
    private Dictionary`2<ExcelShapeDashLineStyle, string> s_dicLineStyleEnumToXml;
    internal Dictionary`2<string, ExcelShapeDashLineStyle> LineDashTypeXmltoEnum { get; }
    internal Dictionary`2<ExcelShapeDashLineStyle, string> LineDashTypeEnumToXml { get; }
    internal Dictionary`2<string, ExcelShapeDashLineStyle> get_LineDashTypeXmltoEnum();
    internal Dictionary`2<ExcelShapeDashLineStyle, string> get_LineDashTypeEnumToXml();
}
internal enum Syncfusion.XlsIO.StyleEntryModifierEnum : Enum {
    public byte value__;
    public static StyleEntryModifierEnum none;
    public static StyleEntryModifierEnum allowNoFillOverride;
    public static StyleEntryModifierEnum allowNoLineOverride;
}
public enum Syncfusion.XlsIO.TableBuiltInStyles : Enum {
    public int value__;
    public static TableBuiltInStyles TableStyleMedium28;
    public static TableBuiltInStyles TableStyleMedium27;
    public static TableBuiltInStyles TableStyleMedium26;
    public static TableBuiltInStyles TableStyleMedium25;
    public static TableBuiltInStyles TableStyleMedium24;
    public static TableBuiltInStyles TableStyleMedium23;
    public static TableBuiltInStyles TableStyleMedium22;
    public static TableBuiltInStyles TableStyleMedium21;
    public static TableBuiltInStyles TableStyleMedium20;
    public static TableBuiltInStyles TableStyleMedium19;
    public static TableBuiltInStyles TableStyleMedium18;
    public static TableBuiltInStyles TableStyleMedium17;
    public static TableBuiltInStyles TableStyleMedium16;
    public static TableBuiltInStyles TableStyleMedium15;
    public static TableBuiltInStyles TableStyleMedium14;
    public static TableBuiltInStyles TableStyleMedium13;
    public static TableBuiltInStyles TableStyleMedium12;
    public static TableBuiltInStyles TableStyleMedium11;
    public static TableBuiltInStyles TableStyleMedium10;
    public static TableBuiltInStyles TableStyleMedium9;
    public static TableBuiltInStyles TableStyleMedium8;
    public static TableBuiltInStyles TableStyleMedium7;
    public static TableBuiltInStyles TableStyleMedium6;
    public static TableBuiltInStyles TableStyleMedium5;
    public static TableBuiltInStyles TableStyleMedium4;
    public static TableBuiltInStyles TableStyleMedium3;
    public static TableBuiltInStyles TableStyleMedium2;
    public static TableBuiltInStyles TableStyleMedium1;
    public static TableBuiltInStyles TableStyleLight21;
    public static TableBuiltInStyles TableStyleLight20;
    public static TableBuiltInStyles TableStyleLight19;
    public static TableBuiltInStyles TableStyleLight18;
    public static TableBuiltInStyles TableStyleLight17;
    public static TableBuiltInStyles TableStyleLight16;
    public static TableBuiltInStyles TableStyleLight15;
    public static TableBuiltInStyles TableStyleLight14;
    public static TableBuiltInStyles TableStyleLight13;
    public static TableBuiltInStyles TableStyleLight12;
    public static TableBuiltInStyles TableStyleLight11;
    public static TableBuiltInStyles TableStyleLight10;
    public static TableBuiltInStyles TableStyleLight9;
    public static TableBuiltInStyles TableStyleLight8;
    public static TableBuiltInStyles TableStyleLight7;
    public static TableBuiltInStyles TableStyleLight6;
    public static TableBuiltInStyles TableStyleLight5;
    public static TableBuiltInStyles TableStyleLight4;
    public static TableBuiltInStyles TableStyleLight3;
    public static TableBuiltInStyles TableStyleLight2;
    public static TableBuiltInStyles TableStyleLight1;
    public static TableBuiltInStyles TableStyleDark11;
    public static TableBuiltInStyles TableStyleDark10;
    public static TableBuiltInStyles TableStyleDark9;
    public static TableBuiltInStyles TableStyleDark8;
    public static TableBuiltInStyles TableStyleDark7;
    public static TableBuiltInStyles TableStyleDark6;
    public static TableBuiltInStyles TableStyleDark5;
    public static TableBuiltInStyles TableStyleDark4;
    public static TableBuiltInStyles TableStyleDark3;
    public static TableBuiltInStyles TableStyleDark2;
    public static TableBuiltInStyles TableStyleDark1;
    public static TableBuiltInStyles None;
}
[AttributeUsageAttribute("128")]
public class Syncfusion.XlsIO.TemplateMarkerAttributes : Attribute {
    private string m_headerName;
    private string m_numberFormat;
    private bool m_bExclude;
    public bool Exclude { get; }
    public string HeaderName { get; }
    public string NumberFormat { get; }
    public TemplateMarkerAttributes(string headerName);
    public TemplateMarkerAttributes(bool exclude);
    public TemplateMarkerAttributes(bool exclude, string headerName, string numberFormat);
    public TemplateMarkerAttributes(bool exclude, string numberFormat);
    public TemplateMarkerAttributes(string headerName, string numberFormat);
    public bool get_Exclude();
    public string get_HeaderName();
    public string get_NumberFormat();
}
internal class Syncfusion.XlsIO.TextBodyPropertiesHolder : object {
    private TextVertOverflowType m_textVertOverflowType;
    private TextHorzOverflowType m_textHorzOverflowType;
    private TextDirection m_textDirection;
    private double m_leftMarginPt;
    private double m_topMarginPt;
    private double m_rightMarginPt;
    private double m_bottomMarginPt;
    private bool m_wrapTextInShape;
    private TextFrameColumns m_columns;
    private ExcelVerticalAlignment m_verticalAlignment;
    private ExcelHorizontalAlignment m_horizontalAlignment;
    private bool m_isAutoSize;
    private bool m_isAutoMargins;
    private bool m_presetWrapTextInShape;
    internal TextVertOverflowType TextVertOverflowType { get; internal set; }
    internal TextHorzOverflowType TextHorzOverflowType { get; internal set; }
    internal TextDirection TextDirection { get; internal set; }
    internal double LeftMarginPt { get; internal set; }
    internal double TopMarginPt { get; internal set; }
    internal double RightMarginPt { get; internal set; }
    internal double BottomMarginPt { get; internal set; }
    internal bool WrapTextInShape { get; internal set; }
    internal ExcelVerticalAlignment VerticalAlignment { get; internal set; }
    internal ExcelHorizontalAlignment HorizontalAlignment { get; internal set; }
    internal bool IsAutoSize { get; internal set; }
    internal bool IsAutoMargins { get; internal set; }
    internal int Number { get; internal set; }
    internal int SpacingPt { get; internal set; }
    internal bool PresetWrapTextInShape { get; internal set; }
    internal TextVertOverflowType get_TextVertOverflowType();
    internal void set_TextVertOverflowType(TextVertOverflowType value);
    internal TextHorzOverflowType get_TextHorzOverflowType();
    internal void set_TextHorzOverflowType(TextHorzOverflowType value);
    internal TextDirection get_TextDirection();
    internal void set_TextDirection(TextDirection value);
    internal double get_LeftMarginPt();
    internal void set_LeftMarginPt(double value);
    internal double get_TopMarginPt();
    internal void set_TopMarginPt(double value);
    internal double get_RightMarginPt();
    internal void set_RightMarginPt(double value);
    internal double get_BottomMarginPt();
    internal void set_BottomMarginPt(double value);
    internal bool get_WrapTextInShape();
    internal void set_WrapTextInShape(bool value);
    internal ExcelVerticalAlignment get_VerticalAlignment();
    internal void set_VerticalAlignment(ExcelVerticalAlignment value);
    internal ExcelHorizontalAlignment get_HorizontalAlignment();
    internal void set_HorizontalAlignment(ExcelHorizontalAlignment value);
    internal bool get_IsAutoSize();
    internal void set_IsAutoSize(bool value);
    internal bool get_IsAutoMargins();
    internal void set_IsAutoMargins(bool value);
    internal int get_Number();
    internal void set_Number(int value);
    internal int get_SpacingPt();
    internal void set_SpacingPt(int value);
    internal bool get_PresetWrapTextInShape();
    internal void set_PresetWrapTextInShape(bool value);
    internal bool GetVerticalAnchorPosition(TextDirection textDirection, ExcelVerticalAlignment verticalAlignment, ExcelHorizontalAlignment horizontalAlignment, String& anchor);
    internal bool GetHorizontalAnchorPostion(TextDirection textDirection, ExcelVerticalAlignment verticalAlignment, ExcelHorizontalAlignment horizontalAlignment, String& align);
    internal string GetTextDirection(TextDirection textDirection);
    internal int GetLeftMargin();
    internal void SetLeftMargin(int value);
    internal int GetTopMargin();
    internal void SetTopMargin(int value);
    internal int GetRightMargin();
    internal void SetRightMargin(int value);
    internal int GetBottomMargin();
    internal void SetBottomMargin(int value);
    internal bool GetVerticalAnchorPosition(String& anchor);
    internal void SerialzieTextBodyProperties(XmlWriter xmlTextWriter, string prefix, string nameSpace);
    internal TextBodyPropertiesHolder Clone();
}
internal enum Syncfusion.XlsIO.TextCapsType : Enum {
    public int value__;
    public static TextCapsType None;
    public static TextCapsType All;
    public static TextCapsType Small;
}
public enum Syncfusion.XlsIO.TextDirection : Enum {
    public int value__;
    public static TextDirection Horizontal;
    public static TextDirection RotateAllText90;
    public static TextDirection RotateAllText270;
    public static TextDirection StackedLeftToRight;
    public static TextDirection StackedRightToLeft;
}
internal class Syncfusion.XlsIO.TextFrame : object {
    private bool isTextOverFlow;
    private ShapeImplExt shape;
    private TextRange m_textRange;
    private TextBodyPropertiesHolder m_textBodyProperties;
    public bool IsTextOverFlow { get; public set; }
    public ITextRange TextRange { get; }
    public bool WrapTextInShape { get; public set; }
    public int MarginLeftPt { get; public set; }
    public int TopMarginPt { get; public set; }
    public int RightMarginPt { get; public set; }
    public int BottomMarginPt { get; public set; }
    public bool IsAutoMargins { get; public set; }
    public bool IsAutoSize { get; public set; }
    public TextVertOverflowType TextVertOverflowType { get; public set; }
    public TextHorzOverflowType TextHorzOverflowType { get; public set; }
    public ExcelHorizontalAlignment HorizontalAlignment { get; public set; }
    public ExcelVerticalAlignment VerticalAlignment { get; public set; }
    public TextDirection TextDirection { get; public set; }
    internal TextBodyPropertiesHolder TextBodyProperties { get; internal set; }
    internal TextFrame(ShapeImplExt shape);
    public sealed virtual bool get_IsTextOverFlow();
    public sealed virtual void set_IsTextOverFlow(bool value);
    public sealed virtual ITextRange get_TextRange();
    public sealed virtual bool get_WrapTextInShape();
    public sealed virtual void set_WrapTextInShape(bool value);
    public sealed virtual int get_MarginLeftPt();
    public sealed virtual void set_MarginLeftPt(int value);
    public sealed virtual int get_TopMarginPt();
    public sealed virtual void set_TopMarginPt(int value);
    public sealed virtual int get_RightMarginPt();
    public sealed virtual void set_RightMarginPt(int value);
    public sealed virtual int get_BottomMarginPt();
    public sealed virtual void set_BottomMarginPt(int value);
    public sealed virtual bool get_IsAutoMargins();
    public sealed virtual void set_IsAutoMargins(bool value);
    public sealed virtual bool get_IsAutoSize();
    public sealed virtual void set_IsAutoSize(bool value);
    public sealed virtual TextVertOverflowType get_TextVertOverflowType();
    public sealed virtual void set_TextVertOverflowType(TextVertOverflowType value);
    public sealed virtual TextHorzOverflowType get_TextHorzOverflowType();
    public sealed virtual void set_TextHorzOverflowType(TextHorzOverflowType value);
    public sealed virtual ExcelHorizontalAlignment get_HorizontalAlignment();
    public sealed virtual void set_HorizontalAlignment(ExcelHorizontalAlignment value);
    public sealed virtual ExcelVerticalAlignment get_VerticalAlignment();
    public sealed virtual void set_VerticalAlignment(ExcelVerticalAlignment value);
    public sealed virtual TextDirection get_TextDirection();
    public sealed virtual void set_TextDirection(TextDirection value);
    internal TextBodyPropertiesHolder get_TextBodyProperties();
    internal void set_TextBodyProperties(TextBodyPropertiesHolder value);
    internal IWorkbook GetWorkbook();
    internal void SetVisible();
    internal TextFrame Clone(object parent);
}
public class Syncfusion.XlsIO.TextFrameColumns : ValueType {
    private int number;
    private int spacingPt;
    public int Number { get; public set; }
    public int SpacingPt { get; public set; }
    public int get_Number();
    public void set_Number(int value);
    public int get_SpacingPt();
    public void set_SpacingPt(int value);
}
public enum Syncfusion.XlsIO.TextHorzOverflowType : Enum {
    public int value__;
    public static TextHorzOverflowType OverFlow;
    public static TextHorzOverflowType Clip;
}
internal class Syncfusion.XlsIO.TextRange : object {
    private string m_text;
    private TextFrame textFrame;
    private RichTextString m_strText;
    private PreservationLogger preservationLogger;
    public string Text { get; public set; }
    public IRichTextString RichText { get; }
    internal TextRange(TextFrame textFrame, PreservationLogger preservationLogger);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual IRichTextString get_RichText();
    protected virtual void InitializeVariables();
    internal TextRange Clone(object parent);
}
public enum Syncfusion.XlsIO.TextVertOverflowType : Enum {
    public int value__;
    public static TextVertOverflowType OverFlow;
    public static TextVertOverflowType Ellipsis;
    public static TextVertOverflowType Clip;
}
public enum Syncfusion.XlsIO.UnknownVariableAction : Enum {
    public int value__;
    public static UnknownVariableAction Exception;
    public static UnknownVariableAction Skip;
    public static UnknownVariableAction ReplaceBlank;
}
public enum Syncfusion.XlsIO.VariableTypeAction : Enum {
    public int value__;
    public static VariableTypeAction DetectDataType;
    public static VariableTypeAction DetectNumberFormat;
    public static VariableTypeAction None;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Syncfusion.XlsIO.VMLPresetGradientFills : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Grad_Brass { get; }
    internal static string Grad_Calm_Water { get; }
    internal static string Grad_Chrome { get; }
    internal static string Grad_ChromeII { get; }
    internal static string Grad_Daybreak { get; }
    internal static string Grad_Desert { get; }
    internal static string Grad_Early_Sunset { get; }
    internal static string Grad_Fire { get; }
    internal static string Grad_Fog { get; }
    internal static string Grad_Gold { get; }
    internal static string Grad_GoldII { get; }
    internal static string Grad_Horizon { get; }
    internal static string Grad_Late_Sunset { get; }
    internal static string Grad_Mahogany { get; }
    internal static string Grad_Moss { get; }
    internal static string Grad_Nightfall { get; }
    internal static string Grad_Ocean { get; }
    internal static string Grad_Parchment { get; }
    internal static string Grad_Peacock { get; }
    internal static string Grad_Rainbow { get; }
    internal static string Grad_RainbowII { get; }
    internal static string Grad_Sapphire { get; }
    internal static string Grad_Silver { get; }
    internal static string Grad_Wheat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Grad_Brass();
    internal static string get_Grad_Calm_Water();
    internal static string get_Grad_Chrome();
    internal static string get_Grad_ChromeII();
    internal static string get_Grad_Daybreak();
    internal static string get_Grad_Desert();
    internal static string get_Grad_Early_Sunset();
    internal static string get_Grad_Fire();
    internal static string get_Grad_Fog();
    internal static string get_Grad_Gold();
    internal static string get_Grad_GoldII();
    internal static string get_Grad_Horizon();
    internal static string get_Grad_Late_Sunset();
    internal static string get_Grad_Mahogany();
    internal static string get_Grad_Moss();
    internal static string get_Grad_Nightfall();
    internal static string get_Grad_Ocean();
    internal static string get_Grad_Parchment();
    internal static string get_Grad_Peacock();
    internal static string get_Grad_Rainbow();
    internal static string get_Grad_RainbowII();
    internal static string get_Grad_Sapphire();
    internal static string get_Grad_Silver();
    internal static string get_Grad_Wheat();
}
public class Syncfusion.XlsIO.WarningInfo : object {
    private string m_description;
    private WarningType m_type;
    public string Description { get; internal set; }
    public WarningType Type { get; internal set; }
    public string get_Description();
    internal void set_Description(string value);
    public WarningType get_Type();
    internal void set_Type(WarningType value);
}
public enum Syncfusion.XlsIO.WarningType : Enum {
    public int value__;
    public static WarningType FontSubstitution;
    public static WarningType ConditionalFormatting;
    public static WarningType FillPattern;
    public static WarningType DrawingObjects;
    public static WarningType PageSettings;
    public static WarningType PivotTableSettings;
}
internal class Syncfusion.XlsIO.Windows1252Encoding : Encoding {
    private Char[] map;
    public string WebName { get; }
    public virtual string get_WebName();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal enum Syncfusion.XlsIO.Worksheet2007Visibility : Enum {
    public int value__;
    public static Worksheet2007Visibility Visible;
    public static Worksheet2007Visibility Hidden;
    public static Worksheet2007Visibility VeryHidden;
}
public enum Syncfusion.XlsIO.WorksheetVisibility : Enum {
    public int value__;
    public static WorksheetVisibility Visible;
    public static WorksheetVisibility Hidden;
    public static WorksheetVisibility StrongHidden;
}
public class Syncfusion.XlsIO.XlsIOConfig : object {
    public string Copyright { get; }
    public string get_Copyright();
}
