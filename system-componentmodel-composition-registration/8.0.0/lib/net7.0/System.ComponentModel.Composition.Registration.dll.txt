internal static class FxResources.System.ComponentModel.Composition.Registration.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class System.ComponentModel.Composition.Registration.ExportBuilder : object {
    private bool _isInherited;
    private string _contractName;
    private Type _contractType;
    private List`1<Tuple`2<string, object>> _metadataItems;
    private List`1<Tuple`2<string, Func`2<Type, object>>> _metadataItemFuncs;
    public ExportBuilder AsContractType();
    public ExportBuilder AsContractType(Type type);
    public ExportBuilder AsContractName(string contractName);
    public ExportBuilder Inherited();
    public ExportBuilder AddMetadata(string name, object value);
    public ExportBuilder AddMetadata(string name, Func`2<Type, object> itemFunc);
    internal void BuildAttributes(Type type, List`1& attributes);
}
public class System.ComponentModel.Composition.Registration.ImportBuilder : object {
    private static Type s_stringType;
    private string _contractName;
    private Type _contractType;
    private bool _asMany;
    private bool _asManySpecified;
    private bool _allowDefault;
    private bool _allowRecomposition;
    private CreationPolicy _requiredCreationPolicy;
    private ImportSource _source;
    private static ImportBuilder();
    public ImportBuilder AsContractType();
    public ImportBuilder AsContractType(Type type);
    public ImportBuilder AsContractName(string contractName);
    public ImportBuilder AsMany(bool isMany);
    public ImportBuilder AllowDefault();
    public ImportBuilder AllowRecomposition();
    public ImportBuilder RequiredCreationPolicy(CreationPolicy requiredCreationPolicy);
    public ImportBuilder Source(ImportSource source);
    internal void BuildAttributes(Type type, List`1& attributes);
}
public class System.ComponentModel.Composition.Registration.ParameterImportBuilder : object {
    public T Import();
    public T Import(Action`1<ImportBuilder> configure);
}
public class System.ComponentModel.Composition.Registration.PartBuilder : object {
    private static List`1<Attribute> s_importingConstructorList;
    private static Type s_exportAttributeType;
    private List`1<ExportBuilder> _typeExportBuilders;
    private bool _setCreationPolicy;
    private CreationPolicy _creationPolicy;
    private List`1<Tuple`2<string, object>> _metadataItems;
    private List`1<Tuple`2<string, Func`2<Type, object>>> _metadataItemFuncs;
    private Func`2<ConstructorInfo[], ConstructorInfo> _constructorFilter;
    private Action`2<ParameterInfo, ImportBuilder> _configureConstructorImports;
    private List`1<Tuple`3<Predicate`1<PropertyInfo>, Action`2<PropertyInfo, ExportBuilder>, Type>> _propertyExports;
    private List`1<Tuple`3<Predicate`1<PropertyInfo>, Action`2<PropertyInfo, ImportBuilder>, Type>> _propertyImports;
    private List`1<Tuple`2<Predicate`1<Type>, Action`2<Type, ExportBuilder>>> _interfaceExports;
    [CompilerGeneratedAttribute]
private Predicate`1<Type> <SelectType>k__BackingField;
    internal Predicate`1<Type> SelectType { get; private set; }
    internal PartBuilder(Predicate`1<Type> selectType);
    private static PartBuilder();
    [CompilerGeneratedAttribute]
internal Predicate`1<Type> get_SelectType();
    [CompilerGeneratedAttribute]
private void set_SelectType(Predicate`1<Type> value);
    public PartBuilder Export();
    public PartBuilder Export(Action`1<ExportBuilder> exportConfiguration);
    public PartBuilder Export();
    public PartBuilder Export(Action`1<ExportBuilder> exportConfiguration);
    public PartBuilder SelectConstructor(Func`2<ConstructorInfo[], ConstructorInfo> constructorFilter);
    public PartBuilder SelectConstructor(Func`2<ConstructorInfo[], ConstructorInfo> constructorFilter, Action`2<ParameterInfo, ImportBuilder> importConfiguration);
    public PartBuilder ExportInterfaces(Predicate`1<Type> interfaceFilter);
    public PartBuilder ExportInterfaces();
    public PartBuilder ExportInterfaces(Predicate`1<Type> interfaceFilter, Action`2<Type, ExportBuilder> exportConfiguration);
    public PartBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ExportBuilder> exportConfiguration);
    public PartBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ExportBuilder> exportConfiguration);
    public PartBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ImportBuilder> importConfiguration);
    public PartBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ImportBuilder> importConfiguration);
    public PartBuilder SetCreationPolicy(CreationPolicy creationPolicy);
    public PartBuilder AddMetadata(string name, object value);
    public PartBuilder AddMetadata(string name, Func`2<Type, object> itemFunc);
    private static bool MemberHasExportMetadata(MemberInfo member);
    internal IEnumerable`1<Attribute> BuildTypeAttributes(Type type);
    internal bool BuildConstructorAttributes(Type type, List`1& configuredMembers);
    internal static void BuildDefaultConstructorAttributes(Type type, List`1& configuredMembers);
    private static void ConfigureConstructorAttributes(ConstructorInfo constructorInfo, List`1& configuredMembers, Action`2<ParameterInfo, ImportBuilder> configureConstructorImports);
    internal void BuildPropertyAttributes(Type type, List`1& configuredMembers);
    [IteratorStateMachineAttribute("System.ComponentModel.Composition.Registration.PartBuilder/<FindLongestConstructors>d__43")]
private static IEnumerable`1<ConstructorInfo> FindLongestConstructors(ConstructorInfo[] constructors);
}
public class System.ComponentModel.Composition.Registration.PartBuilder`1 : PartBuilder {
    internal PartBuilder`1(Predicate`1<Type> selectType);
    public PartBuilder`1<T> SelectConstructor(Expression`1<Func`2<ParameterImportBuilder, T>> constructorFilter);
    public PartBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertyFilter);
    public PartBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertyFilter, Action`1<ExportBuilder> exportConfiguration);
    public PartBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertyFilter);
    public PartBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertyFilter, Action`1<ExportBuilder> exportConfiguration);
    public PartBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertyFilter);
    public PartBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertyFilter, Action`1<ImportBuilder> importConfiguration);
    public PartBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertyFilter);
    public PartBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertyFilter, Action`1<ImportBuilder> importConfiguration);
}
public class System.ComponentModel.Composition.Registration.RegistrationBuilder : CustomReflectionContext {
    private static ReflectionContext s_inner;
    private static List`1<object> s_emptyList;
    private Lock _lock;
    private List`1<PartBuilder> _conventions;
    private Dictionary`2<MemberInfo, List`1<Attribute>> _memberInfos;
    private Dictionary`2<ParameterInfo, List`1<Attribute>> _parameters;
    private static RegistrationBuilder();
    public PartBuilder`1<T> ForTypesDerivedFrom();
    public PartBuilder ForTypesDerivedFrom(Type type);
    public PartBuilder`1<T> ForType();
    public PartBuilder ForType(Type type);
    public PartBuilder`1<T> ForTypesMatching(Predicate`1<Type> typeFilter);
    public PartBuilder ForTypesMatching(Predicate`1<Type> typeFilter);
    private List`1<Tuple`2<object, List`1<Attribute>>> EvaluateThisTypeAgainstTheConvention(Type type);
    protected virtual IEnumerable`1<object> GetCustomAttributes(MemberInfo member, IEnumerable`1<object> declaredAttributes);
    protected virtual IEnumerable`1<object> GetCustomAttributes(ParameterInfo parameter, IEnumerable`1<object> declaredAttributes);
    private List`1<Attribute> ReadMemberCustomAttributes(MemberInfo member);
    private List`1<Attribute> ReadParameterCustomAttributes(ParameterInfo parameter);
}
internal static class System.Composition.Diagnostics.CompositionTrace : object {
    public static void Registration_ConstructorConventionOverridden(Type type);
    public static void Registration_TypeExportConventionOverridden(Type type);
    public static void Registration_MemberExportConventionOverridden(Type type, MemberInfo member);
    public static void Registration_MemberImportConventionOverridden(Type type, MemberInfo member);
    public static void Registration_OnSatisfiedImportNotificationOverridden(Type type, MemberInfo member);
    public static void Registration_PartCreationConventionOverridden(Type type);
    public static void Registration_MemberImportConventionMatchedTwice(Type type, MemberInfo member);
    public static void Registration_PartMetadataConventionOverridden(Type type);
    public static void Registration_ParameterImportConventionOverridden(ParameterInfo parameter, ConstructorInfo constructor);
}
internal enum System.Composition.Diagnostics.CompositionTraceId : Enum {
    public ushort value__;
    public static CompositionTraceId Rejection_DefinitionRejected;
    public static CompositionTraceId Rejection_DefinitionResurrected;
    public static CompositionTraceId Discovery_AssemblyLoadFailed;
    public static CompositionTraceId Discovery_DefinitionMarkedWithPartNotDiscoverableAttribute;
    public static CompositionTraceId Discovery_DefinitionMismatchedExportArity;
    public static CompositionTraceId Discovery_DefinitionContainsNoExports;
    public static CompositionTraceId Discovery_MemberMarkedWithMultipleImportAndImportMany;
    public static CompositionTraceId Registration_ConstructorConventionOverridden;
    public static CompositionTraceId Registration_TypeExportConventionOverridden;
    public static CompositionTraceId Registration_MemberExportConventionOverridden;
    public static CompositionTraceId Registration_MemberImportConventionOverridden;
    public static CompositionTraceId Registration_PartCreationConventionOverridden;
    public static CompositionTraceId Registration_MemberImportConventionMatchedTwice;
    public static CompositionTraceId Registration_PartMetadataConventionOverridden;
    public static CompositionTraceId Registration_ParameterImportConventionOverridden;
    public static CompositionTraceId Registration_OnSatisfiedImportNotificationOverridden;
}
internal static class System.Composition.Diagnostics.CompositionTraceSource : object {
    private static DebuggerTraceWriter s_source;
    public static bool CanWriteInformation { get; }
    public static bool CanWriteWarning { get; }
    public static bool CanWriteError { get; }
    private static CompositionTraceSource();
    public static bool get_CanWriteInformation();
    public static bool get_CanWriteWarning();
    public static bool get_CanWriteError();
    public static void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public static void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public static void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
    private static void EnsureEnabled(bool condition);
}
internal class System.Composition.Diagnostics.DebuggerTraceWriter : TraceWriter {
    private static string s_sourceName;
    public bool CanWriteInformation { get; }
    public bool CanWriteWarning { get; }
    public bool CanWriteError { get; }
    private static DebuggerTraceWriter();
    public virtual bool get_CanWriteInformation();
    public virtual bool get_CanWriteWarning();
    public virtual bool get_CanWriteError();
    public virtual void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public virtual void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public virtual void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
    private static void WriteEvent(TraceEventType eventType, CompositionTraceId traceId, string format, Object[] arguments);
    private static string CreateLogMessage(TraceEventType eventType, CompositionTraceId traceId, string format, Object[] arguments);
}
internal abstract class System.Composition.Diagnostics.TraceWriter : object {
    public bool CanWriteInformation { get; }
    public bool CanWriteWarning { get; }
    public bool CanWriteError { get; }
    public abstract virtual bool get_CanWriteInformation();
    public abstract virtual bool get_CanWriteWarning();
    public abstract virtual bool get_CanWriteError();
    public abstract virtual void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public abstract virtual void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public abstract virtual void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Registration_ConstructorConventionOverridden { get; }
    internal static string Registration_TypeExportConventionOverridden { get; }
    internal static string Registration_MemberExportConventionOverridden { get; }
    internal static string Registration_MemberImportConventionOverridden { get; }
    internal static string Registration_MemberImportConventionMatchedTwice { get; }
    internal static string Registration_ParameterImportConventionOverridden { get; }
    internal static string Registration_PartCreationConventionOverridden { get; }
    internal static string Registration_PartMetadataConventionOverridden { get; }
    internal static string Diagnostic_InternalExceptionMessage { get; }
    internal static string Argument_ExpressionMustBeNew { get; }
    internal static string Argument_ExpressionMustBePropertyMember { get; }
    internal static string Diagnostic_TraceUnnecessaryWork { get; }
    internal static string PlatformNotSupported_ComponentModel_Composition_Registration { get; }
    internal static string Registration_OnSatisfiedImportNotificationOverridden { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Registration_ConstructorConventionOverridden();
    internal static string get_Registration_TypeExportConventionOverridden();
    internal static string get_Registration_MemberExportConventionOverridden();
    internal static string get_Registration_MemberImportConventionOverridden();
    internal static string get_Registration_MemberImportConventionMatchedTwice();
    internal static string get_Registration_ParameterImportConventionOverridden();
    internal static string get_Registration_PartCreationConventionOverridden();
    internal static string get_Registration_PartMetadataConventionOverridden();
    internal static string get_Diagnostic_InternalExceptionMessage();
    internal static string get_Argument_ExpressionMustBeNew();
    internal static string get_Argument_ExpressionMustBePropertyMember();
    internal static string get_Diagnostic_TraceUnnecessaryWork();
    internal static string get_PlatformNotSupported_ComponentModel_Composition_Registration();
    internal static string get_Registration_OnSatisfiedImportNotificationOverridden();
}
internal class System.Threading.Lock : object {
    private ReaderWriterLockSlim _thisLock;
    private int _isDisposed;
    public void EnterReadLock();
    public void EnterWriteLock();
    public void ExitReadLock();
    public void ExitWriteLock();
    public sealed virtual void Dispose();
}
internal class System.Threading.ReadLock : ValueType {
    private Lock _lock;
    private int _isDisposed;
    public ReadLock(Lock lock);
    public sealed virtual void Dispose();
}
internal class System.Threading.WriteLock : ValueType {
    private Lock _lock;
    private int _isDisposed;
    public WriteLock(Lock lock);
    public sealed virtual void Dispose();
}
