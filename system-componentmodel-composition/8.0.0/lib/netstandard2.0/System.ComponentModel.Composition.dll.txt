internal static class FxResources.System.ComponentModel.Composition.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.ComponentModel.Composition.AdaptationConstants : object {
    public static string AdapterContractName;
    public static string AdapterFromContractMetadataName;
    public static string AdapterToContractMetadataName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.ComponentModel.Composition.AttributedModelServices : object {
    [ExtensionAttribute]
public static ComposablePart AddExportedValue(CompositionBatch batch, string contractName, T exportedValue);
    [ExtensionAttribute]
public static ComposablePart AddExportedValue(CompositionBatch batch, T exportedValue);
    [ExtensionAttribute]
public static ComposablePart AddPart(CompositionBatch batch, object attributedPart);
    [ExtensionAttribute]
public static void ComposeExportedValue(CompositionContainer container, string contractName, T exportedValue);
    [ExtensionAttribute]
public static void ComposeExportedValue(CompositionContainer container, T exportedValue);
    [ExtensionAttribute]
public static void ComposeParts(CompositionContainer container, Object[] attributedParts);
    public static ComposablePart CreatePart(ComposablePartDefinition partDefinition, object attributedPart);
    public static ComposablePart CreatePart(object attributedPart);
    public static ComposablePart CreatePart(object attributedPart, ReflectionContext reflectionContext);
    public static ComposablePartDefinition CreatePartDefinition(Type type, ICompositionElement origin);
    public static ComposablePartDefinition CreatePartDefinition(Type type, ICompositionElement origin, bool ensureIsDiscoverable);
    [ExtensionAttribute]
public static bool Exports(ComposablePartDefinition part, Type contractType);
    [ExtensionAttribute]
public static bool Exports(ComposablePartDefinition part);
    public static string GetContractName(Type type);
    public static TMetadataView GetMetadataView(IDictionary`2<string, object> metadata);
    public static string GetTypeIdentity(MethodInfo method);
    public static string GetTypeIdentity(Type type);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, Type contractType);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, Type contractType, ImportCardinality importCardinality);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, ImportCardinality importCardinality);
    [ExtensionAttribute]
public static ComposablePart SatisfyImportsOnce(ICompositionService compositionService, object attributedPart);
    [ExtensionAttribute]
public static ComposablePart SatisfyImportsOnce(ICompositionService compositionService, object attributedPart, ReflectionContext reflectionContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class System.ComponentModel.Composition.CatalogReflectionContextAttribute : Attribute {
    public CatalogReflectionContextAttribute(Type reflectionContextType);
    public ReflectionContext CreateReflectionContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.ChangeRejectedException : CompositionException {
    public string Message { get; }
    public ChangeRejectedException(IEnumerable`1<CompositionError> errors);
    [NullableContextAttribute("2")]
public ChangeRejectedException(string message);
    [NullableContextAttribute("2")]
public ChangeRejectedException(string message, Exception innerException);
    public virtual string get_Message();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.CompositionContractMismatchException : Exception {
    [NullableContextAttribute("1")]
protected CompositionContractMismatchException(SerializationInfo info, StreamingContext context);
    public CompositionContractMismatchException(string message);
    public CompositionContractMismatchException(string message, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.CompositionError : object {
    [NullableAttribute("1")]
public string Description { get; }
    public ICompositionElement Element { get; }
    public Exception Exception { get; }
    public CompositionError(string message);
    public CompositionError(string message, ICompositionElement element);
    public CompositionError(string message, ICompositionElement element, Exception exception);
    public CompositionError(string message, Exception exception);
    [NullableContextAttribute("1")]
public string get_Description();
    public ICompositionElement get_Element();
    public Exception get_Exception();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.CompositionException : Exception {
    public ReadOnlyCollection`1<CompositionError> Errors { get; }
    public string Message { get; }
    public ReadOnlyCollection`1<Exception> RootCauses { get; }
    public CompositionException(IEnumerable`1<CompositionError> errors);
    [NullableContextAttribute("2")]
public CompositionException(string message);
    [NullableContextAttribute("2")]
public CompositionException(string message, Exception innerException);
    public ReadOnlyCollection`1<CompositionError> get_Errors();
    public virtual string get_Message();
    public ReadOnlyCollection`1<Exception> get_RootCauses();
}
public enum System.ComponentModel.Composition.CreationPolicy : Enum {
    public int value__;
    public static CreationPolicy Any;
    public static CreationPolicy Shared;
    public static CreationPolicy NonShared;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("452")]
public class System.ComponentModel.Composition.ExportAttribute : Attribute {
    public string ContractName { get; }
    public Type ContractType { get; }
    public ExportAttribute(string contractName);
    public ExportAttribute(string contractName, Type contractType);
    public ExportAttribute(Type contractType);
    public string get_ContractName();
    public Type get_ContractType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.ExportFactory`1 : object {
    public ExportFactory`1(Func`1<Tuple`2<T, Action>> exportLifetimeContextCreator);
    public ExportLifetimeContext`1<T> CreateExport();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.ComponentModel.Composition.ExportFactory`2 : ExportFactory`1<T> {
    public TMetadata Metadata { get; }
    public ExportFactory`2(Func`1<Tuple`2<T, Action>> exportLifetimeContextCreator, TMetadata metadata);
    public TMetadata get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.ExportLifetimeContext`1 : object {
    public T Value { get; }
    public ExportLifetimeContext`1(T value, Action disposeAction);
    public T get_Value();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1476")]
public class System.ComponentModel.Composition.ExportMetadataAttribute : Attribute {
    public bool IsMultiple { get; public set; }
    [NullableAttribute("1")]
public string Name { get; }
    public object Value { get; }
    public ExportMetadataAttribute(string name, object value);
    public bool get_IsMultiple();
    public void set_IsMultiple(bool value);
    [NullableContextAttribute("1")]
public string get_Name();
    public object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.AggregateCatalog : ComposablePartCatalog {
    public ICollection`1<ComposablePartCatalog> Catalogs { get; }
    public AggregateCatalog(IEnumerable`1<ComposablePartCatalog> catalogs);
    public AggregateCatalog(ComposablePartCatalog[] catalogs);
    public ICollection`1<ComposablePartCatalog> get_Catalogs();
    public sealed virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    protected virtual void OnChanged(ComposablePartCatalogChangeEventArgs e);
    protected virtual void OnChanging(ComposablePartCatalogChangeEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.AggregateExportProvider : ExportProvider {
    public ReadOnlyCollection`1<ExportProvider> Providers { get; }
    public AggregateExportProvider(IEnumerable`1<ExportProvider> providers);
    public AggregateExportProvider(ExportProvider[] providers);
    public ReadOnlyCollection`1<ExportProvider> get_Providers();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.ApplicationCatalog : ComposablePartCatalog {
    private string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    [NullableAttribute("2")]
private ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    public ApplicationCatalog(ICompositionElement definitionOrigin);
    public ApplicationCatalog(ReflectionContext reflectionContext);
    public ApplicationCatalog(ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    private sealed virtual override string System.ComponentModel.Composition.Primitives.ICompositionElement.get_DisplayName();
    private sealed virtual override ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.get_Origin();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.AssemblyCatalog : ComposablePartCatalog {
    public Assembly Assembly { get; }
    private string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    [NullableAttribute("2")]
private ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    public AssemblyCatalog(Assembly assembly);
    public AssemblyCatalog(Assembly assembly, ICompositionElement definitionOrigin);
    public AssemblyCatalog(Assembly assembly, ReflectionContext reflectionContext);
    public AssemblyCatalog(Assembly assembly, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public AssemblyCatalog(string codeBase);
    public AssemblyCatalog(string codeBase, ICompositionElement definitionOrigin);
    public AssemblyCatalog(string codeBase, ReflectionContext reflectionContext);
    public AssemblyCatalog(string codeBase, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public Assembly get_Assembly();
    private sealed virtual override string System.ComponentModel.Composition.Primitives.ICompositionElement.get_DisplayName();
    private sealed virtual override ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.get_Origin();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.AtomicComposition : object {
    [NullableContextAttribute("2")]
public AtomicComposition(AtomicComposition outerAtomicComposition);
    public void AddCompleteAction(Action completeAction);
    public void AddRevertAction(Action revertAction);
    public void Complete();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void SetValue(object key, object value);
    public bool TryGetValue(object key, bool localAtomicCompositionOnly, T& value);
    public bool TryGetValue(object key, T& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.CatalogExportProvider : ExportProvider {
    public ComposablePartCatalog Catalog { get; }
    [NullableAttribute("2")]
public ExportProvider SourceProvider { get; public set; }
    public CatalogExportProvider(ComposablePartCatalog catalog);
    public CatalogExportProvider(ComposablePartCatalog catalog, bool isThreadSafe);
    public CatalogExportProvider(ComposablePartCatalog catalog, CompositionOptions compositionOptions);
    public ComposablePartCatalog get_Catalog();
    [NullableContextAttribute("2")]
public ExportProvider get_SourceProvider();
    [NullableContextAttribute("2")]
public void set_SourceProvider(ExportProvider value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
}
[ExtensionAttribute]
public static class System.ComponentModel.Composition.Hosting.CatalogExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static CompositionService CreateCompositionService(ComposablePartCatalog composablePartCatalog);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs : EventArgs {
    public IEnumerable`1<ComposablePartDefinition> AddedDefinitions { get; }
    [NullableAttribute("2")]
public AtomicComposition AtomicComposition { get; }
    public IEnumerable`1<ComposablePartDefinition> RemovedDefinitions { get; }
    public ComposablePartCatalogChangeEventArgs(IEnumerable`1<ComposablePartDefinition> addedDefinitions, IEnumerable`1<ComposablePartDefinition> removedDefinitions, AtomicComposition atomicComposition);
    public IEnumerable`1<ComposablePartDefinition> get_AddedDefinitions();
    [NullableContextAttribute("2")]
public AtomicComposition get_AtomicComposition();
    public IEnumerable`1<ComposablePartDefinition> get_RemovedDefinitions();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.ComposablePartExportProvider : ExportProvider {
    public ExportProvider SourceProvider { get; public set; }
    public ComposablePartExportProvider(bool isThreadSafe);
    public ComposablePartExportProvider(CompositionOptions compositionOptions);
    public ExportProvider get_SourceProvider();
    public void set_SourceProvider(ExportProvider value);
    [NullableContextAttribute("1")]
public void Compose(CompositionBatch batch);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
protected virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.CompositionBatch : object {
    public ReadOnlyCollection`1<ComposablePart> PartsToAdd { get; }
    public ReadOnlyCollection`1<ComposablePart> PartsToRemove { get; }
    public CompositionBatch(IEnumerable`1<ComposablePart> partsToAdd, IEnumerable`1<ComposablePart> partsToRemove);
    public ReadOnlyCollection`1<ComposablePart> get_PartsToAdd();
    public ReadOnlyCollection`1<ComposablePart> get_PartsToRemove();
    public ComposablePart AddExport(Export export);
    public void AddPart(ComposablePart part);
    public void RemovePart(ComposablePart part);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.ComponentModel.Composition.Hosting.CompositionConstants : object {
    public static string ExportTypeIdentityMetadataName;
    public static string GenericContractMetadataName;
    public static string GenericParametersMetadataName;
    public static string ImportSourceMetadataName;
    public static string IsGenericPartMetadataName;
    public static string PartCreationPolicyMetadataName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.CompositionContainer : ExportProvider {
    [NullableAttribute("2")]
public ComposablePartCatalog Catalog { get; }
    public ReadOnlyCollection`1<ExportProvider> Providers { get; }
    public CompositionContainer(CompositionOptions compositionOptions, ExportProvider[] providers);
    public CompositionContainer(ExportProvider[] providers);
    [NullableContextAttribute("2")]
public CompositionContainer(ComposablePartCatalog catalog, bool isThreadSafe, ExportProvider[] providers);
    [NullableContextAttribute("2")]
public CompositionContainer(ComposablePartCatalog catalog, CompositionOptions compositionOptions, ExportProvider[] providers);
    [NullableContextAttribute("2")]
public CompositionContainer(ComposablePartCatalog catalog, ExportProvider[] providers);
    [NullableContextAttribute("2")]
public ComposablePartCatalog get_Catalog();
    public ReadOnlyCollection`1<ExportProvider> get_Providers();
    public void Compose(CompositionBatch batch);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
    public void ReleaseExport(Export export);
    public void ReleaseExports(IEnumerable`1<Export> exports);
    public void ReleaseExports(IEnumerable`1<Lazy`1<T>> exports);
    [NullableContextAttribute("2")]
public void ReleaseExports(IEnumerable`1<Lazy`2<T, TMetadataView>> exports);
    public void ReleaseExport(Lazy`1<T> export);
    public sealed virtual void SatisfyImportsOnce(ComposablePart part);
}
[FlagsAttribute]
public enum System.ComponentModel.Composition.Hosting.CompositionOptions : Enum {
    public int value__;
    public static CompositionOptions Default;
    public static CompositionOptions DisableSilentRejection;
    public static CompositionOptions IsThreadSafe;
    public static CompositionOptions ExportCompositionService;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.CompositionScopeDefinition : ComposablePartCatalog {
    public IEnumerable`1<CompositionScopeDefinition> Children { get; }
    public IEnumerable`1<ExportDefinition> PublicSurface { get; }
    public CompositionScopeDefinition(ComposablePartCatalog catalog, IEnumerable`1<CompositionScopeDefinition> children);
    public CompositionScopeDefinition(ComposablePartCatalog catalog, IEnumerable`1<CompositionScopeDefinition> children, IEnumerable`1<ExportDefinition> publicSurface);
    public virtual IEnumerable`1<CompositionScopeDefinition> get_Children();
    public virtual IEnumerable`1<ExportDefinition> get_PublicSurface();
    public sealed virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    protected virtual void OnChanged(ComposablePartCatalogChangeEventArgs e);
    protected virtual void OnChanging(ComposablePartCatalogChangeEventArgs e);
}
public class System.ComponentModel.Composition.Hosting.CompositionService : object {
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual void SatisfyImportsOnce(ComposablePart part);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.DirectoryCatalog : ComposablePartCatalog {
    public string FullPath { get; }
    public ReadOnlyCollection`1<string> LoadedFiles { get; }
    public string Path { get; }
    public string SearchPattern { get; }
    private string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    [NullableAttribute("2")]
private ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    public DirectoryCatalog(string path);
    public DirectoryCatalog(string path, ICompositionElement definitionOrigin);
    public DirectoryCatalog(string path, ReflectionContext reflectionContext);
    public DirectoryCatalog(string path, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public DirectoryCatalog(string path, string searchPattern);
    public DirectoryCatalog(string path, string searchPattern, ICompositionElement definitionOrigin);
    public DirectoryCatalog(string path, string searchPattern, ReflectionContext reflectionContext);
    public DirectoryCatalog(string path, string searchPattern, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public string get_FullPath();
    public ReadOnlyCollection`1<string> get_LoadedFiles();
    public string get_Path();
    public string get_SearchPattern();
    private sealed virtual override string System.ComponentModel.Composition.Primitives.ICompositionElement.get_DisplayName();
    private sealed virtual override ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.get_Origin();
    public sealed virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    protected virtual void OnChanged(ComposablePartCatalogChangeEventArgs e);
    protected virtual void OnChanging(ComposablePartCatalogChangeEventArgs e);
    public void Refresh();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.ComponentModel.Composition.Hosting.ExportProvider : object {
    public void add_ExportsChanged(EventHandler`1<ExportsChangeEventArgs> value);
    public void remove_ExportsChanged(EventHandler`1<ExportsChangeEventArgs> value);
    public void add_ExportsChanging(EventHandler`1<ExportsChangeEventArgs> value);
    public void remove_ExportsChanging(EventHandler`1<ExportsChangeEventArgs> value);
    public T GetExportedValueOrDefault();
    public T GetExportedValueOrDefault(string contractName);
    [NullableContextAttribute("1")]
public IEnumerable`1<T> GetExportedValues();
    public IEnumerable`1<T> GetExportedValues(string contractName);
    public T GetExportedValue();
    public T GetExportedValue(string contractName);
    [NullableContextAttribute("1")]
public IEnumerable`1<Export> GetExports(ImportDefinition definition);
    [NullableContextAttribute("1")]
public IEnumerable`1<Export> GetExports(ImportDefinition definition, AtomicComposition atomicComposition);
    [NullableContextAttribute("1")]
public IEnumerable`1<Lazy`2<object, object>> GetExports(Type type, Type metadataViewType, string contractName);
    [NullableContextAttribute("1")]
protected abstract virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
    [NullableContextAttribute("1")]
public IEnumerable`1<Lazy`1<T>> GetExports();
    public IEnumerable`1<Lazy`1<T>> GetExports(string contractName);
    public IEnumerable`1<Lazy`2<T, TMetadataView>> GetExports();
    public IEnumerable`1<Lazy`2<T, TMetadataView>> GetExports(string contractName);
    public Lazy`1<T> GetExport();
    public Lazy`1<T> GetExport(string contractName);
    public Lazy`2<T, TMetadataView> GetExport();
    public Lazy`2<T, TMetadataView> GetExport(string contractName);
    [NullableContextAttribute("1")]
protected virtual void OnExportsChanged(ExportsChangeEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnExportsChanging(ExportsChangeEventArgs e);
    [NullableContextAttribute("1")]
public bool TryGetExports(ImportDefinition definition, AtomicComposition atomicComposition, IEnumerable`1& exports);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs : EventArgs {
    public IEnumerable`1<ExportDefinition> AddedExports { get; }
    [NullableAttribute("2")]
public AtomicComposition AtomicComposition { get; }
    public IEnumerable`1<string> ChangedContractNames { get; }
    public IEnumerable`1<ExportDefinition> RemovedExports { get; }
    public ExportsChangeEventArgs(IEnumerable`1<ExportDefinition> addedExports, IEnumerable`1<ExportDefinition> removedExports, AtomicComposition atomicComposition);
    public IEnumerable`1<ExportDefinition> get_AddedExports();
    [NullableContextAttribute("2")]
public AtomicComposition get_AtomicComposition();
    public IEnumerable`1<string> get_ChangedContractNames();
    public IEnumerable`1<ExportDefinition> get_RemovedExports();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.FilteredCatalog : ComposablePartCatalog {
    public FilteredCatalog Complement { get; }
    public FilteredCatalog(ComposablePartCatalog catalog, Func`2<ComposablePartDefinition, bool> filter);
    public FilteredCatalog get_Complement();
    public sealed virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    public FilteredCatalog IncludeDependencies();
    public FilteredCatalog IncludeDependencies(Func`2<ImportDefinition, bool> importFilter);
    public FilteredCatalog IncludeDependents();
    public FilteredCatalog IncludeDependents(Func`2<ImportDefinition, bool> importFilter);
    protected virtual void OnChanged(ComposablePartCatalogChangeEventArgs e);
    protected virtual void OnChanging(ComposablePartCatalogChangeEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.ImportEngine : object {
    public ImportEngine(ExportProvider sourceProvider);
    public ImportEngine(ExportProvider sourceProvider, bool isThreadSafe);
    public ImportEngine(ExportProvider sourceProvider, CompositionOptions compositionOptions);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void PreviewImports(ComposablePart part, AtomicComposition atomicComposition);
    public void ReleaseImports(ComposablePart part, AtomicComposition atomicComposition);
    public void SatisfyImports(ComposablePart part);
    public sealed virtual void SatisfyImportsOnce(ComposablePart part);
}
public interface System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.ComponentModel.Composition.Hosting.ScopingExtensions : object {
    [ExtensionAttribute]
public static bool ContainsPartMetadataWithKey(ComposablePartDefinition part, string key);
    [ExtensionAttribute]
public static bool ContainsPartMetadata(ComposablePartDefinition part, string key, T value);
    [ExtensionAttribute]
public static bool Exports(ComposablePartDefinition part, string contractName);
    [ExtensionAttribute]
public static FilteredCatalog Filter(ComposablePartCatalog catalog, Func`2<ComposablePartDefinition, bool> filter);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, string contractName);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, string contractName, ImportCardinality importCardinality);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Hosting.TypeCatalog : ComposablePartCatalog {
    private string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    [NullableAttribute("2")]
private ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    public TypeCatalog(IEnumerable`1<Type> types);
    public TypeCatalog(IEnumerable`1<Type> types, ICompositionElement definitionOrigin);
    public TypeCatalog(IEnumerable`1<Type> types, ReflectionContext reflectionContext);
    public TypeCatalog(IEnumerable`1<Type> types, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public TypeCatalog(Type[] types);
    private sealed virtual override string System.ComponentModel.Composition.Primitives.ICompositionElement.get_DisplayName();
    private sealed virtual override ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.get_Origin();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface System.ComponentModel.Composition.ICompositionService {
    public abstract virtual void SatisfyImportsOnce(ComposablePart part);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class System.ComponentModel.Composition.ImportAttribute : Attribute {
    public bool AllowDefault { get; public set; }
    public bool AllowRecomposition { get; public set; }
    public string ContractName { get; }
    public Type ContractType { get; }
    public CreationPolicy RequiredCreationPolicy { get; public set; }
    public ImportSource Source { get; public set; }
    public ImportAttribute(string contractName);
    public ImportAttribute(string contractName, Type contractType);
    public ImportAttribute(Type contractType);
    public bool get_AllowDefault();
    public void set_AllowDefault(bool value);
    public bool get_AllowRecomposition();
    public void set_AllowRecomposition(bool value);
    public string get_ContractName();
    public Type get_ContractType();
    public CreationPolicy get_RequiredCreationPolicy();
    public void set_RequiredCreationPolicy(CreationPolicy value);
    public ImportSource get_Source();
    public void set_Source(ImportSource value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.ImportCardinalityMismatchException : Exception {
    [NullableContextAttribute("1")]
protected ImportCardinalityMismatchException(SerializationInfo info, StreamingContext context);
    public ImportCardinalityMismatchException(string message);
    public ImportCardinalityMismatchException(string message, Exception innerException);
}
[AttributeUsageAttribute("32")]
public class System.ComponentModel.Composition.ImportingConstructorAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2432")]
public class System.ComponentModel.Composition.ImportManyAttribute : Attribute {
    public bool AllowRecomposition { get; public set; }
    public string ContractName { get; }
    public Type ContractType { get; }
    public CreationPolicy RequiredCreationPolicy { get; public set; }
    public ImportSource Source { get; public set; }
    public ImportManyAttribute(string contractName);
    public ImportManyAttribute(string contractName, Type contractType);
    public ImportManyAttribute(Type contractType);
    public bool get_AllowRecomposition();
    public void set_AllowRecomposition(bool value);
    public string get_ContractName();
    public Type get_ContractType();
    public CreationPolicy get_RequiredCreationPolicy();
    public void set_RequiredCreationPolicy(CreationPolicy value);
    public ImportSource get_Source();
    public void set_Source(ImportSource value);
}
public enum System.ComponentModel.Composition.ImportSource : Enum {
    public int value__;
    public static ImportSource Any;
    public static ImportSource Local;
    public static ImportSource NonLocal;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1028")]
public class System.ComponentModel.Composition.InheritedExportAttribute : ExportAttribute {
    public InheritedExportAttribute(string contractName);
    public InheritedExportAttribute(string contractName, Type contractType);
    public InheritedExportAttribute(Type contractType);
}
public interface System.ComponentModel.Composition.IPartImportsSatisfiedNotification {
    public abstract virtual void OnImportsSatisfied();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Composition.MetadataAttributeAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1024")]
public class System.ComponentModel.Composition.MetadataViewImplementationAttribute : Attribute {
    public Type ImplementationType { get; }
    public MetadataViewImplementationAttribute(Type implementationType);
    public Type get_ImplementationType();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Composition.PartCreationPolicyAttribute : Attribute {
    public CreationPolicy CreationPolicy { get; }
    public PartCreationPolicyAttribute(CreationPolicy creationPolicy);
    public CreationPolicy get_CreationPolicy();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Composition.PartMetadataAttribute : Attribute {
    [NullableAttribute("1")]
public string Name { get; }
    public object Value { get; }
    public PartMetadataAttribute(string name, object value);
    [NullableContextAttribute("1")]
public string get_Name();
    public object get_Value();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Composition.PartNotDiscoverableAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.ComponentModel.Composition.Primitives.ComposablePart : object {
    public IEnumerable`1<ExportDefinition> ExportDefinitions { get; }
    public IEnumerable`1<ImportDefinition> ImportDefinitions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public abstract virtual IEnumerable`1<ExportDefinition> get_ExportDefinitions();
    public abstract virtual IEnumerable`1<ImportDefinition> get_ImportDefinitions();
    public virtual IDictionary`2<string, object> get_Metadata();
    public virtual void Activate();
    public abstract virtual object GetExportedValue(ExportDefinition definition);
    public abstract virtual void SetImport(ImportDefinition definition, IEnumerable`1<Export> exports);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.ComponentModel.Composition.Primitives.ComposablePartCatalog : object {
    [EditorBrowsableAttribute("1")]
public IQueryable`1<ComposablePartDefinition> Parts { get; }
    public virtual IQueryable`1<ComposablePartDefinition> get_Parts();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.ComponentModel.Composition.Primitives.ComposablePartDefinition : object {
    public IEnumerable`1<ExportDefinition> ExportDefinitions { get; }
    public IEnumerable`1<ImportDefinition> ImportDefinitions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public abstract virtual IEnumerable`1<ExportDefinition> get_ExportDefinitions();
    public abstract virtual IEnumerable`1<ImportDefinition> get_ImportDefinitions();
    public virtual IDictionary`2<string, object> get_Metadata();
    public abstract virtual ComposablePart CreatePart();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Primitives.ComposablePartException : Exception {
    public ICompositionElement Element { get; }
    [NullableContextAttribute("1")]
protected ComposablePartException(SerializationInfo info, StreamingContext context);
    public ComposablePartException(string message);
    public ComposablePartException(string message, ICompositionElement element);
    public ComposablePartException(string message, ICompositionElement element, Exception innerException);
    public ComposablePartException(string message, Exception innerException);
    public ICompositionElement get_Element();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition : ImportDefinition {
    public Expression`1<Func`2<ExportDefinition, bool>> Constraint { get; }
    public CreationPolicy RequiredCreationPolicy { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, Type>> RequiredMetadata { get; }
    [NullableAttribute("2")]
public string RequiredTypeIdentity { get; }
    public ContractBasedImportDefinition(string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite, CreationPolicy requiredCreationPolicy);
    public ContractBasedImportDefinition(string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite, CreationPolicy requiredCreationPolicy, IDictionary`2<string, object> metadata);
    public virtual Expression`1<Func`2<ExportDefinition, bool>> get_Constraint();
    public virtual CreationPolicy get_RequiredCreationPolicy();
    public virtual IEnumerable`1<KeyValuePair`2<string, Type>> get_RequiredMetadata();
    [NullableContextAttribute("2")]
public virtual string get_RequiredTypeIdentity();
    public virtual bool IsConstraintSatisfiedBy(ExportDefinition exportDefinition);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Primitives.Export : object {
    public ExportDefinition Definition { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public Export(ExportDefinition definition, Func`1<object> exportedValueGetter);
    public Export(string contractName, IDictionary`2<string, object> metadata, Func`1<object> exportedValueGetter);
    public Export(string contractName, Func`1<object> exportedValueGetter);
    public virtual ExportDefinition get_Definition();
    public IDictionary`2<string, object> get_Metadata();
    [NullableContextAttribute("2")]
public object get_Value();
    [NullableContextAttribute("2")]
protected virtual object GetExportedValueCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Primitives.ExportDefinition : object {
    public string ContractName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public ExportDefinition(string contractName, IDictionary`2<string, object> metadata);
    public virtual string get_ContractName();
    public virtual IDictionary`2<string, object> get_Metadata();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Primitives.ExportedDelegate : object {
    public ExportedDelegate(object instance, MethodInfo method);
    public virtual Delegate CreateDelegate(Type delegateType);
}
[NullableContextAttribute("1")]
public interface System.ComponentModel.Composition.Primitives.ICompositionElement {
    public string DisplayName { get; }
    [NullableAttribute("2")]
public ICompositionElement Origin { get; }
    public abstract virtual string get_DisplayName();
    [NullableContextAttribute("2")]
public abstract virtual ICompositionElement get_Origin();
}
public enum System.ComponentModel.Composition.Primitives.ImportCardinality : Enum {
    public int value__;
    public static ImportCardinality ZeroOrOne;
    public static ImportCardinality ExactlyOne;
    public static ImportCardinality ZeroOrMore;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.Primitives.ImportDefinition : object {
    public ImportCardinality Cardinality { get; }
    public Expression`1<Func`2<ExportDefinition, bool>> Constraint { get; }
    public string ContractName { get; }
    public bool IsPrerequisite { get; }
    public bool IsRecomposable { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Metadata { get; }
    public ImportDefinition(Expression`1<Func`2<ExportDefinition, bool>> constraint, string contractName, ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite);
    public ImportDefinition(Expression`1<Func`2<ExportDefinition, bool>> constraint, string contractName, ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite, IDictionary`2<string, object> metadata);
    public virtual ImportCardinality get_Cardinality();
    public virtual Expression`1<Func`2<ExportDefinition, bool>> get_Constraint();
    public virtual string get_ContractName();
    public virtual bool get_IsPrerequisite();
    public virtual bool get_IsRecomposable();
    public virtual IDictionary`2<string, object> get_Metadata();
    public virtual bool IsConstraintSatisfiedBy(ExportDefinition exportDefinition);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public MemberTypes MemberType { get; }
    public LazyMemberInfo(MemberInfo member);
    public LazyMemberInfo(MemberTypes memberType, Func`1<MemberInfo[]> accessorsCreator);
    public LazyMemberInfo(MemberTypes memberType, MemberInfo[] accessors);
    public MemberTypes get_MemberType();
    public sealed virtual bool Equals(LazyMemberInfo other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public MemberInfo[] GetAccessors();
    public virtual int GetHashCode();
    public static bool op_Equality(LazyMemberInfo left, LazyMemberInfo right);
    public static bool op_Inequality(LazyMemberInfo left, LazyMemberInfo right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices : object {
    public static ExportDefinition CreateExportDefinition(LazyMemberInfo exportingMember, string contractName, Lazy`1<IDictionary`2<string, object>> metadata, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, CreationPolicy requiredCreationPolicy, IDictionary`2<string, object> metadata, bool isExportFactory, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, CreationPolicy requiredCreationPolicy, IDictionary`2<string, object> metadata, bool isExportFactory, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, CreationPolicy requiredCreationPolicy, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(Lazy`1<ParameterInfo> parameter, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, CreationPolicy requiredCreationPolicy, IDictionary`2<string, object> metadata, bool isExportFactory, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(Lazy`1<ParameterInfo> parameter, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, CreationPolicy requiredCreationPolicy, ICompositionElement origin);
    public static ComposablePartDefinition CreatePartDefinition(Lazy`1<Type> partType, bool isDisposalRequired, Lazy`1<IEnumerable`1<ImportDefinition>> imports, Lazy`1<IEnumerable`1<ExportDefinition>> exports, Lazy`1<IDictionary`2<string, object>> metadata, ICompositionElement origin);
    public static ContractBasedImportDefinition GetExportFactoryProductImportDefinition(ImportDefinition importDefinition);
    public static LazyMemberInfo GetExportingMember(ExportDefinition exportDefinition);
    public static LazyMemberInfo GetImportingMember(ImportDefinition importDefinition);
    public static Lazy`1<ParameterInfo> GetImportingParameter(ImportDefinition importDefinition);
    public static Lazy`1<Type> GetPartType(ComposablePartDefinition partDefinition);
    public static bool IsDisposalRequired(ComposablePartDefinition partDefinition);
    public static bool IsExportFactoryImportDefinition(ImportDefinition importDefinition);
    public static bool IsImportingParameter(ImportDefinition importDefinition);
    public static bool TryMakeGenericPartDefinition(ComposablePartDefinition partDefinition, IEnumerable`1<Type> genericParameters, ComposablePartDefinition& specialization);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentException_EmptyString { get; }
    internal static string ArgumentOutOfRange_InvalidEnum { get; }
    internal static string ArgumentValueType { get; }
    internal static string Argument_AssemblyReflectionOnly { get; }
    internal static string Argument_NullElement { get; }
    internal static string CardinalityMismatch_NoExports { get; }
    internal static string CardinalityMismatch_TooManyExports_Constraint { get; }
    internal static string ImportEngine_ComposeTookTooManyIterations { get; }
    internal static string ContractMismatch_ExportedValueCannotBeCastToT { get; }
    internal static string DirectoryNotFound { get; }
    internal static string ReflectionModel_PartConstructorThrewException { get; }
    internal static string ReflectionModel_ExportThrewException { get; }
    internal static string ReflectionModel_PartOnImportsSatisfiedThrewException { get; }
    internal static string ReflectionModel_ImportThrewException { get; }
    internal static string ExportDefinitionNotOnThisComposablePart { get; }
    internal static string ReflectionModel_ImportCollectionNotWritable { get; }
    internal static string ReflectionModel_ImportCollectionNull { get; }
    internal static string ImportEngine_PartCycle { get; }
    internal static string ImportDefinitionNotOnThisComposablePart { get; }
    internal static string ImportNotSetOnPart { get; }
    internal static string ReflectionModel_ImportNotWritable { get; }
    internal static string InternalExceptionMessage { get; }
    internal static string InvalidMetadataView { get; }
    internal static string NotSupportedInterfaceMetadataView { get; }
    internal static string ReflectionModel_PartConstructorMissing { get; }
    internal static string NotImplemented_NotOverriddenByDerived { get; }
    internal static string ObjectAlreadyInitialized { get; }
    internal static string ObjectMustBeInitialized { get; }
    internal static string ReflectionModel_ImportNotAssignableFromExport { get; }
    internal static string ReflectionModel_ExportNotReadable { get; }
    internal static string Argument_ElementReflectionOnlyType { get; }
    internal static string InvalidOperation_DefinitionCannotBeRecomposed { get; }
    internal static string Argument_ExportsEmpty { get; }
    internal static string Argument_ExportsTooMany { get; }
    internal static string CompositionElement_UnknownOrigin { get; }
    internal static string ImportEngine_PartCannotActivate { get; }
    internal static string ImportEngine_PartCannotSetImport { get; }
    internal static string ImportEngine_PartCannotGetExportedValue { get; }
    internal static string TypeCatalog_Empty { get; }
    internal static string InvalidOperation_GetExportedValueBeforePrereqImportSet { get; }
    internal static string CompositionException_ErrorPrefix { get; }
    internal static string CompositionException_MultipleErrorsWithMultiplePaths { get; }
    internal static string CompositionException_ReviewErrorProperty { get; }
    internal static string CompositionException_SingleErrorWithMultiplePaths { get; }
    internal static string CompositionException_SingleErrorWithSinglePath { get; }
    internal static string ReflectionModel_ImportCollectionGetThrewException { get; }
    internal static string ReflectionModel_ImportCollectionAddThrewException { get; }
    internal static string ReflectionModel_ImportCollectionClearThrewException { get; }
    internal static string ReflectionModel_ImportCollectionIsReadOnlyThrewException { get; }
    internal static string ReflectionModel_ImportCollectionConstructionThrewException { get; }
    internal static string CompositionTrace_Discovery_MemberMarkedWithMultipleImportAndImportMany { get; }
    internal static string Discovery_MetadataContainsValueWithInvalidType { get; }
    internal static string Discovery_DuplicateMetadataNameValues { get; }
    internal static string Discovery_ReservedMetadataNameUsed { get; }
    internal static string ReflectionModel_InvalidExportDefinition { get; }
    internal static string ImportEngine_PreventedByExistingImport { get; }
    internal static string ReflectionModel_InvalidImportDefinition { get; }
    internal static string ReflectionModel_InvalidPartDefinition { get; }
    internal static string ArgumentOutOfRange_InvalidEnumInSet { get; }
    internal static string ReflectionModel_InvalidMemberImportDefinition { get; }
    internal static string ReflectionModel_InvalidParameterImportDefinition { get; }
    internal static string LazyMemberInfo_AccessorsNull { get; }
    internal static string LazyMemberInfo_InvalidAccessorOnSimpleMember { get; }
    internal static string LazyMemberinfo_InvalidEventAccessors_AccessorType { get; }
    internal static string LazyMemberInfo_InvalidEventAccessors_Cardinality { get; }
    internal static string LazyMemberinfo_InvalidPropertyAccessors_AccessorType { get; }
    internal static string LazyMemberInfo_InvalidPropertyAccessors_Cardinality { get; }
    internal static string LazyMemberInfo_NoAccessors { get; }
    internal static string LazyServices_LazyResolvesToNull { get; }
    internal static string InvalidMetadataValue { get; }
    internal static string ContractMismatch_InvalidCastOnMetadataField { get; }
    internal static string ContractMismatch_NullReferenceOnMetadataField { get; }
    internal static string InvalidSetterOnMetadataField { get; }
    internal static string CompositionException_ChangesRejected { get; }
    internal static string ImportEngine_InvalidStateForRecomposition { get; }
    internal static string AtomicComposition_AlreadyCompleted { get; }
    internal static string AtomicComposition_PartOfAnotherAtomicComposition { get; }
    internal static string AtomicComposition_AlreadyNested { get; }
    internal static string ReentrantCompose { get; }
    internal static string ReflectionModel_ImportManyOnParameterCanOnlyBeAssigned { get; }
    internal static string CompositionException_ElementPrefix { get; }
    internal static string CompositionException_OriginSeparator { get; }
    internal static string CompositionTrace_Rejection_DefinitionRejected { get; }
    internal static string CompositionTrace_Rejection_DefinitionResurrected { get; }
    internal static string CompositionTrace_Discovery_AssemblyLoadFailed { get; }
    internal static string CompositionTrace_Discovery_DefinitionContainsNoExports { get; }
    internal static string CompositionTrace_Discovery_DefinitionMarkedWithPartNotDiscoverableAttribute { get; }
    internal static string CompositionException_MetadataViewInvalidConstructor { get; }
    internal static string CompositionException_PathsCountSeparator { get; }
    internal static string CompositionException_OriginFormat { get; }
    internal static string TypeCatalog_DisplayNameFormat { get; }
    internal static string ImportNotValidOnIndexers { get; }
    internal static string ExportNotValidOnIndexers { get; }
    internal static string ReflectionContext_Requires_DefaultConstructor { get; }
    internal static string ReflectionContext_Type_Required { get; }
    internal static string CompositionTrace_Discovery_DefinitionMismatchedExportArity { get; }
    internal static string Argument_ReflectionContextReturnsReflectionOnlyType { get; }
    internal static string ContractMismatch_MetadataViewImplementationDoesNotImplementViewInterface { get; }
    internal static string ContractMismatch_MetadataViewImplementationCanNotBeNull { get; }
    internal static string ExportFactory_TooManyGenericParameters { get; }
    internal static string NotSupportedCatalogChanges { get; }
    internal static string InvalidOperation_RevertAndCompleteActionsMustNotThrow { get; }
    internal static string PlatformNotSupported_ComponentModel_Composition { get; }
    internal static string Expecting_AtleastOne_Type { get; }
    internal static string Expecting_Empty_Queue { get; }
    internal static string Expecting_Generic_Type { get; }
    internal static string Diagnostic_InternalExceptionMessage { get; }
    internal static string Diagnostic_TraceUnnecessaryWork { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentException_EmptyString();
    internal static string get_ArgumentOutOfRange_InvalidEnum();
    internal static string get_ArgumentValueType();
    internal static string get_Argument_AssemblyReflectionOnly();
    internal static string get_Argument_NullElement();
    internal static string get_CardinalityMismatch_NoExports();
    internal static string get_CardinalityMismatch_TooManyExports_Constraint();
    internal static string get_ImportEngine_ComposeTookTooManyIterations();
    internal static string get_ContractMismatch_ExportedValueCannotBeCastToT();
    internal static string get_DirectoryNotFound();
    internal static string get_ReflectionModel_PartConstructorThrewException();
    internal static string get_ReflectionModel_ExportThrewException();
    internal static string get_ReflectionModel_PartOnImportsSatisfiedThrewException();
    internal static string get_ReflectionModel_ImportThrewException();
    internal static string get_ExportDefinitionNotOnThisComposablePart();
    internal static string get_ReflectionModel_ImportCollectionNotWritable();
    internal static string get_ReflectionModel_ImportCollectionNull();
    internal static string get_ImportEngine_PartCycle();
    internal static string get_ImportDefinitionNotOnThisComposablePart();
    internal static string get_ImportNotSetOnPart();
    internal static string get_ReflectionModel_ImportNotWritable();
    internal static string get_InternalExceptionMessage();
    internal static string get_InvalidMetadataView();
    internal static string get_NotSupportedInterfaceMetadataView();
    internal static string get_ReflectionModel_PartConstructorMissing();
    internal static string get_NotImplemented_NotOverriddenByDerived();
    internal static string get_ObjectAlreadyInitialized();
    internal static string get_ObjectMustBeInitialized();
    internal static string get_ReflectionModel_ImportNotAssignableFromExport();
    internal static string get_ReflectionModel_ExportNotReadable();
    internal static string get_Argument_ElementReflectionOnlyType();
    internal static string get_InvalidOperation_DefinitionCannotBeRecomposed();
    internal static string get_Argument_ExportsEmpty();
    internal static string get_Argument_ExportsTooMany();
    internal static string get_CompositionElement_UnknownOrigin();
    internal static string get_ImportEngine_PartCannotActivate();
    internal static string get_ImportEngine_PartCannotSetImport();
    internal static string get_ImportEngine_PartCannotGetExportedValue();
    internal static string get_TypeCatalog_Empty();
    internal static string get_InvalidOperation_GetExportedValueBeforePrereqImportSet();
    internal static string get_CompositionException_ErrorPrefix();
    internal static string get_CompositionException_MultipleErrorsWithMultiplePaths();
    internal static string get_CompositionException_ReviewErrorProperty();
    internal static string get_CompositionException_SingleErrorWithMultiplePaths();
    internal static string get_CompositionException_SingleErrorWithSinglePath();
    internal static string get_ReflectionModel_ImportCollectionGetThrewException();
    internal static string get_ReflectionModel_ImportCollectionAddThrewException();
    internal static string get_ReflectionModel_ImportCollectionClearThrewException();
    internal static string get_ReflectionModel_ImportCollectionIsReadOnlyThrewException();
    internal static string get_ReflectionModel_ImportCollectionConstructionThrewException();
    internal static string get_CompositionTrace_Discovery_MemberMarkedWithMultipleImportAndImportMany();
    internal static string get_Discovery_MetadataContainsValueWithInvalidType();
    internal static string get_Discovery_DuplicateMetadataNameValues();
    internal static string get_Discovery_ReservedMetadataNameUsed();
    internal static string get_ReflectionModel_InvalidExportDefinition();
    internal static string get_ImportEngine_PreventedByExistingImport();
    internal static string get_ReflectionModel_InvalidImportDefinition();
    internal static string get_ReflectionModel_InvalidPartDefinition();
    internal static string get_ArgumentOutOfRange_InvalidEnumInSet();
    internal static string get_ReflectionModel_InvalidMemberImportDefinition();
    internal static string get_ReflectionModel_InvalidParameterImportDefinition();
    internal static string get_LazyMemberInfo_AccessorsNull();
    internal static string get_LazyMemberInfo_InvalidAccessorOnSimpleMember();
    internal static string get_LazyMemberinfo_InvalidEventAccessors_AccessorType();
    internal static string get_LazyMemberInfo_InvalidEventAccessors_Cardinality();
    internal static string get_LazyMemberinfo_InvalidPropertyAccessors_AccessorType();
    internal static string get_LazyMemberInfo_InvalidPropertyAccessors_Cardinality();
    internal static string get_LazyMemberInfo_NoAccessors();
    internal static string get_LazyServices_LazyResolvesToNull();
    internal static string get_InvalidMetadataValue();
    internal static string get_ContractMismatch_InvalidCastOnMetadataField();
    internal static string get_ContractMismatch_NullReferenceOnMetadataField();
    internal static string get_InvalidSetterOnMetadataField();
    internal static string get_CompositionException_ChangesRejected();
    internal static string get_ImportEngine_InvalidStateForRecomposition();
    internal static string get_AtomicComposition_AlreadyCompleted();
    internal static string get_AtomicComposition_PartOfAnotherAtomicComposition();
    internal static string get_AtomicComposition_AlreadyNested();
    internal static string get_ReentrantCompose();
    internal static string get_ReflectionModel_ImportManyOnParameterCanOnlyBeAssigned();
    internal static string get_CompositionException_ElementPrefix();
    internal static string get_CompositionException_OriginSeparator();
    internal static string get_CompositionTrace_Rejection_DefinitionRejected();
    internal static string get_CompositionTrace_Rejection_DefinitionResurrected();
    internal static string get_CompositionTrace_Discovery_AssemblyLoadFailed();
    internal static string get_CompositionTrace_Discovery_DefinitionContainsNoExports();
    internal static string get_CompositionTrace_Discovery_DefinitionMarkedWithPartNotDiscoverableAttribute();
    internal static string get_CompositionException_MetadataViewInvalidConstructor();
    internal static string get_CompositionException_PathsCountSeparator();
    internal static string get_CompositionException_OriginFormat();
    internal static string get_TypeCatalog_DisplayNameFormat();
    internal static string get_ImportNotValidOnIndexers();
    internal static string get_ExportNotValidOnIndexers();
    internal static string get_ReflectionContext_Requires_DefaultConstructor();
    internal static string get_ReflectionContext_Type_Required();
    internal static string get_CompositionTrace_Discovery_DefinitionMismatchedExportArity();
    internal static string get_Argument_ReflectionContextReturnsReflectionOnlyType();
    internal static string get_ContractMismatch_MetadataViewImplementationDoesNotImplementViewInterface();
    internal static string get_ContractMismatch_MetadataViewImplementationCanNotBeNull();
    internal static string get_ExportFactory_TooManyGenericParameters();
    internal static string get_NotSupportedCatalogChanges();
    internal static string get_InvalidOperation_RevertAndCompleteActionsMustNotThrow();
    internal static string get_PlatformNotSupported_ComponentModel_Composition();
    internal static string get_Expecting_AtleastOne_Type();
    internal static string get_Expecting_Empty_Queue();
    internal static string get_Expecting_Generic_Type();
    internal static string get_Diagnostic_InternalExceptionMessage();
    internal static string get_Diagnostic_TraceUnnecessaryWork();
}
