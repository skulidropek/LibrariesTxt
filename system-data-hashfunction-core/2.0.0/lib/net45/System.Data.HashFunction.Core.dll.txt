public abstract class System.Data.HashFunction.Core.HashFunctionAsyncBase : HashFunctionBase {
    public sealed virtual Task`1<IHashValue> ComputeHashAsync(Stream data);
    [AsyncStateMachineAttribute("System.Data.HashFunction.Core.HashFunctionAsyncBase/<ComputeHashAsync>d__1")]
public sealed virtual Task`1<IHashValue> ComputeHashAsync(Stream data, CancellationToken cancellationToken);
    protected abstract virtual Task`1<Byte[]> ComputeHashAsyncInternal(IUnifiedDataAsync data, CancellationToken cancellationToken);
}
public abstract class System.Data.HashFunction.Core.HashFunctionBase : object {
    public int HashSizeInBits { get; }
    public abstract virtual int get_HashSizeInBits();
    public sealed virtual IHashValue ComputeHash(Byte[] data);
    public sealed virtual IHashValue ComputeHash(Byte[] data, CancellationToken cancellationToken);
    public sealed virtual IHashValue ComputeHash(Stream data);
    public sealed virtual IHashValue ComputeHash(Stream data, CancellationToken cancellationToken);
    protected abstract virtual Byte[] ComputeHashInternal(IUnifiedData data, CancellationToken cancellationToken);
}
public class System.Data.HashFunction.Core.Utilities.HashValue : object {
    [CompilerGeneratedAttribute]
private Byte[] <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitLength>k__BackingField;
    public Byte[] Hash { get; }
    public int BitLength { get; }
    public HashValue(IEnumerable`1<byte> hash, int bitLength);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_Hash();
    [CompilerGeneratedAttribute]
public sealed virtual int get_BitLength();
    public sealed virtual string AsBase64String();
    public sealed virtual BitArray AsBitArray();
    public sealed virtual string AsHexString();
    public sealed virtual string AsHexString(bool uppercase);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IHashValue other);
    private static Byte[] CoerceToArray(IEnumerable`1<byte> hash, int bitLength);
}
internal static class System.Data.HashFunction.Core.Utilities.NamespaceDoc : object {
}
internal class System.Data.HashFunction.Core.Utilities.UnifiedData.ArrayData : UnifiedDataBase {
    private Byte[] _data;
    public long Length { get; }
    public ArrayData(Byte[] data);
    public virtual long get_Length();
    public virtual void ForEachRead(Action`3<Byte[], int, int> action, CancellationToken cancellationToken);
    public virtual void ForEachGroup(int groupSize, Action`3<Byte[], int, int> action, Action`3<Byte[], int, int> remainderAction, CancellationToken cancellationToken);
    public virtual Byte[] ToArray(CancellationToken cancellationToken);
}
public interface System.Data.HashFunction.Core.Utilities.UnifiedData.IUnifiedData {
    public long Length { get; }
    public int BufferSize { get; public set; }
    public abstract virtual long get_Length();
    public abstract virtual int get_BufferSize();
    public abstract virtual void set_BufferSize(int value);
    public abstract virtual void ForEachRead(Action`3<Byte[], int, int> action, CancellationToken cancellationToken);
    public abstract virtual void ForEachGroup(int groupSize, Action`3<Byte[], int, int> action, Action`3<Byte[], int, int> remainderAction, CancellationToken cancellationToken);
    public abstract virtual Byte[] ToArray(CancellationToken cancellationToken);
}
public interface System.Data.HashFunction.Core.Utilities.UnifiedData.IUnifiedDataAsync {
    public abstract virtual Task ForEachReadAsync(Action`3<Byte[], int, int> action, CancellationToken cancellationToken);
    public abstract virtual Task ForEachGroupAsync(int groupSize, Action`3<Byte[], int, int> action, Action`3<Byte[], int, int> remainderAction, CancellationToken cancellationToken);
    public abstract virtual Task`1<Byte[]> ToArrayAsync(CancellationToken cancellationToken);
}
internal static class System.Data.HashFunction.Core.Utilities.UnifiedData.NamespaceDoc : object {
}
internal class System.Data.HashFunction.Core.Utilities.UnifiedData.StreamData : UnifiedDataAsyncBase {
    private Stream _data;
    private bool _disposed;
    public long Length { get; }
    public StreamData(Stream data);
    public virtual long get_Length();
    public sealed virtual void Dispose();
    public virtual void ForEachRead(Action`3<Byte[], int, int> action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.HashFunction.Core.Utilities.UnifiedData.StreamData/<ForEachReadAsync>d__7")]
public virtual Task ForEachReadAsync(Action`3<Byte[], int, int> action, CancellationToken cancellationToken);
    public virtual void ForEachGroup(int groupSize, Action`3<Byte[], int, int> action, Action`3<Byte[], int, int> remainderAction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.HashFunction.Core.Utilities.UnifiedData.StreamData/<ForEachGroupAsync>d__9")]
public virtual Task ForEachGroupAsync(int groupSize, Action`3<Byte[], int, int> action, Action`3<Byte[], int, int> remainderAction, CancellationToken cancellationToken);
    public virtual Byte[] ToArray(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.HashFunction.Core.Utilities.UnifiedData.StreamData/<ToArrayAsync>d__11")]
public virtual Task`1<Byte[]> ToArrayAsync(CancellationToken cancellationToken);
}
internal abstract class System.Data.HashFunction.Core.Utilities.UnifiedData.UnifiedDataAsyncBase : UnifiedDataBase {
    public abstract virtual Task ForEachReadAsync(Action`3<Byte[], int, int> action, CancellationToken cancellationToken);
    public abstract virtual Task ForEachGroupAsync(int groupSize, Action`3<Byte[], int, int> action, Action`3<Byte[], int, int> remainderAction, CancellationToken cancellationToken);
    public abstract virtual Task`1<Byte[]> ToArrayAsync(CancellationToken cancellationToken);
}
internal abstract class System.Data.HashFunction.Core.Utilities.UnifiedData.UnifiedDataBase : object {
    private int _BufferSize;
    public long Length { get; }
    public int BufferSize { get; public set; }
    public abstract virtual long get_Length();
    public virtual int get_BufferSize();
    public virtual void set_BufferSize(int value);
    public abstract virtual void ForEachRead(Action`3<Byte[], int, int> action, CancellationToken cancellationToken);
    public abstract virtual void ForEachGroup(int groupSize, Action`3<Byte[], int, int> action, Action`3<Byte[], int, int> remainderAction, CancellationToken cancellationToken);
    public abstract virtual Byte[] ToArray(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class System.Data.HashFunction.IHashFunction_Extensions : object {
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, bool data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, byte data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, char data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, double data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, float data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, int data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, long data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, sbyte data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, short data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, string data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, UInt32 data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, ulong data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, ushort data);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, bool data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, byte data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, char data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, double data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, float data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, int data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, long data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, sbyte data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, short data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, string data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, UInt32 data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, ulong data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, ushort data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, ModelT data, int desiredHashSize);
    [ExtensionAttribute]
public static IHashValue ComputeHash(IHashFunction hashFunction, Byte[] data, int desiredHashSize);
}
internal static class System.Data.HashFunction.NamespaceDoc : object {
}
