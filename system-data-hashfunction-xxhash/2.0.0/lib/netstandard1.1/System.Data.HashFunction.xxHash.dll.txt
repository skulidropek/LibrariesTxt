public interface System.Data.HashFunction.xxHash.IxxHash {
    public IxxHashConfig Config { get; }
    public abstract virtual IxxHashConfig get_Config();
}
public interface System.Data.HashFunction.xxHash.IxxHashConfig {
    public int HashSizeInBits { get; }
    public ulong Seed { get; }
    public abstract virtual int get_HashSizeInBits();
    public abstract virtual ulong get_Seed();
    public abstract virtual IxxHashConfig Clone();
}
public interface System.Data.HashFunction.xxHash.IxxHashFactory {
    public abstract virtual IxxHash Create();
    public abstract virtual IxxHash Create(IxxHashConfig config);
}
internal class System.Data.HashFunction.xxHash.xxHash_Implementation : HashFunctionAsyncBase {
    private IxxHashConfig _config;
    private static IReadOnlyList`1<UInt32> _primes32;
    private static IReadOnlyList`1<ulong> _primes64;
    private static IEnumerable`1<int> _validHashSizes;
    public IxxHashConfig Config { get; }
    public int HashSizeInBits { get; }
    public xxHash_Implementation(IxxHashConfig config);
    private static xxHash_Implementation();
    public sealed virtual IxxHashConfig get_Config();
    public virtual int get_HashSizeInBits();
    protected virtual Byte[] ComputeHashInternal(IUnifiedData data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Data.HashFunction.xxHash.xxHash_Implementation/<ComputeHashAsyncInternal>d__10")]
protected virtual Task`1<Byte[]> ComputeHashAsyncInternal(IUnifiedDataAsync data, CancellationToken cancellationToken);
    private void PostProcess(UInt32& h, UInt32[] initValues, ulong dataCount, Byte[] remainder);
    private void PostProcess(UInt64& h, UInt64[] initValues, ulong dataCount, Byte[] remainder);
    private static UInt32 RotateLeft(UInt32 operand, int shiftCount);
    private static ulong RotateLeft(ulong operand, int shiftCount);
}
public class System.Data.HashFunction.xxHash.xxHashConfig : object {
    [CompilerGeneratedAttribute]
private int <HashSizeInBits>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Seed>k__BackingField;
    public int HashSizeInBits { get; public set; }
    public ulong Seed { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_HashSizeInBits();
    [CompilerGeneratedAttribute]
public void set_HashSizeInBits(int value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(ulong value);
    public sealed virtual IxxHashConfig Clone();
}
public class System.Data.HashFunction.xxHash.xxHashFactory : object {
    [CompilerGeneratedAttribute]
private static IxxHashFactory <Instance>k__BackingField;
    public static IxxHashFactory Instance { get; }
    private static xxHashFactory();
    [CompilerGeneratedAttribute]
public static IxxHashFactory get_Instance();
    public sealed virtual IxxHash Create();
    public sealed virtual IxxHash Create(IxxHashConfig config);
}
