internal static class System.Data.SQLite.EF6.DmlSqlGenerator : object {
    private static int s_commandTextBuilderInitialCapacity;
    private static DmlSqlGenerator();
    internal static string GenerateUpdateSql(DbUpdateCommandTree tree, List`1& parameters);
    internal static string GenerateDeleteSql(DbDeleteCommandTree tree, List`1& parameters);
    internal static string GenerateInsertSql(DbInsertCommandTree tree, List`1& parameters);
    private static string GenerateMemberTSql(EdmMember member);
    private static bool IsIntegerPrimaryKey(EntitySetBase table, ReadOnlyMetadataCollection`1& keyMembers, EdmMember& primaryKeyMember);
    private static bool DoAllKeyMembersHaveValues(ExpressionTranslator translator, ReadOnlyMetadataCollection`1<EdmMember> keyMembers, EdmMember& missingKeyMember);
    private static void GenerateReturningSql(StringBuilder commandText, DbModificationCommandTree tree, ExpressionTranslator translator, DbExpression returning, bool wasInsert);
}
internal abstract class System.Data.SQLite.EF6.InternalBase : object {
    internal abstract virtual void ToCompactString(StringBuilder builder);
    internal virtual string ToFullString();
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
internal virtual void ToFullString(StringBuilder builder);
    public virtual string ToString();
}
internal interface System.Data.SQLite.EF6.ISqlFragment {
    public abstract virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SQLite.EF6.JoinSymbol : Symbol {
    private List`1<Symbol> columnList;
    private List`1<Symbol> extentList;
    private List`1<Symbol> flattenedExtentList;
    private Dictionary`2<string, Symbol> nameToExtent;
    private bool isNestedJoin;
    internal List`1<Symbol> ColumnList { get; internal set; }
    internal List`1<Symbol> ExtentList { get; }
    internal List`1<Symbol> FlattenedExtentList { get; internal set; }
    internal Dictionary`2<string, Symbol> NameToExtent { get; }
    internal bool IsNestedJoin { get; internal set; }
    public JoinSymbol(string name, TypeUsage type, List`1<Symbol> extents);
    internal List`1<Symbol> get_ColumnList();
    internal void set_ColumnList(List`1<Symbol> value);
    internal List`1<Symbol> get_ExtentList();
    internal List`1<Symbol> get_FlattenedExtentList();
    internal void set_FlattenedExtentList(List`1<Symbol> value);
    internal Dictionary`2<string, Symbol> get_NameToExtent();
    internal bool get_IsNestedJoin();
    internal void set_IsNestedJoin(bool value);
}
internal class System.Data.SQLite.EF6.KeyToListMap`2 : InternalBase {
    private Dictionary`2<TKey, List`1<TValue>> m_map;
    internal IEnumerable`1<TValue> AllValues { get; }
    internal IEnumerable`1<TKey> Keys { get; }
    internal IEnumerable`1<KeyValuePair`2<TKey, List`1<TValue>>> KeyValuePairs { get; }
    internal KeyToListMap`2(IEqualityComparer`1<TKey> comparer);
    internal void Add(TKey key, TValue value);
    internal void AddRange(TKey key, IEnumerable`1<TValue> values);
    internal bool ContainsKey(TKey key);
    internal IEnumerable`1<TValue> EnumerateValues(TKey key);
    internal ReadOnlyCollection`1<TValue> ListForKey(TKey key);
    internal bool RemoveKey(TKey key);
    internal virtual void ToCompactString(StringBuilder builder);
    internal bool TryGetListForKey(TKey key, ReadOnlyCollection`1& valueCollection);
    internal IEnumerable`1<TValue> get_AllValues();
    internal IEnumerable`1<TKey> get_Keys();
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
internal IEnumerable`1<KeyValuePair`2<TKey, List`1<TValue>>> get_KeyValuePairs();
}
internal static class System.Data.SQLite.EF6.MetadataHelpers : object {
    internal static string NullableFacetName;
    internal static int UnicodeStringMaxMaxLength;
    internal static int AsciiStringMaxMaxLength;
    internal static int BinaryMaxMaxLength;
    public static string MaxLengthFacetName;
    public static string UnicodeFacetName;
    public static string FixedLengthFacetName;
    public static string PreserveSecondsFacetName;
    public static string PrecisionFacetName;
    public static string ScaleFacetName;
    public static string DefaultValueFacetName;
    private static MetadataHelpers();
    internal static TEdmType GetEdmType(TypeUsage typeUsage);
    internal static TypeUsage GetElementTypeUsage(TypeUsage type);
    internal static IList`1<EdmProperty> GetProperties(TypeUsage typeUsage);
    internal static IList`1<EdmProperty> GetProperties(EdmType edmType);
    internal static bool IsCollectionType(TypeUsage typeUsage);
    internal static bool IsCollectionType(EdmType type);
    internal static bool IsPrimitiveType(TypeUsage type);
    internal static bool IsPrimitiveType(EdmType type);
    internal static bool IsRowType(TypeUsage type);
    internal static bool IsRowType(EdmType type);
    internal static bool TryGetPrimitiveTypeKind(TypeUsage type, PrimitiveTypeKind& typeKind);
    internal static PrimitiveTypeKind GetPrimitiveTypeKind(TypeUsage type);
    internal static T TryGetValueForMetadataProperty(MetadataItem item, string propertyName);
    internal static bool IsPrimitiveType(TypeUsage type, PrimitiveTypeKind primitiveType);
    internal static DbType GetDbType(PrimitiveTypeKind primitiveType);
    internal static T GetFacetValueOrDefault(TypeUsage type, string facetName, T defaultValue);
    internal static bool IsFacetValueConstant(TypeUsage type, string facetName);
    private static FacetDescription GetFacet(IEnumerable`1<FacetDescription> facetCollection, string facetName);
    internal static bool TryGetTypeFacetDescriptionByName(EdmType edmType, string facetName, FacetDescription& facetDescription);
    internal static bool IsNullable(TypeUsage type);
    internal static bool TryGetMaxLength(TypeUsage type, Int32& maxLength);
    internal static bool TryGetIntFacetValue(TypeUsage type, string facetName, Int32& intValue);
    internal static bool TryGetIsFixedLength(TypeUsage type, Boolean& isFixedLength);
    internal static bool TryGetBooleanFacetValue(TypeUsage type, string facetName, Boolean& boolValue);
    internal static bool TryGetIsUnicode(TypeUsage type, Boolean& isUnicode);
    internal static bool IsCanonicalFunction(EdmFunction function);
    internal static bool IsStoreFunction(EdmFunction function);
    internal static ParameterDirection ParameterModeToParameterDirection(ParameterMode mode);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class System.Data.SQLite.EF6.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string SQL_CONSTRAINTCOLUMNS { get; }
    internal static string SQL_CONSTRAINTS { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_SQL_CONSTRAINTCOLUMNS();
    internal static string get_SQL_CONSTRAINTS();
}
internal class System.Data.SQLite.EF6.SkipClause : object {
    private ISqlFragment skipCount;
    internal ISqlFragment SkipCount { get; }
    internal SkipClause(ISqlFragment skipCount);
    internal SkipClause(int skipCount);
    internal ISqlFragment get_SkipCount();
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SQLite.EF6.SqlBuilder : object {
    private List`1<object> _sqlFragments;
    private List`1<object> sqlFragments { get; }
    public bool IsEmpty { get; }
    private List`1<object> get_sqlFragments();
    public void Append(object s);
    public void AppendLine();
    public bool get_IsEmpty();
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SQLite.EF6.SqlChecker : DbExpressionVisitor`1<bool> {
    public virtual bool Visit(DbAndExpression expression);
    public virtual bool Visit(DbApplyExpression expression);
    public virtual bool Visit(DbArithmeticExpression expression);
    public virtual bool Visit(DbCaseExpression expression);
    public virtual bool Visit(DbCastExpression expression);
    public virtual bool Visit(DbComparisonExpression expression);
    public virtual bool Visit(DbConstantExpression expression);
    public virtual bool Visit(DbCrossJoinExpression expression);
    public virtual bool Visit(DbDerefExpression expression);
    public virtual bool Visit(DbDistinctExpression expression);
    public virtual bool Visit(DbElementExpression expression);
    public virtual bool Visit(DbEntityRefExpression expression);
    public virtual bool Visit(DbExceptExpression expression);
    public virtual bool Visit(DbExpression expression);
    public virtual bool Visit(DbFilterExpression expression);
    public virtual bool Visit(DbFunctionExpression expression);
    public virtual bool Visit(DbGroupByExpression expression);
    public virtual bool Visit(DbIntersectExpression expression);
    public virtual bool Visit(DbIsEmptyExpression expression);
    public virtual bool Visit(DbIsNullExpression expression);
    public virtual bool Visit(DbIsOfExpression expression);
    public virtual bool Visit(DbJoinExpression expression);
    public virtual bool Visit(DbLikeExpression expression);
    public virtual bool Visit(DbLimitExpression expression);
    public virtual bool Visit(DbNewInstanceExpression expression);
    public virtual bool Visit(DbNotExpression expression);
    public virtual bool Visit(DbNullExpression expression);
    public virtual bool Visit(DbOfTypeExpression expression);
    public virtual bool Visit(DbOrExpression expression);
    public virtual bool Visit(DbParameterReferenceExpression expression);
    public virtual bool Visit(DbProjectExpression expression);
    public virtual bool Visit(DbPropertyExpression expression);
    public virtual bool Visit(DbQuantifierExpression expression);
    public virtual bool Visit(DbRefExpression expression);
    public virtual bool Visit(DbRefKeyExpression expression);
    public virtual bool Visit(DbRelationshipNavigationExpression expression);
    public virtual bool Visit(DbScanExpression expression);
    public virtual bool Visit(DbSkipExpression expression);
    public virtual bool Visit(DbSortExpression expression);
    public virtual bool Visit(DbTreatExpression expression);
    public virtual bool Visit(DbUnionAllExpression expression);
    public virtual bool Visit(DbVariableReferenceExpression expression);
    private bool VisitAggregate(DbAggregate aggregate);
    private bool VisitAggregateList(IList`1<DbAggregate> list);
    private bool VisitBinaryExpression(DbBinaryExpression expr);
    private bool VisitExpression(DbExpression expression);
    private bool VisitExpressionBinding(DbExpressionBinding expressionBinding);
    private bool VisitExpressionBindingList(IList`1<DbExpressionBinding> list);
    private bool VisitExpressionList(IList`1<DbExpression> list);
    private static bool VisitList(ListElementHandler`1<TElementType> handler, IList`1<TElementType> list);
    private bool VisitSortClause(DbSortClause sortClause);
    private bool VisitSortClauseList(IList`1<DbSortClause> list);
    private bool VisitUnaryExpression(DbUnaryExpression expr);
}
internal class System.Data.SQLite.EF6.SqlGenerator : DbExpressionVisitor`1<ISqlFragment> {
    private SQLiteProviderManifest _manifest;
    private Stack`1<SqlSelectStatement> selectStatementStack;
    private Stack`1<bool> isParentAJoinStack;
    private Dictionary`2<string, int> allExtentNames;
    private Dictionary`2<string, int> allColumnNames;
    private SymbolTable symbolTable;
    private bool isVarRefSingle;
    private static Dictionary`2<string, FunctionHandler> _builtInFunctionHandlers;
    private static Dictionary`2<string, FunctionHandler> _canonicalFunctionHandlers;
    private static Dictionary`2<string, string> _functionNameToOperatorDictionary;
    private static Dictionary`2<string, string> _datepartKeywords;
    private static Char[] hexDigits;
    [CompilerGeneratedAttribute]
private static Func`2<DbExpression, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<DbExpression, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    private SqlSelectStatement CurrentSelectStatement { get; }
    private bool IsParentAJoin { get; }
    internal Dictionary`2<string, int> AllExtentNames { get; }
    internal Dictionary`2<string, int> AllColumnNames { get; }
    private SqlGenerator(SQLiteProviderManifest manifest);
    private static SqlGenerator();
    private SqlSelectStatement get_CurrentSelectStatement();
    private bool get_IsParentAJoin();
    internal Dictionary`2<string, int> get_AllExtentNames();
    internal Dictionary`2<string, int> get_AllColumnNames();
    private bool HasBuiltMapForIn(DbExpression e, KeyToListMap`2<DbExpression, DbExpression> values);
    private static Dictionary`2<string, FunctionHandler> InitializeBuiltInFunctionHandlers();
    private static Dictionary`2<string, FunctionHandler> InitializeCanonicalFunctionHandlers();
    private static Dictionary`2<string, string> InitializeDatepartKeywords();
    private static Dictionary`2<string, string> InitializeFunctionNameToOperatorDictionary();
    internal static string GenerateSql(SQLiteProviderManifest manifest, DbCommandTree tree, List`1& parameters, CommandType& commandType);
    private string GenerateSql(DbQueryCommandTree tree);
    private string GenerateFunctionSql(DbFunctionCommandTree tree, CommandType& commandType);
    private string WriteSql(ISqlFragment sqlStatement);
    private bool TryTranslateIntoIn(DbOrExpression e, ISqlFragment& sqlFragment);
    public virtual ISqlFragment Visit(DbAndExpression e);
    public virtual ISqlFragment Visit(DbApplyExpression e);
    public virtual ISqlFragment Visit(DbArithmeticExpression e);
    public virtual ISqlFragment Visit(DbCaseExpression e);
    public virtual ISqlFragment Visit(DbCastExpression e);
    public virtual ISqlFragment Visit(DbComparisonExpression e);
    public virtual ISqlFragment Visit(DbConstantExpression e);
    public virtual ISqlFragment Visit(DbDerefExpression e);
    public virtual ISqlFragment Visit(DbDistinctExpression e);
    public virtual ISqlFragment Visit(DbElementExpression e);
    public virtual ISqlFragment Visit(DbExceptExpression e);
    public virtual ISqlFragment Visit(DbExpression e);
    public virtual ISqlFragment Visit(DbScanExpression e);
    internal static string GetTargetTSql(EntitySetBase entitySetBase);
    public virtual ISqlFragment Visit(DbFilterExpression e);
    public virtual ISqlFragment Visit(DbFunctionExpression e);
    public virtual ISqlFragment Visit(DbEntityRefExpression e);
    public virtual ISqlFragment Visit(DbRefKeyExpression e);
    public virtual ISqlFragment Visit(DbGroupByExpression e);
    public virtual ISqlFragment Visit(DbIntersectExpression e);
    public virtual ISqlFragment Visit(DbIsEmptyExpression e);
    public virtual ISqlFragment Visit(DbIsNullExpression e);
    public virtual ISqlFragment Visit(DbIsOfExpression e);
    public virtual ISqlFragment Visit(DbCrossJoinExpression e);
    public virtual ISqlFragment Visit(DbJoinExpression e);
    public virtual ISqlFragment Visit(DbLikeExpression e);
    public virtual ISqlFragment Visit(DbLimitExpression e);
    public virtual ISqlFragment Visit(DbNewInstanceExpression e);
    public virtual ISqlFragment Visit(DbNotExpression e);
    public virtual ISqlFragment Visit(DbNullExpression e);
    public virtual ISqlFragment Visit(DbOfTypeExpression e);
    public virtual ISqlFragment Visit(DbOrExpression e);
    public virtual ISqlFragment Visit(DbParameterReferenceExpression e);
    public virtual ISqlFragment Visit(DbProjectExpression e);
    public virtual ISqlFragment Visit(DbPropertyExpression e);
    public virtual ISqlFragment Visit(DbQuantifierExpression e);
    public virtual ISqlFragment Visit(DbRefExpression e);
    public virtual ISqlFragment Visit(DbRelationshipNavigationExpression e);
    public virtual ISqlFragment Visit(DbSkipExpression e);
    public virtual ISqlFragment Visit(DbSortExpression e);
    public virtual ISqlFragment Visit(DbTreatExpression e);
    public virtual ISqlFragment Visit(DbUnionAllExpression e);
    public virtual ISqlFragment Visit(DbVariableReferenceExpression e);
    private SqlBuilder VisitAggregate(DbAggregate aggregate, object aggregateArgument);
    private SqlBuilder VisitBinaryExpression(string op, DbExpression left, DbExpression right);
    private SqlSelectStatement VisitInputExpression(DbExpression inputExpression, string inputVarName, TypeUsage inputVarType, Symbol& fromSymbol);
    private SqlBuilder VisitIsEmptyExpression(DbIsEmptyExpression e, bool negate);
    private ISqlFragment VisitCollectionConstructor(DbNewInstanceExpression e);
    private SqlBuilder VisitIsNullExpression(DbIsNullExpression e, bool negate);
    private ISqlFragment VisitJoinExpression(IList`1<DbExpressionBinding> inputs, DbExpressionKind joinKind, string joinString, DbExpression joinCondition);
    private void ProcessJoinInputResult(ISqlFragment fromExtentFragment, SqlSelectStatement result, DbExpressionBinding input, int fromSymbolStart);
    private ISqlFragment VisitNewInstanceExpression(DbNewInstanceExpression e);
    private ISqlFragment VisitSetOpExpression(DbExpression left, DbExpression right, string separator);
    private bool IsSpecialBuiltInFunction(DbFunctionExpression e);
    private bool IsSpecialCanonicalFunction(DbFunctionExpression e);
    private ISqlFragment HandleFunctionDefault(DbFunctionExpression e);
    private ISqlFragment HandleFunctionDefaultGivenName(DbFunctionExpression e, string functionName);
    private void HandleFunctionArgumentsDefault(DbFunctionExpression e, SqlBuilder result);
    private ISqlFragment HandleSpecialBuiltInFunction(DbFunctionExpression e);
    private ISqlFragment HandleSpecialCanonicalFunction(DbFunctionExpression e);
    private ISqlFragment HandleSpecialFunction(Dictionary`2<string, FunctionHandler> handlers, DbFunctionExpression e);
    private ISqlFragment HandleSpecialFunctionToOperator(DbFunctionExpression e, bool parenthesiseArguments);
    private static ISqlFragment HandleConcatFunction(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionBitwise(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleGetDateFunction(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleGetUtcDateFunction(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleDatepartDateFunction(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDateAdd(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDateSubtract(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionDatepart(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionIndexOf(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionNewGuid(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionLength(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionRound(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionTrim(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionLeft(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionRight(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionSubstring(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionToLower(SqlGenerator sqlgen, DbFunctionExpression e);
    private static ISqlFragment HandleCanonicalFunctionToUpper(SqlGenerator sqlgen, DbFunctionExpression e);
    private void AddColumns(SqlSelectStatement selectStatement, Symbol symbol, List`1<Symbol> columnList, Dictionary`2<string, Symbol> columnDictionary, String& separator);
    private List`1<Symbol> AddDefaultColumns(SqlSelectStatement selectStatement);
    private void AddFromSymbol(SqlSelectStatement selectStatement, string inputVarName, Symbol fromSymbol);
    private void AddFromSymbol(SqlSelectStatement selectStatement, string inputVarName, Symbol fromSymbol, bool addToSymbolTable);
    private void AddSortKeys(SqlBuilder orderByClause, IList`1<DbSortClause> sortKeys);
    private SqlSelectStatement CreateNewSelectStatement(SqlSelectStatement oldStatement, string inputVarName, TypeUsage inputVarType, Symbol& fromSymbol);
    private SqlSelectStatement CreateNewSelectStatement(SqlSelectStatement oldStatement, string inputVarName, TypeUsage inputVarType, bool finalizeOldStatement, Symbol& fromSymbol);
    private static bool NeedSingleQuotes(SQLiteDateFormats format);
    private static string EscapeSingleQuote(string s, bool isUnicode);
    private string GetSqlPrimitiveType(TypeUsage type);
    private ISqlFragment HandleCountExpression(DbExpression e);
    private bool IsApplyExpression(DbExpression e);
    private bool IsKeyForIn(DbExpression e);
    private bool IsJoinExpression(DbExpression e);
    private bool IsComplexExpression(DbExpression e);
    private bool IsCompatible(SqlSelectStatement result, DbExpressionKind expressionKind);
    private void ParenthesizeExpressionWithoutRedundantConstantCasts(DbExpression value, SqlBuilder sqlBuilder);
    private void ParanthesizeExpressionIfNeeded(DbExpression e, SqlBuilder result);
    internal static string QuoteIdentifier(string name);
    private bool TryAddExpressionForIn(DbBinaryExpression e, KeyToListMap`2<DbExpression, DbExpression> values);
    private SqlSelectStatement VisitExpressionEnsureSqlStatement(DbExpression e);
    private SqlSelectStatement VisitExpressionEnsureSqlStatement(DbExpression e, bool addDefaultColumns);
    private SqlSelectStatement VisitFilterExpression(DbExpressionBinding input, DbExpression predicate, bool negatePredicate);
    private void WrapNonQueryExtent(SqlSelectStatement result, ISqlFragment sqlFragment, DbExpressionKind expressionKind);
    private static bool IsBuiltinFunction(EdmFunction function);
    private void WriteFunctionName(SqlBuilder result, EdmFunction function);
    private static void ToBlobLiteral(Byte[] bytes, SqlBuilder builder);
    private static bool NeedsInnerQuery(IList`1<DbAggregate> aggregates);
    private static bool IsPropertyOverVarRef(DbExpression expression);
    [CompilerGeneratedAttribute]
private static bool <TryTranslateIntoIn>b__0(DbExpression v);
    [CompilerGeneratedAttribute]
private static bool <TryTranslateIntoIn>b__1(DbExpression v);
}
public class System.Data.SQLite.EF6.SQLiteProviderFactory : DbProviderFactory {
    public static SQLiteProviderFactory Instance;
    private bool disposed;
    private static SQLiteProviderFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void Dispose(bool disposing);
    protected virtual void Finalize();
}
internal class System.Data.SQLite.EF6.SQLiteProviderManifest : DbXmlEnabledProviderManifest {
    internal SQLiteDateFormats _dateTimeFormat;
    internal DateTimeKind _dateTimeKind;
    internal string _dateTimeFormatString;
    internal bool _binaryGuid;
    public SQLiteProviderManifest(string manifestToken);
    private static XmlReader GetProviderManifest();
    private static string GetProviderManifestToken(string manifestToken);
    private static SortedList`2<string, string> ParseProviderManifestToken(string manifestToken);
    internal void SetFromOptions(SortedList`2<string, string> opts);
    protected virtual XmlReader GetDbInformation(string informationType);
    public virtual TypeUsage GetEdmType(TypeUsage storeType);
    public virtual TypeUsage GetStoreType(TypeUsage edmType);
    private XmlReader GetStoreSchemaMapping();
    private XmlReader GetStoreSchemaDescription();
    internal static XmlReader GetXmlResource(string resourceName);
}
internal class System.Data.SQLite.EF6.SQLiteProviderServices : DbProviderServices {
    internal static SQLiteProviderServices Instance;
    private static SQLiteProviderServices();
    protected virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest manifest, DbCommandTree commandTree);
    private DbCommand CreateCommand(DbProviderManifest manifest, DbCommandTree commandTree);
    protected virtual string GetDbProviderManifestToken(DbConnection connection);
    protected virtual DbProviderManifest GetDbProviderManifest(string versionHint);
    internal static SQLiteParameter CreateSqlParameter(SQLiteProviderManifest manifest, string name, TypeUsage type, ParameterMode mode, object value);
    private static DbType GetSqlDbType(TypeUsage type, bool isOutParam, Nullable`1& size);
    private static Nullable`1<int> GetParameterSize(TypeUsage type, bool isOutParam);
    private static DbType GetStringDbType(TypeUsage type);
    private static DbType GetBinaryDbType(TypeUsage type);
    private sealed virtual override void System.Data.SQLite.ISQLiteSchemaExtensions.BuildTempSchema(SQLiteConnection cnn);
    private void DataTableToTable(SQLiteConnection cnn, DataTable table, string dest);
}
internal class System.Data.SQLite.EF6.SqlSelectStatement : object {
    private bool isDistinct;
    private List`1<Symbol> allJoinExtents;
    private List`1<Symbol> fromExtents;
    private Dictionary`2<Symbol, bool> outerExtents;
    private TopClause top;
    private SkipClause skip;
    private SqlBuilder select;
    private SqlBuilder from;
    private SqlBuilder where;
    private SqlBuilder groupBy;
    private SqlBuilder orderBy;
    private bool isTopMost;
    internal bool IsDistinct { get; internal set; }
    internal List`1<Symbol> AllJoinExtents { get; internal set; }
    internal List`1<Symbol> FromExtents { get; }
    internal Dictionary`2<Symbol, bool> OuterExtents { get; }
    internal TopClause Top { get; internal set; }
    internal SkipClause Skip { get; internal set; }
    internal SqlBuilder Select { get; }
    internal SqlBuilder From { get; }
    internal SqlBuilder Where { get; }
    internal SqlBuilder GroupBy { get; }
    public SqlBuilder OrderBy { get; }
    internal bool IsTopMost { get; internal set; }
    internal bool get_IsDistinct();
    internal void set_IsDistinct(bool value);
    internal List`1<Symbol> get_AllJoinExtents();
    internal void set_AllJoinExtents(List`1<Symbol> value);
    internal List`1<Symbol> get_FromExtents();
    internal Dictionary`2<Symbol, bool> get_OuterExtents();
    internal TopClause get_Top();
    internal void set_Top(TopClause value);
    internal SkipClause get_Skip();
    internal void set_Skip(SkipClause value);
    internal SqlBuilder get_Select();
    internal SqlBuilder get_From();
    internal SqlBuilder get_Where();
    internal SqlBuilder get_GroupBy();
    public SqlBuilder get_OrderBy();
    internal bool get_IsTopMost();
    internal void set_IsTopMost(bool value);
    public bool HaveOrderByLimitOrOffset();
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SQLite.EF6.SqlWriter : StringWriter {
    private int indent;
    private bool atBeginningOfLine;
    internal int Indent { get; internal set; }
    public SqlWriter(StringBuilder b);
    internal int get_Indent();
    internal void set_Indent(int value);
    public virtual void Write(string value);
    public virtual void WriteLine();
}
internal static class System.Data.SQLite.EF6.StringUtil : object {
    private static string s_defaultDelimiter;
    internal static string BuildDelimitedList(IEnumerable`1<T> values, ToStringConverter`1<T> converter, string delimiter);
    internal static string FormatIndex(string arrayVarName, int index);
    internal static string FormatInvariant(string format, Object[] args);
    internal static StringBuilder FormatStringBuilder(StringBuilder builder, string format, Object[] args);
    internal static StringBuilder IndentNewLine(StringBuilder builder, int indent);
    private static string InvariantConvertToString(T value);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
internal static bool IsNullOrEmptyOrWhiteSpace(string value);
    internal static bool IsNullOrEmptyOrWhiteSpace(string value, int offset);
    internal static bool IsNullOrEmptyOrWhiteSpace(string value, int offset, int length);
    internal static string MembersToCommaSeparatedString(IEnumerable members);
    internal static string ToCommaSeparatedString(IEnumerable list);
    internal static void ToCommaSeparatedString(StringBuilder builder, IEnumerable list);
    internal static string ToCommaSeparatedStringSorted(IEnumerable list);
    internal static void ToCommaSeparatedStringSorted(StringBuilder builder, IEnumerable list);
    internal static string ToSeparatedString(IEnumerable list, string separator, string nullValue);
    internal static void ToSeparatedString(StringBuilder builder, IEnumerable list, string separator);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
internal static void ToSeparatedString(StringBuilder stringBuilder, IEnumerable list, string separator, string nullValue);
    private static void ToSeparatedStringPrivate(StringBuilder stringBuilder, IEnumerable list, string separator, string nullValue, bool toSort);
    internal static string ToSeparatedStringSorted(IEnumerable list, string separator, string nullValue);
    internal static void ToSeparatedStringSorted(StringBuilder builder, IEnumerable list, string separator);
}
internal class System.Data.SQLite.EF6.Symbol : object {
    private Dictionary`2<string, Symbol> columns;
    private bool needsRenaming;
    private bool isUnnest;
    private string name;
    private string newName;
    private TypeUsage type;
    internal Dictionary`2<string, Symbol> Columns { get; }
    internal bool NeedsRenaming { get; internal set; }
    internal bool IsUnnest { get; internal set; }
    public string Name { get; }
    public string NewName { get; public set; }
    internal TypeUsage Type { get; internal set; }
    public Symbol(string name, TypeUsage type);
    internal Dictionary`2<string, Symbol> get_Columns();
    internal bool get_NeedsRenaming();
    internal void set_NeedsRenaming(bool value);
    internal bool get_IsUnnest();
    internal void set_IsUnnest(bool value);
    public string get_Name();
    public string get_NewName();
    public void set_NewName(string value);
    internal TypeUsage get_Type();
    internal void set_Type(TypeUsage value);
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SQLite.EF6.SymbolPair : object {
    public Symbol Source;
    public Symbol Column;
    public SymbolPair(Symbol source, Symbol column);
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SQLite.EF6.SymbolTable : object {
    private List`1<Dictionary`2<string, Symbol>> symbols;
    internal void EnterScope();
    internal void ExitScope();
    internal void Add(string name, Symbol value);
    internal Symbol Lookup(string name);
}
internal class System.Data.SQLite.EF6.TopClause : object {
    private ISqlFragment topCount;
    private bool withTies;
    internal bool WithTies { get; }
    internal ISqlFragment TopCount { get; }
    internal TopClause(ISqlFragment topCount, bool withTies);
    internal TopClause(int topCount, bool withTies);
    internal bool get_WithTies();
    internal ISqlFragment get_TopCount();
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
