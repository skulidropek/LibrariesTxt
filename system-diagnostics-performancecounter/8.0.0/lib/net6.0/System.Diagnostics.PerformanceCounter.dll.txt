internal static class FxResources.System.Diagnostics.PerformanceCounter.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class System.Diagnostics.CounterCreationData : object {
    public string CounterHelp { get; public set; }
    public string CounterName { get; public set; }
    public PerformanceCounterType CounterType { get; public set; }
    public CounterCreationData(string counterName, string counterHelp, PerformanceCounterType counterType);
    public string get_CounterHelp();
    public void set_CounterHelp(string value);
    public string get_CounterName();
    public void set_CounterName(string value);
    public PerformanceCounterType get_CounterType();
    public void set_CounterType(PerformanceCounterType value);
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.CounterCreationDataCollection : CollectionBase {
    public CounterCreationData Item { get; public set; }
    public CounterCreationDataCollection(CounterCreationDataCollection value);
    public CounterCreationDataCollection(CounterCreationData[] value);
    public CounterCreationData get_Item(int index);
    public void set_Item(int index, CounterCreationData value);
    public int Add(CounterCreationData value);
    public void AddRange(CounterCreationDataCollection value);
    public void AddRange(CounterCreationData[] value);
    public bool Contains(CounterCreationData value);
    public void CopyTo(CounterCreationData[] array, int index);
    public int IndexOf(CounterCreationData value);
    public void Insert(int index, CounterCreationData value);
    protected virtual void OnValidate(object value);
    public virtual void Remove(CounterCreationData value);
}
[IsReadOnlyAttribute]
public class System.Diagnostics.CounterSample : ValueType {
    private int _dummyPrimitive;
    public static CounterSample Empty;
    public long BaseValue { get; }
    public long CounterFrequency { get; }
    public long CounterTimeStamp { get; }
    public PerformanceCounterType CounterType { get; }
    public long RawValue { get; }
    public long SystemFrequency { get; }
    public long TimeStamp { get; }
    public long TimeStamp100nSec { get; }
    public CounterSample(long rawValue, long baseValue, long counterFrequency, long systemFrequency, long timeStamp, long timeStamp100nSec, PerformanceCounterType counterType);
    public CounterSample(long rawValue, long baseValue, long counterFrequency, long systemFrequency, long timeStamp, long timeStamp100nSec, PerformanceCounterType counterType, long counterTimeStamp);
    public long get_BaseValue();
    public long get_CounterFrequency();
    public long get_CounterTimeStamp();
    public PerformanceCounterType get_CounterType();
    public long get_RawValue();
    public long get_SystemFrequency();
    public long get_TimeStamp();
    public long get_TimeStamp100nSec();
    public static float Calculate(CounterSample counterSample);
    public static float Calculate(CounterSample counterSample, CounterSample nextCounterSample);
    public sealed virtual bool Equals(CounterSample sample);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(CounterSample a, CounterSample b);
    public static bool op_Inequality(CounterSample a, CounterSample b);
}
public static class System.Diagnostics.CounterSampleCalculator : object {
    public static float ComputeCounterValue(CounterSample newSample);
    public static float ComputeCounterValue(CounterSample oldSample, CounterSample newSample);
}
[InterfaceTypeAttribute("1")]
public interface System.Diagnostics.ICollectData {
    public abstract virtual void CloseData();
    public abstract virtual void CollectData(int id, IntPtr valueName, IntPtr data, int totalBytes, IntPtr& res);
}
public class System.Diagnostics.InstanceData : object {
    public string InstanceName { get; }
    public long RawValue { get; }
    public CounterSample Sample { get; }
    public InstanceData(string instanceName, CounterSample sample);
    public string get_InstanceName();
    public long get_RawValue();
    public CounterSample get_Sample();
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.InstanceDataCollection : DictionaryBase {
    public string CounterName { get; }
    public InstanceData Item { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    [ObsoleteAttribute("This constructor has been deprecated. Use System.Diagnostics.InstanceDataCollectionCollection.get_Item to get an instance of this collection instead.")]
public InstanceDataCollection(string counterName);
    public string get_CounterName();
    public InstanceData get_Item(string instanceName);
    public ICollection get_Keys();
    public ICollection get_Values();
    public bool Contains(string instanceName);
    public void CopyTo(InstanceData[] instances, int index);
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.InstanceDataCollectionCollection : DictionaryBase {
    public InstanceDataCollection Item { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public InstanceDataCollection get_Item(string counterName);
    public ICollection get_Keys();
    public ICollection get_Values();
    public bool Contains(string counterName);
    public void CopyTo(InstanceDataCollection[] counters, int index);
}
public class System.Diagnostics.PerformanceCounter : Component {
    [ObsoleteAttribute("PerformanceCounter.DefaultFileMappingSize has been deprecated and is not used. Use machine.config or an application configuration file to set the size of the PerformanceCounter file mapping instead.")]
public static int DefaultFileMappingSize;
    public string CategoryName { get; public set; }
    public string CounterHelp { get; }
    public string CounterName { get; public set; }
    public PerformanceCounterType CounterType { get; }
    public PerformanceCounterInstanceLifetime InstanceLifetime { get; public set; }
    public string InstanceName { get; public set; }
    public string MachineName { get; public set; }
    public long RawValue { get; public set; }
    public bool ReadOnly { get; public set; }
    public PerformanceCounter(string categoryName, string counterName);
    public PerformanceCounter(string categoryName, string counterName, bool readOnly);
    public PerformanceCounter(string categoryName, string counterName, string instanceName);
    public PerformanceCounter(string categoryName, string counterName, string instanceName, bool readOnly);
    public PerformanceCounter(string categoryName, string counterName, string instanceName, string machineName);
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_CounterHelp();
    public string get_CounterName();
    public void set_CounterName(string value);
    public PerformanceCounterType get_CounterType();
    public PerformanceCounterInstanceLifetime get_InstanceLifetime();
    public void set_InstanceLifetime(PerformanceCounterInstanceLifetime value);
    public string get_InstanceName();
    public void set_InstanceName(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public long get_RawValue();
    public void set_RawValue(long value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public sealed virtual void BeginInit();
    public void Close();
    public static void CloseSharedResources();
    public long Decrement();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void EndInit();
    public long Increment();
    public long IncrementBy(long value);
    public CounterSample NextSample();
    public float NextValue();
    public void RemoveInstance();
}
public class System.Diagnostics.PerformanceCounterCategory : object {
    public string CategoryHelp { get; }
    public string CategoryName { get; public set; }
    public PerformanceCounterCategoryType CategoryType { get; }
    public string MachineName { get; public set; }
    public PerformanceCounterCategory(string categoryName);
    public PerformanceCounterCategory(string categoryName, string machineName);
    public string get_CategoryHelp();
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public PerformanceCounterCategoryType get_CategoryType();
    public string get_MachineName();
    public void set_MachineName(string value);
    public bool CounterExists(string counterName);
    public static bool CounterExists(string counterName, string categoryName);
    public static bool CounterExists(string counterName, string categoryName, string machineName);
    [ObsoleteAttribute("This overload of PerformanceCounterCategory.Create has been deprecated. Use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData) instead.")]
public static PerformanceCounterCategory Create(string categoryName, string categoryHelp, CounterCreationDataCollection counterData);
    public static PerformanceCounterCategory Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, CounterCreationDataCollection counterData);
    public static PerformanceCounterCategory Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp);
    [ObsoleteAttribute("This overload of PerformanceCounterCategory.Create has been deprecated. Use System.Diagnostics.PerformanceCounterCategory.Create(string categoryName, string categoryHelp, PerformanceCounterCategoryType categoryType, string counterName, string counterHelp) instead.")]
public static PerformanceCounterCategory Create(string categoryName, string categoryHelp, string counterName, string counterHelp);
    public static void Delete(string categoryName);
    public static bool Exists(string categoryName);
    public static bool Exists(string categoryName, string machineName);
    public static PerformanceCounterCategory[] GetCategories();
    public static PerformanceCounterCategory[] GetCategories(string machineName);
    public PerformanceCounter[] GetCounters();
    public PerformanceCounter[] GetCounters(string instanceName);
    public String[] GetInstanceNames();
    public bool InstanceExists(string instanceName);
    public static bool InstanceExists(string instanceName, string categoryName);
    public static bool InstanceExists(string instanceName, string categoryName, string machineName);
    public InstanceDataCollectionCollection ReadCategory();
}
public enum System.Diagnostics.PerformanceCounterCategoryType : Enum {
    public int value__;
    public static PerformanceCounterCategoryType Unknown;
    public static PerformanceCounterCategoryType SingleInstance;
    public static PerformanceCounterCategoryType MultiInstance;
}
public enum System.Diagnostics.PerformanceCounterInstanceLifetime : Enum {
    public int value__;
    public static PerformanceCounterInstanceLifetime Global;
    public static PerformanceCounterInstanceLifetime Process;
}
public class System.Diagnostics.PerformanceCounterManager : object {
    [ObsoleteAttribute("PerformanceCounterManager has been deprecated. Use the PerformanceCounters through the System.Diagnostics.PerformanceCounter class instead.")]
private sealed virtual override void System.Diagnostics.ICollectData.CloseData();
    [ObsoleteAttribute("PerformanceCounterManager has been deprecated. Use the PerformanceCounters through the System.Diagnostics.PerformanceCounter class instead.")]
private sealed virtual override void System.Diagnostics.ICollectData.CollectData(int callIdx, IntPtr valueNamePtr, IntPtr dataPtr, int totalBytes, IntPtr& res);
}
public enum System.Diagnostics.PerformanceCounterType : Enum {
    public int value__;
    public static PerformanceCounterType NumberOfItemsHEX32;
    public static PerformanceCounterType NumberOfItemsHEX64;
    public static PerformanceCounterType NumberOfItems32;
    public static PerformanceCounterType NumberOfItems64;
    public static PerformanceCounterType CounterDelta32;
    public static PerformanceCounterType CounterDelta64;
    public static PerformanceCounterType SampleCounter;
    public static PerformanceCounterType CountPerTimeInterval32;
    public static PerformanceCounterType CountPerTimeInterval64;
    public static PerformanceCounterType RateOfCountsPerSecond32;
    public static PerformanceCounterType RateOfCountsPerSecond64;
    public static PerformanceCounterType RawFraction;
    public static PerformanceCounterType CounterTimer;
    public static PerformanceCounterType Timer100Ns;
    public static PerformanceCounterType SampleFraction;
    public static PerformanceCounterType CounterTimerInverse;
    public static PerformanceCounterType Timer100NsInverse;
    public static PerformanceCounterType CounterMultiTimer;
    public static PerformanceCounterType CounterMultiTimer100Ns;
    public static PerformanceCounterType CounterMultiTimerInverse;
    public static PerformanceCounterType CounterMultiTimer100NsInverse;
    public static PerformanceCounterType AverageTimer32;
    public static PerformanceCounterType ElapsedTime;
    public static PerformanceCounterType AverageCount64;
    public static PerformanceCounterType SampleBase;
    public static PerformanceCounterType AverageBase;
    public static PerformanceCounterType RawBase;
    public static PerformanceCounterType CounterMultiBase;
}
public class System.Diagnostics.PerformanceData.CounterData : object {
    public long RawValue { get; public set; }
    public long Value { get; public set; }
    public long get_RawValue();
    public void set_RawValue(long value);
    public long get_Value();
    public void set_Value(long value);
    public void Decrement();
    public void Increment();
    public void IncrementBy(long value);
}
public class System.Diagnostics.PerformanceData.CounterSet : object {
    public CounterSet(Guid providerGuid, Guid counterSetGuid, CounterSetInstanceType instanceType);
    public void AddCounter(int counterId, CounterType counterType);
    public void AddCounter(int counterId, CounterType counterType, string counterName);
    public CounterSetInstance CreateCounterSetInstance(string instanceName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
public class System.Diagnostics.PerformanceData.CounterSetInstance : object {
    public CounterSetInstanceCounterDataSet Counters { get; }
    public CounterSetInstanceCounterDataSet get_Counters();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet : object {
    public CounterData Item { get; }
    public CounterData Item { get; }
    public CounterData get_Item(int counterId);
    public CounterData get_Item(string counterName);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public enum System.Diagnostics.PerformanceData.CounterSetInstanceType : Enum {
    public int value__;
    public static CounterSetInstanceType Single;
    public static CounterSetInstanceType Multiple;
    public static CounterSetInstanceType GlobalAggregate;
    public static CounterSetInstanceType MultipleAggregate;
    public static CounterSetInstanceType GlobalAggregateWithHistory;
    public static CounterSetInstanceType InstanceAggregate;
}
public enum System.Diagnostics.PerformanceData.CounterType : Enum {
    public int value__;
    public static CounterType RawDataHex32;
    public static CounterType RawDataHex64;
    public static CounterType RawData32;
    public static CounterType RawData64;
    public static CounterType Delta32;
    public static CounterType Delta64;
    public static CounterType SampleCounter;
    public static CounterType QueueLength;
    public static CounterType LargeQueueLength;
    public static CounterType QueueLength100Ns;
    public static CounterType QueueLengthObjectTime;
    public static CounterType RateOfCountPerSecond32;
    public static CounterType RateOfCountPerSecond64;
    public static CounterType RawFraction32;
    public static CounterType RawFraction64;
    public static CounterType PercentageActive;
    public static CounterType PrecisionSystemTimer;
    public static CounterType PercentageActive100Ns;
    public static CounterType PrecisionTimer100Ns;
    public static CounterType ObjectSpecificTimer;
    public static CounterType PrecisionObjectSpecificTimer;
    public static CounterType SampleFraction;
    public static CounterType PercentageNotActive;
    public static CounterType PercentageNotActive100Ns;
    public static CounterType MultiTimerPercentageActive;
    public static CounterType MultiTimerPercentageActive100Ns;
    public static CounterType MultiTimerPercentageNotActive;
    public static CounterType MultiTimerPercentageNotActive100Ns;
    public static CounterType AverageTimer32;
    public static CounterType ElapsedTime;
    public static CounterType AverageCount64;
    public static CounterType SampleBase;
    public static CounterType AverageBase;
    public static CounterType RawBase32;
    public static CounterType RawBase64;
    public static CounterType MultiTimerBase;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string InvalidParameter { get; }
    internal static string CategoryHelpCorrupt { get; }
    internal static string CounterNameCorrupt { get; }
    internal static string CounterDataCorrupt { get; }
    internal static string InstanceNameTooLong { get; }
    internal static string ProcessLifetimeNotValidInGlobal { get; }
    internal static string CountersOOM { get; }
    internal static string MappingCorrupted { get; }
    internal static string SingleInstanceOnly { get; }
    internal static string MultiInstanceOnly { get; }
    internal static string CantConvertProcessToGlobal { get; }
    internal static string CantConvertGlobalToProcess { get; }
    internal static string InstanceAlreadyExists { get; }
    internal static string SharedMemoryGhosted { get; }
    internal static string CantCreateFileMapping { get; }
    internal static string CantMapFileView { get; }
    internal static string MismatchedCounterTypes { get; }
    internal static string PerfCounterPdhError { get; }
    internal static string MustAddCounterCreationData { get; }
    internal static string CantReadInstance { get; }
    internal static string CantReadCategoryIndex { get; }
    internal static string CounterLayout { get; }
    internal static string CantReadCounter { get; }
    internal static string HelpNotAvailable { get; }
    internal static string MissingCategory { get; }
    internal static string MissingCounter { get; }
    internal static string CantChangeCategoryRegistration { get; }
    internal static string InvalidProperty { get; }
    internal static string CategoryNameNotSet { get; }
    internal static string PerformanceCategoryExists { get; }
    internal static string PerfInvalidCategoryName { get; }
    internal static string CategoryNameTooLong { get; }
    internal static string PerfInvalidCounterName { get; }
    internal static string PerfInvalidHelp { get; }
    internal static string InvalidCounterName { get; }
    internal static string DuplicateCounterName { get; }
    internal static string CantDeleteCategory { get; }
    internal static string InstanceNameRequired { get; }
    internal static string MissingInstance { get; }
    internal static string CantSetLifetimeAfterInitialized { get; }
    internal static string ReadOnlyCounter { get; }
    internal static string PCNotSupportedUnderAppContainer { get; }
    internal static string CategoryNameMissing { get; }
    internal static string CounterNameMissing { get; }
    internal static string InstanceLifetimeProcessonReadOnly { get; }
    internal static string RemoteWriting { get; }
    internal static string NotCustomCounter { get; }
    internal static string InstanceLifetimeProcessforSingleInstance { get; }
    internal static string InstanceNameProhibited { get; }
    internal static string ReadOnlyRemoveInstance { get; }
    internal static string CounterExists { get; }
    internal static string SetSecurityDescriptorFailed { get; }
    internal static string RegKeyMissingShort { get; }
    internal static string CantGetMappingSize { get; }
    internal static string CantReadCategory { get; }
    internal static string PlatformNotSupported_PerfCounters { get; }
    internal static string Perflib_Argument_InvalidCounterSetInstanceType { get; }
    internal static string Perflib_InvalidOperation_NoActiveProvider { get; }
    internal static string Perflib_Argument_InvalidCounterType { get; }
    internal static string Perflib_InvalidOperation_AddCounterAfterInstance { get; }
    internal static string Perflib_Argument_CounterAlreadyExists { get; }
    internal static string Perflib_Argument_EmptyInstanceName { get; }
    internal static string Perflib_InvalidOperation_CounterSetNotInstalled { get; }
    internal static string Perflib_Argument_InvalidInstance { get; }
    internal static string Perflib_Argument_EmptyCounterName { get; }
    internal static string Perflib_Argument_CounterNameAlreadyExists { get; }
    internal static string Perflib_Argument_ProviderNotFound { get; }
    internal static string Perflib_InvalidOperation_CounterSetContainsNoCounter { get; }
    internal static string Perflib_Argument_CounterSetAlreadyRegister { get; }
    internal static string Perflib_Argument_InstanceAlreadyExists { get; }
    internal static string Perflib_InsufficientMemory_InstanceCounterBlock { get; }
    internal static string Perflib_InvalidOperation_CounterRefValue { get; }
    internal static string Arg_DllInitFailure { get; }
    internal static string Arg_RegKeyNoRemoteConnect { get; }
    internal static string ObjectDisposed_CategorySampleClosed { get; }
    internal static string UnauthorizedAccess_RegistryKeyGeneric_Key { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_InvalidParameter();
    internal static string get_CategoryHelpCorrupt();
    internal static string get_CounterNameCorrupt();
    internal static string get_CounterDataCorrupt();
    internal static string get_InstanceNameTooLong();
    internal static string get_ProcessLifetimeNotValidInGlobal();
    internal static string get_CountersOOM();
    internal static string get_MappingCorrupted();
    internal static string get_SingleInstanceOnly();
    internal static string get_MultiInstanceOnly();
    internal static string get_CantConvertProcessToGlobal();
    internal static string get_CantConvertGlobalToProcess();
    internal static string get_InstanceAlreadyExists();
    internal static string get_SharedMemoryGhosted();
    internal static string get_CantCreateFileMapping();
    internal static string get_CantMapFileView();
    internal static string get_MismatchedCounterTypes();
    internal static string get_PerfCounterPdhError();
    internal static string get_MustAddCounterCreationData();
    internal static string get_CantReadInstance();
    internal static string get_CantReadCategoryIndex();
    internal static string get_CounterLayout();
    internal static string get_CantReadCounter();
    internal static string get_HelpNotAvailable();
    internal static string get_MissingCategory();
    internal static string get_MissingCounter();
    internal static string get_CantChangeCategoryRegistration();
    internal static string get_InvalidProperty();
    internal static string get_CategoryNameNotSet();
    internal static string get_PerformanceCategoryExists();
    internal static string get_PerfInvalidCategoryName();
    internal static string get_CategoryNameTooLong();
    internal static string get_PerfInvalidCounterName();
    internal static string get_PerfInvalidHelp();
    internal static string get_InvalidCounterName();
    internal static string get_DuplicateCounterName();
    internal static string get_CantDeleteCategory();
    internal static string get_InstanceNameRequired();
    internal static string get_MissingInstance();
    internal static string get_CantSetLifetimeAfterInitialized();
    internal static string get_ReadOnlyCounter();
    internal static string get_PCNotSupportedUnderAppContainer();
    internal static string get_CategoryNameMissing();
    internal static string get_CounterNameMissing();
    internal static string get_InstanceLifetimeProcessonReadOnly();
    internal static string get_RemoteWriting();
    internal static string get_NotCustomCounter();
    internal static string get_InstanceLifetimeProcessforSingleInstance();
    internal static string get_InstanceNameProhibited();
    internal static string get_ReadOnlyRemoveInstance();
    internal static string get_CounterExists();
    internal static string get_SetSecurityDescriptorFailed();
    internal static string get_RegKeyMissingShort();
    internal static string get_CantGetMappingSize();
    internal static string get_CantReadCategory();
    internal static string get_PlatformNotSupported_PerfCounters();
    internal static string get_Perflib_Argument_InvalidCounterSetInstanceType();
    internal static string get_Perflib_InvalidOperation_NoActiveProvider();
    internal static string get_Perflib_Argument_InvalidCounterType();
    internal static string get_Perflib_InvalidOperation_AddCounterAfterInstance();
    internal static string get_Perflib_Argument_CounterAlreadyExists();
    internal static string get_Perflib_Argument_EmptyInstanceName();
    internal static string get_Perflib_InvalidOperation_CounterSetNotInstalled();
    internal static string get_Perflib_Argument_InvalidInstance();
    internal static string get_Perflib_Argument_EmptyCounterName();
    internal static string get_Perflib_Argument_CounterNameAlreadyExists();
    internal static string get_Perflib_Argument_ProviderNotFound();
    internal static string get_Perflib_InvalidOperation_CounterSetContainsNoCounter();
    internal static string get_Perflib_Argument_CounterSetAlreadyRegister();
    internal static string get_Perflib_Argument_InstanceAlreadyExists();
    internal static string get_Perflib_InsufficientMemory_InstanceCounterBlock();
    internal static string get_Perflib_InvalidOperation_CounterRefValue();
    internal static string get_Arg_DllInitFailure();
    internal static string get_Arg_RegKeyNoRemoteConnect();
    internal static string get_ObjectDisposed_CategorySampleClosed();
    internal static string get_UnauthorizedAccess_RegistryKeyGeneric_Key();
}
