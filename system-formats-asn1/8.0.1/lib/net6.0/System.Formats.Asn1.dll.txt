internal static class FxResources.System.Formats.Asn1.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[IsReadOnlyAttribute]
public class System.Formats.Asn1.Asn1Tag : ValueType {
    private byte _controlFlags;
    [CompilerGeneratedAttribute]
private int <TagValue>k__BackingField;
    internal static Asn1Tag EndOfContents;
    public static Asn1Tag Boolean;
    public static Asn1Tag Integer;
    public static Asn1Tag PrimitiveBitString;
    public static Asn1Tag ConstructedBitString;
    public static Asn1Tag PrimitiveOctetString;
    public static Asn1Tag ConstructedOctetString;
    public static Asn1Tag Null;
    public static Asn1Tag ObjectIdentifier;
    public static Asn1Tag Enumerated;
    public static Asn1Tag Sequence;
    public static Asn1Tag SetOf;
    public static Asn1Tag UtcTime;
    public static Asn1Tag GeneralizedTime;
    public TagClass TagClass { get; }
    public bool IsConstructed { get; }
    public int TagValue { get; }
    private Asn1Tag(byte controlFlags, int tagValue);
    public Asn1Tag(UniversalTagNumber universalTagNumber, bool isConstructed);
    public Asn1Tag(TagClass tagClass, int tagValue, bool isConstructed);
    private static Asn1Tag();
    public TagClass get_TagClass();
    public bool get_IsConstructed();
    [CompilerGeneratedAttribute]
public int get_TagValue();
    public Asn1Tag AsConstructed();
    public Asn1Tag AsPrimitive();
    public static bool TryDecode(ReadOnlySpan`1<byte> source, Asn1Tag& tag, Int32& bytesConsumed);
    public static Asn1Tag Decode(ReadOnlySpan`1<byte> source, Int32& bytesConsumed);
    public int CalculateEncodedSize();
    public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
    public int Encode(Span`1<byte> destination);
    public sealed virtual bool Equals(Asn1Tag other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Asn1Tag left, Asn1Tag right);
    public static bool op_Inequality(Asn1Tag left, Asn1Tag right);
    public bool HasSameClassAndValue(Asn1Tag other);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[ExtensionAttribute]
internal static class System.Formats.Asn1.AsnCharacterStringEncodings : object {
    private static UTF8Encoding s_utf8Encoding;
    private static BMPEncoding s_bmpEncoding;
    private static IA5Encoding s_ia5Encoding;
    private static VisibleStringEncoding s_visibleStringEncoding;
    private static NumericStringEncoding s_numericStringEncoding;
    private static PrintableStringEncoding s_printableStringEncoding;
    private static T61Encoding s_t61Encoding;
    private static AsnCharacterStringEncodings();
    internal static Encoding GetEncoding(UniversalTagNumber encodingType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Formats.Asn1.AsnContentException : Exception {
    public AsnContentException(string message);
    public AsnContentException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected AsnContentException(SerializationInfo info, StreamingContext context);
}
public static class System.Formats.Asn1.AsnDecoder : object {
    public static bool TryReadEncodedValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag& tag, Int32& contentOffset, Int32& contentLength, Int32& bytesConsumed);
    public static Asn1Tag ReadEncodedValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& contentOffset, Int32& contentLength, Int32& bytesConsumed);
    private static ReadOnlySpan`1<byte> GetPrimitiveContentSpan(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, UniversalTagNumber tagNumber, Int32& bytesConsumed);
    private static bool TryReadLength(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Nullable`1& length, Int32& bytesRead);
    private static Nullable`1<int> ReadLength(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed);
    private static LengthDecodeStatus DecodeLength(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Nullable`1& length, Int32& bytesRead);
    private static Asn1Tag ReadTagAndLength(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Nullable`1& contentsLength, Int32& bytesRead);
    private static void ValidateEndOfContents(Asn1Tag tag, Nullable`1<int> length, int headerLength);
    private static LengthValidity ValidateLength(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag localTag, Nullable`1<int> encodedLength, Int32& actualLength, Int32& bytesConsumed);
    private static AsnContentException GetValidityException(LengthValidity validity);
    private static int GetPrimitiveIntegerSize(Type primitiveType);
    private static int SeekEndOfContents(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet);
    private static int ParseNonNegativeIntAndSlice(ReadOnlySpan`1& data, int bytesToRead);
    private static int ParseNonNegativeInt(ReadOnlySpan`1<byte> data);
    private static ReadOnlySpan`1<byte> SliceAtMost(ReadOnlySpan`1<byte> source, int longestPermitted);
    private static ReadOnlySpan`1<byte> Slice(ReadOnlySpan`1<byte> source, int offset, int length);
    private static ReadOnlySpan`1<byte> Slice(ReadOnlySpan`1<byte> source, int offset, Nullable`1<int> length);
    internal static ReadOnlyMemory`1<byte> Slice(ReadOnlyMemory`1<byte> bigger, ReadOnlySpan`1<byte> smaller);
    internal static void CheckEncodingRules(AsnEncodingRules ruleSet);
    private static void CheckExpectedTag(Asn1Tag tag, Asn1Tag expectedTag, UniversalTagNumber tagNumber);
    public static bool TryReadPrimitiveBitString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& unusedBitCount, ReadOnlySpan`1& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadBitString(ReadOnlySpan`1<byte> source, Span`1<byte> destination, AsnEncodingRules ruleSet, Int32& unusedBitCount, Int32& bytesConsumed, Int32& bytesWritten, Nullable`1<Asn1Tag> expectedTag);
    public static Byte[] ReadBitString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& unusedBitCount, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    private static void ParsePrimitiveBitStringContents(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& unusedBitCount, ReadOnlySpan`1& value, Byte& normalizedLastByte);
    private static void CopyBitStringValue(ReadOnlySpan`1<byte> value, byte normalizedLastByte, Span`1<byte> destination);
    private static int CountConstructedBitString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, bool isIndefinite);
    private static void CopyConstructedBitString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Span`1<byte> destination, bool isIndefinite, Int32& unusedBitCount, Int32& bytesRead, Int32& bytesWritten);
    private static int ProcessConstructedBitString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Span`1<byte> destination, BitStringCopyAction copyAction, bool isIndefinite, Int32& lastUnusedBitCount, Int32& bytesRead);
    private static bool TryCopyConstructedBitStringValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Span`1<byte> dest, bool isIndefinite, Int32& unusedBitCount, Int32& bytesRead, Int32& bytesWritten);
    private static bool TryReadPrimitiveBitStringCore(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, Nullable`1& contentsLength, Int32& headerLength, Int32& unusedBitCount, ReadOnlySpan`1& value, Int32& bytesConsumed, Byte& normalizedLastByte);
    public static bool ReadBoolean(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static ReadOnlySpan`1<byte> ReadEnumeratedBytes(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static TEnum ReadEnumeratedValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public static Enum ReadEnumeratedValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Type enumType, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static DateTimeOffset ReadGeneralizedTime(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    private static DateTimeOffset ParseGeneralizedTime(AsnEncodingRules ruleSet, ReadOnlySpan`1<byte> contentOctets);
    public static ReadOnlySpan`1<byte> ReadIntegerBytes(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static BigInteger ReadInteger(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadInt32(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    [CLSCompliantAttribute("False")]
public static bool TryReadUInt32(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, UInt32& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadInt64(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int64& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    [CLSCompliantAttribute("False")]
public static bool TryReadUInt64(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, UInt64& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    private static ReadOnlySpan`1<byte> GetIntegerContents(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, UniversalTagNumber tagNumber, Int32& bytesConsumed);
    private static bool TryReadSignedInteger(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, int sizeLimit, Asn1Tag expectedTag, UniversalTagNumber tagNumber, Int64& value, Int32& bytesConsumed);
    private static bool TryReadUnsignedInteger(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, int sizeLimit, Asn1Tag expectedTag, UniversalTagNumber tagNumber, UInt64& value, Int32& bytesConsumed);
    public static TFlagsEnum ReadNamedBitListValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public static Enum ReadNamedBitListValue(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Type flagsEnumType, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static BitArray ReadNamedBitList(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    private static long InterpretNamedBitListReversed(ReadOnlySpan`1<byte> valueSpan);
    internal static void ReverseBitsPerByte(Span`1<byte> value);
    public static void ReadNull(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadOctetString(ReadOnlySpan`1<byte> source, Span`1<byte> destination, AsnEncodingRules ruleSet, Int32& bytesConsumed, Int32& bytesWritten, Nullable`1<Asn1Tag> expectedTag);
    public static Byte[] ReadOctetString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    private static bool TryReadPrimitiveOctetStringCore(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, UniversalTagNumber universalTagNumber, Nullable`1& contentLength, Int32& headerLength, ReadOnlySpan`1& contents, Int32& bytesConsumed);
    public static bool TryReadPrimitiveOctetString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, ReadOnlySpan`1& value, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    private static int CountConstructedOctetString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, bool isIndefinite);
    private static void CopyConstructedOctetString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Span`1<byte> destination, bool isIndefinite, Int32& bytesRead, Int32& bytesWritten);
    private static int CopyConstructedOctetString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Span`1<byte> destination, bool write, bool isIndefinite, Int32& bytesRead);
    private static bool TryCopyConstructedOctetStringContents(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Span`1<byte> dest, bool isIndefinite, Int32& bytesRead, Int32& bytesWritten);
    private static ReadOnlySpan`1<byte> GetOctetStringContents(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, UniversalTagNumber universalTagNumber, Int32& bytesConsumed, Byte[]& rented, Span`1<byte> tmpSpace);
    public static string ReadObjectIdentifier(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    private static void ReadSubIdentifier(ReadOnlySpan`1<byte> source, Int32& bytesRead, Nullable`1& smallValue, Nullable`1& largeValue);
    private static string ReadObjectIdentifier(ReadOnlySpan`1<byte> contents);
    public static void ReadSequence(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& contentOffset, Int32& contentLength, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    public static void ReadSetOf(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& contentOffset, Int32& contentLength, Int32& bytesConsumed, bool skipSortOrderValidation, Nullable`1<Asn1Tag> expectedTag);
    public static bool TryReadPrimitiveCharacterStringBytes(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, ReadOnlySpan`1& value, Int32& bytesConsumed);
    public static bool TryReadCharacterStringBytes(ReadOnlySpan`1<byte> source, Span`1<byte> destination, AsnEncodingRules ruleSet, Asn1Tag expectedTag, Int32& bytesConsumed, Int32& bytesWritten);
    public static bool TryReadCharacterString(ReadOnlySpan`1<byte> source, Span`1<char> destination, AsnEncodingRules ruleSet, UniversalTagNumber encodingType, Int32& bytesConsumed, Int32& charsWritten, Nullable`1<Asn1Tag> expectedTag);
    public static string ReadCharacterString(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, UniversalTagNumber encodingType, Int32& bytesConsumed, Nullable`1<Asn1Tag> expectedTag);
    private static bool TryReadCharacterStringBytesCore(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, UniversalTagNumber universalTagNumber, Span`1<byte> destination, Int32& bytesConsumed, Int32& bytesWritten);
    private static bool TryReadCharacterStringCore(ReadOnlySpan`1<byte> source, Span`1<char> destination, Encoding encoding, Int32& charsWritten);
    private static string ReadCharacterStringCore(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, UniversalTagNumber universalTagNumber, Encoding encoding, Int32& bytesConsumed);
    private static bool TryReadCharacterStringCore(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Asn1Tag expectedTag, UniversalTagNumber universalTagNumber, Encoding encoding, Span`1<char> destination, Int32& bytesConsumed, Int32& charsWritten);
    private static bool IsCharacterStringEncodingType(UniversalTagNumber encodingType);
    public static DateTimeOffset ReadUtcTime(ReadOnlySpan`1<byte> source, AsnEncodingRules ruleSet, Int32& bytesConsumed, int twoDigitYearMax, Nullable`1<Asn1Tag> expectedTag);
    private static DateTimeOffset ParseUtcTime(ReadOnlySpan`1<byte> contentOctets, AsnEncodingRules ruleSet, int twoDigitYearMax);
    [CompilerGeneratedAttribute]
internal static Nullable`1<byte> <ParseGeneralizedTime>g__GetNextState|41_0(byte octet);
}
public enum System.Formats.Asn1.AsnEncodingRules : Enum {
    public int value__;
    public static AsnEncodingRules BER;
    public static AsnEncodingRules CER;
    public static AsnEncodingRules DER;
}
public class System.Formats.Asn1.AsnReader : object {
    private ReadOnlyMemory`1<byte> _data;
    private AsnReaderOptions _options;
    [CompilerGeneratedAttribute]
private AsnEncodingRules <RuleSet>k__BackingField;
    public AsnEncodingRules RuleSet { get; }
    public bool HasData { get; }
    public AsnReader(ReadOnlyMemory`1<byte> data, AsnEncodingRules ruleSet, AsnReaderOptions options);
    [CompilerGeneratedAttribute]
public AsnEncodingRules get_RuleSet();
    public bool get_HasData();
    public void ThrowIfNotEmpty();
    public Asn1Tag PeekTag();
    public ReadOnlyMemory`1<byte> PeekEncodedValue();
    public ReadOnlyMemory`1<byte> PeekContentBytes();
    public ReadOnlyMemory`1<byte> ReadEncodedValue();
    [NullableContextAttribute("1")]
public AsnReader Clone();
    private AsnReader CloneAtSlice(int start, int length);
    public bool TryReadPrimitiveBitString(Int32& unusedBitCount, ReadOnlyMemory`1& value, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadBitString(Span`1<byte> destination, Int32& unusedBitCount, Int32& bytesWritten, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public Byte[] ReadBitString(Int32& unusedBitCount, Nullable`1<Asn1Tag> expectedTag);
    public bool ReadBoolean(Nullable`1<Asn1Tag> expectedTag);
    public ReadOnlyMemory`1<byte> ReadEnumeratedBytes(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public TEnum ReadEnumeratedValue(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public Enum ReadEnumeratedValue(Type enumType, Nullable`1<Asn1Tag> expectedTag);
    public DateTimeOffset ReadGeneralizedTime(Nullable`1<Asn1Tag> expectedTag);
    public ReadOnlyMemory`1<byte> ReadIntegerBytes(Nullable`1<Asn1Tag> expectedTag);
    public BigInteger ReadInteger(Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadInt32(Int32& value, Nullable`1<Asn1Tag> expectedTag);
    [CLSCompliantAttribute("False")]
public bool TryReadUInt32(UInt32& value, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadInt64(Int64& value, Nullable`1<Asn1Tag> expectedTag);
    [CLSCompliantAttribute("False")]
public bool TryReadUInt64(UInt64& value, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public TFlagsEnum ReadNamedBitListValue(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public Enum ReadNamedBitListValue(Type flagsEnumType, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public BitArray ReadNamedBitList(Nullable`1<Asn1Tag> expectedTag);
    public void ReadNull(Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadOctetString(Span`1<byte> destination, Int32& bytesWritten, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public Byte[] ReadOctetString(Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadPrimitiveOctetString(ReadOnlyMemory`1& contents, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public string ReadObjectIdentifier(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public AsnReader ReadSequence(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public AsnReader ReadSetOf(Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public AsnReader ReadSetOf(bool skipSortOrderValidation, Nullable`1<Asn1Tag> expectedTag);
    public bool TryReadPrimitiveCharacterStringBytes(Asn1Tag expectedTag, ReadOnlyMemory`1& contents);
    public bool TryReadCharacterStringBytes(Span`1<byte> destination, Asn1Tag expectedTag, Int32& bytesWritten);
    public bool TryReadCharacterString(Span`1<char> destination, UniversalTagNumber encodingType, Int32& charsWritten, Nullable`1<Asn1Tag> expectedTag);
    [NullableContextAttribute("1")]
public string ReadCharacterString(UniversalTagNumber encodingType, Nullable`1<Asn1Tag> expectedTag);
    public DateTimeOffset ReadUtcTime(Nullable`1<Asn1Tag> expectedTag);
    public DateTimeOffset ReadUtcTime(int twoDigitYearMax, Nullable`1<Asn1Tag> expectedTag);
}
public class System.Formats.Asn1.AsnReaderOptions : ValueType {
    private ushort _twoDigitYearMax;
    [CompilerGeneratedAttribute]
private bool <SkipSetSortOrderVerification>k__BackingField;
    public int UtcTimeTwoDigitYearMax { get; public set; }
    public bool SkipSetSortOrderVerification { get; public set; }
    public int get_UtcTimeTwoDigitYearMax();
    public void set_UtcTimeTwoDigitYearMax(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_SkipSetSortOrderVerification();
    [CompilerGeneratedAttribute]
public void set_SkipSetSortOrderVerification(bool value);
}
public class System.Formats.Asn1.AsnWriter : object {
    private Byte[] _buffer;
    private int _offset;
    private Stack`1<StackFrame> _nestingStack;
    [CompilerGeneratedAttribute]
private AsnEncodingRules <RuleSet>k__BackingField;
    public AsnEncodingRules RuleSet { get; }
    public AsnWriter(AsnEncodingRules ruleSet);
    public AsnWriter(AsnEncodingRules ruleSet, int initialCapacity);
    [CompilerGeneratedAttribute]
public AsnEncodingRules get_RuleSet();
    public void Reset();
    public int GetEncodedLength();
    public bool TryEncode(Span`1<byte> destination, Int32& bytesWritten);
    public int Encode(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public Byte[] Encode();
    private ReadOnlySpan`1<byte> EncodeAsSpan();
    public bool EncodedValueEquals(ReadOnlySpan`1<byte> other);
    [NullableContextAttribute("1")]
public bool EncodedValueEquals(AsnWriter other);
    private void EnsureWriteCapacity(int pendingCount);
    private void WriteTag(Asn1Tag tag);
    private void WriteLength(int length);
    private static int GetEncodedLengthSubsequentByteCount(int length);
    [NullableContextAttribute("1")]
public void CopyTo(AsnWriter destination);
    public void WriteEncodedValue(ReadOnlySpan`1<byte> value);
    private void WriteEndOfContents();
    private Scope PushTag(Asn1Tag tag, UniversalTagNumber tagType);
    private void PopTag(Asn1Tag tag, UniversalTagNumber tagType, bool sortContents);
    private static void SortContents(Byte[] buffer, int start, int end);
    private static void CheckUniversalTag(Nullable`1<Asn1Tag> tag, UniversalTagNumber universalTagNumber);
    public void WriteBitString(ReadOnlySpan`1<byte> value, int unusedBitCount, Nullable`1<Asn1Tag> tag);
    private void WriteBitStringCore(Asn1Tag tag, ReadOnlySpan`1<byte> bitString, int unusedBitCount);
    private static bool CheckValidLastByte(byte lastByte, int unusedBitCount);
    private static int DetermineCerBitStringTotalLength(Asn1Tag tag, int contentLength);
    private void WriteConstructedCerBitString(Asn1Tag tag, ReadOnlySpan`1<byte> payload, int unusedBitCount);
    public void WriteBoolean(bool value, Nullable`1<Asn1Tag> tag);
    private void WriteBooleanCore(Asn1Tag tag, bool value);
    [NullableContextAttribute("1")]
public void WriteEnumeratedValue(Enum value, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteEnumeratedValue(TEnum value, Nullable`1<Asn1Tag> tag);
    private void WriteEnumeratedValue(Asn1Tag tag, Type tEnum, object value);
    public void WriteGeneralizedTime(DateTimeOffset value, bool omitFractionalSeconds, Nullable`1<Asn1Tag> tag);
    private void WriteGeneralizedTimeCore(Asn1Tag tag, DateTimeOffset value, bool omitFractionalSeconds);
    public void WriteInteger(long value, Nullable`1<Asn1Tag> tag);
    [CLSCompliantAttribute("False")]
public void WriteInteger(ulong value, Nullable`1<Asn1Tag> tag);
    public void WriteInteger(BigInteger value, Nullable`1<Asn1Tag> tag);
    public void WriteInteger(ReadOnlySpan`1<byte> value, Nullable`1<Asn1Tag> tag);
    public void WriteIntegerUnsigned(ReadOnlySpan`1<byte> value, Nullable`1<Asn1Tag> tag);
    private void WriteIntegerCore(Asn1Tag tag, long value);
    private void WriteNonNegativeIntegerCore(Asn1Tag tag, ulong value);
    private void WriteIntegerUnsignedCore(Asn1Tag tag, ReadOnlySpan`1<byte> value);
    private void WriteIntegerCore(Asn1Tag tag, ReadOnlySpan`1<byte> value);
    private void WriteIntegerCore(Asn1Tag tag, BigInteger value);
    [NullableContextAttribute("1")]
public void WriteNamedBitList(Enum value, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteNamedBitList(TEnum value, Nullable`1<Asn1Tag> tag);
    [NullableContextAttribute("1")]
public void WriteNamedBitList(BitArray value, Nullable`1<Asn1Tag> tag);
    private void WriteNamedBitList(Nullable`1<Asn1Tag> tag, Type tEnum, Enum value);
    private void WriteNamedBitList(Nullable`1<Asn1Tag> tag, ulong integralValue);
    private void WriteBitArray(BitArray value, Nullable`1<Asn1Tag> tag);
    public void WriteNull(Nullable`1<Asn1Tag> tag);
    private void WriteNullCore(Asn1Tag tag);
    public Scope PushOctetString(Nullable`1<Asn1Tag> tag);
    public void PopOctetString(Nullable`1<Asn1Tag> tag);
    public void WriteOctetString(ReadOnlySpan`1<byte> value, Nullable`1<Asn1Tag> tag);
    private void WriteOctetStringCore(Asn1Tag tag, ReadOnlySpan`1<byte> octetString);
    private void WriteConstructedCerOctetString(Asn1Tag tag, ReadOnlySpan`1<byte> payload);
    [NullableContextAttribute("1")]
public void WriteObjectIdentifier(string oidValue, Nullable`1<Asn1Tag> tag);
    public void WriteObjectIdentifier(ReadOnlySpan`1<char> oidValue, Nullable`1<Asn1Tag> tag);
    private void WriteObjectIdentifierCore(Asn1Tag tag, ReadOnlySpan`1<char> oidValue);
    private static BigInteger ParseSubIdentifier(ReadOnlySpan`1& oidValue);
    private static int AtoI(char c);
    private static int EncodeSubIdentifier(Span`1<byte> dest, BigInteger& subIdentifier);
    public Scope PushSequence(Nullable`1<Asn1Tag> tag);
    public void PopSequence(Nullable`1<Asn1Tag> tag);
    private Scope PushSequenceCore(Asn1Tag tag);
    private void PopSequenceCore(Asn1Tag tag);
    public Scope PushSetOf(Nullable`1<Asn1Tag> tag);
    public void PopSetOf(Nullable`1<Asn1Tag> tag);
    private Scope PushSetOfCore(Asn1Tag tag);
    private void PopSetOfCore(Asn1Tag tag);
    [NullableContextAttribute("1")]
public void WriteCharacterString(UniversalTagNumber encodingType, string value, Nullable`1<Asn1Tag> tag);
    public void WriteCharacterString(UniversalTagNumber encodingType, ReadOnlySpan`1<char> str, Nullable`1<Asn1Tag> tag);
    private void WriteCharacterStringCore(Asn1Tag tag, Encoding encoding, ReadOnlySpan`1<char> str);
    private void WriteConstructedCerCharacterString(Asn1Tag tag, Encoding encoding, ReadOnlySpan`1<char> str, int size);
    public void WriteUtcTime(DateTimeOffset value, Nullable`1<Asn1Tag> tag);
    public void WriteUtcTime(DateTimeOffset value, int twoDigitYearMax, Nullable`1<Asn1Tag> tag);
    private void WriteUtcTimeCore(Asn1Tag tag, DateTimeOffset value);
}
internal class System.Formats.Asn1.BMPEncoding : SpanBasedEncoding {
    protected virtual int GetBytes(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, bool write);
    protected virtual int GetChars(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, bool write);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
}
internal class System.Formats.Asn1.IA5Encoding : RestrictedAsciiStringEncoding {
}
internal class System.Formats.Asn1.NumericStringEncoding : RestrictedAsciiStringEncoding {
}
internal class System.Formats.Asn1.PrintableStringEncoding : RestrictedAsciiStringEncoding {
}
internal abstract class System.Formats.Asn1.RestrictedAsciiStringEncoding : SpanBasedEncoding {
    private Boolean[] _isAllowed;
    protected RestrictedAsciiStringEncoding(byte minCharAllowed, byte maxCharAllowed);
    protected RestrictedAsciiStringEncoding(string allowedChars);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    protected virtual int GetBytes(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, bool write);
    protected virtual int GetChars(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, bool write);
}
internal class System.Formats.Asn1.SetOfValueComparer : object {
    [CompilerGeneratedAttribute]
private static SetOfValueComparer <Instance>k__BackingField;
    internal static SetOfValueComparer Instance { get; }
    private static SetOfValueComparer();
    [CompilerGeneratedAttribute]
internal static SetOfValueComparer get_Instance();
    public sealed virtual int Compare(ReadOnlyMemory`1<byte> x, ReadOnlyMemory`1<byte> y);
    internal static int Compare(ReadOnlySpan`1<byte> x, ReadOnlySpan`1<byte> y);
}
internal abstract class System.Formats.Asn1.SpanBasedEncoding : Encoding {
    protected abstract virtual int GetBytes(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, bool write);
    protected abstract virtual int GetChars(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, bool write);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(string s);
    public virtual int GetByteCount(ReadOnlySpan`1<char> chars);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetCharCount(ReadOnlySpan`1<byte> bytes);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
}
internal class System.Formats.Asn1.T61Encoding : Encoding {
    private static UTF8Encoding s_utf8Encoding;
    private static Encoding s_latin1Encoding;
    private static T61Encoding();
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(string s);
    public virtual int GetByteCount(ReadOnlySpan`1<char> chars);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetCharCount(ReadOnlySpan`1<byte> bytes);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
}
public enum System.Formats.Asn1.TagClass : Enum {
    public int value__;
    public static TagClass Universal;
    public static TagClass Application;
    public static TagClass ContextSpecific;
    public static TagClass Private;
}
public enum System.Formats.Asn1.UniversalTagNumber : Enum {
    public int value__;
    public static UniversalTagNumber EndOfContents;
    public static UniversalTagNumber Boolean;
    public static UniversalTagNumber Integer;
    public static UniversalTagNumber BitString;
    public static UniversalTagNumber OctetString;
    public static UniversalTagNumber Null;
    public static UniversalTagNumber ObjectIdentifier;
    public static UniversalTagNumber ObjectDescriptor;
    public static UniversalTagNumber External;
    public static UniversalTagNumber InstanceOf;
    public static UniversalTagNumber Real;
    public static UniversalTagNumber Enumerated;
    public static UniversalTagNumber Embedded;
    public static UniversalTagNumber UTF8String;
    public static UniversalTagNumber RelativeObjectIdentifier;
    public static UniversalTagNumber Time;
    public static UniversalTagNumber Sequence;
    public static UniversalTagNumber SequenceOf;
    public static UniversalTagNumber Set;
    public static UniversalTagNumber SetOf;
    public static UniversalTagNumber NumericString;
    public static UniversalTagNumber PrintableString;
    public static UniversalTagNumber TeletexString;
    public static UniversalTagNumber T61String;
    public static UniversalTagNumber VideotexString;
    public static UniversalTagNumber IA5String;
    public static UniversalTagNumber UtcTime;
    public static UniversalTagNumber GeneralizedTime;
    public static UniversalTagNumber GraphicString;
    public static UniversalTagNumber VisibleString;
    public static UniversalTagNumber ISO646String;
    public static UniversalTagNumber GeneralString;
    public static UniversalTagNumber UniversalString;
    public static UniversalTagNumber UnrestrictedCharacterString;
    public static UniversalTagNumber BMPString;
    public static UniversalTagNumber Date;
    public static UniversalTagNumber TimeOfDay;
    public static UniversalTagNumber DateTime;
    public static UniversalTagNumber Duration;
    public static UniversalTagNumber ObjectIdentifierIRI;
    public static UniversalTagNumber RelativeObjectIdentifierIRI;
}
internal class System.Formats.Asn1.VisibleStringEncoding : RestrictedAsciiStringEncoding {
}
internal static class System.Formats.Asn1.WellKnownOids : object {
    internal static string GetValue(ReadOnlySpan`1<byte> contents);
    internal static ReadOnlySpan`1<byte> GetContents(ReadOnlySpan`1<char> value);
}
internal static class System.LocalAppContextSwitches : object {
    private static int s_allowAnySizeOid;
    public static bool AllowAnySizeOid { get; }
    internal static bool GetCachedSwitchValue(string switchName, Int32& cachedSwitchValue);
    private static bool GetCachedSwitchValueInternal(string switchName, Int32& cachedSwitchValue);
    private static bool GetSwitchDefaultValue(string switchName);
    public static bool get_AllowAnySizeOid();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.Security.Cryptography.CryptoPool : object {
    internal static Byte[] Rent(int minimumLength);
    internal static void Return(Byte[] array, int clearSize);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_DestinationTooShort { get; }
    internal static string Argument_EnumeratedValueRequiresNonFlagsEnum { get; }
    internal static string Argument_EnumeratedValueBackingTypeNotSupported { get; }
    internal static string Argument_InvalidOidValue { get; }
    internal static string Argument_NamedBitListRequiresFlagsEnum { get; }
    internal static string Argument_SourceOverlapsDestination { get; }
    internal static string Argument_Tag_NotCharacterString { get; }
    internal static string Argument_IntegerCannotBeEmpty { get; }
    internal static string Argument_IntegerRedundantByte { get; }
    internal static string Argument_UniversalValueIsFixed { get; }
    internal static string Argument_UnusedBitCountMustBeZero { get; }
    internal static string Argument_UnusedBitCountRange { get; }
    internal static string Argument_UnusedBitWasSet { get; }
    internal static string Argument_WriteEncodedValue_OneValueAtATime { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string AsnWriter_EncodeUnbalancedStack { get; }
    internal static string AsnWriter_PopWrongTag { get; }
    internal static string ContentException_CerRequiresIndefiniteLength { get; }
    internal static string ContentException_ConstructedEncodingRequired { get; }
    internal static string ContentException_DefaultMessage { get; }
    internal static string ContentException_EnumeratedValueTooBig { get; }
    internal static string ContentException_InvalidUnderCer_TryBerOrDer { get; }
    internal static string ContentException_InvalidUnderCerOrDer_TryBer { get; }
    internal static string ContentException_InvalidUnderDer_TryBerOrCer { get; }
    internal static string ContentException_InvalidTag { get; }
    internal static string ContentException_LengthExceedsPayload { get; }
    internal static string ContentException_LengthRuleSetConstraint { get; }
    internal static string ContentException_LengthTooBig { get; }
    internal static string ContentException_NamedBitListValueTooBig { get; }
    internal static string ContentException_OidTooBig { get; }
    internal static string ContentException_PrimitiveEncodingRequired { get; }
    internal static string ContentException_SetOfNotSorted { get; }
    internal static string ContentException_TooMuchData { get; }
    internal static string ContentException_WrongTag { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_DestinationTooShort();
    internal static string get_Argument_EnumeratedValueRequiresNonFlagsEnum();
    internal static string get_Argument_EnumeratedValueBackingTypeNotSupported();
    internal static string get_Argument_InvalidOidValue();
    internal static string get_Argument_NamedBitListRequiresFlagsEnum();
    internal static string get_Argument_SourceOverlapsDestination();
    internal static string get_Argument_Tag_NotCharacterString();
    internal static string get_Argument_IntegerCannotBeEmpty();
    internal static string get_Argument_IntegerRedundantByte();
    internal static string get_Argument_UniversalValueIsFixed();
    internal static string get_Argument_UnusedBitCountMustBeZero();
    internal static string get_Argument_UnusedBitCountRange();
    internal static string get_Argument_UnusedBitWasSet();
    internal static string get_Argument_WriteEncodedValue_OneValueAtATime();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_AsnWriter_EncodeUnbalancedStack();
    internal static string get_AsnWriter_PopWrongTag();
    internal static string get_ContentException_CerRequiresIndefiniteLength();
    internal static string get_ContentException_ConstructedEncodingRequired();
    internal static string get_ContentException_DefaultMessage();
    internal static string get_ContentException_EnumeratedValueTooBig();
    internal static string get_ContentException_InvalidUnderCer_TryBerOrDer();
    internal static string get_ContentException_InvalidUnderCerOrDer_TryBer();
    internal static string get_ContentException_InvalidUnderDer_TryBerOrCer();
    internal static string get_ContentException_InvalidTag();
    internal static string get_ContentException_LengthExceedsPayload();
    internal static string get_ContentException_LengthRuleSetConstraint();
    internal static string get_ContentException_LengthTooBig();
    internal static string get_ContentException_NamedBitListValueTooBig();
    internal static string get_ContentException_OidTooBig();
    internal static string get_ContentException_PrimitiveEncodingRequired();
    internal static string get_ContentException_SetOfNotSorted();
    internal static string get_ContentException_TooMuchData();
    internal static string get_ContentException_WrongTag();
}
