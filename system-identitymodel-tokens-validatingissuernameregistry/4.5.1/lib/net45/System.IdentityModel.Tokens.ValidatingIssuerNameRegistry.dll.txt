internal static class System.IdentityModel.ConfigurationStrings : object {
    public static string NamespacePrefix;
    public static string DefaultFederationMetadataPathExtension;
    public static string Separator;
    public static string PrefixedSeparator;
    public static string Add;
    public static string Authority;
    public static string IssuerNameRegistry;
    public static string Keys;
    public static string Name;
    public static string SymmetricKey;
    public static string Thumbprint;
    public static string Type;
    public static string Value;
    public static string ValidIssuers;
    public static string ValidatingIssuerNameRegistry;
}
internal static class System.IdentityModel.TextStrings : object {
    public static string Empty;
    public static string Null;
    public static string ValidationParameters;
    public static string MaximumTokenSize;
    public static string Comment;
}
internal static class System.IdentityModel.Tokens.ConfigurationConstants : object {
    internal static string DefaultFormsLoginUrl;
    internal static string NamespacePrefix;
    internal static string DefaultFederationMetadataPathExtension;
}
internal static class System.IdentityModel.Tokens.DiagnosticUtil : object {
    [ReliabilityContractAttribute("3", "2")]
internal static bool IsFatal(Exception exception);
}
public class System.IdentityModel.Tokens.IssuingAuthority : object {
    private string _name;
    private HashSet`1<string> _symmetricKeys;
    private HashSet`1<string> _thumbprints;
    private HashSet`1<string> _issuers;
    public string Name { get; }
    public ISet`1<string> SymmetricKeys { get; }
    public ISet`1<string> Thumbprints { get; }
    public ISet`1<string> Issuers { get; }
    public IssuingAuthority(string name);
    public string get_Name();
    public virtual ISet`1<string> get_SymmetricKeys();
    public virtual ISet`1<string> get_Thumbprints();
    public virtual ISet`1<string> get_Issuers();
}
internal class System.IdentityModel.Tokens.UpdateValidatingIssuerNameRegistry : object {
    private XmlDocument _document;
    private XmlNamespaceManager _namespaceManager;
    private static string PrefixedSeparator;
    private static UpdateValidatingIssuerNameRegistry();
    public void UpdateIssuerNameRegistryElement(string pathToConfig, string fedMetadataAddress, string serviceName);
    private bool FoundExactMatch(IssuingAuthority authority, XmlNode issuerNameRegistryNode);
    public IssuingAuthority GetIssuingAuthority(string metadataAddress, MetadataSerializer metadataSerializer);
    public MetadataBase ReadStsMetadata(string fedMetadataAddress, MetadataSerializer metadataSerializer);
    public Collection`1<X509Certificate2> GetSecurityTokenServiceSigningCertificates(MetadataBase metadataBase, EntityDescriptor& entityDescriptor);
    public SecurityTokenServiceDescriptor GetSecurityTokenServiceDescriptor(MetadataBase metadataBase, EntityDescriptor& entityDescriptor);
    public SecurityTokenServiceDescriptor GetSecurityTokenServiceDescriptor(EntityDescriptor entityDescriptor);
    public void WriteAuthority(IssuingAuthority authority, XmlNode serviceNode);
    public XmlNode GetServiceNode(string serviceName);
    public void FlushDocument(string originalXml, string location);
    public XmlNode WriteXPathNodes(string xPath);
    private XmlElement CreateElementFromDocument(string elementName);
    private static string CleanCommentString(string input);
    public void CommentNode(XmlNode node, string pathToMetadata);
    public static List`1<XmlElement> GetXmlElements(XmlNodeList nodeList);
    internal XmlNode SelectSingleNodeFromDocument(string xPath);
    public static string GetServiceXPath(string serviceName);
    public static string GetFormattedXPath(string xPath, String[] args);
    public static string GetDefaultAttributeXPath(string attributeName);
}
public class System.IdentityModel.Tokens.ValidatingIssuerNameRegistry : IssuerNameRegistry {
    private IEnumerable`1<IssuingAuthority> _issuingAuthorities;
    public IEnumerable`1<IssuingAuthority> IssuingAuthorities { get; public set; }
    public ValidatingIssuerNameRegistry(IssuingAuthority issuingAuthority);
    public ValidatingIssuerNameRegistry(IEnumerable`1<IssuingAuthority> issuingAuthorities);
    public IEnumerable`1<IssuingAuthority> get_IssuingAuthorities();
    public void set_IssuingAuthorities(IEnumerable`1<IssuingAuthority> value);
    public virtual void LoadCustomConfiguration(XmlNodeList nodelist);
    protected virtual IssuingAuthority LoadAuthority(XmlElement xmlElement);
    protected virtual IssuingAuthority CreateIssuingAuthority(string name);
    public virtual string GetIssuerName(SecurityToken securityToken);
    public virtual string GetIssuerName(SecurityToken securityToken, string requestedIssuerName);
    protected virtual bool IsSymmetricKeyValid(string base64EncodedKey, string issuer);
    protected virtual bool IsThumbprintValid(string thumbprint, string issuer);
    public static void WriteToConfig(string fedMetadataAddress, string applicationConfigFile);
    public static IssuingAuthority GetIssuingAuthority(string metadataAddress);
}
internal static class System.IdentityModel.Utility : object {
    public static void VerifyNonNullArgument(string name, object value);
    public static void VerifyNonNullOrEmptyStringArgument(string name, string value);
    public static void VerifyNonNullOrWhitespaceStringArgument(string name, string value);
    public static void VerifyNonNullProperty(string name, object value);
    internal static string SerializeAsSingleCommaDelimitedString(IEnumerable`1<string> strings);
}
internal static class System.IdentityModel.WifExtensionsErrors : object {
    internal static string WIF10000;
    internal static string WIF10001;
    internal static string WIF10002;
    internal static string WIF10100;
    internal static string WIF10101;
    internal static string WIF10102;
    internal static string WIF10103;
    internal static string WIF10104;
    internal static string WIF10106;
    internal static string WIF10107;
    internal static string WIF10108;
    internal static string WIF10109;
    internal static string WIF10110;
    internal static string WIF10111;
    internal static string WIF10112;
    internal static string WIF10113;
    internal static string WIF10114;
    internal static string WIF10115;
    internal static string WIF10116;
    internal static string WIF10117;
    internal static string WIF10118;
    internal static string WIF10119;
    internal static string WIF10120;
    internal static string WIF10200;
    internal static string WIF10201;
}
internal static class System.IdentityModel.XmlUtil : object {
    public static List`1<XmlElement> GetXmlElements(XmlNodeList nodeList);
}
