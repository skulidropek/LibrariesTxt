[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.EnumerableEx : object {
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> Buffer(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> Buffer(IEnumerable`1<TSource> source, int count, int skip);
    public static IEnumerable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IEnumerable`1<TResult>> sources);
    public static IEnumerable`1<TResult> Case(Func`1<TValue> selector, IDictionary`2<TValue, IEnumerable`1<TResult>> sources, IEnumerable`1<TResult> defaultSource);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Catch(IEnumerable`1<TSource> source, Func`2<TException, IEnumerable`1<TSource>> handler);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Catch(IEnumerable`1<IEnumerable`1<TSource>> sources);
    public static IEnumerable`1<TSource> Catch(IEnumerable`1[] sources);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Catch(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Concat(IEnumerable`1<IEnumerable`1<TSource>> sources);
    public static IEnumerable`1<TSource> Concat(IEnumerable`1[] sources);
    public static IEnumerable`1<TResult> Create(Func`1<IEnumerator`1<TResult>> getEnumerator);
    [IteratorStateMachineAttribute("System.Linq.EnumerableEx/<Create>d__15`1")]
public static IEnumerable`1<T> Create(Action`1<IYielder`1<T>> create);
    public static IEnumerable`1<TResult> Defer(Func`1<IEnumerable`1<TResult>> enumerableFactory);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctUntilChanged(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctUntilChanged(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctUntilChanged(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctUntilChanged(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Do(IEnumerable`1<TSource> source, Action`1<TSource> onNext);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Do(IEnumerable`1<TSource> source, Action`1<TSource> onNext, Action onCompleted);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Do(IEnumerable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Do(IEnumerable`1<TSource> source, Action`1<TSource> onNext, Action`1<Exception> onError, Action onCompleted);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Do(IEnumerable`1<TSource> source, IObserver`1<TSource> observer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> DoWhile(IEnumerable`1<TResult> source, Func`1<bool> condition);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Expand(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TSource>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Finally(IEnumerable`1<TSource> source, Action finallyAction);
    public static IEnumerable`1<TResult> For(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> resultSelector);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<TSource> source, Action`1<TSource> onNext);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<TSource> source, Action`2<TSource, int> onNext);
    public static IEnumerable`1<TResult> Generate(TState initialState, Func`2<TState, bool> condition, Func`2<TState, TState> iterate, Func`2<TState, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Hide(IEnumerable`1<TSource> source);
    public static IEnumerable`1<TResult> If(Func`1<bool> condition, IEnumerable`1<TResult> thenSource, IEnumerable`1<TResult> elseSource);
    public static IEnumerable`1<TResult> If(Func`1<bool> condition, IEnumerable`1<TResult> thenSource);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> IgnoreElements(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static bool IsEmpty(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource Max(IEnumerable`1<TSource> source, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
[ObsoleteAttribute("Use MaxByWithTies to maintain same behavior with .NET 6 and later", "False")]
public static IList`1<TSource> MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
[ObsoleteAttribute("Use MaxByWithTies to maintain same behavior with .NET 6 and later", "False")]
public static IList`1<TSource> MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IList`1<TSource> MaxByWithTies(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IList`1<TSource> MaxByWithTies(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IBuffer`1<TSource> Memoize(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Memoize(IEnumerable`1<TSource> source, Func`2<IEnumerable`1<TSource>, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IBuffer`1<TSource> Memoize(IEnumerable`1<TSource> source, int readerCount);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Memoize(IEnumerable`1<TSource> source, int readerCount, Func`2<IEnumerable`1<TSource>, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static TSource Min(IEnumerable`1<TSource> source, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
[ObsoleteAttribute("Use MinByWithTies to maintain same behavior with .NET 6 and later", "False")]
public static IList`1<TSource> MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
[ObsoleteAttribute("Use MinByWithTies to maintain same behavior with .NET 6 and later", "False")]
public static IList`1<TSource> MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IList`1<TSource> MinByWithTies(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IList`1<TSource> MinByWithTies(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> OnErrorResumeNext(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    public static IEnumerable`1<TSource> OnErrorResumeNext(IEnumerable`1[] sources);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> OnErrorResumeNext(IEnumerable`1<IEnumerable`1<TSource>> sources);
    [ExtensionAttribute]
public static IBuffer`1<TSource> Publish(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Publish(IEnumerable`1<TSource> source, Func`2<IEnumerable`1<TSource>, IEnumerable`1<TResult>> selector);
    [IteratorStateMachineAttribute("System.Linq.EnumerableEx/<Repeat>d__73`1")]
public static IEnumerable`1<TResult> Repeat(TResult value);
    public static IEnumerable`1<TResult> Repeat(TResult element, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Repeat(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Repeat(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Retry(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Retry(IEnumerable`1<TSource> source, int retryCount);
    [IteratorStateMachineAttribute("System.Linq.EnumerableEx/<Return>d__81`1")]
public static IEnumerable`1<TResult> Return(TResult value);
    [ExtensionAttribute]
public static IEnumerable`1<TAccumulate> Scan(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> accumulator);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Scan(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> accumulator);
    [ExtensionAttribute]
public static IEnumerable`1<TOther> SelectMany(IEnumerable`1<TSource> source, IEnumerable`1<TOther> other);
    [ExtensionAttribute]
public static IBuffer`1<TSource> Share(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Share(IEnumerable`1<TSource> source, Func`2<IEnumerable`1<TSource>, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipLast(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> StartWith(IEnumerable`1<TSource> source, TSource[] values);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeLast(IEnumerable`1<TSource> source, int count);
    public static IEnumerable`1<TResult> Throw(Exception exception);
    public static IEnumerable`1<TSource> Using(Func`1<TResource> resourceFactory, Func`2<TResource, IEnumerable`1<TSource>> enumerableFactory);
    public static IEnumerable`1<TResult> While(Func`1<bool> condition, IEnumerable`1<TResult> source);
}
[NullableContextAttribute("1")]
public interface System.Linq.IAwaitable {
    public abstract virtual IAwaiter GetAwaiter();
}
public interface System.Linq.IAwaiter {
    public bool IsCompleted { get; }
    public abstract virtual bool get_IsCompleted();
    public abstract virtual void GetResult();
}
public interface System.Linq.IBuffer`1 {
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
internal interface System.Linq.IRefCountList`1 {
    public int Count { get; }
    public T Item { get; }
    public abstract virtual void Clear();
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(int i);
    public abstract virtual void Add(T item);
    public abstract virtual void Done(int index);
}
[NullableContextAttribute("1")]
public interface System.Linq.IYielder`1 {
    public abstract virtual IAwaitable Break();
    public abstract virtual IAwaitable Return(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Linq.MaxRefCountList`1 : object {
    public int Count { get; }
    public T Item { get; }
    public sealed virtual void Clear();
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int i);
    public sealed virtual void Add(T item);
    public sealed virtual void Done(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class System.Linq.RefCountList`1 : object {
    public int ReaderCount { get; public set; }
    public int Count { get; }
    public T Item { get; }
    public RefCountList`1(int readerCount);
    [CompilerGeneratedAttribute]
public int get_ReaderCount();
    [CompilerGeneratedAttribute]
public void set_ReaderCount(int value);
    public sealed virtual void Clear();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    public sealed virtual T get_Item(int i);
    public sealed virtual void Add(T item);
    public sealed virtual void Done(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class System.Linq.Yielder`1 : object {
    public T Current { get; }
    public bool IsCompleted { get; }
    public Yielder`1(Action`1<Yielder`1<T>> create);
    [CompilerGeneratedAttribute]
public T get_Current();
    public sealed virtual IAwaiter GetAwaiter();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual void GetResult();
    [SecurityCriticalAttribute]
public sealed virtual void UnsafeOnCompleted(Action continuation);
    public sealed virtual void OnCompleted(Action continuation);
    public sealed virtual IAwaitable Return(T value);
    public sealed virtual IAwaitable Break();
    public Yielder`1<T> GetEnumerator();
    public bool MoveNext();
    public void Reset();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.4.255.64262")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
}
