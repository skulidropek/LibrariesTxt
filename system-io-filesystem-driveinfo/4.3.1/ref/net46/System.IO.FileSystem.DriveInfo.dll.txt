internal static class FxResources.System.IO.FileSystem.DriveInfo.SR : object {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_MustBeDriveLetterOrRootDir { get; }
    internal static string Arg_MustBeNonEmptyDriveName { get; }
    internal static string Arg_InvalidDriveChars { get; }
    internal static string Argument_InvalidPathChars { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string InvalidOperation_SetVolumeLabelFailed { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_DriveNotFound { get; }
    internal static string IO_DriveNotFound_Drive { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string UnknownError_Num { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_MustBeDriveLetterOrRootDir();
    internal static string get_Arg_MustBeNonEmptyDriveName();
    internal static string get_Arg_InvalidDriveChars();
    internal static string get_Argument_InvalidPathChars();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_InvalidOperation_SetVolumeLabelFailed();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_DriveNotFound();
    internal static string get_IO_DriveNotFound_Drive();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_UnknownError_Num();
    internal static Type get_ResourceType();
}
