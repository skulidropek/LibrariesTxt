internal static class FxResources.System.IO.Hashing.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class System.IO.Hashing.Crc32 : NonCryptographicHashAlgorithm {
    private static UInt32 InitialState;
    private static int Size;
    private UInt32 _crc;
    private static ReadOnlySpan`1<UInt32> CrcLookup { get; }
    public virtual void Append(ReadOnlySpan`1<byte> source);
    public virtual void Reset();
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    protected virtual void GetHashAndResetCore(Span`1<byte> destination);
    [CLSCompliantAttribute("False")]
public UInt32 GetCurrentHashAsUInt32();
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    [CLSCompliantAttribute("False")]
public static UInt32 HashToUInt32(ReadOnlySpan`1<byte> source);
    private static UInt32 Update(UInt32 crc, ReadOnlySpan`1<byte> source);
    private static UInt32 UpdateScalar(UInt32 crc, ReadOnlySpan`1<byte> source);
    private static UInt32 UpdateScalarArm64(UInt32 crc, ReadOnlySpan`1<byte> source);
    private static UInt32 UpdateScalarArm32(UInt32 crc, ReadOnlySpan`1<byte> source);
    private static ReadOnlySpan`1<UInt32> get_CrcLookup();
}
public class System.IO.Hashing.Crc64 : NonCryptographicHashAlgorithm {
    private static ulong InitialState;
    private static int Size;
    private ulong _crc;
    private static ReadOnlySpan`1<ulong> CrcLookup { get; }
    public virtual void Append(ReadOnlySpan`1<byte> source);
    public virtual void Reset();
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    protected virtual void GetHashAndResetCore(Span`1<byte> destination);
    [CLSCompliantAttribute("False")]
public ulong GetCurrentHashAsUInt64();
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination);
    [CLSCompliantAttribute("False")]
public static ulong HashToUInt64(ReadOnlySpan`1<byte> source);
    private static ulong Update(ulong crc, ReadOnlySpan`1<byte> source);
    private static ulong UpdateScalar(ulong crc, ReadOnlySpan`1<byte> source);
    private static ReadOnlySpan`1<ulong> get_CrcLookup();
}
public abstract class System.IO.Hashing.NonCryptographicHashAlgorithm : object {
    [CompilerGeneratedAttribute]
private int <HashLengthInBytes>k__BackingField;
    public int HashLengthInBytes { get; }
    protected NonCryptographicHashAlgorithm(int hashLengthInBytes);
    [CompilerGeneratedAttribute]
public int get_HashLengthInBytes();
    public abstract virtual void Append(ReadOnlySpan`1<byte> source);
    public abstract virtual void Reset();
    protected abstract virtual void GetCurrentHashCore(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public void Append(Byte[] source);
    [NullableContextAttribute("1")]
public void Append(Stream stream);
    [NullableContextAttribute("1")]
public Task AppendAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.Hashing.NonCryptographicHashAlgorithm/<AppendAsyncCore>d__10")]
private Task AppendAsyncCore(Stream stream, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public Byte[] GetCurrentHash();
    public bool TryGetCurrentHash(Span`1<byte> destination, Int32& bytesWritten);
    public int GetCurrentHash(Span`1<byte> destination);
    [NullableContextAttribute("1")]
public Byte[] GetHashAndReset();
    public bool TryGetHashAndReset(Span`1<byte> destination, Int32& bytesWritten);
    public int GetHashAndReset(Span`1<byte> destination);
    protected virtual void GetHashAndResetCore(Span`1<byte> destination);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetCurrentHash() to retrieve the computed hash code.", "True")]
public virtual int GetHashCode();
    [DoesNotReturnAttribute]
private protected static void ThrowDestinationTooShort();
}
[SkipLocalsInitAttribute]
public class System.IO.Hashing.XxHash128 : NonCryptographicHashAlgorithm {
    private static int HashLengthInBytes;
    private State _state;
    public XxHash128(long seed);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source, long seed);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source, long seed);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, long seed);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten, long seed);
    private static Hash128 HashToHash128(ReadOnlySpan`1<byte> source, long seed);
    public virtual void Reset();
    public virtual void Append(ReadOnlySpan`1<byte> source);
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    private Hash128 GetCurrentHashAsHash128();
    private static void WriteBigEndian128(Hash128& hash, Span`1<byte> destination);
    private static Hash128 HashLength0To16(Byte* source, UInt32 length, ulong seed);
    private static Hash128 HashLength1To3(Byte* source, UInt32 length, ulong seed);
    private static Hash128 HashLength4To8(Byte* source, UInt32 length, ulong seed);
    private static Hash128 HashLength9To16(Byte* source, UInt32 length, ulong seed);
    private static Hash128 HashLength17To128(Byte* source, UInt32 length, ulong seed);
    private static Hash128 HashLength129To240(Byte* source, UInt32 length, ulong seed);
    private static Hash128 HashLengthOver240(Byte* source, UInt32 length, ulong seed);
    private static Hash128 AvalancheHash(ulong accLow, ulong accHigh, UInt32 length, ulong seed);
    private static void Mix32Bytes(UInt64& accLow, UInt64& accHigh, Byte* input1, Byte* input2, ulong secret1, ulong secret2, ulong secret3, ulong secret4, ulong seed);
}
[SkipLocalsInitAttribute]
public class System.IO.Hashing.XxHash3 : NonCryptographicHashAlgorithm {
    private static int HashLengthInBytes;
    private State _state;
    public XxHash3(long seed);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source, long seed);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source, long seed);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, long seed);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten, long seed);
    [CLSCompliantAttribute("False")]
public static ulong HashToUInt64(ReadOnlySpan`1<byte> source, long seed);
    public virtual void Reset();
    public virtual void Append(ReadOnlySpan`1<byte> source);
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    [CLSCompliantAttribute("False")]
public ulong GetCurrentHashAsUInt64();
    private static ulong HashLength0To16(Byte* source, UInt32 length, ulong seed);
    private static ulong HashLength1To3(Byte* source, UInt32 length, ulong seed);
    private static ulong HashLength4To8(Byte* source, UInt32 length, ulong seed);
    private static ulong HashLength9To16(Byte* source, UInt32 length, ulong seed);
    private static ulong HashLength17To128(Byte* source, UInt32 length, ulong seed);
    private static ulong HashLength129To240(Byte* source, UInt32 length, ulong seed);
    private static ulong HashLengthOver240(Byte* source, UInt32 length, ulong seed);
}
public class System.IO.Hashing.XxHash32 : NonCryptographicHashAlgorithm {
    private static int HashSize;
    private static int StripeSize;
    private UInt32 _seed;
    private State _state;
    private Byte[] _holdback;
    private int _length;
    public XxHash32(int seed);
    public virtual void Reset();
    public virtual void Append(ReadOnlySpan`1<byte> source);
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    [CLSCompliantAttribute("False")]
public UInt32 GetCurrentHashAsUInt32();
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source, int seed);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source, int seed);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten, int seed);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, int seed);
    [CLSCompliantAttribute("False")]
public static UInt32 HashToUInt32(ReadOnlySpan`1<byte> source, int seed);
}
public class System.IO.Hashing.XxHash64 : NonCryptographicHashAlgorithm {
    private static int HashSize;
    private static int StripeSize;
    private ulong _seed;
    private State _state;
    private Byte[] _holdback;
    private long _length;
    public XxHash64(long seed);
    public virtual void Reset();
    public virtual void Append(ReadOnlySpan`1<byte> source);
    protected virtual void GetCurrentHashCore(Span`1<byte> destination);
    [CLSCompliantAttribute("False")]
public ulong GetCurrentHashAsUInt64();
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source);
    [NullableContextAttribute("1")]
public static Byte[] Hash(Byte[] source, long seed);
    public static Byte[] Hash(ReadOnlySpan`1<byte> source, long seed);
    public static bool TryHash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten, long seed);
    public static int Hash(ReadOnlySpan`1<byte> source, Span`1<byte> destination, long seed);
    [CLSCompliantAttribute("False")]
public static ulong HashToUInt64(ReadOnlySpan`1<byte> source, long seed);
    internal static ulong Avalanche(ulong hash);
}
[SkipLocalsInitAttribute]
internal static class System.IO.Hashing.XxHashShared : object {
    public static int StripeLengthBytes;
    public static int SecretLengthBytes;
    public static int SecretSizeMin;
    public static int SecretLastAccStartBytes;
    public static int SecretConsumeRateBytes;
    public static int SecretMergeAccsStartBytes;
    public static int NumStripesPerBlock;
    public static int AccumulatorCount;
    public static int MidSizeMaxBytes;
    public static int InternalBufferStripes;
    public static int InternalBufferLengthBytes;
    public static ulong DefaultSecretUInt64_0;
    public static ulong DefaultSecretUInt64_1;
    public static ulong DefaultSecretUInt64_2;
    public static ulong DefaultSecretUInt64_3;
    public static ulong DefaultSecretUInt64_4;
    public static ulong DefaultSecretUInt64_5;
    public static ulong DefaultSecretUInt64_6;
    public static ulong DefaultSecretUInt64_7;
    public static ulong DefaultSecretUInt64_8;
    public static ulong DefaultSecretUInt64_9;
    public static ulong DefaultSecretUInt64_10;
    public static ulong DefaultSecretUInt64_11;
    public static ulong DefaultSecretUInt64_12;
    public static ulong DefaultSecretUInt64_13;
    public static ulong DefaultSecretUInt64_14;
    public static ulong DefaultSecretUInt64_15;
    public static ulong DefaultSecret3UInt64_0;
    public static ulong DefaultSecret3UInt64_1;
    public static ulong DefaultSecret3UInt64_2;
    public static ulong DefaultSecret3UInt64_3;
    public static ulong DefaultSecret3UInt64_4;
    public static ulong DefaultSecret3UInt64_5;
    public static ulong DefaultSecret3UInt64_6;
    public static ulong DefaultSecret3UInt64_7;
    public static ulong DefaultSecret3UInt64_8;
    public static ulong DefaultSecret3UInt64_9;
    public static ulong DefaultSecret3UInt64_10;
    public static ulong DefaultSecret3UInt64_11;
    public static ulong DefaultSecret3UInt64_12;
    public static ulong DefaultSecret3UInt64_13;
    public static ulong Prime64_1;
    public static ulong Prime64_2;
    public static ulong Prime64_3;
    public static ulong Prime64_4;
    public static ulong Prime64_5;
    public static UInt32 Prime32_1;
    public static UInt32 Prime32_2;
    public static UInt32 Prime32_3;
    public static UInt32 Prime32_4;
    public static UInt32 Prime32_5;
    public static ReadOnlySpan`1<byte> DefaultSecret { get; }
    public static ReadOnlySpan`1<byte> get_DefaultSecret();
    public static void Initialize(State& state, ulong seed);
    public static void Reset(State& state);
    public static ulong Rrmxmx(ulong hash, UInt32 length);
    public static void HashInternalLoop(UInt64* accumulators, Byte* source, UInt32 length, Byte* secret);
    public static void ConsumeStripes(UInt64* accumulators, UInt64& stripesSoFar, ulong stripesPerBlock, Byte* source, ulong stripes, Byte* secret);
    public static void Append(State& state, ReadOnlySpan`1<byte> source);
    public static void CopyAccumulators(State& state, UInt64* accumulators);
    public static void DigestLong(State& state, UInt64* accumulators, Byte* secret);
    public static void InitializeAccumulators(UInt64* accumulators);
    public static ulong MergeAccumulators(UInt64* accumulators, Byte* secret, ulong start);
    public static ulong Mix16Bytes(Byte* source, ulong secretLow, ulong secretHigh, ulong seed);
    public static ulong Multiply32To64(UInt32 v1, UInt32 v2);
    public static ulong Avalanche(ulong hash);
    public static ulong Multiply64To128(ulong left, ulong right, UInt64& lower);
    public static ulong Multiply64To128ThenFold(ulong left, ulong right);
    public static void DeriveSecretFromSeed(Byte* destinationSecret, ulong seed);
    private static void Accumulate(UInt64* accumulators, Byte* source, Byte* secret, int stripesToProcess, bool scramble, int blockCount);
    public static void Accumulate512(UInt64* accumulators, Byte* source, Byte* secret);
    private static void Accumulate512Inlined(UInt64* accumulators, Byte* source, Byte* secret);
    private static void ScrambleAccumulators(UInt64* accumulators, Byte* secret);
    public static ulong XorShift(ulong value, int shift);
    public static UInt32 ReadUInt32LE(Byte* data);
    public static ulong ReadUInt64LE(Byte* data);
    private static void WriteUInt64LE(Byte* data, ulong value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_DestinationTooShort { get; }
    internal static string NotSupported_GetHashCode { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_DestinationTooShort();
    internal static string get_NotSupported_GetHashCode();
}
