internal static class FxResources.System.IO.IsolatedStorage.SR : object {
}
public class System.IO.IsolatedStorage.IsolatedStorageException : Exception {
    private static int COR_E_ISOSTORE;
    internal Exception _underlyingException;
    public IsolatedStorageException(string message);
    public IsolatedStorageException(string message, Exception inner);
    private void SetErrorCode(int hr);
}
public class System.IO.IsolatedStorage.IsolatedStorageFile : object {
    private string _appFilesPath;
    private bool _disposed;
    private bool _closed;
    private object _internalLock;
    private static string s_RootFromHost;
    private static string s_IsolatedStorageRoot;
    internal bool Disposed { get; }
    internal static string IsolatedStorageRoot { get; private set; }
    internal bool IsDeleted { get; }
    internal bool get_Disposed();
    internal static string get_IsolatedStorageRoot();
    private static void set_IsolatedStorageRoot(string value);
    internal bool get_IsDeleted();
    internal void Close();
    public void DeleteFile(string file);
    public bool FileExists(string path);
    public bool DirectoryExists(string path);
    public void CreateDirectory(string dir);
    public void DeleteDirectory(string dir);
    public String[] GetFileNames();
    public String[] GetFileNames(string searchPattern);
    public String[] GetDirectoryNames();
    public String[] GetDirectoryNames(string searchPattern);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode, FileAccess access);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public IsolatedStorageFileStream CreateFile(string path);
    public DateTimeOffset GetCreationTime(string path);
    public DateTimeOffset GetLastAccessTime(string path);
    public DateTimeOffset GetLastWriteTime(string path);
    public void CopyFile(string sourceFileName, string destinationFileName);
    public void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void MoveFile(string sourceFileName, string destinationFileName);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static IsolatedStorageFile GetUserStoreForApplication();
    internal static IsolatedStorageFile GetUserStore();
    internal string GetFullPath(string partialPath);
    private static void CreatePathPrefixIfNeeded(string path);
    internal static string FetchOrCreateRoot();
    internal void EnsureStoreIsValid();
    public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
internal static Exception GetIsolatedStorageException(string exceptionMsg, Exception rootCause);
}
public class System.IO.IsolatedStorage.IsolatedStorageFileStream : Stream {
    private static string s_BackSlash;
    private FileStream _fs;
    private IsolatedStorageFile _isf;
    private string _givenPath;
    private string _fullPath;
    private static int DefaultBufferSize;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public string Name { get; }
    public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, IsolatedStorageFile isf);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [SecurityCriticalAttribute]
public string get_Name();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
}
[SecurityCriticalAttribute]
internal class System.IO.IsolatedStorage.IsolatedStorageSecurityState : object {
    private string _rootUserDirectory;
    private string RootUserDirectory { get; private set; }
    internal static string GetRootUserDirectory();
    private string get_RootUserDirectory();
    private void set_RootUserDirectory(string value);
    [SecurityCriticalAttribute]
private void EnsureState();
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string IsolatedStorage_StoreNotOpen { get; }
    internal static string IsolatedStorage_OldQuotaLarger { get; }
    internal static string IsolatedStorage_Operation_ISFS { get; }
    internal static string IsolatedStorage_Path { get; }
    internal static string IsolatedStorage_FileOpenMode { get; }
    internal static string IsolatedStorage_Operation { get; }
    internal static string IsolatedStorage_SeekOrigin { get; }
    internal static string IsolatedStorage_DeleteFile { get; }
    internal static string IsolatedStorage_CreateDirectory { get; }
    internal static string IsolatedStorage_DeleteDirectory { get; }
    internal static string IsolatedStorage_Exception { get; }
    internal static string IsolatedStorage_Init { get; }
    internal static string Argument_EmptyPath { get; }
    internal static string ArgumentNull_Path { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string Argument_AbsolutePathRequired { get; }
    internal static string Argument_PathFormatNotSupported { get; }
    internal static string PathNotFound_Path { get; }
    internal static string PathNotFound_NoPathName { get; }
    internal static string PathTooLong { get; }
    internal static string FileNotFound { get; }
    internal static string FileNotFound_FileName { get; }
    internal static string IO_NoPermissionToDirectoryName { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string DriveNotFound_Drive { get; }
    internal static string UnknownError_Num { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_IsolatedStorage_StoreNotOpen();
    internal static string get_IsolatedStorage_OldQuotaLarger();
    internal static string get_IsolatedStorage_Operation_ISFS();
    internal static string get_IsolatedStorage_Path();
    internal static string get_IsolatedStorage_FileOpenMode();
    internal static string get_IsolatedStorage_Operation();
    internal static string get_IsolatedStorage_SeekOrigin();
    internal static string get_IsolatedStorage_DeleteFile();
    internal static string get_IsolatedStorage_CreateDirectory();
    internal static string get_IsolatedStorage_DeleteDirectory();
    internal static string get_IsolatedStorage_Exception();
    internal static string get_IsolatedStorage_Init();
    internal static string get_Argument_EmptyPath();
    internal static string get_ArgumentNull_Path();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_Argument_AbsolutePathRequired();
    internal static string get_Argument_PathFormatNotSupported();
    internal static string get_PathNotFound_Path();
    internal static string get_PathNotFound_NoPathName();
    internal static string get_PathTooLong();
    internal static string get_FileNotFound();
    internal static string get_FileNotFound_FileName();
    internal static string get_IO_NoPermissionToDirectoryName();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_IO_FileExists_Name();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_DriveNotFound_Drive();
    internal static string get_UnknownError_Num();
    internal static Type get_ResourceType();
}
