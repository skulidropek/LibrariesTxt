public class System.IO.IsolatedStorage.IsolatedStorageException : Exception {
    public IsolatedStorageException(string message);
    public IsolatedStorageException(string message, Exception inner);
}
public class System.IO.IsolatedStorage.IsolatedStorageFile : object {
    public void CopyFile(string sourceFileName, string destinationFileName);
    public void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void CreateDirectory(string dir);
    public IsolatedStorageFileStream CreateFile(string path);
    public void DeleteDirectory(string dir);
    public void DeleteFile(string file);
    public bool DirectoryExists(string path);
    public sealed virtual void Dispose();
    public bool FileExists(string path);
    public DateTimeOffset GetCreationTime(string path);
    public String[] GetDirectoryNames();
    public String[] GetDirectoryNames(string searchPattern);
    public String[] GetFileNames();
    public String[] GetFileNames(string searchPattern);
    public DateTimeOffset GetLastAccessTime(string path);
    public DateTimeOffset GetLastWriteTime(string path);
    public static IsolatedStorageFile GetUserStoreForApplication();
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public void MoveFile(string sourceFileName, string destinationFileName);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode, FileAccess access);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
}
public class System.IO.IsolatedStorage.IsolatedStorageFileStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
}
