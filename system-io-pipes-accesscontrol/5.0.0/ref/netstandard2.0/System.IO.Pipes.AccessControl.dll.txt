[FlagsAttribute]
public enum System.IO.Pipes.PipeAccessRights : Enum {
    public int value__;
    public static PipeAccessRights AccessSystemSecurity;
    public static PipeAccessRights ChangePermissions;
    public static PipeAccessRights CreateNewInstance;
    public static PipeAccessRights Delete;
    public static PipeAccessRights FullControl;
    public static PipeAccessRights Read;
    public static PipeAccessRights ReadAttributes;
    public static PipeAccessRights ReadData;
    public static PipeAccessRights ReadExtendedAttributes;
    public static PipeAccessRights ReadPermissions;
    public static PipeAccessRights ReadWrite;
    public static PipeAccessRights Synchronize;
    public static PipeAccessRights TakeOwnership;
    public static PipeAccessRights Write;
    public static PipeAccessRights WriteAttributes;
    public static PipeAccessRights WriteData;
    public static PipeAccessRights WriteExtendedAttributes;
}
public class System.IO.Pipes.PipeAccessRule : AccessRule {
    public PipeAccessRights PipeAccessRights { get; }
    public PipeAccessRule(IdentityReference identity, PipeAccessRights rights, AccessControlType type);
    public PipeAccessRule(string identity, PipeAccessRights rights, AccessControlType type);
    public PipeAccessRights get_PipeAccessRights();
}
public class System.IO.Pipes.PipeAuditRule : AuditRule {
    public PipeAccessRights PipeAccessRights { get; }
    public PipeAuditRule(IdentityReference identity, PipeAccessRights rights, AuditFlags flags);
    public PipeAuditRule(string identity, PipeAccessRights rights, AuditFlags flags);
    public PipeAccessRights get_PipeAccessRights();
}
[ExtensionAttribute]
public static class System.IO.Pipes.PipesAclExtensions : object {
    [ExtensionAttribute]
public static PipeSecurity GetAccessControl(PipeStream stream);
    [ExtensionAttribute]
public static void SetAccessControl(PipeStream stream, PipeSecurity pipeSecurity);
}
public class System.IO.Pipes.PipeSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(PipeAccessRule rule);
    public void AddAuditRule(PipeAuditRule rule);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    protected internal void Persist(SafeHandle handle);
    protected internal void Persist(string name);
    public bool RemoveAccessRule(PipeAccessRule rule);
    public void RemoveAccessRuleSpecific(PipeAccessRule rule);
    public bool RemoveAuditRule(PipeAuditRule rule);
    public void RemoveAuditRuleAll(PipeAuditRule rule);
    public void RemoveAuditRuleSpecific(PipeAuditRule rule);
    public void ResetAccessRule(PipeAccessRule rule);
    public void SetAccessRule(PipeAccessRule rule);
    public void SetAuditRule(PipeAuditRule rule);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
