internal static class FxResources.System.IO.Ports.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum System.IO.Ports.Handshake : Enum {
    public int value__;
    public static Handshake None;
    public static Handshake XOnXOff;
    public static Handshake RequestToSend;
    public static Handshake RequestToSendXOnXOff;
}
public enum System.IO.Ports.Parity : Enum {
    public int value__;
    public static Parity None;
    public static Parity Odd;
    public static Parity Even;
    public static Parity Mark;
    public static Parity Space;
}
public enum System.IO.Ports.SerialData : Enum {
    public int value__;
    public static SerialData Chars;
    public static SerialData Eof;
}
public class System.IO.Ports.SerialDataReceivedEventArgs : EventArgs {
    public SerialData EventType { get; }
    public SerialData get_EventType();
}
public class System.IO.Ports.SerialDataReceivedEventHandler : MulticastDelegate {
    public SerialDataReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialDataReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialDataReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Ports.SerialError : Enum {
    public int value__;
    public static SerialError RXOver;
    public static SerialError Overrun;
    public static SerialError RXParity;
    public static SerialError Frame;
    public static SerialError TXFull;
}
public class System.IO.Ports.SerialErrorReceivedEventArgs : EventArgs {
    public SerialError EventType { get; }
    public SerialError get_EventType();
}
public class System.IO.Ports.SerialErrorReceivedEventHandler : MulticastDelegate {
    public SerialErrorReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialErrorReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialErrorReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Ports.SerialPinChange : Enum {
    public int value__;
    public static SerialPinChange CtsChanged;
    public static SerialPinChange DsrChanged;
    public static SerialPinChange CDChanged;
    public static SerialPinChange Break;
    public static SerialPinChange Ring;
}
public class System.IO.Ports.SerialPinChangedEventArgs : EventArgs {
    public SerialPinChange EventType { get; }
    public SerialPinChange get_EventType();
}
public class System.IO.Ports.SerialPinChangedEventHandler : MulticastDelegate {
    public SerialPinChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialPinChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialPinChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.IO.Ports.SerialPort : Component {
    public static int InfiniteTimeout;
    public Stream BaseStream { get; }
    public int BaudRate { get; public set; }
    public bool BreakState { get; public set; }
    public int BytesToRead { get; }
    public int BytesToWrite { get; }
    public bool CDHolding { get; }
    public bool CtsHolding { get; }
    public int DataBits { get; public set; }
    public bool DiscardNull { get; public set; }
    public bool DsrHolding { get; }
    public bool DtrEnable { get; public set; }
    public Encoding Encoding { get; public set; }
    public Handshake Handshake { get; public set; }
    public bool IsOpen { get; }
    public string NewLine { get; public set; }
    public Parity Parity { get; public set; }
    public byte ParityReplace { get; public set; }
    public string PortName { get; public set; }
    public int ReadBufferSize { get; public set; }
    public int ReadTimeout { get; public set; }
    public int ReceivedBytesThreshold { get; public set; }
    public bool RtsEnable { get; public set; }
    public StopBits StopBits { get; public set; }
    public int WriteBufferSize { get; public set; }
    public int WriteTimeout { get; public set; }
    public SerialPort(IContainer container);
    public SerialPort(string portName);
    public SerialPort(string portName, int baudRate);
    public SerialPort(string portName, int baudRate, Parity parity);
    public SerialPort(string portName, int baudRate, Parity parity, int dataBits);
    public SerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits);
    public Stream get_BaseStream();
    public int get_BaudRate();
    public void set_BaudRate(int value);
    public bool get_BreakState();
    public void set_BreakState(bool value);
    public int get_BytesToRead();
    public int get_BytesToWrite();
    public bool get_CDHolding();
    public bool get_CtsHolding();
    public int get_DataBits();
    public void set_DataBits(int value);
    public bool get_DiscardNull();
    public void set_DiscardNull(bool value);
    public bool get_DsrHolding();
    public bool get_DtrEnable();
    public void set_DtrEnable(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public Handshake get_Handshake();
    public void set_Handshake(Handshake value);
    public bool get_IsOpen();
    public string get_NewLine();
    public void set_NewLine(string value);
    public Parity get_Parity();
    public void set_Parity(Parity value);
    public byte get_ParityReplace();
    public void set_ParityReplace(byte value);
    public string get_PortName();
    public void set_PortName(string value);
    public int get_ReadBufferSize();
    public void set_ReadBufferSize(int value);
    public int get_ReadTimeout();
    public void set_ReadTimeout(int value);
    public int get_ReceivedBytesThreshold();
    public void set_ReceivedBytesThreshold(int value);
    public bool get_RtsEnable();
    public void set_RtsEnable(bool value);
    public StopBits get_StopBits();
    public void set_StopBits(StopBits value);
    public int get_WriteBufferSize();
    public void set_WriteBufferSize(int value);
    public int get_WriteTimeout();
    public void set_WriteTimeout(int value);
    public void add_DataReceived(SerialDataReceivedEventHandler value);
    public void remove_DataReceived(SerialDataReceivedEventHandler value);
    public void add_ErrorReceived(SerialErrorReceivedEventHandler value);
    public void remove_ErrorReceived(SerialErrorReceivedEventHandler value);
    public void add_PinChanged(SerialPinChangedEventHandler value);
    public void remove_PinChanged(SerialPinChangedEventHandler value);
    public void Close();
    public void DiscardInBuffer();
    public void DiscardOutBuffer();
    protected virtual void Dispose(bool disposing);
    public static String[] GetPortNames();
    public void Open();
    public int Read(Byte[] buffer, int offset, int count);
    public int Read(Char[] buffer, int offset, int count);
    public int ReadByte();
    public int ReadChar();
    public string ReadExisting();
    public string ReadLine();
    public string ReadTo(string value);
    public void Write(Byte[] buffer, int offset, int count);
    public void Write(Char[] buffer, int offset, int count);
    public void Write(string text);
    public void WriteLine(string text);
}
public enum System.IO.Ports.StopBits : Enum {
    public int value__;
    public static StopBits None;
    public static StopBits One;
    public static StopBits Two;
    public static StopBits OnePointFive;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string IO_EOF_ReadBeyondEOF { get; }
    internal static string BaseStream_Invalid_Not_Open { get; }
    internal static string PortNameEmpty_String { get; }
    internal static string Port_not_open { get; }
    internal static string Port_already_open { get; }
    internal static string Cant_be_set_when_open { get; }
    internal static string Max_Baud { get; }
    internal static string In_Break_State { get; }
    internal static string Write_timed_out { get; }
    internal static string CantSetRtsWithHandshaking { get; }
    internal static string NotSupportedEncoding { get; }
    internal static string Arg_InvalidSerialPort { get; }
    internal static string Arg_InvalidSerialPortExtended { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string ArgumentOutOfRange_Bounds_Lower_Upper { get; }
    internal static string ArgumentOutOfRange_Enum { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNumRequired { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string ArgumentOutOfRange_Timeout { get; }
    internal static string ArgumentOutOfRange_WriteTimeout { get; }
    internal static string IndexOutOfRange_IORaceCondition { get; }
    internal static string IO_OperationAborted { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    internal static string InvalidNullEmptyArgument { get; }
    internal static string Arg_WrongAsyncResult { get; }
    internal static string InvalidOperation_EndReadCalledMultiple { get; }
    internal static string InvalidOperation_EndWriteCalledMultiple { get; }
    internal static string UnauthorizedAccess_IODenied_Port { get; }
    internal static string PlatformNotSupported_IOPorts { get; }
    internal static string PlatformNotSupported_SerialPort_GetPortNames { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_AlreadyExists_Name { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_IO_EOF_ReadBeyondEOF();
    internal static string get_BaseStream_Invalid_Not_Open();
    internal static string get_PortNameEmpty_String();
    internal static string get_Port_not_open();
    internal static string get_Port_already_open();
    internal static string get_Cant_be_set_when_open();
    internal static string get_Max_Baud();
    internal static string get_In_Break_State();
    internal static string get_Write_timed_out();
    internal static string get_CantSetRtsWithHandshaking();
    internal static string get_NotSupportedEncoding();
    internal static string get_Arg_InvalidSerialPort();
    internal static string get_Arg_InvalidSerialPortExtended();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_ArgumentOutOfRange_Bounds_Lower_Upper();
    internal static string get_ArgumentOutOfRange_Enum();
    internal static string get_ArgumentOutOfRange_NeedNonNegNumRequired();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_ArgumentOutOfRange_Timeout();
    internal static string get_ArgumentOutOfRange_WriteTimeout();
    internal static string get_IndexOutOfRange_IORaceCondition();
    internal static string get_IO_OperationAborted();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_ObjectDisposed_StreamClosed();
    internal static string get_InvalidNullEmptyArgument();
    internal static string get_Arg_WrongAsyncResult();
    internal static string get_InvalidOperation_EndReadCalledMultiple();
    internal static string get_InvalidOperation_EndWriteCalledMultiple();
    internal static string get_UnauthorizedAccess_IODenied_Port();
    internal static string get_PlatformNotSupported_IOPorts();
    internal static string get_PlatformNotSupported_SerialPort_GetPortNames();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_AlreadyExists_Name();
}
internal static class System.Threading.Tasks.TaskToAsyncResult : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    public static Task Unwrap(IAsyncResult asyncResult);
    public static Task`1<TResult> Unwrap(IAsyncResult asyncResult);
}
