internal static class FxResources.System.IO.Ports.SR : object {
}
internal static class Interop : object {
    private static void ThrowExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static void CheckIo(Error error, string path, bool isDirError);
    internal static long CheckIo(long result, string path, bool isDirError);
    internal static void ThrowIOExceptionForLastError();
    internal static int CheckIo(int result, string path, bool isDirError);
    internal static IntPtr CheckIo(IntPtr result, string path, bool isDirError);
    internal static TSafeHandle CheckIo(TSafeHandle handle, string path, bool isDirError);
    internal static Exception GetExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static Exception GetIOException(ErrorInfo errorInfo, string path);
    [CompilerGeneratedAttribute]
internal static bool <GetExceptionForIoErrno>g__ParentDirectoryExists|13_0(string fullPath);
}
[ExtensionAttribute]
internal static class InteropErrorExtensions : object {
    [ExtensionAttribute]
public static ErrorInfo Info(Error error);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum System.IO.Ports.Handshake : Enum {
    public int value__;
    public static Handshake None;
    public static Handshake XOnXOff;
    public static Handshake RequestToSend;
    public static Handshake RequestToSendXOnXOff;
}
internal static class System.IO.Ports.InternalResources : object {
    internal static void EndOfFile();
    internal static string GetMessage(int errorCode);
    internal static Exception FileNotOpenException();
    internal static void FileNotOpen();
    internal static void WrongAsyncResult();
    internal static void EndReadCalledTwice();
    internal static void EndWriteCalledTwice();
}
public enum System.IO.Ports.Parity : Enum {
    public int value__;
    public static Parity None;
    public static Parity Odd;
    public static Parity Even;
    public static Parity Mark;
    public static Parity Space;
}
internal class System.IO.Ports.SafeSerialDeviceHandle : SafeHandleMinusOneIsInvalid {
    internal static SafeSerialDeviceHandle Open(string portName);
    protected virtual bool ReleaseHandle();
}
public enum System.IO.Ports.SerialData : Enum {
    public int value__;
    public static SerialData Chars;
    public static SerialData Eof;
}
public class System.IO.Ports.SerialDataReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SerialData <EventType>k__BackingField;
    public SerialData EventType { get; private set; }
    internal SerialDataReceivedEventArgs(SerialData eventCode);
    [CompilerGeneratedAttribute]
public SerialData get_EventType();
    [CompilerGeneratedAttribute]
private void set_EventType(SerialData value);
}
public class System.IO.Ports.SerialDataReceivedEventHandler : MulticastDelegate {
    public SerialDataReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialDataReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialDataReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Ports.SerialError : Enum {
    public int value__;
    public static SerialError TXFull;
    public static SerialError RXOver;
    public static SerialError Overrun;
    public static SerialError RXParity;
    public static SerialError Frame;
}
public class System.IO.Ports.SerialErrorReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SerialError <EventType>k__BackingField;
    public SerialError EventType { get; private set; }
    internal SerialErrorReceivedEventArgs(SerialError eventCode);
    [CompilerGeneratedAttribute]
public SerialError get_EventType();
    [CompilerGeneratedAttribute]
private void set_EventType(SerialError value);
}
public class System.IO.Ports.SerialErrorReceivedEventHandler : MulticastDelegate {
    public SerialErrorReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialErrorReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialErrorReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Ports.SerialPinChange : Enum {
    public int value__;
    public static SerialPinChange CtsChanged;
    public static SerialPinChange DsrChanged;
    public static SerialPinChange CDChanged;
    public static SerialPinChange Ring;
    public static SerialPinChange Break;
}
public class System.IO.Ports.SerialPinChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SerialPinChange <EventType>k__BackingField;
    public SerialPinChange EventType { get; private set; }
    internal SerialPinChangedEventArgs(SerialPinChange eventCode);
    [CompilerGeneratedAttribute]
public SerialPinChange get_EventType();
    [CompilerGeneratedAttribute]
private void set_EventType(SerialPinChange value);
}
public class System.IO.Ports.SerialPinChangedEventHandler : MulticastDelegate {
    public SerialPinChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialPinChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialPinChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.IO.Ports.SerialPort : Component {
    public static int InfiniteTimeout;
    private static int DefaultDataBits;
    private static Parity DefaultParity;
    private static StopBits DefaultStopBits;
    private static Handshake DefaultHandshake;
    private static int DefaultBufferSize;
    private static string DefaultPortName;
    private static int DefaultBaudRate;
    private static bool DefaultDtrEnable;
    private static bool DefaultRtsEnable;
    private static bool DefaultDiscardNull;
    private static byte DefaultParityReplace;
    private static int DefaultReceivedBytesThreshold;
    private static int DefaultReadTimeout;
    private static int DefaultWriteTimeout;
    private static int DefaultReadBufferSize;
    private static int DefaultWriteBufferSize;
    private static int MaxDataBits;
    private static int MinDataBits;
    private static string DefaultNewLine;
    private int _baudRate;
    private int _dataBits;
    private Parity _parity;
    private StopBits _stopBits;
    private string _portName;
    private Encoding _encoding;
    private Decoder _decoder;
    private int _maxByteCountForSingleChar;
    private Handshake _handshake;
    private int _readTimeout;
    private int _writeTimeout;
    private int _receivedBytesThreshold;
    private bool _discardNull;
    private bool _dtrEnable;
    private bool _rtsEnable;
    private byte _parityReplace;
    private string _newLine;
    private int _readBufferSize;
    private int _writeBufferSize;
    private SerialStream _internalSerialStream;
    private Byte[] _inBuffer;
    private int _readPos;
    private int _readLen;
    private Char[] _oneChar;
    private Char[] _singleCharBuffer;
    [CompilerGeneratedAttribute]
private SerialErrorReceivedEventHandler ErrorReceived;
    [CompilerGeneratedAttribute]
private SerialPinChangedEventHandler PinChanged;
    private SerialDataReceivedEventHandler _dataReceivedHandler;
    private SerialDataReceivedEventHandler _dataReceived;
    public Stream BaseStream { get; }
    public int BaudRate { get; public set; }
    public bool BreakState { get; public set; }
    public int BytesToWrite { get; }
    public int BytesToRead { get; }
    private int CachedBytesToRead { get; }
    public bool CDHolding { get; }
    public bool CtsHolding { get; }
    public int DataBits { get; public set; }
    public bool DiscardNull { get; public set; }
    public bool DsrHolding { get; }
    public bool DtrEnable { get; public set; }
    public Encoding Encoding { get; public set; }
    public Handshake Handshake { get; public set; }
    public bool IsOpen { get; }
    public string NewLine { get; public set; }
    public Parity Parity { get; public set; }
    public byte ParityReplace { get; public set; }
    public string PortName { get; public set; }
    public int ReadBufferSize { get; public set; }
    public int ReadTimeout { get; public set; }
    public int ReceivedBytesThreshold { get; public set; }
    public bool RtsEnable { get; public set; }
    public StopBits StopBits { get; public set; }
    public int WriteBufferSize { get; public set; }
    public int WriteTimeout { get; public set; }
    public SerialPort(IContainer container);
    public SerialPort(string portName);
    public SerialPort(string portName, int baudRate);
    public SerialPort(string portName, int baudRate, Parity parity);
    public SerialPort(string portName, int baudRate, Parity parity, int dataBits);
    public SerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits);
    [CompilerGeneratedAttribute]
public void add_ErrorReceived(SerialErrorReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ErrorReceived(SerialErrorReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_PinChanged(SerialPinChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PinChanged(SerialPinChangedEventHandler value);
    public void add_DataReceived(SerialDataReceivedEventHandler value);
    public void remove_DataReceived(SerialDataReceivedEventHandler value);
    public Stream get_BaseStream();
    public int get_BaudRate();
    public void set_BaudRate(int value);
    public bool get_BreakState();
    public void set_BreakState(bool value);
    public int get_BytesToWrite();
    public int get_BytesToRead();
    private int get_CachedBytesToRead();
    public bool get_CDHolding();
    public bool get_CtsHolding();
    public int get_DataBits();
    public void set_DataBits(int value);
    public bool get_DiscardNull();
    public void set_DiscardNull(bool value);
    public bool get_DsrHolding();
    public bool get_DtrEnable();
    public void set_DtrEnable(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public Handshake get_Handshake();
    public void set_Handshake(Handshake value);
    public bool get_IsOpen();
    public string get_NewLine();
    public void set_NewLine(string value);
    public Parity get_Parity();
    public void set_Parity(Parity value);
    public byte get_ParityReplace();
    public void set_ParityReplace(byte value);
    public string get_PortName();
    public void set_PortName(string value);
    public int get_ReadBufferSize();
    public void set_ReadBufferSize(int value);
    public int get_ReadTimeout();
    public void set_ReadTimeout(int value);
    public int get_ReceivedBytesThreshold();
    public void set_ReceivedBytesThreshold(int value);
    public bool get_RtsEnable();
    public void set_RtsEnable(bool value);
    public StopBits get_StopBits();
    public void set_StopBits(StopBits value);
    public int get_WriteBufferSize();
    public void set_WriteBufferSize(int value);
    public int get_WriteTimeout();
    public void set_WriteTimeout(int value);
    public void Close();
    protected virtual void Dispose(bool disposing);
    public void DiscardInBuffer();
    public void DiscardOutBuffer();
    public void Open();
    public int Read(Byte[] buffer, int offset, int count);
    public int ReadChar();
    private int ReadOneChar(int timeout);
    public int Read(Char[] buffer, int offset, int count);
    private int InternalRead(Char[] buffer, int offset, int count, int timeout, bool countMultiByteCharsAsOne);
    private int ReadBufferIntoChars(Char[] buffer, int offset, int count, bool countMultiByteCharsAsOne);
    public int ReadByte();
    public string ReadExisting();
    public string ReadLine();
    public string ReadTo(string value);
    public void Write(string text);
    public void Write(Char[] buffer, int offset, int count);
    public void Write(Byte[] buffer, int offset, int count);
    public void WriteLine(string text);
    private void CatchErrorEvents(object src, SerialErrorReceivedEventArgs e);
    private void CatchPinChangedEvents(object src, SerialPinChangedEventArgs e);
    private void CatchReceivedEvents(object src, SerialDataReceivedEventArgs e);
    private void CompactBuffer();
    private void MaybeResizeBuffer(int additionalByteLength);
    private static int GetElapsedTime(int currentTickCount, int startTickCount);
    public static String[] GetPortNames();
    private static String[] GetPortNames_Linux();
    private static String[] GetPortNames_OSX();
    private static String[] GetPortNames_FreeBSD();
}
internal class System.IO.Ports.SerialStream : Stream {
    private static int MaxDataBits;
    private static int MinDataBits;
    private string _portName;
    private bool _inBreak;
    private Handshake _handshake;
    [CompilerGeneratedAttribute]
private SerialErrorReceivedEventHandler ErrorReceived;
    private static int TimeoutResolution;
    private static int IOLoopIdleTimeout;
    private bool _ioLoopFinished;
    private SafeSerialDeviceHandle _handle;
    private int _baudRate;
    private StopBits _stopBits;
    private Parity _parity;
    private int _dataBits;
    private bool _rtsEnable;
    private int _readTimeout;
    private int _writeTimeout;
    private Byte[] _tempBuf;
    private Task _ioLoop;
    private object _ioLoopLock;
    private bool _hasCancelledTasksToProcess;
    private Queue`1<SerialStreamIORequest> _readQueue;
    private object _readQueueLock;
    private Queue`1<SerialStreamIORequest> _writeQueue;
    private object _writeQueueLock;
    private long _totalBytesRead;
    private long _lastTotalBytesAvailable;
    private SerialDataReceivedEventHandler _dataReceived;
    private SerialPinChangedEventHandler _pinChanged;
    private RequestProcessor _processReadDelegate;
    private RequestProcessor _processWriteDelegate;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private long TotalBytesAvailable { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    internal int BaudRate { get; internal set; }
    public bool BreakState { get; public set; }
    internal int BytesToWrite { get; }
    internal int BytesToRead { get; }
    internal bool CDHolding { get; }
    internal bool CtsHolding { get; }
    internal bool DsrHolding { get; }
    internal bool DtrEnable { get; internal set; }
    internal bool RtsEnable { get; internal set; }
    unknown Handshake Handshake {internal set; }
    unknown int DataBits {internal set; }
    unknown Parity Parity {internal set; }
    unknown StopBits StopBits {internal set; }
    unknown bool DiscardNull {internal set; }
    unknown byte ParityReplace {internal set; }
    private bool HasCancelledTasksToProcess { get; private set; }
    internal bool IsOpen { get; }
    internal SerialStream(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits, int readTimeout, int writeTimeout, Handshake handshake, bool dtrEnable, bool rtsEnable, bool _1, byte _2);
    [CompilerGeneratedAttribute]
internal void add_ErrorReceived(SerialErrorReceivedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ErrorReceived(SerialErrorReceivedEventHandler value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int ReadByte();
    public virtual void Write(Byte[] array, int offset, int count);
    protected virtual override void Finalize();
    private static void CheckArrayArguments(Byte[] array, int offset, int count);
    private void CheckHandle();
    private void CheckReadWriteArguments(Byte[] array, int offset, int count);
    private void CheckWriteArguments();
    private void CheckWriteArguments(Byte[] array, int offset, int count);
    private long get_TotalBytesAvailable();
    internal void add_DataReceived(SerialDataReceivedEventHandler value);
    internal void remove_DataReceived(SerialDataReceivedEventHandler value);
    internal void add_PinChanged(SerialPinChangedEventHandler value);
    internal void remove_PinChanged(SerialPinChangedEventHandler value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    private static void CheckBaudRate(int baudRate);
    internal int get_BaudRate();
    internal void set_BaudRate(int value);
    public bool get_BreakState();
    public void set_BreakState(bool value);
    internal int get_BytesToWrite();
    internal int get_BytesToRead();
    internal bool get_CDHolding();
    internal bool get_CtsHolding();
    internal bool get_DsrHolding();
    internal bool get_DtrEnable();
    internal void set_DtrEnable(bool value);
    private bool RtsEnabledNative();
    internal bool get_RtsEnable();
    internal void set_RtsEnable(bool value);
    internal void set_Handshake(Handshake value);
    internal void set_DataBits(int value);
    internal void set_Parity(Parity value);
    internal void set_StopBits(StopBits value);
    internal void set_DiscardNull(bool value);
    internal void set_ParityReplace(byte value);
    private bool get_HasCancelledTasksToProcess();
    private void set_HasCancelledTasksToProcess(bool value);
    internal void DiscardInBuffer();
    internal void DiscardOutBuffer();
    internal void SetBufferSizes(int readBufferSize, int writeBufferSize);
    internal bool get_IsOpen();
    public virtual void Flush();
    internal int ReadByte(int timeout);
    public virtual int Read(Byte[] array, int offset, int count);
    internal int Read(Byte[] array, int offset, int count, int timeout);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] array, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] array, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    private PollEvents PollEvents(int timeout, bool pollReadEvents, bool pollWriteEvents, Nullable`1& error);
    internal void Write(Byte[] array, int offset, int count, int timeout);
    public virtual IAsyncResult BeginWrite(Byte[] array, int offset, int count, AsyncCallback userCallback, object stateObject);
    public virtual void EndWrite(IAsyncResult asyncResult);
    private static int EndReadWrite(IAsyncResult asyncResult);
    private void EnsureIOLoopRunning();
    private void FinishPendingIORequests(Nullable`1<ErrorInfo> error);
    protected virtual void Dispose(bool disposing);
    private void RaiseDataReceivedChars();
    private void RaisePinChanged(SerialPinChange pinChanged);
    private void RaiseDataReceivedEof();
    private int ProcessRead(SerialStreamIORequest r);
    private int ProcessWrite(SerialStreamIORequest r);
    private static int DoIORequest(Queue`1<SerialStreamIORequest> q, object queueLock, RequestProcessor op);
    private void IOLoop();
    private static void RemoveCompletedTasks(Queue`1<SerialStreamIORequest> queue, object queueLock);
    private bool IsReadQueueEmpty();
    private bool IsWriteQueueEmpty();
    private void NotifyPinChanges(Signals signals);
    private static CancellationTokenSource GetCancellationTokenSourceFromTimeout(int timeoutMs);
    private static Exception GetLastIOError();
    [CompilerGeneratedAttribute]
internal static bool <DoIORequest>g__TryPeekNextRequest|139_0(SerialStreamIORequest& r, <>c__DisplayClass139_0& );
    [CompilerGeneratedAttribute]
private bool <IOLoop>g__IsNoEventRegistered|140_0();
}
public enum System.IO.Ports.StopBits : Enum {
    public int value__;
    public static StopBits None;
    public static StopBits One;
    public static StopBits Two;
    public static StopBits OnePointFive;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string IO_EOF_ReadBeyondEOF { get; }
    internal static string BaseStream_Invalid_Not_Open { get; }
    internal static string PortNameEmpty_String { get; }
    internal static string Port_not_open { get; }
    internal static string Port_already_open { get; }
    internal static string Cant_be_set_when_open { get; }
    internal static string Max_Baud { get; }
    internal static string In_Break_State { get; }
    internal static string Write_timed_out { get; }
    internal static string CantSetRtsWithHandshaking { get; }
    internal static string NotSupportedEncoding { get; }
    internal static string Arg_InvalidSerialPort { get; }
    internal static string Arg_InvalidSerialPortExtended { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string ArgumentOutOfRange_Bounds_Lower_Upper { get; }
    internal static string ArgumentOutOfRange_Enum { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNumRequired { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string ArgumentOutOfRange_Timeout { get; }
    internal static string ArgumentOutOfRange_WriteTimeout { get; }
    internal static string IndexOutOfRange_IORaceCondition { get; }
    internal static string IO_OperationAborted { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    internal static string InvalidNullEmptyArgument { get; }
    internal static string Arg_WrongAsyncResult { get; }
    internal static string InvalidOperation_EndReadCalledMultiple { get; }
    internal static string InvalidOperation_EndWriteCalledMultiple { get; }
    internal static string UnauthorizedAccess_IODenied_Port { get; }
    internal static string PlatformNotSupported_IOPorts { get; }
    internal static string PlatformNotSupported_SerialPort_GetPortNames { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_AlreadyExists_Name { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_IO_EOF_ReadBeyondEOF();
    internal static string get_BaseStream_Invalid_Not_Open();
    internal static string get_PortNameEmpty_String();
    internal static string get_Port_not_open();
    internal static string get_Port_already_open();
    internal static string get_Cant_be_set_when_open();
    internal static string get_Max_Baud();
    internal static string get_In_Break_State();
    internal static string get_Write_timed_out();
    internal static string get_CantSetRtsWithHandshaking();
    internal static string get_NotSupportedEncoding();
    internal static string get_Arg_InvalidSerialPort();
    internal static string get_Arg_InvalidSerialPortExtended();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_ArgumentOutOfRange_Bounds_Lower_Upper();
    internal static string get_ArgumentOutOfRange_Enum();
    internal static string get_ArgumentOutOfRange_NeedNonNegNumRequired();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_ArgumentOutOfRange_Timeout();
    internal static string get_ArgumentOutOfRange_WriteTimeout();
    internal static string get_IndexOutOfRange_IORaceCondition();
    internal static string get_IO_OperationAborted();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_ObjectDisposed_StreamClosed();
    internal static string get_InvalidNullEmptyArgument();
    internal static string get_Arg_WrongAsyncResult();
    internal static string get_InvalidOperation_EndReadCalledMultiple();
    internal static string get_InvalidOperation_EndWriteCalledMultiple();
    internal static string get_UnauthorizedAccess_IODenied_Port();
    internal static string get_PlatformNotSupported_IOPorts();
    internal static string get_PlatformNotSupported_SerialPort_GetPortNames();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_AlreadyExists_Name();
}
internal static class System.Threading.Tasks.TaskToAsyncResult : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    public static Task Unwrap(IAsyncResult asyncResult);
    public static Task`1<TResult> Unwrap(IAsyncResult asyncResult);
}
