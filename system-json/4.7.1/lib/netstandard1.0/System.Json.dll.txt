internal static class FxResources.System.Json.SR : object {
}
[DefaultMemberAttribute("Item")]
public class System.Json.JsonArray : JsonValue {
    private List`1<JsonValue> _list;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public JsonValue Item { get; public set; }
    public JsonType JsonType { get; }
    public JsonArray(JsonValue[] items);
    public JsonArray(IEnumerable`1<JsonValue> items);
    public virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual JsonValue get_Item(int index);
    public sealed virtual void set_Item(int index, JsonValue value);
    public virtual JsonType get_JsonType();
    public sealed virtual void Add(JsonValue item);
    public void AddRange(IEnumerable`1<JsonValue> items);
    public void AddRange(JsonValue[] items);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(JsonValue item);
    public sealed virtual void CopyTo(JsonValue[] array, int arrayIndex);
    public sealed virtual int IndexOf(JsonValue item);
    public sealed virtual void Insert(int index, JsonValue item);
    public sealed virtual bool Remove(JsonValue item);
    public sealed virtual void RemoveAt(int index);
    public virtual void Save(Stream stream);
    private sealed virtual override IEnumerator`1<JsonValue> System.Collections.Generic.IEnumerable<System.Json.JsonValue>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class System.Json.JsonObject : JsonValue {
    private SortedDictionary`2<string, JsonValue> _map;
    public int Count { get; }
    public JsonValue Item { get; public set; }
    public JsonType JsonType { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<JsonValue> Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Json.JsonValue>>.IsReadOnly { get; }
    public JsonObject(KeyValuePair`2[] items);
    public JsonObject(IEnumerable`1<KeyValuePair`2<string, JsonValue>> items);
    public virtual int get_Count();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, JsonValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual JsonValue get_Item(string key);
    public sealed virtual void set_Item(string key, JsonValue value);
    public virtual JsonType get_JsonType();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<JsonValue> get_Values();
    public sealed virtual void Add(string key, JsonValue value);
    public sealed virtual void Add(KeyValuePair`2<string, JsonValue> pair);
    public void AddRange(IEnumerable`1<KeyValuePair`2<string, JsonValue>> items);
    public void AddRange(KeyValuePair`2[] items);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Json.JsonValue>>.Contains(KeyValuePair`2<string, JsonValue> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Json.JsonValue>>.Remove(KeyValuePair`2<string, JsonValue> item);
    public virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(string key);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Json.JsonValue>>.get_IsReadOnly();
    public virtual void Save(Stream stream);
    public sealed virtual bool TryGetValue(string key, JsonValue& value);
}
public class System.Json.JsonPrimitive : JsonValue {
    private static Byte[] s_trueBytes;
    private static Byte[] s_falseBytes;
    private object _value;
    internal object Value { get; }
    public JsonType JsonType { get; }
    public JsonPrimitive(bool value);
    public JsonPrimitive(byte value);
    public JsonPrimitive(char value);
    public JsonPrimitive(decimal value);
    public JsonPrimitive(double value);
    public JsonPrimitive(float value);
    public JsonPrimitive(int value);
    public JsonPrimitive(long value);
    [CLSCompliantAttribute("False")]
public JsonPrimitive(sbyte value);
    public JsonPrimitive(short value);
    public JsonPrimitive(string value);
    public JsonPrimitive(DateTime value);
    [CLSCompliantAttribute("False")]
public JsonPrimitive(UInt32 value);
    [CLSCompliantAttribute("False")]
public JsonPrimitive(ulong value);
    [CLSCompliantAttribute("False")]
public JsonPrimitive(ushort value);
    public JsonPrimitive(DateTimeOffset value);
    public JsonPrimitive(Guid value);
    public JsonPrimitive(TimeSpan value);
    public JsonPrimitive(Uri value);
    private static JsonPrimitive();
    internal object get_Value();
    public virtual JsonType get_JsonType();
    public virtual void Save(Stream stream);
    internal string GetFormattedString();
}
public enum System.Json.JsonType : Enum {
    public int value__;
    public static JsonType String;
    public static JsonType Number;
    public static JsonType Object;
    public static JsonType Array;
    public static JsonType Boolean;
}
[DefaultMemberAttribute("Item")]
public abstract class System.Json.JsonValue : object {
    private static UTF8Encoding s_encoding;
    public int Count { get; }
    public JsonType JsonType { get; }
    public JsonValue Item { get; public set; }
    public JsonValue Item { get; public set; }
    private static JsonValue();
    public static JsonValue Load(Stream stream);
    public static JsonValue Load(TextReader textReader);
    [IteratorStateMachineAttribute("System.Json.JsonValue/<ToJsonPairEnumerable>d__3")]
private static IEnumerable`1<KeyValuePair`2<string, JsonValue>> ToJsonPairEnumerable(IEnumerable`1<KeyValuePair`2<string, object>> kvpc);
    [IteratorStateMachineAttribute("System.Json.JsonValue/<ToJsonValueEnumerable>d__4")]
private static IEnumerable`1<JsonValue> ToJsonValueEnumerable(IEnumerable`1<object> arr);
    private static JsonValue ToJsonValue(object ret);
    public static JsonValue Parse(string jsonString);
    public virtual int get_Count();
    public abstract virtual JsonType get_JsonType();
    public virtual JsonValue get_Item(int index);
    public virtual void set_Item(int index, JsonValue value);
    public virtual JsonValue get_Item(string key);
    public virtual void set_Item(string key, JsonValue value);
    public virtual bool ContainsKey(string key);
    public virtual void Save(Stream stream);
    public virtual void Save(TextWriter textWriter);
    private void SaveInternal(TextWriter w);
    public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static bool NeedEscape(string src, int i);
    internal static string EscapeString(string src);
    private static string DoEscapeString(StringBuilder sb, string src, int cur);
    public static JsonValue op_Implicit(bool value);
    public static JsonValue op_Implicit(byte value);
    public static JsonValue op_Implicit(char value);
    public static JsonValue op_Implicit(decimal value);
    public static JsonValue op_Implicit(double value);
    public static JsonValue op_Implicit(float value);
    public static JsonValue op_Implicit(int value);
    public static JsonValue op_Implicit(long value);
    [CLSCompliantAttribute("False")]
public static JsonValue op_Implicit(sbyte value);
    public static JsonValue op_Implicit(short value);
    public static JsonValue op_Implicit(string value);
    [CLSCompliantAttribute("False")]
public static JsonValue op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static JsonValue op_Implicit(ulong value);
    [CLSCompliantAttribute("False")]
public static JsonValue op_Implicit(ushort value);
    public static JsonValue op_Implicit(DateTime value);
    public static JsonValue op_Implicit(DateTimeOffset value);
    public static JsonValue op_Implicit(Guid value);
    public static JsonValue op_Implicit(TimeSpan value);
    public static JsonValue op_Implicit(Uri value);
    public static bool op_Implicit(JsonValue value);
    public static byte op_Implicit(JsonValue value);
    public static char op_Implicit(JsonValue value);
    public static decimal op_Implicit(JsonValue value);
    public static double op_Implicit(JsonValue value);
    public static float op_Implicit(JsonValue value);
    public static int op_Implicit(JsonValue value);
    public static long op_Implicit(JsonValue value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Implicit(JsonValue value);
    public static short op_Implicit(JsonValue value);
    public static string op_Implicit(JsonValue value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Implicit(JsonValue value);
    [CLSCompliantAttribute("False")]
public static ulong op_Implicit(JsonValue value);
    [CLSCompliantAttribute("False")]
public static ushort op_Implicit(JsonValue value);
    public static DateTime op_Implicit(JsonValue value);
    public static DateTimeOffset op_Implicit(JsonValue value);
    public static TimeSpan op_Implicit(JsonValue value);
    public static Guid op_Implicit(JsonValue value);
    public static Uri op_Implicit(JsonValue value);
}
internal class System.Runtime.Serialization.Json.JavaScriptReader : object {
    private TextReader _r;
    private int _line;
    private int _column;
    private int _peek;
    private bool _has_peek;
    private bool _prev_lf;
    private StringBuilder _vb;
    public JavaScriptReader(TextReader reader);
    public object Read();
    private object ReadCore();
    private int PeekChar();
    private int ReadChar();
    private void SkipSpaces();
    private object ReadNumericLiteral();
    private string ReadStringLiteral();
    private void Expect(char expected);
    private void Expect(string expected);
    private Exception JsonError(string msg);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentException_ExtraCharacters { get; }
    internal static string ArgumentException_IncompleteInput { get; }
    internal static string ArgumentException_UnexpectedCharacter { get; }
    internal static string ArgumentException_ArrayMustEndWithBracket { get; }
    internal static string ArgumentException_LeadingZeros { get; }
    internal static string ArgumentException_NoDigitFound { get; }
    internal static string ArgumentException_ExtraDot { get; }
    internal static string ArgumentException_IncompleteExponent { get; }
    internal static string ArgumentException_InvalidLiteralFormat { get; }
    internal static string ArgumentException_StringNotClosed { get; }
    internal static string ArgumentException_IncompleteEscapeSequence { get; }
    internal static string ArgumentException_IncompleteEscapeLiteral { get; }
    internal static string ArgumentException_UnexpectedEscapeCharacter { get; }
    internal static string ArgumentException_ExpectedXButGotY { get; }
    internal static string ArgumentException_ExpectedXDiferedAtY { get; }
    internal static string ArgumentException_MessageAt { get; }
    internal static string NotImplemented_GetFormattedString { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentException_ExtraCharacters();
    internal static string get_ArgumentException_IncompleteInput();
    internal static string get_ArgumentException_UnexpectedCharacter();
    internal static string get_ArgumentException_ArrayMustEndWithBracket();
    internal static string get_ArgumentException_LeadingZeros();
    internal static string get_ArgumentException_NoDigitFound();
    internal static string get_ArgumentException_ExtraDot();
    internal static string get_ArgumentException_IncompleteExponent();
    internal static string get_ArgumentException_InvalidLiteralFormat();
    internal static string get_ArgumentException_StringNotClosed();
    internal static string get_ArgumentException_IncompleteEscapeSequence();
    internal static string get_ArgumentException_IncompleteEscapeLiteral();
    internal static string get_ArgumentException_UnexpectedEscapeCharacter();
    internal static string get_ArgumentException_ExpectedXButGotY();
    internal static string get_ArgumentException_ExpectedXDiferedAtY();
    internal static string get_ArgumentException_MessageAt();
    internal static string get_NotImplemented_GetFormattedString();
}
