internal class System.Linq.Dynamic.ClassFactory : object {
    public static ClassFactory Instance;
    private ModuleBuilder module;
    private Dictionary`2<Signature, Type> classes;
    private int classCount;
    private ReaderWriterLock rwLock;
    private static ClassFactory();
    public Type GetDynamicClass(IEnumerable`1<DynamicProperty> properties);
    private Type CreateAndCacheDynamicClass(Signature signature);
    private Type CreateDynamicClass(DynamicProperty[] properties);
    private FieldInfo[] GenerateProperties(TypeBuilder tb, DynamicProperty[] properties);
    private void GenerateEquals(TypeBuilder tb, FieldInfo[] fields);
    private void GenerateGetHashCode(TypeBuilder tb, FieldInfo[] fields);
}
public abstract class System.Linq.Dynamic.DynamicClass : object {
    public virtual string ToString();
}
public static class System.Linq.Dynamic.DynamicExpression : object {
    public static Expression Parse(ParameterExpression[] parameters, Type resultType, string expression, Object[] values);
    public static Expression Parse(Type resultType, string expression, Object[] values);
    public static LambdaExpression ParseLambda(Type itType, Type resultType, string expression, Object[] values);
    public static LambdaExpression ParseLambda(ParameterExpression[] parameters, Type resultType, string expression, Object[] values);
    public static LambdaExpression ParseLambda(Type delegateType, ParameterExpression[] parameters, Type resultType, string expression, Object[] values);
    public static Expression`1<Func`2<T, S>> ParseLambda(string expression, Object[] values);
    public static Type CreateClass(DynamicProperty[] properties);
    public static Type CreateClass(IEnumerable`1<DynamicProperty> properties);
}
internal class System.Linq.Dynamic.DynamicOrdering : object {
    public Expression Selector;
    public bool Ascending;
}
public class System.Linq.Dynamic.DynamicProperty : object {
    private string name;
    private Type type;
    public string Name { get; }
    public Type Type { get; }
    public DynamicProperty(string name, Type type);
    public string get_Name();
    public Type get_Type();
}
[ExtensionAttribute]
public static class System.Linq.Dynamic.DynamicQueryable : object {
    [ExtensionAttribute]
public static IQueryable`1<T> Where(IQueryable`1<T> source, string predicate, Object[] values);
    [ExtensionAttribute]
public static IQueryable Where(IQueryable source, string predicate, Object[] values);
    [ExtensionAttribute]
public static IQueryable Select(IQueryable source, string selector, Object[] values);
    [ExtensionAttribute]
public static IQueryable`1<T> OrderBy(IQueryable`1<T> source, string ordering, Object[] values);
    [ExtensionAttribute]
public static IQueryable OrderBy(IQueryable source, string ordering, Object[] values);
    [ExtensionAttribute]
public static IQueryable Take(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable Skip(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable GroupBy(IQueryable source, string keySelector, string elementSelector, Object[] values);
    [ExtensionAttribute]
public static bool Any(IQueryable source);
    [ExtensionAttribute]
public static int Count(IQueryable source);
    [ExtensionAttribute]
public static IQueryable Distinct(IQueryable source);
    [ExtensionAttribute]
public static object Aggregate(IQueryable source, string function, string member);
    [ExtensionAttribute]
public static IEnumerable`1<T> Where(IEnumerable`1<T> source, string predicate, Object[] values);
    [ExtensionAttribute]
public static IEnumerable Where(IEnumerable source, string predicate, Object[] values);
    [ExtensionAttribute]
public static IEnumerable Select(IEnumerable source, string selector, Object[] values);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderBy(IEnumerable`1<T> source, string ordering, Object[] values);
    [ExtensionAttribute]
public static IEnumerable OrderBy(IEnumerable source, string ordering, Object[] values);
    [ExtensionAttribute]
public static IEnumerable Take(IEnumerable source, int count);
    [ExtensionAttribute]
public static IEnumerable Skip(IEnumerable source, int count);
    [ExtensionAttribute]
public static IEnumerable GroupBy(IEnumerable source, string keySelector, string elementSelector, Object[] values);
    [ExtensionAttribute]
public static bool Any(IEnumerable source);
    [ExtensionAttribute]
public static int Count(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable Distinct(IEnumerable source);
}
internal class System.Linq.Dynamic.ExpressionParser : object {
    private static Type[] predefinedTypes;
    private static Expression trueLiteral;
    private static Expression falseLiteral;
    private static Expression nullLiteral;
    private static string keywordIt;
    private static string keywordIif;
    private static string keywordNew;
    private static string keywordOuterIt;
    private static Dictionary`2<string, object> keywords;
    private Dictionary`2<string, object> symbols;
    private IDictionary`2<string, object> externals;
    private Dictionary`2<Expression, string> literals;
    private ParameterExpression it;
    private ParameterExpression outerIt;
    private string text;
    private int textPos;
    private int textLen;
    private char ch;
    private Token token;
    [CompilerGeneratedAttribute]
private static Func`2<PropertyInfo, MethodBase> CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static Func`2<MethodBase, bool> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<MethodBase, MethodData> CS$<>9__CachedAnonymousMethodDelegated;
    public ExpressionParser(ParameterExpression[] parameters, string expression, Object[] values);
    private static ExpressionParser();
    private void ProcessParameters(ParameterExpression[] parameters);
    private void ProcessValues(Object[] values);
    private void AddSymbol(string name, object value);
    public Expression Parse(Type resultType);
    public IEnumerable`1<DynamicOrdering> ParseOrdering();
    private Expression ParseExpression();
    private Expression ParseLogicalOr();
    private Expression ParseLogicalAnd();
    private Expression ParseComparison();
    private Expression ParseAdditive();
    private Expression ParseMultiplicative();
    private Expression ParseUnary();
    private Expression ParsePrimary();
    private Expression ParsePrimaryStart();
    private Expression ParseStringLiteral();
    private Expression ParseIntegerLiteral();
    private Expression ParseRealLiteral();
    private Expression CreateLiteral(object value, string text);
    private Expression ParseParenExpression();
    private Expression ParseIdentifier();
    private Expression ParseIt();
    private Expression ParseOuterIt();
    private Expression ParseIif();
    private Expression GenerateConditional(Expression test, Expression expr1, Expression expr2, int errorPos);
    private Expression ParseNew();
    private Expression ParseLambdaInvocation(LambdaExpression lambda);
    private Expression ParseTypeAccess(Type type);
    private Expression GenerateConversion(Expression expr, Type type, int errorPos);
    private Expression ParseMemberAccess(Type type, Expression instance);
    private static Type FindGenericType(Type generic, Type type);
    private Expression ParseAggregate(Expression instance, Type elementType, string methodName, int errorPos);
    private Expression[] ParseArgumentList();
    private Expression[] ParseArguments();
    private Expression ParseElementAccess(Expression expr);
    private static bool IsNullableType(Type type);
    private static Type GetNonNullableType(Type type);
    private static string GetTypeName(Type type);
    private static bool IsNumericType(Type type);
    private static bool IsSignedIntegralType(Type type);
    private static bool IsUnsignedIntegralType(Type type);
    private static int GetNumericTypeKind(Type type);
    private static bool IsEnumType(Type type);
    private void CheckAndPromoteOperand(Type signatures, string opName, Expression& expr, int errorPos);
    private void CheckAndPromoteOperands(Type signatures, string opName, Expression& left, Expression& right, int errorPos);
    private Exception IncompatibleOperandsError(string opName, Expression left, Expression right, int pos);
    private MemberInfo FindPropertyOrField(Type type, string memberName, bool staticAccess);
    private int FindMethod(Type type, string methodName, bool staticAccess, Expression[] args, MethodBase& method);
    private int FindIndexer(Type type, Expression[] args, MethodBase& method);
    private static IEnumerable`1<Type> SelfAndBaseTypes(Type type);
    private static IEnumerable`1<Type> SelfAndBaseClasses(Type type);
    private static void AddInterface(List`1<Type> types, Type type);
    private int FindBestMethod(IEnumerable`1<MethodBase> methods, Expression[] args, MethodBase& method);
    private bool IsApplicable(MethodData method, Expression[] args);
    private Expression PromoteExpression(Expression expr, Type type, bool exact);
    private static object ParseNumber(string text, Type type);
    private static object ParseEnum(string name, Type type);
    private static bool IsCompatibleWith(Type source, Type target);
    private static bool IsBetterThan(Expression[] args, MethodData m1, MethodData m2);
    private static int CompareConversions(Type s, Type t1, Type t2);
    private Expression GenerateEqual(Expression left, Expression right);
    private Expression GenerateNotEqual(Expression left, Expression right);
    private Expression GenerateGreaterThan(Expression left, Expression right);
    private Expression GenerateGreaterThanEqual(Expression left, Expression right);
    private Expression GenerateLessThan(Expression left, Expression right);
    private Expression GenerateLessThanEqual(Expression left, Expression right);
    private Expression GenerateAdd(Expression left, Expression right);
    private Expression GenerateSubtract(Expression left, Expression right);
    private Expression GenerateStringConcat(Expression left, Expression right);
    private MethodInfo GetStaticMethod(string methodName, Expression left, Expression right);
    private Expression GenerateStaticMethodCall(string methodName, Expression left, Expression right);
    private void SetTextPos(int pos);
    private void NextChar();
    private void NextToken();
    private bool TokenIdentifierIs(string id);
    private string GetIdentifier();
    private void ValidateDigit();
    private void ValidateToken(TokenId t, string errorMessage);
    private void ValidateToken(TokenId t);
    private Exception ParseError(string format, Object[] args);
    private Exception ParseError(int pos, string format, Object[] args);
    private static Dictionary`2<string, object> CreateKeywords();
    [CompilerGeneratedAttribute]
private static MethodBase <FindIndexer>b__1(PropertyInfo p);
    [CompilerGeneratedAttribute]
private static bool <FindIndexer>b__2(MethodBase m);
    [CompilerGeneratedAttribute]
private static MethodData <FindBestMethod>b__9(MethodBase m);
}
public class System.Linq.Dynamic.ParseException : Exception {
    private int position;
    public int Position { get; }
    public ParseException(string message, int position);
    public int get_Position();
    public virtual string ToString();
}
internal static class System.Linq.Dynamic.Res : object {
    public static string DuplicateIdentifier;
    public static string ExpressionTypeMismatch;
    public static string ExpressionExpected;
    public static string InvalidCharacterLiteral;
    public static string InvalidIntegerLiteral;
    public static string InvalidRealLiteral;
    public static string UnknownIdentifier;
    public static string NoItInScope;
    public static string IifRequiresThreeArgs;
    public static string FirstExprMustBeBool;
    public static string BothTypesConvertToOther;
    public static string NeitherTypeConvertsToOther;
    public static string MissingAsClause;
    public static string ArgsIncompatibleWithLambda;
    public static string TypeHasNoNullableForm;
    public static string NoMatchingConstructor;
    public static string AmbiguousConstructorInvocation;
    public static string CannotConvertValue;
    public static string NoApplicableMethod;
    public static string MethodsAreInaccessible;
    public static string MethodIsVoid;
    public static string AmbiguousMethodInvocation;
    public static string UnknownPropertyOrField;
    public static string NoApplicableAggregate;
    public static string CannotIndexMultiDimArray;
    public static string InvalidIndex;
    public static string NoApplicableIndexer;
    public static string AmbiguousIndexerInvocation;
    public static string IncompatibleOperand;
    public static string IncompatibleOperands;
    public static string UnterminatedStringLiteral;
    public static string InvalidCharacter;
    public static string DigitExpected;
    public static string SyntaxError;
    public static string TokenExpected;
    public static string ParseExceptionFormat;
    public static string ColonExpected;
    public static string OpenParenExpected;
    public static string CloseParenOrOperatorExpected;
    public static string CloseParenOrCommaExpected;
    public static string DotOrOpenParenExpected;
    public static string OpenBracketExpected;
    public static string CloseBracketOrCommaExpected;
    public static string IdentifierExpected;
}
internal class System.Linq.Dynamic.Signature : object {
    public DynamicProperty[] properties;
    public int hashCode;
    public Signature(IEnumerable`1<DynamicProperty> properties);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Signature other);
}
