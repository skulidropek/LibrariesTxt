internal static class FxResources.System.Memory.Data.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonConverterAttribute("System.Text.Json.Serialization.BinaryDataJsonConverter")]
public class System.BinaryData : object {
    private static string JsonSerializerRequiresDynamicCode;
    private static string JsonSerializerRequiresUnreferencedCode;
    private static string MediaTypeApplicationJson;
    private ReadOnlyMemory`1<byte> _bytes;
    [CompilerGeneratedAttribute]
private static BinaryData <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MediaType>k__BackingField;
    public static BinaryData Empty { get; }
    public int Length { get; }
    public bool IsEmpty { get; }
    [NullableAttribute("2")]
public string MediaType { get; }
    public BinaryData(Byte[] data);
    public BinaryData(Byte[] data, string mediaType);
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed and might need runtime code generation.")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed.")]
public BinaryData(object jsonSerializable, JsonSerializerOptions options, Type type);
    [NullableContextAttribute("2")]
public BinaryData(object jsonSerializable, JsonSerializerContext context, Type type);
    [NullableContextAttribute("0")]
public BinaryData(ReadOnlyMemory`1<byte> data);
    [NullableContextAttribute("0")]
public BinaryData(ReadOnlyMemory`1<byte> data, string mediaType);
    public BinaryData(string data);
    public BinaryData(string data, string mediaType);
    private static BinaryData();
    [CompilerGeneratedAttribute]
public static BinaryData get_Empty();
    public int get_Length();
    public bool get_IsEmpty();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MediaType();
    [NullableContextAttribute("0")]
public static BinaryData FromBytes(ReadOnlyMemory`1<byte> data);
    [NullableContextAttribute("0")]
public static BinaryData FromBytes(ReadOnlyMemory`1<byte> data, string mediaType);
    public static BinaryData FromBytes(Byte[] data);
    public static BinaryData FromBytes(Byte[] data, string mediaType);
    public static BinaryData FromString(string data);
    public static BinaryData FromString(string data, string mediaType);
    public static BinaryData FromStream(Stream stream);
    public static BinaryData FromStream(Stream stream, string mediaType);
    public static Task`1<BinaryData> FromStreamAsync(Stream stream, CancellationToken cancellationToken);
    public static Task`1<BinaryData> FromStreamAsync(Stream stream, string mediaType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.BinaryData/<FromStreamAsync>d__32")]
private static Task`1<BinaryData> FromStreamAsync(Stream stream, bool async, string mediaType, CancellationToken cancellationToken);
    [RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed and might need runtime code generation.")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed.")]
public static BinaryData FromObjectAsJson(T jsonSerializable, JsonSerializerOptions options);
    public static BinaryData FromObjectAsJson(T jsonSerializable, JsonTypeInfo`1<T> jsonTypeInfo);
    public BinaryData WithMediaType(string mediaType);
    public virtual string ToString();
    public Stream ToStream();
    [NullableContextAttribute("0")]
public ReadOnlyMemory`1<byte> ToMemory();
    public Byte[] ToArray();
    [NullableContextAttribute("2")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed and might need runtime code generation.")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed.")]
public T ToObjectFromJson(JsonSerializerOptions options);
    [NullableContextAttribute("2")]
public T ToObjectFromJson(JsonTypeInfo`1<T> jsonTypeInfo);
    private ReadOnlySpan`1<byte> GetBytesWithTrimmedBom();
    [NullableContextAttribute("0")]
public static ReadOnlyMemory`1<byte> op_Implicit(BinaryData data);
    [NullableContextAttribute("0")]
public static ReadOnlySpan`1<byte> op_Implicit(BinaryData data);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
internal class System.IO.ReadOnlyMemoryStream : Stream {
    private ReadOnlyMemory`1<byte> _content;
    private int _position;
    private bool _isOpen;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ReadOnlyMemoryStream(ReadOnlyMemory`1<byte> content);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    private void EnsureNotClosed();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int ReadByte();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> buffer);
    private int ReadBuffer(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void CopyTo(Stream destination, int bufferSize);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_StreamLengthMustBeNonNegativeInt32 { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string IO_SeekBeforeBegin { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_StreamLengthMustBeNonNegativeInt32();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_IO_SeekBeforeBegin();
    internal static string get_ObjectDisposed_StreamClosed();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Text.Json.Serialization.BinaryDataJsonConverter : JsonConverter`1<BinaryData> {
    public virtual BinaryData Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, BinaryData value, JsonSerializerOptions options);
}
internal static class System.Threading.Tasks.TaskToAsyncResult : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    public static Task Unwrap(IAsyncResult asyncResult);
    public static Task`1<TResult> Unwrap(IAsyncResult asyncResult);
}
