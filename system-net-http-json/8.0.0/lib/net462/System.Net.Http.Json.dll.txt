internal static class FxResources.System.Net.Http.Json.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class System.ArraySegmentExtensions : object {
    [ExtensionAttribute]
public static ArraySegment`1<T> Slice(ArraySegment`1<T> arraySegment, int index);
    [ExtensionAttribute]
public static ArraySegment`1<T> Slice(ArraySegment`1<T> arraySegment, int index, int count);
    [ExtensionAttribute]
public static void CopyTo(ArraySegment`1<T> source, ArraySegment`1<T> destination);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.StringSyntaxAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Arguments>k__BackingField;
    public static string CompositeFormat;
    public static string DateOnlyFormat;
    public static string DateTimeFormat;
    public static string EnumFormat;
    public static string GuidFormat;
    public static string Json;
    public static string NumericFormat;
    public static string Regex;
    public static string TimeOnlyFormat;
    public static string TimeSpanFormat;
    public static string Uri;
    public static string Xml;
    public string Syntax { get; }
    public Object[] Arguments { get; }
    public StringSyntaxAttribute(string syntax);
    public StringSyntaxAttribute(string syntax, Object[] arguments);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public Object[] get_Arguments();
}
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    public string Category { get; }
    public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.Json.HttpClientJsonExtensions : object {
    private static Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> s_deleteAsync;
    private static Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> s_getAsync;
    private static HttpMethod s_httpPatch;
    private static HttpMethod HttpPatch { get; }
    private static HttpClientJsonExtensions();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, string requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, string requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, string requestUri, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, Uri requestUri, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static IAsyncEnumerable`1<TValue> FromJsonStreamAsyncCore(HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    private static IAsyncEnumerable`1<TValue> FromJsonStreamAsyncCore(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static Task`1<object> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static Task`1<TValue> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    private static Task`1<object> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    private static Task`1<TValue> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    private static Task`1<TValue> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, Func`4<Stream, TJsonOptions, CancellationToken, ValueTask`1<TValue>> deserializeMethod, TJsonOptions jsonOptions, CancellationToken cancellationToken);
    private static Uri CreateUri(string uri);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpClientJsonExtensions/<GetHttpResponseStreamAsync>d__14")]
private static Task`1<Stream> GetHttpResponseStreamAsync(HttpClient client, HttpResponseMessage response, bool usingResponseHeadersRead, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, string requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, Uri requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, string requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, string requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, Uri requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, string requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, string requestUri, Type type, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, Uri requestUri, Type type, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, string requestUri, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, Uri requestUri, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> GetFromJsonAsync(HttpClient client, string requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> GetFromJsonAsync(HttpClient client, Uri requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, string requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> GetFromJsonAsync(HttpClient client, string requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> GetFromJsonAsync(HttpClient client, Uri requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, string requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> GetFromJsonAsync(HttpClient client, string requestUri, Type type, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> GetFromJsonAsync(HttpClient client, Uri requestUri, Type type, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, string requestUri, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, Uri requestUri, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, string requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, Uri requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, string requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, Uri requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, string requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, Uri requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    private static HttpMethod get_HttpPatch();
    [ExtensionAttribute]
private static Task`1<HttpResponseMessage> PatchAsync(HttpClient client, string requestUri, HttpContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static Task`1<HttpResponseMessage> PatchAsync(HttpClient client, Uri requestUri, HttpContent content, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("System.Net.Http.Json.HttpClientJsonExtensions/<<FromJsonStreamAsyncCore>g__Core|7_0>d`1")]
[CompilerGeneratedAttribute]
internal static IAsyncEnumerable`1<TValue> <FromJsonStreamAsyncCore>g__Core|7_0(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpClientJsonExtensions/<<FromJsonAsyncCore>g__Core|12_0>d`2")]
[CompilerGeneratedAttribute]
internal static Task`1<TValue> <FromJsonAsyncCore>g__Core|12_0(HttpClient client, Task`1<HttpResponseMessage> responseTask, bool usingResponseHeadersRead, CancellationTokenSource linkedCTS, Func`4<Stream, TJsonOptions, CancellationToken, ValueTask`1<TValue>> deserializeMethod, TJsonOptions jsonOptions, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.Json.HttpContentJsonExtensions : object {
    internal static string SerializationUnreferencedCodeMessage;
    internal static string SerializationDynamicCodeMessage;
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerable(HttpContent content, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerable(HttpContent content, JsonSerializerOptions options, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerableCore(HttpContent content, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerable(HttpContent content, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsAsyncEnumerableCore>d__4`1")]
private static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerableCore(HttpContent content, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> ReadFromJsonAsync(HttpContent content, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> ReadFromJsonAsync(HttpContent content, Type type, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<T> ReadFromJsonAsync(HttpContent content, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<T> ReadFromJsonAsync(HttpContent content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsyncCore>d__11")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static Task`1<object> ReadFromJsonAsyncCore(HttpContent content, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsyncCore>d__12`1")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static Task`1<T> ReadFromJsonAsyncCore(HttpContent content, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ReadFromJsonAsync(HttpContent content, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ReadFromJsonAsync(HttpContent content, JsonTypeInfo`1<T> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsyncCore>d__15")]
private static Task`1<object> ReadFromJsonAsyncCore(HttpContent content, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsyncCore>d__16`1")]
private static Task`1<T> ReadFromJsonAsyncCore(HttpContent content, JsonTypeInfo`1<T> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<GetContentStreamAsync>d__17")]
internal static ValueTask`1<Stream> GetContentStreamAsync(HttpContent content, CancellationToken cancellationToken);
    private static Task`1<Stream> ReadHttpContentStreamAsync(HttpContent content, CancellationToken cancellationToken);
    private static TranscodingReadStream GetTranscodingStream(Stream contentStream, Encoding sourceEncoding);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Http.Json.JsonContent : HttpContent {
    private JsonTypeInfo _typeInfo;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [NullableAttribute("1")]
public Type ObjectType { get; }
    public object Value { get; }
    private JsonContent(object inputValue, JsonTypeInfo jsonTypeInfo, MediaTypeHeaderValue mediaType);
    [NullableContextAttribute("1")]
public Type get_ObjectType();
    [CompilerGeneratedAttribute]
public object get_Value();
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static JsonContent Create(T inputValue, MediaTypeHeaderValue mediaType, JsonSerializerOptions options);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static JsonContent Create(object inputValue, Type inputType, MediaTypeHeaderValue mediaType, JsonSerializerOptions options);
    public static JsonContent Create(T inputValue, JsonTypeInfo`1<T> jsonTypeInfo, MediaTypeHeaderValue mediaType);
    [NullableContextAttribute("1")]
public static JsonContent Create(object inputValue, JsonTypeInfo jsonTypeInfo, MediaTypeHeaderValue mediaType);
    [NullableContextAttribute("1")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    [AsyncStateMachineAttribute("System.Net.Http.Json.JsonContent/<SerializeToStreamAsyncCore>d__13")]
private Task SerializeToStreamAsyncCore(Stream targetStream, bool async, CancellationToken cancellationToken);
    private static void EnsureTypeCompatibility(object inputValue, Type inputType);
}
internal static class System.Net.Http.Json.JsonHelpers : object {
    internal static JsonSerializerOptions s_defaultSerializerOptions;
    private static JsonHelpers();
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
internal static JsonTypeInfo GetJsonTypeInfo(Type type, JsonSerializerOptions options);
    internal static MediaTypeHeaderValue GetDefaultMediaType();
    internal static Encoding GetEncoding(HttpContent content);
}
internal class System.Net.Http.Json.LengthLimitReadStream : Stream {
    private Stream _innerStream;
    private int _lengthLimit;
    private int _remainingLength;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public LengthLimitReadStream(Stream innerStream, int lengthLimit);
    private void CheckLengthLimit(int read);
    internal static void ThrowExceededBufferLimit(int limit);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    [AsyncStateMachineAttribute("System.Net.Http.Json.LengthLimitReadStream/<ReadAsync>d__12")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class System.Net.Http.Json.TranscodingReadStream : Stream {
    private static int OverflowBufferSize;
    internal static int MaxByteBufferSize;
    private Stream _stream;
    private Decoder _decoder;
    private Encoder _encoder;
    private ArraySegment`1<byte> _byteBuffer;
    private ArraySegment`1<char> _charBuffer;
    private ArraySegment`1<byte> _overflowBuffer;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal int ByteBufferCount { get; }
    internal int CharBufferCount { get; }
    internal int OverflowCount { get; }
    public TranscodingReadStream(Stream input, Encoding sourceEncoding);
    private static TranscodingReadStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    internal int get_ByteBufferCount();
    internal int get_CharBufferCount();
    internal int get_OverflowCount();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.TranscodingReadStream/<ReadAsyncCore>d__29")]
private Task`1<int> ReadAsyncCore(ArraySegment`1<byte> readBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.TranscodingReadStream/<ReadInputChars>d__30")]
private Task`1<int> ReadInputChars(CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
internal class System.Net.Http.Json.TranscodingWriteStream : Stream {
    internal static int MaxCharBufferSize;
    internal static int MaxByteBufferSize;
    private int _maxByteBufferSize;
    private Stream _stream;
    private Decoder _decoder;
    private Encoder _encoder;
    private Char[] _charBuffer;
    private int _charsDecoded;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public TranscodingWriteStream(Stream stream, Encoding targetEncoding);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    [CompilerGeneratedAttribute]
public virtual long get_Position();
    [CompilerGeneratedAttribute]
public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.TranscodingWriteStream/<WriteAsyncCore>d__29")]
private Task WriteAsyncCore(ArraySegment`1<byte> bufferSegment, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.TranscodingWriteStream/<WriteBufferAsync>d__30")]
private Task WriteBufferAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("System.Net.Http.Json.TranscodingWriteStream/<FinalWriteAsync>d__32")]
public Task FinalWriteAsync(CancellationToken cancellationToken);
}
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string CharSetInvalid { get; }
    internal static string CharSetNotSupported { get; }
    internal static string SerializeWrongType { get; }
    internal static string net_http_request_timedout { get; }
    internal static string net_http_content_buffersize_exceeded { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_CharSetInvalid();
    internal static string get_CharSetNotSupported();
    internal static string get_SerializeWrongType();
    internal static string get_net_http_request_timedout();
    internal static string get_net_http_content_buffersize_exceeded();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
