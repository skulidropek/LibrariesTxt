internal static class FxResources.System.Net.Http.Json.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.Json.HttpClientJsonExtensions : object {
    private static Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> s_deleteAsync;
    private static Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> s_getAsync;
    private static HttpClientJsonExtensions();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, string requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, string requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, string requestUri, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> GetFromJsonAsAsyncEnumerable(HttpClient client, Uri requestUri, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static IAsyncEnumerable`1<TValue> FromJsonStreamAsyncCore(HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    private static IAsyncEnumerable`1<TValue> FromJsonStreamAsyncCore(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static Task`1<object> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static Task`1<TValue> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    private static Task`1<object> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    private static Task`1<TValue> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    private static Task`1<TValue> FromJsonAsyncCore(Func`4<HttpClient, Uri, CancellationToken, Task`1<HttpResponseMessage>> getMethod, HttpClient client, Uri requestUri, Func`4<Stream, TJsonOptions, CancellationToken, ValueTask`1<TValue>> deserializeMethod, TJsonOptions jsonOptions, CancellationToken cancellationToken);
    private static Uri CreateUri(string uri);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpClientJsonExtensions/<GetHttpResponseStreamAsync>d__14")]
private static Task`1<Stream> GetHttpResponseStreamAsync(HttpClient client, HttpResponseMessage response, bool usingResponseHeadersRead, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, string requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, Uri requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, string requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, string requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, Uri requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, string requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, string requestUri, Type type, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> DeleteFromJsonAsync(HttpClient client, Uri requestUri, Type type, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, string requestUri, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> DeleteFromJsonAsync(HttpClient client, Uri requestUri, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> GetFromJsonAsync(HttpClient client, string requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> GetFromJsonAsync(HttpClient client, Uri requestUri, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, string requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, Uri requestUri, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> GetFromJsonAsync(HttpClient client, string requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> GetFromJsonAsync(HttpClient client, Uri requestUri, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, string requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> GetFromJsonAsync(HttpClient client, string requestUri, Type type, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> GetFromJsonAsync(HttpClient client, Uri requestUri, Type type, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, string requestUri, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<TValue> GetFromJsonAsync(HttpClient client, Uri requestUri, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, string requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, Uri requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PostAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, string requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, Uri requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PutAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, string requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, Uri requestUri, TValue value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, string requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<HttpResponseMessage> PatchAsJsonAsync(HttpClient client, Uri requestUri, TValue value, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("System.Net.Http.Json.HttpClientJsonExtensions/<<FromJsonStreamAsyncCore>g__Core|7_0>d`1")]
[CompilerGeneratedAttribute]
internal static IAsyncEnumerable`1<TValue> <FromJsonStreamAsyncCore>g__Core|7_0(HttpClient client, Uri requestUri, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpClientJsonExtensions/<<FromJsonAsyncCore>g__Core|12_0>d`2")]
[CompilerGeneratedAttribute]
internal static Task`1<TValue> <FromJsonAsyncCore>g__Core|12_0(HttpClient client, Task`1<HttpResponseMessage> responseTask, bool usingResponseHeadersRead, CancellationTokenSource linkedCTS, Func`4<Stream, TJsonOptions, CancellationToken, ValueTask`1<TValue>> deserializeMethod, TJsonOptions jsonOptions, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Net.Http.Json.HttpContentJsonExtensions : object {
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerable(HttpContent content, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerable(HttpContent content, JsonSerializerOptions options, CancellationToken cancellationToken);
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerableCore(HttpContent content, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerable(HttpContent content, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsAsyncEnumerableCore>d__4`1")]
private static IAsyncEnumerable`1<TValue> ReadFromJsonAsAsyncEnumerableCore(HttpContent content, JsonTypeInfo`1<TValue> jsonTypeInfo, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> ReadFromJsonAsync(HttpContent content, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<object> ReadFromJsonAsync(HttpContent content, Type type, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<T> ReadFromJsonAsync(HttpContent content, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static Task`1<T> ReadFromJsonAsync(HttpContent content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsyncCore>d__11")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static Task`1<object> ReadFromJsonAsyncCore(HttpContent content, Type type, JsonSerializerOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsyncCore>d__12`1")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
private static Task`1<T> ReadFromJsonAsyncCore(HttpContent content, JsonSerializerOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> ReadFromJsonAsync(HttpContent content, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> ReadFromJsonAsync(HttpContent content, JsonTypeInfo`1<T> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsyncCore>d__15")]
private static Task`1<object> ReadFromJsonAsyncCore(HttpContent content, Type type, JsonSerializerContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<ReadFromJsonAsyncCore>d__16`1")]
private static Task`1<T> ReadFromJsonAsyncCore(HttpContent content, JsonTypeInfo`1<T> jsonTypeInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.Http.Json.HttpContentJsonExtensions/<GetContentStreamAsync>d__17")]
internal static ValueTask`1<Stream> GetContentStreamAsync(HttpContent content, CancellationToken cancellationToken);
    private static Task`1<Stream> ReadHttpContentStreamAsync(HttpContent content, CancellationToken cancellationToken);
    private static Stream GetTranscodingStream(Stream contentStream, Encoding sourceEncoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Http.Json.JsonContent : HttpContent {
    private JsonTypeInfo _typeInfo;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public Type ObjectType { get; }
    [NullableAttribute("2")]
public object Value { get; }
    private JsonContent(object inputValue, JsonTypeInfo jsonTypeInfo, MediaTypeHeaderValue mediaType);
    public Type get_ObjectType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static JsonContent Create(T inputValue, MediaTypeHeaderValue mediaType, JsonSerializerOptions options);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
public static JsonContent Create(object inputValue, Type inputType, MediaTypeHeaderValue mediaType, JsonSerializerOptions options);
    [NullableContextAttribute("2")]
public static JsonContent Create(T inputValue, JsonTypeInfo`1<T> jsonTypeInfo, MediaTypeHeaderValue mediaType);
    public static JsonContent Create(object inputValue, JsonTypeInfo jsonTypeInfo, MediaTypeHeaderValue mediaType);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    [AsyncStateMachineAttribute("System.Net.Http.Json.JsonContent/<SerializeToStreamAsyncCore>d__13")]
private Task SerializeToStreamAsyncCore(Stream targetStream, bool async, CancellationToken cancellationToken);
    private static void EnsureTypeCompatibility(object inputValue, Type inputType);
    protected virtual void SerializeToStream(Stream stream, TransportContext context, CancellationToken cancellationToken);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken);
}
internal static class System.Net.Http.Json.JsonHelpers : object {
    internal static JsonSerializerOptions s_defaultSerializerOptions;
    private static JsonHelpers();
    [RequiresUnreferencedCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
[RequiresDynamicCodeAttribute("JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext.")]
internal static JsonTypeInfo GetJsonTypeInfo(Type type, JsonSerializerOptions options);
    internal static MediaTypeHeaderValue GetDefaultMediaType();
    internal static Encoding GetEncoding(HttpContent content);
}
internal class System.Net.Http.Json.LengthLimitReadStream : Stream {
    private Stream _innerStream;
    private int _lengthLimit;
    private int _remainingLength;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public LengthLimitReadStream(Stream innerStream, int lengthLimit);
    private void CheckLengthLimit(int read);
    internal static void ThrowExceededBufferLimit(int limit);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("System.Net.Http.Json.LengthLimitReadStream/<<ReadAsync>g__Core|13_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<int> <ReadAsync>g__Core|13_0(ValueTask`1<int> readTask);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string CharSetInvalid { get; }
    internal static string SerializeWrongType { get; }
    internal static string net_http_request_timedout { get; }
    internal static string net_http_content_buffersize_exceeded { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_CharSetInvalid();
    internal static string get_SerializeWrongType();
    internal static string get_net_http_request_timedout();
    internal static string get_net_http_content_buffersize_exceeded();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
}
