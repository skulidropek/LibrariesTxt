internal static class FxResources.System.Net.WebSockets.WebSocketProtocol.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal class System.Net.WebSockets.ManagedWebSocket : WebSocket {
    private static RandomNumberGenerator s_random;
    private static UTF8Encoding s_textEncoding;
    private static WebSocketState[] s_validSendStates;
    private static WebSocketState[] s_validReceiveStates;
    private static WebSocketState[] s_validCloseOutputStates;
    private static WebSocketState[] s_validCloseStates;
    private static Task`1<WebSocketReceiveResult> s_cachedCloseTask;
    internal static int MaxMessageHeaderLength;
    private static int MaxControlPayloadLength;
    private static int MaskLength;
    private Stream _stream;
    private bool _isServer;
    private string _subprotocol;
    private Timer _keepAliveTimer;
    private CancellationTokenSource _abortSource;
    private Memory`1<byte> _receiveBuffer;
    private Utf8MessageState _utf8TextState;
    private SemaphoreSlim _sendFrameAsyncLock;
    private WebSocketState _state;
    private bool _disposed;
    private bool _sentCloseFrame;
    private bool _receivedCloseFrame;
    private Nullable`1<WebSocketCloseStatus> _closeStatus;
    private string _closeStatusDescription;
    private MessageHeader _lastReceiveHeader;
    private int _receiveBufferOffset;
    private int _receiveBufferCount;
    private int _receivedMaskOffsetOffset;
    private Byte[] _sendBuffer;
    private bool _lastSendWasFragment;
    private Task _lastReceiveAsync;
    private object StateUpdateLock { get; }
    private object ReceiveAsyncLock { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    private ManagedWebSocket(Stream stream, bool isServer, string subprotocol, TimeSpan keepAliveInterval);
    private static ManagedWebSocket();
    public static ManagedWebSocket CreateFromConnectedStream(Stream stream, bool isServer, string subprotocol, TimeSpan keepAliveInterval);
    private object get_StateUpdateLock();
    private object get_ReceiveAsyncLock();
    public virtual void Dispose();
    private void DisposeCore();
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual WebSocketState get_State();
    public virtual string get_SubProtocol();
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    private ValueTask SendPrivateAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<CloseOutputAsyncCore>d__52")]
private Task CloseOutputAsyncCore(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Abort();
    private ValueTask SendFrameAsync(MessageOpcode opcode, bool endOfMessage, ReadOnlyMemory`1<byte> payloadBuffer, CancellationToken cancellationToken);
    private ValueTask SendFrameLockAcquiredNonCancelableAsync(MessageOpcode opcode, bool endOfMessage, ReadOnlyMemory`1<byte> payloadBuffer);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<WaitForWriteTaskAsync>d__56")]
private ValueTask WaitForWriteTaskAsync(ValueTask writeTask);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<SendFrameFallbackAsync>d__57")]
private ValueTask SendFrameFallbackAsync(MessageOpcode opcode, bool endOfMessage, ReadOnlyMemory`1<byte> payloadBuffer, CancellationToken cancellationToken);
    private int WriteFrameToSendBuffer(MessageOpcode opcode, bool endOfMessage, ReadOnlySpan`1<byte> payloadBuffer);
    private void SendKeepAliveFrameAsync();
    private static int WriteHeader(MessageOpcode opcode, Byte[] sendBuffer, ReadOnlySpan`1<byte> payload, bool endOfMessage, bool useMask);
    private static void WriteRandomMask(Byte[] buffer, int offset);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<ReceiveAsyncPrivate>d__62`2")]
private ValueTask`1<TWebSocketReceiveResult> ReceiveAsyncPrivate(Memory`1<byte> payloadBuffer, CancellationToken cancellationToken, TWebSocketReceiveResultGetter resultGetter);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<HandleReceivedCloseAsync>d__63")]
private ValueTask HandleReceivedCloseAsync(MessageHeader header, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<WaitForServerToCloseConnectionAsync>d__64")]
private ValueTask WaitForServerToCloseConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<HandleReceivedPingPongAsync>d__65")]
private ValueTask HandleReceivedPingPongAsync(MessageHeader header, CancellationToken cancellationToken);
    private static bool IsValidCloseStatus(WebSocketCloseStatus closeStatus);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<CloseWithReceiveErrorAndThrowAsync>d__67")]
private ValueTask CloseWithReceiveErrorAndThrowAsync(WebSocketCloseStatus closeStatus, WebSocketError error, string errorMessage, Exception innerException);
    private string TryParseMessageHeaderFromReceiveBuffer(MessageHeader& resultHeader);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<CloseAsyncPrivate>d__69")]
private Task CloseAsyncPrivate(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<SendCloseFrameAsync>d__70")]
private ValueTask SendCloseFrameAsync(WebSocketCloseStatus closeStatus, string closeStatusDescription, CancellationToken cancellationToken);
    private void ConsumeFromBuffer(int count);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ManagedWebSocket/<EnsureBufferContainsAsync>d__72")]
private ValueTask EnsureBufferContainsAsync(int minimumRequiredBytes, CancellationToken cancellationToken, bool throwOnPrematureClosure);
    private void ThrowIfEOFUnexpected(bool throwOnPrematureClosure);
    private void AllocateSendBuffer(int minLength);
    private void ReleaseSendBuffer();
    private static int CombineMaskBytes(Span`1<byte> buffer, int maskOffset);
    private static int ApplyMask(Span`1<byte> toMask, Byte[] mask, int maskOffset, int maskOffsetIndex);
    private static int ApplyMask(Span`1<byte> toMask, int mask, int maskIndex);
    private void ThrowIfOperationInProgress(bool operationCompleted, string methodName);
    private void ThrowOperationInProgress(string methodName);
    private static Exception CreateOperationCanceledException(Exception innerException, CancellationToken cancellationToken);
    private static bool TryValidateUtf8(Span`1<byte> span, bool endOfMessage, Utf8MessageState state);
    private Task ValidateAndReceiveAsync(Task receiveTask, Byte[] buffer, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class System.Net.WebSockets.ManagedWebSocketExtensions : object {
    [ExtensionAttribute]
internal static CancellationTokenRegistration UnsafeRegister(CancellationToken cancellationToken, Action`1<object> callback, object state);
}
public static class System.Net.WebSockets.WebSocketProtocol : object {
    [NullableContextAttribute("1")]
public static WebSocket CreateFromStream(Stream stream, bool isServer, string subProtocol, TimeSpan keepAliveInterval);
}
internal static class System.Net.WebSockets.WebSocketValidate : object {
    internal static int MaxControlFramePayloadLength;
    private static int CloseStatusCodeAbort;
    private static int CloseStatusCodeFailedTLSHandshake;
    private static int InvalidCloseStatusCodesFrom;
    private static int InvalidCloseStatusCodesTo;
    private static string Separators;
    internal static void ThrowIfInvalidState(WebSocketState currentState, bool isDisposed, WebSocketState[] validStates);
    internal static void ValidateSubprotocol(string subProtocol);
    internal static void ValidateCloseStatus(WebSocketCloseStatus closeStatus, string statusDescription);
    internal static void ValidateArraySegment(ArraySegment`1<byte> arraySegment, string parameterName);
    internal static void ValidateBuffer(Byte[] buffer, int offset, int count);
}
internal static class System.Numerics.BitOperations : object {
    public static UInt32 RotateRight(UInt32 value, int offset);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_WebSockets_InvalidEmptySubProtocol { get; }
    internal static string net_WebSockets_InvalidState { get; }
    internal static string net_WebSockets_InvalidCharInProtocolString { get; }
    internal static string net_WebSockets_ReasonNotNull { get; }
    internal static string net_WebSockets_InvalidCloseStatusCode { get; }
    internal static string net_WebSockets_InvalidCloseStatusDescription { get; }
    internal static string net_WebSockets_UnsupportedPlatform { get; }
    internal static string net_WebSockets_Argument_InvalidMessageType { get; }
    internal static string net_Websockets_AlreadyOneOutstandingOperation { get; }
    internal static string NotReadableStream { get; }
    internal static string NotWriteableStream { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_TooSmall { get; }
    internal static string net_Websockets_ReservedBitsSet { get; }
    internal static string net_Websockets_ClientReceivedMaskedFrame { get; }
    internal static string net_Websockets_ContinuationFromFinalFrame { get; }
    internal static string net_Websockets_NonContinuationAfterNonFinalFrame { get; }
    internal static string net_Websockets_InvalidControlMessage { get; }
    internal static string net_Websockets_UnknownOpcode { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_WebSockets_InvalidEmptySubProtocol();
    internal static string get_net_WebSockets_InvalidState();
    internal static string get_net_WebSockets_InvalidCharInProtocolString();
    internal static string get_net_WebSockets_ReasonNotNull();
    internal static string get_net_WebSockets_InvalidCloseStatusCode();
    internal static string get_net_WebSockets_InvalidCloseStatusDescription();
    internal static string get_net_WebSockets_UnsupportedPlatform();
    internal static string get_net_WebSockets_Argument_InvalidMessageType();
    internal static string get_net_Websockets_AlreadyOneOutstandingOperation();
    internal static string get_NotReadableStream();
    internal static string get_NotWriteableStream();
    internal static string get_net_WebSockets_ArgumentOutOfRange_TooSmall();
    internal static string get_net_Websockets_ReservedBitsSet();
    internal static string get_net_Websockets_ClientReceivedMaskedFrame();
    internal static string get_net_Websockets_ContinuationFromFinalFrame();
    internal static string get_net_Websockets_NonContinuationAfterNonFinalFrame();
    internal static string get_net_Websockets_InvalidControlMessage();
    internal static string get_net_Websockets_UnknownOpcode();
}
