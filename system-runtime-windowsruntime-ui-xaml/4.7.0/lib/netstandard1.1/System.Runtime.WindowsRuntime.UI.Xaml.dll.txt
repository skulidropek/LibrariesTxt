internal static class FxResources.System.Runtime.WindowsRuntime.UI.Xaml.SR : object {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string DirectUI_CornerRadius_InvalidMember { get; }
    internal static string DirectUI_InvalidArgument { get; }
    internal static string ElementNotAvailable_Default { get; }
    internal static string ElementNotEnabled_Default { get; }
    internal static string XamlParse_Default { get; }
    internal static string LayoutCycle_Default { get; }
    internal static string PlatformNotSupported_WindowsRuntime { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_DirectUI_CornerRadius_InvalidMember();
    internal static string get_DirectUI_InvalidArgument();
    internal static string get_ElementNotAvailable_Default();
    internal static string get_ElementNotEnabled_Default();
    internal static string get_XamlParse_Default();
    internal static string get_LayoutCycle_Default();
    internal static string get_PlatformNotSupported_WindowsRuntime();
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Automation.ElementNotAvailableException : Exception {
    public ElementNotAvailableException(string message);
    public ElementNotAvailableException(string message, Exception innerException);
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Automation.ElementNotEnabledException : Exception {
    public ElementNotEnabledException(string message);
    public ElementNotEnabledException(string message, Exception innerException);
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Controls.Primitives.GeneratorPosition : ValueType {
    public int Index { get; public set; }
    public int Offset { get; public set; }
    public GeneratorPosition(int index, int offset);
    public int get_Index();
    public void set_Index(int value);
    public int get_Offset();
    public void set_Offset(int value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object o);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(GeneratorPosition gp1, GeneratorPosition gp2);
    public static bool op_Inequality(GeneratorPosition gp1, GeneratorPosition gp2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.CornerRadius : ValueType {
    public double BottomLeft { get; public set; }
    public double BottomRight { get; public set; }
    public double TopLeft { get; public set; }
    public double TopRight { get; public set; }
    public CornerRadius(double uniformRadius);
    public CornerRadius(double topLeft, double topRight, double bottomRight, double bottomLeft);
    public double get_BottomLeft();
    public void set_BottomLeft(double value);
    public double get_BottomRight();
    public void set_BottomRight(double value);
    public double get_TopLeft();
    public void set_TopLeft(double value);
    public double get_TopRight();
    public void set_TopRight(double value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object obj);
    public bool Equals(CornerRadius cornerRadius);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(CornerRadius cr1, CornerRadius cr2);
    public static bool op_Inequality(CornerRadius cr1, CornerRadius cr2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Duration : ValueType {
    public static Duration Automatic { get; }
    public static Duration Forever { get; }
    public bool HasTimeSpan { get; }
    public TimeSpan TimeSpan { get; }
    public Duration(TimeSpan timeSpan);
    public static Duration get_Automatic();
    public static Duration get_Forever();
    public bool get_HasTimeSpan();
    public TimeSpan get_TimeSpan();
    public Duration Add(Duration duration);
    public static int Compare(Duration t1, Duration t2);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object value);
    public bool Equals(Duration duration);
    public static bool Equals(Duration t1, Duration t2);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static Duration op_Addition(Duration t1, Duration t2);
    public static bool op_Equality(Duration t1, Duration t2);
    public static bool op_GreaterThan(Duration t1, Duration t2);
    public static bool op_GreaterThanOrEqual(Duration t1, Duration t2);
    public static Duration op_Implicit(TimeSpan timeSpan);
    public static bool op_Inequality(Duration t1, Duration t2);
    public static bool op_LessThan(Duration t1, Duration t2);
    public static bool op_LessThanOrEqual(Duration t1, Duration t2);
    public static Duration op_Subtraction(Duration t1, Duration t2);
    public static Duration op_UnaryPlus(Duration duration);
    public Duration Subtract(Duration duration);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
}
[SecurityCriticalAttribute]
public enum Windows.UI.Xaml.DurationType : Enum {
    public int value__;
    public static DurationType Automatic;
    public static DurationType TimeSpan;
    public static DurationType Forever;
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.GridLength : ValueType {
    public static GridLength Auto { get; }
    public GridUnitType GridUnitType { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    public double Value { get; }
    public GridLength(double pixels);
    public GridLength(double value, GridUnitType type);
    public static GridLength get_Auto();
    public GridUnitType get_GridUnitType();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public double get_Value();
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object oCompare);
    public bool Equals(GridLength gridLength);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(GridLength gl1, GridLength gl2);
    public static bool op_Inequality(GridLength gl1, GridLength gl2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
}
[SecurityCriticalAttribute]
public enum Windows.UI.Xaml.GridUnitType : Enum {
    public int value__;
    public static GridUnitType Auto;
    public static GridUnitType Pixel;
    public static GridUnitType Star;
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.LayoutCycleException : Exception {
    public LayoutCycleException(string message);
    public LayoutCycleException(string message, Exception innerException);
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Markup.XamlParseException : Exception {
    public XamlParseException(string message);
    public XamlParseException(string message, Exception innerException);
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Media.Animation.KeyTime : ValueType {
    public TimeSpan TimeSpan { get; }
    public TimeSpan get_TimeSpan();
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object value);
    public bool Equals(KeyTime value);
    public static bool Equals(KeyTime keyTime1, KeyTime keyTime2);
    public static KeyTime FromTimeSpan(TimeSpan timeSpan);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(KeyTime keyTime1, KeyTime keyTime2);
    public static KeyTime op_Implicit(TimeSpan timeSpan);
    public static bool op_Inequality(KeyTime keyTime1, KeyTime keyTime2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Media.Animation.RepeatBehavior : ValueType {
    public double Count { get; public set; }
    public TimeSpan Duration { get; public set; }
    public static RepeatBehavior Forever { get; }
    public bool HasCount { get; }
    public bool HasDuration { get; }
    public RepeatBehaviorType Type { get; public set; }
    public RepeatBehavior(double count);
    public RepeatBehavior(TimeSpan duration);
    public double get_Count();
    public void set_Count(double value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public static RepeatBehavior get_Forever();
    public bool get_HasCount();
    public bool get_HasDuration();
    public RepeatBehaviorType get_Type();
    public void set_Type(RepeatBehaviorType value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object value);
    public bool Equals(RepeatBehavior repeatBehavior);
    public static bool Equals(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2);
    public static bool op_Inequality(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2);
    [SecuritySafeCriticalAttribute]
private sealed virtual override string global::System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
}
[SecurityCriticalAttribute]
public enum Windows.UI.Xaml.Media.Animation.RepeatBehaviorType : Enum {
    public int value__;
    public static RepeatBehaviorType Count;
    public static RepeatBehaviorType Duration;
    public static RepeatBehaviorType Forever;
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Media.Matrix : ValueType {
    public static Matrix Identity { get; }
    public bool IsIdentity { get; }
    public double M11 { get; public set; }
    public double M12 { get; public set; }
    public double M21 { get; public set; }
    public double M22 { get; public set; }
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    public Matrix(double m11, double m12, double m21, double m22, double offsetX, double offsetY);
    public static Matrix get_Identity();
    public bool get_IsIdentity();
    public double get_M11();
    public void set_M11(double value);
    public double get_M12();
    public void set_M12(double value);
    public double get_M21();
    public void set_M21(double value);
    public double get_M22();
    public void set_M22(double value);
    public double get_OffsetX();
    public void set_OffsetX(double value);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object o);
    public bool Equals(Matrix value);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(Matrix matrix1, Matrix matrix2);
    public static bool op_Inequality(Matrix matrix1, Matrix matrix2);
    [SecuritySafeCriticalAttribute]
private sealed virtual override string global::System.IFormattable.ToString(string format, IFormatProvider provider);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    public string ToString(IFormatProvider provider);
    public Point Transform(Point point);
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Media.Media3D.Matrix3D : ValueType {
    public bool HasInverse { get; }
    public static Matrix3D Identity { get; }
    public bool IsIdentity { get; }
    public double M11 { get; public set; }
    public double M12 { get; public set; }
    public double M13 { get; public set; }
    public double M14 { get; public set; }
    public double M21 { get; public set; }
    public double M22 { get; public set; }
    public double M23 { get; public set; }
    public double M24 { get; public set; }
    public double M31 { get; public set; }
    public double M32 { get; public set; }
    public double M33 { get; public set; }
    public double M34 { get; public set; }
    public double M44 { get; public set; }
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    public double OffsetZ { get; public set; }
    public Matrix3D(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44);
    public bool get_HasInverse();
    public static Matrix3D get_Identity();
    public bool get_IsIdentity();
    public double get_M11();
    public void set_M11(double value);
    public double get_M12();
    public void set_M12(double value);
    public double get_M13();
    public void set_M13(double value);
    public double get_M14();
    public void set_M14(double value);
    public double get_M21();
    public void set_M21(double value);
    public double get_M22();
    public void set_M22(double value);
    public double get_M23();
    public void set_M23(double value);
    public double get_M24();
    public void set_M24(double value);
    public double get_M31();
    public void set_M31(double value);
    public double get_M32();
    public void set_M32(double value);
    public double get_M33();
    public void set_M33(double value);
    public double get_M34();
    public void set_M34(double value);
    public double get_M44();
    public void set_M44(double value);
    public double get_OffsetX();
    public void set_OffsetX(double value);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    public double get_OffsetZ();
    public void set_OffsetZ(double value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object o);
    public bool Equals(Matrix3D value);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public void Invert();
    public static bool op_Equality(Matrix3D matrix1, Matrix3D matrix2);
    public static bool op_Inequality(Matrix3D matrix1, Matrix3D matrix2);
    public static Matrix3D op_Multiply(Matrix3D matrix1, Matrix3D matrix2);
    [SecuritySafeCriticalAttribute]
private sealed virtual override string global::System.IFormattable.ToString(string format, IFormatProvider provider);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    public string ToString(IFormatProvider provider);
}
[SecurityCriticalAttribute]
public class Windows.UI.Xaml.Thickness : ValueType {
    public double Bottom { get; public set; }
    public double Left { get; public set; }
    public double Right { get; public set; }
    public double Top { get; public set; }
    public Thickness(double uniformLength);
    public Thickness(double left, double top, double right, double bottom);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Top();
    public void set_Top(double value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object obj);
    public bool Equals(Thickness thickness);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(Thickness t1, Thickness t2);
    public static bool op_Inequality(Thickness t1, Thickness t2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
}
