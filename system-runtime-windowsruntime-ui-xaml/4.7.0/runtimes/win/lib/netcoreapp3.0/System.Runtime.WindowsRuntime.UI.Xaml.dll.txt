internal static class FxResources.System.Runtime.WindowsRuntime.UI.Xaml.SR : object {
}
internal static class System.Runtime.InteropServices.HResults : object {
    internal static int E_XAMLPARSEFAILED;
    internal static int E_LAYOUTCYCLE;
    internal static int E_ELEMENTNOTENABLED;
    internal static int E_ELEMENTNOTAVAILABLE;
}
[AttributeUsageAttribute("5148")]
internal class System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeImportAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string DirectUI_CornerRadius_InvalidMember { get; }
    internal static string DirectUI_InvalidArgument { get; }
    internal static string ElementNotAvailable_Default { get; }
    internal static string ElementNotEnabled_Default { get; }
    internal static string XamlParse_Default { get; }
    internal static string LayoutCycle_Default { get; }
    internal static string PlatformNotSupported_WindowsRuntime { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_DirectUI_CornerRadius_InvalidMember();
    internal static string get_DirectUI_InvalidArgument();
    internal static string get_ElementNotAvailable_Default();
    internal static string get_ElementNotEnabled_Default();
    internal static string get_XamlParse_Default();
    internal static string get_LayoutCycle_Default();
    internal static string get_PlatformNotSupported_WindowsRuntime();
}
public class Windows.UI.Xaml.Automation.ElementNotAvailableException : Exception {
    public ElementNotAvailableException(string message);
    public ElementNotAvailableException(string message, Exception innerException);
    protected ElementNotAvailableException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class Windows.UI.Xaml.Automation.ElementNotEnabledException : Exception {
    public ElementNotEnabledException(string message);
    public ElementNotEnabledException(string message, Exception innerException);
}
public class Windows.UI.Xaml.Controls.Primitives.GeneratorPosition : ValueType {
    private int _index;
    private int _offset;
    public int Index { get; public set; }
    public int Offset { get; public set; }
    public GeneratorPosition(int index, int offset);
    public int get_Index();
    public void set_Index(int value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object o);
    public static bool op_Equality(GeneratorPosition gp1, GeneratorPosition gp2);
    public static bool op_Inequality(GeneratorPosition gp1, GeneratorPosition gp2);
}
public class Windows.UI.Xaml.CornerRadius : ValueType {
    private double _TopLeft;
    private double _TopRight;
    private double _BottomRight;
    private double _BottomLeft;
    public double TopLeft { get; public set; }
    public double TopRight { get; public set; }
    public double BottomRight { get; public set; }
    public double BottomLeft { get; public set; }
    public CornerRadius(double uniformRadius);
    public CornerRadius(double topLeft, double topRight, double bottomRight, double bottomLeft);
    private static void Validate(double topLeft, double topRight, double bottomRight, double bottomLeft);
    public virtual string ToString();
    internal string ToString(CultureInfo cultureInfo);
    internal string InternalToString(double l, CultureInfo cultureInfo);
    public virtual bool Equals(object obj);
    public bool Equals(CornerRadius cornerRadius);
    public virtual int GetHashCode();
    public static bool op_Equality(CornerRadius cr1, CornerRadius cr2);
    public static bool op_Inequality(CornerRadius cr1, CornerRadius cr2);
    public double get_TopLeft();
    public void set_TopLeft(double value);
    public double get_TopRight();
    public void set_TopRight(double value);
    public double get_BottomRight();
    public void set_BottomRight(double value);
    public double get_BottomLeft();
    public void set_BottomLeft(double value);
}
public class Windows.UI.Xaml.Duration : ValueType {
    private TimeSpan _timeSpan;
    private DurationType _durationType;
    public bool HasTimeSpan { get; }
    public static Duration Automatic { get; }
    public static Duration Forever { get; }
    public TimeSpan TimeSpan { get; }
    public Duration(TimeSpan timeSpan);
    public static Duration op_Implicit(TimeSpan timeSpan);
    public static Duration op_Addition(Duration t1, Duration t2);
    public static Duration op_Subtraction(Duration t1, Duration t2);
    public static bool op_Equality(Duration t1, Duration t2);
    public static bool op_Inequality(Duration t1, Duration t2);
    public static bool op_GreaterThan(Duration t1, Duration t2);
    public static bool op_GreaterThanOrEqual(Duration t1, Duration t2);
    public static bool op_LessThan(Duration t1, Duration t2);
    public static bool op_LessThanOrEqual(Duration t1, Duration t2);
    public static int Compare(Duration t1, Duration t2);
    public static Duration op_UnaryPlus(Duration duration);
    public bool get_HasTimeSpan();
    public static Duration get_Automatic();
    public static Duration get_Forever();
    public TimeSpan get_TimeSpan();
    public Duration Add(Duration duration);
    public virtual bool Equals(object value);
    public bool Equals(Duration duration);
    public static bool Equals(Duration t1, Duration t2);
    public virtual int GetHashCode();
    public Duration Subtract(Duration duration);
    public virtual string ToString();
}
public enum Windows.UI.Xaml.DurationType : Enum {
    public int value__;
    public static DurationType Automatic;
    public static DurationType TimeSpan;
    public static DurationType Forever;
}
public class Windows.UI.Xaml.GridLength : ValueType {
    private double _unitValue;
    private GridUnitType _unitType;
    private static double Default;
    private static GridLength s_auto;
    public double Value { get; }
    public GridUnitType GridUnitType { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    public static GridLength Auto { get; }
    public GridLength(double pixels);
    public GridLength(double value, GridUnitType type);
    private static GridLength();
    public double get_Value();
    public GridUnitType get_GridUnitType();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public static GridLength get_Auto();
    public static bool op_Equality(GridLength gl1, GridLength gl2);
    public static bool op_Inequality(GridLength gl1, GridLength gl2);
    public virtual bool Equals(object oCompare);
    public bool Equals(GridLength gridLength);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal string ToString(CultureInfo cultureInfo);
}
public enum Windows.UI.Xaml.GridUnitType : Enum {
    public int value__;
    public static GridUnitType Auto;
    public static GridUnitType Pixel;
    public static GridUnitType Star;
}
public class Windows.UI.Xaml.LayoutCycleException : Exception {
    public LayoutCycleException(string message);
    public LayoutCycleException(string message, Exception innerException);
    protected LayoutCycleException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class Windows.UI.Xaml.Markup.XamlParseException : Exception {
    public XamlParseException(string message);
    public XamlParseException(string message, Exception innerException);
}
public class Windows.UI.Xaml.Media.Animation.KeyTime : ValueType {
    private TimeSpan _timeSpan;
    public TimeSpan TimeSpan { get; }
    public static KeyTime FromTimeSpan(TimeSpan timeSpan);
    public static bool Equals(KeyTime keyTime1, KeyTime keyTime2);
    public static bool op_Equality(KeyTime keyTime1, KeyTime keyTime2);
    public static bool op_Inequality(KeyTime keyTime1, KeyTime keyTime2);
    public bool Equals(KeyTime value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static KeyTime op_Implicit(TimeSpan timeSpan);
    public TimeSpan get_TimeSpan();
}
public class Windows.UI.Xaml.Media.Animation.RepeatBehavior : ValueType {
    private double _Count;
    private TimeSpan _Duration;
    private RepeatBehaviorType _Type;
    public static RepeatBehavior Forever { get; }
    public bool HasCount { get; }
    public bool HasDuration { get; }
    public double Count { get; public set; }
    public TimeSpan Duration { get; public set; }
    public RepeatBehaviorType Type { get; public set; }
    public RepeatBehavior(double count);
    public RepeatBehavior(TimeSpan duration);
    public static RepeatBehavior get_Forever();
    public bool get_HasCount();
    public bool get_HasDuration();
    public double get_Count();
    public void set_Count(double value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public RepeatBehaviorType get_Type();
    public void set_Type(RepeatBehaviorType value);
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    internal string InternalToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object value);
    public bool Equals(RepeatBehavior repeatBehavior);
    public static bool Equals(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2);
    public virtual int GetHashCode();
    public static bool op_Equality(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2);
    public static bool op_Inequality(RepeatBehavior repeatBehavior1, RepeatBehavior repeatBehavior2);
}
public enum Windows.UI.Xaml.Media.Animation.RepeatBehaviorType : Enum {
    public int value__;
    public static RepeatBehaviorType Count;
    public static RepeatBehaviorType Duration;
    public static RepeatBehaviorType Forever;
}
public class Windows.UI.Xaml.Media.Matrix : ValueType {
    private static Matrix s_identity;
    private double _m11;
    private double _m12;
    private double _m21;
    private double _m22;
    private double _offsetX;
    private double _offsetY;
    public double M11 { get; public set; }
    public double M12 { get; public set; }
    public double M21 { get; public set; }
    public double M22 { get; public set; }
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    public static Matrix Identity { get; }
    public bool IsIdentity { get; }
    public Matrix(double m11, double m12, double m21, double m22, double offsetX, double offsetY);
    private static Matrix();
    public double get_M11();
    public void set_M11(double value);
    public double get_M12();
    public void set_M12(double value);
    public double get_M21();
    public void set_M21(double value);
    public double get_M22();
    public void set_M22(double value);
    public double get_OffsetX();
    public void set_OffsetX(double value);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    public static Matrix get_Identity();
    public bool get_IsIdentity();
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider provider);
    private string ConvertToString(string format, IFormatProvider provider);
    public Point Transform(Point point);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public bool Equals(Matrix value);
    public static bool op_Equality(Matrix matrix1, Matrix matrix2);
    public static bool op_Inequality(Matrix matrix1, Matrix matrix2);
    private static Matrix CreateIdentity();
    private void SetMatrix(double m11, double m12, double m21, double m22, double offsetX, double offsetY);
    private void MultiplyPoint(Single& x, Single& y);
    private static bool Equals(Matrix matrix1, Matrix matrix2);
}
public class Windows.UI.Xaml.Media.Media3D.Matrix3D : ValueType {
    private static Matrix3D s_identity;
    private static double DBL_EPSILON_RELATIVE_1;
    private double _m11;
    private double _m12;
    private double _m13;
    private double _m14;
    private double _m21;
    private double _m22;
    private double _m23;
    private double _m24;
    private double _m31;
    private double _m32;
    private double _m33;
    private double _m34;
    private double _offsetX;
    private double _offsetY;
    private double _offsetZ;
    private double _m44;
    public double M11 { get; public set; }
    public double M12 { get; public set; }
    public double M13 { get; public set; }
    public double M14 { get; public set; }
    public double M21 { get; public set; }
    public double M22 { get; public set; }
    public double M23 { get; public set; }
    public double M24 { get; public set; }
    public double M31 { get; public set; }
    public double M32 { get; public set; }
    public double M33 { get; public set; }
    public double M34 { get; public set; }
    public double OffsetX { get; public set; }
    public double OffsetY { get; public set; }
    public double OffsetZ { get; public set; }
    public double M44 { get; public set; }
    public static Matrix3D Identity { get; }
    public bool IsIdentity { get; }
    public bool HasInverse { get; }
    private bool IsAffine { get; }
    private double Determinant { get; }
    public Matrix3D(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44);
    private static Matrix3D();
    private bool NormalizedAffineInvert();
    private bool InvertCore();
    public double get_M11();
    public void set_M11(double value);
    public double get_M12();
    public void set_M12(double value);
    public double get_M13();
    public void set_M13(double value);
    public double get_M14();
    public void set_M14(double value);
    public double get_M21();
    public void set_M21(double value);
    public double get_M22();
    public void set_M22(double value);
    public double get_M23();
    public void set_M23(double value);
    public double get_M24();
    public void set_M24(double value);
    public double get_M31();
    public void set_M31(double value);
    public double get_M32();
    public void set_M32(double value);
    public double get_M33();
    public void set_M33(double value);
    public double get_M34();
    public void set_M34(double value);
    public double get_OffsetX();
    public void set_OffsetX(double value);
    public double get_OffsetY();
    public void set_OffsetY(double value);
    public double get_OffsetZ();
    public void set_OffsetZ(double value);
    public double get_M44();
    public void set_M44(double value);
    public static Matrix3D get_Identity();
    public bool get_IsIdentity();
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider provider);
    private string ConvertToString(string format, IFormatProvider provider);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public bool Equals(Matrix3D value);
    public static bool op_Equality(Matrix3D matrix1, Matrix3D matrix2);
    public static bool op_Inequality(Matrix3D matrix1, Matrix3D matrix2);
    public static Matrix3D op_Multiply(Matrix3D matrix1, Matrix3D matrix2);
    public bool get_HasInverse();
    public void Invert();
    private static Matrix3D CreateIdentity();
    private void SetMatrix(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44);
    private static bool Equals(Matrix3D matrix1, Matrix3D matrix2);
    private double GetNormalizedAffineDeterminant();
    private bool get_IsAffine();
    private double get_Determinant();
    private static bool IsZero(double value);
}
public class Windows.UI.Xaml.Thickness : ValueType {
    private double _Left;
    private double _Top;
    private double _Right;
    private double _Bottom;
    public double Left { get; public set; }
    public double Top { get; public set; }
    public double Right { get; public set; }
    public double Bottom { get; public set; }
    public Thickness(double uniformLength);
    public Thickness(double left, double top, double right, double bottom);
    public double get_Left();
    public void set_Left(double value);
    public double get_Top();
    public void set_Top(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public virtual string ToString();
    internal string ToString(CultureInfo cultureInfo);
    internal string InternalToString(double l, CultureInfo cultureInfo);
    public virtual bool Equals(object obj);
    public bool Equals(Thickness thickness);
    public virtual int GetHashCode();
    public static bool op_Equality(Thickness t1, Thickness t2);
    public static bool op_Inequality(Thickness t1, Thickness t2);
}
internal static class Windows.UI.Xaml.TokenizerHelper : object {
    internal static char GetNumericListSeparator(IFormatProvider provider);
}
