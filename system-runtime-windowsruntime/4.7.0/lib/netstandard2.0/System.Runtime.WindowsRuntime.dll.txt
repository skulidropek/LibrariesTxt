internal static class FxResources.System.Runtime.WindowsRuntime.SR : object {
}
[ExtensionAttribute]
public static class System.IO.WindowsRuntimeStorageExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static SafeFileHandle CreateSafeFileHandle(IStorageFile windowsRuntimeFile, FileAccess access, FileShare share, FileOptions options);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static SafeFileHandle CreateSafeFileHandle(IStorageFolder rootDirectory, string relativePath, FileMode mode);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static SafeFileHandle CreateSafeFileHandle(IStorageFolder rootDirectory, string relativePath, FileMode mode, FileAccess access, FileShare share, FileOptions options);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Task`1<Stream> OpenStreamForReadAsync(IStorageFile windowsRuntimeFile);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Task`1<Stream> OpenStreamForReadAsync(IStorageFolder rootDirectory, string relativePath);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Task`1<Stream> OpenStreamForWriteAsync(IStorageFile windowsRuntimeFile);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Task`1<Stream> OpenStreamForWriteAsync(IStorageFolder rootDirectory, string relativePath, CreationCollisionOption creationCollisionOption);
}
[ExtensionAttribute]
public static class System.IO.WindowsRuntimeStreamExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IInputStream AsInputStream(Stream stream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IOutputStream AsOutputStream(Stream stream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IRandomAccessStream AsRandomAccessStream(Stream stream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStream(IRandomAccessStream windowsRuntimeStream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStream(IRandomAccessStream windowsRuntimeStream, int bufferSize);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStreamForRead(IInputStream windowsRuntimeStream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStreamForRead(IInputStream windowsRuntimeStream, int bufferSize);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStreamForWrite(IOutputStream windowsRuntimeStream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStreamForWrite(IOutputStream windowsRuntimeStream, int bufferSize);
}
[CLSCompliantAttribute("False")]
public static class System.Runtime.InteropServices.WindowsRuntime.AsyncInfo : object {
    public static IAsyncAction Run(Func`2<CancellationToken, Task> taskProvider);
    public static IAsyncActionWithProgress`1<TProgress> Run(Func`3<CancellationToken, IProgress`1<TProgress>, Task> taskProvider);
    public static IAsyncOperation`1<TResult> Run(Func`2<CancellationToken, Task`1<TResult>> taskProvider);
    public static IAsyncOperationWithProgress`2<TResult, TProgress> Run(Func`3<CancellationToken, IProgress`1<TProgress>, Task`1<TResult>> taskProvider);
}
public class System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBuffer : object {
    [CLSCompliantAttribute("False")]
public static IBuffer Create(Byte[] data, int offset, int length, int capacity);
    [CLSCompliantAttribute("False")]
public static IBuffer Create(int capacity);
}
[ExtensionAttribute]
public static class System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IBuffer AsBuffer(Byte[] source);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IBuffer AsBuffer(Byte[] source, int offset, int length);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IBuffer AsBuffer(Byte[] source, int offset, int length, int capacity);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStream(IBuffer source);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(Byte[] source, int sourceIndex, IBuffer destination, UInt32 destinationIndex, int count);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(Byte[] source, IBuffer destination);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(IBuffer source, Byte[] destination);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(IBuffer source, UInt32 sourceIndex, Byte[] destination, int destinationIndex, int count);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(IBuffer source, UInt32 sourceIndex, IBuffer destination, UInt32 destinationIndex, UInt32 count);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(IBuffer source, IBuffer destination);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static byte GetByte(IBuffer source, UInt32 byteOffset);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IBuffer GetWindowsRuntimeBuffer(MemoryStream underlyingStream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IBuffer GetWindowsRuntimeBuffer(MemoryStream underlyingStream, int positionInStream, int length);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static bool IsSameData(IBuffer buffer, IBuffer otherBuffer);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Byte[] ToArray(IBuffer source);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Byte[] ToArray(IBuffer source, UInt32 sourceIndex, int count);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_BufferIndexExceedsCapacity { get; }
    internal static string Argument_BufferLengthExceedsCapacity { get; }
    internal static string Argument_IndexOutOfArrayBounds { get; }
    internal static string Argument_InstancesImplementingIRASThatCanReadMustImplementIIS { get; }
    internal static string Argument_InstancesImplementingIRASThatCanWriteMustImplementIOS { get; }
    internal static string Argument_InsufficientArrayElementsAfterOffset { get; }
    internal static string Argument_InsufficientBufferCapacity { get; }
    internal static string Argument_InsufficientSpaceInSourceBuffer { get; }
    internal static string Argument_InsufficientSpaceInTargetBuffer { get; }
    internal static string Argument_NotSufficientCapabilitiesToConvertToWinRtStream { get; }
    internal static string Argument_ObjectMustBeWinRtStreamToConvertToNetFxStream { get; }
    internal static string Argument_RelativePathMayNotBeWhitespaceOnly { get; }
    internal static string Argument_StreamPositionBeyondEOS { get; }
    internal static string Argument_UnexpectedAsyncResult { get; }
    internal static string Argument_WinRtStreamCannotReadOrWrite { get; }
    internal static string ArgumentOutOfRange_CannotResizeStreamToNegative { get; }
    internal static string ArgumentOutOfRange_IO_CannotSeekToNegativePosition { get; }
    internal static string ArgumentOutOfRange_InvalidInputStreamOptionsEnumValue { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_WinRtAdapterBufferSizeMayNotBeNegative { get; }
    internal static string InvalidOperation_CannotCallThisMethodInCurrentState { get; }
    internal static string InvalidOperation_CannotChangeBufferSizeOfWinRtStreamAdapter { get; }
    internal static string InvalidOperation_CannotChangeBufferSizeOfWinRtStreamAdapterToZero { get; }
    internal static string InvalidOperation_CannotGetResultsFromIncompleteOperation { get; }
    internal static string InvalidOperation_CannotSetCompletionHanlderMoreThanOnce { get; }
    internal static string InvalidOperation_CannotSetStreamSizeCannotWrite { get; }
    internal static string InvalidOperation_IllegalStateChange { get; }
    internal static string InvalidOperation_InvalidAsyncCompletion { get; }
    internal static string InvalidOperation_MultipleIOCompletionCallbackInvocation { get; }
    internal static string InvalidOperation_TaskProviderReturnedUnstartedTask { get; }
    internal static string InvalidOperation_UnexpectedAsyncOperationID { get; }
    internal static string InvalidOperation_UnstartedTaskSpecified { get; }
    internal static string IO_CannotSeekBeyondInt64MaxValue { get; }
    internal static string IO_CannotSetSizeBeyondInt64MaxValue { get; }
    internal static string IO_General { get; }
    internal static string IO_UnderlyingWinRTStreamTooLong_CannotUseLengthOrPosition { get; }
    internal static string NotImplemented_NativeRoutineNotFound { get; }
    internal static string NotSupported_CannotConvertNotReadableToInputStream { get; }
    internal static string NotSupported_CannotConvertNotSeekableToRandomAccessStream { get; }
    internal static string NotSupported_CannotConvertNotWritableToOutputStream { get; }
    internal static string NotSupported_CannotReadFromStream { get; }
    internal static string NotSupported_CannotSeekInStream { get; }
    internal static string NotSupported_CannotUseLength_StreamNotSeekable { get; }
    internal static string NotSupported_CannotUsePosition_StreamNotSeekable { get; }
    internal static string NotSupported_CannotWriteToStream { get; }
    internal static string NotSupported_CloningNotSupported { get; }
    internal static string NullReference_IOCompletionCallbackCannotProcessNullAsyncInfo { get; }
    internal static string NullReference_TaskProviderReturnedNull { get; }
    internal static string ObjectDisposed_AsyncInfoIsClosed { get; }
    internal static string ObjectDisposed_CannotPerformOperation { get; }
    internal static string WinRtCOM_Error { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string Argument_InvalidSeekOrigin { get; }
    internal static string DirectUI_Empty { get; }
    internal static string InvalidOperation_SendNotSupportedOnWindowsRTSynchronizationContext { get; }
    internal static string UnauthorizedAccess_InternalBuffer { get; }
    internal static string NotSupported_Inheritable { get; }
    internal static string NotSupported_Encrypted { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string PlatformNotSupported_WindowsRuntime { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_BufferIndexExceedsCapacity();
    internal static string get_Argument_BufferLengthExceedsCapacity();
    internal static string get_Argument_IndexOutOfArrayBounds();
    internal static string get_Argument_InstancesImplementingIRASThatCanReadMustImplementIIS();
    internal static string get_Argument_InstancesImplementingIRASThatCanWriteMustImplementIOS();
    internal static string get_Argument_InsufficientArrayElementsAfterOffset();
    internal static string get_Argument_InsufficientBufferCapacity();
    internal static string get_Argument_InsufficientSpaceInSourceBuffer();
    internal static string get_Argument_InsufficientSpaceInTargetBuffer();
    internal static string get_Argument_NotSufficientCapabilitiesToConvertToWinRtStream();
    internal static string get_Argument_ObjectMustBeWinRtStreamToConvertToNetFxStream();
    internal static string get_Argument_RelativePathMayNotBeWhitespaceOnly();
    internal static string get_Argument_StreamPositionBeyondEOS();
    internal static string get_Argument_UnexpectedAsyncResult();
    internal static string get_Argument_WinRtStreamCannotReadOrWrite();
    internal static string get_ArgumentOutOfRange_CannotResizeStreamToNegative();
    internal static string get_ArgumentOutOfRange_IO_CannotSeekToNegativePosition();
    internal static string get_ArgumentOutOfRange_InvalidInputStreamOptionsEnumValue();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_WinRtAdapterBufferSizeMayNotBeNegative();
    internal static string get_InvalidOperation_CannotCallThisMethodInCurrentState();
    internal static string get_InvalidOperation_CannotChangeBufferSizeOfWinRtStreamAdapter();
    internal static string get_InvalidOperation_CannotChangeBufferSizeOfWinRtStreamAdapterToZero();
    internal static string get_InvalidOperation_CannotGetResultsFromIncompleteOperation();
    internal static string get_InvalidOperation_CannotSetCompletionHanlderMoreThanOnce();
    internal static string get_InvalidOperation_CannotSetStreamSizeCannotWrite();
    internal static string get_InvalidOperation_IllegalStateChange();
    internal static string get_InvalidOperation_InvalidAsyncCompletion();
    internal static string get_InvalidOperation_MultipleIOCompletionCallbackInvocation();
    internal static string get_InvalidOperation_TaskProviderReturnedUnstartedTask();
    internal static string get_InvalidOperation_UnexpectedAsyncOperationID();
    internal static string get_InvalidOperation_UnstartedTaskSpecified();
    internal static string get_IO_CannotSeekBeyondInt64MaxValue();
    internal static string get_IO_CannotSetSizeBeyondInt64MaxValue();
    internal static string get_IO_General();
    internal static string get_IO_UnderlyingWinRTStreamTooLong_CannotUseLengthOrPosition();
    internal static string get_NotImplemented_NativeRoutineNotFound();
    internal static string get_NotSupported_CannotConvertNotReadableToInputStream();
    internal static string get_NotSupported_CannotConvertNotSeekableToRandomAccessStream();
    internal static string get_NotSupported_CannotConvertNotWritableToOutputStream();
    internal static string get_NotSupported_CannotReadFromStream();
    internal static string get_NotSupported_CannotSeekInStream();
    internal static string get_NotSupported_CannotUseLength_StreamNotSeekable();
    internal static string get_NotSupported_CannotUsePosition_StreamNotSeekable();
    internal static string get_NotSupported_CannotWriteToStream();
    internal static string get_NotSupported_CloningNotSupported();
    internal static string get_NullReference_IOCompletionCallbackCannotProcessNullAsyncInfo();
    internal static string get_NullReference_TaskProviderReturnedNull();
    internal static string get_ObjectDisposed_AsyncInfoIsClosed();
    internal static string get_ObjectDisposed_CannotPerformOperation();
    internal static string get_WinRtCOM_Error();
    internal static string get_ObjectDisposed_StreamClosed();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_Argument_InvalidSeekOrigin();
    internal static string get_DirectUI_Empty();
    internal static string get_InvalidOperation_SendNotSupportedOnWindowsRTSynchronizationContext();
    internal static string get_UnauthorizedAccess_InternalBuffer();
    internal static string get_NotSupported_Inheritable();
    internal static string get_NotSupported_Encrypted();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_PlatformNotSupported_WindowsRuntime();
}
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class System.WindowsRuntimeSystemExtensions : object {
    [ExtensionAttribute]
public static IAsyncAction AsAsyncAction(Task source);
    [ExtensionAttribute]
public static IAsyncOperation`1<TResult> AsAsyncOperation(Task`1<TResult> source);
    [ExtensionAttribute]
public static Task AsTask(IAsyncAction source);
    [ExtensionAttribute]
public static Task AsTask(IAsyncAction source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AsTask(IAsyncActionWithProgress`1<TProgress> source);
    [ExtensionAttribute]
public static Task AsTask(IAsyncActionWithProgress`1<TProgress> source, IProgress`1<TProgress> progress);
    [ExtensionAttribute]
public static Task AsTask(IAsyncActionWithProgress`1<TProgress> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AsTask(IAsyncActionWithProgress`1<TProgress> source, CancellationToken cancellationToken, IProgress`1<TProgress> progress);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperation`1<TResult> source);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperation`1<TResult> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperationWithProgress`2<TResult, TProgress> source);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperationWithProgress`2<TResult, TProgress> source, IProgress`1<TProgress> progress);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperationWithProgress`2<TResult, TProgress> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperationWithProgress`2<TResult, TProgress> source, CancellationToken cancellationToken, IProgress`1<TProgress> progress);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static TaskAwaiter GetAwaiter(IAsyncAction source);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static TaskAwaiter GetAwaiter(IAsyncActionWithProgress`1<TProgress> source);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static TaskAwaiter`1<TResult> GetAwaiter(IAsyncOperation`1<TResult> source);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static TaskAwaiter`1<TResult> GetAwaiter(IAsyncOperationWithProgress`2<TResult, TProgress> source);
}
public class Windows.Foundation.Point : ValueType {
    private int _dummyPrimitive;
    public double X { get; public set; }
    public double Y { get; public set; }
    public Point(double x, double y);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public virtual bool Equals(object o);
    public bool Equals(Point value);
    public virtual int GetHashCode();
    public static bool op_Equality(Point point1, Point point2);
    public static bool op_Inequality(Point point1, Point point2);
    private sealed virtual override string global::System.IFormattable.ToString(string format, IFormatProvider provider);
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
}
public class Windows.Foundation.Rect : ValueType {
    private int _dummyPrimitive;
    public double Bottom { get; }
    public static Rect Empty { get; }
    public double Height { get; public set; }
    public bool IsEmpty { get; }
    public double Left { get; }
    public double Right { get; }
    public double Top { get; }
    public double Width { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public Rect(double x, double y, double width, double height);
    public Rect(Point point1, Point point2);
    public Rect(Point location, Size size);
    public double get_Bottom();
    public static Rect get_Empty();
    public double get_Height();
    public void set_Height(double value);
    public bool get_IsEmpty();
    public double get_Left();
    public double get_Right();
    public double get_Top();
    public double get_Width();
    public void set_Width(double value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public bool Contains(Point point);
    public virtual bool Equals(object o);
    public bool Equals(Rect value);
    public virtual int GetHashCode();
    public void Intersect(Rect rect);
    public static bool op_Equality(Rect rect1, Rect rect2);
    public static bool op_Inequality(Rect rect1, Rect rect2);
    private sealed virtual override string global::System.IFormattable.ToString(string format, IFormatProvider provider);
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    public void Union(Point point);
    public void Union(Rect rect);
}
public class Windows.Foundation.Size : ValueType {
    private int _dummyPrimitive;
    public static Size Empty { get; }
    public double Height { get; public set; }
    public bool IsEmpty { get; }
    public double Width { get; public set; }
    public Size(double width, double height);
    public static Size get_Empty();
    public double get_Height();
    public void set_Height(double value);
    public bool get_IsEmpty();
    public double get_Width();
    public void set_Width(double value);
    public virtual bool Equals(object o);
    public bool Equals(Size value);
    public virtual int GetHashCode();
    public static bool op_Equality(Size size1, Size size2);
    public static bool op_Inequality(Size size1, Size size2);
    public virtual string ToString();
}
public class Windows.UI.Color : ValueType {
    private int _dummyPrimitive;
    public byte A { get; public set; }
    public byte B { get; public set; }
    public byte G { get; public set; }
    public byte R { get; public set; }
    public byte get_A();
    public void set_A(byte value);
    public byte get_B();
    public void set_B(byte value);
    public byte get_G();
    public void set_G(byte value);
    public byte get_R();
    public void set_R(byte value);
    public virtual bool Equals(object o);
    public bool Equals(Color color);
    public static Color FromArgb(byte a, byte r, byte g, byte b);
    public virtual int GetHashCode();
    public static bool op_Equality(Color color1, Color color2);
    public static bool op_Inequality(Color color1, Color color2);
    private sealed virtual override string global::System.IFormattable.ToString(string format, IFormatProvider provider);
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
}
