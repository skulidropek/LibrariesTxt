internal static class FxResources.System.ServiceModel.Federation.SR : object {
}
public class System.IdentityModel.Tokens.Saml2AssertionKeyIdentifierClause : SecurityKeyIdentifierClause {
    public Saml2AssertionKeyIdentifierClause(string assertionId);
    public static bool Matches(string assertionId, SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual bool Matches(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual string ToString();
}
public class System.IdentityModel.Tokens.SamlAssertionKeyIdentifierClause : SecurityKeyIdentifierClause {
    public SamlAssertionKeyIdentifierClause(string assertionId);
    public static bool Matches(string assertionId, SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual bool Matches(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual string ToString();
}
[ServiceContractAttribute]
public interface System.ServiceModel.Federation.IWSTrustChannelContract {
    [OperationContractAttribute]
public abstract virtual Task`1<SecurityToken> IssueAsync(WsTrustRequest request);
}
internal class System.ServiceModel.Federation.LogHelper : object {
    internal static string FormatInvariant(string format, Object[] args);
}
internal class System.ServiceModel.Federation.WSFederationBindingElement : BindingElement {
    [CompilerGeneratedAttribute]
private WSTrustTokenParameters <WSTrustTokenParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityBindingElement <SecurityBindingElement>k__BackingField;
    public WSTrustTokenParameters WSTrustTokenParameters { get; }
    public SecurityBindingElement SecurityBindingElement { get; }
    public WSFederationBindingElement(WSTrustTokenParameters wsTrustTokenParameters, SecurityBindingElement securityBindingElement);
    [CompilerGeneratedAttribute]
public WSTrustTokenParameters get_WSTrustTokenParameters();
    [CompilerGeneratedAttribute]
public SecurityBindingElement get_SecurityBindingElement();
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    private T Find(BindingParameterCollection bindingParameterCollection);
}
public class System.ServiceModel.Federation.WSFederationHttpBinding : WSHttpBinding {
    [CompilerGeneratedAttribute]
private WSTrustTokenParameters <WSTrustTokenParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityBindingElement <SecurityBindingElement>k__BackingField;
    public WSTrustTokenParameters WSTrustTokenParameters { get; }
    private SecurityBindingElement SecurityBindingElement { get; private set; }
    public WSFederationHttpBinding(WSTrustTokenParameters wsTrustTokenParameters);
    [CompilerGeneratedAttribute]
public WSTrustTokenParameters get_WSTrustTokenParameters();
    [CompilerGeneratedAttribute]
private SecurityBindingElement get_SecurityBindingElement();
    [CompilerGeneratedAttribute]
private void set_SecurityBindingElement(SecurityBindingElement value);
    protected virtual SecurityBindingElement CreateMessageSecurity();
    public virtual BindingElementCollection CreateBindingElements();
}
public class System.ServiceModel.Federation.WSTrustChannel : object {
    private static int FaultMaxBufferSize;
    private WsSerializationContext _wsSerializationContextTrustFeb2005;
    private WsSerializationContext _wsSerializationContextTrust1_3;
    private WsSerializationContext _wsSerializationContextTrust1_4;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestChannel <RequestChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageVersion <MessageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private WsTrustSerializer <TrustSerializer>k__BackingField;
    private string Address { get; }
    private IRequestChannel RequestChannel { get; }
    private MessageVersion MessageVersion { get; }
    private WsTrustSerializer TrustSerializer { get; }
    private CommunicationState System.ServiceModel.ICommunicationObject.State { get; }
    public WSTrustChannel(IRequestChannel requestChannel);
    [CompilerGeneratedAttribute]
private string get_Address();
    [CompilerGeneratedAttribute]
private IRequestChannel get_RequestChannel();
    [CompilerGeneratedAttribute]
private MessageVersion get_MessageVersion();
    [CompilerGeneratedAttribute]
private WsTrustSerializer get_TrustSerializer();
    protected virtual Message CreateRequest(WsTrustRequest trustRequest);
    public static string GetRequestAction(WsTrustRequest trustRequest);
    private WsSerializationContext GetSerializationContext(WsTrustRequest trustRequest);
    public sealed virtual T GetProperty();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opening(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opening(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Abort();
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close(TimeSpan timeout);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndClose(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndOpen(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open(TimeSpan timeout);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open();
    private sealed virtual override CommunicationState System.ServiceModel.ICommunicationObject.get_State();
    [AsyncStateMachineAttribute("System.ServiceModel.Federation.WSTrustChannel/<IssueAsync>d__49")]
public virtual Task`1<SecurityToken> IssueAsync(WsTrustRequest trustRequest);
}
public class System.ServiceModel.Federation.WSTrustChannelClientCredentials : ClientCredentials {
    [CompilerGeneratedAttribute]
private ClientCredentials <ClientCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityTokenManager <SecurityTokenManager>k__BackingField;
    public ClientCredentials ClientCredentials { get; private set; }
    internal SecurityTokenManager SecurityTokenManager { get; private set; }
    protected WSTrustChannelClientCredentials(WSTrustChannelClientCredentials other);
    public WSTrustChannelClientCredentials(ClientCredentials clientCredentials);
    [CompilerGeneratedAttribute]
public ClientCredentials get_ClientCredentials();
    [CompilerGeneratedAttribute]
private void set_ClientCredentials(ClientCredentials value);
    protected virtual ClientCredentials CloneCore();
    public virtual SecurityTokenManager CreateSecurityTokenManager();
    [CompilerGeneratedAttribute]
internal SecurityTokenManager get_SecurityTokenManager();
    [CompilerGeneratedAttribute]
private void set_SecurityTokenManager(SecurityTokenManager value);
}
public class System.ServiceModel.Federation.WSTrustChannelFactory : ChannelFactory`1<IWSTrustChannelContract> {
    [CompilerGeneratedAttribute]
private EndpointAddress <EndpointAddress>k__BackingField;
    private EndpointAddress EndpointAddress { get; }
    public WSTrustChannelFactory(ServiceEndpoint serviceEndpoint);
    public WSTrustChannelFactory(Binding binding, EndpointAddress endpointAddress);
    public virtual IWSTrustChannelContract CreateChannel(EndpointAddress endpointAddress, Uri via);
    public IWSTrustChannelContract CreateTrustChannel();
    [CompilerGeneratedAttribute]
private EndpointAddress get_EndpointAddress();
}
public class System.ServiceModel.Federation.WSTrustChannelSecurityTokenManager : ClientCredentialsSecurityTokenManager {
    private static string Namespace;
    private static string IssuedSecurityTokenParametersProperty;
    private WSTrustChannelClientCredentials _wsTrustChannelClientCredentials;
    public WSTrustChannelSecurityTokenManager(WSTrustChannelClientCredentials wsTrustChannelClientCredentials);
    public virtual SecurityTokenProvider CreateSecurityTokenProvider(SecurityTokenRequirement tokenRequirement);
}
public class System.ServiceModel.Federation.WSTrustChannelSecurityTokenProvider : SecurityTokenProvider {
    private static int DefaultPublicKeySize;
    private static string Namespace;
    private static string IssuedSecurityTokenParametersProperty;
    private static string SecurityAlgorithmSuiteProperty;
    private static string SecurityBindingElementProperty;
    private static string TargetAddressProperty;
    private SecurityKeyEntropyMode _keyEntropyMode;
    private SecurityAlgorithmSuite _securityAlgorithmSuite;
    private WsSerializationContext _requestSerializationContext;
    private WrapperSecurityCommunicationObject _communicationObject;
    private EventTraceActivity _eventTraceActivity;
    [CompilerGeneratedAttribute]
private WsTrustResponse <CachedResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelFactory`1<IRequestChannel> <ChannelFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCredentials <ClientCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageSecurityVersion <MessageSecurityVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityTokenRequirement <SecurityTokenRequirement>k__BackingField;
    [CompilerGeneratedAttribute]
private WSTrustTokenParameters <WSTrustTokenParameters>k__BackingField;
    private WsTrustResponse CachedResponse { get; private set; }
    internal ChannelFactory`1<IRequestChannel> ChannelFactory { get; internal set; }
    protected internal ClientCredentials ClientCredentials { get; protected internal set; }
    private EventTraceActivity EventTraceActivity { get; }
    internal Binding IssuerBinding { get; }
    internal SecurityKeyEntropyMode KeyEntropyMode { get; internal set; }
    internal MessageSecurityVersion MessageSecurityVersion { get; internal set; }
    internal string RequestContext { get; private set; }
    internal SecurityTokenRequirement SecurityTokenRequirement { get; }
    public bool SupportsTokenCancellation { get; }
    public bool SupportsTokenRenewal { get; }
    internal WSTrustTokenParameters WSTrustTokenParameters { get; }
    private TimeSpan System.ServiceModel.Security.ISecurityCommunicationObject.DefaultOpenTimeout { get; }
    private TimeSpan System.ServiceModel.Security.ISecurityCommunicationObject.DefaultCloseTimeout { get; }
    private CommunicationState System.ServiceModel.ICommunicationObject.State { get; }
    public WSTrustChannelSecurityTokenProvider(SecurityTokenRequirement tokenRequirement);
    private DateTime AddTicks(DateTime time, long ticks);
    [CompilerGeneratedAttribute]
private WsTrustResponse get_CachedResponse();
    [CompilerGeneratedAttribute]
private void set_CachedResponse(WsTrustResponse value);
    private void CacheSecurityTokenResponse(WsTrustRequest request, WsTrustResponse response);
    [CompilerGeneratedAttribute]
internal virtual ChannelFactory`1<IRequestChannel> get_ChannelFactory();
    [CompilerGeneratedAttribute]
internal virtual void set_ChannelFactory(ChannelFactory`1<IRequestChannel> value);
    [CompilerGeneratedAttribute]
protected internal ClientCredentials get_ClientCredentials();
    [CompilerGeneratedAttribute]
protected internal void set_ClientCredentials(ClientCredentials value);
    protected virtual WsTrustRequest CreateWsTrustRequest();
    private EventTraceActivity get_EventTraceActivity();
    private WsTrustResponse GetCachedResponse(WsTrustRequest request);
    protected virtual IAsyncResult BeginGetTokenCore(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual SecurityToken EndGetTokenCore(IAsyncResult result);
    [AsyncStateMachineAttribute("System.ServiceModel.Federation.WSTrustChannelSecurityTokenProvider/<GetTokenAsyncCore>d__32")]
private Task`1<SecurityToken> GetTokenAsyncCore(TimeSpan timeout);
    protected virtual SecurityToken GetTokenCore(TimeSpan timeout);
    private WsTrustVersion GetWsTrustVersion(MessageSecurityVersion messageSecurityVersion);
    private void InitializeKeyEntropyMode();
    internal Binding get_IssuerBinding();
    private bool IsWsTrustResponseExpired(WsTrustResponse response);
    internal SecurityKeyEntropyMode get_KeyEntropyMode();
    internal void set_KeyEntropyMode(SecurityKeyEntropyMode value);
    [CompilerGeneratedAttribute]
internal MessageSecurityVersion get_MessageSecurityVersion();
    [CompilerGeneratedAttribute]
internal void set_MessageSecurityVersion(MessageSecurityVersion value);
    [CompilerGeneratedAttribute]
internal string get_RequestContext();
    [CompilerGeneratedAttribute]
private void set_RequestContext(string value);
    [CompilerGeneratedAttribute]
internal SecurityTokenRequirement get_SecurityTokenRequirement();
    private void SetInboundSerializationContext();
    public virtual bool get_SupportsTokenCancellation();
    public virtual bool get_SupportsTokenRenewal();
    [CompilerGeneratedAttribute]
internal WSTrustTokenParameters get_WSTrustTokenParameters();
    private sealed virtual override void System.ServiceModel.Security.ISecurityCommunicationObject.OnAbort();
    [AsyncStateMachineAttribute("System.ServiceModel.Federation.WSTrustChannelSecurityTokenProvider/<System-ServiceModel-Security-ISecurityCommunicationObject-OnCloseAsync>d__62")]
private sealed virtual override Task System.ServiceModel.Security.ISecurityCommunicationObject.OnCloseAsync(TimeSpan timeout);
    [AsyncStateMachineAttribute("System.ServiceModel.Federation.WSTrustChannelSecurityTokenProvider/<System-ServiceModel-Security-ISecurityCommunicationObject-OnOpenAsync>d__63")]
private sealed virtual override Task System.ServiceModel.Security.ISecurityCommunicationObject.OnOpenAsync(TimeSpan timeout);
    private sealed virtual override void System.ServiceModel.Security.ISecurityCommunicationObject.OnClosed();
    private sealed virtual override void System.ServiceModel.Security.ISecurityCommunicationObject.OnClosing();
    private sealed virtual override void System.ServiceModel.Security.ISecurityCommunicationObject.OnFaulted();
    private sealed virtual override void System.ServiceModel.Security.ISecurityCommunicationObject.OnOpened();
    private sealed virtual override void System.ServiceModel.Security.ISecurityCommunicationObject.OnOpening();
    private sealed virtual override TimeSpan System.ServiceModel.Security.ISecurityCommunicationObject.get_DefaultOpenTimeout();
    private sealed virtual override TimeSpan System.ServiceModel.Security.ISecurityCommunicationObject.get_DefaultCloseTimeout();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opening(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opening(EventHandler value);
    private sealed virtual override CommunicationState System.ServiceModel.ICommunicationObject.get_State();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Abort();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close(TimeSpan timeout);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndClose(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open(TimeSpan timeout);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndOpen(IAsyncResult result);
}
internal class System.ServiceModel.Federation.WSTrustRequestBodyWriter : BodyWriter {
    [CompilerGeneratedAttribute]
private WsTrustRequest <TrustRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private WsTrustSerializer <TrustSerializer>k__BackingField;
    protected WsTrustRequest TrustRequest { get; }
    protected WsTrustSerializer TrustSerializer { get; }
    public WSTrustRequestBodyWriter(WsTrustRequest trustRequest, WsTrustSerializer trustSerializer);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    [CompilerGeneratedAttribute]
protected WsTrustRequest get_TrustRequest();
    [CompilerGeneratedAttribute]
protected WsTrustSerializer get_TrustSerializer();
}
public class System.ServiceModel.Federation.WSTrustTokenParameters : IssuedSecurityTokenParameters {
    public static bool DefaultCacheIssuedTokens;
    public static int DefaultIssuedTokenRenewalThresholdPercentage;
    public static TimeSpan DefaultMaxIssuedTokenCachingTime;
    public static SecurityKeyType DefaultSecurityKeyType;
    private TimeSpan _maxIssuedTokenCachingTime;
    private MessageSecurityVersion _messageSecurityVersion;
    private int _issuedTokenRenewalThresholdPercentage;
    [CompilerGeneratedAttribute]
private ICollection`1<XmlElement> <AdditionalRequestParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheIssuedTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private Claims <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestContext>k__BackingField;
    public ICollection`1<XmlElement> AdditionalRequestParameters { get; }
    public bool CacheIssuedTokens { get; public set; }
    public Claims Claims { get; public set; }
    public int IssuedTokenRenewalThresholdPercentage { get; public set; }
    public Nullable`1<int> KeySize { get; public set; }
    public TimeSpan MaxIssuedTokenCachingTime { get; public set; }
    public MessageSecurityVersion MessageSecurityVersion { get; public set; }
    public string RequestContext { get; public set; }
    protected WSTrustTokenParameters(WSTrustTokenParameters other);
    private static WSTrustTokenParameters();
    protected virtual SecurityTokenParameters CloneCore();
    [CompilerGeneratedAttribute]
public ICollection`1<XmlElement> get_AdditionalRequestParameters();
    [CompilerGeneratedAttribute]
public bool get_CacheIssuedTokens();
    [CompilerGeneratedAttribute]
public void set_CacheIssuedTokens(bool value);
    [CompilerGeneratedAttribute]
public Claims get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(Claims value);
    public int get_IssuedTokenRenewalThresholdPercentage();
    public void set_IssuedTokenRenewalThresholdPercentage(int value);
    public Nullable`1<int> get_KeySize();
    public void set_KeySize(Nullable`1<int> value);
    public TimeSpan get_MaxIssuedTokenCachingTime();
    public void set_MaxIssuedTokenCachingTime(TimeSpan value);
    public MessageSecurityVersion get_MessageSecurityVersion();
    public void set_MessageSecurityVersion(MessageSecurityVersion value);
    [CompilerGeneratedAttribute]
public string get_RequestContext();
    [CompilerGeneratedAttribute]
public void set_RequestContext(string value);
    public static WSTrustTokenParameters CreateWSFederationTokenParameters(Binding issuerBinding, EndpointAddress issuerAddress);
    public static WSTrustTokenParameters CreateWS2007FederationTokenParameters(Binding issuerBinding, EndpointAddress issuerAddress);
}
internal static class System.ServiceModel.Federation.WSTrustUtilities : object {
    internal static BinarySecretSecurityToken GetProofToken(WsTrustRequest request, RequestSecurityTokenResponse response, WsSerializationContext serializationContext, SecurityAlgorithmSuite algorithmSuite);
    internal static GenericXmlSecurityKeyIdentifierClause GetSecurityKeyIdentifierForTokenReference(SecurityTokenReference securityTokenReference);
    internal static SecurityToken CreateGenericXmlSecurityToken(WsTrustRequest request, WsTrustResponse trustResponse, WsSerializationContext serializationContext, SecurityAlgorithmSuite algorithmSuite);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string SecurityEndpointNotFound { get; }
    internal static string SecurityServerTooBusy { get; }
    internal static string CommunicationObjectFaulted1 { get; }
    internal static string CommunicationObjectCannotBeUsed { get; }
    internal static string RequestTypeNotSupported { get; }
    internal static string TokenProviderUnableToGetToken { get; }
    internal static string UseKeysAreNotSupported { get; }
    internal static string WsTrustVersionNotSupported { get; }
    internal static string ChannelFactoryMustSupportIRequestChannel { get; }
    internal static string BearerKeyShouldNotIincludeAProofToken { get; }
    internal static string ComputedKeyProofTokensAreOnlySupportedWithSymmetricKeyTypes { get; }
    internal static string ComputedKeyProofTokensRequireIssuerToSupplyKeyMaterialViaEntropy { get; }
    internal static string ComputedKeyProofTokensRequireRequesterToSupplyKeyMaterialViaEntropy { get; }
    internal static string EncryptedKeysForProofTokensNotSupported { get; }
    internal static string NoKeySizeProvided { get; }
    internal static string OnlyPSHA1ComputedKeysAreSupported { get; }
    internal static string ProtectedKeyEntropyIsNotSupported { get; }
    internal static string RSTRProofTokenShouldNotHaveAComputedKeyAlgorithmOrIssuerEntropy { get; }
    internal static string IRequestChannelMustBeCreated { get; }
    internal static string IssuedSecurityTokenParametersIncorrectType { get; }
    internal static string IssuedTokenRenewalThresholdPercentageIncorrect { get; }
    internal static string MaxIssuedTokenCachingTimeMustBeGreaterThanTimeSpanZero { get; }
    internal static string SFxTimeoutOutOfRange0 { get; }
    internal static string ValueMustBePositive { get; }
    internal static string InsufficentMemory { get; }
    internal static string ActivityProcessAction { get; }
    internal static string CannotDetermineSPNBasedOnAddress { get; }
    private static bool UsingResourceKeys();
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_SecurityEndpointNotFound();
    internal static string get_SecurityServerTooBusy();
    internal static string get_CommunicationObjectFaulted1();
    internal static string get_CommunicationObjectCannotBeUsed();
    internal static string get_RequestTypeNotSupported();
    internal static string get_TokenProviderUnableToGetToken();
    internal static string get_UseKeysAreNotSupported();
    internal static string get_WsTrustVersionNotSupported();
    internal static string get_ChannelFactoryMustSupportIRequestChannel();
    internal static string get_BearerKeyShouldNotIincludeAProofToken();
    internal static string get_ComputedKeyProofTokensAreOnlySupportedWithSymmetricKeyTypes();
    internal static string get_ComputedKeyProofTokensRequireIssuerToSupplyKeyMaterialViaEntropy();
    internal static string get_ComputedKeyProofTokensRequireRequesterToSupplyKeyMaterialViaEntropy();
    internal static string get_EncryptedKeysForProofTokensNotSupported();
    internal static string get_NoKeySizeProvided();
    internal static string get_OnlyPSHA1ComputedKeysAreSupported();
    internal static string get_ProtectedKeyEntropyIsNotSupported();
    internal static string get_RSTRProofTokenShouldNotHaveAComputedKeyAlgorithmOrIssuerEntropy();
    internal static string get_IRequestChannelMustBeCreated();
    internal static string get_IssuedSecurityTokenParametersIncorrectType();
    internal static string get_IssuedTokenRenewalThresholdPercentageIncorrect();
    internal static string get_MaxIssuedTokenCachingTimeMustBeGreaterThanTimeSpanZero();
    internal static string get_SFxTimeoutOutOfRange0();
    internal static string get_ValueMustBePositive();
    internal static string get_InsufficentMemory();
    internal static string get_ActivityProcessAction();
    internal static string get_CannotDetermineSPNBasedOnAddress();
}
