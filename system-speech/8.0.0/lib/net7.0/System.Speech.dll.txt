internal static class FxResources.System.Speech.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public enum System.Speech.AudioFormat.AudioBitsPerSample : Enum {
    public int value__;
    public static AudioBitsPerSample Eight;
    public static AudioBitsPerSample Sixteen;
}
public enum System.Speech.AudioFormat.AudioChannel : Enum {
    public int value__;
    public static AudioChannel Mono;
    public static AudioChannel Stereo;
}
public enum System.Speech.AudioFormat.EncodingFormat : Enum {
    public int value__;
    public static EncodingFormat Pcm;
    public static EncodingFormat ALaw;
    public static EncodingFormat ULaw;
}
public class System.Speech.AudioFormat.SpeechAudioFormatInfo : object {
    [EditorBrowsableAttribute("2")]
public int AverageBytesPerSecond { get; }
    [EditorBrowsableAttribute("2")]
public int BitsPerSample { get; }
    [EditorBrowsableAttribute("2")]
public int BlockAlign { get; }
    public int ChannelCount { get; }
    public EncodingFormat EncodingFormat { get; }
    public int SamplesPerSecond { get; }
    public SpeechAudioFormatInfo(int samplesPerSecond, AudioBitsPerSample bitsPerSample, AudioChannel channel);
    [EditorBrowsableAttribute("1")]
public SpeechAudioFormatInfo(EncodingFormat encodingFormat, int samplesPerSecond, int bitsPerSample, int channelCount, int averageBytesPerSecond, int blockAlign, Byte[] formatSpecificData);
    public int get_AverageBytesPerSecond();
    public int get_BitsPerSample();
    public int get_BlockAlign();
    public int get_ChannelCount();
    public EncodingFormat get_EncodingFormat();
    public int get_SamplesPerSecond();
    public virtual bool Equals(object obj);
    public Byte[] FormatSpecificData();
    public virtual int GetHashCode();
}
public class System.Speech.Recognition.AudioLevelUpdatedEventArgs : EventArgs {
    public int AudioLevel { get; }
    public int get_AudioLevel();
}
public enum System.Speech.Recognition.AudioSignalProblem : Enum {
    public int value__;
    public static AudioSignalProblem None;
    public static AudioSignalProblem TooNoisy;
    public static AudioSignalProblem NoSignal;
    public static AudioSignalProblem TooLoud;
    public static AudioSignalProblem TooSoft;
    public static AudioSignalProblem TooFast;
    public static AudioSignalProblem TooSlow;
}
public class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs : EventArgs {
    public int AudioLevel { get; }
    public TimeSpan AudioPosition { get; }
    public AudioSignalProblem AudioSignalProblem { get; }
    public TimeSpan RecognizerAudioPosition { get; }
    public int get_AudioLevel();
    public TimeSpan get_AudioPosition();
    public AudioSignalProblem get_AudioSignalProblem();
    public TimeSpan get_RecognizerAudioPosition();
}
public enum System.Speech.Recognition.AudioState : Enum {
    public int value__;
    public static AudioState Stopped;
    public static AudioState Silence;
    public static AudioState Speech;
}
public class System.Speech.Recognition.AudioStateChangedEventArgs : EventArgs {
    public AudioState AudioState { get; }
    public AudioState get_AudioState();
}
public class System.Speech.Recognition.Choices : object {
    public Choices(GrammarBuilder[] alternateChoices);
    public Choices(String[] phrases);
    public void Add(GrammarBuilder[] alternateChoices);
    public void Add(String[] phrases);
    public GrammarBuilder ToGrammarBuilder();
}
public class System.Speech.Recognition.DictationGrammar : Grammar {
    public DictationGrammar(string topic);
    public void SetDictationContext(string precedingText, string subsequentText);
}
[FlagsAttribute]
public enum System.Speech.Recognition.DisplayAttributes : Enum {
    public int value__;
    public static DisplayAttributes None;
    public static DisplayAttributes ZeroTrailingSpaces;
    public static DisplayAttributes OneTrailingSpace;
    public static DisplayAttributes TwoTrailingSpaces;
    public static DisplayAttributes ConsumeLeadingSpaces;
}
public class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs : AsyncCompletedEventArgs {
    public RecognitionResult Result { get; }
    public RecognitionResult get_Result();
}
public class System.Speech.Recognition.Grammar : object {
    public bool Enabled { get; public set; }
    protected internal bool IsStg { get; }
    public bool Loaded { get; }
    public string Name { get; public set; }
    public int Priority { get; public set; }
    protected string ResourceName { get; protected set; }
    public string RuleName { get; }
    public float Weight { get; public set; }
    public Grammar(Stream stream);
    public Grammar(Stream stream, string ruleName);
    public Grammar(Stream stream, string ruleName, Object[] parameters);
    [EditorBrowsableAttribute("1")]
public Grammar(Stream stream, string ruleName, Uri baseUri);
    [EditorBrowsableAttribute("1")]
public Grammar(Stream stream, string ruleName, Uri baseUri, Object[] parameters);
    public Grammar(GrammarBuilder builder);
    public Grammar(SrgsDocument srgsDocument);
    public Grammar(SrgsDocument srgsDocument, string ruleName);
    public Grammar(SrgsDocument srgsDocument, string ruleName, Object[] parameters);
    [EditorBrowsableAttribute("1")]
public Grammar(SrgsDocument srgsDocument, string ruleName, Uri baseUri);
    [EditorBrowsableAttribute("1")]
public Grammar(SrgsDocument srgsDocument, string ruleName, Uri baseUri, Object[] parameters);
    public Grammar(string path);
    public Grammar(string path, string ruleName);
    public Grammar(string path, string ruleName, Object[] parameters);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    protected internal virtual bool get_IsStg();
    public bool get_Loaded();
    public string get_Name();
    public void set_Name(string value);
    public int get_Priority();
    public void set_Priority(int value);
    protected string get_ResourceName();
    protected void set_ResourceName(string value);
    public string get_RuleName();
    public float get_Weight();
    public void set_Weight(float value);
    public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public static Grammar LoadLocalizedGrammarFromType(Type type, Object[] onInitParameters);
    protected void StgInit(Object[] parameters);
}
public class System.Speech.Recognition.GrammarBuilder : object {
    public CultureInfo Culture { get; public set; }
    public string DebugShowPhrases { get; }
    public GrammarBuilder(Choices alternateChoices);
    public GrammarBuilder(GrammarBuilder builder, int minRepeat, int maxRepeat);
    public GrammarBuilder(SemanticResultKey key);
    public GrammarBuilder(SemanticResultValue value);
    public GrammarBuilder(string phrase);
    public GrammarBuilder(string phrase, int minRepeat, int maxRepeat);
    public GrammarBuilder(string phrase, SubsetMatchingMode subsetMatchingCriteria);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public string get_DebugShowPhrases();
    public static GrammarBuilder Add(Choices choices, GrammarBuilder builder);
    public static GrammarBuilder Add(GrammarBuilder builder, Choices choices);
    public static GrammarBuilder Add(GrammarBuilder builder1, GrammarBuilder builder2);
    public static GrammarBuilder Add(GrammarBuilder builder, string phrase);
    public static GrammarBuilder Add(string phrase, GrammarBuilder builder);
    public void Append(Choices alternateChoices);
    public void Append(GrammarBuilder builder);
    public void Append(GrammarBuilder builder, int minRepeat, int maxRepeat);
    public void Append(SemanticResultKey key);
    public void Append(SemanticResultValue value);
    public void Append(string phrase);
    public void Append(string phrase, int minRepeat, int maxRepeat);
    public void Append(string phrase, SubsetMatchingMode subsetMatchingCriteria);
    public void AppendDictation();
    public void AppendDictation(string category);
    public void AppendRuleReference(string path);
    public void AppendRuleReference(string path, string rule);
    public void AppendWildcard();
    public static GrammarBuilder op_Addition(Choices choices, GrammarBuilder builder);
    public static GrammarBuilder op_Addition(GrammarBuilder builder, Choices choices);
    public static GrammarBuilder op_Addition(GrammarBuilder builder1, GrammarBuilder builder2);
    public static GrammarBuilder op_Addition(GrammarBuilder builder, string phrase);
    public static GrammarBuilder op_Addition(string phrase, GrammarBuilder builder);
    public static GrammarBuilder op_Implicit(Choices choices);
    public static GrammarBuilder op_Implicit(SemanticResultKey semanticKey);
    public static GrammarBuilder op_Implicit(SemanticResultValue semanticValue);
    public static GrammarBuilder op_Implicit(string phrase);
}
public class System.Speech.Recognition.LoadGrammarCompletedEventArgs : AsyncCompletedEventArgs {
    public Grammar Grammar { get; }
    public Grammar get_Grammar();
}
public abstract class System.Speech.Recognition.RecognitionEventArgs : EventArgs {
    public RecognitionResult Result { get; }
    public RecognitionResult get_Result();
}
public class System.Speech.Recognition.RecognitionResult : RecognizedPhrase {
    public ReadOnlyCollection`1<RecognizedPhrase> Alternates { get; }
    public RecognizedAudio Audio { get; }
    public ReadOnlyCollection`1<RecognizedPhrase> get_Alternates();
    public RecognizedAudio get_Audio();
    public RecognizedAudio GetAudioForWordRange(RecognizedWordUnit firstWord, RecognizedWordUnit lastWord);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Speech.Recognition.RecognizeCompletedEventArgs : AsyncCompletedEventArgs {
    public TimeSpan AudioPosition { get; }
    public bool BabbleTimeout { get; }
    public bool InitialSilenceTimeout { get; }
    public bool InputStreamEnded { get; }
    public RecognitionResult Result { get; }
    public TimeSpan get_AudioPosition();
    public bool get_BabbleTimeout();
    public bool get_InitialSilenceTimeout();
    public bool get_InputStreamEnded();
    public RecognitionResult get_Result();
}
public class System.Speech.Recognition.RecognizedAudio : object {
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    public SpeechAudioFormatInfo Format { get; }
    public DateTime StartTime { get; }
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public SpeechAudioFormatInfo get_Format();
    public DateTime get_StartTime();
    public RecognizedAudio GetRange(TimeSpan audioPosition, TimeSpan duration);
    public void WriteToAudioStream(Stream outputStream);
    public void WriteToWaveStream(Stream outputStream);
}
public class System.Speech.Recognition.RecognizedPhrase : object {
    public float Confidence { get; }
    public Grammar Grammar { get; }
    public int HomophoneGroupId { get; }
    public ReadOnlyCollection`1<RecognizedPhrase> Homophones { get; }
    public Collection`1<ReplacementText> ReplacementWordUnits { get; }
    public SemanticValue Semantics { get; }
    public string Text { get; }
    public ReadOnlyCollection`1<RecognizedWordUnit> Words { get; }
    public float get_Confidence();
    public Grammar get_Grammar();
    public int get_HomophoneGroupId();
    public ReadOnlyCollection`1<RecognizedPhrase> get_Homophones();
    public Collection`1<ReplacementText> get_ReplacementWordUnits();
    public SemanticValue get_Semantics();
    public string get_Text();
    public ReadOnlyCollection`1<RecognizedWordUnit> get_Words();
    public IXPathNavigable ConstructSmlFromSemantics();
}
public class System.Speech.Recognition.RecognizedWordUnit : object {
    public float Confidence { get; }
    public DisplayAttributes DisplayAttributes { get; }
    public string LexicalForm { get; }
    public string Pronunciation { get; }
    public string Text { get; }
    public RecognizedWordUnit(string text, float confidence, string pronunciation, string lexicalForm, DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    public float get_Confidence();
    public DisplayAttributes get_DisplayAttributes();
    public string get_LexicalForm();
    public string get_Pronunciation();
    public string get_Text();
}
public enum System.Speech.Recognition.RecognizeMode : Enum {
    public int value__;
    public static RecognizeMode Single;
    public static RecognizeMode Multiple;
}
public class System.Speech.Recognition.RecognizerInfo : object {
    public IDictionary`2<string, string> AdditionalInfo { get; }
    public CultureInfo Culture { get; }
    public string Description { get; }
    public string Id { get; }
    public string Name { get; }
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    public IDictionary`2<string, string> get_AdditionalInfo();
    public CultureInfo get_Culture();
    public string get_Description();
    public string get_Id();
    public string get_Name();
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> get_SupportedAudioFormats();
    public sealed virtual void Dispose();
}
public enum System.Speech.Recognition.RecognizerState : Enum {
    public int value__;
    public static RecognizerState Stopped;
    public static RecognizerState Listening;
}
public class System.Speech.Recognition.RecognizerUpdateReachedEventArgs : EventArgs {
    public TimeSpan AudioPosition { get; }
    public object UserToken { get; }
    public TimeSpan get_AudioPosition();
    public object get_UserToken();
}
public class System.Speech.Recognition.ReplacementText : object {
    public int CountOfWords { get; }
    public DisplayAttributes DisplayAttributes { get; }
    public int FirstWordIndex { get; }
    public string Text { get; }
    public int get_CountOfWords();
    public DisplayAttributes get_DisplayAttributes();
    public int get_FirstWordIndex();
    public string get_Text();
}
public class System.Speech.Recognition.SemanticResultKey : object {
    public SemanticResultKey(string semanticResultKey, GrammarBuilder[] builders);
    public SemanticResultKey(string semanticResultKey, String[] phrases);
    public GrammarBuilder ToGrammarBuilder();
}
public class System.Speech.Recognition.SemanticResultValue : object {
    public SemanticResultValue(object value);
    public SemanticResultValue(GrammarBuilder builder, object value);
    public SemanticResultValue(string phrase, object value);
    public GrammarBuilder ToGrammarBuilder();
}
[DefaultMemberAttribute("Item")]
public class System.Speech.Recognition.SemanticValue : object {
    public float Confidence { get; }
    public int Count { get; }
    public SemanticValue Item { get; public set; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly { get; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys { get; }
    private ICollection`1<SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values { get; }
    public object Value { get; }
    public SemanticValue(object value);
    public SemanticValue(string keyName, object value, float confidence);
    public float get_Confidence();
    public sealed virtual int get_Count();
    public sealed virtual SemanticValue get_Item(string key);
    public sealed virtual void set_Item(string key, SemanticValue value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.get_IsReadOnly();
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.get_Keys();
    private sealed virtual override ICollection`1<SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.get_Values();
    public object get_Value();
    public sealed virtual bool Contains(KeyValuePair`2<string, SemanticValue> item);
    public sealed virtual bool ContainsKey(string key);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add(KeyValuePair`2<string, SemanticValue> key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo(KeyValuePair`2[] array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove(KeyValuePair`2<string, SemanticValue> key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add(string key, SemanticValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove(string key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue(string key, SemanticValue& value);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, SemanticValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Speech.Recognition.SpeechDetectedEventArgs : EventArgs {
    public TimeSpan AudioPosition { get; }
    public TimeSpan get_AudioPosition();
}
public class System.Speech.Recognition.SpeechHypothesizedEventArgs : RecognitionEventArgs {
}
public class System.Speech.Recognition.SpeechRecognitionEngine : object {
    public SpeechAudioFormatInfo AudioFormat { get; }
    public int AudioLevel { get; }
    public TimeSpan AudioPosition { get; }
    public AudioState AudioState { get; }
    [EditorBrowsableAttribute("2")]
public TimeSpan BabbleTimeout { get; public set; }
    [EditorBrowsableAttribute("2")]
public TimeSpan EndSilenceTimeout { get; public set; }
    [EditorBrowsableAttribute("2")]
public TimeSpan EndSilenceTimeoutAmbiguous { get; public set; }
    public ReadOnlyCollection`1<Grammar> Grammars { get; }
    [EditorBrowsableAttribute("2")]
public TimeSpan InitialSilenceTimeout { get; public set; }
    public int MaxAlternates { get; public set; }
    public TimeSpan RecognizerAudioPosition { get; }
    public RecognizerInfo RecognizerInfo { get; }
    public SpeechRecognitionEngine(CultureInfo culture);
    public SpeechRecognitionEngine(RecognizerInfo recognizerInfo);
    public SpeechRecognitionEngine(string recognizerId);
    public SpeechAudioFormatInfo get_AudioFormat();
    public int get_AudioLevel();
    public TimeSpan get_AudioPosition();
    public AudioState get_AudioState();
    public TimeSpan get_BabbleTimeout();
    public void set_BabbleTimeout(TimeSpan value);
    public TimeSpan get_EndSilenceTimeout();
    public void set_EndSilenceTimeout(TimeSpan value);
    public TimeSpan get_EndSilenceTimeoutAmbiguous();
    public void set_EndSilenceTimeoutAmbiguous(TimeSpan value);
    public ReadOnlyCollection`1<Grammar> get_Grammars();
    public TimeSpan get_InitialSilenceTimeout();
    public void set_InitialSilenceTimeout(TimeSpan value);
    public int get_MaxAlternates();
    public void set_MaxAlternates(int value);
    public TimeSpan get_RecognizerAudioPosition();
    public RecognizerInfo get_RecognizerInfo();
    public void add_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void remove_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void add_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void remove_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void add_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    public void remove_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    public void add_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    public void remove_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    public void add_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    public void remove_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    public void add_RecognizeCompleted(EventHandler`1<RecognizeCompletedEventArgs> value);
    public void remove_RecognizeCompleted(EventHandler`1<RecognizeCompletedEventArgs> value);
    public void add_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void remove_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void add_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    public void remove_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    public void add_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void remove_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void add_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    public void remove_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public RecognitionResult EmulateRecognize(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public RecognitionResult EmulateRecognize(string inputText);
    public RecognitionResult EmulateRecognize(string inputText, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(string inputText);
    public void EmulateRecognizeAsync(string inputText, CompareOptions compareOptions);
    public static ReadOnlyCollection`1<RecognizerInfo> InstalledRecognizers();
    public void LoadGrammar(Grammar grammar);
    public void LoadGrammarAsync(Grammar grammar);
    public object QueryRecognizerSetting(string settingName);
    public RecognitionResult Recognize();
    public RecognitionResult Recognize(TimeSpan initialSilenceTimeout);
    public void RecognizeAsync();
    public void RecognizeAsync(RecognizeMode mode);
    public void RecognizeAsyncCancel();
    public void RecognizeAsyncStop();
    public void RequestRecognizerUpdate();
    public void RequestRecognizerUpdate(object userToken);
    public void RequestRecognizerUpdate(object userToken, TimeSpan audioPositionAheadToRaiseUpdate);
    public void SetInputToAudioStream(Stream audioSource, SpeechAudioFormatInfo audioFormat);
    public void SetInputToDefaultAudioDevice();
    public void SetInputToNull();
    public void SetInputToWaveFile(string path);
    public void SetInputToWaveStream(Stream audioSource);
    public void UnloadAllGrammars();
    public void UnloadGrammar(Grammar grammar);
    public void UpdateRecognizerSetting(string settingName, int updatedValue);
    public void UpdateRecognizerSetting(string settingName, string updatedValue);
}
public class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs : RecognitionEventArgs {
}
public class System.Speech.Recognition.SpeechRecognizedEventArgs : RecognitionEventArgs {
}
public class System.Speech.Recognition.SpeechRecognizer : object {
    public SpeechAudioFormatInfo AudioFormat { get; }
    public int AudioLevel { get; }
    public TimeSpan AudioPosition { get; }
    public AudioState AudioState { get; }
    public bool Enabled { get; public set; }
    public ReadOnlyCollection`1<Grammar> Grammars { get; }
    public int MaxAlternates { get; public set; }
    public bool PauseRecognizerOnRecognition { get; public set; }
    public TimeSpan RecognizerAudioPosition { get; }
    public RecognizerInfo RecognizerInfo { get; }
    public RecognizerState State { get; }
    public SpeechAudioFormatInfo get_AudioFormat();
    public int get_AudioLevel();
    public TimeSpan get_AudioPosition();
    public AudioState get_AudioState();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public ReadOnlyCollection`1<Grammar> get_Grammars();
    public int get_MaxAlternates();
    public void set_MaxAlternates(int value);
    public bool get_PauseRecognizerOnRecognition();
    public void set_PauseRecognizerOnRecognition(bool value);
    public TimeSpan get_RecognizerAudioPosition();
    public RecognizerInfo get_RecognizerInfo();
    public RecognizerState get_State();
    public void add_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void remove_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void add_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void remove_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void add_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    public void remove_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    public void add_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    public void remove_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    public void add_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    public void remove_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    public void add_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void remove_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void add_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    public void remove_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    public void add_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void remove_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void add_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    public void remove_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void add_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public void remove_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public RecognitionResult EmulateRecognize(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public RecognitionResult EmulateRecognize(string inputText);
    public RecognitionResult EmulateRecognize(string inputText, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(string inputText);
    public void EmulateRecognizeAsync(string inputText, CompareOptions compareOptions);
    public void LoadGrammar(Grammar grammar);
    public void LoadGrammarAsync(Grammar grammar);
    public void RequestRecognizerUpdate();
    public void RequestRecognizerUpdate(object userToken);
    public void RequestRecognizerUpdate(object userToken, TimeSpan audioPositionAheadToRaiseUpdate);
    public void UnloadAllGrammars();
    public void UnloadGrammar(Grammar grammar);
}
public class System.Speech.Recognition.SpeechUI : object {
    public static bool SendTextFeedback(RecognitionResult result, string feedback, bool isSuccessfulAction);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsDocument : object {
    public Collection`1<string> AssemblyReferences { get; }
    public Collection`1<string> CodeBehind { get; }
    public CultureInfo Culture { get; public set; }
    public bool Debug { get; public set; }
    public Collection`1<string> ImportNamespaces { get; }
    public string Language { get; public set; }
    public SrgsGrammarMode Mode { get; public set; }
    public string Namespace { get; public set; }
    public SrgsPhoneticAlphabet PhoneticAlphabet { get; public set; }
    public SrgsRule Root { get; public set; }
    public SrgsRulesCollection Rules { get; }
    public string Script { get; public set; }
    public Uri XmlBase { get; public set; }
    public SrgsDocument(GrammarBuilder builder);
    public SrgsDocument(SrgsRule grammarRootRule);
    public SrgsDocument(string path);
    public SrgsDocument(XmlReader srgsGrammar);
    public Collection`1<string> get_AssemblyReferences();
    public Collection`1<string> get_CodeBehind();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_Debug();
    public void set_Debug(bool value);
    public Collection`1<string> get_ImportNamespaces();
    public string get_Language();
    public void set_Language(string value);
    public SrgsGrammarMode get_Mode();
    public void set_Mode(SrgsGrammarMode value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public SrgsPhoneticAlphabet get_PhoneticAlphabet();
    public void set_PhoneticAlphabet(SrgsPhoneticAlphabet value);
    public SrgsRule get_Root();
    public void set_Root(SrgsRule value);
    public SrgsRulesCollection get_Rules();
    public string get_Script();
    public void set_Script(string value);
    public Uri get_XmlBase();
    public void set_XmlBase(Uri value);
    public void WriteSrgs(XmlWriter srgsGrammar);
}
public abstract class System.Speech.Recognition.SrgsGrammar.SrgsElement : MarshalByRefObject {
    internal abstract virtual string DebuggerDisplayString();
    internal abstract virtual void WriteSrgs(XmlWriter writer);
}
public static class System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler : object {
    public static void Compile(SrgsDocument srgsGrammar, Stream outputStream);
    public static void Compile(string inputPath, Stream outputStream);
    public static void Compile(XmlReader reader, Stream outputStream);
    public static void CompileClassLibrary(SrgsDocument srgsGrammar, string outputPath, String[] referencedAssemblies, string keyFile);
    public static void CompileClassLibrary(String[] inputPaths, string outputPath, String[] referencedAssemblies, string keyFile);
    public static void CompileClassLibrary(XmlReader reader, string outputPath, String[] referencedAssemblies, string keyFile);
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode : Enum {
    public int value__;
    public static SrgsGrammarMode Voice;
    public static SrgsGrammarMode Dtmf;
}
public class System.Speech.Recognition.SrgsGrammar.SrgsItem : SrgsElement {
    public Collection`1<SrgsElement> Elements { get; }
    public int MaxRepeat { get; }
    public int MinRepeat { get; }
    public float RepeatProbability { get; public set; }
    public float Weight { get; public set; }
    public SrgsItem(int repeatCount);
    public SrgsItem(int min, int max);
    public SrgsItem(int min, int max, SrgsElement[] elements);
    public SrgsItem(int min, int max, string text);
    public SrgsItem(SrgsElement[] elements);
    public SrgsItem(string text);
    public Collection`1<SrgsElement> get_Elements();
    public int get_MaxRepeat();
    public int get_MinRepeat();
    public float get_RepeatProbability();
    public void set_RepeatProbability(float value);
    public float get_Weight();
    public void set_Weight(float value);
    public void Add(SrgsElement element);
    public void SetRepeat(int count);
    public void SetRepeat(int minRepeat, int maxRepeat);
    internal virtual string DebuggerDisplayString();
    internal virtual void WriteSrgs(XmlWriter writer);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag : SrgsElement {
    public string Name { get; public set; }
    public object Value { get; public set; }
    public SrgsNameValueTag(object value);
    public SrgsNameValueTag(string name, object value);
    public string get_Name();
    public void set_Name(string value);
    public object get_Value();
    public void set_Value(object value);
    internal virtual string DebuggerDisplayString();
    internal virtual void WriteSrgs(XmlWriter writer);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsOneOf : SrgsElement {
    public Collection`1<SrgsItem> Items { get; }
    public SrgsOneOf(SrgsItem[] items);
    public SrgsOneOf(String[] items);
    public Collection`1<SrgsItem> get_Items();
    public void Add(SrgsItem item);
    internal virtual string DebuggerDisplayString();
    internal virtual void WriteSrgs(XmlWriter writer);
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet : Enum {
    public int value__;
    public static SrgsPhoneticAlphabet Sapi;
    public static SrgsPhoneticAlphabet Ipa;
    public static SrgsPhoneticAlphabet Ups;
}
public class System.Speech.Recognition.SrgsGrammar.SrgsRule : object {
    public string BaseClass { get; public set; }
    public Collection`1<SrgsElement> Elements { get; }
    public string Id { get; public set; }
    public string OnError { get; public set; }
    public string OnInit { get; public set; }
    public string OnParse { get; public set; }
    public string OnRecognition { get; public set; }
    public SrgsRuleScope Scope { get; public set; }
    public string Script { get; public set; }
    public SrgsRule(string id);
    public SrgsRule(string id, SrgsElement[] elements);
    public string get_BaseClass();
    public void set_BaseClass(string value);
    public Collection`1<SrgsElement> get_Elements();
    public string get_Id();
    public void set_Id(string value);
    public string get_OnError();
    public void set_OnError(string value);
    public string get_OnInit();
    public void set_OnInit(string value);
    public string get_OnParse();
    public void set_OnParse(string value);
    public string get_OnRecognition();
    public void set_OnRecognition(string value);
    public SrgsRuleScope get_Scope();
    public void set_Scope(SrgsRuleScope value);
    public string get_Script();
    public void set_Script(string value);
    public void Add(SrgsElement element);
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Recognition.SrgsGrammar.SrgsRuleRef : SrgsElement {
    public static SrgsRuleRef Dictation;
    public static SrgsRuleRef Garbage;
    public static SrgsRuleRef MnemonicSpelling;
    public static SrgsRuleRef Null;
    public static SrgsRuleRef Void;
    public string Params { get; }
    public string SemanticKey { get; }
    public Uri Uri { get; }
    public SrgsRuleRef(SrgsRule rule);
    public SrgsRuleRef(SrgsRule rule, string semanticKey);
    public SrgsRuleRef(SrgsRule rule, string semanticKey, string parameters);
    public SrgsRuleRef(Uri uri);
    public SrgsRuleRef(Uri uri, string rule);
    public SrgsRuleRef(Uri uri, string rule, string semanticKey);
    public SrgsRuleRef(Uri uri, string rule, string semanticKey, string parameters);
    public string get_Params();
    public string get_SemanticKey();
    public Uri get_Uri();
    internal virtual string DebuggerDisplayString();
    internal virtual void WriteSrgs(XmlWriter writer);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection : KeyedCollection`2<string, SrgsRule> {
    public void Add(SrgsRule[] rules);
    protected virtual string GetKeyForItem(SrgsRule rule);
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsRuleScope : Enum {
    public int value__;
    public static SrgsRuleScope Public;
    public static SrgsRuleScope Private;
}
public class System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag : SrgsElement {
    public string Script { get; public set; }
    public SrgsSemanticInterpretationTag(string script);
    public string get_Script();
    public void set_Script(string value);
    internal virtual string DebuggerDisplayString();
    internal virtual void WriteSrgs(XmlWriter writer);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsSubset : SrgsElement {
    public SubsetMatchingMode MatchingMode { get; public set; }
    public string Text { get; public set; }
    public SrgsSubset(string text);
    public SrgsSubset(string text, SubsetMatchingMode matchingMode);
    public SubsetMatchingMode get_MatchingMode();
    public void set_MatchingMode(SubsetMatchingMode value);
    public string get_Text();
    public void set_Text(string value);
    internal virtual string DebuggerDisplayString();
    internal virtual void WriteSrgs(XmlWriter writer);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsText : SrgsElement {
    public string Text { get; public set; }
    public SrgsText(string text);
    public string get_Text();
    public void set_Text(string value);
    internal virtual string DebuggerDisplayString();
    internal virtual void WriteSrgs(XmlWriter writer);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsToken : SrgsElement {
    public string Display { get; public set; }
    public string Pronunciation { get; public set; }
    public string Text { get; public set; }
    public SrgsToken(string text);
    public string get_Display();
    public void set_Display(string value);
    public string get_Pronunciation();
    public void set_Pronunciation(string value);
    public string get_Text();
    public void set_Text(string value);
    internal virtual string DebuggerDisplayString();
    internal virtual void WriteSrgs(XmlWriter writer);
}
public class System.Speech.Recognition.StateChangedEventArgs : EventArgs {
    public RecognizerState RecognizerState { get; }
    public RecognizerState get_RecognizerState();
}
public enum System.Speech.Recognition.SubsetMatchingMode : Enum {
    public int value__;
    public static SubsetMatchingMode Subsequence;
    public static SubsetMatchingMode OrderedSubset;
    public static SubsetMatchingMode SubsequenceContentRequired;
    public static SubsetMatchingMode OrderedSubsetContentRequired;
}
public class System.Speech.Synthesis.BookmarkReachedEventArgs : PromptEventArgs {
    public TimeSpan AudioPosition { get; }
    public string Bookmark { get; }
    public TimeSpan get_AudioPosition();
    public string get_Bookmark();
}
public class System.Speech.Synthesis.FilePrompt : Prompt {
    public FilePrompt(string path, SynthesisMediaType media);
    public FilePrompt(Uri promptFile, SynthesisMediaType media);
}
public class System.Speech.Synthesis.InstalledVoice : object {
    public bool Enabled { get; public set; }
    public VoiceInfo VoiceInfo { get; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public VoiceInfo get_VoiceInfo();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Speech.Synthesis.PhonemeReachedEventArgs : PromptEventArgs {
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    public SynthesizerEmphasis Emphasis { get; }
    public string NextPhoneme { get; }
    public string Phoneme { get; }
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public SynthesizerEmphasis get_Emphasis();
    public string get_NextPhoneme();
    public string get_Phoneme();
}
public class System.Speech.Synthesis.Prompt : object {
    public bool IsCompleted { get; }
    public Prompt(PromptBuilder promptBuilder);
    public Prompt(string textToSpeak);
    public Prompt(string textToSpeak, SynthesisTextFormat media);
    public bool get_IsCompleted();
}
public enum System.Speech.Synthesis.PromptBreak : Enum {
    public int value__;
    public static PromptBreak None;
    public static PromptBreak ExtraSmall;
    public static PromptBreak Small;
    public static PromptBreak Medium;
    public static PromptBreak Large;
    public static PromptBreak ExtraLarge;
}
public class System.Speech.Synthesis.PromptBuilder : object {
    public CultureInfo Culture { get; public set; }
    public bool IsEmpty { get; }
    public PromptBuilder(CultureInfo culture);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_IsEmpty();
    public void AppendAudio(string path);
    public void AppendAudio(Uri audioFile);
    public void AppendAudio(Uri audioFile, string alternateText);
    public void AppendBookmark(string bookmarkName);
    public void AppendBreak();
    public void AppendBreak(PromptBreak strength);
    public void AppendBreak(TimeSpan duration);
    public void AppendPromptBuilder(PromptBuilder promptBuilder);
    public void AppendSsml(string path);
    public void AppendSsml(Uri ssmlFile);
    public void AppendSsml(XmlReader ssmlFile);
    [EditorBrowsableAttribute("1")]
public void AppendSsmlMarkup(string ssmlMarkup);
    public void AppendText(string textToSpeak);
    public void AppendText(string textToSpeak, PromptEmphasis emphasis);
    public void AppendText(string textToSpeak, PromptRate rate);
    public void AppendText(string textToSpeak, PromptVolume volume);
    public void AppendTextWithAlias(string textToSpeak, string substitute);
    public void AppendTextWithHint(string textToSpeak, SayAs sayAs);
    public void AppendTextWithHint(string textToSpeak, string sayAs);
    public void AppendTextWithPronunciation(string textToSpeak, string pronunciation);
    public void ClearContent();
    public void EndParagraph();
    public void EndSentence();
    public void EndStyle();
    public void EndVoice();
    public void StartParagraph();
    public void StartParagraph(CultureInfo culture);
    public void StartSentence();
    public void StartSentence(CultureInfo culture);
    public void StartStyle(PromptStyle style);
    public void StartVoice(CultureInfo culture);
    public void StartVoice(VoiceGender gender);
    public void StartVoice(VoiceGender gender, VoiceAge age);
    public void StartVoice(VoiceGender gender, VoiceAge age, int voiceAlternate);
    public void StartVoice(VoiceInfo voice);
    public void StartVoice(string name);
    public string ToXml();
}
public enum System.Speech.Synthesis.PromptEmphasis : Enum {
    public int value__;
    public static PromptEmphasis NotSet;
    public static PromptEmphasis Strong;
    public static PromptEmphasis Moderate;
    public static PromptEmphasis None;
    public static PromptEmphasis Reduced;
}
public abstract class System.Speech.Synthesis.PromptEventArgs : AsyncCompletedEventArgs {
    public Prompt Prompt { get; }
    public Prompt get_Prompt();
}
public enum System.Speech.Synthesis.PromptRate : Enum {
    public int value__;
    public static PromptRate NotSet;
    public static PromptRate ExtraFast;
    public static PromptRate Fast;
    public static PromptRate Medium;
    public static PromptRate Slow;
    public static PromptRate ExtraSlow;
}
public class System.Speech.Synthesis.PromptStyle : object {
    public PromptEmphasis Emphasis { get; public set; }
    public PromptRate Rate { get; public set; }
    public PromptVolume Volume { get; public set; }
    public PromptStyle(PromptEmphasis emphasis);
    public PromptStyle(PromptRate rate);
    public PromptStyle(PromptVolume volume);
    public PromptEmphasis get_Emphasis();
    public void set_Emphasis(PromptEmphasis value);
    public PromptRate get_Rate();
    public void set_Rate(PromptRate value);
    public PromptVolume get_Volume();
    public void set_Volume(PromptVolume value);
}
public enum System.Speech.Synthesis.PromptVolume : Enum {
    public int value__;
    public static PromptVolume NotSet;
    public static PromptVolume Silent;
    public static PromptVolume ExtraSoft;
    public static PromptVolume Soft;
    public static PromptVolume Medium;
    public static PromptVolume Loud;
    public static PromptVolume ExtraLoud;
    public static PromptVolume Default;
}
public enum System.Speech.Synthesis.SayAs : Enum {
    public int value__;
    public static SayAs SpellOut;
    public static SayAs NumberOrdinal;
    public static SayAs NumberCardinal;
    public static SayAs Date;
    public static SayAs DayMonthYear;
    public static SayAs MonthDayYear;
    public static SayAs YearMonthDay;
    public static SayAs YearMonth;
    public static SayAs MonthYear;
    public static SayAs MonthDay;
    public static SayAs DayMonth;
    public static SayAs Year;
    public static SayAs Month;
    public static SayAs Day;
    public static SayAs Time;
    public static SayAs Time24;
    public static SayAs Time12;
    public static SayAs Telephone;
    public static SayAs Text;
}
public class System.Speech.Synthesis.SpeakCompletedEventArgs : PromptEventArgs {
}
public class System.Speech.Synthesis.SpeakProgressEventArgs : PromptEventArgs {
    public TimeSpan AudioPosition { get; }
    public int CharacterCount { get; }
    public int CharacterPosition { get; }
    public string Text { get; }
    public TimeSpan get_AudioPosition();
    public int get_CharacterCount();
    public int get_CharacterPosition();
    public string get_Text();
}
public class System.Speech.Synthesis.SpeakStartedEventArgs : PromptEventArgs {
}
public class System.Speech.Synthesis.SpeechSynthesizer : object {
    public int Rate { get; public set; }
    public SynthesizerState State { get; }
    public VoiceInfo Voice { get; }
    public int Volume { get; public set; }
    public int get_Rate();
    public void set_Rate(int value);
    public SynthesizerState get_State();
    public VoiceInfo get_Voice();
    public int get_Volume();
    public void set_Volume(int value);
    public void add_BookmarkReached(EventHandler`1<BookmarkReachedEventArgs> value);
    public void remove_BookmarkReached(EventHandler`1<BookmarkReachedEventArgs> value);
    public void add_PhonemeReached(EventHandler`1<PhonemeReachedEventArgs> value);
    public void remove_PhonemeReached(EventHandler`1<PhonemeReachedEventArgs> value);
    public void add_SpeakCompleted(EventHandler`1<SpeakCompletedEventArgs> value);
    public void remove_SpeakCompleted(EventHandler`1<SpeakCompletedEventArgs> value);
    public void add_SpeakProgress(EventHandler`1<SpeakProgressEventArgs> value);
    public void remove_SpeakProgress(EventHandler`1<SpeakProgressEventArgs> value);
    public void add_SpeakStarted(EventHandler`1<SpeakStartedEventArgs> value);
    public void remove_SpeakStarted(EventHandler`1<SpeakStartedEventArgs> value);
    public void add_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public void remove_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public void add_VisemeReached(EventHandler`1<VisemeReachedEventArgs> value);
    public void remove_VisemeReached(EventHandler`1<VisemeReachedEventArgs> value);
    public void add_VoiceChange(EventHandler`1<VoiceChangeEventArgs> value);
    public void remove_VoiceChange(EventHandler`1<VoiceChangeEventArgs> value);
    public void AddLexicon(Uri uri, string mediaType);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public Prompt GetCurrentlySpokenPrompt();
    public ReadOnlyCollection`1<InstalledVoice> GetInstalledVoices();
    public ReadOnlyCollection`1<InstalledVoice> GetInstalledVoices(CultureInfo culture);
    public void Pause();
    public void RemoveLexicon(Uri uri);
    public void Resume();
    public void SelectVoice(string name);
    public void SelectVoiceByHints(VoiceGender gender);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age, int voiceAlternate);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age, int voiceAlternate, CultureInfo culture);
    public void SetOutputToAudioStream(Stream audioDestination, SpeechAudioFormatInfo formatInfo);
    public void SetOutputToDefaultAudioDevice();
    public void SetOutputToNull();
    public void SetOutputToWaveFile(string path);
    public void SetOutputToWaveFile(string path, SpeechAudioFormatInfo formatInfo);
    public void SetOutputToWaveStream(Stream audioDestination);
    public void Speak(Prompt prompt);
    public void Speak(PromptBuilder promptBuilder);
    public void Speak(string textToSpeak);
    public void SpeakAsync(Prompt prompt);
    public Prompt SpeakAsync(PromptBuilder promptBuilder);
    public Prompt SpeakAsync(string textToSpeak);
    public void SpeakAsyncCancel(Prompt prompt);
    public void SpeakAsyncCancelAll();
    public void SpeakSsml(string textToSpeak);
    public Prompt SpeakSsmlAsync(string textToSpeak);
}
public class System.Speech.Synthesis.StateChangedEventArgs : EventArgs {
    public SynthesizerState PreviousState { get; }
    public SynthesizerState State { get; }
    public SynthesizerState get_PreviousState();
    public SynthesizerState get_State();
}
public enum System.Speech.Synthesis.SynthesisMediaType : Enum {
    public int value__;
    public static SynthesisMediaType Text;
    public static SynthesisMediaType Ssml;
    public static SynthesisMediaType WaveAudio;
}
public enum System.Speech.Synthesis.SynthesisTextFormat : Enum {
    public int value__;
    public static SynthesisTextFormat Text;
    public static SynthesisTextFormat Ssml;
}
[FlagsAttribute]
public enum System.Speech.Synthesis.SynthesizerEmphasis : Enum {
    public int value__;
    public static SynthesizerEmphasis Stressed;
    public static SynthesizerEmphasis Emphasized;
}
public enum System.Speech.Synthesis.SynthesizerState : Enum {
    public int value__;
    public static SynthesizerState Ready;
    public static SynthesizerState Speaking;
    public static SynthesizerState Paused;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.ContourPoint : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public float Change { get; }
    public ContourPointChangeType ChangeType { get; }
    public float Start { get; }
    public ContourPoint(float start, float change, ContourPointChangeType changeType);
    public float get_Change();
    public ContourPointChangeType get_ChangeType();
    public float get_Start();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ContourPoint other);
    public virtual int GetHashCode();
    public static bool op_Equality(ContourPoint point1, ContourPoint point2);
    public static bool op_Inequality(ContourPoint point1, ContourPoint point2);
}
public enum System.Speech.Synthesis.TtsEngine.ContourPointChangeType : Enum {
    public int value__;
    public static ContourPointChangeType Hz;
    public static ContourPointChangeType Percentage;
}
public enum System.Speech.Synthesis.TtsEngine.EmphasisBreak : Enum {
    public int value__;
    public static EmphasisBreak Default;
    public static EmphasisBreak ExtraStrong;
    public static EmphasisBreak Strong;
    public static EmphasisBreak Medium;
    public static EmphasisBreak Weak;
    public static EmphasisBreak ExtraWeak;
    public static EmphasisBreak None;
}
public enum System.Speech.Synthesis.TtsEngine.EmphasisWord : Enum {
    public int value__;
    public static EmphasisWord Default;
    public static EmphasisWord Strong;
    public static EmphasisWord Moderate;
    public static EmphasisWord None;
    public static EmphasisWord Reduced;
}
public enum System.Speech.Synthesis.TtsEngine.EventParameterType : Enum {
    public int value__;
    public static EventParameterType Undefined;
    public static EventParameterType Token;
    public static EventParameterType Object;
    public static EventParameterType Pointer;
    public static EventParameterType String;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.FragmentState : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public TtsEngineAction Action { get; }
    public int Duration { get; }
    public int Emphasis { get; }
    public int LangId { get; }
    public Char[] Phoneme { get; }
    public Prosody Prosody { get; }
    public SayAs SayAs { get; }
    public FragmentState(TtsEngineAction action, int langId, int emphasis, int duration, SayAs sayAs, Prosody prosody, Char[] phonemes);
    public TtsEngineAction get_Action();
    public int get_Duration();
    public int get_Emphasis();
    public int get_LangId();
    public Char[] get_Phoneme();
    public Prosody get_Prosody();
    public SayAs get_SayAs();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(FragmentState other);
    public virtual int GetHashCode();
    public static bool op_Equality(FragmentState state1, FragmentState state2);
    public static bool op_Inequality(FragmentState state1, FragmentState state2);
}
public interface System.Speech.Synthesis.TtsEngine.ITtsEngineSite {
    public int Actions { get; }
    public int EventInterest { get; }
    public int Rate { get; }
    public int Volume { get; }
    public abstract virtual int get_Actions();
    public abstract virtual int get_EventInterest();
    public abstract virtual int get_Rate();
    public abstract virtual int get_Volume();
    public abstract virtual void AddEvents(SpeechEventInfo[] events, int count);
    public abstract virtual void CompleteSkip(int skipped);
    public abstract virtual SkipInfo GetSkipInfo();
    public abstract virtual Stream LoadResource(Uri uri, string mediaType);
    public abstract virtual int Write(IntPtr data, int count);
}
public class System.Speech.Synthesis.TtsEngine.Prosody : object {
    public int Duration { get; public set; }
    public ProsodyNumber Pitch { get; public set; }
    public ProsodyNumber Range { get; public set; }
    public ProsodyNumber Rate { get; public set; }
    public ProsodyNumber Volume { get; public set; }
    public int get_Duration();
    public void set_Duration(int value);
    public ProsodyNumber get_Pitch();
    public void set_Pitch(ProsodyNumber value);
    public ProsodyNumber get_Range();
    public void set_Range(ProsodyNumber value);
    public ProsodyNumber get_Rate();
    public void set_Rate(ProsodyNumber value);
    public ProsodyNumber get_Volume();
    public void set_Volume(ProsodyNumber value);
    public ContourPoint[] GetContourPoints();
    public void SetContourPoints(ContourPoint[] points);
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.ProsodyNumber : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public static int AbsoluteNumber;
    public bool IsNumberPercent { get; }
    public float Number { get; }
    public int SsmlAttributeId { get; }
    public ProsodyUnit Unit { get; }
    public ProsodyNumber(int ssmlAttributeId);
    public ProsodyNumber(float number);
    public bool get_IsNumberPercent();
    public float get_Number();
    public int get_SsmlAttributeId();
    public ProsodyUnit get_Unit();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ProsodyNumber other);
    public virtual int GetHashCode();
    public static bool op_Equality(ProsodyNumber prosodyNumber1, ProsodyNumber prosodyNumber2);
    public static bool op_Inequality(ProsodyNumber prosodyNumber1, ProsodyNumber prosodyNumber2);
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyPitch : Enum {
    public int value__;
    public static ProsodyPitch Default;
    public static ProsodyPitch ExtraLow;
    public static ProsodyPitch Low;
    public static ProsodyPitch Medium;
    public static ProsodyPitch High;
    public static ProsodyPitch ExtraHigh;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyRange : Enum {
    public int value__;
    public static ProsodyRange Default;
    public static ProsodyRange ExtraLow;
    public static ProsodyRange Low;
    public static ProsodyRange Medium;
    public static ProsodyRange High;
    public static ProsodyRange ExtraHigh;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyRate : Enum {
    public int value__;
    public static ProsodyRate Default;
    public static ProsodyRate ExtraSlow;
    public static ProsodyRate Slow;
    public static ProsodyRate Medium;
    public static ProsodyRate Fast;
    public static ProsodyRate ExtraFast;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyUnit : Enum {
    public int value__;
    public static ProsodyUnit Default;
    public static ProsodyUnit Hz;
    public static ProsodyUnit Semitone;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyVolume : Enum {
    public int value__;
    public static ProsodyVolume ExtraLoud;
    public static ProsodyVolume Loud;
    public static ProsodyVolume Medium;
    public static ProsodyVolume Soft;
    public static ProsodyVolume ExtraSoft;
    public static ProsodyVolume Silent;
    public static ProsodyVolume Default;
}
public class System.Speech.Synthesis.TtsEngine.SayAs : object {
    public string Detail { get; public set; }
    public string Format { get; public set; }
    public string InterpretAs { get; public set; }
    public string get_Detail();
    public void set_Detail(string value);
    public string get_Format();
    public void set_Format(string value);
    public string get_InterpretAs();
    public void set_InterpretAs(string value);
}
public class System.Speech.Synthesis.TtsEngine.SkipInfo : object {
    public int Count { get; public set; }
    public int Type { get; public set; }
    public int get_Count();
    public void set_Count(int value);
    public int get_Type();
    public void set_Type(int value);
}
public enum System.Speech.Synthesis.TtsEngine.SpeakOutputFormat : Enum {
    public int value__;
    public static SpeakOutputFormat WaveFormat;
    public static SpeakOutputFormat Text;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.SpeechEventInfo : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public short EventId { get; }
    public int Param1 { get; }
    public IntPtr Param2 { get; }
    public short ParameterType { get; }
    public SpeechEventInfo(short eventId, short parameterType, int param1, IntPtr param2);
    public short get_EventId();
    public int get_Param1();
    public IntPtr get_Param2();
    public short get_ParameterType();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SpeechEventInfo other);
    public virtual int GetHashCode();
    public static bool op_Equality(SpeechEventInfo event1, SpeechEventInfo event2);
    public static bool op_Inequality(SpeechEventInfo event1, SpeechEventInfo event2);
}
public class System.Speech.Synthesis.TtsEngine.TextFragment : object {
    public FragmentState State { get; public set; }
    public int TextLength { get; public set; }
    public int TextOffset { get; public set; }
    public string TextToSpeak { get; public set; }
    public FragmentState get_State();
    public void set_State(FragmentState value);
    public int get_TextLength();
    public void set_TextLength(int value);
    public int get_TextOffset();
    public void set_TextOffset(int value);
    public string get_TextToSpeak();
    public void set_TextToSpeak(string value);
}
public enum System.Speech.Synthesis.TtsEngine.TtsEngineAction : Enum {
    public int value__;
    public static TtsEngineAction Speak;
    public static TtsEngineAction Silence;
    public static TtsEngineAction Pronounce;
    public static TtsEngineAction Bookmark;
    public static TtsEngineAction SpellOut;
    public static TtsEngineAction StartSentence;
    public static TtsEngineAction StartParagraph;
    public static TtsEngineAction ParseUnknownTag;
}
public abstract class System.Speech.Synthesis.TtsEngine.TtsEngineSsml : object {
    protected TtsEngineSsml(string registryKey);
    public abstract virtual void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site);
    public abstract virtual IntPtr GetOutputFormat(SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);
    public abstract virtual void RemoveLexicon(Uri uri, ITtsEngineSite site);
    public abstract virtual void Speak(TextFragment[] fragment, IntPtr waveHeader, ITtsEngineSite site);
}
public enum System.Speech.Synthesis.TtsEngine.TtsEventId : Enum {
    public int value__;
    public static TtsEventId StartInputStream;
    public static TtsEventId EndInputStream;
    public static TtsEventId VoiceChange;
    public static TtsEventId Bookmark;
    public static TtsEventId WordBoundary;
    public static TtsEventId Phoneme;
    public static TtsEventId SentenceBoundary;
    public static TtsEventId Viseme;
    public static TtsEventId AudioLevel;
}
public class System.Speech.Synthesis.VisemeReachedEventArgs : PromptEventArgs {
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    public SynthesizerEmphasis Emphasis { get; }
    public int NextViseme { get; }
    public int Viseme { get; }
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public SynthesizerEmphasis get_Emphasis();
    public int get_NextViseme();
    public int get_Viseme();
}
public enum System.Speech.Synthesis.VoiceAge : Enum {
    public int value__;
    public static VoiceAge NotSet;
    public static VoiceAge Child;
    public static VoiceAge Teen;
    public static VoiceAge Adult;
    public static VoiceAge Senior;
}
public class System.Speech.Synthesis.VoiceChangeEventArgs : PromptEventArgs {
    public VoiceInfo Voice { get; }
    public VoiceInfo get_Voice();
}
public enum System.Speech.Synthesis.VoiceGender : Enum {
    public int value__;
    public static VoiceGender NotSet;
    public static VoiceGender Male;
    public static VoiceGender Female;
    public static VoiceGender Neutral;
}
public class System.Speech.Synthesis.VoiceInfo : object {
    [EditorBrowsableAttribute("2")]
public IDictionary`2<string, string> AdditionalInfo { get; }
    public VoiceAge Age { get; }
    public CultureInfo Culture { get; }
    public string Description { get; }
    public VoiceGender Gender { get; }
    public string Id { get; }
    public string Name { get; }
    [EditorBrowsableAttribute("2")]
public ReadOnlyCollection`1<SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    public IDictionary`2<string, string> get_AdditionalInfo();
    public VoiceAge get_Age();
    public CultureInfo get_Culture();
    public string get_Description();
    public VoiceGender get_Gender();
    public string get_Id();
    public string get_Name();
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> get_SupportedAudioFormats();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string PlatformNotSupported_SystemSpeech { get; }
    internal static string NullParamIllegal { get; }
    internal static string ArrayOfNullIllegal { get; }
    internal static string ParamsEntryNullIllegal { get; }
    internal static string Unavailable { get; }
    internal static string UnexpectedError { get; }
    internal static string CollectionReadOnly { get; }
    internal static string StringCanNotBeEmpty { get; }
    internal static string EnumInvalid { get; }
    internal static string NotSupportedWithThisVersionOfSAPI { get; }
    internal static string NotSupportedWithThisVersionOfSAPI2 { get; }
    internal static string NotSupportedWithThisVersionOfSAPIBaseUri { get; }
    internal static string NotSupportedWithThisVersionOfSAPITagFormat { get; }
    internal static string NotSupportedWithThisVersionOfSAPICompareOption { get; }
    internal static string MustBeGreaterThanZero { get; }
    internal static string InvalidXml { get; }
    internal static string OperationAborted { get; }
    internal static string InvariantCultureInfo { get; }
    internal static string DuplicatedEntry { get; }
    internal static string StreamMustBeReadable { get; }
    internal static string StreamMustBeWriteable { get; }
    internal static string StreamMustBeSeekable { get; }
    internal static string StreamEndedUnexpectedly { get; }
    internal static string CannotReadFromDirectory { get; }
    internal static string UnknownMimeFormat { get; }
    internal static string CannotLoadResourceFromManifest { get; }
    internal static string TokenInUse { get; }
    internal static string TokenDeleted { get; }
    internal static string TokenUninitialized { get; }
    internal static string InvalidTokenId { get; }
    internal static string NotFound { get; }
    internal static string NoBackSlash { get; }
    internal static string InvalidRegistryEntry { get; }
    internal static string TokenCannotCreateInstance { get; }
    internal static string InvalidXmlFormat { get; }
    internal static string IncorrectAttributeValue { get; }
    internal static string MissingRequiredAttribute { get; }
    internal static string InvalidRuleRefSelf { get; }
    internal static string InvalidDynamicExport { get; }
    internal static string InvalidToken { get; }
    internal static string MetaNameHTTPEquiv { get; }
    internal static string EmptyRule { get; }
    internal static string InvalidTokenString { get; }
    internal static string InvalidQuotedString { get; }
    internal static string ExportDynamicRule { get; }
    internal static string EmptyDisplayString { get; }
    internal static string EmptyPronunciationString { get; }
    internal static string InvalidPhoneme { get; }
    internal static string MuliplePronunciationString { get; }
    internal static string MultipleDisplayString { get; }
    internal static string RuleRedefinition { get; }
    internal static string EmptyOneOf { get; }
    internal static string InvalidGrammarOrdering { get; }
    internal static string MinMaxOutOfRange { get; }
    internal static string InvalidExampleOrdering { get; }
    internal static string GrammarDefTwice { get; }
    internal static string UnsupportedFormat { get; }
    internal static string InvalidImport { get; }
    internal static string DuplicatedRuleName { get; }
    internal static string RootRuleAlreadyDefined { get; }
    internal static string RuleNameIdConflict { get; }
    internal static string RuleNotDynamic { get; }
    internal static string StateWithNoArcs { get; }
    internal static string NoTerminatingRulePath { get; }
    internal static string RuleRefNoUri { get; }
    internal static string UnavailableProperty { get; }
    internal static string MinGreaterThanMax { get; }
    internal static string ReqConfidenceNotSupported { get; }
    internal static string SapiPropertiesAndSemantics { get; }
    internal static string InvalidAttributeDefinedTwice { get; }
    internal static string GrammarCompilerError { get; }
    internal static string RuleScriptNotFound { get; }
    internal static string DynamicRuleNotFound { get; }
    internal static string RuleScriptInvalidParameters { get; }
    internal static string RuleScriptInvalidReturnType { get; }
    internal static string NoClassname { get; }
    internal static string EmbeddedClassLibraryFailed { get; }
    internal static string CannotFindClass { get; }
    internal static string StrongTypedGrammarNotAGrammar { get; }
    internal static string NoScriptsForRules { get; }
    internal static string ClassNotPublic { get; }
    internal static string MethodNotPublic { get; }
    internal static string IncompatibleLanguageProperties { get; }
    internal static string IncompatibleNamespaceProperties { get; }
    internal static string IncompatibleDebugProperties { get; }
    internal static string CannotLoadDotNetSemanticCode { get; }
    internal static string InvalidSemanticProcessingType { get; }
    internal static string InvalidScriptDefinition { get; }
    internal static string InvalidMethodName { get; }
    internal static string ConstructorNotAllowed { get; }
    internal static string OverloadNotAllowed { get; }
    internal static string OnInitOnPublicRule { get; }
    internal static string ArgumentMismatch { get; }
    internal static string CantGetPropertyFromSerializedInfo { get; }
    internal static string CantFindAConstructor { get; }
    internal static string TooManyArcs { get; }
    internal static string TooManyRulesWithSemanticsGlobals { get; }
    internal static string MaxTransitionsCount { get; }
    internal static string UnknownElement { get; }
    internal static string CircularRuleRef { get; }
    internal static string InvalidFlagsSet { get; }
    internal static string RuleDefinedMultipleTimes { get; }
    internal static string RuleDefinedMultipleTimes2 { get; }
    internal static string RuleNotDefined { get; }
    internal static string RootNotDefined { get; }
    internal static string InvalidLanguage { get; }
    internal static string InvalidRuleId { get; }
    internal static string InvalidRepeatProbability { get; }
    internal static string InvalidConfidence { get; }
    internal static string InvalidMinRepeat { get; }
    internal static string InvalidMaxRepeat { get; }
    internal static string InvalidWeight { get; }
    internal static string InvalidName { get; }
    internal static string InvalidValueType { get; }
    internal static string TagFormatNotSet { get; }
    internal static string NoName { get; }
    internal static string NoName1 { get; }
    internal static string InvalidSpecialRuleRef { get; }
    internal static string InvalidRuleRef { get; }
    internal static string InvalidNotEmptyElement { get; }
    internal static string InvalidEmptyElement { get; }
    internal static string InvalidEmptyRule { get; }
    internal static string UndefRuleRef { get; }
    internal static string UnsupportedLanguage { get; }
    internal static string UnsupportedPhoneticAlphabet { get; }
    internal static string UnsupportedLexicon { get; }
    internal static string InvalidScriptAttribute { get; }
    internal static string NoLanguageSet { get; }
    internal static string MethodAttributeDefinedMultipleTimes { get; }
    internal static string RuleAttributeDefinedMultipleTimes { get; }
    internal static string InvalidAssemblyReferenceAttribute { get; }
    internal static string InvalidImportNamespaceAttribute { get; }
    internal static string NoUriForSpecialRuleRef { get; }
    internal static string NoAliasForSpecialRuleRef { get; }
    internal static string NoSmlData { get; }
    internal static string InvalidNameValueProperty { get; }
    internal static string InvalidTagInAnEmptyItem { get; }
    internal static string InvalidSrgs { get; }
    internal static string InvalidSrgsNamespace { get; }
    internal static string Line { get; }
    internal static string Position { get; }
    internal static string InvalidVersion { get; }
    internal static string InvalidTagFormat { get; }
    internal static string MissingTagFormat { get; }
    internal static string InvalidGrammarMode { get; }
    internal static string InvalidGrammarAttribute { get; }
    internal static string InvalidRuleAttribute { get; }
    internal static string InvalidRulerefAttribute { get; }
    internal static string InvalidOneOfAttribute { get; }
    internal static string InvalidItemAttribute { get; }
    internal static string InvalidTokenAttribute { get; }
    internal static string InvalidItemRepeatAttribute { get; }
    internal static string InvalidReqConfAttribute { get; }
    internal static string InvalidTagAttribute { get; }
    internal static string InvalidLexiconAttribute { get; }
    internal static string InvalidMetaAttribute { get; }
    internal static string InvalidItemAttribute2 { get; }
    internal static string InvalidElement { get; }
    internal static string InvalidRuleScope { get; }
    internal static string InvalidDynamicSetting { get; }
    internal static string InvalidSubsetAttribute { get; }
    internal static string InvalidVoiceElementInPromptOutput { get; }
    internal static string NoRuleId { get; }
    internal static string PromptBuilderInvalideState { get; }
    internal static string PromptBuilderStateEnded { get; }
    internal static string PromptBuilderStateSentence { get; }
    internal static string PromptBuilderStateParagraph { get; }
    internal static string PromptBuilderStateVoice { get; }
    internal static string PromptBuilderStateStyle { get; }
    internal static string PromptBuilderAgeOutOfRange { get; }
    internal static string PromptBuilderMismatchStyle { get; }
    internal static string PromptBuilderMismatchVoice { get; }
    internal static string PromptBuilderMismatchParagraph { get; }
    internal static string PromptBuilderMismatchSentence { get; }
    internal static string PromptBuilderNestedParagraph { get; }
    internal static string PromptBuilderNestedSentence { get; }
    internal static string PromptBuilderInvalidAttribute { get; }
    internal static string PromptBuilderInvalidElement { get; }
    internal static string PromptBuilderInvalidVariant { get; }
    internal static string PromptBuilderDatabaseName { get; }
    internal static string PromptAsyncOperationCancelled { get; }
    internal static string SynthesizerPauseResumeMismatched { get; }
    internal static string SynthesizerInvalidMediaType { get; }
    internal static string SynthesizerUnknownMediaType { get; }
    internal static string SynthesizerSpeakError { get; }
    internal static string SynthesizerInvalidWaveFile { get; }
    internal static string SynthesizerPromptInUse { get; }
    internal static string SynthesizerUnknownPriority { get; }
    internal static string SynthesizerUnknownEvent { get; }
    internal static string SynthesizerVoiceFailed { get; }
    internal static string SynthesizerSetVoiceNoMatch { get; }
    internal static string SynthesizerNoCulture { get; }
    internal static string SynthesizerSyncSpeakWhilePaused { get; }
    internal static string SynthesizerSyncSetOutputWhilePaused { get; }
    internal static string SynthesizerNoCulture2 { get; }
    internal static string SynthesizerNoSpeak { get; }
    internal static string SynthesizerSetOutputSpeaking { get; }
    internal static string InvalidSpeakAttribute { get; }
    internal static string UnsupportedAlphabet { get; }
    internal static string GrammarInvalidWeight { get; }
    internal static string GrammarInvalidPriority { get; }
    internal static string DictationInvalidTopic { get; }
    internal static string DictationTopicNotFound { get; }
    internal static string RecognizerGrammarNotFound { get; }
    internal static string RecognizerRuleNotFound { get; }
    internal static string RecognizerInvalidBinaryGrammar { get; }
    internal static string RecognizerRuleNotFoundStream { get; }
    internal static string RecognizerNoRootRuleToActivate { get; }
    internal static string RecognizerNoRootRuleToActivate1 { get; }
    internal static string RecognizerRuleActivationFailed { get; }
    internal static string RecognizerAlreadyRecognizing { get; }
    internal static string RecognizerHasNoGrammar { get; }
    internal static string NegativeTimesNotSupported { get; }
    internal static string AudioDeviceFormatError { get; }
    internal static string AudioDeviceError { get; }
    internal static string AudioDeviceInternalError { get; }
    internal static string RecognizerNotFound { get; }
    internal static string RecognizerNotEnabled { get; }
    internal static string RecognitionNotSupported { get; }
    internal static string RecognitionNotSupportedOn64bit { get; }
    internal static string GrammarAlreadyLoaded { get; }
    internal static string RecognizerNoInputSource { get; }
    internal static string GrammarNotLoaded { get; }
    internal static string GrammarLoadingInProgress { get; }
    internal static string GrammarLoadFailed { get; }
    internal static string GrammarWrongRecognizer { get; }
    internal static string NotSupportedOnDictationGrammars { get; }
    internal static string LocalFilesOnly { get; }
    internal static string NotValidAudioFile { get; }
    internal static string NotValidAudioStream { get; }
    internal static string FileNotFound { get; }
    internal static string CannotSetPriorityOnDictation { get; }
    internal static string RecognizerUpdateTableTooLarge { get; }
    internal static string MaxAlternatesInvalid { get; }
    internal static string RecognizerSettingGetError { get; }
    internal static string RecognizerSettingUpdateError { get; }
    internal static string RecognizerSettingNotSupported { get; }
    internal static string ResourceUsageOutOfRange { get; }
    internal static string RateOutOfRange { get; }
    internal static string EndSilenceOutOfRange { get; }
    internal static string RejectionThresholdOutOfRange { get; }
    internal static string ReferencedGrammarNotFound { get; }
    internal static string SapiErrorRuleNotFound2 { get; }
    internal static string NoAudioAvailable { get; }
    internal static string ResultNotGrammarAvailable { get; }
    internal static string ResultInvalidFormat { get; }
    internal static string UnhandledVariant { get; }
    internal static string DupSemanticKey { get; }
    internal static string DupSemanticValue { get; }
    internal static string CannotUseCustomFormat { get; }
    internal static string NoPromptEngine { get; }
    internal static string NoPromptEngineInterface { get; }
    internal static string SeekNotSupported { get; }
    internal static string ExtraDataNotPresent { get; }
    internal static string BitsPerSampleInvalid { get; }
    internal static string DataBlockSizeInvalid { get; }
    internal static string NotWholeNumberBlocks { get; }
    internal static string BlockSignatureInvalid { get; }
    internal static string NumberOfSamplesInvalid { get; }
    internal static string SapiErrorUninitialized { get; }
    internal static string SapiErrorAlreadyInitialized { get; }
    internal static string SapiErrorNotSupportedFormat { get; }
    internal static string SapiErrorInvalidFlags { get; }
    internal static string SapiErrorEndOfStream { get; }
    internal static string SapiErrorDeviceBusy { get; }
    internal static string SapiErrorDeviceNotSupported { get; }
    internal static string SapiErrorDeviceNotEnabled { get; }
    internal static string SapiErrorNoDriver { get; }
    internal static string SapiErrorFileMustBeUnicode { get; }
    internal static string InsufficientData { get; }
    internal static string SapiErrorInvalidPhraseID { get; }
    internal static string SapiErrorBufferTooSmall { get; }
    internal static string SapiErrorFormatNotSpecified { get; }
    internal static string SapiErrorAudioStopped0 { get; }
    internal static string AudioPaused { get; }
    internal static string SapiErrorRuleNotFound { get; }
    internal static string SapiErrorTTSEngineException { get; }
    internal static string SapiErrorTTSNLPException { get; }
    internal static string SapiErrorEngineBUSY { get; }
    internal static string AudioConversionEnabled { get; }
    internal static string NoHypothesisAvailable { get; }
    internal static string SapiErrorCantCreate { get; }
    internal static string AlreadyInLex { get; }
    internal static string SapiErrorNotInLex { get; }
    internal static string LexNothingToSync { get; }
    internal static string SapiErrorLexVeryOutOfSync { get; }
    internal static string SapiErrorUndefinedForwardRuleRef { get; }
    internal static string SapiErrorEmptyRule { get; }
    internal static string SapiErrorGrammarCompilerInternalError { get; }
    internal static string SapiErrorRuleNotDynamic { get; }
    internal static string SapiErrorDuplicateRuleName { get; }
    internal static string SapiErrorDuplicateResourceName { get; }
    internal static string SapiErrorTooManyGrammars { get; }
    internal static string SapiErrorCircularReference { get; }
    internal static string SapiErrorInvalidImport { get; }
    internal static string SapiErrorInvalidWAVFile { get; }
    internal static string RequestPending { get; }
    internal static string SapiErrorAllWordsOptional { get; }
    internal static string SapiErrorInstanceChangeInvalid { get; }
    internal static string SapiErrorRuleNameIdConflict { get; }
    internal static string SapiErrorNoRules { get; }
    internal static string SapiErrorCircularRuleRef { get; }
    internal static string NoParseFound { get; }
    internal static string SapiErrorInvalidHandle { get; }
    internal static string SapiErrorRemoteCallTimedout { get; }
    internal static string SapiErrorAudioBufferOverflow { get; }
    internal static string SapiErrorNoAudioData { get; }
    internal static string SapiErrorDeadAlternate { get; }
    internal static string SapiErrorHighLowConfidence { get; }
    internal static string SapiErrorInvalidFormatString { get; }
    internal static string SPNotSupportedOnStreamInput { get; }
    internal static string SapiErrorAppLexReadOnly { get; }
    internal static string SapiErrorNoTerminatingRulePath { get; }
    internal static string WordExistsWithoutPronunciation { get; }
    internal static string SapiErrorStreamClosed { get; }
    internal static string SapiErrorNoMoreItems { get; }
    internal static string SapiErrorNotFound { get; }
    internal static string SapiErrorInvalidAudioState { get; }
    internal static string SapiErrorGenericMMSYS { get; }
    internal static string SapiErrorMarshalerException { get; }
    internal static string SapiErrorNotDynamicGrammar { get; }
    internal static string SapiErrorAmbiguousProperty { get; }
    internal static string SapiErrorInvalidRegistrykey { get; }
    internal static string SapiErrorInvalidTokenId { get; }
    internal static string SapiErrorXMLBadSyntax { get; }
    internal static string SapiErrorXMLResourceNotFound { get; }
    internal static string SapiErrorTokenInUse { get; }
    internal static string SapiErrorTokenDeleted { get; }
    internal static string SapiErrorMultilingualNotSupported { get; }
    internal static string SapiErrorExportDynamicRule { get; }
    internal static string SapiErrorSTGF { get; }
    internal static string SapiErrorWordFormat { get; }
    internal static string SapiErrorStreamNotActive { get; }
    internal static string SapiErrorEngineResponseInvalid { get; }
    internal static string SapiErrorSREngineException { get; }
    internal static string SapiErrorStreamPosInvalid { get; }
    internal static string SapiErrorRecognizerInactive { get; }
    internal static string SapiErrorRemoteCallOnWrongThread { get; }
    internal static string SapiErrorRemoteProcessTerminated { get; }
    internal static string SapiErrorRemoteProcessAlreadyRunning { get; }
    internal static string SapiErrorLangIdMismatch { get; }
    internal static string SapiErrorPartialParseFound { get; }
    internal static string SapiErrorNotTopLevelRule { get; }
    internal static string SapiErrorNoRuleActive { get; }
    internal static string SapiErrorLexRequiresCookie { get; }
    internal static string SapiErrorStreamUninitialized { get; }
    internal static string SapiErrorUnused0 { get; }
    internal static string SapiErrorUnused1 { get; }
    internal static string SapiErrorUnused2 { get; }
    internal static string SapiErrorUnused3 { get; }
    internal static string SapiErrorUnused4 { get; }
    internal static string SapiErrorUnused5 { get; }
    internal static string SapiErrorUnused6 { get; }
    internal static string SapiErrorUnused7 { get; }
    internal static string SapiErrorUnused8 { get; }
    internal static string SapiErrorUnused9 { get; }
    internal static string SapiErrorUnused10 { get; }
    internal static string SapiErrorUnused11 { get; }
    internal static string SapiErrorUnused12 { get; }
    internal static string SapiErrorNotSupportedLang { get; }
    internal static string SapiErrorVoicePaused { get; }
    internal static string SapiErrorAudioBufferUnderflow { get; }
    internal static string SapiErrorAudioStoppedUnexpectedly { get; }
    internal static string SapiErrorNoWordPronunciation { get; }
    internal static string SapiErrorAlternatesWouldBeInconsistent { get; }
    internal static string SapiErrorNotSupportedForSharedRecognizer { get; }
    internal static string SapiErrorTimeOut { get; }
    internal static string SapiErrorReenterSynchronize { get; }
    internal static string SapiErrorStateWithNoArcs { get; }
    internal static string SapiErrorNotActiveSession { get; }
    internal static string SapiErrorAlreadyDeleted { get; }
    internal static string SapiErrorAudioStopped { get; }
    internal static string SapiErrorRecoXMLGenerationFail { get; }
    internal static string SapiErrorSMLGenerationFail { get; }
    internal static string SapiErrorNotPromptVoice { get; }
    internal static string SapiErrorRootRuleAlreadyDefined { get; }
    internal static string SapiErrorScriptDisallowed { get; }
    internal static string SapiErrorRemoteCallTimedOutStart { get; }
    internal static string SapiErrorRemoteCallTimedOutConnect { get; }
    internal static string SapiErrorSecMgrChangeNotAllowed { get; }
    internal static string SapiErrorCompleteButExtendable { get; }
    internal static string SapiErrorFailedToDeleteFile { get; }
    internal static string SapiErrorSharedEngineDisabled { get; }
    internal static string SapiErrorRecognizerNotFound { get; }
    internal static string SapiErrorAudioNotFound { get; }
    internal static string SapiErrorNoVowel { get; }
    internal static string SapiErrorNotSupportedPhoneme { get; }
    internal static string SapiErrorNoRulesToActivate { get; }
    internal static string SapiErrorNoWordEntryNotification { get; }
    internal static string SapiErrorWordNeedsNormalization { get; }
    internal static string SapiErrorCannotNormalize { get; }
    internal static string LimitReached { get; }
    internal static string NotSupported { get; }
    internal static string SapiErrorTopicNotAdaptable { get; }
    internal static string SapiErrorPhonemeConversion { get; }
    internal static string SapiErrorNotSupportedForInprocRecognizer { get; }
    internal static string SapiLexInvalidData { get; }
    internal static string SapiLexUnexpectedFormat { get; }
    internal static string SapiNonWordTransition { get; }
    internal static string SapiSisrAttributesNotAllowed { get; }
    internal static string SapiSisrMixedNotAllowed { get; }
    internal static string SapiStringEmpty { get; }
    internal static string SapiStringTooLong { get; }
    internal static string SapiVoiceNotFound { get; }
    internal static string SapiErrorOverload { get; }
    internal static string SapiConfigInvalidData { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_PlatformNotSupported_SystemSpeech();
    internal static string get_NullParamIllegal();
    internal static string get_ArrayOfNullIllegal();
    internal static string get_ParamsEntryNullIllegal();
    internal static string get_Unavailable();
    internal static string get_UnexpectedError();
    internal static string get_CollectionReadOnly();
    internal static string get_StringCanNotBeEmpty();
    internal static string get_EnumInvalid();
    internal static string get_NotSupportedWithThisVersionOfSAPI();
    internal static string get_NotSupportedWithThisVersionOfSAPI2();
    internal static string get_NotSupportedWithThisVersionOfSAPIBaseUri();
    internal static string get_NotSupportedWithThisVersionOfSAPITagFormat();
    internal static string get_NotSupportedWithThisVersionOfSAPICompareOption();
    internal static string get_MustBeGreaterThanZero();
    internal static string get_InvalidXml();
    internal static string get_OperationAborted();
    internal static string get_InvariantCultureInfo();
    internal static string get_DuplicatedEntry();
    internal static string get_StreamMustBeReadable();
    internal static string get_StreamMustBeWriteable();
    internal static string get_StreamMustBeSeekable();
    internal static string get_StreamEndedUnexpectedly();
    internal static string get_CannotReadFromDirectory();
    internal static string get_UnknownMimeFormat();
    internal static string get_CannotLoadResourceFromManifest();
    internal static string get_TokenInUse();
    internal static string get_TokenDeleted();
    internal static string get_TokenUninitialized();
    internal static string get_InvalidTokenId();
    internal static string get_NotFound();
    internal static string get_NoBackSlash();
    internal static string get_InvalidRegistryEntry();
    internal static string get_TokenCannotCreateInstance();
    internal static string get_InvalidXmlFormat();
    internal static string get_IncorrectAttributeValue();
    internal static string get_MissingRequiredAttribute();
    internal static string get_InvalidRuleRefSelf();
    internal static string get_InvalidDynamicExport();
    internal static string get_InvalidToken();
    internal static string get_MetaNameHTTPEquiv();
    internal static string get_EmptyRule();
    internal static string get_InvalidTokenString();
    internal static string get_InvalidQuotedString();
    internal static string get_ExportDynamicRule();
    internal static string get_EmptyDisplayString();
    internal static string get_EmptyPronunciationString();
    internal static string get_InvalidPhoneme();
    internal static string get_MuliplePronunciationString();
    internal static string get_MultipleDisplayString();
    internal static string get_RuleRedefinition();
    internal static string get_EmptyOneOf();
    internal static string get_InvalidGrammarOrdering();
    internal static string get_MinMaxOutOfRange();
    internal static string get_InvalidExampleOrdering();
    internal static string get_GrammarDefTwice();
    internal static string get_UnsupportedFormat();
    internal static string get_InvalidImport();
    internal static string get_DuplicatedRuleName();
    internal static string get_RootRuleAlreadyDefined();
    internal static string get_RuleNameIdConflict();
    internal static string get_RuleNotDynamic();
    internal static string get_StateWithNoArcs();
    internal static string get_NoTerminatingRulePath();
    internal static string get_RuleRefNoUri();
    internal static string get_UnavailableProperty();
    internal static string get_MinGreaterThanMax();
    internal static string get_ReqConfidenceNotSupported();
    internal static string get_SapiPropertiesAndSemantics();
    internal static string get_InvalidAttributeDefinedTwice();
    internal static string get_GrammarCompilerError();
    internal static string get_RuleScriptNotFound();
    internal static string get_DynamicRuleNotFound();
    internal static string get_RuleScriptInvalidParameters();
    internal static string get_RuleScriptInvalidReturnType();
    internal static string get_NoClassname();
    internal static string get_EmbeddedClassLibraryFailed();
    internal static string get_CannotFindClass();
    internal static string get_StrongTypedGrammarNotAGrammar();
    internal static string get_NoScriptsForRules();
    internal static string get_ClassNotPublic();
    internal static string get_MethodNotPublic();
    internal static string get_IncompatibleLanguageProperties();
    internal static string get_IncompatibleNamespaceProperties();
    internal static string get_IncompatibleDebugProperties();
    internal static string get_CannotLoadDotNetSemanticCode();
    internal static string get_InvalidSemanticProcessingType();
    internal static string get_InvalidScriptDefinition();
    internal static string get_InvalidMethodName();
    internal static string get_ConstructorNotAllowed();
    internal static string get_OverloadNotAllowed();
    internal static string get_OnInitOnPublicRule();
    internal static string get_ArgumentMismatch();
    internal static string get_CantGetPropertyFromSerializedInfo();
    internal static string get_CantFindAConstructor();
    internal static string get_TooManyArcs();
    internal static string get_TooManyRulesWithSemanticsGlobals();
    internal static string get_MaxTransitionsCount();
    internal static string get_UnknownElement();
    internal static string get_CircularRuleRef();
    internal static string get_InvalidFlagsSet();
    internal static string get_RuleDefinedMultipleTimes();
    internal static string get_RuleDefinedMultipleTimes2();
    internal static string get_RuleNotDefined();
    internal static string get_RootNotDefined();
    internal static string get_InvalidLanguage();
    internal static string get_InvalidRuleId();
    internal static string get_InvalidRepeatProbability();
    internal static string get_InvalidConfidence();
    internal static string get_InvalidMinRepeat();
    internal static string get_InvalidMaxRepeat();
    internal static string get_InvalidWeight();
    internal static string get_InvalidName();
    internal static string get_InvalidValueType();
    internal static string get_TagFormatNotSet();
    internal static string get_NoName();
    internal static string get_NoName1();
    internal static string get_InvalidSpecialRuleRef();
    internal static string get_InvalidRuleRef();
    internal static string get_InvalidNotEmptyElement();
    internal static string get_InvalidEmptyElement();
    internal static string get_InvalidEmptyRule();
    internal static string get_UndefRuleRef();
    internal static string get_UnsupportedLanguage();
    internal static string get_UnsupportedPhoneticAlphabet();
    internal static string get_UnsupportedLexicon();
    internal static string get_InvalidScriptAttribute();
    internal static string get_NoLanguageSet();
    internal static string get_MethodAttributeDefinedMultipleTimes();
    internal static string get_RuleAttributeDefinedMultipleTimes();
    internal static string get_InvalidAssemblyReferenceAttribute();
    internal static string get_InvalidImportNamespaceAttribute();
    internal static string get_NoUriForSpecialRuleRef();
    internal static string get_NoAliasForSpecialRuleRef();
    internal static string get_NoSmlData();
    internal static string get_InvalidNameValueProperty();
    internal static string get_InvalidTagInAnEmptyItem();
    internal static string get_InvalidSrgs();
    internal static string get_InvalidSrgsNamespace();
    internal static string get_Line();
    internal static string get_Position();
    internal static string get_InvalidVersion();
    internal static string get_InvalidTagFormat();
    internal static string get_MissingTagFormat();
    internal static string get_InvalidGrammarMode();
    internal static string get_InvalidGrammarAttribute();
    internal static string get_InvalidRuleAttribute();
    internal static string get_InvalidRulerefAttribute();
    internal static string get_InvalidOneOfAttribute();
    internal static string get_InvalidItemAttribute();
    internal static string get_InvalidTokenAttribute();
    internal static string get_InvalidItemRepeatAttribute();
    internal static string get_InvalidReqConfAttribute();
    internal static string get_InvalidTagAttribute();
    internal static string get_InvalidLexiconAttribute();
    internal static string get_InvalidMetaAttribute();
    internal static string get_InvalidItemAttribute2();
    internal static string get_InvalidElement();
    internal static string get_InvalidRuleScope();
    internal static string get_InvalidDynamicSetting();
    internal static string get_InvalidSubsetAttribute();
    internal static string get_InvalidVoiceElementInPromptOutput();
    internal static string get_NoRuleId();
    internal static string get_PromptBuilderInvalideState();
    internal static string get_PromptBuilderStateEnded();
    internal static string get_PromptBuilderStateSentence();
    internal static string get_PromptBuilderStateParagraph();
    internal static string get_PromptBuilderStateVoice();
    internal static string get_PromptBuilderStateStyle();
    internal static string get_PromptBuilderAgeOutOfRange();
    internal static string get_PromptBuilderMismatchStyle();
    internal static string get_PromptBuilderMismatchVoice();
    internal static string get_PromptBuilderMismatchParagraph();
    internal static string get_PromptBuilderMismatchSentence();
    internal static string get_PromptBuilderNestedParagraph();
    internal static string get_PromptBuilderNestedSentence();
    internal static string get_PromptBuilderInvalidAttribute();
    internal static string get_PromptBuilderInvalidElement();
    internal static string get_PromptBuilderInvalidVariant();
    internal static string get_PromptBuilderDatabaseName();
    internal static string get_PromptAsyncOperationCancelled();
    internal static string get_SynthesizerPauseResumeMismatched();
    internal static string get_SynthesizerInvalidMediaType();
    internal static string get_SynthesizerUnknownMediaType();
    internal static string get_SynthesizerSpeakError();
    internal static string get_SynthesizerInvalidWaveFile();
    internal static string get_SynthesizerPromptInUse();
    internal static string get_SynthesizerUnknownPriority();
    internal static string get_SynthesizerUnknownEvent();
    internal static string get_SynthesizerVoiceFailed();
    internal static string get_SynthesizerSetVoiceNoMatch();
    internal static string get_SynthesizerNoCulture();
    internal static string get_SynthesizerSyncSpeakWhilePaused();
    internal static string get_SynthesizerSyncSetOutputWhilePaused();
    internal static string get_SynthesizerNoCulture2();
    internal static string get_SynthesizerNoSpeak();
    internal static string get_SynthesizerSetOutputSpeaking();
    internal static string get_InvalidSpeakAttribute();
    internal static string get_UnsupportedAlphabet();
    internal static string get_GrammarInvalidWeight();
    internal static string get_GrammarInvalidPriority();
    internal static string get_DictationInvalidTopic();
    internal static string get_DictationTopicNotFound();
    internal static string get_RecognizerGrammarNotFound();
    internal static string get_RecognizerRuleNotFound();
    internal static string get_RecognizerInvalidBinaryGrammar();
    internal static string get_RecognizerRuleNotFoundStream();
    internal static string get_RecognizerNoRootRuleToActivate();
    internal static string get_RecognizerNoRootRuleToActivate1();
    internal static string get_RecognizerRuleActivationFailed();
    internal static string get_RecognizerAlreadyRecognizing();
    internal static string get_RecognizerHasNoGrammar();
    internal static string get_NegativeTimesNotSupported();
    internal static string get_AudioDeviceFormatError();
    internal static string get_AudioDeviceError();
    internal static string get_AudioDeviceInternalError();
    internal static string get_RecognizerNotFound();
    internal static string get_RecognizerNotEnabled();
    internal static string get_RecognitionNotSupported();
    internal static string get_RecognitionNotSupportedOn64bit();
    internal static string get_GrammarAlreadyLoaded();
    internal static string get_RecognizerNoInputSource();
    internal static string get_GrammarNotLoaded();
    internal static string get_GrammarLoadingInProgress();
    internal static string get_GrammarLoadFailed();
    internal static string get_GrammarWrongRecognizer();
    internal static string get_NotSupportedOnDictationGrammars();
    internal static string get_LocalFilesOnly();
    internal static string get_NotValidAudioFile();
    internal static string get_NotValidAudioStream();
    internal static string get_FileNotFound();
    internal static string get_CannotSetPriorityOnDictation();
    internal static string get_RecognizerUpdateTableTooLarge();
    internal static string get_MaxAlternatesInvalid();
    internal static string get_RecognizerSettingGetError();
    internal static string get_RecognizerSettingUpdateError();
    internal static string get_RecognizerSettingNotSupported();
    internal static string get_ResourceUsageOutOfRange();
    internal static string get_RateOutOfRange();
    internal static string get_EndSilenceOutOfRange();
    internal static string get_RejectionThresholdOutOfRange();
    internal static string get_ReferencedGrammarNotFound();
    internal static string get_SapiErrorRuleNotFound2();
    internal static string get_NoAudioAvailable();
    internal static string get_ResultNotGrammarAvailable();
    internal static string get_ResultInvalidFormat();
    internal static string get_UnhandledVariant();
    internal static string get_DupSemanticKey();
    internal static string get_DupSemanticValue();
    internal static string get_CannotUseCustomFormat();
    internal static string get_NoPromptEngine();
    internal static string get_NoPromptEngineInterface();
    internal static string get_SeekNotSupported();
    internal static string get_ExtraDataNotPresent();
    internal static string get_BitsPerSampleInvalid();
    internal static string get_DataBlockSizeInvalid();
    internal static string get_NotWholeNumberBlocks();
    internal static string get_BlockSignatureInvalid();
    internal static string get_NumberOfSamplesInvalid();
    internal static string get_SapiErrorUninitialized();
    internal static string get_SapiErrorAlreadyInitialized();
    internal static string get_SapiErrorNotSupportedFormat();
    internal static string get_SapiErrorInvalidFlags();
    internal static string get_SapiErrorEndOfStream();
    internal static string get_SapiErrorDeviceBusy();
    internal static string get_SapiErrorDeviceNotSupported();
    internal static string get_SapiErrorDeviceNotEnabled();
    internal static string get_SapiErrorNoDriver();
    internal static string get_SapiErrorFileMustBeUnicode();
    internal static string get_InsufficientData();
    internal static string get_SapiErrorInvalidPhraseID();
    internal static string get_SapiErrorBufferTooSmall();
    internal static string get_SapiErrorFormatNotSpecified();
    internal static string get_SapiErrorAudioStopped0();
    internal static string get_AudioPaused();
    internal static string get_SapiErrorRuleNotFound();
    internal static string get_SapiErrorTTSEngineException();
    internal static string get_SapiErrorTTSNLPException();
    internal static string get_SapiErrorEngineBUSY();
    internal static string get_AudioConversionEnabled();
    internal static string get_NoHypothesisAvailable();
    internal static string get_SapiErrorCantCreate();
    internal static string get_AlreadyInLex();
    internal static string get_SapiErrorNotInLex();
    internal static string get_LexNothingToSync();
    internal static string get_SapiErrorLexVeryOutOfSync();
    internal static string get_SapiErrorUndefinedForwardRuleRef();
    internal static string get_SapiErrorEmptyRule();
    internal static string get_SapiErrorGrammarCompilerInternalError();
    internal static string get_SapiErrorRuleNotDynamic();
    internal static string get_SapiErrorDuplicateRuleName();
    internal static string get_SapiErrorDuplicateResourceName();
    internal static string get_SapiErrorTooManyGrammars();
    internal static string get_SapiErrorCircularReference();
    internal static string get_SapiErrorInvalidImport();
    internal static string get_SapiErrorInvalidWAVFile();
    internal static string get_RequestPending();
    internal static string get_SapiErrorAllWordsOptional();
    internal static string get_SapiErrorInstanceChangeInvalid();
    internal static string get_SapiErrorRuleNameIdConflict();
    internal static string get_SapiErrorNoRules();
    internal static string get_SapiErrorCircularRuleRef();
    internal static string get_NoParseFound();
    internal static string get_SapiErrorInvalidHandle();
    internal static string get_SapiErrorRemoteCallTimedout();
    internal static string get_SapiErrorAudioBufferOverflow();
    internal static string get_SapiErrorNoAudioData();
    internal static string get_SapiErrorDeadAlternate();
    internal static string get_SapiErrorHighLowConfidence();
    internal static string get_SapiErrorInvalidFormatString();
    internal static string get_SPNotSupportedOnStreamInput();
    internal static string get_SapiErrorAppLexReadOnly();
    internal static string get_SapiErrorNoTerminatingRulePath();
    internal static string get_WordExistsWithoutPronunciation();
    internal static string get_SapiErrorStreamClosed();
    internal static string get_SapiErrorNoMoreItems();
    internal static string get_SapiErrorNotFound();
    internal static string get_SapiErrorInvalidAudioState();
    internal static string get_SapiErrorGenericMMSYS();
    internal static string get_SapiErrorMarshalerException();
    internal static string get_SapiErrorNotDynamicGrammar();
    internal static string get_SapiErrorAmbiguousProperty();
    internal static string get_SapiErrorInvalidRegistrykey();
    internal static string get_SapiErrorInvalidTokenId();
    internal static string get_SapiErrorXMLBadSyntax();
    internal static string get_SapiErrorXMLResourceNotFound();
    internal static string get_SapiErrorTokenInUse();
    internal static string get_SapiErrorTokenDeleted();
    internal static string get_SapiErrorMultilingualNotSupported();
    internal static string get_SapiErrorExportDynamicRule();
    internal static string get_SapiErrorSTGF();
    internal static string get_SapiErrorWordFormat();
    internal static string get_SapiErrorStreamNotActive();
    internal static string get_SapiErrorEngineResponseInvalid();
    internal static string get_SapiErrorSREngineException();
    internal static string get_SapiErrorStreamPosInvalid();
    internal static string get_SapiErrorRecognizerInactive();
    internal static string get_SapiErrorRemoteCallOnWrongThread();
    internal static string get_SapiErrorRemoteProcessTerminated();
    internal static string get_SapiErrorRemoteProcessAlreadyRunning();
    internal static string get_SapiErrorLangIdMismatch();
    internal static string get_SapiErrorPartialParseFound();
    internal static string get_SapiErrorNotTopLevelRule();
    internal static string get_SapiErrorNoRuleActive();
    internal static string get_SapiErrorLexRequiresCookie();
    internal static string get_SapiErrorStreamUninitialized();
    internal static string get_SapiErrorUnused0();
    internal static string get_SapiErrorUnused1();
    internal static string get_SapiErrorUnused2();
    internal static string get_SapiErrorUnused3();
    internal static string get_SapiErrorUnused4();
    internal static string get_SapiErrorUnused5();
    internal static string get_SapiErrorUnused6();
    internal static string get_SapiErrorUnused7();
    internal static string get_SapiErrorUnused8();
    internal static string get_SapiErrorUnused9();
    internal static string get_SapiErrorUnused10();
    internal static string get_SapiErrorUnused11();
    internal static string get_SapiErrorUnused12();
    internal static string get_SapiErrorNotSupportedLang();
    internal static string get_SapiErrorVoicePaused();
    internal static string get_SapiErrorAudioBufferUnderflow();
    internal static string get_SapiErrorAudioStoppedUnexpectedly();
    internal static string get_SapiErrorNoWordPronunciation();
    internal static string get_SapiErrorAlternatesWouldBeInconsistent();
    internal static string get_SapiErrorNotSupportedForSharedRecognizer();
    internal static string get_SapiErrorTimeOut();
    internal static string get_SapiErrorReenterSynchronize();
    internal static string get_SapiErrorStateWithNoArcs();
    internal static string get_SapiErrorNotActiveSession();
    internal static string get_SapiErrorAlreadyDeleted();
    internal static string get_SapiErrorAudioStopped();
    internal static string get_SapiErrorRecoXMLGenerationFail();
    internal static string get_SapiErrorSMLGenerationFail();
    internal static string get_SapiErrorNotPromptVoice();
    internal static string get_SapiErrorRootRuleAlreadyDefined();
    internal static string get_SapiErrorScriptDisallowed();
    internal static string get_SapiErrorRemoteCallTimedOutStart();
    internal static string get_SapiErrorRemoteCallTimedOutConnect();
    internal static string get_SapiErrorSecMgrChangeNotAllowed();
    internal static string get_SapiErrorCompleteButExtendable();
    internal static string get_SapiErrorFailedToDeleteFile();
    internal static string get_SapiErrorSharedEngineDisabled();
    internal static string get_SapiErrorRecognizerNotFound();
    internal static string get_SapiErrorAudioNotFound();
    internal static string get_SapiErrorNoVowel();
    internal static string get_SapiErrorNotSupportedPhoneme();
    internal static string get_SapiErrorNoRulesToActivate();
    internal static string get_SapiErrorNoWordEntryNotification();
    internal static string get_SapiErrorWordNeedsNormalization();
    internal static string get_SapiErrorCannotNormalize();
    internal static string get_LimitReached();
    internal static string get_NotSupported();
    internal static string get_SapiErrorTopicNotAdaptable();
    internal static string get_SapiErrorPhonemeConversion();
    internal static string get_SapiErrorNotSupportedForInprocRecognizer();
    internal static string get_SapiLexInvalidData();
    internal static string get_SapiLexUnexpectedFormat();
    internal static string get_SapiNonWordTransition();
    internal static string get_SapiSisrAttributesNotAllowed();
    internal static string get_SapiSisrMixedNotAllowed();
    internal static string get_SapiStringEmpty();
    internal static string get_SapiStringTooLong();
    internal static string get_SapiVoiceNotFound();
    internal static string get_SapiErrorOverload();
    internal static string get_SapiConfigInvalidData();
}
