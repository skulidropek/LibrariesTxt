internal static class FxResources.System.Threading.AccessControl.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.EventWaitHandleAccessRule : AccessRule {
    public EventWaitHandleRights EventWaitHandleRights { get; }
    public EventWaitHandleAccessRule(IdentityReference identity, EventWaitHandleRights eventRights, AccessControlType type);
    public EventWaitHandleAccessRule(string identity, EventWaitHandleRights eventRights, AccessControlType type);
    public EventWaitHandleRights get_EventWaitHandleRights();
}
public class System.Security.AccessControl.EventWaitHandleAuditRule : AuditRule {
    public EventWaitHandleRights EventWaitHandleRights { get; }
    [NullableContextAttribute("1")]
public EventWaitHandleAuditRule(IdentityReference identity, EventWaitHandleRights eventRights, AuditFlags flags);
    public EventWaitHandleRights get_EventWaitHandleRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.EventWaitHandleRights : Enum {
    public int value__;
    public static EventWaitHandleRights Modify;
    public static EventWaitHandleRights Delete;
    public static EventWaitHandleRights ReadPermissions;
    public static EventWaitHandleRights ChangePermissions;
    public static EventWaitHandleRights TakeOwnership;
    public static EventWaitHandleRights Synchronize;
    public static EventWaitHandleRights FullControl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.EventWaitHandleSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(EventWaitHandleAccessRule rule);
    public void AddAuditRule(EventWaitHandleAuditRule rule);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public bool RemoveAccessRule(EventWaitHandleAccessRule rule);
    public void RemoveAccessRuleAll(EventWaitHandleAccessRule rule);
    public void RemoveAccessRuleSpecific(EventWaitHandleAccessRule rule);
    public bool RemoveAuditRule(EventWaitHandleAuditRule rule);
    public void RemoveAuditRuleAll(EventWaitHandleAuditRule rule);
    public void RemoveAuditRuleSpecific(EventWaitHandleAuditRule rule);
    public void ResetAccessRule(EventWaitHandleAccessRule rule);
    public void SetAccessRule(EventWaitHandleAccessRule rule);
    public void SetAuditRule(EventWaitHandleAuditRule rule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.MutexAccessRule : AccessRule {
    public MutexRights MutexRights { get; }
    public MutexAccessRule(IdentityReference identity, MutexRights eventRights, AccessControlType type);
    public MutexAccessRule(string identity, MutexRights eventRights, AccessControlType type);
    public MutexRights get_MutexRights();
}
public class System.Security.AccessControl.MutexAuditRule : AuditRule {
    public MutexRights MutexRights { get; }
    [NullableContextAttribute("1")]
public MutexAuditRule(IdentityReference identity, MutexRights eventRights, AuditFlags flags);
    public MutexRights get_MutexRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.MutexRights : Enum {
    public int value__;
    public static MutexRights Modify;
    public static MutexRights Delete;
    public static MutexRights ReadPermissions;
    public static MutexRights ChangePermissions;
    public static MutexRights TakeOwnership;
    public static MutexRights Synchronize;
    public static MutexRights FullControl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.MutexSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public MutexSecurity(string name, AccessControlSections includeSections);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(MutexAccessRule rule);
    public void AddAuditRule(MutexAuditRule rule);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public bool RemoveAccessRule(MutexAccessRule rule);
    public void RemoveAccessRuleAll(MutexAccessRule rule);
    public void RemoveAccessRuleSpecific(MutexAccessRule rule);
    public bool RemoveAuditRule(MutexAuditRule rule);
    public void RemoveAuditRuleAll(MutexAuditRule rule);
    public void RemoveAuditRuleSpecific(MutexAuditRule rule);
    public void ResetAccessRule(MutexAccessRule rule);
    public void SetAccessRule(MutexAccessRule rule);
    public void SetAuditRule(MutexAuditRule rule);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.SemaphoreAccessRule : AccessRule {
    public SemaphoreRights SemaphoreRights { get; }
    public SemaphoreAccessRule(IdentityReference identity, SemaphoreRights eventRights, AccessControlType type);
    public SemaphoreAccessRule(string identity, SemaphoreRights eventRights, AccessControlType type);
    public SemaphoreRights get_SemaphoreRights();
}
public class System.Security.AccessControl.SemaphoreAuditRule : AuditRule {
    public SemaphoreRights SemaphoreRights { get; }
    [NullableContextAttribute("1")]
public SemaphoreAuditRule(IdentityReference identity, SemaphoreRights eventRights, AuditFlags flags);
    public SemaphoreRights get_SemaphoreRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.SemaphoreRights : Enum {
    public int value__;
    public static SemaphoreRights Modify;
    public static SemaphoreRights Delete;
    public static SemaphoreRights ReadPermissions;
    public static SemaphoreRights ChangePermissions;
    public static SemaphoreRights TakeOwnership;
    public static SemaphoreRights Synchronize;
    public static SemaphoreRights FullControl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.SemaphoreSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public SemaphoreSecurity(string name, AccessControlSections includeSections);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(SemaphoreAccessRule rule);
    public void AddAuditRule(SemaphoreAuditRule rule);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public bool RemoveAccessRule(SemaphoreAccessRule rule);
    public void RemoveAccessRuleAll(SemaphoreAccessRule rule);
    public void RemoveAccessRuleSpecific(SemaphoreAccessRule rule);
    public bool RemoveAuditRule(SemaphoreAuditRule rule);
    public void RemoveAuditRuleAll(SemaphoreAuditRule rule);
    public void RemoveAuditRuleSpecific(SemaphoreAuditRule rule);
    public void ResetAccessRule(SemaphoreAccessRule rule);
    public void SetAccessRule(SemaphoreAccessRule rule);
    public void SetAuditRule(SemaphoreAuditRule rule);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentOutOfRange_Enum { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string Argument_EmptyName { get; }
    internal static string Argument_SemaphoreInitialMaximum { get; }
    internal static string Argument_WaitHandleNameTooLong { get; }
    internal static string IO_AlreadyExists_Name { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string PlatformNotSupported_AccessControl { get; }
    internal static string Threading_WaitHandleCannotBeOpenedException_InvalidHandle { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string WaitHandleCannotBeOpenedException_InvalidHandle { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentOutOfRange_Enum();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_Argument_EmptyName();
    internal static string get_Argument_SemaphoreInitialMaximum();
    internal static string get_Argument_WaitHandleNameTooLong();
    internal static string get_IO_AlreadyExists_Name();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_PlatformNotSupported_AccessControl();
    internal static string get_Threading_WaitHandleCannotBeOpenedException_InvalidHandle();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_WaitHandleCannotBeOpenedException_InvalidHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.EventWaitHandleAcl : object {
    [NullableContextAttribute("2")]
public static EventWaitHandle Create(bool initialState, EventResetMode mode, string name, Boolean& createdNew, EventWaitHandleSecurity eventSecurity);
    public static EventWaitHandle OpenExisting(string name, EventWaitHandleRights rights);
    public static bool TryOpenExisting(string name, EventWaitHandleRights rights, EventWaitHandle& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.MutexAcl : object {
    [NullableContextAttribute("2")]
public static Mutex Create(bool initiallyOwned, string name, Boolean& createdNew, MutexSecurity mutexSecurity);
    public static Mutex OpenExisting(string name, MutexRights rights);
    public static bool TryOpenExisting(string name, MutexRights rights, Mutex& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.SemaphoreAcl : object {
    [NullableContextAttribute("2")]
public static Semaphore Create(int initialCount, int maximumCount, string name, Boolean& createdNew, SemaphoreSecurity semaphoreSecurity);
    public static Semaphore OpenExisting(string name, SemaphoreRights rights);
    public static bool TryOpenExisting(string name, SemaphoreRights rights, Semaphore& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Threading.ThreadingAclExtensions : object {
    [ExtensionAttribute]
public static EventWaitHandleSecurity GetAccessControl(EventWaitHandle handle);
    [ExtensionAttribute]
public static MutexSecurity GetAccessControl(Mutex mutex);
    [ExtensionAttribute]
public static SemaphoreSecurity GetAccessControl(Semaphore semaphore);
    [ExtensionAttribute]
public static void SetAccessControl(EventWaitHandle handle, EventWaitHandleSecurity eventSecurity);
    [ExtensionAttribute]
public static void SetAccessControl(Mutex mutex, MutexSecurity mutexSecurity);
    [ExtensionAttribute]
public static void SetAccessControl(Semaphore semaphore, SemaphoreSecurity semaphoreSecurity);
}
