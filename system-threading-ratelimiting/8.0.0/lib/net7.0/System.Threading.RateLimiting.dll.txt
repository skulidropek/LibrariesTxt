internal static class FxResources.System.Threading.RateLimiting.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DebuggerDisplayAttribute("Count = {_size}")]
internal class System.Collections.Generic.Deque`1 : object {
    private T[] _array;
    private int _head;
    private int _tail;
    private int _size;
    public int Count { get; }
    public bool IsEmpty { get; }
    public int get_Count();
    public bool get_IsEmpty();
    public void EnqueueTail(T item);
    public T DequeueHead();
    public T PeekHead();
    public T PeekTail();
    public T DequeueTail();
    [IteratorStateMachineAttribute("System.Collections.Generic.Deque`1/<GetEnumerator>d__13")]
public IEnumerator`1<T> GetEnumerator();
    private void Grow();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string TokenLimitExceeded { get; }
    internal static string PermitLimitExceeded { get; }
    internal static string ReplenishmentLimitTooHigh { get; }
    internal static string ShouldBeGreaterThan0 { get; }
    internal static string ShouldBeGreaterThanOrEqual0 { get; }
    internal static string ShouldBeGreaterThanTimeSpan0 { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_TokenLimitExceeded();
    internal static string get_PermitLimitExceeded();
    internal static string get_ReplenishmentLimitTooHigh();
    internal static string get_ShouldBeGreaterThan0();
    internal static string get_ShouldBeGreaterThanOrEqual0();
    internal static string get_ShouldBeGreaterThanTimeSpan0();
}
internal class System.Threading.RateLimiting.ChainedPartitionedRateLimiter`1 : PartitionedRateLimiter`1<TResource> {
    private PartitionedRateLimiter`1[] _limiters;
    private bool _disposed;
    public ChainedPartitionedRateLimiter`1(PartitionedRateLimiter`1[] limiters);
    public virtual RateLimiterStatistics GetStatistics(TResource resource);
    protected virtual RateLimitLease AttemptAcquireCore(TResource resource, int permitCount);
    [AsyncStateMachineAttribute("System.Threading.RateLimiting.ChainedPartitionedRateLimiter`1/<AcquireAsyncCore>d__5")]
protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(TResource resource, int permitCount, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
    private static RateLimitLease CommonAcquireLogic(Exception ex, RateLimitLease lease, RateLimitLease[]& leases, int index, int length);
    private static AggregateException CommonDispose(RateLimitLease[] leases, int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.ConcurrencyLimiter : RateLimiter {
    private int _permitCount;
    private int _queueCount;
    private Nullable`1<long> _idleSince;
    private bool _disposed;
    private long _failedLeasesCount;
    private long _successfulLeasesCount;
    private ConcurrencyLimiterOptions _options;
    private Deque`1<RequestRegistration> _queue;
    private static ConcurrencyLease SuccessfulLease;
    private static ConcurrencyLease FailedLease;
    private static ConcurrencyLease QueueLimitLease;
    private static double TickFrequency;
    private object Lock { get; }
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public ConcurrencyLimiter(ConcurrencyLimiterOptions options);
    private static ConcurrencyLimiter();
    private object get_Lock();
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    [NullableContextAttribute("2")]
public virtual RateLimiterStatistics GetStatistics();
    protected virtual RateLimitLease AttemptAcquireCore(int permitCount);
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
    private bool TryLeaseUnsynchronized(int permitCount, RateLimitLease& lease);
    private void Release(int releaseCount);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    private void ThrowIfDisposed();
}
public class System.Threading.RateLimiting.ConcurrencyLimiterOptions : object {
    [CompilerGeneratedAttribute]
private int <PermitLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueProcessingOrder <QueueProcessingOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueueLimit>k__BackingField;
    public int PermitLimit { get; public set; }
    public QueueProcessingOrder QueueProcessingOrder { get; public set; }
    public int QueueLimit { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PermitLimit();
    [CompilerGeneratedAttribute]
public void set_PermitLimit(int value);
    [CompilerGeneratedAttribute]
public QueueProcessingOrder get_QueueProcessingOrder();
    [CompilerGeneratedAttribute]
public void set_QueueProcessingOrder(QueueProcessingOrder value);
    [CompilerGeneratedAttribute]
public int get_QueueLimit();
    [CompilerGeneratedAttribute]
public void set_QueueLimit(int value);
}
internal class System.Threading.RateLimiting.DefaultPartitionedRateLimiter`2 : PartitionedRateLimiter`1<TResource> {
    private Func`2<TResource, RateLimitPartition`1<TKey>> _partitioner;
    private static TimeSpan s_idleTimeLimit;
    private Dictionary`2<TKey, Lazy`1<RateLimiter>> _limiters;
    private bool _disposed;
    private TaskCompletionSource`1<object> _disposeComplete;
    private List`1<KeyValuePair`2<TKey, Lazy`1<RateLimiter>>> _cachedLimiters;
    private bool _cacheInvalid;
    private List`1<RateLimiter> _limitersToDispose;
    private TimerAwaitable _timer;
    private Task _timerTask;
    private object Lock { get; }
    public DefaultPartitionedRateLimiter`2(Func`2<TResource, RateLimitPartition`1<TKey>> partitioner, IEqualityComparer`1<TKey> equalityComparer);
    private DefaultPartitionedRateLimiter`2(Func`2<TResource, RateLimitPartition`1<TKey>> partitioner, IEqualityComparer`1<TKey> equalityComparer, TimeSpan timerInterval);
    private static DefaultPartitionedRateLimiter`2();
    private object get_Lock();
    [AsyncStateMachineAttribute("System.Threading.RateLimiting.DefaultPartitionedRateLimiter`2/<RunTimer>d__14")]
private Task RunTimer();
    public virtual RateLimiterStatistics GetStatistics(TResource resource);
    protected virtual RateLimitLease AttemptAcquireCore(TResource resource, int permitCount);
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(TResource resource, int permitCount, CancellationToken cancellationToken);
    private RateLimiter GetRateLimiter(TResource resource);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("System.Threading.RateLimiting.DefaultPartitionedRateLimiter`2/<DisposeAsyncCore>d__20")]
protected virtual ValueTask DisposeAsyncCore();
    private bool CommonDispose();
    private void ThrowIfDisposed();
    [AsyncStateMachineAttribute("System.Threading.RateLimiting.DefaultPartitionedRateLimiter`2/<Heartbeat>d__23")]
private Task Heartbeat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.FixedWindowRateLimiter : ReplenishingRateLimiter {
    private int _permitCount;
    private int _queueCount;
    private long _lastReplenishmentTick;
    private Nullable`1<long> _idleSince;
    private bool _disposed;
    private long _failedLeasesCount;
    private long _successfulLeasesCount;
    private Timer _renewTimer;
    private FixedWindowRateLimiterOptions _options;
    private Deque`1<RequestRegistration> _queue;
    private static RateLimitLease SuccessfulLease;
    private static RateLimitLease FailedLease;
    private static double TickFrequency;
    private object Lock { get; }
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public bool IsAutoReplenishing { get; }
    public TimeSpan ReplenishmentPeriod { get; }
    public FixedWindowRateLimiter(FixedWindowRateLimiterOptions options);
    private static FixedWindowRateLimiter();
    private object get_Lock();
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    public virtual bool get_IsAutoReplenishing();
    public virtual TimeSpan get_ReplenishmentPeriod();
    [NullableContextAttribute("2")]
public virtual RateLimiterStatistics GetStatistics();
    protected virtual RateLimitLease AttemptAcquireCore(int permitCount);
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
    private FixedWindowLease CreateFailedWindowLease(int permitCount);
    private bool TryLeaseUnsynchronized(int permitCount, RateLimitLease& lease);
    public virtual bool TryReplenish();
    private static void Replenish(object state);
    private void ReplenishInternal(long nowTicks);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    private void ThrowIfDisposed();
}
public class System.Threading.RateLimiting.FixedWindowRateLimiterOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <Window>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoReplenishment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PermitLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueProcessingOrder <QueueProcessingOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueueLimit>k__BackingField;
    public TimeSpan Window { get; public set; }
    public bool AutoReplenishment { get; public set; }
    public int PermitLimit { get; public set; }
    public QueueProcessingOrder QueueProcessingOrder { get; public set; }
    public int QueueLimit { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_Window();
    [CompilerGeneratedAttribute]
public void set_Window(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_AutoReplenishment();
    [CompilerGeneratedAttribute]
public void set_AutoReplenishment(bool value);
    [CompilerGeneratedAttribute]
public int get_PermitLimit();
    [CompilerGeneratedAttribute]
public void set_PermitLimit(int value);
    [CompilerGeneratedAttribute]
public QueueProcessingOrder get_QueueProcessingOrder();
    [CompilerGeneratedAttribute]
public void set_QueueProcessingOrder(QueueProcessingOrder value);
    [CompilerGeneratedAttribute]
public int get_QueueLimit();
    [CompilerGeneratedAttribute]
public void set_QueueLimit(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.RateLimiting.MetadataName : object {
    [CompilerGeneratedAttribute]
private static MetadataName`1<TimeSpan> <RetryAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private static MetadataName`1<string> <ReasonPhrase>k__BackingField;
    public static MetadataName`1<TimeSpan> RetryAfter { get; }
    public static MetadataName`1<string> ReasonPhrase { get; }
    private static MetadataName();
    [CompilerGeneratedAttribute]
public static MetadataName`1<TimeSpan> get_RetryAfter();
    [CompilerGeneratedAttribute]
public static MetadataName`1<string> get_ReasonPhrase();
    public static MetadataName`1<T> Create(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.MetadataName`1 : object {
    private string _name;
    public string Name { get; }
    public MetadataName`1(string name);
    public string get_Name();
    public virtual string ToString();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MetadataName`1<T> other);
    public static bool op_Equality(MetadataName`1<T> left, MetadataName`1<T> right);
    public static bool op_Inequality(MetadataName`1<T> left, MetadataName`1<T> right);
}
internal class System.Threading.RateLimiting.NoopLimiter : RateLimiter {
    private static RateLimitLease _lease;
    private long _totalSuccessfulLeases;
    public Nullable`1<TimeSpan> IdleDuration { get; }
    private static NoopLimiter();
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    public virtual RateLimiterStatistics GetStatistics();
    protected virtual RateLimitLease AttemptAcquireCore(int permitCount);
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.RateLimiting.PartitionedRateLimiter : object {
    public static PartitionedRateLimiter`1<TResource> Create(Func`2<TResource, RateLimitPartition`1<TPartitionKey>> partitioner, IEqualityComparer`1<TPartitionKey> equalityComparer);
    public static PartitionedRateLimiter`1<TResource> CreateChained(PartitionedRateLimiter`1[] limiters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Threading.RateLimiting.PartitionedRateLimiter`1 : object {
    public abstract virtual RateLimiterStatistics GetStatistics(TResource resource);
    public RateLimitLease AttemptAcquire(TResource resource, int permitCount);
    protected abstract virtual RateLimitLease AttemptAcquireCore(TResource resource, int permitCount);
    public ValueTask`1<RateLimitLease> AcquireAsync(TResource resource, int permitCount, CancellationToken cancellationToken);
    protected abstract virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(TResource resource, int permitCount, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual ValueTask DisposeAsyncCore();
    [AsyncStateMachineAttribute("System.Threading.RateLimiting.PartitionedRateLimiter`1/<DisposeAsync>d__8")]
public sealed virtual ValueTask DisposeAsync();
    public PartitionedRateLimiter`1<TOuter> WithTranslatedKey(Func`2<TOuter, TResource> keyAdapter, bool leaveOpen);
}
public enum System.Threading.RateLimiting.QueueProcessingOrder : Enum {
    public int value__;
    public static QueueProcessingOrder OldestFirst;
    public static QueueProcessingOrder NewestFirst;
}
public abstract class System.Threading.RateLimiting.RateLimiter : object {
    public Nullable`1<TimeSpan> IdleDuration { get; }
    [NullableContextAttribute("2")]
public abstract virtual RateLimiterStatistics GetStatistics();
    public abstract virtual Nullable`1<TimeSpan> get_IdleDuration();
    [NullableContextAttribute("1")]
public RateLimitLease AttemptAcquire(int permitCount);
    [NullableContextAttribute("1")]
protected abstract virtual RateLimitLease AttemptAcquireCore(int permitCount);
    public ValueTask`1<RateLimitLease> AcquireAsync(int permitCount, CancellationToken cancellationToken);
    protected abstract virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual ValueTask DisposeAsyncCore();
    [AsyncStateMachineAttribute("System.Threading.RateLimiting.RateLimiter/<DisposeAsync>d__10")]
public sealed virtual ValueTask DisposeAsync();
}
public class System.Threading.RateLimiting.RateLimiterStatistics : object {
    [CompilerGeneratedAttribute]
private long <CurrentAvailablePermits>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentQueuedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalFailedLeases>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalSuccessfulLeases>k__BackingField;
    public long CurrentAvailablePermits { get; public set; }
    public long CurrentQueuedCount { get; public set; }
    public long TotalFailedLeases { get; public set; }
    public long TotalSuccessfulLeases { get; public set; }
    [CompilerGeneratedAttribute]
public long get_CurrentAvailablePermits();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentAvailablePermits(long value);
    [CompilerGeneratedAttribute]
public long get_CurrentQueuedCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentQueuedCount(long value);
    [CompilerGeneratedAttribute]
public long get_TotalFailedLeases();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalFailedLeases(long value);
    [CompilerGeneratedAttribute]
public long get_TotalSuccessfulLeases();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalSuccessfulLeases(long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Threading.RateLimiting.RateLimitLease : object {
    public bool IsAcquired { get; }
    public IEnumerable`1<string> MetadataNames { get; }
    public abstract virtual bool get_IsAcquired();
    public abstract virtual bool TryGetMetadata(string metadataName, Object& metadata);
    public bool TryGetMetadata(MetadataName`1<T> metadataName, T& metadata);
    public abstract virtual IEnumerable`1<string> get_MetadataNames();
    [IteratorStateMachineAttribute("System.Threading.RateLimiting.RateLimitLease/<GetAllMetadata>d__6")]
public virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAllMetadata();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.RateLimiting.RateLimitPartition : object {
    public static RateLimitPartition`1<TKey> Get(TKey partitionKey, Func`2<TKey, RateLimiter> factory);
    public static RateLimitPartition`1<TKey> GetConcurrencyLimiter(TKey partitionKey, Func`2<TKey, ConcurrencyLimiterOptions> factory);
    public static RateLimitPartition`1<TKey> GetNoLimiter(TKey partitionKey);
    public static RateLimitPartition`1<TKey> GetTokenBucketLimiter(TKey partitionKey, Func`2<TKey, TokenBucketRateLimiterOptions> factory);
    public static RateLimitPartition`1<TKey> GetSlidingWindowLimiter(TKey partitionKey, Func`2<TKey, SlidingWindowRateLimiterOptions> factory);
    public static RateLimitPartition`1<TKey> GetFixedWindowLimiter(TKey partitionKey, Func`2<TKey, FixedWindowRateLimiterOptions> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.RateLimitPartition`1 : ValueType {
    [CompilerGeneratedAttribute]
private TKey <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TKey, RateLimiter> <Factory>k__BackingField;
    public TKey PartitionKey { get; }
    public Func`2<TKey, RateLimiter> Factory { get; }
    public RateLimitPartition`1(TKey partitionKey, Func`2<TKey, RateLimiter> factory);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TKey get_PartitionKey();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Func`2<TKey, RateLimiter> get_Factory();
}
public abstract class System.Threading.RateLimiting.ReplenishingRateLimiter : RateLimiter {
    public TimeSpan ReplenishmentPeriod { get; }
    public bool IsAutoReplenishing { get; }
    public abstract virtual TimeSpan get_ReplenishmentPeriod();
    public abstract virtual bool get_IsAutoReplenishing();
    public abstract virtual bool TryReplenish();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.SlidingWindowRateLimiter : ReplenishingRateLimiter {
    private int _permitCount;
    private int _queueCount;
    private Int32[] _requestsPerSegment;
    private int _currentSegmentIndex;
    private long _lastReplenishmentTick;
    private Nullable`1<long> _idleSince;
    private bool _disposed;
    private long _failedLeasesCount;
    private long _successfulLeasesCount;
    private Timer _renewTimer;
    private SlidingWindowRateLimiterOptions _options;
    private TimeSpan _replenishmentPeriod;
    private Deque`1<RequestRegistration> _queue;
    private static RateLimitLease SuccessfulLease;
    private static RateLimitLease FailedLease;
    private static double TickFrequency;
    private object Lock { get; }
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public bool IsAutoReplenishing { get; }
    public TimeSpan ReplenishmentPeriod { get; }
    public SlidingWindowRateLimiter(SlidingWindowRateLimiterOptions options);
    private static SlidingWindowRateLimiter();
    private object get_Lock();
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    public virtual bool get_IsAutoReplenishing();
    public virtual TimeSpan get_ReplenishmentPeriod();
    [NullableContextAttribute("2")]
public virtual RateLimiterStatistics GetStatistics();
    protected virtual RateLimitLease AttemptAcquireCore(int permitCount);
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int permitCount, CancellationToken cancellationToken);
    private bool TryLeaseUnsynchronized(int permitCount, RateLimitLease& lease);
    public virtual bool TryReplenish();
    private static void Replenish(object state);
    private void ReplenishInternal(long nowTicks);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    private void ThrowIfDisposed();
}
public class System.Threading.RateLimiting.SlidingWindowRateLimiterOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <Window>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SegmentsPerWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoReplenishment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PermitLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueProcessingOrder <QueueProcessingOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueueLimit>k__BackingField;
    public TimeSpan Window { get; public set; }
    public int SegmentsPerWindow { get; public set; }
    public bool AutoReplenishment { get; public set; }
    public int PermitLimit { get; public set; }
    public QueueProcessingOrder QueueProcessingOrder { get; public set; }
    public int QueueLimit { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_Window();
    [CompilerGeneratedAttribute]
public void set_Window(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_SegmentsPerWindow();
    [CompilerGeneratedAttribute]
public void set_SegmentsPerWindow(int value);
    [CompilerGeneratedAttribute]
public bool get_AutoReplenishment();
    [CompilerGeneratedAttribute]
public void set_AutoReplenishment(bool value);
    [CompilerGeneratedAttribute]
public int get_PermitLimit();
    [CompilerGeneratedAttribute]
public void set_PermitLimit(int value);
    [CompilerGeneratedAttribute]
public QueueProcessingOrder get_QueueProcessingOrder();
    [CompilerGeneratedAttribute]
public void set_QueueProcessingOrder(QueueProcessingOrder value);
    [CompilerGeneratedAttribute]
public int get_QueueLimit();
    [CompilerGeneratedAttribute]
public void set_QueueLimit(int value);
}
internal class System.Threading.RateLimiting.TimerAwaitable : object {
    private Timer _timer;
    private Action _callback;
    private static Action _callbackCompleted;
    private TimeSpan _period;
    private TimeSpan _dueTime;
    private object _lockObj;
    private bool _disposed;
    private bool _running;
    public bool IsCompleted { get; }
    public TimerAwaitable(TimeSpan dueTime, TimeSpan period);
    private static TimerAwaitable();
    public void Start();
    public TimerAwaitable GetAwaiter();
    public bool get_IsCompleted();
    public bool GetResult();
    private void Tick();
    public sealed virtual void OnCompleted(Action continuation);
    public sealed virtual void UnsafeOnCompleted(Action continuation);
    public void Stop();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.RateLimiting.TokenBucketRateLimiter : ReplenishingRateLimiter {
    private double _tokenCount;
    private int _queueCount;
    private long _lastReplenishmentTick;
    private Nullable`1<long> _idleSince;
    private bool _disposed;
    private long _failedLeasesCount;
    private long _successfulLeasesCount;
    private double _fillRate;
    private Timer _renewTimer;
    private TokenBucketRateLimiterOptions _options;
    private Deque`1<RequestRegistration> _queue;
    private static RateLimitLease SuccessfulLease;
    private static RateLimitLease FailedLease;
    private static double TickFrequency;
    private object Lock { get; }
    public Nullable`1<TimeSpan> IdleDuration { get; }
    public bool IsAutoReplenishing { get; }
    public TimeSpan ReplenishmentPeriod { get; }
    public TokenBucketRateLimiter(TokenBucketRateLimiterOptions options);
    private static TokenBucketRateLimiter();
    private object get_Lock();
    public virtual Nullable`1<TimeSpan> get_IdleDuration();
    public virtual bool get_IsAutoReplenishing();
    public virtual TimeSpan get_ReplenishmentPeriod();
    [NullableContextAttribute("2")]
public virtual RateLimiterStatistics GetStatistics();
    protected virtual RateLimitLease AttemptAcquireCore(int tokenCount);
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(int tokenCount, CancellationToken cancellationToken);
    private TokenBucketLease CreateFailedTokenLease(int tokenCount);
    private bool TryLeaseUnsynchronized(int tokenCount, RateLimitLease& lease);
    public virtual bool TryReplenish();
    private static void Replenish(object state);
    private void ReplenishInternal(long nowTicks);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    private void ThrowIfDisposed();
}
public class System.Threading.RateLimiting.TokenBucketRateLimiterOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ReplenishmentPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokensPerPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoReplenishment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueProcessingOrder <QueueProcessingOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueueLimit>k__BackingField;
    public TimeSpan ReplenishmentPeriod { get; public set; }
    public int TokensPerPeriod { get; public set; }
    public bool AutoReplenishment { get; public set; }
    public int TokenLimit { get; public set; }
    public QueueProcessingOrder QueueProcessingOrder { get; public set; }
    public int QueueLimit { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ReplenishmentPeriod();
    [CompilerGeneratedAttribute]
public void set_ReplenishmentPeriod(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_TokensPerPeriod();
    [CompilerGeneratedAttribute]
public void set_TokensPerPeriod(int value);
    [CompilerGeneratedAttribute]
public bool get_AutoReplenishment();
    [CompilerGeneratedAttribute]
public void set_AutoReplenishment(bool value);
    [CompilerGeneratedAttribute]
public int get_TokenLimit();
    [CompilerGeneratedAttribute]
public void set_TokenLimit(int value);
    [CompilerGeneratedAttribute]
public QueueProcessingOrder get_QueueProcessingOrder();
    [CompilerGeneratedAttribute]
public void set_QueueProcessingOrder(QueueProcessingOrder value);
    [CompilerGeneratedAttribute]
public int get_QueueLimit();
    [CompilerGeneratedAttribute]
public void set_QueueLimit(int value);
}
internal class System.Threading.RateLimiting.TranslatingLimiter`2 : PartitionedRateLimiter`1<TResource> {
    private PartitionedRateLimiter`1<TInner> _innerRateLimiter;
    private Func`2<TResource, TInner> _keyAdapter;
    private bool _disposeInnerLimiter;
    private int _disposed;
    public TranslatingLimiter`2(PartitionedRateLimiter`1<TInner> inner, Func`2<TResource, TInner> keyAdapter, bool leaveOpen);
    public virtual RateLimiterStatistics GetStatistics(TResource resource);
    protected virtual RateLimitLease AttemptAcquireCore(TResource resource, int permitCount);
    protected virtual ValueTask`1<RateLimitLease> AcquireAsyncCore(TResource resource, int permitCount, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    private void ThrowIfDispose();
}
