internal static class FxResources.System.CodeDom.SR : object {
}
internal class Microsoft.CSharp.CSharpCodeGenerator : object {
    private static Char[] s_periodArray;
    private ExposedTabStringIndentedTextWriter _output;
    private CodeGeneratorOptions _options;
    private CodeTypeDeclaration _currentClass;
    private CodeTypeMember _currentMember;
    private bool _inNestedBinary;
    private IDictionary`2<string, string> _provOptions;
    private static int ParameterMultilineThreshold;
    private static int MaxLineLength;
    private static GeneratorSupport LanguageSupport;
    private static String[][] s_keywords;
    private bool _generatingForLoop;
    private string FileExtension { get; }
    private string CompilerName { get; }
    private string CurrentTypeName { get; }
    private int Indent { get; private set; }
    private bool IsCurrentInterface { get; }
    private bool IsCurrentClass { get; }
    private bool IsCurrentStruct { get; }
    private bool IsCurrentEnum { get; }
    private bool IsCurrentDelegate { get; }
    private string NullToken { get; }
    private CodeGeneratorOptions Options { get; }
    private TextWriter Output { get; }
    internal CSharpCodeGenerator(IDictionary`2<string, string> providerOptions);
    private static CSharpCodeGenerator();
    private string get_FileExtension();
    private string get_CompilerName();
    private string get_CurrentTypeName();
    private int get_Indent();
    private void set_Indent(int value);
    private bool get_IsCurrentInterface();
    private bool get_IsCurrentClass();
    private bool get_IsCurrentStruct();
    private bool get_IsCurrentEnum();
    private bool get_IsCurrentDelegate();
    private string get_NullToken();
    private CodeGeneratorOptions get_Options();
    private TextWriter get_Output();
    private string QuoteSnippetStringCStyle(string value);
    private string QuoteSnippetStringVerbatimStyle(string value);
    private string QuoteSnippetString(string value);
    private void ContinueOnNewLine(string st);
    private void OutputIdentifier(string ident);
    private void OutputType(CodeTypeReference typeRef);
    private void GenerateArrayCreateExpression(CodeArrayCreateExpression e);
    private void GenerateBaseReferenceExpression(CodeBaseReferenceExpression e);
    private void GenerateBinaryOperatorExpression(CodeBinaryOperatorExpression e);
    private void GenerateCastExpression(CodeCastExpression e);
    public void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
    private void GenerateDefaultValueExpression(CodeDefaultValueExpression e);
    private void GenerateDelegateCreateExpression(CodeDelegateCreateExpression e);
    private void GenerateEvents(CodeTypeDeclaration e);
    private void GenerateFields(CodeTypeDeclaration e);
    private void GenerateFieldReferenceExpression(CodeFieldReferenceExpression e);
    private void GenerateArgumentReferenceExpression(CodeArgumentReferenceExpression e);
    private void GenerateVariableReferenceExpression(CodeVariableReferenceExpression e);
    private void GenerateIndexerExpression(CodeIndexerExpression e);
    private void GenerateArrayIndexerExpression(CodeArrayIndexerExpression e);
    private void GenerateSnippetCompileUnit(CodeSnippetCompileUnit e);
    private void GenerateSnippetExpression(CodeSnippetExpression e);
    private void GenerateMethodInvokeExpression(CodeMethodInvokeExpression e);
    private void GenerateMethodReferenceExpression(CodeMethodReferenceExpression e);
    private bool GetUserData(CodeObject e, string property, bool defaultValue);
    private void GenerateNamespace(CodeNamespace e);
    private void GenerateStatement(CodeStatement e);
    private void GenerateStatements(CodeStatementCollection stmts);
    private void GenerateNamespaceImports(CodeNamespace e);
    private void GenerateEventReferenceExpression(CodeEventReferenceExpression e);
    private void GenerateDelegateInvokeExpression(CodeDelegateInvokeExpression e);
    private void GenerateObjectCreateExpression(CodeObjectCreateExpression e);
    private void GeneratePrimitiveExpression(CodePrimitiveExpression e);
    private void GeneratePrimitiveExpressionBase(CodePrimitiveExpression e);
    private void GeneratePrimitiveChar(char c);
    private void AppendEscapedChar(StringBuilder b, char value);
    private void GeneratePropertySetValueReferenceExpression(CodePropertySetValueReferenceExpression e);
    private void GenerateThisReferenceExpression(CodeThisReferenceExpression e);
    private void GenerateExpressionStatement(CodeExpressionStatement e);
    private void GenerateIterationStatement(CodeIterationStatement e);
    private void GenerateThrowExceptionStatement(CodeThrowExceptionStatement e);
    private void GenerateComment(CodeComment e);
    private void GenerateCommentStatement(CodeCommentStatement e);
    private void GenerateCommentStatements(CodeCommentStatementCollection e);
    private void GenerateMethodReturnStatement(CodeMethodReturnStatement e);
    private void GenerateConditionStatement(CodeConditionStatement e);
    private void GenerateTryCatchFinallyStatement(CodeTryCatchFinallyStatement e);
    private void GenerateAssignStatement(CodeAssignStatement e);
    private void GenerateAttachEventStatement(CodeAttachEventStatement e);
    private void GenerateRemoveEventStatement(CodeRemoveEventStatement e);
    private void GenerateSnippetStatement(CodeSnippetStatement e);
    private void GenerateGotoStatement(CodeGotoStatement e);
    private void GenerateLabeledStatement(CodeLabeledStatement e);
    private void GenerateVariableDeclarationStatement(CodeVariableDeclarationStatement e);
    private void GenerateLinePragmaStart(CodeLinePragma e);
    private void GenerateLinePragmaEnd(CodeLinePragma e);
    private void GenerateEvent(CodeMemberEvent e, CodeTypeDeclaration c);
    private void GenerateExpression(CodeExpression e);
    private void GenerateField(CodeMemberField e);
    private void GenerateSnippetMember(CodeSnippetTypeMember e);
    private void GenerateParameterDeclarationExpression(CodeParameterDeclarationExpression e);
    private void GenerateEntryPointMethod(CodeEntryPointMethod e, CodeTypeDeclaration c);
    private void GenerateMethods(CodeTypeDeclaration e);
    private void GenerateMethod(CodeMemberMethod e, CodeTypeDeclaration c);
    private void GenerateProperties(CodeTypeDeclaration e);
    private void GenerateProperty(CodeMemberProperty e, CodeTypeDeclaration c);
    private void GenerateSingleFloatValue(float s);
    private void GenerateDoubleValue(double d);
    private void GenerateDecimalValue(decimal d);
    private void OutputVTableModifier(MemberAttributes attributes);
    private void OutputMemberAccessModifier(MemberAttributes attributes);
    private void OutputMemberScopeModifier(MemberAttributes attributes);
    private void OutputOperator(CodeBinaryOperatorType op);
    private void OutputFieldScopeModifier(MemberAttributes attributes);
    private void GeneratePropertyReferenceExpression(CodePropertyReferenceExpression e);
    private void GenerateConstructors(CodeTypeDeclaration e);
    private void GenerateConstructor(CodeConstructor e, CodeTypeDeclaration c);
    private void GenerateTypeConstructor(CodeTypeConstructor e);
    private void GenerateTypeReferenceExpression(CodeTypeReferenceExpression e);
    private void GenerateTypeOfExpression(CodeTypeOfExpression e);
    private void GenerateType(CodeTypeDeclaration e);
    private void GenerateTypes(CodeNamespace e);
    private void GenerateTypeStart(CodeTypeDeclaration e);
    private void GenerateTypeMember(CodeTypeMember member, CodeTypeDeclaration declaredType);
    private void GenerateTypeConstructors(CodeTypeDeclaration e);
    private void GenerateSnippetMembers(CodeTypeDeclaration e);
    private void GenerateNestedTypes(CodeTypeDeclaration e);
    private void GenerateNamespaces(CodeCompileUnit e);
    private void OutputAttributeArgument(CodeAttributeArgument arg);
    private void OutputDirection(FieldDirection dir);
    private void OutputExpressionList(CodeExpressionCollection expressions);
    private void OutputExpressionList(CodeExpressionCollection expressions, bool newlineBetweenItems);
    private void OutputParameters(CodeParameterDeclarationExpressionCollection parameters);
    private void OutputTypeNamePair(CodeTypeReference typeRef, string name);
    private void OutputTypeParameters(CodeTypeParameterCollection typeParameters);
    private void OutputTypeParameterConstraints(CodeTypeParameterCollection typeParameters);
    private void OutputTypeAttributes(CodeTypeDeclaration e);
    private void GenerateTypeEnd(CodeTypeDeclaration e);
    private void GenerateNamespaceStart(CodeNamespace e);
    private void GenerateCompileUnit(CodeCompileUnit e);
    private void GenerateCompileUnitStart(CodeCompileUnit e);
    private void GenerateCompileUnitEnd(CodeCompileUnit e);
    private void GenerateDirectionExpression(CodeDirectionExpression e);
    private void GenerateDirectives(CodeDirectiveCollection directives);
    private void GenerateChecksumPragma(CodeChecksumPragma checksumPragma);
    private void GenerateCodeRegionDirective(CodeRegionDirective regionDirective);
    private void GenerateNamespaceEnd(CodeNamespace e);
    private void GenerateNamespaceImport(CodeNamespaceImport e);
    private void GenerateAttributeDeclarationsStart(CodeAttributeDeclarationCollection attributes);
    private void GenerateAttributeDeclarationsEnd(CodeAttributeDeclarationCollection attributes);
    private void GenerateAttributes(CodeAttributeDeclarationCollection attributes);
    private void GenerateAttributes(CodeAttributeDeclarationCollection attributes, string prefix);
    private void GenerateAttributes(CodeAttributeDeclarationCollection attributes, string prefix, bool inLine);
    public sealed virtual bool Supports(GeneratorSupport support);
    public sealed virtual bool IsValidIdentifier(string value);
    public sealed virtual void ValidateIdentifier(string value);
    public sealed virtual string CreateValidIdentifier(string name);
    public sealed virtual string CreateEscapedIdentifier(string name);
    private string GetBaseTypeOutput(CodeTypeReference typeRef, bool preferBuiltInTypes);
    private string GetTypeArgumentsOutput(CodeTypeReferenceCollection typeArguments);
    private void GetTypeArgumentsOutput(CodeTypeReferenceCollection typeArguments, int start, int length, StringBuilder sb);
    public sealed virtual string GetTypeOutput(CodeTypeReference typeRef);
    private void OutputStartingBrace();
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(CompilerParameters options, CodeCompileUnit e);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(CompilerParameters options, string fileName);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(CompilerParameters options, string source);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(CompilerParameters options, String[] sources);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(CompilerParameters options, String[] fileNames);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(CompilerParameters options, CodeCompileUnit[] ea);
    private CompilerResults FromDom(CompilerParameters options, CodeCompileUnit e);
    private CompilerResults FromFile(CompilerParameters options, string fileName);
    private CompilerResults FromSource(CompilerParameters options, string source);
    private CompilerResults FromDomBatch(CompilerParameters options, CodeCompileUnit[] ea);
    private void ResolveReferencedAssemblies(CompilerParameters options, CodeCompileUnit e);
    private CompilerResults FromSourceBatch(CompilerParameters options, String[] sources);
    private static string JoinStringArray(String[] sa, string separator);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(CodeTypeDeclaration e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(CodeExpression e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(CodeCompileUnit e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(CodeNamespace e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(CodeStatement e, TextWriter w, CodeGeneratorOptions o);
    private CompilerResults FromFileBatch(CompilerParameters options, String[] fileNames);
}
public class Microsoft.CSharp.CSharpCodeProvider : CodeDomProvider {
    private CSharpCodeGenerator _generator;
    public string FileExtension { get; }
    public CSharpCodeProvider(IDictionary`2<string, string> providerOptions);
    public virtual string get_FileExtension();
    [ObsoleteAttribute("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class.")]
public virtual ICodeGenerator CreateGenerator();
    [ObsoleteAttribute("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class.")]
public virtual ICodeCompiler CreateCompiler();
    public virtual TypeConverter GetConverter(Type type);
    public virtual void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
}
internal class Microsoft.CSharp.CSharpMemberAttributeConverter : CSharpModifierAttributeConverter {
    [CompilerGeneratedAttribute]
private static CSharpMemberAttributeConverter <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Values>k__BackingField;
    public static CSharpMemberAttributeConverter Default { get; }
    protected String[] Names { get; }
    protected Object[] Values { get; }
    protected object DefaultValue { get; }
    private static CSharpMemberAttributeConverter();
    [CompilerGeneratedAttribute]
public static CSharpMemberAttributeConverter get_Default();
    [CompilerGeneratedAttribute]
protected virtual String[] get_Names();
    [CompilerGeneratedAttribute]
protected virtual Object[] get_Values();
    protected virtual object get_DefaultValue();
}
internal abstract class Microsoft.CSharp.CSharpModifierAttributeConverter : TypeConverter {
    protected Object[] Values { get; }
    protected String[] Names { get; }
    protected object DefaultValue { get; }
    protected abstract virtual Object[] get_Values();
    protected abstract virtual String[] get_Names();
    protected abstract virtual object get_DefaultValue();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.CSharp.CSharpTypeAttributeConverter : CSharpModifierAttributeConverter {
    [CompilerGeneratedAttribute]
private static CSharpTypeAttributeConverter <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Values>k__BackingField;
    public static CSharpTypeAttributeConverter Default { get; }
    protected String[] Names { get; }
    protected Object[] Values { get; }
    protected object DefaultValue { get; }
    private static CSharpTypeAttributeConverter();
    [CompilerGeneratedAttribute]
public static CSharpTypeAttributeConverter get_Default();
    [CompilerGeneratedAttribute]
protected virtual String[] get_Names();
    [CompilerGeneratedAttribute]
protected virtual Object[] get_Values();
    protected virtual object get_DefaultValue();
}
internal class Microsoft.VisualBasic.VBCodeGenerator : CodeCompiler {
    private static Char[] s_periodArray;
    private static int MaxLineLength;
    private static GeneratorSupport LanguageSupport;
    private int _statementDepth;
    private IDictionary`2<string, string> _provOptions;
    private static String[][] s_keywords;
    protected string FileExtension { get; }
    protected string CompilerName { get; }
    private bool IsCurrentModule { get; }
    protected string NullToken { get; }
    internal VBCodeGenerator(IDictionary`2<string, string> providerOptions);
    private static VBCodeGenerator();
    protected virtual string get_FileExtension();
    protected virtual string get_CompilerName();
    private bool get_IsCurrentModule();
    protected virtual string get_NullToken();
    private void EnsureInDoubleQuotes(Boolean& fInDoubleQuotes, StringBuilder b);
    private void EnsureNotInDoubleQuotes(Boolean& fInDoubleQuotes, StringBuilder b);
    protected virtual string QuoteSnippetString(string value);
    private static void AppendEscapedChar(StringBuilder b, char value);
    protected virtual void ProcessCompilerOutputLine(CompilerResults results, string line);
    protected virtual string CmdArgsFromParameters(CompilerParameters options);
    protected virtual void OutputAttributeArgument(CodeAttributeArgument arg);
    private void OutputAttributes(CodeAttributeDeclarationCollection attributes, bool inLine);
    private void OutputAttributes(CodeAttributeDeclarationCollection attributes, bool inLine, string prefix, bool closingLine);
    protected virtual void OutputDirection(FieldDirection dir);
    protected virtual void GenerateDefaultValueExpression(CodeDefaultValueExpression e);
    protected virtual void GenerateDirectionExpression(CodeDirectionExpression e);
    protected virtual void OutputFieldScopeModifier(MemberAttributes attributes);
    protected virtual void OutputMemberAccessModifier(MemberAttributes attributes);
    private void OutputVTableModifier(MemberAttributes attributes);
    protected virtual void OutputMemberScopeModifier(MemberAttributes attributes);
    protected virtual void OutputOperator(CodeBinaryOperatorType op);
    private void GenerateNotIsNullExpression(CodeExpression e);
    protected virtual void GenerateBinaryOperatorExpression(CodeBinaryOperatorExpression e);
    protected virtual string GetResponseFileCmdArgs(CompilerParameters options, string cmdArgs);
    protected virtual void OutputIdentifier(string ident);
    protected virtual void OutputType(CodeTypeReference typeRef);
    private void OutputTypeAttributes(CodeTypeDeclaration e);
    protected virtual void OutputTypeNamePair(CodeTypeReference typeRef, string name);
    private string GetArrayPostfix(CodeTypeReference typeRef);
    private void OutputArrayPostfix(CodeTypeReference typeRef);
    protected virtual void GenerateIterationStatement(CodeIterationStatement e);
    protected virtual void GeneratePrimitiveExpression(CodePrimitiveExpression e);
    protected virtual void GenerateThrowExceptionStatement(CodeThrowExceptionStatement e);
    protected virtual void GenerateArrayCreateExpression(CodeArrayCreateExpression e);
    protected virtual void GenerateBaseReferenceExpression(CodeBaseReferenceExpression e);
    protected virtual void GenerateCastExpression(CodeCastExpression e);
    protected virtual void GenerateDelegateCreateExpression(CodeDelegateCreateExpression e);
    protected virtual void GenerateFieldReferenceExpression(CodeFieldReferenceExpression e);
    protected virtual void GenerateSingleFloatValue(float s);
    protected virtual void GenerateDoubleValue(double d);
    protected virtual void GenerateDecimalValue(decimal d);
    protected virtual void GenerateArgumentReferenceExpression(CodeArgumentReferenceExpression e);
    protected virtual void GenerateVariableReferenceExpression(CodeVariableReferenceExpression e);
    protected virtual void GenerateIndexerExpression(CodeIndexerExpression e);
    protected virtual void GenerateArrayIndexerExpression(CodeArrayIndexerExpression e);
    protected virtual void GenerateSnippetExpression(CodeSnippetExpression e);
    protected virtual void GenerateMethodInvokeExpression(CodeMethodInvokeExpression e);
    protected virtual void GenerateMethodReferenceExpression(CodeMethodReferenceExpression e);
    protected virtual void GenerateEventReferenceExpression(CodeEventReferenceExpression e);
    private void GenerateFormalEventReferenceExpression(CodeEventReferenceExpression e);
    protected virtual void GenerateDelegateInvokeExpression(CodeDelegateInvokeExpression e);
    protected virtual void GenerateObjectCreateExpression(CodeObjectCreateExpression e);
    protected virtual void GenerateParameterDeclarationExpression(CodeParameterDeclarationExpression e);
    protected virtual void GeneratePropertySetValueReferenceExpression(CodePropertySetValueReferenceExpression e);
    protected virtual void GenerateThisReferenceExpression(CodeThisReferenceExpression e);
    protected virtual void GenerateExpressionStatement(CodeExpressionStatement e);
    private bool IsDocComment(CodeCommentStatement comment);
    protected virtual void GenerateCommentStatements(CodeCommentStatementCollection e);
    protected virtual void GenerateComment(CodeComment e);
    protected virtual void GenerateMethodReturnStatement(CodeMethodReturnStatement e);
    protected virtual void GenerateConditionStatement(CodeConditionStatement e);
    protected virtual void GenerateTryCatchFinallyStatement(CodeTryCatchFinallyStatement e);
    protected virtual void GenerateAssignStatement(CodeAssignStatement e);
    protected virtual void GenerateAttachEventStatement(CodeAttachEventStatement e);
    protected virtual void GenerateRemoveEventStatement(CodeRemoveEventStatement e);
    protected virtual void GenerateSnippetStatement(CodeSnippetStatement e);
    protected virtual void GenerateGotoStatement(CodeGotoStatement e);
    protected virtual void GenerateLabeledStatement(CodeLabeledStatement e);
    protected virtual void GenerateVariableDeclarationStatement(CodeVariableDeclarationStatement e);
    protected virtual void GenerateLinePragmaStart(CodeLinePragma e);
    protected virtual void GenerateLinePragmaEnd(CodeLinePragma e);
    protected virtual void GenerateEvent(CodeMemberEvent e, CodeTypeDeclaration c);
    protected virtual void GenerateField(CodeMemberField e);
    private bool MethodIsOverloaded(CodeMemberMethod e, CodeTypeDeclaration c);
    protected virtual void GenerateSnippetMember(CodeSnippetTypeMember e);
    protected virtual void GenerateMethod(CodeMemberMethod e, CodeTypeDeclaration c);
    protected virtual void GenerateEntryPointMethod(CodeEntryPointMethod e, CodeTypeDeclaration c);
    private bool PropertyIsOverloaded(CodeMemberProperty e, CodeTypeDeclaration c);
    protected virtual void GenerateProperty(CodeMemberProperty e, CodeTypeDeclaration c);
    protected virtual void GeneratePropertyReferenceExpression(CodePropertyReferenceExpression e);
    protected virtual void GenerateConstructor(CodeConstructor e, CodeTypeDeclaration c);
    protected virtual void GenerateTypeConstructor(CodeTypeConstructor e);
    protected virtual void GenerateTypeOfExpression(CodeTypeOfExpression e);
    protected virtual void GenerateTypeStart(CodeTypeDeclaration e);
    private void OutputTypeParameters(CodeTypeParameterCollection typeParameters);
    private void OutputTypeParameterConstraints(CodeTypeParameter typeParameter);
    protected virtual void GenerateTypeEnd(CodeTypeDeclaration e);
    protected virtual void GenerateNamespace(CodeNamespace e);
    private bool AllowLateBound(CodeCompileUnit e);
    private bool RequireVariableDeclaration(CodeCompileUnit e);
    private bool GetUserData(CodeObject e, string property, bool defaultValue);
    protected virtual void GenerateCompileUnitStart(CodeCompileUnit e);
    protected virtual void GenerateCompileUnit(CodeCompileUnit e);
    protected virtual void GenerateDirectives(CodeDirectiveCollection directives);
    private void GenerateChecksumPragma(CodeChecksumPragma checksumPragma);
    private void GenerateCodeRegionDirective(CodeRegionDirective regionDirective);
    protected virtual void GenerateNamespaceStart(CodeNamespace e);
    protected virtual void GenerateNamespaceEnd(CodeNamespace e);
    protected virtual void GenerateNamespaceImport(CodeNamespaceImport e);
    protected virtual void GenerateAttributeDeclarationsStart(CodeAttributeDeclarationCollection attributes);
    protected virtual void GenerateAttributeDeclarationsEnd(CodeAttributeDeclarationCollection attributes);
    public static bool IsKeyword(string value);
    protected virtual bool Supports(GeneratorSupport support);
    protected virtual bool IsValidIdentifier(string value);
    protected virtual string CreateValidIdentifier(string name);
    protected virtual string CreateEscapedIdentifier(string name);
    private string GetBaseTypeOutput(CodeTypeReference typeRef, bool preferBuiltInTypes);
    private string GetTypeOutputWithoutArrayPostFix(CodeTypeReference typeRef);
    private string GetTypeArgumentsOutput(CodeTypeReferenceCollection typeArguments);
    private void GetTypeArgumentsOutput(CodeTypeReferenceCollection typeArguments, int start, int length, StringBuilder sb);
    protected virtual string GetTypeOutput(CodeTypeReference typeRef);
    protected virtual void ContinueOnNewLine(string st);
    private bool IsGeneratingStatements();
    private void GenerateVBStatements(CodeStatementCollection stms);
    protected virtual CompilerResults FromFileBatch(CompilerParameters options, String[] fileNames);
}
public class Microsoft.VisualBasic.VBCodeProvider : CodeDomProvider {
    private VBCodeGenerator _generator;
    public string FileExtension { get; }
    public LanguageOptions LanguageOptions { get; }
    public VBCodeProvider(IDictionary`2<string, string> providerOptions);
    public virtual string get_FileExtension();
    public virtual LanguageOptions get_LanguageOptions();
    [ObsoleteAttribute("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class.")]
public virtual ICodeGenerator CreateGenerator();
    [ObsoleteAttribute("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class.")]
public virtual ICodeCompiler CreateCompiler();
    public virtual TypeConverter GetConverter(Type type);
    public virtual void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
}
internal class Microsoft.VisualBasic.VBMemberAttributeConverter : VBModifierAttributeConverter {
    [CompilerGeneratedAttribute]
private static VBMemberAttributeConverter <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Values>k__BackingField;
    public static VBMemberAttributeConverter Default { get; }
    protected String[] Names { get; }
    protected Object[] Values { get; }
    protected object DefaultValue { get; }
    private static VBMemberAttributeConverter();
    [CompilerGeneratedAttribute]
public static VBMemberAttributeConverter get_Default();
    [CompilerGeneratedAttribute]
protected virtual String[] get_Names();
    [CompilerGeneratedAttribute]
protected virtual Object[] get_Values();
    protected virtual object get_DefaultValue();
}
internal abstract class Microsoft.VisualBasic.VBModifierAttributeConverter : TypeConverter {
    protected Object[] Values { get; }
    protected String[] Names { get; }
    protected object DefaultValue { get; }
    protected abstract virtual Object[] get_Values();
    protected abstract virtual String[] get_Names();
    protected abstract virtual object get_DefaultValue();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
internal class Microsoft.VisualBasic.VBTypeAttributeConverter : VBModifierAttributeConverter {
    [CompilerGeneratedAttribute]
private static VBTypeAttributeConverter <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Names>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Values>k__BackingField;
    public static VBTypeAttributeConverter Default { get; }
    protected String[] Names { get; }
    protected Object[] Values { get; }
    protected object DefaultValue { get; }
    private static VBTypeAttributeConverter();
    [CompilerGeneratedAttribute]
public static VBTypeAttributeConverter get_Default();
    [CompilerGeneratedAttribute]
protected virtual String[] get_Names();
    [CompilerGeneratedAttribute]
protected virtual Object[] get_Values();
    protected virtual object get_DefaultValue();
}
public class System.CodeDom.CodeArgumentReferenceExpression : CodeExpression {
    private string _parameterName;
    public string ParameterName { get; public set; }
    public CodeArgumentReferenceExpression(string parameterName);
    public string get_ParameterName();
    public void set_ParameterName(string value);
}
public class System.CodeDom.CodeArrayCreateExpression : CodeExpression {
    private CodeExpressionCollection _initializers;
    private CodeTypeReference _createType;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeExpression <SizeExpression>k__BackingField;
    public CodeTypeReference CreateType { get; public set; }
    public CodeExpressionCollection Initializers { get; }
    public int Size { get; public set; }
    public CodeExpression SizeExpression { get; public set; }
    public CodeArrayCreateExpression(CodeTypeReference createType, CodeExpression[] initializers);
    public CodeArrayCreateExpression(string createType, CodeExpression[] initializers);
    public CodeArrayCreateExpression(Type createType, CodeExpression[] initializers);
    public CodeArrayCreateExpression(CodeTypeReference createType, int size);
    public CodeArrayCreateExpression(string createType, int size);
    public CodeArrayCreateExpression(Type createType, int size);
    public CodeArrayCreateExpression(CodeTypeReference createType, CodeExpression size);
    public CodeArrayCreateExpression(string createType, CodeExpression size);
    public CodeArrayCreateExpression(Type createType, CodeExpression size);
    public CodeTypeReference get_CreateType();
    public void set_CreateType(CodeTypeReference value);
    public CodeExpressionCollection get_Initializers();
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
    [CompilerGeneratedAttribute]
public CodeExpression get_SizeExpression();
    [CompilerGeneratedAttribute]
public void set_SizeExpression(CodeExpression value);
}
public class System.CodeDom.CodeArrayIndexerExpression : CodeExpression {
    private CodeExpressionCollection _indices;
    [CompilerGeneratedAttribute]
private CodeExpression <TargetObject>k__BackingField;
    public CodeExpression TargetObject { get; public set; }
    public CodeExpressionCollection Indices { get; }
    public CodeArrayIndexerExpression(CodeExpression targetObject, CodeExpression[] indices);
    [CompilerGeneratedAttribute]
public CodeExpression get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(CodeExpression value);
    public CodeExpressionCollection get_Indices();
}
public class System.CodeDom.CodeAssignStatement : CodeStatement {
    [CompilerGeneratedAttribute]
private CodeExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeExpression <Right>k__BackingField;
    public CodeExpression Left { get; public set; }
    public CodeExpression Right { get; public set; }
    public CodeAssignStatement(CodeExpression left, CodeExpression right);
    [CompilerGeneratedAttribute]
public CodeExpression get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(CodeExpression value);
    [CompilerGeneratedAttribute]
public CodeExpression get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(CodeExpression value);
}
public class System.CodeDom.CodeAttachEventStatement : CodeStatement {
    private CodeEventReferenceExpression _eventRef;
    [CompilerGeneratedAttribute]
private CodeExpression <Listener>k__BackingField;
    public CodeEventReferenceExpression Event { get; public set; }
    public CodeExpression Listener { get; public set; }
    public CodeAttachEventStatement(CodeEventReferenceExpression eventRef, CodeExpression listener);
    public CodeAttachEventStatement(CodeExpression targetObject, string eventName, CodeExpression listener);
    public CodeEventReferenceExpression get_Event();
    public void set_Event(CodeEventReferenceExpression value);
    [CompilerGeneratedAttribute]
public CodeExpression get_Listener();
    [CompilerGeneratedAttribute]
public void set_Listener(CodeExpression value);
}
public class System.CodeDom.CodeAttributeArgument : object {
    private string _name;
    [CompilerGeneratedAttribute]
private CodeExpression <Value>k__BackingField;
    public string Name { get; public set; }
    public CodeExpression Value { get; public set; }
    public CodeAttributeArgument(CodeExpression value);
    public CodeAttributeArgument(string name, CodeExpression value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public CodeExpression get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(CodeExpression value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeAttributeArgumentCollection : CollectionBase {
    public CodeAttributeArgument Item { get; public set; }
    public CodeAttributeArgumentCollection(CodeAttributeArgumentCollection value);
    public CodeAttributeArgumentCollection(CodeAttributeArgument[] value);
    public CodeAttributeArgument get_Item(int index);
    public void set_Item(int index, CodeAttributeArgument value);
    public int Add(CodeAttributeArgument value);
    public void AddRange(CodeAttributeArgument[] value);
    public void AddRange(CodeAttributeArgumentCollection value);
    public bool Contains(CodeAttributeArgument value);
    public void CopyTo(CodeAttributeArgument[] array, int index);
    public int IndexOf(CodeAttributeArgument value);
    public void Insert(int index, CodeAttributeArgument value);
    public void Remove(CodeAttributeArgument value);
}
public class System.CodeDom.CodeAttributeDeclaration : object {
    private string _name;
    private CodeAttributeArgumentCollection _arguments;
    private CodeTypeReference _attributeType;
    public string Name { get; public set; }
    public CodeAttributeArgumentCollection Arguments { get; }
    public CodeTypeReference AttributeType { get; }
    public CodeAttributeDeclaration(string name);
    public CodeAttributeDeclaration(string name, CodeAttributeArgument[] arguments);
    public CodeAttributeDeclaration(CodeTypeReference attributeType);
    public CodeAttributeDeclaration(CodeTypeReference attributeType, CodeAttributeArgument[] arguments);
    public string get_Name();
    public void set_Name(string value);
    public CodeAttributeArgumentCollection get_Arguments();
    public CodeTypeReference get_AttributeType();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeAttributeDeclarationCollection : CollectionBase {
    public CodeAttributeDeclaration Item { get; public set; }
    public CodeAttributeDeclarationCollection(CodeAttributeDeclarationCollection value);
    public CodeAttributeDeclarationCollection(CodeAttributeDeclaration[] value);
    public CodeAttributeDeclaration get_Item(int index);
    public void set_Item(int index, CodeAttributeDeclaration value);
    public int Add(CodeAttributeDeclaration value);
    public void AddRange(CodeAttributeDeclaration[] value);
    public void AddRange(CodeAttributeDeclarationCollection value);
    public bool Contains(CodeAttributeDeclaration value);
    public void CopyTo(CodeAttributeDeclaration[] array, int index);
    public int IndexOf(CodeAttributeDeclaration value);
    public void Insert(int index, CodeAttributeDeclaration value);
    public void Remove(CodeAttributeDeclaration value);
}
public class System.CodeDom.CodeBaseReferenceExpression : CodeExpression {
}
public class System.CodeDom.CodeBinaryOperatorExpression : CodeExpression {
    [CompilerGeneratedAttribute]
private CodeExpression <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeBinaryOperatorType <Operator>k__BackingField;
    public CodeExpression Right { get; public set; }
    public CodeExpression Left { get; public set; }
    public CodeBinaryOperatorType Operator { get; public set; }
    public CodeBinaryOperatorExpression(CodeExpression left, CodeBinaryOperatorType op, CodeExpression right);
    [CompilerGeneratedAttribute]
public CodeExpression get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(CodeExpression value);
    [CompilerGeneratedAttribute]
public CodeExpression get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(CodeExpression value);
    [CompilerGeneratedAttribute]
public CodeBinaryOperatorType get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(CodeBinaryOperatorType value);
}
public enum System.CodeDom.CodeBinaryOperatorType : Enum {
    public int value__;
    public static CodeBinaryOperatorType Add;
    public static CodeBinaryOperatorType Subtract;
    public static CodeBinaryOperatorType Multiply;
    public static CodeBinaryOperatorType Divide;
    public static CodeBinaryOperatorType Modulus;
    public static CodeBinaryOperatorType Assign;
    public static CodeBinaryOperatorType IdentityInequality;
    public static CodeBinaryOperatorType IdentityEquality;
    public static CodeBinaryOperatorType ValueEquality;
    public static CodeBinaryOperatorType BitwiseOr;
    public static CodeBinaryOperatorType BitwiseAnd;
    public static CodeBinaryOperatorType BooleanOr;
    public static CodeBinaryOperatorType BooleanAnd;
    public static CodeBinaryOperatorType LessThan;
    public static CodeBinaryOperatorType LessThanOrEqual;
    public static CodeBinaryOperatorType GreaterThan;
    public static CodeBinaryOperatorType GreaterThanOrEqual;
}
public class System.CodeDom.CodeCastExpression : CodeExpression {
    private CodeTypeReference _targetType;
    [CompilerGeneratedAttribute]
private CodeExpression <Expression>k__BackingField;
    public CodeTypeReference TargetType { get; public set; }
    public CodeExpression Expression { get; public set; }
    public CodeCastExpression(CodeTypeReference targetType, CodeExpression expression);
    public CodeCastExpression(string targetType, CodeExpression expression);
    public CodeCastExpression(Type targetType, CodeExpression expression);
    public CodeTypeReference get_TargetType();
    public void set_TargetType(CodeTypeReference value);
    [CompilerGeneratedAttribute]
public CodeExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(CodeExpression value);
}
public class System.CodeDom.CodeCatchClause : object {
    private CodeStatementCollection _statements;
    private CodeTypeReference _catchExceptionType;
    private string _localName;
    public string LocalName { get; public set; }
    public CodeTypeReference CatchExceptionType { get; public set; }
    public CodeStatementCollection Statements { get; }
    public CodeCatchClause(string localName);
    public CodeCatchClause(string localName, CodeTypeReference catchExceptionType);
    public CodeCatchClause(string localName, CodeTypeReference catchExceptionType, CodeStatement[] statements);
    public string get_LocalName();
    public void set_LocalName(string value);
    public CodeTypeReference get_CatchExceptionType();
    public void set_CatchExceptionType(CodeTypeReference value);
    public CodeStatementCollection get_Statements();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeCatchClauseCollection : CollectionBase {
    public CodeCatchClause Item { get; public set; }
    public CodeCatchClauseCollection(CodeCatchClauseCollection value);
    public CodeCatchClauseCollection(CodeCatchClause[] value);
    public CodeCatchClause get_Item(int index);
    public void set_Item(int index, CodeCatchClause value);
    public int Add(CodeCatchClause value);
    public void AddRange(CodeCatchClause[] value);
    public void AddRange(CodeCatchClauseCollection value);
    public bool Contains(CodeCatchClause value);
    public void CopyTo(CodeCatchClause[] array, int index);
    public int IndexOf(CodeCatchClause value);
    public void Insert(int index, CodeCatchClause value);
    public void Remove(CodeCatchClause value);
}
public class System.CodeDom.CodeChecksumPragma : CodeDirective {
    private string _fileName;
    [CompilerGeneratedAttribute]
private Guid <ChecksumAlgorithmId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ChecksumData>k__BackingField;
    public string FileName { get; public set; }
    public Guid ChecksumAlgorithmId { get; public set; }
    public Byte[] ChecksumData { get; public set; }
    public CodeChecksumPragma(string fileName, Guid checksumAlgorithmId, Byte[] checksumData);
    public string get_FileName();
    public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public Guid get_ChecksumAlgorithmId();
    [CompilerGeneratedAttribute]
public void set_ChecksumAlgorithmId(Guid value);
    [CompilerGeneratedAttribute]
public Byte[] get_ChecksumData();
    [CompilerGeneratedAttribute]
public void set_ChecksumData(Byte[] value);
}
public class System.CodeDom.CodeComment : CodeObject {
    private string _text;
    [CompilerGeneratedAttribute]
private bool <DocComment>k__BackingField;
    public bool DocComment { get; public set; }
    public string Text { get; public set; }
    public CodeComment(string text);
    public CodeComment(string text, bool docComment);
    [CompilerGeneratedAttribute]
public bool get_DocComment();
    [CompilerGeneratedAttribute]
public void set_DocComment(bool value);
    public string get_Text();
    public void set_Text(string value);
}
public class System.CodeDom.CodeCommentStatement : CodeStatement {
    [CompilerGeneratedAttribute]
private CodeComment <Comment>k__BackingField;
    public CodeComment Comment { get; public set; }
    public CodeCommentStatement(CodeComment comment);
    public CodeCommentStatement(string text);
    public CodeCommentStatement(string text, bool docComment);
    [CompilerGeneratedAttribute]
public CodeComment get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(CodeComment value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeCommentStatementCollection : CollectionBase {
    public CodeCommentStatement Item { get; public set; }
    public CodeCommentStatementCollection(CodeCommentStatementCollection value);
    public CodeCommentStatementCollection(CodeCommentStatement[] value);
    public CodeCommentStatement get_Item(int index);
    public void set_Item(int index, CodeCommentStatement value);
    public int Add(CodeCommentStatement value);
    public void AddRange(CodeCommentStatement[] value);
    public void AddRange(CodeCommentStatementCollection value);
    public bool Contains(CodeCommentStatement value);
    public void CopyTo(CodeCommentStatement[] array, int index);
    public int IndexOf(CodeCommentStatement value);
    public void Insert(int index, CodeCommentStatement value);
    public void Remove(CodeCommentStatement value);
}
public class System.CodeDom.CodeCompileUnit : CodeObject {
    private StringCollection _assemblies;
    private CodeAttributeDeclarationCollection _attributes;
    private CodeDirectiveCollection _startDirectives;
    private CodeDirectiveCollection _endDirectives;
    [CompilerGeneratedAttribute]
private CodeNamespaceCollection <Namespaces>k__BackingField;
    public CodeNamespaceCollection Namespaces { get; }
    public StringCollection ReferencedAssemblies { get; }
    public CodeAttributeDeclarationCollection AssemblyCustomAttributes { get; }
    public CodeDirectiveCollection StartDirectives { get; }
    public CodeDirectiveCollection EndDirectives { get; }
    [CompilerGeneratedAttribute]
public CodeNamespaceCollection get_Namespaces();
    public StringCollection get_ReferencedAssemblies();
    public CodeAttributeDeclarationCollection get_AssemblyCustomAttributes();
    public CodeDirectiveCollection get_StartDirectives();
    public CodeDirectiveCollection get_EndDirectives();
}
public class System.CodeDom.CodeConditionStatement : CodeStatement {
    [CompilerGeneratedAttribute]
private CodeExpression <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStatementCollection <TrueStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStatementCollection <FalseStatements>k__BackingField;
    public CodeExpression Condition { get; public set; }
    public CodeStatementCollection TrueStatements { get; }
    public CodeStatementCollection FalseStatements { get; }
    public CodeConditionStatement(CodeExpression condition, CodeStatement[] trueStatements);
    public CodeConditionStatement(CodeExpression condition, CodeStatement[] trueStatements, CodeStatement[] falseStatements);
    [CompilerGeneratedAttribute]
public CodeExpression get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(CodeExpression value);
    [CompilerGeneratedAttribute]
public CodeStatementCollection get_TrueStatements();
    [CompilerGeneratedAttribute]
public CodeStatementCollection get_FalseStatements();
}
public class System.CodeDom.CodeConstructor : CodeMemberMethod {
    [CompilerGeneratedAttribute]
private CodeExpressionCollection <BaseConstructorArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeExpressionCollection <ChainedConstructorArgs>k__BackingField;
    public CodeExpressionCollection BaseConstructorArgs { get; }
    public CodeExpressionCollection ChainedConstructorArgs { get; }
    [CompilerGeneratedAttribute]
public CodeExpressionCollection get_BaseConstructorArgs();
    [CompilerGeneratedAttribute]
public CodeExpressionCollection get_ChainedConstructorArgs();
}
public class System.CodeDom.CodeDefaultValueExpression : CodeExpression {
    private CodeTypeReference _type;
    public CodeTypeReference Type { get; public set; }
    public CodeDefaultValueExpression(CodeTypeReference type);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeDelegateCreateExpression : CodeExpression {
    private CodeTypeReference _delegateType;
    private string _methodName;
    [CompilerGeneratedAttribute]
private CodeExpression <TargetObject>k__BackingField;
    public CodeTypeReference DelegateType { get; public set; }
    public CodeExpression TargetObject { get; public set; }
    public string MethodName { get; public set; }
    public CodeDelegateCreateExpression(CodeTypeReference delegateType, CodeExpression targetObject, string methodName);
    public CodeTypeReference get_DelegateType();
    public void set_DelegateType(CodeTypeReference value);
    [CompilerGeneratedAttribute]
public CodeExpression get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(CodeExpression value);
    public string get_MethodName();
    public void set_MethodName(string value);
}
public class System.CodeDom.CodeDelegateInvokeExpression : CodeExpression {
    [CompilerGeneratedAttribute]
private CodeExpression <TargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeExpressionCollection <Parameters>k__BackingField;
    public CodeExpression TargetObject { get; public set; }
    public CodeExpressionCollection Parameters { get; }
    public CodeDelegateInvokeExpression(CodeExpression targetObject);
    public CodeDelegateInvokeExpression(CodeExpression targetObject, CodeExpression[] parameters);
    [CompilerGeneratedAttribute]
public CodeExpression get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(CodeExpression value);
    [CompilerGeneratedAttribute]
public CodeExpressionCollection get_Parameters();
}
public class System.CodeDom.CodeDirectionExpression : CodeExpression {
    [CompilerGeneratedAttribute]
private CodeExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldDirection <Direction>k__BackingField;
    public CodeExpression Expression { get; public set; }
    public FieldDirection Direction { get; public set; }
    public CodeDirectionExpression(FieldDirection direction, CodeExpression expression);
    [CompilerGeneratedAttribute]
public CodeExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(CodeExpression value);
    [CompilerGeneratedAttribute]
public FieldDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(FieldDirection value);
}
public class System.CodeDom.CodeDirective : CodeObject {
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeDirectiveCollection : CollectionBase {
    public CodeDirective Item { get; public set; }
    public CodeDirectiveCollection(CodeDirectiveCollection value);
    public CodeDirectiveCollection(CodeDirective[] value);
    public CodeDirective get_Item(int index);
    public void set_Item(int index, CodeDirective value);
    public int Add(CodeDirective value);
    public void AddRange(CodeDirective[] value);
    public void AddRange(CodeDirectiveCollection value);
    public bool Contains(CodeDirective value);
    public void CopyTo(CodeDirective[] array, int index);
    public int IndexOf(CodeDirective value);
    public void Insert(int index, CodeDirective value);
    public void Remove(CodeDirective value);
}
public class System.CodeDom.CodeEntryPointMethod : CodeMemberMethod {
}
public class System.CodeDom.CodeEventReferenceExpression : CodeExpression {
    private string _eventName;
    [CompilerGeneratedAttribute]
private CodeExpression <TargetObject>k__BackingField;
    public CodeExpression TargetObject { get; public set; }
    public string EventName { get; public set; }
    public CodeEventReferenceExpression(CodeExpression targetObject, string eventName);
    [CompilerGeneratedAttribute]
public CodeExpression get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(CodeExpression value);
    public string get_EventName();
    public void set_EventName(string value);
}
public class System.CodeDom.CodeExpression : CodeObject {
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeExpressionCollection : CollectionBase {
    public CodeExpression Item { get; public set; }
    public CodeExpressionCollection(CodeExpressionCollection value);
    public CodeExpressionCollection(CodeExpression[] value);
    public CodeExpression get_Item(int index);
    public void set_Item(int index, CodeExpression value);
    public int Add(CodeExpression value);
    public void AddRange(CodeExpression[] value);
    public void AddRange(CodeExpressionCollection value);
    public bool Contains(CodeExpression value);
    public void CopyTo(CodeExpression[] array, int index);
    public int IndexOf(CodeExpression value);
    public void Insert(int index, CodeExpression value);
    public void Remove(CodeExpression value);
}
public class System.CodeDom.CodeExpressionStatement : CodeStatement {
    [CompilerGeneratedAttribute]
private CodeExpression <Expression>k__BackingField;
    public CodeExpression Expression { get; public set; }
    public CodeExpressionStatement(CodeExpression expression);
    [CompilerGeneratedAttribute]
public CodeExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(CodeExpression value);
}
public class System.CodeDom.CodeFieldReferenceExpression : CodeExpression {
    private string _fieldName;
    [CompilerGeneratedAttribute]
private CodeExpression <TargetObject>k__BackingField;
    public CodeExpression TargetObject { get; public set; }
    public string FieldName { get; public set; }
    public CodeFieldReferenceExpression(CodeExpression targetObject, string fieldName);
    [CompilerGeneratedAttribute]
public CodeExpression get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(CodeExpression value);
    public string get_FieldName();
    public void set_FieldName(string value);
}
public class System.CodeDom.CodeGotoStatement : CodeStatement {
    private string _label;
    public string Label { get; public set; }
    public CodeGotoStatement(string label);
    public string get_Label();
    public void set_Label(string value);
}
public class System.CodeDom.CodeIndexerExpression : CodeExpression {
    private CodeExpressionCollection _indices;
    [CompilerGeneratedAttribute]
private CodeExpression <TargetObject>k__BackingField;
    public CodeExpression TargetObject { get; public set; }
    public CodeExpressionCollection Indices { get; }
    public CodeIndexerExpression(CodeExpression targetObject, CodeExpression[] indices);
    [CompilerGeneratedAttribute]
public CodeExpression get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(CodeExpression value);
    public CodeExpressionCollection get_Indices();
}
public class System.CodeDom.CodeIterationStatement : CodeStatement {
    [CompilerGeneratedAttribute]
private CodeStatement <InitStatement>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeExpression <TestExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStatement <IncrementStatement>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStatementCollection <Statements>k__BackingField;
    public CodeStatement InitStatement { get; public set; }
    public CodeExpression TestExpression { get; public set; }
    public CodeStatement IncrementStatement { get; public set; }
    public CodeStatementCollection Statements { get; }
    public CodeIterationStatement(CodeStatement initStatement, CodeExpression testExpression, CodeStatement incrementStatement, CodeStatement[] statements);
    [CompilerGeneratedAttribute]
public CodeStatement get_InitStatement();
    [CompilerGeneratedAttribute]
public void set_InitStatement(CodeStatement value);
    [CompilerGeneratedAttribute]
public CodeExpression get_TestExpression();
    [CompilerGeneratedAttribute]
public void set_TestExpression(CodeExpression value);
    [CompilerGeneratedAttribute]
public CodeStatement get_IncrementStatement();
    [CompilerGeneratedAttribute]
public void set_IncrementStatement(CodeStatement value);
    [CompilerGeneratedAttribute]
public CodeStatementCollection get_Statements();
}
public class System.CodeDom.CodeLabeledStatement : CodeStatement {
    private string _label;
    [CompilerGeneratedAttribute]
private CodeStatement <Statement>k__BackingField;
    public string Label { get; public set; }
    public CodeStatement Statement { get; public set; }
    public CodeLabeledStatement(string label);
    public CodeLabeledStatement(string label, CodeStatement statement);
    public string get_Label();
    public void set_Label(string value);
    [CompilerGeneratedAttribute]
public CodeStatement get_Statement();
    [CompilerGeneratedAttribute]
public void set_Statement(CodeStatement value);
}
public class System.CodeDom.CodeLinePragma : object {
    private string _fileName;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public string FileName { get; public set; }
    public int LineNumber { get; public set; }
    public CodeLinePragma(string fileName, int lineNumber);
    public string get_FileName();
    public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
}
public class System.CodeDom.CodeMemberEvent : CodeTypeMember {
    private CodeTypeReference _type;
    private CodeTypeReferenceCollection _implementationTypes;
    [CompilerGeneratedAttribute]
private CodeTypeReference <PrivateImplementationType>k__BackingField;
    public CodeTypeReference Type { get; public set; }
    public CodeTypeReference PrivateImplementationType { get; public set; }
    public CodeTypeReferenceCollection ImplementationTypes { get; }
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
    [CompilerGeneratedAttribute]
public CodeTypeReference get_PrivateImplementationType();
    [CompilerGeneratedAttribute]
public void set_PrivateImplementationType(CodeTypeReference value);
    public CodeTypeReferenceCollection get_ImplementationTypes();
}
public class System.CodeDom.CodeMemberField : CodeTypeMember {
    private CodeTypeReference _type;
    [CompilerGeneratedAttribute]
private CodeExpression <InitExpression>k__BackingField;
    public CodeTypeReference Type { get; public set; }
    public CodeExpression InitExpression { get; public set; }
    public CodeMemberField(CodeTypeReference type, string name);
    public CodeMemberField(string type, string name);
    public CodeMemberField(Type type, string name);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
    [CompilerGeneratedAttribute]
public CodeExpression get_InitExpression();
    [CompilerGeneratedAttribute]
public void set_InitExpression(CodeExpression value);
}
public class System.CodeDom.CodeMemberMethod : CodeTypeMember {
    private CodeParameterDeclarationExpressionCollection _parameters;
    private CodeStatementCollection _statements;
    private CodeTypeReference _returnType;
    private CodeTypeReferenceCollection _implementationTypes;
    private CodeAttributeDeclarationCollection _returnAttributes;
    private CodeTypeParameterCollection _typeParameters;
    private int _populated;
    private static int ParametersCollection;
    private static int StatementsCollection;
    private static int ImplTypesCollection;
    [CompilerGeneratedAttribute]
private EventHandler PopulateParameters;
    [CompilerGeneratedAttribute]
private EventHandler PopulateStatements;
    [CompilerGeneratedAttribute]
private EventHandler PopulateImplementationTypes;
    [CompilerGeneratedAttribute]
private CodeTypeReference <PrivateImplementationType>k__BackingField;
    public CodeTypeReference ReturnType { get; public set; }
    public CodeStatementCollection Statements { get; }
    public CodeParameterDeclarationExpressionCollection Parameters { get; }
    public CodeTypeReference PrivateImplementationType { get; public set; }
    public CodeTypeReferenceCollection ImplementationTypes { get; }
    public CodeAttributeDeclarationCollection ReturnTypeCustomAttributes { get; }
    public CodeTypeParameterCollection TypeParameters { get; }
    [CompilerGeneratedAttribute]
public void add_PopulateParameters(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateParameters(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateStatements(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateStatements(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateImplementationTypes(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateImplementationTypes(EventHandler value);
    public CodeTypeReference get_ReturnType();
    public void set_ReturnType(CodeTypeReference value);
    public CodeStatementCollection get_Statements();
    public CodeParameterDeclarationExpressionCollection get_Parameters();
    [CompilerGeneratedAttribute]
public CodeTypeReference get_PrivateImplementationType();
    [CompilerGeneratedAttribute]
public void set_PrivateImplementationType(CodeTypeReference value);
    public CodeTypeReferenceCollection get_ImplementationTypes();
    public CodeAttributeDeclarationCollection get_ReturnTypeCustomAttributes();
    public CodeTypeParameterCollection get_TypeParameters();
}
public class System.CodeDom.CodeMemberProperty : CodeTypeMember {
    private CodeTypeReference _type;
    private bool _hasGet;
    private bool _hasSet;
    private CodeTypeReferenceCollection _implementationTypes;
    [CompilerGeneratedAttribute]
private CodeTypeReference <PrivateImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStatementCollection <GetStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStatementCollection <SetStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeParameterDeclarationExpressionCollection <Parameters>k__BackingField;
    public CodeTypeReference PrivateImplementationType { get; public set; }
    public CodeTypeReferenceCollection ImplementationTypes { get; }
    public CodeTypeReference Type { get; public set; }
    public bool HasGet { get; public set; }
    public bool HasSet { get; public set; }
    public CodeStatementCollection GetStatements { get; }
    public CodeStatementCollection SetStatements { get; }
    public CodeParameterDeclarationExpressionCollection Parameters { get; }
    [CompilerGeneratedAttribute]
public CodeTypeReference get_PrivateImplementationType();
    [CompilerGeneratedAttribute]
public void set_PrivateImplementationType(CodeTypeReference value);
    public CodeTypeReferenceCollection get_ImplementationTypes();
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
    public bool get_HasGet();
    public void set_HasGet(bool value);
    public bool get_HasSet();
    public void set_HasSet(bool value);
    [CompilerGeneratedAttribute]
public CodeStatementCollection get_GetStatements();
    [CompilerGeneratedAttribute]
public CodeStatementCollection get_SetStatements();
    [CompilerGeneratedAttribute]
public CodeParameterDeclarationExpressionCollection get_Parameters();
}
public class System.CodeDom.CodeMethodInvokeExpression : CodeExpression {
    private CodeMethodReferenceExpression _method;
    [CompilerGeneratedAttribute]
private CodeExpressionCollection <Parameters>k__BackingField;
    public CodeMethodReferenceExpression Method { get; public set; }
    public CodeExpressionCollection Parameters { get; }
    public CodeMethodInvokeExpression(CodeMethodReferenceExpression method, CodeExpression[] parameters);
    public CodeMethodInvokeExpression(CodeExpression targetObject, string methodName, CodeExpression[] parameters);
    public CodeMethodReferenceExpression get_Method();
    public void set_Method(CodeMethodReferenceExpression value);
    [CompilerGeneratedAttribute]
public CodeExpressionCollection get_Parameters();
}
public class System.CodeDom.CodeMethodReferenceExpression : CodeExpression {
    private string _methodName;
    private CodeTypeReferenceCollection _typeArguments;
    [CompilerGeneratedAttribute]
private CodeExpression <TargetObject>k__BackingField;
    public CodeExpression TargetObject { get; public set; }
    public string MethodName { get; public set; }
    public CodeTypeReferenceCollection TypeArguments { get; }
    public CodeMethodReferenceExpression(CodeExpression targetObject, string methodName);
    public CodeMethodReferenceExpression(CodeExpression targetObject, string methodName, CodeTypeReference[] typeParameters);
    [CompilerGeneratedAttribute]
public CodeExpression get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(CodeExpression value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public CodeTypeReferenceCollection get_TypeArguments();
}
public class System.CodeDom.CodeMethodReturnStatement : CodeStatement {
    [CompilerGeneratedAttribute]
private CodeExpression <Expression>k__BackingField;
    public CodeExpression Expression { get; public set; }
    public CodeMethodReturnStatement(CodeExpression expression);
    [CompilerGeneratedAttribute]
public CodeExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(CodeExpression value);
}
public class System.CodeDom.CodeNamespace : CodeObject {
    private string _name;
    private CodeNamespaceImportCollection _imports;
    private CodeCommentStatementCollection _comments;
    private CodeTypeDeclarationCollection _classes;
    private int _populated;
    private static int ImportsCollection;
    private static int CommentsCollection;
    private static int TypesCollection;
    [CompilerGeneratedAttribute]
private EventHandler PopulateComments;
    [CompilerGeneratedAttribute]
private EventHandler PopulateImports;
    [CompilerGeneratedAttribute]
private EventHandler PopulateTypes;
    public CodeTypeDeclarationCollection Types { get; }
    public CodeNamespaceImportCollection Imports { get; }
    public string Name { get; public set; }
    public CodeCommentStatementCollection Comments { get; }
    public CodeNamespace(string name);
    [CompilerGeneratedAttribute]
public void add_PopulateComments(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateComments(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateImports(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateImports(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateTypes(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateTypes(EventHandler value);
    public CodeTypeDeclarationCollection get_Types();
    public CodeNamespaceImportCollection get_Imports();
    public string get_Name();
    public void set_Name(string value);
    public CodeCommentStatementCollection get_Comments();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeNamespaceCollection : CollectionBase {
    public CodeNamespace Item { get; public set; }
    public CodeNamespaceCollection(CodeNamespaceCollection value);
    public CodeNamespaceCollection(CodeNamespace[] value);
    public CodeNamespace get_Item(int index);
    public void set_Item(int index, CodeNamespace value);
    public int Add(CodeNamespace value);
    public void AddRange(CodeNamespace[] value);
    public void AddRange(CodeNamespaceCollection value);
    public bool Contains(CodeNamespace value);
    public void CopyTo(CodeNamespace[] array, int index);
    public int IndexOf(CodeNamespace value);
    public void Insert(int index, CodeNamespace value);
    public void Remove(CodeNamespace value);
}
public class System.CodeDom.CodeNamespaceImport : CodeObject {
    private string _nameSpace;
    [CompilerGeneratedAttribute]
private CodeLinePragma <LinePragma>k__BackingField;
    public CodeLinePragma LinePragma { get; public set; }
    public string Namespace { get; public set; }
    public CodeNamespaceImport(string nameSpace);
    [CompilerGeneratedAttribute]
public CodeLinePragma get_LinePragma();
    [CompilerGeneratedAttribute]
public void set_LinePragma(CodeLinePragma value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeNamespaceImportCollection : object {
    private ArrayList _data;
    private Dictionary`2<string, CodeNamespaceImport> _keys;
    public CodeNamespaceImport Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public CodeNamespaceImport get_Item(int index);
    public void set_Item(int index, CodeNamespaceImport value);
    public int get_Count();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public void Add(CodeNamespaceImport value);
    public void AddRange(CodeNamespaceImport[] value);
    public void Clear();
    private void SyncKeys();
    public IEnumerator GetEnumerator();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
}
public class System.CodeDom.CodeObject : object {
    private IDictionary _userData;
    public IDictionary UserData { get; }
    public IDictionary get_UserData();
}
public class System.CodeDom.CodeObjectCreateExpression : CodeExpression {
    private CodeTypeReference _createType;
    [CompilerGeneratedAttribute]
private CodeExpressionCollection <Parameters>k__BackingField;
    public CodeTypeReference CreateType { get; public set; }
    public CodeExpressionCollection Parameters { get; }
    public CodeObjectCreateExpression(CodeTypeReference createType, CodeExpression[] parameters);
    public CodeObjectCreateExpression(string createType, CodeExpression[] parameters);
    public CodeObjectCreateExpression(Type createType, CodeExpression[] parameters);
    public CodeTypeReference get_CreateType();
    public void set_CreateType(CodeTypeReference value);
    [CompilerGeneratedAttribute]
public CodeExpressionCollection get_Parameters();
}
public class System.CodeDom.CodeParameterDeclarationExpression : CodeExpression {
    private CodeTypeReference _type;
    private string _name;
    private CodeAttributeDeclarationCollection _customAttributes;
    [CompilerGeneratedAttribute]
private FieldDirection <Direction>k__BackingField;
    public CodeAttributeDeclarationCollection CustomAttributes { get; public set; }
    public FieldDirection Direction { get; public set; }
    public CodeTypeReference Type { get; public set; }
    public string Name { get; public set; }
    public CodeParameterDeclarationExpression(CodeTypeReference type, string name);
    public CodeParameterDeclarationExpression(string type, string name);
    public CodeParameterDeclarationExpression(Type type, string name);
    public CodeAttributeDeclarationCollection get_CustomAttributes();
    public void set_CustomAttributes(CodeAttributeDeclarationCollection value);
    [CompilerGeneratedAttribute]
public FieldDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(FieldDirection value);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
    public string get_Name();
    public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeParameterDeclarationExpressionCollection : CollectionBase {
    public CodeParameterDeclarationExpression Item { get; public set; }
    public CodeParameterDeclarationExpressionCollection(CodeParameterDeclarationExpressionCollection value);
    public CodeParameterDeclarationExpressionCollection(CodeParameterDeclarationExpression[] value);
    public CodeParameterDeclarationExpression get_Item(int index);
    public void set_Item(int index, CodeParameterDeclarationExpression value);
    public int Add(CodeParameterDeclarationExpression value);
    public void AddRange(CodeParameterDeclarationExpression[] value);
    public void AddRange(CodeParameterDeclarationExpressionCollection value);
    public bool Contains(CodeParameterDeclarationExpression value);
    public void CopyTo(CodeParameterDeclarationExpression[] array, int index);
    public int IndexOf(CodeParameterDeclarationExpression value);
    public void Insert(int index, CodeParameterDeclarationExpression value);
    public void Remove(CodeParameterDeclarationExpression value);
}
public class System.CodeDom.CodePrimitiveExpression : CodeExpression {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; public set; }
    public CodePrimitiveExpression(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class System.CodeDom.CodePropertyReferenceExpression : CodeExpression {
    private string _propertyName;
    [CompilerGeneratedAttribute]
private CodeExpression <TargetObject>k__BackingField;
    public CodeExpression TargetObject { get; public set; }
    public string PropertyName { get; public set; }
    public CodePropertyReferenceExpression(CodeExpression targetObject, string propertyName);
    [CompilerGeneratedAttribute]
public CodeExpression get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(CodeExpression value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
}
public class System.CodeDom.CodePropertySetValueReferenceExpression : CodeExpression {
}
public class System.CodeDom.CodeRegionDirective : CodeDirective {
    private string _regionText;
    [CompilerGeneratedAttribute]
private CodeRegionMode <RegionMode>k__BackingField;
    public string RegionText { get; public set; }
    public CodeRegionMode RegionMode { get; public set; }
    public CodeRegionDirective(CodeRegionMode regionMode, string regionText);
    public string get_RegionText();
    public void set_RegionText(string value);
    [CompilerGeneratedAttribute]
public CodeRegionMode get_RegionMode();
    [CompilerGeneratedAttribute]
public void set_RegionMode(CodeRegionMode value);
}
public enum System.CodeDom.CodeRegionMode : Enum {
    public int value__;
    public static CodeRegionMode None;
    public static CodeRegionMode Start;
    public static CodeRegionMode End;
}
public class System.CodeDom.CodeRemoveEventStatement : CodeStatement {
    private CodeEventReferenceExpression _eventRef;
    [CompilerGeneratedAttribute]
private CodeExpression <Listener>k__BackingField;
    public CodeEventReferenceExpression Event { get; public set; }
    public CodeExpression Listener { get; public set; }
    public CodeRemoveEventStatement(CodeEventReferenceExpression eventRef, CodeExpression listener);
    public CodeRemoveEventStatement(CodeExpression targetObject, string eventName, CodeExpression listener);
    public CodeEventReferenceExpression get_Event();
    public void set_Event(CodeEventReferenceExpression value);
    [CompilerGeneratedAttribute]
public CodeExpression get_Listener();
    [CompilerGeneratedAttribute]
public void set_Listener(CodeExpression value);
}
public class System.CodeDom.CodeSnippetCompileUnit : CodeCompileUnit {
    private string _value;
    [CompilerGeneratedAttribute]
private CodeLinePragma <LinePragma>k__BackingField;
    public string Value { get; public set; }
    public CodeLinePragma LinePragma { get; public set; }
    public CodeSnippetCompileUnit(string value);
    public string get_Value();
    public void set_Value(string value);
    [CompilerGeneratedAttribute]
public CodeLinePragma get_LinePragma();
    [CompilerGeneratedAttribute]
public void set_LinePragma(CodeLinePragma value);
}
public class System.CodeDom.CodeSnippetExpression : CodeExpression {
    private string _value;
    public string Value { get; public set; }
    public CodeSnippetExpression(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class System.CodeDom.CodeSnippetStatement : CodeStatement {
    private string _value;
    public string Value { get; public set; }
    public CodeSnippetStatement(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class System.CodeDom.CodeSnippetTypeMember : CodeTypeMember {
    private string _text;
    public string Text { get; public set; }
    public CodeSnippetTypeMember(string text);
    public string get_Text();
    public void set_Text(string value);
}
public class System.CodeDom.CodeStatement : CodeObject {
    private CodeDirectiveCollection _startDirectives;
    private CodeDirectiveCollection _endDirectives;
    [CompilerGeneratedAttribute]
private CodeLinePragma <LinePragma>k__BackingField;
    public CodeLinePragma LinePragma { get; public set; }
    public CodeDirectiveCollection StartDirectives { get; }
    public CodeDirectiveCollection EndDirectives { get; }
    [CompilerGeneratedAttribute]
public CodeLinePragma get_LinePragma();
    [CompilerGeneratedAttribute]
public void set_LinePragma(CodeLinePragma value);
    public CodeDirectiveCollection get_StartDirectives();
    public CodeDirectiveCollection get_EndDirectives();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeStatementCollection : CollectionBase {
    public CodeStatement Item { get; public set; }
    public CodeStatementCollection(CodeStatementCollection value);
    public CodeStatementCollection(CodeStatement[] value);
    public CodeStatement get_Item(int index);
    public void set_Item(int index, CodeStatement value);
    public int Add(CodeStatement value);
    public int Add(CodeExpression value);
    public void AddRange(CodeStatement[] value);
    public void AddRange(CodeStatementCollection value);
    public bool Contains(CodeStatement value);
    public void CopyTo(CodeStatement[] array, int index);
    public int IndexOf(CodeStatement value);
    public void Insert(int index, CodeStatement value);
    public void Remove(CodeStatement value);
}
public class System.CodeDom.CodeThisReferenceExpression : CodeExpression {
}
public class System.CodeDom.CodeThrowExceptionStatement : CodeStatement {
    [CompilerGeneratedAttribute]
private CodeExpression <ToThrow>k__BackingField;
    public CodeExpression ToThrow { get; public set; }
    public CodeThrowExceptionStatement(CodeExpression toThrow);
    [CompilerGeneratedAttribute]
public CodeExpression get_ToThrow();
    [CompilerGeneratedAttribute]
public void set_ToThrow(CodeExpression value);
}
public class System.CodeDom.CodeTryCatchFinallyStatement : CodeStatement {
    [CompilerGeneratedAttribute]
private CodeStatementCollection <TryStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCatchClauseCollection <CatchClauses>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeStatementCollection <FinallyStatements>k__BackingField;
    public CodeStatementCollection TryStatements { get; }
    public CodeCatchClauseCollection CatchClauses { get; }
    public CodeStatementCollection FinallyStatements { get; }
    public CodeTryCatchFinallyStatement(CodeStatement[] tryStatements, CodeCatchClause[] catchClauses);
    public CodeTryCatchFinallyStatement(CodeStatement[] tryStatements, CodeCatchClause[] catchClauses, CodeStatement[] finallyStatements);
    [CompilerGeneratedAttribute]
public CodeStatementCollection get_TryStatements();
    [CompilerGeneratedAttribute]
public CodeCatchClauseCollection get_CatchClauses();
    [CompilerGeneratedAttribute]
public CodeStatementCollection get_FinallyStatements();
}
public class System.CodeDom.CodeTypeConstructor : CodeMemberMethod {
}
public class System.CodeDom.CodeTypeDeclaration : CodeTypeMember {
    private CodeTypeReferenceCollection _baseTypes;
    private CodeTypeMemberCollection _members;
    private bool _isEnum;
    private bool _isStruct;
    private int _populated;
    private static int BaseTypesCollection;
    private static int MembersCollection;
    private CodeTypeParameterCollection _typeParameters;
    [CompilerGeneratedAttribute]
private EventHandler PopulateBaseTypes;
    [CompilerGeneratedAttribute]
private EventHandler PopulateMembers;
    [CompilerGeneratedAttribute]
private TypeAttributes <TypeAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPartial>k__BackingField;
    public TypeAttributes TypeAttributes { get; public set; }
    public CodeTypeReferenceCollection BaseTypes { get; }
    public bool IsClass { get; public set; }
    public bool IsStruct { get; public set; }
    public bool IsEnum { get; public set; }
    public bool IsInterface { get; public set; }
    public bool IsPartial { get; public set; }
    public CodeTypeMemberCollection Members { get; }
    public CodeTypeParameterCollection TypeParameters { get; }
    public CodeTypeDeclaration(string name);
    [CompilerGeneratedAttribute]
public void add_PopulateBaseTypes(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateBaseTypes(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PopulateMembers(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PopulateMembers(EventHandler value);
    [CompilerGeneratedAttribute]
public TypeAttributes get_TypeAttributes();
    [CompilerGeneratedAttribute]
public void set_TypeAttributes(TypeAttributes value);
    public CodeTypeReferenceCollection get_BaseTypes();
    public bool get_IsClass();
    public void set_IsClass(bool value);
    public bool get_IsStruct();
    public void set_IsStruct(bool value);
    public bool get_IsEnum();
    public void set_IsEnum(bool value);
    public bool get_IsInterface();
    public void set_IsInterface(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPartial();
    [CompilerGeneratedAttribute]
public void set_IsPartial(bool value);
    public CodeTypeMemberCollection get_Members();
    public CodeTypeParameterCollection get_TypeParameters();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeTypeDeclarationCollection : CollectionBase {
    public CodeTypeDeclaration Item { get; public set; }
    public CodeTypeDeclarationCollection(CodeTypeDeclarationCollection value);
    public CodeTypeDeclarationCollection(CodeTypeDeclaration[] value);
    public CodeTypeDeclaration get_Item(int index);
    public void set_Item(int index, CodeTypeDeclaration value);
    public int Add(CodeTypeDeclaration value);
    public void AddRange(CodeTypeDeclaration[] value);
    public void AddRange(CodeTypeDeclarationCollection value);
    public bool Contains(CodeTypeDeclaration value);
    public void CopyTo(CodeTypeDeclaration[] array, int index);
    public int IndexOf(CodeTypeDeclaration value);
    public void Insert(int index, CodeTypeDeclaration value);
    public void Remove(CodeTypeDeclaration value);
}
public class System.CodeDom.CodeTypeDelegate : CodeTypeDeclaration {
    private CodeTypeReference _returnType;
    [CompilerGeneratedAttribute]
private CodeParameterDeclarationExpressionCollection <Parameters>k__BackingField;
    public CodeTypeReference ReturnType { get; public set; }
    public CodeParameterDeclarationExpressionCollection Parameters { get; }
    public CodeTypeDelegate(string name);
    public CodeTypeReference get_ReturnType();
    public void set_ReturnType(CodeTypeReference value);
    [CompilerGeneratedAttribute]
public CodeParameterDeclarationExpressionCollection get_Parameters();
}
public class System.CodeDom.CodeTypeMember : CodeObject {
    private string _name;
    private CodeAttributeDeclarationCollection _customAttributes;
    private CodeDirectiveCollection _startDirectives;
    private CodeDirectiveCollection _endDirectives;
    [CompilerGeneratedAttribute]
private MemberAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeLinePragma <LinePragma>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeCommentStatementCollection <Comments>k__BackingField;
    public string Name { get; public set; }
    public MemberAttributes Attributes { get; public set; }
    public CodeAttributeDeclarationCollection CustomAttributes { get; public set; }
    public CodeLinePragma LinePragma { get; public set; }
    public CodeCommentStatementCollection Comments { get; }
    public CodeDirectiveCollection StartDirectives { get; }
    public CodeDirectiveCollection EndDirectives { get; }
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public MemberAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(MemberAttributes value);
    public CodeAttributeDeclarationCollection get_CustomAttributes();
    public void set_CustomAttributes(CodeAttributeDeclarationCollection value);
    [CompilerGeneratedAttribute]
public CodeLinePragma get_LinePragma();
    [CompilerGeneratedAttribute]
public void set_LinePragma(CodeLinePragma value);
    [CompilerGeneratedAttribute]
public CodeCommentStatementCollection get_Comments();
    public CodeDirectiveCollection get_StartDirectives();
    public CodeDirectiveCollection get_EndDirectives();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeTypeMemberCollection : CollectionBase {
    public CodeTypeMember Item { get; public set; }
    public CodeTypeMemberCollection(CodeTypeMemberCollection value);
    public CodeTypeMemberCollection(CodeTypeMember[] value);
    public CodeTypeMember get_Item(int index);
    public void set_Item(int index, CodeTypeMember value);
    public int Add(CodeTypeMember value);
    public void AddRange(CodeTypeMember[] value);
    public void AddRange(CodeTypeMemberCollection value);
    public bool Contains(CodeTypeMember value);
    public void CopyTo(CodeTypeMember[] array, int index);
    public int IndexOf(CodeTypeMember value);
    public void Insert(int index, CodeTypeMember value);
    public void Remove(CodeTypeMember value);
}
public class System.CodeDom.CodeTypeOfExpression : CodeExpression {
    private CodeTypeReference _type;
    public CodeTypeReference Type { get; public set; }
    public CodeTypeOfExpression(CodeTypeReference type);
    public CodeTypeOfExpression(string type);
    public CodeTypeOfExpression(Type type);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeTypeParameter : CodeObject {
    private string _name;
    private CodeAttributeDeclarationCollection _customAttributes;
    private CodeTypeReferenceCollection _constraints;
    [CompilerGeneratedAttribute]
private bool <HasConstructorConstraint>k__BackingField;
    public string Name { get; public set; }
    public CodeTypeReferenceCollection Constraints { get; }
    public CodeAttributeDeclarationCollection CustomAttributes { get; }
    public bool HasConstructorConstraint { get; public set; }
    public CodeTypeParameter(string name);
    public string get_Name();
    public void set_Name(string value);
    public CodeTypeReferenceCollection get_Constraints();
    public CodeAttributeDeclarationCollection get_CustomAttributes();
    [CompilerGeneratedAttribute]
public bool get_HasConstructorConstraint();
    [CompilerGeneratedAttribute]
public void set_HasConstructorConstraint(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeTypeParameterCollection : CollectionBase {
    public CodeTypeParameter Item { get; public set; }
    public CodeTypeParameterCollection(CodeTypeParameterCollection value);
    public CodeTypeParameterCollection(CodeTypeParameter[] value);
    public CodeTypeParameter get_Item(int index);
    public void set_Item(int index, CodeTypeParameter value);
    public int Add(CodeTypeParameter value);
    public void Add(string value);
    public void AddRange(CodeTypeParameter[] value);
    public void AddRange(CodeTypeParameterCollection value);
    public bool Contains(CodeTypeParameter value);
    public void CopyTo(CodeTypeParameter[] array, int index);
    public int IndexOf(CodeTypeParameter value);
    public void Insert(int index, CodeTypeParameter value);
    public void Remove(CodeTypeParameter value);
}
public class System.CodeDom.CodeTypeReference : CodeObject {
    private string _baseType;
    private bool _isInterface;
    private CodeTypeReferenceCollection _typeArguments;
    private bool _needsFixup;
    [CompilerGeneratedAttribute]
private CodeTypeReference <ArrayElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArrayRank>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeTypeReferenceOptions <Options>k__BackingField;
    public CodeTypeReference ArrayElementType { get; public set; }
    public int ArrayRank { get; public set; }
    internal int NestedArrayDepth { get; }
    public string BaseType { get; public set; }
    public CodeTypeReferenceOptions Options { get; public set; }
    public CodeTypeReferenceCollection TypeArguments { get; }
    internal bool IsInterface { get; }
    public CodeTypeReference(Type type);
    public CodeTypeReference(Type type, CodeTypeReferenceOptions codeTypeReferenceOption);
    public CodeTypeReference(string typeName, CodeTypeReferenceOptions codeTypeReferenceOption);
    public CodeTypeReference(string typeName);
    public CodeTypeReference(string typeName, CodeTypeReference[] typeArguments);
    public CodeTypeReference(CodeTypeParameter typeParameter);
    public CodeTypeReference(string baseType, int rank);
    public CodeTypeReference(CodeTypeReference arrayType, int rank);
    private void InitializeFromType(Type type);
    private void Initialize(string typeName);
    private void Initialize(string typeName, CodeTypeReferenceOptions options);
    [CompilerGeneratedAttribute]
public CodeTypeReference get_ArrayElementType();
    [CompilerGeneratedAttribute]
public void set_ArrayElementType(CodeTypeReference value);
    [CompilerGeneratedAttribute]
public int get_ArrayRank();
    [CompilerGeneratedAttribute]
public void set_ArrayRank(int value);
    internal int get_NestedArrayDepth();
    public string get_BaseType();
    public void set_BaseType(string value);
    [CompilerGeneratedAttribute]
public CodeTypeReferenceOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(CodeTypeReferenceOptions value);
    public CodeTypeReferenceCollection get_TypeArguments();
    internal bool get_IsInterface();
    private string RipOffAssemblyInformationFromTypeName(string typeName);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.CodeTypeReferenceCollection : CollectionBase {
    public CodeTypeReference Item { get; public set; }
    public CodeTypeReferenceCollection(CodeTypeReferenceCollection value);
    public CodeTypeReferenceCollection(CodeTypeReference[] value);
    public CodeTypeReference get_Item(int index);
    public void set_Item(int index, CodeTypeReference value);
    public int Add(CodeTypeReference value);
    public void Add(string value);
    public void Add(Type value);
    public void AddRange(CodeTypeReference[] value);
    public void AddRange(CodeTypeReferenceCollection value);
    public bool Contains(CodeTypeReference value);
    public void CopyTo(CodeTypeReference[] array, int index);
    public int IndexOf(CodeTypeReference value);
    public void Insert(int index, CodeTypeReference value);
    public void Remove(CodeTypeReference value);
}
public class System.CodeDom.CodeTypeReferenceExpression : CodeExpression {
    private CodeTypeReference _type;
    public CodeTypeReference Type { get; public set; }
    public CodeTypeReferenceExpression(CodeTypeReference type);
    public CodeTypeReferenceExpression(string type);
    public CodeTypeReferenceExpression(Type type);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
[FlagsAttribute]
public enum System.CodeDom.CodeTypeReferenceOptions : Enum {
    public int value__;
    public static CodeTypeReferenceOptions GlobalReference;
    public static CodeTypeReferenceOptions GenericTypeParameter;
}
public class System.CodeDom.CodeVariableDeclarationStatement : CodeStatement {
    private CodeTypeReference _type;
    private string _name;
    [CompilerGeneratedAttribute]
private CodeExpression <InitExpression>k__BackingField;
    public CodeExpression InitExpression { get; public set; }
    public string Name { get; public set; }
    public CodeTypeReference Type { get; public set; }
    public CodeVariableDeclarationStatement(CodeTypeReference type, string name);
    public CodeVariableDeclarationStatement(string type, string name);
    public CodeVariableDeclarationStatement(Type type, string name);
    public CodeVariableDeclarationStatement(CodeTypeReference type, string name, CodeExpression initExpression);
    public CodeVariableDeclarationStatement(string type, string name, CodeExpression initExpression);
    public CodeVariableDeclarationStatement(Type type, string name, CodeExpression initExpression);
    [CompilerGeneratedAttribute]
public CodeExpression get_InitExpression();
    [CompilerGeneratedAttribute]
public void set_InitExpression(CodeExpression value);
    public string get_Name();
    public void set_Name(string value);
    public CodeTypeReference get_Type();
    public void set_Type(CodeTypeReference value);
}
public class System.CodeDom.CodeVariableReferenceExpression : CodeExpression {
    private string _variableName;
    public string VariableName { get; public set; }
    public CodeVariableReferenceExpression(string variableName);
    public string get_VariableName();
    public void set_VariableName(string value);
}
public abstract class System.CodeDom.Compiler.CodeCompiler : CodeGenerator {
    protected string FileExtension { get; }
    protected string CompilerName { get; }
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(CompilerParameters options, CodeCompileUnit e);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(CompilerParameters options, string fileName);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(CompilerParameters options, string source);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(CompilerParameters options, String[] sources);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(CompilerParameters options, String[] fileNames);
    private sealed virtual override CompilerResults System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(CompilerParameters options, CodeCompileUnit[] ea);
    protected abstract virtual string get_FileExtension();
    protected abstract virtual string get_CompilerName();
    protected virtual CompilerResults FromDom(CompilerParameters options, CodeCompileUnit e);
    protected virtual CompilerResults FromFile(CompilerParameters options, string fileName);
    protected virtual CompilerResults FromSource(CompilerParameters options, string source);
    protected virtual CompilerResults FromDomBatch(CompilerParameters options, CodeCompileUnit[] ea);
    private void ResolveReferencedAssemblies(CompilerParameters options, CodeCompileUnit e);
    protected virtual CompilerResults FromFileBatch(CompilerParameters options, String[] fileNames);
    protected abstract virtual void ProcessCompilerOutputLine(CompilerResults results, string line);
    protected abstract virtual string CmdArgsFromParameters(CompilerParameters options);
    protected virtual string GetResponseFileCmdArgs(CompilerParameters options, string cmdArgs);
    protected virtual CompilerResults FromSourceBatch(CompilerParameters options, String[] sources);
    protected static string JoinStringArray(String[] sa, string separator);
}
public abstract class System.CodeDom.Compiler.CodeDomProvider : Component {
    private static Dictionary`2<string, CompilerInfo> s_compilerLanguages;
    private static Dictionary`2<string, CompilerInfo> s_compilerExtensions;
    private static List`1<CompilerInfo> s_allCompilerInfo;
    public string FileExtension { get; }
    public LanguageOptions LanguageOptions { get; }
    private static CodeDomProvider();
    private static void AddCompilerInfo(CompilerInfo compilerInfo);
    public static CodeDomProvider CreateProvider(string language, IDictionary`2<string, string> providerOptions);
    public static CodeDomProvider CreateProvider(string language);
    public static string GetLanguageFromExtension(string extension);
    public static bool IsDefinedLanguage(string language);
    public static bool IsDefinedExtension(string extension);
    public static CompilerInfo GetCompilerInfo(string language);
    private static CompilerInfo GetCompilerInfoForLanguageNoThrow(string language);
    private static CompilerInfo GetCompilerInfoForExtensionNoThrow(string extension);
    public static CompilerInfo[] GetAllCompilerInfo();
    public virtual string get_FileExtension();
    public virtual LanguageOptions get_LanguageOptions();
    [ObsoleteAttribute("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")]
public abstract virtual ICodeGenerator CreateGenerator();
    public virtual ICodeGenerator CreateGenerator(TextWriter output);
    public virtual ICodeGenerator CreateGenerator(string fileName);
    [ObsoleteAttribute("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")]
public abstract virtual ICodeCompiler CreateCompiler();
    [ObsoleteAttribute("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")]
public virtual ICodeParser CreateParser();
    public virtual TypeConverter GetConverter(Type type);
    public virtual CompilerResults CompileAssemblyFromDom(CompilerParameters options, CodeCompileUnit[] compilationUnits);
    public virtual CompilerResults CompileAssemblyFromFile(CompilerParameters options, String[] fileNames);
    public virtual CompilerResults CompileAssemblyFromSource(CompilerParameters options, String[] sources);
    public virtual bool IsValidIdentifier(string value);
    public virtual string CreateEscapedIdentifier(string value);
    public virtual string CreateValidIdentifier(string value);
    public virtual string GetTypeOutput(CodeTypeReference type);
    public virtual bool Supports(GeneratorSupport generatorSupport);
    public virtual void GenerateCodeFromExpression(CodeExpression expression, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromStatement(CodeStatement statement, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromNamespace(CodeNamespace codeNamespace, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromCompileUnit(CodeCompileUnit compileUnit, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromType(CodeTypeDeclaration codeType, TextWriter writer, CodeGeneratorOptions options);
    public virtual void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
    public virtual CodeCompileUnit Parse(TextReader codeStream);
    private ICodeCompiler CreateCompilerHelper();
    private ICodeGenerator CreateGeneratorHelper();
    private ICodeParser CreateParserHelper();
}
public abstract class System.CodeDom.Compiler.CodeGenerator : object {
    private static int ParameterMultilineThreshold;
    private ExposedTabStringIndentedTextWriter _output;
    private CodeGeneratorOptions _options;
    private CodeTypeDeclaration _currentClass;
    private CodeTypeMember _currentMember;
    private bool _inNestedBinary;
    protected CodeTypeDeclaration CurrentClass { get; }
    protected string CurrentTypeName { get; }
    protected CodeTypeMember CurrentMember { get; }
    protected string CurrentMemberName { get; }
    protected bool IsCurrentInterface { get; }
    protected bool IsCurrentClass { get; }
    protected bool IsCurrentStruct { get; }
    protected bool IsCurrentEnum { get; }
    protected bool IsCurrentDelegate { get; }
    protected int Indent { get; protected set; }
    protected string NullToken { get; }
    protected TextWriter Output { get; }
    protected CodeGeneratorOptions Options { get; }
    protected CodeTypeDeclaration get_CurrentClass();
    protected string get_CurrentTypeName();
    protected CodeTypeMember get_CurrentMember();
    protected string get_CurrentMemberName();
    protected bool get_IsCurrentInterface();
    protected bool get_IsCurrentClass();
    protected bool get_IsCurrentStruct();
    protected bool get_IsCurrentEnum();
    protected bool get_IsCurrentDelegate();
    protected int get_Indent();
    protected void set_Indent(int value);
    protected abstract virtual string get_NullToken();
    protected TextWriter get_Output();
    protected CodeGeneratorOptions get_Options();
    private void GenerateType(CodeTypeDeclaration e);
    protected virtual void GenerateDirectives(CodeDirectiveCollection directives);
    private void GenerateTypeMember(CodeTypeMember member, CodeTypeDeclaration declaredType);
    private void GenerateTypeConstructors(CodeTypeDeclaration e);
    protected void GenerateNamespaces(CodeCompileUnit e);
    protected void GenerateTypes(CodeNamespace e);
    private sealed virtual override bool System.CodeDom.Compiler.ICodeGenerator.Supports(GeneratorSupport support);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(CodeTypeDeclaration e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(CodeExpression e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(CodeCompileUnit e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(CodeNamespace e, TextWriter w, CodeGeneratorOptions o);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(CodeStatement e, TextWriter w, CodeGeneratorOptions o);
    public virtual void GenerateCodeFromMember(CodeTypeMember member, TextWriter writer, CodeGeneratorOptions options);
    private sealed virtual override bool System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(string value);
    private sealed virtual override void System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(string value);
    private sealed virtual override string System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(string value);
    private sealed virtual override string System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(string value);
    private sealed virtual override string System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(CodeTypeReference type);
    private void GenerateConstructors(CodeTypeDeclaration e);
    private void GenerateEvents(CodeTypeDeclaration e);
    protected void GenerateExpression(CodeExpression e);
    private void GenerateFields(CodeTypeDeclaration e);
    private void GenerateSnippetMembers(CodeTypeDeclaration e);
    protected virtual void GenerateSnippetCompileUnit(CodeSnippetCompileUnit e);
    private void GenerateMethods(CodeTypeDeclaration e);
    private void GenerateNestedTypes(CodeTypeDeclaration e);
    protected virtual void GenerateCompileUnit(CodeCompileUnit e);
    protected virtual void GenerateNamespace(CodeNamespace e);
    protected void GenerateNamespaceImports(CodeNamespace e);
    private void GenerateProperties(CodeTypeDeclaration e);
    protected void GenerateStatement(CodeStatement e);
    protected void GenerateStatements(CodeStatementCollection stmts);
    protected virtual void OutputAttributeDeclarations(CodeAttributeDeclarationCollection attributes);
    protected virtual void OutputAttributeArgument(CodeAttributeArgument arg);
    protected virtual void OutputDirection(FieldDirection dir);
    protected virtual void OutputFieldScopeModifier(MemberAttributes attributes);
    protected virtual void OutputMemberAccessModifier(MemberAttributes attributes);
    protected virtual void OutputMemberScopeModifier(MemberAttributes attributes);
    protected abstract virtual void OutputType(CodeTypeReference typeRef);
    protected virtual void OutputTypeAttributes(TypeAttributes attributes, bool isStruct, bool isEnum);
    protected virtual void OutputTypeNamePair(CodeTypeReference typeRef, string name);
    protected virtual void OutputIdentifier(string ident);
    protected virtual void OutputExpressionList(CodeExpressionCollection expressions);
    protected virtual void OutputExpressionList(CodeExpressionCollection expressions, bool newlineBetweenItems);
    protected virtual void OutputOperator(CodeBinaryOperatorType op);
    protected virtual void OutputParameters(CodeParameterDeclarationExpressionCollection parameters);
    protected abstract virtual void GenerateArrayCreateExpression(CodeArrayCreateExpression e);
    protected abstract virtual void GenerateBaseReferenceExpression(CodeBaseReferenceExpression e);
    protected virtual void GenerateBinaryOperatorExpression(CodeBinaryOperatorExpression e);
    protected virtual void ContinueOnNewLine(string st);
    protected abstract virtual void GenerateCastExpression(CodeCastExpression e);
    protected abstract virtual void GenerateDelegateCreateExpression(CodeDelegateCreateExpression e);
    protected abstract virtual void GenerateFieldReferenceExpression(CodeFieldReferenceExpression e);
    protected abstract virtual void GenerateArgumentReferenceExpression(CodeArgumentReferenceExpression e);
    protected abstract virtual void GenerateVariableReferenceExpression(CodeVariableReferenceExpression e);
    protected abstract virtual void GenerateIndexerExpression(CodeIndexerExpression e);
    protected abstract virtual void GenerateArrayIndexerExpression(CodeArrayIndexerExpression e);
    protected abstract virtual void GenerateSnippetExpression(CodeSnippetExpression e);
    protected abstract virtual void GenerateMethodInvokeExpression(CodeMethodInvokeExpression e);
    protected abstract virtual void GenerateMethodReferenceExpression(CodeMethodReferenceExpression e);
    protected abstract virtual void GenerateEventReferenceExpression(CodeEventReferenceExpression e);
    protected abstract virtual void GenerateDelegateInvokeExpression(CodeDelegateInvokeExpression e);
    protected abstract virtual void GenerateObjectCreateExpression(CodeObjectCreateExpression e);
    protected virtual void GenerateParameterDeclarationExpression(CodeParameterDeclarationExpression e);
    protected virtual void GenerateDirectionExpression(CodeDirectionExpression e);
    protected virtual void GeneratePrimitiveExpression(CodePrimitiveExpression e);
    protected virtual void GenerateSingleFloatValue(float s);
    protected virtual void GenerateDoubleValue(double d);
    protected virtual void GenerateDecimalValue(decimal d);
    protected virtual void GenerateDefaultValueExpression(CodeDefaultValueExpression e);
    protected abstract virtual void GeneratePropertyReferenceExpression(CodePropertyReferenceExpression e);
    protected abstract virtual void GeneratePropertySetValueReferenceExpression(CodePropertySetValueReferenceExpression e);
    protected abstract virtual void GenerateThisReferenceExpression(CodeThisReferenceExpression e);
    protected virtual void GenerateTypeReferenceExpression(CodeTypeReferenceExpression e);
    protected virtual void GenerateTypeOfExpression(CodeTypeOfExpression e);
    protected abstract virtual void GenerateExpressionStatement(CodeExpressionStatement e);
    protected abstract virtual void GenerateIterationStatement(CodeIterationStatement e);
    protected abstract virtual void GenerateThrowExceptionStatement(CodeThrowExceptionStatement e);
    protected virtual void GenerateCommentStatement(CodeCommentStatement e);
    protected virtual void GenerateCommentStatements(CodeCommentStatementCollection e);
    protected abstract virtual void GenerateComment(CodeComment e);
    protected abstract virtual void GenerateMethodReturnStatement(CodeMethodReturnStatement e);
    protected abstract virtual void GenerateConditionStatement(CodeConditionStatement e);
    protected abstract virtual void GenerateTryCatchFinallyStatement(CodeTryCatchFinallyStatement e);
    protected abstract virtual void GenerateAssignStatement(CodeAssignStatement e);
    protected abstract virtual void GenerateAttachEventStatement(CodeAttachEventStatement e);
    protected abstract virtual void GenerateRemoveEventStatement(CodeRemoveEventStatement e);
    protected abstract virtual void GenerateGotoStatement(CodeGotoStatement e);
    protected abstract virtual void GenerateLabeledStatement(CodeLabeledStatement e);
    protected virtual void GenerateSnippetStatement(CodeSnippetStatement e);
    protected abstract virtual void GenerateVariableDeclarationStatement(CodeVariableDeclarationStatement e);
    protected abstract virtual void GenerateLinePragmaStart(CodeLinePragma e);
    protected abstract virtual void GenerateLinePragmaEnd(CodeLinePragma e);
    protected abstract virtual void GenerateEvent(CodeMemberEvent e, CodeTypeDeclaration c);
    protected abstract virtual void GenerateField(CodeMemberField e);
    protected abstract virtual void GenerateSnippetMember(CodeSnippetTypeMember e);
    protected abstract virtual void GenerateEntryPointMethod(CodeEntryPointMethod e, CodeTypeDeclaration c);
    protected abstract virtual void GenerateMethod(CodeMemberMethod e, CodeTypeDeclaration c);
    protected abstract virtual void GenerateProperty(CodeMemberProperty e, CodeTypeDeclaration c);
    protected abstract virtual void GenerateConstructor(CodeConstructor e, CodeTypeDeclaration c);
    protected abstract virtual void GenerateTypeConstructor(CodeTypeConstructor e);
    protected abstract virtual void GenerateTypeStart(CodeTypeDeclaration e);
    protected abstract virtual void GenerateTypeEnd(CodeTypeDeclaration e);
    protected virtual void GenerateCompileUnitStart(CodeCompileUnit e);
    protected virtual void GenerateCompileUnitEnd(CodeCompileUnit e);
    protected abstract virtual void GenerateNamespaceStart(CodeNamespace e);
    protected abstract virtual void GenerateNamespaceEnd(CodeNamespace e);
    protected abstract virtual void GenerateNamespaceImport(CodeNamespaceImport e);
    protected abstract virtual void GenerateAttributeDeclarationsStart(CodeAttributeDeclarationCollection attributes);
    protected abstract virtual void GenerateAttributeDeclarationsEnd(CodeAttributeDeclarationCollection attributes);
    protected abstract virtual bool Supports(GeneratorSupport support);
    protected abstract virtual bool IsValidIdentifier(string value);
    protected virtual void ValidateIdentifier(string value);
    protected abstract virtual string CreateEscapedIdentifier(string value);
    protected abstract virtual string CreateValidIdentifier(string value);
    protected abstract virtual string GetTypeOutput(CodeTypeReference value);
    protected abstract virtual string QuoteSnippetString(string value);
    public static bool IsValidLanguageIndependentIdentifier(string value);
    internal static bool IsValidLanguageIndependentTypeName(string value);
    public static void ValidateIdentifiers(CodeObject e);
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.Compiler.CodeGeneratorOptions : object {
    private IDictionary _options;
    public object Item { get; public set; }
    public string IndentString { get; public set; }
    public string BracingStyle { get; public set; }
    public bool ElseOnClosing { get; public set; }
    public bool BlankLinesBetweenMembers { get; public set; }
    public bool VerbatimOrder { get; public set; }
    public object get_Item(string index);
    public void set_Item(string index, object value);
    public string get_IndentString();
    public void set_IndentString(string value);
    public string get_BracingStyle();
    public void set_BracingStyle(string value);
    public bool get_ElseOnClosing();
    public void set_ElseOnClosing(bool value);
    public bool get_BlankLinesBetweenMembers();
    public void set_BlankLinesBetweenMembers(bool value);
    public bool get_VerbatimOrder();
    public void set_VerbatimOrder(bool value);
}
public abstract class System.CodeDom.Compiler.CodeParser : object {
    public abstract virtual CodeCompileUnit Parse(TextReader codeStream);
}
internal class System.CodeDom.Compiler.CodeValidator : object {
    private static Char[] s_newLineChars;
    private CodeTypeDeclaration _currentClass;
    private bool IsCurrentInterface { get; }
    private bool IsCurrentEnum { get; }
    private bool IsCurrentDelegate { get; }
    private static CodeValidator();
    internal void ValidateIdentifiers(CodeObject e);
    private void ValidateTypeMember(CodeTypeMember e);
    private void ValidateCodeCompileUnit(CodeCompileUnit e);
    private void ValidateSnippetCompileUnit(CodeSnippetCompileUnit e);
    private void ValidateCompileUnitStart(CodeCompileUnit e);
    private void ValidateCompileUnitEnd(CodeCompileUnit e);
    private void ValidateNamespaces(CodeCompileUnit e);
    private void ValidateNamespace(CodeNamespace e);
    private static void ValidateNamespaceStart(CodeNamespace e);
    private void ValidateNamespaceImports(CodeNamespace e);
    private static void ValidateNamespaceImport(CodeNamespaceImport e);
    private void ValidateAttributes(CodeAttributeDeclarationCollection attributes);
    private void ValidateAttributeArgument(CodeAttributeArgument arg);
    private void ValidateTypes(CodeNamespace e);
    private void ValidateTypeDeclaration(CodeTypeDeclaration e);
    private void ValidateTypeMembers(CodeTypeDeclaration e);
    private void ValidateTypeParameters(CodeTypeParameterCollection parameters);
    private void ValidateTypeParameter(CodeTypeParameter e);
    private void ValidateField(CodeMemberField e);
    private void ValidateConstructor(CodeConstructor e);
    private void ValidateProperty(CodeMemberProperty e);
    private void ValidateMemberMethod(CodeMemberMethod e);
    private void ValidateTypeConstructor(CodeTypeConstructor e);
    private void ValidateMethod(CodeMemberMethod e);
    private void ValidateSnippetMember(CodeSnippetTypeMember e);
    private void ValidateTypeStart(CodeTypeDeclaration e);
    private void ValidateCommentStatements(CodeCommentStatementCollection e);
    private void ValidateCommentStatement(CodeCommentStatement e);
    private void ValidateComment(CodeComment e);
    private void ValidateStatement(CodeStatement e);
    private void ValidateStatements(CodeStatementCollection stmts);
    private void ValidateExpressionStatement(CodeExpressionStatement e);
    private void ValidateIterationStatement(CodeIterationStatement e);
    private void ValidateThrowExceptionStatement(CodeThrowExceptionStatement e);
    private void ValidateMethodReturnStatement(CodeMethodReturnStatement e);
    private void ValidateConditionStatement(CodeConditionStatement e);
    private void ValidateTryCatchFinallyStatement(CodeTryCatchFinallyStatement e);
    private void ValidateAssignStatement(CodeAssignStatement e);
    private void ValidateAttachEventStatement(CodeAttachEventStatement e);
    private void ValidateRemoveEventStatement(CodeRemoveEventStatement e);
    private static void ValidateGotoStatement(CodeGotoStatement e);
    private void ValidateLabeledStatement(CodeLabeledStatement e);
    private void ValidateVariableDeclarationStatement(CodeVariableDeclarationStatement e);
    private void ValidateLinePragmaStart(CodeLinePragma e);
    private void ValidateEvent(CodeMemberEvent e);
    private void ValidateParameters(CodeParameterDeclarationExpressionCollection parameters);
    private void ValidateSnippetStatement(CodeSnippetStatement e);
    private void ValidateExpressionList(CodeExpressionCollection expressions);
    private static void ValidateTypeReference(CodeTypeReference e);
    private static void ValidateTypeReferences(CodeTypeReferenceCollection refs);
    private static void ValidateArity(CodeTypeReference e);
    private static void ValidateTypeName(object e, string propertyName, string typeName);
    private static void ValidateIdentifier(object e, string propertyName, string identifier);
    private void ValidateExpression(CodeExpression e);
    private void ValidateArrayCreateExpression(CodeArrayCreateExpression e);
    private void ValidateBaseReferenceExpression(CodeBaseReferenceExpression e);
    private void ValidateBinaryOperatorExpression(CodeBinaryOperatorExpression e);
    private void ValidateCastExpression(CodeCastExpression e);
    private static void ValidateDefaultValueExpression(CodeDefaultValueExpression e);
    private void ValidateDelegateCreateExpression(CodeDelegateCreateExpression e);
    private void ValidateFieldReferenceExpression(CodeFieldReferenceExpression e);
    private static void ValidateArgumentReferenceExpression(CodeArgumentReferenceExpression e);
    private static void ValidateVariableReferenceExpression(CodeVariableReferenceExpression e);
    private void ValidateIndexerExpression(CodeIndexerExpression e);
    private void ValidateArrayIndexerExpression(CodeArrayIndexerExpression e);
    private void ValidateSnippetExpression(CodeSnippetExpression e);
    private void ValidateMethodInvokeExpression(CodeMethodInvokeExpression e);
    private void ValidateMethodReferenceExpression(CodeMethodReferenceExpression e);
    private void ValidateEventReferenceExpression(CodeEventReferenceExpression e);
    private void ValidateDelegateInvokeExpression(CodeDelegateInvokeExpression e);
    private void ValidateObjectCreateExpression(CodeObjectCreateExpression e);
    private void ValidateParameterDeclarationExpression(CodeParameterDeclarationExpression e);
    private void ValidateDirectionExpression(CodeDirectionExpression e);
    private void ValidatePrimitiveExpression(CodePrimitiveExpression e);
    private void ValidatePropertyReferenceExpression(CodePropertyReferenceExpression e);
    private void ValidatePropertySetValueReferenceExpression(CodePropertySetValueReferenceExpression e);
    private void ValidateThisReferenceExpression(CodeThisReferenceExpression e);
    private static void ValidateTypeOfExpression(CodeTypeOfExpression e);
    private static void ValidateCodeDirectives(CodeDirectiveCollection e);
    private static void ValidateCodeDirective(CodeDirective e);
    private static void ValidateChecksumPragma(CodeChecksumPragma e);
    private static void ValidateRegionDirective(CodeRegionDirective e);
    private bool get_IsCurrentInterface();
    private bool get_IsCurrentEnum();
    private bool get_IsCurrentDelegate();
}
public class System.CodeDom.Compiler.CompilerError : object {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public int Line { get; public set; }
    public int Column { get; public set; }
    public string ErrorNumber { get; public set; }
    public string ErrorText { get; public set; }
    public bool IsWarning { get; public set; }
    public string FileName { get; public set; }
    private string WarningString { get; }
    public CompilerError(string fileName, int line, int column, string errorNumber, string errorText);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public string get_ErrorNumber();
    [CompilerGeneratedAttribute]
public void set_ErrorNumber(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
public void set_IsWarning(bool value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public virtual string ToString();
    private string get_WarningString();
}
[DefaultMemberAttribute("Item")]
public class System.CodeDom.Compiler.CompilerErrorCollection : CollectionBase {
    public CompilerError Item { get; public set; }
    public bool HasErrors { get; }
    public bool HasWarnings { get; }
    public CompilerErrorCollection(CompilerErrorCollection value);
    public CompilerErrorCollection(CompilerError[] value);
    public CompilerError get_Item(int index);
    public void set_Item(int index, CompilerError value);
    public int Add(CompilerError value);
    public void AddRange(CompilerError[] value);
    public void AddRange(CompilerErrorCollection value);
    public bool Contains(CompilerError value);
    public void CopyTo(CompilerError[] array, int index);
    public bool get_HasErrors();
    public bool get_HasWarnings();
    public int IndexOf(CompilerError value);
    public void Insert(int index, CompilerError value);
    public void Remove(CompilerError value);
}
public class System.CodeDom.Compiler.CompilerInfo : object {
    internal IDictionary`2<string, string> _providerOptions;
    internal string _codeDomProviderTypeName;
    internal CompilerParameters _compilerParams;
    internal String[] _compilerLanguages;
    internal String[] _compilerExtensions;
    private Type _type;
    public Type CodeDomProviderType { get; }
    public bool IsCodeDomProviderTypeValid { get; }
    internal CompilerParameters CompilerParams { get; }
    internal IDictionary`2<string, string> ProviderOptions { get; }
    internal CompilerInfo(CompilerParameters compilerParams, string codeDomProviderTypeName, String[] compilerLanguages, String[] compilerExtensions);
    internal CompilerInfo(CompilerParameters compilerParams, string codeDomProviderTypeName);
    public String[] GetLanguages();
    public String[] GetExtensions();
    public Type get_CodeDomProviderType();
    public bool get_IsCodeDomProviderTypeValid();
    public CodeDomProvider CreateProvider();
    public CodeDomProvider CreateProvider(IDictionary`2<string, string> providerOptions);
    public CompilerParameters CreateDefaultCompilerParameters();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    private CompilerParameters CloneCompilerParameters();
    private String[] CloneCompilerLanguages();
    private String[] CloneCompilerExtensions();
    internal CompilerParameters get_CompilerParams();
    internal IDictionary`2<string, string> get_ProviderOptions();
}
public class System.CodeDom.Compiler.CompilerParameters : object {
    private StringCollection _assemblyNames;
    private StringCollection _embeddedResources;
    private StringCollection _linkedResources;
    private TempFileCollection _tempFiles;
    [CompilerGeneratedAttribute]
private string <CoreAssemblyFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateExecutable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateInMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MainClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDebugInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatWarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WarningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompilerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Win32Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <UserToken>k__BackingField;
    public string CoreAssemblyFileName { get; public set; }
    public bool GenerateExecutable { get; public set; }
    public bool GenerateInMemory { get; public set; }
    public StringCollection ReferencedAssemblies { get; }
    public string MainClass { get; public set; }
    public string OutputAssembly { get; public set; }
    public TempFileCollection TempFiles { get; public set; }
    public bool IncludeDebugInformation { get; public set; }
    public bool TreatWarningsAsErrors { get; public set; }
    public int WarningLevel { get; public set; }
    public string CompilerOptions { get; public set; }
    public string Win32Resource { get; public set; }
    public StringCollection EmbeddedResources { get; }
    public StringCollection LinkedResources { get; }
    public IntPtr UserToken { get; public set; }
    public CompilerParameters(String[] assemblyNames);
    public CompilerParameters(String[] assemblyNames, string outputName);
    public CompilerParameters(String[] assemblyNames, string outputName, bool includeDebugInformation);
    [CompilerGeneratedAttribute]
public string get_CoreAssemblyFileName();
    [CompilerGeneratedAttribute]
public void set_CoreAssemblyFileName(string value);
    [CompilerGeneratedAttribute]
public bool get_GenerateExecutable();
    [CompilerGeneratedAttribute]
public void set_GenerateExecutable(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateInMemory();
    [CompilerGeneratedAttribute]
public void set_GenerateInMemory(bool value);
    public StringCollection get_ReferencedAssemblies();
    [CompilerGeneratedAttribute]
public string get_MainClass();
    [CompilerGeneratedAttribute]
public void set_MainClass(string value);
    [CompilerGeneratedAttribute]
public string get_OutputAssembly();
    [CompilerGeneratedAttribute]
public void set_OutputAssembly(string value);
    public TempFileCollection get_TempFiles();
    public void set_TempFiles(TempFileCollection value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDebugInformation();
    [CompilerGeneratedAttribute]
public void set_IncludeDebugInformation(bool value);
    [CompilerGeneratedAttribute]
public bool get_TreatWarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_TreatWarningsAsErrors(bool value);
    [CompilerGeneratedAttribute]
public int get_WarningLevel();
    [CompilerGeneratedAttribute]
public void set_WarningLevel(int value);
    [CompilerGeneratedAttribute]
public string get_CompilerOptions();
    [CompilerGeneratedAttribute]
public void set_CompilerOptions(string value);
    [CompilerGeneratedAttribute]
public string get_Win32Resource();
    [CompilerGeneratedAttribute]
public void set_Win32Resource(string value);
    public StringCollection get_EmbeddedResources();
    public StringCollection get_LinkedResources();
    [CompilerGeneratedAttribute]
public IntPtr get_UserToken();
    [CompilerGeneratedAttribute]
public void set_UserToken(IntPtr value);
}
public class System.CodeDom.Compiler.CompilerResults : object {
    private CompilerErrorCollection _errors;
    private StringCollection _output;
    private Assembly _compiledAssembly;
    private TempFileCollection _tempFiles;
    [CompilerGeneratedAttribute]
private string <PathToAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NativeCompilerReturnValue>k__BackingField;
    public TempFileCollection TempFiles { get; public set; }
    public Assembly CompiledAssembly { get; public set; }
    public CompilerErrorCollection Errors { get; }
    public StringCollection Output { get; }
    public string PathToAssembly { get; public set; }
    public int NativeCompilerReturnValue { get; public set; }
    public CompilerResults(TempFileCollection tempFiles);
    public TempFileCollection get_TempFiles();
    public void set_TempFiles(TempFileCollection value);
    public Assembly get_CompiledAssembly();
    public void set_CompiledAssembly(Assembly value);
    public CompilerErrorCollection get_Errors();
    public StringCollection get_Output();
    [CompilerGeneratedAttribute]
public string get_PathToAssembly();
    [CompilerGeneratedAttribute]
public void set_PathToAssembly(string value);
    [CompilerGeneratedAttribute]
public int get_NativeCompilerReturnValue();
    [CompilerGeneratedAttribute]
public void set_NativeCompilerReturnValue(int value);
}
public static class System.CodeDom.Compiler.Executor : object {
    private static int ProcessTimeOut;
    private static FileStream CreateInheritedFile(string file);
    public static void ExecWait(string cmd, TempFileCollection tempFiles);
    public static int ExecWaitWithCapture(IntPtr userToken, string cmd, TempFileCollection tempFiles, String& outputName, String& errorName);
    public static int ExecWaitWithCapture(string cmd, string currentDir, TempFileCollection tempFiles, String& outputName, String& errorName);
    public static int ExecWaitWithCapture(string cmd, TempFileCollection tempFiles, String& outputName, String& errorName);
    public static int ExecWaitWithCapture(IntPtr userToken, string cmd, string currentDir, TempFileCollection tempFiles, String& outputName, String& errorName);
}
internal class System.CodeDom.Compiler.ExposedTabStringIndentedTextWriter : IndentedTextWriter {
    [CompilerGeneratedAttribute]
private string <TabString>k__BackingField;
    internal string TabString { get; }
    public ExposedTabStringIndentedTextWriter(TextWriter writer, string tabString);
    internal void InternalOutputTabs();
    [CompilerGeneratedAttribute]
internal string get_TabString();
}
[FlagsAttribute]
public enum System.CodeDom.Compiler.GeneratorSupport : Enum {
    public int value__;
    public static GeneratorSupport ArraysOfArrays;
    public static GeneratorSupport EntryPointMethod;
    public static GeneratorSupport GotoStatements;
    public static GeneratorSupport MultidimensionalArrays;
    public static GeneratorSupport StaticConstructors;
    public static GeneratorSupport TryCatchStatements;
    public static GeneratorSupport ReturnTypeAttributes;
    public static GeneratorSupport DeclareValueTypes;
    public static GeneratorSupport DeclareEnums;
    public static GeneratorSupport DeclareDelegates;
    public static GeneratorSupport DeclareInterfaces;
    public static GeneratorSupport DeclareEvents;
    public static GeneratorSupport AssemblyAttributes;
    public static GeneratorSupport ParameterAttributes;
    public static GeneratorSupport ReferenceParameters;
    public static GeneratorSupport ChainedConstructorArguments;
    public static GeneratorSupport NestedTypes;
    public static GeneratorSupport MultipleInterfaceMembers;
    public static GeneratorSupport PublicStaticMembers;
    public static GeneratorSupport ComplexExpressions;
    public static GeneratorSupport Win32Resources;
    public static GeneratorSupport Resources;
    public static GeneratorSupport PartialTypes;
    public static GeneratorSupport GenericTypeReference;
    public static GeneratorSupport GenericTypeDeclaration;
    public static GeneratorSupport DeclareIndexerProperties;
}
public interface System.CodeDom.Compiler.ICodeCompiler {
    public abstract virtual CompilerResults CompileAssemblyFromDom(CompilerParameters options, CodeCompileUnit compilationUnit);
    public abstract virtual CompilerResults CompileAssemblyFromFile(CompilerParameters options, string fileName);
    public abstract virtual CompilerResults CompileAssemblyFromSource(CompilerParameters options, string source);
    public abstract virtual CompilerResults CompileAssemblyFromDomBatch(CompilerParameters options, CodeCompileUnit[] compilationUnits);
    public abstract virtual CompilerResults CompileAssemblyFromFileBatch(CompilerParameters options, String[] fileNames);
    public abstract virtual CompilerResults CompileAssemblyFromSourceBatch(CompilerParameters options, String[] sources);
}
public interface System.CodeDom.Compiler.ICodeGenerator {
    public abstract virtual bool IsValidIdentifier(string value);
    public abstract virtual void ValidateIdentifier(string value);
    public abstract virtual string CreateEscapedIdentifier(string value);
    public abstract virtual string CreateValidIdentifier(string value);
    public abstract virtual string GetTypeOutput(CodeTypeReference type);
    public abstract virtual bool Supports(GeneratorSupport supports);
    public abstract virtual void GenerateCodeFromExpression(CodeExpression e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual void GenerateCodeFromStatement(CodeStatement e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual void GenerateCodeFromNamespace(CodeNamespace e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual void GenerateCodeFromCompileUnit(CodeCompileUnit e, TextWriter w, CodeGeneratorOptions o);
    public abstract virtual void GenerateCodeFromType(CodeTypeDeclaration e, TextWriter w, CodeGeneratorOptions o);
}
public interface System.CodeDom.Compiler.ICodeParser {
    public abstract virtual CodeCompileUnit Parse(TextReader codeStream);
}
internal class System.CodeDom.Compiler.Indentation : object {
    private ExposedTabStringIndentedTextWriter _writer;
    private int _indent;
    private string _s;
    internal string IndentationString { get; }
    internal Indentation(ExposedTabStringIndentedTextWriter writer, int indent);
    internal string get_IndentationString();
}
[FlagsAttribute]
public enum System.CodeDom.Compiler.LanguageOptions : Enum {
    public int value__;
    public static LanguageOptions None;
    public static LanguageOptions CaseInsensitive;
}
public class System.CodeDom.Compiler.TempFileCollection : object {
    private string _basePath;
    private string _tempDir;
    private Hashtable _files;
    [CompilerGeneratedAttribute]
private bool <KeepFiles>k__BackingField;
    public int Count { get; }
    private int System.Collections.ICollection.Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public string TempDir { get; }
    public string BasePath { get; }
    public bool KeepFiles { get; public set; }
    public TempFileCollection(string tempDir);
    public TempFileCollection(string tempDir, bool keepFiles);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public string AddExtension(string fileExtension);
    public string AddExtension(string fileExtension, bool keepFile);
    public void AddFile(string fileName, bool keepFile);
    public IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int start);
    public void CopyTo(String[] fileNames, int start);
    public int get_Count();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public string get_TempDir();
    public string get_BasePath();
    private void EnsureTempNameCreated();
    [CompilerGeneratedAttribute]
public bool get_KeepFiles();
    [CompilerGeneratedAttribute]
public void set_KeepFiles(bool value);
    private bool KeepFile(string fileName);
    public void Delete();
    internal void Delete(string fileName);
    internal void SafeDelete();
}
public enum System.CodeDom.FieldDirection : Enum {
    public int value__;
    public static FieldDirection In;
    public static FieldDirection Out;
    public static FieldDirection Ref;
}
public enum System.CodeDom.MemberAttributes : Enum {
    public int value__;
    public static MemberAttributes Abstract;
    public static MemberAttributes Final;
    public static MemberAttributes Static;
    public static MemberAttributes Override;
    public static MemberAttributes Const;
    public static MemberAttributes New;
    public static MemberAttributes Overloaded;
    public static MemberAttributes Assembly;
    public static MemberAttributes FamilyAndAssembly;
    public static MemberAttributes Family;
    public static MemberAttributes FamilyOrAssembly;
    public static MemberAttributes Private;
    public static MemberAttributes Public;
    public static MemberAttributes AccessMask;
    public static MemberAttributes ScopeMask;
    public static MemberAttributes VTableMask;
}
internal static class System.Collections.Specialized.FixedStringLookup : object {
    internal static bool Contains(String[][] lookupTable, string value, bool ignoreCase);
    private static bool Contains(String[] array, string value, bool ignoreCase);
    private static bool FindCharacter(String[] array, char value, int pos, Int32& min, Int32& max);
}
internal abstract class System.CSharpHelpers : object {
    private static Dictionary`2<string, object> s_fixedStringLookup;
    private static String[][] s_keywords;
    private static CSharpHelpers();
    public static string CreateEscapedIdentifier(string name);
    public static bool IsValidLanguageIndependentIdentifier(string value);
    internal static bool IsKeyword(string value);
    internal static bool IsPrefixTwoUnderscore(string value);
    internal static bool IsValidTypeNameOrIdentifier(string value, bool isTypeName);
    internal static bool IsSpecialTypeChar(char ch, Boolean& nextMustBeStartChar);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static Type <ResourceType>k__BackingField;
    private static ResourceManager ResourceManager { get; }
    internal static Type ResourceType { get; }
    internal static string CodeDomProvider_NotDefined { get; }
    internal static string NotSupported_CodeDomAPI { get; }
    internal static string CodeGenOutputWriter { get; }
    internal static string CodeGenReentrance { get; }
    internal static string InvalidElementType { get; }
    internal static string Argument_NullComment { get; }
    internal static string InvalidPrimitiveType { get; }
    internal static string InvalidIdentifier { get; }
    internal static string ArityDoesntMatch { get; }
    internal static string InvalidNullEmptyArgument { get; }
    internal static string DuplicateFileName { get; }
    internal static string InvalidTypeName { get; }
    internal static string InvalidRegion { get; }
    internal static string InvalidPathCharsInChecksum { get; }
    internal static string ExecTimeout { get; }
    internal static string Provider_does_not_support_options { get; }
    internal static string InvalidLanguageIdentifier { get; }
    internal static string toStringUnknown { get; }
    internal static string AutoGen_Comment_Line1 { get; }
    internal static string AutoGen_Comment_Line2 { get; }
    internal static string AutoGen_Comment_Line3 { get; }
    internal static string AutoGen_Comment_Line4 { get; }
    internal static string AutoGen_Comment_Line5 { get; }
    private static SR();
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [CompilerGeneratedAttribute]
internal static Type get_ResourceType();
    internal static string get_CodeDomProvider_NotDefined();
    internal static string get_NotSupported_CodeDomAPI();
    internal static string get_CodeGenOutputWriter();
    internal static string get_CodeGenReentrance();
    internal static string get_InvalidElementType();
    internal static string get_Argument_NullComment();
    internal static string get_InvalidPrimitiveType();
    internal static string get_InvalidIdentifier();
    internal static string get_ArityDoesntMatch();
    internal static string get_InvalidNullEmptyArgument();
    internal static string get_DuplicateFileName();
    internal static string get_InvalidTypeName();
    internal static string get_InvalidRegion();
    internal static string get_InvalidPathCharsInChecksum();
    internal static string get_ExecTimeout();
    internal static string get_Provider_does_not_support_options();
    internal static string get_InvalidLanguageIdentifier();
    internal static string get_toStringUnknown();
    internal static string get_AutoGen_Comment_Line1();
    internal static string get_AutoGen_Comment_Line2();
    internal static string get_AutoGen_Comment_Line3();
    internal static string get_AutoGen_Comment_Line4();
    internal static string get_AutoGen_Comment_Line5();
}
