internal static class FxResources.System.Collections.Concurrent.SR : object {
}
internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
internal static class System.ArrayT`1 : object {
    public static void Copy(T[] sourceArray, int sourceIndex, T[] destinationArray, int destinationIndex, int length);
    public static T[] Resize(T[] src, int newLength, int copyCount);
    public static void Clear(T[] array, int index, int length);
}
[DebuggerTypeProxyAttribute("System.Collections.Concurrent.BlockingCollectionDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}, Type = {_collection}")]
public class System.Collections.Concurrent.BlockingCollection`1 : object {
    private IProducerConsumerCollection`1<T> _collection;
    private int _boundedCapacity;
    private static int NON_BOUNDED;
    private SemaphoreSlim _freeNodes;
    private SemaphoreSlim _occupiedNodes;
    private bool _isDisposed;
    private CancellationTokenSource _consumersCancellationTokenSource;
    private CancellationTokenSource _producersCancellationTokenSource;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _currentAdders;
    private static int COMPLETE_ADDING_ON_MASK;
    public int BoundedCapacity { get; }
    public bool IsAddingCompleted { get; }
    public bool IsCompleted { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private static bool IsSTAThread { get; }
    public BlockingCollection`1(int boundedCapacity);
    public BlockingCollection`1(IProducerConsumerCollection`1<T> collection, int boundedCapacity);
    public BlockingCollection`1(IProducerConsumerCollection`1<T> collection);
    public int get_BoundedCapacity();
    public bool get_IsAddingCompleted();
    public bool get_IsCompleted();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private void Initialize(IProducerConsumerCollection`1<T> collection, int boundedCapacity, int collectionCount);
    public void Add(T item);
    public void Add(T item, CancellationToken cancellationToken);
    public bool TryAdd(T item);
    public bool TryAdd(T item, TimeSpan timeout);
    public bool TryAdd(T item, int millisecondsTimeout);
    public bool TryAdd(T item, int millisecondsTimeout, CancellationToken cancellationToken);
    private bool TryAddWithNoTimeValidation(T item, int millisecondsTimeout, CancellationToken cancellationToken);
    public T Take();
    public T Take(CancellationToken cancellationToken);
    public bool TryTake(T& item);
    public bool TryTake(T& item, TimeSpan timeout);
    public bool TryTake(T& item, int millisecondsTimeout);
    public bool TryTake(T& item, int millisecondsTimeout, CancellationToken cancellationToken);
    private bool TryTakeWithNoTimeValidation(T& item, int millisecondsTimeout, CancellationToken cancellationToken, CancellationTokenSource combinedTokenSource);
    public static int AddToAny(BlockingCollection`1[] collections, T item);
    public static int AddToAny(BlockingCollection`1[] collections, T item, CancellationToken cancellationToken);
    public static int TryAddToAny(BlockingCollection`1[] collections, T item);
    public static int TryAddToAny(BlockingCollection`1[] collections, T item, TimeSpan timeout);
    public static int TryAddToAny(BlockingCollection`1[] collections, T item, int millisecondsTimeout);
    public static int TryAddToAny(BlockingCollection`1[] collections, T item, int millisecondsTimeout, CancellationToken cancellationToken);
    private static int TryAddToAnyCore(BlockingCollection`1[] collections, T item, int millisecondsTimeout, CancellationToken externalCancellationToken);
    private static int TryAddToAnyFast(BlockingCollection`1[] collections, T item);
    private static List`1<WaitHandle> GetHandles(BlockingCollection`1[] collections, CancellationToken externalCancellationToken, bool isAddOperation, CancellationToken[]& cancellationTokens);
    private static int UpdateTimeOut(UInt32 startTime, int originalWaitMillisecondsTimeout);
    public static int TakeFromAny(BlockingCollection`1[] collections, T& item);
    public static int TakeFromAny(BlockingCollection`1[] collections, T& item, CancellationToken cancellationToken);
    public static int TryTakeFromAny(BlockingCollection`1[] collections, T& item);
    public static int TryTakeFromAny(BlockingCollection`1[] collections, T& item, TimeSpan timeout);
    public static int TryTakeFromAny(BlockingCollection`1[] collections, T& item, int millisecondsTimeout);
    public static int TryTakeFromAny(BlockingCollection`1[] collections, T& item, int millisecondsTimeout, CancellationToken cancellationToken);
    private static int TryTakeFromAnyCore(BlockingCollection`1[] collections, T& item, int millisecondsTimeout, bool isTakeOperation, CancellationToken externalCancellationToken);
    private static int TryTakeFromAnyCoreSlow(BlockingCollection`1[] collections, T& item, int millisecondsTimeout, bool isTakeOperation, CancellationToken externalCancellationToken);
    public void CompleteAdding();
    private void CancelWaitingConsumers();
    private void CancelWaitingProducers();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public T[] ToArray();
    public void CopyTo(T[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public IEnumerable`1<T> GetConsumingEnumerable();
    [IteratorStateMachineAttribute("System.Collections.Concurrent.BlockingCollection`1/<GetConsumingEnumerable>d__2")]
public IEnumerable`1<T> GetConsumingEnumerable(CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static void ValidateCollectionsArray(BlockingCollection`1[] collections, bool isAddOperation);
    private static bool get_IsSTAThread();
    private static void ValidateTimeout(TimeSpan timeout);
    private static void ValidateMillisecondsTimeout(int millisecondsTimeout);
    private void CheckDisposed();
}
internal class System.Collections.Concurrent.BlockingCollectionDebugView`1 : object {
    private BlockingCollection`1<T> _blockingCollection;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public BlockingCollectionDebugView`1(BlockingCollection`1<T> collection);
    public T[] get_Items();
}
[EventSourceAttribute]
internal class System.Collections.Concurrent.CDSCollectionETWBCLProvider : EventSource {
    public static CDSCollectionETWBCLProvider Log;
    private static EventKeywords ALL_KEYWORDS;
    private static int CONCURRENTSTACK_FASTPUSHFAILED_ID;
    private static int CONCURRENTSTACK_FASTPOPFAILED_ID;
    private static int CONCURRENTDICTIONARY_ACQUIRINGALLLOCKS_ID;
    private static int CONCURRENTBAG_TRYTAKESTEALS_ID;
    private static int CONCURRENTBAG_TRYPEEKSTEALS_ID;
    private static CDSCollectionETWBCLProvider();
    [EventAttribute("1")]
public void ConcurrentStack_FastPushFailed(int spinCount);
    [EventAttribute("2")]
public void ConcurrentStack_FastPopFailed(int spinCount);
    [EventAttribute("3")]
public void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets);
    [EventAttribute("4")]
public void ConcurrentBag_TryTakeSteals();
    [EventAttribute("5")]
public void ConcurrentBag_TryPeekSteals();
}
[DebuggerTypeProxyAttribute("System.Collections.Concurrent.IProducerConsumerCollectionDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.Concurrent.ConcurrentBag`1 : object {
    private ThreadLocal`1<ThreadLocalList<T>> _locals;
    private ThreadLocalList modreq(System.Runtime.CompilerServices.IsVolatile) _headList;
    private ThreadLocalList modreq(System.Runtime.CompilerServices.IsVolatile) _tailList;
    private bool _needSync;
    public int Count { get; }
    public bool IsEmpty { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object GlobalListsLock { get; }
    public ConcurrentBag`1(IEnumerable`1<T> collection);
    private void Initialize(IEnumerable`1<T> collection);
    public void Add(T item);
    private void AddInternal(ThreadLocalList<T> list, T item);
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item);
    public sealed virtual bool TryTake(T& result);
    public bool TryPeek(T& result);
    private bool TryTakeOrPeek(T& result, bool take);
    private ThreadLocalList<T> GetThreadList(bool forceCreate);
    private ThreadLocalList<T> GetUnownedList();
    private bool Steal(T& result, bool take);
    private bool TrySteal(ThreadLocalList<T> list, T& result, bool take);
    private static bool CanSteal(ThreadLocalList<T> list);
    public sealed virtual void CopyTo(T[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual T[] ToArray();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private object get_GlobalListsLock();
    private void FreezeBag(Boolean& lockTaken);
    private void UnfreezeBag(bool lockTaken);
    private void AcquireAllLocks();
    private void ReleaseAllLocks();
    private void WaitAllOperations();
    private int GetCountInternal();
    private List`1<T> ToList();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("System.Collections.Concurrent.IDictionaryDebugView`2")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.Concurrent.ConcurrentDictionary`2 : object {
    private Tables modreq(System.Runtime.CompilerServices.IsVolatile) _tables;
    private IEqualityComparer`1<TKey> _comparer;
    private bool _growLockArray;
    private int _budget;
    private static int DEFAULT_CONCURRENCY_MULTIPLIER;
    private static int DEFAULT_CAPACITY;
    private static int MAX_LOCK_NUMBER;
    private static bool s_isValueWriteAtomic;
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public ICollection`1<TKey> Keys { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    public ICollection`1<TValue> Values { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private static int DefaultConcurrencyLevel { get; }
    public ConcurrentDictionary`2(int concurrencyLevel, int capacity);
    public ConcurrentDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public ConcurrentDictionary`2(IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(int concurrencyLevel, IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    internal ConcurrentDictionary`2(int concurrencyLevel, int capacity, bool growLockArray, IEqualityComparer`1<TKey> comparer);
    private static ConcurrentDictionary`2();
    private static bool IsValueWriteAtomic();
    private void InitializeFromCollection(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public bool TryAdd(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public bool TryRemove(TKey key, TValue& value);
    private bool TryRemoveInternal(TKey key, TValue& value, bool matchValue, TValue oldValue);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private bool TryGetValueInternal(TKey key, int hashcode, TValue& value);
    public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue);
    private bool TryUpdateInternal(TKey key, int hashcode, TValue newValue, TValue comparisonValue);
    public sealed virtual void Clear();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int index);
    public KeyValuePair`2[] ToArray();
    private void CopyToPairs(KeyValuePair`2[] array, int index);
    private void CopyToEntries(DictionaryEntry[] array, int index);
    private void CopyToObjects(Object[] array, int index);
    [IteratorStateMachineAttribute("System.Collections.Concurrent.ConcurrentDictionary`2/<GetEnumerator>d__1")]
public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, TValue& resultingValue);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual int get_Count();
    public TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    public TValue GetOrAdd(TKey key, TValue value);
    public TValue AddOrUpdate(TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory);
    public TValue AddOrUpdate(TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory);
    public bool get_IsEmpty();
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private void GrowTable(Tables<TKey, TValue> tables);
    private static int GetBucket(int hashcode, int bucketCount);
    private static void GetBucketAndLockNo(int hashcode, Int32& bucketNo, Int32& lockNo, int bucketCount, int lockCount);
    private static int get_DefaultConcurrencyLevel();
    private void AcquireAllLocks(Int32& locksAcquired);
    private void AcquireLocks(int fromInclusive, int toExclusive, Int32& locksAcquired);
    private void ReleaseLocks(int fromInclusive, int toExclusive);
    private ReadOnlyCollection`1<TKey> GetKeys();
    private ReadOnlyCollection`1<TValue> GetValues();
    [ConditionalAttribute("DEBUG")]
private static void Assert(bool condition);
}
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("System.Collections.Concurrent.IProducerConsumerCollectionDebugView`1")]
public class System.Collections.Concurrent.ConcurrentQueue`1 : object {
    private Segment modreq(System.Runtime.CompilerServices.IsVolatile) _head;
    private Segment modreq(System.Runtime.CompilerServices.IsVolatile) _tail;
    private static int SEGMENT_SIZE;
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _numSnapshotTakers;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    public ConcurrentQueue`1(IEnumerable`1<T> collection);
    private void InitializeFromCollection(IEnumerable`1<T> collection);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item);
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T& item);
    public bool get_IsEmpty();
    public sealed virtual T[] ToArray();
    private List`1<T> ToList();
    private void GetHeadTailPositions(Segment& head, Segment& tail, Int32& headLow, Int32& tailHigh);
    public sealed virtual int get_Count();
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [IteratorStateMachineAttribute("System.Collections.Concurrent.ConcurrentQueue`1/<GetEnumerator>d__2")]
private IEnumerator`1<T> GetEnumerator(Segment<T> head, Segment<T> tail, int headLow, int tailHigh);
    public void Enqueue(T item);
    public bool TryDequeue(T& result);
    public bool TryPeek(T& result);
}
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("System.Collections.Concurrent.IProducerConsumerCollectionDebugView`1")]
public class System.Collections.Concurrent.ConcurrentStack`1 : object {
    private Node modreq(System.Runtime.CompilerServices.IsVolatile) _head;
    private static int BACKOFF_MAX_YIELDS;
    public bool IsEmpty { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ConcurrentStack`1(IEnumerable`1<T> collection);
    private void InitializeFromCollection(IEnumerable`1<T> collection);
    public bool get_IsEmpty();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Clear();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual void CopyTo(T[] array, int index);
    public void Push(T item);
    public void PushRange(T[] items);
    public void PushRange(T[] items, int startIndex, int count);
    private void PushCore(Node<T> head, Node<T> tail);
    private static void ValidatePushPopRangeInput(T[] items, int startIndex, int count);
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item);
    public bool TryPeek(T& result);
    public bool TryPop(T& result);
    public int TryPopRange(T[] items);
    public int TryPopRange(T[] items, int startIndex, int count);
    private bool TryPopCore(T& result);
    private int TryPopCore(int count, Node& poppedHead);
    private static void CopyRemovedItems(Node<T> head, T[] collection, int startIndex, int nodesCount);
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T& item);
    public sealed virtual T[] ToArray();
    private List`1<T> ToList();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    [IteratorStateMachineAttribute("System.Collections.Concurrent.ConcurrentStack`1/<GetEnumerator>d__2")]
private IEnumerator`1<T> GetEnumerator(Node<T> head);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
public enum System.Collections.Concurrent.EnumerablePartitionerOptions : Enum {
    public int value__;
    public static EnumerablePartitionerOptions None;
    public static EnumerablePartitionerOptions NoBuffering;
}
internal class System.Collections.Concurrent.IDictionaryDebugView`2 : object {
    private IDictionary`2<K, V> _dictionary;
    [DebuggerBrowsableAttribute("3")]
public KeyValuePair`2[] Items { get; }
    public IDictionaryDebugView`2(IDictionary`2<K, V> dictionary);
    public KeyValuePair`2[] get_Items();
}
public interface System.Collections.Concurrent.IProducerConsumerCollection`1 {
    public abstract virtual void CopyTo(T[] array, int index);
    public abstract virtual bool TryAdd(T item);
    public abstract virtual bool TryTake(T& item);
    public abstract virtual T[] ToArray();
}
internal class System.Collections.Concurrent.IProducerConsumerCollectionDebugView`1 : object {
    private IProducerConsumerCollection`1<T> _collection;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public IProducerConsumerCollectionDebugView`1(IProducerConsumerCollection`1<T> collection);
    public T[] get_Items();
}
internal enum System.Collections.Concurrent.ListOperation : Enum {
    public int value__;
    public static ListOperation None;
    public static ListOperation Add;
    public static ListOperation Take;
}
public abstract class System.Collections.Concurrent.OrderablePartitioner`1 : Partitioner`1<TSource> {
    [CompilerGeneratedAttribute]
private bool <KeysOrderedInEachPartition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeysOrderedAcrossPartitions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeysNormalized>k__BackingField;
    public bool KeysOrderedInEachPartition { get; private set; }
    public bool KeysOrderedAcrossPartitions { get; private set; }
    public bool KeysNormalized { get; private set; }
    protected OrderablePartitioner`1(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);
    public abstract virtual IList`1<IEnumerator`1<KeyValuePair`2<long, TSource>>> GetOrderablePartitions(int partitionCount);
    public virtual IEnumerable`1<KeyValuePair`2<long, TSource>> GetOrderableDynamicPartitions();
    [CompilerGeneratedAttribute]
public bool get_KeysOrderedInEachPartition();
    [CompilerGeneratedAttribute]
private void set_KeysOrderedInEachPartition(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeysOrderedAcrossPartitions();
    [CompilerGeneratedAttribute]
private void set_KeysOrderedAcrossPartitions(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeysNormalized();
    [CompilerGeneratedAttribute]
private void set_KeysNormalized(bool value);
    public virtual IList`1<IEnumerator`1<TSource>> GetPartitions(int partitionCount);
    public virtual IEnumerable`1<TSource> GetDynamicPartitions();
}
public static class System.Collections.Concurrent.Partitioner : object {
    private static int DEFAULT_BYTES_PER_UNIT;
    private static int DEFAULT_BYTES_PER_CHUNK;
    public static OrderablePartitioner`1<TSource> Create(IList`1<TSource> list, bool loadBalance);
    public static OrderablePartitioner`1<TSource> Create(TSource[] array, bool loadBalance);
    public static OrderablePartitioner`1<TSource> Create(IEnumerable`1<TSource> source);
    public static OrderablePartitioner`1<TSource> Create(IEnumerable`1<TSource> source, EnumerablePartitionerOptions partitionerOptions);
    public static OrderablePartitioner`1<Tuple`2<long, long>> Create(long fromInclusive, long toExclusive);
    public static OrderablePartitioner`1<Tuple`2<long, long>> Create(long fromInclusive, long toExclusive, long rangeSize);
    [IteratorStateMachineAttribute("System.Collections.Concurrent.Partitioner/<CreateRanges>d__1")]
private static IEnumerable`1<Tuple`2<long, long>> CreateRanges(long fromInclusive, long toExclusive, long rangeSize);
    public static OrderablePartitioner`1<Tuple`2<int, int>> Create(int fromInclusive, int toExclusive);
    public static OrderablePartitioner`1<Tuple`2<int, int>> Create(int fromInclusive, int toExclusive, int rangeSize);
    [IteratorStateMachineAttribute("System.Collections.Concurrent.Partitioner/<CreateRanges>d__2")]
private static IEnumerable`1<Tuple`2<int, int>> CreateRanges(int fromInclusive, int toExclusive, int rangeSize);
    private static int GetDefaultChunkSize();
}
public abstract class System.Collections.Concurrent.Partitioner`1 : object {
    public bool SupportsDynamicPartitions { get; }
    public abstract virtual IList`1<IEnumerator`1<TSource>> GetPartitions(int partitionCount);
    public virtual bool get_SupportsDynamicPartitions();
    public virtual IEnumerable`1<TSource> GetDynamicPartitions();
}
internal class System.Collections.Concurrent.VolatileBool : ValueType {
    public Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _value;
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string BlockingCollection_Add_ConcurrentCompleteAdd { get; }
    internal static string BlockingCollection_Add_Failed { get; }
    internal static string BlockingCollection_CantAddAnyWhenCompleted { get; }
    internal static string BlockingCollection_CantTakeAnyWhenAllDone { get; }
    internal static string BlockingCollection_CantTakeWhenDone { get; }
    internal static string BlockingCollection_Completed { get; }
    internal static string BlockingCollection_CopyTo_IncorrectType { get; }
    internal static string BlockingCollection_CopyTo_MultiDim { get; }
    internal static string BlockingCollection_CopyTo_NonNegative { get; }
    internal static string BlockingCollection_CopyTo_TooManyElems { get; }
    internal static string BlockingCollection_ctor_BoundedCapacityRange { get; }
    internal static string BlockingCollection_ctor_CountMoreThanCapacity { get; }
    internal static string BlockingCollection_Disposed { get; }
    internal static string BlockingCollection_Take_CollectionModified { get; }
    internal static string BlockingCollection_TimeoutInvalid { get; }
    internal static string BlockingCollection_ValidateCollectionsArray_DispElems { get; }
    internal static string BlockingCollection_ValidateCollectionsArray_LargeSize { get; }
    internal static string BlockingCollection_ValidateCollectionsArray_NullElems { get; }
    internal static string BlockingCollection_ValidateCollectionsArray_ZeroSize { get; }
    internal static string Common_OperationCanceled { get; }
    internal static string ConcurrentBag_Ctor_ArgumentNullException { get; }
    internal static string ConcurrentBag_CopyTo_ArgumentNullException { get; }
    internal static string ConcurrentBag_CopyTo_ArgumentOutOfRangeException { get; }
    internal static string ConcurrentCollection_SyncRoot_NotSupported { get; }
    internal static string ConcurrentDictionary_ArrayIncorrectType { get; }
    internal static string ConcurrentDictionary_SourceContainsDuplicateKeys { get; }
    internal static string ConcurrentDictionary_ConcurrencyLevelMustBePositive { get; }
    internal static string ConcurrentDictionary_CapacityMustNotBeNegative { get; }
    internal static string ConcurrentDictionary_IndexIsNegative { get; }
    internal static string ConcurrentDictionary_ArrayNotLargeEnough { get; }
    internal static string ConcurrentDictionary_KeyAlreadyExisted { get; }
    internal static string ConcurrentDictionary_ItemKeyIsNull { get; }
    internal static string ConcurrentDictionary_TypeOfKeyIncorrect { get; }
    internal static string ConcurrentDictionary_TypeOfValueIncorrect { get; }
    internal static string ConcurrentStack_PushPopRange_CountOutOfRange { get; }
    internal static string ConcurrentStack_PushPopRange_InvalidCount { get; }
    internal static string ConcurrentStack_PushPopRange_StartOutOfRange { get; }
    internal static string Partitioner_DynamicPartitionsNotSupported { get; }
    internal static string PartitionerStatic_CanNotCallGetEnumeratorAfterSourceHasBeenDisposed { get; }
    internal static string PartitionerStatic_CurrentCalledBeforeMoveNext { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_BlockingCollection_Add_ConcurrentCompleteAdd();
    internal static string get_BlockingCollection_Add_Failed();
    internal static string get_BlockingCollection_CantAddAnyWhenCompleted();
    internal static string get_BlockingCollection_CantTakeAnyWhenAllDone();
    internal static string get_BlockingCollection_CantTakeWhenDone();
    internal static string get_BlockingCollection_Completed();
    internal static string get_BlockingCollection_CopyTo_IncorrectType();
    internal static string get_BlockingCollection_CopyTo_MultiDim();
    internal static string get_BlockingCollection_CopyTo_NonNegative();
    internal static string get_BlockingCollection_CopyTo_TooManyElems();
    internal static string get_BlockingCollection_ctor_BoundedCapacityRange();
    internal static string get_BlockingCollection_ctor_CountMoreThanCapacity();
    internal static string get_BlockingCollection_Disposed();
    internal static string get_BlockingCollection_Take_CollectionModified();
    internal static string get_BlockingCollection_TimeoutInvalid();
    internal static string get_BlockingCollection_ValidateCollectionsArray_DispElems();
    internal static string get_BlockingCollection_ValidateCollectionsArray_LargeSize();
    internal static string get_BlockingCollection_ValidateCollectionsArray_NullElems();
    internal static string get_BlockingCollection_ValidateCollectionsArray_ZeroSize();
    internal static string get_Common_OperationCanceled();
    internal static string get_ConcurrentBag_Ctor_ArgumentNullException();
    internal static string get_ConcurrentBag_CopyTo_ArgumentNullException();
    internal static string get_ConcurrentBag_CopyTo_ArgumentOutOfRangeException();
    internal static string get_ConcurrentCollection_SyncRoot_NotSupported();
    internal static string get_ConcurrentDictionary_ArrayIncorrectType();
    internal static string get_ConcurrentDictionary_SourceContainsDuplicateKeys();
    internal static string get_ConcurrentDictionary_ConcurrencyLevelMustBePositive();
    internal static string get_ConcurrentDictionary_CapacityMustNotBeNegative();
    internal static string get_ConcurrentDictionary_IndexIsNegative();
    internal static string get_ConcurrentDictionary_ArrayNotLargeEnough();
    internal static string get_ConcurrentDictionary_KeyAlreadyExisted();
    internal static string get_ConcurrentDictionary_ItemKeyIsNull();
    internal static string get_ConcurrentDictionary_TypeOfKeyIncorrect();
    internal static string get_ConcurrentDictionary_TypeOfValueIncorrect();
    internal static string get_ConcurrentStack_PushPopRange_CountOutOfRange();
    internal static string get_ConcurrentStack_PushPopRange_InvalidCount();
    internal static string get_ConcurrentStack_PushPopRange_StartOutOfRange();
    internal static string get_Partitioner_DynamicPartitionsNotSupported();
    internal static string get_PartitionerStatic_CanNotCallGetEnumeratorAfterSourceHasBeenDisposed();
    internal static string get_PartitionerStatic_CurrentCalledBeforeMoveNext();
    internal static Type get_ResourceType();
}
internal static class System.Threading.PlatformHelper : object {
    private static int PROCESSOR_COUNT_REFRESH_INTERVAL_MS;
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) s_processorCount;
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) s_lastProcessorCountRefreshTicks;
    internal static int ProcessorCount { get; }
    internal static int get_ProcessorCount();
}
