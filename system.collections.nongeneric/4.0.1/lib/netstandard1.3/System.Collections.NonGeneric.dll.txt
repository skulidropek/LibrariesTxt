internal static class FxResources.System.Collections.NonGeneric.SR : object {
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("System.Collections.ArrayList/ArrayListDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.ArrayList : object {
    private Object[] _items;
    private int _size;
    private int _version;
    private object _syncRoot;
    private static int _defaultCapacity;
    internal static int MaxArrayLength;
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public object Item { get; public set; }
    internal ArrayList(bool trash);
    public ArrayList(int capacity);
    public ArrayList(ICollection c);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public static ArrayList Adapter(IList list);
    public virtual int Add(object value);
    public virtual void AddRange(ICollection c);
    public virtual int BinarySearch(int index, int count, object value, IComparer comparer);
    public virtual int BinarySearch(object value);
    public virtual int BinarySearch(object value, IComparer comparer);
    public virtual void Clear();
    public virtual object Clone();
    public virtual bool Contains(object item);
    public virtual void CopyTo(Array array);
    public virtual void CopyTo(Array array, int arrayIndex);
    public virtual void CopyTo(int index, Array array, int arrayIndex, int count);
    private void EnsureCapacity(int min);
    public static IList FixedSize(IList list);
    public static ArrayList FixedSize(ArrayList list);
    public virtual IEnumerator GetEnumerator();
    public virtual IEnumerator GetEnumerator(int index, int count);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(object value, int startIndex);
    public virtual int IndexOf(object value, int startIndex, int count);
    public virtual void Insert(int index, object value);
    public virtual void InsertRange(int index, ICollection c);
    public virtual int LastIndexOf(object value);
    public virtual int LastIndexOf(object value, int startIndex);
    public virtual int LastIndexOf(object value, int startIndex, int count);
    public static IList ReadOnly(IList list);
    public static ArrayList ReadOnly(ArrayList list);
    public virtual void Remove(object obj);
    public virtual void RemoveAt(int index);
    public virtual void RemoveRange(int index, int count);
    public static ArrayList Repeat(object value, int count);
    public virtual void Reverse();
    public virtual void Reverse(int index, int count);
    public virtual void SetRange(int index, ICollection c);
    public virtual ArrayList GetRange(int index, int count);
    public virtual void Sort();
    public virtual void Sort(IComparer comparer);
    public virtual void Sort(int index, int count, IComparer comparer);
    public static IList Synchronized(IList list);
    public static ArrayList Synchronized(ArrayList list);
    public virtual Object[] ToArray();
    [SecuritySafeCriticalAttribute]
public virtual Array ToArray(Type type);
    public virtual void TrimToSize();
}
public class System.Collections.CaseInsensitiveComparer : object {
    private CompareInfo _compareInfo;
    private static CaseInsensitiveComparer modreq(System.Runtime.CompilerServices.IsVolatile) s_InvariantCaseInsensitiveComparer;
    public static CaseInsensitiveComparer Default { get; }
    public static CaseInsensitiveComparer DefaultInvariant { get; }
    public CaseInsensitiveComparer(CultureInfo culture);
    public static CaseInsensitiveComparer get_Default();
    public static CaseInsensitiveComparer get_DefaultInvariant();
    public sealed virtual int Compare(object a, object b);
}
public abstract class System.Collections.CollectionBase : object {
    private ArrayList _list;
    protected ArrayList InnerList { get; }
    protected IList List { get; }
    public int Capacity { get; public set; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    protected CollectionBase(int capacity);
    protected ArrayList get_InnerList();
    protected IList get_List();
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual IEnumerator GetEnumerator();
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnClear();
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnValidate(object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnRemoveComplete(int index, object value);
}
public class System.Collections.Comparer : object {
    private CompareInfo _compareInfo;
    public static Comparer Default;
    public static Comparer DefaultInvariant;
    private static string CompareInfoName;
    public Comparer(CultureInfo culture);
    private static Comparer();
    public sealed virtual int Compare(object a, object b);
}
public abstract class System.Collections.DictionaryBase : object {
    private Hashtable _hashtable;
    protected Hashtable InnerHashtable { get; }
    protected IDictionary Dictionary { get; }
    public int Count { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    protected Hashtable get_InnerHashtable();
    protected IDictionary get_Dictionary();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    public sealed virtual void Clear();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual object OnGet(object key, object currentValue);
    protected virtual void OnSet(object key, object oldValue, object newValue);
    protected virtual void OnInsert(object key, object value);
    protected virtual void OnClear();
    protected virtual void OnRemove(object key, object value);
    protected virtual void OnValidate(object key, object value);
    protected virtual void OnSetComplete(object key, object oldValue, object newValue);
    protected virtual void OnInsertComplete(object key, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnRemoveComplete(object key, object value);
}
internal static class System.Collections.HashHelpers : object {
    public static Int32[] primes;
    public static int MaxPrimeArrayLength;
    private static HashHelpers();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("System.Collections.Hashtable/HashtableDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.Hashtable : object {
    internal static int HashPrime;
    private static int InitialSize;
    private bucket[] _buckets;
    private int _count;
    private int _occupancy;
    private int _loadsize;
    private float _loadFactor;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _version;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isWriterInProgress;
    private ICollection _keys;
    private ICollection _values;
    private IEqualityComparer _keycomparer;
    private object _syncRoot;
    protected IEqualityComparer EqualityComparer { get; }
    public object Item { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object SyncRoot { get; }
    public int Count { get; }
    internal Hashtable(bool trash);
    public Hashtable(int capacity);
    public Hashtable(int capacity, float loadFactor);
    public Hashtable(int capacity, float loadFactor, IEqualityComparer equalityComparer);
    public Hashtable(IEqualityComparer equalityComparer);
    public Hashtable(int capacity, IEqualityComparer equalityComparer);
    public Hashtable(IDictionary d);
    public Hashtable(IDictionary d, float loadFactor);
    public Hashtable(IDictionary d, IEqualityComparer equalityComparer);
    public Hashtable(IDictionary d, float loadFactor, IEqualityComparer equalityComparer);
    protected IEqualityComparer get_EqualityComparer();
    private UInt32 InitHash(object key, int hashsize, UInt32& seed, UInt32& incr);
    public virtual void Add(object key, object value);
    public virtual void Clear();
    public virtual object Clone();
    public virtual bool Contains(object key);
    public virtual bool ContainsKey(object key);
    public virtual bool ContainsValue(object value);
    private void CopyKeys(Array array, int arrayIndex);
    private void CopyEntries(Array array, int arrayIndex);
    public virtual void CopyTo(Array array, int arrayIndex);
    internal virtual KeyValuePairs[] ToKeyValuePairsArray();
    private void CopyValues(Array array, int arrayIndex);
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    private void expand();
    private void rehash();
    private void UpdateVersion();
    private void rehash(int newsize, bool forceNewHashCode);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IDictionaryEnumerator GetEnumerator();
    protected virtual int GetHash(object key);
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    protected virtual bool KeyEquals(object item, object key);
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    private void Insert(object key, object nvalue, bool add);
    private void putEntry(bucket[] newBuckets, object key, object nvalue, int hashcode);
    public virtual void Remove(object key);
    public virtual object get_SyncRoot();
    public virtual int get_Count();
    public static Hashtable Synchronized(Hashtable table);
}
[DebuggerDisplayAttribute("{_value}")]
internal class System.Collections.KeyValuePairs : object {
    [DebuggerBrowsableAttribute("0")]
private object _key;
    [DebuggerBrowsableAttribute("0")]
private object _value;
    public KeyValuePairs(object key, object value);
}
[DebuggerTypeProxyAttribute("System.Collections.Queue/QueueDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.Queue : object {
    private Object[] _array;
    private int _head;
    private int _tail;
    private int _size;
    private int _growFactor;
    private int _version;
    private object _syncRoot;
    private static int _MinimumGrow;
    private static int _ShrinkThreshold;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Queue(int capacity);
    public Queue(int capacity, float growFactor);
    public Queue(ICollection col);
    public virtual int get_Count();
    public virtual object Clone();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual void Clear();
    public virtual void CopyTo(Array array, int index);
    public virtual void Enqueue(object obj);
    public virtual IEnumerator GetEnumerator();
    public virtual object Dequeue();
    public virtual object Peek();
    public static Queue Synchronized(Queue queue);
    public virtual bool Contains(object obj);
    internal object GetElement(int i);
    public virtual Object[] ToArray();
    private void SetCapacity(int capacity);
    public virtual void TrimToSize();
}
public abstract class System.Collections.ReadOnlyCollectionBase : object {
    private ArrayList _list;
    protected ArrayList InnerList { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList get_InnerList();
    public virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("System.Collections.SortedList/SortedListDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.SortedList : object {
    private Object[] _keys;
    private Object[] _values;
    private int _size;
    private int _version;
    private IComparer _comparer;
    private KeyList _keyList;
    private ValueList _valueList;
    private object _syncRoot;
    private static int _defaultCapacity;
    public int Capacity { get; public set; }
    public int Count { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public object Item { get; public set; }
    public SortedList(int initialCapacity);
    public SortedList(IComparer comparer);
    public SortedList(IComparer comparer, int capacity);
    public SortedList(IDictionary d);
    public SortedList(IDictionary d, IComparer comparer);
    private void Init();
    public virtual void Add(object key, object value);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual void Clear();
    public virtual object Clone();
    public virtual bool Contains(object key);
    public virtual bool ContainsKey(object key);
    public virtual bool ContainsValue(object value);
    public virtual void CopyTo(Array array, int arrayIndex);
    internal virtual KeyValuePairs[] ToKeyValuePairsArray();
    private void EnsureCapacity(int min);
    public virtual object GetByIndex(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IDictionaryEnumerator GetEnumerator();
    public virtual object GetKey(int index);
    public virtual IList GetKeyList();
    public virtual IList GetValueList();
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public virtual int IndexOfKey(object key);
    public virtual int IndexOfValue(object value);
    private void Insert(int index, object key, object value);
    public virtual void RemoveAt(int index);
    public virtual void Remove(object key);
    public virtual void SetByIndex(int index, object value);
    public static SortedList Synchronized(SortedList list);
    public virtual void TrimToSize();
}
public class System.Collections.Specialized.CollectionsUtil : object {
    public static Hashtable CreateCaseInsensitiveHashtable();
    public static Hashtable CreateCaseInsensitiveHashtable(int capacity);
    public static Hashtable CreateCaseInsensitiveHashtable(IDictionary d);
    public static SortedList CreateCaseInsensitiveSortedList();
}
[DebuggerTypeProxyAttribute("System.Collections.Stack/StackDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class System.Collections.Stack : object {
    private Object[] _array;
    private int _size;
    private int _version;
    private object _syncRoot;
    private static int _defaultCapacity;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Stack(int initialCapacity);
    public Stack(ICollection col);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual void Clear();
    public virtual object Clone();
    public virtual bool Contains(object obj);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual object Peek();
    public virtual object Pop();
    public virtual void Push(object obj);
    public static Stack Synchronized(Stack stack);
    public virtual Object[] ToArray();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Argument_AddingDuplicate__ { get; }
    internal static string Argument_ImplementIComparable { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string Arg_HTCapacityOverflow { get; }
    internal static string Arg_RemoveArgNotFound { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string ArgumentNull_Array { get; }
    internal static string ArgumentNull_Collection { get; }
    internal static string ArgumentNull_Dictionary { get; }
    internal static string ArgumentNull_Key { get; }
    internal static string ArgumentOutOfRange_ArrayListInsert { get; }
    internal static string ArgumentOutOfRange_BiggerThanCollection { get; }
    internal static string ArgumentOutOfRange_Count { get; }
    internal static string ArgumentOutOfRange_HashtableLoadFactor { get; }
    internal static string ArgumentOutOfRange_Index { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_SmallCapacity { get; }
    internal static string ArgumentOutOfRange_QueueGrowFactor { get; }
    internal static string ArgumentOutOfRange_MustBeNonNegNum { get; }
    internal static string InvalidOperation_EmptyQueue { get; }
    internal static string InvalidOperation_EmptyStack { get; }
    internal static string InvalidOperation_EnumEnded { get; }
    internal static string InvalidOperation_EnumFailedVersion { get; }
    internal static string InvalidOperation_EnumNotStarted { get; }
    internal static string InvalidOperation_EnumOpCantHappen { get; }
    internal static string InvalidOperation_UnderlyingArrayListChanged { get; }
    internal static string InvalidOperation_HashInsertFailed { get; }
    internal static string NotSupported_FixedSizeCollection { get; }
    internal static string NotSupported_KeyCollectionSet { get; }
    internal static string NotSupported_ReadOnlyCollection { get; }
    internal static string NotSupported_RangeCollection { get; }
    internal static string NotSupported_SortedListNestedWrite { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Argument_AddingDuplicate__();
    internal static string get_Argument_ImplementIComparable();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_Arg_HTCapacityOverflow();
    internal static string get_Arg_RemoveArgNotFound();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_ArgumentNull_Array();
    internal static string get_ArgumentNull_Collection();
    internal static string get_ArgumentNull_Dictionary();
    internal static string get_ArgumentNull_Key();
    internal static string get_ArgumentOutOfRange_ArrayListInsert();
    internal static string get_ArgumentOutOfRange_BiggerThanCollection();
    internal static string get_ArgumentOutOfRange_Count();
    internal static string get_ArgumentOutOfRange_HashtableLoadFactor();
    internal static string get_ArgumentOutOfRange_Index();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_SmallCapacity();
    internal static string get_ArgumentOutOfRange_QueueGrowFactor();
    internal static string get_ArgumentOutOfRange_MustBeNonNegNum();
    internal static string get_InvalidOperation_EmptyQueue();
    internal static string get_InvalidOperation_EmptyStack();
    internal static string get_InvalidOperation_EnumEnded();
    internal static string get_InvalidOperation_EnumFailedVersion();
    internal static string get_InvalidOperation_EnumNotStarted();
    internal static string get_InvalidOperation_EnumOpCantHappen();
    internal static string get_InvalidOperation_UnderlyingArrayListChanged();
    internal static string get_InvalidOperation_HashInsertFailed();
    internal static string get_NotSupported_FixedSizeCollection();
    internal static string get_NotSupported_KeyCollectionSet();
    internal static string get_NotSupported_ReadOnlyCollection();
    internal static string get_NotSupported_RangeCollection();
    internal static string get_NotSupported_SortedListNestedWrite();
    internal static Type get_ResourceType();
}
