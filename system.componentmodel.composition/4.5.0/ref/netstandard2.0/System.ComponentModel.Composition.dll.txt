public static class System.ComponentModel.Composition.AdaptationConstants : object {
    public static string AdapterContractName;
    public static string AdapterFromContractMetadataName;
    public static string AdapterToContractMetadataName;
}
[ExtensionAttribute]
public static class System.ComponentModel.Composition.AttributedModelServices : object {
    [ExtensionAttribute]
public static ComposablePart AddExportedValue(CompositionBatch batch, string contractName, T exportedValue);
    [ExtensionAttribute]
public static ComposablePart AddExportedValue(CompositionBatch batch, T exportedValue);
    [ExtensionAttribute]
public static ComposablePart AddPart(CompositionBatch batch, object attributedPart);
    [ExtensionAttribute]
public static void ComposeExportedValue(CompositionContainer container, string contractName, T exportedValue);
    [ExtensionAttribute]
public static void ComposeExportedValue(CompositionContainer container, T exportedValue);
    [ExtensionAttribute]
public static void ComposeParts(CompositionContainer container, Object[] attributedParts);
    public static ComposablePart CreatePart(ComposablePartDefinition partDefinition, object attributedPart);
    public static ComposablePart CreatePart(object attributedPart);
    public static ComposablePart CreatePart(object attributedPart, ReflectionContext reflectionContext);
    public static ComposablePartDefinition CreatePartDefinition(Type type, ICompositionElement origin);
    public static ComposablePartDefinition CreatePartDefinition(Type type, ICompositionElement origin, bool ensureIsDiscoverable);
    [ExtensionAttribute]
public static bool Exports(ComposablePartDefinition part, Type contractType);
    [ExtensionAttribute]
public static bool Exports(ComposablePartDefinition part);
    public static string GetContractName(Type type);
    public static TMetadataView GetMetadataView(IDictionary`2<string, object> metadata);
    public static string GetTypeIdentity(MethodInfo method);
    public static string GetTypeIdentity(Type type);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, Type contractType);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, Type contractType, ImportCardinality importCardinality);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, ImportCardinality importCardinality);
    [ExtensionAttribute]
public static ComposablePart SatisfyImportsOnce(ICompositionService compositionService, object attributedPart);
    [ExtensionAttribute]
public static ComposablePart SatisfyImportsOnce(ICompositionService compositionService, object attributedPart, ReflectionContext reflectionContext);
}
[AttributeUsageAttribute("1")]
public class System.ComponentModel.Composition.CatalogReflectionContextAttribute : Attribute {
    public CatalogReflectionContextAttribute(Type reflectionContextType);
    public ReflectionContext CreateReflectionContext();
}
public class System.ComponentModel.Composition.ChangeRejectedException : CompositionException {
    public string Message { get; }
    public ChangeRejectedException(IEnumerable`1<CompositionError> errors);
    public ChangeRejectedException(string message);
    public ChangeRejectedException(string message, Exception innerException);
    public virtual string get_Message();
}
public class System.ComponentModel.Composition.CompositionContractMismatchException : Exception {
    protected CompositionContractMismatchException(SerializationInfo info, StreamingContext context);
    public CompositionContractMismatchException(string message);
    public CompositionContractMismatchException(string message, Exception innerException);
}
public class System.ComponentModel.Composition.CompositionError : object {
    public string Description { get; }
    public ICompositionElement Element { get; }
    public Exception Exception { get; }
    public CompositionError(string message);
    public CompositionError(string message, ICompositionElement element);
    public CompositionError(string message, ICompositionElement element, Exception exception);
    public CompositionError(string message, Exception exception);
    public string get_Description();
    public ICompositionElement get_Element();
    public Exception get_Exception();
    public virtual string ToString();
}
public class System.ComponentModel.Composition.CompositionException : Exception {
    public ReadOnlyCollection`1<CompositionError> Errors { get; }
    public string Message { get; }
    public ReadOnlyCollection`1<Exception> RootCauses { get; }
    public CompositionException(IEnumerable`1<CompositionError> errors);
    public CompositionException(string message);
    public CompositionException(string message, Exception innerException);
    public ReadOnlyCollection`1<CompositionError> get_Errors();
    public virtual string get_Message();
    public ReadOnlyCollection`1<Exception> get_RootCauses();
}
public enum System.ComponentModel.Composition.CreationPolicy : Enum {
    public int value__;
    public static CreationPolicy Any;
    public static CreationPolicy NonShared;
    public static CreationPolicy Shared;
}
[AttributeUsageAttribute("452")]
public class System.ComponentModel.Composition.ExportAttribute : Attribute {
    public string ContractName { get; }
    public Type ContractType { get; }
    public ExportAttribute(string contractName);
    public ExportAttribute(string contractName, Type contractType);
    public ExportAttribute(Type contractType);
    public string get_ContractName();
    public Type get_ContractType();
}
public class System.ComponentModel.Composition.ExportFactory`1 : object {
    public ExportFactory`1(Func`1<Tuple`2<T, Action>> exportLifetimeContextCreator);
    public ExportLifetimeContext`1<T> CreateExport();
}
public class System.ComponentModel.Composition.ExportFactory`2 : ExportFactory`1<T> {
    public TMetadata Metadata { get; }
    public ExportFactory`2(Func`1<Tuple`2<T, Action>> exportLifetimeContextCreator, TMetadata metadata);
    public TMetadata get_Metadata();
}
public class System.ComponentModel.Composition.ExportLifetimeContext`1 : object {
    public T Value { get; }
    public ExportLifetimeContext`1(T value, Action disposeAction);
    public T get_Value();
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("1476")]
public class System.ComponentModel.Composition.ExportMetadataAttribute : Attribute {
    public bool IsMultiple { get; public set; }
    public string Name { get; }
    public object Value { get; }
    public ExportMetadataAttribute(string name, object value);
    public bool get_IsMultiple();
    public void set_IsMultiple(bool value);
    public string get_Name();
    public object get_Value();
}
public class System.ComponentModel.Composition.Hosting.AggregateCatalog : ComposablePartCatalog {
    public ICollection`1<ComposablePartCatalog> Catalogs { get; }
    public AggregateCatalog(IEnumerable`1<ComposablePartCatalog> catalogs);
    public AggregateCatalog(ComposablePartCatalog[] catalogs);
    public ICollection`1<ComposablePartCatalog> get_Catalogs();
    public sealed virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    protected virtual void OnChanged(ComposablePartCatalogChangeEventArgs e);
    protected virtual void OnChanging(ComposablePartCatalogChangeEventArgs e);
}
public class System.ComponentModel.Composition.Hosting.AggregateExportProvider : ExportProvider {
    public ReadOnlyCollection`1<ExportProvider> Providers { get; }
    public AggregateExportProvider(IEnumerable`1<ExportProvider> providers);
    public AggregateExportProvider(ExportProvider[] providers);
    public ReadOnlyCollection`1<ExportProvider> get_Providers();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
}
public class System.ComponentModel.Composition.Hosting.ApplicationCatalog : ComposablePartCatalog {
    private string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    private ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    public ApplicationCatalog(ICompositionElement definitionOrigin);
    public ApplicationCatalog(ReflectionContext reflectionContext);
    public ApplicationCatalog(ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    private sealed virtual override string System.ComponentModel.Composition.Primitives.ICompositionElement.get_DisplayName();
    private sealed virtual override ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.get_Origin();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    public virtual string ToString();
}
public class System.ComponentModel.Composition.Hosting.AssemblyCatalog : ComposablePartCatalog {
    public Assembly Assembly { get; }
    private string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    private ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    public AssemblyCatalog(Assembly assembly);
    public AssemblyCatalog(Assembly assembly, ICompositionElement definitionOrigin);
    public AssemblyCatalog(Assembly assembly, ReflectionContext reflectionContext);
    public AssemblyCatalog(Assembly assembly, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public AssemblyCatalog(string codeBase);
    public AssemblyCatalog(string codeBase, ICompositionElement definitionOrigin);
    public AssemblyCatalog(string codeBase, ReflectionContext reflectionContext);
    public AssemblyCatalog(string codeBase, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public Assembly get_Assembly();
    private sealed virtual override string System.ComponentModel.Composition.Primitives.ICompositionElement.get_DisplayName();
    private sealed virtual override ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.get_Origin();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    public virtual string ToString();
}
public class System.ComponentModel.Composition.Hosting.AtomicComposition : object {
    public AtomicComposition(AtomicComposition outerAtomicComposition);
    public void AddCompleteAction(Action completeAction);
    public void AddRevertAction(Action revertAction);
    public void Complete();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void SetValue(object key, object value);
    public bool TryGetValue(object key, bool localAtomicCompositionOnly, T& value);
    public bool TryGetValue(object key, T& value);
}
public class System.ComponentModel.Composition.Hosting.CatalogExportProvider : ExportProvider {
    public ComposablePartCatalog Catalog { get; }
    public ExportProvider SourceProvider { get; public set; }
    public CatalogExportProvider(ComposablePartCatalog catalog);
    public CatalogExportProvider(ComposablePartCatalog catalog, bool isThreadSafe);
    public CatalogExportProvider(ComposablePartCatalog catalog, CompositionOptions compositionOptions);
    public ComposablePartCatalog get_Catalog();
    public ExportProvider get_SourceProvider();
    public void set_SourceProvider(ExportProvider value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
}
[ExtensionAttribute]
public static class System.ComponentModel.Composition.Hosting.CatalogExtensions : object {
    [ExtensionAttribute]
public static CompositionService CreateCompositionService(ComposablePartCatalog composablePartCatalog);
}
public class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs : EventArgs {
    public IEnumerable`1<ComposablePartDefinition> AddedDefinitions { get; }
    public AtomicComposition AtomicComposition { get; }
    public IEnumerable`1<ComposablePartDefinition> RemovedDefinitions { get; }
    public ComposablePartCatalogChangeEventArgs(IEnumerable`1<ComposablePartDefinition> addedDefinitions, IEnumerable`1<ComposablePartDefinition> removedDefinitions, AtomicComposition atomicComposition);
    public IEnumerable`1<ComposablePartDefinition> get_AddedDefinitions();
    public AtomicComposition get_AtomicComposition();
    public IEnumerable`1<ComposablePartDefinition> get_RemovedDefinitions();
}
public class System.ComponentModel.Composition.Hosting.ComposablePartExportProvider : ExportProvider {
    public ExportProvider SourceProvider { get; public set; }
    public ComposablePartExportProvider(bool isThreadSafe);
    public ComposablePartExportProvider(CompositionOptions compositionOptions);
    public ExportProvider get_SourceProvider();
    public void set_SourceProvider(ExportProvider value);
    public void Compose(CompositionBatch batch);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
}
public class System.ComponentModel.Composition.Hosting.CompositionBatch : object {
    public ReadOnlyCollection`1<ComposablePart> PartsToAdd { get; }
    public ReadOnlyCollection`1<ComposablePart> PartsToRemove { get; }
    public CompositionBatch(IEnumerable`1<ComposablePart> partsToAdd, IEnumerable`1<ComposablePart> partsToRemove);
    public ReadOnlyCollection`1<ComposablePart> get_PartsToAdd();
    public ReadOnlyCollection`1<ComposablePart> get_PartsToRemove();
    public ComposablePart AddExport(Export export);
    public void AddPart(ComposablePart part);
    public void RemovePart(ComposablePart part);
}
public static class System.ComponentModel.Composition.Hosting.CompositionConstants : object {
    public static string ExportTypeIdentityMetadataName;
    public static string GenericContractMetadataName;
    public static string GenericParametersMetadataName;
    public static string ImportSourceMetadataName;
    public static string IsGenericPartMetadataName;
    public static string PartCreationPolicyMetadataName;
}
public class System.ComponentModel.Composition.Hosting.CompositionContainer : ExportProvider {
    public ComposablePartCatalog Catalog { get; }
    public ReadOnlyCollection`1<ExportProvider> Providers { get; }
    public CompositionContainer(CompositionOptions compositionOptions, ExportProvider[] providers);
    public CompositionContainer(ExportProvider[] providers);
    public CompositionContainer(ComposablePartCatalog catalog, bool isThreadSafe, ExportProvider[] providers);
    public CompositionContainer(ComposablePartCatalog catalog, CompositionOptions compositionOptions, ExportProvider[] providers);
    public CompositionContainer(ComposablePartCatalog catalog, ExportProvider[] providers);
    public ComposablePartCatalog get_Catalog();
    public ReadOnlyCollection`1<ExportProvider> get_Providers();
    public void Compose(CompositionBatch batch);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
    public void ReleaseExport(Export export);
    public void ReleaseExports(IEnumerable`1<Export> exports);
    public void ReleaseExports(IEnumerable`1<Lazy`1<T>> exports);
    public void ReleaseExports(IEnumerable`1<Lazy`2<T, TMetadataView>> exports);
    public void ReleaseExport(Lazy`1<T> export);
    public sealed virtual void SatisfyImportsOnce(ComposablePart part);
}
[FlagsAttribute]
public enum System.ComponentModel.Composition.Hosting.CompositionOptions : Enum {
    public int value__;
    public static CompositionOptions Default;
    public static CompositionOptions DisableSilentRejection;
    public static CompositionOptions ExportCompositionService;
    public static CompositionOptions IsThreadSafe;
}
public class System.ComponentModel.Composition.Hosting.CompositionScopeDefinition : ComposablePartCatalog {
    public IEnumerable`1<CompositionScopeDefinition> Children { get; }
    public IEnumerable`1<ExportDefinition> PublicSurface { get; }
    public CompositionScopeDefinition(ComposablePartCatalog catalog, IEnumerable`1<CompositionScopeDefinition> children);
    public CompositionScopeDefinition(ComposablePartCatalog catalog, IEnumerable`1<CompositionScopeDefinition> children, IEnumerable`1<ExportDefinition> publicSurface);
    public virtual IEnumerable`1<CompositionScopeDefinition> get_Children();
    public virtual IEnumerable`1<ExportDefinition> get_PublicSurface();
    public sealed virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    protected virtual void OnChanged(ComposablePartCatalogChangeEventArgs e);
    protected virtual void OnChanging(ComposablePartCatalogChangeEventArgs e);
}
public class System.ComponentModel.Composition.Hosting.CompositionService : object {
    public sealed virtual void Dispose();
    public sealed virtual void SatisfyImportsOnce(ComposablePart part);
}
public class System.ComponentModel.Composition.Hosting.DirectoryCatalog : ComposablePartCatalog {
    public string FullPath { get; }
    public ReadOnlyCollection`1<string> LoadedFiles { get; }
    public string Path { get; }
    public string SearchPattern { get; }
    private string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    private ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    public DirectoryCatalog(string path);
    public DirectoryCatalog(string path, ICompositionElement definitionOrigin);
    public DirectoryCatalog(string path, ReflectionContext reflectionContext);
    public DirectoryCatalog(string path, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public DirectoryCatalog(string path, string searchPattern);
    public DirectoryCatalog(string path, string searchPattern, ICompositionElement definitionOrigin);
    public DirectoryCatalog(string path, string searchPattern, ReflectionContext reflectionContext);
    public DirectoryCatalog(string path, string searchPattern, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public string get_FullPath();
    public ReadOnlyCollection`1<string> get_LoadedFiles();
    public string get_Path();
    public string get_SearchPattern();
    private sealed virtual override string System.ComponentModel.Composition.Primitives.ICompositionElement.get_DisplayName();
    private sealed virtual override ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.get_Origin();
    public sealed virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    protected virtual void OnChanged(ComposablePartCatalogChangeEventArgs e);
    protected virtual void OnChanging(ComposablePartCatalogChangeEventArgs e);
    public void Refresh();
    public virtual string ToString();
}
public abstract class System.ComponentModel.Composition.Hosting.ExportProvider : object {
    public void add_ExportsChanged(EventHandler`1<ExportsChangeEventArgs> value);
    public void remove_ExportsChanged(EventHandler`1<ExportsChangeEventArgs> value);
    public void add_ExportsChanging(EventHandler`1<ExportsChangeEventArgs> value);
    public void remove_ExportsChanging(EventHandler`1<ExportsChangeEventArgs> value);
    public T GetExportedValueOrDefault();
    public T GetExportedValueOrDefault(string contractName);
    public IEnumerable`1<T> GetExportedValues();
    public IEnumerable`1<T> GetExportedValues(string contractName);
    public T GetExportedValue();
    public T GetExportedValue(string contractName);
    public IEnumerable`1<Export> GetExports(ImportDefinition definition);
    public IEnumerable`1<Export> GetExports(ImportDefinition definition, AtomicComposition atomicComposition);
    public IEnumerable`1<Lazy`2<object, object>> GetExports(Type type, Type metadataViewType, string contractName);
    protected abstract virtual IEnumerable`1<Export> GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition);
    public IEnumerable`1<Lazy`1<T>> GetExports();
    public IEnumerable`1<Lazy`1<T>> GetExports(string contractName);
    public IEnumerable`1<Lazy`2<T, TMetadataView>> GetExports();
    public IEnumerable`1<Lazy`2<T, TMetadataView>> GetExports(string contractName);
    public Lazy`1<T> GetExport();
    public Lazy`1<T> GetExport(string contractName);
    public Lazy`2<T, TMetadataView> GetExport();
    public Lazy`2<T, TMetadataView> GetExport(string contractName);
    protected virtual void OnExportsChanged(ExportsChangeEventArgs e);
    protected virtual void OnExportsChanging(ExportsChangeEventArgs e);
    public bool TryGetExports(ImportDefinition definition, AtomicComposition atomicComposition, IEnumerable`1& exports);
}
public class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs : EventArgs {
    public IEnumerable`1<ExportDefinition> AddedExports { get; }
    public AtomicComposition AtomicComposition { get; }
    public IEnumerable`1<string> ChangedContractNames { get; }
    public IEnumerable`1<ExportDefinition> RemovedExports { get; }
    public ExportsChangeEventArgs(IEnumerable`1<ExportDefinition> addedExports, IEnumerable`1<ExportDefinition> removedExports, AtomicComposition atomicComposition);
    public IEnumerable`1<ExportDefinition> get_AddedExports();
    public AtomicComposition get_AtomicComposition();
    public IEnumerable`1<string> get_ChangedContractNames();
    public IEnumerable`1<ExportDefinition> get_RemovedExports();
}
public class System.ComponentModel.Composition.Hosting.FilteredCatalog : ComposablePartCatalog {
    public FilteredCatalog Complement { get; }
    public FilteredCatalog(ComposablePartCatalog catalog, Func`2<ComposablePartDefinition, bool> filter);
    public FilteredCatalog get_Complement();
    public sealed virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    public sealed virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    public FilteredCatalog IncludeDependencies();
    public FilteredCatalog IncludeDependencies(Func`2<ImportDefinition, bool> importFilter);
    public FilteredCatalog IncludeDependents();
    public FilteredCatalog IncludeDependents(Func`2<ImportDefinition, bool> importFilter);
    protected virtual void OnChanged(ComposablePartCatalogChangeEventArgs e);
    protected virtual void OnChanging(ComposablePartCatalogChangeEventArgs e);
}
public class System.ComponentModel.Composition.Hosting.ImportEngine : object {
    public ImportEngine(ExportProvider sourceProvider);
    public ImportEngine(ExportProvider sourceProvider, bool isThreadSafe);
    public ImportEngine(ExportProvider sourceProvider, CompositionOptions compositionOptions);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void PreviewImports(ComposablePart part, AtomicComposition atomicComposition);
    public void ReleaseImports(ComposablePart part, AtomicComposition atomicComposition);
    public void SatisfyImports(ComposablePart part);
    public sealed virtual void SatisfyImportsOnce(ComposablePart part);
}
public interface System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changing(EventHandler`1<ComposablePartCatalogChangeEventArgs> value);
}
[ExtensionAttribute]
public static class System.ComponentModel.Composition.Hosting.ScopingExtensions : object {
    [ExtensionAttribute]
public static bool ContainsPartMetadataWithKey(ComposablePartDefinition part, string key);
    [ExtensionAttribute]
public static bool ContainsPartMetadata(ComposablePartDefinition part, string key, T value);
    [ExtensionAttribute]
public static bool Exports(ComposablePartDefinition part, string contractName);
    [ExtensionAttribute]
public static FilteredCatalog Filter(ComposablePartCatalog catalog, Func`2<ComposablePartDefinition, bool> filter);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, string contractName);
    [ExtensionAttribute]
public static bool Imports(ComposablePartDefinition part, string contractName, ImportCardinality importCardinality);
}
public class System.ComponentModel.Composition.Hosting.TypeCatalog : ComposablePartCatalog {
    private string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    private ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    public TypeCatalog(IEnumerable`1<Type> types);
    public TypeCatalog(IEnumerable`1<Type> types, ICompositionElement definitionOrigin);
    public TypeCatalog(IEnumerable`1<Type> types, ReflectionContext reflectionContext);
    public TypeCatalog(IEnumerable`1<Type> types, ReflectionContext reflectionContext, ICompositionElement definitionOrigin);
    public TypeCatalog(Type[] types);
    private sealed virtual override string System.ComponentModel.Composition.Primitives.ICompositionElement.get_DisplayName();
    private sealed virtual override ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.get_Origin();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual string ToString();
}
public interface System.ComponentModel.Composition.ICompositionService {
    public abstract virtual void SatisfyImportsOnce(ComposablePart part);
}
[AttributeUsageAttribute("2432")]
public class System.ComponentModel.Composition.ImportAttribute : Attribute {
    public bool AllowDefault { get; public set; }
    public bool AllowRecomposition { get; public set; }
    public string ContractName { get; }
    public Type ContractType { get; }
    public CreationPolicy RequiredCreationPolicy { get; public set; }
    public ImportSource Source { get; public set; }
    public ImportAttribute(string contractName);
    public ImportAttribute(string contractName, Type contractType);
    public ImportAttribute(Type contractType);
    public bool get_AllowDefault();
    public void set_AllowDefault(bool value);
    public bool get_AllowRecomposition();
    public void set_AllowRecomposition(bool value);
    public string get_ContractName();
    public Type get_ContractType();
    public CreationPolicy get_RequiredCreationPolicy();
    public void set_RequiredCreationPolicy(CreationPolicy value);
    public ImportSource get_Source();
    public void set_Source(ImportSource value);
}
public class System.ComponentModel.Composition.ImportCardinalityMismatchException : Exception {
    protected ImportCardinalityMismatchException(SerializationInfo info, StreamingContext context);
    public ImportCardinalityMismatchException(string message);
    public ImportCardinalityMismatchException(string message, Exception innerException);
}
[AttributeUsageAttribute("32")]
public class System.ComponentModel.Composition.ImportingConstructorAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
public class System.ComponentModel.Composition.ImportManyAttribute : Attribute {
    public bool AllowRecomposition { get; public set; }
    public string ContractName { get; }
    public Type ContractType { get; }
    public CreationPolicy RequiredCreationPolicy { get; public set; }
    public ImportSource Source { get; public set; }
    public ImportManyAttribute(string contractName);
    public ImportManyAttribute(string contractName, Type contractType);
    public ImportManyAttribute(Type contractType);
    public bool get_AllowRecomposition();
    public void set_AllowRecomposition(bool value);
    public string get_ContractName();
    public Type get_ContractType();
    public CreationPolicy get_RequiredCreationPolicy();
    public void set_RequiredCreationPolicy(CreationPolicy value);
    public ImportSource get_Source();
    public void set_Source(ImportSource value);
}
public enum System.ComponentModel.Composition.ImportSource : Enum {
    public int value__;
    public static ImportSource Any;
    public static ImportSource Local;
    public static ImportSource NonLocal;
}
[AttributeUsageAttribute("1028")]
public class System.ComponentModel.Composition.InheritedExportAttribute : ExportAttribute {
    public InheritedExportAttribute(string contractName);
    public InheritedExportAttribute(string contractName, Type contractType);
    public InheritedExportAttribute(Type contractType);
}
public interface System.ComponentModel.Composition.IPartImportsSatisfiedNotification {
    public abstract virtual void OnImportsSatisfied();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Composition.MetadataAttributeAttribute : Attribute {
}
[AttributeUsageAttribute("1024")]
public class System.ComponentModel.Composition.MetadataViewImplementationAttribute : Attribute {
    public Type ImplementationType { get; }
    public MetadataViewImplementationAttribute(Type implementationType);
    public Type get_ImplementationType();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Composition.PartCreationPolicyAttribute : Attribute {
    public CreationPolicy CreationPolicy { get; }
    public PartCreationPolicyAttribute(CreationPolicy creationPolicy);
    public CreationPolicy get_CreationPolicy();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Composition.PartMetadataAttribute : Attribute {
    public string Name { get; }
    public object Value { get; }
    public PartMetadataAttribute(string name, object value);
    public string get_Name();
    public object get_Value();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Composition.PartNotDiscoverableAttribute : Attribute {
}
public abstract class System.ComponentModel.Composition.Primitives.ComposablePart : object {
    public IEnumerable`1<ExportDefinition> ExportDefinitions { get; }
    public IEnumerable`1<ImportDefinition> ImportDefinitions { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public abstract virtual IEnumerable`1<ExportDefinition> get_ExportDefinitions();
    public abstract virtual IEnumerable`1<ImportDefinition> get_ImportDefinitions();
    public virtual IDictionary`2<string, object> get_Metadata();
    public virtual void Activate();
    public abstract virtual object GetExportedValue(ExportDefinition definition);
    public abstract virtual void SetImport(ImportDefinition definition, IEnumerable`1<Export> exports);
}
public abstract class System.ComponentModel.Composition.Primitives.ComposablePartCatalog : object {
    [EditorBrowsableAttribute("1")]
public IQueryable`1<ComposablePartDefinition> Parts { get; }
    public virtual IQueryable`1<ComposablePartDefinition> get_Parts();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual IEnumerator`1<ComposablePartDefinition> GetEnumerator();
    public virtual IEnumerable`1<Tuple`2<ComposablePartDefinition, ExportDefinition>> GetExports(ImportDefinition definition);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.ComponentModel.Composition.Primitives.ComposablePartDefinition : object {
    public IEnumerable`1<ExportDefinition> ExportDefinitions { get; }
    public IEnumerable`1<ImportDefinition> ImportDefinitions { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public abstract virtual IEnumerable`1<ExportDefinition> get_ExportDefinitions();
    public abstract virtual IEnumerable`1<ImportDefinition> get_ImportDefinitions();
    public virtual IDictionary`2<string, object> get_Metadata();
    public abstract virtual ComposablePart CreatePart();
}
public class System.ComponentModel.Composition.Primitives.ComposablePartException : Exception {
    public ICompositionElement Element { get; }
    public ComposablePartException(string message);
    public ComposablePartException(string message, ICompositionElement element);
    public ComposablePartException(string message, ICompositionElement element, Exception innerException);
    public ComposablePartException(string message, Exception innerException);
    public ICompositionElement get_Element();
}
public class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition : ImportDefinition {
    public Expression`1<Func`2<ExportDefinition, bool>> Constraint { get; }
    public CreationPolicy RequiredCreationPolicy { get; }
    public IEnumerable`1<KeyValuePair`2<string, Type>> RequiredMetadata { get; }
    public string RequiredTypeIdentity { get; }
    public ContractBasedImportDefinition(string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite, CreationPolicy requiredCreationPolicy);
    public ContractBasedImportDefinition(string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite, CreationPolicy requiredCreationPolicy, IDictionary`2<string, object> metadata);
    public virtual Expression`1<Func`2<ExportDefinition, bool>> get_Constraint();
    public virtual CreationPolicy get_RequiredCreationPolicy();
    public virtual IEnumerable`1<KeyValuePair`2<string, Type>> get_RequiredMetadata();
    public virtual string get_RequiredTypeIdentity();
    public virtual bool IsConstraintSatisfiedBy(ExportDefinition exportDefinition);
    public virtual string ToString();
}
public class System.ComponentModel.Composition.Primitives.Export : object {
    public ExportDefinition Definition { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public object Value { get; }
    public Export(ExportDefinition definition, Func`1<object> exportedValueGetter);
    public Export(string contractName, IDictionary`2<string, object> metadata, Func`1<object> exportedValueGetter);
    public Export(string contractName, Func`1<object> exportedValueGetter);
    public virtual ExportDefinition get_Definition();
    public IDictionary`2<string, object> get_Metadata();
    public object get_Value();
    protected virtual object GetExportedValueCore();
}
public class System.ComponentModel.Composition.Primitives.ExportDefinition : object {
    public string ContractName { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public ExportDefinition(string contractName, IDictionary`2<string, object> metadata);
    public virtual string get_ContractName();
    public virtual IDictionary`2<string, object> get_Metadata();
    public virtual string ToString();
}
public class System.ComponentModel.Composition.Primitives.ExportedDelegate : object {
    public ExportedDelegate(object instance, MethodInfo method);
    public virtual Delegate CreateDelegate(Type delegateType);
}
public interface System.ComponentModel.Composition.Primitives.ICompositionElement {
    public string DisplayName { get; }
    public ICompositionElement Origin { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual ICompositionElement get_Origin();
}
public enum System.ComponentModel.Composition.Primitives.ImportCardinality : Enum {
    public int value__;
    public static ImportCardinality ExactlyOne;
    public static ImportCardinality ZeroOrMore;
    public static ImportCardinality ZeroOrOne;
}
public class System.ComponentModel.Composition.Primitives.ImportDefinition : object {
    public ImportCardinality Cardinality { get; }
    public Expression`1<Func`2<ExportDefinition, bool>> Constraint { get; }
    public string ContractName { get; }
    public bool IsPrerequisite { get; }
    public bool IsRecomposable { get; }
    public IDictionary`2<string, object> Metadata { get; }
    public ImportDefinition(Expression`1<Func`2<ExportDefinition, bool>> constraint, string contractName, ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite);
    public ImportDefinition(Expression`1<Func`2<ExportDefinition, bool>> constraint, string contractName, ImportCardinality cardinality, bool isRecomposable, bool isPrerequisite, IDictionary`2<string, object> metadata);
    public virtual ImportCardinality get_Cardinality();
    public virtual Expression`1<Func`2<ExportDefinition, bool>> get_Constraint();
    public virtual string get_ContractName();
    public virtual bool get_IsPrerequisite();
    public virtual bool get_IsRecomposable();
    public virtual IDictionary`2<string, object> get_Metadata();
    public virtual bool IsConstraintSatisfiedBy(ExportDefinition exportDefinition);
    public virtual string ToString();
}
public class System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo : ValueType {
    private object _dummy;
    public MemberTypes MemberType { get; }
    public LazyMemberInfo(MemberInfo member);
    public LazyMemberInfo(MemberTypes memberType, Func`1<MemberInfo[]> accessorsCreator);
    public LazyMemberInfo(MemberTypes memberType, MemberInfo[] accessors);
    public MemberTypes get_MemberType();
    public virtual bool Equals(object obj);
    public MemberInfo[] GetAccessors();
    public virtual int GetHashCode();
    public static bool op_Equality(LazyMemberInfo left, LazyMemberInfo right);
    public static bool op_Inequality(LazyMemberInfo left, LazyMemberInfo right);
}
public static class System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices : object {
    public static ExportDefinition CreateExportDefinition(LazyMemberInfo exportingMember, string contractName, Lazy`1<IDictionary`2<string, object>> metadata, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, CreationPolicy requiredCreationPolicy, IDictionary`2<string, object> metadata, bool isExportFactory, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, CreationPolicy requiredCreationPolicy, IDictionary`2<string, object> metadata, bool isExportFactory, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, bool isRecomposable, CreationPolicy requiredCreationPolicy, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(Lazy`1<ParameterInfo> parameter, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, CreationPolicy requiredCreationPolicy, IDictionary`2<string, object> metadata, bool isExportFactory, ICompositionElement origin);
    public static ContractBasedImportDefinition CreateImportDefinition(Lazy`1<ParameterInfo> parameter, string contractName, string requiredTypeIdentity, IEnumerable`1<KeyValuePair`2<string, Type>> requiredMetadata, ImportCardinality cardinality, CreationPolicy requiredCreationPolicy, ICompositionElement origin);
    public static ComposablePartDefinition CreatePartDefinition(Lazy`1<Type> partType, bool isDisposalRequired, Lazy`1<IEnumerable`1<ImportDefinition>> imports, Lazy`1<IEnumerable`1<ExportDefinition>> exports, Lazy`1<IDictionary`2<string, object>> metadata, ICompositionElement origin);
    public static ContractBasedImportDefinition GetExportFactoryProductImportDefinition(ImportDefinition importDefinition);
    public static LazyMemberInfo GetExportingMember(ExportDefinition exportDefinition);
    public static LazyMemberInfo GetImportingMember(ImportDefinition importDefinition);
    public static Lazy`1<ParameterInfo> GetImportingParameter(ImportDefinition importDefinition);
    public static Lazy`1<Type> GetPartType(ComposablePartDefinition partDefinition);
    public static bool IsDisposalRequired(ComposablePartDefinition partDefinition);
    public static bool IsExportFactoryImportDefinition(ImportDefinition importDefinition);
    public static bool IsImportingParameter(ImportDefinition importDefinition);
    public static bool TryMakeGenericPartDefinition(ComposablePartDefinition partDefinition, IEnumerable`1<Type> genericParameters, ComposablePartDefinition& specialization);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
