internal static class FxResources.System.ComponentModel.TypeConverter.SR : object {
}
public class System.ComponentModel.ArrayConverter : CollectionConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public abstract class System.ComponentModel.BaseNumberConverter : TypeConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal abstract virtual Type get_TargetType();
    internal abstract virtual object FromString(string value, int radix);
    internal abstract virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal abstract virtual object FromString(string value, CultureInfo culture);
    internal virtual Exception FromStringError(string failedText, Exception innerException);
    internal abstract virtual string ToString(object value, NumberFormatInfo formatInfo);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
}
public class System.ComponentModel.BooleanConverter : TypeConverter {
    private static StandardValuesCollection modreq(System.Runtime.CompilerServices.IsVolatile) s_values;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.ByteConverter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.CharConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class System.ComponentModel.CollectionConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.DateTimeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DateTimeOffsetConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DecimalConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.DoubleConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.EnumConverter : TypeConverter {
    private StandardValuesCollection _values;
    private Type _type;
    protected Type EnumType { get; }
    protected StandardValuesCollection Values { get; protected set; }
    public EnumConverter(Type type);
    protected Type get_EnumType();
    protected StandardValuesCollection get_Values();
    protected void set_Values(StandardValuesCollection value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.GuidConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.Int16Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.Int32Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.Int64Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public interface System.ComponentModel.ITypeDescriptorContext {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public abstract virtual IContainer get_Container();
    public abstract virtual object get_Instance();
    public abstract virtual PropertyDescriptor get_PropertyDescriptor();
    public abstract virtual bool OnComponentChanging();
    public abstract virtual void OnComponentChanged();
}
public class System.ComponentModel.MultilineStringConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.NullableConverter : TypeConverter {
    private Type _nullableType;
    private Type _simpleType;
    private TypeConverter _simpleTypeConverter;
    public Type NullableType { get; }
    public Type UnderlyingType { get; }
    public TypeConverter UnderlyingTypeConverter { get; }
    public NullableConverter(Type type);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    public Type get_NullableType();
    public Type get_UnderlyingType();
    public TypeConverter get_UnderlyingTypeConverter();
}
public abstract class System.ComponentModel.PropertyDescriptor : object {
}
internal class System.ComponentModel.ReflectTypeDescriptionProvider : object {
    private static Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_intrinsicConverters;
    private static object s_intrinsicNullableKey;
    private static object s_syncObject;
    private static Dictionary`2<object, object> IntrinsicTypeConverters { get; }
    private static ReflectTypeDescriptionProvider();
    private static Dictionary`2<object, object> get_IntrinsicTypeConverters();
    private static object CreateInstance(Type objectType, Type parameterType, Boolean& noTypeConstructor);
    private static TypeConverterAttribute GetTypeConverterAttributeIfAny(Type type);
    internal static TypeConverter GetConverter(Type type);
    private static Type GetTypeFromName(string typeName, Type type);
    private static object SearchIntrinsicTable(Type callingType);
    private static object SearchIntrinsicTable_ExactTypeMatch(Type callingType);
}
public class System.ComponentModel.SByteConverter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.SingleConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.StringConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class System.ComponentModel.TimeSpanConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.TypeConverter : object {
    public bool CanConvertFrom(Type sourceType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public bool CanConvertTo(Type destinationType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public object ConvertFrom(object value);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public object ConvertFromInvariantString(string text);
    public object ConvertFromInvariantString(ITypeDescriptorContext context, string text);
    public object ConvertFromString(string text);
    public object ConvertFromString(ITypeDescriptorContext context, string text);
    public object ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, string text);
    public object ConvertTo(object value, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public string ConvertToInvariantString(object value);
    public string ConvertToInvariantString(ITypeDescriptorContext context, object value);
    public string ConvertToString(object value);
    public string ConvertToString(ITypeDescriptorContext context, object value);
    public string ConvertToString(ITypeDescriptorContext context, CultureInfo culture, object value);
    public object CreateInstance(IDictionary propertyValues);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    protected Exception GetConvertFromException(object value);
    protected Exception GetConvertToException(object value, Type destinationType);
    public bool GetCreateInstanceSupported();
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public bool GetPropertiesSupported();
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public ICollection GetStandardValues();
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public bool GetStandardValuesExclusive();
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public bool GetStandardValuesSupported();
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public bool IsValid(object value);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.TypeConverterAttribute : Attribute {
    private string _typeName;
    public static TypeConverterAttribute Default;
    public string ConverterTypeName { get; }
    public TypeConverterAttribute(Type type);
    public TypeConverterAttribute(string typeName);
    private static TypeConverterAttribute();
    public string get_ConverterTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.ComponentModel.TypeDescriptor : object {
    public static TypeConverter GetConverter(Type type);
}
public abstract class System.ComponentModel.TypeListConverter : TypeConverter {
    private Type[] _types;
    private StandardValuesCollection _values;
    protected TypeListConverter(Type[] types);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.UInt16Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.UInt32Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.UInt64Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Array { get; }
    internal static string Collection { get; }
    internal static string ConvertFromException { get; }
    internal static string ConvertInvalidPrimitive { get; }
    internal static string ConvertToException { get; }
    internal static string EnumConverterInvalidValue { get; }
    internal static string ErrorInvalidEventHandler { get; }
    internal static string ErrorInvalidEventType { get; }
    internal static string ErrorInvalidPropertyType { get; }
    internal static string ErrorMissingEventAccessors { get; }
    internal static string ErrorMissingPropertyAccessors { get; }
    internal static string ErrorPropertyAccessorException { get; }
    internal static string InvalidMemberName { get; }
    internal static string InvalidNullArgument { get; }
    internal static string MetaExtenderName { get; }
    internal static string none { get; }
    internal static string Null { get; }
    internal static string NullableConverterBadCtorArg { get; }
    internal static string Text { get; }
    internal static string TypeDescriptorAlreadyAssociated { get; }
    internal static string TypeDescriptorArgsCountMismatch { get; }
    internal static string TypeDescriptorProviderError { get; }
    internal static string TypeDescriptorUnsupportedRemoteObject { get; }
    internal static string TypeDescriptorExpectedElementType { get; }
    internal static string TypeDescriptorSameAssociation { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Array();
    internal static string get_Collection();
    internal static string get_ConvertFromException();
    internal static string get_ConvertInvalidPrimitive();
    internal static string get_ConvertToException();
    internal static string get_EnumConverterInvalidValue();
    internal static string get_ErrorInvalidEventHandler();
    internal static string get_ErrorInvalidEventType();
    internal static string get_ErrorInvalidPropertyType();
    internal static string get_ErrorMissingEventAccessors();
    internal static string get_ErrorMissingPropertyAccessors();
    internal static string get_ErrorPropertyAccessorException();
    internal static string get_InvalidMemberName();
    internal static string get_InvalidNullArgument();
    internal static string get_MetaExtenderName();
    internal static string get_none();
    internal static string get_Null();
    internal static string get_NullableConverterBadCtorArg();
    internal static string get_Text();
    internal static string get_TypeDescriptorAlreadyAssociated();
    internal static string get_TypeDescriptorArgsCountMismatch();
    internal static string get_TypeDescriptorProviderError();
    internal static string get_TypeDescriptorUnsupportedRemoteObject();
    internal static string get_TypeDescriptorExpectedElementType();
    internal static string get_TypeDescriptorSameAssociation();
    internal static Type get_ResourceType();
}
public class System.UriTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
