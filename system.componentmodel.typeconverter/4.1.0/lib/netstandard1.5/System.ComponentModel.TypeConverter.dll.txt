internal static class FxResources.System.ComponentModel.TypeConverter.SR : object {
}
public class System.ComponentModel.ArrayConverter : CollectionConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.AttributeCollection : object {
    public static AttributeCollection Empty;
    private static Hashtable s_defaultAttributes;
    private Attribute[] _attributes;
    private static object s_internalSyncObject;
    private static int FOUND_TYPES_LIMIT;
    private AttributeEntry[] _foundAttributeTypes;
    private int _index;
    protected Attribute[] Attributes { get; }
    public int Count { get; }
    public Attribute Item { get; }
    public Attribute Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public AttributeCollection(Attribute[] attributes);
    private static AttributeCollection();
    public static AttributeCollection FromExisting(AttributeCollection existing, Attribute[] newAttributes);
    protected virtual Attribute[] get_Attributes();
    public sealed virtual int get_Count();
    public virtual Attribute get_Item(int index);
    public virtual Attribute get_Item(Type attributeType);
    public bool Contains(Attribute attribute);
    public bool Contains(Attribute[] attributes);
    protected Attribute GetDefaultAttribute(Type attributeType);
    public sealed virtual IEnumerator GetEnumerator();
    public bool Matches(Attribute attribute);
    public bool Matches(Attribute[] attributes);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AttributeProviderAttribute : Attribute {
    private string _typeName;
    private string _propertyName;
    public string TypeName { get; }
    public string PropertyName { get; }
    public AttributeProviderAttribute(string typeName);
    public AttributeProviderAttribute(string typeName, string propertyName);
    public AttributeProviderAttribute(Type type);
    public string get_TypeName();
    public string get_PropertyName();
}
public abstract class System.ComponentModel.BaseNumberConverter : TypeConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal abstract virtual Type get_TargetType();
    internal abstract virtual object FromString(string value, int radix);
    internal abstract virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal abstract virtual object FromString(string value, CultureInfo culture);
    internal virtual Exception FromStringError(string failedText, Exception innerException);
    internal abstract virtual string ToString(object value, NumberFormatInfo formatInfo);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
}
public class System.ComponentModel.BooleanConverter : TypeConverter {
    private static StandardValuesCollection modreq(System.Runtime.CompilerServices.IsVolatile) s_values;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.ByteConverter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.CancelEventHandler : MulticastDelegate {
    public CancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.CharConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public enum System.ComponentModel.CollectionChangeAction : Enum {
    public int value__;
    public static CollectionChangeAction Add;
    public static CollectionChangeAction Remove;
    public static CollectionChangeAction Refresh;
}
public class System.ComponentModel.CollectionChangeEventArgs : EventArgs {
    private CollectionChangeAction _action;
    private object _element;
    public CollectionChangeAction Action { get; }
    public object Element { get; }
    public CollectionChangeEventArgs(CollectionChangeAction action, object element);
    public virtual CollectionChangeAction get_Action();
    public virtual object get_Element();
}
public class System.ComponentModel.CollectionChangeEventHandler : MulticastDelegate {
    public CollectionChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CollectionChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CollectionChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.CollectionConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[ExtensionAttribute]
internal static class System.ComponentModel.ComponentModelExtensions : object {
    private static Dictionary`2<Type, Func`2<Attribute, object>> s_typeId;
    private static Dictionary`2<Type, Func`2<Attribute, bool>> s_defaultAttributes;
    private static ComponentModelExtensions();
    [ExtensionAttribute]
public static bool IsDefaultAttribute(Attribute attribute);
    [ExtensionAttribute]
public static object GetTypeId(Attribute attribute);
    [ExtensionAttribute]
public static bool Match(Attribute attribute, object obj);
}
public abstract class System.ComponentModel.CustomTypeDescriptor : object {
    private ICustomTypeDescriptor _parent;
    protected CustomTypeDescriptor(ICustomTypeDescriptor parent);
    public virtual AttributeCollection GetAttributes();
    public virtual string GetClassName();
    public virtual string GetComponentName();
    public virtual TypeConverter GetConverter();
    public virtual EventDescriptor GetDefaultEvent();
    public virtual PropertyDescriptor GetDefaultProperty();
    public virtual object GetEditor(Type editorBaseType);
    public virtual EventDescriptorCollection GetEvents();
    public virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public virtual object GetPropertyOwner(PropertyDescriptor pd);
}
public class System.ComponentModel.DateTimeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DateTimeOffsetConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DecimalConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.DefaultEventAttribute : Attribute {
    private string _name;
    public static DefaultEventAttribute Default;
    public string Name { get; }
    public DefaultEventAttribute(string name);
    private static DefaultEventAttribute();
    public string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.DefaultPropertyAttribute : Attribute {
    private string _name;
    public static DefaultPropertyAttribute Default;
    public string Name { get; }
    public DefaultPropertyAttribute(string name);
    private static DefaultPropertyAttribute();
    public string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.ComponentModel.DelegatingTypeDescriptionProvider : TypeDescriptionProvider {
    private Type _type;
    internal TypeDescriptionProvider Provider { get; }
    internal DelegatingTypeDescriptionProvider(Type type);
    internal TypeDescriptionProvider get_Provider();
    public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    public virtual IDictionary GetCache(object instance);
    public virtual string GetFullComponentName(object component);
    public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance);
    protected internal virtual IExtenderProvider[] GetExtenderProviders(object instance);
    public virtual Type GetReflectionType(Type objectType, object instance);
    public virtual Type GetRuntimeType(Type objectType);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
    public virtual bool IsSupportedType(Type type);
}
public interface System.ComponentModel.Design.IDictionaryService {
    public abstract virtual object GetKey(object value);
    public abstract virtual object GetValue(object key);
    public abstract virtual void SetValue(object key, object value);
}
public interface System.ComponentModel.Design.IExtenderListService {
    public abstract virtual IExtenderProvider[] GetExtenderProviders();
}
public interface System.ComponentModel.Design.ITypeDescriptorFilterService {
    public abstract virtual bool FilterAttributes(IComponent component, IDictionary attributes);
    public abstract virtual bool FilterEvents(IComponent component, IDictionary events);
    public abstract virtual bool FilterProperties(IComponent component, IDictionary properties);
}
public class System.ComponentModel.DoubleConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.EnumConverter : TypeConverter {
    private StandardValuesCollection _values;
    private Type _type;
    protected Type EnumType { get; }
    protected StandardValuesCollection Values { get; protected set; }
    protected IComparer Comparer { get; }
    public EnumConverter(Type type);
    protected Type get_EnumType();
    protected StandardValuesCollection get_Values();
    protected void set_Values(StandardValuesCollection value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    protected virtual IComparer get_Comparer();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
public abstract class System.ComponentModel.EventDescriptor : MemberDescriptor {
    public Type ComponentType { get; }
    public Type EventType { get; }
    public bool IsMulticast { get; }
    protected EventDescriptor(string name, Attribute[] attrs);
    protected EventDescriptor(MemberDescriptor descr);
    protected EventDescriptor(MemberDescriptor descr, Attribute[] attrs);
    public abstract virtual Type get_ComponentType();
    public abstract virtual Type get_EventType();
    public abstract virtual bool get_IsMulticast();
    public abstract virtual void AddEventHandler(object component, Delegate value);
    public abstract virtual void RemoveEventHandler(object component, Delegate value);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.EventDescriptorCollection : object {
    private EventDescriptor[] _events;
    private String[] _namedSort;
    private IComparer _comparer;
    private bool _eventsOwned;
    private bool _needSort;
    private int _eventCount;
    private bool _readOnly;
    public static EventDescriptorCollection Empty;
    public int Count { get; }
    public EventDescriptor Item { get; }
    public EventDescriptor Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public EventDescriptorCollection(EventDescriptor[] events);
    public EventDescriptorCollection(EventDescriptor[] events, bool readOnly);
    private EventDescriptorCollection(EventDescriptor[] events, int eventCount, String[] namedSort, IComparer comparer);
    private static EventDescriptorCollection();
    public sealed virtual int get_Count();
    public virtual EventDescriptor get_Item(int index);
    public virtual EventDescriptor get_Item(string name);
    public int Add(EventDescriptor value);
    public sealed virtual void Clear();
    public bool Contains(EventDescriptor value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private void EnsureEventsOwned();
    private void EnsureSize(int sizeNeeded);
    public virtual EventDescriptor Find(string name, bool ignoreCase);
    public int IndexOf(EventDescriptor value);
    public void Insert(int index, EventDescriptor value);
    public void Remove(EventDescriptor value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator GetEnumerator();
    public virtual EventDescriptorCollection Sort();
    public virtual EventDescriptorCollection Sort(String[] names);
    public virtual EventDescriptorCollection Sort(String[] names, IComparer comparer);
    public virtual EventDescriptorCollection Sort(IComparer comparer);
    protected void InternalSort(String[] names);
    protected void InternalSort(IComparer sorter);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
}
internal class System.ComponentModel.ExtendedPropertyDescriptor : PropertyDescriptor {
    private ReflectPropertyDescriptor _extenderInfo;
    private IExtenderProvider _provider;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public string DisplayName { get; }
    public ExtendedPropertyDescriptor(ReflectPropertyDescriptor extenderInfo, Type receiverType, IExtenderProvider provider, Attribute[] attributes);
    public ExtendedPropertyDescriptor(PropertyDescriptor extender, Attribute[] attributes);
    public virtual bool CanResetValue(object comp);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual string get_DisplayName();
    public virtual object GetValue(object comp);
    public virtual void ResetValue(object comp);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object comp);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.ExtenderProvidedPropertyAttribute : Attribute {
    private PropertyDescriptor _extenderProperty;
    private IExtenderProvider _provider;
    private Type _receiverType;
    public PropertyDescriptor ExtenderProperty { get; }
    public IExtenderProvider Provider { get; }
    public Type ReceiverType { get; }
    internal static ExtenderProvidedPropertyAttribute Create(PropertyDescriptor extenderProperty, Type receiverType, IExtenderProvider provider);
    public PropertyDescriptor get_ExtenderProperty();
    public IExtenderProvider get_Provider();
    public Type get_ReceiverType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.ComponentModel.GuidConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.HandledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    public HandledEventArgs(bool defaultHandledValue);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.ComponentModel.HandledEventHandler : MulticastDelegate {
    public HandledEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, HandledEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, HandledEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.ComponentModel.ICustomTypeDescriptor {
    public abstract virtual AttributeCollection GetAttributes();
    public abstract virtual string GetClassName();
    public abstract virtual string GetComponentName();
    public abstract virtual TypeConverter GetConverter();
    public abstract virtual EventDescriptor GetDefaultEvent();
    public abstract virtual PropertyDescriptor GetDefaultProperty();
    public abstract virtual object GetEditor(Type editorBaseType);
    public abstract virtual EventDescriptorCollection GetEvents();
    public abstract virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public abstract virtual PropertyDescriptorCollection GetProperties();
    public abstract virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public abstract virtual object GetPropertyOwner(PropertyDescriptor pd);
}
public interface System.ComponentModel.IExtenderProvider {
    public abstract virtual bool CanExtend(object extendee);
}
[MergablePropertyAttribute("False")]
public interface System.ComponentModel.IListSource {
    public bool ContainsListCollection { get; }
    public abstract virtual bool get_ContainsListCollection();
    public abstract virtual IList GetList();
}
public class System.ComponentModel.Int16Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.Int32Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.Int64Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.InvalidAsynchronousStateException : ArgumentException {
    public InvalidAsynchronousStateException(string message);
    public InvalidAsynchronousStateException(string message, Exception innerException);
}
public interface System.ComponentModel.ITypeDescriptorContext {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public abstract virtual IContainer get_Container();
    public abstract virtual object get_Instance();
    public abstract virtual PropertyDescriptor get_PropertyDescriptor();
    public abstract virtual bool OnComponentChanging();
    public abstract virtual void OnComponentChanged();
}
public interface System.ComponentModel.ITypedList {
    public abstract virtual string GetListName(PropertyDescriptor[] listAccessors);
    public abstract virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
}
public abstract class System.ComponentModel.MemberDescriptor : object {
    private string _name;
    private string _displayName;
    private int _nameHash;
    private AttributeCollection _attributeCollection;
    private Attribute[] _attributes;
    private Attribute[] _originalAttributes;
    private bool _attributesFiltered;
    private bool _attributesFilled;
    private int _metadataVersion;
    private string _category;
    private string _description;
    private object _lockCookie;
    protected Attribute[] AttributeArray { get; protected set; }
    public AttributeCollection Attributes { get; }
    public string Category { get; }
    public string Description { get; }
    public bool IsBrowsable { get; }
    public string Name { get; }
    protected int NameHashCode { get; }
    public bool DesignTimeOnly { get; }
    public string DisplayName { get; }
    protected MemberDescriptor(string name);
    protected MemberDescriptor(string name, Attribute[] attributes);
    protected MemberDescriptor(MemberDescriptor descr);
    protected MemberDescriptor(MemberDescriptor oldMemberDescriptor, Attribute[] newAttributes);
    protected virtual Attribute[] get_AttributeArray();
    protected virtual void set_AttributeArray(Attribute[] value);
    public virtual AttributeCollection get_Attributes();
    public virtual string get_Category();
    public virtual string get_Description();
    public virtual bool get_IsBrowsable();
    public virtual string get_Name();
    protected virtual int get_NameHashCode();
    public virtual bool get_DesignTimeOnly();
    public virtual string get_DisplayName();
    private void CheckAttributesValid();
    protected virtual AttributeCollection CreateAttributeCollection();
    public virtual bool Equals(object obj);
    protected virtual void FillAttributes(IList attributeList);
    private void FilterAttributesIfNeeded();
    protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType);
    protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType, bool publicOnly);
    public virtual int GetHashCode();
    protected virtual object GetInvocationTarget(Type type, object instance);
    protected static ISite GetSite(object component);
}
public class System.ComponentModel.MultilineStringConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.NullableConverter : TypeConverter {
    private Type _nullableType;
    private Type _simpleType;
    private TypeConverter _simpleTypeConverter;
    public Type NullableType { get; }
    public Type UnderlyingType { get; }
    public TypeConverter UnderlyingTypeConverter { get; }
    public NullableConverter(Type type);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    public Type get_NullableType();
    public Type get_UnderlyingType();
    public TypeConverter get_UnderlyingTypeConverter();
}
public abstract class System.ComponentModel.PropertyDescriptor : MemberDescriptor {
    private TypeConverter _converter;
    private Hashtable _valueChangedHandlers;
    private Object[] _editors;
    private Type[] _editorTypes;
    private int _editorCount;
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    public bool IsLocalizable { get; }
    public bool IsReadOnly { get; }
    public DesignerSerializationVisibility SerializationVisibility { get; }
    public Type PropertyType { get; }
    public bool SupportsChangeEvents { get; }
    protected PropertyDescriptor(string name, Attribute[] attrs);
    protected PropertyDescriptor(MemberDescriptor descr);
    protected PropertyDescriptor(MemberDescriptor descr, Attribute[] attrs);
    public abstract virtual Type get_ComponentType();
    public virtual TypeConverter get_Converter();
    public virtual bool get_IsLocalizable();
    public abstract virtual bool get_IsReadOnly();
    public DesignerSerializationVisibility get_SerializationVisibility();
    public abstract virtual Type get_PropertyType();
    public virtual void AddValueChanged(object component, EventHandler handler);
    public abstract virtual bool CanResetValue(object component);
    public virtual bool Equals(object obj);
    protected object CreateInstance(Type type);
    protected virtual void FillAttributes(IList attributeList);
    public PropertyDescriptorCollection GetChildProperties();
    public PropertyDescriptorCollection GetChildProperties(Attribute[] filter);
    public PropertyDescriptorCollection GetChildProperties(object instance);
    public virtual PropertyDescriptorCollection GetChildProperties(object instance, Attribute[] filter);
    public virtual object GetEditor(Type editorBaseType);
    public virtual int GetHashCode();
    protected virtual object GetInvocationTarget(Type type, object instance);
    protected Type GetTypeFromName(string typeName);
    public abstract virtual object GetValue(object component);
    protected virtual void OnValueChanged(object component, EventArgs e);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
    protected internal EventHandler GetValueChangedHandler(object component);
    public abstract virtual void ResetValue(object component);
    public abstract virtual void SetValue(object component, object value);
    public abstract virtual bool ShouldSerializeValue(object component);
    public virtual bool get_SupportsChangeEvents();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.PropertyDescriptorCollection : object {
    public static PropertyDescriptorCollection Empty;
    private IDictionary _cachedFoundProperties;
    private bool _cachedIgnoreCase;
    private PropertyDescriptor[] _properties;
    private int _propCount;
    private String[] _namedSort;
    private IComparer _comparer;
    private bool _propsOwned;
    private bool _needSort;
    private bool _readOnly;
    private object _internalSyncObject;
    public int Count { get; }
    public PropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public PropertyDescriptorCollection(PropertyDescriptor[] properties);
    public PropertyDescriptorCollection(PropertyDescriptor[] properties, bool readOnly);
    private PropertyDescriptorCollection(PropertyDescriptor[] properties, int propCount, String[] namedSort, IComparer comparer);
    private static PropertyDescriptorCollection();
    public sealed virtual int get_Count();
    public virtual PropertyDescriptor get_Item(int index);
    public virtual PropertyDescriptor get_Item(string name);
    public int Add(PropertyDescriptor value);
    public sealed virtual void Clear();
    public bool Contains(PropertyDescriptor value);
    public sealed virtual void CopyTo(Array array, int index);
    private void EnsurePropsOwned();
    private void EnsureSize(int sizeNeeded);
    public virtual PropertyDescriptor Find(string name, bool ignoreCase);
    public int IndexOf(PropertyDescriptor value);
    public void Insert(int index, PropertyDescriptor value);
    public void Remove(PropertyDescriptor value);
    public sealed virtual void RemoveAt(int index);
    public virtual PropertyDescriptorCollection Sort();
    public virtual PropertyDescriptorCollection Sort(String[] names);
    public virtual PropertyDescriptorCollection Sort(String[] names, IComparer comparer);
    public virtual PropertyDescriptorCollection Sort(IComparer comparer);
    protected void InternalSort(String[] names);
    protected void InternalSort(IComparer sorter);
    public virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.ProvidePropertyAttribute : Attribute {
    private string _propertyName;
    private string _receiverTypeName;
    public string PropertyName { get; }
    public string ReceiverTypeName { get; }
    public ProvidePropertyAttribute(string propertyName, Type receiverType);
    public ProvidePropertyAttribute(string propertyName, string receiverTypeName);
    public string get_PropertyName();
    public string get_ReceiverTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.ComponentModel.ReflectEventDescriptor : EventDescriptor {
    private static Type[] s_argsNone;
    private static object s_noDefault;
    private Type _type;
    private Type _componentClass;
    private MethodInfo _addMethod;
    private MethodInfo _removeMethod;
    private EventInfo _realEvent;
    private bool _filledMethods;
    public Type ComponentType { get; }
    public Type EventType { get; }
    public bool IsMulticast { get; }
    public ReflectEventDescriptor(Type componentClass, string name, Type type, Attribute[] attributes);
    public ReflectEventDescriptor(Type componentClass, EventInfo eventInfo);
    public ReflectEventDescriptor(Type componentType, EventDescriptor oldReflectEventDescriptor, Attribute[] attributes);
    private static ReflectEventDescriptor();
    public virtual Type get_ComponentType();
    public virtual Type get_EventType();
    public virtual bool get_IsMulticast();
    public virtual void AddEventHandler(object component, Delegate value);
    protected virtual void FillAttributes(IList attributes);
    private void FillEventInfoAttribute(EventInfo realEventInfo, IList attributes);
    private void FillMethods();
    private void FillSingleMethodAttribute(MethodInfo realMethodInfo, IList attributes);
    public virtual void RemoveEventHandler(object component, Delegate value);
}
internal class System.ComponentModel.ReflectPropertyDescriptor : PropertyDescriptor {
    private static Type[] s_argsNone;
    private static object s_noValue;
    private static int s_bitDefaultValueQueried;
    private static int s_bitGetQueried;
    private static int s_bitSetQueried;
    private static int s_bitShouldSerializeQueried;
    private static int s_bitResetQueried;
    private static int s_bitChangedQueried;
    private static int s_bitIPropChangedQueried;
    private static int s_bitReadOnlyChecked;
    private static int s_bitAmbientValueQueried;
    private static int s_bitSetOnDemand;
    private BitVector32 _state;
    private Type _componentClass;
    private Type _type;
    private object _defaultValue;
    private object _ambientValue;
    private PropertyInfo _propInfo;
    private MethodInfo _getMethod;
    private MethodInfo _setMethod;
    private MethodInfo _shouldSerializeMethod;
    private MethodInfo _resetMethod;
    private EventDescriptor _realChangedEvent;
    private EventDescriptor _realIPropChangedEvent;
    private Type _receiverType;
    private EventDescriptor ChangedEventValue { get; }
    private EventDescriptor IPropChangedEventValue { get; private set; }
    public Type ComponentType { get; }
    private object DefaultValue { get; }
    private MethodInfo GetMethodValue { get; }
    private bool IsExtender { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    private MethodInfo ResetMethodValue { get; }
    private MethodInfo SetMethodValue { get; }
    private MethodInfo ShouldSerializeMethodValue { get; }
    public bool SupportsChangeEvents { get; }
    public ReflectPropertyDescriptor(Type componentClass, string name, Type type, Attribute[] attributes);
    public ReflectPropertyDescriptor(Type componentClass, string name, Type type, PropertyInfo propInfo, MethodInfo getMethod, MethodInfo setMethod, Attribute[] attrs);
    public ReflectPropertyDescriptor(Type componentClass, string name, Type type, Type receiverType, MethodInfo getMethod, MethodInfo setMethod, Attribute[] attrs);
    public ReflectPropertyDescriptor(Type componentClass, PropertyDescriptor oldReflectPropertyDescriptor, Attribute[] attributes);
    private static ReflectPropertyDescriptor();
    private EventDescriptor get_ChangedEventValue();
    private EventDescriptor get_IPropChangedEventValue();
    private void set_IPropChangedEventValue(EventDescriptor value);
    public virtual Type get_ComponentType();
    private object get_DefaultValue();
    private MethodInfo get_GetMethodValue();
    private bool get_IsExtender();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    private MethodInfo get_ResetMethodValue();
    private MethodInfo get_SetMethodValue();
    private MethodInfo get_ShouldSerializeMethodValue();
    public virtual void AddValueChanged(object component, EventHandler handler);
    internal bool ExtenderCanResetValue(IExtenderProvider provider, object component);
    internal Type ExtenderGetReceiverType();
    internal Type ExtenderGetType(IExtenderProvider provider);
    internal object ExtenderGetValue(IExtenderProvider provider, object component);
    internal void ExtenderResetValue(IExtenderProvider provider, object component, PropertyDescriptor notifyDesc);
    internal void ExtenderSetValue(IExtenderProvider provider, object component, object value, PropertyDescriptor notifyDesc);
    internal bool ExtenderShouldSerializeValue(IExtenderProvider provider, object component);
    public virtual bool CanResetValue(object component);
    protected virtual void FillAttributes(IList attributes);
    public virtual object GetValue(object component);
    protected virtual void OnValueChanged(object component, EventArgs e);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual bool get_SupportsChangeEvents();
}
internal class System.ComponentModel.ReflectTypeDescriptionProvider : TypeDescriptionProvider {
    private Hashtable _typeData;
    private static Type[] s_typeConstructor;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_editorTables;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_intrinsicTypeConverters;
    private static object s_intrinsicReferenceKey;
    private static object s_intrinsicNullableKey;
    private static object s_dictionaryKey;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_propertyCache;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_eventCache;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_attributeCache;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_extendedPropertyCache;
    private static Guid s_extenderProviderKey;
    private static Guid s_extenderPropertiesKey;
    private static Guid s_extenderProviderPropertiesKey;
    private static Type[] s_skipInterfaceAttributeList;
    private static object s_internalSyncObject;
    internal static Guid ExtenderProviderKey { get; }
    private static Hashtable IntrinsicTypeConverters { get; }
    private static ReflectTypeDescriptionProvider();
    internal static Guid get_ExtenderProviderKey();
    private static Hashtable get_IntrinsicTypeConverters();
    internal static void AddEditorTable(Type editorBaseType, Hashtable table);
    public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    private static object CreateInstance(Type objectType, Type callingType);
    internal AttributeCollection GetAttributes(Type type);
    public virtual IDictionary GetCache(object instance);
    internal string GetClassName(Type type);
    internal string GetComponentName(Type type, object instance);
    internal TypeConverter GetConverter(Type type, object instance);
    internal EventDescriptor GetDefaultEvent(Type type, object instance);
    internal PropertyDescriptor GetDefaultProperty(Type type, object instance);
    private static Hashtable GetEditorTable(Type editorBaseType);
    internal EventDescriptorCollection GetEvents(Type type);
    internal AttributeCollection GetExtendedAttributes(object instance);
    internal string GetExtendedClassName(object instance);
    internal string GetExtendedComponentName(object instance);
    internal TypeConverter GetExtendedConverter(object instance);
    internal EventDescriptor GetExtendedDefaultEvent(object instance);
    internal PropertyDescriptor GetExtendedDefaultProperty(object instance);
    internal EventDescriptorCollection GetExtendedEvents(object instance);
    internal PropertyDescriptorCollection GetExtendedProperties(object instance);
    protected internal virtual IExtenderProvider[] GetExtenderProviders(object instance);
    private static IExtenderProvider[] GetExtenders(ICollection components, object instance, IDictionary cache);
    internal object GetExtendedPropertyOwner(object instance, PropertyDescriptor pd);
    public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance);
    public virtual string GetFullComponentName(object component);
    internal Type[] GetPopulatedTypes(Module module);
    internal PropertyDescriptorCollection GetProperties(Type type);
    internal object GetPropertyOwner(Type type, object instance, PropertyDescriptor pd);
    public virtual Type GetReflectionType(Type objectType, object instance);
    private ReflectedTypeData GetTypeData(Type type, bool createIfNeeded);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
    private static Type GetTypeFromName(string typeName);
    internal bool IsPopulated(Type type);
    internal static Attribute[] ReflectGetAttributes(Type type);
    internal static Attribute[] ReflectGetAttributes(MemberInfo member);
    private static EventDescriptor[] ReflectGetEvents(Type type);
    private static PropertyDescriptor[] ReflectGetExtendedProperties(IExtenderProvider provider);
    private static PropertyDescriptor[] ReflectGetProperties(Type type);
    internal void Refresh(Type type);
    private static object SearchIntrinsicTable(Hashtable table, Type callingType);
}
public class System.ComponentModel.RefreshEventArgs : EventArgs {
    private object _componentChanged;
    private Type _typeChanged;
    public object ComponentChanged { get; }
    public Type TypeChanged { get; }
    public RefreshEventArgs(object componentChanged);
    public RefreshEventArgs(Type typeChanged);
    public object get_ComponentChanged();
    public Type get_TypeChanged();
}
public class System.ComponentModel.RefreshEventHandler : MulticastDelegate {
    public RefreshEventHandler(object object, IntPtr method);
    public virtual void Invoke(RefreshEventArgs e);
    public virtual IAsyncResult BeginInvoke(RefreshEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.SByteConverter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.SingleConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.StringConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class System.ComponentModel.TimeSpanConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.TypeConverter : object {
    public bool CanConvertFrom(Type sourceType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public bool CanConvertTo(Type destinationType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public object ConvertFrom(object value);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public object ConvertFromInvariantString(string text);
    public object ConvertFromInvariantString(ITypeDescriptorContext context, string text);
    public object ConvertFromString(string text);
    public object ConvertFromString(ITypeDescriptorContext context, string text);
    public object ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, string text);
    public object ConvertTo(object value, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public string ConvertToInvariantString(object value);
    public string ConvertToInvariantString(ITypeDescriptorContext context, object value);
    public string ConvertToString(object value);
    public string ConvertToString(ITypeDescriptorContext context, object value);
    public string ConvertToString(ITypeDescriptorContext context, CultureInfo culture, object value);
    public object CreateInstance(IDictionary propertyValues);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    protected Exception GetConvertFromException(object value);
    protected Exception GetConvertToException(object value, Type destinationType);
    public bool GetCreateInstanceSupported();
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public PropertyDescriptorCollection GetProperties(object value);
    public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public bool GetPropertiesSupported();
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public ICollection GetStandardValues();
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public bool GetStandardValuesExclusive();
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public bool GetStandardValuesSupported();
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public bool IsValid(object value);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    protected PropertyDescriptorCollection SortProperties(PropertyDescriptorCollection props, String[] names);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.TypeConverterAttribute : Attribute {
    private string _typeName;
    public static TypeConverterAttribute Default;
    public string ConverterTypeName { get; }
    public TypeConverterAttribute(Type type);
    public TypeConverterAttribute(string typeName);
    private static TypeConverterAttribute();
    public string get_ConverterTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class System.ComponentModel.TypeDescriptionProvider : object {
    private TypeDescriptionProvider _parent;
    private EmptyCustomTypeDescriptor _emptyDescriptor;
    protected TypeDescriptionProvider(TypeDescriptionProvider parent);
    public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    public virtual IDictionary GetCache(object instance);
    public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance);
    protected internal virtual IExtenderProvider[] GetExtenderProviders(object instance);
    public virtual string GetFullComponentName(object component);
    public Type GetReflectionType(Type objectType);
    public Type GetReflectionType(object instance);
    public virtual Type GetReflectionType(Type objectType, object instance);
    public virtual Type GetRuntimeType(Type reflectionType);
    public ICustomTypeDescriptor GetTypeDescriptor(Type objectType);
    public ICustomTypeDescriptor GetTypeDescriptor(object instance);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
    public virtual bool IsSupportedType(Type type);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.TypeDescriptionProviderAttribute : Attribute {
    private string _typeName;
    public string TypeName { get; }
    public TypeDescriptionProviderAttribute(string typeName);
    public TypeDescriptionProviderAttribute(Type type);
    public string get_TypeName();
}
public class System.ComponentModel.TypeDescriptor : object {
    private static WeakHashtable s_providerTable;
    private static Hashtable s_providerTypeTable;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_defaultProviders;
    private static WeakHashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_associationTable;
    private static int s_metadataVersion;
    private static int s_collisionIndex;
    private static int PIPELINE_ATTRIBUTES;
    private static int PIPELINE_PROPERTIES;
    private static int PIPELINE_EVENTS;
    private static Guid[] s_pipelineInitializeKeys;
    private static Guid[] s_pipelineMergeKeys;
    private static Guid[] s_pipelineFilterKeys;
    private static Guid[] s_pipelineAttributeFilterKeys;
    private static object s_internalSyncObject;
    [CompilerGeneratedAttribute]
private static RefreshEventHandler Refreshed;
    [EditorBrowsableAttribute("2")]
public static Type InterfaceType { get; }
    internal static int MetadataVersion { get; }
    private static TypeDescriptor();
    public static Type get_InterfaceType();
    internal static int get_MetadataVersion();
    [CompilerGeneratedAttribute]
public static void add_Refreshed(RefreshEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Refreshed(RefreshEventHandler value);
    [EditorBrowsableAttribute("2")]
public static TypeDescriptionProvider AddAttributes(Type type, Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
public static TypeDescriptionProvider AddAttributes(object instance, Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
public static void AddEditorTable(Type editorBaseType, Hashtable table);
    [EditorBrowsableAttribute("2")]
public static void AddProvider(TypeDescriptionProvider provider, Type type);
    [EditorBrowsableAttribute("2")]
public static void AddProvider(TypeDescriptionProvider provider, object instance);
    [EditorBrowsableAttribute("2")]
public static void AddProviderTransparent(TypeDescriptionProvider provider, Type type);
    [EditorBrowsableAttribute("2")]
public static void AddProviderTransparent(TypeDescriptionProvider provider, object instance);
    private static void CheckDefaultProvider(Type type);
    [EditorBrowsableAttribute("2")]
public static void CreateAssociation(object primary, object secondary);
    public static EventDescriptor CreateEvent(Type componentType, string name, Type type, Attribute[] attributes);
    public static EventDescriptor CreateEvent(Type componentType, EventDescriptor oldEventDescriptor, Attribute[] attributes);
    public static object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    public static PropertyDescriptor CreateProperty(Type componentType, string name, Type type, Attribute[] attributes);
    public static PropertyDescriptor CreateProperty(Type componentType, PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
    private static ArrayList FilterMembers(IList members, Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
public static object GetAssociation(Type type, object primary);
    public static AttributeCollection GetAttributes(Type componentType);
    public static AttributeCollection GetAttributes(object component);
    [EditorBrowsableAttribute("2")]
public static AttributeCollection GetAttributes(object component, bool noCustomTypeDesc);
    internal static IDictionary GetCache(object instance);
    public static string GetClassName(object component);
    [EditorBrowsableAttribute("2")]
public static string GetClassName(object component, bool noCustomTypeDesc);
    public static string GetClassName(Type componentType);
    public static string GetComponentName(object component);
    [EditorBrowsableAttribute("2")]
public static string GetComponentName(object component, bool noCustomTypeDesc);
    public static TypeConverter GetConverter(object component);
    [EditorBrowsableAttribute("2")]
public static TypeConverter GetConverter(object component, bool noCustomTypeDesc);
    public static TypeConverter GetConverter(Type type);
    public static EventDescriptor GetDefaultEvent(Type componentType);
    public static EventDescriptor GetDefaultEvent(object component);
    [EditorBrowsableAttribute("2")]
public static EventDescriptor GetDefaultEvent(object component, bool noCustomTypeDesc);
    public static PropertyDescriptor GetDefaultProperty(Type componentType);
    public static PropertyDescriptor GetDefaultProperty(object component);
    [EditorBrowsableAttribute("2")]
public static PropertyDescriptor GetDefaultProperty(object component, bool noCustomTypeDesc);
    internal static ICustomTypeDescriptor GetDescriptor(Type type, string typeName);
    internal static ICustomTypeDescriptor GetDescriptor(object component, bool noCustomTypeDesc);
    internal static ICustomTypeDescriptor GetExtendedDescriptor(object component);
    public static object GetEditor(object component, Type editorBaseType);
    [EditorBrowsableAttribute("2")]
public static object GetEditor(object component, Type editorBaseType, bool noCustomTypeDesc);
    public static object GetEditor(Type type, Type editorBaseType);
    public static EventDescriptorCollection GetEvents(Type componentType);
    public static EventDescriptorCollection GetEvents(Type componentType, Attribute[] attributes);
    public static EventDescriptorCollection GetEvents(object component);
    [EditorBrowsableAttribute("2")]
public static EventDescriptorCollection GetEvents(object component, bool noCustomTypeDesc);
    public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes, bool noCustomTypeDesc);
    private static string GetExtenderCollisionSuffix(MemberDescriptor member);
    public static string GetFullComponentName(object component);
    private static Type GetNodeForBaseType(Type searchType);
    public static PropertyDescriptorCollection GetProperties(Type componentType);
    public static PropertyDescriptorCollection GetProperties(Type componentType, Attribute[] attributes);
    public static PropertyDescriptorCollection GetProperties(object component);
    [EditorBrowsableAttribute("2")]
public static PropertyDescriptorCollection GetProperties(object component, bool noCustomTypeDesc);
    public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes, bool noCustomTypeDesc);
    private static PropertyDescriptorCollection GetPropertiesImpl(object component, Attribute[] attributes, bool noCustomTypeDesc, bool noAttributes);
    [EditorBrowsableAttribute("2")]
public static TypeDescriptionProvider GetProvider(Type type);
    [EditorBrowsableAttribute("2")]
public static TypeDescriptionProvider GetProvider(object instance);
    internal static TypeDescriptionProvider GetProviderRecursive(Type type);
    [EditorBrowsableAttribute("2")]
public static Type GetReflectionType(Type type);
    [EditorBrowsableAttribute("2")]
public static Type GetReflectionType(object instance);
    private static TypeDescriptionNode NodeFor(Type type);
    private static TypeDescriptionNode NodeFor(Type type, bool createDelegator);
    private static TypeDescriptionNode NodeFor(object instance);
    private static TypeDescriptionNode NodeFor(object instance, bool createDelegator);
    private static void NodeRemove(object key, TypeDescriptionProvider provider);
    private static ICollection PipelineAttributeFilter(int pipelineType, ICollection members, Attribute[] filter, object instance, IDictionary cache);
    private static ICollection PipelineFilter(int pipelineType, ICollection members, object instance, IDictionary cache);
    private static ICollection PipelineInitialize(int pipelineType, ICollection members, IDictionary cache);
    private static ICollection PipelineMerge(int pipelineType, ICollection primary, ICollection secondary, object instance, IDictionary cache);
    private static void RaiseRefresh(object component);
    private static void RaiseRefresh(Type type);
    public static void Refresh(object component);
    private static void Refresh(object component, bool refreshReflectionProvider);
    public static void Refresh(Type type);
    public static void Refresh(Module module);
    public static void Refresh(Assembly assembly);
    [EditorBrowsableAttribute("2")]
public static void RemoveAssociation(object primary, object secondary);
    [EditorBrowsableAttribute("2")]
public static void RemoveAssociations(object primary);
    [EditorBrowsableAttribute("2")]
public static void RemoveProvider(TypeDescriptionProvider provider, Type type);
    [EditorBrowsableAttribute("2")]
public static void RemoveProvider(TypeDescriptionProvider provider, object instance);
    [EditorBrowsableAttribute("2")]
public static void RemoveProviderTransparent(TypeDescriptionProvider provider, Type type);
    [EditorBrowsableAttribute("2")]
public static void RemoveProviderTransparent(TypeDescriptionProvider provider, object instance);
    private static bool ShouldHideMember(MemberDescriptor member, Attribute attribute);
    public static void SortDescriptorArray(IList infos);
}
public abstract class System.ComponentModel.TypeListConverter : TypeConverter {
    private Type[] _types;
    private StandardValuesCollection _values;
    protected TypeListConverter(Type[] types);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.UInt16Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.UInt32Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.UInt64Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual object FromString(string value, CultureInfo culture);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
internal class System.ComponentModel.WeakHashtable : Hashtable {
    private static IEqualityComparer s_comparer;
    private long _lastGlobalMem;
    private int _lastHashCount;
    private static WeakHashtable();
    public virtual void Clear();
    public virtual void Remove(object key);
    public void SetWeak(object key, object value);
    private void ScavengeKeys();
}
internal class System.InvariantComparer : object {
    private CompareInfo _compareInfo;
    internal static InvariantComparer Default;
    private static InvariantComparer();
    public sealed virtual int Compare(object a, object b);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Array { get; }
    internal static string Collection { get; }
    internal static string ConvertFromException { get; }
    internal static string ConvertInvalidPrimitive { get; }
    internal static string ConvertToException { get; }
    internal static string EnumConverterInvalidValue { get; }
    internal static string ErrorInvalidEventHandler { get; }
    internal static string ErrorInvalidEventType { get; }
    internal static string ErrorInvalidPropertyType { get; }
    internal static string ErrorMissingEventAccessors { get; }
    internal static string ErrorMissingPropertyAccessors { get; }
    internal static string ErrorPropertyAccessorException { get; }
    internal static string InvalidMemberName { get; }
    internal static string InvalidNullArgument { get; }
    internal static string MetaExtenderName { get; }
    internal static string none { get; }
    internal static string Null { get; }
    internal static string NullableConverterBadCtorArg { get; }
    internal static string Text { get; }
    internal static string TypeDescriptorAlreadyAssociated { get; }
    internal static string TypeDescriptorArgsCountMismatch { get; }
    internal static string TypeDescriptorProviderError { get; }
    internal static string TypeDescriptorUnsupportedRemoteObject { get; }
    internal static string TypeDescriptorExpectedElementType { get; }
    internal static string TypeDescriptorSameAssociation { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Array();
    internal static string get_Collection();
    internal static string get_ConvertFromException();
    internal static string get_ConvertInvalidPrimitive();
    internal static string get_ConvertToException();
    internal static string get_EnumConverterInvalidValue();
    internal static string get_ErrorInvalidEventHandler();
    internal static string get_ErrorInvalidEventType();
    internal static string get_ErrorInvalidPropertyType();
    internal static string get_ErrorMissingEventAccessors();
    internal static string get_ErrorMissingPropertyAccessors();
    internal static string get_ErrorPropertyAccessorException();
    internal static string get_InvalidMemberName();
    internal static string get_InvalidNullArgument();
    internal static string get_MetaExtenderName();
    internal static string get_none();
    internal static string get_Null();
    internal static string get_NullableConverterBadCtorArg();
    internal static string get_Text();
    internal static string get_TypeDescriptorAlreadyAssociated();
    internal static string get_TypeDescriptorArgsCountMismatch();
    internal static string get_TypeDescriptorProviderError();
    internal static string get_TypeDescriptorUnsupportedRemoteObject();
    internal static string get_TypeDescriptorExpectedElementType();
    internal static string get_TypeDescriptorSameAssociation();
    internal static Type get_ResourceType();
}
public class System.UriTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
