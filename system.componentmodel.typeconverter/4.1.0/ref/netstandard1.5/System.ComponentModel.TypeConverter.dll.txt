public class System.ComponentModel.ArrayConverter : CollectionConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.AttributeCollection : object {
    public static AttributeCollection Empty;
    [CompilerGeneratedAttribute]
private Attribute[] <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.ICollection.IsSynchronized>k__BackingField;
    [CompilerGeneratedAttribute]
private object <System.Collections.ICollection.SyncRoot>k__BackingField;
    protected Attribute[] Attributes { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public Attribute Item { get; }
    public Attribute Item { get; }
    public AttributeCollection(Attribute[] attributes);
    [CompilerGeneratedAttribute]
protected virtual Attribute[] get_Attributes();
    public bool Contains(Attribute attribute);
    public bool Contains(Attribute[] attributes);
    public sealed virtual void CopyTo(Array array, int index);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    public static AttributeCollection FromExisting(AttributeCollection existing, Attribute[] newAttributes);
    protected Attribute GetDefaultAttribute(Type attributeType);
    public sealed virtual IEnumerator GetEnumerator();
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public bool Matches(Attribute attribute);
    public bool Matches(Attribute[] attributes);
    [CompilerGeneratedAttribute]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public virtual Attribute get_Item(int index);
    public virtual Attribute get_Item(Type attributeType);
}
public class System.ComponentModel.AttributeProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string PropertyName { get; }
    public string TypeName { get; }
    public AttributeProviderAttribute(string typeName);
    public AttributeProviderAttribute(string typeName, string propertyName);
    public AttributeProviderAttribute(Type type);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public string get_TypeName();
}
public abstract class System.ComponentModel.BaseNumberConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type t);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.BooleanConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.ByteConverter : BaseNumberConverter {
}
public class System.ComponentModel.CancelEventHandler : MulticastDelegate {
    public CancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.CharConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.ComponentModel.CollectionChangeAction : Enum {
    public int value__;
    public static CollectionChangeAction Add;
    public static CollectionChangeAction Refresh;
    public static CollectionChangeAction Remove;
}
public class System.ComponentModel.CollectionChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CollectionChangeAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Element>k__BackingField;
    public CollectionChangeAction Action { get; }
    public object Element { get; }
    public CollectionChangeEventArgs(CollectionChangeAction action, object element);
    [CompilerGeneratedAttribute]
public virtual CollectionChangeAction get_Action();
    [CompilerGeneratedAttribute]
public virtual object get_Element();
}
public class System.ComponentModel.CollectionChangeEventHandler : MulticastDelegate {
    public CollectionChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CollectionChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CollectionChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.CollectionConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public abstract class System.ComponentModel.CustomTypeDescriptor : object {
    protected CustomTypeDescriptor(ICustomTypeDescriptor parent);
    public virtual AttributeCollection GetAttributes();
    public virtual string GetClassName();
    public virtual string GetComponentName();
    public virtual TypeConverter GetConverter();
    public virtual EventDescriptor GetDefaultEvent();
    public virtual PropertyDescriptor GetDefaultProperty();
    public virtual object GetEditor(Type editorBaseType);
    public virtual EventDescriptorCollection GetEvents();
    public virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public virtual object GetPropertyOwner(PropertyDescriptor pd);
}
public class System.ComponentModel.DateTimeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DateTimeOffsetConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DecimalConverter : BaseNumberConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DefaultEventAttribute : Attribute {
    public static DefaultEventAttribute Default;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public DefaultEventAttribute(string name);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class System.ComponentModel.DefaultPropertyAttribute : Attribute {
    public static DefaultPropertyAttribute Default;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public DefaultPropertyAttribute(string name);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class System.ComponentModel.DoubleConverter : BaseNumberConverter {
}
public class System.ComponentModel.EnumConverter : TypeConverter {
    [CompilerGeneratedAttribute]
private IComparer <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private StandardValuesCollection <Values>k__BackingField;
    protected Type EnumType { get; }
    protected IComparer Comparer { get; }
    protected StandardValuesCollection Values { get; protected set; }
    public EnumConverter(Type type);
    protected Type get_EnumType();
    [CompilerGeneratedAttribute]
protected virtual IComparer get_Comparer();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    [CompilerGeneratedAttribute]
protected StandardValuesCollection get_Values();
    [CompilerGeneratedAttribute]
protected void set_Values(StandardValuesCollection value);
}
public abstract class System.ComponentModel.EventDescriptor : MemberDescriptor {
    public Type ComponentType { get; }
    public Type EventType { get; }
    public bool IsMulticast { get; }
    protected EventDescriptor(MemberDescriptor descr);
    protected EventDescriptor(MemberDescriptor descr, Attribute[] attrs);
    protected EventDescriptor(string name, Attribute[] attrs);
    public abstract virtual void AddEventHandler(object component, Delegate value);
    public abstract virtual Type get_ComponentType();
    public abstract virtual Type get_EventType();
    public abstract virtual bool get_IsMulticast();
    public abstract virtual void RemoveEventHandler(object component, Delegate value);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.EventDescriptorCollection : object {
    public static EventDescriptorCollection Empty;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.ICollection.IsSynchronized>k__BackingField;
    [CompilerGeneratedAttribute]
private object <System.Collections.ICollection.SyncRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.IList.IsFixedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.IList.IsReadOnly>k__BackingField;
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public EventDescriptor Item { get; }
    public EventDescriptor Item { get; }
    public EventDescriptorCollection(EventDescriptor[] events);
    public EventDescriptorCollection(EventDescriptor[] events, bool readOnly);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [CompilerGeneratedAttribute]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual EventDescriptor get_Item(int index);
    public virtual EventDescriptor get_Item(string name);
    public int Add(EventDescriptor value);
    public sealed virtual void Clear();
    public bool Contains(EventDescriptor value);
    public virtual EventDescriptor Find(string name, bool ignoreCase);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(EventDescriptor value);
    public void Insert(int index, EventDescriptor value);
    protected void InternalSort(IComparer sorter);
    protected void InternalSort(String[] names);
    public void Remove(EventDescriptor value);
    public sealed virtual void RemoveAt(int index);
    public virtual EventDescriptorCollection Sort();
    public virtual EventDescriptorCollection Sort(IComparer comparer);
    public virtual EventDescriptorCollection Sort(String[] names);
    public virtual EventDescriptorCollection Sort(String[] names, IComparer comparer);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public class System.ComponentModel.ExtenderProvidedPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private PropertyDescriptor <ExtenderProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtenderProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReceiverType>k__BackingField;
    public PropertyDescriptor ExtenderProperty { get; }
    public IExtenderProvider Provider { get; }
    public Type ReceiverType { get; }
    [CompilerGeneratedAttribute]
public PropertyDescriptor get_ExtenderProperty();
    [CompilerGeneratedAttribute]
public IExtenderProvider get_Provider();
    [CompilerGeneratedAttribute]
public Type get_ReceiverType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.ComponentModel.GuidConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.HandledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    public HandledEventArgs(bool defaultHandledValue);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.ComponentModel.HandledEventHandler : MulticastDelegate {
    public HandledEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, HandledEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, HandledEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.ComponentModel.ICustomTypeDescriptor {
    public abstract virtual AttributeCollection GetAttributes();
    public abstract virtual string GetClassName();
    public abstract virtual string GetComponentName();
    public abstract virtual TypeConverter GetConverter();
    public abstract virtual EventDescriptor GetDefaultEvent();
    public abstract virtual PropertyDescriptor GetDefaultProperty();
    public abstract virtual object GetEditor(Type editorBaseType);
    public abstract virtual EventDescriptorCollection GetEvents();
    public abstract virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public abstract virtual PropertyDescriptorCollection GetProperties();
    public abstract virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public abstract virtual object GetPropertyOwner(PropertyDescriptor pd);
}
public interface System.ComponentModel.IExtenderProvider {
    public abstract virtual bool CanExtend(object extendee);
}
public interface System.ComponentModel.IListSource {
    public bool ContainsListCollection { get; }
    public abstract virtual bool get_ContainsListCollection();
    public abstract virtual IList GetList();
}
public class System.ComponentModel.Int16Converter : BaseNumberConverter {
}
public class System.ComponentModel.Int32Converter : BaseNumberConverter {
}
public class System.ComponentModel.Int64Converter : BaseNumberConverter {
}
public class System.ComponentModel.InvalidAsynchronousStateException : ArgumentException {
    public InvalidAsynchronousStateException(string message);
    public InvalidAsynchronousStateException(string message, Exception innerException);
}
public interface System.ComponentModel.ITypeDescriptorContext {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public abstract virtual IContainer get_Container();
    public abstract virtual object get_Instance();
    public abstract virtual PropertyDescriptor get_PropertyDescriptor();
    public abstract virtual void OnComponentChanged();
    public abstract virtual bool OnComponentChanging();
}
public interface System.ComponentModel.ITypedList {
    public abstract virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public abstract virtual string GetListName(PropertyDescriptor[] listAccessors);
}
public abstract class System.ComponentModel.MemberDescriptor : object {
    [CompilerGeneratedAttribute]
private Attribute[] <AttributeArray>k__BackingField;
    [CompilerGeneratedAttribute]
private AttributeCollection <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBrowsable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NameHashCode>k__BackingField;
    protected Attribute[] AttributeArray { get; protected set; }
    public AttributeCollection Attributes { get; }
    public string Category { get; }
    public string Description { get; }
    public bool DesignTimeOnly { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public string Name { get; }
    protected int NameHashCode { get; }
    protected MemberDescriptor(MemberDescriptor descr);
    protected MemberDescriptor(MemberDescriptor oldMemberDescriptor, Attribute[] newAttributes);
    protected MemberDescriptor(string name);
    protected MemberDescriptor(string name, Attribute[] attributes);
    [CompilerGeneratedAttribute]
protected virtual Attribute[] get_AttributeArray();
    [CompilerGeneratedAttribute]
protected virtual void set_AttributeArray(Attribute[] value);
    [CompilerGeneratedAttribute]
public virtual AttributeCollection get_Attributes();
    [CompilerGeneratedAttribute]
public virtual string get_Category();
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeOnly();
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual bool get_IsBrowsable();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual int get_NameHashCode();
    protected virtual AttributeCollection CreateAttributeCollection();
    public virtual bool Equals(object obj);
    protected virtual void FillAttributes(IList attributeList);
    protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType);
    protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType, bool publicOnly);
    public virtual int GetHashCode();
    protected virtual object GetInvocationTarget(Type type, object instance);
    protected static ISite GetSite(object component);
}
public class System.ComponentModel.MultilineStringConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.NullableConverter : TypeConverter {
    public Type NullableType { get; }
    public Type UnderlyingType { get; }
    public TypeConverter UnderlyingTypeConverter { get; }
    public NullableConverter(Type type);
    public Type get_NullableType();
    public Type get_UnderlyingType();
    public TypeConverter get_UnderlyingTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
public abstract class System.ComponentModel.PropertyDescriptor : MemberDescriptor {
    [CompilerGeneratedAttribute]
private TypeConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocalizable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsChangeEvents>k__BackingField;
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    public bool IsLocalizable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool SupportsChangeEvents { get; }
    public DesignerSerializationVisibility SerializationVisibility { get; }
    protected PropertyDescriptor(MemberDescriptor descr);
    protected PropertyDescriptor(MemberDescriptor descr, Attribute[] attrs);
    protected PropertyDescriptor(string name, Attribute[] attrs);
    public abstract virtual Type get_ComponentType();
    [CompilerGeneratedAttribute]
public virtual TypeConverter get_Converter();
    [CompilerGeneratedAttribute]
public virtual bool get_IsLocalizable();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual Type get_PropertyType();
    [CompilerGeneratedAttribute]
public virtual bool get_SupportsChangeEvents();
    public virtual void AddValueChanged(object component, EventHandler handler);
    public abstract virtual bool CanResetValue(object component);
    protected object CreateInstance(Type type);
    public virtual bool Equals(object obj);
    protected virtual void FillAttributes(IList attributeList);
    public PropertyDescriptorCollection GetChildProperties();
    public PropertyDescriptorCollection GetChildProperties(Attribute[] filter);
    public PropertyDescriptorCollection GetChildProperties(object instance);
    public virtual PropertyDescriptorCollection GetChildProperties(object instance, Attribute[] filter);
    public virtual object GetEditor(Type editorBaseType);
    public virtual int GetHashCode();
    protected virtual object GetInvocationTarget(Type type, object instance);
    protected Type GetTypeFromName(string typeName);
    public abstract virtual object GetValue(object component);
    protected internal EventHandler GetValueChangedHandler(object component);
    protected virtual void OnValueChanged(object component, EventArgs e);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
    public abstract virtual void ResetValue(object component);
    public DesignerSerializationVisibility get_SerializationVisibility();
    public abstract virtual void SetValue(object component, object value);
    public abstract virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.PropertyDescriptorCollection : object {
    public static PropertyDescriptorCollection Empty;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.ICollection.IsSynchronized>k__BackingField;
    [CompilerGeneratedAttribute]
private object <System.Collections.ICollection.SyncRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.IDictionary.IsFixedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.IDictionary.IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection <System.Collections.IDictionary.Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection <System.Collections.IDictionary.Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.IList.IsFixedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <System.Collections.IList.IsReadOnly>k__BackingField;
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public PropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    public PropertyDescriptorCollection(PropertyDescriptor[] properties);
    public PropertyDescriptorCollection(PropertyDescriptor[] properties, bool readOnly);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [CompilerGeneratedAttribute]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    [CompilerGeneratedAttribute]
private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    [CompilerGeneratedAttribute]
private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    [CompilerGeneratedAttribute]
private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual PropertyDescriptor get_Item(int index);
    public virtual PropertyDescriptor get_Item(string name);
    public int Add(PropertyDescriptor value);
    public sealed virtual void Clear();
    public bool Contains(PropertyDescriptor value);
    public sealed virtual void CopyTo(Array array, int index);
    public virtual PropertyDescriptor Find(string name, bool ignoreCase);
    public virtual IEnumerator GetEnumerator();
    public int IndexOf(PropertyDescriptor value);
    public void Insert(int index, PropertyDescriptor value);
    protected void InternalSort(IComparer sorter);
    protected void InternalSort(String[] names);
    public void Remove(PropertyDescriptor value);
    public sealed virtual void RemoveAt(int index);
    public virtual PropertyDescriptorCollection Sort();
    public virtual PropertyDescriptorCollection Sort(IComparer comparer);
    public virtual PropertyDescriptorCollection Sort(String[] names);
    public virtual PropertyDescriptorCollection Sort(String[] names, IComparer comparer);
}
public class System.ComponentModel.ProvidePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiverTypeName>k__BackingField;
    public string PropertyName { get; }
    public string ReceiverTypeName { get; }
    public ProvidePropertyAttribute(string propertyName, string receiverTypeName);
    public ProvidePropertyAttribute(string propertyName, Type receiverType);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public string get_ReceiverTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.ComponentModel.RefreshEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <ComponentChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TypeChanged>k__BackingField;
    public object ComponentChanged { get; }
    public Type TypeChanged { get; }
    public RefreshEventArgs(object componentChanged);
    public RefreshEventArgs(Type typeChanged);
    [CompilerGeneratedAttribute]
public object get_ComponentChanged();
    [CompilerGeneratedAttribute]
public Type get_TypeChanged();
}
public class System.ComponentModel.RefreshEventHandler : MulticastDelegate {
    public RefreshEventHandler(object object, IntPtr method);
    public virtual void Invoke(RefreshEventArgs e);
    public virtual IAsyncResult BeginInvoke(RefreshEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.SByteConverter : BaseNumberConverter {
}
public class System.ComponentModel.SingleConverter : BaseNumberConverter {
}
public class System.ComponentModel.StringConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class System.ComponentModel.TimeSpanConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.TypeConverter : object {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public bool CanConvertFrom(Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public bool CanConvertTo(Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public object ConvertFrom(object value);
    public object ConvertFromInvariantString(ITypeDescriptorContext context, string text);
    public object ConvertFromInvariantString(string text);
    public object ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, string text);
    public object ConvertFromString(ITypeDescriptorContext context, string text);
    public object ConvertFromString(string text);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public object ConvertTo(object value, Type destinationType);
    public string ConvertToInvariantString(ITypeDescriptorContext context, object value);
    public string ConvertToInvariantString(object value);
    public string ConvertToString(ITypeDescriptorContext context, CultureInfo culture, object value);
    public string ConvertToString(ITypeDescriptorContext context, object value);
    public string ConvertToString(object value);
    public object CreateInstance(IDictionary propertyValues);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    protected Exception GetConvertFromException(object value);
    protected Exception GetConvertToException(object value, Type destinationType);
    public bool GetCreateInstanceSupported();
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public PropertyDescriptorCollection GetProperties(object value);
    public bool GetPropertiesSupported();
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public ICollection GetStandardValues();
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public bool GetStandardValuesExclusive();
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public bool GetStandardValuesSupported();
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    public bool IsValid(object value);
    protected PropertyDescriptorCollection SortProperties(PropertyDescriptorCollection props, String[] names);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.TypeConverterAttribute : Attribute {
    public static TypeConverterAttribute Default;
    public string ConverterTypeName { get; }
    public TypeConverterAttribute(string typeName);
    public TypeConverterAttribute(Type type);
    public string get_ConverterTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class System.ComponentModel.TypeDescriptionProvider : object {
    protected TypeDescriptionProvider(TypeDescriptionProvider parent);
    public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    public virtual IDictionary GetCache(object instance);
    public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance);
    protected internal virtual IExtenderProvider[] GetExtenderProviders(object instance);
    public virtual string GetFullComponentName(object component);
    public Type GetReflectionType(object instance);
    public Type GetReflectionType(Type objectType);
    public virtual Type GetReflectionType(Type objectType, object instance);
    public virtual Type GetRuntimeType(Type reflectionType);
    public ICustomTypeDescriptor GetTypeDescriptor(object instance);
    public ICustomTypeDescriptor GetTypeDescriptor(Type objectType);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
    public virtual bool IsSupportedType(Type type);
}
public class System.ComponentModel.TypeDescriptionProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; }
    public TypeDescriptionProviderAttribute(string typeName);
    public TypeDescriptionProviderAttribute(Type type);
    [CompilerGeneratedAttribute]
public string get_TypeName();
}
public class System.ComponentModel.TypeDescriptor : object {
    [CompilerGeneratedAttribute]
private static Type <InterfaceType>k__BackingField;
    public static Type InterfaceType { get; }
    [CompilerGeneratedAttribute]
public static Type get_InterfaceType();
    public static void add_Refreshed(RefreshEventHandler value);
    public static void remove_Refreshed(RefreshEventHandler value);
    public static TypeDescriptionProvider AddAttributes(object instance, Attribute[] attributes);
    public static TypeDescriptionProvider AddAttributes(Type type, Attribute[] attributes);
    public static void AddEditorTable(Type editorBaseType, Hashtable table);
    public static void AddProvider(TypeDescriptionProvider provider, object instance);
    public static void AddProvider(TypeDescriptionProvider provider, Type type);
    public static void AddProviderTransparent(TypeDescriptionProvider provider, object instance);
    public static void AddProviderTransparent(TypeDescriptionProvider provider, Type type);
    public static void CreateAssociation(object primary, object secondary);
    public static EventDescriptor CreateEvent(Type componentType, EventDescriptor oldEventDescriptor, Attribute[] attributes);
    public static EventDescriptor CreateEvent(Type componentType, string name, Type type, Attribute[] attributes);
    public static object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    public static PropertyDescriptor CreateProperty(Type componentType, PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
    public static PropertyDescriptor CreateProperty(Type componentType, string name, Type type, Attribute[] attributes);
    public static object GetAssociation(Type type, object primary);
    public static AttributeCollection GetAttributes(object component);
    public static AttributeCollection GetAttributes(object component, bool noCustomTypeDesc);
    public static AttributeCollection GetAttributes(Type componentType);
    public static string GetClassName(object component);
    public static string GetClassName(object component, bool noCustomTypeDesc);
    public static string GetClassName(Type componentType);
    public static string GetComponentName(object component);
    public static string GetComponentName(object component, bool noCustomTypeDesc);
    public static TypeConverter GetConverter(object component);
    public static TypeConverter GetConverter(object component, bool noCustomTypeDesc);
    public static TypeConverter GetConverter(Type type);
    public static EventDescriptor GetDefaultEvent(object component);
    public static EventDescriptor GetDefaultEvent(object component, bool noCustomTypeDesc);
    public static EventDescriptor GetDefaultEvent(Type componentType);
    public static PropertyDescriptor GetDefaultProperty(object component);
    public static PropertyDescriptor GetDefaultProperty(object component, bool noCustomTypeDesc);
    public static PropertyDescriptor GetDefaultProperty(Type componentType);
    public static object GetEditor(object component, Type editorBaseType);
    public static object GetEditor(object component, Type editorBaseType, bool noCustomTypeDesc);
    public static object GetEditor(Type type, Type editorBaseType);
    public static EventDescriptorCollection GetEvents(object component);
    public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes);
    public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes, bool noCustomTypeDesc);
    public static EventDescriptorCollection GetEvents(object component, bool noCustomTypeDesc);
    public static EventDescriptorCollection GetEvents(Type componentType);
    public static EventDescriptorCollection GetEvents(Type componentType, Attribute[] attributes);
    public static string GetFullComponentName(object component);
    public static PropertyDescriptorCollection GetProperties(object component);
    public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes, bool noCustomTypeDesc);
    public static PropertyDescriptorCollection GetProperties(object component, bool noCustomTypeDesc);
    public static PropertyDescriptorCollection GetProperties(Type componentType);
    public static PropertyDescriptorCollection GetProperties(Type componentType, Attribute[] attributes);
    public static TypeDescriptionProvider GetProvider(object instance);
    public static TypeDescriptionProvider GetProvider(Type type);
    public static Type GetReflectionType(object instance);
    public static Type GetReflectionType(Type type);
    public static void Refresh(object component);
    public static void Refresh(Assembly assembly);
    public static void Refresh(Module module);
    public static void Refresh(Type type);
    public static void RemoveAssociation(object primary, object secondary);
    public static void RemoveAssociations(object primary);
    public static void RemoveProvider(TypeDescriptionProvider provider, object instance);
    public static void RemoveProvider(TypeDescriptionProvider provider, Type type);
    public static void RemoveProviderTransparent(TypeDescriptionProvider provider, object instance);
    public static void RemoveProviderTransparent(TypeDescriptionProvider provider, Type type);
    public static void SortDescriptorArray(IList infos);
}
public abstract class System.ComponentModel.TypeListConverter : TypeConverter {
    protected TypeListConverter(Type[] types);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.UInt16Converter : BaseNumberConverter {
}
public class System.ComponentModel.UInt32Converter : BaseNumberConverter {
}
public class System.ComponentModel.UInt64Converter : BaseNumberConverter {
}
public class System.UriTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
