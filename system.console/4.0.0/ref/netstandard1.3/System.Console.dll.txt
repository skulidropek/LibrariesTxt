public static class System.Console : object {
    public static ConsoleColor BackgroundColor { get; public set; }
    public static int BufferHeight { get; public set; }
    public static int BufferWidth { get; public set; }
    public static bool CapsLock { get; }
    public static int CursorLeft { get; public set; }
    public static int CursorSize { get; public set; }
    public static int CursorTop { get; public set; }
    public static bool CursorVisible { get; public set; }
    public static TextWriter Error { get; }
    public static ConsoleColor ForegroundColor { get; public set; }
    public static Encoding InputEncoding { get; public set; }
    public static bool IsErrorRedirected { get; }
    public static bool IsInputRedirected { get; }
    public static bool IsOutputRedirected { get; }
    public static TextReader In { get; }
    public static bool KeyAvailable { get; }
    public static int LargestWindowWidth { get; }
    public static int LargestWindowHeight { get; }
    public static bool NumberLock { get; }
    public static TextWriter Out { get; }
    public static Encoding OutputEncoding { get; public set; }
    public static string Title { get; public set; }
    public static bool TreatControlCAsInput { get; public set; }
    public static int WindowHeight { get; public set; }
    public static int WindowWidth { get; public set; }
    public static int WindowLeft { get; public set; }
    public static int WindowTop { get; public set; }
    public static ConsoleColor get_BackgroundColor();
    public static void set_BackgroundColor(ConsoleColor value);
    public static void Beep();
    public static void Beep(int frequency, int duration);
    public static int get_BufferHeight();
    public static void set_BufferHeight(int value);
    public static int get_BufferWidth();
    public static void set_BufferWidth(int value);
    public static bool get_CapsLock();
    public static void add_CancelKeyPress(ConsoleCancelEventHandler value);
    public static void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public static void Clear();
    public static int get_CursorLeft();
    public static void set_CursorLeft(int value);
    public static int get_CursorSize();
    public static void set_CursorSize(int value);
    public static int get_CursorTop();
    public static void set_CursorTop(int value);
    public static bool get_CursorVisible();
    public static void set_CursorVisible(bool value);
    public static TextWriter get_Error();
    public static ConsoleColor get_ForegroundColor();
    public static void set_ForegroundColor(ConsoleColor value);
    public static Encoding get_InputEncoding();
    public static void set_InputEncoding(Encoding value);
    public static bool get_IsErrorRedirected();
    public static bool get_IsInputRedirected();
    public static bool get_IsOutputRedirected();
    public static TextReader get_In();
    public static bool get_KeyAvailable();
    public static int get_LargestWindowWidth();
    public static int get_LargestWindowHeight();
    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);
    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
    public static bool get_NumberLock();
    public static Stream OpenStandardError();
    public static Stream OpenStandardInput();
    public static Stream OpenStandardOutput();
    public static TextWriter get_Out();
    public static Encoding get_OutputEncoding();
    public static void set_OutputEncoding(Encoding value);
    public static int Read();
    public static ConsoleKeyInfo ReadKey();
    public static ConsoleKeyInfo ReadKey(bool intercept);
    public static string ReadLine();
    public static void ResetColor();
    public static void SetBufferSize(int width, int height);
    public static void SetCursorPosition(int left, int top);
    public static void SetError(TextWriter newError);
    public static void SetIn(TextReader newIn);
    public static void SetOut(TextWriter newOut);
    public static void SetWindowPosition(int left, int top);
    public static void SetWindowSize(int width, int height);
    public static string get_Title();
    public static void set_Title(string value);
    public static bool get_TreatControlCAsInput();
    public static void set_TreatControlCAsInput(bool value);
    public static int get_WindowHeight();
    public static void set_WindowHeight(int value);
    public static int get_WindowWidth();
    public static void set_WindowWidth(int value);
    public static int get_WindowLeft();
    public static void set_WindowLeft(int value);
    public static int get_WindowTop();
    public static void set_WindowTop(int value);
    public static void Write(bool value);
    public static void Write(char value);
    public static void Write(Char[] buffer);
    public static void Write(Char[] buffer, int index, int count);
    public static void Write(decimal value);
    public static void Write(double value);
    public static void Write(int value);
    public static void Write(long value);
    public static void Write(object value);
    public static void Write(float value);
    public static void Write(string value);
    public static void Write(string format, object arg0);
    public static void Write(string format, object arg0, object arg1);
    public static void Write(string format, object arg0, object arg1, object arg2);
    public static void Write(string format, Object[] arg);
    [CLSCompliantAttribute("False")]
public static void Write(UInt32 value);
    [CLSCompliantAttribute("False")]
public static void Write(ulong value);
    public static void WriteLine();
    public static void WriteLine(bool value);
    public static void WriteLine(char value);
    public static void WriteLine(Char[] buffer);
    public static void WriteLine(Char[] buffer, int index, int count);
    public static void WriteLine(decimal value);
    public static void WriteLine(double value);
    public static void WriteLine(int value);
    public static void WriteLine(long value);
    public static void WriteLine(object value);
    public static void WriteLine(float value);
    public static void WriteLine(string value);
    public static void WriteLine(string format, object arg0);
    public static void WriteLine(string format, object arg0, object arg1);
    public static void WriteLine(string format, object arg0, object arg1, object arg2);
    public static void WriteLine(string format, Object[] arg);
    [CLSCompliantAttribute("False")]
public static void WriteLine(UInt32 value);
    [CLSCompliantAttribute("False")]
public static void WriteLine(ulong value);
}
public class System.ConsoleCancelEventArgs : EventArgs {
    public bool Cancel { get; public set; }
    public ConsoleSpecialKey SpecialKey { get; }
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public ConsoleSpecialKey get_SpecialKey();
}
public class System.ConsoleCancelEventHandler : MulticastDelegate {
    public ConsoleCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConsoleCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConsoleCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.ConsoleColor : Enum {
    public int value__;
    public static ConsoleColor Black;
    public static ConsoleColor Blue;
    public static ConsoleColor Cyan;
    public static ConsoleColor DarkBlue;
    public static ConsoleColor DarkCyan;
    public static ConsoleColor DarkGray;
    public static ConsoleColor DarkGreen;
    public static ConsoleColor DarkMagenta;
    public static ConsoleColor DarkRed;
    public static ConsoleColor DarkYellow;
    public static ConsoleColor Gray;
    public static ConsoleColor Green;
    public static ConsoleColor Magenta;
    public static ConsoleColor Red;
    public static ConsoleColor White;
    public static ConsoleColor Yellow;
}
public enum System.ConsoleKey : Enum {
    public int value__;
    public static ConsoleKey Backspace;
    public static ConsoleKey Tab;
    public static ConsoleKey Clear;
    public static ConsoleKey Enter;
    public static ConsoleKey Pause;
    public static ConsoleKey Escape;
    public static ConsoleKey Spacebar;
    public static ConsoleKey PageUp;
    public static ConsoleKey PageDown;
    public static ConsoleKey End;
    public static ConsoleKey Home;
    public static ConsoleKey LeftArrow;
    public static ConsoleKey UpArrow;
    public static ConsoleKey RightArrow;
    public static ConsoleKey DownArrow;
    public static ConsoleKey Select;
    public static ConsoleKey Print;
    public static ConsoleKey Execute;
    public static ConsoleKey PrintScreen;
    public static ConsoleKey Insert;
    public static ConsoleKey Delete;
    public static ConsoleKey Help;
    public static ConsoleKey D0;
    public static ConsoleKey D1;
    public static ConsoleKey D2;
    public static ConsoleKey D3;
    public static ConsoleKey D4;
    public static ConsoleKey D5;
    public static ConsoleKey D6;
    public static ConsoleKey D7;
    public static ConsoleKey D8;
    public static ConsoleKey D9;
    public static ConsoleKey A;
    public static ConsoleKey B;
    public static ConsoleKey C;
    public static ConsoleKey D;
    public static ConsoleKey E;
    public static ConsoleKey F;
    public static ConsoleKey G;
    public static ConsoleKey H;
    public static ConsoleKey I;
    public static ConsoleKey J;
    public static ConsoleKey K;
    public static ConsoleKey L;
    public static ConsoleKey M;
    public static ConsoleKey N;
    public static ConsoleKey O;
    public static ConsoleKey P;
    public static ConsoleKey Q;
    public static ConsoleKey R;
    public static ConsoleKey S;
    public static ConsoleKey T;
    public static ConsoleKey U;
    public static ConsoleKey V;
    public static ConsoleKey W;
    public static ConsoleKey X;
    public static ConsoleKey Y;
    public static ConsoleKey Z;
    public static ConsoleKey Sleep;
    public static ConsoleKey NumPad0;
    public static ConsoleKey NumPad1;
    public static ConsoleKey NumPad2;
    public static ConsoleKey NumPad3;
    public static ConsoleKey NumPad4;
    public static ConsoleKey NumPad5;
    public static ConsoleKey NumPad6;
    public static ConsoleKey NumPad7;
    public static ConsoleKey NumPad8;
    public static ConsoleKey NumPad9;
    public static ConsoleKey Multiply;
    public static ConsoleKey Add;
    public static ConsoleKey Separator;
    public static ConsoleKey Subtract;
    public static ConsoleKey Decimal;
    public static ConsoleKey Divide;
    public static ConsoleKey F1;
    public static ConsoleKey F2;
    public static ConsoleKey F3;
    public static ConsoleKey F4;
    public static ConsoleKey F5;
    public static ConsoleKey F6;
    public static ConsoleKey F7;
    public static ConsoleKey F8;
    public static ConsoleKey F9;
    public static ConsoleKey F10;
    public static ConsoleKey F11;
    public static ConsoleKey F12;
    public static ConsoleKey F13;
    public static ConsoleKey F14;
    public static ConsoleKey F15;
    public static ConsoleKey F16;
    public static ConsoleKey F17;
    public static ConsoleKey F18;
    public static ConsoleKey F19;
    public static ConsoleKey F20;
    public static ConsoleKey F21;
    public static ConsoleKey F22;
    public static ConsoleKey F23;
    public static ConsoleKey F24;
    public static ConsoleKey Oem1;
    public static ConsoleKey OemPlus;
    public static ConsoleKey OemComma;
    public static ConsoleKey OemMinus;
    public static ConsoleKey OemPeriod;
    public static ConsoleKey Oem2;
    public static ConsoleKey Oem3;
    public static ConsoleKey Oem4;
    public static ConsoleKey Oem5;
    public static ConsoleKey Oem6;
    public static ConsoleKey Oem7;
    public static ConsoleKey Oem8;
    public static ConsoleKey OemClear;
}
public class System.ConsoleKeyInfo : ValueType {
    public char KeyChar { get; }
    public ConsoleKey Key { get; }
    public ConsoleModifiers Modifiers { get; }
    public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control);
    public char get_KeyChar();
    public ConsoleKey get_Key();
    public ConsoleModifiers get_Modifiers();
    public bool Equals(ConsoleKeyInfo obj);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static bool op_Equality(ConsoleKeyInfo a, ConsoleKeyInfo b);
    public static bool op_Inequality(ConsoleKeyInfo a, ConsoleKeyInfo b);
}
[FlagsAttribute]
public enum System.ConsoleModifiers : Enum {
    public int value__;
    public static ConsoleModifiers Alt;
    public static ConsoleModifiers Shift;
    public static ConsoleModifiers Control;
}
public enum System.ConsoleSpecialKey : Enum {
    public int value__;
    public static ConsoleSpecialKey ControlBreak;
    public static ConsoleSpecialKey ControlC;
}
