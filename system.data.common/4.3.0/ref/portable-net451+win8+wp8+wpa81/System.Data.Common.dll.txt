[FlagsAttribute]
public enum System.Data.CommandBehavior : Enum {
    public int value__;
    public static CommandBehavior CloseConnection;
    public static CommandBehavior Default;
    public static CommandBehavior KeyInfo;
    public static CommandBehavior SchemaOnly;
    public static CommandBehavior SequentialAccess;
    public static CommandBehavior SingleResult;
    public static CommandBehavior SingleRow;
}
public enum System.Data.CommandType : Enum {
    public int value__;
    public static CommandType StoredProcedure;
    public static CommandType TableDirect;
    public static CommandType Text;
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbColumn : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowDBNull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseCatalogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAliased>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAutoIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsLong>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumericPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumericScale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UdtAssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    public Nullable`1<bool> AllowDBNull { get; protected set; }
    public string BaseCatalogName { get; protected set; }
    public string BaseColumnName { get; protected set; }
    public string BaseSchemaName { get; protected set; }
    public string BaseServerName { get; protected set; }
    public string BaseTableName { get; protected set; }
    public string ColumnName { get; protected set; }
    public Nullable`1<int> ColumnOrdinal { get; protected set; }
    public Nullable`1<int> ColumnSize { get; protected set; }
    public Nullable`1<bool> IsAliased { get; protected set; }
    public Nullable`1<bool> IsAutoIncrement { get; protected set; }
    public Nullable`1<bool> IsExpression { get; protected set; }
    public Nullable`1<bool> IsHidden { get; protected set; }
    public Nullable`1<bool> IsIdentity { get; protected set; }
    public Nullable`1<bool> IsKey { get; protected set; }
    public Nullable`1<bool> IsLong { get; protected set; }
    public Nullable`1<bool> IsReadOnly { get; protected set; }
    public Nullable`1<bool> IsUnique { get; protected set; }
    public Nullable`1<int> NumericPrecision { get; protected set; }
    public Nullable`1<int> NumericScale { get; protected set; }
    public string UdtAssemblyQualifiedName { get; protected set; }
    public Type DataType { get; protected set; }
    public string DataTypeName { get; protected set; }
    public object Item { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowDBNull();
    [CompilerGeneratedAttribute]
protected void set_AllowDBNull(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BaseCatalogName();
    [CompilerGeneratedAttribute]
protected void set_BaseCatalogName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseColumnName();
    [CompilerGeneratedAttribute]
protected void set_BaseColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseSchemaName();
    [CompilerGeneratedAttribute]
protected void set_BaseSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseServerName();
    [CompilerGeneratedAttribute]
protected void set_BaseServerName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseTableName();
    [CompilerGeneratedAttribute]
protected void set_BaseTableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
protected void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnOrdinal();
    [CompilerGeneratedAttribute]
protected void set_ColumnOrdinal(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnSize();
    [CompilerGeneratedAttribute]
protected void set_ColumnSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAliased();
    [CompilerGeneratedAttribute]
protected void set_IsAliased(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAutoIncrement();
    [CompilerGeneratedAttribute]
protected void set_IsAutoIncrement(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsExpression();
    [CompilerGeneratedAttribute]
protected void set_IsExpression(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsHidden();
    [CompilerGeneratedAttribute]
protected void set_IsHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsIdentity();
    [CompilerGeneratedAttribute]
protected void set_IsIdentity(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsKey();
    [CompilerGeneratedAttribute]
protected void set_IsKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsLong();
    [CompilerGeneratedAttribute]
protected void set_IsLong(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReadOnly();
    [CompilerGeneratedAttribute]
protected void set_IsReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnique();
    [CompilerGeneratedAttribute]
protected void set_IsUnique(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericPrecision();
    [CompilerGeneratedAttribute]
protected void set_NumericPrecision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericScale();
    [CompilerGeneratedAttribute]
protected void set_NumericScale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UdtAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
protected void set_UdtAssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
protected void set_DataType(Type value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
protected void set_DataTypeName(string value);
    public virtual object get_Item(string property);
}
public abstract class System.Data.Common.DbCommand : object {
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public DbConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    public bool DesignTimeVisible { get; public set; }
    public DbParameterCollection Parameters { get; }
    private IDbConnection System.Data.IDbCommand.Connection { get; private set; }
    private IDataParameterCollection System.Data.IDbCommand.Parameters { get; }
    private IDbTransaction System.Data.IDbCommand.Transaction { get; private set; }
    public DbTransaction Transaction { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    protected abstract virtual DbConnection get_DbConnection();
    protected abstract virtual void set_DbConnection(DbConnection value);
    protected abstract virtual DbParameterCollection get_DbParameterCollection();
    protected abstract virtual DbTransaction get_DbTransaction();
    protected abstract virtual void set_DbTransaction(DbTransaction value);
    public abstract virtual bool get_DesignTimeVisible();
    public abstract virtual void set_DesignTimeVisible(bool value);
    public DbParameterCollection get_Parameters();
    private sealed virtual override IDbConnection System.Data.IDbCommand.get_Connection();
    private sealed virtual override void System.Data.IDbCommand.set_Connection(IDbConnection value);
    private sealed virtual override IDataParameterCollection System.Data.IDbCommand.get_Parameters();
    private sealed virtual override IDbTransaction System.Data.IDbCommand.get_Transaction();
    private sealed virtual override void System.Data.IDbCommand.set_Transaction(IDbTransaction value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    public abstract virtual void Cancel();
    protected abstract virtual DbParameter CreateDbParameter();
    public DbParameter CreateParameter();
    protected abstract virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public abstract virtual int ExecuteNonQuery();
    public Task`1<int> ExecuteNonQueryAsync();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public DbDataReader ExecuteReader();
    public DbDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<DbDataReader> ExecuteReaderAsync();
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public abstract virtual object ExecuteScalar();
    public Task`1<object> ExecuteScalarAsync();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public abstract virtual void Prepare();
    private sealed virtual override IDbDataParameter System.Data.IDbCommand.CreateParameter();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public abstract class System.Data.Common.DbConnection : object {
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public string DataSource { get; }
    public string ServerVersion { get; }
    public ConnectionState State { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual string get_DataSource();
    public abstract virtual string get_ServerVersion();
    public abstract virtual ConnectionState get_State();
    public virtual void add_StateChange(StateChangeEventHandler value);
    public virtual void remove_StateChange(StateChangeEventHandler value);
    protected abstract virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public DbTransaction BeginTransaction();
    public DbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public abstract virtual void ChangeDatabase(string databaseName);
    public abstract virtual void Close();
    public DbCommand CreateCommand();
    protected abstract virtual DbCommand CreateDbCommand();
    protected virtual void OnStateChange(StateChangeEventArgs stateChange);
    public abstract virtual void Open();
    public Task OpenAsync();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction();
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction(IsolationLevel isolationLevel);
    private sealed virtual override IDbCommand System.Data.IDbConnection.CreateCommand();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DbConnectionStringBuilder : object {
    public string ConnectionString { get; public set; }
    public int Count { get; }
    public object Item { get; public set; }
    public ICollection Keys { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    public ICollection Values { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public virtual int get_Count();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual ICollection get_Keys();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object keyword);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object keyword, object value);
    public virtual ICollection get_Values();
    public void Add(string keyword, object value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override void System.Collections.IDictionary.Add(object keyword, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object keyword);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object keyword);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public virtual bool TryGetValue(string keyword, Object& value);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataReader : object {
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    public int VisibleFieldCount { get; }
    public abstract virtual int get_Depth();
    public abstract virtual int get_FieldCount();
    public abstract virtual bool get_HasRows();
    public abstract virtual bool get_IsClosed();
    public abstract virtual object get_Item(int ordinal);
    public abstract virtual object get_Item(string name);
    public abstract virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public DbDataReader GetData(int ordinal);
    public abstract virtual string GetDataTypeName(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual Type GetFieldType(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public Task`1<T> GetFieldValueAsync(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    public abstract virtual string GetName(int ordinal);
    public abstract virtual int GetOrdinal(string name);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual Stream GetStream(int ordinal);
    public abstract virtual string GetString(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public abstract virtual object GetValue(int ordinal);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int ordinal);
    public Task`1<bool> IsDBNullAsync(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual bool NextResult();
    public Task`1<bool> NextResultAsync();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public abstract virtual bool Read();
    public Task`1<bool> ReadAsync();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    private sealed virtual override void System.Data.IDataReader.Close();
    private sealed virtual override DataTable System.Data.IDataReader.GetSchemaTable();
}
[ExtensionAttribute]
public static class System.Data.Common.DbDataReaderExtensions : object {
    [ExtensionAttribute]
public static ReadOnlyCollection`1<DbColumn> GetColumnSchema(DbDataReader reader);
    [ExtensionAttribute]
public static bool CanGetColumnSchema(DbDataReader reader);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataRecord : object {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public sealed virtual IDataReader GetData(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual DateTime GetDateTime(int i);
    protected virtual DbDataReader GetDbDataReader(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual string GetName(int i);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual string GetString(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int i);
}
public class System.Data.Common.DbEnumerator : object {
    [CompilerGeneratedAttribute]
private object <Current>k__BackingField;
    public object Current { get; }
    public DbEnumerator(IDataReader reader, bool closeReader);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public abstract class System.Data.Common.DbException : Exception {
    protected DbException(string message);
    protected DbException(string message, Exception innerException);
}
public abstract class System.Data.Common.DbParameter : object {
    [CompilerGeneratedAttribute]
private DataRowVersion <System.Data.IDataParameter.SourceVersion>k__BackingField;
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public string ParameterName { get; public set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    private byte System.Data.IDbDataParameter.Precision { get; private set; }
    private byte System.Data.IDbDataParameter.Scale { get; private set; }
    public object Value { get; public set; }
    private DataRowVersion System.Data.IDataParameter.SourceVersion { get; private set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual bool get_SourceColumnNullMapping();
    public abstract virtual void set_SourceColumnNullMapping(bool value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Precision();
    private sealed virtual override void System.Data.IDbDataParameter.set_Precision(byte value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Scale();
    private sealed virtual override void System.Data.IDbDataParameter.set_Scale(byte value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
private sealed virtual override DataRowVersion System.Data.IDataParameter.get_SourceVersion();
    [CompilerGeneratedAttribute]
private sealed virtual override void System.Data.IDataParameter.set_SourceVersion(DataRowVersion value);
    public abstract virtual void ResetDbType();
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbParameterCollection : object {
    public int Count { get; }
    public DbParameter Item { get; public set; }
    public DbParameter Item { get; public set; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.IDataParameterCollection.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public abstract virtual int get_Count();
    public DbParameter get_Item(int index);
    public void set_Item(int index, DbParameter value);
    public DbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, DbParameter value);
    public abstract virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IDataParameterCollection.get_Item(string parameterName);
    private sealed virtual override void System.Data.IDataParameterCollection.set_Item(string parameterName, object value);
    public abstract virtual int Add(object value);
    public abstract virtual void AddRange(Array values);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(object value);
    public abstract virtual bool Contains(string value);
    public abstract virtual void CopyTo(Array array, int index);
    public abstract virtual IEnumerator GetEnumerator();
    protected abstract virtual DbParameter GetParameter(int index);
    protected abstract virtual DbParameter GetParameter(string parameterName);
    public abstract virtual int IndexOf(object value);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void Insert(int index, object value);
    public abstract virtual void Remove(object value);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void RemoveAt(string parameterName);
    protected abstract virtual void SetParameter(int index, DbParameter value);
    protected abstract virtual void SetParameter(string parameterName, DbParameter value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
}
public abstract class System.Data.Common.DbProviderFactory : object {
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbParameter CreateParameter();
}
public abstract class System.Data.Common.DbTransaction : object {
    [CompilerGeneratedAttribute]
private IDbConnection <System.Data.IDbTransaction.Connection>k__BackingField;
    public DbConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    private IDbConnection System.Data.IDbTransaction.Connection { get; }
    public DbConnection get_Connection();
    protected abstract virtual DbConnection get_DbConnection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
private sealed virtual override IDbConnection System.Data.IDbTransaction.get_Connection();
    public abstract virtual void Commit();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Rollback();
}
public interface System.Data.Common.IDbColumnSchemaGenerator {
    public abstract virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
}
[FlagsAttribute]
public enum System.Data.ConnectionState : Enum {
    public int value__;
    public static ConnectionState Broken;
    public static ConnectionState Closed;
    public static ConnectionState Connecting;
    public static ConnectionState Executing;
    public static ConnectionState Fetching;
    public static ConnectionState Open;
}
public enum System.Data.DataRowVersion : Enum {
    public int value__;
    public static DataRowVersion Default;
}
public class System.Data.DataTable : object {
}
public enum System.Data.DbType : Enum {
    public int value__;
    public static DbType AnsiString;
    public static DbType AnsiStringFixedLength;
    public static DbType Binary;
    public static DbType Boolean;
    public static DbType Byte;
    public static DbType Currency;
    public static DbType Date;
    public static DbType DateTime;
    public static DbType DateTime2;
    public static DbType DateTimeOffset;
    public static DbType Decimal;
    public static DbType Double;
    public static DbType Guid;
    public static DbType Int16;
    public static DbType Int32;
    public static DbType Int64;
    public static DbType Object;
    public static DbType SByte;
    public static DbType Single;
    public static DbType String;
    public static DbType StringFixedLength;
    public static DbType Time;
    public static DbType UInt16;
    public static DbType UInt32;
    public static DbType UInt64;
    public static DbType VarNumeric;
    public static DbType Xml;
}
public interface System.Data.IDataParameter {
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; }
    public string ParameterName { get; public set; }
    public string SourceColumn { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual DataRowVersion get_SourceVersion();
    public abstract virtual void set_SourceVersion(DataRowVersion value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataParameterCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string parameterName);
    public abstract virtual void set_Item(string parameterName, object value);
    public abstract virtual bool Contains(string parameterName);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void RemoveAt(string parameterName);
}
public interface System.Data.IDataReader {
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public abstract virtual int get_Depth();
    public abstract virtual bool get_IsClosed();
    public abstract virtual int get_RecordsAffected();
    public abstract virtual void Close();
    public abstract virtual DataTable GetSchemaTable();
    public abstract virtual bool NextResult();
    public abstract virtual bool Read();
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataRecord {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public abstract virtual IDataReader GetData(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual string GetName(int i);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual string GetString(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int i);
}
public interface System.Data.IDbCommand {
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDbConnection Connection { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public IDbTransaction Transaction { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual void set_Connection(IDbConnection value);
    public abstract virtual IDataParameterCollection get_Parameters();
    public abstract virtual IDbTransaction get_Transaction();
    public abstract virtual void set_Transaction(IDbTransaction value);
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    public abstract virtual void Cancel();
    public abstract virtual IDbDataParameter CreateParameter();
    public abstract virtual int ExecuteNonQuery();
    public abstract virtual IDataReader ExecuteReader();
    public abstract virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public abstract virtual object ExecuteScalar();
    public abstract virtual void Prepare();
}
public interface System.Data.IDbConnection {
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual ConnectionState get_State();
    public abstract virtual IDbTransaction BeginTransaction();
    public abstract virtual IDbTransaction BeginTransaction(IsolationLevel il);
    public abstract virtual void ChangeDatabase(string databaseName);
    public abstract virtual void Close();
    public abstract virtual IDbCommand CreateCommand();
    public abstract virtual void Open();
}
public interface System.Data.IDbDataParameter {
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    public abstract virtual byte get_Precision();
    public abstract virtual void set_Precision(byte value);
    public abstract virtual byte get_Scale();
    public abstract virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
}
public interface System.Data.IDbTransaction {
    public IDbConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
}
public enum System.Data.IsolationLevel : Enum {
    public int value__;
    public static IsolationLevel Chaos;
    public static IsolationLevel ReadCommitted;
    public static IsolationLevel ReadUncommitted;
    public static IsolationLevel RepeatableRead;
    public static IsolationLevel Serializable;
    public static IsolationLevel Snapshot;
    public static IsolationLevel Unspecified;
}
public enum System.Data.ParameterDirection : Enum {
    public int value__;
    public static ParameterDirection Input;
    public static ParameterDirection InputOutput;
    public static ParameterDirection Output;
    public static ParameterDirection ReturnValue;
}
public class System.Data.StateChangeEventArgs : EventArgs {
    public ConnectionState CurrentState { get; }
    public ConnectionState OriginalState { get; }
    public StateChangeEventArgs(ConnectionState originalState, ConnectionState currentState);
    public ConnectionState get_CurrentState();
    public ConnectionState get_OriginalState();
}
public class System.Data.StateChangeEventHandler : MulticastDelegate {
    public StateChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StateChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StateChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.UpdateRowSource : Enum {
    public int value__;
    public static UpdateRowSource Both;
    public static UpdateRowSource FirstReturnedRecord;
    public static UpdateRowSource None;
    public static UpdateRowSource OutputParameters;
}
public class System.DBNull : object {
    public static DBNull Value;
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
}
