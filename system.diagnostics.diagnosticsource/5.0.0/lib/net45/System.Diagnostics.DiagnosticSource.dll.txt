internal static class FxResources.System.Diagnostics.DiagnosticSource.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.Activity : object {
    private static IEnumerable`1<KeyValuePair`2<string, string>> s_emptyBaggageTags;
    private static IEnumerable`1<KeyValuePair`2<string, object>> s_emptyTagObjects;
    private static IEnumerable`1<ActivityLink> s_emptyLinks;
    private static IEnumerable`1<ActivityEvent> s_emptyEvents;
    private static ActivitySource s_defaultSource;
    private static byte ActivityTraceFlagsIsSet;
    private static int RequestIdMaxLength;
    private static string s_uniqSuffix;
    private static long s_currentRootId;
    private static ActivityIdFormat s_defaultIdFormat;
    [CompilerGeneratedAttribute]
private static bool <ForceDefaultIdFormat>k__BackingField;
    private string _traceState;
    private State _state;
    private int _currentChildId;
    private string _id;
    private string _rootId;
    private string _parentId;
    private string _parentSpanId;
    private string _traceId;
    private string _spanId;
    private byte _w3CIdFlags;
    private TagsLinkedList _tags;
    private LinkedList`1<KeyValuePair`2<string, string>> _baggage;
    private LinkedList`1<ActivityLink> _links;
    private LinkedList`1<ActivityEvent> _events;
    private Dictionary`2<string, object> _customProperties;
    private string _displayName;
    [CompilerGeneratedAttribute]
private ActivityKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivitySource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAllDataRequested>k__BackingField;
    private static string FieldKey;
    private static TimeSync timeSync;
    private static Timer syncTimeUpdater;
    public static bool ForceDefaultIdFormat { get; public set; }
    public ActivityKind Kind { get; private set; }
    public string OperationName { get; }
    public string DisplayName { get; public set; }
    public ActivitySource Source { get; private set; }
    [NullableAttribute("2")]
public Activity Parent { get; private set; }
    public TimeSpan Duration { get; private set; }
    public DateTime StartTimeUtc { get; private set; }
    [NullableAttribute("2")]
public string Id { get; }
    [NullableAttribute("2")]
public string ParentId { get; }
    [NullableAttribute("2")]
public string RootId { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> Tags { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> TagObjects { get; }
    public IEnumerable`1<ActivityEvent> Events { get; }
    public IEnumerable`1<ActivityLink> Links { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> Baggage { get; }
    public ActivityContext Context { get; }
    [NullableAttribute("2")]
public string TraceStateString { get; public set; }
    public ActivitySpanId SpanId { get; }
    public ActivityTraceId TraceId { get; }
    public bool Recorded { get; }
    public bool IsAllDataRequested { get; public set; }
    public ActivityTraceFlags ActivityTraceFlags { get; public set; }
    public ActivitySpanId ParentSpanId { get; }
    public static ActivityIdFormat DefaultIdFormat { get; public set; }
    private bool W3CIdFlagsSet { get; }
    private bool IsFinished { get; private set; }
    public ActivityIdFormat IdFormat { get; private set; }
    public static Activity Current { get; public set; }
    public Activity(string operationName);
    private static Activity();
    [CompilerGeneratedAttribute]
public static bool get_ForceDefaultIdFormat();
    [CompilerGeneratedAttribute]
public static void set_ForceDefaultIdFormat(bool value);
    [CompilerGeneratedAttribute]
public ActivityKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(ActivityKind value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public ActivitySource get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(ActivitySource value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Activity get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Activity value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
private void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
private void set_StartTimeUtc(DateTime value);
    [NullableContextAttribute("2")]
[SecuritySafeCriticalAttribute]
public string get_Id();
    [NullableContextAttribute("2")]
public string get_ParentId();
    [NullableContextAttribute("2")]
public string get_RootId();
    public IEnumerable`1<KeyValuePair`2<string, string>> get_Tags();
    public IEnumerable`1<KeyValuePair`2<string, object>> get_TagObjects();
    public IEnumerable`1<ActivityEvent> get_Events();
    public IEnumerable`1<ActivityLink> get_Links();
    public IEnumerable`1<KeyValuePair`2<string, string>> get_Baggage();
    public string GetBaggageItem(string key);
    public Activity AddTag(string key, string value);
    public Activity AddTag(string key, object value);
    public Activity SetTag(string key, object value);
    public Activity AddEvent(ActivityEvent e);
    public Activity AddBaggage(string key, string value);
    public Activity SetParentId(string parentId);
    public Activity SetParentId(ActivityTraceId traceId, ActivitySpanId spanId, ActivityTraceFlags activityTraceFlags);
    public Activity SetStartTime(DateTime startTimeUtc);
    public Activity SetEndTime(DateTime endTimeUtc);
    public ActivityContext get_Context();
    public Activity Start();
    public void Stop();
    [NullableContextAttribute("2")]
public string get_TraceStateString();
    [NullableContextAttribute("2")]
public void set_TraceStateString(string value);
    [SecuritySafeCriticalAttribute]
public ActivitySpanId get_SpanId();
    public ActivityTraceId get_TraceId();
    public bool get_Recorded();
    [CompilerGeneratedAttribute]
public bool get_IsAllDataRequested();
    [CompilerGeneratedAttribute]
public void set_IsAllDataRequested(bool value);
    public ActivityTraceFlags get_ActivityTraceFlags();
    public void set_ActivityTraceFlags(ActivityTraceFlags value);
    [SecuritySafeCriticalAttribute]
public ActivitySpanId get_ParentSpanId();
    public static ActivityIdFormat get_DefaultIdFormat();
    public static void set_DefaultIdFormat(ActivityIdFormat value);
    public Activity SetIdFormat(ActivityIdFormat format);
    private static bool IsW3CId(string id);
    [SecuritySafeCriticalAttribute]
internal static bool TryConvertIdToContext(string traceParent, string traceState, ActivityContext& context);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void SetCustomProperty(string propertyName, object propertyValue);
    public object GetCustomProperty(string propertyName);
    internal static Activity CreateAndStart(ActivitySource source, string name, ActivityKind kind, string parentId, ActivityContext parentContext, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, DateTimeOffset startTime, ActivityTagsCollection samplerTags, ActivitySamplingResult request);
    private void GenerateW3CId();
    private static void NotifyError(Exception exception);
    private string GenerateHierarchicalId();
    private string GetRootId(string id);
    private string AppendSuffix(string parentId, string suffix, char delimiter);
    [SecuritySafeCriticalAttribute]
private static long GetRandomNumber();
    private static bool ValidateSetCurrent(Activity activity);
    [SecuritySafeCriticalAttribute]
private bool TrySetTraceIdFromParent();
    [SecuritySafeCriticalAttribute]
private void TrySetTraceFlagsFromParent();
    private bool get_W3CIdFlagsSet();
    private bool get_IsFinished();
    private void set_IsFinished(bool value);
    public ActivityIdFormat get_IdFormat();
    private void set_IdFormat(ActivityIdFormat value);
    [SecuritySafeCriticalAttribute]
public static Activity get_Current();
    [SecuritySafeCriticalAttribute]
public static void set_Current(Activity value);
    [SecuritySafeCriticalAttribute]
private static void SetCurrent(Activity activity);
    private static string GenerateRootId();
    internal static DateTime GetUtcNow();
    private static void Sync();
    [SecuritySafeCriticalAttribute]
private static Timer InitalizeSyncTimer();
    [IteratorStateMachineAttribute("System.Diagnostics.Activity/<<get_Baggage>g__Iterate|71_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, string>> <get_Baggage>g__Iterate|71_0(Activity activity);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityContext : ValueType {
    [CompilerGeneratedAttribute]
private ActivityTraceId <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivitySpanId <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityTraceFlags <TraceFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemote>k__BackingField;
    public ActivityTraceId TraceId { get; }
    public ActivitySpanId SpanId { get; }
    public ActivityTraceFlags TraceFlags { get; }
    public string TraceState { get; }
    public bool IsRemote { get; }
    public ActivityContext(ActivityTraceId traceId, ActivitySpanId spanId, ActivityTraceFlags traceFlags, string traceState, bool isRemote);
    [CompilerGeneratedAttribute]
public ActivityTraceId get_TraceId();
    [CompilerGeneratedAttribute]
public ActivitySpanId get_SpanId();
    [CompilerGeneratedAttribute]
public ActivityTraceFlags get_TraceFlags();
    [CompilerGeneratedAttribute]
public string get_TraceState();
    [CompilerGeneratedAttribute]
public bool get_IsRemote();
    [NullableContextAttribute("1")]
public static bool TryParse(string traceParent, string traceState, ActivityContext& context);
    [NullableContextAttribute("1")]
public static ActivityContext Parse(string traceParent, string traceState);
    public sealed virtual bool Equals(ActivityContext value);
    public virtual bool Equals(object obj);
    public static bool op_Equality(ActivityContext left, ActivityContext right);
    public static bool op_Inequality(ActivityContext left, ActivityContext right);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityCreationOptions`1 : ValueType {
    private ActivityTagsCollection _samplerTags;
    private ActivityContext _context;
    [CompilerGeneratedAttribute]
private ActivitySource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, object>> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ActivityLink> <Links>k__BackingField;
    public ActivitySource Source { get; }
    public string Name { get; }
    public ActivityKind Kind { get; }
    public T Parent { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> Tags { get; }
    [NullableAttribute("2")]
public IEnumerable`1<ActivityLink> Links { get; }
    public ActivityTagsCollection SamplingTags { get; }
    public ActivityTraceId TraceId { get; }
    internal ActivityCreationOptions`1(ActivitySource source, string name, T parent, ActivityKind kind, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links);
    [CompilerGeneratedAttribute]
public ActivitySource get_Source();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ActivityKind get_Kind();
    [CompilerGeneratedAttribute]
public T get_Parent();
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, object>> get_Tags();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IEnumerable`1<ActivityLink> get_Links();
    [SecuritySafeCriticalAttribute]
public ActivityTagsCollection get_SamplingTags();
    [SecuritySafeCriticalAttribute]
public ActivityTraceId get_TraceId();
    internal ActivityTagsCollection GetSamplingTags();
    internal ActivityContext GetContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityEvent : ValueType {
    private static ActivityTagsCollection s_emptyTags;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, object>> <Tags>k__BackingField;
    public string Name { get; }
    public DateTimeOffset Timestamp { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> Tags { get; }
    public ActivityEvent(string name);
    public ActivityEvent(string name, DateTimeOffset timestamp, ActivityTagsCollection tags);
    private static ActivityEvent();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, object>> get_Tags();
}
public enum System.Diagnostics.ActivityIdFormat : Enum {
    public int value__;
    public static ActivityIdFormat Unknown;
    public static ActivityIdFormat Hierarchical;
    public static ActivityIdFormat W3C;
}
public enum System.Diagnostics.ActivityKind : Enum {
    public int value__;
    public static ActivityKind Internal;
    public static ActivityKind Server;
    public static ActivityKind Client;
    public static ActivityKind Producer;
    public static ActivityKind Consumer;
}
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityLink : ValueType {
    [CompilerGeneratedAttribute]
private ActivityContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, object>> <Tags>k__BackingField;
    public ActivityContext Context { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, object>> Tags { get; }
    [NullableContextAttribute("2")]
public ActivityLink(ActivityContext context, ActivityTagsCollection tags);
    [CompilerGeneratedAttribute]
public ActivityContext get_Context();
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, object>> get_Tags();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ActivityLink value);
    public static bool op_Equality(ActivityLink left, ActivityLink right);
    public static bool op_Inequality(ActivityLink left, ActivityLink right);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.ActivityListener : object {
    [CompilerGeneratedAttribute]
private Action`1<Activity> <ActivityStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Activity> <ActivityStopped>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ActivitySource, bool> <ShouldListenTo>k__BackingField;
    [CompilerGeneratedAttribute]
private SampleActivity`1<string> <SampleUsingParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private SampleActivity`1<ActivityContext> <Sample>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<Activity> ActivityStarted { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<Activity> ActivityStopped { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ActivitySource, bool> ShouldListenTo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SampleActivity`1<string> SampleUsingParentId { get; public set; }
    public SampleActivity`1<ActivityContext> Sample { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<Activity> get_ActivityStarted();
    [CompilerGeneratedAttribute]
public void set_ActivityStarted(Action`1<Activity> value);
    [CompilerGeneratedAttribute]
public Action`1<Activity> get_ActivityStopped();
    [CompilerGeneratedAttribute]
public void set_ActivityStopped(Action`1<Activity> value);
    [CompilerGeneratedAttribute]
public Func`2<ActivitySource, bool> get_ShouldListenTo();
    [CompilerGeneratedAttribute]
public void set_ShouldListenTo(Func`2<ActivitySource, bool> value);
    [CompilerGeneratedAttribute]
public SampleActivity`1<string> get_SampleUsingParentId();
    [CompilerGeneratedAttribute]
public void set_SampleUsingParentId(SampleActivity`1<string> value);
    [CompilerGeneratedAttribute]
public SampleActivity`1<ActivityContext> get_Sample();
    [CompilerGeneratedAttribute]
public void set_Sample(SampleActivity`1<ActivityContext> value);
    public sealed virtual void Dispose();
}
public enum System.Diagnostics.ActivitySamplingResult : Enum {
    public int value__;
    public static ActivitySamplingResult None;
    public static ActivitySamplingResult PropagationData;
    public static ActivitySamplingResult AllData;
    public static ActivitySamplingResult AllDataAndRecorded;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.ActivitySource : object {
    private static SynchronizedList`1<ActivitySource> s_activeSources;
    private static SynchronizedList`1<ActivityListener> s_allListeners;
    private SynchronizedList`1<ActivityListener> _listeners;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public string Version { get; }
    public ActivitySource(string name, string version);
    private static ActivitySource();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Version();
    public bool HasListeners();
    public Activity StartActivity(string name, ActivityKind kind);
    [NullableContextAttribute("2")]
public Activity StartActivity(string name, ActivityKind kind, ActivityContext parentContext, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, DateTimeOffset startTime);
    public Activity StartActivity(string name, ActivityKind kind, string parentId, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, DateTimeOffset startTime);
    private Activity StartActivity(string name, ActivityKind kind, ActivityContext context, string parentId, IEnumerable`1<KeyValuePair`2<string, object>> tags, IEnumerable`1<ActivityLink> links, DateTimeOffset startTime);
    public sealed virtual void Dispose();
    public static void AddActivityListener(ActivityListener listener);
    internal void AddListener(ActivityListener listener);
    internal static void DetachListener(ActivityListener listener);
    internal void NotifyActivityStart(Activity activity);
    internal void NotifyActivityStop(Activity activity);
}
[IsReadOnlyAttribute]
[SecuritySafeCriticalAttribute]
public class System.Diagnostics.ActivitySpanId : ValueType {
    private string _hexString;
    internal ActivitySpanId(string hexString);
    private ActivitySpanId(ReadOnlySpan`1<byte> idData);
    public static ActivitySpanId CreateRandom();
    public static ActivitySpanId CreateFromBytes(ReadOnlySpan`1<byte> idData);
    public static ActivitySpanId CreateFromUtf8String(ReadOnlySpan`1<byte> idData);
    public static ActivitySpanId CreateFromString(ReadOnlySpan`1<char> idData);
    [NullableContextAttribute("1")]
public string ToHexString();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(ActivitySpanId spanId1, ActivitySpanId spandId2);
    public static bool op_Inequality(ActivitySpanId spanId1, ActivitySpanId spandId2);
    public sealed virtual bool Equals(ActivitySpanId spanId);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void CopyTo(Span`1<byte> destination);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.ActivityTagsCollection : object {
    private List`1<KeyValuePair`2<string, object>> _list;
    [NullableAttribute("2")]
public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<object> Values { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public ActivityTagsCollection(IEnumerable`1<KeyValuePair`2<string, object>> list);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Count();
    public sealed virtual void Add(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool TryGetValue(string key, Object& value);
}
[FlagsAttribute]
public enum System.Diagnostics.ActivityTraceFlags : Enum {
    public int value__;
    public static ActivityTraceFlags None;
    public static ActivityTraceFlags Recorded;
}
[IsReadOnlyAttribute]
[SecuritySafeCriticalAttribute]
public class System.Diagnostics.ActivityTraceId : ValueType {
    private string _hexString;
    internal ActivityTraceId(string hexString);
    private ActivityTraceId(ReadOnlySpan`1<byte> idData);
    public static ActivityTraceId CreateRandom();
    public static ActivityTraceId CreateFromBytes(ReadOnlySpan`1<byte> idData);
    public static ActivityTraceId CreateFromUtf8String(ReadOnlySpan`1<byte> idData);
    public static ActivityTraceId CreateFromString(ReadOnlySpan`1<char> idData);
    [NullableContextAttribute("1")]
public string ToHexString();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(ActivityTraceId traceId1, ActivityTraceId traceId2);
    public static bool op_Inequality(ActivityTraceId traceId1, ActivityTraceId traceId2);
    public sealed virtual bool Equals(ActivityTraceId traceId);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void CopyTo(Span`1<byte> destination);
    internal static void SetToRandomBytes(Span`1<byte> outBytes);
    internal static void SetSpanFromHexChars(ReadOnlySpan`1<char> charData, Span`1<byte> outBytes);
    internal static byte HexByteFromChars(char char1, char char2);
    internal static bool IsLowerCaseHexAndNotAllZeros(ReadOnlySpan`1<char> idData);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes All;
}
[AttributeUsageAttribute("352")]
internal class System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <MemberSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    public string MemberSignature { get; }
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public Type Type { get; }
    public string TypeName { get; }
    public string AssemblyName { get; }
    public string Condition { get; public set; }
    public DynamicDependencyAttribute(string memberSignature);
    public DynamicDependencyAttribute(string memberSignature, Type type);
    public DynamicDependencyAttribute(string memberSignature, string typeName, string assemblyName);
    public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, Type type);
    public DynamicDependencyAttribute(DynamicallyAccessedMemberTypes memberTypes, string typeName, string assemblyName);
    [CompilerGeneratedAttribute]
public string get_MemberSignature();
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Diagnostics.DiagnosticListener : DiagnosticSource {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private DiagnosticSubscription modreq(System.Runtime.CompilerServices.IsVolatile) _subscriptions;
    private DiagnosticListener _next;
    private bool _disposed;
    private static DiagnosticListener s_allListeners;
    private static AllListenerObservable s_allListenerObservable;
    private static object s_allListenersLock;
    public static IObservable`1<DiagnosticListener> AllListeners { get; }
    public string Name { get; private set; }
    public DiagnosticListener(string name);
    private static DiagnosticListener();
    public static IObservable`1<DiagnosticListener> get_AllListeners();
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual string ToString();
    public bool IsEnabled();
    public virtual bool IsEnabled(string name);
    [NullableContextAttribute("2")]
public virtual bool IsEnabled(string name, object arg1, object arg2);
    public virtual void Write(string name, object value);
    private IDisposable SubscribeInternal(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled1Arg, Func`4<string, object, object, bool> isEnabled3Arg, Action`2<Activity, object> onActivityImport, Action`2<Activity, object> onActivityExport);
    public virtual void OnActivityImport(Activity activity, object payload);
    public virtual void OnActivityExport(Activity activity, object payload);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled, Action`2<Activity, object> onActivityImport, Action`2<Activity, object> onActivityExport);
    [CompilerGeneratedAttribute]
private bool <Subscribe>b__3_0(string name);
    [CompilerGeneratedAttribute]
private bool <Subscribe>b__27_0(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Diagnostics.DiagnosticSource : object {
    public abstract virtual void Write(string name, object value);
    public abstract virtual bool IsEnabled(string name);
    [NullableContextAttribute("2")]
public virtual bool IsEnabled(string name, object arg1, object arg2);
    public Activity StartActivity(Activity activity, object args);
    public void StopActivity(Activity activity, object args);
    public virtual void OnActivityImport(Activity activity, object payload);
    public virtual void OnActivityExport(Activity activity, object payload);
}
[EventSourceAttribute]
internal class System.Diagnostics.DiagnosticSourceEventSource : EventSource {
    public static DiagnosticSourceEventSource Logger;
    private string AspNetCoreHostingKeywordValue;
    private string EntityFrameworkCoreCommandsKeywordValue;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    private FilterAndTransform _specs;
    private FilterAndTransform _activitySourceSpecs;
    private ActivityListener _activityListener;
    private static DiagnosticSourceEventSource();
    [EventAttribute("1")]
public void Message(string Message);
    [EventAttribute("3")]
private void EventJson(string SourceName, string EventName, string ArgmentsJson);
    [EventAttribute("10")]
private void NewDiagnosticListener(string SourceName);
    [EventAttribute("11")]
private void ActivityStart(string SourceName, string ActivityName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("12")]
private void ActivityStop(string SourceName, string ActivityName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    private static string ToJson(IEnumerable`1<KeyValuePair`2<string, string>> keyValues);
    [NonEventAttribute]
protected virtual void OnEventCommand(EventCommandEventArgs command);
    private static string NewLineSeparate(string str1, string str2);
    [NonEventAttribute]
private void BreakPointWithDebuggerFuncEval();
}
internal class System.Diagnostics.HttpHandlerDiagnosticListener : DiagnosticListener {
    internal static HttpHandlerDiagnosticListener s_instance;
    private static string DiagnosticListenerName;
    private static string ActivityName;
    private static string RequestStartName;
    private static string RequestStopName;
    private static string RequestStopExName;
    private static string InitializationFailed;
    private static string RequestIdHeaderName;
    private static string CorrelationContextHeaderName;
    private static string TraceParentHeaderName;
    private static string TraceStateHeaderName;
    private bool initialized;
    private static FieldInfo s_connectionGroupListField;
    private static Type s_connectionGroupType;
    private static FieldInfo s_connectionListField;
    private static Type s_connectionType;
    private static FieldInfo s_writeListField;
    private static Func`2<HttpWebRequest, HttpWebResponse> s_httpResponseAccessor;
    private static Func`2<HttpWebRequest, int> s_autoRedirectsAccessor;
    private static Func`2<HttpWebRequest, object> s_coreResponseAccessor;
    private static Func`2<object, HttpStatusCode> s_coreStatusCodeAccessor;
    private static Func`2<object, WebHeaderCollection> s_coreHeadersAccessor;
    private static Type s_coreResponseDataType;
    private static HttpHandlerDiagnosticListener();
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer);
    private void Initialize();
    private void RaiseRequestEvent(HttpWebRequest request);
    private void RaiseResponseEvent(HttpWebRequest request, HttpWebResponse response);
    private void RaiseResponseEvent(HttpWebRequest request, HttpStatusCode statusCode, WebHeaderCollection headers);
    private bool IsLastResponse(HttpWebRequest request, HttpStatusCode statusCode);
    private static void PrepareReflectionObjects();
    private static void PerformInjection();
    private static Func`2<TClass, TField> CreateFieldGetter(string fieldName, BindingFlags flags);
    private static Func`2<object, TField> CreateFieldGetter(Type classType, string fieldName, BindingFlags flags);
}
public class System.Diagnostics.SampleActivity`1 : MulticastDelegate {
    public SampleActivity`1(object object, IntPtr method);
    public virtual ActivitySamplingResult Invoke(ActivityCreationOptions`1& options);
    public virtual IAsyncResult BeginInvoke(ActivityCreationOptions`1& options, AsyncCallback callback, object object);
    public virtual ActivitySamplingResult EndInvoke(ActivityCreationOptions`1& options, IAsyncResult result);
}
internal class System.Diagnostics.SynchronizedList`1 : object {
    private List`1<T> _list;
    private UInt32 _version;
    public int Count { get; }
    public void Add(T item);
    public bool AddIfNotExist(T item);
    public bool Remove(T item);
    public int get_Count();
    public void EnumWithFunc(Function`2<T, TParent> func, ActivityCreationOptions`1& data, ActivitySamplingResult& samplingResult, ActivityCreationOptions`1& dataWithContext);
    public void EnumWithAction(Action`2<T, object> action, object arg);
}
internal static class System.HexConverter : object {
    public static ReadOnlySpan`1<byte> CharToHexLookup { get; }
    public static void ToBytesBuffer(byte value, Span`1<byte> buffer, int startingIndex, Casing casing);
    [SecuritySafeCriticalAttribute]
public static void ToCharsBuffer(byte value, Span`1<char> buffer, int startingIndex, Casing casing);
    public static void EncodeToUtf16(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, Casing casing);
    [SecuritySafeCriticalAttribute]
public static string ToString(ReadOnlySpan`1<byte> bytes, Casing casing);
    public static char ToCharUpper(int value);
    public static char ToCharLower(int value);
    public static bool TryDecodeFromUtf16(ReadOnlySpan`1<char> chars, Span`1<byte> bytes);
    public static bool TryDecodeFromUtf16(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, Int32& charsProcessed);
    public static int FromChar(int c);
    public static int FromUpperChar(int c);
    public static int FromLowerChar(int c);
    public static bool IsHexChar(int c);
    public static bool IsHexUpperChar(int c);
    public static bool IsHexLowerChar(int c);
    public static ReadOnlySpan`1<byte> get_CharToHexLookup();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ActivityIdFormatInvalid { get; }
    internal static string ActivityNotRunning { get; }
    internal static string ActivityNotStarted { get; }
    internal static string ActivityStartAlreadyStarted { get; }
    internal static string EndTimeNotUtc { get; }
    internal static string OperationNameInvalid { get; }
    internal static string ParentIdAlreadySet { get; }
    internal static string ParentIdInvalid { get; }
    internal static string SetFormatOnStartedActivity { get; }
    internal static string SetLinkInvalid { get; }
    internal static string SetParentIdOnActivityWithParent { get; }
    internal static string StartTimeNotUtc { get; }
    internal static string KeyAlreadyExist { get; }
    internal static string InvalidTraceParent { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ActivityIdFormatInvalid();
    internal static string get_ActivityNotRunning();
    internal static string get_ActivityNotStarted();
    internal static string get_ActivityStartAlreadyStarted();
    internal static string get_EndTimeNotUtc();
    internal static string get_OperationNameInvalid();
    internal static string get_ParentIdAlreadySet();
    internal static string get_ParentIdInvalid();
    internal static string get_SetFormatOnStartedActivity();
    internal static string get_SetLinkInvalid();
    internal static string get_SetParentIdOnActivityWithParent();
    internal static string get_StartTimeNotUtc();
    internal static string get_KeyAlreadyExist();
    internal static string get_InvalidTraceParent();
}
