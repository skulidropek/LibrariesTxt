internal static class FxResources.System.Diagnostics.Process.SR : object {
}
internal static class Interop : object {
}
[SecurityCriticalAttribute]
public class Microsoft.Win32.SafeHandles.SafeProcessHandle : SafeHandle {
    internal static SafeProcessHandle InvalidHandle;
    private static int DefaultInvalidHandleValue;
    public bool IsInvalid { get; }
    internal SafeProcessHandle(IntPtr handle);
    public SafeProcessHandle(IntPtr handle, bool ownsHandle);
    private static SafeProcessHandle();
    internal void InitialSetHandle(IntPtr h);
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeThreadHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal void InitialSetHandle(IntPtr h);
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeTokenHandle : SafeHandle {
    private static int DefaultInvalidHandleValue;
    internal static SafeTokenHandle InvalidHandle;
    public bool IsInvalid { get; }
    internal SafeTokenHandle(IntPtr handle);
    public SafeTokenHandle(IntPtr handle, bool ownsHandle);
    private static SafeTokenHandle();
    internal void InitialSetHandle(IntPtr h);
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
}
internal class System.Diagnostics.AsyncStreamReader : object {
    private static int DefaultBufferSize;
    private Stream _stream;
    private Decoder _decoder;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private Action`1<string> _userCallBack;
    private CancellationTokenSource _cts;
    private Task _readToBufferTask;
    private Queue`1<string> _messageQueue;
    private StringBuilder _sb;
    private bool _bLastCarriageReturn;
    private int _currentLinePos;
    internal AsyncStreamReader(Stream stream, Action`1<string> callback, Encoding encoding);
    internal void BeginReadLine();
    internal void CancelOperation();
    [AsyncStateMachineAttribute("System.Diagnostics.AsyncStreamReader/<ReadBufferAsync>d__15")]
private Task ReadBufferAsync();
    private void MoveLinesFromStringBuilderToMessageQueue();
    private bool FlushMessageQueue(bool rethrowInNewThread);
    internal void WaitUtilEOF();
}
public class System.Diagnostics.DataReceivedEventArgs : EventArgs {
    private string _data;
    public string Data { get; }
    internal DataReceivedEventArgs(string data);
    public string get_Data();
}
public class System.Diagnostics.DataReceivedEventHandler : MulticastDelegate {
    public DataReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Diagnostics.ModuleInfo : object {
    internal string _baseName;
    internal string _fileName;
    internal IntPtr _baseOfDll;
    internal IntPtr _entryPoint;
    internal int _sizeOfImage;
}
internal static class System.Diagnostics.NtProcessInfoHelper : object {
    private static int DefaultCachedBufferSize;
    private static Int64[] CachedBuffer;
    private static int GetNewBufferSize(int existingBufferSize, int requiredSize);
    public static ProcessInfo[] GetProcessInfos();
    private static ProcessInfo[] GetProcessInfos(IntPtr dataPtr);
    internal static string GetProcessShortName(string name);
}
internal static class System.Diagnostics.NtProcessManager : object {
    private static int ProcessPerfCounterId;
    private static int ThreadPerfCounterId;
    private static string PerfCounterQueryString;
    internal static int IdleProcessID;
    private static Dictionary`2<string, ValueId> s_valueIds;
    internal static int SystemProcessID { get; }
    private static NtProcessManager();
    internal static int get_SystemProcessID();
    public static Int32[] GetProcessIds(string machineName, bool isRemoteMachine);
    public static Int32[] GetProcessIds();
    public static ModuleInfo[] GetModuleInfos(int processId);
    public static ModuleInfo GetFirstModuleInfo(int processId);
    private static ModuleInfo[] GetModuleInfos(int processId, bool firstModuleOnly);
    private static void HandleError();
    public static int GetProcessIdFromHandle(SafeProcessHandle processHandle);
    public static ProcessInfo[] GetProcessInfos(string machineName, bool isRemoteMachine);
    private static ProcessInfo[] GetProcessInfos(PerformanceCounterLib library);
    private static ProcessInfo[] GetProcessInfos(PerformanceCounterLib library, int processIndex, int threadIndex, Byte[] data);
    private static ThreadInfo GetThreadInfo(PERF_OBJECT_TYPE type, IntPtr instancePtr, PERF_COUNTER_DEFINITION[] counters);
    internal static ThreadWaitReason GetThreadWaitReason(int value);
    private static ProcessInfo GetProcessInfo(PERF_OBJECT_TYPE type, IntPtr instancePtr, PERF_COUNTER_DEFINITION[] counters);
    private static ValueId GetValueId(string counterName);
    private static long ReadCounterValue(int counterType, IntPtr dataPtr);
}
internal class System.Diagnostics.PerformanceCounterLib : object {
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) s_computerName;
    private PerformanceMonitor _performanceMonitor;
    private string _machineName;
    private string _perfLcid;
    private static Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_libraryTable;
    private Dictionary`2<int, string> _nameTable;
    private object _nameTableLock;
    private static object s_internalSyncObject;
    private static object InternalSyncObject { get; }
    internal static string ComputerName { get; }
    internal Dictionary`2<int, string> NameTable { get; }
    internal PerformanceCounterLib(string machineName, string lcid);
    private static object get_InternalSyncObject();
    internal static string get_ComputerName();
    internal Dictionary`2<int, string> get_NameTable();
    internal string GetCounterName(int index);
    internal static PerformanceCounterLib GetPerformanceCounterLib(string machineName, CultureInfo culture);
    internal Byte[] GetPerformanceData(string item);
    private Dictionary`2<int, string> GetStringTable(bool isHelp);
}
public class System.Diagnostics.Process : object {
    private bool _haveProcessId;
    private int _processId;
    private bool _haveProcessHandle;
    private SafeProcessHandle _processHandle;
    private bool _isRemoteMachine;
    private string _machineName;
    private ProcessInfo _processInfo;
    private ProcessThreadCollection _threads;
    private ProcessModuleCollection _modules;
    private bool _haveWorkingSetLimits;
    private IntPtr _minWorkingSet;
    private IntPtr _maxWorkingSet;
    private bool _haveProcessorAffinity;
    private IntPtr _processorAffinity;
    private bool _havePriorityClass;
    private ProcessPriorityClass _priorityClass;
    private ProcessStartInfo _startInfo;
    private bool _watchForExit;
    private bool _watchingForExit;
    private EventHandler _onExited;
    private bool _exited;
    private int _exitCode;
    private DateTime _exitTime;
    private bool _haveExitTime;
    private bool _priorityBoostEnabled;
    private bool _havePriorityBoostEnabled;
    private bool _raisedOnExited;
    private RegisteredWaitHandle _registeredWaitHandle;
    private WaitHandle _waitHandle;
    private StreamReader _standardOutput;
    private StreamWriter _standardInput;
    private StreamReader _standardError;
    private bool _disposed;
    private static object s_createProcessLock;
    private StreamReadMode _outputStreamReadMode;
    private StreamReadMode _errorStreamReadMode;
    [CompilerGeneratedAttribute]
private DataReceivedEventHandler OutputDataReceived;
    [CompilerGeneratedAttribute]
private DataReceivedEventHandler ErrorDataReceived;
    internal AsyncStreamReader _output;
    internal AsyncStreamReader _error;
    internal bool _pendingOutputRead;
    internal bool _pendingErrorRead;
    private static IntPtr INVALID_HANDLE_VALUE;
    private bool _signaled;
    public SafeProcessHandle SafeHandle { get; }
    private bool Associated { get; }
    public int BasePriority { get; }
    public int ExitCode { get; }
    public bool HasExited { get; }
    public DateTime ExitTime { get; }
    public int Id { get; }
    public string MachineName { get; }
    public IntPtr MaxWorkingSet { get; public set; }
    public IntPtr MinWorkingSet { get; public set; }
    public ProcessModuleCollection Modules { get; }
    public long NonpagedSystemMemorySize64 { get; }
    public long PagedMemorySize64 { get; }
    public long PagedSystemMemorySize64 { get; }
    public long PeakPagedMemorySize64 { get; }
    public long PeakWorkingSet64 { get; }
    public long PeakVirtualMemorySize64 { get; }
    public bool PriorityBoostEnabled { get; public set; }
    public ProcessPriorityClass PriorityClass { get; public set; }
    public long PrivateMemorySize64 { get; }
    public string ProcessName { get; }
    public IntPtr ProcessorAffinity { get; public set; }
    public int SessionId { get; }
    public ProcessStartInfo StartInfo { get; public set; }
    public ProcessThreadCollection Threads { get; }
    public long VirtualMemorySize64 { get; }
    public bool EnableRaisingEvents { get; public set; }
    public StreamWriter StandardInput { get; }
    public StreamReader StandardOutput { get; }
    public StreamReader StandardError { get; }
    public long WorkingSet64 { get; }
    public ProcessModule MainModule { get; }
    private DateTime ExitTimeCore { get; }
    public TimeSpan PrivilegedProcessorTime { get; }
    public DateTime StartTime { get; }
    public TimeSpan TotalProcessorTime { get; }
    public TimeSpan UserProcessorTime { get; }
    private bool PriorityBoostEnabledCore { get; private set; }
    private ProcessPriorityClass PriorityClassCore { get; private set; }
    private IntPtr ProcessorAffinityCore { get; private set; }
    private Process(string machineName, bool isRemoteMachine, int processId, ProcessInfo processInfo);
    private static Process();
    [CompilerGeneratedAttribute]
public void add_OutputDataReceived(DataReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OutputDataReceived(DataReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ErrorDataReceived(DataReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ErrorDataReceived(DataReceivedEventHandler value);
    protected virtual override void Finalize();
    public SafeProcessHandle get_SafeHandle();
    private bool get_Associated();
    public int get_BasePriority();
    public int get_ExitCode();
    public bool get_HasExited();
    public DateTime get_ExitTime();
    public int get_Id();
    public string get_MachineName();
    public IntPtr get_MaxWorkingSet();
    public void set_MaxWorkingSet(IntPtr value);
    public IntPtr get_MinWorkingSet();
    public void set_MinWorkingSet(IntPtr value);
    public ProcessModuleCollection get_Modules();
    public long get_NonpagedSystemMemorySize64();
    public long get_PagedMemorySize64();
    public long get_PagedSystemMemorySize64();
    public long get_PeakPagedMemorySize64();
    public long get_PeakWorkingSet64();
    public long get_PeakVirtualMemorySize64();
    public bool get_PriorityBoostEnabled();
    public void set_PriorityBoostEnabled(bool value);
    public ProcessPriorityClass get_PriorityClass();
    public void set_PriorityClass(ProcessPriorityClass value);
    public long get_PrivateMemorySize64();
    public string get_ProcessName();
    public IntPtr get_ProcessorAffinity();
    public void set_ProcessorAffinity(IntPtr value);
    public int get_SessionId();
    public ProcessStartInfo get_StartInfo();
    public void set_StartInfo(ProcessStartInfo value);
    public ProcessThreadCollection get_Threads();
    public long get_VirtualMemorySize64();
    public bool get_EnableRaisingEvents();
    public void set_EnableRaisingEvents(bool value);
    public StreamWriter get_StandardInput();
    public StreamReader get_StandardOutput();
    public StreamReader get_StandardError();
    public long get_WorkingSet64();
    public void add_Exited(EventHandler value);
    public void remove_Exited(EventHandler value);
    private void ReleaseProcessHandle(SafeProcessHandle handle);
    private void CompletionCallback(object context, bool wasSignaled);
    protected virtual void Dispose(bool disposing);
    internal void Close();
    private void EnsureState(State state);
    private void EnsureWatchingForExit();
    private void EnsureWorkingSetLimits();
    private void SetWorkingSetLimits(Nullable`1<IntPtr> min, Nullable`1<IntPtr> max);
    public static Process GetProcessById(int processId, string machineName);
    public static Process GetProcessById(int processId);
    public static Process[] GetProcessesByName(string processName);
    public static Process[] GetProcesses();
    public static Process[] GetProcesses(string machineName);
    public static Process GetCurrentProcess();
    protected void OnExited();
    private void RaiseOnExited();
    public void Refresh();
    private SafeProcessHandle OpenProcessHandle();
    private void SetProcessHandle(SafeProcessHandle processHandle);
    private void SetProcessId(int processId);
    public bool Start();
    public static Process Start(string fileName);
    public static Process Start(string fileName, string arguments);
    public static Process Start(ProcessStartInfo startInfo);
    private void StopWatchingForExit();
    public virtual string ToString();
    public void WaitForExit();
    public bool WaitForExit(int milliseconds);
    public void BeginOutputReadLine();
    public void BeginErrorReadLine();
    public void CancelOutputRead();
    public void CancelErrorRead();
    internal void OutputReadNotifyUser(string data);
    internal void ErrorReadNotifyUser(string data);
    public sealed virtual void Dispose();
    public static Process[] GetProcessesByName(string processName, string machineName);
    public static void EnterDebugMode();
    public static void LeaveDebugMode();
    public void Kill();
    private void RefreshCore();
    private void CloseCore();
    private bool WaitForExitCore(int milliseconds);
    public ProcessModule get_MainModule();
    private void UpdateHasExited();
    private DateTime get_ExitTimeCore();
    public TimeSpan get_PrivilegedProcessorTime();
    public DateTime get_StartTime();
    public TimeSpan get_TotalProcessorTime();
    public TimeSpan get_UserProcessorTime();
    private bool get_PriorityBoostEnabledCore();
    private void set_PriorityBoostEnabledCore(bool value);
    private ProcessPriorityClass get_PriorityClassCore();
    private void set_PriorityClassCore(ProcessPriorityClass value);
    private IntPtr get_ProcessorAffinityCore();
    private void set_ProcessorAffinityCore(IntPtr value);
    private static int GetCurrentProcessId();
    private SafeProcessHandle GetProcessHandle();
    private void GetWorkingSetLimits(IntPtr& minWorkingSet, IntPtr& maxWorkingSet);
    private void SetWorkingSetLimitsCore(Nullable`1<IntPtr> newMin, Nullable`1<IntPtr> newMax, IntPtr& resultingMin, IntPtr& resultingMax);
    private bool StartCore(ProcessStartInfo startInfo);
    private static Encoding GetEncoding(int codePage);
    private static StringBuilder BuildCommandLine(string executableFileName, string arguments);
    private ProcessThreadTimes GetProcessTimes();
    private static void SetPrivilege(string privilegeName, int attrib);
    private SafeProcessHandle GetProcessHandle(int access, bool throwIfExited);
    private SafeProcessHandle GetProcessHandle(int access);
    private static void CreatePipeWithSecurityAttributes(SafeFileHandle& hReadPipe, SafeFileHandle& hWritePipe, SECURITY_ATTRIBUTES& lpPipeAttributes, int nSize);
    private void CreatePipe(SafeFileHandle& parentHandle, SafeFileHandle& childHandle, bool parentInputs);
    private static Byte[] EnvironmentVariablesToByteArray(Dictionary`2<string, string> sd);
}
internal class System.Diagnostics.ProcessInfo : object {
    internal List`1<ThreadInfo> _threadInfoList;
    [CompilerGeneratedAttribute]
private int <BasePriority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PoolPagedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PoolNonPagedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VirtualBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VirtualBytesPeak>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WorkingSetPeak>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WorkingSet>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PageFileBytesPeak>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PageFileBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PrivateBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SessionId>k__BackingField;
    internal int BasePriority { get; internal set; }
    internal string ProcessName { get; internal set; }
    internal int ProcessId { get; internal set; }
    internal long PoolPagedBytes { get; internal set; }
    internal long PoolNonPagedBytes { get; internal set; }
    internal long VirtualBytes { get; internal set; }
    internal long VirtualBytesPeak { get; internal set; }
    internal long WorkingSetPeak { get; internal set; }
    internal long WorkingSet { get; internal set; }
    internal long PageFileBytesPeak { get; internal set; }
    internal long PageFileBytes { get; internal set; }
    internal long PrivateBytes { get; internal set; }
    internal int SessionId { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_BasePriority();
    [CompilerGeneratedAttribute]
internal void set_BasePriority(int value);
    [CompilerGeneratedAttribute]
internal string get_ProcessName();
    [CompilerGeneratedAttribute]
internal void set_ProcessName(string value);
    [CompilerGeneratedAttribute]
internal int get_ProcessId();
    [CompilerGeneratedAttribute]
internal void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
internal long get_PoolPagedBytes();
    [CompilerGeneratedAttribute]
internal void set_PoolPagedBytes(long value);
    [CompilerGeneratedAttribute]
internal long get_PoolNonPagedBytes();
    [CompilerGeneratedAttribute]
internal void set_PoolNonPagedBytes(long value);
    [CompilerGeneratedAttribute]
internal long get_VirtualBytes();
    [CompilerGeneratedAttribute]
internal void set_VirtualBytes(long value);
    [CompilerGeneratedAttribute]
internal long get_VirtualBytesPeak();
    [CompilerGeneratedAttribute]
internal void set_VirtualBytesPeak(long value);
    [CompilerGeneratedAttribute]
internal long get_WorkingSetPeak();
    [CompilerGeneratedAttribute]
internal void set_WorkingSetPeak(long value);
    [CompilerGeneratedAttribute]
internal long get_WorkingSet();
    [CompilerGeneratedAttribute]
internal void set_WorkingSet(long value);
    [CompilerGeneratedAttribute]
internal long get_PageFileBytesPeak();
    [CompilerGeneratedAttribute]
internal void set_PageFileBytesPeak(long value);
    [CompilerGeneratedAttribute]
internal long get_PageFileBytes();
    [CompilerGeneratedAttribute]
internal void set_PageFileBytes(long value);
    [CompilerGeneratedAttribute]
internal long get_PrivateBytes();
    [CompilerGeneratedAttribute]
internal void set_PrivateBytes(long value);
    [CompilerGeneratedAttribute]
internal int get_SessionId();
    [CompilerGeneratedAttribute]
internal void set_SessionId(int value);
}
internal static class System.Diagnostics.ProcessManager : object {
    private static ProcessManager();
    public static bool IsProcessRunning(int processId);
    public static bool IsProcessRunning(int processId, string machineName);
    public static ProcessInfo GetProcessInfo(int processId, string machineName);
    public static ProcessInfo[] GetProcessInfos(string machineName);
    public static Int32[] GetProcessIds(string machineName);
    public static Int32[] GetProcessIds();
    public static int GetProcessIdFromHandle(SafeProcessHandle processHandle);
    public static ModuleInfo[] GetModuleInfos(int processId);
    public static bool IsRemoteMachine(string machineName);
    private static bool IsProcessRunning(int processId, Int32[] processIds);
    public static SafeProcessHandle OpenProcess(int processId, int access, bool throwIfExited);
    public static SafeThreadHandle OpenThread(int threadId, int access);
}
public class System.Diagnostics.ProcessModule : object {
    private ModuleInfo _moduleInfo;
    public string ModuleName { get; }
    public string FileName { get; }
    public IntPtr BaseAddress { get; }
    public int ModuleMemorySize { get; }
    public IntPtr EntryPointAddress { get; }
    internal ProcessModule(ModuleInfo moduleInfo);
    public string get_ModuleName();
    public string get_FileName();
    public IntPtr get_BaseAddress();
    public int get_ModuleMemorySize();
    public IntPtr get_EntryPointAddress();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.ProcessModuleCollection : object {
    private List`1<ProcessModule> _list;
    public ProcessModule Item { get; }
    protected List`1<ProcessModule> InnerList { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ProcessModuleCollection(ProcessModule[] processModules);
    public ProcessModule get_Item(int index);
    protected List`1<ProcessModule> get_InnerList();
    public virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public int IndexOf(ProcessModule module);
    public bool Contains(ProcessModule module);
    public void CopyTo(ProcessModule[] array, int index);
}
public enum System.Diagnostics.ProcessPriorityClass : Enum {
    public int value__;
    public static ProcessPriorityClass Normal;
    public static ProcessPriorityClass Idle;
    public static ProcessPriorityClass High;
    public static ProcessPriorityClass RealTime;
    public static ProcessPriorityClass BelowNormal;
    public static ProcessPriorityClass AboveNormal;
}
public class System.Diagnostics.ProcessStartInfo : object {
    private string _fileName;
    private string _arguments;
    private string _directory;
    private bool _redirectStandardInput;
    private bool _redirectStandardOutput;
    private bool _redirectStandardError;
    private Encoding _standardOutputEncoding;
    private Encoding _standardErrorEncoding;
    private bool _createNoWindow;
    internal Dictionary`2<string, string> _environmentVariables;
    private string _userName;
    private string _domain;
    private string _passwordInClearText;
    private bool _loadUserProfile;
    private static bool CaseSensitiveEnvironmentVariables;
    public string Arguments { get; public set; }
    public bool CreateNoWindow { get; public set; }
    public IDictionary`2<string, string> Environment { get; }
    public bool RedirectStandardInput { get; public set; }
    public bool RedirectStandardOutput { get; public set; }
    public bool RedirectStandardError { get; public set; }
    public Encoding StandardErrorEncoding { get; public set; }
    public Encoding StandardOutputEncoding { get; public set; }
    public string FileName { get; public set; }
    public string WorkingDirectory { get; public set; }
    public string UserName { get; public set; }
    public string PasswordInClearText { get; public set; }
    public string Domain { get; public set; }
    public bool LoadUserProfile { get; public set; }
    public bool UseShellExecute { get; public set; }
    public ProcessStartInfo(string fileName);
    public ProcessStartInfo(string fileName, string arguments);
    public string get_Arguments();
    public void set_Arguments(string value);
    public bool get_CreateNoWindow();
    public void set_CreateNoWindow(bool value);
    public IDictionary`2<string, string> get_Environment();
    public bool get_RedirectStandardInput();
    public void set_RedirectStandardInput(bool value);
    public bool get_RedirectStandardOutput();
    public void set_RedirectStandardOutput(bool value);
    public bool get_RedirectStandardError();
    public void set_RedirectStandardError(bool value);
    public Encoding get_StandardErrorEncoding();
    public void set_StandardErrorEncoding(Encoding value);
    public Encoding get_StandardOutputEncoding();
    public void set_StandardOutputEncoding(Encoding value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_WorkingDirectory();
    public void set_WorkingDirectory(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_PasswordInClearText();
    public void set_PasswordInClearText(string value);
    public string get_Domain();
    public void set_Domain(string value);
    public bool get_LoadUserProfile();
    public void set_LoadUserProfile(bool value);
    public bool get_UseShellExecute();
    public void set_UseShellExecute(bool value);
}
public class System.Diagnostics.ProcessThread : object {
    private bool _isRemoteMachine;
    private int _processId;
    private ThreadInfo _threadInfo;
    private Nullable`1<bool> _priorityBoostEnabled;
    private Nullable`1<ThreadPriorityLevel> _priorityLevel;
    public int BasePriority { get; }
    public int CurrentPriority { get; }
    public int Id { get; }
    public bool PriorityBoostEnabled { get; public set; }
    public ThreadPriorityLevel PriorityLevel { get; public set; }
    public IntPtr StartAddress { get; }
    public ThreadState ThreadState { get; }
    public ThreadWaitReason WaitReason { get; }
    unknown int IdealProcessor {public set; }
    private bool PriorityBoostEnabledCore { get; private set; }
    private ThreadPriorityLevel PriorityLevelCore { get; private set; }
    unknown IntPtr ProcessorAffinity {public set; }
    public TimeSpan PrivilegedProcessorTime { get; }
    public DateTime StartTime { get; }
    public TimeSpan TotalProcessorTime { get; }
    public TimeSpan UserProcessorTime { get; }
    internal ProcessThread(bool isRemoteMachine, int processId, ThreadInfo threadInfo);
    public int get_BasePriority();
    public int get_CurrentPriority();
    public int get_Id();
    public bool get_PriorityBoostEnabled();
    public void set_PriorityBoostEnabled(bool value);
    public ThreadPriorityLevel get_PriorityLevel();
    public void set_PriorityLevel(ThreadPriorityLevel value);
    public IntPtr get_StartAddress();
    public ThreadState get_ThreadState();
    public ThreadWaitReason get_WaitReason();
    private void EnsureState(State state);
    public void set_IdealProcessor(int value);
    public void ResetIdealProcessor();
    private bool get_PriorityBoostEnabledCore();
    private void set_PriorityBoostEnabledCore(bool value);
    private ThreadPriorityLevel get_PriorityLevelCore();
    private void set_PriorityLevelCore(ThreadPriorityLevel value);
    public void set_ProcessorAffinity(IntPtr value);
    public TimeSpan get_PrivilegedProcessorTime();
    public DateTime get_StartTime();
    public TimeSpan get_TotalProcessorTime();
    public TimeSpan get_UserProcessorTime();
    private ProcessThreadTimes GetThreadTimes();
    private SafeThreadHandle OpenThreadHandle(int access);
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.ProcessThreadCollection : object {
    private List`1<ProcessThread> _list;
    protected List`1<ProcessThread> InnerList { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ProcessThread Item { get; }
    public ProcessThreadCollection(ProcessThread[] processThreads);
    protected List`1<ProcessThread> get_InnerList();
    public virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public ProcessThread get_Item(int index);
    public int Add(ProcessThread thread);
    public void Insert(int index, ProcessThread thread);
    public int IndexOf(ProcessThread thread);
    public bool Contains(ProcessThread thread);
    public void Remove(ProcessThread thread);
    public void CopyTo(ProcessThread[] array, int index);
}
internal class System.Diagnostics.ProcessThreadTimes : object {
    internal long _create;
    internal long _exit;
    internal long _kernel;
    internal long _user;
    public DateTime StartTime { get; }
    public DateTime ExitTime { get; }
    public TimeSpan PrivilegedProcessorTime { get; }
    public TimeSpan UserProcessorTime { get; }
    public TimeSpan TotalProcessorTime { get; }
    public DateTime get_StartTime();
    public DateTime get_ExitTime();
    public TimeSpan get_PrivilegedProcessorTime();
    public TimeSpan get_UserProcessorTime();
    public TimeSpan get_TotalProcessorTime();
}
internal class System.Diagnostics.ProcessWaitHandle : WaitHandle {
    internal ProcessWaitHandle(SafeProcessHandle processHandle);
}
public enum System.Diagnostics.ProcessWindowStyle : Enum {
    public int value__;
    public static ProcessWindowStyle Normal;
    public static ProcessWindowStyle Hidden;
    public static ProcessWindowStyle Minimized;
    public static ProcessWindowStyle Maximized;
}
internal class System.Diagnostics.ThreadInfo : object {
    internal ulong _threadId;
    internal int _processId;
    internal int _basePriority;
    internal int _currentPriority;
    internal IntPtr _startAddress;
    internal ThreadState _threadState;
    internal ThreadWaitReason _threadWaitReason;
}
public enum System.Diagnostics.ThreadPriorityLevel : Enum {
    public int value__;
    public static ThreadPriorityLevel Idle;
    public static ThreadPriorityLevel Lowest;
    public static ThreadPriorityLevel BelowNormal;
    public static ThreadPriorityLevel Normal;
    public static ThreadPriorityLevel AboveNormal;
    public static ThreadPriorityLevel Highest;
    public static ThreadPriorityLevel TimeCritical;
}
public enum System.Diagnostics.ThreadState : Enum {
    public int value__;
    public static ThreadState Initialized;
    public static ThreadState Ready;
    public static ThreadState Running;
    public static ThreadState Standby;
    public static ThreadState Terminated;
    public static ThreadState Wait;
    public static ThreadState Transition;
    public static ThreadState Unknown;
}
public enum System.Diagnostics.ThreadWaitReason : Enum {
    public int value__;
    public static ThreadWaitReason Executive;
    public static ThreadWaitReason FreePage;
    public static ThreadWaitReason PageIn;
    public static ThreadWaitReason SystemAllocation;
    public static ThreadWaitReason ExecutionDelay;
    public static ThreadWaitReason Suspended;
    public static ThreadWaitReason UserRequest;
    public static ThreadWaitReason EventPairHigh;
    public static ThreadWaitReason EventPairLow;
    public static ThreadWaitReason LpcReceive;
    public static ThreadWaitReason LpcReply;
    public static ThreadWaitReason VirtualMemory;
    public static ThreadWaitReason PageOut;
    public static ThreadWaitReason Unknown;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string PriorityClassNotSupported { get; }
    internal static string NoAssociatedProcess { get; }
    internal static string ProcessIdRequired { get; }
    internal static string NotSupportedRemote { get; }
    internal static string NoProcessInfo { get; }
    internal static string WaitTillExit { get; }
    internal static string NoProcessHandle { get; }
    internal static string MissingProccess { get; }
    internal static string BadMinWorkset { get; }
    internal static string BadMaxWorkset { get; }
    internal static string ProcessHasExited { get; }
    internal static string ProcessHasExitedNoId { get; }
    internal static string ThreadExited { get; }
    internal static string ProcessNotFound { get; }
    internal static string CantGetProcessId { get; }
    internal static string ProcessDisabled { get; }
    internal static string WaitReasonUnavailable { get; }
    internal static string NotSupportedRemoteThread { get; }
    internal static string CouldntConnectToRemoteMachine { get; }
    internal static string CouldntGetProcessInfos { get; }
    internal static string InputIdleUnkownError { get; }
    internal static string FileNameMissing { get; }
    internal static string EnumProcessModuleFailed { get; }
    internal static string EnumProcessModuleFailedDueToWow { get; }
    internal static string NoAsyncOperation { get; }
    internal static string InvalidApplication { get; }
    internal static string StandardOutputEncodingNotAllowed { get; }
    internal static string StandardErrorEncodingNotAllowed { get; }
    internal static string CantGetStandardOut { get; }
    internal static string CantGetStandardIn { get; }
    internal static string CantGetStandardError { get; }
    internal static string CantMixSyncAsyncOperation { get; }
    internal static string CantRedirectStreams { get; }
    internal static string CantUseEnvVars { get; }
    internal static string EnvironmentBlockTooLong { get; }
    internal static string PendingAsyncOperation { get; }
    internal static string UseShellExecute { get; }
    internal static string InvalidParameter { get; }
    internal static string InvalidEnumArgument { get; }
    internal static string CategoryHelpCorrupt { get; }
    internal static string CounterNameCorrupt { get; }
    internal static string CounterDataCorrupt { get; }
    internal static string CantGetProcessStartInfo { get; }
    internal static string CantSetProcessStartInfo { get; }
    internal static string CantGetAllPids { get; }
    internal static string CantFindProcessExecutablePath { get; }
    internal static string NegativePidNotSupported { get; }
    internal static string ProcessorAffinityNotSupported { get; }
    internal static string ResourceLimitQueryFailure { get; }
    internal static string RUsageFailure { get; }
    internal static string MinimumWorkingSetNotSupported { get; }
    internal static string OsxExternalProcessWorkingSetNotSupported { get; }
    internal static string ProcessInformationUnavailable { get; }
    internal static string RemoteMachinesNotSupported { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_PriorityClassNotSupported();
    internal static string get_NoAssociatedProcess();
    internal static string get_ProcessIdRequired();
    internal static string get_NotSupportedRemote();
    internal static string get_NoProcessInfo();
    internal static string get_WaitTillExit();
    internal static string get_NoProcessHandle();
    internal static string get_MissingProccess();
    internal static string get_BadMinWorkset();
    internal static string get_BadMaxWorkset();
    internal static string get_ProcessHasExited();
    internal static string get_ProcessHasExitedNoId();
    internal static string get_ThreadExited();
    internal static string get_ProcessNotFound();
    internal static string get_CantGetProcessId();
    internal static string get_ProcessDisabled();
    internal static string get_WaitReasonUnavailable();
    internal static string get_NotSupportedRemoteThread();
    internal static string get_CouldntConnectToRemoteMachine();
    internal static string get_CouldntGetProcessInfos();
    internal static string get_InputIdleUnkownError();
    internal static string get_FileNameMissing();
    internal static string get_EnumProcessModuleFailed();
    internal static string get_EnumProcessModuleFailedDueToWow();
    internal static string get_NoAsyncOperation();
    internal static string get_InvalidApplication();
    internal static string get_StandardOutputEncodingNotAllowed();
    internal static string get_StandardErrorEncodingNotAllowed();
    internal static string get_CantGetStandardOut();
    internal static string get_CantGetStandardIn();
    internal static string get_CantGetStandardError();
    internal static string get_CantMixSyncAsyncOperation();
    internal static string get_CantRedirectStreams();
    internal static string get_CantUseEnvVars();
    internal static string get_EnvironmentBlockTooLong();
    internal static string get_PendingAsyncOperation();
    internal static string get_UseShellExecute();
    internal static string get_InvalidParameter();
    internal static string get_InvalidEnumArgument();
    internal static string get_CategoryHelpCorrupt();
    internal static string get_CounterNameCorrupt();
    internal static string get_CounterDataCorrupt();
    internal static string get_CantGetProcessStartInfo();
    internal static string get_CantSetProcessStartInfo();
    internal static string get_CantGetAllPids();
    internal static string get_CantFindProcessExecutablePath();
    internal static string get_NegativePidNotSupported();
    internal static string get_ProcessorAffinityNotSupported();
    internal static string get_ResourceLimitQueryFailure();
    internal static string get_RUsageFailure();
    internal static string get_MinimumWorkingSetNotSupported();
    internal static string get_OsxExternalProcessWorkingSetNotSupported();
    internal static string get_ProcessInformationUnavailable();
    internal static string get_RemoteMachinesNotSupported();
    internal static Type get_ResourceType();
}
internal class System.Text.ConsoleEncoding : Encoding {
    private Encoding _encoding;
    public int CodePage { get; }
    public bool IsSingleByte { get; }
    public string EncodingName { get; }
    public string WebName { get; }
    internal ConsoleEncoding(Encoding encoding);
    public virtual Byte[] GetPreamble();
    public virtual int get_CodePage();
    public virtual bool get_IsSingleByte();
    public virtual string get_EncodingName();
    public virtual string get_WebName();
    public virtual int GetByteCount(Char[] chars);
    public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string s);
    public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual Byte[] GetBytes(Char[] chars);
    public virtual Byte[] GetBytes(Char[] chars, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual Byte[] GetBytes(string s);
    public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetCharCount(Byte[] bytes);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    public virtual Char[] GetChars(Byte[] bytes);
    public virtual Char[] GetChars(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
    public virtual Encoder GetEncoder();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual string GetString(Byte[] bytes);
    public virtual string GetString(Byte[] bytes, int index, int count);
}
internal static class System.Text.EncodingHelper : object {
    internal static Encoding GetSupportedConsoleEncoding(int codepage);
}
