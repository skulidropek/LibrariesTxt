[ExtensionAttribute]
public static class System.Diagnostics.StackFrameExtensions : object {
    [ExtensionAttribute]
public static bool HasNativeImage(StackFrame stackFrame);
    [ExtensionAttribute]
public static bool HasMethod(StackFrame stackFrame);
    [ExtensionAttribute]
public static bool HasILOffset(StackFrame stackFrame);
    [ExtensionAttribute]
public static bool HasSource(StackFrame stackFrame);
    [ExtensionAttribute]
public static IntPtr GetNativeIP(StackFrame stackFrame);
    [ExtensionAttribute]
public static IntPtr GetNativeImageBase(StackFrame stackFrame);
}
public class System.Diagnostics.StackTraceSymbols : object {
    private Dictionary`2<IntPtr, Tuple`2<MetadataReaderProvider, MetadataReader>> _readerCache;
    private sealed virtual override void System.IDisposable.Dispose();
    public void GetSourceLineInfo(string assemblyPath, IntPtr loadedPeAddress, int loadedPeSize, IntPtr inMemoryPdbAddress, int inMemoryPdbSize, int methodToken, int ilOffset, String& sourceFile, Int32& sourceLine, Int32& sourceColumn);
    private MetadataReader GetReader(string assemblyPath, IntPtr loadedPeAddress, int loadedPeSize, IntPtr inMemoryPdbAddress, int inMemoryPdbSize);
    private static string GetPdbPathFromPeStream(string assemblyPath, IntPtr loadedPeAddress, int loadedPeSize, Int32& age, Guid& guid, UInt32& stamp);
    private static bool IdEquals(ImmutableArray`1<byte> left, Guid rightGuid, UInt32 rightStamp);
}
