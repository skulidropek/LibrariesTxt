[AttributeUsageAttribute("64")]
public class System.Diagnostics.Tracing.EventAttribute : Attribute {
    public int EventId { get; }
    public EventKeywords Keywords { get; public set; }
    public EventLevel Level { get; public set; }
    public string Message { get; public set; }
    public EventOpcode Opcode { get; public set; }
    public EventTask Task { get; public set; }
    public byte Version { get; public set; }
    public EventAttribute(int eventId);
    public int get_EventId();
    public EventKeywords get_Keywords();
    public void set_Keywords(EventKeywords value);
    public EventLevel get_Level();
    public void set_Level(EventLevel value);
    public string get_Message();
    public void set_Message(string value);
    public EventOpcode get_Opcode();
    public void set_Opcode(EventOpcode value);
    public EventTask get_Task();
    public void set_Task(EventTask value);
    public byte get_Version();
    public void set_Version(byte value);
}
public enum System.Diagnostics.Tracing.EventCommand : Enum {
    public int value__;
    public static EventCommand Disable;
    public static EventCommand Enable;
    public static EventCommand SendManifest;
    public static EventCommand Update;
}
public class System.Diagnostics.Tracing.EventCommandEventArgs : EventArgs {
    public IDictionary`2<string, string> Arguments { get; }
    public EventCommand Command { get; }
    public IDictionary`2<string, string> get_Arguments();
    public EventCommand get_Command();
    public bool DisableEvent(int eventId);
    public bool EnableEvent(int eventId);
}
[FlagsAttribute]
public enum System.Diagnostics.Tracing.EventKeywords : Enum {
    public long value__;
    public static EventKeywords AuditFailure;
    public static EventKeywords AuditSuccess;
    public static EventKeywords CorrelationHint;
    public static EventKeywords EventLogClassic;
    public static EventKeywords None;
    public static EventKeywords Sqm;
    public static EventKeywords WdiContext;
    public static EventKeywords WdiDiagnostic;
}
public enum System.Diagnostics.Tracing.EventLevel : Enum {
    public int value__;
    public static EventLevel Critical;
    public static EventLevel Error;
    public static EventLevel Informational;
    public static EventLevel LogAlways;
    public static EventLevel Verbose;
    public static EventLevel Warning;
}
public abstract class System.Diagnostics.Tracing.EventListener : object {
    public void DisableEvents(EventSource eventSource);
    public virtual void Dispose();
    public void EnableEvents(EventSource eventSource, EventLevel level);
    public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword);
    public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, IDictionary`2<string, string> arguments);
    protected static int EventSourceIndex(EventSource eventSource);
    protected internal virtual void OnEventSourceCreated(EventSource eventSource);
    protected internal abstract virtual void OnEventWritten(EventWrittenEventArgs eventData);
}
public enum System.Diagnostics.Tracing.EventOpcode : Enum {
    public int value__;
    public static EventOpcode DataCollectionStart;
    public static EventOpcode DataCollectionStop;
    public static EventOpcode Extension;
    public static EventOpcode Info;
    public static EventOpcode Receive;
    public static EventOpcode Reply;
    public static EventOpcode Resume;
    public static EventOpcode Send;
    public static EventOpcode Start;
    public static EventOpcode Stop;
    public static EventOpcode Suspend;
}
public class System.Diagnostics.Tracing.EventSource : object {
    public Guid Guid { get; }
    public string Name { get; }
    public Exception ConstructionException { get; }
    public static Guid CurrentThreadActivityId { get; }
    protected EventSource(bool throwOnEventWriteErrors);
    public Guid get_Guid();
    public string get_Name();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void Finalize();
    public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest);
    public static Guid GetGuid(Type eventSourceType);
    public static string GetName(Type eventSourceType);
    public static IEnumerable`1<EventSource> GetSources();
    public bool IsEnabled();
    public bool IsEnabled(EventLevel level, EventKeywords keywords);
    protected virtual void OnEventCommand(EventCommandEventArgs command);
    public static void SendCommand(EventSource eventSource, EventCommand command, IDictionary`2<string, string> commandArguments);
    public virtual string ToString();
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, int arg1);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, int arg1, int arg2);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, int arg1, int arg2, int arg3);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, long arg1);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, long arg1, long arg2);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, long arg1, long arg2, long arg3);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, Object[] args);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, string arg1);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, string arg1, int arg2);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, string arg1, int arg2, int arg3);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, string arg1, long arg2);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, string arg1, string arg2);
    [SecuritySafeCriticalAttribute]
protected void WriteEvent(int eventId, string arg1, string arg2, string arg3);
    [SecurityCriticalAttribute]
[CLSCompliantAttribute("False")]
protected void WriteEventCore(int eventId, int eventDataCount, EventData* data);
    public Exception get_ConstructionException();
    [SecurityCriticalAttribute]
public static Guid get_CurrentThreadActivityId();
    [SecuritySafeCriticalAttribute]
public static void SetCurrentThreadActivityId(Guid activityId);
    [SecuritySafeCriticalAttribute]
public static void SetCurrentThreadActivityId(Guid activityId, Guid& oldActivityThatWillContinue);
    [SecuritySafeCriticalAttribute]
protected void WriteEventWithRelatedActivityId(int eventId, Guid childActivityID, Object[] args);
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
protected void WriteEventWithRelatedActivityIdCore(int eventId, Guid* childActivityID, int eventDataCount, EventData* data);
}
[AttributeUsageAttribute("4")]
public class System.Diagnostics.Tracing.EventSourceAttribute : Attribute {
    public string Guid { get; public set; }
    public string LocalizationResources { get; public set; }
    public string Name { get; public set; }
    public string get_Guid();
    public void set_Guid(string value);
    public string get_LocalizationResources();
    public void set_LocalizationResources(string value);
    public string get_Name();
    public void set_Name(string value);
}
public class System.Diagnostics.Tracing.EventSourceException : Exception {
    public EventSourceException(string message);
    public EventSourceException(string message, Exception innerException);
}
public enum System.Diagnostics.Tracing.EventTask : Enum {
    public int value__;
    public static EventTask None;
}
public class System.Diagnostics.Tracing.EventWrittenEventArgs : EventArgs {
    public int EventId { get; }
    public EventSource EventSource { get; }
    public EventKeywords Keywords { get; }
    public EventLevel Level { get; }
    public string Message { get; }
    public EventOpcode Opcode { get; }
    public ReadOnlyCollection`1<object> Payload { get; }
    public EventTask Task { get; }
    public byte Version { get; }
    public Guid ActivityId { get; }
    public Guid RelatedActivityId { get; }
    public int get_EventId();
    public EventSource get_EventSource();
    public EventKeywords get_Keywords();
    public EventLevel get_Level();
    public string get_Message();
    public EventOpcode get_Opcode();
    public ReadOnlyCollection`1<object> get_Payload();
    public EventTask get_Task();
    public byte get_Version();
    [SecurityCriticalAttribute]
public Guid get_ActivityId();
    [SecurityCriticalAttribute]
public Guid get_RelatedActivityId();
}
[AttributeUsageAttribute("64")]
public class System.Diagnostics.Tracing.NonEventAttribute : Attribute {
}
