public class System.Drawing.Point : ValueType {
    public static Point Empty;
    private int _x;
    private int _y;
    public bool IsEmpty { get; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public Point(int x, int y);
    public Point(Size sz);
    public Point(int dw);
    private static Point();
    public bool get_IsEmpty();
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public static PointF op_Implicit(Point p);
    public static Size op_Explicit(Point p);
    public static Point op_Addition(Point pt, Size sz);
    public static Point op_Subtraction(Point pt, Size sz);
    public static bool op_Equality(Point left, Point right);
    public static bool op_Inequality(Point left, Point right);
    public static Point Add(Point pt, Size sz);
    public static Point Subtract(Point pt, Size sz);
    public static Point Ceiling(PointF value);
    public static Point Truncate(PointF value);
    public static Point Round(PointF value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Offset(int dx, int dy);
    public void Offset(Point p);
    public virtual string ToString();
    private static short HighInt16(int n);
    private static short LowInt16(int n);
}
public class System.Drawing.PointF : ValueType {
    public static PointF Empty;
    private float _x;
    private float _y;
    public bool IsEmpty { get; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public PointF(float x, float y);
    private static PointF();
    public bool get_IsEmpty();
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public static PointF op_Addition(PointF pt, Size sz);
    public static PointF op_Subtraction(PointF pt, Size sz);
    public static PointF op_Addition(PointF pt, SizeF sz);
    public static PointF op_Subtraction(PointF pt, SizeF sz);
    public static bool op_Equality(PointF left, PointF right);
    public static bool op_Inequality(PointF left, PointF right);
    public static PointF Add(PointF pt, Size sz);
    public static PointF Subtract(PointF pt, Size sz);
    public static PointF Add(PointF pt, SizeF sz);
    public static PointF Subtract(PointF pt, SizeF sz);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Drawing.Rectangle : ValueType {
    public static Rectangle Empty;
    private int _x;
    private int _y;
    private int _width;
    private int _height;
    public Point Location { get; public set; }
    public Size Size { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int Left { get; }
    public int Top { get; }
    public int Right { get; }
    public int Bottom { get; }
    public bool IsEmpty { get; }
    public Rectangle(int x, int y, int width, int height);
    public Rectangle(Point location, Size size);
    private static Rectangle();
    public static Rectangle FromLTRB(int left, int top, int right, int bottom);
    public Point get_Location();
    public void set_Location(Point value);
    public Size get_Size();
    public void set_Size(Size value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public int get_Left();
    public int get_Top();
    public int get_Right();
    public int get_Bottom();
    public bool get_IsEmpty();
    public virtual bool Equals(object obj);
    public static bool op_Equality(Rectangle left, Rectangle right);
    public static bool op_Inequality(Rectangle left, Rectangle right);
    public static Rectangle Ceiling(RectangleF value);
    public static Rectangle Truncate(RectangleF value);
    public static Rectangle Round(RectangleF value);
    public bool Contains(int x, int y);
    public bool Contains(Point pt);
    public bool Contains(Rectangle rect);
    public virtual int GetHashCode();
    public void Inflate(int width, int height);
    public void Inflate(Size size);
    public static Rectangle Inflate(Rectangle rect, int x, int y);
    public void Intersect(Rectangle rect);
    public static Rectangle Intersect(Rectangle a, Rectangle b);
    public bool IntersectsWith(Rectangle rect);
    public static Rectangle Union(Rectangle a, Rectangle b);
    public void Offset(Point pos);
    public void Offset(int x, int y);
    public virtual string ToString();
}
public class System.Drawing.RectangleF : ValueType {
    public static RectangleF Empty;
    private float _x;
    private float _y;
    private float _width;
    private float _height;
    public PointF Location { get; public set; }
    public SizeF Size { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public float Left { get; }
    public float Top { get; }
    public float Right { get; }
    public float Bottom { get; }
    public bool IsEmpty { get; }
    public RectangleF(float x, float y, float width, float height);
    public RectangleF(PointF location, SizeF size);
    private static RectangleF();
    public static RectangleF FromLTRB(float left, float top, float right, float bottom);
    public PointF get_Location();
    public void set_Location(PointF value);
    public SizeF get_Size();
    public void set_Size(SizeF value);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public float get_Left();
    public float get_Top();
    public float get_Right();
    public float get_Bottom();
    public bool get_IsEmpty();
    public virtual bool Equals(object obj);
    public static bool op_Equality(RectangleF left, RectangleF right);
    public static bool op_Inequality(RectangleF left, RectangleF right);
    public bool Contains(float x, float y);
    public bool Contains(PointF pt);
    public bool Contains(RectangleF rect);
    public virtual int GetHashCode();
    public void Inflate(float x, float y);
    public void Inflate(SizeF size);
    public static RectangleF Inflate(RectangleF rect, float x, float y);
    public void Intersect(RectangleF rect);
    public static RectangleF Intersect(RectangleF a, RectangleF b);
    public bool IntersectsWith(RectangleF rect);
    public static RectangleF Union(RectangleF a, RectangleF b);
    public void Offset(PointF pos);
    public void Offset(float x, float y);
    public static RectangleF op_Implicit(Rectangle r);
    public virtual string ToString();
}
public class System.Drawing.Size : ValueType {
    public static Size Empty;
    private int _width;
    private int _height;
    public bool IsEmpty { get; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public Size(Point pt);
    public Size(int width, int height);
    private static Size();
    public static SizeF op_Implicit(Size p);
    public static Size op_Addition(Size sz1, Size sz2);
    public static Size op_Subtraction(Size sz1, Size sz2);
    public static bool op_Equality(Size sz1, Size sz2);
    public static bool op_Inequality(Size sz1, Size sz2);
    public static Point op_Explicit(Size size);
    public bool get_IsEmpty();
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public static Size Add(Size sz1, Size sz2);
    public static Size Ceiling(SizeF value);
    public static Size Subtract(Size sz1, Size sz2);
    public static Size Truncate(SizeF value);
    public static Size Round(SizeF value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Drawing.SizeF : ValueType {
    public static SizeF Empty;
    private float _width;
    private float _height;
    public bool IsEmpty { get; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public SizeF(SizeF size);
    public SizeF(PointF pt);
    public SizeF(float width, float height);
    private static SizeF();
    public static SizeF op_Addition(SizeF sz1, SizeF sz2);
    public static SizeF op_Subtraction(SizeF sz1, SizeF sz2);
    public static bool op_Equality(SizeF sz1, SizeF sz2);
    public static bool op_Inequality(SizeF sz1, SizeF sz2);
    public static PointF op_Explicit(SizeF size);
    public bool get_IsEmpty();
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public static SizeF Add(SizeF sz1, SizeF sz2);
    public static SizeF Subtract(SizeF sz1, SizeF sz2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public PointF ToPointF();
    public Size ToSize();
    public virtual string ToString();
}
