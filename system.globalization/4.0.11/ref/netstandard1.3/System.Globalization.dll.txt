public abstract class System.Globalization.Calendar : object {
    public static int CurrentEra;
    public Int32[] Eras { get; }
    public bool IsReadOnly { get; }
    public DateTime MaxSupportedDateTime { get; }
    public DateTime MinSupportedDateTime { get; }
    public int TwoDigitYearMax { get; public set; }
    public abstract virtual Int32[] get_Eras();
    public bool get_IsReadOnly();
    public virtual DateTime get_MaxSupportedDateTime();
    public virtual DateTime get_MinSupportedDateTime();
    public virtual int get_TwoDigitYearMax();
    public virtual void set_TwoDigitYearMax(int value);
    public virtual DateTime AddDays(DateTime time, int days);
    public virtual DateTime AddHours(DateTime time, int hours);
    public virtual DateTime AddMilliseconds(DateTime time, double milliseconds);
    public virtual DateTime AddMinutes(DateTime time, int minutes);
    public abstract virtual DateTime AddMonths(DateTime time, int months);
    public virtual DateTime AddSeconds(DateTime time, int seconds);
    public virtual DateTime AddWeeks(DateTime time, int weeks);
    public abstract virtual DateTime AddYears(DateTime time, int years);
    public abstract virtual int GetDayOfMonth(DateTime time);
    public abstract virtual DayOfWeek GetDayOfWeek(DateTime time);
    public abstract virtual int GetDayOfYear(DateTime time);
    public virtual int GetDaysInMonth(int year, int month);
    public abstract virtual int GetDaysInMonth(int year, int month, int era);
    public virtual int GetDaysInYear(int year);
    public abstract virtual int GetDaysInYear(int year, int era);
    public abstract virtual int GetEra(DateTime time);
    public virtual int GetHour(DateTime time);
    public virtual int GetLeapMonth(int year, int era);
    public virtual double GetMilliseconds(DateTime time);
    public virtual int GetMinute(DateTime time);
    public abstract virtual int GetMonth(DateTime time);
    public virtual int GetMonthsInYear(int year);
    public abstract virtual int GetMonthsInYear(int year, int era);
    public virtual int GetSecond(DateTime time);
    public virtual int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek);
    public abstract virtual int GetYear(DateTime time);
    public virtual bool IsLeapDay(int year, int month, int day);
    public abstract virtual bool IsLeapDay(int year, int month, int day, int era);
    public virtual bool IsLeapMonth(int year, int month);
    public abstract virtual bool IsLeapMonth(int year, int month, int era);
    public virtual bool IsLeapYear(int year);
    public abstract virtual bool IsLeapYear(int year, int era);
    public virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
    public abstract virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    public virtual int ToFourDigitYear(int year);
}
public enum System.Globalization.CalendarWeekRule : Enum {
    public int value__;
    public static CalendarWeekRule FirstDay;
    public static CalendarWeekRule FirstFourDayWeek;
    public static CalendarWeekRule FirstFullWeek;
}
public static class System.Globalization.CharUnicodeInfo : object {
    public static double GetNumericValue(char ch);
    public static double GetNumericValue(string s, int index);
    public static UnicodeCategory GetUnicodeCategory(char ch);
    public static UnicodeCategory GetUnicodeCategory(string s, int index);
}
public class System.Globalization.CompareInfo : object {
    public string Name { get; }
    public virtual string get_Name();
    public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2);
    public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options);
    public virtual int Compare(string string1, int offset1, string string2, int offset2);
    public virtual int Compare(string string1, int offset1, string string2, int offset2, CompareOptions options);
    public virtual int Compare(string string1, string string2);
    public virtual int Compare(string string1, string string2, CompareOptions options);
    public virtual bool Equals(object value);
    public static CompareInfo GetCompareInfo(string name);
    public virtual int GetHashCode();
    public virtual int GetHashCode(string source, CompareOptions options);
    public virtual int IndexOf(string source, char value);
    public virtual int IndexOf(string source, char value, CompareOptions options);
    public virtual int IndexOf(string source, char value, int startIndex, CompareOptions options);
    public virtual int IndexOf(string source, char value, int startIndex, int count);
    public virtual int IndexOf(string source, char value, int startIndex, int count, CompareOptions options);
    public virtual int IndexOf(string source, string value);
    public virtual int IndexOf(string source, string value, CompareOptions options);
    public virtual int IndexOf(string source, string value, int startIndex, CompareOptions options);
    public virtual int IndexOf(string source, string value, int startIndex, int count);
    public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options);
    public virtual bool IsPrefix(string source, string prefix);
    public virtual bool IsPrefix(string source, string prefix, CompareOptions options);
    public virtual bool IsSuffix(string source, string suffix);
    public virtual bool IsSuffix(string source, string suffix, CompareOptions options);
    public virtual int LastIndexOf(string source, char value);
    public virtual int LastIndexOf(string source, char value, CompareOptions options);
    public virtual int LastIndexOf(string source, char value, int startIndex, CompareOptions options);
    public virtual int LastIndexOf(string source, char value, int startIndex, int count);
    public virtual int LastIndexOf(string source, char value, int startIndex, int count, CompareOptions options);
    public virtual int LastIndexOf(string source, string value);
    public virtual int LastIndexOf(string source, string value, CompareOptions options);
    public virtual int LastIndexOf(string source, string value, int startIndex, CompareOptions options);
    public virtual int LastIndexOf(string source, string value, int startIndex, int count);
    public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options);
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Globalization.CompareOptions : Enum {
    public int value__;
    public static CompareOptions IgnoreCase;
    public static CompareOptions IgnoreKanaType;
    public static CompareOptions IgnoreNonSpace;
    public static CompareOptions IgnoreSymbols;
    public static CompareOptions IgnoreWidth;
    public static CompareOptions None;
    public static CompareOptions Ordinal;
    public static CompareOptions OrdinalIgnoreCase;
    public static CompareOptions StringSort;
}
public class System.Globalization.CultureInfo : object {
    public Calendar Calendar { get; }
    public CompareInfo CompareInfo { get; }
    public static CultureInfo CurrentCulture { get; public set; }
    public static CultureInfo CurrentUICulture { get; public set; }
    public DateTimeFormatInfo DateTimeFormat { get; public set; }
    public static CultureInfo DefaultThreadCurrentCulture { get; public set; }
    public static CultureInfo DefaultThreadCurrentUICulture { get; public set; }
    public string DisplayName { get; }
    public string EnglishName { get; }
    public static CultureInfo InvariantCulture { get; }
    public bool IsNeutralCulture { get; }
    public bool IsReadOnly { get; }
    public string Name { get; }
    public string NativeName { get; }
    public NumberFormatInfo NumberFormat { get; public set; }
    public Calendar[] OptionalCalendars { get; }
    public CultureInfo Parent { get; }
    public TextInfo TextInfo { get; }
    public string TwoLetterISOLanguageName { get; }
    public CultureInfo(string name);
    public virtual Calendar get_Calendar();
    public virtual CompareInfo get_CompareInfo();
    public static CultureInfo get_CurrentCulture();
    public static void set_CurrentCulture(CultureInfo value);
    public static CultureInfo get_CurrentUICulture();
    public static void set_CurrentUICulture(CultureInfo value);
    public virtual DateTimeFormatInfo get_DateTimeFormat();
    public virtual void set_DateTimeFormat(DateTimeFormatInfo value);
    public static CultureInfo get_DefaultThreadCurrentCulture();
    public static void set_DefaultThreadCurrentCulture(CultureInfo value);
    public static CultureInfo get_DefaultThreadCurrentUICulture();
    public static void set_DefaultThreadCurrentUICulture(CultureInfo value);
    public virtual string get_DisplayName();
    public virtual string get_EnglishName();
    public static CultureInfo get_InvariantCulture();
    public virtual bool get_IsNeutralCulture();
    public bool get_IsReadOnly();
    public virtual string get_Name();
    public virtual string get_NativeName();
    public virtual NumberFormatInfo get_NumberFormat();
    public virtual void set_NumberFormat(NumberFormatInfo value);
    public virtual Calendar[] get_OptionalCalendars();
    public virtual CultureInfo get_Parent();
    public virtual TextInfo get_TextInfo();
    public virtual string get_TwoLetterISOLanguageName();
    public virtual object Clone();
    public virtual bool Equals(object value);
    public virtual object GetFormat(Type formatType);
    public virtual int GetHashCode();
    public static CultureInfo ReadOnly(CultureInfo ci);
    public virtual string ToString();
}
public class System.Globalization.CultureNotFoundException : ArgumentException {
    public string InvalidCultureName { get; }
    public string Message { get; }
    public CultureNotFoundException(string message);
    public CultureNotFoundException(string message, Exception innerException);
    public CultureNotFoundException(string paramName, string message);
    public CultureNotFoundException(string message, string invalidCultureName, Exception innerException);
    public CultureNotFoundException(string paramName, string invalidCultureName, string message);
    public virtual string get_InvalidCultureName();
    public virtual string get_Message();
}
public class System.Globalization.DateTimeFormatInfo : object {
    public String[] AbbreviatedDayNames { get; public set; }
    public String[] AbbreviatedMonthGenitiveNames { get; public set; }
    public String[] AbbreviatedMonthNames { get; public set; }
    public string AMDesignator { get; public set; }
    public Calendar Calendar { get; public set; }
    public CalendarWeekRule CalendarWeekRule { get; public set; }
    public static DateTimeFormatInfo CurrentInfo { get; }
    public String[] DayNames { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public string FullDateTimePattern { get; public set; }
    public static DateTimeFormatInfo InvariantInfo { get; }
    public bool IsReadOnly { get; }
    public string LongDatePattern { get; public set; }
    public string LongTimePattern { get; public set; }
    public string MonthDayPattern { get; public set; }
    public String[] MonthGenitiveNames { get; public set; }
    public String[] MonthNames { get; public set; }
    public string PMDesignator { get; public set; }
    public string RFC1123Pattern { get; }
    public string ShortDatePattern { get; public set; }
    public String[] ShortestDayNames { get; public set; }
    public string ShortTimePattern { get; public set; }
    public string SortableDateTimePattern { get; }
    public string UniversalSortableDateTimePattern { get; }
    public string YearMonthPattern { get; public set; }
    public String[] get_AbbreviatedDayNames();
    public void set_AbbreviatedDayNames(String[] value);
    public String[] get_AbbreviatedMonthGenitiveNames();
    public void set_AbbreviatedMonthGenitiveNames(String[] value);
    public String[] get_AbbreviatedMonthNames();
    public void set_AbbreviatedMonthNames(String[] value);
    public string get_AMDesignator();
    public void set_AMDesignator(string value);
    public Calendar get_Calendar();
    public void set_Calendar(Calendar value);
    public CalendarWeekRule get_CalendarWeekRule();
    public void set_CalendarWeekRule(CalendarWeekRule value);
    public static DateTimeFormatInfo get_CurrentInfo();
    public String[] get_DayNames();
    public void set_DayNames(String[] value);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    public string get_FullDateTimePattern();
    public void set_FullDateTimePattern(string value);
    public static DateTimeFormatInfo get_InvariantInfo();
    public bool get_IsReadOnly();
    public string get_LongDatePattern();
    public void set_LongDatePattern(string value);
    public string get_LongTimePattern();
    public void set_LongTimePattern(string value);
    public string get_MonthDayPattern();
    public void set_MonthDayPattern(string value);
    public String[] get_MonthGenitiveNames();
    public void set_MonthGenitiveNames(String[] value);
    public String[] get_MonthNames();
    public void set_MonthNames(String[] value);
    public string get_PMDesignator();
    public void set_PMDesignator(string value);
    public string get_RFC1123Pattern();
    public string get_ShortDatePattern();
    public void set_ShortDatePattern(string value);
    public String[] get_ShortestDayNames();
    public void set_ShortestDayNames(String[] value);
    public string get_ShortTimePattern();
    public void set_ShortTimePattern(string value);
    public string get_SortableDateTimePattern();
    public string get_UniversalSortableDateTimePattern();
    public string get_YearMonthPattern();
    public void set_YearMonthPattern(string value);
    public object Clone();
    public string GetAbbreviatedDayName(DayOfWeek dayofweek);
    public string GetAbbreviatedEraName(int era);
    public string GetAbbreviatedMonthName(int month);
    public string GetDayName(DayOfWeek dayofweek);
    public int GetEra(string eraName);
    public string GetEraName(int era);
    public sealed virtual object GetFormat(Type formatType);
    public static DateTimeFormatInfo GetInstance(IFormatProvider provider);
    public string GetMonthName(int month);
    public static DateTimeFormatInfo ReadOnly(DateTimeFormatInfo dtfi);
}
public class System.Globalization.NumberFormatInfo : object {
    public int CurrencyDecimalDigits { get; public set; }
    public string CurrencyDecimalSeparator { get; public set; }
    public string CurrencyGroupSeparator { get; public set; }
    public Int32[] CurrencyGroupSizes { get; public set; }
    public int CurrencyNegativePattern { get; public set; }
    public int CurrencyPositivePattern { get; public set; }
    public string CurrencySymbol { get; public set; }
    public static NumberFormatInfo CurrentInfo { get; }
    public static NumberFormatInfo InvariantInfo { get; }
    public bool IsReadOnly { get; }
    public string NaNSymbol { get; public set; }
    public string NegativeInfinitySymbol { get; public set; }
    public string NegativeSign { get; public set; }
    public int NumberDecimalDigits { get; public set; }
    public string NumberDecimalSeparator { get; public set; }
    public string NumberGroupSeparator { get; public set; }
    public Int32[] NumberGroupSizes { get; public set; }
    public int NumberNegativePattern { get; public set; }
    public int PercentDecimalDigits { get; public set; }
    public string PercentDecimalSeparator { get; public set; }
    public string PercentGroupSeparator { get; public set; }
    public Int32[] PercentGroupSizes { get; public set; }
    public int PercentNegativePattern { get; public set; }
    public int PercentPositivePattern { get; public set; }
    public string PercentSymbol { get; public set; }
    public string PerMilleSymbol { get; public set; }
    public string PositiveInfinitySymbol { get; public set; }
    public string PositiveSign { get; public set; }
    public int get_CurrencyDecimalDigits();
    public void set_CurrencyDecimalDigits(int value);
    public string get_CurrencyDecimalSeparator();
    public void set_CurrencyDecimalSeparator(string value);
    public string get_CurrencyGroupSeparator();
    public void set_CurrencyGroupSeparator(string value);
    public Int32[] get_CurrencyGroupSizes();
    public void set_CurrencyGroupSizes(Int32[] value);
    public int get_CurrencyNegativePattern();
    public void set_CurrencyNegativePattern(int value);
    public int get_CurrencyPositivePattern();
    public void set_CurrencyPositivePattern(int value);
    public string get_CurrencySymbol();
    public void set_CurrencySymbol(string value);
    public static NumberFormatInfo get_CurrentInfo();
    public static NumberFormatInfo get_InvariantInfo();
    public bool get_IsReadOnly();
    public string get_NaNSymbol();
    public void set_NaNSymbol(string value);
    public string get_NegativeInfinitySymbol();
    public void set_NegativeInfinitySymbol(string value);
    public string get_NegativeSign();
    public void set_NegativeSign(string value);
    public int get_NumberDecimalDigits();
    public void set_NumberDecimalDigits(int value);
    public string get_NumberDecimalSeparator();
    public void set_NumberDecimalSeparator(string value);
    public string get_NumberGroupSeparator();
    public void set_NumberGroupSeparator(string value);
    public Int32[] get_NumberGroupSizes();
    public void set_NumberGroupSizes(Int32[] value);
    public int get_NumberNegativePattern();
    public void set_NumberNegativePattern(int value);
    public int get_PercentDecimalDigits();
    public void set_PercentDecimalDigits(int value);
    public string get_PercentDecimalSeparator();
    public void set_PercentDecimalSeparator(string value);
    public string get_PercentGroupSeparator();
    public void set_PercentGroupSeparator(string value);
    public Int32[] get_PercentGroupSizes();
    public void set_PercentGroupSizes(Int32[] value);
    public int get_PercentNegativePattern();
    public void set_PercentNegativePattern(int value);
    public int get_PercentPositivePattern();
    public void set_PercentPositivePattern(int value);
    public string get_PercentSymbol();
    public void set_PercentSymbol(string value);
    public string get_PerMilleSymbol();
    public void set_PerMilleSymbol(string value);
    public string get_PositiveInfinitySymbol();
    public void set_PositiveInfinitySymbol(string value);
    public string get_PositiveSign();
    public void set_PositiveSign(string value);
    public object Clone();
    public sealed virtual object GetFormat(Type formatType);
    public static NumberFormatInfo GetInstance(IFormatProvider formatProvider);
    public static NumberFormatInfo ReadOnly(NumberFormatInfo nfi);
}
public class System.Globalization.RegionInfo : object {
    public string CurrencySymbol { get; }
    public static RegionInfo CurrentRegion { get; }
    public string DisplayName { get; }
    public string EnglishName { get; }
    public bool IsMetric { get; }
    public string ISOCurrencySymbol { get; }
    public string Name { get; }
    public string NativeName { get; }
    public string TwoLetterISORegionName { get; }
    public RegionInfo(string name);
    public virtual string get_CurrencySymbol();
    public static RegionInfo get_CurrentRegion();
    public virtual string get_DisplayName();
    public virtual string get_EnglishName();
    public virtual bool get_IsMetric();
    public virtual string get_ISOCurrencySymbol();
    public virtual string get_Name();
    public virtual string get_NativeName();
    public virtual string get_TwoLetterISORegionName();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Globalization.StringInfo : object {
    public int LengthInTextElements { get; }
    public string String { get; public set; }
    public StringInfo(string value);
    public int get_LengthInTextElements();
    public string get_String();
    public void set_String(string value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static string GetNextTextElement(string str);
    public static string GetNextTextElement(string str, int index);
    public static TextElementEnumerator GetTextElementEnumerator(string str);
    public static TextElementEnumerator GetTextElementEnumerator(string str, int index);
    public static Int32[] ParseCombiningCharacters(string str);
}
public class System.Globalization.TextElementEnumerator : object {
    public object Current { get; }
    public int ElementIndex { get; }
    public sealed virtual object get_Current();
    public int get_ElementIndex();
    public string GetTextElement();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Globalization.TextInfo : object {
    public string CultureName { get; }
    public bool IsReadOnly { get; }
    public bool IsRightToLeft { get; }
    public string ListSeparator { get; public set; }
    public string get_CultureName();
    public bool get_IsReadOnly();
    public bool get_IsRightToLeft();
    public virtual string get_ListSeparator();
    public virtual void set_ListSeparator(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual char ToLower(char c);
    public virtual string ToLower(string str);
    public virtual string ToString();
    public virtual char ToUpper(char c);
    public virtual string ToUpper(string str);
}
public enum System.Globalization.UnicodeCategory : Enum {
    public int value__;
    public static UnicodeCategory ClosePunctuation;
    public static UnicodeCategory ConnectorPunctuation;
    public static UnicodeCategory Control;
    public static UnicodeCategory CurrencySymbol;
    public static UnicodeCategory DashPunctuation;
    public static UnicodeCategory DecimalDigitNumber;
    public static UnicodeCategory EnclosingMark;
    public static UnicodeCategory FinalQuotePunctuation;
    public static UnicodeCategory Format;
    public static UnicodeCategory InitialQuotePunctuation;
    public static UnicodeCategory LetterNumber;
    public static UnicodeCategory LineSeparator;
    public static UnicodeCategory LowercaseLetter;
    public static UnicodeCategory MathSymbol;
    public static UnicodeCategory ModifierLetter;
    public static UnicodeCategory ModifierSymbol;
    public static UnicodeCategory NonSpacingMark;
    public static UnicodeCategory OpenPunctuation;
    public static UnicodeCategory OtherLetter;
    public static UnicodeCategory OtherNotAssigned;
    public static UnicodeCategory OtherNumber;
    public static UnicodeCategory OtherPunctuation;
    public static UnicodeCategory OtherSymbol;
    public static UnicodeCategory ParagraphSeparator;
    public static UnicodeCategory PrivateUse;
    public static UnicodeCategory SpaceSeparator;
    public static UnicodeCategory SpacingCombiningMark;
    public static UnicodeCategory Surrogate;
    public static UnicodeCategory TitlecaseLetter;
    public static UnicodeCategory UppercaseLetter;
}
