public static class System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes : object {
    public static string Json;
    public static string JsonArray;
    public static string JsonNull;
}
public static class System.IdentityModel.Tokens.Jwt.JwtConstants : object {
    public static string HeaderType;
    public static string HeaderTypeAlt;
    public static string TokenType;
    public static string TokenTypeAlt;
    public static string JsonCompactSerializationRegex;
    public static string JweCompactSerializationRegex;
    internal static int JweSegmentCount;
    internal static int JwsSegmentCount;
    internal static int MaxJwtSegmentCount;
    public static string DirectKeyUseAlg;
}
public class System.IdentityModel.Tokens.Jwt.JwtHeader : Dictionary`2<string, object> {
    internal string ClassName;
    [CompilerGeneratedAttribute]
private EncryptingCredentials <EncryptingCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private SigningCredentials <SigningCredentials>k__BackingField;
    internal static IList`1<string> DefaultHeaderParameters;
    public string Alg { get; private set; }
    public string Cty { get; private set; }
    public string Enc { get; private set; }
    public EncryptingCredentials EncryptingCredentials { get; private set; }
    public string IV { get; }
    public string Kid { get; private set; }
    public SigningCredentials SigningCredentials { get; private set; }
    public string Typ { get; private set; }
    public string X5t { get; }
    public string X5c { get; }
    public string Zip { get; }
    internal JwtHeader(string json);
    public JwtHeader(SigningCredentials signingCredentials);
    public JwtHeader(EncryptingCredentials encryptingCredentials);
    public JwtHeader(SigningCredentials signingCredentials, IDictionary`2<string, string> outboundAlgorithmMap);
    public JwtHeader(SigningCredentials signingCredentials, IDictionary`2<string, string> outboundAlgorithmMap, string tokenType);
    public JwtHeader(SigningCredentials signingCredentials, IDictionary`2<string, string> outboundAlgorithmMap, string tokenType, IDictionary`2<string, object> additionalInnerHeaderClaims);
    public JwtHeader(EncryptingCredentials encryptingCredentials, IDictionary`2<string, string> outboundAlgorithmMap);
    public JwtHeader(EncryptingCredentials encryptingCredentials, IDictionary`2<string, string> outboundAlgorithmMap, string tokenType);
    public JwtHeader(EncryptingCredentials encryptingCredentials, IDictionary`2<string, string> outboundAlgorithmMap, string tokenType, IDictionary`2<string, object> additionalHeaderClaims);
    private static JwtHeader();
    public string get_Alg();
    private void set_Alg(string value);
    public string get_Cty();
    private void set_Cty(string value);
    public string get_Enc();
    private void set_Enc(string value);
    [CompilerGeneratedAttribute]
public EncryptingCredentials get_EncryptingCredentials();
    [CompilerGeneratedAttribute]
private void set_EncryptingCredentials(EncryptingCredentials value);
    public string get_IV();
    public string get_Kid();
    private void set_Kid(string value);
    [CompilerGeneratedAttribute]
public SigningCredentials get_SigningCredentials();
    [CompilerGeneratedAttribute]
private void set_SigningCredentials(SigningCredentials value);
    public string get_Typ();
    private void set_Typ(string value);
    public string get_X5t();
    public string get_X5c();
    public string get_Zip();
    public static JwtHeader Base64UrlDeserialize(string base64UrlEncodedJsonString);
    public virtual string Base64UrlEncode();
    internal string GetStandardClaim(string claimType);
    internal void AddAdditionalClaims(IDictionary`2<string, object> additionalHeaderClaims, bool setDefaultCtyClaim);
    public virtual string SerializeToJson();
}
public class System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames : ValueType {
    public static string Alg;
    public static string Cty;
    public static string Enc;
    public static string IV;
    public static string Jku;
    public static string Jwk;
    public static string Kid;
    public static string Typ;
    public static string X5c;
    public static string X5t;
    public static string X5u;
    public static string Zip;
    public static string Epk;
    public static string Apu;
    public static string Apv;
}
public class System.IdentityModel.Tokens.Jwt.JwtPayload : Dictionary`2<string, object> {
    internal static string ClassName;
    internal List`1<string> _audiences;
    internal string _azp;
    internal Nullable`1<long> _exp;
    internal Nullable`1<DateTime> _expDateTime;
    internal Nullable`1<long> _iat;
    internal Nullable`1<DateTime> _iatDateTime;
    internal string _id;
    internal string _iss;
    internal string _jti;
    internal Nullable`1<long> _nbf;
    internal Nullable`1<DateTime> _nbfDateTime;
    internal string _sub;
    internal string _tid;
    public string Actort { get; }
    public string Acr { get; }
    public IList`1<string> Amr { get; }
    public Nullable`1<int> AuthTime { get; }
    public IList`1<string> Aud { get; }
    public string Azp { get; }
    public string CHash { get; }
    [ObsoleteAttribute("`int? JwtPayload.Exp` is deprecated and will be removed in a future release. Use `long? JwtPayload.Expiration` instead. For more information, see https://aka.ms/IdentityModel/7-breaking-changes")]
public Nullable`1<int> Exp { get; }
    public Nullable`1<long> Expiration { get; }
    public string Jti { get; }
    [ObsoleteAttribute("`int? JwtPayload.Iat` is deprecated and will be removed in a future release. Use `DateTime JwtPayload.IssuedAt` instead. For more information, see https://aka.ms/IdentityModel/7-breaking-changes")]
public Nullable`1<int> Iat { get; }
    public string Iss { get; }
    [ObsoleteAttribute("`int? JwtPayload.Nbf` is deprecated and will be removed in a future release. Use `long? JwtPayload.NotBefore` instead. For more information, see https://aka.ms/IdentityModel/7-breaking-changes")]
public Nullable`1<int> Nbf { get; }
    public string Nonce { get; }
    public Nullable`1<long> NotBefore { get; }
    public string Sub { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public DateTime IssuedAt { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public JwtPayload(IEnumerable`1<Claim> claims);
    public JwtPayload(string issuer, string audience, IEnumerable`1<Claim> claims, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires);
    public JwtPayload(string issuer, string audience, IEnumerable`1<Claim> claims, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt);
    public JwtPayload(string issuer, string audience, IEnumerable`1<Claim> claims, IDictionary`2<string, object> claimsCollection, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt);
    internal static JwtPayload CreatePayload(Byte[] bytes, int length);
    internal void AddFirstPriorityClaims(string issuer, string audience, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt);
    public string get_Actort();
    public string get_Acr();
    public IList`1<string> get_Amr();
    public Nullable`1<int> get_AuthTime();
    public IList`1<string> get_Aud();
    public string get_Azp();
    public string get_CHash();
    public Nullable`1<int> get_Exp();
    public Nullable`1<long> get_Expiration();
    public string get_Jti();
    public Nullable`1<int> get_Iat();
    public string get_Iss();
    public Nullable`1<int> get_Nbf();
    public string get_Nonce();
    public Nullable`1<long> get_NotBefore();
    public string get_Sub();
    public DateTime get_ValidFrom();
    public DateTime get_ValidTo();
    public DateTime get_IssuedAt();
    public virtual IEnumerable`1<Claim> get_Claims();
    private void AddListofObjects(string key, IEnumerable`1<object> objects, List`1<Claim> claims, string issuer);
    internal static void AddClaimsFromJsonElement(string claimType, string issuer, JsonElement jsonElement, List`1<Claim> claims);
    public void AddClaim(Claim claim);
    public void AddClaims(IEnumerable`1<Claim> claims);
    internal void AddDictionaryClaims(IDictionary`2<string, object> claimsCollection);
    internal static string GetClaimValueType(object value);
    internal string GetStandardClaim(string claimType);
    internal Nullable`1<int> GetIntClaim(string claimType);
    internal Nullable`1<long> GetLongClaim(string claimType);
    private static bool TryConvertToInt(object value, Int32& outVal);
    private static bool TryConvertToLong(object value, Int64& outVal);
    internal List`1<string> GetListOfClaims(string claimType);
    public virtual string SerializeToJson();
    public static JwtPayload Base64UrlDeserialize(string base64UrlEncodedJsonString);
    public virtual string Base64UrlEncode();
    public static JwtPayload Deserialize(string jsonString);
}
public class System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames : ValueType {
    public static string Actort;
    public static string Acr;
    public static string Amr;
    public static string Aud;
    public static string AuthTime;
    public static string Azp;
    public static string Birthdate;
    public static string CHash;
    public static string AtHash;
    public static string Email;
    public static string Exp;
    public static string Gender;
    public static string FamilyName;
    public static string GivenName;
    public static string Iat;
    public static string Iss;
    public static string Jti;
    public static string Name;
    public static string NameId;
    public static string Nonce;
    public static string Nbf;
    public static string Prn;
    public static string Sid;
    public static string Sub;
    public static string Typ;
    public static string UniqueName;
    public static string Website;
}
public class System.IdentityModel.Tokens.Jwt.JwtSecurityToken : SecurityToken {
    private JwtPayload _payload;
    [CompilerGeneratedAttribute]
private JwtHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private JwtSecurityToken <InnerToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawAuthenticationTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawCiphertext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawEncryptedKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawInitializationVector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <SigningKey>k__BackingField;
    public string Actor { get; }
    public IEnumerable`1<string> Audiences { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public string EncodedHeader { get; }
    public string EncodedPayload { get; }
    public JwtHeader Header { get; internal set; }
    public string Id { get; }
    public string Issuer { get; }
    public JwtPayload Payload { get; internal set; }
    public JwtSecurityToken InnerToken { get; internal set; }
    public string RawAuthenticationTag { get; private set; }
    public string RawCiphertext { get; private set; }
    public string RawData { get; private set; }
    public string RawEncryptedKey { get; private set; }
    public string RawInitializationVector { get; private set; }
    public string RawHeader { get; internal set; }
    public string RawPayload { get; internal set; }
    public string RawSignature { get; internal set; }
    public SecurityKey SecurityKey { get; }
    public string SignatureAlgorithm { get; }
    public SigningCredentials SigningCredentials { get; }
    public EncryptingCredentials EncryptingCredentials { get; }
    public SecurityKey SigningKey { get; public set; }
    public string Subject { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public DateTime IssuedAt { get; }
    public JwtSecurityToken(string jwtEncodedString);
    public JwtSecurityToken(JwtHeader header, JwtPayload payload, string rawHeader, string rawPayload, string rawSignature);
    public JwtSecurityToken(JwtHeader header, JwtSecurityToken innerToken, string rawHeader, string rawEncryptedKey, string rawInitializationVector, string rawCiphertext, string rawAuthenticationTag);
    public JwtSecurityToken(JwtHeader header, JwtPayload payload);
    public JwtSecurityToken(string issuer, string audience, IEnumerable`1<Claim> claims, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SigningCredentials signingCredentials);
    public string get_Actor();
    public IEnumerable`1<string> get_Audiences();
    public IEnumerable`1<Claim> get_Claims();
    public virtual string get_EncodedHeader();
    public virtual string get_EncodedPayload();
    [CompilerGeneratedAttribute]
public JwtHeader get_Header();
    [CompilerGeneratedAttribute]
internal void set_Header(JwtHeader value);
    public virtual string get_Id();
    public virtual string get_Issuer();
    public JwtPayload get_Payload();
    internal void set_Payload(JwtPayload value);
    [CompilerGeneratedAttribute]
public JwtSecurityToken get_InnerToken();
    [CompilerGeneratedAttribute]
internal void set_InnerToken(JwtSecurityToken value);
    [CompilerGeneratedAttribute]
public string get_RawAuthenticationTag();
    [CompilerGeneratedAttribute]
private void set_RawAuthenticationTag(string value);
    [CompilerGeneratedAttribute]
public string get_RawCiphertext();
    [CompilerGeneratedAttribute]
private void set_RawCiphertext(string value);
    [CompilerGeneratedAttribute]
public string get_RawData();
    [CompilerGeneratedAttribute]
private void set_RawData(string value);
    [CompilerGeneratedAttribute]
public string get_RawEncryptedKey();
    [CompilerGeneratedAttribute]
private void set_RawEncryptedKey(string value);
    [CompilerGeneratedAttribute]
public string get_RawInitializationVector();
    [CompilerGeneratedAttribute]
private void set_RawInitializationVector(string value);
    [CompilerGeneratedAttribute]
public string get_RawHeader();
    [CompilerGeneratedAttribute]
internal void set_RawHeader(string value);
    [CompilerGeneratedAttribute]
public string get_RawPayload();
    [CompilerGeneratedAttribute]
internal void set_RawPayload(string value);
    [CompilerGeneratedAttribute]
public string get_RawSignature();
    [CompilerGeneratedAttribute]
internal void set_RawSignature(string value);
    public virtual SecurityKey get_SecurityKey();
    public string get_SignatureAlgorithm();
    public SigningCredentials get_SigningCredentials();
    public EncryptingCredentials get_EncryptingCredentials();
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_SigningKey();
    [CompilerGeneratedAttribute]
public virtual void set_SigningKey(SecurityKey value);
    public string get_Subject();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public virtual DateTime get_IssuedAt();
    public virtual string ToString();
    public virtual string UnsafeToString();
    internal void Decode(String[] tokenParts, string rawData);
    private void DecodeJws(string payload);
    private void DecodeJwe(String[] tokenParts);
}
public static class System.IdentityModel.Tokens.Jwt.JwtSecurityTokenConverter : object {
    public static JwtSecurityToken Convert(JsonWebToken token);
}
public class System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler : SecurityTokenHandler {
    private ISet`1<string> _inboundClaimFilter;
    private IDictionary`2<string, string> _inboundClaimTypeMap;
    private static string _jsonClaimType;
    private static string _namespace;
    private static string _className;
    private IDictionary`2<string, string> _outboundClaimTypeMap;
    private Dictionary`2<string, string> _outboundAlgorithmMap;
    private static string _shortClaimType;
    private bool _mapInboundClaims;
    public static IDictionary`2<string, string> DefaultInboundClaimTypeMap;
    public static bool DefaultMapInboundClaims;
    public static IDictionary`2<string, string> DefaultOutboundClaimTypeMap;
    public static ISet`1<string> DefaultInboundClaimFilter;
    public static IDictionary`2<string, string> DefaultOutboundAlgorithmMap;
    public bool MapInboundClaims { get; public set; }
    public IDictionary`2<string, string> InboundClaimTypeMap { get; public set; }
    public IDictionary`2<string, string> OutboundClaimTypeMap { get; public set; }
    public IDictionary`2<string, string> OutboundAlgorithmMap { get; }
    public ISet`1<string> InboundClaimFilter { get; public set; }
    public static string ShortClaimTypeProperty { get; public set; }
    public static string JsonClaimTypeProperty { get; public set; }
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public Type TokenType { get; }
    private static JwtSecurityTokenHandler();
    public bool get_MapInboundClaims();
    public void set_MapInboundClaims(bool value);
    public IDictionary`2<string, string> get_InboundClaimTypeMap();
    public void set_InboundClaimTypeMap(IDictionary`2<string, string> value);
    public IDictionary`2<string, string> get_OutboundClaimTypeMap();
    public void set_OutboundClaimTypeMap(IDictionary`2<string, string> value);
    public IDictionary`2<string, string> get_OutboundAlgorithmMap();
    public ISet`1<string> get_InboundClaimFilter();
    public void set_InboundClaimFilter(ISet`1<string> value);
    public static string get_ShortClaimTypeProperty();
    public static void set_ShortClaimTypeProperty(string value);
    public static string get_JsonClaimTypeProperty();
    public static void set_JsonClaimTypeProperty(string value);
    public virtual bool get_CanValidateToken();
    public virtual bool get_CanWriteToken();
    public virtual Type get_TokenType();
    public virtual bool CanReadToken(string token);
    public virtual string CreateEncodedJwt(SecurityTokenDescriptor tokenDescriptor);
    public virtual string CreateEncodedJwt(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials);
    public virtual string CreateEncodedJwt(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials);
    public virtual string CreateEncodedJwt(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> claimCollection);
    public virtual JwtSecurityToken CreateJwtSecurityToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual JwtSecurityToken CreateJwtSecurityToken(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials);
    public virtual JwtSecurityToken CreateJwtSecurityToken(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> claimCollection);
    public virtual JwtSecurityToken CreateJwtSecurityToken(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    private JwtSecurityToken CreateJwtSecurityTokenPrivate(string issuer, string audience, ClaimsIdentity subject, Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, Nullable`1<DateTime> issuedAt, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> claimCollection, string tokenType, IDictionary`2<string, object> additionalHeaderClaims, IDictionary`2<string, object> additionalInnerHeaderClaims);
    private JwtSecurityToken EncryptToken(JwtSecurityToken innerJwt, EncryptingCredentials encryptingCredentials, string tokenType, IDictionary`2<string, object> additionalHeaderClaims);
    [IteratorStateMachineAttribute("System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler/<OutboundClaimTypeTransform>d__55")]
private IEnumerable`1<Claim> OutboundClaimTypeTransform(IEnumerable`1<Claim> claims);
    private Dictionary`2<string, object> OutboundClaimTypeTransform(IDictionary`2<string, object> claimCollection);
    public JwtSecurityToken ReadJwtToken(string token);
    public virtual SecurityToken ReadToken(string token);
    public virtual SecurityToken ReadToken(XmlReader reader, TokenValidationParameters validationParameters);
    public virtual ClaimsPrincipal ValidateToken(string token, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    private ClaimsPrincipal ValidateToken(string token, JwtSecurityToken outerToken, TokenValidationParameters validationParameters, SecurityToken& signatureValidatedToken);
    private ClaimsPrincipal ValidateJWE(string decryptedJwt, JwtSecurityToken outerToken, TokenValidationParameters validationParameters, BaseConfiguration currentConfiguration, SecurityToken& signatureValidatedToken, ExceptionDispatchInfo& exceptionThrown);
    private ClaimsPrincipal ValidateJWS(string token, TokenValidationParameters validationParameters, BaseConfiguration currentConfiguration, SecurityToken& signatureValidatedToken, ExceptionDispatchInfo& exceptionThrown);
    private static JwtSecurityToken ValidateSignatureUsingDelegates(string token, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private JwtSecurityToken ValidateSignatureAndIssuerSecurityKey(string token, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private JwtSecurityToken GetJwtSecurityTokenFromToken(string token, TokenValidationParameters validationParameters);
    protected ClaimsPrincipal ValidateTokenPayload(JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    private ClaimsPrincipal ValidateTokenPayload(JwtSecurityToken jwtToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private ClaimsPrincipal CreateClaimsPrincipalFromToken(JwtSecurityToken jwtToken, string issuer, TokenValidationParameters validationParameters);
    public virtual string WriteToken(SecurityToken token);
    private static bool ValidateSignature(Byte[] encodedBytes, Byte[] signature, SecurityKey key, string algorithm, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual JwtSecurityToken ValidateSignature(string token, TokenValidationParameters validationParameters);
    private JwtSecurityToken ValidateSignature(string token, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    [IteratorStateMachineAttribute("System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler/<GetAllDecryptionKeys>d__74")]
private static IEnumerable`1<SecurityKey> GetAllDecryptionKeys(TokenValidationParameters validationParameters);
    protected virtual ClaimsIdentity CreateClaimsIdentity(JwtSecurityToken jwtToken, string issuer, TokenValidationParameters validationParameters);
    private ClaimsIdentity CreateClaimsIdentityWithMapping(JwtSecurityToken jwtToken, string actualIssuer, TokenValidationParameters validationParameters);
    private ClaimsIdentity CreateClaimsIdentityWithoutMapping(JwtSecurityToken jwtToken, string actualIssuer, TokenValidationParameters validationParameters);
    protected virtual string CreateActorValue(ClaimsIdentity actor);
    protected virtual void ValidateAudience(IEnumerable`1<string> audiences, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateLifetime(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    protected virtual string ValidateIssuer(string issuer, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateTokenReplay(Nullable`1<DateTime> expires, string securityToken, TokenValidationParameters validationParameters);
    protected virtual SecurityKey ResolveIssuerSigningKey(string token, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    protected virtual SecurityKey ResolveTokenDecryptionKey(string token, JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    protected string DecryptToken(JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    internal IEnumerable`1<SecurityKey> GetContentEncryptionKeys(JwtSecurityToken jwtToken, TokenValidationParameters validationParameters);
    private static Byte[] GetSymmetricSecurityKey(SecurityKey key);
    protected virtual void ValidateIssuerSecurityKey(SecurityKey key, JwtSecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
    public virtual Task`1<TokenValidationResult> ValidateTokenAsync(string token, TokenValidationParameters validationParameters);
}
internal static class System.IdentityModel.Tokens.Jwt.LogMessages : object {
    internal static string IDX12401;
    internal static string IDX12706;
    internal static string IDX12709;
    internal static string IDX12710;
    internal static string IDX12711;
    internal static string IDX12712;
    internal static string IDX12713;
    internal static string IDX12714;
    internal static string IDX12715;
    internal static string IDX12720;
    internal static string IDX12721;
    internal static string IDX12722;
    internal static string IDX12723;
    internal static string IDX12729;
    internal static string IDX12730;
    internal static string IDX12735;
    internal static string IDX12736;
    internal static string IDX12737;
    internal static string IDX12738;
    internal static string IDX12739;
    internal static string IDX12740;
    internal static string IDX12741;
    internal static string IDX12742;
}
