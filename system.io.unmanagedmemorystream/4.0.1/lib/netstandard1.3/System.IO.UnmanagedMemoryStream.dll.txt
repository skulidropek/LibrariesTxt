internal static class FxResources.System.IO.UnmanagedMemoryStream.SR : object {
}
internal static class System.IO.Error : object {
    internal static Exception GetStreamIsClosed();
    internal static Exception GetReadNotSupported();
    internal static Exception GetWriteNotSupported();
}
public class System.IO.UnmanagedMemoryAccessor : object {
    [SecurityCriticalAttribute]
private SafeBuffer _buffer;
    private long _offset;
    private long _capacity;
    private FileAccess _access;
    private bool _isOpen;
    private bool _canRead;
    private bool _canWrite;
    public long Capacity { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    protected bool IsOpen { get; }
    [SecuritySafeCriticalAttribute]
public UnmanagedMemoryAccessor(SafeBuffer buffer, long offset, long capacity);
    [SecuritySafeCriticalAttribute]
public UnmanagedMemoryAccessor(SafeBuffer buffer, long offset, long capacity, FileAccess access);
    [SecuritySafeCriticalAttribute]
protected void Initialize(SafeBuffer buffer, long offset, long capacity, FileAccess access);
    public long get_Capacity();
    public bool get_CanRead();
    public bool get_CanWrite();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected bool get_IsOpen();
    public bool ReadBoolean(long position);
    public byte ReadByte(long position);
    [SecuritySafeCriticalAttribute]
public char ReadChar(long position);
    [SecuritySafeCriticalAttribute]
public short ReadInt16(long position);
    [SecuritySafeCriticalAttribute]
public int ReadInt32(long position);
    [SecuritySafeCriticalAttribute]
public long ReadInt64(long position);
    private int UnsafeReadInt32(Byte* pointer);
    [SecuritySafeCriticalAttribute]
public decimal ReadDecimal(long position);
    [SecuritySafeCriticalAttribute]
public float ReadSingle(long position);
    [SecuritySafeCriticalAttribute]
public double ReadDouble(long position);
    [SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public sbyte ReadSByte(long position);
    [SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public ushort ReadUInt16(long position);
    [SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public UInt32 ReadUInt32(long position);
    [SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public ulong ReadUInt64(long position);
    public void Write(long position, bool value);
    public void Write(long position, byte value);
    [SecuritySafeCriticalAttribute]
public void Write(long position, char value);
    [SecuritySafeCriticalAttribute]
public void Write(long position, short value);
    [SecuritySafeCriticalAttribute]
public void Write(long position, int value);
    [SecuritySafeCriticalAttribute]
public void Write(long position, long value);
    private void UnsafeWriteInt32(Byte* pointer, int value);
    [SecuritySafeCriticalAttribute]
public void Write(long position, decimal value);
    [SecuritySafeCriticalAttribute]
public void Write(long position, float value);
    [SecuritySafeCriticalAttribute]
public void Write(long position, double value);
    [SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public void Write(long position, sbyte value);
    [SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public void Write(long position, ushort value);
    [SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public void Write(long position, UInt32 value);
    [SecuritySafeCriticalAttribute]
[CLSCompliantAttribute("False")]
public void Write(long position, ulong value);
    [SecuritySafeCriticalAttribute]
private byte InternalReadByte(long position);
    [SecuritySafeCriticalAttribute]
private void InternalWrite(long position, byte value);
    private void EnsureSafeToRead(long position, int sizeOfType);
    private void EnsureSafeToWrite(long position, int sizeOfType);
}
public class System.IO.UnmanagedMemoryStream : Stream {
    [SecurityCriticalAttribute]
private SafeBuffer _buffer;
    [SecurityCriticalAttribute]
private Byte* _mem;
    private long _length;
    private long _capacity;
    private long _position;
    private long _offset;
    private FileAccess _access;
    private bool _isOpen;
    private Task`1<int> _lastReadTask;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Capacity { get; }
    public long Position { get; public set; }
    [CLSCompliantAttribute("False")]
public Byte* PositionPointer { get; public set; }
    [SecuritySafeCriticalAttribute]
public UnmanagedMemoryStream(SafeBuffer buffer, long offset, long length);
    [SecuritySafeCriticalAttribute]
public UnmanagedMemoryStream(SafeBuffer buffer, long offset, long length, FileAccess access);
    [SecurityCriticalAttribute]
[CLSCompliantAttribute("False")]
public UnmanagedMemoryStream(Byte* pointer, long length);
    [SecurityCriticalAttribute]
[CLSCompliantAttribute("False")]
public UnmanagedMemoryStream(Byte* pointer, long length, long capacity, FileAccess access);
    [SecurityCriticalAttribute]
private static void ZeroMemory(Byte* src, long len);
    [SecuritySafeCriticalAttribute]
protected void Initialize(SafeBuffer buffer, long offset, long length, FileAccess access);
    [SecurityCriticalAttribute]
private void Initialize(SafeBuffer buffer, long offset, long length, FileAccess access, bool skipSecurityCheck);
    [SecurityCriticalAttribute]
[CLSCompliantAttribute("False")]
protected void Initialize(Byte* pointer, long length, long capacity, FileAccess access);
    [SecurityCriticalAttribute]
private void Initialize(Byte* pointer, long length, long capacity, FileAccess access, bool skipSecurityCheck);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    [SecuritySafeCriticalAttribute]
protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long get_Length();
    public long get_Capacity();
    public virtual long get_Position();
    [SecuritySafeCriticalAttribute]
public virtual void set_Position(long value);
    [SecurityCriticalAttribute]
public Byte* get_PositionPointer();
    [SecurityCriticalAttribute]
public void set_PositionPointer(Byte* value);
    [SecuritySafeCriticalAttribute]
public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [SecuritySafeCriticalAttribute]
public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin loc);
    [SecuritySafeCriticalAttribute]
public virtual void SetLength(long value);
    [SecuritySafeCriticalAttribute]
public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [SecuritySafeCriticalAttribute]
public virtual void WriteByte(byte value);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_BufferTooSmall { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string Argument_InvalidSafeBufferOffLen { get; }
    internal static string Argument_InvalidSeekOrigin { get; }
    internal static string Argument_NotEnoughBytesToRead { get; }
    internal static string Argument_NotEnoughBytesToWrite { get; }
    internal static string Argument_OffsetAndCapacityOutOfBounds { get; }
    internal static string Argument_UnmanagedMemAccessorWrapAround { get; }
    internal static string ArgumentNull_Buffer { get; }
    internal static string ArgumentOutOfRange_Enum { get; }
    internal static string ArgumentOutOfRange_LengthGreaterThanCapacity { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string ArgumentOutOfRange_PositionLessThanCapacityRequired { get; }
    internal static string ArgumentOutOfRange_StreamLength { get; }
    internal static string ArgumentOutOfRange_UnmanagedMemStreamWrapAround { get; }
    internal static string NotSupported_Reading { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string NotSupported_UmsSafeBuffer { get; }
    internal static string NotSupported_Writing { get; }
    internal static string IndexOutOfRange_UMSPosition { get; }
    internal static string InvalidOperation_CalledTwice { get; }
    internal static string ObjectDisposed_StreamIsClosed { get; }
    internal static string ObjectDisposed_ViewAccessorClosed { get; }
    internal static string IO_FixedCapacity { get; }
    internal static string IO_SeekBeforeBegin { get; }
    internal static string IO_StreamTooLong { get; }
    internal static string Arg_BadDecimal { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_BufferTooSmall();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_Argument_InvalidSafeBufferOffLen();
    internal static string get_Argument_InvalidSeekOrigin();
    internal static string get_Argument_NotEnoughBytesToRead();
    internal static string get_Argument_NotEnoughBytesToWrite();
    internal static string get_Argument_OffsetAndCapacityOutOfBounds();
    internal static string get_Argument_UnmanagedMemAccessorWrapAround();
    internal static string get_ArgumentNull_Buffer();
    internal static string get_ArgumentOutOfRange_Enum();
    internal static string get_ArgumentOutOfRange_LengthGreaterThanCapacity();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_ArgumentOutOfRange_PositionLessThanCapacityRequired();
    internal static string get_ArgumentOutOfRange_StreamLength();
    internal static string get_ArgumentOutOfRange_UnmanagedMemStreamWrapAround();
    internal static string get_NotSupported_Reading();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_NotSupported_UmsSafeBuffer();
    internal static string get_NotSupported_Writing();
    internal static string get_IndexOutOfRange_UMSPosition();
    internal static string get_InvalidOperation_CalledTwice();
    internal static string get_ObjectDisposed_StreamIsClosed();
    internal static string get_ObjectDisposed_ViewAccessorClosed();
    internal static string get_IO_FixedCapacity();
    internal static string get_IO_SeekBeforeBegin();
    internal static string get_IO_StreamTooLong();
    internal static string get_Arg_BadDecimal();
    internal static Type get_ResourceType();
}
