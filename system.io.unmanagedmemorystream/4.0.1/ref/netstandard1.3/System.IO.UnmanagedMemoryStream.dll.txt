public class System.IO.UnmanagedMemoryAccessor : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public long Capacity { get; }
    protected bool IsOpen { get; }
    public UnmanagedMemoryAccessor(SafeBuffer buffer, long offset, long capacity);
    public UnmanagedMemoryAccessor(SafeBuffer buffer, long offset, long capacity, FileAccess access);
    public bool get_CanRead();
    public bool get_CanWrite();
    public long get_Capacity();
    protected bool get_IsOpen();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected void Initialize(SafeBuffer buffer, long offset, long capacity, FileAccess access);
    public bool ReadBoolean(long position);
    public byte ReadByte(long position);
    public char ReadChar(long position);
    public decimal ReadDecimal(long position);
    public double ReadDouble(long position);
    public short ReadInt16(long position);
    public int ReadInt32(long position);
    public long ReadInt64(long position);
    [CLSCompliantAttribute("False")]
public sbyte ReadSByte(long position);
    public float ReadSingle(long position);
    [CLSCompliantAttribute("False")]
public ushort ReadUInt16(long position);
    [CLSCompliantAttribute("False")]
public UInt32 ReadUInt32(long position);
    [CLSCompliantAttribute("False")]
public ulong ReadUInt64(long position);
    public void Write(long position, bool value);
    public void Write(long position, byte value);
    public void Write(long position, char value);
    public void Write(long position, decimal value);
    public void Write(long position, double value);
    public void Write(long position, short value);
    public void Write(long position, int value);
    public void Write(long position, long value);
    [CLSCompliantAttribute("False")]
public void Write(long position, sbyte value);
    public void Write(long position, float value);
    [CLSCompliantAttribute("False")]
public void Write(long position, ushort value);
    [CLSCompliantAttribute("False")]
public void Write(long position, UInt32 value);
    [CLSCompliantAttribute("False")]
public void Write(long position, ulong value);
}
public class System.IO.UnmanagedMemoryStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Capacity { get; }
    public long Length { get; }
    public long Position { get; public set; }
    [CLSCompliantAttribute("False")]
public Byte* PositionPointer { get; public set; }
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
public UnmanagedMemoryStream(Byte* pointer, long length);
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
public UnmanagedMemoryStream(Byte* pointer, long length, long capacity, FileAccess access);
    public UnmanagedMemoryStream(SafeBuffer buffer, long offset, long length);
    public UnmanagedMemoryStream(SafeBuffer buffer, long offset, long length, FileAccess access);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public long get_Capacity();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [SecurityCriticalAttribute]
public Byte* get_PositionPointer();
    [SecurityCriticalAttribute]
public void set_PositionPointer(Byte* value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
protected void Initialize(Byte* pointer, long length, long capacity, FileAccess access);
    protected void Initialize(SafeBuffer buffer, long offset, long length, FileAccess access);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin loc);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
}
