internal static class FxResources.System.Linq.Queryable.SR : object {
}
public abstract class System.Linq.EnumerableExecutor : object {
    internal abstract virtual object ExecuteBoxed();
    internal static EnumerableExecutor Create(Expression expression);
}
public class System.Linq.EnumerableExecutor`1 : EnumerableExecutor {
    private Expression _expression;
    public EnumerableExecutor`1(Expression expression);
    internal virtual object ExecuteBoxed();
    internal T Execute();
}
public abstract class System.Linq.EnumerableQuery : object {
    internal Expression Expression { get; }
    internal IEnumerable Enumerable { get; }
    internal abstract virtual Expression get_Expression();
    internal abstract virtual IEnumerable get_Enumerable();
    internal static IQueryable Create(Type elementType, IEnumerable sequence);
    internal static IQueryable Create(Type elementType, Expression expression);
}
public class System.Linq.EnumerableQuery`1 : EnumerableQuery {
    private Expression _expression;
    private IEnumerable`1<T> _enumerable;
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    internal Expression Expression { get; }
    internal IEnumerable Enumerable { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    public EnumerableQuery`1(IEnumerable`1<T> enumerable);
    public EnumerableQuery`1(Expression expression);
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    internal virtual Expression get_Expression();
    internal virtual IEnumerable get_Enumerable();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<S> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override S System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private IEnumerator`1<T> GetEnumerator();
    public virtual string ToString();
}
internal class System.Linq.EnumerableRewriter : ExpressionVisitor {
    private Dictionary`2<LabelTarget, LabelTarget> _targetCache;
    private Dictionary`2<Type, Type> _equivalentTypeCache;
    private static ILookup`2 modreq(System.Runtime.CompilerServices.IsVolatile) s_seqMethods;
    protected virtual Expression VisitMethodCall(MethodCallExpression m);
    private ReadOnlyCollection`1<Expression> FixupQuotedArgs(MethodInfo mi, ReadOnlyCollection`1<Expression> argList);
    private Expression FixupQuotedExpression(Type type, Expression expression);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    private static Type GetPublicType(Type t);
    private Type GetEquivalentType(Type type);
    protected virtual Expression VisitConstant(ConstantExpression c);
    private static MethodInfo FindEnumerableMethod(string name, ReadOnlyCollection`1<Expression> args, Type[] typeArgs);
    private static MethodInfo FindMethod(Type type, string name, ReadOnlyCollection`1<Expression> args, Type[] typeArgs);
    private static bool ArgsMatch(MethodInfo m, ReadOnlyCollection`1<Expression> args, Type[] typeArgs);
    private static Type StripExpression(Type type);
    protected virtual Expression VisitConditional(ConditionalExpression c);
    protected virtual Expression VisitBlock(BlockExpression node);
    protected virtual Expression VisitGoto(GotoExpression node);
    protected virtual LabelTarget VisitLabelTarget(LabelTarget node);
}
internal class System.Linq.Error : object {
    internal static Exception ArgumentNull(string message);
    internal static Exception ArgumentNotIEnumerableGeneric(string message);
    internal static Exception ArgumentNotValid(string message);
    internal static Exception ArgumentOutOfRange(string message);
    internal static Exception NoMethodOnType(string name, object type);
    internal static Exception NoMethodOnTypeMatchingArguments(string name, object type);
    internal static Exception EnumeratingNullEnumerableExpression();
}
[ExtensionAttribute]
public static class System.Linq.Queryable : object {
    [ExtensionAttribute]
public static IQueryable`1<TElement> AsQueryable(IEnumerable`1<TElement> source);
    [ExtensionAttribute]
public static IQueryable AsQueryable(IEnumerable source);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Where(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Where(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TResult> OfType(IQueryable source);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Cast(IQueryable source);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, TResult>> selector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    private static Expression GetSourceExpression(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TResult> GroupJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> GroupJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQueryable`1<TSource> TakeWhile(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> TakeWhile(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Skip(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IQueryable`1<TSource> SkipWhile(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<TSource> SkipWhile(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IEnumerable`1<TElement>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IEnumerable`1<TElement>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Distinct(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Distinct(IQueryable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Concat(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
public static IQueryable`1<TResult> Zip(IQueryable`1<TFirst> source1, IEnumerable`1<TSecond> source2, Expression`1<Func`3<TFirst, TSecond, TResult>> resultSelector);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Union(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Union(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Intersect(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Intersect(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Except(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Except(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static TSource First(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource First(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static TSource FirstOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource FirstOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static TSource Last(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource Last(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static TSource LastOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource LastOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static TSource Single(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource Single(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static TSource SingleOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TSource SingleOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static TSource ElementAt(IQueryable`1<TSource> source, int index);
    [ExtensionAttribute]
public static TSource ElementAtOrDefault(IQueryable`1<TSource> source, int index);
    [ExtensionAttribute]
public static IQueryable`1<TSource> DefaultIfEmpty(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static IQueryable`1<TSource> DefaultIfEmpty(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static bool Contains(IQueryable`1<TSource> source, TSource item);
    [ExtensionAttribute]
public static bool Contains(IQueryable`1<TSource> source, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IQueryable`1<TSource> Reverse(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static bool SequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
public static bool SequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static bool Any(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static bool Any(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static bool All(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static int Count(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static int Count(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static long LongCount(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static long LongCount(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
public static TSource Min(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TResult Min(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static TSource Max(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static TResult Max(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static int Sum(IQueryable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<int> Sum(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static long Sum(IQueryable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float Sum(IQueryable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> Sum(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double Sum(IQueryable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> Sum(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal Sum(IQueryable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Sum(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static int Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static Nullable`1<int> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static long Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static float Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static double Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static decimal Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static double Average(IQueryable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static double Average(IQueryable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float Average(IQueryable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> Average(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double Average(IQueryable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal Average(IQueryable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Average(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static float Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static decimal Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static TSource Aggregate(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func);
    [ExtensionAttribute]
public static TAccumulate Aggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func);
    [ExtensionAttribute]
public static TResult Aggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func, Expression`1<Func`2<TAccumulate, TResult>> selector);
    private static MethodInfo GetMethodInfoOf(Expression`1<Func`1<T>> expression);
}
internal static class System.Linq.Strings : object {
    internal static string ArgumentNotIEnumerableGeneric(string message);
    internal static string ArgumentNotValid(string message);
    internal static string NoMethodOnType(string name, object type);
    internal static string NoMethodOnTypeMatchingArguments(string name, object type);
    internal static string EnumeratingNullEnumerableExpression();
}
[ExtensionAttribute]
internal static class System.Linq.TypeHelper : object {
    internal static Type FindGenericType(Type definition, Type type);
    [ExtensionAttribute]
internal static bool IsAssignableFrom(Type source, Type destination);
    [ExtensionAttribute]
internal static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
internal static IEnumerable`1<MethodInfo> GetStaticMethods(Type type);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string ArgumentNotIEnumerableGeneric { get; }
    internal static string ArgumentNotValid { get; }
    internal static string NoMethodOnType { get; }
    internal static string NoMethodOnTypeMatchingArguments { get; }
    internal static string EnumeratingNullEnumerableExpression { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_ArgumentNotIEnumerableGeneric();
    internal static string get_ArgumentNotValid();
    internal static string get_NoMethodOnType();
    internal static string get_NoMethodOnTypeMatchingArguments();
    internal static string get_EnumeratingNullEnumerableExpression();
    internal static Type get_ResourceType();
}
