internal static class FxResources.System.Linq.SR : object {
}
internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
internal static class System.ArrayT`1 : object {
    public static void Copy(T[] sourceArray, int sourceIndex, T[] destinationArray, int destinationIndex, int length);
    public static T[] Resize(T[] src, int newLength, int copyCount);
    public static void Clear(T[] array, int index, int length);
}
internal class System.Linq.Buffer`1 : ValueType {
    internal TElement[] items;
    internal int count;
    internal Buffer`1(IEnumerable`1<TElement> source);
    internal TElement[] ToArray();
}
internal class System.Linq.EmptyEnumerable`1 : object {
    public static TElement[] Instance;
    private static EmptyEnumerable`1();
}
[ExtensionAttribute]
public static class System.Linq.Enumerable : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Where(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Where(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<WhereIterator>d__1`1")]
private static IEnumerable`1<TSource> WhereIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Select(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Select(IEnumerable`1<TSource> source, Func`3<TSource, int, TResult> selector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectIterator>d__1`2")]
private static IEnumerable`1<TResult> SelectIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, TResult> selector);
    private static Func`2<TSource, bool> CombinePredicates(Func`2<TSource, bool> predicate1, Func`2<TSource, bool> predicate2);
    private static Func`2<TSource, TResult> CombineSelectors(Func`2<TSource, TMiddle> selector1, Func`2<TMiddle, TResult> selector2);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectManyIterator>d__1`2")]
private static IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectManyIterator>d__2`2")]
private static IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectManyIterator>d__3`3")]
private static IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectManyIterator>d__4`3")]
private static IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Take(IEnumerable`1<TSource> source, int count);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<TakeIterator>d__1`1")]
private static IEnumerable`1<TSource> TakeIterator(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhile(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<TakeWhileIterator>d__1`1")]
private static IEnumerable`1<TSource> TakeWhileIterator(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhile(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<TakeWhileIterator>d__2`1")]
private static IEnumerable`1<TSource> TakeWhileIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Skip(IEnumerable`1<TSource> source, int count);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SkipIterator>d__1`1")]
private static IEnumerable`1<TSource> SkipIterator(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhile(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SkipWhileIterator>d__1`1")]
private static IEnumerable`1<TSource> SkipWhileIterator(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhile(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SkipWhileIterator>d__2`1")]
private static IEnumerable`1<TSource> SkipWhileIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Join(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Join(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<JoinIterator>d__1`4")]
private static IEnumerable`1<TResult> JoinIterator(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupJoin(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupJoin(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<GroupJoinIterator>d__1`4")]
private static IEnumerable`1<TResult> GroupJoinIterator(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescending(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescending(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenBy(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenBy(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescending(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescending(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Concat(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ConcatIterator>d__1`1")]
private static IEnumerable`1<TSource> ConcatIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ZipIterator>d__1`3")]
private static IEnumerable`1<TResult> ZipIterator(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<DistinctIterator>d__1`1")]
private static IEnumerable`1<TSource> DistinctIterator(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Union(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Union(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<UnionIterator>d__1`1")]
private static IEnumerable`1<TSource> UnionIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Intersect(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Intersect(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<IntersectIterator>d__1`1")]
private static IEnumerable`1<TSource> IntersectIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ExceptIterator>d__1`1")]
private static IEnumerable`1<TSource> ExceptIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Reverse(IEnumerable`1<TSource> source);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ReverseIterator>d__1`1")]
private static IEnumerable`1<TSource> ReverseIterator(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static bool SequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool SequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> AsEnumerable(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource[] ToArray(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static List`1<TSource> ToList(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TSource> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TSource> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TElement> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TElement> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static ILookup`2<TKey, TSource> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static ILookup`2<TKey, TSource> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static ILookup`2<TKey, TElement> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static ILookup`2<TKey, TElement> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DefaultIfEmpty(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DefaultIfEmpty(IEnumerable`1<TSource> source, TSource defaultValue);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<DefaultIfEmptyIterator>d__1`1")]
private static IEnumerable`1<TSource> DefaultIfEmptyIterator(IEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OfType(IEnumerable source);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<OfTypeIterator>d__1`1")]
private static IEnumerable`1<TResult> OfTypeIterator(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cast(IEnumerable source);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<CastIterator>d__1`1")]
private static IEnumerable`1<TResult> CastIterator(IEnumerable source);
    [ExtensionAttribute]
public static TSource First(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource First(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource FirstOrDefault(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource FirstOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource Last(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource Last(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource LastOrDefault(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource LastOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource Single(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource Single(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource SingleOrDefault(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource SingleOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource ElementAt(IEnumerable`1<TSource> source, int index);
    [ExtensionAttribute]
public static TSource ElementAtOrDefault(IEnumerable`1<TSource> source, int index);
    public static IEnumerable`1<int> Range(int start, int count);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<RangeIterator>d__1")]
private static IEnumerable`1<int> RangeIterator(int start, int count);
    public static IEnumerable`1<TResult> Repeat(TResult element, int count);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<RepeatIterator>d__1`1")]
private static IEnumerable`1<TResult> RepeatIterator(TResult element, int count);
    public static IEnumerable`1<TResult> Empty();
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static bool All(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static int Count(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static int Count(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static long LongCount(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static long LongCount(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static bool Contains(IEnumerable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static bool Contains(IEnumerable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static TSource Aggregate(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> func);
    [ExtensionAttribute]
public static TAccumulate Aggregate(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector);
    [ExtensionAttribute]
public static int Sum(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<int> Sum(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static long Sum(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float Sum(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> Sum(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double Sum(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> Sum(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal Sum(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Sum(IEnumerable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static int Sum(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<int> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static long Sum(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static float Sum(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static double Sum(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static decimal Sum(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static int Min(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<int> Min(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static long Min(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<long> Min(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float Min(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> Min(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double Min(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> Min(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal Min(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Min(IEnumerable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static TSource Min(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static int Min(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<int> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static long Min(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<long> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static float Min(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static double Min(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static decimal Min(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static TResult Min(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static int Max(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<int> Max(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static long Max(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<long> Max(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static double Max(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> Max(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static float Max(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> Max(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static decimal Max(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Max(IEnumerable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static TSource Max(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static int Max(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<int> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static long Max(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<long> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static float Max(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static double Max(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static decimal Max(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static TResult Max(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float Average(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> Average(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal Average(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Average(IEnumerable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static float Average(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static decimal Average(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
}
internal abstract class System.Linq.EnumerableSorter`1 : object {
    internal abstract virtual void ComputeKeys(TElement[] elements, int count);
    internal abstract virtual int CompareKeys(int index1, int index2);
    internal Int32[] Sort(TElement[] elements, int count);
    private void QuickSort(Int32[] map, int left, int right);
}
internal class System.Linq.EnumerableSorter`2 : EnumerableSorter`1<TElement> {
    internal Func`2<TElement, TKey> keySelector;
    internal IComparer`1<TKey> comparer;
    internal bool descending;
    internal EnumerableSorter`1<TElement> next;
    internal TKey[] keys;
    internal EnumerableSorter`2(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending, EnumerableSorter`1<TElement> next);
    internal virtual void ComputeKeys(TElement[] elements, int count);
    internal virtual int CompareKeys(int index1, int index2);
}
internal static class System.Linq.Error : object {
    internal static Exception ArgumentNull(string s);
    internal static Exception ArgumentOutOfRange(string s);
    internal static Exception MoreThanOneElement();
    internal static Exception MoreThanOneMatch();
    internal static Exception NoElements();
    internal static Exception NoMatch();
    internal static Exception NotSupported();
}
internal class System.Linq.GroupedEnumerable`3 : object {
    private IEnumerable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private Func`2<TSource, TElement> _elementSelector;
    private IEqualityComparer`1<TKey> _comparer;
    public GroupedEnumerable`3(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Linq.GroupedEnumerable`4 : object {
    private IEnumerable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private Func`2<TSource, TElement> _elementSelector;
    private IEqualityComparer`1<TKey> _comparer;
    private Func`3<TKey, IEnumerable`1<TElement>, TResult> _resultSelector;
    public GroupedEnumerable`4(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExplicitScopeAttribute("HiddenScope, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Linq.Grouping`2 : object {
    internal TKey key;
    internal int hashCode;
    internal TElement[] elements;
    internal int count;
    internal Grouping`2<TKey, TElement> hashNext;
    internal Grouping`2<TKey, TElement> next;
    public TKey Key { get; }
    private int System.Collections.Generic.ICollection<TElement>.Count { get; }
    private bool System.Collections.Generic.ICollection<TElement>.IsReadOnly { get; }
    private TElement System.Collections.Generic.IList<TElement>.Item { get; private set; }
    internal void Add(TElement element);
    [IteratorStateMachineAttribute("System.Linq.Grouping`2/<GetEnumerator>d__1")]
[__BlockReflectionAttribute]
public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual TKey get_Key();
    private sealed virtual override int System.Collections.Generic.ICollection<TElement>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.Add(TElement item);
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.Contains(TElement item);
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.Remove(TElement item);
    private sealed virtual override int System.Collections.Generic.IList<TElement>.IndexOf(TElement item);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.Insert(int index, TElement item);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.RemoveAt(int index);
    private sealed virtual override TElement System.Collections.Generic.IList<TElement>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.set_Item(int index, TElement value);
}
internal class System.Linq.IdentityFunction`1 : object {
    public static Func`2<TElement, TElement> Instance { get; }
    public static Func`2<TElement, TElement> get_Instance();
}
public interface System.Linq.IGrouping`2 {
    public TKey Key { get; }
    public abstract virtual TKey get_Key();
}
[DefaultMemberAttribute("Item")]
public interface System.Linq.ILookup`2 {
    public int Count { get; }
    public IEnumerable`1<TElement> Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<TElement> get_Item(TKey key);
    public abstract virtual bool Contains(TKey key);
}
public interface System.Linq.IOrderedEnumerable`1 {
    public abstract virtual IOrderedEnumerable`1<TElement> CreateOrderedEnumerable(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
}
[DefaultMemberAttribute("Item")]
public class System.Linq.Lookup`2 : object {
    private IEqualityComparer`1<TKey> _comparer;
    private Grouping`2[] _groupings;
    private Grouping`2<TKey, TElement> _lastGrouping;
    private int _count;
    public int Count { get; }
    public IEnumerable`1<TElement> Item { get; }
    private Lookup`2(IEqualityComparer`1<TKey> comparer);
    internal static Lookup`2<TKey, TElement> Create(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    internal static Lookup`2<TKey, TElement> CreateForJoin(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<TElement> get_Item(TKey key);
    public sealed virtual bool Contains(TKey key);
    [IteratorStateMachineAttribute("System.Linq.Lookup`2/<GetEnumerator>d__1")]
public sealed virtual IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator();
    [IteratorStateMachineAttribute("System.Linq.Lookup`2/<ApplyResultSelector>d__1`1")]
public IEnumerable`1<TResult> ApplyResultSelector(Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal int InternalGetHashCode(TKey key);
    internal Grouping`2<TKey, TElement> GetGrouping(TKey key, bool create);
    private void Resize();
}
internal abstract class System.Linq.OrderedEnumerable`1 : object {
    internal IEnumerable`1<TElement> source;
    [IteratorStateMachineAttribute("System.Linq.OrderedEnumerable`1/<GetEnumerator>d__1")]
public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    internal abstract virtual EnumerableSorter`1<TElement> GetEnumerableSorter(EnumerableSorter`1<TElement> next);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IOrderedEnumerable`1<TElement> System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
}
internal class System.Linq.OrderedEnumerable`2 : OrderedEnumerable`1<TElement> {
    internal OrderedEnumerable`1<TElement> parent;
    internal Func`2<TElement, TKey> keySelector;
    internal IComparer`1<TKey> comparer;
    internal bool descending;
    internal OrderedEnumerable`2(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
    internal virtual EnumerableSorter`1<TElement> GetEnumerableSorter(EnumerableSorter`1<TElement> next);
}
internal class System.Linq.Set`1 : object {
    private Int32[] _buckets;
    private Slot[] _slots;
    private int _count;
    private int _freeList;
    private IEqualityComparer`1<TElement> _comparer;
    public Set`1(IEqualityComparer`1<TElement> comparer);
    public bool Add(TElement value);
    public bool Contains(TElement value);
    public bool Remove(TElement value);
    private bool Find(TElement value, bool add);
    private void Resize();
    internal int InternalGetHashCode(TElement value);
}
internal static class System.Linq.Strings : object {
    internal static string EmptyEnumerable { get; }
    internal static string MoreThanOneElement { get; }
    internal static string MoreThanOneMatch { get; }
    internal static string NoElements { get; }
    internal static string NoMatch { get; }
    internal static string get_EmptyEnumerable();
    internal static string get_MoreThanOneElement();
    internal static string get_MoreThanOneMatch();
    internal static string get_NoElements();
    internal static string get_NoMatch();
}
internal class System.Linq.SystemCore_EnumerableDebugView : object {
    [DebuggerBrowsableAttribute("0")]
private IEnumerable _enumerable;
    [DebuggerBrowsableAttribute("0")]
private Object[] _cachedCollection;
    [DebuggerBrowsableAttribute("0")]
private int _count;
    [DebuggerBrowsableAttribute("3")]
public Object[] Items { get; }
    public SystemCore_EnumerableDebugView(IEnumerable enumerable);
    public Object[] get_Items();
}
internal class System.Linq.SystemCore_EnumerableDebugView`1 : object {
    [DebuggerBrowsableAttribute("0")]
private IEnumerable`1<T> _enumerable;
    [DebuggerBrowsableAttribute("0")]
private T[] _cachedCollection;
    [DebuggerBrowsableAttribute("0")]
private int _count;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public SystemCore_EnumerableDebugView`1(IEnumerable`1<T> enumerable);
    public T[] get_Items();
}
internal class System.Linq.SystemCore_EnumerableDebugViewEmptyException : Exception {
    public string Empty { get; }
    public string get_Empty();
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string EmptyEnumerable { get; }
    internal static string InvalidOperation_EnumOpCantHappen { get; }
    internal static string MoreThanOneElement { get; }
    internal static string MoreThanOneMatch { get; }
    internal static string NoElements { get; }
    internal static string NoMatch { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_EmptyEnumerable();
    internal static string get_InvalidOperation_EnumOpCantHappen();
    internal static string get_MoreThanOneElement();
    internal static string get_MoreThanOneMatch();
    internal static string get_NoElements();
    internal static string get_NoMatch();
    internal static Type get_ResourceType();
}
