internal static class FxResources.System.Net.NameResolution.SR : object {
}
internal static class Interop : object {
}
internal abstract class Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid : SafeHandle {
    public bool IsInvalid { get; }
    protected SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle);
    public virtual bool get_IsInvalid();
}
internal class System.DBNull : object {
    public static DBNull Value;
    private static DBNull();
}
internal class System.Net.CallbackClosure : object {
    private AsyncCallback _savedCallback;
    private ExecutionContext _savedContext;
    internal AsyncCallback AsyncCallback { get; }
    internal ExecutionContext Context { get; }
    internal CallbackClosure(ExecutionContext context, AsyncCallback callback);
    internal bool IsCompatible(AsyncCallback callback);
    internal AsyncCallback get_AsyncCallback();
    internal ExecutionContext get_Context();
}
internal class System.Net.ContextAwareResult : LazyAsyncResult {
    private ExecutionContext modreq(System.Runtime.CompilerServices.IsVolatile) _context;
    private object _lock;
    private StateFlags _flags;
    private WindowsIdentity _windowsIdentity;
    internal ExecutionContext ContextCopy { get; }
    internal WindowsIdentity Identity { get; }
    internal ContextAwareResult(object myObject, object myState, AsyncCallback myCallBack);
    internal ContextAwareResult(bool captureIdentity, bool forceCaptureContext, object myObject, object myState, AsyncCallback myCallBack);
    internal ContextAwareResult(bool captureIdentity, bool forceCaptureContext, bool threadSafeContextCopy, object myObject, object myState, AsyncCallback myCallBack);
    internal ExecutionContext get_ContextCopy();
    internal object StartPostingAsyncOp();
    internal object StartPostingAsyncOp(bool lockCapture);
    internal bool FinishPostingAsyncOp();
    internal bool FinishPostingAsyncOp(CallbackClosure& closure);
    protected virtual void Cleanup();
    private bool CaptureOrComplete(ExecutionContext& cachedContext, bool returnContext);
    protected virtual void Complete(IntPtr userToken);
    private void CompleteCallback();
    private void SafeCaptureIdentity();
    internal WindowsIdentity get_Identity();
    private void CleanupInternal();
}
public static class System.Net.Dns : object {
    private static int MaxHostName;
    internal static IPHostEntry InternalGetHostByName(string hostName, bool includeIPv6);
    internal static IPHostEntry InternalGetHostByAddress(IPAddress address, bool includeIPv6);
    public static string GetHostName();
    private static void ResolveCallback(object context);
    private static IAsyncResult HostResolutionBeginHelper(string hostName, bool justReturnParsedIp, AsyncCallback requestCallback, object state);
    private static IAsyncResult HostResolutionBeginHelper(IPAddress address, bool flowContext, bool includeIPv6, AsyncCallback requestCallback, object state);
    private static IPHostEntry HostResolutionEndHelper(IAsyncResult asyncResult);
    private static IAsyncResult BeginGetHostEntry(string hostNameOrAddress, AsyncCallback requestCallback, object stateObject);
    private static IAsyncResult BeginGetHostEntry(IPAddress address, AsyncCallback requestCallback, object stateObject);
    private static IPHostEntry EndGetHostEntry(IAsyncResult asyncResult);
    private static IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, AsyncCallback requestCallback, object state);
    private static IPAddress[] EndGetHostAddresses(IAsyncResult asyncResult);
    public static Task`1<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress);
    public static Task`1<IPHostEntry> GetHostEntryAsync(IPAddress address);
    public static Task`1<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress);
}
[EventSourceAttribute]
internal class System.Net.EventSourceLogging : EventSource {
    private static EventSourceLogging s_log;
    public static EventSourceLogging Log { get; }
    private static EventSourceLogging();
    public static EventSourceLogging get_Log();
    [EventAttribute("1")]
public void DebugMessage(string message);
    [EventAttribute("2")]
public void DebugDumpArray(Byte[] bufferSegmentArray);
    [EventAttribute("3")]
public void WarningDumpArray(string message);
    [EventAttribute("4")]
public void FunctionStart(string functionName, string parameters);
    [EventAttribute("5")]
public void FunctionStop(string functionName, string result);
    [EventAttribute("6")]
public void WarningMessage(string message);
    [EventAttribute("7")]
public void AssertFailed(string message, string detailMessage);
    [EventAttribute("8")]
public void CriticalMessage(string message, string detailMessage);
}
internal static class System.Net.GlobalLog : object {
    [ThreadStaticAttribute]
private static Stack`1<ThreadKinds> t_threadKindStack;
    private static Stack`1<ThreadKinds> ThreadKindStack { get; }
    internal static ThreadKinds CurrentThreadKind { get; }
    public static bool IsEnabled { get; }
    private static Stack`1<ThreadKinds> get_ThreadKindStack();
    internal static ThreadKinds get_CurrentThreadKind();
    internal static IDisposable SetThreadKind(ThreadKinds kind);
    internal static void SetThreadSource(ThreadKinds source);
    internal static void ThreadContract(ThreadKinds kind, string errorMsg);
    internal static void ThreadContract(ThreadKinds kind, ThreadKinds allowedSources, string errorMsg);
    public static void Print(string msg);
    public static void Enter(string functionName);
    public static void Enter(string functionName, string parameters);
    public static void AssertFormat(string messageFormat, Object[] data);
    public static void Assert(string message);
    public static void Assert(string message, string detailMessage);
    public static void Leave(string functionName);
    public static void Leave(string functionName, string result);
    public static void Leave(string functionName, int returnval);
    public static void Leave(string functionName, bool returnval);
    public static void Dump(Byte[] buffer, int length);
    public static void Dump(Byte[] buffer, int offset, int length);
    public static bool get_IsEnabled();
}
internal class System.Net.InternalException : Exception {
}
public enum System.Net.Internals.ProtocolType : Enum {
    public int value__;
    public static ProtocolType IP;
    public static ProtocolType IPv6HopByHopOptions;
    public static ProtocolType Icmp;
    public static ProtocolType Igmp;
    public static ProtocolType Ggp;
    public static ProtocolType IPv4;
    public static ProtocolType Tcp;
    public static ProtocolType Pup;
    public static ProtocolType Udp;
    public static ProtocolType Idp;
    public static ProtocolType IPv6;
    public static ProtocolType IPv6RoutingHeader;
    public static ProtocolType IPv6FragmentHeader;
    public static ProtocolType IPSecEncapsulatingSecurityPayload;
    public static ProtocolType IPSecAuthenticationHeader;
    public static ProtocolType IcmpV6;
    public static ProtocolType IPv6NoNextHeader;
    public static ProtocolType IPv6DestinationOptions;
    public static ProtocolType ND;
    public static ProtocolType Raw;
    public static ProtocolType Unspecified;
    public static ProtocolType Ipx;
    public static ProtocolType Spx;
    public static ProtocolType SpxII;
    public static ProtocolType Unknown;
}
internal static class System.Net.Internals.SocketExceptionFactory : object {
    public static SocketException CreateSocketException(int socketError, EndPoint endPoint);
    public static SocketException CreateSocketException(SocketError errorCode, int platformError);
}
public enum System.Net.Internals.SocketType : Enum {
    public int value__;
    public static SocketType Stream;
    public static SocketType Dgram;
    public static SocketType Raw;
    public static SocketType Rdm;
    public static SocketType Seqpacket;
    public static SocketType Unknown;
}
internal static class System.Net.IntPtrHelper : object {
    internal static IntPtr Add(IntPtr a, int b);
    internal static long Subtract(IntPtr a, IntPtr b);
}
internal static class System.Net.IPEndPointStatics : object {
    internal static int AnyPort;
    internal static IPEndPoint Any;
    internal static IPEndPoint IPv6Any;
    private static IPEndPointStatics();
}
public class System.Net.IPHostEntry : object {
    private string _hostName;
    private String[] _aliases;
    private IPAddress[] _addressList;
    internal bool isTrustedHost;
    public string HostName { get; public set; }
    public String[] Aliases { get; public set; }
    public IPAddress[] AddressList { get; public set; }
    public string get_HostName();
    public void set_HostName(string value);
    public String[] get_Aliases();
    public void set_Aliases(String[] value);
    public IPAddress[] get_AddressList();
    public void set_AddressList(IPAddress[] value);
}
internal class System.Net.LazyAsyncResult : object {
    private static int HighBit;
    private static int ForceAsyncCount;
    [ThreadStaticAttribute]
private static ThreadContext s_threadContext;
    private object _asyncObject;
    private object _asyncState;
    private AsyncCallback _asyncCallback;
    private object _result;
    private int _errorCode;
    private int _intCompleted;
    private bool _endCalled;
    private bool _userEvent;
    private object _event;
    private static ThreadContext CurrentThreadContext { get; }
    internal object AsyncObject { get; }
    public object AsyncState { get; }
    protected AsyncCallback AsyncCallback { get; protected set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    internal bool InternalPeekCompleted { get; }
    internal object Result { get; internal set; }
    internal bool EndCalled { get; internal set; }
    internal int ErrorCode { get; internal set; }
    internal LazyAsyncResult(object myObject, object myState, AsyncCallback myCallBack);
    internal LazyAsyncResult(object myObject, object myState, AsyncCallback myCallBack, object result);
    private static ThreadContext get_CurrentThreadContext();
    internal object get_AsyncObject();
    public sealed virtual object get_AsyncState();
    protected AsyncCallback get_AsyncCallback();
    protected void set_AsyncCallback(AsyncCallback value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    private bool LazilyCreateEvent(ManualResetEvent& waitHandle);
    [ConditionalAttribute("DEBUG")]
protected void DebugProtectState(bool protect);
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    internal bool get_InternalPeekCompleted();
    internal object get_Result();
    internal void set_Result(object value);
    internal bool get_EndCalled();
    internal void set_EndCalled(bool value);
    internal int get_ErrorCode();
    internal void set_ErrorCode(int value);
    protected void ProtectedInvokeCallback(object result, IntPtr userToken);
    internal void InvokeCallback(object result);
    internal void InvokeCallback();
    protected virtual void Complete(IntPtr userToken);
    private static void WorkerThreadComplete(object state);
    protected virtual void Cleanup();
    internal object InternalWaitForCompletion();
    private object WaitForCompletion(bool snap);
    internal void InternalCleanup();
}
internal static class System.Net.LoggingHash : object {
    internal static string GetObjectName(object obj);
    internal static int HashInt(object objectValue);
    internal static string ObjectToString(object objectValue);
    private static string ExceptionMessage(Exception exception);
    internal static string HashString(object objectValue);
    internal static Object[] GetObjectLogHash(object obj);
}
internal static class System.Net.NameResolutionPal : object {
    private static int HostNameBufferLength;
    private static bool s_initialized;
    private static object s_initializedLock;
    private static NameResolutionPal();
    private static IPHostEntry NativeToHostEntry(IntPtr nativePointer);
    public static IPHostEntry GetHostByName(string hostName);
    public static IPHostEntry GetHostByAddr(IPAddress address);
    public static SocketError TryGetAddrInfo(string name, IPHostEntry& hostinfo, Int32& nativeErrorCode);
    public static string TryGetNameInfo(IPAddress addr, SocketError& errorCode, Int32& nativeErrorCode);
    public static string GetHostName();
    public static void EnsureSocketsAreInitialized();
}
internal static class System.Net.NameResolutionUtilities : object {
    public static IPHostEntry GetUnresolvedAnswer(IPAddress address);
    public static IPHostEntry GetUnresolvedAnswer(string name);
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    private static int FunctionStartId;
    private static int FunctionStopId;
    private static int CriticalExceptionId;
    private static int CriticalErrorId;
    private static NetEventSource s_log;
    public static NetEventSource Log { get; }
    private static NetEventSource();
    public static NetEventSource get_Log();
    [NonEventAttribute]
internal static void Enter(ComponentType componentType, object obj, string method, object paramObject);
    [EventAttribute("1")]
internal void FunctionStart(string callerName, int callerHash, string method, string parametersName, int parametersHash, ComponentType componentType);
    [NonEventAttribute]
internal static void Exit(ComponentType componentType, object obj, string method, object retObject);
    [EventAttribute("2")]
internal void FunctionStop(string callerName, int callerHash, string method, string parametersName, int parametersHash, ComponentType componentType);
    [NonEventAttribute]
internal static void Exception(ComponentType componentType, object obj, string method, Exception e);
    [EventAttribute("3")]
internal void CriticalException(string objName, string method, string message, int objHash, string stackTrace, ComponentType componentType);
    [NonEventAttribute]
internal static void PrintError(ComponentType componentType, string msg);
    [NonEventAttribute]
internal static void PrintError(ComponentType componentType, object obj, string method, string msg);
    [EventAttribute("4")]
internal void CriticalError(string message, string method, string objName, int objHash, ComponentType componentType);
}
internal class System.Net.SocketProtocolSupportPal : object {
    private static bool s_ipv4;
    private static bool s_ipv6;
    private static bool s_initialized;
    private static object s_initializedLock;
    public static bool OSSupportsIPv6 { get; }
    public static bool OSSupportsIPv4 { get; }
    private static SocketProtocolSupportPal();
    public static bool get_OSSupportsIPv6();
    public static bool get_OSSupportsIPv4();
    private static void EnsureInitialized();
    private static bool IsProtocolSupported(AddressFamily af);
}
internal class System.Net.Sockets.AddressInfo : ValueType {
    internal AddressInfoHints ai_flags;
    internal AddressFamily ai_family;
    internal SocketType ai_socktype;
    internal ProtocolFamily ai_protocol;
    internal int ai_addrlen;
    internal SByte* ai_canonname;
    internal Byte* ai_addr;
    internal AddressInfo* ai_next;
}
[FlagsAttribute]
internal enum System.Net.Sockets.AddressInfoHints : Enum {
    public int value__;
    public static AddressInfoHints AI_PASSIVE;
    public static AddressInfoHints AI_CANONNAME;
    public static AddressInfoHints AI_NUMERICHOST;
    public static AddressInfoHints AI_FQDN;
}
internal class System.Net.Sockets.hostent : ValueType {
    public IntPtr h_name;
    public IntPtr h_aliases;
    public short h_addrtype;
    public short h_length;
    public IntPtr h_addr_list;
}
[ExtensionAttribute]
public static class System.Net.Sockets.IPAddressExtensions : object {
    [ExtensionAttribute]
public static IPAddress Snapshot(IPAddress original);
    [ExtensionAttribute]
public static long GetAddress(IPAddress thisObj);
}
internal enum System.Net.Sockets.ProtocolFamily : Enum {
    public int value__;
    public static ProtocolFamily Unknown;
    public static ProtocolFamily Unspecified;
    public static ProtocolFamily Unix;
    public static ProtocolFamily InterNetwork;
    public static ProtocolFamily ImpLink;
    public static ProtocolFamily Pup;
    public static ProtocolFamily Chaos;
    public static ProtocolFamily NS;
    public static ProtocolFamily Ipx;
    public static ProtocolFamily Iso;
    public static ProtocolFamily Osi;
    public static ProtocolFamily Ecma;
    public static ProtocolFamily DataKit;
    public static ProtocolFamily Ccitt;
    public static ProtocolFamily Sna;
    public static ProtocolFamily DecNet;
    public static ProtocolFamily DataLink;
    public static ProtocolFamily Lat;
    public static ProtocolFamily HyperChannel;
    public static ProtocolFamily AppleTalk;
    public static ProtocolFamily NetBios;
    public static ProtocolFamily VoiceView;
    public static ProtocolFamily FireFox;
    public static ProtocolFamily Banyan;
    public static ProtocolFamily Atm;
    public static ProtocolFamily InterNetworkV6;
    public static ProtocolFamily Cluster;
    public static ProtocolFamily Ieee12844;
    public static ProtocolFamily Irda;
    public static ProtocolFamily NetworkDesigners;
}
internal class System.Net.Sockets.SafeFreeAddrInfo : SafeHandleZeroOrMinusOneIsInvalid {
    internal static int GetAddrInfo(string nodename, string servicename, AddressInfo& hints, SafeFreeAddrInfo& outAddrInfo);
    protected virtual bool ReleaseHandle();
}
[FlagsAttribute]
internal enum System.Net.SourceLevels : Enum {
    public int value__;
    public static SourceLevels Off;
    public static SourceLevels Critical;
    public static SourceLevels Error;
    public static SourceLevels Warning;
    public static SourceLevels Information;
    public static SourceLevels Verbose;
    public static SourceLevels ActivityTracing;
    public static SourceLevels All;
}
internal class System.Net.SourceSwitch : object {
    public bool ShouldTrace(TraceEventType eventType);
}
[FlagsAttribute]
internal enum System.Net.ThreadKinds : Enum {
    public int value__;
    public static ThreadKinds Unknown;
    public static ThreadKinds User;
    public static ThreadKinds System;
    public static ThreadKinds Sync;
    public static ThreadKinds Async;
    public static ThreadKinds Timer;
    public static ThreadKinds CompletionPort;
    public static ThreadKinds Worker;
    public static ThreadKinds Finalization;
    public static ThreadKinds Other;
    public static ThreadKinds OwnerMask;
    public static ThreadKinds SyncMask;
    public static ThreadKinds SourceMask;
    public static ThreadKinds SafeSources;
    public static ThreadKinds ThreadPool;
}
internal enum System.Net.TraceEventType : Enum {
    public int value__;
    public static TraceEventType Critical;
    public static TraceEventType Error;
    public static TraceEventType Warning;
    public static TraceEventType Information;
    public static TraceEventType Verbose;
    public static TraceEventType Start;
    public static TraceEventType Stop;
    public static TraceEventType Suspend;
    public static TraceEventType Resume;
    public static TraceEventType Transfer;
}
internal class System.Net.TraceSource : object {
    public SourceSwitch Switch { get; }
    public TraceSource(string name);
    public TraceSource(string name, SourceLevels defaultLevel);
    public void Close();
    public void Flush();
    public void TraceEvent(TraceEventType eventType, int id);
    public void TraceEvent(TraceEventType eventType, int id, string message);
    public void TraceEvent(TraceEventType eventType, int id, string format, Object[] args);
    public void TraceData(TraceEventType eventType, int id, object data);
    public void TraceData(TraceEventType eventType, int id, Object[] data);
    public void TraceInformation(string message);
    public void TraceInformation(string format, Object[] args);
    public void TraceTransfer(int id, string message, Guid relatedActivityId);
    public SourceSwitch get_Switch();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string net_toolong { get; }
    internal static string net_completed_result { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_invalid_ip_addr { get; }
    internal static string net_log_exception { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_net_toolong();
    internal static string get_net_completed_result();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_invalid_ip_addr();
    internal static string get_net_log_exception();
    internal static Type get_ResourceType();
}
