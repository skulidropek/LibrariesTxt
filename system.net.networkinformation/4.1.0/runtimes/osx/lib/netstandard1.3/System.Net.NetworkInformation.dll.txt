internal static class FxResources.System.Net.NetworkInformation.SR : object {
}
internal static class Interop : object {
}
[ExtensionAttribute]
internal static class InteropErrorExtensions : object {
    [ExtensionAttribute]
public static ErrorInfo Info(Error error);
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeCreateHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal SafeCreateHandle(IntPtr ptr);
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
}
internal class System.IO.RowConfigReader : ValueType {
    private string _buffer;
    private StringComparison _comparisonKind;
    private int _currentIndex;
    public RowConfigReader(string buffer);
    public RowConfigReader(string buffer, StringComparison comparisonKind);
    public string GetNextValue(string key);
    public bool TryGetNextValue(string key, String& value);
    private bool TryFindNextKeyOccurrence(string key, int startIndex, Int32& keyIndex);
    private bool HasFollowingWhitespace(int keyIndex, int length);
    public int GetNextValueAsInt32(string key);
    public static string ReadFirstValueFromString(string data, string key);
}
public enum System.Net.NetworkInformation.DuplicateAddressDetectionState : Enum {
    public int value__;
    public static DuplicateAddressDetectionState Invalid;
    public static DuplicateAddressDetectionState Tentative;
    public static DuplicateAddressDetectionState Duplicate;
    public static DuplicateAddressDetectionState Deprecated;
    public static DuplicateAddressDetectionState Preferred;
}
public abstract class System.Net.NetworkInformation.GatewayIPAddressInformation : object {
    public IPAddress Address { get; }
    public abstract virtual IPAddress get_Address();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.GatewayIPAddressInformationCollection : object {
    private List`1<GatewayIPAddressInformation> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public GatewayIPAddressInformation Item { get; }
    internal GatewayIPAddressInformationCollection(List`1<GatewayIPAddressInformation> addresses);
    public virtual void CopyTo(GatewayIPAddressInformation[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual GatewayIPAddressInformation get_Item(int index);
    public virtual void Add(GatewayIPAddressInformation address);
    internal void InternalAdd(GatewayIPAddressInformation address);
    public virtual bool Contains(GatewayIPAddressInformation address);
    public virtual IEnumerator`1<GatewayIPAddressInformation> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Remove(GatewayIPAddressInformation address);
    public virtual void Clear();
}
internal class System.Net.NetworkInformation.HostInformation : object {
    internal static string HostName { get; }
    internal static string DomainName { get; }
    internal static string get_HostName();
    internal static string get_DomainName();
}
internal static class System.Net.NetworkInformation.HostInformationPal : object {
    public static string GetHostName();
    public static string GetDomainName();
}
public abstract class System.Net.NetworkInformation.IcmpV4Statistics : object {
    public long AddressMaskRepliesReceived { get; }
    public long AddressMaskRepliesSent { get; }
    public long AddressMaskRequestsReceived { get; }
    public long AddressMaskRequestsSent { get; }
    public long DestinationUnreachableMessagesReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long EchoRepliesReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRequestsSent { get; }
    public long ErrorsReceived { get; }
    public long ErrorsSent { get; }
    public long MessagesReceived { get; }
    public long MessagesSent { get; }
    public long ParameterProblemsReceived { get; }
    public long ParameterProblemsSent { get; }
    public long RedirectsReceived { get; }
    public long RedirectsSent { get; }
    public long SourceQuenchesReceived { get; }
    public long SourceQuenchesSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public long TimestampRepliesReceived { get; }
    public long TimestampRepliesSent { get; }
    public long TimestampRequestsReceived { get; }
    public long TimestampRequestsSent { get; }
    public abstract virtual long get_AddressMaskRepliesReceived();
    public abstract virtual long get_AddressMaskRepliesSent();
    public abstract virtual long get_AddressMaskRequestsReceived();
    public abstract virtual long get_AddressMaskRequestsSent();
    public abstract virtual long get_DestinationUnreachableMessagesReceived();
    public abstract virtual long get_DestinationUnreachableMessagesSent();
    public abstract virtual long get_EchoRepliesReceived();
    public abstract virtual long get_EchoRepliesSent();
    public abstract virtual long get_EchoRequestsReceived();
    public abstract virtual long get_EchoRequestsSent();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_ErrorsSent();
    public abstract virtual long get_MessagesReceived();
    public abstract virtual long get_MessagesSent();
    public abstract virtual long get_ParameterProblemsReceived();
    public abstract virtual long get_ParameterProblemsSent();
    public abstract virtual long get_RedirectsReceived();
    public abstract virtual long get_RedirectsSent();
    public abstract virtual long get_SourceQuenchesReceived();
    public abstract virtual long get_SourceQuenchesSent();
    public abstract virtual long get_TimeExceededMessagesReceived();
    public abstract virtual long get_TimeExceededMessagesSent();
    public abstract virtual long get_TimestampRepliesReceived();
    public abstract virtual long get_TimestampRepliesSent();
    public abstract virtual long get_TimestampRequestsReceived();
    public abstract virtual long get_TimestampRequestsSent();
}
public abstract class System.Net.NetworkInformation.IcmpV6Statistics : object {
    public long DestinationUnreachableMessagesReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long EchoRepliesReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRequestsSent { get; }
    public long ErrorsReceived { get; }
    public long ErrorsSent { get; }
    public long MembershipQueriesReceived { get; }
    public long MembershipQueriesSent { get; }
    public long MembershipReductionsReceived { get; }
    public long MembershipReductionsSent { get; }
    public long MembershipReportsReceived { get; }
    public long MembershipReportsSent { get; }
    public long MessagesReceived { get; }
    public long MessagesSent { get; }
    public long NeighborAdvertisementsReceived { get; }
    public long NeighborAdvertisementsSent { get; }
    public long NeighborSolicitsReceived { get; }
    public long NeighborSolicitsSent { get; }
    public long PacketTooBigMessagesReceived { get; }
    public long PacketTooBigMessagesSent { get; }
    public long ParameterProblemsReceived { get; }
    public long ParameterProblemsSent { get; }
    public long RedirectsReceived { get; }
    public long RedirectsSent { get; }
    public long RouterAdvertisementsReceived { get; }
    public long RouterAdvertisementsSent { get; }
    public long RouterSolicitsReceived { get; }
    public long RouterSolicitsSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public abstract virtual long get_DestinationUnreachableMessagesReceived();
    public abstract virtual long get_DestinationUnreachableMessagesSent();
    public abstract virtual long get_EchoRepliesReceived();
    public abstract virtual long get_EchoRepliesSent();
    public abstract virtual long get_EchoRequestsReceived();
    public abstract virtual long get_EchoRequestsSent();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_ErrorsSent();
    public abstract virtual long get_MembershipQueriesReceived();
    public abstract virtual long get_MembershipQueriesSent();
    public abstract virtual long get_MembershipReductionsReceived();
    public abstract virtual long get_MembershipReductionsSent();
    public abstract virtual long get_MembershipReportsReceived();
    public abstract virtual long get_MembershipReportsSent();
    public abstract virtual long get_MessagesReceived();
    public abstract virtual long get_MessagesSent();
    public abstract virtual long get_NeighborAdvertisementsReceived();
    public abstract virtual long get_NeighborAdvertisementsSent();
    public abstract virtual long get_NeighborSolicitsReceived();
    public abstract virtual long get_NeighborSolicitsSent();
    public abstract virtual long get_PacketTooBigMessagesReceived();
    public abstract virtual long get_PacketTooBigMessagesSent();
    public abstract virtual long get_ParameterProblemsReceived();
    public abstract virtual long get_ParameterProblemsSent();
    public abstract virtual long get_RedirectsReceived();
    public abstract virtual long get_RedirectsSent();
    public abstract virtual long get_RouterAdvertisementsReceived();
    public abstract virtual long get_RouterAdvertisementsSent();
    public abstract virtual long get_RouterSolicitsReceived();
    public abstract virtual long get_RouterSolicitsSent();
    public abstract virtual long get_TimeExceededMessagesReceived();
    public abstract virtual long get_TimeExceededMessagesSent();
}
[DefaultMemberAttribute("Item")]
internal class System.Net.NetworkInformation.InternalIPAddressCollection : IPAddressCollection {
    private List`1<IPAddress> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IPAddress Item { get; }
    internal InternalIPAddressCollection(List`1<IPAddress> addresses);
    public virtual void CopyTo(IPAddress[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(IPAddress address);
    internal void InternalAdd(IPAddress address);
    public virtual bool Contains(IPAddress address);
    public virtual IPAddress get_Item(int index);
    public virtual IEnumerator`1<IPAddress> GetEnumerator();
}
public abstract class System.Net.NetworkInformation.IPAddressInformation : object {
    public IPAddress Address { get; }
    public bool IsDnsEligible { get; }
    public bool IsTransient { get; }
    public abstract virtual IPAddress get_Address();
    public abstract virtual bool get_IsDnsEligible();
    public abstract virtual bool get_IsTransient();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.IPAddressInformationCollection : object {
    private List`1<IPAddressInformation> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IPAddressInformation Item { get; }
    public virtual void CopyTo(IPAddressInformation[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(IPAddressInformation address);
    internal void InternalAdd(IPAddressInformation address);
    public virtual bool Contains(IPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IEnumerator`1<IPAddressInformation> GetEnumerator();
    public virtual IPAddressInformation get_Item(int index);
    public virtual bool Remove(IPAddressInformation address);
    public virtual void Clear();
}
internal static class System.Net.NetworkInformation.IPAddressUtil : object {
    public static bool IsMulticast(IPAddress address);
    public static IPAddress GetIPAddressFromNativeInfo(IpAddressInfo* addressInfo);
}
public abstract class System.Net.NetworkInformation.IPGlobalProperties : object {
    public string DhcpScopeName { get; }
    public string DomainName { get; }
    public string HostName { get; }
    public bool IsWinsProxy { get; }
    public NetBiosNodeType NodeType { get; }
    public static IPGlobalProperties GetIPGlobalProperties();
    public abstract virtual IPEndPoint[] GetActiveUdpListeners();
    public abstract virtual IPEndPoint[] GetActiveTcpListeners();
    public abstract virtual TcpConnectionInformation[] GetActiveTcpConnections();
    public abstract virtual string get_DhcpScopeName();
    public abstract virtual string get_DomainName();
    public abstract virtual string get_HostName();
    public abstract virtual bool get_IsWinsProxy();
    public abstract virtual NetBiosNodeType get_NodeType();
    public abstract virtual TcpStatistics GetTcpIPv4Statistics();
    public abstract virtual TcpStatistics GetTcpIPv6Statistics();
    public abstract virtual UdpStatistics GetUdpIPv4Statistics();
    public abstract virtual UdpStatistics GetUdpIPv6Statistics();
    public abstract virtual IcmpV4Statistics GetIcmpV4Statistics();
    public abstract virtual IcmpV6Statistics GetIcmpV6Statistics();
    public abstract virtual IPGlobalStatistics GetIPv4GlobalStatistics();
    public abstract virtual IPGlobalStatistics GetIPv6GlobalStatistics();
    public virtual Task`1<UnicastIPAddressInformationCollection> GetUnicastAddressesAsync();
}
internal static class System.Net.NetworkInformation.IPGlobalPropertiesPal : object {
    public static IPGlobalProperties GetIPGlobalProperties();
}
public abstract class System.Net.NetworkInformation.IPGlobalStatistics : object {
    public int DefaultTtl { get; }
    public bool ForwardingEnabled { get; }
    public int NumberOfInterfaces { get; }
    public int NumberOfIPAddresses { get; }
    public long OutputPacketRequests { get; }
    public long OutputPacketRoutingDiscards { get; }
    public long OutputPacketsDiscarded { get; }
    public long OutputPacketsWithNoRoute { get; }
    public long PacketFragmentFailures { get; }
    public long PacketReassembliesRequired { get; }
    public long PacketReassemblyFailures { get; }
    public long PacketReassemblyTimeout { get; }
    public long PacketsFragmented { get; }
    public long PacketsReassembled { get; }
    public long ReceivedPackets { get; }
    public long ReceivedPacketsDelivered { get; }
    public long ReceivedPacketsDiscarded { get; }
    public long ReceivedPacketsForwarded { get; }
    public long ReceivedPacketsWithAddressErrors { get; }
    public long ReceivedPacketsWithHeadersErrors { get; }
    public long ReceivedPacketsWithUnknownProtocol { get; }
    public int NumberOfRoutes { get; }
    public abstract virtual int get_DefaultTtl();
    public abstract virtual bool get_ForwardingEnabled();
    public abstract virtual int get_NumberOfInterfaces();
    public abstract virtual int get_NumberOfIPAddresses();
    public abstract virtual long get_OutputPacketRequests();
    public abstract virtual long get_OutputPacketRoutingDiscards();
    public abstract virtual long get_OutputPacketsDiscarded();
    public abstract virtual long get_OutputPacketsWithNoRoute();
    public abstract virtual long get_PacketFragmentFailures();
    public abstract virtual long get_PacketReassembliesRequired();
    public abstract virtual long get_PacketReassemblyFailures();
    public abstract virtual long get_PacketReassemblyTimeout();
    public abstract virtual long get_PacketsFragmented();
    public abstract virtual long get_PacketsReassembled();
    public abstract virtual long get_ReceivedPackets();
    public abstract virtual long get_ReceivedPacketsDelivered();
    public abstract virtual long get_ReceivedPacketsDiscarded();
    public abstract virtual long get_ReceivedPacketsForwarded();
    public abstract virtual long get_ReceivedPacketsWithAddressErrors();
    public abstract virtual long get_ReceivedPacketsWithHeadersErrors();
    public abstract virtual long get_ReceivedPacketsWithUnknownProtocol();
    public abstract virtual int get_NumberOfRoutes();
}
public abstract class System.Net.NetworkInformation.IPInterfaceProperties : object {
    public bool IsDnsEnabled { get; }
    public string DnsSuffix { get; }
    public bool IsDynamicDnsEnabled { get; }
    public UnicastIPAddressInformationCollection UnicastAddresses { get; }
    public MulticastIPAddressInformationCollection MulticastAddresses { get; }
    public IPAddressInformationCollection AnycastAddresses { get; }
    public IPAddressCollection DnsAddresses { get; }
    public GatewayIPAddressInformationCollection GatewayAddresses { get; }
    public IPAddressCollection DhcpServerAddresses { get; }
    public IPAddressCollection WinsServersAddresses { get; }
    public abstract virtual bool get_IsDnsEnabled();
    public abstract virtual string get_DnsSuffix();
    public abstract virtual bool get_IsDynamicDnsEnabled();
    public abstract virtual UnicastIPAddressInformationCollection get_UnicastAddresses();
    public abstract virtual MulticastIPAddressInformationCollection get_MulticastAddresses();
    public abstract virtual IPAddressInformationCollection get_AnycastAddresses();
    public abstract virtual IPAddressCollection get_DnsAddresses();
    public abstract virtual GatewayIPAddressInformationCollection get_GatewayAddresses();
    public abstract virtual IPAddressCollection get_DhcpServerAddresses();
    public abstract virtual IPAddressCollection get_WinsServersAddresses();
    public abstract virtual IPv4InterfaceProperties GetIPv4Properties();
    public abstract virtual IPv6InterfaceProperties GetIPv6Properties();
}
public abstract class System.Net.NetworkInformation.IPInterfaceStatistics : object {
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public long IncomingPacketsDiscarded { get; }
    public long IncomingPacketsWithErrors { get; }
    public long IncomingUnknownProtocolPackets { get; }
    public long NonUnicastPacketsReceived { get; }
    public long NonUnicastPacketsSent { get; }
    public long OutgoingPacketsDiscarded { get; }
    public long OutgoingPacketsWithErrors { get; }
    public long OutputQueueLength { get; }
    public long UnicastPacketsReceived { get; }
    public long UnicastPacketsSent { get; }
    public abstract virtual long get_BytesReceived();
    public abstract virtual long get_BytesSent();
    public abstract virtual long get_IncomingPacketsDiscarded();
    public abstract virtual long get_IncomingPacketsWithErrors();
    public abstract virtual long get_IncomingUnknownProtocolPackets();
    public abstract virtual long get_NonUnicastPacketsReceived();
    public abstract virtual long get_NonUnicastPacketsSent();
    public abstract virtual long get_OutgoingPacketsDiscarded();
    public abstract virtual long get_OutgoingPacketsWithErrors();
    public abstract virtual long get_OutputQueueLength();
    public abstract virtual long get_UnicastPacketsReceived();
    public abstract virtual long get_UnicastPacketsSent();
}
public abstract class System.Net.NetworkInformation.IPv4InterfaceProperties : object {
    public bool UsesWins { get; }
    public bool IsDhcpEnabled { get; }
    public bool IsAutomaticPrivateAddressingActive { get; }
    public bool IsAutomaticPrivateAddressingEnabled { get; }
    public int Index { get; }
    public bool IsForwardingEnabled { get; }
    public int Mtu { get; }
    public abstract virtual bool get_UsesWins();
    public abstract virtual bool get_IsDhcpEnabled();
    public abstract virtual bool get_IsAutomaticPrivateAddressingActive();
    public abstract virtual bool get_IsAutomaticPrivateAddressingEnabled();
    public abstract virtual int get_Index();
    public abstract virtual bool get_IsForwardingEnabled();
    public abstract virtual int get_Mtu();
}
public abstract class System.Net.NetworkInformation.IPv6InterfaceProperties : object {
    public int Index { get; }
    public int Mtu { get; }
    public abstract virtual int get_Index();
    public abstract virtual int get_Mtu();
    public virtual long GetScopeId(ScopeLevel scopeLevel);
}
public abstract class System.Net.NetworkInformation.MulticastIPAddressInformation : IPAddressInformation {
    public long AddressPreferredLifetime { get; }
    public long AddressValidLifetime { get; }
    public long DhcpLeaseLifetime { get; }
    public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public PrefixOrigin PrefixOrigin { get; }
    public SuffixOrigin SuffixOrigin { get; }
    public abstract virtual long get_AddressPreferredLifetime();
    public abstract virtual long get_AddressValidLifetime();
    public abstract virtual long get_DhcpLeaseLifetime();
    public abstract virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public abstract virtual PrefixOrigin get_PrefixOrigin();
    public abstract virtual SuffixOrigin get_SuffixOrigin();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.MulticastIPAddressInformationCollection : object {
    private List`1<MulticastIPAddressInformation> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public MulticastIPAddressInformation Item { get; }
    public virtual void CopyTo(MulticastIPAddressInformation[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(MulticastIPAddressInformation address);
    internal void InternalAdd(MulticastIPAddressInformation address);
    public virtual bool Contains(MulticastIPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IEnumerator`1<MulticastIPAddressInformation> GetEnumerator();
    public virtual MulticastIPAddressInformation get_Item(int index);
    public virtual bool Remove(MulticastIPAddressInformation address);
    public virtual void Clear();
}
public enum System.Net.NetworkInformation.NetBiosNodeType : Enum {
    public int value__;
    public static NetBiosNodeType Unknown;
    public static NetBiosNodeType Broadcast;
    public static NetBiosNodeType Peer2Peer;
    public static NetBiosNodeType Mixed;
    public static NetBiosNodeType Hybrid;
}
public class System.Net.NetworkInformation.NetworkAddressChangedEventHandler : MulticastDelegate {
    public NetworkAddressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler : MulticastDelegate {
    public NetworkAvailabilityChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NetworkAvailabilityEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NetworkAvailabilityEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.NetworkInformation.NetworkAvailabilityEventArgs : EventArgs {
    private bool _isAvailable;
    public bool IsAvailable { get; }
    internal NetworkAvailabilityEventArgs(bool isAvailable);
    public bool get_IsAvailable();
}
public class System.Net.NetworkInformation.NetworkChange : object {
    private static object s_lockObj;
    private static NetworkAddressChangedEventHandler s_addressChangedSubscribers;
    private static SafeCreateHandle s_dynamicStoreRef;
    private static SCDynamicStoreCallBack s_storeCallback;
    private static SafeCreateHandle s_runLoopSource;
    private static Thread s_runLoopThread;
    private static IntPtr s_runLoop;
    private static AutoResetEvent s_runLoopStartedEvent;
    private static AutoResetEvent s_runLoopEndedEvent;
    private static NetworkChange();
    public static void add_NetworkAddressChanged(NetworkAddressChangedEventHandler value);
    public static void remove_NetworkAddressChanged(NetworkAddressChangedEventHandler value);
    private static void CreateAndStartRunLoop();
    private static void RunLoopThreadStart();
    private static void StopRunLoop();
    private static void OnAddressChanged(IntPtr store, IntPtr changedKeys, IntPtr info);
}
internal static class System.Net.NetworkInformation.NetworkFiles : object {
    public static string InterfaceListingFile;
    public static string SnmpV4StatsFile;
    public static string SnmpV6StatsFile;
    public static string Ipv4ConfigFolder;
    public static string Ipv6ConfigFolder;
    public static string Ipv4RouteFile;
    public static string Ipv6RouteFile;
    public static string SockstatFile;
    public static string Sockstat6File;
    public static string SysClassNetFolder;
    public static string EtcResolvConfFile;
    public static string Tcp4ConnectionsFile;
    public static string Tcp6ConnectionsFile;
    public static string Udp4ConnectionsFile;
    public static string Udp6ConnectionsFile;
    public static string DHClientLeasesFile;
    public static string SmbConfFile;
    public static string AllNetworkInterfaceFileName;
    public static string DefaultNetworkInterfaceFileName;
    public static string FlagsFileName;
    public static string ForwardingFileName;
    public static string MtuFileName;
    public static string OperstateFileName;
    public static string SpeedFileName;
    public static string TransmitQueueLengthFileName;
}
public class System.Net.NetworkInformation.NetworkInformationException : Win32Exception {
    public int ErrorCode { get; }
    public NetworkInformationException(int errorCode);
    internal NetworkInformationException(SocketError socketError);
    internal NetworkInformationException(string message);
    public int get_ErrorCode();
}
public abstract class System.Net.NetworkInformation.NetworkInterface : object {
    public static int IPv6LoopbackInterfaceIndex { get; }
    public static int LoopbackInterfaceIndex { get; }
    public string Id { get; }
    public string Name { get; }
    public string Description { get; }
    public OperationalStatus OperationalStatus { get; }
    public long Speed { get; }
    public bool IsReceiveOnly { get; }
    public bool SupportsMulticast { get; }
    public NetworkInterfaceType NetworkInterfaceType { get; }
    public static NetworkInterface[] GetAllNetworkInterfaces();
    public static bool GetIsNetworkAvailable();
    public static int get_IPv6LoopbackInterfaceIndex();
    public static int get_LoopbackInterfaceIndex();
    public virtual string get_Id();
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual IPInterfaceProperties GetIPProperties();
    public virtual IPInterfaceStatistics GetIPStatistics();
    public virtual OperationalStatus get_OperationalStatus();
    public virtual long get_Speed();
    public virtual bool get_IsReceiveOnly();
    public virtual bool get_SupportsMulticast();
    public virtual PhysicalAddress GetPhysicalAddress();
    public virtual NetworkInterfaceType get_NetworkInterfaceType();
    public virtual bool Supports(NetworkInterfaceComponent networkInterfaceComponent);
}
public enum System.Net.NetworkInformation.NetworkInterfaceComponent : Enum {
    public int value__;
    public static NetworkInterfaceComponent IPv4;
    public static NetworkInterfaceComponent IPv6;
}
internal static class System.Net.NetworkInformation.NetworkInterfacePal : object {
    public static int IPv6LoopbackInterfaceIndex { get; }
    public static int LoopbackInterfaceIndex { get; }
    public static NetworkInterface[] GetAllNetworkInterfaces();
    public static bool GetIsNetworkAvailable();
    public static int get_IPv6LoopbackInterfaceIndex();
    public static int get_LoopbackInterfaceIndex();
}
public enum System.Net.NetworkInformation.NetworkInterfaceType : Enum {
    public int value__;
    public static NetworkInterfaceType Unknown;
    public static NetworkInterfaceType Ethernet;
    public static NetworkInterfaceType TokenRing;
    public static NetworkInterfaceType Fddi;
    public static NetworkInterfaceType BasicIsdn;
    public static NetworkInterfaceType PrimaryIsdn;
    public static NetworkInterfaceType Ppp;
    public static NetworkInterfaceType Loopback;
    public static NetworkInterfaceType Ethernet3Megabit;
    public static NetworkInterfaceType Slip;
    public static NetworkInterfaceType Atm;
    public static NetworkInterfaceType GenericModem;
    public static NetworkInterfaceType FastEthernetT;
    public static NetworkInterfaceType Isdn;
    public static NetworkInterfaceType FastEthernetFx;
    public static NetworkInterfaceType Wireless80211;
    public static NetworkInterfaceType AsymmetricDsl;
    public static NetworkInterfaceType RateAdaptDsl;
    public static NetworkInterfaceType SymmetricDsl;
    public static NetworkInterfaceType VeryHighSpeedDsl;
    public static NetworkInterfaceType IPOverAtm;
    public static NetworkInterfaceType GigabitEthernet;
    public static NetworkInterfaceType Tunnel;
    public static NetworkInterfaceType MultiRateSymmetricDsl;
    public static NetworkInterfaceType HighPerformanceSerialBus;
    public static NetworkInterfaceType Wman;
    public static NetworkInterfaceType Wwanpp;
    public static NetworkInterfaceType Wwanpp2;
}
public enum System.Net.NetworkInformation.OperationalStatus : Enum {
    public int value__;
    public static OperationalStatus Up;
    public static OperationalStatus Down;
    public static OperationalStatus Testing;
    public static OperationalStatus Unknown;
    public static OperationalStatus Dormant;
    public static OperationalStatus NotPresent;
    public static OperationalStatus LowerLayerDown;
}
internal class System.Net.NetworkInformation.OsxIcmpV4Statistics : IcmpV4Statistics {
    private long _addressMaskRepliesReceived;
    private long _addressMaskRepliesSent;
    private long _addressMaskRequestsReceived;
    private long _addressMaskRequestsSent;
    private long _destinationUnreachableMessagesReceived;
    private long _destinationUnreachableMessagesSent;
    private long _echoRepliesReceived;
    private long _echoRepliesSent;
    private long _echoRequestsReceived;
    private long _echoRequestsSent;
    private long _parameterProblemsReceived;
    private long _parameterProblemsSent;
    private long _redirectsReceived;
    private long _redirectsSent;
    private long _sourceQuenchesReceived;
    private long _sourceQuenchesSent;
    private long _timeExceededMessagesReceived;
    private long _timeExceededMessagesSent;
    private long _timestampRepliesReceived;
    private long _timestampRepliesSent;
    private long _timestampRequestsReceived;
    private long _timestampRequestsSent;
    public long AddressMaskRepliesReceived { get; }
    public long AddressMaskRepliesSent { get; }
    public long AddressMaskRequestsReceived { get; }
    public long AddressMaskRequestsSent { get; }
    public long DestinationUnreachableMessagesReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long EchoRepliesReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRequestsSent { get; }
    public long ErrorsReceived { get; }
    public long ErrorsSent { get; }
    public long MessagesReceived { get; }
    public long MessagesSent { get; }
    public long ParameterProblemsReceived { get; }
    public long ParameterProblemsSent { get; }
    public long RedirectsReceived { get; }
    public long RedirectsSent { get; }
    public long SourceQuenchesReceived { get; }
    public long SourceQuenchesSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public long TimestampRepliesReceived { get; }
    public long TimestampRepliesSent { get; }
    public long TimestampRequestsReceived { get; }
    public long TimestampRequestsSent { get; }
    public virtual long get_AddressMaskRepliesReceived();
    public virtual long get_AddressMaskRepliesSent();
    public virtual long get_AddressMaskRequestsReceived();
    public virtual long get_AddressMaskRequestsSent();
    public virtual long get_DestinationUnreachableMessagesReceived();
    public virtual long get_DestinationUnreachableMessagesSent();
    public virtual long get_EchoRepliesReceived();
    public virtual long get_EchoRepliesSent();
    public virtual long get_EchoRequestsReceived();
    public virtual long get_EchoRequestsSent();
    public virtual long get_ErrorsReceived();
    public virtual long get_ErrorsSent();
    public virtual long get_MessagesReceived();
    public virtual long get_MessagesSent();
    public virtual long get_ParameterProblemsReceived();
    public virtual long get_ParameterProblemsSent();
    public virtual long get_RedirectsReceived();
    public virtual long get_RedirectsSent();
    public virtual long get_SourceQuenchesReceived();
    public virtual long get_SourceQuenchesSent();
    public virtual long get_TimeExceededMessagesReceived();
    public virtual long get_TimeExceededMessagesSent();
    public virtual long get_TimestampRepliesReceived();
    public virtual long get_TimestampRepliesSent();
    public virtual long get_TimestampRequestsReceived();
    public virtual long get_TimestampRequestsSent();
}
internal class System.Net.NetworkInformation.OsxIcmpV6Statistics : IcmpV6Statistics {
    private long _destinationUnreachableMessagesReceived;
    private long _destinationUnreachableMessagesSent;
    private long _echoRepliesReceived;
    private long _echoRepliesSent;
    private long _echoRequestsReceived;
    private long _echoRequestsSent;
    private long _membershipQueriesReceived;
    private long _membershipQueriesSent;
    private long _membershipReductionsReceived;
    private long _membershipReductionsSent;
    private long _membershipReportsReceived;
    private long _membershipReportsSent;
    private long _neighborAdvertisementsReceived;
    private long _neighborAdvertisementsSent;
    private long _neighborSolicitsReceived;
    private long _neighborSolicitsSent;
    private long _packetTooBigMessagesReceived;
    private long _packetTooBigMessagesSent;
    private long _parameterProblemsReceived;
    private long _parameterProblemsSent;
    private long _redirectsReceived;
    private long _redirectsSent;
    private long _routerAdvertisementsReceived;
    private long _routerAdvertisementsSent;
    private long _routerSolicitsReceived;
    private long _routerSolicitsSent;
    private long _timeExceededMessagesReceived;
    private long _timeExceededMessagesSent;
    public long DestinationUnreachableMessagesReceived { get; }
    public long DestinationUnreachableMessagesSent { get; }
    public long EchoRepliesReceived { get; }
    public long EchoRepliesSent { get; }
    public long EchoRequestsReceived { get; }
    public long EchoRequestsSent { get; }
    public long ErrorsReceived { get; }
    public long ErrorsSent { get; }
    public long MessagesReceived { get; }
    public long MessagesSent { get; }
    public long ParameterProblemsReceived { get; }
    public long ParameterProblemsSent { get; }
    public long RedirectsReceived { get; }
    public long RedirectsSent { get; }
    public long TimeExceededMessagesReceived { get; }
    public long TimeExceededMessagesSent { get; }
    public long MembershipQueriesReceived { get; }
    public long MembershipQueriesSent { get; }
    public long MembershipReductionsReceived { get; }
    public long MembershipReductionsSent { get; }
    public long MembershipReportsReceived { get; }
    public long MembershipReportsSent { get; }
    public long NeighborAdvertisementsReceived { get; }
    public long NeighborAdvertisementsSent { get; }
    public long NeighborSolicitsReceived { get; }
    public long NeighborSolicitsSent { get; }
    public long PacketTooBigMessagesReceived { get; }
    public long PacketTooBigMessagesSent { get; }
    public long RouterAdvertisementsReceived { get; }
    public long RouterAdvertisementsSent { get; }
    public long RouterSolicitsReceived { get; }
    public long RouterSolicitsSent { get; }
    public virtual long get_DestinationUnreachableMessagesReceived();
    public virtual long get_DestinationUnreachableMessagesSent();
    public virtual long get_EchoRepliesReceived();
    public virtual long get_EchoRepliesSent();
    public virtual long get_EchoRequestsReceived();
    public virtual long get_EchoRequestsSent();
    public virtual long get_ErrorsReceived();
    public virtual long get_ErrorsSent();
    public virtual long get_MessagesReceived();
    public virtual long get_MessagesSent();
    public virtual long get_ParameterProblemsReceived();
    public virtual long get_ParameterProblemsSent();
    public virtual long get_RedirectsReceived();
    public virtual long get_RedirectsSent();
    public virtual long get_TimeExceededMessagesReceived();
    public virtual long get_TimeExceededMessagesSent();
    public virtual long get_MembershipQueriesReceived();
    public virtual long get_MembershipQueriesSent();
    public virtual long get_MembershipReductionsReceived();
    public virtual long get_MembershipReductionsSent();
    public virtual long get_MembershipReportsReceived();
    public virtual long get_MembershipReportsSent();
    public virtual long get_NeighborAdvertisementsReceived();
    public virtual long get_NeighborAdvertisementsSent();
    public virtual long get_NeighborSolicitsReceived();
    public virtual long get_NeighborSolicitsSent();
    public virtual long get_PacketTooBigMessagesReceived();
    public virtual long get_PacketTooBigMessagesSent();
    public virtual long get_RouterAdvertisementsReceived();
    public virtual long get_RouterAdvertisementsSent();
    public virtual long get_RouterSolicitsReceived();
    public virtual long get_RouterSolicitsSent();
}
internal class System.Net.NetworkInformation.OsxIPGlobalProperties : UnixIPGlobalProperties {
    public virtual TcpConnectionInformation[] GetActiveTcpConnections();
    public virtual IPEndPoint[] GetActiveTcpListeners();
    public virtual IPEndPoint[] GetActiveUdpListeners();
    public virtual IcmpV4Statistics GetIcmpV4Statistics();
    public virtual IcmpV6Statistics GetIcmpV6Statistics();
    public virtual IPGlobalStatistics GetIPv4GlobalStatistics();
    public virtual IPGlobalStatistics GetIPv6GlobalStatistics();
    public virtual TcpStatistics GetTcpIPv4Statistics();
    public virtual TcpStatistics GetTcpIPv6Statistics();
    public virtual UdpStatistics GetUdpIPv4Statistics();
    public virtual UdpStatistics GetUdpIPv6Statistics();
}
internal class System.Net.NetworkInformation.OsxIpInterfaceProperties : UnixIPInterfaceProperties {
    private OsxIPv4InterfaceProperties _ipv4Properties;
    private OsxIPv6InterfaceProperties _ipv6Properties;
    private GatewayIPAddressInformationCollection _gatewayAddresses;
    public IPAddressInformationCollection AnycastAddresses { get; }
    public IPAddressCollection DhcpServerAddresses { get; }
    public GatewayIPAddressInformationCollection GatewayAddresses { get; }
    public bool IsDnsEnabled { get; }
    public bool IsDynamicDnsEnabled { get; }
    public IPAddressCollection WinsServersAddresses { get; }
    public OsxIpInterfaceProperties(OsxNetworkInterface oni, int mtu);
    public virtual IPAddressInformationCollection get_AnycastAddresses();
    public virtual IPAddressCollection get_DhcpServerAddresses();
    public virtual GatewayIPAddressInformationCollection get_GatewayAddresses();
    public virtual bool get_IsDnsEnabled();
    public virtual bool get_IsDynamicDnsEnabled();
    public virtual IPAddressCollection get_WinsServersAddresses();
    public virtual IPv4InterfaceProperties GetIPv4Properties();
    public virtual IPv6InterfaceProperties GetIPv6Properties();
    private static GatewayIPAddressInformationCollection GetGatewayAddresses(int interfaceIndex);
}
internal class System.Net.NetworkInformation.OsxIpInterfaceStatistics : IPInterfaceStatistics {
    private long _outputQueueLength;
    private long _inPackets;
    private long _outPackets;
    private long _inBytes;
    private long _outBytes;
    private long _inPacketsDiscarded;
    private long _inErrors;
    private long _inUnknownProtocols;
    private long _inNonUnicastPackets;
    private long _outNonUnicastPackets;
    private long _outErrors;
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public long IncomingPacketsDiscarded { get; }
    public long IncomingPacketsWithErrors { get; }
    public long IncomingUnknownProtocolPackets { get; }
    public long NonUnicastPacketsReceived { get; }
    public long NonUnicastPacketsSent { get; }
    public long OutgoingPacketsDiscarded { get; }
    public long OutgoingPacketsWithErrors { get; }
    public long OutputQueueLength { get; }
    public long UnicastPacketsReceived { get; }
    public long UnicastPacketsSent { get; }
    public OsxIpInterfaceStatistics(string name);
    public virtual long get_BytesReceived();
    public virtual long get_BytesSent();
    public virtual long get_IncomingPacketsDiscarded();
    public virtual long get_IncomingPacketsWithErrors();
    public virtual long get_IncomingUnknownProtocolPackets();
    public virtual long get_NonUnicastPacketsReceived();
    public virtual long get_NonUnicastPacketsSent();
    public virtual long get_OutgoingPacketsDiscarded();
    public virtual long get_OutgoingPacketsWithErrors();
    public virtual long get_OutputQueueLength();
    public virtual long get_UnicastPacketsReceived();
    public virtual long get_UnicastPacketsSent();
}
internal class System.Net.NetworkInformation.OsxIPv4GlobalStatistics : IPGlobalStatistics {
    private long _outboundPackets;
    private long _outputPacketsNoRoute;
    private long _cantFrags;
    private long _datagramsFragmented;
    private long _packetsReassembled;
    private long _totalPacketsReceived;
    private long _packetsDelivered;
    private long _packetsDiscarded;
    private long _packetsForwarded;
    private long _badAddress;
    private long _badHeader;
    private long _unknownProtos;
    private int _defaultTtl;
    private bool _forwarding;
    private int _numInterfaces;
    private int _numIPAddresses;
    private int _numRoutes;
    public int DefaultTtl { get; }
    public bool ForwardingEnabled { get; }
    public int NumberOfInterfaces { get; }
    public int NumberOfIPAddresses { get; }
    public long OutputPacketRequests { get; }
    public long OutputPacketRoutingDiscards { get; }
    public long OutputPacketsDiscarded { get; }
    public long OutputPacketsWithNoRoute { get; }
    public long PacketFragmentFailures { get; }
    public long PacketReassembliesRequired { get; }
    public long PacketReassemblyFailures { get; }
    public long PacketReassemblyTimeout { get; }
    public long PacketsFragmented { get; }
    public long PacketsReassembled { get; }
    public long ReceivedPackets { get; }
    public long ReceivedPacketsDelivered { get; }
    public long ReceivedPacketsDiscarded { get; }
    public long ReceivedPacketsForwarded { get; }
    public long ReceivedPacketsWithAddressErrors { get; }
    public long ReceivedPacketsWithHeadersErrors { get; }
    public long ReceivedPacketsWithUnknownProtocol { get; }
    public int NumberOfRoutes { get; }
    public virtual int get_DefaultTtl();
    public virtual bool get_ForwardingEnabled();
    public virtual int get_NumberOfInterfaces();
    public virtual int get_NumberOfIPAddresses();
    public virtual long get_OutputPacketRequests();
    public virtual long get_OutputPacketRoutingDiscards();
    public virtual long get_OutputPacketsDiscarded();
    public virtual long get_OutputPacketsWithNoRoute();
    public virtual long get_PacketFragmentFailures();
    public virtual long get_PacketReassembliesRequired();
    public virtual long get_PacketReassemblyFailures();
    public virtual long get_PacketReassemblyTimeout();
    public virtual long get_PacketsFragmented();
    public virtual long get_PacketsReassembled();
    public virtual long get_ReceivedPackets();
    public virtual long get_ReceivedPacketsDelivered();
    public virtual long get_ReceivedPacketsDiscarded();
    public virtual long get_ReceivedPacketsForwarded();
    public virtual long get_ReceivedPacketsWithAddressErrors();
    public virtual long get_ReceivedPacketsWithHeadersErrors();
    public virtual long get_ReceivedPacketsWithUnknownProtocol();
    public virtual int get_NumberOfRoutes();
}
internal class System.Net.NetworkInformation.OsxIPv4InterfaceProperties : UnixIPv4InterfaceProperties {
    private int _mtu;
    public bool IsAutomaticPrivateAddressingActive { get; }
    public bool IsAutomaticPrivateAddressingEnabled { get; }
    public bool IsDhcpEnabled { get; }
    public bool IsForwardingEnabled { get; }
    public int Mtu { get; }
    public bool UsesWins { get; }
    public OsxIPv4InterfaceProperties(OsxNetworkInterface oni, int mtu);
    public virtual bool get_IsAutomaticPrivateAddressingActive();
    public virtual bool get_IsAutomaticPrivateAddressingEnabled();
    public virtual bool get_IsDhcpEnabled();
    public virtual bool get_IsForwardingEnabled();
    public virtual int get_Mtu();
    public virtual bool get_UsesWins();
}
internal class System.Net.NetworkInformation.OsxIPv6InterfaceProperties : UnixIPv6InterfaceProperties {
    private int _mtu;
    public int Mtu { get; }
    public OsxIPv6InterfaceProperties(OsxNetworkInterface oni, int mtu);
    public virtual int get_Mtu();
    public virtual long GetScopeId(ScopeLevel scopeLevel);
}
internal class System.Net.NetworkInformation.OsxNetworkInterface : UnixNetworkInterface {
    private OsxIpInterfaceProperties _ipProperties;
    private long _speed;
    public OperationalStatus OperationalStatus { get; }
    public long Speed { get; }
    public bool SupportsMulticast { get; }
    public bool IsReceiveOnly { get; }
    protected OsxNetworkInterface(string name);
    public static NetworkInterface[] GetOsxNetworkInterfaces();
    private static OsxNetworkInterface GetOrCreate(Dictionary`2<string, OsxNetworkInterface> interfaces, string name);
    public virtual IPInterfaceProperties GetIPProperties();
    public virtual IPInterfaceStatistics GetIPStatistics();
    public virtual OperationalStatus get_OperationalStatus();
    public virtual long get_Speed();
    public virtual bool get_SupportsMulticast();
    public virtual bool get_IsReceiveOnly();
}
internal class System.Net.NetworkInformation.OsxTcpStatistics : TcpStatistics {
    private long _connectionsAccepted;
    private long _connectionsInitiated;
    private long _cumulativeConnections;
    private long _errorsReceived;
    private long _failedConnectionAttempts;
    private long _segmentsSent;
    private long _segmentsResent;
    private long _segmentsReceived;
    private int _currentConnections;
    public long ConnectionsAccepted { get; }
    public long ConnectionsInitiated { get; }
    public long CumulativeConnections { get; }
    public long CurrentConnections { get; }
    public long ErrorsReceived { get; }
    public long FailedConnectionAttempts { get; }
    public long MaximumConnections { get; }
    public long MaximumTransmissionTimeout { get; }
    public long MinimumTransmissionTimeout { get; }
    public long ResetConnections { get; }
    public long ResetsSent { get; }
    public long SegmentsReceived { get; }
    public long SegmentsResent { get; }
    public long SegmentsSent { get; }
    public virtual long get_ConnectionsAccepted();
    public virtual long get_ConnectionsInitiated();
    public virtual long get_CumulativeConnections();
    public virtual long get_CurrentConnections();
    public virtual long get_ErrorsReceived();
    public virtual long get_FailedConnectionAttempts();
    public virtual long get_MaximumConnections();
    public virtual long get_MaximumTransmissionTimeout();
    public virtual long get_MinimumTransmissionTimeout();
    public virtual long get_ResetConnections();
    public virtual long get_ResetsSent();
    public virtual long get_SegmentsReceived();
    public virtual long get_SegmentsResent();
    public virtual long get_SegmentsSent();
}
internal class System.Net.NetworkInformation.OsxUdpStatistics : UdpStatistics {
    private long _datagramsReceived;
    private long _datagramsSent;
    private long _incomingDiscarded;
    private long _incomingErrors;
    private int _numListeners;
    public long DatagramsReceived { get; }
    public long DatagramsSent { get; }
    public long IncomingDatagramsDiscarded { get; }
    public long IncomingDatagramsWithErrors { get; }
    public int UdpListeners { get; }
    public virtual long get_DatagramsReceived();
    public virtual long get_DatagramsSent();
    public virtual long get_IncomingDatagramsDiscarded();
    public virtual long get_IncomingDatagramsWithErrors();
    public virtual int get_UdpListeners();
}
public class System.Net.NetworkInformation.PhysicalAddress : object {
    private Byte[] _address;
    private bool _hashNotComputed;
    private int _hash;
    public static PhysicalAddress None;
    public PhysicalAddress(Byte[] address);
    private static PhysicalAddress();
    public virtual int GetHashCode();
    public virtual bool Equals(object comparand);
    public virtual string ToString();
    public Byte[] GetAddressBytes();
    public static PhysicalAddress Parse(string address);
}
public enum System.Net.NetworkInformation.PrefixOrigin : Enum {
    public int value__;
    public static PrefixOrigin Other;
    public static PrefixOrigin Manual;
    public static PrefixOrigin WellKnown;
    public static PrefixOrigin Dhcp;
    public static PrefixOrigin RouterAdvertisement;
}
public enum System.Net.NetworkInformation.ScopeLevel : Enum {
    public int value__;
    public static ScopeLevel None;
    public static ScopeLevel Interface;
    public static ScopeLevel Link;
    public static ScopeLevel Subnet;
    public static ScopeLevel Admin;
    public static ScopeLevel Site;
    public static ScopeLevel Organization;
    public static ScopeLevel Global;
}
internal class System.Net.NetworkInformation.SimpleGatewayIPAddressInformation : GatewayIPAddressInformation {
    private IPAddress _address;
    public IPAddress Address { get; }
    public SimpleGatewayIPAddressInformation(IPAddress address);
    public virtual IPAddress get_Address();
}
internal class System.Net.NetworkInformation.SimpleTcpConnectionInformation : TcpConnectionInformation {
    private IPEndPoint _localEndPoint;
    private IPEndPoint _remoteEndPoint;
    private TcpState _state;
    public IPEndPoint LocalEndPoint { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public TcpState State { get; }
    public SimpleTcpConnectionInformation(IPEndPoint localEndPoint, IPEndPoint remoteEndPoint, TcpState state);
    public virtual IPEndPoint get_LocalEndPoint();
    public virtual IPEndPoint get_RemoteEndPoint();
    public virtual TcpState get_State();
}
internal static class System.Net.NetworkInformation.StringParsingHelpers : object {
    internal static string ParseDnsSuffixFromResolvConfFile(string filePath);
    internal static List`1<IPAddress> ParseDnsAddressesFromResolvConfFile(string filePath);
}
public enum System.Net.NetworkInformation.SuffixOrigin : Enum {
    public int value__;
    public static SuffixOrigin Other;
    public static SuffixOrigin Manual;
    public static SuffixOrigin WellKnown;
    public static SuffixOrigin OriginDhcp;
    public static SuffixOrigin LinkLayerAddress;
    public static SuffixOrigin Random;
}
public abstract class System.Net.NetworkInformation.TcpConnectionInformation : object {
    public IPEndPoint LocalEndPoint { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public TcpState State { get; }
    public abstract virtual IPEndPoint get_LocalEndPoint();
    public abstract virtual IPEndPoint get_RemoteEndPoint();
    public abstract virtual TcpState get_State();
}
public enum System.Net.NetworkInformation.TcpState : Enum {
    public int value__;
    public static TcpState Unknown;
    public static TcpState Closed;
    public static TcpState Listen;
    public static TcpState SynSent;
    public static TcpState SynReceived;
    public static TcpState Established;
    public static TcpState FinWait1;
    public static TcpState FinWait2;
    public static TcpState CloseWait;
    public static TcpState Closing;
    public static TcpState LastAck;
    public static TcpState TimeWait;
    public static TcpState DeleteTcb;
}
public abstract class System.Net.NetworkInformation.TcpStatistics : object {
    public long ConnectionsAccepted { get; }
    public long ConnectionsInitiated { get; }
    public long CumulativeConnections { get; }
    public long CurrentConnections { get; }
    public long ErrorsReceived { get; }
    public long FailedConnectionAttempts { get; }
    public long MaximumConnections { get; }
    public long MaximumTransmissionTimeout { get; }
    public long MinimumTransmissionTimeout { get; }
    public long ResetConnections { get; }
    public long SegmentsReceived { get; }
    public long SegmentsResent { get; }
    public long SegmentsSent { get; }
    public long ResetsSent { get; }
    public abstract virtual long get_ConnectionsAccepted();
    public abstract virtual long get_ConnectionsInitiated();
    public abstract virtual long get_CumulativeConnections();
    public abstract virtual long get_CurrentConnections();
    public abstract virtual long get_ErrorsReceived();
    public abstract virtual long get_FailedConnectionAttempts();
    public abstract virtual long get_MaximumConnections();
    public abstract virtual long get_MaximumTransmissionTimeout();
    public abstract virtual long get_MinimumTransmissionTimeout();
    public abstract virtual long get_ResetConnections();
    public abstract virtual long get_SegmentsReceived();
    public abstract virtual long get_SegmentsResent();
    public abstract virtual long get_SegmentsSent();
    public abstract virtual long get_ResetsSent();
}
public abstract class System.Net.NetworkInformation.UdpStatistics : object {
    public long DatagramsReceived { get; }
    public long DatagramsSent { get; }
    public long IncomingDatagramsDiscarded { get; }
    public long IncomingDatagramsWithErrors { get; }
    public int UdpListeners { get; }
    public abstract virtual long get_DatagramsReceived();
    public abstract virtual long get_DatagramsSent();
    public abstract virtual long get_IncomingDatagramsDiscarded();
    public abstract virtual long get_IncomingDatagramsWithErrors();
    public abstract virtual int get_UdpListeners();
}
public abstract class System.Net.NetworkInformation.UnicastIPAddressInformation : IPAddressInformation {
    public long AddressPreferredLifetime { get; }
    public long AddressValidLifetime { get; }
    public long DhcpLeaseLifetime { get; }
    public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public PrefixOrigin PrefixOrigin { get; }
    public SuffixOrigin SuffixOrigin { get; }
    public IPAddress IPv4Mask { get; }
    public int PrefixLength { get; }
    public abstract virtual long get_AddressPreferredLifetime();
    public abstract virtual long get_AddressValidLifetime();
    public abstract virtual long get_DhcpLeaseLifetime();
    public abstract virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public abstract virtual PrefixOrigin get_PrefixOrigin();
    public abstract virtual SuffixOrigin get_SuffixOrigin();
    public abstract virtual IPAddress get_IPv4Mask();
    public virtual int get_PrefixLength();
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.UnicastIPAddressInformationCollection : object {
    private List`1<UnicastIPAddressInformation> _addresses;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public UnicastIPAddressInformation Item { get; }
    public virtual void CopyTo(UnicastIPAddressInformation[] array, int offset);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(UnicastIPAddressInformation address);
    internal void InternalAdd(UnicastIPAddressInformation address);
    public virtual bool Contains(UnicastIPAddressInformation address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IEnumerator`1<UnicastIPAddressInformation> GetEnumerator();
    public virtual UnicastIPAddressInformation get_Item(int index);
    public virtual bool Remove(UnicastIPAddressInformation address);
    public virtual void Clear();
}
internal abstract class System.Net.NetworkInformation.UnixIPGlobalProperties : IPGlobalProperties {
    public string DhcpScopeName { get; }
    public string DomainName { get; }
    public string HostName { get; }
    public bool IsWinsProxy { get; }
    public NetBiosNodeType NodeType { get; }
    public virtual string get_DhcpScopeName();
    public virtual string get_DomainName();
    public virtual string get_HostName();
    public virtual bool get_IsWinsProxy();
    public virtual NetBiosNodeType get_NodeType();
    public sealed virtual Task`1<UnicastIPAddressInformationCollection> GetUnicastAddressesAsync();
    private UnicastIPAddressInformationCollection GetUnicastAddresses();
}
internal abstract class System.Net.NetworkInformation.UnixIPInterfaceProperties : IPInterfaceProperties {
    private UnicastIPAddressInformationCollection _unicastAddresses;
    private MulticastIPAddressInformationCollection _multicastAddreses;
    private UnixNetworkInterface _uni;
    private string _dnsSuffix;
    private IPAddressCollection _dnsAddresses;
    public UnicastIPAddressInformationCollection UnicastAddresses { get; }
    public MulticastIPAddressInformationCollection MulticastAddresses { get; }
    public bool IsDnsEnabled { get; }
    public string DnsSuffix { get; }
    public IPAddressCollection DnsAddresses { get; }
    public UnixIPInterfaceProperties(UnixNetworkInterface uni);
    public sealed virtual UnicastIPAddressInformationCollection get_UnicastAddresses();
    public sealed virtual MulticastIPAddressInformationCollection get_MulticastAddresses();
    public virtual bool get_IsDnsEnabled();
    public sealed virtual string get_DnsSuffix();
    public sealed virtual IPAddressCollection get_DnsAddresses();
    private static UnicastIPAddressInformationCollection GetUnicastAddresses(UnixNetworkInterface uni);
    private static MulticastIPAddressInformationCollection GetMulticastAddresses(UnixNetworkInterface uni);
    private static string GetDnsSuffix();
    private static IPAddressCollection GetDnsAddresses();
}
internal abstract class System.Net.NetworkInformation.UnixIPv4InterfaceProperties : IPv4InterfaceProperties {
    private UnixNetworkInterface _uni;
    public int Index { get; }
    public UnixIPv4InterfaceProperties(UnixNetworkInterface uni);
    public sealed virtual int get_Index();
}
internal abstract class System.Net.NetworkInformation.UnixIPv6InterfaceProperties : IPv6InterfaceProperties {
    private UnixNetworkInterface _uni;
    public int Index { get; }
    public UnixIPv6InterfaceProperties(UnixNetworkInterface uni);
    public sealed virtual int get_Index();
}
internal class System.Net.NetworkInformation.UnixMulticastIPAddressInformation : MulticastIPAddressInformation {
    private IPAddress _address;
    public IPAddress Address { get; }
    public bool IsDnsEligible { get; }
    public bool IsTransient { get; }
    public long AddressPreferredLifetime { get; }
    public long AddressValidLifetime { get; }
    public long DhcpLeaseLifetime { get; }
    public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public PrefixOrigin PrefixOrigin { get; }
    public SuffixOrigin SuffixOrigin { get; }
    public UnixMulticastIPAddressInformation(IPAddress address);
    public virtual IPAddress get_Address();
    public virtual bool get_IsDnsEligible();
    public virtual bool get_IsTransient();
    public virtual long get_AddressPreferredLifetime();
    public virtual long get_AddressValidLifetime();
    public virtual long get_DhcpLeaseLifetime();
    public virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public virtual PrefixOrigin get_PrefixOrigin();
    public virtual SuffixOrigin get_SuffixOrigin();
}
internal abstract class System.Net.NetworkInformation.UnixNetworkInterface : NetworkInterface {
    protected string _name;
    protected int _index;
    protected NetworkInterfaceType _networkInterfaceType;
    protected PhysicalAddress _physicalAddress;
    protected List`1<IPAddress> _addresses;
    protected Dictionary`2<IPAddress, IPAddress> _netMasks;
    protected Nullable`1<UInt32> _ipv6ScopeId;
    public string Id { get; }
    public string Name { get; }
    public string Description { get; }
    public NetworkInterfaceType NetworkInterfaceType { get; }
    public int Index { get; }
    public List`1<IPAddress> Addresses { get; }
    protected UnixNetworkInterface(string name);
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public sealed virtual string get_Description();
    public sealed virtual NetworkInterfaceType get_NetworkInterfaceType();
    public sealed virtual PhysicalAddress GetPhysicalAddress();
    public virtual bool Supports(NetworkInterfaceComponent networkInterfaceComponent);
    public int get_Index();
    public List`1<IPAddress> get_Addresses();
    protected void AddAddress(IPAddress ipAddress);
    public IPAddress GetNetMaskForIPv4Address(IPAddress address);
    protected void ProcessIpv4Address(IpAddressInfo* addressInfo, IpAddressInfo* netMask);
    protected void ProcessIpv6Address(IpAddressInfo* addressInfo, UInt32 scopeId);
    protected void ProcessLinkLayerAddress(LinkLayerAddressInfo* llAddr);
}
internal class System.Net.NetworkInformation.UnixUnicastIPAddressInformation : UnicastIPAddressInformation {
    private IPAddress _address;
    private IPAddress _netMask;
    public IPAddress Address { get; }
    public bool IsDnsEligible { get; }
    public bool IsTransient { get; }
    public long AddressPreferredLifetime { get; }
    public long AddressValidLifetime { get; }
    public long DhcpLeaseLifetime { get; }
    public DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    public PrefixOrigin PrefixOrigin { get; }
    public SuffixOrigin SuffixOrigin { get; }
    public IPAddress IPv4Mask { get; }
    public int PrefixLength { get; }
    public UnixUnicastIPAddressInformation(IPAddress address, IPAddress netMask);
    public virtual IPAddress get_Address();
    public virtual bool get_IsDnsEligible();
    public virtual bool get_IsTransient();
    public virtual long get_AddressPreferredLifetime();
    public virtual long get_AddressValidLifetime();
    public virtual long get_DhcpLeaseLifetime();
    public virtual DuplicateAddressDetectionState get_DuplicateAddressDetectionState();
    public virtual PrefixOrigin get_PrefixOrigin();
    public virtual SuffixOrigin get_SuffixOrigin();
    public virtual IPAddress get_IPv4Mask();
    public virtual int get_PrefixLength();
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string net_PropertyNotImplementedException { get; }
    internal static string net_completed_result { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_bad_mac_address { get; }
    internal static string net_collection_readonly { get; }
    internal static string net_log_exception { get; }
    internal static string net_FailedToParseNetworkFile { get; }
    internal static string net_NoLoopback { get; }
    internal static string net_InformationUnavailableOnPlatform { get; }
    internal static string net_PInvokeError { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_net_MethodNotImplementedException();
    internal static string get_net_PropertyNotImplementedException();
    internal static string get_net_completed_result();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_bad_mac_address();
    internal static string get_net_collection_readonly();
    internal static string get_net_log_exception();
    internal static string get_net_FailedToParseNetworkFile();
    internal static string get_net_NoLoopback();
    internal static string get_net_InformationUnavailableOnPlatform();
    internal static string get_net_PInvokeError();
    internal static Type get_ResourceType();
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult);
}
