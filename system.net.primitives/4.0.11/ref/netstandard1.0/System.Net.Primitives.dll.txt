public class System.Net.Cookie : object {
    public string Comment { get; public set; }
    public Uri CommentUri { get; public set; }
    public bool Discard { get; public set; }
    public string Domain { get; public set; }
    public bool Expired { get; public set; }
    public DateTime Expires { get; public set; }
    public bool HttpOnly { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string Port { get; public set; }
    public bool Secure { get; public set; }
    public DateTime TimeStamp { get; }
    public string Value { get; public set; }
    public int Version { get; public set; }
    public Cookie(string name, string value);
    public Cookie(string name, string value, string path);
    public Cookie(string name, string value, string path, string domain);
    public string get_Comment();
    public void set_Comment(string value);
    public Uri get_CommentUri();
    public void set_CommentUri(Uri value);
    public bool get_Discard();
    public void set_Discard(bool value);
    public string get_Domain();
    public void set_Domain(string value);
    public bool get_Expired();
    public void set_Expired(bool value);
    public DateTime get_Expires();
    public void set_Expires(DateTime value);
    public bool get_HttpOnly();
    public void set_HttpOnly(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_Port();
    public void set_Port(string value);
    public bool get_Secure();
    public void set_Secure(bool value);
    public DateTime get_TimeStamp();
    public string get_Value();
    public void set_Value(string value);
    public int get_Version();
    public void set_Version(int value);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Net.CookieCollection : object {
    public int Count { get; }
    public Cookie Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public Cookie get_Item(string name);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Add(Cookie cookie);
    public void Add(CookieCollection cookies);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public class System.Net.CookieContainer : object {
    public static int DefaultCookieLengthLimit;
    public static int DefaultCookieLimit;
    public static int DefaultPerDomainCookieLimit;
    public int Capacity { get; }
    public int Count { get; }
    public int MaxCookieSize { get; }
    public int PerDomainCapacity { get; }
    public int get_Capacity();
    public int get_Count();
    public int get_MaxCookieSize();
    public int get_PerDomainCapacity();
    public void Add(Uri uri, Cookie cookie);
    public void Add(Uri uri, CookieCollection cookies);
    public string GetCookieHeader(Uri uri);
    public CookieCollection GetCookies(Uri uri);
    public void SetCookies(Uri uri, string cookieHeader);
}
public class System.Net.CookieException : FormatException {
}
public enum System.Net.HttpStatusCode : Enum {
    public int value__;
    public static HttpStatusCode Accepted;
    public static HttpStatusCode Ambiguous;
    public static HttpStatusCode BadGateway;
    public static HttpStatusCode BadRequest;
    public static HttpStatusCode Conflict;
    public static HttpStatusCode Continue;
    public static HttpStatusCode Created;
    public static HttpStatusCode ExpectationFailed;
    public static HttpStatusCode Forbidden;
    public static HttpStatusCode Found;
    public static HttpStatusCode GatewayTimeout;
    public static HttpStatusCode Gone;
    public static HttpStatusCode HttpVersionNotSupported;
    public static HttpStatusCode InternalServerError;
    public static HttpStatusCode LengthRequired;
    public static HttpStatusCode MethodNotAllowed;
    public static HttpStatusCode Moved;
    public static HttpStatusCode MovedPermanently;
    public static HttpStatusCode MultipleChoices;
    public static HttpStatusCode NoContent;
    public static HttpStatusCode NonAuthoritativeInformation;
    public static HttpStatusCode NotAcceptable;
    public static HttpStatusCode NotFound;
    public static HttpStatusCode NotImplemented;
    public static HttpStatusCode NotModified;
    public static HttpStatusCode OK;
    public static HttpStatusCode PartialContent;
    public static HttpStatusCode PaymentRequired;
    public static HttpStatusCode PreconditionFailed;
    public static HttpStatusCode ProxyAuthenticationRequired;
    public static HttpStatusCode Redirect;
    public static HttpStatusCode RedirectKeepVerb;
    public static HttpStatusCode RedirectMethod;
    public static HttpStatusCode RequestedRangeNotSatisfiable;
    public static HttpStatusCode RequestEntityTooLarge;
    public static HttpStatusCode RequestTimeout;
    public static HttpStatusCode RequestUriTooLong;
    public static HttpStatusCode ResetContent;
    public static HttpStatusCode SeeOther;
    public static HttpStatusCode ServiceUnavailable;
    public static HttpStatusCode SwitchingProtocols;
    public static HttpStatusCode TemporaryRedirect;
    public static HttpStatusCode Unauthorized;
    public static HttpStatusCode UnsupportedMediaType;
    public static HttpStatusCode Unused;
    public static HttpStatusCode UseProxy;
}
public interface System.Net.ICredentials {
    public abstract virtual NetworkCredential GetCredential(Uri uri, string authType);
}
public class System.Net.NetworkCredential : object {
    public string Domain { get; public set; }
    public string Password { get; public set; }
    public string UserName { get; public set; }
    public NetworkCredential(string userName, string password);
    public NetworkCredential(string userName, string password, string domain);
    public string get_Domain();
    public void set_Domain(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public sealed virtual NetworkCredential GetCredential(Uri uri, string authType);
}
