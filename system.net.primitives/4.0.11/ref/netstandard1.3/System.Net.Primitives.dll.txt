[FlagsAttribute]
public enum System.Net.AuthenticationSchemes : Enum {
    public int value__;
    public static AuthenticationSchemes Anonymous;
    public static AuthenticationSchemes Basic;
    public static AuthenticationSchemes Digest;
    public static AuthenticationSchemes IntegratedWindowsAuthentication;
    public static AuthenticationSchemes Negotiate;
    public static AuthenticationSchemes None;
    public static AuthenticationSchemes Ntlm;
}
public class System.Net.Cookie : object {
    public string Comment { get; public set; }
    public Uri CommentUri { get; public set; }
    public bool Discard { get; public set; }
    public string Domain { get; public set; }
    public bool Expired { get; public set; }
    public DateTime Expires { get; public set; }
    public bool HttpOnly { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string Port { get; public set; }
    public bool Secure { get; public set; }
    public DateTime TimeStamp { get; }
    public string Value { get; public set; }
    public int Version { get; public set; }
    public Cookie(string name, string value);
    public Cookie(string name, string value, string path);
    public Cookie(string name, string value, string path, string domain);
    public string get_Comment();
    public void set_Comment(string value);
    public Uri get_CommentUri();
    public void set_CommentUri(Uri value);
    public bool get_Discard();
    public void set_Discard(bool value);
    public string get_Domain();
    public void set_Domain(string value);
    public bool get_Expired();
    public void set_Expired(bool value);
    public DateTime get_Expires();
    public void set_Expires(DateTime value);
    public bool get_HttpOnly();
    public void set_HttpOnly(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_Port();
    public void set_Port(string value);
    public bool get_Secure();
    public void set_Secure(bool value);
    public DateTime get_TimeStamp();
    public string get_Value();
    public void set_Value(string value);
    public int get_Version();
    public void set_Version(int value);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Net.CookieCollection : object {
    public int Count { get; }
    public Cookie Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public Cookie get_Item(string name);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Add(Cookie cookie);
    public void Add(CookieCollection cookies);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public class System.Net.CookieContainer : object {
    public static int DefaultCookieLengthLimit;
    public static int DefaultCookieLimit;
    public static int DefaultPerDomainCookieLimit;
    public int Capacity { get; public set; }
    public int Count { get; }
    public int MaxCookieSize { get; public set; }
    public int PerDomainCapacity { get; public set; }
    public int get_Capacity();
    public void set_Capacity(int value);
    public int get_Count();
    public int get_MaxCookieSize();
    public void set_MaxCookieSize(int value);
    public int get_PerDomainCapacity();
    public void set_PerDomainCapacity(int value);
    public void Add(Uri uri, Cookie cookie);
    public void Add(Uri uri, CookieCollection cookies);
    public string GetCookieHeader(Uri uri);
    public CookieCollection GetCookies(Uri uri);
    public void SetCookies(Uri uri, string cookieHeader);
}
public class System.Net.CookieException : FormatException {
}
public class System.Net.CredentialCache : object {
    public static ICredentials DefaultCredentials { get; }
    public static NetworkCredential DefaultNetworkCredentials { get; }
    public static ICredentials get_DefaultCredentials();
    public static NetworkCredential get_DefaultNetworkCredentials();
    public void Add(string host, int port, string authenticationType, NetworkCredential credential);
    public void Add(Uri uriPrefix, string authType, NetworkCredential cred);
    public sealed virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
    public sealed virtual NetworkCredential GetCredential(Uri uriPrefix, string authType);
    public sealed virtual IEnumerator GetEnumerator();
    public void Remove(string host, int port, string authenticationType);
    public void Remove(Uri uriPrefix, string authType);
}
[FlagsAttribute]
public enum System.Net.DecompressionMethods : Enum {
    public int value__;
    public static DecompressionMethods Deflate;
    public static DecompressionMethods GZip;
    public static DecompressionMethods None;
}
public class System.Net.DnsEndPoint : EndPoint {
    public AddressFamily AddressFamily { get; }
    public string Host { get; }
    public int Port { get; }
    public DnsEndPoint(string host, int port);
    public DnsEndPoint(string host, int port, AddressFamily addressFamily);
    public virtual AddressFamily get_AddressFamily();
    public string get_Host();
    public int get_Port();
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class System.Net.EndPoint : object {
    public AddressFamily AddressFamily { get; }
    public virtual AddressFamily get_AddressFamily();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual SocketAddress Serialize();
}
public enum System.Net.HttpStatusCode : Enum {
    public int value__;
    public static HttpStatusCode Accepted;
    public static HttpStatusCode Ambiguous;
    public static HttpStatusCode BadGateway;
    public static HttpStatusCode BadRequest;
    public static HttpStatusCode Conflict;
    public static HttpStatusCode Continue;
    public static HttpStatusCode Created;
    public static HttpStatusCode ExpectationFailed;
    public static HttpStatusCode Forbidden;
    public static HttpStatusCode Found;
    public static HttpStatusCode GatewayTimeout;
    public static HttpStatusCode Gone;
    public static HttpStatusCode HttpVersionNotSupported;
    public static HttpStatusCode InternalServerError;
    public static HttpStatusCode LengthRequired;
    public static HttpStatusCode MethodNotAllowed;
    public static HttpStatusCode Moved;
    public static HttpStatusCode MovedPermanently;
    public static HttpStatusCode MultipleChoices;
    public static HttpStatusCode NoContent;
    public static HttpStatusCode NonAuthoritativeInformation;
    public static HttpStatusCode NotAcceptable;
    public static HttpStatusCode NotFound;
    public static HttpStatusCode NotImplemented;
    public static HttpStatusCode NotModified;
    public static HttpStatusCode OK;
    public static HttpStatusCode PartialContent;
    public static HttpStatusCode PaymentRequired;
    public static HttpStatusCode PreconditionFailed;
    public static HttpStatusCode ProxyAuthenticationRequired;
    public static HttpStatusCode Redirect;
    public static HttpStatusCode RedirectKeepVerb;
    public static HttpStatusCode RedirectMethod;
    public static HttpStatusCode RequestedRangeNotSatisfiable;
    public static HttpStatusCode RequestEntityTooLarge;
    public static HttpStatusCode RequestTimeout;
    public static HttpStatusCode RequestUriTooLong;
    public static HttpStatusCode ResetContent;
    public static HttpStatusCode SeeOther;
    public static HttpStatusCode ServiceUnavailable;
    public static HttpStatusCode SwitchingProtocols;
    public static HttpStatusCode TemporaryRedirect;
    public static HttpStatusCode Unauthorized;
    public static HttpStatusCode UnsupportedMediaType;
    public static HttpStatusCode Unused;
    public static HttpStatusCode UpgradeRequired;
    public static HttpStatusCode UseProxy;
}
public interface System.Net.ICredentials {
    public abstract virtual NetworkCredential GetCredential(Uri uri, string authType);
}
public interface System.Net.ICredentialsByHost {
    public abstract virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
}
public class System.Net.IPAddress : object {
    public static IPAddress Any;
    public static IPAddress Broadcast;
    public static IPAddress IPv6Any;
    public static IPAddress IPv6Loopback;
    public static IPAddress IPv6None;
    public static IPAddress Loopback;
    public static IPAddress None;
    public AddressFamily AddressFamily { get; }
    public bool IsIPv4MappedToIPv6 { get; }
    public bool IsIPv6LinkLocal { get; }
    public bool IsIPv6Multicast { get; }
    public bool IsIPv6SiteLocal { get; }
    public bool IsIPv6Teredo { get; }
    public long ScopeId { get; public set; }
    public IPAddress(Byte[] address);
    public IPAddress(Byte[] address, long scopeid);
    public IPAddress(long newAddress);
    public AddressFamily get_AddressFamily();
    public bool get_IsIPv4MappedToIPv6();
    public bool get_IsIPv6LinkLocal();
    public bool get_IsIPv6Multicast();
    public bool get_IsIPv6SiteLocal();
    public bool get_IsIPv6Teredo();
    public long get_ScopeId();
    public void set_ScopeId(long value);
    public virtual bool Equals(object comparand);
    public Byte[] GetAddressBytes();
    public virtual int GetHashCode();
    public static short HostToNetworkOrder(short host);
    public static int HostToNetworkOrder(int host);
    public static long HostToNetworkOrder(long host);
    public static bool IsLoopback(IPAddress address);
    public IPAddress MapToIPv4();
    public IPAddress MapToIPv6();
    public static short NetworkToHostOrder(short network);
    public static int NetworkToHostOrder(int network);
    public static long NetworkToHostOrder(long network);
    public static IPAddress Parse(string ipString);
    public virtual string ToString();
    public static bool TryParse(string ipString, IPAddress& address);
}
public class System.Net.IPEndPoint : EndPoint {
    public static int MaxPort;
    public static int MinPort;
    public IPAddress Address { get; public set; }
    public AddressFamily AddressFamily { get; }
    public int Port { get; public set; }
    public IPEndPoint(long address, int port);
    public IPEndPoint(IPAddress address, int port);
    public IPAddress get_Address();
    public void set_Address(IPAddress value);
    public virtual AddressFamily get_AddressFamily();
    public int get_Port();
    public void set_Port(int value);
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual SocketAddress Serialize();
    public virtual string ToString();
}
public interface System.Net.IWebProxy {
    public ICredentials Credentials { get; public set; }
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual Uri GetProxy(Uri destination);
    public abstract virtual bool IsBypassed(Uri host);
}
public class System.Net.NetworkCredential : object {
    public string Domain { get; public set; }
    public string Password { get; public set; }
    public string UserName { get; public set; }
    public NetworkCredential(string userName, string password);
    public NetworkCredential(string userName, string password, string domain);
    public string get_Domain();
    public void set_Domain(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public sealed virtual NetworkCredential GetCredential(string host, int port, string authenticationType);
    public sealed virtual NetworkCredential GetCredential(Uri uri, string authType);
}
[DefaultMemberAttribute("Item")]
public class System.Net.NetworkInformation.IPAddressCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IPAddress Item { get; }
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual IPAddress get_Item(int index);
    public virtual void Add(IPAddress address);
    public virtual void Clear();
    public virtual bool Contains(IPAddress address);
    public virtual void CopyTo(IPAddress[] array, int offset);
    public virtual IEnumerator`1<IPAddress> GetEnumerator();
    public virtual bool Remove(IPAddress address);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.Net.Security.AuthenticationLevel : Enum {
    public int value__;
    public static AuthenticationLevel MutualAuthRequested;
    public static AuthenticationLevel MutualAuthRequired;
    public static AuthenticationLevel None;
}
[FlagsAttribute]
public enum System.Net.Security.SslPolicyErrors : Enum {
    public int value__;
    public static SslPolicyErrors None;
    public static SslPolicyErrors RemoteCertificateChainErrors;
    public static SslPolicyErrors RemoteCertificateNameMismatch;
    public static SslPolicyErrors RemoteCertificateNotAvailable;
}
[DefaultMemberAttribute("Item")]
public class System.Net.SocketAddress : object {
    public AddressFamily Family { get; }
    public byte Item { get; public set; }
    public int Size { get; }
    public SocketAddress(AddressFamily family);
    public SocketAddress(AddressFamily family, int size);
    public AddressFamily get_Family();
    public byte get_Item(int offset);
    public void set_Item(int offset, byte value);
    public int get_Size();
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum System.Net.Sockets.AddressFamily : Enum {
    public int value__;
    public static AddressFamily AppleTalk;
    public static AddressFamily Atm;
    public static AddressFamily Banyan;
    public static AddressFamily Ccitt;
    public static AddressFamily Chaos;
    public static AddressFamily Cluster;
    public static AddressFamily DataKit;
    public static AddressFamily DataLink;
    public static AddressFamily DecNet;
    public static AddressFamily Ecma;
    public static AddressFamily FireFox;
    public static AddressFamily HyperChannel;
    public static AddressFamily Ieee12844;
    public static AddressFamily ImpLink;
    public static AddressFamily InterNetwork;
    public static AddressFamily InterNetworkV6;
    public static AddressFamily Ipx;
    public static AddressFamily Irda;
    public static AddressFamily Iso;
    public static AddressFamily Lat;
    public static AddressFamily NetBios;
    public static AddressFamily NetworkDesigners;
    public static AddressFamily NS;
    public static AddressFamily Osi;
    public static AddressFamily Pup;
    public static AddressFamily Sna;
    public static AddressFamily Unix;
    public static AddressFamily Unknown;
    public static AddressFamily Unspecified;
    public static AddressFamily VoiceView;
}
public enum System.Net.Sockets.SocketError : Enum {
    public int value__;
    public static SocketError AccessDenied;
    public static SocketError AddressAlreadyInUse;
    public static SocketError AddressFamilyNotSupported;
    public static SocketError AddressNotAvailable;
    public static SocketError AlreadyInProgress;
    public static SocketError ConnectionAborted;
    public static SocketError ConnectionRefused;
    public static SocketError ConnectionReset;
    public static SocketError DestinationAddressRequired;
    public static SocketError Disconnecting;
    public static SocketError Fault;
    public static SocketError HostDown;
    public static SocketError HostNotFound;
    public static SocketError HostUnreachable;
    public static SocketError InProgress;
    public static SocketError Interrupted;
    public static SocketError InvalidArgument;
    public static SocketError IOPending;
    public static SocketError IsConnected;
    public static SocketError MessageSize;
    public static SocketError NetworkDown;
    public static SocketError NetworkReset;
    public static SocketError NetworkUnreachable;
    public static SocketError NoBufferSpaceAvailable;
    public static SocketError NoData;
    public static SocketError NoRecovery;
    public static SocketError NotConnected;
    public static SocketError NotInitialized;
    public static SocketError NotSocket;
    public static SocketError OperationAborted;
    public static SocketError OperationNotSupported;
    public static SocketError ProcessLimit;
    public static SocketError ProtocolFamilyNotSupported;
    public static SocketError ProtocolNotSupported;
    public static SocketError ProtocolOption;
    public static SocketError ProtocolType;
    public static SocketError Shutdown;
    public static SocketError SocketError;
    public static SocketError SocketNotSupported;
    public static SocketError Success;
    public static SocketError SystemNotReady;
    public static SocketError TimedOut;
    public static SocketError TooManyOpenSockets;
    public static SocketError TryAgain;
    public static SocketError TypeNotFound;
    public static SocketError VersionNotSupported;
    public static SocketError WouldBlock;
}
public class System.Net.Sockets.SocketException : Exception {
    public string Message { get; }
    public SocketError SocketErrorCode { get; }
    public SocketException(int errorCode);
    public virtual string get_Message();
    public SocketError get_SocketErrorCode();
}
public abstract class System.Net.TransportContext : object {
    public abstract virtual ChannelBinding GetChannelBinding(ChannelBindingKind kind);
}
public enum System.Security.Authentication.CipherAlgorithmType : Enum {
    public int value__;
    public static CipherAlgorithmType Aes;
    public static CipherAlgorithmType Aes128;
    public static CipherAlgorithmType Aes192;
    public static CipherAlgorithmType Aes256;
    public static CipherAlgorithmType Des;
    public static CipherAlgorithmType None;
    public static CipherAlgorithmType Null;
    public static CipherAlgorithmType Rc2;
    public static CipherAlgorithmType Rc4;
    public static CipherAlgorithmType TripleDes;
}
public enum System.Security.Authentication.ExchangeAlgorithmType : Enum {
    public int value__;
    public static ExchangeAlgorithmType DiffieHellman;
    public static ExchangeAlgorithmType None;
    public static ExchangeAlgorithmType RsaKeyX;
    public static ExchangeAlgorithmType RsaSign;
}
public abstract class System.Security.Authentication.ExtendedProtection.ChannelBinding : SafeHandle {
    public int Size { get; }
    protected ChannelBinding(bool ownsHandle);
    public abstract virtual int get_Size();
}
public enum System.Security.Authentication.ExtendedProtection.ChannelBindingKind : Enum {
    public int value__;
    public static ChannelBindingKind Endpoint;
    public static ChannelBindingKind Unique;
    public static ChannelBindingKind Unknown;
}
public enum System.Security.Authentication.HashAlgorithmType : Enum {
    public int value__;
    public static HashAlgorithmType Md5;
    public static HashAlgorithmType None;
    public static HashAlgorithmType Sha1;
}
[FlagsAttribute]
public enum System.Security.Authentication.SslProtocols : Enum {
    public int value__;
    public static SslProtocols None;
    [ObsoleteAttribute("This value has been deprecated.  It is no longer supported. http://go.microsoft.com/fwlink/?linkid=14202")]
public static SslProtocols Ssl2;
    [ObsoleteAttribute("This value has been deprecated.  It is no longer supported. http://go.microsoft.com/fwlink/?linkid=14202")]
public static SslProtocols Ssl3;
    public static SslProtocols Tls;
    public static SslProtocols Tls11;
    public static SslProtocols Tls12;
}
