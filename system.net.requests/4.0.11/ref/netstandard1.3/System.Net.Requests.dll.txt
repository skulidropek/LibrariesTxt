public class System.Net.HttpWebRequest : WebRequest {
    public string Accept { get; public set; }
    public bool AllowReadStreamBuffering { get; public set; }
    public string ContentType { get; public set; }
    public int ContinueTimeout { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool HaveResponse { get; }
    public WebHeaderCollection Headers { get; public set; }
    public string Method { get; public set; }
    public Uri RequestUri { get; }
    public bool SupportsCookieContainer { get; }
    public bool UseDefaultCredentials { get; public set; }
    public string get_Accept();
    public void set_Accept(string value);
    public virtual bool get_AllowReadStreamBuffering();
    public virtual void set_AllowReadStreamBuffering(bool value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public int get_ContinueTimeout();
    public void set_ContinueTimeout(int value);
    public virtual CookieContainer get_CookieContainer();
    public virtual void set_CookieContainer(CookieContainer value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public virtual bool get_HaveResponse();
    public virtual WebHeaderCollection get_Headers();
    public virtual void set_Headers(WebHeaderCollection value);
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual Uri get_RequestUri();
    public virtual bool get_SupportsCookieContainer();
    public virtual bool get_UseDefaultCredentials();
    public virtual void set_UseDefaultCredentials(bool value);
    public virtual void Abort();
    public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    public virtual WebResponse EndGetResponse(IAsyncResult asyncResult);
}
public class System.Net.HttpWebResponse : WebResponse {
    public long ContentLength { get; }
    public string ContentType { get; }
    public CookieCollection Cookies { get; }
    public WebHeaderCollection Headers { get; }
    public string Method { get; }
    public Uri ResponseUri { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public bool SupportsHeaders { get; }
    public virtual long get_ContentLength();
    public virtual string get_ContentType();
    public virtual CookieCollection get_Cookies();
    public virtual WebHeaderCollection get_Headers();
    public virtual string get_Method();
    public virtual Uri get_ResponseUri();
    public virtual HttpStatusCode get_StatusCode();
    public virtual string get_StatusDescription();
    public virtual bool get_SupportsHeaders();
    protected virtual void Dispose(bool disposing);
    public virtual Stream GetResponseStream();
}
public interface System.Net.IWebRequestCreate {
    public abstract virtual WebRequest Create(Uri uri);
}
public class System.Net.ProtocolViolationException : InvalidOperationException {
    public ProtocolViolationException(string message);
}
public class System.Net.WebException : InvalidOperationException {
    public WebResponse Response { get; }
    public WebExceptionStatus Status { get; }
    public WebException(string message);
    public WebException(string message, Exception innerException);
    public WebException(string message, Exception innerException, WebExceptionStatus status, WebResponse response);
    public WebException(string message, WebExceptionStatus status);
    public WebResponse get_Response();
    public WebExceptionStatus get_Status();
}
public enum System.Net.WebExceptionStatus : Enum {
    public int value__;
    public static WebExceptionStatus CacheEntryNotFound;
    public static WebExceptionStatus ConnectFailure;
    public static WebExceptionStatus ConnectionClosed;
    public static WebExceptionStatus KeepAliveFailure;
    public static WebExceptionStatus MessageLengthLimitExceeded;
    public static WebExceptionStatus NameResolutionFailure;
    public static WebExceptionStatus Pending;
    public static WebExceptionStatus PipelineFailure;
    public static WebExceptionStatus ProtocolError;
    public static WebExceptionStatus ProxyNameResolutionFailure;
    public static WebExceptionStatus ReceiveFailure;
    public static WebExceptionStatus RequestCanceled;
    public static WebExceptionStatus RequestProhibitedByCachePolicy;
    public static WebExceptionStatus RequestProhibitedByProxy;
    public static WebExceptionStatus SecureChannelFailure;
    public static WebExceptionStatus SendFailure;
    public static WebExceptionStatus ServerProtocolViolation;
    public static WebExceptionStatus Success;
    public static WebExceptionStatus Timeout;
    public static WebExceptionStatus TrustFailure;
    public static WebExceptionStatus UnknownError;
}
public abstract class System.Net.WebRequest : object {
    public string ContentType { get; public set; }
    public ICredentials Credentials { get; public set; }
    public static IWebProxy DefaultWebProxy { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public string Method { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public Uri RequestUri { get; }
    public bool UseDefaultCredentials { get; public set; }
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public static IWebProxy get_DefaultWebProxy();
    public static void set_DefaultWebProxy(IWebProxy value);
    public abstract virtual WebHeaderCollection get_Headers();
    public abstract virtual void set_Headers(WebHeaderCollection value);
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public virtual IWebProxy get_Proxy();
    public virtual void set_Proxy(IWebProxy value);
    public abstract virtual Uri get_RequestUri();
    public virtual bool get_UseDefaultCredentials();
    public virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual void Abort();
    public abstract virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public static WebRequest Create(string requestUriString);
    public static WebRequest Create(Uri requestUri);
    public static HttpWebRequest CreateHttp(string requestUriString);
    public static HttpWebRequest CreateHttp(Uri requestUri);
    public abstract virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    public abstract virtual WebResponse EndGetResponse(IAsyncResult asyncResult);
    public virtual Task`1<Stream> GetRequestStreamAsync();
    public virtual Task`1<WebResponse> GetResponseAsync();
    public static bool RegisterPrefix(string prefix, IWebRequestCreate creator);
}
public abstract class System.Net.WebResponse : object {
    public long ContentLength { get; }
    public string ContentType { get; }
    public WebHeaderCollection Headers { get; }
    public Uri ResponseUri { get; }
    public bool SupportsHeaders { get; }
    public abstract virtual long get_ContentLength();
    public abstract virtual string get_ContentType();
    public virtual WebHeaderCollection get_Headers();
    public abstract virtual Uri get_ResponseUri();
    public virtual bool get_SupportsHeaders();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual Stream GetResponseStream();
}
