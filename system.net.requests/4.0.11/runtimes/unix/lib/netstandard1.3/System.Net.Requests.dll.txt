internal static class FxResources.System.Net.Requests.SR : object {
}
internal static class Interop : object {
}
internal static class System.Net.HttpKnownHeaderNames : object {
    public static string Accept;
    public static string AcceptCharset;
    public static string AcceptEncoding;
    public static string AcceptLanguage;
    public static string AcceptRanges;
    public static string Age;
    public static string Allow;
    public static string Authorization;
    public static string CacheControl;
    public static string Connection;
    public static string ContentDisposition;
    public static string ContentEncoding;
    public static string ContentLanguage;
    public static string ContentLength;
    public static string ContentLocation;
    public static string ContentMD5;
    public static string ContentRange;
    public static string ContentType;
    public static string Cookie;
    public static string Cookie2;
    public static string Date;
    public static string ETag;
    public static string Expect;
    public static string Expires;
    public static string From;
    public static string Host;
    public static string IfMatch;
    public static string IfModifiedSince;
    public static string IfNoneMatch;
    public static string IfRange;
    public static string IfUnmodifiedSince;
    public static string KeepAlive;
    public static string LastModified;
    public static string Location;
    public static string MaxForwards;
    public static string Origin;
    public static string P3P;
    public static string Pragma;
    public static string ProxyAuthenticate;
    public static string ProxyAuthorization;
    public static string ProxyConnection;
    public static string Range;
    public static string Referer;
    public static string RetryAfter;
    public static string SecWebSocketAccept;
    public static string SecWebSocketExtensions;
    public static string SecWebSocketKey;
    public static string SecWebSocketProtocol;
    public static string SecWebSocketVersion;
    public static string Server;
    public static string SetCookie;
    public static string SetCookie2;
    public static string TE;
    public static string Trailer;
    public static string TransferEncoding;
    public static string Upgrade;
    public static string UserAgent;
    public static string Vary;
    public static string Via;
    public static string WWWAuthenticate;
    public static string Warning;
    public static string XAspNetVersion;
    public static string XPoweredBy;
}
internal static class System.Net.HttpValidationHelpers : object {
    public static bool IsInvalidMethodOrHeaderString(string stringValue);
}
public class System.Net.HttpWebRequest : WebRequest {
    private static int DefaultContinueTimeout;
    private WebHeaderCollection _webHeaderCollection;
    private Uri _requestUri;
    private string _originVerb;
    private int _continueTimeout;
    private bool _allowReadStreamBuffering;
    private CookieContainer _cookieContainer;
    private ICredentials _credentials;
    private IWebProxy _proxy;
    private Task`1<HttpResponseMessage> _sendRequestTask;
    private int _beginGetRequestStreamCalled;
    private int _beginGetResponseCalled;
    private int _endGetRequestStreamCalled;
    private int _endGetResponseCalled;
    private RequestStream _requestStream;
    private TaskCompletionSource`1<Stream> _requestStreamOperation;
    private TaskCompletionSource`1<WebResponse> _responseOperation;
    private AsyncCallback _requestStreamCallback;
    private AsyncCallback _responseCallback;
    private int _abortCalled;
    private CancellationTokenSource _sendRequestCts;
    private static String[] s_wellKnownContentHeaders;
    public string Accept { get; public set; }
    public bool AllowReadStreamBuffering { get; public set; }
    public string ContentType { get; public set; }
    public int ContinueTimeout { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool HaveResponse { get; }
    public WebHeaderCollection Headers { get; public set; }
    public string Method { get; public set; }
    public Uri RequestUri { get; }
    public bool SupportsCookieContainer { get; }
    public bool UseDefaultCredentials { get; public set; }
    public IWebProxy Proxy { get; public set; }
    private bool RequestSubmitted { get; }
    internal HttpWebRequest(Uri uri);
    private static HttpWebRequest();
    private void SetSpecialHeaders(string HeaderName, string value);
    public string get_Accept();
    public void set_Accept(string value);
    public virtual bool get_AllowReadStreamBuffering();
    public virtual void set_AllowReadStreamBuffering(bool value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public int get_ContinueTimeout();
    public void set_ContinueTimeout(int value);
    public virtual CookieContainer get_CookieContainer();
    public virtual void set_CookieContainer(CookieContainer value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public virtual bool get_HaveResponse();
    public virtual WebHeaderCollection get_Headers();
    public virtual void set_Headers(WebHeaderCollection value);
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual Uri get_RequestUri();
    public virtual bool get_SupportsCookieContainer();
    public virtual bool get_UseDefaultCredentials();
    public virtual void set_UseDefaultCredentials(bool value);
    public virtual IWebProxy get_Proxy();
    public virtual void set_Proxy(IWebProxy value);
    public virtual void Abort();
    private Task`1<Stream> GetRequestStream();
    public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    [AsyncStateMachineAttribute("System.Net.HttpWebRequest/<SendRequest>d__63")]
private Task`1<WebResponse> SendRequest();
    public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public virtual WebResponse EndGetResponse(IAsyncResult asyncResult);
    private bool get_RequestSubmitted();
    private void CheckAbort();
    private bool IsWellKnownContentHeader(string header);
}
public class System.Net.HttpWebResponse : WebResponse {
    private HttpResponseMessage _httpResponseMessage;
    private Uri _requestUri;
    private CookieCollection _cookies;
    private WebHeaderCollection _webHeaderCollection;
    public long ContentLength { get; }
    public string ContentType { get; }
    public CookieCollection Cookies { get; }
    public WebHeaderCollection Headers { get; }
    public string Method { get; }
    public Uri ResponseUri { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public bool SupportsHeaders { get; }
    internal HttpWebResponse(HttpResponseMessage _message, Uri requestUri, CookieContainer cookieContainer);
    public virtual long get_ContentLength();
    public virtual string get_ContentType();
    public virtual CookieCollection get_Cookies();
    public virtual WebHeaderCollection get_Headers();
    public virtual string get_Method();
    public virtual Uri get_ResponseUri();
    public virtual HttpStatusCode get_StatusCode();
    public virtual string get_StatusDescription();
    public virtual bool get_SupportsHeaders();
    public virtual Stream GetResponseStream();
    protected virtual void Dispose(bool disposing);
    private void CheckDisposed();
    private string GetHeaderValueAsString(IEnumerable`1<string> values);
}
public interface System.Net.IWebRequestCreate {
    public abstract virtual WebRequest Create(Uri uri);
}
internal static class System.Net.LoggingHash : object {
    internal static string GetObjectName(object obj);
    internal static int HashInt(object objectValue);
    internal static string ObjectToString(object objectValue);
    private static string ExceptionMessage(Exception exception);
    internal static string HashString(object objectValue);
    internal static Object[] GetObjectLogHash(object obj);
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    private static int FunctionStartId;
    private static int FunctionStopId;
    private static int CriticalExceptionId;
    private static int CriticalErrorId;
    private static NetEventSource s_log;
    public static NetEventSource Log { get; }
    private static NetEventSource();
    public static NetEventSource get_Log();
    [NonEventAttribute]
internal static void Enter(ComponentType componentType, object obj, string method, object paramObject);
    [EventAttribute("1")]
internal void FunctionStart(string callerName, int callerHash, string method, string parametersName, int parametersHash, ComponentType componentType);
    [NonEventAttribute]
internal static void Exit(ComponentType componentType, object obj, string method, object retObject);
    [EventAttribute("2")]
internal void FunctionStop(string callerName, int callerHash, string method, string parametersName, int parametersHash, ComponentType componentType);
    [NonEventAttribute]
internal static void Exception(ComponentType componentType, object obj, string method, Exception e);
    [EventAttribute("3")]
internal void CriticalException(string objName, string method, string message, int objHash, string stackTrace, ComponentType componentType);
    [NonEventAttribute]
internal static void PrintError(ComponentType componentType, string msg);
    [NonEventAttribute]
internal static void PrintError(ComponentType componentType, object obj, string method, string msg);
    [EventAttribute("4")]
internal void CriticalError(string message, string method, string objName, int objHash, ComponentType componentType);
}
public class System.Net.ProtocolViolationException : InvalidOperationException {
    public ProtocolViolationException(string message);
}
internal class System.Net.RequestStream : Stream {
    private MemoryStream _buffer;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public ArraySegment`1<byte> GetBuffer();
}
internal class System.Net.SystemWebProxy : object {
    private static IWebProxy s_systemWebProxy;
    private static bool s_systemWebProxyInitialized;
    private static object s_lockObject;
    private ICredentials _credentials;
    public ICredentials Credentials { get; public set; }
    private static SystemWebProxy();
    public static IWebProxy Get();
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual Uri GetProxy(Uri destination);
    public sealed virtual bool IsBypassed(Uri host);
}
[ExtensionAttribute]
internal static class System.Net.TaskExtensions : object {
    [ExtensionAttribute]
public static TaskCompletionSource`1<TResult> ToApm(Task`1<TResult> task, AsyncCallback callback, object state);
}
public class System.Net.WebException : InvalidOperationException {
    private static WebExceptionStatus DefaultStatus;
    private WebExceptionStatus _status;
    private WebResponse _response;
    public WebExceptionStatus Status { get; }
    public WebResponse Response { get; }
    public WebException(string message);
    public WebException(string message, Exception innerException);
    public WebException(string message, WebExceptionStatus status);
    public WebException(string message, Exception innerException, WebExceptionStatus status, WebResponse response);
    public WebExceptionStatus get_Status();
    public WebResponse get_Response();
    internal static Exception CreateCompatibleException(Exception exception);
    internal static WebExceptionStatus GetStatusFromException(HttpRequestException ex);
}
public enum System.Net.WebExceptionStatus : Enum {
    public int value__;
    public static WebExceptionStatus Success;
    public static WebExceptionStatus NameResolutionFailure;
    public static WebExceptionStatus ConnectFailure;
    public static WebExceptionStatus ReceiveFailure;
    public static WebExceptionStatus SendFailure;
    public static WebExceptionStatus PipelineFailure;
    public static WebExceptionStatus RequestCanceled;
    public static WebExceptionStatus ProtocolError;
    public static WebExceptionStatus ConnectionClosed;
    public static WebExceptionStatus TrustFailure;
    public static WebExceptionStatus SecureChannelFailure;
    public static WebExceptionStatus ServerProtocolViolation;
    public static WebExceptionStatus KeepAliveFailure;
    public static WebExceptionStatus Pending;
    public static WebExceptionStatus Timeout;
    public static WebExceptionStatus ProxyNameResolutionFailure;
    public static WebExceptionStatus UnknownError;
    public static WebExceptionStatus MessageLengthLimitExceeded;
    public static WebExceptionStatus CacheEntryNotFound;
    public static WebExceptionStatus RequestProhibitedByCachePolicy;
    public static WebExceptionStatus RequestProhibitedByProxy;
}
public abstract class System.Net.WebRequest : object {
    private static List`1 modreq(System.Runtime.CompilerServices.IsVolatile) s_prefixList;
    private static object s_internalSyncObject;
    private static IWebProxy s_DefaultWebProxy;
    private static bool s_DefaultWebProxyInitialized;
    internal static List`1<WebRequestPrefixElement> PrefixList { get; internal set; }
    public string Method { get; public set; }
    public Uri RequestUri { get; }
    public WebHeaderCollection Headers { get; public set; }
    public string ContentType { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public static IWebProxy DefaultWebProxy { get; public set; }
    public IWebProxy Proxy { get; public set; }
    private static WebRequest();
    private static WebRequest Create(Uri requestUri, bool useUriBase);
    public static WebRequest Create(string requestUriString);
    public static WebRequest Create(Uri requestUri);
    internal static WebRequest CreateDefault(Uri requestUri);
    public static HttpWebRequest CreateHttp(string requestUriString);
    public static HttpWebRequest CreateHttp(Uri requestUri);
    public static bool RegisterPrefix(string prefix, IWebRequestCreate creator);
    internal static List`1<WebRequestPrefixElement> get_PrefixList();
    internal static void set_PrefixList(List`1<WebRequestPrefixElement> value);
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual Uri get_RequestUri();
    public abstract virtual WebHeaderCollection get_Headers();
    public abstract virtual void set_Headers(WebHeaderCollection value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public virtual bool get_UseDefaultCredentials();
    public virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public abstract virtual WebResponse EndGetResponse(IAsyncResult asyncResult);
    public abstract virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public abstract virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    public virtual Task`1<Stream> GetRequestStreamAsync();
    public virtual Task`1<WebResponse> GetResponseAsync();
    public abstract virtual void Abort();
    public static IWebProxy get_DefaultWebProxy();
    public static void set_DefaultWebProxy(IWebProxy value);
    public virtual IWebProxy get_Proxy();
    public virtual void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
private Task`1<Stream> <GetRequestStreamAsync>b__36_0();
    [CompilerGeneratedAttribute]
private Task`1<WebResponse> <GetResponseAsync>b__37_0();
}
public abstract class System.Net.WebResponse : object {
    public long ContentLength { get; }
    public string ContentType { get; }
    public Uri ResponseUri { get; }
    public WebHeaderCollection Headers { get; }
    public bool SupportsHeaders { get; }
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual long get_ContentLength();
    public abstract virtual string get_ContentType();
    public abstract virtual Stream GetResponseStream();
    public abstract virtual Uri get_ResponseUri();
    public virtual WebHeaderCollection get_Headers();
    public virtual bool get_SupportsHeaders();
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string NotSupported { get; }
    internal static string net_unknown_prefix { get; }
    internal static string net_headers_toolong { get; }
    internal static string net_emptystringcall { get; }
    internal static string net_headers_req { get; }
    internal static string net_reqsubmitted { get; }
    internal static string net_io_timeout_use_ge_zero { get; }
    internal static string net_writestarted { get; }
    internal static string net_badmethod { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_servererror { get; }
    internal static string net_reqaborted { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string net_PropertyNotImplementedException { get; }
    internal static string net_nouploadonget { get; }
    internal static string net_repcall { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_NotSupported();
    internal static string get_net_unknown_prefix();
    internal static string get_net_headers_toolong();
    internal static string get_net_emptystringcall();
    internal static string get_net_headers_req();
    internal static string get_net_reqsubmitted();
    internal static string get_net_io_timeout_use_ge_zero();
    internal static string get_net_writestarted();
    internal static string get_net_badmethod();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_servererror();
    internal static string get_net_reqaborted();
    internal static string get_net_MethodNotImplementedException();
    internal static string get_net_PropertyNotImplementedException();
    internal static string get_net_nouploadonget();
    internal static string get_net_repcall();
    internal static Type get_ResourceType();
}
