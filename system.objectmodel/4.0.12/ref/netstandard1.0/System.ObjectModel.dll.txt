[DefaultMemberAttribute("Item")]
public abstract class System.Collections.ObjectModel.KeyedCollection`2 : Collection`1<TItem> {
    public IEqualityComparer`1<TKey> Comparer { get; }
    protected IDictionary`2<TKey, TItem> Dictionary { get; }
    public TItem Item { get; }
    protected KeyedCollection`2(IEqualityComparer`1<TKey> comparer);
    protected KeyedCollection`2(IEqualityComparer`1<TKey> comparer, int dictionaryCreationThreshold);
    public IEqualityComparer`1<TKey> get_Comparer();
    protected IDictionary`2<TKey, TItem> get_Dictionary();
    public TItem get_Item(TKey key);
    protected void ChangeItemKey(TItem item, TKey newKey);
    protected virtual void ClearItems();
    public bool Contains(TKey key);
    protected abstract virtual TKey GetKeyForItem(TItem item);
    protected virtual void InsertItem(int index, TItem item);
    public bool Remove(TKey key);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TItem item);
}
public class System.Collections.ObjectModel.ObservableCollection`1 : Collection`1<T> {
    public ObservableCollection`1(IEnumerable`1<T> collection);
    public virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected IDisposable BlockReentrancy();
    protected void CheckReentrancy();
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, T item);
    public void Move(int oldIndex, int newIndex);
    protected virtual void MoveItem(int oldIndex, int newIndex);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
}
[DefaultMemberAttribute("Item")]
public class System.Collections.ObjectModel.ReadOnlyDictionary`2 : object {
    public int Count { get; }
    protected IDictionary`2<TKey, TValue> Dictionary { get; }
    public TValue Item { get; }
    public KeyCollection<TKey, TValue> Keys { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public ValueCollection<TKey, TValue> Values { get; }
    public ReadOnlyDictionary`2(IDictionary`2<TKey, TValue> dictionary);
    public sealed virtual int get_Count();
    protected IDictionary`2<TKey, TValue> get_Dictionary();
    public sealed virtual TValue get_Item(TKey key);
    public KeyCollection<TKey, TValue> get_Keys();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public ValueCollection<TKey, TValue> get_Values();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
}
public class System.Collections.ObjectModel.ReadOnlyObservableCollection`1 : ReadOnlyCollection`1<T> {
    public ReadOnlyObservableCollection`1(ObservableCollection`1<T> list);
    protected virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
}
public interface System.Collections.Specialized.INotifyCollectionChanged {
    public abstract virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
}
public enum System.Collections.Specialized.NotifyCollectionChangedAction : Enum {
    public int value__;
    public static NotifyCollectionChangedAction Add;
    public static NotifyCollectionChangedAction Move;
    public static NotifyCollectionChangedAction Remove;
    public static NotifyCollectionChangedAction Replace;
    public static NotifyCollectionChangedAction Reset;
}
public class System.Collections.Specialized.NotifyCollectionChangedEventArgs : EventArgs {
    public NotifyCollectionChangedAction Action { get; }
    public IList NewItems { get; }
    public int NewStartingIndex { get; }
    public IList OldItems { get; }
    public int OldStartingIndex { get; }
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index);
    public NotifyCollectionChangedAction get_Action();
    public IList get_NewItems();
    public int get_NewStartingIndex();
    public IList get_OldItems();
    public int get_OldStartingIndex();
}
public class System.Collections.Specialized.NotifyCollectionChangedEventHandler : MulticastDelegate {
    public NotifyCollectionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NotifyCollectionChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NotifyCollectionChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.DataErrorsChangedEventArgs : EventArgs {
    public string PropertyName { get; }
    public DataErrorsChangedEventArgs(string propertyName);
    public virtual string get_PropertyName();
}
public interface System.ComponentModel.INotifyDataErrorInfo {
    public bool HasErrors { get; }
    public abstract virtual bool get_HasErrors();
    public abstract virtual void add_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    public abstract virtual void remove_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    public abstract virtual IEnumerable GetErrors(string propertyName);
}
public interface System.ComponentModel.INotifyPropertyChanged {
    public abstract virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public abstract virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class System.ComponentModel.PropertyChangedEventArgs : EventArgs {
    public string PropertyName { get; }
    public PropertyChangedEventArgs(string propertyName);
    public string get_PropertyName();
}
public class System.ComponentModel.PropertyChangedEventHandler : MulticastDelegate {
    public PropertyChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PropertyChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PropertyChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.Windows.Input.ICommand {
    public abstract virtual void add_CanExecuteChanged(EventHandler value);
    public abstract virtual void remove_CanExecuteChanged(EventHandler value);
    public abstract virtual bool CanExecute(object parameter);
    public abstract virtual void Execute(object parameter);
}
