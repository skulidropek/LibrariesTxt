public class System.Reflection.Emit.DynamicMethod : MethodInfo {
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    public Type DeclaringType { get; }
    public bool InitLocals { get; public set; }
    public string Name { get; }
    public ParameterInfo ReturnParameter { get; }
    public Type ReturnType { get; }
    public MethodImplAttributes MethodImplementationFlags { get; }
    [SecuritySafeCriticalAttribute]
public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility);
    [SecuritySafeCriticalAttribute]
public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);
    [SecuritySafeCriticalAttribute]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes);
    [SecuritySafeCriticalAttribute]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);
    [SecuritySafeCriticalAttribute]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m);
    [SecuritySafeCriticalAttribute]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility);
    [SecuritySafeCriticalAttribute]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner);
    [SecuritySafeCriticalAttribute]
public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);
    public virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    public virtual Type get_DeclaringType();
    public bool get_InitLocals();
    public void set_InitLocals(bool value);
    public virtual string get_Name();
    public virtual ParameterInfo get_ReturnParameter();
    public virtual Type get_ReturnType();
    [SecuritySafeCriticalAttribute]
public sealed virtual Delegate CreateDelegate(Type delegateType);
    [SecuritySafeCriticalAttribute]
public sealed virtual Delegate CreateDelegate(Type delegateType, object target);
    public ILGenerator GetILGenerator();
    [SecuritySafeCriticalAttribute]
public ILGenerator GetILGenerator(int streamSize);
    public virtual ParameterInfo[] GetParameters();
    public virtual string ToString();
    public virtual MethodImplAttributes get_MethodImplementationFlags();
}
