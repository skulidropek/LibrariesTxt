public class System.Reflection.Emit.AssemblyBuilder : Assembly {
    public string FullName { get; }
    public bool IsDynamic { get; }
    public Module ManifestModule { get; }
    public IEnumerable`1<TypeInfo> DefinedTypes { get; }
    public IEnumerable`1<Module> Modules { get; }
    public virtual string get_FullName();
    public virtual bool get_IsDynamic();
    public virtual Module get_ManifestModule();
    public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access);
    public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, IEnumerable`1<CustomAttributeBuilder> assemblyAttributes);
    public ModuleBuilder DefineDynamicModule(string name);
    public virtual bool Equals(object obj);
    public ModuleBuilder GetDynamicModule(string name);
    public virtual int GetHashCode();
    public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName);
    public virtual String[] GetManifestResourceNames();
    public virtual Stream GetManifestResourceStream(string name);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public virtual IEnumerable`1<TypeInfo> get_DefinedTypes();
    public virtual IEnumerable`1<Module> get_Modules();
}
[FlagsAttribute]
public enum System.Reflection.Emit.AssemblyBuilderAccess : Enum {
    public int value__;
    public static AssemblyBuilderAccess Run;
    public static AssemblyBuilderAccess RunAndCollect;
}
public class System.Reflection.Emit.ConstructorBuilder : ConstructorInfo {
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    public Type DeclaringType { get; }
    public bool InitLocals { get; public set; }
    public string Name { get; }
    public MethodImplAttributes MethodImplementationFlags { get; }
    public virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    public virtual Type get_DeclaringType();
    public bool get_InitLocals();
    public void set_InitLocals(bool value);
    public virtual string get_Name();
    public ParameterBuilder DefineParameter(int iSequence, ParameterAttributes attributes, string strParamName);
    public ILGenerator GetILGenerator();
    public ILGenerator GetILGenerator(int streamSize);
    public virtual ParameterInfo[] GetParameters();
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetImplementationFlags(MethodImplAttributes attributes);
    public virtual string ToString();
    public virtual MethodImplAttributes get_MethodImplementationFlags();
}
public class System.Reflection.Emit.EnumBuilder : TypeInfo {
    public string AssemblyQualifiedName { get; }
    public string FullName { get; }
    public string Name { get; }
    public FieldBuilder UnderlyingField { get; }
    public TypeAttributes Attributes { get; }
    public Assembly Assembly { get; }
    public Type BaseType { get; }
    public Module Module { get; }
    public Type[] GenericTypeArguments { get; }
    public bool ContainsGenericParameters { get; }
    public MethodBase DeclaringMethod { get; }
    public GenericParameterAttributes GenericParameterAttributes { get; }
    public int GenericParameterPosition { get; }
    public Guid GUID { get; }
    public bool IsEnum { get; }
    public bool IsGenericParameter { get; }
    public bool IsGenericType { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsSerializable { get; }
    public string Namespace { get; }
    public Type DeclaringType { get; }
    public virtual string get_AssemblyQualifiedName();
    public virtual string get_FullName();
    public virtual string get_Name();
    public FieldBuilder get_UnderlyingField();
    public TypeInfo CreateTypeInfo();
    public FieldBuilder DefineLiteral(string literalName, object literalValue);
    public virtual bool IsAssignableFrom(TypeInfo typeInfo);
    public virtual Type MakeArrayType();
    public virtual Type MakeArrayType(int rank);
    public virtual Type MakeByRefType();
    public virtual Type MakePointerType();
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public virtual TypeAttributes get_Attributes();
    public virtual Assembly get_Assembly();
    public virtual Type get_BaseType();
    public virtual Module get_Module();
    public virtual int GetArrayRank();
    public virtual Type GetElementType();
    public virtual Type[] GetGenericParameterConstraints();
    public virtual Type[] get_GenericTypeArguments();
    public virtual Type GetGenericTypeDefinition();
    public virtual bool get_ContainsGenericParameters();
    public virtual MethodBase get_DeclaringMethod();
    public virtual GenericParameterAttributes get_GenericParameterAttributes();
    public virtual int get_GenericParameterPosition();
    public virtual Guid get_GUID();
    public virtual bool get_IsEnum();
    public virtual bool get_IsGenericParameter();
    public virtual bool get_IsGenericType();
    public virtual bool get_IsGenericTypeDefinition();
    public virtual bool get_IsSerializable();
    public virtual string get_Namespace();
    public virtual Type MakeGenericType(Type[] typeArguments);
    public virtual Type get_DeclaringType();
}
public class System.Reflection.Emit.EventBuilder : object {
    public void AddOtherMethod(MethodBuilder mdBuilder);
    public void SetAddOnMethod(MethodBuilder mdBuilder);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetRaiseMethod(MethodBuilder mdBuilder);
    public void SetRemoveOnMethod(MethodBuilder mdBuilder);
}
public class System.Reflection.Emit.FieldBuilder : FieldInfo {
    public FieldAttributes Attributes { get; }
    public Type DeclaringType { get; }
    public Type FieldType { get; }
    public string Name { get; }
    public virtual FieldAttributes get_Attributes();
    public virtual Type get_DeclaringType();
    public virtual Type get_FieldType();
    public virtual string get_Name();
    public virtual object GetValue(object obj);
    public void SetConstant(object defaultValue);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetOffset(int iOffset);
}
public class System.Reflection.Emit.GenericTypeParameterBuilder : TypeInfo {
    public string AssemblyQualifiedName { get; }
    public string FullName { get; }
    public bool IsGenericParameter { get; }
    public string Name { get; }
    public TypeAttributes Attributes { get; }
    public Assembly Assembly { get; }
    public Type BaseType { get; }
    public MethodBase DeclaringMethod { get; }
    public GenericParameterAttributes GenericParameterAttributes { get; }
    public Module Module { get; }
    public Type[] GenericTypeArguments { get; }
    public bool ContainsGenericParameters { get; }
    public int GenericParameterPosition { get; }
    public Guid GUID { get; }
    public bool IsEnum { get; }
    public bool IsGenericType { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsSerializable { get; }
    public string Namespace { get; }
    public Type DeclaringType { get; }
    public virtual string get_AssemblyQualifiedName();
    public virtual string get_FullName();
    public virtual bool get_IsGenericParameter();
    public virtual string get_Name();
    public virtual bool Equals(object o);
    public virtual Type GetGenericTypeDefinition();
    public virtual int GetHashCode();
    public virtual bool IsAssignableFrom(TypeInfo typeInfo);
    public virtual Type MakeArrayType();
    public virtual Type MakeArrayType(int rank);
    public virtual Type MakeByRefType();
    public virtual Type MakeGenericType(Type[] typeArguments);
    public virtual Type MakePointerType();
    public void SetBaseTypeConstraint(Type baseTypeConstraint);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetGenericParameterAttributes(GenericParameterAttributes genericParameterAttributes);
    public void SetInterfaceConstraints(Type[] interfaceConstraints);
    public virtual string ToString();
    public virtual bool IsSubclassOf(Type c);
    public virtual TypeAttributes get_Attributes();
    public virtual Assembly get_Assembly();
    public virtual Type get_BaseType();
    public virtual MethodBase get_DeclaringMethod();
    public virtual GenericParameterAttributes get_GenericParameterAttributes();
    public virtual Module get_Module();
    public virtual int GetArrayRank();
    public virtual Type GetElementType();
    public virtual Type[] GetGenericParameterConstraints();
    public virtual Type[] get_GenericTypeArguments();
    public virtual bool get_ContainsGenericParameters();
    public virtual int get_GenericParameterPosition();
    public virtual Guid get_GUID();
    public virtual bool get_IsEnum();
    public virtual bool get_IsGenericType();
    public virtual bool get_IsGenericTypeDefinition();
    public virtual bool get_IsSerializable();
    public virtual string get_Namespace();
    public virtual Type get_DeclaringType();
}
public class System.Reflection.Emit.MethodBuilder : MethodInfo {
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    public bool ContainsGenericParameters { get; }
    public Type DeclaringType { get; }
    public bool InitLocals { get; public set; }
    public bool IsGenericMethod { get; }
    public bool IsGenericMethodDefinition { get; }
    public string Name { get; }
    public ParameterInfo ReturnParameter { get; }
    public Type ReturnType { get; }
    public MethodImplAttributes MethodImplementationFlags { get; }
    public virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    public virtual bool get_ContainsGenericParameters();
    public virtual Type get_DeclaringType();
    public bool get_InitLocals();
    public void set_InitLocals(bool value);
    public virtual bool get_IsGenericMethod();
    public virtual bool get_IsGenericMethodDefinition();
    public virtual string get_Name();
    public virtual ParameterInfo get_ReturnParameter();
    public virtual Type get_ReturnType();
    public GenericTypeParameterBuilder[] DefineGenericParameters(String[] names);
    public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName);
    public virtual bool Equals(object obj);
    public virtual Type[] GetGenericArguments();
    public virtual MethodInfo GetGenericMethodDefinition();
    public virtual int GetHashCode();
    public ILGenerator GetILGenerator();
    public ILGenerator GetILGenerator(int size);
    public virtual ParameterInfo[] GetParameters();
    public virtual MethodInfo MakeGenericMethod(Type[] typeArguments);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetImplementationFlags(MethodImplAttributes attributes);
    public void SetParameters(Type[] parameterTypes);
    public void SetReturnType(Type returnType);
    public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public virtual string ToString();
    public virtual MethodImplAttributes get_MethodImplementationFlags();
}
public class System.Reflection.Emit.ModuleBuilder : Module {
    public Assembly Assembly { get; }
    public string FullyQualifiedName { get; }
    public string Name { get; }
    public virtual Assembly get_Assembly();
    public virtual string get_FullyQualifiedName();
    public virtual string get_Name();
    public void CreateGlobalFunctions();
    public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType);
    public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);
    public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    public FieldBuilder DefineInitializedData(string name, Byte[] data, FieldAttributes attributes);
    public TypeBuilder DefineType(string name);
    public TypeBuilder DefineType(string name, TypeAttributes attr);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize);
    public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces);
    public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes);
    public virtual bool Equals(object obj);
    public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public virtual int GetHashCode();
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
}
public class System.Reflection.Emit.PropertyBuilder : PropertyInfo {
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public Type DeclaringType { get; }
    public string Name { get; }
    public Type PropertyType { get; }
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual Type get_DeclaringType();
    public virtual string get_Name();
    public virtual Type get_PropertyType();
    public void AddOtherMethod(MethodBuilder mdBuilder);
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual object GetValue(object obj, Object[] index);
    public void SetConstant(object defaultValue);
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetGetMethod(MethodBuilder mdBuilder);
    public void SetSetMethod(MethodBuilder mdBuilder);
    public virtual void SetValue(object obj, object value, Object[] index);
}
public class System.Reflection.Emit.TypeBuilder : TypeInfo {
    public static int UnspecifiedTypeSize;
    public string AssemblyQualifiedName { get; }
    public string FullName { get; }
    public bool IsGenericParameter { get; }
    public string Name { get; }
    public PackingSize PackingSize { get; }
    public int Size { get; }
    public TypeAttributes Attributes { get; }
    public Assembly Assembly { get; }
    public Type BaseType { get; }
    public MethodBase DeclaringMethod { get; }
    public GenericParameterAttributes GenericParameterAttributes { get; }
    public Module Module { get; }
    public Type[] GenericTypeArguments { get; }
    public bool ContainsGenericParameters { get; }
    public int GenericParameterPosition { get; }
    public Guid GUID { get; }
    public bool IsEnum { get; }
    public bool IsGenericType { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsSerializable { get; }
    public string Namespace { get; }
    public Type DeclaringType { get; }
    public virtual string get_AssemblyQualifiedName();
    public virtual string get_FullName();
    public virtual bool get_IsGenericParameter();
    public virtual string get_Name();
    public PackingSize get_PackingSize();
    public int get_Size();
    public void AddInterfaceImplementation(Type interfaceType);
    public TypeInfo CreateTypeInfo();
    public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes);
    public ConstructorBuilder DefineConstructor(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);
    public ConstructorBuilder DefineDefaultConstructor(MethodAttributes attributes);
    public EventBuilder DefineEvent(string name, EventAttributes attributes, Type eventtype);
    public FieldBuilder DefineField(string fieldName, Type type, FieldAttributes attributes);
    public FieldBuilder DefineField(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes);
    public GenericTypeParameterBuilder[] DefineGenericParameters(String[] names);
    public FieldBuilder DefineInitializedData(string name, Byte[] data, FieldAttributes attributes);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public MethodBuilder DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    public void DefineMethodOverride(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration);
    public TypeBuilder DefineNestedType(string name);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, int typeSize);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, PackingSize packSize, int typeSize);
    public TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces);
    public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] parameterTypes);
    public PropertyBuilder DefineProperty(string name, PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public ConstructorBuilder DefineTypeInitializer();
    public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes);
    public static ConstructorInfo GetConstructor(Type type, ConstructorInfo constructor);
    public static FieldInfo GetField(Type type, FieldInfo field);
    public virtual Type GetGenericTypeDefinition();
    public static MethodInfo GetMethod(Type type, MethodInfo method);
    public virtual bool IsAssignableFrom(TypeInfo typeInfo);
    public bool IsCreated();
    public virtual Type MakeArrayType();
    public virtual Type MakeArrayType(int rank);
    public virtual Type MakeByRefType();
    public virtual Type MakeGenericType(Type[] typeArguments);
    public virtual Type MakePointerType();
    public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    public void SetParent(Type parent);
    public virtual string ToString();
    public virtual TypeAttributes get_Attributes();
    public virtual Assembly get_Assembly();
    public virtual Type get_BaseType();
    public virtual MethodBase get_DeclaringMethod();
    public virtual GenericParameterAttributes get_GenericParameterAttributes();
    public virtual Module get_Module();
    public virtual int GetArrayRank();
    public virtual Type GetElementType();
    public virtual Type[] GetGenericParameterConstraints();
    public virtual Type[] get_GenericTypeArguments();
    public virtual bool get_ContainsGenericParameters();
    public virtual int get_GenericParameterPosition();
    public virtual Guid get_GUID();
    public virtual bool get_IsEnum();
    public virtual bool get_IsGenericType();
    public virtual bool get_IsGenericTypeDefinition();
    public virtual bool get_IsSerializable();
    public virtual string get_Namespace();
    public virtual Type get_DeclaringType();
}
