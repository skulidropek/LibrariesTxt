internal static class FxResources.System.Reflection.TypeExtensions.SR : object {
}
public static class System.Reflection.AssemblyExtensions : object {
    public static Type[] GetExportedTypes(Assembly assembly);
    public static Module[] GetModules(Assembly assembly);
    public static Type[] GetTypes(Assembly assembly);
}
public static class System.Reflection.EventInfoExtensions : object {
    public static MethodInfo GetAddMethod(EventInfo eventInfo);
    public static MethodInfo GetAddMethod(EventInfo eventInfo, bool nonPublic);
    public static MethodInfo GetRaiseMethod(EventInfo eventInfo);
    public static MethodInfo GetRaiseMethod(EventInfo eventInfo, bool nonPublic);
    public static MethodInfo GetRemoveMethod(EventInfo eventInfo);
    public static MethodInfo GetRemoveMethod(EventInfo eventInfo, bool nonPublic);
}
public static class System.Reflection.MethodInfoExtensions : object {
    public static MethodInfo GetBaseDefinition(MethodInfo method);
}
public static class System.Reflection.PropertyInfoExtensions : object {
    public static MethodInfo[] GetAccessors(PropertyInfo property);
    public static MethodInfo[] GetAccessors(PropertyInfo property, bool nonPublic);
    public static MethodInfo GetGetMethod(PropertyInfo property);
    public static MethodInfo GetGetMethod(PropertyInfo property, bool nonPublic);
    public static MethodInfo GetSetMethod(PropertyInfo property);
    public static MethodInfo GetSetMethod(PropertyInfo property, bool nonPublic);
}
internal static class System.Reflection.Requires : object {
    internal static void NotNull(object obj, string name);
}
public static class System.Reflection.TypeExtensions : object {
    public static ConstructorInfo GetConstructor(Type type, Type[] types);
    public static ConstructorInfo[] GetConstructors(Type type);
    public static ConstructorInfo[] GetConstructors(Type type, BindingFlags bindingAttr);
    public static MemberInfo[] GetDefaultMembers(Type type);
    public static EventInfo GetEvent(Type type, string name);
    public static EventInfo GetEvent(Type type, string name, BindingFlags bindingAttr);
    public static EventInfo[] GetEvents(Type type);
    public static EventInfo[] GetEvents(Type type, BindingFlags bindingAttr);
    public static FieldInfo GetField(Type type, string name);
    public static FieldInfo GetField(Type type, string name, BindingFlags bindingAttr);
    public static FieldInfo[] GetFields(Type type);
    public static FieldInfo[] GetFields(Type type, BindingFlags bindingAttr);
    public static Type[] GetGenericArguments(Type type);
    public static Type[] GetInterfaces(Type type);
    public static MemberInfo[] GetMember(Type type, string name);
    public static MemberInfo[] GetMember(Type type, string name, BindingFlags bindingAttr);
    public static MemberInfo[] GetMembers(Type type);
    public static MemberInfo[] GetMembers(Type type, BindingFlags bindingAttr);
    public static MethodInfo GetMethod(Type type, string name);
    public static MethodInfo GetMethod(Type type, string name, BindingFlags bindingAttr);
    public static MethodInfo GetMethod(Type type, string name, Type[] types);
    public static MethodInfo[] GetMethods(Type type);
    public static MethodInfo[] GetMethods(Type type, BindingFlags bindingAttr);
    public static Type GetNestedType(Type type, string name, BindingFlags bindingAttr);
    public static Type[] GetNestedTypes(Type type, BindingFlags bindingAttr);
    public static PropertyInfo[] GetProperties(Type type);
    public static PropertyInfo[] GetProperties(Type type, BindingFlags bindingAttr);
    public static PropertyInfo GetProperty(Type type, string name);
    public static PropertyInfo GetProperty(Type type, string name, BindingFlags bindingAttr);
    public static PropertyInfo GetProperty(Type type, string name, Type returnType);
    public static PropertyInfo GetProperty(Type type, string name, Type returnType, Type[] types);
    public static bool IsAssignableFrom(Type type, Type c);
    public static bool IsInstanceOfType(Type type, object o);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_AmbiguousMatchException { get; }
    internal static string Arg_EmptyArray { get; }
    internal static string Arg_GetMethNotFnd { get; }
    internal static string Arg_SetMethNotFnd { get; }
    internal static string MissingMember { get; }
    internal static string TypeIsNotReflectable { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_AmbiguousMatchException();
    internal static string get_Arg_EmptyArray();
    internal static string get_Arg_GetMethNotFnd();
    internal static string get_Arg_SetMethNotFnd();
    internal static string get_MissingMember();
    internal static string get_TypeIsNotReflectable();
    internal static Type get_ResourceType();
}
