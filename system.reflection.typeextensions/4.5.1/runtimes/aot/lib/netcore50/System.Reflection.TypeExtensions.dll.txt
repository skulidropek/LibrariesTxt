internal class __DynamicallyInvokableAttribute : Attribute {
}
internal static class FxResources.System.Reflection.TypeExtensions.SR : object {
}
internal static class Internal.Reflection.Core.Execution.Binder.DefaultBinder : object {
    private static Primitives[] _primitiveConversions;
    private static DefaultBinder();
    public static MethodBase BindToMethod(MethodBase[] match, Object[]& args);
    public static MethodBase SelectMethod(MethodBase[] match, Type[] types);
    private static bool HasParamArrayAttribute(ParameterInfo parameterInfo);
    private static int FindMostSpecific(ParameterInfo[] p1, Int32[] paramOrder1, Type paramArrayType1, ParameterInfo[] p2, Int32[] paramOrder2, Type paramArrayType2, Type[] types, Object[] args);
    private static int FindMostSpecificType(Type c1, Type c2, Type t);
    public static PropertyInfo SelectProperty(PropertyInfo[] match, Type returnType, Type[] indexes);
    private static int FindMostSpecificMethod(MethodBase m1, Int32[] paramOrder1, Type paramArrayType1, MethodBase m2, Int32[] paramOrder2, Type paramArrayType2, Type[] types, Object[] args);
    private static int FindMostSpecificProperty(PropertyInfo cur1, PropertyInfo cur2);
    private static bool CompareMethodSigAndName(MethodBase m1, MethodBase m2);
    private static int GetHierarchyDepth(Type t);
    private static bool CanConvertPrimitive(Type source, Type target);
    private static bool CanConvertPrimitiveObjectToType(object source, Type type);
    private static bool CanPrimitiveWiden(Type source, Type target);
    private static TypeCode GetTypeCode(Type type);
}
internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
internal class Internal.Reflection.Extensions.NonPortable.ConstructorPolicies : MemberPolicies`1<ConstructorInfo> {
    public sealed virtual IEnumerable`1<ConstructorInfo> GetDeclaredMembers(TypeInfo typeInfo);
    public sealed virtual BindingFlags ModifyBindingFlags(BindingFlags bindingFlags);
    public sealed virtual void GetMemberAttributes(ConstructorInfo member, MethodAttributes& visibility, Boolean& isStatic, Boolean& isVirtual, Boolean& isNewSlot);
    public sealed virtual bool AreNamesAndSignatureEqual(ConstructorInfo member1, ConstructorInfo member2);
}
internal class Internal.Reflection.Extensions.NonPortable.EventPolicies : MemberPolicies`1<EventInfo> {
    public sealed virtual IEnumerable`1<EventInfo> GetDeclaredMembers(TypeInfo typeInfo);
    public sealed virtual void GetMemberAttributes(EventInfo member, MethodAttributes& visibility, Boolean& isStatic, Boolean& isVirtual, Boolean& isNewSlot);
    public sealed virtual bool AreNamesAndSignatureEqual(EventInfo member1, EventInfo member2);
    private MethodInfo GetAccessorMethod(EventInfo e);
}
internal class Internal.Reflection.Extensions.NonPortable.FieldPolicies : MemberPolicies`1<FieldInfo> {
    public sealed virtual IEnumerable`1<FieldInfo> GetDeclaredMembers(TypeInfo typeInfo);
    public sealed virtual void GetMemberAttributes(FieldInfo member, MethodAttributes& visibility, Boolean& isStatic, Boolean& isVirtual, Boolean& isNewSlot);
    public sealed virtual bool AreNamesAndSignatureEqual(FieldInfo member1, FieldInfo member2);
}
internal class Internal.Reflection.Extensions.NonPortable.InheritedPropertyInfo : ExtensiblePropertyInfo {
    private PropertyInfo _underlyingPropertyInfo;
    private Type _reflectedType;
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public Type PropertyType { get; }
    public Type DeclaringType { get; }
    public string Name { get; }
    public IEnumerable`1<CustomAttributeData> CustomAttributes { get; }
    public MethodInfo GetMethod { get; }
    public Module Module { get; }
    public MethodInfo SetMethod { get; }
    internal InheritedPropertyInfo(PropertyInfo underlyingPropertyInfo, Type reflectedType);
    public sealed virtual PropertyAttributes get_Attributes();
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanWrite();
    public sealed virtual ParameterInfo[] GetIndexParameters();
    public sealed virtual Type get_PropertyType();
    public sealed virtual Type get_DeclaringType();
    public sealed virtual string get_Name();
    public sealed virtual IEnumerable`1<CustomAttributeData> get_CustomAttributes();
    public sealed virtual bool Equals(object obj);
    public sealed virtual int GetHashCode();
    public sealed virtual object GetConstantValue();
    public sealed virtual MethodInfo get_GetMethod();
    public sealed virtual object GetValue(object obj, Object[] index);
    public sealed virtual Module get_Module();
    public sealed virtual string ToString();
    public sealed virtual MethodInfo get_SetMethod();
    public sealed virtual void SetValue(object obj, object value, Object[] index);
    private MethodInfo Filter(MethodInfo accessor);
}
[ExtensionAttribute]
[__BlockReflectionAttribute]
public static class Internal.Reflection.Extensions.NonPortable.MemberEnumerator : object {
    public static object AnyName;
    private static MemberEnumerator();
    [ExtensionAttribute]
public static IEnumerable`1<M> GetMembers(Type type, object nameFilterOrAnyName, BindingFlags bindingFlags);
    [IteratorStateMachineAttribute("Internal.Reflection.Extensions.NonPortable.MemberEnumerator/<GetMembersWorker>d__1`1")]
private static IEnumerable`1<M> GetMembersWorker(Type type, string optionalNameFilter, BindingFlags bindingFlags);
    [ExtensionAttribute]
public static M GetImplicitlyOverriddenBaseClassMember(M member);
}
internal abstract class Internal.Reflection.Extensions.NonPortable.MemberPolicies`1 : object {
    private static MemberPolicies`1 modreq(System.Runtime.CompilerServices.IsVolatile) _default;
    public static MemberPolicies`1<M> Default { get; }
    public abstract virtual IEnumerable`1<M> GetDeclaredMembers(TypeInfo typeInfo);
    public abstract virtual void GetMemberAttributes(M member, MethodAttributes& visibility, Boolean& isStatic, Boolean& isVirtual, Boolean& isNewSlot);
    public abstract virtual bool AreNamesAndSignatureEqual(M member1, M member2);
    public virtual BindingFlags ModifyBindingFlags(BindingFlags bindingFlags);
    public virtual M GetInheritedMemberInfo(M underlyingMemberInfo, Type reflectedType);
    protected static bool AreNamesAndSignaturesEqual(MethodInfo method1, MethodInfo method2);
    public static MemberPolicies`1<M> get_Default();
}
internal class Internal.Reflection.Extensions.NonPortable.MethodPolicies : MemberPolicies`1<MethodInfo> {
    public sealed virtual IEnumerable`1<MethodInfo> GetDeclaredMembers(TypeInfo typeInfo);
    public sealed virtual void GetMemberAttributes(MethodInfo member, MethodAttributes& visibility, Boolean& isStatic, Boolean& isVirtual, Boolean& isNewSlot);
    public sealed virtual bool AreNamesAndSignatureEqual(MethodInfo member1, MethodInfo member2);
}
internal class Internal.Reflection.Extensions.NonPortable.NestedTypePolicies : MemberPolicies`1<TypeInfo> {
    public sealed virtual IEnumerable`1<TypeInfo> GetDeclaredMembers(TypeInfo typeInfo);
    public sealed virtual void GetMemberAttributes(TypeInfo member, MethodAttributes& visibility, Boolean& isStatic, Boolean& isVirtual, Boolean& isNewSlot);
    public sealed virtual bool AreNamesAndSignatureEqual(TypeInfo member1, TypeInfo member2);
    public sealed virtual BindingFlags ModifyBindingFlags(BindingFlags bindingFlags);
}
internal class Internal.Reflection.Extensions.NonPortable.PropertyPolicies : MemberPolicies`1<PropertyInfo> {
    public sealed virtual IEnumerable`1<PropertyInfo> GetDeclaredMembers(TypeInfo typeInfo);
    public sealed virtual void GetMemberAttributes(PropertyInfo member, MethodAttributes& visibility, Boolean& isStatic, Boolean& isVirtual, Boolean& isNewSlot);
    public sealed virtual bool AreNamesAndSignatureEqual(PropertyInfo member1, PropertyInfo member2);
    public sealed virtual PropertyInfo GetInheritedMemberInfo(PropertyInfo underlyingMemberInfo, Type reflectedType);
    private MethodInfo GetAccessorMethod(PropertyInfo property);
}
internal static class System.ArrayT`1 : object {
    public static void Copy(T[] sourceArray, int sourceIndex, T[] destinationArray, int destinationIndex, int length);
    public static T[] Resize(T[] src, int newLength, int copyCount);
    public static void Clear(T[] array, int index, int length);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class System.Collections.Generic.LowLevelList`1 : object {
    private static int _defaultCapacity;
    protected T[] _items;
    protected int _size;
    protected int _version;
    private static T[] s_emptyArray;
    public int Capacity { get; public set; }
    public int Count { get; }
    public T Item { get; public set; }
    public LowLevelList`1(int capacity);
    public LowLevelList`1(IEnumerable`1<T> collection);
    private static LowLevelList`1();
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    private void EnsureCapacity(int min);
    public void AddRange(IEnumerable`1<T> collection);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public void CopyTo(int index, T[] array, int arrayIndex, int count);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int IndexOf(T item);
    public int IndexOf(T item, int index);
    public sealed virtual void Insert(int index, T item);
    public void InsertRange(int index, IEnumerable`1<T> collection);
    public sealed virtual bool Remove(T item);
    public int RemoveAll(Predicate`1<T> match);
    public sealed virtual void RemoveAt(int index);
    public T[] ToArray();
}
internal class System.Collections.Generic.LowLevelListWithIList`1 : LowLevelList`1<T> {
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    public LowLevelListWithIList`1(int capacity);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
public static class System.Reflection.AssemblyExtensions : object {
    [ExtensionAttribute]
public static Type[] GetExportedTypes(Assembly assembly);
    [ExtensionAttribute]
public static Module[] GetModules(Assembly assembly);
    [ExtensionAttribute]
public static Type[] GetTypes(Assembly assembly);
}
[FlagsAttribute]
[__DynamicallyInvokableAttribute]
public enum System.Reflection.BindingFlags : Enum {
    public int value__;
    [__DynamicallyInvokableAttribute]
public static BindingFlags IgnoreCase;
    [__DynamicallyInvokableAttribute]
public static BindingFlags DeclaredOnly;
    [__DynamicallyInvokableAttribute]
public static BindingFlags Instance;
    [__DynamicallyInvokableAttribute]
public static BindingFlags Static;
    [__DynamicallyInvokableAttribute]
public static BindingFlags Public;
    [__DynamicallyInvokableAttribute]
public static BindingFlags NonPublic;
    [__DynamicallyInvokableAttribute]
public static BindingFlags FlattenHierarchy;
    [__DynamicallyInvokableAttribute]
public static BindingFlags ExactBinding;
    [__DynamicallyInvokableAttribute]
public static BindingFlags OptionalParamBinding;
}
[ExtensionAttribute]
public static class System.Reflection.EventInfoExtensions : object {
    [ExtensionAttribute]
public static MethodInfo GetAddMethod(EventInfo eventInfo);
    [ExtensionAttribute]
public static MethodInfo GetAddMethod(EventInfo eventInfo, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetRaiseMethod(EventInfo eventInfo);
    [ExtensionAttribute]
public static MethodInfo GetRaiseMethod(EventInfo eventInfo, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetRemoveMethod(EventInfo eventInfo);
    [ExtensionAttribute]
public static MethodInfo GetRemoveMethod(EventInfo eventInfo, bool nonPublic);
}
internal static class System.Reflection.Helpers : object {
    internal static BindingFlags DefaultLookup;
    internal static MethodInfo[] EmptyMethodArray;
    internal static Type[] EmptyTypeArray;
    internal static MemberInfo[] EmptyMemberArray;
    private static Helpers();
    internal static MethodInfo FilterAccessor(MethodInfo accessor, bool nonPublic);
}
[ExtensionAttribute]
public static class System.Reflection.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static MethodInfo GetBaseDefinition(MethodInfo method);
}
[ExtensionAttribute]
public static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static MethodInfo[] GetAccessors(PropertyInfo property);
    [ExtensionAttribute]
public static MethodInfo[] GetAccessors(PropertyInfo property, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetGetMethod(PropertyInfo property);
    [ExtensionAttribute]
public static MethodInfo GetGetMethod(PropertyInfo property, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetSetMethod(PropertyInfo property);
    [ExtensionAttribute]
public static MethodInfo GetSetMethod(PropertyInfo property, bool nonPublic);
}
internal static class System.Reflection.Requires : object {
    internal static void NotNull(object obj, string name);
}
[ExtensionAttribute]
public static class System.Reflection.TypeExtensions : object {
    [ExtensionAttribute]
public static ConstructorInfo GetConstructor(Type type, Type[] types);
    [ExtensionAttribute]
public static ConstructorInfo[] GetConstructors(Type type);
    [ExtensionAttribute]
public static ConstructorInfo[] GetConstructors(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static MemberInfo[] GetDefaultMembers(Type type);
    [ExtensionAttribute]
public static EventInfo GetEvent(Type type, string name);
    [ExtensionAttribute]
public static EventInfo GetEvent(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static EventInfo[] GetEvents(Type type);
    [ExtensionAttribute]
public static EventInfo[] GetEvents(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, string name);
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static FieldInfo[] GetFields(Type type);
    [ExtensionAttribute]
public static FieldInfo[] GetFields(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
public static Type[] GetInterfaces(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetMember(Type type, string name);
    [ExtensionAttribute]
public static MemberInfo[] GetMember(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static MemberInfo[] GetMembers(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetMembers(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string name, Type[] types);
    [ExtensionAttribute]
public static MethodInfo[] GetMethods(Type type);
    [ExtensionAttribute]
public static MethodInfo[] GetMethods(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static Type GetNestedType(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static Type[] GetNestedTypes(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name, Type returnType);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name, Type returnType, Type[] types);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type, Type c);
    [ExtensionAttribute]
public static bool IsInstanceOfType(Type type, object o);
    private static LowLevelList`1<MemberInfo> GetMembers(Type type, object nameFilterOrAnyName, BindingFlags bindingAttr);
    private static string GetDefaultMemberName(TypeInfo typeInfo);
    private static CustomAttributeData GetDefaultMemberAttribute(TypeInfo typeInfo);
    private static TypeInfo GetTypeInfoOrThrow(Type type, string parameterName);
    private static T Disambiguate(IEnumerable`1<T> members);
    private static T Disambiguate(IEnumerable`1<T> members, Type[] parameterTypes);
    private static PropertyInfo Disambiguate(IEnumerable`1<PropertyInfo> members, Type returnType, Type[] parameterTypes);
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_AmbiguousMatchException { get; }
    internal static string Arg_EmptyArray { get; }
    internal static string Arg_GetMethNotFnd { get; }
    internal static string Arg_SetMethNotFnd { get; }
    internal static string MissingMember { get; }
    internal static string TypeIsNotReflectable { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_AmbiguousMatchException();
    internal static string get_Arg_EmptyArray();
    internal static string get_Arg_GetMethNotFnd();
    internal static string get_Arg_SetMethNotFnd();
    internal static string get_MissingMember();
    internal static string get_TypeIsNotReflectable();
    internal static Type get_ResourceType();
}
