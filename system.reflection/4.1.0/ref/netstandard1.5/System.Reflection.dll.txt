public class System.Reflection.AmbiguousMatchException : Exception {
    public AmbiguousMatchException(string message);
    public AmbiguousMatchException(string message, Exception inner);
}
public abstract class System.Reflection.Assembly : object {
    public IEnumerable`1<CustomAttributeData> CustomAttributes { get; }
    public IEnumerable`1<TypeInfo> DefinedTypes { get; }
    public IEnumerable`1<Type> ExportedTypes { get; }
    public MethodInfo EntryPoint { get; }
    public string FullName { get; }
    public bool IsDynamic { get; }
    public Module ManifestModule { get; }
    public IEnumerable`1<Module> Modules { get; }
    public string Location { get; }
    public string CodeBase { get; }
    public string ImageRuntimeVersion { get; }
    public virtual IEnumerable`1<CustomAttributeData> get_CustomAttributes();
    public abstract virtual IEnumerable`1<TypeInfo> get_DefinedTypes();
    public virtual IEnumerable`1<Type> get_ExportedTypes();
    public virtual MethodInfo get_EntryPoint();
    public virtual string get_FullName();
    public virtual bool get_IsDynamic();
    public virtual Module get_ManifestModule();
    public abstract virtual IEnumerable`1<Module> get_Modules();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual ManifestResourceInfo GetManifestResourceInfo(string resourceName);
    public virtual String[] GetManifestResourceNames();
    public virtual Stream GetManifestResourceStream(string name);
    public virtual AssemblyName GetName();
    public virtual Type GetType(string name);
    public virtual Type GetType(string name, bool throwOnError, bool ignoreCase);
    public static Assembly Load(AssemblyName assemblyRef);
    public static Assembly GetEntryAssembly();
    public virtual string get_Location();
    public virtual string ToString();
    public virtual string get_CodeBase();
    public virtual string get_ImageRuntimeVersion();
    public object CreateInstance(string typeName);
    public object CreateInstance(string typeName, bool ignoreCase);
    public static string CreateQualifiedName(string assemblyName, string typeName);
    private sealed virtual override Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit);
    private sealed virtual override Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Type[] GetExportedTypes();
    public virtual AssemblyName[] GetReferencedAssemblies();
    public virtual Type GetType(string name, bool throwOnError);
    public virtual Type[] GetTypes();
    private sealed virtual override bool System.Reflection.ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit);
}
public enum System.Reflection.AssemblyContentType : Enum {
    public int value__;
    public static AssemblyContentType Default;
    public static AssemblyContentType WindowsRuntime;
}
public class System.Reflection.AssemblyName : object {
    public AssemblyContentType ContentType { get; public set; }
    public string CultureName { get; public set; }
    public AssemblyNameFlags Flags { get; public set; }
    public string FullName { get; }
    public string Name { get; public set; }
    public ProcessorArchitecture ProcessorArchitecture { get; public set; }
    public Version Version { get; public set; }
    public AssemblyName(string assemblyName);
    public AssemblyContentType get_ContentType();
    public void set_ContentType(AssemblyContentType value);
    public string get_CultureName();
    public void set_CultureName(string value);
    public AssemblyNameFlags get_Flags();
    public void set_Flags(AssemblyNameFlags value);
    public string get_FullName();
    public string get_Name();
    public void set_Name(string value);
    public ProcessorArchitecture get_ProcessorArchitecture();
    public void set_ProcessorArchitecture(ProcessorArchitecture value);
    public Version get_Version();
    public void set_Version(Version value);
    public Byte[] GetPublicKey();
    public Byte[] GetPublicKeyToken();
    public void SetPublicKey(Byte[] publicKey);
    public void SetPublicKeyToken(Byte[] publicKeyToken);
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Reflection.BindingFlags : Enum {
    public int value__;
    public static BindingFlags CreateInstance;
    public static BindingFlags DeclaredOnly;
    public static BindingFlags Default;
    public static BindingFlags FlattenHierarchy;
    public static BindingFlags GetField;
    public static BindingFlags GetProperty;
    public static BindingFlags IgnoreCase;
    public static BindingFlags Instance;
    public static BindingFlags InvokeMethod;
    public static BindingFlags NonPublic;
    public static BindingFlags Public;
    public static BindingFlags SetField;
    public static BindingFlags SetProperty;
    public static BindingFlags Static;
}
public abstract class System.Reflection.ConstructorInfo : MethodBase {
    public static string ConstructorName;
    public static string TypeConstructorName;
    public MemberTypes MemberType { get; }
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object Invoke(Object[] parameters);
    public virtual MemberTypes get_MemberType();
}
public class System.Reflection.CustomAttributeData : object {
    public Type AttributeType { get; }
    public IList`1<CustomAttributeTypedArgument> ConstructorArguments { get; }
    public IList`1<CustomAttributeNamedArgument> NamedArguments { get; }
    public ConstructorInfo Constructor { get; }
    public virtual Type get_AttributeType();
    public virtual IList`1<CustomAttributeTypedArgument> get_ConstructorArguments();
    public virtual IList`1<CustomAttributeNamedArgument> get_NamedArguments();
    public virtual ConstructorInfo get_Constructor();
    public static IList`1<CustomAttributeData> GetCustomAttributes(Assembly target);
    public static IList`1<CustomAttributeData> GetCustomAttributes(MemberInfo target);
    public static IList`1<CustomAttributeData> GetCustomAttributes(Module target);
    public static IList`1<CustomAttributeData> GetCustomAttributes(ParameterInfo target);
}
public class System.Reflection.CustomAttributeNamedArgument : ValueType {
    public bool IsField { get; }
    public string MemberName { get; }
    public CustomAttributeTypedArgument TypedValue { get; }
    internal CustomAttributeNamedArgument(Type attributeType, string memberName, bool isField, CustomAttributeTypedArgument typedValue);
    public bool get_IsField();
    public string get_MemberName();
    public CustomAttributeTypedArgument get_TypedValue();
    public static bool op_Equality(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right);
    public static bool op_Inequality(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Reflection.CustomAttributeTypedArgument : ValueType {
    public Type ArgumentType { get; }
    public object Value { get; }
    internal CustomAttributeTypedArgument(Type argumentType, object value);
    public Type get_ArgumentType();
    public object get_Value();
    public static bool op_Equality(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right);
    public static bool op_Inequality(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class System.Reflection.EventInfo : MemberInfo {
    public MethodInfo AddMethod { get; }
    public EventAttributes Attributes { get; }
    public Type EventHandlerType { get; }
    public bool IsMulticast { get; }
    public bool IsSpecialName { get; }
    public MethodInfo RaiseMethod { get; }
    public MethodInfo RemoveMethod { get; }
    public MemberTypes MemberType { get; }
    public virtual MethodInfo get_AddMethod();
    public abstract virtual EventAttributes get_Attributes();
    public virtual Type get_EventHandlerType();
    public virtual bool get_IsMulticast();
    public bool get_IsSpecialName();
    public virtual MethodInfo get_RaiseMethod();
    public virtual MethodInfo get_RemoveMethod();
    public virtual void AddEventHandler(object target, Delegate handler);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void RemoveEventHandler(object target, Delegate handler);
    public MethodInfo GetAddMethod();
    public abstract virtual MethodInfo GetAddMethod(bool nonPublic);
    public MethodInfo GetRaiseMethod();
    public abstract virtual MethodInfo GetRaiseMethod(bool nonPublic);
    public MethodInfo GetRemoveMethod();
    public abstract virtual MethodInfo GetRemoveMethod(bool nonPublic);
    public virtual MemberTypes get_MemberType();
}
public abstract class System.Reflection.FieldInfo : MemberInfo {
    public FieldAttributes Attributes { get; }
    public Type FieldType { get; }
    public bool IsAssembly { get; }
    public bool IsFamily { get; }
    public bool IsFamilyAndAssembly { get; }
    public bool IsFamilyOrAssembly { get; }
    public bool IsInitOnly { get; }
    public bool IsLiteral { get; }
    public bool IsPrivate { get; }
    public bool IsPublic { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public MemberTypes MemberType { get; }
    public abstract virtual FieldAttributes get_Attributes();
    public abstract virtual Type get_FieldType();
    public bool get_IsAssembly();
    public bool get_IsFamily();
    public bool get_IsFamilyAndAssembly();
    public bool get_IsFamilyOrAssembly();
    public bool get_IsInitOnly();
    public bool get_IsLiteral();
    public bool get_IsPrivate();
    public bool get_IsPublic();
    public bool get_IsSpecialName();
    public bool get_IsStatic();
    public virtual bool Equals(object obj);
    public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle);
    public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);
    public virtual int GetHashCode();
    public virtual Type[] GetOptionalCustomModifiers();
    public virtual object GetRawConstantValue();
    public virtual Type[] GetRequiredCustomModifiers();
    public abstract virtual object GetValue(object obj);
    public virtual MemberTypes get_MemberType();
    public virtual void SetValue(object obj, object value);
}
public interface System.Reflection.ICustomAttributeProvider {
    public abstract virtual Object[] GetCustomAttributes(bool inherit);
    public abstract virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public abstract virtual bool IsDefined(Type attributeType, bool inherit);
}
[ExtensionAttribute]
public static class System.Reflection.IntrospectionExtensions : object {
    [ExtensionAttribute]
public static TypeInfo GetTypeInfo(Type type);
}
public class System.Reflection.InvalidFilterCriteriaException : Exception {
    public InvalidFilterCriteriaException(string message);
    public InvalidFilterCriteriaException(string message, Exception inner);
}
public interface System.Reflection.IReflectableType {
    public abstract virtual TypeInfo GetTypeInfo();
}
public class System.Reflection.LocalVariableInfo : object {
    public bool IsPinned { get; }
    public int LocalIndex { get; }
    public Type LocalType { get; }
    public virtual bool get_IsPinned();
    public virtual int get_LocalIndex();
    public virtual Type get_LocalType();
    public virtual string ToString();
}
public class System.Reflection.ManifestResourceInfo : object {
    public string FileName { get; }
    public Assembly ReferencedAssembly { get; }
    public ResourceLocation ResourceLocation { get; }
    public ManifestResourceInfo(Assembly containingAssembly, string containingFileName, ResourceLocation resourceLocation);
    public virtual string get_FileName();
    public virtual Assembly get_ReferencedAssembly();
    public virtual ResourceLocation get_ResourceLocation();
}
public class System.Reflection.MemberFilter : MulticastDelegate {
    public MemberFilter(object object, IntPtr method);
    public virtual bool Invoke(MemberInfo m, object filterCriteria);
    public virtual IAsyncResult BeginInvoke(MemberInfo m, object filterCriteria, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public abstract class System.Reflection.MemberInfo : object {
    public IEnumerable`1<CustomAttributeData> CustomAttributes { get; }
    public Type DeclaringType { get; }
    public int MetadataToken { get; }
    public Module Module { get; }
    public string Name { get; }
    public MemberTypes MemberType { get; }
    public virtual IEnumerable`1<CustomAttributeData> get_CustomAttributes();
    public abstract virtual Type get_DeclaringType();
    public virtual int get_MetadataToken();
    public virtual Module get_Module();
    public abstract virtual string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public abstract virtual MemberTypes get_MemberType();
    private sealed virtual override Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit);
    private sealed virtual override Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit);
    private sealed virtual override bool System.Reflection.ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit);
}
[FlagsAttribute]
public enum System.Reflection.MemberTypes : Enum {
    public int value__;
    public static MemberTypes Constructor;
    public static MemberTypes Event;
    public static MemberTypes Field;
    public static MemberTypes Method;
    public static MemberTypes Property;
    public static MemberTypes TypeInfo;
    public static MemberTypes Custom;
    public static MemberTypes NestedType;
    public static MemberTypes All;
}
public abstract class System.Reflection.MethodBase : MemberInfo {
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    public bool ContainsGenericParameters { get; }
    public bool IsAbstract { get; }
    public bool IsAssembly { get; }
    public bool IsConstructor { get; }
    public bool IsFamily { get; }
    public bool IsFamilyAndAssembly { get; }
    public bool IsFamilyOrAssembly { get; }
    public bool IsFinal { get; }
    public bool IsGenericMethod { get; }
    public bool IsGenericMethodDefinition { get; }
    public bool IsHideBySig { get; }
    public bool IsPrivate { get; }
    public bool IsPublic { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public bool IsVirtual { get; }
    public MethodImplAttributes MethodImplementationFlags { get; }
    public abstract virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    public virtual bool get_ContainsGenericParameters();
    public bool get_IsAbstract();
    public bool get_IsAssembly();
    public bool get_IsConstructor();
    public bool get_IsFamily();
    public bool get_IsFamilyAndAssembly();
    public bool get_IsFamilyOrAssembly();
    public bool get_IsFinal();
    public virtual bool get_IsGenericMethod();
    public virtual bool get_IsGenericMethodDefinition();
    public bool get_IsHideBySig();
    public bool get_IsPrivate();
    public bool get_IsPublic();
    public bool get_IsSpecialName();
    public bool get_IsStatic();
    public bool get_IsVirtual();
    public abstract virtual MethodImplAttributes get_MethodImplementationFlags();
    public virtual bool Equals(object obj);
    public virtual Type[] GetGenericArguments();
    public virtual int GetHashCode();
    public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle);
    public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType);
    public abstract virtual ParameterInfo[] GetParameters();
    public virtual object Invoke(object obj, Object[] parameters);
    public abstract virtual MethodImplAttributes GetMethodImplementationFlags();
}
public abstract class System.Reflection.MethodInfo : MethodBase {
    public ParameterInfo ReturnParameter { get; }
    public Type ReturnType { get; }
    public MemberTypes MemberType { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public abstract virtual MethodInfo GetBaseDefinition();
    public virtual ParameterInfo get_ReturnParameter();
    public virtual Type get_ReturnType();
    public virtual Delegate CreateDelegate(Type delegateType);
    public virtual Delegate CreateDelegate(Type delegateType, object target);
    public virtual bool Equals(object obj);
    public virtual Type[] GetGenericArguments();
    public virtual MethodInfo GetGenericMethodDefinition();
    public virtual int GetHashCode();
    public virtual MethodInfo MakeGenericMethod(Type[] typeArguments);
    public virtual MemberTypes get_MemberType();
    public abstract virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
}
public abstract class System.Reflection.Module : object {
    public static TypeFilter FilterTypeName;
    public static TypeFilter FilterTypeNameIgnoreCase;
    public Assembly Assembly { get; }
    public IEnumerable`1<CustomAttributeData> CustomAttributes { get; }
    public string FullyQualifiedName { get; }
    public string Name { get; }
    public Guid ModuleVersionId { get; }
    public string ScopeName { get; }
    public virtual Assembly get_Assembly();
    public virtual IEnumerable`1<CustomAttributeData> get_CustomAttributes();
    public virtual string get_FullyQualifiedName();
    public virtual string get_Name();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual Type GetType(string className, bool throwOnError, bool ignoreCase);
    public virtual string ToString();
    public virtual Guid get_ModuleVersionId();
    public virtual string get_ScopeName();
    public virtual Type[] FindTypes(TypeFilter filter, object filterCriteria);
    public FieldInfo GetField(string name);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public FieldInfo[] GetFields();
    public virtual FieldInfo[] GetFields(BindingFlags bindingFlags);
    public MethodInfo GetMethod(string name);
    public MethodInfo GetMethod(string name, Type[] types);
    public MethodInfo[] GetMethods();
    public virtual MethodInfo[] GetMethods(BindingFlags bindingFlags);
    public virtual Type GetType(string className);
    public virtual Type GetType(string className, bool ignoreCase);
    public virtual Type[] GetTypes();
    private sealed virtual override Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit);
    private sealed virtual override Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit);
    private sealed virtual override bool System.Reflection.ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit);
}
public class System.Reflection.ParameterInfo : object {
    public ParameterAttributes Attributes { get; }
    public IEnumerable`1<CustomAttributeData> CustomAttributes { get; }
    public object DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public bool IsIn { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public bool IsRetval { get; }
    public MemberInfo Member { get; }
    public string Name { get; }
    public Type ParameterType { get; }
    public int Position { get; }
    public object RawDefaultValue { get; }
    public virtual ParameterAttributes get_Attributes();
    public virtual IEnumerable`1<CustomAttributeData> get_CustomAttributes();
    public virtual object get_DefaultValue();
    public virtual bool get_HasDefaultValue();
    public bool get_IsIn();
    public bool get_IsOptional();
    public bool get_IsOut();
    public bool get_IsRetval();
    public virtual MemberInfo get_Member();
    public virtual string get_Name();
    public virtual Type get_ParameterType();
    public virtual int get_Position();
    public virtual Type[] GetOptionalCustomModifiers();
    public virtual Type[] GetRequiredCustomModifiers();
    public virtual object get_RawDefaultValue();
    private sealed virtual override Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit);
    private sealed virtual override Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit);
    private sealed virtual override bool System.Reflection.ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit);
}
[DefaultMemberAttribute("Item")]
public class System.Reflection.ParameterModifier : ValueType {
    public bool Item { get; public set; }
    public ParameterModifier(int parameterCount);
    public bool get_Item(int index);
    public void set_Item(int index, bool value);
}
public abstract class System.Reflection.PropertyInfo : MemberInfo {
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public MethodInfo GetMethod { get; }
    public bool IsSpecialName { get; }
    public Type PropertyType { get; }
    public MethodInfo SetMethod { get; }
    public MemberTypes MemberType { get; }
    public abstract virtual PropertyAttributes get_Attributes();
    public abstract virtual bool get_CanRead();
    public abstract virtual bool get_CanWrite();
    public virtual MethodInfo get_GetMethod();
    public bool get_IsSpecialName();
    public abstract virtual Type get_PropertyType();
    public virtual MethodInfo get_SetMethod();
    public virtual bool Equals(object obj);
    public virtual object GetConstantValue();
    public virtual int GetHashCode();
    public abstract virtual ParameterInfo[] GetIndexParameters();
    public object GetValue(object obj);
    public virtual object GetValue(object obj, Object[] index);
    public void SetValue(object obj, object value);
    public virtual void SetValue(object obj, object value, Object[] index);
    public virtual MemberTypes get_MemberType();
    public MethodInfo[] GetAccessors();
    public abstract virtual MethodInfo[] GetAccessors(bool nonPublic);
    public MethodInfo GetGetMethod();
    public abstract virtual MethodInfo GetGetMethod(bool nonPublic);
    public MethodInfo GetSetMethod();
    public abstract virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual Type[] GetOptionalCustomModifiers();
    public virtual object GetRawConstantValue();
    public virtual Type[] GetRequiredCustomModifiers();
}
public abstract class System.Reflection.ReflectionContext : object {
    public virtual TypeInfo GetTypeForObject(object value);
    public abstract virtual Assembly MapAssembly(Assembly assembly);
    public abstract virtual TypeInfo MapType(TypeInfo type);
}
public class System.Reflection.ReflectionTypeLoadException : Exception {
    public Exception[] LoaderExceptions { get; }
    public Type[] Types { get; }
    public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions);
    public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message);
    public Exception[] get_LoaderExceptions();
    public Type[] get_Types();
}
[FlagsAttribute]
public enum System.Reflection.ResourceLocation : Enum {
    public int value__;
    public static ResourceLocation ContainedInAnotherAssembly;
    public static ResourceLocation ContainedInManifestFile;
    public static ResourceLocation Embedded;
}
public class System.Reflection.TargetException : Exception {
    public TargetException(string message);
    public TargetException(string message, Exception inner);
}
public class System.Reflection.TargetInvocationException : Exception {
    public TargetInvocationException(Exception inner);
    public TargetInvocationException(string message, Exception inner);
}
public class System.Reflection.TargetParameterCountException : Exception {
    public TargetParameterCountException(string message);
    public TargetParameterCountException(string message, Exception inner);
}
public class System.Reflection.TypeFilter : MulticastDelegate {
    public TypeFilter(object object, IntPtr method);
    public virtual bool Invoke(Type m, object filterCriteria);
    public virtual IAsyncResult BeginInvoke(Type m, object filterCriteria, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public abstract class System.Reflection.TypeInfo : MemberInfo {
    public IEnumerable`1<ConstructorInfo> DeclaredConstructors { get; }
    public IEnumerable`1<EventInfo> DeclaredEvents { get; }
    public IEnumerable`1<FieldInfo> DeclaredFields { get; }
    public IEnumerable`1<MemberInfo> DeclaredMembers { get; }
    public IEnumerable`1<MethodInfo> DeclaredMethods { get; }
    public IEnumerable`1<TypeInfo> DeclaredNestedTypes { get; }
    public IEnumerable`1<PropertyInfo> DeclaredProperties { get; }
    public Type[] GenericTypeParameters { get; }
    public IEnumerable`1<Type> ImplementedInterfaces { get; }
    public StructLayoutAttribute StructLayoutAttribute { get; }
    public ConstructorInfo TypeInitializer { get; }
    public Type UnderlyingSystemType { get; }
    public MemberTypes MemberType { get; }
    public TypeAttributes Attributes { get; }
    public Type[] GenericTypeArguments { get; }
    public Assembly Assembly { get; }
    public Type BaseType { get; }
    public bool ContainsGenericParameters { get; }
    public MethodBase DeclaringMethod { get; }
    public string FullName { get; }
    public GenericParameterAttributes GenericParameterAttributes { get; }
    public int GenericParameterPosition { get; }
    public Guid GUID { get; }
    public bool HasElementType { get; }
    public bool IsAbstract { get; }
    public bool IsAnsiClass { get; }
    public bool IsArray { get; }
    public bool IsAutoClass { get; }
    public bool IsAutoLayout { get; }
    public bool IsByRef { get; }
    public bool IsClass { get; }
    public bool IsCOMObject { get; }
    public bool IsEnum { get; }
    public bool IsExplicitLayout { get; }
    public bool IsGenericParameter { get; }
    public bool IsGenericType { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsImport { get; }
    public bool IsInterface { get; }
    public bool IsLayoutSequential { get; }
    public bool IsMarshalByRef { get; }
    public bool IsNested { get; }
    public bool IsNestedAssembly { get; }
    public bool IsNestedFamANDAssem { get; }
    public bool IsNestedFamily { get; }
    public bool IsNestedFamORAssem { get; }
    public bool IsNestedPrivate { get; }
    public bool IsNestedPublic { get; }
    public bool IsNotPublic { get; }
    public bool IsPointer { get; }
    public bool IsPrimitive { get; }
    public bool IsPublic { get; }
    public bool IsSealed { get; }
    public bool IsVisible { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsUnicodeClass { get; }
    public bool IsValueType { get; }
    public string Namespace { get; }
    public string AssemblyQualifiedName { get; }
    public virtual Type AsType();
    public virtual IEnumerable`1<ConstructorInfo> get_DeclaredConstructors();
    public virtual IEnumerable`1<EventInfo> get_DeclaredEvents();
    public virtual IEnumerable`1<FieldInfo> get_DeclaredFields();
    public virtual IEnumerable`1<MemberInfo> get_DeclaredMembers();
    public virtual IEnumerable`1<MethodInfo> get_DeclaredMethods();
    public virtual IEnumerable`1<TypeInfo> get_DeclaredNestedTypes();
    public virtual IEnumerable`1<PropertyInfo> get_DeclaredProperties();
    public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria);
    public virtual MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria);
    public virtual Type[] get_GenericTypeParameters();
    public ConstructorInfo GetConstructor(Type[] types);
    public ConstructorInfo[] GetConstructors();
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual EventInfo GetDeclaredEvent(string name);
    public virtual FieldInfo GetDeclaredField(string name);
    public virtual MethodInfo GetDeclaredMethod(string name);
    public virtual IEnumerable`1<MethodInfo> GetDeclaredMethods(string name);
    public virtual TypeInfo GetDeclaredNestedType(string name);
    public virtual PropertyInfo GetDeclaredProperty(string name);
    public virtual MemberInfo[] GetDefaultMembers();
    public virtual string GetEnumName(object value);
    public virtual String[] GetEnumNames();
    public virtual Type GetEnumUnderlyingType();
    public virtual Array GetEnumValues();
    public EventInfo GetEvent(string name);
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual EventInfo[] GetEvents();
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public FieldInfo GetField(string name);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public FieldInfo[] GetFields();
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual Type[] GetGenericArguments();
    public Type GetInterface(string name);
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual Type[] GetInterfaces();
    public MemberInfo[] GetMember(string name);
    public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public MemberInfo[] GetMembers();
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public MethodInfo GetMethod(string name);
    public MethodInfo GetMethod(string name, BindingFlags bindingAttr);
    public MethodInfo GetMethod(string name, Type[] types);
    public MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers);
    public MethodInfo[] GetMethods();
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public Type GetNestedType(string name);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public Type[] GetNestedTypes();
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public PropertyInfo[] GetProperties();
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    public PropertyInfo GetProperty(string name);
    public PropertyInfo GetProperty(string name, BindingFlags bindingAttr);
    public PropertyInfo GetProperty(string name, Type returnType);
    public PropertyInfo GetProperty(string name, Type returnType, Type[] types);
    public PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers);
    public PropertyInfo GetProperty(string name, Type[] types);
    private sealed virtual override TypeInfo System.Reflection.IReflectableType.GetTypeInfo();
    public virtual IEnumerable`1<Type> get_ImplementedInterfaces();
    public virtual bool IsAssignableFrom(Type c);
    public virtual bool IsAssignableFrom(TypeInfo typeInfo);
    public virtual bool IsEnumDefined(object value);
    public virtual bool IsInstanceOfType(object o);
    public virtual StructLayoutAttribute get_StructLayoutAttribute();
    public ConstructorInfo get_TypeInitializer();
    public virtual Type get_UnderlyingSystemType();
    public virtual MemberTypes get_MemberType();
    public abstract virtual TypeAttributes get_Attributes();
    public abstract virtual int GetArrayRank();
    public abstract virtual Type GetElementType();
    public abstract virtual Type[] GetGenericParameterConstraints();
    public virtual bool IsSubclassOf(Type c);
    public virtual bool IsEquivalentTo(Type other);
    public abstract virtual Type[] get_GenericTypeArguments();
    public abstract virtual Type GetGenericTypeDefinition();
    public abstract virtual Assembly get_Assembly();
    public abstract virtual Type get_BaseType();
    public abstract virtual bool get_ContainsGenericParameters();
    public abstract virtual MethodBase get_DeclaringMethod();
    public abstract virtual string get_FullName();
    public abstract virtual GenericParameterAttributes get_GenericParameterAttributes();
    public abstract virtual int get_GenericParameterPosition();
    public abstract virtual Guid get_GUID();
    public bool get_HasElementType();
    public bool get_IsAbstract();
    public bool get_IsAnsiClass();
    public bool get_IsArray();
    public bool get_IsAutoClass();
    public bool get_IsAutoLayout();
    public bool get_IsByRef();
    public bool get_IsClass();
    public virtual bool get_IsCOMObject();
    public abstract virtual bool get_IsEnum();
    public bool get_IsExplicitLayout();
    public abstract virtual bool get_IsGenericParameter();
    public abstract virtual bool get_IsGenericType();
    public abstract virtual bool get_IsGenericTypeDefinition();
    public bool get_IsImport();
    public bool get_IsInterface();
    public bool get_IsLayoutSequential();
    public bool get_IsMarshalByRef();
    public bool get_IsNested();
    public bool get_IsNestedAssembly();
    public bool get_IsNestedFamANDAssem();
    public bool get_IsNestedFamily();
    public bool get_IsNestedFamORAssem();
    public bool get_IsNestedPrivate();
    public bool get_IsNestedPublic();
    public bool get_IsNotPublic();
    public bool get_IsPointer();
    public virtual bool get_IsPrimitive();
    public bool get_IsPublic();
    public bool get_IsSealed();
    public bool get_IsVisible();
    public abstract virtual bool get_IsSerializable();
    public bool get_IsSpecialName();
    public bool get_IsUnicodeClass();
    public virtual bool get_IsValueType();
    public abstract virtual string get_Namespace();
    public abstract virtual string get_AssemblyQualifiedName();
    public abstract virtual Type MakeArrayType();
    public abstract virtual Type MakeArrayType(int rank);
    public abstract virtual Type MakeByRefType();
    public abstract virtual Type MakeGenericType(Type[] typeArguments);
    public abstract virtual Type MakePointerType();
}
