[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public static class System.Runtime.CompilerServices.Unsafe : object {
    public static T& AddByteOffset(T& source, IntPtr byteOffset);
    public static T& Add(T& source, int elementOffset);
    public static T& Add(T& source, IntPtr elementOffset);
    public static bool AreSame(T& left, T& right);
    public static Void* AsPointer(T& value);
    public static T& AsRef(Void* source);
    public static T As(object o);
    public static TTo& As(TFrom& source);
    public static IntPtr ByteOffset(T& origin, T& target);
    public static void CopyBlock(Byte& destination, Byte& source, UInt32 byteCount);
    public static void CopyBlock(Void* destination, Void* source, UInt32 byteCount);
    public static void CopyBlockUnaligned(Byte& destination, Byte& source, UInt32 byteCount);
    public static void CopyBlockUnaligned(Void* destination, Void* source, UInt32 byteCount);
    public static void Copy(Void* destination, T& source);
    public static void Copy(T& destination, Void* source);
    public static void InitBlock(Byte& startAddress, byte value, UInt32 byteCount);
    public static void InitBlock(Void* startAddress, byte value, UInt32 byteCount);
    public static void InitBlockUnaligned(Byte& startAddress, byte value, UInt32 byteCount);
    public static void InitBlockUnaligned(Void* startAddress, byte value, UInt32 byteCount);
    public static T Read(Void* source);
    public static T ReadUnaligned(Void* source);
    public static T ReadUnaligned(Byte& source);
    public static int SizeOf();
    public static T& SubtractByteOffset(T& source, IntPtr byteOffset);
    public static T& Subtract(T& source, int elementOffset);
    public static T& Subtract(T& source, IntPtr elementOffset);
    public static void Write(Void* destination, T value);
    public static void WriteUnaligned(Void* destination, T value);
    public static void WriteUnaligned(Byte& destination, T value);
}
