[SecurityCriticalAttribute]
public class Microsoft.Win32.SafeHandles.SafeWaitHandle : SafeHandle {
    public bool IsInvalid { get; }
    public SafeWaitHandle(IntPtr existingHandle, bool ownsHandle);
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
}
public enum System.IO.HandleInheritability : Enum {
    public int value__;
    public static HandleInheritability Inheritable;
    public static HandleInheritability None;
}
[SecurityCriticalAttribute]
public abstract class System.Runtime.InteropServices.CriticalHandle : object {
    protected IntPtr handle;
    public bool IsClosed { get; }
    public bool IsInvalid { get; }
    protected CriticalHandle(IntPtr invalidHandleValue);
    public bool get_IsClosed();
    public abstract virtual bool get_IsInvalid();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    protected abstract virtual bool ReleaseHandle();
    protected void SetHandle(IntPtr handle);
    public void SetHandleAsInvalid();
    protected virtual override void Finalize();
}
[SecurityCriticalAttribute]
public abstract class System.Runtime.InteropServices.SafeHandle : object {
    protected IntPtr handle;
    public bool IsClosed { get; }
    public bool IsInvalid { get; }
    protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);
    public bool get_IsClosed();
    public abstract virtual bool get_IsInvalid();
    [SecurityCriticalAttribute]
public void DangerousAddRef(Boolean& success);
    public IntPtr DangerousGetHandle();
    [SecurityCriticalAttribute]
public void DangerousRelease();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    protected abstract virtual bool ReleaseHandle();
    protected void SetHandle(IntPtr handle);
    [SecurityCriticalAttribute]
public void SetHandleAsInvalid();
    protected virtual override void Finalize();
}
[ExtensionAttribute]
public static class System.Threading.WaitHandleExtensions : object {
    [ExtensionAttribute]
[SecurityCriticalAttribute]
public static SafeWaitHandle GetSafeWaitHandle(WaitHandle waitHandle);
    [ExtensionAttribute]
[SecurityCriticalAttribute]
public static void SetSafeWaitHandle(WaitHandle waitHandle, SafeWaitHandle value);
}
