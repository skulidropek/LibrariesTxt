internal static class FxResources.System.Runtime.InteropServices.RuntimeInformation.SR : object {
}
internal static class Interop : object {
}
public enum System.Runtime.InteropServices.Architecture : Enum {
    public int value__;
    public static Architecture X86;
    public static Architecture X64;
    public static Architecture Arm;
    public static Architecture Arm64;
}
public class System.Runtime.InteropServices.OSPlatform : ValueType {
    private string _osPlatform;
    [CompilerGeneratedAttribute]
private static OSPlatform <Linux>k__BackingField;
    [CompilerGeneratedAttribute]
private static OSPlatform <OSX>k__BackingField;
    [CompilerGeneratedAttribute]
private static OSPlatform <Windows>k__BackingField;
    public static OSPlatform Linux { get; }
    public static OSPlatform OSX { get; }
    public static OSPlatform Windows { get; }
    private OSPlatform(string osPlatform);
    private static OSPlatform();
    [CompilerGeneratedAttribute]
public static OSPlatform get_Linux();
    [CompilerGeneratedAttribute]
public static OSPlatform get_OSX();
    [CompilerGeneratedAttribute]
public static OSPlatform get_Windows();
    public static OSPlatform Create(string osPlatform);
    public sealed virtual bool Equals(OSPlatform other);
    internal bool Equals(string other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(OSPlatform left, OSPlatform right);
    public static bool op_Inequality(OSPlatform left, OSPlatform right);
}
public static class System.Runtime.InteropServices.RuntimeInformation : object {
    private static string s_osDescription;
    private static object s_osLock;
    private static object s_processLock;
    private static Nullable`1<Architecture> s_osArch;
    private static Nullable`1<Architecture> s_processArch;
    private static string FrameworkName;
    private static string s_frameworkDescription;
    public static string OSDescription { get; }
    public static Architecture OSArchitecture { get; }
    public static Architecture ProcessArchitecture { get; }
    public static string FrameworkDescription { get; }
    private static RuntimeInformation();
    public static bool IsOSPlatform(OSPlatform osPlatform);
    public static string get_OSDescription();
    public static Architecture get_OSArchitecture();
    public static Architecture get_ProcessArchitecture();
    public static string get_FrameworkDescription();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Argument_EmptyValue { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Argument_EmptyValue();
    internal static Type get_ResourceType();
}
