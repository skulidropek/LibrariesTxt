public class System.DataMisalignedException : Exception {
    public DataMisalignedException(string message);
    public DataMisalignedException(string message, Exception innerException);
}
public class System.DllNotFoundException : TypeLoadException {
    public DllNotFoundException(string message);
    public DllNotFoundException(string message, Exception inner);
}
public class System.Reflection.Missing : object {
    public static Missing Value;
}
public class System.Runtime.InteropServices.ArrayWithOffset : ValueType {
    [SecuritySafeCriticalAttribute]
public ArrayWithOffset(object array, int offset);
    public virtual bool Equals(object obj);
    public bool Equals(ArrayWithOffset obj);
    public object GetArray();
    public virtual int GetHashCode();
    public int GetOffset();
    public static bool op_Equality(ArrayWithOffset a, ArrayWithOffset b);
    public static bool op_Inequality(ArrayWithOffset a, ArrayWithOffset b);
}
[AttributeUsageAttribute("1037")]
public class System.Runtime.InteropServices.BestFitMappingAttribute : Attribute {
    public bool ThrowOnUnmappableChar;
    public bool BestFitMapping { get; }
    public BestFitMappingAttribute(bool BestFitMapping);
    public bool get_BestFitMapping();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("BStrWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
public class System.Runtime.InteropServices.BStrWrapper : object {
    public string WrappedObject { get; }
    [SecuritySafeCriticalAttribute]
public BStrWrapper(object value);
    [SecuritySafeCriticalAttribute]
public BStrWrapper(string value);
    public string get_WrappedObject();
}
public enum System.Runtime.InteropServices.CallingConvention : Enum {
    public int value__;
    public static CallingConvention Cdecl;
    public static CallingConvention StdCall;
    public static CallingConvention ThisCall;
    public static CallingConvention Winapi;
}
[AttributeUsageAttribute("5")]
public class System.Runtime.InteropServices.ClassInterfaceAttribute : Attribute {
    public ClassInterfaceType Value { get; }
    public ClassInterfaceAttribute(short classInterfaceType);
    public ClassInterfaceAttribute(ClassInterfaceType classInterfaceType);
    public ClassInterfaceType get_Value();
}
public enum System.Runtime.InteropServices.ClassInterfaceType : Enum {
    public int value__;
    [ObsoleteAttribute("Support for IDispatch may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static ClassInterfaceType AutoDispatch;
    [ObsoleteAttribute("Support for IDispatch may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static ClassInterfaceType AutoDual;
    public static ClassInterfaceType None;
}
[AttributeUsageAttribute("1024")]
public class System.Runtime.InteropServices.CoClassAttribute : Attribute {
    public Type CoClass { get; }
    public CoClassAttribute(Type coClass);
    public Type get_CoClass();
}
[SecuritySafeCriticalAttribute]
[ObsoleteAttribute("ComAwareEventInfo may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComAwareEventInfo : EventInfo {
    public EventAttributes Attributes { get; }
    public Type DeclaringType { get; }
    public string Name { get; }
    public ComAwareEventInfo(Type type, string eventName);
    public virtual EventAttributes get_Attributes();
    public virtual Type get_DeclaringType();
    public virtual string get_Name();
    public virtual void AddEventHandler(object target, Delegate handler);
    public virtual void RemoveEventHandler(object target, Delegate handler);
}
[AttributeUsageAttribute("4")]
public class System.Runtime.InteropServices.ComDefaultInterfaceAttribute : Attribute {
    public Type Value { get; }
    public ComDefaultInterfaceAttribute(Type defaultInterface);
    public Type get_Value();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ComEventInterfaceAttribute may be unavailable in future releases.")]
[AttributeUsageAttribute("1024")]
public class System.Runtime.InteropServices.ComEventInterfaceAttribute : Attribute {
    public Type EventProvider { get; }
    public Type SourceInterface { get; }
    public ComEventInterfaceAttribute(Type SourceInterface, Type EventProvider);
    public Type get_EventProvider();
    public Type get_SourceInterface();
}
[ObsoleteAttribute("ComEventsHelper may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static class System.Runtime.InteropServices.ComEventsHelper : object {
    [SecurityCriticalAttribute]
public static void Combine(object rcw, Guid iid, int dispid, Delegate d);
    [SecurityCriticalAttribute]
public static Delegate Remove(object rcw, Guid iid, int dispid, Delegate d);
}
public class System.Runtime.InteropServices.COMException : Exception {
    public COMException(string message);
    public COMException(string message, Exception inner);
    public COMException(string message, int errorCode);
}
[AttributeUsageAttribute("1028")]
public class System.Runtime.InteropServices.ComImportAttribute : Attribute {
}
public enum System.Runtime.InteropServices.ComInterfaceType : Enum {
    public int value__;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Support for IDispatch may be unavailable in future releases.")]
public static ComInterfaceType InterfaceIsDual;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Support for IDispatch may be unavailable in future releases.")]
public static ComInterfaceType InterfaceIsIDispatch;
    public static ComInterfaceType InterfaceIsIInspectable;
    public static ComInterfaceType InterfaceIsIUnknown;
}
public enum System.Runtime.InteropServices.ComMemberType : Enum {
    public int value__;
    public static ComMemberType Method;
    public static ComMemberType PropGet;
    public static ComMemberType PropSet;
}
[AttributeUsageAttribute("4")]
[ObsoleteAttribute("ComSourceInterfacesAttribute may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComSourceInterfacesAttribute : Attribute {
    public string Value { get; }
    public ComSourceInterfacesAttribute(string sourceInterfaces);
    public ComSourceInterfacesAttribute(Type sourceInterface);
    public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2);
    public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3);
    public ComSourceInterfacesAttribute(Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4);
    public string get_Value();
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.ADVF : Enum {
    public int value__;
    public static ADVF ADVF_DATAONSTOP;
    public static ADVF ADVF_NODATA;
    public static ADVF ADVF_ONLYONCE;
    public static ADVF ADVF_PRIMEFIRST;
    public static ADVF ADVFCACHE_FORCEBUILTIN;
    public static ADVF ADVFCACHE_NOHANDLER;
    public static ADVF ADVFCACHE_ONSAVE;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.BIND_OPTS : ValueType {
    public int cbStruct;
    public int dwTickCountDeadline;
    public int grfFlags;
    public int grfMode;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.BINDPTR : ValueType {
    public IntPtr lpfuncdesc;
    public IntPtr lptcomp;
    public IntPtr lpvardesc;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.CALLCONV : Enum {
    public int value__;
    public static CALLCONV CC_CDECL;
    public static CALLCONV CC_MACPASCAL;
    public static CALLCONV CC_MAX;
    public static CALLCONV CC_MPWCDECL;
    public static CALLCONV CC_MPWPASCAL;
    public static CALLCONV CC_MSCPASCAL;
    public static CALLCONV CC_PASCAL;
    public static CALLCONV CC_RESERVED;
    public static CALLCONV CC_STDCALL;
    public static CALLCONV CC_SYSCALL;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.CONNECTDATA : ValueType {
    public int dwCookie;
    public object pUnk;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.DATADIR : Enum {
    public int value__;
    public static DATADIR DATADIR_GET;
    public static DATADIR DATADIR_SET;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.DESCKIND : Enum {
    public int value__;
    public static DESCKIND DESCKIND_FUNCDESC;
    public static DESCKIND DESCKIND_IMPLICITAPPOBJ;
    public static DESCKIND DESCKIND_MAX;
    public static DESCKIND DESCKIND_NONE;
    public static DESCKIND DESCKIND_TYPECOMP;
    public static DESCKIND DESCKIND_VARDESC;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.DISPPARAMS : ValueType {
    public int cArgs;
    public int cNamedArgs;
    public IntPtr rgdispidNamedArgs;
    public IntPtr rgvarg;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.DVASPECT : Enum {
    public int value__;
    public static DVASPECT DVASPECT_CONTENT;
    public static DVASPECT DVASPECT_DOCPRINT;
    public static DVASPECT DVASPECT_ICON;
    public static DVASPECT DVASPECT_THUMBNAIL;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.ELEMDESC : ValueType {
    public DESCUNION desc;
    public TYPEDESC tdesc;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.EXCEPINFO : ValueType {
    public string bstrDescription;
    public string bstrHelpFile;
    public string bstrSource;
    public int dwHelpContext;
    public IntPtr pfnDeferredFillIn;
    public IntPtr pvReserved;
    public int scode;
    public short wCode;
    public short wReserved;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.FILETIME : ValueType {
    public int dwHighDateTime;
    public int dwLowDateTime;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.FORMATETC : ValueType {
    public short cfFormat;
    public DVASPECT dwAspect;
    public int lindex;
    public IntPtr ptd;
    public TYMED tymed;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.FUNCDESC : ValueType {
    public CALLCONV callconv;
    public short cParams;
    public short cParamsOpt;
    public short cScodes;
    public ELEMDESC elemdescFunc;
    public FUNCKIND funckind;
    public INVOKEKIND invkind;
    public IntPtr lprgelemdescParam;
    public IntPtr lprgscode;
    public int memid;
    public short oVft;
    public short wFuncFlags;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.FUNCFLAGS : Enum {
    public short value__;
    public static FUNCFLAGS FUNCFLAG_FBINDABLE;
    public static FUNCFLAGS FUNCFLAG_FDEFAULTBIND;
    public static FUNCFLAGS FUNCFLAG_FDEFAULTCOLLELEM;
    public static FUNCFLAGS FUNCFLAG_FDISPLAYBIND;
    public static FUNCFLAGS FUNCFLAG_FHIDDEN;
    public static FUNCFLAGS FUNCFLAG_FIMMEDIATEBIND;
    public static FUNCFLAGS FUNCFLAG_FNONBROWSABLE;
    public static FUNCFLAGS FUNCFLAG_FREPLACEABLE;
    public static FUNCFLAGS FUNCFLAG_FREQUESTEDIT;
    public static FUNCFLAGS FUNCFLAG_FRESTRICTED;
    public static FUNCFLAGS FUNCFLAG_FSOURCE;
    public static FUNCFLAGS FUNCFLAG_FUIDEFAULT;
    public static FUNCFLAGS FUNCFLAG_FUSESGETLASTERROR;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.FUNCKIND : Enum {
    public int value__;
    public static FUNCKIND FUNC_DISPATCH;
    public static FUNCKIND FUNC_NONVIRTUAL;
    public static FUNCKIND FUNC_PUREVIRTUAL;
    public static FUNCKIND FUNC_STATIC;
    public static FUNCKIND FUNC_VIRTUAL;
}
[InterfaceTypeAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IAdviseSink {
    public abstract virtual void OnClose();
    public abstract virtual void OnDataChange(FORMATETC& format, STGMEDIUM& stgmedium);
    public abstract virtual void OnRename(IMoniker moniker);
    public abstract virtual void OnSave();
    public abstract virtual void OnViewChange(int aspect, int index);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IBindCtx {
    public abstract virtual void EnumObjectParam(IEnumString& ppenum);
    public abstract virtual void GetBindOptions(BIND_OPTS& pbindopts);
    public abstract virtual void GetObjectParam(string pszKey, Object& ppunk);
    public abstract virtual void GetRunningObjectTable(IRunningObjectTable& pprot);
    public abstract virtual void RegisterObjectBound(object punk);
    public abstract virtual void RegisterObjectParam(string pszKey, object punk);
    public abstract virtual void ReleaseBoundObjects();
    public abstract virtual void RevokeObjectBound(object punk);
    public abstract virtual int RevokeObjectParam(string pszKey);
    public abstract virtual void SetBindOptions(BIND_OPTS& pbindopts);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IConnectionPoint {
    public abstract virtual void Advise(object pUnkSink, Int32& pdwCookie);
    public abstract virtual void EnumConnections(IEnumConnections& ppEnum);
    public abstract virtual void GetConnectionInterface(Guid& pIID);
    public abstract virtual void GetConnectionPointContainer(IConnectionPointContainer& ppCPC);
    public abstract virtual void Unadvise(int dwCookie);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IConnectionPointContainer {
    public abstract virtual void EnumConnectionPoints(IEnumConnectionPoints& ppEnum);
    public abstract virtual void FindConnectionPoint(Guid& riid, IConnectionPoint& ppCP);
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.IDLDESC : ValueType {
    public IntPtr dwReserved;
    public IDLFLAG wIDLFlags;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.IDLFLAG : Enum {
    public short value__;
    public static IDLFLAG IDLFLAG_FIN;
    public static IDLFLAG IDLFLAG_FLCID;
    public static IDLFLAG IDLFLAG_FOUT;
    public static IDLFLAG IDLFLAG_FRETVAL;
    public static IDLFLAG IDLFLAG_NONE;
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints {
    public abstract virtual void Clone(IEnumConnectionPoints& ppenum);
    public abstract virtual int Next(int celt, IConnectionPoint[] rgelt, IntPtr pceltFetched);
    public abstract virtual void Reset();
    public abstract virtual int Skip(int celt);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumConnections {
    public abstract virtual void Clone(IEnumConnections& ppenum);
    public abstract virtual int Next(int celt, CONNECTDATA[] rgelt, IntPtr pceltFetched);
    public abstract virtual void Reset();
    public abstract virtual int Skip(int celt);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumFORMATETC {
    public abstract virtual void Clone(IEnumFORMATETC& newEnum);
    public abstract virtual int Next(int celt, FORMATETC[] rgelt, Int32[] pceltFetched);
    public abstract virtual int Reset();
    public abstract virtual int Skip(int celt);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumMoniker {
    public abstract virtual void Clone(IEnumMoniker& ppenum);
    public abstract virtual int Next(int celt, IMoniker[] rgelt, IntPtr pceltFetched);
    public abstract virtual void Reset();
    public abstract virtual int Skip(int celt);
}
[InterfaceTypeAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumString {
    public abstract virtual void Clone(IEnumString& ppenum);
    public abstract virtual int Next(int celt, String[] rgelt, IntPtr pceltFetched);
    public abstract virtual void Reset();
    public abstract virtual int Skip(int celt);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IEnumVARIANT {
    public abstract virtual IEnumVARIANT Clone();
    public abstract virtual int Next(int celt, Object[] rgVar, IntPtr pceltFetched);
    public abstract virtual int Reset();
    public abstract virtual int Skip(int celt);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IMoniker {
    public abstract virtual void BindToObject(IBindCtx pbc, IMoniker pmkToLeft, Guid& riidResult, Object& ppvResult);
    public abstract virtual void BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, Guid& riid, Object& ppvObj);
    public abstract virtual void CommonPrefixWith(IMoniker pmkOther, IMoniker& ppmkPrefix);
    public abstract virtual void ComposeWith(IMoniker pmkRight, bool fOnlyIfNotGeneric, IMoniker& ppmkComposite);
    public abstract virtual void Enum(bool fForward, IEnumMoniker& ppenumMoniker);
    public abstract virtual void GetClassID(Guid& pClassID);
    public abstract virtual void GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, String& ppszDisplayName);
    public abstract virtual void GetSizeMax(Int64& pcbSize);
    public abstract virtual void GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, FILETIME& pFileTime);
    public abstract virtual void Hash(Int32& pdwHash);
    public abstract virtual void Inverse(IMoniker& ppmk);
    public abstract virtual int IsDirty();
    public abstract virtual int IsEqual(IMoniker pmkOtherMoniker);
    public abstract virtual int IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
    public abstract virtual int IsSystemMoniker(Int32& pdwMksys);
    public abstract virtual void Load(IStream pStm);
    public abstract virtual void ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, string pszDisplayName, Int32& pchEaten, IMoniker& ppmkOut);
    public abstract virtual void Reduce(IBindCtx pbc, int dwReduceHowFar, IMoniker& ppmkToLeft, IMoniker& ppmkReduced);
    public abstract virtual void RelativePathTo(IMoniker pmkOther, IMoniker& ppmkRelPath);
    public abstract virtual void Save(IStream pStm, bool fClearDirty);
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS : Enum {
    public int value__;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FDEFAULT;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FDEFAULTVTABLE;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FRESTRICTED;
    public static IMPLTYPEFLAGS IMPLTYPEFLAG_FSOURCE;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.INVOKEKIND : Enum {
    public int value__;
    public static INVOKEKIND INVOKE_FUNC;
    public static INVOKEKIND INVOKE_PROPERTYGET;
    public static INVOKEKIND INVOKE_PROPERTYPUT;
    public static INVOKEKIND INVOKE_PROPERTYPUTREF;
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IPersistFile {
    public abstract virtual void GetClassID(Guid& pClassID);
    public abstract virtual void GetCurFile(String& ppszFileName);
    public abstract virtual int IsDirty();
    public abstract virtual void Load(string pszFileName, int dwMode);
    public abstract virtual void Save(string pszFileName, bool fRemember);
    public abstract virtual void SaveCompleted(string pszFileName);
}
[InterfaceTypeAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IRunningObjectTable {
    public abstract virtual void EnumRunning(IEnumMoniker& ppenumMoniker);
    public abstract virtual int GetObject(IMoniker pmkObjectName, Object& ppunkObject);
    public abstract virtual int GetTimeOfLastChange(IMoniker pmkObjectName, FILETIME& pfiletime);
    public abstract virtual int IsRunning(IMoniker pmkObjectName);
    public abstract virtual void NoteChangeTime(int dwRegister, FILETIME& pfiletime);
    public abstract virtual int Register(int grfFlags, object punkObject, IMoniker pmkObjectName);
    public abstract virtual void Revoke(int dwRegister);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.IStream {
    public abstract virtual void Clone(IStream& ppstm);
    public abstract virtual void Commit(int grfCommitFlags);
    public abstract virtual void CopyTo(IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);
    public abstract virtual void LockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void Read(Byte[] pv, int cb, IntPtr pcbRead);
    public abstract virtual void Revert();
    public abstract virtual void Seek(long dlibMove, int dwOrigin, IntPtr plibNewPosition);
    public abstract virtual void SetSize(long libNewSize);
    public abstract virtual void Stat(STATSTG& pstatstg, int grfStatFlag);
    public abstract virtual void UnlockRegion(long libOffset, long cb, int dwLockType);
    public abstract virtual void Write(Byte[] pv, int cb, IntPtr pcbWritten);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeComp {
    public abstract virtual void Bind(string szName, int lHashVal, short wFlags, ITypeInfo& ppTInfo, DESCKIND& pDescKind, BINDPTR& pBindPtr);
    public abstract virtual void BindType(string szName, int lHashVal, ITypeInfo& ppTInfo, ITypeComp& ppTComp);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeInfo {
    public abstract virtual void AddressOfMember(int memid, INVOKEKIND invKind, IntPtr& ppv);
    public abstract virtual void CreateInstance(object pUnkOuter, Guid& riid, Object& ppvObj);
    public abstract virtual void GetContainingTypeLib(ITypeLib& ppTLB, Int32& pIndex);
    public abstract virtual void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual void GetFuncDesc(int index, IntPtr& ppFuncDesc);
    public abstract virtual void GetIDsOfNames(String[] rgszNames, int cNames, Int32[] pMemId);
    public abstract virtual void GetImplTypeFlags(int index, IMPLTYPEFLAGS& pImplTypeFlags);
    public abstract virtual void GetMops(int memid, String& pBstrMops);
    public abstract virtual void GetNames(int memid, String[] rgBstrNames, int cMaxNames, Int32& pcNames);
    public abstract virtual void GetRefTypeInfo(int hRef, ITypeInfo& ppTI);
    public abstract virtual void GetRefTypeOfImplType(int index, Int32& href);
    public abstract virtual void GetTypeAttr(IntPtr& ppTypeAttr);
    public abstract virtual void GetTypeComp(ITypeComp& ppTComp);
    public abstract virtual void GetVarDesc(int index, IntPtr& ppVarDesc);
    public abstract virtual void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS& pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, Int32& puArgErr);
    public abstract virtual void ReleaseFuncDesc(IntPtr pFuncDesc);
    public abstract virtual void ReleaseTypeAttr(IntPtr pTypeAttr);
    public abstract virtual void ReleaseVarDesc(IntPtr pVarDesc);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeInfo2 {
    public abstract virtual void AddressOfMember(int memid, INVOKEKIND invKind, IntPtr& ppv);
    public abstract virtual void CreateInstance(object pUnkOuter, Guid& riid, Object& ppvObj);
    public abstract virtual void GetAllCustData(IntPtr pCustData);
    public abstract virtual void GetAllFuncCustData(int index, IntPtr pCustData);
    public abstract virtual void GetAllImplTypeCustData(int index, IntPtr pCustData);
    public abstract virtual void GetAllParamCustData(int indexFunc, int indexParam, IntPtr pCustData);
    public abstract virtual void GetAllVarCustData(int index, IntPtr pCustData);
    public abstract virtual void GetContainingTypeLib(ITypeLib& ppTLB, Int32& pIndex);
    public abstract virtual void GetCustData(Guid& guid, Object& pVarVal);
    public abstract virtual void GetDllEntry(int memid, INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual void GetDocumentation2(int memid, String& pbstrHelpString, Int32& pdwHelpStringContext, String& pbstrHelpStringDll);
    public abstract virtual void GetFuncCustData(int index, Guid& guid, Object& pVarVal);
    public abstract virtual void GetFuncDesc(int index, IntPtr& ppFuncDesc);
    public abstract virtual void GetFuncIndexOfMemId(int memid, INVOKEKIND invKind, Int32& pFuncIndex);
    public abstract virtual void GetIDsOfNames(String[] rgszNames, int cNames, Int32[] pMemId);
    public abstract virtual void GetImplTypeCustData(int index, Guid& guid, Object& pVarVal);
    public abstract virtual void GetImplTypeFlags(int index, IMPLTYPEFLAGS& pImplTypeFlags);
    public abstract virtual void GetMops(int memid, String& pBstrMops);
    public abstract virtual void GetNames(int memid, String[] rgBstrNames, int cMaxNames, Int32& pcNames);
    public abstract virtual void GetParamCustData(int indexFunc, int indexParam, Guid& guid, Object& pVarVal);
    public abstract virtual void GetRefTypeInfo(int hRef, ITypeInfo& ppTI);
    public abstract virtual void GetRefTypeOfImplType(int index, Int32& href);
    public abstract virtual void GetTypeAttr(IntPtr& ppTypeAttr);
    public abstract virtual void GetTypeComp(ITypeComp& ppTComp);
    public abstract virtual void GetTypeFlags(Int32& pTypeFlags);
    public abstract virtual void GetTypeKind(TYPEKIND& pTypeKind);
    public abstract virtual void GetVarCustData(int index, Guid& guid, Object& pVarVal);
    public abstract virtual void GetVarDesc(int index, IntPtr& ppVarDesc);
    public abstract virtual void GetVarIndexOfMemId(int memid, Int32& pVarIndex);
    public abstract virtual void Invoke(object pvInstance, int memid, short wFlags, DISPPARAMS& pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, Int32& puArgErr);
    public abstract virtual void ReleaseFuncDesc(IntPtr pFuncDesc);
    public abstract virtual void ReleaseTypeAttr(IntPtr pTypeAttr);
    public abstract virtual void ReleaseVarDesc(IntPtr pVarDesc);
}
[EditorBrowsableAttribute("1")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeLib {
    public abstract virtual void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, Int32[] rgMemId, Int16& pcFound);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual void GetLibAttr(IntPtr& ppTLibAttr);
    public abstract virtual void GetTypeComp(ITypeComp& ppTComp);
    public abstract virtual void GetTypeInfo(int index, ITypeInfo& ppTI);
    public abstract virtual int GetTypeInfoCount();
    public abstract virtual void GetTypeInfoOfGuid(Guid& guid, ITypeInfo& ppTInfo);
    public abstract virtual void GetTypeInfoType(int index, TYPEKIND& pTKind);
    public abstract virtual bool IsName(string szNameBuf, int lHashVal);
    public abstract virtual void ReleaseTLibAttr(IntPtr pTLibAttr);
}
[InterfaceTypeAttribute("1")]
[EditorBrowsableAttribute("1")]
public interface System.Runtime.InteropServices.ComTypes.ITypeLib2 {
    public abstract virtual void FindName(string szNameBuf, int lHashVal, ITypeInfo[] ppTInfo, Int32[] rgMemId, Int16& pcFound);
    public abstract virtual void GetAllCustData(IntPtr pCustData);
    public abstract virtual void GetCustData(Guid& guid, Object& pVarVal);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual void GetDocumentation2(int index, String& pbstrHelpString, Int32& pdwHelpStringContext, String& pbstrHelpStringDll);
    public abstract virtual void GetLibAttr(IntPtr& ppTLibAttr);
    public abstract virtual void GetLibStatistics(IntPtr pcUniqueNames, Int32& pcchUniqueNames);
    public abstract virtual void GetTypeComp(ITypeComp& ppTComp);
    public abstract virtual void GetTypeInfo(int index, ITypeInfo& ppTI);
    public abstract virtual int GetTypeInfoCount();
    public abstract virtual void GetTypeInfoOfGuid(Guid& guid, ITypeInfo& ppTInfo);
    public abstract virtual void GetTypeInfoType(int index, TYPEKIND& pTKind);
    public abstract virtual bool IsName(string szNameBuf, int lHashVal);
    public abstract virtual void ReleaseTLibAttr(IntPtr pTLibAttr);
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.LIBFLAGS : Enum {
    public short value__;
    public static LIBFLAGS LIBFLAG_FCONTROL;
    public static LIBFLAGS LIBFLAG_FHASDISKIMAGE;
    public static LIBFLAGS LIBFLAG_FHIDDEN;
    public static LIBFLAGS LIBFLAG_FRESTRICTED;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.PARAMDESC : ValueType {
    public IntPtr lpVarValue;
    public PARAMFLAG wParamFlags;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.PARAMFLAG : Enum {
    public short value__;
    public static PARAMFLAG PARAMFLAG_FHASCUSTDATA;
    public static PARAMFLAG PARAMFLAG_FHASDEFAULT;
    public static PARAMFLAG PARAMFLAG_FIN;
    public static PARAMFLAG PARAMFLAG_FLCID;
    public static PARAMFLAG PARAMFLAG_FOPT;
    public static PARAMFLAG PARAMFLAG_FOUT;
    public static PARAMFLAG PARAMFLAG_FRETVAL;
    public static PARAMFLAG PARAMFLAG_NONE;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.STATDATA : ValueType {
    public ADVF advf;
    public IAdviseSink advSink;
    public int connection;
    public FORMATETC formatetc;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.STATSTG : ValueType {
    public FILETIME atime;
    public long cbSize;
    public Guid clsid;
    public FILETIME ctime;
    public int grfLocksSupported;
    public int grfMode;
    public int grfStateBits;
    public FILETIME mtime;
    public string pwcsName;
    public int reserved;
    public int type;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.STGMEDIUM : ValueType {
    public object pUnkForRelease;
    public TYMED tymed;
    public IntPtr unionmember;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.SYSKIND : Enum {
    public int value__;
    public static SYSKIND SYS_MAC;
    public static SYSKIND SYS_WIN16;
    public static SYSKIND SYS_WIN32;
    public static SYSKIND SYS_WIN64;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.TYMED : Enum {
    public int value__;
    public static TYMED TYMED_ENHMF;
    public static TYMED TYMED_FILE;
    public static TYMED TYMED_GDI;
    public static TYMED TYMED_HGLOBAL;
    public static TYMED TYMED_ISTORAGE;
    public static TYMED TYMED_ISTREAM;
    public static TYMED TYMED_MFPICT;
    public static TYMED TYMED_NULL;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.TYPEATTR : ValueType {
    public static int MEMBER_ID_NIL;
    public short cbAlignment;
    public int cbSizeInstance;
    public short cbSizeVft;
    public short cFuncs;
    public short cImplTypes;
    public short cVars;
    public int dwReserved;
    public Guid guid;
    public IDLDESC idldescType;
    public int lcid;
    public IntPtr lpstrSchema;
    public int memidConstructor;
    public int memidDestructor;
    public TYPEDESC tdescAlias;
    public TYPEKIND typekind;
    public short wMajorVerNum;
    public short wMinorVerNum;
    public TYPEFLAGS wTypeFlags;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.TYPEDESC : ValueType {
    public IntPtr lpValue;
    public short vt;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum System.Runtime.InteropServices.ComTypes.TYPEFLAGS : Enum {
    public short value__;
    public static TYPEFLAGS TYPEFLAG_FAGGREGATABLE;
    public static TYPEFLAGS TYPEFLAG_FAPPOBJECT;
    public static TYPEFLAGS TYPEFLAG_FCANCREATE;
    public static TYPEFLAGS TYPEFLAG_FCONTROL;
    public static TYPEFLAGS TYPEFLAG_FDISPATCHABLE;
    public static TYPEFLAGS TYPEFLAG_FDUAL;
    public static TYPEFLAGS TYPEFLAG_FHIDDEN;
    public static TYPEFLAGS TYPEFLAG_FLICENSED;
    public static TYPEFLAGS TYPEFLAG_FNONEXTENSIBLE;
    public static TYPEFLAGS TYPEFLAG_FOLEAUTOMATION;
    public static TYPEFLAGS TYPEFLAG_FPREDECLID;
    public static TYPEFLAGS TYPEFLAG_FPROXY;
    public static TYPEFLAGS TYPEFLAG_FREPLACEABLE;
    public static TYPEFLAGS TYPEFLAG_FRESTRICTED;
    public static TYPEFLAGS TYPEFLAG_FREVERSEBIND;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.TYPEKIND : Enum {
    public int value__;
    public static TYPEKIND TKIND_ALIAS;
    public static TYPEKIND TKIND_COCLASS;
    public static TYPEKIND TKIND_DISPATCH;
    public static TYPEKIND TKIND_ENUM;
    public static TYPEKIND TKIND_INTERFACE;
    public static TYPEKIND TKIND_MAX;
    public static TYPEKIND TKIND_MODULE;
    public static TYPEKIND TKIND_RECORD;
    public static TYPEKIND TKIND_UNION;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.TYPELIBATTR : ValueType {
    public Guid guid;
    public int lcid;
    public SYSKIND syskind;
    public LIBFLAGS wLibFlags;
    public short wMajorVerNum;
    public short wMinorVerNum;
}
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.ComTypes.VARDESC : ValueType {
    public DESCUNION desc;
    public ELEMDESC elemdescVar;
    public string lpstrSchema;
    public int memid;
    public VARKIND varkind;
    public short wVarFlags;
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.VARFLAGS : Enum {
    public short value__;
    public static VARFLAGS VARFLAG_FBINDABLE;
    public static VARFLAGS VARFLAG_FDEFAULTBIND;
    public static VARFLAGS VARFLAG_FDEFAULTCOLLELEM;
    public static VARFLAGS VARFLAG_FDISPLAYBIND;
    public static VARFLAGS VARFLAG_FHIDDEN;
    public static VARFLAGS VARFLAG_FIMMEDIATEBIND;
    public static VARFLAGS VARFLAG_FNONBROWSABLE;
    public static VARFLAGS VARFLAG_FREADONLY;
    public static VARFLAGS VARFLAG_FREPLACEABLE;
    public static VARFLAGS VARFLAG_FREQUESTEDIT;
    public static VARFLAGS VARFLAG_FRESTRICTED;
    public static VARFLAGS VARFLAG_FSOURCE;
    public static VARFLAGS VARFLAG_FUIDEFAULT;
}
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.ComTypes.VARKIND : Enum {
    public int value__;
    public static VARKIND VAR_CONST;
    public static VARKIND VAR_DISPATCH;
    public static VARKIND VAR_PERINSTANCE;
    public static VARKIND VAR_STATIC;
}
[SecurityCriticalAttribute]
public abstract class System.Runtime.InteropServices.CriticalHandle : object {
    protected IntPtr handle;
    public bool IsClosed { get; }
    public bool IsInvalid { get; }
    protected CriticalHandle(IntPtr invalidHandleValue);
    public bool get_IsClosed();
    public abstract virtual bool get_IsInvalid();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    protected abstract virtual bool ReleaseHandle();
    protected void SetHandle(IntPtr handle);
    public void SetHandleAsInvalid();
    protected virtual void Finalize();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("CurrencyWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
public class System.Runtime.InteropServices.CurrencyWrapper : object {
    public decimal WrappedObject { get; }
    public CurrencyWrapper(decimal obj);
    public CurrencyWrapper(object obj);
    public decimal get_WrappedObject();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("CustomQueryInterfaceMode and support for ICustomQueryInterface may be unavailable in future releases.")]
public enum System.Runtime.InteropServices.CustomQueryInterfaceMode : Enum {
    public int value__;
    public static CustomQueryInterfaceMode Allow;
    public static CustomQueryInterfaceMode Ignore;
}
[ObsoleteAttribute("CustomQueryInterfaceResult and support for ICustomQueryInterface may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.CustomQueryInterfaceResult : Enum {
    public int value__;
    public static CustomQueryInterfaceResult Failed;
    public static CustomQueryInterfaceResult Handled;
    public static CustomQueryInterfaceResult NotHandled;
}
[AttributeUsageAttribute("2")]
public class System.Runtime.InteropServices.DefaultCharSetAttribute : Attribute {
    public CharSet CharSet { get; }
    public DefaultCharSetAttribute(CharSet charSet);
    public CharSet get_CharSet();
}
[AttributeUsageAttribute("65")]
public class System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute : Attribute {
    public DllImportSearchPath Paths { get; }
    public DefaultDllImportSearchPathsAttribute(DllImportSearchPath paths);
    public DllImportSearchPath get_Paths();
}
[AttributeUsageAttribute("2048")]
public class System.Runtime.InteropServices.DefaultParameterValueAttribute : Attribute {
    public object Value { get; }
    public DefaultParameterValueAttribute(object value);
    public object get_Value();
}
[ObsoleteAttribute("DispatchWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public class System.Runtime.InteropServices.DispatchWrapper : object {
    public object WrappedObject { get; }
    [SecuritySafeCriticalAttribute]
public DispatchWrapper(object obj);
    public object get_WrappedObject();
}
[AttributeUsageAttribute("960")]
public class System.Runtime.InteropServices.DispIdAttribute : Attribute {
    public int Value { get; }
    public DispIdAttribute(int dispId);
    public int get_Value();
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.DllImportAttribute : Attribute {
    public bool BestFitMapping;
    public CallingConvention CallingConvention;
    public CharSet CharSet;
    public string EntryPoint;
    public bool ExactSpelling;
    public bool PreserveSig;
    public bool SetLastError;
    public bool ThrowOnUnmappableChar;
    public string Value { get; }
    public DllImportAttribute(string dllName);
    public string get_Value();
}
[FlagsAttribute]
public enum System.Runtime.InteropServices.DllImportSearchPath : Enum {
    public int value__;
    public static DllImportSearchPath ApplicationDirectory;
    public static DllImportSearchPath AssemblyDirectory;
    public static DllImportSearchPath LegacyBehavior;
    public static DllImportSearchPath SafeDirectories;
    public static DllImportSearchPath System32;
    public static DllImportSearchPath UseDllDirectoryForDependencies;
    public static DllImportSearchPath UserDirectories;
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ErrorWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
public class System.Runtime.InteropServices.ErrorWrapper : object {
    public int ErrorCode { get; }
    [SecuritySafeCriticalAttribute]
public ErrorWrapper(Exception e);
    public ErrorWrapper(int errorCode);
    public ErrorWrapper(object errorCode);
    public int get_ErrorCode();
}
public class System.Runtime.InteropServices.GCHandle : ValueType {
    public bool IsAllocated { get; }
    public object Target { get; public set; }
    public bool get_IsAllocated();
    [SecurityCriticalAttribute]
public object get_Target();
    [SecurityCriticalAttribute]
public void set_Target(object value);
    [SecurityCriticalAttribute]
public IntPtr AddrOfPinnedObject();
    [SecurityCriticalAttribute]
public static GCHandle Alloc(object value);
    [SecurityCriticalAttribute]
public static GCHandle Alloc(object value, GCHandleType type);
    public virtual bool Equals(object o);
    [SecurityCriticalAttribute]
public void Free();
    [SecurityCriticalAttribute]
public static GCHandle FromIntPtr(IntPtr value);
    public virtual int GetHashCode();
    public static bool op_Equality(GCHandle a, GCHandle b);
    [SecurityCriticalAttribute]
public static GCHandle op_Explicit(IntPtr value);
    public static IntPtr op_Explicit(GCHandle value);
    public static bool op_Inequality(GCHandle a, GCHandle b);
    public static IntPtr ToIntPtr(GCHandle value);
}
public enum System.Runtime.InteropServices.GCHandleType : Enum {
    public int value__;
    public static GCHandleType Normal;
    public static GCHandleType Pinned;
    public static GCHandleType Weak;
    public static GCHandleType WeakTrackResurrection;
}
[AttributeUsageAttribute("5149")]
public class System.Runtime.InteropServices.GuidAttribute : Attribute {
    public string Value { get; }
    public GuidAttribute(string guid);
    public string get_Value();
}
public class System.Runtime.InteropServices.HandleCollector : object {
    public int Count { get; }
    public int InitialThreshold { get; }
    public int MaximumThreshold { get; }
    public string Name { get; }
    public HandleCollector(string name, int initialThreshold);
    public HandleCollector(string name, int initialThreshold, int maximumThreshold);
    public int get_Count();
    public int get_InitialThreshold();
    public int get_MaximumThreshold();
    public string get_Name();
    public void Add();
    public void Remove();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ICustomAdapter may be unavailable in future releases.")]
public interface System.Runtime.InteropServices.ICustomAdapter {
    public abstract virtual object GetUnderlyingObject();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ICustomQueryInterface may be unavailable in future releases.")]
public interface System.Runtime.InteropServices.ICustomQueryInterface {
    [SecurityCriticalAttribute]
public abstract virtual CustomQueryInterfaceResult GetInterface(Guid& iid, IntPtr& ppv);
}
[AttributeUsageAttribute("2048")]
public class System.Runtime.InteropServices.InAttribute : Attribute {
}
[AttributeUsageAttribute("1024")]
public class System.Runtime.InteropServices.InterfaceTypeAttribute : Attribute {
    public ComInterfaceType Value { get; }
    public InterfaceTypeAttribute(short interfaceType);
    public InterfaceTypeAttribute(ComInterfaceType interfaceType);
    public ComInterfaceType get_Value();
}
public class System.Runtime.InteropServices.InvalidComObjectException : Exception {
    public InvalidComObjectException(string message);
    public InvalidComObjectException(string message, Exception inner);
}
public class System.Runtime.InteropServices.InvalidOleVariantTypeException : Exception {
    public InvalidOleVariantTypeException(string message);
    public InvalidOleVariantTypeException(string message, Exception inner);
}
public static class System.Runtime.InteropServices.Marshal : object {
    public static int SystemDefaultCharSize;
    public static int SystemMaxDBCSCharSize;
    [SecurityCriticalAttribute]
public static int AddRef(IntPtr pUnk);
    [SecurityCriticalAttribute]
public static IntPtr AllocCoTaskMem(int cb);
    [SecurityCriticalAttribute]
public static IntPtr AllocHGlobal(int cb);
    [SecurityCriticalAttribute]
public static IntPtr AllocHGlobal(IntPtr cb);
    [SecurityCriticalAttribute]
public static bool AreComObjectsAvailableForCleanup();
    [SecurityCriticalAttribute]
public static void Copy(Byte[] source, int startIndex, IntPtr destination, int length);
    [SecurityCriticalAttribute]
public static void Copy(Char[] source, int startIndex, IntPtr destination, int length);
    [SecurityCriticalAttribute]
public static void Copy(Double[] source, int startIndex, IntPtr destination, int length);
    [SecurityCriticalAttribute]
public static void Copy(Int16[] source, int startIndex, IntPtr destination, int length);
    [SecurityCriticalAttribute]
public static void Copy(Int32[] source, int startIndex, IntPtr destination, int length);
    [SecurityCriticalAttribute]
public static void Copy(Int64[] source, int startIndex, IntPtr destination, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr source, Byte[] destination, int startIndex, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr source, Char[] destination, int startIndex, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr source, Double[] destination, int startIndex, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr source, Int16[] destination, int startIndex, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr source, Int32[] destination, int startIndex, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr source, Int64[] destination, int startIndex, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr source, Single[] destination, int startIndex, int length);
    [SecurityCriticalAttribute]
public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length);
    [SecurityCriticalAttribute]
public static void Copy(Single[] source, int startIndex, IntPtr destination, int length);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("CreateAggregatedObject(IntPtr, Object) may be unavailable in future releases. Instead, use CreateAggregatedObject<T>(IntPtr, T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296518")]
[EditorBrowsableAttribute("1")]
public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("CreateWrapperOfType(Object, Type) may be unavailable in future releases. Instead, use CreateWrapperOfType<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296519")]
[EditorBrowsableAttribute("1")]
public static object CreateWrapperOfType(object o, Type t);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("DestroyStructure(IntPtr, Type) may be unavailable in future releases. Instead, use DestroyStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296520")]
[SecurityCriticalAttribute]
public static void DestroyStructure(IntPtr ptr, Type structuretype);
    [SecurityCriticalAttribute]
public static int FinalReleaseComObject(object o);
    [SecurityCriticalAttribute]
public static void FreeBSTR(IntPtr ptr);
    [SecurityCriticalAttribute]
public static void FreeCoTaskMem(IntPtr ptr);
    [SecurityCriticalAttribute]
public static void FreeHGlobal(IntPtr hglobal);
    [EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
[ObsoleteAttribute("GetComInterfaceForObject(Object, Type) may be unavailable in future releases. Instead, use GetComInterfaceForObject<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296509")]
public static IntPtr GetComInterfaceForObject(object o, Type T);
    [SecurityCriticalAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode) and support for ICustomQueryInterface may be unavailable in future releases.")]
public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("GetDelegateForFunctionPointer(IntPtr, Type) may be unavailable in future releases. Instead, use GetDelegateForFunctionPointer<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296521")]
[EditorBrowsableAttribute("1")]
public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("GetExceptionCode() may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static int GetExceptionCode();
    [SecurityCriticalAttribute]
public static Exception GetExceptionForHR(int errorCode);
    [SecurityCriticalAttribute]
public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo);
    [ObsoleteAttribute("GetFunctionPointerForDelegate(Delegate) may be unavailable in future releases. Instead, use GetFunctionPointerForDelegate<T>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296522")]
[EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
public static IntPtr GetFunctionPointerForDelegate(Delegate d);
    [SecurityCriticalAttribute]
public static int GetHRForException(Exception e);
    [SecurityCriticalAttribute]
public static int GetHRForLastWin32Error();
    [SecurityCriticalAttribute]
public static IntPtr GetIUnknownForObject(object o);
    [SecurityCriticalAttribute]
public static int GetLastWin32Error();
    [EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
[ObsoleteAttribute("GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.")]
public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant);
    [SecurityCriticalAttribute]
public static object GetObjectForIUnknown(IntPtr pUnk);
    [ObsoleteAttribute("GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant);
    [SecurityCriticalAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.")]
public static Object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars);
    [SecurityCriticalAttribute]
public static int GetStartComSlot(Type t);
    [SecuritySafeCriticalAttribute]
public static Type GetTypeFromCLSID(Guid clsid);
    [SecurityCriticalAttribute]
public static string GetTypeInfoName(ITypeInfo typeInfo);
    [SecurityCriticalAttribute]
public static object GetUniqueObjectForIUnknown(IntPtr unknown);
    [SecuritySafeCriticalAttribute]
public static bool IsComObject(object o);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("OffsetOf(Type, string) may be unavailable in future releases. Instead, use OffsetOf<T>(string). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296511")]
public static IntPtr OffsetOf(Type t, string fieldName);
    [SecurityCriticalAttribute]
public static string PtrToStringAnsi(IntPtr ptr);
    [SecurityCriticalAttribute]
public static string PtrToStringAnsi(IntPtr ptr, int len);
    [SecurityCriticalAttribute]
public static string PtrToStringBSTR(IntPtr ptr);
    [SecurityCriticalAttribute]
public static string PtrToStringUni(IntPtr ptr);
    [SecurityCriticalAttribute]
public static string PtrToStringUni(IntPtr ptr, int len);
    [SecurityCriticalAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("PtrToStructure(IntPtr, Object) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296512")]
public static void PtrToStructure(IntPtr ptr, object structure);
    [SecurityCriticalAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("PtrToStructure(IntPtr, Type) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296513")]
public static object PtrToStructure(IntPtr ptr, Type structureType);
    [SecurityCriticalAttribute]
public static int QueryInterface(IntPtr pUnk, Guid& iid, IntPtr& ppv);
    [SecurityCriticalAttribute]
public static byte ReadByte(IntPtr ptr);
    [SecurityCriticalAttribute]
public static byte ReadByte(IntPtr ptr, int ofs);
    [ObsoleteAttribute("ReadByte(Object, Int32) may be unavailable in future releases.")]
[SecurityCriticalAttribute]
[EditorBrowsableAttribute("1")]
public static byte ReadByte(object ptr, int ofs);
    [SecurityCriticalAttribute]
public static short ReadInt16(IntPtr ptr);
    [SecurityCriticalAttribute]
public static short ReadInt16(IntPtr ptr, int ofs);
    [ObsoleteAttribute("ReadInt16(Object, Int32) may be unavailable in future releases.")]
[SecurityCriticalAttribute]
[EditorBrowsableAttribute("1")]
public static short ReadInt16(object ptr, int ofs);
    [SecurityCriticalAttribute]
public static int ReadInt32(IntPtr ptr);
    [SecurityCriticalAttribute]
public static int ReadInt32(IntPtr ptr, int ofs);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("ReadInt32(Object, Int32) may be unavailable in future releases.")]
[SecurityCriticalAttribute]
public static int ReadInt32(object ptr, int ofs);
    [SecurityCriticalAttribute]
public static long ReadInt64(IntPtr ptr);
    [SecurityCriticalAttribute]
public static long ReadInt64(IntPtr ptr, int ofs);
    [ObsoleteAttribute("ReadInt64(Object, Int32) may be unavailable in future releases.")]
[SecurityCriticalAttribute]
[EditorBrowsableAttribute("1")]
public static long ReadInt64(object ptr, int ofs);
    [SecurityCriticalAttribute]
public static IntPtr ReadIntPtr(IntPtr ptr);
    [SecurityCriticalAttribute]
public static IntPtr ReadIntPtr(IntPtr ptr, int ofs);
    [ObsoleteAttribute("ReadIntPtr(Object, Int32) may be unavailable in future releases.")]
[SecurityCriticalAttribute]
[EditorBrowsableAttribute("1")]
public static IntPtr ReadIntPtr(object ptr, int ofs);
    [SecurityCriticalAttribute]
public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb);
    [SecurityCriticalAttribute]
public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb);
    [SecurityCriticalAttribute]
public static int Release(IntPtr pUnk);
    [SecurityCriticalAttribute]
public static int ReleaseComObject(object o);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("SizeOf(Object) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296514")]
public static int SizeOf(object structure);
    [ObsoleteAttribute("SizeOf(Type) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296515")]
[EditorBrowsableAttribute("1")]
public static int SizeOf(Type t);
    [SecurityCriticalAttribute]
public static IntPtr StringToBSTR(string s);
    [SecurityCriticalAttribute]
public static IntPtr StringToCoTaskMemAnsi(string s);
    [SecurityCriticalAttribute]
public static IntPtr StringToCoTaskMemUni(string s);
    [SecurityCriticalAttribute]
public static IntPtr StringToHGlobalAnsi(string s);
    [SecurityCriticalAttribute]
public static IntPtr StringToHGlobalUni(string s);
    [ObsoleteAttribute("StructureToPtr(Object, IntPtr, Boolean) may be unavailable in future releases. Instead, use StructureToPtr<T>(T, IntPtr, Boolean). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296516")]
[EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld);
    [SecurityCriticalAttribute]
public static void ThrowExceptionForHR(int errorCode);
    [SecurityCriticalAttribute]
public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo);
    [ObsoleteAttribute("UnsafeAddrOfPinnedArrayElement(Array, Int32) may be unavailable in future releases. Instead, use UnsafeAddrOfPinnedArrayElement<T>(T[], Int32). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296517")]
[EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index);
    [SecurityCriticalAttribute]
public static void WriteByte(IntPtr ptr, byte val);
    [SecurityCriticalAttribute]
public static void WriteByte(IntPtr ptr, int ofs, byte val);
    [ObsoleteAttribute("WriteByte(Object, Int32, Byte) may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
public static void WriteByte(object ptr, int ofs, byte val);
    [SecurityCriticalAttribute]
public static void WriteInt16(IntPtr ptr, char val);
    [SecurityCriticalAttribute]
public static void WriteInt16(IntPtr ptr, short val);
    [SecurityCriticalAttribute]
public static void WriteInt16(IntPtr ptr, int ofs, char val);
    [SecurityCriticalAttribute]
public static void WriteInt16(IntPtr ptr, int ofs, short val);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("WriteInt16(Object, Int32, Char) may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static void WriteInt16(object ptr, int ofs, char val);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("WriteInt16(Object, Int32, Int16) may be unavailable in future releases.")]
[SecurityCriticalAttribute]
public static void WriteInt16(object ptr, int ofs, short val);
    [SecurityCriticalAttribute]
public static void WriteInt32(IntPtr ptr, int val);
    [SecurityCriticalAttribute]
public static void WriteInt32(IntPtr ptr, int ofs, int val);
    [EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
[ObsoleteAttribute("WriteInt32(Object, Int32, Int32) may be unavailable in future releases.")]
public static void WriteInt32(object ptr, int ofs, int val);
    [SecurityCriticalAttribute]
public static void WriteInt64(IntPtr ptr, int ofs, long val);
    [SecurityCriticalAttribute]
public static void WriteInt64(IntPtr ptr, long val);
    [EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
[ObsoleteAttribute("WriteInt64(Object, Int32, Int64) may be unavailable in future releases.")]
public static void WriteInt64(object ptr, int ofs, long val);
    [SecurityCriticalAttribute]
public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val);
    [SecurityCriticalAttribute]
public static void WriteIntPtr(IntPtr ptr, IntPtr val);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static void WriteIntPtr(object ptr, int ofs, IntPtr val);
    [SecurityCriticalAttribute]
public static void ZeroFreeBSTR(IntPtr s);
    [SecurityCriticalAttribute]
public static void ZeroFreeCoTaskMemAnsi(IntPtr s);
    [SecurityCriticalAttribute]
public static void ZeroFreeCoTaskMemUnicode(IntPtr s);
    [SecurityCriticalAttribute]
public static void ZeroFreeGlobalAllocAnsi(IntPtr s);
    [SecurityCriticalAttribute]
public static void ZeroFreeGlobalAllocUnicode(IntPtr s);
    [SecurityCriticalAttribute]
public static IntPtr CreateAggregatedObject(IntPtr pOuter, T o);
    [SecurityCriticalAttribute]
public static TWrapper CreateWrapperOfType(T o);
    [SecurityCriticalAttribute]
public static void DestroyStructure(IntPtr ptr);
    [SecurityCriticalAttribute]
public static IntPtr GetComInterfaceForObject(T o);
    [SecurityCriticalAttribute]
public static TDelegate GetDelegateForFunctionPointer(IntPtr ptr);
    [SecurityCriticalAttribute]
public static IntPtr GetFunctionPointerForDelegate(TDelegate d);
    [ObsoleteAttribute("GetNativeVariantForObject<T>(T, IntPtr) may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
[SecurityCriticalAttribute]
public static void GetNativeVariantForObject(T obj, IntPtr pDstNativeVariant);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("GetObjectForNativeVariant<T>(IntPtr) may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static T GetObjectForNativeVariant(IntPtr pSrcNativeVariant);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("GetObjectsForNativeVariants<T>(IntPtr, Int32) may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static T[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars);
    public static IntPtr OffsetOf(string fieldName);
    [SecurityCriticalAttribute]
public static T PtrToStructure(IntPtr ptr);
    [SecurityCriticalAttribute]
public static void PtrToStructure(IntPtr ptr, T structure);
    public static int SizeOf();
    public static int SizeOf(T structure);
    [SecurityCriticalAttribute]
public static void StructureToPtr(T structure, IntPtr ptr, bool fDeleteOld);
    [SecurityCriticalAttribute]
public static IntPtr UnsafeAddrOfPinnedArrayElement(T[] arr, int index);
}
[AttributeUsageAttribute("10496")]
public class System.Runtime.InteropServices.MarshalAsAttribute : Attribute {
    public UnmanagedType ArraySubType;
    public int IidParameterIndex;
    public string MarshalCookie;
    public string MarshalType;
    public Type MarshalTypeRef;
    public VarEnum SafeArraySubType;
    public Type SafeArrayUserDefinedSubType;
    public int SizeConst;
    public short SizeParamIndex;
    public UnmanagedType Value { get; }
    public MarshalAsAttribute(short unmanagedType);
    public MarshalAsAttribute(UnmanagedType unmanagedType);
    public UnmanagedType get_Value();
}
public class System.Runtime.InteropServices.MarshalDirectiveException : Exception {
    public MarshalDirectiveException(string message);
    public MarshalDirectiveException(string message, Exception inner);
}
[AttributeUsageAttribute("2048")]
public class System.Runtime.InteropServices.OptionalAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class System.Runtime.InteropServices.PreserveSigAttribute : Attribute {
}
public class System.Runtime.InteropServices.SafeArrayRankMismatchException : Exception {
    public SafeArrayRankMismatchException(string message);
    public SafeArrayRankMismatchException(string message, Exception inner);
}
public class System.Runtime.InteropServices.SafeArrayTypeMismatchException : Exception {
    public SafeArrayTypeMismatchException(string message);
    public SafeArrayTypeMismatchException(string message, Exception inner);
}
[SecurityCriticalAttribute]
[ObsoleteAttribute("SafeBuffer may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public abstract class System.Runtime.InteropServices.SafeBuffer : SafeHandle {
    [CLSCompliantAttribute("False")]
public ulong ByteLength { get; }
    public bool IsInvalid { get; }
    protected SafeBuffer(bool ownsHandle);
    public ulong get_ByteLength();
    [CLSCompliantAttribute("False")]
public void AcquirePointer(Byte*& pointer);
    [CLSCompliantAttribute("False")]
public void Initialize(UInt32 numElements, UInt32 sizeOfEachElement);
    [CLSCompliantAttribute("False")]
public void Initialize(ulong numBytes);
    [CLSCompliantAttribute("False")]
public void Initialize(UInt32 numElements);
    [CLSCompliantAttribute("False")]
public T Read(ulong byteOffset);
    [CLSCompliantAttribute("False")]
public void ReadArray(ulong byteOffset, T[] array, int index, int count);
    public void ReleasePointer();
    [CLSCompliantAttribute("False")]
public void Write(ulong byteOffset, T value);
    [CLSCompliantAttribute("False")]
public void WriteArray(ulong byteOffset, T[] array, int index, int count);
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
public abstract class System.Runtime.InteropServices.SafeHandle : object {
    protected IntPtr handle;
    public bool IsClosed { get; }
    public bool IsInvalid { get; }
    protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);
    public bool get_IsClosed();
    public abstract virtual bool get_IsInvalid();
    [SecurityCriticalAttribute]
public void DangerousAddRef(Boolean& success);
    public IntPtr DangerousGetHandle();
    [SecurityCriticalAttribute]
public void DangerousRelease();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
protected virtual void Dispose(bool disposing);
    protected abstract virtual bool ReleaseHandle();
    protected void SetHandle(IntPtr handle);
    [SecurityCriticalAttribute]
public void SetHandleAsInvalid();
    protected virtual void Finalize();
}
public class System.Runtime.InteropServices.SEHException : Exception {
    public SEHException(string message);
    public SEHException(string message, Exception inner);
    public virtual bool CanResume();
}
[AttributeUsageAttribute("5144")]
public class System.Runtime.InteropServices.TypeIdentifierAttribute : Attribute {
    public string Identifier { get; }
    public string Scope { get; }
    public TypeIdentifierAttribute(string scope, string identifier);
    public string get_Identifier();
    public string get_Scope();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("UnknownWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
public class System.Runtime.InteropServices.UnknownWrapper : object {
    public object WrappedObject { get; }
    public UnknownWrapper(object obj);
    public object get_WrappedObject();
}
[AttributeUsageAttribute("4096")]
public class System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute : Attribute {
    public bool BestFitMapping;
    public CharSet CharSet;
    public bool SetLastError;
    public bool ThrowOnUnmappableChar;
    public CallingConvention CallingConvention { get; }
    public UnmanagedFunctionPointerAttribute(CallingConvention callingConvention);
    public CallingConvention get_CallingConvention();
}
public enum System.Runtime.InteropServices.UnmanagedType : Enum {
    public int value__;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Marshalling as AnsiBStr may be unavailable in future releases.")]
public static UnmanagedType AnsiBStr;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Marshalling arbitrary types may be unavailable in future releases. Please specify the type you wish to marshal as.")]
public static UnmanagedType AsAny;
    public static UnmanagedType Bool;
    public static UnmanagedType BStr;
    public static UnmanagedType ByValArray;
    public static UnmanagedType ByValTStr;
    [ObsoleteAttribute("Marshalling as Currency may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public static UnmanagedType Currency;
    public static UnmanagedType Error;
    public static UnmanagedType FunctionPtr;
    public static UnmanagedType HString;
    public static UnmanagedType I1;
    public static UnmanagedType I2;
    public static UnmanagedType I4;
    public static UnmanagedType I8;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Marshalling as IDispatch may be unavailable in future releases.")]
public static UnmanagedType IDispatch;
    public static UnmanagedType IInspectable;
    public static UnmanagedType Interface;
    public static UnmanagedType IUnknown;
    public static UnmanagedType LPArray;
    public static UnmanagedType LPStr;
    public static UnmanagedType LPStruct;
    public static UnmanagedType LPTStr;
    public static UnmanagedType LPWStr;
    public static UnmanagedType R4;
    public static UnmanagedType R8;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Marshalling as SafeArray may be unavailable in future releases.")]
public static UnmanagedType SafeArray;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Applying UnmanagedType.Struct is unnecessary when marshalling a struct. Support for UnmanagedType.Struct when marshalling a reference type may be unavailable in future releases.")]
public static UnmanagedType Struct;
    public static UnmanagedType SysInt;
    public static UnmanagedType SysUInt;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Marshalling as TBstr may be unavailable in future releases.")]
public static UnmanagedType TBStr;
    public static UnmanagedType U1;
    public static UnmanagedType U2;
    public static UnmanagedType U4;
    public static UnmanagedType U8;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Marshalling as VariantBool may be unavailable in future releases.")]
public static UnmanagedType VariantBool;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Marshalling as VBByRefString may be unavailable in future releases.")]
public static UnmanagedType VBByRefStr;
}
[ObsoleteAttribute("Marshalling VARIANTs may be unavailable in future releases.")]
[EditorBrowsableAttribute("1")]
public enum System.Runtime.InteropServices.VarEnum : Enum {
    public int value__;
    public static VarEnum VT_ARRAY;
    public static VarEnum VT_BLOB;
    public static VarEnum VT_BLOB_OBJECT;
    public static VarEnum VT_BOOL;
    public static VarEnum VT_BSTR;
    public static VarEnum VT_BYREF;
    public static VarEnum VT_CARRAY;
    public static VarEnum VT_CF;
    public static VarEnum VT_CLSID;
    public static VarEnum VT_CY;
    public static VarEnum VT_DATE;
    public static VarEnum VT_DECIMAL;
    public static VarEnum VT_DISPATCH;
    public static VarEnum VT_EMPTY;
    public static VarEnum VT_ERROR;
    public static VarEnum VT_FILETIME;
    public static VarEnum VT_HRESULT;
    public static VarEnum VT_I1;
    public static VarEnum VT_I2;
    public static VarEnum VT_I4;
    public static VarEnum VT_I8;
    public static VarEnum VT_INT;
    public static VarEnum VT_LPSTR;
    public static VarEnum VT_LPWSTR;
    public static VarEnum VT_NULL;
    public static VarEnum VT_PTR;
    public static VarEnum VT_R4;
    public static VarEnum VT_R8;
    public static VarEnum VT_RECORD;
    public static VarEnum VT_SAFEARRAY;
    public static VarEnum VT_STORAGE;
    public static VarEnum VT_STORED_OBJECT;
    public static VarEnum VT_STREAM;
    public static VarEnum VT_STREAMED_OBJECT;
    public static VarEnum VT_UI1;
    public static VarEnum VT_UI2;
    public static VarEnum VT_UI4;
    public static VarEnum VT_UI8;
    public static VarEnum VT_UINT;
    public static VarEnum VT_UNKNOWN;
    public static VarEnum VT_USERDEFINED;
    public static VarEnum VT_VARIANT;
    public static VarEnum VT_VECTOR;
    public static VarEnum VT_VOID;
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("VariantWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.")]
public class System.Runtime.InteropServices.VariantWrapper : object {
    public object WrappedObject { get; }
    public VariantWrapper(object obj);
    public object get_WrappedObject();
}
