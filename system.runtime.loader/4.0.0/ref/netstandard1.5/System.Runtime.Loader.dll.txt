[ExtensionAttribute]
public static class System.Reflection.Metadata.AssemblyExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static bool TryGetRawMetadata(Assembly assembly, Byte*& blob, Int32& length);
}
public abstract class System.Runtime.Loader.AssemblyLoadContext : object {
    [CompilerGeneratedAttribute]
private Func`3<AssemblyLoadContext, AssemblyName, Assembly> Resolving;
    [CompilerGeneratedAttribute]
private Action`1<AssemblyLoadContext> Unloading;
    public static AssemblyLoadContext Default { get; }
    public static AssemblyLoadContext get_Default();
    public static AssemblyName GetAssemblyName(string assemblyPath);
    public static AssemblyLoadContext GetLoadContext(Assembly assembly);
    protected abstract virtual Assembly Load(AssemblyName assemblyName);
    public Assembly LoadFromAssemblyName(AssemblyName assemblyName);
    public Assembly LoadFromAssemblyPath(string assemblyPath);
    public Assembly LoadFromNativeImagePath(string nativeImagePath, string assemblyPath);
    public Assembly LoadFromStream(Stream assembly);
    public Assembly LoadFromStream(Stream assembly, Stream assemblySymbols);
    protected IntPtr LoadUnmanagedDllFromPath(string unmanagedDllPath);
    protected virtual IntPtr LoadUnmanagedDll(string unmanagedDllName);
    public void SetProfileOptimizationRoot(string directoryPath);
    public void StartProfileOptimization(string profile);
    [CompilerGeneratedAttribute]
public void add_Resolving(Func`3<AssemblyLoadContext, AssemblyName, Assembly> value);
    [CompilerGeneratedAttribute]
public void remove_Resolving(Func`3<AssemblyLoadContext, AssemblyName, Assembly> value);
    [CompilerGeneratedAttribute]
public void add_Unloading(Action`1<AssemblyLoadContext> value);
    [CompilerGeneratedAttribute]
public void remove_Unloading(Action`1<AssemblyLoadContext> value);
}
