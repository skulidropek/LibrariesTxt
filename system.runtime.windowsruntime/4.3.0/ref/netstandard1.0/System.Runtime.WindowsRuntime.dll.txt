[ExtensionAttribute]
[SecurityCriticalAttribute]
public static class System.IO.WindowsRuntimeStorageExtensions : object {
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Task`1<Stream> OpenStreamForReadAsync(IStorageFile windowsRuntimeFile);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static Task`1<Stream> OpenStreamForReadAsync(IStorageFolder rootDirectory, string relativePath);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static Task`1<Stream> OpenStreamForWriteAsync(IStorageFile windowsRuntimeFile);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Task`1<Stream> OpenStreamForWriteAsync(IStorageFolder rootDirectory, string relativePath, CreationCollisionOption creationCollisionOption);
}
[ExtensionAttribute]
[SecurityCriticalAttribute]
public static class System.IO.WindowsRuntimeStreamExtensions : object {
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static IInputStream AsInputStream(Stream stream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IOutputStream AsOutputStream(Stream stream);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static Stream AsStream(IRandomAccessStream windowsRuntimeStream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStream(IRandomAccessStream windowsRuntimeStream, int bufferSize);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static Stream AsStreamForRead(IInputStream windowsRuntimeStream);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStreamForRead(IInputStream windowsRuntimeStream, int bufferSize);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Stream AsStreamForWrite(IOutputStream windowsRuntimeStream);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static Stream AsStreamForWrite(IOutputStream windowsRuntimeStream, int bufferSize);
}
[SecurityCriticalAttribute]
[CLSCompliantAttribute("False")]
public static class System.Runtime.InteropServices.WindowsRuntime.AsyncInfo : object {
    public static IAsyncAction Run(Func`2<CancellationToken, Task> taskProvider);
    public static IAsyncActionWithProgress`1<TProgress> Run(Func`3<CancellationToken, IProgress`1<TProgress>, Task> taskProvider);
    public static IAsyncOperation`1<TResult> Run(Func`2<CancellationToken, Task`1<TResult>> taskProvider);
    public static IAsyncOperationWithProgress`2<TResult, TProgress> Run(Func`3<CancellationToken, IProgress`1<TProgress>, Task`1<TResult>> taskProvider);
}
[SecurityCriticalAttribute]
public class System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBuffer : object {
    [CLSCompliantAttribute("False")]
public static IBuffer Create(Byte[] data, int offset, int length, int capacity);
    [CLSCompliantAttribute("False")]
public static IBuffer Create(int capacity);
}
[SecurityCriticalAttribute]
[ExtensionAttribute]
public static class System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions : object {
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static IBuffer AsBuffer(Byte[] source);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IBuffer AsBuffer(Byte[] source, int offset, int length);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IBuffer AsBuffer(Byte[] source, int offset, int length, int capacity);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static Stream AsStream(IBuffer source);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(Byte[] source, int sourceIndex, IBuffer destination, UInt32 destinationIndex, int count);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static void CopyTo(Byte[] source, IBuffer destination);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(IBuffer source, Byte[] destination);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static void CopyTo(IBuffer source, UInt32 sourceIndex, Byte[] destination, int destinationIndex, int count);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static void CopyTo(IBuffer source, UInt32 sourceIndex, IBuffer destination, UInt32 destinationIndex, UInt32 count);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void CopyTo(IBuffer source, IBuffer destination);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static byte GetByte(IBuffer source, UInt32 byteOffset);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static IBuffer GetWindowsRuntimeBuffer(MemoryStream underlyingStream);
    [CLSCompliantAttribute("False")]
[ExtensionAttribute]
public static IBuffer GetWindowsRuntimeBuffer(MemoryStream underlyingStream, int positionInStream, int length);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static bool IsSameData(IBuffer buffer, IBuffer otherBuffer);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Byte[] ToArray(IBuffer source);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Byte[] ToArray(IBuffer source, UInt32 sourceIndex, int count);
}
[CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
[ExtensionAttribute]
public static class System.WindowsRuntimeSystemExtensions : object {
    [ExtensionAttribute]
public static IAsyncAction AsAsyncAction(Task source);
    [ExtensionAttribute]
public static IAsyncOperation`1<TResult> AsAsyncOperation(Task`1<TResult> source);
    [ExtensionAttribute]
public static Task AsTask(IAsyncAction source);
    [ExtensionAttribute]
public static Task AsTask(IAsyncAction source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AsTask(IAsyncActionWithProgress`1<TProgress> source);
    [ExtensionAttribute]
public static Task AsTask(IAsyncActionWithProgress`1<TProgress> source, IProgress`1<TProgress> progress);
    [ExtensionAttribute]
public static Task AsTask(IAsyncActionWithProgress`1<TProgress> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task AsTask(IAsyncActionWithProgress`1<TProgress> source, CancellationToken cancellationToken, IProgress`1<TProgress> progress);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperation`1<TResult> source);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperation`1<TResult> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperationWithProgress`2<TResult, TProgress> source);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperationWithProgress`2<TResult, TProgress> source, IProgress`1<TProgress> progress);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperationWithProgress`2<TResult, TProgress> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> AsTask(IAsyncOperationWithProgress`2<TResult, TProgress> source, CancellationToken cancellationToken, IProgress`1<TProgress> progress);
    [EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static TaskAwaiter GetAwaiter(IAsyncAction source);
    [EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static TaskAwaiter GetAwaiter(IAsyncActionWithProgress`1<TProgress> source);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static TaskAwaiter`1<TResult> GetAwaiter(IAsyncOperation`1<TResult> source);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static TaskAwaiter`1<TResult> GetAwaiter(IAsyncOperationWithProgress`2<TResult, TProgress> source);
}
[SecurityCriticalAttribute]
public class Windows.Foundation.Point : ValueType {
    public double X { get; public set; }
    public double Y { get; public set; }
    public Point(double x, double y);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object o);
    public bool Equals(Point value);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(Point point1, Point point2);
    public static bool op_Inequality(Point point1, Point point2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    public string ToString(IFormatProvider provider);
    [SecuritySafeCriticalAttribute]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider provider);
}
[SecurityCriticalAttribute]
public class Windows.Foundation.Rect : ValueType {
    public double Bottom { get; }
    public static Rect Empty { get; }
    public double Height { get; public set; }
    public bool IsEmpty { get; }
    public double Left { get; }
    public double Right { get; }
    public double Top { get; }
    public double Width { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public Rect(double x, double y, double width, double height);
    public Rect(Point point1, Point point2);
    public Rect(Point location, Size size);
    public double get_Bottom();
    public static Rect get_Empty();
    public double get_Height();
    public void set_Height(double value);
    public bool get_IsEmpty();
    public double get_Left();
    public double get_Right();
    public double get_Top();
    public double get_Width();
    public void set_Width(double value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public bool Contains(Point point);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object o);
    public bool Equals(Rect value);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public void Intersect(Rect rect);
    public static bool op_Equality(Rect rect1, Rect rect2);
    public static bool op_Inequality(Rect rect1, Rect rect2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    public string ToString(IFormatProvider provider);
    public void Union(Point point);
    public void Union(Rect rect);
    [SecuritySafeCriticalAttribute]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider provider);
}
[SecurityCriticalAttribute]
public class Windows.Foundation.Size : ValueType {
    public static Size Empty { get; }
    public double Height { get; public set; }
    public bool IsEmpty { get; }
    public double Width { get; public set; }
    public Size(double width, double height);
    public static Size get_Empty();
    public double get_Height();
    public void set_Height(double value);
    public bool get_IsEmpty();
    public double get_Width();
    public void set_Width(double value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object o);
    public bool Equals(Size value);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(Size size1, Size size2);
    public static bool op_Inequality(Size size1, Size size2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
}
[SecurityCriticalAttribute]
public class Windows.UI.Color : ValueType {
    public byte A { get; public set; }
    public byte B { get; public set; }
    public byte G { get; public set; }
    public byte R { get; public set; }
    public byte get_A();
    public void set_A(byte value);
    public byte get_B();
    public void set_B(byte value);
    public byte get_G();
    public void set_G(byte value);
    public byte get_R();
    public void set_R(byte value);
    [SecuritySafeCriticalAttribute]
public virtual bool Equals(object o);
    public bool Equals(Color color);
    public static Color FromArgb(byte a, byte r, byte g, byte b);
    [SecuritySafeCriticalAttribute]
public virtual int GetHashCode();
    public static bool op_Equality(Color color1, Color color2);
    public static bool op_Inequality(Color color1, Color color2);
    [SecuritySafeCriticalAttribute]
public virtual string ToString();
    public string ToString(IFormatProvider provider);
    [SecuritySafeCriticalAttribute]
private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider provider);
}
