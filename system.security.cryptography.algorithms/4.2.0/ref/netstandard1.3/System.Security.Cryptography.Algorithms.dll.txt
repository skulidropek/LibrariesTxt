public abstract class System.Security.Cryptography.Aes : SymmetricAlgorithm {
    public KeySizes[] LegalBlockSizes { get; }
    public KeySizes[] LegalKeySizes { get; }
    public virtual KeySizes[] get_LegalBlockSizes();
    public virtual KeySizes[] get_LegalKeySizes();
    public static Aes Create();
}
public abstract class System.Security.Cryptography.DeriveBytes : object {
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual Byte[] GetBytes(int cb);
    public abstract virtual void Reset();
}
public class System.Security.Cryptography.HMACMD5 : HMAC {
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACMD5(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.HMACSHA1 : HMAC {
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACSHA1(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.HMACSHA256 : HMAC {
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACSHA256(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.HMACSHA384 : HMAC {
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACSHA384(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.HMACSHA512 : HMAC {
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACSHA512(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.IncrementalHash : object {
    public HashAlgorithmName AlgorithmName { get; }
    public HashAlgorithmName get_AlgorithmName();
    public void AppendData(Byte[] data);
    public void AppendData(Byte[] data, int offset, int count);
    public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm);
    public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, Byte[] key);
    public sealed virtual void Dispose();
    public Byte[] GetHashAndReset();
}
public abstract class System.Security.Cryptography.MD5 : HashAlgorithm {
    public static MD5 Create();
}
public abstract class System.Security.Cryptography.RandomNumberGenerator : object {
    public static RandomNumberGenerator Create();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void GetBytes(Byte[] data);
}
public class System.Security.Cryptography.Rfc2898DeriveBytes : DeriveBytes {
    public int IterationCount { get; public set; }
    public Byte[] Salt { get; public set; }
    public Rfc2898DeriveBytes(Byte[] password, Byte[] salt, int iterations);
    public Rfc2898DeriveBytes(string password, Byte[] salt);
    public Rfc2898DeriveBytes(string password, Byte[] salt, int iterations);
    public Rfc2898DeriveBytes(string password, int saltSize);
    public Rfc2898DeriveBytes(string password, int saltSize, int iterations);
    public int get_IterationCount();
    public void set_IterationCount(int value);
    public Byte[] get_Salt();
    public void set_Salt(Byte[] value);
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] GetBytes(int cb);
    public virtual void Reset();
}
public abstract class System.Security.Cryptography.RSA : AsymmetricAlgorithm {
    public static RSA Create();
    public abstract virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    public abstract virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public abstract virtual RSAParameters ExportParameters(bool includePrivateParameters);
    protected abstract virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected abstract virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public abstract virtual void ImportParameters(RSAParameters parameters);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public abstract virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public abstract virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
}
public class System.Security.Cryptography.RSAEncryptionPadding : object {
    public RSAEncryptionPaddingMode Mode { get; }
    public HashAlgorithmName OaepHashAlgorithm { get; }
    public static RSAEncryptionPadding OaepSHA1 { get; }
    public static RSAEncryptionPadding OaepSHA256 { get; }
    public static RSAEncryptionPadding OaepSHA384 { get; }
    public static RSAEncryptionPadding OaepSHA512 { get; }
    public static RSAEncryptionPadding Pkcs1 { get; }
    public RSAEncryptionPaddingMode get_Mode();
    public HashAlgorithmName get_OaepHashAlgorithm();
    public static RSAEncryptionPadding get_OaepSHA1();
    public static RSAEncryptionPadding get_OaepSHA256();
    public static RSAEncryptionPadding get_OaepSHA384();
    public static RSAEncryptionPadding get_OaepSHA512();
    public static RSAEncryptionPadding get_Pkcs1();
    public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RSAEncryptionPadding other);
    public virtual int GetHashCode();
    public static bool op_Equality(RSAEncryptionPadding left, RSAEncryptionPadding right);
    public static bool op_Inequality(RSAEncryptionPadding left, RSAEncryptionPadding right);
    public virtual string ToString();
}
public enum System.Security.Cryptography.RSAEncryptionPaddingMode : Enum {
    public int value__;
    public static RSAEncryptionPaddingMode Oaep;
    public static RSAEncryptionPaddingMode Pkcs1;
}
public class System.Security.Cryptography.RSAParameters : ValueType {
    public Byte[] D;
    public Byte[] DP;
    public Byte[] DQ;
    public Byte[] Exponent;
    public Byte[] InverseQ;
    public Byte[] Modulus;
    public Byte[] P;
    public Byte[] Q;
}
public class System.Security.Cryptography.RSASignaturePadding : object {
    public RSASignaturePaddingMode Mode { get; }
    public static RSASignaturePadding Pkcs1 { get; }
    public static RSASignaturePadding Pss { get; }
    public RSASignaturePaddingMode get_Mode();
    public static RSASignaturePadding get_Pkcs1();
    public static RSASignaturePadding get_Pss();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RSASignaturePadding other);
    public virtual int GetHashCode();
    public static bool op_Equality(RSASignaturePadding left, RSASignaturePadding right);
    public static bool op_Inequality(RSASignaturePadding left, RSASignaturePadding right);
    public virtual string ToString();
}
public enum System.Security.Cryptography.RSASignaturePaddingMode : Enum {
    public int value__;
    public static RSASignaturePaddingMode Pkcs1;
    public static RSASignaturePaddingMode Pss;
}
public abstract class System.Security.Cryptography.SHA1 : HashAlgorithm {
    public static SHA1 Create();
}
public abstract class System.Security.Cryptography.SHA256 : HashAlgorithm {
    public static SHA256 Create();
}
public abstract class System.Security.Cryptography.SHA384 : HashAlgorithm {
    public static SHA384 Create();
}
public abstract class System.Security.Cryptography.SHA512 : HashAlgorithm {
    public static SHA512 Create();
}
public abstract class System.Security.Cryptography.TripleDES : SymmetricAlgorithm {
    public Byte[] Key { get; public set; }
    public KeySizes[] LegalBlockSizes { get; }
    public KeySizes[] LegalKeySizes { get; }
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual KeySizes[] get_LegalBlockSizes();
    public virtual KeySizes[] get_LegalKeySizes();
    public static TripleDES Create();
    public static bool IsWeakKey(Byte[] rgbKey);
}
