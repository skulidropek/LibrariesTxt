internal static class FxResources.System.Security.Cryptography.Algorithms.SR : object {
}
internal static class Internal.Cryptography.AesBCryptModes : object {
    private static SafeAlgorithmHandle s_hAlgCbc;
    private static SafeAlgorithmHandle s_hAlgEcb;
    private static AesBCryptModes();
    internal static SafeAlgorithmHandle GetSharedHandle(CipherMode cipherMode);
    private static SafeAlgorithmHandle OpenAesAlgorithm(string cipherMode);
}
internal class Internal.Cryptography.AesImplementation : Aes {
    private static int BitsPerByte;
    private static RandomNumberGenerator s_rng;
    private static AesImplementation();
    public sealed virtual ICryptoTransform CreateDecryptor();
    public sealed virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public sealed virtual ICryptoTransform CreateEncryptor();
    public sealed virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public sealed virtual void GenerateIV();
    public sealed virtual void GenerateKey();
    protected sealed virtual void Dispose(bool disposing);
    private ICryptoTransform CreateTransform(Byte[] rgbKey, Byte[] rgbIV, bool encrypting);
    private static ICryptoTransform CreateTransformCore(CipherMode cipherMode, PaddingMode paddingMode, Byte[] key, Byte[] iv, int blockSize, bool encrypting);
}
internal abstract class Internal.Cryptography.BasicSymmetricCipher : object {
    [CompilerGeneratedAttribute]
private int <BlockSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <IV>k__BackingField;
    public int BlockSizeInBytes { get; private set; }
    protected Byte[] IV { get; private set; }
    protected BasicSymmetricCipher(Byte[] iv, int blockSizeInBytes);
    public abstract virtual int Transform(Byte[] input, int inputOffset, int count, Byte[] output, int outputOffset);
    public abstract virtual Byte[] TransformFinal(Byte[] input, int inputOffset, int count);
    [CompilerGeneratedAttribute]
public int get_BlockSizeInBytes();
    [CompilerGeneratedAttribute]
private void set_BlockSizeInBytes(int value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
protected Byte[] get_IV();
    [CompilerGeneratedAttribute]
private void set_IV(Byte[] value);
}
internal class Internal.Cryptography.BasicSymmetricCipherBCrypt : BasicSymmetricCipher {
    private bool _encrypting;
    private SafeKeyHandle _hKey;
    private Byte[] _currentIv;
    public BasicSymmetricCipherBCrypt(SafeAlgorithmHandle algorithm, CipherMode cipherMode, int blockSizeInBytes, Byte[] key, Byte[] iv, bool encrypting);
    protected virtual void Dispose(bool disposing);
    public virtual int Transform(Byte[] input, int inputOffset, int count, Byte[] output, int outputOffset);
    public virtual Byte[] TransformFinal(Byte[] input, int inputOffset, int count);
    private void Reset();
}
[ExtensionAttribute]
internal static class Internal.Cryptography.CngCommon : object {
    public static Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public static Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    [ExtensionAttribute]
public static Byte[] SignHash(SafeNCryptKeyHandle keyHandle, Byte[] hash, AsymmetricPaddingMode paddingMode, Void* pPaddingInfo, int estimatedSize);
    [ExtensionAttribute]
public static bool VerifyHash(SafeNCryptKeyHandle keyHandle, Byte[] hash, Byte[] signature, AsymmetricPaddingMode paddingMode, Void* pPaddingInfo);
}
[ExtensionAttribute]
internal static class Internal.Cryptography.CryptoThrowHelper : object {
    [ExtensionAttribute]
public static CryptographicException ToCryptographicException(int hr);
}
[ExtensionAttribute]
internal static class Internal.Cryptography.ErrorCodeHelper : object {
    [ExtensionAttribute]
public static CryptographicException ToCryptographicException(ErrorCode errorCode);
}
internal static class Internal.Cryptography.HashAlgorithmNames : object {
    public static string MD5;
    public static string SHA1;
    public static string SHA256;
    public static string SHA384;
    public static string SHA512;
}
internal abstract class Internal.Cryptography.HashProvider : object {
    public int HashSizeInBytes { get; }
    public void AppendHashData(Byte[] data, int offset, int count);
    public abstract virtual void AppendHashDataCore(Byte[] data, int offset, int count);
    public abstract virtual Byte[] FinalizeHashAndReset();
    public abstract virtual int get_HashSizeInBytes();
    public sealed virtual void Dispose();
    public abstract virtual void Dispose(bool disposing);
}
internal class Internal.Cryptography.HashProviderCng : HashProvider {
    private SafeBCryptAlgorithmHandle _hAlgorithm;
    private SafeBCryptHashHandle _hHash;
    private Byte[] _key;
    private bool _reusable;
    private int _hashSize;
    public int HashSizeInBytes { get; }
    public HashProviderCng(string hashAlgId, Byte[] key);
    public sealed virtual void AppendHashDataCore(Byte[] data, int offset, int count);
    public sealed virtual Byte[] FinalizeHashAndReset();
    public sealed virtual void Dispose(bool disposing);
    public sealed virtual int get_HashSizeInBytes();
    private void ResetHashObject();
    private void DestroyHash();
}
internal static class Internal.Cryptography.HashProviderDispenser : object {
    public static HashProvider CreateHashProvider(string hashAlgorithmId);
    public static HashProvider CreateMacProvider(string hashAlgorithmId, Byte[] key);
}
[ExtensionAttribute]
internal static class Internal.Cryptography.Helpers : object {
    [ExtensionAttribute]
public static Byte[] CloneByteArray(Byte[] src);
    [ExtensionAttribute]
public static KeySizes[] CloneKeySizesArray(KeySizes[] src);
    [ExtensionAttribute]
public static bool UsesIv(CipherMode cipherMode);
    [ExtensionAttribute]
public static Byte[] GetCipherIv(CipherMode cipherMode, Byte[] iv);
    [ExtensionAttribute]
public static bool IsLegalSize(int size, KeySizes[] legalSizes);
    public static Byte[] GenerateRandom(int count);
    public static void WriteInt(UInt32 i, Byte[] arr, int offset);
    [ExtensionAttribute]
public static Byte[] FixupKeyParity(Byte[] key);
}
internal class Internal.Cryptography.HMACCommon : object {
    [CompilerGeneratedAttribute]
private Byte[] <ActualKey>k__BackingField;
    private string _hashAlgorithmId;
    private HashProvider _hMacProvider;
    private HashProvider modreq(System.Runtime.CompilerServices.IsVolatile) _lazyHashProvider;
    private int _blockSize;
    public int HashSizeInBits { get; }
    public Byte[] ActualKey { get; private set; }
    public HMACCommon(string hashAlgorithmId, Byte[] key, int blockSize);
    public int get_HashSizeInBits();
    public void ChangeKey(Byte[] key);
    [CompilerGeneratedAttribute]
public Byte[] get_ActualKey();
    [CompilerGeneratedAttribute]
private void set_ActualKey(Byte[] value);
    public void AppendHashData(Byte[] data, int offset, int count);
    public Byte[] FinalizeHashAndReset();
    public void Dispose(bool disposing);
}
internal static class Internal.Cryptography.TripleDesBCryptModes : object {
    private static SafeAlgorithmHandle s_hAlgCbc;
    private static SafeAlgorithmHandle s_hAlgEcb;
    private static TripleDesBCryptModes();
    internal static SafeAlgorithmHandle GetSharedHandle(CipherMode cipherMode);
    private static SafeAlgorithmHandle Open3DesAlgorithm(string cipherMode);
}
internal class Internal.Cryptography.TripleDesImplementation : TripleDES {
    private static int BitsPerByte;
    private static RandomNumberGenerator s_rng;
    public KeySizes[] LegalKeySizes { get; }
    private static TripleDesImplementation();
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual void GenerateIV();
    public sealed virtual void GenerateKey();
    private ICryptoTransform CreateTransform(Byte[] rgbKey, Byte[] rgbIV, bool encrypting);
    private static ICryptoTransform CreateTransformCore(CipherMode cipherMode, PaddingMode paddingMode, Byte[] key, Byte[] iv, int blockSize, bool encrypting);
}
internal class Internal.Cryptography.UniversalCryptoDecryptor : UniversalCryptoTransform {
    private Byte[] _heldoverCipher;
    private bool DepaddingRequired { get; }
    public UniversalCryptoDecryptor(PaddingMode paddingMode, BasicSymmetricCipher basicSymmetricCipher);
    protected sealed virtual int UncheckedTransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    protected sealed virtual Byte[] UncheckedTransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    protected sealed virtual void Dispose(bool disposing);
    private void Reset();
    private bool get_DepaddingRequired();
    private Byte[] DepadBlock(Byte[] block, int offset, int count);
}
internal class Internal.Cryptography.UniversalCryptoEncryptor : UniversalCryptoTransform {
    public UniversalCryptoEncryptor(PaddingMode paddingMode, BasicSymmetricCipher basicSymmetricCipher);
    protected sealed virtual int UncheckedTransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    protected sealed virtual Byte[] UncheckedTransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    private Byte[] PadBlock(Byte[] block, int offset, int count);
}
internal abstract class Internal.Cryptography.UniversalCryptoTransform : object {
    [CompilerGeneratedAttribute]
private PaddingMode <PaddingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private BasicSymmetricCipher <BasicSymmetricCipher>k__BackingField;
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    protected PaddingMode PaddingMode { get; private set; }
    protected BasicSymmetricCipher BasicSymmetricCipher { get; private set; }
    protected UniversalCryptoTransform(PaddingMode paddingMode, BasicSymmetricCipher basicSymmetricCipher);
    public static ICryptoTransform Create(PaddingMode paddingMode, BasicSymmetricCipher cipher, bool encrypting);
    public sealed virtual bool get_CanReuseTransform();
    public sealed virtual bool get_CanTransformMultipleBlocks();
    public sealed virtual int get_InputBlockSize();
    public sealed virtual int get_OutputBlockSize();
    public sealed virtual void Dispose();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    protected virtual void Dispose(bool disposing);
    protected abstract virtual int UncheckedTransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    protected abstract virtual Byte[] UncheckedTransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    [CompilerGeneratedAttribute]
protected PaddingMode get_PaddingMode();
    [CompilerGeneratedAttribute]
private void set_PaddingMode(PaddingMode value);
    [CompilerGeneratedAttribute]
protected BasicSymmetricCipher get_BasicSymmetricCipher();
    [CompilerGeneratedAttribute]
private void set_BasicSymmetricCipher(BasicSymmetricCipher value);
}
internal static class Internal.NativeCrypto.BCryptNative : object {
}
[ExtensionAttribute]
internal static class Internal.NativeCrypto.Cng : object {
    public static string BCRYPT_3DES_ALGORITHM;
    public static string BCRYPT_AES_ALGORITHM;
    public static string BCRYPT_CHAIN_MODE_CBC;
    public static string BCRYPT_CHAIN_MODE_ECB;
    public static SafeAlgorithmHandle BCryptOpenAlgorithmProvider(string pszAlgId, string pszImplementation, OpenAlgorithmProviderFlags dwFlags);
    [ExtensionAttribute]
public static SafeKeyHandle BCryptImportKey(SafeAlgorithmHandle hAlg, Byte[] key);
    [ExtensionAttribute]
public static void SetCipherMode(SafeAlgorithmHandle hAlg, string cipherMode);
    [ExtensionAttribute]
public static int BCryptEncrypt(SafeKeyHandle hKey, Byte[] input, int inputOffset, int inputCount, Byte[] iv, Byte[] output, int outputOffset, int outputCount);
    [ExtensionAttribute]
public static int BCryptDecrypt(SafeKeyHandle hKey, Byte[] input, int inputOffset, int inputCount, Byte[] iv, Byte[] output, int outputOffset, int outputCount);
    public static string CryptFormatObject(string oidValue, Byte[] rawData, bool multiLine);
    private static Exception CreateCryptographicException(NTSTATUS ntStatus);
}
internal class Internal.NativeCrypto.CRYPT_OID_INFO : ValueType {
    public int cbSize;
    public IntPtr pszOID;
    public IntPtr pwszName;
    public OidGroup dwGroupId;
    public int AlgId;
    public int cbData;
    public IntPtr pbData;
    public string OID { get; }
    public string Name { get; }
    public string get_OID();
    public string get_Name();
}
internal enum Internal.NativeCrypto.CryptOidInfoKeyType : Enum {
    public int value__;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_OID_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_NAME_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_ALGID_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_SIGN_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_CNG_ALGID_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_CNG_SIGN_KEY;
}
internal static class Internal.NativeCrypto.OidInfo : object {
    private static string Capi2Dll;
    public static CRYPT_OID_INFO FindOidInfo(CryptOidInfoKeyType keyType, string key, OidGroup group, bool fallBackToAllGroups);
    private static bool OidGroupWillNotUseActiveDirectory(OidGroup group);
    private static IntPtr CryptFindOIDInfo(CryptOidInfoKeyType dwKeyType, IntPtr pvKey, OidGroup group);
}
internal class Internal.NativeCrypto.SafeAlgorithmHandle : SafeBCryptHandle {
    protected sealed virtual bool ReleaseHandle();
    private static UInt32 BCryptCloseAlgorithmProvider(IntPtr hAlgorithm, int dwFlags);
}
internal abstract class Internal.NativeCrypto.SafeBCryptHandle : SafeHandle {
    public bool IsInvalid { get; }
    public sealed virtual bool get_IsInvalid();
}
internal class Internal.NativeCrypto.SafeHashHandle : SafeBCryptHandle {
    protected sealed virtual bool ReleaseHandle();
    private static UInt32 BCryptDestroyHash(IntPtr hHash);
}
internal class Internal.NativeCrypto.SafeKeyHandle : SafeBCryptHandle {
    protected sealed virtual bool ReleaseHandle();
    private static UInt32 BCryptDestroyKey(IntPtr hKey);
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.DuplicateSafeNCryptKeyHandle : SafeNCryptKeyHandle {
    private SafeNCryptKeyHandle _original;
    public DuplicateSafeNCryptKeyHandle(SafeNCryptKeyHandle original);
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle : SafeBCryptHandle {
    protected sealed virtual bool ReleaseHandle();
}
internal abstract class Microsoft.Win32.SafeHandles.SafeBCryptHandle : SafeHandle {
    public bool IsInvalid { get; }
    public sealed virtual bool get_IsInvalid();
    protected abstract virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeBCryptHashHandle : SafeBCryptHandle {
    protected sealed virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeNCryptHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle : SafeNCryptHandle {
}
internal class Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle : SafeNCryptHandle {
}
internal class Microsoft.Win32.SafeHandles.SafeUnicodeStringHandle : SafeHandle {
    public bool IsInvalid { get; }
    public SafeUnicodeStringHandle(string s);
    public sealed virtual bool get_IsInvalid();
    protected sealed virtual bool ReleaseHandle();
}
public abstract class System.Security.Cryptography.Aes : SymmetricAlgorithm {
    private static KeySizes[] s_legalBlockSizes;
    private static KeySizes[] s_legalKeySizes;
    public KeySizes[] LegalBlockSizes { get; }
    public KeySizes[] LegalKeySizes { get; }
    private static Aes();
    public virtual KeySizes[] get_LegalBlockSizes();
    public virtual KeySizes[] get_LegalKeySizes();
    public static Aes Create();
}
[FlagsAttribute]
internal enum System.Security.Cryptography.CngExportPolicies : Enum {
    public int value__;
    public static CngExportPolicies None;
    public static CngExportPolicies AllowPlaintextExport;
}
[FlagsAttribute]
internal enum System.Security.Cryptography.CngKeyCreationOptions : Enum {
    public int value__;
    public static CngKeyCreationOptions None;
}
internal static class System.Security.Cryptography.CngKeyLite : object {
    private static SafeNCryptProviderHandle s_microsoftSoftwareProviderHandle;
    private static CngKeyLite();
    internal static SafeNCryptKeyHandle ImportKeyBlob(string blobType, Byte[] keyBlob);
    internal static SafeNCryptKeyHandle ImportKeyBlob(string blobType, Byte[] keyBlob, string curveName);
    internal static Byte[] ExportKeyBlob(SafeNCryptKeyHandle keyHandle, string blobType);
    internal static SafeNCryptKeyHandle GenerateNewExportableKey(string algorithm, int keySize);
    internal static SafeNCryptKeyHandle GenerateNewExportableKey(string algorithm, string curveName);
    internal static SafeNCryptKeyHandle GenerateNewExportableKey(string algorithm, ECCurve& explicitCurve);
    private static void SetExportable(SafeNCryptKeyHandle keyHandle);
    private static void SetKeyLength(SafeNCryptKeyHandle keyHandle, int keySize);
    internal static int GetKeyLength(SafeNCryptKeyHandle keyHandle);
    private static SafeNCryptProviderHandle OpenNCryptProvider(string providerName);
    private static Byte[] GetProperty(SafeNCryptHandle ncryptHandle, string propertyName, CngPropertyOptions options);
    private static string GetPropertyAsString(SafeNCryptHandle ncryptHandle, string propertyName, CngPropertyOptions options);
    internal static string GetCurveName(SafeNCryptHandle ncryptHandle);
    internal static void SetCurveName(SafeNCryptHandle keyHandle, string curveName);
    private static void SetProperty(SafeNCryptHandle ncryptHandle, string propertyName, Byte[] value);
}
[FlagsAttribute]
internal enum System.Security.Cryptography.CngKeyOpenOptions : Enum {
    public int value__;
    public static CngKeyOpenOptions None;
}
[FlagsAttribute]
internal enum System.Security.Cryptography.CngPropertyOptions : Enum {
    public int value__;
    public static CngPropertyOptions None;
    public static CngPropertyOptions Persist;
}
public abstract class System.Security.Cryptography.DeriveBytes : object {
    public abstract virtual Byte[] GetBytes(int cb);
    public abstract virtual void Reset();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class System.Security.Cryptography.ECCng : object {
    internal static ECC_CURVE_ALG_ID_ENUM GetHashAlgorithmId(Nullable`1<HashAlgorithmName> name);
    internal static Nullable`1<HashAlgorithmName> GetHashAlgorithmName(ECC_CURVE_ALG_ID_ENUM hashId);
    internal static Byte[] GetNamedCurveBlob(ECParameters& parameters);
    internal static Byte[] GetPrimeCurveBlob(ECParameters& parameters);
    internal static void ExportNamedCurveParameters(ECParameters& ecParams, Byte[] ecBlob, bool includePrivateParameters);
    internal static void ExportPrimeCurveParameters(ECParameters& ecParams, Byte[] ecBlob, bool includePrivateParameters);
    internal static Byte[] GetPrimeCurveParameterBlob(ECCurve& curve);
    private static void CheckMagicValueOfKey(KeyBlobMagicNumber magic, bool includePrivateParameters);
    private static bool IsMagicValueOfKeyPrivate(KeyBlobMagicNumber magic);
    private static bool IsMagicValueOfKeyPublic(KeyBlobMagicNumber magic);
    private static KeyBlobMagicNumber CurveNameToMagicNumber(string name, bool includePrivateParameters);
    private static ECC_CURVE_TYPE_ENUM ConvertToCurveTypeEnum(ECCurveType value);
    private static ECCurveType ConvertToCurveTypeEnum(ECC_CURVE_TYPE_ENUM value);
    internal static SafeNCryptKeyHandle ImportKeyBlob(string blobType, Byte[] keyBlob, string curveName, SafeNCryptProviderHandle provider);
    internal static string EcdsaCurveNameToAlgorithm(string algorithm);
}
public class System.Security.Cryptography.ECCurve : ValueType {
    public Byte[] A;
    public Byte[] B;
    public ECPoint G;
    public Byte[] Order;
    public Byte[] Cofactor;
    public Byte[] Seed;
    public ECCurveType CurveType;
    public Nullable`1<HashAlgorithmName> Hash;
    public Byte[] Polynomial;
    public Byte[] Prime;
    private Oid _oid;
    public Oid Oid { get; private set; }
    public bool IsPrime { get; }
    public bool IsCharacteristic2 { get; }
    public bool IsExplicit { get; }
    public bool IsNamed { get; }
    public Oid get_Oid();
    private void set_Oid(Oid value);
    private static ECCurve Create(Oid oid);
    public static ECCurve CreateFromOid(Oid curveOid);
    public static ECCurve CreateFromFriendlyName(string oidFriendlyName);
    public static ECCurve CreateFromValue(string oidValue);
    private static ECCurve CreateFromValueAndName(string oidValue, string oidFriendlyName);
    public bool get_IsPrime();
    public bool get_IsCharacteristic2();
    public bool get_IsExplicit();
    public bool get_IsNamed();
    public void Validate();
    private bool HasAnyExplicitParameters();
}
public abstract class System.Security.Cryptography.ECDsa : AsymmetricAlgorithm {
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual void ImportParameters(ECParameters parameters);
    public virtual void GenerateKey(ECCurve curve);
    public virtual Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public abstract virtual Byte[] SignHash(Byte[] hash);
    public abstract virtual bool VerifyHash(Byte[] hash, Byte[] signature);
    protected abstract virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected abstract virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public static ECDsa Create();
    public static ECDsa Create(ECCurve curve);
    public static ECDsa Create(ECParameters parameters);
}
internal static class System.Security.Cryptography.ECDsaImplementation : object {
}
public class System.Security.Cryptography.ECParameters : ValueType {
    public ECPoint Q;
    public Byte[] D;
    public ECCurve Curve;
    public void Validate();
}
public class System.Security.Cryptography.ECPoint : ValueType {
    public Byte[] X;
    public Byte[] Y;
}
public class System.Security.Cryptography.HMACMD5 : HMAC {
    private HMACCommon _hMacCommon;
    private static int BlockSize;
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACMD5(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.HMACSHA1 : HMAC {
    private HMACCommon _hMacCommon;
    private static int BlockSize;
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACSHA1(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.HMACSHA256 : HMAC {
    private HMACCommon _hMacCommon;
    private static int BlockSize;
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACSHA256(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.HMACSHA384 : HMAC {
    private HMACCommon _hMacCommon;
    private static int BlockSize;
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACSHA384(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.HMACSHA512 : HMAC {
    private HMACCommon _hMacCommon;
    private static int BlockSize;
    public int HashSize { get; }
    public Byte[] Key { get; public set; }
    public HMACSHA512(Byte[] key);
    public virtual int get_HashSize();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.IncrementalHash : object {
    private HashAlgorithmName _algorithmName;
    private HashProvider _hash;
    private HMACCommon _hmac;
    private bool _disposed;
    public HashAlgorithmName AlgorithmName { get; }
    private IncrementalHash(HashAlgorithmName name, HashProvider hash);
    private IncrementalHash(HashAlgorithmName name, HMACCommon hmac);
    public HashAlgorithmName get_AlgorithmName();
    public void AppendData(Byte[] data);
    public void AppendData(Byte[] data, int offset, int count);
    public Byte[] GetHashAndReset();
    public sealed virtual void Dispose();
    public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm);
    public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, Byte[] key);
}
public abstract class System.Security.Cryptography.MD5 : HashAlgorithm {
    public static MD5 Create();
}
public abstract class System.Security.Cryptography.RandomNumberGenerator : object {
    public static RandomNumberGenerator Create();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void GetBytes(Byte[] data);
    internal void ValidateGetBytesArgs(Byte[] data);
}
public class System.Security.Cryptography.Rfc2898DeriveBytes : DeriveBytes {
    private Byte[] _password;
    private Byte[] _salt;
    private UInt32 _iterations;
    private HMACSHA1 _hmacSha1;
    private Byte[] _buffer;
    private UInt32 _block;
    private int _startIndex;
    private int _endIndex;
    private static int BlockSize;
    private static int MinimumSaltSize;
    public int IterationCount { get; public set; }
    public Byte[] Salt { get; public set; }
    public Rfc2898DeriveBytes(Byte[] password, Byte[] salt, int iterations);
    public Rfc2898DeriveBytes(string password, Byte[] salt);
    public Rfc2898DeriveBytes(string password, Byte[] salt, int iterations);
    public Rfc2898DeriveBytes(string password, int saltSize);
    public Rfc2898DeriveBytes(string password, int saltSize, int iterations);
    public int get_IterationCount();
    public void set_IterationCount(int value);
    public Byte[] get_Salt();
    public void set_Salt(Byte[] value);
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] GetBytes(int cb);
    public virtual void Reset();
    private void Initialize();
    private Byte[] Func();
}
internal class System.Security.Cryptography.RNGCryptoServiceProvider : RandomNumberGenerator {
    public sealed virtual void GetBytes(Byte[] data);
}
public abstract class System.Security.Cryptography.RSA : AsymmetricAlgorithm {
    public abstract virtual RSAParameters ExportParameters(bool includePrivateParameters);
    public abstract virtual void ImportParameters(RSAParameters parameters);
    public abstract virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public abstract virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    public abstract virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public abstract virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    protected abstract virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected abstract virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    private static Exception HashAlgorithmNameNullOrEmpty();
    public static RSA Create();
}
public class System.Security.Cryptography.RSAEncryptionPadding : object {
    private static RSAEncryptionPadding s_pkcs1;
    private static RSAEncryptionPadding s_oaepSHA1;
    private static RSAEncryptionPadding s_oaepSHA256;
    private static RSAEncryptionPadding s_oaepSHA384;
    private static RSAEncryptionPadding s_oaepSHA512;
    private RSAEncryptionPaddingMode _mode;
    private HashAlgorithmName _oaepHashAlgorithm;
    public static RSAEncryptionPadding Pkcs1 { get; }
    public static RSAEncryptionPadding OaepSHA1 { get; }
    public static RSAEncryptionPadding OaepSHA256 { get; }
    public static RSAEncryptionPadding OaepSHA384 { get; }
    public static RSAEncryptionPadding OaepSHA512 { get; }
    public RSAEncryptionPaddingMode Mode { get; }
    public HashAlgorithmName OaepHashAlgorithm { get; }
    private RSAEncryptionPadding(RSAEncryptionPaddingMode mode, HashAlgorithmName oaepHashAlgorithm);
    private static RSAEncryptionPadding();
    public static RSAEncryptionPadding get_Pkcs1();
    public static RSAEncryptionPadding get_OaepSHA1();
    public static RSAEncryptionPadding get_OaepSHA256();
    public static RSAEncryptionPadding get_OaepSHA384();
    public static RSAEncryptionPadding get_OaepSHA512();
    public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm);
    public RSAEncryptionPaddingMode get_Mode();
    public HashAlgorithmName get_OaepHashAlgorithm();
    public virtual int GetHashCode();
    private static int CombineHashCodes(int h1, int h2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RSAEncryptionPadding other);
    public static bool op_Equality(RSAEncryptionPadding left, RSAEncryptionPadding right);
    public static bool op_Inequality(RSAEncryptionPadding left, RSAEncryptionPadding right);
    public virtual string ToString();
}
public enum System.Security.Cryptography.RSAEncryptionPaddingMode : Enum {
    public int value__;
    public static RSAEncryptionPaddingMode Pkcs1;
    public static RSAEncryptionPaddingMode Oaep;
}
internal static class System.Security.Cryptography.RSAImplementation : object {
}
public class System.Security.Cryptography.RSAParameters : ValueType {
    public Byte[] D;
    public Byte[] DP;
    public Byte[] DQ;
    public Byte[] Exponent;
    public Byte[] InverseQ;
    public Byte[] Modulus;
    public Byte[] P;
    public Byte[] Q;
}
public class System.Security.Cryptography.RSASignaturePadding : object {
    private static RSASignaturePadding s_pkcs1;
    private static RSASignaturePadding s_pss;
    private RSASignaturePaddingMode _mode;
    public static RSASignaturePadding Pkcs1 { get; }
    public static RSASignaturePadding Pss { get; }
    public RSASignaturePaddingMode Mode { get; }
    private RSASignaturePadding(RSASignaturePaddingMode mode);
    private static RSASignaturePadding();
    public static RSASignaturePadding get_Pkcs1();
    public static RSASignaturePadding get_Pss();
    public RSASignaturePaddingMode get_Mode();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RSASignaturePadding other);
    public static bool op_Equality(RSASignaturePadding left, RSASignaturePadding right);
    public static bool op_Inequality(RSASignaturePadding left, RSASignaturePadding right);
    public virtual string ToString();
}
public enum System.Security.Cryptography.RSASignaturePaddingMode : Enum {
    public int value__;
    public static RSASignaturePaddingMode Pkcs1;
    public static RSASignaturePaddingMode Pss;
}
public abstract class System.Security.Cryptography.SHA1 : HashAlgorithm {
    public static SHA1 Create();
}
public abstract class System.Security.Cryptography.SHA256 : HashAlgorithm {
    public static SHA256 Create();
}
public abstract class System.Security.Cryptography.SHA384 : HashAlgorithm {
    public static SHA384 Create();
}
public abstract class System.Security.Cryptography.SHA512 : HashAlgorithm {
    public static SHA512 Create();
}
public abstract class System.Security.Cryptography.TripleDES : SymmetricAlgorithm {
    private static KeySizes[] s_legalBlockSizes;
    private static KeySizes[] s_legalKeySizes;
    public KeySizes[] LegalKeySizes { get; }
    public KeySizes[] LegalBlockSizes { get; }
    public Byte[] Key { get; public set; }
    private static TripleDES();
    public static TripleDES Create();
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual KeySizes[] get_LegalBlockSizes();
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public static bool IsWeakKey(Byte[] rgbKey);
    private static bool EqualBytes(Byte[] rgbKey, int start1, int start2, int count);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string Argument_InvalidOidValue { get; }
    internal static string Argument_InvalidValue { get; }
    internal static string ArgumentNull_Buffer { get; }
    internal static string Arg_CryptographyException { get; }
    internal static string Cryptography_CSP_NoPrivateKey { get; }
    internal static string Cryptography_HashAlgorithmNameNullOrEmpty { get; }
    internal static string Cryptography_CurveNotSupported { get; }
    internal static string Cryptography_InvalidCurveOid { get; }
    internal static string Cryptography_InvalidCurveKeyParameters { get; }
    internal static string Cryptography_InvalidECCharacteristic2Curve { get; }
    internal static string Cryptography_InvalidECPrimeCurve { get; }
    internal static string Cryptography_InvalidECNamedCurve { get; }
    internal static string Cryptography_InvalidKeySize { get; }
    internal static string Cryptography_InvalidKey_SemiWeak { get; }
    internal static string Cryptography_InvalidKey_Weak { get; }
    internal static string Cryptography_InvalidIVSize { get; }
    internal static string Cryptography_InvalidPadding { get; }
    internal static string Cryptography_InvalidRsaParameters { get; }
    internal static string Cryptography_InvalidPaddingMode { get; }
    internal static string Cryptography_Invalid_IA5String { get; }
    internal static string Cryptography_MissingIV { get; }
    internal static string Cryptography_MustTransformWholeBlock { get; }
    internal static string Cryptography_NotValidPrivateKey { get; }
    internal static string Cryptography_NotValidPublicOrPrivateKey { get; }
    internal static string Cryptography_OpenInvalidHandle { get; }
    internal static string Cryptography_PartialBlock { get; }
    internal static string Cryptography_PasswordDerivedBytes_FewBytesSalt { get; }
    internal static string Cryptography_PasswordDerivedBytes_InvalidAlgorithm { get; }
    internal static string Cryptography_PasswordDerivedBytes_InvalidIV { get; }
    internal static string Cryptography_RC2_EKS40 { get; }
    internal static string Cryptography_RC2_EKSKS { get; }
    internal static string Cryptography_TransformBeyondEndOfBuffer { get; }
    internal static string Cryptography_UnknownHashAlgorithm { get; }
    internal static string Cryptography_UnknownPaddingMode { get; }
    internal static string Cryptography_UnexpectedTransformTruncation { get; }
    internal static string Cryptography_UnsupportedPaddingMode { get; }
    internal static string NotSupported_SubclassOverride { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_Argument_InvalidOidValue();
    internal static string get_Argument_InvalidValue();
    internal static string get_ArgumentNull_Buffer();
    internal static string get_Arg_CryptographyException();
    internal static string get_Cryptography_CSP_NoPrivateKey();
    internal static string get_Cryptography_HashAlgorithmNameNullOrEmpty();
    internal static string get_Cryptography_CurveNotSupported();
    internal static string get_Cryptography_InvalidCurveOid();
    internal static string get_Cryptography_InvalidCurveKeyParameters();
    internal static string get_Cryptography_InvalidECCharacteristic2Curve();
    internal static string get_Cryptography_InvalidECPrimeCurve();
    internal static string get_Cryptography_InvalidECNamedCurve();
    internal static string get_Cryptography_InvalidKeySize();
    internal static string get_Cryptography_InvalidKey_SemiWeak();
    internal static string get_Cryptography_InvalidKey_Weak();
    internal static string get_Cryptography_InvalidIVSize();
    internal static string get_Cryptography_InvalidPadding();
    internal static string get_Cryptography_InvalidRsaParameters();
    internal static string get_Cryptography_InvalidPaddingMode();
    internal static string get_Cryptography_Invalid_IA5String();
    internal static string get_Cryptography_MissingIV();
    internal static string get_Cryptography_MustTransformWholeBlock();
    internal static string get_Cryptography_NotValidPrivateKey();
    internal static string get_Cryptography_NotValidPublicOrPrivateKey();
    internal static string get_Cryptography_OpenInvalidHandle();
    internal static string get_Cryptography_PartialBlock();
    internal static string get_Cryptography_PasswordDerivedBytes_FewBytesSalt();
    internal static string get_Cryptography_PasswordDerivedBytes_InvalidAlgorithm();
    internal static string get_Cryptography_PasswordDerivedBytes_InvalidIV();
    internal static string get_Cryptography_RC2_EKS40();
    internal static string get_Cryptography_RC2_EKSKS();
    internal static string get_Cryptography_TransformBeyondEndOfBuffer();
    internal static string get_Cryptography_UnknownHashAlgorithm();
    internal static string get_Cryptography_UnknownPaddingMode();
    internal static string get_Cryptography_UnexpectedTransformTruncation();
    internal static string get_Cryptography_UnsupportedPaddingMode();
    internal static string get_NotSupported_SubclassOverride();
    internal static Type get_ResourceType();
}
