public abstract class Microsoft.Win32.SafeHandles.SafeNCryptHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    protected abstract virtual bool ReleaseNativeHandle();
}
public class Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle : SafeNCryptHandle {
    protected virtual bool ReleaseNativeHandle();
}
public class Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle : SafeNCryptHandle {
    protected virtual bool ReleaseNativeHandle();
}
public class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle : SafeNCryptHandle {
    protected virtual bool ReleaseNativeHandle();
}
public class System.Security.Cryptography.AesCng : Aes {
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public AesCng(string keyName);
    public AesCng(string keyName, CngProvider provider);
    public AesCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    protected virtual void Dispose(bool disposing);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
}
public class System.Security.Cryptography.CngAlgorithm : object {
    public string Algorithm { get; }
    public static CngAlgorithm ECDiffieHellman { get; }
    public static CngAlgorithm ECDiffieHellmanP256 { get; }
    public static CngAlgorithm ECDiffieHellmanP384 { get; }
    public static CngAlgorithm ECDiffieHellmanP521 { get; }
    public static CngAlgorithm ECDsa { get; }
    public static CngAlgorithm ECDsaP256 { get; }
    public static CngAlgorithm ECDsaP384 { get; }
    public static CngAlgorithm ECDsaP521 { get; }
    public static CngAlgorithm MD5 { get; }
    public static CngAlgorithm Rsa { get; }
    public static CngAlgorithm Sha1 { get; }
    public static CngAlgorithm Sha256 { get; }
    public static CngAlgorithm Sha384 { get; }
    public static CngAlgorithm Sha512 { get; }
    public CngAlgorithm(string algorithm);
    public string get_Algorithm();
    public static CngAlgorithm get_ECDiffieHellman();
    public static CngAlgorithm get_ECDiffieHellmanP256();
    public static CngAlgorithm get_ECDiffieHellmanP384();
    public static CngAlgorithm get_ECDiffieHellmanP521();
    public static CngAlgorithm get_ECDsa();
    public static CngAlgorithm get_ECDsaP256();
    public static CngAlgorithm get_ECDsaP384();
    public static CngAlgorithm get_ECDsaP521();
    public static CngAlgorithm get_MD5();
    public static CngAlgorithm get_Rsa();
    public static CngAlgorithm get_Sha1();
    public static CngAlgorithm get_Sha256();
    public static CngAlgorithm get_Sha384();
    public static CngAlgorithm get_Sha512();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CngAlgorithm other);
    public virtual int GetHashCode();
    public static bool op_Equality(CngAlgorithm left, CngAlgorithm right);
    public static bool op_Inequality(CngAlgorithm left, CngAlgorithm right);
    public virtual string ToString();
}
public class System.Security.Cryptography.CngAlgorithmGroup : object {
    public string AlgorithmGroup { get; }
    public static CngAlgorithmGroup DiffieHellman { get; }
    public static CngAlgorithmGroup Dsa { get; }
    public static CngAlgorithmGroup ECDiffieHellman { get; }
    public static CngAlgorithmGroup ECDsa { get; }
    public static CngAlgorithmGroup Rsa { get; }
    public CngAlgorithmGroup(string algorithmGroup);
    public string get_AlgorithmGroup();
    public static CngAlgorithmGroup get_DiffieHellman();
    public static CngAlgorithmGroup get_Dsa();
    public static CngAlgorithmGroup get_ECDiffieHellman();
    public static CngAlgorithmGroup get_ECDsa();
    public static CngAlgorithmGroup get_Rsa();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CngAlgorithmGroup other);
    public virtual int GetHashCode();
    public static bool op_Equality(CngAlgorithmGroup left, CngAlgorithmGroup right);
    public static bool op_Inequality(CngAlgorithmGroup left, CngAlgorithmGroup right);
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Security.Cryptography.CngExportPolicies : Enum {
    public int value__;
    public static CngExportPolicies AllowArchiving;
    public static CngExportPolicies AllowExport;
    public static CngExportPolicies AllowPlaintextArchiving;
    public static CngExportPolicies AllowPlaintextExport;
    public static CngExportPolicies None;
}
public class System.Security.Cryptography.CngKey : object {
    public CngAlgorithm Algorithm { get; }
    public CngAlgorithmGroup AlgorithmGroup { get; }
    public CngExportPolicies ExportPolicy { get; }
    public SafeNCryptKeyHandle Handle { get; }
    public bool IsEphemeral { get; }
    public bool IsMachineKey { get; }
    public string KeyName { get; }
    public int KeySize { get; }
    public CngKeyUsages KeyUsage { get; }
    public IntPtr ParentWindowHandle { get; public set; }
    public CngProvider Provider { get; }
    public SafeNCryptProviderHandle ProviderHandle { get; }
    public CngUIPolicy UIPolicy { get; }
    public string UniqueName { get; }
    public CngAlgorithm get_Algorithm();
    public CngAlgorithmGroup get_AlgorithmGroup();
    public CngExportPolicies get_ExportPolicy();
    public SafeNCryptKeyHandle get_Handle();
    public bool get_IsEphemeral();
    public bool get_IsMachineKey();
    public string get_KeyName();
    public int get_KeySize();
    public CngKeyUsages get_KeyUsage();
    public IntPtr get_ParentWindowHandle();
    public void set_ParentWindowHandle(IntPtr value);
    public CngProvider get_Provider();
    public SafeNCryptProviderHandle get_ProviderHandle();
    public CngUIPolicy get_UIPolicy();
    public string get_UniqueName();
    public static CngKey Create(CngAlgorithm algorithm);
    public static CngKey Create(CngAlgorithm algorithm, string keyName);
    public static CngKey Create(CngAlgorithm algorithm, string keyName, CngKeyCreationParameters creationParameters);
    public void Delete();
    public sealed virtual void Dispose();
    public static bool Exists(string keyName);
    public static bool Exists(string keyName, CngProvider provider);
    public static bool Exists(string keyName, CngProvider provider, CngKeyOpenOptions options);
    public Byte[] Export(CngKeyBlobFormat format);
    public CngProperty GetProperty(string name, CngPropertyOptions options);
    public bool HasProperty(string name, CngPropertyOptions options);
    public static CngKey Import(Byte[] keyBlob, CngKeyBlobFormat format);
    public static CngKey Import(Byte[] keyBlob, CngKeyBlobFormat format, CngProvider provider);
    public static CngKey Open(SafeNCryptKeyHandle keyHandle, CngKeyHandleOpenOptions keyHandleOpenOptions);
    public static CngKey Open(string keyName);
    public static CngKey Open(string keyName, CngProvider provider);
    public static CngKey Open(string keyName, CngProvider provider, CngKeyOpenOptions openOptions);
    public void SetProperty(CngProperty property);
}
public class System.Security.Cryptography.CngKeyBlobFormat : object {
    public static CngKeyBlobFormat EccFullPrivateBlob { get; }
    public static CngKeyBlobFormat EccFullPublicBlob { get; }
    public static CngKeyBlobFormat EccPrivateBlob { get; }
    public static CngKeyBlobFormat EccPublicBlob { get; }
    public string Format { get; }
    public static CngKeyBlobFormat GenericPrivateBlob { get; }
    public static CngKeyBlobFormat GenericPublicBlob { get; }
    public static CngKeyBlobFormat OpaqueTransportBlob { get; }
    public static CngKeyBlobFormat Pkcs8PrivateBlob { get; }
    public CngKeyBlobFormat(string format);
    public static CngKeyBlobFormat get_EccFullPrivateBlob();
    public static CngKeyBlobFormat get_EccFullPublicBlob();
    public static CngKeyBlobFormat get_EccPrivateBlob();
    public static CngKeyBlobFormat get_EccPublicBlob();
    public string get_Format();
    public static CngKeyBlobFormat get_GenericPrivateBlob();
    public static CngKeyBlobFormat get_GenericPublicBlob();
    public static CngKeyBlobFormat get_OpaqueTransportBlob();
    public static CngKeyBlobFormat get_Pkcs8PrivateBlob();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CngKeyBlobFormat other);
    public virtual int GetHashCode();
    public static bool op_Equality(CngKeyBlobFormat left, CngKeyBlobFormat right);
    public static bool op_Inequality(CngKeyBlobFormat left, CngKeyBlobFormat right);
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Security.Cryptography.CngKeyCreationOptions : Enum {
    public int value__;
    public static CngKeyCreationOptions MachineKey;
    public static CngKeyCreationOptions None;
    public static CngKeyCreationOptions OverwriteExistingKey;
}
public class System.Security.Cryptography.CngKeyCreationParameters : object {
    public Nullable`1<CngExportPolicies> ExportPolicy { get; public set; }
    public CngKeyCreationOptions KeyCreationOptions { get; public set; }
    public Nullable`1<CngKeyUsages> KeyUsage { get; public set; }
    public CngPropertyCollection Parameters { get; }
    public IntPtr ParentWindowHandle { get; public set; }
    public CngProvider Provider { get; public set; }
    public CngUIPolicy UIPolicy { get; public set; }
    public Nullable`1<CngExportPolicies> get_ExportPolicy();
    public void set_ExportPolicy(Nullable`1<CngExportPolicies> value);
    public CngKeyCreationOptions get_KeyCreationOptions();
    public void set_KeyCreationOptions(CngKeyCreationOptions value);
    public Nullable`1<CngKeyUsages> get_KeyUsage();
    public void set_KeyUsage(Nullable`1<CngKeyUsages> value);
    public CngPropertyCollection get_Parameters();
    public IntPtr get_ParentWindowHandle();
    public void set_ParentWindowHandle(IntPtr value);
    public CngProvider get_Provider();
    public void set_Provider(CngProvider value);
    public CngUIPolicy get_UIPolicy();
    public void set_UIPolicy(CngUIPolicy value);
}
[FlagsAttribute]
public enum System.Security.Cryptography.CngKeyHandleOpenOptions : Enum {
    public int value__;
    public static CngKeyHandleOpenOptions EphemeralKey;
    public static CngKeyHandleOpenOptions None;
}
[FlagsAttribute]
public enum System.Security.Cryptography.CngKeyOpenOptions : Enum {
    public int value__;
    public static CngKeyOpenOptions MachineKey;
    public static CngKeyOpenOptions None;
    public static CngKeyOpenOptions Silent;
    public static CngKeyOpenOptions UserKey;
}
[FlagsAttribute]
public enum System.Security.Cryptography.CngKeyUsages : Enum {
    public int value__;
    public static CngKeyUsages AllUsages;
    public static CngKeyUsages Decryption;
    public static CngKeyUsages KeyAgreement;
    public static CngKeyUsages None;
    public static CngKeyUsages Signing;
}
public class System.Security.Cryptography.CngProperty : ValueType {
    public string Name { get; }
    public CngPropertyOptions Options { get; }
    public CngProperty(string name, Byte[] value, CngPropertyOptions options);
    public string get_Name();
    public CngPropertyOptions get_Options();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CngProperty other);
    public virtual int GetHashCode();
    public Byte[] GetValue();
    public static bool op_Equality(CngProperty left, CngProperty right);
    public static bool op_Inequality(CngProperty left, CngProperty right);
}
public class System.Security.Cryptography.CngPropertyCollection : Collection`1<CngProperty> {
}
[FlagsAttribute]
public enum System.Security.Cryptography.CngPropertyOptions : Enum {
    public int value__;
    public static CngPropertyOptions CustomProperty;
    public static CngPropertyOptions None;
    public static CngPropertyOptions Persist;
}
public class System.Security.Cryptography.CngProvider : object {
    public static CngProvider MicrosoftSmartCardKeyStorageProvider { get; }
    public static CngProvider MicrosoftSoftwareKeyStorageProvider { get; }
    public string Provider { get; }
    public CngProvider(string provider);
    public static CngProvider get_MicrosoftSmartCardKeyStorageProvider();
    public static CngProvider get_MicrosoftSoftwareKeyStorageProvider();
    public string get_Provider();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CngProvider other);
    public virtual int GetHashCode();
    public static bool op_Equality(CngProvider left, CngProvider right);
    public static bool op_Inequality(CngProvider left, CngProvider right);
    public virtual string ToString();
}
public class System.Security.Cryptography.CngUIPolicy : object {
    public string CreationTitle { get; }
    public string Description { get; }
    public string FriendlyName { get; }
    public CngUIProtectionLevels ProtectionLevel { get; }
    public string UseContext { get; }
    public CngUIPolicy(CngUIProtectionLevels protectionLevel);
    public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName);
    public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description);
    public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext);
    public CngUIPolicy(CngUIProtectionLevels protectionLevel, string friendlyName, string description, string useContext, string creationTitle);
    public string get_CreationTitle();
    public string get_Description();
    public string get_FriendlyName();
    public CngUIProtectionLevels get_ProtectionLevel();
    public string get_UseContext();
}
[FlagsAttribute]
public enum System.Security.Cryptography.CngUIProtectionLevels : Enum {
    public int value__;
    public static CngUIProtectionLevels ForceHighProtection;
    public static CngUIProtectionLevels None;
    public static CngUIProtectionLevels ProtectKey;
}
public class System.Security.Cryptography.ECDsaCng : ECDsa {
    public CngKey Key { get; }
    public int KeySize { get; public set; }
    public KeySizes[] LegalKeySizes { get; }
    public ECDsaCng(int keySize);
    public ECDsaCng(CngKey key);
    public ECDsaCng(ECCurve curve);
    public CngKey get_Key();
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalKeySizes();
    protected virtual void Dispose(bool disposing);
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
    public virtual void GenerateKey(ECCurve curve);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual void ImportParameters(ECParameters parameters);
    public virtual Byte[] SignHash(Byte[] hash);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature);
}
public class System.Security.Cryptography.RSACng : RSA {
    public CngKey Key { get; }
    public KeySizes[] LegalKeySizes { get; }
    public RSACng(int keySize);
    public RSACng(CngKey key);
    public CngKey get_Key();
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual RSAParameters ExportParameters(bool includePrivateParameters);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual void ImportParameters(RSAParameters parameters);
    public virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
}
public class System.Security.Cryptography.TripleDESCng : TripleDES {
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public KeySizes[] LegalKeySizes { get; }
    public TripleDESCng(string keyName);
    public TripleDESCng(string keyName, CngProvider provider);
    public TripleDESCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    protected virtual void Dispose(bool disposing);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
}
