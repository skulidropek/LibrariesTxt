public class System.Security.Cryptography.CspKeyContainerInfo : object {
    public bool Accessible { get; }
    public bool Exportable { get; }
    public bool HardwareDevice { get; }
    public string KeyContainerName { get; }
    public KeyNumber KeyNumber { get; }
    public bool MachineKeyStore { get; }
    public bool Protected { get; }
    public string ProviderName { get; }
    public int ProviderType { get; }
    public bool RandomlyGenerated { get; }
    public bool Removable { get; }
    public string UniqueKeyContainerName { get; }
    public CspKeyContainerInfo(CspParameters parameters);
    public bool get_Accessible();
    public bool get_Exportable();
    public bool get_HardwareDevice();
    public string get_KeyContainerName();
    public KeyNumber get_KeyNumber();
    public bool get_MachineKeyStore();
    public bool get_Protected();
    public string get_ProviderName();
    public int get_ProviderType();
    public bool get_RandomlyGenerated();
    public bool get_Removable();
    public string get_UniqueKeyContainerName();
}
public class System.Security.Cryptography.CspParameters : object {
    public string KeyContainerName;
    public int KeyNumber;
    public string ProviderName;
    public int ProviderType;
    public CspProviderFlags Flags { get; public set; }
    public IntPtr ParentWindowHandle { get; public set; }
    public CspParameters(int dwTypeIn);
    public CspParameters(int dwTypeIn, string strProviderNameIn);
    public CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
    public CspProviderFlags get_Flags();
    public void set_Flags(CspProviderFlags value);
    public IntPtr get_ParentWindowHandle();
    public void set_ParentWindowHandle(IntPtr value);
}
[FlagsAttribute]
public enum System.Security.Cryptography.CspProviderFlags : Enum {
    public int value__;
    public static CspProviderFlags CreateEphemeralKey;
    public static CspProviderFlags NoFlags;
    public static CspProviderFlags NoPrompt;
    public static CspProviderFlags UseArchivableKey;
    public static CspProviderFlags UseDefaultKeyContainer;
    public static CspProviderFlags UseExistingKey;
    public static CspProviderFlags UseMachineKeyStore;
    public static CspProviderFlags UseNonExportableKey;
    public static CspProviderFlags UseUserProtectedKey;
}
public interface System.Security.Cryptography.ICspAsymmetricAlgorithm {
    public CspKeyContainerInfo CspKeyContainerInfo { get; }
    public abstract virtual CspKeyContainerInfo get_CspKeyContainerInfo();
    public abstract virtual Byte[] ExportCspBlob(bool includePrivateParameters);
    public abstract virtual void ImportCspBlob(Byte[] rawData);
}
public enum System.Security.Cryptography.KeyNumber : Enum {
    public int value__;
    public static KeyNumber Exchange;
    public static KeyNumber Signature;
}
public class System.Security.Cryptography.RSACryptoServiceProvider : RSA {
    public CspKeyContainerInfo CspKeyContainerInfo { get; }
    public int KeySize { get; }
    public KeySizes[] LegalKeySizes { get; }
    public bool PersistKeyInCsp { get; public set; }
    public bool PublicOnly { get; }
    public static bool UseMachineKeyStore { get; public set; }
    public RSACryptoServiceProvider(int dwKeySize);
    public RSACryptoServiceProvider(int dwKeySize, CspParameters parameters);
    public RSACryptoServiceProvider(CspParameters parameters);
    public sealed virtual CspKeyContainerInfo get_CspKeyContainerInfo();
    public virtual int get_KeySize();
    public virtual KeySizes[] get_LegalKeySizes();
    public bool get_PersistKeyInCsp();
    public void set_PersistKeyInCsp(bool value);
    public bool get_PublicOnly();
    public static bool get_UseMachineKeyStore();
    public static void set_UseMachineKeyStore(bool value);
    public Byte[] Decrypt(Byte[] rgb, bool fOAEP);
    public virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    protected virtual void Dispose(bool disposing);
    public Byte[] Encrypt(Byte[] rgb, bool fOAEP);
    public virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public sealed virtual Byte[] ExportCspBlob(bool includePrivateParameters);
    public virtual RSAParameters ExportParameters(bool includePrivateParameters);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public sealed virtual void ImportCspBlob(Byte[] keyBlob);
    public virtual void ImportParameters(RSAParameters parameters);
    public Byte[] SignData(Byte[] buffer, int offset, int count, object halg);
    public Byte[] SignData(Byte[] buffer, object halg);
    public Byte[] SignData(Stream inputStream, object halg);
    public virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public Byte[] SignHash(Byte[] rgbHash, string str);
    public bool VerifyData(Byte[] buffer, object halg, Byte[] signature);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public bool VerifyHash(Byte[] rgbHash, string str, Byte[] rgbSignature);
}
