internal static class FxResources.System.Security.Cryptography.Csp.SR : object {
}
[ExtensionAttribute]
internal static class Internal.Cryptography.CryptoThrowHelper : object {
    [ExtensionAttribute]
public static CryptographicException ToCryptographicException(int hr);
}
[ExtensionAttribute]
internal static class Internal.Cryptography.Helpers : object {
    [ExtensionAttribute]
public static Byte[] CloneByteArray(Byte[] src);
}
[ExtensionAttribute]
internal static class Internal.NativeCrypto.CapiHelper : object {
    internal static int S_OK;
    internal static int E_FAIL;
    internal static int DefaultRsaProviderType;
    internal static int ALG_TYPE_RSA;
    internal static int ALG_TYPE_DSS;
    internal static int ALG_CLASS_SIGNATURE;
    internal static int ALG_CLASS_KEY_EXCHANGE;
    internal static int CALG_RSA_SIGN;
    internal static int CALG_DSS_SIGN;
    internal static int CALG_RSA_KEYX;
    internal static int ALG_CLASS_HASH;
    internal static int ALG_TYPE_ANY;
    internal static int CALG_MD5;
    internal static int CALG_SHA1;
    internal static int CALG_SHA_256;
    internal static int CALG_SHA_384;
    internal static int CALG_SHA_512;
    internal static string OID_OIWSEC_SHA256;
    internal static string OID_OIWSEC_SHA384;
    internal static string OID_OIWSEC_SHA512;
    internal static int PUBLICKEYBLOB;
    internal static int PRIVATEKEYBLOB;
    internal static byte BLOBHEADER_CURRENT_BVERSION;
    internal static int CRYPT_BLOB_VER3;
    internal static int RSA_PUB_MAGIC;
    internal static int RSA_PRIV_MAGIC;
    internal static string MS_DEF_DH_SCHANNEL_PROV;
    internal static string MS_DEF_DSS_DH_PROV;
    internal static string MS_DEF_DSS_PROV;
    internal static string MS_DEF_PROV;
    internal static string MS_DEF_RSA_SCHANNEL_PROV;
    internal static string MS_DEF_RSA_SIG_PROV;
    internal static string MS_ENH_DSS_DH_PROV;
    internal static string MS_ENH_RSA_AES_PROV;
    internal static string MS_ENHANCED_PROV;
    internal static string MS_SCARD_PROV;
    internal static string MS_STRONG_PROV;
    public static string UpgradeDSS(int dwProvType, string wszProvider);
    public static string UpgradeRSA(int dwProvType, string wszProvider);
    internal static string GetDefaultProvider(int dwType);
    private static void CreateCSP(CspParameters parameters, bool randomKeyContainer, SafeProvHandle& safeProvHandle);
    private static int AcquireCryptContext(SafeProvHandle& safeProvHandle, string keyContainer, string providerName, int providerType, UInt32 flags);
    public static bool CryptAcquireContext(SafeProvHandle& psafeProvHandle, string pszContainer, string pszProvider, int dwProvType, UInt32 dwFlags);
    internal static void AcquireCsp(CspParameters cspParameters, SafeProvHandle& safeProvHandle);
    public static int OpenCSP(CspParameters cspParameters, UInt32 flags, SafeProvHandle& safeProvHandle);
    internal static SafeProvHandle CreateProvHandle(CspParameters parameters, bool randomKeyContainer);
    internal static bool IsFlagBitSet(UInt32 dwImp, UInt32 flag);
    internal static int GetProviderParameterWorker(SafeProvHandle safeProvHandle, Byte[] impType, Int32& cb, CryptGetProvParam flags);
    public static object GetProviderParameter(SafeProvHandle safeProvHandle, int keyNumber, int keyParam);
    internal static int GetUserKey(SafeProvHandle safeProvHandle, int keySpec, SafeKeyHandle& safeKeyHandle);
    internal static int GenerateKey(SafeProvHandle safeProvHandle, int algID, int flags, UInt32 keySize, SafeKeyHandle& safeKeyHandle);
    internal static int MapCspKeyFlags(int flags);
    internal static UInt32 MapCspProviderFlags(int flags);
    internal static void VerifyValidHandle(SafeHandleZeroOrMinusOneIsInvalid handle);
    internal static Byte[] GetKeyParameter(SafeKeyHandle safeKeyHandle, int keyParam);
    internal static CspParameters SaveCspParameters(CspAlgorithmType keyType, CspParameters userParameters, CspProviderFlags defaultFlags, Boolean& randomKeyContainer);
    private static void ValidateCspFlags(CspProviderFlags flags);
    internal static SafeKeyHandle GetKeyPairHelper(CspAlgorithmType keyType, CspParameters parameters, int keySize, SafeProvHandle safeProvHandle);
    internal static int GetErrorCode();
    internal static bool GetPersistKeyInCsp(SafeProvHandle safeProvHandle);
    internal static void SetPersistKeyInCsp(SafeProvHandle safeProvHandle, bool fPersistKeyInCsp);
    internal static void DecryptKey(SafeKeyHandle safeKeyHandle, Byte[] encryptedData, int encryptedDataLength, bool fOAEP, Byte[]& decryptedData);
    internal static void EncryptKey(SafeKeyHandle safeKeyHandle, Byte[] pbKey, int cbKey, bool foep, Byte[]& pbEncryptedKey);
    internal static void ImportKeyBlob(SafeProvHandle saveProvHandle, CspProviderFlags flags, Byte[] keyBlob, SafeKeyHandle& safeKeyHandle);
    internal static Byte[] ExportKeyBlob(bool includePrivateParameters, SafeKeyHandle safeKeyHandle);
    [ExtensionAttribute]
internal static Byte[] ToKeyBlob(RSAParameters rsaParameters, int algId);
    [ExtensionAttribute]
private static void WriteReversed(BinaryWriter bw, Byte[] bytes);
    [ExtensionAttribute]
internal static RSAParameters ToRSAParameters(Byte[] cspBlob, bool includePrivateParameters);
    private static Byte[] ExponentAsBytes(UInt32 exponent);
    [ExtensionAttribute]
private static Byte[] ReadReversed(BinaryReader br, int count);
    public static int NameOrOidToHashAlgId(string nameOrOid);
    public static int ObjToHashAlgId(object hashAlg);
    internal static HashAlgorithm ObjToHashAlgorithm(object hashAlg);
    private static int GetAlgIdFromOid(string oid, OidGroup oidGroup);
    public static Byte[] SignValue(SafeProvHandle hProv, SafeKeyHandle hKey, int keyNumber, int calgKey, int calgHash, Byte[] hash);
    public static bool VerifySign(SafeProvHandle hProv, SafeKeyHandle hKey, int calgKey, int calgHash, Byte[] hash, Byte[] signature);
    [ExtensionAttribute]
private static SafeHashHandle CreateHashHandle(SafeProvHandle hProv, Byte[] hash, int calgHash);
    public static bool CryptReleaseContext(IntPtr safeProvHandle, int dwFlags);
    public static bool CryptDestroyKey(IntPtr hKey);
    public static bool CryptDestroyHash(IntPtr hHash);
}
internal class Internal.NativeCrypto.CRYPT_OID_INFO : ValueType {
    public int cbSize;
    public IntPtr pszOID;
    public IntPtr pwszName;
    public OidGroup dwGroupId;
    public int AlgId;
    public int cbData;
    public IntPtr pbData;
    public string OID { get; }
    public string Name { get; }
    public string get_OID();
    public string get_Name();
}
internal enum Internal.NativeCrypto.CryptOidInfoKeyType : Enum {
    public int value__;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_OID_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_NAME_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_ALGID_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_SIGN_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_CNG_ALGID_KEY;
    public static CryptOidInfoKeyType CRYPT_OID_INFO_CNG_SIGN_KEY;
}
internal static class Internal.NativeCrypto.OidInfo : object {
    private static string Capi2Dll;
    public static CRYPT_OID_INFO FindOidInfo(CryptOidInfoKeyType keyType, string key, OidGroup group, bool fallBackToAllGroups);
    private static bool OidGroupWillNotUseActiveDirectory(OidGroup group);
    private static IntPtr CryptFindOIDInfo(CryptOidInfoKeyType dwKeyType, IntPtr pvKey, OidGroup group);
}
internal static class Interop : object {
}
internal static class Microsoft.Win32.SafeHandles.SafeHandleCache`1 : object {
    private static T s_invalidHandle;
    internal static T GetInvalidHandle(Func`1<T> invalidHandleFactory);
    internal static bool IsCachedInvalidHandle(SafeHandle handle);
}
internal abstract class Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid : SafeHandle {
    public bool IsInvalid { get; }
    protected SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle);
    public virtual bool get_IsInvalid();
}
internal static class System.Security.Cryptography.Constants : object {
    internal static int CLR_KEYLEN;
    internal static int CLR_PUBLICKEYONLY;
    internal static int CLR_EXPORTABLE;
    internal static int CLR_REMOVABLE;
    internal static int CLR_HARDWARE;
    internal static int CLR_ACCESSIBLE;
    internal static int CLR_PROTECTED;
    internal static int CLR_UNIQUE_CONTAINER;
    internal static int CLR_ALGID;
    internal static int CLR_PP_CLIENT_HWND;
    internal static int CLR_PP_PIN;
    internal static int SIZE_OF_DWORD;
}
public class System.Security.Cryptography.CspKeyContainerInfo : object {
    private CspParameters _parameters;
    private bool _randomKeyContainer;
    public bool Accessible { get; }
    public bool Exportable { get; }
    public bool HardwareDevice { get; }
    public string KeyContainerName { get; }
    public KeyNumber KeyNumber { get; }
    public bool MachineKeyStore { get; }
    public bool Protected { get; }
    public string ProviderName { get; }
    public int ProviderType { get; }
    public bool RandomlyGenerated { get; }
    public bool Removable { get; }
    public string UniqueKeyContainerName { get; }
    public CspKeyContainerInfo(CspParameters parameters);
    internal CspKeyContainerInfo(CspParameters parameters, bool randomKeyContainer);
    public bool get_Accessible();
    public bool get_Exportable();
    public bool get_HardwareDevice();
    public string get_KeyContainerName();
    public KeyNumber get_KeyNumber();
    public bool get_MachineKeyStore();
    public bool get_Protected();
    public string get_ProviderName();
    public int get_ProviderType();
    public bool get_RandomlyGenerated();
    public bool get_Removable();
    public string get_UniqueKeyContainerName();
    private object ReadKeyParameterSilent(int keyParam, bool throwOnNotFound);
    private object ReadDeviceParameterVerifyContext(int keyParam);
}
public class System.Security.Cryptography.CspParameters : object {
    public int ProviderType;
    public string ProviderName;
    public string KeyContainerName;
    public int KeyNumber;
    private int _flags;
    private IntPtr _parentWindowHandle;
    public CspProviderFlags Flags { get; public set; }
    public IntPtr ParentWindowHandle { get; public set; }
    public CspParameters(int dwTypeIn);
    public CspParameters(int dwTypeIn, string strProviderNameIn);
    public CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
    internal CspParameters(int providerType, string providerName, string keyContainerName, CspProviderFlags flags);
    internal CspParameters(CspParameters parameters);
    public CspProviderFlags get_Flags();
    public void set_Flags(CspProviderFlags value);
    public IntPtr get_ParentWindowHandle();
    public void set_ParentWindowHandle(IntPtr value);
}
[FlagsAttribute]
public enum System.Security.Cryptography.CspProviderFlags : Enum {
    public int value__;
    public static CspProviderFlags NoFlags;
    public static CspProviderFlags UseMachineKeyStore;
    public static CspProviderFlags UseDefaultKeyContainer;
    public static CspProviderFlags UseNonExportableKey;
    public static CspProviderFlags UseExistingKey;
    public static CspProviderFlags UseArchivableKey;
    public static CspProviderFlags UseUserProtectedKey;
    public static CspProviderFlags NoPrompt;
    public static CspProviderFlags CreateEphemeralKey;
}
public interface System.Security.Cryptography.ICspAsymmetricAlgorithm {
    public CspKeyContainerInfo CspKeyContainerInfo { get; }
    public abstract virtual CspKeyContainerInfo get_CspKeyContainerInfo();
    public abstract virtual Byte[] ExportCspBlob(bool includePrivateParameters);
    public abstract virtual void ImportCspBlob(Byte[] rawData);
}
public enum System.Security.Cryptography.KeyNumber : Enum {
    public int value__;
    public static KeyNumber Exchange;
    public static KeyNumber Signature;
}
public class System.Security.Cryptography.RSACryptoServiceProvider : RSA {
    private int _keySize;
    private CspParameters _parameters;
    private bool _randomKeyContainer;
    private SafeKeyHandle _safeKeyHandle;
    private SafeProvHandle _safeProvHandle;
    private static CspProviderFlags modreq(System.Runtime.CompilerServices.IsVolatile) s_useMachineKeyStore;
    private SafeProvHandle SafeProvHandle { get; private set; }
    private SafeKeyHandle SafeKeyHandle { get; private set; }
    public CspKeyContainerInfo CspKeyContainerInfo { get; }
    public int KeySize { get; }
    public KeySizes[] LegalKeySizes { get; }
    public bool PersistKeyInCsp { get; public set; }
    public bool PublicOnly { get; }
    public static bool UseMachineKeyStore { get; public set; }
    public RSACryptoServiceProvider(int dwKeySize);
    public RSACryptoServiceProvider(int dwKeySize, CspParameters parameters);
    public RSACryptoServiceProvider(CspParameters parameters);
    private RSACryptoServiceProvider(int keySize, CspParameters parameters, bool useDefaultKeySize);
    private static RSACryptoServiceProvider();
    private SafeProvHandle get_SafeProvHandle();
    private void set_SafeProvHandle(SafeProvHandle value);
    private SafeKeyHandle get_SafeKeyHandle();
    private void set_SafeKeyHandle(SafeKeyHandle value);
    public sealed virtual CspKeyContainerInfo get_CspKeyContainerInfo();
    public virtual int get_KeySize();
    public virtual KeySizes[] get_LegalKeySizes();
    public bool get_PersistKeyInCsp();
    public void set_PersistKeyInCsp(bool value);
    public bool get_PublicOnly();
    public static bool get_UseMachineKeyStore();
    public static void set_UseMachineKeyStore(bool value);
    public Byte[] Decrypt(Byte[] rgb, bool fOAEP);
    protected virtual void Dispose(bool disposing);
    public Byte[] Encrypt(Byte[] rgb, bool fOAEP);
    public sealed virtual Byte[] ExportCspBlob(bool includePrivateParameters);
    public virtual RSAParameters ExportParameters(bool includePrivateParameters);
    private SafeProvHandle AcquireSafeProviderHandle();
    public sealed virtual void ImportCspBlob(Byte[] keyBlob);
    public virtual void ImportParameters(RSAParameters parameters);
    public Byte[] SignData(Byte[] buffer, int offset, int count, object halg);
    public Byte[] SignData(Byte[] buffer, object halg);
    public Byte[] SignData(Stream inputStream, object halg);
    public Byte[] SignHash(Byte[] rgbHash, string str);
    private Byte[] SignHash(Byte[] rgbHash, int calgHash);
    public bool VerifyData(Byte[] buffer, object halg, Byte[] signature);
    public bool VerifyHash(Byte[] rgbHash, string str, Byte[] rgbSignature);
    private bool VerifyHash(Byte[] rgbHash, int calgHash, Byte[] rgbSignature);
    private static bool IsPublic(Byte[] keyBlob);
    private static bool IsPublic(RSAParameters rsaParams);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    private static HashAlgorithm GetHashAlgorithm(HashAlgorithmName hashAlgorithm);
    private static int GetAlgorithmId(HashAlgorithmName hashAlgorithm);
    public virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    private static Exception PaddingModeNotSupported();
    private static Exception HashAlgorithmNameNullOrEmpty();
}
[SecurityCriticalAttribute]
internal class System.Security.Cryptography.SafeHashHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private SafeProvHandle _parent;
    internal static SafeHashHandle InvalidHandle { get; }
    internal void SetParent(SafeProvHandle parent);
    internal static SafeHashHandle get_InvalidHandle();
    protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
}
[SecurityCriticalAttribute]
internal class System.Security.Cryptography.SafeKeyHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private int _keySpec;
    private bool _fPublicOnly;
    private SafeProvHandle _parent;
    internal int KeySpec { get; internal set; }
    internal bool PublicOnly { get; internal set; }
    internal static SafeKeyHandle InvalidHandle { get; }
    internal int get_KeySpec();
    internal void set_KeySpec(int value);
    internal bool get_PublicOnly();
    internal void set_PublicOnly(bool value);
    internal void SetParent(SafeProvHandle parent);
    internal static SafeKeyHandle get_InvalidHandle();
    protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
}
[SecurityCriticalAttribute]
internal class System.Security.Cryptography.SafeProvHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private string _containerName;
    private string _providerName;
    private int _type;
    private UInt32 _flags;
    private bool _fPersistKeyInCsp;
    internal string ContainerName { get; internal set; }
    internal string ProviderName { get; internal set; }
    internal int Types { get; internal set; }
    internal UInt32 Flags { get; internal set; }
    internal bool PersistKeyInCsp { get; internal set; }
    internal static SafeProvHandle InvalidHandle { get; }
    internal string get_ContainerName();
    internal void set_ContainerName(string value);
    internal string get_ProviderName();
    internal void set_ProviderName(string value);
    internal int get_Types();
    internal void set_Types(int value);
    internal UInt32 get_Flags();
    internal void set_Flags(UInt32 value);
    internal bool get_PersistKeyInCsp();
    internal void set_PersistKeyInCsp(bool value);
    internal static SafeProvHandle get_InvalidHandle();
    protected virtual void Dispose(bool disposing);
    protected virtual bool ReleaseHandle();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_CryptographyException { get; }
    internal static string Arg_EnumIllegalVal { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string Argument_InvalidValue { get; }
    internal static string Argument_StreamNotReadable { get; }
    internal static string Argument_StreamNotWritable { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string CryptDecrypt_Failed { get; }
    internal static string CryptEncrypt_Failed { get; }
    internal static string CryptExportKey_Failed { get; }
    internal static string CryptGenKey_Failed { get; }
    internal static string CryptGetDefaultProvider_Fail { get; }
    internal static string CryptGetKeyParam_Failed { get; }
    internal static string CryptGetProvParam_Failed { get; }
    internal static string CryptGetUserKey_Failed { get; }
    internal static string Cryptography_CryptoStream_FlushFinalBlockTwice { get; }
    internal static string Cryptography_CSP_NoPrivateKey { get; }
    internal static string Cryptography_CSP_NotFound { get; }
    internal static string Cryptography_CSP_WrongKeySpec { get; }
    internal static string Cryptography_HashAlgorithmNameNullOrEmpty { get; }
    internal static string Cryptography_InvalidBlockSize { get; }
    internal static string Cryptography_InvalidCipherMode { get; }
    internal static string Cryptography_InvalidFeedbackSize { get; }
    internal static string Cryptography_InvalidIVSize { get; }
    internal static string Cryptography_InvalidKeySize { get; }
    internal static string Cryptography_InvalidOID { get; }
    internal static string Cryptography_InvalidPaddingMode { get; }
    internal static string Cryptography_OpenInvalidHandle { get; }
    internal static string Cryptography_Padding_DecDataTooBig { get; }
    internal static string Cryptography_UnknownHashAlgorithm { get; }
    internal static string CspParameter_invalid { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string OpenCSP_Failed { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_CryptographyException();
    internal static string get_Arg_EnumIllegalVal();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_Argument_InvalidValue();
    internal static string get_Argument_StreamNotReadable();
    internal static string get_Argument_StreamNotWritable();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_CryptDecrypt_Failed();
    internal static string get_CryptEncrypt_Failed();
    internal static string get_CryptExportKey_Failed();
    internal static string get_CryptGenKey_Failed();
    internal static string get_CryptGetDefaultProvider_Fail();
    internal static string get_CryptGetKeyParam_Failed();
    internal static string get_CryptGetProvParam_Failed();
    internal static string get_CryptGetUserKey_Failed();
    internal static string get_Cryptography_CryptoStream_FlushFinalBlockTwice();
    internal static string get_Cryptography_CSP_NoPrivateKey();
    internal static string get_Cryptography_CSP_NotFound();
    internal static string get_Cryptography_CSP_WrongKeySpec();
    internal static string get_Cryptography_HashAlgorithmNameNullOrEmpty();
    internal static string get_Cryptography_InvalidBlockSize();
    internal static string get_Cryptography_InvalidCipherMode();
    internal static string get_Cryptography_InvalidFeedbackSize();
    internal static string get_Cryptography_InvalidIVSize();
    internal static string get_Cryptography_InvalidKeySize();
    internal static string get_Cryptography_InvalidOID();
    internal static string get_Cryptography_InvalidPaddingMode();
    internal static string get_Cryptography_OpenInvalidHandle();
    internal static string get_Cryptography_Padding_DecDataTooBig();
    internal static string get_Cryptography_UnknownHashAlgorithm();
    internal static string get_CspParameter_invalid();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_OpenCSP_Failed();
    internal static Type get_ResourceType();
}
