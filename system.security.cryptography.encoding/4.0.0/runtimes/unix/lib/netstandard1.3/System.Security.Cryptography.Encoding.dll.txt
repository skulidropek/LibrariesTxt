internal static class FxResources.System.Security.Cryptography.Encoding.SR : object {
}
internal abstract class Internal.Cryptography.AsnFormatter : object {
    private static Char[] s_hexValues;
    private static AsnFormatter s_instance;
    internal static AsnFormatter Instance { get; }
    private static AsnFormatter();
    internal static AsnFormatter get_Instance();
    public string Format(Oid oid, Byte[] rawData, bool multiLine);
    protected abstract virtual string FormatNative(Oid oid, Byte[] rawData, bool multiLine);
    protected static string EncodeHexString(Byte[] sArray, bool spaceSeparated);
    private static string EncodeHexString(Byte[] sArray, UInt32 start, UInt32 end, bool spaceSeparated);
}
[ExtensionAttribute]
internal static class Internal.Cryptography.Helpers : object {
    [ExtensionAttribute]
public static Byte[] CloneByteArray(Byte[] src);
}
internal static class Internal.Cryptography.OidLookup : object {
    private static ConcurrentDictionary`2<string, string> s_lateBoundOidToFriendlyName;
    private static ConcurrentDictionary`2<string, string> s_lateBoundFriendlyNameToOid;
    private static Dictionary`2<string, string> s_friendlyNameToOid;
    private static Dictionary`2<string, string> s_oidToFriendlyName;
    private static Dictionary`2<string, string> s_compatOids;
    private static OidLookup();
    public static string ToFriendlyName(string oid, OidGroup oidGroup, bool fallBackToAllGroups);
    public static string ToOid(string friendlyName, OidGroup oidGroup, bool fallBackToAllGroups);
    private static bool ShouldUseCache(OidGroup oidGroup);
    private static string NativeOidToFriendlyName(string oid, OidGroup oidGroup, bool fallBackToAllGroups);
    private static string NativeFriendlyNameToOid(string friendlyName, OidGroup oidGroup, bool fallBackToAllGroups);
}
internal class Internal.Cryptography.OpenSslAsnFormatter : AsnFormatter {
    protected virtual string FormatNative(Oid oid, Byte[] rawData, bool multiLine);
}
internal static class Interop : object {
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeAsn1BitStringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeAsn1ObjectHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeAsn1OctetStringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeAsn1StringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeBioHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeEkuExtensionHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal abstract class Microsoft.Win32.SafeHandles.SafeInteriorHandle : SafeHandle {
    private SafeHandle _parent;
    public bool IsInvalid { get; }
    protected SafeInteriorHandle(IntPtr invalidHandleValue, bool ownsHandle);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    internal void SetParent(SafeHandle parent);
    internal static TInteriorHandle OpenInteriorHandle(Func`2<TExteriorHandle, TInteriorHandle> accessor, TExteriorHandle exteriorHandle);
    internal static TInteriorHandle OpenInteriorHandle(Func`3<TExteriorHandle, TArg1, TInteriorHandle> accessor, TExteriorHandle exteriorHandle, TArg1 arg1);
}
internal class Microsoft.Win32.SafeHandles.SafeSharedAsn1IntegerHandle : SafeInteriorHandle {
}
internal class Microsoft.Win32.SafeHandles.SafeSharedAsn1ObjectHandle : SafeInteriorHandle {
}
internal class Microsoft.Win32.SafeHandles.SafeSharedAsn1StringHandle : SafeInteriorHandle {
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeX509ExtensionHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
public class System.Security.Cryptography.AsnEncodedData : object {
    private Oid _oid;
    private Byte[] _rawData;
    public Oid Oid { get; public set; }
    public Byte[] RawData { get; public set; }
    public AsnEncodedData(Byte[] rawData);
    public AsnEncodedData(AsnEncodedData asnEncodedData);
    public AsnEncodedData(Oid oid, Byte[] rawData);
    public AsnEncodedData(string oid, Byte[] rawData);
    public Oid get_Oid();
    public void set_Oid(Oid value);
    public Byte[] get_RawData();
    public void set_RawData(Byte[] value);
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
    public virtual string Format(bool multiLine);
    private void Reset(Oid oid, Byte[] rawData);
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.AsnEncodedDataCollection : object {
    private List`1<AsnEncodedData> _list;
    public AsnEncodedData Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public AsnEncodedDataCollection(AsnEncodedData asnEncodedData);
    public int Add(AsnEncodedData asnEncodedData);
    public void Remove(AsnEncodedData asnEncodedData);
    public AsnEncodedData get_Item(int index);
    public sealed virtual int get_Count();
    public AsnEncodedDataEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(AsnEncodedData[] array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class System.Security.Cryptography.AsnEncodedDataEnumerator : object {
    private AsnEncodedDataCollection _asnEncodedDatas;
    private int _current;
    public AsnEncodedData Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal AsnEncodedDataEnumerator(AsnEncodedDataCollection asnEncodedDatas);
    public AsnEncodedData get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.Oid : object {
    private string _value;
    private string _friendlyName;
    private OidGroup _group;
    public string Value { get; public set; }
    public string FriendlyName { get; public set; }
    public Oid(string oid);
    public Oid(string value, string friendlyName);
    public Oid(Oid oid);
    private Oid(string value, string friendlyName, OidGroup group);
    public static Oid FromFriendlyName(string friendlyName, OidGroup group);
    public static Oid FromOidValue(string oidValue, OidGroup group);
    public string get_Value();
    public void set_Value(string value);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.OidCollection : object {
    private List`1<Oid> _list;
    public Oid Item { get; }
    public Oid Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Add(Oid oid);
    public Oid get_Item(int index);
    public Oid get_Item(string oid);
    public sealed virtual int get_Count();
    public OidEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(Oid[] array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class System.Security.Cryptography.OidEnumerator : object {
    private OidCollection _oids;
    private int _current;
    public Oid Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal OidEnumerator(OidCollection oids);
    public Oid get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Security.Cryptography.OidGroup : Enum {
    public int value__;
    public static OidGroup All;
    public static OidGroup HashAlgorithm;
    public static OidGroup EncryptionAlgorithm;
    public static OidGroup PublicKeyAlgorithm;
    public static OidGroup SignatureAlgorithm;
    public static OidGroup Attribute;
    public static OidGroup ExtensionOrAttribute;
    public static OidGroup EnhancedKeyUsage;
    public static OidGroup Policy;
    public static OidGroup Template;
    public static OidGroup KeyDerivationFunction;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Cryptography_Oid_InvalidValue { get; }
    internal static string Cryptography_Oid_InvalidName { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string ArgumentOutOfRange_Index { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Cryptography_Oid_InvalidValue();
    internal static string get_Cryptography_Oid_InvalidName();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_ArgumentOutOfRange_Index();
    internal static string get_Argument_InvalidOffLen();
    internal static Type get_ResourceType();
}
