internal static class FxResources.System.Security.Cryptography.OpenSsl.SR : object {
}
internal class Internal.Cryptography.OpenSslAsymmetricAlgorithmCore : ValueType {
    public static Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public static Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    private static HashAlgorithm GetHashAlgorithm(HashAlgorithmName hashAlgorithmName);
}
internal static class Interop : object {
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeAsn1BitStringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeAsn1ObjectHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeAsn1OctetStringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeAsn1StringHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeBignumHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal SafeBignumHandle(IntPtr handle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeEcKeyHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    internal static SafeEcKeyHandle DuplicateHandle(IntPtr handle);
}
internal abstract class Microsoft.Win32.SafeHandles.SafeInteriorHandle : SafeHandle {
    private SafeHandle _parent;
    public bool IsInvalid { get; }
    protected SafeInteriorHandle(IntPtr invalidHandleValue, bool ownsHandle);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    internal void SetParent(SafeHandle parent);
    internal static TInteriorHandle OpenInteriorHandle(Func`2<TExteriorHandle, TInteriorHandle> accessor, TExteriorHandle exteriorHandle);
    internal static TInteriorHandle OpenInteriorHandle(Func`3<TExteriorHandle, TArg1, TInteriorHandle> accessor, TExteriorHandle exteriorHandle, TArg1 arg1);
}
[SecurityCriticalAttribute]
internal class Microsoft.Win32.SafeHandles.SafeRsaHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    internal static SafeRsaHandle DuplicateHandle(IntPtr handle);
}
internal class Microsoft.Win32.SafeHandles.SafeSharedAsn1IntegerHandle : SafeInteriorHandle {
}
internal class Microsoft.Win32.SafeHandles.SafeSharedAsn1ObjectHandle : SafeInteriorHandle {
}
internal class Microsoft.Win32.SafeHandles.SafeSharedAsn1StringHandle : SafeInteriorHandle {
}
internal static class System.Security.Cryptography.DerEncoder : object {
    private static byte ConstructedFlag;
    private static byte ConstructedSequenceTag;
    private static byte ConstructedSetTag;
    private static Byte[] EncodeLength(int length);
    internal static Byte[][] SegmentedEncodeBoolean(bool value);
    internal static Byte[][] SegmentedEncodeUnsignedInteger(Byte[] bigEndianBytes);
    internal static Byte[][] SegmentedEncodeUnsignedInteger(Byte[] bigEndianBytes, int offset, int count);
    internal static Byte[][] SegmentedEncodeBitString(Byte[] data);
    internal static Byte[][] SegmentedEncodeBitString(int unusedBits, Byte[] data);
    internal static Byte[][] SegmentedEncodeNamedBitList(Byte[] bigEndianBytes, int namedBitsCount);
    internal static Byte[][] SegmentedEncodeOctetString(Byte[] data);
    internal static Byte[][] SegmentedEncodeOid(Oid oid);
    internal static Byte[][] SegmentedEncodeUtf8String(Char[] chars);
    internal static Byte[][] SegmentedEncodeUtf8String(Char[] chars, int offset, int count);
    internal static Byte[][] ConstructSegmentedSequence(Byte[][][] items);
    internal static Byte[][] ConstructSegmentedSet(Byte[][][] items);
    internal static bool IsValidPrintableString(Char[] chars);
    internal static bool IsValidPrintableString(Char[] chars, int offset, int count);
    internal static Byte[][] SegmentedEncodePrintableString(Char[] chars);
    internal static Byte[][] SegmentedEncodePrintableString(Char[] chars, int offset, int count);
    internal static Byte[][] SegmentedEncodeIA5String(Char[] chars);
    internal static Byte[][] SegmentedEncodeIA5String(Char[] chars, int offset, int count);
    internal static Byte[] ConstructSequence(Byte[][][] items);
    internal static Byte[] ConstructSequence(IEnumerable`1<Byte[][]> items);
    private static BigInteger ParseOidRid(string oidValue, Int32& startIndex);
    private static int AtoI(char c);
    private static void EncodeRid(List`1<byte> encodedData, BigInteger& rid);
    private static bool IsPrintableStringCharacter(char c);
    private static Byte[] ConcatenateArrays(Byte[][][] segments);
}
internal class System.Security.Cryptography.DerSequenceReader : object {
    internal static byte ContextSpecificTagFlag;
    private Byte[] _data;
    private int _end;
    private int _position;
    [CompilerGeneratedAttribute]
private int <ContentLength>k__BackingField;
    internal int ContentLength { get; private set; }
    internal bool HasData { get; }
    private DerSequenceReader(bool startAtPayload, Byte[] data);
    internal DerSequenceReader(Byte[] data);
    internal DerSequenceReader(Byte[] data, int offset, int length);
    [CompilerGeneratedAttribute]
internal int get_ContentLength();
    [CompilerGeneratedAttribute]
private void set_ContentLength(int value);
    internal static DerSequenceReader CreateForPayload(Byte[] payload);
    internal bool get_HasData();
    internal byte PeekTag();
    internal void SkipValue();
    internal int ReadInteger();
    internal Byte[] ReadIntegerBytes();
    internal Byte[] ReadOctetString();
    internal string ReadOidAsString();
    internal Oid ReadOid();
    internal DerSequenceReader ReadSequence();
    internal string ReadIA5String();
    private Byte[] ReadContentAsBytes();
    private void EatTag(DerTag expected);
    private static void CheckTag(DerTag expected, Byte[] data, int position);
    private int EatLength();
    private static int ScanContentLength(Byte[] data, int offset, Int32& bytesConsumed);
}
public class System.Security.Cryptography.ECDsaOpenSsl : ECDsa {
    internal static string ECDSA_P256_OID_VALUE;
    internal static string ECDSA_P384_OID_VALUE;
    internal static string ECDSA_P521_OID_VALUE;
    private Lazy`1<SafeEcKeyHandle> _key;
    private bool _skipKeySizeCheck;
    public KeySizes[] LegalKeySizes { get; }
    public int KeySize { get; public set; }
    public ECDsaOpenSsl(SafeEvpPKeyHandle pkeyHandle);
    public ECDsaOpenSsl(ECCurve curve);
    public ECDsaOpenSsl(int keySize);
    public ECDsaOpenSsl(IntPtr handle);
    public SafeEvpPKeyHandle DuplicateKeyHandle();
    private void ForceSetKeySize(int newKeySize);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual Byte[] SignHash(Byte[] hash);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    protected virtual void Dispose(bool disposing);
    private int GetSignatureFieldSize();
    private static Byte[] ConvertToOpenSslFormat(Byte[] input);
    private Byte[] ConvertToApiFormat(Byte[] input, int inputOffset, int inputCount);
    private static void CopySignatureField(Byte[] signatureField, Byte[] response, int offset, int fieldLength);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual void GenerateKey(ECCurve curve);
    private SafeEcKeyHandle GenerateKeyLazy();
    private void FreeKey();
    private void SetKey(SafeEcKeyHandle newKey);
    public virtual void ImportParameters(ECParameters parameters);
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
    private static ECParameters ExportNamedCurveParameters(SafeEcKeyHandle key, bool includePrivateParameters);
    private static ECParameters ExportExplicitCurveParameters(SafeEcKeyHandle key, bool includePrivateParameters);
    private static SafeEcKeyHandle ImportNamedCurveParameters(ECParameters parameters);
    private static SafeEcKeyHandle ImportPrimeCurveParameters(ECParameters parameters);
    private static SafeEcKeyHandle ImportCharacteristic2CurveParameters(ECParameters parameters);
    private static void CheckInvalidKey(SafeEcKeyHandle key);
}
public class System.Security.Cryptography.RSAOpenSsl : RSA {
    private static int BitsPerByte;
    private static Byte[] s_defaultExponent;
    private Lazy`1<SafeRsaHandle> _key;
    private bool _skipKeySizeCheck;
    unknown int KeySize {public set; }
    public KeySizes[] LegalKeySizes { get; }
    public RSAOpenSsl(RSAParameters parameters);
    public RSAOpenSsl(IntPtr handle);
    public RSAOpenSsl(SafeEvpPKeyHandle pkeyHandle);
    public RSAOpenSsl(int keySize);
    private static RSAOpenSsl();
    public SafeEvpPKeyHandle DuplicateKeyHandle();
    public virtual void set_KeySize(int value);
    private void ForceSetKeySize(int newKeySize);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    private static RsaPadding GetInteropPadding(RSAEncryptionPadding padding);
    public virtual RSAParameters ExportParameters(bool includePrivateParameters);
    public virtual void ImportParameters(RSAParameters parameters);
    protected virtual void Dispose(bool disposing);
    private void FreeKey();
    private static void ValidateParameters(RSAParameters& parameters);
    private static bool HasConsistentPrivateKey(RSAParameters& parameters);
    private static void CheckInvalidKey(SafeRsaHandle key);
    private static void CheckReturn(int returnValue);
    private static void CheckBoolReturn(int returnValue);
    private SafeRsaHandle GenerateKey();
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    private Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithmName);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    private bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithmName);
    private static int GetAlgorithmNid(HashAlgorithmName hashAlgorithmName);
    private static Exception PaddingModeNotSupported();
    private static Exception HashAlgorithmNameNullOrEmpty();
}
public class System.Security.Cryptography.SafeEvpPKeyHandle : SafeHandle {
    internal static SafeEvpPKeyHandle InvalidHandle;
    public bool IsInvalid { get; }
    public SafeEvpPKeyHandle(IntPtr handle, bool ownsHandle);
    private static SafeEvpPKeyHandle();
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    public SafeEvpPKeyHandle DuplicateHandle();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_CryptographyException { get; }
    internal static string Argument_InvalidOidValue { get; }
    internal static string Argument_InvalidValue { get; }
    internal static string Cryptography_CSP_NoPrivateKey { get; }
    internal static string Cryptography_HashAlgorithmNameNullOrEmpty { get; }
    internal static string Cryptography_CurveNotSupported { get; }
    internal static string Cryptography_InvalidKeySize { get; }
    internal static string Cryptography_InvalidPaddingMode { get; }
    internal static string Cryptography_OpenInvalidHandle { get; }
    internal static string Cryptography_UnknownHashAlgorithm { get; }
    internal static string Cryptography_UnsupportedEcKeyAlgorithm { get; }
    internal static string Cryptography_Invalid_IA5String { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_CryptographyException();
    internal static string get_Argument_InvalidOidValue();
    internal static string get_Argument_InvalidValue();
    internal static string get_Cryptography_CSP_NoPrivateKey();
    internal static string get_Cryptography_HashAlgorithmNameNullOrEmpty();
    internal static string get_Cryptography_CurveNotSupported();
    internal static string get_Cryptography_InvalidKeySize();
    internal static string get_Cryptography_InvalidPaddingMode();
    internal static string get_Cryptography_OpenInvalidHandle();
    internal static string get_Cryptography_UnknownHashAlgorithm();
    internal static string get_Cryptography_UnsupportedEcKeyAlgorithm();
    internal static string get_Cryptography_Invalid_IA5String();
    internal static Type get_ResourceType();
}
