[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public class System.Security.Cryptography.CryptographicAttributeObject : object {
    public Oid Oid { get; }
    public AsnEncodedDataCollection Values { get; }
    public CryptographicAttributeObject(Oid oid);
    public CryptographicAttributeObject(Oid oid, AsnEncodedDataCollection values);
    public Oid get_Oid();
    [CompilerGeneratedAttribute]
public AsnEncodedDataCollection get_Values();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.CryptographicAttributeObjectCollection : object {
    public int Count { get; }
    public CryptographicAttributeObject Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public CryptographicAttributeObjectCollection(CryptographicAttributeObject attribute);
    public sealed virtual int get_Count();
    public CryptographicAttributeObject get_Item(int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public int Add(AsnEncodedData asnEncodedData);
    public int Add(CryptographicAttributeObject attribute);
    public void CopyTo(CryptographicAttributeObject[] array, int index);
    public CryptographicAttributeObjectEnumerator GetEnumerator();
    public void Remove(CryptographicAttributeObject attribute);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Security.Cryptography.CryptographicAttributeObjectEnumerator : object {
    public CryptographicAttributeObject Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public CryptographicAttributeObject get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.Pkcs.AlgorithmIdentifier : object {
    public int KeyLength { get; public set; }
    public Oid Oid { get; public set; }
    public AlgorithmIdentifier(Oid oid);
    public AlgorithmIdentifier(Oid oid, int keyLength);
    [CompilerGeneratedAttribute]
public int get_KeyLength();
    [CompilerGeneratedAttribute]
public void set_KeyLength(int value);
    [CompilerGeneratedAttribute]
public Oid get_Oid();
    [CompilerGeneratedAttribute]
public void set_Oid(Oid value);
}
public class System.Security.Cryptography.Pkcs.CmsRecipient : object {
    public X509Certificate2 Certificate { get; }
    public SubjectIdentifierType RecipientIdentifierType { get; }
    public CmsRecipient(SubjectIdentifierType recipientIdentifierType, X509Certificate2 certificate);
    public CmsRecipient(X509Certificate2 certificate);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public SubjectIdentifierType get_RecipientIdentifierType();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.CmsRecipientCollection : object {
    public int Count { get; }
    public CmsRecipient Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public CmsRecipientCollection(CmsRecipient recipient);
    public CmsRecipientCollection(SubjectIdentifierType recipientIdentifierType, X509Certificate2Collection certificates);
    public sealed virtual int get_Count();
    public CmsRecipient get_Item(int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public int Add(CmsRecipient recipient);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(CmsRecipient[] array, int index);
    public CmsRecipientEnumerator GetEnumerator();
    public void Remove(CmsRecipient recipient);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Security.Cryptography.Pkcs.CmsRecipientEnumerator : object {
    public CmsRecipient Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public CmsRecipient get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.Pkcs.CmsSigner : object {
    public SubjectIdentifierType SignerIdentifierType { get; public set; }
    public X509Certificate2 Certificate { get; public set; }
    public Oid DigestAlgorithm { get; public set; }
    public CryptographicAttributeObjectCollection SignedAttributes { get; public set; }
    public CryptographicAttributeObjectCollection UnsignedAttributes { get; public set; }
    public X509Certificate2Collection Certificates { get; public set; }
    public X509IncludeOption IncludeOption { get; public set; }
    public CmsSigner(SubjectIdentifierType signerIdentifierType);
    public CmsSigner(X509Certificate2 certificate);
    [EditorBrowsableAttribute("1")]
public CmsSigner(CspParameters parameters);
    public CmsSigner(SubjectIdentifierType signerIdentifierType, X509Certificate2 certificate);
    public SubjectIdentifierType get_SignerIdentifierType();
    public void set_SignerIdentifierType(SubjectIdentifierType value);
    public X509Certificate2 get_Certificate();
    public void set_Certificate(X509Certificate2 value);
    public Oid get_DigestAlgorithm();
    public void set_DigestAlgorithm(Oid value);
    public CryptographicAttributeObjectCollection get_SignedAttributes();
    public void set_SignedAttributes(CryptographicAttributeObjectCollection value);
    public CryptographicAttributeObjectCollection get_UnsignedAttributes();
    public void set_UnsignedAttributes(CryptographicAttributeObjectCollection value);
    public X509Certificate2Collection get_Certificates();
    public void set_Certificates(X509Certificate2Collection value);
    public X509IncludeOption get_IncludeOption();
    public void set_IncludeOption(X509IncludeOption value);
}
public class System.Security.Cryptography.Pkcs.ContentInfo : object {
    public Byte[] Content { get; }
    public Oid ContentType { get; }
    public ContentInfo(Byte[] content);
    public ContentInfo(Oid contentType, Byte[] content);
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
    [CompilerGeneratedAttribute]
public Oid get_ContentType();
    public static Oid GetContentType(Byte[] encodedMessage);
}
public class System.Security.Cryptography.Pkcs.EnvelopedCms : object {
    public X509Certificate2Collection Certificates { get; }
    public AlgorithmIdentifier ContentEncryptionAlgorithm { get; }
    public ContentInfo ContentInfo { get; }
    public RecipientInfoCollection RecipientInfos { get; }
    public CryptographicAttributeObjectCollection UnprotectedAttributes { get; }
    public int Version { get; }
    public EnvelopedCms(ContentInfo contentInfo);
    public EnvelopedCms(ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm);
    [CompilerGeneratedAttribute]
public X509Certificate2Collection get_Certificates();
    [CompilerGeneratedAttribute]
public AlgorithmIdentifier get_ContentEncryptionAlgorithm();
    [CompilerGeneratedAttribute]
public ContentInfo get_ContentInfo();
    public RecipientInfoCollection get_RecipientInfos();
    [CompilerGeneratedAttribute]
public CryptographicAttributeObjectCollection get_UnprotectedAttributes();
    [CompilerGeneratedAttribute]
public int get_Version();
    public void Decode(Byte[] encodedMessage);
    public void Decrypt();
    public void Decrypt(RecipientInfo recipientInfo);
    public void Decrypt(RecipientInfo recipientInfo, X509Certificate2Collection extraStore);
    public void Decrypt(X509Certificate2Collection extraStore);
    public Byte[] Encode();
    public void Encrypt(CmsRecipient recipient);
    public void Encrypt(CmsRecipientCollection recipients);
}
public class System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo : RecipientInfo {
    public DateTime Date { get; }
    public Byte[] EncryptedKey { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public SubjectIdentifierOrKey OriginatorIdentifierOrKey { get; }
    public CryptographicAttributeObject OtherKeyAttribute { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public int Version { get; }
    public DateTime get_Date();
    public virtual Byte[] get_EncryptedKey();
    public virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public SubjectIdentifierOrKey get_OriginatorIdentifierOrKey();
    public CryptographicAttributeObject get_OtherKeyAttribute();
    public virtual SubjectIdentifier get_RecipientIdentifier();
    public virtual int get_Version();
}
public class System.Security.Cryptography.Pkcs.KeyTransRecipientInfo : RecipientInfo {
    public Byte[] EncryptedKey { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public int Version { get; }
    public virtual Byte[] get_EncryptedKey();
    public virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public virtual SubjectIdentifier get_RecipientIdentifier();
    public virtual int get_Version();
}
public class System.Security.Cryptography.Pkcs.Pkcs9AttributeObject : AsnEncodedData {
    public Oid Oid { get; }
    public Pkcs9AttributeObject(AsnEncodedData asnEncodedData);
    public Pkcs9AttributeObject(Oid oid, Byte[] encodedData);
    public Pkcs9AttributeObject(string oid, Byte[] encodedData);
    public Oid get_Oid();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9ContentType : Pkcs9AttributeObject {
    public Oid ContentType { get; }
    public Oid get_ContentType();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription : Pkcs9AttributeObject {
    public string DocumentDescription { get; }
    public Pkcs9DocumentDescription(Byte[] encodedDocumentDescription);
    public Pkcs9DocumentDescription(string documentDescription);
    public string get_DocumentDescription();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9DocumentName : Pkcs9AttributeObject {
    public string DocumentName { get; }
    public Pkcs9DocumentName(Byte[] encodedDocumentName);
    public Pkcs9DocumentName(string documentName);
    public string get_DocumentName();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9MessageDigest : Pkcs9AttributeObject {
    public Byte[] MessageDigest { get; }
    public Byte[] get_MessageDigest();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9SigningTime : Pkcs9AttributeObject {
    public DateTime SigningTime { get; }
    public Pkcs9SigningTime(Byte[] encodedSigningTime);
    public Pkcs9SigningTime(DateTime signingTime);
    public DateTime get_SigningTime();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.PublicKeyInfo : object {
    public AlgorithmIdentifier Algorithm { get; }
    public Byte[] KeyValue { get; }
    [CompilerGeneratedAttribute]
public AlgorithmIdentifier get_Algorithm();
    [CompilerGeneratedAttribute]
public Byte[] get_KeyValue();
}
public abstract class System.Security.Cryptography.Pkcs.RecipientInfo : object {
    public Byte[] EncryptedKey { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public RecipientInfoType Type { get; }
    public int Version { get; }
    public abstract virtual Byte[] get_EncryptedKey();
    public abstract virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public abstract virtual SubjectIdentifier get_RecipientIdentifier();
    [CompilerGeneratedAttribute]
public RecipientInfoType get_Type();
    public abstract virtual int get_Version();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.RecipientInfoCollection : object {
    public int Count { get; }
    public RecipientInfo Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public RecipientInfo get_Item(int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(RecipientInfo[] array, int index);
    public RecipientInfoEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Security.Cryptography.Pkcs.RecipientInfoEnumerator : object {
    public RecipientInfo Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public RecipientInfo get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Security.Cryptography.Pkcs.RecipientInfoType : Enum {
    public int value__;
    public static RecipientInfoType KeyAgreement;
    public static RecipientInfoType KeyTransport;
    public static RecipientInfoType Unknown;
}
public class System.Security.Cryptography.Pkcs.SignedCms : object {
    public int Version { get; }
    public ContentInfo ContentInfo { get; }
    public bool Detached { get; }
    public X509Certificate2Collection Certificates { get; }
    public SignerInfoCollection SignerInfos { get; }
    public SignedCms(SubjectIdentifierType signerIdentifierType);
    public SignedCms(ContentInfo contentInfo);
    public SignedCms(SubjectIdentifierType signerIdentifierType, ContentInfo contentInfo);
    public SignedCms(ContentInfo contentInfo, bool detached);
    public SignedCms(SubjectIdentifierType signerIdentifierType, ContentInfo contentInfo, bool detached);
    public int get_Version();
    public ContentInfo get_ContentInfo();
    public bool get_Detached();
    public X509Certificate2Collection get_Certificates();
    public SignerInfoCollection get_SignerInfos();
    public Byte[] Encode();
    public void Decode(Byte[] encodedMessage);
    [EditorBrowsableAttribute("1")]
public void ComputeSignature();
    public void ComputeSignature(CmsSigner signer);
    public void ComputeSignature(CmsSigner signer, bool silent);
    public void RemoveSignature(int index);
    public void RemoveSignature(SignerInfo signerInfo);
    public void CheckSignature(bool verifySignatureOnly);
    public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly);
    public void CheckHash();
}
public class System.Security.Cryptography.Pkcs.SignerInfo : object {
    public int Version { get; }
    public X509Certificate2 Certificate { get; }
    public SubjectIdentifier SignerIdentifier { get; }
    public Oid DigestAlgorithm { get; }
    public CryptographicAttributeObjectCollection SignedAttributes { get; }
    public CryptographicAttributeObjectCollection UnsignedAttributes { get; }
    public SignerInfoCollection CounterSignerInfos { get; }
    public int get_Version();
    public X509Certificate2 get_Certificate();
    public SubjectIdentifier get_SignerIdentifier();
    public Oid get_DigestAlgorithm();
    public CryptographicAttributeObjectCollection get_SignedAttributes();
    public CryptographicAttributeObjectCollection get_UnsignedAttributes();
    public SignerInfoCollection get_CounterSignerInfos();
    [EditorBrowsableAttribute("1")]
public void ComputeCounterSignature();
    public void ComputeCounterSignature(CmsSigner signer);
    public void RemoveCounterSignature(int index);
    public void RemoveCounterSignature(SignerInfo counterSignerInfo);
    public void CheckSignature(bool verifySignatureOnly);
    public void CheckSignature(X509Certificate2Collection extraStore, bool verifySignatureOnly);
    public void CheckHash();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.SignerInfoCollection : object {
    public SignerInfo Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public SignerInfo get_Item(int index);
    public sealed virtual int get_Count();
    public SignerInfoEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(SignerInfo[] array, int index);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
}
public class System.Security.Cryptography.Pkcs.SignerInfoEnumerator : object {
    public SignerInfo Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public SignerInfo get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.Pkcs.SubjectIdentifier : object {
    public SubjectIdentifierType Type { get; }
    public object Value { get; }
    [CompilerGeneratedAttribute]
public SubjectIdentifierType get_Type();
    [CompilerGeneratedAttribute]
public object get_Value();
}
public class System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey : object {
    public SubjectIdentifierOrKeyType Type { get; }
    public object Value { get; }
    [CompilerGeneratedAttribute]
public SubjectIdentifierOrKeyType get_Type();
    [CompilerGeneratedAttribute]
public object get_Value();
}
public enum System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType : Enum {
    public int value__;
    public static SubjectIdentifierOrKeyType IssuerAndSerialNumber;
    public static SubjectIdentifierOrKeyType PublicKeyInfo;
    public static SubjectIdentifierOrKeyType SubjectKeyIdentifier;
    public static SubjectIdentifierOrKeyType Unknown;
}
public enum System.Security.Cryptography.Pkcs.SubjectIdentifierType : Enum {
    public int value__;
    public static SubjectIdentifierType IssuerAndSerialNumber;
    public static SubjectIdentifierType NoSignature;
    public static SubjectIdentifierType SubjectKeyIdentifier;
    public static SubjectIdentifierType Unknown;
}
public class System.Security.Cryptography.Xml.X509IssuerSerial : ValueType {
    private object _dummy;
    public string IssuerName { get; public set; }
    public string SerialNumber { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IssuerName();
    [CompilerGeneratedAttribute]
public void set_IssuerName(string value);
    [CompilerGeneratedAttribute]
public string get_SerialNumber();
    [CompilerGeneratedAttribute]
public void set_SerialNumber(string value);
}
