internal static class FxResources.System.Security.Cryptography.Pkcs.SR : object {
}
[ExtensionAttribute]
internal static class Internal.Cryptography.CryptoThrowHelper : object {
    [ExtensionAttribute]
public static CryptographicException ToCryptographicException(int hr);
}
internal abstract class Internal.Cryptography.DecryptorPal : object {
    [CompilerGeneratedAttribute]
private RecipientInfoCollection <RecipientInfos>k__BackingField;
    public RecipientInfoCollection RecipientInfos { get; }
    internal DecryptorPal(RecipientInfoCollection recipientInfos);
    [CompilerGeneratedAttribute]
public RecipientInfoCollection get_RecipientInfos();
    public abstract virtual ContentInfo TryDecrypt(RecipientInfo recipientInfo, X509Certificate2 cert, X509Certificate2Collection originatorCerts, X509Certificate2Collection extraStore, Exception& exception);
    public abstract virtual void Dispose();
}
[ExtensionAttribute]
internal static class Internal.Cryptography.Helpers : object {
    [ExtensionAttribute]
public static Byte[] CloneByteArray(Byte[] a);
    [ExtensionAttribute]
public static Byte[] Resize(Byte[] a, int size);
    [ExtensionAttribute]
public static CmsRecipientCollection DeepCopy(CmsRecipientCollection recipients);
    [ExtensionAttribute]
public static Byte[] UnicodeToOctetString(string s);
    [ExtensionAttribute]
public static string OctetStringToUnicode(Byte[] octets);
    public static X509Certificate2Collection GetStoreCertificates(StoreName storeName, StoreLocation storeLocation, bool openExistingOnly);
    [ExtensionAttribute]
public static X509Certificate2 TryFindMatchingCertificate(X509Certificate2Collection certs, SubjectIdentifier recipientIdentifier);
    private static bool AreByteArraysEqual(Byte[] ba1, Byte[] ba2);
    [ExtensionAttribute]
private static Byte[] ToSkiBytes(string skiString);
    [ExtensionAttribute]
public static string ToSkiString(Byte[] skiBytes);
    [ExtensionAttribute]
private static Byte[] ToSerialBytes(string serialString);
    [ExtensionAttribute]
public static string ToSerialString(Byte[] serialBytes);
    [ExtensionAttribute]
private static string ToUpperHexString(Byte[] ba);
    [ExtensionAttribute]
private static Byte[] UpperHexStringToByteArray(string normalizedString);
    private static byte UpperHexCharToNybble(char c);
    public static Pkcs9AttributeObject CreateBestPkcs9AttributeObjectAvailable(Oid oid, Byte[] encodedAttribute);
    private static T Upgrade(Pkcs9AttributeObject basicAttribute);
}
internal abstract class Internal.Cryptography.KeyAgreeRecipientInfoPal : RecipientInfoPal {
    public DateTime Date { get; }
    public SubjectIdentifierOrKey OriginatorIdentifierOrKey { get; }
    public CryptographicAttributeObject OtherKeyAttribute { get; }
    public abstract virtual DateTime get_Date();
    public abstract virtual SubjectIdentifierOrKey get_OriginatorIdentifierOrKey();
    public abstract virtual CryptographicAttributeObject get_OtherKeyAttribute();
}
internal static class Internal.Cryptography.KeyLengths : object {
    public static int Rc2_40Bit;
    public static int Rc2_56Bit;
    public static int Rc2_64Bit;
    public static int Rc2_128Bit;
    public static int Rc4Max_128Bit;
    public static int Des_64Bit;
    public static int TripleDes_192Bit;
    public static int DefaultKeyLengthForRc2AndRc4;
}
internal abstract class Internal.Cryptography.KeyTransRecipientInfoPal : RecipientInfoPal {
}
internal static class Internal.Cryptography.Oids : object {
    public static string TripleDesCbc;
    public static string Rsa;
    public static string Esdh;
    public static string SigningTime;
    public static string ContentType;
    public static string DocumentDescription;
    public static string MessageDigest;
    public static string DocumentName;
    public static string CmsRc2Wrap;
    public static string Cms3DesWrap;
    public static string Pkcs7Data;
    public static string Pkcs7Signed;
    public static string Pkcs7Enveloped;
    public static string Pkcs7SignedEnveloped;
    public static string Pkcs7Hashed;
    public static string Pkcs7Encrypted;
}
internal enum Internal.Cryptography.Pal.Windows.AlgId : Enum {
    public int value__;
    public static AlgId CALG_RSA_KEYX;
    public static AlgId CALG_DH_SF;
    public static AlgId CALG_DH_EPHEM;
    public static AlgId CALG_RC2;
    public static AlgId CALG_RC4;
    public static AlgId CALG_DES;
    public static AlgId CALG_3DES;
}
internal class Internal.Cryptography.Pal.Windows.DecryptorPalWindows : DecryptorPal {
    private SafeCryptMsgHandle _hCryptMsg;
    private DecryptorPalWindows(SafeCryptMsgHandle hCryptMsg, RecipientInfoCollection recipientInfos);
    public sealed virtual void Dispose();
    internal static DecryptorPalWindows Decode(Byte[] encodedMessage, Int32& version, ContentInfo& contentInfo, AlgorithmIdentifier& contentEncryptionAlgorithm, X509Certificate2Collection& originatorCerts, CryptographicAttributeObjectCollection& unprotectedAttributes);
    private static RecipientInfoCollection CreateRecipientInfos(SafeCryptMsgHandle hCryptMsg);
    private static IEnumerable`1<RecipientInfo> ToRecipientInfosForThisIndex(SafeHandle pCmsgCmsRecipientInfoMemory, int index);
    public sealed virtual ContentInfo TryDecrypt(RecipientInfo recipientInfo, X509Certificate2 cert, X509Certificate2Collection originatorCerts, X509Certificate2Collection extraStore, Exception& exception);
    private static Exception TryGetKeySpecForCertificate(X509Certificate2 cert, CryptKeySpec& keySpec);
    private static SafeProvOrNCryptKeyHandle TryGetCertificatePrivateKey(X509Certificate2 cert, bool silent, Exception& exception);
    private Exception TryDecryptTrans(KeyTransRecipientInfo recipientInfo, SafeProvOrNCryptKeyHandle hKey, CryptKeySpec keySpec);
    private Exception TryDecryptAgree(KeyAgreeRecipientInfo keyAgreeRecipientInfo, SafeProvOrNCryptKeyHandle hKey, CryptKeySpec keySpec, X509Certificate2Collection originatorCerts, X509Certificate2Collection extraStore);
    private Exception TryExecuteDecryptAgree(CMSG_CTRL_KEY_AGREE_DECRYPT_PARA& decryptPara);
}
internal class Internal.Cryptography.Pal.Windows.HeapBlockRetainer : object {
    private List`1<object> _mustLive;
    private List`1<SafeHeapAllocHandle> _blocks;
    public IntPtr Alloc(int cbSize);
    public IntPtr Alloc(int howMany, int cbElement);
    public IntPtr AllocAsciiString(string s);
    public IntPtr AllocBytes(Byte[] data);
    public void KeepAlive(object o);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Internal.Cryptography.Pal.Windows.HelpersWindows : object {
    [ExtensionAttribute]
public static CryptographicException ToCryptographicException(ErrorCode errorCode);
    [ExtensionAttribute]
public static string ToStringAnsi(IntPtr psz);
    [ExtensionAttribute]
public static Byte[] GetMsgParamAsByteArray(SafeCryptMsgHandle hCryptMsg, CryptMsgParamType paramType, int index);
    [ExtensionAttribute]
public static SafeHandle GetMsgParamAsMemory(SafeCryptMsgHandle hCryptMsg, CryptMsgParamType paramType, int index);
    [ExtensionAttribute]
public static Byte[] ToByteArray(DATA_BLOB blob);
    [ExtensionAttribute]
public static CryptMsgType GetMessageType(SafeCryptMsgHandle hCryptMsg);
    [ExtensionAttribute]
public static int GetVersion(SafeCryptMsgHandle hCryptMsg);
    [ExtensionAttribute]
public static ContentInfo GetContentInfo(SafeCryptMsgHandle hCryptMsg);
    [ExtensionAttribute]
public static X509Certificate2Collection GetOriginatorCerts(SafeCryptMsgHandle hCryptMsg);
    [ExtensionAttribute]
public static AlgId ToAlgId(string oidValue);
    [ExtensionAttribute]
public static SafeCertContextHandle CreateCertContextHandle(X509Certificate2 cert);
    [ExtensionAttribute]
public static Byte[] GetSubjectKeyIdentifer(SafeCertContextHandle hCertContext);
    [ExtensionAttribute]
public static SubjectIdentifier ToSubjectIdentifier(CERT_ID certId);
    [ExtensionAttribute]
public static SubjectIdentifierOrKey ToSubjectIdentifierOrKey(CERT_ID certId);
    [ExtensionAttribute]
public static SubjectIdentifierOrKey ToSubjectIdentifierOrKey(CERT_PUBLIC_KEY_INFO publicKeyInfo);
    [ExtensionAttribute]
public static AlgorithmIdentifier ToAlgorithmIdentifier(CRYPT_ALGORITHM_IDENTIFIER cryptAlgorithmIdentifer);
    [ExtensionAttribute]
public static CryptographicAttributeObjectCollection GetUnprotectedAttributes(SafeCryptMsgHandle hCryptMsg);
    private static CryptographicAttributeObjectCollection ToCryptographicAttributeObjectCollection(CRYPT_ATTRIBUTES* pCryptAttributes);
    private static void AddCryptAttribute(CryptographicAttributeObjectCollection collection, CRYPT_ATTRIBUTE* pCryptAttribute);
}
internal class Internal.Cryptography.Pal.Windows.KeyAgreeRecipientInfoPalWindows : KeyAgreeRecipientInfoPal {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubIndex>k__BackingField;
    private SafeHandle _pCmsgCmsRecipientInfoMemory;
    public int Version { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Byte[] EncryptedKey { get; }
    public SubjectIdentifierOrKey OriginatorIdentifierOrKey { get; }
    public DateTime Date { get; }
    public CryptographicAttributeObject OtherKeyAttribute { get; }
    internal int Index { get; }
    internal int SubIndex { get; }
    internal KeyAgreeRecipientInfoPalWindows(SafeHandle pCmsgCmsRecipientInfoMemory, int index, int subIndex);
    public sealed virtual int get_Version();
    public sealed virtual SubjectIdentifier get_RecipientIdentifier();
    public sealed virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public sealed virtual Byte[] get_EncryptedKey();
    public sealed virtual SubjectIdentifierOrKey get_OriginatorIdentifierOrKey();
    public sealed virtual DateTime get_Date();
    public sealed virtual CryptographicAttributeObject get_OtherKeyAttribute();
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal int get_SubIndex();
    internal T WithCmsgCmsRecipientInfo(KeyAgreeReceiver`1<T> receiver);
    [CompilerGeneratedAttribute]
private SubjectIdentifier <get_RecipientIdentifier>b__4_0(CMSG_KEY_AGREE_RECIPIENT_INFO* recipient);
    [CompilerGeneratedAttribute]
private Byte[] <get_EncryptedKey>b__8_0(CMSG_KEY_AGREE_RECIPIENT_INFO* recipient);
    [CompilerGeneratedAttribute]
private DateTime <get_Date>b__12_0(CMSG_KEY_AGREE_RECIPIENT_INFO* recipient);
    [CompilerGeneratedAttribute]
private CryptographicAttributeObject <get_OtherKeyAttribute>b__14_0(CMSG_KEY_AGREE_RECIPIENT_INFO* recipient);
}
internal class Internal.Cryptography.Pal.Windows.KeyTransRecipientInfoPalWindows : KeyTransRecipientInfoPal {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    private SafeHandle _pCmsgCmsRecipientInfoMemory;
    public int Version { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Byte[] EncryptedKey { get; }
    internal int Index { get; }
    internal KeyTransRecipientInfoPalWindows(SafeHandle pCmsgCmsRecipientInfoMemory, int index);
    public sealed virtual int get_Version();
    public sealed virtual SubjectIdentifier get_RecipientIdentifier();
    public sealed virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public sealed virtual Byte[] get_EncryptedKey();
    [CompilerGeneratedAttribute]
internal int get_Index();
    private T WithCmsgCmsRecipientInfo(KeyTransReceiver`1<T> receiver);
}
internal class Internal.Cryptography.Pal.Windows.PkcsPalWindows : PkcsPal {
    public sealed virtual DecryptorPal Decode(Byte[] encodedMessage, Int32& version, ContentInfo& contentInfo, AlgorithmIdentifier& contentEncryptionAlgorithm, X509Certificate2Collection& originatorCerts, CryptographicAttributeObjectCollection& unprotectedAttributes);
    public sealed virtual Byte[] EncodeOctetString(Byte[] octets);
    public sealed virtual Byte[] DecodeOctetString(Byte[] encodedOctets);
    public sealed virtual Byte[] EncodeUtcTime(DateTime utcTime);
    public sealed virtual DateTime DecodeUtcTime(Byte[] encodedUtcTime);
    public sealed virtual string DecodeOid(Byte[] encodedOid);
    public sealed virtual Oid GetEncodedMessageType(Byte[] encodedMessage);
    public sealed virtual void AddCertsFromStoreForDecryption(X509Certificate2Collection certs);
    public sealed virtual Exception CreateRecipientsNotFoundException();
    public sealed virtual Exception CreateRecipientInfosAfterEncryptException();
    public sealed virtual Exception CreateDecryptAfterEncryptException();
    public sealed virtual Exception CreateDecryptTwiceException();
    public sealed virtual Byte[] GetSubjectKeyIdentifier(X509Certificate2 certificate);
    public sealed virtual Byte[] Encrypt(CmsRecipientCollection recipients, ContentInfo contentInfo, AlgorithmIdentifier contentEncryptionAlgorithm, X509Certificate2Collection originatorCerts, CryptographicAttributeObjectCollection unprotectedAttributes);
}
internal abstract class Internal.Cryptography.PkcsPal : object {
    private static PkcsPal s_instance;
    public static PkcsPal Instance { get; }
    private static PkcsPal();
    public abstract virtual Byte[] Encrypt(CmsRecipientCollection recipients, ContentInfo contentInfo, AlgorithmIdentifier contentEncryptionAlgorithm, X509Certificate2Collection originatorCerts, CryptographicAttributeObjectCollection unprotectedAttributes);
    public abstract virtual DecryptorPal Decode(Byte[] encodedMessage, Int32& version, ContentInfo& contentInfo, AlgorithmIdentifier& contentEncryptionAlgorithm, X509Certificate2Collection& originatorCerts, CryptographicAttributeObjectCollection& unprotectedAttributes);
    public abstract virtual Byte[] EncodeOctetString(Byte[] octets);
    public abstract virtual Byte[] DecodeOctetString(Byte[] encodedOctets);
    public abstract virtual Byte[] EncodeUtcTime(DateTime utcTime);
    public abstract virtual DateTime DecodeUtcTime(Byte[] encodedUtcTime);
    public abstract virtual string DecodeOid(Byte[] encodedOid);
    public abstract virtual Oid GetEncodedMessageType(Byte[] encodedMessage);
    public abstract virtual void AddCertsFromStoreForDecryption(X509Certificate2Collection certs);
    public abstract virtual Exception CreateRecipientsNotFoundException();
    public abstract virtual Exception CreateRecipientInfosAfterEncryptException();
    public abstract virtual Exception CreateDecryptAfterEncryptException();
    public abstract virtual Exception CreateDecryptTwiceException();
    public abstract virtual Byte[] GetSubjectKeyIdentifier(X509Certificate2 certificate);
    public static PkcsPal get_Instance();
}
internal abstract class Internal.Cryptography.RecipientInfoPal : object {
    public Byte[] EncryptedKey { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public int Version { get; }
    public abstract virtual Byte[] get_EncryptedKey();
    public abstract virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public abstract virtual SubjectIdentifier get_RecipientIdentifier();
    public abstract virtual int get_Version();
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeCertContextHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal SafeCertContextHandle(IntPtr handle);
    internal CERT_CONTEXT* DangerousGetCertContext();
    public sealed virtual bool get_IsInvalid();
    protected sealed virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeCryptMsgHandle : SafeHandle {
    public bool IsInvalid { get; }
    public sealed virtual bool get_IsInvalid();
    protected sealed virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeHeapAllocHandle : SafeBuffer {
    private static IntPtr s_hHeap;
    private static SafeHeapAllocHandle();
    internal static SafeHeapAllocHandle Alloc(int size);
    protected sealed virtual bool ReleaseHandle();
}
internal abstract class Microsoft.Win32.SafeHandles.SafeProvOrNCryptKeyHandle : SafeHandle {
    public bool IsInvalid { get; }
    internal SafeProvOrNCryptKeyHandle(IntPtr handle, bool ownsHandle);
    public sealed virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeProvOrNCryptKeyHandleUwp : SafeProvOrNCryptKeyHandle {
    private bool _isNcrypt;
    internal SafeProvOrNCryptKeyHandleUwp(IntPtr handle, bool ownsHandle, bool isNcrypt);
    protected sealed virtual bool ReleaseHandle();
}
public class System.Security.Cryptography.CryptographicAttributeObject : object {
    [CompilerGeneratedAttribute]
private AsnEncodedDataCollection <Values>k__BackingField;
    private Oid _oid;
    public Oid Oid { get; }
    public AsnEncodedDataCollection Values { get; }
    public CryptographicAttributeObject(Oid oid);
    public CryptographicAttributeObject(Oid oid, AsnEncodedDataCollection values);
    public Oid get_Oid();
    [CompilerGeneratedAttribute]
public AsnEncodedDataCollection get_Values();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.CryptographicAttributeObjectCollection : object {
    private List`1<CryptographicAttributeObject> _list;
    public CryptographicAttributeObject Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public CryptographicAttributeObjectCollection(CryptographicAttributeObject attribute);
    public int Add(AsnEncodedData asnEncodedData);
    public int Add(CryptographicAttributeObject attribute);
    public void Remove(CryptographicAttributeObject attribute);
    public CryptographicAttributeObject get_Item(int index);
    public sealed virtual int get_Count();
    public CryptographicAttributeObjectEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(CryptographicAttributeObject[] array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class System.Security.Cryptography.CryptographicAttributeObjectEnumerator : object {
    private CryptographicAttributeObjectCollection _attributes;
    private int _current;
    public CryptographicAttributeObject Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal CryptographicAttributeObjectEnumerator(CryptographicAttributeObjectCollection attributes);
    public CryptographicAttributeObject get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.Pkcs.AlgorithmIdentifier : object {
    [CompilerGeneratedAttribute]
private Oid <Oid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyLength>k__BackingField;
    public Oid Oid { get; public set; }
    public int KeyLength { get; public set; }
    public AlgorithmIdentifier(Oid oid);
    public AlgorithmIdentifier(Oid oid, int keyLength);
    [CompilerGeneratedAttribute]
public Oid get_Oid();
    [CompilerGeneratedAttribute]
public void set_Oid(Oid value);
    [CompilerGeneratedAttribute]
public int get_KeyLength();
    [CompilerGeneratedAttribute]
public void set_KeyLength(int value);
}
public class System.Security.Cryptography.Pkcs.CmsRecipient : object {
    [CompilerGeneratedAttribute]
private SubjectIdentifierType <RecipientIdentifierType>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    public SubjectIdentifierType RecipientIdentifierType { get; }
    public X509Certificate2 Certificate { get; }
    public CmsRecipient(X509Certificate2 certificate);
    public CmsRecipient(SubjectIdentifierType recipientIdentifierType, X509Certificate2 certificate);
    [CompilerGeneratedAttribute]
public SubjectIdentifierType get_RecipientIdentifierType();
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.CmsRecipientCollection : object {
    private List`1<CmsRecipient> _recipients;
    public CmsRecipient Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public CmsRecipientCollection(CmsRecipient recipient);
    public CmsRecipientCollection(SubjectIdentifierType recipientIdentifierType, X509Certificate2Collection certificates);
    public CmsRecipient get_Item(int index);
    public sealed virtual int get_Count();
    public int Add(CmsRecipient recipient);
    public void Remove(CmsRecipient recipient);
    public CmsRecipientEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(CmsRecipient[] array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class System.Security.Cryptography.Pkcs.CmsRecipientEnumerator : object {
    private CmsRecipientCollection _recipients;
    private int _current;
    public CmsRecipient Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal CmsRecipientEnumerator(CmsRecipientCollection recipients);
    public CmsRecipient get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.Pkcs.ContentInfo : object {
    [CompilerGeneratedAttribute]
private Oid <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Content>k__BackingField;
    public Oid ContentType { get; }
    public Byte[] Content { get; }
    public ContentInfo(Byte[] content);
    public ContentInfo(Oid contentType, Byte[] content);
    [CompilerGeneratedAttribute]
public Oid get_ContentType();
    [CompilerGeneratedAttribute]
public Byte[] get_Content();
    public static Oid GetContentType(Byte[] encodedMessage);
}
public class System.Security.Cryptography.Pkcs.EnvelopedCms : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentInfo <ContentInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private AlgorithmIdentifier <ContentEncryptionAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2Collection <Certificates>k__BackingField;
    [CompilerGeneratedAttribute]
private CryptographicAttributeObjectCollection <UnprotectedAttributes>k__BackingField;
    private DecryptorPal _decryptorPal;
    private Byte[] _encodedMessage;
    private LastCall _lastCall;
    public int Version { get; private set; }
    public ContentInfo ContentInfo { get; private set; }
    public AlgorithmIdentifier ContentEncryptionAlgorithm { get; private set; }
    public X509Certificate2Collection Certificates { get; private set; }
    public CryptographicAttributeObjectCollection UnprotectedAttributes { get; private set; }
    public RecipientInfoCollection RecipientInfos { get; }
    public EnvelopedCms(ContentInfo contentInfo);
    public EnvelopedCms(ContentInfo contentInfo, AlgorithmIdentifier encryptionAlgorithm);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    [CompilerGeneratedAttribute]
public ContentInfo get_ContentInfo();
    [CompilerGeneratedAttribute]
private void set_ContentInfo(ContentInfo value);
    [CompilerGeneratedAttribute]
public AlgorithmIdentifier get_ContentEncryptionAlgorithm();
    [CompilerGeneratedAttribute]
private void set_ContentEncryptionAlgorithm(AlgorithmIdentifier value);
    [CompilerGeneratedAttribute]
public X509Certificate2Collection get_Certificates();
    [CompilerGeneratedAttribute]
private void set_Certificates(X509Certificate2Collection value);
    [CompilerGeneratedAttribute]
public CryptographicAttributeObjectCollection get_UnprotectedAttributes();
    [CompilerGeneratedAttribute]
private void set_UnprotectedAttributes(CryptographicAttributeObjectCollection value);
    public RecipientInfoCollection get_RecipientInfos();
    public void Encrypt(CmsRecipient recipient);
    public void Encrypt(CmsRecipientCollection recipients);
    public Byte[] Encode();
    public void Decode(Byte[] encodedMessage);
    public void Decrypt();
    public void Decrypt(RecipientInfo recipientInfo);
    public void Decrypt(RecipientInfo recipientInfo, X509Certificate2Collection extraStore);
    public void Decrypt(X509Certificate2Collection extraStore);
    private void DecryptContent(RecipientInfoCollection recipientInfos, X509Certificate2Collection extraStore);
}
public class System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo : RecipientInfo {
    private SubjectIdentifier modreq(System.Runtime.CompilerServices.IsVolatile) _lazyRecipientIdentifier;
    private AlgorithmIdentifier modreq(System.Runtime.CompilerServices.IsVolatile) _lazyKeyEncryptionAlgorithm;
    private Byte[] modreq(System.Runtime.CompilerServices.IsVolatile) _lazyEncryptedKey;
    private SubjectIdentifierOrKey modreq(System.Runtime.CompilerServices.IsVolatile) _lazyOriginatorIdentifierKey;
    private Nullable`1<DateTime> _lazyDate;
    private CryptographicAttributeObject modreq(System.Runtime.CompilerServices.IsVolatile) _lazyOtherKeyAttribute;
    public int Version { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Byte[] EncryptedKey { get; }
    public SubjectIdentifierOrKey OriginatorIdentifierOrKey { get; }
    public DateTime Date { get; }
    public CryptographicAttributeObject OtherKeyAttribute { get; }
    private KeyAgreeRecipientInfoPal Pal { get; }
    internal KeyAgreeRecipientInfo(KeyAgreeRecipientInfoPal pal);
    public virtual int get_Version();
    public virtual SubjectIdentifier get_RecipientIdentifier();
    public virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public virtual Byte[] get_EncryptedKey();
    public SubjectIdentifierOrKey get_OriginatorIdentifierOrKey();
    public DateTime get_Date();
    public CryptographicAttributeObject get_OtherKeyAttribute();
    private KeyAgreeRecipientInfoPal get_Pal();
}
public class System.Security.Cryptography.Pkcs.KeyTransRecipientInfo : RecipientInfo {
    private SubjectIdentifier modreq(System.Runtime.CompilerServices.IsVolatile) _lazyRecipientIdentifier;
    private AlgorithmIdentifier modreq(System.Runtime.CompilerServices.IsVolatile) _lazyKeyEncryptionAlgorithm;
    private Byte[] modreq(System.Runtime.CompilerServices.IsVolatile) _lazyEncryptedKey;
    public int Version { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Byte[] EncryptedKey { get; }
    private KeyTransRecipientInfoPal Pal { get; }
    internal KeyTransRecipientInfo(KeyTransRecipientInfoPal pal);
    public virtual int get_Version();
    public virtual SubjectIdentifier get_RecipientIdentifier();
    public virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public virtual Byte[] get_EncryptedKey();
    private KeyTransRecipientInfoPal get_Pal();
}
public class System.Security.Cryptography.Pkcs.Pkcs9AttributeObject : AsnEncodedData {
    public Oid Oid { get; }
    public Pkcs9AttributeObject(string oid, Byte[] encodedData);
    public Pkcs9AttributeObject(Oid oid, Byte[] encodedData);
    public Pkcs9AttributeObject(AsnEncodedData asnEncodedData);
    internal Pkcs9AttributeObject(Oid oid);
    public Oid get_Oid();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9ContentType : Pkcs9AttributeObject {
    private Oid modreq(System.Runtime.CompilerServices.IsVolatile) _lazyContentType;
    public Oid ContentType { get; }
    public Oid get_ContentType();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
    private static Oid Decode(Byte[] rawData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription : Pkcs9AttributeObject {
    private String modreq(System.Runtime.CompilerServices.IsVolatile) _lazyDocumentDescription;
    public string DocumentDescription { get; }
    public Pkcs9DocumentDescription(string documentDescription);
    public Pkcs9DocumentDescription(Byte[] encodedDocumentDescription);
    public string get_DocumentDescription();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
    private static string Decode(Byte[] rawData);
    private static Byte[] Encode(string documentDescription);
}
public class System.Security.Cryptography.Pkcs.Pkcs9DocumentName : Pkcs9AttributeObject {
    private String modreq(System.Runtime.CompilerServices.IsVolatile) _lazyDocumentName;
    public string DocumentName { get; }
    public Pkcs9DocumentName(string documentName);
    public Pkcs9DocumentName(Byte[] encodedDocumentName);
    public string get_DocumentName();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
    private static string Decode(Byte[] rawData);
    private static Byte[] Encode(string documentName);
}
public class System.Security.Cryptography.Pkcs.Pkcs9MessageDigest : Pkcs9AttributeObject {
    private Byte[] modreq(System.Runtime.CompilerServices.IsVolatile) _lazyMessageDigest;
    public Byte[] MessageDigest { get; }
    public Byte[] get_MessageDigest();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
    private static Byte[] Decode(Byte[] rawData);
}
public class System.Security.Cryptography.Pkcs.Pkcs9SigningTime : Pkcs9AttributeObject {
    private Nullable`1<DateTime> _lazySigningTime;
    public DateTime SigningTime { get; }
    public Pkcs9SigningTime(DateTime signingTime);
    public Pkcs9SigningTime(Byte[] encodedSigningTime);
    public DateTime get_SigningTime();
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
    private static DateTime Decode(Byte[] rawData);
    private static Byte[] Encode(DateTime signingTime);
}
public class System.Security.Cryptography.Pkcs.PublicKeyInfo : object {
    [CompilerGeneratedAttribute]
private AlgorithmIdentifier <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <KeyValue>k__BackingField;
    public AlgorithmIdentifier Algorithm { get; }
    public Byte[] KeyValue { get; }
    internal PublicKeyInfo(AlgorithmIdentifier algorithm, Byte[] keyValue);
    [CompilerGeneratedAttribute]
public AlgorithmIdentifier get_Algorithm();
    [CompilerGeneratedAttribute]
public Byte[] get_KeyValue();
}
public abstract class System.Security.Cryptography.Pkcs.RecipientInfo : object {
    [CompilerGeneratedAttribute]
private RecipientInfoType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private RecipientInfoPal <Pal>k__BackingField;
    public RecipientInfoType Type { get; }
    public int Version { get; }
    public SubjectIdentifier RecipientIdentifier { get; }
    public AlgorithmIdentifier KeyEncryptionAlgorithm { get; }
    public Byte[] EncryptedKey { get; }
    internal RecipientInfoPal Pal { get; }
    internal RecipientInfo(RecipientInfoType type, RecipientInfoPal pal);
    [CompilerGeneratedAttribute]
public RecipientInfoType get_Type();
    public abstract virtual int get_Version();
    public abstract virtual SubjectIdentifier get_RecipientIdentifier();
    public abstract virtual AlgorithmIdentifier get_KeyEncryptionAlgorithm();
    public abstract virtual Byte[] get_EncryptedKey();
    [CompilerGeneratedAttribute]
internal RecipientInfoPal get_Pal();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Pkcs.RecipientInfoCollection : object {
    private RecipientInfo[] _recipientInfos;
    public RecipientInfo Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal RecipientInfoCollection(RecipientInfo recipientInfo);
    internal RecipientInfoCollection(ICollection`1<RecipientInfo> recipientInfos);
    public RecipientInfo get_Item(int index);
    public sealed virtual int get_Count();
    public RecipientInfoEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(RecipientInfo[] array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class System.Security.Cryptography.Pkcs.RecipientInfoEnumerator : object {
    private RecipientInfoCollection _recipientInfos;
    private int _current;
    public RecipientInfo Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal RecipientInfoEnumerator(RecipientInfoCollection RecipientInfos);
    public RecipientInfo get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Security.Cryptography.Pkcs.RecipientInfoType : Enum {
    public int value__;
    public static RecipientInfoType Unknown;
    public static RecipientInfoType KeyTransport;
    public static RecipientInfoType KeyAgreement;
}
public class System.Security.Cryptography.Pkcs.SubjectIdentifier : object {
    [CompilerGeneratedAttribute]
private SubjectIdentifierType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public SubjectIdentifierType Type { get; }
    public object Value { get; }
    internal SubjectIdentifier(SubjectIdentifierType type, object value);
    [CompilerGeneratedAttribute]
public SubjectIdentifierType get_Type();
    [CompilerGeneratedAttribute]
public object get_Value();
}
public class System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey : object {
    [CompilerGeneratedAttribute]
private SubjectIdentifierOrKeyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public SubjectIdentifierOrKeyType Type { get; }
    public object Value { get; }
    internal SubjectIdentifierOrKey(SubjectIdentifierOrKeyType type, object value);
    [CompilerGeneratedAttribute]
public SubjectIdentifierOrKeyType get_Type();
    [CompilerGeneratedAttribute]
public object get_Value();
}
public enum System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType : Enum {
    public int value__;
    public static SubjectIdentifierOrKeyType Unknown;
    public static SubjectIdentifierOrKeyType IssuerAndSerialNumber;
    public static SubjectIdentifierOrKeyType SubjectKeyIdentifier;
    public static SubjectIdentifierOrKeyType PublicKeyInfo;
}
public enum System.Security.Cryptography.Pkcs.SubjectIdentifierType : Enum {
    public int value__;
    public static SubjectIdentifierType Unknown;
    public static SubjectIdentifierType IssuerAndSerialNumber;
    public static SubjectIdentifierType SubjectKeyIdentifier;
    public static SubjectIdentifierType NoSignature;
}
public class System.Security.Cryptography.Xml.X509IssuerSerial : ValueType {
    [CompilerGeneratedAttribute]
private string <IssuerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerialNumber>k__BackingField;
    public string IssuerName { get; public set; }
    public string SerialNumber { get; public set; }
    internal X509IssuerSerial(string issuerName, string serialNumber);
    [CompilerGeneratedAttribute]
public string get_IssuerName();
    [CompilerGeneratedAttribute]
public void set_IssuerName(string value);
    [CompilerGeneratedAttribute]
public string get_SerialNumber();
    [CompilerGeneratedAttribute]
public void set_SerialNumber(string value);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Arg_EmptyOrNullString { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string ArgumentOutOfRange_Index { get; }
    internal static string Cryptography_Cms_Envelope_Empty_Content { get; }
    internal static string Cryptography_Cms_Invalid_Originator_Identifier_Choice { get; }
    internal static string Cryptography_Cms_Invalid_Subject_Identifier_Type { get; }
    internal static string Cryptography_Cms_Key_Agree_Date_Not_Available { get; }
    internal static string Cryptography_Cms_MessageNotEncrypted { get; }
    internal static string Cryptography_Cms_NoRecipients { get; }
    internal static string Cryptography_Cms_UnknownKeySpec { get; }
    internal static string Cryptography_Pkcs9_AttributeMismatch { get; }
    internal static string Cryptography_Pkcs9_MultipleSigningTimeNotAllowed { get; }
    internal static string InvalidOperation_DuplicateItemNotAllowed { get; }
    internal static string InvalidOperation_WrongOidInAsnCollection { get; }
    internal static string WorkInProgress { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Arg_EmptyOrNullString();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_ArgumentOutOfRange_Index();
    internal static string get_Cryptography_Cms_Envelope_Empty_Content();
    internal static string get_Cryptography_Cms_Invalid_Originator_Identifier_Choice();
    internal static string get_Cryptography_Cms_Invalid_Subject_Identifier_Type();
    internal static string get_Cryptography_Cms_Key_Agree_Date_Not_Available();
    internal static string get_Cryptography_Cms_MessageNotEncrypted();
    internal static string get_Cryptography_Cms_NoRecipients();
    internal static string get_Cryptography_Cms_UnknownKeySpec();
    internal static string get_Cryptography_Pkcs9_AttributeMismatch();
    internal static string get_Cryptography_Pkcs9_MultipleSigningTimeNotAllowed();
    internal static string get_InvalidOperation_DuplicateItemNotAllowed();
    internal static string get_InvalidOperation_WrongOidInAsnCollection();
    internal static string get_WorkInProgress();
    internal static Type get_ResourceType();
}
