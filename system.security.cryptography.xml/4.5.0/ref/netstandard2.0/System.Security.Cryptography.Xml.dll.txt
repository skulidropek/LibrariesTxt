[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public class System.Security.Cryptography.Xml.CipherData : object {
    public CipherReference CipherReference { get; public set; }
    public Byte[] CipherValue { get; public set; }
    public CipherData(Byte[] cipherValue);
    public CipherData(CipherReference cipherReference);
    public CipherReference get_CipherReference();
    public void set_CipherReference(CipherReference value);
    public Byte[] get_CipherValue();
    public void set_CipherValue(Byte[] value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.CipherReference : EncryptedReference {
    public CipherReference(string uri);
    public CipherReference(string uri, TransformChain transformChain);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.DataObject : object {
    public XmlNodeList Data { get; public set; }
    public string Encoding { get; public set; }
    public string Id { get; public set; }
    public string MimeType { get; public set; }
    public DataObject(string id, string mimeType, string encoding, XmlElement data);
    public XmlNodeList get_Data();
    public void set_Data(XmlNodeList value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Id();
    public void set_Id(string value);
    public string get_MimeType();
    public void set_MimeType(string value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.DataReference : EncryptedReference {
    public DataReference(string uri);
    public DataReference(string uri, TransformChain transformChain);
}
public class System.Security.Cryptography.Xml.DSAKeyValue : KeyInfoClause {
    public DSA Key { get; public set; }
    public DSAKeyValue(DSA key);
    public DSA get_Key();
    public void set_Key(DSA value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.EncryptedData : EncryptedType {
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.EncryptedKey : EncryptedType {
    public string CarriedKeyName { get; public set; }
    public string Recipient { get; public set; }
    public ReferenceList ReferenceList { get; }
    public string get_CarriedKeyName();
    public void set_CarriedKeyName(string value);
    public string get_Recipient();
    public void set_Recipient(string value);
    public ReferenceList get_ReferenceList();
    public void AddReference(DataReference dataReference);
    public void AddReference(KeyReference keyReference);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public abstract class System.Security.Cryptography.Xml.EncryptedReference : object {
    protected internal bool CacheValid { get; }
    protected string ReferenceType { get; protected set; }
    public TransformChain TransformChain { get; public set; }
    public string Uri { get; public set; }
    protected EncryptedReference(string uri);
    protected EncryptedReference(string uri, TransformChain transformChain);
    protected internal bool get_CacheValid();
    protected string get_ReferenceType();
    protected void set_ReferenceType(string value);
    public TransformChain get_TransformChain();
    public void set_TransformChain(TransformChain value);
    public string get_Uri();
    public void set_Uri(string value);
    public void AddTransform(Transform transform);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public abstract class System.Security.Cryptography.Xml.EncryptedType : object {
    public CipherData CipherData { get; public set; }
    public string Encoding { get; public set; }
    public EncryptionMethod EncryptionMethod { get; public set; }
    public EncryptionPropertyCollection EncryptionProperties { get; }
    public string Id { get; public set; }
    public KeyInfo KeyInfo { get; public set; }
    public string MimeType { get; public set; }
    public string Type { get; public set; }
    public virtual CipherData get_CipherData();
    public virtual void set_CipherData(CipherData value);
    public virtual string get_Encoding();
    public virtual void set_Encoding(string value);
    public virtual EncryptionMethod get_EncryptionMethod();
    public virtual void set_EncryptionMethod(EncryptionMethod value);
    public virtual EncryptionPropertyCollection get_EncryptionProperties();
    public virtual string get_Id();
    public virtual void set_Id(string value);
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public virtual string get_MimeType();
    public virtual void set_MimeType(string value);
    public virtual string get_Type();
    public virtual void set_Type(string value);
    public void AddProperty(EncryptionProperty ep);
    public abstract virtual XmlElement GetXml();
    public abstract virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.EncryptedXml : object {
    public static string XmlEncAES128KeyWrapUrl;
    public static string XmlEncAES128Url;
    public static string XmlEncAES192KeyWrapUrl;
    public static string XmlEncAES192Url;
    public static string XmlEncAES256KeyWrapUrl;
    public static string XmlEncAES256Url;
    public static string XmlEncDESUrl;
    public static string XmlEncElementContentUrl;
    public static string XmlEncElementUrl;
    public static string XmlEncEncryptedKeyUrl;
    public static string XmlEncNamespaceUrl;
    public static string XmlEncRSA15Url;
    public static string XmlEncRSAOAEPUrl;
    public static string XmlEncSHA256Url;
    public static string XmlEncSHA512Url;
    public static string XmlEncTripleDESKeyWrapUrl;
    public static string XmlEncTripleDESUrl;
    public Evidence DocumentEvidence { get; public set; }
    public Encoding Encoding { get; public set; }
    public CipherMode Mode { get; public set; }
    public PaddingMode Padding { get; public set; }
    public string Recipient { get; public set; }
    public XmlResolver Resolver { get; public set; }
    public int XmlDSigSearchDepth { get; public set; }
    public EncryptedXml(XmlDocument document);
    public EncryptedXml(XmlDocument document, Evidence evidence);
    public Evidence get_DocumentEvidence();
    public void set_DocumentEvidence(Evidence value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public CipherMode get_Mode();
    public void set_Mode(CipherMode value);
    public PaddingMode get_Padding();
    public void set_Padding(PaddingMode value);
    public string get_Recipient();
    public void set_Recipient(string value);
    public XmlResolver get_Resolver();
    public void set_Resolver(XmlResolver value);
    public int get_XmlDSigSearchDepth();
    public void set_XmlDSigSearchDepth(int value);
    public void AddKeyNameMapping(string keyName, object keyObject);
    public void ClearKeyNameMappings();
    public Byte[] DecryptData(EncryptedData encryptedData, SymmetricAlgorithm symmetricAlgorithm);
    public void DecryptDocument();
    public virtual Byte[] DecryptEncryptedKey(EncryptedKey encryptedKey);
    public static Byte[] DecryptKey(Byte[] keyData, RSA rsa, bool useOAEP);
    public static Byte[] DecryptKey(Byte[] keyData, SymmetricAlgorithm symmetricAlgorithm);
    public EncryptedData Encrypt(XmlElement inputElement, X509Certificate2 certificate);
    public EncryptedData Encrypt(XmlElement inputElement, string keyName);
    public Byte[] EncryptData(Byte[] plaintext, SymmetricAlgorithm symmetricAlgorithm);
    public Byte[] EncryptData(XmlElement inputElement, SymmetricAlgorithm symmetricAlgorithm, bool content);
    public static Byte[] EncryptKey(Byte[] keyData, RSA rsa, bool useOAEP);
    public static Byte[] EncryptKey(Byte[] keyData, SymmetricAlgorithm symmetricAlgorithm);
    public virtual Byte[] GetDecryptionIV(EncryptedData encryptedData, string symmetricAlgorithmUri);
    public virtual SymmetricAlgorithm GetDecryptionKey(EncryptedData encryptedData, string symmetricAlgorithmUri);
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
    public void ReplaceData(XmlElement inputElement, Byte[] decryptedData);
    public static void ReplaceElement(XmlElement inputElement, EncryptedData encryptedData, bool content);
}
public class System.Security.Cryptography.Xml.EncryptionMethod : object {
    public string KeyAlgorithm { get; public set; }
    public int KeySize { get; public set; }
    public EncryptionMethod(string algorithm);
    public string get_KeyAlgorithm();
    public void set_KeyAlgorithm(string value);
    public int get_KeySize();
    public void set_KeySize(int value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.EncryptionProperty : object {
    public string Id { get; }
    public XmlElement PropertyElement { get; public set; }
    public string Target { get; }
    public EncryptionProperty(XmlElement elementProperty);
    public string get_Id();
    public XmlElement get_PropertyElement();
    public void set_PropertyElement(XmlElement value);
    public string get_Target();
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
[DefaultMemberAttribute("ItemOf")]
public class System.Security.Cryptography.Xml.EncryptionPropertyCollection : object {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public EncryptionProperty ItemOf { get; public set; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public EncryptionProperty get_ItemOf(int index);
    public void set_ItemOf(int index, EncryptionProperty value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int Add(EncryptionProperty value);
    public sealed virtual void Clear();
    public bool Contains(EncryptionProperty value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(EncryptionProperty[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(EncryptionProperty value);
    public void Insert(int index, EncryptionProperty value);
    public EncryptionProperty Item(int index);
    public void Remove(EncryptionProperty value);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
public interface System.Security.Cryptography.Xml.IRelDecryptor {
    public abstract virtual Stream Decrypt(EncryptionMethod encryptionMethod, KeyInfo keyInfo, Stream toDecrypt);
}
public class System.Security.Cryptography.Xml.KeyInfo : object {
    public int Count { get; }
    public string Id { get; public set; }
    public int get_Count();
    public string get_Id();
    public void set_Id(string value);
    public void AddClause(KeyInfoClause clause);
    public sealed virtual IEnumerator GetEnumerator();
    public IEnumerator GetEnumerator(Type requestedObjectType);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public abstract class System.Security.Cryptography.Xml.KeyInfoClause : object {
    public abstract virtual XmlElement GetXml();
    public abstract virtual void LoadXml(XmlElement element);
}
public class System.Security.Cryptography.Xml.KeyInfoEncryptedKey : KeyInfoClause {
    public EncryptedKey EncryptedKey { get; public set; }
    public KeyInfoEncryptedKey(EncryptedKey encryptedKey);
    public EncryptedKey get_EncryptedKey();
    public void set_EncryptedKey(EncryptedKey value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoName : KeyInfoClause {
    public string Value { get; public set; }
    public KeyInfoName(string keyName);
    public string get_Value();
    public void set_Value(string value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoNode : KeyInfoClause {
    public XmlElement Value { get; public set; }
    public KeyInfoNode(XmlElement node);
    public XmlElement get_Value();
    public void set_Value(XmlElement value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoRetrievalMethod : KeyInfoClause {
    public string Type { get; public set; }
    public string Uri { get; public set; }
    public KeyInfoRetrievalMethod(string strUri);
    public KeyInfoRetrievalMethod(string strUri, string typeName);
    public string get_Type();
    public void set_Type(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoX509Data : KeyInfoClause {
    public ArrayList Certificates { get; }
    public Byte[] CRL { get; public set; }
    public ArrayList IssuerSerials { get; }
    public ArrayList SubjectKeyIds { get; }
    public ArrayList SubjectNames { get; }
    public KeyInfoX509Data(Byte[] rgbCert);
    public KeyInfoX509Data(X509Certificate cert);
    public KeyInfoX509Data(X509Certificate cert, X509IncludeOption includeOption);
    public ArrayList get_Certificates();
    public Byte[] get_CRL();
    public void set_CRL(Byte[] value);
    public ArrayList get_IssuerSerials();
    public ArrayList get_SubjectKeyIds();
    public ArrayList get_SubjectNames();
    public void AddCertificate(X509Certificate certificate);
    public void AddIssuerSerial(string issuerName, string serialNumber);
    public void AddSubjectKeyId(Byte[] subjectKeyId);
    public void AddSubjectKeyId(string subjectKeyId);
    public void AddSubjectName(string subjectName);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement element);
}
public class System.Security.Cryptography.Xml.KeyReference : EncryptedReference {
    public KeyReference(string uri);
    public KeyReference(string uri, TransformChain transformChain);
}
public class System.Security.Cryptography.Xml.Reference : object {
    public string DigestMethod { get; public set; }
    public Byte[] DigestValue { get; public set; }
    public string Id { get; public set; }
    public TransformChain TransformChain { get; public set; }
    public string Type { get; public set; }
    public string Uri { get; public set; }
    public Reference(Stream stream);
    public Reference(string uri);
    public string get_DigestMethod();
    public void set_DigestMethod(string value);
    public Byte[] get_DigestValue();
    public void set_DigestValue(Byte[] value);
    public string get_Id();
    public void set_Id(string value);
    public TransformChain get_TransformChain();
    public void set_TransformChain(TransformChain value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public void AddTransform(Transform transform);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
[DefaultMemberAttribute("ItemOf")]
public class System.Security.Cryptography.Xml.ReferenceList : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public EncryptedReference ItemOf { get; public set; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public EncryptedReference get_ItemOf(int index);
    public void set_ItemOf(int index, EncryptedReference value);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public EncryptedReference Item(int index);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
}
public class System.Security.Cryptography.Xml.RSAKeyValue : KeyInfoClause {
    public RSA Key { get; public set; }
    public RSAKeyValue(RSA key);
    public RSA get_Key();
    public void set_Key(RSA value);
    public virtual XmlElement GetXml();
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.Signature : object {
    public string Id { get; public set; }
    public KeyInfo KeyInfo { get; public set; }
    public IList ObjectList { get; public set; }
    public Byte[] SignatureValue { get; public set; }
    public SignedInfo SignedInfo { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public IList get_ObjectList();
    public void set_ObjectList(IList value);
    public Byte[] get_SignatureValue();
    public void set_SignatureValue(Byte[] value);
    public SignedInfo get_SignedInfo();
    public void set_SignedInfo(SignedInfo value);
    public void AddObject(DataObject dataObject);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.SignedInfo : object {
    public string CanonicalizationMethod { get; public set; }
    public Transform CanonicalizationMethodObject { get; }
    public int Count { get; }
    public string Id { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public ArrayList References { get; }
    public string SignatureLength { get; public set; }
    public string SignatureMethod { get; public set; }
    public object SyncRoot { get; }
    public string get_CanonicalizationMethod();
    public void set_CanonicalizationMethod(string value);
    public Transform get_CanonicalizationMethodObject();
    public sealed virtual int get_Count();
    public string get_Id();
    public void set_Id(string value);
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public ArrayList get_References();
    public string get_SignatureLength();
    public void set_SignatureLength(string value);
    public string get_SignatureMethod();
    public void set_SignatureMethod(string value);
    public sealed virtual object get_SyncRoot();
    public void AddReference(Reference reference);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.SignedXml : object {
    protected Signature m_signature;
    protected string m_strSigningKeyName;
    public static string XmlDecryptionTransformUrl;
    public static string XmlDsigBase64TransformUrl;
    public static string XmlDsigC14NTransformUrl;
    public static string XmlDsigC14NWithCommentsTransformUrl;
    public static string XmlDsigCanonicalizationUrl;
    public static string XmlDsigCanonicalizationWithCommentsUrl;
    public static string XmlDsigDSAUrl;
    public static string XmlDsigEnvelopedSignatureTransformUrl;
    public static string XmlDsigExcC14NTransformUrl;
    public static string XmlDsigExcC14NWithCommentsTransformUrl;
    public static string XmlDsigHMACSHA1Url;
    public static string XmlDsigMinimalCanonicalizationUrl;
    public static string XmlDsigNamespaceUrl;
    public static string XmlDsigRSASHA1Url;
    public static string XmlDsigSHA1Url;
    public static string XmlDsigXPathTransformUrl;
    public static string XmlDsigXsltTransformUrl;
    public static string XmlLicenseTransformUrl;
    public EncryptedXml EncryptedXml { get; public set; }
    public KeyInfo KeyInfo { get; public set; }
    unknown XmlResolver Resolver {public set; }
    public Collection`1<string> SafeCanonicalizationMethods { get; }
    public Signature Signature { get; }
    public Func`2<SignedXml, bool> SignatureFormatValidator { get; public set; }
    public string SignatureLength { get; }
    public string SignatureMethod { get; }
    public Byte[] SignatureValue { get; }
    public SignedInfo SignedInfo { get; }
    public AsymmetricAlgorithm SigningKey { get; public set; }
    public string SigningKeyName { get; public set; }
    public SignedXml(XmlDocument document);
    public SignedXml(XmlElement elem);
    public EncryptedXml get_EncryptedXml();
    public void set_EncryptedXml(EncryptedXml value);
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public void set_Resolver(XmlResolver value);
    public Collection`1<string> get_SafeCanonicalizationMethods();
    public Signature get_Signature();
    public Func`2<SignedXml, bool> get_SignatureFormatValidator();
    public void set_SignatureFormatValidator(Func`2<SignedXml, bool> value);
    public string get_SignatureLength();
    public string get_SignatureMethod();
    public Byte[] get_SignatureValue();
    public SignedInfo get_SignedInfo();
    public AsymmetricAlgorithm get_SigningKey();
    public void set_SigningKey(AsymmetricAlgorithm value);
    public string get_SigningKeyName();
    public void set_SigningKeyName(string value);
    public void AddObject(DataObject dataObject);
    public void AddReference(Reference reference);
    public bool CheckSignature();
    public bool CheckSignature(AsymmetricAlgorithm key);
    public bool CheckSignature(KeyedHashAlgorithm macAlg);
    public bool CheckSignature(X509Certificate2 certificate, bool verifySignatureOnly);
    public bool CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey);
    public void ComputeSignature();
    public void ComputeSignature(KeyedHashAlgorithm macAlg);
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
    protected virtual AsymmetricAlgorithm GetPublicKey();
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
}
public abstract class System.Security.Cryptography.Xml.Transform : object {
    public string Algorithm { get; public set; }
    public XmlElement Context { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public Hashtable PropagatedNamespaces { get; }
    unknown XmlResolver Resolver {public set; }
    public string get_Algorithm();
    public void set_Algorithm(string value);
    public XmlElement get_Context();
    public void set_Context(XmlElement value);
    public abstract virtual Type[] get_InputTypes();
    public abstract virtual Type[] get_OutputTypes();
    public Hashtable get_PropagatedNamespaces();
    public void set_Resolver(XmlResolver value);
    public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
    protected abstract virtual XmlNodeList GetInnerXml();
    public abstract virtual object GetOutput();
    public abstract virtual object GetOutput(Type type);
    public XmlElement GetXml();
    public abstract virtual void LoadInnerXml(XmlNodeList nodeList);
    public abstract virtual void LoadInput(object obj);
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Xml.TransformChain : object {
    public int Count { get; }
    public Transform Item { get; }
    public int get_Count();
    public Transform get_Item(int index);
    public void Add(Transform transform);
    public IEnumerator GetEnumerator();
}
public class System.Security.Cryptography.Xml.XmlDecryptionTransform : Transform {
    public EncryptedXml EncryptedXml { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public EncryptedXml get_EncryptedXml();
    public void set_EncryptedXml(EncryptedXml value);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public void AddExceptUri(string uri);
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    protected virtual bool IsTargetElement(XmlElement inputElement, string idValue);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
public class System.Security.Cryptography.Xml.XmlDsigBase64Transform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
public class System.Security.Cryptography.Xml.XmlDsigC14NTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigC14NTransform(bool includeComments);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
public class System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform : XmlDsigC14NTransform {
}
public class System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigEnvelopedSignatureTransform(bool includeComments);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
public class System.Security.Cryptography.Xml.XmlDsigExcC14NTransform : Transform {
    public string InclusiveNamespacesPrefixList { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigExcC14NTransform(bool includeComments);
    public XmlDsigExcC14NTransform(bool includeComments, string inclusiveNamespacesPrefixList);
    public XmlDsigExcC14NTransform(string inclusiveNamespacesPrefixList);
    public string get_InclusiveNamespacesPrefixList();
    public void set_InclusiveNamespacesPrefixList(string value);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
public class System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform : XmlDsigExcC14NTransform {
    public XmlDsigExcC14NWithCommentsTransform(string inclusiveNamespacesPrefixList);
}
public class System.Security.Cryptography.Xml.XmlDsigXPathTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
public class System.Security.Cryptography.Xml.XmlDsigXsltTransform : Transform {
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigXsltTransform(bool includeComments);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
public class System.Security.Cryptography.Xml.XmlLicenseTransform : Transform {
    public IRelDecryptor Decryptor { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public IRelDecryptor get_Decryptor();
    public void set_Decryptor(IRelDecryptor value);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
