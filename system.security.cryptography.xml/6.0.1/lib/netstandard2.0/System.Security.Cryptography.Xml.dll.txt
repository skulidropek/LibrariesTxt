internal static class FxResources.System.Security.Cryptography.Xml.SR : object {
}
internal static class System.HexConverter : object {
    public static ReadOnlySpan`1<byte> CharToHexLookup { get; }
    public static void ToBytesBuffer(byte value, Span`1<byte> buffer, int startingIndex, Casing casing);
    public static void ToCharsBuffer(byte value, Span`1<char> buffer, int startingIndex, Casing casing);
    public static void EncodeToUtf16(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, Casing casing);
    public static string ToString(ReadOnlySpan`1<byte> bytes, Casing casing);
    public static char ToCharUpper(int value);
    public static char ToCharLower(int value);
    public static bool TryDecodeFromUtf16(ReadOnlySpan`1<char> chars, Span`1<byte> bytes);
    public static bool TryDecodeFromUtf16(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, Int32& charsProcessed);
    public static int FromChar(int c);
    public static int FromUpperChar(int c);
    public static int FromLowerChar(int c);
    public static bool IsHexChar(int c);
    public static bool IsHexUpperChar(int c);
    public static bool IsHexLowerChar(int c);
    public static ReadOnlySpan`1<byte> get_CharToHexLookup();
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public SupportedOSPlatformGuardAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformGuardAttribute(string platformName);
}
internal abstract class System.Security.Cryptography.Xml.AncestralNamespaceContextManager : object {
    internal ArrayList _ancestorStack;
    internal NamespaceFrame GetScopeAt(int i);
    internal NamespaceFrame GetCurrentScope();
    protected XmlAttribute GetNearestRenderedNamespaceWithMatchingPrefix(string nsPrefix, Int32& depth);
    protected XmlAttribute GetNearestUnrenderedNamespaceWithMatchingPrefix(string nsPrefix, Int32& depth);
    internal void EnterElementContext();
    internal void ExitElementContext();
    internal abstract virtual void TrackNamespaceNode(XmlAttribute attr, SortedList nsListToRender, Hashtable nsLocallyDeclared);
    internal abstract virtual void TrackXmlNamespaceNode(XmlAttribute attr, SortedList nsListToRender, SortedList attrListToRender, Hashtable nsLocallyDeclared);
    internal abstract virtual void GetNamespacesToRender(XmlElement element, SortedList attrListToRender, SortedList nsListToRender, Hashtable nsLocallyDeclared);
    internal void LoadUnrenderedNamespaces(Hashtable nsLocallyDeclared);
    internal void LoadRenderedNamespaces(SortedList nsRenderedList);
    internal void AddRendered(XmlAttribute attr);
    internal void AddUnrendered(XmlAttribute attr);
}
internal class System.Security.Cryptography.Xml.AttributeSortOrder : object {
    public sealed virtual int Compare(object a, object b);
}
internal class System.Security.Cryptography.Xml.C14NAncestralNamespaceContextManager : AncestralNamespaceContextManager {
    private void GetNamespaceToRender(string nsPrefix, SortedList attrListToRender, SortedList nsListToRender, Hashtable nsLocallyDeclared);
    internal virtual void GetNamespacesToRender(XmlElement element, SortedList attrListToRender, SortedList nsListToRender, Hashtable nsLocallyDeclared);
    internal virtual void TrackNamespaceNode(XmlAttribute attr, SortedList nsListToRender, Hashtable nsLocallyDeclared);
    internal virtual void TrackXmlNamespaceNode(XmlAttribute attr, SortedList nsListToRender, SortedList attrListToRender, Hashtable nsLocallyDeclared);
}
internal static class System.Security.Cryptography.Xml.CanonicalizationDispatcher : object {
    public static void Write(XmlNode node, StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public static void WriteGenericNode(XmlNode node, StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public static void WriteHash(XmlNode node, HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
    public static void WriteHashGenericNode(XmlNode node, HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXml : object {
    private CanonicalXmlDocument _c14nDoc;
    private C14NAncestralNamespaceContextManager _ancMgr;
    internal CanonicalXml(Stream inputStream, bool includeComments, XmlResolver resolver, string strBaseUri);
    internal CanonicalXml(XmlDocument document, XmlResolver resolver);
    internal CanonicalXml(XmlDocument document, XmlResolver resolver, bool includeComments);
    internal CanonicalXml(XmlNodeList nodeList, XmlResolver resolver, bool includeComments);
    private static void MarkNodeAsIncluded(XmlNode node);
    private static void MarkInclusionStateForNodes(XmlNodeList nodeList, XmlDocument inputRoot, XmlDocument root);
    internal Byte[] GetBytes();
    internal Byte[] GetDigestedBytes(HashAlgorithm hash);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlAttribute : XmlAttribute {
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc, bool defaultNodeSetInclusionState);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlCDataSection : XmlCDataSection {
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlCDataSection(string data, XmlDocument doc, bool defaultNodeSetInclusionState);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlComment : XmlComment {
    private bool _isInNodeSet;
    private bool _includeComments;
    public bool IsInNodeSet { get; public set; }
    public bool IncludeComments { get; }
    public CanonicalXmlComment(string comment, XmlDocument doc, bool defaultNodeSetInclusionState, bool includeComments);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public bool get_IncludeComments();
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlDocument : XmlDocument {
    private bool _defaultNodeSetInclusionState;
    private bool _includeComments;
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlDocument(bool defaultNodeSetInclusionState, bool includeComments);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    protected virtual XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlWhitespace CreateWhitespace(string prefix);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text);
    public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data);
    public virtual XmlComment CreateComment(string data);
    public virtual XmlEntityReference CreateEntityReference(string name);
    public virtual XmlCDataSection CreateCDataSection(string data);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlElement : XmlElement {
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlElement(string prefix, string localName, string namespaceURI, XmlDocument doc, bool defaultNodeSetInclusionState);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlEntityReference : XmlEntityReference {
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlEntityReference(string name, XmlDocument doc, bool defaultNodeSetInclusionState);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlNodeList : XmlNodeList {
    private ArrayList _nodeArray;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public virtual XmlNode Item(int index);
    public virtual IEnumerator GetEnumerator();
    public virtual int get_Count();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
}
internal class System.Security.Cryptography.Xml.CanonicalXmlProcessingInstruction : XmlProcessingInstruction {
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlProcessingInstruction(string target, string data, XmlDocument doc, bool defaultNodeSetInclusionState);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlSignificantWhitespace : XmlSignificantWhitespace {
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlSignificantWhitespace(string strData, XmlDocument doc, bool defaultNodeSetInclusionState);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlText : XmlText {
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlText(string strData, XmlDocument doc, bool defaultNodeSetInclusionState);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal class System.Security.Cryptography.Xml.CanonicalXmlWhitespace : XmlWhitespace {
    private bool _isInNodeSet;
    public bool IsInNodeSet { get; public set; }
    public CanonicalXmlWhitespace(string strData, XmlDocument doc, bool defaultNodeSetInclusionState);
    public sealed virtual bool get_IsInNodeSet();
    public sealed virtual void set_IsInNodeSet(bool value);
    public sealed virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public sealed virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
internal enum System.Security.Cryptography.Xml.CertUsageType : Enum {
    public int value__;
    public static CertUsageType Verification;
    public static CertUsageType Decryption;
}
public class System.Security.Cryptography.Xml.CipherData : object {
    private XmlElement _cachedXml;
    private CipherReference _cipherReference;
    private Byte[] _cipherValue;
    private bool CacheValid { get; }
    public CipherReference CipherReference { get; public set; }
    public Byte[] CipherValue { get; public set; }
    public CipherData(Byte[] cipherValue);
    public CipherData(CipherReference cipherReference);
    private bool get_CacheValid();
    public CipherReference get_CipherReference();
    public void set_CipherReference(CipherReference value);
    public Byte[] get_CipherValue();
    public void set_CipherValue(Byte[] value);
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.CipherReference : EncryptedReference {
    private Byte[] _cipherValue;
    internal Byte[] CipherValue { get; internal set; }
    public CipherReference(string uri);
    public CipherReference(string uri, TransformChain transformChain);
    internal Byte[] get_CipherValue();
    internal void set_CipherValue(Byte[] value);
    public virtual XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public virtual void LoadXml(XmlElement value);
}
internal static class System.Security.Cryptography.Xml.CryptoHelpers : object {
    private static Char[] _invalidChars;
    private static CryptoHelpers();
    public static object CreateFromKnownName(string name);
    public static T CreateFromName(string name);
}
[TypeForwardedFromAttribute("System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Security.Cryptography.Xml.CryptoSignedXmlRecursionException : XmlException {
    public CryptoSignedXmlRecursionException(string message);
    public CryptoSignedXmlRecursionException(string message, Exception inner);
    protected CryptoSignedXmlRecursionException(SerializationInfo info, StreamingContext context);
}
public class System.Security.Cryptography.Xml.DataObject : object {
    private string _id;
    private string _mimeType;
    private string _encoding;
    private CanonicalXmlNodeList _elData;
    private XmlElement _cachedXml;
    public string Id { get; public set; }
    public string MimeType { get; public set; }
    public string Encoding { get; public set; }
    public XmlNodeList Data { get; public set; }
    private bool CacheValid { get; }
    public DataObject(string id, string mimeType, string encoding, XmlElement data);
    public string get_Id();
    public void set_Id(string value);
    public string get_MimeType();
    public void set_MimeType(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public XmlNodeList get_Data();
    public void set_Data(XmlNodeList value);
    private bool get_CacheValid();
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.DataReference : EncryptedReference {
    public DataReference(string uri);
    public DataReference(string uri, TransformChain transformChain);
}
internal enum System.Security.Cryptography.Xml.DocPosition : Enum {
    public int value__;
    public static DocPosition BeforeRootElement;
    public static DocPosition InRootElement;
    public static DocPosition AfterRootElement;
}
public class System.Security.Cryptography.Xml.DSAKeyValue : KeyInfoClause {
    private DSA _key;
    private static string KeyValueElementName;
    private static string DSAKeyValueElementName;
    private static string PElementName;
    private static string QElementName;
    private static string GElementName;
    private static string JElementName;
    private static string YElementName;
    private static string SeedElementName;
    private static string PgenCounterElementName;
    public DSA Key { get; public set; }
    public DSAKeyValue(DSA key);
    public DSA get_Key();
    public void set_Key(DSA value);
    public virtual XmlElement GetXml();
    internal virtual XmlElement GetXml(XmlDocument xmlDocument);
    public virtual void LoadXml(XmlElement value);
}
internal class System.Security.Cryptography.Xml.DSASignatureDescription : SignatureDescription {
    private static string HashAlgorithm;
    public sealed virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key);
    public sealed virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key);
    public sealed virtual HashAlgorithm CreateDigest();
}
public class System.Security.Cryptography.Xml.EncryptedData : EncryptedType {
    public virtual void LoadXml(XmlElement value);
    public virtual XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
}
public class System.Security.Cryptography.Xml.EncryptedKey : EncryptedType {
    private string _recipient;
    private string _carriedKeyName;
    private ReferenceList _referenceList;
    public string Recipient { get; public set; }
    public string CarriedKeyName { get; public set; }
    public ReferenceList ReferenceList { get; }
    public string get_Recipient();
    public void set_Recipient(string value);
    public string get_CarriedKeyName();
    public void set_CarriedKeyName(string value);
    public ReferenceList get_ReferenceList();
    public void AddReference(DataReference dataReference);
    public void AddReference(KeyReference keyReference);
    public virtual void LoadXml(XmlElement value);
    public virtual XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
}
public abstract class System.Security.Cryptography.Xml.EncryptedReference : object {
    private string _uri;
    private string _referenceType;
    private TransformChain _transformChain;
    internal XmlElement _cachedXml;
    public string Uri { get; public set; }
    public TransformChain TransformChain { get; public set; }
    protected string ReferenceType { get; protected set; }
    protected internal bool CacheValid { get; }
    protected EncryptedReference(string uri);
    protected EncryptedReference(string uri, TransformChain transformChain);
    public string get_Uri();
    public void set_Uri(string value);
    public TransformChain get_TransformChain();
    public void set_TransformChain(TransformChain value);
    public void AddTransform(Transform transform);
    protected string get_ReferenceType();
    protected void set_ReferenceType(string value);
    protected internal bool get_CacheValid();
    public virtual XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public virtual void LoadXml(XmlElement value);
}
public abstract class System.Security.Cryptography.Xml.EncryptedType : object {
    private string _id;
    private string _type;
    private string _mimeType;
    private string _encoding;
    private EncryptionMethod _encryptionMethod;
    private CipherData _cipherData;
    private EncryptionPropertyCollection _props;
    private KeyInfo _keyInfo;
    internal XmlElement _cachedXml;
    internal bool CacheValid { get; }
    public string Id { get; public set; }
    public string Type { get; public set; }
    public string MimeType { get; public set; }
    public string Encoding { get; public set; }
    public KeyInfo KeyInfo { get; public set; }
    public EncryptionMethod EncryptionMethod { get; public set; }
    public EncryptionPropertyCollection EncryptionProperties { get; }
    public CipherData CipherData { get; public set; }
    internal bool get_CacheValid();
    public virtual string get_Id();
    public virtual void set_Id(string value);
    public virtual string get_Type();
    public virtual void set_Type(string value);
    public virtual string get_MimeType();
    public virtual void set_MimeType(string value);
    public virtual string get_Encoding();
    public virtual void set_Encoding(string value);
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public virtual EncryptionMethod get_EncryptionMethod();
    public virtual void set_EncryptionMethod(EncryptionMethod value);
    public virtual EncryptionPropertyCollection get_EncryptionProperties();
    public void AddProperty(EncryptionProperty ep);
    public virtual CipherData get_CipherData();
    public virtual void set_CipherData(CipherData value);
    public abstract virtual void LoadXml(XmlElement value);
    public abstract virtual XmlElement GetXml();
}
public class System.Security.Cryptography.Xml.EncryptedXml : object {
    public static string XmlEncNamespaceUrl;
    public static string XmlEncElementUrl;
    public static string XmlEncElementContentUrl;
    public static string XmlEncEncryptedKeyUrl;
    public static string XmlEncDESUrl;
    public static string XmlEncTripleDESUrl;
    public static string XmlEncAES128Url;
    public static string XmlEncAES256Url;
    public static string XmlEncAES192Url;
    public static string XmlEncRSA15Url;
    public static string XmlEncRSAOAEPUrl;
    public static string XmlEncTripleDESKeyWrapUrl;
    public static string XmlEncAES128KeyWrapUrl;
    public static string XmlEncAES256KeyWrapUrl;
    public static string XmlEncAES192KeyWrapUrl;
    public static string XmlEncSHA256Url;
    public static string XmlEncSHA512Url;
    private XmlDocument _document;
    private Evidence _evidence;
    private XmlResolver _xmlResolver;
    private static int _capacity;
    private Hashtable _keyNameMapping;
    private PaddingMode _padding;
    private CipherMode _mode;
    private Encoding _encoding;
    private string _recipient;
    private int _xmlDsigSearchDepthCounter;
    private int _xmlDsigSearchDepth;
    public int XmlDSigSearchDepth { get; public set; }
    public Evidence DocumentEvidence { get; public set; }
    public XmlResolver Resolver { get; public set; }
    public PaddingMode Padding { get; public set; }
    public CipherMode Mode { get; public set; }
    public Encoding Encoding { get; public set; }
    public string Recipient { get; public set; }
    public EncryptedXml(XmlDocument document);
    public EncryptedXml(XmlDocument document, Evidence evidence);
    private bool IsOverXmlDsigRecursionLimit();
    public int get_XmlDSigSearchDepth();
    public void set_XmlDSigSearchDepth(int value);
    public Evidence get_DocumentEvidence();
    public void set_DocumentEvidence(Evidence value);
    public XmlResolver get_Resolver();
    public void set_Resolver(XmlResolver value);
    public PaddingMode get_Padding();
    public void set_Padding(PaddingMode value);
    public CipherMode get_Mode();
    public void set_Mode(CipherMode value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public string get_Recipient();
    public void set_Recipient(string value);
    private Byte[] GetCipherValue(CipherData cipherData);
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
    public virtual Byte[] GetDecryptionIV(EncryptedData encryptedData, string symmetricAlgorithmUri);
    public virtual SymmetricAlgorithm GetDecryptionKey(EncryptedData encryptedData, string symmetricAlgorithmUri);
    public virtual Byte[] DecryptEncryptedKey(EncryptedKey encryptedKey);
    public void AddKeyNameMapping(string keyName, object keyObject);
    public void ClearKeyNameMappings();
    public EncryptedData Encrypt(XmlElement inputElement, X509Certificate2 certificate);
    public EncryptedData Encrypt(XmlElement inputElement, string keyName);
    public void DecryptDocument();
    public Byte[] EncryptData(Byte[] plaintext, SymmetricAlgorithm symmetricAlgorithm);
    public Byte[] EncryptData(XmlElement inputElement, SymmetricAlgorithm symmetricAlgorithm, bool content);
    public Byte[] DecryptData(EncryptedData encryptedData, SymmetricAlgorithm symmetricAlgorithm);
    public void ReplaceData(XmlElement inputElement, Byte[] decryptedData);
    public static void ReplaceElement(XmlElement inputElement, EncryptedData encryptedData, bool content);
    public static Byte[] EncryptKey(Byte[] keyData, SymmetricAlgorithm symmetricAlgorithm);
    public static Byte[] EncryptKey(Byte[] keyData, RSA rsa, bool useOAEP);
    public static Byte[] DecryptKey(Byte[] keyData, SymmetricAlgorithm symmetricAlgorithm);
    public static Byte[] DecryptKey(Byte[] keyData, RSA rsa, bool useOAEP);
}
public class System.Security.Cryptography.Xml.EncryptionMethod : object {
    private XmlElement _cachedXml;
    private int _keySize;
    private string _algorithm;
    private bool CacheValid { get; }
    public int KeySize { get; public set; }
    public string KeyAlgorithm { get; public set; }
    public EncryptionMethod(string algorithm);
    private bool get_CacheValid();
    public int get_KeySize();
    public void set_KeySize(int value);
    public string get_KeyAlgorithm();
    public void set_KeyAlgorithm(string value);
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.EncryptionProperty : object {
    private string _target;
    private string _id;
    private XmlElement _elemProp;
    private XmlElement _cachedXml;
    public string Id { get; }
    public string Target { get; }
    public XmlElement PropertyElement { get; public set; }
    private bool CacheValid { get; }
    public EncryptionProperty(XmlElement elementProperty);
    public string get_Id();
    public string get_Target();
    public XmlElement get_PropertyElement();
    public void set_PropertyElement(XmlElement value);
    private bool get_CacheValid();
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public void LoadXml(XmlElement value);
}
[DefaultMemberAttribute("ItemOf")]
public class System.Security.Cryptography.Xml.EncryptionPropertyCollection : object {
    private ArrayList _props;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public EncryptionProperty ItemOf { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    private sealed virtual override int System.Collections.IList.Add(object value);
    public int Add(EncryptionProperty value);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public bool Contains(EncryptionProperty value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public int IndexOf(EncryptionProperty value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public void Insert(int index, EncryptionProperty value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public void Remove(EncryptionProperty value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public EncryptionProperty Item(int index);
    public EncryptionProperty get_ItemOf(int index);
    public void set_ItemOf(int index, EncryptionProperty value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(EncryptionProperty[] array, int index);
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
}
internal class System.Security.Cryptography.Xml.ExcAncestralNamespaceContextManager : AncestralNamespaceContextManager {
    private Hashtable _inclusivePrefixSet;
    internal ExcAncestralNamespaceContextManager(string inclusiveNamespacesPrefixList);
    private bool HasNonRedundantInclusivePrefix(XmlAttribute attr);
    private void GatherNamespaceToRender(string nsPrefix, SortedList nsListToRender, Hashtable nsLocallyDeclared);
    internal virtual void GetNamespacesToRender(XmlElement element, SortedList attrListToRender, SortedList nsListToRender, Hashtable nsLocallyDeclared);
    internal virtual void TrackNamespaceNode(XmlAttribute attr, SortedList nsListToRender, Hashtable nsLocallyDeclared);
    internal virtual void TrackXmlNamespaceNode(XmlAttribute attr, SortedList nsListToRender, SortedList attrListToRender, Hashtable nsLocallyDeclared);
}
internal class System.Security.Cryptography.Xml.ExcCanonicalXml : object {
    private CanonicalXmlDocument _c14nDoc;
    private ExcAncestralNamespaceContextManager _ancMgr;
    internal ExcCanonicalXml(Stream inputStream, bool includeComments, string inclusiveNamespacesPrefixList, XmlResolver resolver, string strBaseUri);
    internal ExcCanonicalXml(XmlDocument document, bool includeComments, string inclusiveNamespacesPrefixList, XmlResolver resolver);
    internal ExcCanonicalXml(XmlNodeList nodeList, bool includeComments, string inclusiveNamespacesPrefixList, XmlResolver resolver);
    internal Byte[] GetBytes();
    internal Byte[] GetDigestedBytes(HashAlgorithm hash);
    private static void MarkInclusionStateForNodes(XmlNodeList nodeList, XmlDocument inputRoot, XmlDocument root);
    private static void MarkNodeAsIncluded(XmlNode node);
}
internal interface System.Security.Cryptography.Xml.ICanonicalizableNode {
    public bool IsInNodeSet { get; public set; }
    public abstract virtual bool get_IsInNodeSet();
    public abstract virtual void set_IsInNodeSet(bool value);
    public abstract virtual void Write(StringBuilder strBuilder, DocPosition docPos, AncestralNamespaceContextManager anc);
    public abstract virtual void WriteHash(HashAlgorithm hash, DocPosition docPos, AncestralNamespaceContextManager anc);
}
public interface System.Security.Cryptography.Xml.IRelDecryptor {
    public abstract virtual Stream Decrypt(EncryptionMethod encryptionMethod, KeyInfo keyInfo, Stream toDecrypt);
}
public class System.Security.Cryptography.Xml.KeyInfo : object {
    private string _id;
    private ArrayList _keyInfoClauses;
    public string Id { get; public set; }
    public int Count { get; }
    public string get_Id();
    public void set_Id(string value);
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument xmlDocument);
    public void LoadXml(XmlElement value);
    public int get_Count();
    public void AddClause(KeyInfoClause clause);
    public sealed virtual IEnumerator GetEnumerator();
    public IEnumerator GetEnumerator(Type requestedObjectType);
}
public abstract class System.Security.Cryptography.Xml.KeyInfoClause : object {
    public abstract virtual XmlElement GetXml();
    internal virtual XmlElement GetXml(XmlDocument xmlDocument);
    public abstract virtual void LoadXml(XmlElement element);
}
public class System.Security.Cryptography.Xml.KeyInfoEncryptedKey : KeyInfoClause {
    private EncryptedKey _encryptedKey;
    public EncryptedKey EncryptedKey { get; public set; }
    public KeyInfoEncryptedKey(EncryptedKey encryptedKey);
    public EncryptedKey get_EncryptedKey();
    public void set_EncryptedKey(EncryptedKey value);
    public virtual XmlElement GetXml();
    internal virtual XmlElement GetXml(XmlDocument xmlDocument);
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoName : KeyInfoClause {
    private string _keyName;
    public string Value { get; public set; }
    public KeyInfoName(string keyName);
    public string get_Value();
    public void set_Value(string value);
    public virtual XmlElement GetXml();
    internal virtual XmlElement GetXml(XmlDocument xmlDocument);
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoNode : KeyInfoClause {
    private XmlElement _node;
    public XmlElement Value { get; public set; }
    public KeyInfoNode(XmlElement node);
    public XmlElement get_Value();
    public void set_Value(XmlElement value);
    public virtual XmlElement GetXml();
    internal virtual XmlElement GetXml(XmlDocument xmlDocument);
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoRetrievalMethod : KeyInfoClause {
    private string _uri;
    private string _type;
    public string Uri { get; public set; }
    public string Type { get; public set; }
    public KeyInfoRetrievalMethod(string strUri);
    public KeyInfoRetrievalMethod(string strUri, string typeName);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_Type();
    public void set_Type(string value);
    public virtual XmlElement GetXml();
    internal virtual XmlElement GetXml(XmlDocument xmlDocument);
    public virtual void LoadXml(XmlElement value);
}
public class System.Security.Cryptography.Xml.KeyInfoX509Data : KeyInfoClause {
    private ArrayList _certificates;
    private ArrayList _issuerSerials;
    private ArrayList _subjectKeyIds;
    private ArrayList _subjectNames;
    private Byte[] _CRL;
    public ArrayList Certificates { get; }
    public ArrayList SubjectKeyIds { get; }
    public ArrayList SubjectNames { get; }
    public ArrayList IssuerSerials { get; }
    public Byte[] CRL { get; public set; }
    public KeyInfoX509Data(Byte[] rgbCert);
    public KeyInfoX509Data(X509Certificate cert);
    public KeyInfoX509Data(X509Certificate cert, X509IncludeOption includeOption);
    public ArrayList get_Certificates();
    public void AddCertificate(X509Certificate certificate);
    public ArrayList get_SubjectKeyIds();
    public void AddSubjectKeyId(Byte[] subjectKeyId);
    public void AddSubjectKeyId(string subjectKeyId);
    public ArrayList get_SubjectNames();
    public void AddSubjectName(string subjectName);
    public ArrayList get_IssuerSerials();
    public void AddIssuerSerial(string issuerName, string serialNumber);
    internal void InternalAddIssuerSerial(string issuerName, string serialNumber);
    public Byte[] get_CRL();
    public void set_CRL(Byte[] value);
    private void Clear();
    public virtual XmlElement GetXml();
    internal virtual XmlElement GetXml(XmlDocument xmlDocument);
    public virtual void LoadXml(XmlElement element);
}
public class System.Security.Cryptography.Xml.KeyReference : EncryptedReference {
    public KeyReference(string uri);
    public KeyReference(string uri, TransformChain transformChain);
}
internal class System.Security.Cryptography.Xml.MyXmlDocument : XmlDocument {
    protected virtual XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI);
}
internal class System.Security.Cryptography.Xml.NamespaceFrame : object {
    private Hashtable _rendered;
    private Hashtable _unrendered;
    internal void AddRendered(XmlAttribute attr);
    internal XmlAttribute GetRendered(string nsPrefix);
    internal void AddUnrendered(XmlAttribute attr);
    internal XmlAttribute GetUnrendered(string nsPrefix);
    internal Hashtable GetUnrendered();
}
internal class System.Security.Cryptography.Xml.NamespaceSortOrder : object {
    public sealed virtual int Compare(object a, object b);
}
public class System.Security.Cryptography.Xml.Reference : object {
    internal static string DefaultDigestMethod;
    private string _id;
    private string _uri;
    private string _type;
    private TransformChain _transformChain;
    private string _digestMethod;
    private Byte[] _digestValue;
    private HashAlgorithm _hashAlgorithm;
    private object _refTarget;
    private ReferenceTargetType _refTargetType;
    private XmlElement _cachedXml;
    private SignedXml _signedXml;
    internal CanonicalXmlNodeList _namespaces;
    public string Id { get; public set; }
    public string Uri { get; public set; }
    public string Type { get; public set; }
    public string DigestMethod { get; public set; }
    public Byte[] DigestValue { get; public set; }
    public TransformChain TransformChain { get; public set; }
    internal bool CacheValid { get; }
    internal SignedXml SignedXml { get; internal set; }
    internal ReferenceTargetType ReferenceTargetType { get; }
    public Reference(Stream stream);
    public Reference(string uri);
    internal Reference(XmlElement element);
    public string get_Id();
    public void set_Id(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public string get_Type();
    public void set_Type(string value);
    public string get_DigestMethod();
    public void set_DigestMethod(string value);
    public Byte[] get_DigestValue();
    public void set_DigestValue(Byte[] value);
    public TransformChain get_TransformChain();
    public void set_TransformChain(TransformChain value);
    internal bool get_CacheValid();
    internal SignedXml get_SignedXml();
    internal void set_SignedXml(SignedXml value);
    internal ReferenceTargetType get_ReferenceTargetType();
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public void LoadXml(XmlElement value);
    public void AddTransform(Transform transform);
    internal void UpdateHashValue(XmlDocument document, CanonicalXmlNodeList refList);
    internal Byte[] CalculateHashValue(XmlDocument document, CanonicalXmlNodeList refList);
}
[DefaultMemberAttribute("ItemOf")]
public class System.Security.Cryptography.Xml.ReferenceList : object {
    private ArrayList _references;
    public int Count { get; }
    public EncryptedReference ItemOf { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public EncryptedReference Item(int index);
    public EncryptedReference get_ItemOf(int index);
    public void set_ItemOf(int index, EncryptedReference value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
}
internal enum System.Security.Cryptography.Xml.ReferenceTargetType : Enum {
    public int value__;
    public static ReferenceTargetType Stream;
    public static ReferenceTargetType XmlElement;
    public static ReferenceTargetType UriReference;
}
public class System.Security.Cryptography.Xml.RSAKeyValue : KeyInfoClause {
    private RSA _key;
    private static string KeyValueElementName;
    private static string RSAKeyValueElementName;
    private static string ModulusElementName;
    private static string ExponentElementName;
    public RSA Key { get; public set; }
    public RSAKeyValue(RSA key);
    public RSA get_Key();
    public void set_Key(RSA value);
    public virtual XmlElement GetXml();
    internal virtual XmlElement GetXml(XmlDocument xmlDocument);
    public virtual void LoadXml(XmlElement value);
}
internal class System.Security.Cryptography.Xml.RSAPKCS1SHA1SignatureDescription : RSAPKCS1SignatureDescription {
    public sealed virtual HashAlgorithm CreateDigest();
}
internal class System.Security.Cryptography.Xml.RSAPKCS1SHA256SignatureDescription : RSAPKCS1SignatureDescription {
    public sealed virtual HashAlgorithm CreateDigest();
}
internal class System.Security.Cryptography.Xml.RSAPKCS1SHA384SignatureDescription : RSAPKCS1SignatureDescription {
    public sealed virtual HashAlgorithm CreateDigest();
}
internal class System.Security.Cryptography.Xml.RSAPKCS1SHA512SignatureDescription : RSAPKCS1SignatureDescription {
    public sealed virtual HashAlgorithm CreateDigest();
}
internal abstract class System.Security.Cryptography.Xml.RSAPKCS1SignatureDescription : SignatureDescription {
    public RSAPKCS1SignatureDescription(string hashAlgorithmName);
    public sealed virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key);
    public sealed virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key);
    public abstract virtual HashAlgorithm CreateDigest();
}
public class System.Security.Cryptography.Xml.Signature : object {
    private string _id;
    private SignedInfo _signedInfo;
    private Byte[] _signatureValue;
    private string _signatureValueId;
    private KeyInfo _keyInfo;
    private IList _embeddedObjects;
    private CanonicalXmlNodeList _referencedItems;
    private SignedXml _signedXml;
    internal SignedXml SignedXml { get; internal set; }
    public string Id { get; public set; }
    public SignedInfo SignedInfo { get; public set; }
    public Byte[] SignatureValue { get; public set; }
    public KeyInfo KeyInfo { get; public set; }
    public IList ObjectList { get; public set; }
    internal CanonicalXmlNodeList ReferencedItems { get; }
    internal SignedXml get_SignedXml();
    internal void set_SignedXml(SignedXml value);
    public string get_Id();
    public void set_Id(string value);
    public SignedInfo get_SignedInfo();
    public void set_SignedInfo(SignedInfo value);
    public Byte[] get_SignatureValue();
    public void set_SignatureValue(Byte[] value);
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public IList get_ObjectList();
    public void set_ObjectList(IList value);
    internal CanonicalXmlNodeList get_ReferencedItems();
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public void LoadXml(XmlElement value);
    public void AddObject(DataObject dataObject);
}
public class System.Security.Cryptography.Xml.SignedInfo : object {
    private string _id;
    private string _canonicalizationMethod;
    private string _signatureMethod;
    private string _signatureLength;
    private ArrayList _references;
    private XmlElement _cachedXml;
    private SignedXml _signedXml;
    private Transform _canonicalizationMethodTransform;
    internal SignedXml SignedXml { get; internal set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public string Id { get; public set; }
    public string CanonicalizationMethod { get; public set; }
    public Transform CanonicalizationMethodObject { get; }
    public string SignatureMethod { get; public set; }
    public string SignatureLength { get; public set; }
    public ArrayList References { get; }
    internal bool CacheValid { get; }
    internal SignedXml get_SignedXml();
    internal void set_SignedXml(SignedXml value);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public string get_Id();
    public void set_Id(string value);
    public string get_CanonicalizationMethod();
    public void set_CanonicalizationMethod(string value);
    public Transform get_CanonicalizationMethodObject();
    public string get_SignatureMethod();
    public void set_SignatureMethod(string value);
    public string get_SignatureLength();
    public void set_SignatureLength(string value);
    public ArrayList get_References();
    internal bool get_CacheValid();
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    public void LoadXml(XmlElement value);
    public void AddReference(Reference reference);
}
public class System.Security.Cryptography.Xml.SignedXml : object {
    protected Signature m_signature;
    protected string m_strSigningKeyName;
    private AsymmetricAlgorithm _signingKey;
    private XmlDocument _containingDocument;
    private IEnumerator _keyInfoEnum;
    private X509Certificate2Collection _x509Collection;
    private IEnumerator _x509Enum;
    private Boolean[] _refProcessed;
    private Int32[] _refLevelCache;
    internal XmlResolver _xmlResolver;
    internal XmlElement _context;
    private bool _bResolverSet;
    private Func`2<SignedXml, bool> _signatureFormatValidator;
    private Collection`1<string> _safeCanonicalizationMethods;
    private static IList`1<string> s_knownCanonicalizationMethods;
    private static IList`1<string> s_defaultSafeTransformMethods;
    private static string XmlDsigMoreHMACMD5Url;
    private static string XmlDsigMoreHMACSHA256Url;
    private static string XmlDsigMoreHMACSHA384Url;
    private static string XmlDsigMoreHMACSHA512Url;
    private static string XmlDsigMoreHMACRIPEMD160Url;
    private EncryptedXml _exml;
    public static string XmlDsigNamespaceUrl;
    public static string XmlDsigMinimalCanonicalizationUrl;
    public static string XmlDsigCanonicalizationUrl;
    public static string XmlDsigCanonicalizationWithCommentsUrl;
    public static string XmlDsigSHA1Url;
    public static string XmlDsigDSAUrl;
    public static string XmlDsigRSASHA1Url;
    public static string XmlDsigHMACSHA1Url;
    public static string XmlDsigSHA256Url;
    public static string XmlDsigRSASHA256Url;
    public static string XmlDsigSHA384Url;
    public static string XmlDsigRSASHA384Url;
    public static string XmlDsigSHA512Url;
    public static string XmlDsigRSASHA512Url;
    public static string XmlDsigC14NTransformUrl;
    public static string XmlDsigC14NWithCommentsTransformUrl;
    public static string XmlDsigExcC14NTransformUrl;
    public static string XmlDsigExcC14NWithCommentsTransformUrl;
    public static string XmlDsigBase64TransformUrl;
    public static string XmlDsigXPathTransformUrl;
    public static string XmlDsigXsltTransformUrl;
    public static string XmlDsigEnvelopedSignatureTransformUrl;
    public static string XmlDecryptionTransformUrl;
    public static string XmlLicenseTransformUrl;
    private bool _bCacheValid;
    private Byte[] _digestedSignedInfo;
    public string SigningKeyName { get; public set; }
    unknown XmlResolver Resolver {public set; }
    internal bool ResolverSet { get; }
    public Func`2<SignedXml, bool> SignatureFormatValidator { get; public set; }
    public Collection`1<string> SafeCanonicalizationMethods { get; }
    public AsymmetricAlgorithm SigningKey { get; public set; }
    public EncryptedXml EncryptedXml { get; public set; }
    public Signature Signature { get; }
    public SignedInfo SignedInfo { get; }
    public string SignatureMethod { get; }
    public string SignatureLength { get; }
    public Byte[] SignatureValue { get; }
    public KeyInfo KeyInfo { get; public set; }
    private static IList`1<string> KnownCanonicalizationMethods { get; }
    private static IList`1<string> DefaultSafeTransformMethods { get; }
    public SignedXml(XmlDocument document);
    public SignedXml(XmlElement elem);
    private void Initialize(XmlElement element);
    public string get_SigningKeyName();
    public void set_SigningKeyName(string value);
    public void set_Resolver(XmlResolver value);
    internal bool get_ResolverSet();
    public Func`2<SignedXml, bool> get_SignatureFormatValidator();
    public void set_SignatureFormatValidator(Func`2<SignedXml, bool> value);
    public Collection`1<string> get_SafeCanonicalizationMethods();
    public AsymmetricAlgorithm get_SigningKey();
    public void set_SigningKey(AsymmetricAlgorithm value);
    public EncryptedXml get_EncryptedXml();
    public void set_EncryptedXml(EncryptedXml value);
    public Signature get_Signature();
    public SignedInfo get_SignedInfo();
    public string get_SignatureMethod();
    public string get_SignatureLength();
    public Byte[] get_SignatureValue();
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    public XmlElement GetXml();
    public void LoadXml(XmlElement value);
    public void AddReference(Reference reference);
    public void AddObject(DataObject dataObject);
    public bool CheckSignature();
    public bool CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey);
    public bool CheckSignature(AsymmetricAlgorithm key);
    public bool CheckSignature(KeyedHashAlgorithm macAlg);
    public bool CheckSignature(X509Certificate2 certificate, bool verifySignatureOnly);
    public void ComputeSignature();
    public void ComputeSignature(KeyedHashAlgorithm macAlg);
    protected virtual AsymmetricAlgorithm GetPublicKey();
    private X509Certificate2Collection BuildBagOfCerts();
    private AsymmetricAlgorithm GetNextCertificatePublicKey();
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
    internal static XmlElement DefaultGetIdElement(XmlDocument document, string idValue);
    private static bool DefaultSignatureFormatValidator(SignedXml signedXml);
    private bool DoesSignatureUseTruncatedHmac();
    private bool DoesSignatureUseSafeCanonicalizationMethod();
    private bool ReferenceUsesSafeTransformMethods(Reference reference);
    private bool IsSafeTransform(string transformAlgorithm);
    private static IList`1<string> get_KnownCanonicalizationMethods();
    private static IList`1<string> get_DefaultSafeTransformMethods();
    private Byte[] GetC14NDigest(HashAlgorithm hash);
    private int GetReferenceLevel(int index, ArrayList references);
    private void BuildDigestedReferences();
    private bool CheckDigestedReferences();
    private static bool CryptographicEquals(Byte[] a, Byte[] b);
    private bool CheckSignatureFormat();
    private bool CheckSignedInfo(AsymmetricAlgorithm key);
    private bool CheckSignedInfo(KeyedHashAlgorithm macAlg);
    private static XmlElement GetSingleReferenceTarget(XmlDocument document, string idAttributeName, string idValue);
    private static bool IsKeyTheCorrectAlgorithm(AsymmetricAlgorithm key, Type expectedType);
}
internal static class System.Security.Cryptography.Xml.SignedXmlDebugLog : object {
    private static string NullString;
    private static TraceSource s_traceSource;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_haveVerboseLogging;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_verboseLogging;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_haveInformationLogging;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_informationLogging;
    private static bool InformationLoggingEnabled { get; }
    private static bool VerboseLoggingEnabled { get; }
    private static SignedXmlDebugLog();
    private static bool get_InformationLoggingEnabled();
    private static bool get_VerboseLoggingEnabled();
    private static string FormatBytes(Byte[] bytes);
    private static string GetKeyName(object key);
    private static string GetObjectId(object o);
    private static string GetOidName(Oid oid);
    internal static void LogBeginCanonicalization(SignedXml signedXml, Transform canonicalizationTransform);
    internal static void LogBeginCheckSignatureFormat(SignedXml signedXml, Func`2<SignedXml, bool> formatValidator);
    internal static void LogBeginCheckSignedInfo(SignedXml signedXml, SignedInfo signedInfo);
    internal static void LogBeginSignatureComputation(SignedXml signedXml, XmlElement context);
    internal static void LogBeginSignatureVerification(SignedXml signedXml, XmlElement context);
    internal static void LogCanonicalizedOutput(SignedXml signedXml, Transform canonicalizationTransform);
    internal static void LogFormatValidationResult(SignedXml signedXml, bool result);
    internal static void LogUnsafeCanonicalizationMethod(SignedXml signedXml, string algorithm, IEnumerable`1<string> validAlgorithms);
    internal static void LogUnsafeTransformMethod(SignedXml signedXml, string algorithm, IEnumerable`1<string> validC14nAlgorithms, IEnumerable`1<string> validTransformAlgorithms);
    internal static void LogNamespacePropagation(SignedXml signedXml, XmlNodeList namespaces);
    internal static Stream LogReferenceData(Reference reference, Stream data);
    internal static void LogSigning(SignedXml signedXml, object key, SignatureDescription signatureDescription, HashAlgorithm hash, AsymmetricSignatureFormatter asymmetricSignatureFormatter);
    internal static void LogSigning(SignedXml signedXml, KeyedHashAlgorithm key);
    internal static void LogSigningReference(SignedXml signedXml, Reference reference);
    internal static void LogVerificationFailure(SignedXml signedXml, string failureLocation);
    internal static void LogVerificationResult(SignedXml signedXml, object key, bool verified);
    internal static void LogVerifyKeyUsage(SignedXml signedXml, X509Certificate certificate, X509KeyUsageExtension keyUsages);
    internal static void LogVerifyReference(SignedXml signedXml, Reference reference);
    internal static void LogVerifyReferenceHash(SignedXml signedXml, Reference reference, Byte[] actualHash, Byte[] expectedHash);
    internal static void LogVerifySignedInfo(SignedXml signedXml, AsymmetricAlgorithm key, SignatureDescription signatureDescription, HashAlgorithm hashAlgorithm, AsymmetricSignatureDeformatter asymmetricSignatureDeformatter, Byte[] actualHashValue, Byte[] signatureValue);
    internal static void LogVerifySignedInfo(SignedXml signedXml, KeyedHashAlgorithm mac, Byte[] actualHashValue, Byte[] signatureValue);
    internal static void LogVerifyX509Chain(SignedXml signedXml, X509Chain chain, X509Certificate certificate);
    internal static void LogSignedXmlRecursionLimit(SignedXml signedXml, Reference reference);
    private static void WriteLine(object source, TraceEventType eventType, SignedXmlDebugEvent eventId, string data);
}
internal static class System.Security.Cryptography.Xml.SymmetricKeyWrap : object {
    private static Byte[] s_rgbTripleDES_KW_IV;
    private static Byte[] s_rgbAES_KW_IV;
    private static SymmetricKeyWrap();
    internal static Byte[] TripleDESKeyWrapEncrypt(Byte[] rgbKey, Byte[] rgbWrappedKeyData);
    internal static Byte[] TripleDESKeyWrapDecrypt(Byte[] rgbKey, Byte[] rgbEncryptedWrappedKeyData);
    internal static Byte[] AESKeyWrapEncrypt(Byte[] rgbKey, Byte[] rgbWrappedKeyData);
    internal static Byte[] AESKeyWrapDecrypt(Byte[] rgbKey, Byte[] rgbEncryptedWrappedKeyData);
}
public abstract class System.Security.Cryptography.Xml.Transform : object {
    private string _algorithm;
    private string _baseUri;
    internal XmlResolver _xmlResolver;
    private bool _bResolverSet;
    private SignedXml _signedXml;
    private Reference _reference;
    private Hashtable _propagatedNamespaces;
    private XmlElement _context;
    internal string BaseURI { get; internal set; }
    internal SignedXml SignedXml { get; internal set; }
    internal Reference Reference { get; internal set; }
    public string Algorithm { get; public set; }
    internal XmlResolver Resolver { get; public set; }
    internal bool ResolverSet { get; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlElement Context { get; public set; }
    public Hashtable PropagatedNamespaces { get; }
    internal string get_BaseURI();
    internal void set_BaseURI(string value);
    internal SignedXml get_SignedXml();
    internal void set_SignedXml(SignedXml value);
    internal Reference get_Reference();
    internal void set_Reference(Reference value);
    public string get_Algorithm();
    public void set_Algorithm(string value);
    internal XmlResolver get_Resolver();
    public void set_Resolver(XmlResolver value);
    internal bool get_ResolverSet();
    public abstract virtual Type[] get_InputTypes();
    public abstract virtual Type[] get_OutputTypes();
    internal bool AcceptsType(Type inputType);
    public XmlElement GetXml();
    internal XmlElement GetXml(XmlDocument document);
    internal XmlElement GetXml(XmlDocument document, string name);
    public abstract virtual void LoadInnerXml(XmlNodeList nodeList);
    protected abstract virtual XmlNodeList GetInnerXml();
    public abstract virtual void LoadInput(object obj);
    public abstract virtual object GetOutput();
    public abstract virtual object GetOutput(Type type);
    public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
    public XmlElement get_Context();
    public void set_Context(XmlElement value);
    public Hashtable get_PropagatedNamespaces();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.Xml.TransformChain : object {
    private ArrayList _transforms;
    public int Count { get; }
    public Transform Item { get; }
    public void Add(Transform transform);
    public IEnumerator GetEnumerator();
    public int get_Count();
    public Transform get_Item(int index);
    internal Stream TransformToOctetStream(object inputObject, Type inputType, XmlResolver resolver, string baseUri);
    internal Stream TransformToOctetStream(Stream input, XmlResolver resolver, string baseUri);
    internal Stream TransformToOctetStream(XmlDocument document, XmlResolver resolver, string baseUri);
    internal XmlElement GetXml(XmlDocument document, string ns);
    internal void LoadXml(XmlElement value);
}
internal static class System.Security.Cryptography.Xml.Utils : object {
    internal static int MaxCharactersInDocument;
    internal static long MaxCharactersFromEntities;
    internal static int XmlDsigSearchDepth;
    internal static int MaxTransformsPerReference;
    internal static int MaxReferencesPerSignedInfo;
    private static bool HasNamespace(XmlElement element, string prefix, string value);
    internal static bool IsCommittedNamespace(XmlElement element, string prefix, string value);
    internal static bool IsRedundantNamespace(XmlElement element, string prefix, string value);
    internal static string GetAttribute(XmlElement element, string localName, string namespaceURI);
    internal static bool HasAttribute(XmlElement element, string localName, string namespaceURI);
    internal static bool VerifyAttributes(XmlElement element, string expectedAttrName);
    internal static bool VerifyAttributes(XmlElement element, String[] expectedAttrNames);
    internal static bool IsNamespaceNode(XmlNode n);
    internal static bool IsXmlNamespaceNode(XmlNode n);
    internal static bool IsDefaultNamespaceNode(XmlNode n);
    internal static bool IsEmptyDefaultNamespaceNode(XmlNode n);
    internal static string GetNamespacePrefix(XmlAttribute a);
    internal static bool HasNamespacePrefix(XmlAttribute a, string nsPrefix);
    internal static bool IsNonRedundantNamespaceDecl(XmlAttribute a, XmlAttribute nearestAncestorWithSamePrefix);
    internal static bool IsXmlPrefixDefinitionNode(XmlAttribute a);
    internal static string DiscardWhiteSpaces(string inputBuffer);
    internal static string DiscardWhiteSpaces(string inputBuffer, int inputOffset, int inputCount);
    internal static void SBReplaceCharWithString(StringBuilder sb, char oldChar, string newString);
    internal static XmlReader PreProcessStreamInput(Stream inputStream, XmlResolver xmlResolver, string baseUri);
    internal static XmlReaderSettings GetSecureXmlReaderSettings(XmlResolver xmlResolver);
    internal static XmlDocument PreProcessDocumentInput(XmlDocument document, XmlResolver xmlResolver, string baseUri);
    internal static XmlDocument PreProcessElementInput(XmlElement elem, XmlResolver xmlResolver, string baseUri);
    internal static XmlDocument DiscardComments(XmlDocument document);
    internal static XmlNodeList AllDescendantNodes(XmlNode node, bool includeComments);
    internal static bool NodeInList(XmlNode node, XmlNodeList nodeList);
    internal static string GetIdFromLocalUri(string uri, Boolean& discardComments);
    internal static string ExtractIdFromLocalUri(string uri);
    internal static void RemoveAllChildren(XmlElement inputElement);
    internal static long Pump(Stream input, Stream output);
    internal static Hashtable TokenizePrefixListString(string s);
    internal static string EscapeWhitespaceData(string data);
    internal static string EscapeTextData(string data);
    internal static string EscapeCData(string data);
    internal static string EscapeAttributeValue(string value);
    internal static XmlDocument GetOwnerDocument(XmlNodeList nodeList);
    internal static void AddNamespaces(XmlElement elem, CanonicalXmlNodeList namespaces);
    internal static void AddNamespaces(XmlElement elem, Hashtable namespaces);
    internal static CanonicalXmlNodeList GetPropagatedAttributes(XmlElement elem);
    internal static Byte[] ConvertIntToByteArray(int dwInput);
    internal static int ConvertByteArrayToInt(Byte[] input);
    internal static int GetHexArraySize(Byte[] hex);
    internal static X509IssuerSerial CreateX509IssuerSerial(string issuerName, string serialNumber);
    internal static X509Certificate2Collection BuildBagOfCerts(KeyInfoX509Data keyInfoX509Data, CertUsageType certUsageType);
    internal static string EncodeHexString(Byte[] sArray);
    internal static Byte[] DecodeHexString(string s);
    internal static bool IsSelfSigned(X509Chain chain);
    internal static AsymmetricAlgorithm GetAnyPublicKey(X509Certificate2 certificate);
}
public class System.Security.Cryptography.Xml.XmlDecryptionTransform : Transform {
    private Type[] _inputTypes;
    private Type[] _outputTypes;
    private XmlNodeList _encryptedDataList;
    private ArrayList _arrayListUri;
    private EncryptedXml _exml;
    private XmlDocument _containingDocument;
    private XmlNamespaceManager _nsm;
    private static string XmlDecryptionTransformNamespaceUrl;
    private ArrayList ExceptUris { get; }
    public EncryptedXml EncryptedXml { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    private ArrayList get_ExceptUris();
    protected virtual bool IsTargetElement(XmlElement inputElement, string idValue);
    public EncryptedXml get_EncryptedXml();
    public void set_EncryptedXml(EncryptedXml value);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public void AddExceptUri(string uri);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    private void LoadStreamInput(Stream stream);
    private void LoadXmlDocumentInput(XmlDocument document);
    private void ReplaceEncryptedData(XmlElement encryptedDataElement, Byte[] decrypted);
    private bool ProcessEncryptedDataItem(XmlElement encryptedDataElement);
    private void ProcessElementRecursively(XmlNodeList encryptedDatas);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlDsigBase64Transform : Transform {
    private Type[] _inputTypes;
    private Type[] _outputTypes;
    private CryptoStream _cs;
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    private void LoadStreamInput(Stream inputStream);
    private void LoadXmlNodeListInput(XmlNodeList nodeList);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlDsigC14NTransform : Transform {
    private Type[] _inputTypes;
    private Type[] _outputTypes;
    private CanonicalXml _cXml;
    private bool _includeComments;
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigC14NTransform(bool includeComments);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
}
public class System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform : XmlDsigC14NTransform {
}
public class System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform : Transform {
    private Type[] _inputTypes;
    private Type[] _outputTypes;
    private XmlNodeList _inputNodeList;
    private bool _includeComments;
    private XmlNamespaceManager _nsm;
    private XmlDocument _containingDocument;
    private int _signaturePosition;
    unknown int SignaturePosition {internal set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigEnvelopedSignatureTransform(bool includeComments);
    internal void set_SignaturePosition(int value);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    private void LoadStreamInput(Stream stream);
    private void LoadXmlNodeListInput(XmlNodeList nodeList);
    private void LoadXmlDocumentInput(XmlDocument doc);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlDsigExcC14NTransform : Transform {
    private Type[] _inputTypes;
    private Type[] _outputTypes;
    private bool _includeComments;
    private string _inclusiveNamespacesPrefixList;
    private ExcCanonicalXml _excCanonicalXml;
    public string InclusiveNamespacesPrefixList { get; public set; }
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigExcC14NTransform(bool includeComments);
    public XmlDsigExcC14NTransform(string inclusiveNamespacesPrefixList);
    public XmlDsigExcC14NTransform(bool includeComments, string inclusiveNamespacesPrefixList);
    public string get_InclusiveNamespacesPrefixList();
    public void set_InclusiveNamespacesPrefixList(string value);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual Byte[] GetDigestedOutput(HashAlgorithm hash);
}
public class System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform : XmlDsigExcC14NTransform {
    public XmlDsigExcC14NWithCommentsTransform(string inclusiveNamespacesPrefixList);
}
public class System.Security.Cryptography.Xml.XmlDsigXPathTransform : Transform {
    private Type[] _inputTypes;
    private Type[] _outputTypes;
    private string _xpathexpr;
    private XmlDocument _document;
    private XmlNamespaceManager _nsm;
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    private void LoadStreamInput(Stream stream);
    private void LoadXmlNodeListInput(XmlNodeList nodeList);
    private void LoadXmlDocumentInput(XmlDocument doc);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlDsigXsltTransform : Transform {
    private Type[] _inputTypes;
    private Type[] _outputTypes;
    private XmlNodeList _xslNodes;
    private string _xslFragment;
    private Stream _inputStream;
    private bool _includeComments;
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public XmlDsigXsltTransform(bool includeComments);
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    protected virtual XmlNodeList GetInnerXml();
    public virtual void LoadInput(object obj);
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
}
public class System.Security.Cryptography.Xml.XmlLicenseTransform : Transform {
    private Type[] _inputTypes;
    private Type[] _outputTypes;
    private XmlNamespaceManager _namespaceManager;
    private XmlDocument _license;
    private IRelDecryptor _relDecryptor;
    private static string ElementIssuer;
    private static string NamespaceUriCore;
    public Type[] InputTypes { get; }
    public Type[] OutputTypes { get; }
    public IRelDecryptor Decryptor { get; public set; }
    public virtual Type[] get_InputTypes();
    public virtual Type[] get_OutputTypes();
    public IRelDecryptor get_Decryptor();
    public void set_Decryptor(IRelDecryptor value);
    private void DecryptEncryptedGrants(XmlNodeList encryptedGrantList, IRelDecryptor decryptor);
    protected virtual XmlNodeList GetInnerXml();
    public virtual object GetOutput();
    public virtual object GetOutput(Type type);
    public virtual void LoadInnerXml(XmlNodeList nodeList);
    public virtual void LoadInput(object obj);
}
internal class System.Security.Cryptography.Xml.XmlSecureResolver : XmlResolver {
    internal XmlSecureResolver(XmlResolver resolver, string securityUrl);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentOutOfRange_Index { get; }
    internal static string Arg_EmptyOrNullString { get; }
    internal static string Cryptography_Partial_Chain { get; }
    internal static string Cryptography_Xml_BadWrappedKeySize { get; }
    internal static string Cryptography_Xml_CipherValueElementRequired { get; }
    internal static string Cryptography_Xml_CreateHashAlgorithmFailed { get; }
    internal static string Cryptography_Xml_CreateTransformFailed { get; }
    internal static string Cryptography_Xml_CreatedKeyFailed { get; }
    internal static string Cryptography_Xml_DigestMethodRequired { get; }
    internal static string Cryptography_Xml_DigestValueRequired { get; }
    internal static string Cryptography_Xml_EnvelopedSignatureRequiresContext { get; }
    internal static string Cryptography_Xml_InvalidElement { get; }
    internal static string Cryptography_Xml_InvalidEncryptionProperty { get; }
    internal static string Cryptography_Xml_InvalidKeySize { get; }
    internal static string Cryptography_Xml_InvalidReference { get; }
    internal static string Cryptography_Xml_InvalidSignatureLength { get; }
    internal static string Cryptography_Xml_InvalidSignatureLength2 { get; }
    internal static string Cryptography_Xml_InvalidX509IssuerSerialNumber { get; }
    internal static string Cryptography_Xml_KeyInfoRequired { get; }
    internal static string Cryptography_Xml_KW_BadKeySize { get; }
    internal static string Cryptography_Xml_LoadKeyFailed { get; }
    internal static string Cryptography_Xml_MissingAlgorithm { get; }
    internal static string Cryptography_Xml_MissingCipherData { get; }
    internal static string Cryptography_Xml_MissingDecryptionKey { get; }
    internal static string Cryptography_Xml_MissingEncryptionKey { get; }
    internal static string Cryptography_Xml_NotSupportedCryptographicTransform { get; }
    internal static string Cryptography_Xml_ReferenceElementRequired { get; }
    internal static string Cryptography_Xml_ReferenceTypeRequired { get; }
    internal static string Cryptography_Xml_SelfReferenceRequiresContext { get; }
    internal static string Cryptography_Xml_SignatureDescriptionNotCreated { get; }
    internal static string Cryptography_Xml_SignatureMethodKeyMismatch { get; }
    internal static string Cryptography_Xml_SignatureMethodRequired { get; }
    internal static string Cryptography_Xml_SignatureValueRequired { get; }
    internal static string Cryptography_Xml_SignedInfoRequired { get; }
    internal static string Cryptography_Xml_TransformIncorrectInputType { get; }
    internal static string Cryptography_Xml_IncorrectObjectType { get; }
    internal static string Cryptography_Xml_UnknownTransform { get; }
    internal static string Cryptography_Xml_UriNotResolved { get; }
    internal static string Cryptography_Xml_UriNotSupported { get; }
    internal static string Cryptography_Xml_UriRequired { get; }
    internal static string Cryptography_Xml_XrmlMissingContext { get; }
    internal static string Cryptography_Xml_XrmlMissingIRelDecryptor { get; }
    internal static string Cryptography_Xml_XrmlMissingIssuer { get; }
    internal static string Cryptography_Xml_XrmlMissingLicence { get; }
    internal static string Cryptography_Xml_XrmlUnableToDecryptGrant { get; }
    internal static string NotSupported_KeyAlgorithm { get; }
    internal static string Log_ActualHashValue { get; }
    internal static string Log_BeginCanonicalization { get; }
    internal static string Log_BeginSignatureComputation { get; }
    internal static string Log_BeginSignatureVerification { get; }
    internal static string Log_BuildX509Chain { get; }
    internal static string Log_CanonicalizationSettings { get; }
    internal static string Log_CanonicalizedOutput { get; }
    internal static string Log_CertificateChain { get; }
    internal static string Log_CheckSignatureFormat { get; }
    internal static string Log_CheckSignedInfo { get; }
    internal static string Log_FormatValidationSuccessful { get; }
    internal static string Log_FormatValidationNotSuccessful { get; }
    internal static string Log_KeyUsages { get; }
    internal static string Log_NoNamespacesPropagated { get; }
    internal static string Log_PropagatingNamespace { get; }
    internal static string Log_RawSignatureValue { get; }
    internal static string Log_ReferenceHash { get; }
    internal static string Log_RevocationMode { get; }
    internal static string Log_RevocationFlag { get; }
    internal static string Log_SigningAsymmetric { get; }
    internal static string Log_SigningHmac { get; }
    internal static string Log_SigningReference { get; }
    internal static string Log_TransformedReferenceContents { get; }
    internal static string Log_UnsafeCanonicalizationMethod { get; }
    internal static string Log_UrlTimeout { get; }
    internal static string Log_VerificationFailed { get; }
    internal static string Log_VerificationFailed_References { get; }
    internal static string Log_VerificationFailed_SignedInfo { get; }
    internal static string Log_VerificationFailed_X509Chain { get; }
    internal static string Log_VerificationFailed_X509KeyUsage { get; }
    internal static string Log_VerificationFlag { get; }
    internal static string Log_VerificationTime { get; }
    internal static string Log_VerificationWithKeySuccessful { get; }
    internal static string Log_VerificationWithKeyNotSuccessful { get; }
    internal static string Log_VerifyReference { get; }
    internal static string Log_VerifySignedInfoAsymmetric { get; }
    internal static string Log_VerifySignedInfoHmac { get; }
    internal static string Log_X509ChainError { get; }
    internal static string Log_XmlContext { get; }
    internal static string Log_SignedXmlRecursionLimit { get; }
    internal static string Log_UnsafeTransformMethod { get; }
    internal static string ElementCombinationMissing { get; }
    internal static string ElementMissing { get; }
    internal static string MustContainChildElement { get; }
    internal static string WrongRootElement { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentOutOfRange_Index();
    internal static string get_Arg_EmptyOrNullString();
    internal static string get_Cryptography_Partial_Chain();
    internal static string get_Cryptography_Xml_BadWrappedKeySize();
    internal static string get_Cryptography_Xml_CipherValueElementRequired();
    internal static string get_Cryptography_Xml_CreateHashAlgorithmFailed();
    internal static string get_Cryptography_Xml_CreateTransformFailed();
    internal static string get_Cryptography_Xml_CreatedKeyFailed();
    internal static string get_Cryptography_Xml_DigestMethodRequired();
    internal static string get_Cryptography_Xml_DigestValueRequired();
    internal static string get_Cryptography_Xml_EnvelopedSignatureRequiresContext();
    internal static string get_Cryptography_Xml_InvalidElement();
    internal static string get_Cryptography_Xml_InvalidEncryptionProperty();
    internal static string get_Cryptography_Xml_InvalidKeySize();
    internal static string get_Cryptography_Xml_InvalidReference();
    internal static string get_Cryptography_Xml_InvalidSignatureLength();
    internal static string get_Cryptography_Xml_InvalidSignatureLength2();
    internal static string get_Cryptography_Xml_InvalidX509IssuerSerialNumber();
    internal static string get_Cryptography_Xml_KeyInfoRequired();
    internal static string get_Cryptography_Xml_KW_BadKeySize();
    internal static string get_Cryptography_Xml_LoadKeyFailed();
    internal static string get_Cryptography_Xml_MissingAlgorithm();
    internal static string get_Cryptography_Xml_MissingCipherData();
    internal static string get_Cryptography_Xml_MissingDecryptionKey();
    internal static string get_Cryptography_Xml_MissingEncryptionKey();
    internal static string get_Cryptography_Xml_NotSupportedCryptographicTransform();
    internal static string get_Cryptography_Xml_ReferenceElementRequired();
    internal static string get_Cryptography_Xml_ReferenceTypeRequired();
    internal static string get_Cryptography_Xml_SelfReferenceRequiresContext();
    internal static string get_Cryptography_Xml_SignatureDescriptionNotCreated();
    internal static string get_Cryptography_Xml_SignatureMethodKeyMismatch();
    internal static string get_Cryptography_Xml_SignatureMethodRequired();
    internal static string get_Cryptography_Xml_SignatureValueRequired();
    internal static string get_Cryptography_Xml_SignedInfoRequired();
    internal static string get_Cryptography_Xml_TransformIncorrectInputType();
    internal static string get_Cryptography_Xml_IncorrectObjectType();
    internal static string get_Cryptography_Xml_UnknownTransform();
    internal static string get_Cryptography_Xml_UriNotResolved();
    internal static string get_Cryptography_Xml_UriNotSupported();
    internal static string get_Cryptography_Xml_UriRequired();
    internal static string get_Cryptography_Xml_XrmlMissingContext();
    internal static string get_Cryptography_Xml_XrmlMissingIRelDecryptor();
    internal static string get_Cryptography_Xml_XrmlMissingIssuer();
    internal static string get_Cryptography_Xml_XrmlMissingLicence();
    internal static string get_Cryptography_Xml_XrmlUnableToDecryptGrant();
    internal static string get_NotSupported_KeyAlgorithm();
    internal static string get_Log_ActualHashValue();
    internal static string get_Log_BeginCanonicalization();
    internal static string get_Log_BeginSignatureComputation();
    internal static string get_Log_BeginSignatureVerification();
    internal static string get_Log_BuildX509Chain();
    internal static string get_Log_CanonicalizationSettings();
    internal static string get_Log_CanonicalizedOutput();
    internal static string get_Log_CertificateChain();
    internal static string get_Log_CheckSignatureFormat();
    internal static string get_Log_CheckSignedInfo();
    internal static string get_Log_FormatValidationSuccessful();
    internal static string get_Log_FormatValidationNotSuccessful();
    internal static string get_Log_KeyUsages();
    internal static string get_Log_NoNamespacesPropagated();
    internal static string get_Log_PropagatingNamespace();
    internal static string get_Log_RawSignatureValue();
    internal static string get_Log_ReferenceHash();
    internal static string get_Log_RevocationMode();
    internal static string get_Log_RevocationFlag();
    internal static string get_Log_SigningAsymmetric();
    internal static string get_Log_SigningHmac();
    internal static string get_Log_SigningReference();
    internal static string get_Log_TransformedReferenceContents();
    internal static string get_Log_UnsafeCanonicalizationMethod();
    internal static string get_Log_UrlTimeout();
    internal static string get_Log_VerificationFailed();
    internal static string get_Log_VerificationFailed_References();
    internal static string get_Log_VerificationFailed_SignedInfo();
    internal static string get_Log_VerificationFailed_X509Chain();
    internal static string get_Log_VerificationFailed_X509KeyUsage();
    internal static string get_Log_VerificationFlag();
    internal static string get_Log_VerificationTime();
    internal static string get_Log_VerificationWithKeySuccessful();
    internal static string get_Log_VerificationWithKeyNotSuccessful();
    internal static string get_Log_VerifyReference();
    internal static string get_Log_VerifySignedInfoAsymmetric();
    internal static string get_Log_VerifySignedInfoHmac();
    internal static string get_Log_X509ChainError();
    internal static string get_Log_XmlContext();
    internal static string get_Log_SignedXmlRecursionLimit();
    internal static string get_Log_UnsafeTransformMethod();
    internal static string get_ElementCombinationMissing();
    internal static string get_ElementMissing();
    internal static string get_MustContainChildElement();
    internal static string get_WrongRootElement();
}
