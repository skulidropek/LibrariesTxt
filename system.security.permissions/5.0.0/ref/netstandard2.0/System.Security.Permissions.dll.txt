public class System.ApplicationIdentity : object {
    public string CodeBase { get; }
    public string FullName { get; }
    public ApplicationIdentity(string applicationIdentityFullName);
    public string get_CodeBase();
    public string get_FullName();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
public class System.Configuration.ConfigurationPermission : CodeAccessPermission {
    public ConfigurationPermission(PermissionState state);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("32767")]
public class System.Configuration.ConfigurationPermissionAttribute : CodeAccessSecurityAttribute {
    public ConfigurationPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public abstract class System.Data.Common.DBDataPermission : CodeAccessPermission {
    public bool AllowBlankPassword { get; public set; }
    protected DBDataPermission(DBDataPermission permission);
    protected DBDataPermission(DBDataPermissionAttribute permissionAttribute);
    protected DBDataPermission(PermissionState state);
    protected DBDataPermission(PermissionState state, bool allowBlankPassword);
    public bool get_AllowBlankPassword();
    public void set_AllowBlankPassword(bool value);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    protected void Clear();
    public virtual IPermission Copy();
    protected virtual DBDataPermission CreateInstance();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public abstract class System.Data.Common.DBDataPermissionAttribute : CodeAccessSecurityAttribute {
    public bool AllowBlankPassword { get; public set; }
    public string ConnectionString { get; public set; }
    public KeyRestrictionBehavior KeyRestrictionBehavior { get; public set; }
    public string KeyRestrictions { get; public set; }
    protected DBDataPermissionAttribute(SecurityAction action);
    public bool get_AllowBlankPassword();
    public void set_AllowBlankPassword(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public KeyRestrictionBehavior get_KeyRestrictionBehavior();
    public void set_KeyRestrictionBehavior(KeyRestrictionBehavior value);
    public string get_KeyRestrictions();
    public void set_KeyRestrictions(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeConnectionString();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeKeyRestrictions();
}
public class System.Data.Odbc.OdbcPermission : DBDataPermission {
    public OdbcPermission(PermissionState state);
    public OdbcPermission(PermissionState state, bool allowBlankPassword);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.Odbc.OdbcPermissionAttribute : DBDataPermissionAttribute {
    public OdbcPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public class System.Data.OleDb.OleDbPermission : DBDataPermission {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Provider { get; public set; }
    public OleDbPermission(PermissionState state);
    public OleDbPermission(PermissionState state, bool allowBlankPassword);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.OleDb.OleDbPermissionAttribute : DBDataPermissionAttribute {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Provider { get; public set; }
    public OleDbPermissionAttribute(SecurityAction action);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual IPermission CreatePermission();
}
public class System.Data.OracleClient.OraclePermission : CodeAccessPermission {
    public bool AllowBlankPassword { get; public set; }
    public OraclePermission(PermissionState state);
    public bool get_AllowBlankPassword();
    public void set_AllowBlankPassword(bool value);
    public void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Data.OracleClient.OraclePermissionAttribute : CodeAccessSecurityAttribute {
    public bool AllowBlankPassword { get; public set; }
    public string ConnectionString { get; public set; }
    public KeyRestrictionBehavior KeyRestrictionBehavior { get; public set; }
    public string KeyRestrictions { get; public set; }
    public OraclePermissionAttribute(SecurityAction action);
    public bool get_AllowBlankPassword();
    public void set_AllowBlankPassword(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public KeyRestrictionBehavior get_KeyRestrictionBehavior();
    public void set_KeyRestrictionBehavior(KeyRestrictionBehavior value);
    public string get_KeyRestrictions();
    public void set_KeyRestrictions(string value);
    public virtual IPermission CreatePermission();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeConnectionString();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeKeyRestrictions();
}
public class System.Data.SqlClient.SqlClientPermission : DBDataPermission {
    public SqlClientPermission(PermissionState state);
    public SqlClientPermission(PermissionState state, bool allowBlankPassword);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.SqlClient.SqlClientPermissionAttribute : DBDataPermissionAttribute {
    public SqlClientPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public class System.Diagnostics.EventLogPermission : ResourcePermissionBase {
    public EventLogPermissionEntryCollection PermissionEntries { get; }
    public EventLogPermission(EventLogPermissionAccess permissionAccess, string machineName);
    public EventLogPermission(EventLogPermissionEntry[] permissionAccessEntries);
    public EventLogPermission(PermissionState state);
    public EventLogPermissionEntryCollection get_PermissionEntries();
}
[FlagsAttribute]
public enum System.Diagnostics.EventLogPermissionAccess : Enum {
    public int value__;
    public static EventLogPermissionAccess None;
    public static EventLogPermissionAccess Browse;
    public static EventLogPermissionAccess Instrument;
    public static EventLogPermissionAccess Audit;
    public static EventLogPermissionAccess Write;
    public static EventLogPermissionAccess Administer;
}
[AttributeUsageAttribute("621")]
public class System.Diagnostics.EventLogPermissionAttribute : CodeAccessSecurityAttribute {
    public string MachineName { get; public set; }
    public EventLogPermissionAccess PermissionAccess { get; public set; }
    public EventLogPermissionAttribute(SecurityAction action);
    public string get_MachineName();
    public void set_MachineName(string value);
    public EventLogPermissionAccess get_PermissionAccess();
    public void set_PermissionAccess(EventLogPermissionAccess value);
    public virtual IPermission CreatePermission();
}
public class System.Diagnostics.EventLogPermissionEntry : object {
    public string MachineName { get; }
    public EventLogPermissionAccess PermissionAccess { get; }
    public EventLogPermissionEntry(EventLogPermissionAccess permissionAccess, string machineName);
    public string get_MachineName();
    public EventLogPermissionAccess get_PermissionAccess();
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.EventLogPermissionEntryCollection : CollectionBase {
    public EventLogPermissionEntry Item { get; public set; }
    public EventLogPermissionEntry get_Item(int index);
    public void set_Item(int index, EventLogPermissionEntry value);
    public int Add(EventLogPermissionEntry value);
    public void AddRange(EventLogPermissionEntryCollection value);
    public void AddRange(EventLogPermissionEntry[] value);
    public bool Contains(EventLogPermissionEntry value);
    public void CopyTo(EventLogPermissionEntry[] array, int index);
    public int IndexOf(EventLogPermissionEntry value);
    public void Insert(int index, EventLogPermissionEntry value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    public void Remove(EventLogPermissionEntry value);
}
public class System.Diagnostics.PerformanceCounterPermission : ResourcePermissionBase {
    public PerformanceCounterPermissionEntryCollection PermissionEntries { get; }
    public PerformanceCounterPermission(PerformanceCounterPermissionAccess permissionAccess, string machineName, string categoryName);
    public PerformanceCounterPermission(PerformanceCounterPermissionEntry[] permissionAccessEntries);
    public PerformanceCounterPermission(PermissionState state);
    public PerformanceCounterPermissionEntryCollection get_PermissionEntries();
}
[FlagsAttribute]
public enum System.Diagnostics.PerformanceCounterPermissionAccess : Enum {
    public int value__;
    public static PerformanceCounterPermissionAccess None;
    public static PerformanceCounterPermissionAccess Browse;
    public static PerformanceCounterPermissionAccess Read;
    public static PerformanceCounterPermissionAccess Write;
    public static PerformanceCounterPermissionAccess Instrument;
    public static PerformanceCounterPermissionAccess Administer;
}
[AttributeUsageAttribute("621")]
public class System.Diagnostics.PerformanceCounterPermissionAttribute : CodeAccessSecurityAttribute {
    public string CategoryName { get; public set; }
    public string MachineName { get; public set; }
    public PerformanceCounterPermissionAccess PermissionAccess { get; public set; }
    public PerformanceCounterPermissionAttribute(SecurityAction action);
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public PerformanceCounterPermissionAccess get_PermissionAccess();
    public void set_PermissionAccess(PerformanceCounterPermissionAccess value);
    public virtual IPermission CreatePermission();
}
public class System.Diagnostics.PerformanceCounterPermissionEntry : object {
    public string CategoryName { get; }
    public string MachineName { get; }
    public PerformanceCounterPermissionAccess PermissionAccess { get; }
    public PerformanceCounterPermissionEntry(PerformanceCounterPermissionAccess permissionAccess, string machineName, string categoryName);
    public string get_CategoryName();
    public string get_MachineName();
    public PerformanceCounterPermissionAccess get_PermissionAccess();
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.PerformanceCounterPermissionEntryCollection : CollectionBase {
    public PerformanceCounterPermissionEntry Item { get; public set; }
    public PerformanceCounterPermissionEntry get_Item(int index);
    public void set_Item(int index, PerformanceCounterPermissionEntry value);
    public int Add(PerformanceCounterPermissionEntry value);
    public void AddRange(PerformanceCounterPermissionEntryCollection value);
    public void AddRange(PerformanceCounterPermissionEntry[] value);
    public bool Contains(PerformanceCounterPermissionEntry value);
    public void CopyTo(PerformanceCounterPermissionEntry[] array, int index);
    public int IndexOf(PerformanceCounterPermissionEntry value);
    public void Insert(int index, PerformanceCounterPermissionEntry value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    public void Remove(PerformanceCounterPermissionEntry value);
}
public class System.Drawing.Printing.PrintingPermission : CodeAccessPermission {
    public PrintingPermissionLevel Level { get; public set; }
    public PrintingPermission(PrintingPermissionLevel printingLevel);
    public PrintingPermission(PermissionState state);
    public PrintingPermissionLevel get_Level();
    public void set_Level(PrintingPermissionLevel value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement element);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("32767")]
public class System.Drawing.Printing.PrintingPermissionAttribute : CodeAccessSecurityAttribute {
    public PrintingPermissionLevel Level { get; public set; }
    public PrintingPermissionAttribute(SecurityAction action);
    public PrintingPermissionLevel get_Level();
    public void set_Level(PrintingPermissionLevel value);
    public virtual IPermission CreatePermission();
}
public enum System.Drawing.Printing.PrintingPermissionLevel : Enum {
    public int value__;
    public static PrintingPermissionLevel NoPrinting;
    public static PrintingPermissionLevel SafePrinting;
    public static PrintingPermissionLevel DefaultPrinting;
    public static PrintingPermissionLevel AllPrinting;
}
public class System.Net.DnsPermission : CodeAccessPermission {
    public DnsPermission(PermissionState state);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Net.DnsPermissionAttribute : CodeAccessSecurityAttribute {
    public DnsPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public class System.Net.EndpointPermission : object {
    public string Hostname { get; }
    public int Port { get; }
    public TransportType Transport { get; }
    public string get_Hostname();
    public int get_Port();
    public TransportType get_Transport();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum System.Net.Mail.SmtpAccess : Enum {
    public int value__;
    public static SmtpAccess None;
    public static SmtpAccess Connect;
    public static SmtpAccess ConnectToUnrestrictedPort;
}
public class System.Net.Mail.SmtpPermission : CodeAccessPermission {
    public SmtpAccess Access { get; }
    public SmtpPermission(bool unrestricted);
    public SmtpPermission(SmtpAccess access);
    public SmtpPermission(PermissionState state);
    public SmtpAccess get_Access();
    public void AddPermission(SmtpAccess access);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Net.Mail.SmtpPermissionAttribute : CodeAccessSecurityAttribute {
    public string Access { get; public set; }
    public SmtpPermissionAttribute(SecurityAction action);
    public string get_Access();
    public void set_Access(string value);
    public virtual IPermission CreatePermission();
}
[FlagsAttribute]
public enum System.Net.NetworkAccess : Enum {
    public int value__;
    public static NetworkAccess Connect;
    public static NetworkAccess Accept;
}
[FlagsAttribute]
public enum System.Net.NetworkInformation.NetworkInformationAccess : Enum {
    public int value__;
    public static NetworkInformationAccess None;
    public static NetworkInformationAccess Read;
    public static NetworkInformationAccess Ping;
}
public class System.Net.NetworkInformation.NetworkInformationPermission : CodeAccessPermission {
    public NetworkInformationAccess Access { get; }
    public NetworkInformationPermission(NetworkInformationAccess access);
    public NetworkInformationPermission(PermissionState state);
    public NetworkInformationAccess get_Access();
    public void AddPermission(NetworkInformationAccess access);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Net.NetworkInformation.NetworkInformationPermissionAttribute : CodeAccessSecurityAttribute {
    public string Access { get; public set; }
    public NetworkInformationPermissionAttribute(SecurityAction action);
    public string get_Access();
    public void set_Access(string value);
    public virtual IPermission CreatePermission();
}
public class System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission : CodeAccessPermission {
    public PeerCollaborationPermission(PermissionState state);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement e);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute : CodeAccessSecurityAttribute {
    public PeerCollaborationPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public class System.Net.PeerToPeer.PnrpPermission : CodeAccessPermission {
    public PnrpPermission(PermissionState state);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement e);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Net.PeerToPeer.PnrpPermissionAttribute : CodeAccessSecurityAttribute {
    public PnrpPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public enum System.Net.PeerToPeer.PnrpScope : Enum {
    public int value__;
    public static PnrpScope All;
    public static PnrpScope Global;
    public static PnrpScope SiteLocal;
    public static PnrpScope LinkLocal;
}
public class System.Net.SocketPermission : CodeAccessPermission {
    public static int AllPorts;
    public IEnumerator AcceptList { get; }
    public IEnumerator ConnectList { get; }
    public SocketPermission(NetworkAccess access, TransportType transport, string hostName, int portNumber);
    public SocketPermission(PermissionState state);
    public IEnumerator get_AcceptList();
    public IEnumerator get_ConnectList();
    public void AddPermission(NetworkAccess access, TransportType transport, string hostName, int portNumber);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Net.SocketPermissionAttribute : CodeAccessSecurityAttribute {
    public string Access { get; public set; }
    public string Host { get; public set; }
    public string Port { get; public set; }
    public string Transport { get; public set; }
    public SocketPermissionAttribute(SecurityAction action);
    public string get_Access();
    public void set_Access(string value);
    public string get_Host();
    public void set_Host(string value);
    public string get_Port();
    public void set_Port(string value);
    public string get_Transport();
    public void set_Transport(string value);
    public virtual IPermission CreatePermission();
}
public enum System.Net.TransportType : Enum {
    public int value__;
    public static TransportType Connectionless;
    public static TransportType Udp;
    public static TransportType ConnectionOriented;
    public static TransportType Tcp;
    public static TransportType All;
}
public class System.Net.WebPermission : CodeAccessPermission {
    public IEnumerator AcceptList { get; }
    public IEnumerator ConnectList { get; }
    public WebPermission(NetworkAccess access, string uriString);
    public WebPermission(NetworkAccess access, Regex uriRegex);
    public WebPermission(PermissionState state);
    public IEnumerator get_AcceptList();
    public IEnumerator get_ConnectList();
    public void AddPermission(NetworkAccess access, string uriString);
    public void AddPermission(NetworkAccess access, Regex uriRegex);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Net.WebPermissionAttribute : CodeAccessSecurityAttribute {
    public string Accept { get; public set; }
    public string AcceptPattern { get; public set; }
    public string Connect { get; public set; }
    public string ConnectPattern { get; public set; }
    public WebPermissionAttribute(SecurityAction action);
    public string get_Accept();
    public void set_Accept(string value);
    public string get_AcceptPattern();
    public void set_AcceptPattern(string value);
    public string get_Connect();
    public void set_Connect(string value);
    public string get_ConnectPattern();
    public void set_ConnectPattern(string value);
    public virtual IPermission CreatePermission();
}
public abstract class System.Security.CodeAccessPermission : object {
    public sealed virtual void Assert();
    public abstract virtual IPermission Copy();
    public sealed virtual void Demand();
    [ObsoleteAttribute]
public sealed virtual void Deny();
    public virtual bool Equals(object obj);
    public abstract virtual void FromXml(SecurityElement elem);
    public virtual int GetHashCode();
    public abstract virtual IPermission Intersect(IPermission target);
    public abstract virtual bool IsSubsetOf(IPermission target);
    public sealed virtual void PermitOnly();
    public static void RevertAll();
    public static void RevertAssert();
    [ObsoleteAttribute]
public static void RevertDeny();
    public static void RevertPermitOnly();
    public virtual string ToString();
    public abstract virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission other);
}
public class System.Security.HostProtectionException : SystemException {
    public HostProtectionResource DemandedResources { get; }
    public HostProtectionResource ProtectedResources { get; }
    protected HostProtectionException(SerializationInfo info, StreamingContext context);
    public HostProtectionException(string message);
    public HostProtectionException(string message, Exception e);
    public HostProtectionException(string message, HostProtectionResource protectedResources, HostProtectionResource demandedResources);
    public HostProtectionResource get_DemandedResources();
    public HostProtectionResource get_ProtectedResources();
    public virtual string ToString();
}
public class System.Security.HostSecurityManager : object {
    public PolicyLevel DomainPolicy { get; }
    public HostSecurityManagerOptions Flags { get; }
    public virtual PolicyLevel get_DomainPolicy();
    public virtual HostSecurityManagerOptions get_Flags();
    public virtual ApplicationTrust DetermineApplicationTrust(Evidence applicationEvidence, Evidence activatorEvidence, TrustManagerContext context);
    public virtual EvidenceBase GenerateAppDomainEvidence(Type evidenceType);
    public virtual EvidenceBase GenerateAssemblyEvidence(Type evidenceType, Assembly assembly);
    public virtual Type[] GetHostSuppliedAppDomainEvidenceTypes();
    public virtual Type[] GetHostSuppliedAssemblyEvidenceTypes(Assembly assembly);
    public virtual Evidence ProvideAppDomainEvidence(Evidence inputEvidence);
    public virtual Evidence ProvideAssemblyEvidence(Assembly loadedAssembly, Evidence inputEvidence);
    [ObsoleteAttribute]
public virtual PermissionSet ResolvePolicy(Evidence evidence);
}
[FlagsAttribute]
public enum System.Security.HostSecurityManagerOptions : Enum {
    public int value__;
    public static HostSecurityManagerOptions None;
    public static HostSecurityManagerOptions HostAppDomainEvidence;
    public static HostSecurityManagerOptions HostPolicyLevel;
    public static HostSecurityManagerOptions HostAssemblyEvidence;
    public static HostSecurityManagerOptions HostDetermineApplicationTrust;
    public static HostSecurityManagerOptions HostResolvePolicy;
    public static HostSecurityManagerOptions AllFlags;
}
public interface System.Security.IEvidenceFactory {
    public Evidence Evidence { get; }
    public abstract virtual Evidence get_Evidence();
}
public interface System.Security.ISecurityPolicyEncodable {
    public abstract virtual void FromXml(SecurityElement e, PolicyLevel level);
    public abstract virtual SecurityElement ToXml(PolicyLevel level);
}
public interface System.Security.IStackWalk {
    public abstract virtual void Assert();
    public abstract virtual void Demand();
    public abstract virtual void Deny();
    public abstract virtual void PermitOnly();
}
public class System.Security.NamedPermissionSet : PermissionSet {
    public string Description { get; public set; }
    public string Name { get; public set; }
    public NamedPermissionSet(NamedPermissionSet permSet);
    public NamedPermissionSet(string name);
    public NamedPermissionSet(string name, PermissionState state);
    public NamedPermissionSet(string name, PermissionSet permSet);
    public string get_Description();
    public void set_Description(string value);
    public string get_Name();
    public void set_Name(string value);
    public virtual PermissionSet Copy();
    public NamedPermissionSet Copy(string name);
    public virtual bool Equals(object o);
    public virtual void FromXml(SecurityElement et);
    public virtual int GetHashCode();
    public virtual SecurityElement ToXml();
}
public class System.Security.Permissions.DataProtectionPermission : CodeAccessPermission {
    public DataProtectionPermissionFlags Flags { get; public set; }
    public DataProtectionPermission(DataProtectionPermissionFlags flag);
    public DataProtectionPermission(PermissionState state);
    public DataProtectionPermissionFlags get_Flags();
    public void set_Flags(DataProtectionPermissionFlags value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.DataProtectionPermissionAttribute : CodeAccessSecurityAttribute {
    public DataProtectionPermissionFlags Flags { get; public set; }
    public bool ProtectData { get; public set; }
    public bool ProtectMemory { get; public set; }
    public bool UnprotectData { get; public set; }
    public bool UnprotectMemory { get; public set; }
    public DataProtectionPermissionAttribute(SecurityAction action);
    public DataProtectionPermissionFlags get_Flags();
    public void set_Flags(DataProtectionPermissionFlags value);
    public bool get_ProtectData();
    public void set_ProtectData(bool value);
    public bool get_ProtectMemory();
    public void set_ProtectMemory(bool value);
    public bool get_UnprotectData();
    public void set_UnprotectData(bool value);
    public bool get_UnprotectMemory();
    public void set_UnprotectMemory(bool value);
    public virtual IPermission CreatePermission();
}
[FlagsAttribute]
public enum System.Security.Permissions.DataProtectionPermissionFlags : Enum {
    public int value__;
    public static DataProtectionPermissionFlags NoFlags;
    public static DataProtectionPermissionFlags ProtectData;
    public static DataProtectionPermissionFlags UnprotectData;
    public static DataProtectionPermissionFlags ProtectMemory;
    public static DataProtectionPermissionFlags UnprotectMemory;
    public static DataProtectionPermissionFlags AllFlags;
}
public class System.Security.Permissions.EnvironmentPermission : CodeAccessPermission {
    public EnvironmentPermission(EnvironmentPermissionAccess flag, string pathList);
    public EnvironmentPermission(PermissionState state);
    public void AddPathList(EnvironmentPermissionAccess flag, string pathList);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public string GetPathList(EnvironmentPermissionAccess flag);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public void SetPathList(EnvironmentPermissionAccess flag, string pathList);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission other);
}
[FlagsAttribute]
public enum System.Security.Permissions.EnvironmentPermissionAccess : Enum {
    public int value__;
    public static EnvironmentPermissionAccess NoAccess;
    public static EnvironmentPermissionAccess Read;
    public static EnvironmentPermissionAccess Write;
    public static EnvironmentPermissionAccess AllAccess;
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.EnvironmentPermissionAttribute : CodeAccessSecurityAttribute {
    public string All { get; public set; }
    public string Read { get; public set; }
    public string Write { get; public set; }
    public EnvironmentPermissionAttribute(SecurityAction action);
    public string get_All();
    public void set_All(string value);
    public string get_Read();
    public void set_Read(string value);
    public string get_Write();
    public void set_Write(string value);
    public virtual IPermission CreatePermission();
}
public class System.Security.Permissions.FileDialogPermission : CodeAccessPermission {
    public FileDialogPermissionAccess Access { get; public set; }
    public FileDialogPermission(FileDialogPermissionAccess access);
    public FileDialogPermission(PermissionState state);
    public FileDialogPermissionAccess get_Access();
    public void set_Access(FileDialogPermissionAccess value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[FlagsAttribute]
public enum System.Security.Permissions.FileDialogPermissionAccess : Enum {
    public int value__;
    public static FileDialogPermissionAccess None;
    public static FileDialogPermissionAccess Open;
    public static FileDialogPermissionAccess Save;
    public static FileDialogPermissionAccess OpenSave;
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.FileDialogPermissionAttribute : CodeAccessSecurityAttribute {
    public bool Open { get; public set; }
    public bool Save { get; public set; }
    public FileDialogPermissionAttribute(SecurityAction action);
    public bool get_Open();
    public void set_Open(bool value);
    public bool get_Save();
    public void set_Save(bool value);
    public virtual IPermission CreatePermission();
}
public class System.Security.Permissions.FileIOPermission : CodeAccessPermission {
    public FileIOPermissionAccess AllFiles { get; public set; }
    public FileIOPermissionAccess AllLocalFiles { get; public set; }
    public FileIOPermission(FileIOPermissionAccess access, AccessControlActions actions, string path);
    public FileIOPermission(FileIOPermissionAccess access, AccessControlActions actions, String[] pathList);
    public FileIOPermission(FileIOPermissionAccess access, string path);
    public FileIOPermission(FileIOPermissionAccess access, String[] pathList);
    public FileIOPermission(PermissionState state);
    public FileIOPermissionAccess get_AllFiles();
    public void set_AllFiles(FileIOPermissionAccess value);
    public FileIOPermissionAccess get_AllLocalFiles();
    public void set_AllLocalFiles(FileIOPermissionAccess value);
    public void AddPathList(FileIOPermissionAccess access, string path);
    public void AddPathList(FileIOPermissionAccess access, String[] pathList);
    public virtual IPermission Copy();
    public virtual bool Equals(object o);
    public virtual void FromXml(SecurityElement esd);
    public virtual int GetHashCode();
    public String[] GetPathList(FileIOPermissionAccess access);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public void SetPathList(FileIOPermissionAccess access, string path);
    public void SetPathList(FileIOPermissionAccess access, String[] pathList);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission other);
}
[FlagsAttribute]
public enum System.Security.Permissions.FileIOPermissionAccess : Enum {
    public int value__;
    public static FileIOPermissionAccess NoAccess;
    public static FileIOPermissionAccess Read;
    public static FileIOPermissionAccess Write;
    public static FileIOPermissionAccess Append;
    public static FileIOPermissionAccess PathDiscovery;
    public static FileIOPermissionAccess AllAccess;
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.FileIOPermissionAttribute : CodeAccessSecurityAttribute {
    [ObsoleteAttribute]
public string All { get; public set; }
    public FileIOPermissionAccess AllFiles { get; public set; }
    public FileIOPermissionAccess AllLocalFiles { get; public set; }
    public string Append { get; public set; }
    public string ChangeAccessControl { get; public set; }
    public string PathDiscovery { get; public set; }
    public string Read { get; public set; }
    public string ViewAccessControl { get; public set; }
    public string ViewAndModify { get; public set; }
    public string Write { get; public set; }
    public FileIOPermissionAttribute(SecurityAction action);
    public string get_All();
    public void set_All(string value);
    public FileIOPermissionAccess get_AllFiles();
    public void set_AllFiles(FileIOPermissionAccess value);
    public FileIOPermissionAccess get_AllLocalFiles();
    public void set_AllLocalFiles(FileIOPermissionAccess value);
    public string get_Append();
    public void set_Append(string value);
    public string get_ChangeAccessControl();
    public void set_ChangeAccessControl(string value);
    public string get_PathDiscovery();
    public void set_PathDiscovery(string value);
    public string get_Read();
    public void set_Read(string value);
    public string get_ViewAccessControl();
    public void set_ViewAccessControl(string value);
    public string get_ViewAndModify();
    public void set_ViewAndModify(string value);
    public string get_Write();
    public void set_Write(string value);
    public virtual IPermission CreatePermission();
}
public class System.Security.Permissions.GacIdentityPermission : CodeAccessPermission {
    public GacIdentityPermission(PermissionState state);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.GacIdentityPermissionAttribute : CodeAccessSecurityAttribute {
    public GacIdentityPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
[AttributeUsageAttribute("4205")]
public class System.Security.Permissions.HostProtectionAttribute : CodeAccessSecurityAttribute {
    public bool ExternalProcessMgmt { get; public set; }
    public bool ExternalThreading { get; public set; }
    public bool MayLeakOnAbort { get; public set; }
    public HostProtectionResource Resources { get; public set; }
    public bool SecurityInfrastructure { get; public set; }
    public bool SelfAffectingProcessMgmt { get; public set; }
    public bool SelfAffectingThreading { get; public set; }
    public bool SharedState { get; public set; }
    public bool Synchronization { get; public set; }
    public bool UI { get; public set; }
    public HostProtectionAttribute(SecurityAction action);
    public bool get_ExternalProcessMgmt();
    public void set_ExternalProcessMgmt(bool value);
    public bool get_ExternalThreading();
    public void set_ExternalThreading(bool value);
    public bool get_MayLeakOnAbort();
    public void set_MayLeakOnAbort(bool value);
    public HostProtectionResource get_Resources();
    public void set_Resources(HostProtectionResource value);
    public bool get_SecurityInfrastructure();
    public void set_SecurityInfrastructure(bool value);
    public bool get_SelfAffectingProcessMgmt();
    public void set_SelfAffectingProcessMgmt(bool value);
    public bool get_SelfAffectingThreading();
    public void set_SelfAffectingThreading(bool value);
    public bool get_SharedState();
    public void set_SharedState(bool value);
    public bool get_Synchronization();
    public void set_Synchronization(bool value);
    public bool get_UI();
    public void set_UI(bool value);
    public virtual IPermission CreatePermission();
}
[FlagsAttribute]
public enum System.Security.Permissions.HostProtectionResource : Enum {
    public int value__;
    public static HostProtectionResource None;
    public static HostProtectionResource Synchronization;
    public static HostProtectionResource SharedState;
    public static HostProtectionResource ExternalProcessMgmt;
    public static HostProtectionResource SelfAffectingProcessMgmt;
    public static HostProtectionResource ExternalThreading;
    public static HostProtectionResource SelfAffectingThreading;
    public static HostProtectionResource SecurityInfrastructure;
    public static HostProtectionResource UI;
    public static HostProtectionResource MayLeakOnAbort;
    public static HostProtectionResource All;
}
public enum System.Security.Permissions.IsolatedStorageContainment : Enum {
    public int value__;
    public static IsolatedStorageContainment None;
    public static IsolatedStorageContainment DomainIsolationByUser;
    public static IsolatedStorageContainment ApplicationIsolationByUser;
    public static IsolatedStorageContainment AssemblyIsolationByUser;
    public static IsolatedStorageContainment DomainIsolationByMachine;
    public static IsolatedStorageContainment AssemblyIsolationByMachine;
    public static IsolatedStorageContainment ApplicationIsolationByMachine;
    public static IsolatedStorageContainment DomainIsolationByRoamingUser;
    public static IsolatedStorageContainment AssemblyIsolationByRoamingUser;
    public static IsolatedStorageContainment ApplicationIsolationByRoamingUser;
    public static IsolatedStorageContainment AdministerIsolatedStorageByUser;
    public static IsolatedStorageContainment UnrestrictedIsolatedStorage;
}
public class System.Security.Permissions.IsolatedStorageFilePermission : IsolatedStoragePermission {
    public IsolatedStorageFilePermission(PermissionState state);
    public virtual IPermission Copy();
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.IsolatedStorageFilePermissionAttribute : IsolatedStoragePermissionAttribute {
    public IsolatedStorageFilePermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public abstract class System.Security.Permissions.IsolatedStoragePermission : CodeAccessPermission {
    public IsolatedStorageContainment UsageAllowed { get; public set; }
    public long UserQuota { get; public set; }
    protected IsolatedStoragePermission(PermissionState state);
    public IsolatedStorageContainment get_UsageAllowed();
    public void set_UsageAllowed(IsolatedStorageContainment value);
    public long get_UserQuota();
    public void set_UserQuota(long value);
    public virtual void FromXml(SecurityElement esd);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
}
public abstract class System.Security.Permissions.IsolatedStoragePermissionAttribute : CodeAccessSecurityAttribute {
    public IsolatedStorageContainment UsageAllowed { get; public set; }
    public long UserQuota { get; public set; }
    protected IsolatedStoragePermissionAttribute(SecurityAction action);
    public IsolatedStorageContainment get_UsageAllowed();
    public void set_UsageAllowed(IsolatedStorageContainment value);
    public long get_UserQuota();
    public void set_UserQuota(long value);
}
public interface System.Security.Permissions.IUnrestrictedPermission {
    public abstract virtual bool IsUnrestricted();
}
public class System.Security.Permissions.KeyContainerPermission : CodeAccessPermission {
    public KeyContainerPermissionAccessEntryCollection AccessEntries { get; }
    public KeyContainerPermissionFlags Flags { get; }
    public KeyContainerPermission(KeyContainerPermissionFlags flags);
    public KeyContainerPermission(KeyContainerPermissionFlags flags, KeyContainerPermissionAccessEntry[] accessList);
    public KeyContainerPermission(PermissionState state);
    public KeyContainerPermissionAccessEntryCollection get_AccessEntries();
    public KeyContainerPermissionFlags get_Flags();
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
public class System.Security.Permissions.KeyContainerPermissionAccessEntry : object {
    public KeyContainerPermissionFlags Flags { get; public set; }
    public string KeyContainerName { get; public set; }
    public int KeySpec { get; public set; }
    public string KeyStore { get; public set; }
    public string ProviderName { get; public set; }
    public int ProviderType { get; public set; }
    public KeyContainerPermissionAccessEntry(CspParameters parameters, KeyContainerPermissionFlags flags);
    public KeyContainerPermissionAccessEntry(string keyContainerName, KeyContainerPermissionFlags flags);
    public KeyContainerPermissionAccessEntry(string keyStore, string providerName, int providerType, string keyContainerName, int keySpec, KeyContainerPermissionFlags flags);
    public KeyContainerPermissionFlags get_Flags();
    public void set_Flags(KeyContainerPermissionFlags value);
    public string get_KeyContainerName();
    public void set_KeyContainerName(string value);
    public int get_KeySpec();
    public void set_KeySpec(int value);
    public string get_KeyStore();
    public void set_KeyStore(string value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public int get_ProviderType();
    public void set_ProviderType(int value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Permissions.KeyContainerPermissionAccessEntryCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public KeyContainerPermissionAccessEntry Item { get; }
    public object SyncRoot { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public KeyContainerPermissionAccessEntry get_Item(int index);
    public sealed virtual object get_SyncRoot();
    public int Add(KeyContainerPermissionAccessEntry accessEntry);
    public void Clear();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(KeyContainerPermissionAccessEntry[] array, int index);
    public KeyContainerPermissionAccessEntryEnumerator GetEnumerator();
    public int IndexOf(KeyContainerPermissionAccessEntry accessEntry);
    public void Remove(KeyContainerPermissionAccessEntry accessEntry);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator : object {
    public KeyContainerPermissionAccessEntry Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public KeyContainerPermissionAccessEntry get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.KeyContainerPermissionAttribute : CodeAccessSecurityAttribute {
    public KeyContainerPermissionFlags Flags { get; public set; }
    public string KeyContainerName { get; public set; }
    public int KeySpec { get; public set; }
    public string KeyStore { get; public set; }
    public string ProviderName { get; public set; }
    public int ProviderType { get; public set; }
    public KeyContainerPermissionAttribute(SecurityAction action);
    public KeyContainerPermissionFlags get_Flags();
    public void set_Flags(KeyContainerPermissionFlags value);
    public string get_KeyContainerName();
    public void set_KeyContainerName(string value);
    public int get_KeySpec();
    public void set_KeySpec(int value);
    public string get_KeyStore();
    public void set_KeyStore(string value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
    public int get_ProviderType();
    public void set_ProviderType(int value);
    public virtual IPermission CreatePermission();
}
public enum System.Security.Permissions.KeyContainerPermissionFlags : Enum {
    public int value__;
    public static KeyContainerPermissionFlags NoFlags;
    public static KeyContainerPermissionFlags Create;
    public static KeyContainerPermissionFlags Open;
    public static KeyContainerPermissionFlags Delete;
    public static KeyContainerPermissionFlags Import;
    public static KeyContainerPermissionFlags Export;
    public static KeyContainerPermissionFlags Sign;
    public static KeyContainerPermissionFlags Decrypt;
    public static KeyContainerPermissionFlags ViewAcl;
    public static KeyContainerPermissionFlags ChangeAcl;
    public static KeyContainerPermissionFlags AllFlags;
}
public class System.Security.Permissions.MediaPermission : CodeAccessPermission {
    public MediaPermissionAudio Audio { get; }
    public MediaPermissionImage Image { get; }
    public MediaPermissionVideo Video { get; }
    public MediaPermission(MediaPermissionAudio permissionAudio);
    public MediaPermission(MediaPermissionAudio permissionAudio, MediaPermissionVideo permissionVideo, MediaPermissionImage permissionImage);
    public MediaPermission(MediaPermissionImage permissionImage);
    public MediaPermission(MediaPermissionVideo permissionVideo);
    public MediaPermission(PermissionState state);
    public MediaPermissionAudio get_Audio();
    public MediaPermissionImage get_Image();
    public MediaPermissionVideo get_Video();
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.MediaPermissionAttribute : CodeAccessSecurityAttribute {
    public MediaPermissionAudio Audio { get; public set; }
    public MediaPermissionImage Image { get; public set; }
    public MediaPermissionVideo Video { get; public set; }
    public MediaPermissionAttribute(SecurityAction action);
    public MediaPermissionAudio get_Audio();
    public void set_Audio(MediaPermissionAudio value);
    public MediaPermissionImage get_Image();
    public void set_Image(MediaPermissionImage value);
    public MediaPermissionVideo get_Video();
    public void set_Video(MediaPermissionVideo value);
    public virtual IPermission CreatePermission();
}
public enum System.Security.Permissions.MediaPermissionAudio : Enum {
    public int value__;
    public static MediaPermissionAudio NoAudio;
    public static MediaPermissionAudio SiteOfOriginAudio;
    public static MediaPermissionAudio SafeAudio;
    public static MediaPermissionAudio AllAudio;
}
public enum System.Security.Permissions.MediaPermissionImage : Enum {
    public int value__;
    public static MediaPermissionImage NoImage;
    public static MediaPermissionImage SiteOfOriginImage;
    public static MediaPermissionImage SafeImage;
    public static MediaPermissionImage AllImage;
}
public enum System.Security.Permissions.MediaPermissionVideo : Enum {
    public int value__;
    public static MediaPermissionVideo NoVideo;
    public static MediaPermissionVideo SiteOfOriginVideo;
    public static MediaPermissionVideo SafeVideo;
    public static MediaPermissionVideo AllVideo;
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.PermissionSetAttribute : CodeAccessSecurityAttribute {
    public string File { get; public set; }
    public string Hex { get; public set; }
    public string Name { get; public set; }
    public bool UnicodeEncoded { get; public set; }
    public string XML { get; public set; }
    public PermissionSetAttribute(SecurityAction action);
    public string get_File();
    public void set_File(string value);
    public string get_Hex();
    public void set_Hex(string value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_UnicodeEncoded();
    public void set_UnicodeEncoded(bool value);
    public string get_XML();
    public void set_XML(string value);
    public virtual IPermission CreatePermission();
    public PermissionSet CreatePermissionSet();
}
public enum System.Security.Permissions.PermissionState : Enum {
    public int value__;
    public static PermissionState None;
    public static PermissionState Unrestricted;
}
public class System.Security.Permissions.PrincipalPermission : object {
    public PrincipalPermission(PermissionState state);
    public PrincipalPermission(string name, string role);
    public PrincipalPermission(string name, string role, bool isAuthenticated);
    public sealed virtual IPermission Copy();
    public sealed virtual void Demand();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement elem);
    public virtual int GetHashCode();
    public sealed virtual IPermission Intersect(IPermission target);
    public sealed virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual IPermission Union(IPermission other);
}
[AttributeUsageAttribute("68")]
public class System.Security.Permissions.PrincipalPermissionAttribute : CodeAccessSecurityAttribute {
    public bool Authenticated { get; public set; }
    public string Name { get; public set; }
    public string Role { get; public set; }
    public PrincipalPermissionAttribute(SecurityAction action);
    public bool get_Authenticated();
    public void set_Authenticated(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Role();
    public void set_Role(string value);
    public virtual IPermission CreatePermission();
}
public class System.Security.Permissions.PublisherIdentityPermission : CodeAccessPermission {
    public X509Certificate Certificate { get; public set; }
    public PublisherIdentityPermission(X509Certificate certificate);
    public PublisherIdentityPermission(PermissionState state);
    public X509Certificate get_Certificate();
    public void set_Certificate(X509Certificate value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.PublisherIdentityPermissionAttribute : CodeAccessSecurityAttribute {
    public string CertFile { get; public set; }
    public string SignedFile { get; public set; }
    public string X509Certificate { get; public set; }
    public PublisherIdentityPermissionAttribute(SecurityAction action);
    public string get_CertFile();
    public void set_CertFile(string value);
    public string get_SignedFile();
    public void set_SignedFile(string value);
    public string get_X509Certificate();
    public void set_X509Certificate(string value);
    public virtual IPermission CreatePermission();
}
public class System.Security.Permissions.ReflectionPermission : CodeAccessPermission {
    public ReflectionPermissionFlag Flags { get; public set; }
    public ReflectionPermission(PermissionState state);
    public ReflectionPermission(ReflectionPermissionFlag flag);
    public ReflectionPermissionFlag get_Flags();
    public void set_Flags(ReflectionPermissionFlag value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission other);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.ReflectionPermissionAttribute : CodeAccessSecurityAttribute {
    public ReflectionPermissionFlag Flags { get; public set; }
    public bool MemberAccess { get; public set; }
    [ObsoleteAttribute]
public bool ReflectionEmit { get; public set; }
    public bool RestrictedMemberAccess { get; public set; }
    [ObsoleteAttribute]
public bool TypeInformation { get; public set; }
    public ReflectionPermissionAttribute(SecurityAction action);
    public ReflectionPermissionFlag get_Flags();
    public void set_Flags(ReflectionPermissionFlag value);
    public bool get_MemberAccess();
    public void set_MemberAccess(bool value);
    public bool get_ReflectionEmit();
    public void set_ReflectionEmit(bool value);
    public bool get_RestrictedMemberAccess();
    public void set_RestrictedMemberAccess(bool value);
    public bool get_TypeInformation();
    public void set_TypeInformation(bool value);
    public virtual IPermission CreatePermission();
}
[FlagsAttribute]
public enum System.Security.Permissions.ReflectionPermissionFlag : Enum {
    public int value__;
    public static ReflectionPermissionFlag NoFlags;
    [ObsoleteAttribute]
public static ReflectionPermissionFlag TypeInformation;
    public static ReflectionPermissionFlag MemberAccess;
    [ObsoleteAttribute]
public static ReflectionPermissionFlag ReflectionEmit;
    [ObsoleteAttribute]
public static ReflectionPermissionFlag AllFlags;
    public static ReflectionPermissionFlag RestrictedMemberAccess;
}
public class System.Security.Permissions.RegistryPermission : CodeAccessPermission {
    public RegistryPermission(PermissionState state);
    public RegistryPermission(RegistryPermissionAccess access, AccessControlActions control, string pathList);
    public RegistryPermission(RegistryPermissionAccess access, string pathList);
    public void AddPathList(RegistryPermissionAccess access, AccessControlActions actions, string pathList);
    public void AddPathList(RegistryPermissionAccess access, string pathList);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement elem);
    public string GetPathList(RegistryPermissionAccess access);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public void SetPathList(RegistryPermissionAccess access, string pathList);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission other);
}
[FlagsAttribute]
public enum System.Security.Permissions.RegistryPermissionAccess : Enum {
    public int value__;
    public static RegistryPermissionAccess NoAccess;
    public static RegistryPermissionAccess Read;
    public static RegistryPermissionAccess Write;
    public static RegistryPermissionAccess Create;
    public static RegistryPermissionAccess AllAccess;
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.RegistryPermissionAttribute : CodeAccessSecurityAttribute {
    [ObsoleteAttribute]
public string All { get; public set; }
    public string ChangeAccessControl { get; public set; }
    public string Create { get; public set; }
    public string Read { get; public set; }
    public string ViewAccessControl { get; public set; }
    public string ViewAndModify { get; public set; }
    public string Write { get; public set; }
    public RegistryPermissionAttribute(SecurityAction action);
    public string get_All();
    public void set_All(string value);
    public string get_ChangeAccessControl();
    public void set_ChangeAccessControl(string value);
    public string get_Create();
    public void set_Create(string value);
    public string get_Read();
    public void set_Read(string value);
    public string get_ViewAccessControl();
    public void set_ViewAccessControl(string value);
    public string get_ViewAndModify();
    public void set_ViewAndModify(string value);
    public string get_Write();
    public void set_Write(string value);
    public virtual IPermission CreatePermission();
}
public abstract class System.Security.Permissions.ResourcePermissionBase : CodeAccessPermission {
    public static string Any;
    public static string Local;
    protected Type PermissionAccessType { get; protected set; }
    protected String[] TagNames { get; protected set; }
    protected ResourcePermissionBase(PermissionState state);
    protected Type get_PermissionAccessType();
    protected void set_PermissionAccessType(Type value);
    protected String[] get_TagNames();
    protected void set_TagNames(String[] value);
    protected void AddPermissionAccess(ResourcePermissionBaseEntry entry);
    protected void Clear();
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    protected ResourcePermissionBaseEntry[] GetPermissionEntries();
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    protected void RemovePermissionAccess(ResourcePermissionBaseEntry entry);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
public class System.Security.Permissions.ResourcePermissionBaseEntry : object {
    public int PermissionAccess { get; }
    public String[] PermissionAccessPath { get; }
    public ResourcePermissionBaseEntry(int permissionAccess, String[] permissionAccessPath);
    public int get_PermissionAccess();
    public String[] get_PermissionAccessPath();
}
public class System.Security.Permissions.SecurityPermission : CodeAccessPermission {
    public SecurityPermissionFlag Flags { get; public set; }
    public SecurityPermission(PermissionState state);
    public SecurityPermission(SecurityPermissionFlag flag);
    public SecurityPermissionFlag get_Flags();
    public void set_Flags(SecurityPermissionFlag value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
public class System.Security.Permissions.SiteIdentityPermission : CodeAccessPermission {
    public string Site { get; public set; }
    public SiteIdentityPermission(PermissionState state);
    public SiteIdentityPermission(string site);
    public string get_Site();
    public void set_Site(string value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.SiteIdentityPermissionAttribute : CodeAccessSecurityAttribute {
    public string Site { get; public set; }
    public SiteIdentityPermissionAttribute(SecurityAction action);
    public string get_Site();
    public void set_Site(string value);
    public virtual IPermission CreatePermission();
}
public class System.Security.Permissions.StorePermission : CodeAccessPermission {
    public StorePermissionFlags Flags { get; public set; }
    public StorePermission(PermissionState state);
    public StorePermission(StorePermissionFlags flag);
    public StorePermissionFlags get_Flags();
    public void set_Flags(StorePermissionFlags value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.StorePermissionAttribute : CodeAccessSecurityAttribute {
    public bool AddToStore { get; public set; }
    public bool CreateStore { get; public set; }
    public bool DeleteStore { get; public set; }
    public bool EnumerateCertificates { get; public set; }
    public bool EnumerateStores { get; public set; }
    public StorePermissionFlags Flags { get; public set; }
    public bool OpenStore { get; public set; }
    public bool RemoveFromStore { get; public set; }
    public StorePermissionAttribute(SecurityAction action);
    public bool get_AddToStore();
    public void set_AddToStore(bool value);
    public bool get_CreateStore();
    public void set_CreateStore(bool value);
    public bool get_DeleteStore();
    public void set_DeleteStore(bool value);
    public bool get_EnumerateCertificates();
    public void set_EnumerateCertificates(bool value);
    public bool get_EnumerateStores();
    public void set_EnumerateStores(bool value);
    public StorePermissionFlags get_Flags();
    public void set_Flags(StorePermissionFlags value);
    public bool get_OpenStore();
    public void set_OpenStore(bool value);
    public bool get_RemoveFromStore();
    public void set_RemoveFromStore(bool value);
    public virtual IPermission CreatePermission();
}
[FlagsAttribute]
public enum System.Security.Permissions.StorePermissionFlags : Enum {
    public int value__;
    public static StorePermissionFlags NoFlags;
    public static StorePermissionFlags CreateStore;
    public static StorePermissionFlags DeleteStore;
    public static StorePermissionFlags EnumerateStores;
    public static StorePermissionFlags OpenStore;
    public static StorePermissionFlags AddToStore;
    public static StorePermissionFlags RemoveFromStore;
    public static StorePermissionFlags EnumerateCertificates;
    public static StorePermissionFlags AllFlags;
}
public class System.Security.Permissions.StrongNameIdentityPermission : CodeAccessPermission {
    public string Name { get; public set; }
    public StrongNamePublicKeyBlob PublicKey { get; public set; }
    public Version Version { get; public set; }
    public StrongNameIdentityPermission(PermissionState state);
    public StrongNameIdentityPermission(StrongNamePublicKeyBlob blob, string name, Version version);
    public string get_Name();
    public void set_Name(string value);
    public StrongNamePublicKeyBlob get_PublicKey();
    public void set_PublicKey(StrongNamePublicKeyBlob value);
    public Version get_Version();
    public void set_Version(Version value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement e);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.StrongNameIdentityPermissionAttribute : CodeAccessSecurityAttribute {
    public string Name { get; public set; }
    public string PublicKey { get; public set; }
    public string Version { get; public set; }
    public StrongNameIdentityPermissionAttribute(SecurityAction action);
    public string get_Name();
    public void set_Name(string value);
    public string get_PublicKey();
    public void set_PublicKey(string value);
    public string get_Version();
    public void set_Version(string value);
    public virtual IPermission CreatePermission();
}
public class System.Security.Permissions.StrongNamePublicKeyBlob : object {
    public StrongNamePublicKeyBlob(Byte[] publicKey);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Security.Permissions.TypeDescriptorPermission : CodeAccessPermission {
    public TypeDescriptorPermissionFlags Flags { get; public set; }
    public TypeDescriptorPermission(PermissionState state);
    public TypeDescriptorPermission(TypeDescriptorPermissionFlags flag);
    public TypeDescriptorPermissionFlags get_Flags();
    public void set_Flags(TypeDescriptorPermissionFlags value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.TypeDescriptorPermissionAttribute : CodeAccessSecurityAttribute {
    public TypeDescriptorPermissionFlags Flags { get; public set; }
    public bool RestrictedRegistrationAccess { get; public set; }
    public TypeDescriptorPermissionAttribute(SecurityAction action);
    public TypeDescriptorPermissionFlags get_Flags();
    public void set_Flags(TypeDescriptorPermissionFlags value);
    public bool get_RestrictedRegistrationAccess();
    public void set_RestrictedRegistrationAccess(bool value);
    public virtual IPermission CreatePermission();
}
[FlagsAttribute]
public enum System.Security.Permissions.TypeDescriptorPermissionFlags : Enum {
    public int value__;
    public static TypeDescriptorPermissionFlags NoFlags;
    public static TypeDescriptorPermissionFlags RestrictedRegistrationAccess;
}
public class System.Security.Permissions.UIPermission : CodeAccessPermission {
    public UIPermissionClipboard Clipboard { get; public set; }
    public UIPermissionWindow Window { get; public set; }
    public UIPermission(PermissionState state);
    public UIPermission(UIPermissionClipboard clipboardFlag);
    public UIPermission(UIPermissionWindow windowFlag);
    public UIPermission(UIPermissionWindow windowFlag, UIPermissionClipboard clipboardFlag);
    public UIPermissionClipboard get_Clipboard();
    public void set_Clipboard(UIPermissionClipboard value);
    public UIPermissionWindow get_Window();
    public void set_Window(UIPermissionWindow value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.UIPermissionAttribute : CodeAccessSecurityAttribute {
    public UIPermissionClipboard Clipboard { get; public set; }
    public UIPermissionWindow Window { get; public set; }
    public UIPermissionAttribute(SecurityAction action);
    public UIPermissionClipboard get_Clipboard();
    public void set_Clipboard(UIPermissionClipboard value);
    public UIPermissionWindow get_Window();
    public void set_Window(UIPermissionWindow value);
    public virtual IPermission CreatePermission();
}
public enum System.Security.Permissions.UIPermissionClipboard : Enum {
    public int value__;
    public static UIPermissionClipboard NoClipboard;
    public static UIPermissionClipboard OwnClipboard;
    public static UIPermissionClipboard AllClipboard;
}
public enum System.Security.Permissions.UIPermissionWindow : Enum {
    public int value__;
    public static UIPermissionWindow NoWindows;
    public static UIPermissionWindow SafeSubWindows;
    public static UIPermissionWindow SafeTopLevelWindows;
    public static UIPermissionWindow AllWindows;
}
public class System.Security.Permissions.UrlIdentityPermission : CodeAccessPermission {
    public string Url { get; public set; }
    public UrlIdentityPermission(PermissionState state);
    public UrlIdentityPermission(string site);
    public string get_Url();
    public void set_Url(string value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.UrlIdentityPermissionAttribute : CodeAccessSecurityAttribute {
    public string Url { get; public set; }
    public UrlIdentityPermissionAttribute(SecurityAction action);
    public string get_Url();
    public void set_Url(string value);
    public virtual IPermission CreatePermission();
}
public class System.Security.Permissions.WebBrowserPermission : CodeAccessPermission {
    public WebBrowserPermissionLevel Level { get; public set; }
    public WebBrowserPermission(PermissionState state);
    public WebBrowserPermission(WebBrowserPermissionLevel webBrowserPermissionLevel);
    public WebBrowserPermissionLevel get_Level();
    public void set_Level(WebBrowserPermissionLevel value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.WebBrowserPermissionAttribute : CodeAccessSecurityAttribute {
    public WebBrowserPermissionLevel Level { get; public set; }
    public WebBrowserPermissionAttribute(SecurityAction action);
    public WebBrowserPermissionLevel get_Level();
    public void set_Level(WebBrowserPermissionLevel value);
    public virtual IPermission CreatePermission();
}
public enum System.Security.Permissions.WebBrowserPermissionLevel : Enum {
    public int value__;
    public static WebBrowserPermissionLevel None;
    public static WebBrowserPermissionLevel Safe;
    public static WebBrowserPermissionLevel Unrestricted;
}
public class System.Security.Permissions.ZoneIdentityPermission : CodeAccessPermission {
    public SecurityZone SecurityZone { get; public set; }
    public ZoneIdentityPermission(PermissionState state);
    public ZoneIdentityPermission(SecurityZone zone);
    public SecurityZone get_SecurityZone();
    public void set_SecurityZone(SecurityZone value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement esd);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.ZoneIdentityPermissionAttribute : CodeAccessSecurityAttribute {
    public SecurityZone Zone { get; public set; }
    public ZoneIdentityPermissionAttribute(SecurityAction action);
    public SecurityZone get_Zone();
    public void set_Zone(SecurityZone value);
    public virtual IPermission CreatePermission();
}
public class System.Security.PermissionSet : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public PermissionSet(PermissionState state);
    public PermissionSet(PermissionSet permSet);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public IPermission AddPermission(IPermission perm);
    protected virtual IPermission AddPermissionImpl(IPermission perm);
    public sealed virtual void Assert();
    public bool ContainsNonCodeAccessPermissions();
    [ObsoleteAttribute]
public static Byte[] ConvertPermissionSet(string inFormat, Byte[] inData, string outFormat);
    public virtual PermissionSet Copy();
    public virtual void CopyTo(Array array, int index);
    public sealed virtual void Demand();
    [ObsoleteAttribute]
public sealed virtual void Deny();
    public virtual bool Equals(object o);
    public virtual void FromXml(SecurityElement et);
    public sealed virtual IEnumerator GetEnumerator();
    protected virtual IEnumerator GetEnumeratorImpl();
    public virtual int GetHashCode();
    public IPermission GetPermission(Type permClass);
    protected virtual IPermission GetPermissionImpl(Type permClass);
    public PermissionSet Intersect(PermissionSet other);
    public bool IsEmpty();
    public bool IsSubsetOf(PermissionSet target);
    public bool IsUnrestricted();
    public sealed virtual void PermitOnly();
    public IPermission RemovePermission(Type permClass);
    protected virtual IPermission RemovePermissionImpl(Type permClass);
    public static void RevertAssert();
    public IPermission SetPermission(IPermission perm);
    protected virtual IPermission SetPermissionImpl(IPermission perm);
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
    public virtual string ToString();
    public virtual SecurityElement ToXml();
    public PermissionSet Union(PermissionSet other);
}
public class System.Security.Policy.AllMembershipCondition : object {
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public class System.Security.Policy.ApplicationDirectory : EvidenceBase {
    public string Directory { get; }
    public ApplicationDirectory(string name);
    public string get_Directory();
    public object Copy();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Security.Policy.ApplicationDirectoryMembershipCondition : object {
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public class System.Security.Policy.ApplicationTrust : EvidenceBase {
    public ApplicationIdentity ApplicationIdentity { get; public set; }
    public PolicyStatement DefaultGrantSet { get; public set; }
    public object ExtraInfo { get; public set; }
    public IList`1<StrongName> FullTrustAssemblies { get; }
    public bool IsApplicationTrustedToRun { get; public set; }
    public bool Persist { get; public set; }
    public ApplicationTrust(ApplicationIdentity identity);
    public ApplicationTrust(PermissionSet defaultGrantSet, IEnumerable`1<StrongName> fullTrustAssemblies);
    public ApplicationIdentity get_ApplicationIdentity();
    public void set_ApplicationIdentity(ApplicationIdentity value);
    public PolicyStatement get_DefaultGrantSet();
    public void set_DefaultGrantSet(PolicyStatement value);
    public object get_ExtraInfo();
    public void set_ExtraInfo(object value);
    public IList`1<StrongName> get_FullTrustAssemblies();
    public bool get_IsApplicationTrustedToRun();
    public void set_IsApplicationTrustedToRun(bool value);
    public bool get_Persist();
    public void set_Persist(bool value);
    public sealed virtual void FromXml(SecurityElement element);
    public sealed virtual SecurityElement ToXml();
}
[DefaultMemberAttribute("Item")]
public class System.Security.Policy.ApplicationTrustCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public ApplicationTrust Item { get; }
    public ApplicationTrust Item { get; }
    public object SyncRoot { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public ApplicationTrust get_Item(int index);
    public ApplicationTrust get_Item(string appFullName);
    public sealed virtual object get_SyncRoot();
    public int Add(ApplicationTrust trust);
    public void AddRange(ApplicationTrustCollection trusts);
    public void AddRange(ApplicationTrust[] trusts);
    public void Clear();
    public void CopyTo(ApplicationTrust[] array, int index);
    public ApplicationTrustCollection Find(ApplicationIdentity applicationIdentity, ApplicationVersionMatch versionMatch);
    public ApplicationTrustEnumerator GetEnumerator();
    public void Remove(ApplicationIdentity applicationIdentity, ApplicationVersionMatch versionMatch);
    public void Remove(ApplicationTrust trust);
    public void RemoveRange(ApplicationTrustCollection trusts);
    public void RemoveRange(ApplicationTrust[] trusts);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Security.Policy.ApplicationTrustEnumerator : object {
    public ApplicationTrust Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ApplicationTrust get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Security.Policy.ApplicationVersionMatch : Enum {
    public int value__;
    public static ApplicationVersionMatch MatchExactVersion;
    public static ApplicationVersionMatch MatchAllVersions;
}
public class System.Security.Policy.CodeConnectAccess : object {
    public static string AnyScheme;
    public static int DefaultPort;
    public static int OriginPort;
    public static string OriginScheme;
    public int Port { get; }
    public string Scheme { get; }
    public CodeConnectAccess(string allowScheme, int allowPort);
    public int get_Port();
    public string get_Scheme();
    public static CodeConnectAccess CreateAnySchemeAccess(int allowPort);
    public static CodeConnectAccess CreateOriginSchemeAccess(int allowPort);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
public abstract class System.Security.Policy.CodeGroup : object {
    public string AttributeString { get; }
    public IList Children { get; public set; }
    public string Description { get; public set; }
    public IMembershipCondition MembershipCondition { get; public set; }
    public string MergeLogic { get; }
    public string Name { get; public set; }
    public string PermissionSetName { get; }
    public PolicyStatement PolicyStatement { get; public set; }
    protected CodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy);
    public virtual string get_AttributeString();
    public IList get_Children();
    public void set_Children(IList value);
    public string get_Description();
    public void set_Description(string value);
    public IMembershipCondition get_MembershipCondition();
    public void set_MembershipCondition(IMembershipCondition value);
    public abstract virtual string get_MergeLogic();
    public string get_Name();
    public void set_Name(string value);
    public virtual string get_PermissionSetName();
    public PolicyStatement get_PolicyStatement();
    public void set_PolicyStatement(PolicyStatement value);
    public void AddChild(CodeGroup group);
    public abstract virtual CodeGroup Copy();
    protected virtual void CreateXml(SecurityElement element, PolicyLevel level);
    public virtual bool Equals(object o);
    public bool Equals(CodeGroup cg, bool compareChildren);
    public void FromXml(SecurityElement e);
    public void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    protected virtual void ParseXml(SecurityElement e, PolicyLevel level);
    public void RemoveChild(CodeGroup group);
    public abstract virtual PolicyStatement Resolve(Evidence evidence);
    public abstract virtual CodeGroup ResolveMatchingCodeGroups(Evidence evidence);
    public SecurityElement ToXml();
    public SecurityElement ToXml(PolicyLevel level);
}
public class System.Security.Policy.Evidence : object {
    [ObsoleteAttribute]
public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public bool Locked { get; public set; }
    public object SyncRoot { get; }
    [ObsoleteAttribute]
public Evidence(Object[] hostEvidence, Object[] assemblyEvidence);
    public Evidence(Evidence evidence);
    public Evidence(EvidenceBase[] hostEvidence, EvidenceBase[] assemblyEvidence);
    public sealed virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public bool get_Locked();
    public void set_Locked(bool value);
    public sealed virtual object get_SyncRoot();
    [ObsoleteAttribute]
public void AddAssembly(object id);
    public void AddAssemblyEvidence(T evidence);
    [ObsoleteAttribute]
public void AddHost(object id);
    public void AddHostEvidence(T evidence);
    public void Clear();
    public Evidence Clone();
    [ObsoleteAttribute]
public sealed virtual void CopyTo(Array array, int index);
    public IEnumerator GetAssemblyEnumerator();
    public T GetAssemblyEvidence();
    [ObsoleteAttribute]
public sealed virtual IEnumerator GetEnumerator();
    public IEnumerator GetHostEnumerator();
    public T GetHostEvidence();
    public void Merge(Evidence evidence);
    public void RemoveType(Type t);
}
public abstract class System.Security.Policy.EvidenceBase : object {
    public virtual EvidenceBase Clone();
}
public class System.Security.Policy.FileCodeGroup : CodeGroup {
    public string AttributeString { get; }
    public string MergeLogic { get; }
    public string PermissionSetName { get; }
    public FileCodeGroup(IMembershipCondition membershipCondition, FileIOPermissionAccess access);
    public virtual string get_AttributeString();
    public virtual string get_MergeLogic();
    public virtual string get_PermissionSetName();
    public virtual CodeGroup Copy();
    protected virtual void CreateXml(SecurityElement element, PolicyLevel level);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    protected virtual void ParseXml(SecurityElement e, PolicyLevel level);
    public virtual PolicyStatement Resolve(Evidence evidence);
    public virtual CodeGroup ResolveMatchingCodeGroups(Evidence evidence);
}
[ObsoleteAttribute("This type is obsolete. See https://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]
public class System.Security.Policy.FirstMatchCodeGroup : CodeGroup {
    public string MergeLogic { get; }
    public FirstMatchCodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy);
    public virtual string get_MergeLogic();
    public virtual CodeGroup Copy();
    public virtual PolicyStatement Resolve(Evidence evidence);
    public virtual CodeGroup ResolveMatchingCodeGroups(Evidence evidence);
}
public class System.Security.Policy.GacInstalled : EvidenceBase {
    public object Copy();
    public sealed virtual IPermission CreateIdentityPermission(Evidence evidence);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Security.Policy.GacMembershipCondition : object {
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public class System.Security.Policy.Hash : EvidenceBase {
    public Byte[] MD5 { get; }
    public Byte[] SHA1 { get; }
    public Byte[] SHA256 { get; }
    public Hash(Assembly assembly);
    public Byte[] get_MD5();
    public Byte[] get_SHA1();
    public Byte[] get_SHA256();
    public static Hash CreateMD5(Byte[] md5);
    public static Hash CreateSHA1(Byte[] sha1);
    public static Hash CreateSHA256(Byte[] sha256);
    public Byte[] GenerateHash(HashAlgorithm hashAlg);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
public class System.Security.Policy.HashMembershipCondition : object {
    public HashAlgorithm HashAlgorithm { get; public set; }
    public Byte[] HashValue { get; public set; }
    public HashMembershipCondition(HashAlgorithm hashAlg, Byte[] value);
    public HashAlgorithm get_HashAlgorithm();
    public void set_HashAlgorithm(HashAlgorithm value);
    public Byte[] get_HashValue();
    public void set_HashValue(Byte[] value);
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public interface System.Security.Policy.IIdentityPermissionFactory {
    public abstract virtual IPermission CreateIdentityPermission(Evidence evidence);
}
public interface System.Security.Policy.IMembershipCondition {
    public abstract virtual bool Check(Evidence evidence);
    public abstract virtual IMembershipCondition Copy();
    public abstract virtual bool Equals(object obj);
    public abstract virtual string ToString();
}
public class System.Security.Policy.NetCodeGroup : CodeGroup {
    public static string AbsentOriginScheme;
    public static string AnyOtherOriginScheme;
    public string AttributeString { get; }
    public string MergeLogic { get; }
    public string PermissionSetName { get; }
    public NetCodeGroup(IMembershipCondition membershipCondition);
    public virtual string get_AttributeString();
    public virtual string get_MergeLogic();
    public virtual string get_PermissionSetName();
    public void AddConnectAccess(string originScheme, CodeConnectAccess connectAccess);
    public virtual CodeGroup Copy();
    protected virtual void CreateXml(SecurityElement element, PolicyLevel level);
    public virtual bool Equals(object o);
    public DictionaryEntry[] GetConnectAccessRules();
    public virtual int GetHashCode();
    protected virtual void ParseXml(SecurityElement e, PolicyLevel level);
    public void ResetConnectAccess();
    public virtual PolicyStatement Resolve(Evidence evidence);
    public virtual CodeGroup ResolveMatchingCodeGroups(Evidence evidence);
}
[ObsoleteAttribute("This type is obsolete. See https://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]
public class System.Security.Policy.PermissionRequestEvidence : EvidenceBase {
    public PermissionSet DeniedPermissions { get; }
    public PermissionSet OptionalPermissions { get; }
    public PermissionSet RequestedPermissions { get; }
    public PermissionRequestEvidence(PermissionSet request, PermissionSet optional, PermissionSet denied);
    public PermissionSet get_DeniedPermissions();
    public PermissionSet get_OptionalPermissions();
    public PermissionSet get_RequestedPermissions();
    public PermissionRequestEvidence Copy();
    public virtual string ToString();
}
public class System.Security.Policy.PolicyException : SystemException {
    protected PolicyException(SerializationInfo info, StreamingContext context);
    public PolicyException(string message);
    public PolicyException(string message, Exception exception);
}
public class System.Security.Policy.PolicyLevel : object {
    [ObsoleteAttribute]
public IList FullTrustAssemblies { get; }
    public string Label { get; }
    public IList NamedPermissionSets { get; }
    public CodeGroup RootCodeGroup { get; public set; }
    public string StoreLocation { get; }
    public PolicyLevelType Type { get; }
    public IList get_FullTrustAssemblies();
    public string get_Label();
    public IList get_NamedPermissionSets();
    public CodeGroup get_RootCodeGroup();
    public void set_RootCodeGroup(CodeGroup value);
    public string get_StoreLocation();
    public PolicyLevelType get_Type();
    [ObsoleteAttribute]
public void AddFullTrustAssembly(StrongName sn);
    [ObsoleteAttribute]
public void AddFullTrustAssembly(StrongNameMembershipCondition snMC);
    public void AddNamedPermissionSet(NamedPermissionSet permSet);
    public NamedPermissionSet ChangeNamedPermissionSet(string name, PermissionSet pSet);
    [ObsoleteAttribute("AppDomain policy levels are obsolete. See https://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]
public static PolicyLevel CreateAppDomainLevel();
    public void FromXml(SecurityElement e);
    public NamedPermissionSet GetNamedPermissionSet(string name);
    public void Recover();
    [ObsoleteAttribute]
public void RemoveFullTrustAssembly(StrongName sn);
    [ObsoleteAttribute]
public void RemoveFullTrustAssembly(StrongNameMembershipCondition snMC);
    public NamedPermissionSet RemoveNamedPermissionSet(NamedPermissionSet permSet);
    public NamedPermissionSet RemoveNamedPermissionSet(string name);
    public void Reset();
    public PolicyStatement Resolve(Evidence evidence);
    public CodeGroup ResolveMatchingCodeGroups(Evidence evidence);
    public SecurityElement ToXml();
}
public class System.Security.Policy.PolicyStatement : object {
    public PolicyStatementAttribute Attributes { get; public set; }
    public string AttributeString { get; }
    public PermissionSet PermissionSet { get; public set; }
    public PolicyStatement(PermissionSet permSet);
    public PolicyStatement(PermissionSet permSet, PolicyStatementAttribute attributes);
    public PolicyStatementAttribute get_Attributes();
    public void set_Attributes(PolicyStatementAttribute value);
    public string get_AttributeString();
    public PermissionSet get_PermissionSet();
    public void set_PermissionSet(PermissionSet value);
    public PolicyStatement Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement et);
    public sealed virtual void FromXml(SecurityElement et, PolicyLevel level);
    public virtual int GetHashCode();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
[FlagsAttribute]
public enum System.Security.Policy.PolicyStatementAttribute : Enum {
    public int value__;
    public static PolicyStatementAttribute Nothing;
    public static PolicyStatementAttribute Exclusive;
    public static PolicyStatementAttribute LevelFinal;
    public static PolicyStatementAttribute All;
}
public class System.Security.Policy.Publisher : EvidenceBase {
    public X509Certificate Certificate { get; }
    public Publisher(X509Certificate cert);
    public X509Certificate get_Certificate();
    public object Copy();
    public sealed virtual IPermission CreateIdentityPermission(Evidence evidence);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Security.Policy.PublisherMembershipCondition : object {
    public X509Certificate Certificate { get; public set; }
    public PublisherMembershipCondition(X509Certificate certificate);
    public X509Certificate get_Certificate();
    public void set_Certificate(X509Certificate value);
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public class System.Security.Policy.Site : EvidenceBase {
    public string Name { get; }
    public Site(string name);
    public string get_Name();
    public object Copy();
    public static Site CreateFromUrl(string url);
    public sealed virtual IPermission CreateIdentityPermission(Evidence evidence);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Security.Policy.SiteMembershipCondition : object {
    public string Site { get; public set; }
    public SiteMembershipCondition(string site);
    public string get_Site();
    public void set_Site(string value);
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public class System.Security.Policy.StrongName : EvidenceBase {
    public string Name { get; }
    public StrongNamePublicKeyBlob PublicKey { get; }
    public Version Version { get; }
    public StrongName(StrongNamePublicKeyBlob blob, string name, Version version);
    public string get_Name();
    public StrongNamePublicKeyBlob get_PublicKey();
    public Version get_Version();
    public object Copy();
    public sealed virtual IPermission CreateIdentityPermission(Evidence evidence);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Security.Policy.StrongNameMembershipCondition : object {
    public string Name { get; public set; }
    public StrongNamePublicKeyBlob PublicKey { get; public set; }
    public Version Version { get; public set; }
    public StrongNameMembershipCondition(StrongNamePublicKeyBlob blob, string name, Version version);
    public string get_Name();
    public void set_Name(string value);
    public StrongNamePublicKeyBlob get_PublicKey();
    public void set_PublicKey(StrongNamePublicKeyBlob value);
    public Version get_Version();
    public void set_Version(Version value);
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public class System.Security.Policy.TrustManagerContext : object {
    public bool IgnorePersistedDecision { get; public set; }
    public bool KeepAlive { get; public set; }
    public bool NoPrompt { get; public set; }
    public bool Persist { get; public set; }
    public ApplicationIdentity PreviousApplicationIdentity { get; public set; }
    public TrustManagerUIContext UIContext { get; public set; }
    public TrustManagerContext(TrustManagerUIContext uiContext);
    public virtual bool get_IgnorePersistedDecision();
    public virtual void set_IgnorePersistedDecision(bool value);
    public virtual bool get_KeepAlive();
    public virtual void set_KeepAlive(bool value);
    public virtual bool get_NoPrompt();
    public virtual void set_NoPrompt(bool value);
    public virtual bool get_Persist();
    public virtual void set_Persist(bool value);
    public virtual ApplicationIdentity get_PreviousApplicationIdentity();
    public virtual void set_PreviousApplicationIdentity(ApplicationIdentity value);
    public virtual TrustManagerUIContext get_UIContext();
    public virtual void set_UIContext(TrustManagerUIContext value);
}
public enum System.Security.Policy.TrustManagerUIContext : Enum {
    public int value__;
    public static TrustManagerUIContext Install;
    public static TrustManagerUIContext Upgrade;
    public static TrustManagerUIContext Run;
}
[ObsoleteAttribute("This type is obsolete. See https://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]
public class System.Security.Policy.UnionCodeGroup : CodeGroup {
    public string MergeLogic { get; }
    public UnionCodeGroup(IMembershipCondition membershipCondition, PolicyStatement policy);
    public virtual string get_MergeLogic();
    public virtual CodeGroup Copy();
    public virtual PolicyStatement Resolve(Evidence evidence);
    public virtual CodeGroup ResolveMatchingCodeGroups(Evidence evidence);
}
public class System.Security.Policy.Url : EvidenceBase {
    public string Value { get; }
    public Url(string name);
    public string get_Value();
    public object Copy();
    public sealed virtual IPermission CreateIdentityPermission(Evidence evidence);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Security.Policy.UrlMembershipCondition : object {
    public string Url { get; public set; }
    public UrlMembershipCondition(string url);
    public string get_Url();
    public void set_Url(string value);
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public class System.Security.Policy.Zone : EvidenceBase {
    public SecurityZone SecurityZone { get; }
    public Zone(SecurityZone zone);
    public SecurityZone get_SecurityZone();
    public object Copy();
    public static Zone CreateFromUrl(string url);
    public sealed virtual IPermission CreateIdentityPermission(Evidence evidence);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Security.Policy.ZoneMembershipCondition : object {
    public SecurityZone SecurityZone { get; public set; }
    public ZoneMembershipCondition(SecurityZone zone);
    public SecurityZone get_SecurityZone();
    public void set_SecurityZone(SecurityZone value);
    public sealed virtual bool Check(Evidence evidence);
    public sealed virtual IMembershipCondition Copy();
    public virtual bool Equals(object o);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual void FromXml(SecurityElement e, PolicyLevel level);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual SecurityElement ToXml();
    public sealed virtual SecurityElement ToXml(PolicyLevel level);
}
public enum System.Security.PolicyLevelType : Enum {
    public int value__;
    public static PolicyLevelType User;
    public static PolicyLevelType Machine;
    public static PolicyLevelType Enterprise;
    public static PolicyLevelType AppDomain;
}
public class System.Security.SecurityContext : object {
    public static SecurityContext Capture();
    public SecurityContext CreateCopy();
    public sealed virtual void Dispose();
    public static bool IsFlowSuppressed();
    public static bool IsWindowsIdentityFlowSuppressed();
    public static void RestoreFlow();
    public static void Run(SecurityContext securityContext, ContextCallback callback, object state);
    public static AsyncFlowControl SuppressFlow();
    public static AsyncFlowControl SuppressFlowWindowsIdentity();
}
public enum System.Security.SecurityContextSource : Enum {
    public int value__;
    public static SecurityContextSource CurrentAppDomain;
    public static SecurityContextSource CurrentAssembly;
}
public static class System.Security.SecurityManager : object {
    [ObsoleteAttribute]
public static bool CheckExecutionRights { get; public set; }
    [ObsoleteAttribute]
public static bool SecurityEnabled { get; public set; }
    public static bool get_CheckExecutionRights();
    public static void set_CheckExecutionRights(bool value);
    public static bool get_SecurityEnabled();
    public static void set_SecurityEnabled(bool value);
    public static bool CurrentThreadRequiresSecurityContextCapture();
    public static PermissionSet GetStandardSandbox(Evidence evidence);
    public static void GetZoneAndOrigin(ArrayList& zone, ArrayList& origin);
    [ObsoleteAttribute]
public static bool IsGranted(IPermission perm);
    [ObsoleteAttribute]
public static PolicyLevel LoadPolicyLevelFromFile(string path, PolicyLevelType type);
    [ObsoleteAttribute]
public static PolicyLevel LoadPolicyLevelFromString(string str, PolicyLevelType type);
    [ObsoleteAttribute]
public static IEnumerator PolicyHierarchy();
    [ObsoleteAttribute]
public static PermissionSet ResolvePolicy(Evidence evidence);
    [ObsoleteAttribute]
public static PermissionSet ResolvePolicy(Evidence evidence, PermissionSet reqdPset, PermissionSet optPset, PermissionSet denyPset, PermissionSet& denied);
    [ObsoleteAttribute]
public static PermissionSet ResolvePolicy(Evidence[] evidences);
    [ObsoleteAttribute]
public static IEnumerator ResolvePolicyGroups(Evidence evidence);
    [ObsoleteAttribute]
public static PermissionSet ResolveSystemPolicy(Evidence evidence);
    [ObsoleteAttribute]
public static void SavePolicy();
    [ObsoleteAttribute]
public static void SavePolicyLevel(PolicyLevel level);
}
public abstract class System.Security.SecurityState : object {
    public abstract virtual void EnsureState();
    public bool IsStateAvailable();
}
public enum System.Security.SecurityZone : Enum {
    public int value__;
    public static SecurityZone NoZone;
    public static SecurityZone MyComputer;
    public static SecurityZone Intranet;
    public static SecurityZone Trusted;
    public static SecurityZone Internet;
    public static SecurityZone Untrusted;
}
public class System.Security.XmlSyntaxException : SystemException {
    public XmlSyntaxException(int lineNumber);
    public XmlSyntaxException(int lineNumber, string message);
    public XmlSyntaxException(string message);
    public XmlSyntaxException(string message, Exception inner);
}
public class System.ServiceProcess.ServiceControllerPermission : ResourcePermissionBase {
    public ServiceControllerPermissionEntryCollection PermissionEntries { get; }
    public ServiceControllerPermission(PermissionState state);
    public ServiceControllerPermission(ServiceControllerPermissionAccess permissionAccess, string machineName, string serviceName);
    public ServiceControllerPermission(ServiceControllerPermissionEntry[] permissionAccessEntries);
    public ServiceControllerPermissionEntryCollection get_PermissionEntries();
}
[FlagsAttribute]
public enum System.ServiceProcess.ServiceControllerPermissionAccess : Enum {
    public int value__;
    public static ServiceControllerPermissionAccess None;
    public static ServiceControllerPermissionAccess Browse;
    public static ServiceControllerPermissionAccess Control;
}
[AttributeUsageAttribute("621")]
public class System.ServiceProcess.ServiceControllerPermissionAttribute : CodeAccessSecurityAttribute {
    public string MachineName { get; public set; }
    public ServiceControllerPermissionAccess PermissionAccess { get; public set; }
    public string ServiceName { get; public set; }
    public ServiceControllerPermissionAttribute(SecurityAction action);
    public string get_MachineName();
    public void set_MachineName(string value);
    public ServiceControllerPermissionAccess get_PermissionAccess();
    public void set_PermissionAccess(ServiceControllerPermissionAccess value);
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public virtual IPermission CreatePermission();
}
public class System.ServiceProcess.ServiceControllerPermissionEntry : object {
    public string MachineName { get; }
    public ServiceControllerPermissionAccess PermissionAccess { get; }
    public string ServiceName { get; }
    public ServiceControllerPermissionEntry(ServiceControllerPermissionAccess permissionAccess, string machineName, string serviceName);
    public string get_MachineName();
    public ServiceControllerPermissionAccess get_PermissionAccess();
    public string get_ServiceName();
}
[DefaultMemberAttribute("Item")]
public class System.ServiceProcess.ServiceControllerPermissionEntryCollection : CollectionBase {
    public ServiceControllerPermissionEntry Item { get; public set; }
    public ServiceControllerPermissionEntry get_Item(int index);
    public void set_Item(int index, ServiceControllerPermissionEntry value);
    public int Add(ServiceControllerPermissionEntry value);
    public void AddRange(ServiceControllerPermissionEntryCollection value);
    public void AddRange(ServiceControllerPermissionEntry[] value);
    public bool Contains(ServiceControllerPermissionEntry value);
    public void CopyTo(ServiceControllerPermissionEntry[] array, int index);
    public int IndexOf(ServiceControllerPermissionEntry value);
    public void Insert(int index, ServiceControllerPermissionEntry value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    public void Remove(ServiceControllerPermissionEntry value);
}
public class System.Transactions.DistributedTransactionPermission : CodeAccessPermission {
    public DistributedTransactionPermission(PermissionState state);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("32767")]
public class System.Transactions.DistributedTransactionPermissionAttribute : CodeAccessSecurityAttribute {
    public bool Unrestricted { get; public set; }
    public DistributedTransactionPermissionAttribute(SecurityAction action);
    public bool get_Unrestricted();
    public void set_Unrestricted(bool value);
    public virtual IPermission CreatePermission();
}
public class System.Web.AspNetHostingPermission : CodeAccessPermission {
    public AspNetHostingPermissionLevel Level { get; public set; }
    public AspNetHostingPermission(PermissionState state);
    public AspNetHostingPermission(AspNetHostingPermissionLevel level);
    public AspNetHostingPermissionLevel get_Level();
    public void set_Level(AspNetHostingPermissionLevel value);
    public virtual IPermission Copy();
    public virtual void FromXml(SecurityElement securityElement);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual SecurityElement ToXml();
    public virtual IPermission Union(IPermission target);
}
[AttributeUsageAttribute("32767")]
public class System.Web.AspNetHostingPermissionAttribute : CodeAccessSecurityAttribute {
    public AspNetHostingPermissionLevel Level { get; public set; }
    public AspNetHostingPermissionAttribute(SecurityAction action);
    public AspNetHostingPermissionLevel get_Level();
    public void set_Level(AspNetHostingPermissionLevel value);
    public virtual IPermission CreatePermission();
}
public enum System.Web.AspNetHostingPermissionLevel : Enum {
    public int value__;
    public static AspNetHostingPermissionLevel None;
    public static AspNetHostingPermissionLevel Minimal;
    public static AspNetHostingPermissionLevel Low;
    public static AspNetHostingPermissionLevel Medium;
    public static AspNetHostingPermissionLevel High;
    public static AspNetHostingPermissionLevel Unrestricted;
}
