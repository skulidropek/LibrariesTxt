public class System.Collections.Generic.KeyedByTypeCollection`1 : KeyedCollection`2<Type, TItem> {
    public KeyedByTypeCollection`1(IEnumerable`1<TItem> items);
    public T Find();
    public T Remove();
    public Collection`1<T> FindAll();
    public Collection`1<T> RemoveAll();
    protected virtual Type GetKeyForItem(TItem item);
    protected virtual void InsertItem(int index, TItem item);
    protected virtual void SetItem(int index, TItem item);
}
[DefaultMemberAttribute("Item")]
public class System.Collections.Generic.SynchronizedCollection`1 : object {
    public int Count { get; }
    protected List`1<T> Items { get; }
    public object SyncRoot { get; }
    public T Item { get; public set; }
    private bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public SynchronizedCollection`1(object syncRoot);
    public SynchronizedCollection`1(object syncRoot, IEnumerable`1<T> list);
    public SynchronizedCollection`1(object syncRoot, T[] list);
    public sealed virtual int get_Count();
    protected List`1<T> get_Items();
    public object get_SyncRoot();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual bool Contains(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, T item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
public class System.IdentityModel.Claims.Claim : object {
    public static IEqualityComparer`1<Claim> DefaultComparer { get; }
    public static Claim System { get; }
    public object Resource { get; }
    public string ClaimType { get; }
    public string Right { get; }
    public Claim(string claimType, object resource, string right);
    public static IEqualityComparer`1<Claim> get_DefaultComparer();
    public static Claim get_System();
    public object get_Resource();
    public string get_ClaimType();
    public string get_Right();
    public static Claim CreateDnsClaim(string dns);
    public static Claim CreateHashClaim(Byte[] hash);
    public static Claim CreateNameClaim(string name);
    public static Claim CreateRsaClaim(RSA rsa);
    public static Claim CreateSpnClaim(string spn);
    public static Claim CreateThumbprintClaim(Byte[] thumbprint);
    public static Claim CreateUpnClaim(string upn);
    public static Claim CreateUriClaim(Uri uri);
    public static Claim CreateWindowsSidClaim(SecurityIdentifier sid);
    public static Claim CreateX500DistinguishedNameClaim(X500DistinguishedName x500DistinguishedName);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public abstract class System.IdentityModel.Claims.ClaimSet : object {
    public static ClaimSet System { get; }
    public Claim Item { get; }
    public int Count { get; }
    public ClaimSet Issuer { get; }
    public static ClaimSet get_System();
    public virtual bool ContainsClaim(Claim claim, IEqualityComparer`1<Claim> comparer);
    public virtual bool ContainsClaim(Claim claim);
    public abstract virtual Claim get_Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual ClaimSet get_Issuer();
    public abstract virtual IEnumerable`1<Claim> FindClaims(string claimType, string right);
    public abstract virtual IEnumerator`1<Claim> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class System.IdentityModel.Claims.ClaimTypes : object {
    public static string Anonymous { get; }
    public static string DenyOnlySid { get; }
    public static string Dns { get; }
    public static string Email { get; }
    public static string Hash { get; }
    public static string Name { get; }
    public static string Rsa { get; }
    public static string Sid { get; }
    public static string Spn { get; }
    public static string System { get; }
    public static string Thumbprint { get; }
    public static string Upn { get; }
    public static string Uri { get; }
    public static string X500DistinguishedName { get; }
    public static string NameIdentifier { get; }
    public static string Authentication { get; }
    public static string AuthorizationDecision { get; }
    public static string get_Anonymous();
    public static string get_DenyOnlySid();
    public static string get_Dns();
    public static string get_Email();
    public static string get_Hash();
    public static string get_Name();
    public static string get_Rsa();
    public static string get_Sid();
    public static string get_Spn();
    public static string get_System();
    public static string get_Thumbprint();
    public static string get_Upn();
    public static string get_Uri();
    public static string get_X500DistinguishedName();
    public static string get_NameIdentifier();
    public static string get_Authentication();
    public static string get_AuthorizationDecision();
}
[DefaultMemberAttribute("Item")]
public class System.IdentityModel.Claims.DefaultClaimSet : ClaimSet {
    public Claim Item { get; }
    public int Count { get; }
    public ClaimSet Issuer { get; }
    public DefaultClaimSet(Claim[] claims);
    public DefaultClaimSet(IList`1<Claim> claims);
    public DefaultClaimSet(ClaimSet issuer, Claim[] claims);
    public DefaultClaimSet(ClaimSet issuer, IList`1<Claim> claims);
    public virtual Claim get_Item(int index);
    public virtual int get_Count();
    public virtual ClaimSet get_Issuer();
    public virtual bool ContainsClaim(Claim claim);
    public virtual IEnumerable`1<Claim> FindClaims(string claimType, string right);
    public virtual IEnumerator`1<Claim> GetEnumerator();
    protected void Initialize(ClaimSet issuer, IList`1<Claim> claims);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.IdentityModel.Claims.X509CertificateClaimSet : ClaimSet {
    public Claim Item { get; }
    public int Count { get; }
    public DateTime ExpirationTime { get; }
    public ClaimSet Issuer { get; }
    public X509Certificate2 X509Certificate { get; }
    public X509CertificateClaimSet(X509Certificate2 certificate);
    public virtual Claim get_Item(int index);
    public virtual int get_Count();
    public DateTime get_ExpirationTime();
    public virtual ClaimSet get_Issuer();
    public X509Certificate2 get_X509Certificate();
    public sealed virtual void Dispose();
    public virtual IEnumerable`1<Claim> FindClaims(string claimType, string right);
    public virtual IEnumerator`1<Claim> GetEnumerator();
    public virtual string ToString();
}
public abstract class System.IdentityModel.Policy.AuthorizationContext : object {
    public string Id { get; }
    public ReadOnlyCollection`1<ClaimSet> ClaimSets { get; }
    public DateTime ExpirationTime { get; }
    public IDictionary`2<string, object> Properties { get; }
    public abstract virtual string get_Id();
    public abstract virtual ReadOnlyCollection`1<ClaimSet> get_ClaimSets();
    public abstract virtual DateTime get_ExpirationTime();
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public static AuthorizationContext CreateDefaultAuthorizationContext(IList`1<IAuthorizationPolicy> authorizationPolicies);
}
public abstract class System.IdentityModel.Policy.EvaluationContext : object {
    public ReadOnlyCollection`1<ClaimSet> ClaimSets { get; }
    public IDictionary`2<string, object> Properties { get; }
    public int Generation { get; }
    public abstract virtual ReadOnlyCollection`1<ClaimSet> get_ClaimSets();
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public abstract virtual int get_Generation();
    public abstract virtual void AddClaimSet(IAuthorizationPolicy policy, ClaimSet claimSet);
    public abstract virtual void RecordExpirationTime(DateTime expirationTime);
}
public interface System.IdentityModel.Policy.IAuthorizationComponent {
    public string Id { get; }
    public abstract virtual string get_Id();
}
public interface System.IdentityModel.Policy.IAuthorizationPolicy {
    public ClaimSet Issuer { get; }
    public abstract virtual ClaimSet get_Issuer();
    public abstract virtual bool Evaluate(EvaluationContext evaluationContext, Object& state);
}
public abstract class System.IdentityModel.Selectors.SecurityTokenAuthenticator : object {
    public bool CanValidateToken(SecurityToken token);
    public ReadOnlyCollection`1<IAuthorizationPolicy> ValidateToken(SecurityToken token);
    protected abstract virtual bool CanValidateTokenCore(SecurityToken token);
    protected abstract virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
}
public abstract class System.IdentityModel.Selectors.SecurityTokenManager : object {
    public abstract virtual SecurityTokenProvider CreateSecurityTokenProvider(SecurityTokenRequirement tokenRequirement);
    public abstract virtual SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityTokenVersion version);
    public abstract virtual SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, SecurityTokenResolver& outOfBandTokenResolver);
}
public abstract class System.IdentityModel.Selectors.SecurityTokenProvider : object {
    public bool SupportsTokenRenewal { get; }
    public bool SupportsTokenCancellation { get; }
    public virtual bool get_SupportsTokenRenewal();
    public virtual bool get_SupportsTokenCancellation();
    public SecurityToken GetToken(TimeSpan timeout);
    public IAsyncResult BeginGetToken(TimeSpan timeout, AsyncCallback callback, object state);
    public SecurityToken EndGetToken(IAsyncResult result);
    public SecurityToken RenewToken(TimeSpan timeout, SecurityToken tokenToBeRenewed);
    public IAsyncResult BeginRenewToken(TimeSpan timeout, SecurityToken tokenToBeRenewed, AsyncCallback callback, object state);
    public SecurityToken EndRenewToken(IAsyncResult result);
    public void CancelToken(TimeSpan timeout, SecurityToken token);
    public IAsyncResult BeginCancelToken(TimeSpan timeout, SecurityToken token, AsyncCallback callback, object state);
    public void EndCancelToken(IAsyncResult result);
    protected abstract virtual SecurityToken GetTokenCore(TimeSpan timeout);
    protected virtual SecurityToken RenewTokenCore(TimeSpan timeout, SecurityToken tokenToBeRenewed);
    protected virtual void CancelTokenCore(TimeSpan timeout, SecurityToken token);
    protected virtual IAsyncResult BeginGetTokenCore(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual SecurityToken EndGetTokenCore(IAsyncResult result);
    protected virtual IAsyncResult BeginRenewTokenCore(TimeSpan timeout, SecurityToken tokenToBeRenewed, AsyncCallback callback, object state);
    protected virtual SecurityToken EndRenewTokenCore(IAsyncResult result);
    protected virtual IAsyncResult BeginCancelTokenCore(TimeSpan timeout, SecurityToken token, AsyncCallback callback, object state);
    protected virtual void EndCancelTokenCore(IAsyncResult result);
    public Task`1<SecurityToken> GetTokenAsync(TimeSpan timeout);
    public Task`1<SecurityToken> RenewTokenAsync(TimeSpan timeout, SecurityToken tokenToBeRenewed);
    public Task CancelTokenAsync(TimeSpan timeout, SecurityToken token);
    protected virtual Task`1<SecurityToken> GetTokenCoreAsync(TimeSpan timeout);
    protected virtual Task`1<SecurityToken> RenewTokenCoreAsync(TimeSpan timeout, SecurityToken tokenToBeRenewed);
    protected virtual Task CancelTokenCoreAsync(TimeSpan timeout, SecurityToken token);
}
public class System.IdentityModel.Selectors.SecurityTokenRequirement : object {
    public string TokenType { get; public set; }
    public bool RequireCryptographicToken { get; public set; }
    public SecurityKeyUsage KeyUsage { get; public set; }
    public SecurityKeyType KeyType { get; public set; }
    public int KeySize { get; public set; }
    public IDictionary`2<string, object> Properties { get; }
    public string get_TokenType();
    public void set_TokenType(string value);
    public bool get_RequireCryptographicToken();
    public void set_RequireCryptographicToken(bool value);
    public SecurityKeyUsage get_KeyUsage();
    public void set_KeyUsage(SecurityKeyUsage value);
    public SecurityKeyType get_KeyType();
    public void set_KeyType(SecurityKeyType value);
    public int get_KeySize();
    public void set_KeySize(int value);
    public IDictionary`2<string, object> get_Properties();
    public TValue GetProperty(string propertyName);
    public bool TryGetProperty(string propertyName, TValue& result);
}
public abstract class System.IdentityModel.Selectors.SecurityTokenResolver : object {
}
public abstract class System.IdentityModel.Selectors.SecurityTokenSerializer : object {
    public bool CanReadToken(XmlReader reader);
    public bool CanWriteToken(SecurityToken token);
    public bool CanReadKeyIdentifier(XmlReader reader);
    public bool CanWriteKeyIdentifier(SecurityKeyIdentifier keyIdentifier);
    public bool CanReadKeyIdentifierClause(XmlReader reader);
    public bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
    public SecurityToken ReadToken(XmlReader reader, SecurityTokenResolver tokenResolver);
    public void WriteToken(XmlWriter writer, SecurityToken token);
    public SecurityKeyIdentifier ReadKeyIdentifier(XmlReader reader);
    public void WriteKeyIdentifier(XmlWriter writer, SecurityKeyIdentifier keyIdentifier);
    public SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader);
    public void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause);
    protected abstract virtual bool CanReadTokenCore(XmlReader reader);
    protected abstract virtual bool CanWriteTokenCore(SecurityToken token);
    protected abstract virtual bool CanReadKeyIdentifierCore(XmlReader reader);
    protected abstract virtual bool CanWriteKeyIdentifierCore(SecurityKeyIdentifier keyIdentifier);
    protected abstract virtual bool CanReadKeyIdentifierClauseCore(XmlReader reader);
    protected abstract virtual bool CanWriteKeyIdentifierClauseCore(SecurityKeyIdentifierClause keyIdentifierClause);
    protected abstract virtual SecurityToken ReadTokenCore(XmlReader reader, SecurityTokenResolver tokenResolver);
    protected abstract virtual void WriteTokenCore(XmlWriter writer, SecurityToken token);
    protected abstract virtual SecurityKeyIdentifier ReadKeyIdentifierCore(XmlReader reader);
    protected abstract virtual void WriteKeyIdentifierCore(XmlWriter writer, SecurityKeyIdentifier keyIdentifier);
    protected abstract virtual SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader reader);
    protected abstract virtual void WriteKeyIdentifierClauseCore(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause);
}
public abstract class System.IdentityModel.Selectors.SecurityTokenVersion : object {
    public abstract virtual ReadOnlyCollection`1<string> GetSecuritySpecifications();
}
public abstract class System.IdentityModel.Selectors.X509CertificateValidator : object {
    public abstract virtual void Validate(X509Certificate2 certificate);
    public static X509CertificateValidator CreateChainTrustValidator(bool useMachineContext, X509ChainPolicy chainPolicy);
}
public class System.IdentityModel.Selectors.X509SecurityTokenAuthenticator : SecurityTokenAuthenticator {
    public X509SecurityTokenAuthenticator(X509CertificateValidator validator);
    protected virtual bool CanValidateTokenCore(SecurityToken token);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
}
public class System.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause : SecurityKeyIdentifierClause {
    public XmlElement ReferenceXml { get; }
    public GenericXmlSecurityKeyIdentifierClause(XmlElement referenceXml);
    public GenericXmlSecurityKeyIdentifierClause(XmlElement referenceXml, Byte[] derivationNonce, int derivationLength);
    public XmlElement get_ReferenceXml();
    public virtual bool Matches(SecurityKeyIdentifierClause keyIdentifierClause);
}
public class System.IdentityModel.Tokens.GenericXmlSecurityToken : SecurityToken {
    public string Id { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public SecurityKeyIdentifierClause InternalTokenReference { get; }
    public SecurityKeyIdentifierClause ExternalTokenReference { get; }
    public XmlElement TokenXml { get; }
    public SecurityToken ProofToken { get; }
    public ReadOnlyCollection`1<IAuthorizationPolicy> AuthorizationPolicies { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public GenericXmlSecurityToken(XmlElement tokenXml, SecurityToken proofToken, DateTime effectiveTime, DateTime expirationTime, SecurityKeyIdentifierClause internalTokenReference, SecurityKeyIdentifierClause externalTokenReference, ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies);
    public virtual string get_Id();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public SecurityKeyIdentifierClause get_InternalTokenReference();
    public SecurityKeyIdentifierClause get_ExternalTokenReference();
    public XmlElement get_TokenXml();
    public SecurityToken get_ProofToken();
    public ReadOnlyCollection`1<IAuthorizationPolicy> get_AuthorizationPolicies();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual bool CanCreateKeyIdentifierClause();
    public virtual T CreateKeyIdentifierClause();
    public virtual bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual string ToString();
}
public abstract class System.IdentityModel.Tokens.SecurityKey : object {
    public int KeySize { get; }
    public abstract virtual int get_KeySize();
}
[DefaultMemberAttribute("Item")]
public class System.IdentityModel.Tokens.SecurityKeyIdentifier : object {
    public SecurityKeyIdentifierClause Item { get; }
    public bool CanCreateKey { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SecurityKeyIdentifier(SecurityKeyIdentifierClause[] clauses);
    public SecurityKeyIdentifierClause get_Item(int index);
    public bool get_CanCreateKey();
    public int get_Count();
    public bool get_IsReadOnly();
    public void Add(SecurityKeyIdentifierClause clause);
    public SecurityKey CreateKey();
    public TClause Find();
    public sealed virtual IEnumerator`1<SecurityKeyIdentifierClause> GetEnumerator();
    public void MakeReadOnly();
    public virtual string ToString();
    public bool TryFind(TClause& clause);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.IdentityModel.Tokens.SecurityKeyIdentifierClause : object {
    public bool CanCreateKey { get; }
    public string ClauseType { get; }
    public string Id { get; public set; }
    public int DerivationLength { get; }
    protected SecurityKeyIdentifierClause(string clauseType);
    protected SecurityKeyIdentifierClause(string clauseType, Byte[] nonce, int length);
    public virtual bool get_CanCreateKey();
    public string get_ClauseType();
    public string get_Id();
    public void set_Id(string value);
    public virtual SecurityKey CreateKey();
    public virtual bool Matches(SecurityKeyIdentifierClause keyIdentifierClause);
    public Byte[] GetDerivationNonce();
    public int get_DerivationLength();
}
public enum System.IdentityModel.Tokens.SecurityKeyType : Enum {
    public int value__;
    public static SecurityKeyType SymmetricKey;
    public static SecurityKeyType AsymmetricKey;
    public static SecurityKeyType BearerKey;
}
public enum System.IdentityModel.Tokens.SecurityKeyUsage : Enum {
    public int value__;
    public static SecurityKeyUsage Exchange;
    public static SecurityKeyUsage Signature;
}
public abstract class System.IdentityModel.Tokens.SecurityToken : object {
    public string Id { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public abstract virtual string get_Id();
    public abstract virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public abstract virtual DateTime get_ValidFrom();
    public abstract virtual DateTime get_ValidTo();
    public virtual bool CanCreateKeyIdentifierClause();
    public virtual T CreateKeyIdentifierClause();
    public virtual bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual SecurityKey ResolveKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
}
public class System.IdentityModel.Tokens.SecurityTokenException : Exception {
    public SecurityTokenException(string message);
    public SecurityTokenException(string message, Exception innerException);
    protected SecurityTokenException(SerializationInfo info, StreamingContext context);
}
public class System.IdentityModel.Tokens.SecurityTokenValidationException : SecurityTokenException {
    public SecurityTokenValidationException(string message);
    public SecurityTokenValidationException(string message, Exception innerException);
    protected SecurityTokenValidationException(SerializationInfo info, StreamingContext context);
}
public abstract class System.IdentityModel.Tokens.SymmetricSecurityKey : SecurityKey {
    public abstract virtual SymmetricAlgorithm GetSymmetricAlgorithm(string algorithm);
    public abstract virtual Byte[] GetSymmetricKey();
}
public class System.IdentityModel.Tokens.UserNameSecurityToken : SecurityToken {
    public string Id { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public string UserName { get; }
    public string Password { get; }
    public UserNameSecurityToken(string userName, string password);
    public UserNameSecurityToken(string userName, string password, string id);
    public virtual string get_Id();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public string get_UserName();
    public string get_Password();
}
public class System.IdentityModel.Tokens.X509SecurityToken : SecurityToken {
    public string Id { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public X509Certificate2 Certificate { get; }
    public X509SecurityToken(X509Certificate2 certificate);
    public X509SecurityToken(X509Certificate2 certificate, string id);
    public virtual string get_Id();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public X509Certificate2 get_Certificate();
    public virtual bool CanCreateKeyIdentifierClause();
    public virtual T CreateKeyIdentifierClause();
    public virtual bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual void Dispose();
    protected void ThrowIfDisposed();
}
public class System.ServiceModel.ActionNotSupportedException : CommunicationException {
    public ActionNotSupportedException(string message);
    public ActionNotSupportedException(string message, Exception innerException);
    protected ActionNotSupportedException(SerializationInfo info, StreamingContext context);
}
public enum System.ServiceModel.CacheSetting : Enum {
    public int value__;
    public static CacheSetting Default;
    public static CacheSetting AlwaysOn;
    public static CacheSetting AlwaysOff;
}
[AttributeUsageAttribute("4")]
public class System.ServiceModel.CallbackBehaviorAttribute : Attribute {
    public bool AutomaticSessionShutdown { get; public set; }
    public bool UseSynchronizationContext { get; public set; }
    public ConcurrencyMode ConcurrencyMode { get; public set; }
    public bool get_AutomaticSessionShutdown();
    public void set_AutomaticSessionShutdown(bool value);
    public bool get_UseSynchronizationContext();
    public void set_UseSynchronizationContext(bool value);
    public ConcurrencyMode get_ConcurrencyMode();
    public void set_ConcurrencyMode(ConcurrencyMode value);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint serviceEndpoint, BindingParameterCollection parameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint);
}
public abstract class System.ServiceModel.ChannelFactory : CommunicationObject {
    public ClientCredentials Credentials { get; }
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    public ServiceEndpoint Endpoint { get; }
    public ClientCredentials get_Credentials();
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    public ServiceEndpoint get_Endpoint();
    protected abstract virtual ServiceEndpoint CreateDescription();
    protected virtual IChannelFactory CreateFactory();
    protected internal void EnsureOpened();
    public sealed virtual T GetProperty();
    protected void InitializeEndpoint(Binding binding, EndpointAddress address);
    protected void InitializeEndpoint(ServiceEndpoint endpoint);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnOpened();
    protected virtual void OnOpening();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
}
public class System.ServiceModel.ChannelFactory`1 : ChannelFactory {
    public ChannelFactory`1(Binding binding);
    public ChannelFactory`1(Binding binding, EndpointAddress remoteAddress);
    public ChannelFactory`1(ServiceEndpoint endpoint);
    protected ChannelFactory`1(Type channelType);
    public TChannel CreateChannel();
    public sealed virtual TChannel CreateChannel(EndpointAddress address);
    public virtual TChannel CreateChannel(EndpointAddress address, Uri via);
    protected virtual ServiceEndpoint CreateDescription();
}
public abstract class System.ServiceModel.Channels.AddressHeader : object {
    public string Name { get; }
    public string Namespace { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Namespace();
    public static AddressHeader CreateAddressHeader(string name, string ns, object value);
    public static AddressHeader CreateAddressHeader(string name, string ns, object value, XmlObjectSerializer serializer);
    public virtual bool Equals(object obj);
    public virtual XmlDictionaryReader GetAddressHeaderReader();
    public virtual int GetHashCode();
    public T GetValue();
    public T GetValue(XmlObjectSerializer serializer);
    protected abstract virtual void OnWriteAddressHeaderContents(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartAddressHeader(XmlDictionaryWriter writer);
    public MessageHeader ToMessageHeader();
    public void WriteAddressHeader(XmlDictionaryWriter writer);
    public void WriteAddressHeader(XmlWriter writer);
    public void WriteAddressHeaderContents(XmlDictionaryWriter writer);
    public void WriteStartAddressHeader(XmlDictionaryWriter writer);
}
public class System.ServiceModel.Channels.AddressHeaderCollection : ReadOnlyCollection`1<AddressHeader> {
    public AddressHeaderCollection(IEnumerable`1<AddressHeader> addressHeaders);
    public void AddHeadersTo(Message message);
    public AddressHeader[] FindAll(string name, string ns);
    public AddressHeader FindHeader(string name, string ns);
}
public class System.ServiceModel.Channels.AddressingVersion : object {
    public static AddressingVersion None { get; }
    public static AddressingVersion WSAddressing10 { get; }
    public static AddressingVersion WSAddressingAugust2004 { get; }
    public static AddressingVersion get_None();
    public static AddressingVersion get_WSAddressing10();
    public static AddressingVersion get_WSAddressingAugust2004();
    public virtual string ToString();
}
public class System.ServiceModel.Channels.BinaryMessageEncodingBindingElement : MessageEncodingBindingElement {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CompressionFormat CompressionFormat { get; public set; }
    [DefaultValueAttribute("2048")]
public int MaxSessionSize { get; public set; }
    public int MaxReadPoolSize { get; public set; }
    public int MaxWritePoolSize { get; public set; }
    public MessageVersion MessageVersion { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    public CompressionFormat get_CompressionFormat();
    public void set_CompressionFormat(CompressionFormat value);
    public int get_MaxSessionSize();
    public void set_MaxSessionSize(int value);
    public int get_MaxReadPoolSize();
    public void set_MaxReadPoolSize(int value);
    public int get_MaxWritePoolSize();
    public void set_MaxWritePoolSize(int value);
    public virtual MessageVersion get_MessageVersion();
    public virtual void set_MessageVersion(MessageVersion value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual BindingElement Clone();
    public virtual MessageEncoderFactory CreateMessageEncoderFactory();
    public virtual T GetProperty(BindingContext context);
}
public abstract class System.ServiceModel.Channels.Binding : object {
    [DefaultValueAttribute("System.TimeSpan", "00:01:00")]
public TimeSpan CloseTimeout { get; public set; }
    public MessageVersion MessageVersion { get; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    [DefaultValueAttribute("System.TimeSpan", "00:01:00")]
public TimeSpan OpenTimeout { get; public set; }
    [DefaultValueAttribute("System.TimeSpan", "00:10:00")]
public TimeSpan ReceiveTimeout { get; public set; }
    public string Scheme { get; }
    [DefaultValueAttribute("System.TimeSpan", "00:01:00")]
public TimeSpan SendTimeout { get; public set; }
    protected Binding(string name, string ns);
    public sealed virtual TimeSpan get_CloseTimeout();
    public void set_CloseTimeout(TimeSpan value);
    public MessageVersion get_MessageVersion();
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public sealed virtual TimeSpan get_OpenTimeout();
    public void set_OpenTimeout(TimeSpan value);
    public sealed virtual TimeSpan get_ReceiveTimeout();
    public void set_ReceiveTimeout(TimeSpan value);
    public abstract virtual string get_Scheme();
    public sealed virtual TimeSpan get_SendTimeout();
    public void set_SendTimeout(TimeSpan value);
    public IChannelFactory`1<TChannel> BuildChannelFactory(Object[] parameters);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingParameterCollection parameters);
    public bool CanBuildChannelFactory(Object[] parameters);
    public virtual bool CanBuildChannelFactory(BindingParameterCollection parameters);
    public abstract virtual BindingElementCollection CreateBindingElements();
    public T GetProperty(BindingParameterCollection parameters);
}
public class System.ServiceModel.Channels.BindingContext : object {
    public CustomBinding Binding { get; }
    public BindingParameterCollection BindingParameters { get; }
    public BindingElementCollection RemainingBindingElements { get; }
    public BindingContext(CustomBinding binding, BindingParameterCollection parameters);
    public CustomBinding get_Binding();
    public BindingParameterCollection get_BindingParameters();
    public BindingElementCollection get_RemainingBindingElements();
    public IChannelFactory`1<TChannel> BuildInnerChannelFactory();
    public bool CanBuildInnerChannelFactory();
    public BindingContext Clone();
    public T GetInnerProperty();
}
public abstract class System.ServiceModel.Channels.BindingElement : object {
    protected BindingElement(BindingElement elementToBeCloned);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public abstract virtual BindingElement Clone();
    public abstract virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.Channels.BindingElementCollection : Collection`1<BindingElement> {
    public BindingElementCollection(IEnumerable`1<BindingElement> elements);
    public BindingElementCollection(BindingElement[] elements);
    public void AddRange(BindingElement[] elements);
    public BindingElementCollection Clone();
    public bool Contains(Type bindingElementType);
    public T Find();
    public Collection`1<T> FindAll();
    protected virtual void InsertItem(int index, BindingElement item);
    public T Remove();
    public Collection`1<T> RemoveAll();
    protected virtual void SetItem(int index, BindingElement item);
}
public class System.ServiceModel.Channels.BindingParameterCollection : KeyedByTypeCollection`1<object> {
}
public abstract class System.ServiceModel.Channels.BodyWriter : object {
    public bool IsBuffered { get; }
    protected BodyWriter(bool isBuffered);
    public bool get_IsBuffered();
    public BodyWriter CreateBufferedCopy(int maxBufferSize);
    protected virtual BodyWriter OnCreateBufferedCopy(int maxBufferSize);
    protected abstract virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    public void WriteBodyContents(XmlDictionaryWriter writer);
}
public abstract class System.ServiceModel.Channels.BufferManager : object {
    public abstract virtual void Clear();
    public static BufferManager CreateBufferManager(long maxBufferPoolSize, int maxBufferSize);
    public abstract virtual void ReturnBuffer(Byte[] buffer);
    public abstract virtual Byte[] TakeBuffer(int bufferSize);
}
public abstract class System.ServiceModel.Channels.ChannelBase : CommunicationObject {
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    protected TimeSpan DefaultReceiveTimeout { get; }
    protected TimeSpan DefaultSendTimeout { get; }
    protected ChannelManagerBase Manager { get; }
    private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout { get; }
    private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout { get; }
    private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout { get; }
    private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout { get; }
    protected ChannelBase(ChannelManagerBase channelManager);
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    protected TimeSpan get_DefaultReceiveTimeout();
    protected TimeSpan get_DefaultSendTimeout();
    protected ChannelManagerBase get_Manager();
    private sealed virtual override TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_CloseTimeout();
    private sealed virtual override TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_OpenTimeout();
    private sealed virtual override TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_ReceiveTimeout();
    private sealed virtual override TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_SendTimeout();
    public virtual T GetProperty();
    protected virtual void OnClosed();
}
public abstract class System.ServiceModel.Channels.ChannelFactoryBase : ChannelManagerBase {
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    protected TimeSpan DefaultReceiveTimeout { get; }
    protected TimeSpan DefaultSendTimeout { get; }
    protected ChannelFactoryBase(IDefaultCommunicationTimeouts timeouts);
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    protected virtual TimeSpan get_DefaultReceiveTimeout();
    protected virtual TimeSpan get_DefaultSendTimeout();
    public virtual T GetProperty();
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndClose(IAsyncResult result);
}
public abstract class System.ServiceModel.Channels.ChannelFactoryBase`1 : ChannelFactoryBase {
    protected ChannelFactoryBase`1(IDefaultCommunicationTimeouts timeouts);
    public sealed virtual TChannel CreateChannel(EndpointAddress address);
    public sealed virtual TChannel CreateChannel(EndpointAddress address, Uri via);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected abstract virtual TChannel OnCreateChannel(EndpointAddress address, Uri via);
    protected virtual void OnEndClose(IAsyncResult result);
    protected void ValidateCreateChannel();
}
public abstract class System.ServiceModel.Channels.ChannelManagerBase : CommunicationObject {
    protected TimeSpan DefaultReceiveTimeout { get; }
    protected TimeSpan DefaultSendTimeout { get; }
    private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout { get; }
    private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout { get; }
    private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout { get; }
    private TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout { get; }
    protected abstract virtual TimeSpan get_DefaultReceiveTimeout();
    protected abstract virtual TimeSpan get_DefaultSendTimeout();
    private sealed virtual override TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_CloseTimeout();
    private sealed virtual override TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_OpenTimeout();
    private sealed virtual override TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_ReceiveTimeout();
    private sealed virtual override TimeSpan System.ServiceModel.IDefaultCommunicationTimeouts.get_SendTimeout();
}
public class System.ServiceModel.Channels.ChannelParameterCollection : Collection`1<object> {
    protected IChannel Channel { get; }
    public ChannelParameterCollection(IChannel channel);
    protected virtual IChannel get_Channel();
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, object item);
    public void PropagateChannelParameters(IChannel innerChannel);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, object item);
}
public abstract class System.ServiceModel.Channels.CommunicationObject : object {
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    protected bool IsDisposed { get; }
    public CommunicationState State { get; }
    protected object ThisLock { get; }
    protected CommunicationObject(object mutex);
    protected abstract virtual TimeSpan get_DefaultCloseTimeout();
    protected abstract virtual TimeSpan get_DefaultOpenTimeout();
    protected bool get_IsDisposed();
    public sealed virtual CommunicationState get_State();
    protected object get_ThisLock();
    public sealed virtual void add_Closed(EventHandler value);
    public sealed virtual void remove_Closed(EventHandler value);
    public sealed virtual void add_Closing(EventHandler value);
    public sealed virtual void remove_Closing(EventHandler value);
    public sealed virtual void add_Faulted(EventHandler value);
    public sealed virtual void remove_Faulted(EventHandler value);
    public sealed virtual void add_Opened(EventHandler value);
    public sealed virtual void remove_Opened(EventHandler value);
    public sealed virtual void add_Opening(EventHandler value);
    public sealed virtual void remove_Opening(EventHandler value);
    public sealed virtual void Abort();
    public sealed virtual IAsyncResult BeginClose(AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginOpen(AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual void Close();
    public sealed virtual void Close(TimeSpan timeout);
    public sealed virtual void EndClose(IAsyncResult result);
    public sealed virtual void EndOpen(IAsyncResult result);
    protected void Fault();
    protected virtual Type GetCommunicationObjectType();
    protected abstract virtual void OnAbort();
    protected abstract virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected abstract virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected abstract virtual void OnClose(TimeSpan timeout);
    protected virtual void OnClosed();
    protected virtual void OnClosing();
    protected abstract virtual void OnEndClose(IAsyncResult result);
    protected abstract virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnFaulted();
    protected abstract virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnOpened();
    protected virtual void OnOpening();
    public sealed virtual void Open();
    public sealed virtual void Open(TimeSpan timeout);
}
public enum System.ServiceModel.Channels.CompressionFormat : Enum {
    public int value__;
    public static CompressionFormat Deflate;
    public static CompressionFormat GZip;
    public static CompressionFormat None;
}
public class System.ServiceModel.Channels.CustomBinding : Binding {
    public BindingElementCollection Elements { get; }
    public string Scheme { get; }
    public CustomBinding(IEnumerable`1<BindingElement> bindingElementsInTopDownChannelStackOrder);
    public CustomBinding(Binding binding);
    public CustomBinding(BindingElement[] bindingElementsInTopDownChannelStackOrder);
    public CustomBinding(string name, string ns, BindingElement[] bindingElementsInTopDownChannelStackOrder);
    public BindingElementCollection get_Elements();
    public virtual string get_Scheme();
    public virtual BindingElementCollection CreateBindingElements();
}
public abstract class System.ServiceModel.Channels.FaultConverter : object {
    public static FaultConverter GetDefaultFaultConverter(MessageVersion version);
    protected abstract virtual bool OnTryCreateException(Message message, MessageFault fault, Exception& exception);
    protected abstract virtual bool OnTryCreateFaultMessage(Exception exception, Message& message);
    public bool TryCreateException(Message message, MessageFault fault, Exception& exception);
}
public interface System.ServiceModel.Channels.IBindingDeliveryCapabilities {
    public bool AssuresOrderedDelivery { get; }
    public bool QueuedDelivery { get; }
    public abstract virtual bool get_AssuresOrderedDelivery();
    public abstract virtual bool get_QueuedDelivery();
}
public interface System.ServiceModel.Channels.IChannel {
    public abstract virtual T GetProperty();
}
public interface System.ServiceModel.Channels.IChannelFactory {
    public abstract virtual T GetProperty();
}
public interface System.ServiceModel.Channels.IChannelFactory`1 {
    public abstract virtual TChannel CreateChannel(EndpointAddress to);
    public abstract virtual TChannel CreateChannel(EndpointAddress to, Uri via);
}
public interface System.ServiceModel.Channels.IDuplexChannel {
}
public interface System.ServiceModel.Channels.IDuplexSession {
    public abstract virtual IAsyncResult BeginCloseOutputSession(AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginCloseOutputSession(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual void CloseOutputSession();
    public abstract virtual void CloseOutputSession(TimeSpan timeout);
    public abstract virtual void EndCloseOutputSession(IAsyncResult result);
}
public interface System.ServiceModel.Channels.IDuplexSessionChannel {
}
public interface System.ServiceModel.Channels.IInputChannel {
    public EndpointAddress LocalAddress { get; }
    public abstract virtual EndpointAddress get_LocalAddress();
    public abstract virtual IAsyncResult BeginReceive(AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual Message EndReceive(IAsyncResult result);
    public abstract virtual bool EndTryReceive(IAsyncResult result, Message& message);
    public abstract virtual bool EndWaitForMessage(IAsyncResult result);
    public abstract virtual Message Receive();
    public abstract virtual Message Receive(TimeSpan timeout);
    public abstract virtual bool TryReceive(TimeSpan timeout, Message& message);
    public abstract virtual bool WaitForMessage(TimeSpan timeout);
}
public interface System.ServiceModel.Channels.IInputSession {
}
public interface System.ServiceModel.Channels.IInputSessionChannel {
}
public interface System.ServiceModel.Channels.IMessageProperty {
    public abstract virtual IMessageProperty CreateCopy();
}
public interface System.ServiceModel.Channels.IOutputChannel {
    public EndpointAddress RemoteAddress { get; }
    public Uri Via { get; }
    public abstract virtual EndpointAddress get_RemoteAddress();
    public abstract virtual Uri get_Via();
    public abstract virtual IAsyncResult BeginSend(Message message, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual void EndSend(IAsyncResult result);
    public abstract virtual void Send(Message message);
    public abstract virtual void Send(Message message, TimeSpan timeout);
}
public interface System.ServiceModel.Channels.IOutputSession {
}
public interface System.ServiceModel.Channels.IOutputSessionChannel {
}
public interface System.ServiceModel.Channels.IRequestChannel {
    public EndpointAddress RemoteAddress { get; }
    public Uri Via { get; }
    public abstract virtual EndpointAddress get_RemoteAddress();
    public abstract virtual Uri get_Via();
    public abstract virtual IAsyncResult BeginRequest(Message message, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual Message EndRequest(IAsyncResult result);
    public abstract virtual Message Request(Message message);
    public abstract virtual Message Request(Message message, TimeSpan timeout);
}
public interface System.ServiceModel.Channels.IRequestSessionChannel {
}
public interface System.ServiceModel.Channels.ISecurityCapabilities {
    public ProtectionLevel SupportedRequestProtectionLevel { get; }
    public ProtectionLevel SupportedResponseProtectionLevel { get; }
    public bool SupportsClientAuthentication { get; }
    public bool SupportsClientWindowsIdentity { get; }
    public bool SupportsServerAuthentication { get; }
    public abstract virtual ProtectionLevel get_SupportedRequestProtectionLevel();
    public abstract virtual ProtectionLevel get_SupportedResponseProtectionLevel();
    public abstract virtual bool get_SupportsClientAuthentication();
    public abstract virtual bool get_SupportsClientWindowsIdentity();
    public abstract virtual bool get_SupportsServerAuthentication();
}
public interface System.ServiceModel.Channels.ISession {
    public string Id { get; }
    public abstract virtual string get_Id();
}
public interface System.ServiceModel.Channels.ISessionChannel`1 {
    public TSession Session { get; }
    public abstract virtual TSession get_Session();
}
public interface System.ServiceModel.Channels.ITransportCompressionSupport {
    public abstract virtual bool IsCompressionFormatSupported(CompressionFormat compressionFormat);
}
public class System.ServiceModel.Channels.LocalClientSecuritySettings : object {
    public bool DetectReplays { get; public set; }
    public TimeSpan MaxClockSkew { get; public set; }
    public bool ReconnectTransportOnFailure { get; public set; }
    public TimeSpan ReplayWindow { get; public set; }
    public TimeSpan TimestampValidityDuration { get; public set; }
    public bool get_DetectReplays();
    public void set_DetectReplays(bool value);
    public TimeSpan get_MaxClockSkew();
    public void set_MaxClockSkew(TimeSpan value);
    public bool get_ReconnectTransportOnFailure();
    public void set_ReconnectTransportOnFailure(bool value);
    public TimeSpan get_ReplayWindow();
    public void set_ReplayWindow(TimeSpan value);
    public TimeSpan get_TimestampValidityDuration();
    public void set_TimestampValidityDuration(TimeSpan value);
    public LocalClientSecuritySettings Clone();
}
public abstract class System.ServiceModel.Channels.Message : object {
    public MessageHeaders Headers { get; }
    protected bool IsDisposed { get; }
    public bool IsEmpty { get; }
    public bool IsFault { get; }
    public MessageProperties Properties { get; }
    public MessageState State { get; }
    public MessageVersion Version { get; }
    public abstract virtual MessageHeaders get_Headers();
    protected bool get_IsDisposed();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsFault();
    public abstract virtual MessageProperties get_Properties();
    public MessageState get_State();
    public abstract virtual MessageVersion get_Version();
    public void Close();
    public MessageBuffer CreateBufferedCopy(int maxBufferSize);
    public static Message CreateMessage(MessageVersion version, string action);
    public static Message CreateMessage(MessageVersion version, string action, object body);
    public static Message CreateMessage(MessageVersion version, string action, object body, XmlObjectSerializer serializer);
    public static Message CreateMessage(MessageVersion version, string action, BodyWriter body);
    public static Message CreateMessage(MessageVersion version, string action, XmlDictionaryReader body);
    public static Message CreateMessage(MessageVersion version, string action, XmlReader body);
    public static Message CreateMessage(XmlDictionaryReader envelopeReader, int maxSizeOfHeaders, MessageVersion version);
    public static Message CreateMessage(XmlReader envelopeReader, int maxSizeOfHeaders, MessageVersion version);
    public static Message CreateMessage(MessageVersion version, FaultCode faultCode, string reason, string action);
    public static Message CreateMessage(MessageVersion version, FaultCode faultCode, string reason, object detail, string action);
    public T GetBody();
    public T GetBody(XmlObjectSerializer serializer);
    public string GetBodyAttribute(string localName, string ns);
    public XmlDictionaryReader GetReaderAtBodyContents();
    protected virtual void OnBodyToString(XmlDictionaryWriter writer);
    protected virtual void OnClose();
    protected virtual MessageBuffer OnCreateBufferedCopy(int maxBufferSize);
    protected virtual T OnGetBody(XmlDictionaryReader reader);
    protected virtual string OnGetBodyAttribute(string localName, string ns);
    protected virtual XmlDictionaryReader OnGetReaderAtBodyContents();
    protected abstract virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
    protected virtual void OnWriteMessage(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartBody(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartEnvelope(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartHeaders(XmlDictionaryWriter writer);
    private sealed virtual override void System.IDisposable.Dispose();
    public virtual string ToString();
    public void WriteBody(XmlDictionaryWriter writer);
    public void WriteBody(XmlWriter writer);
    public void WriteBodyContents(XmlDictionaryWriter writer);
    public void WriteMessage(XmlDictionaryWriter writer);
    public void WriteMessage(XmlWriter writer);
    public void WriteStartBody(XmlDictionaryWriter writer);
    public void WriteStartBody(XmlWriter writer);
    public void WriteStartEnvelope(XmlDictionaryWriter writer);
}
public abstract class System.ServiceModel.Channels.MessageBuffer : object {
    public int BufferSize { get; }
    public string MessageContentType { get; }
    public abstract virtual int get_BufferSize();
    public virtual string get_MessageContentType();
    public abstract virtual void Close();
    public abstract virtual Message CreateMessage();
    private sealed virtual override void System.IDisposable.Dispose();
    public virtual void WriteMessage(Stream stream);
}
public abstract class System.ServiceModel.Channels.MessageEncoder : object {
    public string ContentType { get; }
    public string MediaType { get; }
    public MessageVersion MessageVersion { get; }
    public abstract virtual string get_ContentType();
    public abstract virtual string get_MediaType();
    public abstract virtual MessageVersion get_MessageVersion();
    public virtual T GetProperty();
    public virtual bool IsContentTypeSupported(string contentType);
    public Message ReadMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager);
    public abstract virtual Message ReadMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager, string contentType);
    public Message ReadMessage(Stream stream, int maxSizeOfHeaders);
    public abstract virtual Message ReadMessage(Stream stream, int maxSizeOfHeaders, string contentType);
    public virtual string ToString();
    public ArraySegment`1<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager);
    public abstract virtual ArraySegment`1<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager, int messageOffset);
    public abstract virtual void WriteMessage(Message message, Stream stream);
    public virtual ValueTask`1<Message> ReadMessageAsync(Stream stream, int maxSizeOfHeaders, string contentType);
    public virtual ValueTask`1<Message> ReadMessageAsync(ArraySegment`1<byte> buffer, BufferManager bufferManager, string contentType);
    public virtual ValueTask WriteMessageAsync(Message message, Stream stream);
    public virtual ValueTask`1<ArraySegment`1<byte>> WriteMessageAsync(Message message, int maxMessageSize, BufferManager bufferManager, int messageOffset);
}
public abstract class System.ServiceModel.Channels.MessageEncoderFactory : object {
    public MessageEncoder Encoder { get; }
    public MessageVersion MessageVersion { get; }
    public abstract virtual MessageEncoder get_Encoder();
    public abstract virtual MessageVersion get_MessageVersion();
    public virtual MessageEncoder CreateSessionEncoder();
}
public abstract class System.ServiceModel.Channels.MessageEncodingBindingElement : BindingElement {
    public MessageVersion MessageVersion { get; public set; }
    protected MessageEncodingBindingElement(MessageEncodingBindingElement elementToBeCloned);
    public abstract virtual MessageVersion get_MessageVersion();
    public abstract virtual void set_MessageVersion(MessageVersion value);
    public abstract virtual MessageEncoderFactory CreateMessageEncoderFactory();
    public virtual T GetProperty(BindingContext context);
}
public abstract class System.ServiceModel.Channels.MessageFault : object {
    public string Actor { get; }
    public FaultCode Code { get; }
    public bool HasDetail { get; }
    public string Node { get; }
    public FaultReason Reason { get; }
    public virtual string get_Actor();
    public abstract virtual FaultCode get_Code();
    public abstract virtual bool get_HasDetail();
    public virtual string get_Node();
    public abstract virtual FaultReason get_Reason();
    public static MessageFault CreateFault(Message message, int maxBufferSize);
    public T GetDetail();
    public T GetDetail(XmlObjectSerializer serializer);
    public XmlDictionaryReader GetReaderAtDetailContents();
    protected virtual XmlDictionaryReader OnGetReaderAtDetailContents();
    protected virtual void OnWriteDetail(XmlDictionaryWriter writer, EnvelopeVersion version);
    protected abstract virtual void OnWriteDetailContents(XmlDictionaryWriter writer);
    protected virtual void OnWriteStartDetail(XmlDictionaryWriter writer, EnvelopeVersion version);
}
public abstract class System.ServiceModel.Channels.MessageHeader : MessageHeaderInfo {
    public string Actor { get; }
    public bool IsReferenceParameter { get; }
    public bool MustUnderstand { get; }
    public bool Relay { get; }
    public virtual string get_Actor();
    public virtual bool get_IsReferenceParameter();
    public virtual bool get_MustUnderstand();
    public virtual bool get_Relay();
    public static MessageHeader CreateHeader(string name, string ns, object value);
    public static MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand);
    public static MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand, string actor);
    public static MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand, string actor, bool relay);
    public static MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer);
    public static MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand);
    public static MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand, string actor);
    public static MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand, string actor, bool relay);
    public virtual bool IsMessageVersionSupported(MessageVersion messageVersion);
    protected abstract virtual void OnWriteHeaderContents(XmlDictionaryWriter writer, MessageVersion messageVersion);
    protected virtual void OnWriteStartHeader(XmlDictionaryWriter writer, MessageVersion messageVersion);
    public virtual string ToString();
    public void WriteHeader(XmlDictionaryWriter writer, MessageVersion messageVersion);
    public void WriteHeader(XmlWriter writer, MessageVersion messageVersion);
    protected void WriteHeaderAttributes(XmlDictionaryWriter writer, MessageVersion messageVersion);
    public void WriteHeaderContents(XmlDictionaryWriter writer, MessageVersion messageVersion);
    public void WriteStartHeader(XmlDictionaryWriter writer, MessageVersion messageVersion);
}
public abstract class System.ServiceModel.Channels.MessageHeaderInfo : object {
    public string Actor { get; }
    public bool IsReferenceParameter { get; }
    public bool MustUnderstand { get; }
    public string Name { get; }
    public string Namespace { get; }
    public bool Relay { get; }
    public abstract virtual string get_Actor();
    public abstract virtual bool get_IsReferenceParameter();
    public abstract virtual bool get_MustUnderstand();
    public abstract virtual string get_Name();
    public abstract virtual string get_Namespace();
    public abstract virtual bool get_Relay();
}
[DefaultMemberAttribute("Item")]
public class System.ServiceModel.Channels.MessageHeaders : object {
    public string Action { get; public set; }
    public int Count { get; }
    public EndpointAddress FaultTo { get; public set; }
    public EndpointAddress From { get; public set; }
    public MessageHeaderInfo Item { get; }
    public UniqueId MessageId { get; public set; }
    public MessageVersion MessageVersion { get; }
    public UnderstoodHeaders UnderstoodHeaders { get; }
    public UniqueId RelatesTo { get; public set; }
    public EndpointAddress ReplyTo { get; public set; }
    public Uri To { get; public set; }
    public MessageHeaders(MessageHeaders collection);
    public MessageHeaders(MessageVersion version);
    public MessageHeaders(MessageVersion version, int initialSize);
    public string get_Action();
    public void set_Action(string value);
    public int get_Count();
    public EndpointAddress get_FaultTo();
    public void set_FaultTo(EndpointAddress value);
    public EndpointAddress get_From();
    public void set_From(EndpointAddress value);
    public MessageHeaderInfo get_Item(int index);
    public UniqueId get_MessageId();
    public void set_MessageId(UniqueId value);
    public MessageVersion get_MessageVersion();
    public UnderstoodHeaders get_UnderstoodHeaders();
    public UniqueId get_RelatesTo();
    public void set_RelatesTo(UniqueId value);
    public EndpointAddress get_ReplyTo();
    public void set_ReplyTo(EndpointAddress value);
    public Uri get_To();
    public void set_To(Uri value);
    public void Add(MessageHeader header);
    public void Clear();
    public void CopyHeaderFrom(Message message, int headerIndex);
    public void CopyHeaderFrom(MessageHeaders collection, int headerIndex);
    public void CopyHeadersFrom(Message message);
    public void CopyHeadersFrom(MessageHeaders collection);
    public void CopyTo(MessageHeaderInfo[] array, int index);
    public int FindHeader(string name, string ns);
    public int FindHeader(string name, string ns, String[] actors);
    public sealed virtual IEnumerator`1<MessageHeaderInfo> GetEnumerator();
    public T GetHeader(int index);
    public T GetHeader(int index, XmlObjectSerializer serializer);
    public T GetHeader(string name, string ns);
    public T GetHeader(string name, string ns, XmlObjectSerializer serializer);
    public T GetHeader(string name, string ns, String[] actors);
    public XmlDictionaryReader GetReaderAtHeader(int headerIndex);
    public bool HaveMandatoryHeadersBeenUnderstood();
    public bool HaveMandatoryHeadersBeenUnderstood(String[] actors);
    public void Insert(int headerIndex, MessageHeader header);
    public void RemoveAll(string name, string ns);
    public void RemoveAt(int headerIndex);
    public void SetAction(XmlDictionaryString action);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void WriteHeader(int headerIndex, XmlDictionaryWriter writer);
    public void WriteHeader(int headerIndex, XmlWriter writer);
    public void WriteHeaderContents(int headerIndex, XmlDictionaryWriter writer);
    public void WriteHeaderContents(int headerIndex, XmlWriter writer);
    public void WriteStartHeader(int headerIndex, XmlDictionaryWriter writer);
    public void WriteStartHeader(int headerIndex, XmlWriter writer);
}
[DefaultMemberAttribute("Item")]
public class System.ServiceModel.Channels.MessageProperties : object {
    public bool AllowOutputBatching { get; public set; }
    public int Count { get; }
    public MessageEncoder Encoder { get; public set; }
    public bool IsFixedSize { get; }
    public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.IsReadOnly { get; }
    public SecurityMessageProperty Security { get; public set; }
    public ICollection`1<object> Values { get; }
    public Uri Via { get; public set; }
    public MessageProperties(MessageProperties properties);
    public bool get_AllowOutputBatching();
    public void set_AllowOutputBatching(bool value);
    public sealed virtual int get_Count();
    public MessageEncoder get_Encoder();
    public void set_Encoder(MessageEncoder value);
    public bool get_IsFixedSize();
    public sealed virtual object get_Item(string name);
    public sealed virtual void set_Item(string name, object value);
    public sealed virtual ICollection`1<string> get_Keys();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_IsReadOnly();
    public SecurityMessageProperty get_Security();
    public void set_Security(SecurityMessageProperty value);
    public sealed virtual ICollection`1<object> get_Values();
    public Uri get_Via();
    public void set_Via(Uri value);
    public sealed virtual void Add(string name, object property);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(string name);
    public void CopyProperties(MessageProperties properties);
    public sealed virtual void Dispose();
    public sealed virtual bool Remove(string name);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Add(KeyValuePair`2<string, object> pair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Contains(KeyValuePair`2<string, object> pair);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.CopyTo(KeyValuePair`2[] array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Remove(KeyValuePair`2<string, object> pair);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool TryGetValue(string name, Object& value);
}
public enum System.ServiceModel.Channels.MessageState : Enum {
    public int value__;
    public static MessageState Closed;
    public static MessageState Copied;
    public static MessageState Created;
    public static MessageState Read;
    public static MessageState Written;
}
public class System.ServiceModel.Channels.MessageVersion : object {
    public AddressingVersion Addressing { get; }
    public static MessageVersion Default { get; }
    public EnvelopeVersion Envelope { get; }
    public static MessageVersion None { get; }
    public static MessageVersion Soap11 { get; }
    public static MessageVersion Soap11WSAddressing10 { get; }
    public static MessageVersion Soap11WSAddressingAugust2004 { get; }
    public static MessageVersion Soap12 { get; }
    public static MessageVersion Soap12WSAddressing10 { get; }
    public static MessageVersion Soap12WSAddressingAugust2004 { get; }
    public AddressingVersion get_Addressing();
    public static MessageVersion get_Default();
    public EnvelopeVersion get_Envelope();
    public static MessageVersion get_None();
    public static MessageVersion get_Soap11();
    public static MessageVersion get_Soap11WSAddressing10();
    public static MessageVersion get_Soap11WSAddressingAugust2004();
    public static MessageVersion get_Soap12();
    public static MessageVersion get_Soap12WSAddressing10();
    public static MessageVersion get_Soap12WSAddressingAugust2004();
    public static MessageVersion CreateVersion(EnvelopeVersion envelopeVersion);
    public static MessageVersion CreateVersion(EnvelopeVersion envelopeVersion, AddressingVersion addressingVersion);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.ServiceModel.Channels.MtomMessageEncodingBindingElement : MessageEncodingBindingElement {
    [CompilerGeneratedAttribute]
private int <MaxReadPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxWritePoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlDictionaryReaderQuotas <ReaderQuotas>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <WriteEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageVersion <MessageVersion>k__BackingField;
    [DefaultValueAttribute("64")]
public int MaxReadPoolSize { get; public set; }
    [DefaultValueAttribute("16")]
public int MaxWritePoolSize { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    [DefaultValueAttribute("65536")]
public int MaxBufferSize { get; public set; }
    public Encoding WriteEncoding { get; public set; }
    public MessageVersion MessageVersion { get; public set; }
    public MtomMessageEncodingBindingElement(MessageVersion messageVersion, Encoding writeEncoding);
    [CompilerGeneratedAttribute]
public int get_MaxReadPoolSize();
    [CompilerGeneratedAttribute]
public void set_MaxReadPoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxWritePoolSize();
    [CompilerGeneratedAttribute]
public void set_MaxWritePoolSize(int value);
    [CompilerGeneratedAttribute]
public XmlDictionaryReaderQuotas get_ReaderQuotas();
    [CompilerGeneratedAttribute]
public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    [CompilerGeneratedAttribute]
public int get_MaxBufferSize();
    [CompilerGeneratedAttribute]
public void set_MaxBufferSize(int value);
    [CompilerGeneratedAttribute]
public Encoding get_WriteEncoding();
    [CompilerGeneratedAttribute]
public void set_WriteEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public virtual MessageVersion get_MessageVersion();
    [CompilerGeneratedAttribute]
public virtual void set_MessageVersion(MessageVersion value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual BindingElement Clone();
    public virtual MessageEncoderFactory CreateMessageEncoderFactory();
    public virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.Channels.ReliableSessionBindingElement : BindingElement {
    [CompilerGeneratedAttribute]
private TimeSpan <AcknowledgementInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlowControlEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InactivityTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxPendingChannels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxTransferWindowSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ordered>k__BackingField;
    [CompilerGeneratedAttribute]
private ReliableMessagingVersion <ReliableMessagingVersion>k__BackingField;
    public TimeSpan AcknowledgementInterval { get; public set; }
    public bool FlowControlEnabled { get; public set; }
    public TimeSpan InactivityTimeout { get; public set; }
    public int MaxPendingChannels { get; public set; }
    public int MaxRetryCount { get; public set; }
    public int MaxTransferWindowSize { get; public set; }
    public bool Ordered { get; public set; }
    public ReliableMessagingVersion ReliableMessagingVersion { get; public set; }
    public ReliableSessionBindingElement(bool ordered);
    [CompilerGeneratedAttribute]
public TimeSpan get_AcknowledgementInterval();
    [CompilerGeneratedAttribute]
public void set_AcknowledgementInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_FlowControlEnabled();
    [CompilerGeneratedAttribute]
public void set_FlowControlEnabled(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InactivityTimeout();
    [CompilerGeneratedAttribute]
public void set_InactivityTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxPendingChannels();
    [CompilerGeneratedAttribute]
public void set_MaxPendingChannels(int value);
    [CompilerGeneratedAttribute]
public int get_MaxRetryCount();
    [CompilerGeneratedAttribute]
public void set_MaxRetryCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaxTransferWindowSize();
    [CompilerGeneratedAttribute]
public void set_MaxTransferWindowSize(int value);
    [CompilerGeneratedAttribute]
public bool get_Ordered();
    [CompilerGeneratedAttribute]
public void set_Ordered(bool value);
    [CompilerGeneratedAttribute]
public ReliableMessagingVersion get_ReliableMessagingVersion();
    [CompilerGeneratedAttribute]
public void set_ReliableMessagingVersion(ReliableMessagingVersion value);
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
}
public abstract class System.ServiceModel.Channels.RequestContext : object {
    public Message RequestMessage { get; }
    public abstract virtual Message get_RequestMessage();
    public abstract virtual void Abort();
    public abstract virtual IAsyncResult BeginReply(Message message, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginReply(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual void Close();
    public abstract virtual void Close(TimeSpan timeout);
    protected virtual void Dispose(bool disposing);
    public abstract virtual void EndReply(IAsyncResult result);
    public abstract virtual void Reply(Message message);
    public abstract virtual void Reply(Message message, TimeSpan timeout);
    private sealed virtual override void System.IDisposable.Dispose();
}
public abstract class System.ServiceModel.Channels.SecurityBindingElement : BindingElement {
    public SupportingTokenParameters EndpointSupportingTokenParameters { get; }
    public bool IncludeTimestamp { get; public set; }
    public SecurityAlgorithmSuite DefaultAlgorithmSuite { get; public set; }
    public LocalClientSecuritySettings LocalClientSettings { get; }
    public MessageSecurityVersion MessageSecurityVersion { get; public set; }
    public SecurityHeaderLayout SecurityHeaderLayout { get; public set; }
    public SecurityKeyEntropyMode KeyEntropyMode { get; public set; }
    public bool EnableUnsecuredResponse { get; public set; }
    public SupportingTokenParameters get_EndpointSupportingTokenParameters();
    public bool get_IncludeTimestamp();
    public void set_IncludeTimestamp(bool value);
    public SecurityAlgorithmSuite get_DefaultAlgorithmSuite();
    public void set_DefaultAlgorithmSuite(SecurityAlgorithmSuite value);
    public LocalClientSecuritySettings get_LocalClientSettings();
    public MessageSecurityVersion get_MessageSecurityVersion();
    public void set_MessageSecurityVersion(MessageSecurityVersion value);
    public SecurityHeaderLayout get_SecurityHeaderLayout();
    public void set_SecurityHeaderLayout(SecurityHeaderLayout value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    protected abstract virtual IChannelFactory`1<TChannel> BuildChannelFactoryCore(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public static SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity);
    public static TransportSecurityBindingElement CreateUserNameOverTransportBindingElement();
    public static TransportSecurityBindingElement CreateIssuedTokenOverTransportBindingElement(IssuedSecurityTokenParameters issuedTokenParameters);
    public static TransportSecurityBindingElement CreateCertificateOverTransportBindingElement();
    public static TransportSecurityBindingElement CreateCertificateOverTransportBindingElement(MessageSecurityVersion version);
    public virtual T GetProperty(BindingContext context);
    public virtual string ToString();
    public SecurityKeyEntropyMode get_KeyEntropyMode();
    public void set_KeyEntropyMode(SecurityKeyEntropyMode value);
    public bool get_EnableUnsecuredResponse();
    public void set_EnableUnsecuredResponse(bool value);
}
public enum System.ServiceModel.Channels.SecurityHeaderLayout : Enum {
    public int value__;
    public static SecurityHeaderLayout Lax;
    public static SecurityHeaderLayout Strict;
}
public class System.ServiceModel.Channels.TextMessageEncodingBindingElement : MessageEncodingBindingElement {
    public MessageVersion MessageVersion { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    public Encoding WriteEncoding { get; public set; }
    public TextMessageEncodingBindingElement(MessageVersion messageVersion, Encoding writeEncoding);
    public virtual MessageVersion get_MessageVersion();
    public virtual void set_MessageVersion(MessageVersion value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    public Encoding get_WriteEncoding();
    public void set_WriteEncoding(Encoding value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual BindingElement Clone();
    public virtual MessageEncoderFactory CreateMessageEncoderFactory();
    public virtual T GetProperty(BindingContext context);
}
public abstract class System.ServiceModel.Channels.TransportBindingElement : BindingElement {
    [DefaultValueAttribute("False")]
public bool ManualAddressing { get; public set; }
    [DefaultValueAttribute("65536")]
public long MaxReceivedMessageSize { get; public set; }
    [DefaultValueAttribute("524288")]
public long MaxBufferPoolSize { get; public set; }
    public string Scheme { get; }
    protected TransportBindingElement(TransportBindingElement elementToBeCloned);
    public virtual bool get_ManualAddressing();
    public virtual void set_ManualAddressing(bool value);
    public virtual long get_MaxReceivedMessageSize();
    public virtual void set_MaxReceivedMessageSize(long value);
    public virtual long get_MaxBufferPoolSize();
    public virtual void set_MaxBufferPoolSize(long value);
    public abstract virtual string get_Scheme();
    public virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.Channels.TransportSecurityBindingElement : SecurityBindingElement {
    protected virtual IChannelFactory`1<TChannel> BuildChannelFactoryCore(BindingContext context);
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.Channels.UnderstoodHeaders : object {
    public void Add(MessageHeaderInfo headerInfo);
    public bool Contains(MessageHeaderInfo headerInfo);
    public sealed virtual IEnumerator`1<MessageHeaderInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Remove(MessageHeaderInfo headerInfo);
}
public class System.ServiceModel.ChannelTerminatedException : CommunicationException {
    public ChannelTerminatedException(string message);
    public ChannelTerminatedException(string message, Exception innerException);
    protected ChannelTerminatedException(SerializationInfo info, StreamingContext context);
}
public abstract class System.ServiceModel.ClientBase`1 : object {
    protected TChannel Channel { get; }
    public static CacheSetting CacheSetting { get; public set; }
    public ChannelFactory`1<TChannel> ChannelFactory { get; }
    public ClientCredentials ClientCredentials { get; }
    public ServiceEndpoint Endpoint { get; }
    public IClientChannel InnerChannel { get; }
    public CommunicationState State { get; }
    protected ClientBase`1(Binding binding, EndpointAddress remoteAddress);
    protected ClientBase`1(ServiceEndpoint endpoint);
    protected TChannel get_Channel();
    public static CacheSetting get_CacheSetting();
    public static void set_CacheSetting(CacheSetting value);
    public ChannelFactory`1<TChannel> get_ChannelFactory();
    public ClientCredentials get_ClientCredentials();
    public ServiceEndpoint get_Endpoint();
    public IClientChannel get_InnerChannel();
    public sealed virtual CommunicationState get_State();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opening(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opening(EventHandler value);
    public sealed virtual void Abort();
    public void Close();
    public void Open();
    protected virtual TChannel CreateChannel();
    protected T GetDefaultValueForInitialization();
    protected void InvokeAsync(BeginOperationDelegate<TChannel> beginOperationDelegate, Object[] inValues, EndOperationDelegate<TChannel> endOperationDelegate, SendOrPostCallback operationCompletedCallback, object userState);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close(TimeSpan timeout);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndClose(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndOpen(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open(TimeSpan timeout);
    private sealed virtual override void System.IDisposable.Dispose();
    public Task CloseAsync();
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
}
public class System.ServiceModel.ClientCredentialsSecurityTokenManager : SecurityTokenManager {
    public ClientCredentials ClientCredentials { get; }
    public ClientCredentialsSecurityTokenManager(ClientCredentials clientCredentials);
    public ClientCredentials get_ClientCredentials();
    public virtual SecurityTokenProvider CreateSecurityTokenProvider(SecurityTokenRequirement tokenRequirement);
    public virtual SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityTokenVersion version);
    public virtual SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, SecurityTokenResolver& outOfBandTokenResolver);
}
public class System.ServiceModel.CommunicationException : Exception {
    public CommunicationException(string message);
    public CommunicationException(string message, Exception innerException);
    protected CommunicationException(SerializationInfo info, StreamingContext context);
}
public class System.ServiceModel.CommunicationObjectAbortedException : CommunicationException {
    public CommunicationObjectAbortedException(string message);
    public CommunicationObjectAbortedException(string message, Exception innerException);
    protected CommunicationObjectAbortedException(SerializationInfo info, StreamingContext context);
}
public class System.ServiceModel.CommunicationObjectFaultedException : CommunicationException {
    public CommunicationObjectFaultedException(string message);
    public CommunicationObjectFaultedException(string message, Exception innerException);
    protected CommunicationObjectFaultedException(SerializationInfo info, StreamingContext context);
}
public enum System.ServiceModel.CommunicationState : Enum {
    public int value__;
    public static CommunicationState Closed;
    public static CommunicationState Closing;
    public static CommunicationState Created;
    public static CommunicationState Faulted;
    public static CommunicationState Opened;
    public static CommunicationState Opening;
}
public enum System.ServiceModel.ConcurrencyMode : Enum {
    public int value__;
    public static ConcurrencyMode Single;
    [ObsoleteAttribute]
public static ConcurrencyMode Reentrant;
    public static ConcurrencyMode Multiple;
}
[AttributeUsageAttribute("1092")]
public class System.ServiceModel.DataContractFormatAttribute : Attribute {
    public OperationFormatStyle Style { get; public set; }
    public OperationFormatStyle get_Style();
    public void set_Style(OperationFormatStyle value);
}
public class System.ServiceModel.DeliveryRequirementsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private QueuedDeliveryRequirementsMode <QueuedDeliveryRequirements>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireOrderedDelivery>k__BackingField;
    public QueuedDeliveryRequirementsMode QueuedDeliveryRequirements { get; public set; }
    public bool RequireOrderedDelivery { get; public set; }
    [CompilerGeneratedAttribute]
public QueuedDeliveryRequirementsMode get_QueuedDeliveryRequirements();
    [CompilerGeneratedAttribute]
public void set_QueuedDeliveryRequirements(QueuedDeliveryRequirementsMode value);
    [CompilerGeneratedAttribute]
public bool get_RequireOrderedDelivery();
    [CompilerGeneratedAttribute]
public void set_RequireOrderedDelivery(bool value);
    private sealed virtual override void System.ServiceModel.Description.IContractBehavior.AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime);
    private sealed virtual override void System.ServiceModel.Description.IContractBehavior.Validate(ContractDescription contractDescription, ServiceEndpoint endpoint);
}
public class System.ServiceModel.Description.CallbackDebugBehavior : object {
    public bool IncludeExceptionDetailInFaults { get; public set; }
    public CallbackDebugBehavior(bool includeExceptionDetailInFaults);
    public bool get_IncludeExceptionDetailInFaults();
    public void set_IncludeExceptionDetailInFaults(bool value);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint serviceEndpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint);
}
public class System.ServiceModel.Description.ClientCredentials : SecurityCredentialsManager {
    public X509CertificateInitiatorClientCredential ClientCertificate { get; }
    public HttpDigestClientCredential HttpDigest { get; }
    public X509CertificateRecipientClientCredential ServiceCertificate { get; }
    public UserNamePasswordClientCredential UserName { get; }
    public WindowsClientCredential Windows { get; }
    protected ClientCredentials(ClientCredentials other);
    public X509CertificateInitiatorClientCredential get_ClientCertificate();
    public HttpDigestClientCredential get_HttpDigest();
    public X509CertificateRecipientClientCredential get_ServiceCertificate();
    public UserNamePasswordClientCredential get_UserName();
    public WindowsClientCredential get_Windows();
    public virtual SecurityTokenManager CreateSecurityTokenManager();
    public virtual void ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime behavior);
    public ClientCredentials Clone();
    protected virtual ClientCredentials CloneCore();
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint serviceEndpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint);
}
public class System.ServiceModel.Description.ContractDescription : object {
    public Type CallbackContractType { get; public set; }
    [DefaultValueAttribute("")]
public string ConfigurationName { get; public set; }
    public KeyedCollection`2<Type, IContractBehavior> ContractBehaviors { get; }
    public Type ContractType { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public OperationDescriptionCollection Operations { get; }
    public ContractDescription(string name);
    public ContractDescription(string name, string ns);
    public Type get_CallbackContractType();
    public void set_CallbackContractType(Type value);
    public string get_ConfigurationName();
    public void set_ConfigurationName(string value);
    public KeyedCollection`2<Type, IContractBehavior> get_ContractBehaviors();
    public Type get_ContractType();
    public void set_ContractType(Type value);
    public static ContractDescription GetContract(Type contractType);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public OperationDescriptionCollection get_Operations();
}
public class System.ServiceModel.Description.DataContractSerializerOperationBehavior : object {
    public DataContractFormatAttribute DataContractFormatAttribute { get; }
    public DataContractResolver DataContractResolver { get; public set; }
    public int MaxItemsInObjectGraph { get; public set; }
    public ISerializationSurrogateProvider SerializationSurrogateProvider { get; public set; }
    public DataContractSerializerOperationBehavior(OperationDescription operation);
    public DataContractSerializerOperationBehavior(OperationDescription operation, DataContractFormatAttribute dataContractFormatAttribute);
    public DataContractFormatAttribute get_DataContractFormatAttribute();
    public DataContractResolver get_DataContractResolver();
    public void set_DataContractResolver(DataContractResolver value);
    public int get_MaxItemsInObjectGraph();
    public void set_MaxItemsInObjectGraph(int value);
    public virtual XmlObjectSerializer CreateSerializer(Type type, string name, string ns, IList`1<Type> knownTypes);
    public virtual XmlObjectSerializer CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList`1<Type> knownTypes);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription description);
    public ISerializationSurrogateProvider get_SerializationSurrogateProvider();
    public void set_SerializationSurrogateProvider(ISerializationSurrogateProvider value);
}
public class System.ServiceModel.Description.FaultDescription : object {
    public string Action { get; }
    public Type DetailType { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public FaultDescription(string action);
    public string get_Action();
    public Type get_DetailType();
    public void set_DetailType(Type value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public class System.ServiceModel.Description.FaultDescriptionCollection : Collection`1<FaultDescription> {
}
public interface System.ServiceModel.Description.IContractBehavior {
    public abstract virtual void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public abstract virtual void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public abstract virtual void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime);
    public abstract virtual void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint);
}
public interface System.ServiceModel.Description.IEndpointBehavior {
    public abstract virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public abstract virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public abstract virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public abstract virtual void Validate(ServiceEndpoint endpoint);
}
public interface System.ServiceModel.Description.IOperationBehavior {
    public abstract virtual void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    public abstract virtual void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    public abstract virtual void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    public abstract virtual void Validate(OperationDescription operationDescription);
}
public class System.ServiceModel.Description.MessageBodyDescription : object {
    public MessagePartDescriptionCollection Parts { get; }
    [DefaultValueAttribute("")]
public MessagePartDescription ReturnValue { get; public set; }
    [DefaultValueAttribute("")]
public string WrapperName { get; public set; }
    [DefaultValueAttribute("")]
public string WrapperNamespace { get; public set; }
    public MessagePartDescriptionCollection get_Parts();
    public MessagePartDescription get_ReturnValue();
    public void set_ReturnValue(MessagePartDescription value);
    public string get_WrapperName();
    public void set_WrapperName(string value);
    public string get_WrapperNamespace();
    public void set_WrapperNamespace(string value);
}
public class System.ServiceModel.Description.MessageDescription : object {
    public string Action { get; }
    public MessageBodyDescription Body { get; }
    public MessageDirection Direction { get; }
    public MessageHeaderDescriptionCollection Headers { get; }
    [DefaultValueAttribute("")]
public Type MessageType { get; public set; }
    public MessagePropertyDescriptionCollection Properties { get; }
    public MessageDescription(string action, MessageDirection direction);
    public string get_Action();
    public MessageBodyDescription get_Body();
    public MessageDirection get_Direction();
    public MessageHeaderDescriptionCollection get_Headers();
    public Type get_MessageType();
    public void set_MessageType(Type value);
    public MessagePropertyDescriptionCollection get_Properties();
}
public class System.ServiceModel.Description.MessageDescriptionCollection : Collection`1<MessageDescription> {
    public MessageDescription Find(string action);
    public Collection`1<MessageDescription> FindAll(string action);
}
public enum System.ServiceModel.Description.MessageDirection : Enum {
    public int value__;
    public static MessageDirection Input;
    public static MessageDirection Output;
}
public class System.ServiceModel.Description.MessageHeaderDescription : MessagePartDescription {
    [DefaultValueAttribute("")]
public string Actor { get; public set; }
    [DefaultValueAttribute("False")]
public bool MustUnderstand { get; public set; }
    [DefaultValueAttribute("False")]
public bool Relay { get; public set; }
    [DefaultValueAttribute("False")]
public bool TypedHeader { get; public set; }
    public MessageHeaderDescription(string name, string ns);
    public string get_Actor();
    public void set_Actor(string value);
    public bool get_MustUnderstand();
    public void set_MustUnderstand(bool value);
    public bool get_Relay();
    public void set_Relay(bool value);
    public bool get_TypedHeader();
    public void set_TypedHeader(bool value);
}
public class System.ServiceModel.Description.MessageHeaderDescriptionCollection : KeyedCollection`2<XmlQualifiedName, MessageHeaderDescription> {
    protected virtual XmlQualifiedName GetKeyForItem(MessageHeaderDescription item);
}
public class System.ServiceModel.Description.MessagePartDescription : object {
    public int Index { get; public set; }
    public MemberInfo MemberInfo { get; public set; }
    [DefaultValueAttribute("False")]
public bool Multiple { get; public set; }
    public string Name { get; }
    public string Namespace { get; }
    public Type Type { get; public set; }
    public MessagePartDescription(string name, string ns);
    public int get_Index();
    public void set_Index(int value);
    public MemberInfo get_MemberInfo();
    public void set_MemberInfo(MemberInfo value);
    public bool get_Multiple();
    public void set_Multiple(bool value);
    public string get_Name();
    public string get_Namespace();
    public Type get_Type();
    public void set_Type(Type value);
}
public class System.ServiceModel.Description.MessagePartDescriptionCollection : KeyedCollection`2<XmlQualifiedName, MessagePartDescription> {
    protected virtual XmlQualifiedName GetKeyForItem(MessagePartDescription item);
}
public class System.ServiceModel.Description.MessagePropertyDescription : MessagePartDescription {
    public MessagePropertyDescription(string name);
}
public class System.ServiceModel.Description.MessagePropertyDescriptionCollection : KeyedCollection`2<string, MessagePropertyDescription> {
    protected virtual string GetKeyForItem(MessagePropertyDescription item);
}
public class System.ServiceModel.Description.OperationDescription : object {
    [EditorBrowsableAttribute("1")]
public KeyedByTypeCollection`1<IOperationBehavior> Behaviors { get; }
    public ContractDescription DeclaringContract { get; public set; }
    public FaultDescriptionCollection Faults { get; }
    public bool IsOneWay { get; }
    public Collection`1<Type> KnownTypes { get; }
    public MessageDescriptionCollection Messages { get; }
    public string Name { get; }
    public KeyedCollection`2<Type, IOperationBehavior> OperationBehaviors { get; }
    public MethodInfo TaskMethod { get; public set; }
    public MethodInfo BeginMethod { get; public set; }
    public MethodInfo EndMethod { get; public set; }
    public MethodInfo SyncMethod { get; public set; }
    public OperationDescription(string name, ContractDescription declaringContract);
    public KeyedByTypeCollection`1<IOperationBehavior> get_Behaviors();
    public ContractDescription get_DeclaringContract();
    public void set_DeclaringContract(ContractDescription value);
    public FaultDescriptionCollection get_Faults();
    public bool get_IsOneWay();
    public Collection`1<Type> get_KnownTypes();
    public MessageDescriptionCollection get_Messages();
    public string get_Name();
    public KeyedCollection`2<Type, IOperationBehavior> get_OperationBehaviors();
    public MethodInfo get_TaskMethod();
    public void set_TaskMethod(MethodInfo value);
    public MethodInfo get_BeginMethod();
    public void set_BeginMethod(MethodInfo value);
    public MethodInfo get_EndMethod();
    public void set_EndMethod(MethodInfo value);
    public MethodInfo get_SyncMethod();
    public void set_SyncMethod(MethodInfo value);
}
public class System.ServiceModel.Description.OperationDescriptionCollection : Collection`1<OperationDescription> {
    public OperationDescription Find(string name);
    public Collection`1<OperationDescription> FindAll(string name);
    protected virtual void InsertItem(int index, OperationDescription item);
    protected virtual void SetItem(int index, OperationDescription item);
}
public class System.ServiceModel.Description.ServiceEndpoint : object {
    public EndpointAddress Address { get; public set; }
    public Binding Binding { get; public set; }
    public ContractDescription Contract { get; public set; }
    public KeyedCollection`2<Type, IEndpointBehavior> EndpointBehaviors { get; }
    public string Name { get; public set; }
    public ServiceEndpoint(ContractDescription contract);
    public ServiceEndpoint(ContractDescription contract, Binding binding, EndpointAddress address);
    public EndpointAddress get_Address();
    public void set_Address(EndpointAddress value);
    public Binding get_Binding();
    public void set_Binding(Binding value);
    public ContractDescription get_Contract();
    public void set_Contract(ContractDescription value);
    public KeyedCollection`2<Type, IEndpointBehavior> get_EndpointBehaviors();
    public string get_Name();
    public void set_Name(string value);
}
public abstract class System.ServiceModel.Description.TypedMessageConverter : object {
    public static TypedMessageConverter Create(Type messageContract, string action);
    public static TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace);
    public static TypedMessageConverter Create(Type messageContract, string action, XmlSerializerFormatAttribute formatterAttribute);
    public static TypedMessageConverter Create(Type messageContract, string action, DataContractFormatAttribute formatterAttribute);
    public static TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace, XmlSerializerFormatAttribute formatterAttribute);
    public static TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace, DataContractFormatAttribute formatterAttribute);
    public abstract virtual Message ToMessage(object typedMessage);
    public abstract virtual Message ToMessage(object typedMessage, MessageVersion version);
    public abstract virtual object FromMessage(Message message);
}
public class System.ServiceModel.Description.XmlSerializerOperationBehavior : object {
    public XmlSerializerFormatAttribute XmlSerializerFormatAttribute { get; }
    public XmlSerializerOperationBehavior(OperationDescription operation);
    public XmlSerializerOperationBehavior(OperationDescription operation, XmlSerializerFormatAttribute attribute);
    public XmlSerializerFormatAttribute get_XmlSerializerFormatAttribute();
    public Collection`1<XmlMapping> GetXmlMappings();
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription description);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy);
}
public class System.ServiceModel.Dispatcher.ChannelDispatcher : object {
    public bool IncludeExceptionDetailInFaults { get; public set; }
    public bool get_IncludeExceptionDetailInFaults();
    public void set_IncludeExceptionDetailInFaults(bool value);
}
public class System.ServiceModel.Dispatcher.ClientOperation : object {
    public string Action { get; }
    public SynchronizedCollection`1<FaultContractInfo> FaultContractInfos { get; }
    public ICollection`1<IParameterInspector> ClientParameterInspectors { get; }
    public bool DeserializeReply { get; public set; }
    public IClientMessageFormatter Formatter { get; public set; }
    public bool IsOneWay { get; public set; }
    public string Name { get; }
    public ClientRuntime Parent { get; }
    public string ReplyAction { get; }
    public bool SerializeRequest { get; public set; }
    public MethodInfo TaskMethod { get; public set; }
    public Type TaskTResult { get; public set; }
    public MethodInfo BeginMethod { get; public set; }
    public MethodInfo EndMethod { get; public set; }
    public MethodInfo SyncMethod { get; public set; }
    public ClientOperation(ClientRuntime parent, string name, string action);
    public ClientOperation(ClientRuntime parent, string name, string action, string replyAction);
    public string get_Action();
    public SynchronizedCollection`1<FaultContractInfo> get_FaultContractInfos();
    public ICollection`1<IParameterInspector> get_ClientParameterInspectors();
    public bool get_DeserializeReply();
    public void set_DeserializeReply(bool value);
    public IClientMessageFormatter get_Formatter();
    public void set_Formatter(IClientMessageFormatter value);
    public bool get_IsOneWay();
    public void set_IsOneWay(bool value);
    public string get_Name();
    public ClientRuntime get_Parent();
    public string get_ReplyAction();
    public bool get_SerializeRequest();
    public void set_SerializeRequest(bool value);
    public MethodInfo get_TaskMethod();
    public void set_TaskMethod(MethodInfo value);
    public Type get_TaskTResult();
    public void set_TaskTResult(Type value);
    public MethodInfo get_BeginMethod();
    public void set_BeginMethod(MethodInfo value);
    public MethodInfo get_EndMethod();
    public void set_EndMethod(MethodInfo value);
    public MethodInfo get_SyncMethod();
    public void set_SyncMethod(MethodInfo value);
}
public class System.ServiceModel.Dispatcher.ClientRuntime : object {
    public SynchronizedCollection`1<IChannelInitializer> ChannelInitializers { get; }
    public ICollection`1<IClientMessageInspector> ClientMessageInspectors { get; }
    public DispatchRuntime CallbackDispatchRuntime { get; }
    public ICollection`1<ClientOperation> ClientOperations { get; }
    public Type ContractClientType { get; public set; }
    public string ContractName { get; }
    public string ContractNamespace { get; }
    public SynchronizedCollection`1<IInteractiveChannelInitializer> InteractiveChannelInitializers { get; }
    public bool ManualAddressing { get; public set; }
    public int MaxFaultSize { get; public set; }
    public IClientOperationSelector OperationSelector { get; public set; }
    public ClientOperation UnhandledClientOperation { get; }
    public Uri Via { get; public set; }
    public SynchronizedCollection`1<IChannelInitializer> get_ChannelInitializers();
    public ICollection`1<IClientMessageInspector> get_ClientMessageInspectors();
    public DispatchRuntime get_CallbackDispatchRuntime();
    public ICollection`1<ClientOperation> get_ClientOperations();
    public Type get_ContractClientType();
    public void set_ContractClientType(Type value);
    public string get_ContractName();
    public string get_ContractNamespace();
    public SynchronizedCollection`1<IInteractiveChannelInitializer> get_InteractiveChannelInitializers();
    public bool get_ManualAddressing();
    public void set_ManualAddressing(bool value);
    public int get_MaxFaultSize();
    public void set_MaxFaultSize(int value);
    public IClientOperationSelector get_OperationSelector();
    public void set_OperationSelector(IClientOperationSelector value);
    public ClientOperation get_UnhandledClientOperation();
    public Uri get_Via();
    public void set_Via(Uri value);
}
public class System.ServiceModel.Dispatcher.DispatchOperation : object {
    public string Action { get; }
    public bool AutoDisposeParameters { get; public set; }
    public bool DeserializeRequest { get; public set; }
    public bool IsOneWay { get; }
    public string Name { get; }
    public DispatchRuntime Parent { get; }
    public bool SerializeReply { get; public set; }
    public DispatchOperation(DispatchRuntime parent, string name, string action);
    public string get_Action();
    public bool get_AutoDisposeParameters();
    public void set_AutoDisposeParameters(bool value);
    public bool get_DeserializeRequest();
    public void set_DeserializeRequest(bool value);
    public bool get_IsOneWay();
    public string get_Name();
    public DispatchRuntime get_Parent();
    public bool get_SerializeReply();
    public void set_SerializeReply(bool value);
}
public class System.ServiceModel.Dispatcher.DispatchRuntime : object {
    public SynchronizedCollection`1<IDispatchMessageInspector> MessageInspectors { get; }
    public ChannelDispatcher ChannelDispatcher { get; }
    public SynchronizedCollection`1<IDispatchMessageInspector> get_MessageInspectors();
    public ChannelDispatcher get_ChannelDispatcher();
}
public class System.ServiceModel.Dispatcher.EndpointDispatcher : object {
}
public class System.ServiceModel.Dispatcher.FaultContractInfo : object {
    public string Action { get; }
    public Type Detail { get; }
    public FaultContractInfo(string action, Type detail);
    public string get_Action();
    public Type get_Detail();
}
public interface System.ServiceModel.Dispatcher.IChannelInitializer {
    public abstract virtual void Initialize(IClientChannel channel);
}
public interface System.ServiceModel.Dispatcher.IClientMessageFormatter {
    public abstract virtual object DeserializeReply(Message message, Object[] parameters);
    public abstract virtual Message SerializeRequest(MessageVersion messageVersion, Object[] parameters);
}
public interface System.ServiceModel.Dispatcher.IClientMessageInspector {
    public abstract virtual void AfterReceiveReply(Message& reply, object correlationState);
    public abstract virtual object BeforeSendRequest(Message& request, IClientChannel channel);
}
public interface System.ServiceModel.Dispatcher.IClientOperationSelector {
    public bool AreParametersRequiredForSelection { get; }
    public abstract virtual bool get_AreParametersRequiredForSelection();
    public abstract virtual string SelectOperation(MethodBase method, Object[] parameters);
}
public interface System.ServiceModel.Dispatcher.IDispatchMessageInspector {
    public abstract virtual object AfterReceiveRequest(Message& request, IClientChannel channel, InstanceContext instanceContext);
    public abstract virtual void BeforeSendReply(Message& reply, object correlationState);
}
public interface System.ServiceModel.Dispatcher.IInteractiveChannelInitializer {
    public abstract virtual IAsyncResult BeginDisplayInitializationUI(IClientChannel channel, AsyncCallback callback, object state);
    public abstract virtual void EndDisplayInitializationUI(IAsyncResult result);
}
public interface System.ServiceModel.Dispatcher.IParameterInspector {
    public abstract virtual void AfterCall(string operationName, Object[] outputs, object returnValue, object correlationState);
    public abstract virtual object BeforeCall(string operationName, Object[] inputs);
}
public class System.ServiceModel.DnsEndpointIdentity : EndpointIdentity {
    public DnsEndpointIdentity(string dnsName);
}
public class System.ServiceModel.DuplexChannelFactory`1 : ChannelFactory`1<TChannel> {
    public DuplexChannelFactory`1(Type callbackInstanceType);
    public DuplexChannelFactory`1(Type callbackInstanceType, Binding binding);
    public DuplexChannelFactory`1(Type callbackInstanceType, Binding binding, EndpointAddress remoteAddress);
    public DuplexChannelFactory`1(Type callbackInstanceType, Binding binding, string remoteAddress);
    public DuplexChannelFactory`1(Type callbackInstanceType, ServiceEndpoint serviceEndpoint);
    public DuplexChannelFactory`1(InstanceContext callbackInstance, Binding binding);
    public DuplexChannelFactory`1(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress);
    public DuplexChannelFactory`1(InstanceContext callbackInstance, Binding binding, string remoteAddress);
    public virtual TChannel CreateChannel(EndpointAddress address, Uri via);
    public TChannel CreateChannel(InstanceContext callbackInstance);
    public TChannel CreateChannel(InstanceContext callbackInstance, EndpointAddress address);
    public virtual TChannel CreateChannel(InstanceContext callbackInstance, EndpointAddress address, Uri via);
}
public abstract class System.ServiceModel.DuplexClientBase`1 : ClientBase`1<TChannel> {
    protected DuplexClientBase`1(InstanceContext callbackInstance);
    protected DuplexClientBase`1(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress);
}
public class System.ServiceModel.EndpointAddress : object {
    public static Uri AnonymousUri { get; }
    public AddressHeaderCollection Headers { get; }
    public EndpointIdentity Identity { get; }
    public bool IsAnonymous { get; }
    public bool IsNone { get; }
    public static Uri NoneUri { get; }
    public Uri Uri { get; }
    public EndpointAddress(string uri);
    public EndpointAddress(Uri uri, AddressHeader[] addressHeaders);
    public EndpointAddress(Uri uri, EndpointIdentity identity, AddressHeader[] addressHeaders);
    public static Uri get_AnonymousUri();
    public AddressHeaderCollection get_Headers();
    public EndpointIdentity get_Identity();
    public bool get_IsAnonymous();
    public bool get_IsNone();
    public static Uri get_NoneUri();
    public Uri get_Uri();
    public void ApplyTo(Message message);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(EndpointAddress address1, EndpointAddress address2);
    public static bool op_Inequality(EndpointAddress address1, EndpointAddress address2);
    public static EndpointAddress ReadFrom(AddressingVersion addressingVersion, XmlDictionaryReader reader);
    public virtual string ToString();
    public void WriteContentsTo(AddressingVersion addressingVersion, XmlDictionaryWriter writer);
}
public class System.ServiceModel.EndpointAddressBuilder : object {
    public Collection`1<AddressHeader> Headers { get; }
    public EndpointIdentity Identity { get; public set; }
    public Uri Uri { get; public set; }
    public EndpointAddressBuilder(EndpointAddress address);
    public Collection`1<AddressHeader> get_Headers();
    public EndpointIdentity get_Identity();
    public void set_Identity(EndpointIdentity value);
    public Uri get_Uri();
    public void set_Uri(Uri value);
    public EndpointAddress ToEndpointAddress();
}
public abstract class System.ServiceModel.EndpointIdentity : object {
    public Claim IdentityClaim { get; }
    protected void Initialize(Claim identityClaim);
    protected void Initialize(Claim identityClaim, IEqualityComparer`1<Claim> claimComparer);
    public Claim get_IdentityClaim();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static EndpointIdentity CreateIdentity(Claim identity);
}
public class System.ServiceModel.EndpointNotFoundException : CommunicationException {
    public EndpointNotFoundException(string message);
    public EndpointNotFoundException(string message, Exception innerException);
    protected EndpointNotFoundException(SerializationInfo info, StreamingContext context);
}
public class System.ServiceModel.EnvelopeVersion : object {
    public string NextDestinationActorValue { get; }
    public static EnvelopeVersion None { get; }
    public static EnvelopeVersion Soap11 { get; }
    public static EnvelopeVersion Soap12 { get; }
    public string get_NextDestinationActorValue();
    public static EnvelopeVersion get_None();
    public static EnvelopeVersion get_Soap11();
    public static EnvelopeVersion get_Soap12();
    public String[] GetUltimateDestinationActorValues();
    public virtual string ToString();
}
[DataContractAttribute]
public class System.ServiceModel.ExceptionDetail : object {
    [DataMemberAttribute]
public string HelpLink { get; public set; }
    [DataMemberAttribute]
public ExceptionDetail InnerException { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string StackTrace { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    public ExceptionDetail(Exception exception);
    public string get_HelpLink();
    public void set_HelpLink(string value);
    public ExceptionDetail get_InnerException();
    public void set_InnerException(ExceptionDetail value);
    public string get_Message();
    public void set_Message(string value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
    public string get_Type();
    public void set_Type(string value);
    public virtual string ToString();
}
public class System.ServiceModel.ExtensionCollection`1 : SynchronizedCollection`1<IExtension`1<T>> {
    public ExtensionCollection`1(T owner);
    public ExtensionCollection`1(T owner, object syncRoot);
    protected virtual void ClearItems();
    public sealed virtual E Find();
    public sealed virtual Collection`1<E> FindAll();
    protected virtual void InsertItem(int index, IExtension`1<T> item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, IExtension`1<T> item);
}
public class System.ServiceModel.FaultCode : object {
    public bool IsPredefinedFault { get; }
    public bool IsReceiverFault { get; }
    public bool IsSenderFault { get; }
    public string Name { get; }
    public string Namespace { get; }
    public FaultCode SubCode { get; }
    public FaultCode(string name);
    public FaultCode(string name, FaultCode subCode);
    public FaultCode(string name, string ns);
    public FaultCode(string name, string ns, FaultCode subCode);
    public bool get_IsPredefinedFault();
    public bool get_IsReceiverFault();
    public bool get_IsSenderFault();
    public string get_Name();
    public string get_Namespace();
    public FaultCode get_SubCode();
    public static FaultCode CreateSenderFaultCode(FaultCode subCode);
}
[AttributeUsageAttribute("64")]
public class System.ServiceModel.FaultContractAttribute : Attribute {
    public string Action { get; public set; }
    public Type DetailType { get; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public FaultContractAttribute(Type detailType);
    public string get_Action();
    public void set_Action(string value);
    public Type get_DetailType();
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public class System.ServiceModel.FaultException : CommunicationException {
    public string Action { get; }
    public FaultCode Code { get; }
    public string Message { get; }
    public FaultReason Reason { get; }
    public FaultException(string reason);
    public FaultException(MessageFault fault, string action);
    public FaultException(FaultReason reason, FaultCode code, string action);
    protected FaultException(SerializationInfo info, StreamingContext context);
    public string get_Action();
    public FaultCode get_Code();
    public virtual string get_Message();
    public FaultReason get_Reason();
    public static FaultException CreateFault(MessageFault messageFault, string action, Type[] faultDetailTypes);
    public static FaultException CreateFault(MessageFault messageFault, Type[] faultDetailTypes);
    public virtual MessageFault CreateMessageFault();
}
public class System.ServiceModel.FaultException`1 : FaultException {
    public TDetail Detail { get; }
    public FaultException`1(TDetail detail);
    public FaultException`1(TDetail detail, FaultReason reason);
    public FaultException`1(TDetail detail, FaultReason reason, FaultCode code, string action);
    protected FaultException`1(SerializationInfo info, StreamingContext context);
    public TDetail get_Detail();
    public virtual MessageFault CreateMessageFault();
    public virtual string ToString();
}
public class System.ServiceModel.FaultReason : object {
    public FaultReason(IEnumerable`1<FaultReasonText> translations);
    public FaultReason(FaultReasonText translation);
    public FaultReason(string text);
    public FaultReasonText GetMatchingTranslation();
    public FaultReasonText GetMatchingTranslation(CultureInfo cultureInfo);
    public virtual string ToString();
}
public class System.ServiceModel.FaultReasonText : object {
    public string Text { get; }
    public string XmlLang { get; }
    public FaultReasonText(string text);
    public FaultReasonText(string text, string xmlLang);
    public string get_Text();
    public string get_XmlLang();
    public bool Matches(CultureInfo cultureInfo);
}
public enum System.ServiceModel.HostNameComparisonMode : Enum {
    public int value__;
    public static HostNameComparisonMode StrongWildcard;
    public static HostNameComparisonMode Exact;
    public static HostNameComparisonMode WeakWildcard;
}
public interface System.ServiceModel.IClientChannel {
    public bool AllowInitializationUI { get; public set; }
    public bool DidInteractiveInitialization { get; }
    public Uri Via { get; }
    public abstract virtual bool get_AllowInitializationUI();
    public abstract virtual void set_AllowInitializationUI(bool value);
    public abstract virtual bool get_DidInteractiveInitialization();
    public abstract virtual Uri get_Via();
    [CompilerGeneratedAttribute]
public abstract virtual void add_UnknownMessageReceived(EventHandler`1<UnknownMessageReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_UnknownMessageReceived(EventHandler`1<UnknownMessageReceivedEventArgs> value);
    public abstract virtual IAsyncResult BeginDisplayInitializationUI(AsyncCallback callback, object state);
    public abstract virtual void DisplayInitializationUI();
    public abstract virtual void EndDisplayInitializationUI(IAsyncResult result);
}
public interface System.ServiceModel.ICommunicationObject {
    public CommunicationState State { get; }
    public abstract virtual CommunicationState get_State();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closing(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closing(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Faulted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Faulted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Opening(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Opening(EventHandler value);
    public abstract virtual void Abort();
    public abstract virtual IAsyncResult BeginClose(AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginOpen(AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual void Close();
    public abstract virtual void Close(TimeSpan timeout);
    public abstract virtual void EndClose(IAsyncResult result);
    public abstract virtual void EndOpen(IAsyncResult result);
    public abstract virtual void Open();
    public abstract virtual void Open(TimeSpan timeout);
}
public interface System.ServiceModel.IContextChannel {
    public bool AllowOutputBatching { get; public set; }
    public IInputSession InputSession { get; }
    public EndpointAddress LocalAddress { get; }
    public TimeSpan OperationTimeout { get; public set; }
    public IOutputSession OutputSession { get; }
    public EndpointAddress RemoteAddress { get; }
    public string SessionId { get; }
    public abstract virtual bool get_AllowOutputBatching();
    public abstract virtual void set_AllowOutputBatching(bool value);
    public abstract virtual IInputSession get_InputSession();
    public abstract virtual EndpointAddress get_LocalAddress();
    public abstract virtual TimeSpan get_OperationTimeout();
    public abstract virtual void set_OperationTimeout(TimeSpan value);
    public abstract virtual IOutputSession get_OutputSession();
    public abstract virtual EndpointAddress get_RemoteAddress();
    public abstract virtual string get_SessionId();
}
public interface System.ServiceModel.IDefaultCommunicationTimeouts {
    public TimeSpan CloseTimeout { get; }
    public TimeSpan OpenTimeout { get; }
    public TimeSpan ReceiveTimeout { get; }
    public TimeSpan SendTimeout { get; }
    public abstract virtual TimeSpan get_CloseTimeout();
    public abstract virtual TimeSpan get_OpenTimeout();
    public abstract virtual TimeSpan get_ReceiveTimeout();
    public abstract virtual TimeSpan get_SendTimeout();
}
public interface System.ServiceModel.IExtensibleObject`1 {
    public IExtensionCollection`1<T> Extensions { get; }
    public abstract virtual IExtensionCollection`1<T> get_Extensions();
}
public interface System.ServiceModel.IExtension`1 {
    public abstract virtual void Attach(T owner);
    public abstract virtual void Detach(T owner);
}
public interface System.ServiceModel.IExtensionCollection`1 {
    public abstract virtual E Find();
    public abstract virtual Collection`1<E> FindAll();
}
public class System.ServiceModel.InstanceContext : CommunicationObject {
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    public SynchronizationContext SynchronizationContext { get; public set; }
    public IExtensionCollection`1<InstanceContext> Extensions { get; }
    public InstanceContext(object implementation);
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    public SynchronizationContext get_SynchronizationContext();
    public void set_SynchronizationContext(SynchronizationContext value);
    public sealed virtual IExtensionCollection`1<InstanceContext> get_Extensions();
    public object GetServiceInstance(Message message);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnClosed();
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnFaulted();
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnOpened();
    protected virtual void OnOpening();
}
public class System.ServiceModel.InvalidMessageContractException : Exception {
    public InvalidMessageContractException(string message);
    public InvalidMessageContractException(string message, Exception innerException);
    protected InvalidMessageContractException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("384")]
public class System.ServiceModel.MessageBodyMemberAttribute : MessageContractMemberAttribute {
    public int Order { get; public set; }
    public int get_Order();
    public void set_Order(int value);
}
[AttributeUsageAttribute("12")]
public class System.ServiceModel.MessageContractAttribute : Attribute {
    public bool IsWrapped { get; public set; }
    public string WrapperName { get; public set; }
    public string WrapperNamespace { get; public set; }
    public bool get_IsWrapped();
    public void set_IsWrapped(bool value);
    public string get_WrapperName();
    public void set_WrapperName(string value);
    public string get_WrapperNamespace();
    public void set_WrapperNamespace(string value);
}
public abstract class System.ServiceModel.MessageContractMemberAttribute : Attribute {
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public enum System.ServiceModel.MessageCredentialType : Enum {
    public int value__;
    public static MessageCredentialType Certificate;
    public static MessageCredentialType IssuedToken;
    public static MessageCredentialType None;
    public static MessageCredentialType UserName;
    public static MessageCredentialType Windows;
}
public class System.ServiceModel.MessageHeader`1 : object {
    public string Actor { get; public set; }
    public T Content { get; public set; }
    public bool MustUnderstand { get; public set; }
    public bool Relay { get; public set; }
    public MessageHeader`1(T content);
    public MessageHeader`1(T content, bool mustUnderstand, string actor, bool relay);
    public string get_Actor();
    public void set_Actor(string value);
    public T get_Content();
    public void set_Content(T value);
    public bool get_MustUnderstand();
    public void set_MustUnderstand(bool value);
    public bool get_Relay();
    public void set_Relay(bool value);
    public MessageHeader GetUntypedHeader(string name, string ns);
}
[AttributeUsageAttribute("384")]
public class System.ServiceModel.MessageHeaderArrayAttribute : MessageHeaderAttribute {
}
[AttributeUsageAttribute("384")]
public class System.ServiceModel.MessageHeaderAttribute : MessageContractMemberAttribute {
    public bool MustUnderstand { get; public set; }
    public bool get_MustUnderstand();
    public void set_MustUnderstand(bool value);
}
public class System.ServiceModel.MessageHeaderException : ProtocolException {
    public string HeaderName { get; }
    public string HeaderNamespace { get; }
    public bool IsDuplicate { get; }
    public MessageHeaderException(string message);
    public MessageHeaderException(string message, bool isDuplicate);
    public MessageHeaderException(string message, Exception innerException);
    public MessageHeaderException(string message, string headerName, string ns);
    public MessageHeaderException(string message, string headerName, string ns, bool isDuplicate);
    public MessageHeaderException(string message, string headerName, string ns, bool isDuplicate, Exception innerException);
    public MessageHeaderException(string message, string headerName, string ns, Exception innerException);
    protected MessageHeaderException(SerializationInfo info, StreamingContext context);
    public string get_HeaderName();
    public string get_HeaderNamespace();
    public bool get_IsDuplicate();
}
[AttributeUsageAttribute("10240")]
public class System.ServiceModel.MessageParameterAttribute : Attribute {
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("384")]
public class System.ServiceModel.MessagePropertyAttribute : Attribute {
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
public abstract class System.ServiceModel.MessageSecurityVersion : object {
    public BasicSecurityProfileVersion BasicSecurityProfileVersion { get; }
    public SecureConversationVersion SecureConversationVersion { get; }
    public SecurityPolicyVersion SecurityPolicyVersion { get; }
    public SecurityVersion SecurityVersion { get; }
    public TrustVersion TrustVersion { get; }
    public static MessageSecurityVersion WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10 { get; }
    public static MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11 { get; }
    public static MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10 { get; }
    public static MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 { get; }
    public abstract virtual BasicSecurityProfileVersion get_BasicSecurityProfileVersion();
    public SecureConversationVersion get_SecureConversationVersion();
    public abstract virtual SecurityPolicyVersion get_SecurityPolicyVersion();
    public SecurityVersion get_SecurityVersion();
    public TrustVersion get_TrustVersion();
    public static MessageSecurityVersion get_WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10();
    public static MessageSecurityVersion get_WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11();
    public static MessageSecurityVersion get_WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10();
    public static MessageSecurityVersion get_WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10();
}
public class System.ServiceModel.OperationContext : object {
    public static OperationContext Current { get; public set; }
    public IExtensionCollection`1<OperationContext> Extensions { get; }
    public MessageHeaders IncomingMessageHeaders { get; }
    public MessageProperties IncomingMessageProperties { get; }
    public MessageVersion IncomingMessageVersion { get; }
    public bool IsUserContext { get; }
    public MessageHeaders OutgoingMessageHeaders { get; }
    public MessageProperties OutgoingMessageProperties { get; }
    public RequestContext RequestContext { get; public set; }
    public IContextChannel Channel { get; }
    public OperationContext(IContextChannel channel);
    public static OperationContext get_Current();
    public static void set_Current(OperationContext value);
    public sealed virtual IExtensionCollection`1<OperationContext> get_Extensions();
    public MessageHeaders get_IncomingMessageHeaders();
    public MessageProperties get_IncomingMessageProperties();
    public MessageVersion get_IncomingMessageVersion();
    public bool get_IsUserContext();
    public MessageHeaders get_OutgoingMessageHeaders();
    public MessageProperties get_OutgoingMessageProperties();
    public RequestContext get_RequestContext();
    public void set_RequestContext(RequestContext value);
    public void add_OperationCompleted(EventHandler value);
    public void remove_OperationCompleted(EventHandler value);
    public T GetCallbackChannel();
    public IContextChannel get_Channel();
}
public class System.ServiceModel.OperationContextScope : object {
    public OperationContextScope(IContextChannel channel);
    public OperationContextScope(OperationContext context);
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("64")]
public class System.ServiceModel.OperationContractAttribute : Attribute {
    public string Action { get; public set; }
    public bool AsyncPattern { get; public set; }
    public bool IsInitiating { get; public set; }
    public bool IsTerminating { get; public set; }
    public bool IsOneWay { get; public set; }
    public string Name { get; public set; }
    public string ReplyAction { get; public set; }
    public string get_Action();
    public void set_Action(string value);
    public bool get_AsyncPattern();
    public void set_AsyncPattern(bool value);
    public bool get_IsInitiating();
    public void set_IsInitiating(bool value);
    public bool get_IsTerminating();
    public void set_IsTerminating(bool value);
    public bool get_IsOneWay();
    public void set_IsOneWay(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ReplyAction();
    public void set_ReplyAction(string value);
}
public enum System.ServiceModel.OperationFormatStyle : Enum {
    public int value__;
    public static OperationFormatStyle Document;
    public static OperationFormatStyle Rpc;
}
public enum System.ServiceModel.OperationFormatUse : Enum {
    public int value__;
    public static OperationFormatUse Literal;
    public static OperationFormatUse Encoded;
}
public class System.ServiceModel.OptionalReliableSession : ReliableSession {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; public set; }
    public OptionalReliableSession(ReliableSessionBindingElement reliableSessionBindingElement);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
}
public class System.ServiceModel.ProtocolException : CommunicationException {
    public ProtocolException(string message);
    public ProtocolException(string message, Exception innerException);
    protected ProtocolException(SerializationInfo info, StreamingContext context);
}
public enum System.ServiceModel.QueuedDeliveryRequirementsMode : Enum {
    public int value__;
    public static QueuedDeliveryRequirementsMode Allowed;
    public static QueuedDeliveryRequirementsMode Required;
    public static QueuedDeliveryRequirementsMode NotAllowed;
}
public class System.ServiceModel.QuotaExceededException : Exception {
    public QuotaExceededException(string message);
    public QuotaExceededException(string message, Exception innerException);
    protected QuotaExceededException(SerializationInfo info, StreamingContext context);
}
public abstract class System.ServiceModel.ReliableMessagingVersion : object {
    public static ReliableMessagingVersion Default { get; }
    public static ReliableMessagingVersion WSReliableMessaging11 { get; }
    public static ReliableMessagingVersion WSReliableMessagingFebruary2005 { get; }
    public static ReliableMessagingVersion get_Default();
    public static ReliableMessagingVersion get_WSReliableMessaging11();
    public static ReliableMessagingVersion get_WSReliableMessagingFebruary2005();
}
public class System.ServiceModel.ReliableSession : object {
    [CompilerGeneratedAttribute]
private bool <Ordered>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <InactivityTimeout>k__BackingField;
    public bool Ordered { get; public set; }
    public TimeSpan InactivityTimeout { get; public set; }
    public ReliableSession(ReliableSessionBindingElement reliableSessionBindingElement);
    [CompilerGeneratedAttribute]
public bool get_Ordered();
    [CompilerGeneratedAttribute]
public void set_Ordered(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InactivityTimeout();
    [CompilerGeneratedAttribute]
public void set_InactivityTimeout(TimeSpan value);
}
public abstract class System.ServiceModel.Security.BasicSecurityProfileVersion : object {
    public static BasicSecurityProfileVersion BasicSecurityProfile10 { get; }
    public static BasicSecurityProfileVersion get_BasicSecurityProfile10();
}
public class System.ServiceModel.Security.HttpDigestClientCredential : object {
    public NetworkCredential ClientCredential { get; public set; }
    public NetworkCredential get_ClientCredential();
    public void set_ClientCredential(NetworkCredential value);
}
public abstract class System.ServiceModel.Security.IdentityVerifier : object {
    public static IdentityVerifier CreateDefault();
    public abstract virtual bool CheckAccess(EndpointIdentity identity, AuthorizationContext authContext);
    public abstract virtual bool TryGetIdentity(EndpointAddress reference, EndpointIdentity& identity);
}
internal interface System.ServiceModel.Security.ISecurityCommunicationObject {
    public TimeSpan DefaultOpenTimeout { get; }
    public TimeSpan DefaultCloseTimeout { get; }
    public abstract virtual TimeSpan get_DefaultOpenTimeout();
    public abstract virtual TimeSpan get_DefaultCloseTimeout();
    public abstract virtual void OnAbort();
    public abstract virtual Task OnCloseAsync(TimeSpan timeout);
    public abstract virtual void OnClosed();
    public abstract virtual void OnClosing();
    public abstract virtual void OnFaulted();
    public abstract virtual Task OnOpenAsync(TimeSpan timeout);
    public abstract virtual void OnOpened();
    public abstract virtual void OnOpening();
}
public interface System.ServiceModel.Security.ISecuritySession {
    public EndpointIdentity RemoteIdentity { get; }
    public abstract virtual EndpointIdentity get_RemoteIdentity();
}
public class System.ServiceModel.Security.MessageSecurityException : CommunicationException {
    public MessageSecurityException(string message);
    public MessageSecurityException(string message, Exception innerException);
    protected MessageSecurityException(SerializationInfo info, StreamingContext context);
}
public abstract class System.ServiceModel.Security.SecureConversationVersion : object {
    public static SecureConversationVersion Default { get; }
    public XmlDictionaryString Namespace { get; }
    public XmlDictionaryString Prefix { get; }
    public static SecureConversationVersion WSSecureConversationFeb2005 { get; }
    public static SecureConversationVersion WSSecureConversation13 { get; }
    public static SecureConversationVersion get_Default();
    public XmlDictionaryString get_Namespace();
    public XmlDictionaryString get_Prefix();
    public static SecureConversationVersion get_WSSecureConversationFeb2005();
    public static SecureConversationVersion get_WSSecureConversation13();
}
public class System.ServiceModel.Security.SecurityAccessDeniedException : CommunicationException {
    public SecurityAccessDeniedException(string message);
    public SecurityAccessDeniedException(string message, Exception innerException);
    protected SecurityAccessDeniedException(SerializationInfo info, StreamingContext context);
}
public abstract class System.ServiceModel.Security.SecurityAlgorithmSuite : object {
    [CompilerGeneratedAttribute]
private static SecurityAlgorithmSuite <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecurityAlgorithmSuite <Basic256>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecurityAlgorithmSuite <Basic256Sha256>k__BackingField;
    public static SecurityAlgorithmSuite TripleDes { get; }
    public string DefaultCanonicalizationAlgorithm { get; }
    public string DefaultDigestAlgorithm { get; }
    public string DefaultEncryptionAlgorithm { get; }
    public int DefaultEncryptionKeyDerivationLength { get; }
    public string DefaultSymmetricKeyWrapAlgorithm { get; }
    public string DefaultAsymmetricKeyWrapAlgorithm { get; }
    public string DefaultSymmetricSignatureAlgorithm { get; }
    public string DefaultAsymmetricSignatureAlgorithm { get; }
    public int DefaultSignatureKeyDerivationLength { get; }
    public int DefaultSymmetricKeyLength { get; }
    public static SecurityAlgorithmSuite Default { get; }
    public static SecurityAlgorithmSuite Basic256 { get; }
    public static SecurityAlgorithmSuite Basic256Sha256 { get; }
    public static SecurityAlgorithmSuite get_TripleDes();
    public abstract virtual string get_DefaultCanonicalizationAlgorithm();
    public abstract virtual string get_DefaultDigestAlgorithm();
    public abstract virtual string get_DefaultEncryptionAlgorithm();
    public abstract virtual int get_DefaultEncryptionKeyDerivationLength();
    public abstract virtual string get_DefaultSymmetricKeyWrapAlgorithm();
    public abstract virtual string get_DefaultAsymmetricKeyWrapAlgorithm();
    public abstract virtual string get_DefaultSymmetricSignatureAlgorithm();
    public abstract virtual string get_DefaultAsymmetricSignatureAlgorithm();
    public abstract virtual int get_DefaultSignatureKeyDerivationLength();
    public abstract virtual int get_DefaultSymmetricKeyLength();
    public abstract virtual bool IsSymmetricKeyLengthSupported(int length);
    public abstract virtual bool IsAsymmetricKeyLengthSupported(int length);
    [CompilerGeneratedAttribute]
public static SecurityAlgorithmSuite get_Default();
    [CompilerGeneratedAttribute]
public static SecurityAlgorithmSuite get_Basic256();
    [CompilerGeneratedAttribute]
public static SecurityAlgorithmSuite get_Basic256Sha256();
}
public abstract class System.ServiceModel.Security.SecurityCredentialsManager : object {
    public abstract virtual SecurityTokenManager CreateSecurityTokenManager();
}
public enum System.ServiceModel.Security.SecurityKeyEntropyMode : Enum {
    public int value__;
    public static SecurityKeyEntropyMode ClientEntropy;
    public static SecurityKeyEntropyMode ServerEntropy;
    public static SecurityKeyEntropyMode CombinedEntropy;
}
public class System.ServiceModel.Security.SecurityMessageProperty : object {
    [CompilerGeneratedAttribute]
private ServiceSecurityContext <ServiceSecurityContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<IAuthorizationPolicy> <ExternalAuthorizationPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityTokenSpecification <ProtectionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityTokenSpecification <InitiatorToken>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityTokenSpecification <RecipientToken>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityTokenSpecification <TransportToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SenderIdPrefix>k__BackingField;
    public ServiceSecurityContext ServiceSecurityContext { get; public set; }
    public ReadOnlyCollection`1<IAuthorizationPolicy> ExternalAuthorizationPolicies { get; public set; }
    public SecurityTokenSpecification ProtectionToken { get; public set; }
    public SecurityTokenSpecification InitiatorToken { get; public set; }
    public SecurityTokenSpecification RecipientToken { get; public set; }
    public SecurityTokenSpecification TransportToken { get; public set; }
    public string SenderIdPrefix { get; public set; }
    public bool HasIncomingSupportingTokens { get; }
    public Collection`1<SupportingTokenSpecification> IncomingSupportingTokens { get; }
    public Collection`1<SupportingTokenSpecification> OutgoingSupportingTokens { get; }
    internal bool HasOutgoingSupportingTokens { get; }
    [CompilerGeneratedAttribute]
public ServiceSecurityContext get_ServiceSecurityContext();
    [CompilerGeneratedAttribute]
public void set_ServiceSecurityContext(ServiceSecurityContext value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<IAuthorizationPolicy> get_ExternalAuthorizationPolicies();
    [CompilerGeneratedAttribute]
public void set_ExternalAuthorizationPolicies(ReadOnlyCollection`1<IAuthorizationPolicy> value);
    [CompilerGeneratedAttribute]
public SecurityTokenSpecification get_ProtectionToken();
    [CompilerGeneratedAttribute]
public void set_ProtectionToken(SecurityTokenSpecification value);
    [CompilerGeneratedAttribute]
public SecurityTokenSpecification get_InitiatorToken();
    [CompilerGeneratedAttribute]
public void set_InitiatorToken(SecurityTokenSpecification value);
    [CompilerGeneratedAttribute]
public SecurityTokenSpecification get_RecipientToken();
    [CompilerGeneratedAttribute]
public void set_RecipientToken(SecurityTokenSpecification value);
    [CompilerGeneratedAttribute]
public SecurityTokenSpecification get_TransportToken();
    [CompilerGeneratedAttribute]
public void set_TransportToken(SecurityTokenSpecification value);
    [CompilerGeneratedAttribute]
public string get_SenderIdPrefix();
    [CompilerGeneratedAttribute]
public void set_SenderIdPrefix(string value);
    public bool get_HasIncomingSupportingTokens();
    public Collection`1<SupportingTokenSpecification> get_IncomingSupportingTokens();
    public Collection`1<SupportingTokenSpecification> get_OutgoingSupportingTokens();
    internal bool get_HasOutgoingSupportingTokens();
    public sealed virtual IMessageProperty CreateCopy();
    public static SecurityMessageProperty GetOrCreate(Message message);
    public sealed virtual void Dispose();
}
public class System.ServiceModel.Security.SecurityNegotiationException : CommunicationException {
    public SecurityNegotiationException(string message);
    public SecurityNegotiationException(string message, Exception innerException);
    protected SecurityNegotiationException(SerializationInfo info, StreamingContext context);
}
public abstract class System.ServiceModel.Security.SecurityPolicyVersion : object {
    public string Namespace { get; }
    public string Prefix { get; }
    public static SecurityPolicyVersion WSSecurityPolicy11 { get; }
    public static SecurityPolicyVersion WSSecurityPolicy12 { get; }
    public string get_Namespace();
    public string get_Prefix();
    public static SecurityPolicyVersion get_WSSecurityPolicy11();
    public static SecurityPolicyVersion get_WSSecurityPolicy12();
}
public enum System.ServiceModel.Security.SecurityTokenAttachmentMode : Enum {
    public int value__;
    public static SecurityTokenAttachmentMode Signed;
    public static SecurityTokenAttachmentMode Endorsing;
    public static SecurityTokenAttachmentMode SignedEndorsing;
    public static SecurityTokenAttachmentMode SignedEncrypted;
}
public class System.ServiceModel.Security.SecurityTokenSpecification : object {
    public SecurityToken SecurityToken { get; }
    public ReadOnlyCollection`1<IAuthorizationPolicy> SecurityTokenPolicies { get; }
    public SecurityTokenSpecification(SecurityToken token, ReadOnlyCollection`1<IAuthorizationPolicy> tokenPolicies);
    public SecurityToken get_SecurityToken();
    public ReadOnlyCollection`1<IAuthorizationPolicy> get_SecurityTokenPolicies();
}
public abstract class System.ServiceModel.Security.SecurityVersion : object {
    public static SecurityVersion WSSecurity10 { get; }
    public static SecurityVersion WSSecurity11 { get; }
    public static SecurityVersion get_WSSecurity10();
    public static SecurityVersion get_WSSecurity11();
}
public class System.ServiceModel.Security.SupportingTokenSpecification : SecurityTokenSpecification {
    public SecurityTokenAttachmentMode SecurityTokenAttachmentMode { get; }
    public SupportingTokenSpecification(SecurityToken token, ReadOnlyCollection`1<IAuthorizationPolicy> tokenPolicies, SecurityTokenAttachmentMode attachmentMode);
    public SupportingTokenSpecification(SecurityToken token, ReadOnlyCollection`1<IAuthorizationPolicy> tokenPolicies, SecurityTokenAttachmentMode attachmentMode, SecurityTokenParameters tokenParameters);
    public SecurityTokenAttachmentMode get_SecurityTokenAttachmentMode();
}
public class System.ServiceModel.Security.Tokens.BinarySecretSecurityToken : SecurityToken {
    public string Id { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public int KeySize { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public BinarySecretSecurityToken(string id, Byte[] key);
    public BinarySecretSecurityToken(Byte[] key);
    protected BinarySecretSecurityToken(string id, int keySizeInBits, bool allowCrypto);
    protected BinarySecretSecurityToken(string id, Byte[] key, bool allowCrypto);
    public virtual string get_Id();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public int get_KeySize();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public Byte[] GetKeyBytes();
}
public class System.ServiceModel.Security.Tokens.InitiatorServiceModelSecurityTokenRequirement : ServiceModelSecurityTokenRequirement {
    public EndpointAddress TargetAddress { get; public set; }
    public Uri Via { get; public set; }
    public EndpointAddress get_TargetAddress();
    public void set_TargetAddress(EndpointAddress value);
    public Uri get_Via();
    public void set_Via(Uri value);
    public virtual string ToString();
}
public class System.ServiceModel.Security.Tokens.IssuedSecurityTokenParameters : SecurityTokenParameters {
    public MessageSecurityVersion DefaultMessageSecurityVersion { get; public set; }
    public EndpointAddress IssuerAddress { get; public set; }
    public Binding IssuerBinding { get; public set; }
    public SecurityKeyType KeyType { get; public set; }
    public string TokenType { get; public set; }
    protected IssuedSecurityTokenParameters(IssuedSecurityTokenParameters other);
    protected virtual SecurityTokenParameters CloneCore();
    public MessageSecurityVersion get_DefaultMessageSecurityVersion();
    public void set_DefaultMessageSecurityVersion(MessageSecurityVersion value);
    public EndpointAddress get_IssuerAddress();
    public void set_IssuerAddress(EndpointAddress value);
    public Binding get_IssuerBinding();
    public void set_IssuerBinding(Binding value);
    public SecurityKeyType get_KeyType();
    public void set_KeyType(SecurityKeyType value);
    public string get_TokenType();
    public void set_TokenType(string value);
}
public class System.ServiceModel.Security.Tokens.SecureConversationSecurityTokenParameters : SecurityTokenParameters {
    public SecurityBindingElement BootstrapSecurityBindingElement { get; public set; }
    public bool RequireCancellation { get; public set; }
    public SecureConversationSecurityTokenParameters(SecurityBindingElement bootstrapSecurityBindingElement);
    public SecurityBindingElement get_BootstrapSecurityBindingElement();
    public void set_BootstrapSecurityBindingElement(SecurityBindingElement value);
    protected virtual SecurityTokenParameters CloneCore();
    public bool get_RequireCancellation();
    public void set_RequireCancellation(bool value);
}
public abstract class System.ServiceModel.Security.Tokens.SecurityTokenParameters : object {
    public bool RequireDerivedKeys { get; public set; }
    protected abstract virtual SecurityTokenParameters CloneCore();
    public bool get_RequireDerivedKeys();
    public void set_RequireDerivedKeys(bool value);
    public SecurityTokenParameters Clone();
}
public abstract class System.ServiceModel.Security.Tokens.ServiceModelSecurityTokenRequirement : SecurityTokenRequirement {
    public bool IsInitiator { get; }
    public SecurityAlgorithmSuite SecurityAlgorithmSuite { get; public set; }
    public SecurityBindingElement SecurityBindingElement { get; public set; }
    public EndpointAddress IssuerAddress { get; public set; }
    public Binding IssuerBinding { get; public set; }
    public SecurityBindingElement SecureConversationSecurityBindingElement { get; public set; }
    public SecurityTokenVersion MessageSecurityVersion { get; public set; }
    public string TransportScheme { get; public set; }
    public static string ChannelParametersCollectionProperty { get; }
    public bool get_IsInitiator();
    public SecurityAlgorithmSuite get_SecurityAlgorithmSuite();
    public void set_SecurityAlgorithmSuite(SecurityAlgorithmSuite value);
    public SecurityBindingElement get_SecurityBindingElement();
    public void set_SecurityBindingElement(SecurityBindingElement value);
    public EndpointAddress get_IssuerAddress();
    public void set_IssuerAddress(EndpointAddress value);
    public Binding get_IssuerBinding();
    public void set_IssuerBinding(Binding value);
    public SecurityBindingElement get_SecureConversationSecurityBindingElement();
    public void set_SecureConversationSecurityBindingElement(SecurityBindingElement value);
    public SecurityTokenVersion get_MessageSecurityVersion();
    public void set_MessageSecurityVersion(SecurityTokenVersion value);
    public string get_TransportScheme();
    public void set_TransportScheme(string value);
    public static string get_ChannelParametersCollectionProperty();
}
public class System.ServiceModel.Security.Tokens.SspiSecurityToken : SecurityToken {
    public string Id { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public bool AllowUnauthenticatedCallers { get; }
    public TokenImpersonationLevel ImpersonationLevel { get; }
    public bool AllowNtlm { get; }
    public NetworkCredential NetworkCredential { get; }
    public bool ExtractGroupsForWindowsAccounts { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public SspiSecurityToken(TokenImpersonationLevel impersonationLevel, bool allowNtlm, NetworkCredential networkCredential);
    public SspiSecurityToken(NetworkCredential networkCredential, bool extractGroupsForWindowsAccounts, bool allowUnauthenticatedCallers);
    public virtual string get_Id();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public bool get_AllowUnauthenticatedCallers();
    public TokenImpersonationLevel get_ImpersonationLevel();
    public bool get_AllowNtlm();
    public NetworkCredential get_NetworkCredential();
    public bool get_ExtractGroupsForWindowsAccounts();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
}
public class System.ServiceModel.Security.Tokens.SupportingTokenParameters : object {
    public Collection`1<SecurityTokenParameters> Endorsing { get; }
    public Collection`1<SecurityTokenParameters> SignedEncrypted { get; }
    public Collection`1<SecurityTokenParameters> Signed { get; }
    public Collection`1<SecurityTokenParameters> get_Endorsing();
    public Collection`1<SecurityTokenParameters> get_SignedEncrypted();
    public SupportingTokenParameters Clone();
    public Collection`1<SecurityTokenParameters> get_Signed();
}
public class System.ServiceModel.Security.Tokens.UserNameSecurityTokenParameters : SecurityTokenParameters {
    protected virtual SecurityTokenParameters CloneCore();
}
public abstract class System.ServiceModel.Security.TrustVersion : object {
    public static TrustVersion Default { get; }
    public XmlDictionaryString Namespace { get; }
    public XmlDictionaryString Prefix { get; }
    public static TrustVersion WSTrustFeb2005 { get; }
    public static TrustVersion WSTrust13 { get; }
    public static TrustVersion get_Default();
    public XmlDictionaryString get_Namespace();
    public XmlDictionaryString get_Prefix();
    public static TrustVersion get_WSTrustFeb2005();
    public static TrustVersion get_WSTrust13();
}
public class System.ServiceModel.Security.UserNamePasswordClientCredential : object {
    public string Password { get; public set; }
    public string UserName { get; public set; }
    public string get_Password();
    public void set_Password(string value);
    public string get_UserName();
    public void set_UserName(string value);
}
public class System.ServiceModel.Security.WindowsClientCredential : object {
    public TokenImpersonationLevel AllowedImpersonationLevel { get; public set; }
    public NetworkCredential ClientCredential { get; public set; }
    public TokenImpersonationLevel get_AllowedImpersonationLevel();
    public void set_AllowedImpersonationLevel(TokenImpersonationLevel value);
    public NetworkCredential get_ClientCredential();
    public void set_ClientCredential(NetworkCredential value);
}
public class System.ServiceModel.Security.X509CertificateInitiatorClientCredential : object {
    public X509Certificate2 Certificate { get; public set; }
    public X509Certificate2 get_Certificate();
    public void set_Certificate(X509Certificate2 value);
    public void SetCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue);
    public void SetCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName);
}
public class System.ServiceModel.Security.X509CertificateRecipientClientCredential : object {
    public X509ServiceCertificateAuthentication Authentication { get; }
    public X509Certificate2 DefaultCertificate { get; public set; }
    public Dictionary`2<Uri, X509Certificate2> ScopedCertificates { get; }
    public X509ServiceCertificateAuthentication SslCertificateAuthentication { get; public set; }
    public X509ServiceCertificateAuthentication get_Authentication();
    public X509Certificate2 get_DefaultCertificate();
    public void set_DefaultCertificate(X509Certificate2 value);
    public Dictionary`2<Uri, X509Certificate2> get_ScopedCertificates();
    public X509ServiceCertificateAuthentication get_SslCertificateAuthentication();
    public void set_SslCertificateAuthentication(X509ServiceCertificateAuthentication value);
    public void SetDefaultCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue);
    public void SetDefaultCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName);
    public void SetScopedCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue, Uri targetService);
    public void SetScopedCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName, Uri targetService);
}
public enum System.ServiceModel.Security.X509CertificateValidationMode : Enum {
    public int value__;
    public static X509CertificateValidationMode ChainTrust;
    public static X509CertificateValidationMode Custom;
    public static X509CertificateValidationMode None;
    public static X509CertificateValidationMode PeerOrChainTrust;
    public static X509CertificateValidationMode PeerTrust;
}
public class System.ServiceModel.Security.X509ServiceCertificateAuthentication : object {
    public X509CertificateValidationMode CertificateValidationMode { get; public set; }
    public X509CertificateValidator CustomCertificateValidator { get; public set; }
    public X509RevocationMode RevocationMode { get; public set; }
    public StoreLocation TrustedStoreLocation { get; public set; }
    public X509CertificateValidationMode get_CertificateValidationMode();
    public void set_CertificateValidationMode(X509CertificateValidationMode value);
    public X509CertificateValidator get_CustomCertificateValidator();
    public void set_CustomCertificateValidator(X509CertificateValidator value);
    public X509RevocationMode get_RevocationMode();
    public void set_RevocationMode(X509RevocationMode value);
    public StoreLocation get_TrustedStoreLocation();
    public void set_TrustedStoreLocation(StoreLocation value);
}
public enum System.ServiceModel.SecurityMode : Enum {
    public int value__;
    public static SecurityMode Message;
    public static SecurityMode None;
    public static SecurityMode Transport;
    public static SecurityMode TransportWithMessageCredential;
}
public class System.ServiceModel.ServerTooBusyException : CommunicationException {
    public ServerTooBusyException(string message);
    public ServerTooBusyException(string message, Exception innerException);
    protected ServerTooBusyException(SerializationInfo info, StreamingContext context);
}
public class System.ServiceModel.ServiceActivationException : CommunicationException {
    public ServiceActivationException(string message);
    public ServiceActivationException(string message, Exception innerException);
    protected ServiceActivationException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("1028")]
public class System.ServiceModel.ServiceContractAttribute : Attribute {
    public Type CallbackContract { get; public set; }
    public string ConfigurationName { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public SessionMode SessionMode { get; public set; }
    public Type get_CallbackContract();
    public void set_CallbackContract(Type value);
    public string get_ConfigurationName();
    public void set_ConfigurationName(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public SessionMode get_SessionMode();
    public void set_SessionMode(SessionMode value);
}
[AttributeUsageAttribute("1092")]
public class System.ServiceModel.ServiceKnownTypeAttribute : Attribute {
    public Type DeclaringType { get; }
    public string MethodName { get; }
    public Type Type { get; }
    public ServiceKnownTypeAttribute(string methodName);
    public ServiceKnownTypeAttribute(string methodName, Type declaringType);
    public ServiceKnownTypeAttribute(Type type);
    public Type get_DeclaringType();
    public string get_MethodName();
    public Type get_Type();
}
public class System.ServiceModel.ServiceSecurityContext : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<IAuthorizationPolicy> <AuthorizationPolicies>k__BackingField;
    public static ServiceSecurityContext Anonymous { get; }
    public bool IsAnonymous { get; }
    public IIdentity PrimaryIdentity { get; }
    public ReadOnlyCollection`1<IAuthorizationPolicy> AuthorizationPolicies { get; public set; }
    public AuthorizationContext AuthorizationContext { get; }
    public ServiceSecurityContext(ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies);
    public ServiceSecurityContext(AuthorizationContext authorizationContext);
    public ServiceSecurityContext(AuthorizationContext authorizationContext, ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies);
    public static ServiceSecurityContext get_Anonymous();
    public bool get_IsAnonymous();
    public IIdentity get_PrimaryIdentity();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<IAuthorizationPolicy> get_AuthorizationPolicies();
    [CompilerGeneratedAttribute]
public void set_AuthorizationPolicies(ReadOnlyCollection`1<IAuthorizationPolicy> value);
    public AuthorizationContext get_AuthorizationContext();
}
public enum System.ServiceModel.SessionMode : Enum {
    public int value__;
    public static SessionMode Allowed;
    public static SessionMode Required;
    public static SessionMode NotAllowed;
}
public class System.ServiceModel.SpnEndpointIdentity : EndpointIdentity {
    public static TimeSpan SpnLookupTime { get; public set; }
    public SpnEndpointIdentity(string spnName);
    public static TimeSpan get_SpnLookupTime();
    public static void set_SpnLookupTime(TimeSpan value);
}
public enum System.ServiceModel.TransferMode : Enum {
    public int value__;
    public static TransferMode Buffered;
    public static TransferMode Streamed;
    public static TransferMode StreamedRequest;
    public static TransferMode StreamedResponse;
}
public class System.ServiceModel.UnknownMessageReceivedEventArgs : EventArgs {
    public Message Message { get; }
    public Message get_Message();
}
public class System.ServiceModel.UpnEndpointIdentity : EndpointIdentity {
    public UpnEndpointIdentity(string upnName);
}
public class System.ServiceModel.X509CertificateEndpointIdentity : EndpointIdentity {
    [CompilerGeneratedAttribute]
private X509Certificate2Collection <Certificates>k__BackingField;
    public X509Certificate2Collection Certificates { get; }
    public X509CertificateEndpointIdentity(X509Certificate2 certificate);
    [CompilerGeneratedAttribute]
public X509Certificate2Collection get_Certificates();
}
[AttributeUsageAttribute("1092")]
public class System.ServiceModel.XmlSerializerFormatAttribute : Attribute {
    public OperationFormatStyle Style { get; public set; }
    public bool SupportFaults { get; public set; }
    public OperationFormatUse Use { get; public set; }
    public OperationFormatStyle get_Style();
    public void set_Style(OperationFormatStyle value);
    public bool get_SupportFaults();
    public void set_SupportFaults(bool value);
    public OperationFormatUse get_Use();
    public void set_Use(OperationFormatUse value);
}
