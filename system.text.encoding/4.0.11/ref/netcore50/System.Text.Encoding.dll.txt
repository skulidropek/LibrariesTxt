public abstract class System.Text.Decoder : object {
    public DecoderFallback Fallback { get; public set; }
    public DecoderFallbackBuffer FallbackBuffer { get; }
    public DecoderFallback get_Fallback();
    public void set_Fallback(DecoderFallback value);
    public DecoderFallbackBuffer get_FallbackBuffer();
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
    public abstract virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count, bool flush);
    public abstract virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, bool flush);
    public virtual void Reset();
}
public class System.Text.DecoderExceptionFallback : DecoderFallback {
    public int MaxCharCount { get; }
    public virtual int get_MaxCharCount();
    public virtual DecoderFallbackBuffer CreateFallbackBuffer();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
}
public abstract class System.Text.DecoderFallback : object {
    public static DecoderFallback ExceptionFallback { get; }
    public int MaxCharCount { get; }
    public static DecoderFallback ReplacementFallback { get; }
    public static DecoderFallback get_ExceptionFallback();
    public abstract virtual int get_MaxCharCount();
    public static DecoderFallback get_ReplacementFallback();
    public abstract virtual DecoderFallbackBuffer CreateFallbackBuffer();
}
public abstract class System.Text.DecoderFallbackBuffer : object {
    public int Remaining { get; }
    public abstract virtual int get_Remaining();
    public abstract virtual bool Fallback(Byte[] bytesUnknown, int index);
    public abstract virtual char GetNextChar();
    public abstract virtual bool MovePrevious();
    public virtual void Reset();
}
public class System.Text.DecoderFallbackException : ArgumentException {
    public Byte[] BytesUnknown { get; }
    public int Index { get; }
    public DecoderFallbackException(string message);
    public DecoderFallbackException(string message, Byte[] bytesUnknown, int index);
    public DecoderFallbackException(string message, Exception innerException);
    public Byte[] get_BytesUnknown();
    public int get_Index();
}
public class System.Text.DecoderReplacementFallback : DecoderFallback {
    public string DefaultString { get; }
    public int MaxCharCount { get; }
    public DecoderReplacementFallback(string replacement);
    public string get_DefaultString();
    public virtual int get_MaxCharCount();
    public virtual DecoderFallbackBuffer CreateFallbackBuffer();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
}
public abstract class System.Text.Encoder : object {
    public EncoderFallback Fallback { get; public set; }
    public EncoderFallbackBuffer FallbackBuffer { get; }
    public EncoderFallback get_Fallback();
    public void set_Fallback(EncoderFallback value);
    public EncoderFallbackBuffer get_FallbackBuffer();
    public virtual void Convert(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex, int byteCount, bool flush, Int32& charsUsed, Int32& bytesUsed, Boolean& completed);
    public abstract virtual int GetByteCount(Char[] chars, int index, int count, bool flush);
    public abstract virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex, bool flush);
    public virtual void Reset();
}
public class System.Text.EncoderExceptionFallback : EncoderFallback {
    public int MaxCharCount { get; }
    public virtual int get_MaxCharCount();
    public virtual EncoderFallbackBuffer CreateFallbackBuffer();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
}
public abstract class System.Text.EncoderFallback : object {
    public static EncoderFallback ExceptionFallback { get; }
    public int MaxCharCount { get; }
    public static EncoderFallback ReplacementFallback { get; }
    public static EncoderFallback get_ExceptionFallback();
    public abstract virtual int get_MaxCharCount();
    public static EncoderFallback get_ReplacementFallback();
    public abstract virtual EncoderFallbackBuffer CreateFallbackBuffer();
}
public abstract class System.Text.EncoderFallbackBuffer : object {
    public int Remaining { get; }
    public abstract virtual int get_Remaining();
    public abstract virtual bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
    public abstract virtual bool Fallback(char charUnknown, int index);
    public abstract virtual char GetNextChar();
    public abstract virtual bool MovePrevious();
    public virtual void Reset();
}
public class System.Text.EncoderFallbackException : ArgumentException {
    public char CharUnknown { get; }
    public char CharUnknownHigh { get; }
    public char CharUnknownLow { get; }
    public int Index { get; }
    public EncoderFallbackException(string message);
    public EncoderFallbackException(string message, Exception innerException);
    public char get_CharUnknown();
    public char get_CharUnknownHigh();
    public char get_CharUnknownLow();
    public int get_Index();
    public bool IsUnknownSurrogate();
}
public class System.Text.EncoderReplacementFallback : EncoderFallback {
    public string DefaultString { get; }
    public int MaxCharCount { get; }
    public EncoderReplacementFallback(string replacement);
    public string get_DefaultString();
    public virtual int get_MaxCharCount();
    public virtual EncoderFallbackBuffer CreateFallbackBuffer();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
}
public abstract class System.Text.Encoding : object {
    public static Encoding ASCII { get; }
    public static Encoding BigEndianUnicode { get; }
    public int CodePage { get; }
    public DecoderFallback DecoderFallback { get; }
    public EncoderFallback EncoderFallback { get; }
    public string EncodingName { get; }
    public bool IsSingleByte { get; }
    public static Encoding Unicode { get; }
    public static Encoding UTF32 { get; }
    public static Encoding UTF7 { get; }
    public static Encoding UTF8 { get; }
    public string WebName { get; }
    protected Encoding(int codePage);
    protected Encoding(int codePage, EncoderFallback encoderFallback, DecoderFallback decoderFallback);
    public static Encoding get_ASCII();
    public static Encoding get_BigEndianUnicode();
    public virtual int get_CodePage();
    public DecoderFallback get_DecoderFallback();
    public EncoderFallback get_EncoderFallback();
    public virtual string get_EncodingName();
    public virtual bool get_IsSingleByte();
    public static Encoding get_Unicode();
    public static Encoding get_UTF32();
    public static Encoding get_UTF7();
    public static Encoding get_UTF8();
    public virtual string get_WebName();
    public virtual object Clone();
    public static Byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, Byte[] bytes);
    public static Byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, Byte[] bytes, int index, int count);
    public virtual bool Equals(object value);
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(Char[] chars);
    public abstract virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string s);
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual Byte[] GetBytes(Char[] chars);
    public virtual Byte[] GetBytes(Char[] chars, int index, int count);
    public abstract virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual Byte[] GetBytes(string s);
    public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetCharCount(Byte[] bytes);
    public abstract virtual int GetCharCount(Byte[] bytes, int index, int count);
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    public virtual Char[] GetChars(Byte[] bytes);
    public virtual Char[] GetChars(Byte[] bytes, int index, int count);
    public abstract virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
    public virtual Encoder GetEncoder();
    public static Encoding GetEncoding(int codepage);
    public static Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback);
    public static Encoding GetEncoding(string name);
    public static Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback);
    public virtual int GetHashCode();
    public abstract virtual int GetMaxByteCount(int charCount);
    public abstract virtual int GetMaxCharCount(int byteCount);
    public virtual Byte[] GetPreamble();
    [CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
public string GetString(Byte* bytes, int byteCount);
    public virtual string GetString(Byte[] bytes);
    public virtual string GetString(Byte[] bytes, int index, int count);
    [SecurityCriticalAttribute]
public static void RegisterProvider(EncodingProvider provider);
}
public abstract class System.Text.EncodingProvider : object {
    public abstract virtual Encoding GetEncoding(int codepage);
    public virtual Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback);
    public abstract virtual Encoding GetEncoding(string name);
    public virtual Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback);
}
